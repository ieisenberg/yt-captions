[
  {
    "start": "0",
    "end": "161000"
  },
  {
    "text": "[Music]",
    "start": "4350",
    "end": "8870"
  },
  {
    "text": "right now this reminds me of you know the first time I ever came to Horus I think it was again it was for uh Zhao it",
    "start": "13019",
    "end": "20520"
  },
  {
    "text": "was 2007 and it was I was on a big stage in a big room reflectors on me and I",
    "start": "20520",
    "end": "27240"
  },
  {
    "text": "just could not see anyone in the audience uh it was pretty daunting and you couldn't get visual feedback you",
    "start": "27240",
    "end": "33180"
  },
  {
    "text": "didn't know what was going on so uh yeah I think I prefer smaller rooms and smaller crowds yeah so yeah I'm",
    "start": "33180",
    "end": "39780"
  },
  {
    "text": "Francesco um the founder and technical director of Ireland Solutions um I guess you know being very",
    "start": "39780",
    "end": "45899"
  },
  {
    "text": "privileged to see a programming language or called erlang you know turn into an ecosystem of programming languages I've",
    "start": "45899",
    "end": "52620"
  },
  {
    "text": "worked with this guy on and off since 95 I think it was when I joined the computer science lab as an intern that's",
    "start": "52620",
    "end": "59460"
  },
  {
    "text": "when you think you know everything until you learn something new and uh and then once you've learned something you you",
    "start": "59460",
    "end": "65100"
  },
  {
    "text": "know everything until yeah Robert comes along and teaches you something new and uh yeah and uh yeah 25 years old no 30",
    "start": "65100",
    "end": "72720"
  },
  {
    "text": "years on almost freaking his own almost yeah you realize you're still learning I've you know called for two books",
    "start": "72720",
    "end": "79680"
  },
  {
    "text": "um two rally titles uh a couple times a year ahead of toxic University where I teach a concurrency rented programming",
    "start": "79680",
    "end": "85979"
  },
  {
    "text": "course so I actually finished one just last week and yeah I'm very much kind of a believer that you know it's you know",
    "start": "85979",
    "end": "93780"
  },
  {
    "text": "the more languages you know and the more programming Concepts you know the better programmer you become",
    "start": "93780",
    "end": "99000"
  },
  {
    "text": "definitely yeah I'm Robert burning um I was originally a physicist but now we're",
    "start": "99000",
    "end": "104640"
  },
  {
    "text": "going back for 40 years it's a bit further but yeah and then I started working for",
    "start": "104640",
    "end": "110939"
  },
  {
    "text": "um Ericsson in the computer science lab and one of the things we were looking at eventually became Alan",
    "start": "110939",
    "end": "118259"
  },
  {
    "text": "and we did more work on that I worked in blue tail one of the first companies outside",
    "start": "118259",
    "end": "124200"
  },
  {
    "text": "Erickson to use it to use our language product and that was in the it boom which was",
    "start": "124200",
    "end": "129360"
  },
  {
    "text": "fantastic in its own way uh until they ended and crashed then I worked it for a while for Swedish",
    "start": "129360",
    "end": "135840"
  },
  {
    "text": "military procurement modeling and simulation group and for the last 12 years 13 years I've been part of Airline",
    "start": "135840",
    "end": "142560"
  },
  {
    "text": "Solutions doing some Consulting but mainly training things like this",
    "start": "142560",
    "end": "148860"
  },
  {
    "text": "this is where principal language experts so you yeah right that's what they say you know and",
    "start": "148860",
    "end": "154200"
  },
  {
    "text": "for those of you who've seen Airline the movie oh hello Robert hello Francesco hello Joe yes so um for those of you who",
    "start": "154200",
    "end": "162300"
  },
  {
    "start": "161000",
    "end": "442000"
  },
  {
    "text": "don't know it this is Joe Armstrong he's the co-inventor of earning uh one of the co-inventors of erlang and it was Joe",
    "start": "162300",
    "end": "168840"
  },
  {
    "text": "who actually went in and coined the term concurrency rented programming uh during his opening keynote at the MIT",
    "start": "168840",
    "end": "176040"
  },
  {
    "text": "lightweight languages Workshop in 2002. um so yeah long long time ago at the",
    "start": "176040",
    "end": "181260"
  },
  {
    "text": "time no one knew what airline was no one had heard of Joe Armstrong so at least",
    "start": "181260",
    "end": "187080"
  },
  {
    "text": "for us and for him it was a very very big thing but big thing uh you know Paul Graham was on the program it was a",
    "start": "187080",
    "end": "193140"
  },
  {
    "text": "program chair um other speakers included uh Matt's Matsumoto so the creator of Ruby so uh",
    "start": "193140",
    "end": "200819"
  },
  {
    "text": "he went in and I was looking for the video a couple of weeks ago and it wasn't on the MIT side we need to reach",
    "start": "200819",
    "end": "207239"
  },
  {
    "text": "out to them because it's a historical piece where I think it's one of the first times where Airline got presented",
    "start": "207239",
    "end": "212519"
  },
  {
    "text": "to the White the world and not only did it coin and for the first time you",
    "start": "212519",
    "end": "218400"
  },
  {
    "text": "mentioned the word concurrent oriented programming he actually went in uh in his talk he went in and introduced his",
    "start": "218400",
    "end": "225120"
  },
  {
    "text": "tenants attendant for those of you uh who don't know the meaning of the word is a belief",
    "start": "225120",
    "end": "231480"
  },
  {
    "text": "uh it's a principle or a belief and the tendency described was were the",
    "start": "231480",
    "end": "237540"
  },
  {
    "text": "following you know the world is concurrent so we're all human beings in here we're all kind of interacting",
    "start": "237540",
    "end": "244040"
  },
  {
    "text": "concurrently with each other so you know there are a lot of things kind of going on concurrent in here",
    "start": "244040",
    "end": "249959"
  },
  {
    "text": "um things in the world don't share data so we do not share data we do not share brains we each have our own brain",
    "start": "249959",
    "end": "257100"
  },
  {
    "text": "and we stored information we want and you know we maybe go in change it",
    "start": "257100",
    "end": "265080"
  },
  {
    "text": "adapt it transform it we Chuck away uh dad jokes and and uh you know other",
    "start": "265080",
    "end": "271740"
  },
  {
    "text": "other bad jokes and things which aren't relevant and store the things which are relevant and thirdly you know things will",
    "start": "271740",
    "end": "279780"
  },
  {
    "text": "communicate with messages so I'm right now asynchronously broadcasting a message to all of you and your each each",
    "start": "279780",
    "end": "286500"
  },
  {
    "text": "and every one of you storing whatever is relevant of this message in your brain if you want to reply to me you reply to",
    "start": "286500",
    "end": "292139"
  },
  {
    "text": "me asynchronously and there's nothing stopping Robert from speaking you know when I'm speaking so no no no and and we",
    "start": "292139",
    "end": "297840"
  },
  {
    "text": "can do it any messages at the same time yeah and we can do it concurrently basically and last but not least",
    "start": "297840",
    "end": "304500"
  },
  {
    "text": "happens things fail um I you know I could go out and",
    "start": "304500",
    "end": "310740"
  },
  {
    "text": "I don't know catch covet for example and and be off you know be in isolation for a few weeks",
    "start": "310740",
    "end": "316680"
  },
  {
    "text": "and you know despite me catching covet and being in isolation for a few weeks everything else around we will still",
    "start": "316680",
    "end": "322860"
  },
  {
    "text": "continue and you know things will keep on working things can keep on running so yeah",
    "start": "322860",
    "end": "328680"
  },
  {
    "text": "things can fail you know sometimes they can recover sometimes they won't recover now based on this these tenants what",
    "start": "328680",
    "end": "336300"
  },
  {
    "text": "that what they did at the computer science lab is they went and built a programming language around this a",
    "start": "336300",
    "end": "342360"
  },
  {
    "text": "programming language around this beliefs and this you know this tenants is what gave",
    "start": "342360",
    "end": "348060"
  },
  {
    "text": "Mike Jones Robert uh the main ideas of Ireland and what are the main ideas well",
    "start": "348060",
    "end": "353580"
  },
  {
    "text": "the main ideas are we were looking at Telecom applications working at Erickson we're looking at how can we better",
    "start": "353580",
    "end": "359160"
  },
  {
    "text": "program Telecom applications and then we start thinking about what's fundamental for a telecom application",
    "start": "359160",
    "end": "366180"
  },
  {
    "text": "what what do we need to attack and one thing of course is concurrency there's a",
    "start": "366180",
    "end": "372120"
  },
  {
    "text": "lot of stuff going if you look at a telephone exchange for those days and today as well there's a lot of things going on at the same time you might have",
    "start": "372120",
    "end": "379080"
  },
  {
    "text": "hundreds of thousands of connections to tens of thousands of calls going on plus all the things the switch itself is",
    "start": "379080",
    "end": "385020"
  },
  {
    "text": "doing all these things working controlling so you need to you need to be able to",
    "start": "385020",
    "end": "390120"
  },
  {
    "text": "handle concurrency massive concurrency uh one another requirement of the system",
    "start": "390120",
    "end": "395819"
  },
  {
    "text": "was it should never crash and we're from The Firm belief that",
    "start": "395819",
    "end": "401639"
  },
  {
    "text": "things will always go wrong you will always get errors in your system in your code and your data so how can you detect",
    "start": "401639",
    "end": "407940"
  },
  {
    "text": "errors occurring how can you handle areas to make sure the system does not crash and keep on going",
    "start": "407940",
    "end": "414259"
  },
  {
    "text": "another feature we had to attack was that okay in exchange telephone exchange",
    "start": "414259",
    "end": "419699"
  },
  {
    "text": "had to be able to upgrade itself while it was running you could not take down the exchange",
    "start": "419699",
    "end": "425100"
  },
  {
    "text": "upgrades upgraded while it was running and these were things we were looking at",
    "start": "425100",
    "end": "430199"
  },
  {
    "text": "in the when we're trying to solve this problem and thinking about how can we Define design a language in a way of",
    "start": "430199",
    "end": "435840"
  },
  {
    "text": "doing it which handle these in the right in a nice way so Robert claims he was working this is",
    "start": "435840",
    "end": "443639"
  },
  {
    "start": "442000",
    "end": "545000"
  },
  {
    "text": "a picture from his time at the computer science laboratory yeah it looks like very very hard work it was very hard",
    "start": "443639",
    "end": "450000"
  },
  {
    "text": "work it was very hard work the reason is we were going to an it show and um that",
    "start": "450000",
    "end": "456180"
  },
  {
    "text": "you see a little box you see up there that was actually a real small local exchange which we were using doing our",
    "start": "456180",
    "end": "462120"
  },
  {
    "text": "testing so we're running everything against Real Hardware we thought showing that at a conference is not going to",
    "start": "462120",
    "end": "467699"
  },
  {
    "text": "attract anyone there's no blinking light or anything like this in it so I thought how can we attract people we said well",
    "start": "467699",
    "end": "473220"
  },
  {
    "text": "we'll run it we'll run electric training controlled by Alan which we did and this is me",
    "start": "473220",
    "end": "478800"
  },
  {
    "text": "experimenting with the system here building up how getting things to work and there were magnetic sensors along",
    "start": "478800",
    "end": "484199"
  },
  {
    "text": "the track so they could they would detect when a locomotive went over and things like this so you can keep track",
    "start": "484199",
    "end": "489479"
  },
  {
    "text": "of where trains were um it went slightly overboard I would admit I ended up writing an ATC system",
    "start": "489479",
    "end": "496319"
  },
  {
    "text": "so you can program in where you wanted the trains to go run two or three trains at the same time where you wanted them",
    "start": "496319",
    "end": "502740"
  },
  {
    "text": "to go and would make sure things were stopped in the right place there were no collisions or anything like this as well for it it just worked right",
    "start": "502740",
    "end": "509099"
  },
  {
    "text": "but it was a lot of fun it was it was a lot of fun it ran for a couple of days without any",
    "start": "509099",
    "end": "515279"
  },
  {
    "text": "any problems at all the worst thing was something we could not attack that the track got dirty",
    "start": "515279",
    "end": "522120"
  },
  {
    "text": "and it was a completely different um type of application for Ally there was a lot of concurrency I mean every train",
    "start": "522120",
    "end": "528180"
  },
  {
    "text": "had its own process every switch had its own process you had the ATC system which was a number of processes all act",
    "start": "528180",
    "end": "533760"
  },
  {
    "text": "interacting with each other um unfortunately we couldn't sell it to anyone but the idea is good",
    "start": "533760",
    "end": "541399"
  },
  {
    "text": "a lot of people came to look but you know we're talking about processes you know what is a process uh",
    "start": "541800",
    "end": "548700"
  },
  {
    "start": "545000",
    "end": "1808000"
  },
  {
    "text": "the main building block when you're working in the ironing ecosystem so you know I'll use the word Airline here but",
    "start": "548700",
    "end": "554160"
  },
  {
    "text": "we can mean Alex here we can mean uh this flavored erlang we can mean yeah",
    "start": "554160",
    "end": "560100"
  },
  {
    "text": "there are about 35 languages running in the ecosystem today and what brings",
    "start": "560100",
    "end": "566640"
  },
  {
    "text": "this language in common is the main building blocks of the programs and there happen to be processes so you know",
    "start": "566640",
    "end": "572220"
  },
  {
    "text": "this is an example here of some Elixir code where you know which goes in and",
    "start": "572220",
    "end": "579899"
  },
  {
    "text": "calls you know the built-in function called spawn which creates a process you pass it in the module name a function",
    "start": "579899",
    "end": "586740"
  },
  {
    "text": "and a list of zero more arguments and what this does is it goes in and creates a new process which starts executing in",
    "start": "586740",
    "end": "593700"
  },
  {
    "text": "that function and will continue executing the function either until there's no more code to execute and we use",
    "start": "593700",
    "end": "600180"
  },
  {
    "text": "um recursion to keep on kind of looping so processes inferior can never die or until the runtime error occurs and yeah",
    "start": "600180",
    "end": "607680"
  },
  {
    "text": "it takes sub microseconds to to go in and create a process so literally you",
    "start": "607680",
    "end": "613440"
  },
  {
    "text": "know microseconds not even midi six microseconds and each process each process you know will use a few K",
    "start": "613440",
    "end": "621660"
  },
  {
    "text": "of memory no sorry not even if UK a few bytes of memory at least you know when you first created it so it's a really",
    "start": "621660",
    "end": "628860"
  },
  {
    "text": "really lightweight really really powerful construct and",
    "start": "628860",
    "end": "634320"
  },
  {
    "text": "you know the reason you know they decoupled uh the concurrency model from the underlying open operating system I",
    "start": "634320",
    "end": "640680"
  },
  {
    "text": "mean that was a decision that took very very early on because at the time the underlying operating systems you could",
    "start": "640680",
    "end": "645839"
  },
  {
    "text": "have a maximum say 16 threads you know think in terms of deck or HP workstation or from the late 80s that's what you had",
    "start": "645839",
    "end": "653100"
  },
  {
    "text": "to work with so you had to create your own operating system on top of the operating system to get concurrency at",
    "start": "653100",
    "end": "658680"
  },
  {
    "text": "scale back then where you know you you'd have you know tens of thousands of",
    "start": "658680",
    "end": "664019"
  },
  {
    "text": "processes running in your system at any one time where each processor was a phone call and",
    "start": "664019",
    "end": "670860"
  },
  {
    "text": "even today you know obviously the virtual machines have evolved and today you know we're talking about millions of",
    "start": "670860",
    "end": "676800"
  },
  {
    "text": "processes in the virtual machine which can happen and then which can interact with each other at any one point in time",
    "start": "676800",
    "end": "682740"
  },
  {
    "text": "and you know to have millions of processes you can't even do that with friends you know they have to be lightweight and",
    "start": "682740",
    "end": "689519"
  },
  {
    "text": "you know well it's not every product needs you know millions of processes you know interacting many do and only it's",
    "start": "689519",
    "end": "697140"
  },
  {
    "text": "the same cost to build say a web server for your local flower shop as it would be to to implement",
    "start": "697140",
    "end": "704040"
  },
  {
    "text": "um a web server for for I don't know say cars.com for",
    "start": "704040",
    "end": "709680"
  },
  {
    "text": "example and big difference is the same cost but the big difference is that you know your local flower shop the web",
    "start": "709680",
    "end": "715019"
  },
  {
    "text": "server will scale if it needs be on a single machine and",
    "start": "715019",
    "end": "721640"
  },
  {
    "text": "and it's a pretty simple application because each request here happens to be each web HTTP request each request",
    "start": "721740",
    "end": "728160"
  },
  {
    "text": "coming through web sockets happens to you know be handled in its own process",
    "start": "728160",
    "end": "733680"
  },
  {
    "text": "yeah typically there'll be a couple of processes for it but they can be multiple things so how does the process",
    "start": "733680",
    "end": "739920"
  },
  {
    "text": "work so here we're spawning a the pit head spawning the module Foo calling the",
    "start": "739920",
    "end": "746940"
  },
  {
    "text": "function print ad and this this is Alexia code for it but",
    "start": "746940",
    "end": "753480"
  },
  {
    "text": "does it and what the print add function does it takes two numbers adds them together and outputs the result",
    "start": "753480",
    "end": "759540"
  },
  {
    "text": "that's all that's all the print ad function does it's a very simple little function what happens here is that a",
    "start": "759540",
    "end": "765240"
  },
  {
    "text": "process it runs the function it's been started with and when that function terminates the",
    "start": "765240",
    "end": "771540"
  },
  {
    "text": "process dies so this process will make one function call the core print ad we'll put them",
    "start": "771540",
    "end": "778440"
  },
  {
    "text": "together right I O protester right out then that process will just die and terminate",
    "start": "778440",
    "end": "783480"
  },
  {
    "text": "it's done it's working How It Ends so that you get back to the idea is we're not scared of creating Pro Temp",
    "start": "783480",
    "end": "791120"
  },
  {
    "text": "processes and having them go away and things like this we don't put it typically don't put effort into making",
    "start": "791120",
    "end": "796800"
  },
  {
    "text": "sure that a process does a lot of stuff and things like this for it very simple and here the process just terminates",
    "start": "796800",
    "end": "803579"
  },
  {
    "text": "normally it's done its job and it ends and in terms of not being scared what you want is you want to process for each",
    "start": "803579",
    "end": "808800"
  },
  {
    "text": "truly concurrent activity in the system that's really what you want and and so you know also when a process terminates",
    "start": "808800",
    "end": "815279"
  },
  {
    "text": "uh Robert uses the word die I use Terminator but uh it's",
    "start": "815279",
    "end": "821820"
  },
  {
    "text": "um when it terminates all of the memories freed straight away so that means that the garbage collector doesn't",
    "start": "821820",
    "end": "828180"
  },
  {
    "text": "need to trick be triggered because the memory all of a sudden all becomes available",
    "start": "828180",
    "end": "833959"
  },
  {
    "text": "yeah okay so what happens if something goes wrong in the process so here again we're spawning the module",
    "start": "834000",
    "end": "840899"
  },
  {
    "text": "through and the function kaboom and we're passing into arguments one and zero so it'll be a b one and B will be",
    "start": "840899",
    "end": "847740"
  },
  {
    "text": "zero here and we're dividing a by B so we're dividing by zero and this generates an error",
    "start": "847740",
    "end": "855060"
  },
  {
    "text": "if this generates an error and what happens when that when that happens that process in the era crashes",
    "start": "855060",
    "end": "863160"
  },
  {
    "text": "the process ends it crashes the difference is before the previous one had just ended normally here it crashes",
    "start": "863160",
    "end": "869220"
  },
  {
    "text": "and goes away and dies again we're not scared of we're not scared of deleting process and having",
    "start": "869220",
    "end": "874620"
  },
  {
    "text": "processes die so these are two ways the process can end either it does what it's supposed to and ends or it can crash",
    "start": "874620",
    "end": "881940"
  },
  {
    "text": "we do that and usually processes will crash for two reasons one is either your",
    "start": "881940",
    "end": "887100"
  },
  {
    "text": "state is corrupted it's corrupt so you know for example B should never have B been set to zero so something wrong",
    "start": "887100",
    "end": "894000"
  },
  {
    "text": "happened along the way or there's a bug in your code and you know tell me who's ever written",
    "start": "894000",
    "end": "899339"
  },
  {
    "text": "and they've shipped your bug free code it just doesn't happen you need to accept that there are bugs in your code",
    "start": "899339",
    "end": "904740"
  },
  {
    "text": "you can generate bugs in any system yes and I can show even how Haskell code which compiles this buggy you know it's",
    "start": "904740",
    "end": "911760"
  },
  {
    "text": "uh there are bugs in in every program and so the idea behind this kind of let",
    "start": "911760",
    "end": "918120"
  },
  {
    "text": "it crash approach is you know let your processes fail but by process is failing that means you",
    "start": "918120",
    "end": "925440"
  },
  {
    "text": "you clear the whole state of the process because there's probably something wrong in the state which caused the runtime",
    "start": "925440",
    "end": "931500"
  },
  {
    "text": "error which caused the process to to crash and by clearing that state you",
    "start": "931500",
    "end": "936660"
  },
  {
    "text": "then let someone else deal with the problem you let someone else deal with the error not the programmer who caused",
    "start": "936660",
    "end": "944040"
  },
  {
    "text": "it in the first place if it is a programmer that is yeah",
    "start": "944040",
    "end": "949320"
  },
  {
    "text": "and yeah so how do processors communicate we've more or less said they're isolated",
    "start": "949320",
    "end": "955500"
  },
  {
    "text": "from each other which they are they're strictly isolated so how do they communicate they send messages",
    "start": "955500",
    "end": "961740"
  },
  {
    "text": "so each process has a PID stands for process identifier and here in impaired",
    "start": "961740",
    "end": "967920"
  },
  {
    "text": "one it we have PID 2 which refers to this process and we just send a message to it",
    "start": "967920",
    "end": "973620"
  },
  {
    "text": "and that that the system will now send the message to that process and then prepared one will just keep on going the",
    "start": "973620",
    "end": "980100"
  },
  {
    "text": "message passing is asynchronous we'll just keep on going and there's a message that arrived appeared to",
    "start": "980100",
    "end": "985500"
  },
  {
    "text": "that's how the processes communicate that's the only way for them to communicate by sending messages backwards and forwards",
    "start": "985500",
    "end": "993079"
  },
  {
    "text": "and I think this is a very common pattern we tend to call uh at the most once asynchronous message passing so we",
    "start": "993600",
    "end": "1001160"
  },
  {
    "text": "send a message off but we have no guarantees that the receiving process will receive that",
    "start": "1001160",
    "end": "1006440"
  },
  {
    "text": "message because the receiving process might have terminated okay so if you need to send and pray yes",
    "start": "1006440",
    "end": "1014360"
  },
  {
    "text": "you send them pray now if the process is still alive in the VM in the in the virtual machine then yes you are that",
    "start": "1014360",
    "end": "1020540"
  },
  {
    "text": "message won't be lost you know that message will only be lost in case the receiving process has terminated that",
    "start": "1020540",
    "end": "1026839"
  },
  {
    "text": "means there's a bug so if you need the guarantees that messages have been",
    "start": "1026839",
    "end": "1033079"
  },
  {
    "text": "received you need to have you know the receiving process acknowledge that message and it does so with an asynchronous call",
    "start": "1033079",
    "end": "1040938"
  },
  {
    "text": "and if you don't receive an acknowledge message well you put in your business logic trick of your program you decide",
    "start": "1040939",
    "end": "1047540"
  },
  {
    "text": "what to do so you could send a new message to someone else and wait for a reply and if you don't",
    "start": "1047540",
    "end": "1053240"
  },
  {
    "text": "get a reply you continue until you get an acknowledgment and we go from at the most once to an at",
    "start": "1053240",
    "end": "1061400"
  },
  {
    "text": "least one strategy which is which is again very very common and then there's a third strategy which",
    "start": "1061400",
    "end": "1067039"
  },
  {
    "text": "is at the most once we notification I send off a message to Robert and Robert",
    "start": "1067039",
    "end": "1072799"
  },
  {
    "text": "maybe receives it and responds great I know the request was successful or if I",
    "start": "1072799",
    "end": "1078320"
  },
  {
    "text": "then time out I don't know what state Robert's in and you know we'll get back to that",
    "start": "1078320",
    "end": "1084380"
  },
  {
    "text": "particular example a little bit later because your robber could be super busy so the message is queued and you'll",
    "start": "1084380",
    "end": "1090140"
  },
  {
    "text": "eventually get to it or he might have crashed or gone on vacation",
    "start": "1090140",
    "end": "1095360"
  },
  {
    "text": "and uh and so yeah and so yeah we don't know so you know assuming",
    "start": "1095360",
    "end": "1102500"
  },
  {
    "text": "you're transferring money from get bank account a to bank account B you need to know if Robert's executed that code or",
    "start": "1102500",
    "end": "1108020"
  },
  {
    "text": "not and well this is yeah so so yeah so",
    "start": "1108020",
    "end": "1115100"
  },
  {
    "text": "messages when so when I send a message to Robert was he does what he does is he",
    "start": "1115100",
    "end": "1120320"
  },
  {
    "text": "takes that message and puts it in in something called the mailbox each process has its own mailbox",
    "start": "1120320",
    "end": "1126080"
  },
  {
    "text": "and whenever the process which owns a mailbox enters a received close so",
    "start": "1126080",
    "end": "1133640"
  },
  {
    "text": "there's a receive clause which goes in and scans the messages sequentially and the",
    "start": "1133640",
    "end": "1140059"
  },
  {
    "text": "and what it allows you to do is to selectively pick what messages you want to read",
    "start": "1140059",
    "end": "1146419"
  },
  {
    "text": "so this is an incredibly powerful construct because again it reduces the complexity",
    "start": "1146419",
    "end": "1152240"
  },
  {
    "text": "of the code you go in you send a message so assume you know it's not payday yet you receive",
    "start": "1152240",
    "end": "1158780"
  },
  {
    "text": "lots of posts what you want to do is you want to only pick up your the birthday cards and the letters from your grandmother",
    "start": "1158780",
    "end": "1164419"
  },
  {
    "text": "you don't want to touch the bills you just let the bills pile up in in your mailbox and you pick up all the other",
    "start": "1164419",
    "end": "1169460"
  },
  {
    "text": "posts and magazines and whatnot and then all of a sudden payday comes and at that point okay",
    "start": "1169460",
    "end": "1175760"
  },
  {
    "text": "let's pay the bills you pick up all the bills you take them out and and you clear them and this is",
    "start": "1175760",
    "end": "1182360"
  },
  {
    "text": "this is you know what makes for example you know processes uh which you use for",
    "start": "1182360",
    "end": "1188480"
  },
  {
    "text": "finite State machines incredibly powerful because it simplifies the whole code any any events which come out of",
    "start": "1188480",
    "end": "1194600"
  },
  {
    "text": "sequence are just left in the mailbox and then handled where you know you're in a state where you can actually handle",
    "start": "1194600",
    "end": "1200720"
  },
  {
    "text": "them instead of having to handle them and having a case four messages coming out of sequence which just really",
    "start": "1200720",
    "end": "1207140"
  },
  {
    "text": "increments and makes your complexity explode yeah when you start thinking about you you look at these systems",
    "start": "1207140",
    "end": "1212480"
  },
  {
    "text": "you'll find there's an awful lot of messages type different type of messages being sent between processors",
    "start": "1212480",
    "end": "1217520"
  },
  {
    "text": "and if I had to handle every message everywhere every time that would completely drown out the whole system",
    "start": "1217520",
    "end": "1223400"
  },
  {
    "text": "this allows me to restrict that in a very nice way so failure detection itself is the",
    "start": "1223400",
    "end": "1230720"
  },
  {
    "text": "reason which actually got Aaron to be concurrent so you need to you know if how do you",
    "start": "1230720",
    "end": "1237980"
  },
  {
    "text": "detect failure well you need something to detect that something else has failed",
    "start": "1237980",
    "end": "1243140"
  },
  {
    "text": "so you need at least two processes where one process monitors the other process",
    "start": "1243140",
    "end": "1248500"
  },
  {
    "text": "and I think you know this reminds me of a story with Mike Williams so one of the three co-inventors of airline in his",
    "start": "1248500",
    "end": "1255020"
  },
  {
    "text": "early days he was working on mobile telephony systems when your mobile telephony systems could only call other",
    "start": "1255020",
    "end": "1260299"
  },
  {
    "text": "mobile telephony systems and what was the error handling they had in place well they had a human being sitting in",
    "start": "1260299",
    "end": "1268160"
  },
  {
    "text": "front of a screen looking at that screen 24 7. and as soon as this human being saw lots of texts kind of scrolling by",
    "start": "1268160",
    "end": "1276260"
  },
  {
    "text": "they knew the system had crashed and so they go in and manually restart it and conceptually you know it works in a",
    "start": "1276260",
    "end": "1284059"
  },
  {
    "text": "similar way the only thing is that they've replaced this human being with another process and so processes go in",
    "start": "1284059",
    "end": "1291500"
  },
  {
    "text": "and monitor each other by calling by linking to each other and what this does",
    "start": "1291500",
    "end": "1296960"
  },
  {
    "text": "it creates a bi-directional link between these two processes and if a process which is linked to each",
    "start": "1296960",
    "end": "1303500"
  },
  {
    "text": "other crashes yeah it's an exit signal is sent but the",
    "start": "1303500",
    "end": "1310340"
  },
  {
    "text": "system says oh I'm linked to this process it sends an exit signal to that process",
    "start": "1310340",
    "end": "1315980"
  },
  {
    "text": "in this case we've paid one crashes and exit system sends an exit signal to fit two it's something I don't have to",
    "start": "1315980",
    "end": "1322159"
  },
  {
    "text": "explicitly do myself just the very fact that I'm linked to that process means the system does that",
    "start": "1322159",
    "end": "1327620"
  },
  {
    "text": "and when that exit signal from the crash arrives at PID 2 it crashes bit too",
    "start": "1327620",
    "end": "1333919"
  },
  {
    "text": "all right yeah yeah correction that does not is not as bad as it sounds right",
    "start": "1333919",
    "end": "1340940"
  },
  {
    "text": "because this allows you to set up a system where I have a bunch of community cooperating processes working together",
    "start": "1340940",
    "end": "1346760"
  },
  {
    "text": "and if one crashes I'll take the whole lot down which is often a very good way of doing it however",
    "start": "1346760",
    "end": "1352520"
  },
  {
    "text": "that how am I going to monitor stuff right that's that's all we get into for it I mean imagine you've got two",
    "start": "1352520",
    "end": "1358700"
  },
  {
    "text": "processes each handling the receiver of a phone call and the initiator of a phone call",
    "start": "1358700",
    "end": "1364640"
  },
  {
    "text": "and if one of these two processes terminates you want the other process to terminate because yeah you've lost one",
    "start": "1364640",
    "end": "1369799"
  },
  {
    "text": "of the two parties on the call you want to clean up after yourself you don't want to have lots of dangling processes",
    "start": "1369799",
    "end": "1375020"
  },
  {
    "text": "so you know the two will be linked to each other and you know and yeah you solve the problem so that's when you",
    "start": "1375020",
    "end": "1380539"
  },
  {
    "text": "could go link but you actually have the ability to do what we call to trap exits",
    "start": "1380539",
    "end": "1386480"
  },
  {
    "text": "so by calling process yeah flag you know and sending the Trap exit flag true",
    "start": "1386480",
    "end": "1391880"
  },
  {
    "text": "if if the process terminates abnormally it sends an exit signal to pin two",
    "start": "1391880",
    "end": "1398299"
  },
  {
    "text": "but this PID 2 having you know trapping exits will convert that Isaac signal to",
    "start": "1398299",
    "end": "1403880"
  },
  {
    "text": "a message and place it in the process mailbox and there",
    "start": "1403880",
    "end": "1410120"
  },
  {
    "text": "these exit signals can then be received in the received Clause like any other message",
    "start": "1410120",
    "end": "1415280"
  },
  {
    "text": "so what this allows you to do is to say oh bit one is terminated let's clean up after it so if it's for",
    "start": "1415280",
    "end": "1422900"
  },
  {
    "text": "example if we knew that PID 1 was in the middle of a bank transaction transferring money from account a to",
    "start": "1422900",
    "end": "1428480"
  },
  {
    "text": "account B when you know pit2 receives the exit signal something's gone wrong here",
    "start": "1428480",
    "end": "1433760"
  },
  {
    "text": "let's check you know has the money been taken away has the money been debited",
    "start": "1433760",
    "end": "1441080"
  },
  {
    "text": "from account one a yes it has okay has it been credited to account B no it",
    "start": "1441080",
    "end": "1448340"
  },
  {
    "text": "hasn't okay at this point we can decide to either you know",
    "start": "1448340",
    "end": "1453919"
  },
  {
    "text": "um you know credit the money or refund process a and again that's you know",
    "start": "1453919",
    "end": "1459919"
  },
  {
    "text": "that's based on the business logic so this is what we would be doing in this case so we're saying you know when we're",
    "start": "1459919",
    "end": "1465740"
  },
  {
    "text": "saying here let processes crash don't do defensive programming what we're saying is you know don't ignore the errors just",
    "start": "1465740",
    "end": "1473840"
  },
  {
    "text": "handle these errors in a slightly different way and let someone else handle these errors in a generic way and",
    "start": "1473840",
    "end": "1480320"
  },
  {
    "text": "and that's where you know programmers avoid defensive programming I mean",
    "start": "1480320",
    "end": "1485720"
  },
  {
    "text": "programs when they go in and put defensive programming you know Snippets in their code they end up inserting even more bugs than what",
    "start": "1485720",
    "end": "1491840"
  },
  {
    "text": "they they're able to address because if you knew what was causing your process to crash or was causing the bugs they",
    "start": "1491840",
    "end": "1497240"
  },
  {
    "text": "wouldn't be there in the first place so you can't really defend yourselves against their look",
    "start": "1497240",
    "end": "1503679"
  },
  {
    "text": "and yeah this is just saying that well if you have a set of Link processes and",
    "start": "1504020",
    "end": "1509780"
  },
  {
    "text": "one crashes it sends an extra signal to the ones it's linked to and they'll crash and send so you get you'll",
    "start": "1509780",
    "end": "1515120"
  },
  {
    "text": "propagate the exit signal to the whole set of processes linked together this is just saying that if PID 2 here is",
    "start": "1515120",
    "end": "1520880"
  },
  {
    "text": "trapping exits when it gets the exit signal from head one it won't propagate it because it's not crashing itself",
    "start": "1520880",
    "end": "1526820"
  },
  {
    "text": "it's hand it's catching that error knowing knows what to do with the error cleaning up or whatever it might be we're ignoring it maybe it's just",
    "start": "1526820",
    "end": "1533779"
  },
  {
    "text": "something we don't care if it dies but it will not send it on by default 2.3",
    "start": "1533779",
    "end": "1539179"
  },
  {
    "text": "think of idiomatic Java how do you know if Java Fred is terminated or even a go routine",
    "start": "1539179",
    "end": "1545360"
  },
  {
    "text": "if a go routine you know crashes you have no idea it's crashed here we find",
    "start": "1545360",
    "end": "1550580"
  },
  {
    "text": "out immediately you know polling and you know and Building Things on top of it here we find out immediately and we can",
    "start": "1550580",
    "end": "1557600"
  },
  {
    "text": "react immediately to it so a phone calls dropped let's set it up again very very",
    "start": "1557600",
    "end": "1563659"
  },
  {
    "text": "quickly you know maybe even before your the line drops and",
    "start": "1563659",
    "end": "1568880"
  },
  {
    "text": "you know what we've often seen happen is a lot of programming languages bolting on concurrency",
    "start": "1568880",
    "end": "1574840"
  },
  {
    "text": "but and adding concurrency even to Modern programming languages but what we've",
    "start": "1574840",
    "end": "1580580"
  },
  {
    "text": "rarely seen are these error propagate these asynchronous error propagation uh channels which allow you to detect",
    "start": "1580580",
    "end": "1587419"
  },
  {
    "text": "failure so you know it's it's something which",
    "start": "1587419",
    "end": "1592760"
  },
  {
    "text": "we've even tried to explain often to language inventors but if you're not setting out to solve a problem of a",
    "start": "1592760",
    "end": "1599240"
  },
  {
    "text": "system you know which never fails or fault tolerance systems it's not something you know you realize you need until you know someone goes in and it",
    "start": "1599240",
    "end": "1606740"
  },
  {
    "text": "hits a wall it does mean you have to think a lot when you're designing the architecture of your system you have to",
    "start": "1606740",
    "end": "1612200"
  },
  {
    "text": "think a lot about saying which okay this group of processes this type of process they crash what am I supposed to do with",
    "start": "1612200",
    "end": "1618020"
  },
  {
    "text": "them ignore them maybe or monitor them and clean up after them or maybe I",
    "start": "1618020",
    "end": "1624260"
  },
  {
    "text": "should restart them because you'll have some processes in the system which are so fundamental with",
    "start": "1624260",
    "end": "1629779"
  },
  {
    "text": "what they're doing is so fundamental to the system that if they go away I can't say the system's working it might be",
    "start": "1629779",
    "end": "1634880"
  },
  {
    "text": "providing fundamental services for them and I can use the links and the exit",
    "start": "1634880",
    "end": "1640760"
  },
  {
    "text": "signals and the trapping to monitor those and what we what we will then do here is we have processes we call",
    "start": "1640760",
    "end": "1646880"
  },
  {
    "text": "supervisors they're just normal processes but their job is to monitor other processes so this process",
    "start": "1646880",
    "end": "1652940"
  },
  {
    "text": "supervisor here monitors these three processes and one of those dies it knows",
    "start": "1652940",
    "end": "1658580"
  },
  {
    "text": "what to do maybe you should restart that process so if you continue providing the service",
    "start": "1658580",
    "end": "1663980"
  },
  {
    "text": "maybe you should kill them all because they're all working together in restart to terminate them IQ process",
    "start": "1663980",
    "end": "1671240"
  },
  {
    "text": "I'm not going to go any more of that yeah or do other things as well too for it but yeah but so so that's another",
    "start": "1671240",
    "end": "1677000"
  },
  {
    "text": "thing that might be necessary it's a system detector this this service is providing is so fundamental I have to",
    "start": "1677000",
    "end": "1682640"
  },
  {
    "text": "make sure it keeps going and the process is die because something goes wrong but I will restart them and I'll typically have a process we call a",
    "start": "1682640",
    "end": "1689059"
  },
  {
    "text": "supervisor to do the work it does that that's its job informatively slightly",
    "start": "1689059",
    "end": "1695720"
  },
  {
    "text": "sarcastic here we can say in this type of system it's all the workers that do all the work right the supervisors don't",
    "start": "1695720",
    "end": "1701840"
  },
  {
    "text": "do any work best case they restart something yeah yeah with exception of links I think",
    "start": "1701840",
    "end": "1708380"
  },
  {
    "text": "none of what we're talking about is uh is new um you know think of small talk",
    "start": "1708380",
    "end": "1714740"
  },
  {
    "text": "in small talk you've got objects objects do not share memory and they",
    "start": "1714740",
    "end": "1720559"
  },
  {
    "text": "communicate with each other through message passing and yeah by the way I mean this is a quote from lnk",
    "start": "1720559",
    "end": "1727580"
  },
  {
    "text": "um and you know it's uh and Allen K is the person who coined the term uh referring",
    "start": "1727580",
    "end": "1735080"
  },
  {
    "text": "to this as object-oriented programming um and yeah it's uh it actually",
    "start": "1735080",
    "end": "1742940"
  },
  {
    "text": "you know actually got Joe Armstrong the co-inventor of Airline here in orders I think it was",
    "start": "1742940",
    "end": "1748960"
  },
  {
    "text": "2004 2005 when you first came and spoke at Zhao to then he claim well you know actually in fact so you know with",
    "start": "1748960",
    "end": "1755720"
  },
  {
    "text": "tongue-in-cheek uh uh pointing out that well you know Airline might be the only object around",
    "start": "1755720",
    "end": "1762260"
  },
  {
    "text": "the Ang which being used out there you know because it's based on message passing you've got isolation between objects and you've got polymorphism and",
    "start": "1762260",
    "end": "1768140"
  },
  {
    "text": "he said that we have a bit of tongue-in-cheek because not everyone agreed but to quote Allen K I mean this",
    "start": "1768140",
    "end": "1774559"
  },
  {
    "text": "whole thing with inheritance is something which you know came after uh oh was invented it wasn't there in the",
    "start": "1774559",
    "end": "1780799"
  },
  {
    "text": "first place I can just make one one extra comment on crashing process is because we crash processes that means",
    "start": "1780799",
    "end": "1786140"
  },
  {
    "text": "they have to be isolated because they were sharing data and one of the process sharing data crashed it",
    "start": "1786140",
    "end": "1791539"
  },
  {
    "text": "might ruin the date of the other processes so they are totally isolated so we can quite happily crash a process and won't",
    "start": "1791539",
    "end": "1797779"
  },
  {
    "text": "ruin anything for anyone else again all these things fit together once you start fiddling when thinking about",
    "start": "1797779",
    "end": "1803720"
  },
  {
    "text": "them so they started working with you know erlang you know the first",
    "start": "1803720",
    "end": "1809840"
  },
  {
    "start": "1808000",
    "end": "2313000"
  },
  {
    "text": "products they're sort of using erling for okay maybe 92 they were shipped in 94 and they started using it at Erickson",
    "start": "1809840",
    "end": "1816320"
  },
  {
    "text": "on a large scale in 95 96. so why does all of this matter today I",
    "start": "1816320",
    "end": "1824179"
  },
  {
    "text": "think 30 years on after you started your work you know what why is it so important you know if you think of",
    "start": "1824179",
    "end": "1829460"
  },
  {
    "text": "today's systems they'll all be distributed by Nature think of mobile",
    "start": "1829460",
    "end": "1834860"
  },
  {
    "text": "you know you've got your mobile apps you've got you know connecting to serverless infrastructure connecting to",
    "start": "1834860",
    "end": "1842059"
  },
  {
    "text": "content Management Systems connecting to to do you know to Cloud Edge you've got iot systems devices",
    "start": "1842059",
    "end": "1849679"
  },
  {
    "text": "any system today connected to the internet has to be both scalable and reliable and you know concurrency based",
    "start": "1849679",
    "end": "1856880"
  },
  {
    "text": "on notion memory is the key to distribution of your services and microservices for that matter",
    "start": "1856880",
    "end": "1863120"
  },
  {
    "text": "so you know what you end up doing is you distribute your state for scale and you copy it for resilience",
    "start": "1863120",
    "end": "1870679"
  },
  {
    "text": "and and to do this efficiently you need a programming model which can handle this out of the box",
    "start": "1870679",
    "end": "1876380"
  },
  {
    "text": "and it's the concurrency model here is a concurrency model based on notion memory",
    "start": "1876380",
    "end": "1881779"
  },
  {
    "text": "and message passing which gives you both so basically if you've got a notion memory a concurrency model you get",
    "start": "1881779",
    "end": "1889520"
  },
  {
    "text": "distribution by default because you've got two processes and it doesn't matter these processes don't show memory so it",
    "start": "1889520",
    "end": "1895520"
  },
  {
    "text": "doesn't matter where you locate these two processes it could be the same program but could they could be running on separate machines",
    "start": "1895520",
    "end": "1902299"
  },
  {
    "text": "right so you get distribution as soon as you've got a program which can run on separate machines",
    "start": "1902299",
    "end": "1909080"
  },
  {
    "text": "you've got scalability because you can scale not only vertically but also horizontally",
    "start": "1909080",
    "end": "1915020"
  },
  {
    "text": "and you've got reliability because if you happen to lose a machine if you've got a copy of the date on another",
    "start": "1915020",
    "end": "1920960"
  },
  {
    "text": "machine they said the machine can kick in and take over so they're all kind of connected to each",
    "start": "1920960",
    "end": "1926659"
  },
  {
    "text": "other not only add multi-core to the game and distribution together",
    "start": "1926659",
    "end": "1933799"
  },
  {
    "text": "gives you parallelism so not only can you scale horizontally but you can also now scale vertically",
    "start": "1933799",
    "end": "1940700"
  },
  {
    "text": "because two processes can easily be placed on two separate cores and run independently of each other and",
    "start": "1940700",
    "end": "1947120"
  },
  {
    "text": "obviously it becomes more expensive you've got two processes running on the same core message passing is very cheap",
    "start": "1947120",
    "end": "1952520"
  },
  {
    "text": "they're running two different cores on the same chipset becomes a bit more expensive uh on on two separate chips on",
    "start": "1952520",
    "end": "1960260"
  },
  {
    "text": "the same computer a bit more expensive and you know two chipsets onto separate computers even more expensive but the",
    "start": "1960260",
    "end": "1966380"
  },
  {
    "text": "programming model the whole logic behind it is exactly the same and",
    "start": "1966380",
    "end": "1972860"
  },
  {
    "text": "it took me a while to realize but I managed to get in 2018 uh Carl Hewitt so",
    "start": "1972860",
    "end": "1978980"
  },
  {
    "text": "the creator of the actor model uh Tony  who created new concurrent sequential process and Joe Armstrong who",
    "start": "1978980",
    "end": "1985760"
  },
  {
    "text": "created um Airline style concurrency co-created earnings out concurrency together on the same in the same room",
    "start": "1985760",
    "end": "1992059"
  },
  {
    "text": "uh same sofa for a panel discussion and these were",
    "start": "1992059",
    "end": "1997519"
  },
  {
    "text": "the people who drove you know forward kind of the research around concurrency and the question I asked them was what",
    "start": "1997519",
    "end": "2004480"
  },
  {
    "text": "problem were you trying to solve that was the first opening question I asked them all and card Hewitt who created",
    "start": "2004480",
    "end": "2010960"
  },
  {
    "text": "active model replied oh I was trying to figure out how to program distributed systems",
    "start": "2010960",
    "end": "2017559"
  },
  {
    "text": "that was the research problem he was trying to solve Tony",
    "start": "2017559",
    "end": "2022960"
  },
  {
    "text": "who creating a concurrent sequential processes oh I was trying to figure out how to program transputers so the",
    "start": "2022960",
    "end": "2028840"
  },
  {
    "text": "predecessor of multi-core architectures Andrew Armstrong replied oh",
    "start": "2028840",
    "end": "2034779"
  },
  {
    "text": "I was trying to figure out how to implement fault tolerant systems",
    "start": "2034779",
    "end": "2040059"
  },
  {
    "text": "so no one said scalability but again it's you know scalability is one of the side effects we got but three people",
    "start": "2040059",
    "end": "2047679"
  },
  {
    "text": "coming up independent of each other with very very similar Solutions all",
    "start": "2047679",
    "end": "2053679"
  },
  {
    "text": "something appears to be different problems but in fact boil down and are very very similar in nature and very",
    "start": "2053679",
    "end": "2061419"
  },
  {
    "text": "much connected to each other yeah so it kind of really really kind of those answers blew me away because I I",
    "start": "2061419",
    "end": "2066820"
  },
  {
    "text": "had never made that connection well we were all all the three very",
    "start": "2066820",
    "end": "2073720"
  },
  {
    "text": "problem oriented we were out to so we had a problem we're out to solve solve the problem",
    "start": "2073720",
    "end": "2080080"
  },
  {
    "text": "and that's that's what we were doing that's why we that's why they ended up looking like it does quickly for thought",
    "start": "2080080",
    "end": "2085480"
  },
  {
    "text": "that this was a good way of solving the problem and that's the same with the other was Carl Hewitt and um Tony Hall",
    "start": "2085480",
    "end": "2091540"
  },
  {
    "text": "as well too how do I solve the problem what do I need to do to solve the problem is it",
    "start": "2091540",
    "end": "2096820"
  },
  {
    "text": "very problem oriented and whilst uh Tony and Carl you knew of his uh each other's research and",
    "start": "2096820",
    "end": "2104260"
  },
  {
    "text": "you know and and they cooperated uh we had not we we didn't know the actor",
    "start": "2104260",
    "end": "2109420"
  },
  {
    "text": "model yeah when we were doing this we did not know the actor model we found out later when people wrote it wrote",
    "start": "2109420",
    "end": "2114640"
  },
  {
    "text": "articles about our language saying it implemented the actor modern then we go out and find the actor model we find yes it did",
    "start": "2114640",
    "end": "2120520"
  },
  {
    "text": "and I met Carl Hewitt a few years well four years ago about this and I mentioned this to him",
    "start": "2120520",
    "end": "2127500"
  },
  {
    "text": "embarrassed because we had to know about the actor model he said no that's very good because the actor model that had",
    "start": "2127780",
    "end": "2133720"
  },
  {
    "text": "come out at a more theoretical point of view and we arrived at a very pragmatic point of view he thought that these two",
    "start": "2133720",
    "end": "2139540"
  },
  {
    "text": "were so close together show the strength of the actor model itself right and just goes to show you know good",
    "start": "2139540",
    "end": "2145119"
  },
  {
    "text": "inventions get invented at least once at least once and in this case yeah it was three times you can find this panel on",
    "start": "2145119",
    "end": "2152200"
  },
  {
    "text": "YouTube just search on um the hashtag talk concurrency and uh and and you you'll you'll be able",
    "start": "2152200",
    "end": "2159280"
  },
  {
    "text": "to find it there so this is yes we tend to separate",
    "start": "2159280",
    "end": "2166060"
  },
  {
    "text": "concurrency and parallelism they're not from our point of view they're not the same thing",
    "start": "2166060",
    "end": "2171940"
  },
  {
    "text": "concurrency that's that's a property of the problem you're trying to solve in your solution",
    "start": "2171940",
    "end": "2178119"
  },
  {
    "text": "like if I'm doing a web server I want to have lots of connections running onto running concurrently in the same system",
    "start": "2178119",
    "end": "2183700"
  },
  {
    "text": "for it whereas we view parallelism that's a property the underlying system you're running on",
    "start": "2183700",
    "end": "2189700"
  },
  {
    "text": "so I might write my concurrent web server that can handle a hundred thousand connections on something only running on 10 cores",
    "start": "2189700",
    "end": "2197020"
  },
  {
    "text": "parallelism is in the 10 cores at the bottom the concurrencies in in the problem and in my solution to the",
    "start": "2197020",
    "end": "2203020"
  },
  {
    "text": "problem and that way they're not directly connected to each other which also means when I'm designing my",
    "start": "2203020",
    "end": "2208900"
  },
  {
    "text": "thing for my concurrent problem I don't really have to think about at that time what the parallelism the underlying",
    "start": "2208900",
    "end": "2214480"
  },
  {
    "text": "system is I don't have to ice very very very very very seldom have to retarget my system knowing on how much for",
    "start": "2214480",
    "end": "2221140"
  },
  {
    "text": "example how many calls I'm running on the system just does it for me it load balances and spread things out I just",
    "start": "2221140",
    "end": "2227260"
  },
  {
    "text": "don't have to think about does that for me right and I think the best example yeah we have concurrency I",
    "start": "2227260",
    "end": "2233140"
  },
  {
    "text": "think you know four of your friends going to a pizzeria the pizza Baker you order four pizzas the pizza Baker starts doing all four",
    "start": "2233140",
    "end": "2239980"
  },
  {
    "text": "pizzas at the same time so you know flatten the dough on all four pizzas and you'll put the sauce on all four pizzas",
    "start": "2239980",
    "end": "2245320"
  },
  {
    "text": "he will um yeah put the cheese on put the toppings on and then you put in the",
    "start": "2245320",
    "end": "2250960"
  },
  {
    "text": "pizzas in the oven one at a time he's doing them concurrently he's doing the paper so he's basically a dealing with",
    "start": "2250960",
    "end": "2257920"
  },
  {
    "text": "four pizzas at the same time parallelism is when you get one cook or",
    "start": "2257920",
    "end": "2264640"
  },
  {
    "text": "one pizza Baker and he'd go in he'd do one pizza for in the oven you do another Pizza put",
    "start": "2264640",
    "end": "2270099"
  },
  {
    "text": "in the oven the third Pizza put in the oven a fourth pizza and put it in the oven so he'll be much faster doing one",
    "start": "2270099",
    "end": "2276220"
  },
  {
    "text": "pizza probably four times faster than you know the baker doing four pizzas but he he does them sequentially he does",
    "start": "2276220",
    "end": "2284380"
  },
  {
    "text": "one pizza at the time and that's parallelism and how do you scale parallelism well you throw more",
    "start": "2284380",
    "end": "2289960"
  },
  {
    "text": "chords of course at the problem so you end up having four Pizza Bakers uh each doing a pizza",
    "start": "2289960",
    "end": "2296859"
  },
  {
    "text": "and then you know you end up putting four pizzas in the oven at the same time and you get your pieces much much faster but all of a sudden you need four Bakers",
    "start": "2296859",
    "end": "2304720"
  },
  {
    "text": "instead of just one that's a very good example the difference between concurrency as we see",
    "start": "2304720",
    "end": "2310060"
  },
  {
    "text": "it in parallelism as we see it so comparing you know",
    "start": "2310060",
    "end": "2316839"
  },
  {
    "start": "2313000",
    "end": "2584000"
  },
  {
    "text": "the beam which is the prevalent Airline virtual machine to the jvm so I was at the computer science lab uh doing my",
    "start": "2316839",
    "end": "2322660"
  },
  {
    "text": "internship when you know Java came out and you know one of my colleagues Kyle speaks to them came up to me and",
    "start": "2322660",
    "end": "2328839"
  },
  {
    "text": "actually put the Java white paper on my on my desk and I started reading it and actually got a sense of deja vu it was a",
    "start": "2328839",
    "end": "2335980"
  },
  {
    "text": "concurrency model you know at the time the jvm had green threads",
    "start": "2335980",
    "end": "2341380"
  },
  {
    "text": "um I don't know why they got removed but uh you know I guess it was focused on the promiser I'm trying to solve they",
    "start": "2341380",
    "end": "2346960"
  },
  {
    "text": "had a garbage collector which was very novel at the time it had you know built-in memory management all",
    "start": "2346960",
    "end": "2353859"
  },
  {
    "text": "running on a virtual machine and you know there are lots of talks out",
    "start": "2353859",
    "end": "2359380"
  },
  {
    "text": "there you're comparing the jvm to the beam you know go in and Google them but yeah I'll just point out there are three main differences the first is Fred's on",
    "start": "2359380",
    "end": "2366940"
  },
  {
    "text": "the jbm versus concurrency that's the first main difference we got shared memory versus notion",
    "start": "2366940",
    "end": "2374800"
  },
  {
    "text": "memory on the jvm threads can share memory in",
    "start": "2374800",
    "end": "2379839"
  },
  {
    "text": "Airline processes count and the third is mutable State versus immutable state",
    "start": "2379839",
    "end": "2385599"
  },
  {
    "text": "so when you've got shared memory multiple threads can go in and mutate the state of the memory in Airline only",
    "start": "2385599",
    "end": "2393099"
  },
  {
    "text": "the process which owns the memory can go in and mutate it so it's and a",
    "start": "2393099",
    "end": "2398920"
  },
  {
    "text": "concurrency model based on a shared memory means by default to stop the world garbage collector and",
    "start": "2398920",
    "end": "2405040"
  },
  {
    "text": "it's also much harder to go in and use your code base for distributed programming because of the location of",
    "start": "2405040",
    "end": "2412000"
  },
  {
    "text": "your shared memory that becomes a sticking point so you can still do distributed programming with Java but you need to",
    "start": "2412000",
    "end": "2417760"
  },
  {
    "text": "use a model similar to the one we've got in Airline where your friends don't share memory and that that work that",
    "start": "2417760",
    "end": "2424660"
  },
  {
    "text": "will work and what we tend to say is I mean the jvm and the beam were built for completely different purposes yeah yeah",
    "start": "2424660",
    "end": "2430720"
  },
  {
    "text": "they're both they both had a specific Target type of problem they were both trying to solve the jvm had one the beam",
    "start": "2430720",
    "end": "2439000"
  },
  {
    "text": "had one they were just different they are just different that's why they're looking different before and in that",
    "start": "2439000",
    "end": "2444099"
  },
  {
    "text": "sense both are right because they're both doing their thing but they're just doing different things",
    "start": "2444099",
    "end": "2449800"
  },
  {
    "text": "so not one solution is right and the other's wrong they're both like both wrong if you want to see it like that",
    "start": "2449800",
    "end": "2455079"
  },
  {
    "text": "but they're both right for doing it that way again you'll find that in other virtual machines other languages as well they're",
    "start": "2455079",
    "end": "2460960"
  },
  {
    "text": "targeted doing something specifically so so I usually say you know the jvm was",
    "start": "2460960",
    "end": "2466660"
  },
  {
    "text": "built for Speed and parallelism yeah whilst the beam was built for scalability and for resilience",
    "start": "2466660",
    "end": "2473560"
  },
  {
    "text": "so it will not be the fastest as long as it's fast enough then then it's good but not only the",
    "start": "2473560",
    "end": "2479440"
  },
  {
    "text": "beam has parallelism in it you start running there in a virtual machine on a multi-core architecture it will start a",
    "start": "2479440",
    "end": "2486760"
  },
  {
    "text": "thread for every core but the big difference here is that the parallelism has been removed from the hands of the",
    "start": "2486760",
    "end": "2492820"
  },
  {
    "text": "programmer you just program Erlanger the way you usually would and then your",
    "start": "2492820",
    "end": "2498520"
  },
  {
    "text": "program you're assuming there are no bottlenecks in it will then go in and scale automatically on multi-core architectures",
    "start": "2498520",
    "end": "2504579"
  },
  {
    "text": "and you know at least in my world you know uh the the the",
    "start": "2504579",
    "end": "2509920"
  },
  {
    "text": "power of concurrency to jvm got added by a friend of ours Jonas boner",
    "start": "2509920",
    "end": "2514960"
  },
  {
    "text": "who got the concurrency model through akka and he got the ideas from Ireland and tried to implement them as best as",
    "start": "2514960",
    "end": "2522820"
  },
  {
    "text": "he could on the jvm and he often you know computer Sweden used to publish probably still do a list of the top 10",
    "start": "2522820",
    "end": "2529960"
  },
  {
    "text": "programmers in Sweden we've got plenty programmers in Sweden and Eunice has always made the first you know being you",
    "start": "2529960",
    "end": "2537520"
  },
  {
    "text": "know one the number one programmer quite quite a few hours my text to him was something to tell your grandchildren and",
    "start": "2537520",
    "end": "2544060"
  },
  {
    "text": "and it's because it's not easy to do what he tried to achieve you're trying to get the concurrency model on the onto",
    "start": "2544060",
    "end": "2549400"
  },
  {
    "text": "the jvm there are no concurrency mode onto the jvm for the simple reason that the jvm was not built for it and there",
    "start": "2549400",
    "end": "2554920"
  },
  {
    "text": "are things which she still hasn't been able to solve well I can say he was he's always been very open about he's not",
    "start": "2554920",
    "end": "2561700"
  },
  {
    "text": "about this is what he's doing yes he's taking ideas from Allen and the OTP system above it but he's been very open",
    "start": "2561700",
    "end": "2567640"
  },
  {
    "text": "about that so he hasn't been sort of sneaking in Faster things like this for as well and we did invite him to come",
    "start": "2567640",
    "end": "2572859"
  },
  {
    "text": "speak at this conference he couldn't make it but he'll be doing uh go-to in Copenhagen but but line is you know the",
    "start": "2572859",
    "end": "2579339"
  },
  {
    "text": "jvm and the beam are different they were built to you know to solve very very different problems",
    "start": "2579339",
    "end": "2586000"
  },
  {
    "start": "2584000",
    "end": "2741000"
  },
  {
    "text": "yeah this one right this is concurrency right this is concurrence so one big",
    "start": "2586000",
    "end": "2591940"
  },
  {
    "text": "user of our Link in the back end don't look at the title this is how bad Airline Debs are at marketing you need",
    "start": "2591940",
    "end": "2597940"
  },
  {
    "text": "to look in the text this this is this is the original WhatsApp back-end servers",
    "start": "2597940",
    "end": "2603579"
  },
  {
    "text": "uh written in our language before they went into into Facebook say we're running they were running well they had",
    "start": "2603579",
    "end": "2609579"
  },
  {
    "text": "a number of these but on one on one machine running free BSD though running one Airline node on it",
    "start": "2609579",
    "end": "2616540"
  },
  {
    "text": "which which had one million TCP connections up and running at the same time two million",
    "start": "2616540",
    "end": "2623319"
  },
  {
    "text": "well that that was next year that was one million the one million was 2011. yeah 2000 to 2012 they're in two million",
    "start": "2623319",
    "end": "2630819"
  },
  {
    "text": "TCP connections on one machine on one hourly node at least one or two processors per connection",
    "start": "2630819",
    "end": "2636700"
  },
  {
    "text": "now for me running a two or three million Airline process is trivial how do you get two million TCP connections",
    "start": "2636700",
    "end": "2643540"
  },
  {
    "text": "into one machine that's a difficult bit but that's what they were doing and they we talked to them occasionally we found",
    "start": "2643540",
    "end": "2649180"
  },
  {
    "text": "out sometimes they actually ran three million TCP Connections in one thing on one Airline system",
    "start": "2649180",
    "end": "2654880"
  },
  {
    "text": "and this is just to show that Airline can could Bend and still count even better now handle a lot of processes if",
    "start": "2654880",
    "end": "2662200"
  },
  {
    "text": "that is what you need that's what you're after and the best part is you know they were able to hit",
    "start": "2662200",
    "end": "2668619"
  },
  {
    "text": "two to three million with both CPU capacity and memory to spare and they're a it's not that they reached",
    "start": "2668619",
    "end": "2675460"
  },
  {
    "text": "the peak of three million they were able to you know reached between two to three million in a sustainable way that's what",
    "start": "2675460",
    "end": "2681579"
  },
  {
    "text": "the servers worked on they were out set to reduce their Hardware footprint and",
    "start": "2681579",
    "end": "2687160"
  },
  {
    "text": "the server print and overall uh reduce you know the complexity of their",
    "start": "2687160",
    "end": "2692319"
  },
  {
    "text": "infrastructure so um yeah and we see that you know when they got acquired in 2014 I think it was",
    "start": "2692319",
    "end": "2699720"
  },
  {
    "text": "they were you know they had half a billion users they were adding a million users a day at that point and the",
    "start": "2699720",
    "end": "2707260"
  },
  {
    "text": "server-side team consisted of nine developers who took care of all",
    "start": "2707260",
    "end": "2712660"
  },
  {
    "text": "development all uh maintenance of the existing code base and all of support they were the",
    "start": "2712660",
    "end": "2719020"
  },
  {
    "text": "ones this team of nine developers including um one of the founders",
    "start": "2719020",
    "end": "2724359"
  },
  {
    "text": "they were the ones who got woken up in the middle of night when something went wrong so you know how do you do it well have",
    "start": "2724359",
    "end": "2729579"
  },
  {
    "text": "as simple as possible of infrastructure and you know and as as little as possible of infrastructure is the more",
    "start": "2729579",
    "end": "2736119"
  },
  {
    "text": "computers you add the more complexity you add the more likely things are to fail",
    "start": "2736119",
    "end": "2742000"
  },
  {
    "start": "2741000",
    "end": "2845000"
  },
  {
    "text": "but the changes WhatsApp did back in 2011 made mainstream they made it mainstream",
    "start": "2742000",
    "end": "2748540"
  },
  {
    "text": "into FreeBSD and and I think most of the other operating systems as well as the beam virtual machine",
    "start": "2748540",
    "end": "2756280"
  },
  {
    "text": "so in 2015 on a large instance on Amazon",
    "start": "2756280",
    "end": "2762400"
  },
  {
    "text": "um they were able to get an instance of Phoenix running for those of you who don't know what Phoenix is it's going to",
    "start": "2762400",
    "end": "2768040"
  },
  {
    "text": "be the next Ruby on Rails it's a uh it's a app for kind of apis and web",
    "start": "2768040",
    "end": "2776260"
  },
  {
    "text": "development which you know has kind of a lot of features",
    "start": "2776260",
    "end": "2781599"
  },
  {
    "text": "but it also has the scalability of their language virtual machine of the beam",
    "start": "2781599",
    "end": "2787060"
  },
  {
    "text": "and it has those features yeah it runs on airline it runs on elixir and they were able to achieve 2 million",
    "start": "2787060",
    "end": "2795700"
  },
  {
    "text": "TCP connections on a large instance on Amazon with lots of memory and again do so sustainably and what got",
    "start": "2795700",
    "end": "2803920"
  },
  {
    "text": "them you know to stop again they did so with memory and CPU capacity to spare",
    "start": "2803920",
    "end": "2808960"
  },
  {
    "text": "What stopped them from scaling Beyond 2 million was uh throttling of the network",
    "start": "2808960",
    "end": "2815200"
  },
  {
    "text": "I don't think you know Amazon ever thought that anyone would want to have two million TCP connections on a single",
    "start": "2815200",
    "end": "2820900"
  },
  {
    "text": "machine you know it wasn't really doable with most of the technology so they started throttling and stopping them",
    "start": "2820900",
    "end": "2827740"
  },
  {
    "text": "um and it's uh",
    "start": "2827740",
    "end": "2833160"
  },
  {
    "text": "you know and this is the blog post again which uh at that point turned Alex here",
    "start": "2833920",
    "end": "2839560"
  },
  {
    "text": "into a first-class citizen of the beam so Alex here uh it's a new programming language with a rubric syntax which is",
    "start": "2839560",
    "end": "2846099"
  },
  {
    "start": "2845000",
    "end": "2946000"
  },
  {
    "text": "part of the Ireland ecosystem and it was in the conjunction with that blog",
    "start": "2846099",
    "end": "2853359"
  },
  {
    "text": "when Alexa became a first-class citizen that we realized Airline was no longer a programming language it was an ecosystem",
    "start": "2853359",
    "end": "2860140"
  },
  {
    "text": "of languages which had evolved just like.net or the jvm you know jvm you",
    "start": "2860140",
    "end": "2865240"
  },
  {
    "text": "know Scala closure groovy uh you name it and the same the same with.net with F",
    "start": "2865240",
    "end": "2871359"
  },
  {
    "text": "sharp C sharp Visual Basic and others and these languages running on top all",
    "start": "2871359",
    "end": "2877000"
  },
  {
    "text": "have access to the same basic properties that all I have for having massive concurrency doing the",
    "start": "2877000",
    "end": "2883540"
  },
  {
    "text": "fault building fault tolerance systems and all these type of things they all have access to the same thing because they're running on top of the airline",
    "start": "2883540",
    "end": "2889240"
  },
  {
    "text": "and the beam virtual machine together they have all access to this and they can interface each other as well too if",
    "start": "2889240",
    "end": "2894880"
  },
  {
    "text": "you want to and you know with you know the the well with um",
    "start": "2894880",
    "end": "2900520"
  },
  {
    "text": "um processor becoming more and more powerful on devices you know we're going to see the beam running on devices you",
    "start": "2900520",
    "end": "2906579"
  },
  {
    "text": "know more you know we're going to see that become more and more common and at that point your security becomes critical and that's when your language",
    "start": "2906579",
    "end": "2913720"
  },
  {
    "text": "is statically typed languages uh it will be needed uh to to kind of make sure",
    "start": "2913720",
    "end": "2919420"
  },
  {
    "text": "that uh these systems these devices are secure and that's where your language such as alpaca gleam Fez uh will all be",
    "start": "2919420",
    "end": "2927640"
  },
  {
    "text": "making an impact one of them is going to win but they're all statically typed languages Airline and elixir all dynamically typed so you know you get a",
    "start": "2927640",
    "end": "2934960"
  },
  {
    "text": "lot of flexibility but it becomes a bit more dangerous because you know there might be serious security I think",
    "start": "2934960",
    "end": "2940119"
  },
  {
    "text": "they're going to start waving their hands yes we're almost there yeah but",
    "start": "2940119",
    "end": "2946420"
  },
  {
    "start": "2946000",
    "end": "3025000"
  },
  {
    "text": "Alex here today I think is larger much larger than Airline and my predictions will probably come 10",
    "start": "2946420",
    "end": "2952599"
  },
  {
    "text": "times larger than Airline and why is that well again going back you know I always ask language juventors",
    "start": "2952599",
    "end": "2959260"
  },
  {
    "text": "what program were you trying to solve and the problem Jose Valene was trying to solve when he created Elixir was to",
    "start": "2959260",
    "end": "2965260"
  },
  {
    "text": "bring the power of airline to new programming communities and it started off with the web",
    "start": "2965260",
    "end": "2970599"
  },
  {
    "text": "and started falling off my embedded and is now working on machine learning",
    "start": "2970599",
    "end": "2976000"
  },
  {
    "text": "well it was a ruby and rails developer and he said well what's Ruby on Rails missing oh airline's got a lot of stuff",
    "start": "2976000",
    "end": "2982060"
  },
  {
    "text": "but very interesting there but what's our line missing well I'll take stuff with me from the Ruby on Rails environment put that on and that's what",
    "start": "2982060",
    "end": "2988540"
  },
  {
    "text": "became elixir and it wasn't so much that he didn't like what he saw what he didn't like was",
    "start": "2988540",
    "end": "2995079"
  },
  {
    "text": "what he didn't see and that's what he added and he added and these were tools and items which were needed uh",
    "start": "2995079",
    "end": "3002700"
  },
  {
    "text": "you know for other programming language communities to solve different types of problems which we weren't solving you",
    "start": "3002700",
    "end": "3008520"
  },
  {
    "text": "know we weren't trying to solve the problem now so um so very much you know Focus has been",
    "start": "3008520",
    "end": "3015180"
  },
  {
    "text": "not on solving problems but on the adoption of a solid runtime and language principles with good you know Frameworks",
    "start": "3015180",
    "end": "3020520"
  },
  {
    "text": "and available so you know I'll skip this but you know yeah that that's that's me it's a ripoff",
    "start": "3020520",
    "end": "3027540"
  },
  {
    "start": "3025000",
    "end": "3117000"
  },
  {
    "text": "of a greenspun's 10th row he was talking about this what I'm talking about here that what the basis",
    "start": "3027540",
    "end": "3034560"
  },
  {
    "text": "of this is yes it's a joke but I think from the same side as his he was talking about lisb is that",
    "start": "3034560",
    "end": "3039960"
  },
  {
    "text": "putting these try to put these things afterwards just doesn't work in the long run",
    "start": "3039960",
    "end": "3046260"
  },
  {
    "text": "these ideas in our case the concurrency the message passing the error handling uh code upgrading has to be built baked",
    "start": "3046260",
    "end": "3054300"
  },
  {
    "text": "in from the very beginning you can't come with them afterwards otherwise you will get a as if a bug bug ridden slow",
    "start": "3054300",
    "end": "3061319"
  },
  {
    "text": "implementation of it because it just doesn't work there all these things start interacting with each other you fiddle with one you'll you'll affect the",
    "start": "3061319",
    "end": "3067500"
  },
  {
    "text": "other you have to get them in from the very beginning you can do it but it will not work as a problem and yeah the point here is",
    "start": "3067500",
    "end": "3074040"
  },
  {
    "text": "twofold one is you can't build tonsil currency to a language as an afterthought it's something you need to",
    "start": "3074040",
    "end": "3079740"
  },
  {
    "text": "build in from day one else you know you you'll run into trouble the second is you know I really",
    "start": "3079740",
    "end": "3085500"
  },
  {
    "text": "encourage you to go out and start thinking concurrently learn Airline learn Alex here because it will change",
    "start": "3085500",
    "end": "3091800"
  },
  {
    "text": "the way you think and reason around programming you might not end up using it on a day-to-day basis but it will",
    "start": "3091800",
    "end": "3097140"
  },
  {
    "text": "make a much much better programmer regardless of the programming languages you use because the principles and and",
    "start": "3097140",
    "end": "3103380"
  },
  {
    "text": "the ideas are those you need uh to program in modern settings in modern environments but it will require a",
    "start": "3103380",
    "end": "3109319"
  },
  {
    "text": "rethink just accept that it will require reading yet because it affects what you how you work with stuff right",
    "start": "3109319",
    "end": "3115440"
  },
  {
    "text": "all right yeah okay thank you yeah I'm Italian big hand of",
    "start": "3115440",
    "end": "3122640"
  },
  {
    "start": "3117000",
    "end": "3140000"
  },
  {
    "text": "Applause thank you",
    "start": "3122640",
    "end": "3125838"
  }
]