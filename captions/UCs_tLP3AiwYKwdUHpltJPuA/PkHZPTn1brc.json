[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": "[Music]",
    "start": "2570",
    "end": "10170"
  },
  {
    "text": "how many people here know erlin a few okay I just stuck some",
    "start": "12960",
    "end": "19640"
  },
  {
    "text": "slides in that gives a little tutorial maybe we'll go through that real quick but first what is their Lang concurrency",
    "start": "19640",
    "end": "26080"
  },
  {
    "start": "23000",
    "end": "54000"
  },
  {
    "text": "oriented functional language uh it's got strong types but Dynamic types so there's no static type",
    "start": "26080",
    "end": "32920"
  },
  {
    "text": "check checking you run into problems at runtime instead of compile time um it's",
    "start": "32920",
    "end": "39600"
  },
  {
    "text": "a very small language if you've used it it has just a few elements and I'm going to talk about those soon it's a virtual",
    "start": "39600",
    "end": "46960"
  },
  {
    "text": "machine that runs a bite code called beam and it's got built-in distributed",
    "start": "46960",
    "end": "52559"
  },
  {
    "text": "system features the uh earling language came from Erikson in the mid 80s a guy named",
    "start": "52559",
    "end": "59559"
  },
  {
    "start": "54000",
    "end": "107000"
  },
  {
    "text": "Joe AR Armstrong started researching how to build switches how to build languages that they could use to build switches",
    "start": "59559",
    "end": "66640"
  },
  {
    "text": "that were more reliable and cheaper and better and uh Robert birding and Mike Williams then came along to help him out",
    "start": "66640",
    "end": "73400"
  },
  {
    "text": "by the early 90s earling the language was a real thing um what I'm going to",
    "start": "73400",
    "end": "78520"
  },
  {
    "text": "talk about today OTP came about in 96 and then uh earling itself and OTP were",
    "start": "78520",
    "end": "85840"
  },
  {
    "text": "open sourced in 1998 and they been open source ever since then still maintained",
    "start": "85840",
    "end": "91200"
  },
  {
    "text": "by Ericson there's a team there that does that and they take open source contributions I've uh contributed quite",
    "start": "91200",
    "end": "99200"
  },
  {
    "text": "a bit to the earling virtual machine and language as have others but uh it's nice",
    "start": "99200",
    "end": "104520"
  },
  {
    "text": "little Community you think about the requirements of a telecom switch they",
    "start": "104520",
    "end": "111799"
  },
  {
    "start": "107000",
    "end": "200000"
  },
  {
    "text": "need a large number of concurrent activities because you don't want to switch to just take one phone call at a",
    "start": "111799",
    "end": "117759"
  },
  {
    "text": "time you want to be to of failure both hardware and software and to do that you",
    "start": "117759",
    "end": "123520"
  },
  {
    "text": "not only need components that help with that but you need distribution because you need multiple multiple computers to",
    "start": "123520",
    "end": "129879"
  },
  {
    "text": "be able to do that and uh you want a system that can operate for years with minimal down time",
    "start": "129879",
    "end": "136879"
  },
  {
    "text": "telephone companies get uh fined if their switches go down for more than three or four minutes a year every bit",
    "start": "136879",
    "end": "143480"
  },
  {
    "text": "past that they get fined pretty heavily so uh that's where the 59 comes from 59",
    "start": "143480",
    "end": "149519"
  },
  {
    "text": "about five and a half minutes of downtime I think per year so they want to be able to do live updates and",
    "start": "149519",
    "end": "155440"
  },
  {
    "text": "maintenance so they don't have to take the switch down now you might think I don't work in Telecom what do I care",
    "start": "155440",
    "end": "163040"
  },
  {
    "text": "right why do I care about this stuff and the reason you care is if you think about today's applications web",
    "start": "163040",
    "end": "169120"
  },
  {
    "text": "applications Cloud applications Big Data applications microservice",
    "start": "169120",
    "end": "174879"
  },
  {
    "text": "applications they all want the same stuff right everybody wants to be up all the time they want to be able to fail",
    "start": "174879",
    "end": "181040"
  },
  {
    "text": "over in case of error and they have to deal with distributed systems problems",
    "start": "181040",
    "end": "186560"
  },
  {
    "text": "um you know all that stuff so this is why uh llang I think you know still",
    "start": "186560",
    "end": "192280"
  },
  {
    "text": "maintains popularity and continues to grow people are finding that actually",
    "start": "192280",
    "end": "198000"
  },
  {
    "text": "does this stuff pretty well the Earline VM itself can run",
    "start": "198000",
    "end": "204040"
  },
  {
    "start": "200000",
    "end": "246000"
  },
  {
    "text": "multiple languages so llang is a language on the VM there's Elixir how",
    "start": "204040",
    "end": "209480"
  },
  {
    "text": "many people have tried Elixir it seems to be very popular growing in popularity because it's uh",
    "start": "209480",
    "end": "216840"
  },
  {
    "text": "kind of looks like Ruby they've done a nice job with that language there's a couple of lisps lisp",
    "start": "216840",
    "end": "223760"
  },
  {
    "text": "flavored earling and jxa so those are classic lists with all the macros and",
    "start": "223760",
    "end": "229640"
  },
  {
    "text": "everything that run on the VM there's a language called epine which is sort of inspired by python I believe I've never",
    "start": "229640",
    "end": "236519"
  },
  {
    "text": "used it and there's other kind of little oneoff languages let's talk about processes so",
    "start": "236519",
    "end": "244360"
  },
  {
    "text": "process in erlang there's a whole model for processes are very important a lot of what we'll talk about today is about",
    "start": "244360",
    "end": "250360"
  },
  {
    "start": "246000",
    "end": "318000"
  },
  {
    "text": "the process uh the VM supports lightweight green threads so I remember",
    "start": "250360",
    "end": "255640"
  },
  {
    "text": "back one of the first Airline talks I gave I had you know older MacBook and on",
    "start": "255640",
    "end": "260959"
  },
  {
    "text": "that MacBook probably 2008 2009 I could start a million processes in half a",
    "start": "260959",
    "end": "268479"
  },
  {
    "text": "second so it's only gotten better most applications don't use",
    "start": "268479",
    "end": "274080"
  },
  {
    "text": "aillon processes I've written some that required up to 200,000 so uh it's nice to have when you",
    "start": "274080",
    "end": "281240"
  },
  {
    "text": "need it but most don't use that many but all applications use multiple processes whether they know it or not the uh",
    "start": "281240",
    "end": "288680"
  },
  {
    "text": "runtime itself does process scheduling and does process preemption so it'll let",
    "start": "288680",
    "end": "294600"
  },
  {
    "text": "the process run for a while swap it out and get another one running there's nothing you have to do in your code to",
    "start": "294600",
    "end": "300960"
  },
  {
    "text": "make that happen there's a feature called linking and",
    "start": "300960",
    "end": "306080"
  },
  {
    "text": "monitoring uh two features actually linking can link two processes together",
    "start": "306080",
    "end": "311560"
  },
  {
    "text": "monitoring is when one process monitors another one we'll talk a lot more about that later that's a very important",
    "start": "311560",
    "end": "317120"
  },
  {
    "text": "feature for all tolerance so when a process runs it just",
    "start": "317120",
    "end": "322840"
  },
  {
    "start": "318000",
    "end": "342000"
  },
  {
    "text": "runs an Earline function and that function can of course call other functions but as soon as that function",
    "start": "322840",
    "end": "329000"
  },
  {
    "text": "ends process ends if the process hits an unexpected exception then the process",
    "start": "329000",
    "end": "335759"
  },
  {
    "text": "dies or if someone kills the process the process",
    "start": "335759",
    "end": "339960"
  },
  {
    "text": "dies I mentioned preemption before the virtual machine will run a process for",
    "start": "341720",
    "end": "348479"
  },
  {
    "start": "342000",
    "end": "396000"
  },
  {
    "text": "something called 2 it's 2000 of something called a reduction reduction is almost like a function call kind of",
    "start": "348479",
    "end": "355840"
  },
  {
    "text": "equivalent to a function call and uh it'll run up to 20 th000 of those preempted for another process if it runs",
    "start": "355840",
    "end": "363120"
  },
  {
    "text": "short of that and it goes into a wait waiting for a message from another process and it has no messages in its",
    "start": "363120",
    "end": "370160"
  },
  {
    "text": "queue the scheduler or the VM will preempt it and run another one uh if it",
    "start": "370160",
    "end": "376880"
  },
  {
    "text": "does IO preemption so there's a whole bunch of rules about how things get preempted again you as a programmer",
    "start": "376880",
    "end": "383120"
  },
  {
    "text": "don't really have to do anything you don't have to call yield you don't have to do any Cooperative um preemption",
    "start": "383120",
    "end": "390440"
  },
  {
    "text": "yourself the the VM takes care of that for you we look at how the system is put",
    "start": "390440",
    "end": "399080"
  },
  {
    "start": "396000",
    "end": "517000"
  },
  {
    "text": "together most I don't know if people in the back can see this but there's some CPU cores down here core one up to core",
    "start": "399080",
    "end": "406880"
  },
  {
    "text": "n most systems today are multi-core then you have on top of that your operating",
    "start": "406880",
    "end": "412680"
  },
  {
    "text": "system and your kernal threads the VM sits on top of that and",
    "start": "412680",
    "end": "419240"
  },
  {
    "text": "for every by default for every core you get what's called auler inside the VM there's all these",
    "start": "419240",
    "end": "426759"
  },
  {
    "text": "scheduler threads those are kernel threads and what each schedular thread",
    "start": "426759",
    "end": "432599"
  },
  {
    "text": "has are run cues so the Run cues uh are where the processes get",
    "start": "432599",
    "end": "438560"
  },
  {
    "text": "stored the schedulers go to their run cues they'll take a process out execute",
    "start": "438560",
    "end": "443919"
  },
  {
    "text": "it like I described before put it in the back of the queue grabb another one if any of them runs out of work they can",
    "start": "443919",
    "end": "450240"
  },
  {
    "text": "steal from other ones these schedulers are uh worth studying if you ever have",
    "start": "450240",
    "end": "456319"
  },
  {
    "text": "time because they're not just dumb little things pulling off this queue there's quite a bit of uh craft that's",
    "start": "456319",
    "end": "461879"
  },
  {
    "text": "gone into these things they're highly independent all of them is running um",
    "start": "461879",
    "end": "467680"
  },
  {
    "text": "essentially the emulator Loop the thing that runs all the bite code so every scheduler is running that Loop and as a",
    "start": "467680",
    "end": "475240"
  },
  {
    "text": "result they kind of all are doing the same thing but at different times to keep them independent they minimize",
    "start": "475240",
    "end": "481479"
  },
  {
    "text": "locking between them they uh try not to share anything the cases where they do",
    "start": "481479",
    "end": "486759"
  },
  {
    "text": "have to share things they still try to avoid locking at all costs so it's basically just trying to share as little",
    "start": "486759",
    "end": "493280"
  },
  {
    "text": "as possible across these schedulers and there been a a ton of work that's gone into these 5 years ago all the",
    "start": "493280",
    "end": "499280"
  },
  {
    "text": "schedulers shared one Cu uh doing scalability tests the team",
    "start": "499280",
    "end": "504520"
  },
  {
    "text": "found that if they did it this way it just scaled better so people are always improving the",
    "start": "504520",
    "end": "511879"
  },
  {
    "text": "schedulers how many people have heard let it crash for erlang it's kind of",
    "start": "513599",
    "end": "519240"
  },
  {
    "start": "517000",
    "end": "732000"
  },
  {
    "text": "famous for that I think so Joe Armstrong has a PHD in erlang he may be the only",
    "start": "519240",
    "end": "525800"
  },
  {
    "text": "person I don't know um but if you read that PhD which is very readable you know",
    "start": "525800",
    "end": "531200"
  },
  {
    "text": "a lot of phds are kind of dry or whatever but his is quite readable uh these are some quotes from there let the",
    "start": "531200",
    "end": "536800"
  },
  {
    "text": "let some other process do the error recovery uh um Let It crash do not program defensively and um when you",
    "start": "536800",
    "end": "543760"
  },
  {
    "text": "think about it I'm sure we've all seen code where do like a try and a catch and in the catch it'll just say like comment",
    "start": "543760",
    "end": "550320"
  },
  {
    "text": "fix me or comment I don't know what to do here or you know just you know not",
    "start": "550320",
    "end": "556360"
  },
  {
    "text": "even do anything um in earling it's not that you don't deal with errors it's",
    "start": "556360",
    "end": "563079"
  },
  {
    "text": "that you always have to deal with errors you just deal with them differently so uh we'll talk more about this one I go",
    "start": "563079",
    "end": "569920"
  },
  {
    "text": "through more about the behaviors and how they work so why do you have all this",
    "start": "569920",
    "end": "576760"
  },
  {
    "text": "concurrency is it just to be cool or you know it's not it's because of",
    "start": "576760",
    "end": "582000"
  },
  {
    "text": "reliability so remember the whole thing about earling is to be reliable build reliable switches and um what the",
    "start": "582000",
    "end": "589519"
  },
  {
    "text": "concurrency gives you is some isolation you can have processes that are all running in the same virtual machine but",
    "start": "589519",
    "end": "595959"
  },
  {
    "text": "they don't share memory other than the fact that they're in the same process they contact each other through message",
    "start": "595959",
    "end": "602040"
  },
  {
    "text": "passing they don't ever like reach into the same memory um for Recovery I mentioned links",
    "start": "602040",
    "end": "609399"
  },
  {
    "text": "and monitors earlier what uh that allows is one process to watch another process",
    "start": "609399",
    "end": "615040"
  },
  {
    "text": "and this one might be doing all the work and this one's just kind of hanging out saying is it is it still there is it still okay should it die because it hit",
    "start": "615040",
    "end": "622640"
  },
  {
    "text": "some unexpected exception this one can take action and usually what that means is restarting the process",
    "start": "622640",
    "end": "630000"
  },
  {
    "text": "um and then again to have a fault tolerance system you need multiple computers so all this works across",
    "start": "630000",
    "end": "636519"
  },
  {
    "text": "multiple computers if you want to uh send a message to a process it doesn't really matter if it's in your VM or in",
    "start": "636519",
    "end": "643160"
  },
  {
    "text": "another VM on the same node or another VM across the network you know other than Network effects dealing with",
    "start": "643160",
    "end": "649240"
  },
  {
    "text": "latency and partial failure basically the process model was",
    "start": "649240",
    "end": "655320"
  },
  {
    "text": "same all right here's a quick earling overview",
    "start": "655320",
    "end": "660800"
  },
  {
    "text": "there's just a few elements in language I'm not going to read through them but that's kind of the bulk of it atoms you",
    "start": "660800",
    "end": "666920"
  },
  {
    "text": "see a lot they're just names they're just values with names um you don't know what the value is like an En and C++ for",
    "start": "666920",
    "end": "673800"
  },
  {
    "text": "example has a value but you're supposed to use it as just a name similar here those are lowercase words variables are",
    "start": "673800",
    "end": "681440"
  },
  {
    "text": "capitalized variables aren't variable they're immutable",
    "start": "681440",
    "end": "686760"
  },
  {
    "text": "function names module names are atoms variables live inside functions",
    "start": "689480",
    "end": "694560"
  },
  {
    "text": "there's no globals uh functions live inside modules we'll see some examples of that",
    "start": "694560",
    "end": "700519"
  },
  {
    "text": "functions are identified by their name and their aity how many arguments they take and then you can also have",
    "start": "700519",
    "end": "707079"
  },
  {
    "text": "Anonymous functions functions can be exported from a module to make them visible to other",
    "start": "707079",
    "end": "712839"
  },
  {
    "text": "modules and callable from other modules or they can be internal so they're called only within that module and and",
    "start": "712839",
    "end": "719399"
  },
  {
    "text": "then functions can also be passed around as arguments returned as values stuffed into other data",
    "start": "719399",
    "end": "725480"
  },
  {
    "text": "structures uh higher order functions basically because their Lang is a functional",
    "start": "725480",
    "end": "731720"
  },
  {
    "start": "732000",
    "end": "923000"
  },
  {
    "text": "language assignment is pattern matching so if you have a variable that has no",
    "start": "732000",
    "end": "738800"
  },
  {
    "text": "binding has no value and I say variable VAR equals 2 then VAR now is bound to",
    "start": "738800",
    "end": "745000"
  },
  {
    "text": "two if I say VAR equals 2 again it's kind of like an assertion yes bar is two",
    "start": "745000",
    "end": "750880"
  },
  {
    "text": "I match two and bar and it's true if I say VAR equals three this causes an",
    "start": "750880",
    "end": "757040"
  },
  {
    "text": "exception called a bad match because VAR has a Val has bound to two and two of",
    "start": "757040",
    "end": "762680"
  },
  {
    "text": "course is not three so it's takes a little getting used to but you'll get used to it real",
    "start": "762680",
    "end": "770760"
  },
  {
    "text": "fast there's also pattern matching in functions so if I have a function",
    "start": "770760",
    "end": "777680"
  },
  {
    "text": "Fu this one says Fu takes an empty list and if it gets an empty list as an",
    "start": "777680",
    "end": "783279"
  },
  {
    "text": "argument that list you know is matched and I would perform whatever the empty list version of fu is for anything else",
    "start": "783279",
    "end": "791480"
  },
  {
    "text": "I get a variable named list that's bound to the value passed in presumably a",
    "start": "791480",
    "end": "796519"
  },
  {
    "text": "non-empty list but again because of dynamic typing could be anything but the",
    "start": "796519",
    "end": "802560"
  },
  {
    "text": "uh runtime will select this version of f instead of that one for anything other than a non-empty list",
    "start": "802560",
    "end": "810880"
  },
  {
    "text": "there's a case expression that you use quite a bit it's a way of matching so",
    "start": "813240",
    "end": "819160"
  },
  {
    "text": "you have a value or the return of a function or something you can say case blah blah blah of and match all the",
    "start": "819160",
    "end": "825519"
  },
  {
    "text": "values that U might come back there's default matches as well pattern matching in function heads",
    "start": "825519",
    "end": "833279"
  },
  {
    "text": "we kind of saw on the previous slide but here's an example of Fu taking two arguments where they have to be the same",
    "start": "833279",
    "end": "838360"
  },
  {
    "text": "value so enforces that here's a very common idiom where you say bar takes a",
    "start": "838360",
    "end": "845480"
  },
  {
    "text": "list has to be nonempty has to have at least one element that element is going to be called H and the rest of the list",
    "start": "845480",
    "end": "853600"
  },
  {
    "text": "is T so you see a lot of recursive functions that'll take a list like that",
    "start": "853600",
    "end": "859800"
  },
  {
    "text": "it will uh take the head off a list do some action and then pass T to itself as",
    "start": "859800",
    "end": "864920"
  },
  {
    "text": "the the rest of the list and then typically uh ending function for that is",
    "start": "864920",
    "end": "870560"
  },
  {
    "text": "catching you know matching the empty list and ending the",
    "start": "870560",
    "end": "876079"
  },
  {
    "text": "recursion uh what else so you see this quite a bit as well message passing so",
    "start": "876120",
    "end": "881880"
  },
  {
    "text": "if you have a process ID this is a variable process ID holding a process ID",
    "start": "881880",
    "end": "887639"
  },
  {
    "text": "you can use the exclamation point to send a message and message can be any earling term could be an atom a string a",
    "start": "887639",
    "end": "894199"
  },
  {
    "text": "list a number whatever another process ID you can register processes both",
    "start": "894199",
    "end": "901040"
  },
  {
    "text": "locally and globally there's some Registries that come with earing OTP and",
    "start": "901040",
    "end": "906279"
  },
  {
    "text": "then others have been built for various uh reasons of uh you know different",
    "start": "906279",
    "end": "912160"
  },
  {
    "text": "types of qualities of distribution so now you know",
    "start": "912160",
    "end": "917880"
  },
  {
    "text": "Earl um let's get into OTP so OTP augments llang it's like a layer built",
    "start": "917880",
    "end": "924440"
  },
  {
    "start": "923000",
    "end": "958000"
  },
  {
    "text": "on top of llang and OTP stands for open Telecom platform we don't usually use",
    "start": "924440",
    "end": "930399"
  },
  {
    "text": "that name anymore because it's not Telecom specific so we just call it OTP",
    "start": "930399",
    "end": "936519"
  },
  {
    "text": "OTP brings additional libraries uh a whole bunch of tools and a bunch of",
    "start": "936519",
    "end": "942560"
  },
  {
    "text": "principles that are really how you use the system nobody uses erlang by itself",
    "start": "942560",
    "end": "949040"
  },
  {
    "text": "anymore it's always erlang OTP so they're kind of now all one and the same",
    "start": "949040",
    "end": "954120"
  },
  {
    "text": "but they still have kind of distinct names the design",
    "start": "954120",
    "end": "959440"
  },
  {
    "start": "958000",
    "end": "1080000"
  },
  {
    "text": "principles uh we can walk through those there's behaviors I'm going to talk a",
    "start": "959440",
    "end": "964920"
  },
  {
    "text": "fair bit about this these are just little Frameworks classical sense",
    "start": "964920",
    "end": "970480"
  },
  {
    "text": "Frameworks that are partial solutions to common problems typically what you do is",
    "start": "970480",
    "end": "975560"
  },
  {
    "text": "you extend the behavior with your own code to make the full solution just like a framework there's something called a",
    "start": "975560",
    "end": "981680"
  },
  {
    "text": "supervision tree which is a hierarchy of processes I",
    "start": "981680",
    "end": "987639"
  },
  {
    "text": "mentioned earlier how you can have a a process doing something and another one watching it well this process is the",
    "start": "987639",
    "end": "993199"
  },
  {
    "text": "worker and then the one watching it is a supervisor uh any any managers",
    "start": "993199",
    "end": "998480"
  },
  {
    "text": "supervisors here oh sort of one here kind of doing",
    "start": "998480",
    "end": "1004600"
  },
  {
    "text": "this but um You probably in your supervisory mode you just kind of sit around and watch everybody right so",
    "start": "1004600",
    "end": "1012440"
  },
  {
    "text": "that's kind of the same thing here um then applications are really just taking",
    "start": "1012440",
    "end": "1018279"
  },
  {
    "text": "these super Vision trees and the workers and everything packaging them up with resources used by the the system like",
    "start": "1018279",
    "end": "1024760"
  },
  {
    "text": "Json files or you know whatever um and um some configuration data and kind of",
    "start": "1024760",
    "end": "1030760"
  },
  {
    "text": "putting that all together and that's an application you then have releases which",
    "start": "1030760",
    "end": "1036720"
  },
  {
    "text": "are collections of applications packaged together as a Deployable unit a node is uh a running release",
    "start": "1036720",
    "end": "1046438"
  },
  {
    "text": "basically you take the release put it on node get it running and uh that's deployed release handling is when you",
    "start": "1046439",
    "end": "1054200"
  },
  {
    "text": "have a running release and you can upgrade it or downgrade it that's the live upgrading part and then clusters",
    "start": "1054200",
    "end": "1061960"
  },
  {
    "text": "are just interconnected nodes so you have this kind of whole hierarchy of you know starting from processes all the way",
    "start": "1061960",
    "end": "1068760"
  },
  {
    "text": "up to a distributed system and those along way uh there's just design",
    "start": "1068760",
    "end": "1074799"
  },
  {
    "text": "principles that tell you how to do all that that OTP provides OTP also provides other things like a",
    "start": "1074799",
    "end": "1081960"
  },
  {
    "start": "1080000",
    "end": "1154000"
  },
  {
    "text": "whole bunch of tools for operations management monitoring uh how to package up releases",
    "start": "1081960",
    "end": "1088320"
  },
  {
    "text": "and get those prepared for deployment tools for debugging doing test coverage doing testing doing",
    "start": "1088320",
    "end": "1095480"
  },
  {
    "text": "performance measurement um it's just a whole bunch of stuff and it reflects the fact that",
    "start": "1095480",
    "end": "1101840"
  },
  {
    "text": "this system's been around for a long time and these are things that people use uh in production and you know the",
    "start": "1101840",
    "end": "1109039"
  },
  {
    "text": "nice thing also is they've evolved over time so there's some packages that you",
    "start": "1109039",
    "end": "1114520"
  },
  {
    "text": "know used to be used that aren't used as much anymore and they eventually kind of find their way out of OTP while newer",
    "start": "1114520",
    "end": "1122000"
  },
  {
    "text": "things come in so newer ways of observing uh a running system and looking at relationships between",
    "start": "1122000",
    "end": "1128520"
  },
  {
    "text": "processes and tracing behaviors and all that kind of stuff so the whole system evolves constantly there's a new release",
    "start": "1128520",
    "end": "1136840"
  },
  {
    "text": "of erlang typically every 12 13 months so next month uh",
    "start": "1136840",
    "end": "1142880"
  },
  {
    "text": "earling 19 will come out so it's a ever evolving system now",
    "start": "1142880",
    "end": "1151039"
  },
  {
    "text": "let's talk about behaviors there's a bunch of standard behaviors gen server is the most used",
    "start": "1151039",
    "end": "1158159"
  },
  {
    "start": "1154000",
    "end": "1193000"
  },
  {
    "text": "one it's a client server pattern I'm going to go through a big example with Gen server there's gen FSM which is",
    "start": "1158159",
    "end": "1165760"
  },
  {
    "text": "finite State machines and a brand new uh State machine Behavior called gen State",
    "start": "1165760",
    "end": "1172919"
  },
  {
    "text": "M that's uh not quite available yet it's going to be available when this new release comes out next month gen event",
    "start": "1172919",
    "end": "1181000"
  },
  {
    "text": "is an event handling framework and then there's the supervisor I mentioned earlier",
    "start": "1181000",
    "end": "1187200"
  },
  {
    "text": "application I mentioned earlier so what's the purpose of a",
    "start": "1187200",
    "end": "1192919"
  },
  {
    "text": "behavior the primary purpose is one to separate the the generic parts of a",
    "start": "1192919",
    "end": "1201200"
  },
  {
    "start": "1193000",
    "end": "1345000"
  },
  {
    "text": "solution from those from the domain specific parts so you have a bunch of uh",
    "start": "1201200",
    "end": "1208360"
  },
  {
    "text": "bunch of features that you need for kind of all client servers for example gen",
    "start": "1208360",
    "end": "1213880"
  },
  {
    "text": "server contains all that I'll show you later how you take gen server and extend it with your own",
    "start": "1213880",
    "end": "1220440"
  },
  {
    "text": "code to solve your own problem um there's a lot of corner cases",
    "start": "1220440",
    "end": "1226240"
  },
  {
    "text": "represented in the code so things learned over the years years you might think you've probably heard you know",
    "start": "1226240",
    "end": "1231679"
  },
  {
    "text": "earling you don't have to handle locking and it's not like the usual multi-threaded programming you don't",
    "start": "1231679",
    "end": "1238080"
  },
  {
    "text": "deal with race conditions and all that and and that's partly true you always",
    "start": "1238080",
    "end": "1243520"
  },
  {
    "text": "deal with race conditions it's just that here you know a lot of it's been solved because these things have been around so",
    "start": "1243520",
    "end": "1249880"
  },
  {
    "text": "long and in production so long that these Corner cases have shown up and have been",
    "start": "1249880",
    "end": "1256559"
  },
  {
    "text": "pluged um so yeah it's just it's like a collection of reusable modules that are",
    "start": "1256559",
    "end": "1262320"
  },
  {
    "text": "uh useful across you know a number of domains for solving common",
    "start": "1262320",
    "end": "1268360"
  },
  {
    "text": "problems um there's also this whole thing about OTP and",
    "start": "1268880",
    "end": "1275440"
  },
  {
    "text": "um if you follow all the rules of OTP you follow the design principles and everything you get a lot back in return",
    "start": "1275440",
    "end": "1282720"
  },
  {
    "text": "so things like being able to start your application being able to put your application into a collection of other",
    "start": "1282720",
    "end": "1288159"
  },
  {
    "text": "applic ations that it might not even have um you know like might be that",
    "start": "1288159",
    "end": "1293360"
  },
  {
    "text": "someone wrote application a someone else wrote B and someone Downstream kind of grabs both of them and puts them",
    "start": "1293360",
    "end": "1299679"
  },
  {
    "text": "together in a way that nobody foresaw if you follow the rules that's going to work fine if you don't bad things are",
    "start": "1299679",
    "end": "1305720"
  },
  {
    "text": "going to happen fortunately all the tools and everything kind of make it easy to follow the rules but things like",
    "start": "1305720",
    "end": "1311640"
  },
  {
    "text": "starting and stopping your application doesn't sound difficult unless you have dependencies on other",
    "start": "1311640",
    "end": "1316840"
  },
  {
    "text": "applications how do you force order well OTP does that for you observing and",
    "start": "1316840",
    "end": "1322279"
  },
  {
    "text": "monitoring being able to debug things you know somebody always has to go back and say oh I forgot to put all my print",
    "start": "1322279",
    "end": "1328200"
  },
  {
    "text": "apps in the code how am I going to debug this um packaging and releasing doing",
    "start": "1328200",
    "end": "1333799"
  },
  {
    "text": "live upgrades it's all kind of prescribed for you so let's run through an",
    "start": "1333799",
    "end": "1342400"
  },
  {
    "text": "example uh it's kind of a not a very interesting example CU I wanted to keep",
    "start": "1342559",
    "end": "1348559"
  },
  {
    "start": "1345000",
    "end": "1439000"
  },
  {
    "text": "keep it simple so there's a key value server process a key value server",
    "start": "1348559",
    "end": "1354400"
  },
  {
    "text": "process is just a process that's running it lets you store Keys along with values",
    "start": "1354400",
    "end": "1360559"
  },
  {
    "text": "and then later you can go ask if it's got a certain key and if it does give you a value and if it doesn't it'll tell",
    "start": "1360559",
    "end": "1366360"
  },
  {
    "text": "you I don't have that value um it'll allow you to delete keys and values of",
    "start": "1366360",
    "end": "1372120"
  },
  {
    "text": "course and then you know you want multiple clients to be able to use this thing so you can imagine having",
    "start": "1372120",
    "end": "1377240"
  },
  {
    "text": "something like a cach you know that's just caching values multiple clients using it the reason I say it's not a",
    "start": "1377240",
    "end": "1383840"
  },
  {
    "text": "very good example is of course Earline comes with you know key value stores of",
    "start": "1383840",
    "end": "1389000"
  },
  {
    "text": "uh there's I don't know three or four anyway so but again this keeps it simple",
    "start": "1389000",
    "end": "1394559"
  },
  {
    "text": "and everybody can understand it and I don't have to put a lot of code on the slides so what are the problems we're",
    "start": "1394559",
    "end": "1400400"
  },
  {
    "text": "going to run into with uh defining our key value server well there's going to be one of keeping server State you",
    "start": "1400400",
    "end": "1407159"
  },
  {
    "text": "certainly don't want to say or key and value and it says I did and then you say okay give me that what I don't have it",
    "start": "1407159",
    "end": "1413240"
  },
  {
    "text": "what are you talking about so you want to be able to keep the state of the server you have to be able to start and stop it clients have to be able to",
    "start": "1413240",
    "end": "1420919"
  },
  {
    "text": "locate the server and uh talk to it and the server has to handle the client",
    "start": "1420919",
    "end": "1426640"
  },
  {
    "text": "requests makes sense of the requests coming in if there's any errors has to deal with those but also has to be able",
    "start": "1426640",
    "end": "1433440"
  },
  {
    "text": "to reply to the clients and give give them back what they ask for",
    "start": "1433440",
    "end": "1438600"
  },
  {
    "text": "so process state is kind of interesting Burling variables are immutable and there are no Global",
    "start": "1438600",
    "end": "1444880"
  },
  {
    "start": "1439000",
    "end": "1467000"
  },
  {
    "text": "variables so how do you have a server process that can store State one way would be just to write everything to",
    "start": "1444880",
    "end": "1450919"
  },
  {
    "text": "disk but this is an inmemory server so that's not really going to work we could cheat and use kind of one of the",
    "start": "1450919",
    "end": "1456880"
  },
  {
    "text": "internal earling key value stores and we sort of do that in our examples but um",
    "start": "1456880",
    "end": "1463080"
  },
  {
    "text": "that's not the real point I'm trying to get to every server process in GP has",
    "start": "1463080",
    "end": "1469279"
  },
  {
    "start": "1467000",
    "end": "1563000"
  },
  {
    "text": "this thing called a receive evaluate Loop so what happens there is as I said",
    "start": "1469279",
    "end": "1475480"
  },
  {
    "text": "earlier processes execute functions so you have a function that presumably is a",
    "start": "1475480",
    "end": "1480679"
  },
  {
    "text": "key value server function it's a loop and the loop just has a state and",
    "start": "1480679",
    "end": "1488799"
  },
  {
    "text": "receives a message and says what do I do with this message if it's like a store message it'll stick some key value into",
    "start": "1488799",
    "end": "1495399"
  },
  {
    "text": "its state and create a new state if it's a delete it'll get rid of the key and",
    "start": "1495399",
    "end": "1500440"
  },
  {
    "text": "the value and create a new State uh whatever it does it may create a new",
    "start": "1500440",
    "end": "1506159"
  },
  {
    "text": "state it might be just a lookup which case it would be the same state but at the end of the function you have this",
    "start": "1506159",
    "end": "1512240"
  },
  {
    "text": "state be it new or old and you just call yourself with that state so the state of",
    "start": "1512240",
    "end": "1518799"
  },
  {
    "text": "the function is just kept as an argument in the loop so it just looks like",
    "start": "1518799",
    "end": "1524600"
  },
  {
    "text": "this we just have our state coming in we have a re receive here that handles",
    "start": "1524600",
    "end": "1529760"
  },
  {
    "text": "messages these are just comments it's not actually doing anything and presumably this receive statement",
    "start": "1529760",
    "end": "1535640"
  },
  {
    "text": "returns a state could be new could be old that gets down to New State and then",
    "start": "1535640",
    "end": "1540679"
  },
  {
    "text": "we call loop again with new state it's pretty simple but I remember when I was",
    "start": "1540679",
    "end": "1546360"
  },
  {
    "text": "learning earling I kind of wondered how all this behaviors you know how do they do this stuff under the covers and go",
    "start": "1546360",
    "end": "1552679"
  },
  {
    "text": "look at the code the code has a lot you know there's a lot of code there because it's handling a lot of cor cases but",
    "start": "1552679",
    "end": "1559520"
  },
  {
    "text": "fundamentally it just works like this um if you prefer diagrams it's",
    "start": "1559520",
    "end": "1565640"
  },
  {
    "start": "1563000",
    "end": "1674000"
  },
  {
    "text": "basically that our server starts it calls initialize has some initialization",
    "start": "1565640",
    "end": "1572240"
  },
  {
    "text": "but then goes into its Loop and it just sits there maybe changing its state eventually someone tells it to stop and",
    "start": "1572240",
    "end": "1578600"
  },
  {
    "text": "it exits and maybe does some",
    "start": "1578600",
    "end": "1582320"
  },
  {
    "text": "cleanup okay so that's that problem solved what about starting and stopping",
    "start": "1584240",
    "end": "1589440"
  },
  {
    "text": "the server well that's pretty easy because in ear laying a process can spawn another process there's a built-in",
    "start": "1589440",
    "end": "1596039"
  },
  {
    "text": "function for that for stopping you would just send it a message you can literally",
    "start": "1596039",
    "end": "1601159"
  },
  {
    "text": "send the atom stop and that thing can receive stop and go oh stop I'm supposed",
    "start": "1601159",
    "end": "1606320"
  },
  {
    "text": "to stop and exit so in terms of starting a KV server",
    "start": "1606320",
    "end": "1613240"
  },
  {
    "text": "we could just have a module KV we're exporting two functions start and stop",
    "start": "1613240",
    "end": "1619480"
  },
  {
    "text": "these zeros just mean they don't take any arguments start is just spawning a",
    "start": "1619480",
    "end": "1625080"
  },
  {
    "text": "function in the KV module named Loop we pass one argument this funny looking thing here is an empty map so we're just",
    "start": "1625080",
    "end": "1633200"
  },
  {
    "text": "using a map internally to store our keys and values we get back a process ID from",
    "start": "1633200",
    "end": "1639360"
  },
  {
    "text": "Spawn we then call register and give the name KV so I want to register this process given by process ID under the",
    "start": "1639360",
    "end": "1647240"
  },
  {
    "text": "name KV and that allows clients to just go and ask the registry where is KV and it gets the process ID and that's that",
    "start": "1647240",
    "end": "1654240"
  },
  {
    "text": "then we return this tuble which is okay the atom okay is very commonly used in",
    "start": "1654240",
    "end": "1661159"
  },
  {
    "text": "erlang to indicate success okay and then that process ID so the CER of start gets",
    "start": "1661159",
    "end": "1667080"
  },
  {
    "text": "this back this tupple pretty",
    "start": "1667080",
    "end": "1672360"
  },
  {
    "text": "straightforward stop is equally straightforward we just have a function stop we take the name KV which is",
    "start": "1672679",
    "end": "1679480"
  },
  {
    "start": "1674000",
    "end": "1698000"
  },
  {
    "text": "registered under that process we started and send it the message stop and then we",
    "start": "1679480",
    "end": "1685159"
  },
  {
    "text": "just return okay we don't actually care if there's any reply to that or anything else it will eventually get the message",
    "start": "1685159",
    "end": "1691600"
  },
  {
    "text": "and stop if it's still alive",
    "start": "1691600",
    "end": "1696559"
  },
  {
    "text": "right the server code for stop is a little more interesting but it's not that interesting it's just our Loop and",
    "start": "1697360",
    "end": "1705000"
  },
  {
    "start": "1698000",
    "end": "1726000"
  },
  {
    "text": "our receive block and all we're saying is receive receive when I see a message",
    "start": "1705000",
    "end": "1710080"
  },
  {
    "text": "that is the atom stop just return okay don't do anything else because we're not",
    "start": "1710080",
    "end": "1716880"
  },
  {
    "text": "calling the function recursively the loop function ends and when the loop function ends the process goes",
    "start": "1716880",
    "end": "1724679"
  },
  {
    "start": "1726000",
    "end": "1784000"
  },
  {
    "text": "away if we look at the API for our server again we have our module",
    "start": "1726279",
    "end": "1731919"
  },
  {
    "text": "declaration named KV we have all our exports these make all these functions",
    "start": "1731919",
    "end": "1737320"
  },
  {
    "text": "visible out inside the module KB so that others can call them from other modules",
    "start": "1737320",
    "end": "1742480"
  },
  {
    "text": "store takes a key and a value and stores it I don't show the actual code just have comments fine takes a key it either",
    "start": "1742480",
    "end": "1750960"
  },
  {
    "text": "returns a tupple which is the key in the value or it returns a Boolean",
    "start": "1750960",
    "end": "1756240"
  },
  {
    "text": "false this is a case where erl Lang's kind of loose typing is kind of helpful",
    "start": "1756240",
    "end": "1761720"
  },
  {
    "text": "in other languages you would have to use like a sum type or something to say I want to return two different things here",
    "start": "1761720",
    "end": "1768320"
  },
  {
    "text": "we're just saying it's either going to be a tle or it's going to be false delete just sends in the key and if it's",
    "start": "1768320",
    "end": "1776200"
  },
  {
    "text": "there deletes it if not doesn't do",
    "start": "1776200",
    "end": "1781000"
  },
  {
    "text": "anything the client code for storing takes the key and the",
    "start": "1783440",
    "end": "1788880"
  },
  {
    "start": "1784000",
    "end": "1836000"
  },
  {
    "text": "value uses the name KV the registered name of our process and sends it a message the message is this tle with",
    "start": "1788880",
    "end": "1797080"
  },
  {
    "text": "four elements the atom store which is almost like an instruction at this point the key and",
    "start": "1797080",
    "end": "1804159"
  },
  {
    "text": "the value that were passed in and self self is a function that's built into Earline for getting your own process",
    "start": "1804159",
    "end": "1812799"
  },
  {
    "text": "ID once we send that message the client goes into a receive and just says I'm",
    "start": "1813559",
    "end": "1818960"
  },
  {
    "text": "waiting to receive okay once I receive okay I return okay and I'm",
    "start": "1818960",
    "end": "1826480"
  },
  {
    "text": "done and that's it I'll show you why we send our process",
    "start": "1826480",
    "end": "1833960"
  },
  {
    "text": "ID in the server version the server has its Loop so here we have receive we have",
    "start": "1833960",
    "end": "1841279"
  },
  {
    "start": "1836000",
    "end": "1995000"
  },
  {
    "text": "stop which we had on the previous slide or the previous um thing we implemented",
    "start": "1841279",
    "end": "1846640"
  },
  {
    "text": "so if we get stop we return okay the semicolon means kind of like or if we",
    "start": "1846640",
    "end": "1852799"
  },
  {
    "text": "get this do this or if we get this four tle which is our store Key value process",
    "start": "1852799",
    "end": "1859960"
  },
  {
    "text": "ID we stick the key and the value in our map that gives us a new map we send the",
    "start": "1859960",
    "end": "1868679"
  },
  {
    "text": "message okay back to this process ID that was passed to us so that's letting the client know hey it's okay I did the",
    "start": "1868679",
    "end": "1875720"
  },
  {
    "text": "store and then with the new map we call Loop recursively now that recursion is tail",
    "start": "1875720",
    "end": "1882880"
  },
  {
    "text": "recursive there's no stack growth that can run forever and ever and ever as long as your computer stays",
    "start": "1882880",
    "end": "1890440"
  },
  {
    "text": "running find and delete are really built the same way just with different tles so",
    "start": "1891799",
    "end": "1898000"
  },
  {
    "text": "you take a request tupple maybe you know for find you'd probably use the Adam find pass in the key and your PID from",
    "start": "1898000",
    "end": "1904960"
  },
  {
    "text": "the client the server would receive that tupple look it up in the map return the",
    "start": "1904960",
    "end": "1910559"
  },
  {
    "text": "appropriate value or send sorry send the appropriate value back to the client delete similar",
    "start": "1910559",
    "end": "1919159"
  },
  {
    "text": "so I'm going to ask you a question since you're not asking me any um what parts",
    "start": "1919159",
    "end": "1925120"
  },
  {
    "text": "of what I just showed you are generic and what parts are specific to a",
    "start": "1925120",
    "end": "1930200"
  },
  {
    "text": "key Value Store",
    "start": "1930200",
    "end": "1935440"
  },
  {
    "text": "anybody don't all jump up at once all seems pretty generic for a key",
    "start": "1941200",
    "end": "1947200"
  },
  {
    "text": "store okay so it seems generic for a key value",
    "start": "1947200",
    "end": "1953320"
  },
  {
    "text": "okay um what if it wasn't a key value are there any parts of that that you could keep well I mean the only line",
    "start": "1953320",
    "end": "1959559"
  },
  {
    "text": "that sets new state is the only thing specific to key value the the loop seems like a a pattern they returning okay",
    "start": "1959559",
    "end": "1966519"
  },
  {
    "text": "seems roughly like a pattern so it's just the what the API for the message is and the natural store in the state and",
    "start": "1966519",
    "end": "1973279"
  },
  {
    "text": "build a new state okay excellent so just repeating for the video uh you're saying",
    "start": "1973279",
    "end": "1978799"
  },
  {
    "text": "that this whole thing of you know just storing a value in a map is specific to KV but the whole idea of looping and",
    "start": "1978799",
    "end": "1986000"
  },
  {
    "text": "receiving values and then sending replies to the client is pretty generic yep good",
    "start": "1986000",
    "end": "1993039"
  },
  {
    "text": "yes uh the generic parts are spawning the server you know spawning a server is",
    "start": "1993039",
    "end": "1998480"
  },
  {
    "start": "1995000",
    "end": "2073000"
  },
  {
    "text": "always the same you call some form of Spawn you give it a module and a function and some",
    "start": "1998480",
    "end": "2005399"
  },
  {
    "text": "arguments the management of the loop state is the same thing right it's just",
    "start": "2005399",
    "end": "2011320"
  },
  {
    "text": "the state is different but the loop is the same how you send a client request is the same that's like a built-in",
    "start": "2011320",
    "end": "2018279"
  },
  {
    "text": "function of erlang and ditto for the server replies it's all the same too and",
    "start": "2018279",
    "end": "2023760"
  },
  {
    "text": "then um stopping the server is the same as well you bust out of the",
    "start": "2023760",
    "end": "2029519"
  },
  {
    "text": "loop the solution specific Parts have to do with initialization because your",
    "start": "2029519",
    "end": "2035080"
  },
  {
    "text": "State's going to be different so you have to initialize it different ly based on whatever it is you're writing for our",
    "start": "2035080",
    "end": "2040799"
  },
  {
    "text": "solution for KB we used a map is an empty map the so that's the state the requests",
    "start": "2040799",
    "end": "2047880"
  },
  {
    "text": "that are sent from the client and the replies from the server are specific to the solution because you know there's",
    "start": "2047880",
    "end": "2053878"
  },
  {
    "text": "different values involved and different uh commands if you will involved and uh",
    "start": "2053879",
    "end": "2060000"
  },
  {
    "text": "then any cleanup if there's some thing you have to do to your state at the end to clean up you know maybe if you want",
    "start": "2060000",
    "end": "2065679"
  },
  {
    "text": "persistent store you have to go and flush something the dis or something but that's also",
    "start": "2065679",
    "end": "2071200"
  },
  {
    "text": "specific and that's really what behaviors are about behaviors take all",
    "start": "2071200",
    "end": "2076800"
  },
  {
    "start": "2073000",
    "end": "2209000"
  },
  {
    "text": "the generic stuff and put it in a behavior module so if you go look in your earling release and you go and uh",
    "start": "2076800",
    "end": "2084118"
  },
  {
    "text": "look at gen server there is a gen server module and it does exactly this it takes",
    "start": "2084119",
    "end": "2089158"
  },
  {
    "text": "all the generic parts of client server pattern if you want to call it that packages them up and that's what gen",
    "start": "2089159",
    "end": "2095960"
  },
  {
    "text": "server gives you the behavior expects to be initialized",
    "start": "2095960",
    "end": "2101000"
  },
  {
    "text": "with what's called a callback module the Callback module is what you",
    "start": "2101000",
    "end": "2106040"
  },
  {
    "text": "write it's got all the parts that solve the problem you're trying to",
    "start": "2106040",
    "end": "2111480"
  },
  {
    "text": "solve and once you start that behavior if you start your gen server as it",
    "start": "2111480",
    "end": "2118119"
  },
  {
    "text": "receives things in its loop it's going to be calling your callback module to do the actual work to solve the problem",
    "start": "2118119",
    "end": "2124520"
  },
  {
    "text": "you're solving so let's go through KV as a gen",
    "start": "2124520",
    "end": "2130760"
  },
  {
    "text": "server we still have a module every every uh earling module starts with a module",
    "start": "2130760",
    "end": "2136680"
  },
  {
    "text": "declaration here we have this these are called attributes by the way so Behavior",
    "start": "2136680",
    "end": "2141800"
  },
  {
    "text": "attribute and if you're British you can put a u in there still works um or if you just like to pretend",
    "start": "2141800",
    "end": "2149119"
  },
  {
    "text": "you're British I don't know here we're declaring this module is",
    "start": "2149119",
    "end": "2154480"
  },
  {
    "text": "a callback module for Gen server so it's going to what what the compiler does in",
    "start": "2154480",
    "end": "2161359"
  },
  {
    "text": "this case is it looks at the Gen server module that's already been compiled",
    "start": "2161359",
    "end": "2167640"
  },
  {
    "text": "because it came with your release and the Gen server module tells it oh by the way if someone declares themselves as a",
    "start": "2167640",
    "end": "2174720"
  },
  {
    "text": "callback module for me they have to implement the following functions and it gives you a list the compiler gets a",
    "start": "2174720",
    "end": "2181160"
  },
  {
    "text": "list of functions and if you don't have those functions in your module then it's going to give you a warning and say hey",
    "start": "2181160",
    "end": "2186280"
  },
  {
    "text": "if you're going to be a gen server call back module you have to implement some",
    "start": "2186280",
    "end": "2192040"
  },
  {
    "text": "functions we have that same API that we had before which is our own solution",
    "start": "2192040",
    "end": "2199160"
  },
  {
    "text": "API but we also have these callbacks that we have to support and there's a",
    "start": "2199160",
    "end": "2204280"
  },
  {
    "text": "number of them I'll go through them real quickly so there's a nit when the Gen",
    "start": "2204280",
    "end": "2210880"
  },
  {
    "start": "2209000",
    "end": "2365000"
  },
  {
    "text": "server process starts up it calls yourit function yourit function can create the",
    "start": "2210880",
    "end": "2218359"
  },
  {
    "text": "state that you want for that Loop and give it to the Gen server that's pretty",
    "start": "2218359",
    "end": "2223440"
  },
  {
    "text": "much what AIT does handle call is a call back that",
    "start": "2223440",
    "end": "2228480"
  },
  {
    "text": "handles a request reply so if I make a a find call for example I want a reply",
    "start": "2228480",
    "end": "2235640"
  },
  {
    "text": "I want either the value that was found with its key or I want the Boolean false",
    "start": "2235640",
    "end": "2241920"
  },
  {
    "text": "uh handle call would be the way to do that so it's like synchronous request reply handle cast that's like a one-way",
    "start": "2241920",
    "end": "2248319"
  },
  {
    "text": "message delete for example could be done with a cast just send something in and",
    "start": "2248319",
    "end": "2253800"
  },
  {
    "text": "say hey delete that key and you may not care that it um there's there's really",
    "start": "2253800",
    "end": "2259560"
  },
  {
    "text": "no reply to that would just say okay probably there's something called handle",
    "start": "2259560",
    "end": "2265119"
  },
  {
    "text": "info which is you imagine that Loop receiving all those things we had in our",
    "start": "2265119",
    "end": "2270720"
  },
  {
    "text": "previous examples store and find and those tles if it gets the loop gets",
    "start": "2270720",
    "end": "2277000"
  },
  {
    "text": "something doesn't know about then it's going to call your handle info function",
    "start": "2277000",
    "end": "2282040"
  },
  {
    "text": "and say hey I just got this message I don't know what it is maybe you know what it is um an example of this in real",
    "start": "2282040",
    "end": "2288359"
  },
  {
    "text": "life is if you have a gen server that's getting TCP um",
    "start": "2288359",
    "end": "2293839"
  },
  {
    "text": "messages gen Server doesn't know about TCP but presumably you have a socket somewhere in there and the socket got a",
    "start": "2293839",
    "end": "2300319"
  },
  {
    "text": "message so it calls your handle info call and says hey here's this TCP packet you can have it uh terminates called",
    "start": "2300319",
    "end": "2307760"
  },
  {
    "text": "when the process is about to stop that's where you can do some cleanup um and then code change is how",
    "start": "2307760",
    "end": "2315240"
  },
  {
    "text": "you do upgrades or downgrades so code J Code change basically what happens I'm",
    "start": "2315240",
    "end": "2321440"
  },
  {
    "text": "not going to go through it but uh quickly it kind your process is running",
    "start": "2321440",
    "end": "2327240"
  },
  {
    "text": "and the system kind of like pauses it and says this thing needs to do an upgrade it's going to call your code",
    "start": "2327240",
    "end": "2333960"
  },
  {
    "text": "change function with the state that you have currently and let you give it back some new state so if you had a state",
    "start": "2333960",
    "end": "2341319"
  },
  {
    "text": "that was like um say a record which is kind of like a struct uh and you want to add a field",
    "start": "2341319",
    "end": "2348200"
  },
  {
    "text": "you could do that in your code change by returning you know a different record with that added field in it and then",
    "start": "2348200",
    "end": "2354960"
  },
  {
    "text": "once it gets the new state it starts you back up and and Away you go so those are the call backs you have to implement if",
    "start": "2354960",
    "end": "2361040"
  },
  {
    "text": "you're going to write a gen server we'll take a look at how we do that um the way we start a gen server in",
    "start": "2361040",
    "end": "2370000"
  },
  {
    "start": "2365000",
    "end": "2454000"
  },
  {
    "text": "this case is we have a function called start link and all it does is called gen",
    "start": "2370000",
    "end": "2375200"
  },
  {
    "text": "server start link start link is basically starting a process and linking",
    "start": "2375200",
    "end": "2380319"
  },
  {
    "text": "to it we'll cover that soon um this thing",
    "start": "2380319",
    "end": "2386400"
  },
  {
    "text": "local KB is a tuckle that basically tells gen server to register the process that starts under this name KV so it's",
    "start": "2386400",
    "end": "2393440"
  },
  {
    "text": "like that register call I showed previously the client calls KV start",
    "start": "2393440",
    "end": "2398640"
  },
  {
    "text": "link which is this function and it just calls this function and that returns okay in a process ID just like it did",
    "start": "2398640",
    "end": "2405359"
  },
  {
    "text": "before the other things on the end like this is the module it's being called the",
    "start": "2405359",
    "end": "2411839"
  },
  {
    "text": "AIT function of this module this is the Callback module this would be any arguments that",
    "start": "2411839",
    "end": "2418200"
  },
  {
    "text": "want to be passed to a knit we don't have any in this case and then this is for debugging and uh things like that",
    "start": "2418200",
    "end": "2424640"
  },
  {
    "text": "we're not using that",
    "start": "2424640",
    "end": "2428318"
  },
  {
    "text": "um to start up a KV server we have our nit function all it does is return our state which is the empty map store is",
    "start": "2431280",
    "end": "2438920"
  },
  {
    "text": "really easy on the client because it just calls gen server call notice that we don't have to pass our pit in this",
    "start": "2438920",
    "end": "2444400"
  },
  {
    "text": "case because gen serers taking care of that for us but we still pass a tle with the",
    "start": "2444400",
    "end": "2449920"
  },
  {
    "text": "KV uh key and value in it to implement that we provide handle call which",
    "start": "2449920",
    "end": "2455680"
  },
  {
    "start": "2454000",
    "end": "2472000"
  },
  {
    "text": "receives that tle as an argument and basically does what it did before but you'll notice the return's a little",
    "start": "2455680",
    "end": "2461880"
  },
  {
    "text": "different because it has to return a value that is known to gen server so gen",
    "start": "2461880",
    "end": "2468000"
  },
  {
    "text": "server expects expects a reply tle to come back find similar we have a case",
    "start": "2468000",
    "end": "2474640"
  },
  {
    "start": "2472000",
    "end": "2668000"
  },
  {
    "text": "statement doing the maps look up and returning appropriately",
    "start": "2474640",
    "end": "2480400"
  },
  {
    "text": "stop really easy gen server stop so a lot of this gets much",
    "start": "2480400",
    "end": "2487800"
  },
  {
    "text": "easier with Gen server because it's doing a lot for you the internals of",
    "start": "2487800",
    "end": "2493319"
  },
  {
    "text": "call that that we saw for the store and find functions the call itself gen",
    "start": "2493319",
    "end": "2498560"
  },
  {
    "text": "server call runs in the client process and what happens inside it is the client",
    "start": "2498560",
    "end": "2504440"
  },
  {
    "text": "process monitors the server sticks a monitor on that server process which is",
    "start": "2504440",
    "end": "2510599"
  },
  {
    "text": "very inexpensive by the way you can do that very quickly because if the server dies the client wants to know that",
    "start": "2510599",
    "end": "2517880"
  },
  {
    "text": "right now the server is being used by other things and it could die easily so you want to know if it dies it then",
    "start": "2517880",
    "end": "2524880"
  },
  {
    "text": "sends the request to that server process then it has a timeout and it waits by default 5 Seconds you can",
    "start": "2524880",
    "end": "2531560"
  },
  {
    "text": "change that if you want and then presumably if the reply comes back from this then it gets returned to the caller",
    "start": "2531560",
    "end": "2538880"
  },
  {
    "text": "so it's pretty simple um so behaviors are kind of",
    "start": "2538880",
    "end": "2543960"
  },
  {
    "text": "handling a lot of this monitoring stuff for you there's something called the Cy module which is how the system talks to",
    "start": "2543960",
    "end": "2551400"
  },
  {
    "text": "behaviors behind the scenes to do things like code upgrades and shut down and all that kind of stuff uh CIS itself is",
    "start": "2551400",
    "end": "2559400"
  },
  {
    "text": "fairly U there's a lot in it but there's a couple things I just wanted to show you so this is the Earline shell you can",
    "start": "2559400",
    "end": "2566680"
  },
  {
    "text": "just type erl and get the shell this thing is the prompt so number one and",
    "start": "2566680",
    "end": "2572160"
  },
  {
    "text": "here I'm calling our start link function and I get back okay PID so PID is is",
    "start": "2572160",
    "end": "2577480"
  },
  {
    "text": "represented in the Shell as this weird thing 0360 I can then call CIS Trace with that",
    "start": "2577480",
    "end": "2584119"
  },
  {
    "text": "PIN say true once I do that the Gen server that we started here is traced so",
    "start": "2584119",
    "end": "2591160"
  },
  {
    "text": "if I send a message to it by calling find for example find goto we can see",
    "start": "2591160",
    "end": "2596240"
  },
  {
    "text": "these messages that pop out in the Shell that say oh KV got this call genser recall with the argument find go to from",
    "start": "2596240",
    "end": "2604319"
  },
  {
    "text": "34 which is us we do a self you see we're 34 and then it sent false to 34 and then",
    "start": "2604319",
    "end": "2612200"
  },
  {
    "text": "you see the result printed here false so if you're working with a behavior so",
    "start": "2612200",
    "end": "2618000"
  },
  {
    "text": "easy to just turn on Trace like this and get messages like that to come out and",
    "start": "2618000",
    "end": "2623119"
  },
  {
    "text": "help you debug what's going on that's all built in uh one of my other favorite ones is",
    "start": "2623119",
    "end": "2629319"
  },
  {
    "text": "something I actually added to Earl myself get state so if you want to look",
    "start": "2629319",
    "end": "2634880"
  },
  {
    "text": "at the state that's in the KV Pro process you can just say get State and it shows you this is the map that we",
    "start": "2634880",
    "end": "2641680"
  },
  {
    "text": "stuck the key go to Chicago into and there's also something called replace",
    "start": "2641680",
    "end": "2647119"
  },
  {
    "text": "state which if you're debugging you could stick a whole new map in there if you want to test some weird Corner case",
    "start": "2647119",
    "end": "2653440"
  },
  {
    "text": "um you can replace State as well so those are some things I added a few years",
    "start": "2653440",
    "end": "2658920"
  },
  {
    "text": "ago um just quickly going to go through applications and supervisors we have",
    "start": "2658920",
    "end": "2664680"
  },
  {
    "text": "about five minutes so application is fairly",
    "start": "2664680",
    "end": "2671000"
  },
  {
    "start": "2668000",
    "end": "2677000"
  },
  {
    "text": "straightforward it basically helps you package up your supervision trees and stuff and start and stop uh the startup",
    "start": "2671000",
    "end": "2677920"
  },
  {
    "start": "2677000",
    "end": "2705000"
  },
  {
    "text": "itself is this hierarchical sequence so the kernel has something called the application controller that's going to",
    "start": "2677920",
    "end": "2684119"
  },
  {
    "text": "start up for every application a master and then um the master is going",
    "start": "2684119",
    "end": "2691839"
  },
  {
    "text": "to start up the top level supervisor for your application that top supervisor is going to start start all of its children",
    "start": "2691839",
    "end": "2698359"
  },
  {
    "text": "be them other supervisors or workers so most applications look like",
    "start": "2698359",
    "end": "2705520"
  },
  {
    "start": "2705000",
    "end": "2788000"
  },
  {
    "text": "this you have a module whatever you name it here it's imaginatively called my app",
    "start": "2705520",
    "end": "2712880"
  },
  {
    "text": "uh it's a behavior so it's an application Behavior this time it has to export start and stop the start function",
    "start": "2712880",
    "end": "2720200"
  },
  {
    "text": "just calls the supervisor and starts it up and the stop function just says okay almost every application that you ever",
    "start": "2720200",
    "end": "2727359"
  },
  {
    "text": "see an airline looks like that it could be more involved there's other stuff you can do but most look like",
    "start": "2727359",
    "end": "2734480"
  },
  {
    "text": "that I said before workers and supervisors Implement application logic",
    "start": "2734480",
    "end": "2739720"
  },
  {
    "text": "and um the supervisors watch the application logic to make sure there's no errors happening so basically it kind",
    "start": "2739720",
    "end": "2747480"
  },
  {
    "text": "of looks like this you have this simple core you have an application here's the top level",
    "start": "2747480",
    "end": "2753960"
  },
  {
    "text": "supervisor starting another supervisor those are both starting some workers",
    "start": "2753960",
    "end": "2760079"
  },
  {
    "text": "this thing is Trivial we saw the triviality of the application on the previous slide supervisor itself is",
    "start": "2760079",
    "end": "2767119"
  },
  {
    "text": "implemented as a gen server it's pretty simple too um all the hard work is done",
    "start": "2767119",
    "end": "2772640"
  },
  {
    "text": "down here so this thing provides a nice base for your application even if these",
    "start": "2772640",
    "end": "2777960"
  },
  {
    "text": "fail you kind of come back up here and you can restart things take action to",
    "start": "2777960",
    "end": "2784400"
  },
  {
    "text": "handle the errors um there's a bunch of ways of starting",
    "start": "2784400",
    "end": "2790720"
  },
  {
    "start": "2788000",
    "end": "2866000"
  },
  {
    "text": "workers that you know you might have workers for example if we start at a KV",
    "start": "2790720",
    "end": "2795839"
  },
  {
    "text": "and then a bunch of clients we'd want the KV to come before the clients because the clients want to use the KV so we can put them in a certain order",
    "start": "2795839",
    "end": "2803079"
  },
  {
    "text": "and use the um rest for one strategy so if the KV dies we want all the clients",
    "start": "2803079",
    "end": "2808680"
  },
  {
    "text": "to be killed too you can also have a one for one which just says I have a bunch of workers that are kind of independent",
    "start": "2808680",
    "end": "2815440"
  },
  {
    "text": "if any one of them dies just restart the one that died and leave the others alone there's a lot of flexibility there then",
    "start": "2815440",
    "end": "2821400"
  },
  {
    "text": "you can have Max number of restarts per uh time period That's to escalate a",
    "start": "2821400",
    "end": "2827200"
  },
  {
    "text": "failure so you don't sit there and just Loop forever trying to restart something that's never going to restart this is just a a child",
    "start": "2827200",
    "end": "2834520"
  },
  {
    "text": "specification that shows how to start up a child you can see that it's a map and it's got certain fields that have to be",
    "start": "2834520",
    "end": "2841000"
  },
  {
    "text": "filled in so in the uh in the original solution",
    "start": "2841000",
    "end": "2846960"
  },
  {
    "text": "if the server dies if the server dies while a client has a request outstanding or a server takes too long",
    "start": "2846960",
    "end": "2854440"
  },
  {
    "text": "to process something how is that code that original code if you were to go back on my slides and look at that",
    "start": "2854440",
    "end": "2860680"
  },
  {
    "text": "original code it doesn't do anything to handle any of that stuff yet when you use the Gen server it handles all that",
    "start": "2860680",
    "end": "2868319"
  },
  {
    "start": "2866000",
    "end": "2890000"
  },
  {
    "text": "stuff because of the monitoring the timeout you know the fact that it handles system messages and can deal",
    "start": "2868319",
    "end": "2874920"
  },
  {
    "text": "with this and the fact that it's supervised by a supervisor means that a lot of errors and problems are just kind",
    "start": "2874920",
    "end": "2882480"
  },
  {
    "text": "of handled for you by following the rules of OTP so we'll wrap it up um the benefits",
    "start": "2882480",
    "end": "2891000"
  },
  {
    "start": "2890000",
    "end": "3020000"
  },
  {
    "text": "of behaviors are handling tricky Corner cases the ability to look at something",
    "start": "2891000",
    "end": "2897520"
  },
  {
    "text": "and say oh it's a gen server I know what that does every Earl programmer knows what these behaviors are what they do so",
    "start": "2897520",
    "end": "2904240"
  },
  {
    "text": "I can look at anyone's code and kind of follow it pretty easily um all the",
    "start": "2904240",
    "end": "2909359"
  },
  {
    "text": "corner cases I mentioned but those Corner cases came about because of years",
    "start": "2909359",
    "end": "2914680"
  },
  {
    "text": "of this stuff being used in production and kind of finding them the hard way a",
    "start": "2914680",
    "end": "2919960"
  },
  {
    "text": "lot of it's been you know tested and tested and tested quick checked and all that kind of stuff so lot there there's",
    "start": "2919960",
    "end": "2927119"
  },
  {
    "text": "far far more to OTP than what I've shown you but we only had 50 minutes um there",
    "start": "2927119",
    "end": "2933480"
  },
  {
    "text": "are the behaviors I mentioned that we didn't even cover the finite St machines uh the uh event handling stuff you can",
    "start": "2933480",
    "end": "2941440"
  },
  {
    "text": "write your own behaviors there's a whole framework for that uh packaging and deploying that's like a whole talk unto",
    "start": "2941440",
    "end": "2947720"
  },
  {
    "text": "itself upgrades same deal so there's a lot there um if you want more",
    "start": "2947720",
    "end": "2954960"
  },
  {
    "text": "information this just came out the last book I wrote was on corba 17 years ago",
    "start": "2954960",
    "end": "2961240"
  },
  {
    "text": "so this is a little different um came out an ebook Friday and print is",
    "start": "2961240",
    "end": "2968559"
  },
  {
    "text": "supposed to come out this week I think so Franchesco chesini and I wrote that Franchesco also wrote a book previously",
    "start": "2968559",
    "end": "2975200"
  },
  {
    "text": "with Simon Thompson called llang programming that's a great book to learn erlang and uh a guy named Fred",
    "start": "2975200",
    "end": "2983359"
  },
  {
    "text": "heyar uh wrote this bit uh using erlang and anger so he works at Heroku and uses",
    "start": "2983359",
    "end": "2989799"
  },
  {
    "text": "erlang there and he's written a bunch of stuff that's all about using llang in production it's gold and then if you're",
    "start": "2989799",
    "end": "2996799"
  },
  {
    "text": "into Elixir you could just go to the Elixir website they have some great learning resources",
    "start": "2996799",
    "end": "3003040"
  },
  {
    "text": "there and uh remember to rate this session all",
    "start": "3003040",
    "end": "3008920"
  },
  {
    "text": "right thank you [Applause]",
    "start": "3008920",
    "end": "3018340"
  }
]