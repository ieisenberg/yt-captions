[
  {
    "start": "0",
    "end": "71000"
  },
  {
    "text": "Hi, I'm Lars from the GOTO team, and I'm here\nin Copenhagen at GOTO Copenhagen.",
    "start": "13599",
    "end": "18820"
  },
  {
    "text": "This is a GOTO Unscripted episode where I'm\njoined by Richard Feldman and Erik Doernenburg.",
    "start": "18820",
    "end": "25039"
  },
  {
    "text": "We're gonna nerd out a little bit about programming\nlanguages, but before we do that, could you say a few words about yourselves? Richard, would you like to go first?",
    "start": "25039",
    "end": "31508"
  },
  {
    "text": "Sure. I'm Richard. I work at a company called NoRedInk. We're hiring.",
    "start": "31509",
    "end": "37710"
  },
  {
    "text": "I've done a lot of Elm in my career and I'm\nthe author of \"Elm in Action\" from Manning",
    "start": "37710",
    "end": "42730"
  },
  {
    "text": "Publications. I’m also really into Rust and doing a lot\nof that on the side because I'm working on making a programming language that complies\nwith written Rust.",
    "start": "42730",
    "end": "48538"
  },
  {
    "text": "I've also done a course on frontend masters\nfor Elm and also for Rust. Thanks, and you, Erik?",
    "start": "48539",
    "end": "54019"
  },
  {
    "text": "I work at ThoughtWorks, a consulting company. I work mostly as a consultant, helping clients\nmake more out of software, write software",
    "start": "54019",
    "end": "60500"
  },
  {
    "text": "in new ways, using different programming languages\nas the client requires, as the circumstances",
    "start": "60500",
    "end": "66340"
  },
  {
    "text": "require and as new programming languages appear. Interesting.",
    "start": "66340",
    "end": "71670"
  },
  {
    "start": "71000",
    "end": "344000"
  },
  {
    "text": "I wanted to do a fun experiment with you two. At the party keynote that we had last night\n— I think you were both there — we had",
    "start": "71670",
    "end": "77799"
  },
  {
    "text": "Mark Rendle design the worst programming language\nin the world by looking at previous languages",
    "start": "77799",
    "end": "84799"
  },
  {
    "text": "that do horrible, horrible things and taking\nthe worst parts of all of those and building the worst language he could think of.",
    "start": "84799",
    "end": "90509"
  },
  {
    "text": "I was hoping we could do a little bit of the\nopposite exercise here, where if you were to design your ideal language, what kind of\nfeatures would you take from where and what",
    "start": "90509",
    "end": "100258"
  },
  {
    "text": "languages would you draw inspiration from? I know, Richard, you are working on your programming\nlanguage, so you might have been through some",
    "start": "100259",
    "end": "106920"
  },
  {
    "text": "of this exercise already. Maybe you want to start. Sure. Well, it's a dangerous place to start because\nI'm liable to talk about it forever.",
    "start": "106920",
    "end": "116219"
  },
  {
    "text": "I'll try to keep it constrained to characteristics\nI want, what languages do I wanna take inspiration",
    "start": "116219",
    "end": "124409"
  },
  {
    "text": "from. So, first off, the prompt was the ideal language.",
    "start": "124409",
    "end": "131780"
  },
  {
    "text": "To me, I don't know that there's such a thing\nas one ideal language for all problems. It's more domain-specific.",
    "start": "131780",
    "end": "137819"
  },
  {
    "text": "If you're building an operating system, I\nthink you want a pretty different language than if you're building a web server versus\nif you're building a video game.",
    "start": "137819",
    "end": "146450"
  },
  {
    "text": "Beta systems would be another example. In my career, I mainly did web development,\nso, let's just maybe keep it constrained to",
    "start": "146450",
    "end": "155290"
  },
  {
    "text": "that, at least I can start there. I think if you're doing web development, there's\nthe frontend and the backend.",
    "start": "155290",
    "end": "162180"
  },
  {
    "text": "Frontend, I'm really happy with Elm, so I'm\nactually not trying to design a language for the web frontend.",
    "start": "162180",
    "end": "167879"
  },
  {
    "text": "I guess the language I'm working on, if it's\nused in web development, would be used on the server-side.",
    "start": "167880",
    "end": "174269"
  },
  {
    "text": "I'm a big fan of really ergonomic type checking.",
    "start": "174270",
    "end": "179830"
  },
  {
    "text": "I've definitely used languages that have varying\ndegrees of ergonomics around type checking.",
    "start": "179830",
    "end": "184960"
  },
  {
    "text": "Somewhere it seems it's a net negative, it's\nso painful that I would rather not have it, rather have dynamic types.",
    "start": "184960",
    "end": "192260"
  },
  {
    "text": "Elm has an extremely well-designed type system\nwith really helpful, friendly error messages. So, I think that is my ideal.",
    "start": "192260",
    "end": "199459"
  },
  {
    "text": "That's definitely something I would take from\nElm. As far as memory management goes, I think\nautomatic memory management would definitely",
    "start": "199460",
    "end": "207790"
  },
  {
    "text": "be something I would want, building an operating\nsystem, probably not. You probably want direct control over that.",
    "start": "207790",
    "end": "212800"
  },
  {
    "text": "Maybe I can just start with those two, just\nso I don't talk forever. What do you think?",
    "start": "212800",
    "end": "219510"
  },
  {
    "text": "I'm in complete agreement about the consultant\nanswer: “It depends,” right? I don't think you should try to design a language.",
    "start": "219510",
    "end": "225620"
  },
  {
    "text": "Part of Mark's keynote was the fun of saying\nhe wants to design a language for everything and that is, of course, the first mistake\nif you do.",
    "start": "225620",
    "end": "231400"
  },
  {
    "text": "So, I completely agree, it depends on what\nyour target is. I think for the memory management, we could\neven on the lowest level, do something like",
    "start": "231400",
    "end": "240960"
  },
  {
    "text": "automatic reference counting, or what Rust\ndoes with its memory management, with the borrow checker.",
    "start": "240960",
    "end": "246280"
  },
  {
    "text": "Humans have proven over 20, I don't know,\n30 years, that we are incapable of doing memory",
    "start": "246280",
    "end": "251930"
  },
  {
    "text": "management correctly with all the tools and\nbest intentions. So yeah, give that to the machine. Types, I'm similarly conflicted.",
    "start": "251930",
    "end": "258590"
  },
  {
    "text": "I've written large systems in what is, I learned\nlast night, gradual typing. I noticed from Objective-C, where you can\nalso design types or you can leave them out",
    "start": "258590",
    "end": "266539"
  },
  {
    "text": "if you want. In a large team, it is often quite good in\nlarge code places to have the type system because it really helps you understand the\ncode better and most of the time it's important",
    "start": "266539",
    "end": "274480"
  },
  {
    "text": "that you can read the code. Writing is only done once most of the time,\nreading is happening often, so types really",
    "start": "274480",
    "end": "280300"
  },
  {
    "text": "help. I guess one aspect that you didn't touch upon\nis this often portrayed divide between object-oriented",
    "start": "280300",
    "end": "285940"
  },
  {
    "text": "programming, which was considered the winner\nuntil about five years ago, and then functional programming, and I think the languages that\nallow doing both are probably something I",
    "start": "285940",
    "end": "294610"
  },
  {
    "text": "would draw inspiration from, or would at least\ndesign a language that can use something for very state heavy things that are based on\nclasses and attached behavior, but also allow",
    "start": "294610",
    "end": "303620"
  },
  {
    "text": "you to do something that is more functional,\nbut not trying to say I'm either/or. Gotcha.",
    "start": "303620",
    "end": "308850"
  },
  {
    "text": "So, I'm definitely on the functional side\nof things. I spent the first half of my career doing\nobject-oriented programming, the second half",
    "start": "308850",
    "end": "316370"
  },
  {
    "text": "doing functional programming, and I definitely\nappreciate where the “let's do both” is",
    "start": "316370",
    "end": "322570"
  },
  {
    "text": "coming from. But, from my perspective, the thing that I\nlike about functional programming is the subtractive aspect about “let's take things away and\nmake it smaller and simpler”.",
    "start": "322570",
    "end": "330380"
  },
  {
    "text": "And so, since that's part of the appeal, constraining\nit down and just saying, \"Let's just do functional",
    "start": "330380",
    "end": "337180"
  },
  {
    "text": "and let's have this be one small set of simple\nprimitives,\" for me that's the way to go. That's my ideal.",
    "start": "337180",
    "end": "343660"
  },
  {
    "text": "I'm completely with you. I have a computer science background. I completely agree. I love the elegance. I mentioned it in the talk I did about Rust\nthat I did the precursor of the implementation",
    "start": "343660",
    "end": "352389"
  },
  {
    "start": "344000",
    "end": "637000"
  },
  {
    "text": "I was showing in Clojure and I enjoyed that\nactually more. I'm a great fan of LISP-like languages, but\nI recognize that there is something in object-oriented",
    "start": "352390",
    "end": "360650"
  },
  {
    "text": "programming that appeals to human beings:\ncategorizing, classifying, putting things somewhere, and I think that is hard to get\nover.",
    "start": "360650",
    "end": "367130"
  },
  {
    "text": "And there's one system we wrote for, or with\na client, it's a large system, with many microservices,",
    "start": "367130",
    "end": "372640"
  },
  {
    "text": "and the backend is not the backend. The backend is just an adapt to cover some\nreal backend that can sometimes be a mainframe,",
    "start": "372640",
    "end": "380650"
  },
  {
    "text": "and we thought what better place to use functional\nprogramming because you're basically transforming what's coming from the real backend to something\nthat goes into an HTTP endpoint JSON to the",
    "start": "380650",
    "end": "389810"
  },
  {
    "text": "Javascript frontend. We chose Clojure for it. And people were not so used to it.",
    "start": "389810",
    "end": "395680"
  },
  {
    "text": "They were struggling and we gave it about\ntwo years, to be honest with you, on the services and still, when we then asked the teams in\nthe next microservice, \"What do you want to",
    "start": "395680",
    "end": "404640"
  },
  {
    "text": "write it in?\" The answer was Kotlin. They were, like, \"Yeah, they're still out\nof state and we want to ship these objects.",
    "start": "404640",
    "end": "412300"
  },
  {
    "text": "It's a sales system, there's a custom object\nand products and we can model this in our head and we understand this.",
    "start": "412300",
    "end": "418860"
  },
  {
    "text": "We know the patterns.\" It was heartbreaking for me to see. That was a place where the client didn't object\nto us using Clojure, where it was really a",
    "start": "418860",
    "end": "426130"
  },
  {
    "text": "great area of application. Still, on the whole, the team said the experience\nwas good. But when asked, \"Would you do it again,\" which\nis the critical question, they said, \"No,",
    "start": "426130",
    "end": "435319"
  },
  {
    "text": "we choose Kotlin.\" That's interesting. I definitely know people who have stories\non both sides of that.",
    "start": "435320",
    "end": "441150"
  },
  {
    "text": "People who have a similar story where they\ntried, maybe in the case of Elm, they were",
    "start": "441150",
    "end": "446620"
  },
  {
    "text": "used to React and TypeScript. They tried Elm and then they didn't like it. They're like, \"You know what?",
    "start": "446620",
    "end": "451810"
  },
  {
    "text": "I wanna go back.\" Or maybe they went with ReScript or some of\nthe slightly more object-oriented direction.",
    "start": "451810",
    "end": "456949"
  },
  {
    "text": "I guess some people would argue with me about\nthat, but I think that's accurate. But then, I also know quite a lot of people\nwho have the opposite story, where they tried",
    "start": "456949",
    "end": "464789"
  },
  {
    "text": "it, and they're like, \"I can never go back.\" Actually, a lot of our hiring comes from people\nwho are like, \"Now that I've had a taste,",
    "start": "464790",
    "end": "471360"
  },
  {
    "text": "I can't go back to…\" not Kotlin specifically\nbut like, \"the object-oriented world. I need more of this functional stuff in my\nlife.\"",
    "start": "471360",
    "end": "477500"
  },
  {
    "text": "I wanna go back to something you said though\nbecause I think it is a good observation that",
    "start": "477500",
    "end": "482610"
  },
  {
    "text": "humans like classification. That's kind of a fun activity for us. Something that I was reflecting on somewhat\nrecently was looking back at my history with",
    "start": "482610",
    "end": "492270"
  },
  {
    "text": "object-oriented programming, and I did spend\na lot of time on that and I did enjoy it, but I don't think it actually helped me out\nthat much in terms of my code.",
    "start": "492270",
    "end": "499440"
  },
  {
    "text": "I spent a lot of time classifying what is\nthis thing? What should it be? What should the taxonomy be?",
    "start": "499440",
    "end": "504780"
  },
  {
    "text": "What should the hierarchy be? But with regards to what I actually get out\nof it in terms of productivity, I don't think",
    "start": "504780",
    "end": "510060"
  },
  {
    "text": "it really paid off. So, I agree with the point that as humans,\nwe like that, but I'm not sure if that means",
    "start": "510060",
    "end": "516589"
  },
  {
    "text": "that it should be in the language. Maybe it's a temptation that's better removed.",
    "start": "516589",
    "end": "522240"
  },
  {
    "text": "Inheritance is probably a temptation that\nis best removed. I mean, you can do object-oriented programming\nand completely overdo it with inheritance.",
    "start": "522240",
    "end": "529709"
  },
  {
    "text": "I have seen that. Absolutely. It isn't everything. On an abstract level it’s just something,\nand that's true.",
    "start": "529709",
    "end": "534878"
  },
  {
    "text": "But when you write code, you get these almost\nempty base classes. There's hardly anything in there and you're\nlike, \"Why did we even make a common supertype?\"",
    "start": "534879",
    "end": "542680"
  },
  {
    "text": "I get that. I also remember one of the enterprise Java\njobs I worked on earlier in my career.",
    "start": "542680",
    "end": "548740"
  },
  {
    "text": "This was more than 10 years ago, but I think\nthis is probably still done in quite a lot of places. We had a rule on the team that we always build\nthe interface, then only return concrete types",
    "start": "548740",
    "end": "561920"
  },
  {
    "text": "when you need to. So, we always say we're gonna use the list\ninterface everywhere except when you need to actually make one, and then you're gonna\nuse array list.",
    "start": "561920",
    "end": "568779"
  },
  {
    "text": "The thing is we always did exactly that. We always had an exact list for the interface,\nand then we always had an exact array list",
    "start": "568779",
    "end": "575350"
  },
  {
    "text": "for the implementation. And then, whenever we're making our classes,\nthere was also a corresponding rule that you had to make an interface first.",
    "start": "575350",
    "end": "581139"
  },
  {
    "text": "Then we would always make an interface, and\nthen make exactly one class that implemented all the methods of that interface and then\nthat's what we would use everywhere.",
    "start": "581139",
    "end": "588589"
  },
  {
    "text": "And I looked back and I think I know the principle\nwas, theoretically, if we want to, we can swap out the implementation for something\nelse.",
    "start": "588589",
    "end": "594990"
  },
  {
    "text": "But based on how often we did that, which\nwas the two years I worked at that company, zero times, I think we probably would have\nbeen better off if we'd just been like, \"You",
    "start": "594990",
    "end": "603748"
  },
  {
    "text": "know what? Let's just assume we're gonna pay the price\nif we ever do need to change this and we won't have all the interfaces in place.",
    "start": "603749",
    "end": "609050"
  },
  {
    "text": "We'll just go through and do the change to\nswitch it from one class to another.\" I think that would have been much cheaper.",
    "start": "609050",
    "end": "617389"
  },
  {
    "text": "This was also not about classification, really\njust about premature abstraction perhaps.",
    "start": "617389",
    "end": "627300"
  },
  {
    "text": "Thinking about how we can spend so much time\nfollowing what seems like a nice thing or a best practice, and then being like, \"But\ndid it really pay for itself?",
    "start": "627300",
    "end": "635439"
  },
  {
    "text": "I don't know.\" really stuck with me. Good point. That brings me to testability.",
    "start": "635440",
    "end": "640920"
  },
  {
    "start": "637000",
    "end": "795000"
  },
  {
    "text": "That really should be in the language. Why am I thinking that? Because historically, one of the drivers for\nthis interface implementation separation was",
    "start": "640920",
    "end": "649899"
  },
  {
    "text": "testability. Remember about 10, 15 years ago, dependency\ninjection was something new. People sometimes did this and said, \"Okay,\nlet's separate the interface from the implementation\"",
    "start": "649899",
    "end": "660160"
  },
  {
    "text": "because then in the test, you only have the\ninterface. You can't instantiate it. Or in your code, you can't instantiate an\ninterface, which means you must declare dependency.",
    "start": "660160",
    "end": "667170"
  },
  {
    "text": "And then, you force the teams to use dependency\ninjection. So, there were some other motivations behind\nit. I'm noticing again when you do unit testing,\nyou often want to mock the surrounding things.",
    "start": "667170",
    "end": "677399"
  },
  {
    "text": "I've actually written a mock object framework\nfor Objective-C. And when Swift came out,",
    "start": "677399",
    "end": "682550"
  },
  {
    "text": "people asked me, \"Can you make the Swift version?\" I said, \"No, I can't because I don't even\nhave the runtime to do this.\" There's just no way that I can do all the\ntrickery in the runtime that I could do with",
    "start": "682550",
    "end": "691130"
  },
  {
    "text": "Objective-C. But, that means then, the interface\nis becoming more important, because then you",
    "start": "691130",
    "end": "696160"
  },
  {
    "text": "can step away and you can do things in your\ntest and the unit test especially. I think that's a great point about testability\nin general, and I would take it a step further",
    "start": "696160",
    "end": "704678"
  },
  {
    "text": "and say that, to me, you might as well plan\nto design any new language with tests in mind.",
    "start": "704679",
    "end": "713199"
  },
  {
    "text": "Historically, it seems like most languages\nwere designed with a compiler, and we got a language design, and then there are these\nancillary things that everyone's going to",
    "start": "713199",
    "end": "722529"
  },
  {
    "text": "do sooner or later. But for some reason it's always considered\noutside of the scope of the language, even though you know it's gonna happen.",
    "start": "722529",
    "end": "728170"
  },
  {
    "text": "Someone's gonna write a test framework. There's gonna be a package manager and now\nin more recent years, it seems very safe to",
    "start": "728170",
    "end": "733529"
  },
  {
    "text": "assume there's gonna be a formatter that's\ngonna format your code in a specific way. I think Go started that but, I mean, plenty\nof languages have picked that up now.",
    "start": "733529",
    "end": "742029"
  },
  {
    "text": "And so, at that point, if you know this is\ngoing to be done by someone at some point, it seems like you should just design for it.",
    "start": "742029",
    "end": "747970"
  },
  {
    "text": "You could do a better job or make it more\nwell supported if you're planning ahead for it.",
    "start": "747970",
    "end": "753970"
  },
  {
    "text": "And yeah, testing is definitely a big one. And this is something we see with Rust, for\nexample. They put the package manager into the language.",
    "start": "753970",
    "end": "759480"
  },
  {
    "text": "I mean, not the programming language, but\nit comes with Rust. There's no way to do Rust without the package\nmanager.",
    "start": "759480",
    "end": "764570"
  },
  {
    "text": "They put the unit test actually into the same\nfile as the code, so they really thought that",
    "start": "764570",
    "end": "770649"
  },
  {
    "text": "through. That's an inspiration to take from it. I mean, it should be testable. I think in this day in age, we really have\nto have a language where you can write unit",
    "start": "770649",
    "end": "777989"
  },
  {
    "text": "tests because we know that we are writing\nincreasing amounts of code that stay around for a while. We talk about shifting away from project to\nproducts, these services we expect to live",
    "start": "777989",
    "end": "785389"
  },
  {
    "text": "for a while and if you don't write tests,\nyou might as well give up, I guess.",
    "start": "785389",
    "end": "790920"
  },
  {
    "text": "They're definitely indispensable, can't do\nwithout them. Okay.",
    "start": "790920",
    "end": "796209"
  },
  {
    "start": "795000",
    "end": "1116000"
  },
  {
    "text": "I wanna go back to memory management for a\nsecond because you mentioned Rust. And so, I think we agree that, at least for\nthe types of problems we're talking about",
    "start": "796209",
    "end": "803678"
  },
  {
    "text": "solving, we probably wanna go automatic memory\nmanagement. But, there are a couple of different ways\nof doing that.",
    "start": "803679",
    "end": "809239"
  },
  {
    "text": "You mentioned automatic reference counting\nor Rust has the ownership system, so it's just freeing allocating things on the fly.",
    "start": "809239",
    "end": "814910"
  },
  {
    "text": "And then, you have the most popular, which\nis tracing garbage collection. Of those three, to me, tracing garbage collection\nis the least appealing, even though it's the",
    "start": "814910",
    "end": "823319"
  },
  {
    "text": "most popular, just because you have GC pauses. And I know that JVM and Go have spent a lot\nof time decreasing pause times, decreasing",
    "start": "823319",
    "end": "829889"
  },
  {
    "text": "latency and all that stuff. But, it still seems like at the end of the\nday, you just don't have to worry about that",
    "start": "829889",
    "end": "836060"
  },
  {
    "text": "problem if you can do automatic reference\ncounting or allocating in free on the fly like Rust does.",
    "start": "836060",
    "end": "841470"
  },
  {
    "text": "But, then there's always the question of latency\nversus throughput and supposedly tracing GCs",
    "start": "841470",
    "end": "846699"
  },
  {
    "text": "have the highest throughput over a given period\nof time compared to automatic reference counting and so forth. But, I'm also aware of some research and this\nis, spoiler alert, the language I'm working",
    "start": "846699",
    "end": "854810"
  },
  {
    "text": "on, we're going down the automatic reference\ncounting route. But, you can do stuff like compiler time reference\ncounting, where you can detect that, oh, there's",
    "start": "854810",
    "end": "862029"
  },
  {
    "text": "going to be an increment here, a decrement\nhere. Those will just cancel each other out so we're\nnot going to do either of those.",
    "start": "862029",
    "end": "867220"
  },
  {
    "text": "It's hard to say in practice. The language is called Roc, R-O-C, roc-lang.org.",
    "start": "867220",
    "end": "875290"
  },
  {
    "text": "And we haven't gotten any big enough projects\nyet because it's a very work in progress, very early stages kind of thing.",
    "start": "875290",
    "end": "884689"
  },
  {
    "text": "But so far, it seems like the frequency with\nwhich it's possible to use these papers and",
    "start": "884689",
    "end": "889900"
  },
  {
    "text": "these techniques that we learned to do this\ncompiler time reference guide seems like quite a lot of the reference counts can be alighted,\nso we'll see.",
    "start": "889900",
    "end": "896399"
  },
  {
    "text": "And my impression was also the tracing garbage\ncollectors just work. I mean, there's a lot of theory behind it,\nyou can get reasonable implementation work.",
    "start": "896399",
    "end": "902589"
  },
  {
    "text": "You have long pauses, but in some cases, it\ndoesn't matter so much. And I think it is exactly like you said.",
    "start": "902589",
    "end": "908509"
  },
  {
    "text": "The research has gone further now, so understanding\nthis and, I mean, Rust didn't invent the borrowship or this concept, but they were the first ones\nto get it actually implemented properly.",
    "start": "908510",
    "end": "917480"
  },
  {
    "text": "And I think what we're seeing now is a lot\nof the concepts that are somewhere in the middle between no memory management and the\ntracing garbage collectors, which they're,",
    "start": "917480",
    "end": "924688"
  },
  {
    "text": "like, a blunt tool, if you will, right? You know they work and you can't make mistakes,\nand we're exploring the middle ground now",
    "start": "924689",
    "end": "930949"
  },
  {
    "text": "and I think we will see more and more successful\nlanguages in that middle ground. On the performance, I'm curious.",
    "start": "930949",
    "end": "936238"
  },
  {
    "text": "I know all the theory in Java about the different\ngenerations of objects and most objects are",
    "start": "936239",
    "end": "941819"
  },
  {
    "text": "thrown away. Again, if you're writing websites, probably\nmost of the objects are there just for a brief moment in time to create the response.",
    "start": "941819",
    "end": "947808"
  },
  {
    "text": "You can throw them away. You don't get heat fragmentation like you\nwould in other languages, but sometimes you can compact the heap.",
    "start": "947809",
    "end": "953810"
  },
  {
    "text": "I think there's room for implementation and\nI think there's enough systems that will be, for the programmers, they will be happy if\nthey don't know.",
    "start": "953810",
    "end": "960509"
  },
  {
    "text": "I mean if you can't tell where they're using\nthe tracing garbage collector or automatic reference content or something similar, as\na programmer, you don't care.",
    "start": "960509",
    "end": "968420"
  },
  {
    "text": "And they probably choose the language based\non other features, but if the language doesn't have to use a tracing garbage collector, it's\nprobably better for you.",
    "start": "968420",
    "end": "974738"
  },
  {
    "text": "Yeah, yeah. Two interesting areas of research around that. First Compacting. There was a really cool talk at Strange Loop\na couple years ago, called Compacting the",
    "start": "974739",
    "end": "982459"
  },
  {
    "text": "Uncompactable. And it was basically about how they designed\nan implementation of Malloc that actually",
    "start": "982459",
    "end": "987519"
  },
  {
    "text": "can do compacting. Really impressive stuff and they were using\nsome very fancy tricks to make that happen.",
    "start": "987519",
    "end": "993480"
  },
  {
    "text": "Of course, an automatic reference counting\nsystem could use that. And then throughput of automatic reference\ncounting versus tracing GC.",
    "start": "993480",
    "end": "1001250"
  },
  {
    "text": "Apparently, Apple is, because Swift does automatic\nreference counting, actually working on it at the hardware level, making that faster\nand adding some...I don't remember exactly",
    "start": "1001250",
    "end": "1008889"
  },
  {
    "text": "what it was. It was some sort of either a new CPU instruction\nor augmenting existing CPU instructions for",
    "start": "1008889",
    "end": "1015998"
  },
  {
    "text": "atomic reference counts to make them faster. And that's definitely an interesting sign\nof potential things to come because if you",
    "start": "1015999",
    "end": "1024170"
  },
  {
    "text": "think about it, you have this big company\nthat's really heavily invested not only in",
    "start": "1024170",
    "end": "1029400"
  },
  {
    "text": "Swift as a language, but also in making their\nown hardware. That's the type of thing that can influence\nother processor makers to try and keep pace",
    "start": "1029400",
    "end": "1036819"
  },
  {
    "text": "with what Apple's doing. And so, if Apple's making hardware-level optimizations\nfor automatic reference counting but not for",
    "start": "1036819",
    "end": "1042319"
  },
  {
    "text": "tracing GC, or I don't really know what that\nwould look like, but that's an interesting potential thing to keep in mind that even\nat the hardware level, there might be potential",
    "start": "1042319",
    "end": "1051429"
  },
  {
    "text": "improvements, even if the software algorithms\nstay the same. And Apple is motivated. I mean, they have tried garbage collectors,\nthey tried the whole Java intro.",
    "start": "1051429",
    "end": "1058970"
  },
  {
    "text": "They tried to have a garbage collector for\nObjective-C and they really concluded that for their use case, it didn't work.",
    "start": "1058970",
    "end": "1064500"
  },
  {
    "text": "So, they are very, very motivated to make\nautomatic reference counting work and, I mean,",
    "start": "1064500",
    "end": "1069720"
  },
  {
    "text": "by all means, it generally works. I mean, there are probably slightly more cases\nwhere you can have errors of cyclical dependencies",
    "start": "1069720",
    "end": "1075450"
  },
  {
    "text": "and holding on to each other. You can still create the same program with\nthe tracing garbage collector, though if you just have a static variable somewhere in there\nwhere you store something, but on the whole,",
    "start": "1075450",
    "end": "1084559"
  },
  {
    "text": "I think they will make it work. And like you said, I mean if they can reduce\nthe performance impact at that level, then",
    "start": "1084559",
    "end": "1091179"
  },
  {
    "text": "there's very little that stands in the way\nof doing that more widespread. Yeah, interesting note about cyclical dependencies. This was one of the reasons that we decided\nto go with automatic reference counting.",
    "start": "1091179",
    "end": "1099820"
  },
  {
    "text": "Roc is a pure functional language and it's\nactually because there's no semantic way to express mutation in the language, there's\nalso no way to create cyclical data.",
    "start": "1099820",
    "end": "1106559"
  },
  {
    "text": "So, we don't have to worry about that at all. But, that's unusual. Only if you've subtracted that much from the\nlanguage can you get away with that.",
    "start": "1106559",
    "end": "1116179"
  },
  {
    "start": "1116000",
    "end": "1433000"
  },
  {
    "text": "What kind of concurrency model do you think\nwould be a good fit for the ideal language that doesn't exist?",
    "start": "1116180",
    "end": "1121840"
  },
  {
    "text": "Hmm, I don't think I can explain that in the\ncontext of Roc without going on a really long",
    "start": "1121840",
    "end": "1128010"
  },
  {
    "text": "tangent. I come from Elixir, and I think that has a\nreally great concurrency model.",
    "start": "1128010",
    "end": "1134250"
  },
  {
    "text": "It's sort of building upon the past in the\nsense that it uses Erlang as its foundation",
    "start": "1134250",
    "end": "1139590"
  },
  {
    "text": "and Erlang was building for the telecom systems.",
    "start": "1139590",
    "end": "1145039"
  },
  {
    "text": "When you're on a phone call, it should be\ninvisible to the user that, now you're actually going through that cell tower, not that cell\ntower.",
    "start": "1145040",
    "end": "1151600"
  },
  {
    "text": "In a sense, it's very good for distributed\nsystems and as a programmer in the language,",
    "start": "1151600",
    "end": "1160440"
  },
  {
    "text": "it's incredibly easy to write concurrent code. It's all built-in. It's sort of by default.",
    "start": "1160440",
    "end": "1165700"
  },
  {
    "text": "You don't really have to think too much about\nit. Running a piece of code on this computer versus\nrunning it on another computer across the",
    "start": "1165700",
    "end": "1172820"
  },
  {
    "text": "world over the internet is extremely similar\nto a programmer. You don't have to jump through a lot of hoops\nto do that.",
    "start": "1172820",
    "end": "1178650"
  },
  {
    "text": "The beam takes care of it all, as long as\nyou have those notes clustered together in the same cluster, it's a matter of just telling,\n\"Hey, other computer run this code, please.\"",
    "start": "1178650",
    "end": "1186950"
  },
  {
    "text": "And then, it does that. And I think that's a really powerful model. Yeah, so I think Erlang's an interesting example\nof a domain-specific language, because the",
    "start": "1186950",
    "end": "1197889"
  },
  {
    "text": "concurrency model that it has. Personally, I have not actually written a\nline of Erlang or Elixir, but my understanding",
    "start": "1197889",
    "end": "1203429"
  },
  {
    "text": "from reading up about it and talking to people\nis that it's basically like a message queue-based system. And so, you can pass messages between different,\nthey call them processes, but what they mean",
    "start": "1203429",
    "end": "1212390"
  },
  {
    "text": "is, I don't want to say threads because they\ndon't, that's operating system threads, but you know, thread-like things perhaps.",
    "start": "1212390",
    "end": "1220840"
  },
  {
    "text": "And then, basically, the message queues are\nautomatically handled by the runtime and since it's all immutable, you don't have to worry\nabout things like data races and stuff like",
    "start": "1220840",
    "end": "1228620"
  },
  {
    "text": "that. That makes a lot of sense for a lot of use\ncases, but I suspect that, for example, somebody who's thinking about concurrency in the context\nof making a really high-performance game,",
    "start": "1228620",
    "end": "1237500"
  },
  {
    "text": "they're a lot more concerned with A, single-threaded\nperformance and B, the overhead about communication.",
    "start": "1237500",
    "end": "1243279"
  },
  {
    "text": "They probably actually want to do mutations\nand locks and direct mutation of things.",
    "start": "1243279",
    "end": "1249260"
  },
  {
    "text": "And even though that's a more error-prone\nconcurrency model, it also runs faster and they're probably a lot more concerned with\nthat.",
    "start": "1249260",
    "end": "1254490"
  },
  {
    "text": "So, I think again, it kinda goes back down\nto use cases. So, if you're focusing on distributed systems\nlike servers specifically I think that's a",
    "start": "1254490",
    "end": "1264710"
  },
  {
    "text": "great model for concurrency. I guess it depends on what your ideal language\nwants to be ideal for.",
    "start": "1264710",
    "end": "1273990"
  },
  {
    "text": "Yeah, I guess it's all a tradeoff, right? Yeah. I think I agree with the idea of having, in\nGo, I think they're called channels or something,",
    "start": "1273990",
    "end": "1282370"
  },
  {
    "text": "which makes it easy to shift data from one\nthread to another. To build that in Rust is something similar,\nthe languages are doing that.",
    "start": "1282370",
    "end": "1289759"
  },
  {
    "text": "I think though sometimes this parallel programming\nis overestimated. I mean, we don't see these massively parallel\ncomputers that people talked about, like,",
    "start": "1289759",
    "end": "1297169"
  },
  {
    "text": "20 years ago. We're seeing more cores now. We're seeing 20, 30, maybe even 60 cores,\nbut that's going to 100.",
    "start": "1297170",
    "end": "1303910"
  },
  {
    "text": "Like you said, in video games and so on, for\nmost cases, you don't have a single application that does one task and needs to utilize all\nthe cores for it.",
    "start": "1303910",
    "end": "1311960"
  },
  {
    "text": "Maybe on the graphics card end, but not for\nthe processing itself. So, what we often find is that you need parallel\ncomputing in server applications, where you",
    "start": "1311960",
    "end": "1320460"
  },
  {
    "text": "are servicing multiple parallel requests,\nand then it becomes very easy. If you have a web server and you have a thousand\nconcurrent users and you have a thousand threads,",
    "start": "1320460",
    "end": "1328310"
  },
  {
    "text": "the question is should you do that from a\nthroughput perspective? But, if you have a thousand threads, then\nit's very easy. They just shouldn't get in their way.",
    "start": "1328310",
    "end": "1334509"
  },
  {
    "text": "You should have something to make the threads\nisolated. But, to have this thing where all the threads\ncommunicate all the time, I mean, I mentioned",
    "start": "1334510",
    "end": "1342080"
  },
  {
    "text": "this in the Rust talk, in the simulation,\nit didn't even make sense to break it up into multiple threads because the communication\noverhead was so big and the calculation then",
    "start": "1342080",
    "end": "1349880"
  },
  {
    "text": "became completely background noise in all\nthe communication between the threads that it didn't get a speed up.",
    "start": "1349880",
    "end": "1355809"
  },
  {
    "text": "Interestingly, so one form of parallelism\nwe haven't talked about is really low-level data parallelism on the CPU, like, SIMD.",
    "start": "1355809",
    "end": "1363480"
  },
  {
    "text": "It seems like there actually have been a lot\nof advances there, in terms of SIMD JSON is",
    "start": "1363480",
    "end": "1369090"
  },
  {
    "text": "several 100% faster than other JSON, like\nreally highly optimized JSON parsers that don't use SIMD.",
    "start": "1369090",
    "end": "1374809"
  },
  {
    "text": "But the algorithms are completely different. I started reading the paper on that and it\ndoesn't even look like parsing any more because",
    "start": "1374809",
    "end": "1382200"
  },
  {
    "text": "it's just so completely different what they're\ndoing. But it runs way faster because they can do\n8 to 16x amount of work at once.",
    "start": "1382200",
    "end": "1392028"
  },
  {
    "text": "At least currently, they're really good language-level\nabstractions for.",
    "start": "1392029",
    "end": "1398760"
  },
  {
    "text": "I don't even know how you would design an\nabstraction for that other than just saying",
    "start": "1398760",
    "end": "1403769"
  },
  {
    "text": "\"Well, maybe the optimizer can recognize that\nwe can SIMD-ify this chunk of instructions.\"",
    "start": "1403769",
    "end": "1411899"
  },
  {
    "text": "I would love to steal something from a language\nwhere it's like, this is Erlang, this style of concurrency is really great for servers.",
    "start": "1411899",
    "end": "1420039"
  },
  {
    "text": "Is there some similar thing for expressing\nSIMD algorithms, like, SIMD JSON in an abstract way so you don't have to get as low level\nabout it?",
    "start": "1420039",
    "end": "1427778"
  },
  {
    "text": "I'm not aware of it. Maybe someone will come up with it, but I\njust don't know.",
    "start": "1427779",
    "end": "1435059"
  },
  {
    "start": "1433000",
    "end": "2136000"
  },
  {
    "text": "You both seem excited about Rust right now,\nbut are there any other languages you see on the horizon that are up and coming, very\nearly stages that you think look interesting?",
    "start": "1435059",
    "end": "1444919"
  },
  {
    "text": "Absolutely. I've just heard about one, Roc. I wasn't gonna say Roc. I was gonna say Zig.",
    "start": "1444919",
    "end": "1450990"
  },
  {
    "text": "Okay. I haven't heard about Zig. What's that about? Zig is, I would say approaching the same problem\ndomains as Rust, but coming at it from a very",
    "start": "1450990",
    "end": "1461419"
  },
  {
    "text": "different angle. We actually use Zig and Roc for the standard\nlibrary.",
    "start": "1461419",
    "end": "1469398"
  },
  {
    "text": "So, the standard library in Roc is implemented\nin Zig. I think if I were to pitch Zig, the way that\nI would pitch it is it's basically like: Let's",
    "start": "1469399",
    "end": "1478779"
  },
  {
    "text": "take C and keep the simplicity and the sort\nof barebonesness. Let's add ergonomics on top of it but without\nadding a lot of complexity.",
    "start": "1478780",
    "end": "1487640"
  },
  {
    "text": "But, Rust is like, “Let's try to make a\ncompletely different language from C.” Any",
    "start": "1487640",
    "end": "1495259"
  },
  {
    "text": "amount of complexity is acceptable as long\nas we have these really strong guarantees about memory safety.",
    "start": "1495259",
    "end": "1501080"
  },
  {
    "text": "If it compiles, it's probably gonna work,\nreally, really strong guarantees.",
    "start": "1501080",
    "end": "1506460"
  },
  {
    "text": "So, Zig is definitely less on the side of\nguarantees, but very much on the side of ergonomics",
    "start": "1506460",
    "end": "1512049"
  },
  {
    "text": "and especially in terms of speed for the developer. The Zip compiler runs super, super fast.",
    "start": "1512049",
    "end": "1519879"
  },
  {
    "text": "The Rust compiler is extremely not. I mean, that's my number one, number two,\nnumber three and number four and five and",
    "start": "1519880",
    "end": "1526898"
  },
  {
    "text": "six complaints about Rust is compile times. How long will I spend waiting for it. Not the case with Zig.",
    "start": "1526899",
    "end": "1532710"
  },
  {
    "text": "It's really fast. They're working on hot code loading for C-like\nlanguages, which is ridiculous. And Zig also cross compiles anything.",
    "start": "1532710",
    "end": "1540519"
  },
  {
    "text": "So on my Mac, I can compile a Linux binary\nand a Mac binary and a Windows binary. You know, I don't even have to spit up a VM.",
    "start": "1540520",
    "end": "1546518"
  },
  {
    "text": "There are just all these little things that\nI can't do in Rust either, so if I were to make a Venn diagram, it's like, both of them\ncan get really low level about memory management",
    "start": "1546519",
    "end": "1555320"
  },
  {
    "text": "and things like this. Zig does not have the borrow checker, so it\ndoes not have the guarantees about memory safety, which I definitely very much value\nfrom Rust.",
    "start": "1555320",
    "end": "1563440"
  },
  {
    "text": "But, whenever I'm sitting there waiting for\nRust to compile or being like, how are we gonna build Roc for Windows and Linux and\nall these things, and I'm like, \"Well, wouldn't",
    "start": "1563440",
    "end": "1572270"
  },
  {
    "text": "it be nice if I could just actually cross-compile\nto it?\" So, you know, as an up-and-coming language\nZig is much younger than Rust, but I can definitely",
    "start": "1572270",
    "end": "1579908"
  },
  {
    "text": "see a really strong appeal. Personally, my prediction is that Zig will\nprobably outcompete Rust in the specific niche",
    "start": "1579909",
    "end": "1588049"
  },
  {
    "text": "of people making games because I think if\nyou're making games, you're probably gonna have to do a lot of memory unsafe stuff anyway.",
    "start": "1588049",
    "end": "1594580"
  },
  {
    "text": "This is my impression as someone who does\nnot make games. But, it seems like just to squeeze every last\ninch of performance out of a game engine or",
    "start": "1594580",
    "end": "1603111"
  },
  {
    "text": "something like that. I'd imagine if you were writing Rust, you're\nusing the unsafe keyword a lot, at which point it's like, \"Well, why don't we get all these\nergonomic improvements too?\"",
    "start": "1603111",
    "end": "1611769"
  },
  {
    "text": "Especially games have a reputation for crunch\ntime and spending a lot of time waiting for a compiler, it really kinda adds up.",
    "start": "1611769",
    "end": "1619490"
  },
  {
    "text": "But I don't know. Time will tell. That sounds interesting. I'll keep an eye out for that. What about you, Erik?",
    "start": "1619490",
    "end": "1624870"
  },
  {
    "text": "Do you have any up-and-coming languages you're\nexcited about? Curiously not really, to be honest with you. I mean, at ThoughtWorks, a consulting company,\nwe work with a lot of companies, usually in",
    "start": "1624870",
    "end": "1633000"
  },
  {
    "text": "the enterprise space, consumer-facing websites,\ninternal systems and so on. In this part of our culture, we really look\nat new things.",
    "start": "1633000",
    "end": "1641660"
  },
  {
    "text": "We’re always trying to find new things. I mentioned this system that we were beginning\nto build in Clojure. And we've tracked a lot of different programming\nlanguages over time.",
    "start": "1641660",
    "end": "1648620"
  },
  {
    "text": "About 5, 10 years ago, there was this wave\nof new programming languages, a lot of exploration, a lot of excitement, but from our perspective,\nit has really settled down.",
    "start": "1648620",
    "end": "1657169"
  },
  {
    "text": "I mean in the web browser at the moment, there's,\nfrom our perspective, a clear winner in TypeScript,",
    "start": "1657169",
    "end": "1662549"
  },
  {
    "text": "that's what you use. And on the server-side, as I mentioned, Kotlin\nis the one that most teams really find a good",
    "start": "1662549",
    "end": "1668259"
  },
  {
    "text": "compromise. It probably doesn't win in any category, but\nit seems to be a really good all-around compromise. That said, I am curious to see what will happen\nin the web browser with WebAssembly, because",
    "start": "1668259",
    "end": "1677780"
  },
  {
    "text": "I mean I'm telling no secret, I'm not a great\nfan of JavaScript or TypeScript. I think we even had talks here at GOTO Conference,\ntalking about how even the original designers",
    "start": "1677780",
    "end": "1687629"
  },
  {
    "text": "of JavaScript said they probably would have\nliked to do a better job of it if they hadn't been pushed to do it in a very short amount\nof time.",
    "start": "1687629",
    "end": "1694679"
  },
  {
    "text": "And we're still settled with it. Even in JavaScript, you do see this move towards\nmore functional programming, by the way, and",
    "start": "1694679",
    "end": "1702320"
  },
  {
    "text": "even big frameworks like React are moving\nthat way and it's still under the hood as JavaScript.",
    "start": "1702320",
    "end": "1707720"
  },
  {
    "text": "And there are reasons for all the jokes about\nJavaScript, about the inconsistency and it was featured quite heavily also in the party\nkeynote.",
    "start": "1707720",
    "end": "1714220"
  },
  {
    "text": "So, I've been waiting for a proper replacement\nand the transpilation approaches weren’t",
    "start": "1714220",
    "end": "1719289"
  },
  {
    "text": "that successful, I think. I mean Dart is sometimes mentioned, but I\ndon't think you could get it into all the different web browsers.",
    "start": "1719290",
    "end": "1725720"
  },
  {
    "text": "I'm curious to see what will happen with WebAssembly\nand we'll see what new programming language",
    "start": "1725720",
    "end": "1731371"
  },
  {
    "text": "will emerge to write web applications, not\nwriting video games running in a web browser, but something to replace what we currently\ndo with TypeScript.",
    "start": "1731371",
    "end": "1738148"
  },
  {
    "text": "I'm looking forward to that. Yeah. I think WebAssembly is really interesting\nbecause we've had a long period of time where",
    "start": "1738149",
    "end": "1743950"
  },
  {
    "text": "if you wanted to run something in the browser,\nJavaScript was your only choice. I guess we're getting close to the point where\nyou can use whatever language you prefer if",
    "start": "1743950",
    "end": "1751370"
  },
  {
    "text": "the community supports it and builds the tooling\nfor it. So, that's going to be interesting to see\nin the next few years.",
    "start": "1751370",
    "end": "1756710"
  },
  {
    "text": "Yeah, we've had first engagements with clients\nwhere people are using Blazor, which is an implementation of C# and the corresponding\ntooling and frameworks.",
    "start": "1756710",
    "end": "1763970"
  },
  {
    "text": "I mean, it still has first load times you\nwouldn't use it on a B2C website. But, I mean, that is a first promising sign,\nI think, of a more modern and better design",
    "start": "1763970",
    "end": "1772620"
  },
  {
    "text": "programming language that, I'm talking about\nC#, can run in the web browser.",
    "start": "1772620",
    "end": "1779490"
  },
  {
    "text": "And Elm cross compiles to JavaScript, right? Correct, yeah. Or compiles to JavaScript.",
    "start": "1779490",
    "end": "1784870"
  },
  {
    "text": "Yeah. It's theoretically possible that Elm could\ncompile to WebAssembly and Roc actually already does compile to WebAssembly.",
    "start": "1784870",
    "end": "1792840"
  },
  {
    "text": "If I were to make a bet, I would bet that\nI don't think WebAssembly's going to change much when it comes to web applications, at\nleast not in the next decade.",
    "start": "1792840",
    "end": "1800559"
  },
  {
    "text": "Maybe it's hard to predict further than that. I think it's mainly just gonna be games, to\nbe honest.",
    "start": "1800559",
    "end": "1807010"
  },
  {
    "text": "A lot of thoughts about why, but one of the\nbig ones is just that I don't think that people",
    "start": "1807010",
    "end": "1812080"
  },
  {
    "text": "care that much about performance in web applications. I think it's sort of close enough.",
    "start": "1812080",
    "end": "1819169"
  },
  {
    "text": "And one of the reasons I think this is the\nfirst time Elm realized benchmarks it's like,",
    "start": "1819169",
    "end": "1824690"
  },
  {
    "text": "\"Hey, look, we're faster than all these JavaScript\nframeworks, faster at rendering smaller asset sizes.\"",
    "start": "1824690",
    "end": "1830659"
  },
  {
    "text": "There was this real-world app which was 4,000\nlines of Elm and it's an entire Medium clone,",
    "start": "1830659",
    "end": "1837769"
  },
  {
    "text": "not an entire but you know. It's a substantial application that does a\nlot of stuff. Compiled, , that entire application is smaller\nthan just React.",
    "start": "1837769",
    "end": "1848639"
  },
  {
    "text": "Evan spent a lot of time making really small\nassets because everybody was like, \"Oh, we got to decrease our bundle sizes.\" Nobody cared.",
    "start": "1848639",
    "end": "1855559"
  },
  {
    "text": "And then Evan did a bunch of work optimizing\nthe rendering. It's like, \"Look, we're faster than React\nand Angular and Vue and everything.\"",
    "start": "1855559",
    "end": "1863070"
  },
  {
    "text": "And again, people are like, \"Okay, that's\nnice.\" The idea that, \"Oh, well, now that we have\nWebAssembly, we can finally do even better",
    "start": "1863070",
    "end": "1871669"
  },
  {
    "text": "than that on performance,\" I don't think that's\nthe real pitch. I do think there is definitely a potential\npitch for, “Now you can use whatever language",
    "start": "1871669",
    "end": "1880638"
  },
  {
    "text": "you want.” You can use C#. But the thing is, we've already had stuff\nlike Scala JS. I know one team that's ever used Scala JS,\nbut there's a ton of people using Scala on",
    "start": "1880639",
    "end": "1888529"
  },
  {
    "text": "the backend. So, is that really the issue? Is it the lack of speed in the frontend?",
    "start": "1888529",
    "end": "1895868"
  },
  {
    "text": "There was GHCJS for Haskell, which I guess\nhad a lot of performance problems. But, I guess it seems to me that that has\nbeen done before in the compiled JavaScript",
    "start": "1895869",
    "end": "1905539"
  },
  {
    "text": "thing, and I'm a little bit skeptical that\nthe only missing piece was, if only you could compile to something closer to machine code,\nthen it would be fine.",
    "start": "1905539",
    "end": "1913440"
  },
  {
    "text": "I think it's just really that JavaScript and\nnow TypeScript has this huge cultural momentum.",
    "start": "1913440",
    "end": "1919179"
  },
  {
    "text": "And if we look at what's been successful in\nterms of mass popularity, it's really been",
    "start": "1919179",
    "end": "1924408"
  },
  {
    "text": "JavaScript, CoffeeScript, whose tagline was,\n\"It's just JavaScript,\" and TypeScript, whose tagline is just, \"It's just JavaScript.\"",
    "start": "1924409",
    "end": "1931110"
  },
  {
    "text": "And that's it. Those are the three big success stories and\neverything else, like, Elm, it is actually",
    "start": "1931110",
    "end": "1936648"
  },
  {
    "text": "the most popular widely used compiler to JavaScript\nlanguage that's not TypeScript, at least according",
    "start": "1936649",
    "end": "1944039"
  },
  {
    "text": "to the state of JS survey, but it's very,\nvery distant, below TypeScript.",
    "start": "1944039",
    "end": "1950080"
  },
  {
    "text": "So, I think the real issue here is just that\nthere's this huge ecosystem, this huge cultural momentum and all this drive to do that, that\neven though everybody complains about JavaScript,",
    "start": "1950080",
    "end": "1962138"
  },
  {
    "text": "it still takes something more than WebAssembly\nto change that cultural momentum.",
    "start": "1962139",
    "end": "1971690"
  },
  {
    "text": "I get what you mean. By the way, I don't think CoffeeScript is\nreally a strong contender anymore these days even.",
    "start": "1971690",
    "end": "1977450"
  },
  {
    "text": "Not anymore. I mean, I agree with you on websites, where\nwe would consider a website or a shopping",
    "start": "1977450",
    "end": "1983148"
  },
  {
    "text": "website or banking website and so on, what\nwe also see is a lot of internal IT systems. I mean, the one I mentioned earlier is a sales\nsystem that is used by sales representatives,",
    "start": "1983149",
    "end": "1992220"
  },
  {
    "text": "thousands of them and it's downloaded in the\ncache, of course, of their web browsers on",
    "start": "1992220",
    "end": "1997780"
  },
  {
    "text": "iPads or Windows machines. I think there, this is probably no coincidence,\nit is Blazor and C#, but it's the first one",
    "start": "1997780",
    "end": "2005191"
  },
  {
    "text": "that we are seeing making use of WebAssembly. I think there's still a ton of developers\nout there who are used to writing applications",
    "start": "2005191",
    "end": "2010990"
  },
  {
    "text": "used in-house. And they have so far tried React. And React has a steep learning curve and then\nour people were told, \"Don't use this, use",
    "start": "2010990",
    "end": "2020570"
  },
  {
    "text": "Angular,\" and then they go, \"Oh, which one\nare you using?\" And they'll say, \"No, no, forget about this. Let's use Vue.\" And they're a bit confused about this.",
    "start": "2020570",
    "end": "2027320"
  },
  {
    "text": "Also JavaScript is not a productive programming\nlanguage, and I think what you will see, that's at least my prediction, is that big companies\nlike Microsoft have something to gain here.",
    "start": "2027320",
    "end": "2035758"
  },
  {
    "text": "And I think C# is already spreading more on\nthe server-side. You can run it on operating systems other\nthan Windows, and that whole idea that you",
    "start": "2035759",
    "end": "2043669"
  },
  {
    "text": "can stay within one ecosystem will put some\nextra weight on it. I think performance is a hygiene factor.",
    "start": "2043669",
    "end": "2050408"
  },
  {
    "text": "It can't be slow in the web browser, but I\ndon't think you'll win this because you say, \"We are faster than the most optimized Javascript.\"",
    "start": "2050409",
    "end": "2057158"
  },
  {
    "text": "But if it's fast enough then you have a different\nstory, like say, \"Look, there are these component libraries.",
    "start": "2057159",
    "end": "2062429"
  },
  {
    "text": "We can write C#, which is a better language. You can use it on the server. You can use it in the browser,\" because frankly,\nwe've seen the other trend.",
    "start": "2062429",
    "end": "2067750"
  },
  {
    "text": "People say, \"Oh, we all know JavaScript. We run it in the web browser and therefore,\nwe write the server applications in Node.js\"",
    "start": "2067750",
    "end": "2072980"
  },
  {
    "text": "and that really has some really terrible consequences,\nI would say, from a performance perspective,",
    "start": "2072980",
    "end": "2078600"
  },
  {
    "text": "from security and so on. So, I think maybe you get different dimensions\nin this world of in-house applications and",
    "start": "2078600",
    "end": "2084980"
  },
  {
    "text": "large organizations that will jump on that\nmore. But I agree. If I were a startup that builds a B2C website,\nI wouldn't bet on WebAssembly either.",
    "start": "2084980",
    "end": "2092730"
  },
  {
    "text": "You make a great point. Yeah. I was surprised there's this sort of, like,\nhidden market of people doing really big in-house",
    "start": "2092730",
    "end": "2103490"
  },
  {
    "text": "teams. I talked to a guy who's an Angular consultant. I was like, \"Where are all the Angular apps?",
    "start": "2103490",
    "end": "2108680"
  },
  {
    "text": "Everybody I talk to does React. That's it. It's all React.\" And whenever people are coming to Elm, they're\ncoming from React.",
    "start": "2108680",
    "end": "2115330"
  },
  {
    "text": "And because I'm in, like you said, the B2C\nstartup world primarily, he was like, \"Oh no, all of my consultances are 400-person\nteams that only build software that's used",
    "start": "2115330",
    "end": "2123920"
  },
  {
    "text": "inside the company.\" And I had no idea that there were so many\nof those, but it's apparently a huge thing.",
    "start": "2123920",
    "end": "2129540"
  },
  {
    "text": "You would know it much better than I would,\nbut yeah. That's a really interesting perspective.",
    "start": "2129540",
    "end": "2134870"
  },
  {
    "text": "I hadn't thought of that. Well, thank you so much for spending some\ntime chatting with me.",
    "start": "2134870",
    "end": "2140130"
  },
  {
    "start": "2136000",
    "end": "2164000"
  },
  {
    "text": "It's been a lot of fun. I feel like we could have gone on for much,\nmuch longer, time permitting.",
    "start": "2140130",
    "end": "2145500"
  },
  {
    "text": "But, it's been a pleasure hosting you. I hope you enjoyed it. Yeah. Thanks. Thank you.",
    "start": "2145500",
    "end": "2150262"
  }
]