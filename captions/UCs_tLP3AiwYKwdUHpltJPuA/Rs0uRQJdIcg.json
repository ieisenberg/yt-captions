[
  {
    "text": "[Music]",
    "start": "3490",
    "end": "7529"
  },
  {
    "text": "in doing viable career is to get try to simplify things I don't like complicated",
    "start": "13820",
    "end": "20220"
  },
  {
    "text": "things because I just don't like complicated things I I like simplicity",
    "start": "20220",
    "end": "26119"
  },
  {
    "text": "and when you look at the cheese learning there's a lot of complexity and there's",
    "start": "26119",
    "end": "33540"
  },
  {
    "text": "a lot of like complicated math and what I'm going to tell you today is that",
    "start": "33540",
    "end": "39809"
  },
  {
    "text": "really it's all like kindergarten math everything that you have learned in high",
    "start": "39809",
    "end": "46739"
  },
  {
    "text": "school or elementary school and will tell you a lot about like why machine",
    "start": "46739",
    "end": "52860"
  },
  {
    "text": "learning works and and it's also a lot of fun like programming tricks involved and actually I think the programming",
    "start": "52860",
    "end": "59760"
  },
  {
    "text": "tricks are more interesting than that people may notice I got lucky at all",
    "start": "59760",
    "end": "67170"
  },
  {
    "text": "after I worked for Microsoft then I tried startup then I can join facebook",
    "start": "67170",
    "end": "73049"
  },
  {
    "text": "I currently at Facebook we have a group that works music machine learning to",
    "start": "73049",
    "end": "78570"
  },
  {
    "text": "make developers more productive and there's a two-block course that recently",
    "start": "78570",
    "end": "83909"
  },
  {
    "text": "came out well that describes some of the work and wellness about deselection and",
    "start": "83909",
    "end": "90960"
  },
  {
    "text": "the other one is about automatic book fixing so now at Facebook we have programs that fight rocks using",
    "start": "90960",
    "end": "97320"
  },
  {
    "text": "traditional static and now that is it that we have ml based programs that fix",
    "start": "97320",
    "end": "102360"
  },
  {
    "text": "the bugs for you and then I think that's",
    "start": "102360",
    "end": "107460"
  },
  {
    "text": "acceptable and well I'm going to show you today is like a little bit of the magic behind the scenes you go a little",
    "start": "107460",
    "end": "116100"
  },
  {
    "text": "bit like you know back in my career I used to be an academic and then I had to",
    "start": "116100",
    "end": "122340"
  },
  {
    "text": "teach software engineering and I was teaching software engineering but I felt like a vegetarian butcher and and VB",
    "start": "122340",
    "end": "130739"
  },
  {
    "text": "like I worked on Phoebe afterwards so it's got like an appropriate thing to think but I was Catholic teaching so",
    "start": "130739",
    "end": "138030"
  },
  {
    "text": "French in earring and that no clue how people wrote big programs in practice",
    "start": "138030",
    "end": "143370"
  },
  {
    "text": "and what I discovered is two things two things that I learned like you know when",
    "start": "143370",
    "end": "150450"
  },
  {
    "text": "I moved from academia to get like you know work on code in the real world and the first one is that the machines that",
    "start": "150450",
    "end": "158220"
  },
  {
    "text": "we program are not mathematical abstractions they are physical machines and so before they got like in the talk",
    "start": "158220",
    "end": "168150"
  },
  {
    "text": "somebody came up and said thank you Eric for all your lectures on functional programming I I was very polite to this",
    "start": "168150",
    "end": "174750"
  },
  {
    "text": "gentleman but I don't think functional programming and adheres to this",
    "start": "174750",
    "end": "180330"
  },
  {
    "text": "principle if you think about Haskell where people look at the world as like you know this pure abstraction you kind",
    "start": "180330",
    "end": "186330"
  },
  {
    "text": "of forget that you know the machine is actually got like you know not a pure",
    "start": "186330",
    "end": "191910"
  },
  {
    "text": "thing it has an l2 cache it has kept like you know a memory hierarchy you have to communicate between two machines",
    "start": "191910",
    "end": "199230"
  },
  {
    "text": "which is orders of magnitude slower than like you know getting something from a",
    "start": "199230",
    "end": "205739"
  },
  {
    "text": "register and ultimately if your code becomes popular if it becomes useful it",
    "start": "205739",
    "end": "210840"
  },
  {
    "text": "has to become fast so this is why I often say think like a fundamentalist so",
    "start": "210840",
    "end": "215910"
  },
  {
    "text": "you can still do functional programming in your mind but you have to code like a hacker because your code gets successful",
    "start": "215910",
    "end": "221970"
  },
  {
    "text": "your product gets successful it has to run fast so programming is not a fairy",
    "start": "221970",
    "end": "227070"
  },
  {
    "text": "tale where you can put or maybe it is a fairy tale but you put all the things on top you still feel that kind of like",
    "start": "227070",
    "end": "233010"
  },
  {
    "text": "thing below and then the next thing is",
    "start": "233010",
    "end": "238019"
  },
  {
    "text": "the if you think about software methodology working software over following a plan right ultimately it's",
    "start": "238019",
    "end": "245730"
  },
  {
    "text": "about producing software and and code is",
    "start": "245730",
    "end": "251160"
  },
  {
    "text": "the currency so it's all about code it's all about producing code modifying code",
    "start": "251160",
    "end": "257519"
  },
  {
    "text": "editing codes refactoring code and then of course pushing it and as quickly out",
    "start": "257519",
    "end": "264090"
  },
  {
    "text": "to production as possible when I was talking about this a few",
    "start": "264090",
    "end": "269300"
  },
  {
    "text": "years ago people were like wads but now everybody's doing continuous deployment and continuous integration so this is",
    "start": "269300",
    "end": "275810"
  },
  {
    "text": "not that strange of a point of view anymore however after I mean this year",
    "start": "275810",
    "end": "285200"
  },
  {
    "text": "so for engineering is it has its 50th birthday and so for 50 years we have",
    "start": "285200",
    "end": "292640"
  },
  {
    "text": "been thinking about writing code and I don't know how long we have had these the the go to conference yahoo before",
    "start": "292640",
    "end": "300440"
  },
  {
    "text": "that and we're still here like you know look at how many people are here like 1600 people are here for nearly a full",
    "start": "300440",
    "end": "306920"
  },
  {
    "text": "week and maybe a full week if they do the workshops because they want to learn how to write code or how to write better",
    "start": "306920",
    "end": "313820"
  },
  {
    "text": "code or how to better write code whatever permutation you want that's",
    "start": "313820",
    "end": "319670"
  },
  {
    "text": "kind of like you know a little bit disappointing it's like why can't we",
    "start": "319670",
    "end": "327170"
  },
  {
    "text": "write code maybe we as humans are just not smart enough to write code and and",
    "start": "327170",
    "end": "333080"
  },
  {
    "text": "maybe we should look at other things in society we we are not strong enough to dig holes so we have like invent",
    "start": "333080",
    "end": "339650"
  },
  {
    "text": "machines to dig the holes for us and then if we want to get like you know do physical stuff well we go to the gym we",
    "start": "339650",
    "end": "346940"
  },
  {
    "text": "do it for fun maybe we should do the same thing for code right maybe we are just not good at writing code why are we",
    "start": "346940",
    "end": "353630"
  },
  {
    "text": "trying so hard why don't we just admit I'm only human I cannot write code ok",
    "start": "353630",
    "end": "360740"
  },
  {
    "text": "and just let the machines do that for us and this is something that I kept like you know I realized a few years ago or a",
    "start": "360740",
    "end": "367880"
  },
  {
    "text": "few years ago yeah a few years ago and then last year I got like you know I started this new team that's completely",
    "start": "367880",
    "end": "374630"
  },
  {
    "text": "focused on machine learning I threw away all the old stuff programming languages all that stuff not interesting the",
    "start": "374630",
    "end": "382370"
  },
  {
    "text": "future is letting machines do the work and I think that it won't take 50 years",
    "start": "382370",
    "end": "388940"
  },
  {
    "text": "for the machines to become better at programming than we are so I want to thank you on this little journey and",
    "start": "388940",
    "end": "395750"
  },
  {
    "text": "down the rabbit hole of machine learning and this is like you know that's me and that's the",
    "start": "395750",
    "end": "402500"
  },
  {
    "text": "white rabbit that I'm that's got like you know that I'm going to follow now I'm not the only one that says this",
    "start": "402500",
    "end": "409400"
  },
  {
    "text": "there were a couple of talks about machine learning in this conference and and people call this like a very sexy",
    "start": "409400",
    "end": "416419"
  },
  {
    "text": "title software 2.0 right so a lot of the stuff that you're doing in your day job",
    "start": "416419",
    "end": "422120"
  },
  {
    "text": "is software 1.0 but like javascript frameworks you know also programming",
    "start": "422120",
    "end": "427310"
  },
  {
    "text": "evolves and people are talking about software 2.0 and so for 2.0 is and",
    "start": "427310",
    "end": "433580"
  },
  {
    "text": "usually it's kept like you know focused on deep learning where you train a neuron that you train the weights of a",
    "start": "433580",
    "end": "440330"
  },
  {
    "text": "neural net and by giving it examples and it will have like you know learn this",
    "start": "440330",
    "end": "446720"
  },
  {
    "text": "function and to do what you want it to do so this is the difference maybe for",
    "start": "446720",
    "end": "453650"
  },
  {
    "text": "like a normal terminology for regular people and so for 1.0 is we have humans",
    "start": "453650",
    "end": "460520"
  },
  {
    "text": "turning coffee and do code and and so for 2.0 is instead we're taking data and",
    "start": "460520",
    "end": "468440"
  },
  {
    "text": "we have some magic which is not so magic and turned that into a model now machine",
    "start": "468440",
    "end": "476120"
  },
  {
    "text": "learning people that's one of the reasons that machine learning can look so intimidating they like to use expensive words I don't like expensive",
    "start": "476120",
    "end": "483770"
  },
  {
    "text": "words but and that's what I will cut like you know help you to get like dispel a lot of those expensive words",
    "start": "483770",
    "end": "490340"
  },
  {
    "text": "but there is something into this like model you can say add this code but",
    "start": "490340",
    "end": "496159"
  },
  {
    "text": "there's something I'd like really special about the model and namely that",
    "start": "496159",
    "end": "501979"
  },
  {
    "text": "as human programmers we're often over promise and under deliver if you look at",
    "start": "501979",
    "end": "507680"
  },
  {
    "text": "the function that we write or you know a Java class or method it says oh this",
    "start": "507680",
    "end": "513110"
  },
  {
    "text": "thing takes a string and returns an integer and in some sense we're lying because this thing is kept like often",
    "start": "513110",
    "end": "520339"
  },
  {
    "text": "making a guess it might return an error or may not have like it might have books so when we give this the specification",
    "start": "520339",
    "end": "528110"
  },
  {
    "text": "of a function like that work have like literally over-promising at under the if you look at what the model does it",
    "start": "528110",
    "end": "534709"
  },
  {
    "text": "says oh this is a cat with this probability and a dork with that probability in a bowl of guacamole with",
    "start": "534709",
    "end": "540440"
  },
  {
    "text": "such probability so these models are almost about the fact that they're guessing and I think that's very",
    "start": "540440",
    "end": "547310"
  },
  {
    "text": "liberating so even if you got like one to forget about all this machine learning stuff I think thinking in terms",
    "start": "547310",
    "end": "553519"
  },
  {
    "text": "of like uncertainty and allowing your program to get like express the fact that you're uncertain about the outcome",
    "start": "553519",
    "end": "560329"
  },
  {
    "text": "is a very powerful notion and now instead of code the new currency or as",
    "start": "560329",
    "end": "567470"
  },
  {
    "text": "people say the new oil is data all right so we're not writing code anymore we're",
    "start": "567470",
    "end": "572930"
  },
  {
    "text": "gathering data and that we're cleaning it think like you know transforming it",
    "start": "572930",
    "end": "578230"
  },
  {
    "text": "normalizing it and then we're using that to train a machine model or workout like",
    "start": "578230",
    "end": "584029"
  },
  {
    "text": "using it for visualization so and instead of code as the artifact data is",
    "start": "584029",
    "end": "589700"
  },
  {
    "text": "the gap like new thing that that we value and here's an example this is the",
    "start": "589700",
    "end": "595480"
  },
  {
    "text": "simplest of the simplest the hello world of machine learning and you get a bunch",
    "start": "595480",
    "end": "601850"
  },
  {
    "text": "of features of flowers and now you have to predict what kind of flower that is",
    "start": "601850",
    "end": "607209"
  },
  {
    "text": "and here I show you also the difference between what a regular programmer would",
    "start": "607209",
    "end": "612649"
  },
  {
    "text": "do and he would say like okay I I define a method that takes a flower description",
    "start": "612649",
    "end": "619010"
  },
  {
    "text": "of a flower and gives you a string which says this is the flower but the machine",
    "start": "619010",
    "end": "624709"
  },
  {
    "text": "learning a little bit more modest we give you a probability distribution so if you look at this thing it's like the",
    "start": "624709",
    "end": "631370"
  },
  {
    "text": "the algorithm looks at that flower said yeah I think it's a cito so it could also be this other one or that other one",
    "start": "631370",
    "end": "637430"
  },
  {
    "text": "for the middle one it says yeah I'm pretty sure it's the the versicolor I'm pretty sure you can see that if you look",
    "start": "637430",
    "end": "644540"
  },
  {
    "text": "at the distribution and if you look at the last one and that's supposed to be a flower that looks a little bit like the",
    "start": "644540",
    "end": "651019"
  },
  {
    "text": "both of them my drawing skills are not so great but you know hopefully you see that this kind of like has a little bit",
    "start": "651019",
    "end": "656480"
  },
  {
    "text": "of both and you see that the distribution is it's not so certain what flower this and the same thing when",
    "start": "656480",
    "end": "665060"
  },
  {
    "text": "you've got like you know knives and guts and dogs now you can think a sec you ah you know flowers",
    "start": "665060",
    "end": "672589"
  },
  {
    "text": "recognizing animals and but I would give you I don't know like 10 million Danish",
    "start": "672589",
    "end": "679529"
  },
  {
    "text": "kroner you could not write these functions using traditional programming",
    "start": "679529",
    "end": "687600"
  },
  {
    "text": "languages or traditional techniques no matter what's kept methodology you use no matter how well you listen to then",
    "start": "687600",
    "end": "694680"
  },
  {
    "text": "you cannot write this in the traditional way the only way you can solve this problem is using machine learning so",
    "start": "694680",
    "end": "701750"
  },
  {
    "text": "this is also something like you know I don't think so far 1.0 will disappear",
    "start": "701750",
    "end": "706829"
  },
  {
    "text": "but so far 2.0 machine learning opens a whole new class of applications that we",
    "start": "706829",
    "end": "713730"
  },
  {
    "text": "can write and that we couldn't do before and we all know this you open your iPhone you take a picture whenever it",
    "start": "713730",
    "end": "720300"
  },
  {
    "text": "draws a box around the face of somebody that's a machine learned algorithm that you couldn't write by hand so again even",
    "start": "720300",
    "end": "727019"
  },
  {
    "text": "if you don't believe in software 2.0 look at it anyway because you know it",
    "start": "727019",
    "end": "732930"
  },
  {
    "text": "allows you to solve problems that you couldn't solve before and I think that's always a good thing um but as I said",
    "start": "732930",
    "end": "739829"
  },
  {
    "text": "what I want to what attracts me is the fact that even if I wanted to I could",
    "start": "739829",
    "end": "746069"
  },
  {
    "text": "not write these these algorithms that I just showed you or these problems that I just showed you using traditional",
    "start": "746069",
    "end": "753740"
  },
  {
    "text": "techniques now how do you have turned data into code and it's relatively",
    "start": "753740",
    "end": "760500"
  },
  {
    "text": "simple this is to get like the magic behind that you take your training data which contains input-output pairs and",
    "start": "760500",
    "end": "767180"
  },
  {
    "text": "it's a little bit like TDD right I'll give you guys like a whole bunch of",
    "start": "767180",
    "end": "772589"
  },
  {
    "text": "cat-like examples and and then you split them in the input and output you feed",
    "start": "772589",
    "end": "777779"
  },
  {
    "text": "the input to your model and that model is parameterize by weights you compute",
    "start": "777779",
    "end": "783420"
  },
  {
    "text": "the guess and again this thing just guesses and it's honest about that then you compare the guess with the output",
    "start": "783420",
    "end": "790050"
  },
  {
    "text": "and you compute the difference and which is also interesting if you look at like",
    "start": "790050",
    "end": "796410"
  },
  {
    "text": "you know Java or C sharp or whatever you compare two things it only you know",
    "start": "796410",
    "end": "801880"
  },
  {
    "text": "you can only return -1 0 or 1 it's kind of also quite limiting right because",
    "start": "801880",
    "end": "807370"
  },
  {
    "text": "maybe it's like you know yeah they're kind of the same so you want to return like something that's it's not just like",
    "start": "807370",
    "end": "813480"
  },
  {
    "text": "0-1 or wrong I just give like a little bit of like you know it's kind of the same that's what this loss function does",
    "start": "813480",
    "end": "820209"
  },
  {
    "text": "all right and then based on that loss function on the outcome of that you",
    "start": "820209",
    "end": "826360"
  },
  {
    "text": "adjust the weights and then you rinse and repeat and then your until you can't",
    "start": "826360",
    "end": "833440"
  },
  {
    "text": "like minimize the error so that's how you what people mean by training and now",
    "start": "833440",
    "end": "838540"
  },
  {
    "text": "what's interesting is the way that people get like you know check how well this neural net is doing it's by taking",
    "start": "838540",
    "end": "845470"
  },
  {
    "text": "the training data and separating it into a test set and a training set and I",
    "start": "845470",
    "end": "850750"
  },
  {
    "text": "don't understand why we don't do this for regular developers if I've got like giving a developer task and I say here's",
    "start": "850750",
    "end": "857110"
  },
  {
    "text": "a set of tests I should keep like 30% of those tests in my back pocket let the",
    "start": "857110",
    "end": "862750"
  },
  {
    "text": "developer get like you know build their program and then kind of like you know really check it on the test that they",
    "start": "862750",
    "end": "868029"
  },
  {
    "text": "have never seen and but I don't know why we don't take this technique from from",
    "start": "868029",
    "end": "875620"
  },
  {
    "text": "what people do in machine learning em anyway now what's how do you find the",
    "start": "875620",
    "end": "883720"
  },
  {
    "text": "minimum of a function well that's it sounds magic but then you think about",
    "start": "883720",
    "end": "889930"
  },
  {
    "text": "him in high school we learned something we found we learned that in order to",
    "start": "889930",
    "end": "896290"
  },
  {
    "text": "find the minimum of a function that's where the derivative is zero everybody",
    "start": "896290",
    "end": "901540"
  },
  {
    "text": "remembers that yes well that's the whole trick that these machine learning people",
    "start": "901540",
    "end": "907360"
  },
  {
    "text": "use so if we go back to this picture in order to get like you know minimize",
    "start": "907360",
    "end": "912459"
  },
  {
    "text": "finds the the spots where this the loss function the errors minimized",
    "start": "912459",
    "end": "918250"
  },
  {
    "text": "I have to be able to differentiate the thing in that yellow box now that yellow",
    "start": "918250",
    "end": "923709"
  },
  {
    "text": "box is composed of layers and neurons but if you think about it as if computer",
    "start": "923709",
    "end": "929230"
  },
  {
    "text": "scientists those are just functions and actually they're pure functions so if functional programming is going to",
    "start": "929230",
    "end": "934900"
  },
  {
    "text": "win it's because it's hidden in that yellow box of a neural network because these are pure functions because the",
    "start": "934900",
    "end": "942430"
  },
  {
    "text": "neural network doesn't do any i/o it doesn't do anything and it's just computing like from the inputs it",
    "start": "942430",
    "end": "949480"
  },
  {
    "text": "computes the output and then there's something special it's a pure function but it's differentiable and so the real",
    "start": "949480",
    "end": "957610"
  },
  {
    "text": "trick to do deep learning is to make functions differentiable or to understand how do you how you",
    "start": "957610",
    "end": "963790"
  },
  {
    "text": "differentiate functions and I don't believe really and I won't say it here",
    "start": "963790",
    "end": "971110"
  },
  {
    "text": "and today but I don't think that neural networks have anything to do with what happens in the brain and it's just a",
    "start": "971110",
    "end": "978520"
  },
  {
    "text": "bunch of multiplications and additions and that works really well on GPUs but I",
    "start": "978520",
    "end": "984910"
  },
  {
    "text": "don't think we have like you know we do addition and multiplication in our brain and but that still works right but I",
    "start": "984910",
    "end": "991450"
  },
  {
    "text": "just don't kept like and I don't think that these things are intelligence you just feed them examples and they learn",
    "start": "991450",
    "end": "997540"
  },
  {
    "text": "from it and by updating these weights so I'm not going to get like you know make any claims about AI and so we're moving",
    "start": "997540",
    "end": "1008730"
  },
  {
    "text": "from the world of software 1.0 where humans do the work to the work of software 2.0 where we can't get like you",
    "start": "1008730",
    "end": "1014970"
  },
  {
    "text": "know lay under the tree thinking big thoughts and we just feed data into this",
    "start": "1014970",
    "end": "1021110"
  },
  {
    "text": "ml thing and out comes a model so here's a camp like you know the actual",
    "start": "1021110",
    "end": "1027660"
  },
  {
    "text": "implementation of the hello world so this is the kind of like as I said like this is the simplest of the simplest of",
    "start": "1027660",
    "end": "1033780"
  },
  {
    "text": "the simplest neural networks so there's the data somebody gather the data so there's features of the flowers and the",
    "start": "1033780",
    "end": "1043620"
  },
  {
    "text": "actual flower that kept like you know has those features then you need to define a set of weights and then you see",
    "start": "1043620",
    "end": "1049560"
  },
  {
    "text": "there the model it just kept like multiplies these weights and applies the Israeli function and then in the end it",
    "start": "1049560",
    "end": "1055500"
  },
  {
    "text": "applies is softmax which turns it into the probability distribution and and the deeper you like the more of these layers",
    "start": "1055500",
    "end": "1062520"
  },
  {
    "text": "you do the deeper your neural network we all don't have to worry about that I think there's one interesting thing here",
    "start": "1062520",
    "end": "1069299"
  },
  {
    "text": "and and this is an interesting computer science problem is that these neural",
    "start": "1069299",
    "end": "1074640"
  },
  {
    "text": "networks work in a continuous domain because you have to this function this model function here has to be",
    "start": "1074640",
    "end": "1080760"
  },
  {
    "text": "differentiable alright now all the structures that we have in our computers are discrete customers orders flowers",
    "start": "1080760",
    "end": "1089150"
  },
  {
    "text": "and just like with databases where we have the oh the object-relational",
    "start": "1089150",
    "end": "1094980"
  },
  {
    "text": "impedance mismatch where like database is a table of rows and now you have to map your java objects or your graph into",
    "start": "1094980",
    "end": "1102600"
  },
  {
    "text": "the relational tables you have to do the same thing here so our computational",
    "start": "1102600",
    "end": "1107850"
  },
  {
    "text": "paradigm is kept like you know kind of awkward it did work for databases it doesn't work for neural nets so this",
    "start": "1107850",
    "end": "1114210"
  },
  {
    "text": "this embedding there that goes from the discreet world to the continuous world",
    "start": "1114210",
    "end": "1119309"
  },
  {
    "text": "is a big problem and if you've seen one of the previous talk about source D we're likely to doing deep learning on",
    "start": "1119309",
    "end": "1125549"
  },
  {
    "text": "code that's there also a big problem you have like a SDS how do you get my Pastis which are discreet into this continuous",
    "start": "1125549",
    "end": "1133049"
  },
  {
    "text": "domain I'm going to just wave my hands that we can solve that so this so really",
    "start": "1133049",
    "end": "1138750"
  },
  {
    "text": "one way to look at a neural net it's just a class where the weights are your",
    "start": "1138750",
    "end": "1145289"
  },
  {
    "text": "instance variables your model is a method and by training you initialize",
    "start": "1145289",
    "end": "1151049"
  },
  {
    "text": "your instance variables alright so in some sense it's it's still very similar to what we've done for the last 50 years",
    "start": "1151049",
    "end": "1158880"
  },
  {
    "text": "it's just object-oriented programming where instead of initializing the state",
    "start": "1158880",
    "end": "1165059"
  },
  {
    "text": "we learn the state and so let's assume",
    "start": "1165059",
    "end": "1170730"
  },
  {
    "text": "we can all do this and let's see how can we differentiate code and and if you do",
    "start": "1170730",
    "end": "1176159"
  },
  {
    "text": "that and you google a little bit you'll find a lot of graph like complicated paper CSEC you know and there's this",
    "start": "1176159",
    "end": "1183419"
  },
  {
    "text": "thing back prop as a functor that uses category theory to describe a back",
    "start": "1183419",
    "end": "1188669"
  },
  {
    "text": "propagation oh my strict emote symmetrical monoidal categories oh my goodness",
    "start": "1188669",
    "end": "1195450"
  },
  {
    "text": "I mean that's not the topic for like the stalker for conference right and then",
    "start": "1195450",
    "end": "1201690"
  },
  {
    "text": "there's like look at this one on the well is it you're right look at all these Greek symbols you",
    "start": "1201690",
    "end": "1207450"
  },
  {
    "text": "cannot even get like pronounce them okay way too hard all right for my brain we",
    "start": "1207450",
    "end": "1214830"
  },
  {
    "text": "need something really simple like my brain is the size of a peanut we all know that and we need really simple math",
    "start": "1214830",
    "end": "1221520"
  },
  {
    "text": "and and well I will show you is that it's like putting a garden hose on this",
    "start": "1221520",
    "end": "1226950"
  },
  {
    "text": "dock right the dog looks really impressive you spray it with the garden hose and then turns out that inside that",
    "start": "1226950",
    "end": "1233370"
  },
  {
    "text": "big dog was a really little dog hiding that's got not that impressive and it's not that doesn't look that scary so",
    "start": "1233370",
    "end": "1243260"
  },
  {
    "text": "let's take the next step in our journey and we're like we dope down the rabbit",
    "start": "1243260",
    "end": "1249030"
  },
  {
    "text": "hole and now we're going to look at how we're going to implement differentiation",
    "start": "1249030",
    "end": "1254580"
  },
  {
    "text": "and we're going to do that with dual numbers so dual numbers were invented by",
    "start": "1254580",
    "end": "1260430"
  },
  {
    "text": "William Clifford in you know somewhere between 1845 and 1879",
    "start": "1260430",
    "end": "1266220"
  },
  {
    "text": "so that's hundreds of years ago and dual numbers are really kind of like quite",
    "start": "1266220",
    "end": "1272310"
  },
  {
    "text": "remarkable we all remember complex numbers which is by the way like great naming right complex numbers whew that",
    "start": "1272310",
    "end": "1279060"
  },
  {
    "text": "must be really hard and why would anybody call them or imaginary numbers",
    "start": "1279060",
    "end": "1284880"
  },
  {
    "text": "oh they don't exist anyway like whether you call them complex numbers imaginary",
    "start": "1284880",
    "end": "1289980"
  },
  {
    "text": "numbers these are numbers a plus bi where I square equals minus 1 all right",
    "start": "1289980",
    "end": "1296190"
  },
  {
    "text": "now you think I squared equal minus 1 why why don't I because I just have",
    "start": "1296190",
    "end": "1303150"
  },
  {
    "text": "implemented I comparable then the 3 good values are minus 1 0 or 1 so let's",
    "start": "1303150",
    "end": "1311660"
  },
  {
    "text": "what's what happens when we take complex numbers and instead of I squared equals",
    "start": "1311660",
    "end": "1316710"
  },
  {
    "text": "minus 1 we take I squared equals 0 obvious right well complex numbers were",
    "start": "1316710",
    "end": "1324750"
  },
  {
    "text": "invented in 15 something and then these dual numbers are just complex numbers",
    "start": "1324750",
    "end": "1329850"
  },
  {
    "text": "with instead of I square equals minus 1 it equals zero they were invented 300 years",
    "start": "1329850",
    "end": "1334920"
  },
  {
    "text": "later so it's maybe not that obvious but for a computer scientist it should be obvious but this is an arbitrary choice",
    "start": "1334920",
    "end": "1340440"
  },
  {
    "text": "now when you make that choice you get something really really amazing namely",
    "start": "1340440",
    "end": "1345750"
  },
  {
    "text": "that if you compute a function over a dual number so if you compute F of a plus B epsilon it computes f of a so it",
    "start": "1345750",
    "end": "1353670"
  },
  {
    "text": "computes the original value of that function applied to a and the derivative",
    "start": "1353670",
    "end": "1359760"
  },
  {
    "text": "it computes it at the same time isn't that cool again you don't have to understand how",
    "start": "1359760",
    "end": "1366150"
  },
  {
    "text": "it works I don't understand how it works you just take complex numbers instead of I square equals minus one you say I",
    "start": "1366150",
    "end": "1373020"
  },
  {
    "text": "Square equals zero to avoid confusion we call ice I Epsilon because you have to",
    "start": "1373020",
    "end": "1379760"
  },
  {
    "text": "differentiate between them and then we get this amazing amazing so but just",
    "start": "1379760",
    "end": "1387210"
  },
  {
    "text": "kept like introducing this new form of numbers we can just calculate we compute the derivative now this is all the maths",
    "start": "1387210",
    "end": "1395880"
  },
  {
    "text": "that you need this is all the math that you need to understand deep learning and guess what this is maths from 200 years",
    "start": "1395880",
    "end": "1402750"
  },
  {
    "text": "ago so it couldn't be that hard because were way smarter now right they didn't even have computers back then they only",
    "start": "1402750",
    "end": "1408660"
  },
  {
    "text": "have fountain pens and now if you really want to understand why this works it's",
    "start": "1408660",
    "end": "1414960"
  },
  {
    "text": "based on Taylor expansion out Taylor expansion that's really crazy stuff all right this mr. Taylor got discovered that you",
    "start": "1414960",
    "end": "1423270"
  },
  {
    "text": "can take a function and you can write it there's an infinite sum that kind of involves factorial and like you know",
    "start": "1423270",
    "end": "1429300"
  },
  {
    "text": "exponentiation that's really crazy and it's like from 1715 it's like dad's got",
    "start": "1429300",
    "end": "1434730"
  },
  {
    "text": "like really cool stuff and now I promise you I wouldn't do any category theory",
    "start": "1434730",
    "end": "1440790"
  },
  {
    "text": "but I cannot help myself and so if you got like you know define this thing that",
    "start": "1440790",
    "end": "1446730"
  },
  {
    "text": "lifts if function from normal values over dual numbers then it turns out that",
    "start": "1446730",
    "end": "1452040"
  },
  {
    "text": "that thing that function is a function",
    "start": "1452040",
    "end": "1457280"
  },
  {
    "text": "for G is the same as T of F compose G of G and which is much nicer than the chain",
    "start": "1458570",
    "end": "1465480"
  },
  {
    "text": "rule I don't know if you remember the chain rule I cannot remember that I always have to find it on Wikipedia but we",
    "start": "1465480",
    "end": "1471450"
  },
  {
    "text": "don't it turns out we don't need the chain rule because with dual numbers it just follows from from this fact that",
    "start": "1471450",
    "end": "1477600"
  },
  {
    "text": "it's a functor now these mathematicians are a little bit weird right they've",
    "start": "1477600",
    "end": "1482639"
  },
  {
    "text": "write a plus B epsilon but really they mean it's a pair of two numbers a and B",
    "start": "1482639",
    "end": "1487919"
  },
  {
    "text": "so this plus it's just a weird way to write a pair so if we have like you know as computer scientists actually",
    "start": "1487919",
    "end": "1495090"
  },
  {
    "text": "represent these numbers as pairs and we do the we define the rules you see that",
    "start": "1495090",
    "end": "1501059"
  },
  {
    "text": "if I have two pairs and I add them then I get you know I add the first parts and",
    "start": "1501059",
    "end": "1507360"
  },
  {
    "text": "I add the second parts if I multiply them I multiply the first parts that's kept like you know just the",
    "start": "1507360",
    "end": "1512789"
  },
  {
    "text": "multiplication and then if you see on the right side you might recognize what what people call the product rule for",
    "start": "1512789",
    "end": "1519269"
  },
  {
    "text": "differentiation maybe you remember that from high school but again it's it just follows by got like calculating these",
    "start": "1519269",
    "end": "1525330"
  },
  {
    "text": "things and then again the third rule here says you know if I apply a function if I overload the function to take these",
    "start": "1525330",
    "end": "1532590"
  },
  {
    "text": "pairs it computes both the original value plus the derivative some code I",
    "start": "1532590",
    "end": "1540570"
  },
  {
    "text": "have not seen enough code at this conference we need more code there cannot be a talk without curly braces",
    "start": "1540570",
    "end": "1547379"
  },
  {
    "text": "unless it's about Erland all right so",
    "start": "1547379",
    "end": "1552539"
  },
  {
    "text": "I'm using Scala here so this is like a direct translation of those rules into",
    "start": "1552539",
    "end": "1557879"
  },
  {
    "text": "Scala everybody could have written this right it's just easy well there's a dual number it's just a pair of numbers the",
    "start": "1557879",
    "end": "1563789"
  },
  {
    "text": "real part and the cap epsilon part and you know you just have to tell them how you add and multiply and divide and how",
    "start": "1563789",
    "end": "1570869"
  },
  {
    "text": "you do sine and cosine and then I can need to convert a regular number into a",
    "start": "1570869",
    "end": "1576720"
  },
  {
    "text": "dual number this is everything all right so very simple code follows completely",
    "start": "1576720",
    "end": "1582929"
  },
  {
    "text": "from the math you didn't have to think anything you can impress all your colleagues by showing this cat like",
    "start": "1582929",
    "end": "1588090"
  },
  {
    "text": "super cool like uses Unicode everything and awesome and now if you look at these",
    "start": "1588090",
    "end": "1595590"
  },
  {
    "text": "neural nets the aircraft like you know that you sharing their cap like when people talk about the fully",
    "start": "1595590",
    "end": "1601380"
  },
  {
    "text": "connected net all these layers are kind of fully connected so if we look at the simplest of the simplest acts like form",
    "start": "1601380",
    "end": "1609059"
  },
  {
    "text": "of a neuron that it just takes a value and it multiplies it and it multiplies the result of that and it uses sharing",
    "start": "1609059",
    "end": "1614700"
  },
  {
    "text": "so this has got like you know the simplest neural nets that I can find so this thing should be able to",
    "start": "1614700",
    "end": "1621149"
  },
  {
    "text": "differentiate an expression that looks like that so let's look at some expressions here so first of all it's",
    "start": "1621149",
    "end": "1628350"
  },
  {
    "text": "just taking a standard quadratic equation and we can cut like you know in order to find the derivative we just",
    "start": "1628350",
    "end": "1634889"
  },
  {
    "text": "call that function with the dual number and we know now that it computes both f of v and the derivative of F applied to",
    "start": "1634889",
    "end": "1642029"
  },
  {
    "text": "v now look at the second example this is a really complicated way to to compute",
    "start": "1642029",
    "end": "1647760"
  },
  {
    "text": "the sine function it uses assignments loops all the great stuff that we love",
    "start": "1647760",
    "end": "1653250"
  },
  {
    "text": "in programming write loops assignments mutable state turns out that you can",
    "start": "1653250",
    "end": "1658590"
  },
  {
    "text": "just take the derivative of a function like that awesome isn't it and then the last one builds this chain",
    "start": "1658590",
    "end": "1666240"
  },
  {
    "text": "of that I showed you this kind of sharing thing of course it uses some mutable state two so it's kind of like",
    "start": "1666240",
    "end": "1672450"
  },
  {
    "text": "defines a variable and then it just multiplies this thing with itself now look at look at the graph here this is",
    "start": "1672450",
    "end": "1679590"
  },
  {
    "text": "what I was saying that like you know when you run your code you're not",
    "start": "1679590",
    "end": "1685230"
  },
  {
    "text": "running on a mathematical abstraction because the complexity of that last",
    "start": "1685230",
    "end": "1690600"
  },
  {
    "text": "function is linear so they're longer I make that chain the longer the computation should last but thanks to",
    "start": "1690600",
    "end": "1697679"
  },
  {
    "text": "the magic of the JVM look at this the more I multiply the faster my code gets",
    "start": "1697679",
    "end": "1703470"
  },
  {
    "text": "oh isn't that amazing that gem is a magical machine like you know the more",
    "start": "1703470",
    "end": "1709440"
  },
  {
    "text": "work it does the faster it gets and then look at those spikes that's your garbage collector this is the reason that people",
    "start": "1709440",
    "end": "1715350"
  },
  {
    "text": "like to write C++ in the real world they don't like the JVM because it's unpredictable",
    "start": "1715350",
    "end": "1720649"
  },
  {
    "text": "all right billion like if you don't look at these things and you don't optimize your code and you think it's like a",
    "start": "1720649",
    "end": "1727169"
  },
  {
    "text": "mathematical abstraction this is what happens all right now these neural Nets have multiple",
    "start": "1727169",
    "end": "1735539"
  },
  {
    "text": "variables so I need to kind of like extent my code to take multiple parameters you don't have to understand",
    "start": "1735539",
    "end": "1741179"
  },
  {
    "text": "this code just observe that the top lines are the same and then below here what I'm doing is I'm representing a",
    "start": "1741179",
    "end": "1748379"
  },
  {
    "text": "list of variables as sparse feet vectors and then kept doing point to point wise",
    "start": "1748379",
    "end": "1753450"
  },
  {
    "text": "addition sounds old cool but something",
    "start": "1753450",
    "end": "1758460"
  },
  {
    "text": "bad is going to happen when we do this we get quadratic behavior so if I just",
    "start": "1758460",
    "end": "1766019"
  },
  {
    "text": "take and variables and I just add them up and I want to show off that I still know from shell programming so I use",
    "start": "1766019",
    "end": "1772799"
  },
  {
    "text": "default left instead of a loop and when I do that and I run this code it becomes",
    "start": "1772799",
    "end": "1778500"
  },
  {
    "text": "quadratic now look at this this graph doesn't have these spikes anymore so if you want your garbage collector to",
    "start": "1778500",
    "end": "1785100"
  },
  {
    "text": "behave right quadratic code on the JVM this is a performance tip from Eric Meyer all right but this code is greater",
    "start": "1785100",
    "end": "1793200"
  },
  {
    "text": "I think it's pretty bad and now this is not the only time that happens right",
    "start": "1793200",
    "end": "1799769"
  },
  {
    "text": "this is a excellent blog post here like it's like lots and lots of examples of real-world systems that were",
    "start": "1799769",
    "end": "1806549"
  },
  {
    "text": "accidentally quadratic now I remember",
    "start": "1806549",
    "end": "1811590"
  },
  {
    "text": "something from a long long time ago when I was still a Haskell programmer that there was something with things that",
    "start": "1811590",
    "end": "1818009"
  },
  {
    "text": "were quadratic by accident and that was when you reverse a length a list if you",
    "start": "1818009",
    "end": "1825450"
  },
  {
    "text": "reverse a list in Haskell that is quadratic and here like you know here's",
    "start": "1825450",
    "end": "1830460"
  },
  {
    "text": "how you encode listen and skyline you do reverse and you look at there it is",
    "start": "1830460",
    "end": "1835710"
  },
  {
    "text": "quadratic don't look at the spikes isn't that amazing it's like you know look at that spike those spikes it says",
    "start": "1835710",
    "end": "1841559"
  },
  {
    "text": "orders of magnitude slower thanks to the garbage collector it's crazy it's 2018 but in 20 in 1986 John use had",
    "start": "1841559",
    "end": "1851129"
  },
  {
    "text": "a trick on how to implement lists using",
    "start": "1851129",
    "end": "1857190"
  },
  {
    "text": "functions you think that why would you do that you you implement a list which is",
    "start": "1857190",
    "end": "1863490"
  },
  {
    "text": "something concrete with function something abstract and what do you get similarly this quadratic",
    "start": "1863490",
    "end": "1870380"
  },
  {
    "text": "behavior disappears and let's see how that works so you represent the function",
    "start": "1870380",
    "end": "1876380"
  },
  {
    "text": "by a list and basically what you do the trick is that you represent function a",
    "start": "1876380",
    "end": "1882170"
  },
  {
    "text": "list concatenation which is linear time by function composition which is",
    "start": "1882170",
    "end": "1888230"
  },
  {
    "text": "constant time and then when you want to then turn a function of the list - a list into a list again you just apply it",
    "start": "1888230",
    "end": "1894560"
  },
  {
    "text": "to the empty list and magic will happen all right this is a great trick and and",
    "start": "1894560",
    "end": "1903800"
  },
  {
    "text": "look at this it works so if I got like apply this trick so you see there that I",
    "start": "1903800",
    "end": "1908900"
  },
  {
    "text": "represent the list by a function from list to lists now it becomes still",
    "start": "1908900",
    "end": "1913910"
  },
  {
    "text": "recursive is using accumulating parameters but look at that graph the",
    "start": "1913910",
    "end": "1919370"
  },
  {
    "text": "longer my list that I reverse the faster the JVM goes isn't that amazing I mean",
    "start": "1919370",
    "end": "1925250"
  },
  {
    "text": "so again if you want to make your JVM go fast just give it more work and it will run faster now here's the question can",
    "start": "1925250",
    "end": "1932870"
  },
  {
    "text": "we use this trick for dual numbers as well can we get like take dual numbers where we had this quadratic effect and",
    "start": "1932870",
    "end": "1940330"
  },
  {
    "text": "represent numbers as functions then you think Eric did you get the package from",
    "start": "1940330",
    "end": "1947360"
  },
  {
    "text": "Amsterdam again why would you get represent numbers as functions and then",
    "start": "1947360",
    "end": "1955580"
  },
  {
    "text": "think that it goes faster well it's true but we have to be a little bit more",
    "start": "1955580",
    "end": "1963290"
  },
  {
    "text": "careful right in order to get like do that we have to understand that numbers",
    "start": "1963290",
    "end": "1969710"
  },
  {
    "text": "are not Molloy's if you want to impress your colleagues you say yeah Lister",
    "start": "1969710",
    "end": "1975320"
  },
  {
    "text": "monoids but numbers are rings and and the ring like you know even our",
    "start": "1975320",
    "end": "1980900"
  },
  {
    "text": "president knows that a ring it's just something that has two operations addition and multiplication",
    "start": "1980900",
    "end": "1986750"
  },
  {
    "text": "they're both associative and commutative and they distribute over each other and so the fact that we're dealing with",
    "start": "1986750",
    "end": "1993050"
  },
  {
    "text": "numbers and we have a ring allows us to represent numbers as functions and this",
    "start": "1993050",
    "end": "1998960"
  },
  {
    "text": "is how we represent let's this functions again now let's look at the code that we",
    "start": "1998960",
    "end": "2006550"
  },
  {
    "text": "wrote for tool numbers and see if there's something that resembles lists here all right so look at this we when",
    "start": "2006550",
    "end": "2014920"
  },
  {
    "text": "we add two things I'm now calling the things that were the Epsilon's this is what mathematicians called tangents and",
    "start": "2014920",
    "end": "2021520"
  },
  {
    "text": "they kept like the normal part they call primal but I just use color coding that's much easier I'm sorry there's",
    "start": "2021520",
    "end": "2028120"
  },
  {
    "text": "yellow and black and you see that if you can't like look at the yellow part it's",
    "start": "2028120",
    "end": "2033250"
  },
  {
    "text": "always of the form something yellow times something black right huh let's",
    "start": "2033250",
    "end": "2039190"
  },
  {
    "text": "write down a grammar aid engine something yellow is something yellow",
    "start": "2039190",
    "end": "2045640"
  },
  {
    "text": "times something black plus something yellow times something black or it's something yellow times something black",
    "start": "2045640",
    "end": "2051520"
  },
  {
    "text": "that sounds like a list right a list is a value concatenated to a list so all",
    "start": "2051520",
    "end": "2059860"
  },
  {
    "text": "these numbers that were creating look very much like lists so we can represent them as functions now let's put the",
    "start": "2059860",
    "end": "2067030"
  },
  {
    "text": "multivariate case on the stack for now let's first represent numbers as functions ah isn't that beautiful",
    "start": "2067030",
    "end": "2075179"
  },
  {
    "text": "who here would have thought that representing that you could represent",
    "start": "2075179",
    "end": "2080200"
  },
  {
    "text": "numbers as functions if they're ring and and here's what you do you represent a",
    "start": "2080200",
    "end": "2085628"
  },
  {
    "text": "number as a function that takes two parameters one for the multiplication I",
    "start": "2085629",
    "end": "2090790"
  },
  {
    "text": "want for the addition and it returns another number so the representation of a plus B is the representation of a and",
    "start": "2090790",
    "end": "2098620"
  },
  {
    "text": "then you pass it R and then the representation of B multiplication is",
    "start": "2098620",
    "end": "2103660"
  },
  {
    "text": "like that and then we don't need that one and then the last one the representation of a number times a",
    "start": "2103660",
    "end": "2109570"
  },
  {
    "text": "constant is the representation of a number and then you just multiply that constant with the incoming parameter so",
    "start": "2109570",
    "end": "2116560"
  },
  {
    "text": "that sounds really similar to what we did with lists all right so this slide",
    "start": "2116560",
    "end": "2122260"
  },
  {
    "text": "here shows you how to represent numbers as functions and it's going to make our",
    "start": "2122260",
    "end": "2127720"
  },
  {
    "text": "code faster ah beautiful beautiful",
    "start": "2127720",
    "end": "2132730"
  },
  {
    "text": "nah I'm excited so let's write the code and what I'm going to do I'm going to",
    "start": "2132730",
    "end": "2139000"
  },
  {
    "text": "keep it a little bit simple I'm not going to do the addition I'm just going to implement the multiplication by a",
    "start": "2139000",
    "end": "2146050"
  },
  {
    "text": "function so this is the Scala code and you just see that like this epsilon has now become a method which is just a",
    "start": "2146050",
    "end": "2153040"
  },
  {
    "text": "function and it takes you from a value and it returns a value and it just follows exactly this pattern here no",
    "start": "2153040",
    "end": "2160810"
  },
  {
    "text": "need to do that but ah when I have",
    "start": "2160810",
    "end": "2167140"
  },
  {
    "text": "functions instead of values I lose sharing because if say that they have a",
    "start": "2167140",
    "end": "2172630"
  },
  {
    "text": "big list and I concatenated with itself now that big list is evaluated only once",
    "start": "2172630",
    "end": "2178150"
  },
  {
    "text": "but if I represent that list as a function now that function is shared but",
    "start": "2178150",
    "end": "2183250"
  },
  {
    "text": "that function will now be applied to two different values so the computation is duplicated ah so I got rid of quadratic",
    "start": "2183250",
    "end": "2192579"
  },
  {
    "text": "nurse in one way and it pops up in another so I can show here simple example where I just got like built and",
    "start": "2192579",
    "end": "2199480"
  },
  {
    "text": "lists and I kept like you know add a heads to each of these lists and guess what they becomes quadratic now let's",
    "start": "2199480",
    "end": "2206349"
  },
  {
    "text": "look at what this means for our dual numbers now we're really kept like in in",
    "start": "2206349",
    "end": "2212050"
  },
  {
    "text": "the dumps and let's look at this sharing thing again which is the thing that we need for and for our neural Nets when I",
    "start": "2212050",
    "end": "2222250"
  },
  {
    "text": "do this look it becomes exponential oh my gosh but look how smooth that curve",
    "start": "2222250",
    "end": "2228670"
  },
  {
    "text": "is look how beautiful I mean this is like straight like no garbage collection problems right smooth as butter except",
    "start": "2228670",
    "end": "2237339"
  },
  {
    "text": "that it's exponential alright so I",
    "start": "2237339",
    "end": "2242619"
  },
  {
    "text": "thought I would take something that was quadratic turn it into something linear and what I got was something exponential",
    "start": "2242619",
    "end": "2250000"
  },
  {
    "text": "hmm that's not so good so should we just quit here and go home or do you want to",
    "start": "2250000",
    "end": "2257050"
  },
  {
    "text": "see the rest of the story well this is exactly where the ring comes in remember",
    "start": "2257050",
    "end": "2262390"
  },
  {
    "text": "the ring remember what I told you about the ring have you seen the movie the ring bye you should is really good anyway",
    "start": "2262390",
    "end": "2270070"
  },
  {
    "text": "well the ring allows you to do is remember we're going to implement multiplication by function application",
    "start": "2270070",
    "end": "2276599"
  },
  {
    "text": "if you look at the expression here on the top eight times B plus a times C it",
    "start": "2276599",
    "end": "2282099"
  },
  {
    "text": "calls this function a twice or does the multiplication with a twice what the",
    "start": "2282099",
    "end": "2287980"
  },
  {
    "text": "ring allows you to do is this thing is like you know it's it's got like Chetty its again this is just like distributed",
    "start": "2287980",
    "end": "2295630"
  },
  {
    "text": "systems it's it's multiplying twice its Chetty what do we do when we built at",
    "start": "2295630",
    "end": "2300670"
  },
  {
    "text": "this root system we make it chunky so what we do is we instead of doing the multiplication twice like okay",
    "start": "2300670",
    "end": "2307980"
  },
  {
    "text": "multiplying B with a and C with a we can just add B and C together and then",
    "start": "2307980",
    "end": "2314560"
  },
  {
    "text": "multiply it by a so that is chunky so this is just chunky versus chatty",
    "start": "2314560",
    "end": "2319650"
  },
  {
    "text": "comment design pattern that we all know it's called the ring so now you know",
    "start": "2319650",
    "end": "2325240"
  },
  {
    "text": "it's like you know yes we should apply the ring principle and chunky versus chatty so let's make this thing",
    "start": "2325240",
    "end": "2331420"
  },
  {
    "text": "um chunky um but now what we need to do is we need to take care of sharing",
    "start": "2331420",
    "end": "2337630"
  },
  {
    "text": "because this function that we're calling multiple times what we're going to do is we're going to instead of calling at",
    "start": "2337630",
    "end": "2343690"
  },
  {
    "text": "multiple times and then adding the results at the bottom we're going to take all the parameters add them first",
    "start": "2343690",
    "end": "2349420"
  },
  {
    "text": "and then call that function wants so how can I have a function and call it once",
    "start": "2349420",
    "end": "2355150"
  },
  {
    "text": "well two things first of all mutable state will save us as always and the",
    "start": "2355150",
    "end": "2363849"
  },
  {
    "text": "second thing is good thing that Facebook is written in PHP because PHP has this",
    "start": "2363849",
    "end": "2369280"
  },
  {
    "text": "very kind of cool thing namely reference counting so we're going to use reference",
    "start": "2369280",
    "end": "2375010"
  },
  {
    "text": "counting to get like you know to get like whenever we duplicate this function",
    "start": "2375010",
    "end": "2380290"
  },
  {
    "text": "we just increase the reference count and then when we call the function we decrease the reference count when the",
    "start": "2380290",
    "end": "2386170"
  },
  {
    "text": "reference count is zero we know that all the calls to the function are done and then we can call this function once with",
    "start": "2386170",
    "end": "2392650"
  },
  {
    "text": "this junky parameter so you see you cannot live without mutable state and reference counting is the best invention",
    "start": "2392650",
    "end": "2400120"
  },
  {
    "text": "since light Fred alright so here's the code let's look at the addition nothing",
    "start": "2400120",
    "end": "2408040"
  },
  {
    "text": "much changes except that when I add two numbers I'm using these two numbers so I have to increase their reference count",
    "start": "2408040",
    "end": "2414310"
  },
  {
    "text": "so that's what you see there the reference count of a has increased the reference count of B is increased now",
    "start": "2414310",
    "end": "2421360"
  },
  {
    "text": "imagine that you would do this in Haskell it would have unsafe perform a or something we suddenly but we would be",
    "start": "2421360",
    "end": "2427300"
  },
  {
    "text": "in a io monad No look at this nice mutable state just increase those reference counts and then",
    "start": "2427300",
    "end": "2434350"
  },
  {
    "text": "look at the epsilon there it has also mutable States because it needs to have accumulate these parameters and then it",
    "start": "2434350",
    "end": "2441010"
  },
  {
    "text": "decreases the reference count and then when the reference count goes below one we just call the function and since I",
    "start": "2441010",
    "end": "2448270"
  },
  {
    "text": "want to be a little bit nice I just kept and also got like reset all the mutable state back to its initial state such",
    "start": "2448270",
    "end": "2454330"
  },
  {
    "text": "that when the function is called everything is clean again alright and look when we run our program",
    "start": "2454330",
    "end": "2462250"
  },
  {
    "text": "it's linear again whew ah so no more exponential but the spikes",
    "start": "2462250",
    "end": "2469090"
  },
  {
    "text": "are back you cannot have everything all right so I promised you that I would",
    "start": "2469090",
    "end": "2475090"
  },
  {
    "text": "kept like do the multiplication so this is when you get like do it in full like ring form and now it's all tail",
    "start": "2475090",
    "end": "2482080"
  },
  {
    "text": "recursive except that the JVM doesn't support tail recursion so if you really",
    "start": "2482080",
    "end": "2487090"
  },
  {
    "text": "want to do tail recursion you have to implement this using trampolines but no",
    "start": "2487090",
    "end": "2492370"
  },
  {
    "text": "time for that and then here is doing the same thing for multiple parameters if I",
    "start": "2492370",
    "end": "2499270"
  },
  {
    "text": "want to take the derivative of multiple parameters right so this is all very simple code as you see as you saw and",
    "start": "2499270",
    "end": "2506400"
  },
  {
    "text": "it's just like whatever 25 lines of Scala and then the last thing that I",
    "start": "2506400",
    "end": "2513100"
  },
  {
    "text": "need to do to implement my complete deep learning framework in less than hundred",
    "start": "2513100",
    "end": "2519580"
  },
  {
    "text": "lines of code I need to define what weights are well what we said is that we're going to update the weights based",
    "start": "2519580",
    "end": "2525730"
  },
  {
    "text": "on this the derivative that we're computing well why don't we just kept like you know update the weights",
    "start": "2525730",
    "end": "2531760"
  },
  {
    "text": "immediately like if we take the derivative if overweight we kind of get the incoming value it just multiplied the",
    "start": "2531760",
    "end": "2537360"
  },
  {
    "text": "way it's already show a little bit more mutable states to make things even more elegant alright so that's it so we have",
    "start": "2537360",
    "end": "2546750"
  },
  {
    "text": "a complete deep learning framework in hundred lines of Scala where we used",
    "start": "2546750",
    "end": "2553110"
  },
  {
    "text": "only simple high school math and we use that this important trick from",
    "start": "2553110",
    "end": "2558270"
  },
  {
    "text": "functional programming where we represent instead of representing lists as functions we represent numbers as",
    "start": "2558270",
    "end": "2566220"
  },
  {
    "text": "functions and then we had to do this trick where we have the chunky versus jetty that's it and I hope that you kept",
    "start": "2566220",
    "end": "2577560"
  },
  {
    "text": "like you know that all the magic behind deep learning is gone you start with dual numbers don't have to invent them",
    "start": "2577560",
    "end": "2584340"
  },
  {
    "text": "people did that for you 200 years ago you represent numbers as functions you",
    "start": "2584340",
    "end": "2589830"
  },
  {
    "text": "don't have to invent that some computer scientists actually mathematicians",
    "start": "2589830",
    "end": "2595550"
  },
  {
    "text": "invented that trick way before John used it it's called Kaylee's theorem and it",
    "start": "2595550",
    "end": "2601230"
  },
  {
    "text": "works for anyone art so that's also like an old trick and then we use sharing",
    "start": "2601230",
    "end": "2606330"
  },
  {
    "text": "using reference counting so again you cannot you know you cannot make things efficient without mutable state and then",
    "start": "2606330",
    "end": "2614070"
  },
  {
    "text": "we have derived back propagation everybody here in this room could have done that because your brains are all",
    "start": "2614070",
    "end": "2621510"
  },
  {
    "text": "bigger than my peanut size brain it's just assembling the right tricks so",
    "start": "2621510",
    "end": "2630650"
  },
  {
    "text": "that's it please rate this session but really don't rate this session go and",
    "start": "2630800",
    "end": "2639660"
  },
  {
    "text": "get like you know go home on the train and the plane and implement your own deep learning framework alright again",
    "start": "2639660",
    "end": "2646470"
  },
  {
    "text": "it's not that hard and it's fun and but like you know it was kind of scary that",
    "start": "2646470",
    "end": "2652350"
  },
  {
    "text": "like you know like you think that you fixed this and then it becomes exponential and then you but it's I",
    "start": "2652350",
    "end": "2657990"
  },
  {
    "text": "think like you know there's no real magic behind this it's all elementary math with some nice functional",
    "start": "2657990",
    "end": "2663810"
  },
  {
    "text": "programming tricks and so I hope that was Scott you know enjoyable and that you can see",
    "start": "2663810",
    "end": "2670750"
  },
  {
    "text": "kept like you know that it's useful to know both a little bit of math and a",
    "start": "2670750",
    "end": "2676000"
  },
  {
    "text": "little bit of functional programming and of course a little bit of imperative programming and you need all three you",
    "start": "2676000",
    "end": "2681310"
  },
  {
    "text": "cannot like you know you cannot live you cannot remove one you have to use all three thank you",
    "start": "2681310",
    "end": "2689970"
  },
  {
    "text": "[Applause]",
    "start": "2689980",
    "end": "2695840"
  }
]