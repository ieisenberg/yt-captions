[
  {
    "text": "[Music]",
    "start": "980",
    "end": "7849"
  },
  {
    "text": "so hopefully everybody's not in a food coma here I want to do a quick survey because I know there's a containers room",
    "start": "13110",
    "end": "19289"
  },
  {
    "text": "going on and we're kind of talking about containers here and the distributed systems track and we'll get to why how",
    "start": "19289",
    "end": "25800"
  },
  {
    "text": "many people here are using containers in some manner yes all right how how about",
    "start": "25800",
    "end": "31080"
  },
  {
    "text": "container orchestration it doesn't necessarily have to use kubernetes okay a smaller group okay so I'm a cloud",
    "start": "31080",
    "end": "38190"
  },
  {
    "text": "developer advocate at Microsoft where I primarily focus on distributed systems and kubernetes so I want to talk about",
    "start": "38190",
    "end": "45420"
  },
  {
    "text": "like what is kubernetes like like at its core what is kubernetes and if you ask",
    "start": "45420",
    "end": "50610"
  },
  {
    "text": "people a lot of people might start with things like it's a container orchestration platform and I mean what does that mean really and then we've got",
    "start": "50610",
    "end": "57539"
  },
  {
    "text": "infrastructure as a service platform and you know a lot of people mean this because there's a lot of tooling built",
    "start": "57539",
    "end": "62820"
  },
  {
    "text": "in as far as self-service infrastructure but the question I want to pose to everybody is how many people would",
    "start": "62820",
    "end": "69479"
  },
  {
    "text": "consider a framework or library for building your own distributed systems on top of weight we've got like one or two",
    "start": "69479",
    "end": "75180"
  },
  {
    "text": "all right so hopefully by the end of this talk I can change your mind so over",
    "start": "75180",
    "end": "81210"
  },
  {
    "text": "the break I was I promised myself the winter break I promised myself that I would kind of stay away from programming",
    "start": "81210",
    "end": "87330"
  },
  {
    "text": "as a hobby and so instead of that I watched a TV show about programming I",
    "start": "87330",
    "end": "93450"
  },
  {
    "text": "don't know how many people have seen the show halt and catch fire but it's really awesome if you haven't seen it but in",
    "start": "93450",
    "end": "98909"
  },
  {
    "text": "the very first episode of the first season they make a comment one of the one of the people on the show says you",
    "start": "98909",
    "end": "106710"
  },
  {
    "text": "know computers aren't the thing they're the thing that gets us to the thing and that kind of really resonated with me",
    "start": "106710",
    "end": "112619"
  },
  {
    "text": "with the way I had been looking at kubernetes over the past couple years so I'd like to borrow that and say that",
    "start": "112619",
    "end": "119070"
  },
  {
    "text": "kubernetes isn't the thing it's the thing that gets us to the thing and what I mean by that is this not the",
    "start": "119070",
    "end": "125070"
  },
  {
    "text": "kubernetes isn't an innovative technology that's helping solve a lot of problems that we have right now is I",
    "start": "125070",
    "end": "131190"
  },
  {
    "text": "want people to start looking at like it's not the final product you know and this is the assembly language of",
    "start": "131190",
    "end": "136980"
  },
  {
    "text": "distributed systems we now have a shared way of talking about infrastructure and the tools we Bill",
    "start": "136980",
    "end": "142680"
  },
  {
    "text": "with it and on top of it are gonna be what's really innovative so in thinking",
    "start": "142680",
    "end": "149430"
  },
  {
    "text": "about this there's kind of two approaches one is customizing kubernetes to fit your specific workloads and this",
    "start": "149430",
    "end": "155310"
  },
  {
    "text": "would be in the context of you know not building your own schedulers and distributed consensus protocols and",
    "start": "155310",
    "end": "162030"
  },
  {
    "text": "coordination protocols and things like that and building it on top of kubernetes instead of building your own",
    "start": "162030",
    "end": "167700"
  },
  {
    "text": "and then we'll move into kind of building abstractions as layers on top so first we need to talk about how",
    "start": "167700",
    "end": "175079"
  },
  {
    "text": "kubernetes works how many people here are familiar with how the control plane of kubernetes works oK we've got just a",
    "start": "175079",
    "end": "182430"
  },
  {
    "text": "couple awesome you're in the right spot so we can think about kubernetes is just a basic reconciliation loop it's just",
    "start": "182430",
    "end": "190019"
  },
  {
    "text": "constantly taking desired state and reconciling the actual state towards that so we've got a series of kubernetes",
    "start": "190019",
    "end": "197819"
  },
  {
    "text": "objects and the ones that are listed here aren't necessarily important nor is it a comprehensive list but the general",
    "start": "197819",
    "end": "205409"
  },
  {
    "text": "idea is that we have this declarative API where we submit these spec files",
    "start": "205409",
    "end": "211260"
  },
  {
    "text": "with our desired state and you know in this example the number of replicas and",
    "start": "211260",
    "end": "216299"
  },
  {
    "text": "the fact that it's an engine X image are the only things that matter you know we submit this to kubernetes it does its",
    "start": "216299",
    "end": "222389"
  },
  {
    "text": "thing and if all works well you know we get two instances of this running and all of this is handled by the control",
    "start": "222389",
    "end": "229680"
  },
  {
    "text": "plane so we've got a couple of components that run on all of the worker nodes and this is all that where your",
    "start": "229680",
    "end": "235079"
  },
  {
    "text": "pods end up we've got the couplet the coop proxy and whatever container runtime and then we have our master",
    "start": "235079",
    "end": "241799"
  },
  {
    "text": "nodes with some control plane components there I have Etsy D listed here typically in a production environment",
    "start": "241799",
    "end": "248310"
  },
  {
    "text": "you would probably run those on their own nodes but there's only so much you can fit on a slide so at the heart of",
    "start": "248310",
    "end": "256739"
  },
  {
    "text": "kubernetes is at CD and a lot of people don't necessarily realize this but so at CD is a distributed fault tolerant",
    "start": "256739",
    "end": "263190"
  },
  {
    "text": "database it uses the RAF consensus distributed consensus protocol that Jeff",
    "start": "263190",
    "end": "268949"
  },
  {
    "text": "was mentioning in his talk this morning and it's essentially a key value store that uses a directory hierarchy where",
    "start": "268949",
    "end": "275940"
  },
  {
    "text": "you can watch individual keys or the parent directory for changes additions things like that",
    "start": "275940",
    "end": "281670"
  },
  {
    "text": "and it has some primitives in there like distributive blocks and leadership election and most of kubernetes is",
    "start": "281670",
    "end": "287670"
  },
  {
    "text": "actually built on top of this so the next layer up is we have the API server",
    "start": "287670",
    "end": "294270"
  },
  {
    "text": "now all the control plane components communicate with the API server and",
    "start": "294270",
    "end": "300120"
  },
  {
    "text": "basically it's just transforming information from those into the data that's stored in at CD watching for",
    "start": "300120",
    "end": "307200"
  },
  {
    "text": "changes and notifying the individual components of things that change so as",
    "start": "307200",
    "end": "314340"
  },
  {
    "text": "we walk through these I want to kind of talk about you know in building your own distributed systems and solving unique",
    "start": "314340",
    "end": "320310"
  },
  {
    "text": "problems that your use case might have let's talk about like extension points and how and why you might want to",
    "start": "320310",
    "end": "326190"
  },
  {
    "text": "customize it so the API server itself we kind of have two ways that we can inject ourselves one is through API server",
    "start": "326190",
    "end": "332880"
  },
  {
    "text": "aggregation so essentially what this means as you stand up a service and you augment the API server with this service",
    "start": "332880",
    "end": "340790"
  },
  {
    "text": "and we'll talk about some interesting use cases like service catalogs for that and then we have custom resource",
    "start": "340790",
    "end": "347610"
  },
  {
    "text": "definitions and this is like where would you think about having a pod spec you can actually introduce your own types",
    "start": "347610",
    "end": "353190"
  },
  {
    "text": "into kubernetes and have your own controllers that interact with the system based on changes to those so open",
    "start": "353190",
    "end": "362640"
  },
  {
    "text": "service broker is actually a really good example of API server aggregation so essentially what this allows you to do",
    "start": "362640",
    "end": "369120"
  },
  {
    "text": "is expose other services to kubernetes",
    "start": "369120",
    "end": "374520"
  },
  {
    "text": "that aren't necessarily supported so examples have ones for like asher",
    "start": "374520",
    "end": "379620"
  },
  {
    "text": "specifically is like we expose cosmos DB and our my sequel offerings and things like that and an example of how this",
    "start": "379620",
    "end": "386640"
  },
  {
    "text": "works essentially what happens is the API server communicates with the service",
    "start": "386640",
    "end": "392250"
  },
  {
    "text": "catalog you can list the things that are available you can provision them and then binding essentially get you the",
    "start": "392250",
    "end": "398460"
  },
  {
    "text": "credentials to communicate with it and that's mounted in as a secret into your container so this is kind of a quick",
    "start": "398460",
    "end": "406200"
  },
  {
    "text": "example of provisioning my sequel on Azure you submit a spec",
    "start": "406200",
    "end": "412510"
  },
  {
    "text": "file just like you would for your pod and you say I would like my sequel and",
    "start": "412510",
    "end": "417520"
  },
  {
    "text": "this is kind of the plan that I want to use and then we can create a binding in order to get the credentials for that",
    "start": "417520",
    "end": "424330"
  },
  {
    "text": "into our container and this offers a lot of power and with the API server aggregation like that is you can create",
    "start": "424330",
    "end": "430990"
  },
  {
    "text": "these things for yourself your own self service infrastructure for things that may need to be created especially when",
    "start": "430990",
    "end": "436360"
  },
  {
    "text": "you have multiple teams rather than kind of having to do these custom one offs",
    "start": "436360",
    "end": "441430"
  },
  {
    "text": "for people you can expose just the API for them to spin up their own instances of some internal service so now let's",
    "start": "441430",
    "end": "449020"
  },
  {
    "text": "talk about the controller manager so the controller manager is kind of the thing that gets kicked off when we have",
    "start": "449020",
    "end": "454090"
  },
  {
    "text": "something like a replica set all it's doing is its watching the API server for",
    "start": "454090",
    "end": "459190"
  },
  {
    "text": "replicas sets and then it's only job is to now check the API server for pods",
    "start": "459190",
    "end": "466900"
  },
  {
    "text": "that match the labels in that replica set that's it and then if if the number",
    "start": "466900",
    "end": "472810"
  },
  {
    "text": "doesn't match it creates or deletes them at will so it's not doing anything to the host or anything it's just managing",
    "start": "472810",
    "end": "479350"
  },
  {
    "text": "other resources inside the API server",
    "start": "479350",
    "end": "483450"
  },
  {
    "text": "okay so inside the controller manager there's actually a series of reconciliation loops some that manage",
    "start": "486870",
    "end": "494260"
  },
  {
    "text": "the nodes the replication controller I give an example of the endpoints controller which is what matches",
    "start": "494260",
    "end": "500139"
  },
  {
    "text": "services to pods that match those labels and their readiness probes you know are",
    "start": "500139",
    "end": "507070"
  },
  {
    "text": "succeeding then we have a cloud controller manager which is kind of the thing we're similar to the other",
    "start": "507070",
    "end": "513280"
  },
  {
    "text": "controller manager except that it knows a lot more about like your cloud providers api's and can kind of do more",
    "start": "513280",
    "end": "518440"
  },
  {
    "text": "inspection of the health of nodes and things like that before removing them setting up routes on load balancers",
    "start": "518440",
    "end": "524760"
  },
  {
    "text": "mounting in volumes for cloud storage that you might have so the controller",
    "start": "524760",
    "end": "532510"
  },
  {
    "text": "kind of pattern like why would you want to create your own the obvious one is if you are a cloud provider and you want",
    "start": "532510",
    "end": "538990"
  },
  {
    "text": "your manage services to be supported but the main things we want to cat is kind of like the decoupling your",
    "start": "538990",
    "end": "545500"
  },
  {
    "text": "applications from the resource spec definitions like this gets this gets messy right for most of our services we",
    "start": "545500",
    "end": "551680"
  },
  {
    "text": "end up with you know 5 10 20 ml files to deploy our services and then if you have",
    "start": "551680",
    "end": "558220"
  },
  {
    "text": "to run multiple instances of these things it gets it gets really kind of gnarly at first and then even some",
    "start": "558220",
    "end": "564189"
  },
  {
    "text": "things that you might have custom stuff billed for so you might want to create self-service infrastructure and",
    "start": "564189",
    "end": "570430"
  },
  {
    "text": "abstracting operational knowledge and I'll actually walk through the operator pattern because this one is really interesting and if you want to create",
    "start": "570430",
    "end": "577000"
  },
  {
    "text": "your own controller there's a link on the slide for I'm kind of a sample controller to base it off of so kublai",
    "start": "577000",
    "end": "584920"
  },
  {
    "text": "go is an example of a custom controller so it basically runs in your cluster it",
    "start": "584920",
    "end": "591939"
  },
  {
    "text": "looks for this annotation on your service definition and then it will look",
    "start": "591939",
    "end": "598329"
  },
  {
    "text": "at your ingress and it will find all of the hosts running in your ingress and it will go out using let's encrypt such",
    "start": "598329",
    "end": "604779"
  },
  {
    "text": "certificates for them and configure nginx for those certificates and all of",
    "start": "604779",
    "end": "612399"
  },
  {
    "text": "this stuff kind of just works for free you don't have to do anything custom so the Prometheus operator is actually one",
    "start": "612399",
    "end": "617529"
  },
  {
    "text": "of my favorites so an example of how the operator works is you can create this",
    "start": "617529",
    "end": "623680"
  },
  {
    "text": "new kind called Prometheus and now you can just request that I would like a Prometheus instance with two replicas",
    "start": "623680",
    "end": "630670"
  },
  {
    "text": "and then the operator is watching that and then it goes out and it creates a stateful set and you know does all the",
    "start": "630670",
    "end": "640170"
  },
  {
    "text": "the volume all the volumes and stuff like that and it also has operational knowledge as far as upgrading so I don't",
    "start": "640170",
    "end": "646870"
  },
  {
    "text": "have an example here but you could say the version of Prometheus that you want to run and it could recognize that it's",
    "start": "646870",
    "end": "653649"
  },
  {
    "text": "running an older version and it could do the upgrades for you so you're kind of baking in this operational knowledge",
    "start": "653649",
    "end": "658990"
  },
  {
    "text": "into the cluster itself the fact that it creates a stateful set as a side-effect",
    "start": "658990",
    "end": "664449"
  },
  {
    "text": "the important thing here is that like the API we expose to the people",
    "start": "664449",
    "end": "669579"
  },
  {
    "text": "consuming our self-service infrastructure they only care about the spec the desired State they don't really care how it gets",
    "start": "669579",
    "end": "675459"
  },
  {
    "text": "implemented so the one part that I really love about",
    "start": "675459",
    "end": "681550"
  },
  {
    "text": "the Prometheus operator is this other type that gets created called a service monitor now the service monitor what I",
    "start": "681550",
    "end": "687880"
  },
  {
    "text": "essentially do there is I'm just telling it that any pod that matches these labels I want you to hit it on the HTTP",
    "start": "687880",
    "end": "694959"
  },
  {
    "text": "port and scrape Prometheus metrics and like think about the power of something like that I don't have to communicate with",
    "start": "694959",
    "end": "701500"
  },
  {
    "text": "operations teams to ask them to reconfigure prometheus but you know",
    "start": "701500",
    "end": "706870"
  },
  {
    "text": "Prometheus to come scrape my new application or when I decide to tear it down to reconfigure Prometheus for me",
    "start": "706870",
    "end": "713140"
  },
  {
    "text": "this is kind of automated behind the seams and that's it's ridiculously powerful so hopefully this doesn't get",
    "start": "713140",
    "end": "722649"
  },
  {
    "text": "me in trouble with my current employer or past employer but prior to my current role I worked at Comcast and a really",
    "start": "722649",
    "end": "730510"
  },
  {
    "text": "interesting solution that we came up with was using custom resource definitions to represent video streams",
    "start": "730510",
    "end": "737860"
  },
  {
    "text": "they were essentially replacing this industry specific hardware called in a",
    "start": "737860",
    "end": "742870"
  },
  {
    "text": "cap that exists up in these head end locations the blue locations and it",
    "start": "742870",
    "end": "748300"
  },
  {
    "text": "multiplex video together and then it pushed it out to these devices called",
    "start": "748300",
    "end": "754810"
  },
  {
    "text": "ape X's and this use quadrature amplitude modulation to basically",
    "start": "754810",
    "end": "759959"
  },
  {
    "text": "modulate the video onto the coax cable but there had a lot of problems with you",
    "start": "759959",
    "end": "765610"
  },
  {
    "text": "know how do we schedule these workloads so that they end up as close to the customer as they want and and all of",
    "start": "765610",
    "end": "771610"
  },
  {
    "text": "these things we start thinking about most of us build distributed systems for a living we start thinking about building our own schedulers and all",
    "start": "771610",
    "end": "777699"
  },
  {
    "text": "these things and it's actually pretty straightforward to just use kubernetes for this right we have host affinity and",
    "start": "777699",
    "end": "784540"
  },
  {
    "text": "the pod anti affinity selectors and all kinds of things that we can use to help hint to the scheduler so essentially",
    "start": "784540",
    "end": "792940"
  },
  {
    "text": "what we ended up doing was creating our own custom resource to represent these streams and now the video engineers only",
    "start": "792940",
    "end": "800290"
  },
  {
    "text": "had to configure desired state here's the channels here's where their inputs come from you know here's the add zone",
    "start": "800290",
    "end": "806829"
  },
  {
    "text": "that this needs to actually be deployed to then this kind of created a nice separation between them and the system",
    "start": "806829",
    "end": "814959"
  },
  {
    "text": "administrators that kept all the infrastructure running the infrastructure folks only had to focus on ensuring that kubernetes stayed",
    "start": "814959",
    "end": "821379"
  },
  {
    "text": "healthy and the nodes stayed healthy they didn't have to worry about all of the operational aspects of that and the",
    "start": "821379",
    "end": "828040"
  },
  {
    "text": "video engineers didn't have to have SSH access into all of those you know hardware so when we start",
    "start": "828040",
    "end": "837249"
  },
  {
    "text": "looking at customer resource definitions verse API aggregation there's a lot of similarities there are some differences",
    "start": "837249",
    "end": "844059"
  },
  {
    "text": "so you know CRD obviously your controller you can implement in whatever language you want api aggregation you",
    "start": "844059",
    "end": "850480"
  },
  {
    "text": "have to use go I personally love go so for me it's not a problem but you know if you don't love go as much as I do",
    "start": "850480",
    "end": "857649"
  },
  {
    "text": "maybe that is see RDS you don't have to",
    "start": "857649",
    "end": "862809"
  },
  {
    "text": "handle multiple API versions whereas API aggregation you do there's limited validation right now they're",
    "start": "862809",
    "end": "869769"
  },
  {
    "text": "working on more for customer resource definitions obviously if you do your own",
    "start": "869769",
    "end": "875309"
  },
  {
    "text": "API then you can do whatever validations you want sub resources you can scale and",
    "start": "875309",
    "end": "883029"
  },
  {
    "text": "you can support status on your custom types and this is actually really awesome when you think about stuff like",
    "start": "883029",
    "end": "889269"
  },
  {
    "text": "this right like so let's use the the video stuff as an example I can literally do a cube CTL gets that ours",
    "start": "889269",
    "end": "897939"
  },
  {
    "text": "coops ETL status on a particular video stream and see the metrics for it right",
    "start": "897939",
    "end": "903759"
  },
  {
    "text": "because we're just creating it where we're treating it as a type in the system like anything else so we can",
    "start": "903759",
    "end": "908829"
  },
  {
    "text": "scale it we can we can report stats those are the only things that are supported on CR DS but on that API",
    "start": "908829",
    "end": "916089"
  },
  {
    "text": "aggregation standpoint you can create new new sub resources so you can exec",
    "start": "916089",
    "end": "921339"
  },
  {
    "text": "her attach to these things at will so now we'll talk about the scheduler the",
    "start": "921339",
    "end": "927339"
  },
  {
    "text": "scheduler like the most complex piece right it's actually fairly simple when",
    "start": "927339",
    "end": "933040"
  },
  {
    "text": "we look at the interactions the algorithm itself uses bin packing and",
    "start": "933040",
    "end": "938920"
  },
  {
    "text": "obviously there's some complexity in the way that's implemented but when we actually the role that it plays within kubernetes",
    "start": "938920",
    "end": "945220"
  },
  {
    "text": "itself it's actually pretty limited it watches the API server basically like a long pole for any pod or job or things",
    "start": "945220",
    "end": "953770"
  },
  {
    "text": "like that that does not have a node name assigned to it and then it's only job is to do its thing and decide the node",
    "start": "953770",
    "end": "960750"
  },
  {
    "text": "update the spec and push it back to the API server that's it that's the only role the scheduler plays in all of this",
    "start": "960750",
    "end": "967080"
  },
  {
    "text": "and I think that confuses people sometimes because I think a lot of people want to assume that it's the",
    "start": "967080",
    "end": "972279"
  },
  {
    "text": "thing that actually puts stuff on the node but you can create your own",
    "start": "972279",
    "end": "978279"
  },
  {
    "text": "scheduler and the beauty of this actually is you don't have to replace the default scheduler either you can",
    "start": "978279",
    "end": "984370"
  },
  {
    "text": "actually run them side by side and you can tell specific pod types and things like that to use a specific scheduler",
    "start": "984370",
    "end": "990670"
  },
  {
    "text": "and this is actually super powerful when we think about designing distributed systems because maybe the way the",
    "start": "990670",
    "end": "998050"
  },
  {
    "text": "scheduling works is not you know ideal for our particular use case so why would",
    "start": "998050",
    "end": "1003330"
  },
  {
    "text": "you want to write your own scheduler anytime you need outside information to make scheduling decisions maybe you have",
    "start": "1003330",
    "end": "1009240"
  },
  {
    "text": "things like hardware encryption modules or FPGAs or things like that and let's",
    "start": "1009240",
    "end": "1015029"
  },
  {
    "text": "say your hardware encryption modules are primed for specific data sets or you're",
    "start": "1015029",
    "end": "1020130"
  },
  {
    "text": "using secure enclaves or something like that that kubernetes isn't aware of and",
    "start": "1020130",
    "end": "1025290"
  },
  {
    "text": "you need to try to use that information network based scheduling currently kubernetes doesn't support that maybe",
    "start": "1025290",
    "end": "1031110"
  },
  {
    "text": "you're doing something like video streaming and you can easily saturate switches and you know you want to use",
    "start": "1031110",
    "end": "1036360"
  },
  {
    "text": "SNMP or something to retrieve metrics from these things and use those to make",
    "start": "1036360",
    "end": "1041490"
  },
  {
    "text": "scheduling decisions maybe you're you have large amounts of data that you need",
    "start": "1041490",
    "end": "1046800"
  },
  {
    "text": "to work with and you want the scheduler to try to run it the workload on nodes that contain the data or as close to it",
    "start": "1046800",
    "end": "1053190"
  },
  {
    "text": "as possible so cool it so cool it",
    "start": "1053190",
    "end": "1058200"
  },
  {
    "text": "actually is the workhorse it runs on every single node and this is the thing that actually calls out to the container",
    "start": "1058200",
    "end": "1064410"
  },
  {
    "text": "runtime and the image repositories and it mounts volumes and sets environment variables using the downward API and",
    "start": "1064410",
    "end": "1071700"
  },
  {
    "text": "config maps and all that jazz it provides an API server which actually",
    "start": "1071700",
    "end": "1077610"
  },
  {
    "text": "the kubernetes api server calls out to anytime you do something like game exec or attach or logs and it collects it",
    "start": "1077610",
    "end": "1087150"
  },
  {
    "text": "collects all the metrics that are used by the scheduler and reported to the dashboard so we can kind of look at this",
    "start": "1087150",
    "end": "1093750"
  },
  {
    "text": "as a basic example so it's just basically doing a long pole to the API server and we'll notice this is a",
    "start": "1093750",
    "end": "1098940"
  },
  {
    "text": "pattern with all of the components and it's looking for things like pods or jobs that have a node name that matches",
    "start": "1098940",
    "end": "1104460"
  },
  {
    "text": "its node name it's like oh okay like this is this is a job for me and then it interacts with the Container runtime and",
    "start": "1104460",
    "end": "1111180"
  },
  {
    "text": "tries to reconcile the differences you know kubernetes says this thing was deleted but I'm still running it maybe I",
    "start": "1111180",
    "end": "1117240"
  },
  {
    "text": "should shut down this container you know it's startup ones that don't exist yet so why would you want to",
    "start": "1117240",
    "end": "1124500"
  },
  {
    "text": "create your own so for the kulit you probably don't and you you probably shouldn't but we did anyway as an",
    "start": "1124500",
    "end": "1131340"
  },
  {
    "text": "experiment before coop con this past year created something called the virtual Kubla it's kind of an experiment",
    "start": "1131340",
    "end": "1138650"
  },
  {
    "text": "and essentially what it does is it's interacts with the API server the same",
    "start": "1138650",
    "end": "1144480"
  },
  {
    "text": "way that the normal Kubla does and it reports itself to the API server as a node so you actually look at kubernetes",
    "start": "1144480",
    "end": "1152910"
  },
  {
    "text": "and kubernetes sees a node that exists that doesn't really exist there's no real node there and basically what it",
    "start": "1152910",
    "end": "1159390"
  },
  {
    "text": "does is any workload that gets assigned to it it translates that in this case I",
    "start": "1159390",
    "end": "1164880"
  },
  {
    "text": "have as your container instances but hyper SH is supported far gates supported now and some others and it",
    "start": "1164880",
    "end": "1172350"
  },
  {
    "text": "basically translates it to these container platforms and runs them out in",
    "start": "1172350",
    "end": "1178140"
  },
  {
    "text": "the cloud so essentially it's a node with unlimited resources so why would",
    "start": "1178140",
    "end": "1185340"
  },
  {
    "text": "you even want to do that some examples would be batch jobs you have a cluster",
    "start": "1185340",
    "end": "1190380"
  },
  {
    "text": "large enough to run your normal workloads but you want to run batch or CI CD or things like that out in the",
    "start": "1190380",
    "end": "1196500"
  },
  {
    "text": "cloud server lists we keep thinking about like how can I stop thinking about my hardware and nodes and kubernetes you",
    "start": "1196500",
    "end": "1204420"
  },
  {
    "text": "know is a great abstraction but somewhere somebody had to do some capacity planning and decide how",
    "start": "1204420",
    "end": "1209909"
  },
  {
    "text": "big of nodes do I need how many of them do I need so I think that things like virtual couplet are definitely and most",
    "start": "1209909",
    "end": "1219330"
  },
  {
    "text": "of this stuff is all fairly early and this is kind of the the idea here is we should all be experimenting and trying",
    "start": "1219330",
    "end": "1224700"
  },
  {
    "text": "new things we're still figuring it out but it would be really awesome to have the power of the abstraction of",
    "start": "1224700",
    "end": "1230820"
  },
  {
    "text": "kubernetes and not have to worry about the nodes themselves CNI so I don't know how many",
    "start": "1230820",
    "end": "1238950"
  },
  {
    "text": "people are familiar with CNI it's it's not mentioned a lot but CNI is essentially the container network",
    "start": "1238950",
    "end": "1244169"
  },
  {
    "text": "interface this is what gets run every time you start up a pod to mount in the",
    "start": "1244169",
    "end": "1249240"
  },
  {
    "text": "network interface into the container so in the middle there we have a CNI config",
    "start": "1249240",
    "end": "1254730"
  },
  {
    "text": "file this exists on every house the important things here is third line",
    "start": "1254730",
    "end": "1259980"
  },
  {
    "text": "down is the type and then down we have the ipam section so CNI is kind of composed of two parts one is the type",
    "start": "1259980",
    "end": "1268260"
  },
  {
    "text": "itself which is actually creates the network interfaces sets up routes things like that and mounts them in and then we",
    "start": "1268260",
    "end": "1274350"
  },
  {
    "text": "have the IPAM which is the IP allocation module so sometimes your network itself might want to manage the IP addresses",
    "start": "1274350",
    "end": "1282120"
  },
  {
    "text": "that containers are getting or might need to do additional things with the management of those so why would you",
    "start": "1282120",
    "end": "1289650"
  },
  {
    "text": "want to create your own if you need multiple interfaces and this happens the",
    "start": "1289650",
    "end": "1295740"
  },
  {
    "text": "cable example I use they use one interface for pod two pod communication and they needed a separate interface due",
    "start": "1295740",
    "end": "1302250"
  },
  {
    "text": "to the way multicast works to be mounted in for all the egress of the video",
    "start": "1302250",
    "end": "1307380"
  },
  {
    "text": "streaming if you need to do custom routing for any reason bgp Netcom things of that nature maybe you're doing",
    "start": "1307380",
    "end": "1313860"
  },
  {
    "text": "software-defined networking this is a good injection point for interacting",
    "start": "1313860",
    "end": "1320490"
  },
  {
    "text": "with the network when containers come up and down so Kubb proxy fukube proxy",
    "start": "1320490",
    "end": "1327240"
  },
  {
    "text": "exists on the workers itself it's responsible for making services real so",
    "start": "1327240",
    "end": "1332820"
  },
  {
    "text": "if we look at a service definition and we have a cluster IP that IP does not exist anywhere it's basically just",
    "start": "1332820",
    "end": "1340559"
  },
  {
    "text": "assigned out of now Kubb proxy itself will take that cluster IP and it will find all the",
    "start": "1340559",
    "end": "1347190"
  },
  {
    "text": "matching endpoints for that service that are ready and it will set up IP tables",
    "start": "1347190",
    "end": "1353130"
  },
  {
    "text": "rules and things like that so that anything on the host tries to communicate with that IP it will load",
    "start": "1353130",
    "end": "1358230"
  },
  {
    "text": "balance between the existing endpoints it will also bind to ports and things",
    "start": "1358230",
    "end": "1364020"
  },
  {
    "text": "like that if you expose node ports so",
    "start": "1364020",
    "end": "1369180"
  },
  {
    "text": "much more so we have things like extended resources and these are",
    "start": "1369180",
    "end": "1374210"
  },
  {
    "text": "essentially you can set custom resource limits on your node so maybe you're using an FPGA or something you can set",
    "start": "1374210",
    "end": "1381270"
  },
  {
    "text": "limits for some quantity that's available and then in your pod definition you can specify that it",
    "start": "1381270",
    "end": "1387600"
  },
  {
    "text": "consumes this much so you can hint to the scheduler init containers these are containers that get ran before your pod",
    "start": "1387600",
    "end": "1394710"
  },
  {
    "text": "actually starts up so any of the normal containers and a nice thing about this",
    "start": "1394710",
    "end": "1400170"
  },
  {
    "text": "is sometimes you need to do some initialization that might require keys or credentials that your actual",
    "start": "1400170",
    "end": "1405870"
  },
  {
    "text": "application does not need to run and these are great places to do that initialization step that way the normal",
    "start": "1405870",
    "end": "1412800"
  },
  {
    "text": "containers that are running you're kind of eliminating that that security threat",
    "start": "1412800",
    "end": "1418050"
  },
  {
    "text": "there by not having to have the keys in those production containers initializers",
    "start": "1418050",
    "end": "1423150"
  },
  {
    "text": "and finalized errs these are actually part of kubernetes that I don't see use very often but essentially we can set",
    "start": "1423150",
    "end": "1429120"
  },
  {
    "text": "this up on the cluster for pods or things objects that match specific criteria where we can force things to be",
    "start": "1429120",
    "end": "1436620"
  },
  {
    "text": "ran in the cluster so essentially on startup of this pod these initializers",
    "start": "1436620",
    "end": "1442560"
  },
  {
    "text": "run and it can mutate the object and things like that so we can force constraints or we can do setup and",
    "start": "1442560",
    "end": "1449100"
  },
  {
    "text": "teardown when we recognize containers or certain types coming up I kind of",
    "start": "1449100",
    "end": "1454290"
  },
  {
    "text": "mentioned a little bit readiness and liveness probes readiness probes are essentially telling services that this",
    "start": "1454290",
    "end": "1459660"
  },
  {
    "text": "thing is healthy enough that it can be an endpoint in the load balancer liveness probes just means that",
    "start": "1459660",
    "end": "1465030"
  },
  {
    "text": "kubernetes shouldn't kick it note affinity an anti affinity this is so that we can attract workloads to",
    "start": "1465030",
    "end": "1471060"
  },
  {
    "text": "specific nodes or repel them you can use these a lot like if you need things like GPU or things of that nature",
    "start": "1471060",
    "end": "1478269"
  },
  {
    "text": "plot affinity and anti affinity this allows us to take containers and attract",
    "start": "1478269",
    "end": "1483610"
  },
  {
    "text": "or repel them from each other so let's say you're running Redis right we have",
    "start": "1483610",
    "end": "1490779"
  },
  {
    "text": "or we just have a normal leader or follower relationship between two components we don't want them to run on",
    "start": "1490779",
    "end": "1497649"
  },
  {
    "text": "the same node and even then you can set the boundaries here so the boundary",
    "start": "1497649",
    "end": "1504640"
  },
  {
    "text": "doesn't necessarily have to be a node we can set labels for a rack or a",
    "start": "1504640",
    "end": "1510760"
  },
  {
    "text": "particular data center or things like that so that we can ensure that they they never exist in the same boundary",
    "start": "1510760",
    "end": "1516100"
  },
  {
    "text": "layer sto so Jeff was mentioning several",
    "start": "1516100",
    "end": "1521830"
  },
  {
    "text": "things that is phew makes awesome and you get for free if you install SEO into your cluster we talked about distributed",
    "start": "1521830",
    "end": "1529210"
  },
  {
    "text": "tracing and distributed tracing is glorious but if you have a number of dish micro services and stuff running",
    "start": "1529210",
    "end": "1536950"
  },
  {
    "text": "trying to get everybody to spend the time to actually implement that is really painful so the way sto works is",
    "start": "1536950",
    "end": "1545289"
  },
  {
    "text": "it injects itself on both the ingress and egress layers of every container so",
    "start": "1545289",
    "end": "1550600"
  },
  {
    "text": "you can enforce policies but in addition you can inject all the headers that you need for distributed tracing so it knows",
    "start": "1550600",
    "end": "1556899"
  },
  {
    "text": "what the very beginning of this process that this needs to have and ID generated for it and then on the way out it will",
    "start": "1556899",
    "end": "1563769"
  },
  {
    "text": "add these things so that's a quick way to get at least boundaries for how long",
    "start": "1563769",
    "end": "1569860"
  },
  {
    "text": "each micro-service took and things of that nature and once you start seeing these things it kind of helps you want",
    "start": "1569860",
    "end": "1576039"
  },
  {
    "text": "to add more tracing inside the individual services you can do things",
    "start": "1576039",
    "end": "1582399"
  },
  {
    "text": "like request routing you can do a/b testing so that you can send a certain percentage of your traffic towards",
    "start": "1582399",
    "end": "1589029"
  },
  {
    "text": "specific pods this works really great if you have like some production system and you need to run like maybe a canary or",
    "start": "1589029",
    "end": "1596710"
  },
  {
    "text": "something like that to see whether a new version is going to work well you can implement timeouts at that layer retry",
    "start": "1596710",
    "end": "1605880"
  },
  {
    "text": "you can do kind of concurrent connections you can limit them to upstream services and this kind of helps",
    "start": "1605880",
    "end": "1613540"
  },
  {
    "text": "with things like back pressure okay so",
    "start": "1613540",
    "end": "1619960"
  },
  {
    "text": "the next thing I want to talk about outside of how you can kind of inject yourself and customize kubernetes to fit",
    "start": "1619960",
    "end": "1626140"
  },
  {
    "text": "your needs is abstract building abstractions on top of kubernetes so we're kind of at the beginning you know",
    "start": "1626140",
    "end": "1632410"
  },
  {
    "text": "I led with you know kubernetes isn't the thing it's the thing that gets us to the thing so we need to start talking about",
    "start": "1632410",
    "end": "1639310"
  },
  {
    "text": "what it is that we want to interact with because all these diamo files is not it and it was never meant to be so we've",
    "start": "1639310",
    "end": "1647410"
  },
  {
    "text": "got stuff like helm right so helm is if people haven't heard of it it's like a package manager for kubernetes and this",
    "start": "1647410",
    "end": "1654520"
  },
  {
    "text": "helps right you know when we think about managing an application as a whole right",
    "start": "1654520",
    "end": "1660220"
  },
  {
    "text": "let's just say a blog we might actually have the persistent volume claim we",
    "start": "1660220",
    "end": "1667450"
  },
  {
    "text": "might have something for the database we have the the front-end for it we have config maps we might have",
    "start": "1667450",
    "end": "1673630"
  },
  {
    "text": "secrets for the database and for the credentials for the blog itself like now we're talking you know five six seven",
    "start": "1673630",
    "end": "1680020"
  },
  {
    "text": "things that get managed and you know it gets painful when you need to run",
    "start": "1680020",
    "end": "1685390"
  },
  {
    "text": "multiple versions of these things so helm kind of allows you to template eyes that and then fill in the values and",
    "start": "1685390",
    "end": "1691180"
  },
  {
    "text": "treat everything is one application deployed is one roll it all back as one and I think this is this helps but we",
    "start": "1691180",
    "end": "1698110"
  },
  {
    "text": "still somebody has to create these sam'l files open fast I don't know how many",
    "start": "1698110",
    "end": "1703390"
  },
  {
    "text": "people here are doing like functions as a service at all Trevor Lewis okay we've",
    "start": "1703390",
    "end": "1708460"
  },
  {
    "text": "got a couple people so I'm pretty new to service I I haven't been I haven't drank the kool-aid yet but I see some uses but",
    "start": "1708460",
    "end": "1715810"
  },
  {
    "text": "open fast essentially allows you to do functions as a service on top of kubernetes and I think this is where it",
    "start": "1715810",
    "end": "1721540"
  },
  {
    "text": "starts getting more powerful you know you know the pass is dead but long live the pass right Lee people are going to",
    "start": "1721540",
    "end": "1727330"
  },
  {
    "text": "want platforms as a service but now they can all communicate kind of at the same",
    "start": "1727330",
    "end": "1734440"
  },
  {
    "text": "level to the operations folks you only have to worry about kubernetes",
    "start": "1734440",
    "end": "1739470"
  },
  {
    "text": "draft draft is another way of kind of making things easier it essentially can",
    "start": "1739600",
    "end": "1745570"
  },
  {
    "text": "do heuristics on your code base and figure out what programming language and framework that you're using and then",
    "start": "1745570",
    "end": "1752650"
  },
  {
    "text": "generate docker files and helm charts based on kind of known best practices for that particular language or",
    "start": "1752650",
    "end": "1759610"
  },
  {
    "text": "framework and I think this is a step in the right direction right we're now we're no longer having to train all of",
    "start": "1759610",
    "end": "1765490"
  },
  {
    "text": "our developers on creating docker files and kubernetes spec files and things like that I think at some point those",
    "start": "1765490",
    "end": "1772690"
  },
  {
    "text": "things need to go away for the average developer pachyderm is really",
    "start": "1772690",
    "end": "1778990"
  },
  {
    "text": "interesting I should have put a screenshot of the UI here but is essentially a data pipelining system you",
    "start": "1778990",
    "end": "1786160"
  },
  {
    "text": "can use a UI to kind of configure the input and all of the steps in the chain which ones required GPU and it kind of",
    "start": "1786160",
    "end": "1793960"
  },
  {
    "text": "manages creating all the pods and resources and making sure they end up on nodes with GPUs and that the data gets",
    "start": "1793960",
    "end": "1799930"
  },
  {
    "text": "forwarded and kind of tracks the data versioning and provenance and the",
    "start": "1799930",
    "end": "1805150"
  },
  {
    "text": "important thing here is to look at like all of these things that we're creating are all built on the same primitives",
    "start": "1805150",
    "end": "1811750"
  },
  {
    "text": "underneath like kubernetes can start becoming the you know assembly language of distributed systems for us how many",
    "start": "1811750",
    "end": "1819700"
  },
  {
    "text": "people have seen meta particle over here we've got a couple so meta particle is",
    "start": "1819700",
    "end": "1824860"
  },
  {
    "text": "like this really really ambitious project by Brendan burns here's one of the co-creators of kubernetes but I",
    "start": "1824860",
    "end": "1831490"
  },
  {
    "text": "think this highlights the point really really well that kind of we need to",
    "start": "1831490",
    "end": "1837400"
  },
  {
    "text": "democratize the creation of distributed systems like you know everything is at scale now and we've got more more",
    "start": "1837400",
    "end": "1843370"
  },
  {
    "text": "developers coming in and they need to be able to create distributed systems without having to have you know a and",
    "start": "1843370",
    "end": "1850360"
  },
  {
    "text": "its same background in it so his idea is you know essentially creating libraries within languages that you can include",
    "start": "1850360",
    "end": "1858160"
  },
  {
    "text": "and kind of expose these these distributed systems concepts so I don't",
    "start": "1858160",
    "end": "1866710"
  },
  {
    "text": "know how many people here are familiar with go I promise it won't hurt if you're not a go person but this is an example in go",
    "start": "1866710",
    "end": "1873909"
  },
  {
    "text": "essentially you include this library you tell app to containerize itself you say",
    "start": "1873909",
    "end": "1879590"
  },
  {
    "text": "I want 3 replicas you know here's kind of my my docker repository and things of",
    "start": "1879590",
    "end": "1884899"
  },
  {
    "text": "that nature and now when you compile this and you run this application it will containerize itself it will push",
    "start": "1884899",
    "end": "1891740"
  },
  {
    "text": "itself up to this docker repo and then it will deploy itself in kubernetes running 3 replicas and I you know maybe",
    "start": "1891740",
    "end": "1900289"
  },
  {
    "text": "this isn't the thing right but I think it's important that we start thinking about this like what what what language",
    "start": "1900289",
    "end": "1906409"
  },
  {
    "text": "do we want to speak to kubernetes because now kind of the sky's the limit the complexity of dealing with the",
    "start": "1906409",
    "end": "1912919"
  },
  {
    "text": "infrastructure itself has kind of been taken away from us so here's another example",
    "start": "1912919",
    "end": "1918549"
  },
  {
    "text": "essentially what changed here is instead of saying with three replicas we said we wanted three shards and then we gave it",
    "start": "1918549",
    "end": "1925129"
  },
  {
    "text": "our regular expression for the URL to use as sharding now this will actually",
    "start": "1925129",
    "end": "1930919"
  },
  {
    "text": "deploy a stateful set and it'll set up all of the services and a sharding",
    "start": "1930919",
    "end": "1938600"
  },
  {
    "text": "service that will get hit and then you can kind of ensure that whatever the user name is they always end up hitting",
    "start": "1938600",
    "end": "1944360"
  },
  {
    "text": "the same shard and this is really powerful so the future so kind of as we",
    "start": "1944360",
    "end": "1952730"
  },
  {
    "text": "stated like kubernetes was never intended to be the top layer and like I love kubernetes and and I've been you",
    "start": "1952730",
    "end": "1960230"
  },
  {
    "text": "know a big fan for years but it's not an off-the-shelf product either it's it's a",
    "start": "1960230",
    "end": "1966679"
  },
  {
    "text": "starting point and I'd love to see what people start coming up with for their own solutions and you know eliminating",
    "start": "1966679",
    "end": "1974120"
  },
  {
    "text": "the amount of time it takes to create you know entire distributed systems from scratch when a lot of the components",
    "start": "1974120",
    "end": "1979669"
  },
  {
    "text": "exists already when we think about like the controller patterns and schedulers and things like that from kubernetes",
    "start": "1979669",
    "end": "1984889"
  },
  {
    "text": "start customizing it and the the part that I'm really looking forward to is the things that we we start building on",
    "start": "1984889",
    "end": "1990799"
  },
  {
    "text": "top and if you've got ideas I would love to hear them like I think that like",
    "start": "1990799",
    "end": "1996559"
  },
  {
    "text": "we're in a perfect time to play an experiment with that thank you I'm guessing she's",
    "start": "1996559",
    "end": "2014540"
  },
  {
    "text": "gonna ask four questions do we have time we have a minute or two and you have",
    "start": "2014540",
    "end": "2021440"
  },
  {
    "text": "just blown our minds with a million ideas of things that we can do and build so I'm going to give people a possible",
    "start": "2021440",
    "end": "2028130"
  },
  {
    "text": "opportunity if they want to ask you a question or two everyone is just going",
    "start": "2028130",
    "end": "2035660"
  },
  {
    "text": "there's so much to think about",
    "start": "2035660",
    "end": "2039310"
  },
  {
    "text": "okay wow I guess this works now so I think they solve two different purposes",
    "start": "2049480",
    "end": "2056270"
  },
  {
    "text": "right so the operator pattern is really for kind of creating self-service",
    "start": "2056270",
    "end": "2062090"
  },
  {
    "text": "infrastructure where you're baking operational knowledge into something",
    "start": "2062090",
    "end": "2067129"
  },
  {
    "text": "that's already running in the cluster that is kind of aware of desired state of this thing and and kind of making",
    "start": "2067130",
    "end": "2074270"
  },
  {
    "text": "that happen and you know upgrade strategies and things like that helm charts are really for managing the",
    "start": "2074270",
    "end": "2080720"
  },
  {
    "text": "number of yamo files that it takes so you know you'd have one for your service",
    "start": "2080720",
    "end": "2086570"
  },
  {
    "text": "for your pod maybe a couple pods exist and they're basically just templates and",
    "start": "2086570",
    "end": "2092120"
  },
  {
    "text": "then that's your chart and then you can just helm install WordPress or something like that and you know you can basically",
    "start": "2092120",
    "end": "2098360"
  },
  {
    "text": "pass arguments saying this is the version of the container I want to run and things like that so I think they",
    "start": "2098360",
    "end": "2103700"
  },
  {
    "text": "solve two different problem problems I feel like I want to ask a question",
    "start": "2103700",
    "end": "2110270"
  },
  {
    "text": "myself so I will really quick and then I'll give them mic to someone else can you it seems like at the end there you",
    "start": "2110270",
    "end": "2117380"
  },
  {
    "text": "showed us a whole bunch of interesting projects where would you recommend people start if they want to dive in",
    "start": "2117380",
    "end": "2122810"
  },
  {
    "text": "with customizing communities themselves so I think the important thing is is I",
    "start": "2122810",
    "end": "2129800"
  },
  {
    "text": "think as a community we start collaborating on what the actions are and start talking about like",
    "start": "2129800",
    "end": "2135230"
  },
  {
    "text": "what the end interfaces that we want to consume but one of the things that I'd love to start seeing people do is",
    "start": "2135230",
    "end": "2141310"
  },
  {
    "text": "creating their own controllers and creating more operators for things that we all run you know like elastic search",
    "start": "2141310",
    "end": "2147140"
  },
  {
    "text": "or Redis or or whatever like these things are gonna be powerful for the",
    "start": "2147140",
    "end": "2152270"
  },
  {
    "text": "community but also you know step in there and if you've got kind of unique",
    "start": "2152270",
    "end": "2158180"
  },
  {
    "text": "constraints inside your your infrastructure like feel free to create",
    "start": "2158180",
    "end": "2163190"
  },
  {
    "text": "a CNI plugin or your own scheduler and things like that with respect to meta",
    "start": "2163190",
    "end": "2169490"
  },
  {
    "text": "particle where do you feel the balance lies in terms of like the helm charts in",
    "start": "2169490",
    "end": "2176270"
  },
  {
    "text": "terms of how they describe a topology versus what's kind of buried down at the specification within the meta particle",
    "start": "2176270",
    "end": "2183650"
  },
  {
    "text": "implementation of a micro service so the",
    "start": "2183650",
    "end": "2188930"
  },
  {
    "text": "question was kind of how do I differentiate like meta particle from like a helm yes so I think helm is an",
    "start": "2188930",
    "end": "2198050"
  },
  {
    "text": "awesome project that helps with the management of the yamo files but I also",
    "start": "2198050",
    "end": "2205300"
  },
  {
    "text": "hope for the future that we're still not working at that level right that that",
    "start": "2205300",
    "end": "2210710"
  },
  {
    "text": "someday the ease of use of I know I'm running in a kubernetes cluster and I",
    "start": "2210710",
    "end": "2217700"
  },
  {
    "text": "need a distributed lock and this is the name of my distributed lock and I I just include a library and I just know that",
    "start": "2217700",
    "end": "2225020"
  },
  {
    "text": "nobody else in the cluster can get that lock I think we need that I don't know",
    "start": "2225020",
    "end": "2230660"
  },
  {
    "text": "whether meta particle is how we get there I think it's it's a fantastic idea and experiment and you know a",
    "start": "2230660",
    "end": "2237110"
  },
  {
    "text": "conversation starter on how we get there because ultimately we need to",
    "start": "2237110",
    "end": "2242270"
  },
  {
    "text": "democratize the creation of distributed systems like that we're hoping for a yellow free future I think I'm all free",
    "start": "2242270",
    "end": "2249770"
  },
  {
    "text": "free - I like that hey just a quick question on the four hybrid environments",
    "start": "2249770",
    "end": "2257290"
  },
  {
    "text": "like you know on pram cloud VMs containers are the options you listed",
    "start": "2257290",
    "end": "2263350"
  },
  {
    "text": "will be the right fit so the difference between like you want",
    "start": "2263350",
    "end": "2271589"
  },
  {
    "text": "to use VMs in containers kind of together right at this table sides and you running your so yeah I mean",
    "start": "2271589",
    "end": "2278039"
  },
  {
    "text": "containers are fantastic but I think that they also there's a lot of problems that VM solve too right",
    "start": "2278039",
    "end": "2285210"
  },
  {
    "text": "for instance a container is not a hard security boundary right like we can do a lot of things to make containers more",
    "start": "2285210",
    "end": "2292079"
  },
  {
    "text": "secure but ultimately if you're running a an out-of-date library in your",
    "start": "2292079",
    "end": "2298200"
  },
  {
    "text": "container and a vulnerable kernel I can escape the container and I have access",
    "start": "2298200",
    "end": "2303539"
  },
  {
    "text": "to your house right so if you have like really really hard security boundaries",
    "start": "2303539",
    "end": "2308760"
  },
  {
    "text": "maybe containers like say you're doing multi-tenancy right and you're we've got different departments or things like",
    "start": "2308760",
    "end": "2314279"
  },
  {
    "text": "that like you know you may still need VMs there's some interesting cases though in cloud where like for example a",
    "start": "2314279",
    "end": "2321180"
  },
  {
    "text": "CI you get to run your pod but you actually are in a VM there there's",
    "start": "2321180",
    "end": "2327630"
  },
  {
    "text": "things like virtual couplet where your provider could actually spin up a VM and",
    "start": "2327630",
    "end": "2332940"
  },
  {
    "text": "run just your container inside that VM I think people are still trying to figure",
    "start": "2332940",
    "end": "2338190"
  },
  {
    "text": "out the the hybrid approach but I don't think VMs are completely going away",
    "start": "2338190",
    "end": "2344930"
  },
  {
    "text": "everything everything old is new again and we're going to have to keep building on the systems that exist who knew all",
    "start": "2344930",
    "end": "2351750"
  },
  {
    "text": "right give it up one more time for Eric saint martin [Applause]",
    "start": "2351750",
    "end": "2361619"
  }
]