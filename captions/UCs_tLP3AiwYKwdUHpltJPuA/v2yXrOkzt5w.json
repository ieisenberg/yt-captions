[
  {
    "text": "okay let's make sure we're doing the right things with microphones uh it's the point to which Ronald Reagan would",
    "start": "5759",
    "end": "11400"
  },
  {
    "text": "say let's bomb Russia um I'm I'm I'm very glad to be",
    "start": "11400",
    "end": "17480"
  },
  {
    "text": "here and and I'm beginning to believe that I actually am I I'm extremely grateful to the conference organizers",
    "start": "17480",
    "end": "24039"
  },
  {
    "text": "for giving me a piece of paper with my name on it and a t-shirt telling me where I am because I may need them later",
    "start": "24039",
    "end": "34559"
  },
  {
    "text": "and so yes uh I'm uh I'm just off the plane if you can read very small writing",
    "start": "34760",
    "end": "41559"
  },
  {
    "text": "uh the clock in the corner of my screen says Wednesday 2358 which is what time on Tuesday I",
    "start": "41559",
    "end": "48680"
  },
  {
    "text": "actually think it is and So the plan is",
    "start": "48680",
    "end": "54800"
  },
  {
    "text": "basically get it over with before I know what's hit me",
    "start": "54800",
    "end": "61480"
  },
  {
    "text": "let's let's see if that just about Works uh okay um so uh I'm going to try",
    "start": "61480",
    "end": "71840"
  },
  {
    "text": "to avoid doing anything technical whil nonetheless live hacking uh that's going",
    "start": "71840",
    "end": "77159"
  },
  {
    "text": "to be tricky actually didn't really think this through on the plane and uh",
    "start": "77159",
    "end": "82560"
  },
  {
    "text": "uh mostly uh I I want to sort of think about the kinds of arguments that we try",
    "start": "82560",
    "end": "89720"
  },
  {
    "text": "not not to get into on the internet uh or otherwise can't avoid see",
    "start": "89720",
    "end": "95439"
  },
  {
    "text": "I'm a second generation functional programmer uh my father uh in the late",
    "start": "95439",
    "end": "101960"
  },
  {
    "text": "1960s added this peculiar feature called pattern matching to a funny language",
    "start": "101960",
    "end": "107479"
  },
  {
    "text": "known as lisp and uh started writing",
    "start": "107479",
    "end": "112560"
  },
  {
    "text": "quite kind of recognizably modern functional programs with no types whatsoever in the late 1960s",
    "start": "112560",
    "end": "120640"
  },
  {
    "text": "uh the first serious example was um was a symbolic",
    "start": "120640",
    "end": "126000"
  },
  {
    "text": "differentiation uh written as a pattern matching program which of course it is",
    "start": "126000",
    "end": "131400"
  },
  {
    "text": "uh and so you can see uh uh you know that's how I came to learn Lambda calculus and differential calculus at",
    "start": "131400",
    "end": "137480"
  },
  {
    "text": "the same time and far too early in age uh and it sort of you know made a basically a mess of my entire life uh",
    "start": "137480",
    "end": "146560"
  },
  {
    "text": "but uh uh so you can see",
    "start": "146560",
    "end": "151720"
  },
  {
    "text": "that joining the side of the ultra Ultra Ultra typed people was nothing other",
    "start": "151720",
    "end": "158840"
  },
  {
    "text": "than a kind of Act of edle Rage but what I want to spend the next",
    "start": "158840",
    "end": "165280"
  },
  {
    "text": "hour doing is trying to convince you that it's more than that uh so you know let's let's see",
    "start": "165280",
    "end": "172680"
  },
  {
    "text": "let's see what we can do because really in fundamental ways the kinds of things",
    "start": "172680",
    "end": "179560"
  },
  {
    "text": "that people say about types when they're attacking them or",
    "start": "179560",
    "end": "185480"
  },
  {
    "text": "even more worryingly when we're defending them do",
    "start": "185480",
    "end": "191560"
  },
  {
    "text": "not connect with the ways in which types affect my life in the 21st century we're",
    "start": "191560",
    "end": "200360"
  },
  {
    "text": "having the wrong fight we're having the old fight and I want to view to have a",
    "start": "200360",
    "end": "207400"
  },
  {
    "text": "look at a few other things sort of IDE that have come with us from the 70s and",
    "start": "207400",
    "end": "212480"
  },
  {
    "text": "80s that are still affecting the way we fail to think about typed",
    "start": "212480",
    "end": "218640"
  },
  {
    "text": "programming so it's uh it's confession time as you can see this I'm going to",
    "start": "218640",
    "end": "224439"
  },
  {
    "text": "start in has scho uh and this um this is the beginning of an actual uh",
    "start": "224439",
    "end": "231720"
  },
  {
    "text": "High scho program and I'm just going to try to to warm up by remembering High to",
    "start": "231720",
    "end": "238319"
  },
  {
    "text": "write programs uh so yes what have we",
    "start": "238319",
    "end": "245120"
  },
  {
    "text": "um this is the the the the parser monad I can remember how to implement because",
    "start": "245120",
    "end": "251319"
  },
  {
    "text": "of that lovely rhyme I think it was Fritz Ru uh a a parser for things is a",
    "start": "251319",
    "end": "257720"
  },
  {
    "text": "function from strings to lists of pairs of things and strings so uh um uh if you",
    "start": "257720",
    "end": "265080"
  },
  {
    "text": "can remember that uh you're you're winning uh let's",
    "start": "265080",
    "end": "270520"
  },
  {
    "text": "let's Implement its uh monad instance so this is just a warmup right",
    "start": "270520",
    "end": "278400"
  },
  {
    "text": "we get an input and we're going to succeed without consuming any of the",
    "start": "278400",
    "end": "283720"
  },
  {
    "text": "input and uh and giving back the X we first thought of otherwise we'll have some",
    "start": "283720",
    "end": "291160"
  },
  {
    "text": "kind of parser for a and some sort of",
    "start": "291160",
    "end": "296639"
  },
  {
    "text": "continuation and we get a parser which which takes an S and then everything",
    "start": "296639",
    "end": "302199"
  },
  {
    "text": "else happens in the list monad at least it does when I write it",
    "start": "302199",
    "end": "308680"
  },
  {
    "text": "and uh we apply the first note I'm I'm always on for uh gratuitous use of",
    "start": "308680",
    "end": "315840"
  },
  {
    "text": "shadowing to make sure uh I don't use the wrong s",
    "start": "315840",
    "end": "324800"
  },
  {
    "text": "uh uh so something like that do we believe that well did type checks which",
    "start": "326039",
    "end": "333560"
  },
  {
    "text": "it didn't a moment ago uh and it's gone back to giving me the split screen in",
    "start": "333560",
    "end": "338840"
  },
  {
    "text": "the wrong way let me just do some emac intimidation we go narrow we say",
    "start": "338840",
    "end": "345400"
  },
  {
    "text": "load then we go wide right oh I shouldn't give too much",
    "start": "345400",
    "end": "352280"
  },
  {
    "text": "away um right so what's going on uh so I wrote this program I could of course if",
    "start": "352280",
    "end": "359080"
  },
  {
    "text": "I'd remember remembered that this is just the state monad Transformer applied to the list monad have written rather",
    "start": "359080",
    "end": "365560"
  },
  {
    "text": "less uh but uh the uh the other thing",
    "start": "365560",
    "end": "370960"
  },
  {
    "text": "that uh that I've done uh is um uh I stuck a thing here deriving",
    "start": "370960",
    "end": "382440"
  },
  {
    "text": "monoid now what does that do for us it says parsers ought to be we want",
    "start": "382599",
    "end": "389639"
  },
  {
    "text": "we want parsers to be am monoid right we want them to have a notion of failure",
    "start": "389639",
    "end": "395120"
  },
  {
    "text": "and a notion of prioritized choice and I'm saying well you know just uh just",
    "start": "395120",
    "end": "401160"
  },
  {
    "text": "get get that from the",
    "start": "401160",
    "end": "406680"
  },
  {
    "text": "types so uh what are the types saying are they",
    "start": "406680",
    "end": "413599"
  },
  {
    "text": "saying no they're saying no they're not they're",
    "start": "413599",
    "end": "418840"
  },
  {
    "text": "saying here is your monoid is it the right",
    "start": "418840",
    "end": "424720"
  },
  {
    "text": "monoid well what monoid Behavior will we get we'll",
    "start": "424800",
    "end": "431160"
  },
  {
    "text": "get pointwise lifting over strings and then we'll get",
    "start": "431160",
    "end": "437720"
  },
  {
    "text": "concatenation of the lists of successes so that is the right monoid",
    "start": "437720",
    "end": "443960"
  },
  {
    "text": "good because we think of lists not just as being some kind of data structure",
    "start": "443960",
    "end": "451199"
  },
  {
    "text": "made out of con cells and pointer chains and stuff like that but we uh we think",
    "start": "451199",
    "end": "457680"
  },
  {
    "text": "of lists in this context also especially when you start writing this sort of do",
    "start": "457680",
    "end": "463960"
  },
  {
    "text": "here as some sort of prioritized Choice effect and the monoid structure for",
    "start": "463960",
    "end": "470960"
  },
  {
    "text": "prioritized choice is what gets bundled up with the type of lists so here's a",
    "start": "470960",
    "end": "477000"
  },
  {
    "text": "message I'm not in the I don't run the mathematic structured programming group in Strath Clyde for nothing you know um",
    "start": "477000",
    "end": "484759"
  },
  {
    "text": "you know that these types we write down they're not just names for data representations in memory they are tags",
    "start": "484759",
    "end": "491639"
  },
  {
    "text": "that cue in mathematical structures that we exploit so let's do it so",
    "start": "491639",
    "end": "499720"
  },
  {
    "text": "correspondingly now when I want to sort of weaponize that by making P an instance of",
    "start": "499720",
    "end": "507599"
  },
  {
    "text": "alternative uh then just say oh just give me the monoid you gave me",
    "start": "507599",
    "end": "513640"
  },
  {
    "text": "earlier uh and that that works uh just fine at this",
    "start": "513640",
    "end": "521159"
  },
  {
    "text": "point uh I could uh I could digress into a rant",
    "start": "521159",
    "end": "528120"
  },
  {
    "text": "about how if I put maybe here instead of list I would not get my intended",
    "start": "528120",
    "end": "533760"
  },
  {
    "text": "Behavior but I will not digress into that rant you can look it up in a about",
    "start": "533760",
    "end": "539720"
  },
  {
    "text": "10 different places on the internet over the last 10 years",
    "start": "539720",
    "end": "545360"
  },
  {
    "text": "so so uh you know but uh uh yeah let me",
    "start": "545360",
    "end": "550920"
  },
  {
    "text": "let me move on let me also note that um",
    "start": "550920",
    "end": "556279"
  },
  {
    "text": "you don't see a uh an applicative instance that corresponds to this manad",
    "start": "556279",
    "end": "562480"
  },
  {
    "text": "yet this alternative instance compiles just",
    "start": "562480",
    "end": "568040"
  },
  {
    "text": "fine that is because I'm not using the same version of Haskell as",
    "start": "568040",
    "end": "574120"
  },
  {
    "text": "you okay uh let's see if we can remember",
    "start": "575480",
    "end": "581440"
  },
  {
    "text": "how to define a parser which eats a a character but only",
    "start": "581440",
    "end": "589839"
  },
  {
    "text": "if it likes it yes uh giving the game away far too early yes this is one we",
    "start": "589839",
    "end": "596519"
  },
  {
    "text": "have to to do by hand what do we do say case s",
    "start": "596519",
    "end": "602000"
  },
  {
    "text": "of Cs with PC goes",
    "start": "602000",
    "end": "608160"
  },
  {
    "text": "to uh what do we say that I think yes does that ring a",
    "start": "608160",
    "end": "614800"
  },
  {
    "text": "bell anything else we say nothing does that type check no what have I done",
    "start": "614800",
    "end": "620399"
  },
  {
    "text": "wrong give us a hand uh yes that's um one of them",
    "start": "620399",
    "end": "631000"
  },
  {
    "text": "um it's great to have so many marvelous helpers in the audience I'm going to need you um okay uh and now um You can",
    "start": "631000",
    "end": "641360"
  },
  {
    "text": "tell what's going to uh what's going to happen here what's going to happen later",
    "start": "641360",
    "end": "646839"
  },
  {
    "text": "I want to write a parser which uh produces a maybe",
    "start": "646839",
    "end": "652120"
  },
  {
    "text": "int uh given a single digit input um uh or or",
    "start": "652120",
    "end": "660320"
  },
  {
    "text": "we should get just the the number and given a DOT we should get nothing and we",
    "start": "660320",
    "end": "666639"
  },
  {
    "text": "should be willing to absorb any amount of space up front so many eat is space",
    "start": "666639",
    "end": "674560"
  },
  {
    "text": "it's a good way to start and then I told you I wasn't using the same version of hascal as you",
    "start": "674560",
    "end": "681480"
  },
  {
    "text": "um so what do we need to do we say just uh well we're going to have to sort",
    "start": "681480",
    "end": "686959"
  },
  {
    "text": "of eat an is digit and then we're going to have to do something to that uh let me try to",
    "start": "686959",
    "end": "695160"
  },
  {
    "text": "remember what we do to that um oh yes that's what we do",
    "start": "695160",
    "end": "702399"
  },
  {
    "text": "um uh we cons it on to a funny looking",
    "start": "702399",
    "end": "707600"
  },
  {
    "text": "empty list right and then that gives us that gives us a",
    "start": "707600",
    "end": "712720"
  },
  {
    "text": "string which we can then read right that's one option option and",
    "start": "712720",
    "end": "720279"
  },
  {
    "text": "the other option is to say nothing but we have to",
    "start": "720279",
    "end": "725959"
  },
  {
    "text": "have the side effect of eating something which is equal to",
    "start": "725959",
    "end": "732120"
  },
  {
    "text": "Dot and that's our last option that good uh that's haskal at",
    "start": "732600",
    "end": "739000"
  },
  {
    "text": "least when I write haskal um and uh uh you know I mean you can read it",
    "start": "739000",
    "end": "745519"
  },
  {
    "text": "you just don't know why it works uh I I'm happy with that way around",
    "start": "745519",
    "end": "752440"
  },
  {
    "text": "um yes sorry uh the the these are of course uh idiom",
    "start": "752440",
    "end": "757880"
  },
  {
    "text": "brackets um so what's happening is um uh",
    "start": "757880",
    "end": "764760"
  },
  {
    "text": "applicative things applicative structured things like parsers are being put in argument positions and pure",
    "start": "764760",
    "end": "772040"
  },
  {
    "text": "things are being put in function positions and the right sort of thing",
    "start": "772040",
    "end": "779720"
  },
  {
    "text": "is happening let's just show that I tell",
    "start": "779720",
    "end": "784760"
  },
  {
    "text": "you no lies let's pass with many well at",
    "start": "784760",
    "end": "790880"
  },
  {
    "text": "least no I'm not going to promise to tell you no lies don't be silly",
    "start": "790880",
    "end": "796240"
  },
  {
    "text": "uh uh let's see what happens if we do that",
    "start": "796240",
    "end": "801760"
  },
  {
    "text": "yes we should get lots of different possible pares but at least one of them",
    "start": "801760",
    "end": "807720"
  },
  {
    "text": "is is sensible uh so uh",
    "start": "807720",
    "end": "813240"
  },
  {
    "text": "uh is anyone worrying that this is all a recording or am I being sufficiently",
    "start": "813240",
    "end": "819480"
  },
  {
    "text": "chaotic to convince you it's the genuine article uh good Okay so we've got that",
    "start": "819480",
    "end": "824600"
  },
  {
    "text": "that's that's some stuff so we got the alternative structure for free just by",
    "start": "824600",
    "end": "829720"
  },
  {
    "text": "grabbing well just for the price of the monoid uh and you know that just came",
    "start": "829720",
    "end": "836639"
  },
  {
    "text": "from building the thing that goes with uh the",
    "start": "836639",
    "end": "841759"
  },
  {
    "text": "types so yeah that's nice that's one way in which types are not just a punishment",
    "start": "841759",
    "end": "852279"
  },
  {
    "text": "for doing wrong things they are uh",
    "start": "852279",
    "end": "858560"
  },
  {
    "text": "active in writing programs for us so we don't have",
    "start": "858560",
    "end": "864079"
  },
  {
    "text": "to okay I think it's next slide time",
    "start": "864079",
    "end": "869279"
  },
  {
    "text": "right let's go nuts um I'm kind of fond of these things uh so I call this the",
    "start": "869279",
    "end": "877639"
  },
  {
    "text": "funter kit uh it's uh so you can use these to",
    "start": "877639",
    "end": "886440"
  },
  {
    "text": "build node structures that you then take recursive fix points of if you like they",
    "start": "886440",
    "end": "893440"
  },
  {
    "text": "they build polinomial container structure so let's see what we have so X always stands for element or possibly",
    "start": "893440",
    "end": "904120"
  },
  {
    "text": "substructure so we've got the identity fun that just packs up an",
    "start": "904120",
    "end": "909600"
  },
  {
    "text": "element we've got the constant functor which doesn't pack up any",
    "start": "909600",
    "end": "916279"
  },
  {
    "text": "elements instead it some pack it packs up some some value of",
    "start": "916279",
    "end": "921880"
  },
  {
    "text": "a um no matter what the official element type might be and then we have closure",
    "start": "921880",
    "end": "930160"
  },
  {
    "text": "under pairing and choice and",
    "start": "930160",
    "end": "935759"
  },
  {
    "text": "composition so we can build stuff from",
    "start": "935759",
    "end": "940800"
  },
  {
    "text": "that uh and almost certainly that happens on the next slide I want to",
    "start": "940800",
    "end": "946079"
  },
  {
    "text": "point out there are lots and lots of properties these things have so in",
    "start": "946079",
    "end": "953040"
  },
  {
    "text": "particular uh the identity uh functor is",
    "start": "953040",
    "end": "958160"
  },
  {
    "text": "applicative because it just wraps up ordinary values so uh the pure just wraps the uh the the",
    "start": "958160",
    "end": "968759"
  },
  {
    "text": "F the application uh is just ordinary",
    "start": "968759",
    "end": "974720"
  },
  {
    "text": "application uh then applicative structure so the ability to S of send in",
    "start": "974720",
    "end": "980160"
  },
  {
    "text": "a value am I okay just assuming that people know what applicatives are by the",
    "start": "980160",
    "end": "985959"
  },
  {
    "text": "way sh if you're not I kind of get get casual about that um yeah uh so yeah so",
    "start": "985959",
    "end": "994519"
  },
  {
    "text": "if we've got a pair if we're making a pair of applicatives we can just do a pair of pures and a pair of",
    "start": "994519",
    "end": "1002360"
  },
  {
    "text": "applications and uh if we're",
    "start": "1002360",
    "end": "1008199"
  },
  {
    "text": "doing uh the um if we if we're composing applicatives so it's nice applicatives",
    "start": "1008199",
    "end": "1014399"
  },
  {
    "text": "compose monads don't uh then we just",
    "start": "1014399",
    "end": "1020040"
  },
  {
    "text": "uh lift uh the inner applicatives operations to the outer applicative and",
    "start": "1020040",
    "end": "1027240"
  },
  {
    "text": "idian brackets are a nice way of doing that what else do we have we have that",
    "start": "1027240",
    "end": "1036079"
  },
  {
    "text": "the constant functor is applicative in a rather sneaky way if the labelly type is",
    "start": "1036079",
    "end": "1042959"
  },
  {
    "text": "monoidal because uh so here remember when we're using the con a constant",
    "start": "1042959",
    "end": "1048919"
  },
  {
    "text": "funter the actual element type it's applied to never shows up we're not actually talking about functions and",
    "start": "1048919",
    "end": "1056160"
  },
  {
    "text": "their arguments at all we're just talking about things which live in this",
    "start": "1056160",
    "end": "1062000"
  },
  {
    "text": "monoid um so that's a a rather handy one there are also yes uh that's a good clue",
    "start": "1062000",
    "end": "1070320"
  },
  {
    "text": "to stop here so this is so we have got got a bunch of data structure building",
    "start": "1070320",
    "end": "1077600"
  },
  {
    "text": "tools and a bunch of mathematical closure properties for",
    "start": "1077600",
    "end": "1083000"
  },
  {
    "text": "them and then the object of the exercise is to spend less time writing",
    "start": "1083000",
    "end": "1092039"
  },
  {
    "text": "programs um so yes",
    "start": "1092039",
    "end": "1098039"
  },
  {
    "text": "uh so here's uh here's a type notice I'm",
    "start": "1098039",
    "end": "1103559"
  },
  {
    "text": "very carefully making use of the fact that",
    "start": "1103559",
    "end": "1109600"
  },
  {
    "text": "uh a type synonym does not have to be at kind star I'm making a synonym for a",
    "start": "1109600",
    "end": "1117280"
  },
  {
    "text": "type operator and it's the operator that's built from using pairing twice to glom",
    "start": "1117280",
    "end": "1125640"
  },
  {
    "text": "together uh three values three elements from the",
    "start": "1125640",
    "end": "1131600"
  },
  {
    "text": "identity uh uh identity funter let me um let me just yes apologize",
    "start": "1131600",
    "end": "1139280"
  },
  {
    "text": "for my one of my favorite perversities is defining infix operators with three",
    "start": "1139280",
    "end": "1146600"
  },
  {
    "text": "arguments uh I just I can't stop I'm addicted to it and but then using them",
    "start": "1146600",
    "end": "1152440"
  },
  {
    "text": "as infix operators at higher type or I kind um terrible habit um so yes so if you",
    "start": "1152440",
    "end": "1160640"
  },
  {
    "text": "want to write well we uh these things uh the only annoying thing is",
    "start": "1160640",
    "end": "1166720"
  },
  {
    "text": "that to make a triple it's going to be something like I a paired with",
    "start": "1166720",
    "end": "1173799"
  },
  {
    "text": "i that sort of thing there's a lot of clutter so I can do that yeah it's fine",
    "start": "1173799",
    "end": "1181400"
  },
  {
    "text": "but um so what it's nice to be able to do is to say if we have a pattern we can just",
    "start": "1181400",
    "end": "1187360"
  },
  {
    "text": "make a a pattern synonym",
    "start": "1187360",
    "end": "1193120"
  },
  {
    "text": "um so this is this is the main reason I use pattern synonyms and I'm really glad",
    "start": "1195320",
    "end": "1200919"
  },
  {
    "text": "they've been added to GHC uh that when you use these kind of",
    "start": "1200919",
    "end": "1208400"
  },
  {
    "text": "uh re these functor components to build up data structures uh you get lots of generic",
    "start": "1208400",
    "end": "1215520"
  },
  {
    "text": "programs for free because you've built them out of components that have ludicrous closure properties but your",
    "start": "1215520",
    "end": "1222720"
  },
  {
    "text": "spoke programs look awful because you see everywhere all of",
    "start": "1222720",
    "end": "1227880"
  },
  {
    "text": "the artifacts of the encoding so the trick is to define a",
    "start": "1227880",
    "end": "1235200"
  },
  {
    "text": "bunch of pattern synonyms that make the encoded type look just like the type you would have defined anyway uh and uh and",
    "start": "1235200",
    "end": "1244360"
  },
  {
    "text": "then you can have the best of both worlds so let's see",
    "start": "1244360",
    "end": "1252960"
  },
  {
    "text": "um uh so here's uh oh no I didn't want to do that I can see oh that's that's",
    "start": "1252960",
    "end": "1259840"
  },
  {
    "text": "that's a bridge too far I always waiting to see whether I",
    "start": "1259840",
    "end": "1266480"
  },
  {
    "text": "would notice that so was I and uh uh right uh so let's sort of see the kind",
    "start": "1266480",
    "end": "1273440"
  },
  {
    "text": "of things we can do um so yes um I can immediately write down a type of zones",
    "start": "1273440",
    "end": "1280360"
  },
  {
    "text": "and a Zone because I'm heading in the Sudoku direction is a triple of triples uh and then what sort of stuff",
    "start": "1280360",
    "end": "1287960"
  },
  {
    "text": "can we do let's let's define a Zone as with a zad of character",
    "start": "1287960",
    "end": "1295919"
  },
  {
    "text": "so uh so Zone that's going to be we got to stick",
    "start": "1295919",
    "end": "1301480"
  },
  {
    "text": "a composition on the out side but then it's a triple of let's have a b",
    "start": "1301480",
    "end": "1309200"
  },
  {
    "text": "c and then let's do",
    "start": "1309200",
    "end": "1314880"
  },
  {
    "text": "that something like that I'm missing some quote marks aren't I",
    "start": "1316520",
    "end": "1324240"
  },
  {
    "text": "thank goodness for syntax highlighting and a parenthesis is that a",
    "start": "1324240",
    "end": "1329880"
  },
  {
    "text": "Zone good that's a Zone uh okay I can even print out a",
    "start": "1329880",
    "end": "1337159"
  },
  {
    "text": "Zone uh and if I do c compos sequence a",
    "start": "1337159",
    "end": "1345440"
  },
  {
    "text": "compose UNC and apply that to that",
    "start": "1345440",
    "end": "1350640"
  },
  {
    "text": "zone I get the transposed",
    "start": "1350640",
    "end": "1356919"
  },
  {
    "text": "Zone um why is that uh",
    "start": "1356919",
    "end": "1363039"
  },
  {
    "text": "because all of the uh functors in the functor kit are closed under",
    "start": "1363039",
    "end": "1369480"
  },
  {
    "text": "traversability and identity and product are closed",
    "start": "1369480",
    "end": "1376480"
  },
  {
    "text": "under being applic and sequence a pulls any applicative out",
    "start": "1376480",
    "end": "1384919"
  },
  {
    "text": "through any traversable so in this case the inner Tri the inner triple is the",
    "start": "1384919",
    "end": "1392080"
  },
  {
    "text": "applicative the outer uh triple is the traversible and pulling one out through",
    "start": "1392080",
    "end": "1398279"
  },
  {
    "text": "the other happens to do transposition but you know all I wrote",
    "start": "1398279",
    "end": "1404520"
  },
  {
    "text": "down was sequence a okay plus a bit of new type Plumbing that I'm about to get",
    "start": "1404520",
    "end": "1411720"
  },
  {
    "text": "rid of do you remember who's seen the old Taran movies",
    "start": "1411720",
    "end": "1417760"
  },
  {
    "text": "starring Johnny Vice Müller yeah the thing about Johnny Vice Müller was that he was an Olympic Swim",
    "start": "1417760",
    "end": "1426760"
  },
  {
    "text": "Champion not an actor um and uh yeah fortunately for him his",
    "start": "1426760",
    "end": "1435840"
  },
  {
    "text": "scenes did not require a great deal of action AC in quite a lot of swimming he",
    "start": "1435840",
    "end": "1441880"
  },
  {
    "text": "he adapted to a new found requirement to swing um and uh uh but the other thing",
    "start": "1441880",
    "end": "1450720"
  },
  {
    "text": "that he relied on the every plot of such a movie relied on the fact that Tarzan",
    "start": "1450720",
    "end": "1457559"
  },
  {
    "text": "was friends with all the animals in the jungle and when the plot demanded it an",
    "start": "1457559",
    "end": "1463440"
  },
  {
    "text": "animal who was a friend of Tarzan would perform some complicated task that would",
    "start": "1463440",
    "end": "1468960"
  },
  {
    "text": "save the day you typically an elephant would do something clever with a trunk or a I don't know uh the point is",
    "start": "1468960",
    "end": "1478080"
  },
  {
    "text": "this how did Johnny Vice Miller communicate to the animals which complicated task they should",
    "start": "1478080",
    "end": "1486640"
  },
  {
    "text": "perform he would always just use the single word angwa regardless of what the task",
    "start": "1486640",
    "end": "1496000"
  },
  {
    "text": "was and then the animal would do would ever it had been trained to",
    "start": "1496000",
    "end": "1501440"
  },
  {
    "text": "do sequence a is kind of haskal for",
    "start": "1501440",
    "end": "1508398"
  },
  {
    "text": "angwa okay let's have a bit more of that as we like it only you know let's build ourselves some Modern",
    "start": "1511760",
    "end": "1519760"
  },
  {
    "text": "conveniences uh this there is a a new type Library uh somewhere um I thought I'd",
    "start": "1519760",
    "end": "1527880"
  },
  {
    "text": "just cook it up again and I thought I'd try doing it with um uh with type",
    "start": "1527880",
    "end": "1533679"
  },
  {
    "text": "families instead of functional dependencies uh for a laugh this ought to be for free anytime you declare a new",
    "start": "1533679",
    "end": "1540559"
  },
  {
    "text": "type there ought to be something which sort of registers that you've introduced a new type which is a synonym for some",
    "start": "1540559",
    "end": "1547399"
  },
  {
    "text": "old type so that's the idea here you register a new type with the class new",
    "start": "1547399",
    "end": "1552480"
  },
  {
    "text": "type and you have a an Associated type family that tells you what the old one was and and then you can do various nice",
    "start": "1552480",
    "end": "1560200"
  },
  {
    "text": "things so in particular you give a pack and an unpack of course Nothing Stops",
    "start": "1560200",
    "end": "1565480"
  },
  {
    "text": "you using this for things which aren't new types but you know bad form and all that and then you can do some kind of uh",
    "start": "1565480",
    "end": "1574480"
  },
  {
    "text": "wacky stuff uh like this uh where if you've",
    "start": "1574480",
    "end": "1581720"
  },
  {
    "text": "got uh an operation that actually works on the old types you can make it work",
    "start": "1581720",
    "end": "1589559"
  },
  {
    "text": "uh on the new types by unpacking in the nick of time doing the operation then",
    "start": "1589559",
    "end": "1594880"
  },
  {
    "text": "packing up again before anybody notices so for example we could say",
    "start": "1594880",
    "end": "1603880"
  },
  {
    "text": "newly sequence a Zone and then we'll get",
    "start": "1603880",
    "end": "1609279"
  },
  {
    "text": "a hilarious type error um if we say newly sequence a Zone",
    "start": "1609279",
    "end": "1616600"
  },
  {
    "text": "and I would like a Zone back back then something goes wrong what have I",
    "start": "1616600",
    "end": "1622159"
  },
  {
    "text": "done um um oh because it was a zone of",
    "start": "1622159",
    "end": "1627240"
  },
  {
    "text": "characters sorry uh then that works nicely uh and it's kind of fair enough",
    "start": "1627240",
    "end": "1634960"
  },
  {
    "text": "uh because if we didn't tell it what type we actually wanted then it wouldn't be able to figure out which particular",
    "start": "1634960",
    "end": "1640000"
  },
  {
    "text": "Traverse to do um and so what we're paying for by putting the type in is not",
    "start": "1640000",
    "end": "1647919"
  },
  {
    "text": "right ing the program now people who are always terribly Keen to insist on retaining",
    "start": "1647919",
    "end": "1654480"
  },
  {
    "text": "type inference should pay attention to the other possibilities which exist you",
    "start": "1654480",
    "end": "1661600"
  },
  {
    "text": "know that you might deliberately write types in order not to write code you know program inference Trump's type",
    "start": "1661600",
    "end": "1669519"
  },
  {
    "text": "inference says I um uh here's another slightly more Coco",
    "start": "1669519",
    "end": "1677720"
  },
  {
    "text": "Gadget uh with the correct order of arguments",
    "start": "1677720",
    "end": "1682760"
  },
  {
    "text": "for its proper infix style of usage what do we do uh because uh obviously",
    "start": "1682760",
    "end": "1689679"
  },
  {
    "text": "everybody likes a a third order function on a Thursday morning um so um so what",
    "start": "1689679",
    "end": "1697399"
  },
  {
    "text": "we we start with some higher order function um and this time the higher",
    "start": "1697399",
    "end": "1703679"
  },
  {
    "text": "order function actually trades crucially in the new",
    "start": "1703679",
    "end": "1708880"
  },
  {
    "text": "types but we want to use it on the old",
    "start": "1708880",
    "end": "1714200"
  },
  {
    "text": "types that's the situation that's to say there's some new type structure that we want to introduce",
    "start": "1714200",
    "end": "1721760"
  },
  {
    "text": "temporarily uh in order to get a job done sorry so we have this completely",
    "start": "1721760",
    "end": "1730159"
  },
  {
    "text": "spurious extra argument whose type is old B to B that's the type of",
    "start": "1730159",
    "end": "1735880"
  },
  {
    "text": "pack and we completely ignore this argument its only purpose is to tell the",
    "start": "1735880",
    "end": "1743000"
  },
  {
    "text": "type Checker and actually these days any day now there will be a release of GHC",
    "start": "1743000",
    "end": "1749399"
  },
  {
    "text": "which just allows you to give a type explicitly as an argument to a function",
    "start": "1749399",
    "end": "1755039"
  },
  {
    "text": "has this happened if it hasn't happened yet it's about to um yeah so because we've got this",
    "start": "1755039",
    "end": "1763120"
  },
  {
    "text": "sort of I'll come back to this later have you ever noticed that whenever you",
    "start": "1763120",
    "end": "1768880"
  },
  {
    "text": "want to tell GHC a type in the middle of a program like like how you are",
    "start": "1768880",
    "end": "1775240"
  },
  {
    "text": "instantiating some polymorphic function you can't even if you know what the type is",
    "start": "1775240",
    "end": "1782559"
  },
  {
    "text": "that you want it's like there's a little Simon inside the machine saying no no no I",
    "start": "1782559",
    "end": "1788600"
  },
  {
    "text": "have to guess and",
    "start": "1788600",
    "end": "1792360"
  },
  {
    "text": "uh but I'll tell you Simon I'll tell you",
    "start": "1794880",
    "end": "1800039"
  },
  {
    "text": "so uh so uh yeah so I'm glad we we're finally we've he's finally letting us",
    "start": "1801720",
    "end": "1808039"
  },
  {
    "text": "tell him the answer sometimes he's not doing it all with with constraint solving so this is a cheap trick from",
    "start": "1808039",
    "end": "1814360"
  },
  {
    "text": "the old days of just somehow telling the thing the",
    "start": "1814360",
    "end": "1819640"
  },
  {
    "text": "answer um so uh what can you do with with",
    "start": "1819640",
    "end": "1826559"
  },
  {
    "text": "Allah uh but it's it's designed in particular for use with",
    "start": "1826559",
    "end": "1834120"
  },
  {
    "text": "Traverse and uh for uh for use in infix mode with",
    "start": "1834120",
    "end": "1840760"
  },
  {
    "text": "a nice grav accent over the final a and um yes so for",
    "start": "1840760",
    "end": "1847279"
  },
  {
    "text": "example if we uh Traverse r",
    "start": "1847279",
    "end": "1854639"
  },
  {
    "text": "i let's say plus one of n to five uh then so Traverse using the",
    "start": "1854639",
    "end": "1863559"
  },
  {
    "text": "identity applicative is otherwise known as",
    "start": "1863559",
    "end": "1867760"
  },
  {
    "text": "map um meanwhile I",
    "start": "1868880",
    "end": "1874639"
  },
  {
    "text": "can Traverse allaha the identity allaha the",
    "start": "1874639",
    "end": "1881360"
  },
  {
    "text": "constant um uh applicative and then I have to say Allah adding up uh",
    "start": "1881360",
    "end": "1891679"
  },
  {
    "text": "monoid what you get when you add one to all of these things and we get 21 which is the sum of",
    "start": "1891679",
    "end": "1899840"
  },
  {
    "text": "the numbers from one to six um uh so uh",
    "start": "1899840",
    "end": "1905720"
  },
  {
    "text": "it's sort of look I'm giving you a bit of a clue",
    "start": "1905720",
    "end": "1911760"
  },
  {
    "text": "what the applicative structure that's going on in you know inside the operation I",
    "start": "1911760",
    "end": "1918200"
  },
  {
    "text": "want to do across this data structure you sort it out uh it's uh so the thing so",
    "start": "1918200",
    "end": "1927120"
  },
  {
    "text": "um so traversal I is is otherwise known as fmap",
    "start": "1927120",
    "end": "1933519"
  },
  {
    "text": "default uh Traverse alak K is otherwise known as fold map default and then fold",
    "start": "1933519",
    "end": "1940519"
  },
  {
    "text": "map alasam or fold map Al product are all of these things uh lots of lots of",
    "start": "1940519",
    "end": "1947320"
  },
  {
    "text": "very useful operations which all have individual names in the has",
    "start": "1947320",
    "end": "1952399"
  },
  {
    "text": "Library uh are um uh uh are sort of",
    "start": "1952399",
    "end": "1958519"
  },
  {
    "text": "straightforward instances of this thing uh so if you really really want to start",
    "start": "1958519",
    "end": "1964159"
  },
  {
    "text": "massive war uh then propose to enforce the fair",
    "start": "1964159",
    "end": "1970120"
  },
  {
    "text": "baren threshold and delete from the library all operations which can be coded up using",
    "start": "1970120",
    "end": "1978159"
  },
  {
    "text": "Traverse ala uh in uh you know in under 30",
    "start": "1978159",
    "end": "1983840"
  },
  {
    "text": "characters and and and you know see uh see how long",
    "start": "1983840",
    "end": "1991039"
  },
  {
    "text": "your teeth last see on my teeth",
    "start": "1991039",
    "end": "1998200"
  },
  {
    "text": "last okay so um so okay I was heading in the",
    "start": "1998200",
    "end": "2004559"
  },
  {
    "text": "direction of Sudoku I'm about halfway through that's roughly where I want to be",
    "start": "2004559",
    "end": "2009919"
  },
  {
    "text": "um uh I managed to get uh just enough",
    "start": "2009919",
    "end": "2016080"
  },
  {
    "text": "um uh just enough free Wi-Fi of Emirates uh to rip off this genuine evil sidoku",
    "start": "2016080",
    "end": "2023639"
  },
  {
    "text": "problem from webs sudoku.com and uh and then of course I had to spend",
    "start": "2023639",
    "end": "2029480"
  },
  {
    "text": "the next 20 minutes solving it because I'm a bit Rusty uh I don't want to solve",
    "start": "2029480",
    "end": "2035519"
  },
  {
    "text": "Sudoku just now I do at least want to parse the",
    "start": "2035519",
    "end": "2040799"
  },
  {
    "text": "board um so let's figure out how to do",
    "start": "2040840",
    "end": "2047159"
  },
  {
    "text": "that um well so what we want is a parer for a",
    "start": "2047159",
    "end": "2054839"
  },
  {
    "text": "board but you know not quite sure how to get that I'll settle for what I can",
    "start": "2054839",
    "end": "2060760"
  },
  {
    "text": "get I know how to make a board full of",
    "start": "2060760",
    "end": "2066040"
  },
  {
    "text": "parsers didn't we call it P cell earlier I think",
    "start": "2066040",
    "end": "2072440"
  },
  {
    "text": "we did I'll find out it'll tell me what I've got done wrong when I load the",
    "start": "2072440",
    "end": "2079440"
  },
  {
    "text": "file let's see good it's heard of P",
    "start": "2079440",
    "end": "2085720"
  },
  {
    "text": "cell but it has noticed the type error",
    "start": "2085720",
    "end": "2091200"
  },
  {
    "text": "because um so pure P cell would make is P cell is a P of cell and then pure of",
    "start": "2092639",
    "end": "2100280"
  },
  {
    "text": "this would for example give us a board of P of cell but we",
    "start": "2100280",
    "end": "2107320"
  },
  {
    "text": "want uh a PE of Bor of cell any suggestions I think I just",
    "start": "2107320",
    "end": "2114200"
  },
  {
    "text": "heard it sequence a",
    "start": "2114200",
    "end": "2121119"
  },
  {
    "text": "so and u so uh let's uh let's do",
    "start": "2124079",
    "end": "2133000"
  },
  {
    "text": "that uh let's see bit of a mess but still we can see what have we got um uh",
    "start": "2135000",
    "end": "2145280"
  },
  {
    "text": "nothing nothing nothing two three nothing blahy blah compared with nothing",
    "start": "2145280",
    "end": "2152240"
  },
  {
    "text": "nothing nothing two three nothing and so on um uh so uh yes and then we decide",
    "start": "2152240",
    "end": "2161440"
  },
  {
    "text": "that because you know Sudoku is full of lots of symmetry um we want to say Let Let me",
    "start": "2161440",
    "end": "2171240"
  },
  {
    "text": "just grab the actual board and then I can say uh",
    "start": "2171240",
    "end": "2177319"
  },
  {
    "text": "newly sequence a b Li in board",
    "start": "2177319",
    "end": "2183560"
  },
  {
    "text": "cell and now we should have",
    "start": "2183560",
    "end": "2189560"
  },
  {
    "text": "the the transposed board that starts nothing one nothing five and and so",
    "start": "2189800",
    "end": "2197520"
  },
  {
    "text": "on uh so um same program modulo a small amount of typew",
    "start": "2197520",
    "end": "2207400"
  },
  {
    "text": "wrapping um it's kind of clear",
    "start": "2207400",
    "end": "2213599"
  },
  {
    "text": "that there are parts of the program which are not being being directly written by",
    "start": "2213599",
    "end": "2221440"
  },
  {
    "text": "me and that's where I'm trying to get to",
    "start": "2221440",
    "end": "2226760"
  },
  {
    "text": "so we've reached the Middle where I will",
    "start": "2226760",
    "end": "2234800"
  },
  {
    "text": "uh stop fooling about and you know give give the you",
    "start": "2235520",
    "end": "2242000"
  },
  {
    "text": "know this sermon that you know if I could turn turn down the seat Comfort level at this point Point sorry sorry",
    "start": "2242000",
    "end": "2249839"
  },
  {
    "text": "too much Protestant childhood um right so what is Milner's coincidence",
    "start": "2249839",
    "end": "2257240"
  },
  {
    "text": "it's an astonishing piece of engineering which took a great deal of",
    "start": "2257240",
    "end": "2263640"
  },
  {
    "text": "very carefully thought out technology and it has had unintended and",
    "start": "2263640",
    "end": "2271640"
  },
  {
    "text": "profoundly appalling consequences um let's examine it",
    "start": "2271640",
    "end": "2278440"
  },
  {
    "text": "we are familiar with the distinction between terms and",
    "start": "2278440",
    "end": "2286119"
  },
  {
    "text": "types but um this is where I wish I could remember what I'd written on these slides",
    "start": "2286119",
    "end": "2292240"
  },
  {
    "text": "um Milner's coincidence allows us to line up the",
    "start": "2292240",
    "end": "2298119"
  },
  {
    "text": "distinction terms versus types with the distinction between the things we write",
    "start": "2298119",
    "end": "2304880"
  },
  {
    "text": "and the things we infer that was the kind of key thing about the type system",
    "start": "2304880",
    "end": "2310640"
  },
  {
    "text": "of standard ml you write the terms the types are",
    "start": "2310640",
    "end": "2315720"
  },
  {
    "text": "infered and you've got you know principal type inference for core",
    "start": "2315720",
    "end": "2321119"
  },
  {
    "text": "ML and you know that just became you know a cultural wonderful thing despite",
    "start": "2321119",
    "end": "2327560"
  },
  {
    "text": "the fact that it pretty quickly stopped happening I mean and we do write types I",
    "start": "2327560",
    "end": "2333400"
  },
  {
    "text": "mean sometimes we write types just because we are members of the Skype",
    "start": "2333400",
    "end": "2339200"
  },
  {
    "text": "movement uh but sometimes we write types because we forget things sometimes we have to write types to resolve ambiguity",
    "start": "2339200",
    "end": "2346920"
  },
  {
    "text": "sometimes we're willing to so tight class resolution perhaps sometimes we right types because polymorphic",
    "start": "2346920",
    "end": "2353200"
  },
  {
    "text": "recursion is just too much fun um uh but um uh you know there's there's clearly",
    "start": "2353200",
    "end": "2361560"
  },
  {
    "text": "there's clearly a limit to uh how clever uh uh a type system will let you be or I",
    "start": "2361560",
    "end": "2369440"
  },
  {
    "text": "mean you know essentially if you're not going to write types your type system has to be stupid enough that a computer",
    "start": "2369440",
    "end": "2375440"
  },
  {
    "text": "can do it and some people don't want to have a type system which is that stupid um because they don't want to be",
    "start": "2375440",
    "end": "2382440"
  },
  {
    "text": "restricted to being that stupid themselves um okay but we also now have",
    "start": "2382440",
    "end": "2389839"
  },
  {
    "text": "the situation that there are things which are not types that the compiler",
    "start": "2389839",
    "end": "2395760"
  },
  {
    "text": "infer for us so think about all of those all of that",
    "start": "2395760",
    "end": "2400880"
  },
  {
    "text": "heavyduty type class dictionary construction that you have just not seen",
    "start": "2400880",
    "end": "2407040"
  },
  {
    "text": "but yet you know received the benefit from right that's the com uh that's",
    "start": "2407040",
    "end": "2414640"
  },
  {
    "text": "inference happening for stuff that's not types so I'm not trying to say you know",
    "start": "2414640",
    "end": "2422960"
  },
  {
    "text": "writing more things for the sake of writing things is you know just virtuous we should not be you know good people",
    "start": "2422960",
    "end": "2429800"
  },
  {
    "text": "I'm trying to all I'm trying to say is that these distinctions do not in real",
    "start": "2429800",
    "end": "2436160"
  },
  {
    "text": "life line up they are both useful distinctions they're just not in the",
    "start": "2436160",
    "end": "2441520"
  },
  {
    "text": "same place here's another one which you may",
    "start": "2441520",
    "end": "2446720"
  },
  {
    "text": "suspect is rather similar to the second one things which are explicit versus",
    "start": "2446720",
    "end": "2453880"
  },
  {
    "text": "things which are invisible now there's a funny cultural",
    "start": "2453880",
    "end": "2459119"
  },
  {
    "text": "assumption that goes on there until fairly recently these",
    "start": "2459119",
    "end": "2464440"
  },
  {
    "text": "two did actually line up rather well why",
    "start": "2464440",
    "end": "2470400"
  },
  {
    "text": "because how could something be explicit except by you writing",
    "start": "2470400",
    "end": "2479119"
  },
  {
    "text": "it however these days Punch Cards have given way to",
    "start": "2479760",
    "end": "2489480"
  },
  {
    "text": "teletypes and it is possible to interact with a piece of computer technology on",
    "start": "2489480",
    "end": "2496960"
  },
  {
    "text": "you know a shorter feedback loop and indeed to get some things explicit in",
    "start": "2496960",
    "end": "2505839"
  },
  {
    "text": "your code which have not been written by you let's see more of that",
    "start": "2505839",
    "end": "2513800"
  },
  {
    "text": "later another key distinction that lines up with all of these is whether stuff is",
    "start": "2515800",
    "end": "2521359"
  },
  {
    "text": "around at runtime or whether it's erased by the compiler so typically the terms that we",
    "start": "2521359",
    "end": "2530560"
  },
  {
    "text": "have written uh are retained at runtime and then somehow types are inferred by the",
    "start": "2530560",
    "end": "2538640"
  },
  {
    "text": "compiler but then thrown away you can see how people get",
    "start": "2538640",
    "end": "2544440"
  },
  {
    "text": "frustrated with this that uh not only",
    "start": "2544440",
    "end": "2551160"
  },
  {
    "text": "uh yeah that they don't actually contribute to the runtime code these Dred types they just get made up for the",
    "start": "2551160",
    "end": "2559119"
  },
  {
    "text": "purpose of telling you off and then thrown away afterwards I mean who wouldn't moan",
    "start": "2559119",
    "end": "2565640"
  },
  {
    "text": "about that I but I mean this is this is such a such",
    "start": "2565640",
    "end": "2572760"
  },
  {
    "text": "a bad deal right um uh I mean there so if you think about",
    "start": "2572760",
    "end": "2579240"
  },
  {
    "text": "how we um uh how certain let's start just comparing this with the top one um",
    "start": "2579240",
    "end": "2587000"
  },
  {
    "text": "right so we now have things which uh which live at the type level",
    "start": "2587000",
    "end": "2594280"
  },
  {
    "text": "that are really term likee stuff I mean the she",
    "start": "2594280",
    "end": "2599559"
  },
  {
    "text": "preprocessor uh exactly hid a lot of the trickery that people were doing to say",
    "start": "2599559",
    "end": "2606599"
  },
  {
    "text": "well you know since we would like to have these data likee things at the type level and we've got to make them out of the stuff that's",
    "start": "2606599",
    "end": "2612800"
  },
  {
    "text": "at the type level already let's just get on and do the encoding and then um uh so",
    "start": "2612800",
    "end": "2620640"
  },
  {
    "text": "basically what happened was that I turned up at a hasal implementers workshop in 2009 the talks on the video",
    "start": "2620640",
    "end": "2627160"
  },
  {
    "text": "I'm not lying um uh and I said I have chosen the name for this pre-processor",
    "start": "2627160",
    "end": "2633240"
  },
  {
    "text": "so that I can make truly appalling jokes nonstop until you implement all the",
    "start": "2633240",
    "end": "2638839"
  },
  {
    "text": "features in this pre-processor and um and they took me seriously and they",
    "start": "2638839",
    "end": "2644200"
  },
  {
    "text": "implemented data kinds and pattern synonyms um we just",
    "start": "2644200",
    "end": "2649359"
  },
  {
    "text": "got to work on them for ADM brackets and few other bits and",
    "start": "2649359",
    "end": "2654760"
  },
  {
    "text": "pieces right meanwhile um Simon is doing is nut",
    "start": "2654880",
    "end": "2662720"
  },
  {
    "text": "trying to improve the quality of runtime representation of types so the holes of",
    "start": "2662720",
    "end": "2669359"
  },
  {
    "text": "data. typable Machinery is exactly about saying types aren't around at runtime so",
    "start": "2669359",
    "end": "2677160"
  },
  {
    "text": "we have to give you something else that is around at runtime that lives in the term language that stands for the",
    "start": "2677160",
    "end": "2683920"
  },
  {
    "text": "types and then try and arrange for like um equality testing on those runtime",
    "start": "2683920",
    "end": "2693240"
  },
  {
    "text": "simulacra uh equality testing and pattern matching somehow to deliver some useful impact on what the type system",
    "start": "2693240",
    "end": "2699680"
  },
  {
    "text": "knows about what your program is doing that's to say uh what's missing is",
    "start": "2699680",
    "end": "2706079"
  },
  {
    "text": "honest to goodness types at runtime uh you should uh yeah so because",
    "start": "2706079",
    "end": "2713040"
  },
  {
    "text": "you can't have them you have to make something that's a bit like them um so uh what I'm trying to say is that",
    "start": "2713040",
    "end": "2720960"
  },
  {
    "text": "this uh this presumption uh that uh that runtime",
    "start": "2720960",
    "end": "2727640"
  },
  {
    "text": "versus erasable lines up with uh with terms versus types is uh you know now",
    "start": "2727640",
    "end": "2736280"
  },
  {
    "text": "causing genuine pain and adding a great deal of",
    "start": "2736280",
    "end": "2741920"
  },
  {
    "text": "complexity to the way we do things unnecessary",
    "start": "2741920",
    "end": "2747200"
  },
  {
    "text": "complexity uh so yes that I just did that I claim that terms versus types and",
    "start": "2747240",
    "end": "2753319"
  },
  {
    "text": "runtime versus erasable are entirely orthogonal um what I want to do is just remove some",
    "start": "2753319",
    "end": "2761599"
  },
  {
    "text": "spaces there's a yes and I guess I also just wanted to say something about about",
    "start": "2761599",
    "end": "2768960"
  },
  {
    "text": "writing versus uh runtime erasability exactly",
    "start": "2768960",
    "end": "2774880"
  },
  {
    "text": "you've seen me writing types which are going to get",
    "start": "2774880",
    "end": "2780319"
  },
  {
    "text": "erased in order to get inferred runtime terms I mean",
    "start": "2780319",
    "end": "2787960"
  },
  {
    "text": "this is such a win right you know I'm perfectly happy to write simple high",
    "start": "2787960",
    "end": "2794079"
  },
  {
    "text": "level specifications that don't make it to runtime as long as the execution of my design is inferred for me and",
    "start": "2794079",
    "end": "2801160"
  },
  {
    "text": "executed I mean that you know that is such a win okay and the other",
    "start": "2801160",
    "end": "2807319"
  },
  {
    "text": "thing that we have that lines up with all of these is that we have",
    "start": "2807319",
    "end": "2813440"
  },
  {
    "text": "non-dependent abstraction for these things and explicit quantification over these",
    "start": "2813440",
    "end": "2821920"
  },
  {
    "text": "things and again that's that's just sheer",
    "start": "2821920",
    "end": "2827800"
  },
  {
    "text": "Prejudice uh you know serves serves no earthly purpose now I'm",
    "start": "2828640",
    "end": "2834520"
  },
  {
    "text": "not saying that I want to realign these things differently in",
    "start": "2834520",
    "end": "2840400"
  },
  {
    "text": "particular although I am in favor of types being permitted at runtime I do",
    "start": "2840400",
    "end": "2847160"
  },
  {
    "text": "not say that types should always be at runtime I would like to have a for all",
    "start": "2847160",
    "end": "2854040"
  },
  {
    "text": "that quantifies over types uh at compile time only uh that should say erase that are",
    "start": "2854040",
    "end": "2861480"
  },
  {
    "text": "erasable and a different quantifier which quantifies over uh",
    "start": "2861480",
    "end": "2866599"
  },
  {
    "text": "runtime uh types and one of those quantifiers will have a strong",
    "start": "2866599",
    "end": "2872079"
  },
  {
    "text": "parametricity property that I really don't want to lose and the other one won't",
    "start": "2872079",
    "end": "2878839"
  },
  {
    "text": "so uh that's the thing that Richard Eisenberg is not implementing because he's trying to",
    "start": "2880640",
    "end": "2886520"
  },
  {
    "text": "graduate or something Daft like that good luck to him no he he should",
    "start": "2886520",
    "end": "2894000"
  },
  {
    "text": "graduate uh I I I I thoroughly recommend that he graduates um",
    "start": "2894000",
    "end": "2900960"
  },
  {
    "text": "right um oh yes and I guess this is the Quee to get on with it um yes uh well I",
    "start": "2900960",
    "end": "2910319"
  },
  {
    "text": "kind of already said uh but a large part of this problem comes from the",
    "start": "2910319",
    "end": "2916680"
  },
  {
    "text": "fact I mean why we have this idea that that types are there just to tell us off",
    "start": "2916680",
    "end": "2922520"
  },
  {
    "text": "is that you know we have this idea that we search for",
    "start": "2922520",
    "end": "2929599"
  },
  {
    "text": "code in the domain of asky garbage",
    "start": "2929599",
    "end": "2936920"
  },
  {
    "text": "and we try and construct a lump of asy garbage that might be a program without",
    "start": "2936920",
    "end": "2943880"
  },
  {
    "text": "using tools that do terribly much to distinguish one bit of asy garbage from",
    "start": "2943880",
    "end": "2949880"
  },
  {
    "text": "another and then we send it to the compiler and we get a torrent of abuse I",
    "start": "2949880",
    "end": "2956359"
  },
  {
    "text": "mean yeah uh and if that's our",
    "start": "2956359",
    "end": "2962040"
  },
  {
    "text": "workflow we've got problems but that doesn't have to be our workflow",
    "start": "2962040",
    "end": "2968720"
  },
  {
    "text": "so um so let's uh let's look at what",
    "start": "2969200",
    "end": "2976040"
  },
  {
    "text": "happens in a different programming",
    "start": "2976040",
    "end": "2980559"
  },
  {
    "text": "language uh so yes this is um this is a hopefully quick example and I can see",
    "start": "2984680",
    "end": "2992440"
  },
  {
    "text": "times uh marching on uh if you at my icfp 2014 talk you will have seen me",
    "start": "2992440",
    "end": "3000760"
  },
  {
    "text": "fail to deliver this message clearly because I was trying to deliver several other messages at the same time uh so",
    "start": "3000760",
    "end": "3008760"
  },
  {
    "text": "what I want to show you is a computer working hard don't we all like watching",
    "start": "3008760",
    "end": "3016319"
  },
  {
    "text": "computers work uh I'll work a bit but the computer will work a lot",
    "start": "3016319",
    "end": "3022839"
  },
  {
    "text": "um okay so uh uh what I want to do first",
    "start": "3022839",
    "end": "3029599"
  },
  {
    "text": "of all just as to build up a simple example is to",
    "start": "3029599",
    "end": "3036079"
  },
  {
    "text": "define a notion of evidence right this is the great thing once you start using",
    "start": "3036079",
    "end": "3041200"
  },
  {
    "text": "types as an input you get paid back if you make them more precise so I'm going to start by talking about using not",
    "start": "3041200",
    "end": "3049359"
  },
  {
    "text": "booleans but some actual evidence to explain ordering relationships on",
    "start": "3049359",
    "end": "3054760"
  },
  {
    "text": "natural numbers so okay I'm making use of type information to do case splitting for me",
    "start": "3054760",
    "end": "3062440"
  },
  {
    "text": "and then I think so this is a typical dependently type programming move we think what evidence would convince us",
    "start": "3062440",
    "end": "3069640"
  },
  {
    "text": "that zero is less than or equal to Y if they're both natural",
    "start": "3069640",
    "end": "3075200"
  },
  {
    "text": "numbers well I should have thought that was fairly obvious so I will accept the simplest evidence I can think of namely",
    "start": "3075200",
    "end": "3082160"
  },
  {
    "text": "an element of the unit type so the the blue things are types the red things are",
    "start": "3082160",
    "end": "3089400"
  },
  {
    "text": "value Constructors so I'm saying the evidence that zero is less than or equal to Y consists of just some trivial",
    "start": "3089400",
    "end": "3099359"
  },
  {
    "text": "value otherwise if the N if the leftand number is a successor I'm going to have",
    "start": "3099359",
    "end": "3105319"
  },
  {
    "text": "to think about it in particular I'm going to have to look at the number on the right okay and I'm going to Define that",
    "start": "3105319",
    "end": "3113880"
  },
  {
    "text": "um if the thing on the left is a successor and the thing on the right is zero there is no evidence",
    "start": "3113880",
    "end": "3119839"
  },
  {
    "text": "whatsoever so the empty type will serve as the type of proofs that a big number",
    "start": "3119839",
    "end": "3125760"
  },
  {
    "text": "is smaller than zero and then uh uh if",
    "start": "3125760",
    "end": "3133319"
  },
  {
    "text": "uh uh if I'm trying to check whether X is successor of X is less than or equal",
    "start": "3133319",
    "end": "3138880"
  },
  {
    "text": "to successor of Y I will be happy if you just show me that X is less than or equal to",
    "start": "3138880",
    "end": "3145280"
  },
  {
    "text": "Y okay okay so that's the that's one way to define the relation on natural",
    "start": "3145280",
    "end": "3151839"
  },
  {
    "text": "numbers less than or equal by saying what type would constitute valid evidence for that proposition and now I",
    "start": "3151839",
    "end": "3159680"
  },
  {
    "text": "want to solve the problem of how to show that if you have",
    "start": "3159680",
    "end": "3165799"
  },
  {
    "text": "two natural numbers X and Y then either X is less than or equal to y or Y is",
    "start": "3165799",
    "end": "3171440"
  },
  {
    "text": "less than or equal to X I'm terribly sorry when I write agda programs I'm much more likely",
    "start": "3171440",
    "end": "3176960"
  },
  {
    "text": "to take co-products of types than to actually you know add numbers together or whatever it is people used to do with",
    "start": "3176960",
    "end": "3182960"
  },
  {
    "text": "computers so um so I just use the arithmetic symbols for type for type",
    "start": "3182960",
    "end": "3188760"
  },
  {
    "text": "operations um okay so I think agda knows how to write that",
    "start": "3188760",
    "end": "3197240"
  },
  {
    "text": "program uh I like to do this sometimes when I do this in class I always have a camera on my",
    "start": "3197240",
    "end": "3204160"
  },
  {
    "text": "fingers all I said was you figure it out but and you're allowed to do case",
    "start": "3204480",
    "end": "3210599"
  },
  {
    "text": "analysis and it said oh go on then so uh",
    "start": "3210599",
    "end": "3216799"
  },
  {
    "text": "there right um better hurry up okay uh",
    "start": "3216799",
    "end": "3223319"
  },
  {
    "text": "next slide all I'm doing is um I'm",
    "start": "3223319",
    "end": "3228520"
  },
  {
    "text": "gluing a bottom and top element to the natural numbers that I can use as",
    "start": "3228520",
    "end": "3233640"
  },
  {
    "text": "bondes uh for things like uh Bin research trees um and I'm extending the",
    "start": "3233640",
    "end": "3240119"
  },
  {
    "text": "definition of the ordering relation for bounded things so in particular the bottom bond is below",
    "start": "3240119",
    "end": "3247839"
  },
  {
    "text": "everything the top one is above everything and things in the middle are",
    "start": "3247839",
    "end": "3253920"
  },
  {
    "text": "one's less than or equal to the other if the original definition says so",
    "start": "3253920",
    "end": "3259200"
  },
  {
    "text": "otherwise uh that's false and then I can Define what it is to be an interval",
    "start": "3259200",
    "end": "3265559"
  },
  {
    "text": "between a lower and upper bond to be in an interval you have to give me an actual value which is above the lower",
    "start": "3265559",
    "end": "3272839"
  },
  {
    "text": "Bond and below the upper Bond so that's a useful",
    "start": "3272839",
    "end": "3279559"
  },
  {
    "text": "type and then I introduce the type of ordered balanced Two Three",
    "start": "3279559",
    "end": "3287680"
  },
  {
    "text": "Trees what fun so a leaf is a two three tree of",
    "start": "3287680",
    "end": "3295359"
  },
  {
    "text": "height zero between a lower and an upper Bond and to construct one you must show that the",
    "start": "3295359",
    "end": "3302520"
  },
  {
    "text": "lower bond is below the upper Bond a two three tree of successor",
    "start": "3302520",
    "end": "3310760"
  },
  {
    "text": "height of a nonzero height is either a two node or a three",
    "start": "3310760",
    "end": "3316599"
  },
  {
    "text": "node the number refers to the number of sub trees they have so a two node has some value X",
    "start": "3316599",
    "end": "3326720"
  },
  {
    "text": "which is used as which is the key stored in the node and is used as the upper",
    "start": "3326720",
    "end": "3333119"
  },
  {
    "text": "bond for the left sub tree and the lower Bound for the right sub tree and you can",
    "start": "3333119",
    "end": "3338720"
  },
  {
    "text": "see the sub trees are one shorter than the whole",
    "start": "3338720",
    "end": "3344640"
  },
  {
    "text": "tree and then what's a three node it's the same sort of thing except that we",
    "start": "3344640",
    "end": "3349799"
  },
  {
    "text": "have two keys stored in the node so the left sub tree is below the",
    "start": "3349799",
    "end": "3355799"
  },
  {
    "text": "left key the middle sub tree is in between the two keys and the right sub tree is above the",
    "start": "3355799",
    "end": "3362119"
  },
  {
    "text": "right key everybody got the picture and the whole idea is that having the",
    "start": "3362119",
    "end": "3367920"
  },
  {
    "text": "possibility to make two nodes and three nodes uh of the same height allows you",
    "start": "3367920",
    "end": "3374319"
  },
  {
    "text": "to do amortized rebalancing of the tree but we're meant it's also important",
    "start": "3374319",
    "end": "3381119"
  },
  {
    "text": "to note that in any kind of binary tree structure which this is",
    "start": "3381119",
    "end": "3387240"
  },
  {
    "text": "there is one leaf in between every two keys and that's why putting ordering",
    "start": "3387240",
    "end": "3395720"
  },
  {
    "text": "information at the leaves is enough to ensure that successive elements in the",
    "start": "3395720",
    "end": "3401160"
  },
  {
    "text": "structure are actually definitely in order so we're maintaining the order in variance we're maintaining the balance",
    "start": "3401160",
    "end": "3407480"
  },
  {
    "text": "in variance okay goodness me I've got like a handful of minutes can I possibly",
    "start": "3407480",
    "end": "3413640"
  },
  {
    "text": "write insert um let's see one thing that helps you",
    "start": "3413640",
    "end": "3422160"
  },
  {
    "text": "write insert is to realize that insert will only go wrong by producing a tree",
    "start": "3422160",
    "end": "3427480"
  },
  {
    "text": "that's slightly too big and if it's too big it'll be the stuff that makes a two node of the next",
    "start": "3427480",
    "end": "3435280"
  },
  {
    "text": "size up okay I'm not going to write the whole function but I'll give you the",
    "start": "3435280",
    "end": "3441480"
  },
  {
    "text": "general idea uh what happens we we've got to do three",
    "start": "3441480",
    "end": "3447119"
  },
  {
    "text": "noes um and I've got to change the names of everything in site because agda uses",
    "start": "3447119",
    "end": "3452839"
  },
  {
    "text": "terrible names so this is going to be T LX",
    "start": "3452839",
    "end": "3458920"
  },
  {
    "text": "txy tyu um okay so what do we",
    "start": "3458920",
    "end": "3465160"
  },
  {
    "text": "do uh we compare x with Y so the the value we're",
    "start": "3465160",
    "end": "3473119"
  },
  {
    "text": "trying to insert with the left key and we see what comes",
    "start": "3473119",
    "end": "3481200"
  },
  {
    "text": "back and then I case analysis on what comes back and I get two",
    "start": "3481200",
    "end": "3487920"
  },
  {
    "text": "possibilities and the fun case is going to be the two big case uh are there well no doesn't matter",
    "start": "3487920",
    "end": "3495880"
  },
  {
    "text": "which one so here we don't here know we learned that X was Y no now we know in this case we know which sub tree we know",
    "start": "3495880",
    "end": "3501960"
  },
  {
    "text": "we're going into the left sub tree because uh because because X is below",
    "start": "3501960",
    "end": "3508640"
  },
  {
    "text": "the left key okay so I say with",
    "start": "3508640",
    "end": "3515720"
  },
  {
    "text": "insert something into the left sub tree uh whoops I really have lost the plot",
    "start": "3515720",
    "end": "3522799"
  },
  {
    "text": "sorry folks TL Y and this should be y z and then it actually makes sense",
    "start": "3522799",
    "end": "3532039"
  },
  {
    "text": "Alpha conversion may be free uh yes let me just fix",
    "start": "3532039",
    "end": "3539160"
  },
  {
    "text": "that but it's not you names may be arbitary but it's nice to get them right",
    "start": "3539160",
    "end": "3544280"
  },
  {
    "text": "um uh okay we know we need to insert something into the left sub tree which is T",
    "start": "3544280",
    "end": "3551078"
  },
  {
    "text": "ly okay what shall we insert into the left sub tree well there's only one",
    "start": "3553599",
    "end": "3559119"
  },
  {
    "text": "thing we can insert into the left sub tree there's only one thing that we know",
    "start": "3559119",
    "end": "3564760"
  },
  {
    "text": "lives in the same interval as the left sub tree does we just our comparison just established that X is",
    "start": "3564760",
    "end": "3573160"
  },
  {
    "text": "INS sufficiently typ bonds to be a candidate for insertion into the left subtree and it's the only thing that is",
    "start": "3573160",
    "end": "3579160"
  },
  {
    "text": "so absolutely no harm getting the type Checker to figure that out for us and then let's see what comes",
    "start": "3579160",
    "end": "3588839"
  },
  {
    "text": "back well in the case so the the nasty case is the too big case and that's the one we clearly have to look at we are",
    "start": "3588839",
    "end": "3596280"
  },
  {
    "text": "have a V and a tlv if if it if it we if the sub tree",
    "start": "3596280",
    "end": "3602920"
  },
  {
    "text": "that comes back from the insertion is the same size as before then we can just reassemble the thing without causing any",
    "start": "3602920",
    "end": "3609359"
  },
  {
    "text": "problem so that the fun part is is this part need a",
    "start": "3609359",
    "end": "3617920"
  },
  {
    "text": "comma right so that's all the stuff",
    "start": "3619960",
    "end": "3626319"
  },
  {
    "text": "right so what I now say is subtle I say dear",
    "start": "3626319",
    "end": "3632640"
  },
  {
    "text": "AGA can you think of any trees like that and it says well you can have the",
    "start": "3632640",
    "end": "3640720"
  },
  {
    "text": "tree you started with or you can have this nicely rebalanced tree that's too",
    "start": "3640720",
    "end": "3647640"
  },
  {
    "text": "big but which contains the element you were hoping to insert because it",
    "start": "3647640",
    "end": "3654160"
  },
  {
    "text": "contains this thing which had X inserted so I say I'll have the second",
    "start": "3654160",
    "end": "3662400"
  },
  {
    "text": "one please and there we go and uh yeah all",
    "start": "3662400",
    "end": "3668039"
  },
  {
    "text": "of the so what I have to do in writing this program is choose the analysis",
    "start": "3668039",
    "end": "3673839"
  },
  {
    "text": "strategy synthesizing the appropriately rebalanced trees is a matter of choosing from a",
    "start": "3673839",
    "end": "3682079"
  },
  {
    "text": "menu either the tree I started with or the tree I want",
    "start": "3682079",
    "end": "3687240"
  },
  {
    "text": "every single case so okay I should stop with the",
    "start": "3687240",
    "end": "3693680"
  },
  {
    "text": "confession that it took me about 15 years to come up with that type for it I was doing other things as well I Heen to",
    "start": "3693680",
    "end": "3700799"
  },
  {
    "text": "that but uh so that's um that's my question",
    "start": "3700799",
    "end": "3707240"
  },
  {
    "text": "really is to think how we can make better use of the way types act as a problem statement",
    "start": "3707240",
    "end": "3714319"
  },
  {
    "text": "um okay so what you see here is you know I write down a really nice type for a function and all of you know I get paid",
    "start": "3714319",
    "end": "3721200"
  },
  {
    "text": "back time and time again for having made such a good design choice in the first place right I really just making the the",
    "start": "3721200",
    "end": "3728760"
  },
  {
    "text": "few choices that are left that weren't already fixed in advance by the type and",
    "start": "3728760",
    "end": "3734319"
  },
  {
    "text": "that's great uh the code I'm not quite sure yet is a",
    "start": "3734319",
    "end": "3740760"
  },
  {
    "text": "readable record of problem solving interaction but here's the crucial point that",
    "start": "3740760",
    "end": "3746359"
  },
  {
    "text": "for most of the time you discover when you do one of these refinement got to",
    "start": "3746359",
    "end": "3753079"
  },
  {
    "text": "charge I've got my type I'm refining it to my program oh my Design's",
    "start": "3753079",
    "end": "3758279"
  },
  {
    "text": "wrong and at that point it is like the opposite of the",
    "start": "3758279",
    "end": "3765960"
  },
  {
    "text": "wizard of ours moment right you have to switch off your type",
    "start": "3765960",
    "end": "3771119"
  },
  {
    "text": "Checker your file goes back into black and white you're you're in Kansas",
    "start": "3771119",
    "end": "3778799"
  },
  {
    "text": "again and U and you have to think you know I'm",
    "start": "3778799",
    "end": "3784119"
  },
  {
    "text": "back in the space of asky garbage looking for the next type that I'm GNA",
    "start": "3784119",
    "end": "3789880"
  },
  {
    "text": "you know go go wild for uh and the question that we really face is uh is",
    "start": "3789880",
    "end": "3797119"
  },
  {
    "text": "how to do better than that okay I'm happy to to stop",
    "start": "3797119",
    "end": "3803400"
  },
  {
    "text": "there on that disturbing note",
    "start": "3803400",
    "end": "3809359"
  },
  {
    "text": "[Applause]",
    "start": "3812010",
    "end": "3819709"
  }
]