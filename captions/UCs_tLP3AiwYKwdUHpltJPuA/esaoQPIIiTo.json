[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "[Music]",
    "start": "970",
    "end": "7838"
  },
  {
    "text": "i'm sarah and i'm a technical director at the financial times i've been at the financial times for 10 years we are one of the world's",
    "start": "12799",
    "end": "20640"
  },
  {
    "text": "leading business and financial news organizations and we started moving to the cloud not long after i",
    "start": "20640",
    "end": "26400"
  },
  {
    "text": "joined and initially that was through developing private cloud and then we moved to aws",
    "start": "26400",
    "end": "32238"
  },
  {
    "text": "i would say we've had a pretty cloud native approach for the last five years and i'm going to talk about the things that we learnt",
    "start": "32239",
    "end": "37600"
  },
  {
    "text": "while moving to that and since we've been doing that but i want to start by saying about what i think cloud native is and i think",
    "start": "37600",
    "end": "44239"
  },
  {
    "text": "often people think about the cloud native computing foundation and they think oh yeah it's kubernetes it's service mesh but i think it's broader than that",
    "start": "44239",
    "end": "50640"
  },
  {
    "text": "it's really about building systems that benefit from the cloud rather than just running on it",
    "start": "50640",
    "end": "55840"
  },
  {
    "text": "so of course you benefit from just moving your systems to the cloud doing a lift and shift where you take your",
    "start": "55840",
    "end": "62160"
  },
  {
    "start": "60000",
    "end": "175000"
  },
  {
    "text": "monolithic application in your database server and you run them in the cloud you get benefit from that you have",
    "start": "62160",
    "end": "67840"
  },
  {
    "text": "someone else doing infrastructure work so a lot of work that you used to have to do in your organization is now done",
    "start": "67840",
    "end": "73280"
  },
  {
    "text": "by the cloud provider you aren't um racking servers and if something fails",
    "start": "73280",
    "end": "78880"
  },
  {
    "text": "um you can spin up a new machine and you can even make that happen automatically through auto scaling",
    "start": "78880",
    "end": "85439"
  },
  {
    "text": "and you also have much quicker provisioning so it's a lot quicker than when someone had to buy a server and put it in a data center",
    "start": "85439",
    "end": "91680"
  },
  {
    "text": "and you can create a new server with a click of a button and this shows how long it took at the",
    "start": "91680",
    "end": "97920"
  },
  {
    "text": "aft to get a new server uh ready for code to be deployed to it so in 2011 these were our own",
    "start": "97920",
    "end": "104240"
  },
  {
    "text": "servers in the data center and it took a long time you had to order in a server and rack it up in the",
    "start": "104240",
    "end": "110079"
  },
  {
    "text": "data center and configure it manually everything was manual in 2012 we started developing our own",
    "start": "110079",
    "end": "115200"
  },
  {
    "text": "private cloud by 2014 we started using aws alongside",
    "start": "115200",
    "end": "121119"
  },
  {
    "text": "that and it took minutes to provision a new server",
    "start": "121119",
    "end": "126719"
  },
  {
    "text": "you also get easy scale up or down very easily to meet demand um by having more instances or you can change to a new",
    "start": "127680",
    "end": "134000"
  },
  {
    "text": "instance type and this is a change from the date the time before we used to think about our capacity planning so",
    "start": "134000",
    "end": "139360"
  },
  {
    "text": "there's a lot more flexibility to say let's spin up this new product see how it goes we can choose whether we whether we",
    "start": "139360",
    "end": "144400"
  },
  {
    "text": "think it's successful we don't have to predict uh how many people are going to use it um six months to a year in advance",
    "start": "144400",
    "end": "151760"
  },
  {
    "text": "and of course you can more accurately assign costs to a particular application because you're paying for just you're paying for",
    "start": "151760",
    "end": "158000"
  },
  {
    "text": "the ec2 instance you're paying for the lambdas you're not having to work out the the overhead of data center costs",
    "start": "158000",
    "end": "163599"
  },
  {
    "text": "so even the minimum move to the cloud has a lot of benefits but i think you can get much more benefit if you're willing",
    "start": "163599",
    "end": "170160"
  },
  {
    "text": "to change the way you build and operate software obviously that's quite a big if um it's basically",
    "start": "170160",
    "end": "176080"
  },
  {
    "start": "175000",
    "end": "375000"
  },
  {
    "text": "becoming cloud native involves quite big change the first thing is continuous delivery so you need to have",
    "start": "176080",
    "end": "182400"
  },
  {
    "text": "continuous delivery it's about automating your deployment pipelines that should incorporate automated testing and it lets you release small",
    "start": "182400",
    "end": "188640"
  },
  {
    "text": "changes frequently once you have that you can adopt some kind of decoupled architecture so",
    "start": "188640",
    "end": "194959"
  },
  {
    "text": "that could be microservices where you're breaking your monolith down into small services with clear defined",
    "start": "194959",
    "end": "200959"
  },
  {
    "text": "boundaries so it could be something else like aws lambda something that's decoupled that lets you make changes in",
    "start": "200959",
    "end": "206159"
  },
  {
    "text": "one place and be relatively comfortable that you're not impacting somewhere else because the architecture",
    "start": "206159",
    "end": "211680"
  },
  {
    "text": "keeps things separate gives you a small blast radius",
    "start": "211680",
    "end": "216640"
  },
  {
    "text": "this is perfect um i have just had an alert saying that they",
    "start": "218640",
    "end": "225360"
  },
  {
    "text": "my company wants to upgrade my mac right i've just turned that off right um so uh so it could be",
    "start": "225360",
    "end": "231680"
  },
  {
    "text": "lambda um once you've got micro services uh",
    "start": "231680",
    "end": "237760"
  },
  {
    "text": "adopting containers and orchestrations is an obvious next step because you want to package up all of your processes and",
    "start": "237760",
    "end": "243519"
  },
  {
    "text": "libraries for a single application put an interface on it so you can move it around as a single thing and then you have the ability for",
    "start": "243519",
    "end": "249760"
  },
  {
    "text": "orchestrators to use this to among other things dynamically manage your system so if a server fails in your",
    "start": "249760",
    "end": "256079"
  },
  {
    "text": "cluster you can have all the instances spun up on on other servers in that cluster",
    "start": "256079",
    "end": "262079"
  },
  {
    "text": "another advantage of containers compared to vms is that they start up much more quickly and they take up less space so you can pack a lot more",
    "start": "262079",
    "end": "268800"
  },
  {
    "text": "containerized applications onto a single large vm and we saw about uh 40 reduction in",
    "start": "268800",
    "end": "274400"
  },
  {
    "text": "costs moving from one micro service per vm to a container as an orchestration approach and each new service you build",
    "start": "274400",
    "end": "281040"
  },
  {
    "text": "takes a little less effort you're not spinning up a vm for it you're just defining the characteristics of how that service",
    "start": "281040",
    "end": "286160"
  },
  {
    "text": "should be deployed and finally you can take advantage of x",
    "start": "286160",
    "end": "291520"
  },
  {
    "text": "as a service something else that you can hand off to someone else whether it is using databases provided by your cloud",
    "start": "291520",
    "end": "298080"
  },
  {
    "text": "provider um whether you move to a managed platform so often uh with the first stage moving to the",
    "start": "298080",
    "end": "303600"
  },
  {
    "text": "cloud people install software onto a vm and that's what we did at the ft we had i worked on the content",
    "start": "303600",
    "end": "309120"
  },
  {
    "text": "platform we had a mongodb cluster that we managed and we even containerized that cluster but that's not key to the business",
    "start": "309120",
    "end": "315680"
  },
  {
    "text": "functionality my team were working on so later for a slightly different use case we didn't install a database we",
    "start": "315680",
    "end": "322320"
  },
  {
    "text": "used aws aurora because it's a lot quicker to get going on that and i think people worry about vendor lock-in but vendor lock-in",
    "start": "322320",
    "end": "329840"
  },
  {
    "text": "is uh probably less of a concern than moving slowly because you have chosen",
    "start": "329840",
    "end": "337360"
  },
  {
    "text": "chosen to take an approach where you're trying to do everything yourself you want to hand off this operational stuff",
    "start": "337360",
    "end": "344479"
  },
  {
    "text": "another aspect to this is if i wanted to try out a new database before we moved to the cloud i had to go through a procurement process i had to",
    "start": "344639",
    "end": "350479"
  },
  {
    "text": "form an agreement with that company with the cloud i can try something out so i can try out a graph database if i'm",
    "start": "350479",
    "end": "357199"
  },
  {
    "text": "on aws i can just say right they offer this type of data store let's try it so you move more quickly many teams at",
    "start": "357199",
    "end": "365039"
  },
  {
    "text": "the ft uh use a pass we we deploy a lot of applications onto heroku that's what's used for our fc.com",
    "start": "365039",
    "end": "372319"
  },
  {
    "text": "system so i haven't really explained why i think all of these things together pay",
    "start": "372319",
    "end": "378000"
  },
  {
    "start": "375000",
    "end": "634000"
  },
  {
    "text": "off um and the answer is because if you do them right you get to deliver value to your customers more",
    "start": "378000",
    "end": "383039"
  },
  {
    "text": "quickly so things change when you can get from an idea to production in days rather than months it means you",
    "start": "383039",
    "end": "389440"
  },
  {
    "text": "can experiment because you haven't invested a lot of time or money in an idea so sunk cost makes it really tough for",
    "start": "389440",
    "end": "396400"
  },
  {
    "text": "people to say that didn't work let's let's abandon it but if you haven't spent a lot of time on it maybe you will do that",
    "start": "396400",
    "end": "403039"
  },
  {
    "text": "and an example here is an idea we had at the ft about um",
    "start": "403039",
    "end": "408720"
  },
  {
    "text": "how we represented our film reviews so we decided we wanted more people to read film reviews and we",
    "start": "408720",
    "end": "414960"
  },
  {
    "text": "added the rating that the reviewers had given on to the page that listed all our film reviews thinking this this is going",
    "start": "414960",
    "end": "420800"
  },
  {
    "text": "to increase engagement what it actually did was it meant no one actually clicked through to read the review they just saw the score so we removed it because it didn't take",
    "start": "420800",
    "end": "427520"
  },
  {
    "text": "us very long to do and these small releases lower the risk for each release it's easier to work out why something isn't working and to",
    "start": "427520",
    "end": "433759"
  },
  {
    "text": "recover from the change either by rolling back the release or by fixing it quickly and rolling forward",
    "start": "433759",
    "end": "440639"
  },
  {
    "text": "so accelerate is a great book i highly recommend it it is basically about what it takes to",
    "start": "440639",
    "end": "446639"
  },
  {
    "text": "build high performing software development organizations and what the authors mean by this is",
    "start": "446639",
    "end": "452080"
  },
  {
    "text": "organizations that positively impact their organizational performance profitability market share productivity",
    "start": "452080",
    "end": "459199"
  },
  {
    "text": "and there are four key measures that this book identifies targeted outcomes not outputs",
    "start": "459199",
    "end": "466000"
  },
  {
    "text": "and they are delivery lead time so how long does it take between you commit and the code and it going live",
    "start": "466000",
    "end": "471840"
  },
  {
    "text": "deployment frequency which is really a measure of how small your changes are so it's an inverse relationship if you're",
    "start": "471840",
    "end": "477360"
  },
  {
    "text": "deploying hundreds of tons a day you're probably releasing small changes when things do go wrong how long does it",
    "start": "477360",
    "end": "483840"
  },
  {
    "text": "take you to restore service that's generally something that improves as you automate your pipelines because",
    "start": "483840",
    "end": "490240"
  },
  {
    "text": "you use the same process to roll forward or to roll back and change failure rates of all the",
    "start": "490240",
    "end": "496479"
  },
  {
    "text": "changes that you make what percentage of them do you have to do something because it went wrong either to patch it or to roll it back",
    "start": "496479",
    "end": "503360"
  },
  {
    "text": "so the goal is to move quickly with small low-risk reversible steps and if you do",
    "start": "503360",
    "end": "508720"
  },
  {
    "text": "this you have a positive impact on your business um it improves all of these metrics so an example for us is deployment",
    "start": "508720",
    "end": "514959"
  },
  {
    "text": "frequency so before we move to the cloud and we had a monolithic application with",
    "start": "514959",
    "end": "520080"
  },
  {
    "text": "a relational database we couldn't do releases out of ours in hours we had to do the amount of hours because it took a long time and we",
    "start": "520080",
    "end": "526560"
  },
  {
    "text": "had to freeze the website and we couldn't publish the news while that was going on so we did 12 a year so it was once a",
    "start": "526560",
    "end": "533600"
  },
  {
    "text": "month on a saturday that's changed significantly i ran a query last week we did about 3 000",
    "start": "533600",
    "end": "539120"
  },
  {
    "text": "releases in the last four weeks it's over 100 a day it's probably about 30 000 changes a",
    "start": "539120",
    "end": "544320"
  },
  {
    "text": "year compared to maybe 50 when i joined the ft so we release code at least 500 times",
    "start": "544320",
    "end": "549680"
  },
  {
    "text": "as often and the change failure rate is much much better too with those 12 a year releases maybe one",
    "start": "549680",
    "end": "556000"
  },
  {
    "text": "or two failed so that's 15 to 20 now it's under it's under 2 so it's definitely worth it",
    "start": "556000",
    "end": "562880"
  },
  {
    "text": "for us in terms of ability to get value out quickly but it does mean changing a lot of",
    "start": "562880",
    "end": "569040"
  },
  {
    "text": "things um and i think there are three sort of fundamental reasons",
    "start": "569040",
    "end": "574399"
  },
  {
    "text": "why things need to change so to be able to release changes hundreds of times a day you need to reduce the amount of",
    "start": "574399",
    "end": "580800"
  },
  {
    "text": "time you spend waiting so whether that's waiting for access to a shared resource like a staging",
    "start": "580800",
    "end": "586720"
  },
  {
    "text": "environment for testing or for a decision or for a meeting um so it's not just systems that need to be",
    "start": "586720",
    "end": "592959"
  },
  {
    "text": "loosely coupled your organization needs to be loosely coupled too and that means that you need your teams to be pretty",
    "start": "592959",
    "end": "599120"
  },
  {
    "text": "autonomous and empowered to make their own decisions and this can be a scary thing to do you have to explain what the expectations",
    "start": "599120",
    "end": "606399"
  },
  {
    "text": "and the responsibilities are for those teams and it'll probably work out and then you have to accept that",
    "start": "606399",
    "end": "612240"
  },
  {
    "text": "distributed systems are different they're unreliable calls over a network fail in process calls being replaced with a network call",
    "start": "612240",
    "end": "619200"
  },
  {
    "text": "you're more likely to have problems so you need to build with resilience and redundancy much further to the front of",
    "start": "619200",
    "end": "624720"
  },
  {
    "text": "your mind so that small periods where parts of your system are unreliable doesn't impact the ability to serve",
    "start": "624720",
    "end": "631920"
  },
  {
    "text": "business needs so with that in mind what changes and the answer is i think lots of things",
    "start": "631920",
    "end": "637279"
  },
  {
    "start": "634000",
    "end": "659000"
  },
  {
    "text": "change which is why going cloud native is not something that happens overnight it's a culture change culture change is hard it takes time and",
    "start": "637279",
    "end": "645120"
  },
  {
    "text": "you don't always manage to take everyone with you and you need really to have backing from the top to do this kind of thing",
    "start": "645120",
    "end": "650399"
  },
  {
    "text": "successfully so i'm going to talk about these six areas and what i think the key things are that you have to focus on to",
    "start": "650399",
    "end": "656640"
  },
  {
    "text": "do it successfully with this change so i want to start with talking about deployment because i think getting this right is key",
    "start": "656640",
    "end": "662320"
  },
  {
    "start": "659000",
    "end": "909000"
  },
  {
    "text": "you need to be releasing small changes frequently and people often automate their deployment pipelines and think",
    "start": "662320",
    "end": "667839"
  },
  {
    "text": "that's it we're doing continuous delivery but unless you're using them to continuously integrate code and release",
    "start": "667839",
    "end": "674079"
  },
  {
    "text": "into production you aren't doing continuous delivery so the whole point is to avoid cases where developers end up with",
    "start": "674079",
    "end": "680480"
  },
  {
    "text": "lots of changes locally that haven't been merged with other people's code should be committing code to master every day",
    "start": "680480",
    "end": "686399"
  },
  {
    "text": "it should be going live without having to wait for any long-lived manual process and that means that you have to change",
    "start": "686399",
    "end": "692079"
  },
  {
    "text": "things that perhaps were there in your organization so no change advisory boards no change",
    "start": "692079",
    "end": "697600"
  },
  {
    "text": "request forms often the first response when you start talking about this is for people to",
    "start": "697600",
    "end": "702959"
  },
  {
    "text": "worry about auditing i think by this point we have plenty of examples of how you can build an automated pipeline that's better",
    "start": "702959",
    "end": "709200"
  },
  {
    "text": "controlled and audited than what came before we have plenty of examples of people in highly regulated industries like banking",
    "start": "709200",
    "end": "715519"
  },
  {
    "text": "who have got automated deployment pipelines and do continuous delivery",
    "start": "715519",
    "end": "721040"
  },
  {
    "text": "you can't fill out manual forms if you're doing hundreds of releases a day we used to have a change request form",
    "start": "721040",
    "end": "726560"
  },
  {
    "text": "that we would fill in and at one point i worked out with the number of releases we were now doing it would have been 67 days a year just",
    "start": "726560",
    "end": "734000"
  },
  {
    "text": "filling out that form so that doesn't work but we still see the value in knowing what changed so we",
    "start": "734000",
    "end": "739120"
  },
  {
    "text": "have an api and we wire it into our deployment pipelines uh it's much less time to to do it",
    "start": "739120",
    "end": "745040"
  },
  {
    "text": "there's no manual work involved actually it's much more accurate change advisory boards the idea of a",
    "start": "745040",
    "end": "750480"
  },
  {
    "text": "meeting where you say okay these are the changes we're going to release this week um which we had at the ft when",
    "start": "750480",
    "end": "756480"
  },
  {
    "text": "i joined they're a reaction to the risk of making a big release all at once once you move towards smaller changes with a lower",
    "start": "756480",
    "end": "762800"
  },
  {
    "text": "blast radius the risk of failure for each release is lower and research and accelerate says",
    "start": "762800",
    "end": "768000"
  },
  {
    "text": "that a change advisory board actually doesn't reduce the risk of failed releases it makes no difference one way or the other",
    "start": "768000",
    "end": "773519"
  },
  {
    "text": "they found it just slows the ability to do releases down",
    "start": "773519",
    "end": "778720"
  },
  {
    "text": "you don't need to choose speed or stability i think there's this sort of false idea that you move fast and break",
    "start": "778720",
    "end": "783920"
  },
  {
    "text": "things or you you know you go slowly and then you're fine actually moving fast means we break",
    "start": "783920",
    "end": "789040"
  },
  {
    "text": "things much less and when we do break them we're able to fix them much more quickly",
    "start": "789040",
    "end": "794959"
  },
  {
    "text": "related to be able to move fast you you can only release on demand if you release without downtime and in",
    "start": "796079",
    "end": "802240"
  },
  {
    "text": "most cases we do this by having multiple instances of a service and doing a rolling deployment",
    "start": "802240",
    "end": "807279"
  },
  {
    "text": "we tend to be using databases that are stimulus so we don't have that that's large amounts of data and a schema",
    "start": "807279",
    "end": "813440"
  },
  {
    "text": "transformation that used to be quite painful but if we do then we run multiple regions fail over",
    "start": "813440",
    "end": "818959"
  },
  {
    "text": "in one region to upgrade the other once you can release without downtime uh the nice thing is you generally",
    "start": "818959",
    "end": "825199"
  },
  {
    "text": "release during standard working hours and this is a graph that again i looked at recent releases and i can see that most",
    "start": "825199",
    "end": "831279"
  },
  {
    "text": "of our developers are based in the uk and bulgaria we have a few in manila and in the us",
    "start": "831279",
    "end": "837199"
  },
  {
    "text": "but generally people are releasing during their working hours and a nice side effect of that is that if anything does go wrong you've",
    "start": "837199",
    "end": "843120"
  },
  {
    "text": "got everyone that might be able to help you there and able to help you don't have to wake people up",
    "start": "843120",
    "end": "850079"
  },
  {
    "text": "you can also of course reduce the risk by separating releasing code from releasing functionality and there are a",
    "start": "850160",
    "end": "857120"
  },
  {
    "text": "couple of key things here something like a canary release where you release a new feature to a subset of your customers it has much",
    "start": "857120",
    "end": "863519"
  },
  {
    "text": "less impact it doesn't work you can release to one percent of people and look at the metric so here this is a",
    "start": "863519",
    "end": "868800"
  },
  {
    "text": "graph saying showing that we released the canary the response times were around what we would expect we'd have",
    "start": "868800",
    "end": "874320"
  },
  {
    "text": "been looking at the errors as well and then we basically shut the canary down and released the code to everyone",
    "start": "874320",
    "end": "880399"
  },
  {
    "text": "you could also use feature flags so you're hiding the new code inside a conditional",
    "start": "880399",
    "end": "885760"
  },
  {
    "text": "it means you can check code in whenever you like but wait until a low impact time to turn on the feature so for us we",
    "start": "885760",
    "end": "891519"
  },
  {
    "text": "would avoid times where there are big things happening in the news and of course you can turn the feature on just for some",
    "start": "891519",
    "end": "897680"
  },
  {
    "text": "people so we can test in production by having people go and test by turning the flag on for themselves",
    "start": "897680",
    "end": "902800"
  },
  {
    "text": "and both feature flags and canary releases were built into ft.com from the start because they're so useful",
    "start": "902800",
    "end": "909920"
  },
  {
    "start": "909000",
    "end": "1264000"
  },
  {
    "text": "so obviously the way you architect system changes when you adopt microservices and continuous delivery and i'm not going to go into enormous",
    "start": "910320",
    "end": "916000"
  },
  {
    "text": "depth because because there's so many things you can talk about here i just want to touch on a few things that we found really helped us with this",
    "start": "916000",
    "end": "922639"
  },
  {
    "text": "approach or all that caught us out so the architecture of each interval",
    "start": "922639",
    "end": "928079"
  },
  {
    "text": "individual service is different when you move to distributed system because you can't really rely on other services being there long term or being",
    "start": "928079",
    "end": "934880"
  },
  {
    "text": "in the same place long term when we first started building apps um microservices we realized that we tended",
    "start": "934880",
    "end": "941519"
  },
  {
    "text": "to expect that an application server would start up and the database would be there and ready to accept requests we",
    "start": "941519",
    "end": "947040"
  },
  {
    "text": "were used to the idea that we start things up in a particular order it's not a good expectation in a microservices world",
    "start": "947040",
    "end": "953279"
  },
  {
    "text": "so you really want to build applications for resilience so they shut down nicely so that they retry um to connect",
    "start": "953279",
    "end": "959519"
  },
  {
    "text": "if they can't the first time and so that they check with a service registry or dns to find out where the service is that they need",
    "start": "959519",
    "end": "965040"
  },
  {
    "text": "to talk to normally they look they're talking to a load balancer and the load balancer is balancing requests among uh the",
    "start": "965040",
    "end": "971519"
  },
  {
    "text": "instances that are healthy i think the thing is you should have been doing this sort of resilience",
    "start": "971519",
    "end": "977040"
  },
  {
    "text": "anyway but you can get away with things longer when you have two monoliths irregular releases and you",
    "start": "977040",
    "end": "982399"
  },
  {
    "text": "do some manual process where you always restart the database server before the application",
    "start": "982399",
    "end": "988560"
  },
  {
    "text": "for resilience uh it makes sense to avoid synchronous calls they couple",
    "start": "988639",
    "end": "993759"
  },
  {
    "text": "they couple things together if you can use a queue you your producer and your consumer are not",
    "start": "993759",
    "end": "999680"
  },
  {
    "text": "reliant on each other if the consumer is down the producer still writes things onto the queue and a nice impact of this is it also uh",
    "start": "999680",
    "end": "1008160"
  },
  {
    "text": "increases decoupling and build time so if you've got some new need for this information we can",
    "start": "1008160",
    "end": "1013680"
  },
  {
    "text": "process this as a new way your producer doesn't need to know anything about it and that's really that's really good",
    "start": "1013680",
    "end": "1020320"
  },
  {
    "text": "and an example is the simple system of ft which is that change api that i mentioned earlier",
    "start": "1020320",
    "end": "1025360"
  },
  {
    "text": "so this is called when you are uh releasing code and it's heavily based around the queue",
    "start": "1025360",
    "end": "1030959"
  },
  {
    "text": "the previous version of the change api used a synchronous call so you made a call in and we attempted to update the",
    "start": "1030959",
    "end": "1036079"
  },
  {
    "text": "database and then we returned uh and told you whether you're successful which meant that",
    "start": "1036079",
    "end": "1041918"
  },
  {
    "text": "build pipelines would fail because they'd failed to register the change so we changed it so we just validate",
    "start": "1041919",
    "end": "1047678"
  },
  {
    "text": "that what you sent us makes sense and we put that information on a queue and say yeah go on you can do the release it is the change api's",
    "start": "1047679",
    "end": "1054559"
  },
  {
    "text": "responsibility for dealing with failure to write to the change database the other nice thing about this is we're just showing here",
    "start": "1054559",
    "end": "1060640"
  },
  {
    "text": "there's a slack consumer that is uh basically um",
    "start": "1060640",
    "end": "1066000"
  },
  {
    "text": "take taking the change information and writing it slack but obviously you could also easily add another consumer and write it",
    "start": "1066000",
    "end": "1072080"
  },
  {
    "text": "somewhere else so we were able to migrate where we stored information for our changes",
    "start": "1072080",
    "end": "1077440"
  },
  {
    "text": "just through writing one lambda transactions i can remember when i was",
    "start": "1077440",
    "end": "1084320"
  },
  {
    "text": "dealing with monolithic applications and databases spending a lot of time worried about transactions but you know we often run in multiple",
    "start": "1084320",
    "end": "1090080"
  },
  {
    "text": "regions for our critical systems and it's quite hard to set up database clusters that work across region boundaries",
    "start": "1090080",
    "end": "1096080"
  },
  {
    "text": "but even if we managed to do that actually one of the benefits for microservice architecture is a polyglot approach so you probably have",
    "start": "1096080",
    "end": "1102160"
  },
  {
    "text": "multiple types of data store we do in our content platform we store complete articles in the document store",
    "start": "1102160",
    "end": "1108080"
  },
  {
    "text": "we have a graph database where we store the web of content and metadata and we have a search",
    "start": "1108080",
    "end": "1113120"
  },
  {
    "text": "instance as well what that means is we have to be comfortable with eventual",
    "start": "1113120",
    "end": "1119120"
  },
  {
    "text": "consistency and partial failures where some store or stores don't get an update",
    "start": "1119120",
    "end": "1127120"
  },
  {
    "text": "i feel like planning for eventual consistency is sensible anyway we're lucky because for content",
    "start": "1128640",
    "end": "1133760"
  },
  {
    "text": "publishing and delivery part of the eft that i've generally worked on the events we're processing is item potent so we can opt",
    "start": "1133760",
    "end": "1140240"
  },
  {
    "text": "for a right at least once approached you're always choosing between right at least once or right at most once",
    "start": "1140240",
    "end": "1145600"
  },
  {
    "text": "um right exactly once is not a sensible goal for a distributed system but so for us we can republish these items of",
    "start": "1145600",
    "end": "1151280"
  },
  {
    "text": "content and that's absolutely fine that works very well for us",
    "start": "1151280",
    "end": "1156000"
  },
  {
    "text": "my colleague matt recently wrote up how fta.com maintains content in two separate elastic search clusters one in the us",
    "start": "1157280",
    "end": "1164240"
  },
  {
    "text": "one in the eu that do everything completely independently and if they get out of sync a health check will flag",
    "start": "1164240",
    "end": "1169679"
  },
  {
    "text": "that the two clusters don't have the same count of content as well as processing notifications",
    "start": "1169679",
    "end": "1176240"
  },
  {
    "text": "there's a simple process service that makes requests to the content api for recent content so basically we say well these are these",
    "start": "1176240",
    "end": "1182240"
  },
  {
    "text": "are recent articles uh let's go and check whether there are any changes and that often fixes any inconsistencies",
    "start": "1182240",
    "end": "1187919"
  },
  {
    "text": "but basically sometimes things get out of sync there's a small amount of manual work it'll probably fix itself due to",
    "start": "1187919",
    "end": "1193520"
  },
  {
    "text": "this processor and the interesting thing about this is that it's a very simplistic architecture",
    "start": "1193520",
    "end": "1199840"
  },
  {
    "text": "and one that people often propose we should improve on but it's been working for six years it's been working for six",
    "start": "1199840",
    "end": "1205840"
  },
  {
    "text": "years and never been a priority to fix so maybe that's okay another related example of keeping it simple comes from",
    "start": "1205840",
    "end": "1212000"
  },
  {
    "text": "another team at the ft and this is about the key information about our systems that we",
    "start": "1212000",
    "end": "1217840"
  },
  {
    "text": "use during an instant what we call the runbooks it's stored in a graph database along with a lot of other system-related",
    "start": "1217840",
    "end": "1223919"
  },
  {
    "text": "information and we only have one cluster but clearly uh information we use for an incident",
    "start": "1223919",
    "end": "1229840"
  },
  {
    "text": "needs to be highly resilient it's the troubleshooting information for critical systems but rather than try and work out",
    "start": "1229840",
    "end": "1235360"
  },
  {
    "text": "how we can duplicate our cluster with all the synchronization issues that might involve",
    "start": "1235360",
    "end": "1240559"
  },
  {
    "text": "instead we just extract that key troubleshooting information regularly store it as files in s3 so our runbooks are",
    "start": "1240559",
    "end": "1247280"
  },
  {
    "text": "highly resilient it doesn't actually matter that they're not updated regularly because they don't change that often we can update them",
    "start": "1247280",
    "end": "1252880"
  },
  {
    "text": "every day and we'll have good information so it's about trying to avoid doing",
    "start": "1252880",
    "end": "1257919"
  },
  {
    "text": "uh complicated things if there is a slightly simpler approach that you can take",
    "start": "1257919",
    "end": "1263840"
  },
  {
    "start": "1264000",
    "end": "1601000"
  },
  {
    "text": "so that's the kind of architectural side of things uh and i want to talk about how you build things so i'm thinking here about the next level down from",
    "start": "1264640",
    "end": "1270559"
  },
  {
    "text": "architecture what do you need to build into your services or around them",
    "start": "1270559",
    "end": "1277360"
  },
  {
    "text": "so distributed systems are complex systems and what that means is that they're generally running in degraded",
    "start": "1277360",
    "end": "1282640"
  },
  {
    "text": "mode there's a classic paper by richard cook that applies",
    "start": "1282640",
    "end": "1288080"
  },
  {
    "text": "so you know effectively complex systems are in degraded mode and that means you should accept that",
    "start": "1288400",
    "end": "1295039"
  },
  {
    "text": "things will go wrong focus on resilience and redundancy so you have multiple instances of services",
    "start": "1295039",
    "end": "1301039"
  },
  {
    "text": "behind a load balancer so you're directing traffic only to the healthy instances and you make sure that you build things in so that a calling service will retry",
    "start": "1301039",
    "end": "1307919"
  },
  {
    "text": "but those retries probably need an exponential back off because you don't want to hammer a service when",
    "start": "1307919",
    "end": "1313200"
  },
  {
    "text": "it's just getting back onto its feet so you might try after a second and then after",
    "start": "1313200",
    "end": "1318559"
  },
  {
    "text": "two seconds and after fall but i think what we found then is um",
    "start": "1318559",
    "end": "1325760"
  },
  {
    "text": "when things start to go wrong you can end up with a lot of work that is just pointless so somewhere near the top of your stack",
    "start": "1325760",
    "end": "1331919"
  },
  {
    "text": "you probably have a timeout where you abandon work or you don't return you don't return a response after",
    "start": "1331919",
    "end": "1337600"
  },
  {
    "text": "say 10 seconds so any work you're doing below that point in your stack after that timeout is wasted work",
    "start": "1337600",
    "end": "1342799"
  },
  {
    "text": "so it's a good idea to think about passing through that deadline as maybe as a header on a request so",
    "start": "1342799",
    "end": "1348000"
  },
  {
    "text": "that services can check whether they should just not even try and process the request because actually it's too late",
    "start": "1348000",
    "end": "1353440"
  },
  {
    "text": "that will reduce load on lots of your services in the event that you have some problem with latency",
    "start": "1353440",
    "end": "1360880"
  },
  {
    "text": "often if you look at incidents that are reported for highly distributed systems um there's kind of",
    "start": "1360880",
    "end": "1367200"
  },
  {
    "text": "an effect of of peop if things go wrong and then they compound because all of the things you've got",
    "start": "1367200",
    "end": "1372559"
  },
  {
    "text": "that are trying to recover from it are basically building up and building up so try it try and protect yourself",
    "start": "1372559",
    "end": "1377919"
  },
  {
    "text": "from that when things do go wrong you want to be able to work out what happened so",
    "start": "1377919",
    "end": "1383360"
  },
  {
    "text": "observability is about inferring what is going on in the system from external outputs and for software",
    "start": "1383360",
    "end": "1388880"
  },
  {
    "text": "systems these are generally logs and metrics and monitoring so when you had a",
    "start": "1388880",
    "end": "1394960"
  },
  {
    "text": "monolith it was possible to jump onto a box and grep for logs and in the worst case you'd find it was on the other server",
    "start": "1394960",
    "end": "1400480"
  },
  {
    "text": "and you go and do the same thing again with microservices any event you're interested in likely went through multiple services running in different",
    "start": "1400480",
    "end": "1406320"
  },
  {
    "text": "places and two similar events may take a completely different path in terms of the instances that do the",
    "start": "1406320",
    "end": "1411919"
  },
  {
    "text": "processing so you need all your logs to be sent to a central place where you can see the whole event and you need a way to be able to see the",
    "start": "1411919",
    "end": "1418159"
  },
  {
    "text": "whole event by tying those locks together so structured logs with some unique identifier per event",
    "start": "1418159",
    "end": "1424000"
  },
  {
    "text": "and what we have at the ft is the library that will look for a particular header that has a unique id on it if it doesn't",
    "start": "1424000",
    "end": "1430880"
  },
  {
    "text": "see one it will mint a unique id and add it onto all uh requests it sends out any log",
    "start": "1430880",
    "end": "1438080"
  },
  {
    "text": "messages any events that it puts onto a queue so what you find is people automatically do",
    "start": "1438080",
    "end": "1444640"
  },
  {
    "text": "this because it is so useful in the case of any problems to be able to say what happened as part of this processing",
    "start": "1444640",
    "end": "1451919"
  },
  {
    "text": "if there are millions of checks happening every day then a one in a million event happens every day too so you get a lot",
    "start": "1452640",
    "end": "1459120"
  },
  {
    "text": "of transient noise something some instance had a problem it got restarted by the orchestrator but",
    "start": "1459120",
    "end": "1464559"
  },
  {
    "text": "somebody went red briefly so you really want to know when something's really wrong and you really want to know",
    "start": "1464559",
    "end": "1470720"
  },
  {
    "text": "where to focus your attention often with services that are all interconnected you can see a lot of",
    "start": "1470720",
    "end": "1476720"
  },
  {
    "text": "things go red because some fundamental thing went wrong we're trying to tackle this by adding business focused monitoring",
    "start": "1476720",
    "end": "1483520"
  },
  {
    "text": "so we identified some key capabilities for the financial times you know can people subscribe",
    "start": "1483520",
    "end": "1488720"
  },
  {
    "text": "can a journalist publish to the website and we're looking at very targeted monitoring or testis testing that tells us whether that",
    "start": "1488720",
    "end": "1495039"
  },
  {
    "text": "capability is okay so my ideal would be we have",
    "start": "1495039",
    "end": "1500159"
  },
  {
    "text": "10 tiles and if they're all green i could comfortably say we're in a good state right now",
    "start": "1500159",
    "end": "1507360"
  },
  {
    "text": "one thing that we definitely have realized after doing this for several years is that upgrades and migrations will",
    "start": "1508559",
    "end": "1516159"
  },
  {
    "text": "cause you a lot of pain unless you think about how you're going to approach it you're always going to need to migrate",
    "start": "1516159",
    "end": "1521440"
  },
  {
    "text": "something maybe you built something from scratch and now there's something you can buy in you know we built our own service",
    "start": "1521440",
    "end": "1526640"
  },
  {
    "text": "orchestration but we moved to kubernetes when it was ready maybe you just need to upgrade versions of a database because it's deprecated or",
    "start": "1526640",
    "end": "1533760"
  },
  {
    "text": "you bought a tool and you've realized it was a horrible mistake you want to replace it with something else or maybe they've now decided to change",
    "start": "1533760",
    "end": "1540080"
  },
  {
    "text": "the way you charge you and you just can't afford it anymore so you need to build things so that you can migrate 150 services to something",
    "start": "1540080",
    "end": "1546640"
  },
  {
    "text": "new without a huge amount of work and that does mean automation so your deployment pipelines should be",
    "start": "1546640",
    "end": "1551840"
  },
  {
    "text": "templated so that you can add a new step into the deployment without having to do it manually in 150 places",
    "start": "1551840",
    "end": "1558240"
  },
  {
    "text": "let's say for example your security team says we're now going to scan um do security scanning on every on",
    "start": "1558240",
    "end": "1563520"
  },
  {
    "text": "every build you need to work out how to patch your services and we have some tools that will automate creation of prs",
    "start": "1563520",
    "end": "1570000"
  },
  {
    "text": "against a whole range of services based on the needs to upgrade something related to this though some of your",
    "start": "1570000",
    "end": "1576159"
  },
  {
    "text": "micro services may not change regularly we have some that you know honestly there's been no code checked in for a",
    "start": "1576159",
    "end": "1581760"
  },
  {
    "text": "couple of years and you don't really want to find out that they don't build anymore at the point where you urgently need to",
    "start": "1581760",
    "end": "1587760"
  },
  {
    "text": "patch them and some teams at the ft actually build their services every night so you pick",
    "start": "1587760",
    "end": "1593360"
  },
  {
    "text": "up issues with not being able to build the new service they don't necessarily deploy them but they build them",
    "start": "1593360",
    "end": "1601039"
  },
  {
    "start": "1601000",
    "end": "1821000"
  },
  {
    "text": "so that's that's some of the things that have helped us with building systems that we can support uh i think testing was probably uh one",
    "start": "1601679",
    "end": "1608640"
  },
  {
    "text": "of the things that took us a while to get to grips with and really changed as a result of doing",
    "start": "1608640",
    "end": "1615039"
  },
  {
    "text": "multiple releases every day so every service needs automated tests",
    "start": "1615039",
    "end": "1620559"
  },
  {
    "text": "you want something that's quick to run that captures regressions and it sits in your deployment pipeline but also",
    "start": "1620559",
    "end": "1625919"
  },
  {
    "text": "that developers can run while they're writing code for microservices",
    "start": "1625919",
    "end": "1631520"
  },
  {
    "text": "i tend to think the best return for automated tests is doing the boundary of a service so making a request in and looking at responses",
    "start": "1631520",
    "end": "1638640"
  },
  {
    "text": "so cindy wrote this fantastic blog post on testing microservices where she points out that if you're testing a's interaction with b",
    "start": "1638640",
    "end": "1645600"
  },
  {
    "text": "you don't really want to have to spin up c d and a redis instance so you are better off to mock out b",
    "start": "1645600",
    "end": "1652320"
  },
  {
    "text": "and because you don't want to run a test that forces everything to be there because when you have acceptance tests",
    "start": "1652320",
    "end": "1657679"
  },
  {
    "text": "running locally you force your developers towards running a full stack on your laptop and that is difficult at best",
    "start": "1657679",
    "end": "1665760"
  },
  {
    "text": "um especially where you have a mix of operating systems across the team which we did and in some cases it's impossible some",
    "start": "1665760",
    "end": "1671520"
  },
  {
    "text": "club fighters don't just don't exist locally and the config connecting the cloud provider services into your",
    "start": "1671520",
    "end": "1677279"
  },
  {
    "text": "business logic is also part of the solution so it needs to be tested really if you run acceptance tests",
    "start": "1677279",
    "end": "1683760"
  },
  {
    "text": "across your entire stack you just build a distributed monolith which is the worst of both worlds you're still thinking about this as a",
    "start": "1683760",
    "end": "1689679"
  },
  {
    "text": "single system to some extent you've coupled it but now it's a monolith where the communication is over http and when we",
    "start": "1689679",
    "end": "1696559"
  },
  {
    "text": "started work on the content platform we did build a suite of acceptance tests for testing the publishing of content",
    "start": "1696559",
    "end": "1702320"
  },
  {
    "text": "developers had to run pretty much the entire stack locally to be able to run the acceptance test pre-commit and i think that is a bit of an",
    "start": "1702320",
    "end": "1708840"
  },
  {
    "text": "anti-pattern so and it's a lot of effort to make sure it keeps working so",
    "start": "1708840",
    "end": "1714559"
  },
  {
    "text": "uh what do i advise instead well really testing and",
    "start": "1714559",
    "end": "1721840"
  },
  {
    "text": "production so it's the only place with the full system complexity the full data",
    "start": "1721840",
    "end": "1727120"
  },
  {
    "text": "and real user user behavior rather than our best guesses of that for ft.com it's the only place to test",
    "start": "1727120",
    "end": "1733600"
  },
  {
    "text": "we don't have a testing environment there's the developers laptops the automated testing in the build pipeline and there's live",
    "start": "1733600",
    "end": "1739840"
  },
  {
    "text": "other parts of the ft do have staging but many don't and people tend to worry about testing",
    "start": "1739840",
    "end": "1745120"
  },
  {
    "text": "in production but you know there are lots of ways that you can do this there's another great",
    "start": "1745120",
    "end": "1750159"
  },
  {
    "text": "blog post from cindy all about testing in production so canarying and feature flags they're",
    "start": "1750159",
    "end": "1755840"
  },
  {
    "text": "part of this and there are lots of tools that minimize the impact on your customers",
    "start": "1755840",
    "end": "1762159"
  },
  {
    "text": "you want to test your infrastructure too i see chaos engineering as a kind of testing so you're testing that your infrastructure works the way you think",
    "start": "1762480",
    "end": "1768480"
  },
  {
    "text": "it does when things degrade you're testing that you actually built redundancy and resilience in",
    "start": "1768480",
    "end": "1773520"
  },
  {
    "text": "and maybe you thought you had but until you've tested it you don't know and one example i use for this is many",
    "start": "1773520",
    "end": "1779760"
  },
  {
    "text": "years ago when we were still in the data center we wanted to test that we could fail over to run entirely out of one",
    "start": "1779760",
    "end": "1785440"
  },
  {
    "text": "data center and we scheduled this talked a lot about it in advance came in on saturday to test it",
    "start": "1785440",
    "end": "1792320"
  },
  {
    "text": "deliberately broke the network connection into one of the data centers and discovered that the um",
    "start": "1792320",
    "end": "1797440"
  },
  {
    "text": "tool that was meant to do the failover only worked if both data centers were available so we've immediately found something",
    "start": "1797440",
    "end": "1803600"
  },
  {
    "text": "really useful abandoned it went home said work okay we're going to do this other time we have to get this fixed",
    "start": "1803600",
    "end": "1808640"
  },
  {
    "text": "first um so our assumption was completely wrong and that's what chaos engineering is about it's not about breaking things",
    "start": "1808640",
    "end": "1813760"
  },
  {
    "text": "it's about testing that things you expect to have work will do",
    "start": "1813760",
    "end": "1820880"
  },
  {
    "start": "1821000",
    "end": "1895000"
  },
  {
    "text": "another thing that i think um has to change with the move to cloud native is how you support",
    "start": "1821279",
    "end": "1826399"
  },
  {
    "text": "your systems so i think the team that builds the system has to be the team",
    "start": "1826399",
    "end": "1832080"
  },
  {
    "text": "that runs it so this is adopting a devops the kind of things that go wrong are",
    "start": "1832080",
    "end": "1837440"
  },
  {
    "text": "often sufficiently complex that only the team that works on the system day-to-day has a chance of working out what's happening",
    "start": "1837440",
    "end": "1842799"
  },
  {
    "text": "you can't hand things off to another team if they're changing multiple times a day you just can't bring them up to speed it just slows you down and you want",
    "start": "1842799",
    "end": "1849600"
  },
  {
    "text": "high performing teams to be able to make their own choices of technology so if you're empowering your teams um so that they don't have to wait for",
    "start": "1849600",
    "end": "1857039"
  },
  {
    "text": "external teams to decide on something they don't have to pick from a very constrained set of architecture but you can't have a",
    "start": "1857039",
    "end": "1862880"
  },
  {
    "text": "central team supporting that wide variety of technology but the main reasons that i think that the team that builds a system",
    "start": "1862880",
    "end": "1869519"
  },
  {
    "text": "has to run it is because actually you build things differently when you have to respond at 3am so you know we will fail we will build",
    "start": "1869519",
    "end": "1876799"
  },
  {
    "text": "in some monitoring that will automatically fail over if this good to go endpoint is failing",
    "start": "1876799",
    "end": "1882000"
  },
  {
    "text": "this is good you know you're the best people to decide how to monitor your systems and if you're thinking about running",
    "start": "1882000",
    "end": "1887360"
  },
  {
    "text": "them when you build them you make different architectural and design decisions and they will reduce the amount of problems that you have",
    "start": "1887360",
    "end": "1894880"
  },
  {
    "text": "the final thing i want to talk about that changes is the way you're set up to deliver software so empowering teams and focusing on",
    "start": "1894880",
    "end": "1900799"
  },
  {
    "start": "1895000",
    "end": "2147000"
  },
  {
    "text": "speed doesn't mean there aren't central teams with a broader remit you don't want every team in your organization to have to solve the same",
    "start": "1900799",
    "end": "1907120"
  },
  {
    "text": "problems so you want to have central expertise in things like cyber security or observability",
    "start": "1907120",
    "end": "1912240"
  },
  {
    "text": "but these central teams need to work in a particular way to be successful and i'm a big fan of this team topologies",
    "start": "1912240",
    "end": "1918559"
  },
  {
    "text": "book and it's about how you organize your team so you can move fast and it describes ways of working that closely",
    "start": "1918559",
    "end": "1924880"
  },
  {
    "text": "match what we've ended up with through trial and error so the idea in team topologies is you",
    "start": "1924880",
    "end": "1929919"
  },
  {
    "text": "have these stream aligned teams that are working to develop new product features but you also have other teams that support those teams and",
    "start": "1929919",
    "end": "1936799"
  },
  {
    "text": "there are two that i want to talk about the first is platform teams these are teams that are building platforms that streamline teams use",
    "start": "1936799",
    "end": "1942960"
  },
  {
    "text": "so maybe you know we have a team called cloud enablement that manages how people use the cloud",
    "start": "1942960",
    "end": "1948559"
  },
  {
    "text": "they are protecting people from mistakes they're making sure people we have",
    "start": "1948559",
    "end": "1954080"
  },
  {
    "text": "granular aws accounts that permission and access is locked down we can focus on costs they provided",
    "start": "1954080",
    "end": "1960159"
  },
  {
    "text": "tooling that means you can tag non-production instances so we close them down overnight at weekends",
    "start": "1960159",
    "end": "1966080"
  },
  {
    "text": "if we close systems down overnight and at weekends we can save quite a large amount of money um and",
    "start": "1966080",
    "end": "1971840"
  },
  {
    "text": "that's something we can do centrally that team can know about new instance types they can know about the new things",
    "start": "1971840",
    "end": "1977360"
  },
  {
    "text": "aws have released and they can make sure we make the best use of things like reserved or spot instances",
    "start": "1977360",
    "end": "1983039"
  },
  {
    "text": "and there's sometimes i think a good case for a platform team at the next level up kubernetes is quite a complicated thing",
    "start": "1983039",
    "end": "1989360"
  },
  {
    "text": "to run and a pattern i've seen working elsewhere is there is some team running a kubernetes platform and providing",
    "start": "1989360",
    "end": "1994640"
  },
  {
    "text": "those streamlined teams with tools to use it the second thing i want to",
    "start": "1994640",
    "end": "1999840"
  },
  {
    "text": "talk about is enabling teams so these are teams that have expertise in a particular area and they do things",
    "start": "1999840",
    "end": "2005840"
  },
  {
    "text": "that allow other teams to be more productive maybe they build tooling they provide insight they offer expert",
    "start": "2005840",
    "end": "2011760"
  },
  {
    "text": "advice and training so something around cyber security observability web infrastructure and those teams need",
    "start": "2011760",
    "end": "2018480"
  },
  {
    "text": "to uh make things self-service they need to have great documentation you don't want",
    "start": "2018480",
    "end": "2024880"
  },
  {
    "text": "to have people having to come for you and wait for you to do something so it's really about making sure that is",
    "start": "2024880",
    "end": "2030480"
  },
  {
    "text": "asynchronous as you can do and there's a lot in the team topologies book about how to work uh across these types of different types",
    "start": "2030480",
    "end": "2036960"
  },
  {
    "text": "of team effectively one thing that uh you can make all of this hang together is to provide some",
    "start": "2036960",
    "end": "2043039"
  },
  {
    "text": "kind of guardrail some expectations from delivery teams and how to meet those expectations we're starting to work on",
    "start": "2043039",
    "end": "2048878"
  },
  {
    "text": "this a lot this year so this is these are the things that say well you know what what do you want to do when you're building an app what do",
    "start": "2048879",
    "end": "2055358"
  },
  {
    "text": "you need to consider and the first thing would be do you need to build it could you buy something in is this core to our business",
    "start": "2055359",
    "end": "2061200"
  },
  {
    "text": "function is it critical to us is it a differentiator or could we just pay someone else to do it and",
    "start": "2061200",
    "end": "2066638"
  },
  {
    "text": "use our teams to do something that gives us better value the second thing we want to document",
    "start": "2066639",
    "end": "2072158"
  },
  {
    "text": "more is the the technologies that we actually recommend at the ft we don't want every uh streamlined team to have to go and",
    "start": "2072159",
    "end": "2077839"
  },
  {
    "text": "work out which is the best data store that they could use for a particular reason so we're starting to",
    "start": "2077839",
    "end": "2082960"
  },
  {
    "text": "develop a golden path at the ft where we'll document here are our recommended",
    "start": "2082960",
    "end": "2088158"
  },
  {
    "text": "um data stores for example and if you're going to use them here's how you should back them up here's how you should",
    "start": "2088159",
    "end": "2093358"
  },
  {
    "text": "restore them sharing that that expertise that we're gradually developing in different teams",
    "start": "2093359",
    "end": "2099440"
  },
  {
    "text": "so golden path will be about having a default um that lets most people just get on with delivering business value",
    "start": "2099440",
    "end": "2106000"
  },
  {
    "text": "so in summary it's a transformation going to a truly cloud native it affects a lot of",
    "start": "2106000",
    "end": "2112800"
  },
  {
    "text": "the way that you do your job and it takes time and it's a multi-year thing really you get value earlier but it is going to",
    "start": "2112800",
    "end": "2119599"
  },
  {
    "text": "take an investment to get there i think it is worth doing because it transforms your ability to deliver value",
    "start": "2119599",
    "end": "2124960"
  },
  {
    "text": "to the business because you can do small low-risk changes that go live all the time and i think you can build a",
    "start": "2124960",
    "end": "2130480"
  },
  {
    "text": "software development organization that delivers higher value to the business but also is more um",
    "start": "2130480",
    "end": "2135680"
  },
  {
    "text": "interesting and enjoyable for the people inside that software organization to work because they're not waiting for someone else to make a decision they can",
    "start": "2135680",
    "end": "2142400"
  },
  {
    "text": "they can be empowered and say this is the best way that we should approach that so thank you if you're interested in",
    "start": "2142400",
    "end": "2148800"
  },
  {
    "start": "2147000",
    "end": "2170000"
  },
  {
    "text": "knowing more about the way the ft works we have a product technology blog that covers architecture process lots of",
    "start": "2148800",
    "end": "2154480"
  },
  {
    "text": "things like that",
    "start": "2154480",
    "end": "2159838"
  },
  {
    "text": "you",
    "start": "2169359",
    "end": "2171440"
  }
]