[
  {
    "text": "thank you so much Sammy I um I'm absolutely delighted to be here over",
    "start": "5040",
    "end": "11219"
  },
  {
    "text": "in Brisbane no my height in my court in McNamara TNA",
    "start": "11219",
    "end": "17840"
  },
  {
    "text": "kyoda welcome I am so in English that would be just",
    "start": "17840",
    "end": "24660"
  },
  {
    "text": "welcome my name is Tim McNamara be well",
    "start": "24660",
    "end": "30019"
  },
  {
    "text": "I'm here to talk about a programming language that has been voted developers most favorite sorry most loved",
    "start": "30539",
    "end": "36420"
  },
  {
    "text": "programming language for seven years in a row",
    "start": "36420",
    "end": "41718"
  },
  {
    "text": "from the stack over developer survey and",
    "start": "41879",
    "end": "47219"
  },
  {
    "text": "it's almost everywhere in uh in like the tech space and I'm hopeful to provide a",
    "start": "47219",
    "end": "54420"
  },
  {
    "text": "little bit of insight as to why rust is",
    "start": "54420",
    "end": "59460"
  },
  {
    "text": "both an increasingly uh chosen option as well as",
    "start": "59460",
    "end": "65460"
  },
  {
    "text": "let's say like if you wanted to Tinker with it at work to kind of give you a little bit of an edge",
    "start": "65460",
    "end": "72540"
  },
  {
    "text": "a small shout out as well to Lily's talk that was just prior to this one um if you hit if you weren't able to see",
    "start": "72540",
    "end": "78240"
  },
  {
    "text": "it I'd really encourage you to look at the recording and uh because I think that was the other piece of rust content",
    "start": "78240",
    "end": "84960"
  },
  {
    "text": "at the conference super okay so I'd really like to start with",
    "start": "84960",
    "end": "91020"
  },
  {
    "text": "this um little snippet from the stick overflow blog from a consultant trainer",
    "start": "91020",
    "end": "98280"
  },
  {
    "text": "called Jake Golding which describes kind of like the one sentence summary of why rust",
    "start": "98280",
    "end": "105420"
  },
  {
    "text": "it's a solid step forward and the downsides that come with that",
    "start": "105420",
    "end": "112020"
  },
  {
    "text": "solid step forward are manageable",
    "start": "112020",
    "end": "115880"
  },
  {
    "text": "I'm from New Zealand we've got some good stuff there uh like flying to the",
    "start": "119700",
    "end": "124860"
  },
  {
    "text": "Concords mountains once every five years or so we have a qriket team that actually you know gets selected and",
    "start": "124860",
    "end": "131039"
  },
  {
    "text": "knows how to win a game which is useful um but sadly we haven't been able to",
    "start": "131039",
    "end": "136980"
  },
  {
    "text": "figure out software in fact no one has really figured out software",
    "start": "136980",
    "end": "143640"
  },
  {
    "text": "if you were uh from a large software Enterprise or",
    "start": "143640",
    "end": "150239"
  },
  {
    "text": "company and you were really really focused on security and safety",
    "start": "150239",
    "end": "159260"
  },
  {
    "text": "you would find if you dig into all of the CVS that you patch that somewhere",
    "start": "159300",
    "end": "164340"
  },
  {
    "text": "around 70 percent relate to memory safety",
    "start": "164340",
    "end": "169940"
  },
  {
    "text": "and this is a relatively consistent theme that has actually been",
    "start": "170280",
    "end": "177319"
  },
  {
    "text": "independently discovered through multiple attempts",
    "start": "177319",
    "end": "184260"
  },
  {
    "text": "and it turns out that people have started to ask the question like could we do better",
    "start": "184260",
    "end": "190680"
  },
  {
    "text": "and by the way rust will actually eliminate the entire",
    "start": "190680",
    "end": "197580"
  },
  {
    "text": "class of bugs related to memory safety without",
    "start": "197580",
    "end": "203580"
  },
  {
    "text": "any additional runtime costs cost there is no garbage collector there is no",
    "start": "203580",
    "end": "208920"
  },
  {
    "text": "runtime that is sitting alongside your program kind of nursing things along and making sure that objects are happy",
    "start": "208920",
    "end": "217459"
  },
  {
    "text": "just gonna provide like a tiny glimpse of rust it's very hard to introduce a programming language",
    "start": "220860",
    "end": "226379"
  },
  {
    "text": "to people that probably have never seen it before and so hopefully there's a relatively representative examples",
    "start": "226379",
    "end": "233640"
  },
  {
    "text": "I uh I'm also hopeful that I'm not terrifying people with some crazy syntax okay so",
    "start": "233640",
    "end": "240780"
  },
  {
    "text": "allow me to kind of go through here so we start with input we've got a a an",
    "start": "240780",
    "end": "246360"
  },
  {
    "text": "ampersand and some square brackets and then i-32 so this is a read-only",
    "start": "246360",
    "end": "252180"
  },
  {
    "text": "reference to some slice of integers rust is a what we call a systems programming",
    "start": "252180",
    "end": "259199"
  },
  {
    "text": "language so it really cares about how wide in memory my integers are so it's",
    "start": "259199",
    "end": "264600"
  },
  {
    "text": "going to actually ask me to say that this is a 32-bit integer",
    "start": "264600",
    "end": "270060"
  },
  {
    "text": "my function returns another integer",
    "start": "270060",
    "end": "275300"
  },
  {
    "text": "its body contains this it's a method over my slice which returns an iterator",
    "start": "276060",
    "end": "282479"
  },
  {
    "text": "over every value in that slice and then applies an anonymous function uh to",
    "start": "282479",
    "end": "290460"
  },
  {
    "text": "every item and returns another iterator which by the way uh so again with the",
    "start": "290460",
    "end": "296580"
  },
  {
    "text": "reference or the Ampersand is a reference to each item in the list",
    "start": "296580",
    "end": "304080"
  },
  {
    "text": "and by the way it's read-only which means that it's impossible either on the outside of this function and some other",
    "start": "304080",
    "end": "310560"
  },
  {
    "text": "thread or inside this function to actually mutate that slice as we're",
    "start": "310560",
    "end": "315780"
  },
  {
    "text": "going through we then return the sum so the sum at the end creates",
    "start": "315780",
    "end": "322380"
  },
  {
    "text": "sort of collects up all of the integers that we're processing and then",
    "start": "322380",
    "end": "330060"
  },
  {
    "text": "accumulates them towards the final integer rust is an expression based language from and it",
    "start": "330060",
    "end": "336780"
  },
  {
    "text": "kind of shares some pieces from functional programming and so there's actually no return",
    "start": "336780",
    "end": "342120"
  },
  {
    "text": "keyword uh that we well there is a routine keyword in the language but we're not using it in this in this",
    "start": "342120",
    "end": "348720"
  },
  {
    "text": "function rust will return the last the result of the last",
    "start": "348720",
    "end": "354360"
  },
  {
    "text": "expression in your function okay cool but let's let's say okay Tim that was",
    "start": "354360",
    "end": "360960"
  },
  {
    "text": "fine the moment I really want what I heard Russ was really really good at was parallelism",
    "start": "360960",
    "end": "367020"
  },
  {
    "text": "and concurrency and I said to you oh gosh well you have to sort of spin up some threads and",
    "start": "367020",
    "end": "372180"
  },
  {
    "text": "create a thread pull and then like sort of synchronize so that you're sending all of your input data into",
    "start": "372180",
    "end": "378660"
  },
  {
    "text": "um to kind of distribute those out and uh it turns out that that's actually",
    "start": "378660",
    "end": "384479"
  },
  {
    "text": "incorrect there's a library that can do all of that for you so rayon what we're doing here is",
    "start": "384479",
    "end": "391520"
  },
  {
    "text": "importing what we call in Russian and rust the rust terminology and a trait which might be an interface",
    "start": "391520",
    "end": "399539"
  },
  {
    "text": "and or you might also think of as an abstract Base Class and we do something that kind of feels a",
    "start": "399539",
    "end": "404880"
  },
  {
    "text": "little bit like let's say monkey patching that you might be used to from say a ruby and",
    "start": "404880",
    "end": "411240"
  },
  {
    "text": "it turns out that this is statically compiled and we're actually kind of",
    "start": "411240",
    "end": "416660"
  },
  {
    "text": "granting slices with a new method which will do all of the bookkeeping",
    "start": "416660",
    "end": "424199"
  },
  {
    "text": "related to creating the threads sending the items from my input stream to those",
    "start": "424199",
    "end": "431580"
  },
  {
    "text": "threads applying those Anonymous functions in parallel and then accumulating the result in my sum method",
    "start": "431580",
    "end": "438180"
  },
  {
    "text": "at the end okay",
    "start": "438180",
    "end": "445759"
  },
  {
    "text": "don't panic so this is a more complex example but what we're doing here is creating a",
    "start": "447060",
    "end": "452699"
  },
  {
    "text": "frequency distribution what we're doing here is creating a map or a dictionary if you're from python that has words on",
    "start": "452699",
    "end": "459360"
  },
  {
    "text": "one side and then the number of times that they appear in the input text on the other",
    "start": "459360",
    "end": "465060"
  },
  {
    "text": "side so we're sort of counting up each word what I'm trying to demonstrate here at",
    "start": "465060",
    "end": "471780"
  },
  {
    "text": "least on the surface level is that rust can sort of feel high level",
    "start": "471780",
    "end": "477240"
  },
  {
    "text": "and it's relatively ergonomic to program in even though what we've been promised",
    "start": "477240",
    "end": "482759"
  },
  {
    "text": "or told it's a systems programming language and those are supposed to be difficult and uh complex so we start",
    "start": "482759",
    "end": "490620"
  },
  {
    "text": "here as we initialize our hashmap with it's empty and then we go through our text and kind of return some iterator of",
    "start": "490620",
    "end": "497699"
  },
  {
    "text": "sub slices of the input text and then we go and check if there are any pieces of",
    "start": "497699",
    "end": "503039"
  },
  {
    "text": "punctuation on the left or the right sides we trim them away so if the",
    "start": "503039",
    "end": "508500"
  },
  {
    "text": "characters at the site each sub Slice on the white space of the white spice white",
    "start": "508500",
    "end": "514320"
  },
  {
    "text": "space delimiters uh not Alpha betec then we remove them",
    "start": "514320",
    "end": "521099"
  },
  {
    "text": "we then go into the counts hash map and ask is this word already in there and if",
    "start": "521099",
    "end": "528959"
  },
  {
    "text": "not please provide me with a zero and then I increment that count",
    "start": "528959",
    "end": "536580"
  },
  {
    "text": "it turns out that count is a mutable reference into the hashmap",
    "start": "536580",
    "end": "542220"
  },
  {
    "text": "itself and so there's a dereference operator inside count inside for that",
    "start": "542220",
    "end": "547260"
  },
  {
    "text": "count variable as well again we don't need a return keyword because the last expression which",
    "start": "547260",
    "end": "553560"
  },
  {
    "text": "happens to just be evaluating the what counts as at the end",
    "start": "553560",
    "end": "559380"
  },
  {
    "text": "is the return of the entire function",
    "start": "559380",
    "end": "564440"
  },
  {
    "text": "there are a couple of things underneath the covers that I really want to point out before we move on",
    "start": "565019",
    "end": "570600"
  },
  {
    "text": "one again this is a read-only reference to text it's impossible for this text",
    "start": "570600",
    "end": "578399"
  },
  {
    "text": "variable to be mutated while we are processing its contents",
    "start": "578399",
    "end": "585500"
  },
  {
    "text": "perhaps more importantly really if you really care about memories uh and memory",
    "start": "585920",
    "end": "591899"
  },
  {
    "text": "utilization there are zero copies in this method",
    "start": "591899",
    "end": "596940"
  },
  {
    "text": "at no time do we take some input text sorry some input slice copy it and then",
    "start": "596940",
    "end": "603060"
  },
  {
    "text": "sort of insert that into the hash map the only thing inside there is a pointer",
    "start": "603060",
    "end": "610980"
  },
  {
    "text": "is the key because it turns out that references happen to be implemented as pointers and a u32 so an unsigned",
    "start": "610980",
    "end": "619019"
  },
  {
    "text": "integer that's 32 bits wide it can count up to about 4 billion if you've got a a very very large text this will overflow",
    "start": "619019",
    "end": "625920"
  },
  {
    "text": "go back to zero so hopefully uh that isn't what what you expected",
    "start": "625920",
    "end": "633959"
  },
  {
    "text": "hopefully we're going to be in bounds um just because I know that everyone's going to be super excited on how to pass",
    "start": "633959",
    "end": "641100"
  },
  {
    "text": "their programming um interview I thought I would Implement",
    "start": "641100",
    "end": "647040"
  },
  {
    "text": "Fizz Buzz as well and do in a way that's kind of neat so I sat here with it with an iterator over between 1 to 100",
    "start": "647040",
    "end": "654899"
  },
  {
    "text": "inclusive which is the the equal sign and then I take the modulus of three and",
    "start": "654899",
    "end": "661140"
  },
  {
    "text": "five and if the remainder of those divisions are zero and zero on both sides I then print Fizz buzz and I guess",
    "start": "661140",
    "end": "668760"
  },
  {
    "text": "you know how first bus works uh I quite like this because it really",
    "start": "668760",
    "end": "674279"
  },
  {
    "text": "shows that we can have these very elegant constructs inside a language",
    "start": "674279",
    "end": "680760"
  },
  {
    "text": "that is compared to some other so it's like a c plus or a Java which",
    "start": "680760",
    "end": "687200"
  },
  {
    "text": "we don't really have this kind of niceties and rust is late or was late to",
    "start": "687200",
    "end": "694200"
  },
  {
    "text": "the programming world and was able to really provide uh",
    "start": "694200",
    "end": "700079"
  },
  {
    "text": "programmers with what they call in the nice things right",
    "start": "700079",
    "end": "705800"
  },
  {
    "text": "more important though than the programs you can write are the programs that you cannot write in Rust",
    "start": "706560",
    "end": "714240"
  },
  {
    "text": "so rust is a more strict programming language remember that the uh the reason",
    "start": "714240",
    "end": "721500"
  },
  {
    "text": "why we can eliminate let's say 70 of security vulnerabilities is because there are some subset of programs which",
    "start": "721500",
    "end": "727800"
  },
  {
    "text": "here no longer allowed to write and this one or something similar got me",
    "start": "727800",
    "end": "734640"
  },
  {
    "text": "multiple times as I was programming let's say in Python where I would confuse the assignment operator with the",
    "start": "734640",
    "end": "741480"
  },
  {
    "text": "quality let's I'll see if this will work we're going to find it very quickly",
    "start": "741480",
    "end": "747480"
  },
  {
    "text": "uh if I try to do the equivalent thing in Rust",
    "start": "747480",
    "end": "753079"
  },
  {
    "text": "first of all I get I told I get a syntax here which is well a warning saying Tim",
    "start": "755220",
    "end": "760860"
  },
  {
    "text": "come on this is rust you don't need the the parentheses you don't need the brackets",
    "start": "760860",
    "end": "766880"
  },
  {
    "text": "uh then we get a type error so it turns out that this program will refuse to compile and this just provides",
    "start": "767579",
    "end": "773880"
  },
  {
    "text": "a little bit of a hint at some of the of what's to come the result of the rust is what we were",
    "start": "773880",
    "end": "780600"
  },
  {
    "text": "mentioned a couple of times already as an expression-based language the result of an assignment is uh what we call the",
    "start": "780600",
    "end": "787680"
  },
  {
    "text": "the unit value which represents it's kind of like the none of um of rust",
    "start": "787680",
    "end": "793920"
  },
  {
    "text": "in a Boolean context that doesn't make sense the only thing that we can provide to a Boolean is a like by by bullying I",
    "start": "793920",
    "end": "801600"
  },
  {
    "text": "mean the if the only thing we could provide to an F is a Boolean and then hello we also get this really nice help",
    "start": "801600",
    "end": "808320"
  },
  {
    "text": "message why don't you try the equality sign",
    "start": "808320",
    "end": "813620"
  },
  {
    "text": "and we can click run and uh we're happy again so it doesn't equal 24 so it",
    "start": "814079",
    "end": "819899"
  },
  {
    "text": "doesn't print out question mark",
    "start": "819899",
    "end": "822980"
  },
  {
    "text": "here's something that's slightly more complex there's two halves to this program one is uh sort of initialization",
    "start": "826620",
    "end": "833220"
  },
  {
    "text": "stage where we create an arraylist which is a growable list of uh in our case",
    "start": "833220",
    "end": "838980"
  },
  {
    "text": "integers in Java we create we and we insert one two and",
    "start": "838980",
    "end": "844500"
  },
  {
    "text": "three the second stage is a check we we print it out and then we kind of do some",
    "start": "844500",
    "end": "850740"
  },
  {
    "text": "processing and uh towards them we print it out again and see what's changed",
    "start": "850740",
    "end": "856380"
  },
  {
    "text": "hopefully everyone's seen the bug we can't iterate over the list and also",
    "start": "856380",
    "end": "861660"
  },
  {
    "text": "remove things from the the list at the same time Java c will happily compile this",
    "start": "861660",
    "end": "868860"
  },
  {
    "text": "it will explode at you at runtime it will have you'll you'll encounter",
    "start": "868860",
    "end": "874560"
  },
  {
    "text": "runtime exception uh rust will be a little bit more pedantic",
    "start": "874560",
    "end": "881540"
  },
  {
    "text": "so here the equivalent is what we call a Victor and we push instead of add so that's all",
    "start": "882060",
    "end": "887820"
  },
  {
    "text": "fine we try and print numbers and then we remove the first",
    "start": "887820",
    "end": "893339"
  },
  {
    "text": "item of the list of numbers and then we print it out again so let's try and compile this guy",
    "start": "893339",
    "end": "900120"
  },
  {
    "text": "and the official we get we can again another warning about um style Let's ignore that for now",
    "start": "900120",
    "end": "907819"
  },
  {
    "text": "and then we get this big kind of horrible error message saying talking all about movement and borrowing and ownership",
    "start": "908579",
    "end": "915560"
  },
  {
    "text": "uh it's saying that if you really what this is saying is",
    "start": "915600",
    "end": "921980"
  },
  {
    "text": "actually I'll make it a little bit more explicit a for Loop and rust is sort of synthetic",
    "start": "923279",
    "end": "930000"
  },
  {
    "text": "sugar for a method called intuita",
    "start": "930000",
    "end": "937320"
  },
  {
    "text": "and into Eda so we're attempting to take the numbers",
    "start": "937320",
    "end": "942839"
  },
  {
    "text": "vector and turn it into a an iterator over the the Victor actually takes what",
    "start": "942839",
    "end": "949500"
  },
  {
    "text": "we call ownership of numbers and that's a problem because when you",
    "start": "949500",
    "end": "956699"
  },
  {
    "text": "are the owner uh it's your job to remove things and in",
    "start": "956699",
    "end": "962100"
  },
  {
    "text": "a sense and so rust is saying hello Tim you can't iterate across something and",
    "start": "962100",
    "end": "969240"
  },
  {
    "text": "also mutate it at the same time or at least you can't change the number of items the number of elements in the list",
    "start": "969240",
    "end": "975060"
  },
  {
    "text": "that's not something that is a um a valid move",
    "start": "975060",
    "end": "980519"
  },
  {
    "text": "it's giving me some advice around you could try to fix the immediate problem",
    "start": "980519",
    "end": "986399"
  },
  {
    "text": "that the compiler detects by adding an ampersand at the front so this is going to say can I please take a read-only",
    "start": "986399",
    "end": "993120"
  },
  {
    "text": "reference to numbers and then we get a complaint about immutability so I'm just going to keep moving because we could",
    "start": "993120",
    "end": "1000560"
  },
  {
    "text": "try and get ourselves unstuck but essentially we'll detect that it's impossible that we will not be able to",
    "start": "1000560",
    "end": "1006079"
  },
  {
    "text": "force rust to be able to iterate something and mutate it at the same time or at",
    "start": "1006079",
    "end": "1011720"
  },
  {
    "text": "least add or remove elements inside the list so we can in fact I think even the",
    "start": "1011720",
    "end": "1017360"
  },
  {
    "text": "stronger assertion around mutation is true to um",
    "start": "1017360",
    "end": "1022399"
  },
  {
    "text": "here's a fun one JavaScript I mean everyone loves to complain about JavaScript so the",
    "start": "1022399",
    "end": "1029058"
  },
  {
    "text": "computer scientists in the room will know that the set data type one of its properties is that it removes duplicates",
    "start": "1029059",
    "end": "1037480"
  },
  {
    "text": "and therefore if two I elements if two things attempt to be inserted into a set",
    "start": "1038380",
    "end": "1044780"
  },
  {
    "text": "that are equivalent only one of them should remain",
    "start": "1044780",
    "end": "1050000"
  },
  {
    "text": "and turns out though that JavaScript equality semantics are slightly",
    "start": "1050000",
    "end": "1055280"
  },
  {
    "text": "misleading my understanding is that they actually refer to um to the address space in memory which",
    "start": "1055280",
    "end": "1061340"
  },
  {
    "text": "is something that I care about a lot when I program the JavaScript um and uh rust will",
    "start": "1061340",
    "end": "1069919"
  },
  {
    "text": "force you to choose so let's let's see what I mean",
    "start": "1069919",
    "end": "1076400"
  },
  {
    "text": "so here we have a collection we've got a set and I've created my object and it contains an ID field so rust is going to",
    "start": "1076400",
    "end": "1083539"
  },
  {
    "text": "be less friendly at kind of dynamically creating data structures they kind of need to create a struct myself",
    "start": "1083539",
    "end": "1089960"
  },
  {
    "text": "and then let's see if I can like compile this it's going to say no let's say that you it doesn't Implement",
    "start": "1089960",
    "end": "1096440"
  },
  {
    "text": "traits this trait thing um so one way to read this if you're from an object oriented background would",
    "start": "1096440",
    "end": "1102500"
  },
  {
    "text": "be to say that rust uh of this object type",
    "start": "1102500",
    "end": "1108020"
  },
  {
    "text": "with this object struct type doesn't Implement uh isn't like it",
    "start": "1108020",
    "end": "1113480"
  },
  {
    "text": "doesn't inherit from equality so we can ask rust to do",
    "start": "1113480",
    "end": "1119720"
  },
  {
    "text": "something for us we can ask the compiler to actually derive",
    "start": "1119720",
    "end": "1126320"
  },
  {
    "text": "equality and in fact equality requires this sort of sub trait called partial",
    "start": "1126320",
    "end": "1132919"
  },
  {
    "text": "equality because of the way that floating Point works",
    "start": "1132919",
    "end": "1138020"
  },
  {
    "text": "turns out not a number um means that for floating points there is",
    "start": "1138020",
    "end": "1146020"
  },
  {
    "text": "a uh not a number is always compare as an equal even if the patterns are the",
    "start": "1146020",
    "end": "1153440"
  },
  {
    "text": "same and for that reason there are these kind of weird there's two traits now we're also being asked for another one",
    "start": "1153440",
    "end": "1159320"
  },
  {
    "text": "which is hash once this once this compiles",
    "start": "1159320",
    "end": "1166100"
  },
  {
    "text": "we get one so the the size of the set after two insertions is one which is",
    "start": "1166100",
    "end": "1172460"
  },
  {
    "text": "kind of a semantic meaning that's closer to what we expect there are",
    "start": "1172460",
    "end": "1178760"
  },
  {
    "text": "but we actually get to choose we could manually Implement equality and say that",
    "start": "1178760",
    "end": "1184460"
  },
  {
    "text": "it really cares what we really care about we're moving inequality is like the state of the universe or something",
    "start": "1184460",
    "end": "1190539"
  },
  {
    "text": "if we break the trust that rust the type system provides",
    "start": "1190539",
    "end": "1195620"
  },
  {
    "text": "um we can do whatever we want lastly and I don't mean to pick on go but a lot of people compare rust and go",
    "start": "1195620",
    "end": "1201860"
  },
  {
    "text": "so I thought that I would um do the same so rust",
    "start": "1201860",
    "end": "1207919"
  },
  {
    "text": "sorry go in this program what we're doing is we're printing hello world we start we're printing a map",
    "start": "1207919",
    "end": "1215360"
  },
  {
    "text": "and the name that we're printing as our default is world",
    "start": "1215360",
    "end": "1221179"
  },
  {
    "text": "and then we Spawn Two go routines Tim and Tom the question for the audience is",
    "start": "1221179",
    "end": "1228919"
  },
  {
    "text": "wait what are we printing at the end",
    "start": "1228919",
    "end": "1234039"
  },
  {
    "text": "it's not actually a trick question um it turns out this is completely non-deterministic",
    "start": "1234200",
    "end": "1240740"
  },
  {
    "text": "we don't know it's up to the go scheduler at runtime and the random seed that",
    "start": "1240740",
    "end": "1245840"
  },
  {
    "text": "um is created when it initializes as to what actually prints out",
    "start": "1245840",
    "end": "1251660"
  },
  {
    "text": "Russ will not be happy with a program like this Russ is really going to want you to",
    "start": "1251660",
    "end": "1258020"
  },
  {
    "text": "specify exactly what you mean when you create when you provide shared access to memory across threads",
    "start": "1258020",
    "end": "1265120"
  },
  {
    "text": "and it is only going to enable one location that has mutable read write",
    "start": "1265120",
    "end": "1271280"
  },
  {
    "text": "let's say mutation their ability to mutate um",
    "start": "1271280",
    "end": "1276400"
  },
  {
    "text": "however you can read from multiple from the same location you can have multiple readers but only one one writer",
    "start": "1277520",
    "end": "1285760"
  },
  {
    "text": "and very broad like this is this is my broad claim that I feel that rust is an",
    "start": "1286880",
    "end": "1293240"
  },
  {
    "text": "empowering technology it really creates a sense because you have these",
    "start": "1293240",
    "end": "1298460"
  },
  {
    "text": "guardrails around which programs because a smaller subset of programs will compile",
    "start": "1298460",
    "end": "1303740"
  },
  {
    "text": "and the subset that compiles are kind of the valid programs which is useful we actually want to not have things crash",
    "start": "1303740",
    "end": "1310280"
  },
  {
    "text": "at runtime it kind of provides this mental freedom to experiment and explore",
    "start": "1310280",
    "end": "1318760"
  },
  {
    "text": "so we can kind of look at write-ups for um",
    "start": "1319280",
    "end": "1324580"
  },
  {
    "text": "users who have used the rust language and it turns out that",
    "start": "1324679",
    "end": "1329780"
  },
  {
    "text": "Russ is really really good and here's one company who actually managed to save 300 virtual CPU cores",
    "start": "1329780",
    "end": "1338620"
  },
  {
    "text": "for their service while providing",
    "start": "1338620",
    "end": "1345020"
  },
  {
    "text": "like a lower medium and actually lower tail latencies as well so they actually improve the customer experience while in",
    "start": "1345020",
    "end": "1352580"
  },
  {
    "text": "like room removing 75 percent of their CPU usage",
    "start": "1352580",
    "end": "1357679"
  },
  {
    "text": "and 95 of their memory usage which for me is really important because",
    "start": "1357679",
    "end": "1364700"
  },
  {
    "text": "this actually means that our claim as a technology as an industry around sustainable our claims are actually uh",
    "start": "1364700",
    "end": "1372320"
  },
  {
    "text": "potentially coming to fruition I'm quite a big Eco Warrior so hopefully you won't blame",
    "start": "1372320",
    "end": "1378500"
  },
  {
    "text": "me for bringing up the sustainability angle um",
    "start": "1378500",
    "end": "1383900"
  },
  {
    "text": "if you run the equivalent Lambda function in multiple run times you'll detect that rust tends to outperform",
    "start": "1383900",
    "end": "1390700"
  },
  {
    "text": "almost everything else available and one claim that I make is that the",
    "start": "1390700",
    "end": "1399799"
  },
  {
    "text": "rust Lambda function that you write will like",
    "start": "1399799",
    "end": "1404960"
  },
  {
    "text": "will have finished executing by the time that the python interpreter has read your script",
    "start": "1404960",
    "end": "1411880"
  },
  {
    "text": "I can tell you very and very broad terms about our experience at AWS",
    "start": "1413179",
    "end": "1420039"
  },
  {
    "text": "uh the bulk of AWS is written in Java and particularly with the coretto JV",
    "start": "1420140",
    "end": "1426559"
  },
  {
    "text": "and teams that have experimented with the Java runtime fine cold start latencies on the Lambda you know",
    "start": "1426559",
    "end": "1432140"
  },
  {
    "text": "somewhere with eight to 12 seconds with rust this comes down at the cold start for you know I think it's under a second",
    "start": "1432140",
    "end": "1439700"
  },
  {
    "text": "and then the uh response time like in the warm state is we're talking about",
    "start": "1439700",
    "end": "1447679"
  },
  {
    "text": "like single digit two small tens of millisecond responses consistently which",
    "start": "1447679",
    "end": "1453919"
  },
  {
    "text": "is ridiculously important for a company that is laser focused on cost",
    "start": "1453919",
    "end": "1460780"
  },
  {
    "text": "one of the public case studies provided by the um the rust Foundation actually talks in very similar terms about uh",
    "start": "1461179",
    "end": "1468620"
  },
  {
    "text": "tilda's experience so tilde is a startup and they have a little server oh sorry a",
    "start": "1468620",
    "end": "1477020"
  },
  {
    "text": "little service that requires a runtime agent on their clients",
    "start": "1477020",
    "end": "1482240"
  },
  {
    "text": "compute instances it turns out that when your agent takes let's say 100 Megs like steady state",
    "start": "1482240",
    "end": "1488900"
  },
  {
    "text": "people start to notice and complain and it turns out that multiple people",
    "start": "1488900",
    "end": "1495860"
  },
  {
    "text": "were complaining about this agent because it turns out that they were living inside hiroku and they would like hit the ceilings",
    "start": "1495860",
    "end": "1503140"
  },
  {
    "text": "rust enabled tilde to affect to effectively just turn their agent into",
    "start": "1503840",
    "end": "1509299"
  },
  {
    "text": "something that is more or less invisible from an operations standpoint for their customers and by the way the stuff",
    "start": "1509299",
    "end": "1516380"
  },
  {
    "text": "that's kind of behind the curtains their server Appliance used to require a five",
    "start": "1516380",
    "end": "1521419"
  },
  {
    "text": "gigabyte steady state memory and that would shrunk all the way down to 50 Megs",
    "start": "1521419",
    "end": "1527980"
  },
  {
    "text": "oh this example here is from Discord so the Discord Blog has a very detailed",
    "start": "1530480",
    "end": "1537440"
  },
  {
    "text": "introduction to the comparison between go and rust it's quite hard to detect or",
    "start": "1537440",
    "end": "1542659"
  },
  {
    "text": "from there is a purple line and or there are four purple lines and four blue lines the purple is go and the blue is",
    "start": "1542659",
    "end": "1550760"
  },
  {
    "text": "rust it turns out that the garbage collection pauses under heavy contention introduced very",
    "start": "1550760",
    "end": "1558860"
  },
  {
    "text": "significant CPU spikes every two seconds which resulted in their customers",
    "start": "1558860",
    "end": "1564620"
  },
  {
    "text": "experience a relatively large amount of pain because suddenly your tail latencies uh hit hundreds of",
    "start": "1564620",
    "end": "1570440"
  },
  {
    "text": "milliseconds and in fact the p100s for the go uh service there",
    "start": "1570440",
    "end": "1579320"
  },
  {
    "text": "are over like three or four seconds in some cases whereas in the the rust we've reduced",
    "start": "1579320",
    "end": "1586400"
  },
  {
    "text": "that to it looks like under two at the worst case",
    "start": "1586400",
    "end": "1592480"
  },
  {
    "text": "so I just kind of wanted to geek out a little bit I've got kind of like an advanced feature I don't know if anyone has played with operating systems but um",
    "start": "1593419",
    "end": "1600440"
  },
  {
    "text": "I thought I'd introduce inline assembly just as you know because you can uh",
    "start": "1600440",
    "end": "1606260"
  },
  {
    "text": "let's say that I wanted just to just to make it very clear the the point is that rust is a systems language or at least",
    "start": "1606260",
    "end": "1612799"
  },
  {
    "text": "it emerges in the systems Paradigm and does enable you to sort of Peel back every layer if you'd like to but this is",
    "start": "1612799",
    "end": "1620240"
  },
  {
    "text": "ASM for assembler and we're talking about x86 assembler so we're using shifts in",
    "start": "1620240",
    "end": "1626299"
  },
  {
    "text": "um we shift lift and addition to implement multiply by six so we create",
    "start": "1626299",
    "end": "1631820"
  },
  {
    "text": "we give it a u64 and we get it u64 out or at least that's kind of what it looks",
    "start": "1631820",
    "end": "1638179"
  },
  {
    "text": "like so let's try this we're going to get a compile error",
    "start": "1638179",
    "end": "1643279"
  },
  {
    "text": "saying Hey Tim you're trying to mutate X",
    "start": "1643279",
    "end": "1648740"
  },
  {
    "text": "so even when you're using inline assembly you still get rust's safeguards",
    "start": "1648740",
    "end": "1657278"
  },
  {
    "text": "uh and by the way we can now calculate 5 times 6 is 30. so well done well done",
    "start": "1659600",
    "end": "1665059"
  },
  {
    "text": "rust I'll just touch on very briefly a couple",
    "start": "1665059",
    "end": "1671059"
  },
  {
    "text": "of the services that we've implemented Russ is now uh a very mainstream language in fact I'm paid to support",
    "start": "1671059",
    "end": "1677659"
  },
  {
    "text": "rust in the company and uh if you're cloudfront so this is the CDN",
    "start": "1677659",
    "end": "1684020"
  },
  {
    "text": "product from AWS you get asked a lot to implement http 3.",
    "start": "1684020",
    "end": "1690140"
  },
  {
    "text": "this is something that they were really anxious about uh and then created they",
    "start": "1690140",
    "end": "1696440"
  },
  {
    "text": "ended up creating open source package called s2n Dash quick so the quick",
    "start": "1696440",
    "end": "1701480"
  },
  {
    "text": "implementation or HTTP 3 which is HTTP essentially over a UDP over to instead",
    "start": "1701480",
    "end": "1708799"
  },
  {
    "text": "of TCP is now implemented in Rust [Music] um",
    "start": "1708799",
    "end": "1714880"
  },
  {
    "text": "firecracker is the virtual machine technology or which is micro VMS so I'm",
    "start": "1714880",
    "end": "1722120"
  },
  {
    "text": "just thinking about the angry emails that I'm going to receive from my colleagues at work by Miss um describing",
    "start": "1722120",
    "end": "1727940"
  },
  {
    "text": "or failing to describe correctly what firecracker is uh it is a virtualization",
    "start": "1727940",
    "end": "1733340"
  },
  {
    "text": "system which enables Lambda and fargate so every time you've",
    "start": "1733340",
    "end": "1740480"
  },
  {
    "text": "ever worked with serverless at AWS you've driven it with rust",
    "start": "1740480",
    "end": "1746559"
  },
  {
    "text": "the Prime video application so the client application is completely different so this actually sits in",
    "start": "1746960",
    "end": "1754220"
  },
  {
    "text": "away from AWS into into Amazon land and the",
    "start": "1754220",
    "end": "1762080"
  },
  {
    "text": "Prime Video has a problem and that is they need so this is the thing that sits on smart TVs",
    "start": "1762260",
    "end": "1768620"
  },
  {
    "text": "it they need to support and test at least 8 000 different device types",
    "start": "1768620",
    "end": "1775720"
  },
  {
    "text": "all the way from like things that are smaller smaller than uh just just kind of you fit in your hand all the way",
    "start": "1776480",
    "end": "1782240"
  },
  {
    "text": "through to the kind of relatively large desktop systems that also serve the client it turns out that compiling Two web",
    "start": "1782240",
    "end": "1790399"
  },
  {
    "text": "assembly with rust actually kind of broke through a couple of performance ceilings that were really",
    "start": "1790399",
    "end": "1795919"
  },
  {
    "text": "starting to cause a lot of complaints and the uh once they kind of switch this",
    "start": "1795919",
    "end": "1801380"
  },
  {
    "text": "on the there's a blog post from February that describes this process of suddenly",
    "start": "1801380",
    "end": "1807100"
  },
  {
    "text": "you could kind of get the you could sense the impact of this had like in the contact center",
    "start": "1807100",
    "end": "1813620"
  },
  {
    "text": "lastly in this three and uh a new storage node so S3 is actually",
    "start": "1813620",
    "end": "1819679"
  },
  {
    "text": "quite a complicated architecture but on the hosts that are serving the content",
    "start": "1819679",
    "end": "1825559"
  },
  {
    "text": "we call these storage nodes a new type of backend is being re-implemented in Russ this thing called",
    "start": "1825559",
    "end": "1831980"
  },
  {
    "text": "Shard store it provides higher performance and higher reliability",
    "start": "1831980",
    "end": "1838240"
  },
  {
    "text": "than extremely optimized Java like the the S3 teams spend an",
    "start": "1838240",
    "end": "1846500"
  },
  {
    "text": "incredible amount of energy trying to invest trying to understand how to optimize their code and uh in the rust",
    "start": "1846500",
    "end": "1853580"
  },
  {
    "text": "implementation has been able to perform significantly better while also",
    "start": "1853580",
    "end": "1858740"
  },
  {
    "text": "introducing the rust Community to formal verification so if you've ever used the mathematical",
    "start": "1858740",
    "end": "1865039"
  },
  {
    "text": "provers or formal verifiers you might have noticed that in Rust",
    "start": "1865039",
    "end": "1872419"
  },
  {
    "text": "there is now the Kearney model Checker and a couple of other projects which are linked to in this paper here as well",
    "start": "1872419",
    "end": "1879140"
  },
  {
    "text": "that uh Amazon has pushed into open source",
    "start": "1879140",
    "end": "1885200"
  },
  {
    "text": "because they've enabled us to verify some of the claims that we're making around being able to recover from any",
    "start": "1885200",
    "end": "1890720"
  },
  {
    "text": "failure possible sadly though it's just software right",
    "start": "1890720",
    "end": "1897760"
  },
  {
    "text": "so I've made all these audacious claims around performance and you're going to save 95 of memory like all of this stuff",
    "start": "1897760",
    "end": "1903500"
  },
  {
    "text": "sadly like I've gone and got a there's there's got to be a hook like there's got to be a catch",
    "start": "1903500",
    "end": "1909559"
  },
  {
    "text": "um sadly uh you there are still bugs it doesn't catch everything so here's",
    "start": "1909559",
    "end": "1915740"
  },
  {
    "text": "something stupid to do um but something that's relatively fun I've got a negative one and I've got an",
    "start": "1915740",
    "end": "1922059"
  },
  {
    "text": "so another way to read this write this would be",
    "start": "1922059",
    "end": "1927100"
  },
  {
    "text": "something like that so I've got a and assigned integer that is negative one and then I'm going to cast that as an",
    "start": "1927860",
    "end": "1933980"
  },
  {
    "text": "unsigned and then like Ross happily compiles that",
    "start": "1933980",
    "end": "1939500"
  },
  {
    "text": "because this is the bit pattern of negative one in memory uh as an unsigned integer",
    "start": "1939500",
    "end": "1944960"
  },
  {
    "text": "and I can say like I'm running um what other tools do I have",
    "start": "1944960",
    "end": "1952580"
  },
  {
    "text": "um it turns out the the integer casting integer casting in Rust is a little bit",
    "start": "1952580",
    "end": "1959179"
  },
  {
    "text": "different if you've ever used C and C things will automatic like types will automatically be promoted to fit and",
    "start": "1959179",
    "end": "1964520"
  },
  {
    "text": "this causes really subtle irritating bugs rust will require that all casting is explicit but that doesn't actually",
    "start": "1964520",
    "end": "1971000"
  },
  {
    "text": "provide you with a whole bunch of security if you have context like this especially around overflowing or between",
    "start": "1971000",
    "end": "1979100"
  },
  {
    "text": "types so the problem that I've described or I'm trying to describe is that this is compiling onto a",
    "start": "1979100",
    "end": "1986419"
  },
  {
    "text": "uh the problem is basic i32",
    "start": "1986419",
    "end": "1993520"
  },
  {
    "text": "no no the problem really is that U size which is the",
    "start": "1993799",
    "end": "1999080"
  },
  {
    "text": "an unsigned integer of the width that is relates to the Target platform so on a",
    "start": "1999080",
    "end": "2006220"
  },
  {
    "text": "64-bit into CPU it's 64-bit wide but let's say on a microcontroller it might",
    "start": "2006220",
    "end": "2012279"
  },
  {
    "text": "be eight bits or actually let's say 16 bits wide um doesn't represent negative numbers",
    "start": "2012279",
    "end": "2020980"
  },
  {
    "text": "so instead I can opt in to using a slightly more",
    "start": "2020980",
    "end": "2027880"
  },
  {
    "text": "um angry syntax which is this try into",
    "start": "2027880",
    "end": "2034179"
  },
  {
    "text": "um which will attempt to apply the conversion and return what we call a",
    "start": "2034179",
    "end": "2039399"
  },
  {
    "text": "result at the end of it and I can try and unwrap it and say rust I know that inside that result",
    "start": "2039399",
    "end": "2045519"
  },
  {
    "text": "that you provide me is going to be a happy integer that the type hint is provided over here",
    "start": "2045519",
    "end": "2052300"
  },
  {
    "text": "on the left and it turns out that that breaks which is actually what we want",
    "start": "2052300",
    "end": "2059560"
  },
  {
    "text": "we from like numerical conversions we would rather the the program kind of",
    "start": "2059560",
    "end": "2064839"
  },
  {
    "text": "blows up in our face rather than just creating something that's mathematically invalid",
    "start": "2064839",
    "end": "2070240"
  },
  {
    "text": "um there are a couple of other things which I think are potentially",
    "start": "2070240",
    "end": "2076539"
  },
  {
    "text": "wrong is too strong but there are some lessons that the Russ Community has learned over time around effective use",
    "start": "2076919",
    "end": "2083378"
  },
  {
    "text": "of the technology and one of the things it's learning is how to teach",
    "start": "2083379",
    "end": "2089560"
  },
  {
    "text": "so if you go and ask the developers you know we heard seven years in a row the developers you know people really want",
    "start": "2089560",
    "end": "2095378"
  },
  {
    "text": "to program in Rust they're really excited about it um then some people try and read they read the documentation online they buy a",
    "start": "2095379",
    "end": "2102760"
  },
  {
    "text": "couple of books and they just give up right let's walk out it's like this sucks",
    "start": "2102760",
    "end": "2109500"
  },
  {
    "text": "I hate it that what kind of I hate it I'm out",
    "start": "2109599",
    "end": "2114760"
  },
  {
    "text": "experience is is common uh and if you ask people who have left",
    "start": "2114760",
    "end": "2121000"
  },
  {
    "text": "the rust community in the surveys why they did it turns out that a small majority relates to the teaching experience and so one of the",
    "start": "2121000",
    "end": "2129940"
  },
  {
    "text": "uh the since I started in about 2015 the",
    "start": "2129940",
    "end": "2135820"
  },
  {
    "text": "level of maturity around documentation for at the beginning into immediate and Advanced Materials are significantly",
    "start": "2135820",
    "end": "2142660"
  },
  {
    "text": "better all the way through from very guided resources through to kind of self",
    "start": "2142660",
    "end": "2148320"
  },
  {
    "text": "self-guided lab kind of content as well one thing that I find really annoying is",
    "start": "2148320",
    "end": "2154060"
  },
  {
    "text": "that it turns out that computers are difficult",
    "start": "2154060",
    "end": "2158040"
  },
  {
    "text": "and like rust has wonderful generics which provide really elegant code",
    "start": "2159520",
    "end": "2164560"
  },
  {
    "text": "but um sadly we get into programs like this so the implements that will kind of work",
    "start": "2164560",
    "end": "2169960"
  },
  {
    "text": "from the inside out here the implement the thing that actually does the work is this you double colon",
    "start": "2169960",
    "end": "2176440"
  },
  {
    "text": "double colon from self what this is a type conversion a generic",
    "start": "2176440",
    "end": "2181960"
  },
  {
    "text": "type conversion implementation and now we're going to start back at the",
    "start": "2181960",
    "end": "2187839"
  },
  {
    "text": "top impul and I've got this uh Square braces T and U so I'm creating two type",
    "start": "2187839",
    "end": "2194920"
  },
  {
    "text": "variables tnu in within the context of this what we",
    "start": "2194920",
    "end": "2200740"
  },
  {
    "text": "call an input block and we're implementing the trait into",
    "start": "2200740",
    "end": "2207099"
  },
  {
    "text": "for you for the type t so what this enables us to do is convert",
    "start": "2207099",
    "end": "2213220"
  },
  {
    "text": "from type T into Type U",
    "start": "2213220",
    "end": "2218400"
  },
  {
    "text": "and rust will automatically implement this trait for any type for which it the type from",
    "start": "2218740",
    "end": "2226119"
  },
  {
    "text": "is implemented for TDU if that makes sense so if you have already taught rust",
    "start": "2226119",
    "end": "2231640"
  },
  {
    "text": "how to program for One Direction it will actually create the implementation for the reverse Direction",
    "start": "2231640",
    "end": "2238800"
  },
  {
    "text": "uh and I think it's telling that a function that is",
    "start": "2239460",
    "end": "2246400"
  },
  {
    "text": "I don't know about 10 characters long takes about three minutes to explain",
    "start": "2246400",
    "end": "2252099"
  },
  {
    "text": "and there are other parts of rust that are really quite gritty",
    "start": "2252099",
    "end": "2259720"
  },
  {
    "text": "um and brace yourself for this frustration",
    "start": "2259720",
    "end": "2265660"
  },
  {
    "text": "I don't want you to walk in expecting that you're just going to get",
    "start": "2265660",
    "end": "2271060"
  },
  {
    "text": "it because rust will require a lot of upfront thinking and there will be",
    "start": "2271060",
    "end": "2278079"
  },
  {
    "text": "times at which you encounter documentation or source code that just kind of looks like this garbage",
    "start": "2278079",
    "end": "2284640"
  },
  {
    "text": "so here are some tips for avoiding cultural shock with rust",
    "start": "2285119",
    "end": "2291040"
  },
  {
    "text": "first of all it's a compiled program so we start with some source code and we",
    "start": "2291040",
    "end": "2296560"
  },
  {
    "text": "end up with some sort of compiled result um but unlike sort of a python or we",
    "start": "2296560",
    "end": "2302380"
  },
  {
    "text": "don't have the Ripple we don't have this interactive prompt so I need to invoke a",
    "start": "2302380",
    "end": "2308920"
  },
  {
    "text": "rust compiler and I can typically and this is going to sound ridiculous I'm going to speak it I use a tool called",
    "start": "2308920",
    "end": "2316119"
  },
  {
    "text": "cargo to invoke the rust compiler cargo knows about the context of my project about",
    "start": "2316119",
    "end": "2322180"
  },
  {
    "text": "where dependencies come from it will go and download those dependencies on my behalf and Link them all together and",
    "start": "2322180",
    "end": "2327820"
  },
  {
    "text": "send the right stuff to rust C the rust compiler",
    "start": "2327820",
    "end": "2332920"
  },
  {
    "text": "and then the compiler kind of does its thing and this chain all works together almost magically but I want you to",
    "start": "2332920",
    "end": "2340599"
  },
  {
    "text": "remember that the process is different if you are used",
    "start": "2340599",
    "end": "2346119"
  },
  {
    "text": "to say a ruby or a JavaScript it doesn't quite feel as seamless because you there",
    "start": "2346119",
    "end": "2353140"
  },
  {
    "text": "is a step where the cogs are turning and you're waiting for the thing to work",
    "start": "2353140",
    "end": "2359740"
  },
  {
    "text": "I mentioned cargo before you'll kind of find a small family of tools that are",
    "start": "2359740",
    "end": "2365440"
  },
  {
    "text": "extremely useful once you start using them but actually are just more things",
    "start": "2365440",
    "end": "2370900"
  },
  {
    "text": "to learn when you're starting out and that's a problem because you actually just want to go with like sort of one",
    "start": "2370900",
    "end": "2377560"
  },
  {
    "text": "learning curve at a time but it turns out that you need to kind of learn six at the same time",
    "start": "2377560",
    "end": "2383020"
  },
  {
    "text": "and that's not very like from like a working memory point of view that's not amazing",
    "start": "2383020",
    "end": "2388619"
  },
  {
    "text": "uh cargo by the way is uh what you sort of interactive with to kind of manage",
    "start": "2388619",
    "end": "2394540"
  },
  {
    "text": "your project and clippy is a linter yes it is named after Microsoft Clippy",
    "start": "2394540",
    "end": "2403320"
  },
  {
    "text": "and uh much more helpful let's say than the the office utility",
    "start": "2403320",
    "end": "2409420"
  },
  {
    "text": "and rust format will supply a will actually let's a negative way to say this would",
    "start": "2409420",
    "end": "2416560"
  },
  {
    "text": "be it will coerce your program to comply with the rust conventions for formatting",
    "start": "2416560",
    "end": "2422460"
  },
  {
    "text": "uh there are actually a few knobs and dials to configure uh the rust formata",
    "start": "2422460",
    "end": "2428200"
  },
  {
    "text": "for your particular project but it's relatively rare because the formatting",
    "start": "2428200",
    "end": "2433720"
  },
  {
    "text": "is by and large consistent across the entire ecosystem",
    "start": "2433720",
    "end": "2439859"
  },
  {
    "text": "if you are from a systems background or if you have like say a programmed Java or c-sharp and you might be thinking",
    "start": "2441220",
    "end": "2448420"
  },
  {
    "text": "like where are objects being allocated uh rust is very stack heavy",
    "start": "2448420",
    "end": "2454839"
  },
  {
    "text": "and let me contrast with Java Orica C sharp um",
    "start": "2454839",
    "end": "2461440"
  },
  {
    "text": "in a managed World your object will be allocated on the Heap and a reference to the object will be allocated or will be",
    "start": "2461440",
    "end": "2468640"
  },
  {
    "text": "inserted as a local variable on the stack uh once a garbage collection pause runs",
    "start": "2468640",
    "end": "2475420"
  },
  {
    "text": "the either whether or not you use reference counting or um generational garbage collection if there are no more",
    "start": "2475420",
    "end": "2481540"
  },
  {
    "text": "references to the objects on the heat they get cleared or will act as free rust will prefer to provide values on",
    "start": "2481540",
    "end": "2488260"
  },
  {
    "text": "the stack itself because it knows about how wide things are in memory this provides a significant performance gain",
    "start": "2488260",
    "end": "2496599"
  },
  {
    "text": "because of the way that CPU architecture but the way that chips are actually created these days",
    "start": "2496599",
    "end": "2502780"
  },
  {
    "text": "which is that memory does not sit at we access it in some sort of linear fashion",
    "start": "2502780",
    "end": "2508119"
  },
  {
    "text": "from um within a virtualized address space but actually it turns out that there's a",
    "start": "2508119",
    "end": "2513339"
  },
  {
    "text": "very strong hierarchy of memory layout where your L1 cache is orders of magnitude faster than main",
    "start": "2513339",
    "end": "2520119"
  },
  {
    "text": "memory which itself is orders of magnitude faster than disk therefore if we can keep things in cash",
    "start": "2520119",
    "end": "2526540"
  },
  {
    "text": "or even inside registers which is enabled by keeping variables on the stack your programs will automatically",
    "start": "2526540",
    "end": "2533380"
  },
  {
    "text": "run faster the downside is that you need to be extremely pedantic with",
    "start": "2533380",
    "end": "2538960"
  },
  {
    "text": "where things are which is why some of those irritations with rust kind of come into play Russ is",
    "start": "2538960",
    "end": "2546640"
  },
  {
    "text": "going to care about whether or not your type is quote unquote copy or has copy",
    "start": "2546640",
    "end": "2551859"
  },
  {
    "text": "semantics versus move semantics because uh it wants to know that all references",
    "start": "2551859",
    "end": "2559000"
  },
  {
    "text": "to that object are valid and it will guarantee that validity at",
    "start": "2559000",
    "end": "2564700"
  },
  {
    "text": "runtime it does that with a feature called",
    "start": "2564700",
    "end": "2571500"
  },
  {
    "text": "ownership or a feature is perhaps the wrong word so the rust",
    "start": "2571500",
    "end": "2577300"
  },
  {
    "text": "ownership model is that every variable",
    "start": "2577300",
    "end": "2582579"
  },
  {
    "text": "has one place in which is the owner think of an owner an owning scope",
    "start": "2582579",
    "end": "2587980"
  },
  {
    "text": "perhaps so when and we think of ownership and property",
    "start": "2587980",
    "end": "2593200"
  },
  {
    "text": "rights and kind of then we get ourselves into a linguistic",
    "start": "2593200",
    "end": "2598540"
  },
  {
    "text": "trap because the owner in Rust has only one job it can't actually",
    "start": "2598540",
    "end": "2605740"
  },
  {
    "text": "refuse it can't trust issue trespass notices or do anything like that the only thing an owner can do in Rust",
    "start": "2605740",
    "end": "2612579"
  },
  {
    "text": "is to delete objects that it owns so",
    "start": "2612579",
    "end": "2619680"
  },
  {
    "text": "it's almost a misnamed concept because",
    "start": "2620560",
    "end": "2627099"
  },
  {
    "text": "what was really controlling access are these read-only references versus and there's another form",
    "start": "2627099",
    "end": "2633339"
  },
  {
    "text": "um like like a mutable well this is going to sound silly but we can create",
    "start": "2633339",
    "end": "2639819"
  },
  {
    "text": "a read on a read write reference as well according a mutable borrow versus a read-only",
    "start": "2639819",
    "end": "2646960"
  },
  {
    "text": "reference would be normally referred to as a just a read borrow",
    "start": "2646960",
    "end": "2652359"
  },
  {
    "text": "and uh the ownership system is implemented by essentially a logic",
    "start": "2652359",
    "end": "2659020"
  },
  {
    "text": "solver in the rust compiler so this will all fade away and at runtime that we",
    "start": "2659020",
    "end": "2666339"
  },
  {
    "text": "know extra like bits that are checking who is the owner at this given moment in time in",
    "start": "2666339",
    "end": "2672220"
  },
  {
    "text": "your program rust has the ability to check that",
    "start": "2672220",
    "end": "2679359"
  },
  {
    "text": "for that irrespective of where variables are living and which threads have access",
    "start": "2679359",
    "end": "2684400"
  },
  {
    "text": "to them that the uh the lifetime of those",
    "start": "2684400",
    "end": "2690700"
  },
  {
    "text": "objects is the right place for uh what I'm sorry",
    "start": "2690700",
    "end": "2696099"
  },
  {
    "text": "I miss for every point in the program every variable has not just a type but",
    "start": "2696099",
    "end": "2703000"
  },
  {
    "text": "also a lifetime the rust will require that any access to",
    "start": "2703000",
    "end": "2710020"
  },
  {
    "text": "those variables occurs within that valid lifetime at the end of the lifetime the owner of the variable will delete that",
    "start": "2710020",
    "end": "2719319"
  },
  {
    "text": "variable in Rust humanology this is called dropping and",
    "start": "2719319",
    "end": "2726099"
  },
  {
    "text": "therefore rust will complain very loudly very quickly if you are attending to",
    "start": "2726099",
    "end": "2731440"
  },
  {
    "text": "access data that is no longer valid or is not yet been initialized",
    "start": "2731440",
    "end": "2739260"
  },
  {
    "text": "I want to just very briefly as we sort of hit getting close to the wrap-up stage one piece from nature",
    "start": "2739720",
    "end": "2748300"
  },
  {
    "text": "uh uh so this was a sort of a column I",
    "start": "2748300",
    "end": "2754180"
  },
  {
    "text": "suppose you might say but it has been peer-reviewed so it's relatively good um",
    "start": "2754180",
    "end": "2759880"
  },
  {
    "text": "it's talking about how scientists use programming languages and this kind of",
    "start": "2759880",
    "end": "2765359"
  },
  {
    "text": "desire to create uh be able to data-driven science requires very effective processing but",
    "start": "2765359",
    "end": "2772720"
  },
  {
    "text": "the problem with C and C plus plus which was the standard tooling perhaps maybe a Fortran is that uh they're not very nice",
    "start": "2772720",
    "end": "2780280"
  },
  {
    "text": "to use they typically would love Python and",
    "start": "2780280",
    "end": "2785440"
  },
  {
    "text": "just like makes make python go faster um they don't provide guardrails which rust",
    "start": "2785440",
    "end": "2792400"
  },
  {
    "text": "does and they actually cite the Microsoft post that was came that came in earlier",
    "start": "2792400",
    "end": "2798839"
  },
  {
    "text": "in the um in the talk",
    "start": "2798839",
    "end": "2804420"
  },
  {
    "text": "it describes a little bit how um ownership works and probably a more",
    "start": "2806980",
    "end": "2813040"
  },
  {
    "text": "eloquent way elegant way than I was able to just before and just want to",
    "start": "2813040",
    "end": "2818440"
  },
  {
    "text": "emphasize the last sentence that an entire class of correctness areas just go of a by Design",
    "start": "2818440",
    "end": "2825599"
  },
  {
    "text": "for me uh however the reason why I've sort of stuck with rust is that I find",
    "start": "2826560",
    "end": "2833619"
  },
  {
    "text": "the rust Community to be exceptionally inclusive and to be kind of values Laden in a very positive way and uh that to me",
    "start": "2833619",
    "end": "2842619"
  },
  {
    "text": "is one of the reasons um that I've kind of stuck around like I learned rust because I was hitting the",
    "start": "2842619",
    "end": "2849819"
  },
  {
    "text": "boundaries with python and I really wanted to understand how computers worked Russ kind of taught me",
    "start": "2849819",
    "end": "2856599"
  },
  {
    "text": "what a pointer was um but actually it's also taught me how to contribute or kind of create open",
    "start": "2856599",
    "end": "2863079"
  },
  {
    "text": "source ecosystems that are a healthy and vibrant",
    "start": "2863079",
    "end": "2869460"
  },
  {
    "text": "the safety angle particularly if you are a large business with customers who are",
    "start": "2872800",
    "end": "2878500"
  },
  {
    "text": "paying you for software kind of obviously enough like I find that a really compelling and",
    "start": "2878500",
    "end": "2884380"
  },
  {
    "text": "very persuasive argument just uh but it turns out that this but there's more",
    "start": "2884380",
    "end": "2890319"
  },
  {
    "text": "uh you actually get to benefit too as the",
    "start": "2890319",
    "end": "2896079"
  },
  {
    "text": "person who is the surface provider your programs are more stable they are going to be able to use less compute resources",
    "start": "2896079",
    "end": "2904660"
  },
  {
    "text": "which means that they are cheaper to run I also like that they are going to refer acquire like less energy to run which is",
    "start": "2904660",
    "end": "2911800"
  },
  {
    "text": "going to like have a net benefit for the world's compute um ecological footprint as well",
    "start": "2911800",
    "end": "2919359"
  },
  {
    "text": "lastly uh the rust compiler is surprisingly",
    "start": "2919359",
    "end": "2924819"
  },
  {
    "text": "helpful the rust Community is vibrant and",
    "start": "2924819",
    "end": "2930040"
  },
  {
    "text": "inclusive if not rust then you're more than",
    "start": "2930040",
    "end": "2935380"
  },
  {
    "text": "welcome to take some of those attributes and inject that enthusiasm and that support",
    "start": "2935380",
    "end": "2941319"
  },
  {
    "text": "to some other community where you kind of feel that this kind of human-centric view of",
    "start": "2941319",
    "end": "2947200"
  },
  {
    "text": "computing is lacking",
    "start": "2947200",
    "end": "2950280"
  },
  {
    "text": "if you are the project leader of the world's most operating system kernel for",
    "start": "2957339",
    "end": "2963040"
  },
  {
    "text": "the world's most popular operating system the threshold for introducing a new programming language is fairly High",
    "start": "2963040",
    "end": "2969780"
  },
  {
    "text": "I encourage you to kind of look at rust oh sorry look at the rust in Linux",
    "start": "2971640",
    "end": "2977140"
  },
  {
    "text": "kernel as a a model for how you might consider prototyping",
    "start": "2977140",
    "end": "2983859"
  },
  {
    "text": "rust at work or even for your own projects so rust was introduced to Linux",
    "start": "2983859",
    "end": "2991800"
  },
  {
    "text": "completely to the side of the mainstream uh or the mainline programming effort",
    "start": "2991800",
    "end": "2999220"
  },
  {
    "text": "and even now even though it is being included in in the kernel the uh it's it relates to drivers",
    "start": "2999220",
    "end": "3009359"
  },
  {
    "text": "and projects that kind of need to prove their worth the burden should be on Rust",
    "start": "3009359",
    "end": "3014640"
  },
  {
    "text": "that it like the burden of proof should be on Rust to be able to deliver",
    "start": "3014640",
    "end": "3020040"
  },
  {
    "text": "on these promises of performance and uh and safety and therefore my recommendation is",
    "start": "3020040",
    "end": "3027359"
  },
  {
    "text": "always to find some sort of piece of the piece of the business that uh where",
    "start": "3027359",
    "end": "3034619"
  },
  {
    "text": "there's like let's say a performance issue or you know that there's some there's something that needs fixing",
    "start": "3034619",
    "end": "3041220"
  },
  {
    "text": "but which you have a really good understanding of the problem domain do not making this do not make the",
    "start": "3041220",
    "end": "3047339"
  },
  {
    "text": "mistake of attempting to learn a programming language and a in like a new",
    "start": "3047339",
    "end": "3052619"
  },
  {
    "text": "piece of business functionality at the same time like that path is pain",
    "start": "3052619",
    "end": "3058460"
  },
  {
    "text": "um with all that in mind though I really hope that you've enjoyed uh",
    "start": "3060119",
    "end": "3067200"
  },
  {
    "text": "this afternoon session and I'm looking forward to seeing what everyone can do with rust and with whichever programming",
    "start": "3067200",
    "end": "3073680"
  },
  {
    "text": "language they'd prefer thanks [Applause]",
    "start": "3073680",
    "end": "3083089"
  },
  {
    "text": "we might have time for a question or two hands up if you had a question",
    "start": "3083400",
    "end": "3089099"
  },
  {
    "text": "well thank you at the front thanks for that so just from what you",
    "start": "3089099",
    "end": "3096420"
  },
  {
    "text": "were saying rust has the concept of variables variables have a lifetime and an owner is responsible for releasing",
    "start": "3096420",
    "end": "3102720"
  },
  {
    "text": "that memory was rust the language that",
    "start": "3102720",
    "end": "3109280"
  },
  {
    "text": "um you know invented that concept one of the really interesting things and so we've got this content",
    "start": "3109380",
    "end": "3115920"
  },
  {
    "text": "um it actually didn't and like it didn't it emerges mainstream with rust but it",
    "start": "3115920",
    "end": "3121619"
  },
  {
    "text": "was in research languages I think going back to the 70s this idea that you could actually annotate variables with a",
    "start": "3121619",
    "end": "3127619"
  },
  {
    "text": "lifetime is not a novel concept there's a really fascinating talk from like 2012 from",
    "start": "3127619",
    "end": "3133859"
  },
  {
    "text": "great and Hall the original creator of rust who just sort of describes that his",
    "start": "3133859",
    "end": "3140400"
  },
  {
    "text": "intention was to have no novel features no genuine novelty and rust because it",
    "start": "3140400",
    "end": "3145800"
  },
  {
    "text": "was intended from the outset as being a production language Mozilla was facing an existential threat",
    "start": "3145800",
    "end": "3152099"
  },
  {
    "text": "with the growth of chrome they couldn't create they couldn't enable parallelism inside",
    "start": "3152099",
    "end": "3157920"
  },
  {
    "text": "Firefox they needed a new programming language only features that could really enable that kind of got into the",
    "start": "3157920",
    "end": "3165119"
  },
  {
    "text": "language and there was no nothing genuinely novel uh from like a computer science",
    "start": "3165119",
    "end": "3171420"
  },
  {
    "text": "point of view amazing",
    "start": "3171420",
    "end": "3176520"
  },
  {
    "text": "one more question and then we might call it after that so you can make your next session",
    "start": "3176520",
    "end": "3181700"
  },
  {
    "text": "um so I'm one of the people that tried learning rust and then walked away um how long did it take you to love the",
    "start": "3181920",
    "end": "3188940"
  },
  {
    "text": "borrow Checker okay so the question was like how long did it take to learn the love I don't know if I do",
    "start": "3188940",
    "end": "3195240"
  },
  {
    "text": "I think uh okay so so the borrow chicken is this component that is a checking all",
    "start": "3195240",
    "end": "3200760"
  },
  {
    "text": "of your references that uh that they actually fit within the lifetimes properly it turns out that this on the",
    "start": "3200760",
    "end": "3208200"
  },
  {
    "text": "surface level at least conceptually should should be simple but people will find if they use",
    "start": "3208200",
    "end": "3214980"
  },
  {
    "text": "patterns that they used to from their other programming experience that they'll kind of get themselves into knots so this is cliche of fighting the",
    "start": "3214980",
    "end": "3222900"
  },
  {
    "text": "borrow checker now the question is like when did you kind of learn to love it",
    "start": "3222900",
    "end": "3228960"
  },
  {
    "text": "um it's not so much that as becoming more familiar with",
    "start": "3228960",
    "end": "3235880"
  },
  {
    "text": "understanding where my data starts and",
    "start": "3235880",
    "end": "3240900"
  },
  {
    "text": "where ownership originates and being able to mentally",
    "start": "3240900",
    "end": "3246000"
  },
  {
    "text": "track where uh like",
    "start": "3246000",
    "end": "3251280"
  },
  {
    "text": "where things are as the program evolves or like is it so",
    "start": "3251280",
    "end": "3259680"
  },
  {
    "text": "so for example one of the things that rusted us really badly is um graph data structures it's really really impossible",
    "start": "3259680",
    "end": "3265319"
  },
  {
    "text": "to have a an undirected graph in safe rust because ownership is ambiguous by",
    "start": "3265319",
    "end": "3271319"
  },
  {
    "text": "Design so the one way out of this is to kind of",
    "start": "3271319",
    "end": "3276660"
  },
  {
    "text": "have like let's say a manager object like a which kind of as a supervisor or",
    "start": "3276660",
    "end": "3281940"
  },
  {
    "text": "across all the nodes to kind of insert this thing where ownership lives that",
    "start": "3281940",
    "end": "3287220"
  },
  {
    "text": "actually isn't related directly to the graph and",
    "start": "3287220",
    "end": "3292500"
  },
  {
    "text": "we're and therefore all of the references that exist like within the",
    "start": "3292500",
    "end": "3298200"
  },
  {
    "text": "graph actually kind of relate more to the ownership of this kind of manager uh and there are some strategies that kind",
    "start": "3298200",
    "end": "3305040"
  },
  {
    "text": "of come through once you have some experience with the language there are",
    "start": "3305040",
    "end": "3310500"
  },
  {
    "text": "some other things as well so typically you kind of learn that actually it's okay to copy some data",
    "start": "3310500",
    "end": "3316680"
  },
  {
    "text": "so I don't always need to point back to one thing I can actually copy and clone",
    "start": "3316680",
    "end": "3322619"
  },
  {
    "text": "um objects around computers are very very very fast and if you think about the count Words",
    "start": "3322619",
    "end": "3330000"
  },
  {
    "text": "example the equivalent python code would probably take hundreds of memory",
    "start": "3330000",
    "end": "3337079"
  },
  {
    "text": "allocations just to do that same process rust has zero a memory allocation that",
    "start": "3337079",
    "end": "3342839"
  },
  {
    "text": "says on the order of let's say somewhere between 20 and 100 microseconds so rust",
    "start": "3342839",
    "end": "3348119"
  },
  {
    "text": "is going to have an immediately performance benefit uh even if there was",
    "start": "3348119",
    "end": "3353880"
  },
  {
    "text": "like no runtime in Python land as well and in terms of the borrow checker",
    "start": "3353880",
    "end": "3358980"
  },
  {
    "text": "there are some patterns that you kind of become accustomed to and some design patterns for the larger like bigger",
    "start": "3358980",
    "end": "3366359"
  },
  {
    "text": "projects that do become uh easier you're kind of cutting with the grain instead of Against the Grain",
    "start": "3366359",
    "end": "3372240"
  },
  {
    "text": "let's say",
    "start": "3372240",
    "end": "3374720"
  }
]