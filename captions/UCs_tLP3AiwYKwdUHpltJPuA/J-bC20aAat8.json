[
  {
    "start": "0",
    "end": "62000"
  },
  {
    "text": "okay let's get started so um my talk is called immutability or putting the dream machine to work uh",
    "start": "1680",
    "end": "8800"
  },
  {
    "text": "this talk is about um applying immutability to user interfaces um these",
    "start": "8800",
    "end": "15759"
  },
  {
    "text": "ideas are not new uh they've been applied to disk quite a bit um if you use git uh git uses immutable data",
    "start": "15759",
    "end": "22920"
  },
  {
    "text": "structures and immutable trees under the hood um systems like ZFS the da duping",
    "start": "22920",
    "end": "28480"
  },
  {
    "text": "feature is about sharing structure um also Dropbox uses this trick that's the reason Dropbox can scale because",
    "start": "28480",
    "end": "35120"
  },
  {
    "text": "they also have D duping of files in the cloud um so uh but I don't think",
    "start": "35120",
    "end": "41120"
  },
  {
    "text": "anybody's thought really hard about applying this to designing user interface programs and hopefully this",
    "start": "41120",
    "end": "46520"
  },
  {
    "text": "talk will convince you that it's a good idea uh it's not necessary to adopt this wholesale uh but there may be problems",
    "start": "46520",
    "end": "53199"
  },
  {
    "text": "that you encounter in your applications where you might realize after this talk uh that immutability might be a useful",
    "start": "53199",
    "end": "60359"
  },
  {
    "text": "tool um so I work at cognitech I've been a JavaScript developer prior to that for",
    "start": "60359",
    "end": "66080"
  },
  {
    "start": "62000",
    "end": "113000"
  },
  {
    "text": "about 9 years worked for working for startups um I was at the New York Times for four uh I worked on some fun stuff",
    "start": "66080",
    "end": "71920"
  },
  {
    "text": "like the 2012 election uh so a lot of JavaScript I recently left to join forces with cognitech uh cognitech is a",
    "start": "71920",
    "end": "79040"
  },
  {
    "text": "company that does quite a bit of Consulting with Fortune 500 companies using uh their their particular stack it",
    "start": "79040",
    "end": "84920"
  },
  {
    "text": "happens to be closure closure is an open source programming language it's a lisp it emphasizes",
    "start": "84920",
    "end": "90479"
  },
  {
    "text": "immutability um we also maintain closure script when I'm the lead developer I've been working on it for 3 years now which",
    "start": "90479",
    "end": "96960"
  },
  {
    "text": "is a dialect of closure that compiles to JavaScript we also have a product called datomic which appli applies the same",
    "start": "96960",
    "end": "103799"
  },
  {
    "text": "sort of ideas to databases so it's a relational database sort of optimized",
    "start": "103799",
    "end": "109240"
  },
  {
    "text": "for the cloud uh that uses immutable data structures on disk um but I'm not going to talk about uh too much about",
    "start": "109240",
    "end": "115479"
  },
  {
    "text": "closure closure script or datomic today I kind of want to talk about the broader idea because I think it has much wider",
    "start": "115479",
    "end": "121719"
  },
  {
    "text": "implications than anything language specific uh if you haven't read this book and you you're involved in UI programming um I think you should",
    "start": "121719",
    "end": "128200"
  },
  {
    "text": "probably run to the bookstore and try to find an out of print copy sadly it's not in print anymore uh but you can get one",
    "start": "128200",
    "end": "134080"
  },
  {
    "text": "cheap uh paperback on Amazon this is a fantastic book I encountered it because Alan K mentioned it on his mailing list",
    "start": "134080",
    "end": "141000"
  },
  {
    "text": "the foundations of new Computing he suggested it because uh people were asking how did the sort of current state",
    "start": "141000",
    "end": "147720"
  },
  {
    "text": "of objectoriented programming as well as um user interface has come to be and this is a very good um sort of uh",
    "start": "147720",
    "end": "155680"
  },
  {
    "text": "history of that time it sort of centers around this interesting man jcr licklider he was not a computer",
    "start": "155680",
    "end": "161640"
  },
  {
    "start": "157000",
    "end": "175000"
  },
  {
    "text": "programmer he was actually a psychologist and and who uh believed that uh human factors in Psychology",
    "start": "161640",
    "end": "167920"
  },
  {
    "text": "would play a huge role uh he wrote two very famous uh texts um one was called",
    "start": "167920",
    "end": "174680"
  },
  {
    "text": "The Man computer symbiosis so back when uh computers were primar primarily used",
    "start": "174680",
    "end": "179840"
  },
  {
    "start": "175000",
    "end": "271000"
  },
  {
    "text": "used uh only by large corporations and by governments uh for doing you know weapon simulations he envisioned a",
    "start": "179840",
    "end": "186280"
  },
  {
    "text": "future where people would have their own computer and um all the computers would be networked and it was U his vision and",
    "start": "186280",
    "end": "194159"
  },
  {
    "text": "his sort of funneling of government money US government money to the right places uh that allowed um the sort of",
    "start": "194159",
    "end": "200000"
  },
  {
    "text": "computer Revolution to happen uh so if you've ever heard of Douglas engelbart mother of all demos where he demoed the",
    "start": "200000",
    "end": "206159"
  },
  {
    "text": "first word processor the first video conference um the mouse uh all this was because jcr licklider",
    "start": "206159",
    "end": "213200"
  },
  {
    "text": "believed in Douglas engelbart and thought that he had a um strong idea of the future so lick ligher 54 years ago",
    "start": "213200",
    "end": "220159"
  },
  {
    "text": "wrote this uh book uh s paper paper it's very short called The Man computer simbiosis where he outlines all the",
    "start": "220159",
    "end": "226200"
  },
  {
    "text": "things that he think that has to happen uh for the interactive Computing Revolution to take place um it's",
    "start": "226200",
    "end": "231640"
  },
  {
    "text": "actually quite interesting but uh I read it like two or three months ago and something really surprised me uh that I",
    "start": "231640",
    "end": "238159"
  },
  {
    "text": "think is really relevant today he actually sort of predicts my talk uh 50 years 54 years before I did it uh",
    "start": "238159",
    "end": "244680"
  },
  {
    "text": "specifically he's talking about how to structure data and application and he points out that the tree memory",
    "start": "244680",
    "end": "250239"
  },
  {
    "text": "structure uh invented by Ed fredkin would be very useful um and basically uh",
    "start": "250239",
    "end": "256199"
  },
  {
    "text": "it's it's it's a very simple tree data structure in which um the structure is shared uh and we'll see that to great",
    "start": "256199",
    "end": "262720"
  },
  {
    "text": "effect this this talk is going to be actually quite a bit about data structures and then we'll see these data structures in action towards the end of",
    "start": "262720",
    "end": "269479"
  },
  {
    "text": "the talk um so he he he took money and gave money to people like John McCarthy",
    "start": "269479",
    "end": "274800"
  },
  {
    "start": "271000",
    "end": "321000"
  },
  {
    "text": "John McCarthy more or less invented live coding right the very first reppel um",
    "start": "274800",
    "end": "280120"
  },
  {
    "text": "list he invented garbage collection you know functional programming programming with recursive functions so he is very",
    "start": "280120",
    "end": "286680"
  },
  {
    "text": "influential uh to his right is Ed frin who was a um sort of a College Dropout",
    "start": "286680",
    "end": "292240"
  },
  {
    "text": "became a fighter pilot and then was a sort of a hardware hacker he was the guy that could program these very early",
    "start": "292240",
    "end": "298639"
  },
  {
    "text": "computers uh to do impossible things so that they could create these um first interactive prototypes but he invented",
    "start": "298639",
    "end": "304880"
  },
  {
    "text": "the tree uh sometimes you will be you hear it called try just to differentiate between tree but uh the the the word t r",
    "start": "304880",
    "end": "312039"
  },
  {
    "text": "i e um comes from retrieval and so he says the correct way to pronounce it is tree so I will continue to use that uh",
    "start": "312039",
    "end": "320680"
  },
  {
    "text": "so LL also uh created the culture in which money could be funded towards uh places like Xerox Park this is alen k um",
    "start": "320680",
    "end": "328479"
  },
  {
    "start": "321000",
    "end": "340000"
  },
  {
    "text": "you know sometime in the70s at park in front of an alto that's probably running a small talk uh the granddaddy of uh the",
    "start": "328479",
    "end": "336600"
  },
  {
    "text": "modern form of Bob jior programming As We Know It uh at that around 1979 um",
    "start": "336600",
    "end": "343199"
  },
  {
    "text": "they invented uh basically you know dynamic uis and you know they came with these ideas mod view controller uh not",
    "start": "343199",
    "end": "350039"
  },
  {
    "text": "much has changed you can actually load up a a modern Small Talk VM and you can light load up the class browser the",
    "start": "350039",
    "end": "355600"
  },
  {
    "text": "system browser which shows all classes that are running at runtime and you will find the words model view controller uh",
    "start": "355600",
    "end": "361319"
  },
  {
    "start": "357000",
    "end": "385000"
  },
  {
    "text": "35 years ago long Shadow uh the concept was actually come up was sort of invented by a Norwegian uh computer",
    "start": "361319",
    "end": "368080"
  },
  {
    "text": "programmer trivar rcog and and it was sort of amended by Adele Goldberg and others and this was passed around and",
    "start": "368080",
    "end": "374440"
  },
  {
    "text": "this more or less has uh shaped our idea of UI programming to today uh long",
    "start": "374440",
    "end": "380240"
  },
  {
    "text": "Shadow I mean people are still writing competing MVC Frameworks in every language uh so at a very abstract level",
    "start": "380240",
    "end": "387160"
  },
  {
    "start": "385000",
    "end": "438000"
  },
  {
    "text": "I mean I think this is this is true because I think MVC is very sound you have some sort of data model that represents the domain that the user",
    "start": "387160",
    "end": "393120"
  },
  {
    "text": "cares about um you need to present the uh users can't see data structures right even programmers can barely see data",
    "start": "393120",
    "end": "399120"
  },
  {
    "text": "structures so you need to have some visualization and that's the view and then often where things get extremely complicated is the controller which is",
    "start": "399120",
    "end": "406360"
  },
  {
    "text": "how do you coordinate what the user sees on the domain that they want to manipulate which you have represented in",
    "start": "406360",
    "end": "412120"
  },
  {
    "text": "the machine um but I would argue implementations leave much to be desired so this is the more I would say",
    "start": "412120",
    "end": "417319"
  },
  {
    "text": "controversial part of my talk uh and that's because NBCS today are you know primarily designed around stateful",
    "start": "417319",
    "end": "423520"
  },
  {
    "text": "objects objector programming sort of you know has this notion that you encapsulate state in objects but even",
    "start": "423520",
    "end": "429479"
  },
  {
    "text": "encapsulate encapsulating State and objects has very serious problems if you've done any multi-threaded",
    "start": "429479",
    "end": "435199"
  },
  {
    "text": "programming you're well aware of this so this is the data structure part um you might be like really a data",
    "start": "435199",
    "end": "441479"
  },
  {
    "start": "438000",
    "end": "450000"
  },
  {
    "text": "structure talk uh but hopefully I can make this interesting uh because I I I doubt many of you seen how persistent",
    "start": "441479",
    "end": "448840"
  },
  {
    "text": "data structures work uh so these slides are not my own they are from this uh excellent person Zack Allen he is a",
    "start": "448840",
    "end": "455759"
  },
  {
    "start": "450000",
    "end": "532000"
  },
  {
    "text": "facilitator at this thing called hacker school which is like a a coders Retreat um like like a writers Retreat for",
    "start": "455759",
    "end": "461840"
  },
  {
    "text": "coders in New York uh so I'm just going to reuse the slides because they're excellent um so so even if you are of",
    "start": "461840",
    "end": "468720"
  },
  {
    "text": "the object oriented frame of mind um uh uh it's not even if you want to keep",
    "start": "468720",
    "end": "474039"
  },
  {
    "text": "doing that style of programming um in order to understand why persistent data structures exist you have to at least",
    "start": "474039",
    "end": "479520"
  },
  {
    "text": "step into the shoes of a functional programmer uh if only briefly uh so we're going to do that so functional",
    "start": "479520",
    "end": "485479"
  },
  {
    "text": "programmers they care about mutable objects immutable objects not mutable objects sorry immutable values not",
    "start": "485479",
    "end": "491520"
  },
  {
    "text": "mutable objects um and it you don't really change things right you don't change things if you want to update a",
    "start": "491520",
    "end": "498520"
  },
  {
    "text": "data structure it you simply return a new one leaving the original one uh",
    "start": "498520",
    "end": "503960"
  },
  {
    "text": "unmodified uh so traditionally in uh people have done this with copy on WR and I'm going to Dem demonstrate how you",
    "start": "503960",
    "end": "510039"
  },
  {
    "text": "can do it efficiently uh and they're called persistent which is kind of a compation of terms most of us when we",
    "start": "510039",
    "end": "515320"
  },
  {
    "text": "hear persistent we think you're going to put it on dis or something but the only in this in this context it's just saying",
    "start": "515320",
    "end": "521560"
  },
  {
    "text": "that you're not destroying the previous value uh and they're fast and this is extremely uh new development and within",
    "start": "521560",
    "end": "528320"
  },
  {
    "text": "the past decade um and we'll we'll we'll talk about the background for that but before we get into that let's let's talk",
    "start": "528320",
    "end": "534240"
  },
  {
    "start": "532000",
    "end": "549000"
  },
  {
    "text": "about the basically the simplest persistent data structure you can write which you guys already know about it's called the the linked list uh so you can",
    "start": "534240",
    "end": "541079"
  },
  {
    "text": "imagine a list with four elements and you have some head and each cell points to the next one this is something that",
    "start": "541079",
    "end": "546800"
  },
  {
    "text": "you learn in CS 101 uh the neat thing about that is that in 01 time you can you know cons you",
    "start": "546800",
    "end": "553959"
  },
  {
    "start": "549000",
    "end": "592000"
  },
  {
    "text": "know construct a new list uh by just you know con you know allocating a cell and setting the pointer to the next tail uh",
    "start": "553959",
    "end": "561040"
  },
  {
    "text": "what's cool about this is now you have two distinct lists they represent two different values but if you look at the",
    "start": "561040",
    "end": "566800"
  },
  {
    "text": "sort of layout here on the screen you see that they share uh more than 50% of their memory right 50% of their memory",
    "start": "566800",
    "end": "573920"
  },
  {
    "text": "is shared uh you could uh get the tail of the X list and then you could cons",
    "start": "573920",
    "end": "579480"
  },
  {
    "text": "another head onto it and now you have three distinct values they you know they represent three distinct values but",
    "start": "579480",
    "end": "584920"
  },
  {
    "text": "again they're sharing uh more than 50% of their memory structural sharing that's what persistent data structures",
    "start": "584920",
    "end": "590800"
  },
  {
    "text": "are really about uh they structural sharing gives you a few things it gives you space efficiency it also gives you",
    "start": "590800",
    "end": "597519"
  },
  {
    "start": "592000",
    "end": "613000"
  },
  {
    "text": "comp computational efficiency so if you you have used copy on right data structures you'll see how we can be much",
    "start": "597519",
    "end": "603079"
  },
  {
    "text": "better than copy on right copy on right works when your data structure is very small but if you have for example a very",
    "start": "603079",
    "end": "609399"
  },
  {
    "text": "large array copy on right's going to take you know it's o n uh so the ideas that I'm about to",
    "start": "609399",
    "end": "615760"
  },
  {
    "start": "613000",
    "end": "658000"
  },
  {
    "text": "present were first sort of um research though not proven uh by Phil Bagwell he",
    "start": "615760",
    "end": "620800"
  },
  {
    "text": "invented these data structures called the array map tree and the hash aray map tree and he did this I believe the last",
    "start": "620800",
    "end": "626399"
  },
  {
    "text": "one maybe both but at epfl which is the home of Scala um but it was really rich icky who took these uh very cleverly",
    "start": "626399",
    "end": "633480"
  },
  {
    "text": "designed data structures and then put an immutable spin on it and then demonstrated that on Modern Hardware uh",
    "start": "633480",
    "end": "638800"
  },
  {
    "text": "you would get much better performance than you would expect uh for example you would think on paper that something like",
    "start": "638800",
    "end": "644079"
  },
  {
    "text": "a finger tree which is another type of immutable data structure would be faster uh but simply because the realities of",
    "start": "644079",
    "end": "649519"
  },
  {
    "text": "of modern runtimes and Modern Hardware it's just not true uh the data structure I'm going to show completely blow that",
    "start": "649519",
    "end": "656200"
  },
  {
    "text": "stuff out of the water so let's talk about the simplest one the bit mapped uh Vector tree and the reason we're going",
    "start": "656200",
    "end": "662000"
  },
  {
    "start": "658000",
    "end": "704000"
  },
  {
    "text": "to pick this one because it's not it's not too difficult to explain and it's a data structure which gives you the same",
    "start": "662000",
    "end": "667320"
  },
  {
    "text": "properties you're used to from arrays in other languages or kind of like a random access array list so you're allowed to",
    "start": "667320",
    "end": "673240"
  },
  {
    "text": "append efficiently to the end you can um randomly access any element and it has good performance characteristics um so",
    "start": "673240",
    "end": "679880"
  },
  {
    "text": "it's very much like an array except it has this new property in which that you can update it very efficiently without",
    "start": "679880",
    "end": "685760"
  },
  {
    "text": "destroying the previous um whatever value it previously represented unlike mutable arrays so data lives in",
    "start": "685760",
    "end": "692440"
  },
  {
    "text": "the trees um it's a prefixed tree we're not we'll we'll see diagrams that explain this it's a bitwise tree and",
    "start": "692440",
    "end": "698639"
  },
  {
    "text": "we'll we'll see exactly what that means in a second so how does this work um",
    "start": "698639",
    "end": "703720"
  },
  {
    "text": "it's basically um a persistant uh bit map Vector tree is just a array of arrays you pick some size n just it",
    "start": "703720",
    "end": "711240"
  },
  {
    "start": "704000",
    "end": "752000"
  },
  {
    "text": "doesn't matter we'll see what the correct size for n is but for now we're going to pick a small one because it's easier to show the diagrams so we're",
    "start": "711240",
    "end": "717800"
  },
  {
    "text": "going to Pick n equal four um and every element of this array will point to more arrays of the same Dimension uh",
    "start": "717800",
    "end": "725480"
  },
  {
    "text": "each one of these arrays will point to another level of arrays of the same Dimension and then finally you hit um",
    "start": "725480",
    "end": "731519"
  },
  {
    "text": "the leaf nodes that actually contain the values that are that you care about um and here we're just going to use numbers",
    "start": "731519",
    "end": "738040"
  },
  {
    "text": "uh because that's easy to relate the indices um to the contents so now the",
    "start": "738040",
    "end": "743800"
  },
  {
    "text": "question is okay that's interesting but uh how do we get anything out of that",
    "start": "743800",
    "end": "749839"
  },
  {
    "text": "so there's this nice property of integers right so 106 say we want to find the 106 element well we have we're",
    "start": "749839",
    "end": "756920"
  },
  {
    "start": "752000",
    "end": "781000"
  },
  {
    "text": "fortunate because 106 has a binary representation and you can bitmask this",
    "start": "756920",
    "end": "762399"
  },
  {
    "text": "number to find the thing that you want uh for the particular end that we've chosen here we need to bitm Mask two",
    "start": "762399",
    "end": "769160"
  },
  {
    "text": "bits so the first thing we're going to do is bit mask off the first two bits and that tells us we have to look at",
    "start": "769160",
    "end": "775079"
  },
  {
    "text": "index uh one uh this is you know zero zero uh counting from zero and then the",
    "start": "775079",
    "end": "781480"
  },
  {
    "start": "781000",
    "end": "831000"
  },
  {
    "text": "next two bits tell us we have to look at index 2 and the next two bits say index two and finally we're out of bits we",
    "start": "781480",
    "end": "788000"
  },
  {
    "text": "know where at we're know weere at the end uh and there we have our value 106 at index 2 uh so if you know anything",
    "start": "788000",
    "end": "795399"
  },
  {
    "text": "about um uh modern runtimes this is extremely fast on the jvm and on",
    "start": "795399",
    "end": "800440"
  },
  {
    "text": "JavaScript engines now we we'll actually see uh proof I will show you V8 uh doing",
    "start": "800440",
    "end": "805600"
  },
  {
    "text": "this um so just it's just a b a couple coup of array access accesses and a",
    "start": "805600",
    "end": "811480"
  },
  {
    "text": "couple of bit operations so now that we know how to find something how do we update something and this is where we're going",
    "start": "811480",
    "end": "817680"
  },
  {
    "text": "to see how we can do much better than copy on write um all we have to do is replace the path uh that needs to change",
    "start": "817680",
    "end": "825079"
  },
  {
    "text": "so if we want to update the 100 106 element and instead of 106 we want to put the string Fu we have to replace the",
    "start": "825079",
    "end": "831600"
  },
  {
    "start": "831000",
    "end": "870000"
  },
  {
    "text": "root we have to replace the array on the path at the next level the next level on the next level and again we know which",
    "start": "831600",
    "end": "838279"
  },
  {
    "text": "ones to replace exactly the same way as we knew how to find something because the index that we of the thing we want to replace will",
    "start": "838279",
    "end": "844959"
  },
  {
    "text": "gives us the path um so what's going to happen is we're going to get a new Vector right a",
    "start": "844959",
    "end": "850959"
  },
  {
    "text": "brand new vector and it's going to share like what 95% of its contents all these other arrays that are not colored are",
    "start": "850959",
    "end": "857920"
  },
  {
    "text": "shared with the previous value and and the last I'll actually show a demo of a of a pixel editor that uses this trick",
    "start": "857920",
    "end": "865199"
  },
  {
    "text": "to get really fast um undo uh and diffing so it's pretty cool so what",
    "start": "865199",
    "end": "871560"
  },
  {
    "start": "870000",
    "end": "902000"
  },
  {
    "text": "about this size length four it sounds a bit arbitrary it is um after a lot of",
    "start": "871560",
    "end": "877240"
  },
  {
    "text": "testing people have figured out that 32 is really good uh 32 has a good balance between lookup time and update",
    "start": "877240",
    "end": "883560"
  },
  {
    "text": "performance as you increase the size basically update takes longer um uh even",
    "start": "883560",
    "end": "889240"
  },
  {
    "text": "though the um lookup times uh are better so we picked 32 just to give you a sense",
    "start": "889240",
    "end": "894880"
  },
  {
    "text": "of how good that is for at least the current state of computing it this won't always be true and we'll probably have to modify them but today this number is",
    "start": "894880",
    "end": "901399"
  },
  {
    "text": "a very good number uh because if you had a persistent Vector that was seven levels deep that's 32 to the 7th power",
    "start": "901399",
    "end": "909639"
  },
  {
    "start": "909000",
    "end": "957000"
  },
  {
    "text": "that's 34 billion elements even if each element was like a 64-bit value on a",
    "start": "909639",
    "end": "914800"
  },
  {
    "text": "64-bit OS that's about 256 gigabyt of Ram uh you're finally seeing machines in",
    "start": "914800",
    "end": "920360"
  },
  {
    "text": "the cloud where you could provision a machine that has that much RAM uh so it's a very good so that you could",
    "start": "920360",
    "end": "926000"
  },
  {
    "text": "actually update an an a persistent Vector this this large uh with at most",
    "start": "926000",
    "end": "931480"
  },
  {
    "text": "seven array updates you could find any element in at most uh seven bit operations and seven array axises again",
    "start": "931480",
    "end": "938720"
  },
  {
    "text": "this is very cheap on Modern Hardware you'll often hear the the phrase that no uh persistent data structures are not 01",
    "start": "938720",
    "end": "945040"
  },
  {
    "text": "to look up but it's log 32n uh which it's it's tiny it's effectively",
    "start": "945040",
    "end": "951519"
  },
  {
    "text": "01 okay so let's see a demo so I I said that they were fast let's see if they're actually fast so this is a Rel L recent",
    "start": "951519",
    "end": "959920"
  },
  {
    "start": "957000",
    "end": "1008000"
  },
  {
    "text": "build of V8 and what I'm going to do here is I'm going to build up a mutable",
    "start": "959920",
    "end": "965920"
  },
  {
    "text": "array on va8 and I'm going to build it's basically I'm just to build it it's going to be a thousand ele I'm sorry a",
    "start": "965920",
    "end": "972160"
  },
  {
    "text": "million elements just integers and we're do the same thing with a persistent Vector so in the remember in the second",
    "start": "972160",
    "end": "978440"
  },
  {
    "text": "case we actually construct 1 million vectors this is not the same as pushing",
    "start": "978440",
    "end": "983639"
  },
  {
    "text": "onto the array right and we'll see how does it perform",
    "start": "983639",
    "end": "989319"
  },
  {
    "text": "this is this is an old this is a 2010 laptop so this is four years old so it's not even that",
    "start": "989560",
    "end": "995959"
  },
  {
    "text": "fast so that should be pretty shocking it's not even two times slower even",
    "start": "995959",
    "end": "1001000"
  },
  {
    "text": "though um the second one is doing an incredible amount of work over the first one right pretty cool uh so even this",
    "start": "1001000",
    "end": "1009319"
  },
  {
    "start": "1008000",
    "end": "1072000"
  },
  {
    "text": "would be oh they're usable there are many applications where were were being less than 2x lore uh because of these",
    "start": "1009319",
    "end": "1015720"
  },
  {
    "text": "other properties that you get you'd be like yeah it's not the performance doesn't make a difference if I was writing a JS application uh doing like I",
    "start": "1015720",
    "end": "1022240"
  },
  {
    "text": "was using jQuery jQuery find element by CSS ID is",
    "start": "1022240",
    "end": "1028079"
  },
  {
    "text": "165 times slower uh than um than adding an element to a vector it's not going to",
    "start": "1028079",
    "end": "1033839"
  },
  {
    "text": "be the bottleneck in your application but functional programmers have been doing playing this game for a lot longer",
    "start": "1033839",
    "end": "1039959"
  },
  {
    "text": "than obum programmers and so we have lots of optimizations in place uh so for",
    "start": "1039959",
    "end": "1045160"
  },
  {
    "text": "example it's very common to oops it's very common to want to build something",
    "start": "1045160",
    "end": "1051440"
  },
  {
    "text": "very quickly uh so we have a really nice operation which takes allows you to take any trans uh IM mutable Vector in 01",
    "start": "1051440",
    "end": "1059919"
  },
  {
    "text": "time thaw it into a mutable thing without affecting the original you can uh mutate it and then at the end when",
    "start": "1059919",
    "end": "1067080"
  },
  {
    "text": "you're done in 01 time you can get a persistent version of it uh and this performs great so if there you find that",
    "start": "1067080",
    "end": "1073799"
  },
  {
    "start": "1072000",
    "end": "1131000"
  },
  {
    "text": "persistent data structures are a bottleneck and you need a little bit more perf uh you can use transients that's what we call call them enclosure",
    "start": "1073799",
    "end": "1079840"
  },
  {
    "text": "and there are analogs in other languages uh so how does it perform",
    "start": "1079840",
    "end": "1086320"
  },
  {
    "text": "now so on this machine with this particular build um you know it's more",
    "start": "1090440",
    "end": "1096600"
  },
  {
    "text": "than twice as fast to to build an immutable uh Vector uh and this is you",
    "start": "1096600",
    "end": "1102280"
  },
  {
    "text": "might be thinking well that's V8 uh uh our data structures are optimized for all JavaScript engines not V8 in",
    "start": "1102280",
    "end": "1108159"
  },
  {
    "text": "particular and so you can see JavaScript this is Javascript core this is this JavaScript",
    "start": "1108159",
    "end": "1113480"
  },
  {
    "text": "engine in Safari so you can see that JavaScript core is much better at building the array but it doesn't really matter we still beat uh the mutable",
    "start": "1113480",
    "end": "1120280"
  },
  {
    "text": "array in this case uh by using transient vectors so good",
    "start": "1120280",
    "end": "1125919"
  },
  {
    "text": "per so now that we and this is this stuff is only going to get better um I you know I've been following JavaScript",
    "start": "1125919",
    "end": "1131240"
  },
  {
    "start": "1131000",
    "end": "1141000"
  },
  {
    "text": "for a long time I mean the the amount of optimization that's being poured into JavaScript engines is pretty wild it's probably we've never seen this much",
    "start": "1131240",
    "end": "1137600"
  },
  {
    "text": "money being going into optim in optimizing one language there's a whole bunch of research that has um is in the",
    "start": "1137600",
    "end": "1143200"
  },
  {
    "start": "1141000",
    "end": "1197000"
  },
  {
    "text": "design of JavaScript core spider monkey um and um uh V8 that's really cool and",
    "start": "1143200",
    "end": "1150000"
  },
  {
    "text": "it's only going to get better because you have this desire to um uh basically get the to the performance of C in the",
    "start": "1150000",
    "end": "1156720"
  },
  {
    "text": "browser uh games games are sort of driving this there's a whole initiative called asm.js that Firefox did and the",
    "start": "1156720",
    "end": "1162760"
  },
  {
    "text": "other the other engines don't want to do it they want to achieve that performance dynamically without aing this weird Java",
    "start": "1162760",
    "end": "1168679"
  },
  {
    "text": "JavaScript variant uh so only uh our stuff is only going to get faster so",
    "start": "1168679",
    "end": "1174159"
  },
  {
    "text": "okay now that you guys know about persistent uh data structures or at least one form of them um you can uh you",
    "start": "1174159",
    "end": "1179880"
  },
  {
    "text": "you'll have some interesting real realizations as I had about seven months ago um I realized that Facebook's react",
    "start": "1179880",
    "end": "1186159"
  },
  {
    "text": "which I ignored which was released about a year ago actually had this amazing hook where I could attach persistent",
    "start": "1186159",
    "end": "1193039"
  },
  {
    "text": "data structures and basically make react faster than it is out of the box if you attach if you use data structures with",
    "start": "1193039",
    "end": "1199720"
  },
  {
    "start": "1197000",
    "end": "1207000"
  },
  {
    "text": "react um it's just faster uh and we'll see why and you get some other neat",
    "start": "1199720",
    "end": "1205120"
  },
  {
    "text": "things out of that as well so om basically takes closure script and it takes react and it sort of shows that we",
    "start": "1205120",
    "end": "1210760"
  },
  {
    "start": "1207000",
    "end": "1289000"
  },
  {
    "text": "can you can build interesting responsive efficient user interfaces that actually",
    "start": "1210760",
    "end": "1216559"
  },
  {
    "text": "make many hard things easier to do um and we'll see that so if you have if you're not familiar with react react is",
    "start": "1216559",
    "end": "1222919"
  },
  {
    "text": "sort of up and coming um a lot of people are probably more familiar with things like angular or backbone or um",
    "start": "1222919",
    "end": "1229559"
  },
  {
    "text": "uh in uh what Ember Ember um but those",
    "start": "1229559",
    "end": "1235159"
  },
  {
    "text": "those things are fine those things are great and in fact those probably can be modified to do some of the things I'm demonstrating but react is definitely",
    "start": "1235159",
    "end": "1240600"
  },
  {
    "text": "makes integration of immutable data structures the simplest so well how does react work",
    "start": "1240600",
    "end": "1245760"
  },
  {
    "text": "react is sort of designed around this sort of uh interesting batch rendering sort of concept you know they it sort of",
    "start": "1245760",
    "end": "1252039"
  },
  {
    "text": "treats the browser as a sort of GPU so in a GPU you really don't want to send individual instructions to GPU because",
    "start": "1252039",
    "end": "1258360"
  },
  {
    "text": "that's very slow uh you want to batch as much as you can and send one big message and so what react does because that's",
    "start": "1258360",
    "end": "1264400"
  },
  {
    "text": "really annoying to do by hand in fact if you've ever see highly optimized Dom code people do this stuff by hand so",
    "start": "1264400",
    "end": "1270159"
  },
  {
    "text": "react says that's a pattern we're going to design our framework uh using this thing called the virtual Dom and we'll",
    "start": "1270159",
    "end": "1275679"
  },
  {
    "text": "do that batching for you U basically uh react looks like an objectoriented thing",
    "start": "1275679",
    "end": "1281360"
  },
  {
    "text": "but it really was designed by with sort of by a functional programmer the guy uh that did this the original concept was",
    "start": "1281360",
    "end": "1287520"
  },
  {
    "text": "by somebody who was a fan functional programming but what it lets you do is it let you take your data your JavaScript data you apply a view",
    "start": "1287520",
    "end": "1294520"
  },
  {
    "start": "1289000",
    "end": "1393000"
  },
  {
    "text": "function and then it computes a virtual Dom um if you have new data you apply",
    "start": "1294520",
    "end": "1301120"
  },
  {
    "text": "that function and it it computes a completely new virtual Dom that's how it works at a high level there are many",
    "start": "1301120",
    "end": "1307000"
  },
  {
    "text": "optimizations in place to prevent Computing the entire tree and but it's irrelevant conceptually that is how it",
    "start": "1307000",
    "end": "1313120"
  },
  {
    "text": "works it produces a virtual Dom as your as your values change that represent the entire application",
    "start": "1313120",
    "end": "1319679"
  },
  {
    "text": "um and how it changes the Dom as it says we can take the virtual Dom we calculated at time zero and the virtual",
    "start": "1319679",
    "end": "1326559"
  },
  {
    "text": "Dom that we calculated at time one and that will give us the minimal set of changes to apply to the Dom what's cool",
    "start": "1326559",
    "end": "1333000"
  },
  {
    "text": "about this is that in this world unlike what anything you probably used before if I just flip those two virtual Doms",
    "start": "1333000",
    "end": "1341400"
  },
  {
    "text": "react will give me the reverse set of changes right for free I don't have to do that I don't do anything react will",
    "start": "1341400",
    "end": "1347720"
  },
  {
    "text": "simply compute the the reverse set of changes and and we'll see uh demos that take uh take advantage of that okay so I",
    "start": "1347720",
    "end": "1355679"
  },
  {
    "text": "I had sort of I wrote a I wrote a blog post like um in January and it was very",
    "start": "1355679",
    "end": "1360840"
  },
  {
    "text": "popular it was like I don't know I think I got 150,000 uniques in like a week um and it totally changed people's",
    "start": "1360840",
    "end": "1367159"
  },
  {
    "text": "perspective of react uh react is quite popular now um but I but I I I sort of postulated that doing undo was now",
    "start": "1367159",
    "end": "1374600"
  },
  {
    "text": "trivial which is classically in object oriented systems is a big pain in the butt you want to add it later and I said",
    "start": "1374600",
    "end": "1380080"
  },
  {
    "text": "if you organize your entire application State and run immutable data structure undo is free there's nothing you have to",
    "start": "1380080",
    "end": "1385360"
  },
  {
    "text": "do you can jump to any point in time in your application State um and react will be able to render it fairly quickly uh",
    "start": "1385360",
    "end": "1391480"
  },
  {
    "text": "so this uh developer at at Ableton Ableton Live the musical software a UI developer there read my blog post and",
    "start": "1391480",
    "end": "1397600"
  },
  {
    "text": "said you know I want to see if this guy is like serious he's this doesn't sound like you could really do this and so he",
    "start": "1397600",
    "end": "1402919"
  },
  {
    "text": "set out to prove to himself that it could be done and he built a really great little application it's a 64x 64",
    "start": "1402919",
    "end": "1409039"
  },
  {
    "text": "pixel editor and what he did was he put all of the pixels uh for that you draw",
    "start": "1409039",
    "end": "1414200"
  },
  {
    "text": "the frame that you draw into into an immutable vector and he wanted to show that you know demonstrate that he could basically get infinite undo infinite",
    "start": "1414200",
    "end": "1421120"
  },
  {
    "text": "redo it would be Memory efficient the application wouldn't slow down um that he could use the precis data structures",
    "start": "1421120",
    "end": "1427120"
  },
  {
    "text": "to get you know trivial exporting of animated gifts uh and so on and so let me show that right",
    "start": "1427120",
    "end": "1434400"
  },
  {
    "text": "now uh so here it is running in um make sure this is going to work okay okay so",
    "start": "1434400",
    "end": "1439559"
  },
  {
    "start": "1438000",
    "end": "1553000"
  },
  {
    "text": "here it is make this a little bit bigger uh so it's it's a cool little app",
    "start": "1439559",
    "end": "1445000"
  },
  {
    "text": "it's it's it's it's actually quite a bit of code it's like I think a 2,000 Line application it's not simple uh he spent",
    "start": "1445000",
    "end": "1450039"
  },
  {
    "text": "quite a bit of time on it but I can I can pick a color uh I can draw a little",
    "start": "1450039",
    "end": "1455640"
  },
  {
    "text": "little halo around this this funny little character on the right side of the screen that's the",
    "start": "1455640",
    "end": "1461960"
  },
  {
    "text": "history uh I can undo I can redo",
    "start": "1461960",
    "end": "1469320"
  },
  {
    "text": "and even if I do this right I'm clicking one pixel these are all getting recorded",
    "start": "1469320",
    "end": "1475240"
  },
  {
    "text": "as undo steps and you could do this all day and it's you know it's going to be",
    "start": "1475240",
    "end": "1480840"
  },
  {
    "text": "relatively efficient uh which is pretty cool so",
    "start": "1480840",
    "end": "1488080"
  },
  {
    "text": "um it's very it's very it's very nice and also over here you can see that I can scrub I can scrub the history and",
    "start": "1488120",
    "end": "1494399"
  },
  {
    "text": "it's also responsive right he's actually he's actually using the fact that is all stored as persistent data structure so",
    "start": "1494399",
    "end": "1500360"
  },
  {
    "text": "you're probably wondering well how complicated was this part right the part that's the hardest and the part that people don't do they just you know you",
    "start": "1500360",
    "end": "1506600"
  },
  {
    "text": "get to undo and you're like ah don't we don't care it's not a big deal uh so this is his his entire file to implement",
    "start": "1506600",
    "end": "1513640"
  },
  {
    "text": "undo um 60 lines of code this is playback",
    "start": "1513640",
    "end": "1519120"
  },
  {
    "text": "this is undo redo um and the exporting to animated gif that's awesome right",
    "start": "1519120",
    "end": "1526000"
  },
  {
    "text": "this is really cool something that's classically hard to do uh with persistent data structures pretty",
    "start": "1526000",
    "end": "1532240"
  },
  {
    "text": "straightforward uh and then you're probably if you're performance-minded you're probably wondering uh well what",
    "start": "1532240",
    "end": "1537880"
  },
  {
    "text": "about memory usage so this is so I I for just for fun I said well I'm going to take a persistent Vector with has 496",
    "start": "1537880",
    "end": "1543799"
  },
  {
    "text": "elements and I'm going to snapshot a thousand of them basically I'm going to store them in a in a in a in a root",
    "start": "1543799",
    "end": "1549120"
  },
  {
    "text": "variable so that they get um they're pinned so that I can do a a heap snapshot uh Google Chrome Dev tools has",
    "start": "1549120",
    "end": "1555960"
  },
  {
    "start": "1553000",
    "end": "1649000"
  },
  {
    "text": "an awesome Heap snapshot it shows you exactly how much memory your JavaScript application is using and so I I snapshotted 1 th000 frames and then I",
    "start": "1555960",
    "end": "1563080"
  },
  {
    "text": "took a an array with 496 elements and I randomly updated but of course I had to copy on right I had to copy on right",
    "start": "1563080",
    "end": "1569760"
  },
  {
    "text": "every array because if I wanted the the same uh Behavior that's what you had to do uh to do a thousand snapshots took",
    "start": "1569760",
    "end": "1577559"
  },
  {
    "text": "210 of a megabyte with persistent vectors on the right you see that it took about 1 point 7 megabytes if I used",
    "start": "1577559",
    "end": "1584399"
  },
  {
    "text": "copy and WR with arrays so it's nearly an order of magnitude uh memory saving so it's not just speed uh it it also is",
    "start": "1584399",
    "end": "1592760"
  },
  {
    "text": "very efficient uh in memory um so of course people often misconstrue what I'm saying as like undo",
    "start": "1592760",
    "end": "1599200"
  },
  {
    "text": "redo well that that that's great but doesn't apply to all applications and people often don't understand that this",
    "start": "1599200",
    "end": "1604919"
  },
  {
    "text": "is not about undo or redo this is about um very powerful State Management if you",
    "start": "1604919",
    "end": "1610240"
  },
  {
    "text": "have modals if you have a multi-step form where the user can press the back button you don't want to lose anything",
    "start": "1610240",
    "end": "1615360"
  },
  {
    "text": "and you don't want to have to do an extra persist to the server just so that they can click the back button and their form fields are pre-filled right",
    "start": "1615360",
    "end": "1622520"
  },
  {
    "text": "persistent data structure you can you can you can step through time you can even allow somebody to go backwards in their form change your form and then",
    "start": "1622520",
    "end": "1629159"
  },
  {
    "text": "propagate those those changes forward through history so if you've ever done any git magic anything that you think is",
    "start": "1629159",
    "end": "1634640"
  },
  {
    "text": "really cool like with fancy git tricks you can do this in memory in your interactive application uh so it's it's",
    "start": "1634640",
    "end": "1640679"
  },
  {
    "text": "much bigger than UND redo it's about powerful State Management tools uh to the extreme you uh you have things like",
    "start": "1640679",
    "end": "1648279"
  },
  {
    "text": "um an extreme case of this is uh Elm so I'm sure as many of you have seen",
    "start": "1648279",
    "end": "1655279"
  },
  {
    "start": "1649000",
    "end": "1733000"
  },
  {
    "text": "um Brett Victor's talks so Brett Victor's talks are really cool but they're just prototypes they aren't real",
    "start": "1655279",
    "end": "1661159"
  },
  {
    "text": "and so people at the end of his talks are all like oh that's what I want but it doesn't actually work so uh it's been",
    "start": "1661159",
    "end": "1666600"
  },
  {
    "text": "interesting to see actually the the functional so sort of functional JavaScript and compiled to JavaScript um",
    "start": "1666600",
    "end": "1672360"
  },
  {
    "text": "people actually taking trying to do the real version of this and Elm is a is a sort of functional programming language",
    "start": "1672360",
    "end": "1677559"
  },
  {
    "text": "that targets Java script that also emphasizes immutability and so they were also able to with not too much effort",
    "start": "1677559",
    "end": "1683880"
  },
  {
    "text": "write um uh uh modify their IDE so that they use a persistent data structure to",
    "start": "1683880",
    "end": "1689919"
  },
  {
    "text": "snapshot the state of the entire application and you hit a bug and you can basically pause and it's been",
    "start": "1689919",
    "end": "1696039"
  },
  {
    "text": "recording everything and you have a slider and you can actually Slide the slider see what values are wrong change",
    "start": "1696039",
    "end": "1702240"
  },
  {
    "text": "change your values on the Fly change your program on the Fly that will get hot loaded modify the state that that",
    "start": "1702240",
    "end": "1708799"
  },
  {
    "text": "that the program is aware of and you know you can edit and continue uh so all",
    "start": "1708799",
    "end": "1714320"
  },
  {
    "text": "this like he's he's going to modify I think the",
    "start": "1714320",
    "end": "1719360"
  },
  {
    "text": "gravity yeah pretty cool so there are lots of possibilities not just the ones I've talked about",
    "start": "1719880",
    "end": "1726600"
  },
  {
    "text": "okay so uh I'm GNA basically almost getting towards the end so if you want to play around with this and you're a",
    "start": "1726600",
    "end": "1732320"
  },
  {
    "text": "JavaScript developer um you're interested in this type of thing I wrote something two years ago now called Mory it actually takes the entire cure script",
    "start": "1732320",
    "end": "1739039"
  },
  {
    "start": "1733000",
    "end": "1770000"
  },
  {
    "text": "standard library and presents it as a normal JavaScript library you can include it the way you would include",
    "start": "1739039",
    "end": "1744320"
  },
  {
    "text": "anything else it's pretty nice it's it's a fun way to play with it um it's actually quite popular uh in the node",
    "start": "1744320",
    "end": "1750679"
  },
  {
    "text": "Community now relatively speaking it gets basically 8,000 downloads a month which is not bad so uh finally people",
    "start": "1750679",
    "end": "1757159"
  },
  {
    "text": "are warming up to it when I announced this two years ago like you know for a year I got zero downloads uh but I've",
    "start": "1757159",
    "end": "1762840"
  },
  {
    "text": "been doing a lot of talks in the JS Community about it and people are starting to see yes this is valuable sometimes that's really cool uh Facebook",
    "start": "1762840",
    "end": "1770760"
  },
  {
    "start": "1770000",
    "end": "1913000"
  },
  {
    "text": "now because of I've been blogging so much about how awesome immutability is when you pair it with your react they",
    "start": "1770760",
    "end": "1776240"
  },
  {
    "text": "actually are making their own idiomatic immutable data structure Library so Facebook is doubling down on immutable",
    "start": "1776240",
    "end": "1782840"
  },
  {
    "text": "data structures because they they want users of react to pair them with immutable data structures in fact if if",
    "start": "1782840",
    "end": "1788960"
  },
  {
    "text": "you could convince all JavaScript developers to do this I mean react would just get four times faster right it",
    "start": "1788960",
    "end": "1794840"
  },
  {
    "text": "would just for free if you get everybody to use immutable data structures um and then you're probably wondering",
    "start": "1794840",
    "end": "1800919"
  },
  {
    "text": "well if I use immutable data structures that's really cool but I have to use Json so how do you get immutable data",
    "start": "1800919",
    "end": "1806240"
  },
  {
    "text": "structures from your server to the client so we've already solved this problem at cognitech for you too we have a cool Library called Transit which",
    "start": "1806240",
    "end": "1813000"
  },
  {
    "text": "piggybacks on Json and I wrote a blog post um on actually uh changing Transit",
    "start": "1813000",
    "end": "1819799"
  },
  {
    "text": "so that you could read um a value off the wire and instead of getting mutable arrays and mutable um objects you get",
    "start": "1819799",
    "end": "1828120"
  },
  {
    "text": "immutablejs um vectors and Maps so and it's fast it's not slow immutablejs has",
    "start": "1828120",
    "end": "1834240"
  },
  {
    "text": "the right hooks so that we can construct these things very quickly so it's a very small overhead over",
    "start": "1834240",
    "end": "1841600"
  },
  {
    "text": "Json and so who's using this so actually Prismatic which is pretty big now I think they actually have 10 Engineers or",
    "start": "1841600",
    "end": "1847240"
  },
  {
    "text": "something working on an M application they really like it I mean the thing that they like is that M gives us gives them a very good story for reasoning",
    "start": "1847240",
    "end": "1853679"
  },
  {
    "text": "about the code there you know it's not a codebase where typically in JavaScript like you don't know what's mutating what",
    "start": "1853679",
    "end": "1859880"
  },
  {
    "text": "and and their application there it's it's very clear if they need if they need some sort of State change where",
    "start": "1859880",
    "end": "1865000"
  },
  {
    "text": "it's happening meteorjs which is really popular uh doesn't actually export Mory but they you they also found a use case",
    "start": "1865000",
    "end": "1871600"
  },
  {
    "text": "for um um Mory inside of the dependency uh resolution system their package",
    "start": "1871600",
    "end": "1877080"
  },
  {
    "text": "manager uh uses a constraint solver and it uses Mory under the hood so that this to get like a 50% performance boost uh",
    "start": "1877080",
    "end": "1884960"
  },
  {
    "text": "circleci which is you know a reasonable some semi popular uh continuous integration service they all they use M",
    "start": "1884960",
    "end": "1891480"
  },
  {
    "text": "on the front end and of course there's all these other companies that use closure script that are already sort of sold on immutable data structures but",
    "start": "1891480",
    "end": "1898440"
  },
  {
    "text": "it's really exciting to see that again this is uh coming to JavaScript and JavaScript people are are also excited",
    "start": "1898440",
    "end": "1904200"
  },
  {
    "text": "about it as well uh so there's some links these these slides will be available I recommend checking them out",
    "start": "1904200",
    "end": "1911240"
  },
  {
    "text": "um and I think that's all I have I can take questions",
    "start": "1911240",
    "end": "1916840"
  },
  {
    "start": "1913000",
    "end": "2023000"
  },
  {
    "text": "so uh how do you deal with with animations do every frame in the",
    "start": "1921559",
    "end": "1927000"
  },
  {
    "text": "animation as as step one St",
    "start": "1927000",
    "end": "1933760"
  },
  {
    "text": "to so uh what I was alluding to early on is that you can pick your strategy right so actually um in in Goya when I'm",
    "start": "1933760",
    "end": "1940960"
  },
  {
    "text": "scrubbing I mean that's an animation so all he's doing is he he so it's not like you're going to stop using mutation",
    "start": "1940960",
    "end": "1946840"
  },
  {
    "text": "right that's not going to happen so he just takes each vector and he blits it onto the canvas so it's just a you Tak",
    "start": "1946840",
    "end": "1952760"
  },
  {
    "text": "it's grab a vector you know go through every element and in the for Loop the for Loop just mutate the canvas uh you",
    "start": "1952760",
    "end": "1959559"
  },
  {
    "text": "you will use the same techniques for animation so what kind of data",
    "start": "1959559",
    "end": "1965679"
  },
  {
    "text": "structures do you have ready made mutable implementations for I'm sorry so what kind of data",
    "start": "1965679",
    "end": "1971799"
  },
  {
    "text": "structures so you showed you know Vector oh okay so which which what data structures do we have we have sorted",
    "start": "1971799",
    "end": "1976880"
  },
  {
    "text": "Maps we have sorted sets uh we have um sets we have Maps um",
    "start": "1976880",
    "end": "1983240"
  },
  {
    "text": "vectors um qes linked lists I think",
    "start": "1983240",
    "end": "1988320"
  },
  {
    "text": "that's it yeah we're also very clever I mean so the thing is that uh you know we",
    "start": "1988320",
    "end": "1994320"
  },
  {
    "text": "like honestly some of these things that you use there's like five data structures involved because you want to swap out the right one for the partic",
    "start": "1994320",
    "end": "2000679"
  },
  {
    "text": "particular us usage pattern so that you don't have to worry about it",
    "start": "2000679",
    "end": "2006880"
  },
  {
    "text": "other questions no okay thank you",
    "start": "2009279",
    "end": "2018120"
  }
]