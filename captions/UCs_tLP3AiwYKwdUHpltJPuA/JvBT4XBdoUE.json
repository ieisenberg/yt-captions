[
  {
    "text": "[Music]",
    "start": "990",
    "end": "7859"
  },
  {
    "text": "thank you so hello everyone and thank you for joining me in this talk where we're going to explore the legacy of Joe",
    "start": "14420",
    "end": "20600"
  },
  {
    "text": "Armstrong the principal inventor of Erlang who unfortunately recently passed away and so Joe sadly will not be with",
    "start": "20600",
    "end": "27890"
  },
  {
    "text": "us anymore but his work lives on and this is what we're going to explore today basically whatever I'm about to show you exists",
    "start": "27890",
    "end": "34010"
  },
  {
    "text": "first and foremost owing to Joe's immense contribution to our field and speaking personally for myself I'm",
    "start": "34010",
    "end": "40100"
  },
  {
    "text": "extremely grateful for that so I've been using Erlang an elixir for quite some time now and for me personally this is",
    "start": "40100",
    "end": "46699"
  },
  {
    "text": "my by far my favorite part of my own professional career and with this talk I basically want to try to spread a little",
    "start": "46699",
    "end": "52820"
  },
  {
    "text": "bit of this happiness and explain why exactly am I so excited about these languages and so I'm going to take you",
    "start": "52820",
    "end": "58879"
  },
  {
    "text": "with me into the quest for the soul of our long and Alex here and you're getting two languages at the price of one and I'm gonna throw in a couple of",
    "start": "58879",
    "end": "65210"
  },
  {
    "text": "more into the mix and the main reason why I can do this is because I'm focusing on the common theme between these languages and this is the runtime",
    "start": "65210",
    "end": "72350"
  },
  {
    "text": "layer the Erlang virtual machine which is also known under the name beam and so despite all the differences that exist",
    "start": "72350",
    "end": "78200"
  },
  {
    "text": "between these languages I'm going to treat them as if they are exactly the same as if there are a mere interface that we use to talk to beam and harness",
    "start": "78200",
    "end": "85729"
  },
  {
    "text": "its power and so I'm gonna be very sloppy about these names most of the time I'm going to say elixir because all",
    "start": "85729",
    "end": "91310"
  },
  {
    "text": "of the demos and samples code samples that you see are written in a list here maybe occasionally I'll say Erlang but",
    "start": "91310",
    "end": "97040"
  },
  {
    "text": "what I really mean to say is any beam language because beam is the focus of this talk from a user's perspective from",
    "start": "97040",
    "end": "102560"
  },
  {
    "text": "a standpoint of a developer writing a beam powered system so the talk is going to consist of three parts I'm gonna kick",
    "start": "102560",
    "end": "107960"
  },
  {
    "text": "off with a basic introduction to the principles and mechanics of beam concurrency and this is then followed",
    "start": "107960",
    "end": "113869"
  },
  {
    "text": "with the central piece which is a demo driven exploration of being concurrency in practice so we're going to take a",
    "start": "113869",
    "end": "119570"
  },
  {
    "text": "look at how to split system into different concurrent parts and we're going to discuss a little bit why do we do why do we take these approaches that",
    "start": "119570",
    "end": "125630"
  },
  {
    "text": "what kind of benefits do we get and then finally I'm going to wrap up with a short and somewhat controversial think",
    "start": "125630",
    "end": "130820"
  },
  {
    "text": "piece exploring a different style of building software systems a style which goes against the grain of what we're typically doing today a style which is",
    "start": "130820",
    "end": "137630"
  },
  {
    "text": "first and foremost made possible when we have a runtime such as beam as our foundation a style which is in my",
    "start": "137630",
    "end": "142910"
  },
  {
    "text": "personal opinion simpler yet at the same time more powerful and flexible compared to however people can be",
    "start": "142910",
    "end": "148260"
  },
  {
    "text": "building software systems today so I have a quite a lot of I have a very ambitious plan obviously the time is",
    "start": "148260",
    "end": "155010"
  },
  {
    "text": "limited so I gotta warn you upfront then I'm gonna speak really fast and I apologize for this but I do want to share a lot of information with you and",
    "start": "155010",
    "end": "161400"
  },
  {
    "text": "I hope that it's going to be interesting for you and that you're going to get a lot of food for thought so without further ado let's kick off with",
    "start": "161400",
    "end": "167640"
  },
  {
    "text": "concurrency the way Joe Armstrong envisioned it this beam-style concurrency and the central idea the central concept here is the concept of a",
    "start": "167640",
    "end": "174209"
  },
  {
    "text": "thing called process and process in beam terminology is a runtime execution",
    "start": "174209",
    "end": "179280"
  },
  {
    "text": "context of code any code like elixir code runs in some process at runtime now process is not a novice process and it",
    "start": "179280",
    "end": "185849"
  },
  {
    "text": "is not a novice thread and we're gonna clarify this distinction a bit later on but essentially what process is is",
    "start": "185849",
    "end": "191040"
  },
  {
    "text": "basically a sequential program right so there is no internal concurrency in the process and you have regular things",
    "start": "191040",
    "end": "196560"
  },
  {
    "text": "happening in there you're invoking some functions passing some parameters taking return values have some branching logic",
    "start": "196560",
    "end": "201900"
  },
  {
    "text": "have some loops so on so forth basic programming 101 and as long as it's a quench all we say that the leaks",
    "start": "201900",
    "end": "207930"
  },
  {
    "text": "here is functional by some definition of functional not a pure functional language but it has some functional",
    "start": "207930",
    "end": "213180"
  },
  {
    "text": "properties and then you have this whole other paradigm within the same language this concurrent elixir and to become",
    "start": "213180",
    "end": "219480"
  },
  {
    "text": "concurrent you knew you really need to run multiple processes and there are a bunch of different ways how you can do",
    "start": "219480",
    "end": "224849"
  },
  {
    "text": "this but the most fundamental one would be this function here from standard library called spawn which you invoke to",
    "start": "224849",
    "end": "231359"
  },
  {
    "text": "start or spawn another process so here we have one process one sequential program we invoke spawn we pass it a",
    "start": "231359",
    "end": "238319"
  },
  {
    "text": "lambda and anonymous function and what happens is a new process is started or spawned and as soon as that process is",
    "start": "238319",
    "end": "244829"
  },
  {
    "text": "started this process here moves forward and now in theory on paper we have two processes running in parallel or the way",
    "start": "244829",
    "end": "251069"
  },
  {
    "text": "I prefer to say it is we have two completely independent programs running completely separately from each other they have nothing in common with each",
    "start": "251069",
    "end": "257519"
  },
  {
    "text": "other at all so have their own separate execution flow they have their own separate memory space stack heap they",
    "start": "257519",
    "end": "263669"
  },
  {
    "text": "are separately garbage collected at different points in time and they are really completely two separate programs and the only way they can actually work",
    "start": "263669",
    "end": "270360"
  },
  {
    "text": "together cooperate is by sending themselves messages which is also known as message passing concurrency so again",
    "start": "270360",
    "end": "276719"
  },
  {
    "text": "a bunch of different ways how you can do this in a least here the most where would be the function called send",
    "start": "276719",
    "end": "282690"
  },
  {
    "text": "which you can invoke to send a message to another process so somehow you address a process the target the",
    "start": "282690",
    "end": "287970"
  },
  {
    "text": "receiver and send it a message and a message is an arbitrary piece of data whichever term you can construct in elixir and then on the receiver side you",
    "start": "287970",
    "end": "295290"
  },
  {
    "text": "instruct the process to pull one message from its mailbox which is sort of like a FIFO queue and then you do something",
    "start": "295290",
    "end": "300750"
  },
  {
    "text": "with this message so if it helps you can think of this as being similar to the idea of microservices because there you",
    "start": "300750",
    "end": "306060"
  },
  {
    "text": "have a similar kind of approach to micro-services are two completely independent programs like typical to always processes they have nothing in",
    "start": "306060",
    "end": "312900"
  },
  {
    "text": "common and they therefore the only way they can work together is via some form of message passing like using HTTP",
    "start": "312900",
    "end": "318660"
  },
  {
    "text": "requests for example and we have a question or it's a complex topic in",
    "start": "318660",
    "end": "330120"
  },
  {
    "text": "itself you're gonna see a little bit more examples later but there is of course a idea of a process ID you can somehow reference a process ok so right",
    "start": "330120",
    "end": "339060"
  },
  {
    "text": "with microservices you have the similar idea you have two independent programs then you use some message passing to",
    "start": "339060",
    "end": "344130"
  },
  {
    "text": "communicate with them like HTTP requests here you have a similar idea except of course there's no networking involved",
    "start": "344130",
    "end": "350520"
  },
  {
    "text": "there's no HTTP protocol no serialization deserialization and the mechanics the mechanism is supported",
    "start": "350520",
    "end": "357030"
  },
  {
    "text": "directly by the language and in fact it's supported directly by the runtime and so let me briefly explain what",
    "start": "357030",
    "end": "362760"
  },
  {
    "text": "happens at runtime so let's say that you have implemented the system in a Lix here somehow you're going to have a",
    "start": "362760",
    "end": "367950"
  },
  {
    "text": "project where a project is basically a folder structure of a bunch of source files and then you somehow started you",
    "start": "367950",
    "end": "374400"
  },
  {
    "text": "invoke a single command to start that thing what happens is a single operating system process is started just one ôs",
    "start": "374400",
    "end": "380430"
  },
  {
    "text": "process your own instance of being the ER language whole machine and this is where the entire system is running in a",
    "start": "380430",
    "end": "386040"
  },
  {
    "text": "single OS process in there you're going to have a bunch of these small sequential independent lightweight",
    "start": "386040",
    "end": "391110"
  },
  {
    "text": "programs this processes these things that you spawn on your own from within your code whenever you want to and",
    "start": "391110",
    "end": "396330"
  },
  {
    "text": "you're going to have a bunch of these things running like think in terms of thousands hundreds of thousands millions",
    "start": "396330",
    "end": "401430"
  },
  {
    "text": "like the maximum limit imposed by beam being around 130 million of these",
    "start": "401430",
    "end": "406770"
  },
  {
    "text": "processors so these things are quite cheap in terms of memory overhead and startup time and we really run a lot of",
    "start": "406770",
    "end": "412110"
  },
  {
    "text": "them now internally what happens beam employs a couple of our threads called schedulers by default we're going",
    "start": "412110",
    "end": "417820"
  },
  {
    "text": "to have one scheduler per available CPU core and then the schedulers are responsible for executing these",
    "start": "417820",
    "end": "423520"
  },
  {
    "text": "processors so a naive version how you can think of it is imagine that there is a single view of processors pending for",
    "start": "423520",
    "end": "430570"
  },
  {
    "text": "execution and then each scheduler somehow pulls one process from the queue runs it for a little while",
    "start": "430570",
    "end": "435790"
  },
  {
    "text": "puts it back to the end of the queue takes the next one rinse and repeat the real deal is of course way more sophisticated but this simple",
    "start": "435790",
    "end": "442180"
  },
  {
    "text": "approximation is going to work for our needs and that's it it's you know in my",
    "start": "442180",
    "end": "447760"
  },
  {
    "text": "opinion not really rocket science it's actually incredibly simple in its nature but now it begs the question you know",
    "start": "447760",
    "end": "453820"
  },
  {
    "text": "like what do we do with this how do we use this thing how do we split things into processors and to what purpose and",
    "start": "453820",
    "end": "458970"
  },
  {
    "text": "to demonstrate this I have prepared a series of demos so for that purpose I",
    "start": "458970",
    "end": "465100"
  },
  {
    "text": "have written a small example demo system in Aleks here which is already started on this machine as a background service",
    "start": "465100",
    "end": "470590"
  },
  {
    "text": "as a headless demon if you will running or started pretty much in exactly the same way as I would have started it in",
    "start": "470590",
    "end": "476050"
  },
  {
    "text": "real production so it's a single beam instance it's a single lowest process and everything that you're going to see is powered by that single lowest process",
    "start": "476050",
    "end": "483100"
  },
  {
    "text": "nothing on the side existing which supports that system so the first thing I'm going to show you is a sort of an",
    "start": "483100",
    "end": "490240"
  },
  {
    "text": "internal dashboard where I can generate some synthetic load I can start up some jobs and each job is a process that's in",
    "start": "490240",
    "end": "497470"
  },
  {
    "text": "simple sequential program and so let me start up some jobs which are going to simulate some usage on our system and",
    "start": "497470",
    "end": "503760"
  },
  {
    "text": "you would in a matter of a single second we have 10,000 processes running running around 10,000 of these independent",
    "start": "503760",
    "end": "509800"
  },
  {
    "text": "programs running around our system in each of these programs each of these processes runs in an infinite loop",
    "start": "509800",
    "end": "515520"
  },
  {
    "text": "within that loop it runs a short cpu-bound loop to generate some load to",
    "start": "515520",
    "end": "521500"
  },
  {
    "text": "simulate some synthetic load and then it sends a message to a well-known process in the system like a singleton well",
    "start": "521500",
    "end": "528190"
  },
  {
    "text": "known well addressable process in the system basically it indicates a success in the current iteration then it sleeps",
    "start": "528190",
    "end": "534460"
  },
  {
    "text": "for a single second rinse and repeat and then we have that other process in fact a couple of other processes collecting",
    "start": "534460",
    "end": "540400"
  },
  {
    "text": "this day time working together to propagate this to whichever user is observing this page and so what we see",
    "start": "540400",
    "end": "546880"
  },
  {
    "text": "on the page are basic like metrics if you will so most notably the chart on the left indicates",
    "start": "546880",
    "end": "552090"
  },
  {
    "text": "a reported rate of successes per second as you can tell we are roughly in the area of expected 10 K successes per",
    "start": "552090",
    "end": "558750"
  },
  {
    "text": "second you may notice that the line is not completely perfectly aligned perfectly flat so there are going to be",
    "start": "558750",
    "end": "565050"
  },
  {
    "text": "some oscillations first and foremost because the logic is not really perfectly synchronized and then in",
    "start": "565050",
    "end": "570210"
  },
  {
    "text": "addition because there are other things running on this relatively modest machine beside the system itself right",
    "start": "570210",
    "end": "575610"
  },
  {
    "text": "so most notably this browser is rendering this chart very frequently using SVG so expect some oscillations",
    "start": "575610",
    "end": "581670"
  },
  {
    "text": "there going to be maybe even a bit larger but roughly we do expect to be in the area of 10 K successes per second",
    "start": "581670",
    "end": "587220"
  },
  {
    "text": "now this system here is powered by a single scheduler thread by default it",
    "start": "587220",
    "end": "593190"
  },
  {
    "text": "would actually use one it would actually four on this machine but I have deliberately downgraded it hard-coded it",
    "start": "593190",
    "end": "599160"
  },
  {
    "text": "to use one to make some points more obvious and so all of the processes running on that single scheduler thread",
    "start": "599160",
    "end": "605910"
  },
  {
    "text": "it's effectively a simulation of a case where we have deployed the system on a machine with a single CPU core and as",
    "start": "605910",
    "end": "612840"
  },
  {
    "text": "you can tell here on the right that single scheduler is currently not super busy so we have like a moderate world operating at around 20% of our maximum",
    "start": "612840",
    "end": "620880"
  },
  {
    "text": "capacity and ok at this point we have like some synthetic users using our",
    "start": "620880",
    "end": "626280"
  },
  {
    "text": "system at the rate of 10 K operations per second and now it's time to start using it ourselves so I'm going to open",
    "start": "626280",
    "end": "632430"
  },
  {
    "text": "up a user facing page which as you can tell is not really super spectacular but it captures what I believe is the gist",
    "start": "632430",
    "end": "639300"
  },
  {
    "text": "of any web facing system and that's the fact that there is some place for user where they provide their input and then",
    "start": "639300",
    "end": "645570"
  },
  {
    "text": "the system choose and this input and produces some output and in this particular case the input is a positive",
    "start": "645570",
    "end": "651180"
  },
  {
    "text": "integer or a natural number and so when I when a user submits the input the",
    "start": "651180",
    "end": "656370"
  },
  {
    "text": "system computes the sum of the first n natural numbers right so 1 plus 2 plus 3 equals 6 and 1 plus 2 Plus 3 plus 4",
    "start": "656370",
    "end": "662370"
  },
  {
    "text": "equals 10 again not super spectacular but gives us a little bit of context to go on with now let me first explain the",
    "start": "662370",
    "end": "670140"
  },
  {
    "text": "process structure powering this piece of functionality so when the user visits",
    "start": "670140",
    "end": "676140"
  },
  {
    "text": "this page and in fact any page that you have seen and you will see a WebSocket connection is this tab",
    "start": "676140",
    "end": "681270"
  },
  {
    "text": "between the browser and the system itself and all the communication takes place via that WebSocket connection so",
    "start": "681270",
    "end": "686760"
  },
  {
    "text": "like a browser on the behalf of user submits a request give me the sum of the first three national numbers the system",
    "start": "686760",
    "end": "692550"
  },
  {
    "text": "processes this and then returns or not returns but sends the result asynchronously at some later point in",
    "start": "692550",
    "end": "698339"
  },
  {
    "text": "time and this is of course then rendered in terms of process structure each WebSocket connection is managed by its",
    "start": "698339",
    "end": "704220"
  },
  {
    "text": "own process so here we have a situation of exactly three people simultaneously connected to the system if we have",
    "start": "704220",
    "end": "710040"
  },
  {
    "text": "million people connected to the system we're going to have a million of these connection processes and maybe in the later time there's no one around and",
    "start": "710040",
    "end": "716310"
  },
  {
    "text": "then we're going to have zero of these things so they are quite dynamic in their nature that they tend to come and go depending on the usage patterns now",
    "start": "716310",
    "end": "723570"
  },
  {
    "text": "the interesting thing happens within a single connection so the calculation itself is in fact performed in a",
    "start": "723570",
    "end": "729690"
  },
  {
    "text": "separate one-off process rights like I submit a request to give me the sum of the first three natural number numbers",
    "start": "729690",
    "end": "735990"
  },
  {
    "text": "the connection process spawns another process which is the calculation process and then the result is computed there",
    "start": "735990",
    "end": "742890"
  },
  {
    "text": "the calculation process sends the result back to the connection and then the connection of course forwards it further",
    "start": "742890",
    "end": "748620"
  },
  {
    "text": "to the browser and ultimately the user interface and meanwhile the calculation process stops terminates normally right",
    "start": "748620",
    "end": "755130"
  },
  {
    "text": "so these things are again very ephemeral in their nature very dynamic and now it",
    "start": "755130",
    "end": "760320"
  },
  {
    "text": "begs the question you know like why do why do we have this process structure I've definitely have not chosen it randomly so basically the main reason",
    "start": "760320",
    "end": "767399"
  },
  {
    "text": "why I have opted for this structure is to improve fault tolerance and ultimately high availability of the",
    "start": "767399",
    "end": "772410"
  },
  {
    "text": "system the ability of the system to produce service and push forward even when there are some problems in",
    "start": "772410",
    "end": "777630"
  },
  {
    "text": "production and as is the case with any other real production out there this system suffers from some problems some",
    "start": "777630",
    "end": "783540"
  },
  {
    "text": "faults some bugs and we're going to explore some of these bugs so the first",
    "start": "783540",
    "end": "789810"
  },
  {
    "text": "one let me just refresh is the first one I'm going to show you is a simulation of what I personally would say is quite",
    "start": "789810",
    "end": "796260"
  },
  {
    "text": "possibly the most frequent example of a problem that occurs in production and this is a situation where we haven't",
    "start": "796260",
    "end": "801300"
  },
  {
    "text": "consider some special cases some edge cases and then we end up with a runtime exception unhandled exception on the",
    "start": "801300",
    "end": "807630"
  },
  {
    "text": "server side like square root of -1 division by zero undefined is not a function and so on and so forth",
    "start": "807630",
    "end": "814440"
  },
  {
    "text": "here the particular problematic input which simulates this situation is the lucky number 13 and so when I submit",
    "start": "814440",
    "end": "821370"
  },
  {
    "text": "this number I get an error which doesn't really look super exciting at this point but let me show you the log right so",
    "start": "821370",
    "end": "828360"
  },
  {
    "text": "here I'm tailing the log of my system again the system is running as a background service so no console running",
    "start": "828360",
    "end": "833610"
  },
  {
    "text": "in front or something like that so what we see in the log we see some runtime error and we see that something",
    "start": "833610",
    "end": "839519"
  },
  {
    "text": "called task has terminated and in terms that you understand given what I said",
    "start": "839519",
    "end": "844620"
  },
  {
    "text": "previously this essentially means that the calculation process has crashed and burned there was some unhandled exception in",
    "start": "844620",
    "end": "850860"
  },
  {
    "text": "the calculation process and it crashed now an important thing about beam is that when a process crashes everything",
    "start": "850860",
    "end": "857160"
  },
  {
    "text": "else progresses right so most of the system still works and so like when I when we have a bunch of these crashes",
    "start": "857160",
    "end": "863490"
  },
  {
    "text": "I'm just going to generate them here what we see on the dashboard is still a stable progress of the system at the",
    "start": "863490",
    "end": "869399"
  },
  {
    "text": "expected rate of 10 K successes per second so most of the service is still up and running and most of the users",
    "start": "869399",
    "end": "874500"
  },
  {
    "text": "don't really see this problem and this is a big important point we are separating failures by separating things",
    "start": "874500",
    "end": "879779"
  },
  {
    "text": "into different processes now another side of the story is that a failure while not an abrupt event is also not a",
    "start": "879779",
    "end": "885750"
  },
  {
    "text": "silent event so when a process crashes are much more generally when it terminates whether normally or abnormally any other process in the",
    "start": "885750",
    "end": "892769"
  },
  {
    "text": "system can get a notification about it in the shape of a message and that's in fact what happens here right so remember",
    "start": "892769",
    "end": "897990"
  },
  {
    "text": "we have the connection process and the calculation process the calculation process terminates or pressures",
    "start": "897990",
    "end": "904079"
  },
  {
    "text": "connection process gets a message about it stating that process foo has died because of the reason bar it figures out",
    "start": "904079",
    "end": "910829"
  },
  {
    "text": "the role of foo and then it wires up this information to the user interface and this is why we are able to report",
    "start": "910829",
    "end": "916949"
  },
  {
    "text": "the error correctly right we have not lost the connection and we were able to report the error even when we have the",
    "start": "916949",
    "end": "922170"
  },
  {
    "text": "unhandled exception and so well not immediately obvious this is what many people from the wind community would say",
    "start": "922170",
    "end": "928410"
  },
  {
    "text": "is the most important reason to split things into processes to separate failures right to get better fault",
    "start": "928410",
    "end": "934199"
  },
  {
    "text": "tolerance another very important reason in my opinion is to separate latencies and to demonstrate this I will show you",
    "start": "934199",
    "end": "940980"
  },
  {
    "text": "another bug another problem that exists with this system and this is the fact that the implementation of this",
    "start": "940980",
    "end": "946470"
  },
  {
    "text": "calculation itself is not really done in a super efficient way it's in fact quite naive very brute-force kind",
    "start": "946470",
    "end": "952550"
  },
  {
    "text": "of implementation that just runs a cpu-bound loop going from 1 to N and computes the Sun along the way like one",
    "start": "952550",
    "end": "958550"
  },
  {
    "text": "plus two plus three plus four and so on and so forth and thus if a user submits large enough input then we're going to",
    "start": "958550",
    "end": "964639"
  },
  {
    "text": "have a lot of CPU bound processing but so like I'm going to try here with the magical number of nine nines so it's one",
    "start": "964639",
    "end": "971000"
  },
  {
    "text": "two three four five six seven eight nine and this thing is now calculating right it takes some time now what we can see",
    "start": "971000",
    "end": "977269"
  },
  {
    "text": "on the dashboard here that that single scheduler thread that we have is maxing out at 100% and this is going to take",
    "start": "977269",
    "end": "983660"
  },
  {
    "text": "for like some ten seconds or so let's wait for it there it is it's done and here we see the result but the very",
    "start": "983660",
    "end": "990769"
  },
  {
    "text": "interesting thing here is that we still have a stable success rate of 10 K successes per second despite the fact",
    "start": "990769",
    "end": "997639"
  },
  {
    "text": "that this is a single threaded system right remember all of these processes are running on the same thread and there is no yielding or any sort of trickery",
    "start": "997639",
    "end": "1003490"
  },
  {
    "text": "than in the implementation itself right so how does that even work the thing is",
    "start": "1003490",
    "end": "1008709"
  },
  {
    "text": "that Bheem scheduler performs very frequent context switching like in less than 1 millisecond intervals and it does",
    "start": "1008709",
    "end": "1015430"
  },
  {
    "text": "it with proper preemption so no matter what the process does be it IO bound or CPU bound it gets preempted or it gets",
    "start": "1015430",
    "end": "1022089"
  },
  {
    "text": "switched out very very quickly and by doing this beam essentially favors our fair distribution of CPU time for every",
    "start": "1022089",
    "end": "1028808"
  },
  {
    "text": "single activity in the system or in other words it promotes the progress of the system as a whole at the expense of",
    "start": "1028809",
    "end": "1034808"
  },
  {
    "text": "the maximum efficiency of any single activity in the system and this makes perfect sense in a software system where",
    "start": "1034809",
    "end": "1040569"
  },
  {
    "text": "you're running a bunch of different most mutually unrelated activities and it's a great example in my mind in my opinion",
    "start": "1040569",
    "end": "1046150"
  },
  {
    "text": "of how beam implementation is really geared it's really fine-tuned toward software systems at the expense of any",
    "start": "1046150",
    "end": "1052179"
  },
  {
    "text": "other kind any other type of software out there and so to put the tie it all",
    "start": "1052179",
    "end": "1057790"
  },
  {
    "text": "together right we use processes in my opinion are two separate failures and two separate latencies these are the",
    "start": "1057790",
    "end": "1062919"
  },
  {
    "text": "most important reasons why split things into processes and tying it all together as a single user I'm going to try four",
    "start": "1062919",
    "end": "1069460"
  },
  {
    "text": "five six seven eight nine I'm going to try this CPU intensive input and the connection is still available so I can",
    "start": "1069460",
    "end": "1076419"
  },
  {
    "text": "provide some other input can generate a bunch of errors and what happens is we still have a stables to",
    "start": "1076419",
    "end": "1081780"
  },
  {
    "text": "progress for the rest of the people here and we still have a stable progress for this particular user here and we got our",
    "start": "1081780",
    "end": "1087480"
  },
  {
    "text": "long intensive computation computed this is the system which progresses which stays on top of the game even when there",
    "start": "1087480",
    "end": "1093300"
  },
  {
    "text": "are some problems happening in production so like despite a couple of holes that we have our ship sails",
    "start": "1093300",
    "end": "1098700"
  },
  {
    "text": "smoothly it doesn't sink and it provides most of the service to all of its users and this in my mind is what high",
    "start": "1098700",
    "end": "1104610"
  },
  {
    "text": "availability is about it's not about chasing some mythical amount of nines of uptime it's about having a system which",
    "start": "1104610",
    "end": "1110310"
  },
  {
    "text": "is there for its users which is ultimately its primary if not the only purpose so ok we have a nice highly",
    "start": "1110310",
    "end": "1118230"
  },
  {
    "text": "available system but of course ultimately we still need to pick these problems because until we do there will be some amount of unavailability and",
    "start": "1118230",
    "end": "1124380"
  },
  {
    "text": "then in particular there are some quite there are some kind of problems which are very very which can be possible",
    "start": "1124380",
    "end": "1130020"
  },
  {
    "text": "threatening to the very existence of the system itself and so here I'm going to show you yet another problem which is",
    "start": "1130020",
    "end": "1135150"
  },
  {
    "text": "quite insidious and this is the case where a user submits a negative number as an input so I'm going to try with",
    "start": "1135150",
    "end": "1140790"
  },
  {
    "text": "minus 1 and what happens here is we see that it hasn't really returned right it's calculating so we shouldn't really",
    "start": "1140790",
    "end": "1147600"
  },
  {
    "text": "have accepted this input in the first place it's not a valid domain value right but once we did we should have",
    "start": "1147600",
    "end": "1153690"
  },
  {
    "text": "calculated it's already but we didn't and in fact what happens here what you can see on the scheduler we're maxing out constantly we basically have a",
    "start": "1153690",
    "end": "1160500"
  },
  {
    "text": "program an activity gone rogue running an infinite CPU bound loop like it an equivalent of wild through semicolon if",
    "start": "1160500",
    "end": "1166890"
  },
  {
    "text": "you will and that's obviously not quite good now again good news owing to our judicious usage of our processors and",
    "start": "1166890",
    "end": "1173820"
  },
  {
    "text": "the way foul beam deals with them we have a stable system which still progresses at the expected rate of 10 K",
    "start": "1173820",
    "end": "1180000"
  },
  {
    "text": "successes per second so it works for other users it works for this user and this is all well and fine but of course ultimately we need to fix",
    "start": "1180000",
    "end": "1188720"
  },
  {
    "text": "pick this problem because unless we do the system is eventually going to grind to a halt right if a user retries this",
    "start": "1188720",
    "end": "1195870"
  },
  {
    "text": "input a couple of more times an other user stumble into the same problem we end up in a situation where the system is spinning a lot but really produces",
    "start": "1195870",
    "end": "1202410"
  },
  {
    "text": "nothing useful in some reasonable amount of time so it's imperative for us to quickly figure out what the problem is",
    "start": "1202410",
    "end": "1207630"
  },
  {
    "text": "here and to fix it before things you know completely blow up that's what we're gonna do I'm gonna put my operator hat on I'm gonna pretend",
    "start": "1207630",
    "end": "1214290"
  },
  {
    "text": "that I don't know what happened here all I know is that I got some alert notification informing me that my CPU",
    "start": "1214290",
    "end": "1219600"
  },
  {
    "text": "usage is at hundred percent and I need to figure out the problem right so what I'm gonna do I'm gonna SSH to the server",
    "start": "1219600",
    "end": "1225510"
  },
  {
    "text": "there I am and I'm taking a look at the logs what do I see in the logs I see nothing right the log is completely",
    "start": "1225510",
    "end": "1231180"
  },
  {
    "text": "statical i see some previous errors these are the number thirteen problem so that's all well and fine but it doesn't",
    "start": "1231180",
    "end": "1237840"
  },
  {
    "text": "really help me with this particular problem and so that doesn't really look promising but not all is lost because",
    "start": "1237840",
    "end": "1243270"
  },
  {
    "text": "beam is a runtime which is highly debuggable in respectable observable if you will right so beam allows us to hook",
    "start": "1243270",
    "end": "1249570"
  },
  {
    "text": "into the running system and peek and poke inside it and get a lot of useful information and I don't need to set some",
    "start": "1249570",
    "end": "1254940"
  },
  {
    "text": "special Flags restart the system and whatnot I can do this you're by default and that's what we're going to do I'm",
    "start": "1254940",
    "end": "1260340"
  },
  {
    "text": "going to invoke the particular command to do this thing it's remote console and at this point I have a so called IEX",
    "start": "1260340",
    "end": "1267960"
  },
  {
    "text": "shell session or interactive elixir basically here I can provide elixir expressions which are running in the",
    "start": "1267960",
    "end": "1274080"
  },
  {
    "text": "context of the running system right so like if I ask for this sum it's calculated on that single scheduler",
    "start": "1274080",
    "end": "1280770"
  },
  {
    "text": "thread and always bear in mind we have a single threaded system and we have this 10k operations per second running and we",
    "start": "1280770",
    "end": "1286500"
  },
  {
    "text": "have this single activity gone rogue and yet everything works and here in the shell I'm also the user of this system",
    "start": "1286500",
    "end": "1292260"
  },
  {
    "text": "right so going to beams scheduling I am actually able to even do this to debug",
    "start": "1292260",
    "end": "1298680"
  },
  {
    "text": "the system itself so okay the question is who is burning our CPU right and it",
    "start": "1298680",
    "end": "1304590"
  },
  {
    "text": "has to be one or more processes and so the first thing I'm going to do is I'm going to list those processes so process",
    "start": "1304590",
    "end": "1310170"
  },
  {
    "text": "dot list and I get a list of bits that what you asked about earlier these are the process IDs right so each bit is",
    "start": "1310170",
    "end": "1316590"
  },
  {
    "text": "uniquely identifying a process in the system and once I get the list of processes then I can get so I ask my run",
    "start": "1316590",
    "end": "1324180"
  },
  {
    "text": "time ask the beam about the properties of each process so let me take the head of this process list and I'm going to",
    "start": "1324180",
    "end": "1333090"
  },
  {
    "text": "feed it to the function called process info and I get a bunch of properties for that particular process as reported by",
    "start": "1333090",
    "end": "1339330"
  },
  {
    "text": "the beam itself and for our particular scenario we're interested in a property which is called actions or reduction count and this is a",
    "start": "1339330",
    "end": "1346960"
  },
  {
    "text": "non negative integer which is roughly proportional to the amount of instructions executed in that process",
    "start": "1346960",
    "end": "1352809"
  },
  {
    "text": "since the dawn of time rises it was born and so to figure out the which of the",
    "start": "1352809",
    "end": "1358809"
  },
  {
    "text": "busiest processes I need to take reduction counts now do the same thing in some future moments with the difference sort descending and I have a",
    "start": "1358809",
    "end": "1365559"
  },
  {
    "text": "top like view and this is like pretty mechanical to speed things up and reduce",
    "start": "1365559",
    "end": "1371130"
  },
  {
    "text": "the error surface in this demo I wrote myself a helper function for this but even without the function it would be",
    "start": "1371130",
    "end": "1377559"
  },
  {
    "text": "like quite trivial to do this thing and so I invoked run time dot top and it gives me the top 10 CPU spenders in the",
    "start": "1377559",
    "end": "1384370"
  },
  {
    "text": "past second so I get a list of maps map is a key value structure under the keep",
    "start": "1384370",
    "end": "1389679"
  },
  {
    "text": "it we have the process ID and then under the key CPU we have the percentage of",
    "start": "1389679",
    "end": "1394750"
  },
  {
    "text": "CPU usage in the past second and as we can see the busiest process is by far the busiest it's the process with a pin",
    "start": "1394750",
    "end": "1401110"
  },
  {
    "text": "0 1 to 605 0 and so I'm just going to run this thing this is our primary suspect now and I'm gonna run this thing",
    "start": "1401110",
    "end": "1407169"
  },
  {
    "text": "one more time to make sure that it's the same process and let's check it out sure enough it's the same process and so this",
    "start": "1407169",
    "end": "1413590"
  },
  {
    "text": "is our culprit button within a min within a matter of few seconds I was able to quickly sift through all these tens of thousands of things running",
    "start": "1413590",
    "end": "1419679"
  },
  {
    "text": "around the system and find the problematic piece and now we're going to drill into that problematic piece so I'm",
    "start": "1419679",
    "end": "1425019"
  },
  {
    "text": "going to run this runtime top one more time take the head of it the top busiest process take its big property and take",
    "start": "1425019",
    "end": "1431379"
  },
  {
    "text": "it into a bit variable and there we have it and now I can ask my run time something about this particular process",
    "start": "1431379",
    "end": "1437620"
  },
  {
    "text": "and always bear in mind that this is the program gone rogue it runs an infinite CPU bound loop doesn't heal doesn't talk",
    "start": "1437620",
    "end": "1443110"
  },
  {
    "text": "to anyone doesn't answer to anyone but we can still get a lot of information if we ask the runtime the beam itself",
    "start": "1443110",
    "end": "1448899"
  },
  {
    "text": "directly about it so I'll invoke a function called process that info again and I'm going to ask for the current",
    "start": "1448899",
    "end": "1455139"
  },
  {
    "text": "stack trace which I believe is pretty self-explanatory and so we get a stack trace of this particular process and",
    "start": "1455139",
    "end": "1460570"
  },
  {
    "text": "we're going to analyze it a little bit later but first I'm going to progress forward and gather a bit more data I'm going to trace the dynamic activity in",
    "start": "1460570",
    "end": "1467139"
  },
  {
    "text": "this process we're going to take a look at which functions it's executing so for this purpose I also wrote a helper",
    "start": "1467139",
    "end": "1473110"
  },
  {
    "text": "function called run time dot trace which traces the function locations in this process for at most one second or fifty",
    "start": "1473110",
    "end": "1479900"
  },
  {
    "text": "function invocations whichever takes place first and as we can see it's 50",
    "start": "1479900",
    "end": "1485090"
  },
  {
    "text": "function invocations and we're going to take a look at this a bit later too but at this point I have gathered all the information that I need to properly",
    "start": "1485090",
    "end": "1492020"
  },
  {
    "text": "analyze and understand the problem and before I do that I'm going to terminate this process I'm going to ask the",
    "start": "1492020",
    "end": "1497150"
  },
  {
    "text": "runtime to stop this process by sending it an exit signal so an woke standard library function process dot exit the",
    "start": "1497150",
    "end": "1504110"
  },
  {
    "text": "process ID and the reason I'm using a special reason called kill which is effectively kill minus nine at the beam",
    "start": "1504110",
    "end": "1510140"
  },
  {
    "text": "level at the level of this nano Pico activity and as soon as I invoke this thing what we can see on the dashboard",
    "start": "1510140",
    "end": "1515929"
  },
  {
    "text": "is that the scheduler user drops to a expected level and of course nothing else was disturbed in the process so we",
    "start": "1515929",
    "end": "1522230"
  },
  {
    "text": "still have stable progress of 10 K successes per second meanwhile for the user the error has been reported again",
    "start": "1522230",
    "end": "1528500"
  },
  {
    "text": "courtesy of how how we split things in two processes the calculation process itself was brutally killed and you can",
    "start": "1528500",
    "end": "1535159"
  },
  {
    "text": "truly try catch your way out of that one but because we have another process which gets the information about it this",
    "start": "1535159",
    "end": "1540919"
  },
  {
    "text": "is the connection process we are able to consistently report error information back to the user interface so this",
    "start": "1540919",
    "end": "1548539"
  },
  {
    "text": "process exiting it's like a seemingly simple thing but one which is as far as I know exclusive to beam in terms of",
    "start": "1548539",
    "end": "1554270"
  },
  {
    "text": "guarantees this is essentially a first class cancellation implemented at the runtime layer right and so super simple",
    "start": "1554270",
    "end": "1559760"
  },
  {
    "text": "to use with very strong guarantees and here I'm invoking it from the shell but typically we in fact invoke it from the",
    "start": "1559760",
    "end": "1565159"
  },
  {
    "text": "code whether directly or through some higher level abstractions to perform cancellation like a time-out base",
    "start": "1565159",
    "end": "1570200"
  },
  {
    "text": "cancellation or user induced cancellation no single line of code and does wonders but anyway let's go back to",
    "start": "1570200",
    "end": "1577400"
  },
  {
    "text": "the data that we've collected so the current stack trace essentially gives me a context where that particular program",
    "start": "1577400",
    "end": "1583340"
  },
  {
    "text": "was in right and so I see the function that it was executing and I see a module and module is just a namespace just a",
    "start": "1583340",
    "end": "1589549"
  },
  {
    "text": "bunch of functions bundled under the same name and then I see the file and I see the line number and this puts me into the",
    "start": "1589549",
    "end": "1594710"
  },
  {
    "text": "proper place into the code and then from the dynamic view I see a bit boring interesting information so I can see",
    "start": "1594710",
    "end": "1601250"
  },
  {
    "text": "that this thing here was actually constantly recursing it was running a constant recursion which is an FP",
    "start": "1601250",
    "end": "1606380"
  },
  {
    "text": "equivalent of a constant loop and furthermore I see the take of each step of the loop because",
    "start": "1606380",
    "end": "1612050"
  },
  {
    "text": "see the parameters of this function right so I can see that the first parameter was always increased by number",
    "start": "1612050",
    "end": "1617180"
  },
  {
    "text": "one the second parameter is always minus one and then the third parameter increased by some not immediately",
    "start": "1617180",
    "end": "1622370"
  },
  {
    "text": "apparent amount but you know given this data and the context of the current stack trace which puts me to the proper",
    "start": "1622370",
    "end": "1628160"
  },
  {
    "text": "place in code I am able to figure out the problem and the gist of the story is that so this is the module and this is",
    "start": "1628160",
    "end": "1634220"
  },
  {
    "text": "the function right here the gist of the story that this code really assumes that the input is a positive integer and it",
    "start": "1634220",
    "end": "1640430"
  },
  {
    "text": "doesn't work for any other kind of input but that's actually fine because this our business domain are in positive",
    "start": "1640430",
    "end": "1647000"
  },
  {
    "text": "integers natural numbers and this piece of code is running relatively deeply in our system and so this is where we have",
    "start": "1647000",
    "end": "1652670"
  },
  {
    "text": "the symptom but the cause in my view happens at the edge of the system right where we're accepting user input and we",
    "start": "1652670",
    "end": "1659120"
  },
  {
    "text": "shouldn't really be allowing all these invalid inputs to propagate throughout our system we have to discard them there and in fact so this is the edge of the",
    "start": "1659120",
    "end": "1666890"
  },
  {
    "text": "system this is where I'm accepting users input and in fact when we take a look at the code I'm already discarding some inputs right",
    "start": "1666890",
    "end": "1673100"
  },
  {
    "text": "so it returns invalid input for some particular cases but obviously I haven't considered all the edge cases it's a",
    "start": "1673100",
    "end": "1678680"
  },
  {
    "text": "classical kind of bug you know I haven't thought of all possible scenarios and so now I have to fix this scenario which",
    "start": "1678680",
    "end": "1684290"
  },
  {
    "text": "I'm going to elegantly do by just an commenting this line of code again for demo purposes right all is fair in demos",
    "start": "1684290",
    "end": "1690350"
  },
  {
    "text": "and while I'm at it I'm going to fix the remaining previous two problems you have seen right so we had a problem of",
    "start": "1690350",
    "end": "1695510"
  },
  {
    "text": "problematic number thirteen the edge case there it is I fixed it and then we",
    "start": "1695510",
    "end": "1700970"
  },
  {
    "text": "had the problem of suboptimal calculation and to fix that one I need to reach for a little bit of high school level math so the sum of first n natural",
    "start": "1700970",
    "end": "1707540"
  },
  {
    "text": "numbers is n times n plus 1 and then I need to divide all of this by 2 and I",
    "start": "1707540",
    "end": "1714890"
  },
  {
    "text": "have actually tests which are verifying all of this just to make sure that I didn't make any mistake there it is",
    "start": "1714890",
    "end": "1721730"
  },
  {
    "text": "everything is passing and so now I'm going to invoke an admittedly hacky task which is going to deploy these changes",
    "start": "1721730",
    "end": "1727190"
  },
  {
    "text": "to production so it's going to recompile these two modules and bring into production without restarting the production itself how do we know the",
    "start": "1727190",
    "end": "1733580"
  },
  {
    "text": "production has not been restarted because we can see here on the dashboard that we still have a stable progress of 10 K successes per second but has it",
    "start": "1733580",
    "end": "1740600"
  },
  {
    "text": "been fixed so without refreshing the page minus one invalid M put zero invalid input minus one two",
    "start": "1740600",
    "end": "1746270"
  },
  {
    "text": "three invalid input number three still works for works 13 now works and then a",
    "start": "1746270",
    "end": "1751370"
  },
  {
    "text": "bunch of nines I'm not even going to count them at this point because this thing is fast as a lightning ball now so essentially what happened here we had",
    "start": "1751370",
    "end": "1758990"
  },
  {
    "text": "a system with problems and it was staying on top of the game and it allowed me to approach it the system and look from inside it to figure out what",
    "start": "1758990",
    "end": "1765170"
  },
  {
    "text": "the problems are but I was able to quickly fix those problems and deployed into production without disturbing",
    "start": "1765170",
    "end": "1771170"
  },
  {
    "text": "anything in the system itself right the other activities and this is like as a writer of systems and ultimately one of",
    "start": "1771170",
    "end": "1777620"
  },
  {
    "text": "people who is responsible for managing those systems in production this is what I want from my tool but in this kind of",
    "start": "1777620",
    "end": "1782960"
  },
  {
    "text": "level of utility functions service that's what I want from a tool this is obviously what beam gives me I am not",
    "start": "1782960",
    "end": "1788330"
  },
  {
    "text": "aware of anything else that comes even remotely close to that level of service so anyway the last demo I'm going to",
    "start": "1788330",
    "end": "1795530"
  },
  {
    "text": "show you is related to beams inherent support for distributed systems right so",
    "start": "1795530",
    "end": "1801800"
  },
  {
    "text": "it is in fact possible to start multiple beam instances and typically you want to",
    "start": "1801800",
    "end": "1806870"
  },
  {
    "text": "start one for each separate machine but you can start of course multiple on a single machine and then with a single",
    "start": "1806870",
    "end": "1812030"
  },
  {
    "text": "function invocation you can establish a TCP connection between two instances and at this point you have something which",
    "start": "1812030",
    "end": "1817760"
  },
  {
    "text": "is called a beam cluster and then these instances are called nodes and once you",
    "start": "1817760",
    "end": "1823250"
  },
  {
    "text": "have a cluster you can programmatically do some very interesting things so using like the main language of your choice or",
    "start": "1823250",
    "end": "1828470"
  },
  {
    "text": "long elixir you can enumerate the nodes in the cluster you can subscribe to join and leave events you can spawn a process",
    "start": "1828470",
    "end": "1835820"
  },
  {
    "text": "anywhere in the cluster on any node you can send a message to any process anywhere in the cluster and you can receive messages from other processes",
    "start": "1835820",
    "end": "1842420"
  },
  {
    "text": "anywhere in the cluster and for the most part the code in fact stays exactly the same because in fact in beam",
    "start": "1842420",
    "end": "1848810"
  },
  {
    "text": "concurrency and distribution are one and the same thing and so let me show you another page this is a dashboard where I",
    "start": "1848810",
    "end": "1856370"
  },
  {
    "text": "can start up some named services and the service here really means a process nothing more than that and we're going",
    "start": "1856370",
    "end": "1862910"
  },
  {
    "text": "to start a process somewhere in the cluster and we're going to give it a cluster wide name now here I can see the",
    "start": "1862910",
    "end": "1868850"
  },
  {
    "text": "list of nodes in the cluster and currently we have just one node so this is not really super exciting and therefore I'm going to start",
    "start": "1868850",
    "end": "1875100"
  },
  {
    "text": "another node this one is going to be started in foreground so system node 2",
    "start": "1875100",
    "end": "1880650"
  },
  {
    "text": "and immediately we see that node 2 is running is the member of our cluster now and so now I provide some name and",
    "start": "1880650",
    "end": "1888000"
  },
  {
    "text": "submit and then what happens is system somehow picks a node starts a process on that node and gives it a cluster wide",
    "start": "1888000",
    "end": "1894270"
  },
  {
    "text": "name foo right and so now when I click on this thing on the server side the system will discover that process using",
    "start": "1894270",
    "end": "1900809"
  },
  {
    "text": "the name foo and then send it a message and then the process is going to send that message back and we are going to",
    "start": "1900809",
    "end": "1906150"
  },
  {
    "text": "report it to on the user interface right so when I click I get this entire string everything here is shaped within the",
    "start": "1906150",
    "end": "1913020"
  },
  {
    "text": "process which is globally known as foo ok and so we can see that the process in fact knows its own name so it has some",
    "start": "1913020",
    "end": "1919470"
  },
  {
    "text": "kind of a state and it also of course can deduce the node where it's running at and now if I start another service",
    "start": "1919470",
    "end": "1925740"
  },
  {
    "text": "let's name it bar and it just so happened that bar has been started on another node but you know for us it",
    "start": "1925740",
    "end": "1931049"
  },
  {
    "text": "still works exactly the same way so I have like kind of a load spread you know and spreading these services across my",
    "start": "1931049",
    "end": "1936720"
  },
  {
    "text": "cluster and what happens if the node dies right so I'm going to stop this node 2 and what we see here is that a",
    "start": "1936720",
    "end": "1943020"
  },
  {
    "text": "bar has been resurrected on node 1 so this is like fault tolerance I'm dealing with even with crashes of individual",
    "start": "1943020",
    "end": "1949169"
  },
  {
    "text": "machines and when I click on bar now of course bar response from node 1 okay",
    "start": "1949169",
    "end": "1954179"
  },
  {
    "text": "so full disclosure complete honesty and this all looks well and fine but I would",
    "start": "1954179",
    "end": "1959700"
  },
  {
    "text": "say that beam distribution is sort of plagued with a bunch of issues serious",
    "start": "1959700",
    "end": "1965970"
  },
  {
    "text": "issues you know so like well many people do use Beam distribution distributed beam in production there are also many people who would tell you like maybe not",
    "start": "1965970",
    "end": "1972510"
  },
  {
    "text": "use that thing I'm not going to go into those issues you can ask me about this later but in my view they are serious and they exist on all levels starting",
    "start": "1972510",
    "end": "1979140"
  },
  {
    "text": "from the runtime level all the way to the high level libraries that we use that said I would also say that these",
    "start": "1979140",
    "end": "1985289"
  },
  {
    "text": "issues are purely mechanical which means that they can be fixed in the implementation without significantly",
    "start": "1985289",
    "end": "1990510"
  },
  {
    "text": "changing or without changing at all the interface the contract the way we use this thing and this is where I see a lot",
    "start": "1990510",
    "end": "1995760"
  },
  {
    "text": "of potential and that's exactly or that's actually what I want to explain so I will briefly give you a very quick",
    "start": "1995760",
    "end": "2002659"
  },
  {
    "text": "code walkthrough so here we have the module which is powering this distributor named service",
    "start": "2002659",
    "end": "2008460"
  },
  {
    "text": "and within that module again the module is just a bunch of functions we have another sub module called local now this",
    "start": "2008460",
    "end": "2015750"
  },
  {
    "text": "piece of code here is completely agnostic of the fact that distributed beam is used doesn't care you know you",
    "start": "2015750",
    "end": "2021030"
  },
  {
    "text": "can use it you don't have to use it works exactly the same this is just basic concurrent elixir and if you want to do some concurrent elixir sooner or",
    "start": "2021030",
    "end": "2027600"
  },
  {
    "text": "later you will have to learn a little bit of this which is not really rocket science and now the question is how do we turn this thing to be distributed and",
    "start": "2027600",
    "end": "2034380"
  },
  {
    "text": "there are exactly three things I've done I think number one in another file which is called mix exs which is the part of",
    "start": "2034380",
    "end": "2040500"
  },
  {
    "text": "the same project project this is where I'm configuring the project itself and within that file I have a section where",
    "start": "2040500",
    "end": "2046830"
  },
  {
    "text": "I'm defining dependencies of the project like the libraries on the framework which I'm using and one of my",
    "start": "2046830",
    "end": "2052710"
  },
  {
    "text": "dependencies is called swarm and swarm is basically like a higher level distributed service Orchestrator it",
    "start": "2052710",
    "end": "2058710"
  },
  {
    "text": "gives me a high level interface which allows me to start the process somewhere in the cluster and give it a cluster wide name quite easily right and swarm",
    "start": "2058710",
    "end": "2067889"
  },
  {
    "text": "is a dependency and in elixir like in any other language beam or not being a dependency means bringing in some code",
    "start": "2067890",
    "end": "2074850"
  },
  {
    "text": "write some functions which I can invoke however in beam languages a dependency may also bring activities processors",
    "start": "2074850",
    "end": "2081990"
  },
  {
    "text": "right and so courtesy of this single line of code when I start my systems form is going to start some of its own",
    "start": "2081990",
    "end": "2088050"
  },
  {
    "text": "processes which are related to the sporm functionalities so these processes are going to watch for node joining and",
    "start": "2088050",
    "end": "2094230"
  },
  {
    "text": "leaving and they are going to manage the cluster wide state the Association of names to process and all this happens",
    "start": "2094230",
    "end": "2100620"
  },
  {
    "text": "courtesy of this single line of code essentially I am running this distributed service Orchestrator directly in my system and because in my",
    "start": "2100620",
    "end": "2107850"
  },
  {
    "text": "mind this thing is a part of my system it's the best place to run it like what's the better place to run a part of",
    "start": "2107850",
    "end": "2113280"
  },
  {
    "text": "the system if not the same place for the rest of the system is running itself and anyway once I have swarm running then",
    "start": "2113280",
    "end": "2119930"
  },
  {
    "text": "starting a named service somewhere in the cluster boils down to invoking a particular swarm function which does",
    "start": "2119930",
    "end": "2126120"
  },
  {
    "text": "exactly that so it's going to somehow pick a node and start the process there and it's going to manage the association",
    "start": "2126120",
    "end": "2131940"
  },
  {
    "text": "between the given name and the process and then once I want to discover and invoke this service given its name and",
    "start": "2131940",
    "end": "2137550"
  },
  {
    "text": "woke another swarm function I give it a name it gives back bid which is again a unique piece of",
    "start": "2137550",
    "end": "2143660"
  },
  {
    "text": "information identifying the process in the system and in this case the system is a cluster not just a single node and",
    "start": "2143660",
    "end": "2149240"
  },
  {
    "text": "so kid is locational a transparent type right it can work for local process and",
    "start": "2149240",
    "end": "2154400"
  },
  {
    "text": "it could work for remote processes we don't care the vast majority of the functions which are working with big data type don't care too and so I get a",
    "start": "2154400",
    "end": "2161390"
  },
  {
    "text": "paid and I just pass it to the distributed beam agnostic function and the thing just works but three lines of",
    "start": "2161390",
    "end": "2167029"
  },
  {
    "text": "code to make this thing distributed nothing else running on the side no extra OS process no container no virtual",
    "start": "2167029",
    "end": "2172849"
  },
  {
    "text": "machine nothing as a services employed here in fact I mean completely disconnected from the network and so",
    "start": "2172849",
    "end": "2178430"
  },
  {
    "text": "this thing is super integrated right everything is in fact implemented in Aleks here so there is like given the",
    "start": "2178430",
    "end": "2184640"
  },
  {
    "text": "user interface itself is driven by the elixir code there is no JavaScript here this is all very technically uniform and",
    "start": "2184640",
    "end": "2190249"
  },
  {
    "text": "this technical uniformity is the last thing that I want to discuss in my current talk so this table here",
    "start": "2190249",
    "end": "2199249"
  },
  {
    "text": "originally published in my book elixir in action tells a true story about two systems I was working on side by side",
    "start": "2199249",
    "end": "2204710"
  },
  {
    "text": "around the beginning of this decade and what happened in system a was that our first chosen technology our cornerstone",
    "start": "2204710",
    "end": "2211430"
  },
  {
    "text": "our foundation was a technology that didn't really have proper support if any for the challenges inherent to software",
    "start": "2211430",
    "end": "2218150"
  },
  {
    "text": "systems and we were building a software system we had those challenges and in order to solve them we had to fall back to the level of the operating system",
    "start": "2218150",
    "end": "2224720"
  },
  {
    "text": "right so we had to run a bunch of always processes and reach for other languages where we needed a better concurrency story and we also of course had to reach",
    "start": "2224720",
    "end": "2231920"
  },
  {
    "text": "for third-party products and we fulfilled our needs however the technical complexity footprint the barrier if you will of",
    "start": "2231920",
    "end": "2238789"
  },
  {
    "text": "this solution is really really high like imagine a junior lending to this thing how much of the things that the",
    "start": "2238789",
    "end": "2243859"
  },
  {
    "text": "technical concept technical things do they need to learn before they can confidently work on any part of the system system be implemented in Erlang",
    "start": "2243859",
    "end": "2251359"
  },
  {
    "text": "groaning on top of being the runtime which as you have seen has a rich support for software systems it is in fact sometimes said that beam is an",
    "start": "2251359",
    "end": "2258049"
  },
  {
    "text": "operating system for our code and if I have the operating system directly in my runtime and I have the language as the",
    "start": "2258049",
    "end": "2263480"
  },
  {
    "text": "main interface then I don't need to fall back to the OS level and indeed we didn't write so we were able to fulfill all our needs in Erlang in the same",
    "start": "2263480",
    "end": "2270680"
  },
  {
    "text": "language in the same project have it runs you'll always process at runtime now it goes without saying that these solutions",
    "start": "2270680",
    "end": "2276740"
  },
  {
    "text": "cannot fully compete with full-blown third party products so we don't have all the bells and whistles and fancy",
    "start": "2276740",
    "end": "2282230"
  },
  {
    "text": "performance but this they worked for our needs just fine and what we got in return is this technical total technical",
    "start": "2282230",
    "end": "2288650"
  },
  {
    "text": "uniformity which of course is not a goal in itself right we should not strive for the for uniformity for the sake of uniformity but I do believe that it can",
    "start": "2288650",
    "end": "2295400"
  },
  {
    "text": "bring a lot of important benefits that happen take place in all the phases of a software development cycle so like if my",
    "start": "2295400",
    "end": "2301579"
  },
  {
    "text": "whole system is implemented in a single piece of technology let's say a league here right so one language one project one always process per each machine in",
    "start": "2301579",
    "end": "2307940"
  },
  {
    "text": "the cluster then it's clearly easier to work with it on a daily basis right so like starting from setting up a development machine and then you know",
    "start": "2307940",
    "end": "2314539"
  },
  {
    "text": "writing some code writing test setting up CI deploying a single thing has to be way easier than orchestrating a",
    "start": "2314539",
    "end": "2320089"
  },
  {
    "text": "deployment of five to ten different moving pieces and then managing the system in production there is like one thing we hook into there is one thing",
    "start": "2320089",
    "end": "2327230"
  },
  {
    "text": "where we collect metrics and logs there is one thing we debug which as you have seen of courses were being particularly",
    "start": "2327230",
    "end": "2332690"
  },
  {
    "text": "shines and then on top of it all and I would say by far the most important benefit is the fact that the teamwork in",
    "start": "2332690",
    "end": "2338359"
  },
  {
    "text": "general is improved because the technical bar is significantly lower there are less technical things to learn",
    "start": "2338359",
    "end": "2344089"
  },
  {
    "text": "and that's a good thing but a new developer comes on board they learn themselves a bit of a leak serum that can immediately contribute to any part",
    "start": "2344089",
    "end": "2350150"
  },
  {
    "text": "of the system and so we don't need to have all these narrow specialists we don't they feel like a ready specialist",
    "start": "2350150",
    "end": "2355609"
  },
  {
    "text": "engine expecially stated especially zookeeper specialist Kafka specialist kubernetes specialist and so on and so forth and we don't need to wrestle with",
    "start": "2355609",
    "end": "2362059"
  },
  {
    "text": "all these Yama's and in ease and Jason's and tunnels and xml's and other kind of ad hoc be yourselves and they're quite",
    "start": "2362059",
    "end": "2368720"
  },
  {
    "text": "substandard dueling it is in fact possible it is perfectly viable to",
    "start": "2368720",
    "end": "2373819"
  },
  {
    "text": "express to describe the entire system using a single language which is steering complete gives us full",
    "start": "2373819",
    "end": "2379309"
  },
  {
    "text": "integration to the underlying operating system and it gives us full flexibility compile-time and run-time to make",
    "start": "2379309",
    "end": "2385700"
  },
  {
    "text": "whichever variations we want on a case-by-case basis and these are in my opinion some terrific benefits to be",
    "start": "2385700",
    "end": "2391400"
  },
  {
    "text": "read and the reason why they can be reaped is because we have something like being as our foundation right and so",
    "start": "2391400",
    "end": "2398210"
  },
  {
    "text": "this is where I see the biggest potential of being languages which is admittedly not still fully realized",
    "start": "2398210",
    "end": "2404390"
  },
  {
    "text": "we're maybe like halfway there but I do hope we'll get there and like imagine the following story you want to",
    "start": "2404390",
    "end": "2409940"
  },
  {
    "text": "build a small to medium web facing crowd and what you do is create a new elixir project bring in a couple of",
    "start": "2409940",
    "end": "2415190"
  },
  {
    "text": "dependencies and five minutes later you have everything you have like proper support for distribution you have SQL",
    "start": "2415190",
    "end": "2422299"
  },
  {
    "text": "based persistence with replication everything running directly in that same project in the single system now this is",
    "start": "2422299",
    "end": "2428000"
  },
  {
    "text": "what I call a simple start right because it moves a lot of technicalities out of the way and it allows me to focus on the",
    "start": "2428000",
    "end": "2433789"
  },
  {
    "text": "core challenges that I'm supposed to solve yet at the same time the solution is implemented in a full-blown curing",
    "start": "2433789",
    "end": "2439400"
  },
  {
    "text": "complete language and it's running on top of beam this wonderful runtime that has been around for like what three decades has",
    "start": "2439400",
    "end": "2445700"
  },
  {
    "text": "been extensively battle-tested in different projects of different shapes and sizes and so I can really be",
    "start": "2445700",
    "end": "2451339"
  },
  {
    "text": "confident that down the line if I need to I can deal with highly complex challenges at a very large scale without",
    "start": "2451339",
    "end": "2457250"
  },
  {
    "text": "having to rewrite everything from scratch and in my view this is a winning combination right so the artificial trade-off of",
    "start": "2457250",
    "end": "2463099"
  },
  {
    "text": "having to choose between a quick start technology and the long run one disappears flies out the window and I",
    "start": "2463099",
    "end": "2468260"
  },
  {
    "text": "get both in the same piece of technology and this is all in my opinion possible not realized yet but possible going to",
    "start": "2468260",
    "end": "2474680"
  },
  {
    "text": "beam this wonderful runtime which is in my view indeed the soul of Erlang and elixir so before a part a couple of",
    "start": "2474680",
    "end": "2481180"
  },
  {
    "text": "parting gifts I'm the author of the book elixir in action only today it's 50% off",
    "start": "2481180",
    "end": "2486950"
  },
  {
    "text": "with the following code up there and then for the rest of the days you also have the 40% of code I'm also giving",
    "start": "2486950",
    "end": "2494329"
  },
  {
    "text": "away a couple of copies for free so I have to hard book versions and a couple of more of eBook versions and if you",
    "start": "2494329",
    "end": "2500029"
  },
  {
    "text": "wanna grab that just approach me after the talk and ask for it you don't have to pretend that you're interested in anything else please rate this session",
    "start": "2500029",
    "end": "2508690"
  },
  {
    "text": "let me know what worked what didn't I'm going to return back to this fight in case you want to grab those coats and",
    "start": "2508690",
    "end": "2514579"
  },
  {
    "text": "thank you you",
    "start": "2514579",
    "end": "2520610"
  }
]