[
  {
    "start": "0",
    "end": "206000"
  },
  {
    "text": "Good morning, good afternoon, or good evening, \nwherever you are and whatever you are,   or whoever you are, I guess around the world \nsomewhere. Welcome to another edition of GOTO  ",
    "start": "3840",
    "end": "12840"
  },
  {
    "text": "BookClub. This time, it's me hosting, James \nLewis. I'm delighted to be joined this time  ",
    "start": "12840",
    "end": "19560"
  },
  {
    "text": "around by Dr. Rebecca Parsons, and Neal Ford \nFord, who are co-authors, along with Patrick  ",
    "start": "19560",
    "end": "25439"
  },
  {
    "text": "Kua of \"Building Evolutionary Architectures,\" \nof which there is a second edition of that's  ",
    "start": "25440",
    "end": "31320"
  },
  {
    "text": "hot off the press, which is, it's actually a \ngreat read. So I guess we'll jump straight in.  ",
    "start": "31320",
    "end": "36900"
  },
  {
    "text": "Rebecca Parsons, and Neal Ford, perhaps you could \nintroduce yourselves, and tell us a bit about   what you do and what interests you at that moment.\nI'm the Chief Technology Officer for ThoughtWorks.  ",
    "start": "37980",
    "end": "49739"
  },
  {
    "text": "And I actually joined in December 1999. So I'm \none of the few people with this kind of color  ",
    "start": "49740",
    "end": "56700"
  },
  {
    "text": "hair that got to party on December 31, 1999, \nbecause I wasn't mission-critical on anything.  ",
    "start": "56700",
    "end": "62520"
  },
  {
    "text": "I've had a long-standing interest \nin evolutionary computation. And,  ",
    "start": "64380",
    "end": "69960"
  },
  {
    "text": "in fact, I got involved with that when I \nwas doing a postdoc at Los Alamos National   Laboratory in Los Alamos in New Mexico \nin the U.S., studying genetic algorithms,  ",
    "start": "70980",
    "end": "82440"
  },
  {
    "text": "specifically, at that point applied to \nthe Human Genome Project of all things. ",
    "start": "83340",
    "end": "88200"
  },
  {
    "text": "But when I started looking at architecture several \nyears later after joining ThoughtWorks, I felt  ",
    "start": "89280",
    "end": "97560"
  },
  {
    "text": "that this evolutionary metaphor was actually a \nquite powerful one when you think about this in  ",
    "start": "97560",
    "end": "104220"
  },
  {
    "text": "the context of architecture. I remember listening \nto Neal Ford give one of his talks, and he called  ",
    "start": "104220",
    "end": "110040"
  },
  {
    "text": "it \"emergent architecture.\" And we had a very \nrobust discussion about why that was a really bad  ",
    "start": "110040",
    "end": "115380"
  },
  {
    "text": "name. And obviously, I won that particular debate, \nsince we're calling it evolutionary architectures  ",
    "start": "115380",
    "end": "122579"
  },
  {
    "text": "now. I also am definitely a programming languages \ngeek, and so my primary research areas are  ",
    "start": "122580",
    "end": "132240"
  },
  {
    "text": "either in programming languages, parallel \nand distributed systems, or in evolutionary  ",
    "start": "133140",
    "end": "138600"
  },
  {
    "text": "computation in artificial intelligence.\nThat's all the easy stuff then, I guess.   How about you Neal Ford? Welcome.\nHi, everyone. My name is Neal Ford,  ",
    "start": "138600",
    "end": "149580"
  },
  {
    "text": "I've been at ThoughtWorks not quite as long. I was \nactually a consultant in 1999 but did not have to  ",
    "start": "149580",
    "end": "155820"
  },
  {
    "text": "worry about anything crashing. I just watched the \nnews to make sure the world was still going to be   all right. I joined ThoughtWorks in 2004.\nNow, it's probably about 12 years ago,  ",
    "start": "155820",
    "end": "169800"
  },
  {
    "text": "Rebecca first told me about this idea of \napplying evolutionary computing fitness  ",
    "start": "169800",
    "end": "177000"
  },
  {
    "text": "functions as a way of doing software governance \nand in particular, automating software governance.  ",
    "start": "177000",
    "end": "182760"
  },
  {
    "text": "And it really caught my attention because \nit was such an innovative approach. It's   what I call a metaphorical mashup when \nyou take two disjointed subject areas,  ",
    "start": "182760",
    "end": "192300"
  },
  {
    "text": "but then you mash them up, and you get a new, \ninteresting result. So I thought that was  ",
    "start": "192300",
    "end": "197460"
  },
  {
    "text": "fascinating. That's when we decided to eventually \nwrite a book about it after we experimented   with this on a bunch of different client \nprojects and a bunch of different scenarios.",
    "start": "197460",
    "end": "205799"
  },
  {
    "text": "It's super interesting for me going \nback, like the historical aspect of it,   because I remember emergent design being a \nhuge thing back in the day, specifically,  ",
    "start": "205800",
    "end": "214860"
  },
  {
    "start": "206000",
    "end": "652000"
  },
  {
    "text": "when it came to how you drive out the \ndesign of your software by like text.  ",
    "start": "214860",
    "end": "218880"
  },
  {
    "text": "Was that ever an inspiration? Was that \npart of the inspiration behind this?  Well, that was the inspiration for the talk that \nRebecca set me straight on. Because it started  ",
    "start": "220500",
    "end": "231420"
  },
  {
    "text": "out being emergent design in architecture. That \nwas there were only a couple of iterations of  ",
    "start": "231420",
    "end": "236819"
  },
  {
    "text": "that until Rebecca saw it, fortunately, because \nthen it changed to evolutionary architecture and  ",
    "start": "236820",
    "end": "242460"
  },
  {
    "text": "emergent design. And this is actually a question \nwe get a lot in the architecture world. It's like,   well, we're taught in the design world, \nthat you shouldn't design a lorry,  ",
    "start": "242460",
    "end": "250980"
  },
  {
    "text": "you should start with a roller skate, and \nthen turn it into a bicycle, and then a car,  ",
    "start": "250980",
    "end": "256380"
  },
  {
    "text": "and then a truck, and then finally a lorry.\nBut you can't do that for architecture because you  ",
    "start": "256380",
    "end": "262620"
  },
  {
    "text": "can't take the same supporting elements for roller \nskate and just sort of incrementally turn it into  ",
    "start": "262620",
    "end": "268020"
  },
  {
    "text": "something for a lorry. At some point, you have to \nstart over because of stress, because of physics,   and because of real-world constraints on the kinds \nof scale and other things that occur and that's  ",
    "start": "268020",
    "end": "278040"
  },
  {
    "text": "why you can't evolve it over time. And that's \nexactly this idea of evolutionary architecture.  ",
    "start": "278040",
    "end": "284100"
  },
  {
    "text": "You have to start with something but now the \nreal trick is, how do you take that something  ",
    "start": "284100",
    "end": "289680"
  },
  {
    "text": "you started with and then change it over time as \nyou need to? That's really the mechanics part of  ",
    "start": "289680",
    "end": "295680"
  },
  {
    "text": "what this fitness function idea got to.\nI guess that sort of brings me to  ",
    "start": "295680",
    "end": "301320"
  },
  {
    "text": "what is in evolutionary architecture. Because \nit feels like it could be many different things   but maybe Rebecca can explain what you mean \nin the book by evolutionary architecture,  ",
    "start": "303420",
    "end": "312480"
  },
  {
    "text": "maybe that's a good starting point.\nWell, we define evolutionary architecture as  ",
    "start": "312480",
    "end": "316860"
  },
  {
    "text": "it supports guided incremental change across \nmultiple dimensions, and those three words,  ",
    "start": "318660",
    "end": "325140"
  },
  {
    "text": "or three phrases, are important. Guided is where \nthe fitness functions come in. Because if you  ",
    "start": "325140",
    "end": "330660"
  },
  {
    "text": "think about design, good code is good code, bad \ncode is bad code. It doesn't matter if it's retail  ",
    "start": "330660",
    "end": "339240"
  },
  {
    "text": "if it's embedded, if it's healthcare, good code \nis good code and bad code is bad code. But there  ",
    "start": "339240",
    "end": "347460"
  },
  {
    "text": "is no such rule about what constitutes a good \narchitecture. And what we do through these fitness  ",
    "start": "347460",
    "end": "354539"
  },
  {
    "text": "functions is say for this particular system, \nfor my organization, these are the architectural  ",
    "start": "354540",
    "end": "361560"
  },
  {
    "text": "characteristics that will drive this architecture \nto success. These are the ones that matter. ",
    "start": "361560",
    "end": "367020"
  },
  {
    "text": "One example I often use is one of the clients \nI worked on early, we were in central London,  ",
    "start": "368220",
    "end": "374940"
  },
  {
    "text": "and one of their perks was a sandwich ordering \nsystem. Well, they didn't take credit cards,  ",
    "start": "375600",
    "end": "382560"
  },
  {
    "text": "there was no personal information, and there \nwere only a few hundred people in the building.  ",
    "start": "383760",
    "end": "388080"
  },
  {
    "text": "So having a highly secure, highly scalable \narchitecture for the sandwich ordering  ",
    "start": "389040",
    "end": "394800"
  },
  {
    "text": "system would be silly. And so the guided \npart is where we say, for the system,  ",
    "start": "394800",
    "end": "402060"
  },
  {
    "text": "these are the architectural characteristics that \nI need. These are the ones that are important.   And those are the ones that we use \nin our architectural decision-making. ",
    "start": "402060",
    "end": "412320"
  },
  {
    "text": "The next is incremental change, where we are \nconstantly looking at what is the current  ",
    "start": "413340",
    "end": "421980"
  },
  {
    "text": "landscape. What are the current expectations? \nWhat's the technology landscape doing? And trying  ",
    "start": "421980",
    "end": "427620"
  },
  {
    "text": "to say, are there ways that I can continue \nto either maintain this architectural level  ",
    "start": "427620",
    "end": "435000"
  },
  {
    "text": "or enhance it? And then multiple dimensions is \nthere's just a whole lot of abilities out there.  ",
    "start": "435000",
    "end": "443220"
  },
  {
    "text": "You can't optimize for all of them because many of \nthem are mutually exclusive. And so you're going  ",
    "start": "444660",
    "end": "451800"
  },
  {
    "text": "to pick and choose. What we're trying to do is \nintroduce evolvability as one of those first-class  ",
    "start": "451800",
    "end": "459120"
  },
  {
    "text": "“ilities”. And it may be that you don't care about \nevolvability in this context. But from what we've  ",
    "start": "459120",
    "end": "467580"
  },
  {
    "text": "seen, if you're in a large-scale enterprise with \na complex IT estate, evolvability is something  ",
    "start": "467580",
    "end": "473400"
  },
  {
    "text": "that does matter because your ability to respond \nto change, introduce new products and services,  ",
    "start": "473400",
    "end": "478620"
  },
  {
    "text": "it's crucial that you be able to evolve, \nnot just your code, but your architecture. ",
    "start": "480360",
    "end": "485879"
  },
  {
    "text": "That's actually one of the big changes from the \nfirst edition of the book to the second edition   of the book because we wanted to focus... In both \nbooks, we focused on the mechanics of evolution,  ",
    "start": "486960",
    "end": "496320"
  },
  {
    "text": "how you govern changes through fitness \nfunctions, and also this architectural  ",
    "start": "496320",
    "end": "501480"
  },
  {
    "text": "structure that Rebecca was talking about. How \ndo you build architectures where the structure   supports this kind of incremental change over \ntime? And in the first book, we did sort of a  ",
    "start": "501480",
    "end": "511260"
  },
  {
    "text": "survey of different architectural styles and \nevaluated them, sort of as a head-to-head  ",
    "start": "511260",
    "end": "516300"
  },
  {
    "text": "comparison. In the second edition, we felt like \nthat wasn't really capturing because at the heart  ",
    "start": "516300",
    "end": "523260"
  },
  {
    "text": "of the reason why something is evolving or not is \nhow much you've let implementation coupling leak. ",
    "start": "523260",
    "end": "530940"
  },
  {
    "text": "An extreme example of that is I worked with \na client at one point that had exposed their  ",
    "start": "532080",
    "end": "539220"
  },
  {
    "text": "relational tables to their integration \narchitecture that anybody can just wire   into the database directly through their \narchitecture. Then they were shocked that  ",
    "start": "539220",
    "end": "547680"
  },
  {
    "text": "a single change in a table somewhere can wreck \ntheir entire ecosystem. And it's like, well,  ",
    "start": "547680",
    "end": "553020"
  },
  {
    "text": "that's the definition of brittle architecture. \nBut that's not an evolvable architecture,   because now any change breaks everything. So the \nmore you can limit the blast radius of change,  ",
    "start": "553020",
    "end": "563280"
  },
  {
    "text": "that's really that domain-driven design is \nabout and bounded context. So in many ways,   that translated into architectural \nterms, that's protecting the ability  ",
    "start": "564000",
    "end": "573780"
  },
  {
    "text": "to evolve structurally because you're \nnot coupling to implementation details,   and you can create boundaries around things \nto allow you to evolve more gracefully.",
    "start": "573780",
    "end": "582480"
  },
  {
    "text": "It reminds me of a client some years ago, \nwho shall remain nameless obviously. They  ",
    "start": "582480",
    "end": "587880"
  },
  {
    "text": "were in the airline business and they had this \nwonderful problem that they suffered from where   they procured that at the point a new shiny SQL \nServer database and set of stored procedures on  ",
    "start": "587880",
    "end": "602400"
  },
  {
    "text": "top that made up their SI operations. I \nknow they're developed by a third party,  ",
    "start": "602400",
    "end": "609180"
  },
  {
    "text": "and then the internet happened and they thought, \nwow, wouldn't it be cool to sell tickets directly   to the public? That would be an amazing thing \nto do. So why don't we just plug the internet  ",
    "start": "609180",
    "end": "618120"
  },
  {
    "text": "directly into the SI database and pull it like it \ndoes everything now? It's really, really simple. ",
    "start": "618120",
    "end": "624540"
  },
  {
    "text": "Of course, then something interesting, as \na volcano happened in Iceland a number of   years ago. What happened was they had a bunch \nof people who were frantically checking to see  ",
    "start": "625440",
    "end": "634740"
  },
  {
    "text": "whether their flight was canceled, by pressing F4 \nand pressing F4 the database was getting slower   and slower and slower until eventually none \nof the planes could take off because there  ",
    "start": "634740",
    "end": "642899"
  },
  {
    "text": "were no passengers because they lost their SI \ninfrastructure because of people pressing F4.  ",
    "start": "642900",
    "end": "647640"
  },
  {
    "text": "And I think that's a great example of \nthat kind of implementation coupling. Then there was one other thing. Maybe this is \ngetting a bit too into the details because,  ",
    "start": "648300",
    "end": "655800"
  },
  {
    "start": "652000",
    "end": "861000"
  },
  {
    "text": "if there is any such thing I guess, \nthere was something that came up   in the book, which I've not come across before, \nI'm pretty well-read and I've been around for a  ",
    "start": "656640",
    "end": "664860"
  },
  {
    "text": "very long time, that really intrigued me, I \nreally learned something about this idea of   connascence. Where does this come from? This \nidea of being able to more deeply describe  ",
    "start": "664860",
    "end": "673260"
  },
  {
    "text": "the different types of coupling within systems, \nfeels like that's a missing piece that we've not  ",
    "start": "673260",
    "end": "678780"
  },
  {
    "text": "been talking about and should have been maybe.\nIt's fascinating because it's from a book that  ",
    "start": "678780",
    "end": "683820"
  },
  {
    "text": "was published in 1993. I got a copy out \nof my bookshelf back here because it's a   little bit misreported online, but I think it's \na three-part name and I apologize to the author,  ",
    "start": "683820",
    "end": "695940"
  },
  {
    "text": "I can't remember the author's name now. But the \nname of the book is \"What Every Programmer Should   Know about Object-oriented Design,\" which \nsounds really promising as a book title.  ",
    "start": "695940",
    "end": "706500"
  },
  {
    "text": "But it turns out that about half the book is \nan object-oriented analysis design process. So  ",
    "start": "706500",
    "end": "712920"
  },
  {
    "text": "if you remember, in the early '90s, everybody \nwas building an object-oriented analysis and   design process. In fact, that culminated in the \nThree Amigos joining and creating UML, because  ",
    "start": "712920",
    "end": "722940"
  },
  {
    "text": "there were so many of them. So he was one of the \ncompetitors who did not become one of the Three   Amigos. And so that part of the book is a big part \nof the book and nobody ever uses that anymore. ",
    "start": "722940",
    "end": "732180"
  },
  {
    "text": "But the fascinating part of that book is his \ndefinition of connascence, which is really a  ",
    "start": "732180",
    "end": "737700"
  },
  {
    "text": "vocabulary for describing coupling. And just \nlike design patterns, you can go in and say,  ",
    "start": "737700",
    "end": "743640"
  },
  {
    "text": "well, what we need here is an object that you \ncan only ever create a single instance of. Well,  ",
    "start": "743640",
    "end": "749040"
  },
  {
    "text": "it's a lot easier to come in and say, \"We need \na singleton there.\" The exact same is true for a  ",
    "start": "749040",
    "end": "754620"
  },
  {
    "text": "description of coupling, you can come and say, \n\"Oh, you should not have that magic consonant  ",
    "start": "754620",
    "end": "759720"
  },
  {
    "text": "inside that method, you should extract that into a \nconstant, or do the injection,\" or you could say,  ",
    "start": "759720",
    "end": "767339"
  },
  {
    "text": "\"Oh, you have connascence of meaning there, \nyou should move that to connascence of name.\"  ",
    "start": "767340",
    "end": "772440"
  },
  {
    "text": "And so it's just a more compact language \nfor describing how coupling works.  But the other really fascinating thing about this \nis, so 1993, the very early days of distributed  ",
    "start": "772440",
    "end": "783420"
  },
  {
    "text": "computing, one of the characteristics of \nconnascence he talks about is the scope.  ",
    "start": "783420",
    "end": "789300"
  },
  {
    "text": "And one of the observations he makes, the worst \nkind of connascence is dynamic connascence. It's  ",
    "start": "789300",
    "end": "795180"
  },
  {
    "text": "the connascence by identity, which is basically \ntransactional coupling, what we call it now. And  ",
    "start": "795180",
    "end": "802380"
  },
  {
    "text": "one of the observations he made was, the more \nconnascence you have, the tighter the scope it  ",
    "start": "802380",
    "end": "808680"
  },
  {
    "text": "should be because the more you let it stretch, \nthe more damage it does to your architecture.  ",
    "start": "808680",
    "end": "813420"
  },
  {
    "text": "He said that in 1993, and nobody understood what \nhe was talking about. And then Eric Evans came  ",
    "start": "814260",
    "end": "820440"
  },
  {
    "text": "and introduced the idea of a bounded \ncontext and everybody got it at that   point. But that's really a thread that has been \nthrough the software development world for now,  ",
    "start": "820440",
    "end": "830340"
  },
  {
    "text": "a couple of almost three decades of \nrealizing how to control coupling in a  ",
    "start": "830340",
    "end": "836580"
  },
  {
    "text": "distributed architecture because that's \nthe thing that prevents it from being   able to change in an easy and effective manner.\nWhat was the old quote about object orientation?  ",
    "start": "836580",
    "end": "846540"
  },
  {
    "text": "It means three things. It's extremely late \nbinding and all the things message passing   and encapsulation. If you're doing that, it's \nobject orientation. That was okay, was it? ",
    "start": "849420",
    "end": "859440"
  },
  {
    "start": "861000",
    "end": "1085000"
  },
  {
    "text": "Rebecca going back a little bit to what we \nwere talking about, I guess, a few minutes ago,   about the history of this. You mentioned briefly, \nyour inspiration behind some of the ideas and I've  ",
    "start": "861480",
    "end": "872040"
  },
  {
    "text": "got this lovely picture in my head of kind of \nevolutionary trees where you have almost like  ",
    "start": "872040",
    "end": "878820"
  },
  {
    "text": "this idea of a system, it can go in one way or \nanother and reductio ad absurdum you're going   to have an elephant and the other direction \nyou're going to have some kind of sea anemone.  ",
    "start": "878820",
    "end": "887819"
  },
  {
    "text": "How much was the actual sub-biological inspiration \nthere for you? Or was it always to do with the  ",
    "start": "888660",
    "end": "894360"
  },
  {
    "text": "genetic algorithms and that kind of stuff?\nIt was really more the genetic algorithms.  ",
    "start": "894360",
    "end": "898980"
  },
  {
    "text": "One of the early things we talked about is we're \nnot looking at breeding dogs. Okay, we're going to  ",
    "start": "900360",
    "end": "906240"
  },
  {
    "text": "take this architecture and this architecture \nand try to get one that looks like this.  ",
    "start": "906240",
    "end": "909779"
  },
  {
    "text": "But the key really was to find out using \nfitness functions, this concept as this unifying  ",
    "start": "912180",
    "end": "922560"
  },
  {
    "text": "metaphor for talking about very different things, \nperformance, security requirements, observability  ",
    "start": "922560",
    "end": "930120"
  },
  {
    "text": "requirements, logging requirements, coupling, \ncode quality, all of these different things. ",
    "start": "930120",
    "end": "936960"
  },
  {
    "text": "There's been some real innovation in some of the \ntools, for example, that you can use to encode  ",
    "start": "939060",
    "end": "946920"
  },
  {
    "text": "architectural constraints in something that \nlooks very much like a unit test. That's a   fitness function. Does my software architecture \nrespect my layering? Or am I using the properly  ",
    "start": "947700",
    "end": "961020"
  },
  {
    "text": "wrapped version of this library that has a \nvulnerability so that the wrapper actually solves  ",
    "start": "961020",
    "end": "967560"
  },
  {
    "text": "the vulnerability? By using that same metaphor, \nit allows us to talk about what are the costs  ",
    "start": "967560",
    "end": "977940"
  },
  {
    "text": "inherent in meeting a particular fitness function. \nAnd what are the benefits that we can get? ",
    "start": "977940",
    "end": "983640"
  },
  {
    "text": "Rather than having security come in and \nsay, \"Here are all my security requirements,  ",
    "start": "985680",
    "end": "991560"
  },
  {
    "text": "and here are the DevOps requirements, \nand here are these requirements and that   requirement,\" it's like, okay, let's talk \nabout this because we can't do everything.  ",
    "start": "991560",
    "end": "1001220"
  },
  {
    "text": "And so let's identify the things that are \nmost important, but that fitness function,  ",
    "start": "1002480",
    "end": "1008660"
  },
  {
    "text": "wouldn't... When you look at it \nfrom an optimization perspective,  ",
    "start": "1008660",
    "end": "1012980"
  },
  {
    "text": "what you're trying to do is navigate a space, and \nyou're using these fitness functions, and that  ",
    "start": "1014360",
    "end": "1021920"
  },
  {
    "text": "to navigate this space to find a solution that \nbest represents your competing objectives. And  ",
    "start": "1021920",
    "end": "1033500"
  },
  {
    "text": "so it really did come more from the optimization \nrealm, as opposed to the actual biology realm. ",
    "start": "1033500",
    "end": "1039439"
  },
  {
    "text": "Well, and trust us, we were tempted. We had a \nlot of conversations about how far can we push  ",
    "start": "1039440",
    "end": "1044480"
  },
  {
    "text": "this metaphor. Because we're writers, we love \nto torture metaphors until they just scream,  ",
    "start": "1044480",
    "end": "1048860"
  },
  {
    "text": "but we realized, and exactly Rebecca's point, \nthe mechanisms we talk about are much more like  ",
    "start": "1049820",
    "end": "1057440"
  },
  {
    "text": "the forces that cause evolution to happen. So \ntulips can't be infinitely scalable because,  ",
    "start": "1057440",
    "end": "1064399"
  },
  {
    "text": "at some point, they'll run out of ground or air \nor water or something. So that's the force that is  ",
    "start": "1064400",
    "end": "1071300"
  },
  {
    "text": "causing evolution to be constrained. That's kind \nof what we're addressing with fitness functions  ",
    "start": "1071300",
    "end": "1077000"
  },
  {
    "text": "are more the evolutionary forces than the actual \nphysical structural change generated by evolution.",
    "start": "1077000",
    "end": "1084080"
  },
  {
    "text": "One thing. Okay, maybe I'm being cynical playing \ndevil's advocate to a certain extent here. But I  ",
    "start": "1084080",
    "end": "1089600"
  },
  {
    "start": "1085000",
    "end": "1268000"
  },
  {
    "text": "mean, you could probably say that we've been doing \nthis for a long time. This is just what I do.  ",
    "start": "1089600",
    "end": "1096200"
  },
  {
    "text": "Is there an element of that to it or is that, \nor what are we getting extra from this idea of  ",
    "start": "1098060",
    "end": "1103400"
  },
  {
    "text": "fitness functions that we're describing?\nWell, I think it's a mindset shift.  ",
    "start": "1103400",
    "end": "1108140"
  },
  {
    "text": "When I first started talking \nabout evolutionary architecture,   people would come up to the stage and whisper, \n\"Don't you think you're being professionally  ",
    "start": "1109640",
    "end": "1117740"
  },
  {
    "text": "irresponsible to talk about evolving an \narchitecture?\" It is the rock, the foundation.  ",
    "start": "1117740",
    "end": "1123200"
  },
  {
    "text": "People really looked at architecture as being \nsomething that, I mean, it's even defined by  ",
    "start": "1125300",
    "end": "1131780"
  },
  {
    "text": "some people as those things that are hard \nto change. But it's not practical. And so  ",
    "start": "1131780",
    "end": "1138200"
  },
  {
    "text": "the mindset shift is accepting, much \nlike in Agile software development,  ",
    "start": "1138860",
    "end": "1143480"
  },
  {
    "text": "sure, if you could perfectly nail all of the \nrequirements, you probably don't need Agile. ",
    "start": "1144020",
    "end": "1154160"
  },
  {
    "text": "Someone asked me once, is there any application \nfor which you would never use pure Agile?  ",
    "start": "1155420",
    "end": "1162020"
  },
  {
    "text": "And I said, possibly a weather simulation \nbecause the laws of physics, don't change very  ",
    "start": "1163040",
    "end": "1168920"
  },
  {
    "text": "often. Occasionally, we learn something new but \nbasically, you know what those requirements are.  ",
    "start": "1168920",
    "end": "1174620"
  },
  {
    "text": "But that's not the way it is in our technology \nlandscape now. It is changing so rapidly and so  ",
    "start": "1176600",
    "end": "1182600"
  },
  {
    "text": "you have to start with the mindset, this stuff \nis going to have to change and so what are the  ",
    "start": "1182600",
    "end": "1189200"
  },
  {
    "text": "things that in the face of that change, \nI want to make sure I don't lose? I need  ",
    "start": "1189200",
    "end": "1195019"
  },
  {
    "text": "this level of scalability, I need this level of \nencryption, I need this level of data privacy. ",
    "start": "1195020",
    "end": "1200660"
  },
  {
    "text": "Okay, now, as I change things around, am I \nactually maintaining those characteristics   that I say are crucial to the success of \nmy system? And so it is that mindset. And  ",
    "start": "1202040",
    "end": "1215360"
  },
  {
    "text": "although some people might have \nthought of it from that context,  ",
    "start": "1216260",
    "end": "1221300"
  },
  {
    "text": "people used to put 5- and 10-year \ntechnology roadmaps on their walls.   They weren't thinking about it changing next \nTuesday. So it really is that mindset shift. ",
    "start": "1223220",
    "end": "1233540"
  },
  {
    "text": "I was going to say, I think Rebecca is exactly \nright in the unification of treating these  ",
    "start": "1233540",
    "end": "1241100"
  },
  {
    "text": "seemingly disparate things because in every \norganization security is super important. But  ",
    "start": "1241100",
    "end": "1246620"
  },
  {
    "text": "internal code quality might not be as important, \nbut if they're both in the family of architectural  ",
    "start": "1246620",
    "end": "1252140"
  },
  {
    "text": "governance because they are both things that can \nbe governed by a fitness function, that gives you   more of an apples-to-apples comparison between the \nseemingly disparate things. It's like, no, these  ",
    "start": "1252140",
    "end": "1261680"
  },
  {
    "text": "are really aspects of our architectural governance \nthat we need to prioritize appropriately.",
    "start": "1261680",
    "end": "1267140"
  },
  {
    "text": "I mean, that actually brings me to another \nquestion I have. In the book, obviously,   that's the mechanics of doing this as well, right? \nHow to go about identifying when and that kind  ",
    "start": "1267740",
    "end": "1277520"
  },
  {
    "start": "1268000",
    "end": "1663000"
  },
  {
    "text": "of stuff. I mean, is there a danger here that we \nend up in the same sort of situation, there's the  ",
    "start": "1277520",
    "end": "1284480"
  },
  {
    "text": "Welsh coming out there, in the same sort of place \nwhere we do big up-front architecture planning? I  ",
    "start": "1284480",
    "end": "1291500"
  },
  {
    "text": "remember going to one client and saying, \"Have \nyou thought about principles and architecture   principles and those kinds of things?\" They said, \n\"Yeah, we've got loads of them, we've got all of  ",
    "start": "1291500",
    "end": "1299720"
  },
  {
    "text": "them,\" and they have this amazing spreadsheet, \nwhich if he wrote it up on index cards,  ",
    "start": "1299720",
    "end": "1305000"
  },
  {
    "text": "would cover all the walls of a room, completely \nincomprehensible that people wouldn't be able   to actually make any decisions based on those \nprinciples, on those characteristics. Do you  ",
    "start": "1305000",
    "end": "1318260"
  },
  {
    "text": "have any advice about where to start? How to avoid \ndoing too much upfront, if you like, and sort of  ",
    "start": "1318260",
    "end": "1326000"
  },
  {
    "text": "avoiding the big architectural framework problems \nthat we've seen so many times over the years. ",
    "start": "1326720",
    "end": "1332179"
  },
  {
    "text": "Well, I'll start and let Rebecca add to \nmy comment. So we realized that we've  ",
    "start": "1332180",
    "end": "1337580"
  },
  {
    "text": "given architects a sharp stick here by which \nthey could poke developers and we're strongly   encouraging them not to use the sharp \nstick to poke developers. Because you  ",
    "start": "1337580",
    "end": "1347540"
  },
  {
    "text": "could create an incomprehensible, we can make \nthis impossible for any single developer to  ",
    "start": "1347540",
    "end": "1353360"
  },
  {
    "text": "get to pass all these different constraints \nwe've added. That's not our intent at all. ",
    "start": "1353360",
    "end": "1358220"
  },
  {
    "text": "The example I give is, it's sort of like a \nchecklist. There was a famous book that came  ",
    "start": "1359960",
    "end": "1367159"
  },
  {
    "text": "out a few years ago, \"Checklist Manifesto\", that \ntalks about the value of checklists. And that's   really what architectural fitness functions are. \nBecause there are a lot of detailed things that  ",
    "start": "1367160",
    "end": "1376160"
  },
  {
    "text": "you need to think about as a developer, including \nthings around governance. Most developers are   professionally responsible but as soon as things \nlike schedule pressure show up, it gets harder and  ",
    "start": "1376160",
    "end": "1385400"
  },
  {
    "text": "harder to mind the individual details, and \nfitness functions help catch those things. ",
    "start": "1385400",
    "end": "1390920"
  },
  {
    "text": "But part of this is the benefit of building \nthese things as fitness functions versus the  ",
    "start": "1392420",
    "end": "1398840"
  },
  {
    "text": "spreadsheet because you can keep adding \nto that spreadsheet forever. But if you  ",
    "start": "1398840",
    "end": "1404000"
  },
  {
    "text": "have to start implementing something, well, \nnow you have time and resource constraints,   and that forces you to prioritize these things. \nOkay, which are the things we really need to have,  ",
    "start": "1404000",
    "end": "1413780"
  },
  {
    "text": "and which things are kind of just because \narchitects love to go to ivory towers and   plan stuff? But actually having to implement \nthose things and coming up with objective  ",
    "start": "1413780",
    "end": "1423440"
  },
  {
    "text": "measures for them is trackable work, and there \nare real-world constraints that can apply to that.",
    "start": "1423440",
    "end": "1429559"
  },
  {
    "text": "And for me potentially it's also a way of \ngetting me to quote Gregor, I hope it's a   way of getting people out of the ivory tower, \nriding the elevator down to the engine room,  ",
    "start": "1429560",
    "end": "1437539"
  },
  {
    "text": "and actually seeing where the work is happening. \nAnd doing some of it themselves. You're actually   seeing what the real problems and projects \nare, I guess, in some senses. Rebecca? ",
    "start": "1437540",
    "end": "1445760"
  },
  {
    "text": "Yes, and I think that that last point of \nNeal's, you have to make these objectives  ",
    "start": "1445760",
    "end": "1452300"
  },
  {
    "text": "and you can't just use fluffy words like scalable \nor maintainable is one of my personal favorites.  ",
    "start": "1452840",
    "end": "1462620"
  },
  {
    "text": "You have to say what that means. And one of the \nbenefits of that is the conversations that then  ",
    "start": "1463520",
    "end": "1470900"
  },
  {
    "text": "happen. Because fundamentally, the objectives and \nthe purpose of an architecture team and a software  ",
    "start": "1470900",
    "end": "1479840"
  },
  {
    "text": "delivery team are in conflict. The software \ndelivery team's job is to get some...get products  ",
    "start": "1479840",
    "end": "1487159"
  },
  {
    "text": "and services out the door as quickly as \npossible to satisfy the needs of the business. ",
    "start": "1487160",
    "end": "1492800"
  },
  {
    "text": "The job of the architect is to look out for \nthe long-term asset value of the IT estate.  ",
    "start": "1493940",
    "end": "1503659"
  },
  {
    "text": "Short-term and long-term are always in tension.  ",
    "start": "1505580",
    "end": "1509480"
  },
  {
    "text": "And one of the things that frustrate architects \nis they say these developers, these cowboy  ",
    "start": "1510680",
    "end": "1516860"
  },
  {
    "text": "developers, is normally how they're referred, they \njust don't care. No, it's not that they don't care  ",
    "start": "1516860",
    "end": "1523340"
  },
  {
    "text": "but you haven't communicated to them in a way that \ncan fit into their software development lifecycle,  ",
    "start": "1524120",
    "end": "1530240"
  },
  {
    "text": "what things are keeping you up at night? And \nsimilarly, because architects in general are  ",
    "start": "1530240",
    "end": "1538160"
  },
  {
    "text": "so far outnumbered by developers, they don't \nreally understand what's going on down there. ",
    "start": "1538160",
    "end": "1543920"
  },
  {
    "text": "By forcing that conversation, okay, this is the \nfitness function I need to achieve, how can I  ",
    "start": "1545180",
    "end": "1553460"
  },
  {
    "text": "make that objective and realizable in the context \nof the software development lifecycle, you call  ",
    "start": "1553460",
    "end": "1559399"
  },
  {
    "text": "a conversation to occur? And now, developers \nunderstand what's keeping the architects up at  ",
    "start": "1559400",
    "end": "1565400"
  },
  {
    "text": "night. Architects understand how that cycle \nworks, and how they can best influence it.  ",
    "start": "1565400",
    "end": "1572060"
  },
  {
    "text": "And now you can have that trade-off decision. \nAnd sometimes the long-term should win.  ",
    "start": "1572900",
    "end": "1578720"
  },
  {
    "text": "Sometimes, the short-term should win. But if \nyou don't have an objective basis for that  ",
    "start": "1579440",
    "end": "1584480"
  },
  {
    "text": "conversation, you're just gonna be butting heads.\nWell, that's a great example, too, of how this  ",
    "start": "1584480",
    "end": "1590480"
  },
  {
    "text": "scales up the sort of Gregor Hohpe's architect \nelevator idea because enterprise architects too  ",
    "start": "1590480",
    "end": "1597799"
  },
  {
    "text": "can define things objectively. The joke in our \nlast team meeting is we would put it in the radar,  ",
    "start": "1597800",
    "end": "1606560"
  },
  {
    "text": "everything was ultra-high performance. Everything \nwas advertising itself. It was ultra-high  ",
    "start": "1606560",
    "end": "1612980"
  },
  {
    "text": "performance because it was fast.\nBlazingly fast.  Blazingly fast, that's right. Because it \nmeans nothing. There's no actual measure  ",
    "start": "1612980",
    "end": "1619880"
  },
  {
    "text": "there. Enterprise architects often fall into this \nas we need scalability. But putting a concrete  ",
    "start": "1619880",
    "end": "1625940"
  },
  {
    "text": "number on that means that the strategizing \nthey're doing can become reality, and tactics  ",
    "start": "1625940",
    "end": "1631279"
  },
  {
    "text": "will just always win, which is what happens in \na lot of organizations because the tactics are  ",
    "start": "1631280",
    "end": "1636620"
  },
  {
    "text": "the ones who are actually producing code and \nthe tactic often wins out over strategy. So a  ",
    "start": "1636620",
    "end": "1642680"
  },
  {
    "text": "lot of organizations are frustrated that we can't \nget an enterprise architecture strategy because   tactics always win. This gives you, I think in a \nperfect organization, the enterprise architects  ",
    "start": "1642680",
    "end": "1653420"
  },
  {
    "text": "all the way down to the developers, everyone's \nequally unhappy. Because if one of those is  ",
    "start": "1653420",
    "end": "1659000"
  },
  {
    "text": "too happy, then something's probably wrong \nwith the other two, and they're too unhappy. It's super interesting because obviously, \nthere are so many different types of styles  ",
    "start": "1659000",
    "end": "1668480"
  },
  {
    "start": "1663000",
    "end": "1963000"
  },
  {
    "text": "of organization. Now, when you look at the sort of \ndigital native organizations, like Spotify, they   still, for example, have a chief architect, there \nwas a role there. But obviously, the activity of  ",
    "start": "1668480",
    "end": "1678980"
  },
  {
    "text": "architecture is very much pushed down to the teams \nand people, maybe more experienced people working  ",
    "start": "1678980",
    "end": "1685100"
  },
  {
    "text": "on teams, or maybe they've got other types \nof processes in place, rather than having the   ivory tower. I mean, for me, as an observation, I \nreally like, the idea of these fitness functions  ",
    "start": "1685100",
    "end": "1694760"
  },
  {
    "text": "because they work in both styles of organization. \nThey work for the modern digital organization,  ",
    "start": "1694760",
    "end": "1699140"
  },
  {
    "text": "whereas you can be there writing fitness \nfunctions on your team as we talked to you,   I think we had a thing on the Thoughtworks radar, \nwhich was run cost as a fitness function. Teams  ",
    "start": "1700160",
    "end": "1710419"
  },
  {
    "text": "should understand how much money they're consuming \nmore energy, whatever it is they're consuming.  ",
    "start": "1710420",
    "end": "1717440"
  },
  {
    "text": "Do you have any observations about those sorts of \ndifferent styles of an organization? Sometimes you  ",
    "start": "1719180",
    "end": "1724280"
  },
  {
    "text": "have these big architectural functions, sometimes \nyou have the more modern digital natives, I guess. ",
    "start": "1724280",
    "end": "1729920"
  },
  {
    "text": "Well, that's one of the reasons we ended \nup not calling it Agile Architecture,   or some other terrible term like that because you \ncould have a terrible waterfall process but still  ",
    "start": "1729920",
    "end": "1738680"
  },
  {
    "text": "have architectural fitness functions as you're \ngoverning some aspect of it. Of course, if you're   in a waterfall process, you would in fact, I'm \nsure, write all of the fitness functions. Well,  ",
    "start": "1738680",
    "end": "1747860"
  },
  {
    "text": "first, you'd create the design document for all \nthe functions and then you pass those over to   an implementation. But yeah, that would not \nwork well. But you know, it does, in fact,  ",
    "start": "1747860",
    "end": "1757280"
  },
  {
    "text": "because we're not describing a process so much \nas we're describing a set of mechanics. So it's  ",
    "start": "1757280",
    "end": "1762680"
  },
  {
    "text": "really just a set of engineering practices \nand a perspective shift more than anything   else. So I think it's applicable very broadly.\nOne thing I've noticed. Another observation,  ",
    "start": "1762680",
    "end": "1770840"
  },
  {
    "text": "I did some work some time ago on a similar thing, \nwhich is this similar idea, hypothesis-driven  ",
    "start": "1770840",
    "end": "1776659"
  },
  {
    "text": "software architecture, I call it, which \nis, I guess, similar in the book to the   fitness function-driven development, which you \ncall towards the back of the book, I guess,  ",
    "start": "1777620",
    "end": "1786140"
  },
  {
    "text": "is in the later sections. And one of the things \nI sort of observed there was that actually,   it's a comment from another colleague of ours, \nErik Doernenburg Eric Goldberg, that people who  ",
    "start": "1786140",
    "end": "1796280"
  },
  {
    "text": "are working in architecture, they tend to design \nfor when they were writing code themselves,   even if that was like 15 years ago. And one of the \nobservations was that things move really quickly.  ",
    "start": "1796280",
    "end": "1806600"
  },
  {
    "text": "Things that were hard to change infrastructure, \nlike standing up VMs or any of these sorts of  ",
    "start": "1808040",
    "end": "1815720"
  },
  {
    "text": "rolling out big caches and things, these \nthings aren't hard to change anymore.  ",
    "start": "1815720",
    "end": "1820340"
  },
  {
    "text": "But there's kind of a lag to the folks who are \nalso designing these systems and thinking about  ",
    "start": "1820940",
    "end": "1827720"
  },
  {
    "text": "these systems. So they don't necessarily know \nthe art of the possible. I think the evolutionary   architecture idea is also sort of pointed toward \nthe art of the modern possible if you like. ",
    "start": "1827720",
    "end": "1837860"
  },
  {
    "text": "I think a lot of what is enabling this innovation \nas well is the foundation of continuous delivery.  ",
    "start": "1837860",
    "end": "1845420"
  },
  {
    "text": "And I think some of those things are \ngoing hand-in-hand. When you can start  ",
    "start": "1846140",
    "end": "1852200"
  },
  {
    "text": "to do things like infrastructure as code \nand you can deploy to production by just  ",
    "start": "1852200",
    "end": "1861919"
  },
  {
    "text": "hitting one button and then it all goes smoothly, \nit gives you a level of rigor and safety  ",
    "start": "1862760",
    "end": "1869240"
  },
  {
    "text": "that allows for more experimentation, \nand then you can start to uncover,  ",
    "start": "1870860",
    "end": "1876559"
  },
  {
    "text": "okay, well, this is still hard. What \ncan I do to make this thing easier?",
    "start": "1876560",
    "end": "1882740"
  },
  {
    "text": "And I think, when you think about \nDocker, Kubernetes, and the cloud,  ",
    "start": "1884780",
    "end": "1891200"
  },
  {
    "text": "infrastructure is code, all of these things \nare solutions to problems along the way of  ",
    "start": "1891200",
    "end": "1898700"
  },
  {
    "text": "this thing is still hard. I want to make it \neasy. What do I have to do to make it easy?  ",
    "start": "1898700",
    "end": "1903440"
  },
  {
    "text": "And we're continuing to check those things off. \nOkay. Now, we can do this, that part's easy.  ",
    "start": "1905180",
    "end": "1910760"
  },
  {
    "text": "Where's the next hard thing I can look at?\nI think this innovation that we're seeing is  ",
    "start": "1910760",
    "end": "1918320"
  },
  {
    "text": "definitely expanding the scope of the possible \nfar past what many enterprises have to deal  ",
    "start": "1918860",
    "end": "1925580"
  },
  {
    "text": "with him. And I know when Neal and I were doing \nthe first book tour, one of the things he said,  ",
    "start": "1925580",
    "end": "1932720"
  },
  {
    "text": "was, even if you don't use Docker right now, you \nneed to think about your architecture differently  ",
    "start": "1933500",
    "end": "1941180"
  },
  {
    "text": "simply because Docker now exists. And \nthat's where this starts getting into  ",
    "start": "1941180",
    "end": "1947780"
  },
  {
    "text": "even those traditional enterprises where what \nskills you need and understanding you need to  ",
    "start": "1947780",
    "end": "1955580"
  },
  {
    "text": "do the job of enterprise architecture at this \nmammoth organization is continuing to change.",
    "start": "1955580",
    "end": "1962299"
  },
  {
    "start": "1963000",
    "end": "2516000"
  },
  {
    "text": "Okay. It's slightly different. One other \nthing you mentioned in the email that we love,  ",
    "start": "1963020",
    "end": "1969860"
  },
  {
    "text": "how far can we drive this metaphor? We drove \nit about as far as hitting another metaphor,   which was an architectural concept that \nis from a very different field. Can you  ",
    "start": "1969860",
    "end": "1979400"
  },
  {
    "text": "talk a little bit about that? Because I \nthink that's a fascinating idea and it   really sort of settled a lot of things in my head.\nThe architecture quantum idea came about because  ",
    "start": "1979400",
    "end": "1988039"
  },
  {
    "text": "connascence wasn't good enough. Actually, \nthat's where we discovered connascence,  ",
    "start": "1988040",
    "end": "1994280"
  },
  {
    "text": "we really were looking for something about \nhow you analyze the coupling characteristics   in architecture, because what we determined \nwas one of the key drivers to how evolved our  ",
    "start": "1995900",
    "end": "2007000"
  },
  {
    "text": "architecture was was how controlled the coupling \nis within the architecture, which we summarized,   I think more concisely in the second edition. But \nthe quantum idea was just a, we realized we needed  ",
    "start": "2007000",
    "end": "2017559"
  },
  {
    "text": "some measure in distributed architectures \nlike microservices that was basically the  ",
    "start": "2017560",
    "end": "2022840"
  },
  {
    "text": "implementation concept of a bounded context. \nBut you can't just call it a bounded context   because that already has a very distinctive \nmeaning in the domain-driven design realm. ",
    "start": "2023680",
    "end": "2032620"
  },
  {
    "text": "And for the same reason, we did not want to, for \nthe next 10 years say, well, bounded contexts, but  ",
    "start": "2032620",
    "end": "2040360"
  },
  {
    "text": "not exactly bounded contexts because it's about \narchitecture structure, not domain-driven design,   that's a very cumbersome way to say something \nover and over again. Whereas architecture quantum,  ",
    "start": "2040360",
    "end": "2048879"
  },
  {
    "text": "we stole that idea from the same reason that \nphysicists did, it means it's an unbreakable  ",
    "start": "2048880",
    "end": "2054159"
  },
  {
    "text": "thing. But you know, the idea of a quantum \nis really a scope of coupling. And that has  ",
    "start": "2054160",
    "end": "2061480"
  },
  {
    "text": "a bunch of very interesting side effects because \nyou can think of it as the smallest deployable   unit within a distributed architecture.\nBut then people like Zhamak Dehghani,  ",
    "start": "2061480",
    "end": "2071740"
  },
  {
    "text": "our colleague took that idea and kind \nof leverage it to create the data mesh  ",
    "start": "2071740",
    "end": "2077260"
  },
  {
    "text": "concept because it was kind of defined around the \nsmallest deployable unit within an architecture.  ",
    "start": "2077260",
    "end": "2083320"
  },
  {
    "text": "It has turned out to be a really useful way \nof thinking about architecture. And in fact,   in the \"Architecture: The Hard Parts\" book, which \nI wrote between the two editions of this one,  ",
    "start": "2083980",
    "end": "2092379"
  },
  {
    "text": "we went even further and defined that kind \nof coupling, a static coupling, but then,   once you have these quanta running \nand they need to call each other,  ",
    "start": "2092380",
    "end": "2100359"
  },
  {
    "text": "there's a whole bunch of other forces you have \nto think about too and that's dynamic coupling.   And that is a distinction that goes back to the \n1993 book, developer [inaudible 00:35:59] story  ",
    "start": "2100360",
    "end": "2110559"
  },
  {
    "text": "design. He also distinguished between \nstatic coupling and dynamic coupling. And so it's been a very useful way of thinking \nabout architecture as \"a shorthand for a piece  ",
    "start": "2110560",
    "end": "2121960"
  },
  {
    "text": "of my architecture that operates as standalone \nbut needs to communicate with other pieces of   my architecture.\" That's too much to say and \nso we just say architecture quantum instead.  ",
    "start": "2121960",
    "end": "2130960"
  },
  {
    "text": "And it also is a great way to torture people with \nthe whole quantum quanta thing, because nobody  ",
    "start": "2133180",
    "end": "2139780"
  },
  {
    "text": "can get it right for a long time, the plural \nversus the singular. So it's a great challenge. ",
    "start": "2139780",
    "end": "2145300"
  },
  {
    "text": "One other thing we talk about quite a \nlot is cohesion. Often we talk about   cohesion and coupling as being almost \ncompletely related to one another.  ",
    "start": "2145300",
    "end": "2154900"
  },
  {
    "text": "And one thing you talked about is how more or \nless by definition have like free, they might  ",
    "start": "2155980",
    "end": "2164080"
  },
  {
    "text": "be acceptable from a single architectural \nquanta perspective but at the same time,   they're doing all the things. So they've got \nthis kind of poor functional cohesion. Is this  ",
    "start": "2164080",
    "end": "2175600"
  },
  {
    "text": "an idea that you've been sort of thinking about \na lot, the classifying of the different things? ",
    "start": "2177220",
    "end": "2182440"
  },
  {
    "text": "Part of that was if we realized, if we're only \nlooking at coupling, then everything that is  ",
    "start": "2183100",
    "end": "2188380"
  },
  {
    "text": "monolithic is a single architecture quantum. \nAnd that's what we're really trying to catch   was the smallest scope possible for something \nlike that, because, as you know, it's way too  ",
    "start": "2189220",
    "end": "2199059"
  },
  {
    "text": "easy to wire everything in architecture together. \nSo one good way to determine the static coupling  ",
    "start": "2199060",
    "end": "2204160"
  },
  {
    "text": "in your architecture is to play the experiment \nof, okay, if that thing over there breaks, what  ",
    "start": "2204160",
    "end": "2209680"
  },
  {
    "text": "else breaks? Well, there's your static coupling \nright there. And so a way to think about that,  ",
    "start": "2209680",
    "end": "2215680"
  },
  {
    "text": "that's not all the things but a subset of all the \nthings so I think we're getting with cohesion. And  ",
    "start": "2215680",
    "end": "2222160"
  },
  {
    "text": "of course, we've realized that the more functional \ncohesion you have, the tighter the scope you can  ",
    "start": "2222160",
    "end": "2227920"
  },
  {
    "text": "keep your coupling to. And so I think that's how \nthey really go hand-in-hand, high cohesion allows  ",
    "start": "2227920",
    "end": "2234460"
  },
  {
    "text": "you to limit coupling, and the more that you \nlet cohesion spread out, the more coupling is  ",
    "start": "2234460",
    "end": "2239920"
  },
  {
    "text": "required to restore the semantics of the cohesion.\nIt might be a bit of a leading question, sorry,  ",
    "start": "2239920",
    "end": "2245559"
  },
  {
    "text": "because I had an experience with looking \nat the code base for a bank some years ago,  ",
    "start": "2245560",
    "end": "2250780"
  },
  {
    "text": "the web frontend of a bank. At the end of \nthat, I ran some static analysis here is  ",
    "start": "2250780",
    "end": "2257500"
  },
  {
    "text": "Java code base. And I have like these dependency \nmatrices and said that you've got some good news   and some bad news. The good news is that you've \ngot cohesive software, right? The bad news is  ",
    "start": "2257500",
    "end": "2267579"
  },
  {
    "text": "it's all 75,000 lines of code [inaudible 00:38:42] \nSorry, Rebecca, you were going to say something. ",
    "start": "2267580",
    "end": "2275560"
  },
  {
    "text": "I mean, because that is the problem. I've had \npeople say, the only evolutionary architecture  ",
    "start": "2275560",
    "end": "2282220"
  },
  {
    "text": "is microservices. That isn't true. But because \nthere is this notion of a well-structured monolith  ",
    "start": "2282220",
    "end": "2290680"
  },
  {
    "text": "and where people get into trouble is if \nyou are working in a monolithic code base,  ",
    "start": "2291760",
    "end": "2297880"
  },
  {
    "text": "it is so tempting to just reach \nout over there and get that thing.  ",
    "start": "2297880",
    "end": "2302799"
  },
  {
    "text": "And now, you end up with the kind \nof codebase that you're describing.  ",
    "start": "2303640",
    "end": "2310180"
  },
  {
    "text": "But the thing to realize is that from \nan architectural perspective, our  ",
    "start": "2311080",
    "end": "2318260"
  },
  {
    "text": "ability to move pieces around, whether it be \nmicroservices or whether it be some small seed  ",
    "start": "2319120",
    "end": "2325180"
  },
  {
    "text": "component in a well-structured monolith, is going \nto depend on how well we draw those boundaries.  ",
    "start": "2325180",
    "end": "2331599"
  },
  {
    "text": "If you've got the right kind of boundaries, \nthen you can move the pieces around.   And if you don't, then it's harder \nand harder to move the pieces around. ",
    "start": "2332980",
    "end": "2341680"
  },
  {
    "text": "I think we need to get away from this notion \nthat you can't evolve any architecture that  ",
    "start": "2343000",
    "end": "2350620"
  },
  {
    "text": "isn't purely microservices. I would assert that \nyou cannot evolve a big ball of mud but there  ",
    "start": "2350620",
    "end": "2359440"
  },
  {
    "text": "are a lot of places along that continuum. \nAnd there can be very good reasons for  ",
    "start": "2359440",
    "end": "2367480"
  },
  {
    "text": "deploying something as a well-structured \nmonolith. But I'm going to keep saying the phrase,   well-structured, and it takes a lot of discipline \nand that's where some of these architectural  ",
    "start": "2368020",
    "end": "2378220"
  },
  {
    "text": "unit test fitness functions can come in to help \nenforce that separation so you do keep those clear  ",
    "start": "2379420",
    "end": "2387220"
  },
  {
    "text": "boundaries even though you are in a monolith.\nSo I guess we're going back to something we  ",
    "start": "2387220",
    "end": "2392680"
  },
  {
    "text": "touched on, or maybe touched on \nearlier in this conversation,   which is about, there's a whole range of things \nI could do, there's a whole set of things I could  ",
    "start": "2392680",
    "end": "2404140"
  },
  {
    "text": "measure or I could create tests for. Could you \ngive me as a jobbing senior software engineer  ",
    "start": "2404140",
    "end": "2412059"
  },
  {
    "text": "some advice about where to start? Where should \nI be looking for? What should I be doing to sort  ",
    "start": "2412060",
    "end": "2417340"
  },
  {
    "text": "of put this into practice from a standing start?\nWell, I think the first thing is to identify what  ",
    "start": "2417340",
    "end": "2426820"
  },
  {
    "text": "are those truly critical architectural \ncharacteristics that are going to drive  ",
    "start": "2426820",
    "end": "2433720"
  },
  {
    "text": "your decision-making. For some, security is just \nparamount, or data protection is non-negotiable,  ",
    "start": "2433720",
    "end": "2442900"
  },
  {
    "text": "and just start listing them until \nyou get to the stage where it's like,  ",
    "start": "2444700",
    "end": "2449740"
  },
  {
    "text": "I don't really care between these, \nthat's probably a good place to stop.  ",
    "start": "2451960",
    "end": "2455740"
  },
  {
    "text": "And then when you look at \nsome of the ground up, I mean,   Neal Ford and I have been asked many times, \n\"Can you give me the fitness functions for a  ",
    "start": "2457060",
    "end": "2465400"
  },
  {
    "text": "banking application?\" It's like, no. But as a \ndevelopment organization, you can come up with  ",
    "start": "2465400",
    "end": "2474520"
  },
  {
    "text": "a base of fitness functions from a static analysis \nperspective that reflects your coding standards,  ",
    "start": "2475720",
    "end": "2481900"
  },
  {
    "text": "your preferred idioms, and things of \nthat nature. There's both the top-down,  ",
    "start": "2482500",
    "end": "2492100"
  },
  {
    "text": "what are the big things that I need to worry about \nI have to be able to recover in no less than x?  ",
    "start": "2493120",
    "end": "2500740"
  },
  {
    "text": "And then you've got that base. But when you \nstart to get to the point on that top-down,  ",
    "start": "2502180",
    "end": "2509500"
  },
  {
    "text": "where you can't really make a compelling case \nfor why this is important, that's where you stop.",
    "start": "2509500",
    "end": "2514940"
  },
  {
    "text": "Thank you. I guess, maybe taking a step back   from the discussion, which is brilliant. As I \nsay, it's an amazing book, I learned an awful  ",
    "start": "2514940",
    "end": "2522940"
  },
  {
    "start": "2516000",
    "end": "2717000"
  },
  {
    "text": "lot that I didn't know even after 25 years \nof doing what we do. So thank you for that.  ",
    "start": "2522940",
    "end": "2529839"
  },
  {
    "text": "But I wonder whether we could talk a little \nbit about what's next. What are you working   on next? If you've got any interesting projects \ncoming up, what are you excited about for the  ",
    "start": "2530740",
    "end": "2540100"
  },
  {
    "text": "future? Maybe, Neal, we'll start with you.\nWorking on \"Head First Software Architecture,\"   which is an interesting book, because \nit's almost like writing a graphic novel  ",
    "start": "2540100",
    "end": "2547780"
  },
  {
    "text": "about software architecture. So it's an \ninteresting challenge. So myself and Mark  ",
    "start": "2547780",
    "end": "2552820"
  },
  {
    "text": "Richards who wrote \"The Fundamentals of Software \nArchitecture,\" we're teaming up with Raju Gandhi   who just wrote \"Head First Git\" which is \nthe next generation of \"Head First\" books,  ",
    "start": "2552820",
    "end": "2562539"
  },
  {
    "text": "which is really fantastic and a great subject for \na \"Head First\" book. And so we're working heavily  ",
    "start": "2562540",
    "end": "2569680"
  },
  {
    "text": "on \"Head First Software Architecture\" right now. \nThat's the next book thing that I'm going after. ",
    "start": "2569680",
    "end": "2575140"
  },
  {
    "text": "Which will probably take you about \ntwo weeks if I may know you at all.  It's hard. You have to come up with a unique title \nfor every page of the book. So that's kind of  ",
    "start": "2575140",
    "end": "2586780"
  },
  {
    "text": "painful, but it's an interesting challenge.\nDo they have any rules about allowing you  ",
    "start": "2586780",
    "end": "2592360"
  },
  {
    "text": "to use ChatGPT for that or is that a problem?\nWell, you do have to audition even if you're an  ",
    "start": "2592360",
    "end": "2599860"
  },
  {
    "text": "experienced author because it's a very specific \nidiom so I don't think ChatGPT would make it  ",
    "start": "2599860",
    "end": "2606340"
  },
  {
    "text": "past the governors for that style.\nRebecca, how about you? What's  ",
    "start": "2606340",
    "end": "2614440"
  },
  {
    "text": "new and exciting? What's coming next?\nWell, as I said in my intro, I've been   interested and involved in artificial intelligence \nfor decades. And so I've seen a lot of AI winters.  ",
    "start": "2614440",
    "end": "2626980"
  },
  {
    "text": "And so I'm following quite closely what looks \nto be perhaps another AI spring or maybe even  ",
    "start": "2628060",
    "end": "2633820"
  },
  {
    "text": "summer. And trying to understand, particularly \nwith a responsible technology lens on it,  ",
    "start": "2633820",
    "end": "2642160"
  },
  {
    "text": "how do we use these things. What possibilities \nare these large language models opening up for us?  ",
    "start": "2642160",
    "end": "2650140"
  },
  {
    "text": "And little things like how do we control \nhallucinations? But also, how do we  ",
    "start": "2651220",
    "end": "2656260"
  },
  {
    "text": "exploit its power of it? So I'm in the cautiously \noptimistic camp, I would say, on this whole area  ",
    "start": "2656260",
    "end": "2665260"
  },
  {
    "text": "but it's fascinating to see where \nMoore's Law has gotten us in terms of  ",
    "start": "2666340",
    "end": "2672220"
  },
  {
    "text": "the power of these AI systems.\nI read something, I can't remember where it was,  ",
    "start": "2672940",
    "end": "2678280"
  },
  {
    "text": "but a phrase that I'd not come across before \nin relation to these large language models,  ",
    "start": "2678280",
    "end": "2684040"
  },
  {
    "text": "which was people being worried about something \nthat they called I think, capability overhang. I  ",
    "start": "2684040",
    "end": "2689680"
  },
  {
    "text": "don't know if you've heard this phrase, it's \nthis idea that the more they're being used,  ",
    "start": "2689680",
    "end": "2695079"
  },
  {
    "text": "these tools, the more things that they appear to \ndo that they shouldn't be capable of doing. And  ",
    "start": "2695620",
    "end": "2701740"
  },
  {
    "text": "that there are these certain capabilities that \nthese new tools have, and we just don't know   what they are yet. I mean, it's a fascinating \ntime to be in high school I suspect, yeah. ",
    "start": "2701740",
    "end": "2712900"
  },
  {
    "text": "Yes, yes, yes.\nCool. I think we'll probably wrap it up   at that point. So I'm just going to say thank you \nso much, Dr. Parsons. I'm being very formal. We've  ",
    "start": "2712900",
    "end": "2723100"
  },
  {
    "start": "2717000",
    "end": "2768000"
  },
  {
    "text": "known each other for a very long time. Thank you \nvery much, Rebecca. Thank you very much, Neal, for  ",
    "start": "2723100",
    "end": "2729340"
  },
  {
    "text": "joining us to talk about all things evolutionary.\nAlways fun. Thank you, James. Thank  ",
    "start": "2729340",
    "end": "2736120"
  },
  {
    "text": "you, Neal.\nGoodbye.",
    "start": "2761620",
    "end": "2762361"
  }
]