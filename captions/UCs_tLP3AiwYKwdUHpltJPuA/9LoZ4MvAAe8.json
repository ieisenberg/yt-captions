[
  {
    "text": "all right welcome how's everybody doing good excellent so uh this is",
    "start": "599",
    "end": "8559"
  },
  {
    "text": "shipping and production web app in Elm I'm Richard Feldman and um so people come to functional programming for lots",
    "start": "8559",
    "end": "14240"
  },
  {
    "text": "of different reasons uh in some cases it's the beauty of it the way you can express it mathematically I come to",
    "start": "14240",
    "end": "20119"
  },
  {
    "text": "functional programming because of this I like to build things I like to build big things and even when I set out to build",
    "start": "20119",
    "end": "26119"
  },
  {
    "text": "something small often I find that it evolves into something big something elaborate something something with a lot of nuance to it and as I've done this",
    "start": "26119",
    "end": "33520"
  },
  {
    "text": "over the years i' I've had an experience over and over where I set out to build something like this I end up with",
    "start": "33520",
    "end": "39480"
  },
  {
    "text": "something like this um in in short I come to functional",
    "start": "39480",
    "end": "44640"
  },
  {
    "text": "programming because I just want my code to stop breaking all the time and um I want to share with you an experience",
    "start": "44640",
    "end": "50640"
  },
  {
    "text": "I've had uh with a particular piece of code and essentially um this is a",
    "start": "50640",
    "end": "56199"
  },
  {
    "text": "writing app that I built for myself back in 2011 in coffee script and um what it was was basically I had",
    "start": "56199",
    "end": "63440"
  },
  {
    "text": "this experience where I had written about 80,000 words of a novel I said you know what um I'm sick of doing this",
    "start": "63440",
    "end": "69040"
  },
  {
    "text": "offline there are better ways to do this I'm going to put this into Google Docs so I did and then the tab crashed and it",
    "start": "69040",
    "end": "75640"
  },
  {
    "text": "turns out if you try to put an 880,000 word novel into Google Docs or at least back then um it was not a good",
    "start": "75640",
    "end": "81240"
  },
  {
    "text": "experience uh you know the first thing that happened was I got the a snap and then eventually I figured out a a way to get it to actually upload and then it it",
    "start": "81240",
    "end": "88400"
  },
  {
    "text": "was like kind of go get a coffee and it was really slow um so I tried some of the other Alternatives out there and",
    "start": "88400",
    "end": "93960"
  },
  {
    "text": "eventually I was like none of these are quite what I want and I thought you know I'm a programmer I'm going to scratch my own itch I'm going to program my own",
    "start": "93960",
    "end": "99240"
  },
  {
    "text": "solution and this is it um this is actually not what I originally came up with this is after several iterations",
    "start": "99240",
    "end": "104719"
  },
  {
    "text": "but you know I came up with a bunch of different things I got like uh editing in the main area here uh I can say",
    "start": "104719",
    "end": "110680"
  },
  {
    "text": "editor and stuff it syncs the outline for me over here I can add a chapter uh hello Lambda",
    "start": "110680",
    "end": "118719"
  },
  {
    "text": "Jam um um and scroll around I got this cool like full screen distraction free writing mode where it fades out the UI",
    "start": "118719",
    "end": "125560"
  },
  {
    "text": "and I can just focus on the words and nothing else and then you know when I want the UI back C here and so forth",
    "start": "125560",
    "end": "130720"
  },
  {
    "text": "I've got a notes system I can create notes and search them and everything all works offline um so I could write with",
    "start": "130720",
    "end": "136560"
  },
  {
    "text": "it on an airplane so that's all really cool um but I ran into this problem um",
    "start": "136560",
    "end": "142160"
  },
  {
    "text": "and the problem I think really boiled down to the architecture that I chose uh to build this in so the architecture I",
    "start": "142160",
    "end": "148680"
  },
  {
    "text": "did was sort of venerable front-end architecture goo um used all over the place very popular uh if you're not",
    "start": "148680",
    "end": "155319"
  },
  {
    "text": "familiar with this term this is a giant imperative mess of jQuery um remains",
    "start": "155319",
    "end": "160920"
  },
  {
    "text": "popular to this day uh and uh basically the symptoms of my problem were that",
    "start": "160920",
    "end": "167400"
  },
  {
    "text": "paste broke I couldn't paste things in my novel editing software which is kind",
    "start": "167400",
    "end": "172440"
  },
  {
    "text": "of undesirable when you're trying to write a novel so I would go to paste something copy would work but I'd go to",
    "start": "172440",
    "end": "177879"
  },
  {
    "text": "paste it and then I get a runtime exception I was like oh um that's bad well let me fix that so I went in and I",
    "start": "177879",
    "end": "183720"
  },
  {
    "text": "wrote a fix and it was great except that the fix broke something else I was like",
    "start": "183720",
    "end": "189319"
  },
  {
    "text": "oh uh all right that's no good forget that I'll go back and I'll revert that commit and then uh go back to the world where past is broken I'll just fix it a",
    "start": "189319",
    "end": "195959"
  },
  {
    "text": "different way so I did but that broke a different thing So eventually I was like",
    "start": "195959",
    "end": "201200"
  },
  {
    "text": "okay you know what I I don't need that I I'll just work around this I'm I've built this in the browser so I'll just go to inspect element when I needed to",
    "start": "201200",
    "end": "207560"
  },
  {
    "text": "to copy and paste something I'll just copy the elements and just cut them out and then move them to somewhere else in the Dom I was literally doing this while",
    "start": "207560",
    "end": "214560"
  },
  {
    "text": "editing writing thousands of words in this thing um and eventually I had to have a self- intervention and say self",
    "start": "214560",
    "end": "220159"
  },
  {
    "text": "this is no way to live what are you doing um you need to rewrite this thing you need to re architect um fortunately",
    "start": "220159",
    "end": "227200"
  },
  {
    "text": "between when I started building this and when I ended up at this point which was of course after many many iterations the",
    "start": "227200",
    "end": "233959"
  },
  {
    "text": "the what I just showed you was not the initial design the reason it got that way was because I'd architected it this",
    "start": "233959",
    "end": "239360"
  },
  {
    "text": "way and I'd revised it as I'd learned more about the use cases I'd learned more about what I liked about the program i' revised the design and the",
    "start": "239360",
    "end": "246439"
  },
  {
    "text": "problem was just that the architecture didn't survive that redesigning process it ended up with a a giant mess where I",
    "start": "246439",
    "end": "252040"
  },
  {
    "text": "couldn't maintain things so I said okay cool what have I learned in these intervening years that could let me do a",
    "start": "252040",
    "end": "258120"
  },
  {
    "text": "better job next time when I'm rewriting it and one of the most important ones was this talk simple Made Easy this is a",
    "start": "258120",
    "end": "265080"
  },
  {
    "text": "talk that I saw between when I started writing this and when I decided to rewrite it um if you haven't seen this",
    "start": "265080",
    "end": "270240"
  },
  {
    "text": "talk I highly recommend it rich hickey absolutely changed the way I thought about programming really can't recommend",
    "start": "270240",
    "end": "275800"
  },
  {
    "text": "it enough um and one of the things he talks about in this talk is this notion of simple um simple being an objective",
    "start": "275800",
    "end": "281960"
  },
  {
    "text": "notion you can look at two things and say this one is simpler than the other or this is more complex than the other",
    "start": "281960",
    "end": "287320"
  },
  {
    "text": "doesn't matter who you are it's just an objective notion um he contrasts this",
    "start": "287320",
    "end": "293039"
  },
  {
    "text": "with easy which he defines as sort of near to your skill set so something that's easy for you might be difficult",
    "start": "293039",
    "end": "298919"
  },
  {
    "text": "for me or if I Versa that's an important distinction to make because Simplicity is something that you can just measure you can compare two things and say no",
    "start": "298919",
    "end": "305320"
  },
  {
    "text": "matter who you are this thing is simpler than this or vice versa but easy versus difficult is something that can change",
    "start": "305320",
    "end": "311560"
  },
  {
    "text": "over time so simple he defines as sort of the interleaving of Concepts or sort of the",
    "start": "311560",
    "end": "317639"
  },
  {
    "text": "lack thereof so if you have a large system but each of the components can sort of be isolated and you can just",
    "start": "317639",
    "end": "322960"
  },
  {
    "text": "look at it and say Here's what's going on with this thing and not have to worry about it impacting the rest of the components that's a simple system even",
    "start": "322960",
    "end": "329319"
  },
  {
    "text": "if they a lot of these components in contrast a complex system would be one where you have lots of interdependencies",
    "start": "329319",
    "end": "335080"
  },
  {
    "text": "lots of interleaving um changing one thing like hypothetically just picking an example at random if you were to try",
    "start": "335080",
    "end": "340280"
  },
  {
    "text": "to fix paste and it were to break other parts of your system that would be a complex system um you don't want that",
    "start": "340280",
    "end": "347039"
  },
  {
    "text": "it's uh it's problematic but in contrast something that's easy is you know uh nearer to",
    "start": "347039",
    "end": "352520"
  },
  {
    "text": "your current skill set importantly familiarity can grow over time but complexity is forever so",
    "start": "352520",
    "end": "359240"
  },
  {
    "text": "something that's difficult for me now can become easy just by my learning more things but even if I learn more things I",
    "start": "359240",
    "end": "366280"
  },
  {
    "text": "can't make a complex system simpler just by learning I can't just change myself and just make that become less uh",
    "start": "366280",
    "end": "373039"
  },
  {
    "text": "complex the only way to make it less complex is to change the code um but I actually can grow more familiar with",
    "start": "373039",
    "end": "379280"
  },
  {
    "text": "things things that are currently difficult for me can become easier over time an important distinction because simpler code is more",
    "start": "379280",
    "end": "386280"
  },
  {
    "text": "maintainable so that was really what I was looking for here I I sort of realized you know based on his talk that",
    "start": "386280",
    "end": "391599"
  },
  {
    "text": "the problems I was having was because my code base was too complex so I said when I rewrite this I want I want Simplicity",
    "start": "391599",
    "end": "397440"
  },
  {
    "text": "to be an explicit goal I don't want to sacrifice features I don't want to change the design I like the design I've ended up with after all these iterations",
    "start": "397440",
    "end": "404319"
  },
  {
    "text": "but I want simpler code so how do I get simpler code so one of the tools that I",
    "start": "404319",
    "end": "409680"
  },
  {
    "text": "learned you know as as I was going along was this uh this idea of uh stateless",
    "start": "409680",
    "end": "415520"
  },
  {
    "text": "functions so I'm kind of I was like all right I'm interested in this what is what is a stateless function uh AKA pure",
    "start": "415520",
    "end": "421280"
  },
  {
    "text": "function AKA referentially transparent function whatever you want to call it but the point is that these things minimize interleaving and the way they",
    "start": "421280",
    "end": "428000"
  },
  {
    "text": "do that is because they have this characteristic that whatever you pass in whatever inputs you pass in be they",
    "start": "428000",
    "end": "433080"
  },
  {
    "text": "arguments or things in the enclosing scope um all the function does is look at its inputs and then return an output",
    "start": "433080",
    "end": "440160"
  },
  {
    "text": "value just look at its inputs return a value it has no impact on the outside world it doesn't have any side effects",
    "start": "440160",
    "end": "446280"
  },
  {
    "text": "and it doesn't read from the outside world so what's important about those is that you can always consider them an",
    "start": "446280",
    "end": "451440"
  },
  {
    "text": "isolation you can just look at them and say if I run this 20 times with the same inputs it's always going to give me the same return value and it's not going to",
    "start": "451440",
    "end": "457720"
  },
  {
    "text": "do anything else I was like cool that's interesting okay so around this time I",
    "start": "457720",
    "end": "463199"
  },
  {
    "text": "said all right this sounds interesting this sounds like it will make my life easier it sounds like it will solve some of these problems I've been having so",
    "start": "463199",
    "end": "469479"
  },
  {
    "text": "why don't I just start using it more in the language I've already got coffee script so I did so I started writing",
    "start": "469479",
    "end": "474599"
  },
  {
    "text": "coffee script in a functional style and actually the first conference I ever spoke at was that the Lambda Jam in",
    "start": "474599",
    "end": "480400"
  },
  {
    "text": "Chicago and I was talking about functional coffee script because that's what I had started doing um and",
    "start": "480400",
    "end": "486280"
  },
  {
    "text": "essentially uh what I found was that this did improve things it made life better uh I stopped having as many of",
    "start": "486280",
    "end": "491919"
  },
  {
    "text": "the problems as I was having before with things impacting other things unexpectedly but uh but the other thing",
    "start": "491919",
    "end": "499599"
  },
  {
    "text": "that happened along the way was that react came out and flux came out with it and so this sort of enabled me to write",
    "start": "499599",
    "end": "506319"
  },
  {
    "text": "more of my code in this style I could instead of just using using stateless functions for whatever pors of my code",
    "start": "506319",
    "end": "512279"
  },
  {
    "text": "had to do with logic I could actually start using it with the UI that was really exciting to me it's kind of like",
    "start": "512279",
    "end": "518839"
  },
  {
    "text": "all right this is this is getting more and more interesting the more and more of my code that I'm doing in this style",
    "start": "518839",
    "end": "524720"
  },
  {
    "text": "the better and better things are getting the fewer and fewer bugs I'm having so at this point sort of the next logical",
    "start": "524720",
    "end": "530080"
  },
  {
    "text": "question is where can I go from here how can I get more of this and more specifically um you know what can I get",
    "start": "530080",
    "end": "537600"
  },
  {
    "text": "that's sort of fundamentally better than what I'm doing right now what I realized is that what I've been doing so far was",
    "start": "537600",
    "end": "543839"
  },
  {
    "text": "just discipline I'm saying okay I can write functions with side effects but I'm choosing not to I can mutate State",
    "start": "543839",
    "end": "549440"
  },
  {
    "text": "all over the place but I'm choosing not to the trouble is that discipline is hard and invariance are easy um it's",
    "start": "549440",
    "end": "555640"
  },
  {
    "text": "difficult to do that on purpose all the time when you have access to other things because accidents happen you make",
    "start": "555640",
    "end": "561320"
  },
  {
    "text": "mistakes um if I didn't make mistakes I probably wouldn't have had to go down this road at all in the first place but the problem is that as programmers we",
    "start": "561320",
    "end": "567760"
  },
  {
    "text": "make mistakes sometimes you think you have a function that has no side effects but if it's really easy to introduce",
    "start": "567760",
    "end": "573040"
  },
  {
    "text": "them you might accidentally introduce one and then you have a bug later on where you're like I don't understand how this is possible how could this be",
    "start": "573040",
    "end": "579040"
  },
  {
    "text": "happening this function's stateless or so I thought but it turns out it actually wasn't it turns out that you",
    "start": "579040",
    "end": "584360"
  },
  {
    "text": "accidentally made some uh call that modified state or something that had a side effect or maybe you were using a",
    "start": "584360",
    "end": "591279"
  },
  {
    "text": "library which you assumed was stateless but which in fact stopped being stateless or maybe after an upgrade it",
    "start": "591279",
    "end": "596880"
  },
  {
    "text": "stopped being stateless it's hard um but invariants are easy so I started saying",
    "start": "596880",
    "end": "601959"
  },
  {
    "text": "to myself okay how can I get more invariants how can I make my life even easier by making it easier to use this",
    "start": "601959",
    "end": "609000"
  },
  {
    "text": "style that's brought Simplicity to my code trouble is over 200 languages",
    "start": "609000",
    "end": "614279"
  },
  {
    "text": "compiled to JavaScript so I couldn't just say oh great I'll use that one that will make my life better okay we're",
    "start": "614279",
    "end": "619480"
  },
  {
    "text": "moving on um I had to sort of narrow down the field a lot so I set out a set of criteria for myself some deal",
    "start": "619480",
    "end": "626399"
  },
  {
    "text": "breakers some things that I knew were not going to be okay um um one is just slow comp you know bloated compiled",
    "start": "626399",
    "end": "632399"
  },
  {
    "text": "JavaScript um I I care a lot about user experience and particular when I'm building something to use for myself um",
    "start": "632399",
    "end": "639120"
  },
  {
    "text": "so something that's going to compile to bloated slow JavaScript is problematic because that's a performance problem I",
    "start": "639120",
    "end": "645560"
  },
  {
    "text": "can't optimize out uh if I end up writing a large program and then I find yeah this is slow and I can't make it",
    "start": "645560",
    "end": "651519"
  },
  {
    "text": "any faster that's a huge deal for me because then essentially the only way to get the performance I want is to scrap it and start over so that's no good",
    "start": "651519",
    "end": "658519"
  },
  {
    "text": "another deal breaker uh poor interoperability with JavaScript libraries so uh one of the things that",
    "start": "658519",
    "end": "663600"
  },
  {
    "text": "dreamwriter uses is uh because it needs to work offline everything needs to work in the browser which includes the note",
    "start": "663600",
    "end": "669399"
  },
  {
    "text": "system which includes full text indexing um if you want full text search like the feature which I certainly do uh you",
    "start": "669399",
    "end": "676160"
  },
  {
    "text": "don't want to write that Library yourself there's a lot of work there so I use lunar.gg um so it's important that",
    "start": "676160",
    "end": "681560"
  },
  {
    "text": "whatever language you're using is able to talk easily to JavaScript so that you can leverage this enormous ecosystem of",
    "start": "681560",
    "end": "687680"
  },
  {
    "text": "libraries and not have to reinvent all the complicated things yourself and then the third was that I",
    "start": "687680",
    "end": "692959"
  },
  {
    "text": "didn't want something that was unlikely to develop a community um a lot of people create languages sort of in their",
    "start": "692959",
    "end": "698160"
  },
  {
    "text": "spare time just for fun just to experiment and I know that there's a danger that what you get really excited",
    "start": "698160",
    "end": "704800"
  },
  {
    "text": "about right now might several months down the line uh become abandoned and not make any forward progress so all of",
    "start": "704800",
    "end": "711040"
  },
  {
    "text": "the things that you dislike about it or that are problematic or going to stay in that state and perhaps even worse you",
    "start": "711040",
    "end": "716600"
  },
  {
    "text": "might discover that all the code you wrote is just not worth keeping anymore and you need to throw it out for something else didn't want to go down",
    "start": "716600",
    "end": "722399"
  },
  {
    "text": "any of those roads okay so with those in mind I sort of had two categories of languages that",
    "start": "722399",
    "end": "727600"
  },
  {
    "text": "were left one was just this is Javascript but less painful so like Dart typescript copy script so copy script is",
    "start": "727600",
    "end": "734199"
  },
  {
    "text": "what I was already on so that was already an option was just okay maybe maybe this is as good as it gets maybe I stay with copy script and the other",
    "start": "734199",
    "end": "740720"
  },
  {
    "text": "options were sort of um less painful in various ways than JavaScript but importantly Dart and typescript didn't",
    "start": "740720",
    "end": "746600"
  },
  {
    "text": "really offer anything that had to do with this idea of simplic they offered you know sort of cleaner semantics in",
    "start": "746600",
    "end": "752279"
  },
  {
    "text": "some cases and they offered you know type checking and things like that but the pain points that I had had to do",
    "start": "752279",
    "end": "757519"
  },
  {
    "text": "with complexity versus Simplicity I wanted invariance around side effects and immutability um and neither of them",
    "start": "757519",
    "end": "763320"
  },
  {
    "text": "really offered much in that department so I looked further um functional languages that",
    "start": "763320",
    "end": "768680"
  },
  {
    "text": "easily talk to JavaScript but are very different semantically that's Elm pure script and closure script um Elm at the",
    "start": "768680",
    "end": "775480"
  },
  {
    "text": "time I ruled out pretty much immediately because it seemed primarily to do with uh Gra graphics and games they had a lot of demos around that but really not much",
    "start": "775480",
    "end": "782320"
  },
  {
    "text": "to do with the types of HTML stuff that I was doing um this is an Elm talk by",
    "start": "782320",
    "end": "787800"
  },
  {
    "text": "the way but we'll come back to that um then uh then there was pure script which had a lot in common with hll obviously",
    "start": "787800",
    "end": "794079"
  },
  {
    "text": "and uh and a lot of interesting semantics and closure script so I sort of narrowed it down to Pure script and",
    "start": "794079",
    "end": "799519"
  },
  {
    "text": "closure script um or of course there was the default case of just staying with coffee script so closure script",
    "start": "799519",
    "end": "805800"
  },
  {
    "text": "definitely had a flourishing Community great Community closure Community is just a model programming Community um",
    "start": "805800",
    "end": "811720"
  },
  {
    "text": "trivial JavaScript interrupt you just call stuff and it works very nice um but",
    "start": "811720",
    "end": "816920"
  },
  {
    "text": "it allowed side effects and mutation it had a lot of immutability and uh the core apis are designed the core",
    "start": "816920",
    "end": "823279"
  },
  {
    "text": "libraries are designed with immutable apis um but you can still do mutation you can still have side effects so it's",
    "start": "823279",
    "end": "829519"
  },
  {
    "text": "not an invariant it just makes it easier to work in that style so that had its appeal but uh I was more interested in",
    "start": "829519",
    "end": "835959"
  },
  {
    "text": "pure script which has 100% immutability strong invariant has Type inference and",
    "start": "835959",
    "end": "841120"
  },
  {
    "text": "type inference is something that sort of interested me um my path as a as a type versus Dynamic programmer I started off",
    "start": "841120",
    "end": "848040"
  },
  {
    "text": "in typed languages so C++ Java actually Visual Basic which was um typed any VB",
    "start": "848040",
    "end": "855079"
  },
  {
    "text": "fans in the house um and uh and then eventually I came across Dynamic languages and found it was very",
    "start": "855079",
    "end": "860959"
  },
  {
    "text": "liberating because I didn't have to be like this is a string and this is an INT",
    "start": "860959",
    "end": "866000"
  },
  {
    "text": "like I know what it is just just just work um of course later on I found some drawbacks to that but I I do remember",
    "start": "866000",
    "end": "872800"
  },
  {
    "text": "the pain of having to deal with this incredible verbosity and feeling like I had to hold the compiler's hand um when",
    "start": "872800",
    "end": "878880"
  },
  {
    "text": "I knew what I was doing um so type inference was appealing to me because it was like oh well I can just write my",
    "start": "878880",
    "end": "884480"
  },
  {
    "text": "code normally I don't have to be extremely verbose about it um I can only be verbose when I think it's warranted",
    "start": "884480",
    "end": "890680"
  },
  {
    "text": "and the compiler is still going to catch all my mistakes for me sounds like The Best of Both Worlds so I was interested in that but I'd not really done anything",
    "start": "890680",
    "end": "896480"
  },
  {
    "text": "serious with it yet um pure Scripts Java interrupt very straightforward you just add a type signature write some",
    "start": "896480",
    "end": "902279"
  },
  {
    "text": "JavaScript codes say I promise this is what its type is and go from there um functions cannot have side effects I put",
    "start": "902279",
    "end": "908839"
  },
  {
    "text": "an asteris next to that because of the previous point which is that technically you could write some JavaScript",
    "start": "908839",
    "end": "914199"
  },
  {
    "text": "interrupt code and say I promise it has this type and lie um and it's going to type check and it's going to you know",
    "start": "914199",
    "end": "920079"
  },
  {
    "text": "claim that it has no side effects but in fact some side effects snuck in which is less scary for me than it is um from the",
    "start": "920079",
    "end": "925759"
  },
  {
    "text": "perspective of using third party libraries um I know that I would choose not to do that but I was a little bit worried that somebody else might write a",
    "start": "925759",
    "end": "932319"
  },
  {
    "text": "library that oh just you know no big deal we'll just sneak in a side effect here nobody will notice and then it",
    "start": "932319",
    "end": "937399"
  },
  {
    "text": "would bite me somehow but um nevertheless I was like okay we're doing this we're going to bew writing P script",
    "start": "937399",
    "end": "943720"
  },
  {
    "text": "this is going to happen um so as previously mentioned at this point I was on react and flux so I was like cool um",
    "start": "943720",
    "end": "949759"
  },
  {
    "text": "let me go see what the pure script react library is oh there isn't one yet there",
    "start": "949759",
    "end": "955399"
  },
  {
    "text": "is today but there wasn't at the time so I was like oh okay um so I I sort of followed some um",
    "start": "955399",
    "end": "962880"
  },
  {
    "text": "you know repositories and and just sort of watched and sort of waited eagerly for um for someone to come out with one",
    "start": "962880",
    "end": "969000"
  },
  {
    "text": "so that I could uh do another rewrite of dreamwriter and and you know Embrace this this fully invariant based",
    "start": "969000",
    "end": "975399"
  },
  {
    "text": "functional programming and while I was waiting for that a blog post came out it",
    "start": "975399",
    "end": "981160"
  },
  {
    "text": "was called blazing fast HTML and Elm it's kind of like interesting that was that language that I wrote off because",
    "start": "981160",
    "end": "987319"
  },
  {
    "text": "it didn't seem like it supported my use case and specifically what this blog post was about was a new library for Elm",
    "start": "987319",
    "end": "994519"
  },
  {
    "text": "that basically was like react and flux except with all the invariants I wanted and the really cool part was this a",
    "start": "994519",
    "end": "1002199"
  },
  {
    "text": "benchmark for to-do MVC so if you're not familiar with to-do MVC it's basically this sort of sample Simple app that",
    "start": "1002199",
    "end": "1009160"
  },
  {
    "text": "demonstrates a lot of common UI paradigms um where you just build a to-do list that you can that the user",
    "start": "1009160",
    "end": "1014600"
  },
  {
    "text": "can modify and uh it's intended to be used for comparing different JavaScript",
    "start": "1014600",
    "end": "1019639"
  },
  {
    "text": "Frameworks but it also works with different languages so Elm uh not only implemented",
    "start": "1019639",
    "end": "1025678"
  },
  {
    "text": "to do MVC using this new framework but in fact benchmarked it against a bunch of others and uh so some things that",
    "start": "1025679",
    "end": "1033000"
  },
  {
    "text": "surprised me one despite using the same kind of stylist react it actually benchmarked faster than react and two it",
    "start": "1033000",
    "end": "1038760"
  },
  {
    "text": "actually did better than M which is closure scripts um library that wraps react but actually adds certain",
    "start": "1038760",
    "end": "1044280"
  },
  {
    "text": "optimizations built in based on the fact that it knows it's working with a mutable data structure and can check",
    "start": "1044280",
    "end": "1049720"
  },
  {
    "text": "things faster so the only library that did better than Elm is mercury which is sort of like the let's assume",
    "start": "1049720",
    "end": "1056520"
  },
  {
    "text": "everything's immutable but it's actually not immutable so if you mutate something you're on your own um which didn't",
    "start": "1056520",
    "end": "1062600"
  },
  {
    "text": "really sound like what I wanted uh a little bit uh error prone perhaps I don't know I haven't used it but um it",
    "start": "1062600",
    "end": "1068919"
  },
  {
    "text": "it scared me off sufficiently but I was really interested in this this it seemed like I could get",
    "start": "1068919",
    "end": "1074080"
  },
  {
    "text": "all the invariance I wanted and really good performance and right using the architecture that I want what's not to",
    "start": "1074080",
    "end": "1080720"
  },
  {
    "text": "like so I said okay well let's let's take a look at their JavaScript interop story um and the way Elm interacts with",
    "start": "1080720",
    "end": "1087080"
  },
  {
    "text": "JavaScript is really interesting I've never seen anything like this it uses this system called ports which basically treats your Elm code and your JavaScript",
    "start": "1087080",
    "end": "1093720"
  },
  {
    "text": "code with sort of a client server relationship where you're only allowed to talk between the two using immutable data just raw data you have this sort of",
    "start": "1093720",
    "end": "1101120"
  },
  {
    "text": "Pub sub communication system so to give the example I had that little notes sidebar up in the upper right um what uh",
    "start": "1101120",
    "end": "1108360"
  },
  {
    "text": "this thing right up here search notes so when I type something into that I'm using lunar.gg to search the full text",
    "start": "1108360",
    "end": "1115200"
  },
  {
    "text": "index of all your notes so I'll type something in there and I'll say hamburger and I want to get back all the notes that have the word hamburger in",
    "start": "1115200",
    "end": "1121400"
  },
  {
    "text": "them so I type it in and Elm says okay great there's that string hamburger I'm going to send that out to through a port",
    "start": "1121400",
    "end": "1127280"
  },
  {
    "text": "to JavaScript I'm going to broadcast that and then on the JavaScript side I have some little JavaScript glue code that says oh I'm listening for events",
    "start": "1127280",
    "end": "1134159"
  },
  {
    "text": "got it you got the string hamburger you want to search for that Go pass that off to lunar get the results and then",
    "start": "1134159",
    "end": "1139760"
  },
  {
    "text": "package those up again as just data and send that back to Elm then Elm says okay got the search results Roger that now",
    "start": "1139760",
    "end": "1145919"
  },
  {
    "text": "I'll render the search results in the UI and the important distinction here is that at no point are we actually sharing",
    "start": "1145919",
    "end": "1151120"
  },
  {
    "text": "code with JavaScript so all of your Elm code respects all of elm's and variance the whole time all of your JavaScript",
    "start": "1151120",
    "end": "1157159"
  },
  {
    "text": "code is the wild west that it usually is but you don't have any mixing between the two you don't have to worry about any of your invariance breaking in Elm",
    "start": "1157159",
    "end": "1165039"
  },
  {
    "text": "as a result of stuff that happened in JavaScript really nice",
    "start": "1165039",
    "end": "1170720"
  },
  {
    "text": "okay so what do we have overall here so we have 100% immutability great that's what I wanted have 100% type inference",
    "start": "1171200",
    "end": "1178159"
  },
  {
    "text": "great also what I wanted we have easy JS interop but it actually preserves those invariant there's no asterisk great and",
    "start": "1178159",
    "end": "1184760"
  },
  {
    "text": "functions have no side effects all right then I found out about",
    "start": "1184760",
    "end": "1190120"
  },
  {
    "text": "this the time traveling debugger if you haven't seen this I recommend going to the elm website and checking it out I",
    "start": "1190120",
    "end": "1196159"
  },
  {
    "text": "don't have time to do a demo today but it's awesome it blew my mind and it's like some Brett Victor stuff seriously",
    "start": "1196159",
    "end": "1202159"
  },
  {
    "text": "check it out cuz it's really cool um okay so I was like I'm sold I got to try",
    "start": "1202159",
    "end": "1207600"
  },
  {
    "text": "this I'm I'm doing it I'm going to rewrite dreamwriter and Elm and I did um all of this you can check it out at",
    "start": "1207600",
    "end": "1213240"
  },
  {
    "text": "dreamwriter doco this is uh this is Elm and it's open source so you can read the elm code if you'd like um okay so uh to",
    "start": "1213240",
    "end": "1223039"
  },
  {
    "text": "do this I had to go from my original architecture of giant imperative mess of jQuery all the way over to the goal",
    "start": "1223039",
    "end": "1229400"
  },
  {
    "text": "architecture of purely functional Elm obviously not quite a one toone mapping there um fortunately along the way um I",
    "start": "1229400",
    "end": "1236880"
  },
  {
    "text": "had sort of an intermediate architecture which was to take the original thing and just rearchitecturing",
    "start": "1236880",
    "end": "1243120"
  },
  {
    "text": "things in the middle of functions or having side effects in the middle of functions it wasn't as big of a deal",
    "start": "1254440",
    "end": "1259799"
  },
  {
    "text": "because most of my functions already respected that using discipline so it's very important that I anticipated",
    "start": "1259799",
    "end": "1265520"
  },
  {
    "text": "invariance while doing this and I recommend that if you're going the same route if you're going to be transitioning from something that's very",
    "start": "1265520",
    "end": "1271559"
  },
  {
    "text": "imperative over to something that's purely functional consider rearching it first with these invariants in mind I",
    "start": "1271559",
    "end": "1277320"
  },
  {
    "text": "think it's going to make the process a lot easier because it certainly did for me um so let's look at a little bit of",
    "start": "1277320",
    "end": "1283720"
  },
  {
    "text": "code here um this is some Elm code this uh essentially renders some some of the",
    "start": "1283720",
    "end": "1288760"
  },
  {
    "text": "code on dreamwriter I've simplified things a little bit so that it fits on a slide but basically can everybody see",
    "start": "1288760",
    "end": "1294000"
  },
  {
    "text": "that okay all right um so this is not a template this is not a special uh syntax",
    "start": "1294000",
    "end": "1300000"
  },
  {
    "text": "of any sort this is just plain vanilla Elm code these are just Elm function calls um as it happens Elm has a very",
    "start": "1300000",
    "end": "1306880"
  },
  {
    "text": "nice syntax that is sort of conducive to dsls and this kind of reminds me of using things like haml um where you sort",
    "start": "1306880",
    "end": "1312400"
  },
  {
    "text": "of declaratively Nest your uh your Dom elements so uh this thing up here div is",
    "start": "1312400",
    "end": "1317919"
  },
  {
    "text": "just a function called div it takes two arguments the first is a list of attributes which we put in square braces",
    "start": "1317919",
    "end": "1324320"
  },
  {
    "text": "and the second is a list of child Elements which also go in square braces so that first set of square braces we're",
    "start": "1324320",
    "end": "1330039"
  },
  {
    "text": "saying okay great uh we have a list of attributes in this case we just have a class attribute we could have put a bunch others called sidebar um see later",
    "start": "1330039",
    "end": "1337520"
  },
  {
    "text": "on we have a span instead of a div also just a function call which has an ID of a new note button because it's the new",
    "start": "1337520",
    "end": "1343640"
  },
  {
    "text": "note button and I want to style that with CSS um and then it's got a click Handler in there onclick new note and",
    "start": "1343640",
    "end": "1349600"
  },
  {
    "text": "then uh empty value we also see for the search notes we have on input search notes Target value so a little bit more",
    "start": "1349600",
    "end": "1356480"
  },
  {
    "text": "about what that does uh so as previously mentioned Elm doesn't have any side effects when you say on input and you're",
    "start": "1356480",
    "end": "1362760"
  },
  {
    "text": "passing in values what that's doing is not actually giving uh imperative handlers so in JavaScript you would say",
    "start": "1362760",
    "end": "1369960"
  },
  {
    "text": "you know element. add event listener input and then uh an imperative function",
    "start": "1369960",
    "end": "1376320"
  },
  {
    "text": "that would run every time that input was called but El you do this declaratively you say okay what I want you to do what",
    "start": "1376320",
    "end": "1382400"
  },
  {
    "text": "Target value is doing there is it's saying okay take event. target. value which is the string the user typed in so",
    "start": "1382400",
    "end": "1388200"
  },
  {
    "text": "maybe hamburger in our previous example and I want you to take that value and I want you to wrap it up in something",
    "start": "1388200",
    "end": "1394240"
  },
  {
    "text": "called search notes and search notes is just a pure function a stateless function that's just going to return a",
    "start": "1394240",
    "end": "1400919"
  },
  {
    "text": "description of what I want done what I want the way in which I want to update the UI based on what I got out of there",
    "start": "1400919",
    "end": "1407559"
  },
  {
    "text": "that's not going to be handled here that's going to be handled in a different stateless function somewhere else which is important because it means",
    "start": "1407559",
    "end": "1413200"
  },
  {
    "text": "that this whole function this entire render function is entirely stateless it",
    "start": "1413200",
    "end": "1418480"
  },
  {
    "text": "it's entirely cachable as well if I want to uh call it again with the same arguments I can just skip doing that if",
    "start": "1418480",
    "end": "1424760"
  },
  {
    "text": "I've already seen those arguments before we'll come back to that later so it looks pretty nice it's",
    "start": "1424760",
    "end": "1430240"
  },
  {
    "text": "pretty straightforward pretty easy to use um and it's all just vanilla Elm code um incidentally if you're looking",
    "start": "1430240",
    "end": "1437720"
  },
  {
    "text": "for uh the sort of before and after I uh I I actually tagged the coffee script version of this uh rewrite that used uh",
    "start": "1437720",
    "end": "1445520"
  },
  {
    "text": "coffee script and react and flux and then the elm version when they were both at feature parody so the elm rewrite",
    "start": "1445520",
    "end": "1450720"
  },
  {
    "text": "doesn't very closely resemble what I have now um I've obviously uh you know",
    "start": "1450720",
    "end": "1456080"
  },
  {
    "text": "continued to improve on it and iterate on not only the the code but also the design but uh if you want uh to compare",
    "start": "1456080",
    "end": "1462200"
  },
  {
    "text": "and see what it looks like to transition from one to the other when they're at feature parody you can do",
    "start": "1462200",
    "end": "1467360"
  },
  {
    "text": "so so how was it how was the experience it was so great oh man this",
    "start": "1467360",
    "end": "1474080"
  },
  {
    "text": "is like some of the most fun I've had writing code since I was like 10 years old doing Visual Basic being like I can",
    "start": "1474080",
    "end": "1479760"
  },
  {
    "text": "make you eyes it was so excellent I I really cannot recommend it enough the",
    "start": "1479760",
    "end": "1485159"
  },
  {
    "text": "performance is just ridiculous one of the best experiences I had was because as previously mentioned all of your view",
    "start": "1485159",
    "end": "1491840"
  },
  {
    "text": "functions are stateless functions and you really can just say if if I'm going to get in the same arguments I don't",
    "start": "1491840",
    "end": "1497360"
  },
  {
    "text": "need to bother running the whole function I can just return the same value we got last time and nothing bad will happen that's true of like",
    "start": "1497360",
    "end": "1504200"
  },
  {
    "text": "everything so what that means is I I had this experience where I was um going in and I was actually modifying that search",
    "start": "1504200",
    "end": "1510279"
  },
  {
    "text": "field and I started typing in uh search and it was slow like the characters were coming up slowly and I was like oh no",
    "start": "1510279",
    "end": "1516520"
  },
  {
    "text": "this is a this is a bad performance problem to have um because my application had grown pretty large and I knew that the problem was that it was uh",
    "start": "1516520",
    "end": "1523679"
  },
  {
    "text": "it was having to render everything on every single time I put in a character um that's just sort of the normal noral react flux style is every time that you",
    "start": "1523679",
    "end": "1531000"
  },
  {
    "text": "get an input from the user you update your model which reruns all of your view functions and then uh then diffs them",
    "start": "1531000",
    "end": "1536399"
  },
  {
    "text": "and things like that to determine actual Dom updates on the screen so I was like oh okay um well i' I've done lots of",
    "start": "1536399",
    "end": "1543720"
  },
  {
    "text": "performance optimizations I'm not afraid to bust out the flame graphs and see what's going on um but but first why",
    "start": "1543720",
    "end": "1549600"
  },
  {
    "text": "don't I just try there's this little function called html. lazy and then you just stick that in front of one of your",
    "start": "1549600",
    "end": "1555080"
  },
  {
    "text": "view functions and it just memorizes it it says if I'm going to get in the same AR arents don't bother calling this just use the saved result we have I was like",
    "start": "1555080",
    "end": "1561760"
  },
  {
    "text": "I'll try I'll put one here put one here put one here put one here let's see what that does boom instantaneous like no",
    "start": "1561760",
    "end": "1568120"
  },
  {
    "text": "performance problem everything's just lightening fast suddenly I was like what I'm used to spending like days debugging",
    "start": "1568120",
    "end": "1573279"
  },
  {
    "text": "performance problems I can just sprinkle this around and it just works what what is this um also the package manager",
    "start": "1573279",
    "end": "1580000"
  },
  {
    "text": "guarantees semantic versioning for every single package automatically like let that sink in for",
    "start": "1580000",
    "end": "1586919"
  },
  {
    "text": "a second so what that means is is that if a package author makes a breaking API",
    "start": "1586919",
    "end": "1592039"
  },
  {
    "text": "change they're not allowed to publish it the package manager will reject it unless they bump the major version",
    "start": "1592039",
    "end": "1597559"
  },
  {
    "text": "number so you can actually rely on the versioning of your packages and not only",
    "start": "1597559",
    "end": "1603399"
  },
  {
    "text": "that but when you're going to upgrade your packages there's a diff tool you can say what changed between 1.1.0 and",
    "start": "1603399",
    "end": "1610159"
  },
  {
    "text": "2.0.0 just run that at the command line you're thinking about upgrading you want to know what changed it'll just tell you",
    "start": "1610159",
    "end": "1615760"
  },
  {
    "text": "what changed about the apis and say like here's the new stuff here's what stuff changed and here's what stuff went away",
    "start": "1615760",
    "end": "1622679"
  },
  {
    "text": "isn't that how it ought to work um language usability so this is in",
    "start": "1622679",
    "end": "1628279"
  },
  {
    "text": "the most recent version of the compiler um there's been a push to say look why don't we make these type errors easier",
    "start": "1628279",
    "end": "1634200"
  },
  {
    "text": "to read right easier to follow um it's great that the compiler tells you when you when you have a problem but why",
    "start": "1634200",
    "end": "1640480"
  },
  {
    "text": "can't it be more friendly um so check this out I mean it's just telling you hey um here's the problem not all",
    "start": "1640480",
    "end": "1645799"
  },
  {
    "text": "elements of this list are the same type of value lists have to be homogeneous um I noticed the mismatch here and if you",
    "start": "1645799",
    "end": "1651600"
  },
  {
    "text": "look at that little code sample there it's got line numbers on the left it's got the actual code that you wrote and",
    "start": "1651600",
    "end": "1657000"
  },
  {
    "text": "it even has a little squiggle under there which if this were colored would you'd see it's a little red squiggle like when you misspell something it's",
    "start": "1657000",
    "end": "1662679"
  },
  {
    "text": "like oh yeah it's right there here's the problem it's like doing as much work as it can to format the error message so that you can just look at it and be like",
    "start": "1662679",
    "end": "1669120"
  },
  {
    "text": "got it I know where the problem is and go fix it um again isn't that how it ought to",
    "start": "1669120",
    "end": "1674679"
  },
  {
    "text": "work refactoring is just the most fun thing because I just keep having this",
    "start": "1674679",
    "end": "1679960"
  },
  {
    "text": "experience where I'm like okay I want to change this thing I'm going to change it I just go through and just all right",
    "start": "1679960",
    "end": "1686399"
  },
  {
    "text": "change it change it change it change it change it all right now I've got it how I want and compiler tell me everything I broke then I go and the compiler says",
    "start": "1686399",
    "end": "1693039"
  },
  {
    "text": "okay you broke this you broke that oh right go fix that hey you forgot about this okay cool and then at the end I bring it back up and even without",
    "start": "1693039",
    "end": "1699360"
  },
  {
    "text": "running a single test it just works with no regressions and I'm like no no no no",
    "start": "1699360",
    "end": "1705480"
  },
  {
    "text": "that that had to have broke I just changed I mean here this is a a a a pull request I made to",
    "start": "1705480",
    "end": "1711399"
  },
  {
    "text": "dreamwriter that changed a few things um more than a few things I guess there was",
    "start": "1711399",
    "end": "1716519"
  },
  {
    "text": "like okay so this decent Siz diff like anyway I'm just going to keep doing this",
    "start": "1716519",
    "end": "1721919"
  },
  {
    "text": "um so so this was this was a change and when I was done with",
    "start": "1721919",
    "end": "1727799"
  },
  {
    "text": "this I just compiled it and broke stuff and was like let's see if it still works",
    "start": "1727799",
    "end": "1734840"
  },
  {
    "text": "and it did with no regressions and this is normal I actually expected that it was going to which is crazy um because",
    "start": "1734840",
    "end": "1742919"
  },
  {
    "text": "I'm I'm used to JavaScript where you get undefined is not a function when when you break something which is also",
    "start": "1742919",
    "end": "1749399"
  },
  {
    "text": "something that I haven't had happen in Elm um I actually not gotten any runtime exceptions yet ever it actually hasn't",
    "start": "1749399",
    "end": "1758039"
  },
  {
    "text": "happened just no runtime exceptions not only not undefined is not a function my dearest friend but but none um and",
    "start": "1758039",
    "end": "1765120"
  },
  {
    "text": "that's because elm's type system and compiler are super great they're just really welld designed um I am aware that",
    "start": "1765120",
    "end": "1772279"
  },
  {
    "text": "conceptually they exist certainly you can get a you know stack Overflow you can run out of resources there's all sorts of ways that a runtime exception",
    "start": "1772279",
    "end": "1777799"
  },
  {
    "text": "could happen but in practice just using the language it's difficult like it's so difficult that I haven't accidentally",
    "start": "1777799",
    "end": "1783159"
  },
  {
    "text": "done it yet um which coming from JS land is just phenomenal so yeah in short it's",
    "start": "1783159",
    "end": "1789519"
  },
  {
    "text": "been a great experience and that lets me build things more like this and less like the falling",
    "start": "1789519",
    "end": "1796320"
  },
  {
    "text": "over building I can have this good experience and I can still build these really nice things that actually stand",
    "start": "1796320",
    "end": "1801480"
  },
  {
    "text": "the test of time I think that's really because of all the languages I've ever used Elm is",
    "start": "1801480",
    "end": "1807519"
  },
  {
    "text": "the simplest um there's just not a lot going on to it it's built out of these simple Primitives and they work really",
    "start": "1807519",
    "end": "1812760"
  },
  {
    "text": "well together stateless functions and immutable data that's it no mess so in",
    "start": "1812760",
    "end": "1819679"
  },
  {
    "text": "short no runtime exceptions semantic version and guaranteed time traveling",
    "start": "1819679",
    "end": "1824720"
  },
  {
    "text": "debugger check it out lm.org if you want to learn more so then the big question would I like to",
    "start": "1824720",
    "end": "1830320"
  },
  {
    "text": "ship another web app in Elm oh yeah thanks very",
    "start": "1830320",
    "end": "1835710"
  },
  {
    "text": "[Applause] much one other note that was not",
    "start": "1835710",
    "end": "1841799"
  },
  {
    "text": "hypothetical um I work at a company called no red Inc and we've actually started using Elm in production we have students answering two and a half",
    "start": "1841799",
    "end": "1847799"
  },
  {
    "text": "million questions a day uh we're based in San Francisco and we're totally hiring so hit me up if you're interested in that",
    "start": "1847799",
    "end": "1854799"
  },
  {
    "text": "thanks questions yes uh",
    "start": "1854799",
    "end": "1860638"
  },
  {
    "text": "so uh it's technically general purpose but it's heavily geared towards web",
    "start": "1864639",
    "end": "1869720"
  },
  {
    "text": "right now um so the the intention is to sort of focus on that use case technically you can also so compiles to",
    "start": "1869720",
    "end": "1874919"
  },
  {
    "text": "JavaScript um you can use it with node and actually uh Elm test which is the the test Runner um is written using Elm",
    "start": "1874919",
    "end": "1881600"
  },
  {
    "text": "bindings to node but it's like very on the back burner it's not the Focus right now the focus is on making the",
    "start": "1881600",
    "end": "1887279"
  },
  {
    "text": "experience of building stuff in the browser really great and then in the future there are long-term plans to",
    "start": "1887279",
    "end": "1892360"
  },
  {
    "text": "compile the node actually to even write a garbage collector and compile straight to assembly stuff like that but it's way",
    "start": "1892360",
    "end": "1897760"
  },
  {
    "text": "down the line and I wouldn't expect it for a while yeah",
    "start": "1897760",
    "end": "1904279"
  },
  {
    "text": "and second what was the second question what's your novel about what is my oh",
    "start": "1925200",
    "end": "1931200"
  },
  {
    "text": "the novel uh well novel's out of scope we'll chat afterwards but um so the",
    "start": "1931200",
    "end": "1936639"
  },
  {
    "text": "first question was uh so now P script does have a library like react for doing this stuff um what are my thoughts on",
    "start": "1936639",
    "end": "1943080"
  },
  {
    "text": "Elm versus P script today um basically I think the answer is that if you like math and askal more you will probably",
    "start": "1943080",
    "end": "1949159"
  },
  {
    "text": "gravitate towards P script um if you're coming from a JavaScript perspective you'll probably gravitate towards Elm um",
    "start": "1949159",
    "end": "1954519"
  },
  {
    "text": "Elm has deliberately made some trade-offs to make things easier to get into um and and sort of like simplified",
    "start": "1954519",
    "end": "1960799"
  },
  {
    "text": "the language uh at the expense of you know uh making things more mathematical",
    "start": "1960799",
    "end": "1966080"
  },
  {
    "text": "and so forth so yeah all right thanks",
    "start": "1966080",
    "end": "1971740"
  },
  {
    "text": "[Applause]",
    "start": "1971740",
    "end": "1974839"
  }
]