[
  {
    "text": "okay good morning and thank you very much for coming to my talk uh my name is David I'm a go programmer from Sydney",
    "start": "4400",
    "end": "11280"
  },
  {
    "text": "I'm delighted to be here to talk about go finally I do a lot of travel and finally talk about go inside Australia",
    "start": "11280",
    "end": "17720"
  },
  {
    "text": "so very happy to be able to do that uh this talk is called solid go design but",
    "start": "17720",
    "end": "23800"
  },
  {
    "text": "uh it's very difficult to follow someone like Dave Thomas um and compared to the other speakers who you're going to see to to",
    "start": "23800",
    "end": "30080"
  },
  {
    "text": "say I feel with with so much experience I feel like a bit of an anteloper so hopefully you'll take it easy on",
    "start": "30080",
    "end": "37040"
  },
  {
    "text": "me so for the people in this room who who's tried go who's used go oh this is",
    "start": "37040",
    "end": "43200"
  },
  {
    "text": "good okay now keep your hand up if you've actually if you've actually written written some go yes good and",
    "start": "43200",
    "end": "49960"
  },
  {
    "text": "keep your hand up if you've deployed a go Application in production okay only",
    "start": "49960",
    "end": "57199"
  },
  {
    "text": "one all right we'll talk later um so my own interest in go was sparked",
    "start": "57199",
    "end": "63800"
  },
  {
    "text": "in 2009 by the language's Fresh Approach to the problems of large- scale software",
    "start": "63800",
    "end": "69560"
  },
  {
    "text": "development I think I think go represents it's a member of a triumverate of of three modern languages",
    "start": "69560",
    "end": "76280"
  },
  {
    "text": "including rust and Swift um that represent a return to a model of",
    "start": "76280",
    "end": "81920"
  },
  {
    "text": "programs that are compiled directly to machine code so go is memory safe it's",
    "start": "81920",
    "end": "87600"
  },
  {
    "text": "concurrent and it's without a requirement to to have a virtual machine or an interpreter U and I think this has been",
    "start": "87600",
    "end": "93840"
  },
  {
    "text": "one of the reasons for its uh success and all three of these languages represent a movement away from this",
    "start": "93840",
    "end": "100680"
  },
  {
    "text": "everything is an object um Paradigm that's been the mainstream narrative for quite a long",
    "start": "100680",
    "end": "107560"
  },
  {
    "text": "time n Go is also a young language um we had the fourth birthday announcement of",
    "start": "107560",
    "end": "113360"
  },
  {
    "text": "the 1.0 release about a month ago I mean we've we've only we've had seven month",
    "start": "113360",
    "end": "120280"
  },
  {
    "text": "we're working on our seventh minor Point release so far in the last and that's been represented about the last four or",
    "start": "120280",
    "end": "125880"
  },
  {
    "text": "five years so we've still we're still quite young we still have a long way to go and go is also not an academic",
    "start": "125880",
    "end": "132560"
  },
  {
    "text": "language it's a language that's explicitly designed for programming we say in the large and it's influenced",
    "start": "132560",
    "end": "139440"
  },
  {
    "text": "heavily by the needs of its Patron Google and so I think that go is a",
    "start": "139440",
    "end": "146800"
  },
  {
    "text": "language that's designed primarily for groups of programs the pro for the productivity of programmers in",
    "start": "146800",
    "end": "154640"
  },
  {
    "text": "plural now for my day job I work on two large go projects the first is the go",
    "start": "155000",
    "end": "160800"
  },
  {
    "text": "language itself and the second is Juju uh from canonical my employer who are very generous to send me here",
    "start": "160800",
    "end": "167920"
  },
  {
    "text": "today one aspect of dealing with projects maybe you think these are Big maybe you think they're small but one",
    "start": "167920",
    "end": "174319"
  },
  {
    "text": "aspect of dealing with projects of this size is that I think there's more there's more",
    "start": "174319",
    "end": "180640"
  },
  {
    "text": "to argue about than just the name of variables and file layout and how many spaces are the correct number of spaces",
    "start": "180640",
    "end": "186720"
  },
  {
    "text": "to follow the period but I don't think I don't mean to imply that design is is not important",
    "start": "186720",
    "end": "194599"
  },
  {
    "text": "for smaller programs I mean personally I think that we should all be writing trying to write smaller",
    "start": "194599",
    "end": "201040"
  },
  {
    "text": "programs but sometimes in the world of commercial development this idealistic it's not compatible with this idealistic",
    "start": "201040",
    "end": "208760"
  },
  {
    "text": "worldview so design is important for programs of all size but I think it's most important",
    "start": "208760",
    "end": "215920"
  },
  {
    "text": "when the size and the age of your program grows that's when the design becomes",
    "start": "215920",
    "end": "221959"
  },
  {
    "text": "Paramount and authors like Sandy Mets Robert Martin and the late Jim W remind us that the only constant in software",
    "start": "221959",
    "end": "228920"
  },
  {
    "text": "development is change and so to believe in a world-based software is like done",
    "start": "228920",
    "end": "234640"
  },
  {
    "text": "completely is to believe in a fantasy",
    "start": "234640",
    "end": "239360"
  },
  {
    "text": "so in his book agile software development principles patterns and practices Robert Martin introduces a",
    "start": "243680",
    "end": "250200"
  },
  {
    "text": "series of ideas for the construction of software that is amable to change now Martin software solid",
    "start": "250200",
    "end": "257519"
  },
  {
    "text": "principles are closely associated with object-oriented languages of their time",
    "start": "257519",
    "end": "262560"
  },
  {
    "text": "uh C++ mainly and then Java and c and although they span different eras",
    "start": "262560",
    "end": "268720"
  },
  {
    "text": "these languages all share the same class structured inheritance-based",
    "start": "268720",
    "end": "275160"
  },
  {
    "text": "foundation so this talk focuses on the interpretation of go programs according to Martin's solid",
    "start": "275160",
    "end": "282360"
  },
  {
    "text": "principles it's not a theological deconstruction of solid um in effect I",
    "start": "282360",
    "end": "287639"
  },
  {
    "text": "hold these principles to be self-evident as good ideas and hopefully by your presence here today uh you agree with me",
    "start": "287639",
    "end": "294520"
  },
  {
    "text": "to some to some degree",
    "start": "294520",
    "end": "298319"
  },
  {
    "text": "so in the introduction to their book last year Alan Donovan and Brian kernigan wrote that the go project",
    "start": "301880",
    "end": "309080"
  },
  {
    "text": "includes the language itself its tools and standard library and last but not",
    "start": "309080",
    "end": "314160"
  },
  {
    "text": "least a cultural uh a cultural agenda of radical Simplicity and a sign of this drive",
    "start": "314160",
    "end": "320479"
  },
  {
    "text": "towards Simplicity is Go's abandonment of a traditional class-based inheritance in fact goh supports no form",
    "start": "320479",
    "end": "328520"
  },
  {
    "text": "of inheritance whatsoever and instead commits the language to uh firmly to the Paradigm of",
    "start": "328520",
    "end": "335080"
  },
  {
    "text": "composition so does this mean that go programs are not objectoriented and does this mean that go programs cannot or do",
    "start": "335080",
    "end": "343039"
  },
  {
    "text": "not follow solid design principles and this is really what we're here today to look",
    "start": "343039",
    "end": "349160"
  },
  {
    "text": "at and of course if we're talking about solid we start with the S which stands",
    "start": "349160",
    "end": "354680"
  },
  {
    "text": "for the single responsibility principle it's obviously the most wellknown",
    "start": "354680",
    "end": "360199"
  },
  {
    "text": "and the single responsibility principle states that a class should have one and only one reason to",
    "start": "360600",
    "end": "366880"
  },
  {
    "text": "change but why is this important that as a unit a piece of code should only have",
    "start": "367160",
    "end": "372240"
  },
  {
    "text": "one reason to change one impetus to change why should we care like why should we as programmers care about this",
    "start": "372240",
    "end": "378240"
  },
  {
    "text": "level of taxonomy I mean to me uh as distressing",
    "start": "378240",
    "end": "384440"
  },
  {
    "text": "as it may be the idea that my own I might have to change my own code it's certainly far more stressing that the",
    "start": "384440",
    "end": "390960"
  },
  {
    "text": "code that my code depends on might might change Under",
    "start": "390960",
    "end": "396440"
  },
  {
    "text": "Foot so when your code does change it should be in response to direct stimuli it your code shouldn't be",
    "start": "396440",
    "end": "403360"
  },
  {
    "text": "the victim of collateral damage and two pieces of code that are highly sensitive to change in their",
    "start": "403360",
    "end": "410360"
  },
  {
    "text": "counterparts we can say that they're tightly coupled and coupling is just a word that",
    "start": "410360",
    "end": "416680"
  },
  {
    "text": "describes uh that describes two things which change together change in one",
    "start": "416680",
    "end": "421960"
  },
  {
    "text": "induces a change in the other so a code that has fewer responsibilities has fewer reasons to",
    "start": "421960",
    "end": "430840"
  },
  {
    "text": "change so Uncle Bob's imperatively styled single responsibility principle is is derived from Tom DeMarco's older",
    "start": "431520",
    "end": "439680"
  },
  {
    "text": "definition of cohesion and as as DeMarco puts forward",
    "start": "439680",
    "end": "445759"
  },
  {
    "text": "cohesion is a measure of the strength of the association between elements inside a module a highly cohesive module is a",
    "start": "445759",
    "end": "452199"
  },
  {
    "text": "collection of statements and data items that should be related as a whole because they are so closely",
    "start": "452199",
    "end": "458319"
  },
  {
    "text": "related and any attempt to divide them would only result in increased coupling and decreased",
    "start": "458319",
    "end": "464680"
  },
  {
    "text": "reliability so in this context the word cohesion is describing the property of two bits of code that are naturally",
    "start": "464680",
    "end": "471120"
  },
  {
    "text": "attracted to each other I mean they they stick together like like the poles of magnets",
    "start": "471120",
    "end": "478280"
  },
  {
    "text": "and to describe the units of coupling and cohesion in go programs we might talk about functions and methods I mean",
    "start": "479840",
    "end": "485919"
  },
  {
    "text": "this is very very common we're talking about the single responsibility principle but but in truth it starts",
    "start": "485919",
    "end": "491919"
  },
  {
    "text": "with the go package model go packages are composed of",
    "start": "491919",
    "end": "498360"
  },
  {
    "text": "various elements constants variables types functions and methods and each of these are either",
    "start": "498360",
    "end": "504960"
  },
  {
    "text": "public or private or if you like they're exported or not exported",
    "start": "504960",
    "end": "511000"
  },
  {
    "text": "and True To Go's focus on Simplicity everything in a package is by default private unless the identifier starts",
    "start": "511000",
    "end": "517800"
  },
  {
    "text": "with an uppercase letter so orgo code lives in a package",
    "start": "517800",
    "end": "523479"
  },
  {
    "text": "even the main function which we call not particularly inventively the main",
    "start": "523479",
    "end": "528519"
  },
  {
    "text": "package and a welld designed package starts with its name which is both a description of its role its purpose and",
    "start": "528519",
    "end": "536440"
  },
  {
    "text": "a namespace prefix and some examples of good packages from the go standard Library",
    "start": "536440",
    "end": "542760"
  },
  {
    "text": "might be the HTTP package which obviously provides a client and a server",
    "start": "542760",
    "end": "548480"
  },
  {
    "text": "the exact package which executes things and unfortunately for me the adjacent",
    "start": "548480",
    "end": "554720"
  },
  {
    "text": "package which is a a poor example so when you use another package",
    "start": "554720",
    "end": "561360"
  },
  {
    "text": "of symbols inside your own package this is accomplished with the import declaration and this establishes Source",
    "start": "561360",
    "end": "568200"
  },
  {
    "text": "level dependency or perhaps a coupling between two packages and once imported the symbols",
    "start": "568200",
    "end": "575279"
  },
  {
    "text": "of that package always are prefixed with the package's name and this makes it",
    "start": "575279",
    "end": "580480"
  },
  {
    "text": "really easy to figure out where an identifier is declared like where did where did this come",
    "start": "580480",
    "end": "587279"
  },
  {
    "text": "from so this small but completely functional microservice TOS people the time um is",
    "start": "587279",
    "end": "596079"
  },
  {
    "text": "everything here to run a to run a web server on Port 901 we register a route on the time and",
    "start": "596079",
    "end": "604279"
  },
  {
    "text": "we and we serve as many clients as connect to it and this uses the this",
    "start": "604279",
    "end": "609440"
  },
  {
    "text": "uses the the services of five other packages from networking HTTP string",
    "start": "609440",
    "end": "616760"
  },
  {
    "text": "formatting time and logging and the purpose of each of these",
    "start": "616760",
    "end": "622440"
  },
  {
    "text": "packages is is basically self-evident it's right there in their name um with the possible exception C of",
    "start": "622440",
    "end": "629920"
  },
  {
    "text": "of f which is um our homage to plan",
    "start": "629920",
    "end": "635480"
  },
  {
    "text": "n and this is also a good example of how type inference Works in go go is a",
    "start": "635480",
    "end": "640839"
  },
  {
    "text": "statically typed language yet the program contains only one type declaration right here in",
    "start": "640839",
    "end": "648120"
  },
  {
    "text": "this in this route for the time Handler but this is still a completely statically tight",
    "start": "648120",
    "end": "655079"
  },
  {
    "text": "program and this focus on names is not just noun pedantry a poorly named",
    "start": "656240",
    "end": "661959"
  },
  {
    "text": "package misses the opportunity to enumerate a purpose and that that's assuming it has one I",
    "start": "661959",
    "end": "668880"
  },
  {
    "text": "mean from its name what does the server package do probably serves things but",
    "start": "668880",
    "end": "675200"
  },
  {
    "text": "what HTTP FTP SCP who",
    "start": "675200",
    "end": "681120"
  },
  {
    "text": "knows what is the purpose of a private package like what what what does that provide to people things that I",
    "start": "681120",
    "end": "686839"
  },
  {
    "text": "shouldn't see common is really a a reaction to having",
    "start": "686839",
    "end": "692399"
  },
  {
    "text": "a server package because if you have a server package you'll have to have a client package and you'll have to have a third package that has bits that are",
    "start": "692399",
    "end": "698760"
  },
  {
    "text": "neither server nor client and the utils package a complete",
    "start": "698760",
    "end": "704880"
  },
  {
    "text": "anti-pattern it becomes a catch all for a Dumping Ground um and utils packages apart from",
    "start": "704880",
    "end": "711800"
  },
  {
    "text": "having no clear purpose they change frequently and without real cause",
    "start": "711800",
    "end": "719399"
  },
  {
    "text": "and I don't think a go a discussion of go or decoupled in design in general could be complete without talking about",
    "start": "721040",
    "end": "726519"
  },
  {
    "text": "Doug millroy in 1964 Doug mckoy postulated about the power of pipes for composing",
    "start": "726519",
    "end": "734760"
  },
  {
    "text": "programs and his observation really became the foundation for what he's accepted to be the Unix philosophy small",
    "start": "734760",
    "end": "741800"
  },
  {
    "text": "sharp tools that are combined that solve larger problems problems perhaps the original author had never had never",
    "start": "741800",
    "end": "748639"
  },
  {
    "text": "intended or have never envisaged so personally I think that go",
    "start": "748639",
    "end": "754279"
  },
  {
    "text": "packages embody this idea of the Unix philosophy in effect each package is a",
    "start": "754279",
    "end": "760440"
  },
  {
    "text": "small go program it has access to all of the language and just like programming with",
    "start": "760440",
    "end": "765920"
  },
  {
    "text": "the Unix shell go programs can be composed by combining together a loose",
    "start": "765920",
    "end": "771639"
  },
  {
    "text": "collection of packages",
    "start": "771639",
    "end": "775120"
  },
  {
    "text": "the second principle is O for the open close principle this comes from ber and Meers",
    "start": "779959",
    "end": "787000"
  },
  {
    "text": "1988 book the objectoriented software construction and it's it's its",
    "start": "787000",
    "end": "793600"
  },
  {
    "text": "reinterpretation in solid states that classes should be open for extension but",
    "start": "793600",
    "end": "798760"
  },
  {
    "text": "closed for modification now go doesn't have classes",
    "start": "798760",
    "end": "804360"
  },
  {
    "text": "but we do have types and we have methods on types so in this example we have a structure",
    "start": "804360",
    "end": "811519"
  },
  {
    "text": "it's got a just got a single field called V it's an integer and the type A also has a method",
    "start": "811519",
    "end": "819240"
  },
  {
    "text": "called value which just Returns the internals of of V nothing particularly",
    "start": "819240",
    "end": "825079"
  },
  {
    "text": "special there we also introduce a type B using this syntax which shares the same",
    "start": "825079",
    "end": "831639"
  },
  {
    "text": "underlying type as a now this is important because B",
    "start": "831639",
    "end": "837320"
  },
  {
    "text": "doesn't extend from a like this is this is not",
    "start": "837320",
    "end": "842759"
  },
  {
    "text": "inheritance um and nor is B derived from a",
    "start": "842759",
    "end": "847880"
  },
  {
    "text": "um both B what What's Happening Here is both a and b share the same underlying type this structure with one integer",
    "start": "847880",
    "end": "856880"
  },
  {
    "text": "field but that's all they share because they share the same",
    "start": "856880",
    "end": "863199"
  },
  {
    "text": "underlying type values of a of type A can be converted to type B with the",
    "start": "863199",
    "end": "870320"
  },
  {
    "text": "syntax because ultimately they share the same layout in memory they they look the same in",
    "start": "870320",
    "end": "877240"
  },
  {
    "text": "memory but the method set of B will be distinct from the method set of a",
    "start": "879040",
    "end": "885360"
  },
  {
    "text": "because although they share the same underlying type the methods are associated only with the type on which",
    "start": "885360",
    "end": "890440"
  },
  {
    "text": "they are declared so here we see a prints out 100",
    "start": "890440",
    "end": "896279"
  },
  {
    "text": "B which we saw earlier shares the same underlying type but the method set of B",
    "start": "896279",
    "end": "901480"
  },
  {
    "text": "is empty because value is only declared on this a",
    "start": "901480",
    "end": "910040"
  },
  {
    "text": "type if we want one type to have access to another's methods we can instead do something like this and in this example",
    "start": "913600",
    "end": "921480"
  },
  {
    "text": "similar to the last one we have type A it's got a year field and it's got a",
    "start": "921480",
    "end": "926839"
  },
  {
    "text": "method on it called GRE which prints out a so a for the year we can use this syntax here where a",
    "start": "926839",
    "end": "935000"
  },
  {
    "text": "is a field inside B we call this",
    "start": "935000",
    "end": "939959"
  },
  {
    "text": "embedding and that gives uh the so the callers of B we'll",
    "start": "940920",
    "end": "947639"
  },
  {
    "text": "see B's methods because B has another another Greek method overlaid on",
    "start": "947639",
    "end": "954800"
  },
  {
    "text": "a but embedding isn't just for methods it also provides access to the embedded",
    "start": "955120",
    "end": "960600"
  },
  {
    "text": "types field so we can see that a has a year field and B has a year",
    "start": "960600",
    "end": "967319"
  },
  {
    "text": "field because it's inherited it not inherited it's it's accessing the embedded the embedded field from",
    "start": "967319",
    "end": "974720"
  },
  {
    "text": "a so embedding allows Ghost types to be open for",
    "start": "974720",
    "end": "980440"
  },
  {
    "text": "extension in this counter example we have a cat type has a name and has a me",
    "start": "982000",
    "end": "988560"
  },
  {
    "text": "has a meth method that Returns the number of legs which is the average number of legs for",
    "start": "988560",
    "end": "994160"
  },
  {
    "text": "cats now we can embed this cat type into a new type which we're going to call an",
    "start": "994160",
    "end": "999680"
  },
  {
    "text": "octocat and declare that octocat have eight",
    "start": "999680",
    "end": "1004240"
  },
  {
    "text": "legs now although octocat defines its own leg method you can see it here",
    "start": "1004720",
    "end": "1010560"
  },
  {
    "text": "second from the bottom there which prints out eight as we expect when we call the print leg method",
    "start": "1010560",
    "end": "1017519"
  },
  {
    "text": "that uh print leg method it returns four it Returns the original",
    "start": "1017519",
    "end": "1023760"
  },
  {
    "text": "four and this is because print legs is declared on the",
    "start": "1023760",
    "end": "1029558"
  },
  {
    "text": "cat and so the value it takes its receiver is a cat and so it's it's uh",
    "start": "1029559",
    "end": "1036480"
  },
  {
    "text": "it's delegating to the cat's leg method so values of cat in embedded in",
    "start": "1036480",
    "end": "1044438"
  },
  {
    "text": "any type are completely unaware that they're being embedded so their method",
    "start": "1044439",
    "end": "1050080"
  },
  {
    "text": "set cannot be altered and thus we can say the g types",
    "start": "1050080",
    "end": "1055400"
  },
  {
    "text": "are closed for modification and this is not a wacky",
    "start": "1055400",
    "end": "1062000"
  },
  {
    "text": "form of inheritance this there is no implicit this parameter in Go's",
    "start": "1062000",
    "end": "1067720"
  },
  {
    "text": "methods like in truth methods in go are little more than syntactic sugar for a",
    "start": "1067720",
    "end": "1075120"
  },
  {
    "text": "function a function with their receiver the with the first parameter which is their",
    "start": "1075120",
    "end": "1080240"
  },
  {
    "text": "receiver and so the receiver is exactly what we pass into it the first parameter of the",
    "start": "1080240",
    "end": "1086120"
  },
  {
    "text": "function and because go does not support function overloading OCT cats will never",
    "start": "1086120",
    "end": "1091159"
  },
  {
    "text": "be substitutable for regular cats and because we're talking about",
    "start": "1091159",
    "end": "1097080"
  },
  {
    "text": "substitution that brings us on to the next",
    "start": "1097080",
    "end": "1101080"
  },
  {
    "text": "principle coed in 199 1988 by Barbara lisof the lisof substitution principle",
    "start": "1103120",
    "end": "1109159"
  },
  {
    "text": "States roughly that two types are substitutable if they exhibit Behavior",
    "start": "1109159",
    "end": "1114400"
  },
  {
    "text": "such that the caller is unable to tell the difference now in class-based languages",
    "start": "1114400",
    "end": "1120320"
  },
  {
    "text": "the listof substitution principle is commonly interpreted as a specification for an abstract based class and various",
    "start": "1120320",
    "end": "1127360"
  },
  {
    "text": "concrete implementations but go doesn't have classes nor do we have inheritance as we",
    "start": "1127360",
    "end": "1134000"
  },
  {
    "text": "saw so substitution can't be implemented in terms of an abstract class hierarchy",
    "start": "1134000",
    "end": "1140720"
  },
  {
    "text": "ke substitution is the purview of interfaces in go in go a type is not required to",
    "start": "1141000",
    "end": "1148320"
  },
  {
    "text": "nominate either by like an imple an implements Declaration on its type or by",
    "start": "1148320",
    "end": "1153679"
  },
  {
    "text": "extending some form of abstract type that they Implement a particular",
    "start": "1153679",
    "end": "1158760"
  },
  {
    "text": "interface instead any type that can that can Implement in interface provided it",
    "start": "1158760",
    "end": "1165400"
  },
  {
    "text": "has a signature which matches the interface declaration",
    "start": "1165400",
    "end": "1170720"
  },
  {
    "text": "and while it's not possible to modify a type from another package at any time the interface a new interface might be",
    "start": "1170840",
    "end": "1177760"
  },
  {
    "text": "defined and if a type satisfies this a type satisfies this new interface if it",
    "start": "1177760",
    "end": "1183320"
  },
  {
    "text": "has all the methods that match that interface so we say that and go",
    "start": "1183320",
    "end": "1190000"
  },
  {
    "text": "interfaces are satisfied implicitly rather than explicitly you don't have to nominate that you you choose to nominate",
    "start": "1190000",
    "end": "1197360"
  },
  {
    "text": "these interfaces you just do and this has a profound impact of how interfaces are used in the",
    "start": "1197360",
    "end": "1205280"
  },
  {
    "text": "language a well design interface is generally a small interface um the prevailing interface",
    "start": "1206960",
    "end": "1213600"
  },
  {
    "text": "the prevailing idiom is that interfaces generally contain only one method and it follows logically that a",
    "start": "1213600",
    "end": "1221080"
  },
  {
    "text": "small interface will Le lead to a simple implementation because it's relatively hard to do anything otherwise",
    "start": "1221080",
    "end": "1229360"
  },
  {
    "text": "and so this leads to packages which are comp comprised of simple implementations connected by Common",
    "start": "1229360",
    "end": "1236440"
  },
  {
    "text": "behavior and a canonical example of small interfaces comes to us from the io",
    "start": "1236440",
    "end": "1241520"
  },
  {
    "text": "package these are the three kind of canonical stream orientated um interfaces in go read which takes a",
    "start": "1241520",
    "end": "1250200"
  },
  {
    "text": "buffer of bytes and returns to you how many bites it actually read like how much of that buffer it used and possibly",
    "start": "1250200",
    "end": "1256080"
  },
  {
    "text": "an error right which does the in INE it takes a buffer and tells you how much",
    "start": "1256080",
    "end": "1261960"
  },
  {
    "text": "how much it wrote to the underlying stream and possibly an error and generally writes are either fully",
    "start": "1261960",
    "end": "1267159"
  },
  {
    "text": "satisfied or they fail so it's it's un it's unusual that you will not write all",
    "start": "1267159",
    "end": "1272840"
  },
  {
    "text": "of the data successfully and closer because we're generally dealing with things that are resources file",
    "start": "1272840",
    "end": "1279240"
  },
  {
    "text": "descriptors network connections thing things that take physical resource close",
    "start": "1279240",
    "end": "1284400"
  },
  {
    "text": "is very important as well because it's a signal that no more processing will be done",
    "start": "1284400",
    "end": "1290519"
  },
  {
    "text": "and these these interfaces are highly pervasive inside go programs mainly because of their simple",
    "start": "1290720",
    "end": "1296679"
  },
  {
    "text": "contract like there's just one method for each of them there's just one method for each of them for some examples we have the",
    "start": "1296679",
    "end": "1304159"
  },
  {
    "text": "multier which takes a set of readers a a variable number of readers and returns",
    "start": "1304159",
    "end": "1309760"
  },
  {
    "text": "to you a new reader whose result will be reading each of those underlying readers in turn just concatenating their result",
    "start": "1309760",
    "end": "1319000"
  },
  {
    "text": "the limit reader um takes a reader and returns to you a new reader which will",
    "start": "1319000",
    "end": "1324960"
  },
  {
    "text": "which will register end of file regardless of what the underlying one said after a certain number of bytes so",
    "start": "1324960",
    "end": "1331159"
  },
  {
    "text": "you can place that over an existing reader to say I just want to read the header like many protocols many",
    "start": "1331159",
    "end": "1337039"
  },
  {
    "text": "protocols say there's this much header and this much body so you can rather than reading that data in and kind of",
    "start": "1337039",
    "end": "1343360"
  },
  {
    "text": "keeping off to the side you can just you can just uh create a new reader which will say I don't want want to read",
    "start": "1343360",
    "end": "1349360"
  },
  {
    "text": "further than that t- reader is analogist to our T command in Unix it takes a reader and",
    "start": "1349360",
    "end": "1357440"
  },
  {
    "text": "returns a reader that has a side effect of anything read through it will also be written to written to the supplied",
    "start": "1357440",
    "end": "1363640"
  },
  {
    "text": "writer so that let you Peak into the operations of a",
    "start": "1363640",
    "end": "1368760"
  },
  {
    "text": "read further a field we have functions which create readers on strings and",
    "start": "1368760",
    "end": "1374520"
  },
  {
    "text": "bytes so you can move from this world of materialized inmemory data to treating it like a string treating it like a",
    "start": "1374520",
    "end": "1382159"
  },
  {
    "text": "stream and bites stop buffer which is a very popular in memory implementation of both a reader and a writer so we create",
    "start": "1382159",
    "end": "1390240"
  },
  {
    "text": "a by stop buffer we don't need to initialize it the zero value is good enough we can write to it some bytes we",
    "start": "1390240",
    "end": "1398440"
  },
  {
    "text": "can use it as um a sync for formatted Printing and then we can pass it to Iota",
    "start": "1398440",
    "end": "1404360"
  },
  {
    "text": "copy which takes a reader and a writer and read everything from this reader and",
    "start": "1404360",
    "end": "1409720"
  },
  {
    "text": "writes it to the writer so b b stop buffer can be used in in both these",
    "start": "1409720",
    "end": "1415320"
  },
  {
    "text": "roles it's a source and a sync now go doesn't have eiffel's design",
    "start": "1415320",
    "end": "1422720"
  },
  {
    "text": "by contract but we do have this tradition of small interfaces and so the lisof substitution",
    "start": "1422720",
    "end": "1429360"
  },
  {
    "text": "principle could be dis summarized in go by this lovely aphorism from Jim wck which is require no more and promise no",
    "start": "1429360",
    "end": "1436880"
  },
  {
    "text": "less and this provides a good segue to the fourth of the solid",
    "start": "1436880",
    "end": "1442600"
  },
  {
    "text": "principles which is the interface segregation",
    "start": "1442600",
    "end": "1447360"
  },
  {
    "text": "principle the interface segregation principle states that clients should not be forced to depend on methods they",
    "start": "1448760",
    "end": "1454559"
  },
  {
    "text": "don't use in go the application of the interface segregation principle can",
    "start": "1454559",
    "end": "1460760"
  },
  {
    "text": "refer to a process of isolating the behavior required for a particular function to do its",
    "start": "1460760",
    "end": "1467120"
  },
  {
    "text": "job and for a concrete example say I've been given a task to write a function",
    "start": "1467120",
    "end": "1472679"
  },
  {
    "text": "that just persists data to disk like some document some config file the job is to persist the data to",
    "start": "1472679",
    "end": "1480480"
  },
  {
    "text": "disk it look reasonable I mean we don't need to worry",
    "start": "1483679",
    "end": "1489159"
  },
  {
    "text": "about the implementation we'll just look at the signature so I could specify this",
    "start": "1489159",
    "end": "1495120"
  },
  {
    "text": "function to take an OS file which is from the standard library and represents",
    "start": "1495120",
    "end": "1501000"
  },
  {
    "text": "file like things but it probably has it certainly",
    "start": "1501000",
    "end": "1506679"
  },
  {
    "text": "has a few problems I mean the signature save as I've written",
    "start": "1506679",
    "end": "1512159"
  },
  {
    "text": "it really precludes the option to write data to a network device unless of",
    "start": "1512159",
    "end": "1517919"
  },
  {
    "text": "course that network has been created like like mounted like a network share or something like that it can't write to",
    "start": "1517919",
    "end": "1525559"
  },
  {
    "text": "can't send the data to a web server we can't write write to a tar file can't do anything like",
    "start": "1525559",
    "end": "1532320"
  },
  {
    "text": "that and it's probably likely that network storage is going to be is going to be a requirement pretty soon and that",
    "start": "1532520",
    "end": "1539520"
  },
  {
    "text": "means that to fix this problem we have to do one of two things we'd either have to change the signature of this function",
    "start": "1539520",
    "end": "1546799"
  },
  {
    "text": "or Worse make a new one save to network save to tarile and save is also unpleasant to",
    "start": "1546799",
    "end": "1554919"
  },
  {
    "text": "test because it assumes that the host this this code is running on has a disc to write to um and this might this might",
    "start": "1554919",
    "end": "1563559"
  },
  {
    "text": "seem a little bit farfetched but in this kind of you know Docker Docker Docker world like like not being able to not having a writable dis is actually a",
    "start": "1563559",
    "end": "1570000"
  },
  {
    "text": "thing that's that's going to happen and because this",
    "start": "1570000",
    "end": "1575039"
  },
  {
    "text": "function because this function works with files to actually test how it works",
    "start": "1575039",
    "end": "1580600"
  },
  {
    "text": "I have to run it and then I have to go and read the file that it wrote to and I also I have to I have to make",
    "start": "1580600",
    "end": "1587440"
  },
  {
    "text": "sure that the file written to a new temporary location every time and I have to make sure that it was removed",
    "start": "1587440",
    "end": "1592960"
  },
  {
    "text": "afterwards so I don't waste space on the build server so whole bunch of",
    "start": "1592960",
    "end": "1599799"
  },
  {
    "text": "problems also os. file defines a lot of methods which are not relevant to save",
    "start": "1600320",
    "end": "1606679"
  },
  {
    "text": "like it can read directories it can tell you of paths symbolic links it can change modes it can do a whole bunch of things which are not save is not",
    "start": "1606679",
    "end": "1613000"
  },
  {
    "text": "interested in so it would be really useful if the signature of the save function",
    "start": "1613000",
    "end": "1618880"
  },
  {
    "text": "could describe only the parts of os file that we care about now in go we often compose",
    "start": "1618880",
    "end": "1625919"
  },
  {
    "text": "interfaces from smaller ones so this is again from package IO and this form as",
    "start": "1625919",
    "end": "1632000"
  },
  {
    "text": "we saw similar with embedding we can compose a larger interface by embedding",
    "start": "1632000",
    "end": "1637440"
  },
  {
    "text": "three smaller ones inside that so we could use this read write closer",
    "start": "1637440",
    "end": "1643159"
  },
  {
    "text": "interface to improve to improve save",
    "start": "1643159",
    "end": "1650158"
  },
  {
    "text": "so not surprisingly we change it to take a read write closer and this makes save both broader",
    "start": "1651559",
    "end": "1658760"
  },
  {
    "text": "in its operation it clarifies both the meth both to the caller and me the author of save the things that I'm",
    "start": "1658760",
    "end": "1665399"
  },
  {
    "text": "actually going to be doing the things that I care about that OS file used to provide as the author of save I can't",
    "start": "1665399",
    "end": "1673000"
  },
  {
    "text": "check a directory I can't test it this file as a Sim link I can't do any of these things because the the",
    "start": "1673000",
    "end": "1678559"
  },
  {
    "text": "implementation of os file has been hidden behind this",
    "start": "1678559",
    "end": "1683360"
  },
  {
    "text": "interface but we can probably take this a little bit further and improve it a bit further I mean firstly it's likely that",
    "start": "1683919",
    "end": "1691240"
  },
  {
    "text": "save is not going to read the file it just wrote I mean if if it follows the single responsibility principle it will",
    "start": "1691240",
    "end": "1697000"
  },
  {
    "text": "be responsible for writing files the job of reading and verifying a file is probably going to be somebody else's job",
    "start": "1697000",
    "end": "1704960"
  },
  {
    "text": "so we can narrow the specification for Save to just talk about writing and",
    "start": "1704960",
    "end": "1710039"
  },
  {
    "text": "closing like we've said it doesn't need to bother about reading it's never going to read anything from this it's just going to write to",
    "start": "1710039",
    "end": "1717360"
  },
  {
    "text": "it and second by providing save with a mechanism to close its stream which we",
    "start": "1720080",
    "end": "1725760"
  },
  {
    "text": "inherited kind of as a side effect of wanting to look like filed like things I think this has created a bit of an",
    "start": "1725760",
    "end": "1734080"
  },
  {
    "text": "ambiguity so so save can take a thing you can write and can close so under",
    "start": "1734080",
    "end": "1740399"
  },
  {
    "text": "what circumstances is it going to close who knows maybe it always closes",
    "start": "1740399",
    "end": "1746080"
  },
  {
    "text": "maybe it only closes when there is an error maybe it always closes when there is not an error who knows I mean that",
    "start": "1746080",
    "end": "1751679"
  },
  {
    "text": "that's maybe something You' put in the documentation but it's it's an ambiguity",
    "start": "1751679",
    "end": "1756760"
  },
  {
    "text": "and it's a problem because as the caller of save I might want to use this stream for",
    "start": "1756760",
    "end": "1761960"
  },
  {
    "text": "something else like I might be streaming one document and another and another and another and that's going to break if",
    "start": "1761960",
    "end": "1767399"
  },
  {
    "text": "save uncond ially calls close so a crude solution would be to",
    "start": "1767399",
    "end": "1774720"
  },
  {
    "text": "define a new type that embeds a writer and provides a close method that does",
    "start": "1774720",
    "end": "1780679"
  },
  {
    "text": "nothing so we can pass this because this now has right from the writer and close",
    "start": "1780679",
    "end": "1786039"
  },
  {
    "text": "it will fit that um writer closer interface that's one way we could do",
    "start": "1786039",
    "end": "1792840"
  },
  {
    "text": "it I don't know if this is a violation of the sub stitution principle",
    "start": "1794600",
    "end": "1800159"
  },
  {
    "text": "but it's it's probably not the best because I mean we we've broken the contract close actually now does",
    "start": "1800159",
    "end": "1806240"
  },
  {
    "text": "nothing so we can probably do better than that by changing the interface for save to be even tighter so now save just",
    "start": "1806240",
    "end": "1814640"
  },
  {
    "text": "takes a writer and its job is just to write that document out just to serialize it to that",
    "start": "1814640",
    "end": "1820519"
  },
  {
    "text": "writer and Supply applying this interface segregation principle to to",
    "start": "1820519",
    "end": "1825919"
  },
  {
    "text": "save the result has simultaneously been a function which is very specific in",
    "start": "1825919",
    "end": "1831919"
  },
  {
    "text": "what it does it only writes to the writer and it's also completely generic",
    "start": "1831919",
    "end": "1838279"
  },
  {
    "text": "in what it does because it can write to any writer that you have being a file on dis being a b a bite buffer that we saw",
    "start": "1838279",
    "end": "1845200"
  },
  {
    "text": "before some Network stream it doesn't",
    "start": "1845200",
    "end": "1849398"
  },
  {
    "text": "care and the final solid principle is of course dependency inversion",
    "start": "1850960",
    "end": "1857559"
  },
  {
    "text": "and the dependency inversion principle states that you should depend on abstractions and not on",
    "start": "1859840",
    "end": "1866158"
  },
  {
    "text": "concretions so what is a concretion and how does one invert one's dependency",
    "start": "1867120",
    "end": "1872480"
  },
  {
    "text": "upon it and more importantly what does dependency inversion mean in practice to",
    "start": "1872480",
    "end": "1877960"
  },
  {
    "text": "go programmers I me we're certainly not talking about dependency injection dependency injection",
    "start": "1877960",
    "end": "1884039"
  },
  {
    "text": "Frameworks at a basic level if a concrete type is a concretion then an",
    "start": "1884919",
    "end": "1890039"
  },
  {
    "text": "abstraction would be an interface but more fundamentally a concretion is one piece of code",
    "start": "1890039",
    "end": "1896120"
  },
  {
    "text": "depending on another now if you've applied all the",
    "start": "1896120",
    "end": "1901559"
  },
  {
    "text": "principles uh that we've talked about up to this point your code your code should be well factored into discrete packages",
    "start": "1901559",
    "end": "1908240"
  },
  {
    "text": "each of those packages having a single a single responsibility or purpose your code should also be",
    "start": "1908240",
    "end": "1914960"
  },
  {
    "text": "describing its dependencies in terms of interfaces and those interfaces should be well",
    "start": "1914960",
    "end": "1920039"
  },
  {
    "text": "factored to describe only the requirements for that particular function so in other words there",
    "start": "1920039",
    "end": "1927600"
  },
  {
    "text": "shouldn't be a lot to do here so maybe it's useful to look at a",
    "start": "1927600",
    "end": "1933080"
  },
  {
    "text": "slightly longer version of the dependency inversion principle and that is that high level",
    "start": "1933080",
    "end": "1938440"
  },
  {
    "text": "modules should not depend on lowlevel modules both should depend on abstractions and abstractions should not",
    "start": "1938440",
    "end": "1945000"
  },
  {
    "text": "depend on the details details should depend on abstractions",
    "start": "1945000",
    "end": "1949840"
  },
  {
    "text": "so what I think Uncle Bob is talking about here certainly in the context of go is the structure of your import graph",
    "start": "1950840",
    "end": "1957840"
  },
  {
    "text": "those import statements that create a source dependency between",
    "start": "1957840",
    "end": "1963200"
  },
  {
    "text": "packages in go your your import graph must be a cyclic a package is not",
    "start": "1963200",
    "end": "1968600"
  },
  {
    "text": "permitted to import itself either directly or transitively and a failure to respect",
    "start": "1968600",
    "end": "1974600"
  },
  {
    "text": "this ayylic requirement is grounds for compilation failure and more Gravely I think it represents a",
    "start": "1974600",
    "end": "1981000"
  },
  {
    "text": "serious error in design so all things being equal the",
    "start": "1981000",
    "end": "1986960"
  },
  {
    "text": "import graph of a welld designed go program should be wide and relatively flat rather than tall and narrow with a",
    "start": "1986960",
    "end": "1994200"
  },
  {
    "text": "lot of dependencies going lengthwise so if you have a package",
    "start": "1994200",
    "end": "2000720"
  },
  {
    "text": "whose function cannot operate without enlisting the aid of another package that's perhaps the sign that the code is",
    "start": "2000720",
    "end": "2006639"
  },
  {
    "text": "not well factored along package boundaries if you always if some code always needs to import another package",
    "start": "2006639",
    "end": "2012960"
  },
  {
    "text": "for its types and to and to actually to do its job there there's clearly a coupling",
    "start": "2012960",
    "end": "2019000"
  },
  {
    "text": "there so the dependency inversion principle encourages you to push the responsibility for the specifics the",
    "start": "2019000",
    "end": "2025320"
  },
  {
    "text": "concretions as high up in your import graph as possible and to leave the",
    "start": "2025320",
    "end": "2030360"
  },
  {
    "text": "lowlevel code at the bottom of you're dealing only with abstractions with through interfaces",
    "start": "2030360",
    "end": "2037880"
  },
  {
    "text": "now each of these five solid principles are strong ideas in their own right but taken together they have a single",
    "start": "2039919",
    "end": "2046919"
  },
  {
    "text": "theme Martin observed that all five of the solid principles relate to the management of dependencies between",
    "start": "2046919",
    "end": "2053158"
  },
  {
    "text": "software units the dependencies between functions dependencies between types and",
    "start": "2053159",
    "end": "2058599"
  },
  {
    "text": "dependencies between packages and this is another way of just saying decoupling which is indeed the",
    "start": "2058599",
    "end": "2065158"
  },
  {
    "text": "goal because software that is Loosely coupled is software that's going to be easier to",
    "start": "2065159",
    "end": "2071118"
  },
  {
    "text": "change the single responsibility principle encourages you to structure your functions types and methods of a go",
    "start": "2071119",
    "end": "2077320"
  },
  {
    "text": "program into packages and those packages should exhibit natural cohesion the",
    "start": "2077320",
    "end": "2082599"
  },
  {
    "text": "types should belong together all the functions should s should serve a single",
    "start": "2082599",
    "end": "2089039"
  },
  {
    "text": "purpose open closed encourage you to compose types through embedding rather than to extend them through inheritance",
    "start": "2089480",
    "end": "2098399"
  },
  {
    "text": "the lisof substitution principle encourages you to express dependencies between your packages in terms of",
    "start": "2098560",
    "end": "2103880"
  },
  {
    "text": "interfaces not concrete types and by defining small interfaces",
    "start": "2103880",
    "end": "2109520"
  },
  {
    "text": "we can be more confident that the implementations will Faithfully satisfy that contract because it's a much",
    "start": "2109520",
    "end": "2115920"
  },
  {
    "text": "smaller contract to satisfy interface segregation takes this",
    "start": "2115920",
    "end": "2121839"
  },
  {
    "text": "idea further and encourag you to Define functions and methods that depend only on the behavior that they need",
    "start": "2121839",
    "end": "2128440"
  },
  {
    "text": "and if your function requires only a parameter with a single interface method then it's more likely that that function",
    "start": "2128440",
    "end": "2134880"
  },
  {
    "text": "is going to have a single responsibility and the dependency",
    "start": "2134880",
    "end": "2140320"
  },
  {
    "text": "inversion principle encourages you to refactor the number of things that your package depends on in compile time and",
    "start": "2140320",
    "end": "2147119"
  },
  {
    "text": "go we really see this as a reduction in the number of import statements in a",
    "start": "2147119",
    "end": "2152040"
  },
  {
    "text": "package so in conclusion Sandy Mets noted last year that design is the art",
    "start": "2154760",
    "end": "2161280"
  },
  {
    "text": "of arranging code that needs to work today and needs to be easy to change",
    "start": "2161280",
    "end": "2167640"
  },
  {
    "text": "forever and if you were to summarize this talk it would probably be that interfaces are the key here to applying",
    "start": "2167640",
    "end": "2175040"
  },
  {
    "text": "the solid principles to go programs interfaces let go programmers",
    "start": "2175040",
    "end": "2180480"
  },
  {
    "text": "describe what their package provides not how it does it and interfaces are really the",
    "start": "2180480",
    "end": "2186680"
  },
  {
    "text": "unifying forces go they are the means of describing the",
    "start": "2186680",
    "end": "2191800"
  },
  {
    "text": "behavior and this shouldn't really be a surprise as goes interfaces provide the",
    "start": "2191800",
    "end": "2197680"
  },
  {
    "text": "language with polymorphism and polymorphism really is at the core of objectoriented",
    "start": "2197680",
    "end": "2205240"
  },
  {
    "text": "design thank you very much for listening [Applause]",
    "start": "2205240",
    "end": "2214539"
  }
]