[
  {
    "start": "0",
    "end": "215000"
  },
  {
    "text": "[Music]",
    "start": "960",
    "end": "8889"
  },
  {
    "text": "okay so today we're going to be talking about the topic of observability and we're going to be specifically looking",
    "start": "13799",
    "end": "19380"
  },
  {
    "text": "specifically looking at observing all of the serverless things so observability as applied to serverless event-driven",
    "start": "19380",
    "end": "26340"
  },
  {
    "text": "systems and I suppose the takeaway I'd like you to get from this talk is that",
    "start": "26340",
    "end": "31740"
  },
  {
    "text": "observability is not just a hipster word for logging observability is something that you need to consider in your",
    "start": "31740",
    "end": "37680"
  },
  {
    "text": "event-driven architectures from day one you need to bake it in and you need to treat it in the same way as you might",
    "start": "37680",
    "end": "44100"
  },
  {
    "text": "treat unit testing as you write more code you're going to write more unit testing and as you develop your system",
    "start": "44100",
    "end": "49440"
  },
  {
    "text": "you need to bring everything into the observability umbrella so you can see what's going on in production",
    "start": "49440",
    "end": "55800"
  },
  {
    "text": "so uh my name is Peter Peter Alger uh we're both from four theorem uh you can hit me on Twitter or LinkedIn or GitHub",
    "start": "55800",
    "end": "63960"
  },
  {
    "text": "there if you've got any questions after this uh that's a book that I've written recently with um oh and shanahu who's",
    "start": "63960",
    "end": "70560"
  },
  {
    "text": "our CTO and co-founder I actually have a couple of copies of the book to give away today if anyone's interested uh we'll be giving them to the first two",
    "start": "70560",
    "end": "77400"
  },
  {
    "text": "questions that come in on the app uh that aren't can I have a book please okay so I just handed over to Gil",
    "start": "77400",
    "end": "83880"
  },
  {
    "text": "briefly to introduce himself oh I'm sorry all right hi my name is Gili Army uh you",
    "start": "83880",
    "end": "92220"
  },
  {
    "text": "can call me Gail it's fine I'm also I'm a software developer at",
    "start": "92220",
    "end": "97860"
  },
  {
    "text": "forefiro I'm working there for a good two years now yeah and you can reach me",
    "start": "97860",
    "end": "103560"
  },
  {
    "text": "out on Twitter although I'm not that active there but like linkaging and my",
    "start": "103560",
    "end": "108840"
  },
  {
    "text": "GitHub profile is up there cool thanks Gil um so just a note about uh for theorem",
    "start": "108840",
    "end": "114720"
  },
  {
    "text": "um we're an AWS Consulting partner so we do a lot of work on AWS particularly with a focus on serverless a lot of our",
    "start": "114720",
    "end": "120299"
  },
  {
    "text": "Architects write books you can see a theme there around node.js machine learning and serverless and we also",
    "start": "120299",
    "end": "125640"
  },
  {
    "text": "maintain a bunch of Open Source in this space um so we have the midi framework that we",
    "start": "125640",
    "end": "131640"
  },
  {
    "text": "we've developed and maintained for the community that's a middleware framework to help you with your Lambda",
    "start": "131640",
    "end": "138300"
  },
  {
    "text": "developments and we're delighted to say that's now in the AWS Lambda power tools kit so check that out please",
    "start": "138300",
    "end": "143840"
  },
  {
    "text": "slickstarter is our serverless accelerator so this open source project is all about trying to have an",
    "start": "143840",
    "end": "150120"
  },
  {
    "text": "opinionated view on how you build serverless applications because serverless is not just throwing a Lambda",
    "start": "150120",
    "end": "155760"
  },
  {
    "text": "up into AWS and as you as you heard from the previous speaker right there's a lot of decisions you need to make a lot of",
    "start": "155760",
    "end": "161879"
  },
  {
    "text": "Technology decisions you need to make when you're putting a service application together so we use this as a kind of project starter kit as a bit of",
    "start": "161879",
    "end": "168660"
  },
  {
    "text": "scaffolding please feel free to take it and do the same yourself and then we have slick watch which is an",
    "start": "168660",
    "end": "174000"
  },
  {
    "text": "observability plugin and we're going to be talking a lot about slick watch and how it works and how it can help you",
    "start": "174000",
    "end": "180080"
  },
  {
    "text": "later on during this talk we also run the AWS bytes podcast that's",
    "start": "180080",
    "end": "186720"
  },
  {
    "text": "on our CTO and Luciano uh this we've been writing this every week now for the past year or so so please there's a load",
    "start": "186720",
    "end": "193680"
  },
  {
    "text": "of good stuff on AWS in there give them some love and every talk at every conference has a",
    "start": "193680",
    "end": "199500"
  },
  {
    "text": "way hiring slide this talk is no different this is our harrowing slide if you have see stuff here that's",
    "start": "199500",
    "end": "204599"
  },
  {
    "text": "interesting uh give us a shout uh there's a QR code there if you want to grab the slides and scan that",
    "start": "204599",
    "end": "210840"
  },
  {
    "text": "um I'll put that up again at the end of The Talk okay so um before we kind of what I wanted to do",
    "start": "210840",
    "end": "218040"
  },
  {
    "start": "215000",
    "end": "354000"
  },
  {
    "text": "first was kind of refer you to a system that we've developed recently um which is entirely serverless and",
    "start": "218040",
    "end": "224099"
  },
  {
    "text": "needed a huge amount of observability to be successful so this is a risk",
    "start": "224099",
    "end": "229440"
  },
  {
    "text": "computation system that we developed with some of the wonderful guys at Renaissance re so as the name implies",
    "start": "229440",
    "end": "235680"
  },
  {
    "text": "Renaissance 3 are in the reassurance space which means they insure insurers and their business is managing risk",
    "start": "235680",
    "end": "243060"
  },
  {
    "text": "and to do that they have a whole bunch of different multi-carlo simulations they run they have to run these daily or",
    "start": "243060",
    "end": "249780"
  },
  {
    "text": "even more frequently than daily in order to understand their exposure position in the market now originally this system was really I",
    "start": "249780",
    "end": "257940"
  },
  {
    "text": "suppose you could it's in the high performance compute space right they were running this on a salary cluster",
    "start": "257940",
    "end": "263100"
  },
  {
    "text": "internally probably 500 core type systems so it's getting into that kind of high performance compute range",
    "start": "263100",
    "end": "268500"
  },
  {
    "text": "we were able to work with these guys and reimagine this system entirely using",
    "start": "268500",
    "end": "273900"
  },
  {
    "text": "serverless Technologies right it's a fully event driven system uh it switches compute between Lambda and fargate it",
    "start": "273900",
    "end": "279960"
  },
  {
    "text": "uses S3 as its data Lake and it runs at pretty high scale so two reasons for",
    "start": "279960",
    "end": "285900"
  },
  {
    "text": "really um really referring you to this this system one is to say that the scope",
    "start": "285900",
    "end": "290940"
  },
  {
    "text": "of what you're able to do with serverless and event driven systems today is enormous it's not just if",
    "start": "290940",
    "end": "297060"
  },
  {
    "text": "you're still thinking about serverless's API Gateway and a few Lambda functions it's not the capability is huge even",
    "start": "297060",
    "end": "304380"
  },
  {
    "text": "moving into areas that you wouldn't traditionally associate with uh with with serverless technology",
    "start": "304380",
    "end": "310919"
  },
  {
    "text": "um and the second thing of course is that good observability was absolutely critical in building this system there's a blog post actually going out today on",
    "start": "310919",
    "end": "317820"
  },
  {
    "text": "the Amazon high performance compute channel that describes the system in more detail so uh go check it out if you",
    "start": "317820",
    "end": "323460"
  },
  {
    "text": "want to see what you can do with serverless these days so this required significant investment",
    "start": "323460",
    "end": "329280"
  },
  {
    "text": "in good observability for errors alerting debugging performance optimization",
    "start": "329280",
    "end": "334500"
  },
  {
    "text": "so when you're building an event distributed systems observability is your friend think about it from day one",
    "start": "334500",
    "end": "339660"
  },
  {
    "text": "now we're not going to look at that system right now we're going to talk about a simple example right now about how we how we were able to use",
    "start": "339660",
    "end": "346080"
  },
  {
    "text": "observability to fix issues in in one of our systems so I'm going to hand over to Gil now to take you through that oh yes",
    "start": "346080",
    "end": "353400"
  },
  {
    "text": "thank you Peter uh yeah so the story we're gonna talk about today is something that uh we see",
    "start": "353400",
    "end": "361440"
  },
  {
    "start": "354000",
    "end": "449000"
  },
  {
    "text": "commonly around projects there but because this one was one of our own",
    "start": "361440",
    "end": "367680"
  },
  {
    "text": "projects we can talk a lot in detail so you probably heard now about slick",
    "start": "367680",
    "end": "374100"
  },
  {
    "text": "starter but if you haven't I highly recommend you uh having a look it's the one that Peter just mentioned so it's a",
    "start": "374100",
    "end": "381660"
  },
  {
    "text": "complete complete startup project for uh for serverless in AWS and you can use it",
    "start": "381660",
    "end": "389100"
  },
  {
    "text": "as a template to to create build your own applications and it comes with lots",
    "start": "389100",
    "end": "394860"
  },
  {
    "text": "of components of the out of the box so for example you have authentication email sending and we have like all these",
    "start": "394860",
    "end": "403199"
  },
  {
    "text": "like httpd apis that they connect to lambdas they consume data from dynamogb",
    "start": "403199",
    "end": "409819"
  },
  {
    "text": "and something we want to highlight here so this is the scale of this project is",
    "start": "409819",
    "end": "416400"
  },
  {
    "text": "much smaller than compared to the one we just mentioned about our customer Renaissance rate but even though we end",
    "start": "416400",
    "end": "424740"
  },
  {
    "text": "up with like more than 100 resources there uh so what what's what's the goal of",
    "start": "424740",
    "end": "432900"
  },
  {
    "text": "this case study we really want to know about problems before our users they do",
    "start": "432900",
    "end": "440039"
  },
  {
    "text": "yeah and how how do we do that so we'll be applying observability and ensuring",
    "start": "440039",
    "end": "446160"
  },
  {
    "text": "that our application is properly set up yeah but okay talking about",
    "start": "446160",
    "end": "451580"
  },
  {
    "start": "449000",
    "end": "494000"
  },
  {
    "text": "observability so what really means observability so it means understanding",
    "start": "451580",
    "end": "458220"
  },
  {
    "text": "the systems and components in our application and we need to have the",
    "start": "458220",
    "end": "464340"
  },
  {
    "text": "ability to ask questions out of it and generate data important data out of it",
    "start": "464340",
    "end": "471840"
  },
  {
    "text": "so we can focus on this metadata as the messages go through the application yeah",
    "start": "471840",
    "end": "478199"
  },
  {
    "text": "and how how do we do that so we aim to do that by applying the fundamental",
    "start": "478199",
    "end": "483960"
  },
  {
    "text": "building blocks of observability that with with structure logs",
    "start": "483960",
    "end": "489080"
  },
  {
    "text": "traced tracing metrics and alarms yeah",
    "start": "489080",
    "end": "494120"
  },
  {
    "start": "494000",
    "end": "535000"
  },
  {
    "text": "so all right so we have observability the concept of it but how can we test",
    "start": "494120",
    "end": "501180"
  },
  {
    "text": "how observable our system is so in this particular case we said okay let's run a",
    "start": "501180",
    "end": "508139"
  },
  {
    "text": "stress test okay how are we gonna do that so be simulating traffic using our",
    "start": "508139",
    "end": "513839"
  },
  {
    "text": "integration tests they're there for us so we'll be running these tests like uh",
    "start": "513839",
    "end": "519000"
  },
  {
    "text": "in parallel multiple times and this will ensure that to be exercising all the",
    "start": "519000",
    "end": "524300"
  },
  {
    "text": "apis Performing like basic stuff for example logging crude operations",
    "start": "524300",
    "end": "530060"
  },
  {
    "text": "paginated results so we run this test we wait for for a bit and then we go to our",
    "start": "530060",
    "end": "537720"
  },
  {
    "start": "535000",
    "end": "573000"
  },
  {
    "text": "slack Channel and we start getting like all these alerts arriving yeah and we",
    "start": "537720",
    "end": "544980"
  },
  {
    "text": "can see uh we can see that we're getting different alarms from the different uh",
    "start": "544980",
    "end": "552060"
  },
  {
    "text": "resources that we set up uh to so we have here for example uh dynamodb some",
    "start": "552060",
    "end": "558660"
  },
  {
    "text": "throttling multiple under functions API Gateway so all these alerts they start",
    "start": "558660",
    "end": "566040"
  },
  {
    "text": "arriving in slack but it looks a bit messy because okay we're getting tons of messages there but we need to start",
    "start": "566040",
    "end": "573420"
  },
  {
    "start": "573000",
    "end": "623000"
  },
  {
    "text": "making sense of this alerts so we'll build a mental model and see okay how",
    "start": "573420",
    "end": "579180"
  },
  {
    "text": "they are correlated right it's like is that a single point of failure that's",
    "start": "579180",
    "end": "585600"
  },
  {
    "text": "causing all the other services to fail are there multiple so we create these mental model and you say okay we know",
    "start": "585600",
    "end": "592620"
  },
  {
    "text": "that our API Gateway is failing yeah and that's probably because our Lambda is",
    "start": "592620",
    "end": "598080"
  },
  {
    "text": "failing all right and then on the Lambda we notice that we're getting like uh unhandled arrows there and timeout and",
    "start": "598080",
    "end": "606120"
  },
  {
    "text": "we also saw some dynamodb throttling areas there so okay so we in our head we",
    "start": "606120",
    "end": "614279"
  },
  {
    "text": "imagine this scenario this is how how things are correlated oops too fast",
    "start": "614279",
    "end": "620640"
  },
  {
    "text": "how do I go back yeah so our initial hypothesis is all",
    "start": "620640",
    "end": "627120"
  },
  {
    "start": "623000",
    "end": "692000"
  },
  {
    "text": "right so we're getting throttled by dynamodb on right operations that's what",
    "start": "627120",
    "end": "632339"
  },
  {
    "text": "the Allied alert told us yeah so this is probably causing a SDK to perform",
    "start": "632339",
    "end": "639300"
  },
  {
    "text": "multiple retries and we think that all the all these multiple",
    "start": "639300",
    "end": "645899"
  },
  {
    "text": "retries are causing our Lambda to time out and by when our Lambda time out so",
    "start": "645899",
    "end": "652200"
  },
  {
    "text": "our API Gateway returns a 502 error and this will make our API unavailable for",
    "start": "652200",
    "end": "658260"
  },
  {
    "text": "the users yeah so how do how do we validate this so we'll check the timeout",
    "start": "658260",
    "end": "663660"
  },
  {
    "text": "cause or we will go to Lambda logs we'll check",
    "start": "663660",
    "end": "668940"
  },
  {
    "text": "the metrics and then we need to check also this specific error that's not",
    "start": "668940",
    "end": "674519"
  },
  {
    "text": "being caused by throttling so we can check Lambda logs for that as well we",
    "start": "674519",
    "end": "679920"
  },
  {
    "text": "need to identify the cause of this 500 errors in API Gateway so we can use our",
    "start": "679920",
    "end": "686100"
  },
  {
    "text": "tracing on x-ray and we also need to check the dynamodb metrics in our",
    "start": "686100",
    "end": "691620"
  },
  {
    "text": "dashboards so we need to start Gathering some evidence on the beginning of the",
    "start": "691620",
    "end": "697140"
  },
  {
    "start": "692000",
    "end": "742000"
  },
  {
    "text": "project we want to set up of these observability tools so something very",
    "start": "697140",
    "end": "702300"
  },
  {
    "text": "important for us is to have a dashboard for our stack application",
    "start": "702300",
    "end": "707760"
  },
  {
    "text": "where we can see all the relevant data for this stack yeah AWS is great it",
    "start": "707760",
    "end": "714120"
  },
  {
    "text": "gives you a lot of these dashboards but they are per service and as you're",
    "start": "714120",
    "end": "719279"
  },
  {
    "text": "debugging it sometimes you find out you find yourself like with tons of tabs",
    "start": "719279",
    "end": "724980"
  },
  {
    "text": "open in your browser checking things in different places so you want to set up this uh this dashboard where you can see",
    "start": "724980",
    "end": "732240"
  },
  {
    "text": "all this data and here you can see like all our services are Lambda duration",
    "start": "732240",
    "end": "737600"
  },
  {
    "text": "errors API Gateway dynamodb uh so okay let's start we started",
    "start": "737600",
    "end": "746459"
  },
  {
    "start": "742000",
    "end": "835000"
  },
  {
    "text": "looking at the cause of the Lambda timeout so when it comes to Lambda",
    "start": "746459",
    "end": "752339"
  },
  {
    "text": "timeouts we can check these data in two different places they're always",
    "start": "752339",
    "end": "758220"
  },
  {
    "text": "available as aggregated data or as cloudwatch metrics but we also want to",
    "start": "758220",
    "end": "765060"
  },
  {
    "text": "look into individual logs to understand what is what's uh what's the content of",
    "start": "765060",
    "end": "772380"
  },
  {
    "text": "the logs we might get some tracings there that will help us to identify so we can just go to Cloud watch insights",
    "start": "772380",
    "end": "780000"
  },
  {
    "text": "and we can perform some query that are filtering out all the timeouts there we go inside a cloud watch inside we can",
    "start": "780000",
    "end": "787079"
  },
  {
    "text": "use some very cool querying functionality there that will help us to understand better so on on this one we",
    "start": "787079",
    "end": "794700"
  },
  {
    "text": "just uh listing all the Lambda execution tanks and grouping there by one second",
    "start": "794700",
    "end": "800639"
  },
  {
    "text": "bucket so we can see the amount of executions that are taking up up to one",
    "start": "800639",
    "end": "807600"
  },
  {
    "text": "second two seconds all the way up to six that's our timeout that we have configured in Orlando and this is very",
    "start": "807600",
    "end": "814860"
  },
  {
    "text": "interesting because look at that only we can see that only a handful of executions are actually taking more than",
    "start": "814860",
    "end": "821100"
  },
  {
    "text": "one second and only four of them pass the the six second threshold and and",
    "start": "821100",
    "end": "828120"
  },
  {
    "text": "that reflects what we found there on the previous query that we only had four",
    "start": "828120",
    "end": "833399"
  },
  {
    "text": "timeouts problems so okay so this time out we suspect that is being caused by",
    "start": "833399",
    "end": "840540"
  },
  {
    "start": "835000",
    "end": "886000"
  },
  {
    "text": "dynamodb because we saw those alerts so let's have a look let's go to the dynamodb dashboard in our table and have",
    "start": "840540",
    "end": "848040"
  },
  {
    "text": "a look at that and here on the side we have the configuration of our table uh something that highlights here is",
    "start": "848040",
    "end": "854940"
  },
  {
    "text": "like the right capacity units for this table we set it to two uh sorry we set",
    "start": "854940",
    "end": "861360"
  },
  {
    "text": "it to two and if we look here on the Matrix you see that for a couple of times we're",
    "start": "861360",
    "end": "868920"
  },
  {
    "text": "crossing this threshold so this is causing our right request to",
    "start": "868920",
    "end": "875100"
  },
  {
    "text": "get throttled so this is pretty much expected uh given this configuration so",
    "start": "875100",
    "end": "880980"
  },
  {
    "text": "we didn't plan ahead that we need extra capacity for that all right",
    "start": "880980",
    "end": "886500"
  },
  {
    "start": "886000",
    "end": "947000"
  },
  {
    "text": "after that we let's have a look on x-ray so x-ray gives us this uh this view of",
    "start": "886500",
    "end": "894420"
  },
  {
    "text": "our system and how the components are related to each other through messaging",
    "start": "894420",
    "end": "901519"
  },
  {
    "text": "and something interesting here to see is like around the circle around each",
    "start": "901519",
    "end": "907440"
  },
  {
    "text": "surface uh we can see some different colors there so for like all the data we have from",
    "start": "907440",
    "end": "915360"
  },
  {
    "text": "the metrics uh from the logs for for this service the amount of requests that",
    "start": "915360",
    "end": "921360"
  },
  {
    "text": "got uh that succeeded failed uh",
    "start": "921360",
    "end": "926519"
  },
  {
    "text": "succeeded Affairs so green means like the request succeeded we got some like",
    "start": "926519",
    "end": "931680"
  },
  {
    "text": "red dots here it means like it failed with a 500 error so server error and we",
    "start": "931680",
    "end": "938699"
  },
  {
    "text": "have also some yellow data that that means it failed but that was a client error 400.",
    "start": "938699",
    "end": "945019"
  },
  {
    "text": "uh so let's zoom in into into that and check color I check the causes of uh our",
    "start": "945019",
    "end": "953760"
  },
  {
    "start": "947000",
    "end": "1010000"
  },
  {
    "text": "502 errors so we can see here on this particular Trace so the request reached",
    "start": "953760",
    "end": "959399"
  },
  {
    "text": "to our Lambda and the Lambda just takes six seconds and there is a timeout and",
    "start": "959399",
    "end": "966480"
  },
  {
    "text": "then we'll make our API Gateway to fail and okay that's fine we can see here on",
    "start": "966480",
    "end": "972180"
  },
  {
    "text": "the timeline it's consuming all the time so this is a timeout error fine uh but",
    "start": "972180",
    "end": "978000"
  },
  {
    "text": "now we zoom in and we look at this 500 errors so this is this is very different",
    "start": "978000",
    "end": "984000"
  },
  {
    "text": "and is unexpected we can see that the request gets to the dynamodb table",
    "start": "984000",
    "end": "991260"
  },
  {
    "text": "uh uh it's not timing out yeah but our request to dino DB is returning a 400.",
    "start": "991260",
    "end": "999959"
  },
  {
    "text": "status code there so okay this is not related to the throttling we saw and",
    "start": "999959",
    "end": "1005480"
  },
  {
    "text": "this looks more like a data error yeah so we need to investigate that so okay",
    "start": "1005480",
    "end": "1011440"
  },
  {
    "start": "1010000",
    "end": "1060000"
  },
  {
    "text": "we'll go back to cloudwatch let's have a better look at that so filtering out oh",
    "start": "1011440",
    "end": "1017480"
  },
  {
    "text": "for this Lambda are the areas that happen and oops again and then soon we",
    "start": "1017480",
    "end": "1024438"
  },
  {
    "text": "can we found this log entry so validation exception so something on the",
    "start": "1024439",
    "end": "1032000"
  },
  {
    "text": "requested dynamodb fails like what can be so we did a bit more investigation of",
    "start": "1032000",
    "end": "1038298"
  },
  {
    "text": "what we found was like it's a problem with our integration test the way they're running concurrently so in some",
    "start": "1038299",
    "end": "1045438"
  },
  {
    "text": "cases we're trying to update a record that had already been deleted all right",
    "start": "1045439",
    "end": "1051020"
  },
  {
    "text": "so we're not handling this error correctly to return a proper error code and not",
    "start": "1051020",
    "end": "1057340"
  },
  {
    "text": "chaining this area down to to all the way to API Gateway so okay so we come to",
    "start": "1057340",
    "end": "1063500"
  },
  {
    "start": "1060000",
    "end": "1191000"
  },
  {
    "text": "the conclusions all right so using observability what helped us to identify",
    "start": "1063500",
    "end": "1069799"
  },
  {
    "text": "pretty quickly in a couple of minutes checking our lives so we identified the",
    "start": "1069799",
    "end": "1076820"
  },
  {
    "text": "Dynamo DB throttles so uh they're being caused by a right",
    "start": "1076820",
    "end": "1084500"
  },
  {
    "text": "capacity is limited and this is causing our API Gateway to return a 502. and",
    "start": "1084500",
    "end": "1093559"
  },
  {
    "text": "also we got these unhandled errors yeah so those are the problems there were like low provision capacity on a Dynamo",
    "start": "1093559",
    "end": "1101539"
  },
  {
    "text": "GB uh on on our Lambda itself the SDK we",
    "start": "1101539",
    "end": "1106580"
  },
  {
    "text": "didn't configure uh the max number of retries we wanted and the the 500 is uh",
    "start": "1106580",
    "end": "1113780"
  },
  {
    "text": "okay we haven't handled that error so what were the resolutions in our case for the Dynamo GB we decided to use the",
    "start": "1113780",
    "end": "1122000"
  },
  {
    "text": "on-demand provisioning so Lambda will handle the provisioning",
    "start": "1122000",
    "end": "1127340"
  },
  {
    "text": "for AWS to handle the provisioning for us only one note when using this you",
    "start": "1127340",
    "end": "1135740"
  },
  {
    "text": "might want to put some throttling on your API Gateway level because you want",
    "start": "1135740",
    "end": "1140780"
  },
  {
    "text": "we still want to prevent users to for to abusing the system otherwise you get",
    "start": "1140780",
    "end": "1146299"
  },
  {
    "text": "some surprising on your on your bill at the end of the month yeah for the second",
    "start": "1146299",
    "end": "1151520"
  },
  {
    "text": "resolution on the timeout so we went to our AWS SDK and we changed the max retry",
    "start": "1151520",
    "end": "1160100"
  },
  {
    "text": "configuration to three so we said okay with three I would take",
    "start": "1160100",
    "end": "1165200"
  },
  {
    "text": "Max 350 milliseconds on that operation and if in three retries it doesn't work",
    "start": "1165200",
    "end": "1172039"
  },
  {
    "text": "we want to fail fast okay so this will give a quicker feedback to the user and",
    "start": "1172039",
    "end": "1178220"
  },
  {
    "text": "be preventing timeouts and then for the 500 errors we fix the",
    "start": "1178220",
    "end": "1183380"
  },
  {
    "text": "integration test and then in our API we properly handling the error where we're trying to modify something that no",
    "start": "1183380",
    "end": "1190460"
  },
  {
    "text": "longer exists yeah and if we go back to after doing these changes we go back to",
    "start": "1190460",
    "end": "1197960"
  },
  {
    "start": "1191000",
    "end": "1225000"
  },
  {
    "text": "dynamodb dashboard and then we can see before how it was so we had like oh the blue line is like",
    "start": "1197960",
    "end": "1206620"
  },
  {
    "text": "uh the consume capacity and the red one is showing how many times they got",
    "start": "1206620",
    "end": "1212059"
  },
  {
    "text": "throttled and that is the after after we switched to on demand so we get this",
    "start": "1212059",
    "end": "1217640"
  },
  {
    "text": "burst on requests but we don't get throttled anymore",
    "start": "1217640",
    "end": "1222940"
  },
  {
    "text": "yeah so what we learned so far uh we were able to identify understand and fix",
    "start": "1224600",
    "end": "1232220"
  },
  {
    "start": "1225000",
    "end": "1269000"
  },
  {
    "text": "these changes quickly right but the best part about that is like we didn't have",
    "start": "1232220",
    "end": "1237799"
  },
  {
    "text": "to change anything on the codes to identify that so there were no like",
    "start": "1237799",
    "end": "1243559"
  },
  {
    "text": "change this deploy that wait and then check again yeah we also didn't need to",
    "start": "1243559",
    "end": "1250400"
  },
  {
    "text": "run anything locally and how this was possible because all these observability",
    "start": "1250400",
    "end": "1255440"
  },
  {
    "text": "tools they were that in advance for us we're just waiting for when we need it",
    "start": "1255440",
    "end": "1260720"
  },
  {
    "text": "I'll hand back to Peter now thanks thank you thanks thanks very much",
    "start": "1260720",
    "end": "1266419"
  },
  {
    "text": "um so just stepping back a little bit um girls gone through a specific example",
    "start": "1266419",
    "end": "1272360"
  },
  {
    "start": "1269000",
    "end": "1328000"
  },
  {
    "text": "there but what does uh what does AWS give you for native observability so first of all obviously logging super",
    "start": "1272360",
    "end": "1279679"
  },
  {
    "text": "important but with the insights dashboard so you've got a a pretty powerful sql-like syntax to to some",
    "start": "1279679",
    "end": "1286700"
  },
  {
    "text": "fairly sophisticated queries against your logs uh it gives you metrics so you get built-in metrics for all the",
    "start": "1286700",
    "end": "1291860"
  },
  {
    "text": "services but also the ability to build your own custom metrics your own custom metric dashboard uh embedded metrics",
    "start": "1291860",
    "end": "1298280"
  },
  {
    "text": "format is very powerful as well it gives you the ability to build dashboards and configure widgets together alarming of course another",
    "start": "1298280",
    "end": "1304940"
  },
  {
    "text": "super important thing for observability uh canaries uh these are quite interesting so this is using Cloud watch",
    "start": "1304940",
    "end": "1311000"
  },
  {
    "text": "synthetics to give you a Lambda with a headless Chrome browser browser so you can kind of ping your endpoints uh ping",
    "start": "1311000",
    "end": "1318080"
  },
  {
    "text": "your uis and make sure they're functioning correctly and also look at the the timing of those and of course",
    "start": "1318080",
    "end": "1323320"
  },
  {
    "text": "distributed tracing with x-ray that gills is given an example of of course it'd be remiss not to uh",
    "start": "1323320",
    "end": "1330620"
  },
  {
    "start": "1328000",
    "end": "1401000"
  },
  {
    "text": "mention that there are a bunch of alternatives to Native observability on AWS there's what you might classify as",
    "start": "1330620",
    "end": "1337220"
  },
  {
    "text": "the established providers so the likes of New Relic datadog Sumo logic and so on and what you might then classify as",
    "start": "1337220",
    "end": "1344360"
  },
  {
    "text": "new entrance so um lumigo apps to go on honeycomb and so on these are all great tools they're",
    "start": "1344360",
    "end": "1350539"
  },
  {
    "text": "very very powerful they come at a cost the other approach you might take is to roll your own observability so using",
    "start": "1350539",
    "end": "1358340"
  },
  {
    "text": "using an out stack maybe some elasticsearch and so on that's for the brave",
    "start": "1358340",
    "end": "1364520"
  },
  {
    "text": "um maybe crazy if you're going into AWS and building new workloads really look",
    "start": "1364520",
    "end": "1369919"
  },
  {
    "text": "at the tools that are there don't build this stuff yourself of course if you've got an existing investment in this",
    "start": "1369919",
    "end": "1376340"
  },
  {
    "text": "technology and you're bringing workloads across then of course go ahead and do that but look at the power that you have",
    "start": "1376340",
    "end": "1383240"
  },
  {
    "text": "uh natively these tools are really really powerful they come at a cost you also need to",
    "start": "1383240",
    "end": "1389000"
  },
  {
    "text": "consider your uh your data transfer fees and so on when you're using tools like this our position is normally to go with",
    "start": "1389000",
    "end": "1396200"
  },
  {
    "text": "Cloud watch and use the native tools wherever we possibly can so what do you get out of the box for",
    "start": "1396200",
    "end": "1401960"
  },
  {
    "start": "1401000",
    "end": "1472000"
  },
  {
    "text": "cloud watch I suppose the first thing is to understand is that it's a toolkit",
    "start": "1401960",
    "end": "1407179"
  },
  {
    "text": "and it doesn't try and give you the whole kind of application view that you might get from some of those other tools",
    "start": "1407179",
    "end": "1412760"
  },
  {
    "text": "which have gone up a level it's a toolkit to allow you to build observability Solutions yourself so there's some work that you need to put",
    "start": "1412760",
    "end": "1418820"
  },
  {
    "text": "in to make cloudwatch work for you um you get metrics generations for all",
    "start": "1418820",
    "end": "1424820"
  },
  {
    "text": "services automatically which is great um you get lots of dashboards but typically your dashboards",
    "start": "1424820",
    "end": "1431960"
  },
  {
    "text": "um are oriented by service which is fair because AWS will have the service-based",
    "start": "1431960",
    "end": "1437000"
  },
  {
    "text": "view of the world whereas us as Architects and implementers will definitely have a more of an application",
    "start": "1437000",
    "end": "1443000"
  },
  {
    "text": "eccentric view of the world because we understand our application context AWS can't obviously",
    "start": "1443000",
    "end": "1448460"
  },
  {
    "text": "and we don't get any alarms out of the box which again is probably Fair uh",
    "start": "1448460",
    "end": "1453799"
  },
  {
    "text": "the alarming that you want to do is really based on your understanding of your application context right so am I",
    "start": "1453799",
    "end": "1460159"
  },
  {
    "text": "able to tolerate some 400 errors on API Gateway am I able to tolerate some throttling on my Lambda functions or is",
    "start": "1460159",
    "end": "1466880"
  },
  {
    "text": "that not acceptable in my context so what level am I going to set my alerts at",
    "start": "1466880",
    "end": "1472700"
  },
  {
    "start": "1472000",
    "end": "1593000"
  },
  {
    "text": "um to get the best out of cloud watch uh you really need to understand uh",
    "start": "1472700",
    "end": "1477980"
  },
  {
    "text": "research and understand all of the available metrics now obviously there's well over 200 Services now in AWS all of",
    "start": "1477980",
    "end": "1484580"
  },
  {
    "text": "them have metrics you're not going to need to understand all of those but for the services that you are using understand the metrics that are",
    "start": "1484580",
    "end": "1490640"
  },
  {
    "text": "available to you so you can take advantage of those you're going to need to decide your thresholds what level do I want to alert",
    "start": "1490640",
    "end": "1497059"
  },
  {
    "text": "on you're also then going to need to write your infrastructure as code for your",
    "start": "1497059",
    "end": "1502340"
  },
  {
    "text": "application dashboards and you're going to need to write infrastructure as code for your service metric alarms",
    "start": "1502340",
    "end": "1507919"
  },
  {
    "text": "now you can do this in the AWS console it's perfectly possible to go in and configure stuff in the console but",
    "start": "1507919",
    "end": "1513980"
  },
  {
    "text": "typically uh the view we would take is never to make mutating changes through",
    "start": "1513980",
    "end": "1519020"
  },
  {
    "text": "the console treat the console as read only and make all of your changes through infrastructure as code using tools like cdk or terraform or whatever",
    "start": "1519020",
    "end": "1527720"
  },
  {
    "text": "your your tool of choices serverless framework and so on you're going to need to treat your",
    "start": "1527720",
    "end": "1533299"
  },
  {
    "text": "observability uh in the same way as you treat your unit tests as you write new code you're going to write new tests",
    "start": "1533299",
    "end": "1539779"
  },
  {
    "text": "everybody has 100 test coverage on all of their code right good man there you go well at least one",
    "start": "1539779",
    "end": "1546140"
  },
  {
    "text": "person does all right but as you write new code you write more unit tests right this is part of developing part of",
    "start": "1546140",
    "end": "1552080"
  },
  {
    "text": "modern development is to make sure we do that so if you're writing event-driven applications on AWS you need to consider",
    "start": "1552080",
    "end": "1558919"
  },
  {
    "text": "your observability in the same way as you maintain and keep your unit tests up to date so once you've got a kind of",
    "start": "1558919",
    "end": "1564559"
  },
  {
    "text": "umbrella of observability if you add a new Lambda function okay I need to update my alerting what's the alerting",
    "start": "1564559",
    "end": "1570740"
  },
  {
    "text": "on this I have an sqs topic let's say I need to figure out what observability I want on that particular Topic in the",
    "start": "1570740",
    "end": "1577640"
  },
  {
    "text": "context of my application and then you're going to make sure that you need to make sure that you do that for every stack that comprises your",
    "start": "1577640",
    "end": "1583520"
  },
  {
    "text": "application copy and paste is probably the wrong word but uh you know what I mean that's a lot of hard work",
    "start": "1583520",
    "end": "1589220"
  },
  {
    "text": "but it's worth it to have the observability um definitely point you to if you're not",
    "start": "1589220",
    "end": "1595340"
  },
  {
    "start": "1593000",
    "end": "1620000"
  },
  {
    "text": "familiar with the well architected framework definitely point you towards this um it's very well written and the",
    "start": "1595340",
    "end": "1601940"
  },
  {
    "text": "operational excellence pillar is the one you want to look at the covers observability if you're doing serverless work",
    "start": "1601940",
    "end": "1608360"
  },
  {
    "text": "definitely look at the serverless lens as applied to those pillars that's a very well written written document and",
    "start": "1608360",
    "end": "1614720"
  },
  {
    "text": "it gives provides very good guidance on the metrics but you still got to pick your thresholds",
    "start": "1614720",
    "end": "1620360"
  },
  {
    "start": "1620000",
    "end": "1638000"
  },
  {
    "text": "so what does infrastructure's code look like so if you're if you're writing um just raw cloudwatch Json uh this is",
    "start": "1620360",
    "end": "1627500"
  },
  {
    "text": "an alarm for Lambda throttling so there's a bit of work to do uh if you're going to write those or every single",
    "start": "1627500",
    "end": "1633799"
  },
  {
    "text": "Lambda function in your um in your system so we asked ourselves having done",
    "start": "1633799",
    "end": "1639860"
  },
  {
    "start": "1638000",
    "end": "1690000"
  },
  {
    "text": "observability on a number of systems can we automate this can we make this uh much much easier to give us",
    "start": "1639860",
    "end": "1646100"
  },
  {
    "text": "observability uh the way we want it on AWS without having to go through a whole",
    "start": "1646100",
    "end": "1651919"
  },
  {
    "text": "bunch of work every time so if you consider what a serverless application looks like",
    "start": "1651919",
    "end": "1657700"
  },
  {
    "text": "broadly it's going to look like a number of stacks those Stacks are expressed",
    "start": "1657700",
    "end": "1663320"
  },
  {
    "text": "usually either in procedural code with cdk or in something like serverless",
    "start": "1663320",
    "end": "1669980"
  },
  {
    "text": "framework or AWS Sam which are yaml based configurations",
    "start": "1669980",
    "end": "1675080"
  },
  {
    "text": "each of those stocks and comprised of a number of resources such as Lambda functions queues tables and so on and",
    "start": "1675080",
    "end": "1682400"
  },
  {
    "text": "what we want to be able to do is to magically generate alarms and dashboards for each application with the minimal",
    "start": "1682400",
    "end": "1687559"
  },
  {
    "text": "amount of work so that led us to develop this piece of Open Source which is called slick watch",
    "start": "1687559",
    "end": "1695480"
  },
  {
    "start": "1690000",
    "end": "1730000"
  },
  {
    "text": "so the idea around slick watch and the philosophy is put the plug in into your system it'll give you",
    "start": "1695480",
    "end": "1702620"
  },
  {
    "text": "observability out of the box with sensible defaults so the minimum amount of work of course you can configure it",
    "start": "1702620",
    "end": "1708200"
  },
  {
    "text": "but minimum amount of work to get observability up and going and at the moment we're covering AWS Lambda API",
    "start": "1708200",
    "end": "1715100"
  },
  {
    "text": "Gateway Dynamo Kinesis sqs step functions ECS SNS and eventbridge and",
    "start": "1715100",
    "end": "1722900"
  },
  {
    "text": "we're supporting the serverless framework AWS Sam very shortly and cdk",
    "start": "1722900",
    "end": "1730039"
  },
  {
    "start": "1730000",
    "end": "1788000"
  },
  {
    "text": "so how does it work um it works pretty much the way you'd expect I think so if we look at the case",
    "start": "1730039",
    "end": "1735980"
  },
  {
    "text": "of serverless framework or AWS Sam both of those are yaml configurations when",
    "start": "1735980",
    "end": "1741320"
  },
  {
    "text": "you run a deploy with these Frameworks uh what happens is under the hood it takes your your yaml configuration and",
    "start": "1741320",
    "end": "1748220"
  },
  {
    "text": "it goes off and builds a big chunk of Json and that big chunk of Json is then supplied to cloud formation which then",
    "start": "1748220",
    "end": "1754159"
  },
  {
    "text": "deploys or updates your resources in AWS so what what slickwatch does is to hook",
    "start": "1754159",
    "end": "1760640"
  },
  {
    "text": "into the framework lifecycle events on deploy and before the deployment happens",
    "start": "1760640",
    "end": "1766240"
  },
  {
    "text": "interpret the the the the Json for each service it discovers in there that is uh",
    "start": "1766240",
    "end": "1772159"
  },
  {
    "text": "that that it knows about build a dashboard build some uh alerts augment",
    "start": "1772159",
    "end": "1777980"
  },
  {
    "text": "that Json so you go from Big Json to much bigger Jason but you've got your observability baked in from day one and",
    "start": "1777980",
    "end": "1783380"
  },
  {
    "text": "that is then what gets deployed into uh into AWS",
    "start": "1783380",
    "end": "1788559"
  },
  {
    "start": "1788000",
    "end": "1955000"
  },
  {
    "text": "so what does it look like so before slick watch you're going to come in uh to AWS and look at your console and",
    "start": "1788659",
    "end": "1794179"
  },
  {
    "text": "you're going to have no alarms uh just just a blank screen if you just add this plugin to your uh to your project uh",
    "start": "1794179",
    "end": "1801980"
  },
  {
    "text": "you're going to get a view like this uh which gives you your uh your alarms by service so API",
    "start": "1801980",
    "end": "1807620"
  },
  {
    "text": "Gateway Lambda and so on just happens to be in this system and then a chronological view of your alarms uh on",
    "start": "1807620",
    "end": "1813559"
  },
  {
    "text": "the right hand right hand panel there it then gives you a bunch of drill Downs so you can drill into say API Gateway",
    "start": "1813559",
    "end": "1819440"
  },
  {
    "text": "here's my 400 errors from API Gateway um yeah and also if we're looking at sqs",
    "start": "1819440",
    "end": "1825799"
  },
  {
    "text": "it's gonna it's gonna drill into sqs and show us the messages the message age and the kind of things you'd like to see",
    "start": "1825799",
    "end": "1832460"
  },
  {
    "text": "um in uh from from each of these services a roll over here so if anyone's",
    "start": "1832460",
    "end": "1837620"
  },
  {
    "text": "interested in this it's all open source it's free it's on github.com slickwatch",
    "start": "1837620",
    "end": "1844399"
  },
  {
    "text": "um and there's a whole bunch of documentation in here on what we uh what the plugin will actually do for you so",
    "start": "1844460",
    "end": "1849679"
  },
  {
    "text": "for Lambda we're doing errors throttles duration invocations uh both alerts and widgets uh API Gateway 500 400 errors",
    "start": "1849679",
    "end": "1858159"
  },
  {
    "text": "dynamodb read and write throttles user and system errors Kinesis is giving us the uh reading read and write provision",
    "start": "1858159",
    "end": "1865159"
  },
  {
    "text": "exceptions uh put and get record sqs message age in-flight step functions",
    "start": "1865159",
    "end": "1870980"
  },
  {
    "text": "looking at throttling again fargate some basic Telemetry on memory and CPU utilization",
    "start": "1870980",
    "end": "1877039"
  },
  {
    "text": "uh SNS so failed and filtered notifications uh event Bridge",
    "start": "1877039",
    "end": "1882500"
  },
  {
    "text": "failed invocations throttle rules and so on so we tried to make it as comprehensive",
    "start": "1882500",
    "end": "1888919"
  },
  {
    "text": "possible because we use this on our projects uh oh let me go yep",
    "start": "1888919",
    "end": "1895399"
  },
  {
    "text": "steady on um so this is the this is this looks like a complicated view but this is the",
    "start": "1895399",
    "end": "1901220"
  },
  {
    "text": "everything on a page view so for my stack that I've deployed just give me everything on a page of course you can",
    "start": "1901220",
    "end": "1907640"
  },
  {
    "text": "configure this out and rip out some that from some some of the widgets here but the point about this is that you're able",
    "start": "1907640",
    "end": "1913640"
  },
  {
    "text": "to kind of establish mentally a picture of the normative behavior of the system just by eyeballing one screen rather",
    "start": "1913640",
    "end": "1920240"
  },
  {
    "text": "than jumping between console window to console window if you've got five or six tabs open you're trying to debug something you might even call that AWS",
    "start": "1920240",
    "end": "1927679"
  },
  {
    "text": "console Hal right um the other the other feature is",
    "start": "1927679",
    "end": "1933380"
  },
  {
    "text": "absolutely key of course in any observability tool is to be able to have alerting delivered to a Channel of your",
    "start": "1933380",
    "end": "1938779"
  },
  {
    "text": "choice so by adding and just by simply adding an SNS topic to the configuration uh slickwatch will by default then",
    "start": "1938779",
    "end": "1945860"
  },
  {
    "text": "deliver all of your alerts to that topic and you can feed them forward then into chatbot Ops Genie page Duty slack",
    "start": "1945860",
    "end": "1951919"
  },
  {
    "text": "whatever whatever suits you so configuration as I said the",
    "start": "1951919",
    "end": "1957260"
  },
  {
    "start": "1955000",
    "end": "2012000"
  },
  {
    "text": "philosophy behind slickwatch is to be open source Community plugin that comes",
    "start": "1957260",
    "end": "1962360"
  },
  {
    "text": "with same defaults so you add the plugin and you get observability native observability on AWS without doing",
    "start": "1962360",
    "end": "1967760"
  },
  {
    "text": "anything of course it's fully configurable for configurable as well you can turn off what you don't like or",
    "start": "1967760",
    "end": "1973340"
  },
  {
    "text": "configure your thresholds as well if they don't if the if the defaults don't suit and so just flipping over to the",
    "start": "1973340",
    "end": "1979039"
  },
  {
    "text": "readme here you'll see um there's a bunch of documentation on all of that um and just a note that we also support",
    "start": "1979039",
    "end": "1985820"
  },
  {
    "text": "configuration of Lambda at the global level and at the per function level I suppose actually just on the readme",
    "start": "1985820",
    "end": "1992419"
  },
  {
    "text": "here um cloudwatch isn't free uh it does come at a cost as you as you add",
    "start": "1992419",
    "end": "1997519"
  },
  {
    "text": "observability resources into Cloud watch you are going to be charged for those now typically that's going to be fractional compared to the other",
    "start": "1997519",
    "end": "2003580"
  },
  {
    "text": "resources you're putting out but I just need to put that disclaimer out there that it's not free and you need to understand the the pricing there",
    "start": "2003580",
    "end": "2011320"
  },
  {
    "text": "okay so how do you get started with slickwatch it's very very simple if you're using the serverless framework npm install uh the plugin and then add",
    "start": "2011320",
    "end": "2019720"
  },
  {
    "start": "2012000",
    "end": "2091000"
  },
  {
    "text": "the plugin to your configuration that's it that will give you observability optionally you could use the",
    "start": "2019720",
    "end": "2024940"
  },
  {
    "text": "configuration or optionally you can add an SNS topic as the alarm destination",
    "start": "2024940",
    "end": "2030880"
  },
  {
    "text": "and I can just show an example of that here if I just flip over here to code so this is probably the simplest",
    "start": "2030880",
    "end": "2036840"
  },
  {
    "text": "serverless.yaml you could have with a single Lambda function and you can see here on the uh",
    "start": "2036840",
    "end": "2042760"
  },
  {
    "text": "on on the left here this is before after add that one line in and you get a whole",
    "start": "2042760",
    "end": "2048220"
  },
  {
    "text": "bunch of observability um what does it actually do so",
    "start": "2048220",
    "end": "2053320"
  },
  {
    "text": "bear with me a second",
    "start": "2053320",
    "end": "2056460"
  },
  {
    "text": "so this is the this is the Json that's produced um from that uh from the compilation",
    "start": "2059320",
    "end": "2064480"
  },
  {
    "text": "process of that yaml file and if we just scroll down so the one on on the left hand side is before this side is with",
    "start": "2064480",
    "end": "2072398"
  },
  {
    "text": "um and if I just kind of skip down here a bit you'll see uh the result of adding that plug-in is a huge big additional",
    "start": "2072399",
    "end": "2078760"
  },
  {
    "text": "block of Json that's adding in dashboards um alarms and so on that we really don't",
    "start": "2078760",
    "end": "2084520"
  },
  {
    "text": "want to manage ourselves hopefully get the point that",
    "start": "2084520",
    "end": "2089618"
  },
  {
    "text": "um okay so um if you're not using the service framework that's fine um we have a release candidate for Sam",
    "start": "2089619",
    "end": "2097000"
  },
  {
    "start": "2091000",
    "end": "2118000"
  },
  {
    "text": "which will be coming out and being merged shortly uh it supports uh vanilla cloud formation and cdk and it's",
    "start": "2097000",
    "end": "2104020"
  },
  {
    "text": "available in the serverless application repository uh SAR terraform palumi we don't support the moment and the reason",
    "start": "2104020",
    "end": "2110680"
  },
  {
    "text": "is they don't use cloud formation under the hood but if anyone's interested in getting involved and contributing uh",
    "start": "2110680",
    "end": "2116020"
  },
  {
    "text": "we'd love to we'd love to talk to you so these are these are the next Services we're going to be adding uh appsync",
    "start": "2116020",
    "end": "2122079"
  },
  {
    "start": "2118000",
    "end": "2133000"
  },
  {
    "text": "cloudfront Lambda Edge RDS and more uh if there's stuff you'd like to see supported send us an issue uh even",
    "start": "2122079",
    "end": "2129220"
  },
  {
    "text": "better send us a pull request so just to wrap up then",
    "start": "2129220",
    "end": "2134500"
  },
  {
    "start": "2133000",
    "end": "2170000"
  },
  {
    "text": "um when you're building event driven systems observability is your frame that's the one takeaway uh I hope that",
    "start": "2134500",
    "end": "2140560"
  },
  {
    "text": "you're going to get today treat your observability like you treat your unit tests maintain it care and feed it and",
    "start": "2140560",
    "end": "2146920"
  },
  {
    "text": "it will pay you back you definitely want to know when your services are failing before your users do",
    "start": "2146920",
    "end": "2152440"
  },
  {
    "text": "and it can save you from hundreds of hours of debugging Cloud watch is definitely a super",
    "start": "2152440",
    "end": "2158140"
  },
  {
    "text": "powerful tool it's a toolkit but you need to put some some effort into it automations can take away some of that",
    "start": "2158140",
    "end": "2163900"
  },
  {
    "text": "pain and tools like stickwatch can help you without automation so we'd love you to give feedback let's all make it better",
    "start": "2163900",
    "end": "2170380"
  },
  {
    "start": "2170000",
    "end": "2188000"
  },
  {
    "text": "thank you",
    "start": "2170380",
    "end": "2173279"
  }
]