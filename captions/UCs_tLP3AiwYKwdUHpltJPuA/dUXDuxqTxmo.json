[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "[Music]",
    "start": "940",
    "end": "7780"
  },
  {
    "text": "so my name is James bezik I'm a principal developer advocate in AWS serverless I've been a serverless geek",
    "start": "12360",
    "end": "19260"
  },
  {
    "text": "for quite a few years and before I was a DA I was a software developer for quite a long time as well as a product manager",
    "start": "19260",
    "end": "26160"
  },
  {
    "text": "but the most important thing on this slide is my email address and Twitter handle so after the conference if you're",
    "start": "26160",
    "end": "31920"
  },
  {
    "text": "building anything and you have any questions please reach out to me and I'll do my very best to help",
    "start": "31920",
    "end": "37860"
  },
  {
    "start": "37000",
    "end": "77000"
  },
  {
    "text": "so we've got 40 minutes today and I'm going to spend about 10 or 15 minutes going through some introductory ideas",
    "start": "37860",
    "end": "43559"
  },
  {
    "text": "and show you some best practices and ways you can think about serverless design and this is a no code talk so",
    "start": "43559",
    "end": "50399"
  },
  {
    "text": "you'll find as you get into serverless there's very little code I'm really focusing on the architecture I'll talk",
    "start": "50399",
    "end": "56699"
  },
  {
    "text": "about some common ways that developers think about servers and then how you change that as you move towards",
    "start": "56699",
    "end": "62219"
  },
  {
    "text": "serverless and then really the purpose today more than anything is to show you some of the architectural best practices",
    "start": "62219",
    "end": "68760"
  },
  {
    "text": "that you can use and immediately put into effect as you build applications but most of the time we'll be talking",
    "start": "68760",
    "end": "74640"
  },
  {
    "text": "through actual examples and servers become this Atomic unit in our thinking when we're building applications",
    "start": "74640",
    "end": "82020"
  },
  {
    "start": "77000",
    "end": "204000"
  },
  {
    "text": "but there are some difficult problems to handle with this older way of building apps so it's difficult to scale so a",
    "start": "82020",
    "end": "89580"
  },
  {
    "text": "session state is tied to a server but if you scale very rapidly like amazon.com does how do you keep up with that",
    "start": "89580",
    "end": "96180"
  },
  {
    "text": "also it can be very wasteful so if you're not using 100 of all of the CPU",
    "start": "96180",
    "end": "101460"
  },
  {
    "text": "and network capacity and everything that you've got in your server you're not really using everything that you're",
    "start": "101460",
    "end": "106740"
  },
  {
    "text": "paying for there's also a lot to manage that's not directly related to the code in your",
    "start": "106740",
    "end": "112500"
  },
  {
    "text": "application so you've got things like operating systems networking security and so forth and so it can really be an",
    "start": "112500",
    "end": "119399"
  },
  {
    "text": "ongoing task just to keep the server alive and it's not necessarily something you want to focus on as a developer",
    "start": "119399",
    "end": "127340"
  },
  {
    "text": "so here's an example so to run a production production website with a moderate amount of traffic you'd need",
    "start": "127500",
    "end": "133200"
  },
  {
    "text": "this kind of configuration this is a reference architecture I pulled for work from WordPress that shows the best",
    "start": "133200",
    "end": "139140"
  },
  {
    "text": "practice layout within AWS but really it could apply to any lamp style application anything with Linux Apache",
    "start": "139140",
    "end": "146099"
  },
  {
    "text": "MySQL and PHP so every time there's a web page request here the web server is",
    "start": "146099",
    "end": "151800"
  },
  {
    "text": "querying a relational database for the page structure loading plugins and themes and then serving this HTML page",
    "start": "151800",
    "end": "158940"
  },
  {
    "text": "and that's really a lot of work going on when really many of the pages may just be static and not changing that",
    "start": "158940",
    "end": "164400"
  },
  {
    "text": "frequently and so when we talk about serverless people think we're just removing ec2",
    "start": "164400",
    "end": "170160"
  },
  {
    "text": "instances or other Hardware hardware-based servers that you have in your on-premise environment but actually",
    "start": "170160",
    "end": "176700"
  },
  {
    "text": "there's a lot of other stuff too there's security groups the subnets auto scaling policies and you really need a cloud",
    "start": "176700",
    "end": "182640"
  },
  {
    "text": "architect or a devops professional to help you if you're running this style of application",
    "start": "182640",
    "end": "187680"
  },
  {
    "text": "and so in serverless more than anything we're trying to take this all away and",
    "start": "187680",
    "end": "192720"
  },
  {
    "text": "help you focus on the parts of your applications that your customers see the differentiating parts that your",
    "start": "192720",
    "end": "198420"
  },
  {
    "text": "customers care about so this will be the last server that we see for the rest of this presentation",
    "start": "198420",
    "end": "205760"
  },
  {
    "start": "204000",
    "end": "604000"
  },
  {
    "text": "so where do you start with serverless well I think it helps to really start with thinking about Lambda this is the",
    "start": "205860",
    "end": "211980"
  },
  {
    "text": "compute part of the serverless offering AWS and if you know some of the attributes of Lambda this can help",
    "start": "211980",
    "end": "217739"
  },
  {
    "text": "inform how you think about building your applications and so Lambda runs on demand if you're",
    "start": "217739",
    "end": "223680"
  },
  {
    "text": "not using it you don't pay for it something has to cause your application to trigger and Lambda function to run",
    "start": "223680",
    "end": "229799"
  },
  {
    "text": "it supports many run times so you can use node python.net Ruby really whatever",
    "start": "229799",
    "end": "235080"
  },
  {
    "text": "you put prefer to bring you can also bring custom runtimes so we have customers running PHP and even even a",
    "start": "235080",
    "end": "241379"
  },
  {
    "text": "COBOL in some cases it responds to events so the events are the trigger for these functions that",
    "start": "241379",
    "end": "246900"
  },
  {
    "text": "what causes your code to run it's stateless so when the the function",
    "start": "246900",
    "end": "252599"
  },
  {
    "text": "first runs it doesn't know about anything that happened before and so you have to factor that into how you build",
    "start": "252599",
    "end": "257639"
  },
  {
    "text": "applications and it scales automatically so whether you're calling your function once a year",
    "start": "257639",
    "end": "262680"
  },
  {
    "text": "or 100 times a minute the Lambda service in the background provision to the resources to make sure that it runs",
    "start": "262680",
    "end": "268860"
  },
  {
    "text": "reliably and On Queue so knowing some of those things and seeing how people have built",
    "start": "268860",
    "end": "274860"
  },
  {
    "text": "applications over the years I've discovered there are some best practices in thinking about how you start to put",
    "start": "274860",
    "end": "280020"
  },
  {
    "text": "this together one is to avoid lifting and shifting this is taking the code from your",
    "start": "280020",
    "end": "285660"
  },
  {
    "text": "server-based environment picking it up and just dropping it in the Lambda function and if you do that that'll work",
    "start": "285660",
    "end": "291180"
  },
  {
    "text": "but you're not really getting the benefits of a serverless app as you'll see a little bit later",
    "start": "291180",
    "end": "296940"
  },
  {
    "text": "it's often good to build one Lambda function per purpose so these are functions you want to keep your",
    "start": "296940",
    "end": "302340"
  },
  {
    "text": "functions small it makes it easier for them to test makes it better for reuse when you want to use the functions in",
    "start": "302340",
    "end": "307919"
  },
  {
    "text": "other projects functions being small can often mean that these are 20 to 50 lines of Code by",
    "start": "307919",
    "end": "313560"
  },
  {
    "text": "the way so if you write very short Lambda functions that can seem a bit weird when you first start getting into serverless but trust me it's kind of",
    "start": "313560",
    "end": "320280"
  },
  {
    "text": "normal you can choose the right runtime so in normal based server-based applications",
    "start": "320280",
    "end": "326280"
  },
  {
    "text": "often you're building around one runtime because you've got a server running everything and often that means forcing",
    "start": "326280",
    "end": "332100"
  },
  {
    "text": "your team to use one runtime for everything because at workloads and serverless tend to be a Federation of",
    "start": "332100",
    "end": "338820"
  },
  {
    "text": "different functions you can actually pick and choose your runtimes you could say I want to use Python for the data",
    "start": "338820",
    "end": "344460"
  },
  {
    "text": "intensive parts of the workload or I want to use node where I'm handling Json for example",
    "start": "344460",
    "end": "350340"
  },
  {
    "text": "and you want to think about functions as being Plumbing between different services that you're being used so this",
    "start": "350340",
    "end": "356100"
  },
  {
    "text": "is really just the business logic and it's not the major part of your application",
    "start": "356100",
    "end": "361979"
  },
  {
    "text": "and the thing I want to throw in at the end here is that security still matters so we say AWS that security is job",
    "start": "361979",
    "end": "368520"
  },
  {
    "text": "number one but really for all of us in this room security is also job number one and it becomes ever more important",
    "start": "368520",
    "end": "374220"
  },
  {
    "text": "now if you build applications the the most secure way making sure that you apply the principles of least privilege",
    "start": "374220",
    "end": "380520"
  },
  {
    "text": "at each step of the application you can actually build incredibly secure serverless apps too",
    "start": "380520",
    "end": "388340"
  },
  {
    "text": "so I took a lot of the practices I've seen have worked for me and also for other customers and came up with a",
    "start": "389400",
    "end": "394560"
  },
  {
    "text": "general approach to thinking about this and I'll apply these in all of the examples I show later but just some",
    "start": "394560",
    "end": "400139"
  },
  {
    "text": "things to think about so if you take a feature's first approach breaking down the application into the core features",
    "start": "400139",
    "end": "406800"
  },
  {
    "text": "that your customers use this can help avoid monolithic thinking where you end up with one big Lambda function with",
    "start": "406800",
    "end": "413400"
  },
  {
    "text": "everything in it actually start with the features to help you guide that way if you focus on events and remember",
    "start": "413400",
    "end": "419880"
  },
  {
    "text": "events are the key to your serverless apps actually working in the first place this also informs the flow of data in",
    "start": "419880",
    "end": "426300"
  },
  {
    "text": "your app so an event could be anything such as an HTTP call it could be a button from an iot button press or it",
    "start": "426300",
    "end": "433560"
  },
  {
    "text": "could be an object being stored in an S3 bucket there are really thousands of different types of event but those help",
    "start": "433560",
    "end": "438900"
  },
  {
    "text": "Drive the flow within your workload statelessness can be one of the harder",
    "start": "438900",
    "end": "444240"
  },
  {
    "text": "problems to get your head around when you first come into serverless because we're so used to keeping State somewhere in memory in our servers but really this",
    "start": "444240",
    "end": "451380"
  },
  {
    "text": "is the key to understanding scale if you look at most Amazon Services statelessness is enabling the",
    "start": "451380",
    "end": "457620"
  },
  {
    "text": "application to load itself horizontally in all sorts of different ways and so the sooner you adopt that the easier it",
    "start": "457620",
    "end": "463979"
  },
  {
    "text": "is to bring true scale to your application workload and I also think data flow is incredibly",
    "start": "463979",
    "end": "469979"
  },
  {
    "text": "important too you know many of us have come from a background where we have one database doing everything in our apps really and in this model you have a",
    "start": "469979",
    "end": "477360"
  },
  {
    "text": "whole range of different databases and data stores available in AWS and also other providers too many people use",
    "start": "477360",
    "end": "483300"
  },
  {
    "text": "services like and other databases but if you think about how the data flows and transforms between those",
    "start": "483300",
    "end": "489780"
  },
  {
    "text": "different data stores that can help you then design the rest of your architecture around the data itself",
    "start": "489780",
    "end": "496319"
  },
  {
    "text": "and then finally always be thinking about the services first so again you'll see a little bit in the examples but if",
    "start": "496319",
    "end": "502500"
  },
  {
    "text": "you look look at your architecture and you see Lambda featuring really prominently you're probably not making",
    "start": "502500",
    "end": "508020"
  },
  {
    "text": "the best use of all the different services that you could so I keep talking about services but",
    "start": "508020",
    "end": "514260"
  },
  {
    "text": "what do I mean well people think that serverless is synonymous with Lambda but really that's just the compute part of",
    "start": "514260",
    "end": "519779"
  },
  {
    "text": "the offering here but there are really many other things we rely upon making all of this work you've got API Gateway",
    "start": "519779",
    "end": "525480"
  },
  {
    "text": "that provides the front door to your application on the back end there's dynamodb that provides very low latency",
    "start": "525480",
    "end": "531779"
  },
  {
    "text": "very high scale nosql storage for your application SC provides an object store this is very",
    "start": "531779",
    "end": "538140"
  },
  {
    "text": "useful for user data things like photos within your app for example and for really complex workflows that",
    "start": "538140",
    "end": "544200"
  },
  {
    "text": "have lots of spaghetti code the services like step functions makes it very easy to extract all of that complexity and",
    "start": "544200",
    "end": "550560"
  },
  {
    "text": "have a service handle that too you also have events notifications and cues these are important in distributed",
    "start": "550560",
    "end": "557339"
  },
  {
    "text": "apps and there are specialized Services as well you have Kinesis for real-time ingestion of data or you have iot",
    "start": "557339",
    "end": "564180"
  },
  {
    "text": "interacting with the internet of things and even things like elastic transcoder if you're working with large media files",
    "start": "564180",
    "end": "572459"
  },
  {
    "text": "we also have access to many application services that can be really powerful for building your applications often around",
    "start": "572459",
    "end": "578040"
  },
  {
    "text": "machine learning so you'll see things like recognitions for image recognition comprehend for sentiment analysis",
    "start": "578040",
    "end": "584100"
  },
  {
    "text": "textract transcribe and so on and so forth and my point here is not to overwhelm",
    "start": "584100",
    "end": "589500"
  },
  {
    "text": "you with Services because AWS has lots of them but really to think about it as a serverless developer you've got this",
    "start": "589500",
    "end": "595680"
  },
  {
    "text": "enormous Rich toolbox to play with and you can use any of these or none of these in your app depending on what you",
    "start": "595680",
    "end": "601200"
  },
  {
    "text": "see fit so in these examples I want to show you",
    "start": "601200",
    "end": "606360"
  },
  {
    "start": "604000",
    "end": "634000"
  },
  {
    "text": "today which is the bulk of what we're going to be talking about I'm going to start with a couple of fairly simple examples and I've used my experience as",
    "start": "606360",
    "end": "613620"
  },
  {
    "text": "a software developer to know that I don't know the requirements up front and they're going to change a lot so I want",
    "start": "613620",
    "end": "619620"
  },
  {
    "text": "to add some subsequent requirements to what we're building so you get a sense of how we can modify the architecture",
    "start": "619620",
    "end": "624959"
  },
  {
    "text": "and take advantage of the agility you get with solos for things you had no idea about when you first started",
    "start": "624959",
    "end": "630180"
  },
  {
    "text": "building the app so first of all let's start with",
    "start": "630180",
    "end": "635459"
  },
  {
    "start": "634000",
    "end": "1045000"
  },
  {
    "text": "something very straightforward a form upload so we're going to create a serverless application that supports a",
    "start": "635459",
    "end": "640740"
  },
  {
    "text": "customer review form submitted on a web page so we already have an existing website that works that's fine we're",
    "start": "640740",
    "end": "647459"
  },
  {
    "text": "going to build some JavaScript and add this feature where we can store customer reviews",
    "start": "647459",
    "end": "653899"
  },
  {
    "text": "so let's look at this architecture so very simply our websites on the left we're going to use API Gateway as a way",
    "start": "654480",
    "end": "661560"
  },
  {
    "text": "for it to connect to our back end that's going to call a Lambda function and then we're going to take the",
    "start": "661560",
    "end": "666779"
  },
  {
    "text": "customer review we're given and put it in a dynamodb table so this just uses three services now",
    "start": "666779",
    "end": "673440"
  },
  {
    "text": "these three services actually are very powerful combination for building really practically any type of crud style",
    "start": "673440",
    "end": "678779"
  },
  {
    "text": "application you know create read update delete anytime you take data you need to store it somewhere this is a good",
    "start": "678779",
    "end": "684060"
  },
  {
    "text": "pattern to use but of course it's not not really that simple so what's our next requirement",
    "start": "684060",
    "end": "689160"
  },
  {
    "text": "we're going to have well it turns out our website is a global website where people submit",
    "start": "689160",
    "end": "695220"
  },
  {
    "text": "reviews in many different languages and not thought about this and we need to convert all of these reviews into",
    "start": "695220",
    "end": "700800"
  },
  {
    "text": "English or really any base language you prefer but it has to just be one language so what can we do to modify the",
    "start": "700800",
    "end": "707760"
  },
  {
    "text": "structure here well we could take that first Lambda function and make it call some sort of",
    "start": "707760",
    "end": "713940"
  },
  {
    "text": "ml service to do the translation for us before we put it in the database but",
    "start": "713940",
    "end": "719040"
  },
  {
    "text": "then we're starting to get towards this monolithic design where the Lambda function is doing more than one thing and over time we'll start to bloat that",
    "start": "719040",
    "end": "725640"
  },
  {
    "text": "Lambda function so instead what we can do is this so dynamodb triggers an event called a",
    "start": "725640",
    "end": "732899"
  },
  {
    "text": "stream that when data arrives on the table we can listen to that event so when that first review gets written",
    "start": "732899",
    "end": "739260"
  },
  {
    "text": "to dynamodb we'll have it call a second Lambda function and then we'll use the",
    "start": "739260",
    "end": "744480"
  },
  {
    "text": "AWS translate service to then do the translation into our base language that will get that translation and put it",
    "start": "744480",
    "end": "751140"
  },
  {
    "text": "back into dynamodb Now by doing this we've not changed any of the first part of our architecture",
    "start": "751140",
    "end": "756839"
  },
  {
    "text": "we've just incrementally added to address this new user feature",
    "start": "756839",
    "end": "762680"
  },
  {
    "text": "what next well it also it turns out that our user reviews are not just text people want to",
    "start": "763019",
    "end": "768720"
  },
  {
    "text": "be able to upload images with their user reviews as well so we hadn't thought",
    "start": "768720",
    "end": "773820"
  },
  {
    "text": "about that now this is a problem because in server-based environments often you'll find if you work with web or mobile apps",
    "start": "773820",
    "end": "780540"
  },
  {
    "text": "any type of upload from users can be massive you're dealing with very large files takes up a lot of network",
    "start": "780540",
    "end": "785639"
  },
  {
    "text": "bandwidth you have to store the images in some temporary space on your server before you process and save somewhere",
    "start": "785639",
    "end": "791279"
  },
  {
    "text": "else so what can we do without really changing the entire nature of the application we've built",
    "start": "791279",
    "end": "797519"
  },
  {
    "text": "yeah we could potentially have again that first Lambda function do the work it could take the binary that's uploaded",
    "start": "797519",
    "end": "803220"
  },
  {
    "text": "and we could store it somewhere but instead we can do this so we'll introduce a third Lambda",
    "start": "803220",
    "end": "810120"
  },
  {
    "text": "function and in this case it'll be a second API Gateway path that the front end will",
    "start": "810120",
    "end": "815940"
  },
  {
    "text": "call this Lambda function will call S3 which is where we're going to store the eventual image and it will ask for",
    "start": "815940",
    "end": "822480"
  },
  {
    "text": "permission using a pre-signed URL that's basically like a temporary token for storing an S3",
    "start": "822480",
    "end": "828120"
  },
  {
    "text": "that Lambda function will then return that token to the front end and the front end will directly store the binary",
    "start": "828120",
    "end": "834540"
  },
  {
    "text": "in the S3 servers Now by doing it this way we've offloaded",
    "start": "834540",
    "end": "839579"
  },
  {
    "text": "the entire problem to the S3 service so if we get gigabytes of uploads every hour it's not our problem anymore it's",
    "start": "839579",
    "end": "845399"
  },
  {
    "text": "actually just been pushed to S3 and if we need to do other things with those objects we can listen to events coming",
    "start": "845399",
    "end": "851040"
  },
  {
    "text": "from the S3 buckets but in this simple design we've solved that problem allowing customers to make an image",
    "start": "851040",
    "end": "857100"
  },
  {
    "text": "upload in addition to the text upload",
    "start": "857100",
    "end": "861199"
  },
  {
    "text": "okay so our review process is working really well we've got thousands of reviews being submitted on our website",
    "start": "862860",
    "end": "868019"
  },
  {
    "text": "customers seem to love this but now we find that some customers don't love everything we do and we'd like to take",
    "start": "868019",
    "end": "873839"
  },
  {
    "text": "action when we get negative reviews so we need to be able to email negative reviews to a manager or someone in",
    "start": "873839",
    "end": "880620"
  },
  {
    "text": "charge so they can take the next steps well this also is a tough problem",
    "start": "880620",
    "end": "885660"
  },
  {
    "text": "because any type of sentiment analysis on a review is going to involve some sort of machine learning service and if",
    "start": "885660",
    "end": "891660"
  },
  {
    "text": "you want to use that in a server-based environment that's fairly complicated to set up these types of models so they work effectively",
    "start": "891660",
    "end": "898320"
  },
  {
    "text": "in this way with this world what we're going to do is use a service called Amazon comprehend",
    "start": "898320",
    "end": "903959"
  },
  {
    "text": "and again I'm just going to create a fourth Lambda function now there's also listening to that dynamodb Stream So",
    "start": "903959",
    "end": "909660"
  },
  {
    "text": "when the review is written to the table that's going to trigger the stream trigger my Lambda function that's then",
    "start": "909660",
    "end": "916260"
  },
  {
    "text": "going to take this user review that's now been already converted into one base language send that to comprehend that",
    "start": "916260",
    "end": "923279"
  },
  {
    "text": "will give us a score between 0 and 1 on the positive or negative nature of the review and then we'll have the Lambda",
    "start": "923279",
    "end": "929639"
  },
  {
    "text": "function set of Tolerance maybe 70 percent and if we get a negative review it will then email using SNS or SES",
    "start": "929639",
    "end": "937019"
  },
  {
    "text": "depending on what you prefer so in each one of these steps we've incrementally added and addressed each",
    "start": "937019",
    "end": "943079"
  },
  {
    "text": "one of these features using another Lambda function and another service and so if this were a production application",
    "start": "943079",
    "end": "948959"
  },
  {
    "text": "we didn't need to really take it offline or do anything because we're not changing any code that's in place we're",
    "start": "948959",
    "end": "954180"
  },
  {
    "text": "just continuing to bolt on additional features and functions",
    "start": "954180",
    "end": "959220"
  },
  {
    "text": "now we have one final request that's come in now so in this case we've built",
    "start": "959220",
    "end": "964440"
  },
  {
    "text": "an application with an open front door there's no authentication that's a problem we're getting lots of spam",
    "start": "964440",
    "end": "969779"
  },
  {
    "text": "generally you don't want to have an open front door that way so we want to make sure that the existing authentication on",
    "start": "969779",
    "end": "975540"
  },
  {
    "text": "the site is used to secure this back end now again in the server-based world this",
    "start": "975540",
    "end": "981899"
  },
  {
    "text": "can be a bit tricky because often we have this kind of Castle and approach to security there we have to figure out how",
    "start": "981899",
    "end": "987420"
  },
  {
    "text": "the security Works in that environment and integrate with that effectively in this space what we can do is use",
    "start": "987420",
    "end": "993120"
  },
  {
    "text": "Cognito you can also use services like auth zero if you're using Services already and this works by using a Json",
    "start": "993120",
    "end": "999779"
  },
  {
    "text": "web token so the originating website can give us a Json webs token that's then",
    "start": "999779",
    "end": "1005360"
  },
  {
    "text": "checked by Cognito or xero it's validated against the provider API",
    "start": "1005360",
    "end": "1010579"
  },
  {
    "text": "Gateway is integrated with Cognito so it'll do all this for us and then anything that continues past this point",
    "start": "1010579",
    "end": "1016040"
  },
  {
    "text": "is already authenticated in our app so we don't need to do anything else then to secure the rest of the application",
    "start": "1016040",
    "end": "1023420"
  },
  {
    "text": "and so that provides a very simple elegant way of providing very robust security for your app the one thing I'd",
    "start": "1023420",
    "end": "1029540"
  },
  {
    "text": "add about this is that people often are very tempted to write their own Security in their apps and please don't do that",
    "start": "1029540",
    "end": "1035418"
  },
  {
    "text": "so please make sure whatever your solution is use some industrial strength security like Cognito or zero to solve",
    "start": "1035419",
    "end": "1041418"
  },
  {
    "text": "the problem so that's the simple example so let's",
    "start": "1041419",
    "end": "1046938"
  },
  {
    "start": "1045000",
    "end": "1520000"
  },
  {
    "text": "get on to something a little bit more interesting so in this case I'm going to have a restaurant reservation app",
    "start": "1046939",
    "end": "1052820"
  },
  {
    "text": "we're going to create a serverless application to allow a restaurant their customers to reserve a table with SMS",
    "start": "1052820",
    "end": "1059480"
  },
  {
    "text": "text message so we work for a restaurant they want customers to better send a text message and then we'll receive that",
    "start": "1059480",
    "end": "1065299"
  },
  {
    "text": "message and an operator at the restaurant will then have a computer where they can see restaurant reservations coming in and then that",
    "start": "1065299",
    "end": "1072380"
  },
  {
    "text": "helps the customers in terms of providing reservations automatically",
    "start": "1072380",
    "end": "1077440"
  },
  {
    "text": "so in this case in the simple case we've got a couple of services that can help us do this",
    "start": "1078020",
    "end": "1083360"
  },
  {
    "text": "the first is pinpoint pinpoint can give you a phone number that you can then give to your customers and then when",
    "start": "1083360",
    "end": "1089120"
  },
  {
    "text": "they send a text message it receives that text message and then turns it into an event now remember events are all",
    "start": "1089120",
    "end": "1095299"
  },
  {
    "text": "over AWS so anytime we can create an event we can build a serverless application to listen to that event",
    "start": "1095299",
    "end": "1102020"
  },
  {
    "text": "so we'll build a Lambda function that will receive that text message from pinpoint and then that's going to send the text",
    "start": "1102020",
    "end": "1108559"
  },
  {
    "text": "message to event Bridge I'm going to introduce something a bit different here so instead of me just",
    "start": "1108559",
    "end": "1113840"
  },
  {
    "text": "putting it into a dynamodb table I'm going to use an event driven architecture so I'm going to put the text message into event driven bridge",
    "start": "1113840",
    "end": "1121460"
  },
  {
    "text": "and you'll see in a little while why that can help us address some of the other changes that are coming down the",
    "start": "1121460",
    "end": "1127340"
  },
  {
    "text": "pipe of this application so that's the producer side of our app we've got an event coming in from this",
    "start": "1127340",
    "end": "1133520"
  },
  {
    "text": "text message now on the other side we've got a web app that our front desk is going to be",
    "start": "1133520",
    "end": "1138799"
  },
  {
    "text": "using to see these reservations and that web app will then use API Gateway to call dynamodb to get a list of all the",
    "start": "1138799",
    "end": "1146120"
  },
  {
    "text": "reservations that are coming in and that's how they're going to see the data that's being stored with internally in",
    "start": "1146120",
    "end": "1151460"
  },
  {
    "text": "the system and so just by combining these few services and really the Lambda functions",
    "start": "1151460",
    "end": "1156679"
  },
  {
    "text": "would be about 20 to 30 lines of code in this case we've got a restaurant reservation app that will securely",
    "start": "1156679",
    "end": "1162799"
  },
  {
    "text": "handle text messages on the back end there's only one problem with this",
    "start": "1162799",
    "end": "1169039"
  },
  {
    "text": "design we've got is that it's not real time so people are using it they love the application but they're having to F5",
    "start": "1169039",
    "end": "1175280"
  },
  {
    "text": "their browser constantly to see when new reservations are coming in and they don't know if someone's now placed a new",
    "start": "1175280",
    "end": "1181280"
  },
  {
    "text": "reservation so how do you handle this well you could poll more frequently that's always an option so if you're",
    "start": "1181280",
    "end": "1188179"
  },
  {
    "text": "polling every two minutes pull every one minute to shoot for new reservations but we don't want to do that that's really",
    "start": "1188179",
    "end": "1193280"
  },
  {
    "text": "inefficient we want a real-time solution so that when people place these reservations they automatically appear",
    "start": "1193280",
    "end": "1198919"
  },
  {
    "text": "within the web app itself so here's what we'll do and this is why",
    "start": "1198919",
    "end": "1204440"
  },
  {
    "text": "I introduced the eventbridge idea using an event bus I'm going to create a rule an event bus",
    "start": "1204440",
    "end": "1210320"
  },
  {
    "text": "shown in the little pink Icon there that's going to listen for new reservations coming in that will call my",
    "start": "1210320",
    "end": "1216260"
  },
  {
    "text": "third Lambda function and when it receives a reservation I'm going to have that published to iot core",
    "start": "1216260",
    "end": "1222320"
  },
  {
    "text": "which is a service with an AWS which we can use for web apps to be able to create websocket subscriptions so now",
    "start": "1222320",
    "end": "1228919"
  },
  {
    "text": "the front end just needs a websocket subscription to iot core and anytime these text messages come in they'll",
    "start": "1228919",
    "end": "1235580"
  },
  {
    "text": "automatically be published through to the front end and again with about 20 lines of code in that Lambda function",
    "start": "1235580",
    "end": "1240860"
  },
  {
    "text": "we've created a real-time web app integration",
    "start": "1240860",
    "end": "1245740"
  },
  {
    "text": "so next on our list of requirements our front desk host would like us to have it so that we speak the name of guests when",
    "start": "1247580",
    "end": "1254960"
  },
  {
    "text": "their table is ready so there'll be some sort of computer that sits there and says table for two for James at 7 30 is",
    "start": "1254960",
    "end": "1261260"
  },
  {
    "text": "now ready so again this is a tricky one in a server-based environment because text to",
    "start": "1261260",
    "end": "1266900"
  },
  {
    "text": "speech is again an ml based problem you take some some sort of texturing you want converted into some sort of spoken",
    "start": "1266900",
    "end": "1273740"
  },
  {
    "text": "text and then played through an audio and that's actually a bit tricky to do what we can do here is create another",
    "start": "1273740",
    "end": "1280640"
  },
  {
    "text": "event Bridge rule that will listen to these text messages or listen for events indicating the tables are ready",
    "start": "1280640",
    "end": "1287000"
  },
  {
    "text": "that will then call a Lambda function that picks up the event and it will call a service called poly",
    "start": "1287000",
    "end": "1293480"
  },
  {
    "text": "poly is a service that will create this text-to-speech audio file for us it creates a little mp4 file we specify the",
    "start": "1293480",
    "end": "1300320"
  },
  {
    "text": "type of speaker we want how fast how slow any sort of parameters we have about how it should be spoken",
    "start": "1300320",
    "end": "1306500"
  },
  {
    "text": "and it's an asynchronous call so when it's created that file it then dropped that in an S3 bucket",
    "start": "1306500",
    "end": "1312200"
  },
  {
    "text": "and then when S3 is successfully stored and written that object that creates an event",
    "start": "1312200",
    "end": "1317539"
  },
  {
    "text": "and so that's going to trigger our second Lambda function in this sequence that will then iot core know that the",
    "start": "1317539",
    "end": "1324559"
  },
  {
    "text": "let the front end know that this audio file is now ready and it'll pass along the URL to the file so the front end can",
    "start": "1324559",
    "end": "1331280"
  },
  {
    "text": "now play the audio clip so again we've incrementally added this feature without changing anything else",
    "start": "1331280",
    "end": "1337520"
  },
  {
    "text": "we've built already and we've solved something that's actually relatively complicated to put together really with",
    "start": "1337520",
    "end": "1342980"
  },
  {
    "text": "probably about 40 or 50 lines of Code by pulling these Services together",
    "start": "1342980",
    "end": "1348639"
  },
  {
    "text": "so our next challenge our the manager of the restaurant is thinking this is a fantastic solution we've built here but",
    "start": "1350179",
    "end": "1355280"
  },
  {
    "text": "they'd like to have a daily reservation email saying how many people booked tables at 11 o'clock each night there's",
    "start": "1355280",
    "end": "1361340"
  },
  {
    "text": "some sort of summary report well this turns out to be a really good fit for serverless because it involves a",
    "start": "1361340",
    "end": "1366620"
  },
  {
    "text": "Cron job and cron jobs and serverless kind of go hand in hand and so we can solve this one very easily",
    "start": "1366620",
    "end": "1372380"
  },
  {
    "text": "we just create another rule at 11 o'clock at night or whatever we want this to run this is going to then call a",
    "start": "1372380",
    "end": "1377659"
  },
  {
    "text": "Lambda function it'll query that dynamodb table to fetch the list of reservations that we've had for the day",
    "start": "1377659",
    "end": "1383299"
  },
  {
    "text": "and it will then use a service like SNS or SES to then send the email to the",
    "start": "1383299",
    "end": "1388340"
  },
  {
    "text": "manager or any interested party that's an easy one",
    "start": "1388340",
    "end": "1393940"
  },
  {
    "text": "finally we now want to alert a legacy application when reservations have been made",
    "start": "1395120",
    "end": "1400760"
  },
  {
    "text": "so it turns out that we're not working for one restaurant we're actually working for a restaurant chain like McDonald's somebody really busy and they",
    "start": "1400760",
    "end": "1408020"
  },
  {
    "text": "get lots and lots of reservations and they're already integrated with another service like open table or some sort of",
    "start": "1408020",
    "end": "1413539"
  },
  {
    "text": "Legacy system that we didn't know about when we built this solution so this is a problem for us we have to do this",
    "start": "1413539",
    "end": "1419419"
  },
  {
    "text": "integration otherwise people could accidentally double book the same tables and so the third party provider has",
    "start": "1419419",
    "end": "1424640"
  },
  {
    "text": "given us a web hook that we can connect with and so what can we do now to integrate all of this with a web hook",
    "start": "1424640",
    "end": "1432559"
  },
  {
    "text": "well web hooks are kind of tricky because although they might seem simple there are some problems you might not",
    "start": "1432559",
    "end": "1437840"
  },
  {
    "text": "have thought about if that Legacy service goes down and they don't receive the information what do you do are you",
    "start": "1437840",
    "end": "1444440"
  },
  {
    "text": "going to retry later what's your retry strategy on making sure that they do get that information",
    "start": "1444440",
    "end": "1449720"
  },
  {
    "text": "what about if this is a really busy restaurant chain and we're getting tons of reservations and we might overwhelm",
    "start": "1449720",
    "end": "1455480"
  },
  {
    "text": "that Downstream system with lots of reservations how do we throttle the number of API cores that we don't take",
    "start": "1455480",
    "end": "1460760"
  },
  {
    "text": "down that Downstream system one of the things with serverless apps they scale very quickly so it's very",
    "start": "1460760",
    "end": "1466340"
  },
  {
    "text": "possible to accidentally take down systems that are not serverless so we have to think about that too",
    "start": "1466340",
    "end": "1472039"
  },
  {
    "text": "well we have a good solution for this with eventbridge so in this case there's a feature called API destinations and in",
    "start": "1472039",
    "end": "1479059"
  },
  {
    "text": "all this case we just have to take that API web quote they've given us and configure that in our role and that will",
    "start": "1479059",
    "end": "1484640"
  },
  {
    "text": "do two things firstly it will throttle the number of requests being made so that we don't overwhelm that Downstream",
    "start": "1484640",
    "end": "1490640"
  },
  {
    "text": "system and we only make the number of requests per second that we think we're safe to do and it will queue up all",
    "start": "1490640",
    "end": "1495679"
  },
  {
    "text": "those other requests so there's the actual demand curve is smoothed out as all of those come in",
    "start": "1495679",
    "end": "1501260"
  },
  {
    "text": "also if the API endpoint goes away for any reason it'll handle the retry it'll",
    "start": "1501260",
    "end": "1506419"
  },
  {
    "text": "continue for up to 24 hours using exponential back off so just by configuring the rule we don't actually",
    "start": "1506419",
    "end": "1512299"
  },
  {
    "text": "need to think about all of these complexities and making sure the web Hook is successfully called",
    "start": "1512299",
    "end": "1518919"
  },
  {
    "start": "1520000",
    "end": "1572000"
  },
  {
    "text": "so those are two examples but obviously when you look at what I'm showing here there's lots of different services and",
    "start": "1520760",
    "end": "1525860"
  },
  {
    "text": "things you have to configure to really make the best use of this in your workload so I wanted to show you a couple of ways you can do this as",
    "start": "1525860",
    "end": "1532100"
  },
  {
    "text": "developers and I think it's really important now you might be using services like terraform or serverless framework or any of those and if you are",
    "start": "1532100",
    "end": "1538820"
  },
  {
    "text": "please keep using them this is for everybody who's not yet using some sort of IAC tool that can help automate what",
    "start": "1538820",
    "end": "1545299"
  },
  {
    "text": "you're doing so we have a service called Sam the serverless application model you've probably seen the squirrel at our",
    "start": "1545299",
    "end": "1551000"
  },
  {
    "text": "booth out there and what this is it takes the definition of all of these applications I'm showing",
    "start": "1551000",
    "end": "1556340"
  },
  {
    "text": "you with all of the different resources and converts them to cloud formation which is really the language of AWS",
    "start": "1556340",
    "end": "1562460"
  },
  {
    "text": "and so collect so Sam can then convert all of this into cloud formation easily for you now a lot of people feel that",
    "start": "1562460",
    "end": "1568159"
  },
  {
    "text": "sometimes this sounds a bit scary or complicated but it doesn't have to be this is an example Sam template I built",
    "start": "1568159",
    "end": "1574279"
  },
  {
    "start": "1572000",
    "end": "1634000"
  },
  {
    "text": "for a language translation app in one of my repos and it shows how you've got an S3 bucket a Lambda function and also it",
    "start": "1574279",
    "end": "1581419"
  },
  {
    "text": "defines the event here that connects the two so when an object is put into the S3 bucket that will trigger then my Lambda",
    "start": "1581419",
    "end": "1588380"
  },
  {
    "text": "function in this case for a suffix of txt and so you build out this application using yaml and Define the",
    "start": "1588380",
    "end": "1594740"
  },
  {
    "text": "resources you have this way and then you have the Sam CLI that then",
    "start": "1594740",
    "end": "1600020"
  },
  {
    "text": "takes this yaml and it will convert all of that to the real resources on the right",
    "start": "1600020",
    "end": "1605480"
  },
  {
    "text": "and so the benefit of doing this is that if you're building apps instead of clicking through the console and making",
    "start": "1605480",
    "end": "1610580"
  },
  {
    "text": "these changes you're creating versionable templates you can share with other developers in your team and you",
    "start": "1610580",
    "end": "1616400"
  },
  {
    "text": "can also more easily then store in services like GitHub and then when you make changes to your app it'll only deploy the differences in the template",
    "start": "1616400",
    "end": "1623000"
  },
  {
    "text": "not the whole stack and so I recommend as you start to build these types of applications you adopt using this",
    "start": "1623000",
    "end": "1628700"
  },
  {
    "text": "approach because it can make a big difference to the efficiency of how you build apps",
    "start": "1628700",
    "end": "1634960"
  },
  {
    "start": "1634000",
    "end": "1794000"
  },
  {
    "text": "so just before we get into some questions I wanted to talk about some of the things we've covered because I know",
    "start": "1636140",
    "end": "1641240"
  },
  {
    "text": "we've gone through quite a few things here so as you think about building serverless apps break up your",
    "start": "1641240",
    "end": "1646760"
  },
  {
    "text": "application into the different features that are requested by your customers generally this is not that intuitive as",
    "start": "1646760",
    "end": "1653539"
  },
  {
    "text": "we build things as developers because often we're used to getting all of our requirements and ones and trying to make these decisions earlier on in the",
    "start": "1653539",
    "end": "1660500"
  },
  {
    "text": "application design process but the problem with that is of course requirements change and really we want to be as agile as possible so I think",
    "start": "1660500",
    "end": "1667220"
  },
  {
    "text": "sticking with features and understanding how those evolve in your app can be a key to helping you develop and evolve",
    "start": "1667220",
    "end": "1672799"
  },
  {
    "text": "your application as it changes don't forget to find services to do all of the heavy lifting in this as well so",
    "start": "1672799",
    "end": "1680299"
  },
  {
    "text": "I've shown you a few here today you've got API Gateway and dynamodb and sqs and eventbridge there's I think there's 180",
    "start": "1680299",
    "end": "1686900"
  },
  {
    "text": "something in AWS now there are lots outside of AWS as well you know if you're doing Payment Processing you",
    "start": "1686900",
    "end": "1692299"
  },
  {
    "text": "might use stripe for example or with auth you might use services like auth zero but really look at all these",
    "start": "1692299",
    "end": "1697880"
  },
  {
    "text": "services that can do some really complicated things for you and then use your Lambda functions as the glue to tie",
    "start": "1697880",
    "end": "1704240"
  },
  {
    "text": "all these together and then probably the most important thing in this is don't be afraid to experiment",
    "start": "1704240",
    "end": "1710419"
  },
  {
    "text": "so I've shown you a few solutions for different problems of how I'd put these together but in reality there's lots of",
    "start": "1710419",
    "end": "1716000"
  },
  {
    "text": "different ways to solve the same problem and so with serverless applications it's very easy to stand up infrastructure and",
    "start": "1716000",
    "end": "1722000"
  },
  {
    "text": "then tear it down as you need you're not really committing that much it's actually fairly inexpensive to use this so you make sure you you experiment to",
    "start": "1722000",
    "end": "1729320"
  },
  {
    "text": "learn the best way to build things now if you want to learn more about building serverless applications we've",
    "start": "1729320",
    "end": "1735320"
  },
  {
    "text": "got a website for you called serverless land this is created managed by the da team that I'm part of and in here we've",
    "start": "1735320",
    "end": "1741679"
  },
  {
    "text": "got lots of blogs reviews blog so videos sample applications and patterns the",
    "start": "1741679",
    "end": "1748039"
  },
  {
    "text": "patterns repo is very helpful so if you know you need to use a couple of different Services you can go in there specify the services that you want to",
    "start": "1748039",
    "end": "1754700"
  },
  {
    "text": "use and then download sample templates in Sam cdk terraform using whatever",
    "start": "1754700",
    "end": "1760279"
  },
  {
    "text": "runtime you prefer that can help you get started with your apps so I recommend checking that out also if you really",
    "start": "1760279",
    "end": "1766159"
  },
  {
    "text": "want to see a live production serverless app in the wild in the main part of the expo hall you'll see serverless espresso",
    "start": "1766159",
    "end": "1773059"
  },
  {
    "text": "this is our serverless booth where you can order a cup of coffee with your phone by scanning a QR code and that",
    "start": "1773059",
    "end": "1778700"
  },
  {
    "text": "then uses a step functions workflow to manage the whole back end app and that's something we've been presenting reinvent",
    "start": "1778700",
    "end": "1785539"
  },
  {
    "text": "Summits and other sessions but if you meet us over there and have any questions you can get a cup of coffee download the code to the app and see how",
    "start": "1785539",
    "end": "1792740"
  },
  {
    "text": "it's built great thank you very much thank you",
    "start": "1792740",
    "end": "1799658"
  }
]