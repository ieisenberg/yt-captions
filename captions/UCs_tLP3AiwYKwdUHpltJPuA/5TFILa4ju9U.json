[
  {
    "text": "good morning everyone um I'm Brian canro I'm here with my colleague Dave Pico um from from joyant so uh we're going to",
    "start": "80",
    "end": "6399"
  },
  {
    "text": "talk in particular about deploying systems into production um and I know that that sometimes people run for their",
    "start": "6399",
    "end": "11599"
  },
  {
    "text": "lives when they hear the word production um so we're we're going to try to ease in um by bringing up hopefully what is a",
    "start": "11599",
    "end": "18640"
  },
  {
    "text": "familiar figure to some of you maybe so this is John McCarthy um and of course",
    "start": "18640",
    "end": "23800"
  },
  {
    "text": "he and it's great to see you know hands go up and and so many recognize one of the truly one of the the programming",
    "start": "23800",
    "end": "29119"
  },
  {
    "text": "language pioneers uh John McCarthy passed away recently uh and but U John McCarthy in invented lisp",
    "start": "29119",
    "end": "36879"
  },
  {
    "text": "of course um and lisp is I believe feel free to correct me if I'm if I'm wrong but lisp is the first uh interpreted",
    "start": "36879",
    "end": "44440"
  },
  {
    "text": "language um it is the first Dynamic language or the first the beginning of a dynamic language uh and it's actually",
    "start": "44440",
    "end": "50399"
  },
  {
    "text": "very interesting to read the history of lisp uh it was an interpreted language almost by accident um I actually didn't",
    "start": "50399",
    "end": "56520"
  },
  {
    "text": "realize this but they were trying to design a compiled language I mean this is for the you this is the IBM 704 back",
    "start": "56520",
    "end": "62680"
  },
  {
    "text": "in the day they were trying to design a compiled language and it was only the it kind of fell out that it was actually",
    "start": "62680",
    "end": "69159"
  },
  {
    "text": "just easier to implement things to make it interpreted and then they made this incredible Discovery um that once the",
    "start": "69159",
    "end": "74799"
  },
  {
    "text": "language was interpreted you could actually move faster the existence of an interpreter and the absence of",
    "start": "74799",
    "end": "80960"
  },
  {
    "text": "declarations makes it particularly natural to use lisp in a time sharing environment it is convenient to Define",
    "start": "80960",
    "end": "87040"
  },
  {
    "text": "functions test them and re-edit them without ever leaving the lisp interpreter uh and again Lis this was",
    "start": "87040",
    "end": "94840"
  },
  {
    "text": "first in in the late 50s that lisp was being developed and the first lisp interpreters about 1960 so this is a",
    "start": "94840",
    "end": "101040"
  },
  {
    "text": "very long time ago and the thing that's kind of interesting to me about this is that from the very beginning the dynamic",
    "start": "101040",
    "end": "108119"
  },
  {
    "text": "languages interpreted languages were about programmer productivity that's the",
    "start": "108119",
    "end": "113799"
  },
  {
    "text": "reason we use these languages the reason we don't write everything in C or actually even assembly all the time is",
    "start": "113799",
    "end": "121320"
  },
  {
    "text": "because it would take us longer it would take us longer because certain aspects of it are harder um and there's certain",
    "start": "121320",
    "end": "127280"
  },
  {
    "text": "things that are more tedious in these lower level languages so these higher level Dynamic interpreted languages of",
    "start": "127280",
    "end": "133040"
  },
  {
    "text": "which certainly JavaScript is one are all about making us more productive as programmers now for many years I mean so",
    "start": "133040",
    "end": "140480"
  },
  {
    "text": "you have lisp is is an interpreted environment in 1960 but interpreted languages don't",
    "start": "140480",
    "end": "147160"
  },
  {
    "text": "really enter the mainstream until the mid 1990s now I I know that you know",
    "start": "147160",
    "end": "152239"
  },
  {
    "text": "small talk is mother's milk and is sacred here and I so I want to I want to respect that um but the reality is we",
    "start": "152239",
    "end": "159040"
  },
  {
    "text": "weren't all programming in small talk in the mid 90s and I'm so sorry I it's not because Small Talk wasn't obviously",
    "start": "159040",
    "end": "165200"
  },
  {
    "text": "Superior to everything that was being done ever in the history of humanity because I'm sure it probably was um or",
    "start": "165200",
    "end": "171480"
  },
  {
    "text": "I'm sure it's wise to say that now anyway um but we worked Dynamic languages hadn't gone mainstream and",
    "start": "171480",
    "end": "179879"
  },
  {
    "text": "that's for a lot of reasons and now I'm going to I'm going to tread very lightly and sensitively but I'm going to say",
    "start": "179879",
    "end": "185120"
  },
  {
    "text": "that part of this was the fact that CPUs were were actually underpowered relative",
    "start": "185120",
    "end": "191560"
  },
  {
    "text": "to what these environments were trying to do dram was undersized relative to what these environments were trying to",
    "start": "191560",
    "end": "197080"
  },
  {
    "text": "do and yes you could and there are terrific papers on Small Talk 80 being implemented on very limited resource",
    "start": "197080",
    "end": "202920"
  },
  {
    "text": "machines but the reality was that wasn't the mainstream of dynamic languages um in the mid90s and then you but things",
    "start": "202920",
    "end": "210400"
  },
  {
    "text": "were improving and things were getting better and faster and the world was ready for kind of a breakout Dynamic",
    "start": "210400",
    "end": "217080"
  },
  {
    "text": "language um and we saw that in Java For Better or For ill um when Java was introduced in 1995 it it so quickly",
    "start": "217080",
    "end": "224360"
  },
  {
    "text": "became one of the world's most popular languages that I I C I think you can't help but argue that the world was ready",
    "start": "224360",
    "end": "230640"
  },
  {
    "text": "for it the world was ready to be at a higher layer of abstraction and Java was terrific because it it especially when",
    "start": "230640",
    "end": "238040"
  },
  {
    "text": "when the um in you know five or six or seven years later when other languages began to flower on top of the jvm that",
    "start": "238040",
    "end": "245319"
  },
  {
    "text": "we now are in an environment which is terrific which is that Dynamic languages are everywhere um and they're being used",
    "start": "245319",
    "end": "251879"
  },
  {
    "text": "for real production software uh which is great because it makes us so much more productive we can go do these things and",
    "start": "251879",
    "end": "258440"
  },
  {
    "text": "build things so much more quickly today than we could even 10 years ago because",
    "start": "258440",
    "end": "263479"
  },
  {
    "text": "of these languages um so this is very important but there's also a darker side",
    "start": "263479",
    "end": "269440"
  },
  {
    "text": "there's a a darker side to these Dynamic environments yes it is very fast to build things um and to this to introduce",
    "start": "269440",
    "end": "276560"
  },
  {
    "text": "this darker side we're going to go to another Pioneer does any know who this is so McCarthy is your tribe this guy is",
    "start": "276560",
    "end": "287080"
  },
  {
    "text": "mine so does anyone know who this is so this actually he won his touring before",
    "start": "287080",
    "end": "292840"
  },
  {
    "text": "McCarthy won his um this is Morris wils uh Morris wils is um uh is one of the",
    "start": "292840",
    "end": "300400"
  },
  {
    "text": "very earliest computer Pioneers um he and his team at Cambridge developed the",
    "start": "300400",
    "end": "306199"
  },
  {
    "text": "Ed saac um which was the first real stored program computer yes eniac was a",
    "start": "306199",
    "end": "311400"
  },
  {
    "text": "machine but edsac was really the first true embodiment of Von nyman's Vision",
    "start": "311400",
    "end": "316560"
  },
  {
    "text": "very important machine and wils is a a tremendous Pioneer uh in many regards",
    "start": "316560",
    "end": "322680"
  },
  {
    "text": "but this quote from wils um when I first read it as but a lad I I felt that wils",
    "start": "322680",
    "end": "329479"
  },
  {
    "text": "would was speaking to me across the decades that as soon as we started programming we found to our surprise",
    "start": "329479",
    "end": "337840"
  },
  {
    "text": "that it wasn't as easy to get programs right as we had thought debugging had to",
    "start": "337840",
    "end": "343440"
  },
  {
    "text": "be discovered I can remember the exact instant when I realized that a large",
    "start": "343440",
    "end": "350280"
  },
  {
    "text": "part of my life from then on was going to be spent in finding mistakes in my",
    "start": "350280",
    "end": "355479"
  },
  {
    "text": "own programs that is as true today as it was on the very first stored program",
    "start": "355479",
    "end": "362520"
  },
  {
    "text": "computer and actually I would make one small adjustment to that which is I remember the exact instant when I",
    "start": "362520",
    "end": "368240"
  },
  {
    "text": "realized that a large part of my life from then on was going to be finding the mistakes of others um we don't just find our own",
    "start": "368240",
    "end": "375599"
  },
  {
    "text": "mistakes we find the mistakes of others as well and I think that I I'm I'm sure there's like a there must be a caral",
    "start": "375599",
    "end": "381919"
  },
  {
    "text": "balance to the world I mean I think don't all of us feel as if we're often finding the bugs in other people's code",
    "start": "381919",
    "end": "388080"
  },
  {
    "text": "but in order for all of that to be true there have to be people who are introducing many more bugs than they",
    "start": "388080",
    "end": "393680"
  },
  {
    "text": "themselves are debugging it's true I I don't know I have no explanation is it like",
    "start": "393680",
    "end": "398919"
  },
  {
    "text": "one dude I mean one guy if we could only find him man let's let's go find that guy he's he is problem he's a problem",
    "start": "398919",
    "end": "406080"
  },
  {
    "text": "but so the um I mean the reality is we're probably all wrong and probably it's it's all it's you know like you everyone thinks their own flat and",
    "start": "406080",
    "end": "412120"
  },
  {
    "text": "smells fine right it's that kind of thing um it's like you forget about your own bugs we're all spending time in each",
    "start": "412120",
    "end": "418160"
  },
  {
    "text": "other's codes right so so you know we have 10 people on a team we're spending a lot of our time in other people's code",
    "start": "418160",
    "end": "423680"
  },
  {
    "text": "anyway so I guess that kind of makes sense from that perspective it it kind of makes sense um so the these Dynamic",
    "start": "423680",
    "end": "431080"
  },
  {
    "text": "languages um have a a very serious debugging problem um I mean they they're",
    "start": "431080",
    "end": "436560"
  },
  {
    "text": "terrific they're terrific for program and productivity but actually trying to debug these things when they head south",
    "start": "436560",
    "end": "443000"
  },
  {
    "text": "can be really really ugly um now the the reality is that that in order to bug you",
    "start": "443000",
    "end": "448680"
  },
  {
    "text": "so you've got a program it's running in the VM and the program has moved sideways it's doing something you don't want it to do in order to be able to",
    "start": "448680",
    "end": "455199"
  },
  {
    "text": "reason about what that program is doing you need there's a great deal of VM specificity that you have to have and so",
    "start": "455199",
    "end": "461840"
  },
  {
    "text": "in order to be able to debug these things we have historically had the these integrated development",
    "start": "461840",
    "end": "467120"
  },
  {
    "text": "environments and they allow us to do very powerful things I mean to be fair the idees have come a long way in the",
    "start": "467120",
    "end": "473159"
  },
  {
    "text": "last 10 to 15 years and the developer in development is able to actually debug",
    "start": "473159",
    "end": "478599"
  },
  {
    "text": "and understand their own software and that's terrific the problem is that has been the exclusive focus of debugging",
    "start": "478599",
    "end": "486440"
  },
  {
    "text": "Dynamic languages that when the when that software shifts from not running in",
    "start": "486440",
    "end": "491960"
  },
  {
    "text": "development but to running in production the debugging tools that we have are not just anemic but historically",
    "start": "491960",
    "end": "497960"
  },
  {
    "text": "non-existent for these Dynamic environments and you have this this black box the VM which you cannot reason",
    "start": "497960",
    "end": "505520"
  },
  {
    "text": "about what is running inside yes it's executing instructions on the microprocessor but those instructions are are at such they're so far down from",
    "start": "505520",
    "end": "512560"
  },
  {
    "text": "the actual high level code that's been generated that it is excruciating to actually get to that high level code and",
    "start": "512560",
    "end": "519039"
  },
  {
    "text": "so what are the constraints of of developing a production environment what is a production environment what do we mean by this so a production environment",
    "start": "519039",
    "end": "525240"
  },
  {
    "text": "is code that people are depending on right and in th those that environment you can't simply modify the application",
    "start": "525240",
    "end": "532320"
  },
  {
    "text": "to add debugging statements you can't often you can't even restart the application um that this code is",
    "start": "532320",
    "end": "538399"
  },
  {
    "text": "actually actively being used all the time um and it's very difficult to to actually go deploy modified versions to",
    "start": "538399",
    "end": "546160"
  },
  {
    "text": "get more debugging information you can't assume that the failures are going to be reproducible uh those of you who are",
    "start": "546160",
    "end": "552120"
  },
  {
    "text": "software developers versus with a focus on the Ops side um you know that when you've got a bug in",
    "start": "552120",
    "end": "557760"
  },
  {
    "text": "production the first thing you want to do is go reproduce it in development the problem is that our production systems",
    "start": "557760",
    "end": "563480"
  },
  {
    "text": "are so complicated now that we have many many bugs that you simply cannot reproduce in development and even if you",
    "start": "563480",
    "end": "570160"
  },
  {
    "text": "reproduce the bug in development how do you know you've reproduced the right bug and not just the symptoms of the bug so you can't you can't assume that you're",
    "start": "570160",
    "end": "577079"
  },
  {
    "text": "going to be able to reproduce these things at all let alone in development and the failure modes themselves may not",
    "start": "577079",
    "end": "582720"
  },
  {
    "text": "even sometimes they're explosive and you can get a stack trace and try to reason about it but often times they're not",
    "start": "582720",
    "end": "588000"
  },
  {
    "text": "they're transient or the app just goes into the black hole of misery right I",
    "start": "588000",
    "end": "593040"
  },
  {
    "text": "for whatever reason airling seems to do that more than I I don't want to pick on airling but uh airling seems to love the",
    "start": "593040",
    "end": "598560"
  },
  {
    "text": "black hole of misery um or at least for us anyway but these environments go in and they just they're",
    "start": "598560",
    "end": "604240"
  },
  {
    "text": "off doing something rabbit is consuming all of 16 cores at 100% it's like rabbit",
    "start": "604240",
    "end": "610519"
  },
  {
    "text": "you are executing 32 billion instructions per second that's a lot of",
    "start": "610519",
    "end": "617240"
  },
  {
    "text": "compute what the hell are you doing please tell me what you're doing we've got no idea so the we need to these are",
    "start": "617240",
    "end": "624240"
  },
  {
    "text": "the constraints and the problem is that we've got to be able to walk up to this thing that has failed transiently the the fail non-reproducible and we need to",
    "start": "624240",
    "end": "630880"
  },
  {
    "text": "be able to understand it so I mean I don't know these constraints do seem impossible I mean how do you possibly",
    "start": "630880",
    "end": "636839"
  },
  {
    "text": "debug anything Dave how do we possibly debug anything in production good question Brian so for this we turn again",
    "start": "636839",
    "end": "643120"
  },
  {
    "text": "once again to history and this is a quote from um a paper from 1951",
    "start": "643120",
    "end": "648680"
  },
  {
    "text": "essentially you know the dawn of computing as we know it this is Stanley Gil from a paper which is an excellent",
    "start": "648680",
    "end": "654600"
  },
  {
    "text": "paper called the diagnosis of mistakes in programs on the Ed saac I'd strongly recommend reading this if you're at all",
    "start": "654600",
    "end": "660480"
  },
  {
    "text": "interested in this stuff you know it doesn't require a lot of background on the machine or anything but it's it's a",
    "start": "660480",
    "end": "665880"
  },
  {
    "text": "terrific paper but he makes this observation in a way that sounds very euphemistic he says experience with the",
    "start": "665880",
    "end": "671959"
  },
  {
    "text": "edsac has shown that although a high proportion of mistakes can be removed by preliminary checking there frequently",
    "start": "671959",
    "end": "678000"
  },
  {
    "text": "remain mistakes which could only have been detected in the early stages by prolonged and laborious study I mean",
    "start": "678000",
    "end": "684560"
  },
  {
    "text": "that that's obviously a euphemism right this is like we there's no way we could have actually figured these things out unless we spent like years studying the",
    "start": "684560",
    "end": "691519"
  },
  {
    "text": "code looking for everything that could possibly go wrong and he says some attention therefore has been given to",
    "start": "691519",
    "end": "696959"
  },
  {
    "text": "the problem of dealing with mistakes after the program has been tried and found to fail and and then he goes on to",
    "start": "696959",
    "end": "703079"
  },
  {
    "text": "describe something he calls the postmortem technique which is a way of uh essentially figuring out after the",
    "start": "703079",
    "end": "709000"
  },
  {
    "text": "program has failed what the state of the machine was and understanding the pro the the problem from that so um we've",
    "start": "709000",
    "end": "716720"
  },
  {
    "text": "had this for a long time obviously since 1951 want at least and it on Modern systems you can do this with Native",
    "start": "716720",
    "end": "722839"
  },
  {
    "text": "programs right programs you write in C you can get a Core dump and with a core dump you can look at Global variable",
    "start": "722839",
    "end": "728839"
  },
  {
    "text": "State you can look at all the threads that are around you can um you presumably have in a lot of cases you",
    "start": "728839",
    "end": "734320"
  },
  {
    "text": "have a little bit of extra information about the objects structures offsets that allow you to examine in extreme",
    "start": "734320",
    "end": "740720"
  },
  {
    "text": "detail every piece of the program State how many people have looked at a cord up okay we're in the right room we are",
    "start": "740720",
    "end": "747680"
  },
  {
    "text": "in the right room that's great I knew in the right room this is great sweet so and there's there's two important",
    "start": "747680",
    "end": "752920"
  },
  {
    "text": "properties about this too which is that when a program fails fatally and dumps core a native program a c program say um",
    "start": "752920",
    "end": "761880"
  },
  {
    "text": "the system immediately I mean the process exits right so so if you're using some kind of restarter the system",
    "start": "761880",
    "end": "767240"
  },
  {
    "text": "immediately restarts the service and restores service right and importantly you can take the artifact of that which",
    "start": "767240",
    "end": "772959"
  },
  {
    "text": "is the core dump and copy it off to some other system where you've got very sophisticated tooling to figure out what's happened so you're you know you",
    "start": "772959",
    "end": "779600"
  },
  {
    "text": "don't have to wait for an engineer to get on that system and you know enter a debugger and sort of poke around",
    "start": "779600",
    "end": "784839"
  },
  {
    "text": "meanwhile production requests are not being serviced because this program is halted or the state is changing from",
    "start": "784839",
    "end": "789880"
  },
  {
    "text": "underneath it so the programmer is getting confused this is a extremely important property right this is the Crux of what we're getting at and it's",
    "start": "789880",
    "end": "796040"
  },
  {
    "text": "not unique to us right I mean this is called forensic Engineering in other domains um other domains have forensic",
    "start": "796040",
    "end": "801399"
  },
  {
    "text": "engineering and indeed forensic engineering and the ability to do forensic engineering is what allows us to deliver life critical safety critical",
    "start": "801399",
    "end": "808360"
  },
  {
    "text": "systems you look at like Aviation right there are only four unsolved plane",
    "start": "808360",
    "end": "814199"
  },
  {
    "text": "crashes in the United States um all four of those predate the flight data",
    "start": "814199",
    "end": "819639"
  },
  {
    "text": "recorder and cl cockit voice recorder literally every other major aviation accident and this is now since the 60s",
    "start": "819639",
    "end": "826399"
  },
  {
    "text": "has been root caused and that root often you there are many root causes these are cascading failures and we use it to fix",
    "start": "826399",
    "end": "832759"
  },
  {
    "text": "the system as a result can you think of the top of your head the last time a major airliner went down in the United",
    "start": "832759",
    "end": "837880"
  },
  {
    "text": "States the airlin no longer crash it's actually pretty amazing um that we just",
    "start": "837880",
    "end": "843680"
  },
  {
    "text": "because these systems are so mature but we it's because we've been able to do forensic engineering so forensic",
    "start": "843680",
    "end": "848880"
  },
  {
    "text": "engineering is critical to all engineering domains not just software yep so uh yeah and I guess you know the",
    "start": "848880",
    "end": "855320"
  },
  {
    "text": "question from our perspective is is can we actually do this with Dynamic environments and from you know Dave and I are we're OS kernel guys this is how",
    "start": "855320",
    "end": "862600"
  },
  {
    "text": "we develop the kernel um when the kernel crashes we always get a complete snapshot of State um and kernels crash",
    "start": "862600",
    "end": "870000"
  },
  {
    "text": "so infrequently that you only have one shot to debug many problems and that that is that that crash JP you can't",
    "start": "870000",
    "end": "875320"
  },
  {
    "text": "have it crash again so can we do it with Dynamic environments that's the question now historically this has been pretty",
    "start": "875320",
    "end": "880959"
  },
  {
    "text": "difficult right if you just take the same tools that you would apply to a native program you know you apply GDB",
    "start": "880959",
    "end": "886160"
  },
  {
    "text": "you apply pstack you don't really get anything that useful right you don't um and there are a lot of reasons for this",
    "start": "886160",
    "end": "891880"
  },
  {
    "text": "one is that the um if you look at the things that are in a core dump you've got the symbols you've got mapped memory",
    "start": "891880",
    "end": "897880"
  },
  {
    "text": "so right there you got all the the native functions and you can disassemble them and see what's going on um again",
    "start": "897880",
    "end": "903560"
  },
  {
    "text": "you've got some metadata describing the offsets the structures and stuff so you can print those things out but you don't",
    "start": "903560",
    "end": "908959"
  },
  {
    "text": "have any of that for the dynamic environment if your Python program dumped core or your Java program dumped",
    "start": "908959",
    "end": "914120"
  },
  {
    "text": "core you don't have anything that resembles a Java class or a Java method or uh you know a python object in order",
    "start": "914120",
    "end": "920920"
  },
  {
    "text": "to actually build these abstractions you'd have to do a bunch of work on top of that to to essentially model uh to",
    "start": "920920",
    "end": "927639"
  },
  {
    "text": "basically resynthesize all those abstractions from the information that's in the core file there are also some",
    "start": "927639",
    "end": "932920"
  },
  {
    "text": "things that you want to include that don't even exist in the language itself so in JavaScript you've got the event queue this this list of events that is",
    "start": "932920",
    "end": "939480"
  },
  {
    "text": "going to that are going to be executed as soon as um the current event is finished being processed that doesn't",
    "start": "939480",
    "end": "944880"
  },
  {
    "text": "even exist in the language there's no way to introspect that and see what's on that queue let alone uh so if you want",
    "start": "944880",
    "end": "950279"
  },
  {
    "text": "to present this to to a user you have to sort of figure out how to even present it and then you have to dig that",
    "start": "950279",
    "end": "955800"
  },
  {
    "text": "information out of the core file um the other really important thing about this the the the real Crux of the constraint",
    "start": "955800",
    "end": "962600"
  },
  {
    "text": "is they these tools cannot assume that the VM is currently running that's the whole point the program has already",
    "start": "962600",
    "end": "969360"
  },
  {
    "text": "crashed maybe the VM has crashed but even if it hasn't um you want to be able to do these things after the fact on a",
    "start": "969360",
    "end": "974839"
  },
  {
    "text": "different system you want to be able to do sophisticated postmortem analysis techniques which we'll talk about a",
    "start": "974839",
    "end": "979959"
  },
  {
    "text": "little bit later but things that might involve Brute Force they might take a really long time um so the VM is you",
    "start": "979959",
    "end": "985160"
  },
  {
    "text": "cannot assume that the VM is still running when you do this you're operating on a snapshot of memory um so",
    "start": "985160",
    "end": "991959"
  },
  {
    "text": "we took a particular we took a stab at this for node.js um you know we had a particular interest in no. JS um but",
    "start": "991959",
    "end": "998079"
  },
  {
    "text": "this is actually not you know we we've looked at other Dynamic environments and this problem is not really solved in any",
    "start": "998079",
    "end": "1003759"
  },
  {
    "text": "of the ones that we looked at any of the major ones yeah so we're going to Wade somewhat deeply in the node here how many people have used node have heard of",
    "start": "1003759",
    "end": "1009519"
  },
  {
    "text": "node okay good good how many people have deployed it in production okay cool it's good I and I",
    "start": "1009519",
    "end": "1015680"
  },
  {
    "text": "notice a lot of hands going up on have used node and have debugged from so this is this is good we we're going to",
    "start": "1015680",
    "end": "1020880"
  },
  {
    "text": "bring the hands together um and we're going to unify this as one and I'll the",
    "start": "1020880",
    "end": "1026319"
  },
  {
    "text": "origin of this in terms of our particular interest is that we at joyant had developed a new service David",
    "start": "1026319",
    "end": "1032600"
  },
  {
    "text": "developed a new service to allow us to understand the latency of our running uh Cloud infrastructure software so we we",
    "start": "1032600",
    "end": "1038959"
  },
  {
    "text": "are an infrastructure as a service provider uh and we develop the facility to allow our customers to view the latency of their app the background of",
    "start": "1038959",
    "end": "1046120"
  },
  {
    "text": "that doesn't necessarily matter what's important is that it's a node.js app that we were getting ready to deploy into production and I swear it was it",
    "start": "1046120",
    "end": "1053640"
  },
  {
    "text": "was like the day before we were going to deploy production it was the day before we were planning to go live so we're literally just about to go live and the",
    "start": "1053640",
    "end": "1059080"
  },
  {
    "text": "thing is rocking and it's working and we're all excited and excited and a little bit nervous you know a little bit",
    "start": "1059080",
    "end": "1064160"
  },
  {
    "text": "nervous that everything's going to be a flaming disaster when we deploy into production um but you know basically excited and we're just doing some kind",
    "start": "1064160",
    "end": "1070760"
  },
  {
    "text": "of like final demos to one another or whatever and all of a sudden one of our aggregator processes it's written in",
    "start": "1070760",
    "end": "1076400"
  },
  {
    "text": "node all of a sudden starts spinning out of control on CPU go what's this and",
    "start": "1076400",
    "end": "1081760"
  },
  {
    "text": "doesn't seem to be coming it's it's in CPU it's on CPU in useland in the black",
    "start": "1081760",
    "end": "1087159"
  },
  {
    "text": "hole and the symptom by the way is the user that's looking at the the graphs the real-time graphs of their of their",
    "start": "1087159",
    "end": "1092760"
  },
  {
    "text": "program it just it stopped the the graph stop the user interface completely locks up effectiv system is totally unusable",
    "start": "1092760",
    "end": "1099760"
  },
  {
    "text": "so it's definitely this is a particular and obviously this this thing is scaled out but if you are a user who happens to",
    "start": "1099760",
    "end": "1105200"
  },
  {
    "text": "have been assigned to this aggregator what you're seeing is no data coming out of you so okay um let's go debug this um",
    "start": "1105200",
    "end": "1112000"
  },
  {
    "text": "so we've got uh Dave uh and me and then Ryan do who was the inventor of node who's who's at joyant um and so the",
    "start": "1112000",
    "end": "1119080"
  },
  {
    "text": "three of us go to debug this problem now Dave obviously wrote the software Ryan wrote node um and I at son along with",
    "start": "1119080",
    "end": "1125919"
  },
  {
    "text": "two colleagues invented a particular technology called dra trce that allows us to dynamically instrument the system in arbitrary ways you got to think",
    "start": "1125919",
    "end": "1131559"
  },
  {
    "text": "between the three of us we're going to get this thing nailed and we were such I",
    "start": "1131559",
    "end": "1136880"
  },
  {
    "text": "mean dumb chimps staring at the laptop like scratching ourselves trying and I mean it reminded me of the bad old days",
    "start": "1136880",
    "end": "1144080"
  },
  {
    "text": "of Colonel the buing when before we had this tooling and we had no idea what was going on and we're and no ability to",
    "start": "1144080",
    "end": "1150760"
  },
  {
    "text": "figure out and and if we looking at the Dave maybe it's worth point up like a stack Trace from that problem just so people have an idea of of when I say no",
    "start": "1150760",
    "end": "1157919"
  },
  {
    "text": "idea I've actually got a because we actually took a core dump um hoping that we wouldd be able to come back to this I",
    "start": "1157919",
    "end": "1163720"
  },
  {
    "text": "think I've got here so yeah let me let me when I say no idea this is what a we",
    "start": "1163720",
    "end": "1169200"
  },
  {
    "text": "did a gcore we could take a cordum of the live thing this is the actual stack Trace um that you",
    "start": "1169200",
    "end": "1177080"
  },
  {
    "text": "see so when I because you may say oh well they have no idea but I'm good I'd have an idea okay smarty pants all we",
    "start": "1177080",
    "end": "1184280"
  },
  {
    "text": "need to do is find whoever wrote fc21 a zc5 because that guy's our problem",
    "start": "1184280",
    "end": "1190440"
  },
  {
    "text": "actually it's even more frustrating than that because we actually did know that that was our problem we actually did know because we after observing this for",
    "start": "1190440",
    "end": "1196720"
  },
  {
    "text": "for some period of time it's like actually as it happens fc21 a zc5 is the problem we had no way of determining if",
    "start": "1196720",
    "end": "1204799"
  },
  {
    "text": "I could just know what function just tell me the file just tell actually just tell me some letters present in its file",
    "start": "1204799",
    "end": "1211720"
  },
  {
    "text": "name I mean just anything please anything anything I'll be good I'll be good I promise but we're looking at this",
    "start": "1211720",
    "end": "1217880"
  },
  {
    "text": "and it's just like this is actually hopeless um and we and we we had there",
    "start": "1217880",
    "end": "1223159"
  },
  {
    "text": "is a node debugger um and right so so Ryan had suggested um trying to use the",
    "start": "1223159",
    "end": "1228360"
  },
  {
    "text": "node debugger at the time the pro so you could send Sig user one on node and it would open up a debug port and you could",
    "start": "1228360",
    "end": "1234480"
  },
  {
    "text": "attach with the V8 debugger the problem was it only did that when you got back to the event Loop so we were stuck in",
    "start": "1234480",
    "end": "1241120"
  },
  {
    "text": "the event Loop yeah funny story about the event loop we're not going there that's the problem then you said it's",
    "start": "1241120",
    "end": "1246840"
  },
  {
    "text": "like okay I'll open up that debug Port just finish up what you're doing right as soon as you back to the event loop as soon as you're done doing whatever you're doing we'll open up this debuger",
    "start": "1246840",
    "end": "1253120"
  },
  {
    "text": "and we can figure out what you're doing it's like yeah I'm not going to finish up what I'm doing because I don't know what I'm doing um do you know what fc2",
    "start": "1253120",
    "end": "1258559"
  },
  {
    "text": "21 a0 C5 is uh so this was frustrating and so we had that that so we didn't",
    "start": "1258559",
    "end": "1264799"
  },
  {
    "text": "debug it we we took a core but couldn't debug it uh and then the question was how quickly after we deploy into",
    "start": "1264799",
    "end": "1271600"
  },
  {
    "text": "production are we going to see this everywhere and the question I had was will this be milliseconds or microsc",
    "start": "1271600",
    "end": "1278080"
  },
  {
    "text": "after we deploy into production right you no doubt that this is going to be a meltdown flaming disaster when we go",
    "start": "1278080",
    "end": "1283480"
  },
  {
    "text": "into production right you've got this highly concurrent system and we were able to trigger this bug by just like playing around with play around right",
    "start": "1283480",
    "end": "1289440"
  },
  {
    "text": "exactly and but Dave as I recall you you were much more optimistic than I was I I",
    "start": "1289440",
    "end": "1295080"
  },
  {
    "text": "think I might have been at first I mean I I barely remember I mean maybe I figured we'd go like a week or something like that but I think you talked me down",
    "start": "1295080",
    "end": "1300640"
  },
  {
    "text": "to like certainly within the first day well I think I talked you down because we need to actually get a bet in place I",
    "start": "1300640",
    "end": "1305840"
  },
  {
    "text": "don't know if you guys do this in your in your workplace you got to make people actually put money on their assertions that's the the conversations get much",
    "start": "1305840",
    "end": "1312039"
  },
  {
    "text": "more focused so Dave and I had to make an actual bet um and yeah within a day that was easy money so okay we deployed",
    "start": "1312039",
    "end": "1318679"
  },
  {
    "text": "production we're going to see this all over brace for impact we don't see it anywhere doesn't happen yep days pass",
    "start": "1318679",
    "end": "1326360"
  },
  {
    "text": "day Dave at this point is gloating weeks pass at this point Dave is like forgotten to gloat he's trying to remember to gloat every day but just",
    "start": "1326360",
    "end": "1332120"
  },
  {
    "text": "like just the gloating has gotten old months pass literally six months later",
    "start": "1332120",
    "end": "1338320"
  },
  {
    "text": "now we've just forgotten about this thing and of course and this is the difference between amateur and professional by the way amateur says hey",
    "start": "1338320",
    "end": "1345159"
  },
  {
    "text": "great we must have fixed the bug professionals says oh no oh no no no no",
    "start": "1345159",
    "end": "1350799"
  },
  {
    "text": "no no I know we didn't fix that bug that is a bug it's in our software and it is lying in weight to us at our most",
    "start": "1350799",
    "end": "1356880"
  },
  {
    "text": "inopportune moment on the very worst day of Our Lives on the very worst day of Our Lives is going to make is lying in",
    "start": "1356880",
    "end": "1362679"
  },
  {
    "text": "weight and it will pounce on us to make that day even worse that is what will happen and sure enough I was in front of",
    "start": "1362679",
    "end": "1367960"
  },
  {
    "text": "a customer of course demoing this of course and using it all of a sudden dunk",
    "start": "1367960",
    "end": "1373039"
  },
  {
    "text": "it locks up again and you get that kind of fight ORF flight reaction you know you have a demo go south on you um",
    "start": "1373039",
    "end": "1378520"
  },
  {
    "text": "hopefully won't happen here um but and of course Very alarming um I kind of made up something um was hope was this",
    "start": "1378520",
    "end": "1385760"
  },
  {
    "text": "problem we look at this exact same symptoms but now we could actually go we could actually go reason about we're going to show you a demo of that a",
    "start": "1385760",
    "end": "1391000"
  },
  {
    "text": "little bit later on but um so this is the problem the problem is we look at this thing and we've got absolutely no",
    "start": "1391000",
    "end": "1396240"
  },
  {
    "text": "idea what is actually truly going on so I um we just talk about nodejs",
    "start": "1396240",
    "end": "1401799"
  },
  {
    "text": "just just a little bit um because just to many people have heard of it one thing you might find a little bit",
    "start": "1401799",
    "end": "1407200"
  },
  {
    "text": "surprising is that a lot of our software at joyant our core software is is being",
    "start": "1407200",
    "end": "1412360"
  },
  {
    "text": "written in node um stuff that was written in C stuff that we would have overwhelming biases to run and to write",
    "start": "1412360",
    "end": "1418320"
  },
  {
    "text": "in C um trust me if there was any case to be made for writing these things in C we would do it um we love c um not C++",
    "start": "1418320",
    "end": "1426279"
  },
  {
    "text": "not so much C yes um but the but from for many of these things uh and I mean",
    "start": "1426279",
    "end": "1431440"
  },
  {
    "text": "this the services are actually simple enough and V8 is fast enough that it actually makes a lot more sense to write",
    "start": "1431440",
    "end": "1437120"
  },
  {
    "text": "it in node um so I mean and and Dave I mean you get considered save for the service you're building but it just it",
    "start": "1437120",
    "end": "1442200"
  },
  {
    "text": "just doesn't make sense you talked me out of it I did I did talk hey are you blaming me now no it was it was absolutely the right call we were able",
    "start": "1442200",
    "end": "1447919"
  },
  {
    "text": "to get a prototype up in like two weeks and it was in production in like two months I think um and you know we",
    "start": "1447919",
    "end": "1453440"
  },
  {
    "text": "expected that to take a lot longer and it definitely would have taken a lot longer if we had done that and see and so we've done this with a bunch of",
    "start": "1453440",
    "end": "1459039"
  },
  {
    "text": "services now you know we rattle off the list up there um and it's just kind of crazy just as an example someone asked",
    "start": "1459039",
    "end": "1464600"
  },
  {
    "text": "me DHCP really you wrote a DHCP server in node it's like well yeah actually so",
    "start": "1464600",
    "end": "1469799"
  },
  {
    "text": "what joyant does is we write this we build this product called smart data center which runs the joyant public cloud and so you you you're essentially",
    "start": "1469799",
    "end": "1476360"
  },
  {
    "text": "managing the servers that make up a Data Center and one of the important pieces of that is uh managing the platform",
    "start": "1476360",
    "end": "1482279"
  },
  {
    "text": "images the operating systems that each one is going to boot so you can go to the web UI and you can say I want this to boot this version of the kernel and",
    "start": "1482279",
    "end": "1488600"
  },
  {
    "text": "you know I want to have this other server boot some other version I want to make the new this new version default on all new systems when they reboot so you",
    "start": "1488600",
    "end": "1495159"
  },
  {
    "text": "basically want when these things boot they net boot the platform image from uh the head note of the data center well",
    "start": "1495159",
    "end": "1500919"
  },
  {
    "text": "the easiest way to do that is if you control DHCP but the source of that information is this Dynamic uh source",
    "start": "1500919",
    "end": "1507000"
  },
  {
    "text": "which we have which is the set of os images and the configuration and stuff it's like why not just have a little node server that's speaking DHCP out one",
    "start": "1507000",
    "end": "1513520"
  },
  {
    "text": "end and talks to our our back end on the other side and it actually you know it's a few hundred lines of code it's really",
    "start": "1513520",
    "end": "1518799"
  },
  {
    "text": "not a big deal well also was not our first thought by the way our first thought was of course I'm just going to take ISC dhcpd out back with a baseball",
    "start": "1518799",
    "end": "1525399"
  },
  {
    "text": "bat and I'm going to beat it with an an inch of its life and get it to do this makes sense um but it was amazing after",
    "start": "1525399",
    "end": "1531320"
  },
  {
    "text": "basically a week and a half of doing that the engineer who was doing this Josh Wilson was like you know what I think I could actually just write this thing in node from scratch and it would",
    "start": "1531320",
    "end": "1537799"
  },
  {
    "text": "be faster and it was three days to write a DHCP server from scratch in node um",
    "start": "1537799",
    "end": "1543360"
  },
  {
    "text": "which is an amazing Testament to three things um one JavaScript um I love JavaScript I'm loud and proud about that",
    "start": "1543360",
    "end": "1550279"
  },
  {
    "text": "as a a konel c and assembly programmer it took me many years to come to grips",
    "start": "1550279",
    "end": "1555880"
  },
  {
    "text": "with my attraction the JavaScript uh it it felt like the forbidden fruit for a while but I now I'm loud and proud I I",
    "start": "1555880",
    "end": "1561399"
  },
  {
    "text": "love JavaScript um there are a lot of things I love about it um it in particular JavaScript has got first",
    "start": "1561399",
    "end": "1567559"
  },
  {
    "text": "class support for asynchron thanks to closures so you can it's very easy to build an event oriented asynchronous",
    "start": "1567559",
    "end": "1573919"
  },
  {
    "text": "system in JavaScript um but it javascript's not enough we needed V8 huge data gratitude to V8 not just for",
    "start": "1573919",
    "end": "1580480"
  },
  {
    "text": "V8 but for kicking off an arms race with all the other VMS uh I every time we",
    "start": "1580480",
    "end": "1586080"
  },
  {
    "text": "have a high performance JavaScript VM we owe it to V8 because V8 is the one that actually kicked us off there and that is",
    "start": "1586080",
    "end": "1592240"
  },
  {
    "text": "critical and then also we've got what node is is basically those two things JavaScript plus plus V8 and then taking",
    "start": "1592240",
    "end": "1599159"
  },
  {
    "text": "the Unix system abstractions which are the system abstractions that God intended I'm I speak to God on a regular",
    "start": "1599159",
    "end": "1606080"
  },
  {
    "text": "basis on these things so I just want he he wanted me to convey clearly that yes this was my intent it got confused there",
    "start": "1606080",
    "end": "1611440"
  },
  {
    "text": "a little bit um that's why he called Dennis home I think that he wanted to um so the the system abstractions that that",
    "start": "1611440",
    "end": "1617840"
  },
  {
    "text": "are actually the right system of instraction Unix you take that together and that's what that's what node is so node for us has been terrific with the",
    "start": "1617840",
    "end": "1624600"
  },
  {
    "text": "asterisk of how do you actually go debug these serious production problems which like the problem that we",
    "start": "1624600",
    "end": "1630799"
  },
  {
    "text": "had yeah so um before we get we're going to talk about our our you know our approach to postmortem debugging for",
    "start": "1630799",
    "end": "1638080"
  },
  {
    "text": "nodejs before we talk about it we need to talk about this tool that we have on our systems called MDB this is the modular debugger um this is a debugger",
    "start": "1638080",
    "end": "1645440"
  },
  {
    "text": "initially created as part of Solaris kernel development for post postmortem analysis of Kernel crash dumps and",
    "start": "1645440",
    "end": "1651279"
  },
  {
    "text": "what's really important about the kernel is that it's got a very large number of subsystems each of which is pretty",
    "start": "1651279",
    "end": "1656480"
  },
  {
    "text": "complex and so and of course they interact with each other so it's very important to be able to build tools to",
    "start": "1656480",
    "end": "1662919"
  },
  {
    "text": "iterate sort of the the objects of a particular subsystem and you know figure out what the connections between these",
    "start": "1662919",
    "end": "1668200"
  },
  {
    "text": "things are so MDB really focuses on the ability to build tooling and build tooling on top of the other tooling and",
    "start": "1668200",
    "end": "1674760"
  },
  {
    "text": "the way you interact with it we'll be demoing in a second is you you've got this thing that looks like a shell and you're um you know you can pipe commands",
    "start": "1674760",
    "end": "1681640"
  },
  {
    "text": "together so you can walk the some set of objects and you pipe that to some other uh DEC command that uh you know prints",
    "start": "1681640",
    "end": "1687799"
  },
  {
    "text": "out information about those and then you pipe that to something else um this is extremely important and and again the",
    "start": "1687799",
    "end": "1693240"
  },
  {
    "text": "ability to layer these things so um Brian's going to demo on the live uh the live kernel so MDB of course can also",
    "start": "1693240",
    "end": "1699440"
  },
  {
    "text": "operate on the Kernel that's running on the system um what he's demoing now is a command called stacks and what Stacks",
    "start": "1699440",
    "end": "1705519"
  },
  {
    "text": "does is it goes through all of the threads on on the system um grabs a stack trace and then uh coalesces those",
    "start": "1705519",
    "end": "1713480"
  },
  {
    "text": "so it counts how many have the same stack and it gives you a representative pointer for each one which is a pretty",
    "start": "1713480",
    "end": "1718799"
  },
  {
    "text": "simple idea but it's incredibly important to be able to do this on a system with thousands of threads and you can filter that by kernel module by uh",
    "start": "1718799",
    "end": "1726480"
  },
  {
    "text": "function or whatever you want um now he's going to walk proc so colon",
    "start": "1726480",
    "end": "1732519"
  },
  {
    "text": "walk proc so the the Syntax for MDB is definitely a little bit strange just sort of put that aside for a second so",
    "start": "1732519",
    "end": "1738240"
  },
  {
    "text": "walk proc is just going to iterate over all of the pro T structures in the kernel and now he's piped that to is",
    "start": "1738240",
    "end": "1743880"
  },
  {
    "text": "that PS yeah colon colon PS you can pipe that to print proc TP user ukom and now",
    "start": "1743880",
    "end": "1749039"
  },
  {
    "text": "you're getting that field from all the proc structur so it's just it's really important to be able to just quickly",
    "start": "1749039",
    "end": "1754480"
  },
  {
    "text": "iterate through the state of the system and um it made a natural platform for",
    "start": "1754480",
    "end": "1759519"
  },
  {
    "text": "building postm mod debugging for node because it's already designed with the idea of building new tools into it and",
    "start": "1759519",
    "end": "1764960"
  },
  {
    "text": "and being able to put these things together so with that we should we dive uh right into the the core file that we",
    "start": "1764960",
    "end": "1770799"
  },
  {
    "text": "have sure yeah so we we talked about the problem where we had uh this node program um spinning on CPU that we",
    "start": "1770799",
    "end": "1777760"
  },
  {
    "text": "didn't mention we did check a lot of things we checked like logs we checked what system calls it was doing right",
    "start": "1777760",
    "end": "1782799"
  },
  {
    "text": "because a program has a hard time doing a lot of interesting things without making any system calls you're not talking over the network you're not",
    "start": "1782799",
    "end": "1788200"
  },
  {
    "text": "writing files it's like you're not outputting anything um so it's just running on CPU we took the core file in",
    "start": "1788200",
    "end": "1794120"
  },
  {
    "text": "hopes that Som day later we would be able to figure out what it was now Brian's opened up this this core file",
    "start": "1794120",
    "end": "1799240"
  },
  {
    "text": "this is the core file we had from production the very first time that we saw this problem that we literally could not analyze for something like eight",
    "start": "1799240",
    "end": "1806360"
  },
  {
    "text": "months yeah although dve just to correct you one thing you said we took the core file in the hope that we would be able to debug it that's actually it's it's",
    "start": "1806360",
    "end": "1812600"
  },
  {
    "text": "actually a misread of History because we had no hope that we were ever going to debug it and we took the core file because this space isn't expensive and",
    "start": "1812600",
    "end": "1819440"
  },
  {
    "text": "you might as well have the information um but Dave in particular was like man we've got to go do postmortem debugging",
    "start": "1819440",
    "end": "1824960"
  },
  {
    "text": "for node and I knew how complicated this was and how brutal the VM state would be",
    "start": "1824960",
    "end": "1830679"
  },
  {
    "text": "even for a a a much easier VM a much lower performing VM it's like that's impossible that's actually impossible um",
    "start": "1830679",
    "end": "1837000"
  },
  {
    "text": "I mean yes it's all software blah blah blah but this is I mean truly some software is impossible and this was definitely in the impossible bucket for",
    "start": "1837000",
    "end": "1842760"
  },
  {
    "text": "me um but people read the soul of a new machine by the way Tracy KD soul of a new machine um excellent excellent book",
    "start": "1842760",
    "end": "1850559"
  },
  {
    "text": "um and I I would say a must read for every software engineer is the soul of a new machine and it's a must-read because",
    "start": "1850559",
    "end": "1855840"
  },
  {
    "text": "it has all sort of nuggets of wisdom and one of the Nuggets of wisd and pertains directly to this that they brought in a",
    "start": "1855840",
    "end": "1860880"
  },
  {
    "text": "junior engineer and nobody wanted to actually deal with this guy um like everyone's busy not because he was a",
    "start": "1860880",
    "end": "1866919"
  },
  {
    "text": "jerk but because everyone is busy this is in data General 1979 they're all busy on this next computer and they just",
    "start": "1866919",
    "end": "1873120"
  },
  {
    "text": "can't afford to Mentor this guy so they just kind of go tell him to go solve a problem they tell him to go write a",
    "start": "1873120",
    "end": "1878760"
  },
  {
    "text": "simulator for the new microprocessor because they know it's impossible to write a simulator and it'll keep him busy and he'll learn a lot and then",
    "start": "1878760",
    "end": "1884960"
  },
  {
    "text": "you'll come back and you'll be frustrated and you'll figure out how how they can help help out he comes back 2 months later and says okay I'm done like",
    "start": "1884960",
    "end": "1891399"
  },
  {
    "text": "done with what well I'm done with the simulator you told me to go write the simulator I'm done with the simulator and there's this great moment where the",
    "start": "1891399",
    "end": "1897039"
  },
  {
    "text": "engineers look at one another and they realized that each had forgotten to tell him that it was actually impossible he",
    "start": "1897039",
    "end": "1902880"
  },
  {
    "text": "did it because he didn't know it was impossible and I didn't want to like tell Dave that this was impossible even",
    "start": "1902880",
    "end": "1909480"
  },
  {
    "text": "though I firmly belied that it was so I would kind oh yeah sure yeah maybe da and as Dave got excited about this I'm",
    "start": "1909480",
    "end": "1915080"
  },
  {
    "text": "like oh yeah it won't be that bad Dave was like you know I don't think it's going to be that bad and I'm like Dave it won't be that bad",
    "start": "1915080",
    "end": "1920480"
  },
  {
    "text": "no of course not go go go go go it won't be that bad it won't be that bad and of course like 3 weeks later he's like oh my God this is awful it's like Dave come",
    "start": "1920480",
    "end": "1927159"
  },
  {
    "text": "on you're you're three weeks in now you got to keep going um so Dave did an incredibly difficult thing here um and",
    "start": "1927159",
    "end": "1934799"
  },
  {
    "text": "what we're able what I'm doing now is I'm loading the the the v8. soo module and you know this was a long time ago",
    "start": "1934799",
    "end": "1941159"
  },
  {
    "text": "because it's it's pointing out that this was node V4 yeah exactly you know this actually an actual dump for a long time",
    "start": "1941159",
    "end": "1946200"
  },
  {
    "text": "ago this is I know I'm sure cast folks must have a seizure when they see uh 3.1.8 26 um but yes this is an old",
    "start": "1946200",
    "end": "1953679"
  },
  {
    "text": "version of V8 um so we that's the stack Trace um actually much more interesting",
    "start": "1953679",
    "end": "1959480"
  },
  {
    "text": "is the JavaScript stack Trace so what we have here what we're looking at is the",
    "start": "1959480",
    "end": "1965080"
  },
  {
    "text": "same stack Trace we had before with just a bunch of hex addresses but now for each one of them it's annotated with",
    "start": "1965080",
    "end": "1970360"
  },
  {
    "text": "information about what the JavaScript level frame is so for the JavaScript frames we actually have the name of the",
    "start": "1970360",
    "end": "1975399"
  },
  {
    "text": "function um the file where it was defined the line number where it was defined if that's been computed but at least the position information and then",
    "start": "1975399",
    "end": "1981799"
  },
  {
    "text": "we have some of the V8 internal frames and stuff like that umun out minus V with if I run on the minus V option um",
    "start": "1981799",
    "end": "1989840"
  },
  {
    "text": "this like an apparition from the future tells me all where exactly I am for",
    "start": "1989840",
    "end": "1996360"
  },
  {
    "text": "every frame of of the stack um I mean this is much better than the number of of vowels or whatever in the file name",
    "start": "1996360",
    "end": "2002639"
  },
  {
    "text": "this is everything and even better we actually have the arguments and",
    "start": "2002639",
    "end": "2007760"
  },
  {
    "text": "unbelievably we can actually decode these en these arguments as JavaScript",
    "start": "2007760",
    "end": "2013000"
  },
  {
    "text": "objects I don't want to print that sorry sorry um let's try that um actually the computer is actually even very excited",
    "start": "2013000",
    "end": "2019320"
  },
  {
    "text": "about this it's like wow did I just see what I thought do you want to print this out this is amazing I got to tell someone I I got to go tell someone about",
    "start": "2019320",
    "end": "2025159"
  },
  {
    "text": "this I'm just going to go print this out you keep demoing I know you're on stage but wow that's amazing um and it is",
    "start": "2025159",
    "end": "2031080"
  },
  {
    "text": "amazing and in particular this was going to allow us and now as as we had all of a sudden this unbelievable information",
    "start": "2031080",
    "end": "2036919"
  },
  {
    "text": "this was going to allow us to to resolve another discussion we had which is who bug is this anyway because Dave and I",
    "start": "2036919",
    "end": "2044919"
  },
  {
    "text": "are both being gentlemen um so we uh this code I've written some code in the system Dave's written a bunch of code in",
    "start": "2044919",
    "end": "2050320"
  },
  {
    "text": "the system both being gentlemen we each insist that it is a bug in our own code of course we also honestly secretly",
    "start": "2050320",
    "end": "2057560"
  },
  {
    "text": "believe and hope actually that it's a bug in the other guy's code you actually don't want it to be a bug in your code oh oh I'm sure it's a bug in my code oh",
    "start": "2057560",
    "end": "2063320"
  },
  {
    "text": "no no no I'm sure it's a bug in my code please don't let it be my code please do not let it be my code um so this is and",
    "start": "2063320",
    "end": "2069079"
  },
  {
    "text": "unfortunately this actually did not necessarily settle things when you look at the stack Trace because this is actually code that I wrote and this is",
    "start": "2069079",
    "end": "2075839"
  },
  {
    "text": "code that Dave wrote so um this could go any way still um so let's use the unbelievable JS print on what I've done",
    "start": "2075839",
    "end": "2083000"
  },
  {
    "text": "is I've taken um one of these arguments the the JS object argument there and I'm going to actually print that out that is",
    "start": "2083000",
    "end": "2089440"
  },
  {
    "text": "the Json that we actually that that comes from the program this is Meaningful in JavaScript we've gone all",
    "start": "2089440",
    "end": "2096000"
  },
  {
    "text": "the way up from the sewer to what we had for dinner if that smells like a stinky task",
    "start": "2096000",
    "end": "2103359"
  },
  {
    "text": "it is um and I don't know if you can see mean obviously you guys don't know anything about this code necessarily but",
    "start": "2103359",
    "end": "2110560"
  },
  {
    "text": "do you see anything there that that looks suspicious that you might correlate with an infinite",
    "start": "2110560",
    "end": "2116119"
  },
  {
    "text": "Loop Min and Max are the same yeah now all right now now was the",
    "start": "2116119",
    "end": "2121920"
  },
  {
    "text": "argument like so okay my code definitely was not checking from Min and Max being the same so okay the infinite Loop is in",
    "start": "2121920",
    "end": "2128640"
  },
  {
    "text": "my code um but Dave has actually this code should never be called with minut",
    "start": "2128640",
    "end": "2134160"
  },
  {
    "text": "and a Max being the same now both being gentlemen we each insist that it is a bug in our code it is bug in my code that's right it's bug in my code but I'm",
    "start": "2134160",
    "end": "2140800"
  },
  {
    "text": "yeah go fix your bug I I'm going to fix my bug we're both going to I think we we both agreed to fix both of our bugs",
    "start": "2140800",
    "end": "2146400"
  },
  {
    "text": "that's right um and so the other key about this was the function that is at the top of the stack is completely",
    "start": "2146400",
    "end": "2151800"
  },
  {
    "text": "stateless which and we have both of the arguments which means we actually got a reproducible test case just from the",
    "start": "2151800",
    "end": "2157160"
  },
  {
    "text": "core file so even if you know it wasn't totally obvious that Min equals Max is going to cause this thing to go nuts we",
    "start": "2157160",
    "end": "2162880"
  },
  {
    "text": "could very easily test it at that point which was huge so we've got a bunch of other stuff here as well um con and V8",
    "start": "2162880",
    "end": "2168839"
  },
  {
    "text": "function actually is there an easy way I can get a V8 function on this let's see if we got yeah there we are there there we got one um so that will actually um",
    "start": "2168839",
    "end": "2176240"
  },
  {
    "text": "print out a a function and I should be able to do minus D to that right Dave yeah um so this actually and this",
    "start": "2176240",
    "end": "2183280"
  },
  {
    "text": "matters to probably slightly fewer of you but if you work on V8 um this is stuff that you're familiar with because",
    "start": "2183280",
    "end": "2188520"
  },
  {
    "text": "this is actually taking us from the the actual object that is the the the JS function down to the actual generated",
    "start": "2188520",
    "end": "2195119"
  },
  {
    "text": "assembly and then disassembling it oh my God it's going to go on for a long long time smokers you actually want to hit Q",
    "start": "2195119",
    "end": "2202079"
  },
  {
    "text": "because it will take five minutes man we do a lot of work wow thank God computers are fast um so anyway it allows you to",
    "start": "2202079",
    "end": "2209400"
  },
  {
    "text": "to to get a level of introspection that we've never really had before um and so",
    "start": "2209400",
    "end": "2215280"
  },
  {
    "text": "Dave had had delivered this to us like like Prometheus um and we were trying to",
    "start": "2215280",
    "end": "2223079"
  },
  {
    "text": "to think you know what are some of the other things we can go use this for actually no that's not even the way we were thinking about it what we're thinking of is we have an excruciating",
    "start": "2223079",
    "end": "2228640"
  },
  {
    "text": "problem that we don't know how to debug a different excruciating we a different excruciating problem we also had no idea",
    "start": "2228640",
    "end": "2233680"
  },
  {
    "text": "how to figure out right and that is memory use so if you've deployed node Productions and in in programs in",
    "start": "2233680",
    "end": "2240440"
  },
  {
    "text": "production or frankly any Dynamic language in production you've been burned by memory utilization at some point right and people love to oh I",
    "start": "2240440",
    "end": "2246640"
  },
  {
    "text": "blame the GC oh it's the GC um it's virtually never the GC especially with V8 terrific GC um even if the GC is",
    "start": "2246640",
    "end": "2254280"
  },
  {
    "text": "running really hard it's probably not the GC the problem is you're not generating any garbage it's looking",
    "start": "2254280",
    "end": "2260000"
  },
  {
    "text": "everywhere for garbage you but you have references to objects that as far as V8 is concerned as far as far as the VM is",
    "start": "2260000",
    "end": "2266160"
  },
  {
    "text": "concerned Java whatever else the objects are still live it it's not actual",
    "start": "2266160",
    "end": "2271319"
  },
  {
    "text": "garbage that the garbage man does not come by your house break into your house and steal your sofa and throw it out that's considered to be ungentlemanly we",
    "start": "2271319",
    "end": "2277920"
  },
  {
    "text": "don't do that so it's not garbage now you may think it's garbage but it's not so how do you actually and the the",
    "start": "2277920",
    "end": "2283760"
  },
  {
    "text": "problem in V8 this or in node this is especially acute problem a vent oriented system and the difference between your",
    "start": "2283760",
    "end": "2290640"
  },
  {
    "text": "ability to do work and the incoming work that you have to do will be Memory so if",
    "start": "2290640",
    "end": "2297119"
  },
  {
    "text": "you just can't keep up your memory will begin to grow and you need to know",
    "start": "2297119",
    "end": "2302560"
  },
  {
    "text": "desperately is my memory growth because I can't keep up or is my memory growth because I actually have a leak here I've",
    "start": "2302560",
    "end": "2309119"
  },
  {
    "text": "got something that is semantically leaked that I'm not actually freeing and we wanted to go like walk the the and",
    "start": "2309119",
    "end": "2315359"
  },
  {
    "text": "because you were thinking about how how to do this with with V8 right and how we could actually go walk the the Heap I spent a lot of time thinking well you",
    "start": "2315359",
    "end": "2321200"
  },
  {
    "text": "know this this debugger module as we'll talk about has a lot of knowledge about how V8 structures things like but boy it",
    "start": "2321200",
    "end": "2327280"
  },
  {
    "text": "would be a whole another level of complexity if it knew if it had to figure out how to iterate the Heap properly you know starting from GC Roots",
    "start": "2327280",
    "end": "2334280"
  },
  {
    "text": "following all the objects that are referenced and you know following that along and this you know how young we we become you know cynical veterans so this",
    "start": "2334280",
    "end": "2341520"
  },
  {
    "text": "this problem today was already like oh my God this is awful um and then but I I was in in this code and and we're",
    "start": "2341520",
    "end": "2348000"
  },
  {
    "text": "helping accentus and so on and I noticed it's like actually in order for something to be a V8 object a lot of",
    "start": "2348000",
    "end": "2353640"
  },
  {
    "text": "things have to be self-consistent things point to things that need to point back to other things that need to be of particular types and so on so if you",
    "start": "2353640",
    "end": "2359640"
  },
  {
    "text": "just look at an arbitrary bit of memory in in your process you can actually",
    "start": "2359640",
    "end": "2364839"
  },
  {
    "text": "reason with a very high degree of certainty about whether it can't be a a JavaScript object so the question we had",
    "start": "2364839",
    "end": "2371359"
  },
  {
    "text": "is like what if we just go through memory and try to treat everything is an object um it's like wow that is so",
    "start": "2371359",
    "end": "2378680"
  },
  {
    "text": "filthy it's a great example of the kind of brute force that you can do if you have the luxury of operating on a core",
    "start": "2378680",
    "end": "2384200"
  },
  {
    "text": "file you know out outside the critical path of restoring service and I I have to say I love brute force on a core dump",
    "start": "2384200",
    "end": "2390480"
  },
  {
    "text": "it it feels like like the computer is doing work for a change you know it's like you go out you the the human it's",
    "start": "2390480",
    "end": "2396200"
  },
  {
    "text": "Overlord go out for a cup of coffee well while the computer your servant does all of this work D so I love it when we go",
    "start": "2396200",
    "end": "2402079"
  },
  {
    "text": "compute bound on a core dump um and I don't know how long we're going to go compute bound here so there we are I just ran it co and find JS objects um",
    "start": "2402079",
    "end": "2408720"
  },
  {
    "text": "and actually you know what let me I'll I'll I'll run that again but with the the minus V option which is going to",
    "start": "2408720",
    "end": "2413960"
  },
  {
    "text": "give us um lots of um find object V which will give us actually more",
    "start": "2413960",
    "end": "2419760"
  },
  {
    "text": "information about the um the amount of time one second um the number of objects",
    "start": "2419760",
    "end": "2425040"
  },
  {
    "text": "um the the and this is the number of reads of types did the number of JavaScript objects it found um and process objects and then unique objects",
    "start": "2425040",
    "end": "2431240"
  },
  {
    "text": "it unique ifies the objects by their actual properties um and now there's there's definitely some improvement we",
    "start": "2431240",
    "end": "2437599"
  },
  {
    "text": "need to make here you can see that we're identifying things that look a bit odd but we're also finding a bunch of legitimate stuff here as well um so",
    "start": "2437599",
    "end": "2444040"
  },
  {
    "text": "let's just take kind of one of these randomly and now I can JS print one of these guys and you I mean this is this",
    "start": "2444040",
    "end": "2449960"
  },
  {
    "text": "is obviously legitimate JavaScript object and we've been using this so much that the I know that that um people have",
    "start": "2449960",
    "end": "2456960"
  },
  {
    "text": "been complaining more and more about the performance of fine JS objects me Dave",
    "start": "2456960",
    "end": "2462359"
  },
  {
    "text": "Dave this well wait a minute this one took one second but when you actually have I mean this is a 27 Meg core file",
    "start": "2462359",
    "end": "2467880"
  },
  {
    "text": "when you actually have a memory problem and this core file is actually several hundred Megs it took a little bit longer",
    "start": "2467880",
    "end": "2473040"
  },
  {
    "text": "yeah it took a little bit longer like it took like a minute or like two minutes and I'm sorry that Prometheus is held up",
    "start": "2473040",
    "end": "2479280"
  },
  {
    "text": "in traffic okay you have to be a little bit patient I'm on my fraking way with the fire the with with fire exactly but",
    "start": "2479280",
    "end": "2488160"
  },
  {
    "text": "the um because the reason that Dave was complaining about it actually is because we've Incorporated it into the way we",
    "start": "2488160",
    "end": "2493599"
  },
  {
    "text": "develop node programs and whenever anything goes wrong now with the program the first thing we do is gcore it um let",
    "start": "2493599",
    "end": "2499400"
  },
  {
    "text": "it run just gcore it take the core dump and do a fjs object and you like to do minus P right Dave yeah um so let's see",
    "start": "2499400",
    "end": "2505319"
  },
  {
    "text": "I should be able to do like minus P exports so that finds every JavaScript object that has an exports property oops",
    "start": "2505319",
    "end": "2512920"
  },
  {
    "text": "darn it sorry didn't mean to um and then what I can do is actually go go pipe that through and we can actually look at",
    "start": "2512920",
    "end": "2519960"
  },
  {
    "text": "all of those objects so let's run that again and sorry to quit there um so if I",
    "start": "2519960",
    "end": "2526800"
  },
  {
    "text": "do find JS objects minus P exports was that uh exports sorry I can pipe that",
    "start": "2526800",
    "end": "2533359"
  },
  {
    "text": "through to find JS objects that gives me those are giving me the reference objects those are all the objects that match it and then if I want I can pipe",
    "start": "2533359",
    "end": "2539400"
  },
  {
    "text": "that through to JS print and these are the those are the two kinds of objects that have exports members this is useful",
    "start": "2539400",
    "end": "2548160"
  },
  {
    "text": "as it turns out um and we use this a lot in developing our own node programs um",
    "start": "2548160",
    "end": "2553400"
  },
  {
    "text": "to the point that now we're complaining about the performance which is good that's that's actually a great position to be in um so uh and we've actually I",
    "start": "2553400",
    "end": "2559520"
  },
  {
    "text": "think most importantly um we've actually used this to debug real honest to God problems so we had a a really nasty um",
    "start": "2559520",
    "end": "2567160"
  },
  {
    "text": "uh problem where we consuming way too much Heap um then we were able to use fine JS objects and Isaac was Isaac",
    "start": "2567160",
    "end": "2572640"
  },
  {
    "text": "schlutter works for joyant um was able to actually use it to to actually confirm the hypothesis that he already",
    "start": "2572640",
    "end": "2578800"
  },
  {
    "text": "had so tremendously useful stuff and don't you may briefly want to touch on what's going on here yeah so you know we",
    "start": "2578800",
    "end": "2585319"
  },
  {
    "text": "basically we spent a while talking about how hard this was and then we just kind of showed it it's like well this is kind of magic how does it actually work well",
    "start": "2585319",
    "end": "2591240"
  },
  {
    "text": "obviously at some level our debugger module just knows a bunch of stuff about V8 it knows uh how to walk object",
    "start": "2591240",
    "end": "2597640"
  },
  {
    "text": "properties for a given object it knows how to walk stack frames and it knows how to decode uh Heap objects but it was",
    "start": "2597640",
    "end": "2603280"
  },
  {
    "text": "really important to us that it not be so brittle that anytime VH changes at all",
    "start": "2603280",
    "end": "2608400"
  },
  {
    "text": "that the thing just totally breaks and so what we did is I think you can actually go to the next slide um we we",
    "start": "2608400",
    "end": "2613760"
  },
  {
    "text": "encode it in lib V8 and then we propagate that into node we encode a",
    "start": "2613760",
    "end": "2618920"
  },
  {
    "text": "bunch of I mean this is really pretty Half Baked we basically just encode a bunch of offsets describing the",
    "start": "2618920",
    "end": "2624359"
  },
  {
    "text": "structure of these Heap objects and other useful constants like you know the the JS function argument being used in",
    "start": "2624359",
    "end": "2630640"
  },
  {
    "text": "each frame is always stored at you know offset two words from the frame pointer like that was just something we wanted to be able to parameterize by so that if",
    "start": "2630640",
    "end": "2637559"
  },
  {
    "text": "we were doing this on a different architecture 3264 or whatever it would still work um and this this was very",
    "start": "2637559",
    "end": "2644079"
  },
  {
    "text": "useful it means that when small changes are made um we don't just totally break all the time but it continues to be a",
    "start": "2644079",
    "end": "2650400"
  },
  {
    "text": "thorn in our side that if if bigger changes are made to V8 you know if those algorithms that I describe change about",
    "start": "2650400",
    "end": "2656640"
  },
  {
    "text": "how you walk properties of objects that breaks our debugger module at the moment because the the module is built",
    "start": "2656640",
    "end": "2662480"
  },
  {
    "text": "separately from node itself and um this is kind of what we see as one of the bigger open problems in the future is",
    "start": "2662480",
    "end": "2668200"
  },
  {
    "text": "how can we embed this knowledge in the VM how can we encode in the VM enough information about uh how to debug itself",
    "start": "2668200",
    "end": "2675720"
  },
  {
    "text": "that doesn't rely on the VM still being running and we've taken a baby step for that I mean and Slava and the V8 team have been terrific on helping us find",
    "start": "2675720",
    "end": "2682960"
  },
  {
    "text": "ways to to better encode that information from V8 to break us slightly less frequently um but we still get",
    "start": "2682960",
    "end": "2688680"
  },
  {
    "text": "broken yes um and because and it's it's hard the logic exists in two places um",
    "start": "2688680",
    "end": "2694160"
  },
  {
    "text": "so there are actual problems with this approach it's not completely perfect um it we think it's a great approach it's",
    "start": "2694160",
    "end": "2700160"
  },
  {
    "text": "comprehensive it's got zero overhead um but you do have this problem that it's brittle um and we we want to work on on",
    "start": "2700160",
    "end": "2707839"
  },
  {
    "text": "on making it less brittle um we've got some ideas to actually go do that the key is that when we're when we have the",
    "start": "2707839",
    "end": "2715200"
  },
  {
    "text": "technology to do this it must not rely on the VM running so that's the I think the difference between this and most",
    "start": "2715200",
    "end": "2721280"
  },
  {
    "text": "other debugging technologies that have come before it for dynamic uh Dynamic environments and the nice thing about that too is that as soon as we've built",
    "start": "2721280",
    "end": "2727559"
  },
  {
    "text": "this tool immediately all of our node in production became debuggable in this way we didn't have to go modify the application to do that which I think is",
    "start": "2727559",
    "end": "2733640"
  },
  {
    "text": "also pretty significant so so that's MDB and post debugging um I want we um we",
    "start": "2733640",
    "end": "2739480"
  },
  {
    "text": "don't have a huge amount of time left but in the time we do have left um we want to talk about kind of another axis of debugging um and that's debugging uh",
    "start": "2739480",
    "end": "2746640"
  },
  {
    "text": "transient problems problems that are non-fatal problems for which a a snapshot of state is insufficient to",
    "start": "2746640",
    "end": "2752800"
  },
  {
    "text": "debug the problem now a snapshot of State can be sufficient for lots of different kinds of problems um but",
    "start": "2752800",
    "end": "2758960"
  },
  {
    "text": "performance in particular can be very difficult to debug from a series of uh and I spent a lot of time trying to",
    "start": "2758960",
    "end": "2764720"
  },
  {
    "text": "do this in kernel development uh in in the kernel we used to in the kernel we don't have a gcore equivalent I mean you",
    "start": "2764720",
    "end": "2770280"
  },
  {
    "text": "actually to take a Cump you have to actually bring the system down and the tooling was so bad historically that",
    "start": "2770280",
    "end": "2776280"
  },
  {
    "text": "this if a system were performing badly we would want to actually go nmi the system or or actually get a a cord up a",
    "start": "2776280",
    "end": "2782880"
  },
  {
    "text": "crash jump on the system and reboot the system which is like saying oh you do you have a cold okay I'm going to shoot you in the brain um and then we'll know",
    "start": "2782880",
    "end": "2789800"
  },
  {
    "text": "exactly where your cold came from it's like but I will be dead it's like well yes you will be dead but we'll know exactly what happened to you it's like",
    "start": "2789800",
    "end": "2795760"
  },
  {
    "text": "okay what who are this is this is like a SST you're talking to um and yes it's true that Colonel developers also are",
    "start": "2795760",
    "end": "2801319"
  },
  {
    "text": "all sist at some level but so we had this problem of how do we actually go um instrument the the colonel thebug the",
    "start": "2801319",
    "end": "2807359"
  },
  {
    "text": "colonel um and in particular how do we understand why the system is sucking um and and we had this problem again uh a",
    "start": "2807359",
    "end": "2814240"
  },
  {
    "text": "decade and a half ago and I along with Adam lethal like sharo at at Sun um developed this technology called D trce",
    "start": "2814240",
    "end": "2820400"
  },
  {
    "text": "so D TR allows us to dynamically instrument the production system it its design center is around production",
    "start": "2820400",
    "end": "2826760"
  },
  {
    "text": "systems uh how many people didn't use dra trce okay that's pretty good actually that's good um so folks have",
    "start": "2826760",
    "end": "2834079"
  },
  {
    "text": "used T those of you who haven't um this is a facility that that we first shipped um in 200 uh it was 2003 that we first",
    "start": "2834079",
    "end": "2840440"
  },
  {
    "text": "shipped it uh was open source 2005 um it's now in all lumos derived systems like smart OS which from joyant omn OS",
    "start": "2840440",
    "end": "2847839"
  },
  {
    "text": "um all soer dve systems it's in BSD um it's in FreeBSD and it's on your Mac um",
    "start": "2847839",
    "end": "2853400"
  },
  {
    "text": "Linux ports are in progress so that's finally happening after many years of excuses for why that couldn't happen um",
    "start": "2853400",
    "end": "2858920"
  },
  {
    "text": "but that's now moving forward as well so um it is a technology that is it is",
    "start": "2858920",
    "end": "2864119"
  },
  {
    "text": "slowly becoming ubiquitous certainly on Mac FreeBSD um and and Aluma Drive systems so Dynamic environments pose the",
    "start": "2864119",
    "end": "2871960"
  },
  {
    "text": "same kind of problem for dce that MDB posed and and postmart debugging which is to say now I want to the system and I",
    "start": "2871960",
    "end": "2877880"
  },
  {
    "text": "want to understand what's going on at the highest layers of software when we first developed drace and when I first did this I",
    "start": "2877880",
    "end": "2885200"
  },
  {
    "text": "embarrassingly was only thinking about the colel I mean who cares about applications applications just exist to",
    "start": "2885200",
    "end": "2890240"
  },
  {
    "text": "put load on the beautiful operating system um there but as we actually went in and we went kind of forth in the",
    "start": "2890240",
    "end": "2896160"
  },
  {
    "text": "world with d trce we discovered that the much larger performance winds to be had",
    "start": "2896160",
    "end": "2901599"
  },
  {
    "text": "were not from making the curdle incrementally better on these pathological loads but understanding where the pathology was actually coming",
    "start": "2901599",
    "end": "2908359"
  },
  {
    "text": "from upstack and c and C++ environments can do a certain amount of damage but oh",
    "start": "2908359",
    "end": "2913800"
  },
  {
    "text": "my gosh the dynamic environments can do a lot more damage um you've got a pearl script I can't tell you the number of",
    "start": "2913800",
    "end": "2919920"
  },
  {
    "text": "pearl scripts written to monitor the system did themselves become the problem with the system um when you go up on",
    "start": "2919920",
    "end": "2926240"
  },
  {
    "text": "Detro like what's this PR script oh that's the pro scpt we have to monitor the system yeah it's killing the system actually um very fine line between the",
    "start": "2926240",
    "end": "2932680"
  },
  {
    "text": "policing mind and the Criminal Mind when it comes to monitoring software um so we",
    "start": "2932680",
    "end": "2938079"
  },
  {
    "text": "needed to get up into these Dynamic environments to understand what was going on but now we're from We're from the kernel we're looking up from the the",
    "start": "2938079",
    "end": "2944520"
  },
  {
    "text": "lowest layers of the software up into this VM that we can see nothing into how do we actually go do this well one of",
    "start": "2944520",
    "end": "2950880"
  },
  {
    "text": "the things that we added were something called statically defined uh tracing and you could have these things called usct",
    "start": "2950880",
    "end": "2956400"
  },
  {
    "text": "providers where you instrumented the VM itself and said here's where I'm making a function call here's where I'm doing this here's where I'm doing that um and",
    "start": "2956400",
    "end": "2963040"
  },
  {
    "text": "some Ruby python PHP Airline took that approach it works for some bluntly it",
    "start": "2963040",
    "end": "2968119"
  },
  {
    "text": "does not work for higher performing VMS for lower performing VMS this is easier for higher performing VMS it it becomes",
    "start": "2968119",
    "end": "2974119"
  },
  {
    "text": "excruciating to even have additional code blo even though they're knops um where you're actually doing the these",
    "start": "2974119",
    "end": "2979920"
  },
  {
    "text": "function calls so we need to take a different approach or we decided to take a different tack for node um the the",
    "start": "2979920",
    "end": "2986400"
  },
  {
    "text": "first thing that we did uh is we added usct probes in node itself um and this allowed us to get for example probes or",
    "start": "2986400",
    "end": "2992960"
  },
  {
    "text": "when we're doing a GC um which is useful right I mean if I um I think yeah the example on the next",
    "start": "2992960",
    "end": "2998760"
  },
  {
    "text": "slide of using uh node of instrumenting GC start and GC done and actually I'll",
    "start": "2998760",
    "end": "3004480"
  },
  {
    "text": "just hop onto the box here and show you what this looks like um so let's go back over here and we're on a box that's got",
    "start": "3004480",
    "end": "3011599"
  },
  {
    "text": "um that's running lots of node all the time um I'll go on here and I'm just going to instrument um GC start and GC",
    "start": "3011599",
    "end": "3018559"
  },
  {
    "text": "done so if I do node node star GC start I'm going to see output whenever any",
    "start": "3018559",
    "end": "3025119"
  },
  {
    "text": "node process starts doing GC and fortunately we have enough node processes doing enough non-trivial work on even on this VM that someone just did",
    "start": "3025119",
    "end": "3032240"
  },
  {
    "text": "GC um now you may want to know who actually did GC so you could say print F uh percent D percent s started a GC dot",
    "start": "3032240",
    "end": "3042280"
  },
  {
    "text": "dot dot and we'll make that PID and Cur PS info points to PR",
    "start": "3042280",
    "end": "3048720"
  },
  {
    "text": "psrs and make that quiet so now um when of course now I'm sure won't oblige me I'm sure now no one will do a GC but the",
    "start": "3048720",
    "end": "3055160"
  },
  {
    "text": "next time someone does a GC there we go we see that that that node process the workflow",
    "start": "3055160",
    "end": "3062160"
  },
  {
    "text": "runner.jpg start GC done measure the latency across it and so on um so there we go now we goty everyone does a GC",
    "start": "3062720",
    "end": "3069680"
  },
  {
    "text": "okay party on my laptop um so and we can get the these kind of histograms we are strong Believers in",
    "start": "3069680",
    "end": "3076799"
  },
  {
    "text": "ASI art um you can get the these uh great histograms actually understand where this this latency is actually",
    "start": "3076799",
    "end": "3082319"
  },
  {
    "text": "coming from um and actually think Dave you got a good little uh there's actually a good little program that Dave wrote um where is it it's uh it's nhtp",
    "start": "3082319",
    "end": "3091079"
  },
  {
    "text": "Snoop right yeah so this is a little goober that Dave wrote this is just a shell script and what this is a shell script around all these node probes so I",
    "start": "3091079",
    "end": "3097599"
  },
  {
    "text": "think I can just run this and without any options right Dave yeah that'll show you HTTP activity that's that's what I",
    "start": "3097599",
    "end": "3102640"
  },
  {
    "text": "originally built it for so anytime a a node process does an HTTP request or",
    "start": "3102640",
    "end": "3108119"
  },
  {
    "text": "serves up HTTP I think as well oh there we go okay so the the workflow again which is kind of this little goober we",
    "start": "3108119",
    "end": "3114319"
  },
  {
    "text": "have that's doing work on this just did a put a get a get you can see the actual latency and the the kind of the cool thing here is and this is on GitHub by",
    "start": "3114319",
    "end": "3120520"
  },
  {
    "text": "the way if you look for NH HTP Snoop uh I think it's minus n right Dave yeah there we are that actually prints out the dript that it actually generated",
    "start": "3120520",
    "end": "3128839"
  },
  {
    "text": "filthy in some cases uh boy that's um it's a complicated descript but so this is a this is just a a a descript a d",
    "start": "3128839",
    "end": "3136520"
  },
  {
    "text": "script that um instruments server request server response measures the latency um prints it out in in kind of",
    "start": "3136520",
    "end": "3142400"
  },
  {
    "text": "in a pretty format and so on um so and this was this was been good um and we've",
    "start": "3142400",
    "end": "3147680"
  },
  {
    "text": "we've used this um this has been very helpful um we've used this to debug real problems to to really understand nodes",
    "start": "3147680",
    "end": "3153480"
  },
  {
    "text": "latency GC latency and so on uh actually it was great to share some of that production data with the V8 guys initially because the numbers we thought",
    "start": "3153480",
    "end": "3159920"
  },
  {
    "text": "looked great and the V8 guys like wow that's that's really nice that GC it actually like is actually doing GC for",
    "start": "3159920",
    "end": "3166160"
  },
  {
    "text": "very short periods of time like yes yes you did a very good job um so it was great to actually see the data from",
    "start": "3166160",
    "end": "3171720"
  },
  {
    "text": "production systems that that could feed back to them and in that case there wasn't an issue so it's great um we",
    "start": "3171720",
    "end": "3177000"
  },
  {
    "text": "wanted to allow people to those are adding probes effectively in C++ in node",
    "start": "3177000",
    "end": "3182160"
  },
  {
    "text": "because that's what's bound to V8 we wanted to allow people to add probes in JavaScript itself Chris Andrews did",
    "start": "3182160",
    "end": "3187359"
  },
  {
    "text": "terrific work um the no detrace provider this module allows you to Define your own probes in JavaScript uh and then",
    "start": "3187359",
    "end": "3194040"
  },
  {
    "text": "fire them selectively uh and this has been huge for us uh our colleague Mark cavage has used this extensively for his",
    "start": "3194040",
    "end": "3200520"
  },
  {
    "text": "uh he node node restify and L.J .js a from scratch imp mentation of asn.1",
    "start": "3200520",
    "end": "3207559"
  },
  {
    "text": "parsing to implement an ldap server in node no this was not a punishment uh this was actually elective um and yes it",
    "start": "3207559",
    "end": "3214319"
  },
  {
    "text": "was done for good reasons it's been terrific um but so we've been using this a lot it's allowed us to measure the",
    "start": "3214319",
    "end": "3219920"
  },
  {
    "text": "latency in these systems one of the keys when you're looking at DS is correlating system activity deep in the system to",
    "start": "3219920",
    "end": "3226359"
  },
  {
    "text": "what's going on way up the stack and you know again we have that same problem that we had when we were talking about",
    "start": "3226359",
    "end": "3232680"
  },
  {
    "text": "postmortem debugging where if you go to do this you actually have a hard time seeing what's going on so in particular",
    "start": "3232680",
    "end": "3238640"
  },
  {
    "text": "I've got my uh I think I've got a little script here I think Mr spinny .js so I'm",
    "start": "3238640",
    "end": "3243839"
  },
  {
    "text": "going to if I run Mr spin.js um Mr spinny is just going to go spin around",
    "start": "3243839",
    "end": "3249720"
  },
  {
    "text": "um and U let me log into that box um and what we're going to do is I want to",
    "start": "3249720",
    "end": "3255720"
  },
  {
    "text": "understand what's going on there I I could I could see for example that if I run P that I can see that okay he's",
    "start": "3255720",
    "end": "3261599"
  },
  {
    "text": "spinning on CPU I want to understand what he's doing so maybe I want to um let's actually run a a profile probe and",
    "start": "3261599",
    "end": "3268559"
  },
  {
    "text": "historically what you do is run a profile probe and say exec name equals node let's say um let's um just get",
    "start": "3268559",
    "end": "3274960"
  },
  {
    "text": "aggregate on a on a user stack back Trace if I run that and control C it I",
    "start": "3274960",
    "end": "3282119"
  },
  {
    "text": "am I'm into this old problem again remember this this is a so we're seeing again stack frames that in HEX we've had",
    "start": "3282119",
    "end": "3288960"
  },
  {
    "text": "this problem historically in drace and we knew we had this many years ago with Java in the jvm and so we're trying to",
    "start": "3288960",
    "end": "3295720"
  },
  {
    "text": "figure out how to solve this with jvm and if anything it was actually even harder to solve it in D than it was in MDB because we didn't have the luxury of",
    "start": "3295720",
    "end": "3302119"
  },
  {
    "text": "being postmortem we're in situ which is to say we're executing in the kernel so in the kernel this thing has done a you",
    "start": "3302119",
    "end": "3308319"
  },
  {
    "text": "know's say it's done an open system call or what have you or it's being taken off CPU we need to at that moment go walk up",
    "start": "3308319",
    "end": "3315040"
  },
  {
    "text": "at stack and and correlate these hex addresses to actual proper frames that",
    "start": "3315040",
    "end": "3320799"
  },
  {
    "text": "is brutal to do um in situ and so we couldn't find a better way to do this we invented this crazy ass mechanism called",
    "start": "3320799",
    "end": "3328280"
  },
  {
    "text": "ustach helpers that allow you to write this very weird piece of software that",
    "start": "3328280",
    "end": "3334079"
  },
  {
    "text": "we compile and glom onto the executable when the executable runs that gets ioctl downstairs into the kernel and that",
    "start": "3334079",
    "end": "3341039"
  },
  {
    "text": "software which is written in a touring incomplete language D allows us to in a",
    "start": "3341039",
    "end": "3346119"
  },
  {
    "text": "totally safe manner actually translate in situ stack frames to JavaScript frames now that's a lot of like talking",
    "start": "3346119",
    "end": "3353559"
  },
  {
    "text": "um so let's actually just see it in action if if your perspective someone's developing software I want to understand",
    "start": "3353559",
    "end": "3359079"
  },
  {
    "text": "and I'll I'll add a another option there to allocate plenty of of Stack size for",
    "start": "3359079",
    "end": "3364640"
  },
  {
    "text": "it I misspelled stir size um so now if I run a jstack the J actually is not for",
    "start": "3364640",
    "end": "3370839"
  },
  {
    "text": "JavaScript it's for Java um because that's what we originally developed it for I can now see where I am Mumble",
    "start": "3370839",
    "end": "3377960"
  },
  {
    "text": "calling FRS and so on I know exactly where I am we can take this data and then go visualize it in actually some",
    "start": "3377960",
    "end": "3384480"
  },
  {
    "text": "really interesting ways so one of the things that that our colleague Brenan Greg did um is and I'm I'll kind of I'll",
    "start": "3384480",
    "end": "3391200"
  },
  {
    "text": "we come back to that as needed but so this is the profile provider one thing our colleague Brenan Greg did is took",
    "start": "3391200",
    "end": "3396680"
  },
  {
    "text": "this and visualized it as a this thing called a flame graph and the the flame",
    "start": "3396680",
    "end": "3402079"
  },
  {
    "text": "graph allows us and let me bring up the full version of that Dave maybe you want to explain this why uh yeah so the idea",
    "start": "3402079",
    "end": "3407440"
  },
  {
    "text": "is okay you're running this profile probe 100 times a second on say 32 CPUs for 60 seconds you have an enormous",
    "start": "3407440",
    "end": "3413480"
  },
  {
    "text": "number of Stack traces but how do you actually visualize them well you figure most of them probably start with main at",
    "start": "3413480",
    "end": "3418599"
  },
  {
    "text": "the bottom right and then they start diverging a little bit well the node ones will all say node start EV run UV",
    "start": "3418599",
    "end": "3424039"
  },
  {
    "text": "run and then they start diverging and then there'll be a couple of common frames in this Silo and then it starts diverging again and so the question is",
    "start": "3424039",
    "end": "3430400"
  },
  {
    "text": "well how do you actually visualize it this is what we did Brendan Greg did actually um and so you have these silos",
    "start": "3430400",
    "end": "3435680"
  },
  {
    "text": "that represent places where it diverged uh relatively low in the stack and you can zoom in on each of these things so",
    "start": "3435680",
    "end": "3441200"
  },
  {
    "text": "if you can like if you zoom into the corner you can hover over each of these things and at the top it'll tell you which function that was and how much of",
    "start": "3441200",
    "end": "3448559"
  },
  {
    "text": "the overall time was spent in that function so for a CPU bound process it's a process that's on CPU like say 100% of",
    "start": "3448559",
    "end": "3454960"
  },
  {
    "text": "the time you can see exactly how much time was being spent in each JavaScript function and it's actually a little",
    "start": "3454960",
    "end": "3460039"
  },
  {
    "text": "better than that because you actually have JavaScript and C++ functions and anything else you're doing so you know if you're using lib ping as we are to",
    "start": "3460039",
    "end": "3466520"
  },
  {
    "text": "generate other types of images you see the lib ping frames too you see the SSL in there as well and so I mean if you",
    "start": "3466520",
    "end": "3472520"
  },
  {
    "text": "look in here so these are all just as Dave is saying these you got some C++ frames in there but then you've also got the JavaScript frames and it allows you",
    "start": "3472520",
    "end": "3479119"
  },
  {
    "text": "to actually debug where you are in your JavaScript and visualize it and and importantly for a production system you",
    "start": "3479119",
    "end": "3484880"
  },
  {
    "text": "know we didn't restart the program we didn't run it with any special flags that caused the VM performance a decrease this was just the program was",
    "start": "3484880",
    "end": "3491480"
  },
  {
    "text": "running at full speed in production right this has and this is the the the the most important axium of dri other",
    "start": "3491480",
    "end": "3497160"
  },
  {
    "text": "than safety safety in production and no probe effect when not enabled the important thing is that you can take dra",
    "start": "3497160",
    "end": "3502799"
  },
  {
    "text": "TR walk up to a system that is totally optimized and without restarting anything Ed erce to answer questions",
    "start": "3502799",
    "end": "3509160"
  },
  {
    "text": "about what it's doing so this was a really key technology um we got a bunch of other real world examples and we'll",
    "start": "3509160",
    "end": "3514760"
  },
  {
    "text": "obviously be putting our our slides online but we won obviously be mindful of time um I think you know from from",
    "start": "3514760",
    "end": "3519799"
  },
  {
    "text": "our perspective um th this technique of postmortem debugging of of node in",
    "start": "3519799",
    "end": "3525920"
  },
  {
    "text": "particular has been huge um and I if I could get in a time machine right now I",
    "start": "3525920",
    "end": "3532000"
  },
  {
    "text": "would go back just a year ago and tell us that we are going to go in we would be presenting this unbelievable work",
    "start": "3532000",
    "end": "3538240"
  },
  {
    "text": "that we have done because I didn't think it was possible I mean I it's amazing to me that we've been able to do this um",
    "start": "3538240",
    "end": "3543520"
  },
  {
    "text": "and it's been incredibly useful we've already used it to nail these really nasty bugs yeah problem is that we literally could not debug before like",
    "start": "3543520",
    "end": "3549520"
  },
  {
    "text": "the infinite Loop one that we described like we had no idea how to debug that before so this is not taking something that's hard and making it easier this is",
    "start": "3549520",
    "end": "3555720"
  },
  {
    "text": "taking something that's impossible and making it possible and that uh that's been terrific for us we're using it our",
    "start": "3555720",
    "end": "3561240"
  },
  {
    "text": "own our own development um now that we've got kind of things working and working so well um there are some open",
    "start": "3561240",
    "end": "3566960"
  },
  {
    "text": "problems still we want to make it less brittle we want to package it with the VM there's a lot more we could go do I think one of the questions that we that",
    "start": "3566960",
    "end": "3572799"
  },
  {
    "text": "Dave and I always have is if you were designing a VM from from Ground Zero from day Zero and you were designing it",
    "start": "3572799",
    "end": "3579640"
  },
  {
    "text": "for debug ability what kinds of things could you design into it without sacrificing performance um and frankly",
    "start": "3579640",
    "end": "3585480"
  },
  {
    "text": "there's not really a VMS that that have been designed with that in mind with production debuggability um so it's",
    "start": "3585480",
    "end": "3590559"
  },
  {
    "text": "really exciting that we've been able to get all this working with with V8 um and I I I think that we've been a little bit",
    "start": "3590559",
    "end": "3595599"
  },
  {
    "text": "surprised that the postm approach has actually worked at all for heat profiling I don't think we really anticipated that um it's showed a lot of",
    "start": "3595599",
    "end": "3601760"
  },
  {
    "text": "Promise that's a very hard problem um what we have defined JS objects is kind of a Lurch forward but there's a lot",
    "start": "3601760",
    "end": "3607079"
  },
  {
    "text": "more yeah to to be done there um and with that uh thank you very much and we'd welcome your",
    "start": "3607079",
    "end": "3613799"
  },
  {
    "text": "questions sorry I from the Cump can you un exec um no is is the short answer um",
    "start": "3613799",
    "end": "3621799"
  },
  {
    "text": "that un exec is a brutally hard problem that works under extremely isolated conditions um and it works when I mean",
    "start": "3621799",
    "end": "3629079"
  },
  {
    "text": "as soon as you have a connection open to another process of which no has many you're like it's very hard to go and",
    "start": "3629079",
    "end": "3636760"
  },
  {
    "text": "actually go rehydrate all of that that Dynamic state so there has been work done to un exec in fact the the V you",
    "start": "3636760",
    "end": "3642799"
  },
  {
    "text": "guys use it as you take a snapshot and part of the build process you can do it when you know that that is a very kind",
    "start": "3642799",
    "end": "3648319"
  },
  {
    "text": "of confined environment I don't have external State I don't have I don't have connections I can go do it there in a a",
    "start": "3648319",
    "end": "3653920"
  },
  {
    "text": "process in production this process we could thank you very [Applause]",
    "start": "3653920",
    "end": "3665219"
  },
  {
    "text": "much",
    "start": "3668359",
    "end": "3671359"
  }
]