[
  {
    "text": "so yeah this talk was called um the functional final frontier if you like you can pretend that",
    "start": "7040",
    "end": "13040"
  },
  {
    "text": "what this talk is called it's going to be somewhat related to that but i think i want to give",
    "start": "13040",
    "end": "18480"
  },
  {
    "text": "in this sort of variation of this talk uh some wider context and actually this talk could be called",
    "start": "18480",
    "end": "24640"
  },
  {
    "text": "you know immutability interact interactivity and closure script but honestly it could be called immutability interactivity",
    "start": "24640",
    "end": "31119"
  },
  {
    "text": "and insert your language of choice it doesn't really matter the the thing i'm interested here is communicating the principles not any",
    "start": "31119",
    "end": "38000"
  },
  {
    "text": "specific language so um i until recently was employed at",
    "start": "38000",
    "end": "44879"
  },
  {
    "text": "the new york times for about four years um doing front-end development there and that was a lot of fun",
    "start": "44879",
    "end": "50800"
  },
  {
    "text": "my background is in doing user interfaces um all kinds of user interfaces i've done",
    "start": "50800",
    "end": "56480"
  },
  {
    "text": "user interfaces in coco and java and c plus plus and but i spent the most time doing them in javascript",
    "start": "56480",
    "end": "63120"
  },
  {
    "text": "i now work at cognitect and i'm excited about that cognitec's a fun place because they're",
    "start": "63120",
    "end": "69920"
  },
  {
    "text": "probably of all things they take immutability as like a sort of central tenet of all the things they design um both",
    "start": "69920",
    "end": "77200"
  },
  {
    "text": "you know they're sort of stewards of closure the language which embraces immutability as well as a pretty interesting database solution",
    "start": "77200",
    "end": "82960"
  },
  {
    "text": "called atomic which also emphasizes immutability",
    "start": "82960",
    "end": "88560"
  },
  {
    "text": "but i want to talk more specifically about immutability in the context of user interfaces so uh object-oriented",
    "start": "88960",
    "end": "96400"
  },
  {
    "text": "programming and user interfaces sort of came to be almost at the same time i mean objects did it sort of appear in the",
    "start": "96400",
    "end": "102240"
  },
  {
    "text": "late 60s but it really wasn't until small talk until the variant that we're most familiar",
    "start": "102240",
    "end": "108560"
  },
  {
    "text": "with came to be and at the exact same time the modern user interface also came to",
    "start": "108560",
    "end": "114960"
  },
  {
    "text": "be this is an image of some kids playing with a small talk system you know at xerox park",
    "start": "114960",
    "end": "122399"
  },
  {
    "text": "if you you can fire up a small talk image today there's a very fantastic open source version of small talk called",
    "start": "123520",
    "end": "129360"
  },
  {
    "text": "squeak you can install it you can write small talk in it if you open up the system browser which allows",
    "start": "129360",
    "end": "135760"
  },
  {
    "text": "you to see all the classes that are involved in the entire system you would probably encounter",
    "start": "135760",
    "end": "141440"
  },
  {
    "text": "the words um model view controller right so that's that's pretty wild",
    "start": "141440",
    "end": "148000"
  },
  {
    "text": "though so it's you know that's i don't know that image was the the kids was probably from the mid 70s",
    "start": "148000",
    "end": "154160"
  },
  {
    "text": "so that's 30 years of of mvc and people have co",
    "start": "154160",
    "end": "160080"
  },
  {
    "text": "adopted this term when they're talking about um web-based systems as well but basically",
    "start": "160080",
    "end": "166640"
  },
  {
    "text": "the idea was first formulated by trigg varenskag and adele goldberg at xerox park in 1979",
    "start": "166640",
    "end": "172239"
  },
  {
    "text": "and it's had an extremely long shadow the basic concepts are still prevalent today if you're doing front-end",
    "start": "172239",
    "end": "177440"
  },
  {
    "text": "development it doesn't really matter if you're targeting ios android javascript mvc is a very popular way to",
    "start": "177440",
    "end": "184800"
  },
  {
    "text": "organize user interfaces and that's because i think at a very abstract level",
    "start": "184800",
    "end": "190400"
  },
  {
    "text": "mc mvc is a extremely sound separation of concerns but implementations leave much to be",
    "start": "190400",
    "end": "196879"
  },
  {
    "text": "desired we haven't really advanced much far further beyond what they came up with at xerox park",
    "start": "196879",
    "end": "203280"
  },
  {
    "text": "which is pretty sad given that's 30 years old and the thing i'm going to",
    "start": "203280",
    "end": "208400"
  },
  {
    "text": "question here is i believe that we can get all the benefits of traditional mbc systems but we can eliminate this thing that i",
    "start": "208400",
    "end": "214799"
  },
  {
    "text": "do not like about the implementation which is that mvcs are constructed on top of staple objects",
    "start": "214799",
    "end": "220159"
  },
  {
    "text": "and you're probably thinking how could you do that how can you get all the benefits of nbc and eliminate something that almost all",
    "start": "220159",
    "end": "227440"
  },
  {
    "text": "modern mbcs have which is that they're constructed on top of staple objects",
    "start": "227440",
    "end": "234000"
  },
  {
    "text": "so to throw a wrench in this history of of ui programming though which it plays",
    "start": "234000",
    "end": "239760"
  },
  {
    "text": "into this talk because we're going to be certainly emphasizing um web browsers",
    "start": "239760",
    "end": "244799"
  },
  {
    "text": "is tim berners-lee invented this thing called the web browser in the late 80s on a next machine so next at the time had one of",
    "start": "244799",
    "end": "251840"
  },
  {
    "text": "the most powerful mvc frameworks next step it eventually became coco which is also",
    "start": "251840",
    "end": "260000"
  },
  {
    "text": "now everybody knows about because of ios but he he took this rich mvc desktop system and",
    "start": "260000",
    "end": "266479"
  },
  {
    "text": "he built the world's first browser web browser and the idea behind web browsers was not",
    "start": "266479",
    "end": "272160"
  },
  {
    "text": "i want to build rich user interfaces i want to hyperlink documents over a network that was the only thing",
    "start": "272160",
    "end": "277840"
  },
  {
    "text": "it was meant to do hyperlinked textual documents which are rendered right there was no there was no point in",
    "start": "277840",
    "end": "283919"
  },
  {
    "text": "solving um the rich user interface uh issue",
    "start": "283919",
    "end": "289040"
  },
  {
    "text": "here that's not that wasn't there wasn't a goal it was a completely non-goal so i don't think he first saw a future",
    "start": "289040",
    "end": "296720"
  },
  {
    "text": "where most people interact or not most but many people interact with the web through the document object",
    "start": "296720",
    "end": "304479"
  },
  {
    "text": "model if you've done any if you've done any serious work on the web this is more or less",
    "start": "304479",
    "end": "312160"
  },
  {
    "text": "why your life is terrible because the document object model is",
    "start": "312160",
    "end": "317280"
  },
  {
    "text": "fundamentally about documents it is not about user interfaces it's not about events i mean these",
    "start": "317280",
    "end": "323039"
  },
  {
    "text": "things are just not meant to uh they're they're designed the dom was designed to solve a different",
    "start": "323039",
    "end": "329199"
  },
  {
    "text": "problem and so when i look at the sort of landscape of what people are doing with",
    "start": "329199",
    "end": "335199"
  },
  {
    "text": "web browsers and the dom and javascript you know it really feels a lot like this",
    "start": "335199",
    "end": "340240"
  },
  {
    "text": "right allen k has this really great analogy where he says software architecture too often looks a bit like the great",
    "start": "340240",
    "end": "346639"
  },
  {
    "text": "pyramids right it's very impressive to look at but there's no deep conceptual",
    "start": "346639",
    "end": "353600"
  },
  {
    "text": "root like idea here except you know it's going to take thousands of people hundreds of years to",
    "start": "353600",
    "end": "358960"
  },
  {
    "text": "build right so often software feels like this and and he makes this interesting claim that often what's",
    "start": "358960",
    "end": "365680"
  },
  {
    "text": "missing from software development is one tiny simple idea and then you can",
    "start": "365680",
    "end": "370720"
  },
  {
    "text": "have a radically different architecture you can have a much more efficient",
    "start": "370720",
    "end": "376479"
  },
  {
    "text": "placement of architectural material and he points out that it was the arch right this extremely simple concept",
    "start": "376479",
    "end": "384000"
  },
  {
    "text": "permitted um humans to build a completely different type of building and so i think",
    "start": "384000",
    "end": "391759"
  },
  {
    "text": "you know if we're gonna do uis we're looking for this arch i don't think we've found it yet mvc is a good starting place but i think",
    "start": "391759",
    "end": "398479"
  },
  {
    "text": "there is something missing so object-oriented programmers got their chance they came up with mvc",
    "start": "398479",
    "end": "404240"
  },
  {
    "text": "that's awesome but we need something more and so maybe we should look at what the functional programmers are doing",
    "start": "404240",
    "end": "411199"
  },
  {
    "text": "so there's a thing called functional reactive programming frp it's still a very active area of",
    "start": "411199",
    "end": "416400"
  },
  {
    "text": "research um if you're into haskell you would have heard of this it's fairly academic and they have lots of",
    "start": "416400",
    "end": "423120"
  },
  {
    "text": "problems they still need to solve to make that work there is a stateful object-oriented take on this which is",
    "start": "423120",
    "end": "428720"
  },
  {
    "text": "getting really popular now called rx from microsoft rx java rxcoco all this stuff",
    "start": "428720",
    "end": "436000"
  },
  {
    "text": "the just it's the object-oriented take on frp it's very interesting um definitely",
    "start": "436000",
    "end": "442479"
  },
  {
    "text": "awesome for coordinating events and complex asynchronous workflows however it doesn't really solve the problem that",
    "start": "442479",
    "end": "448720"
  },
  {
    "text": "uis encounter which said how do we deal with the fact at the end at the edges of our sort of system",
    "start": "448720",
    "end": "453919"
  },
  {
    "text": "we have to render something the user has to see something um if you're coming from go the go",
    "start": "453919",
    "end": "460000"
  },
  {
    "text": "programming language or if you're if you're into closure close your eyes this thing called core async then you've probably heard of csp this",
    "start": "460000",
    "end": "466160"
  },
  {
    "text": "is tony abstraction but again it's also a coordination language it doesn't really",
    "start": "466160",
    "end": "473120"
  },
  {
    "text": "address the rendering problem so you might be thinking well maybe mvc is it maybe there's nothing",
    "start": "473120",
    "end": "480319"
  },
  {
    "text": "more um maybe maybe we're just stuck with uh stateful objects and and we have to sort of erect these",
    "start": "480319",
    "end": "487440"
  },
  {
    "text": "pyramids of user interfaces that are hard to modify hard to extend hard to maintain",
    "start": "487440",
    "end": "492879"
  },
  {
    "text": "maybe there is no arch and i and i would argue um from from from having played around",
    "start": "492879",
    "end": "498800"
  },
  {
    "text": "with closure for a long time and this is probably old hat for for people who played around with haskell",
    "start": "498800",
    "end": "503919"
  },
  {
    "text": "or scala but there's been an amazing amount of um incredible",
    "start": "503919",
    "end": "510800"
  },
  {
    "text": "practical academic research gone into something called persistent data structures which i'm not going to assume that you",
    "start": "510800",
    "end": "516560"
  },
  {
    "text": "guys have heard of and i want to talk about them now because i think they give us an opportunity to",
    "start": "516560",
    "end": "523279"
  },
  {
    "text": "simplify the coordination of state in user interfaces right which i think is the the main source of complexity in a",
    "start": "523279",
    "end": "530160"
  },
  {
    "text": "complicated user interface is that you have lots of stateful components how do you coordinate them how do you know who's",
    "start": "530160",
    "end": "535680"
  },
  {
    "text": "changing the state and i think persistent data structures can sort of make this tractable uh so i'm going to",
    "start": "535680",
    "end": "543200"
  },
  {
    "text": "show some slides these are not my own slides about how persistent data structures work just to give you sort of a sense",
    "start": "543200",
    "end": "548959"
  },
  {
    "text": "about how i'm able to accomplish i'm about to show you um these slides were done by zach allen of",
    "start": "548959",
    "end": "554399"
  },
  {
    "text": "hacker school which is a really awesome sort of like coders like a code writer's retreat uh",
    "start": "554399",
    "end": "560240"
  },
  {
    "text": "in new york um so stealing his slides so functional programming and data functional programmers like data they",
    "start": "560240",
    "end": "567120"
  },
  {
    "text": "like immutable values not mutable objects uh whenever you change of something",
    "start": "567120",
    "end": "572800"
  },
  {
    "text": "change right all you mean is you're going to modify something and get a new value you're not",
    "start": "572800",
    "end": "577920"
  },
  {
    "text": "going to change the original things so it's not like you get an array and you mutate the thing at the second index",
    "start": "577920",
    "end": "583120"
  },
  {
    "text": "the old value that they array represent is now gone forever we don't like that um so this is where",
    "start": "583120",
    "end": "589519"
  },
  {
    "text": "the word persistent comes from and the cool thing that i'm going to demonstrate is that",
    "start": "589519",
    "end": "595519"
  },
  {
    "text": "starting in the early 2000s because of a paper by phil bagwell we now understand how you can do this",
    "start": "595519",
    "end": "600800"
  },
  {
    "text": "efficiently so i'm assuming everybody's seen a linked list and you might be saying",
    "start": "600800",
    "end": "606720"
  },
  {
    "text": "that's so boring that's like you know data structures 101 but linked lists have a really cool",
    "start": "606720",
    "end": "612000"
  },
  {
    "text": "property if you treat them in an immutable way that's that demonstrates how persistent data structures work the",
    "start": "612000",
    "end": "618000"
  },
  {
    "text": "ones we use in closure and the ones that are using scala and haskell so a linked list you've got something in the head and it points to",
    "start": "618000",
    "end": "625120"
  },
  {
    "text": "other items in that linked list well the neat thing about a linked list is if i cons if i if i have a new header and i",
    "start": "625120",
    "end": "631040"
  },
  {
    "text": "point to x what's cool about this is i have two distinct values",
    "start": "631040",
    "end": "636480"
  },
  {
    "text": "right but these two distinct values actually share three elements right they're actually",
    "start": "636480",
    "end": "643360"
  },
  {
    "text": "sharing memory here so even though y represents the the the the list with the y on the",
    "start": "643360",
    "end": "649839"
  },
  {
    "text": "the head represents a particular value it didn't destroy the value that x represents now you",
    "start": "649839",
    "end": "656480"
  },
  {
    "text": "could imagine that i could get the tail of x and then cons z onto",
    "start": "656480",
    "end": "661920"
  },
  {
    "text": "uh the head of that and now i have three distinct values but they all share more than",
    "start": "661920",
    "end": "669839"
  },
  {
    "text": "uh 50 of memory right this is a really cool property of linked lists",
    "start": "669839",
    "end": "676800"
  },
  {
    "text": "structural sharing so sharing structure gives us space efficiency",
    "start": "676800",
    "end": "681920"
  },
  {
    "text": "but it also gives us computational efficiency when we update something it means that we can update something",
    "start": "681920",
    "end": "688000"
  },
  {
    "text": "without having to update uh without having to do copy on write so this is a traditional technique is that",
    "start": "688000",
    "end": "693120"
  },
  {
    "text": "if i have some data structure and i want to update it and i want to appear to have immutability",
    "start": "693120",
    "end": "698640"
  },
  {
    "text": "we simply copy the whole thing of course when you get to like a million million elements right that's not",
    "start": "698640",
    "end": "703760"
  },
  {
    "text": "efficient so persistent data structures allow us to update a large data structure in a",
    "start": "703760",
    "end": "708880"
  },
  {
    "text": "functional way and we're going to minimize copying and that might not be obvious how to do that and i'm going to show you",
    "start": "708880",
    "end": "715120"
  },
  {
    "text": "so phil bagwell who sadly passed away um came up with this thing called the hash",
    "start": "715120",
    "end": "720560"
  },
  {
    "text": "array map try he wrote this paper in like 2002 at epfl where scala",
    "start": "720560",
    "end": "728560"
  },
  {
    "text": "was created and he had come up with a mutable variant rich hickey read the",
    "start": "728560",
    "end": "734639"
  },
  {
    "text": "paper was like this is fantastic just by tweaking it a tiny bit we can create an",
    "start": "734639",
    "end": "739680"
  },
  {
    "text": "immutable variant of this data structure so i'm going to show a simpler version",
    "start": "739680",
    "end": "745680"
  },
  {
    "text": "uh a simpler variant not the hash arraymap try because it's a bit complicated",
    "start": "745680",
    "end": "750720"
  },
  {
    "text": "but i'm going to show you how we can have an immutable array-like type so it has all the properties we like",
    "start": "750720",
    "end": "756160"
  },
  {
    "text": "about arrays it's random access like an arraylist you can you can append to the end efficiently",
    "start": "756160",
    "end": "762160"
  },
  {
    "text": "um you can you can you can split them efficiently and so on so so the idea here is that",
    "start": "762160",
    "end": "769839"
  },
  {
    "text": "data lives in the leaves and the way that what a what a bitmap vector",
    "start": "769839",
    "end": "775360"
  },
  {
    "text": "tree really is is just a tree of arrays right it's just a tree of arrays and it's going to be a prefix tree that",
    "start": "775360",
    "end": "782079"
  },
  {
    "text": "we use to find any particular element but it's going to be a bit wise prefix",
    "start": "782079",
    "end": "787760"
  },
  {
    "text": "tree and let's see what that looks like so let's pick some arbitrary size for our",
    "start": "787760",
    "end": "793440"
  },
  {
    "text": "nodes arrays with four elements in them so each each element of that array points",
    "start": "793440",
    "end": "800480"
  },
  {
    "text": "to another array of the same dimension each array of that points to another",
    "start": "800480",
    "end": "805680"
  },
  {
    "text": "four arrays of that dimension and then finally we hit the leaf nodes where our values",
    "start": "805680",
    "end": "811760"
  },
  {
    "text": "live and here we just have the numbers representing the indexes right so how do we find something in this and",
    "start": "811760",
    "end": "817440"
  },
  {
    "text": "we said it was a prefix tree so get index on that so imagine i want",
    "start": "817440",
    "end": "823279"
  },
  {
    "text": "to find the 106th element in this in this representation",
    "start": "823279",
    "end": "828560"
  },
  {
    "text": "well that number has a binary representation and we can mask off the bits to get to",
    "start": "828560",
    "end": "834320"
  },
  {
    "text": "where we need to be we mask off the first two bits this is the index one so we descend down here we",
    "start": "834320",
    "end": "842000"
  },
  {
    "text": "mask off the next two bits that's index two it's two again and it's finally two",
    "start": "842000",
    "end": "850480"
  },
  {
    "text": "right so in order to get there what did i have to do i had to do three array lookups and some",
    "start": "850480",
    "end": "857600"
  },
  {
    "text": "bit masks uh this is this is stuff that the jvm and modern javascript engines",
    "start": "857600",
    "end": "863440"
  },
  {
    "text": "this combines down to into you know x86 instructions this is going to be very",
    "start": "863440",
    "end": "869279"
  },
  {
    "text": "fast so what about updating so if i want to",
    "start": "869279",
    "end": "874320"
  },
  {
    "text": "update what do i have to update i only have to update the route",
    "start": "874320",
    "end": "879519"
  },
  {
    "text": "and any nodes on the path to the thing i need to change and here i'm going to up replace 106 with the",
    "start": "879519",
    "end": "885920"
  },
  {
    "text": "string foo all those other nodes right they're not going to change",
    "start": "885920",
    "end": "893600"
  },
  {
    "text": "um and then you're probably thinking well that's you know what 4 to the 4th what is that",
    "start": "894480",
    "end": "902000"
  },
  {
    "text": "so that if we if we have the vector the node size 4 we can hold 256 elements",
    "start": "903920",
    "end": "909440"
  },
  {
    "text": "so that's that seems okay so as it turns out if you do a bunch of empirical testing",
    "start": "909440",
    "end": "915920"
  },
  {
    "text": "32 is a great size it's a size in which lookup and updates are sort of an",
    "start": "915920",
    "end": "921839"
  },
  {
    "text": "optimal ratio this is an image from a bag bagwell paper that took",
    "start": "921839",
    "end": "927199"
  },
  {
    "text": "rich's variant and they further extended it just to give you a sense of how good 32",
    "start": "927199",
    "end": "934399"
  },
  {
    "text": "actually is imagine a persistent vector which has",
    "start": "934399",
    "end": "940160"
  },
  {
    "text": "um 32 levels of node or sorry seven levels of nodes where each element is 32 wide that's 32",
    "start": "940160",
    "end": "947199"
  },
  {
    "text": "to the seventh power that's 34 billion elements on a 60",
    "start": "947199",
    "end": "952800"
  },
  {
    "text": "even if this was a flat array on a 64-bit virtual machine if every element was an",
    "start": "952800",
    "end": "957839"
  },
  {
    "text": "object pointer that's 256 gigs of ram right so to update a data structure this",
    "start": "957839",
    "end": "965120"
  },
  {
    "text": "huge we only have to at most do seven bit operations and seven array accesses",
    "start": "965120",
    "end": "972399"
  },
  {
    "text": "to update anything in this massive data structure we only have to replace seven arrays",
    "start": "972399",
    "end": "978000"
  },
  {
    "text": "so hopefully this has convinced you that that structural sharing is really awesome okay",
    "start": "978000",
    "end": "984720"
  },
  {
    "text": "so now you get the idea so this is how this is how we're gonna be able to play this game so now that we have the data structures that are suited to represent",
    "start": "984720",
    "end": "991680"
  },
  {
    "text": "immutable values we can do some really cool stuff with user interfaces and so i wrote a library called ohm",
    "start": "991680",
    "end": "998720"
  },
  {
    "text": "and what i did was i said we can couple in this case closure script which has a suitable persistent data structure",
    "start": "998720",
    "end": "1005199"
  },
  {
    "text": "library and we can couple it with react and react is a relatively new on the",
    "start": "1005199",
    "end": "1010959"
  },
  {
    "text": "scene um library for rendering it doesn't really do mvc it's very much focused on rendering but",
    "start": "1010959",
    "end": "1018480"
  },
  {
    "text": "the way that their algorithm works is extremely suited to pairing with persistent data",
    "start": "1018480",
    "end": "1023519"
  },
  {
    "text": "structures so the way that react works react is sort of like when you use it you're like",
    "start": "1023519",
    "end": "1029120"
  },
  {
    "text": "this looks object oriented but actually it's object oriented if a functional programmer had to write",
    "start": "1029120",
    "end": "1036079"
  },
  {
    "text": "a library in an object style so what it effectively lets you do it lets you take your data which you can pretend assume",
    "start": "1036079",
    "end": "1043360"
  },
  {
    "text": "is your app state you can apply a function and then react will generate more data and this is what's called the",
    "start": "1043360",
    "end": "1049760"
  },
  {
    "text": "virtual dom so react doesn't actually change anything it creates creates a new data structure",
    "start": "1049760",
    "end": "1055520"
  },
  {
    "text": "so if i have some data at time 0 and i apply a function i get the data structure that represents",
    "start": "1055520",
    "end": "1061039"
  },
  {
    "text": "my interface at time 0. now if i update the data we don't",
    "start": "1061039",
    "end": "1066080"
  },
  {
    "text": "destroy the old data right we're not destroying the old data we're simply new data that represents the new state of the application at",
    "start": "1066080",
    "end": "1072080"
  },
  {
    "text": "time one i can apply the same function and now i get the ui at time one so what react does for us is",
    "start": "1072080",
    "end": "1079440"
  },
  {
    "text": "it calculates the diff it takes the two virtual representations what the ui should look like",
    "start": "1079440",
    "end": "1085600"
  },
  {
    "text": "and it calculates the minimal set of changes to actually make to the dom and it does this efficiently it's like",
    "start": "1085600",
    "end": "1091919"
  },
  {
    "text": "it's lazy and the subtree calculations are only only looks at what it needs to look at and so on",
    "start": "1091919",
    "end": "1098000"
  },
  {
    "text": "but what's cool about this is what happens if i flip v0 and v1",
    "start": "1098000",
    "end": "1104240"
  },
  {
    "text": "react will for free give me the reverse set of changes right it's just free",
    "start": "1104240",
    "end": "1109440"
  },
  {
    "text": "because that's just the way diffing works right so i can go back in time and i don't i don't have to write any",
    "start": "1109440",
    "end": "1115679"
  },
  {
    "text": "code for this react just gives us time travel by definition by the way",
    "start": "1115679",
    "end": "1121280"
  },
  {
    "text": "that it works you might be skeptical i'm going to show a demo and the demo is pretty cool",
    "start": "1121280",
    "end": "1127280"
  },
  {
    "text": "so so really what it does is your component tree looks something like this and and and react and the the way that",
    "start": "1127280",
    "end": "1133200"
  },
  {
    "text": "react makes diffing tractable is that they simplify the the what gets dipped so",
    "start": "1133200",
    "end": "1138480"
  },
  {
    "text": "you can imagine the blue guy is a div and here we see oh it's a div in when in at time zero and",
    "start": "1138480",
    "end": "1144720"
  },
  {
    "text": "it's a div at time one and we're like well nothing's changed there then we descend into the children and we",
    "start": "1144720",
    "end": "1150799"
  },
  {
    "text": "see oh now we have two paragraph tags well they don't look different and then we descend into children",
    "start": "1150799",
    "end": "1156000"
  },
  {
    "text": "and we see oh there was a um there was a a span and then a font tag but they",
    "start": "1156000",
    "end": "1162320"
  },
  {
    "text": "switched places and so what is what is what does their algorithm do it simply knows to",
    "start": "1162320",
    "end": "1167919"
  },
  {
    "text": "move those two dom nodes right and so again but again this should show",
    "start": "1167919",
    "end": "1173280"
  },
  {
    "text": "you that we can go in either direction either direction right and it's driven by data",
    "start": "1173280",
    "end": "1179200"
  },
  {
    "text": "so let's see a demo of this uh so once i realized that that persistent",
    "start": "1179200",
    "end": "1185440"
  },
  {
    "text": "data structures and um react were good pairing i was like i wonder how hard it would be to do undo so i've been doing",
    "start": "1185440",
    "end": "1191200"
  },
  {
    "text": "mvc style programs for a very long time and i really hate doing undo if you've ever looked at coco's undo manager",
    "start": "1191200",
    "end": "1199039"
  },
  {
    "text": "number one it's hard to get right even if you plan for it up front retrofitting undo onto an existing",
    "start": "1199039",
    "end": "1204400"
  },
  {
    "text": "object-oriented system good luck that's you know whatever it's not going to happen",
    "start": "1204400",
    "end": "1211039"
  },
  {
    "text": "but if you start off with a functional model you can you can i added undo so i took the very sort of",
    "start": "1211039",
    "end": "1217360"
  },
  {
    "text": "traditional benchmark mvc application which is to do mvc it's not very interesting but i said",
    "start": "1217360",
    "end": "1222640"
  },
  {
    "text": "how hard would it be for me to add undo to an existing system and so basically there's like five this",
    "start": "1222640",
    "end": "1229520"
  },
  {
    "text": "is like five lines of code i wrote five lines of code i had an existing",
    "start": "1229520",
    "end": "1235120"
  },
  {
    "text": "version of to do nbc in ohm already so i wrote five lines of code and then i got i got this",
    "start": "1235120",
    "end": "1243440"
  },
  {
    "text": "so here i can go uh go to go to",
    "start": "1243440",
    "end": "1250000"
  },
  {
    "text": "you know you know so i can click here",
    "start": "1250000",
    "end": "1257440"
  },
  {
    "text": "i can switch tabs i can clear completed like this i can i don't know why you",
    "start": "1257440",
    "end": "1265039"
  },
  {
    "text": "would walk a cap but just for fun",
    "start": "1265039",
    "end": "1268559"
  },
  {
    "text": "so up here you see that it's not slow this is far faster than 60 frames a second",
    "start": "1271840",
    "end": "1277039"
  },
  {
    "text": "so you know 60 frames a second is like 16 milliseconds so i can click undo",
    "start": "1277039",
    "end": "1284320"
  },
  {
    "text": "that's it and i didn't have to plan ahead for that",
    "start": "1287600",
    "end": "1292799"
  },
  {
    "text": "right there was no planning ahead for this this is this is falls completely out of saying i'm going to represent my app state as",
    "start": "1292799",
    "end": "1299520"
  },
  {
    "text": "with persistent data structures i'm going to let react calculate the the changes to the dom",
    "start": "1299520",
    "end": "1306000"
  },
  {
    "text": "so you might think well undo who cares about that it is actually pretty cool but maybe your app doesn't need undo",
    "start": "1306000",
    "end": "1311120"
  },
  {
    "text": "but think about error handling what happens when you when you can't communicate to the server and you need to roll back so what do you do i look at",
    "start": "1311120",
    "end": "1317520"
  },
  {
    "text": "somebody's program and see oh they had to manually roll back their app state or say a customer has an error right",
    "start": "1317520",
    "end": "1324400"
  },
  {
    "text": "what can you do in this model you can actually you can actually serialize the last 50 steps",
    "start": "1324400",
    "end": "1329520"
  },
  {
    "text": "send it to your server and play it back it's trivial right you don't have to write code to do",
    "start": "1329520",
    "end": "1335120"
  },
  {
    "text": "this all these things that we want to do around error handling and rolling back these also fall out of",
    "start": "1335120",
    "end": "1340960"
  },
  {
    "text": "the ability to travel freely through time so uh i could",
    "start": "1340960",
    "end": "1347919"
  },
  {
    "text": "talk more about things that i've done but i think it's more fun to demo something that somebody else did",
    "start": "1347919",
    "end": "1355840"
  },
  {
    "text": "so this was uh from one of the developers of ableton live he sort of ran across my blog post",
    "start": "1355840",
    "end": "1362720"
  },
  {
    "text": "and he was like okay that sounds cool here's a little toy toy mbc app and it has undo and he said i'm",
    "start": "1362720",
    "end": "1369280"
  },
  {
    "text": "going to do something less toy like because i don't really believe david nolan he seems smart but this seems like",
    "start": "1369280",
    "end": "1374400"
  },
  {
    "text": "this seems like too much magic so he's he said i want to build um a 64 by 64 pixel editor",
    "start": "1374400",
    "end": "1380640"
  },
  {
    "text": "and i want to see how much effort it's going to take for me to add undo redo and then like a time traveling",
    "start": "1380640",
    "end": "1387840"
  },
  {
    "text": "preview right to my app and will it still be simple",
    "start": "1387840",
    "end": "1393039"
  },
  {
    "text": "so here we've got his pixel editor so this is his i did not",
    "start": "1393520",
    "end": "1399919"
  },
  {
    "text": "write this this is somebody else so i can i can pick some colors here",
    "start": "1399919",
    "end": "1405200"
  },
  {
    "text": "i can draw a little circle over here on the right you see all the events piling up um",
    "start": "1405200",
    "end": "1413840"
  },
  {
    "text": "like this",
    "start": "1414400",
    "end": "1417840"
  },
  {
    "text": "okay so if you notice on the left i can scrub and it's and it's just it's",
    "start": "1421840",
    "end": "1428559"
  },
  {
    "text": "going right back over the timeline",
    "start": "1428559",
    "end": "1432960"
  },
  {
    "text": "and we can move forwards through time so this this image is actually",
    "start": "1434159",
    "end": "1441440"
  },
  {
    "text": "a a persistent vector that has 4096 distinct values right so he's encoded",
    "start": "1441440",
    "end": "1448279"
  },
  {
    "text": "4096 individual pieces of application state right so between each step you would",
    "start": "1448279",
    "end": "1454960"
  },
  {
    "text": "assume we'd have to replicate all 496 96 values but i explained to you how persistent vectors were",
    "start": "1454960",
    "end": "1461440"
  },
  {
    "text": "it's not true so even if i even if i click even if i click like this and i just i'm dropping like this",
    "start": "1461440",
    "end": "1467760"
  },
  {
    "text": "right the difference between this one and this one it's it's like",
    "start": "1467760",
    "end": "1474480"
  },
  {
    "text": "again um maybe it's maybe it's four or five arrays right it's there's not there's not much",
    "start": "1474480",
    "end": "1479919"
  },
  {
    "text": "difference um persistent data structures naturally uh represent the delta um",
    "start": "1479919",
    "end": "1488080"
  },
  {
    "text": "pretty cool stuff so he's also able to hear um he has this really cool thing where because it's encoded inside of um",
    "start": "1488080",
    "end": "1496400"
  },
  {
    "text": "inside these persistent data structures doing things like producing an animated gif from what i just drew again trivial",
    "start": "1496400",
    "end": "1503840"
  },
  {
    "text": "trivial to do well and you're probably wondering well how much code did that take",
    "start": "1503840",
    "end": "1510960"
  },
  {
    "text": "so this is the entire this is actually all the code it's like less than 50 lines this is the",
    "start": "1511919",
    "end": "1517440"
  },
  {
    "text": "whole thing you can almost if you're if you're if you're in the front row you can actually read it",
    "start": "1517440",
    "end": "1522559"
  },
  {
    "text": "and i think that's pretty amazing this includes undo redo and the um the the time travel",
    "start": "1522559",
    "end": "1528480"
  },
  {
    "text": "preview so i think that's a that's a pretty awesome radical decrease in complexity",
    "start": "1528480",
    "end": "1533520"
  },
  {
    "text": "if you've ever done undo before much less in a pixel editor you know it's not very fun what's also",
    "start": "1533520",
    "end": "1541120"
  },
  {
    "text": "cool about this is that like you're probably thinking well how much memory does this really take maybe maybe you're like okay this sounds",
    "start": "1541120",
    "end": "1547039"
  },
  {
    "text": "like it's going to be good but really how much memory does it take so i made a little i made a little a little",
    "start": "1547039",
    "end": "1554159"
  },
  {
    "text": "memory test using the chrome developer tools heat profiler and so on the on the i snapshot the",
    "start": "1554159",
    "end": "1561520"
  },
  {
    "text": "application right when it starts and and it starts at about 3.8 megabytes of memory being consumed",
    "start": "1561520",
    "end": "1567600"
  },
  {
    "text": "on the right what i did was they said well i'm going to take a javascript array i'm going to stick you know 4096 sized array i'm going to",
    "start": "1567600",
    "end": "1575840"
  },
  {
    "text": "stick strings in it and i'm going to change one value of course with the javascript array all i can do is copy it",
    "start": "1575840",
    "end": "1581919"
  },
  {
    "text": "every time so copying it 100 times with a different one a different value",
    "start": "1581919",
    "end": "1587600"
  },
  {
    "text": "everywhere that consumes about 1.7 megabytes of memory to hold",
    "start": "1587600",
    "end": "1593440"
  },
  {
    "text": "100 distinct pixel images on the left we see that doing the same",
    "start": "1593440",
    "end": "1600080"
  },
  {
    "text": "thing with the persistent vector uh 0.2 megabytes",
    "start": "1600080",
    "end": "1606080"
  },
  {
    "text": "right so i don't know what's that times eight nine it's nine it's almost an order of",
    "start": "1606080",
    "end": "1611679"
  },
  {
    "text": "magnitude smaller the amount of memory being consumed that's pretty cool",
    "start": "1611679",
    "end": "1617600"
  },
  {
    "text": "so efficient in time and space um so i don't i mean i",
    "start": "1617600",
    "end": "1625120"
  },
  {
    "text": "if you haven't seen ohm before i definitely recommend checking out it's available on github i don't know how many people here are familiar with",
    "start": "1625120",
    "end": "1631039"
  },
  {
    "text": "clojurescript or closure um though these ideas are extremely portable to other languages for example i know that",
    "start": "1631039",
    "end": "1637760"
  },
  {
    "text": "the scala guys are using scala js and scala has very good persistent data structures i've seen some awesome demos where",
    "start": "1637760",
    "end": "1643760"
  },
  {
    "text": "scholar js plus react works great even if you're a javascript programmer",
    "start": "1643760",
    "end": "1649120"
  },
  {
    "text": "you can do what i'm demonstrating so there's a fantastic not word not fantastic my library but it's just exporting",
    "start": "1649120",
    "end": "1656000"
  },
  {
    "text": "closure script to be consumed by javascript consumers so maybe you're in javascript and you",
    "start": "1656000",
    "end": "1661200"
  },
  {
    "text": "can't or maybe you're in coffeescript right i don't know what you're using but you want the data structures but you don't want to adopt the language",
    "start": "1661200",
    "end": "1667679"
  },
  {
    "text": "so mori exports in a very underscore like way all of the persistent data structures as",
    "start": "1667679",
    "end": "1672880"
  },
  {
    "text": "well as the entire standard library for manipulating them so quite a few people actually i know",
    "start": "1672880",
    "end": "1678559"
  },
  {
    "text": "are actually using mori in their client-side apps because they want they want to be able to pair react",
    "start": "1678559",
    "end": "1684799"
  },
  {
    "text": "with immutable data structures because again react gets a lot better if you pair with",
    "start": "1684799",
    "end": "1690240"
  },
  {
    "text": "immutable data structures so that's actually all i had today i",
    "start": "1690240",
    "end": "1695919"
  },
  {
    "text": "think i'll take some questions",
    "start": "1695919",
    "end": "1711039"
  },
  {
    "text": "does this work with mvc frameworks or is this instead of using an mvc framework so that's what i was trying to",
    "start": "1711039",
    "end": "1717760"
  },
  {
    "text": "suggest so um you can just you i know people are sorry the question was",
    "start": "1717760",
    "end": "1723520"
  },
  {
    "text": "um does this replace mvc frameworks or can you use it with mbc frameworks so they are in some sense or orthogonal",
    "start": "1723520",
    "end": "1731200"
  },
  {
    "text": "so what i'm saying is like you can do you can have the mvc architecture you can still have models",
    "start": "1731200",
    "end": "1736720"
  },
  {
    "text": "which represent the domain you can have controllers which coordinate between a view and the domain that's fine but instead",
    "start": "1736720",
    "end": "1744159"
  },
  {
    "text": "of having mutable models and mutable controllers and mutable views this is how you can replace every",
    "start": "1744159",
    "end": "1749840"
  },
  {
    "text": "part of that stack with immutable immutable things so people have played around with ember i've seen",
    "start": "1749840",
    "end": "1755279"
  },
  {
    "text": "some experience with ember like you got ember plus an immutable model um",
    "start": "1755279",
    "end": "1760480"
  },
  {
    "text": "you you can do this again it's more it's going to require some unlearning though right there are a lot of things that people do",
    "start": "1760480",
    "end": "1766799"
  },
  {
    "text": "in these traditional systems are like kind of are swimming the wrong direction",
    "start": "1766799",
    "end": "1772799"
  },
  {
    "text": "sorry uh let's repeat so who owns the model the mvc framework obviously has its own copy of the model",
    "start": "1779760",
    "end": "1786399"
  },
  {
    "text": "and this is keeping a version history of those models how how are the two systems interacting",
    "start": "1786399",
    "end": "1793360"
  },
  {
    "text": "with each other so those are those are orthogonal right so um what i tried to demonstrate with",
    "start": "1793360",
    "end": "1799440"
  },
  {
    "text": "what i was doing is that i was able to build the 2d to do mvc application the undo was a separate thing",
    "start": "1799440",
    "end": "1805039"
  },
  {
    "text": "the work that's completely separate if you don't want undo you don't have to do that",
    "start": "1805039",
    "end": "1810880"
  },
  {
    "text": "i think there's somebody behind you you mentioned at the beginning that you",
    "start": "1813520",
    "end": "1819360"
  },
  {
    "text": "had done coco uh ios and uh sort of uh and mac",
    "start": "1819360",
    "end": "1825440"
  },
  {
    "text": "have you tried or have you thought about if it's possible to sort of apply this to sort of native mobile or",
    "start": "1825440",
    "end": "1832240"
  },
  {
    "text": "other frameworks so it's definitely worth experimenting with because um so the question was um has",
    "start": "1832240",
    "end": "1839200"
  },
  {
    "text": "did has this been applied to like android or ios so it's definitely worth experimenting",
    "start": "1839200",
    "end": "1844320"
  },
  {
    "text": "with in ios it's a bit easier to actually just use react but that's because um",
    "start": "1844320",
    "end": "1850559"
  },
  {
    "text": "os 10 and ios 7 os 10 mavericks and ios 7 now export",
    "start": "1850559",
    "end": "1855919"
  },
  {
    "text": "javascript core so that you can directly bind from javascript to native objective c so i think there's",
    "start": "1855919",
    "end": "1862640"
  },
  {
    "text": "a lot of cool things you could do there by literally just loading react and having react manipulate",
    "start": "1862640",
    "end": "1869039"
  },
  {
    "text": "objective c objects",
    "start": "1869039",
    "end": "1879840"
  },
  {
    "text": "is there any sort of case that really aggravates the behavior of the",
    "start": "1886720",
    "end": "1892159"
  },
  {
    "text": "of the of the reactor ohm structure are the things where you would",
    "start": "1892159",
    "end": "1897440"
  },
  {
    "text": "definitely stay away from it um i mean so it does i mean it's",
    "start": "1897440",
    "end": "1903440"
  },
  {
    "text": "it is like it is pretty intensive um i will say that like uh it benefits from fast gc",
    "start": "1903440",
    "end": "1910720"
  },
  {
    "text": "definitely same as closure it benefits from jitting javascript engines granted",
    "start": "1910720",
    "end": "1917440"
  },
  {
    "text": "i mean a ton of work has gone to react to make it work even if those things aren't present and same with closure script we test on slower javascript engines",
    "start": "1917440",
    "end": "1925440"
  },
  {
    "text": "but it's going to be slower than like mutating array if there's something you're doing where you just need to like mutate something do it",
    "start": "1925440",
    "end": "1931600"
  },
  {
    "text": "in fact in fact the the pixel-based editor what does it do when it blitz right it's",
    "start": "1931600",
    "end": "1937120"
  },
  {
    "text": "just mutating the canvas we don't we don't need to get in the way of that um so part of what i'm suggesting is that this works best when you when this",
    "start": "1937120",
    "end": "1944080"
  },
  {
    "text": "is your domain your model don't you don't need this for like high performance algorithms",
    "start": "1944080",
    "end": "1950240"
  },
  {
    "text": "does that answer your question any other questions",
    "start": "1950240",
    "end": "1957760"
  },
  {
    "text": "and thank you very much david thanks",
    "start": "1959279",
    "end": "1963840"
  }
]