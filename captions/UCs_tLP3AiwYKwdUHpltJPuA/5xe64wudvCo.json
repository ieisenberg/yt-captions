[
  {
    "start": "0",
    "end": "77000"
  },
  {
    "text": " \nA good morning or good   afternoon or good evening, depending on wherever \nyou are and whenever you're listening to this. My  ",
    "start": "3639",
    "end": "10200"
  },
  {
    "text": "name is Kevlin Henney, I'm here doing a GOTO Book \nClub, and the book that we're going to explore and  ",
    "start": "10200",
    "end": "15629"
  },
  {
    "text": "we're gonna go further than just the core book, \nwe want to explore the world around it as well,   is by Christian Clausen and it is \"Five Lines \nof Code.\" And  I'm gonna say, books with hard  ",
    "start": "15630",
    "end": "29787"
  },
  {
    "text": "coded numbers in their title is something that I'm \nfamiliar with, as the editor of \"97 Things Every   Programmer Should Know,\" and \"97 Things Every Java \nProgrammer Should Know.\" And the goal of the book,  ",
    "start": "29787",
    "end": "40800"
  },
  {
    "text": "just kind of a subtitle on the cover, how and \nwhen to refactor. This is a topic close to my  ",
    "start": "40800",
    "end": "48660"
  },
  {
    "text": "heart and one of the reasons I was very keen to \ntalk to Christian about this. Christian, hello.   \nHello, Kevlin. Thank you for that introduction. ",
    "start": "48660",
    "end": "57720"
  },
  {
    "text": " \nLet's talk about this one. There's   a lot going on here. This book was published two \nyears ago at the time of recording, we're in 2023,  ",
    "start": "58500",
    "end": "65820"
  },
  {
    "text": "year of publication is 2021. \nKind of right in the pandemic.  ",
    "start": "66900",
    "end": "71580"
  },
  {
    "text": "We'll get to that one in a moment. I'm presuming \nit was written mostly over the pandemic.   But I suspect this origin story goes far further \nback. Christian, if you could just tell us a  ",
    "start": "72840",
    "end": "81960"
  },
  {
    "start": "77000",
    "end": "254000"
  },
  {
    "text": "little bit about, you, what you do, and then \nwe'll dig into where did this book come from?",
    "start": "81960",
    "end": "88200"
  },
  {
    "text": "Sure. After university, or during university, \nI used to study programming. I've always loved  ",
    "start": "88800",
    "end": "97320"
  },
  {
    "text": "programming, I learned programming at a very young \nage, and it was sort of the way that I explored   the world was automating things and building these \nlittle prototypes. And when I got to the teenage  ",
    "start": "97320",
    "end": "105600"
  },
  {
    "text": "years, I started selling these small website \nsolutions that you could do back in the day. Now,   of course, the CMS systems are too good to write \nyour own. But back then, we could still do it.  ",
    "start": "105600",
    "end": "115080"
  },
  {
    "text": "During university, I got more and more into \nthis programming thing and how can we make   code easier to work with. Is there, like, such \na thing as perfect code that never breaks and  ",
    "start": "116340",
    "end": "125280"
  },
  {
    "text": "never...like that's so resilient to change? And I \nalso...the other thing I really loved was teaching  ",
    "start": "125280",
    "end": "130440"
  },
  {
    "text": "and working with people. And obviously, those two \ngo hand in hand because humans build the software,  ",
    "start": "130440",
    "end": "136080"
  },
  {
    "text": "so you need to understand how humans \nthink and build and make mistakes,   and then also how the programs make mistakes \nor what computers are vulnerable to. ",
    "start": "136080",
    "end": "145080"
  },
  {
    "text": " \nAnd I used to do a lot of teaching   during university. I used to host a talk two hours \nevery Friday for 60 weeks in a row or something  ",
    "start": "146400",
    "end": "155940"
  },
  {
    "text": "like that on different topics. And after I was \ndone, I went into consulting and did hands-on  ",
    "start": "155940",
    "end": "163200"
  },
  {
    "text": "solutions for big industry customers and stuff, \nwhere the systems ranged from doing a small plugin  ",
    "start": "163200",
    "end": "172739"
  },
  {
    "text": "to some big, huge system or writing,  the entire \narchitecture of a multi-million line code base.  ",
    "start": "172740",
    "end": "179520"
  },
  {
    "text": "And I started thinking about when the code \nbases grew too large for one person to fix,  ",
    "start": "180840",
    "end": "187500"
  },
  {
    "text": "I started thinking about how can I get \nmy team go in the right direction without  ",
    "start": "188100",
    "end": "193980"
  },
  {
    "text": "having to give them the whole five years \neducation I've had in programming theory. ",
    "start": "193980",
    "end": "198060"
  },
  {
    "text": " \nI started trying to, fake   it till you make it kind of, dress for the job you \nwant. I was like, \"Here's a rule, it's super easy  ",
    "start": "199140",
    "end": "206640"
  },
  {
    "text": "to understand, just do this, it'll be better than \nbefore. It might not be perfect, but it will go in   the right direction.\" And I've fully embraced this \nagile way of living where I only think about the  ",
    "start": "206640",
    "end": "219060"
  },
  {
    "text": "next step in the right direction, and then we'll \nadjust from there. That was sort of the thing, I   started coming up with a few rules and stuff. And \neventually, I had this catalog of small rules that  ",
    "start": "219060",
    "end": "229980"
  },
  {
    "text": "sort of helped each other and build on each other, \nand I knew that it was something really important  ",
    "start": "229980",
    "end": "236040"
  },
  {
    "text": "or it really useful because the improvements \nwe saw were real. I decided to write them down,  ",
    "start": "236040",
    "end": "243659"
  },
  {
    "text": "and then compile them into a set of things, a \nsmall catalog of 100 pages in the beginning.",
    "start": "243660",
    "end": "249780"
  },
  {
    "text": "That's where it grew from. And to hint \nat something that you're describing, so  ",
    "start": "251820",
    "end": "257760"
  },
  {
    "start": "254000",
    "end": "470000"
  },
  {
    "text": "you're talking about the small \nthings, the small stuff matters.   That idea that, we build big systems, big \nsystems are built out of smaller pieces,  ",
    "start": "258480",
    "end": "267960"
  },
  {
    "text": "and those are built out of smaller pieces \nstill. Therefore, the small stuff matters.   What's interesting about the way that you present \nthe refactorings in the book is I think, one,  ",
    "start": "267960",
    "end": "280560"
  },
  {
    "text": "is a general observation and one is \nan observation from, I say, the 2020s.  ",
    "start": "280560",
    "end": "285120"
  },
  {
    "text": "First of all, the general observation, my first \nproper introduction to refactoring was around the  ",
    "start": "286020",
    "end": "290639"
  },
  {
    "text": "XP era, Martin Fowler's refactoring book, \nthat's kind of helped popularize it,  ",
    "start": "292740",
    "end": "297060"
  },
  {
    "text": "brought it to the surface, if you \nlike, as a first-class practice. ",
    "start": "298020",
    "end": "303060"
  },
  {
    "text": " \nAnd Martin's first edition book and then   the second edition, they deal with kind of like \na middle range, a range that many people who tend  ",
    "start": "303060",
    "end": "311280"
  },
  {
    "text": "to think about and talk about design patterns be \nvery comfortable with. But also, we head into the  ",
    "start": "311280",
    "end": "317639"
  },
  {
    "text": "code but often with bigger implications. It feels \nlike your book kind of picks up...it overlaps with  ",
    "start": "317640",
    "end": "324120"
  },
  {
    "text": "some of this kind of the more fine-grained things. \nFor example, switches into polymorphism. That's a  ",
    "start": "324120",
    "end": "329340"
  },
  {
    "text": "kind of a classic, where you start with a little \npiece of control flow and end up with a changed   structure that is first-class visible to anybody \nopening the file. But you also go into much more  ",
    "start": "329340",
    "end": "340440"
  },
  {
    "text": "detail that kind of in some ways picks up \nwhere Martin left off. You're dealing with,  ",
    "start": "340440",
    "end": "346920"
  },
  {
    "text": "I don't know, the small change, if you \nlike, rather than the bigger amounts. ",
    "start": "346920",
    "end": "351660"
  },
  {
    "text": " \nIt feels like or it felt like to me...I'd read,   obviously, the \"Gang of Four\" book, and then \nright when I got it, actually, I was super  ",
    "start": "352440",
    "end": "359400"
  },
  {
    "text": "excited because it was a book referred by everyone \nand I was super awestruck. And then I showed it to  ",
    "start": "359400",
    "end": "364740"
  },
  {
    "text": "one of my professors and he's like, \"Oh, that's \nnot the one you should be reading, you should be   reading Martin Fowler's book instead.\" I went home \nand order Martin Fowler's book, and it changed  ",
    "start": "364740",
    "end": "373919"
  },
  {
    "text": "my life completely. It was like this idea that \ninstead of trying to figure out everything from   the start, you instead do this small, incremental \nwork on a codebase and you start from a mess. ",
    "start": "373920",
    "end": "383520"
  },
  {
    "text": " \nAnd I'm like, \"Obviously, this is way   more applicable because I always have a mess.\" \nWhether I start from something somebody else  ",
    "start": "383520",
    "end": "390840"
  },
  {
    "text": "built or something I built six months ago, it's \nalways a mess. It's way more stable to be able to  ",
    "start": "390840",
    "end": "395940"
  },
  {
    "text": "handle that. But then I started realizing as I was \ntalking with people and seeing people in the real  ",
    "start": "395940",
    "end": "401040"
  },
  {
    "text": "world that the smells were sort of the unexplained \nsort of thing. Where do you get started with the  ",
    "start": "401040",
    "end": "406800"
  },
  {
    "text": "smells? That was the next, frontier.\n   I think there's a couple of things. First of all, \nlet me just jump back from that to that idea,  ",
    "start": "406800",
    "end": "420420"
  },
  {
    "text": "the second idea, the perspective from the 2020s. \nNow, many people are now more familiar with  ",
    "start": "420420",
    "end": "425880"
  },
  {
    "text": "refactoring. It's now in people's vocabulary, \npossibly to the point that they overuse it  ",
    "start": "427260",
    "end": "431640"
  },
  {
    "text": "sometimes just to mean, \"I'm changing something,\" \nand it's strictly not a refactoring in the sense   of preserving existing behavior. But when \nMartin's book came out, he was building  ",
    "start": "432300",
    "end": "442800"
  },
  {
    "text": "on a whole movement there that had kind of \nbeen growing. And he kind of categorized it,  ",
    "start": "442800",
    "end": "448860"
  },
  {
    "text": "cataloged it, presented it in a way, and he \nwas a popular author, really nicely presented,   it's just like you're going through and go, \n\"Oh, okay, this is what people mean when they  ",
    "start": "448860",
    "end": "457020"
  },
  {
    "text": "talk about incremental development, this is how \nthey talk about iterations, everything else fell   too big.\"\n   But what I find interesting is that a lot of \npeople now assume this is a solved problem,  ",
    "start": "457020",
    "end": "465600"
  },
  {
    "text": "because we have tools which have automated \nrefactorings. And, I mean, obviously, that's  ",
    "start": "465600",
    "end": "473100"
  },
  {
    "start": "470000",
    "end": "608000"
  },
  {
    "text": "not a solved problem. What I find is that people \nhave all of those issues in their code that,  ",
    "start": "473100",
    "end": "480060"
  },
  {
    "text": "honestly, they had 20 years ago, that hasn't \nchanged. They've just now got a tool that  ",
    "start": "480060",
    "end": "485160"
  },
  {
    "text": "they don't use. But also, your book actually \ngives people the raw recipes and low-level  ",
    "start": "485160",
    "end": "492660"
  },
  {
    "text": "ingredients, and just saying, \"Don't worry about \nthe tools, I'm going to show you what this is,   just imagine the only tool you have is a \ncompiler.\" Now, I like that approach. What  ",
    "start": "492660",
    "end": "501900"
  },
  {
    "text": "inspires you to kind of pursue that one? Because \nit goes back to this idea of detail, doesn't it?",
    "start": "501900",
    "end": "508070"
  },
  {
    "text": "I guess, obviously, I started coding back before \nI knew IDs were a thing. I coded in straight  ",
    "start": "508071",
    "end": "513599"
  },
  {
    "text": "notepad, no ++, no fancy things, just save the \nfile and edit the file, you have to do your  ",
    "start": "513600",
    "end": "519120"
  },
  {
    "text": "own line breaks and no syntax highlighting. I got \nall these very hard habits or hard-learned habits  ",
    "start": "519120",
    "end": "526440"
  },
  {
    "text": "where it's like I always put the end parenthesis \nwhen I put the beginning parentheses because,  ",
    "start": "526440",
    "end": "531480"
  },
  {
    "text": "otherwise, I'm going to have to sit down and \ncount them. There was no highlighting, right?   All of these things that I'm hoping people don't \ndeal with when they learn programming nowadays,  ",
    "start": "531480",
    "end": "539820"
  },
  {
    "text": "but I learned all of these things.\n   And also debugging with just printf instead \nof using a complicated debugger with all of  ",
    "start": "539820",
    "end": "547860"
  },
  {
    "text": "these extra things, it's always been \nabout sort of the purity of, like,   \"What's the least amount of things I need \nto learn to be able to work effectively?\"  ",
    "start": "547860",
    "end": "555420"
  },
  {
    "text": "And then learn those really well. Like, I always \nadvocate people learn Git, for instance. We all   have Git somewhere in our stack. Learn it, \nlike, use it. It's a super powerful tool.  ",
    "start": "555420",
    "end": "565620"
  },
  {
    "text": "I always advocate learning fewer things better, \nat least in a professional setting. It's like I  ",
    "start": "567420",
    "end": "573779"
  },
  {
    "text": "would really go that way.\n   I think that essentialism also makes it more \nbroadly applicable because you're showing  ",
    "start": "573780",
    "end": "581580"
  },
  {
    "text": "people...you're not telling them, \"You can only \ndo this if you're working in this language in this   environment.\" I think that's quite an important \nthing that the language of the book is TypeScript,  ",
    "start": "581580",
    "end": "591000"
  },
  {
    "text": "but I happen to know that, first of all, \nan awful lot more programming languages,   but also you explicitly say in the book, \"You're \nusing this because, hey, if you're a C# programmer  ",
    "start": "591000",
    "end": "601440"
  },
  {
    "text": "or you're a Java programmer, you can read this. \nIf you're working in straight JavaScript, then,   this is just a few extra colons.\"\n  ",
    "start": "601440",
    "end": "607980"
  },
  {
    "text": "And it's very much that you are looking \nto get that message out and you're going   to choose that common subset. You're not \ngoing to rely on somebody working with just,  ",
    "start": "607980",
    "end": "616080"
  },
  {
    "start": "608000",
    "end": "785000"
  },
  {
    "text": "say, \" I'm assuming that you are working with \nIntelliJ and that you're doing this, so therefore,  ",
    "start": "616080",
    "end": "621780"
  },
  {
    "text": "I'm going to lean on that.\" You're just saying, \n\"No, here is what's happening to the code,   and perhaps you can automate it, but \nlet me just show you the real deal.\"",
    "start": "621780",
    "end": "627840"
  },
  {
    "text": "And it comes especially out when it's talking \nabout something like renaming something or   extracting a method. Whenever people have looked \nin the book, they're like, \"Why do you do this by  ",
    "start": "628560",
    "end": "637860"
  },
  {
    "text": "hand? Why don't you just use the automated tool, \nthe ID, to do something like this?\" And I'm like,   \"If you feel comfortable with that, that's \nfine, I don't mind. But I really want to be  ",
    "start": "637860",
    "end": "647699"
  },
  {
    "text": "able to do it without the tool.\" Right? If I find \nmyself in a situation where I'm in a new team,   for instance, a new organization, \nbut they don't use the same editor,  ",
    "start": "647700",
    "end": "654720"
  },
  {
    "text": "I don't want to have to rely on a tool that \nisn't necessarily there. Fewer dependencies.   ",
    "start": "654720",
    "end": "660660"
  },
  {
    "text": "Fewer dependencies is a really good point and that \nidea of having a portable skill.If you've got a  ",
    "start": "662880",
    "end": "669780"
  },
  {
    "text": "tool that does it, reach for it. But if you don't, \nyou still know how to do it. You're not without   that. But I also think that having...in fact, you \npick on rename, which I think is probably the most  ",
    "start": "669780",
    "end": "681180"
  },
  {
    "text": "common refactoring that people apply. But if you \nask them, \"How would you do it if you didn't have  ",
    "start": "681180",
    "end": "686460"
  },
  {
    "text": "an automated refactoring?\" They probably wouldn't \nknow. And what you're describing...and you  ",
    "start": "687720",
    "end": "692879"
  },
  {
    "text": "actually go through the mechanics of it, \nin a way that I found very comfortable.   But also, if somebody's just doing something \nwith a scripting language that doesn't have  ",
    "start": "692880",
    "end": "701399"
  },
  {
    "text": "any ID support, they're just messing \nabout, actually, they can still do this,   which I think is quite nice. This is very \nmuch like that kind of like minimal toolset. ",
    "start": "701400",
    "end": "709440"
  },
  {
    "text": " \nI remember having to do some of these   renamings in languages that weren't compiled, \nand I would do it with Search and Replace, right,  ",
    "start": "709440",
    "end": "718200"
  },
  {
    "text": "because it's a big codebase, maybe a few thousand \nlines, it's too much for me to read by hand.   Search and replace, and of course, what happens \nthen? You break something else because that  ",
    "start": "718200",
    "end": "726540"
  },
  {
    "text": "name was part of another name somewhere \nelse in the codebase that you didn't...?   It seems like a trivial thing but it can go \nwrong, so can automated refactoring tools,  ",
    "start": "726540",
    "end": "735360"
  },
  {
    "text": "by the way, also, which also scared me off because \nI was using Eclipse a lot back 10-15 years ago. ",
    "start": "735360",
    "end": "742200"
  },
  {
    "text": " \nAnd I had the Save actions to just   auto format, auto make everything nice whenever \nI saved. And then one day, I hit save, and it put  ",
    "start": "742200",
    "end": "751200"
  },
  {
    "text": "in all of the line breaks after the if before the \nparenthesis or it should have. Instead, what it  ",
    "start": "751200",
    "end": "756600"
  },
  {
    "text": "did was it moved it to just one character to the \nleft everywhere.Instead of if, it was now \"i space  ",
    "start": "756600",
    "end": "762720"
  },
  {
    "text": "if\" and then parenthesis, so the whole codebase \nwas corrupted. It was horrible. Tools can help you  ",
    "start": "762720",
    "end": "771779"
  },
  {
    "text": "fast, but they can also break things very fast.\n   I think that idea that  it's that idea of they \nallow us to amplify the speed at which we can  ",
    "start": "771780",
    "end": "778620"
  },
  {
    "text": "get things wrong. They allow us to amplify \nthe speed at which we can get things right,   but there's the other side to it as \nwell, I think, that's quite important.",
    "start": "778620",
    "end": "784560"
  },
  {
    "text": "And that's super important, actually, also for \nthe book because it's something that I often   discuss with people. Whenever they say, \"You copy \ncode so much, why do you do that? Why don't you  ",
    "start": "784560",
    "end": "794399"
  },
  {
    "start": "785000",
    "end": "1016000"
  },
  {
    "text": "just...what about dry? What about this stuff? \nWhat about unifying everything?\" And I'm like,   \"Well, whenever you unify things, you can now \nchange twice as much code in the same time,  ",
    "start": "794400",
    "end": "804240"
  },
  {
    "text": "right?\" Virtually, you're gearing up your \ncodebase for faster change. And if you're  ",
    "start": "804240",
    "end": "809459"
  },
  {
    "text": "in an environment where you have good test \ncoverage, you have good types or formal   proofs or whatever you have, sure, you can do \nthat. Just gear it up as much as you want to,  ",
    "start": "809460",
    "end": "818280"
  },
  {
    "text": "and then just go really, really fast. But for a \nlot of people where test coverage is a problem,  ",
    "start": "818280",
    "end": "822540"
  },
  {
    "text": "it might not be a good idea to be able to change \ntwice as much code very quickly. Maybe you want  ",
    "start": "823380",
    "end": "828540"
  },
  {
    "text": "to change it a little bit slower, right? I'm \nreally...I've been fighting a lot to make  ",
    "start": "828540",
    "end": "835019"
  },
  {
    "text": "dry sort of a conscious decision instead of \njust a catch-all, \"Everything should be dry.\" ",
    "start": "835020",
    "end": "841320"
  },
  {
    "text": " \nThat was something  ",
    "start": "842280",
    "end": "846360"
  },
  {
    "text": "for those of you listening who have not \ncome across the book, the book goes through   a number of different examples. It's got \none core example through the first part,  ",
    "start": "848160",
    "end": "855180"
  },
  {
    "text": "but it also has some side quests thrown in. And \nthe transformations, typically left to right page,  ",
    "start": "855180",
    "end": "864480"
  },
  {
    "text": "are shown before and after, which is nice...which \nmakes it very easy for direct comparison.  ",
    "start": "864480",
    "end": "871440"
  },
  {
    "text": "But also you get that progression over time and \nyou notice the copy. And I was actually quite  ",
    "start": "872040",
    "end": "877800"
  },
  {
    "text": "glad of this because I did a talk recently \nwhere I found, exactly as you're describing,  ",
    "start": "877800",
    "end": "883440"
  },
  {
    "text": "I had to have a whole couple of slides justifying \nwhy, and the talk was on a refactoring. ",
    "start": "883440",
    "end": "888660"
  },
  {
    "text": " \nAnd I went and duplicated a whole bunch of stuff   in order ultimately to cook it down to eliminate \nit, but it's kind of the whole idea of like,  ",
    "start": "888660",
    "end": "897000"
  },
  {
    "text": "\"If I'm going to tidy my room, I don't immediately \nput things in other rooms, I don't immediately  ",
    "start": "897000",
    "end": "902580"
  },
  {
    "text": "extract. What I do is I kind of put the whole \nmess in the middle of the floor. Now I can see   what I need to tidy, I can shuffle things around. \nNow, I can classify, I see it all in one place.\"  ",
    "start": "902580",
    "end": "909720"
  },
  {
    "text": "And in code, some of that is throw things into \na method until it gets painful but more obvious,  ",
    "start": "909720",
    "end": "916620"
  },
  {
    "text": "you see the patterns. But the other thing is \ncopying. That's one of the things that we do.   And it's just like there's a benefit to that.\n  ",
    "start": "916620",
    "end": "922380"
  },
  {
    "text": "Once you've added that, the stuff works. If \nit's not doing anything extra, then it works,   and now you can start knocking out the bits \nwith diligence and care by inspection. It  ",
    "start": "922380",
    "end": "932820"
  },
  {
    "text": "was nice to see that made first class \nbecause I don't think that's...when   other people talk refactoring, I don't tend to \nsee them...no, they say it sometimes, but they  ",
    "start": "932820",
    "end": "942180"
  },
  {
    "text": "don't show it and I think there's a difference. \nAnd as you say, people are noticing it. And that   idea that perhaps dry is what you want, at the \nend of the day, when you put your clothes on,  ",
    "start": "942180",
    "end": "952860"
  },
  {
    "text": "but while you're washing your clothes, it doesn't \nhave to be dry, it can be as wet as anything.   \nThat's a very nice  ",
    "start": "952860",
    "end": "958560"
  },
  {
    "text": "way of putting it. I think also something that \npeople miss is whenever you try...if you try to do  ",
    "start": "958560",
    "end": "963779"
  },
  {
    "text": "some of these refactorings or some of these major \nchanges to code that is shared by multiple things,  ",
    "start": "963780",
    "end": "968460"
  },
  {
    "text": "you're gonna have to do everything a little \nbit slower because you have to check, \"Did   I break either of the places? Did I consider...\" \nLike, you're putting more stuff into the head of  ",
    "start": "969420",
    "end": "977520"
  },
  {
    "text": "the developer, which is the opposite of what I'm \ntrying to do. And I'm trying to make it simpler,   to make it easier to do these things and to make \nit safer. By duplicating something, \"I'm not going  ",
    "start": "977520",
    "end": "986579"
  },
  {
    "text": "to do side effects, I'm not going to affect \nanything that isn't in front of me right now.\"    ",
    "start": "988620",
    "end": "993720"
  },
  {
    "text": "You can go a little bit faster and you \ncan do a little bit more reckless things,   and then  it's easier to revert it. If you've \nalready started unifying it, you have to mess  ",
    "start": "993720",
    "end": "1003259"
  },
  {
    "text": "about with a bunch of stuff. And again, if \nyou're good at using your Git history, then  ",
    "start": "1003260",
    "end": "1008660"
  },
  {
    "text": "maybe you can get back fast if you need to roll \nit back. But if not, you're just totally screwed.",
    "start": "1008660",
    "end": "1014300"
  },
  {
    "text": "Christian Clausen:It ties into another thing \nI wanted to mention in the book but I ended   up cutting it. It was in the initial plans was a \nchapter called \"Do one thing at a time.\" Because I  ",
    "start": "1015320",
    "end": "1025220"
  },
  {
    "start": "1016000",
    "end": "1337000"
  },
  {
    "text": "see so many people just stacking on extra thing, \ntaking on extra things while they're working,   and during a refactoring, that refactoring could \nget really complex. If you get distracted and  ",
    "start": "1025220",
    "end": "1036860"
  },
  {
    "text": "do something else in the middle, it's gonna go \nwrong. Both things are gonna go wrong, probably. ",
    "start": "1036860",
    "end": "1041179"
  },
  {
    "text": "That was something else I noticed that it was \nactually more visible in the second part of the   book where you kind of pull back and zoom out, \nkind of look at slightly the bigger picture,  ",
    "start": "1042680",
    "end": "1050660"
  },
  {
    "text": "the implications, more about working with other \nteams, diving into some of the coding habits,  ",
    "start": "1051440",
    "end": "1058340"
  },
  {
    "text": "talking a bit more about architecture, a bit more \nabout the whys and the wherefores, and tackling   various topics, including threading, which we know \nTypeScript doesn't support but you're there going  ",
    "start": "1058340",
    "end": "1067100"
  },
  {
    "text": "like, \"Here's how to think about this stuff.\" \nYou also touch on a lot of workflow things.  ",
    "start": "1067100",
    "end": "1072260"
  },
  {
    "text": "Although you didn't end up with that \nchapter, I think I was really interested  ",
    "start": "1073220",
    "end": "1078260"
  },
  {
    "text": "that you actually went much further into \nthe workflow than I initially expected.  It was kind of hinted at in the first part of \nthe book. You talked a lot more about...and this  ",
    "start": "1078260",
    "end": "1086299"
  },
  {
    "text": "idea of doing one thing at a time, I think, is, \ncuriously, one of the hardest things for us to do  ",
    "start": "1086300",
    "end": "1093380"
  },
  {
    "text": "and it perhaps needs to be made more \nexplicit. I think that's what...it is a thing,  ",
    "start": "1094460",
    "end": "1100279"
  },
  {
    "text": "it's like people go like, \" I'm going to fork \nacross all of these things. I have 10 things I   could be doing. Rather than doing them one at a \ntime, I will start all of them simultaneously.\"  ",
    "start": "1100280",
    "end": "1109400"
  },
  {
    "text": "And then each one of those, kind of like a \nhydra, springs up a couple more things that   you hadn't accounted for and as you say, you end \nup with you're not doing one thing well, you're  ",
    "start": "1109400",
    "end": "1117800"
  },
  {
    "text": "doing two things really badly. And that's such a \ncommon thing. I'm presuming that's something you  ",
    "start": "1117800",
    "end": "1124520"
  },
  {
    "text": "see but I think it's interesting. Apart from just \nrecommending that people do one thing at a time,  ",
    "start": "1124520",
    "end": "1131900"
  },
  {
    "text": "what do you think the bigger impact is across \nlarge code bases of not doing one thing at a time? ",
    "start": "1131900",
    "end": "1137000"
  },
  {
    "text": "First of all, I think when you're doing something \nand you're deep into changing something, making  ",
    "start": "1138920",
    "end": "1144740"
  },
  {
    "text": "something more readable, whatever you're doing \nwith the code, and you didn't notice something   else that's broken or something else you could be \nfixing or something that's really ugly or whatever  ",
    "start": "1144740",
    "end": "1153680"
  },
  {
    "text": "it is you want to do, and you start fixing that, \nyou'll be doing that while retaining the momentum  ",
    "start": "1153680",
    "end": "1158780"
  },
  {
    "text": "of the thing you were doing. It will sort of put \nyou in a frame of mind of, \"Now we have sort of   two things,\" and your brain will force them \nor try to force them to be the same sort of  ",
    "start": "1158780",
    "end": "1169100"
  },
  {
    "text": "thing or one coherent thing and you'll struggle \neither to make a red sort of line between those  ",
    "start": "1169100",
    "end": "1175700"
  },
  {
    "text": "or you'll find one and then you might see \nthis thing in a completely different light. ",
    "start": "1175700",
    "end": "1182059"
  },
  {
    "text": " \nIt gets really weird. When you start   unifying or when you start...also, sometimes, \nit's the same with DRYdry, right? If you try to  ",
    "start": "1182060",
    "end": "1190940"
  },
  {
    "text": "unify things that coincidentally look similar, \nthese will now have to have a method name like  ",
    "start": "1190940",
    "end": "1197419"
  },
  {
    "text": "something-handler or something-general, and I know \nyou hate suffixes that don't mean anything, but  ",
    "start": "1198020",
    "end": "1203780"
  },
  {
    "text": "that's how you end up with them, right? It's \nbecause you are in a case where it's so general,   you don't know where to go, right? There \nis no connection between these things,  ",
    "start": "1203780",
    "end": "1212299"
  },
  {
    "text": "but you're trying to force it onto them. It \nactually gets worse than just having two copies. ",
    "start": "1212300",
    "end": "1217340"
  },
  {
    "text": " \nThere's something really   subtle in what you're describing that I think \ndeserves to be brought out, because you're saying,  ",
    "start": "1218180",
    "end": "1225980"
  },
  {
    "text": "you're effectively...accidentally, you can \nend up projecting an opinion, an accidental  ",
    "start": "1225980",
    "end": "1231679"
  },
  {
    "text": "momentary opinion onto the code, rather than the \ndeliberate approach that you take in the book  ",
    "start": "1231680",
    "end": "1236840"
  },
  {
    "text": "of trying to, as it were, find the design, sense \nthe code, kind of feel your way through it,  ",
    "start": "1237920",
    "end": "1243440"
  },
  {
    "text": "and as it were, figure out what does it want to \nbe as opposed to what am I going to impose on it. ",
    "start": "1243440",
    "end": "1248779"
  },
  {
    "text": " \nAnd I think we're very...it's exactly   as you described, it's very easy to just kind of \ngo with something and go like, \"I'm going to push  ",
    "start": "1248780",
    "end": "1254960"
  },
  {
    "text": "this onto the code and it will fit this shape,\" \nand I don't know that I'm forcing it into a shape   that it doesn't want to be and I don't know that I \nam driving together things that are coincidentally  ",
    "start": "1254960",
    "end": "1264380"
  },
  {
    "text": "similar but have no deeper meaning. And then \nI'm left with this thing or this imposition   rather than that slowness that you talked about of \nlike, \"Let's just feel our way,\" it's just like,  ",
    "start": "1264380",
    "end": "1274580"
  },
  {
    "text": "\"Make sure we don't break things, but feel \nour way, find out what the code wants to be.\" ",
    "start": "1274580",
    "end": "1279679"
  },
  {
    "text": " \nAnd the \"make sure we don't break things\" is   also super important because what I learned from \nthe industry and from bitter experience is the  ",
    "start": "1280700",
    "end": "1288679"
  },
  {
    "text": "code that's running in production works right now, \nright? It's running. That's what they have now. It  ",
    "start": "1288680",
    "end": "1294980"
  },
  {
    "text": "might be wrong, it might have errors in it, but \nit is at least good enough to run right now. I  ",
    "start": "1294980",
    "end": "1302540"
  },
  {
    "text": "really, really strive towards having people just \nfollow the thing it's already doing. If you don't  ",
    "start": "1302540",
    "end": "1308300"
  },
  {
    "text": "know that it's wrong, don't question it right \nnow, right? You can fix something after. Also,  ",
    "start": "1308300",
    "end": "1314420"
  },
  {
    "text": "fixing wouldn't be a refactoring anyway. \nBut, like, it already has some structure,   it's doing something. Make that structure appear, \nmake that more clear what it's doing right now,  ",
    "start": "1314420",
    "end": "1324200"
  },
  {
    "text": "more so than what you can imagine it will \ndo in two years or in three years because  ",
    "start": "1324200",
    "end": "1329779"
  },
  {
    "text": "we might bet wrong. Actually, we usually bet \nwrong when we try to go far out in front of us.",
    "start": "1329780",
    "end": "1336260"
  },
  {
    "start": "1337000",
    "end": "1958000"
  },
  {
    "text": "That sensing approach...and again, let's \ngo back to that idea of senses. I mean,  ",
    "start": "1339860",
    "end": "1345799"
  },
  {
    "text": "senses, we use sensors all over the place very \nfiguratively and smells being the one that we  ",
    "start": "1345800",
    "end": "1351800"
  },
  {
    "text": "often gravitate towards when we talk about \nrefactorings. And you highlighted this issue  ",
    "start": "1351800",
    "end": "1356900"
  },
  {
    "text": "that for some people, that's actually more of an \nobstacle that there is and I was thinking when  ",
    "start": "1356900",
    "end": "1361940"
  },
  {
    "text": "you said that in the book, I was thinking, \n\"There's a kind of a notion of to have a refined  ",
    "start": "1362780",
    "end": "1371600"
  },
  {
    "text": "sense of smell, you don't get it for free.\" \nYou've got to learn how to do this, whether   it is the kind of the aroma of a perfume, the \nbouquet of wine. Or if anybody's seen the film,  ",
    "start": "1371600",
    "end": "1384020"
  },
  {
    "text": "\"Ratatouille,\" you've got one rat there that has \nan incredible sense of smell, very sophisticated,  ",
    "start": "1384020",
    "end": "1389300"
  },
  {
    "text": "the other rats don't have it, and he's trying \nto educate the other rats and it's hard work. ",
    "start": "1389300",
    "end": "1393560"
  },
  {
    "text": " \nAnd that's kind of the issue here is that smell,   although a very potentially potent metaphor, \nthere's a lot of learning there. If you're trying  ",
    "start": "1394460",
    "end": "1403820"
  },
  {
    "text": "to get to the simpler message of refactoring, \nthere's a lot of refinement that you have to do to  ",
    "start": "1403820",
    "end": "1408980"
  },
  {
    "text": "be able to...from a standing start. And that's the \ngoal of the book is pretty much to take...that's  ",
    "start": "1408980",
    "end": "1414559"
  },
  {
    "text": "what it felt like, to take people who perhaps hear \nthis word thrown around, refactoring. They see the  ",
    "start": "1414560",
    "end": "1421520"
  },
  {
    "text": "shortcut key, they know how to do a rename maybe, \nthey know a couple of other things, but it's not   in their spine. It's something Joe Armstrong \nused to say, \"You just got to program your  ",
    "start": "1421520",
    "end": "1431240"
  },
  {
    "text": "spine so that it becomes automated.\" They don't \nthink in those terms. And throwing smells in is  ",
    "start": "1431240",
    "end": "1436940"
  },
  {
    "text": "perhaps simpler for some people, but for a lot \nof people, it's actually the obstacle. And that   I find really interesting, I don't think I've come \nacross anybody else point that one out and I think  ",
    "start": "1437540",
    "end": "1446360"
  },
  {
    "text": "you're right.\n   I think the thing that I saw was that many \nprogrammers like knowing what to do when they get  ",
    "start": "1446360",
    "end": "1453440"
  },
  {
    "text": "a task? It's nice and it's comforting to be like, \n\"Oh, you have to do this, this, and this,\" or,   \"You have to solve this problem.\" \"Okay, fine, I \ncan maybe write a test,\" or at least I can imagine  ",
    "start": "1453440",
    "end": "1462800"
  },
  {
    "text": "what I wanted to do when I'm done with this thing. \nBut when it's like, \"Make this code better,\"  ",
    "start": "1462800",
    "end": "1467600"
  },
  {
    "text": "people always almost get scared because like, \n\"What if I make it better in a way that the   rest of the team don't agree with?\" Like, what \nif I do something wrong? What if there is no  ",
    "start": "1468260",
    "end": "1476660"
  },
  {
    "text": "universal truth here?\"\n   And also, what I advocate more than anything is \nthat your team sits down and has a conversation  ",
    "start": "1476660",
    "end": "1483440"
  },
  {
    "text": "about where do you want this code to \ngo and how do you want to get there?   If you don't have anything else, then I recommend, \nobviously, starting from the rules that I've come  ",
    "start": "1483440",
    "end": "1490820"
  },
  {
    "text": "up with because they seem fairly solid. But \nI'm not religious about them. They're not  ",
    "start": "1490820",
    "end": "1496700"
  },
  {
    "text": "lost. They're a starting point for collaboration \nmore than anything, right? So that people can get  ",
    "start": "1496700",
    "end": "1503059"
  },
  {
    "text": "started and feel comfortable. We should feel \ncomfortable going to work. Working with code   should be a nice experience, and it can be, but it \nisn't for a lot of people and that's sort of the  ",
    "start": "1503060",
    "end": "1512659"
  },
  {
    "text": "fundamental pain that I try to alleviate.\n   And I think actually, it's something else, \nthere is...as you sort of said, \"What if I  ",
    "start": "1512660",
    "end": "1523280"
  },
  {
    "text": "want to make the code, better in a way that other \npeople don't agree with it?\" I think the secret  ",
    "start": "1523280",
    "end": "1530060"
  },
  {
    "text": "fear probably many of us have is, \"What if I don't \nknow how to make it better? What if what I think   is better is actually worse?\" It's that kind of \nimposter syndrome, there's a fear there, that I  ",
    "start": "1530060",
    "end": "1539420"
  },
  {
    "text": "think many people hold themselves back. And this \nkind of speaks to this idea of..., first of all,  ",
    "start": "1539420",
    "end": "1545120"
  },
  {
    "text": "picking up on what you were saying earlier \nabout teaching and communication, but also   what you've just said, very much this kind \nof more communal approach to programming and  ",
    "start": "1546380",
    "end": "1555440"
  },
  {
    "text": "socialization of code. It's just like, \"Make sure \nthat we're all happy and comfortable with it.\"   \nThis very much speaks to the human dimension  ",
    "start": "1555440",
    "end": "1562340"
  },
  {
    "text": "and I find it interesting that there's a \nreally nice connection here between the detail  ",
    "start": "1563180",
    "end": "1571640"
  },
  {
    "text": "mechanisms, the kind of recipe-like approach that \nis offered in the book, but also kind of there's a  ",
    "start": "1571640",
    "end": "1577400"
  },
  {
    "text": "lot of stuff on other people and this is really \nimportant. I think it's very often overlooked  ",
    "start": "1577400",
    "end": "1582500"
  },
  {
    "text": "and perhaps because many people in their minds \nalready put refactoring in the...it's a technical   tool corner rather than actually it's a people \nthing corner. And that, I'm more...I'm interested  ",
    "start": "1582500",
    "end": "1592460"
  },
  {
    "text": "to hear what your thoughts are on this because I \nthink this is probably one of the more interesting   areas that is overlooked in refactoring.\n  ",
    "start": "1592460",
    "end": "1599040"
  },
  {
    "text": "Christian Clausen:Sure, it's also the \nreason why I think automating refactoring   is a mistake is that it's a human discipline. \nIt's like saying, \"Text is a solved problem.\"  ",
    "start": "1599040",
    "end": "1608540"
  },
  {
    "text": "It has to be read by humans, and if a human \nhas to convey...or wants to convey something,   some intention, or some feeling, or something like \nthat, it needs to be a human with us with a lot of  ",
    "start": "1609620",
    "end": "1620180"
  },
  {
    "text": "different skills, actually, in grammar and syntax \nand stuff like that to get that out, and metaphors   and knowledge about the domain and what the common \nknowledge of the two people or multiple people  ",
    "start": "1620180",
    "end": "1630140"
  },
  {
    "text": "interacting is. All of these are not things that \nyou can automate. I think, actually, it will be  ",
    "start": "1630140",
    "end": "1635300"
  },
  {
    "text": "one of the last barriers of AI and of all these \ntools will be the highly social aspect of this  ",
    "start": "1635300",
    "end": "1641420"
  },
  {
    "text": "because it doesn't...you can't code yourself out \nof that situation where two humans tried to share  ",
    "start": "1641420",
    "end": "1648380"
  },
  {
    "text": "some sentiment or some emotion in some way.\n   And I think code is the same. Code is \ntrying to model some part of reality  ",
    "start": "1648380",
    "end": "1657260"
  },
  {
    "text": "in a language that both the computer can \nunderstand and then humans can work with.  ",
    "start": "1657260",
    "end": "1662540"
  },
  {
    "text": "We have to take it down to the lowest common \ndenominator of computer and human. Maybe you could  ",
    "start": "1663500",
    "end": "1669260"
  },
  {
    "text": "think of AI as sort of removing the human part of \nthat equation and the lowest denominator is now   just a bunch of random if statements and weights \non neural nodes, I don't know, something like  ",
    "start": "1669260",
    "end": "1679640"
  },
  {
    "text": "that. But for most programmers, they still work \nin a lowest common denominator between human and  ",
    "start": "1679640",
    "end": "1685640"
  },
  {
    "text": "computer. That means you need a human to go in and \nexplain some of the intentions to the other humans   or themselves later with good naming and with good \nstructure in the code and a good architecture that  ",
    "start": "1685640",
    "end": "1697159"
  },
  {
    "text": "makes errors harder to make instead of...you \nknow? And that communicates an intention   behind some of the things, \"Why are these things \ngrouped? Why are they not grouped?\" More likely. ",
    "start": "1697160",
    "end": "1706520"
  },
  {
    "text": " \nAnd that notion...again, going   back to the sensing of the code, these things want \nto be grouped. Sometimes you kind of look at stuff  ",
    "start": "1707660",
    "end": "1715520"
  },
  {
    "text": "and you'd start looking at things and you go...you \nmove things around, and it's very much, \"These   clearly want to be together,\" or, \"These clearly \ndon't belong together,\" whichever conclusion we  ",
    "start": "1715520",
    "end": "1724040"
  },
  {
    "text": "reach about whatever we're talking about and \nsensing our way through it. There's a lot here  ",
    "start": "1724040",
    "end": "1730460"
  },
  {
    "text": "very much about this idea that the workflow is not \nsimply a mechanical thing, it's a cognitive thing,  ",
    "start": "1730460",
    "end": "1737299"
  },
  {
    "text": "it's a message between people.\n   And there are a number of points in the book, you \nare kind of keen to emphasize,, \"Hey, I want to  ",
    "start": "1737300",
    "end": "1744919"
  },
  {
    "text": "pay a programmer or ensemble a program on this.\" \nAnd although that's not what the book is about,   it connects really strongly to that, which it kind \nof suggests, again, that the refactoring message  ",
    "start": "1744920",
    "end": "1757400"
  },
  {
    "text": "is very much about our collective understanding \nand refining. It's not just for the runtime of  ",
    "start": "1757400",
    "end": "1764720"
  },
  {
    "text": "the code. The idea is that collectively \nas a team, we are learning what's there. ",
    "start": "1764720",
    "end": "1769520"
  },
  {
    "text": " \nYou're   modeling the domain and you'll learn more about \nthe domain and you'll learn more about computers   with most projects also, apparently. It's like \nthings always fail in new and interesting ways  ",
    "start": "1770720",
    "end": "1780980"
  },
  {
    "text": "as you also famously mentioned a lot of times. And \nrevealing new structure, either about sort of the  ",
    "start": "1780980",
    "end": "1789200"
  },
  {
    "text": "language or the thing you're implementing the \nmodel in or something new about your model that   you didn't anticipate. We're learning constantly. \nThe trick is...I think refactoring to me is a lot  ",
    "start": "1789200",
    "end": "1801260"
  },
  {
    "text": "like deformatting your computer, right? If you \njust learn stuff all the time, you put all these  ",
    "start": "1801260",
    "end": "1807140"
  },
  {
    "text": "little pieces back-to-back in your head, and then \nsometimes you invalidate some learning and you  ",
    "start": "1807140",
    "end": "1812540"
  },
  {
    "text": "forget something. You create all these holes. \nSometimes you need to go in and just collect  ",
    "start": "1812540",
    "end": "1818180"
  },
  {
    "text": "all of it, tie a nice bow around it, and be like, \n\"Okay, this is the current truth.\" You're removing  ",
    "start": "1818180",
    "end": "1824480"
  },
  {
    "text": "all this gunk and you're making it nice again. \nIt will invalidate over time, all software does. ",
    "start": "1824480",
    "end": "1830419"
  },
  {
    "text": "And I think, again, the idea that this is ongoing, \nagain, just to fit back to a smaller detail, is  ",
    "start": "1832220",
    "end": "1840860"
  },
  {
    "text": "very much...as you're talking about with copying, \nit's a transient state. It's just like, \"It's  ",
    "start": "1840860",
    "end": "1846440"
  },
  {
    "text": "fine not to have this little bit of duplication \nhere, it's a temporary measure.\" Everything is   about change and the idea that you're not \ngoing to reach a final state unless until  ",
    "start": "1846440",
    "end": "1855980"
  },
  {
    "text": "somebody decommissioned the software, there is \nno final state. You will naturally always end up  ",
    "start": "1855980",
    "end": "1861260"
  },
  {
    "text": "in the flow. There will always be some bad code, \nbut that doesn't mean there can't be better code.   There will always be some duplicate code and some \nof that will be accidental, but some of it will  ",
    "start": "1861260",
    "end": "1869480"
  },
  {
    "text": "be quite intentional.\n   It's just like, \"This is only a duplicate \nfor a moment, this is fine.\" We're on route,  ",
    "start": "1869480",
    "end": "1875539"
  },
  {
    "text": "that's absolutely fine, that this state of change \nis a normal thing. You're not actually looking for  ",
    "start": "1875540",
    "end": "1880880"
  },
  {
    "text": "a...in fact, this book is very much the opposite \nof books that I certainly read 30 years ago,  ",
    "start": "1881900",
    "end": "1886220"
  },
  {
    "text": "looking back to kind of like the earlier \ndesign books, which were very much about,   \"Okay, we're going to reach a state of \nperfection before we've even built it.  ",
    "start": "1887600",
    "end": "1894440"
  },
  {
    "text": "\"The book goes the opposite way. It's very much \nembracing the idea of like, \" Stuff happens,  ",
    "start": "1895640",
    "end": "1901460"
  },
  {
    "text": "and not only that, but it continues to \nhappen and you won't stop it happening.   Here's how to ride the wave rather \nthan pretend there are no waves.\" ",
    "start": "1901460",
    "end": "1909020"
  },
  {
    "text": " \nAnd I actually write my   own code and build my own systems in that way too \nwhere the most recent code, I just write it one  ",
    "start": "1909740",
    "end": "1917179"
  },
  {
    "text": "pass without thinking about it. No nice styles, \nno design patterns, just get it out any way you   can make it work, put it into production, see what \nhappens to it, how it's used if it's used at all.  ",
    "start": "1917180",
    "end": "1927680"
  },
  {
    "text": "If it's not used at all, it's easy, delete it. If \nit's used, then you can go back and fix it? Once  ",
    "start": "1927680",
    "end": "1933980"
  },
  {
    "text": "you have some experience about, \"What changes did \nI need to make?\" Like, when you do something new,  ",
    "start": "1933980",
    "end": "1939440"
  },
  {
    "text": "you have no idea what the structure should be \nof that thing. You can do sort of guests and  ",
    "start": "1939440",
    "end": "1944659"
  },
  {
    "text": "you can sort of do these things. But for most of \nus, those guesses are not great. And whenever it  ",
    "start": "1944660",
    "end": "1950120"
  },
  {
    "text": "meets real users, it's going to have to change \nin some weird ways. Communication is hard.",
    "start": "1950120",
    "end": "1957680"
  },
  {
    "start": "1958000",
    "end": "2107000"
  },
  {
    "text": "You've highlighted a number of cases, that kind \nof DevOps mantra, \"If something is hard, do more  ",
    "start": "1960680",
    "end": "1969440"
  },
  {
    "text": "of it, do it more frequently.\" And that, I think, \nprobably applies to communication. I think perhaps  ",
    "start": "1969440",
    "end": "1975440"
  },
  {
    "text": "in software development, we become very \ngood at erecting barriers to communication,   whereas your book is very much about, \"No, \nlet's do more of this.\" It's not simply about  ",
    "start": "1976880",
    "end": "1985460"
  },
  {
    "text": "refactoring and touching the code, it's this \nidea of, \"Whether it's naming or structuring  ",
    "start": "1986060",
    "end": "1992900"
  },
  {
    "text": "or articulating what the goal of a piece of \ncode is, that's hard, therefore, do it more.\" ",
    "start": "1992900",
    "end": "1998300"
  },
  {
    "text": " \nFor the longest time, while I've been a DevOps   consultant, I used to explain it to executives \nand management, DevOps is a commitment that  ",
    "start": "1998300",
    "end": "2009640"
  },
  {
    "text": "whenever you have a problem, your first thing is \nto ask, \"Which two people or multiple people can  ",
    "start": "2009640",
    "end": "2015160"
  },
  {
    "text": "I put in the same room so this problem will just \ngo away?\" Because whenever people get together,   they solve problems. Like, that's our entire job \nis solving problems. If you have all of the right  ",
    "start": "2015160",
    "end": "2025180"
  },
  {
    "text": "access code you need and, all the right skills and \ncompetencies and you're allowed to explore this  ",
    "start": "2025180",
    "end": "2032620"
  },
  {
    "text": "thing and to go to another team and say, \"Hi, we \nneed someone in the room right now,\" you're gonna  ",
    "start": "2032620",
    "end": "2038020"
  },
  {
    "text": "solve all the problems.\n   The worst debugging tasks I've ever had were \nthe ones where I was told, \"Something in this  ",
    "start": "2038020",
    "end": "2044980"
  },
  {
    "text": "code doesn't work,\" and I'm like, \"Okay, \nwho reported it?\" \"Some user.\" \"Okay, well,   it has to do with the database and an integration \nto a third-party thing, can I get...like,  ",
    "start": "2044980",
    "end": "2053500"
  },
  {
    "text": "I need some people from there.\" \"No, you can't \ninterrupt those, those are busy.\" And I'm like,  ",
    "start": "2053500",
    "end": "2057700"
  },
  {
    "text": "\"Perhaps, but, like, it's gonna take me 10 \ntimes as long if I have to go and ask them   each question instead of just sitting in the same \nroom and take 10 minutes and then we're done.\"",
    "start": "2059140",
    "end": "2066940"
  },
  {
    "text": "Again, it's a communication thing. It's the \nbringing people together thing and, having people  ",
    "start": "2069220",
    "end": "2077980"
  },
  {
    "text": "understand that that's actually what drives this. \nIt's this really strong kind of human element. But  ",
    "start": "2077980",
    "end": "2085300"
  },
  {
    "text": "I think one of the recognitions of the \nhuman element, and you highlight it   in the book, is this idea of \nit's not enough. And actually,  ",
    "start": "2085960",
    "end": "2095080"
  },
  {
    "text": "you highlight it in the talk as well in GOTO \nCopenhagen last year. This idea that you can't  ",
    "start": "2095080",
    "end": "2100600"
  },
  {
    "text": "simply present people...although you have \na series of rules, you've distilled it down   to a series of rules, it's not simply \nenough to present people with these.",
    "start": "2100600",
    "end": "2107080"
  },
  {
    "start": "2107000",
    "end": "2348000"
  },
  {
    "text": "Otherwise, this problem would have been solved \nand we'd all just be sitting there and be like,   \"Read Martin Fowler's refactoring book, and \nthat's it, that's everything you need to know.  ",
    "start": "2107080",
    "end": "2114220"
  },
  {
    "text": "Here is information, here are facts, go forward \nand create good systems.\" Just as providing  ",
    "start": "2114220",
    "end": "2123340"
  },
  {
    "text": "everybody with automated refactoring, again, \nthat doesn't seem to move the needle far enough.  ",
    "start": "2123340",
    "end": "2128200"
  },
  {
    "text": "How did you come to realize because you have \na background and outlook that is, I think,  ",
    "start": "2129760",
    "end": "2135760"
  },
  {
    "text": "in some ways, very similar to mine and other \ndevelopers that it's a case of there's a little   rational view that says, \"All I need is the right \ninformation and suddenly everything will work.\" ",
    "start": "2135760",
    "end": "2144580"
  },
  {
    "text": "And then one day, you hit a wall or a series of \nwalls and you go, \"Wait a minute, everybody has  ",
    "start": "2144580",
    "end": "2151600"
  },
  {
    "text": "the information they need, we've said this, why \ndo we still have the problem? Perhaps we're not  ",
    "start": "2151600",
    "end": "2156880"
  },
  {
    "text": "as rational as we thought we were.\" What's your \njourney been on this one? Because I think that's   one of the really interesting ones because I think \nthat was ultimately the cause of writing the book,  ",
    "start": "2156880",
    "end": "2164260"
  },
  {
    "text": "wasn't it?\n   Christian Clausen:It comes from this. I've \nalways tried to follow these strict guides  ",
    "start": "2164260",
    "end": "2170920"
  },
  {
    "text": "or guidelines and stuff as if they were \nrules. Like the smells and stuff like that,   try to really internalize and be like, \"Okay, \nwhat is the actual truth?\" I'm really into  ",
    "start": "2170920",
    "end": "2180100"
  },
  {
    "text": "distilling things into these little tiny pieces \nof information that are super deep and condensed,  ",
    "start": "2180100",
    "end": "2185860"
  },
  {
    "text": "and then you need weeks to sort of understand \nor sometimes years. And I was thinking about  ",
    "start": "2185860",
    "end": "2191140"
  },
  {
    "text": "this thing, \"Why do we always come up with \nthese bad names and all these horrible things?  ",
    "start": "2191140",
    "end": "2196299"
  },
  {
    "text": "And code always seems to tend to get more \nand more dilute over time?\" And eventually,  ",
    "start": "2198220",
    "end": "2204940"
  },
  {
    "text": "I started realizing this thing, it's because we \ntried to try to unify things too early and stuff. ",
    "start": "2204940",
    "end": "2210160"
  },
  {
    "text": "And that gives all of these bad namings we've \ntalked about, it gives this abstraction...it  ",
    "start": "2210160",
    "end": "2214780"
  },
  {
    "text": "makes everything sort of a flat hierarchy, where \nyou have one file with a main method that calls   another method, and then it's just big methods \none after the other in some large sequence or  ",
    "start": "2215800",
    "end": "2225940"
  },
  {
    "text": "sometimes packed into a loop or two. But the \ncontrol flow is entirely obscured through this,  ",
    "start": "2225940",
    "end": "2232119"
  },
  {
    "text": "I don't know, attempt to unify everything \nimmediately, and do the right thing the first  ",
    "start": "2232720",
    "end": "2238720"
  },
  {
    "text": "time. And whenever we do that and try to take a \ntoo-big bite, it's just like, \"This doesn't work.\"  ",
    "start": "2238720",
    "end": "2244480"
  },
  {
    "text": "And then at university, I learned functional \nprogramming and I was like, \"This is amazing,   I do the opposite of what I would do in an \nOO language because I make these tiny little  ",
    "start": "2245140",
    "end": "2254319"
  },
  {
    "text": "functions that are just a few lines big,\" right?\n One match and then a recursive call and you have   those recursives or most functional methods \nare just like that, and then you just compose  ",
    "start": "2254320",
    "end": "2265119"
  },
  {
    "text": "them together in some weird chain and you're like, \n\"Here it is, your program is just the composition  ",
    "start": "2265120",
    "end": "2270580"
  },
  {
    "text": "of these five standard library things, so it would \nbe an Haskell.\" It's such a weird style and it has  ",
    "start": "2270580",
    "end": "2280420"
  },
  {
    "text": "all of these weird effects, and I was like, \"Why \ndoes functional programming not have errors in it  ",
    "start": "2280420",
    "end": "2286839"
  },
  {
    "text": "when the same program written in OO would have \na bunch of errors in it?\" And just reflecting  ",
    "start": "2286840",
    "end": "2292720"
  },
  {
    "text": "over this, \"What is the difference? And if we know \nthat functional programming has fewer errors and  ",
    "start": "2292720",
    "end": "2297960"
  },
  {
    "text": "is not, like, significantly slower anymore, why do \npeople not use it? Like, what's the reason people  ",
    "start": "2297960",
    "end": "2304660"
  },
  {
    "text": "haven't switched?\" And I find, again, of course, \nthere are some mental barriers there, you have to   learn a lot of stuff for functional programming.\n  ",
    "start": "2304660",
    "end": "2311319"
  },
  {
    "text": "It seems a lot of people have tried to move \npeople towards a more functional style and   try to explain, \"Here's FP for OO people, \nand here's these things,\" really good books,  ",
    "start": "2311320",
    "end": "2320619"
  },
  {
    "text": "also really good blog posts, it just \nhasn't moved the needle, as you say. It's  ",
    "start": "2320620",
    "end": "2324820"
  },
  {
    "text": "hard to figure out.I started thinking, \"How \ncan I get the same advantages that I would   in a functional language in OO and then, started \ngetting these?\" That's sort of my design principle  ",
    "start": "2327640",
    "end": "2337599"
  },
  {
    "text": "is, \"How would I write this in functional \nprogramming? How would it not be vulnerable   to the same things?\" Or, \"Why is it not vulnerable \nand can I sort of replicate that or simulate it?\"",
    "start": "2337600",
    "end": "2347560"
  },
  {
    "text": "In the book, you use TypeScript, and you very much \nkind of focus on resolving in the object dimension  ",
    "start": "2347560",
    "end": "2357880"
  },
  {
    "start": "2348000",
    "end": "2924000"
  },
  {
    "text": "through the use of classes and interfaces, many \nof the things, depending on the language. But  ",
    "start": "2357880",
    "end": "2366640"
  },
  {
    "text": "as you mentioned, Haskell, many people in the \nfunctional space would more naturally revert to  ",
    "start": "2366640",
    "end": "2371740"
  },
  {
    "text": "a pattern-matched approach perhaps to resolve that \nrather than, say, kind of inclusion polymorphism.  ",
    "start": "2371740",
    "end": "2377200"
  },
  {
    "text": "But you mentioned in a few places, I noticed, in \nthe book of not just the discussion on getters  ",
    "start": "2379480",
    "end": "2384820"
  },
  {
    "text": "and setters, but you talked about reducing \nmutability. You don't lay it on too heavily,  ",
    "start": "2384820",
    "end": "2390640"
  },
  {
    "text": "but I kind of noticed that. I was reading the book \nand go, \"Good, I was hoping this would appear.\" ",
    "start": "2390640",
    "end": "2395799"
  },
  {
    "text": "But you don't push it too far, and it was just \nlike that idea of the FP message that you've got  ",
    "start": "2396820",
    "end": "2401860"
  },
  {
    "text": "there. Certainly, the most obvious thing is \nreducing a lot of the explicit control flow  ",
    "start": "2401860",
    "end": "2408280"
  },
  {
    "text": "machinery that we find in code. That's something \nthat, you have to run a mental program counter and  ",
    "start": "2408820",
    "end": "2415060"
  },
  {
    "text": "set of registers in your head for. But also, the \nshort functions. Hence, I guess, the title of the  ",
    "start": "2415060",
    "end": "2421300"
  },
  {
    "text": "book, \"Five Lines of Code.\" One of the ways that \nthings work is when there's more. There's that  ",
    "start": "2421300",
    "end": "2428500"
  },
  {
    "text": "kind of emphasis there, although you hold off, \nI noticed in the book, on...I think for a lot of  ",
    "start": "2428500",
    "end": "2434440"
  },
  {
    "text": "JavaScript and TypeScript people, they would \nprobably be throwing lambdas all over the place.   But you hold back on that, even that. I understand \nyour rationale, but perhaps you could kind of make  ",
    "start": "2434440",
    "end": "2446500"
  },
  {
    "text": "that clear to the listeners.\n   Christian Clausen:Again, as you said earlier also, \nit's about finding a common ground with as many  ",
    "start": "2446500",
    "end": "2453580"
  },
  {
    "text": "people as possible. I don't want to be scary in \nany way. And as I said, if you feel comfortable   with it, feel free to do all of these things, \nthat's fine. I also note in the final chapter that  ",
    "start": "2453580",
    "end": "2465580"
  },
  {
    "text": "a lot of the objects that we've created could be \nreplaced by a lambda, and then you'd save a little   bit of space because you don't need the interface \nto be implicit in the signature of the parameter  ",
    "start": "2465580",
    "end": "2476079"
  },
  {
    "text": "or something like that. That's fine, I don't mind. \nBut to me, it doesn't actually change anything  ",
    "start": "2476080",
    "end": "2481480"
  },
  {
    "text": "whether you use lambdas or objects.\n   When you become fluent in the style where , you're \npushing things around, you're making things small,  ",
    "start": "2481480",
    "end": "2489220"
  },
  {
    "text": "and you're localizing the invariants, you're \nsort of hiding away stuff that doesn't need   to be there. I would say one of the bigger steps \ntowards FP that I took in the book is eliminate  ",
    "start": "2489220",
    "end": "2500200"
  },
  {
    "text": "all the getters and setters. That is a big step \ntowards functional programming for people used  ",
    "start": "2500200",
    "end": "2506079"
  },
  {
    "text": "to OO. And I remember being super confused by \ngetters and setters when I heard about it for the   first time in introductory programming. It was \nlike, \"So you have to use these field variables  ",
    "start": "2506080",
    "end": "2515019"
  },
  {
    "text": "and you have to make them private.\" I'm like, \n\"I need to change them.\" \"Well, easy, then you   just make these public getters and setters.\"\nAnd I'm like, \"Why did I make it private then?  ",
    "start": "2515020",
    "end": "2523299"
  },
  {
    "text": "What's the point?\" And obviously, the historical \npoint is that you can change the getters and  ",
    "start": "2523300",
    "end": "2529840"
  },
  {
    "text": "setters, and then you can change the internal \nstructure, and then the getters and setters would   pick that up, right? And they would sort of hide \nor abstract away the changes, and they would still  ",
    "start": "2529840",
    "end": "2539800"
  },
  {
    "text": "be invariant under change. But what happens in \npractice is people make new getters and setters,  ",
    "start": "2539800",
    "end": "2544960"
  },
  {
    "text": "right? And then they propagate the change out. \nThen, there's no point in doing getters and   setters. Like, there's a complete misunderstanding \nor misuse of the whole concept of... ",
    "start": "2544960",
    "end": "2555580"
  },
  {
    "text": " \nFor me, that's the thing, and   I get that conversation with many people and when \nthey make a complaint about object orientation,  ",
    "start": "2555580",
    "end": "2563320"
  },
  {
    "text": "they talk about the getters and setters. I said, \n\"Well, that's not really object orientation. What   do you think object orientation is about?\" \nI was dealing with a group this morning and  ",
    "start": "2563320",
    "end": "2570640"
  },
  {
    "text": "it was just like they had public data and all \nthe rest of it, they had the class keyword in   there. But if that's what you think objects are, \nI understand your pain. I can see where your pain  ",
    "start": "2570640",
    "end": "2580369"
  },
  {
    "text": "is coming from. Object orientation was never about \ngetters and setters. Getters and setters is what,   if you like, the procedural people did when they \ngot to objects. They said, \"I don't understand  ",
    "start": "2580370",
    "end": "2589480"
  },
  {
    "text": "objects. Tell you what? I'm going to make \nit much more like just, standard records and  ",
    "start": "2589480",
    "end": "2594580"
  },
  {
    "text": "structs that I find in Pascal and C. And there \nwe go, fine, getters and setters, we're done.\" ",
    "start": "2594580",
    "end": "2599200"
  },
  {
    "text": "That's a massively oversimplified history, but \nit feels like the deeper idea of distributing  ",
    "start": "2600100",
    "end": "2608140"
  },
  {
    "text": "your behavior across a group of entities that \nkind of know what they're doing and do it well   and keep it small. That small message, I mean, \nliterally small talk, the word small is in there,  ",
    "start": "2608140",
    "end": "2617740"
  },
  {
    "text": "was kind of part of the original idea. And a lot \nof the original OO books were very clear on this,   but that message got lost. It feels to me like \nyour book is trying to reclaim that territory.  ",
    "start": "2617740",
    "end": "2626800"
  },
  {
    "text": "But without sort of saying, \"Hey, I went via the \nfunctional route to kind of learn the lesson of  ",
    "start": "2626800",
    "end": "2633040"
  },
  {
    "text": "smallness,\" it's just like, \"Hey, small is \nits own virtue in this case.\" If you can put   it in your head, if you can understand it, \nyou can change it and you can work with it. ",
    "start": "2633040",
    "end": "2642760"
  },
  {
    "text": " \nChristian Clausen:  I’m actually   inspired by one of your talks where you talk \nabout testing and structure of your test cases,  ",
    "start": "2642760",
    "end": "2650320"
  },
  {
    "text": "and how test naming should be, that you have all \nthese great points. The test naming doesn't need   to be short because you only never call them \nactually, they're just used for communicating  ",
    "start": "2650320",
    "end": "2660760"
  },
  {
    "text": "to the programmer. Make them long, and then \nmake them something descriptive. And then   you have this thing where you notice that two or \nmultiple of your tests start with the same thing,  ",
    "start": "2660760",
    "end": "2669520"
  },
  {
    "text": "and then you just use that thing as they're \ndescribed for that portion as a suite name so  ",
    "start": "2669520",
    "end": "2674740"
  },
  {
    "text": "to speak. I'm like, \"That's exactly it,\" and that \nsort of what inspired Chapter 6, I think it is,  ",
    "start": "2674740",
    "end": "2680680"
  },
  {
    "text": "where we do the thing where I say, \"Don't have \ncommon prefixes and suffixes, they should be an   outer sort of packaging thing for this thing, and \nthen do the same thing for packages after you've  ",
    "start": "2680680",
    "end": "2689619"
  },
  {
    "text": "done it for methods, classes, and packages.\" \n   In fact, use that duplication as a driver for, \n\"Oh, there's a commonality here, I should move it  ",
    "start": "2689620",
    "end": "2697060"
  },
  {
    "text": "to the next level, I should move it out.\"\n   Christian Clausen:Exactly. These are more related \nthan the rest of the things in this file. I can  ",
    "start": "2697060",
    "end": "2703000"
  },
  {
    "text": "make that relation more explicit to the compiler \nby making it a class because it understands class,  ",
    "start": "2703000",
    "end": "2708580"
  },
  {
    "text": "it doesn't understand method names.\n   And that point, it also relates interesting \nenough, that idea of trying to make things  ",
    "start": "2708580",
    "end": "2716619"
  },
  {
    "text": "more visible. I really like the bit where \nyou're talking about, \"Make bad code look bad.\"  ",
    "start": "2716620",
    "end": "2723640"
  },
  {
    "text": "I like this because this is something \nthat I've often talked about in the past.  ",
    "start": "2726760",
    "end": "2731680"
  },
  {
    "text": "But I've never made it perhaps as explicit \nbut the idea of like...I remember talking  ",
    "start": "2732520",
    "end": "2738520"
  },
  {
    "text": "to somebody about both IDEs but also \nhow they wrap something up. And I said,   \"I don't want this to look nice because \nit's really ugly and I want to know that  ",
    "start": "2738520",
    "end": "2747340"
  },
  {
    "text": "it's a problem and I want to make sure that \nI see that it's a problem, and then one day,   I or somebody else will recognize I understand \nwhat's going on here.\" There is a simple solution,  ",
    "start": "2747340",
    "end": "2756280"
  },
  {
    "text": "but it's not hiding it under the carpet.\nThe idea of ‘make the bad code look bad’ so   that you can obviously see that there is something \nthat wants to be done. I don't mean  you make it  ",
    "start": "2756280",
    "end": "2766840"
  },
  {
    "text": "very clear in the book, you're not trying to \ntrash a piece of code and go like, \" I'm just   gonna make a complete mess of it.\" But something \nthat is not satisfactory that is clearly a long  ",
    "start": "2766840",
    "end": "2776260"
  },
  {
    "text": "way from where it wants to be, but you don't yet \nrecognize or have the opportunity to improve it.   You go like, \" I don't want this thing to look \npretty, I want it to stand out for what it is,  ",
    "start": "2776260",
    "end": "2785980"
  },
  {
    "text": "and then the more obvious we can make \nit, perhaps somebody will pick it up.\"    ",
    "start": "2785980",
    "end": "2791319"
  },
  {
    "text": "A lot of the things as I hope is evident in the \nbook are about making things more immediately  ",
    "start": "2791320",
    "end": "2796780"
  },
  {
    "text": "visible. I should be able to look at the code \nand know that it's wrong or know that it's good,   without having to think. If I have to start up \nmy cognitive processes, I'm not going to do it.  ",
    "start": "2796780",
    "end": "2806200"
  },
  {
    "text": "I'm especially not going to do it because I'm \nsuper busy with the 30 other tasks that are on   the backlog that we'll never even get to. I need \nto be able to, like, just look at it and be like,  ",
    "start": "2806200",
    "end": "2815440"
  },
  {
    "text": "\"Oh, this is better, this is good.\" And it also \nhelps prevent this gradual slide over time where  ",
    "start": "2815440",
    "end": "2820960"
  },
  {
    "text": "the code just gets...you admit a little bit worse \nand worse and you put some bad code here because   you're super busy, you're fixing something \nin production, you didn't really come back to  ",
    "start": "2820960",
    "end": "2828460"
  },
  {
    "text": "fix it. Maybe that's the new standard now, right? \nAnd then the code just slowly degrades over time.   \nAnd I'm saying put a trench there,  ",
    "start": "2828460",
    "end": "2835420"
  },
  {
    "text": "right? Have this code that's really bad and \nthe code that's decent, and don't make them   mix. And so, as you say, to put little things \nthat make yourself or the other programmers,  ",
    "start": "2835420",
    "end": "2845860"
  },
  {
    "text": "like, instead of putting math.pi, put the actual \nnumber pi, because immediately, you'll be like,  ",
    "start": "2845860",
    "end": "2851620"
  },
  {
    "text": "\"Why is this number here?\" It'll catch your eye \nimmediately, \"Oh, it's to signal that the rest  ",
    "start": "2851620",
    "end": "2856840"
  },
  {
    "text": "of this thing is probably also bad.\" But it's \neasier to see it now, it's easier to spot it.   I just read a really interesting article from \n\"Harvard Business Review,\" where they're like,  ",
    "start": "2856840",
    "end": "2865540"
  },
  {
    "text": "\"The cognitive thing of the environment around \nyou shapes how you make decisions,\" and then like,   \"Put bad things further away and then bring \ngood things closer.\" And I'm like, \"That's sort  ",
    "start": "2866260",
    "end": "2876220"
  },
  {
    "text": "of the point I was also trying to make, make it \nfeel annoying so you'll do something about it.\" ",
    "start": "2876220",
    "end": "2881380"
  },
  {
    "text": "I read the very same article. It's a good one. \nBut it is that idea of making a distinction and  ",
    "start": "2884020",
    "end": "2889900"
  },
  {
    "text": "that idea of separation, and as you say, actually, \nadding a trench so that you don't get one mixing  ",
    "start": "2889900",
    "end": "2896200"
  },
  {
    "text": "with the other so that you can advance that over \ntime. But also, you have a clear idea, this is  ",
    "start": "2896200",
    "end": "2901060"
  },
  {
    "text": "the geography of the code because where you stand. \nLiterally, you're looking at this and you go like,   \"Okay, I understand this code is less mature \nthan the code over there that I was working  ",
    "start": "2902080",
    "end": "2910180"
  },
  {
    "text": "on this morning.\" But I understand that and \nit's a conscious thing that I'm aware of and   I can see the opportunities for improvement, \n\"Perhaps this is where we move to next,\" or  ",
    "start": "2910180",
    "end": "2917920"
  },
  {
    "text": "I treat it in a different way and there's \na very kind of situational aspect to that.",
    "start": "2917920",
    "end": "2923740"
  },
  {
    "start": "2924000",
    "end": "3392000"
  },
  {
    "text": "But I want to draw you back to something \nelse because you kind of mentioned it a   couple of times and I think it's quite important \nbecause, again, this is something that I noticed.  ",
    "start": "2924700",
    "end": "2932080"
  },
  {
    "text": "You emphasize invariance a lot and you \nactually did so very early on in the book.  ",
    "start": "2933520",
    "end": "2941440"
  },
  {
    "text": "The idea of an invariant is something that I \nthink perhaps people who have studied logic or  ",
    "start": "2944860",
    "end": "2950200"
  },
  {
    "text": "are very familiar with, say, programming \nby contract, programming proofs, and  ",
    "start": "2950200",
    "end": "2955540"
  },
  {
    "text": "certainly, functional programming, there's this \nidea of an invariant, which doesn't get talked  ",
    "start": "2958660",
    "end": "2964780"
  },
  {
    "text": "about enough in the mainstream. I kind of liked \nthat you talk about it and make it first class. ",
    "start": "2964780",
    "end": "2970600"
  },
  {
    "text": " \nChristian Clausen:It's very central. I think,   actually, it's the first thing I actually say \nafter the introductory chapter is, \"This is what  ",
    "start": "2970600",
    "end": "2978880"
  },
  {
    "text": "an invariant is, this is what it's all about. It's \nabout the things that I can keep in my head and   I can know about the code, but I haven't checked \nthem explicitly in the code or in the type system  ",
    "start": "2978880",
    "end": "2989320"
  },
  {
    "text": "or tests are something like that.\" It's something \nI have to remember and I have to keep track of,   which is why, of course, it's the source of most \nproblems is because I lose track of these things.  ",
    "start": "2989320",
    "end": "2999099"
  },
  {
    "text": "I'm a human and I'm fallible, so I forget \nthings over time and I misunderstand things,  ",
    "start": "2999820",
    "end": "3005040"
  },
  {
    "text": "and again, if you mix communication in, I \nalso miscommunicate them to other people.   \nIt's like I may know that  ",
    "start": "3005040",
    "end": "3010740"
  },
  {
    "text": "this thing can happen, but then I might forget \nto say it to the other guy because I'm thinking,   \"Reasonably, he won't do it.\" But when you do \nthat, just six months, let's say, in a row,  ",
    "start": "3010740",
    "end": "3021420"
  },
  {
    "text": "all these things start breaking down, falling \napart. And I think also, perhaps it was you who  ",
    "start": "3021420",
    "end": "3029460"
  },
  {
    "text": "said that assumptions are like Legos, you don't \nknow they're there until you step on them.\" Same   thing with invariants. \n  ",
    "start": "3029460",
    "end": "3036060"
  },
  {
    "text": "In fact, that's what I was thinking. The way \nyou describe invariants...because normally,   people open with a formal description, but I \nlike that idea of like, \"It's the stuff that  ",
    "start": "3036060",
    "end": "3044880"
  },
  {
    "text": "I know that I haven't told the compiler, it's \nnot sitting in the code in code form.\" Maybe   somebody put it in a comment but  guess what? We \ndon't read those and neither does the compiler.  ",
    "start": "3044880",
    "end": "3054120"
  },
  {
    "text": "It's the things that we know or assume and those \nassumptions get lost, and other people also have  ",
    "start": "3054840",
    "end": "3062100"
  },
  {
    "text": "different assumptions and all it takes is \na collision of assumptions to get a bug.   This tells us, again, another place where bugs \ncome from, but I think it's a very important one. ",
    "start": "3062100",
    "end": "3071130"
  },
  {
    "text": " \nAnd I liked that it was presented in a way that   is non-threatening, non-formal because I guess I \ntend to think about them in very formal ways. If  ",
    "start": "3071130",
    "end": "3079500"
  },
  {
    "text": "somebody asked me what is that, I probably start \nfrom a formal perspective. I don't think I've  ",
    "start": "3079500",
    "end": "3084900"
  },
  {
    "text": "come up with anything that was quite as direct \nas basically saying, \"Hey, stuff I know that I   haven't told the compiler,\" is a very simple way \nof...kind of, again, it goes back to this idea  ",
    "start": "3084900",
    "end": "3094740"
  },
  {
    "text": "of distributing the knowledge and it goes back \nto communication. That's a piece of knowledge   that remains within my head, but it doesn't \nflow out to my fingertips into the keyboard  ",
    "start": "3094740",
    "end": "3102300"
  },
  {
    "text": "to be shared with other people necessarily. \nAnd that becomes a really important idea  ",
    "start": "3102300",
    "end": "3108000"
  },
  {
    "text": "and that's how we build, that's how we \nbuild this stuff. We either build through   invariants or we build through assumptions, and \nI think the first one sounds a little safer. ",
    "start": "3108960",
    "end": "3117060"
  },
  {
    "text": " \nI remember reading Dijkstra's book,   \"A Discipline of Programming\" back when I was at \nuniversity, and it was so hard to get a foothold,  ",
    "start": "3117900",
    "end": "3127680"
  },
  {
    "text": "and when you said like, \"What is an invariant? \nWhat's the least precondition we can have here?\"   And it's like, oh, God, the formal definition of \nthese things and the way that he pulls them up  ",
    "start": "3127680",
    "end": "3137820"
  },
  {
    "text": "through the method as if it's something \nnatural to do, but it's so hard to do.  ",
    "start": "3137820",
    "end": "3142260"
  },
  {
    "text": "And that's sort of what I'm...like, I'm trying \nto bring it back down to earth and be like,   \"You know it intuitively, like, \nwhat it is that about the code, just  ",
    "start": "3143640",
    "end": "3151320"
  },
  {
    "text": "make them explicit or at least limit their \nscope.\" Right? So that you encapsulate these  ",
    "start": "3151860",
    "end": "3158280"
  },
  {
    "text": "things. They're almost always tied to some \ndata in some way. Just encapsulate the data  ",
    "start": "3158280",
    "end": "3163620"
  },
  {
    "text": "and make sure that at least it's in this file \nso it's more likely you'll spot the same thing.   \nAnd actually, the common  ",
    "start": "3163620",
    "end": "3168840"
  },
  {
    "text": "thing you mentioned is also very important, \nthat neither us or the compilers read them.   Because my approach to that, like, the thing \nwith making bad code look better, is to make  ",
    "start": "3168840",
    "end": "3177480"
  },
  {
    "text": "comments much less common. Because then perhaps \nwe can get people to actually read the ones that  ",
    "start": "3177480",
    "end": "3182820"
  },
  {
    "text": "matter and get rid of all the ones that don't, \nagain, trying to hack this cognitive thing. Now,  ",
    "start": "3182820",
    "end": "3189000"
  },
  {
    "text": "if you see a comment and you haven't seen one in \ntwo months, then probably you'll read it. But if  ",
    "start": "3189000",
    "end": "3194220"
  },
  {
    "text": "you see them every day and they're mostly outcome \nof the code or, whatever, you start ignoring them. ",
    "start": "3194220",
    "end": "3199320"
  },
  {
    "text": " \nIt's a value of something one of the   ways we define value is in terms of scarcity, and \nif comments are everywhere, then they're not worth  ",
    "start": "3200040",
    "end": "3209160"
  },
  {
    "text": "much. There's a kind of a currency, there's \nan economics of, if you like, of comments.  ",
    "start": "3209160",
    "end": "3215339"
  },
  {
    "text": "I think that's very true and that a more practical \nway of expressing invariants or dealing with them,  ",
    "start": "3216840",
    "end": "3223440"
  },
  {
    "text": "is this idea of locality, as you say. Because if I \ncan put it in a block, whether that block is tied  ",
    "start": "3224100",
    "end": "3230040"
  },
  {
    "text": "to a class, whether it's tied to a function, then \nI basically say, \"Inside this, there's a bunch of  ",
    "start": "3230040",
    "end": "3237300"
  },
  {
    "text": "truth, and you can see it and it's visible there.\" \nIt's contained in here, it doesn't leak out,  ",
    "start": "3237300",
    "end": "3241380"
  },
  {
    "text": "and then we can manage that.\" I think \nit's perhaps a way that people are not   taught to think about their code or when they \nare...exactly as you say, the Dijkstra example.  ",
    "start": "3242400",
    "end": "3250440"
  },
  {
    "text": "I've read that book, the reader has to put in a \nlot of work. You know? He doesn't say anything  ",
    "start": "3252720",
    "end": "3261900"
  },
  {
    "text": "wrong, but perhaps he doesn't communicate \nin the way that we've been talking about. ",
    "start": "3261900",
    "end": "3266279"
  },
  {
    "text": " \nIt's one of the hardest books I've   read and it's also one of the shortest, so it's \namazing how much is packed into that little thing. ",
    "start": "3267240",
    "end": "3275099"
  },
  {
    "text": " \nI think it's a mercy that it wasn't any longer.  ",
    "start": "3275700",
    "end": "3280680"
  },
  {
    "text": "Picking up on something else that you mentioned. \nYou mentioned about, the cogs of a hack. In some  ",
    "start": "3282480",
    "end": "3288720"
  },
  {
    "text": "ways, there's a lot of that in the way \nthat you describe workflow practices,  ",
    "start": "3288720",
    "end": "3296280"
  },
  {
    "text": "the way that you crystallize various rules, \nthe way that you are, as it were, inviting the  ",
    "start": "3296280",
    "end": "3302400"
  },
  {
    "text": "reader to think about certain things is that...and \nagain obviously, the smoothness of communication  ",
    "start": "3302400",
    "end": "3309059"
  },
  {
    "text": "is important to this, but there's something else \ngoing on here. The idea of you're trying to make   sure that there is an idea that perhaps would \nbe a lesson that would be lost if you made it  ",
    "start": "3310920",
    "end": "3320220"
  },
  {
    "text": "more formal and more complete, that you're trying \nto reduce it to the size that it will slip into   somebody's head, is that an accurate description?\n  ",
    "start": "3320220",
    "end": "3330180"
  },
  {
    "text": "That's exactly right, and I know you're interested \nin linguistics as well. I would talk about myself  ",
    "start": "3330180",
    "end": "3336240"
  },
  {
    "text": "as a descriptive linguist and not a prescriptive \nlinguist. I don't want to tell people what to do,  ",
    "start": "3336240",
    "end": "3342960"
  },
  {
    "text": "I want to observe what are they actually doing \nand how can I take advantage of that. How can  ",
    "start": "3342960",
    "end": "3348180"
  },
  {
    "text": "I sort of make these small things change, and \nthen they'll do the right thing in the end,   right? I want to create...as Woody Zuill \nsays, \"It's not about creating great software,  ",
    "start": "3348180",
    "end": "3357780"
  },
  {
    "text": "it's about creating an environment where great \nsoftware is inevitable.\" And, like, I'm just   trying to hack everything around people so that \nthey'll get where they want to go, but might not  ",
    "start": "3357780",
    "end": "3367620"
  },
  {
    "text": "even know they want to go. As I also see from a \nlot of the people who are critical of the ideas,  ",
    "start": "3367620",
    "end": "3374040"
  },
  {
    "text": "they're like, \"I don't think I want to go there.\" \nIt's like, \"Have you been? Like, it feels nice.  ",
    "start": "3374040",
    "end": "3379800"
  },
  {
    "text": "Maybe you should want to go there.\"\n   That's very much the kind of nudge theory. It kind \nof moves us into that space. When thinking about  ",
    "start": "3380760",
    "end": "3397140"
  },
  {
    "start": "3392000",
    "end": "3708000"
  },
  {
    "text": "all of these things, there are a number of ideas. \nAnd I think, again, this idea of trying to reframe  ",
    "start": "3397140",
    "end": "3404039"
  },
  {
    "text": "things, there's a lot of common ways that we try \nand reframe things for people to make them look at  ",
    "start": "3404040",
    "end": "3410280"
  },
  {
    "text": "code differently. But I was quite like the...you \nmentioned one in the book, a couple of ways of  ",
    "start": "3411000",
    "end": "3420780"
  },
  {
    "text": "looking at things, so I hadn't thought about \nit. First of all, describing the kind of classic   procrastination of waterfall or anything like \nwaterfall as being like coding stage fright. ",
    "start": "3420780",
    "end": "3432060"
  },
  {
    "text": " \nI thought that was a lovely way of putting it,   definitely what I'm going to steal because I \nthink that's just such a lovely way of looking  ",
    "start": "3432060",
    "end": "3438360"
  },
  {
    "text": "at the whole coding stage by deliberately putting \noff the moment of performance as if the moment of  ",
    "start": "3438360",
    "end": "3445380"
  },
  {
    "text": "performance is something that's only going to \nhappen once, as if it's a big deal. And yet,  ",
    "start": "3445380",
    "end": "3451619"
  },
  {
    "text": "we know that code is not something that happens \njust once and that it's as easy to change as it  ",
    "start": "3451620",
    "end": "3458220"
  },
  {
    "text": "is...in fact, it's as easy to change as it \nis to not write it. And yet, we've put so   much effort into not writing it and creating vast, \ncomplex technical stacks, when actually honestly,  ",
    "start": "3458220",
    "end": "3469800"
  },
  {
    "text": "you just need a Hello World at this point. \" But \nwhat about the CI/CD pipeline for this?\" Honestly,   you don't need a pipeline for Hello World.\n  ",
    "start": "3469800",
    "end": "3476280"
  },
  {
    "text": "The idea that if we're not lost  and I think many \npeople would be surprised or shocked by being  ",
    "start": "3476280",
    "end": "3484620"
  },
  {
    "text": "told, \"Hey, this is waterfall thinking,\" \"No, \nno, this is an agile thing.\" It's like, honestly,   you've managed to avoid writing code and creating \nyour technical stack, you've managed to avoid, you  ",
    "start": "3484620",
    "end": "3494220"
  },
  {
    "text": "put off actually doing even the simplest thing, or \neven talking to the product owner or the customer.  ",
    "start": "3494220",
    "end": "3500280"
  },
  {
    "text": "There's clearly a fear somewhere that you \nneed to embrace, which leads to this other  ",
    "start": "3502260",
    "end": "3508380"
  },
  {
    "text": "improv advice that you have in the book, \"Into \nthe danger.\" That's a great way. Do you want   to describe that for listeners? Because I \nthought it was just such a lovely way of  ",
    "start": "3508380",
    "end": "3517140"
  },
  {
    "text": "pulling that one into the book in the context \nof programming, I never thought about that.   \nIt started when I was at university, and I heard  ",
    "start": "3517140",
    "end": "3525180"
  },
  {
    "text": "this fun little joke about functional programmers \nversus object-oriented programmers. And I just   started identifying myself as a functional \nprogrammer, and then there were like, \"An  ",
    "start": "3525720",
    "end": "3533880"
  },
  {
    "text": "object-oriented programmer gets a task, sits down, \nautocompletes the first thousand lines, and then   write the two important lines, and then they're \ndone.\" But a functional programmer, he would get  ",
    "start": "3533880",
    "end": "3543000"
  },
  {
    "text": "this task, he would sit down and he would think \nfor three days, and then he would write down   the two lines, that was the minimal program you \ncould write, and it was perfect, right? It was  ",
    "start": "3543000",
    "end": "3552000"
  },
  {
    "text": "just the right thing.\n   And I'm like, \"That sounds like functional \nprogramming is slower,\" which might be true  ",
    "start": "3552000",
    "end": "3557100"
  },
  {
    "text": "in some cases but it wasn't in my experience with \nfunctional programming, you know? I'm annoyed by   that. I started thinking about, \"What's the \nreason that functional programmers tend to  ",
    "start": "3557100",
    "end": "3566460"
  },
  {
    "text": "start by thinking and not by writing code?\" And \nit led to this talk that I gave at university  ",
    "start": "3566460",
    "end": "3571859"
  },
  {
    "text": "where I basically told people that we were \nbeing taught all the ways we could be wrong,  ",
    "start": "3571860",
    "end": "3576900"
  },
  {
    "text": "which made us scared of writing code. We've been \ntaught all the things that the algorithms could be  ",
    "start": "3576900",
    "end": "3582359"
  },
  {
    "text": "slow or the wrong data structures or we could \nbe breaking the types, we could be doing all   these things in a bad way, and I'm like, \"Shit, \nprogramming is really dangerous, like, of course,  ",
    "start": "3582360",
    "end": "3594360"
  },
  {
    "text": "I'm going to sit down and think for three days for \nall the ways that I could be doing this wrong.\"   \nBut what it also meant was that before I started  ",
    "start": "3594360",
    "end": "3601619"
  },
  {
    "text": "university, I could write thousands of lines \nof code per day, like, no problem. Because it  ",
    "start": "3601620",
    "end": "3606660"
  },
  {
    "text": "was PHP, I didn't really care, I was young, just \ngo or just write something and see what happens.  ",
    "start": "3606660",
    "end": "3611400"
  },
  {
    "text": "I was way more productive because at \nthe end of university, I was like,   \"I have to write something, what I'm gonna \ndo? I need to set up some CI/CD, some  ",
    "start": "3612360",
    "end": "3620760"
  },
  {
    "text": "testing frameworks, I need to research first.\" \nObviously, I need to pick the right front-end   language or framework, I can't get started without \na front-end framework, you know? And then I just  ",
    "start": "3620760",
    "end": "3630420"
  },
  {
    "text": "put off starting, which is exactly the opposite \nof this, \"Just get coding and see what happens.\"  ",
    "start": "3630420",
    "end": "3637260"
  },
  {
    "text": "Eric Meyer has a lot of talks where he talks \nabout, stop all the planning activities, stop   all the scrum, stop doing all these things, just \nsit down, open up an editor, and start typing.\" ",
    "start": "3638400",
    "end": "3648300"
  },
  {
    "text": " \nThat's how you start a project,   that's how you start solving a task, just open \nan editor and code. And I found there was some  ",
    "start": "3648300",
    "end": "3657720"
  },
  {
    "text": "very profound truth in that. And when I started \nwriting for what would eventually become the book,  ",
    "start": "3657720",
    "end": "3662880"
  },
  {
    "text": "I also experienced the same thing with the writing \nof the book. It's like I put so much thought into  ",
    "start": "3662880",
    "end": "3668579"
  },
  {
    "text": "trying to make this perfect in the first go, which \nreally is a less effective way of spending my time  ",
    "start": "3668580",
    "end": "3674820"
  },
  {
    "text": "than just writing something and then iterating. \nAnd we've heard that time and time again,   but the best way I've heard about it was in the \nmovie, \"Finding Forrester\" where he says, \"Just  ",
    "start": "3674820",
    "end": "3684900"
  },
  {
    "text": "pick up something and start typing. The \nfirst time you type with your heart,   and then you go back and you rewrite it with \nyour head,\" right? First, you make it work,  ",
    "start": "3685620",
    "end": "3695640"
  },
  {
    "text": "then make it pretty. Like, just write something, I \ndon't care, just get it out there, it's infinitely  ",
    "start": "3695640",
    "end": "3702059"
  },
  {
    "text": "more valuable when it's written down, even if it's \nwrong, than when it's just an idea that you have.",
    "start": "3702060",
    "end": "3707100"
  },
  {
    "text": "There's a lot of truth there. It's a funny \nthing because it's like we've almost taught  ",
    "start": "3707100",
    "end": "3713520"
  },
  {
    "start": "3708000",
    "end": "4047000"
  },
  {
    "text": "ourselves to be...by being cautious, \nwe've taught ourselves to be fearful.  ",
    "start": "3713520",
    "end": "3717660"
  },
  {
    "text": "And when we are fearful, we're actually less \neffective. And exactly what you described,   it's kind of like, before I knew stuff, I'd write \nloads of stuff, and then I started learning things  ",
    "start": "3718680",
    "end": "3726960"
  },
  {
    "text": "and now I'm afraid to write because I know \nthere are so many things that can go wrong or   so many considerations and so many parts into the \nfuture, what I would naively once have thought,  ",
    "start": "3726960",
    "end": "3735720"
  },
  {
    "text": "\"I can do this,\" and it's a straightforward path, \nand I might discover I'm wrong, but I would still   set out on that path.\n  ",
    "start": "3735720",
    "end": "3742300"
  },
  {
    "text": "Through a process of education and experience, \nwe've ended up preventing ourselves from walking   down any paths, but standing around talking \nabout the paths, it's this whole fear that  ",
    "start": "3742920",
    "end": "3753240"
  },
  {
    "text": "we've accidentally created. And for something that \nis, given the software is supposed to be soft and,  ",
    "start": "3753240",
    "end": "3759900"
  },
  {
    "text": "refactoring is a mechanism for doing so and \nensuring that, we've made it harder than hardware.  ",
    "start": "3759900",
    "end": "3765480"
  },
  {
    "text": "That's how it feels, at least to me some days.\n   And then as you said, it comes from...also, I have \na bit of a background in theater, where when you  ",
    "start": "3766440",
    "end": "3775260"
  },
  {
    "text": "want to create something that's emerging in this \nway, the improv theater is very much an emerging  ",
    "start": "3775260",
    "end": "3780480"
  },
  {
    "text": "thing between the people and what you can get out \nof the few props you have or the few situations,  ",
    "start": "3780480",
    "end": "3786300"
  },
  {
    "text": "whatever you can create there. There is a very \nimportant rule that if you start saying no to   things because, those are not appropriate or this \nis going to be harder, if you start saying no,  ",
    "start": "3786300",
    "end": "3796260"
  },
  {
    "text": "you're gonna take it down. Like, you're gonna \nactually destroy the creativity of that forum  ",
    "start": "3796260",
    "end": "3801900"
  },
  {
    "text": "and everything just goes wrong from there. There's \nthis, \"Yes, and,\" idea, you have to always build  ",
    "start": "3802680",
    "end": "3807960"
  },
  {
    "text": "on whatever is there.\n   And it's the same thing with consulting, \nespecially management consulting I've found  ",
    "start": "3807960",
    "end": "3813660"
  },
  {
    "text": "is if you actively avoid all the things that are \ngoing to be hard and scary, you're going to be  ",
    "start": "3813660",
    "end": "3819000"
  },
  {
    "text": "a worse consultant and you're probably not going \nto change anything because you need to make hard   choices sometimes, and you need to have hard \nconversations and stuff. The same with code,  ",
    "start": "3819000",
    "end": "3828480"
  },
  {
    "text": "you need to sit down and do whatever you're scared \nof because otherwise, you're just going to never   do it. And usually, just writing the first \nfew lines will get you sort of into some sort  ",
    "start": "3828480",
    "end": "3838800"
  },
  {
    "text": "of a groove. And it might not be perfect, but it \ndoesn't matter because you can fix it. Like, just  ",
    "start": "3838800",
    "end": "3843960"
  },
  {
    "text": "go back into the danger, just do whatever you're \nscared of to un-scarify it, to take away the fear. ",
    "start": "3843960",
    "end": "3851880"
  },
  {
    "text": " \nAs you're describing earlier on,   there's that notion of like the knowledge that, \nwhatever you knew at the beginning is not going  ",
    "start": "3851880",
    "end": "3861900"
  },
  {
    "text": "to be what at the end. But if you don't get to \nanywhere near the end, you don't make any kind of   progress, you're not going to learn anything. \nIt remains as dangerous and scary as it was  ",
    "start": "3861900",
    "end": "3871260"
  },
  {
    "text": "before. And I think that it also speaks to that \nnotion of trying to anticipate and plan things,  ",
    "start": "3871260",
    "end": "3877380"
  },
  {
    "text": "and then something unplanned comes along. And it \nreminds me of...again, you talk about theater, and   that just reminded me, there's a little snippet \nof Michael Caine talking to an interviewer. ",
    "start": "3877380",
    "end": "3888600"
  },
  {
    "text": " \nAnd he talks about using the   difficulty and that early in his career, he tried \nto do a stage entrance and there was something in  ",
    "start": "3889320",
    "end": "3895500"
  },
  {
    "text": "the way and, he kind of explained it, \"Oh, I can't \ndo this,\" and he was told, \"Use the difficulty. If  ",
    "start": "3895500",
    "end": "3900660"
  },
  {
    "text": "something's in the way, then use that, make that \npart of the scene, make it part of your progress,   and make it part of the story.\" In other words, \nhe quite literally improvised at that point, even  ",
    "start": "3900660",
    "end": "3909960"
  },
  {
    "text": "though it's not an improvisational context. It's a \nreminder, everything is an improvisation context,   and code and software is not necessarily something \nthat respects plans. In fact, it tends to laugh at  ",
    "start": "3909960",
    "end": "3921300"
  },
  {
    "text": "them quite loudly.\n   That kind of idea, again, that kind of brings us \nfull circle to, sort of what I felt to be one of  ",
    "start": "3921300",
    "end": "3932040"
  },
  {
    "text": "the underlying messages of the book and that this \nidea that the fact that not everything is going  ",
    "start": "3932040",
    "end": "3938700"
  },
  {
    "text": "to be perfect and not everything can be planned \nis not a problem. Here are the ways of dealing  ",
    "start": "3938700",
    "end": "3943740"
  },
  {
    "text": "with stuff. Things might look big and scary \nbut, it all comes down to the small stuff. If   you can do lots of small stuff, then that's good, \nthat's fine. And you don't even have to be...you  ",
    "start": "3943740",
    "end": "3954840"
  },
  {
    "text": "don't even have to bring your best game \nto the keyboard to be doing this. Here is   how to do it in its simplest level, you can be \ndoing your worst day and still make progress,  ",
    "start": "3954840",
    "end": "3962880"
  },
  {
    "text": "which I don't think you say in the book. But \ncertainly, the message that I got is just like,   \"Here's how to make progress even when you're \nhaving a terrible this is not your best week,  ",
    "start": "3963900",
    "end": "3972540"
  },
  {
    "text": "this is not your best year,\" whatever. There \nare so many other difficulties, you're being   pulled in other directions, or,it's a technology \nthat you don't know, you can still make progress. ",
    "start": "3972540",
    "end": "3983160"
  },
  {
    "text": " \nChristian Clausen:There are so many reasons to not   write code today. Picking tools, doing all these \nthings that's scary, all of this, but ultimately,  ",
    "start": "3983160",
    "end": "3991500"
  },
  {
    "text": "coding and building software is a creative process \nand it's a learning thing. You have to play with  ",
    "start": "3991500",
    "end": "3997080"
  },
  {
    "text": "these things to get a deeper understanding \nof the domain, of the language of your tool,   of everything. You have to be in the mode where \nyou can take all these things in. And I think it's  ",
    "start": "3997080",
    "end": "4006680"
  },
  {
    "text": "Cleese who has this management talk, actually, \nwhere he...he's also very funny, but where he   talks about making space for creativity, making \nspace to be open-minded, we're in the open state. ",
    "start": "4006680",
    "end": "4016280"
  },
  {
    "text": " \nAnd I also tried to emphasize that by,   \"Before you start writing your real code, then do \na spike,\" right? The old XP spike. Do an explorer  ",
    "start": "4017240",
    "end": "4024680"
  },
  {
    "text": "thing. Just promise yourself you're going to \nthrow it out, and what you'll most often find   is it's a lot easier to write it if you have to \nthrow it out. And then the second time is easy  ",
    "start": "4024680",
    "end": "4033440"
  },
  {
    "text": "to write because you've done it before. Just \nhacking these things. I find that spikes have  ",
    "start": "4033440",
    "end": "4039980"
  },
  {
    "text": "been really difficult to get into the industry \nand I'm hoping I did a little bit for it, but   still seems like there's a far way to go.\n  ",
    "start": "4039980",
    "end": "4047660"
  },
  {
    "start": "4047000",
    "end": "4137000"
  },
  {
    "text": "I think on that note, and that's a wonderful \nunifying note given we talked about unification,   but this is bringing many of the threads \ntogether and bringing them back to a joint.  ",
    "start": "4048620",
    "end": "4057380"
  },
  {
    "text": "I'd like to thank you, Christian, for \nyour time, your thoughts, and your book.   And where can people find you online?\n  ",
    "start": "4058280",
    "end": "4067340"
  },
  {
    "text": "Christian Clausen:I'm on Twitter, I'm on LinkedIn. \nAgain, another one I stole from you is I tried to  ",
    "start": "4067340",
    "end": "4073220"
  },
  {
    "text": "be easily stackable and very public. I'm always \nthe same handle on all of the things that I'm on,  ",
    "start": "4073220",
    "end": "4079580"
  },
  {
    "text": "whether it's YouTube or GitHub or whatever. \nI'm everywhere. I'm also doing a company where  ",
    "start": "4079580",
    "end": "4085280"
  },
  {
    "text": "I'm trying to build the next cloud, which is \ngoing to be huge and a lot easier to work with,  ",
    "start": "4085280",
    "end": "4092480"
  },
  {
    "text": "like the refactorings, you know? It \nhas to fit on the head of a programmer.  ",
    "start": "4092480",
    "end": "4097460"
  },
  {
    "text": "They can also find me there.\n   Right, brilliant. Thank you \nvery much for your time.   \nChristian Clausen:Thank you very much.",
    "start": "4098660",
    "end": "4105380"
  }
]