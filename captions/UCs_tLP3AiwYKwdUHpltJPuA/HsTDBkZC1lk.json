[
  {
    "start": "0",
    "end": "117000"
  },
  {
    "text": "[Music]",
    "start": "3510",
    "end": "7529"
  },
  {
    "text": "all right so yeah my talk is about graphical and charisma and I know that's basically the last session for all of",
    "start": "12019",
    "end": "18510"
  },
  {
    "text": "you today I won't be mad if I see people fall asleep but hopefully the the",
    "start": "18510",
    "end": "23939"
  },
  {
    "text": "content of the topics that is exciting enough to keep you all awake so so my",
    "start": "23939",
    "end": "29369"
  },
  {
    "text": "name is Nicolas Burke and this here in Berlin I work at a startup called Prisma and we are building all sorts of tools",
    "start": "29369",
    "end": "35399"
  },
  {
    "text": "in the graph QL and database space you can find me on github and on Twitter as a particular smirk the the agenda for",
    "start": "35399",
    "end": "44760"
  },
  {
    "text": "the talk for the talk today is threefold so I'm going to start with a graphical introduction so that we're all on the",
    "start": "44760",
    "end": "50340"
  },
  {
    "text": "same page about the major concepts of graph QL then I want to dive a bit deeper and really want you to understand",
    "start": "50340",
    "end": "57360"
  },
  {
    "text": "how graphical servers actually work under the hood and then I want you to understand a bit better how he can build",
    "start": "57360",
    "end": "64378"
  },
  {
    "text": "graph QL servers with Prisma and to get a bit of a feeling for the audience I",
    "start": "64379",
    "end": "70530"
  },
  {
    "text": "would like to know just by show of hands who views a front-end developer okay few",
    "start": "70530",
    "end": "76530"
  },
  {
    "text": "front-end developers who is a back-end developer all right I guess who's a",
    "start": "76530",
    "end": "82290"
  },
  {
    "text": "full-stack developer okay a few of those people also raising their hands on the",
    "start": "82290",
    "end": "88770"
  },
  {
    "text": "backend side who have used using Java as their primary language okay who's using",
    "start": "88770",
    "end": "95070"
  },
  {
    "text": "javascript and node and typescript maybe also few people who is using a language",
    "start": "95070",
    "end": "101790"
  },
  {
    "text": "like go or Python or Scala maybe something like that okay awesome",
    "start": "101790",
    "end": "107100"
  },
  {
    "text": "ok so I also will do a fair bit amount of live coding actually and that will",
    "start": "107100",
    "end": "112140"
  },
  {
    "text": "all be in JavaScript but I think that the code should be simple enough for everybody to follow so let's start with",
    "start": "112140",
    "end": "118799"
  },
  {
    "start": "117000",
    "end": "168000"
  },
  {
    "text": "the graphical introduction and the big question what's graphic here so so very",
    "start": "118799",
    "end": "124770"
  },
  {
    "text": "briefly stated it is a new API standard that was developed by Facebook in 2015",
    "start": "124770",
    "end": "130140"
  },
  {
    "text": "and it basically is a specification for it type system and for a query language",
    "start": "130140",
    "end": "135330"
  },
  {
    "text": "so it's just a long document actually that you can read online where it's precisely described how the type system",
    "start": "135330",
    "end": "142560"
  },
  {
    "text": "of graph Gale works and how the corresponding query language actually works and there are three core primitives that we're going to learn",
    "start": "142560",
    "end": "148800"
  },
  {
    "text": "about and that are called query mutation and subscription furies are the way in graph kill how you can read data from an",
    "start": "148800",
    "end": "155190"
  },
  {
    "text": "API and mutations are the way how you can cause some sort of side effect on",
    "start": "155190",
    "end": "160440"
  },
  {
    "text": "the backend and then we also have subscriptions which are for real-time operations but we won't really cover",
    "start": "160440",
    "end": "166260"
  },
  {
    "text": "them in this talk why would you want to use graph here so first and foremost it",
    "start": "166260",
    "end": "173459"
  },
  {
    "start": "168000",
    "end": "277000"
  },
  {
    "text": "has a strongly typed schema for your API and that's my personal favorite maybe you've worked with REST API in the past",
    "start": "173459",
    "end": "180150"
  },
  {
    "text": "and if you use the tool like swagger or what's called today I think open API and",
    "start": "180150",
    "end": "185160"
  },
  {
    "text": "there you get kind of similar benefits but graph QL and has its own schema definition language that will also see",
    "start": "185160",
    "end": "191640"
  },
  {
    "text": "later on which you use to declare the schema and that strongly type schema has a couple of advantages like",
    "start": "191640",
    "end": "197549"
  },
  {
    "text": "auto-generated auto-generated documentation for your API that you will",
    "start": "197549",
    "end": "202950"
  },
  {
    "text": "always get out of the box if you're using graft here so you're never left questioning the API operations and kind",
    "start": "202950",
    "end": "209700"
  },
  {
    "text": "of the kind of variables you need to provide for these API operations and what the returned data structures",
    "start": "209700",
    "end": "215910"
  },
  {
    "text": "actually actually look like then one big advantage and that's the advantage that",
    "start": "215910",
    "end": "223200"
  },
  {
    "text": "usually gets the front-end developers hooked is that you can clearly exactly the data that you need in a single",
    "start": "223200",
    "end": "228540"
  },
  {
    "text": "request so if we have the situation on the front end where we need to implement the view where we would hit three",
    "start": "228540",
    "end": "235530"
  },
  {
    "text": "different three different rest endpoints to get the data that we need in that",
    "start": "235530",
    "end": "240840"
  },
  {
    "text": "situation we have to make three Network requests to get the data and then locally on the front end we have to",
    "start": "240840",
    "end": "247079"
  },
  {
    "text": "actually like put the data into cache and then eventually display it on the UI",
    "start": "247079",
    "end": "252530"
  },
  {
    "text": "with graph GL you can community exactly the data that you need in a single request by submitting what's called a",
    "start": "252530",
    "end": "259049"
  },
  {
    "text": "graphical hurry to the server and that Cleary resolves all the other requirements that",
    "start": "259049",
    "end": "264360"
  },
  {
    "text": "you have on the front end and then you can display the data in the UI and there's also really rich ecosystem and",
    "start": "264360",
    "end": "271620"
  },
  {
    "text": "great community around graph QL despite the fact that it's really only three years old so what does a graphical",
    "start": "271620",
    "end": "279509"
  },
  {
    "start": "277000",
    "end": "388000"
  },
  {
    "text": "Korean erection look like so here on the Left we have front-end client and on the back end we have the server and this is",
    "start": "279509",
    "end": "286020"
  },
  {
    "text": "what a graph Kure actually looks like so it has a number of fields and these",
    "start": "286020",
    "end": "291479"
  },
  {
    "text": "fields describe the data requirements of the front-end so translating this into",
    "start": "291479",
    "end": "296610"
  },
  {
    "text": "the into the data requirements that are expressed by this query are basically we",
    "start": "296610",
    "end": "303120"
  },
  {
    "text": "are asking for a user with a particular ID but we only want to retrieve the name of the user and then there also is a",
    "start": "303120",
    "end": "310380"
  },
  {
    "text": "relation from a user type to a post type and then we're asking for all the posts",
    "start": "310380",
    "end": "316229"
  },
  {
    "text": "of that particular user but only the titles of the top so we can really on a fine-grained level describe the data",
    "start": "316229",
    "end": "322349"
  },
  {
    "text": "that we actually want to receive from the backend rather than being tied to fixed to fix rest endpoints and here's",
    "start": "322349",
    "end": "331229"
  },
  {
    "text": "what a potential response might look like so what's really important to understand is that the query in the",
    "start": "331229",
    "end": "337020"
  },
  {
    "text": "graph theory dictates the shape of the response that's going to be returned by the server so the shape of the query is",
    "start": "337020",
    "end": "344370"
  },
  {
    "text": "identical to the response that we're receiving from the server so one way of",
    "start": "344370",
    "end": "350760"
  },
  {
    "text": "looking at a graph cure one way of looking at a graph cure cure is actually",
    "start": "350760",
    "end": "356520"
  },
  {
    "text": "as like an empty JSON object that you sent over to the server where you only have the keys of the fields that you're",
    "start": "356520",
    "end": "363240"
  },
  {
    "text": "interested in but not the values and then just let the server fill in the values for you and on the previous",
    "start": "363240",
    "end": "372510"
  },
  {
    "text": "slides I've mentioned three reasons why you would want to use graph QL in this article you actually have five reasons",
    "start": "372510",
    "end": "377940"
  },
  {
    "text": "and then if you want to learn more and get a more thorough introduction I would recommend how to graphical outcome website where",
    "start": "377940",
    "end": "384389"
  },
  {
    "text": "there is a really thorough introduction to the entire topic all right so that",
    "start": "384389",
    "end": "390870"
  },
  {
    "start": "388000",
    "end": "572000"
  },
  {
    "text": "brings me to the first part of the demo I have prepared a little graphical server for you and I want to show you",
    "start": "390870",
    "end": "396780"
  },
  {
    "text": "what graph tyrannies and mutations actually look like in practice so here I have a graphical server currently which",
    "start": "396780",
    "end": "404039"
  },
  {
    "text": "is running on my local machine and this entire thing that you see here is called a graphical playground graphical",
    "start": "404039",
    "end": "410490"
  },
  {
    "text": "playgrounds you can imagine as being somewhat like a graphical IDE or a query editor if you've worked with rest you",
    "start": "410490",
    "end": "416639"
  },
  {
    "text": "can compare it with a tool like postman it basically allows you to send requests to a graphical API and see we see the",
    "start": "416639",
    "end": "425970"
  },
  {
    "text": "response immediately and what's really cool about graft and I've mentioned this before already is that with every graph",
    "start": "425970",
    "end": "432509"
  },
  {
    "text": "get up you a PR you always get this this auto-generated API documentation so here",
    "start": "432509",
    "end": "438930"
  },
  {
    "text": "I can click on the schema button and I can see exactly what kind of operations are available at that API so I don't",
    "start": "438930",
    "end": "445740"
  },
  {
    "text": "need to guess what kind of operations I can now send but instead I can just look them up so here on the right side it",
    "start": "445740",
    "end": "451560"
  },
  {
    "text": "says that we have one query and three mutations that we can currently send so let's try them out here I'll start with",
    "start": "451560",
    "end": "459330"
  },
  {
    "text": "the post query and just ask for the post that are available and here is another",
    "start": "459330",
    "end": "467819"
  },
  {
    "text": "really cool feature of the graphical playground which is also due to or thanks to the graphical schema is that",
    "start": "467819",
    "end": "474539"
  },
  {
    "text": "the graph key or playground also has an auto completion feature which is also",
    "start": "474539",
    "end": "482190"
  },
  {
    "text": "built-in so I can send this query and it",
    "start": "482190",
    "end": "487529"
  },
  {
    "text": "returns all the posts that the graphical server currently has available so let's",
    "start": "487529",
    "end": "493560"
  },
  {
    "text": "go ahead and try a mutation so I have to create draft mutation available and I'll",
    "start": "493560",
    "end": "499349"
  },
  {
    "text": "just create a post draft with some random data for now",
    "start": "499349",
    "end": "506659"
  },
  {
    "text": "asked for the idea in return and I'll send this a couple of times if I now go",
    "start": "507719",
    "end": "514979"
  },
  {
    "text": "back to the post query and send that again then the new posts that I just created as draft so draft basically",
    "start": "514979",
    "end": "521698"
  },
  {
    "text": "means that the published field is set to false these new drafts show up in the",
    "start": "521699",
    "end": "530399"
  },
  {
    "text": "response of the post way so I can now go ahead and publish a draft by using the",
    "start": "530399",
    "end": "536850"
  },
  {
    "text": "publish mutation",
    "start": "536850",
    "end": "540079"
  },
  {
    "text": "and if I go back to the post we will see that now the graphical server did what",
    "start": "545940",
    "end": "551970"
  },
  {
    "text": "we expected it said the published fields are true and we also can use the neat",
    "start": "551970",
    "end": "556980"
  },
  {
    "text": "post mutation to delete a post I'll just delete the very first one and going back",
    "start": "556980",
    "end": "564810"
  },
  {
    "text": "to the post query we see that the first post disappeared",
    "start": "564810",
    "end": "570020"
  },
  {
    "text": "all right so much for how a graph kill or how you can use graph key L in terms",
    "start": "570020",
    "end": "577560"
  },
  {
    "text": "of sending crews and mutations and what a couple of these really cool tools that",
    "start": "577560",
    "end": "582810"
  },
  {
    "text": "you get for free when you're working with graph kill actually look like so let's move on to the next part and understand how graphical servers are",
    "start": "582810",
    "end": "589830"
  },
  {
    "text": "implemented under the hood so one thing",
    "start": "589830",
    "end": "595020"
  },
  {
    "text": "upfront you can build a graphical server in your favorite programming language so it's not bound to a particular language",
    "start": "595020",
    "end": "601500"
  },
  {
    "text": "because graph deal itself really is only in specification so it's just the abstract specification of what a",
    "start": "601500",
    "end": "609420"
  },
  {
    "text": "graphical server actually looks like how it needs behave and how it needs to resolve its queries and no matter which",
    "start": "609420",
    "end": "619380"
  },
  {
    "text": "programming language you're using you'll always find these three parts for your graphical server so first you have the",
    "start": "619380",
    "end": "625860"
  },
  {
    "text": "API definition which is the graphical schema then you have the concrete",
    "start": "625860",
    "end": "631740"
  },
  {
    "text": "implementation which are called resolver functions and then you have the setup",
    "start": "631740",
    "end": "637470"
  },
  {
    "text": "for this so usually you'll probably want to build your HTTP server in a way that",
    "start": "637470",
    "end": "642660"
  },
  {
    "text": "it speaks HTTP so that's like the most common transport protocol that you're",
    "start": "642660",
    "end": "649680"
  },
  {
    "text": "using for graphical service today but potentially you could also use another transport layer so you're not bound to",
    "start": "649680",
    "end": "656040"
  },
  {
    "text": "http by the specification but most graphical libraries that you'll find today are using HTTP so let's take a",
    "start": "656040",
    "end": "662790"
  },
  {
    "text": "look at each of these three parts and more detail so first the graph class",
    "start": "662790",
    "end": "672560"
  },
  {
    "start": "668000",
    "end": "876000"
  },
  {
    "text": "the graphical schema is strongly typed and written in what's called the schema",
    "start": "677780",
    "end": "682800"
  },
  {
    "text": "definition language so it has its own language to describe what a schema actually looks like and it defines the",
    "start": "682800",
    "end": "690210"
  },
  {
    "text": "API capabilities and can be seen as the contract for client-server communication so whenever a client has access to some",
    "start": "690210",
    "end": "698190"
  },
  {
    "text": "graphical API it can read the schema and it can infer all the operations that are possible in the API and there are three",
    "start": "698190",
    "end": "707370"
  },
  {
    "text": "special route types that map to the core primitives that are provided by graph here that are called computation and",
    "start": "707370",
    "end": "713610"
  },
  {
    "text": "subscription and these route types verifying the entry points for all our",
    "start": "713610",
    "end": "718830"
  },
  {
    "text": "operations and we'll see that later with a practical example what that means and here we go so on the left you have",
    "start": "718830",
    "end": "725910"
  },
  {
    "text": "probably the most simple graphical schema that you could imagine for a simple hello world app so this would be",
    "start": "725910",
    "end": "733320"
  },
  {
    "text": "stored on the server side somewhere and the server would implement this graphical schema if a server implements",
    "start": "733320",
    "end": "739980"
  },
  {
    "text": "this schema what does this tell me as somebody who's access to the schema what kind of careers I consent in this",
    "start": "739980",
    "end": "745860"
  },
  {
    "text": "particular case I can only send one query and that also looks very simple just like this and only uses the hello",
    "start": "745860",
    "end": "752040"
  },
  {
    "text": "route fields from the query type so this is the query that a client could sent to",
    "start": "752040",
    "end": "757800"
  },
  {
    "text": "the server and then it could get a response that looks like this just a simple so just a simple object",
    "start": "757800",
    "end": "766530"
  },
  {
    "text": "that only has one field hello with something inside of it and again the",
    "start": "766530",
    "end": "771600"
  },
  {
    "text": "shape of the query dictates the shape of the shape of the response in this case",
    "start": "771600",
    "end": "777300"
  },
  {
    "text": "it's super simple because we only have one field in the community we also only have one field in the response object",
    "start": "777300",
    "end": "784250"
  },
  {
    "text": "here is a slightly more useful example so here we are using the graph us in my",
    "start": "784250",
    "end": "789660"
  },
  {
    "text": "definition language to define crud operations for a user so we first define",
    "start": "789660",
    "end": "796860"
  },
  {
    "text": "a user that has an ID and name and then the Korea mutation types they define the actual entry points for",
    "start": "796860",
    "end": "803209"
  },
  {
    "text": "our API so they define the actual operations and in this case we have one operation that lets us ask for one",
    "start": "803209",
    "end": "809779"
  },
  {
    "text": "individual user for a list of users so these are the read operations and then on the mutation type we have to create",
    "start": "809779",
    "end": "816259"
  },
  {
    "text": "user update user and delete user mutations that allow us to perform the create update and delete operations for",
    "start": "816259",
    "end": "823879"
  },
  {
    "text": "the user if we only look at the user field right here what does this tell me",
    "start": "823879",
    "end": "830360"
  },
  {
    "text": "as the client of the API about what a graphical query looks like that I can",
    "start": "830360",
    "end": "836660"
  },
  {
    "text": "send to the cure to the server it",
    "start": "836660",
    "end": "841819"
  },
  {
    "text": "basically tells me that I can send a query that starts with the user field and takes an ID parameter like this but",
    "start": "841819",
    "end": "848720"
  },
  {
    "text": "then because the return value or the type of the user field on query this itself user I can now nest more fields",
    "start": "848720",
    "end": "856699"
  },
  {
    "text": "inside the query and in this case I'm just interested in the name of the user with that particular ID and the server",
    "start": "856699",
    "end": "862910"
  },
  {
    "text": "again might respond with some data that looks like this so this again is the",
    "start": "862910",
    "end": "868639"
  },
  {
    "text": "same shape as the query the JSON object looks the same as the graph here to me that was submitted let's now talk about",
    "start": "868639",
    "end": "878569"
  },
  {
    "start": "876000",
    "end": "1051000"
  },
  {
    "text": "resolver functions because resolver functions are the way how the graphical server is actually implemented so what",
    "start": "878569",
    "end": "884870"
  },
  {
    "text": "happens when a graphic arrives at the server and the data actually needs to be",
    "start": "884870",
    "end": "889879"
  },
  {
    "text": "fetched so this is the task or the responsibility of resolver functions they provide the concrete implementation",
    "start": "889879",
    "end": "896329"
  },
  {
    "text": "of the API and you basically have one resolver function per field in the SDL",
    "start": "896329",
    "end": "902120"
  },
  {
    "text": "schema and this means that the query execution process basically just becomes",
    "start": "902120",
    "end": "908179"
  },
  {
    "text": "a matter of invoking all the resolver functions for the fields that are contained in the incoming query and",
    "start": "908179",
    "end": "915410"
  },
  {
    "text": "actually graphical is sometimes compared to remote procedure style systems which",
    "start": "915410",
    "end": "921740"
  },
  {
    "text": "is that which is a technology that basically which which lets you invoke of",
    "start": "921740",
    "end": "928060"
  },
  {
    "text": "on your local machine but the execution of the function is happening on a is happening on a remote machine and",
    "start": "928060",
    "end": "933640"
  },
  {
    "text": "sometimes that feel is compared to these kinds of systems because if you look at it that way that the graph q just like contains all",
    "start": "933640",
    "end": "942460"
  },
  {
    "text": "the function calls that are supposed to happen on the back end then it effectively is some some sort of",
    "start": "942460",
    "end": "948490"
  },
  {
    "text": "remote procedure call as well let's take",
    "start": "948490",
    "end": "953830"
  },
  {
    "text": "a look at an example again so here we have our very simple hello world hello world schema again and this is what I",
    "start": "953830",
    "end": "961240"
  },
  {
    "text": "corresponding resolver function would look like in JavaScript so we define an object that is called resolvers and that",
    "start": "961240",
    "end": "968910"
  },
  {
    "text": "resolvers object has a field that is called query what you get is an object that has a field that's called hello and",
    "start": "968910",
    "end": "975940"
  },
  {
    "text": "that now is a function that returns just the hello world string what's important about this setup is that the fields in",
    "start": "975940",
    "end": "983620"
  },
  {
    "text": "the resolver subject have the same names as the fields inside your graphical schema so it's important to write in",
    "start": "983620",
    "end": "990190"
  },
  {
    "text": "exactly the same way that you wrote it in the graphical schema as well as the hello function also needs to be written",
    "start": "990190",
    "end": "995440"
  },
  {
    "text": "in the same way as you have it in your graphical in your schema what would it",
    "start": "995440",
    "end": "1003510"
  },
  {
    "text": "look like for the crab unit user type example so again we have the same",
    "start": "1003510",
    "end": "1009120"
  },
  {
    "text": "situation that we have and then again if we follow the same structure and for each field in the graphical schema we",
    "start": "1009120",
    "end": "1017070"
  },
  {
    "text": "have one resolver function on the right so we have a resolver for both user and",
    "start": "1017070",
    "end": "1022830"
  },
  {
    "text": "users for the two queries we have a creatives or update user and the user we",
    "start": "1022830",
    "end": "1028740"
  },
  {
    "text": "solve a function for those three mutations and then we have also the resolvers for the user type which if",
    "start": "1028740",
    "end": "1036870"
  },
  {
    "text": "they follow this very trivial pattern you can actually admit because the at",
    "start": "1036870",
    "end": "1042120"
  },
  {
    "text": "least in JavaScript the the the graphical JavaScript infinity is smart",
    "start": "1042120",
    "end": "1047280"
  },
  {
    "text": "enough to infer these reserves and then",
    "start": "1047280",
    "end": "1052650"
  },
  {
    "start": "1051000",
    "end": "1200000"
  },
  {
    "text": "you have the third part the setup so you first need what's called a graphical engine and the graphical engine is the",
    "start": "1052650",
    "end": "1058650"
  },
  {
    "text": "part in your breath that is responsible to invoke all the result functions for the fields that are",
    "start": "1058650",
    "end": "1065730"
  },
  {
    "text": "contained in the query when it's coming in so the graphical engine markets at the the graphical entered Orkut",
    "start": "1065730",
    "end": "1072780"
  },
  {
    "text": "orchestrates the resolver indications then you need a network layer so if you",
    "start": "1072780",
    "end": "1080310"
  },
  {
    "text": "build your graphical server with HTTP then you can use some common like web",
    "start": "1080310",
    "end": "1085740"
  },
  {
    "text": "framework in the in the example that I'm",
    "start": "1085740",
    "end": "1090750"
  },
  {
    "text": "going to show you later on I'm going to use a graphical server library that is called graphical yoga and that is based",
    "start": "1090750",
    "end": "1096060"
  },
  {
    "text": "on the Express framework so if you have ever worked with node and build like web",
    "start": "1096060",
    "end": "1101130"
  },
  {
    "text": "server Earth node it's likely that you've come across the Express framework which is really popular in the node",
    "start": "1101130",
    "end": "1107250"
  },
  {
    "text": "space and graphical and yoga is built on top of that so basically graphical combines the HTTP capabilities of",
    "start": "1107250",
    "end": "1113460"
  },
  {
    "text": "Express with the graphical resolution from the graph here a reference",
    "start": "1113460",
    "end": "1119970"
  },
  {
    "text": "implementation in JavaScript and then you have your middleware that you can",
    "start": "1119970",
    "end": "1125400"
  },
  {
    "text": "integrate so that's also where you would put in sorts of analytics logging crash reporting all that kind of stuff",
    "start": "1125400",
    "end": "1131840"
  },
  {
    "text": "so let's put it all together and just use the simple hello world example so imagine this to be a very simple node",
    "start": "1131840",
    "end": "1138420"
  },
  {
    "text": "script where worked like the the most",
    "start": "1138420",
    "end": "1144330"
  },
  {
    "text": "simple graphical server that you could write in a single file so here we define",
    "start": "1144330",
    "end": "1149490"
  },
  {
    "text": "the schema it's just a JavaScript string that spans across multiple lines so we",
    "start": "1149490",
    "end": "1155880"
  },
  {
    "text": "use the backtick notation then we have the resolvers object so these two things we saw on the slides before and then",
    "start": "1155880",
    "end": "1163110"
  },
  {
    "text": "we're putting it together using the graphical server that we import from the graphic yoga library and then we start",
    "start": "1163110",
    "end": "1169920"
  },
  {
    "text": "the server and that's how we have our",
    "start": "1169920",
    "end": "1173660"
  },
  {
    "text": "and if you want to learn more about this I recommend you this blog article graph",
    "start": "1179100",
    "end": "1184870"
  },
  {
    "text": "clear the schema which has a really thorough introduction to how the graphical scheme actually works under",
    "start": "1184870",
    "end": "1190390"
  },
  {
    "text": "the hood and also touches on how the schema interacts with with all the functions and then also a graphical",
    "start": "1190390",
    "end": "1196780"
  },
  {
    "text": "server tutorial on how to graphically about coming up which brings me to this",
    "start": "1196780",
    "end": "1202720"
  },
  {
    "start": "1200000",
    "end": "1529000"
  },
  {
    "text": "second part of the demo where I'm going to show you live how we graph your server that I just showed you in the",
    "start": "1202720",
    "end": "1208300"
  },
  {
    "text": "previous demo actually is implemented under the hood ok and here is the",
    "start": "1208300",
    "end": "1219190"
  },
  {
    "text": "implementation of the graphical server so this was the graphical server as a reminder we had these four operations",
    "start": "1219190",
    "end": "1226390"
  },
  {
    "text": "and here is now the implementation and this graphical schema here that defines",
    "start": "1226390",
    "end": "1233410"
  },
  {
    "text": "these operations that we saw here in the playground in the API documentation so the so this API documentation precisely",
    "start": "1233410",
    "end": "1241480"
  },
  {
    "text": "is generated based on this graphical schema right here we have one post query",
    "start": "1241480",
    "end": "1247270"
  },
  {
    "text": "we can actually also provide a search string we can you can create a new draft",
    "start": "1247270",
    "end": "1252550"
  },
  {
    "text": "provide title and content of the new draft we can publish a post and we can delete a post here is the interesting",
    "start": "1252550",
    "end": "1260200"
  },
  {
    "text": "part so this is now the implementation in index J yes here at the moment I'm",
    "start": "1260200",
    "end": "1267550"
  },
  {
    "text": "just using local post data for the things that are happening in my server",
    "start": "1267550",
    "end": "1273190"
  },
  {
    "text": "so I don't have any persistence layer setup at the moment and I just have one post and that was the post that we saw",
    "start": "1273190",
    "end": "1279429"
  },
  {
    "text": "upon the initial query and here is how its implemented them so the post queried",
    "start": "1279429",
    "end": "1285790"
  },
  {
    "text": "just returns the post data array if there is no search swing provided if",
    "start": "1285790",
    "end": "1291070"
  },
  {
    "text": "there is a search string provided then I filter for the title and the content of",
    "start": "1291070",
    "end": "1296710"
  },
  {
    "text": "all the posts and only return those where the filter applies then the create draft mutation",
    "start": "1296710",
    "end": "1304470"
  },
  {
    "text": "looks like this that I'm creating a new JavaScript object that is called new post I have this little helper here to",
    "start": "1304470",
    "end": "1310170"
  },
  {
    "text": "increment my IDs and then I pass the title and the content that is provided",
    "start": "1310170",
    "end": "1317340"
  },
  {
    "text": "through the query I can read it with this arcs argument here and then by",
    "start": "1317340",
    "end": "1322950"
  },
  {
    "text": "default set publish to false so that's how we create a new post at drafts I put",
    "start": "1322950",
    "end": "1328590"
  },
  {
    "text": "this graft into the post date array and then we turn it so that the caller who",
    "start": "1328590",
    "end": "1334410"
  },
  {
    "text": "submitted the mutation also gets the data in return the publish mutation also",
    "start": "1334410",
    "end": "1339420"
  },
  {
    "text": "is fairly straightforward so I'm looking for the post inside the post date array of which the of which",
    "start": "1339420",
    "end": "1347340"
  },
  {
    "text": "the ID was provided through the mutation I said the publish fields are true we",
    "start": "1347340",
    "end": "1352440"
  },
  {
    "text": "turn it and the lead post also fairly straightforward just find the right post deleted from the array and return either",
    "start": "1352440",
    "end": "1360900"
  },
  {
    "text": "didn't need it or now if there was no such post so so I now restart the server",
    "start": "1360900",
    "end": "1369540"
  },
  {
    "text": "and remember because all the data is a local if I restart it then the post we",
    "start": "1369540",
    "end": "1375420"
  },
  {
    "text": "just will show me the one post that I store locally in my post data right and",
    "start": "1375420",
    "end": "1381650"
  },
  {
    "text": "it would actually be nice if I had a query that would allow me to ask for a",
    "start": "1381650",
    "end": "1386970"
  },
  {
    "text": "single post by its ID so here I would like to do something like this content",
    "start": "1386970",
    "end": "1396500"
  },
  {
    "text": "instead of instead of curing all the posts I would want to create Ingle goals",
    "start": "1397670",
    "end": "1402930"
  },
  {
    "text": "but at the moment this won't work with the current graphical schema implementation because I don't have that",
    "start": "1402930",
    "end": "1408630"
  },
  {
    "text": "post operation yet so let's go ahead and implement it the first thing that I need to do for that is actually tell my",
    "start": "1408630",
    "end": "1414960"
  },
  {
    "text": "graphical schema or the graphical server that I want to have this new operation",
    "start": "1414960",
    "end": "1420510"
  },
  {
    "text": "in my API and that works simply by adding it to the graphical schema right",
    "start": "1420510",
    "end": "1425550"
  },
  {
    "text": "here so the exclamation mark which I said here is means that this parameter is",
    "start": "1425550",
    "end": "1432860"
  },
  {
    "text": "required so the graph your server will reject any operations where the ID",
    "start": "1432860",
    "end": "1439490"
  },
  {
    "text": "parameter is not provided and then it returns a post object and here I don't put an exclamation mark because it might",
    "start": "1439490",
    "end": "1445789"
  },
  {
    "text": "be that the post with the provided ID actually does not exist in the backend",
    "start": "1445789",
    "end": "1453860"
  },
  {
    "text": "so in that case we would return now and for the implementation that's also",
    "start": "1453860",
    "end": "1459740"
  },
  {
    "text": "fairly straightforward I just add this new resolver function that finds the",
    "start": "1459740",
    "end": "1472100"
  },
  {
    "text": "right post inside the post data array by",
    "start": "1472100",
    "end": "1477590"
  },
  {
    "text": "comparing the IDs and that should be it I'm restarting the server I am reloading",
    "start": "1477590",
    "end": "1488059"
  },
  {
    "text": "my schema and I see that the post has been added to the auto-generated API",
    "start": "1488059",
    "end": "1494240"
  },
  {
    "text": "documentation and also these red squiggly squiggly lines have disappeared",
    "start": "1494240",
    "end": "1499360"
  },
  {
    "text": "so I should now be able to use that operation here as well let's try it all",
    "start": "1499360",
    "end": "1505990"
  },
  {
    "text": "right it works all right so now you understand what the graphical schema",
    "start": "1506289",
    "end": "1513620"
  },
  {
    "text": "definition looks like how resolvers are being implemented so let's now get to the next part building graphical servers with prisoner",
    "start": "1513620",
    "end": "1522669"
  },
  {
    "start": "1529000",
    "end": "1664000"
  },
  {
    "text": "first what is Prisma so basically Prisma is a strongly typed access layer for",
    "start": "1529460",
    "end": "1535679"
  },
  {
    "text": "your database think of it somewhat as an ORM so it tries to solve a similar",
    "start": "1535679",
    "end": "1540779"
  },
  {
    "text": "problem but it has a lot more features and it's also a lot more powerful than traditional rhymes the way how you're",
    "start": "1540779",
    "end": "1549210"
  },
  {
    "text": "using Prisma for your database is that there is a Prisma client that is",
    "start": "1549210",
    "end": "1554270"
  },
  {
    "text": "auto-generated based on the data model that you provide the data model we'll talk about it later will be mapped to",
    "start": "1554270",
    "end": "1560850"
  },
  {
    "text": "your database and it's also type safe so one core goal of us that we have as",
    "start": "1560850",
    "end": "1566100"
  },
  {
    "text": "Prisma is to basically enable what we understand as end-to-end type safety so that your entire application should be",
    "start": "1566100",
    "end": "1572909"
  },
  {
    "text": "based on a coherent set of types from the database to the front-end and graph QL is what is making that possible and",
    "start": "1572909",
    "end": "1581669"
  },
  {
    "text": "grab and then Prisma also has a declarative approach for for actually",
    "start": "1581669",
    "end": "1590399"
  },
  {
    "text": "modeling your data and for database migrations and we'll see also what that looks like",
    "start": "1590399",
    "end": "1595880"
  },
  {
    "text": "how does Prisma work so there are basically these four steps when you get started with Prisma first you have to",
    "start": "1595880",
    "end": "1602520"
  },
  {
    "text": "connect your or you are the database so",
    "start": "1602520",
    "end": "1610620"
  },
  {
    "text": "you can either use a new one or you can use one that already has existing data then you would go and define your data",
    "start": "1610620",
    "end": "1617909"
  },
  {
    "text": "model if you already have some data in your data model then then Prisma will do introspection of your database and will",
    "start": "1617909",
    "end": "1625529"
  },
  {
    "text": "actually also auto generate that data model but you define you define the data",
    "start": "1625529",
    "end": "1632520"
  },
  {
    "text": "model for your application then you migrate the data base where prisma takes a look at your and at your data model",
    "start": "1632520",
    "end": "1641070"
  },
  {
    "text": "and maps it to the underlying sequel database or we actually also support",
    "start": "1641070",
    "end": "1646770"
  },
  {
    "text": " so it would also method to basically the collections and next",
    "start": "1646770",
    "end": "1654250"
  },
  {
    "text": "up is that you generate the Prisma client that allows you to actually talk to your database through that type save",
    "start": "1654250",
    "end": "1660040"
  },
  {
    "text": "layer and then you can go and start building whatever you want to build to",
    "start": "1660040",
    "end": "1666990"
  },
  {
    "start": "1664000",
    "end": "1795000"
  },
  {
    "text": "to give a bit more context of where prizm actually fits into your stack in the backend",
    "start": "1666990",
    "end": "1672460"
  },
  {
    "text": "I want to depict to graphically architectures that are quite common but there's also a spectrum in between these",
    "start": "1672460",
    "end": "1679570"
  },
  {
    "text": "two so these are two examples basically of how you could build your graphical application so the first one is what",
    "start": "1679570",
    "end": "1685960"
  },
  {
    "text": "would call a graphical monolith that's a very standard architecture which has these three very classic components that",
    "start": "1685960",
    "end": "1693130"
  },
  {
    "text": "we know from like three-tier architectures with the client we have the server and we have the database and in this particular case Prisma sits",
    "start": "1693130",
    "end": "1700480"
  },
  {
    "text": "inside your graphical API server the Prisma client and basically connects",
    "start": "1700480",
    "end": "1705580"
  },
  {
    "text": "your resolver functions to the database so the entire goal of this is to simplify the implementation of you",
    "start": "1705580",
    "end": "1712300"
  },
  {
    "text": "resolver functions so that you don't have to write sequel or like things like that inside your resolver functions and",
    "start": "1712300",
    "end": "1718780"
  },
  {
    "text": "make the resolver functions really long and cumbersome if you use Prisma then the implementation of your resolvers",
    "start": "1718780",
    "end": "1724510"
  },
  {
    "text": "will be fairly straightforward and then the more complex one on the other side",
    "start": "1724510",
    "end": "1730180"
  },
  {
    "text": "of this on the other side of the spectrum would be a micro services architecture with a graphical gateway so",
    "start": "1730180",
    "end": "1736840"
  },
  {
    "text": "actually graph cure is like really often",
    "start": "1736840",
    "end": "1742030"
  },
  {
    "text": "also used as like this proxy technology that you put on top of existing systems so that your front-end developers have",
    "start": "1742030",
    "end": "1749560"
  },
  {
    "text": "this one career and API that they could talk to one single endpoint and all the of the more complex orchestration of",
    "start": "1749560",
    "end": "1758050"
  },
  {
    "text": "where the data is actually coming from from which system that is happening inside that gateway server and here you",
    "start": "1758050",
    "end": "1763720"
  },
  {
    "text": "can also use Prisma where we actually also have a way that that basically",
    "start": "1763720",
    "end": "1770590"
  },
  {
    "text": "allows you to use Prisma as a standalone server on top of the database that you can deploy for example with docker and",
    "start": "1770590",
    "end": "1777360"
  },
  {
    "text": "that standalone server basically provides a data service out-of-the-box for your database",
    "start": "1777360",
    "end": "1782880"
  },
  {
    "text": "and then you can merge all of these services inside the graphical gateway for the example that we're building we",
    "start": "1782880",
    "end": "1790020"
  },
  {
    "text": "are very much on the left side so this is the architecture that I'm using in the live demo why graph command Prisma",
    "start": "1790020",
    "end": "1798420"
  },
  {
    "start": "1795000",
    "end": "1939000"
  },
  {
    "text": "is such a great set so first of all with charisma you get really perform and",
    "start": "1798420",
    "end": "1803430"
  },
  {
    "text": "clearly resolution with graph killer on the server side we often run into what's called the n plus 1 problem which",
    "start": "1803430",
    "end": "1810420"
  },
  {
    "text": "basically means that if you're requesting a particular user and then",
    "start": "1810420",
    "end": "1816840"
  },
  {
    "text": "you want to have all the posts of a user you first need to basically make a database request to get information",
    "start": "1816840",
    "end": "1822480"
  },
  {
    "text": "about the user and all the post IDs and then you need to make more database",
    "start": "1822480",
    "end": "1827730"
  },
  {
    "text": "requests for each post of that user and that's called the n plus 1 problem and",
    "start": "1827730",
    "end": "1833250"
  },
  {
    "text": "the Prisma client has a built in way of",
    "start": "1833250",
    "end": "1840950"
  },
  {
    "text": "of basically alleviating that problem with batching and caching and then with",
    "start": "1840950",
    "end": "1847680"
  },
  {
    "text": "Prisma you get crud and real-time operations for your database out-of-the-box so kind of similar",
    "start": "1847680",
    "end": "1854460"
  },
  {
    "text": "functionality as you also get with we rethink TB for example when you get we",
    "start": "1854460",
    "end": "1860700"
  },
  {
    "text": "can receive life updates about events in the database Prisma first dead as well",
    "start": "1860700",
    "end": "1866360"
  },
  {
    "text": "and then again the point about the point about entrant type safety so you can use",
    "start": "1866360",
    "end": "1873930"
  },
  {
    "text": "Prisma also to build a REST API or some kind of other tool where you would maybe",
    "start": "1873930",
    "end": "1879180"
  },
  {
    "text": "otherwise use the traditional object relational mapper but this end-to-end type safety approach is something that",
    "start": "1879180",
    "end": "1885660"
  },
  {
    "text": "you can really only get with WebGL and that's what we're trying to enable and actually only last week we released a",
    "start": "1885660",
    "end": "1892380"
  },
  {
    "text": "tool that is called graphical gem that is a code generation tool that looks at",
    "start": "1892380",
    "end": "1897510"
  },
  {
    "text": "your graphical schema and scaffolds the resolver implementations that you need",
    "start": "1897510",
    "end": "1902550"
  },
  {
    "text": "afterwards and it also makes your resolvers entirely",
    "start": "1902550",
    "end": "1907890"
  },
  {
    "text": "safe so if you're using types good if you're using go for example the prism attract is also available we go",
    "start": "1907890",
    "end": "1913920"
  },
  {
    "text": "then this enables you to really have type safe resolvers so you don't run into so you don't run into any stupid",
    "start": "1913920",
    "end": "1920880"
  },
  {
    "text": "arrows at one time and if you want to",
    "start": "1920880",
    "end": "1926370"
  },
  {
    "text": "learn more about Prisma you can check out the QuickStart in our documentation or with the Prisma introduction let's",
    "start": "1926370",
    "end": "1940860"
  },
  {
    "start": "1939000",
    "end": "2037000"
  },
  {
    "text": "now get to the last part of the demo where I want to show you how we can adjust the implementation of the current",
    "start": "1940860",
    "end": "1948540"
  },
  {
    "text": "graphical server such that we actually store the data and store the data and",
    "start": "1948540",
    "end": "1955290"
  },
  {
    "text": "then actual persistence persistence layer that I'm going to set up with",
    "start": "1955290",
    "end": "1961200"
  },
  {
    "text": "prismo but first I want to just show you that how Prisma works in a very simple",
    "start": "1961200",
    "end": "1968310"
  },
  {
    "text": "node script and for that I'm going to [Music]",
    "start": "1968310",
    "end": "1973550"
  },
  {
    "text": "going to create a new folder right here in my project and go to demo 1-2-3 and initialize a",
    "start": "1973550",
    "end": "1984210"
  },
  {
    "text": "new Prisma project and here using the Prisma CLI so the Prisma seal I am is a tool that you can install with homebrew",
    "start": "1984210",
    "end": "1990870"
  },
  {
    "text": "or with NPM and it allows or it helps you with all the typical workflows that you have to do around Prisma and here it",
    "start": "1990870",
    "end": "1999990"
  },
  {
    "text": "now asked me a couple of questions about how I want to setup Prisma for this new project so I could either use an",
    "start": "1999990",
    "end": "2006170"
  },
  {
    "text": "existing database in which case Prisma would introspect the database and then generate the client API on top of that I",
    "start": "2006170",
    "end": "2012530"
  },
  {
    "text": "could go and start from scratch with a new database that would be configured",
    "start": "2012530",
    "end": "2017600"
  },
  {
    "text": "with docker in this case but I want to use a hosted database impress my cloud",
    "start": "2017600",
    "end": "2022640"
  },
  {
    "text": "to make things really really simple for this a particular demo here I'm just going to",
    "start": "2022640",
    "end": "2029310"
  },
  {
    "text": "answer a couple of questions and then I'll say that I want to use the JavaScript client since I'm using no TAS",
    "start": "2029310",
    "end": "2035010"
  },
  {
    "text": "in this application so let's see what the Prisma init command now generated",
    "start": "2035010",
    "end": "2040890"
  },
  {
    "text": "for me three files to be precise we have the Prisma llamo which is kind of the",
    "start": "2040890",
    "end": "2045900"
  },
  {
    "text": "main configuration that is used for Prisma it points to a data model and",
    "start": "2045900",
    "end": "2051210"
  },
  {
    "text": "that data model is what I was mentioning before when I was talking about declarative data modeling and migrations",
    "start": "2051210",
    "end": "2056250"
  },
  {
    "text": "so here by default prisoner put in this user type but for our application what we actually need is",
    "start": "2056250",
    "end": "2063060"
  },
  {
    "text": "a post type that looks similar to the one that we have defined in our",
    "start": "2063060",
    "end": "2068429"
  },
  {
    "text": "graphical schema and one thing you'll notice also is that we're using the",
    "start": "2068430",
    "end": "2074310"
  },
  {
    "text": "graphical schema language also for the data model right here in the future we",
    "start": "2074310",
    "end": "2079770"
  },
  {
    "text": "might open up the API that you can also use some other kind of schema language to define what what your data mall",
    "start": "2079770",
    "end": "2087450"
  },
  {
    "text": "should look like at the moment we are using we're using graphical STL and it's",
    "start": "2087450",
    "end": "2093750"
  },
  {
    "text": "really suitable because it's super super simple and intuitive and at the same",
    "start": "2093750",
    "end": "2099960"
  },
  {
    "text": "time it's also really powerful so it supports constructs like interfaces and unions as well so you can really express",
    "start": "2099960",
    "end": "2106050"
  },
  {
    "text": "a lot of things here and because this is the data model that is going to be",
    "start": "2106050",
    "end": "2112380"
  },
  {
    "text": "mapped to my to my database that is hosted in the cloud on the demo server I",
    "start": "2112380",
    "end": "2118680"
  },
  {
    "text": "can add some of these special directives right here that express certain constraints or extra functionality for",
    "start": "2118680",
    "end": "2125520"
  },
  {
    "text": "what's supposed to happen with these types in my database and in this case I want every idea of every post to always",
    "start": "2125520",
    "end": "2131760"
  },
  {
    "text": "be unique and I want that every post that is not explicitly created as",
    "start": "2131760",
    "end": "2137070"
  },
  {
    "text": "published to have a default value of false to put that API into place I need",
    "start": "2137070",
    "end": "2144180"
  },
  {
    "text": "to run the Prisma deployment and then go",
    "start": "2144180",
    "end": "2149850"
  },
  {
    "text": "ahead and generate my Prisma clients and now I can go ahead inside my note",
    "start": "2149850",
    "end": "2159630"
  },
  {
    "start": "2154000",
    "end": "2471000"
  },
  {
    "text": "script and use that generated Prisma client to perform operations against my",
    "start": "2159630",
    "end": "2165120"
  },
  {
    "text": "database so here is the code that was",
    "start": "2165120",
    "end": "2176030"
  },
  {
    "text": "that was generated for my FISMA client and because we also put the types good",
    "start": "2176030",
    "end": "2181590"
  },
  {
    "text": "tight definitions in here I actually also I actually also get auto completion",
    "start": "2181590",
    "end": "2186770"
  },
  {
    "text": "for the operations on the Prisma client instance right here in my editor I'll show you that in just a second I first",
    "start": "2186770",
    "end": "2194490"
  },
  {
    "text": "created this main function right here and call it so that we can do so that we",
    "start": "2194490",
    "end": "2202590"
  },
  {
    "text": "can do asynchronous operations so let's start by just requesting all the posts",
    "start": "2202590",
    "end": "2207750"
  },
  {
    "text": "that we currently have stored in the database so I create a query on the",
    "start": "2207750",
    "end": "2214230"
  },
  {
    "text": "Prisma client and here my code editor suggests me all the different operations",
    "start": "2214230",
    "end": "2219480"
  },
  {
    "text": "that I have available so already at this point you basically take advantage of",
    "start": "2219480",
    "end": "2225330"
  },
  {
    "text": "this strongly typed layer for your database despite the fact that I'm using javascript I still get Auto completion for the",
    "start": "2225330",
    "end": "2231480"
  },
  {
    "text": "operations that I can use on the prizm our client which I personally find pretty my pretty amazing so here we go",
    "start": "2231480",
    "end": "2239970"
  },
  {
    "text": "we just asked for all the posts and then we are going to print them to the to the console and see what happens what do we",
    "start": "2239970",
    "end": "2247680"
  },
  {
    "text": "expect at this point actually we expect an empty array but before I actually run the script we need to do what JavaScript",
    "start": "2247680",
    "end": "2255090"
  },
  {
    "text": "developers love most and that is adding new dependencies to the project so I'm",
    "start": "2255090",
    "end": "2261180"
  },
  {
    "text": "adding the prizm our client lifts and gradually pendency and now I'm actually able to run this script",
    "start": "2261180",
    "end": "2268760"
  },
  {
    "text": "sorry ah thank you thank you so much so",
    "start": "2272840",
    "end": "2280410"
  },
  {
    "text": "I'm doing live coding and please if you catch any of these kinds of issues I do not thank you all right we see that",
    "start": "2280410",
    "end": "2289050"
  },
  {
    "text": "at empty array is being printed exactly as we expected because the new database on FISMA cloud actually has no data in",
    "start": "2289050",
    "end": "2297510"
  },
  {
    "text": "it yet so let's go ahead and change that by creating a new post using the create",
    "start": "2297510",
    "end": "2303510"
  },
  {
    "text": "post function right here again just providing random data but always with",
    "start": "2303510",
    "end": "2309180"
  },
  {
    "text": "Auto completion and if I run this again then we see that one post has been",
    "start": "2309180",
    "end": "2315960"
  },
  {
    "text": "created I can run it again and we see",
    "start": "2315960",
    "end": "2324480"
  },
  {
    "text": "that both posts are now part of the all policy then I just quickly want to show",
    "start": "2324480",
    "end": "2330720"
  },
  {
    "text": "one more thing so here this post field also allows me to provide a couple of",
    "start": "2330720",
    "end": "2336150"
  },
  {
    "text": "filters for for pagination or to just filter according to specific properties",
    "start": "2336150",
    "end": "2344070"
  },
  {
    "text": "so here if I provide the wear filter I can see all the different ways how I can",
    "start": "2344070",
    "end": "2349200"
  },
  {
    "text": "filter the posts and I could for example do some filter for posts that contain",
    "start": "2349200",
    "end": "2356990"
  },
  {
    "text": "this in their title and then I expect that I just get the one that I created",
    "start": "2356990",
    "end": "2363600"
  },
  {
    "text": "first back all right so far for the Prisma client and now let's bring these",
    "start": "2363600",
    "end": "2371310"
  },
  {
    "text": "two worlds together the Prisma client and my result of functions to see how the Prisma client",
    "start": "2371310",
    "end": "2376830"
  },
  {
    "text": "helps me to implement my resolvers I'm deleting all the previous",
    "start": "2376830",
    "end": "2382380"
  },
  {
    "text": "implementations because I don't need them anymore",
    "start": "2382380",
    "end": "2387200"
  },
  {
    "text": "this and I'll start with just creating the queries actually so put comments on",
    "start": "2391979",
    "end": "2399700"
  },
  {
    "text": "all mutations so that we can test everything step by step so the way how I",
    "start": "2399700",
    "end": "2405519"
  },
  {
    "text": "now implement the posterior right here is basically by just calling the post",
    "start": "2405519",
    "end": "2411190"
  },
  {
    "text": "query on my prisoner client but because",
    "start": "2411190",
    "end": "2417460"
  },
  {
    "text": "we have this search string right here so here I want to make sure that I'm able to filter for the right objects I want",
    "start": "2417460",
    "end": "2426640"
  },
  {
    "text": "to provide this stake here and then I",
    "start": "2426640",
    "end": "2436690"
  },
  {
    "text": "actually have two conditions either the title contains the search thing or the",
    "start": "2436690",
    "end": "2448630"
  },
  {
    "text": "content contains my search string and for the post operation it's also fairly",
    "start": "2448630",
    "end": "2456549"
  },
  {
    "text": "straightforward I simply use the post query that I have available here and",
    "start": "2456549",
    "end": "2462940"
  },
  {
    "text": "pass the ID that is provided in the query let's test this so I'm starting my",
    "start": "2462940",
    "end": "2469630"
  },
  {
    "text": "graphical server and going back here and now we were back in the playground that",
    "start": "2469630",
    "end": "2475359"
  },
  {
    "start": "2471000",
    "end": "2732000"
  },
  {
    "text": "I showed you in the very beginning where this time if i refresh this because I",
    "start": "2475359",
    "end": "2480519"
  },
  {
    "text": "commented out all the mutations we just have the posts and post that cure is available at the moment but if I now",
    "start": "2480519",
    "end": "2486759"
  },
  {
    "text": "send the post query I expect to see the two posts that I previously created in",
    "start": "2486759",
    "end": "2491920"
  },
  {
    "text": "the script so those two with with the",
    "start": "2491920",
    "end": "2497349"
  },
  {
    "text": "random content and the random title there is a slight back at the moment",
    "start": "2497349",
    "end": "2503829"
  },
  {
    "text": "because I'm on the latest beta is that sometimes mutation the client are executed twice but that's on the beta so",
    "start": "2503829",
    "end": "2509769"
  },
  {
    "text": "you can still feel safe about all right so the post query works let's actually",
    "start": "2509769",
    "end": "2517029"
  },
  {
    "text": "see if we can also ask for a single post just by ID again",
    "start": "2517029",
    "end": "2523900"
  },
  {
    "text": "and there we go this curry also works so let's go ahead and send the mutations",
    "start": "2527260",
    "end": "2534700"
  },
  {
    "text": "for the create draft mutation we just use the create post mutation that was",
    "start": "2534700",
    "end": "2542030"
  },
  {
    "text": "generated by Prisma for the title we provide the title and for the content",
    "start": "2542030",
    "end": "2547550"
  },
  {
    "text": "the content that were submitted through the query and one quick side note so if",
    "start": "2547550",
    "end": "2553880"
  },
  {
    "text": "you're using typescript then all of these resolver arguments right here and",
    "start": "2553880",
    "end": "2559310"
  },
  {
    "text": "the return values will also be typed so at the moment for me it's like a little bit hard because I need to make sure",
    "start": "2559310",
    "end": "2565400"
  },
  {
    "text": "that I don't introduce any titles if I were using typescript then the compiler",
    "start": "2565400",
    "end": "2570830"
  },
  {
    "text": "would catch all the issues that I introduced in my resolvers form for the",
    "start": "2570830",
    "end": "2578599"
  },
  {
    "text": "published notation we are using the update posts operation that's provided",
    "start": "2578599",
    "end": "2585950"
  },
  {
    "text": "by the Prisma client that take a where argument to describe or to specify which",
    "start": "2585950",
    "end": "2592580"
  },
  {
    "text": "posts should be updated and then what data we want to update update so we want",
    "start": "2592580",
    "end": "2598339"
  },
  {
    "text": "to set the published field to true and finally for delete we have the delete",
    "start": "2598339",
    "end": "2605510"
  },
  {
    "text": "post mutation where we can also provide",
    "start": "2605510",
    "end": "2611330"
  },
  {
    "text": "the ID of the we need it let's start the",
    "start": "2611330",
    "end": "2616820"
  },
  {
    "text": "server oh so now graph your complains because I only implemented the resolvers",
    "start": "2616820",
    "end": "2622190"
  },
  {
    "text": "and it's trying to match those resolvers against the graphical schema but because",
    "start": "2622190",
    "end": "2628040"
  },
  {
    "text": "currently there is no mutation complaints so I'm putting in the definition of the mutation starting the",
    "start": "2628040",
    "end": "2633920"
  },
  {
    "text": "server refreshing the playground I see that all my operations are back I can go",
    "start": "2633920",
    "end": "2641630"
  },
  {
    "text": "ahead and create a new draft",
    "start": "2641630",
    "end": "2645130"
  },
  {
    "text": "so this probably again was created yeah and was created twice so let's use the",
    "start": "2646930",
    "end": "2653090"
  },
  {
    "text": "delete post mutation to get rid of one of those and let's see now we should",
    "start": "2653090",
    "end": "2664610"
  },
  {
    "text": "only have one left that's the case all",
    "start": "2664610",
    "end": "2671510"
  },
  {
    "text": "right that's the demo how you can build your graphical server with prisoner before I let you go I quickly want to",
    "start": "2671510",
    "end": "2678410"
  },
  {
    "text": "add that we care a lot about the graphical community and we're hosting the graphical conf next year here in",
    "start": "2678410",
    "end": "2686330"
  },
  {
    "text": "Berlin so we rebranded what was formerly actually called the graphical in Europe conference this year we had around 500",
    "start": "2686330",
    "end": "2693110"
  },
  {
    "text": "attendees last year there were 300 attendees we had speakers from github Facebook from Twitter from Shopify from",
    "start": "2693110",
    "end": "2700670"
  },
  {
    "text": "Yelp so really high profile companies that are using graphical in production today next we also had the gravity are",
    "start": "2700670",
    "end": "2706520"
  },
  {
    "text": "co-creators speak at the event so I can only recommend if you're interested in",
    "start": "2706520",
    "end": "2711860"
  },
  {
    "text": "graphical and how you can introduce it in your company that you get your tickets for graphical context year and",
    "start": "2711860",
    "end": "2717640"
  },
  {
    "text": "that's all I have thank you so much [Applause]",
    "start": "2717640",
    "end": "2729058"
  }
]