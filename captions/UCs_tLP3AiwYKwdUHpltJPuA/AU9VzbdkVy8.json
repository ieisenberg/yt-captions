[
  {
    "text": "well so yeah I was I was involved in Java generics for a while there back then I think some people blame me for",
    "start": "1199",
    "end": "7439"
  },
  {
    "text": "wild cards um which may have been been while um Microsoft hired me you know",
    "start": "7439",
    "end": "13200"
  },
  {
    "text": "he's he's good at uh as at uh um ruining the story for the Java guys um so I",
    "start": "13200",
    "end": "20359"
  },
  {
    "text": "apologize for that um but I beted my ways I now work on the C language at Microsoft um these are great times to be",
    "start": "20359",
    "end": "29000"
  },
  {
    "text": "um in that position because uh stuff is just um going pretty",
    "start": "29000",
    "end": "34280"
  },
  {
    "text": "crazy around CP and.net right now uh we have um the the thing that's sort of at",
    "start": "34280",
    "end": "39680"
  },
  {
    "text": "the core of my talk today is what we call Project Roslin for no particular reason other than it's named after a a",
    "start": "39680",
    "end": "45800"
  },
  {
    "text": "little town in uh in central Washington State um which is sort of a a completely",
    "start": "45800",
    "end": "51960"
  },
  {
    "text": "reimplemented language engine if you will for uh C and also for Visual Basic um so you can just sort of generically",
    "start": "51960",
    "end": "59280"
  },
  {
    "text": "apply and for Visual Basic wherever appropriate in the rest of this talk and I won't mention it again um uh a",
    "start": "59280",
    "end": "66000"
  },
  {
    "text": "language engine that is yes a compiler but also uh the language service for uh",
    "start": "66000",
    "end": "71119"
  },
  {
    "text": "IDE support um working in a sort of mostly tool agnostic way to serve up um",
    "start": "71119",
    "end": "76720"
  },
  {
    "text": "information about the language in real time and also um a driver for any kind of static analysis you want to do over",
    "start": "76720",
    "end": "82960"
  },
  {
    "text": "the language something that understand source code and produce a source code with extremely high fidelity that's that's the core of that project and",
    "start": "82960",
    "end": "88960"
  },
  {
    "text": "we've then sort of going to rebuild all our tooling for C on top of that um and so we're going to be playing with what",
    "start": "88960",
    "end": "95479"
  },
  {
    "text": "that means um during this talk we're also open source about a year ago we took uh the uh C compiler open source on",
    "start": "95479",
    "end": "103799"
  },
  {
    "text": "codeplex and then a couple of months ago in January we moved to GitHub because um",
    "start": "103799",
    "end": "108920"
  },
  {
    "text": "otherwise you're not really open source apparently um there a whole lot more uh fun going on there uh we also um",
    "start": "108920",
    "end": "116960"
  },
  {
    "text": "recently open sourced what we call Net core it's sort of the modern componentized version of net um that is",
    "start": "116960",
    "end": "124880"
  },
  {
    "text": "now completely open source and um maybe not completely done but at least uh uh",
    "start": "124880",
    "end": "130360"
  },
  {
    "text": "the work is going out out there on GitHub uh for a a CLR that is um that",
    "start": "130360",
    "end": "137160"
  },
  {
    "text": "can run on much smaller footprint because it's uh well componentized than that um is a crossplatform so it will",
    "start": "137160",
    "end": "144680"
  },
  {
    "text": "run on Linux and Mac as well um and so withn net",
    "start": "144680",
    "end": "150480"
  },
  {
    "text": "um going crossplatform in Anger um being able to uh for instance run in all the",
    "start": "150480",
    "end": "156319"
  },
  {
    "text": "different kinds of VMS that we offer up in Azure or whatever that's really important for us um it also means that",
    "start": "156319",
    "end": "162319"
  },
  {
    "text": "we can now consider um having crossplatform tooling support as well um",
    "start": "162319",
    "end": "167640"
  },
  {
    "text": "and again the the the rosling um language engine plays a core part in that and how would you do how would you",
    "start": "167640",
    "end": "174640"
  },
  {
    "text": "do uh c um have a great C editing experience from some tool on let's say",
    "start": "174640",
    "end": "180879"
  },
  {
    "text": "Sublime Text or whatever well there's an answer for that because of because of this infrastructure and we actually have",
    "start": "180879",
    "end": "186200"
  },
  {
    "text": "our own Visual Studio code lightweight editor that we just released that is on",
    "start": "186200",
    "end": "191440"
  },
  {
    "text": "um across these uh these three Platforms in particular right now um there's an uh",
    "start": "191440",
    "end": "198799"
  },
  {
    "text": "an another open project going on called omnisharp which um actually again",
    "start": "198799",
    "end": "204319"
  },
  {
    "text": "benefits from having a core language engine written in C putting um a putting",
    "start": "204319",
    "end": "210400"
  },
  {
    "text": "a layer around it making it essentially a standalone language server if you will that you can run on your machine and talk to Via protocol to get completion",
    "start": "210400",
    "end": "217760"
  },
  {
    "text": "events and other kinds of things from idees so that rather than having to do a",
    "start": "217760",
    "end": "223280"
  },
  {
    "text": "completely new a deep integration of of language understanding into your ID you",
    "start": "223280",
    "end": "228400"
  },
  {
    "text": "just have this sort of loosely coupled you just need a little thing that can talk to the language server and so we're",
    "start": "228400",
    "end": "233959"
  },
  {
    "text": "hoping to see C start showing up in many more IDs over the next year or so so um",
    "start": "233959",
    "end": "239879"
  },
  {
    "text": "if C wasn't for you a year ago it may be now um if it isn't now it may be a year from now um we're definitely looking at",
    "start": "239879",
    "end": "246680"
  },
  {
    "text": "going out in a lot more places into a lot higher quality of the development experience um at all levels um we're",
    "start": "246680",
    "end": "254120"
  },
  {
    "text": "also doing a lot of our design now completely in the open it used to be that we sat around as as gillad braa",
    "start": "254120",
    "end": "259519"
  },
  {
    "text": "used to say in Smoke fill rooms and planned the future of c and someday uh",
    "start": "259519",
    "end": "264520"
  },
  {
    "text": "two years later we would come out at a big conference and say Tada here is here's the word here's what we're doing",
    "start": "264520",
    "end": "269759"
  },
  {
    "text": "people say oh wish wish they'd asked us before they didn't usually say that but um we we just totally opened that",
    "start": "269759",
    "end": "276680"
  },
  {
    "text": "process up we we're still designing we're still planning even as as version",
    "start": "276680",
    "end": "282199"
  },
  {
    "text": "C 6 is coming out now in the next couple of months uh we're already designing on",
    "start": "282199",
    "end": "287240"
  },
  {
    "text": "c 7 but we're doing it completely in the open we're putting the sign notes out we're taking proposals on GitHub uh lots",
    "start": "287240",
    "end": "293080"
  },
  {
    "text": "of discussion lots of uh of feedback um so um it's a nice nice Open Cross",
    "start": "293080",
    "end": "299680"
  },
  {
    "text": "platform world to be in but that's sort of the context uh I want to start focusing in on the rosling engine itself",
    "start": "299680",
    "end": "306039"
  },
  {
    "text": "um so it works both as a batch compiler it'll generate ilil um um and it's also",
    "start": "306039",
    "end": "312520"
  },
  {
    "text": "at the same time the driver for the ID so a big challenge here for us is the that they're sort of conflicting um uh",
    "start": "312520",
    "end": "319280"
  },
  {
    "text": "pressures on L language engine for those two purposes uh for batch compilation you want to focus on throughput uh",
    "start": "319280",
    "end": "326520"
  },
  {
    "text": "correctness uh you want to produce you know uh great executable code based on",
    "start": "326520",
    "end": "332080"
  },
  {
    "text": "correct programs and that's that's a main and you want to do that fast right so that's a main pressure on there whereas in in an ID you want to be",
    "start": "332080",
    "end": "338680"
  },
  {
    "text": "responsive uh you want to have great error recovery so you want to be able to deal when somebody's typing in an idid",
    "start": "338680",
    "end": "344520"
  },
  {
    "text": "the code is wrong most of the time and you want to be able to deal with that in a graceful manner right it's only like",
    "start": "344520",
    "end": "349720"
  },
  {
    "text": "fraction of the time that they actually happen to have a um a well formed syntax tree so uh We've uh We've really sort of",
    "start": "349720",
    "end": "357479"
  },
  {
    "text": "um taken those pressures and and pushed on both insisting that we wanted the language understanding to be implemented",
    "start": "357479",
    "end": "363120"
  },
  {
    "text": "only once you can't have if you have separate implementations for different purposes they will drift apart they won't be uh to full quality so we've",
    "start": "363120",
    "end": "370800"
  },
  {
    "text": "insisted on having it in one place and I'll show you some of some of why um actually this next Point uh speaks to it",
    "start": "370800",
    "end": "379080"
  },
  {
    "text": "um at the core of rosling is an object model of code that's an API okay that",
    "start": "379080",
    "end": "384240"
  },
  {
    "text": "represents source code um so uh syntax trees fully concrete syntax trees all",
    "start": "384240",
    "end": "390680"
  },
  {
    "text": "the way down to the individual tokens in Whit space and so on uh represented as data structures in a public API that",
    "start": "390680",
    "end": "396560"
  },
  {
    "text": "anyone can access right and Target at source code in the tool or as a standalone analysis uh process or",
    "start": "396560",
    "end": "403880"
  },
  {
    "text": "whatever um you can also get a semantic information all kinds of binding information and all that in um in in an",
    "start": "403880",
    "end": "411280"
  },
  {
    "text": "API that's completely immutable okay so we represent all these vast trees are",
    "start": "411280",
    "end": "416479"
  },
  {
    "text": "immutable and we use all the tricks in the book for working with the mutable data types um including lots of sharing",
    "start": "416479",
    "end": "422879"
  },
  {
    "text": "and and incremental um uh modific non-destructive modification creating new trees out of old ones by reusing you",
    "start": "422879",
    "end": "429720"
  },
  {
    "text": "know uh 99% of of the sub trees um and uh and at the same time also",
    "start": "429720",
    "end": "437199"
  },
  {
    "text": "using laziness and other techniques and so on so so we've done all the work to make these very efficient data",
    "start": "437199",
    "end": "443280"
  },
  {
    "text": "structures to work with for anyone else um both if you're using them in batch",
    "start": "443280",
    "end": "448680"
  },
  {
    "text": "mode and and in sort of sort of um an interactive mode as part of a tooling experience",
    "start": "448680",
    "end": "454319"
  },
  {
    "text": "um and again yes it's open source we take contributions in GitHub come and visit us on uh github.com net rosling",
    "start": "454319",
    "end": "463639"
  },
  {
    "text": "and um and uh pitch in there so I'm not really uh I don't have a lot of slides",
    "start": "463639",
    "end": "469960"
  },
  {
    "text": "um I'm more sort of a coding live and possibly Crash and Burn kind of guy um",
    "start": "469960",
    "end": "476639"
  },
  {
    "text": "so uh today I'm going in a minute I'm going to switch over and we're going to spend essentially the rest of our time",
    "start": "476639",
    "end": "482000"
  },
  {
    "text": "together in visual studio um and um and",
    "start": "482000",
    "end": "487440"
  },
  {
    "text": "uh I'll show you some things and we can we can uh take it from there all right so what we're going to look at is I'm",
    "start": "487440",
    "end": "492479"
  },
  {
    "text": "going to walk over here because I forgot my watch what we're going to look at is uh some new language features that we kind of had time to build in between",
    "start": "492479",
    "end": "498840"
  },
  {
    "text": "building this all this infrastructure and they're kind of fun um maybe a little lightweight uh it's definitely",
    "start": "498840",
    "end": "505080"
  },
  {
    "text": "cop 6 is not one of those releases to revolutionize the world it's essentially about",
    "start": "505080",
    "end": "510240"
  },
  {
    "text": "cleaning up your code and getting rid of some of some boiler plate making your C code more concise and I'm going to show some examples of that it's not going to",
    "start": "510240",
    "end": "516479"
  },
  {
    "text": "be a thorough breakdown of everything that's going on I'll point you to where you can find that online if you want to",
    "start": "516479",
    "end": "522120"
  },
  {
    "text": "um we're going also see how russling plays in the ID how you can build your own analyzers make them work in the ID",
    "start": "522120",
    "end": "529200"
  },
  {
    "text": "uh uh some improvements to the debugging experience and then we'll go and build our own analyzer based on the rling API",
    "start": "529200",
    "end": "534480"
  },
  {
    "text": "and and just uh just to feel that sort of easy extensibility um",
    "start": "534480",
    "end": "540079"
  },
  {
    "text": "of uh sort of language-based uh analysis that that anyone can go build and uh",
    "start": "540079",
    "end": "545680"
  },
  {
    "text": "time permitting at the end we can look a little bit at what's going on with c 7 what are our initial thoughts on that um",
    "start": "545680",
    "end": "551320"
  },
  {
    "text": "but if we don't get to it um you know track me down um hunt me down wrestle me",
    "start": "551320",
    "end": "556360"
  },
  {
    "text": "to the floor at the party tonight and ask me until I you know I promise you to uh to put in your favorite feature um",
    "start": "556360",
    "end": "563560"
  },
  {
    "text": "and this we'll talk about later that was exactly the kind of thing that I I didn't want to get to yet um so uh let",
    "start": "563560",
    "end": "569399"
  },
  {
    "text": "let's go to visual studio without further Ado this is the release candidate of visual studio um that was",
    "start": "569399",
    "end": "575519"
  },
  {
    "text": "just Visual Studio 2015 which just released you can go download it it's free it's going to stay free if you're",
    "start": "575519",
    "end": "581680"
  },
  {
    "text": "uh not in an Enterprise Community Edition uh so you can go play with this um at essentially release quality right",
    "start": "581680",
    "end": "588959"
  },
  {
    "text": "now so um here we are in just some sample uh sample program in the new uh",
    "start": "588959",
    "end": "595320"
  },
  {
    "text": "in the new C IDE and and Millennials become the biggest generation in the was Workforce I should have turned that off",
    "start": "595320",
    "end": "600800"
  },
  {
    "text": "probably um I had such lousy internet here before but now it seems to be doing",
    "start": "600800",
    "end": "606480"
  },
  {
    "text": "fine uh so um uh one of the let's start with um with one of the um language",
    "start": "606480",
    "end": "614279"
  },
  {
    "text": "features that uh Java has had for a long time that we've stole uh because um you know uh we like to respond in kind to um",
    "start": "614279",
    "end": "622240"
  },
  {
    "text": "some of the some of the transgressions that have happened in the past so you can now in in cab you also now have a",
    "start": "622240",
    "end": "628000"
  },
  {
    "text": "using static that can put static members of a type into scope um so we'll we'll do let's say system. maath which is a",
    "start": "628000",
    "end": "635600"
  },
  {
    "text": "standard library of of static functions doing math and you'll see it's gray out here because the language engine knows",
    "start": "635600",
    "end": "641880"
  },
  {
    "text": "that you're not using uh making use of it anywhere um and you can see down here",
    "start": "641880",
    "end": "647079"
  },
  {
    "text": "now the math. square root here has become grayed out as well because um",
    "start": "647079",
    "end": "652600"
  },
  {
    "text": "well um you don't actually have to say it anymore so now if I if I hit control do you can see there's a light bulb out",
    "start": "652600",
    "end": "658040"
  },
  {
    "text": "there if I hit control dot I get one of the the built-in um fixes suggested to",
    "start": "658040",
    "end": "663920"
  },
  {
    "text": "me which is you know simplify it it shows a before and after um good solid",
    "start": "663920",
    "end": "669399"
  },
  {
    "text": "IDE Behavior here certainly better than what Visual Studio users are used to maybe users of other tools um don't",
    "start": "669399",
    "end": "676160"
  },
  {
    "text": "aren't really impressed by this and that's okay um uh still a lot of people um that are that are happy but this is",
    "start": "676160",
    "end": "681959"
  },
  {
    "text": "built-in behavior and and kind of what I want to point out in a minute is this is this built-in behavior is built on those",
    "start": "681959",
    "end": "688680"
  },
  {
    "text": "same API that we're going to go and build on in a minute and I'll show you some custom built analyzers and fixes uh",
    "start": "688680",
    "end": "694519"
  },
  {
    "text": "in a minute that have the same behavior and distinguishable you can essentially plug into the ID um Visual Studio or any",
    "start": "694519",
    "end": "701399"
  },
  {
    "text": "other ID that will support this okay so that was um that was the first little language feature there um let's just",
    "start": "701399",
    "end": "708639"
  },
  {
    "text": "also go let's do it again uh with uh system. console I believe in Java it's",
    "start": "708639",
    "end": "715880"
  },
  {
    "text": "are there any Java programmers in here did they all leave the room wow okay that's a few good because I'm",
    "start": "715880",
    "end": "722639"
  },
  {
    "text": "I'm um I'm operating under the assumption that it's not all just C folks uh though it seems to almost be",
    "start": "722639",
    "end": "728720"
  },
  {
    "text": "who's not a c developer in here oh good thank you great almost half I was",
    "start": "728720",
    "end": "734720"
  },
  {
    "text": "worried there for a second um um there's a program here that has a bunch of",
    "start": "734720",
    "end": "740199"
  },
  {
    "text": "occurrences of console or ride line there's also this ability to go and say well um fix all of them in the document",
    "start": "740199",
    "end": "746480"
  },
  {
    "text": "you get a nice preview uh all four I can turn them on or off apply after the",
    "start": "746480",
    "end": "751760"
  },
  {
    "text": "preview and boom okay nice build-in behavior um now",
    "start": "751760",
    "end": "758920"
  },
  {
    "text": "um let's go look at um these um we have these short little",
    "start": "758920",
    "end": "766399"
  },
  {
    "text": "methods and properties here here's a method uh that Returns the two string is an implementation of two string here's a",
    "start": "766399",
    "end": "772160"
  },
  {
    "text": "property the computer property with a getter the return some stuff and you'll see that stuff here is gray out as well",
    "start": "772160",
    "end": "778600"
  },
  {
    "text": "well that is not the that's not Visual Studio itself graying out these things",
    "start": "778600",
    "end": "783880"
  },
  {
    "text": "that is a a userb built plugin saying you don't need this um consider using an",
    "start": "783880",
    "end": "790040"
  },
  {
    "text": "expression bed member so what I have is I installed a little extension that will suggest use of the new language features",
    "start": "790040",
    "end": "796680"
  },
  {
    "text": "to me so whenever you can use one of the new language features it'll suggest to do so because it's probably going to make your code nicer so I'm going to say",
    "start": "796680",
    "end": "803519"
  },
  {
    "text": "okay it looks like there a light bulb it may even want to fix it for me use expression bed member it says well sure",
    "start": "803519",
    "end": "809880"
  },
  {
    "text": "let me go do that that's a nice preview that looks good um and that the bug that it jumps there has been fixed by the way",
    "start": "809880",
    "end": "817360"
  },
  {
    "text": "um uh oh I did it on this one down here instead uh never mind that's a property same idea um so it fixes to this uh new",
    "start": "817360",
    "end": "824680"
  },
  {
    "text": "shorter syntax here which uses a what we should probably call a function error a proper function eror with an equal sign",
    "start": "824680",
    "end": "830920"
  },
  {
    "text": "not a not that little skinny minus there that some other languages have for their lambdas um uh to say um you know why why",
    "start": "830920",
    "end": "840279"
  },
  {
    "text": "why provide a whole statement body for for the simple uh method or the simple",
    "start": "840279",
    "end": "845720"
  },
  {
    "text": "property when you can just put the expression after all lambdas allow Expressions at the bodies as well right",
    "start": "845720",
    "end": "851600"
  },
  {
    "text": "do they in Java or do lambdas have they have to have statement bodies oh who are you who",
    "start": "851600",
    "end": "857040"
  },
  {
    "text": "are you well here's an idea for you um allow it on uh allow it on uh on function members",
    "start": "857040",
    "end": "864160"
  },
  {
    "text": "too so um so this so this whole Behavior the the preview and everything thing was",
    "start": "864160",
    "end": "869399"
  },
  {
    "text": "computed from something that they built in that did not built in but that just one of my colleagues built and uploaded",
    "start": "869399",
    "end": "875639"
  },
  {
    "text": "as an extension um analyzer and fix um you know just provided by those um so we",
    "start": "875639",
    "end": "883880"
  },
  {
    "text": "can go you can see you can do the same for these operator overloads here um which also don't have in Java um and we",
    "start": "883880",
    "end": "891639"
  },
  {
    "text": "can we can just oh hang on um we can just go and um do them all in one Fell",
    "start": "891639",
    "end": "898000"
  },
  {
    "text": "Swoop here and and the the whole point again is uh",
    "start": "898000",
    "end": "904199"
  },
  {
    "text": "don't don't have uh don't don't have so much boiler plate lying around just just write your code concisely when it's when",
    "start": "904199",
    "end": "910560"
  },
  {
    "text": "it's simple make that stand out so so that's a point of the language I'm kind of intermixing language and ID features",
    "start": "910560",
    "end": "915839"
  },
  {
    "text": "here just for uh to make you uh completely confused um so that's that um let's look",
    "start": "915839",
    "end": "923839"
  },
  {
    "text": "at so that was also so that's an example of some um um",
    "start": "923839",
    "end": "929680"
  },
  {
    "text": "some analyzers that showed a problem or a suggestion with the code and then there was a fix for it um there's Al you",
    "start": "929680",
    "end": "935279"
  },
  {
    "text": "can also build your own refractor angs so C now actually does have a significant number of refracturing as",
    "start": "935279",
    "end": "940920"
  },
  {
    "text": "opposed to like two or something um but you can also build your own so if you look at string. format here it's it's",
    "start": "940920",
    "end": "947399"
  },
  {
    "text": "not marked in any way but if I go there and ask hey what can I do here it's going to suggest that well uh you can",
    "start": "947399",
    "end": "953639"
  },
  {
    "text": "expand that expression bed member right back out if you want to but you can also convert to an interpolated string so",
    "start": "953639",
    "end": "959079"
  },
  {
    "text": "interpolated strings people might know from other languages it's the idea that you don't need to do a gnarly Library",
    "start": "959079",
    "end": "964600"
  },
  {
    "text": "call in order to have your code formatted this it's actually sort of built-in Syntax for it in the language",
    "start": "964600",
    "end": "969639"
  },
  {
    "text": "and we have that too here string. format Inn net you have to put these numbers and curries inside of the format string",
    "start": "969639",
    "end": "975720"
  },
  {
    "text": "and they refer to positions of the subsequent arguments and that's just a pain you you add one and you remove one",
    "start": "975720",
    "end": "981240"
  },
  {
    "text": "and you move it around in the string and all of a sudden it's all out of alignment and you're full of bugs um so",
    "start": "981240",
    "end": "986279"
  },
  {
    "text": "why not uh why not turn this into um um why not take and choose that one oh",
    "start": "986279",
    "end": "993279"
  },
  {
    "text": "that was the wrong one um and choose to convert to interpolated string and it'll use a syntax here where",
    "start": "993279",
    "end": "1000480"
  },
  {
    "text": "you put a dollar in front of a string and that turns things with curries into real holes that you can put expressions",
    "start": "1000480",
    "end": "1005959"
  },
  {
    "text": "in and they will just get formatted right into place there um and so string formatting becomes a lot more concise in",
    "start": "1005959",
    "end": "1013160"
  },
  {
    "text": "the language um there are also hidden tricks that I'm not going to show you if you don't like the the formating to",
    "start": "1013160",
    "end": "1019480"
  },
  {
    "text": "current culture that is default here there are hidden tricks that you can do it differently but I don't want to show those um so yet another little language",
    "start": "1019480",
    "end": "1026918"
  },
  {
    "text": "feature um let's get to some of the maybe slightly more interesting ones",
    "start": "1026919",
    "end": "1031959"
  },
  {
    "text": "actually let me you know most IDs nowadays have a have a good uh inline rename refactoring and we have one as",
    "start": "1031959",
    "end": "1039038"
  },
  {
    "text": "well now um hit F2 there on a name and you and you get an inline REM rename",
    "start": "1039039",
    "end": "1044600"
  },
  {
    "text": "experience of course if I rename to just to show you how deeply this engine",
    "start": "1044600",
    "end": "1050640"
  },
  {
    "text": "understands the language if you rename a keyword it will escape the keyword it will resolve the conflict for you essentially if you rename to",
    "start": "1050640",
    "end": "1059200"
  },
  {
    "text": "um uh let's say y it'll tell you that here's a conflict I can't resolve and",
    "start": "1059200",
    "end": "1065240"
  },
  {
    "text": "give you give your uh red everywhere let's um let's see if if I rename it to Let's",
    "start": "1065240",
    "end": "1071600"
  },
  {
    "text": "actually uh hang on a second um let's expand this Constructor here if I rename",
    "start": "1071600",
    "end": "1077240"
  },
  {
    "text": "it to say uh lowercase x you'll see that down in the Constructor it'll automatically",
    "start": "1077240",
    "end": "1083679"
  },
  {
    "text": "resolve the conflict between the two lowercase X's uh by putting a this do in front so we essentially have a mechanism",
    "start": "1083679",
    "end": "1089919"
  },
  {
    "text": "in there that takes any any piece of code that may be affected expands it to",
    "start": "1089919",
    "end": "1095799"
  },
  {
    "text": "the most elaborated syntax that will get the right answer and then removes everything that can be removed without",
    "start": "1095799",
    "end": "1101559"
  },
  {
    "text": "changing its meaning and we use that in refactoring support automatically to um",
    "start": "1101559",
    "end": "1106840"
  },
  {
    "text": "to fix up conflicts whenever we can to the shortest possible way of of expressing the meaning of what was there",
    "start": "1106840",
    "end": "1113039"
  },
  {
    "text": "before even if the thing there no longer means that so that you can trust your refractor rings and um and don't have to",
    "start": "1113039",
    "end": "1120559"
  },
  {
    "text": "kind of double check yourself all the time okay um now for some fun stuff",
    "start": "1120559",
    "end": "1126799"
  },
  {
    "text": "maybe um here is a method that takes this point class that I have and turns",
    "start": "1126799",
    "end": "1132679"
  },
  {
    "text": "or takes adjacent object and and turns it into Point um so first it checks is",
    "start": "1132679",
    "end": "1138200"
  },
  {
    "text": "it um is it actually in the right shape then if it's not it throws an um an exception here and if it is it turns it",
    "start": "1138200",
    "end": "1145039"
  },
  {
    "text": "into a point by creating new one here so um uh you see that there's a squiggle",
    "start": "1145039",
    "end": "1150400"
  },
  {
    "text": "here because um again my plugged in thing is giving me a warning saying this is probably wrong because you have a",
    "start": "1150400",
    "end": "1157240"
  },
  {
    "text": "string of the same name as an argument that that you took in um so uh if if",
    "start": "1157240",
    "end": "1164159"
  },
  {
    "text": "someone was to go and use the the fancy new uh inline rename on the argument well well uh that name down here",
    "start": "1164159",
    "end": "1171240"
  },
  {
    "text": "wouldn't automatically follow you'd have to remember to include strings and you might forget and so refactoring where",
    "start": "1171240",
    "end": "1177559"
  },
  {
    "text": "there string representations of program names around is a dangerous business and",
    "start": "1177559",
    "end": "1182840"
  },
  {
    "text": "we figured it was best to uh address this in the language so there's actually here a um a refracturing to use a new NE",
    "start": "1182840",
    "end": "1189840"
  },
  {
    "text": "feature which is just essentially um pass any named entity from the language",
    "start": "1189840",
    "end": "1195720"
  },
  {
    "text": "and get the string out um all result that comp time of course just to a string um so that you know if you go and",
    "start": "1195720",
    "end": "1203280"
  },
  {
    "text": "and do a rename now it it works across uh this guy as well here if you if you",
    "start": "1203280",
    "end": "1209440"
  },
  {
    "text": "um change the name to something that isn't allowed you get an error and so on",
    "start": "1209440",
    "end": "1215000"
  },
  {
    "text": "so more annoyingly I have this lump of code up here to check is the J in the",
    "start": "1215360",
    "end": "1222559"
  },
  {
    "text": "right shape first of all you know is it null if if if I index into the X which",
    "start": "1222559",
    "end": "1230039"
  },
  {
    "text": "is how the the the J object API works is that null was it there or not and then",
    "start": "1230039",
    "end": "1236799"
  },
  {
    "text": "if it was is its type um H is is it an integer okay so it's all this null",
    "start": "1236799",
    "end": "1242880"
  },
  {
    "text": "checking and null checking is everywhere and it's really annoying and when it's not everywhere it's because you forgot to put it in and you have bugs um so we",
    "start": "1242880",
    "end": "1251000"
  },
  {
    "text": "wanted to make it a little easier with um what is sometimes known as the uh Elvis operator um question Dot you know",
    "start": "1251000",
    "end": "1259039"
  },
  {
    "text": "the two eyes and this this swoop of hair so it's Elvis um uh we call it the null",
    "start": "1259039",
    "end": "1264840"
  },
  {
    "text": "conditional operator um which will is a DOT that will check first if the thing on the left is null and if it is then",
    "start": "1264840",
    "end": "1272080"
  },
  {
    "text": "the whole thing becomes null and otherwise uh you do the dot and get the value out okay so it kind of it's null",
    "start": "1272080",
    "end": "1279600"
  },
  {
    "text": "propagating if you will um if there's null on the left hand side the thing on the right hand side become null instead",
    "start": "1279600",
    "end": "1285120"
  },
  {
    "text": "of throwing an exception and so of course null is not equal to J toen type. integer so in this case we can just go",
    "start": "1285120",
    "end": "1291279"
  },
  {
    "text": "and remove the explicit null check here use question do instead do that here as well and actually you can do it for",
    "start": "1291279",
    "end": "1297720"
  },
  {
    "text": "indexing as well so uh I can put a qu um I can put a question mark here and that",
    "start": "1297720",
    "end": "1303039"
  },
  {
    "text": "means only do the indexing if Json wasn't null and so um I can actually um",
    "start": "1303039",
    "end": "1310120"
  },
  {
    "text": "remove all these null checks here and just sort of have the essence of the code stand out I'm saying if the um Json",
    "start": "1310120",
    "end": "1318919"
  },
  {
    "text": "object doesn't have an X and A Y of type integer throw this exception and that's all it kind of says now",
    "start": "1318919",
    "end": "1326039"
  },
  {
    "text": "okay so um that is pretty much all I'm going to show you about C 6 there are",
    "start": "1326039",
    "end": "1332880"
  },
  {
    "text": "more features they have that same kind of flavor of little things but hopefully your code looks nicer after you applied",
    "start": "1332880",
    "end": "1339000"
  },
  {
    "text": "them um and uh then unless you have some quick questions you want to throw in",
    "start": "1339000",
    "end": "1345120"
  },
  {
    "text": "there um any quick questions",
    "start": "1345120",
    "end": "1350520"
  },
  {
    "text": "yeah um I think that the SLE binding I think that doesn't completely work yet we're working on it um that's that's a",
    "start": "1354640",
    "end": "1362200"
  },
  {
    "text": "place where they they don't necessarily we we don't necessarily talk to each other at",
    "start": "1362200",
    "end": "1368039"
  },
  {
    "text": "the right point so that is where name shows up in in markup um um but now at",
    "start": "1368039",
    "end": "1373440"
  },
  {
    "text": "least we have the foundations in place to be able to do it so hopefully that works one more question this refactoring",
    "start": "1373440",
    "end": "1379320"
  },
  {
    "text": "implemented inos or is it part of visual studio uh the rename refactoring is part",
    "start": "1379320",
    "end": "1386080"
  },
  {
    "text": "of Visual Studio using things from rosling okay um the other refracturing I",
    "start": "1386080",
    "end": "1391600"
  },
  {
    "text": "I showed you before the other refactorings I've showed you are completely there's a framework that you can completely plug into where all you",
    "start": "1391600",
    "end": "1398559"
  },
  {
    "text": "have to write is language is is tool agnostic it could be plugged into other tools as well if they supported it Bally",
    "start": "1398559",
    "end": "1405960"
  },
  {
    "text": "like I can service refactoring right emac could use a this service and have",
    "start": "1405960",
    "end": "1412320"
  },
  {
    "text": "refactorings in it yes um so I mean that's a promise at least right we don't",
    "start": "1412320",
    "end": "1417480"
  },
  {
    "text": "we have nobody's actually built it for emac I think yet oh maybe they have the omnisharp guys have built quite a lot of",
    "start": "1417480",
    "end": "1423159"
  },
  {
    "text": "this for quite a lot of different uh editors you should really go and visit the omnisharp um website if you're",
    "start": "1423159",
    "end": "1428520"
  },
  {
    "text": "interested I think there's a lot there's a lot of room for improvement still um but it can definitely be done um so I'm",
    "start": "1428520",
    "end": "1435960"
  },
  {
    "text": "going to move away from this toy example and I am going going to now change uh gear a little bit",
    "start": "1435960",
    "end": "1442840"
  },
  {
    "text": "and we should and we should Implement one of these analyzers together because that gives us a chance to kind of look",
    "start": "1442840",
    "end": "1448159"
  },
  {
    "text": "at the rosling infrastructure and how it works talk about how it works um so what",
    "start": "1448159",
    "end": "1453320"
  },
  {
    "text": "I did here is um I actually I I went and started a new project there that's actually a project template if you go",
    "start": "1453320",
    "end": "1459760"
  },
  {
    "text": "and say new project in visual studio um and you install the right extensions for it um you can go and click on",
    "start": "1459760",
    "end": "1467039"
  },
  {
    "text": "extensibility here once it wakes up there we are and I can do a standalone",
    "start": "1467039",
    "end": "1472520"
  },
  {
    "text": "code analysis tool or I can do an analyze with code fix which is what I've done here I can build a refactoring and",
    "start": "1472520",
    "end": "1478679"
  },
  {
    "text": "it kind of comes with some some uh pre-built some already working code out of the box that does something stupid",
    "start": "1478679",
    "end": "1484799"
  },
  {
    "text": "but shows you how to how to get started okay so I did that already and I did clean it up and put the right things in",
    "start": "1484799",
    "end": "1491000"
  },
  {
    "text": "um but um I actually have an empty implementation of the analyzer right",
    "start": "1491000",
    "end": "1496559"
  },
  {
    "text": "here so you see this method down here is empty um so um I this this uh method",
    "start": "1496559",
    "end": "1502799"
  },
  {
    "text": "here gets gets registered up here as one of the actions that will analyze code um",
    "start": "1502799",
    "end": "1508360"
  },
  {
    "text": "and it uh it sort of registers with some kinds of of syntax noes that it wants to",
    "start": "1508360",
    "end": "1513960"
  },
  {
    "text": "get called with so whenever um the tool when you do an edit and the tool analyzes the code um and there are if",
    "start": "1513960",
    "end": "1521640"
  },
  {
    "text": "statements or else claes in the code this method will get called with an object representation of that so that's",
    "start": "1521640",
    "end": "1527520"
  },
  {
    "text": "what we're going to go and um and and cause to happen so when you when you enter debug mode in one of these",
    "start": "1527520",
    "end": "1532760"
  },
  {
    "text": "projects that are meant to build analyzers the way it debugs is actually it launches visual studio and en nested",
    "start": "1532760",
    "end": "1539039"
  },
  {
    "text": "visual studio and installs the uh the um analyzer and code fix into that it's a",
    "start": "1539039",
    "end": "1545240"
  },
  {
    "text": "it's a version that lives in its own Hive as we call it uh has its own settings and so it can install install",
    "start": "1545240",
    "end": "1550320"
  },
  {
    "text": "its own extensions so now I start a visual studio from Visual Studio it's being debugged from the out of visual studio and I'm going to open um a p P of",
    "start": "1550320",
    "end": "1558880"
  },
  {
    "text": "uh of just sample code here to talk about the fix we're going to build which is um so one of the ways that that",
    "start": "1558880",
    "end": "1565559"
  },
  {
    "text": "people are going to use analyzers is to rec is for Style Guidelines right your company in your company um it's a sin",
    "start": "1565559",
    "end": "1571919"
  },
  {
    "text": "and a crime to have if statements or else Clauses that aren't in curlies where the body isn't in a curly so we're",
    "start": "1571919",
    "end": "1577960"
  },
  {
    "text": "going to we're going to put a warning in to to tell you please put curlies around this um and um and so that's one kind of",
    "start": "1577960",
    "end": "1586919"
  },
  {
    "text": "analyzis that you might want to consider I think the other one possibly more important is the or equally important is",
    "start": "1586919",
    "end": "1593120"
  },
  {
    "text": "to wrap up analyzers with apis that you're Distributing um that come along",
    "start": "1593120",
    "end": "1599080"
  },
  {
    "text": "that know about the apis and help people use the apis in the right way saying um",
    "start": "1599080",
    "end": "1604440"
  },
  {
    "text": "you should not use the Constructor in this thing you should call the create method or you should not this and you should not that so that you're guided to",
    "start": "1604440",
    "end": "1611159"
  },
  {
    "text": "with fixes and everything to use the API in the right way we call that code aware libraries where the library comes with",
    "start": "1611159",
    "end": "1616640"
  },
  {
    "text": "its own guidance um in in shape with these analyzers okay let's get going",
    "start": "1616640",
    "end": "1622480"
  },
  {
    "text": "here we want to figure out okay we we're going to be presented with some syntax notes in a minute what are those syntax noes well let's go and and open the",
    "start": "1622480",
    "end": "1630279"
  },
  {
    "text": "rosling syntax visualizer um to have a bit of a look at this code here so that's a little",
    "start": "1630279",
    "end": "1635360"
  },
  {
    "text": "helpful tool comes in as an extension that you can just download off the gallery that you know when I click",
    "start": "1635360",
    "end": "1640760"
  },
  {
    "text": "around in the code I can see the tree structure of the code and the properties of of the nodes there I know it's a little tiny here at the font but it say",
    "start": "1640760",
    "end": "1648240"
  },
  {
    "text": "has things like if keyword and under the if keyword there's some white space and here's the if statement and and it kind",
    "start": "1648240",
    "end": "1654600"
  },
  {
    "text": "of just um you can kind of navigate around the code and see what you have there so we're definitely going to be looking at if statements where the",
    "start": "1654600",
    "end": "1661679"
  },
  {
    "text": "expression inside of it the that sits here um where it has curlies in it which",
    "start": "1661679",
    "end": "1667320"
  },
  {
    "text": "it currently does not um so what does it look when it has curlies in it well let's try and put some in and see how",
    "start": "1667320",
    "end": "1673799"
  },
  {
    "text": "that how that changes the tree over there um we don't have that much screen realis State here in this resolution but",
    "start": "1673799",
    "end": "1679519"
  },
  {
    "text": "I'll do my best um let's put a curly around this and we now see that a block",
    "start": "1679519",
    "end": "1685360"
  },
  {
    "text": "appear so apparently a thing with curlies around it is called a block so we essentially analyze is going to look is there a block in in the if statement",
    "start": "1685360",
    "end": "1692679"
  },
  {
    "text": "if not um give a squiggle okay and actually if you want to get a the the",
    "start": "1692679",
    "end": "1698760"
  },
  {
    "text": "full picture um pun intended we can go and and view this as a graph um so uh",
    "start": "1698760",
    "end": "1705679"
  },
  {
    "text": "here's here's that here's the block for instance since that's a syntax graph you can go and look in visual studio and and",
    "start": "1705679",
    "end": "1711000"
  },
  {
    "text": "that's how you learn about you can look at before and after and that's how you learn about what is the transformation I want to make what are what other the",
    "start": "1711000",
    "end": "1717120"
  },
  {
    "text": "patterns I'm going to look for so now I've done that I'm ready to go and start writing my analyzer um but one thing",
    "start": "1717120",
    "end": "1724159"
  },
  {
    "text": "that's really annoying is that um it took some time to start up this nested Visual Studio whenever I want to test",
    "start": "1724159",
    "end": "1730320"
  },
  {
    "text": "what I'm doing I don't want to wait for it to start up anytime so I'm going to write my code while I'm in the debugger it's what's called edit and continue",
    "start": "1730320",
    "end": "1736760"
  },
  {
    "text": "we've had it for many years and Visual Studio it's always sucked completely because it didn't know about new language features and and so there",
    "start": "1736760",
    "end": "1742840"
  },
  {
    "text": "weren't a whole lot of edits you could actually do that's been completely revamped now it knows very many it knows how to do most things that",
    "start": "1742840",
    "end": "1749880"
  },
  {
    "text": "even make sense to compile and keep running so we're just going to write the code um while we um while we're actually",
    "start": "1749880",
    "end": "1757120"
  },
  {
    "text": "executing it uh so I'm going to put a breakpoint in this empty method here and I'm going trigger going to going to",
    "start": "1757120",
    "end": "1762559"
  },
  {
    "text": "trigger a call to the node by going back to my test here and doing an edit so let's just put a space somewhere",
    "start": "1762559",
    "end": "1769120"
  },
  {
    "text": "um there and now it's analyzing the code because there was an edit and so it saw my first if uh statement and it's going",
    "start": "1769120",
    "end": "1776399"
  },
  {
    "text": "to come in here we can see that the context that was passed in it has a node which is a syntax node I'm operating on",
    "start": "1776399",
    "end": "1783640"
  },
  {
    "text": "um and that node is an if statement syntax so that's good if we look in uh",
    "start": "1783640",
    "end": "1790120"
  },
  {
    "text": "the if statement itself has a uh has a lot of stuff on it so you can learn all",
    "start": "1790120",
    "end": "1796240"
  },
  {
    "text": "kinds of things including all kinds of of nitty-gritty details but one thing it does have is a statement that's the nested statement inside of the if so",
    "start": "1796240",
    "end": "1802679"
  },
  {
    "text": "that's the one we want to look at okay but remember we can get called by both uh with both if statements and else",
    "start": "1802679",
    "end": "1808399"
  },
  {
    "text": "Clauses here um so let's write some code to distinguish it so um let's let's try",
    "start": "1808399",
    "end": "1814799"
  },
  {
    "text": "to write the code for if statement if statement is uh context. node that was",
    "start": "1814799",
    "end": "1821880"
  },
  {
    "text": "the one that had the stuff in it um as if statement syntax and it it helps me",
    "start": "1821880",
    "end": "1827679"
  },
  {
    "text": "complete here um so now down here I will now get a an if statement variable as",
    "start": "1827679",
    "end": "1833080"
  },
  {
    "text": "well you just can't see it because oh you can't see it yet because I haven't executed it but let's go and move the instruction pointer it's right over here",
    "start": "1833080",
    "end": "1839799"
  },
  {
    "text": "let's move that that right back up there and run again and",
    "start": "1839799",
    "end": "1845600"
  },
  {
    "text": "now um we have an if statement as well down here because we've ran a little further in the code now we're just going",
    "start": "1845600",
    "end": "1851360"
  },
  {
    "text": "to see if that if statement was actually null if statement well if it's not null",
    "start": "1851360",
    "end": "1859919"
  },
  {
    "text": "and if it's um if it statement is not a block and if statement. statement that's",
    "start": "1863480",
    "end": "1872440"
  },
  {
    "text": "a method to help me ask that question uh is kind of uh syntax kind do uh",
    "start": "1872440",
    "end": "1882760"
  },
  {
    "text": "block so if it's not a block not then we should should that's when we",
    "start": "1882760",
    "end": "1888840"
  },
  {
    "text": "should give it uh a squiggle that's when we should uh warn that something's wrong with your code right does that make sense so we just writing code over an",
    "start": "1888840",
    "end": "1895440"
  },
  {
    "text": "object object model here and um uh what are we going to do well the only thing",
    "start": "1895440",
    "end": "1901360"
  },
  {
    "text": "we really have to muck with is that context there so hopefully it has something it has a report diagnostic method what",
    "start": "1901360",
    "end": "1907279"
  },
  {
    "text": "a um lucky thing how do we get a diagnostic well let's ask it has a",
    "start": "1907279",
    "end": "1912559"
  },
  {
    "text": "create method good uh we need to pass in a descriptor I cheated and and put that uh already in code uh above we need to",
    "start": "1912559",
    "end": "1920399"
  },
  {
    "text": "decide where should where should the location of the squiggle be let's put a squiggle on the if keyword right so just",
    "start": "1920399",
    "end": "1927799"
  },
  {
    "text": "that little keyword so it doesn't like span too much code and maybe uh Shadow other squiggles that you want to see so",
    "start": "1927799",
    "end": "1934279"
  },
  {
    "text": "why don't we take the if statement and get its",
    "start": "1934279",
    "end": "1939519"
  },
  {
    "text": "if uh it's if keyword and take the location of that is there something with location yeah that's a get location",
    "start": "1939519",
    "end": "1945880"
  },
  {
    "text": "method let's do that all right so now I created a a diagnostic um that was",
    "start": "1945880",
    "end": "1951440"
  },
  {
    "text": "somewhat long maybe we could take some of this and Factor it out with a",
    "start": "1951440",
    "end": "1957440"
  },
  {
    "text": "refactoring let's do a introduce local here so it it guesses that I'm looking",
    "start": "1957440",
    "end": "1965039"
  },
  {
    "text": "for a location because the method was called get location um yeah so that's a good name",
    "start": "1965039",
    "end": "1971399"
  },
  {
    "text": "let's keep that I'm doing all this editing while the program is running um so now uh let's go and remove the um the",
    "start": "1971399",
    "end": "1980840"
  },
  {
    "text": "break point drag the instruction pointer up to where we were oh uh I can't do that here did I do",
    "start": "1980840",
    "end": "1989200"
  },
  {
    "text": "something wrong I don't think I did let's just try let's try continue here",
    "start": "1989200",
    "end": "1996120"
  },
  {
    "text": "um and I'm I'm back in my test program here and you see that I get a squiggle",
    "start": "1997320",
    "end": "2002679"
  },
  {
    "text": "on the first if statement so it saw this did not have a a block and then I don't get a squiggle on the next one because",
    "start": "2002679",
    "end": "2008519"
  },
  {
    "text": "it did have a block and that's just that's all it takes now I've written all the logic that it takes to now have um",
    "start": "2008519",
    "end": "2014559"
  },
  {
    "text": "the tool warn me about something and then all we need to do and I'm not going to do it here live but all we need to do",
    "start": "2014559",
    "end": "2020360"
  },
  {
    "text": "is to uh write a fix that transforms the current code into the into the uh future",
    "start": "2020360",
    "end": "2027840"
  },
  {
    "text": "code and I'm going to let's go look at that code but not write it because I don't want to confuse you too much but you kind of get the idea right it's just",
    "start": "2027840",
    "end": "2034399"
  },
  {
    "text": "an object model just poke around ask questions register a little here and there and and you quickly learn it and",
    "start": "2034399",
    "end": "2041080"
  },
  {
    "text": "now you can Implement your company's style um uh guidelines if you want to",
    "start": "2041080",
    "end": "2046399"
  },
  {
    "text": "pester your co-workers with that or you can um put guidance on your apis and so",
    "start": "2046399",
    "end": "2051440"
  },
  {
    "text": "on does that make sense okay so I do want to say that this API is is it's",
    "start": "2051440",
    "end": "2057118"
  },
  {
    "text": "really supposed to be complete and efficient and so we built all our IDE on top of it there's no secret handshake or",
    "start": "2057119",
    "end": "2064320"
  },
  {
    "text": "special language knowledge that our ID has that isn't exposed in this API okay so that is um that is how we know that",
    "start": "2064320",
    "end": "2071599"
  },
  {
    "text": "it's good enough for for uh everyone to use we build our own things on it we",
    "start": "2071599",
    "end": "2077000"
  },
  {
    "text": "could also build the else uh logic uh I don't want to probably bore you with with copying that it's going to be",
    "start": "2077000",
    "end": "2082158"
  },
  {
    "text": "pretty much the same but let's go and uh actually I already so I said I already implemented the fix so you can see here",
    "start": "2082159",
    "end": "2088560"
  },
  {
    "text": "it says if statements and else Clauses should use braces um if I look at the fix here it says add braces",
    "start": "2088560",
    "end": "2095760"
  },
  {
    "text": "um and it shows the difference here so how did I get that diff how did I get a",
    "start": "2095760",
    "end": "2100880"
  },
  {
    "text": "before version and an after version um well let's go look at that so now I add",
    "start": "2100880",
    "end": "2106440"
  },
  {
    "text": "braces it's going to add them there um and if I had implemented for else it would also do that for the else uh else",
    "start": "2106440",
    "end": "2114000"
  },
  {
    "text": "Clauses okay so let's leave the debugging now no I don't want my",
    "start": "2114000",
    "end": "2120240"
  },
  {
    "text": "changes and go and look at you can see there's a diagnostic analyzer here that I just built and that's a code fix",
    "start": "2120240",
    "end": "2126440"
  },
  {
    "text": "provider that um is where the the fix is and there's some boilerplate um but essentially I'm",
    "start": "2126440",
    "end": "2133480"
  },
  {
    "text": "writing a function here that digs into the um that that digs into tries to find",
    "start": "2133480",
    "end": "2141839"
  },
  {
    "text": "out okay all it knows is where am I I have a diagnostic which diagnostic is it well it's that the one with that number",
    "start": "2141839",
    "end": "2147839"
  },
  {
    "text": "and what what piece of code am I on from that we're going to find out um well",
    "start": "2147839",
    "end": "2153280"
  },
  {
    "text": "okay let's get uh the root of the syntax tree for this document here for the the one we're viewing uh and that's a a tool",
    "start": "2153280",
    "end": "2160520"
  },
  {
    "text": "agnostic version of of the document concept let's find the node that it is",
    "start": "2160520",
    "end": "2166720"
  },
  {
    "text": "at the location that we put in the diagnostic when we put the squiggle let's find the the syntax node that's",
    "start": "2166720",
    "end": "2172160"
  },
  {
    "text": "there and actually let's go so that's the if keyword and let's go find its parent which is the if statement okay",
    "start": "2172160",
    "end": "2180079"
  },
  {
    "text": "actually quick aside um if you have a an",
    "start": "2180079",
    "end": "2186280"
  },
  {
    "text": "immutable API that based on sharing of of large parts of your subtree one of the things that you know is that a sub",
    "start": "2186280",
    "end": "2192560"
  },
  {
    "text": "so a subtree can't be it can be part of multiple different trees at the same time so it can't know what his parent is",
    "start": "2192560",
    "end": "2197960"
  },
  {
    "text": "it can't know what its location is that it represents in the source code because it can be multip multiple ones of those",
    "start": "2197960",
    "end": "2203440"
  },
  {
    "text": "and the magic to be able to go to the parent anyway um is is kind of part of",
    "start": "2203440",
    "end": "2209160"
  },
  {
    "text": "the cool architecture that's in here and I can tell you after that's more sort of algorithmic but um we go to the parent",
    "start": "2209160",
    "end": "2216240"
  },
  {
    "text": "um we um we create a variable for the new node and then we go into the if statement or the else Clause case here",
    "start": "2216240",
    "end": "2223680"
  },
  {
    "text": "um because this this is an immutable API so we have to create a new uh a new",
    "start": "2223680",
    "end": "2229960"
  },
  {
    "text": "world from the old world we can't just um mutate it so what we do is we say if",
    "start": "2229960",
    "end": "2235760"
  },
  {
    "text": "it was an if statement Let's uh let's take the statement out of the if statement create a block around it and",
    "start": "2235760",
    "end": "2242760"
  },
  {
    "text": "take that and replace create a new if statement from the old one where where we replace the",
    "start": "2242760",
    "end": "2248319"
  },
  {
    "text": "block for the old thing that was there okay so it's that's kind of the construct a new thing from the old bits",
    "start": "2248319",
    "end": "2254680"
  },
  {
    "text": "now we have a new if statement that has a block with it the original expression inside and then down here we take the",
    "start": "2254680",
    "end": "2261680"
  },
  {
    "text": "new node we we go to the root and we say replace the old node with the new node we go to the document and it says",
    "start": "2261680",
    "end": "2267760"
  },
  {
    "text": "replace the old replace the old rout with the new root and then we return that new document so what we did was",
    "start": "2267760",
    "end": "2274200"
  },
  {
    "text": "create a new data structure from an old one that's all we did and then they whole infrastructure will compute the diff between the two and and present the",
    "start": "2274200",
    "end": "2280760"
  },
  {
    "text": "nice preview and all that based on that computation we did here so that's kind of getting into the immutable",
    "start": "2280760",
    "end": "2286119"
  },
  {
    "text": "programming style that we are um very fond of and why is it good that it's immutable well uh first of all we're",
    "start": "2286119",
    "end": "2293200"
  },
  {
    "text": "handing these trees out to all kinds of people who plug in and we don't want them to mess them up and we don't want to have shared mutable state or",
    "start": "2293200",
    "end": "2299880"
  },
  {
    "text": "something um we don't want people to be able to muck with the model they can build their own but they can't muck with",
    "start": "2299880",
    "end": "2307119"
  },
  {
    "text": "the ex in one um and um but also in order to achieve part of the efficiency",
    "start": "2307119",
    "end": "2314880"
  },
  {
    "text": "of also the batch compile being able to parallelize a lot across you know",
    "start": "2314880",
    "end": "2320359"
  },
  {
    "text": "compiling different parts of the program becomes a lot easier when all the data structures involved are actually mutable there's no risk you don't have to lock",
    "start": "2320359",
    "end": "2326680"
  },
  {
    "text": "anything right you just take a snap snapshot of the universe you compile that if something changes or whatever",
    "start": "2326680",
    "end": "2333440"
  },
  {
    "text": "it's not your problem those are just other universes but you're compiling this one okay so immutable has turned",
    "start": "2333440",
    "end": "2339280"
  },
  {
    "text": "out really well for us it's been a it's been hard to optimize it to where it",
    "start": "2339280",
    "end": "2344400"
  },
  {
    "text": "competes with a C++ program using U mutable structures which is what we had before but it's been worth it like once",
    "start": "2344400",
    "end": "2351400"
  },
  {
    "text": "you get to a couple of cores where're as efficient we get faster if you have more on batch compile um because of this",
    "start": "2351400",
    "end": "2358079"
  },
  {
    "text": "ability to parallelize okay",
    "start": "2358079",
    "end": "2363200"
  },
  {
    "text": "um that is probably what I wanted to show so before I go and talk a little",
    "start": "2363280",
    "end": "2369400"
  },
  {
    "text": "about um the future the the next uh um installment of c and so on I want to ask",
    "start": "2369400",
    "end": "2376280"
  },
  {
    "text": "if there are any questions you have any submitted y",
    "start": "2376280",
    "end": "2383280"
  },
  {
    "text": "ad the new node assignment oh um new node is a local",
    "start": "2387480",
    "end": "2393800"
  },
  {
    "text": "variable that I declared further up uh oh let's see where is it right here so",
    "start": "2393800",
    "end": "2399440"
  },
  {
    "text": "I'm just saying if I'm in the if Case assign the new you know transform the if node if I'm in the else case transform",
    "start": "2399440",
    "end": "2406079"
  },
  {
    "text": "the else node in either case it's going to hold the new syntax node uh the new",
    "start": "2406079",
    "end": "2412240"
  },
  {
    "text": "if or else Clause um and then the rest of the code is just shared to wire it into its right place in a new",
    "start": "2412240",
    "end": "2419839"
  },
  {
    "text": "tree right it it's not obvious that they are",
    "start": "2420160",
    "end": "2425640"
  },
  {
    "text": "wow you guys are going to go do this right after the talk huh yeah at the syntax will there be a",
    "start": "2427920",
    "end": "2436400"
  },
  {
    "text": "constant um oh would would we have a a constant well constant meaning read",
    "start": "2438160",
    "end": "2445640"
  },
  {
    "text": "only it well well this this one is meant to be read only actually this one is",
    "start": "2446720",
    "end": "2453480"
  },
  {
    "text": "this one is mutated later but but uh yeah we could we could say add we could have VAR and Val in the language and",
    "start": "2453480",
    "end": "2459319"
  },
  {
    "text": "that's one of the many many proposals that's there for the next version of the language yeah we",
    "start": "2459319",
    "end": "2464640"
  },
  {
    "text": "we we don't have a notion of readon locals or parameters right now um if we",
    "start": "2464640",
    "end": "2470640"
  },
  {
    "text": "did we already have a readon keyword we would probably let you put the read only keyword and everything and then in the",
    "start": "2470640",
    "end": "2475960"
  },
  {
    "text": "case where it's read only VAR we would let you abbreviate that to Val how about that that that would be one way to",
    "start": "2475960",
    "end": "2481119"
  },
  {
    "text": "approach it um um pull request",
    "start": "2481119",
    "end": "2487400"
  },
  {
    "text": "um I ra my ah yeah great um there are definitely",
    "start": "2487400",
    "end": "2493760"
  },
  {
    "text": "things that where we need to catch up um any other questions on on sort of the whole whole idea here so again",
    "start": "2493760",
    "end": "2500640"
  },
  {
    "text": "um the the idea is this code is now the code that backs all this stuff the whole",
    "start": "2500640",
    "end": "2505839"
  },
  {
    "text": "rosling API um is written in C so it's going to run on all the places where net",
    "start": "2505839",
    "end": "2511680"
  },
  {
    "text": "is going to run now um and and the whole infrastructure should be pluggable into",
    "start": "2511680",
    "end": "2517640"
  },
  {
    "text": "all Ides um as long as they have the right sort of UI Hooks and the right",
    "start": "2517640",
    "end": "2524319"
  },
  {
    "text": "extensibility the right infrastructure to hook that up um underneath right Charles very",
    "start": "2524319",
    "end": "2533079"
  },
  {
    "text": "simar IM gets optimized the real code at some point one thing I always miss though is",
    "start": "2538680",
    "end": "2544640"
  },
  {
    "text": "that we have no Loop or backward all in that tree is there anything available for this where I can say",
    "start": "2544640",
    "end": "2551640"
  },
  {
    "text": "here's my construct it needs to Loop over some data structure while it'sing uh you mean like a recursive",
    "start": "2551640",
    "end": "2558680"
  },
  {
    "text": "Loop or aive Loop whatever but basically be able to",
    "start": "2558680",
    "end": "2564559"
  },
  {
    "text": "have this same syntax tree structure but be able",
    "start": "2564559",
    "end": "2569839"
  },
  {
    "text": "to do um not sure where I I'm not sure I",
    "start": "2569839",
    "end": "2576760"
  },
  {
    "text": "get the question question I can talk to you off okay let's let's let's do that one offline um okay want to talk a little",
    "start": "2576760",
    "end": "2583680"
  },
  {
    "text": "bit about c 7 um so to do that let's go uh let's go",
    "start": "2583680",
    "end": "2590160"
  },
  {
    "text": "to GitHub I'm going to do it in Chrome okay chrome chrome is better with GitHub",
    "start": "2590160",
    "end": "2595400"
  },
  {
    "text": "um so you can laugh um you you are you're sniggering I can",
    "start": "2595400",
    "end": "2601599"
  },
  {
    "text": "hear it well just wait until Edge comes out um so so uh all this stuff is up on",
    "start": "2601599",
    "end": "2609400"
  },
  {
    "text": "on GitHub right and if you want to learn more about the language features you go click here on the on the readme page and",
    "start": "2609400",
    "end": "2615240"
  },
  {
    "text": "here's the list of well okay internet in here not so fast I luckily pulled it up",
    "start": "2615240",
    "end": "2622000"
  },
  {
    "text": "before um uh you can go look at an that's an overview here of all the language",
    "start": "2622000",
    "end": "2627040"
  },
  {
    "text": "features that went into C and VB this time around C 6 VB 14 I believe and if",
    "start": "2627040",
    "end": "2632839"
  },
  {
    "text": "you want to double click on that there's like a document about all the new language features here so if you're interested in digg in more just start",
    "start": "2632839",
    "end": "2637920"
  },
  {
    "text": "there um if you go to um the issues in GitHub um here is here are issues sorted",
    "start": "2637920",
    "end": "2645640"
  },
  {
    "text": "by or filtered by labels saying um area language design and feature request so",
    "start": "2645640",
    "end": "2652760"
  },
  {
    "text": "these are proposals that people some of them are from my team some of them are other people have put up for new",
    "start": "2652760",
    "end": "2658559"
  },
  {
    "text": "language features um and I don't know why there only 10",
    "start": "2658559",
    "end": "2664119"
  },
  {
    "text": "open there and one closed uh this is definitely not the search I was looking for or I I searched for",
    "start": "2664119",
    "end": "2670119"
  },
  {
    "text": "something um I that's more that's about 130 um I filtered it too too hard uh at",
    "start": "2670119",
    "end": "2677000"
  },
  {
    "text": "some point here um so uh there's definitely uh proposals and discussions",
    "start": "2677000",
    "end": "2683079"
  },
  {
    "text": "our our C design process uh involves meeting once or twice a week and and and",
    "start": "2683079",
    "end": "2690240"
  },
  {
    "text": "processing some of the proposals and having thoughts about them and then I write up long notes and I instead of uh",
    "start": "2690240",
    "end": "2697400"
  },
  {
    "text": "sending those around just within the team I put those up on GitHub okay so they're here design notes we started",
    "start": "2697400",
    "end": "2702920"
  },
  {
    "text": "designing C whoa we consume it too how cool is that I love Chrome um",
    "start": "2702920",
    "end": "2709240"
  },
  {
    "text": "um there we started in January and there's already all this stuff up here and so if you're really interested go",
    "start": "2709240",
    "end": "2714880"
  },
  {
    "text": "see what we discussed in um in particular there's I recently put up",
    "start": "2714880",
    "end": "2720440"
  },
  {
    "text": "sort of an overview of the features we've looked at so far and what we thought about them so if I click on that",
    "start": "2720440",
    "end": "2725640"
  },
  {
    "text": "um you know there'll be a list here of some things that uh we rejected some",
    "start": "2725640",
    "end": "2731079"
  },
  {
    "text": "things that we haven't really decided on yet some things that we think really have legs so on here you'll see things",
    "start": "2731079",
    "end": "2736559"
  },
  {
    "text": "like tupal pattern matching records or algebraic data types nullability",
    "start": "2736559",
    "end": "2741960"
  },
  {
    "text": "tracking the ability to have um the type system help with whether reference",
    "start": "2741960",
    "end": "2747160"
  },
  {
    "text": "references are null or not um async streams maybe some of you saw the talk earlier today about um about reactive",
    "start": "2747160",
    "end": "2754960"
  },
  {
    "text": "programming definitely I mean we a lot of the problems in that talk uh were not",
    "start": "2754960",
    "end": "2760000"
  },
  {
    "text": "really problems if you were in C I'm want to say un modestly there there were Java because Java doesn't have async but",
    "start": "2760000",
    "end": "2766000"
  },
  {
    "text": "we only have support for single asynchronous results and having support for streams as well in language would",
    "start": "2766000",
    "end": "2771480"
  },
  {
    "text": "probably be a good Next Step so we're considering that as well and then there are several things here all of these are",
    "start": "2771480",
    "end": "2776839"
  },
  {
    "text": "juicy things it's just like deciding what to go for and whatnot and our team is still finishing up building the",
    "start": "2776839",
    "end": "2782440"
  },
  {
    "text": "previous uh version so we're still just playing with ideas we'll start soon hopefully be able to put some prototypes",
    "start": "2782440",
    "end": "2788440"
  },
  {
    "text": "together maybe some people in the community will also prototype language features and and just have um an environment where people can try out",
    "start": "2788440",
    "end": "2794520"
  },
  {
    "text": "well how does this version feel like and very sort of just hacked up rough prototypes and and um get feedback on",
    "start": "2794520",
    "end": "2801520"
  },
  {
    "text": "that so some of the some of the features that um that we considered there I do",
    "start": "2801520",
    "end": "2806640"
  },
  {
    "text": "have slides for which I accidentally showed you before um so uh let's go and",
    "start": "2806640",
    "end": "2812160"
  },
  {
    "text": "look at tupal for instance the thing that we're thinking about for tupal is the core problem to solve with tubles is",
    "start": "2812160",
    "end": "2819480"
  },
  {
    "text": "having multiple results out of out of functions out of methods and so we would",
    "start": "2819480",
    "end": "2824880"
  },
  {
    "text": "have a syntax that's very similar to uh parameter list it's just going the other way and that means tubules would have",
    "start": "2824880",
    "end": "2831040"
  },
  {
    "text": "they would have types for each component but they would also have names and you can use those names if you want to at the consumption side to get at to know",
    "start": "2831040",
    "end": "2839520"
  },
  {
    "text": "okay I got three ends which one is the sum and which one is the count and which one is the to know what you're getting back and to uh be able to access them",
    "start": "2839520",
    "end": "2846480"
  },
  {
    "text": "through that um we would have tubal construction and probably deconstruction as well um so",
    "start": "2846480",
    "end": "2853280"
  },
  {
    "text": "kind of standard stuff um but um would be very useful to have in uh in CP and",
    "start": "2853280",
    "end": "2859880"
  },
  {
    "text": "kind of fit in nicely I think syntactically it doesn't really stick out too much one of the more crazy",
    "start": "2859880",
    "end": "2865520"
  },
  {
    "text": "things that I'm still eager to see if we can land is after having had six",
    "start": "2865520",
    "end": "2870960"
  },
  {
    "text": "versions of the language where you cannot distinguish in any way between references to objects that can be null",
    "start": "2870960",
    "end": "2878040"
  },
  {
    "text": "and ones that can't can we go and retrofit that in in a natural way into the language and get some benefit from",
    "start": "2878040",
    "end": "2883599"
  },
  {
    "text": "it and saying okay first and last name have to be there string is nullable so",
    "start": "2883599",
    "end": "2888760"
  },
  {
    "text": "it doesn't have to so if I dot into them um it's fine to dot into the The Not So",
    "start": "2888760",
    "end": "2895079"
  },
  {
    "text": "nullable ones but it's not fine to dot into the one that's nullable you have to check for null first okay so that's one",
    "start": "2895079",
    "end": "2900520"
  },
  {
    "text": "kind of warning that you want to get to find bugs in your code the other one the other direction you would do things like",
    "start": "2900520",
    "end": "2906800"
  },
  {
    "text": "making sure that um the um the things that are nullable",
    "start": "2906800",
    "end": "2913640"
  },
  {
    "text": "actually get initialized to a n null value that you don't just leave them hanging with the default value of null the problem in net is everything can be",
    "start": "2913640",
    "end": "2920319"
  },
  {
    "text": "null every every reference can be null and we can't go fix that retroactively if we try that ambition we we just fail",
    "start": "2920319",
    "end": "2926680"
  },
  {
    "text": "but what we can do is we can express intent and we can give you guidance and bugs or Warnings wherever you are going",
    "start": "2926680",
    "end": "2934040"
  },
  {
    "text": "against the expressed intent that we can probably do so if that's our level of ambition maybe we can help Tony",
    "start": "2934040",
    "end": "2940240"
  },
  {
    "text": "you know old uh theoretical computer scientist he always said and not so theoretical he said null uh pointers",
    "start": "2940240",
    "end": "2946799"
  },
  {
    "text": "were my billion dollar mistake and so our ambition is to get him back probably about half of that billion like it it",
    "start": "2946799",
    "end": "2952319"
  },
  {
    "text": "would totally eradicate the problem like some languages do but it would be definitely better so that's all I have",
    "start": "2952319",
    "end": "2958440"
  },
  {
    "text": "to show um and have to share and I think we're probably out of time we took some questions along the way um is what do",
    "start": "2958440",
    "end": "2965160"
  },
  {
    "text": "you say are we are we done are we is there any any last questions",
    "start": "2965160",
    "end": "2971240"
  },
  {
    "text": "okay immutable what sorry you mentioned that IM yes I'll tell you after I'll tell you",
    "start": "2972720",
    "end": "2980680"
  },
  {
    "text": "offline that's a good it's a good uh you know conversation topic for the party tonight if you don't know what to talk",
    "start": "2980680",
    "end": "2986000"
  },
  {
    "text": "about you know just ask me about that okay thank you very much",
    "start": "2986000",
    "end": "2992520"
  }
]