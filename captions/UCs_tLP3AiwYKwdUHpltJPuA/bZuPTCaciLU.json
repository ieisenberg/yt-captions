[
  {
    "text": "so the subject is faster objects in arrays hopefully you're in the right room um what this really is about is um",
    "start": "199",
    "end": "9440"
  },
  {
    "text": "trying to address what I believe is the last inherent speed difference between Java and C based",
    "start": "9440",
    "end": "16278"
  },
  {
    "text": "languages that's not to say it's the last difference but it's the last inherent one um and we'll get into why",
    "start": "16279",
    "end": "22640"
  },
  {
    "text": "it's inherent and what we can do to address it um it the the content I'm",
    "start": "22640",
    "end": "28720"
  },
  {
    "text": "going to describe is under a project we call org. object layout or object layout. org if you like the class path",
    "start": "28720",
    "end": "35200"
  },
  {
    "text": "that's org first and you could go to the website look at it you can do it live if you want uh might find some interesting",
    "start": "35200",
    "end": "41600"
  },
  {
    "text": "things as we go um I'm going to describe what it is status of where it is uh this",
    "start": "41600",
    "end": "48920"
  },
  {
    "text": "presentation I kind of put it together first for the most recent Java language Summit and we are trying to advocate for",
    "start": "48920",
    "end": "56120"
  },
  {
    "text": "this to become part of a Java Standard Version in some future point maybe 9",
    "start": "56120",
    "end": "61920"
  },
  {
    "text": "maybe 10 maybe we'll see anyway um let me start by",
    "start": "61920",
    "end": "66960"
  },
  {
    "text": "introducing myself my name is Gil ten how many of you have seen any of my",
    "start": "66960",
    "end": "72960"
  },
  {
    "text": "talks before okay so some of you must have seen this slide many times I really",
    "start": "72960",
    "end": "79439"
  },
  {
    "text": "needed more but I'll quickly describe why I am um I'm the C of ail systems one",
    "start": "79439",
    "end": "85759"
  },
  {
    "text": "of the things people know me for is that I've been working on garbage collection for a while",
    "start": "85759",
    "end": "90880"
  },
  {
    "text": "about 13 years um and when I say work in garbage collection we think of it as",
    "start": "90880",
    "end": "96799"
  },
  {
    "text": "kind of think different garbage collection this is what the industry is doing about garbage collection we went",
    "start": "96799",
    "end": "102119"
  },
  {
    "text": "the other way um rather than incrementally solving things and improving them slowly and maybe reducing",
    "start": "102119",
    "end": "109119"
  },
  {
    "text": "the pressure here and there we just said you know how about if we just solved the damn problem and we did so we believe",
    "start": "109119",
    "end": "115119"
  },
  {
    "text": "garbage question is simply a solved problem we have a working shipping solution we think others will also solve",
    "start": "115119",
    "end": "120439"
  },
  {
    "text": "it over the coming decade it takes a little work but when I say solved I mean",
    "start": "120439",
    "end": "126880"
  },
  {
    "text": "you don't have to worry about it anymore you don't have to worry about pauses you don't have to worry about not having too",
    "start": "126880",
    "end": "133360"
  },
  {
    "text": "many objects relocating too fast it's cool anyway that's products that's what we actually do if you're interested we",
    "start": "133360",
    "end": "138879"
  },
  {
    "text": "have a booth outside but that's not what the talk is for just some evidence that I actually do this stuff this is me",
    "start": "138879",
    "end": "145720"
  },
  {
    "text": "working on garbage collection in my kitchen um that Contraption over there",
    "start": "145720",
    "end": "151160"
  },
  {
    "text": "that's a trash compactor and I apologize to those guys that have seen this 17 times already it's a trash compactor the",
    "start": "151160",
    "end": "158680"
  },
  {
    "text": "job of a trash compactor how many of you have a trash compactor how many of you know somebody",
    "start": "158680",
    "end": "164200"
  },
  {
    "text": "who has a trash compactor douchebags well I have one I I'm lazy",
    "start": "164200",
    "end": "170440"
  },
  {
    "text": "the job of a trash compactor is to perform minor garbage collections during the week delaying the full GC where you",
    "start": "170440",
    "end": "176360"
  },
  {
    "text": "take the backout to the weekend and and when it performs well and it's well tuned it'll do that very",
    "start": "176360",
    "end": "182879"
  },
  {
    "text": "well but in this case it was broken fragments were coming out the back the compaction function wasn't working",
    "start": "182879",
    "end": "189159"
  },
  {
    "text": "perfectly I had to debug it that that actually happened by the way I just thought it'd be funny to take a picture",
    "start": "189159",
    "end": "195640"
  },
  {
    "text": "with a garbage collection theat book when I did that probably the main data point in this picture is it was taken in",
    "start": "195640",
    "end": "202120"
  },
  {
    "text": "2004 so that's just to prove you have been doing this or thinking it's funny for more than a",
    "start": "202120",
    "end": "207799"
  },
  {
    "text": "decade um anyway I've I've built a lot of things uh everything from virtual",
    "start": "207799",
    "end": "214959"
  },
  {
    "text": "machines to physical machines actually designing CPUs and Hardware um build",
    "start": "214959",
    "end": "220480"
  },
  {
    "text": "operating systems and drivers and firewalls and switches and big Management systems for millions of",
    "start": "220480",
    "end": "226879"
  },
  {
    "text": "subscribers built in Java which is kind of how I fell into this field",
    "start": "226879",
    "end": "232319"
  },
  {
    "text": "um another pet peeve or hobby of mine is to actually go around depressing people",
    "start": "232319",
    "end": "239439"
  },
  {
    "text": "about the state of their lb musy measurement I I I have a whole set of talks on that and actually a full",
    "start": "239439",
    "end": "245000"
  },
  {
    "text": "workshop on on Thursday if you really going to get depress or learn how to depress other people or just point a",
    "start": "245000",
    "end": "250760"
  },
  {
    "text": "finger at them and laugh um but it's it's just an interesting subject you know L see measurement good bad how are",
    "start": "250760",
    "end": "256440"
  },
  {
    "text": "you doing it and are measuring something other than those but this is not what we're going to talk about today we're",
    "start": "256440",
    "end": "262280"
  },
  {
    "text": "going to talk about. object now so what is this the focus of. loud",
    "start": "262280",
    "end": "270160"
  },
  {
    "text": "is to match the raw speed benefits the raw benefits that c-based languages can",
    "start": "270160",
    "end": "275680"
  },
  {
    "text": "commonly get and commonly use in Java and we're talking about the layout",
    "start": "275680",
    "end": "281680"
  },
  {
    "text": "related benefits I'll be specific as we go um we want to expose those benefits",
    "start": "281680",
    "end": "287280"
  },
  {
    "text": "in Java for plain Java objects for regular Java objects for all Java",
    "start": "287280",
    "end": "292759"
  },
  {
    "text": "objects that you have we don't want to create a new tip we don't want you to go to an off heat location we don't want",
    "start": "292759",
    "end": "297800"
  },
  {
    "text": "you to start inheriting fromation X or not be able to do y if it's a pojo we want to be able to lay it out",
    "start": "297800",
    "end": "304080"
  },
  {
    "text": "efficiently and deal with it efficiently similarly to how SC does the same um the",
    "start": "304080",
    "end": "310320"
  },
  {
    "text": "focus is very narrow and very specific we are focusing on speed for regular",
    "start": "310320",
    "end": "315800"
  },
  {
    "text": "Java objects on the heat that's a Matra I'll keep repeating okay it is not any",
    "start": "315800",
    "end": "322160"
  },
  {
    "text": "of these things it is not about improved footprint we are not trying to reduce",
    "start": "322160",
    "end": "328280"
  },
  {
    "text": "the footprint of anything I told you I think garbage collection is a solved problem right I actually think",
    "start": "328280",
    "end": "333680"
  },
  {
    "text": "our problem is we're not using enough memory in machines we have machines with hundreds of gigabytes and we think 10 GB",
    "start": "333680",
    "end": "339919"
  },
  {
    "text": "is a small number is a big number so I don't have a problem with waste I have a",
    "start": "339919",
    "end": "345120"
  },
  {
    "text": "problem with speed we want to address speed if if footprint addresses speed that's a valid concern but memory is",
    "start": "345120",
    "end": "353479"
  },
  {
    "text": "cheap and if you want to solve it solve it but not as part of this off Heap",
    "start": "353479",
    "end": "360560"
  },
  {
    "text": "great things about offhe for example you might want to talk to something that's not Java or maybe have a garbage",
    "start": "360560",
    "end": "366520"
  },
  {
    "text": "collection that doesn't work right so you want to get objects out of its way um but it's just not related to what",
    "start": "366520",
    "end": "373240"
  },
  {
    "text": "we're doing here an immutability good or bad is again orthogonal we just don't",
    "start": "373240",
    "end": "378720"
  },
  {
    "text": "care immutable objects are great and so are mutable objects and we want all",
    "start": "378720",
    "end": "384479"
  },
  {
    "text": "objects to be able to benefit from the speed we talking about all these are simply orthogonal concerns they're not",
    "start": "384479",
    "end": "390240"
  },
  {
    "text": "good or bad I just don't care about them so keep that in mind as we go through",
    "start": "390240",
    "end": "395560"
  },
  {
    "text": "this the next slider to is going to focus on what object loud isn't and there's a reason for that every time I",
    "start": "395560",
    "end": "402280"
  },
  {
    "text": "mention it to people they say value types or packed objects so it's",
    "start": "402280",
    "end": "409520"
  },
  {
    "text": "not the relationship between object loud and value types is none the relationship",
    "start": "409520",
    "end": "415680"
  },
  {
    "text": "between object impact objects or J&R I I think there was a jnr talk uh uh or",
    "start": "415680",
    "end": "422560"
  },
  {
    "text": "something mentioning jnr I didn't actually attend it but Charlie is here right somewhere um and it's not they're",
    "start": "422560",
    "end": "431000"
  },
  {
    "text": "good reasons to have those hopefully they'll work through exactly what they need to do show up in the Java version",
    "start": "431000",
    "end": "437000"
  },
  {
    "text": "this is not an overlap at all um the laser focuses on a different problem",
    "start": "437000",
    "end": "442319"
  },
  {
    "text": "neither one of those things is focusing on speed for regular Java objects on the",
    "start": "442319",
    "end": "448000"
  },
  {
    "text": "heat um there's no conflict with the other things so this is not Instead This",
    "start": "448000",
    "end": "454000"
  },
  {
    "text": "is not don't do that do this this is we should do this anyway and other things are good ideas too there is a tiny bit",
    "start": "454000",
    "end": "461960"
  },
  {
    "text": "of overlap it's the same kind of overlap you have between an ARR list and a hashmap both of them are good bags to",
    "start": "461960",
    "end": "468560"
  },
  {
    "text": "put things in but if you had both of them if you only had one of them you'd",
    "start": "468560",
    "end": "473800"
  },
  {
    "text": "have a problem right there's a good use for this a good use for that use it where the fit is",
    "start": "473800",
    "end": "480120"
  },
  {
    "text": "one more pictorial way of looking at this is here's the space in a kind of a VIN chart value types fact objects and",
    "start": "480120",
    "end": "488080"
  },
  {
    "text": "object clout value types are about on Heap things you know codes like a class acts",
    "start": "488080",
    "end": "494800"
  },
  {
    "text": "like an in sorry whatever but you get the nice immutable nature for small",
    "start": "494800",
    "end": "500919"
  },
  {
    "text": "objects probably small objects grade for unstack things I can't tell how many",
    "start": "500919",
    "end": "506599"
  },
  {
    "text": "times I really wanted a value type instead of having a do weird things packing things or",
    "start": "506599",
    "end": "512159"
  },
  {
    "text": "creating an object just to pass a tle um so return values passing parameters are",
    "start": "512159",
    "end": "518000"
  },
  {
    "text": "great for that for a lot of on stack onth thread things maybe for some thread local things in the Heap most likely",
    "start": "518000",
    "end": "525480"
  },
  {
    "text": "you're going to see value types stir handed between threads be um inflated meaning uh uh basically wrapped types",
    "start": "525480",
    "end": "534080"
  },
  {
    "text": "that are as fat as a regular object box if you'd like um but we'll see how",
    "start": "534080",
    "end": "539519"
  },
  {
    "text": "there's mature they're really useful I really want them I wish they were in Java 9 probably not going to be there",
    "start": "539519",
    "end": "545600"
  },
  {
    "text": "well we know it's not going to be there but hopefully in Java 10 if we look at packed objects packed objects first and",
    "start": "545600",
    "end": "552600"
  },
  {
    "text": "foremost this is an IBM initiative and there's some other derivatives of it first and foremost it's about a precise",
    "start": "552600",
    "end": "559279"
  },
  {
    "text": "control of layout and there's a really good reason to precisely control layout",
    "start": "559279",
    "end": "564360"
  },
  {
    "text": "when you talk to things that are not Java if you're looking at a TCP header the bites going certain",
    "start": "564360",
    "end": "571040"
  },
  {
    "text": "places if you call a native API and that native API has a c struct as a parameter",
    "start": "571040",
    "end": "578160"
  },
  {
    "text": "you need to get the bits right and the struct or you're not passing the parameters right and the New Logic that",
    "start": "578160",
    "end": "584040"
  },
  {
    "text": "we have today around those things is very cumbersome especially if you want speed so off Heap exact layout for",
    "start": "584040",
    "end": "592120"
  },
  {
    "text": "things that create structural things not just buckets of bits are important and if you look at what people actually do",
    "start": "592120",
    "end": "598399"
  },
  {
    "text": "about that they usually they create some big Bay off Heap and then they create light or flyweight objects that kind of",
    "start": "598399",
    "end": "604000"
  },
  {
    "text": "scroll over them and look like objects but kind of know what bites to do one with we all do that over and over and",
    "start": "604000",
    "end": "611079"
  },
  {
    "text": "over again and library that would do it in standardized would be very useful I would very much like to see something in",
    "start": "611079",
    "end": "616839"
  },
  {
    "text": "that space involve and I hope the J&R will do it and learn a lot from a packed object it's about sharing information",
    "start": "616839",
    "end": "624480"
  },
  {
    "text": "with non Java Stu primary thing is off Heap sharing with non Java you can't let the jbm",
    "start": "624480",
    "end": "631000"
  },
  {
    "text": "layout stuff if other people want to know what it's like object layout speed",
    "start": "631000",
    "end": "636839"
  },
  {
    "text": "for objects on the Heat regular jav objects last way to look at this is",
    "start": "636839",
    "end": "642120"
  },
  {
    "text": "value types is going to be about new code a value type is a class that does",
    "start": "642120",
    "end": "647560"
  },
  {
    "text": "not behave quite like an object there are things you cannot do with it for example you can't get an identity hash",
    "start": "647560",
    "end": "654279"
  },
  {
    "text": "code you can't lock it you can't synchronize on it which means that you can't give it to code that thinks this",
    "start": "654279",
    "end": "660639"
  },
  {
    "text": "is an object it is dangerous to do so so value typs are going to be very useful for new code that is written for Value",
    "start": "660639",
    "end": "667639"
  },
  {
    "text": "types I want that similarly packed objects are inherited from a new base",
    "start": "667639",
    "end": "674040"
  },
  {
    "text": "type that is not an object so clearly only for things that have that code in contrast object layout is designed to",
    "start": "674040",
    "end": "680600"
  },
  {
    "text": "address any existing constructible Java object in the world you can take objects",
    "start": "680600",
    "end": "686720"
  },
  {
    "text": "for participate in some of these and hand them around to six-year-old code CU it knows what to do with them so the",
    "start": "686720",
    "end": "693600"
  },
  {
    "text": "scope of what we're going to touch is dramatically bigger especially if you look at the E the ecosystem as far as",
    "start": "693600",
    "end": "699440"
  },
  {
    "text": "what we can interact with okay enough about what it's not let's look at what it is and",
    "start": "699440",
    "end": "705880"
  },
  {
    "text": "why the origin of this actually started from an argument argument between me and Martin",
    "start": "705880",
    "end": "712079"
  },
  {
    "text": "Thompson is Martin here he's seen this three times so he doesn't need to be here um he reminded",
    "start": "712079",
    "end": "719720"
  },
  {
    "text": "me that the argument lasted until 3:00 a.m. sitting in a car outside of this hotel the signs of the argument look",
    "start": "719720",
    "end": "725720"
  },
  {
    "text": "like this on the one side there's we need scps and Java you're sick and tired of building these weird arrays and",
    "start": "725720",
    "end": "732440"
  },
  {
    "text": "running these weird things on top of them it's just it's ugly ugly code and it's buggy and why do we have to do it",
    "start": "732440",
    "end": "738440"
  },
  {
    "text": "and look at what all the unsafe stuff you guys make us do can't we just have strs in the language right and and",
    "start": "738440",
    "end": "745760"
  },
  {
    "text": "there's good reasonable drive there the other side is to say we don't need",
    "start": "745760",
    "end": "751639"
  },
  {
    "text": "anything new in the language we already have strs we have better than STS they're called objects they can do everything The Struck can do and more so",
    "start": "751639",
    "end": "759800"
  },
  {
    "text": "let's look at what's missing what you're actually trying to achieve and see if we can achieve it within the thing we",
    "start": "759800",
    "end": "765680"
  },
  {
    "text": "already have and that's what object really is attempting to do to settle this we said you know what let's just go",
    "start": "765680",
    "end": "772880"
  },
  {
    "text": "start coding it up and see what happens and that's where the project came from so Martin and I both started coding",
    "start": "772880",
    "end": "778240"
  },
  {
    "text": "structure for example to see if we can capture the things right as we are doing",
    "start": "778240",
    "end": "783519"
  },
  {
    "text": "this we realize that what we're actually doing is trying to capture enabling",
    "start": "783519",
    "end": "789639"
  },
  {
    "text": "limitations and I'll explain what that is in a couple slides but it's the semantics that we're trying to capture",
    "start": "789639",
    "end": "796120"
  },
  {
    "text": "not the code not the syntax or anything else but the semantics that allow things to be fast and capturing the enabling",
    "start": "796120",
    "end": "803399"
  },
  {
    "text": "semantic limitation is the key thing in every one of the constructs we'll have here so when you think of this from the",
    "start": "803399",
    "end": "808839"
  },
  {
    "text": "design perspective don't just look at what these classes do but you can also look at this as a development exercise",
    "start": "808839",
    "end": "815959"
  },
  {
    "text": "if you were designing something new that you wanted to architecturally affect things maybe affect the GDK in the",
    "start": "815959",
    "end": "821240"
  },
  {
    "text": "future you can look at this for some hopefully good lessons so where does the speed that we",
    "start": "821240",
    "end": "828040"
  },
  {
    "text": "want come from why they let this see have it and Java don't doesn't have it",
    "start": "828040",
    "end": "833440"
  },
  {
    "text": "um sing these layout benefits really come from two key things first one is",
    "start": "833440",
    "end": "839320"
  },
  {
    "text": "something we call dead reckoning dead reckoning is the ability to get to Something in memory from the",
    "start": "839320",
    "end": "847759"
  },
  {
    "text": "address of a base of something without too many data references in the middle for example if I have an array of",
    "start": "847759",
    "end": "854279"
  },
  {
    "text": "structs in jav in C and each struct has three Fields x y z and I want to get to",
    "start": "854279",
    "end": "861480"
  },
  {
    "text": "element number 19 field Y in C if I take the base of the array I can do math",
    "start": "861480",
    "end": "868839"
  },
  {
    "text": "figure out the memory location of Y in element 19 without looking anything else",
    "start": "868839",
    "end": "874120"
  },
  {
    "text": "in memory so taking this Computing that go straight there that's dead reckoning",
    "start": "874120",
    "end": "879199"
  },
  {
    "text": "as opposed to look up element 19 follow follow follow and then get there so that",
    "start": "879199",
    "end": "884920"
  },
  {
    "text": "Reckoning is about getting straight to that memory sell you want without jumping through other data dependent things that gives you obvious speed",
    "start": "884920",
    "end": "892959"
  },
  {
    "text": "especially given modern CPU pipelines that are really good at running through",
    "start": "892959",
    "end": "898040"
  },
  {
    "text": "a lot of math well with super scalar things but are really bad at saying well",
    "start": "898040",
    "end": "903199"
  },
  {
    "text": "I don't know where to go next so let's wait until I compute that and then I'll go the next step in the next it breaks",
    "start": "903199",
    "end": "908360"
  },
  {
    "text": "pipelines to have data dependent operations you're serializing an operation in a CP the other one is streaming streaming",
    "start": "908360",
    "end": "917320"
  },
  {
    "text": "is about it's really about exchanging latency and bad CP have tons of bad",
    "start": "917320",
    "end": "922759"
  },
  {
    "text": "memory caches have tons of bandwidth the problem we have is that the latency to the memory is fairly High when we miss",
    "start": "922759",
    "end": "928680"
  },
  {
    "text": "in the cash when we go to a place we haven't gone to before it takes hundreds",
    "start": "928680",
    "end": "933720"
  },
  {
    "text": "of Cycles to do and if we hit in the L1 cach it's one two cycles",
    "start": "933720",
    "end": "940600"
  },
  {
    "text": "effectively um now because of that Gap we like to prefetch data if we know what",
    "start": "940600",
    "end": "948199"
  },
  {
    "text": "we might need to access and the CPU can get it for us then it's going to spend bandwidth getting it before we need it",
    "start": "948199",
    "end": "954240"
  },
  {
    "text": "and then it'll be there when we need it now sometimes that's wasteful sometimes it's getting stuff we don't really need",
    "start": "954240",
    "end": "960240"
  },
  {
    "text": "because it's guessing but it gets to burn that bandwidth in order to improve our Legacy streaming is extremely powerful",
    "start": "960240",
    "end": "967920"
  },
  {
    "text": "when you have constant stride AIS you're going through an array looking at field y of everything or at all the fields of",
    "start": "967920",
    "end": "974040"
  },
  {
    "text": "everything so if you look at the entrances you're access in the M there's a there's a pattern to them modern CPUs",
    "start": "974040",
    "end": "980800"
  },
  {
    "text": "have Hardware prefectures that're sitting there actively looking at the pattern of your memory axises saying oh",
    "start": "980800",
    "end": "987040"
  },
  {
    "text": "you did this and this and that there's a pattern let's keep going they get ahead of you and they prefetch for you and if",
    "start": "987040",
    "end": "992480"
  },
  {
    "text": "they do it well you do not you miss in the cash but you don't wait for the Miss",
    "start": "992480",
    "end": "997839"
  },
  {
    "text": "because the Miss happened before you ever got there it's extremely powerful it's an order of magnitude Improvement",
    "start": "997839",
    "end": "1004240"
  },
  {
    "text": "on on accessing through things but it only is there if you're accessing in a",
    "start": "1004240",
    "end": "1010759"
  },
  {
    "text": "pattern the reason arays of strips are very powerful for streaming is because they're laid out flat so if you access",
    "start": "1010759",
    "end": "1018519"
  },
  {
    "text": "old elements you are accessing them in a pattern if things were jumbled up there would not be a pattern and when we get",
    "start": "1018519",
    "end": "1024798"
  },
  {
    "text": "to element 19 after we've been to only 18 we don't know where that is cuz we can't that recog me to it anyway these",
    "start": "1024799",
    "end": "1032280"
  },
  {
    "text": "two things are worth a lot of speed a lot of speed these two things are hard to do in",
    "start": "1032280",
    "end": "1038720"
  },
  {
    "text": "jav so let's look at the enabling or the speed enabling limitations and look at",
    "start": "1038720",
    "end": "1045558"
  },
  {
    "text": "specifically what the semantics are that make it possible to achieve these with an array stru to do that we should just",
    "start": "1045559",
    "end": "1051600"
  },
  {
    "text": "compare the array in Java and the comp the array in C we have an object array in Java that's the only way we can have",
    "start": "1051600",
    "end": "1058880"
  },
  {
    "text": "an array of things that are not just a primitive field and we have a array of struct in",
    "start": "1058880",
    "end": "1064720"
  },
  {
    "text": "see those are the syntaxes so in Java an array of object is a mutable",
    "start": "1064720",
    "end": "1071919"
  },
  {
    "text": "construct mutable because I can replace what element 17 is anytime I want so",
    "start": "1071919",
    "end": "1077480"
  },
  {
    "text": "element 17 was this and later it's that so I can mutate the array and it's an array of same base type objects the base",
    "start": "1077480",
    "end": "1084919"
  },
  {
    "text": "type may be object or suppose I have an array of points it can be an array of point or any subass of point the reason",
    "start": "1084919",
    "end": "1092080"
  },
  {
    "text": "that's important is because the elements don't have the same size they might or might not have the same",
    "start": "1092080",
    "end": "1098440"
  },
  {
    "text": "size these two things in combination are a problem if we compare them to C in C",
    "start": "1098440",
    "end": "1105760"
  },
  {
    "text": "an array of struct is an immutable funny to see IM mutable in see right but it's an immutable",
    "start": "1105760",
    "end": "1111760"
  },
  {
    "text": "construct of exact same type things two very powerful qualities",
    "start": "1111760",
    "end": "1118400"
  },
  {
    "text": "immutable because it's a flat array of structures element 17 is element 17 you can't change who it is you can go mess",
    "start": "1118400",
    "end": "1125799"
  },
  {
    "text": "with its contents but you can't change which element is number 17 and its same type because it's a stru",
    "start": "1125799",
    "end": "1134159"
  },
  {
    "text": "and it's the same stru right that's trivial but that means it's the same size",
    "start": "1134159",
    "end": "1140039"
  },
  {
    "text": "now these two qualities are the things that enable or break speed because",
    "start": "1140039",
    "end": "1146600"
  },
  {
    "text": "mutability and non-sap tightness individually break both qualities of",
    "start": "1146600",
    "end": "1153159"
  },
  {
    "text": "dead reckoning and streaming you cannot dead reckon or stream into a mutable array or into a non-s type array why",
    "start": "1153159",
    "end": "1162880"
  },
  {
    "text": "well if I can replace El 17 in Array then by definition there is no way to know what that is is given the array",
    "start": "1162880",
    "end": "1169919"
  },
  {
    "text": "address I can't take array address and know which 17 is with math I need to look at what you did to mess with it",
    "start": "1169919",
    "end": "1176559"
  },
  {
    "text": "that's a required D reference that's no dead reckoning right",
    "start": "1176559",
    "end": "1182159"
  },
  {
    "text": "similarly if I can replace them then they're not going to be in order in memory I might get lucky and they sometimes are in order but they're going",
    "start": "1182159",
    "end": "1187600"
  },
  {
    "text": "to get shuffled especially when you garbage collect and move things around",
    "start": "1187600",
    "end": "1192960"
  },
  {
    "text": "separately the nonsan signs individually without the mutability even Rin things",
    "start": "1192960",
    "end": "1198640"
  },
  {
    "text": "because if each one could be a different size there is no math for what number 17 is right they're different lengths and",
    "start": "1198640",
    "end": "1205280"
  },
  {
    "text": "the we the number 17 so I need to figure them out and similarly if they're not the",
    "start": "1205280",
    "end": "1210720"
  },
  {
    "text": "same size my nice equal strip will break too because I'll be hopping in different sizes every time the prors won't guess",
    "start": "1210720",
    "end": "1218000"
  },
  {
    "text": "wrong probably anyway we need to eliminate both of these qualities in",
    "start": "1218000",
    "end": "1223400"
  },
  {
    "text": "order to gain the speed that c has and that's what structured array um one of",
    "start": "1223400",
    "end": "1228440"
  },
  {
    "text": "the one of the forms and classes in object CL does structure is simply a collection that says I need those",
    "start": "1228440",
    "end": "1235120"
  },
  {
    "text": "qualities so it's an immutable collection meaning it starts and there's",
    "start": "1235120",
    "end": "1240400"
  },
  {
    "text": "stuff in it and you can't put anything in it whatever is there at the start St",
    "start": "1240400",
    "end": "1245559"
  },
  {
    "text": "of exact same type objects you can't put objects of different types simply",
    "start": "1245559",
    "end": "1251200"
  },
  {
    "text": "because you can't put you say I need 100 of this and",
    "start": "1251200",
    "end": "1256480"
  },
  {
    "text": "that's what you have you can't change that later that's the capturing of the",
    "start": "1256480",
    "end": "1262320"
  },
  {
    "text": "semantics now when we look at the Target forms we have three key Target forms in",
    "start": "1262320",
    "end": "1267799"
  },
  {
    "text": "C that we're trying to ulate the first one is an array of strps we just spent some time talking about it the second",
    "start": "1267799",
    "end": "1273919"
  },
  {
    "text": "one is a struct inside a struct and this is the C Syntax for defining them so the",
    "start": "1273919",
    "end": "1280159"
  },
  {
    "text": "struct with the struct inside rather than the struct you point to now the nice thing is those two compos well",
    "start": "1280159",
    "end": "1285919"
  },
  {
    "text": "together because you can have an array of strs that have conru side and then you can you've got multiple references",
    "start": "1285919",
    "end": "1291279"
  },
  {
    "text": "you've saen and then the last one that's very interesting is a stru with an array",
    "start": "1291279",
    "end": "1297039"
  },
  {
    "text": "dangling off d a variable size array dangling off D that's very commonly used",
    "start": "1297039",
    "end": "1303120"
  },
  {
    "text": "in communication messages with headers payload and header that kind of stuff",
    "start": "1303120",
    "end": "1308240"
  },
  {
    "text": "it's very common to see that and see it's very common to have that flat you m the entire thing and you have a struct",
    "start": "1308240",
    "end": "1314159"
  },
  {
    "text": "at the beginning and the rest is an array of bites or ins Surs or whatever it is",
    "start": "1314159",
    "end": "1319360"
  },
  {
    "text": "those three things are very useful each one of them gives you either dead reckoning or strinning or both none of",
    "start": "1319360",
    "end": "1327080"
  },
  {
    "text": "these can be replicated for Speed today in Java it is possible to emulate the",
    "start": "1327080",
    "end": "1332240"
  },
  {
    "text": "function of them easily but each emulation method you have cannot match",
    "start": "1332240",
    "end": "1337919"
  },
  {
    "text": "either streamming or dead reckoning speeds in Java it's inherent to how the jbm Lays up things and what the",
    "start": "1337919",
    "end": "1343760"
  },
  {
    "text": "semantics are and that's what we want to fix we want to remove the inherent quality here so the starting point here is to",
    "start": "1343760",
    "end": "1351360"
  },
  {
    "text": "say we want to capture the semantics that enable the speed and the theories that we could do this with no language",
    "start": "1351360",
    "end": "1357919"
  },
  {
    "text": "changes at all and that we can capture them in a way that lets us St plain vanilla JV",
    "start": "1357919",
    "end": "1364200"
  },
  {
    "text": "classes that run on any jdk function on any jdk you don't have",
    "start": "1364200",
    "end": "1369360"
  },
  {
    "text": "to have a special environment to run them but they're not going to run any faster on any jdk it's just that you can",
    "start": "1369360",
    "end": "1376039"
  },
  {
    "text": "have future jdks recognize what this is understand the semantics and realize",
    "start": "1376039",
    "end": "1381559"
  },
  {
    "text": "that they can optimize it because the semantics Ena optimization so knowing that this is immutable and the same type",
    "start": "1381559",
    "end": "1388440"
  },
  {
    "text": "you can actually lay it out flat cuz they are allowed to and as a result you can actually do all the optimization see",
    "start": "1388440",
    "end": "1394440"
  },
  {
    "text": "naturally do the difference between what we call vanilla and what we call intrinsi which is the optimized version",
    "start": "1394440",
    "end": "1401440"
  },
  {
    "text": "has to be speed and only speed we do not want to have any way to write something",
    "start": "1401440",
    "end": "1407679"
  },
  {
    "text": "that only works and inif by only works or begins differently between the two",
    "start": "1407679",
    "end": "1412760"
  },
  {
    "text": "that's a core requirement of this now why did we choose these partly",
    "start": "1412760",
    "end": "1418440"
  },
  {
    "text": "because we're thinking forward and saying we want to get this into the language or sorry we're not changing the",
    "start": "1418440",
    "end": "1423840"
  },
  {
    "text": "language into a future version of java and we want to make it happen in a less",
    "start": "1423840",
    "end": "1429320"
  },
  {
    "text": "friction way or the best possible way low risk way and in doing that we wanted to emulate successful things there is an",
    "start": "1429320",
    "end": "1435880"
  },
  {
    "text": "example of an extremely successful external contribution to Java the most successful in history and it's Java util",
    "start": "1435880",
    "end": "1443120"
  },
  {
    "text": "concurrent Java util concurrent was not developed by Sun orle it was developed",
    "start": "1443120",
    "end": "1449720"
  },
  {
    "text": "outside by Doug Lee at un swager how many of you had used Java util concur",
    "start": "1449720",
    "end": "1456360"
  },
  {
    "text": "before it was Java util concur uner classes right um so the way",
    "start": "1456360",
    "end": "1463480"
  },
  {
    "text": "it was built is there was this class library and it captured the semantics for fast concurrent operations the",
    "start": "1463480",
    "end": "1470600"
  },
  {
    "text": "semantics that Define what they are that would enable the speed or implementation there were no language changes no jvm",
    "start": "1470600",
    "end": "1477880"
  },
  {
    "text": "changes needed to run that code it ran an existing jvms now notice that there is still not",
    "start": "1477880",
    "end": "1485520"
  },
  {
    "text": "a language support for Java U concurrent it's purely a set of classes we might get some support in Java 9 with datat",
    "start": "1485520",
    "end": "1491679"
  },
  {
    "text": "Tomic or Vol um now the implementation in vanilla runs multiple gbks but it may",
    "start": "1491679",
    "end": "1500240"
  },
  {
    "text": "be slow for example you can emulate an atomic integer compare and swap or compare and set with a synchronized",
    "start": "1500240",
    "end": "1506679"
  },
  {
    "text": "block it won't be fast but it will work um you then have jdks improved to",
    "start": "1506679",
    "end": "1513960"
  },
  {
    "text": "recognize what that is and not do it with a synchronized block but do it with a single instruction on a CPU and",
    "start": "1513960",
    "end": "1520000"
  },
  {
    "text": "intrinsic F and you move it into the jdk and the Java namespace so that it'll be locked down there and jdks can safely",
    "start": "1520000",
    "end": "1526480"
  },
  {
    "text": "know what it is other than some oh I think that random third party Library just loaded has these semantics I hope",
    "start": "1526480",
    "end": "1533000"
  },
  {
    "text": "the next version does too um if it's in the Java namespace then it's specified",
    "start": "1533000",
    "end": "1538399"
  },
  {
    "text": "you know exactly what it'll do you can replace the implementation so let's look",
    "start": "1538399",
    "end": "1545559"
  },
  {
    "text": "at the forms that we talked about and zoom into one of them arrays of structure structur array is simple it's",
    "start": "1545559",
    "end": "1552640"
  },
  {
    "text": "a collection of type T and it's happens to be arranged like an ARR you have a get by index you get",
    "start": "1552640",
    "end": "1559600"
  },
  {
    "text": "an object out of it that's the API the simple API to it right there is no put",
    "start": "1559600",
    "end": "1565000"
  },
  {
    "text": "remember um it's immutable and you can't replace elements and to make it you have",
    "start": "1565000",
    "end": "1571320"
  },
  {
    "text": "to use a factory for example here we're making an array with 100 objects of some",
    "start": "1571320",
    "end": "1578039"
  },
  {
    "text": "class some class. class right that's how you make one of",
    "start": "1578039",
    "end": "1583240"
  },
  {
    "text": "these all the elements are created instantiated and constructed when you made this so there'll be 100 Constructor",
    "start": "1583240",
    "end": "1590159"
  },
  {
    "text": "calls when you do this cuz there's 100 objects being constructed right and we support all kinds of",
    "start": "1590159",
    "end": "1596760"
  },
  {
    "text": "interesting Constructor forms because if you have to create all the stuff at the beginning and we want to support any",
    "start": "1596760",
    "end": "1603039"
  },
  {
    "text": "constructible Java object we can't just say the ones with default Constructors which you know that's how the default",
    "start": "1603039",
    "end": "1608919"
  },
  {
    "text": "Constructor would be you can get into some interesting complex things so take as an example suppose you have a class",
    "start": "1608919",
    "end": "1615200"
  },
  {
    "text": "like this class do it's got an internal final field you have to initialize as a",
    "start": "1615200",
    "end": "1620840"
  },
  {
    "text": "Constructor can't touch it later and that final field is support to somehow indicate my index in something bigger",
    "start": "1620840",
    "end": "1627120"
  },
  {
    "text": "why because that's what that's what I chose here suppose I want to create an array",
    "start": "1627120",
    "end": "1633799"
  },
  {
    "text": "with eight elements of that what I need to do is say which Constructor I want to use that's in Java how to say I need to",
    "start": "1633799",
    "end": "1640240"
  },
  {
    "text": "use that Constructor and this is how you make the right so I'm making the right of uh that",
    "start": "1640240",
    "end": "1648640"
  },
  {
    "text": "should be doof rather than my member object sorry for the typo and see that Lambda expression there you you can you",
    "start": "1648640",
    "end": "1655279"
  },
  {
    "text": "don't have to use a Lambda expression but it's a perfect fit here where I say for this context create a new",
    "start": "1655279",
    "end": "1661159"
  },
  {
    "text": "Constructor and arguments with that Constructor and the parameter is actually the index into the array so",
    "start": "1661159",
    "end": "1666960"
  },
  {
    "text": "each element will get a separate parameter that depends on the context of where you are in they right that's an",
    "start": "1666960",
    "end": "1673240"
  },
  {
    "text": "example of a fairly complex interaction with the Constructor but it goes to that level",
    "start": "1673240",
    "end": "1678559"
  },
  {
    "text": "uh you don't have to do these unless you need that complex it's much simpler if you don't but we needed to enable that",
    "start": "1678559",
    "end": "1684200"
  },
  {
    "text": "kind of stuff in order to support arbitrary object membership in in this",
    "start": "1684200",
    "end": "1690640"
  },
  {
    "text": "collection liveness is a very interesting quality here what we found when we did when we started working on",
    "start": "1690640",
    "end": "1696840"
  },
  {
    "text": "this is um that we looked at this as something that",
    "start": "1696840",
    "end": "1701919"
  },
  {
    "text": "other people have already done arrays or big objects with a reference to the middle of them cuz they're FL",
    "start": "1701919",
    "end": "1708000"
  },
  {
    "text": "and you want to give people a reference and they can hold it and we looked at what other runtimes do and invariably",
    "start": "1708000",
    "end": "1713120"
  },
  {
    "text": "what they all do is there's this container thing and you point to the middle of it and pointing to the middle",
    "start": "1713120",
    "end": "1718559"
  },
  {
    "text": "of it keeps the outside alive and we started down that path saying okay if you if you have a Live member of a",
    "start": "1718559",
    "end": "1725760"
  },
  {
    "text": "structure array then the structure array is aive application and we work down to see okay what would we need to do that",
    "start": "1725760",
    "end": "1732159"
  },
  {
    "text": "how do we support in a runtime and a garbage collector is what needs to change and this is doable cuz other run",
    "start": "1732159",
    "end": "1737559"
  },
  {
    "text": "do it but it's kind of complex to change what Java does to do that and about a",
    "start": "1737559",
    "end": "1742679"
  },
  {
    "text": "month into this one of our kyc guys you know said remind me again why we're",
    "start": "1742679",
    "end": "1749039"
  },
  {
    "text": "doing this remember there's a complexity is you know is should make you rethink the",
    "start": "1749039",
    "end": "1756399"
  },
  {
    "text": "thing um so why are we trying to keep the container alive when we point to the member why do other people do it well",
    "start": "1756399",
    "end": "1763120"
  },
  {
    "text": "the reason other people do it is if you go to a field in an object a field doesn't live by",
    "start": "1763120",
    "end": "1769320"
  },
  {
    "text": "itself if you point to a member of an array that's a struct not an object a",
    "start": "1769320",
    "end": "1774480"
  },
  {
    "text": "struct a struct doesn't live by itself it doesn't have liveness so what you're actually doing is keeping alive the",
    "start": "1774480",
    "end": "1780200"
  },
  {
    "text": "closest thing that contains it that has liveness which is why others chose that",
    "start": "1780200",
    "end": "1785440"
  },
  {
    "text": "but we have proper Java objects these things that we put in the collection are regular Java objects they don't need",
    "start": "1785440",
    "end": "1791519"
  },
  {
    "text": "somebody else to keep them alive they have Liv this if somebody posts them they're alive if not they're not and",
    "start": "1791519",
    "end": "1798240"
  },
  {
    "text": "with that it was sort of a you know a whole bunch of things that completely eliminated his work the work actually",
    "start": "1798240",
    "end": "1803679"
  },
  {
    "text": "became much much easier to intrinsi and we found that it's very very natural so structur R is just an idiomatic Java",
    "start": "1803679",
    "end": "1811799"
  },
  {
    "text": "collection you already know how it behaves are there any other collections that you use where when you put",
    "start": "1811799",
    "end": "1818159"
  },
  {
    "text": "something in it the collection stays alive if you put something in the hash map doesn't that doesn't keep the hash",
    "start": "1818159",
    "end": "1823720"
  },
  {
    "text": "map alive the r list alive or the bed bucket alive whatever it is doing if it's alive it's alive if it's not it's",
    "start": "1823720",
    "end": "1830200"
  },
  {
    "text": "not and if the object is alive it can stay alive even if the collection is gone that's normal idiomatic jav you",
    "start": "1830200",
    "end": "1836120"
  },
  {
    "text": "don't even think about it that's natural so structure is the same um now under",
    "start": "1836120",
    "end": "1842480"
  },
  {
    "text": "the hood implemention are going to need to do nice tricks if we want to optimize this then yes we need to move everything",
    "start": "1842480",
    "end": "1848279"
  },
  {
    "text": "in the collection together but that's implementation it's not",
    "start": "1848279",
    "end": "1854279"
  },
  {
    "text": "semantics now the benefits of this is that there's no special",
    "start": "1854279",
    "end": "1860000"
  },
  {
    "text": "behavior it acts like any other collection from an optimization perspective from a coding perspective",
    "start": "1860000",
    "end": "1866200"
  },
  {
    "text": "you don't have weird surprising things like I made a gigabyte array of things and one of them stayed alive so I'm",
    "start": "1866200",
    "end": "1872360"
  },
  {
    "text": "still holding on to a gigaby of memory that would be highly surprising to a point of crashing right um and it",
    "start": "1872360",
    "end": "1880039"
  },
  {
    "text": "happens to be really easy to optimize for so elements in the structure are",
    "start": "1880039",
    "end": "1885320"
  },
  {
    "text": "just regular elements you can do anything anything to them because they are just regular objects you can lock them you can get identity hash codes you",
    "start": "1885320",
    "end": "1892159"
  },
  {
    "text": "can put them in other collections you can take your array of objects and index it with 17 different hash",
    "start": "1892159",
    "end": "1898480"
  },
  {
    "text": "Maps try to do that with an array of EV",
    "start": "1898480",
    "end": "1903559"
  },
  {
    "text": "um and you can cast that content it's just the regular object you can take that number and give it to anything that",
    "start": "1903559",
    "end": "1910159"
  },
  {
    "text": "expects a job object you can give it to on forj you could give it to some old code that you don't like and don't know",
    "start": "1910159",
    "end": "1917039"
  },
  {
    "text": "but but it does something it's not going to break it doesn't need to be recoded to deal with a new special thing",
    "start": "1917039",
    "end": "1923679"
  },
  {
    "text": "structur itself is also an object and it's not special you so this is all",
    "start": "1923679",
    "end": "1929360"
  },
  {
    "text": "natural it's it's this Elegance that falls out of a decision where you immediately know it's right and you see all the things that",
    "start": "1929360",
    "end": "1935440"
  },
  {
    "text": "get some other things about stretching aray um we're in should say 2015 in 2015",
    "start": "1935440",
    "end": "1944600"
  },
  {
    "text": "it'd be silly to think of an AR with to to the 31st limit on length that would be a fundamental",
    "start": "1944600",
    "end": "1952200"
  },
  {
    "text": "mistake almost as bad as building a language with no 64-bit integers in it",
    "start": "1952200",
    "end": "1957399"
  },
  {
    "text": "all right that's previous talk um not their fault JavaScript just doesn't have",
    "start": "1957399",
    "end": "1962799"
  },
  {
    "text": "a lot um I hope maybe at script we'll get one um nested arrays are supported",
    "start": "1962799",
    "end": "1970320"
  },
  {
    "text": "inherently multi-dimensional support is built in so you can have structure rays of structure rays of structure Rays if",
    "start": "1970320",
    "end": "1975919"
  },
  {
    "text": "you wanted non Leaf structured arrays are just element members so you can have",
    "start": "1975919",
    "end": "1981440"
  },
  {
    "text": "rows and columns and index The Columns and then there things",
    "start": "1981440",
    "end": "1986559"
  },
  {
    "text": "inside sub structur is subclassable this is a powerful feature and we think it'll",
    "start": "1986559",
    "end": "1991600"
  },
  {
    "text": "be the idiomatic way of using it yes you could code to brackets if you want if you like generics and a lot of them no",
    "start": "1991600",
    "end": "1998799"
  },
  {
    "text": "problem but it's very convenient to subclass a generic type in a non-generic",
    "start": "1998799",
    "end": "2004399"
  },
  {
    "text": "form and it simplifies a lot of code certainly makes it much easier to do all the casting and checking and avoid all",
    "start": "2004399",
    "end": "2010559"
  },
  {
    "text": "the um needing to do suppressed warnings all over the place um structured array",
    "start": "2010559",
    "end": "2016600"
  },
  {
    "text": "is also not constructible you can't make a structured array by NE it you have to",
    "start": "2016600",
    "end": "2022159"
  },
  {
    "text": "make it with a factory now that's a fundamental thing that we needed to do because of java",
    "start": "2022159",
    "end": "2027880"
  },
  {
    "text": "semantics Java doesn't have a way of instantiating something of variable size",
    "start": "2027880",
    "end": "2033000"
  },
  {
    "text": "except for a primitive array new in Java is always a fixed size new array is a",
    "start": "2033000",
    "end": "2039720"
  },
  {
    "text": "variable size but only of the pr primitive array types this is a thing",
    "start": "2039720",
    "end": "2044919"
  },
  {
    "text": "that we need to make that has a different in length depending on parameters to its Constructor and by the time we get to",
    "start": "2044919",
    "end": "2051638"
  },
  {
    "text": "the Constructor it's too late we're supposed to allocate this stuff so we need a factory Paradigm",
    "start": "2051639",
    "end": "2056960"
  },
  {
    "text": "saying Factory please make this for me rather than a new and please constructing what I just allocated",
    "start": "2056960",
    "end": "2062560"
  },
  {
    "text": "paradig which is why it has to be done with the factory now has anybody noticed the",
    "start": "2062560",
    "end": "2068638"
  },
  {
    "text": "contradiction in this slide here so the last two bullets here",
    "start": "2068639",
    "end": "2077320"
  },
  {
    "text": "contradict each other I'm saying that you cannot new you",
    "start": "2077320",
    "end": "2083240"
  },
  {
    "text": "cannot construct structured arays but they are subclassable and you can subclass",
    "start": "2083240",
    "end": "2089200"
  },
  {
    "text": "something that doesn't have an exposed construct that's a basic requirement for subclassing super has to be",
    "start": "2089200",
    "end": "2094638"
  },
  {
    "text": "constructible from wherever you're doing it so how do we bridge that well it turns",
    "start": "2094639",
    "end": "2099760"
  },
  {
    "text": "out that that we wrestled with this a lot because we wanted the qualities but you know that's not how the semics work",
    "start": "2099760",
    "end": "2106920"
  },
  {
    "text": "what we settled on is we need to make it impossible to construct a structured R",
    "start": "2106920",
    "end": "2114200"
  },
  {
    "text": "that's not the same as thing impossible to write something that tries to construct the structured R you can write",
    "start": "2114200",
    "end": "2120400"
  },
  {
    "text": "something equals new structure ring all implementations including the vanilla one will throw an exception if",
    "start": "2120400",
    "end": "2126839"
  },
  {
    "text": "if you drive around that code so it'll never work anywhere which means that we don't have to deal with it in a while",
    "start": "2126839",
    "end": "2132359"
  },
  {
    "text": "it'll fail exactly the same on everything so it's okay if you actually want structure Ray you will use a",
    "start": "2132359",
    "end": "2138000"
  },
  {
    "text": "factory and if you try to construct it directly the base Constructor will throw exceptions on we use something I call",
    "start": "2138000",
    "end": "2144839"
  },
  {
    "text": "Constructor magic that makes it safe to construct through the factory including all the nice Constructors for yourself",
    "start": "2144839",
    "end": "2151000"
  },
  {
    "text": "classes but not a you directly construct and if you want to look at gith for how the trick works you welome to it it",
    "start": "2151000",
    "end": "2156079"
  },
  {
    "text": "might be useful other fields too um now optimized implementations of structure",
    "start": "2156079",
    "end": "2162640"
  },
  {
    "text": "would need to do something interesting here and this is true for structure in other forms too you don't have to do this you can",
    "start": "2162640",
    "end": "2169440"
  },
  {
    "text": "just run the vanilla code but it won't be any faster won't be slower but won't be faster if you want to get the speed",
    "start": "2169440",
    "end": "2175079"
  },
  {
    "text": "you need to lay things out flat that means you need to start thinking of contained and container objects a relationship between a container and a",
    "start": "2175079",
    "end": "2181520"
  },
  {
    "text": "container a container has regular objects and the container itself s is a",
    "start": "2181520",
    "end": "2187200"
  },
  {
    "text": "regular object so you can have hierarchies of this and given a contained object the jvm not you the jvm",
    "start": "2187200",
    "end": "2193560"
  },
  {
    "text": "needs to be able to get from the contained to The Container the reason it needs to do that is if the garbage",
    "start": "2193560",
    "end": "2200280"
  },
  {
    "text": "collector is moving things around copying compacting whatever it it's doing and the first thing it ran into is",
    "start": "2200280",
    "end": "2206800"
  },
  {
    "text": "a member object of a larger thing it can't just pick that up and move it it needs to move the whole thing together",
    "start": "2206800",
    "end": "2213599"
  },
  {
    "text": "to retain the flatness so if it gets gets to something that's container needs to look for the outermost container and",
    "start": "2213599",
    "end": "2219640"
  },
  {
    "text": "move that as one piece the outermost live container to be",
    "start": "2219640",
    "end": "2224760"
  },
  {
    "text": "specific now you don't have to deal with the details the jvm rers like us need to",
    "start": "2224760",
    "end": "2230520"
  },
  {
    "text": "but that's basically the whole thing that's the most we need from the runtime as far as new features or new Behavior",
    "start": "2230520",
    "end": "2236920"
  },
  {
    "text": "under the hood this happens to be fairly simple to implement we've been",
    "start": "2236920",
    "end": "2242319"
  },
  {
    "text": "implementing it in Zen our collector the C4 collector but also we''ve been building a proof of concept open G DEC",
    "start": "2242319",
    "end": "2249280"
  },
  {
    "text": "based with par GC doing this and we've looked at what are things the new CMS",
    "start": "2249280",
    "end": "2254680"
  },
  {
    "text": "and G1 and none of them are highly complex this doesn't introduce anything fundamental or different that the",
    "start": "2254680",
    "end": "2260680"
  },
  {
    "text": "collector doesn't already seem to know how to do there's certainly work there but it's not it's not trivial but it's",
    "start": "2260680",
    "end": "2267520"
  },
  {
    "text": "not highly complex and risky so let's look at some more things",
    "start": "2267520",
    "end": "2272680"
  },
  {
    "text": "about this what are we going to get from optimized implementation but once we lay things out in memory",
    "start": "2272680",
    "end": "2279240"
  },
  {
    "text": "flat because we can streaming just happens streaming is simply a result of",
    "start": "2279240",
    "end": "2284880"
  },
  {
    "text": "how you put things in memory and if we put them in memory in a nice flat natural way it's like a structured array",
    "start": "2284880",
    "end": "2290000"
  },
  {
    "text": "of objects and they're strided then all streaming operations will simply happen as a stream Hardware prates will just do",
    "start": "2290000",
    "end": "2296160"
  },
  {
    "text": "the work no need for special optimizations now dead reckoning does need some compiler interaction and the",
    "start": "2296160",
    "end": "2303560"
  },
  {
    "text": "reason for that is when we want to get to 17 we don't look a reference up to get",
    "start": "2303560",
    "end": "2310440"
  },
  {
    "text": "there but we have to do an operation that looks like this this is the actual math needed so to get to address of",
    "start": "2310440",
    "end": "2317040"
  },
  {
    "text": "element we need to take the array address add the body size of that of the array and then multiply the index by the",
    "start": "2317040",
    "end": "2324280"
  },
  {
    "text": "size of the element that's how you get to the address of the element in this statement body size and",
    "start": "2324280",
    "end": "2332240"
  },
  {
    "text": "element size may vary between different instances of the same structure",
    "start": "2332240",
    "end": "2338119"
  },
  {
    "text": "sorry of structured array so body size could be different because structured array could have sub classes so",
    "start": "2338119",
    "end": "2344400"
  },
  {
    "text": "different structured arrays the subclass could have bit different body sizes element size could vary between two",
    "start": "2344400",
    "end": "2350599"
  },
  {
    "text": "instances I could have a structur array of point and a structure of box those are two different element sizes so these",
    "start": "2350599",
    "end": "2356920"
  },
  {
    "text": "are not a d reference but they are a data dependent calculation of a final address so what do we do about",
    "start": "2356920",
    "end": "2363640"
  },
  {
    "text": "it well element size and body size not constant but it turns out that they're",
    "start": "2363640",
    "end": "2368720"
  },
  {
    "text": "susceptible to optimizations that we do in jbms for other reasons not the same optimizations but I'm using analogies",
    "start": "2368720",
    "end": "2375240"
  },
  {
    "text": "here who here knows what class hierarchy analysis does uh so that's a whole different GBM",
    "start": "2375240",
    "end": "2381720"
  },
  {
    "text": "mechanic Stu to talk about so I'll do a quick thing on that you of time class",
    "start": "2381720",
    "end": "2387920"
  },
  {
    "text": "analysis is is super powerful it's why you don't have to do final [Music] methods and and you don't have to expose",
    "start": "2387920",
    "end": "2395079"
  },
  {
    "text": "private fields when you have a method that is the only implementor in the world for example I",
    "start": "2395079",
    "end": "2402240"
  },
  {
    "text": "have a base glass animal that has color so animal get color gets the field color",
    "start": "2402240",
    "end": "2408800"
  },
  {
    "text": "private color then I have a dog and a cat and a bird all of those don't override color",
    "start": "2408800",
    "end": "2415560"
  },
  {
    "text": "there's only one implementer class market analysis allows us to say hey in the world we know today right now loaded",
    "start": "2415560",
    "end": "2421800"
  },
  {
    "text": "into the JB there's only one implementor so when I see that virtual call to get color that's supposed to look my Ty and",
    "start": "2421800",
    "end": "2426960"
  },
  {
    "text": "all that I know there's only one so I'll go straight to that one if I load a",
    "start": "2426960",
    "end": "2432200"
  },
  {
    "text": "class later that makes that assumption wrong I'll throw away the code and recompile it that's actually what",
    "start": "2432200",
    "end": "2437520"
  },
  {
    "text": "happens okay so when you loow the class you might the optimize things that were that were done and class Hier analysis",
    "start": "2437520",
    "end": "2444079"
  },
  {
    "text": "is done when you load classes or when actually when you load the class and when you make the Assumption to begin",
    "start": "2444079",
    "end": "2449520"
  },
  {
    "text": "with it's more likely against the invalidation we can do a very similar thing here to say yeah body size is not",
    "start": "2449520",
    "end": "2457480"
  },
  {
    "text": "constant but is there a subass of structured array of this structured array type that I'm looking structur",
    "start": "2457480",
    "end": "2463800"
  },
  {
    "text": "array of Point let's say and if there isn't then I know exactly what the size is and it doesn't change until a new",
    "start": "2463800",
    "end": "2469119"
  },
  {
    "text": "class and sub classes it appears that's a similar analysis now",
    "start": "2469119",
    "end": "2475079"
  },
  {
    "text": "the other implementation optimization that school is an inline cache what if I have in that world I gave you a",
    "start": "2475079",
    "end": "2482079"
  },
  {
    "text": "chameleon and a chameleon is this animal that sits on a branch and the get color the on the branch so I need to override",
    "start": "2482079",
    "end": "2487960"
  },
  {
    "text": "that car no longer one implementor you have to throw away that position however if",
    "start": "2487960",
    "end": "2494280"
  },
  {
    "text": "the code is sitting in a dog Cam and all sees his dogs and never sees a chameleon it actually could sit there and say you",
    "start": "2494280",
    "end": "2500280"
  },
  {
    "text": "know what I've only seen dogs I think I need to call the dog get color which is animal get color and I never see aons it",
    "start": "2500280",
    "end": "2506800"
  },
  {
    "text": "could speculatively say if it's a dog call that which is much cheaper than figure out which method to call in a",
    "start": "2506800",
    "end": "2514400"
  },
  {
    "text": "similar way element size fits in a similar thing right we can say hey this thing can have anything in it but I've",
    "start": "2514400",
    "end": "2520599"
  },
  {
    "text": "only seen points so if the element type is point then use Point as size",
    "start": "2520599",
    "end": "2527640"
  },
  {
    "text": "otherwise do some slower thing that replaces a data dependent operation of getting the type with a",
    "start": "2527640",
    "end": "2535480"
  },
  {
    "text": "control flow operation that branch that speculates that something is right and we'll have to reverse and basically",
    "start": "2535480",
    "end": "2542760"
  },
  {
    "text": "mispredict the branch if it turns out to not see a point which won't happen these optimizations are common for other",
    "start": "2542760",
    "end": "2548680"
  },
  {
    "text": "things we believe they'll be common here too and that's why dead reckoning should and we believe will work um there's a",
    "start": "2548680",
    "end": "2554880"
  },
  {
    "text": "lot more detail to this I we get into here now quickly looking at the other",
    "start": "2554880",
    "end": "2560559"
  },
  {
    "text": "forms um we have other things strs and structs and uh an array struct with an",
    "start": "2560559",
    "end": "2566000"
  },
  {
    "text": "array at the end struct instruct is something we call intrinsic objects intrinsic in the English language",
    "start": "2566000",
    "end": "2571440"
  },
  {
    "text": "meaning meaning intrinsic to not in what optimizers think",
    "start": "2571440",
    "end": "2576960"
  },
  {
    "text": "it's intrinsic so object X is intrinsic to object y it's inside of it created at",
    "start": "2576960",
    "end": "2582040"
  },
  {
    "text": "the same time it's a natural part of it etc for example this is the Syntax for declaring an end point in a",
    "start": "2582040",
    "end": "2590760"
  },
  {
    "text": "line it's a private final point this syntax should be readable because it's not new there's no language stuff and",
    "start": "2590760",
    "end": "2597720"
  },
  {
    "text": "but there is an annotation saying this is intrinsic and you initialize it with the",
    "start": "2597720",
    "end": "2603760"
  },
  {
    "text": "factory that do an intrinsic object construct with it this is as thin as we've gotten the",
    "start": "2603760",
    "end": "2609880"
  },
  {
    "text": "spelling so far there's some you know you could get this thinner but then you would need language changes so this is",
    "start": "2609880",
    "end": "2615680"
  },
  {
    "text": "as far as we think we can go right now without changing the language um so intrinsic objects are",
    "start": "2615680",
    "end": "2622800"
  },
  {
    "text": "there and that would allow us to lay them out within the object and important thing to note is we put the object",
    "start": "2622800",
    "end": "2628680"
  },
  {
    "text": "inside but we will keep the reference field and the reference field will point to the object and the reason we need",
    "start": "2628680",
    "end": "2634720"
  },
  {
    "text": "that is because there are all kinds of things in jvms that unfortunately have when you have to deal within a jvm for",
    "start": "2634720",
    "end": "2640880"
  },
  {
    "text": "example final doesn't really mean final you can override a final Fuel and put",
    "start": "2640880",
    "end": "2646000"
  },
  {
    "text": "something else in it for example every time you um deserialize a class that has",
    "start": "2646000",
    "end": "2651200"
  },
  {
    "text": "reference in it you probably doing that first you make it then you point it to something um and that means that if that",
    "start": "2651200",
    "end": "2658599"
  },
  {
    "text": "happens you may point to something that's not the one we picked so we need to be able to follow the to the right",
    "start": "2658599",
    "end": "2664160"
  },
  {
    "text": "place again this speculation here is it doesn't happen so when you get to the interclass you go straight without the",
    "start": "2664160",
    "end": "2670680"
  },
  {
    "text": "referencing but if somebody using reflection overrides finality of the field we throw our away to optimization and actually use the reference and just",
    "start": "2670680",
    "end": "2677359"
  },
  {
    "text": "go as slow as regular jva does today anyway that's the trick there",
    "start": "2677359",
    "end": "2682760"
  },
  {
    "text": "structs with an AR are simple because we just create them as subclassable arays a",
    "start": "2682760",
    "end": "2688359"
  },
  {
    "text": "subclassable aray is a natural way to extend fields and some anything is natural way to add fields to a structure",
    "start": "2688359",
    "end": "2695599"
  },
  {
    "text": "and if we take an array that's a way to represent that we also have a reference array so we can have a a generic",
    "start": "2695599",
    "end": "2703079"
  },
  {
    "text": "reference array structured array is already some class so it already allows you to have a struct with an array of",
    "start": "2703079",
    "end": "2709319"
  },
  {
    "text": "strs at there that's just a result of that now these forms together are",
    "start": "2709319",
    "end": "2714599"
  },
  {
    "text": "composable which gets interesting so this is where you know you have to have Turtles all the way down um you can have",
    "start": "2714599",
    "end": "2721599"
  },
  {
    "text": "uh the Heat and inaside you can have regular object you can have a structured array of structure of Fu and then you",
    "start": "2721599",
    "end": "2727640"
  },
  {
    "text": "can have a structure of Fu as a member of that then you can have Fu as a member of that and inside Fu we can have two",
    "start": "2727640",
    "end": "2733000"
  },
  {
    "text": "extrinsic objects that are bar and doof and in addition to other fields and inside bar we can have another array of",
    "start": "2733000",
    "end": "2739640"
  },
  {
    "text": "fixed size length that is intrinsic to bar this entire thing can be flat in",
    "start": "2739640",
    "end": "2746119"
  },
  {
    "text": "memory but to show you what it looks like in an example code here's an array of",
    "start": "2746119",
    "end": "2751359"
  },
  {
    "text": "octagons it's a class it's called octagons some classes",
    "start": "2751359",
    "end": "2756400"
  },
  {
    "text": "structured array of octagon makes it nice to deal with octagons and then within octagon we have an intrinsic",
    "start": "2756400",
    "end": "2762160"
  },
  {
    "text": "array of eight points because it's an octagon fixed length and that's an intrinsic structure array of Point",
    "start": "2762160",
    "end": "2769960"
  },
  {
    "text": "elements and then we can do the rest down there now the nice thing there is you look at the statement at the bottom",
    "start": "2769960",
    "end": "2775839"
  },
  {
    "text": "getting to point x of sorry element uh",
    "start": "2775839",
    "end": "2780960"
  },
  {
    "text": "coordinate X of point point index of octagon y inside an array and there's",
    "start": "2780960",
    "end": "2788119"
  },
  {
    "text": "not a single required VI reference here and you can stream it it's flat in",
    "start": "2788119",
    "end": "2793160"
  },
  {
    "text": "memory so that is simply math on Andress oct the references another nice thing is",
    "start": "2793160",
    "end": "2800800"
  },
  {
    "text": "you can use them in natural iterators like this can iterate an octagons iterate on points and then go to get the",
    "start": "2800800",
    "end": "2807359"
  },
  {
    "text": "things and there's no memory access in iterators these are all just math and",
    "start": "2807359",
    "end": "2812400"
  },
  {
    "text": "octagons right so even though you're iterating you're just iterating math rather than walking",
    "start": "2812400",
    "end": "2817720"
  },
  {
    "text": "M okay let's quickly look at status the code is on GitHub it works we're still",
    "start": "2817720",
    "end": "2824119"
  },
  {
    "text": "working on some spelling and looking for input but we think it's very mature intrinsic vitamins are being worked on",
    "start": "2824119",
    "end": "2831000"
  },
  {
    "text": "for both sing and open GDK we will share them uh very soon you think uh trying to",
    "start": "2831000",
    "end": "2836240"
  },
  {
    "text": "propose an open GDK project that's the next step an OP JP project and the aim",
    "start": "2836240",
    "end": "2841920"
  },
  {
    "text": "is to add object layout as a library and only that to some version of java vanilla implementations will work",
    "start": "2841920",
    "end": "2849480"
  },
  {
    "text": "fine but if we look at this since this will work on any JK what we're actually",
    "start": "2849480",
    "end": "2855760"
  },
  {
    "text": "asking for in adding it to a Java spec is not to implement the optimization in",
    "start": "2855760",
    "end": "2860920"
  },
  {
    "text": "the GBM that can happen anytime later we just want these classes in the name space which me that if we mature them",
    "start": "2860920",
    "end": "2867960"
  },
  {
    "text": "and we have the right semantics for the classes we could just move them in and it'll just work with no change in the F",
    "start": "2867960",
    "end": "2873280"
  },
  {
    "text": "view so we're just asking here's some classes that work can you move them into the main space that's the only actual",
    "start": "2873280",
    "end": "2878480"
  },
  {
    "text": "change We'll be asking for once we get that then we can go wild with everybody optimizing the code ball and we will",
    "start": "2878480",
    "end": "2884880"
  },
  {
    "text": "contribute optimization still Youk to do it but we don't have to do it maturely and in time for some specific Java",
    "start": "2884880",
    "end": "2890720"
  },
  {
    "text": "version to do that so that's it I think I'm on time I",
    "start": "2890720",
    "end": "2896520"
  },
  {
    "text": "don't know about questions we probably don't have much room for those but here's a slide for questions and I do",
    "start": "2896520",
    "end": "2902599"
  },
  {
    "text": "have a second talk today if you like my tone or my uh I'm talking about an elmax case study",
    "start": "2902599",
    "end": "2908520"
  },
  {
    "text": "of using our actual products name uh at the last talk of today in sponsored talk",
    "start": "2908520",
    "end": "2913599"
  },
  {
    "text": "stop um there's some links here and do we have time for a question or two I think we have time for the three serious",
    "start": "2913599",
    "end": "2920280"
  },
  {
    "text": "question I okay three serious questions we have so let's thank the speaker [Applause]",
    "start": "2920280",
    "end": "2927240"
  },
  {
    "text": "first",
    "start": "2927240",
    "end": "2930240"
  }
]