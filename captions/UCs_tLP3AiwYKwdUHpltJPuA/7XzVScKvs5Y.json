[
  {
    "text": "[Applause]",
    "start": "10220",
    "end": "12880"
  },
  {
    "text": "hi cool this works so this started as a",
    "start": "12880",
    "end": "16358"
  },
  {
    "text": "you should go learn cotland talk but",
    "start": "16359",
    "end": "19400"
  },
  {
    "text": "actually this is a you should go learn",
    "start": "19400",
    "end": "21039"
  },
  {
    "text": "hasool talk and then take everything you",
    "start": "21039",
    "end": "23160"
  },
  {
    "text": "learn from hasool and just bring it back",
    "start": "23160",
    "end": "24800"
  },
  {
    "text": "to whatever language you're working in",
    "start": "24800",
    "end": "26960"
  },
  {
    "text": "and surprisingly that's actually a fair",
    "start": "26960",
    "end": "30599"
  },
  {
    "text": "uh approachable thing to do if you're",
    "start": "30599",
    "end": "32840"
  },
  {
    "text": "working in an environment where the",
    "start": "32840",
    "end": "35000"
  },
  {
    "text": "building blocks are kind of given to you",
    "start": "35000",
    "end": "37239"
  },
  {
    "text": "so what we're going to be talking about",
    "start": "37239",
    "end": "38239"
  },
  {
    "text": "today is what a functional programming",
    "start": "38239",
    "end": "40520"
  },
  {
    "text": "application looks like using cotlin uh",
    "start": "40520",
    "end": "43640"
  },
  {
    "text": "using spring we'll be talking about",
    "start": "43640",
    "end": "45840"
  },
  {
    "text": "improving your controllers making them a",
    "start": "45840",
    "end": "47480"
  },
  {
    "text": "little bit safer we talking about",
    "start": "47480",
    "end": "49079"
  },
  {
    "text": "manipulating data be talking about",
    "start": "49079",
    "end": "51239"
  },
  {
    "text": "building maximally polymorphic services",
    "start": "51239",
    "end": "53800"
  },
  {
    "text": "and we'll talk about doing lawful and",
    "start": "53800",
    "end": "55680"
  },
  {
    "text": "statistical tests and then if there's a",
    "start": "55680",
    "end": "57960"
  },
  {
    "text": "little bit of time at the end we'll talk",
    "start": "57960",
    "end": "58960"
  },
  {
    "text": "about what the future of functional",
    "start": "58960",
    "end": "60440"
  },
  {
    "text": "programming in cotland might look",
    "start": "60440",
    "end": "62199"
  },
  {
    "text": "like so the techniques that we're going",
    "start": "62199",
    "end": "65280"
  },
  {
    "text": "to talk about today mostly revolve",
    "start": "65280",
    "end": "66600"
  },
  {
    "text": "around using this Library Arrow arrow is",
    "start": "66600",
    "end": "70159"
  },
  {
    "text": "a functional programming Library",
    "start": "70159",
    "end": "72759"
  },
  {
    "text": "framework and it builds on this idea by",
    "start": "72759",
    "end": "76799"
  },
  {
    "text": "a pair of people um yup and white they",
    "start": "76799",
    "end": "79400"
  },
  {
    "text": "delivered a paper uh years ago called",
    "start": "79400",
    "end": "82040"
  },
  {
    "text": "lightweight higher kinded polymorphism",
    "start": "82040",
    "end": "84320"
  },
  {
    "text": "and it's basically a way of encoding",
    "start": "84320",
    "end": "85759"
  },
  {
    "text": "higher kinded types in a language that",
    "start": "85759",
    "end": "87360"
  },
  {
    "text": "doesn't have higher kinded types it's a",
    "start": "87360",
    "end": "89159"
  },
  {
    "text": "very cool idea and you see a little bit",
    "start": "89159",
    "end": "90680"
  },
  {
    "text": "of a snapshot through it throughout the",
    "start": "90680",
    "end": "92040"
  },
  {
    "text": "talk I recommend reading the paper it's",
    "start": "92040",
    "end": "94159"
  },
  {
    "text": "it's a well-laid out paper with",
    "start": "94159",
    "end": "96360"
  },
  {
    "text": "practical examples you can read the",
    "start": "96360",
    "end": "98200"
  },
  {
    "text": "paper and then build the library",
    "start": "98200",
    "end": "99759"
  },
  {
    "text": "yourself as long as you have a language",
    "start": "99759",
    "end": "101320"
  },
  {
    "text": "that has generics um if you want a",
    "start": "101320",
    "end": "103799"
  },
  {
    "text": "really more in-depth uh delivery of it I",
    "start": "103799",
    "end": "106240"
  },
  {
    "text": "gave a a more in-depth talk of how it",
    "start": "106240",
    "end": "107880"
  },
  {
    "text": "works last year at lamb Jam um but so",
    "start": "107880",
    "end": "110719"
  },
  {
    "text": "we'll start we're going to build a",
    "start": "110719",
    "end": "111680"
  },
  {
    "text": "shopping cart application because",
    "start": "111680",
    "end": "113079"
  },
  {
    "text": "everyone builds shopping cart",
    "start": "113079",
    "end": "114479"
  },
  {
    "text": "applications um and we'll be taking data",
    "start": "114479",
    "end": "118159"
  },
  {
    "text": "taking a cart that someone's built in a",
    "start": "118159",
    "end": "119880"
  },
  {
    "text": "website processing it applying discounts",
    "start": "119880",
    "end": "123000"
  },
  {
    "text": "uh finding out if there's any stock",
    "start": "123000",
    "end": "124320"
  },
  {
    "text": "errors and then returning that to the",
    "start": "124320",
    "end": "126000"
  },
  {
    "text": "front end so we start with data um",
    "start": "126000",
    "end": "129360"
  },
  {
    "text": "really quickly in cotlin you have a",
    "start": "129360",
    "end": "131640"
  },
  {
    "text": "couple of things that almost look like",
    "start": "131640",
    "end": "132959"
  },
  {
    "text": "algebraic data types they're not quite",
    "start": "132959",
    "end": "134680"
  },
  {
    "text": "but they're pretty close so we have",
    "start": "134680",
    "end": "136239"
  },
  {
    "text": "these enom classes which basically build",
    "start": "136239",
    "end": "138239"
  },
  {
    "text": "tags but don't have like constructed",
    "start": "138239",
    "end": "140400"
  },
  {
    "text": "data uh we have uh the a way to build",
    "start": "140400",
    "end": "143400"
  },
  {
    "text": "classes um ordinary classes and we have",
    "start": "143400",
    "end": "146959"
  },
  {
    "text": "this tag a data class and a data class",
    "start": "146959",
    "end": "148879"
  },
  {
    "text": "gives you all of these methods for free",
    "start": "148879",
    "end": "151160"
  },
  {
    "text": "uh the most important one that it gives",
    "start": "151160",
    "end": "152400"
  },
  {
    "text": "you for free is this copy method now",
    "start": "152400",
    "end": "154599"
  },
  {
    "text": "things in in cotland are mostly",
    "start": "154599",
    "end": "156800"
  },
  {
    "text": "immutable by default um and mostly",
    "start": "156800",
    "end": "158760"
  },
  {
    "text": "immutably Bound by default so without a",
    "start": "158760",
    "end": "161640"
  },
  {
    "text": "way to update data inside a class you'd",
    "start": "161640",
    "end": "163640"
  },
  {
    "text": "be pretty lost uh especially because a",
    "start": "163640",
    "end": "165560"
  },
  {
    "text": "lot of the standard Library um that you",
    "start": "165560",
    "end": "167360"
  },
  {
    "text": "would share from java doesn't",
    "start": "167360",
    "end": "169000"
  },
  {
    "text": "necessarily give you that freedom so the",
    "start": "169000",
    "end": "171040"
  },
  {
    "text": "copy method lets you build uh lets you",
    "start": "171040",
    "end": "173360"
  },
  {
    "text": "change data inside a class and return a",
    "start": "173360",
    "end": "175680"
  },
  {
    "text": "new instance of that class so not",
    "start": "175680",
    "end": "177760"
  },
  {
    "text": "mutation inside the class but a a copy",
    "start": "177760",
    "end": "180040"
  },
  {
    "text": "of that",
    "start": "180040",
    "end": "181239"
  },
  {
    "text": "data these are all good defaults and",
    "start": "181239",
    "end": "183360"
  },
  {
    "text": "they give us a good way to do nice",
    "start": "183360",
    "end": "184840"
  },
  {
    "text": "things so if we want to combine two",
    "start": "184840",
    "end": "186360"
  },
  {
    "text": "carts we take Card a we take Card B we",
    "start": "186360",
    "end": "188519"
  },
  {
    "text": "construct a cart by calling the copy",
    "start": "188519",
    "end": "190480"
  },
  {
    "text": "method we take the line items from cart",
    "start": "190480",
    "end": "192680"
  },
  {
    "text": "a we append the line items from cart B",
    "start": "192680",
    "end": "195080"
  },
  {
    "text": "take the errors from Cod a we append the",
    "start": "195080",
    "end": "196840"
  },
  {
    "text": "errors from Cod B this kind of looks",
    "start": "196840",
    "end": "199400"
  },
  {
    "text": "like something we we used to in",
    "start": "199400",
    "end": "201840"
  },
  {
    "text": "functional languages right it's kind of",
    "start": "201840",
    "end": "203560"
  },
  {
    "text": "looks like a monoid so if we were going",
    "start": "203560",
    "end": "206000"
  },
  {
    "text": "to define a monoid in cotlin how would",
    "start": "206000",
    "end": "208040"
  },
  {
    "text": "we do that and so this is something",
    "start": "208040",
    "end": "210760"
  },
  {
    "text": "where Arrow helps us out a lot the way",
    "start": "210760",
    "end": "214080"
  },
  {
    "text": "that you deal with type classes and",
    "start": "214080",
    "end": "215599"
  },
  {
    "text": "higher kind of types in in cotland using",
    "start": "215599",
    "end": "217439"
  },
  {
    "text": "arrow is like I said this",
    "start": "217439",
    "end": "219080"
  },
  {
    "text": "defunctionalization trick so we have uh",
    "start": "219080",
    "end": "222400"
  },
  {
    "text": "yeah cool we have this uh interface",
    "start": "222400",
    "end": "224040"
  },
  {
    "text": "funter that's the stand in for our type",
    "start": "224040",
    "end": "226400"
  },
  {
    "text": "class so a funter is generic in F and",
    "start": "226400",
    "end": "229000"
  },
  {
    "text": "you can see here this kind Constructor",
    "start": "229000",
    "end": "231120"
  },
  {
    "text": "here the word kind generic in F and a",
    "start": "231120",
    "end": "234200"
  },
  {
    "text": "kind is a way to map some generic",
    "start": "234200",
    "end": "236400"
  },
  {
    "text": "structure F to wrap some generic",
    "start": "236400",
    "end": "238720"
  },
  {
    "text": "structure a it's basically saying if I",
    "start": "238720",
    "end": "241040"
  },
  {
    "text": "was going to pass a value to a function",
    "start": "241040",
    "end": "242560"
  },
  {
    "text": "where I was going to say a generic F",
    "start": "242560",
    "end": "244360"
  },
  {
    "text": "wrapping a generic a this is how I would",
    "start": "244360",
    "end": "247120"
  },
  {
    "text": "do it because you can't do that in in",
    "start": "247120",
    "end": "248760"
  },
  {
    "text": "cotlin you can't have a function where",
    "start": "248760",
    "end": "251040"
  },
  {
    "text": "the requirement on a on a variable is",
    "start": "251040",
    "end": "254000"
  },
  {
    "text": "generic in the Constructor so the the",
    "start": "254000",
    "end": "257359"
  },
  {
    "text": "kind trick allows you basically to take",
    "start": "257359",
    "end": "259840"
  },
  {
    "text": "something that is a higher kinded type",
    "start": "259840",
    "end": "261440"
  },
  {
    "text": "bring it back down into first order",
    "start": "261440",
    "end": "263800"
  },
  {
    "text": "types um and so we Define this type",
    "start": "263800",
    "end": "266120"
  },
  {
    "text": "class by defining the interface function",
    "start": "266120",
    "end": "268280"
  },
  {
    "text": "we Define our list we've called it list",
    "start": "268280",
    "end": "270280"
  },
  {
    "text": "K because we don't want to clash with",
    "start": "270280",
    "end": "271680"
  },
  {
    "text": "the existing list we have this higher",
    "start": "271680",
    "end": "274039"
  },
  {
    "text": "kind annotation the pre-processor um",
    "start": "274039",
    "end": "277080"
  },
  {
    "text": "that runs as part of cotlin will take",
    "start": "277080",
    "end": "278360"
  },
  {
    "text": "that higher kind annotation and generate",
    "start": "278360",
    "end": "280720"
  },
  {
    "text": "out the next three lines of code it'll",
    "start": "280720",
    "end": "282840"
  },
  {
    "text": "generate out a tag that lets you uh",
    "start": "282840",
    "end": "285240"
  },
  {
    "text": "basically pass that tag in place where",
    "start": "285240",
    "end": "287520"
  },
  {
    "text": "you'd want to say this is a partially",
    "start": "287520",
    "end": "289320"
  },
  {
    "text": "applied Constructor so that would be",
    "start": "289320",
    "end": "291479"
  },
  {
    "text": "like passing uh maybe or like passing",
    "start": "291479",
    "end": "294880"
  },
  {
    "text": "either without saying necessarily either",
    "start": "294880",
    "end": "297160"
  },
  {
    "text": "of a throwable in a string we have a",
    "start": "297160",
    "end": "299840"
  },
  {
    "text": "type Alias to allow us to go back and",
    "start": "299840",
    "end": "301639"
  },
  {
    "text": "forth between the kind and something",
    "start": "301639",
    "end": "304479"
  },
  {
    "text": "that stands in for the",
    "start": "304479",
    "end": "305960"
  },
  {
    "text": "kind and we have a way to get in and out",
    "start": "305960",
    "end": "309360"
  },
  {
    "text": "of this kind syntax because obviously a",
    "start": "309360",
    "end": "311479"
  },
  {
    "text": "kind fa can't have any Behavior that's",
    "start": "311479",
    "end": "314039"
  },
  {
    "text": "specific about F so if we're want to use",
    "start": "314039",
    "end": "315919"
  },
  {
    "text": "any of the methods or behaviors on F we",
    "start": "315919",
    "end": "317360"
  },
  {
    "text": "have to come back out of the kind and",
    "start": "317360",
    "end": "319720"
  },
  {
    "text": "then if we want to find the instance of",
    "start": "319720",
    "end": "321240"
  },
  {
    "text": "a type class we use the at extension",
    "start": "321240",
    "end": "323960"
  },
  {
    "text": "annotation we Define our interface as it",
    "start": "323960",
    "end": "327240"
  },
  {
    "text": "implements the required type class",
    "start": "327240",
    "end": "328800"
  },
  {
    "text": "interface and so in this case here we",
    "start": "328800",
    "end": "330840"
  },
  {
    "text": "say that for a list we're going to say",
    "start": "330840",
    "end": "333120"
  },
  {
    "text": "that the funter implementation uh which",
    "start": "333120",
    "end": "334960"
  },
  {
    "text": "implements map allows us to uh call the",
    "start": "334960",
    "end": "338160"
  },
  {
    "text": "function that exists on lists called map",
    "start": "338160",
    "end": "340240"
  },
  {
    "text": "which already exists um and that's how",
    "start": "340240",
    "end": "342080"
  },
  {
    "text": "we Define our funter and now we can use",
    "start": "342080",
    "end": "344120"
  },
  {
    "text": "this anywhere that we want to say this",
    "start": "344120",
    "end": "346199"
  },
  {
    "text": "is a function it takes a funter we don't",
    "start": "346199",
    "end": "348520"
  },
  {
    "text": "say that it takes lists we don't say",
    "start": "348520",
    "end": "349840"
  },
  {
    "text": "that it takes Maps we just get to use it",
    "start": "349840",
    "end": "351240"
  },
  {
    "text": "as a type",
    "start": "351240",
    "end": "352280"
  },
  {
    "text": "class so if we're going to Define our",
    "start": "352280",
    "end": "354520"
  },
  {
    "text": "monoid um we basically Define here our",
    "start": "354520",
    "end": "357039"
  },
  {
    "text": "shopping cart monoid we say that a",
    "start": "357039",
    "end": "358479"
  },
  {
    "text": "shopping cart's empty state is two empty",
    "start": "358479",
    "end": "360360"
  },
  {
    "text": "lists we say that our shopping carts",
    "start": "360360",
    "end": "361840"
  },
  {
    "text": "combined State uh takes all of the line",
    "start": "361840",
    "end": "364160"
  },
  {
    "text": "items and joins them takes all of the",
    "start": "364160",
    "end": "365720"
  },
  {
    "text": "errors and joins them and then we have a",
    "start": "365720",
    "end": "367919"
  },
  {
    "text": "monoid and we can use this uh we can see",
    "start": "367919",
    "end": "370240"
  },
  {
    "text": "in the used monoid function we don't",
    "start": "370240",
    "end": "371720"
  },
  {
    "text": "know anything about Cuts we don't know",
    "start": "371720",
    "end": "373199"
  },
  {
    "text": "anything about structures all we know is",
    "start": "373199",
    "end": "375680"
  },
  {
    "text": "that F uh has some way of saying f is a",
    "start": "375680",
    "end": "379520"
  },
  {
    "text": "monoid F0 um is a some type some type of",
    "start": "379520",
    "end": "383880"
  },
  {
    "text": "f F1 is some type of F and we can",
    "start": "383880",
    "end": "385919"
  },
  {
    "text": "combine them as long as we can say that",
    "start": "385919",
    "end": "388680"
  },
  {
    "text": "f is a mon and that's what that first",
    "start": "388680",
    "end": "390960"
  },
  {
    "text": "parameter does that first parameter is",
    "start": "390960",
    "end": "392400"
  },
  {
    "text": "what's known as a witness so it lets you",
    "start": "392400",
    "end": "394560"
  },
  {
    "text": "basically prove to the compiler that all",
    "start": "394560",
    "end": "397160"
  },
  {
    "text": "FS inside the scope of this function",
    "start": "397160",
    "end": "399560"
  },
  {
    "text": "have the behavior given to them by the",
    "start": "399560",
    "end": "401080"
  },
  {
    "text": "monoid interface so that's the the mock",
    "start": "401080",
    "end": "403800"
  },
  {
    "text": "for higher kinded",
    "start": "403800",
    "end": "405639"
  },
  {
    "text": "types if we wanted to do deep uh updates",
    "start": "405639",
    "end": "409680"
  },
  {
    "text": "normally in a in a language that is",
    "start": "409680",
    "end": "411840"
  },
  {
    "text": "immutable um you end up having these",
    "start": "411840",
    "end": "413599"
  },
  {
    "text": "really deep nested structures you can",
    "start": "413599",
    "end": "415120"
  },
  {
    "text": "see here we have some some uh class",
    "start": "415120",
    "end": "417759"
  },
  {
    "text": "relationship we have this really deep",
    "start": "417759",
    "end": "419759"
  },
  {
    "text": "update from an employee all the way down",
    "start": "419759",
    "end": "421400"
  },
  {
    "text": "to the street to update it um there's",
    "start": "421400",
    "end": "424000"
  },
  {
    "text": "this nice thing called lens um that you",
    "start": "424000",
    "end": "426280"
  },
  {
    "text": "might be aware of from from hasool but",
    "start": "426280",
    "end": "428080"
  },
  {
    "text": "it's a a way of writing these gets and",
    "start": "428080",
    "end": "431080"
  },
  {
    "text": "Setters um effectively",
    "start": "431080",
    "end": "433800"
  },
  {
    "text": "so uh the arol library ships an at",
    "start": "433800",
    "end": "436720"
  },
  {
    "text": "Optics annotation which Auto derives",
    "start": "436720",
    "end": "438599"
  },
  {
    "text": "lenses for you from data classes so you",
    "start": "438599",
    "end": "441039"
  },
  {
    "text": "have these data classes you have these",
    "start": "441039",
    "end": "442400"
  },
  {
    "text": "relationships you tag them with at",
    "start": "442400",
    "end": "444000"
  },
  {
    "text": "Optics when you write the data class and",
    "start": "444000",
    "end": "446520"
  },
  {
    "text": "you get for free these uh lenses that",
    "start": "446520",
    "end": "450240"
  },
  {
    "text": "allow you to do composed updates down",
    "start": "450240",
    "end": "453800"
  },
  {
    "text": "through whatever the depth of your chain",
    "start": "453800",
    "end": "455720"
  },
  {
    "text": "of data is um and modify it and return a",
    "start": "455720",
    "end": "459520"
  },
  {
    "text": "new instance of whatever your top level",
    "start": "459520",
    "end": "461560"
  },
  {
    "text": "thing was with everything copied",
    "start": "461560",
    "end": "463319"
  },
  {
    "text": "everything cloned nothing mutated in",
    "start": "463319",
    "end": "465120"
  },
  {
    "text": "place so this is really powerful if you",
    "start": "465120",
    "end": "466840"
  },
  {
    "text": "have these large structures and you want",
    "start": "466840",
    "end": "468479"
  },
  {
    "text": "to kind of run through your program with",
    "start": "468479",
    "end": "470360"
  },
  {
    "text": "them so we've seen how to do type",
    "start": "470360",
    "end": "472560"
  },
  {
    "text": "classes we've seen how to do lenses",
    "start": "472560",
    "end": "474360"
  },
  {
    "text": "we've seen some good techniques for for",
    "start": "474360",
    "end": "476120"
  },
  {
    "text": "dealing with data as itself how do we",
    "start": "476120",
    "end": "478759"
  },
  {
    "text": "deal with uh if we're working with a",
    "start": "478759",
    "end": "481319"
  },
  {
    "text": "user who actually wants to make requests",
    "start": "481319",
    "end": "482879"
  },
  {
    "text": "to our",
    "start": "482879",
    "end": "484199"
  },
  {
    "text": "system so here we have a perfectly",
    "start": "484199",
    "end": "487759"
  },
  {
    "text": "normal Java controller this is not what",
    "start": "487759",
    "end": "491800"
  },
  {
    "text": "I what I'm going to talk about a lot but",
    "start": "491800",
    "end": "493800"
  },
  {
    "text": "we have annotations all over the place",
    "start": "493800",
    "end": "495440"
  },
  {
    "text": "we have no real types that enforce the",
    "start": "495440",
    "end": "498639"
  },
  {
    "text": "different behaviors that we're seeing",
    "start": "498639",
    "end": "499960"
  },
  {
    "text": "here um we so we've got our our request",
    "start": "499960",
    "end": "503280"
  },
  {
    "text": "mapping that says get to this endpoint",
    "start": "503280",
    "end": "505319"
  },
  {
    "text": "and do this thing and it doesn't really",
    "start": "505319",
    "end": "506960"
  },
  {
    "text": "give us very much to reason about we",
    "start": "506960",
    "end": "508400"
  },
  {
    "text": "actually have to know exactly what The",
    "start": "508400",
    "end": "509919"
  },
  {
    "text": "annotation does to understand the code",
    "start": "509919",
    "end": "512080"
  },
  {
    "text": "that is generated to have any way of",
    "start": "512080",
    "end": "513880"
  },
  {
    "text": "really understanding what is this system",
    "start": "513880",
    "end": "515320"
  },
  {
    "text": "going to do at",
    "start": "515320",
    "end": "516560"
  },
  {
    "text": "runtime so by contrast without doing",
    "start": "516560",
    "end": "520880"
  },
  {
    "text": "anything other than what comes out of",
    "start": "520880",
    "end": "522440"
  },
  {
    "text": "the box in Spring the cotland version of",
    "start": "522440",
    "end": "525320"
  },
  {
    "text": "a router is much more first class uh",
    "start": "525320",
    "end": "528279"
  },
  {
    "text": "values as part of the language we have",
    "start": "528279",
    "end": "530760"
  },
  {
    "text": "uh an ordinary function to build the",
    "start": "530760",
    "end": "532760"
  },
  {
    "text": "router we have a router DSL which lets",
    "start": "532760",
    "end": "535640"
  },
  {
    "text": "you uh say what the routes that you're",
    "start": "535640",
    "end": "537560"
  },
  {
    "text": "going to be dealing with are we say that",
    "start": "537560",
    "end": "539640"
  },
  {
    "text": "we're going to post to this endpoint and",
    "start": "539640",
    "end": "541279"
  },
  {
    "text": "that we're going to use this Handler to",
    "start": "541279",
    "end": "542480"
  },
  {
    "text": "deal with it so we can reason about this",
    "start": "542480",
    "end": "544120"
  },
  {
    "text": "much more straightforwardly we can",
    "start": "544120",
    "end": "545200"
  },
  {
    "text": "actually understand well I can see here",
    "start": "545200",
    "end": "546920"
  },
  {
    "text": "are all the invocations if data comes in",
    "start": "546920",
    "end": "548920"
  },
  {
    "text": "from here here's where it will flow",
    "start": "548920",
    "end": "550279"
  },
  {
    "text": "through and I don't have to think about",
    "start": "550279",
    "end": "551839"
  },
  {
    "text": "what are the annotations that I'm using",
    "start": "551839",
    "end": "553320"
  },
  {
    "text": "to give me this Behavior the only",
    "start": "553320",
    "end": "555200"
  },
  {
    "text": "annotations we have left are for spring",
    "start": "555200",
    "end": "557320"
  },
  {
    "text": "doing mapping of uh or injecting",
    "start": "557320",
    "end": "559920"
  },
  {
    "text": "components so this is the dependency",
    "start": "559920",
    "end": "561640"
  },
  {
    "text": "injection that spring gives you which",
    "start": "561640",
    "end": "562959"
  },
  {
    "text": "we'll cover off a little bit",
    "start": "562959",
    "end": "564519"
  },
  {
    "text": "later so personally I personally I",
    "start": "564519",
    "end": "567760"
  },
  {
    "text": "prefer the second version I think that",
    "start": "567760",
    "end": "569360"
  },
  {
    "text": "it's nicer to be able to reason about",
    "start": "569360",
    "end": "570640"
  },
  {
    "text": "programs um the biggest thing for me is",
    "start": "570640",
    "end": "572399"
  },
  {
    "text": "the types are fairly weak in the Java",
    "start": "572399",
    "end": "574040"
  },
  {
    "text": "version the types are a bit stronger in",
    "start": "574040",
    "end": "575800"
  },
  {
    "text": "the spring version and they get stronger",
    "start": "575800",
    "end": "577160"
  },
  {
    "text": "depending on the libraries you use um",
    "start": "577160",
    "end": "579720"
  },
  {
    "text": "but the design overall of the cotland",
    "start": "579720",
    "end": "581519"
  },
  {
    "text": "version is a more approachable more",
    "start": "581519",
    "end": "584320"
  },
  {
    "text": "understandable design from my",
    "start": "584320",
    "end": "586360"
  },
  {
    "text": "perspective um so if we talk about a",
    "start": "586360",
    "end": "588959"
  },
  {
    "text": "Handler right so we saw before we have",
    "start": "588959",
    "end": "590480"
  },
  {
    "text": "this shopping cart Handler you give it a",
    "start": "590480",
    "end": "592399"
  },
  {
    "text": "server request and you do something with",
    "start": "592399",
    "end": "594079"
  },
  {
    "text": "it one of the major advantages of spring",
    "start": "594079",
    "end": "596320"
  },
  {
    "text": "five for functional programming in",
    "start": "596320",
    "end": "597680"
  },
  {
    "text": "cotland is they actually give you a a",
    "start": "597680",
    "end": "599640"
  },
  {
    "text": "quasi Mantic API for dealing with",
    "start": "599640",
    "end": "602480"
  },
  {
    "text": "requests they introduce a reactive",
    "start": "602480",
    "end": "604760"
  },
  {
    "text": "extension uh like Library called project",
    "start": "604760",
    "end": "607360"
  },
  {
    "text": "reactor which gives you these uh stream",
    "start": "607360",
    "end": "610640"
  },
  {
    "text": "interfaces one called Mono one called",
    "start": "610640",
    "end": "612839"
  },
  {
    "text": "flocks we'll deal with mono exclusively",
    "start": "612839",
    "end": "614880"
  },
  {
    "text": "in this talk mono is very similar to",
    "start": "614880",
    "end": "617640"
  },
  {
    "text": "JavaScript promises um it encodes a",
    "start": "617640",
    "end": "620959"
  },
  {
    "text": "value that is uh understood to be",
    "start": "620959",
    "end": "623839"
  },
  {
    "text": "asynchronous in some nature so it",
    "start": "623839",
    "end": "626200"
  },
  {
    "text": "basically encodes a computation that",
    "start": "626200",
    "end": "627640"
  },
  {
    "text": "will result in a value at some point",
    "start": "627640",
    "end": "629760"
  },
  {
    "text": "but without necessarily performing any",
    "start": "629760",
    "end": "631360"
  },
  {
    "text": "of the steps at the time that you",
    "start": "631360",
    "end": "632680"
  },
  {
    "text": "indicate them you deal with it the way",
    "start": "632680",
    "end": "634680"
  },
  {
    "text": "that you would deal with a funter or an",
    "start": "634680",
    "end": "636720"
  },
  {
    "text": "applicative or a monad you say I have",
    "start": "636720",
    "end": "639160"
  },
  {
    "text": "this thing that represents a computation",
    "start": "639160",
    "end": "641440"
  },
  {
    "text": "I want to then perform this action on",
    "start": "641440",
    "end": "643240"
  },
  {
    "text": "the result and then perform this action",
    "start": "643240",
    "end": "644600"
  },
  {
    "text": "on the result and then perform this",
    "start": "644600",
    "end": "645680"
  },
  {
    "text": "action on the result and then at some",
    "start": "645680",
    "end": "647320"
  },
  {
    "text": "point you interpret it at some point you",
    "start": "647320",
    "end": "648920"
  },
  {
    "text": "pass it to a subscriber or to anything",
    "start": "648920",
    "end": "650959"
  },
  {
    "text": "like that and you can hop threads you",
    "start": "650959",
    "end": "652880"
  },
  {
    "text": "can give it instructions on how to what",
    "start": "652880",
    "end": "654800"
  },
  {
    "text": "kind of elasticity to perform the",
    "start": "654800",
    "end": "656279"
  },
  {
    "text": "operations on it's a very powerful API",
    "start": "656279",
    "end": "659200"
  },
  {
    "text": "but there's one thing that really bugs",
    "start": "659200",
    "end": "660360"
  },
  {
    "text": "me about it and it's that it doesn't",
    "start": "660360",
    "end": "661399"
  },
  {
    "text": "encode anything about errors so you have",
    "start": "661399",
    "end": "664160"
  },
  {
    "text": "nothing giving you first class support",
    "start": "664160",
    "end": "665639"
  },
  {
    "text": "for dealing with errors there's a do on",
    "start": "665639",
    "end": "667360"
  },
  {
    "text": "error callback but that doesn't actually",
    "start": "667360",
    "end": "669120"
  },
  {
    "text": "tell you what the error type will be it",
    "start": "669120",
    "end": "670480"
  },
  {
    "text": "doesn't help you uh enforce that we're",
    "start": "670480",
    "end": "672800"
  },
  {
    "text": "going to handle these things and this is",
    "start": "672800",
    "end": "674399"
  },
  {
    "text": "what the standards that we handle are so",
    "start": "674399",
    "end": "676680"
  },
  {
    "text": "how can we improve that what can we do",
    "start": "676680",
    "end": "678000"
  },
  {
    "text": "to bring more types up into",
    "start": "678000",
    "end": "680120"
  },
  {
    "text": "that well again we're using arrows so we",
    "start": "680120",
    "end": "683279"
  },
  {
    "text": "have a lot of very nice powerful tools",
    "start": "683279",
    "end": "686600"
  },
  {
    "text": "and the one that we can use here is the",
    "start": "686600",
    "end": "687920"
  },
  {
    "text": "either Transformer",
    "start": "687920",
    "end": "689480"
  },
  {
    "text": "so because we can we're in a good",
    "start": "689480",
    "end": "692440"
  },
  {
    "text": "position to say any computation that is",
    "start": "692440",
    "end": "694639"
  },
  {
    "text": "asynchronous but also returns something",
    "start": "694639",
    "end": "697440"
  },
  {
    "text": "that might throw or might not we're in a",
    "start": "697440",
    "end": "699800"
  },
  {
    "text": "good position to say well that's going",
    "start": "699800",
    "end": "701000"
  },
  {
    "text": "to return a mono of an either where the",
    "start": "701000",
    "end": "704760"
  },
  {
    "text": "left branch of the either is a throwable",
    "start": "704760",
    "end": "706519"
  },
  {
    "text": "and the right branch of the either is",
    "start": "706519",
    "end": "708079"
  },
  {
    "text": "the result that we're looking for but",
    "start": "708079",
    "end": "711040"
  },
  {
    "text": "that also means that anytime we want to",
    "start": "711040",
    "end": "712680"
  },
  {
    "text": "interpret that computation we have to",
    "start": "712680",
    "end": "714839"
  },
  {
    "text": "take it out of the mono take it out of",
    "start": "714839",
    "end": "716279"
  },
  {
    "text": "the either do something with the value",
    "start": "716279",
    "end": "717760"
  },
  {
    "text": "put it back in the either put it back in",
    "start": "717760",
    "end": "718959"
  },
  {
    "text": "and the mono Contin the next function",
    "start": "718959",
    "end": "720839"
  },
  {
    "text": "and that gets kind of frustrating over",
    "start": "720839",
    "end": "722639"
  },
  {
    "text": "time so we have this either Transformer",
    "start": "722639",
    "end": "725360"
  },
  {
    "text": "and that will let us basically say here",
    "start": "725360",
    "end": "727680"
  },
  {
    "text": "is a way to unwrap this computation to",
    "start": "727680",
    "end": "730160"
  },
  {
    "text": "get the value out of it and to give you",
    "start": "730160",
    "end": "732399"
  },
  {
    "text": "the way to transform it and then to put",
    "start": "732399",
    "end": "733959"
  },
  {
    "text": "it back into the computation that you're",
    "start": "733959",
    "end": "735600"
  },
  {
    "text": "expecting so there's a lot of syntax",
    "start": "735600",
    "end": "739279"
  },
  {
    "text": "that you have to write in cotland",
    "start": "739279",
    "end": "740680"
  },
  {
    "text": "because it's obviously not designed out",
    "start": "740680",
    "end": "742800"
  },
  {
    "text": "of the box to give you this the way that",
    "start": "742800",
    "end": "744160"
  },
  {
    "text": "hasal is but effectively we can say the",
    "start": "744160",
    "end": "748240"
  },
  {
    "text": "thing that we're working with is an",
    "start": "748240",
    "end": "749560"
  },
  {
    "text": "either that has a mono that has an",
    "start": "749560",
    "end": "752680"
  },
  {
    "text": "asynchronous nature to it that deals",
    "start": "752680",
    "end": "754760"
  },
  {
    "text": "with a throwable or deals with a",
    "start": "754760",
    "end": "755920"
  },
  {
    "text": "shopping cart and it gives us a an",
    "start": "755920",
    "end": "758279"
  },
  {
    "text": "environment in which we can execute",
    "start": "758279",
    "end": "759760"
  },
  {
    "text": "things that are safe to execute in that",
    "start": "759760",
    "end": "761199"
  },
  {
    "text": "environment so The Binding function",
    "start": "761199",
    "end": "764120"
  },
  {
    "text": "there where we execute binding gives us",
    "start": "764120",
    "end": "766440"
  },
  {
    "text": "something that's kind of like do",
    "start": "766440",
    "end": "767800"
  },
  {
    "text": "notation so if we execute anything that",
    "start": "767800",
    "end": "770760"
  },
  {
    "text": "returns in a mono we can call bind at",
    "start": "770760",
    "end": "773720"
  },
  {
    "text": "the end of it and it will unwrap it and",
    "start": "773720",
    "end": "776040"
  },
  {
    "text": "assign it to the variable in the same",
    "start": "776040",
    "end": "778120"
  },
  {
    "text": "way that the left arrow in hasal do",
    "start": "778120",
    "end": "779880"
  },
  {
    "text": "notation evaluates and assigns",
    "start": "779880",
    "end": "782040"
  },
  {
    "text": "effectively um it's basically instead of",
    "start": "782040",
    "end": "784160"
  },
  {
    "text": "us having to do flatmap do flat map do",
    "start": "784160",
    "end": "786120"
  },
  {
    "text": "flat map all the way through um",
    "start": "786120",
    "end": "789880"
  },
  {
    "text": "the nice thing here is that anything",
    "start": "789880",
    "end": "792320"
  },
  {
    "text": "that returns a left anything that fails",
    "start": "792320",
    "end": "794920"
  },
  {
    "text": "at any point in the in the computation",
    "start": "794920",
    "end": "796480"
  },
  {
    "text": "we have will short circuit any of the",
    "start": "796480",
    "end": "798240"
  },
  {
    "text": "following lines so we don't have to",
    "start": "798240",
    "end": "799639"
  },
  {
    "text": "handle errors in place we don't need try",
    "start": "799639",
    "end": "801440"
  },
  {
    "text": "catch we don't have to think about what",
    "start": "801440",
    "end": "802920"
  },
  {
    "text": "if something how anything like that but",
    "start": "802920",
    "end": "805839"
  },
  {
    "text": "we know that we have to handle them so",
    "start": "805839",
    "end": "808600"
  },
  {
    "text": "as developers we know that we're being",
    "start": "808600",
    "end": "810040"
  },
  {
    "text": "safe and saying here's how we're going",
    "start": "810040",
    "end": "811480"
  },
  {
    "text": "to handle the error here's what we're",
    "start": "811480",
    "end": "812639"
  },
  {
    "text": "going to do with it and then we can",
    "start": "812639",
    "end": "814160"
  },
  {
    "text": "write a function which we have their",
    "start": "814160",
    "end": "816279"
  },
  {
    "text": "handle and we say that handle is an",
    "start": "816279",
    "end": "818120"
  },
  {
    "text": "extension to an either",
    "start": "818120",
    "end": "820639"
  },
  {
    "text": "Transformer and for any either",
    "start": "820639",
    "end": "823440"
  },
  {
    "text": "Transformer of this type we're going to",
    "start": "823440",
    "end": "824959"
  },
  {
    "text": "extend it with this function to be",
    "start": "824959",
    "end": "826519"
  },
  {
    "text": "available and if you call handle you",
    "start": "826519",
    "end": "828279"
  },
  {
    "text": "just recover from the error and give",
    "start": "828279",
    "end": "829639"
  },
  {
    "text": "back a server response that says",
    "start": "829639",
    "end": "830920"
  },
  {
    "text": "something went wrong so you can actually",
    "start": "830920",
    "end": "832480"
  },
  {
    "text": "design your system in such a way that",
    "start": "832480",
    "end": "834639"
  },
  {
    "text": "you can deal with these errors um with",
    "start": "834639",
    "end": "837000"
  },
  {
    "text": "an abstraction and not have to worry",
    "start": "837000",
    "end": "838759"
  },
  {
    "text": "worry about did I try catch that one did",
    "start": "838759",
    "end": "840360"
  },
  {
    "text": "I forget to do it the type system has",
    "start": "840360",
    "end": "842079"
  },
  {
    "text": "your back it helps you understand these",
    "start": "842079",
    "end": "843959"
  },
  {
    "text": "are the places where you might have",
    "start": "843959",
    "end": "845160"
  },
  {
    "text": "these problems so now that we have some",
    "start": "845160",
    "end": "847759"
  },
  {
    "text": "data you know we're we're starting to",
    "start": "847759",
    "end": "850399"
  },
  {
    "text": "think about well how do we actually",
    "start": "850399",
    "end": "851639"
  },
  {
    "text": "process it what do we do with it so",
    "start": "851639",
    "end": "853079"
  },
  {
    "text": "we've seen how we can mutate or how we",
    "start": "853079",
    "end": "856160"
  },
  {
    "text": "can deal with changing data we've seen",
    "start": "856160",
    "end": "857680"
  },
  {
    "text": "how we can construct type classes and",
    "start": "857680",
    "end": "859639"
  },
  {
    "text": "we've seen how we can improve our",
    "start": "859639",
    "end": "860880"
  },
  {
    "text": "controllers to give us a semblance of",
    "start": "860880",
    "end": "862320"
  },
  {
    "text": "safety so now we're going to deal with",
    "start": "862320",
    "end": "863839"
  },
  {
    "text": "the service layer actually changing",
    "start": "863839",
    "end": "866120"
  },
  {
    "text": "things so again the the Standard Spring",
    "start": "866120",
    "end": "869399"
  },
  {
    "text": "approach we want to use dependency",
    "start": "869399",
    "end": "871360"
  },
  {
    "text": "injection to give Behavior to all of our",
    "start": "871360",
    "end": "873000"
  },
  {
    "text": "different things we don't want to have",
    "start": "873000",
    "end": "874839"
  },
  {
    "text": "to do the environment management",
    "start": "874839",
    "end": "877320"
  },
  {
    "text": "ourselves we want to just be able to",
    "start": "877320",
    "end": "879079"
  },
  {
    "text": "send things through and not worry about",
    "start": "879079",
    "end": "880560"
  },
  {
    "text": "how they got there um and we can see",
    "start": "880560",
    "end": "884040"
  },
  {
    "text": "like this is okay but there are some",
    "start": "884040",
    "end": "885720"
  },
  {
    "text": "really big drawbacks to this approach",
    "start": "885720",
    "end": "887800"
  },
  {
    "text": "the first is it's very verose and it",
    "start": "887800",
    "end": "889560"
  },
  {
    "text": "leads to a lot of boilerplate work the",
    "start": "889560",
    "end": "891959"
  },
  {
    "text": "second is again you have all these",
    "start": "891959",
    "end": "893839"
  },
  {
    "text": "annotations over the place which means",
    "start": "893839",
    "end": "895199"
  },
  {
    "text": "you can't really understand where things",
    "start": "895199",
    "end": "896759"
  },
  {
    "text": "are coming from there's no easy way to",
    "start": "896759",
    "end": "898440"
  },
  {
    "text": "click click on the service annotation",
    "start": "898440",
    "end": "900759"
  },
  {
    "text": "and see where this thing is defined um",
    "start": "900759",
    "end": "903839"
  },
  {
    "text": "threading environments is really",
    "start": "903839",
    "end": "905800"
  },
  {
    "text": "difficult um and you end up with all",
    "start": "905800",
    "end": "907720"
  },
  {
    "text": "these little trade-offs that make it",
    "start": "907720",
    "end": "909360"
  },
  {
    "text": "hard to understand what's going on the",
    "start": "909360",
    "end": "911480"
  },
  {
    "text": "biggest one though is testing so spring",
    "start": "911480",
    "end": "914639"
  },
  {
    "text": "di to its credit basically uh insists",
    "start": "914639",
    "end": "917920"
  },
  {
    "text": "that coherence is held within the system",
    "start": "917920",
    "end": "920440"
  },
  {
    "text": "so you can only have one instance of a",
    "start": "920440",
    "end": "922199"
  },
  {
    "text": "thing that you want to inject into other",
    "start": "922199",
    "end": "923759"
  },
  {
    "text": "areas you can only have one bean they",
    "start": "923759",
    "end": "926079"
  },
  {
    "text": "call it of a certain type in the system",
    "start": "926079",
    "end": "927959"
  },
  {
    "text": "which is fine except you think about it",
    "start": "927959",
    "end": "930040"
  },
  {
    "text": "and at uh compile time you want a",
    "start": "930040",
    "end": "932880"
  },
  {
    "text": "different thing than you want at test",
    "start": "932880",
    "end": "934079"
  },
  {
    "text": "time and because we don't have higher",
    "start": "934079",
    "end": "935440"
  },
  {
    "text": "kinded types you only have a effectively",
    "start": "935440",
    "end": "938240"
  },
  {
    "text": "a monomorphic type for a computation you",
    "start": "938240",
    "end": "940800"
  },
  {
    "text": "want to perform so our shopping cart",
    "start": "940800",
    "end": "942120"
  },
  {
    "text": "Handler can only have one implementation",
    "start": "942120",
    "end": "944720"
  },
  {
    "text": "we can't say you know shopping cart",
    "start": "944720",
    "end": "946519"
  },
  {
    "text": "Handler of ID shopping cart Handler of",
    "start": "946519",
    "end": "948199"
  },
  {
    "text": "list and give us different ways to",
    "start": "948199",
    "end": "949720"
  },
  {
    "text": "inject different behaviors so the Way",
    "start": "949720",
    "end": "951839"
  },
  {
    "text": "Spring gets around that is another",
    "start": "951839",
    "end": "953360"
  },
  {
    "text": "annotation we have the profiles",
    "start": "953360",
    "end": "954959"
  },
  {
    "text": "annotation and we say we're running this",
    "start": "954959",
    "end": "956120"
  },
  {
    "text": "in a test environment use this B we're",
    "start": "956120",
    "end": "957839"
  },
  {
    "text": "running this in a production environment",
    "start": "957839",
    "end": "959120"
  },
  {
    "text": "use this being but again we end up in",
    "start": "959120",
    "end": "961160"
  },
  {
    "text": "this world of where am I getting this",
    "start": "961160",
    "end": "962720"
  },
  {
    "text": "thing from how do I know what it is how",
    "start": "962720",
    "end": "964319"
  },
  {
    "text": "do I know what Behavior it has and the",
    "start": "964319",
    "end": "967040"
  },
  {
    "text": "end result for a lot of projects is they",
    "start": "967040",
    "end": "969000"
  },
  {
    "text": "just mock so we have runtime mutation of",
    "start": "969000",
    "end": "971480"
  },
  {
    "text": "behavior and now that's a whole other",
    "start": "971480",
    "end": "973319"
  },
  {
    "text": "world that's another big risk to your",
    "start": "973319",
    "end": "974800"
  },
  {
    "text": "project of did I mock this accurately",
    "start": "974800",
    "end": "976440"
  },
  {
    "text": "does it obey the interface does it you",
    "start": "976440",
    "end": "978000"
  },
  {
    "text": "know so how can we avoid that and the",
    "start": "978000",
    "end": "981240"
  },
  {
    "text": "key word from my perspective is",
    "start": "981240",
    "end": "982440"
  },
  {
    "text": "environment we're talking about how do",
    "start": "982440",
    "end": "984160"
  },
  {
    "text": "we thread an environment between slides",
    "start": "984160",
    "end": "985959"
  },
  {
    "text": "we're saying between um between uh",
    "start": "985959",
    "end": "988560"
  },
  {
    "text": "callers sorry thinking about the speech",
    "start": "988560",
    "end": "991240"
  },
  {
    "text": "um how can we do that without this",
    "start": "991240",
    "end": "993319"
  },
  {
    "text": "dependency injection Machinery how can",
    "start": "993319",
    "end": "994839"
  },
  {
    "text": "we do that without annotations and",
    "start": "994839",
    "end": "996160"
  },
  {
    "text": "without runtime failures and all of that",
    "start": "996160",
    "end": "997959"
  },
  {
    "text": "kind of stuff",
    "start": "997959",
    "end": "1000560"
  },
  {
    "text": "so the way that we can get to that",
    "start": "1000560",
    "end": "1002880"
  },
  {
    "text": "result is let's first think about the",
    "start": "1002880",
    "end": "1004360"
  },
  {
    "text": "environment we",
    "start": "1004360",
    "end": "1005759"
  },
  {
    "text": "want so we know that there is some",
    "start": "1005759",
    "end": "1008759"
  },
  {
    "text": "object that will give us the answer to",
    "start": "1008759",
    "end": "1011519"
  },
  {
    "text": "all of these things we're going to call",
    "start": "1011519",
    "end": "1012839"
  },
  {
    "text": "that the environment what Behavior would",
    "start": "1012839",
    "end": "1014839"
  },
  {
    "text": "we like the environment to have well we",
    "start": "1014839",
    "end": "1016639"
  },
  {
    "text": "know that it needs to have a service",
    "start": "1016639",
    "end": "1018240"
  },
  {
    "text": "that lets us call out to the warehouse",
    "start": "1018240",
    "end": "1020000"
  },
  {
    "text": "to say are there any stock for these",
    "start": "1020000",
    "end": "1021600"
  },
  {
    "text": "items and we know that there's got to be",
    "start": "1021600",
    "end": "1023399"
  },
  {
    "text": "something that lets us hit the database",
    "start": "1023399",
    "end": "1024798"
  },
  {
    "text": "to say what are the discounts available",
    "start": "1024799",
    "end": "1026240"
  },
  {
    "text": "for this thing so we can actually build",
    "start": "1026240",
    "end": "1028720"
  },
  {
    "text": "type classes that will take something",
    "start": "1028720",
    "end": "1032918"
  },
  {
    "text": "and say do you have the behavior of can",
    "start": "1032919",
    "end": "1035520"
  },
  {
    "text": "I get a warehouse do you have the",
    "start": "1035520",
    "end": "1037360"
  },
  {
    "text": "behavior of can I get a a warehouse can",
    "start": "1037360",
    "end": "1039959"
  },
  {
    "text": "I can I get from the database can I do",
    "start": "1039959",
    "end": "1041959"
  },
  {
    "text": "these things right so those are our has",
    "start": "1041959",
    "end": "1044160"
  },
  {
    "text": "repository and has Warehouse service",
    "start": "1044160",
    "end": "1046438"
  },
  {
    "text": "type classes at the bottom there and we",
    "start": "1046439",
    "end": "1048760"
  },
  {
    "text": "can actually by by enforcing that",
    "start": "1048760",
    "end": "1050960"
  },
  {
    "text": "requirement in a function prove to the",
    "start": "1050960",
    "end": "1053039"
  },
  {
    "text": "compiler that anything we pass in will",
    "start": "1053039",
    "end": "1055919"
  },
  {
    "text": "have these behaviors available and we",
    "start": "1055919",
    "end": "1057919"
  },
  {
    "text": "get environment uh assumptions for free",
    "start": "1057919",
    "end": "1062000"
  },
  {
    "text": "um now we can Define our EnV type so we",
    "start": "1062000",
    "end": "1064840"
  },
  {
    "text": "say that we have a higher kind which",
    "start": "1064840",
    "end": "1066600"
  },
  {
    "text": "gives us again all the machinery for the",
    "start": "1066600",
    "end": "1068200"
  },
  {
    "text": "type classes um we can say we have an",
    "start": "1068200",
    "end": "1070960"
  },
  {
    "text": "extension so we say that our environment",
    "start": "1070960",
    "end": "1072799"
  },
  {
    "text": "definitely a Baye that has repositories",
    "start": "1072799",
    "end": "1074559"
  },
  {
    "text": "interface definitely a bay that has",
    "start": "1074559",
    "end": "1076440"
  },
  {
    "text": "Warehouse interface and now when we use",
    "start": "1076440",
    "end": "1078400"
  },
  {
    "text": "use it we can actually apply the",
    "start": "1078400",
    "end": "1079640"
  },
  {
    "text": "environment and prove to the compiler",
    "start": "1079640",
    "end": "1082039"
  },
  {
    "text": "that we have this um but even that's not",
    "start": "1082039",
    "end": "1084360"
  },
  {
    "text": "quite enough because we're still talking",
    "start": "1084360",
    "end": "1085640"
  },
  {
    "text": "about passing the environment explicitly",
    "start": "1085640",
    "end": "1087960"
  },
  {
    "text": "to every function and we're threading it",
    "start": "1087960",
    "end": "1090080"
  },
  {
    "text": "manually now that works fine but it's",
    "start": "1090080",
    "end": "1092679"
  },
  {
    "text": "very onerous it's a lot of work to have",
    "start": "1092679",
    "end": "1094360"
  },
  {
    "text": "to give a developer to remember well I",
    "start": "1094360",
    "end": "1095679"
  },
  {
    "text": "take the environment here and I pass it",
    "start": "1095679",
    "end": "1097080"
  },
  {
    "text": "there and I pass it all the way down my",
    "start": "1097080",
    "end": "1099280"
  },
  {
    "text": "stack so this is where the learn hle",
    "start": "1099280",
    "end": "1103039"
  },
  {
    "text": "part of the part of the talk becomes",
    "start": "1103039",
    "end": "1104480"
  },
  {
    "text": "really uh important there's this nice",
    "start": "1104480",
    "end": "1106880"
  },
  {
    "text": "structure called a reader Transformer",
    "start": "1106880",
    "end": "1109240"
  },
  {
    "text": "um which I think in in cotland is called",
    "start": "1109240",
    "end": "1111600"
  },
  {
    "text": "a kley type for the one of the",
    "start": "1111600",
    "end": "1114799"
  },
  {
    "text": "mathematicians who were involved in in",
    "start": "1114799",
    "end": "1117120"
  },
  {
    "text": "the type Theory or in category theory",
    "start": "1117120",
    "end": "1118799"
  },
  {
    "text": "for it um but so the reader Transformer",
    "start": "1118799",
    "end": "1121760"
  },
  {
    "text": "lets us basically say in a Mantic uh",
    "start": "1121760",
    "end": "1124760"
  },
  {
    "text": "environment in a man in a Mantic",
    "start": "1124760",
    "end": "1126240"
  },
  {
    "text": "execution context this is a way to get",
    "start": "1126240",
    "end": "1128280"
  },
  {
    "text": "an environment and basically thread it",
    "start": "1128280",
    "end": "1130400"
  },
  {
    "text": "through your",
    "start": "1130400",
    "end": "1131559"
  },
  {
    "text": "computation so this is kind of what that",
    "start": "1131559",
    "end": "1134600"
  },
  {
    "text": "looks like now we don't pass an",
    "start": "1134600",
    "end": "1136520"
  },
  {
    "text": "environment explicitly we have our",
    "start": "1136520",
    "end": "1138559"
  },
  {
    "text": "calculate call it's a function by itself",
    "start": "1138559",
    "end": "1140360"
  },
  {
    "text": "it doesn't need to be a class because",
    "start": "1140360",
    "end": "1141640"
  },
  {
    "text": "we're not doing spring dependency",
    "start": "1141640",
    "end": "1143280"
  },
  {
    "text": "injection we can just Define a function",
    "start": "1143280",
    "end": "1144960"
  },
  {
    "text": "as a first class thing and we say here",
    "start": "1144960",
    "end": "1147280"
  },
  {
    "text": "are the behaviors of our function you",
    "start": "1147280",
    "end": "1149600"
  },
  {
    "text": "know we have the the whatever the type",
    "start": "1149600",
    "end": "1152159"
  },
  {
    "text": "that we're going to return the wrapper",
    "start": "1152159",
    "end": "1154480"
  },
  {
    "text": "must have monad throw so that we can",
    "start": "1154480",
    "end": "1156720"
  },
  {
    "text": "recover from errors we say that the",
    "start": "1156720",
    "end": "1159440"
  },
  {
    "text": "environment must have has where has",
    "start": "1159440",
    "end": "1161760"
  },
  {
    "text": "repositories must have has warehouses",
    "start": "1161760",
    "end": "1164360"
  },
  {
    "text": "and we pass in a cut and we build up",
    "start": "1164360",
    "end": "1166720"
  },
  {
    "text": "this computation without ever talking",
    "start": "1166720",
    "end": "1168559"
  },
  {
    "text": "about where the actual environment is",
    "start": "1168559",
    "end": "1169880"
  },
  {
    "text": "coming from cuz the computation doesn't",
    "start": "1169880",
    "end": "1171559"
  },
  {
    "text": "care as long as the computation knows",
    "start": "1171559",
    "end": "1172919"
  },
  {
    "text": "I'll get an environment at some point",
    "start": "1172919",
    "end": "1174640"
  },
  {
    "text": "why should it have to know at every step",
    "start": "1174640",
    "end": "1176120"
  },
  {
    "text": "of the way while I'm going to have to",
    "start": "1176120",
    "end": "1177720"
  },
  {
    "text": "deal with this environment and we can",
    "start": "1177720",
    "end": "1180400"
  },
  {
    "text": "compose these things one of the nice",
    "start": "1180400",
    "end": "1181720"
  },
  {
    "text": "things with kley is they compose really",
    "start": "1181720",
    "end": "1183480"
  },
  {
    "text": "nicely so we have a function that",
    "start": "1183480",
    "end": "1186120"
  },
  {
    "text": "returns a kley and we just take the",
    "start": "1186120",
    "end": "1188159"
  },
  {
    "text": "result of that and pipe it into the next",
    "start": "1188159",
    "end": "1189919"
  },
  {
    "text": "function that returns a kley and we can",
    "start": "1189919",
    "end": "1192840"
  },
  {
    "text": "build up these nice comp like nice",
    "start": "1192840",
    "end": "1195000"
  },
  {
    "text": "computations that deal with us dealing",
    "start": "1195000",
    "end": "1196760"
  },
  {
    "text": "with this data and not worry about are",
    "start": "1196760",
    "end": "1199159"
  },
  {
    "text": "we in an asynchronous or a synchronous",
    "start": "1199159",
    "end": "1200880"
  },
  {
    "text": "context not worry about are we in mono",
    "start": "1200880",
    "end": "1203080"
  },
  {
    "text": "are we in ID are we in list notice how",
    "start": "1203080",
    "end": "1205080"
  },
  {
    "text": "that's not anywhere here all we've said",
    "start": "1205080",
    "end": "1207320"
  },
  {
    "text": "is the return type will have to",
    "start": "1207320",
    "end": "1209760"
  },
  {
    "text": "implement monad throw the environment",
    "start": "1209760",
    "end": "1211960"
  },
  {
    "text": "will have to implement repositories and",
    "start": "1211960",
    "end": "1213320"
  },
  {
    "text": "warehouses and otherwise write what you",
    "start": "1213320",
    "end": "1216080"
  },
  {
    "text": "like so this is what one of those",
    "start": "1216080",
    "end": "1218039"
  },
  {
    "text": "functions look like so we have our we",
    "start": "1218039",
    "end": "1219720"
  },
  {
    "text": "have our service called calculate",
    "start": "1219720",
    "end": "1221520"
  },
  {
    "text": "calculate calls calculate discount",
    "start": "1221520",
    "end": "1223720"
  },
  {
    "text": "calculate discount also doesn't take an",
    "start": "1223720",
    "end": "1225679"
  },
  {
    "text": "environment so when calculate calls",
    "start": "1225679",
    "end": "1227559"
  },
  {
    "text": "calculate discount it doesn't have to",
    "start": "1227559",
    "end": "1229360"
  },
  {
    "text": "unwrap kley take the environment out",
    "start": "1229360",
    "end": "1231360"
  },
  {
    "text": "pass it in explicitly to a function we",
    "start": "1231360",
    "end": "1233679"
  },
  {
    "text": "actually just say this computation",
    "start": "1233679",
    "end": "1236760"
  },
  {
    "text": "returns a kley and because it does that",
    "start": "1236760",
    "end": "1240360"
  },
  {
    "text": "we know that when an environment is",
    "start": "1240360",
    "end": "1242120"
  },
  {
    "text": "passed in here's how it will be",
    "start": "1242120",
    "end": "1243440"
  },
  {
    "text": "interpreted so we're defining",
    "start": "1243440",
    "end": "1244880"
  },
  {
    "text": "interpreters and we basically say that",
    "start": "1244880",
    "end": "1247720"
  },
  {
    "text": "we're going to take something that",
    "start": "1247720",
    "end": "1249000"
  },
  {
    "text": "proves that the environment given to us",
    "start": "1249000",
    "end": "1251200"
  },
  {
    "text": "by the kley has this has repositories",
    "start": "1251200",
    "end": "1253799"
  },
  {
    "text": "Behavior we're going to take something",
    "start": "1253799",
    "end": "1255720"
  },
  {
    "text": "that uh has a cart we're going to take a",
    "start": "1255720",
    "end": "1257640"
  },
  {
    "text": "cart in and here's the computation that",
    "start": "1257640",
    "end": "1259440"
  },
  {
    "text": "we'll perform but I'm not going to",
    "start": "1259440",
    "end": "1261559"
  },
  {
    "text": "perform it until you give me a an",
    "start": "1261559",
    "end": "1263559"
  },
  {
    "text": "environment at some point and we can",
    "start": "1263559",
    "end": "1265520"
  },
  {
    "text": "update this stuff we can run with it we",
    "start": "1265520",
    "end": "1267039"
  },
  {
    "text": "can we can have many of these things",
    "start": "1267039",
    "end": "1269000"
  },
  {
    "text": "without ever actually performing the",
    "start": "1269000",
    "end": "1270279"
  },
  {
    "text": "computation until we get to the point",
    "start": "1270279",
    "end": "1271960"
  },
  {
    "text": "that the environment is important when",
    "start": "1271960",
    "end": "1273880"
  },
  {
    "text": "we pass the environment in all of these",
    "start": "1273880",
    "end": "1275919"
  },
  {
    "text": "gener uh generic values will be bound to",
    "start": "1275919",
    "end": "1278080"
  },
  {
    "text": "the types given to us by the environment",
    "start": "1278080",
    "end": "1280520"
  },
  {
    "text": "so we can actually build up these",
    "start": "1280520",
    "end": "1281640"
  },
  {
    "text": "computations in abstraction of what the",
    "start": "1281640",
    "end": "1285080"
  },
  {
    "text": "uh environment is at the time that we",
    "start": "1285080",
    "end": "1286520"
  },
  {
    "text": "run it and I think that's a really nice",
    "start": "1286520",
    "end": "1287799"
  },
  {
    "text": "idea",
    "start": "1287799",
    "end": "1288840"
  },
  {
    "text": "um for testing specifically and so we'll",
    "start": "1288840",
    "end": "1291760"
  },
  {
    "text": "talk about that with how we would start",
    "start": "1291760",
    "end": "1293919"
  },
  {
    "text": "testing this kind of process so we saw",
    "start": "1293919",
    "end": "1298080"
  },
  {
    "text": "before we saw before that we have this",
    "start": "1298080",
    "end": "1300720"
  },
  {
    "text": "calculate method calculate which comes",
    "start": "1300720",
    "end": "1303640"
  },
  {
    "text": "needs a monad throw needs has",
    "start": "1303640",
    "end": "1305320"
  },
  {
    "text": "repositories needs has Warehouse",
    "start": "1305320",
    "end": "1306799"
  },
  {
    "text": "services and returns a kley and then for",
    "start": "1306799",
    "end": "1310279"
  },
  {
    "text": "the calculate discount we use the kley",
    "start": "1310279",
    "end": "1313120"
  },
  {
    "text": "uh function essentially or Constructor",
    "start": "1313120",
    "end": "1315880"
  },
  {
    "text": "to say here is the call back where envis",
    "start": "1315880",
    "end": "1318360"
  },
  {
    "text": "of type kind fa and I give you you don't",
    "start": "1318360",
    "end": "1320600"
  },
  {
    "text": "need more information than that and you",
    "start": "1320600",
    "end": "1322559"
  },
  {
    "text": "can deal with it however you want to",
    "start": "1322559",
    "end": "1323799"
  },
  {
    "text": "deal with it um so how do we construct",
    "start": "1323799",
    "end": "1326760"
  },
  {
    "text": "that environment such that we can",
    "start": "1326760",
    "end": "1328279"
  },
  {
    "text": "actually pass it into this",
    "start": "1328279",
    "end": "1329880"
  },
  {
    "text": "function and that's the nice thing",
    "start": "1329880",
    "end": "1331600"
  },
  {
    "text": "notice how we don't have annotation",
    "start": "1331600",
    "end": "1333080"
  },
  {
    "text": "saying I'm in a test profile now so use",
    "start": "1333080",
    "end": "1335559"
  },
  {
    "text": "this particular environment we don't",
    "start": "1335559",
    "end": "1337600"
  },
  {
    "text": "have uh mocking so we're not saying use",
    "start": "1337600",
    "end": "1339799"
  },
  {
    "text": "the real production database code but if",
    "start": "1339799",
    "end": "1341880"
  },
  {
    "text": "it asks for a find all give it back this",
    "start": "1341880",
    "end": "1344000"
  },
  {
    "text": "list we're we're actually just saying",
    "start": "1344000",
    "end": "1347440"
  },
  {
    "text": "here is the environment that we want to",
    "start": "1347440",
    "end": "1349039"
  },
  {
    "text": "pass into the computation the",
    "start": "1349039",
    "end": "1350440"
  },
  {
    "text": "computation is the real production",
    "start": "1350440",
    "end": "1352200"
  },
  {
    "text": "computation but the computation doesn't",
    "start": "1352200",
    "end": "1354240"
  },
  {
    "text": "really care about the environment so",
    "start": "1354240",
    "end": "1355480"
  },
  {
    "text": "here's the environment that I want you",
    "start": "1355480",
    "end": "1356520"
  },
  {
    "text": "to execute in and here we've said",
    "start": "1356520",
    "end": "1359039"
  },
  {
    "text": "repositories are in mon uh external",
    "start": "1359039",
    "end": "1361480"
  },
  {
    "text": "services are in mon that's the",
    "start": "1361480",
    "end": "1363159"
  },
  {
    "text": "implementation we've chosen it doesn't",
    "start": "1363159",
    "end": "1364559"
  },
  {
    "text": "matter we could have used ID and just",
    "start": "1364559",
    "end": "1366679"
  },
  {
    "text": "had one value returned we could have",
    "start": "1366679",
    "end": "1368200"
  },
  {
    "text": "used list anything that has a monad",
    "start": "1368200",
    "end": "1370440"
  },
  {
    "text": "throw would have fit fine into the",
    "start": "1370440",
    "end": "1372480"
  },
  {
    "text": "environment that we're building um and",
    "start": "1372480",
    "end": "1374320"
  },
  {
    "text": "it means that instead of worrying about",
    "start": "1374320",
    "end": "1375480"
  },
  {
    "text": "mocking we actually just construct an",
    "start": "1375480",
    "end": "1377120"
  },
  {
    "text": "environment that is useful ful for the",
    "start": "1377120",
    "end": "1378400"
  },
  {
    "text": "test that we're writing and then we",
    "start": "1378400",
    "end": "1380400"
  },
  {
    "text": "write our our spec and we say that it",
    "start": "1380400",
    "end": "1381960"
  },
  {
    "text": "runs the service we construct an",
    "start": "1381960",
    "end": "1383440"
  },
  {
    "text": "environment because EnV is just an",
    "start": "1383440",
    "end": "1385480"
  },
  {
    "text": "ordinary class doesn't have any special",
    "start": "1385480",
    "end": "1387400"
  },
  {
    "text": "behavior it just takes these things as",
    "start": "1387400",
    "end": "1389320"
  },
  {
    "text": "values um and we say here is the input",
    "start": "1389320",
    "end": "1392120"
  },
  {
    "text": "and we construct a shopping cart and",
    "start": "1392120",
    "end": "1393440"
  },
  {
    "text": "here's the output and we construct a",
    "start": "1393440",
    "end": "1395200"
  },
  {
    "text": "shopping cart that we want to be",
    "start": "1395200",
    "end": "1396520"
  },
  {
    "text": "transformed into and then we calculate",
    "start": "1396520",
    "end": "1399320"
  },
  {
    "text": "we call calculate with run en and we can",
    "start": "1399320",
    "end": "1402840"
  },
  {
    "text": "see that's the only that's the first",
    "start": "1402840",
    "end": "1404440"
  },
  {
    "text": "time and the only time in that entire",
    "start": "1404440",
    "end": "1406000"
  },
  {
    "text": "structure where we actually pass the",
    "start": "1406000",
    "end": "1407600"
  },
  {
    "text": "Environ into that calculation so this is",
    "start": "1407600",
    "end": "1410400"
  },
  {
    "text": "really powerful it's really nice we can",
    "start": "1410400",
    "end": "1412159"
  },
  {
    "text": "then have tests that are specific about",
    "start": "1412159",
    "end": "1413679"
  },
  {
    "text": "asynchronous Behavior tests that are",
    "start": "1413679",
    "end": "1415440"
  },
  {
    "text": "specific about non- asynchronous",
    "start": "1415440",
    "end": "1416679"
  },
  {
    "text": "Behavior Uh we can have tests that hit",
    "start": "1416679",
    "end": "1418440"
  },
  {
    "text": "the database if we want to uh we have",
    "start": "1418440",
    "end": "1420559"
  },
  {
    "text": "all of this power to change the behavior",
    "start": "1420559",
    "end": "1423080"
  },
  {
    "text": "of the things that don't really matter",
    "start": "1423080",
    "end": "1424559"
  },
  {
    "text": "we can reason algebraically about the",
    "start": "1424559",
    "end": "1426520"
  },
  {
    "text": "computation that we're working",
    "start": "1426520",
    "end": "1428520"
  },
  {
    "text": "on so that's one nice aspect to testing",
    "start": "1428520",
    "end": "1432559"
  },
  {
    "text": "uh more functional ideas in testing um",
    "start": "1432559",
    "end": "1436039"
  },
  {
    "text": "are things like property based testing",
    "start": "1436039",
    "end": "1437880"
  },
  {
    "text": "so property based testing is really",
    "start": "1437880",
    "end": "1439120"
  },
  {
    "text": "powerful for understanding behavior of",
    "start": "1439120",
    "end": "1441159"
  },
  {
    "text": "your code um and this is one example of",
    "start": "1441159",
    "end": "1444679"
  },
  {
    "text": "how you might set that up sorry uh",
    "start": "1444679",
    "end": "1447679"
  },
  {
    "text": "cotlin comes or cotlin has a library",
    "start": "1447679",
    "end": "1450440"
  },
  {
    "text": "available to it called cotland test and",
    "start": "1450440",
    "end": "1452640"
  },
  {
    "text": "cotland test is a really really great",
    "start": "1452640",
    "end": "1455159"
  },
  {
    "text": "testing Library one of the reasons why I",
    "start": "1455159",
    "end": "1457080"
  },
  {
    "text": "like it so much is it comes with",
    "start": "1457080",
    "end": "1458240"
  },
  {
    "text": "property based testing out of the box",
    "start": "1458240",
    "end": "1460520"
  },
  {
    "text": "and so you can say here I've defined an",
    "start": "1460520",
    "end": "1462400"
  },
  {
    "text": "immutable reverse method because the",
    "start": "1462400",
    "end": "1464640"
  },
  {
    "text": "reverse method in the Java standard",
    "start": "1464640",
    "end": "1466039"
  },
  {
    "text": "library is not immutable and we've said",
    "start": "1466039",
    "end": "1468039"
  },
  {
    "text": "that we're going to take a list we'll",
    "start": "1468039",
    "end": "1469559"
  },
  {
    "text": "fold it and then that will reverse it so",
    "start": "1469559",
    "end": "1472039"
  },
  {
    "text": "we use fold left and we reconstruct the",
    "start": "1472039",
    "end": "1473720"
  },
  {
    "text": "list and that reverses it and then we",
    "start": "1473720",
    "end": "1475840"
  },
  {
    "text": "write a spec that says for all which is",
    "start": "1475840",
    "end": "1479799"
  },
  {
    "text": "the way that we get into this property",
    "start": "1479799",
    "end": "1481000"
  },
  {
    "text": "based World generate me out as many",
    "start": "1481000",
    "end": "1483520"
  },
  {
    "text": "lists as you can think of of varying",
    "start": "1483520",
    "end": "1485840"
  },
  {
    "text": "different behaviors and then assert that",
    "start": "1485840",
    "end": "1488080"
  },
  {
    "text": "if I reverse a list and then reverse it",
    "start": "1488080",
    "end": "1489720"
  },
  {
    "text": "again that it's the same as the first",
    "start": "1489720",
    "end": "1491919"
  },
  {
    "text": "list that I gave you so the way that for",
    "start": "1491919",
    "end": "1495120"
  },
  {
    "text": "all works by default it gets a thousand",
    "start": "1495120",
    "end": "1496880"
  },
  {
    "text": "Generations you can give give it any",
    "start": "1496880",
    "end": "1498159"
  },
  {
    "text": "number you can give it a run through of",
    "start": "1498159",
    "end": "1499799"
  },
  {
    "text": "what you need um you can give it",
    "start": "1499799",
    "end": "1501600"
  },
  {
    "text": "generators and you can kind of run",
    "start": "1501600",
    "end": "1502799"
  },
  {
    "text": "through with what you're getting out of",
    "start": "1502799",
    "end": "1503919"
  },
  {
    "text": "that but you can actually write your own",
    "start": "1503919",
    "end": "1505720"
  },
  {
    "text": "generator so if we wanted to test our",
    "start": "1505720",
    "end": "1507000"
  },
  {
    "text": "shopping cart we can say here's a",
    "start": "1507000",
    "end": "1508919"
  },
  {
    "text": "shopping cart here's how I generate line",
    "start": "1508919",
    "end": "1510520"
  },
  {
    "text": "items here's how I generate all this",
    "start": "1510520",
    "end": "1511880"
  },
  {
    "text": "stuff um here's my sequences when I call",
    "start": "1511880",
    "end": "1514559"
  },
  {
    "text": "for all this is what you should use to",
    "start": "1514559",
    "end": "1516279"
  },
  {
    "text": "actually generate out me a shopping cart",
    "start": "1516279",
    "end": "1518720"
  },
  {
    "text": "which is really useful because earlier",
    "start": "1518720",
    "end": "1520279"
  },
  {
    "text": "we said that shopping cart was a monoid",
    "start": "1520279",
    "end": "1521799"
  },
  {
    "text": "but a monoid is more than just an empty",
    "start": "1521799",
    "end": "1523600"
  },
  {
    "text": "and a combin there are laws that have to",
    "start": "1523600",
    "end": "1525320"
  },
  {
    "text": "be obeyed Now Arrow gives you way to",
    "start": "1525320",
    "end": "1528159"
  },
  {
    "text": "test these laws so when you write a new",
    "start": "1528159",
    "end": "1529720"
  },
  {
    "text": "instance of a type class you can",
    "start": "1529720",
    "end": "1531320"
  },
  {
    "text": "actually say here is how it implements",
    "start": "1531320",
    "end": "1533840"
  },
  {
    "text": "the type class here's how it actually",
    "start": "1533840",
    "end": "1535159"
  },
  {
    "text": "runs so obeys the monid LA monoid laws",
    "start": "1535159",
    "end": "1538360"
  },
  {
    "text": "we say monoid do laws we give it the",
    "start": "1538360",
    "end": "1540320"
  },
  {
    "text": "monoid that we want to test we give it",
    "start": "1540320",
    "end": "1542039"
  },
  {
    "text": "the generator for it and we give it a",
    "start": "1542039",
    "end": "1543399"
  },
  {
    "text": "way to say are these things equal and it",
    "start": "1543399",
    "end": "1545640"
  },
  {
    "text": "tests it for you and tells you whether",
    "start": "1545640",
    "end": "1547159"
  },
  {
    "text": "or not you actually obeyed the",
    "start": "1547159",
    "end": "1549039"
  },
  {
    "text": "laws so to close out these are all",
    "start": "1549039",
    "end": "1552760"
  },
  {
    "text": "really powerful techniques these are all",
    "start": "1552760",
    "end": "1554279"
  },
  {
    "text": "really nice things but where do we",
    "start": "1554279",
    "end": "1555559"
  },
  {
    "text": "actually go from here what is the future",
    "start": "1555559",
    "end": "1557279"
  },
  {
    "text": "of fun fun programming in cotland going",
    "start": "1557279",
    "end": "1558720"
  },
  {
    "text": "to look like so we have this is the the",
    "start": "1558720",
    "end": "1562880"
  },
  {
    "text": "uh one of the proposals by the creators",
    "start": "1562880",
    "end": "1565000"
  },
  {
    "text": "of the AO library to the cotland",
    "start": "1565000",
    "end": "1567279"
  },
  {
    "text": "standard to the cotland compiler and it",
    "start": "1567279",
    "end": "1569880"
  },
  {
    "text": "is by far by by six times the most",
    "start": "1569880",
    "end": "1572200"
  },
  {
    "text": "popular proposal at the moment of of any",
    "start": "1572200",
    "end": "1574640"
  },
  {
    "text": "proposal ever to the cotland compiler um",
    "start": "1574640",
    "end": "1577080"
  },
  {
    "text": "you can see it's very very popular and",
    "start": "1577080",
    "end": "1578600"
  },
  {
    "text": "effectively this is to give us compile",
    "start": "1578600",
    "end": "1580120"
  },
  {
    "text": "time extension interfaces so I'll I'll",
    "start": "1580120",
    "end": "1583679"
  },
  {
    "text": "skip this and just talk about the slide",
    "start": "1583679",
    "end": "1585399"
  },
  {
    "text": "that we had before we had this calculate",
    "start": "1585399",
    "end": "1587200"
  },
  {
    "text": "slide before we had to explicitly pass",
    "start": "1587200",
    "end": "1588919"
  },
  {
    "text": "in uh monad throw haard repositories you",
    "start": "1588919",
    "end": "1591720"
  },
  {
    "text": "know all these type class behaviors but",
    "start": "1591720",
    "end": "1595320"
  },
  {
    "text": "with the with the new calculate method",
    "start": "1595320",
    "end": "1598000"
  },
  {
    "text": "we can actually say as an extension of",
    "start": "1598000",
    "end": "1600440"
  },
  {
    "text": "the behavior that we had here is what I",
    "start": "1600440",
    "end": "1603120"
  },
  {
    "text": "want you to do and at compile time it",
    "start": "1603120",
    "end": "1604559"
  },
  {
    "text": "will go and do a lookup of all the",
    "start": "1604559",
    "end": "1605960"
  },
  {
    "text": "different interfaces that you've said",
    "start": "1605960",
    "end": "1607279"
  },
  {
    "text": "you implement and it will give them to",
    "start": "1607279",
    "end": "1609159"
  },
  {
    "text": "you so it's actually very close to to",
    "start": "1609159",
    "end": "1611000"
  },
  {
    "text": "type classes in general um and the way",
    "start": "1611000",
    "end": "1613120"
  },
  {
    "text": "that that works involves a whole bunch",
    "start": "1613120",
    "end": "1614559"
  },
  {
    "text": "of Machinery on the compiler side um and",
    "start": "1614559",
    "end": "1616600"
  },
  {
    "text": "a whole bunch of algorithms on how do I",
    "start": "1616600",
    "end": "1618000"
  },
  {
    "text": "find the right instance and all that",
    "start": "1618000",
    "end": "1619120"
  },
  {
    "text": "kind of stuff but it's a really really",
    "start": "1619120",
    "end": "1620799"
  },
  {
    "text": "powerful addition to the language and it",
    "start": "1620799",
    "end": "1622760"
  },
  {
    "text": "empowers us to do the kind of functional",
    "start": "1622760",
    "end": "1625039"
  },
  {
    "text": "code we like doing but without a lot of",
    "start": "1625039",
    "end": "1626679"
  },
  {
    "text": "the boiler plate that we would otherwise",
    "start": "1626679",
    "end": "1627919"
  },
  {
    "text": "have to deal with um and so closing out",
    "start": "1627919",
    "end": "1632279"
  },
  {
    "text": "I think the first thing is just because",
    "start": "1632279",
    "end": "1633760"
  },
  {
    "text": "you're not working in high school",
    "start": "1633760",
    "end": "1634960"
  },
  {
    "text": "doesn't mean that you have to be stuck",
    "start": "1634960",
    "end": "1636000"
  },
  {
    "text": "in the pit of despair you can you can",
    "start": "1636000",
    "end": "1638640"
  },
  {
    "text": "take a lot of the ideas that are really",
    "start": "1638640",
    "end": "1640000"
  },
  {
    "text": "great in these languages that you that",
    "start": "1640000",
    "end": "1641520"
  },
  {
    "text": "that we can learn from and bring them",
    "start": "1641520",
    "end": "1643279"
  },
  {
    "text": "back with us to places where they may",
    "start": "1643279",
    "end": "1645080"
  },
  {
    "text": "not be first class citizens of the",
    "start": "1645080",
    "end": "1646480"
  },
  {
    "text": "language but they have they have",
    "start": "1646480",
    "end": "1648720"
  },
  {
    "text": "powerful abstractions that we can learn",
    "start": "1648720",
    "end": "1650880"
  },
  {
    "text": "from um things that are cool are often",
    "start": "1650880",
    "end": "1654480"
  },
  {
    "text": "really cool regardless of where you",
    "start": "1654480",
    "end": "1655919"
  },
  {
    "text": "implement them so domain abstractions",
    "start": "1655919",
    "end": "1658120"
  },
  {
    "text": "are useful uh kind of independent of the",
    "start": "1658120",
    "end": "1660559"
  },
  {
    "text": "domain that you're trying to apply them",
    "start": "1660559",
    "end": "1661600"
  },
  {
    "text": "you have to pick the right abstraction",
    "start": "1661600",
    "end": "1662760"
  },
  {
    "text": "and the right place to use them but you",
    "start": "1662760",
    "end": "1664880"
  },
  {
    "text": "can get a lot of power and a lot of",
    "start": "1664880",
    "end": "1666120"
  },
  {
    "text": "value out of it and finally one of the",
    "start": "1666120",
    "end": "1669600"
  },
  {
    "text": "nice things about working in software",
    "start": "1669600",
    "end": "1671080"
  },
  {
    "text": "and especially in the functional",
    "start": "1671080",
    "end": "1672240"
  },
  {
    "text": "Community is that we can see far by",
    "start": "1672240",
    "end": "1674360"
  },
  {
    "text": "standing on the shoulders of giants",
    "start": "1674360",
    "end": "1676000"
  },
  {
    "text": "there's a lot of work that takes place",
    "start": "1676000",
    "end": "1677799"
  },
  {
    "text": "in improving the developer experience in",
    "start": "1677799",
    "end": "1680000"
  },
  {
    "text": "improving the tools that we have um and",
    "start": "1680000",
    "end": "1682960"
  },
  {
    "text": "just generally giving us a better",
    "start": "1682960",
    "end": "1684159"
  },
  {
    "text": "environment to work in and just because",
    "start": "1684159",
    "end": "1686559"
  },
  {
    "text": "some of that takes place in a language",
    "start": "1686559",
    "end": "1688000"
  },
  {
    "text": "that we might not be working in doesn't",
    "start": "1688000",
    "end": "1689600"
  },
  {
    "text": "mean that we shouldn't try and find a",
    "start": "1689600",
    "end": "1690559"
  },
  {
    "text": "way to take advantage of it where we are",
    "start": "1690559",
    "end": "1692760"
  },
  {
    "text": "so go check out Arrow if uh go if you're",
    "start": "1692760",
    "end": "1695600"
  },
  {
    "text": "working in cotland um and you want to",
    "start": "1695600",
    "end": "1697440"
  },
  {
    "text": "know more about this come and talk to me",
    "start": "1697440",
    "end": "1698880"
  },
  {
    "text": "or come and join in the one of the chat",
    "start": "1698880",
    "end": "1700240"
  },
  {
    "text": "rooms and thank you very much for",
    "start": "1700240",
    "end": "1704470"
  },
  {
    "text": "[Applause]",
    "start": "1704470",
    "end": "1706440"
  },
  {
    "text": "listening",
    "start": "1706440",
    "end": "1709440"
  }
]