[
  {
    "text": "[Music]",
    "start": "980",
    "end": "7849"
  },
  {
    "text": "okay thank you very much Bridget hello everybody welcome to Jepsen nine of",
    "start": "13990",
    "end": "19700"
  },
  {
    "text": "sinking feeling that is the official pronunciation for the system call should you ever need it my name is Kyle",
    "start": "19700",
    "end": "26060"
  },
  {
    "text": "Kingsbury and you might know me from the internet as a fer I'm my day job I get",
    "start": "26060",
    "end": "31460"
  },
  {
    "text": "to break databases which is basically the coolest thing in the world but before I broke databases I was actually",
    "start": "31460",
    "end": "38510"
  },
  {
    "text": "an engineer working on api's and api's aren't like regular you know products or",
    "start": "38510",
    "end": "44690"
  },
  {
    "text": "services that you would get in the everyday world you can't go to the adoption agency and find a cute little",
    "start": "44690",
    "end": "50120"
  },
  {
    "text": "API and take it home you can't buy one at the store there are services that you sort of behold in the sky and you",
    "start": "50120",
    "end": "56180"
  },
  {
    "text": "interact with you gaze at them and admire them from a distance you can never touch so where API is this is this",
    "start": "56180",
    "end": "62480"
  },
  {
    "text": "illusion this rainbow in the sky but it's supported by code things written in",
    "start": "62480",
    "end": "67670"
  },
  {
    "text": "Ruby or C or Scala that's these steel girders that are holding up a rainbow and those girders in turn are supported",
    "start": "67670",
    "end": "74390"
  },
  {
    "text": "on some wooden pilings things like the the Ruby ZM or or the Scala compiler",
    "start": "74390",
    "end": "79840"
  },
  {
    "text": "open-source libraries we pull in and those are rooted in a firm foundation of",
    "start": "79840",
    "end": "84920"
  },
  {
    "text": "persistent services that we found basically lying around on the internet or whatever we saw in hacker news that",
    "start": "84920",
    "end": "90140"
  },
  {
    "text": "week these databases here represented by the foundation of a pile of tires and as",
    "start": "90140",
    "end": "96049"
  },
  {
    "text": "anybody who has ever worked with the database knows the pile of tires is usually on fire and while our operation",
    "start": "96049",
    "end": "102680"
  },
  {
    "text": "staff is screaming and trying to fix the problem by pulling the flaming tires off of the pile and shoving fresh tires on",
    "start": "102680",
    "end": "108920"
  },
  {
    "text": "hopefully to replace them fast enough that the fire eventually goes out we're",
    "start": "108920",
    "end": "114560"
  },
  {
    "text": "going to preserve the illusion for users that everything is okay we want users to",
    "start": "114560",
    "end": "120770"
  },
  {
    "text": "be able to make requests and get responses and to receive everything is fine even though the system internally",
    "start": "120770",
    "end": "125780"
  },
  {
    "text": "is made up of these faulty terrible components this process of climbing the ladder of abstraction higher and higher",
    "start": "125780",
    "end": "131930"
  },
  {
    "text": "away from the flames below us is known as information hiding it is a core principle of modern systems",
    "start": "131930",
    "end": "138320"
  },
  {
    "text": "I'm not just think about databases I'm also talking about Q's discovery services these things strike fear and",
    "start": "138320",
    "end": "144720"
  },
  {
    "text": "terror into the hearts of engineers because they do terrible things right they get into split brain where two",
    "start": "144720",
    "end": "151050"
  },
  {
    "text": "different sides of the network believe different truths they get into broken foreign key constraints where you go to",
    "start": "151050",
    "end": "156960"
  },
  {
    "text": "get an object that's referenced in some part of the database and the thing it references isn't present anymore or you",
    "start": "156960",
    "end": "163410"
  },
  {
    "text": "have transient temporal anomalies where you you write something to the database and then you go to read it and it's not",
    "start": "163410",
    "end": "168450"
  },
  {
    "text": "there you say wait did I write it at all was that unsuccessful and you read it again and it shows up will it still be",
    "start": "168450",
    "end": "175110"
  },
  {
    "text": "there the next time I don't know so we want to be able to to look at these anomalies which we know were",
    "start": "175110",
    "end": "180900"
  },
  {
    "text": "theoretically possible in some models but understand if they're present in our real-world systems to what extent do",
    "start": "180900",
    "end": "187290"
  },
  {
    "text": "these problems really matter and the only way I think to find out is to go and measure I am an experimentalist by",
    "start": "187290",
    "end": "192960"
  },
  {
    "text": "heart and I have been working on building measuring tools for distributed systems the most successful of which is",
    "start": "192960",
    "end": "198840"
  },
  {
    "text": "Jepsen Jepsen is an open-source library for writing tests for distributed systems and it treats the system as all",
    "start": "198840",
    "end": "207510"
  },
  {
    "text": "systems should be treated as an interaction between an environment and a",
    "start": "207510",
    "end": "212880"
  },
  {
    "text": "system itself the system is going to be comprised of different prophecies and a network and computers and lots of moving",
    "start": "212880",
    "end": "218370"
  },
  {
    "text": "fiddly bits but together as a whole they should provide the illusion of some coherent entity like an SQL database or",
    "start": "218370",
    "end": "225510"
  },
  {
    "text": "a key value store and outside the environment that's all the clients and persistence layers now other stuff that",
    "start": "225510",
    "end": "231690"
  },
  {
    "text": "interact with the system at the boundary between the environment and the system itself there should be some invariants",
    "start": "231690",
    "end": "237450"
  },
  {
    "text": "that hold for instance in my house I've got like three cats right and every time",
    "start": "237450",
    "end": "244560"
  },
  {
    "text": "I opened the door where the cats love to run outside but if I ever see more than three cats run out of my door in a row",
    "start": "244560",
    "end": "251010"
  },
  {
    "text": "and no cats came back in that's an invariant violation it suggests that somewhere in my house there's a hole",
    "start": "251010",
    "end": "256470"
  },
  {
    "text": "where cats are coming back in where your cats are teleporting from outside the house inside the house something's gone wrong",
    "start": "256470",
    "end": "262370"
  },
  {
    "text": "now we're gonna measure these invariants by running bunch of clients outside the system these clients will be simulating",
    "start": "262370",
    "end": "268560"
  },
  {
    "text": "actual participants in distributed system like pretending to be users at their computers making a few requests or",
    "start": "268560",
    "end": "274960"
  },
  {
    "text": "pretending to be API nodes requesting data from some persistence layer and that we're gonna",
    "start": "274960",
    "end": "279969"
  },
  {
    "text": "run all the clients on the same JVM so that we know exactly what each one does and when it's important that we do them",
    "start": "279969",
    "end": "285580"
  },
  {
    "text": "all in the same place so we know exactly what the temporal relationships are between these operations because in some",
    "start": "285580",
    "end": "291039"
  },
  {
    "text": "cases we want to know are the real-time guarantees about visibility the database itself will typically be a collection of",
    "start": "291039",
    "end": "297580"
  },
  {
    "text": "three five seven nodes probably running Linux probably communicating over IP but it could be anything",
    "start": "297580",
    "end": "303009"
  },
  {
    "text": "Jepson sort of agnostic as to what we're going to test and we'll make requests to the database now a tricky bit about this",
    "start": "303009",
    "end": "310180"
  },
  {
    "text": "is that we don't necessarily have access to all the tools we would like if you're gonna test an arbitrary database you",
    "start": "310180",
    "end": "316479"
  },
  {
    "text": "might not be able to find a formal specification of its of its algorithm so",
    "start": "316479",
    "end": "321639"
  },
  {
    "text": "that might rule out using a proof assistant or a model checker you might want to introduce some sort of",
    "start": "321639",
    "end": "327759"
  },
  {
    "text": "annotations or maybe a special static program analysis system that would do symbolic execution or probabilistic",
    "start": "327759",
    "end": "333939"
  },
  {
    "text": "execution but we can't employ those techniques on all sorts of databases if we don't have the source code or if it's",
    "start": "333939",
    "end": "339400"
  },
  {
    "text": "not written in a language or a style which is amenable to analysis so I'm gonna back up and take a sort of black",
    "start": "339400",
    "end": "345610"
  },
  {
    "text": "box approach let's say we know nothing at all about what happens inside the database and all we get to see is with",
    "start": "345610",
    "end": "350740"
  },
  {
    "text": "the clients interacting with the database observe so how do our clients generate randomized operations like",
    "start": "350740",
    "end": "356919"
  },
  {
    "text": "write the number five or read the current value and they'll apply to the system and come back with some result",
    "start": "356919",
    "end": "362560"
  },
  {
    "text": "and that result could be one of basically three things you could succeed in which case we know the operation took",
    "start": "362560",
    "end": "369339"
  },
  {
    "text": "place it could fail and then we know that it did not take place or it could",
    "start": "369339",
    "end": "375909"
  },
  {
    "text": "timeout or crash or do something else and this is a tricky thing a lot of people assume that a timeout or a where",
    "start": "375909",
    "end": "381339"
  },
  {
    "text": "a crash means that the operation didn't happen but that's not necessarily the case it could be the operation is",
    "start": "381339",
    "end": "386589"
  },
  {
    "text": "somewhere in the network or maybe it got written to a queue on disk and when that box reboots it's gonna look at its queue",
    "start": "386589",
    "end": "392560"
  },
  {
    "text": "on disk and suddenly reinjected operation back into the system so operations that timeout might take",
    "start": "392560",
    "end": "397930"
  },
  {
    "text": "effect hours weeks years later and we have to plan for that so when our analysis will treat these as three",
    "start": "397930",
    "end": "403629"
  },
  {
    "text": "separate contingencies will run these clients concurrently so overtime with a little",
    "start": "403629",
    "end": "409210"
  },
  {
    "text": "bit concurrent history of each single-threaded clients doing multiple operations against the system and this",
    "start": "409210",
    "end": "415690"
  },
  {
    "text": "history is sort of abstract it just says hey I read three I wrote five or hey I in queued this record and hey I DQ'd",
    "start": "415690",
    "end": "422440"
  },
  {
    "text": "this record it's completely decouple from the underlying system itself and we can analyze that data structure as if it",
    "start": "422440",
    "end": "429280"
  },
  {
    "text": "were some abstract execution or history of a program and that means that we can run a checker that maybe tries to find a",
    "start": "429280",
    "end": "435669"
  },
  {
    "text": "path through these transactions and along that path it should make sense and if it's a linearizable system maybe that",
    "start": "435669",
    "end": "441310"
  },
  {
    "text": "path always has to go forward in time if it's a serializable system maybe we can go backwards and forwards in time if",
    "start": "441310",
    "end": "447580"
  },
  {
    "text": "we're looking for snapshot isolation may be weaker constraints apply so depending on the invariants we measure and the",
    "start": "447580",
    "end": "452650"
  },
  {
    "text": "type of system we're analyzing will devise different checkers but all of them will operate essentially on the observable history of systems",
    "start": "452650",
    "end": "459219"
  },
  {
    "text": "interacting with clients so we're overall program here is to generate randomized operations record a",
    "start": "459219",
    "end": "466000"
  },
  {
    "text": "history of those operations as they were applied to the system and then verify that history is consistent with some abstract model like a key value store",
    "start": "466000",
    "end": "472960"
  },
  {
    "text": "and while this is going on we're gonna get out our big network shears and we're gonna cut the cables we're going to",
    "start": "472960",
    "end": "480840"
  },
  {
    "text": "pause processes we're going to slip sleeping drugs into their evening tea",
    "start": "480840",
    "end": "486370"
  },
  {
    "text": "we're going to scribble on their calendars and make sure they go to the wrong child soccer practice we're gonna",
    "start": "486370",
    "end": "491979"
  },
  {
    "text": "basically try to make their lives really difficult and make sure that the system obeys all the correct invariants even",
    "start": "491979",
    "end": "497830"
  },
  {
    "text": "under stressful conditions so does this work when we started doing this in 2013",
    "start": "497830",
    "end": "505479"
  },
  {
    "text": "with react we found that last right wins default mode would lead to lost rights but you can do safe commutative updates",
    "start": "505479",
    "end": "510909"
  },
  {
    "text": "of C or D T's MongoDB lost data at all levels of write concern read a sentinel when to split-brain and threw away all",
    "start": "510909",
    "end": "517029"
  },
  {
    "text": "rights on one side of a partition cassandra has last right wins loss and there is no CRT T option it also had a",
    "start": "517029",
    "end": "522820"
  },
  {
    "text": "row level isolation system that was not actually isolated it also had a transactional system based on Paxos which would deadlock forever after like",
    "start": "522820",
    "end": "529300"
  },
  {
    "text": "ten transactions and never run again and when that bug was fixed it had a dead loss Bo due to double applying transactions nuodb claimed to be the cap",
    "start": "529300",
    "end": "536230"
  },
  {
    "text": "theorem by buffering all requested Ram for the duration of a partition this of course is not available Kafka had an",
    "start": "536230",
    "end": "541779"
  },
  {
    "text": "NSYNC replica set the set of nodes which is currently servicing requests that could shrink arbitrarily to just a single node acknowledging all of your",
    "start": "541779",
    "end": "548230"
  },
  {
    "text": "operations and if that node crashes then no your operations go with it zookeeper past which I consider",
    "start": "548230",
    "end": "555220"
  },
  {
    "text": "something of a personal failing at CD and console a both exhibited stale reads",
    "start": "555220",
    "end": "562300"
  },
  {
    "text": "so you could see data from the past elasticsearch lost data in every duck class of partition we tested RabbitMQ",
    "start": "562300",
    "end": "568750"
  },
  {
    "text": "like Redis went into split brain and lost massive amounts of data on one side of her cluster aerospike claimed to be",
    "start": "568750",
    "end": "573790"
  },
  {
    "text": "an acid datastore but turned out to be last right wins of course it lost rights to elasticsearch at 1:5 still lost 8 in",
    "start": "573790",
    "end": "579910"
  },
  {
    "text": "every single test case however this time it lost less they've hatched some of the bugs in 2015 at MongoDB we pet tested",
    "start": "579910",
    "end": "586959"
  },
  {
    "text": "again and they had closed the right loss problem but we did uncover two phenomena both stale reads and dirty reads so you",
    "start": "586959",
    "end": "593110"
  },
  {
    "text": "can see data from the past and data that never should have existed Cronos a task scheduling system would",
    "start": "593110",
    "end": "598180"
  },
  {
    "text": "fail to schedule tasks forever after it lost its quorum in a certain way for Kona extra to be in glare a cluster",
    "start": "598180",
    "end": "603790"
  },
  {
    "text": "libraries from my sequel replication had a snapshot isolated system in which snapshots were neither snapshots nor isolated resync DB passed his basic key",
    "start": "603790",
    "end": "612760"
  },
  {
    "text": "value store tests but if you rapidly reconfigure the cluster adding and removing nodes during",
    "start": "612760",
    "end": "618220"
  },
  {
    "text": "networked partitions you can induce a certain type of bug that could host the cluster volt DB 6:3 claimed to be a",
    "start": "618220",
    "end": "625720"
  },
  {
    "text": "strict serializable SQL system but in fact exhibited stale reads dirty reads and lost writes do the multiple bugs in",
    "start": "625720",
    "end": "631360"
  },
  {
    "text": "replication crate IO based on elasticsearch exhibit solve elastic searches phenomena so in 2016 it had",
    "start": "631360",
    "end": "637600"
  },
  {
    "text": "stale reads dirty reads lost and corrupt updates and also lost inserts cockroach DB in 2017 exhibited to non serializable",
    "start": "637600",
    "end": "645910"
  },
  {
    "text": "anomalies one of them was a phantoms you could fail to observe the history of the system in a serializable way and another",
    "start": "645910",
    "end": "651850"
  },
  {
    "text": "one was you can insert one record and get multiple copies of it back MongoDB we reanalyzed in 2017 went a",
    "start": "651850",
    "end": "658480"
  },
  {
    "text": "little deeper and we found a fundamental flaw in the Visia replication protocol which meant that lost data if there was",
    "start": "658480",
    "end": "663730"
  },
  {
    "text": "a clock skew unfortunately that bug was also present in the replacement protocol v1 which led to multiple data loss bugs",
    "start": "663730",
    "end": "669760"
  },
  {
    "text": "there as well and now for something completely different",
    "start": "669760",
    "end": "675400"
  },
  {
    "text": "after our litany of fears past I'd like to emphasize that many of these bugs in",
    "start": "675400",
    "end": "680980"
  },
  {
    "text": "fact almost all of these bugs are now fixed vendors have been incredibly responsive in solving these problems and",
    "start": "680980",
    "end": "686200"
  },
  {
    "text": "to some extent we shouldn't be surprised there are so many problems because doing distributed systems is really tricky so",
    "start": "686200",
    "end": "692800"
  },
  {
    "text": "I don't mean to get down on any particular vendor for this it's just part of the game but I do want to",
    "start": "692800",
    "end": "698200"
  },
  {
    "text": "emphasize that doing a little bit of testing can reveal surprising results what I'd like to talk about now is some",
    "start": "698200",
    "end": "705220"
  },
  {
    "text": "of the recent work I've been doing over the last year in three new distributed systems the first is tender mint at O 10",
    "start": "705220",
    "end": "711940"
  },
  {
    "text": "- which is a transaction replication system with pluggable state machines and it offers Byzantine fault tolerance",
    "start": "711940",
    "end": "718090"
  },
  {
    "text": "we're gonna break this down it's a bit much you could think of it a little bit like the raft consensus algorithm meets",
    "start": "718090",
    "end": "724180"
  },
  {
    "text": "a blockchain system like Raph is gonna form a linearizable order transactions",
    "start": "724180",
    "end": "729370"
  },
  {
    "text": "that means the transactions happen in a total order so you do one two three four you always know that two comes before",
    "start": "729370",
    "end": "735580"
  },
  {
    "text": "three never the other way around and you're gonna group these transactions",
    "start": "735580",
    "end": "740950"
  },
  {
    "text": "into blocks and then hook them together with cryptographic signatures so they form a chain of blocks over time it's",
    "start": "740950",
    "end": "747760"
  },
  {
    "text": "also Byzantine fault tolerant which is a typical property for blockchain systems and that means that if some of your nodes are like Regina George and they're",
    "start": "747760",
    "end": "754870"
  },
  {
    "text": "trying to spread rumors and lies about you you can shun them so long as you have the cooperation of a legal and and",
    "start": "754870",
    "end": "761920"
  },
  {
    "text": "law-abiding group of nodes that is greater than two-thirds of the voting power finally it offers pluggable state",
    "start": "761920",
    "end": "768670"
  },
  {
    "text": "machines so it doesn't give you a database it says here are transactions there are opaque blobs it's up to you to",
    "start": "768670",
    "end": "774310"
  },
  {
    "text": "interpret them so the validators in in tender mint are the programs that actually generate the history of",
    "start": "774310",
    "end": "780700"
  },
  {
    "text": "transactions and then over an RPC mechanism they will pass you the operations to perform and then you can",
    "start": "780700",
    "end": "786580"
  },
  {
    "text": "interpret them however you like so you could build a key value store or a cryptocurrency or I don't know",
    "start": "786580",
    "end": "792130"
  },
  {
    "text": "cat trading simulator but the one that we're gonna test is called Merkel eyes this is a yes uh-huh this",
    "start": "792130",
    "end": "801650"
  },
  {
    "text": "a key-value store based on Merkel trees and we're gonna test it with two different workloads one of them is by",
    "start": "801650",
    "end": "807890"
  },
  {
    "text": "looking at it as if it were a single register so we're gonna use exactly one key at a time and then we'll do reads",
    "start": "807890",
    "end": "813200"
  },
  {
    "text": "and writes and compare and set operations on that register but the analyzer for that system is in X space",
    "start": "813200",
    "end": "821690"
  },
  {
    "text": "it is np-hard so to handle a higher throughput which might expose more race",
    "start": "821690",
    "end": "827750"
  },
  {
    "text": "conditions we're gonna have an additional weaker test which is to simply add a bunch of numbers to a set",
    "start": "827750",
    "end": "833150"
  },
  {
    "text": "and then try to read it back and make sure that everything we added shows up and we're gonna do that ad by reading",
    "start": "833150",
    "end": "838550"
  },
  {
    "text": "the current value we'll add something to that record and then we'll write it back if and only if it has not changed this",
    "start": "838550",
    "end": "845779"
  },
  {
    "text": "led to a race condition in merkel eyes where if you rapidly mutated one one",
    "start": "845779",
    "end": "851240"
  },
  {
    "text": "fraction or one one path in the b tree on disk it could decide that it needed",
    "start": "851240",
    "end": "856910"
  },
  {
    "text": "to garbage collect that branch even though we was needed by a concurrent update and that could lead to corrupt",
    "start": "856910",
    "end": "862010"
  },
  {
    "text": "state we tested with clock skew both a bumping the clock and by strobing it",
    "start": "862010",
    "end": "867350"
  },
  {
    "text": "rapidly back and forth by say 30 seconds every 15 milliseconds this is a really",
    "start": "867350",
    "end": "872510"
  },
  {
    "text": "interesting thing to do to computers because a lot of times we assume the timeouts will fire approximately on time",
    "start": "872510",
    "end": "877640"
  },
  {
    "text": "and if your clock is strobing back and forth by 30 seconds every time Billie's it means that all your timeouts are",
    "start": "877640",
    "end": "883820"
  },
  {
    "text": "gonna fire almost immediately so that bleeds through some really interesting race conditions but it did not break ten",
    "start": "883820",
    "end": "889160"
  },
  {
    "text": "Derman we all stood with crashes you can kill all the nodes and bring the back and it works okay you can isolate single",
    "start": "889160",
    "end": "895640"
  },
  {
    "text": "nodes you can cut the network in half you can create intersecting rings where every node season majority of nodes but",
    "start": "895640",
    "end": "901100"
  },
  {
    "text": "no no degrees on what the majority is and they all work as well the one case we'd found where you could lose data was",
    "start": "901100",
    "end": "907100"
  },
  {
    "text": "with duplicate validators so you you run two copies of a single logical node and",
    "start": "907100",
    "end": "912880"
  },
  {
    "text": "you let them evolve independently and this is to simulate a malicious validator who's like promising oh yeah",
    "start": "912880",
    "end": "919850"
  },
  {
    "text": "sure sure George I'll go to your birthday party on Sunday and then somebody said hey we you'll get ice cream with me on sunny like yeah I'll go",
    "start": "919850",
    "end": "925730"
  },
  {
    "text": "to get ice cream with you on Sunday you've made these contradictory promises in the logs but if there's a partition",
    "start": "925730",
    "end": "932209"
  },
  {
    "text": "that allows those two contradictory promises to you visible on separate nodes and the",
    "start": "932209",
    "end": "938310"
  },
  {
    "text": "malicious validator has a supermajority then you can still commit on both sides",
    "start": "938310",
    "end": "944970"
  },
  {
    "text": "of partition and get contradictory block chains as a result so when these nodes",
    "start": "944970",
    "end": "950279"
  },
  {
    "text": "come back together they'll realize oh no we've been lied to note a has signed transactions that conflict and they'll",
    "start": "950279",
    "end": "956550"
  },
  {
    "text": "sort of lose data or or or kill themselves but this is somewhat to be expected because tenorman explicitly",
    "start": "956550",
    "end": "962910"
  },
  {
    "text": "specifies you cannot have more than 1/3 of the nodes in terms of voting power be",
    "start": "962910",
    "end": "968279"
  },
  {
    "text": "malicious we have another default which is to kill nodes and then truncate their",
    "start": "968279",
    "end": "975450"
  },
  {
    "text": "on-disc logs and then to bring them back up this simulates cases where the filesystem might have failed to journal",
    "start": "975450",
    "end": "980490"
  },
  {
    "text": "things correctly this found amortized crash which is actually in the library go level DB it turns out the gullible DB",
    "start": "980490",
    "end": "987570"
  },
  {
    "text": "doesn't do its recovery perfect in all cases sometimes if you truncate or right in the middle of the write it will just",
    "start": "987570",
    "end": "994500"
  },
  {
    "text": "explode and refuse to recover and it turns out this is applied to yeah this is applied to several production systems",
    "start": "994500",
    "end": "1000589"
  },
  {
    "text": "not just tender mint there's also a theoretical vulnerability and tender mint it's right ahead log turned out to",
    "start": "1000589",
    "end": "1006770"
  },
  {
    "text": "not be right ahead it was right whenever so we had a TANF sink column that fixes",
    "start": "1006770",
    "end": "1012110"
  },
  {
    "text": "that you can also dynamically reconfigure tenement clusters so you can add and remove validators on the fly",
    "start": "1012110",
    "end": "1017570"
  },
  {
    "text": "which is a really nice operational property but it didn't actually result in problems so I'm really happy about",
    "start": "1017570",
    "end": "1022760"
  },
  {
    "text": "that too the data corruption crash bugs are sort of to be expected this is a very young product it was still in beta",
    "start": "1022760",
    "end": "1029030"
  },
  {
    "text": "we were testing and the tenorman team has been working to address these issues next up I want to talk about Hazel cast",
    "start": "1029030",
    "end": "1036110"
  },
  {
    "text": "of versions 383 hazel caste is an in-memory data grid which is a fancy way of saying data structure server so it's",
    "start": "1036110",
    "end": "1043040"
  },
  {
    "text": "going to give you the ability to have distributed maps and sets and queues that sort of live in a cloud of machines",
    "start": "1043040",
    "end": "1048230"
  },
  {
    "text": "and they're not necessarily persistent disk but they should be safe as long as nodes keep running most of the time so",
    "start": "1048230",
    "end": "1054110"
  },
  {
    "text": "you get sets you get sets you get lists you get IDs so you can generate unique IDs you get semaphores and locks for",
    "start": "1054110",
    "end": "1059870"
  },
  {
    "text": "concurrency control you get distributed queues and atomic long so you can mutate",
    "start": "1059870",
    "end": "1064910"
  },
  {
    "text": "some number atomic all these really nice primitives like this is the toolkit that we want as",
    "start": "1064910",
    "end": "1069960"
  },
  {
    "text": "disturbing systems developers but it's got a tricky problem and that's that when a network petition occurs two",
    "start": "1069960",
    "end": "1077130"
  },
  {
    "text": "components can run independently now to resolve the conflict between independent",
    "start": "1077130",
    "end": "1083010"
  },
  {
    "text": "running clusters you can merge things together but the merge function isn't",
    "start": "1083010",
    "end": "1088410"
  },
  {
    "text": "necessarily always going to be commutative so you might lose updates on one side or do something it doesn't",
    "start": "1088410",
    "end": "1093870"
  },
  {
    "text": "quite make sense there's a split brain protection system which is supposed to kill nodes in the minority side this is",
    "start": "1093870",
    "end": "1099390"
  },
  {
    "text": "a common tactic to defend against partitions but it is never safe because it only kicks in after you've detected",
    "start": "1099390",
    "end": "1105840"
  },
  {
    "text": "the partition and that could take maybe tens of seconds the first data type we",
    "start": "1105840",
    "end": "1111179"
  },
  {
    "text": "tested is a lock and it says that locks are guaranteed to be executed by only one thread in the cluster so might",
    "start": "1111179",
    "end": "1117120"
  },
  {
    "text": "assume that you could acquire a lock run some code release the lock and that nobody else would run while you held",
    "start": "1117120",
    "end": "1122280"
  },
  {
    "text": "that lock this is the way we think about mutexes unfortunately you could see a",
    "start": "1122280",
    "end": "1128160"
  },
  {
    "text": "process acquire the lock and while it's holding it three other processes could",
    "start": "1128160",
    "end": "1133169"
  },
  {
    "text": "also acquire the lock and go on to hold it as well so this is the opposite of a lock it is it is not a lock this is even",
    "start": "1133169",
    "end": "1141540"
  },
  {
    "text": "if it was a lock it would be wrong because even if you hold these things exclusively the reason you hold the lock",
    "start": "1141540",
    "end": "1147210"
  },
  {
    "text": "is to do some side effects right side effects that go into the network and could take arbitrarily long to complete so you can't control exclusively what",
    "start": "1147210",
    "end": "1154140"
  },
  {
    "text": "the order would be this is why lock services and distribute systems don't really exist anytime you see one you",
    "start": "1154140",
    "end": "1159480"
  },
  {
    "text": "should run read the chubbie paper for a more nuanced and accurate view of that free aggressive polemic queues say that",
    "start": "1159480",
    "end": "1168630"
  },
  {
    "text": "you can add an item in one machine and remove it from another one this is how we would like queues to work so you put",
    "start": "1168630",
    "end": "1175320"
  },
  {
    "text": "in the numbers 1 2 3 & 4 they're all acknowledged this successful and what comes out is 1 1 2 4 so you have",
    "start": "1175320",
    "end": "1181710"
  },
  {
    "text": "multiple copies of one which is okay fine but you have no copies of 3 which is a little bit troubling so you might",
    "start": "1181710",
    "end": "1188549"
  },
  {
    "text": "see like 2% duplicated records 2% lost records and this actually gets worse the default timeouts this is the most",
    "start": "1188549",
    "end": "1194160"
  },
  {
    "text": "aggressive safe option I could choose this is with the partition detection with the GUP",
    "start": "1194160",
    "end": "1200140"
  },
  {
    "text": "stuff enabled and with short timeouts for everything there's an atomic reference type an atomic long type which",
    "start": "1200140",
    "end": "1206710"
  },
  {
    "text": "says you can have guaranteed atomic compare and set across the cluster so I could use this to change a value if and",
    "start": "1206710",
    "end": "1212800"
  },
  {
    "text": "only if it's currently some other value and those operations should be atomic and never overlap each other",
    "start": "1212800",
    "end": "1218370"
  },
  {
    "text": "so the way this is supposed to work is that I've got a value like two and in the top transaction I'll read it and I",
    "start": "1218370",
    "end": "1225190"
  },
  {
    "text": "want to write back 3 so I'm going to increment to get 3 and write it back if and only if it's still 2 and that",
    "start": "1225190",
    "end": "1232900"
  },
  {
    "text": "succeeds because the value still 2 concurrently this bottom transaction will read to increment to get 3 and",
    "start": "1232900",
    "end": "1239710"
  },
  {
    "text": "write back and it says hey are you still - oh I'm sorry the value has changed so",
    "start": "1239710",
    "end": "1244840"
  },
  {
    "text": "I'm not going to write and this ensures that we can do increments in a safe atomic way we don't lose any updates but",
    "start": "1244840",
    "end": "1252430"
  },
  {
    "text": "what will actually happen in hazel caste is that the other commit will also go",
    "start": "1252430",
    "end": "1257890"
  },
  {
    "text": "through and now we've taken two and added 1+1 and gotten 3 so we've clearly",
    "start": "1257890",
    "end": "1264280"
  },
  {
    "text": "not done something atomically this is fine this makes a little more sense when you consider that the state of the",
    "start": "1264280",
    "end": "1269770"
  },
  {
    "text": "system has forked into multiple copies there's some nodes that think the value is 2 on both sides and you can",
    "start": "1269770",
    "end": "1275080"
  },
  {
    "text": "independently up to each of them and you can continue to evolve so maybe on one side you increment Union command so you",
    "start": "1275080",
    "end": "1281590"
  },
  {
    "text": "get 3 4 5 on the other cluster on the bottom you've got 3 and depending on who you're talking to you could see the",
    "start": "1281590",
    "end": "1287560"
  },
  {
    "text": "value oscillate between 3 & 5 3 & 5 so you might even see non monotonic outcomes and worse yet when you recover",
    "start": "1287560",
    "end": "1295300"
  },
  {
    "text": "there's sort of this opaque decision that just chooses a value for you based on some heuristics so you might see your",
    "start": "1295300",
    "end": "1301750"
  },
  {
    "text": "value go from 5 back to 3 and now you've exhibited in a system that only adds to the number going back in time I mean",
    "start": "1301750",
    "end": "1309790"
  },
  {
    "text": "like what what what are you doing like look at your life look at your choices",
    "start": "1309790",
    "end": "1315300"
  },
  {
    "text": "the whole point of an atomic object is 2p atomic so please like use an",
    "start": "1315300",
    "end": "1321040"
  },
  {
    "text": "algorithm it actually does that you might say okay fine let's let's back off a try something easier let's try ID",
    "start": "1321040",
    "end": "1326470"
  },
  {
    "text": "generation so so uh so you would you do something like a flake ID we know this is coordination",
    "start": "1326470",
    "end": "1332860"
  },
  {
    "text": "free it gives you updates that are relatively fast but unfortunately I do generator is backed by an atomic long so",
    "start": "1332860",
    "end": "1339700"
  },
  {
    "text": "it does exactly the same thing it will it will increment on both sides get the same IDs and hand them out to two different people so you could generate",
    "start": "1339700",
    "end": "1345550"
  },
  {
    "text": "like eight hundred thirty four thousand identifiers but 91 thousand of those will be duplicates with each other in a",
    "start": "1345550",
    "end": "1350950"
  },
  {
    "text": "thirty second period Maps offer these operations like put if absent and that",
    "start": "1350950",
    "end": "1357610"
  },
  {
    "text": "says like set K to V only if it's not set currently or you could replace say",
    "start": "1357610",
    "end": "1363070"
  },
  {
    "text": "set K to V Prime only if it's currently V this is like AK as operation and a right but now it's",
    "start": "1363070",
    "end": "1369580"
  },
  {
    "text": "generalized to maps and if you think about it the existence of these functions implies that there is a",
    "start": "1369580",
    "end": "1375850"
  },
  {
    "text": "current singular value for that map like what does it mean to put if absent if",
    "start": "1375850",
    "end": "1381190"
  },
  {
    "text": "the map both contains and also does not contain the object right the these concurrent data structures simply don't",
    "start": "1381190",
    "end": "1387670"
  },
  {
    "text": "make sense in the context of these functions but they're there anyway they're documented to work if you try them too as data even with quorum",
    "start": "1387670",
    "end": "1394059"
  },
  {
    "text": "protection however if you use a custom merge function and use compare and set",
    "start": "1394059",
    "end": "1400570"
  },
  {
    "text": "on every independent replica then you can build C or D T's that merge data back together safely and even commutative updates but only for map",
    "start": "1400570",
    "end": "1407230"
  },
  {
    "text": "types as of the time I wrote this analysis recommendations in general if",
    "start": "1407230",
    "end": "1412870"
  },
  {
    "text": "you're writing a distributed system choose a replication algorithm it is appropriate for your data type so if",
    "start": "1412870",
    "end": "1418090"
  },
  {
    "text": "you're going to build an atomic long you know there needs to be probably sequential and possibly linearizable",
    "start": "1418090",
    "end": "1423900"
  },
  {
    "text": "those algorithms require something like a Paxos or a raft or a zap so choose one",
    "start": "1423900",
    "end": "1430630"
  },
  {
    "text": "of those don't try to back it by some weaker or eventually consistent thing for things like ID generation you can",
    "start": "1430630",
    "end": "1437110"
  },
  {
    "text": "use flake IDs for counters you could have eventually consistent counters like PN counters there's a whole family of",
    "start": "1437110",
    "end": "1443800"
  },
  {
    "text": "algorithms here that might be applicable if you're a hazel caste user you should",
    "start": "1443800",
    "end": "1449620"
  },
  {
    "text": "not rely on hazel caste for anything that has to do with safety like don't use it as a lock service but",
    "start": "1449620",
    "end": "1456040"
  },
  {
    "text": "unfortunately uses of hazel caste Canon do use these functions as they're documented without really understanding",
    "start": "1456040",
    "end": "1461290"
  },
  {
    "text": "the console Pence's like the very first thing I saw on the partner blog post page on hazel",
    "start": "1461290",
    "end": "1466369"
  },
  {
    "text": "Cass was bad greedy B and bad greed to be internally generates transaction identifiers using an ID generator from",
    "start": "1466369",
    "end": "1471379"
  },
  {
    "text": "hazel caste which means that sometimes it will generate two transactions with the same ID like who knows what happens",
    "start": "1471379",
    "end": "1476929"
  },
  {
    "text": "and that occurs aurilla DB used to put all of their cluster state and all the transactional management's through hazel cast as well",
    "start": "1476929",
    "end": "1482869"
  },
  {
    "text": "and they had so many problems of data loss they backed off they've almost removed it but it's still used for the cluster state management and when I",
    "start": "1482869",
    "end": "1489649"
  },
  {
    "text": "email them I'm like what do you mean it can do this behavior like yeah surprise so look out for these things like hazel",
    "start": "1489649",
    "end": "1496759"
  },
  {
    "text": "caste is commonly deployed as a cache in which case this is totally fine right caches are supposed to be fuzzy and",
    "start": "1496759",
    "end": "1502580"
  },
  {
    "text": "lossy but if you're using things like the locks at atomic references you might want to look twice since the time of",
    "start": "1502580",
    "end": "1508909"
  },
  {
    "text": "this analysis hazel caste is basically backed off and gutted everything they've updated the documentation they have",
    "start": "1508909",
    "end": "1515029"
  },
  {
    "text": "added support for I believe flake IDs and new C or DT data types which is like ah great and I think they're working on",
    "start": "1515029",
    "end": "1522409"
  },
  {
    "text": "a raft implementation as well so a lot of this should change and upcoming releases finally anybody who's trying to",
    "start": "1522409",
    "end": "1528529"
  },
  {
    "text": "sell you a distributed lock is trying to sell you sawdust and lies they're not real stop trying to use them any locking",
    "start": "1528529",
    "end": "1535580"
  },
  {
    "text": "system is designed to control side effects so you need to couple the side effects themselves the underlying system you're testing this is a whole different",
    "start": "1535580",
    "end": "1541820"
  },
  {
    "text": "talk but I want to throw it out there last but not least I'll talk about era",
    "start": "1541820",
    "end": "1546950"
  },
  {
    "text": "spike 3 no no 3 we hissed we came back and tested this in 2015 it was a",
    "start": "1546950",
    "end": "1551960"
  },
  {
    "text": "distributed shard a document store which means it's a key value store but there's some structure to the values and it",
    "start": "1551960",
    "end": "1557869"
  },
  {
    "text": "claimed to be an acid data store but was actually last right wins so emerged things based on timestamp or basically",
    "start": "1557869",
    "end": "1563629"
  },
  {
    "text": "the number of changes on a single replica and so of course it lost a lot of data during perdition's but they",
    "start": "1563629",
    "end": "1570440"
  },
  {
    "text": "actually went back to the drawing board after the analysis and they spent the last two years gutting and redesigning",
    "start": "1570440",
    "end": "1577999"
  },
  {
    "text": "all of their internals and so the number of things that come out of this they've they've actually dramatically improved",
    "start": "1577999",
    "end": "1584029"
  },
  {
    "text": "the probability of data loss so the frequency and severity these issues is decreased and that's really important",
    "start": "1584029",
    "end": "1590029"
  },
  {
    "text": "because for a lot of users you're willing to tolerate some degree of loss but you lose a little bit of money every",
    "start": "1590029",
    "end": "1595399"
  },
  {
    "text": "time it happen so maybe you're building a machine learning model and it gets less accurate when you drop records so the turns out",
    "start": "1595399",
    "end": "1601670"
  },
  {
    "text": "these customers may have developed like sophisticated modeling techniques for deciding is this enough data or not and",
    "start": "1601670",
    "end": "1607990"
  },
  {
    "text": "and every little bit of consistency you can add helps them do better so there's",
    "start": "1607990",
    "end": "1613370"
  },
  {
    "text": "already a nice outcome to this but the other thing they've done is to add a custom consensus protocol and in a4o",
    "start": "1613370",
    "end": "1619130"
  },
  {
    "text": "they're releasing a strong consistency mode which offers linearise ability and that's what I came in to test the first",
    "start": "1619130",
    "end": "1626870"
  },
  {
    "text": "thing we found in Eric's Beck was that you could start off a test with a completely blank slate and the very",
    "start": "1626870",
    "end": "1632120"
  },
  {
    "text": "first operation you do is to read - it's like buying a fridge from Sears opening",
    "start": "1632120",
    "end": "1640310"
  },
  {
    "text": "it and finding like a head of lettuce like where did this come from um well if",
    "start": "1640310",
    "end": "1647450"
  },
  {
    "text": "you look carefully at the history you might see that prior to that there was a right of - but it failed so of course",
    "start": "1647450",
    "end": "1653300"
  },
  {
    "text": "your visualization system hi didn't actually render it and if you start to",
    "start": "1653300",
    "end": "1658820"
  },
  {
    "text": "think maybe that fail right up to you actually took place the way this happens",
    "start": "1658820",
    "end": "1663830"
  },
  {
    "text": "is that a client makes a request - right - to the server but the server doesn't own the data that you're modifying so",
    "start": "1663830",
    "end": "1670130"
  },
  {
    "text": "it's gonna proxy it onwards to some other server that does on the data where it gets applied but the acknowledgement",
    "start": "1670130",
    "end": "1675950"
  },
  {
    "text": "message is lost so the original proxying server will timeout and retry that operation it",
    "start": "1675950",
    "end": "1682670"
  },
  {
    "text": "issues a retry and then the remote server says oh I'm sorry I don't I don't",
    "start": "1682670",
    "end": "1687950"
  },
  {
    "text": "accept that right anymore I no longer own that data or some other failure has happened but it's definitely not",
    "start": "1687950",
    "end": "1693050"
  },
  {
    "text": "happening I definitely did not apply you're right this time and then the proxying server dutifully relaized the",
    "start": "1693050",
    "end": "1700220"
  },
  {
    "text": "client that the operation failed but it neglected to think about was that maybe",
    "start": "1700220",
    "end": "1705740"
  },
  {
    "text": "its previous request had actually succeeded so the thing you want to be careful about and doing proxy systems",
    "start": "1705740",
    "end": "1710870"
  },
  {
    "text": "retries is to make sure that you take the most indeterminate failure state as",
    "start": "1710870",
    "end": "1715940"
  },
  {
    "text": "your as a return code so you don't accidentally promise your users that something definitely didn't happen when",
    "start": "1715940",
    "end": "1721820"
  },
  {
    "text": "it actually could have this is the same bug that bit cockroach DB we saw you",
    "start": "1721820",
    "end": "1727400"
  },
  {
    "text": "could insert one record due to some like sort of uncaring of",
    "start": "1727400",
    "end": "1733929"
  },
  {
    "text": "exactly which operations could be replayed and when you can end up retrying an insert operation multiple",
    "start": "1733929",
    "end": "1739720"
  },
  {
    "text": "times seeing a definite failure and retrying even though it actually internally succeeded so this is a sort",
    "start": "1739720",
    "end": "1746229"
  },
  {
    "text": "of common pattern I think this is fixed in three nine one five hooray so we want to test node crashes so we",
    "start": "1746229",
    "end": "1754149"
  },
  {
    "text": "would drop pianos on nodes and hopefully the rest of the cluster would go about their day and you could kill one node it",
    "start": "1754149",
    "end": "1759879"
  },
  {
    "text": "would work fine kill two nodes works fine kill three it stops working and this is normal and expected because most",
    "start": "1759879",
    "end": "1765629"
  },
  {
    "text": "consistent systems work with majority quorums what you would not expect is",
    "start": "1765629",
    "end": "1771220"
  },
  {
    "text": "that when you restart all of the nodes it doesn't ever come back that's a",
    "start": "1771220",
    "end": "1776710"
  },
  {
    "text": "little bit atypical and in fact the partition is dead it's fully dead and it",
    "start": "1776710",
    "end": "1782169"
  },
  {
    "text": "has to be revived so you swoop in as the operator you shout heroes never die and and you resurrect the partition with an",
    "start": "1782169",
    "end": "1788889"
  },
  {
    "text": "administrative command but when it comes back it's not quite all there some operations may have been lost so that's",
    "start": "1788889",
    "end": "1797049"
  },
  {
    "text": "a bit of a problem and it stems from error spike not flushing operations to disk and this is a documented behavior",
    "start": "1797049",
    "end": "1804580"
  },
  {
    "text": "in aerospike for performance reasons they've relied mostly on having multiple",
    "start": "1804580",
    "end": "1809739"
  },
  {
    "text": "copies on different nodes in memory as opposed to having copies on stable durable storage and the idea was that",
    "start": "1809739",
    "end": "1815200"
  },
  {
    "text": "most of customers preferred that trade-off however sometimes you really do want durability because you think you",
    "start": "1815200",
    "end": "1821470"
  },
  {
    "text": "might lose every note at once and so now there's a mode you can enable in 321 that actually flushes to disk correctly",
    "start": "1821470",
    "end": "1829259"
  },
  {
    "text": "the other problem we found is that clock skew can lead to lost updates inside of",
    "start": "1829259",
    "end": "1835029"
  },
  {
    "text": "error spike there's a metadata record that has like the logical clock for a record and maybe some information about",
    "start": "1835029",
    "end": "1841059"
  },
  {
    "text": "its location and that clock is comprised of three parts there's a logical regime",
    "start": "1841059",
    "end": "1846190"
  },
  {
    "text": "which is like the term and Raft it's it's incremented every time there's an election so every leader for the cluster",
    "start": "1846190",
    "end": "1851679"
  },
  {
    "text": "has its own regime and there's a node local wall clock on that leader which is",
    "start": "1851679",
    "end": "1856840"
  },
  {
    "text": "monotonically enforced and that gives you an order for each regime and then if you have to do multiple updates",
    "start": "1856840",
    "end": "1862820"
  },
  {
    "text": "inside of the same wall clock then use a counter however for performance reasons",
    "start": "1862820",
    "end": "1868669"
  },
  {
    "text": "this entire data structure must fit in a cache line plus a lot of other stuff which means that there's very few bits",
    "start": "1868669",
    "end": "1874730"
  },
  {
    "text": "available to squeeze this data structure into in fact there are only six bits available for a genes which means that",
    "start": "1874730",
    "end": "1882529"
  },
  {
    "text": "you can only do 32 elections before your your regime counter runs out now obviously most of us will do more",
    "start": "1882529",
    "end": "1889610"
  },
  {
    "text": "than 32 elections in life for clusters and so we will eventually have to reset the counter to zero and start over again",
    "start": "1889610",
    "end": "1895700"
  },
  {
    "text": "but when that happens you could compare two regimes and see that a more recent regime actually had a lower number okay",
    "start": "1895700",
    "end": "1902779"
  },
  {
    "text": "how do we how do we solve this well we know that it takes a certain number of seconds to do an election so let's say",
    "start": "1902779",
    "end": "1908750"
  },
  {
    "text": "that if you've had more than 27 seconds between these things then you know the",
    "start": "1908750",
    "end": "1914899"
  },
  {
    "text": "regime counter could have rolled over so if you see a bigger gap than 27 seconds then we'll choose by wall clock if we",
    "start": "1914899",
    "end": "1922039"
  },
  {
    "text": "see less than that which is beverage even and so long as all of our clocks queues are under 27 seconds this is okay",
    "start": "1922039",
    "end": "1928600"
  },
  {
    "text": "what happens in there over 27 seconds gets a little subtle imagine node a is a",
    "start": "1928600",
    "end": "1934730"
  },
  {
    "text": "primary for regime 1 and receives a right W 1 and immediately pauses holds",
    "start": "1934730",
    "end": "1941750"
  },
  {
    "text": "on to that red and Ram node B to text that node a is unresponsive and is elected a new primary at regime 2 and is",
    "start": "1941750",
    "end": "1948440"
  },
  {
    "text": "able to service writes so it takes right W 2 it writes the number 2 down on disk and it says I have to at regime 2 and it",
    "start": "1948440",
    "end": "1955669"
  },
  {
    "text": "is time 0 node a wakes up and says hey I've got this right right one okay cool",
    "start": "1955669",
    "end": "1962659"
  },
  {
    "text": "so it writes down one locally assumes it's still a primary because it doesn't know any better and it sends that right W 1 over to B",
    "start": "1962659",
    "end": "1970029"
  },
  {
    "text": "now B sees this right of 1 at regime 1 and says well I'm regime two so of",
    "start": "1970029",
    "end": "1975769"
  },
  {
    "text": "course I'm gonna reject this I'm a more recent primary than you are and then of course a says oh I'm sorry my bad and",
    "start": "1975769",
    "end": "1982129"
  },
  {
    "text": "forwards that on to the client but it doesn't actually delete it locally so on disk there's still this record of one at",
    "start": "1982129",
    "end": "1989330"
  },
  {
    "text": "regime 1 and time 27 because we were asleep so at some later time there",
    "start": "1989330",
    "end": "1996800"
  },
  {
    "text": "be a reconciliation process when these two nodes exchange information just routinely to heal anything that might",
    "start": "1996800",
    "end": "2003430"
  },
  {
    "text": "have diverged and they'll find out that one copy of the record was at I'm 27 the other was at time zero and they will",
    "start": "2003430",
    "end": "2009670"
  },
  {
    "text": "prefer the time 27 copy from the older regime which causes us to preserve a",
    "start": "2009670",
    "end": "2015250"
  },
  {
    "text": "failed right and delete a successful acknowledged one a bit tricky I mean",
    "start": "2015250",
    "end": "2023650"
  },
  {
    "text": "really like yeah okay really because hey this is a known fault it's documented in",
    "start": "2023650",
    "end": "2030850"
  },
  {
    "text": "the manual this is a trade off if they made for performance reasons to preserve that cache line problem and they know",
    "start": "2030850",
    "end": "2036490"
  },
  {
    "text": "that as they free up bits in the data structure they can increase the size increase clock skew tolerance and most clock skew is on the order of maybe",
    "start": "2036490",
    "end": "2044380"
  },
  {
    "text": "hundreds of milliseconds to tens of seconds only infrequently do you see clock skew of hours mmm really and so",
    "start": "2044380",
    "end": "2052600"
  },
  {
    "text": "this is mostly okay as long as you stay in these balance it actually does pass use the durable flag",
    "start": "2052600",
    "end": "2058000"
  },
  {
    "text": "you stay in clocks key balance err respect now provides linearized ability which is like a really big jump for two",
    "start": "2058000",
    "end": "2063490"
  },
  {
    "text": "years of engineering work just keep in mind if your user that cross status and replication anything that does multiple",
    "start": "2063490",
    "end": "2069399"
  },
  {
    "text": "record scans and user defined functions haven't been fully integrated into strong consistency yet that's going to",
    "start": "2069400",
    "end": "2074980"
  },
  {
    "text": "happen in future releases to recap when",
    "start": "2074980",
    "end": "2080590"
  },
  {
    "text": "you choose a database as an engineer you are essentially signing a contract even if you use an open-source database right",
    "start": "2080590",
    "end": "2086260"
  },
  {
    "text": "you're locking yourself into operational expertise client libraries a certain way of doing things and essentially we are",
    "start": "2086260",
    "end": "2093970"
  },
  {
    "text": "aerial signing a contract with a vendor Ursula the sea witch and if we don't",
    "start": "2093970",
    "end": "2099220"
  },
  {
    "text": "read the fine print of the documentation carefully we might discover that there are certain caveats to using this",
    "start": "2099220",
    "end": "2104530"
  },
  {
    "text": "particular database like if you don't kiss the prints by the third day then all of your data is forfeit so we need",
    "start": "2104530",
    "end": "2110920"
  },
  {
    "text": "to read the documentation very carefully to look for these failing or moments understand what we're really getting into and then throw away all of that",
    "start": "2110920",
    "end": "2117040"
  },
  {
    "text": "information tested yourself because oftentimes the vendors don't know either look out for words like strict",
    "start": "2117040",
    "end": "2122710"
  },
  {
    "text": "consistency acid strong consistency if this is the only description you see on",
    "start": "2122710",
    "end": "2127810"
  },
  {
    "text": "a product page it's a hint that the people who designed it know what those words mean you want to look for a really formal specific",
    "start": "2127810",
    "end": "2134180"
  },
  {
    "text": "guarantee like acid could mean read uncommitted that's a level in ANSI SQL but it's not a very useful one",
    "start": "2134180",
    "end": "2139880"
  },
  {
    "text": "it could mean serializable it could be in strict serializable so try to figure out exactly what the temporal and",
    "start": "2139880",
    "end": "2145279"
  },
  {
    "text": "logical guarantees are around system I want to encourage both users and engineers who are building the systems",
    "start": "2145279",
    "end": "2151759"
  },
  {
    "text": "to become a little more formal becomes a little more familiar with these definitions so that we can specify",
    "start": "2151759",
    "end": "2157039"
  },
  {
    "text": "exactly what kind of guarantees we need and provide and then figure out the invariance you actually need because not",
    "start": "2157039",
    "end": "2163130"
  },
  {
    "text": "every work load requires 100% safety not everybody needs to prevent steal reads",
    "start": "2163130",
    "end": "2168529"
  },
  {
    "text": "not everybody needs to preserve all data there are plenty of applications we're losing 10% of your rice is perfectly acceptable and in fact desirable in the",
    "start": "2168529",
    "end": "2175940"
  },
  {
    "text": "name of efficiency finally consider your failure modes because it's not enough to",
    "start": "2175940",
    "end": "2181789"
  },
  {
    "text": "test these systems only in the happy case so try process crashes run kill - 9",
    "start": "2181789",
    "end": "2187190"
  },
  {
    "text": "during your test try introducing node failure by using your your cloud provider or going and flipping power",
    "start": "2187190",
    "end": "2193190"
  },
  {
    "text": "switches you can also try clock skew with either date or with an LD preload",
    "start": "2193190",
    "end": "2200180"
  },
  {
    "text": "shim called them fake time that lies about the clock to the underlying process you can do garbage collection io",
    "start": "2200180",
    "end": "2209059"
  },
  {
    "text": "pauses with sig stop as acid continue it turns out the garbage collection or i/o stall tend to look a lot like a",
    "start": "2209059",
    "end": "2214880"
  },
  {
    "text": "networked petition because the process stops responding for a long time and it could trigger an election and that process comes back thinking it's still a",
    "start": "2214880",
    "end": "2222380"
  },
  {
    "text": "leader but maybe the past state we can also introduce Network partitions which",
    "start": "2222380",
    "end": "2229069"
  },
  {
    "text": "I think are the most interesting failure mode this occurs it's most useful",
    "start": "2229069",
    "end": "2234739"
  },
  {
    "text": "because when you have a partition the time scales involved are long right so in concurrent systems you're often",
    "start": "2234739",
    "end": "2240739"
  },
  {
    "text": "looking for race conditions and your window of time is very short but with an L partition the message delay times are",
    "start": "2240739",
    "end": "2246739"
  },
  {
    "text": "measured in seconds two minutes and that's plenty of time for you to reach in there and observe some sort of race occurring so try IP tables with - J drop",
    "start": "2246739",
    "end": "2254479"
  },
  {
    "text": "drop all packets from a node from a client tried t see four systems that",
    "start": "2254479",
    "end": "2259549"
  },
  {
    "text": "aren't based on TCP you can introduce probabilistic drops and delays in packets ultimately I want to test",
    "start": "2259549",
    "end": "2266419"
  },
  {
    "text": "systems end-to-end don't just look at the individual systems don't think about the database by itself but also about",
    "start": "2266419",
    "end": "2272630"
  },
  {
    "text": "the composition of the database and it's caching service and the API wrote on top of it does the user registration service",
    "start": "2272630",
    "end": "2279619"
  },
  {
    "text": "guarantee that you can only register one username once or can you give it out to",
    "start": "2279619",
    "end": "2284630"
  },
  {
    "text": "multiple people that's an invariant that we care about and as Tolstoy reminds us",
    "start": "2284630",
    "end": "2290419"
  },
  {
    "text": "if you look for perfection you'll never be content at some point we have to accept that testing these systems",
    "start": "2290419",
    "end": "2296209"
  },
  {
    "text": "exhaustively is going to be a boiling the ocean problem we have to accept some degree of failure but doing a little bit",
    "start": "2296209",
    "end": "2303409"
  },
  {
    "text": "of testing a little bit of QA upfront can dramatically improve things so I want to advocate for property based",
    "start": "2303409",
    "end": "2309229"
  },
  {
    "text": "testing look for the high level invariance to your system needs generate randomized inputs and then verify the",
    "start": "2309229",
    "end": "2315380"
  },
  {
    "text": "system satisfies those invariants with distributed systems failure modes this",
    "start": "2315380",
    "end": "2321409"
  },
  {
    "text": "would not have been possible without the financial assistance of tender mint the assistance of people at hazel cast",
    "start": "2321409",
    "end": "2326419"
  },
  {
    "text": "including users like Jordan Altman Luigi del Aguila Luca guru Li and Dennis",
    "start": "2326419",
    "end": "2331429"
  },
  {
    "text": "Socorro Slav aerospike funded the research on their database and Peter Alvaro has been my tireless research",
    "start": "2331429",
    "end": "2336769"
  },
  {
    "text": "advisor from UC Santa Cruz thank you to Bridgette and everybody go-to for inviting me and thanks for your time if",
    "start": "2336769",
    "end": "2343429"
  },
  {
    "text": "you want to learn more about this research you can go to Jepsen IO where there's comprehensive write-ups and links to the source and I will be happy",
    "start": "2343429",
    "end": "2349789"
  },
  {
    "text": "to take a couple questions",
    "start": "2349789",
    "end": "2352449"
  },
  {
    "text": "wonderful talk Kyle and I imagine a few people may have a few questions or",
    "start": "2358730",
    "end": "2363810"
  },
  {
    "text": "they've all just had their minds blown or saying I have so much to do now but",
    "start": "2363810",
    "end": "2369170"
  },
  {
    "text": "curious if I have people who have questions everyone is like I have so",
    "start": "2369170",
    "end": "2375660"
  },
  {
    "text": "much I need to do now um I actually do have a quick question to start with which is you showed us a lot of things",
    "start": "2375660",
    "end": "2382980"
  },
  {
    "text": "that are kind of terrifying and then you mentioned that people need to kind of figure out where the right constraints",
    "start": "2382980",
    "end": "2390839"
  },
  {
    "text": "are for them where the right how much terrifying data loss is okay for them how would you advise people",
    "start": "2390839",
    "end": "2396599"
  },
  {
    "text": "even start to figure out what the answer to that is for them I feel like figuring",
    "start": "2396599",
    "end": "2402900"
  },
  {
    "text": "out how much data loss is okay is sort of an unsolved problem and we still don't know in distributed systems",
    "start": "2402900",
    "end": "2409140"
  },
  {
    "text": "research can we guarantee safety with weaker isolation levels like is your workload okay on read committed or do",
    "start": "2409140",
    "end": "2415770"
  },
  {
    "text": "you need serializable that's an open problem there's some work in specification languages towards that but we really don't know and moreover it's",
    "start": "2415770",
    "end": "2422490"
  },
  {
    "text": "also a probabilistic problem right so you need to develop a model of how often your notes fail how often network petitions occur what",
    "start": "2422490",
    "end": "2429270"
  },
  {
    "text": "your clocks cues are and these things require both observation and Cystic modeling tools people do do this I know",
    "start": "2429270",
    "end": "2435630"
  },
  {
    "text": "I know at least one group in an ad tech that does rigorous modeling of the failures and I have a hunch the number",
    "start": "2435630",
    "end": "2442170"
  },
  {
    "text": "of banks do it too but I don't think it's like an industry-wide standard yet interesting so an area for future work",
    "start": "2442170",
    "end": "2451430"
  },
  {
    "text": "so what's next can you give us a preview of anything that you're working on or like coming",
    "start": "2451430",
    "end": "2457020"
  },
  {
    "text": "out with can you give us a preview of anything that you're working on right now it's coming up what is what is next",
    "start": "2457020",
    "end": "2462750"
  },
  {
    "text": "what am i working on right now I am churning out analyses as fast as I can possibly go and I'm also working on a",
    "start": "2462750",
    "end": "2469260"
  },
  {
    "text": "couple research projects one of them is I have a generalized checker for linearize ability I can tell you is any",
    "start": "2469260",
    "end": "2475589"
  },
  {
    "text": "data structure that you like to specify supported by this underlying system you",
    "start": "2475589",
    "end": "2481920"
  },
  {
    "text": "can write a cue you could write a key value store you could write an SQL table whatever you like and I can check it for you arbitrate transactions what I can't do",
    "start": "2481920",
    "end": "2489060"
  },
  {
    "text": "is that for serializability and I can't do it for snapshot isolation so I'm trying to devise checkers that",
    "start": "2489060",
    "end": "2494910"
  },
  {
    "text": "will efficiently verify these properties on weaker isolation levels and the state space is exponential for the easy",
    "start": "2494910",
    "end": "2503310"
  },
  {
    "text": "problem and it's even more exponential for these other problems so I'm still trying to work my way up to that that is",
    "start": "2503310",
    "end": "2510660"
  },
  {
    "text": "awesome okay we're just about out of time but it.we first let's give another round of",
    "start": "2510660",
    "end": "2518130"
  },
  {
    "text": "applause to our wonderful talk tile Kingsbury",
    "start": "2518130",
    "end": "2523280"
  }
]