[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "[Music] so welcome to this talk about Java 9 I",
    "start": "6990",
    "end": "14840"
  },
  {
    "text": "tried to figure out what would be most interesting to most Java programmers",
    "start": "14840",
    "end": "20760"
  },
  {
    "start": "15000",
    "end": "157000"
  },
  {
    "text": "Java 9 as such has been released in September so it's a couple of weeks old so to speak I don't know how many people",
    "start": "20760",
    "end": "26910"
  },
  {
    "text": "have already a serious intention to move on to Java 9 it's probably interesting",
    "start": "26910",
    "end": "33000"
  },
  {
    "text": "to learn a little bit about the module system because I think that's it that's the feature of Java 9 that will hit most",
    "start": "33000",
    "end": "39479"
  },
  {
    "text": "people when they try to migrate to Java 9 but I do not want to talk only about the Java module system yeah there's a",
    "start": "39479",
    "end": "46500"
  },
  {
    "text": "list of topics that I picked there are some optimizations regarding the use of",
    "start": "46500",
    "end": "52350"
  },
  {
    "text": "strings there are a couple of changes very minor changes I will just briefly",
    "start": "52350",
    "end": "59369"
  },
  {
    "text": "mention them there is something about collection literals which I will show you which might come handy but it's a",
    "start": "59369",
    "end": "65430"
  },
  {
    "text": "very tiny feature because this is the big feature of Java 9 and then I will if",
    "start": "65430",
    "end": "73140"
  },
  {
    "text": "time allows I will dig a little deeper regarding things that you might not have",
    "start": "73140",
    "end": "79350"
  },
  {
    "text": "been using so far some applications some frameworks and libraries use packages",
    "start": "79350",
    "end": "86159"
  },
  {
    "text": "Java / JDK internal packages which now that the JDK is modularized are no",
    "start": "86159",
    "end": "93060"
  },
  {
    "text": "longer available and that will probably create some trouble and there are Java",
    "start": "93060",
    "end": "98429"
  },
  {
    "text": "extension proposals and efforts on the way to come up with replacements for",
    "start": "98429",
    "end": "103710"
  },
  {
    "text": "these internal packages but these are things that have been made available in Java 9 in part but the major part is",
    "start": "103710",
    "end": "110999"
  },
  {
    "text": "still on the way and will come in one of the future versions of Java like Java 1011 perhaps 12 we don't know there are",
    "start": "110999",
    "end": "117749"
  },
  {
    "text": "many many more features which I will not mention actually have too many slides so don't be disappointed if I skip a couple",
    "start": "117749",
    "end": "123329"
  },
  {
    "text": "of them you will have the full deck of slides when you download them ok regarding me I'm working as so I used to",
    "start": "123329",
    "end": "130500"
  },
  {
    "text": "work as a developer as well developing in C++ and Java and then I started doing training for a living for almost 20",
    "start": "130500",
    "end": "137220"
  },
  {
    "text": "years meanwhile and so each time there is a new Java version I take a look into what might be interesting and what knowledge",
    "start": "137220",
    "end": "143660"
  },
  {
    "text": "needs to be spread in order to handle the new and next version so I looked into the Java generics with Java 5 or",
    "start": "143660",
    "end": "150110"
  },
  {
    "text": "looked into lambdas and stream throughs Java 8 and actually I looked into Java 9 ok so let's start with the collection",
    "start": "150110",
    "end": "157100"
  },
  {
    "start": "157000",
    "end": "244000"
  },
  {
    "text": "literacy does anybody remember Java 7 it for Java 7 Sun Microsystems at that time",
    "start": "157100",
    "end": "164840"
  },
  {
    "text": "asked the Java community watch mine our language proposals of features or",
    "start": "164840",
    "end": "170020"
  },
  {
    "text": "convenience they would like to have and one of the proposals that was raised by",
    "start": "170020",
    "end": "175700"
  },
  {
    "text": "the java communities they wanted a convenient syntax for creating small immutable collections and they didn't",
    "start": "175700",
    "end": "182090"
  },
  {
    "text": "solve that problem for Java 7 they came up with a solution for Java 9 now so",
    "start": "182090",
    "end": "187220"
  },
  {
    "text": "what was discussed for Java 7 is the syntax that I've been showing there this syntax will not exist they didn't solve",
    "start": "187220",
    "end": "193940"
  },
  {
    "text": "the problem in Java 9 extending the language and creating new syntax instead they gave us a library based solution so",
    "start": "193940",
    "end": "203420"
  },
  {
    "text": "what we will have is off functions in various interfaces in the java.util",
    "start": "203420",
    "end": "210200"
  },
  {
    "text": "package so nowadays with Java 9 you can create a list off and then just enumerate the couple of elements that",
    "start": "210200",
    "end": "217550"
  },
  {
    "text": "you want to see in that immutable list of a few elements and this is in line with other 50 features we already had",
    "start": "217550",
    "end": "225200"
  },
  {
    "text": "the collections interface already at something like I want to create an empty list I want to create a list of one",
    "start": "225200",
    "end": "231410"
  },
  {
    "text": "element a singleton list and now you can say list of something set of something and all these collections are immutable",
    "start": "231410",
    "end": "238280"
  },
  {
    "text": "collections with the number of elements that you listed in this Factory function named off ok then there are a couple of",
    "start": "238280",
    "end": "246170"
  },
  {
    "start": "244000",
    "end": "431000"
  },
  {
    "text": "further minor language features I doubt that anybody of you actually missed them one of them is you might remember that",
    "start": "246170",
    "end": "253489"
  },
  {
    "text": "with Java 8 interface methods were invented so static and default methods",
    "start": "253489",
    "end": "259880"
  },
  {
    "text": "in interfaces that do have an implementation and since everything in an interface is public all these default",
    "start": "259880",
    "end": "267350"
  },
  {
    "text": "and static methods also had to be public and some people express the wish that they wanted to have private",
    "start": "267350",
    "end": "273090"
  },
  {
    "text": "two-faced methods just as helper methods for these public interface methods and this this is allowed no in Java eat",
    "start": "273090",
    "end": "279480"
  },
  {
    "text": "ramen I wasn't allowed in Java eat then we have a diamond operator with",
    "start": "279480",
    "end": "284490"
  },
  {
    "text": "anonymous classes the diamond operator was added in con remember Java 7 I think",
    "start": "284490",
    "end": "289860"
  },
  {
    "text": "six or seven the diamond operator is convenience if you create objects of a",
    "start": "289860",
    "end": "297139"
  },
  {
    "text": "generic type like a thread local of list of pair of something then you have a",
    "start": "297139",
    "end": "302280"
  },
  {
    "text": "very long type name when you create a variable of this type you have to specify the name of the type very long",
    "start": "302280",
    "end": "308280"
  },
  {
    "text": "typing then you have a variable name and then typically you want to initialize it by creating a new object of that type",
    "start": "308280",
    "end": "314370"
  },
  {
    "text": "and so when you say new object you have to repeat the entire type name and so",
    "start": "314370",
    "end": "320100"
  },
  {
    "text": "they came up with a diamond operator just saying okay the compiler can take a look at the left-hand side of my assignment and",
    "start": "320100",
    "end": "326220"
  },
  {
    "text": "figure out what the type actually is so that I do not have to type everything so with Java 7 you could already say I want",
    "start": "326220",
    "end": "334440"
  },
  {
    "text": "to have a thread local of empty angle brackets and the compiler could figure out the rest of the type and this wasn't",
    "start": "334440",
    "end": "340470"
  },
  {
    "text": "available for creating anonymous classes and now with Java 9 we can also use the",
    "start": "340470",
    "end": "345600"
  },
  {
    "text": "diamond operator when we create anonymous class subclasses of some kind",
    "start": "345600",
    "end": "350700"
  },
  {
    "text": "of parameterize generic type then they change the try both resources so far",
    "start": "350700",
    "end": "357539"
  },
  {
    "text": "with try with resources you had to create the variable and the object in in",
    "start": "357539",
    "end": "363690"
  },
  {
    "text": "front of the try block and nowadays with Java 9 you can use a final variable",
    "start": "363690",
    "end": "370139"
  },
  {
    "text": "instead so that you can create an object that has already been created before you enter the try block order that had or",
    "start": "370139",
    "end": "376710"
  },
  {
    "text": "that has been passed on to a to a function as a final argument to the",
    "start": "376710",
    "end": "382380"
  },
  {
    "text": "function and then you could use that in the try block that wasn't possible before Java night has anybody used the",
    "start": "382380",
    "end": "388380"
  },
  {
    "text": "safe Vioxx a notation ever oh one let's",
    "start": "388380",
    "end": "393389"
  },
  {
    "text": "keep it I mean it's a it's a complicated thing regarding the combination of variable argument lists with parameter",
    "start": "393389",
    "end": "399360"
  },
  {
    "text": "is types and safe words has to do with that it's now available on private instance methods to",
    "start": "399360",
    "end": "406010"
  },
  {
    "text": "and another thing the underscore is now an illegal identifier it was legal before Java 9 now it's illegal because",
    "start": "406010",
    "end": "413210"
  },
  {
    "text": "they want to use it in conjunction with lambda expressions in some future version of Java okay these are the only",
    "start": "413210",
    "end": "419270"
  },
  {
    "text": "language changes you see minor stuff not really exciting what might be more",
    "start": "419270",
    "end": "425390"
  },
  {
    "text": "interesting is optimizations regarding the memory consumption and the",
    "start": "425390",
    "end": "431300"
  },
  {
    "start": "431000",
    "end": "459000"
  },
  {
    "text": "performance of strings one thing they already added in Java 8 update 20 is the",
    "start": "431300",
    "end": "438980"
  },
  {
    "text": "string deduplication what they did is they change or they built into the",
    "start": "438980",
    "end": "444860"
  },
  {
    "text": "garbage first collector a feature that the garbage first collector knows how to when it",
    "start": "444860",
    "end": "451610"
  },
  {
    "text": "sees duplicate strings then it D duplicates the strings puts the strings into an cash and then thereby tries to",
    "start": "451610",
    "end": "460640"
  },
  {
    "start": "459000",
    "end": "591000"
  },
  {
    "text": "reduce the memory consumption of strings so the observation was that in a regular",
    "start": "460640",
    "end": "467030"
  },
  {
    "text": "Java application whatever that might be roughly a quarter of the heap memory is",
    "start": "467030",
    "end": "472130"
  },
  {
    "text": "occupied by strings and the idea is we want to reduce that memory consumption in order to speed up the garbage",
    "start": "472130",
    "end": "480500"
  },
  {
    "text": "collection basically to use the space more economically and one effort was",
    "start": "480500",
    "end": "486890"
  },
  {
    "text": "changing the garbage first garbage collector what it actually does is during its marketing phase when it does",
    "start": "486890",
    "end": "494210"
  },
  {
    "text": "a garbage collection it needs to identify all the reachable objects and thereby it marks and visits all the",
    "start": "494210",
    "end": "500810"
  },
  {
    "text": "reachable objects and among them of course all strings and each string has an array attached and since drinks are",
    "start": "500810",
    "end": "508100"
  },
  {
    "text": "immutable objects the array never changes so the the content of the string never changes and they take advantage of",
    "start": "508100",
    "end": "514370"
  },
  {
    "text": "this fact if they find an array attached to a string what the garbage first a garbage collector does it puts it into a",
    "start": "514370",
    "end": "521240"
  },
  {
    "text": "cache and the next time it finds another array it looks up whether it has already the same array with the same content in",
    "start": "521240",
    "end": "528230"
  },
  {
    "text": "the cache and then it changes the second string object in order to use the same",
    "start": "528230",
    "end": "533690"
  },
  {
    "text": "cache array so strictly speaking it's not string deduplication but it's duplication of a race attached to",
    "start": "533690",
    "end": "541020"
  },
  {
    "text": "strings and this is a feature which you can switch on/off it says there's a JVM",
    "start": "541020",
    "end": "546960"
  },
  {
    "text": "startup option and if you have a lot of duplicates you might see some benefit a",
    "start": "546960",
    "end": "553830"
  },
  {
    "text": "reduction in memory consumption if of course you hardly have any string deduplication or duplicates the",
    "start": "553830",
    "end": "560670"
  },
  {
    "text": "deduplication would only cost you so you have to really if you try it out you have to take a look at the consumption",
    "start": "560670",
    "end": "566520"
  },
  {
    "text": "otherwise you would just pay for the cache and the cache look up and it wouldn't do any any good so it's an",
    "start": "566520",
    "end": "572010"
  },
  {
    "text": "option which you can switch on if you use the garbage first collector which by the way is the default garbage collector",
    "start": "572010",
    "end": "578610"
  },
  {
    "text": "in Java 9 yeah so if you do not specify which garbage collection algorithm you",
    "start": "578610",
    "end": "583920"
  },
  {
    "text": "use when you start your JVM you will nowadays in Java 9 have the garbage first collector as the default collector",
    "start": "583920",
    "end": "591290"
  },
  {
    "start": "591000",
    "end": "671000"
  },
  {
    "text": "ok then string compaction is something that we really added in Java 9 the",
    "start": "591290",
    "end": "597890"
  },
  {
    "text": "observation is that 90% of all strings are encoded or use and codings that can",
    "start": "597890",
    "end": "605190"
  },
  {
    "text": "be represented by just one byte and there's only a minor portion that really",
    "start": "605190",
    "end": "610440"
  },
  {
    "text": "has multipied encodings and really needs a character which in Java is 2 bytes long so most of the time half of the",
    "start": "610440",
    "end": "617220"
  },
  {
    "text": "space that the heap space that is occupied by strings goes unused because",
    "start": "617220",
    "end": "622470"
  },
  {
    "text": "we don't need half of the character and so what they do nowadays is they do a string compaction in the change that",
    "start": "622470",
    "end": "629220"
  },
  {
    "text": "whenever you create a string they take a look at the string content and nowadays",
    "start": "629220",
    "end": "634230"
  },
  {
    "text": "the string is represented by a byte array instead of a character array and a",
    "start": "634230",
    "end": "639600"
  },
  {
    "text": "flag that says is this a one byte encoding or do we really need characters",
    "start": "639600",
    "end": "645240"
  },
  {
    "text": "a 2 byte encoding and so whenever it is possible and feasible they just reduce",
    "start": "645240",
    "end": "650579"
  },
  {
    "text": "it to a byte array plus an encoding flag and if the encoding says ok it must be",
    "start": "650579",
    "end": "656610"
  },
  {
    "text": "multi-part I really need the character the two bytes per character then they interpret the byte array as well two",
    "start": "656610",
    "end": "662910"
  },
  {
    "text": "bytes at a time they interpret this as a character array so they do this I think",
    "start": "662910",
    "end": "668279"
  },
  {
    "text": "it's the default you do not have to switch it on ok then something that affects the internal",
    "start": "668279",
    "end": "676149"
  },
  {
    "start": "671000",
    "end": "991000"
  },
  {
    "text": "handling of string concatenation so far you probably know that string",
    "start": "676149",
    "end": "682810"
  },
  {
    "text": "concatenation using the string plus operator is a fairly expensive thing because for each concatenation Java has",
    "start": "682810",
    "end": "690610"
  },
  {
    "text": "to create a new string because the string objects are immutable so you create if you do a concatenation of",
    "start": "690610",
    "end": "695950"
  },
  {
    "text": "strings hello plus word plus something else you create a lot of temporary strings that a lot of copying goes on okay so they",
    "start": "695950",
    "end": "702930"
  },
  {
    "text": "optimize this in Java five anything and the Java see the static Java C compiler",
    "start": "702930",
    "end": "708850"
  },
  {
    "text": "learned to replace string concatenation sequences by using a string builder and",
    "start": "708850",
    "end": "714940"
  },
  {
    "text": "string builder append and a two string operation in the end so this is one",
    "start": "714940",
    "end": "720550"
  },
  {
    "text": "thing it's not optimal in all cases because it starts with with a fairly short string even if we know that the",
    "start": "720550",
    "end": "728110"
  },
  {
    "text": "string concatenation would lead to a large string there is no optimization like using a pre calculated capacity for",
    "start": "728110",
    "end": "736630"
  },
  {
    "text": "the string so it builds up the capacity over time which is inefficient I mean we could do better and then there is a",
    "start": "736630",
    "end": "742810"
  },
  {
    "text": "second construction side that also takes care of optimizing string concatenation and that is inside the just-in-time the",
    "start": "742810",
    "end": "750399"
  },
  {
    "text": "hotspot compiler and the outputs hotspot compiler if you if you specify this optimized string Concord of team ization",
    "start": "750399",
    "end": "757120"
  },
  {
    "text": "also tries to do aggressive optimizations mmm aggressive is already telling you it's",
    "start": "757120",
    "end": "763300"
  },
  {
    "text": "kind of a fragile difficult optimization and so they have basically two",
    "start": "763300",
    "end": "768550"
  },
  {
    "text": "construction sites the java c compiler that tries to optimize string concatenation and the hotspot compiler",
    "start": "768550",
    "end": "774399"
  },
  {
    "text": "and they try to simplify it and what they do nowadays in java 9 is when there",
    "start": "774399",
    "end": "781000"
  },
  {
    "text": "is a string concatenation sequence the java c compiler doesn't do any optimizations anymore instead it emits",
    "start": "781000",
    "end": "788620"
  },
  {
    "text": "an invoke dynamic byte code invokedynamic is one of the byte codes invokedynamic has been available since",
    "start": "788620",
    "end": "795910"
  },
  {
    "text": "Java 7 and it was initially added not for use by Java but it was a byte code",
    "start": "795910",
    "end": "803110"
  },
  {
    "text": "that had been added to support other languages that run on top of the JVM and that had difficulties",
    "start": "803110",
    "end": "810310"
  },
  {
    "text": "with invoke static invoke virtual and invoke special the three byte codes that were designed for invoking Java methods",
    "start": "810310",
    "end": "817570"
  },
  {
    "text": "because other languages have different ideas of how to look up methods and how to invoke them about the calling sequences and so they needed something",
    "start": "817570",
    "end": "823959"
  },
  {
    "text": "that is more flexible and then they added invoke dynamic and the key point of invoke dynamic is whoever emits this",
    "start": "823959",
    "end": "830829"
  },
  {
    "text": "bytecode also has to provide what is called a meta Factory which is basically a description of what invokedynamic is",
    "start": "830829",
    "end": "836829"
  },
  {
    "text": "supposed to do at runtime and this is very flexible and they use it here in order to add a matter of factory that",
    "start": "836829",
    "end": "843699"
  },
  {
    "text": "says ok we need to do string concatenation at this place and then internally the JVM when it runs at",
    "start": "843699",
    "end": "850240"
  },
  {
    "text": "runtime can figure out what to do based on the meta Factory and it can apply any type of optimization so nowadays with",
    "start": "850240",
    "end": "857139"
  },
  {
    "text": "this reorganisation of string concatenation they have one place where",
    "start": "857139",
    "end": "862420"
  },
  {
    "text": "they can do all the optimizations it's done at runtime and it's entirely internal so you wouldn't notice any of",
    "start": "862420",
    "end": "868630"
  },
  {
    "text": "this it's just a change that makes it easier to maintain and evolve the JVM",
    "start": "868630",
    "end": "874260"
  },
  {
    "text": "another thing related to strings is well we have this class data sharing feature",
    "start": "874260",
    "end": "880329"
  },
  {
    "text": "for some time can't remember how long but they did they try to reduce startup",
    "start": "880329",
    "end": "885730"
  },
  {
    "text": "time and and footprint of JVM long ago by creating so-called shared archives",
    "start": "885730",
    "end": "892329"
  },
  {
    "text": "when they deploy the JDK they create a shared archives and these shared archives typically contain classes class",
    "start": "892329",
    "end": "900310"
  },
  {
    "text": "files basically already prepared loaded classes that at startup of the JVM are",
    "start": "900310",
    "end": "906970"
  },
  {
    "text": "simply mapped into memory and the idea was it saves the time for actual class",
    "start": "906970",
    "end": "912370"
  },
  {
    "text": "loading if we prepare things like object and throwable all the stuff that every application already needs and these",
    "start": "912370",
    "end": "919089"
  },
  {
    "text": "shared data archives have been around for for quite a time and they are an",
    "start": "919089",
    "end": "924220"
  },
  {
    "text": "effort for speeding up startup and now they use these shared data archives also",
    "start": "924220",
    "end": "930850"
  },
  {
    "text": "to to place all the intern strings into the same share that archive so that they",
    "start": "930850",
    "end": "938050"
  },
  {
    "text": "need need not be created at runtime at startup time the intern strings are",
    "start": "938050",
    "end": "943360"
  },
  {
    "text": "those strings when the Java C compiler compiles your your source code for a class and inside the source code it",
    "start": "943360",
    "end": "949900"
  },
  {
    "text": "finds string literals some some kind of string literals that you have physically in your source code they are placed in -",
    "start": "949900",
    "end": "956880"
  },
  {
    "text": "they are placed into such as shared archive nowadays they were usually attached as a constant pool of so-called",
    "start": "956880",
    "end": "965140"
  },
  {
    "text": "constant pool to the class objects and now they are put into these shared",
    "start": "965140",
    "end": "970990"
  },
  {
    "text": "archives along with the precompiled classes so that would speed up startup",
    "start": "970990",
    "end": "976840"
  },
  {
    "text": "time they supported only for 46 bit platforms which is probably the norm",
    "start": "976840",
    "end": "982110"
  },
  {
    "text": "okay now we dive into the entirely different topic the module system the",
    "start": "982110",
    "end": "989380"
  },
  {
    "text": "big feature of Java 9 module system consists of quite a number of Java",
    "start": "989380",
    "end": "995560"
  },
  {
    "start": "991000",
    "end": "1086000"
  },
  {
    "text": "extension proposals the first thing that they did is what they modularized the jdk itself so the jdk nowadays doesn't",
    "start": "995560",
    "end": "1004290"
  },
  {
    "text": "come as RT dot jar one jar file anymore but it comes as a bunch of modules that",
    "start": "1004290",
    "end": "1010110"
  },
  {
    "text": "is one thing and then they tried to over time they try to make available the module system to the Java community so",
    "start": "1010110",
    "end": "1018360"
  },
  {
    "text": "that you and your applications and libraries that you build also can use modules to express kind of import-export",
    "start": "1018360",
    "end": "1025910"
  },
  {
    "text": "relationships between these logical entities that are called modules so the",
    "start": "1025910",
    "end": "1031920"
  },
  {
    "text": "first thing is the deployment is different you will not see RT Doge our two tools jar you will see a directory",
    "start": "1031920",
    "end": "1039360"
  },
  {
    "text": "called mods I think and then you have lots of J mod module files yeah and it's",
    "start": "1039360",
    "end": "1045930"
  },
  {
    "text": "an entirely different organization ok it also means that the idea is you and all",
    "start": "1045930",
    "end": "1054120"
  },
  {
    "text": "the library and framework providers that you rely upon should over time",
    "start": "1054120",
    "end": "1060350"
  },
  {
    "text": "reorganize and re-engineer their applications and their tools in order to modernize themselves and their their",
    "start": "1060350",
    "end": "1068790"
  },
  {
    "text": "their applications and Java 9 is just the start of a",
    "start": "1068790",
    "end": "1073960"
  },
  {
    "text": "transition phase so ideally after a while we don't know how long this will take everything should be expressed as",
    "start": "1073960",
    "end": "1080800"
  },
  {
    "text": "Java modules whether this will happen we will see yeah I will be probably a very",
    "start": "1080800",
    "end": "1087460"
  },
  {
    "start": "1086000",
    "end": "1174000"
  },
  {
    "text": "long transition phase so what is a module a module is a logical entity that",
    "start": "1087460",
    "end": "1092950"
  },
  {
    "text": "contains classes native code properties basically what we put into a jar now",
    "start": "1092950",
    "end": "1098050"
  },
  {
    "text": "nowadays but a jar file nowadays is just a container it doesn't have any",
    "start": "1098050",
    "end": "1103240"
  },
  {
    "text": "semantics attached and a module is different with a module you can describe which other modules module one needs",
    "start": "1103240",
    "end": "1111730"
  },
  {
    "text": "that's the so-called readability property which you have to describe and",
    "start": "1111730",
    "end": "1117010"
  },
  {
    "text": "also you can describe which packages a module makes accessible to other modules",
    "start": "1117010",
    "end": "1122980"
  },
  {
    "text": "so you have an readability and an accessibility description attached to a",
    "start": "1122980",
    "end": "1128860"
  },
  {
    "text": "jar file and such a modular jar file is then a module in terms of the Java",
    "start": "1128860",
    "end": "1134920"
  },
  {
    "text": "platform system ok so the idea of the module system then is once we have these",
    "start": "1134920",
    "end": "1140680"
  },
  {
    "text": "readability and accessibility descriptions the Java C compiler the runtime system and also everything",
    "start": "1140680",
    "end": "1147670"
  },
  {
    "text": "that's done with reflection tries to check whether these readability and",
    "start": "1147670",
    "end": "1152680"
  },
  {
    "text": "accessibility relationships match so everything that is needed in terms of",
    "start": "1152680",
    "end": "1159640"
  },
  {
    "text": "readability there's some module that needs to read another module all these mud modules must be available at runtime",
    "start": "1159640",
    "end": "1167410"
  },
  {
    "text": "at compile time for reflection it's all checked ok so why did they do this I",
    "start": "1167410",
    "end": "1173410"
  },
  {
    "text": "will say very there are heated debates and they took a couple of years until they came up with a module system for",
    "start": "1173410",
    "end": "1178900"
  },
  {
    "start": "1174000",
    "end": "1330000"
  },
  {
    "text": "Java 9 one of the problems they try to solve is well the protection scheme that",
    "start": "1178900",
    "end": "1185380"
  },
  {
    "text": "we had so far is insufficient so far you could qualify types as public package",
    "start": "1185380",
    "end": "1195100"
  },
  {
    "text": "visible protected private so there was a protection scheme but there's a problem",
    "start": "1195100",
    "end": "1201670"
  },
  {
    "text": "I mean you can work around it example is if you think of the early",
    "start": "1201670",
    "end": "1206800"
  },
  {
    "text": "times when they built the JDK Sun came up with Sun dot something packages and",
    "start": "1206800",
    "end": "1213040"
  },
  {
    "text": "every class and every type in these Sun packages was supposed to be private in",
    "start": "1213040",
    "end": "1218650"
  },
  {
    "text": "the sense that it's only available for other JDK utilities or other JDK classes",
    "start": "1218650",
    "end": "1224140"
  },
  {
    "text": "they were supposed to use these Suns specific classes but they were never meant to be available for public use for",
    "start": "1224140",
    "end": "1231070"
  },
  {
    "text": "everybody so they are actually kind of private JDK internal packages now the",
    "start": "1231070",
    "end": "1237250"
  },
  {
    "text": "problem is what if you want to build some JDK class that uses Sun Micheline",
    "start": "1237250",
    "end": "1243220"
  },
  {
    "text": "or something one of the classes that is widespread used a lot is the Sun which Elena sensei",
    "start": "1243220",
    "end": "1248320"
  },
  {
    "text": "so many of the JDK classes use Sun miscellaneous unsafe what could you do",
    "start": "1248320",
    "end": "1253540"
  },
  {
    "text": "to protect the unsafe class from widespread use you could make it package",
    "start": "1253540",
    "end": "1258790"
  },
  {
    "text": "visible but that requires that every other JDK class that needs some miscellaneous unsafe must reside in the",
    "start": "1258790",
    "end": "1265540"
  },
  {
    "text": "same package so basically you would end up with one huge package and that is",
    "start": "1265540",
    "end": "1270940"
  },
  {
    "text": "quite obviously not a reasonable package design so they split up the JDK into various packages and for this to work",
    "start": "1270940",
    "end": "1279190"
  },
  {
    "text": "they had to make some miscellaneous unsafe a public class then they came up with other protection schemes like",
    "start": "1279190",
    "end": "1285790"
  },
  {
    "text": "accessibility checks and so on and so forth in order to somehow make it or take it away from public use but you can",
    "start": "1285790",
    "end": "1292480"
  },
  {
    "text": "work around all this so nowadays some miscellaneous unsafe as a prominent example is used in many frameworks in",
    "start": "1292480",
    "end": "1298930"
  },
  {
    "text": "many libraries it is basically it's public so there was no really safe way",
    "start": "1298930",
    "end": "1306070"
  },
  {
    "text": "of protecting internals from being publicly available and that is one of the problems they try to solve with the",
    "start": "1306070",
    "end": "1312880"
  },
  {
    "text": "module system and they actually did solve it so something like some miscellaneous unsafe now resides in a",
    "start": "1312880",
    "end": "1318520"
  },
  {
    "text": "package called JDK internal and it is internal now it's not a not readily available for anybody anymore which",
    "start": "1318520",
    "end": "1325360"
  },
  {
    "text": "might create trouble of course because so many frameworks use it nowadays okay another problem that people had",
    "start": "1325360",
    "end": "1333640"
  },
  {
    "start": "1330000",
    "end": "1557000"
  },
  {
    "text": "hoped the module system would solve is a form of jar what if you have a very large",
    "start": "1333640",
    "end": "1340640"
  },
  {
    "text": "application and one component of your application uses a certain library let's",
    "start": "1340640",
    "end": "1346380"
  },
  {
    "text": "say the guava library for instance in version 1 and you have another component that needs the same library in another",
    "start": "1346380",
    "end": "1352620"
  },
  {
    "text": "version version 3 or whatever then you end up with two versions of the guava",
    "start": "1352620",
    "end": "1357810"
  },
  {
    "text": "library on your class path and you know when class loading happens it takes the",
    "start": "1357810",
    "end": "1363300"
  },
  {
    "text": "first class that it finds on the class path the second one will be ignored so which one is the right one that's a",
    "start": "1363300",
    "end": "1369360"
  },
  {
    "text": "dilemma that you have to solve nowadays typically you solve it by taking the latest version and hoping it's backward",
    "start": "1369360",
    "end": "1376320"
  },
  {
    "text": "compatible sometimes it works sometimes it doesn't so this is a form of jar hell people had hoped that this would be that",
    "start": "1376320",
    "end": "1383820"
  },
  {
    "text": "the module system would solve this problem but it does not so they started out when they developed the modules by",
    "start": "1383820",
    "end": "1390180"
  },
  {
    "text": "allowing to specify that one module needs another module in version so-and-so but after a while they",
    "start": "1390180",
    "end": "1398600"
  },
  {
    "text": "discovered that yeah in order to resolve all these version dependencies they have",
    "start": "1398600",
    "end": "1406140"
  },
  {
    "text": "to come up with some kind of strategy and there's several strategies for resolution conceivable and already the",
    "start": "1406140",
    "end": "1412740"
  },
  {
    "text": "build tools have strategies and then Java would have when they have different strategies actually and Java would have",
    "start": "1412740",
    "end": "1418410"
  },
  {
    "text": "come up with yet another strategy and how to how do we reconcile this and then also there was there's also another tool",
    "start": "1418410",
    "end": "1426660"
  },
  {
    "text": "OSGi that also supports version control and dynamic class loading and modules",
    "start": "1426660",
    "end": "1432840"
  },
  {
    "text": "and they had entirely different ideas and they were heated debates they couldn't even figure out what a version",
    "start": "1432840",
    "end": "1439260"
  },
  {
    "text": "actually means what should go into a version so they couldn't come up with any kind of compromise so that",
    "start": "1439260",
    "end": "1444660"
  },
  {
    "text": "eventually the people at Oracle said okay modules don't have a version and we can add this later but for now this is",
    "start": "1444660",
    "end": "1451050"
  },
  {
    "text": "too complex we just skip the entire version resolution problem so modules in the module system in Java 9 do not have",
    "start": "1451050",
    "end": "1458520"
  },
  {
    "text": "a version and so though you can't solve this this kind of Jar help problem in any different way than you did in the",
    "start": "1458520",
    "end": "1465000"
  },
  {
    "text": "past so there's nothing new to it ok another thing they try to address with",
    "start": "1465000",
    "end": "1470070"
  },
  {
    "text": "the module system is deployment size nowadays if you want to create a self",
    "start": "1470070",
    "end": "1476030"
  },
  {
    "text": "self-contained unity for for deployment you would include the entire JDK",
    "start": "1476030",
    "end": "1481380"
  },
  {
    "text": "although perhaps you need only a fraction of the JDK classes and with a",
    "start": "1481380",
    "end": "1486540"
  },
  {
    "text": "module system it's not possible to create so called runtime images and a runtime image would only contain all the",
    "start": "1486540",
    "end": "1493650"
  },
  {
    "text": "JDK modules that are actually needed so everything that you don't need know isn't included into the runtime image",
    "start": "1493650",
    "end": "1500460"
  },
  {
    "text": "and thereby you can reduce the the deployment size of what you deliver ok",
    "start": "1500460",
    "end": "1506990"
  },
  {
    "text": "so let's look into some of the features I will not cover all of it I mean the the Java module system fills books and",
    "start": "1506990",
    "end": "1513750"
  },
  {
    "text": "you can do workshops taking one to three days if you want just the bare minimum",
    "start": "1513750",
    "end": "1518850"
  },
  {
    "text": "the first thing they did is they motorized the JDK so this is the module graph of all the JDK modules it took",
    "start": "1518850",
    "end": "1527190"
  },
  {
    "text": "around five years to take the JDK as it was to come up with this kind of module",
    "start": "1527190",
    "end": "1532320"
  },
  {
    "text": "graph this graph has to be a directed graph without cycles so if you have the",
    "start": "1532320",
    "end": "1538910"
  },
  {
    "text": "classical spaghetti code you have to get rid of your cycles in order to come up",
    "start": "1538910",
    "end": "1544050"
  },
  {
    "text": "with a reasonable module graph that is directed and has no longer has any cycles so that alone took five years now",
    "start": "1544050",
    "end": "1552540"
  },
  {
    "text": "if you imagine you want to modularize your application you can figure out how long this will take okay so let's address the migration",
    "start": "1552540",
    "end": "1561720"
  },
  {
    "start": "1557000",
    "end": "1827000"
  },
  {
    "text": "issue basically what does it mean if you take your applications and frameworks and try to migrate to Java online maybe",
    "start": "1561720",
    "end": "1570120"
  },
  {
    "text": "you win it wouldn't even notice that's the best-case scenario yeah you just move it to Java 9 compile and runs",
    "start": "1570120",
    "end": "1576060"
  },
  {
    "text": "without any trouble you wouldn't even notice that JDK nowadays comes in modules instead of runtime dojo ok",
    "start": "1576060",
    "end": "1584070"
  },
  {
    "text": "that's the best case maybe you have to adjust your program and there might be a couple of things a couple of issues even",
    "start": "1584070",
    "end": "1590580"
  },
  {
    "text": "if you do not intend to modularize your application itself you still can run",
    "start": "1590580",
    "end": "1596010"
  },
  {
    "text": "into trouble just because you have Java 9 underneath one of the problems could be you have been using one of these son",
    "start": "1596010",
    "end": "1602820"
  },
  {
    "text": "internal packages if you do so I mean they told you you you're not supposed to use them if you",
    "start": "1602820",
    "end": "1608200"
  },
  {
    "text": "did now you're in trouble they are no longer available there are workarounds you can make them available but the idea",
    "start": "1608200",
    "end": "1614559"
  },
  {
    "text": "is you should get rid of these some internal stuff yeah another thing is if you've been relying in some form on the",
    "start": "1614559",
    "end": "1621580"
  },
  {
    "text": "on the binary structure of the JDK like you are reading runtime dojo you're trying to read class files from Artie",
    "start": "1621580",
    "end": "1628330"
  },
  {
    "text": "dojo and that is now different the class were of string dot class for instance is",
    "start": "1628330",
    "end": "1634059"
  },
  {
    "text": "no longer in our tea tour charts in a Java base module so something things will change also they changed the Java",
    "start": "1634059",
    "end": "1640870"
  },
  {
    "text": "version string so if you've been passing the version string like figuring out yeah the version is one dot something",
    "start": "1640870",
    "end": "1647019"
  },
  {
    "text": "it's no longer one dot something it's version 9 so passing my field so these",
    "start": "1647019",
    "end": "1652419"
  },
  {
    "text": "are tiny things that might create trouble and adjustment make make adjustment necessary if you move on to",
    "start": "1652419",
    "end": "1658509"
  },
  {
    "text": "Java 9 also if you have split packages you are also in trouble",
    "start": "1658509",
    "end": "1665470"
  },
  {
    "text": "split package problem is let's take an example the e guava library has",
    "start": "1665470",
    "end": "1670720"
  },
  {
    "text": "interesting classes but many of these classes are package protected so they are not available for actual public use",
    "start": "1670720",
    "end": "1678220"
  },
  {
    "text": "but I mean if the class is interesting and I want to derive from the class and add some customization what do I do",
    "start": "1678220",
    "end": "1684940"
  },
  {
    "text": "yeah I build a new subclass of that particular interesting a guava class and",
    "start": "1684940",
    "end": "1690220"
  },
  {
    "text": "since this one is package visible or has a package visible constructor which I want to call what do I do",
    "start": "1690220",
    "end": "1695950"
  },
  {
    "text": "I place my class into the guava package and that's this is a split package",
    "start": "1695950",
    "end": "1701049"
  },
  {
    "text": "situation and split packages are not allowed under the module system as soon as the guava library comes as a guava",
    "start": "1701049",
    "end": "1708039"
  },
  {
    "text": "module your bets are off I mean it wouldn't compile any longer because you're stuffed I mean your",
    "start": "1708039",
    "end": "1714370"
  },
  {
    "text": "contribution to that particular guava package is now in a different module and a package can only reside in one module",
    "start": "1714370",
    "end": "1721269"
  },
  {
    "text": "you can't have split packages anymore yeah so if you have any any situation like this you have to figure out a",
    "start": "1721269",
    "end": "1728110"
  },
  {
    "text": "solution so it gets a little complicated there are ways I mean the after after why they got a lot of critique and",
    "start": "1728110",
    "end": "1733840"
  },
  {
    "text": "feedback before they really release it they came up with with a lot of flags",
    "start": "1733840",
    "end": "1738930"
  },
  {
    "text": "that you can set for starting the jvm so you have to figure out workarounds for",
    "start": "1738930",
    "end": "1744270"
  },
  {
    "text": "these things and the idea is long term you should have any of these problems anymore because you changed your source code okay what you can do in order to",
    "start": "1744270",
    "end": "1753090"
  },
  {
    "text": "prepare yourself they added already in Java eight actually a new tool which is in the bin",
    "start": "1753090",
    "end": "1759720"
  },
  {
    "text": "directory of your jar JDK deployment which is called Jade EPS it's the dependency analyzer and it can for",
    "start": "1759720",
    "end": "1766890"
  },
  {
    "text": "instance figure out the dependencies among your packages it can also generate",
    "start": "1766890",
    "end": "1772820"
  },
  {
    "text": "module descriptors or suggest some initial form of module descriptor and",
    "start": "1772820",
    "end": "1778260"
  },
  {
    "text": "one thing that it can do is it can check for use of JDK internals all these if",
    "start": "1778260",
    "end": "1783330"
  },
  {
    "text": "offensive uses of Sun Micheline or something and then you have to start it with a certain option jaidev's check for",
    "start": "1783330",
    "end": "1790620"
  },
  {
    "text": "jdk internals there's an option for this and then it comes up with messages like this for instance in this case there is",
    "start": "1790620",
    "end": "1797550"
  },
  {
    "text": "use of sun security x.509 and a certain class on that package and this is no",
    "start": "1797550",
    "end": "1804240"
  },
  {
    "text": "longer available and they also give you a hint what you should be using instead so for some of the things that are used",
    "start": "1804240",
    "end": "1811740"
  },
  {
    "text": "from some miscellaneous or Sun internal packages there are already replacements",
    "start": "1811740",
    "end": "1817140"
  },
  {
    "text": "and you are supposed to get rid of this class and use the new one so you can check and get a feeling for how much",
    "start": "1817140",
    "end": "1825390"
  },
  {
    "text": "trouble you might run into okay the workaround by the way I mean if you",
    "start": "1825390",
    "end": "1830760"
  },
  {
    "start": "1827000",
    "end": "1917000"
  },
  {
    "text": "need this particular class and it's now in the JDK internal module and by",
    "start": "1830760",
    "end": "1837780"
  },
  {
    "text": "default it's not available but you can make it available you can break the encapsulation of modules by starting by",
    "start": "1837780",
    "end": "1845820"
  },
  {
    "text": "compiling and starting the JVM using these minnows - - ad exports directive",
    "start": "1845820",
    "end": "1853680"
  },
  {
    "text": "so this is something you can specify for compilation and also for runtime and then you can say ok and I want to make",
    "start": "1853680",
    "end": "1861090"
  },
  {
    "text": "available this package this protected strategy internal package oh it's in",
    "start": "1861090",
    "end": "1866880"
  },
  {
    "text": "Java based I think - I my packages and since you have",
    "start": "1866880",
    "end": "1873369"
  },
  {
    "text": "modulized anything all your packages reside in an unnamed module so what I'm",
    "start": "1873369",
    "end": "1878679"
  },
  {
    "text": "basically saying is this internal class I want to make it available to my unnamed stuff yeah and then you can do",
    "start": "1878679",
    "end": "1885340"
  },
  {
    "text": "so so this is kind of a workaround if you stuff for some transition need these",
    "start": "1885340",
    "end": "1891669"
  },
  {
    "text": "protected and JDK internal things you can do so but I mean there's no guarantee that this class will be around",
    "start": "1891669",
    "end": "1897850"
  },
  {
    "text": "still in Java ten or eleven yeah so the work for you is to figure out the internals to figure out which options",
    "start": "1897850",
    "end": "1904509"
  },
  {
    "text": "you have to set for the time being and then go ahead and get rid of all the internals for the next version and",
    "start": "1904509",
    "end": "1909759"
  },
  {
    "text": "before they disappear and you have no work around any longer okay if you want",
    "start": "1909759",
    "end": "1915730"
  },
  {
    "text": "to create modules what does it mean let's say you really want to modularize something or you want to start a new",
    "start": "1915730",
    "end": "1922570"
  },
  {
    "start": "1917000",
    "end": "2225000"
  },
  {
    "text": "project from scratch where it really makes sense to just use the new module system what it means is that you have a",
    "start": "1922570",
    "end": "1930609"
  },
  {
    "text": "different source code structure so for if you so far if you have a source directory you would have one directory",
    "start": "1930609",
    "end": "1939009"
  },
  {
    "text": "per package so far and now we have an additional directory level so we will",
    "start": "1939009",
    "end": "1945820"
  },
  {
    "text": "have a directory that represents the module and inside that module directory",
    "start": "1945820",
    "end": "1951129"
  },
  {
    "text": "you would have all the package directories so there is an additional level of directory representing the",
    "start": "1951129",
    "end": "1958029"
  },
  {
    "text": "module and a module contains packages and the module in addition to all the packages contains a module info dot Java",
    "start": "1958029",
    "end": "1966340"
  },
  {
    "text": "file and this is the so-called module to scripture that actually has these really readability and accessibility",
    "start": "1966340",
    "end": "1972399"
  },
  {
    "text": "descriptions and it must sit well on the top level yeah directly in the module",
    "start": "1972399",
    "end": "1977940"
  },
  {
    "text": "directory and the module directory as with package directories it must match the name of the module the name of the",
    "start": "1977940",
    "end": "1984190"
  },
  {
    "text": "module will also appear in the module descriptor and the module info dot java file student.java it and later you have",
    "start": "1984190",
    "end": "1992259"
  },
  {
    "text": "a module info dot class which you package into a jar file along with all the other resources and classes that",
    "start": "1992259",
    "end": "1999009"
  },
  {
    "text": "belong to the module so it's an additional entity that you have to come okay this is what a module in food or",
    "start": "1999009",
    "end": "2006410"
  },
  {
    "text": "Java looks like you say module then you specify the name of your module and then",
    "start": "2006410",
    "end": "2012530"
  },
  {
    "text": "in the body you would specify the readability and accessibility directives",
    "start": "2012530",
    "end": "2018010"
  },
  {
    "text": "okay so you can specify what you want to make",
    "start": "2018010",
    "end": "2023480"
  },
  {
    "text": "available so a module specifies which packages it exports and as an exports",
    "start": "2023480",
    "end": "2029420"
  },
  {
    "text": "directive you know so this module says it exports package 1 my package 1 you",
    "start": "2029420",
    "end": "2035000"
  },
  {
    "text": "can also have qualified exports you can say ok I export it but just to one particular module yeah so the first one",
    "start": "2035000",
    "end": "2042170"
  },
  {
    "text": "is an unqualified export makes it available to all modules that might be interested the other one restricts it to",
    "start": "2042170",
    "end": "2047750"
  },
  {
    "text": "certain modules ok so this is the accessibility specification one module",
    "start": "2047750",
    "end": "2053929"
  },
  {
    "text": "makes available packages potentially restricted to some other modules and this is the corresponding the kind of",
    "start": "2053929",
    "end": "2061550"
  },
  {
    "text": "import statement you say I require one module says I require another module so",
    "start": "2061550",
    "end": "2067639"
  },
  {
    "text": "this is a second module and the second module requires the first module the first mode you made available some",
    "start": "2067640",
    "end": "2073220"
  },
  {
    "text": "packages and the second one is to say and I require it so there is a bilateral",
    "start": "2073220",
    "end": "2079030"
  },
  {
    "text": "relationship between these two so it would not compile if only one module",
    "start": "2079030",
    "end": "2084710"
  },
  {
    "text": "says ok and I make these packages accessible and the other module doesn't say that it wants to read them in that",
    "start": "2084710",
    "end": "2090409"
  },
  {
    "text": "case it doesn't compile and it doesn't run so there must really be the export statement in one module and the requires",
    "start": "2090410",
    "end": "2096500"
  },
  {
    "text": "in another module it's a little confusing perhaps at first sight because you export packages but you require an",
    "start": "2096500",
    "end": "2104450"
  },
  {
    "text": "entire module or several modules that's the requires directive there are",
    "start": "2104450",
    "end": "2110210"
  },
  {
    "text": "more directives I will leave it at that there's also opens and users and",
    "start": "2110210",
    "end": "2115340"
  },
  {
    "text": "provides for other special cases but these are exports and requires are the basic directives for specifying",
    "start": "2115340",
    "end": "2123140"
  },
  {
    "text": "readability and accessibility so is this this bilateral relationship that must be",
    "start": "2123140",
    "end": "2129080"
  },
  {
    "text": "established in the various module info files and then Java C checks for it the",
    "start": "2129080",
    "end": "2134900"
  },
  {
    "text": "runtime checks for it core reflection checks right here you can't get hold of stuff that you haven't required and that",
    "start": "2134900",
    "end": "2142250"
  },
  {
    "text": "hasn't been made available even at reflection time okay then there is a",
    "start": "2142250",
    "end": "2148339"
  },
  {
    "text": "transitive export so if the let's say the Miller module makes available its",
    "start": "2148339",
    "end": "2157069"
  },
  {
    "text": "packages to the topmost module and it uses all let's say it uses a third",
    "start": "2157069",
    "end": "2164300"
  },
  {
    "text": "module and classes types some elements from the third module appear in the API",
    "start": "2164300",
    "end": "2170359"
  },
  {
    "text": "of the middle module in that case the topmost module has an indirect relationship and indirect requires",
    "start": "2170359",
    "end": "2177400"
  },
  {
    "text": "relationship to the third module without even knowing it and in order to make it",
    "start": "2177400",
    "end": "2182809"
  },
  {
    "text": "more flexible and more easy more easily to to to develop later on what they",
    "start": "2182809",
    "end": "2191020"
  },
  {
    "text": "invented is a transitive requires so if the middle module says ok I require the",
    "start": "2191020",
    "end": "2198290"
  },
  {
    "text": "third module transitively then it makes available to its using modules",
    "start": "2198290",
    "end": "2203470"
  },
  {
    "text": "everything from the third module yes so that the first topmost module does not have to explicitly specify that it",
    "start": "2203470",
    "end": "2210140"
  },
  {
    "text": "indirectly uses the third one so it just has a requires directive to the middle one of the middle one says and requires",
    "start": "2210140",
    "end": "2216140"
  },
  {
    "text": "the third and requires transitively that makes the difference okay what does it",
    "start": "2216140",
    "end": "2223520"
  },
  {
    "text": "mean when I develop modules there are various new tools and lots of new options if you want to write Java C or",
    "start": "2223520",
    "end": "2230059"
  },
  {
    "start": "2225000",
    "end": "2275000"
  },
  {
    "text": "the JVM itself one thing that is really different is in addition to a class pass",
    "start": "2230059",
    "end": "2235579"
  },
  {
    "text": "we now have a module path and the module path on the module pass they have to",
    "start": "2235579",
    "end": "2241280"
  },
  {
    "text": "list all the jar files that contain your modules hmm it's similar to the class",
    "start": "2241280",
    "end": "2247099"
  },
  {
    "text": "path it's just a second path for modular jar files you also have other options",
    "start": "2247099",
    "end": "2252710"
  },
  {
    "text": "like show module resolution if you start your JVM will show more your resolution is similar to verbose class it just",
    "start": "2252710",
    "end": "2259099"
  },
  {
    "text": "tells you okay this is the root module that contains the main class and then it requires this inter centers and you will",
    "start": "2259099",
    "end": "2264950"
  },
  {
    "text": "see the transitive subset of all required modules and",
    "start": "2264950",
    "end": "2270370"
  },
  {
    "text": "where they are found we get our messages if something cannot be found and so on and so forth okay for diagnosis it's",
    "start": "2270370",
    "end": "2276760"
  },
  {
    "start": "2275000",
    "end": "2310000"
  },
  {
    "text": "helpful so a module in the end is a so called modular Java you create a Java",
    "start": "2276760",
    "end": "2283030"
  },
  {
    "text": "file and add the compiled module info the module descriptor so you ever want to one relationship between a modular",
    "start": "2283030",
    "end": "2289660"
  },
  {
    "text": "Java file and yeah the module itself okay then there are obviously new options needed",
    "start": "2289660",
    "end": "2297280"
  },
  {
    "text": "for the jar tool you can specify the main class you can list you can describe the module describing the module means",
    "start": "2297280",
    "end": "2304240"
  },
  {
    "text": "it gives you the content of the module description so there are new options for modular Java files they already",
    "start": "2304240",
    "end": "2312190"
  },
  {
    "start": "2310000",
    "end": "2404000"
  },
  {
    "text": "mentioned runtime image there is a new tool called J link which creates a",
    "start": "2312190",
    "end": "2317770"
  },
  {
    "text": "modular runtime image basically what it does it's not like linking in a language",
    "start": "2317770",
    "end": "2323470"
  },
  {
    "text": "like C or C++ where you really link everything statically to create one executable file that's what it does a",
    "start": "2323470",
    "end": "2330130"
  },
  {
    "text": "runtime image is kind of a deployment structure that is similar to the deployment structure of the JDK in Java",
    "start": "2330130",
    "end": "2337120"
  },
  {
    "text": "9 and what it does is it includes only those modules that are actually needed",
    "start": "2337120",
    "end": "2343480"
  },
  {
    "text": "this is addressing the deployment size problem that I mentioned so if you create a runtime image starting from",
    "start": "2343480",
    "end": "2349960"
  },
  {
    "text": "your top main root module yet will include only those JDK modules that are",
    "start": "2349960",
    "end": "2355330"
  },
  {
    "text": "actually needed and they will all be packaged to a so called runtime image",
    "start": "2355330",
    "end": "2360430"
  },
  {
    "text": "which you can deliver and then what it creates is a deployment structure that has one big module file and it contains",
    "start": "2360430",
    "end": "2366940"
  },
  {
    "text": "only the necessary stuff so this is created using the new J link tool ok now",
    "start": "2366940",
    "end": "2374920"
  },
  {
    "text": "that's more to it but let's keep it at that one problem you will have over time",
    "start": "2374920",
    "end": "2380140"
  },
  {
    "text": "is that you have to migrate probably in steps I guess it will take many many years until the entire Java world is",
    "start": "2380140",
    "end": "2387250"
  },
  {
    "text": "modular so what you have today is probably your application is not modular third-party libraries or frameworks that",
    "start": "2387250",
    "end": "2394120"
  },
  {
    "text": "use are probably not anymore not yet and you have only the JDK which is already",
    "start": "2394120",
    "end": "2401050"
  },
  {
    "text": "modular so ok now say you start to modularize your own",
    "start": "2401050",
    "end": "2407299"
  },
  {
    "start": "2404000",
    "end": "2510000"
  },
  {
    "text": "application so you do a top-down modularization but you will use jaidev's you will write the will figure out what",
    "start": "2407299",
    "end": "2414140"
  },
  {
    "text": "a reasonable module would be it's probably relates to what you have as Java is today that's the most natural",
    "start": "2414140",
    "end": "2419299"
  },
  {
    "text": "thing and then you write the module info files everything's fine so let's say your application is Modula after a while",
    "start": "2419299",
    "end": "2425480"
  },
  {
    "text": "you might still run into the situation that other things that you use libraries frameworks that they haven't catch you",
    "start": "2425480",
    "end": "2432230"
  },
  {
    "text": "haven't caught up yet so you would have a mix of modular stuff and non modular",
    "start": "2432230",
    "end": "2437359"
  },
  {
    "text": "elements how does that work what you can do is if you have let's say the",
    "start": "2437359",
    "end": "2444410"
  },
  {
    "text": "non-modular part is a third-party library like the guava library for instance or something else what you can",
    "start": "2444410",
    "end": "2450829"
  },
  {
    "text": "do is this data level deliver a jar file a non-modular jar file as they did in",
    "start": "2450829",
    "end": "2456200"
  },
  {
    "text": "the past and you can take that jar file and put it onto the class path as you did before and everything that you put",
    "start": "2456200",
    "end": "2462799"
  },
  {
    "text": "onto the class path not onto the module path but onto the class path as before ends up in a so called unnamed module so",
    "start": "2462799",
    "end": "2471829"
  },
  {
    "text": "everything that isn't a named module is basically an unnamed module on the class part the class path is more like a",
    "start": "2471829",
    "end": "2478849"
  },
  {
    "text": "special module it exports everything all these packages it requires everything the only problem is if you have named",
    "start": "2478849",
    "end": "2485720"
  },
  {
    "text": "modules you can't require anything from the unnamed module so if you need a package from the guava library you would",
    "start": "2485720",
    "end": "2492589"
  },
  {
    "text": "have to say well requires guava package so-and-so but I mean it's in an unnamed",
    "start": "2492589",
    "end": "2498680"
  },
  {
    "text": "module you cannot require packages you can only require modules and if the module doesn't have a name there's no",
    "start": "2498680",
    "end": "2504440"
  },
  {
    "text": "way to require it bad luck so in order to solve that problem they invented",
    "start": "2504440",
    "end": "2510470"
  },
  {
    "start": "2510000",
    "end": "2575000"
  },
  {
    "text": "automatic modules so to solve the problem that your modules cannot access",
    "start": "2510470",
    "end": "2515990"
  },
  {
    "text": "unnamed modules you take the jar for the guava jar file and don't put it onto the",
    "start": "2515990",
    "end": "2521299"
  },
  {
    "text": "class pass but put it onto the module class although it's not modular yet so you can take regular non modular jar",
    "start": "2521299",
    "end": "2527720"
  },
  {
    "text": "files put them onto the module path in which case they are considered being",
    "start": "2527720",
    "end": "2532809"
  },
  {
    "text": "automatic modules and an automatic module is a name module with a derived name so they take",
    "start": "2532809",
    "end": "2539790"
  },
  {
    "text": "a look at the Java file name and from that file name they derive an automatic",
    "start": "2539790",
    "end": "2545130"
  },
  {
    "text": "module name and since an automatic module name has a name I derived synthetic name you can now have a",
    "start": "2545130",
    "end": "2551490"
  },
  {
    "text": "requires directive to the guava library module okay the problem is the name that",
    "start": "2551490",
    "end": "2559050"
  },
  {
    "text": "that is derived from the Java file name might be different from what the guava library sometime in the future might",
    "start": "2559050",
    "end": "2565590"
  },
  {
    "text": "pick as its module name which then requires that you have to change your requires directives so this is asking",
    "start": "2565590",
    "end": "2572700"
  },
  {
    "text": "for a future trouble okay so this would be the situation then yeah so you have",
    "start": "2572700",
    "end": "2578940"
  },
  {
    "start": "2575000",
    "end": "2682000"
  },
  {
    "text": "your application in modules the JDK is and modules you take the guava library",
    "start": "2578940",
    "end": "2584010"
  },
  {
    "text": "put it onto the module path it's then an automatic module and automatic modules",
    "start": "2584010",
    "end": "2589110"
  },
  {
    "text": "can use unnamed modules so if the guava library needs something from some other jar file on the class path that would",
    "start": "2589110",
    "end": "2595860"
  },
  {
    "text": "work so only automatic modules have access to unnamed modules you see it's fairly complex if you have a mixed type",
    "start": "2595860",
    "end": "2601650"
  },
  {
    "text": "situation to put all the elements onto the write module path or class path in order to make it work in the end ok",
    "start": "2601650",
    "end": "2609500"
  },
  {
    "text": "there is more regarding migration I mean one substantial problem is if you have",
    "start": "2609500",
    "end": "2615560"
  },
  {
    "text": "frameworks that access your classes using reflection and typically using",
    "start": "2615560",
    "end": "2623280"
  },
  {
    "text": "what is nowadays called deep reflection if they need access to private parts of your classes they",
    "start": "2623280",
    "end": "2629640"
  },
  {
    "text": "typically use said accessible in order to get access to the private parts and that is now restricted then there are",
    "start": "2629640",
    "end": "2636270"
  },
  {
    "text": "opens directives you can open your packages for illegal reflectional",
    "start": "2636270",
    "end": "2641550"
  },
  {
    "text": "illegal excess and there is more to it yeah so there's more trouble to come the",
    "start": "2641550",
    "end": "2647190"
  },
  {
    "text": "point is for Java 9 this illegal reflective excess is permitted by",
    "start": "2647190",
    "end": "2653610"
  },
  {
    "text": "default but the default will change with the other ten so in Java",
    "start": "2653610",
    "end": "2658800"
  },
  {
    "text": "10 you will have to figure out whether you have a new version of the framework that does need the illegal access",
    "start": "2658800",
    "end": "2665100"
  },
  {
    "text": "anymore or that you add all the necessary opens directory so they made it easy to move on to Java",
    "start": "2665100",
    "end": "2672539"
  },
  {
    "text": "9 but it's not the end of the story some things will change when you move on to Java 10 so you should be prepared that",
    "start": "2672539",
    "end": "2679170"
  },
  {
    "text": "there's more to come more traveled ok ok critique yeah it's kind of confusing now",
    "start": "2679170",
    "end": "2685019"
  },
  {
    "start": "2682000",
    "end": "2882000"
  },
  {
    "text": "you have package private and so on and so forth plus you have the module descriptors if a class is public that",
    "start": "2685019",
    "end": "2690059"
  },
  {
    "text": "doesn't mean you can access it you need to require the module and the module has to make available the respective package",
    "start": "2690059",
    "end": "2696299"
  },
  {
    "text": "otherwise a public classes in public so it's more complex there are more places where you have to look in order to",
    "start": "2696299",
    "end": "2701970"
  },
  {
    "text": "figure out whether you can use something ok then adapting existing code to a",
    "start": "2701970",
    "end": "2709079"
  },
  {
    "text": "modular system module realizing it might be a lot of work think of the five years",
    "start": "2709079",
    "end": "2715920"
  },
  {
    "text": "it took to more generalize the JDK it might be close to infeasible if you have",
    "start": "2715920",
    "end": "2721019"
  },
  {
    "text": "a split packages so I think the realization is if you have an existing",
    "start": "2721019",
    "end": "2726450"
  },
  {
    "text": "application you should probably think whether you really want to turn this into modules it's a lot of work if you",
    "start": "2726450",
    "end": "2733529"
  },
  {
    "text": "see value in having a better encapsulation go ahead and modernize but",
    "start": "2733529",
    "end": "2739410"
  },
  {
    "text": "I think in practice library providers and frameworks will have to moralize",
    "start": "2739410",
    "end": "2744660"
  },
  {
    "text": "that stuff because they might have used us that start new projects from scratch and if you if you start from scratch and",
    "start": "2744660",
    "end": "2750720"
  },
  {
    "text": "make sense to build your application in terms of modules but taking an existing app lamay application changing it into a",
    "start": "2750720",
    "end": "2757920"
  },
  {
    "text": "modular application is probably overkill but it's up to you to decide whether you",
    "start": "2757920",
    "end": "2762930"
  },
  {
    "text": "want to take advantage of the encapsulation mechanism so much ok then",
    "start": "2762930",
    "end": "2768119"
  },
  {
    "text": "we don't have the module versions so there's no solution to jar hell which has been deployed by many people but",
    "start": "2768119",
    "end": "2774029"
  },
  {
    "text": "that's it didn't change if you want to read something about it there is a white paper by Marc Reinhard who is the chief",
    "start": "2774029",
    "end": "2781529"
  },
  {
    "text": "architect for the SE version of Java the tool reference is interesting because",
    "start": "2781529",
    "end": "2787529"
  },
  {
    "text": "there are lots of new tools and lots of new flags and you really need to learn about all this if you want to build modules I want to get get ahead of it",
    "start": "2787529",
    "end": "2793950"
  },
  {
    "text": "there are also a couple of books this is one of them I looked into the one this",
    "start": "2793950",
    "end": "2800290"
  },
  {
    "text": "and one is on the way will come sometime next year but there the guy Nicolai  has a lot of blocks so he writes",
    "start": "2800290",
    "end": "2806710"
  },
  {
    "text": "a lot about it ok do I still have time",
    "start": "2806710",
    "end": "2812220"
  },
  {
    "text": "four minutes okay I can give you a couple of ideas of what is available in",
    "start": "2812250",
    "end": "2818860"
  },
  {
    "text": "terms of replacement of some miscellaneous oh yeah do ya the rest",
    "start": "2818860",
    "end": "2825520"
  },
  {
    "text": "goes deep into the stuff does anybody use some miscellaneous unsafe okay then",
    "start": "2825520",
    "end": "2831250"
  },
  {
    "text": "we can safely skip it just very few people the problem is the libraries that you are using they typically use it so",
    "start": "2831250",
    "end": "2838570"
  },
  {
    "text": "they have to solve the problems and figure out how to replace all these things from Sandwich Elena's unsafe and",
    "start": "2838570",
    "end": "2843940"
  },
  {
    "text": "this goes deep into var handles has anybody been using method handles also",
    "start": "2843940",
    "end": "2850030"
  },
  {
    "text": "unknown yeah so this goes deep into the innards of JDK so let's give this one purpose what is still interesting is the",
    "start": "2850030",
    "end": "2856420"
  },
  {
    "text": "J shell we have a shell tool into which you can type in Java source code",
    "start": "2856420",
    "end": "2863380"
  },
  {
    "text": "fragments and it gives you an immediate it evaluates the expression so you have kind of a read evaluate write loop yeah",
    "start": "2863380",
    "end": "2871450"
  },
  {
    "text": "so you don't have to write an entire program if you just want to try out some some tiny stuff of Java code and there's",
    "start": "2871450",
    "end": "2878920"
  },
  {
    "text": "many more stuff I'll give you an overview let me see okay there's a new",
    "start": "2878920",
    "end": "2884830"
  },
  {
    "start": "2882000",
    "end": "2986000"
  },
  {
    "text": "HTTP client but it didn't reach the quality level that had that they had",
    "start": "2884830",
    "end": "2890410"
  },
  {
    "text": "intended it isn't so called incubator mode so you can try it out and provide feedback to Oracle so it's not really",
    "start": "2890410",
    "end": "2898240"
  },
  {
    "text": "usable then we have an improved process API you get better control for managing",
    "start": "2898240",
    "end": "2903900"
  },
  {
    "text": "OS processes if you if you want to create some g1 is the default garbage collector which is important for those",
    "start": "2903900",
    "end": "2910120"
  },
  {
    "text": "who didn't specify it's any any specific garbage collector so far what also",
    "start": "2910120",
    "end": "2915490"
  },
  {
    "text": "changed is they have unified JVM logging so far every component of the JVM the",
    "start": "2915490",
    "end": "2923080"
  },
  {
    "text": "garbage collector the JIT compiler and other parts have been emitting Diagnostics information on request using",
    "start": "2923080",
    "end": "2930310"
  },
  {
    "text": "certain flags like print GC detail or whatever and it all looked different",
    "start": "2930310",
    "end": "2935550"
  },
  {
    "text": "and now they unified it which also changed the flags that you use for",
    "start": "2935550",
    "end": "2940980"
  },
  {
    "text": "requesting diagnostics information so there's an entire new flag called X lock",
    "start": "2940980",
    "end": "2947700"
  },
  {
    "text": "colon and then you can specify wildcards for the amount of information that you",
    "start": "2947700",
    "end": "2952980"
  },
  {
    "text": "request as diagnostic so the output looks different the way it is controlled is different and I guess many tools that",
    "start": "2952980",
    "end": "2959970"
  },
  {
    "text": "have been parsing JIT locks or GC locks or something they will take some time to",
    "start": "2959970",
    "end": "2965310"
  },
  {
    "text": "catch up with in you format in order to parse it correctly so there's a lot of change there's a lot of internals yeah",
    "start": "2965310",
    "end": "2972060"
  },
  {
    "text": "Javadoc is now in html5 format it has a search box I mean haven't been needing",
    "start": "2972060",
    "end": "2978480"
  },
  {
    "text": "this for decades so there's many most of much of it is internal ok questions we've got a few",
    "start": "2978480",
    "end": "2991410"
  },
  {
    "start": "2986000",
    "end": "3174000"
  },
  {
    "text": "questions in the app I don't think we can answer all of them one of them is pretty provocative I would ask that in",
    "start": "2991410",
    "end": "2999300"
  },
  {
    "text": "this way here is it kind of safe to just ignore the modular system I mean the",
    "start": "2999300",
    "end": "3010640"
  },
  {
    "text": "question was a little bit different it said what kind of problems what I expect if I don't modernize my application",
    "start": "3010640",
    "end": "3017329"
  },
  {
    "text": "today if you do not modernize its you will you can still run into trouble",
    "start": "3017329",
    "end": "3022369"
  },
  {
    "text": "because most applications use some third party stuff and the third-party",
    "start": "3022369",
    "end": "3027500"
  },
  {
    "text": "libraries usually use some miscellaneous unsafe so they will not compile and first play right away so you probably",
    "start": "3027500",
    "end": "3035180"
  },
  {
    "text": "should wait until all the things that you use come up with some kind of",
    "start": "3035180",
    "end": "3040700"
  },
  {
    "text": "solution for their problems I mean you might not necessarily have problems yourself but you might be using",
    "start": "3040700",
    "end": "3046339"
  },
  {
    "text": "hibernate and having it does illegal access and so on and so forth so it is probably difficult to simply ignore it",
    "start": "3046339",
    "end": "3054290"
  },
  {
    "text": "and even if you ignore it there might be hidden problems that will pop up in Java 10 so it's probably plan on spending",
    "start": "3054290",
    "end": "3061730"
  },
  {
    "text": "some time for migration I think okay fine and then there were quite a bunch of questions around how does it",
    "start": "3061730",
    "end": "3068949"
  },
  {
    "text": "relate to what we know from Gradle maven or maybe even OSGi and what's difference",
    "start": "3068949",
    "end": "3076539"
  },
  {
    "text": "around that can we get maybe OSGi is there's basically no relationship they I",
    "start": "3076539",
    "end": "3084309"
  },
  {
    "text": "mean there was the debate and they couldn't reconcile their different views the idea is Austria does its stuff when",
    "start": "3084309",
    "end": "3091059"
  },
  {
    "text": "it's way more dynamic and flexible at runtime whereas the Java module system",
    "start": "3091059",
    "end": "3096189"
  },
  {
    "text": "is just a static dependency description and what they provided is if OSGi wants",
    "start": "3096189",
    "end": "3102189"
  },
  {
    "text": "to rebuild its stuff on top of the Java module system then there is an API for",
    "start": "3102189",
    "end": "3107739"
  },
  {
    "text": "creating class loader layers and rebuilding OSGi on top of the module system I don't know whether they intend",
    "start": "3107739",
    "end": "3113739"
  },
  {
    "text": "to do this and mainland and Gradle yeah they also have to upgrade to Java 9 and",
    "start": "3113739",
    "end": "3120099"
  },
  {
    "text": "come up with support for describing all these dependencies for describing I do I",
    "start": "3120099",
    "end": "3125469"
  },
  {
    "text": "put this as an unnamed module automatically or something like this and to the best of my knowledge they haven't",
    "start": "3125469",
    "end": "3131259"
  },
  {
    "text": "caught up yet so tools support is insufficient right now I did a workshop",
    "start": "3131259",
    "end": "3138130"
  },
  {
    "text": "last week and we're actually using console Windows and UNIX scripts in",
    "start": "3138130",
    "end": "3144969"
  },
  {
    "text": "order to get stuff I mean one guy just said that's entirely your rate room is this awful so there is no IDE support",
    "start": "3144969",
    "end": "3151689"
  },
  {
    "text": "basically for simple cases yes but as soon as this gets a little more complex and you have a mixed situation orb itself so just wait okay what",
    "start": "3151689",
    "end": "3161229"
  },
  {
    "text": "interesting last words just wait but ok fine we keep it at that because we're slightly over time thanks",
    "start": "3161229",
    "end": "3168459"
  },
  {
    "text": "a lot for you you",
    "start": "3168459",
    "end": "3173700"
  }
]