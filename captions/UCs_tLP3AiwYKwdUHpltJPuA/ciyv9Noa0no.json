[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "that's me i'm client services engineering i'm part of basho amir team we have an office in london now in",
    "start": "10719",
    "end": "17440"
  },
  {
    "text": "shoreditch and this operation is based on all of our customer base in europe in and",
    "start": "17440",
    "end": "24000"
  },
  {
    "text": "around scandinavia and africa and the middle east and working with them to build solutions with react",
    "start": "24000",
    "end": "32480"
  },
  {
    "text": "hello i'm matthew ravel i also work out of basho's london office and i'm a",
    "start": "34000",
    "end": "39200"
  },
  {
    "text": "community manager for europe middle east and africa um so you can expect to see me at more events like this and",
    "start": "39200",
    "end": "45680"
  },
  {
    "text": "also setting up react meetups across europe um and well i'll talk a little bit about",
    "start": "45680",
    "end": "52079"
  },
  {
    "text": "that towards the end okay",
    "start": "52079",
    "end": "57879"
  },
  {
    "start": "57000",
    "end": "141000"
  },
  {
    "text": "okay um now can i get a vote like a raise of hands for how many people have",
    "start": "58399",
    "end": "64239"
  },
  {
    "text": "experimented with two or more nosql databases i just want to understand what the the the group is like okay",
    "start": "64239",
    "end": "72400"
  },
  {
    "text": "and so the rest of you have how many have experimented with one",
    "start": "72400",
    "end": "77759"
  },
  {
    "text": "okay and there's a few it looks like i haven't experimented with any okay so um",
    "start": "78000",
    "end": "83200"
  },
  {
    "text": "in 1998 uh carlos strazzi actually mentioned a",
    "start": "83200",
    "end": "89600"
  },
  {
    "text": "uh relate object relational database that he built that he didn't build in a",
    "start": "89600",
    "end": "95040"
  },
  {
    "text": "structured query language as a mechanism to interface to that database okay and he coined the term nosql at that time",
    "start": "95040",
    "end": "102399"
  },
  {
    "text": "but note that that was still a relational database engine it just didn't have a structured query language",
    "start": "102399",
    "end": "107439"
  },
  {
    "text": "so what happened was the term has been reappropriated and has spread in such a fashion that",
    "start": "107439",
    "end": "113680"
  },
  {
    "text": "any database engine that it doesn't have a structured query language is determined to be no sql even though that",
    "start": "113680",
    "end": "119280"
  },
  {
    "text": "doesn't necessarily mean that database engine isn't still relational in nature so what",
    "start": "119280",
    "end": "124479"
  },
  {
    "text": "we now call nosql really we as he says we should be calling no relational",
    "start": "124479",
    "end": "129840"
  },
  {
    "text": "um we also have the term steep free because it i think it more accurately yeah it more",
    "start": "129840",
    "end": "136160"
  },
  {
    "text": "accurately conveys uh where nosql solutions have their strength um",
    "start": "136160",
    "end": "143280"
  },
  {
    "start": "141000",
    "end": "229000"
  },
  {
    "text": "okay uh a growing list of categories and uh i think recently uh as recent as a three",
    "start": "143280",
    "end": "150400"
  },
  {
    "text": "weeks ago there was the re-release of rethink db so the uh that was a database engine optimized",
    "start": "150400",
    "end": "156400"
  },
  {
    "text": "for ssd uh hardware and what has been redesigned over the last",
    "start": "156400",
    "end": "161840"
  },
  {
    "text": "three years and and is coming back into the market again so almost on a monthly base basis there are",
    "start": "161840",
    "end": "169360"
  },
  {
    "text": "new nosql solutions aimed at specific hardware problems or at specific use",
    "start": "169360",
    "end": "175840"
  },
  {
    "text": "cases and niche areas within that data storage landscape",
    "start": "175840",
    "end": "182959"
  },
  {
    "text": "all of them are optimized for record storage i say this because structured query",
    "start": "182959",
    "end": "189680"
  },
  {
    "text": "language gives you quite an expressive environment to query your data and you",
    "start": "189680",
    "end": "197200"
  },
  {
    "text": "typically have to sacrifice that to some extent to get the performance",
    "start": "197200",
    "end": "202400"
  },
  {
    "text": "that you need in these kind of modern solutions that are for lack of a better word web scale okay um arguably the",
    "start": "202400",
    "end": "210159"
  },
  {
    "text": "largest categories are graph databases key value",
    "start": "210159",
    "end": "215280"
  },
  {
    "text": "and document databases and there are a subset of that that's column family",
    "start": "215280",
    "end": "220799"
  },
  {
    "text": "and there are some more exotic ones like tuple stores but those are the three major categories as i've seen in in the",
    "start": "220799",
    "end": "227200"
  },
  {
    "text": "marketplace at the moment now as i said just a brief overview of",
    "start": "227200",
    "end": "232480"
  },
  {
    "start": "229000",
    "end": "283000"
  },
  {
    "text": "exactly how these fit in in my opinion okay so graph database",
    "start": "232480",
    "end": "237519"
  },
  {
    "text": "data is represented using nodes okay and more importantly edges",
    "start": "237519",
    "end": "243439"
  },
  {
    "text": "okay i say more importantly because when you're when when the semantic value in your data is",
    "start": "243439",
    "end": "250799"
  },
  {
    "text": "in the relations between the data pieces your nodes",
    "start": "250799",
    "end": "256000"
  },
  {
    "text": "that's when you want to consider using a graph database okay so in this case",
    "start": "256000",
    "end": "262079"
  },
  {
    "text": "typically the standard example is your social networks because you want to understand friends",
    "start": "262079",
    "end": "267680"
  },
  {
    "text": "of friends of friends it's that graph traversal that you can do in the most optimal fashion using a graph database",
    "start": "267680",
    "end": "273600"
  },
  {
    "text": "okay that it's a more natural process in that environment doesn't mean you can't do it with other database engines but",
    "start": "273600",
    "end": "279280"
  },
  {
    "text": "that's the use case that i think graph databases fit very well document orientated databases okay",
    "start": "279280",
    "end": "287919"
  },
  {
    "start": "283000",
    "end": "357000"
  },
  {
    "text": "i like to think of document-orientated databases as a sweet spot between your relational model and something which is",
    "start": "287919",
    "end": "294880"
  },
  {
    "text": "denormalized to the point where it's uh eventually becomes a key value store so you want document-orientated databases",
    "start": "294880",
    "end": "301759"
  },
  {
    "text": "when you want a schema-less structure a flexible structure",
    "start": "301759",
    "end": "307440"
  },
  {
    "text": "and that's usually i've seen it in industry most appropriate when people are transitioning",
    "start": "307440",
    "end": "313600"
  },
  {
    "text": "from their relational databases so from their mysql their postgres storage solutions okay so",
    "start": "313600",
    "end": "319919"
  },
  {
    "text": "because they give you still give you quite a lot of expressiveness with your",
    "start": "319919",
    "end": "325440"
  },
  {
    "text": "querying you typically will be querying most often in something that isn't a primary key okay if you're doing primary",
    "start": "325440",
    "end": "333039"
  },
  {
    "text": "key lookup for 90 95 of your reads then",
    "start": "333039",
    "end": "338400"
  },
  {
    "text": "really you don't need a document orientated database okay so",
    "start": "338400",
    "end": "344160"
  },
  {
    "text": "right so it's not key it's some other uh record fields",
    "start": "344160",
    "end": "350240"
  },
  {
    "text": "kv pairs that are part of that document that you really want to do your querying by",
    "start": "350240",
    "end": "356319"
  },
  {
    "start": "357000",
    "end": "430000"
  },
  {
    "text": "that leads me to key value stores now i'm of the humble opinion that any",
    "start": "358080",
    "end": "364160"
  },
  {
    "text": "problem can be denormalized to the point where it fits into a key value problem okay at",
    "start": "364160",
    "end": "369919"
  },
  {
    "text": "the same time that doesn't mean that querying over that data problem is going to necessarily be as efficient as other",
    "start": "369919",
    "end": "376960"
  },
  {
    "text": "solutions it depends on your data problem of course right",
    "start": "376960",
    "end": "382240"
  },
  {
    "text": "so if most of your queries are primary key so user session data that kind of problem then",
    "start": "382240",
    "end": "388880"
  },
  {
    "text": "pure kv stores are your sweet spot okay um",
    "start": "388880",
    "end": "394720"
  },
  {
    "text": "having said that with all of these solutions and these categories databases fit into those",
    "start": "394720",
    "end": "400479"
  },
  {
    "text": "categories but they usually offer and in fact all of them do offer a variety of uh querying mechanisms that really",
    "start": "400479",
    "end": "408080"
  },
  {
    "text": "bring them outside of that the purest kv model or the purest document orientated",
    "start": "408080",
    "end": "413680"
  },
  {
    "text": "and so on and so forth okay so if that's what you're doing then",
    "start": "413680",
    "end": "419599"
  },
  {
    "text": "you should be looking at a key value store now i'm going to hand over to matthew",
    "start": "419599",
    "end": "425599"
  },
  {
    "text": "so that leads us nicely on to react ap value store",
    "start": "425599",
    "end": "430639"
  },
  {
    "start": "430000",
    "end": "572000"
  },
  {
    "text": "oh what is it it's a value store plus extras so i guess most of you or",
    "start": "430639",
    "end": "436880"
  },
  {
    "text": "many of you will have heard of the amazon dynamo paper and a subset of that group will have read the hours and dynamo paper um so react is",
    "start": "436880",
    "end": "445599"
  },
  {
    "text": "an implementation of the dynamo paper plus a whole bunch of extras",
    "start": "445599",
    "end": "451680"
  },
  {
    "text": "such as advanced query features so what you get on top of dynamo is mapreduce",
    "start": "451680",
    "end": "458960"
  },
  {
    "text": "text search um you get pre and post commit hooks",
    "start": "458960",
    "end": "464240"
  },
  {
    "text": "multiple storage engines so we uh the moment we work with we have our own storage engine bitcast",
    "start": "464240",
    "end": "471039"
  },
  {
    "text": "and we also use google's level db which you can you can choose between them",
    "start": "471039",
    "end": "476400"
  },
  {
    "text": "on a per bucket basis to to uh according to to your what what's your",
    "start": "476400",
    "end": "482160"
  },
  {
    "text": "use case best um the main thing to to know about react is",
    "start": "482160",
    "end": "487680"
  },
  {
    "text": "though that it that it it's all about scaling linearly very easily and about availability so",
    "start": "487680",
    "end": "495759"
  },
  {
    "text": "with with react you can go from what we would consider a good starting",
    "start": "495759",
    "end": "501360"
  },
  {
    "text": "point of say between three and five nodes and as as your needs grow you can very",
    "start": "501360",
    "end": "506879"
  },
  {
    "text": "easily add on another node another one another one one at a time and react without any downtime will",
    "start": "506879",
    "end": "513680"
  },
  {
    "text": "redistribute the data across your nodes allowing you to scale on quality hardware",
    "start": "513680",
    "end": "520719"
  },
  {
    "text": "out rather than up so that you can um so that so that react grows grows with",
    "start": "520719",
    "end": "526959"
  },
  {
    "text": "you and in terms of fault tolerance um react is is is is based all around the",
    "start": "526959",
    "end": "533760"
  },
  {
    "text": "idea of um of always being available so your data",
    "start": "533760",
    "end": "538800"
  },
  {
    "text": "will always be available um and it's open source under the apache license",
    "start": "538800",
    "end": "545279"
  },
  {
    "text": "which um which is which is uh something that we're very much committed to it's you know we're an open source",
    "start": "545279",
    "end": "551200"
  },
  {
    "text": "company we're all from kind of free software backgrounds um but on top of that we also have um a couple of",
    "start": "551200",
    "end": "556720"
  },
  {
    "text": "enterprise versions uh where we we bring in support and extra features",
    "start": "556720",
    "end": "563279"
  },
  {
    "text": "um and of interest to to some and and a practical value in the implementation it's written in airline",
    "start": "563279",
    "end": "570000"
  },
  {
    "text": "and the open telecoms uh and then it will be written to disk asynchronously but what you're saying is",
    "start": "570000",
    "end": "575920"
  },
  {
    "start": "572000",
    "end": "620000"
  },
  {
    "text": "i want a synchronous right until i can guarantee that that data is durable on disk okay what i would like to stress",
    "start": "575920",
    "end": "582800"
  },
  {
    "text": "with tunable consistency is before you um consider tuning reacting and tuning",
    "start": "582800",
    "end": "590800"
  },
  {
    "text": "against your query model stay with the default values okay there's a reason that we've chosen those",
    "start": "590800",
    "end": "596160"
  },
  {
    "text": "defaults okay they're they're a nice sweet spot for assuming you're able to",
    "start": "596160",
    "end": "601279"
  },
  {
    "text": "cope with eventual consistency which we believe most systems are able",
    "start": "601279",
    "end": "607120"
  },
  {
    "text": "uh are capable of coping with um and i won't um talk in too much about eventual consistency because i'm pretty sure that",
    "start": "607120",
    "end": "614000"
  },
  {
    "text": "uh pablo will cover it in more detail in the dynamo talk later",
    "start": "614000",
    "end": "619600"
  },
  {
    "text": "but when you can accept some level of eventual consistency so you know that",
    "start": "619600",
    "end": "625040"
  },
  {
    "start": "620000",
    "end": "748000"
  },
  {
    "text": "some replicas of your data might be stale and we're not talking about stale for seconds we're talking about milliseconds and under certain",
    "start": "625040",
    "end": "631680"
  },
  {
    "text": "conditions depending on network partitioning it may be longer okay um",
    "start": "631680",
    "end": "637200"
  },
  {
    "text": "something i want to mention at this point is some of the very recent work that's going into the 1.3 release of",
    "start": "637200",
    "end": "643279"
  },
  {
    "text": "react okay is a feature called active anti-entropy okay now under certain conditions up until now",
    "start": "643279",
    "end": "650160"
  },
  {
    "text": "under certain conditions what can happen is if if you've written and you've got an n",
    "start": "650160",
    "end": "655680"
  },
  {
    "text": "value of three you've got three replicas of your data now if at some stage or another you have data loss on nodes that",
    "start": "655680",
    "end": "662399"
  },
  {
    "text": "are handling the replicas of that data it's possible that if that data has not",
    "start": "662399",
    "end": "667680"
  },
  {
    "text": "been read again for a long time read repair hasn't occurred now read repair is a mechanism within react to",
    "start": "667680",
    "end": "674959"
  },
  {
    "text": "push consistency of your data to ensure that all replicas converge on a",
    "start": "674959",
    "end": "680880"
  },
  {
    "text": "particular value at that point in time okay now with active anti-entropy that",
    "start": "680880",
    "end": "686320"
  },
  {
    "text": "problem becomes more of a background problem to you because it's part of a rolling process that will happen within",
    "start": "686320",
    "end": "693040"
  },
  {
    "text": "react and within the underlying erlang vm to actually periodically",
    "start": "693040",
    "end": "699279"
  },
  {
    "text": "chain through your um v-notes your data partitions on that particular react node and then run read",
    "start": "699279",
    "end": "706160"
  },
  {
    "text": "repair on them to push consistency so think of it as a background process now which we are uh almost well it's code",
    "start": "706160",
    "end": "712480"
  },
  {
    "text": "freeze at the moment so you can think that sometime i'd say uh beginning of of next quarter so maybe",
    "start": "712480",
    "end": "719040"
  },
  {
    "text": "january that will become an official announcement and then it becomes less of a problem of you",
    "start": "719040",
    "end": "725360"
  },
  {
    "text": "having to run read repair sequences of your your data set if you've had some sort of disk",
    "start": "725360",
    "end": "730560"
  },
  {
    "text": "failure um because react will do that as a background task okay so it becomes even",
    "start": "730560",
    "end": "737120"
  },
  {
    "text": "less of a devops consideration when you're training your your team your database",
    "start": "737120",
    "end": "744240"
  },
  {
    "text": "administrator to look after a react instance or a react cluster okay and the last thing to say on tuneable",
    "start": "744240",
    "end": "750880"
  },
  {
    "text": "consistency is that you can finesse those values on a per cluster",
    "start": "750880",
    "end": "756800"
  },
  {
    "text": "bucket or even per operation basis um so i'm gonna yeah okay uh yeah let me",
    "start": "756800",
    "end": "765920"
  },
  {
    "text": "okay um i spend most of my day doing data modeling with prospective customers to",
    "start": "766079",
    "end": "772800"
  },
  {
    "text": "help them understand their query patterns and understand whether react is a good fit",
    "start": "772800",
    "end": "778000"
  },
  {
    "text": "for them there are environments where i've said to people this is not a kv problem this is a graph problem",
    "start": "778000",
    "end": "785200"
  },
  {
    "text": "but in many cases with some ability to denormalize and accept some sort of uh data redundancy in your",
    "start": "785200",
    "end": "792399"
  },
  {
    "text": "in your data model on some level you can um optimize your solution for read and",
    "start": "792399",
    "end": "798000"
  },
  {
    "text": "write and accept a key value storage model okay",
    "start": "798000",
    "end": "803040"
  },
  {
    "text": "within the context of react react",
    "start": "803040",
    "end": "808800"
  },
  {
    "text": "takes a different approach to other dynamo based systems when handling conflict resolution so conflict",
    "start": "808800",
    "end": "815279"
  },
  {
    "text": "resolution occurs when you've got concurrent actors who are trying to modify the same kv pair at the",
    "start": "815279",
    "end": "822959"
  },
  {
    "text": "same time what can happen is because they come from two causally distinct operators to actors on that data then",
    "start": "822959",
    "end": "830560"
  },
  {
    "text": "they can cause divergence of that data so what can happen is um they both accessed it at the same time",
    "start": "830560",
    "end": "837360"
  },
  {
    "text": "how do you resolve you've suddenly got two values that are being updated to that same kv pair and in a purely",
    "start": "837360",
    "end": "844079"
  },
  {
    "text": "distributed system with a uh almost a peer-to-peer network style operation master master no no master slave",
    "start": "844079",
    "end": "850639"
  },
  {
    "text": "environment no way of coordinating that you end up having two copies now",
    "start": "850639",
    "end": "855680"
  },
  {
    "text": "some systems give you the uh basically do the i guess do almost a naive approach of last right",
    "start": "855680",
    "end": "863519"
  },
  {
    "text": "wins so they look at some timestamp value and determine that okay this value",
    "start": "863519",
    "end": "869360"
  },
  {
    "text": "was written milliseconds later microseconds later than than the the previous right and",
    "start": "869360",
    "end": "874639"
  },
  {
    "text": "therefore that's more up to date now when you're in a distributed system and you've got things like hardware clocks",
    "start": "874639",
    "end": "880000"
  },
  {
    "text": "with uh um kind of clock drift coming into play then suddenly those microseconds that",
    "start": "880000",
    "end": "885760"
  },
  {
    "text": "determine which one of those concurrent rights is actually the one you want to keep isn't so simple and you can actually end",
    "start": "885760",
    "end": "892720"
  },
  {
    "text": "up with stale data or incorrect data being the data that's replaced into that kb pair",
    "start": "892720",
    "end": "899199"
  },
  {
    "text": "the way of that we provide a solution to solving that problem is through something called vector clocks um",
    "start": "899199",
    "end": "905360"
  },
  {
    "text": "is it can i get a raise of hands on anyone who who's heard about vector clocks before",
    "start": "905360",
    "end": "910839"
  },
  {
    "text": "and understands a bit about vector clocks awesome okay um right so um",
    "start": "910839",
    "end": "917279"
  },
  {
    "text": "i like to think of vector clocks is almost like commit hash git commit hashes okay and what happens is when",
    "start": "917279",
    "end": "924000"
  },
  {
    "text": "you're trying to do when you've got two people working on the same code branch okay and they're both working from the",
    "start": "924000",
    "end": "930160"
  },
  {
    "text": "same commit in time but doing different work different code changes at some point in time when you want to merge",
    "start": "930160",
    "end": "935759"
  },
  {
    "text": "those changes possibly into the mainline branch or whatever else then you'll have to do some sort of conflict resolution",
    "start": "935759",
    "end": "942639"
  },
  {
    "text": "okay you have to do merge resolution someone has to sit down in front of the code and actually determine",
    "start": "942639",
    "end": "948720"
  },
  {
    "text": "uh which pieces of the code you want to merge together to to bring that state",
    "start": "948720",
    "end": "954079"
  },
  {
    "text": "back into synchronicity okay um that's very much how vector clocks work",
    "start": "954079",
    "end": "959360"
  },
  {
    "text": "in react so what happens is let's say you've got concurrent writers they're both acting",
    "start": "959360",
    "end": "965199"
  },
  {
    "text": "they're separate actors acting on the same kv pair that had a certain vector clock they then diverge you have two",
    "start": "965199",
    "end": "970800"
  },
  {
    "text": "separate vector clocks way of identifying those two sibling values so possible",
    "start": "970800",
    "end": "976160"
  },
  {
    "text": "resolutions to your next update okay so what we then do is we actually well we",
    "start": "976160",
    "end": "982320"
  },
  {
    "text": "offer two mechanisms to handle this first is last right winds this is the",
    "start": "982320",
    "end": "987920"
  },
  {
    "text": "approach that some of the other dynamo systems use again like i said it's a naive approach",
    "start": "987920",
    "end": "994880"
  },
  {
    "text": "but works in some data problems based on whether your data is immutable and in",
    "start": "994880",
    "end": "999920"
  },
  {
    "text": "some situations it can be a simple mechanism to resolve that so we still offer that as a solution to resolving",
    "start": "999920",
    "end": "1006320"
  },
  {
    "text": "that conflict so we'll look at the time stamps that we maintain within react for those bits of data and pick the one with",
    "start": "1006320",
    "end": "1011600"
  },
  {
    "text": "the latest timestamp okay the other approach is like i said vector clocks so when we do get divergence of",
    "start": "1011600",
    "end": "1018720"
  },
  {
    "text": "data and we get concurrent actors we actually keep both copies of that data okay and they become sibling records",
    "start": "1018720",
    "end": "1024720"
  },
  {
    "text": "that sit against that key that kv pair okay and those sibling records are then",
    "start": "1024720",
    "end": "1030480"
  },
  {
    "text": "the responsibility of the application layer so the application developer to on the next read operation",
    "start": "1030480",
    "end": "1037120"
  },
  {
    "text": "actually decide how do i want to merge this data now i do a lot of data modeling with",
    "start": "1037120",
    "end": "1043280"
  },
  {
    "text": "customers and that is a problem that seems to scare a lot of people okay but",
    "start": "1043280",
    "end": "1048400"
  },
  {
    "text": "i like to think of it this way you are the person who is developing your solution on react you're the person who",
    "start": "1048400",
    "end": "1054320"
  },
  {
    "text": "knows exactly what data you're storing into react so who is better at determining how to resolve that data",
    "start": "1054320",
    "end": "1061840"
  },
  {
    "text": "and find synchronicity and handle that is sibling merging of those sibling records than the person who knows about",
    "start": "1061840",
    "end": "1067679"
  },
  {
    "text": "the data they're storing okay so there's depending on certain environments",
    "start": "1067679",
    "end": "1073600"
  },
  {
    "start": "1070000",
    "end": "1223000"
  },
  {
    "text": "like this particular environment okay what we what i've actually seen these are some examples of what i've seen",
    "start": "1073600",
    "end": "1079280"
  },
  {
    "text": "people use in production with react okay so you got your load balancer and it's distributing again across your vms and",
    "start": "1079280",
    "end": "1086480"
  },
  {
    "text": "your vms are sitting on some big uh like hp blade server of some kind so they're",
    "start": "1086480",
    "end": "1091600"
  },
  {
    "text": "all close enough to each other that you can uh clock synchronize using some sort of demon process of some kind okay so",
    "start": "1091600",
    "end": "1099280"
  },
  {
    "text": "they actually store as part of the value in their kv pair a timestamp what we",
    "start": "1099280",
    "end": "1105120"
  },
  {
    "text": "like to call application layer timestamps and then because it's all within an environment where you can",
    "start": "1105120",
    "end": "1111440"
  },
  {
    "text": "control and be aware of clock drift within that entire subsystem then it's",
    "start": "1111440",
    "end": "1117440"
  },
  {
    "text": "more than possible that you can just simply resolve using your application layer timestamps",
    "start": "1117440",
    "end": "1122960"
  },
  {
    "text": "so use siblings when you get siblings you do your next read request for that data you'll get yourself a conflict",
    "start": "1122960",
    "end": "1129840"
  },
  {
    "text": "resolver object which in java is some sort of implementation of an interface and it's similar in a variety of other",
    "start": "1129840",
    "end": "1136000"
  },
  {
    "text": "languages and then that has one method merge or i think it's resolve in java",
    "start": "1136000",
    "end": "1141200"
  },
  {
    "text": "and then you get a list of of those data objects and you can merge them yourself by looking with the one with the latest",
    "start": "1141200",
    "end": "1147600"
  },
  {
    "text": "application layer timestamp okay that's a simple mechanism that's what i've seen some people use in production and it",
    "start": "1147600",
    "end": "1153520"
  },
  {
    "text": "works okay the other alternative okay and so in the",
    "start": "1153520",
    "end": "1159120"
  },
  {
    "text": "previous example let me get back to it okay in the previous example it this",
    "start": "1159120",
    "end": "1164480"
  },
  {
    "text": "worked because like i said you don't really have to worry about uh clock drift because they're all under",
    "start": "1164480",
    "end": "1171280"
  },
  {
    "text": "some the similar sub system that is all aware of that clock drift okay so",
    "start": "1171280",
    "end": "1176480"
  },
  {
    "text": "suddenly you don't have uh the possibility of um inconsistency with your time stamps um",
    "start": "1176480",
    "end": "1184559"
  },
  {
    "text": "so that's fine but if you think about it this is on some level a single point of failure",
    "start": "1184559",
    "end": "1189760"
  },
  {
    "text": "in your architecture and react is designed as a distributed peer-to-peer system of data coordination and data",
    "start": "1189760",
    "end": "1196640"
  },
  {
    "text": "storage that is designed such that you don't have a single point of failure so what you're kind of saying is i want to",
    "start": "1196640",
    "end": "1201919"
  },
  {
    "text": "accept that single point of failure somewhere else in my architecture it's a reasonable solution to the problem",
    "start": "1201919",
    "end": "1208240"
  },
  {
    "text": "especially if your application layer is handling",
    "start": "1208240",
    "end": "1213280"
  },
  {
    "text": "through some sort of load balancer across a series of full-back devices that you can",
    "start": "1213280",
    "end": "1218880"
  },
  {
    "text": "spin up in case of some sort of hardware problem",
    "start": "1218880",
    "end": "1223280"
  },
  {
    "start": "1223000",
    "end": "1263000"
  },
  {
    "text": "whereas this approach uh wait let me show you it um here's uh actually in this case it might not",
    "start": "1224159",
    "end": "1230640"
  },
  {
    "text": "necessarily be on the same servers that are running your react nodes but it might be on a separate cluster",
    "start": "1230640",
    "end": "1237200"
  },
  {
    "text": "environment but you actually want to maybe round robin against your application layer and those servers are",
    "start": "1237200",
    "end": "1244159"
  },
  {
    "text": "again going to be in a such a distributed fashion that you will have clock drift that is going to give you um the",
    "start": "1244159",
    "end": "1251120"
  },
  {
    "text": "possibility of not being able to resolve with time stamps in that case that's when conflict",
    "start": "1251120",
    "end": "1257120"
  },
  {
    "text": "resolution becomes a real business logic solution okay so",
    "start": "1257120",
    "end": "1263440"
  },
  {
    "start": "1263000",
    "end": "1320000"
  },
  {
    "text": "this leads me to the next point which is a particular customer of ours",
    "start": "1263440",
    "end": "1268240"
  },
  {
    "text": "which is a company called seomoz one of our customers in the us",
    "start": "1268480",
    "end": "1273919"
  },
  {
    "text": "for array properties if you know you're only going to have add to that array then why not simply merge those two",
    "start": "1273919",
    "end": "1280159"
  },
  {
    "text": "arrays okay merge those sets it's a set union operation on that data that's a very simple mechanism at a",
    "start": "1280159",
    "end": "1287039"
  },
  {
    "text": "business logic level to do conflict resolution okay you can",
    "start": "1287039",
    "end": "1292720"
  },
  {
    "text": "we've seen people try and pick siblings at random within the conflict resolution",
    "start": "1292720",
    "end": "1298320"
  },
  {
    "text": "mechanisms to try and uh sidestep this problem i prefer you use application layer",
    "start": "1298320",
    "end": "1304159"
  },
  {
    "text": "timestamps okay it's it's a simpler mechanism if at that point you don't know how to resolve your data it's",
    "start": "1304159",
    "end": "1310720"
  },
  {
    "text": "really a concern that you need to rethink about how you're structuring your data um it's certainly not the best solution",
    "start": "1310720",
    "end": "1317280"
  },
  {
    "text": "to pick at random okay so",
    "start": "1317280",
    "end": "1322559"
  },
  {
    "start": "1320000",
    "end": "2651000"
  },
  {
    "text": "it may not necessarily be an array structure of some kind it may be some sort of first name last name values and",
    "start": "1322559",
    "end": "1329280"
  },
  {
    "text": "in that case you could store a timestamp against those fields and actually say well this one i know is",
    "start": "1329280",
    "end": "1334640"
  },
  {
    "text": "more up to date because that one hasn't been modified that subsection of that value object hasn't been modified in in",
    "start": "1334640",
    "end": "1340640"
  },
  {
    "text": "ages so i'm just going to take the one that's newest that has been modified of that piece okay um",
    "start": "1340640",
    "end": "1346960"
  },
  {
    "text": "so there are there are ways within your business logic and if if you have a particular use case that you'd like to",
    "start": "1346960",
    "end": "1352000"
  },
  {
    "text": "discuss with me at the end i'd be more than welcome to talk about it i've seen a variety of different environments at this point it is possible to do conflict",
    "start": "1352000",
    "end": "1359679"
  },
  {
    "text": "resolution in a uh i'd say straightforward manner within your business logic",
    "start": "1359679",
    "end": "1366480"
  },
  {
    "text": "and yeah so that's an engineer that we worked with to build this so i'm going to pass you over back to matthew",
    "start": "1366480",
    "end": "1373200"
  },
  {
    "text": "okay so um just a quick word on on how you can use use",
    "start": "1373200",
    "end": "1378640"
  },
  {
    "text": "react so at the lowest level we we provide a rest",
    "start": "1378640",
    "end": "1383840"
  },
  {
    "text": "interface and also um a proprietary bindings for fundraising space uh",
    "start": "1383840",
    "end": "1389360"
  },
  {
    "text": "to to to react um which is you know basically you you can",
    "start": "1389360",
    "end": "1395120"
  },
  {
    "text": "you can choose them uh according to what works best for you but um uh our rest interface you would probably",
    "start": "1395120",
    "end": "1401440"
  },
  {
    "text": "use if you perhaps want to put it behind something like squid for for a very high number of reads",
    "start": "1401440",
    "end": "1408240"
  },
  {
    "text": "um or you can use the the binary interface would be our recommended option um for for most for most use",
    "start": "1408240",
    "end": "1414880"
  },
  {
    "text": "cases particularly when you're not exposing a service to the internet um or at least the the react cluster to the",
    "start": "1414880",
    "end": "1421600"
  },
  {
    "text": "internet um because it gives you much much quicker operations",
    "start": "1421600",
    "end": "1427440"
  },
  {
    "text": "but most people tend to use one of our or one of the community's",
    "start": "1427440",
    "end": "1432559"
  },
  {
    "text": "client libraries so we currently support um python erlang java and ruby clients",
    "start": "1432559",
    "end": "1439360"
  },
  {
    "text": "which will give you full access to to to everything that reap can do um",
    "start": "1439360",
    "end": "1445760"
  },
  {
    "text": "uh straight from from your favorite language um and then because there's there's actually quite an active",
    "start": "1445760",
    "end": "1451840"
  },
  {
    "text": "community around react in the in the open source world um there are also community uh",
    "start": "1451840",
    "end": "1457279"
  },
  {
    "text": "supported libraries the c-sharp live library for example corrugated iron is um one of the the best ones i've seen",
    "start": "1457279",
    "end": "1464559"
  },
  {
    "text": "and really quite well used um and then we have others for a whole range of",
    "start": "1464559",
    "end": "1469760"
  },
  {
    "text": "languages we've recently uh a community group have stepped up and taken over the php library for example",
    "start": "1469760",
    "end": "1476799"
  },
  {
    "text": "um so you know whatever pretty much whatever language you're you're",
    "start": "1476799",
    "end": "1482480"
  },
  {
    "text": "you're writing an application in you can find a library to access",
    "start": "1482480",
    "end": "1487919"
  },
  {
    "text": "to access react and work with it and if if of course your favorite language there isn't yet a",
    "start": "1487919",
    "end": "1494000"
  },
  {
    "text": "react client for it then speak to me and we can talk about writing one i'm writing one for the d programming",
    "start": "1494000",
    "end": "1499840"
  },
  {
    "text": "language at the moment um which is just a little bit of fun as a side project so",
    "start": "1499840",
    "end": "1504880"
  },
  {
    "text": "if you ever write with d then you'll soon enough have access to your react cluster with it",
    "start": "1504880",
    "end": "1510799"
  },
  {
    "text": "okay so um react use cases um this is probably the real",
    "start": "1510799",
    "end": "1516640"
  },
  {
    "text": "meat of what i want to talk about today i want to show you that there are people using conflict resolution there are",
    "start": "1516640",
    "end": "1522720"
  },
  {
    "text": "people using vector clocks and there are people using a distributed system to give them that business edge okay",
    "start": "1522720",
    "end": "1530640"
  },
  {
    "text": "so environments where react fits well okay",
    "start": "1531600",
    "end": "1536720"
  },
  {
    "text": "session data so as well as in talks with a bunch of prospects who i probably cannot mention",
    "start": "1537679",
    "end": "1543360"
  },
  {
    "text": "to you right now but we have a bunch of customers i know that at t use react for storing session data um so for instance",
    "start": "1543360",
    "end": "1550559"
  },
  {
    "text": "you've got some sort of login mechanism into your web app of some kind and that's going to give you your key it's",
    "start": "1550559",
    "end": "1555760"
  },
  {
    "text": "naturally going to be a user-provided key it's going to be their username and that gives you access to the value object and then subsequent requests to",
    "start": "1555760",
    "end": "1562480"
  },
  {
    "text": "whatever other records that become part of that response that you want to use to render the data on the page",
    "start": "1562480",
    "end": "1570159"
  },
  {
    "text": "okay uh i want to let you work your way through the rest of these",
    "start": "1570159",
    "end": "1575279"
  },
  {
    "text": "yeah sure so another customer that we have in",
    "start": "1575279",
    "end": "1581120"
  },
  {
    "text": "california is a they serve huge amounts of advertising both to the web and to mobile well to",
    "start": "1581120",
    "end": "1588320"
  },
  {
    "text": "generic web clients and also to mobile devices um and they have a huge number",
    "start": "1588320",
    "end": "1594000"
  },
  {
    "text": "of read operations per second and uh they they use react to",
    "start": "1594000",
    "end": "1601200"
  },
  {
    "text": "basically serve out all sorts of advertising uh data so whether that's text dual or binary blobs",
    "start": "1601200",
    "end": "1607600"
  },
  {
    "text": "in the form of graphics uh they run out of that login center data now we have um there's",
    "start": "1607600",
    "end": "1614640"
  },
  {
    "text": "a company in in ireland called temetra who uh are a",
    "start": "1614640",
    "end": "1619919"
  },
  {
    "text": "a water metering company and they use react to they go around the country round island",
    "start": "1619919",
    "end": "1626400"
  },
  {
    "text": "reading water meters and they store all the reading the meter readings in uh in",
    "start": "1626400",
    "end": "1631840"
  },
  {
    "text": "react um and we also have companies who do similar things with with with uh so you",
    "start": "1631840",
    "end": "1638240"
  },
  {
    "text": "know kind of time series data from from sensors or or or from logging",
    "start": "1638240",
    "end": "1643360"
  },
  {
    "text": "as well yeah so boundary i don't know if you've ever heard of boundary they're a company that produces kind of a network daemon that sits in your on your servers",
    "start": "1643360",
    "end": "1650159"
  },
  {
    "text": "and and you put one on each of your servers within your infrastructure and it will stream information about network",
    "start": "1650159",
    "end": "1656399"
  },
  {
    "text": "topology and and uh um kind of um limitations with your network throughput",
    "start": "1656399",
    "end": "1662080"
  },
  {
    "text": "and give you graphs and statistics so it's for network monitoring basically within your distributed system and they",
    "start": "1662080",
    "end": "1668240"
  },
  {
    "text": "store all of their uh logging data all of that network topology information directly into a",
    "start": "1668240",
    "end": "1674159"
  },
  {
    "text": "react cluster and then do some form of background analytics offline analytics roll-ups to then present that",
    "start": "1674159",
    "end": "1680320"
  },
  {
    "text": "information in a in a cash fashion to the next read request earlier i mentioned um",
    "start": "1680320",
    "end": "1687120"
  },
  {
    "text": "that we've had a a couple of commercial products that we've built on top of react one of those is react cs",
    "start": "1687120",
    "end": "1694080"
  },
  {
    "text": "which is an s3 compatible object store based on on react and so we we have a",
    "start": "1694080",
    "end": "1700640"
  },
  {
    "text": "customer that we're working at the moment who are who are building a basically a dropbox a dropbox clone um",
    "start": "1700640",
    "end": "1707200"
  },
  {
    "text": "on top of react cs so we you know we call it content addressable storage um and",
    "start": "1707200",
    "end": "1714000"
  },
  {
    "text": "they can then redundancy yes i've worked directly with these guys",
    "start": "1714000",
    "end": "1721279"
  },
  {
    "text": "to build this solution and what they're doing is they're taking advantage react cs is a thick proxy that sits on top of",
    "start": "1721279",
    "end": "1726960"
  },
  {
    "text": "your react cluster okay and that thick proxy lives on each of your react nodes in",
    "start": "1726960",
    "end": "1732399"
  },
  {
    "text": "exactly the same distributed fashion as as react okay and they're taking advantage of both the underlying react",
    "start": "1732399",
    "end": "1738320"
  },
  {
    "text": "cluster to store like file metadata and user account information as well as take advantage of that s3 api to actually do",
    "start": "1738320",
    "end": "1745600"
  },
  {
    "text": "file retrieval and they have uh i think it's well it's written in java at the moment and it's a little demon process",
    "start": "1745600",
    "end": "1752080"
  },
  {
    "text": "much the same way as dropbox do with their python client that monitors a folder on a customer's",
    "start": "1752080",
    "end": "1757760"
  },
  {
    "text": "machine and then allows them to uh asynchronously sync this folder of data across into a",
    "start": "1757760",
    "end": "1764880"
  },
  {
    "text": "react cluster and they have somewhere in the region of a typical user account has somewhere in the region of 300 000 files",
    "start": "1764880",
    "end": "1771679"
  },
  {
    "text": "at the moment um i think that's probably about as much i can tell you about them so",
    "start": "1771679",
    "end": "1777520"
  },
  {
    "text": "at the moment anyway and very similarly um building up a private cloud data store um",
    "start": "1777520",
    "end": "1784159"
  },
  {
    "text": "yeah uh react cs is is is is what we",
    "start": "1784159",
    "end": "1790240"
  },
  {
    "text": "uh implement now interesting interestingly enough with react cs and private cloud because of",
    "start": "1790240",
    "end": "1795279"
  },
  {
    "text": "that s3 compatible api which at this point is almost feature parity with what",
    "start": "1795279",
    "end": "1800320"
  },
  {
    "text": "we know amazon provide with their s3 client uh it's we cannot guarantee",
    "start": "1800320",
    "end": "1805520"
  },
  {
    "text": "absolute synchronicity of features because uh there is no actual rfc",
    "start": "1805520",
    "end": "1810640"
  },
  {
    "text": "there's no specification for what and what the s3 api is it's effectively uh",
    "start": "1810640",
    "end": "1816559"
  },
  {
    "text": "engineered on whatever feature amazon are adding to that s3 client and because of that the protocol is is",
    "start": "1816559",
    "end": "1823279"
  },
  {
    "text": "uh we're as close as we can be um every feature that you could use at the",
    "start": "1823279",
    "end": "1828799"
  },
  {
    "text": "moment we already have in the client and uh people are using it in simple cases",
    "start": "1828799",
    "end": "1833840"
  },
  {
    "text": "even to run their own private cloud to store um files that they then retrieve through",
    "start": "1833840",
    "end": "1840320"
  },
  {
    "text": "salesforce right they have a massive sales team and salesforce allows you to hook in to an s3",
    "start": "1840320",
    "end": "1847840"
  },
  {
    "text": "api and store those files and and that's exactly what they do they want to keep those files under their own private",
    "start": "1847840",
    "end": "1853360"
  },
  {
    "text": "environment their own private cloud but still expose them for access through uh",
    "start": "1853360",
    "end": "1858640"
  },
  {
    "text": "some sort of secondary system that relies on s3 protocol and ultimately coming back to the amazon",
    "start": "1858640",
    "end": "1865760"
  },
  {
    "text": "dynamo paper one of the things that they made very clear in their paper was that latency costs money if you",
    "start": "1865760",
    "end": "1873360"
  },
  {
    "text": "and this is this is latency up to infinite latency when things go very wrong um",
    "start": "1873360",
    "end": "1878880"
  },
  {
    "text": "but basically if the longer it takes for data say shopping cart data to be available to a customer",
    "start": "1878880",
    "end": "1885840"
  },
  {
    "text": "the more money you lose so um we say that react is is suitable",
    "start": "1885840",
    "end": "1891039"
  },
  {
    "text": "wherever low latency increases your revenue so where you need to be very very fast",
    "start": "1891039",
    "end": "1896480"
  },
  {
    "text": "and you need to be high basically very available and",
    "start": "1896480",
    "end": "1901600"
  },
  {
    "text": "you are failure tolerant then um react is",
    "start": "1901600",
    "end": "1908000"
  },
  {
    "text": "more than likely a good fit so do you want to go into some customers yeah yeah okay so um",
    "start": "1908000",
    "end": "1914159"
  },
  {
    "text": "these are three uh amir customers actually no yammer is going to be a us customer but rovio are in a mere",
    "start": "1914159",
    "end": "1920480"
  },
  {
    "text": "customer of ours we've been working with them quite closely they're everyone's played angry birds i'm sure",
    "start": "1920480",
    "end": "1926080"
  },
  {
    "text": "um their next generation of their gaming platform is built on top of react and",
    "start": "1926080",
    "end": "1931360"
  },
  {
    "text": "they store game session data so for every user they're in the process of allowing you to to log in and create",
    "start": "1931360",
    "end": "1937840"
  },
  {
    "text": "user accounts and then whether you're playing on through their web front end which runs through the chrome store or",
    "start": "1937840",
    "end": "1944640"
  },
  {
    "text": "you're playing on your mobile device you're able to synchronize your game state and pick up the game wherever you",
    "start": "1944640",
    "end": "1949840"
  },
  {
    "text": "left off and they're expanding to a variety of different games all of that information",
    "start": "1949840",
    "end": "1955279"
  },
  {
    "text": "is being stored into react so they synchronize it across gaming",
    "start": "1955279",
    "end": "1960559"
  },
  {
    "text": "devices and it's a very straightforward key value problem",
    "start": "1960559",
    "end": "1966320"
  },
  {
    "text": "they've got an account a user account key by user id and the rest is your value object",
    "start": "1966320",
    "end": "1972640"
  },
  {
    "text": "which is a combination of binary game data objects and",
    "start": "1972640",
    "end": "1978000"
  },
  {
    "text": "kind of json records which store additional meta information about about that user their game their high scores",
    "start": "1978000",
    "end": "1984480"
  },
  {
    "text": "and all of the rest of that okay yammer they're a u.s customer of us they are the enterprise social network",
    "start": "1984480",
    "end": "1991200"
  },
  {
    "text": "they were just recently bought by microsoft and they",
    "start": "1991200",
    "end": "1996640"
  },
  {
    "text": "use react for storing notifications they have a nice architecture service orientated architecture similar to what",
    "start": "1996640",
    "end": "2003200"
  },
  {
    "text": "you read twitter doing with all of their infrastructure separate separating out certain data",
    "start": "2003200",
    "end": "2008880"
  },
  {
    "text": "problems to an rpc based service orientated architecture where they can pick the right database for the right",
    "start": "2008880",
    "end": "2014399"
  },
  {
    "text": "data problem and so for notifications they store things like the cursor so where you are",
    "start": "2014399",
    "end": "2020960"
  },
  {
    "text": "in the read list of a particular stream of updates so think about facebook and think about a message thread you're",
    "start": "2020960",
    "end": "2027360"
  },
  {
    "text": "going to know what you've read up to at that point they use a cursor item list and then the collection of items",
    "start": "2027360",
    "end": "2033360"
  },
  {
    "text": "themselves and that's just a small example of their their json records uh i",
    "start": "2033360",
    "end": "2038559"
  },
  {
    "text": "just trimmed it because it's extremely long a lot of information and",
    "start": "2038559",
    "end": "2044240"
  },
  {
    "text": "what you'll notice in this case is the cursor itself is keyed by user id and cursor name so remember when you're",
    "start": "2044240",
    "end": "2051280"
  },
  {
    "text": "storing a kv data storage system your key becomes",
    "start": "2051280",
    "end": "2056480"
  },
  {
    "text": "extremely important it's not your fallback i'm going to do auto incrementing ids like i did in my",
    "start": "2056480",
    "end": "2062560"
  },
  {
    "text": "relational database your key is the fastest way you can get your data if you",
    "start": "2062560",
    "end": "2067679"
  },
  {
    "text": "can put together a series of semantic pieces of information that can combine",
    "start": "2067679",
    "end": "2073599"
  },
  {
    "text": "into a key that you can then do an o1 lookup into a distributed system like react it's going to be as fast as you",
    "start": "2073599",
    "end": "2079440"
  },
  {
    "text": "can make it and their particular service orientated",
    "start": "2079440",
    "end": "2086079"
  },
  {
    "text": "architecture component that stores notifications it's called streamy you can read about it online if if you'd",
    "start": "2086079",
    "end": "2091599"
  },
  {
    "text": "like to know more mentioned seomoz before",
    "start": "2091599",
    "end": "2096638"
  },
  {
    "text": "they basically do web ranking of documents and",
    "start": "2096639",
    "end": "2102400"
  },
  {
    "text": "roll-ups of statistical information and ranking information that they can then present to customers to give them an",
    "start": "2102400",
    "end": "2107839"
  },
  {
    "text": "edge in search engine optimization within uh the well web crawlers like google and bing",
    "start": "2107839",
    "end": "2114240"
  },
  {
    "text": "and and all of the other search engines so ranking of web documents",
    "start": "2114240",
    "end": "2119280"
  },
  {
    "text": "their data types consist of things like subscriptions ranking lists ranking history recent ranking reports which are",
    "start": "2119280",
    "end": "2124960"
  },
  {
    "text": "cached roll ups of that data and look look at the ranking list okay it's",
    "start": "2124960",
    "end": "2131680"
  },
  {
    "text": "engine locale keyword url fragment it though that combination of information is what",
    "start": "2131680",
    "end": "2137680"
  },
  {
    "text": "generates a key for that particular ranking list okay so if you can make your key um if you can",
    "start": "2137680",
    "end": "2144640"
  },
  {
    "text": "allow external systems to provide you that key whether it be a user whether it be through some other part of your",
    "start": "2144640",
    "end": "2150480"
  },
  {
    "text": "system and build that key in such a fashion that you can denormalize your data and pull everything out in one",
    "start": "2150480",
    "end": "2155520"
  },
  {
    "text": "request it's going to be as fast as you can make it um other users that that are prospects",
    "start": "2155520",
    "end": "2162400"
  },
  {
    "text": "at the moment or open source users um high availability environments we're in the middle of working with the nhs at",
    "start": "2162400",
    "end": "2168800"
  },
  {
    "text": "the moment to build a solution they're not storing patient information but they're storing",
    "start": "2168800",
    "end": "2174800"
  },
  {
    "text": "geo location meta information about people in",
    "start": "2174800",
    "end": "2180079"
  },
  {
    "text": "specific counties to allow them to efficiently look up their nhs patient",
    "start": "2180079",
    "end": "2186320"
  },
  {
    "text": "number when they're trying to treat that patient and look up their patient records so if they're incapacitated in",
    "start": "2186320",
    "end": "2191359"
  },
  {
    "text": "some way and they have no way of knowing what their nhs ideas they use react to",
    "start": "2191359",
    "end": "2197760"
  },
  {
    "text": "i guess search through their uh patient topology information",
    "start": "2197760",
    "end": "2203200"
  },
  {
    "text": "to access that data and i pretty sure that creston will talk later on about the danish health authority which",
    "start": "2203200",
    "end": "2210000"
  },
  {
    "text": "trifolk have been working with another environment where high availability is extremely important",
    "start": "2210000",
    "end": "2217359"
  },
  {
    "text": "uh we i mentioned content addressable storage before uh we've got some people who are using it to try and build a",
    "start": "2217359",
    "end": "2223599"
  },
  {
    "text": "competitor to what is it we've got um is it sparkle which is another one of these there's an open source",
    "start": "2223599",
    "end": "2229920"
  },
  {
    "text": "kind of cast style dropbox sparkle share or something like that and there's a bunch of others and this",
    "start": "2229920",
    "end": "2236720"
  },
  {
    "text": "environment where you can mix access to your underlying react cluster and the thick proxy that lives on top of",
    "start": "2236720",
    "end": "2242560"
  },
  {
    "text": "each node that acts as your cloud storage layer becomes a really nice sweet spot to building cast solutions",
    "start": "2242560",
    "end": "2250079"
  },
  {
    "text": "a bunch of other environments where i'm in the middle of discussing",
    "start": "2250079",
    "end": "2255359"
  },
  {
    "text": "with with uh prospective customers and open source users and how to model their data",
    "start": "2255359",
    "end": "2260480"
  },
  {
    "text": "um now with any nosql solution this this steps outside of react um consider three",
    "start": "2260480",
    "end": "2267280"
  },
  {
    "text": "things query patterns how interconnected your data is",
    "start": "2267280",
    "end": "2273440"
  },
  {
    "text": "and whether you can build a polygot solution remember not every bit of your data problem is going to fit a kv",
    "start": "2273440",
    "end": "2280800"
  },
  {
    "text": "solution or a graph solution or a document orientated solution service orientated architecture is that",
    "start": "2280800",
    "end": "2287599"
  },
  {
    "text": "sweet spot between right tool for the right job um and it's something that if you've",
    "start": "2287599",
    "end": "2293280"
  },
  {
    "text": "seen yammer are using it that kind of style of distributing their uh",
    "start": "2293280",
    "end": "2298560"
  },
  {
    "text": "kind of architecture across a bunch of different databases to give them whatever edge they need to retrieve",
    "start": "2298560",
    "end": "2305440"
  },
  {
    "text": "the information they need as fast as they can and you see twitter doing it all the time with the way they re-architect",
    "start": "2305440",
    "end": "2311359"
  },
  {
    "text": "their their systems ultimately understand your data access",
    "start": "2311359",
    "end": "2316560"
  },
  {
    "text": "patterns if you can do that you'll naturally be able to know which database engine to choose",
    "start": "2316560",
    "end": "2324560"
  },
  {
    "text": "basho amir uh we've opened as i mentioned before a london office and uh",
    "start": "2324640",
    "end": "2330320"
  },
  {
    "text": "uh matthew our community manager can tell you more yeah so we we opened the london office in uh",
    "start": "2330320",
    "end": "2336320"
  },
  {
    "text": "may of this year um and what we're all about really is is",
    "start": "2336320",
    "end": "2342720"
  },
  {
    "text": "providing an environment in which it's easy to make use of react within within europe um so we want to",
    "start": "2342720",
    "end": "2350160"
  },
  {
    "text": "we want to be there for for people using it both open source and commercially so as uh chris was saying through data",
    "start": "2350160",
    "end": "2356400"
  },
  {
    "text": "modeling through helping identify whether react is correct for you um and implementing other other implementation",
    "start": "2356400",
    "end": "2363520"
  },
  {
    "text": "uh issues that you might have um so you can find us",
    "start": "2363520",
    "end": "2369119"
  },
  {
    "text": "um by uh well i'll show you in a minute but um you can find us at various different um",
    "start": "2369119",
    "end": "2375599"
  },
  {
    "text": "uh events around around europe right now will be basically all the trifolk events that",
    "start": "2375599",
    "end": "2381920"
  },
  {
    "text": "happen in around europe um will be anything where um",
    "start": "2381920",
    "end": "2388240"
  },
  {
    "text": "we're talking about kind of uh web scale development um and also we're doing various community",
    "start": "2388240",
    "end": "2394400"
  },
  {
    "text": "meetups so um we'll be in like last night we had a community meet up with our break here in",
    "start": "2394400",
    "end": "2400400"
  },
  {
    "text": "the city um where um it's we'll we we normally have a talk and then some pizza and beers um it's",
    "start": "2400400",
    "end": "2407680"
  },
  {
    "text": "about kind of getting together and just chatting about what what people are doing with react",
    "start": "2407680",
    "end": "2413280"
  },
  {
    "text": "but perhaps more interestingly um if you could skip on the next slide for the next one",
    "start": "2413280",
    "end": "2420400"
  },
  {
    "text": "this one we will come to you wherever you happen to be if your organization or",
    "start": "2420400",
    "end": "2426160"
  },
  {
    "text": "your your your local open source group or or whatever we'd like to know more about",
    "start": "2426160",
    "end": "2431280"
  },
  {
    "text": "react and whether it's something that's useful to you um we'll come to your location and give a tech talk um",
    "start": "2431280",
    "end": "2439359"
  },
  {
    "text": "so something that we we often do is at the moment we'll go and we'll do a lunch and learn where where a",
    "start": "2439359",
    "end": "2445440"
  },
  {
    "text": "group of people from an office will get together have lunch and we'll give a talk but we're also going to like say",
    "start": "2445440",
    "end": "2450480"
  },
  {
    "text": "open source groups and so on um and and giving a talk about react and then we can get into some of the detail about",
    "start": "2450480",
    "end": "2457680"
  },
  {
    "text": "whether react is right for your use case and and how to model multiple data um",
    "start": "2457680",
    "end": "2463119"
  },
  {
    "text": "with with react so if you go to bitly react tech talk you can sign up there",
    "start": "2463119",
    "end": "2468480"
  },
  {
    "text": "and we'll get in touch and organize something with you um there'll be no cost to you we'll just come out and give a tour and uh see if react is right for",
    "start": "2468480",
    "end": "2475839"
  },
  {
    "text": "you okay and of course any questions",
    "start": "2475839",
    "end": "2482640"
  },
  {
    "text": "uh can you ask about the public resolution yeah sure",
    "start": "2483280",
    "end": "2488319"
  },
  {
    "text": "yes banner inside their yeah about this why they are doing that and",
    "start": "2490880",
    "end": "2496079"
  },
  {
    "text": "especially apparently somehow it worked in the past without those atomic blocks",
    "start": "2496079",
    "end": "2501280"
  },
  {
    "text": "and now they are doing that right uh well it's very hard for me to comment on that because i don't know their hardware",
    "start": "2501280",
    "end": "2507760"
  },
  {
    "text": "environments with enough detail remember this is google so this isn't your typical tech company um they're far from",
    "start": "2507760",
    "end": "2513920"
  },
  {
    "text": "it so they can afford to spend money on gps units and atomic clocks in every data center to synchronize their",
    "start": "2513920",
    "end": "2520480"
  },
  {
    "text": "hardware so they have no uh clock uh drift happening within their",
    "start": "2520480",
    "end": "2525520"
  },
  {
    "text": "servers and therefore as you say conflict resolution is a last right wins process um",
    "start": "2525520",
    "end": "2532079"
  },
  {
    "text": "but most companies i mean react was built to scale on commodity hardware",
    "start": "2532079",
    "end": "2538480"
  },
  {
    "text": "we're not talking about i mean i had a conversation at one prospect at one stage where",
    "start": "2538480",
    "end": "2544079"
  },
  {
    "text": "i find the term commodity hardware is a difficult one to use in practice because",
    "start": "2544079",
    "end": "2549440"
  },
  {
    "text": "there we spoke up they asked me for throughput numbers on commodity hardware and i said well what exactly what kind",
    "start": "2549440",
    "end": "2555359"
  },
  {
    "text": "of hardware are you using and they said let's just assume commodity hardware and they were running at the moment they're",
    "start": "2555359",
    "end": "2561520"
  },
  {
    "text": "running mongodb for their solution and so we were having a talk and i said well we're going to you're going to get x y z",
    "start": "2561520",
    "end": "2566880"
  },
  {
    "text": "throughput numbers and they said that's extremely low uh we really expected a lot more from react and then i knuckled like i probed",
    "start": "2566880",
    "end": "2574560"
  },
  {
    "text": "them for details and i said well exactly what is your hardware they said 192 gig of ram and",
    "start": "2574560",
    "end": "2580640"
  },
  {
    "text": "i think it was 64 cores i don't call that commodity hardware um it really depends on the environment",
    "start": "2580640",
    "end": "2586960"
  },
  {
    "text": "that you're in what commodity hardware is to you if that's what your typical dba is allowed to buy",
    "start": "2586960",
    "end": "2592800"
  },
  {
    "text": "then i'd love to have a chat basically um but uh so whenever we talk with prospects i",
    "start": "2592800",
    "end": "2599839"
  },
  {
    "text": "typically like to suggest that we talk about um doing a benchmark benchmark react on",
    "start": "2599839",
    "end": "2607119"
  },
  {
    "text": "your hardware it's the best way for you to know real world numbers don't accept other people's word for what throughput",
    "start": "2607119",
    "end": "2612880"
  },
  {
    "text": "numbers are like okay don't accept our word go and use a benchmarking tool",
    "start": "2612880",
    "end": "2618079"
  },
  {
    "text": "and saturate your network saturate your disk i o throughput",
    "start": "2618079",
    "end": "2623119"
  },
  {
    "text": "and you'll see what your cluster is capable of with react sorry that didn't quite answer your",
    "start": "2623119",
    "end": "2628640"
  },
  {
    "text": "question i don't know enough about their their network infrastructure their hardware to be able to comment on i just",
    "start": "2628640",
    "end": "2636160"
  },
  {
    "text": "know that google are the ones who can afford to buy atomic clocks and and uh and gps units in every data center um",
    "start": "2636160",
    "end": "2644160"
  },
  {
    "text": "most tech companies can't",
    "start": "2644160",
    "end": "2648520"
  },
  {
    "text": "you",
    "start": "2651599",
    "end": "2653680"
  }
]