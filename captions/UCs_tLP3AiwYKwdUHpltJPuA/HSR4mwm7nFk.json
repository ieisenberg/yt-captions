[
  {
    "text": "so uh you usually don't run react on a single note it makes very very little sense to",
    "start": "12080",
    "end": "17279"
  },
  {
    "text": "do so um you could but you would lose all the all of the fun that react offers which is",
    "start": "17279",
    "end": "22880"
  },
  {
    "text": "distributing your data as distributing your data for performance as well as for",
    "start": "22880",
    "end": "28480"
  },
  {
    "text": "so failover we do uh we use the sha-1 uh key space so 160 bits and then we create a ring um so we",
    "start": "29519",
    "end": "37280"
  },
  {
    "text": "then we evenly divide this by the number of uh actual nodes when i say nodes that",
    "start": "37280",
    "end": "42800"
  },
  {
    "text": "mean physical nodes the way we get around this is when this changes we actually assign everything a virtual",
    "start": "42800",
    "end": "47920"
  },
  {
    "text": "node and then we change the size of how many virtual nodes are assigned to a physical node so that's why we can",
    "start": "47920",
    "end": "53760"
  },
  {
    "text": "actually divide it like that so here's how it looks so when you write data",
    "start": "53760",
    "end": "59600"
  },
  {
    "text": "your typical value for replication is three we recommend that we recommend you start off with at least five nodes",
    "start": "59600",
    "end": "66320"
  },
  {
    "text": "anything less you're not really building them for failover which is one of our strong suits so if you",
    "start": "66320",
    "end": "71520"
  },
  {
    "text": "aren't doing that you can totally get away with having a different end value but you're going to trade off your uh",
    "start": "71520",
    "end": "77759"
  },
  {
    "text": "your actual data consistency so in a disaster a node fails",
    "start": "77759",
    "end": "84560"
  },
  {
    "text": "so your data has already been distributed to three different nodes it is able to when you go to a node it's",
    "start": "84560",
    "end": "89759"
  },
  {
    "text": "able to know where that where the other data is at any given point in time um when it does fail",
    "start": "89759",
    "end": "95600"
  },
  {
    "text": "the request will go to the fallbacks the data will actually hand off to other nodes and then as soon as it comes back",
    "start": "95600",
    "end": "102079"
  },
  {
    "text": "online the data will redistribute automatically there's no this is built into the system there's no",
    "start": "102079",
    "end": "108640"
  },
  {
    "text": "you don't have to tell it oh this node has failed it will figure that out automatically",
    "start": "108640",
    "end": "113759"
  },
  {
    "text": "some of the features that we offer uh mapreduce full text search it's solar-like and i'll actually touch on",
    "start": "113759",
    "end": "119040"
  },
  {
    "text": "this later because we have a new backend that is coming that will make it fully solar-like",
    "start": "119040",
    "end": "124719"
  },
  {
    "text": "and secondary indices the secondary indices are uh only available with the leveldb",
    "start": "124719",
    "end": "131039"
  },
  {
    "text": "backend which is our three backends um level db is uh the google backend if",
    "start": "131039",
    "end": "136879"
  },
  {
    "text": "anyone's ever familiar with bigtable google uses that stores uh files on disk and uh sst's",
    "start": "136879",
    "end": "143760"
  },
  {
    "text": "camera with ssd stands for right now um that gives you secondary indexes it's",
    "start": "143760",
    "end": "149280"
  },
  {
    "text": "great when you can't fit your key space into memory um so you are going to have to write to disk you're gonna have to touch disk um it's great that it does",
    "start": "149280",
    "end": "156160"
  },
  {
    "text": "compact uh like a lot of the other solutions for distributed databases so you have different the reasons called",
    "start": "156160",
    "end": "161920"
  },
  {
    "text": "levels you have multiple levels of data so if you do have to search through every single level of data you're going to be doing a lot of seeks",
    "start": "161920",
    "end": "168959"
  },
  {
    "text": "so fastdisks and leveldb like each other a lot bitcast is what we actually have developed ourselves bitcast is just a",
    "start": "168959",
    "end": "175680"
  },
  {
    "text": "simple log appended you don't get secondary index indices but it's",
    "start": "175680",
    "end": "180959"
  },
  {
    "text": "it's very very fast high throughput and then there's a memory back end i wouldn't suggest that anyone use it",
    "start": "180959",
    "end": "187200"
  },
  {
    "text": "outside of testing because it's just it's just in memory so if you die you die",
    "start": "187200",
    "end": "193519"
  },
  {
    "text": "it's not very good new in 1.2 these are i only include these because a",
    "start": "193519",
    "end": "198879"
  },
  {
    "text": "lot of these were features that were asked for for a long long time um it used to be when you joined a node to a cluster you just join it and it just",
    "start": "198879",
    "end": "206080"
  },
  {
    "text": "immediately you know jumped on well if you're adding say 10 nodes to a cluster of 50 that's a lot of network traffic",
    "start": "206080",
    "end": "212319"
  },
  {
    "text": "and a lot of people are complaining because they don't necessarily have 10 gig e on the back end and that would just crush their networks so what we've",
    "start": "212319",
    "end": "218640"
  },
  {
    "text": "done is we've done a basically it's kind of like a svn you know you stage a commit and then",
    "start": "218640",
    "end": "224159"
  },
  {
    "text": "you can later you can stage a commit at any time you can set a crime job or something to actually commit it later",
    "start": "224159",
    "end": "230000"
  },
  {
    "text": "that makes the load on the network go by a lot easier it also means if you have a plan that you've set up that you don't",
    "start": "230000",
    "end": "235920"
  },
  {
    "text": "want to go with just clear capability negotiation used to be you had to run the exact same version of",
    "start": "235920",
    "end": "242080"
  },
  {
    "text": "rioc so rolling upgrades were a pain now we actually have a feature where you can have mixed versions no problems um",
    "start": "242080",
    "end": "248879"
  },
  {
    "text": "it will it will negotiate capabilities so that you know if you have a feature that is essay added in 1.3 it won't it",
    "start": "248879",
    "end": "255280"
  },
  {
    "text": "won't break it'll drop down to the lowest common denominator um better hand-off visibility this is a key thing",
    "start": "255280",
    "end": "261359"
  },
  {
    "text": "a lot of people want to know where the handoffs are happening and just because they see giant spikes network traffic and want to confirm that",
    "start": "261359",
    "end": "267199"
  },
  {
    "text": "things are actually passing from one node to the other correct this is a big one i'll touch on this the",
    "start": "267199",
    "end": "273600"
  },
  {
    "text": "repair k the repair kv and search via console uh used to be so we do re-repair so",
    "start": "273600",
    "end": "278960"
  },
  {
    "text": "value's out of date on a node you repair it on me the problem is if you have a lot of data",
    "start": "278960",
    "end": "284639"
  },
  {
    "text": "that's you know say that it's not right you couldn't there wasn't an easy way to go in and repair all of the values",
    "start": "284639",
    "end": "290639"
  },
  {
    "text": "that's something we've added in the latest version stats is a boring one uh for those who are big fans of freebsd",
    "start": "290639",
    "end": "297120"
  },
  {
    "text": "and smart os we added official packages and then the big ones uh eds uh",
    "start": "297120",
    "end": "303360"
  },
  {
    "text": "ssl built-in we used to use like stud or something in front of it and then granular controls the problem",
    "start": "303360",
    "end": "309360"
  },
  {
    "text": "we're having with multi-data server center or replication is the sheer quantity of data shifting you know going",
    "start": "309360",
    "end": "314560"
  },
  {
    "text": "over the uh excuse me going over the pipe um so we now have both real-time and full sync",
    "start": "314560",
    "end": "320560"
  },
  {
    "text": "there are a lot of customers who don't necessarily want all of their data passing over their wan interface constantly",
    "start": "320560",
    "end": "327360"
  },
  {
    "text": "and this is the the one i want to talk about we do have full text search it's not really like solar",
    "start": "327360",
    "end": "334160"
  },
  {
    "text": "this is solar so yokozuna is our new back end it's coming soon um i'll bug ryan to make it come sooner um",
    "start": "334160",
    "end": "341919"
  },
  {
    "text": "but it's basically this installs a solar instance on every right next to every react instance on every node",
    "start": "341919",
    "end": "347759"
  },
  {
    "text": "cool thing about this is you get you get full solar compatibility anything you can do in solar you can do and you can",
    "start": "347759",
    "end": "353280"
  },
  {
    "text": "do with yokozuna the nice thing is it's instead of being multiple instances on the solar side it's all you just query",
    "start": "353280",
    "end": "360720"
  },
  {
    "text": "one and then react does the distribution it still works like a distributed query works very quickly",
    "start": "360720",
    "end": "366800"
  },
  {
    "text": "and i would show you uh we have which is live on our documentation site right now i don't have wi-fi so again um",
    "start": "366800",
    "end": "374560"
  },
  {
    "text": "but uh the also the bonus here is we also have active anti-entropy this means that instead of having to do as i",
    "start": "374560",
    "end": "380880"
  },
  {
    "text": "mentioned earlier with uh you know repair doing read repair this is constantly going through and repairing values um so you can delete something",
    "start": "380880",
    "end": "388160"
  },
  {
    "text": "and it'll just know once once an exchange has happened between two nodes it realizes that something's changed",
    "start": "388160",
    "end": "393840"
  },
  {
    "text": "it's fixed then cs uh so rxcs is basically an s3",
    "start": "393840",
    "end": "402400"
  },
  {
    "text": "compatible storage engine that runs on top of prioc it does almost everything that s3 can do",
    "start": "402400",
    "end": "408080"
  },
  {
    "text": "i'm not going to say it could do everything that s3 can do because we still can't do a few few bits um but",
    "start": "408080",
    "end": "413520"
  },
  {
    "text": "it's very very very fast um it gives you all the fun things you get from s3 you get multi-tenancy multi-billing so you can",
    "start": "413520",
    "end": "419599"
  },
  {
    "text": "look at individual customer usage this is a big been a big request from enterprise customers",
    "start": "419599",
    "end": "424880"
  },
  {
    "text": "they really like to be able to use this just for different departments inside their own organization",
    "start": "424880",
    "end": "430800"
  },
  {
    "text": "this is how it works basically reaccess is just a very thin layer that then sits on top of react",
    "start": "430800",
    "end": "436960"
  },
  {
    "text": "so it uses multiple back ends on ryok but it's just a very it's just a small early process so typically to run react",
    "start": "436960",
    "end": "443520"
  },
  {
    "text": "cs right on top of react on the same you could run it on different nodes but",
    "start": "443520",
    "end": "448800"
  },
  {
    "text": "it doesn't make sense for the performance so devops this is what i do",
    "start": "448800",
    "end": "454880"
  },
  {
    "text": "our role at bachelor is to make things easier for everyone to install a lot of the problems we have with folks when we give them react is that first erlang",
    "start": "454880",
    "end": "461840"
  },
  {
    "text": "they're just they're befuddled by configuration files running it locally it gets it gets very",
    "start": "461840",
    "end": "467280"
  },
  {
    "text": "messy so a lot of the work that we have done on the devops side has been making it easier to use this is through chef",
    "start": "467280",
    "end": "472319"
  },
  {
    "text": "cookbooks uh public kennedy public recipes i think they're called",
    "start": "472319",
    "end": "477440"
  },
  {
    "text": "i'm going to demo the react dev cluster which is uh which is a ruby client written by our friends at zing or sorry",
    "start": "477440",
    "end": "483199"
  },
  {
    "text": "a rake system written by them that makes it really easy to spin up a local cluster for testing because that's the",
    "start": "483199",
    "end": "488319"
  },
  {
    "text": "biggest problem is getting people to download and compile erlang getting all the dependencies set up and then oh well you've got you're on os",
    "start": "488319",
    "end": "495039"
  },
  {
    "text": "10.7 you need this particular maybe this particular gcc",
    "start": "495039",
    "end": "500319"
  },
  {
    "text": "hardware recommendations that's something we've been working on recently a lot of our customers have pushed us to the point where we can't",
    "start": "500319",
    "end": "507199"
  },
  {
    "text": "actually test their scale they have 50 100 nodes and that's not easy to do if you don't have 50 to 100",
    "start": "507199",
    "end": "513518"
  },
  {
    "text": "nodes and some of these customers have you know insane specs for machines like maybe 8 000 pound machines that are you",
    "start": "513519",
    "end": "520479"
  },
  {
    "text": "know all ssds and you know 24 cores um so what we do is we uh we've been",
    "start": "520479",
    "end": "526399"
  },
  {
    "text": "testing the customer setups and then we we basically break riak a lot",
    "start": "526399",
    "end": "531440"
  },
  {
    "text": "that's what we do we set up test harnesses where we constantly pound it with our bachelor bench tool and then",
    "start": "531440",
    "end": "536640"
  },
  {
    "text": "once we find these edge cases we pass them off to app dev and we say here we found a new way that it's broken um so",
    "start": "536640",
    "end": "542160"
  },
  {
    "text": "that's what we've been doing a lot recently is breaking react and reox cs and then those enhancements have been rolled into the product",
    "start": "542160",
    "end": "548640"
  },
  {
    "text": "there are actually three or four releases that have been made in the past two months that have just been from",
    "start": "548640",
    "end": "554000"
  },
  {
    "text": "devops recommendations where we've seen you know break and this is again scales of 50 to 100",
    "start": "554000",
    "end": "561360"
  },
  {
    "text": "what we've learned uh linux kernel is really really bad defaults for high performance um it's",
    "start": "561760",
    "end": "568000"
  },
  {
    "text": "it's actually it's basically designed for the lowest common it's basically designed for i386",
    "start": "568000",
    "end": "573360"
  },
  {
    "text": "that's really bad when you have a database that's pushed it's able to saturate your network and your disk subsystems um so",
    "start": "573360",
    "end": "580160"
  },
  {
    "text": "don't ever use the linux kernel defaults with react it's it's a bad idea so some of the things we found mostly",
    "start": "580160",
    "end": "586399"
  },
  {
    "text": "tcp settings in the kernel far too conservative we're typically running react on real",
    "start": "586399",
    "end": "591680"
  },
  {
    "text": "physical hardware you can't run it in like something like ec2 but the latency that you get in a kind",
    "start": "591680",
    "end": "598399"
  },
  {
    "text": "of distributed urban industry but a virtualized system like that is there are no guarantees so we prefer low latency 10 gigabit high",
    "start": "598399",
    "end": "605440"
  },
  {
    "text": "throughput networks so you can tune tcp a lot the pd flash that i mentioned there um",
    "start": "605440",
    "end": "612560"
  },
  {
    "text": "dirty pages uh linux kernel doesn't is not optimized for high throughput for that also it expects swap for everything",
    "start": "612560",
    "end": "620560"
  },
  {
    "text": "um you're not going to swap if you have 32 gigs of ram or you shouldn't be swapping so that vm swappiness value is set to a",
    "start": "620560",
    "end": "627040"
  },
  {
    "text": "very set to 60 by default you drop that down to zero you never want the kernel to think that you can",
    "start": "627040",
    "end": "632320"
  },
  {
    "text": "swap um sir you probably won't have some swap there because a lot of applications die if you don't have swap but you never",
    "start": "632320",
    "end": "638320"
  },
  {
    "text": "want to be touching that uh i o schedulers terrible the default scheduler in kernel",
    "start": "638320",
    "end": "644160"
  },
  {
    "text": "2 6 and above is cfq i've i've done a cute little completely flawed queuing it's supposed to be fair",
    "start": "644160",
    "end": "651200"
  },
  {
    "text": "there's a deadline schedule and a no-op scheduler we've seen performance improvements of",
    "start": "651200",
    "end": "656480"
  },
  {
    "text": "about 200 when we change the schedulers it's it's really that bad it's basically",
    "start": "656480",
    "end": "662640"
  },
  {
    "text": "trying to say oh i'm going to give you know i'm going to fairly schedule every single process on the machine typically on these machines you're only running",
    "start": "662640",
    "end": "668399"
  },
  {
    "text": "one running one process and that's react that's something we've noticed yeah that's a lot of customers they're like",
    "start": "668399",
    "end": "674640"
  },
  {
    "text": "oh i'm getting terrible performance you know i'm maybe only getting ten thousand ops change the schedule or fifty thousand",
    "start": "674640",
    "end": "680480"
  },
  {
    "text": "eighty thousand um very easily um hardware load balancers aren't really as great as they're cracked up to be um",
    "start": "680480",
    "end": "687279"
  },
  {
    "text": "we run aj proxy locally on each react instance that way if any node goes down it's already aware of the other nodes in the",
    "start": "687279",
    "end": "693519"
  },
  {
    "text": "cluster um that actually is very small performance hit and it's a",
    "start": "693519",
    "end": "699040"
  },
  {
    "text": "lot more flexible than running hardware load balancers where you've had that hardware load bouncer being a single point of failure",
    "start": "699040",
    "end": "705600"
  },
  {
    "text": "and bachelor bench is our open source tool that we use to benchmark react it can be used to benchmark any kind of",
    "start": "705600",
    "end": "710880"
  },
  {
    "text": "key value store it's written in erlang and you can you have a bunch of different options for all the backends",
    "start": "710880",
    "end": "717839"
  },
  {
    "text": "i was going to show this off but this is uh if anyone was curious about playing with re-access we actually have a live demo that's running in our data center",
    "start": "717839",
    "end": "725279"
  },
  {
    "text": "it's multi-tenant so anyone can sign up you just put in you can actually just go to the site and request a login",
    "start": "725279",
    "end": "730639"
  },
  {
    "text": "and then our sales team gives them out and ask you how you're doing um but uh i",
    "start": "730639",
    "end": "736399"
  },
  {
    "text": "did want to show this because you're pretty graphic and things that's the end of my presentation my",
    "start": "736399",
    "end": "741600"
  },
  {
    "text": "part of the presentation but i want to show everyone our",
    "start": "741600",
    "end": "746720"
  },
  {
    "text": "ah it needs to be way bigger this is",
    "start": "746720",
    "end": "751600"
  },
  {
    "text": "bigger there we go so we have this little brake control",
    "start": "754320",
    "end": "760639"
  },
  {
    "text": "um so this if you want to set up react really quickly on your local system um",
    "start": "760639",
    "end": "766560"
  },
  {
    "text": "just do a i've already done a rake install but if i want to start up a new cluster a five",
    "start": "766560",
    "end": "772560"
  },
  {
    "text": "node cluster this will actually this is also for os 10 uh specifically so if you're not running os 10 it's actually",
    "start": "772560",
    "end": "778079"
  },
  {
    "text": "it's pretty easy to do it on a linux box but you have to again know how to compile early",
    "start": "778079",
    "end": "783839"
  },
  {
    "text": "so the other bits but this will show you what react actually looks like",
    "start": "783839",
    "end": "789920"
  },
  {
    "text": "take a second for this all to join",
    "start": "790000",
    "end": "794279"
  },
  {
    "text": "so what this will do this is actually going through joining each of the individual nodes to the first node",
    "start": "805360",
    "end": "811839"
  },
  {
    "text": "you don't have to join any specific node to any other node in a specific order once it's part of the ring you can join",
    "start": "811839",
    "end": "817040"
  },
  {
    "text": "any any node to any other node that knows what it's doing so this is react control this is a nice little web",
    "start": "817040",
    "end": "822160"
  },
  {
    "text": "interface you can very easily see the status of your cluster so the green check mark if you're running low on",
    "start": "822160",
    "end": "828560"
  },
  {
    "text": "memory or if a node is dropped out it's a big red x but here is the fun part so here you",
    "start": "828560",
    "end": "834240"
  },
  {
    "text": "actually see the actual distribution of partitions and this will actually change as these nodes uh oops i'll just reload",
    "start": "834240",
    "end": "842480"
  },
  {
    "text": "that page so as you see these numbers will actually change uh live and this is the these are the v nodes or partitions",
    "start": "842480",
    "end": "849120"
  },
  {
    "text": "that are being distributed between each of the individual nodes um so if i were to kill one of these",
    "start": "849120",
    "end": "855440"
  },
  {
    "text": "right now",
    "start": "855440",
    "end": "857839"
  },
  {
    "text": "so it'll read that as an error that node's gone down but then the numbers will actually change and redistribute as",
    "start": "861120",
    "end": "866320"
  },
  {
    "text": "it recognizes that that node is down like i said this is all based on an n value of three which is why we recommend",
    "start": "866320",
    "end": "872240"
  },
  {
    "text": "you have five nodes um so if you have three copies of your data five nodes you've got it spread around so you can suffer failure and the performance hit a",
    "start": "872240",
    "end": "878880"
  },
  {
    "text": "lot easier and that's all i have and i was going to pass it over to chris yeah",
    "start": "878880",
    "end": "886399"
  },
  {
    "text": "all right as seth mentioned uh i'm part of the client services team at basho and mia so the london office has been around",
    "start": "887120",
    "end": "894079"
  },
  {
    "text": "for about six months now i've been with bashar for about four months and",
    "start": "894079",
    "end": "899920"
  },
  {
    "text": "i wanted to take a different approach to this presentation i thought i could make it a little bit more interactive and",
    "start": "899920",
    "end": "905440"
  },
  {
    "text": "basically hand it back over to you i mean i would like to ask has anyone actually experimented with react before this talk",
    "start": "905440",
    "end": "915199"
  },
  {
    "text": "no one else's experiment was weird okay um to explain how you could get started get",
    "start": "915199",
    "end": "921680"
  },
  {
    "text": "working with react typically as was mentioned i think with the cassandra talk you know cassandra has a query",
    "start": "921680",
    "end": "928000"
  },
  {
    "text": "language react speaks just http rest direct",
    "start": "928000",
    "end": "933120"
  },
  {
    "text": "it was built from the ground up to speak through a rest interface recently in",
    "start": "933120",
    "end": "939440"
  },
  {
    "text": "a couple of versions are going out it's been press stable for quite a long time now we introduced the protocol buffers transport layer as well and so all of",
    "start": "939440",
    "end": "946639"
  },
  {
    "text": "our official client libraries and many of our community supported client libraries can talk both the http",
    "start": "946639",
    "end": "952480"
  },
  {
    "text": "interface and the protocol buffers transport interface okay and that in a",
    "start": "952480",
    "end": "957920"
  },
  {
    "text": "production environment we pretty much recommend that you use the protocol buffers interface",
    "start": "957920",
    "end": "963040"
  },
  {
    "text": "because the http header overhead and some of the condition to go into being a uh",
    "start": "963040",
    "end": "968639"
  },
  {
    "text": "faithful implementation of http protocol specification means that there's a little bit more overhead than there",
    "start": "968639",
    "end": "974000"
  },
  {
    "text": "should be to respond to your requests so if you want to be in a production environment in whatever implementation",
    "start": "974000",
    "end": "979759"
  },
  {
    "text": "language your your application has been developed in whether it's java python ruby",
    "start": "979759",
    "end": "986160"
  },
  {
    "text": "c-sharp whatever typically when you switch you could do a lot of easy development in http and then",
    "start": "986160",
    "end": "992639"
  },
  {
    "text": "when you want to switch to production you can easily switch the knob over to protocol buffers and you'll get that",
    "start": "992639",
    "end": "998240"
  },
  {
    "text": "performance improvement um the there are typical there's there's a lot",
    "start": "998240",
    "end": "1004560"
  },
  {
    "text": "of scenarios where people go well what is react sweet spot when should i use react when i when should i not use real",
    "start": "1004560",
    "end": "1010880"
  },
  {
    "text": "and we like to just like basho we do our own benchmarks we do our",
    "start": "1010880",
    "end": "1016160"
  },
  {
    "text": "own performance tuning and we try to keep as open as we can to all of the research work and all the developments",
    "start": "1016160",
    "end": "1022560"
  },
  {
    "text": "going on in the other databases that's extremely hard to do because things like rethink db i don't know if you guys are",
    "start": "1022560",
    "end": "1028319"
  },
  {
    "text": "aware of that just recently was announced about two weeks ago that was a um re-announcement of a product that was",
    "start": "1028319",
    "end": "1035120"
  },
  {
    "text": "being developed a few years ago so the the nosql database landscape continues to grow at a a alarming rate okay so i",
    "start": "1035120",
    "end": "1043520"
  },
  {
    "text": "haven't had a chance to do any um analysis of rethink tv i don't know where their sweet spot is yet in the",
    "start": "1043520",
    "end": "1049360"
  },
  {
    "text": "market so please don't ask me anything about rethink um but",
    "start": "1049360",
    "end": "1054400"
  },
  {
    "text": "with react typically this is going to sound extremely obvious but if you can de-normalize as much as possible you can do a pure kv lookup",
    "start": "1054400",
    "end": "1061600"
  },
  {
    "text": "that is going to be our sweet spot things like user profiles we've got a lot of companies like um",
    "start": "1061600",
    "end": "1068000"
  },
  {
    "text": "rovio and riot games who are customers of us and what they do is they use use a",
    "start": "1068000",
    "end": "1073760"
  },
  {
    "text": "reactor store user session then it's a gaming session state and that's very",
    "start": "1073760",
    "end": "1078880"
  },
  {
    "text": "a beautiful kv story because you know the user's id so you can use that as",
    "start": "1078880",
    "end": "1084240"
  },
  {
    "text": "your key to your your records okay you can denormalize as much as possible it's one request and you can retrieve uh in",
    "start": "1084240",
    "end": "1092080"
  },
  {
    "text": "one lookup everything you need for their latest game session um other use cases i've been working found a lot of",
    "start": "1092080",
    "end": "1098480"
  },
  {
    "text": "interest recently from people developing content addressable storage solutions and i like this one because it's a",
    "start": "1098480",
    "end": "1105039"
  },
  {
    "text": "mashup of taking advantage of the fact that react cs our cloud storage platform sits as a thick proxy just right on top",
    "start": "1105039",
    "end": "1112640"
  },
  {
    "text": "of your react cluster okay so really what you get when you pay for the enterprise bikes you get that thick",
    "start": "1112640",
    "end": "1118320"
  },
  {
    "text": "proxy to handle distributing and dividing up those file objects into blocks that we can then store to disk",
    "start": "1118320",
    "end": "1124960"
  },
  {
    "text": "and replicate for data redundancy and and availability um but with the content",
    "start": "1124960",
    "end": "1131039"
  },
  {
    "text": "adjustable storage solution what you can do is you can store file metadata information and user account information",
    "start": "1131039",
    "end": "1136720"
  },
  {
    "text": "into the underlying react storage engine but then still access to the s3 layer for your actual files so",
    "start": "1136720",
    "end": "1144640"
  },
  {
    "text": "we've got people building their dropbox style clones so things like some sort of demon process maybe in",
    "start": "1144640",
    "end": "1150799"
  },
  {
    "text": "python or java or whatever sitting on a on a customer's machine or in one of their business units uh data centers",
    "start": "1150799",
    "end": "1158080"
  },
  {
    "text": "going and constantly kind of um calling out to the react",
    "start": "1158080",
    "end": "1164240"
  },
  {
    "text": "underlying under the cs layout react core product going in talking to that getting a file listing getting a listing",
    "start": "1164240",
    "end": "1170720"
  },
  {
    "text": "of all the s3 file handles that you need to pull those files back out and store them",
    "start": "1170720",
    "end": "1176559"
  },
  {
    "text": "a local copy and you can that happens as a synchronous process asynchronous process to to",
    "start": "1176559",
    "end": "1182720"
  },
  {
    "text": "pull that data um as fast as possible and keep it in sync the way that dropbox and their if you're aware of their storage solution how they",
    "start": "1182720",
    "end": "1189120"
  },
  {
    "text": "do that so a lot of customers are using that at the moment what i would always recommend when",
    "start": "1189120",
    "end": "1195360"
  },
  {
    "text": "deciding whether or not react is a sweet spot for your use case is think about your query patterns okay it",
    "start": "1195360",
    "end": "1203280"
  },
  {
    "text": "seems obvious but some databases like cassandra are as was mentioned right optimized react is a",
    "start": "1203280",
    "end": "1209919"
  },
  {
    "text": "pretty much agnostic to that it will let you read as fast as it let you write you know and then you're really constrained",
    "start": "1209919",
    "end": "1215440"
  },
  {
    "text": "by what whatever your disk subsystem is allowing you to write to this okay we don't do buffering in memory uh to to",
    "start": "1215440",
    "end": "1222559"
  },
  {
    "text": "kind of bulk together block load these rights and then and then push them to disk we write as fast as you",
    "start": "1222559",
    "end": "1229440"
  },
  {
    "text": "let us write to disk basically based on the hardware spec that you've got you can do neat some neat things with",
    "start": "1229440",
    "end": "1235039"
  },
  {
    "text": "that i can't remember who it was at the front who asked about that but um asked about ssds and optimizing with ssds",
    "start": "1235039",
    "end": "1241760"
  },
  {
    "text": "right what you can do if you you you don't necessarily need to ever solve the problem that you're talking",
    "start": "1241760",
    "end": "1247280"
  },
  {
    "text": "about at the database layer you could actually do the same thing with cassandra you can basically take cfs",
    "start": "1247280",
    "end": "1253039"
  },
  {
    "text": "we're big fans of zfs as a great file system that allows you to use an ssd as",
    "start": "1253039",
    "end": "1258640"
  },
  {
    "text": "a kind of a what they call an l2 arc cache think of it as a",
    "start": "1258640",
    "end": "1263679"
  },
  {
    "text": "extension to your ram that can can maintain your hot data set",
    "start": "1263679",
    "end": "1268880"
  },
  {
    "text": "and then obviously everything else is managed auto managed by the zfs subsystem to actually make sure that",
    "start": "1268880",
    "end": "1275600"
  },
  {
    "text": "it's on the spin discs that are in the rest of your storage layer that's really nice because then you can keep it cost",
    "start": "1275600",
    "end": "1281039"
  },
  {
    "text": "effective you get an ssd a modest size ssd that can almost bumps up your ram count basically and",
    "start": "1281039",
    "end": "1288240"
  },
  {
    "text": "then you can use cheap spin discs to actually store the data for as many years as you want to store it for",
    "start": "1288240",
    "end": "1294480"
  },
  {
    "text": "so we find that that's something that i typically recommend because i spend a lot of my time doing a combination of",
    "start": "1294480",
    "end": "1299919"
  },
  {
    "text": "data modeling trying to help people find the correct balance between when should i be using secondary indexes when is",
    "start": "1299919",
    "end": "1306720"
  },
  {
    "text": "link walking appropriate how does this work under the hood should i be doing that reduce operations",
    "start": "1306720",
    "end": "1315200"
  },
  {
    "text": "what's the key set that the size that i could really do efficiently um",
    "start": "1315200",
    "end": "1321280"
  },
  {
    "text": "within react you know how bounded is that is that access for say real-time analytics um",
    "start": "1321280",
    "end": "1327360"
  },
  {
    "text": "typically these problems can all be solved by pulling them away from the request chain",
    "start": "1327360",
    "end": "1334240"
  },
  {
    "text": "that comes in from your application layer um so let's say that you're building a mobile",
    "start": "1334240",
    "end": "1340480"
  },
  {
    "text": "app and your mobile app has to sustain i've seen people talking about kind of 30 000 ops per second",
    "start": "1340480",
    "end": "1349200"
  },
  {
    "text": "across a modest cluster running an ec2 not the greatest hardware",
    "start": "1349360",
    "end": "1354720"
  },
  {
    "text": "it's possible but what you want to do is not be doing map reduce operations",
    "start": "1354720",
    "end": "1359919"
  },
  {
    "text": "linked to every single one of those requests that are hitting 1000 keys on your on your uh cluster",
    "start": "1359919",
    "end": "1366159"
  },
  {
    "text": "it's it's gonna not you're not gonna get the throughput and the latencies that you're looking for",
    "start": "1366159",
    "end": "1371840"
  },
  {
    "text": "you will be constrained at that stage so what you can do is work around that by basically",
    "start": "1371840",
    "end": "1378080"
  },
  {
    "text": "for a time series use case for example you take time boxes so you you pick sort of time increments that you want to box",
    "start": "1378080",
    "end": "1384559"
  },
  {
    "text": "up into some sort of what we call buckets and react just logical name spaces for your keys and",
    "start": "1384559",
    "end": "1390720"
  },
  {
    "text": "then roll them up as a background process and do background processing to actually take the map reduce across that",
    "start": "1390720",
    "end": "1396480"
  },
  {
    "text": "key set and then fold that into what is a single record that then gets pushed into your one minute bucket or your one",
    "start": "1396480",
    "end": "1404159"
  },
  {
    "text": "hour bucket and and you can almost end up using the system to do roll-ups like that and that allows you to do",
    "start": "1404159",
    "end": "1410960"
  },
  {
    "text": "everything you could do with the analytics that you need to do without really worrying about do i need to do",
    "start": "1410960",
    "end": "1417840"
  },
  {
    "text": "do i need to attach this request chain these this heavy uh read or write throughput that i'm pushing through my",
    "start": "1417840",
    "end": "1423760"
  },
  {
    "text": "system directly into the cluster and have it service them all in one go you",
    "start": "1423760",
    "end": "1429039"
  },
  {
    "text": "know write it into a bucket let a background process go in and then fold that you know reduce that result set and",
    "start": "1429039",
    "end": "1435919"
  },
  {
    "text": "then store it again to another bucket um one of our customers boundary and they do they've got a network daemon that",
    "start": "1435919",
    "end": "1442559"
  },
  {
    "text": "goes on servers and then we'll stream uh information about kind of",
    "start": "1442559",
    "end": "1447679"
  },
  {
    "text": "network latencies and other kind of network topology information each of those daemons is attached on a",
    "start": "1447679",
    "end": "1454400"
  },
  {
    "text": "computer and accesses a react cluster in their infrastructure but",
    "start": "1454400",
    "end": "1459440"
  },
  {
    "text": "we don't they don't do a mapreduce operation when they're doing their analytics to display their graphs to",
    "start": "1459440",
    "end": "1464960"
  },
  {
    "text": "customers they don't attach that to their request chain they use time boxes and then roll it up",
    "start": "1464960",
    "end": "1471039"
  },
  {
    "text": "so there are if you start the problem when you compare then this is something i come across quite often",
    "start": "1471039",
    "end": "1476799"
  },
  {
    "text": "it's impossible really to compare relational databases to these schemas designs because you're talking about",
    "start": "1476799",
    "end": "1484000"
  },
  {
    "text": "different trailers and different throughput and different latencies so once you understand that you have to",
    "start": "1484000",
    "end": "1489840"
  },
  {
    "text": "start thinking about your data model in a lot more detail than you would have done before i mean i was a little bit",
    "start": "1489840",
    "end": "1495760"
  },
  {
    "text": "late to this event because i was in a meeting earlier and in the meeting we were talking about how can we put together a handbook and in that handbook",
    "start": "1495760",
    "end": "1503279"
  },
  {
    "text": "describe uh typical patterns for a relational mindset to move into the into",
    "start": "1503279",
    "end": "1510159"
  },
  {
    "text": "a react denormalized kb mindset i i'm not a fan of that process because",
    "start": "1510159",
    "end": "1516240"
  },
  {
    "text": "that process is trying to offload the thought patterns that go into actually caring about how to model the data",
    "start": "1516240",
    "end": "1522320"
  },
  {
    "text": "problem into something that can be um turned into a learn by rote approach and",
    "start": "1522320",
    "end": "1530480"
  },
  {
    "text": "there's too many variables to account for to get the kind of efficiency that we're looking for these days and the",
    "start": "1530480",
    "end": "1535679"
  },
  {
    "text": "right throughput and volume of access that we need in a highly available system um the",
    "start": "1535679",
    "end": "1541600"
  },
  {
    "text": "reason i asked so much actually about distributed counters earlier because it's an extremely hard problem to solve",
    "start": "1541600",
    "end": "1547679"
  },
  {
    "text": "uh cassandra have an interesting implementation and it's a a lot of work that we're doing at the moment and one",
    "start": "1547679",
    "end": "1553440"
  },
  {
    "text": "of our research projects is into commutative resultant data types and these data types allow you to",
    "start": "1553440",
    "end": "1561200"
  },
  {
    "text": "basically they're particular a particular subset of all data types of",
    "start": "1561200",
    "end": "1566960"
  },
  {
    "text": "abstract data types they can be known to be monotonic structures which means they're known to",
    "start": "1566960",
    "end": "1572000"
  },
  {
    "text": "grow in size okay so for instance if you take the set union of two sets where you",
    "start": "1572000",
    "end": "1577760"
  },
  {
    "text": "know these sets are never going to be reduced then you can just do the set union operation and then you'll have",
    "start": "1577760",
    "end": "1583919"
  },
  {
    "text": "your complete record set when you're doing some sort of conflict resolution on concurrent rights um these this kind",
    "start": "1583919",
    "end": "1590960"
  },
  {
    "text": "of research is very interesting stuff uh it's extremely hard problem to solve in a distributed system",
    "start": "1590960",
    "end": "1597600"
  },
  {
    "text": "and especially if you don't want to introduce lots of any kind of some sort of transaction mechanism but we're doing a lot of research into",
    "start": "1597600",
    "end": "1603440"
  },
  {
    "text": "that and one of the things that seth mentioned was a i'll work in yokozuna for research that",
    "start": "1603440",
    "end": "1610000"
  },
  {
    "text": "takes advantage of previous research we've done with this active anti-entropy technology which is",
    "start": "1610000",
    "end": "1616640"
  },
  {
    "text": "one of the areas where it was possible for you to lose data in previous versions of react this is",
    "start": "1616640",
    "end": "1622640"
  },
  {
    "text": "pre 1.0 was that you could basically react with do read repair when you next",
    "start": "1622640",
    "end": "1629120"
  },
  {
    "text": "read the value right so if you have replicas of that data when you do a read it will go and it will uh request all of",
    "start": "1629120",
    "end": "1634960"
  },
  {
    "text": "the replicas and then verify whether there's stale data that needs to be updated with the current primaries",
    "start": "1634960",
    "end": "1640399"
  },
  {
    "text": "primary copies of that data okay but if those stale keys haven't been read for a",
    "start": "1640399",
    "end": "1645679"
  },
  {
    "text": "long time and that node has been downed and come back online it could well be that at",
    "start": "1645679",
    "end": "1651360"
  },
  {
    "text": "some other stage in time another node in the system goes down that has the other primary copy and then another one and",
    "start": "1651360",
    "end": "1657840"
  },
  {
    "text": "all these happen at different time periods but happen before the next read of that key has happened",
    "start": "1657840",
    "end": "1664559"
  },
  {
    "text": "so what has actually happened is that you've now got three stale copies of that data and you and you're unable to",
    "start": "1664559",
    "end": "1670399"
  },
  {
    "text": "determine which one is the most up-to-date copy and therefore makes uh kind of bring push that consistency back",
    "start": "1670399",
    "end": "1676399"
  },
  {
    "text": "up which is what the read repair operation does active anti-entropy is think of it as a",
    "start": "1676399",
    "end": "1681840"
  },
  {
    "text": "background process which constantly actually the",
    "start": "1681840",
    "end": "1686880"
  },
  {
    "text": "new structure we use for storing on this makes it much more efficient but it accesses the these v nodes and access of",
    "start": "1686880",
    "end": "1694399"
  },
  {
    "text": "the data partitions and determines has anything changed here if it has let me make sure i do it run",
    "start": "1694399",
    "end": "1700480"
  },
  {
    "text": "reprepare and push this consistency up and that no longer has to happen on every request on every read this happens",
    "start": "1700480",
    "end": "1706880"
  },
  {
    "text": "as a background process and that work is going into our one point three release which should be december january tonight",
    "start": "1706880",
    "end": "1714399"
  },
  {
    "text": "yeah i'll say i'll say christmas time yeah yeah that's the christmas gift right um",
    "start": "1714399",
    "end": "1720559"
  },
  {
    "text": "and that will yeah that's paves the way for work with yokozuna which again is this um",
    "start": "1720559",
    "end": "1726880"
  },
  {
    "text": "direct integration between the jvm and the airline vm so that we can",
    "start": "1726880",
    "end": "1732480"
  },
  {
    "text": "control and spin up jvm instances alongside euroland vm and allow it to be auto managed allowing you to define",
    "start": "1732480",
    "end": "1738960"
  },
  {
    "text": "indexes that you want to be searchable and copied across into your lucene",
    "start": "1738960",
    "end": "1744640"
  },
  {
    "text": "and solar indexing so you can do distributed queries over that data",
    "start": "1744640",
    "end": "1750320"
  },
  {
    "text": "yeah i wonder if anyone has any questions is there anything you'd like to know about",
    "start": "1750320",
    "end": "1757200"
  },
  {
    "text": "react versus cassandra maybe um i have that question a lot we have we",
    "start": "1757200",
    "end": "1762480"
  },
  {
    "text": "have different sweet spots at this stage in time if you want to do distributed counters or you want to do time series",
    "start": "1762480",
    "end": "1768799"
  },
  {
    "text": "data then i would still say go with cassandra but if you want to do",
    "start": "1768799",
    "end": "1774480"
  },
  {
    "text": "denormalized pure kv lookups and you want to make sure that you can scale because as far as i'm aware correct me",
    "start": "1774480",
    "end": "1780720"
  },
  {
    "text": "if i'm wrong but the v node implementation in cassandra is not it's in master i think but hasn't yet been",
    "start": "1780720",
    "end": "1787200"
  },
  {
    "text": "resolved alongside rack awareness so scale factoring in cassandra means",
    "start": "1787200",
    "end": "1792960"
  },
  {
    "text": "either manually recalculating your v note distribution or scaling the factor of two so you can evenly",
    "start": "1792960",
    "end": "1799039"
  },
  {
    "text": "divide your data blocks and then distribute them across your your new nodes",
    "start": "1799039",
    "end": "1804559"
  },
  {
    "text": "so we have different sweet spots you can do time series in react like i said boundary do it but it requires",
    "start": "1804559",
    "end": "1813360"
  },
  {
    "text": "a lot more thought into your data model where an environment like cassandra which gives you this ability to do partial updates because of their column",
    "start": "1813440",
    "end": "1820000"
  },
  {
    "text": "family orientated database will give them an edge in time series problems",
    "start": "1820000",
    "end": "1826480"
  },
  {
    "text": "yeah so if you want to still gain session data you want to do a time series like",
    "start": "1826480",
    "end": "1832559"
  },
  {
    "text": "boundary does with their analytics platform or content addressable storage",
    "start": "1832559",
    "end": "1838480"
  },
  {
    "text": "or anything that can be denormalized into a pure kv problem and uh you want fast reads or fast rights",
    "start": "1838480",
    "end": "1847120"
  },
  {
    "text": "yeah do you have any questions yeah so the i've got interested by the thing you mentioned is a",
    "start": "1847120",
    "end": "1853679"
  },
  {
    "text": "sound a bit like mac produce mapreduce kind of pattern okay do you where you so you're saying put it into a bucket yeah",
    "start": "1853679",
    "end": "1860480"
  },
  {
    "text": "you have another juice on that well yeah put the put the value basically uh as with any of these",
    "start": "1860480",
    "end": "1866720"
  },
  {
    "text": "uh schema-less database engines you really need to think about what is going to be your index what's going to be your key",
    "start": "1866720",
    "end": "1873120"
  },
  {
    "text": "right and in the time series problem your key is going to be something and some sort of time stamp of some kind",
    "start": "1873120",
    "end": "1879600"
  },
  {
    "text": "right so if you can put those those keys into a particular bucket a logical name space like you would in react then you",
    "start": "1879600",
    "end": "1886240"
  },
  {
    "text": "can store 70 80 90 100 ticks in there and after your tick count has reached a",
    "start": "1886240",
    "end": "1893039"
  },
  {
    "text": "certain failover in time you pick up another bucket and then your background process sweeps through does a map reduce",
    "start": "1893039",
    "end": "1899600"
  },
  {
    "text": "operation over that bucket which is now a closed off time box so you know no more records are going to be pushed into",
    "start": "1899600",
    "end": "1905360"
  },
  {
    "text": "that bucket you can then flatten that into one record push it back into react",
    "start": "1905360",
    "end": "1911759"
  },
  {
    "text": "that's how bad bound you do it is that is that part of it's not part of react obviously it's",
    "start": "1912240",
    "end": "1918240"
  },
  {
    "text": "not you do it's uh what a i mean uh we i",
    "start": "1918240",
    "end": "1923279"
  },
  {
    "text": "i do a lot of uh data modeling work with uh people that want to use react whether it's open source on the mailing list or",
    "start": "1923279",
    "end": "1928480"
  },
  {
    "text": "whether it later becomes enterprise stuff and a lot of that becomes yeah talking about how we can think",
    "start": "1928480",
    "end": "1934880"
  },
  {
    "text": "differently about storing that storing that data and that time boxing process",
    "start": "1934880",
    "end": "1939919"
  },
  {
    "text": "you would have to build i mean we've got erlang mapreduce phases that you can pre-build operations that",
    "start": "1939919",
    "end": "1946720"
  },
  {
    "text": "you can then use to do that time box reduce but the actual process of taking your",
    "start": "1946720",
    "end": "1952720"
  },
  {
    "text": "application layer logic to push it and logically name spacing that time",
    "start": "1952720",
    "end": "1958240"
  },
  {
    "text": "would be a problem that you saw in the application there there's no pre-built solution for react",
    "start": "1958240",
    "end": "1964320"
  },
  {
    "text": "but there's a lot of people that are doing it and the mailing list is full of people that could help them explain",
    "start": "1964320",
    "end": "1970480"
  },
  {
    "text": "myself included the best way to go forwards with it yeah",
    "start": "1970480",
    "end": "1976399"
  },
  {
    "text": "cool any questions",
    "start": "1976399",
    "end": "1980760"
  }
]