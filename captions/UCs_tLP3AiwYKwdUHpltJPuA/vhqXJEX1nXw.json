[
  {
    "start": "0",
    "end": "66000"
  },
  {
    "text": "so we would enjoy the tea now this morning papito here today which is very",
    "start": "0",
    "end": "9719"
  },
  {
    "text": "language",
    "start": "9719",
    "end": "11990"
  },
  {
    "text": "so by weight reduction my name is marc de Vaca writing code in some form or",
    "start": "15090",
    "end": "20950"
  },
  {
    "text": "another for 30 years now I grew up with visa and logo and then evolved into",
    "start": "20950",
    "end": "27910"
  },
  {
    "text": "Pascal and alldata called a fun-stopper day to see a c++ and pearl and moved",
    "start": "27910",
    "end": "36670"
  },
  {
    "text": "through java world and sharper old expose you see the retina there to see",
    "start": "36670",
    "end": "44610"
  },
  {
    "text": "and then i started in working on spin and i've written and take doesn't match",
    "start": "46410",
    "end": "53770"
  },
  {
    "text": "for mac and iOS",
    "start": "53770",
    "end": "56850"
  },
  {
    "text": "so the asset work on you ability to the world the best web series",
    "start": "60500",
    "end": "67940"
  },
  {
    "start": "66000",
    "end": "99000"
  },
  {
    "text": "last year apple developer conference WWDC back into that was worth of data",
    "start": "67940",
    "end": "74180"
  },
  {
    "text": "that came out of the people britvic 10",
    "start": "74180",
    "end": "82400"
  },
  {
    "text": "could not get finalized until summer of last year and the version that were on right now what got you there was still a",
    "start": "82400",
    "end": "91850"
  },
  {
    "text": "very young language people to so pick",
    "start": "91850",
    "end": "100490"
  },
  {
    "text": "show dance with anyone here actually Virginia was with one two three four five",
    "start": "100490",
    "end": "107300"
  },
  {
    "text": "let's say like attention so furniture",
    "start": "107300",
    "end": "114560"
  },
  {
    "start": "112000",
    "end": "147000"
  },
  {
    "text": "start out with just like a real drag high level overview of the Swift syntax",
    "start": "114560",
    "end": "119770"
  },
  {
    "text": "and how it's similar to then I'm going to submit through the",
    "start": "119770",
    "end": "137239"
  },
  {
    "text": "will read them off yet so we can sort out very quick summary of the language",
    "start": "144470",
    "end": "153150"
  },
  {
    "start": "147000",
    "end": "198000"
  },
  {
    "text": "actually pretty difficult to read in the lights plan but I'm going to anyway so",
    "start": "153150",
    "end": "163019"
  },
  {
    "text": "give classes that's very similar to classes in job or their java developers",
    "start": "163019",
    "end": "169379"
  },
  {
    "text": "here so are there any shark filters so a",
    "start": "169379",
    "end": "175410"
  },
  {
    "text": "few so it seemed like a lot of you who completed sighs pretend you're familiar with last based on foreign language so",
    "start": "175410",
    "end": "182340"
  },
  {
    "text": "junior class is the bank and it's got curly braces curly braces are using Skinner to track",
    "start": "182340",
    "end": "188510"
  },
  {
    "text": "letting out and lock code you have properties on your classes and",
    "start": "188510",
    "end": "197630"
  },
  {
    "text": "visualizers and you've got methods and and you've got all of that stuff is basically following the z nu de facto",
    "start": "197630",
    "end": "204870"
  },
  {
    "text": "that new defective would be long-running de facto c++ standards impacts will be a lot more familiar to people then people",
    "start": "204870",
    "end": "211800"
  },
  {
    "text": "who are say coming to objective-c that has all of the other crazy braces so for",
    "start": "211800",
    "end": "216870"
  },
  {
    "text": "those objects see programs out there this is a quick example of how you might implement the same class in objective-c",
    "start": "216870",
    "end": "222720"
  },
  {
    "text": "again really difficult to read but m but it has all the interfaces and",
    "start": "222720",
    "end": "227900"
  },
  {
    "text": "implementations and separate header areas and if it doesn't look familiar to you don't worry about it because you",
    "start": "227900",
    "end": "233519"
  },
  {
    "text": "will probably never have to learn about it as the Swift is apple's replacement for objective-c going forward so we've",
    "start": "233519",
    "end": "240989"
  },
  {
    "text": "got a bunch of java and c TR programmers here as well so i'm going to be from",
    "start": "240989",
    "end": "249300"
  },
  {
    "text": "here on out I'm going to be referencing things relative to say javis intact when I talk about the syntax of Swift because",
    "start": "249300",
    "end": "255989"
  },
  {
    "text": "that seems to be the dominant the dominant paradigm so a very quick start",
    "start": "255989",
    "end": "263070"
  },
  {
    "text": "I'm going to this is a example of a swift class and this example of a Java",
    "start": "263070",
    "end": "268260"
  },
  {
    "text": "class and they're basically line by line identical the only major difference that",
    "start": "268260",
    "end": "273840"
  },
  {
    "text": "you can see is the type in Java and in most of the languages proceeds the",
    "start": "273840",
    "end": "280470"
  },
  {
    "text": "identifier and in Swift the type comes after the identifier so here you have this VAR accounts and followed by an",
    "start": "280470",
    "end": "286560"
  },
  {
    "text": "array of accounts in Java you have list of accounts followed by accounts and to",
    "start": "286560",
    "end": "293060"
  },
  {
    "text": "specify that it's a variable you had the bar keyword similarly for functions and",
    "start": "293060",
    "end": "298500"
  },
  {
    "text": "methods you have and Java you have the return type is an",
    "start": "298500",
    "end": "303690"
  },
  {
    "text": "inch and you have this holding function all these methods that goes to the challenge and aggregates and number of",
    "start": "303690",
    "end": "309210"
  },
  {
    "text": "pennies in the account and the returns at the end almost exactly the same with whips except the type follows the",
    "start": "309210",
    "end": "314539"
  },
  {
    "text": "identifier of the function but you've got you know some fastener ratio some",
    "start": "314539",
    "end": "319940"
  },
  {
    "text": "fascination and and you aggregate all the accounts and return it so pretty standard stuff it looked you know it",
    "start": "319940",
    "end": "326310"
  },
  {
    "text": "auto looks very familiar to pretty much everyone here so you know the big differences the other big difference is",
    "start": "326310",
    "end": "332669"
  },
  {
    "text": "you'll notice is a lack of semicolons and Swift you know the colons are optional but not required and then these",
    "start": "332669",
    "end": "339330"
  },
  {
    "text": "funkin bar keywords and the identifier following the type following the",
    "start": "339330",
    "end": "345900"
  },
  {
    "text": "identifier supplied by the function VAR keyword so there are a few there are a",
    "start": "345900",
    "end": "351449"
  },
  {
    "start": "349000",
    "end": "434000"
  },
  {
    "text": "few modern improvement especially over objective c you have you have generics",
    "start": "351449",
    "end": "356460"
  },
  {
    "text": "you're able to say that your array is going to only contain strings are able to parameterize your types so you know",
    "start": "356460",
    "end": "362849"
  },
  {
    "text": "here you can add a d to my list of strings but you cannot add a one debt to that's actually new for objective-c",
    "start": "362849",
    "end": "368610"
  },
  {
    "text": "programmers obviously the rest of the world as compiled languages has long",
    "start": "368610",
    "end": "373620"
  },
  {
    "text": "since adopted generic you've got type inference so rather than having to say you know okay there's a number of type",
    "start": "373620",
    "end": "380070"
  },
  {
    "text": "int N equals 1 array of strings dictionary of strings to double you can",
    "start": "380070",
    "end": "385080"
  },
  {
    "text": "just say na equals 1 strings as array of stricken areas of set of values so",
    "start": "385080",
    "end": "390930"
  },
  {
    "text": "pretty smart typing for every once in a while its breakdown which breaks down or is slow so you can always opt all they",
    "start": "390930",
    "end": "397949"
  },
  {
    "text": "put by the type but it for the most part is never required you have optionals so",
    "start": "397949",
    "end": "404699"
  },
  {
    "text": "if you want to allow a value to accept null or mill in apple's parlance you",
    "start": "404699",
    "end": "411930"
  },
  {
    "text": "just specify it with the question mark it is regular any any type can be an optional type so you say give the type",
    "start": "411930",
    "end": "418680"
  },
  {
    "text": "of this is a string to follow up with a question mark it'll be fallow or it'll be worlds or if you know if I don't you",
    "start": "418680",
    "end": "424979"
  },
  {
    "text": "cannot assign it to nil so that's pretty fantastic for people who are we're tired",
    "start": "424979",
    "end": "430169"
  },
  {
    "text": "of their null pointer exceptions you'll never get I will never get that issue and you also",
    "start": "430169",
    "end": "435500"
  },
  {
    "start": "434000",
    "end": "511000"
  },
  {
    "text": "have some pretty quick pretty quick accessing of nulls without having to",
    "start": "435500",
    "end": "443170"
  },
  {
    "text": "tediously go through and check each individual value for null you can say okay is the owner of the account no and",
    "start": "443170",
    "end": "450260"
  },
  {
    "text": "if not then go through the deposit of the count and if not then get the amount so then you'll get an int value that",
    "start": "450260",
    "end": "456080"
  },
  {
    "text": "value could be nil if any of those intermediate values were no but if it's",
    "start": "456080",
    "end": "461240"
  },
  {
    "text": "not then you can proceed also notice there no parentheses around around the if statement you have two poles Swift",
    "start": "461240",
    "end": "469400"
  },
  {
    "text": "introduces a bunch of new type as i showed before you have the class type",
    "start": "469400",
    "end": "474590"
  },
  {
    "text": "but you also have two poles which is a one or more instant value so you can",
    "start": "474590",
    "end": "480530"
  },
  {
    "text": "have two int's you can have two strings you can have a bunch of different stuff",
    "start": "480530",
    "end": "486080"
  },
  {
    "text": "the tuples are heterogeneous so you give have string a double and an account or",
    "start": "486080",
    "end": "491090"
  },
  {
    "text": "whatever whatever you want so as with all twit first let's type tuples can be",
    "start": "491090",
    "end": "497060"
  },
  {
    "text": "used as arguments to functions or return values from functions all the types can be mixed with all the other types so you",
    "start": "497060",
    "end": "502640"
  },
  {
    "text": "know functions are not restricted to just taking individual objects or primitive they can take and give back to",
    "start": "502640",
    "end": "509870"
  },
  {
    "text": "both the next cool part is enumerations numeration zar a pretty powerful feature",
    "start": "509870",
    "end": "515570"
  },
  {
    "start": "511000",
    "end": "582000"
  },
  {
    "text": "of Swift that it is a pretty broad topic but they have them as well being able to",
    "start": "515570",
    "end": "521240"
  },
  {
    "text": "enumerate individual separate values you can also have associated objects of enumerations and you have a rich set of pattern matching that can be to be done",
    "start": "521240",
    "end": "528590"
  },
  {
    "text": "with them you have functions functions are what you would expect when they exist within a class then they are",
    "start": "528590",
    "end": "535400"
  },
  {
    "text": "usually referred to as methods but functions can be free or they can be they can be you can be constrained",
    "start": "535400",
    "end": "543560"
  },
  {
    "text": "within a class and you can actually have functions that contain other functions I'll show it example that shortly",
    "start": "543560",
    "end": "549800"
  },
  {
    "text": "so functions can also have default parameters they can have they can have named parameters so you you don't have",
    "start": "549800",
    "end": "556980"
  },
  {
    "text": "the problem where when you have 50 arguments you don't know what the arguments are you can use them to",
    "start": "556980",
    "end": "562050"
  },
  {
    "text": "compose higher-order functions a function can accept a function is there an argument or pass back the results as",
    "start": "562050",
    "end": "567570"
  },
  {
    "text": "a function they're very powerful you can even do function koreans for some limited set of functions which is the",
    "start": "567570",
    "end": "573320"
  },
  {
    "text": "ability for a function to be partially applied so you can call the first argument of a function assign that to a",
    "start": "573320",
    "end": "579120"
  },
  {
    "text": "variable and then call subsequent subsequent arguments so this is one of",
    "start": "579120",
    "end": "584760"
  },
  {
    "start": "582000",
    "end": "631000"
  },
  {
    "text": "the first examples of have Swift is a multi-paradigm language multi-paradigm is is kind of a highfalutin term that",
    "start": "584760",
    "end": "591180"
  },
  {
    "text": "that means that it takes some ideas from the academic world from the more functional programming side of what's",
    "start": "591180",
    "end": "599370"
  },
  {
    "text": "going on right now and it integrates it with the more industry dominant object-oriented world so Java is an",
    "start": "599370",
    "end": "605610"
  },
  {
    "text": "aggressively object-oriented language C sharp is a little less aggressively because it has a lot nicer support",
    "start": "605610",
    "end": "611670"
  },
  {
    "text": "foreclosures and and and things like that Objective C has been slowly moving",
    "start": "611670",
    "end": "617700"
  },
  {
    "text": "out of the broadening from the imperative object-oriented world for a while and a lot of these ideas have",
    "start": "617700",
    "end": "623190"
  },
  {
    "text": "evolved into into Swift and in the first example of a couple examples they have",
    "start": "623190",
    "end": "628200"
  },
  {
    "text": "of how how it's a multi-paradigm language you also have ad hoc polymorphism which is often known as",
    "start": "628200",
    "end": "634530"
  },
  {
    "start": "631000",
    "end": "704000"
  },
  {
    "text": "operator overloading so you can have operators that are class passive functions two things I'm going to show a",
    "start": "634530",
    "end": "640260"
  },
  {
    "text": "quick example of that so here's an example of a function and all this function does it takes two strings and",
    "start": "640260",
    "end": "646650"
  },
  {
    "text": "it takes s1 s2 and returns a boolean value and what is returning is whether",
    "start": "646650",
    "end": "652770"
  },
  {
    "text": "or not the first string is less than the second string that less than operator is itself a function that is saying okay is",
    "start": "652770",
    "end": "660150"
  },
  {
    "text": "this I'm going to compare alphabetically and if the first one is a is less than I'm going to return true otherwise he'll",
    "start": "660150",
    "end": "666540"
  },
  {
    "text": "return false and so you have this array the type in fur is telling us this is a",
    "start": "666540",
    "end": "671910"
  },
  {
    "text": "array of strings and you can sort the array and what you pass the sort is is ordered before which is the function",
    "start": "671910",
    "end": "678540"
  },
  {
    "text": "they'd find up there that's an example of how a function is itself a first-class you can take it you can treat it like a",
    "start": "678540",
    "end": "684240"
  },
  {
    "text": "variable you can pass it in there you can pass it to other functions you can it'll really little clothes over the",
    "start": "684240",
    "end": "691620"
  },
  {
    "text": "environment variables so if you have a function where there's a variable defined above it it will it will retain",
    "start": "691620",
    "end": "697740"
  },
  {
    "text": "ownership it will attain possession of that variable throughout the lifetime with the function which might pass out of the local scope you can also define",
    "start": "697740",
    "end": "705510"
  },
  {
    "start": "704000",
    "end": "737000"
  },
  {
    "text": "functions in line so this example where rather than having a separate function",
    "start": "705510",
    "end": "710760"
  },
  {
    "text": "out there and passing in these curly braces and then this funny little syntax where I'm saying these are the two",
    "start": "710760",
    "end": "716190"
  },
  {
    "text": "arguments that I'm taking to the sword function and then all i do is the exact same thing as before is a pass in the",
    "start": "716190",
    "end": "722460"
  },
  {
    "text": "whether or not s1 is alphabetically but needs s2 and then I'll get back cow dog",
    "start": "722460",
    "end": "729090"
  },
  {
    "text": "dog tail and to go even further you can actually treat the operator itself as a",
    "start": "729090",
    "end": "735630"
  },
  {
    "text": "function so so this is an operator that is defined for two strings using ad hoc",
    "start": "735630",
    "end": "744060"
  },
  {
    "text": "polymorphism to say okay what is the what is the electrical parison of these two strings I can just pass any argument",
    "start": "744060",
    "end": "750720"
  },
  {
    "text": "any operator that accepts to two of whatever value is in is in the array and",
    "start": "750720",
    "end": "757770"
  },
  {
    "text": "returns a boolean and I can use that as my argument to sort so I could define my own crazy thing which just compares the",
    "start": "757770",
    "end": "764550"
  },
  {
    "text": "number of letters in the in the in the array and in this case would be equal so",
    "start": "764550",
    "end": "773420"
  },
  {
    "text": "and the last value additional value type thats which defines are immutable trucks",
    "start": "773420",
    "end": "780470"
  },
  {
    "start": "774000",
    "end": "855000"
  },
  {
    "text": "and this is a really exciting feature and the feature that I'm going to concentrate on for the remainder of this",
    "start": "780470",
    "end": "786240"
  },
  {
    "text": "talk and then there are a bunch of other features there's access control you",
    "start": "786240",
    "end": "791520"
  },
  {
    "text": "could have private protected methods using namespacing so you can have your own module in a single namespace again",
    "start": "791520",
    "end": "797790"
  },
  {
    "text": "something that the rest of the world has had it for a long time but is new to objective-c yeah bridging to existing",
    "start": "797790",
    "end": "802800"
  },
  {
    "text": "objective-c libraries it's really important all of apple's libraries are written in objective-c you have automatic reference counting which is",
    "start": "802800",
    "end": "809310"
  },
  {
    "text": "like automatic memory management but not quite as good but a lot of GC but a lot",
    "start": "809310",
    "end": "815280"
  },
  {
    "text": "faster you have interfaces protocols they call them an apple interfaces they call them",
    "start": "815280",
    "end": "821130"
  },
  {
    "text": "and see and the feesh are basically saying any of my value types are going to conform to this contract that you",
    "start": "821130",
    "end": "827430"
  },
  {
    "text": "defined you have categories which is basically taking class and adding stuff to it without having to subclass up and",
    "start": "827430",
    "end": "833250"
  },
  {
    "text": "it's got a ton more features and these are you know very well covered by Apple's intro to Swift videos which I",
    "start": "833250",
    "end": "839730"
  },
  {
    "text": "highly encourage anyone to watch from WWDC less here they're a little bit dated to the language itself has changed",
    "start": "839730",
    "end": "846269"
  },
  {
    "text": "a bit since then but overall it's really it's really a fantastic reference and it just takes about an hour naps two hours",
    "start": "846269",
    "end": "852959"
  },
  {
    "text": "to watch so that was a super quick overview of Swift from about 10,000 feet",
    "start": "852959",
    "end": "860490"
  },
  {
    "start": "855000",
    "end": "965000"
  },
  {
    "text": "it's a really approachable language especially for people who are coming to the apple ecosystem for the first time",
    "start": "860490",
    "end": "866310"
  },
  {
    "text": "some other languages has really familiar Java's csharp style syntax it'll find it",
    "start": "866310",
    "end": "872820"
  },
  {
    "text": "really easy to just get up and running with it treating it as a run-of-the-mill auditorium for language which is",
    "start": "872820",
    "end": "878910"
  },
  {
    "text": "perfectly fine very many people are writing their asses their apps that way",
    "start": "878910",
    "end": "884279"
  },
  {
    "text": "right now but what I'm going to concentrate on right now is the type that I didn't talk much about which is",
    "start": "884279",
    "end": "889949"
  },
  {
    "text": "the immutable value support that Swift has so let's define our definitions ute",
    "start": "889949",
    "end": "898769"
  },
  {
    "text": "ability and immutability usability means it can change something immutability means that it's unchangeable all",
    "start": "898769",
    "end": "904529"
  },
  {
    "text": "languages have some degree of immutability for example in Java you can",
    "start": "904529",
    "end": "910529"
  },
  {
    "text": "declare a veil of variable as final that means that you will not be able to change it from there on out and see the",
    "start": "910529",
    "end": "915680"
  },
  {
    "text": "cons and you know objective-c others opticon in Swift you declare something",
    "start": "915680",
    "end": "921420"
  },
  {
    "text": "as mutable if you say that it's less so there's a VAR keyword which says that can change let means that it cannot",
    "start": "921420",
    "end": "927720"
  },
  {
    "text": "change so I plus plus you're not allowed to do that if you declare to the left so it affects essentially the primitive",
    "start": "927720",
    "end": "934319"
  },
  {
    "text": "isn't exactly the same way that you would you would expect it to in the in other languages and that's basically",
    "start": "934319",
    "end": "940100"
  },
  {
    "text": "mutability so let's talk about value types so a struct is a value type as",
    "start": "940100",
    "end": "945470"
  },
  {
    "text": "opposed to a class is the reference type a value type is not shared it might look",
    "start": "945470",
    "end": "951170"
  },
  {
    "text": "like a sheriff it's not actually shared between multiple owners so the only ever one owner of value type reference types",
    "start": "951170",
    "end": "958459"
  },
  {
    "text": "are shared in contrast a class can have multiple people that are owning it right now and multiple people they're",
    "start": "958459",
    "end": "964189"
  },
  {
    "text": "interacting with them so in Java end of the languages there's a distinction between primitives and objects even",
    "start": "964189",
    "end": "971209"
  },
  {
    "start": "965000",
    "end": "1128000"
  },
  {
    "text": "though double people call everything an object is not really true they do have primitive and primitives behave in the",
    "start": "971209",
    "end": "979220"
  },
  {
    "text": "same way that our intuition has evolved to to expect them to behave I've been in",
    "start": "979220",
    "end": "984230"
  },
  {
    "text": "today I've signed it to 42 and then I have another int that I signed to I and then I increment I I changes what Jay",
    "start": "984230",
    "end": "990799"
  },
  {
    "text": "does not it's just that's the way that septum is work in every language that I've ever used has anyone ever heard of",
    "start": "990799",
    "end": "997670"
  },
  {
    "text": "a language that doesn't work with if you had the pointer to an I'll I can see then you can change the underlying value",
    "start": "997670",
    "end": "1003369"
  },
  {
    "text": "but you can't actually change you can actually change I in a way that's shared to other people similarly you have some",
    "start": "1003369",
    "end": "1010749"
  },
  {
    "text": "degree of immutability for objects so for classes you can you know here you have a animal and you assign feed to the",
    "start": "1010749",
    "end": "1020049"
  },
  {
    "text": "animal so you say I have a final animal here",
    "start": "1020049",
    "end": "1027890"
  },
  {
    "text": "and you can assign bday and stuff like that you can change the underlying properties of it calling animal",
    "start": "1027890",
    "end": "1034730"
  },
  {
    "text": "immutable does not magically make any of the internal properties of those things immutable so sort of a shallow form of",
    "start": "1034730",
    "end": "1041839"
  },
  {
    "text": "immutability what the final says is that be or a cannot be reassigned to anything so once you've assigned at once you're",
    "start": "1041840",
    "end": "1048830"
  },
  {
    "text": "not to be allowed to change it so it's kind of a a very single level shallow to",
    "start": "1048830",
    "end": "1054830"
  },
  {
    "text": "group form of immutability and switch works exactly the same way with their",
    "start": "1054830",
    "end": "1061040"
  },
  {
    "text": "reference type with their classes with their objects so if I say okay let a be",
    "start": "1061040",
    "end": "1066470"
  },
  {
    "text": "a new animal dog and that dog has a type that is a strength and I say let B",
    "start": "1066470",
    "end": "1073850"
  },
  {
    "text": "equals a so b is now the same animal I changed B's type now I change A's type",
    "start": "1073850",
    "end": "1081590"
  },
  {
    "text": "to cow and then B type is going to change the cow as well just like you would probably expect so",
    "start": "1081590",
    "end": "1090309"
  },
  {
    "text": "here's the class and here's a structure and the only difference between these two things is the keyword classes and",
    "start": "1091030",
    "end": "1097690"
  },
  {
    "text": "structures are intentionally designed to look very similar which is great for",
    "start": "1097690",
    "end": "1102850"
  },
  {
    "text": "being able to experiment with jumping in between the two of them but it's almost deceptive because you can see at the very bottom the behavior is extremely",
    "start": "1102850",
    "end": "1109270"
  },
  {
    "text": "different if i have a is animal variable struck and i assign b day and I change",
    "start": "1109270",
    "end": "1115540"
  },
  {
    "text": "B's type a change a's type these type does not magically change out from under",
    "start": "1115540",
    "end": "1120730"
  },
  {
    "text": "you it is it is it is essentially copied when when you've changed assignments so",
    "start": "1120730",
    "end": "1128640"
  },
  {
    "text": "we've got the value types and we've got the reference types and the similarities between the two are that they can both",
    "start": "1128640",
    "end": "1134260"
  },
  {
    "text": "contain properties in other words fields or elements they can see methods they're",
    "start": "1134260",
    "end": "1140800"
  },
  {
    "text": "called functions and twist but they're essentially methods they can't have initializers they can comport a protocol",
    "start": "1140800",
    "end": "1146260"
  },
  {
    "text": "we implement interfaces but unlike classes they cannot inherit from each other so my class animal could not",
    "start": "1146260",
    "end": "1154890"
  },
  {
    "text": "you have no intrinsic idea so an object able to compare whether or not to lock",
    "start": "1159800",
    "end": "1166920"
  },
  {
    "text": "doors are either semantically the same using whatever happens in your lab supplies like a you get my key falls in",
    "start": "1166920",
    "end": "1175560"
  },
  {
    "text": "Java and important available protocol effective see but as well as having",
    "start": "1175560",
    "end": "1182190"
  },
  {
    "text": "semantic equality other languages have the document of intrinsic identity the quality so your besides looking for a",
    "start": "1182190",
    "end": "1189570"
  },
  {
    "text": "pointer into Ottomans you can do a job at across the country there is no",
    "start": "1189570",
    "end": "1196680"
  },
  {
    "text": "interesting in any value package it's like saying was the identity the identity is defined by the valley at",
    "start": "1196680",
    "end": "1203250"
  },
  {
    "text": "that Valentine contains or by the set of a leaf or accomplished melon structure",
    "start": "1203250",
    "end": "1209000"
  },
  {
    "text": "and destruction other data types are not shared between all consistent and they",
    "start": "1209000",
    "end": "1217740"
  },
  {
    "text": "are the lack of sharing makes them for all US vs in beautiful so do you make",
    "start": "1217740",
    "end": "1225360"
  },
  {
    "text": "that day to this is beautiful is what i'm doing here is a destruction let's",
    "start": "1225360",
    "end": "1230730"
  },
  {
    "text": "that's be beautiful and create a new animal dog that i can connect a nap so",
    "start": "1230730",
    "end": "1236660"
  },
  {
    "text": "how how many ways that you let's exactly the same as as an int you",
    "start": "1236660",
    "end": "1244280"
  },
  {
    "text": "you change again you're not actually changing the underlying oneness 440 tunas of the integer you're actually",
    "start": "1244280",
    "end": "1250910"
  },
  {
    "text": "changing your actually recopy than inverting to another injury the same",
    "start": "1250910",
    "end": "1257120"
  },
  {
    "text": "thing happens with the value time you have a hierarchy of individual values and any time or any kind of decided",
    "start": "1257120",
    "end": "1264200"
  },
  {
    "text": "there copy copy that so your example of",
    "start": "1264200",
    "end": "1270980"
  },
  {
    "text": "a bit but not read this ok so let's get",
    "start": "1270980",
    "end": "1279650"
  },
  {
    "text": "a little bit more in depth here such as we have a back scratcher and you have a",
    "start": "1279650",
    "end": "1284660"
  },
  {
    "text": "list of accounts that i just have additional into a microwave any of this function holdings and all this is doing",
    "start": "1284660",
    "end": "1291110"
  },
  {
    "text": "is this using cooks kind of fancy sickness I said go 3-2 the count reaches accounts return to number of pennies to",
    "start": "1291110",
    "end": "1297560"
  },
  {
    "text": "the town and then reduce or fold it by aggregating together it's essentially a",
    "start": "1297560",
    "end": "1303530"
  },
  {
    "text": "one-line way of saying take almost ending smelly together at return the current result",
    "start": "1303530",
    "end": "1309220"
  },
  {
    "text": "and then I've got this account structure that I defined that is count itself the",
    "start": "1309220",
    "end": "1314269"
  },
  {
    "text": "count as two field has an odor and the number of 10 so I crave back and",
    "start": "1314269",
    "end": "1321769"
  },
  {
    "text": "creative cuddles army I add me to the list of accountants bank other cover",
    "start": "1321769",
    "end": "1329269"
  },
  {
    "text": "Dave more safe thank you and then we as active and we check the holdings of the",
    "start": "1329269",
    "end": "1336350"
  },
  {
    "text": "and you have the appendix down and then",
    "start": "1336350",
    "end": "1342919"
  },
  {
    "text": "the records the bank accounts at the very first index Dustin penny from my",
    "start": "1342919",
    "end": "1349129"
  },
  {
    "text": "from my back down because it was the bed and dick dinner and Men Holden's",
    "start": "1349129",
    "end": "1355220"
  },
  {
    "text": "introduced overall back holders with introduced them so you can have a very",
    "start": "1355220",
    "end": "1362600"
  },
  {
    "text": "surprising results that look very nice flying first lacrosse I could duck face",
    "start": "1362600",
    "end": "1370730"
  },
  {
    "text": "this way is a bank comes Europe anything the bank holdings of it if instead I",
    "start": "1370730",
    "end": "1378090"
  },
  {
    "text": "kicked by 81 which I added record the bank accounts which should be exactly the same bank accounts of Europe the",
    "start": "1378090",
    "end": "1384929"
  },
  {
    "text": "negative activity sense all of a sudden bank holdings remains unchanged is still that 1050 when it should drop down to",
    "start": "1384929",
    "end": "1392159"
  },
  {
    "text": "without and that's pretty deceptiveness by sandy syntactic similarities between",
    "start": "1392159",
    "end": "1399029"
  },
  {
    "text": "classes this process can be to some degree of contusion but it's very convenient in very powerful especially",
    "start": "1399029",
    "end": "1407940"
  },
  {
    "text": "the access for syntax that that they provided so I mention before the topic",
    "start": "1407940",
    "end": "1414299"
  },
  {
    "text": "of ecstasy springs are referenced by types designed to stimulate value type so it looks like they're beautiful but",
    "start": "1414299",
    "end": "1420929"
  },
  {
    "text": "they're not they're just classes like anything else you're this classes that have all their mess is defined in ways",
    "start": "1420929",
    "end": "1428010"
  },
  {
    "text": "that forbid it from mutated underlying strength but the Alliance brain is a single minute at sea and it's just a",
    "start": "1428010",
    "end": "1434100"
  },
  {
    "text": "pointer to a series of unit values you know whatever the other line",
    "start": "1434100",
    "end": "1440130"
  },
  {
    "text": "communication it could in theory be change we're springs of Swift they're actually true reference types or",
    "start": "1440130",
    "end": "1446100"
  },
  {
    "text": "implemented as strokes in an embassy you",
    "start": "1446100",
    "end": "1451650"
  },
  {
    "text": "gotta cut up bunch of foundation license you have written you have a rage and you have dictionaries these are the ball",
    "start": "1451650",
    "end": "1458250"
  },
  {
    "text": "over 25 years is going to make that into the next date that's why all the",
    "start": "1458250",
    "end": "1463260"
  },
  {
    "text": "standard and these are all in one is less reimplemented a lot of that stuff",
    "start": "1463260",
    "end": "1470640"
  },
  {
    "text": "for their own separate foundation library so script is built on its own",
    "start": "1470640",
    "end": "1476070"
  },
  {
    "text": "standard library and it integrates with the objective c language you can use objective c springs which gets your",
    "start": "1476070",
    "end": "1482070"
  },
  {
    "text": "classes or use scanner swift springs which article in its reference types and",
    "start": "1482070",
    "end": "1487650"
  },
  {
    "text": "it has the popping on value it's Rebecca everything in these woods",
    "start": "1487650",
    "end": "1493460"
  },
  {
    "text": "near library is instruct there are a few nominal classes but they're mostly not",
    "start": "1493460",
    "end": "1499640"
  },
  {
    "text": "ones at the end user uses everything in there all of your raise its dictionary eight sets the spring they're all values",
    "start": "1499640",
    "end": "1507770"
  },
  {
    "text": "and so they come with this this deep copy semantics you pass an array trenker",
    "start": "1507770",
    "end": "1515090"
  },
  {
    "text": "of dance or whatever to a function of that function adds something to data ready and then return to caller we're",
    "start": "1515090",
    "end": "1522680"
  },
  {
    "text": "ready to set now he's not going to actually different different languages",
    "start": "1522680",
    "end": "1528770"
  },
  {
    "text": "have different ways of doing things like forbidding collections to be modified like in Java you have a collection",
    "start": "1528770",
    "end": "1534050"
  },
  {
    "text": "unmodifiable list I think you have the same thing in c-sharp although I think there might be a nicer syntax in",
    "start": "1534050",
    "end": "1539510"
  },
  {
    "text": "objective c you have parallel classes you have nsstring you have NS mutable string of NS array and anitha mutable",
    "start": "1539510",
    "end": "1545720"
  },
  {
    "text": "array in Swift you have you declare a list as a constant in which case it will",
    "start": "1545720",
    "end": "1553550"
  },
  {
    "text": "be you know immutable or you declare the variable in which case you'll be able to mutate it locally but in no circumstances when you pass a straight a",
    "start": "1553550",
    "end": "1560360"
  },
  {
    "text": "list of strings or a list of anything or a dictionary of anything to another function will that function be able to",
    "start": "1560360",
    "end": "1565400"
  },
  {
    "text": "mutate it and it's a very foundation very powerful foundation on which to",
    "start": "1565400",
    "end": "1571400"
  },
  {
    "text": "leverage your own use of the value types because all the built-in containers that you'll be using for those things are",
    "start": "1571400",
    "end": "1576740"
  },
  {
    "text": "going to be conforming to that that immutability semantics so what what is",
    "start": "1576740",
    "end": "1583610"
  },
  {
    "text": "what it actually is the benefit of value types I have not actually gotten to that I've just talked about how they behave",
    "start": "1583610",
    "end": "1588950"
  },
  {
    "text": "so I'm going to go over what i believe to be the four main benefits practical benefits to you for using value types",
    "start": "1588950",
    "end": "1595420"
  },
  {
    "text": "they're comprehensible they're testable they're parallel and they're portable so",
    "start": "1595420",
    "end": "1605380"
  },
  {
    "text": "before I expand too much I'm value types I want to step back and say that you're not ever going to be writing your entire",
    "start": "1605380",
    "end": "1611180"
  },
  {
    "text": "app using purely value types this isn't this isn't haskell you've not you can't adopt an entirely functional approach to",
    "start": "1611180",
    "end": "1617750"
  },
  {
    "text": "apps because to run to create an application either mobile or for the desktop and mac",
    "start": "1617750",
    "end": "1623360"
  },
  {
    "text": "you have to integrate with classes and that means you have to subclass other class and things like that so some",
    "start": "1623360",
    "end": "1629660"
  },
  {
    "text": "percentage of your app is always going to be using reference types and that's",
    "start": "1629660",
    "end": "1635540"
  },
  {
    "text": "going to be true for inevitable future there's going to be X percent that is a that is a reference in y % that can be a",
    "start": "1635540",
    "end": "1643220"
  },
  {
    "text": "value but what you can do is you can compartmentalize areas of your applications and implement them purely",
    "start": "1643220",
    "end": "1650120"
  },
  {
    "text": "as hierarchies of value types and the",
    "start": "1650120",
    "end": "1656419"
  },
  {
    "text": "logical place to do this would be say the model of your class like if you have a document model that you can serialize",
    "start": "1656419",
    "end": "1662630"
  },
  {
    "text": "and save it's a very good place to start thinking about how can this be implemented as as a series of values",
    "start": "1662630",
    "end": "1668750"
  },
  {
    "text": "rather than as a series of references but it's a it's not limited in any way",
    "start": "1668750",
    "end": "1673790"
  },
  {
    "text": "to the model it's just that's often the most intuitive place that people like to start thinking about so here in and I'm",
    "start": "1673790",
    "end": "1680059"
  },
  {
    "text": "going to start using the term model to mean the portion of your application that is written purely using value types",
    "start": "1680059",
    "end": "1687429"
  },
  {
    "text": "so to get over my tangent I'll get back to the value of values first off they're",
    "start": "1687429",
    "end": "1694580"
  },
  {
    "start": "1693000",
    "end": "1753000"
  },
  {
    "text": "comprehensible and what I mean by comprehensible is that values can be thought of as data whereas objects can",
    "start": "1694580",
    "end": "1701090"
  },
  {
    "text": "often be thought of as a combination of data and behavior generally speaking if",
    "start": "1701090",
    "end": "1706820"
  },
  {
    "text": "you have a purely value based model performing operations on that model is not going to have any side effects with",
    "start": "1706820",
    "end": "1712250"
  },
  {
    "text": "the rest of your system which is fantastic for being able to reason about your code because you know that no one is able to get going to be able to",
    "start": "1712250",
    "end": "1718760"
  },
  {
    "text": "change a value that you own no matter what other part of your system you pass it around to so you not only have safety",
    "start": "1718760",
    "end": "1725210"
  },
  {
    "text": "you have the ability to reason more clearly about your code because you know that things are not going to have any",
    "start": "1725210",
    "end": "1730850"
  },
  {
    "text": "side effects when you pass them around if you have a model of a account and you pass it someone you don't have to worry",
    "start": "1730850",
    "end": "1736910"
  },
  {
    "text": "that they're going to mess up the owner or something in the in the function that you called and then you get it back and",
    "start": "1736910",
    "end": "1743210"
  },
  {
    "text": "you and all of a sudden the state has changed to something that you are confused and upset by and this",
    "start": "1743210",
    "end": "1750200"
  },
  {
    "text": "comprehensibility leads to testability when you have sort of an isolated",
    "start": "1750200",
    "end": "1756169"
  },
  {
    "start": "1753000",
    "end": "1854000"
  },
  {
    "text": "network of value types and very easily run execute test cases on it because you",
    "start": "1756169",
    "end": "1762950"
  },
  {
    "text": "have a compartmentalized part of your system that is is isolated from the rest of it so you can have entire modules",
    "start": "1762950",
    "end": "1769220"
  },
  {
    "text": "that are sequences of values and you can have entire test cases they're running independently of any sort of enclosing",
    "start": "1769220",
    "end": "1775880"
  },
  {
    "text": "superstructure so you don't have to worry about doing things like mocking a",
    "start": "1775880",
    "end": "1781190"
  },
  {
    "text": "server just so you can synthesize some underlying connection value in your model it's not possible to have one of",
    "start": "1781190",
    "end": "1787400"
  },
  {
    "text": "those because you're not going to be using any reference types in your model network so you can be sure that the only",
    "start": "1787400",
    "end": "1793640"
  },
  {
    "text": "things that could break the tests are changing the tests themselves or the model which is really good for keeping",
    "start": "1793640",
    "end": "1798740"
  },
  {
    "text": "your system divided into individual isolated components which itself is",
    "start": "1798740",
    "end": "1803799"
  },
  {
    "text": "fantastic for keeping the complexity of your system from spiraling out of control a lot of times you know when",
    "start": "1803799",
    "end": "1809809"
  },
  {
    "text": "when reference based applications and systems are growing they start out",
    "start": "1809809",
    "end": "1815900"
  },
  {
    "text": "fairly simple and a single person can reason about how how everything will flow and as it grows and as a network",
    "start": "1815900",
    "end": "1822169"
  },
  {
    "text": "sort of gets more tangled and spaghetti like it becomes more and more of an uphill battle and you know I've watched",
    "start": "1822169",
    "end": "1827750"
  },
  {
    "text": "in the past many applications grow germinate from very small things to very large things and you just see the",
    "start": "1827750",
    "end": "1833809"
  },
  {
    "text": "percentage of time that his creativity versus maintenance just shrink to the",
    "start": "1833809",
    "end": "1838880"
  },
  {
    "text": "point of you know I was working at Oracle for a little while and so many of those applications are just ninety five",
    "start": "1838880",
    "end": "1845809"
  },
  {
    "text": "percent of the time people are trying to fix problems and try to keep things from blowing up so the testability is really",
    "start": "1845809",
    "end": "1853850"
  },
  {
    "text": "important and along the same lines of testability structs are intrinsically parallel you can pass any parts of your",
    "start": "1853850",
    "end": "1862610"
  },
  {
    "start": "1854000",
    "end": "1949000"
  },
  {
    "text": "model onto any thread and you don't have to ever worry about there being any kind",
    "start": "1862610",
    "end": "1867620"
  },
  {
    "text": "of raised condition or anyone stepping on any pointers because two people cannot own the same object now you do",
    "start": "1867620",
    "end": "1875750"
  },
  {
    "text": "need to rethink about what you're going to how you're going to do things you'll be using a lot more pure functions where",
    "start": "1875750",
    "end": "1881090"
  },
  {
    "text": "you pass in a value type you perform some mutation on it and you pass it back",
    "start": "1881090",
    "end": "1886280"
  },
  {
    "text": "or in the example of multi-threaded code you dispatch something out using a mom parameter you perform a series of",
    "start": "1886280",
    "end": "1892700"
  },
  {
    "text": "operations on it or calculations and then the results of that model that then gets passed in to some sort of you know",
    "start": "1892700",
    "end": "1898670"
  },
  {
    "text": "callback mechanism as opposed to passing a pointer to something expecting the thing to operate on that pointer and",
    "start": "1898670",
    "end": "1904490"
  },
  {
    "text": "then just being able to access the value directly so there's a very much a different programming model that is used",
    "start": "1904490",
    "end": "1909890"
  },
  {
    "text": "when your paralyzing your especially when your paralyzing your model but in general with value types but the",
    "start": "1909890",
    "end": "1916760"
  },
  {
    "text": "benefits are fantastic you no longer have to to reason about threads and all",
    "start": "1916760",
    "end": "1922040"
  },
  {
    "text": "the attendant issues with synchronization and locks and and multi-threaded performance is going to",
    "start": "1922040",
    "end": "1928640"
  },
  {
    "text": "be the only way in which computers are going to be getting any faster in the near future they can't make processor faster so they improve overall",
    "start": "1928640",
    "end": "1935090"
  },
  {
    "text": "performance by increasing the number of processors and that means that being able to write robust and fast",
    "start": "1935090",
    "end": "1941600"
  },
  {
    "text": "multi-threaded code is is just essential for many fields of competitive applications and the last one is",
    "start": "1941600",
    "end": "1948800"
  },
  {
    "text": "portability now I don't want to say I don't anyway mean to imply that Swift is",
    "start": "1948800",
    "end": "1954980"
  },
  {
    "start": "1949000",
    "end": "2060000"
  },
  {
    "text": "itself portable beyond you know beyond running on Mac and iOS which does not exist on Linux and exist on Windows and",
    "start": "1954980",
    "end": "1962210"
  },
  {
    "text": "it's very unlikely to anytime soon but what it does mean is the isolation of a",
    "start": "1962210",
    "end": "1967640"
  },
  {
    "text": "network of values leads to a sort of intrinsic portability because you can be",
    "start": "1967640",
    "end": "1973070"
  },
  {
    "text": "very confident that you can serialize it out and you can translate it you can you know send it off to say your node server",
    "start": "1973070",
    "end": "1979340"
  },
  {
    "text": "as JSON or you can you can upload it up to like your Scala you know server or",
    "start": "1979340",
    "end": "1985010"
  },
  {
    "text": "something and I'm working a system right now that's doing exactly that and it's a delight to work with because you can you",
    "start": "1985010",
    "end": "1990680"
  },
  {
    "text": "know if you are working with other languages that have some support for value types like Scala's case classes you can you can really go back and forth",
    "start": "1990680",
    "end": "1997790"
  },
  {
    "text": "between between the two the two systems with a lot of ease and you can evolve",
    "start": "1997790",
    "end": "2003040"
  },
  {
    "text": "your model with a lot of these so there are a lot more intrinsically portable",
    "start": "2003040",
    "end": "2008260"
  },
  {
    "text": "than using than using reference types so that's what I believe to be the four",
    "start": "2008260",
    "end": "2014440"
  },
  {
    "text": "major benefits that that values can provide for your application and for development going on forward as I say",
    "start": "2014440",
    "end": "2021460"
  },
  {
    "text": "Swift itself is a very exciting language and there's a million milli interesting components to it but it's",
    "start": "2021460",
    "end": "2026530"
  },
  {
    "text": "also really really approachable you can you can really get started especially if you have a background in Java or C sharp",
    "start": "2026530",
    "end": "2032410"
  },
  {
    "text": "and you can you know watch some videos and basically get started right away but",
    "start": "2032410",
    "end": "2038290"
  },
  {
    "text": "I think the the truly exciting part about Swift is that is really starting to bring in some of the ideas from the",
    "start": "2038290",
    "end": "2044230"
  },
  {
    "text": "functional programming world and one of those is concentrating more on using immutable values and less on unless on",
    "start": "2044230",
    "end": "2051100"
  },
  {
    "text": "reference types so with that I will take a few questions if there are any entered via the app",
    "start": "2051100",
    "end": "2057929"
  }
]