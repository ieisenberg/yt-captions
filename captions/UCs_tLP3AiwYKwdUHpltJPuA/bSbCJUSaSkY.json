[
  {
    "text": "[Music]",
    "start": "980",
    "end": "7849"
  },
  {
    "text": "thanks for coming here let's talk about let's get lazy exploring the real power",
    "start": "13969",
    "end": "19320"
  },
  {
    "text": "of streams my name is Venkat Subramanyam I'm talk about what is lazy valuation",
    "start": "19320",
    "end": "25320"
  },
  {
    "text": "what are some of the reasons why we are really interested in it and we'll talk about how laziness can be implemented in",
    "start": "25320",
    "end": "31320"
  },
  {
    "text": "a number of different ways but before we get started just a quick show of hands how many of you are lazy that's good I",
    "start": "31320",
    "end": "38250"
  },
  {
    "text": "just want to make sure I'm at the right place fantastic so I talked about you know lazy evaluation what does it really",
    "start": "38250",
    "end": "44100"
  },
  {
    "text": "mean to be lazy well when it comes to functional programming we often hear people talk about how immutability is so",
    "start": "44100",
    "end": "51510"
  },
  {
    "text": "important we talk about higher-order functions and and in my opinion the problem with such discussions and I've",
    "start": "51510",
    "end": "58829"
  },
  {
    "text": "done this also myself is telling programmers that they should program immutability is like telling children",
    "start": "58829",
    "end": "65189"
  },
  {
    "text": "they have to eat vegetables and nobody likes him so why do we really care about immutability water some of the reasons",
    "start": "65189",
    "end": "71430"
  },
  {
    "text": "and I want to really talk about why that is so critical to do as you're listening along if you have questions I do request",
    "start": "71430",
    "end": "77670"
  },
  {
    "text": "you to raise the questions through the app and we will have the questions at the end of the session and also I'll",
    "start": "77670",
    "end": "83159"
  },
  {
    "text": "take your time to rate the applica talk as well towards the end so let's talk a little about what is the reason for such",
    "start": "83159",
    "end": "90329"
  },
  {
    "text": "you know importance to immutability and such well I'm gonna actually ask the question you know what is really",
    "start": "90329",
    "end": "96630"
  },
  {
    "text": "functional programming and and and I'm gonna argue that functional programming really is little to do with immutable or",
    "start": "96630",
    "end": "103890"
  },
  {
    "text": "differential programming really is little do with higher-order functions to me the really cool features of function",
    "start": "103890",
    "end": "110759"
  },
  {
    "text": "programming is two things one is that we are really interested in functional composition and functional composition",
    "start": "110759",
    "end": "117600"
  },
  {
    "text": "gives us the ability to express our code really well in terms of flow of the data",
    "start": "117600",
    "end": "124229"
  },
  {
    "text": "through processing that we do and I'm gonna say one of the most critical aspects of this is function",
    "start": "124229",
    "end": "130890"
  },
  {
    "text": "compositional composition class lays evaluation and remove laziness from this",
    "start": "130890",
    "end": "136620"
  },
  {
    "text": "equation I think it's pretty pointless to talk about functional programming so lazy evaluation is probably one of the",
    "start": "136620",
    "end": "142980"
  },
  {
    "text": "most critical aspects of programming functionally in a sense and so laziness",
    "start": "142980",
    "end": "149159"
  },
  {
    "text": "is very absolutely critical look at any sensible functional programming language you will see lazy evaluation in it so",
    "start": "149159",
    "end": "156569"
  },
  {
    "text": "this is one of the most critical things to consider but when it comes to programming there are different",
    "start": "156569",
    "end": "162359"
  },
  {
    "text": "programming languages out there and unfortunately the world has really settled upon a few select mainstream",
    "start": "162359",
    "end": "169439"
  },
  {
    "text": "languages there are literally you know so many languages I would say thousands of languages out there but yet we are",
    "start": "169439",
    "end": "176700"
  },
  {
    "text": "focusing on a handful of them but it does that most of the mainstream languages we program in are tilted",
    "start": "176700",
    "end": "183150"
  },
  {
    "text": "towards one way or one style of programming which is nerve-racking because we could go through an entire",
    "start": "183150",
    "end": "188519"
  },
  {
    "text": "career in programming these mainstream languages and not even get an opportunity to realize a whole new",
    "start": "188519",
    "end": "195239"
  },
  {
    "text": "different world that's out there well one such thing is what's called applicative order versus normal order",
    "start": "195239",
    "end": "201900"
  },
  {
    "text": "it's really funny in our field how we name things it turns out normal order is actually quite abnormal we don't use it",
    "start": "201900",
    "end": "208799"
  },
  {
    "text": "as too often but what does it really mean let's take a look at one example here for a minute here is this little",
    "start": "208799",
    "end": "214769"
  },
  {
    "text": "Java code and in the Java code I'm going to go ahead and call a function foo and I'm going to call another function let's",
    "start": "214769",
    "end": "221579"
  },
  {
    "text": "say ad over here now I'm going to pass one and do we clearly know how Java works in this case it's going to call ad",
    "start": "221579",
    "end": "228599"
  },
  {
    "text": "and then it's going to call the function foo but it doesn't have to be that way and that order of execution is called",
    "start": "228599",
    "end": "234419"
  },
  {
    "text": "the applicative order the word applicative really means in the order in which we apply it but a normal order",
    "start": "234419",
    "end": "241290"
  },
  {
    "text": "actually does things pretty different let's take a look at what that really means with a little example I'm gonna",
    "start": "241290",
    "end": "246629"
  },
  {
    "text": "write a very small example here in Haskell I'm gonna say add KB equal to a plus B so it's a fairly simple function",
    "start": "246629",
    "end": "254280"
  },
  {
    "text": "it's pretty self-explanatory what this function is doing I'm just adding two values right here then I'm gonna call",
    "start": "254280",
    "end": "260130"
  },
  {
    "text": "evaluate and pass a value to it as a per and all that the evaluate function is",
    "start": "260130",
    "end": "265860"
  },
  {
    "text": "returning is the value back to us now I'm gonna call a print function I'm gonna call the print function I'm gonna",
    "start": "265860",
    "end": "272190"
  },
  {
    "text": "call print right here I'm gonna call evaluate and call add 1 & 3 1 & 2 here I'm gonna execute this",
    "start": "272190",
    "end": "279180"
  },
  {
    "text": "little code and it produces a value of 3 however notice Haskell really work in",
    "start": "279180",
    "end": "285659"
  },
  {
    "text": "the case of Haskell high school you go to Haskell and say Haskell call add and Haskell would say but why well because I",
    "start": "285659",
    "end": "293729"
  },
  {
    "text": "want to pass the result of that to evaluate then Haskell says then go call evaluate why do you bother me well ok",
    "start": "293729",
    "end": "300810"
  },
  {
    "text": "Haskell call evaluate like why because I want to call friend well then go call friend why are you bothering with a",
    "start": "300810",
    "end": "307289"
  },
  {
    "text": "value 8 well I'm gonna prove this but how do we prove it and unfortunately in",
    "start": "307289",
    "end": "312360"
  },
  {
    "text": "Haskell Haskell being a functional programming language you cannot just drop impurity anywhere you want to so if",
    "start": "312360",
    "end": "318960"
  },
  {
    "text": "I were to go here and put a print statement Haskell will yell at me and say what are you trying to do in a pure function so I",
    "start": "318960",
    "end": "325349"
  },
  {
    "text": "was kind of sitting and scratching my head how do we prove the obvious here and I never thought I would use a",
    "start": "325349",
    "end": "331199"
  },
  {
    "text": "debugger to prove anything in my life like that so I'm gonna just do exactly that right here so I'm gonna bring up th",
    "start": "331199",
    "end": "338880"
  },
  {
    "text": "CI which is the Haskell rifle I'm gonna load up right here these sample dart",
    "start": "338880",
    "end": "344130"
  },
  {
    "text": "hitches the file I just wrote right now I'm gonna put a breakpoint on line number one character number 16 and the",
    "start": "344130",
    "end": "352469"
  },
  {
    "text": "breakpoint is right there I'm gonna call the main function and I'm showing you the obvious right here it is waiting as",
    "start": "352469",
    "end": "359430"
  },
  {
    "text": "you can see on line number 1 and it is waiting at the breakpoint now of course I'm gonna say continue if you will so",
    "start": "359430",
    "end": "367050"
  },
  {
    "text": "I'm gonna go ahead and type continue and as I type continue you can see that it",
    "start": "367050",
    "end": "372120"
  },
  {
    "text": "is actually displaying the result of 3 a proof that it actually called the add",
    "start": "372120",
    "end": "377130"
  },
  {
    "text": "function because it was stopping on line number 1 well of course I took all the",
    "start": "377130",
    "end": "382199"
  },
  {
    "text": "fur to show you the obvious which is kind of pointless isn't it but let's get back to this code for a minute I'm gonna",
    "start": "382199",
    "end": "388949"
  },
  {
    "text": "go back to the evaluate function and I'm gonna return the value of 42 right here",
    "start": "388949",
    "end": "393960"
  },
  {
    "text": "when I run the code it print at 42 but this time I'm gonna go back to Haskell and say call ad and it says why",
    "start": "393960",
    "end": "401490"
  },
  {
    "text": "what I want to call evaluate then call call evaluate when it turns out Haskell never actually called the ad function in",
    "start": "401490",
    "end": "409290"
  },
  {
    "text": "this case how do I know let's prove this again let's go back to the command prod let's open up the ruffled one more time",
    "start": "409290",
    "end": "415950"
  },
  {
    "text": "let's load up the program again let's set the breakpoint one more time now that the breakpoint is set I call",
    "start": "415950",
    "end": "422610"
  },
  {
    "text": "the main function and notice it never bothered to break on line number one that's a pills that it never actually",
    "start": "422610",
    "end": "428970"
  },
  {
    "text": "bothered to stop on the add function so what are we really proving with this",
    "start": "428970",
    "end": "434070"
  },
  {
    "text": "little example well that is a normal order of execution that you're seeing right there and it turns out that most",
    "start": "434070",
    "end": "441150"
  },
  {
    "text": "languages we use in the mainstream use applicative order but normal order is",
    "start": "441150",
    "end": "446730"
  },
  {
    "text": "rather uncommon and abnormal in a way and a lot of languages don't use it but",
    "start": "446730",
    "end": "451950"
  },
  {
    "text": "one language that does that is of course Haskell you saw that really doing it well it turns out that some languages",
    "start": "451950",
    "end": "458070"
  },
  {
    "text": "are borned lazy they are born by the beach and they just sit there and have a good time but some languages have to",
    "start": "458070",
    "end": "465390"
  },
  {
    "text": "work really hard to be lazy they're kind of like me I'm always agitated I'm",
    "start": "465390",
    "end": "470430"
  },
  {
    "text": "always up to something and my wife says going to relax I'm like how do you do that and that's the way we are like you",
    "start": "470430",
    "end": "475740"
  },
  {
    "text": "know some some languages are absolutely eager they're not really lazy but it",
    "start": "475740",
    "end": "480780"
  },
  {
    "text": "turns out that lazy evaluation is absolutely critical so what is the benefit of laziness the benefit of",
    "start": "480780",
    "end": "487110"
  },
  {
    "text": "laziness is really efficiency so if you want to really make your program officiant efficiency is not running",
    "start": "487110",
    "end": "494340"
  },
  {
    "text": "things faster but by avoiding things that shouldn't be done in the first place so imagine taking the chunk of",
    "start": "494340",
    "end": "501450"
  },
  {
    "text": "computation and not running them because you don't really need the results of it",
    "start": "501450",
    "end": "506460"
  },
  {
    "text": "this can become really powerful like what imagine this for a minute about postponing evaluation on on",
    "start": "506460",
    "end": "513390"
  },
  {
    "text": "January the second the boss calls you into the office and the boss tells you on January the second that you're going",
    "start": "513390",
    "end": "520080"
  },
  {
    "text": "to work on an important project and the result the report of it is due on April the 15 what do you do you come out of",
    "start": "520080",
    "end": "527790"
  },
  {
    "text": "the boss's office on January the second to your desk and start on this right away correct of course not you will",
    "start": "527790",
    "end": "534960"
  },
  {
    "text": "start on it promptly on April the 14th because it's you want the 15th isn't it what is that called being smart and",
    "start": "534960",
    "end": "542310"
  },
  {
    "text": "that's what you would do I remember at the time when I was in school I was really a terrible student and I would",
    "start": "542310",
    "end": "547770"
  },
  {
    "text": "see all these students working really hard for the exam four months away and I would always look at them and say what",
    "start": "547770",
    "end": "553830"
  },
  {
    "text": "are you doing preparing so hard for the exam because you see there's a lot of things can happen between now and the",
    "start": "553830",
    "end": "560100"
  },
  {
    "text": "exam on the exam day potentially there could be a really heavy snowstorm or a thunderstorm and the whole school could",
    "start": "560100",
    "end": "566850"
  },
  {
    "text": "be canceled the professor may die before the exam there's a lot of things that can happen isn't it so what do you do as",
    "start": "566850",
    "end": "573150"
  },
  {
    "text": "a very efficient student you wait until the night before to study well that's kind of like what I really like is",
    "start": "573150",
    "end": "579030"
  },
  {
    "text": "laziness leads to efficiency and just in time we call it or we call it the last",
    "start": "579030",
    "end": "584490"
  },
  {
    "text": "responsible moment what all these things are really good things so how do we really achieve this let's take a look at",
    "start": "584490",
    "end": "590550"
  },
  {
    "text": "one example of this how to really be able to achieve something like this so in order to understand this let's take",
    "start": "590550",
    "end": "596490"
  },
  {
    "text": "up example here in two different languages if you will I'm gonna write a little example here in Scala just to",
    "start": "596490",
    "end": "603000"
  },
  {
    "text": "entertain the thought other languages do this as well like for example groovy Cartland you can do these things in",
    "start": "603000",
    "end": "608910"
  },
  {
    "text": "multiple different languages let's take a look at an example of this right here I'm gonna define a function and the",
    "start": "608910",
    "end": "614610"
  },
  {
    "text": "function I'm gonna define here is called compute and this takes the value integer and all I'm gonna do within this",
    "start": "614610",
    "end": "621210"
  },
  {
    "text": "particular function as return n times to just a very trivial function but good",
    "start": "621210",
    "end": "626490"
  },
  {
    "text": "enough for us to start with so that is my compute function I've written here in in Scala but here on the Java side let",
    "start": "626490",
    "end": "634650"
  },
  {
    "text": "me go ahead and write the same function here I'm gonna say compute where I'm gonna take a number and all I'm going to",
    "start": "634650",
    "end": "641040"
  },
  {
    "text": "do is simply return number times 2 so pretty much about the same code in both languages but on the sky outside what",
    "start": "641040",
    "end": "648300"
  },
  {
    "text": "I'm gonna do is say X is equal to let's say 4 and I'm gonna say in this case",
    "start": "648300",
    "end": "654630"
  },
  {
    "text": "similarly on the Java side I'll say final int X is equal to 4 but I'm going",
    "start": "654630",
    "end": "660240"
  },
  {
    "text": "to simply say if on the other hand on the other side I'm gonna say if X is greater than 5 and",
    "start": "660240",
    "end": "668010"
  },
  {
    "text": "compute let's call the compute function and I'm gonna say compute off oh let's say about X is greater than 7 then I",
    "start": "668010",
    "end": "676240"
  },
  {
    "text": "want to print out let's go ahead and save result 1 otherwise I'm going to save result and I'm gonna print out",
    "start": "676240",
    "end": "682720"
  },
  {
    "text": "let's say result - I want to do something very similar to this on the side of Java as well so let's go ahead",
    "start": "682720",
    "end": "688779"
  },
  {
    "text": "and write that before we try to execute this so I'm gonna say if X is greater than 5 and compute of let's say X is",
    "start": "688779",
    "end": "695560"
  },
  {
    "text": "greater than 7 I want to simply output result 1 otherwise I'll simply output",
    "start": "695560",
    "end": "700839"
  },
  {
    "text": "over here let's go ahead and say result 2 so these two are pretty much similar functions between Scala and Java here as",
    "start": "700839",
    "end": "708310"
  },
  {
    "text": "you can see but I'm gonna execute this little code and my question really at",
    "start": "708310",
    "end": "713800"
  },
  {
    "text": "this point is will the compute function be called what do you think no I see",
    "start": "713800",
    "end": "719680"
  },
  {
    "text": "people saying no over there well it will not be called and let's verify that it's actually not being called so when I go",
    "start": "719680",
    "end": "726400"
  },
  {
    "text": "back and run this code what is the output say it says result 2 and clearly compute wasn't are not called but I'm",
    "start": "726400",
    "end": "732850"
  },
  {
    "text": "gonna ask the question why was compute not called anyone recognizes the reason for it come on don't be shy",
    "start": "732850",
    "end": "740190"
  },
  {
    "text": "yeah that's right short-circuiting isn't it so we know this is a short set to you'd feature and guess who let's go",
    "start": "740190",
    "end": "748990"
  },
  {
    "text": "ahead and say called over here guess who introduced that feature well it turns out charts are feuding has",
    "start": "748990",
    "end": "755080"
  },
  {
    "text": "been in languages for a very long time John McCarthy introduced shorts are feuding as part of Lisp programming and",
    "start": "755080",
    "end": "761860"
  },
  {
    "text": "languages of ever since use this it's a folklore isn't that everybody knows",
    "start": "761860",
    "end": "767140"
  },
  {
    "text": "about short-circuiting we all come to expect it on the other hand I'm gonna go",
    "start": "767140",
    "end": "772209"
  },
  {
    "text": "back to this code and say attempt over here and I'm going to then say Val temp",
    "start": "772209",
    "end": "778270"
  },
  {
    "text": "is equal to compute of X now I save the variable into a temporary variable and",
    "start": "778270",
    "end": "785140"
  },
  {
    "text": "then I'm going to pass and use that variable similarly I'm gonna say over here our temp is equal to let's say",
    "start": "785140",
    "end": "792470"
  },
  {
    "text": "compute of X and I'm going to change this to a temp over here now going back to the Scala code my question is will",
    "start": "792470",
    "end": "800269"
  },
  {
    "text": "compute recall now what do you think a little question mark on people's face",
    "start": "800269",
    "end": "806420"
  },
  {
    "text": "not sure let me change the question shirt company would be called now yeah",
    "start": "806420",
    "end": "812089"
  },
  {
    "text": "that's a no right we shouldn't call compute and yet when you run the code computers actually called how sad that",
    "start": "812089",
    "end": "818870"
  },
  {
    "text": "is isn't it now why is computer really called well the reason compute is called",
    "start": "818870",
    "end": "823879"
  },
  {
    "text": "the Scala says hey what if there is a side effect you say wait a second you're",
    "start": "823879",
    "end": "829040"
  },
  {
    "text": "talking about side effects suddenly but a minute ago you were having exactly the",
    "start": "829040",
    "end": "834199"
  },
  {
    "text": "same compute method you had it in the short-circuit situation and even if there was a side effect",
    "start": "834199",
    "end": "840800"
  },
  {
    "text": "why in the world you do not call it well the short answer to that question is language specification you can never",
    "start": "840800",
    "end": "847189"
  },
  {
    "text": "argue with language specifications the language specification says even in the",
    "start": "847189",
    "end": "852800"
  },
  {
    "text": "event of a side effect if you are in a short-circuit situation we have the",
    "start": "852800",
    "end": "858319"
  },
  {
    "text": "right not to call the function on the other hand in a regular conditional statement the language says oh my gosh",
    "start": "858319",
    "end": "864709"
  },
  {
    "text": "what if really we are going to have a side effect I better call it so as a research as you",
    "start": "864709",
    "end": "870949"
  },
  {
    "text": "can see in the case of Scala and in the case of Java it ended up calling the function but I know you all said it",
    "start": "870949",
    "end": "877910"
  },
  {
    "text": "shouldn't be called I totally agree with it so what you can do is you can say lazy right there and by saying lazy you",
    "start": "877910",
    "end": "885980"
  },
  {
    "text": "can see that Scala is no longer calling the function because it determines that it is not really needed without the word",
    "start": "885980",
    "end": "892970"
  },
  {
    "text": "lazy you can see that it's actually calling the function but when I drop the word lazy in there you can see it's no",
    "start": "892970",
    "end": "899990"
  },
  {
    "text": "longer calling it but just to illustrate this if the value of X was 14 you can",
    "start": "899990",
    "end": "905329"
  },
  {
    "text": "see that it is calling the function but if the value of x is 4 it is no longer calling the function so by marking it",
    "start": "905329",
    "end": "912589"
  },
  {
    "text": "lazy you are able to achieve that in the case of Scala likewise in the case of",
    "start": "912589",
    "end": "917809"
  },
  {
    "text": "Java I'm going to go ahead and lazy right there and when I run the code it doesn't work I know for a minute you",
    "start": "917809",
    "end": "924970"
  },
  {
    "text": "were like gosh this is awesome isn't it sorry I disappointed you so no it doesn't work well but you know you say",
    "start": "924970",
    "end": "931570"
  },
  {
    "text": "like but I want it I why can't I have this particular feature and so the answer to that question is yes you can",
    "start": "931570",
    "end": "938260"
  },
  {
    "text": "have it but how can you introduce laziness on your own and that is one of the questions to really think about and",
    "start": "938260",
    "end": "944590"
  },
  {
    "text": "for this I want to step back a minute and talk about one statement and I would argue this is probably the most profound",
    "start": "944590",
    "end": "952260"
  },
  {
    "text": "statement ever in our field there's not a single day that I sit and programming",
    "start": "952260",
    "end": "960160"
  },
  {
    "text": "when I don't pause and appreciate this particular statement I I don't think there's anything more profound in our",
    "start": "960160",
    "end": "965980"
  },
  {
    "text": "field and this was said by a gentleman named David wheeler and David wheeler probably said the most wisest thing ever",
    "start": "965980",
    "end": "973420"
  },
  {
    "text": "and he said all problems in computer science can be solved using one more",
    "start": "973420",
    "end": "981040"
  },
  {
    "text": "level of indirection and this to me is the most phenomenal statement ever now",
    "start": "981040",
    "end": "988840"
  },
  {
    "text": "if you really think about it the level of indirection is the master design of",
    "start": "988840",
    "end": "994360"
  },
  {
    "text": "all designs in my opinion because this is the master has an fundamentally",
    "start": "994360",
    "end": "1000390"
  },
  {
    "text": "skillful way of doing things and this is the most phenomenal mastery of design if",
    "start": "1000390",
    "end": "1006360"
  },
  {
    "text": "you think about it because a level of indirection simply says rather than solving this here solve a problem that",
    "start": "1006360",
    "end": "1013710"
  },
  {
    "text": "in turn will solve the problem we use this a lot in computer programming in C programming languages we use pointers as",
    "start": "1013710",
    "end": "1020850"
  },
  {
    "text": "level of indirection for example well it turns out in functional programming the",
    "start": "1020850",
    "end": "1026310"
  },
  {
    "text": "level of indirection is there - the level of indirection in functional programming from functional programming",
    "start": "1026310",
    "end": "1034370"
  },
  {
    "text": "comes from well what does it actually come from well if this is one of my",
    "start": "1034370",
    "end": "1039630"
  },
  {
    "text": "realization call me silly but I get excited about these things when I program is when you could be programming",
    "start": "1039630",
    "end": "1045900"
  },
  {
    "text": "for several years and one day suddenly something really dawns on you that maybe",
    "start": "1045900",
    "end": "1051120"
  },
  {
    "text": "is obvious to everybody you but you realize like wow this is really awesome and to me that is in",
    "start": "1051120",
    "end": "1056950"
  },
  {
    "text": "level of indirection funky programming comes from lambda expressions so this to",
    "start": "1056950",
    "end": "1062200"
  },
  {
    "text": "me is a ha moment because lambdas give you that level of indirection so what",
    "start": "1062200",
    "end": "1067539"
  },
  {
    "text": "does the lambda say a lambda says rather than calling this function now call this",
    "start": "1067539",
    "end": "1073270"
  },
  {
    "text": "anonymous function which is a lambda expression which in turn can call this",
    "start": "1073270",
    "end": "1078309"
  },
  {
    "text": "function at a later time so to me this is one of the really critical aspects of",
    "start": "1078309",
    "end": "1083740"
  },
  {
    "text": "lambdas is that they give you the level of indirection and functional programming and then once you look at it",
    "start": "1083740",
    "end": "1090159"
  },
  {
    "text": "this way it changes the whole world for me because it's a design tool that I can",
    "start": "1090159",
    "end": "1095500"
  },
  {
    "text": "look at and and appreciate now when I program in functional style because it's",
    "start": "1095500",
    "end": "1100720"
  },
  {
    "text": "something that changes the way that I perceive and use the solution at this point so what I can do here in the code",
    "start": "1100720",
    "end": "1107110"
  },
  {
    "text": "is I can now say here a lazy if you will off integer and I'm going to then say",
    "start": "1107110",
    "end": "1114250"
  },
  {
    "text": "Tim and and then I will say notice over here I'm gonna say new lazy and look at",
    "start": "1114250",
    "end": "1121720"
  },
  {
    "text": "this very carefully if I call the compute method right here this is a play",
    "start": "1121720",
    "end": "1127539"
  },
  {
    "text": "of order Java will immediately call this function because that's what Java does",
    "start": "1127539",
    "end": "1132940"
  },
  {
    "text": "it's an applicative order language but what I can tell Java is do me a favor don't call the compute now instead call",
    "start": "1132940",
    "end": "1141159"
  },
  {
    "text": "it later this arrow is almost like a level of indirection isn't it so it is",
    "start": "1141159",
    "end": "1147010"
  },
  {
    "text": "saying don't execute compute now execute it a little later so this is the degree",
    "start": "1147010",
    "end": "1153250"
  },
  {
    "text": "of postponing the evaluation and you're saying not now a little later please and that little parentheses arrow is a",
    "start": "1153250",
    "end": "1161140"
  },
  {
    "text": "is an indication of a lambda postponing evaluation of the compute method so what",
    "start": "1161140",
    "end": "1166330"
  },
  {
    "text": "we could potentially do here is we could create a class called lazy where the",
    "start": "1166330",
    "end": "1171789"
  },
  {
    "text": "class lazy could hold on to an instance if you will and it could also hold on to",
    "start": "1171789",
    "end": "1177280"
  },
  {
    "text": "a little supplier of P where the supplier comes from the functional",
    "start": "1177280",
    "end": "1182919"
  },
  {
    "text": "interface in the case of job and then I can of course say here the supplier will call it the supplier and",
    "start": "1182919",
    "end": "1190000"
  },
  {
    "text": "then of course what I can do is create the lazy constructor which is taking the",
    "start": "1190000",
    "end": "1195100"
  },
  {
    "text": "supplier and what I can do is simply take the supplier store it away a",
    "start": "1195100",
    "end": "1200920"
  },
  {
    "text": "supplier equal to the supplier but then I can write a method called get where",
    "start": "1200920",
    "end": "1207100"
  },
  {
    "text": "the method glit can say if the instance is equal to null then of course I could",
    "start": "1207100",
    "end": "1212920"
  },
  {
    "text": "say instance is equal to the supplier dot get the value get rid of the",
    "start": "1212920",
    "end": "1219010"
  },
  {
    "text": "supplier at that point we don't really care about it anymore and then return the object that is held within the",
    "start": "1219010",
    "end": "1225429"
  },
  {
    "text": "object so you could start writing things of course I'm writing this code here but you could use it from third-party",
    "start": "1225429",
    "end": "1230470"
  },
  {
    "text": "libraries if you want to or you can put it in a separate utility and we use it in your own applications but but writing",
    "start": "1230470",
    "end": "1237280"
  },
  {
    "text": "this lazy evaluation I'm saying postpone this to a later time as a result I can",
    "start": "1237280",
    "end": "1243490"
  },
  {
    "text": "come in here and get the value of Templin I really mean it and ignore the warning just for a minute and you can",
    "start": "1243490",
    "end": "1250420"
  },
  {
    "text": "see at the very bottom the result too is being displayed right in there on the other hand if I were to modify this to a",
    "start": "1250420",
    "end": "1257530"
  },
  {
    "text": "40 and you will notice at the very bottom it is called and result 1 so the",
    "start": "1257530",
    "end": "1263050"
  },
  {
    "text": "calling of that is postponed until you no longer can postpone it so you can have laziness built in to your",
    "start": "1263050",
    "end": "1269890"
  },
  {
    "text": "applications that way and that comes from the level of indirection that I was talking about a minute ago",
    "start": "1269890",
    "end": "1275620"
  },
  {
    "text": "so laziness comes with lambdas in most of these languages and that gives us a",
    "start": "1275620",
    "end": "1281080"
  },
  {
    "text": "level of indirection we can benefit from really nicely well this leads us to how",
    "start": "1281080",
    "end": "1286480"
  },
  {
    "text": "we can actually benefit from this kind of laziness in programming so to",
    "start": "1286480",
    "end": "1291580"
  },
  {
    "text": "understand this let's talk about laziness in collections of objects this",
    "start": "1291580",
    "end": "1297280"
  },
  {
    "text": "is a very critical aspect to think about because functional programming gives us our elegance in code it uses beautiness",
    "start": "1297280",
    "end": "1304690"
  },
  {
    "text": "in code but at the same time though we have to be very careful because we cannot really be happy with elegance and",
    "start": "1304690",
    "end": "1311740"
  },
  {
    "text": "beauty we really a they have to really look for performance as well so to understand this let's take",
    "start": "1311740",
    "end": "1318640"
  },
  {
    "text": "a little example and play with it let's say for a minute given a collection let's say collection a collection of",
    "start": "1318640",
    "end": "1325240"
  },
  {
    "text": "numbers well off some ordered collection of numbers would say given a collect",
    "start": "1325240",
    "end": "1330640"
  },
  {
    "text": "ordered collection of numbers I'm gonna say find the double of the first number",
    "start": "1330640",
    "end": "1337860"
  },
  {
    "text": "greater than 3 and this even so I want to find the first number that's greater",
    "start": "1337860",
    "end": "1343480"
  },
  {
    "text": "than 3 and that is even how do I do this in the imperative style of programming",
    "start": "1343480",
    "end": "1348940"
  },
  {
    "text": "well in the imperative style of programming we are all used to doing this a lot in our experience so I'm",
    "start": "1348940",
    "end": "1355750"
  },
  {
    "text": "gonna start with the list of integer will call it as numbers equal to and let's say let's say list off and what am",
    "start": "1355750",
    "end": "1363340"
  },
  {
    "text": "I gonna provide for this particular list I'm gonna say this is going to be my list of numbers let's say 1 to 10 but",
    "start": "1363340",
    "end": "1369940"
  },
  {
    "text": "with the small difference I'm gonna say 5 and 4 as a sequence of numbers so",
    "start": "1369940",
    "end": "1375400"
  },
  {
    "text": "notice I have 1 2 3 5 4 6 7 8 9 and 10 but how do I do this in the imperative",
    "start": "1375400",
    "end": "1381790"
  },
  {
    "text": "style well in the imperative style of programming what we are going to do is to first of all say if the result is",
    "start": "1381790",
    "end": "1389080"
  },
  {
    "text": "equal to 0 and of course at the very end I want to output the result but what do",
    "start": "1389080",
    "end": "1394180"
  },
  {
    "text": "I do here for int I equal to 0 I less than numbers start and I'm going to",
    "start": "1394180",
    "end": "1400990"
  },
  {
    "text": "think about what to call here is it length is it sighs is it count we cannot have a standard in our industry because",
    "start": "1400990",
    "end": "1407680"
  },
  {
    "text": "that would make life easy so in this case of course it's a size of it's a list it's a it's a length of it's an",
    "start": "1407680",
    "end": "1414490"
  },
  {
    "text": "array it's a count if it's a different language and then of course you have to make another choice is it plus our I",
    "start": "1414490",
    "end": "1420670"
  },
  {
    "text": "plus plus or plus plus I and then you pause for a second as the question is that less than R less than or equal to",
    "start": "1420670",
    "end": "1427930"
  },
  {
    "text": "every single time you write it somebody asked the other day what is that symbols stand for I said that's the",
    "start": "1427930",
    "end": "1433750"
  },
  {
    "text": "International symbol for I'm confused because every time we have to pause and ask the question not to be fair of",
    "start": "1433750",
    "end": "1440260"
  },
  {
    "text": "course you don't have to struggle that hard anymore you could have said given element that comes from numbers and what",
    "start": "1440260",
    "end": "1447520"
  },
  {
    "text": "am I gonna do now I can simply say over here if element is",
    "start": "1447520",
    "end": "1452950"
  },
  {
    "text": "greater than three and if element mod 2 is equal to zero then of course the",
    "start": "1452950",
    "end": "1459250"
  },
  {
    "text": "result plus equal to elements time - now as an observant reader you probably look",
    "start": "1459250",
    "end": "1465520"
  },
  {
    "text": "at this code and say you're wrong you are forgetting to put a break right here now if you don't put a break in the best",
    "start": "1465520",
    "end": "1472600"
  },
  {
    "text": "case you will get a poor performance in the worst case you will get a wrong result but it's your responsibility to",
    "start": "1472600",
    "end": "1478570"
  },
  {
    "text": "do all of this in your code and notice when I run this code it produces the result of eight but the problem with",
    "start": "1478570",
    "end": "1485650"
  },
  {
    "text": "imperative style code is imperative style code is very misleading imperative",
    "start": "1485650",
    "end": "1491140"
  },
  {
    "text": "style code I'm gonna say has a built in axe accidental complexity so what is",
    "start": "1491140",
    "end": "1499660"
  },
  {
    "text": "complexity accidental complexity comes from solution space now the solution is",
    "start": "1499660",
    "end": "1505390"
  },
  {
    "text": "complex because you're reading the score and trying to figure out if it's right and typically what happens in my case is",
    "start": "1505390",
    "end": "1511570"
  },
  {
    "text": "I put this code out in a few days later you know who walks in my tester and my",
    "start": "1511570",
    "end": "1517060"
  },
  {
    "text": "tester says your code sucks and I always tell my tester don't tell me my coat",
    "start": "1517060",
    "end": "1522700"
  },
  {
    "text": "sucks tell me how it sucks today because everyday it seems to sub differently but",
    "start": "1522700",
    "end": "1528190"
  },
  {
    "text": "the point really in this case is that the tester says well I tried your code",
    "start": "1528190",
    "end": "1534160"
  },
  {
    "text": "with an empty collection of data and your result was zero when the results",
    "start": "1534160",
    "end": "1541090"
  },
  {
    "text": "would be non-existent I tried you whereas a code with a collection of only numbers that are odd numbers he gave a",
    "start": "1541090",
    "end": "1549250"
  },
  {
    "text": "wrong result I try to get numbers less than three gave me wrong results it failed in so many ways well the reason",
    "start": "1549250",
    "end": "1556090"
  },
  {
    "text": "it failed in so many ways is the result of zero is rather invalid so once the",
    "start": "1556090",
    "end": "1561670"
  },
  {
    "text": "user tester tells me it's wrong what am I gonna do now I'm gonna go back to this code and say",
    "start": "1561670",
    "end": "1567700"
  },
  {
    "text": "all right I'll fix that I'm gonna say integer result is equal to null and then",
    "start": "1567700",
    "end": "1573190"
  },
  {
    "text": "of course the question is how do you feel about this now of course is a smell and this",
    "start": "1573190",
    "end": "1579649"
  },
  {
    "text": "is not going to be very much fun to write the code it only goes worse at this point than it was before so he",
    "start": "1579649",
    "end": "1586220"
  },
  {
    "text": "struggle with all this and say gosh there's got to be a better way to write this code well it turns out there is",
    "start": "1586220",
    "end": "1591980"
  },
  {
    "text": "actually a better way and that is the functional style code has reduced",
    "start": "1591980",
    "end": "1597490"
  },
  {
    "text": "complexity in general well of course functional style code removes this",
    "start": "1597490",
    "end": "1602750"
  },
  {
    "text": "accidental complexity from our code and and part of the reason is that the code",
    "start": "1602750",
    "end": "1608330"
  },
  {
    "text": "a big reads like the problem statement so one of the real beauties of this is",
    "start": "1608330",
    "end": "1615139"
  },
  {
    "text": "the code begins to read like the problem statement so what I can do here is I can say output and at this point I'm gonna",
    "start": "1615139",
    "end": "1622490"
  },
  {
    "text": "say numbers dart stream and there comes the stream which is an internal iterator",
    "start": "1622490",
    "end": "1628700"
  },
  {
    "text": "so I say number start stream a dart filter and what I'm gonna do here in",
    "start": "1628700",
    "end": "1634549"
  },
  {
    "text": "this example is I'm gonna start with the filter function so give me a second I want to reward back to what we had a",
    "start": "1634549",
    "end": "1640220"
  },
  {
    "text": "minute ago because I want to show a difference between those two as well so in this case of course what I'm gonna",
    "start": "1640220",
    "end": "1646340"
  },
  {
    "text": "show you here is that the functional style code has reduced complexity the code begins to read like the problem",
    "start": "1646340",
    "end": "1653299"
  },
  {
    "text": "statement as we saw here so let's ignore that for a minute let's go ahead and put an int right here but at this point what",
    "start": "1653299",
    "end": "1659750"
  },
  {
    "text": "I want to do really is talk about how the functional style code is less complex so for that reason let's go",
    "start": "1659750",
    "end": "1667370"
  },
  {
    "text": "ahead and leave that code out there for a second let's go ahead and say output number start stream but this time I'm",
    "start": "1667370",
    "end": "1675139"
  },
  {
    "text": "going to say filter given an element elements greater than 3 and filter again given an element element Mar 2 2014",
    "start": "1675139",
    "end": "1695648"
  },
  {
    "text": "stead of it I can definitely make that decision so given this code when I run the code",
    "start": "1700840",
    "end": "1706549"
  },
  {
    "text": "both the pieces of code give me exact the same result the imperative and the",
    "start": "1706549",
    "end": "1711600"
  },
  {
    "text": "function of style code but on the other hand the functional style code is a code begins to read like the problem",
    "start": "1711600",
    "end": "1718230"
  },
  {
    "text": "statement given a collection of numbers get me numbers that are greater than three get me the numbers that are even",
    "start": "1718230",
    "end": "1723990"
  },
  {
    "text": "get me the double of that and then get me the first one and if not you me is zero well if you look at this code this",
    "start": "1723990",
    "end": "1731580"
  },
  {
    "text": "code is elegant this code is I'm gonna simply say this code is cute and we can",
    "start": "1731580",
    "end": "1738570"
  },
  {
    "text": "absolutely agree with that and we can say this code is cute but unfortunately though a lot of languages give you this",
    "start": "1738570",
    "end": "1746190"
  },
  {
    "text": "Java does this c-sharp does this but Ruby and Python and small talk and end",
    "start": "1746190",
    "end": "1753900"
  },
  {
    "text": "and groovy and JavaScript a lot of languages give this but I've come to a",
    "start": "1753900",
    "end": "1759690"
  },
  {
    "text": "grim realization in life and that is a cuteness is not sustainable and this is",
    "start": "1759690",
    "end": "1767220"
  },
  {
    "text": "the sad part when when I want to go to see a very small child a friend or relative calls you and says we have a",
    "start": "1767220",
    "end": "1773340"
  },
  {
    "text": "baby and we go to visit the baby this is so small baby and of course when you go to see the baby the first thing my wife",
    "start": "1773340",
    "end": "1779310"
  },
  {
    "text": "want to say is how cute and I go to the child and say kid it's not going to sustain and this is the truth this ended",
    "start": "1779310",
    "end": "1786420"
  },
  {
    "text": "because the cute child is so cute for two years of the human life at the end",
    "start": "1786420",
    "end": "1791880"
  },
  {
    "text": "of two years what we say you're annoying you speak too much and that's called a terrible - so cuteness is not",
    "start": "1791880",
    "end": "1797940"
  },
  {
    "text": "sustainable unfortunately and that is exactly true what for functional style code you cannot look at this code and",
    "start": "1797940",
    "end": "1803910"
  },
  {
    "text": "say it's cute and the next thing somebody sells to you yeah all right what's the performance looked like well",
    "start": "1803910",
    "end": "1809580"
  },
  {
    "text": "if you cannot do performance all the cuteness is a total waste in our life so",
    "start": "1809580",
    "end": "1815220"
  },
  {
    "text": "we want to be cute but where we can but we want to give a performance as well that's absolutely critical so in other",
    "start": "1815220",
    "end": "1822630"
  },
  {
    "text": "words efficiency efficiency rules at the end of the day right so this is the true",
    "start": "1822630",
    "end": "1830430"
  },
  {
    "text": "fact of life efficiency rules at the end of the day so you cannot just simply say",
    "start": "1830430",
    "end": "1836190"
  },
  {
    "text": "it's cute and walk away what about performance that becomes absolutely critical so what do we do about efficiency of this",
    "start": "1836190",
    "end": "1843370"
  },
  {
    "text": "code what if I look at line number 26 and say I compute the result for every",
    "start": "1843370",
    "end": "1849040"
  },
  {
    "text": "single value and then for even numbers and then double those values and then I",
    "start": "1849040",
    "end": "1854230"
  },
  {
    "text": "return the forest throwing away all the other computation what a real waste now",
    "start": "1854230",
    "end": "1859330"
  },
  {
    "text": "let's think about what's going to happen in this particular case so going back to this code let's refactor this just a",
    "start": "1859330",
    "end": "1865000"
  },
  {
    "text": "little bit I'm gonna write a function here called boolean and the boolean is gonna say is",
    "start": "1865000",
    "end": "1871240"
  },
  {
    "text": "greater than 3 takes a number and it simply returns the number a greater than",
    "start": "1871240",
    "end": "1876490"
  },
  {
    "text": "3 for a minute similarly I'm gonna write two other functions the next function is",
    "start": "1876490",
    "end": "1881830"
  },
  {
    "text": "going to be easy even and all that it's going to do is return ma 2 is equal to zero and finally this is going to be a",
    "start": "1881830",
    "end": "1889600"
  },
  {
    "text": "double it and which is going to simply return the value and times two so given",
    "start": "1889600",
    "end": "1895630"
  },
  {
    "text": "this code of course what I want to do is use that code in here now look at the imperative style code for just a minute",
    "start": "1895630",
    "end": "1902350"
  },
  {
    "text": "how does the imperative style code work just the highlighted part if you focus on we pass a 1 it says 1 is not greater",
    "start": "1902350",
    "end": "1910180"
  },
  {
    "text": "than 3 2 is not greater than 3 3 is not greater than 3 or 5 is greater than 3",
    "start": "1910180",
    "end": "1915640"
  },
  {
    "text": "but it's not even but 4 is greater than 3 and 4 is even double it so that was 8",
    "start": "1915640",
    "end": "1922200"
  },
  {
    "text": "computations to get the result in the imperative style code let's prove it so",
    "start": "1922200",
    "end": "1927250"
  },
  {
    "text": "to prove it I'm gonna say is greater than 3 right here and I'm going to then say is even of n or our I rather here",
    "start": "1927250",
    "end": "1936430"
  },
  {
    "text": "and then finally I'm gonna simply call a double it over here and of course as a",
    "start": "1936430",
    "end": "1941710"
  },
  {
    "text": "result we can pass the data when everyone the code what is it going to do well in this case of course it is going",
    "start": "1941710",
    "end": "1948700"
  },
  {
    "text": "to provide that value let's go ahead and make sure that I'm using the right function here so when I go back and call",
    "start": "1948700",
    "end": "1954460"
  },
  {
    "text": "this function you can see it is telling me that it is going to be 8 computations",
    "start": "1954460",
    "end": "1959680"
  },
  {
    "text": "to run this code so what does this really provide for us let's go ahead and",
    "start": "1959680",
    "end": "1964750"
  },
  {
    "text": "put that little statement right here I'll say called is greater than will say is greater than 3 and then we'll say",
    "start": "1964750",
    "end": "1971740"
  },
  {
    "text": "called over here we'll say is even and finally called over here we'll say double it and and",
    "start": "1971740",
    "end": "1979309"
  },
  {
    "text": "when I write this code what is it called for well we'll go ahead and say let's go",
    "start": "1979309",
    "end": "1984320"
  },
  {
    "text": "ahead and say plus n here so we can actually appreciate the value it's calling that far and then we'll simply",
    "start": "1984320",
    "end": "1990230"
  },
  {
    "text": "say plus n so when I execute this code for the imperative style code you can see that it performed a total of eight",
    "start": "1990230",
    "end": "1996830"
  },
  {
    "text": "computations right there one two three four five six seven eight so eight units",
    "start": "1996830",
    "end": "2002049"
  },
  {
    "text": "of work and we got the result in the imperative style of code but the question to ask is what about the",
    "start": "2002049",
    "end": "2007960"
  },
  {
    "text": "functional style code well if I'm taking ten values and comparing greater than on",
    "start": "2007960",
    "end": "2013029"
  },
  {
    "text": "10 that is ten computations that is dead-on on arrival isn't it 10 is",
    "start": "2013029",
    "end": "2019480"
  },
  {
    "text": "greater than eight let's add insult to injury this is going to compare the even for seven values in the collection this",
    "start": "2019480",
    "end": "2027340"
  },
  {
    "text": "is going to double for values and then it's going to return the first value so that is going to be 10 plus 7 and 17",
    "start": "2027340",
    "end": "2033640"
  },
  {
    "text": "plus 4 is 21 computations so what if I say the functional style is cute but",
    "start": "2033640",
    "end": "2041049"
  },
  {
    "text": "you're gonna spend 21 computations versus 8 you're gonna say get out of here so we are not going to be",
    "start": "2041049",
    "end": "2047470"
  },
  {
    "text": "tolerating a functional style code if it results in poor performance so what do we do about it well thankfully this is",
    "start": "2047470",
    "end": "2055480"
  },
  {
    "text": "one of the things that streams really provide very elegantly so what does the stream really do streams are really",
    "start": "2055480",
    "end": "2063570"
  },
  {
    "text": "built on top of laziness so what does it really mean that streams are really lazy",
    "start": "2063570",
    "end": "2069940"
  },
  {
    "text": "well to understand this let's go ahead and convert this chord real coy and we will go ahead and call the east even",
    "start": "2069940",
    "end": "2076330"
  },
  {
    "text": "right here and then finally of course we'll go ahead and call the double it function right here as well but before",
    "start": "2076330",
    "end": "2083169"
  },
  {
    "text": "we run this let's talk about how this is going to work now when you look at the stream the streams are fundamentally",
    "start": "2083169",
    "end": "2089950"
  },
  {
    "text": "lazy I've only seen this characteristics between my own children and streams my",
    "start": "2089950",
    "end": "2095740"
  },
  {
    "text": "children are fundamentally lazy I'll share with you an experience I've seen in my house my wonderful wife will tell",
    "start": "2095740",
    "end": "2102280"
  },
  {
    "text": "my son you know a turn off the TV it's like no words were spoken and then",
    "start": "2102280",
    "end": "2108520"
  },
  {
    "text": "she will tell him put the trash out and no muscles were really moved and then",
    "start": "2108520",
    "end": "2113830"
  },
  {
    "text": "she tells Sam doing a homework not a pencil was picked at this point she simply says call daddy and everything",
    "start": "2113830",
    "end": "2121840"
  },
  {
    "text": "works and and so they could agree named Jesus called daddy so the point and some houses it's called",
    "start": "2121840",
    "end": "2127270"
  },
  {
    "text": "mommy depends on the household I always say parents play a good cop and a bad cop role you cannot know what I play so",
    "start": "2127270",
    "end": "2133180"
  },
  {
    "text": "the point really is that these are called terminal functions the terminal functions are the ones that trigger the",
    "start": "2133180",
    "end": "2140350"
  },
  {
    "text": "evaluation so the way that streams work is when you go to a stream and say filter it's like air maybe later",
    "start": "2140350",
    "end": "2147640"
  },
  {
    "text": "hey filter again maybe another time map well some other time and find first oh",
    "start": "2147640",
    "end": "2153340"
  },
  {
    "text": "dear let's do it and at that point it's gonna do it minimally what's expected so",
    "start": "2153340",
    "end": "2158890"
  },
  {
    "text": "if I run this code notice that we have exactly the same sequence of evaluation",
    "start": "2158890",
    "end": "2164380"
  },
  {
    "text": "aid calls to this function no more and no less in this particular case so the",
    "start": "2164380",
    "end": "2169990"
  },
  {
    "text": "functional style code is as efficient as the imperative style code when it comes to the number of computations it",
    "start": "2169990",
    "end": "2176290"
  },
  {
    "text": "performs and laziness really brings us for that and without laziness there",
    "start": "2176290",
    "end": "2181480"
  },
  {
    "text": "would be no fun using the expressive nature of function of style of programming this is especially true with",
    "start": "2181480",
    "end": "2187210"
  },
  {
    "text": "big data projects I work with clients who are dealing with literally millions of data that they have to process and",
    "start": "2187210",
    "end": "2193300"
  },
  {
    "text": "when we deal with 70 or 80 millions of data we cannot be doing inefficient computations laziness really saves the",
    "start": "2193300",
    "end": "2200800"
  },
  {
    "text": "day for us and that becomes absolutely critical so with that said we have laziness but what is laziness really",
    "start": "2200800",
    "end": "2208150"
  },
  {
    "text": "lead to so to wrap this up I want to really come back to this immutability is",
    "start": "2208150",
    "end": "2214590"
  },
  {
    "text": "essential for lazy evaluation this is absolutely true immutability is",
    "start": "2214590",
    "end": "2221830"
  },
  {
    "text": "essential for lazy evaluation if you don't have immutability if you're mutating data you cannot postpone",
    "start": "2221830",
    "end": "2229470"
  },
  {
    "text": "evaluation you are always worried about what's the value gonna be now and if it is mutating your question",
    "start": "2229470",
    "end": "2236980"
  },
  {
    "text": "is did you use the value before mutation or after mutation but if the value is",
    "start": "2236980",
    "end": "2242320"
  },
  {
    "text": "immutable it doesn't matter it is not going to change you can evaluate now you can evaluate later or not bother",
    "start": "2242320",
    "end": "2249190"
  },
  {
    "text": "evaluating at all and you can postpone that quite a bit well with that said lazy leads to two things one is",
    "start": "2249190",
    "end": "2258280"
  },
  {
    "text": "efficiency but it also leads to one other beautiful thing which is infinite",
    "start": "2258280",
    "end": "2264160"
  },
  {
    "text": "infinite streams so infinite streams are pretty darn good way to express certain",
    "start": "2264160",
    "end": "2270370"
  },
  {
    "text": "ideas in code it leads to efficiency but it also leads to infinite streams the",
    "start": "2270370",
    "end": "2275890"
  },
  {
    "text": "idea of infinite stream is to be able to generate a boundless collection of data",
    "start": "2275890",
    "end": "2281200"
  },
  {
    "text": "but how in the world can we create boundless collection of data we can enjoy these ideas if we get a good hang",
    "start": "2281200",
    "end": "2288310"
  },
  {
    "text": "of laziness so to understand this let's take a look at a slightly different example here let's go ahead and say that",
    "start": "2288310",
    "end": "2294520"
  },
  {
    "text": "I want to start with a little example of a sample where I have a method called es Prime it returns whether a number is",
    "start": "2294520",
    "end": "2301420"
  },
  {
    "text": "prime or not but notice the main function the main function says n is",
    "start": "2301420",
    "end": "2306670"
  },
  {
    "text": "equal to 101 and n equal to 51 it costs a compute but what does the computer do computer is going to return the total of",
    "start": "2306670",
    "end": "2313870"
  },
  {
    "text": "square root of the first K prime number starting with n that's a simple problem",
    "start": "2313870",
    "end": "2318970"
  },
  {
    "text": "let's try to implement it in the imperative style first so I'm going to say double the result is equal to zero",
    "start": "2318970",
    "end": "2325720"
  },
  {
    "text": "and I want to return the result when I'm done with it but then what I'm going to do with this",
    "start": "2325720",
    "end": "2331120"
  },
  {
    "text": "is I'm gonna say over here in what is this index is equal to zero or rather",
    "start": "2331120",
    "end": "2337720"
  },
  {
    "text": "int is equal to index equal to n in count is equal to zero well if you",
    "start": "2337720",
    "end": "2343330"
  },
  {
    "text": "notice over here we set up some variables but then I say wild count is less than K",
    "start": "2343330",
    "end": "2348970"
  },
  {
    "text": "and I come to a grinding halt and ask the question is it less than K or less than R equal to K not you are still then",
    "start": "2348970",
    "end": "2356800"
  },
  {
    "text": "I say if and I'm gonna take the index value and say is prime of yield",
    "start": "2356800",
    "end": "2362870"
  },
  {
    "text": "then what am I going to do then I'm gonna say a result is plus equal to Matt",
    "start": "2362870",
    "end": "2369230"
  },
  {
    "text": "large square root off index now if they ask you if the code is correct you're",
    "start": "2369230",
    "end": "2374390"
  },
  {
    "text": "gonna say no it's not correct why not you have to increment the index well then you say you have to increment the",
    "start": "2374390",
    "end": "2380600"
  },
  {
    "text": "count as well then you tell me you have to increment the index inside but you",
    "start": "2380600",
    "end": "2386090"
  },
  {
    "text": "have to increment the counter rather count inside an index outside how do you feel about code like that this is an",
    "start": "2386090",
    "end": "2392900"
  },
  {
    "text": "example of accidental complexity now if you write a code like this you are staring at it to find out what the code",
    "start": "2392900",
    "end": "2399800"
  },
  {
    "text": "is doing and that fateful moment a business analyst comes to you and says hey how's it going and your response",
    "start": "2399800",
    "end": "2406100"
  },
  {
    "text": "normally is I'm trying to find out what the code is doing you shut up that's what we feel about it right we get irritated what if the code can be really",
    "start": "2406100",
    "end": "2413570"
  },
  {
    "text": "expressive wouldn't that be really nice after all well that code ran but let's",
    "start": "2413570",
    "end": "2418580"
  },
  {
    "text": "try to do this in the functional style how do we really execute it well what",
    "start": "2418580",
    "end": "2423920"
  },
  {
    "text": "I'm gonna do here is return stream dot ether rate and I'm gonna take the value",
    "start": "2423920",
    "end": "2430400"
  },
  {
    "text": "end to begin with give it an element element +1 stop right there and look at",
    "start": "2430400",
    "end": "2436610"
  },
  {
    "text": "that code for a minute when the world is this code doing this is an example of an",
    "start": "2436610",
    "end": "2442190"
  },
  {
    "text": "infinite stream this stream says I will give you value n n plus 1 n plus 2 n",
    "start": "2442190",
    "end": "2448730"
  },
  {
    "text": "plus 3 and plus 4 n plus 5 and plus 6 and keeps on going never to ever stop",
    "start": "2448730",
    "end": "2454490"
  },
  {
    "text": "giving you that value I know what you're thinking you're thinking oh my goodness if the stream is really infinite where",
    "start": "2454490",
    "end": "2462020"
  },
  {
    "text": "in the world will you store it on the cloud of course but the point really is that this stream is absolutely boundless",
    "start": "2462020",
    "end": "2469850"
  },
  {
    "text": "well the beauty of the stream is it is lazy evaluation it is smart enough to",
    "start": "2469850",
    "end": "2475490"
  },
  {
    "text": "say I will give you infinite stream if you dare to ask for infinite stream of",
    "start": "2475490",
    "end": "2481160"
  },
  {
    "text": "course we don't ever ask for something infinite so this is on demand it's like",
    "start": "2481160",
    "end": "2486200"
  },
  {
    "text": "all the movies and Netflix you only watch what you ask for not everything else that's there it",
    "start": "2486200",
    "end": "2492080"
  },
  {
    "text": "almost feels like there's n number of them isn't it that's the whole point is you are going to generate this",
    "start": "2492080",
    "end": "2497409"
  },
  {
    "text": "on the fly on the demand and that is laziness right there but then what I can",
    "start": "2497409",
    "end": "2502899"
  },
  {
    "text": "do here is I can say dot filter and and the filter simply says given a",
    "start": "2502899",
    "end": "2508599"
  },
  {
    "text": "collection of numbers get me only the prime numbers not anything else so given",
    "start": "2508599",
    "end": "2514479"
  },
  {
    "text": "all the numbers starting with n give me all the prime numbers that start with n then I say map and I'm gonna ask for",
    "start": "2514479",
    "end": "2521939"
  },
  {
    "text": "math square root so given all the numbers that start with n give me all the prime numbers that start with n but",
    "start": "2521939",
    "end": "2529149"
  },
  {
    "text": "give me the square root of all those numbers and you say 'don't limit k well",
    "start": "2529149",
    "end": "2534309"
  },
  {
    "text": "is it K or less than K or less there it's K dammit don't have to worry about it move on and then you can perform the",
    "start": "2534309",
    "end": "2540789"
  },
  {
    "text": "sum operation on it very easily as you can see to get exactly the same result",
    "start": "2540789",
    "end": "2546459"
  },
  {
    "text": "as the other one so you can see how the code becomes very highly expressive and",
    "start": "2546459",
    "end": "2552189"
  },
  {
    "text": "that's an example of using an infinite stream to solve the problem you can there's a slew of problems we never",
    "start": "2552189",
    "end": "2559179"
  },
  {
    "text": "really experienced in languages like Java because we never had the ability to so easily create an infinite collection",
    "start": "2559179",
    "end": "2566799"
  },
  {
    "text": "but now that we have the ability to have a level of indirection the ability to",
    "start": "2566799",
    "end": "2571839"
  },
  {
    "text": "really postpone computations we can benefit from solving problems that were",
    "start": "2571839",
    "end": "2577359"
  },
  {
    "text": "otherwise even hard to imagine and and we can use laziness and we can use infinite streams or to solve the problem",
    "start": "2577359",
    "end": "2584529"
  },
  {
    "text": "so to me that ability to do really infinite streams is one of the charming capabilities of the language is that it",
    "start": "2584529",
    "end": "2591009"
  },
  {
    "text": "gives us the ability to look at some algorithms and and solve those algorithms in ways we probably never",
    "start": "2591009",
    "end": "2597219"
  },
  {
    "text": "really imagined solving in the past so to summarize what we talked about here laziness really is important because now",
    "start": "2597219",
    "end": "2605559"
  },
  {
    "text": "what have we iterated what we talked about efficiency is not about running a",
    "start": "2605559",
    "end": "2611409"
  },
  {
    "text": "fast it is about avoiding a task that should not be executed executed in the",
    "start": "2611409",
    "end": "2620169"
  },
  {
    "text": "first place so in other words this is the core of efficiency if you really",
    "start": "2620169",
    "end": "2625299"
  },
  {
    "text": "think about it efficiency is not about running fast it is about about avoiding",
    "start": "2625299",
    "end": "2630700"
  },
  {
    "text": "tasks that shouldn't be done in the first place so as you are formulating your ideas and algorithms if there are",
    "start": "2630700",
    "end": "2637329"
  },
  {
    "text": "computations that can be saved away as an example one of the things that lays",
    "start": "2637329",
    "end": "2642579"
  },
  {
    "text": "in that that it leads to also is ability to really postpone computations at the",
    "start": "2642579",
    "end": "2648400"
  },
  {
    "text": "point where maybe you never have to execute it and if you never have to execute it why because your code says if",
    "start": "2648400",
    "end": "2655989"
  },
  {
    "text": "I don't have a reason to run this I can completely discard this evaluation and I",
    "start": "2655989",
    "end": "2661450"
  },
  {
    "text": "don't bother running it and that is a very powerful way of executing expressing code so it's not just the",
    "start": "2661450",
    "end": "2668200"
  },
  {
    "text": "expressiveness of the code but the efficiency of the code will bring to you as well as an example let's go back to",
    "start": "2668200",
    "end": "2674380"
  },
  {
    "text": "this code and look at it one more time if I were to go to this code where I am implementing this code as a as a",
    "start": "2674380",
    "end": "2680739"
  },
  {
    "text": "laziness if you will what I want to do is the ability to postpone operations",
    "start": "2680739",
    "end": "2686709"
  },
  {
    "text": "now the code can be very efficient to the point where you can never be more",
    "start": "2686709",
    "end": "2692259"
  },
  {
    "text": "efficient than not executing a piece of code isn't it because if when a code is",
    "start": "2692259",
    "end": "2697630"
  },
  {
    "text": "not even executed it takes the least amount of time than any other thing you can provide so going back to this",
    "start": "2697630",
    "end": "2703839"
  },
  {
    "text": "example real quick if you will when I run this code you can see it called all that function right there on the other",
    "start": "2703839",
    "end": "2710559"
  },
  {
    "text": "hand let's go ahead and remove this for just a second and I'm going to simply stop at the fine first right here and at",
    "start": "2710559",
    "end": "2718449"
  },
  {
    "text": "the very end of this I'm gonna simply say done when I execute this code right here you can see all that output and it",
    "start": "2718449",
    "end": "2725739"
  },
  {
    "text": "said done but the beauty of this is I'm going to simply go back to this code and",
    "start": "2725739",
    "end": "2730869"
  },
  {
    "text": "I'm going to comment out just the last part in the code and I'm going to simply restart this code and you can see it's a",
    "start": "2730869",
    "end": "2738699"
  },
  {
    "text": "done it did not bother to really execute the ease even function or the east'",
    "start": "2738699",
    "end": "2744519"
  },
  {
    "text": "greater than 3 or the double 8 and to me that is the ultimate efficiency you can get is that you can draw this pipeline",
    "start": "2744519",
    "end": "2751239"
  },
  {
    "text": "of these this dysfunctions and but the function pipeline is not",
    "start": "2751239",
    "end": "2757160"
  },
  {
    "text": "exercised until you attach a terminal operation to the pipeline if you don't",
    "start": "2757160",
    "end": "2762559"
  },
  {
    "text": "attach the terminal operation obviously then the execution doesn't really based its performance and efficiency is by",
    "start": "2762559",
    "end": "2769760"
  },
  {
    "text": "avoiding all the tasks that has no real benefit nor no real advantage and that",
    "start": "2769760",
    "end": "2775670"
  },
  {
    "text": "is where the efficiency comes through so if you're interested in downloading the code examples you're most welcome to",
    "start": "2775670",
    "end": "2781010"
  },
  {
    "text": "download from my website I'll be delighted to hear questions that you may have",
    "start": "2781010",
    "end": "2787420"
  },
  {
    "text": "you",
    "start": "2792690",
    "end": "2794750"
  }
]