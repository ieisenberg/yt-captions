[
  {
    "start": "0",
    "end": "77000"
  },
  {
    "text": "so uh this is a talk about how we translate Dart to efficient JavaScript and I hope you guys are",
    "start": "80",
    "end": "5400"
  },
  {
    "text": "interested in either JavaScript or compilers because this is uh the two topics that I'll be uh mentioning that",
    "start": "5400",
    "end": "11440"
  },
  {
    "text": "of course plus plus some Dart um so first of all um as I said my name is",
    "start": "11440",
    "end": "18240"
  },
  {
    "text": "Miss Casper I work as a software engineer at Google um I've done a lot of",
    "start": "18240",
    "end": "23519"
  },
  {
    "text": "uh programming language projects uh I used to do embedded Small Talk uh which was a lot of fun but apparently nobody",
    "start": "23519",
    "end": "30080"
  },
  {
    "text": "really likes the programming language that doesn't have curly braces so we ended up doing a V8 instead which is a a",
    "start": "30080",
    "end": "35760"
  },
  {
    "text": "Javas engine that we built at Google um that got included in Google Chrome that we shipped in like four years ago and we",
    "start": "35760",
    "end": "43399"
  },
  {
    "text": "had quite a lot of success with that small project that it's now being used not only in Chrome but also in node.js",
    "start": "43399",
    "end": "49719"
  },
  {
    "text": "and and other setups and and I think we've we've helped uh push the the",
    "start": "49719",
    "end": "55600"
  },
  {
    "text": "limits on what you can do with JavaScript which really brings me to the next uh bullet up there Dart Dart is um",
    "start": "55600",
    "end": "62519"
  },
  {
    "text": "is a language that I helped the code design it's a new structured programming language for the web and uh one of the",
    "start": "62519",
    "end": "68759"
  },
  {
    "text": "core features of it is that it compiles to JavaScript so it's compatible with the with the open web you can use it in",
    "start": "68759",
    "end": "74920"
  },
  {
    "text": "in any modern browser today so I'll give you an ultra quick",
    "start": "74920",
    "end": "80680"
  },
  {
    "start": "77000",
    "end": "184000"
  },
  {
    "text": "introduction to Dart uh but I'll Focus mostly on the on the compilation and the compilation of Dart to JavaScript so",
    "start": "80680",
    "end": "87200"
  },
  {
    "text": "Dart is an an unsurprising objectoriented programming language language it has classes with single",
    "start": "87200",
    "end": "92240"
  },
  {
    "text": "inheritance it has implied interfaces for those classes so you have something resembles interface from other languages",
    "start": "92240",
    "end": "99000"
  },
  {
    "text": "and it has a very familiar syntax the familiarity of the syntax is very important to us um it's very hard",
    "start": "99000",
    "end": "105759"
  },
  {
    "text": "to come up with a new programming language and make it a success so you need to make it look uh appealing to",
    "start": "105759",
    "end": "110920"
  },
  {
    "text": "people and a big part of that is making it look familiar um there are some Novelties in there and and some things",
    "start": "110920",
    "end": "117520"
  },
  {
    "text": "that we really uh very happy with like optional static type annotations that allow you to um in the places where it",
    "start": "117520",
    "end": "123680"
  },
  {
    "text": "makes sense for you document the intent of fields and variables by giving them a static type you don't have to do it but",
    "start": "123680",
    "end": "129840"
  },
  {
    "text": "you can um it's a very powerful thing I'm not going to spend a ton of time on that in this uh um in this presentation",
    "start": "129840",
    "end": "137840"
  },
  {
    "text": "but it's it's a very powerful feature of the platform that you you should probably try it out if you haven't already there's a tiny bit of uh code",
    "start": "137840",
    "end": "145280"
  },
  {
    "text": "here on the on this slide that just gives you a feel for what what DART is this is actually without any class or",
    "start": "145280",
    "end": "151760"
  },
  {
    "text": "anything it just uses a top level method called Main and it has the familiar uh c-based control structures like for",
    "start": "151760",
    "end": "158080"
  },
  {
    "text": "Loops uh variables introduced with a prefixed type like in I equals",
    "start": "158080",
    "end": "163920"
  },
  {
    "text": "99 and some print statements with some um string interpolation Expressions that just make it easier to work with strings",
    "start": "163920",
    "end": "170920"
  },
  {
    "text": "um hopefully this doesn't look too scary to you guys uh it'll get worse in the presentation going forward uh but",
    "start": "170920",
    "end": "177280"
  },
  {
    "text": "hopefully this is sort of a uh somewhat familiar to to most of",
    "start": "177280",
    "end": "183840"
  },
  {
    "text": "you so this is this is how we execute and deploy Dart code so you write your Dart code in uh in your favorite editor",
    "start": "183920",
    "end": "190920"
  },
  {
    "start": "184000",
    "end": "252000"
  },
  {
    "text": "um and you write it as source code then you have two options either you you run it directly on the virtual machine uh",
    "start": "190920",
    "end": "197560"
  },
  {
    "text": "that's the the rightmost part the dart virtual machine which is either embedded in a in a browser uh we have custom",
    "start": "197560",
    "end": "204280"
  },
  {
    "text": "builds of uh of chromium the um the source base for for Chrome uh that has",
    "start": "204280",
    "end": "210360"
  },
  {
    "text": "the this this native VM enabled in it so there's no compilation step you just run it there which is really nice you can",
    "start": "210360",
    "end": "216239"
  },
  {
    "text": "even run it stand alone as a serers side scripting language um it's a very nice feature um on the other hand if you're",
    "start": "216239",
    "end": "223640"
  },
  {
    "text": "in a situation where being compatible with existing browsers out there is really important to you um you can also",
    "start": "223640",
    "end": "229239"
  },
  {
    "text": "use uh the dart to JavaScript compile that we've built to translate your Dart code to JavaScript that runs on any",
    "start": "229239",
    "end": "234879"
  },
  {
    "text": "modern browser this is a very simple picture and there are other tools involved to but you have these two options either",
    "start": "234879",
    "end": "242200"
  },
  {
    "text": "you compile to JavaScript and run that in a an existent browser or you run the",
    "start": "242200",
    "end": "247519"
  },
  {
    "text": "code without compiling it just directly on a native VM so start to JavaScript compilation uh",
    "start": "247519",
    "end": "255959"
  },
  {
    "start": "252000",
    "end": "472000"
  },
  {
    "text": "is very important to us it's very important for us to support dot across all modern browsers um so we we",
    "start": "255959",
    "end": "262280"
  },
  {
    "text": "regularly test on both Chrome Firefox I and Safari upper is just around the corner for us um so we want to make sure",
    "start": "262280",
    "end": "269400"
  },
  {
    "text": "that uh no matter what kind of modern browser user is using uh you can run Dart code in that browser through",
    "start": "269400",
    "end": "276120"
  },
  {
    "text": "translation so this actually means that the dart VM is is an optional component you don't have to use it it's very cool",
    "start": "276120",
    "end": "283800"
  },
  {
    "text": "and it's very fast um but you don't have to use it we're not trying to force you into using that piece of technology so",
    "start": "283800",
    "end": "290039"
  },
  {
    "text": "being able to compile to JavaScript is very important of course it's also important that we can generate efficient and",
    "start": "290039",
    "end": "296400"
  },
  {
    "text": "compact JavaScript um that should go without saying like the",
    "start": "296400",
    "end": "302039"
  },
  {
    "text": "uh the team that I'm a member of we uh we take great pride in in performance and it's really what drives us so uh",
    "start": "302039",
    "end": "308639"
  },
  {
    "text": "being able to compile to something that's efficient to run and is is fairly compact is certainly something we care a",
    "start": "308639",
    "end": "314520"
  },
  {
    "text": "lot about um the third thing is that we we want this translation to implement",
    "start": "314520",
    "end": "320560"
  },
  {
    "text": "the proper dark semantics um when translate into JavaScript there are certain things that you could uh decide",
    "start": "320560",
    "end": "326720"
  },
  {
    "text": "to perhaps not do like JavaScript allows you to pass any number of arguments to",
    "start": "326720",
    "end": "331960"
  },
  {
    "text": "your functions you can pass too few or you can pass too many Dart doesn't allow that so we have to make sure that we",
    "start": "331960",
    "end": "337479"
  },
  {
    "text": "translate Dart to JavaScript we keep that same of semantics that you cannot",
    "start": "337479",
    "end": "343440"
  },
  {
    "text": "pass too many or too few arguments to a function um we want it to be more strict and more uh well",
    "start": "343440",
    "end": "350000"
  },
  {
    "text": "less there's no implicit coercion to numbers and strings in Dart so whenever",
    "start": "350000",
    "end": "355560"
  },
  {
    "text": "the underlying JavaScript platform would do those things for you we have to make sure that it doesn't affect the",
    "start": "355560",
    "end": "360600"
  },
  {
    "text": "semantics I'll give you some examples on on what that really does to the code and and what we have to guard against",
    "start": "360600",
    "end": "366240"
  },
  {
    "text": "essentially in in a few moments the other big thing is Javascript as a language doesn't have the notion of",
    "start": "366240",
    "end": "372039"
  },
  {
    "text": "checking U indexes when you access arrays and lists so it's essentially",
    "start": "372039",
    "end": "377400"
  },
  {
    "text": "anything goes if you pass in an index that's not within range you just get undefined out that's not the dart",
    "start": "377400",
    "end": "383360"
  },
  {
    "text": "semantics we actually want you to get an exception if you try to go outside the bounce of a list and an array",
    "start": "383360",
    "end": "391160"
  },
  {
    "text": "so here's a small example more Dart code it has a main method and uh it creates",
    "start": "392520",
    "end": "397560"
  },
  {
    "text": "two points in this case I decided not to put static type annotations on the p and Q variables so this looks very much like",
    "start": "397560",
    "end": "404319"
  },
  {
    "text": "JavaScript code it computes uh two points I said p and Q by calling the",
    "start": "404319",
    "end": "409919"
  },
  {
    "text": "constructors of those things and then it um computes the distance from P2 to Q so",
    "start": "409919",
    "end": "415080"
  },
  {
    "text": "how does this look if we translate that to JavaScript well it's pretty close this is actually the JavaScript we",
    "start": "415080",
    "end": "420560"
  },
  {
    "text": "generate for that so there is a main method well in this case it's a it's a JavaScript function assigned to the main",
    "start": "420560",
    "end": "427160"
  },
  {
    "text": "property of a dollar object that I'll tell you a bit about uh later and within",
    "start": "427160",
    "end": "432440"
  },
  {
    "text": "that function body the code is more or less what you would expect there's uh two Constructor calls in this case we're",
    "start": "432440",
    "end": "439160"
  },
  {
    "text": "not using new right here uh it's actually hidden behind this Factory call through to the point uh Factory uh but",
    "start": "439160",
    "end": "446720"
  },
  {
    "text": "the distance to call is also a bit special in that it has a dollar one uh suffix at the end which is our way of",
    "start": "446720",
    "end": "453639"
  },
  {
    "text": "making sure that uh the distance two method gets exactly one argument but if",
    "start": "453639",
    "end": "458759"
  },
  {
    "text": "you take a step back and maybe uh um halfway close your eyes this will look",
    "start": "458759",
    "end": "465039"
  },
  {
    "text": "more or less like the slide I showed before it's very very close uh to a like a one to one",
    "start": "465039",
    "end": "471240"
  },
  {
    "text": "translation so I mentioned that these these uh top level functions and in this",
    "start": "471240",
    "end": "477199"
  },
  {
    "start": "472000",
    "end": "785000"
  },
  {
    "text": "case the main method is put on this dollar object why do we do that so JavaScript has a notion of global",
    "start": "477199",
    "end": "483599"
  },
  {
    "text": "functions so you could all just you just stuff them on the global object instead well it turns out that putting too much",
    "start": "483599",
    "end": "489440"
  },
  {
    "text": "stuff in the global object is kind of annoying if you want any kind of modularity in your code so if you ever",
    "start": "489440",
    "end": "494520"
  },
  {
    "text": "want to mix in code from some other place uh you may have conflicts on this one global object so instead of throwing",
    "start": "494520",
    "end": "501800"
  },
  {
    "text": "things in the global object we actually go for putting them in a in a smaller um",
    "start": "501800",
    "end": "506919"
  },
  {
    "text": "object uh and we just have this Shand notation for acing that called the dollar thing it's actually part of our",
    "start": "506919",
    "end": "513599"
  },
  {
    "text": "um isolet story and isets are our way of running multiple independent uh units on",
    "start": "513599",
    "end": "519800"
  },
  {
    "text": "the same JavaScript VM uh so there every single iset would have its own uh sort",
    "start": "519800",
    "end": "525560"
  },
  {
    "text": "of uh isolate object represented by this dollar thing so top level functions uh",
    "start": "525560",
    "end": "532480"
  },
  {
    "text": "Constructors all those things they just go into that one namespace instead the compiler emits that for us so the method",
    "start": "532480",
    "end": "538920"
  },
  {
    "text": "calls were just simple javascri function calls except that we translate um and encode the aity of the call in the in",
    "start": "538920",
    "end": "546480"
  },
  {
    "text": "the name of the method that we're calling um this is also done to to help us support something like a named",
    "start": "546480",
    "end": "552399"
  },
  {
    "text": "optional arguments which is a it's a feature of the platform um and and essentially we're just trying to make",
    "start": "552399",
    "end": "557720"
  },
  {
    "text": "sure that the the stricter sematics we have of Dart um is kept when we compile to",
    "start": "557720",
    "end": "564839"
  },
  {
    "text": "JavaScript so the the dart compiler is um is kind of sophisticated uh piece of",
    "start": "564920",
    "end": "570800"
  },
  {
    "text": "code at this point um we started out uh with a a somewhat simple implementation",
    "start": "570800",
    "end": "576120"
  },
  {
    "text": "of the um of the dart compiler and it generated quite a lot of code and uh it took a long time to generate that amount",
    "start": "576120",
    "end": "583040"
  },
  {
    "text": "of code and it turned out that we were actually compiling a lots lots of pieces of the code that weren't used at all so",
    "start": "583040",
    "end": "589040"
  },
  {
    "text": "we decided to try to tackle that from the from the ground up and through a mechanism we call tree shaking uh think",
    "start": "589040",
    "end": "596079"
  },
  {
    "text": "of all your code as a sort of a a tree and uh or sort of a weird graph of of",
    "start": "596079",
    "end": "604920"
  },
  {
    "text": "dependencies between the different functions and the classes and think of the uh the the dep pendency uh tree that",
    "start": "604920",
    "end": "612200"
  },
  {
    "text": "you can get of that grabbing hold of the main method the one entry point you notice there just shaking it until all",
    "start": "612200",
    "end": "618480"
  },
  {
    "text": "the things that you don't need drops out that's what we think of when we say tree shaking it's actually a term from at",
    "start": "618480",
    "end": "624079"
  },
  {
    "text": "least the old Small Talk systems that we've just kept in the in the mix here it has three stage is this tree shaking",
    "start": "624079",
    "end": "630959"
  },
  {
    "text": "it starts out on the uh on the very right uh that is the left um by reading",
    "start": "630959",
    "end": "637160"
  },
  {
    "text": "in the the the main file which may have Imports of other files and may have uh source file uh that needs to be read",
    "start": "637160",
    "end": "644720"
  },
  {
    "text": "from either uh the web or local file system we just read them in and we do a",
    "start": "644720",
    "end": "650040"
  },
  {
    "text": "very quick sort of U it's a bit of a hacky parsing of this thing we don't look at method bodies we don't look at",
    "start": "650040",
    "end": "656120"
  },
  {
    "text": "all the concept that we don't really need to look at we just want to figure out what are all the bits and pieces that we need to uh to bring in all the",
    "start": "656120",
    "end": "663519"
  },
  {
    "text": "source pieces once we have that brought in we'll actually uh start the the middle phase which is the resolving",
    "start": "663519",
    "end": "669560"
  },
  {
    "text": "phase where we figure out what every name refers to and the way we start that is actually just by putting this main",
    "start": "669560",
    "end": "675959"
  },
  {
    "text": "method of the uh of the entry point into a a resolution a resolver que um then we",
    "start": "675959",
    "end": "682200"
  },
  {
    "text": "do a full part of that when we have a full part of that we will know more about the the method body there so if",
    "start": "682200",
    "end": "688160"
  },
  {
    "text": "main refers to some something like the point Constructor H we'll actually go back from the resolver and feed that",
    "start": "688160",
    "end": "694160"
  },
  {
    "text": "into the resolver queue and say we we actually need those Constructors too um because you don't have full type system",
    "start": "694160",
    "end": "700279"
  },
  {
    "text": "in in a system like d it's sort of a conservative approach here so if you see a call to a method called Foo on",
    "start": "700279",
    "end": "707160"
  },
  {
    "text": "something you don't really know what is you just have to make sure that you put in all the fu methods that could potentially be called so this is an",
    "start": "707160",
    "end": "714360"
  },
  {
    "text": "approximation of the set of things that you need um turns out it's it actually works pretty well there's a lot of",
    "start": "714360",
    "end": "720160"
  },
  {
    "text": "things we don't have to deal with in in the common case U but we we do tend to get a bit too much um uh information or",
    "start": "720160",
    "end": "727480"
  },
  {
    "text": "a bit too many uh methods involved in that way so this Q actually knows about",
    "start": "727480",
    "end": "732880"
  },
  {
    "text": "class that we know that are instantiated it knows about which method names are in use and it it knows a bit about type",
    "start": "732880",
    "end": "738480"
  },
  {
    "text": "information for receivers most typically because you've called Methods only on the this object where you know something",
    "start": "738480",
    "end": "744760"
  },
  {
    "text": "about the enclosing class once we've done the resolution we know something about which name bind to which things we",
    "start": "744760",
    "end": "750800"
  },
  {
    "text": "actually feed that into another queue which is the compilation queue and we start over we put in the main method",
    "start": "750800",
    "end": "756480"
  },
  {
    "text": "there and uh we we build that essentially again that same queue the reason why we do that is that the code",
    "start": "756480",
    "end": "762800"
  },
  {
    "text": "generator um actually has an optimization phase that propagates type",
    "start": "762800",
    "end": "768000"
  },
  {
    "text": "information through this um uh through the intermediate representations we have in play so sometimes we have more type",
    "start": "768000",
    "end": "774040"
  },
  {
    "text": "information there so uh whereas in the resolver we might know that fu is called",
    "start": "774040",
    "end": "779320"
  },
  {
    "text": "on something in the code generator we actually may know something about what it is called on this is very abstract um",
    "start": "779320",
    "end": "786040"
  },
  {
    "start": "785000",
    "end": "828000"
  },
  {
    "text": "but the end result is that we end up diet parsing a whole lot um we resolve and parse slightly less than that and we",
    "start": "786040",
    "end": "792720"
  },
  {
    "text": "actually compile and generate JavaScript code for a subset of that uh the net",
    "start": "792720",
    "end": "798000"
  },
  {
    "text": "result is that something like um like a hello world example compiles",
    "start": "798000",
    "end": "803279"
  },
  {
    "text": "to a very very short amounts of JavaScript code um and of course the more dependencies and the more stuff you",
    "start": "803279",
    "end": "809600"
  },
  {
    "text": "import from other libraries and you include that way the bigger your application will get so it's it's more",
    "start": "809600",
    "end": "815440"
  },
  {
    "text": "like a pay as you go rather than anything else so so when compiling Dart to JavaScript",
    "start": "815440",
    "end": "822360"
  },
  {
    "text": "there are some language challenges that I I briefly mentioned before I just want to dive into some of those one of the",
    "start": "822360",
    "end": "828000"
  },
  {
    "start": "828000",
    "end": "1054000"
  },
  {
    "text": "big ones is that Dart has support for user definable operators so you could say that on my class uh my vector class",
    "start": "828000",
    "end": "835399"
  },
  {
    "text": "that I invented I want to support uh the plus operation so you can add these vectors together",
    "start": "835399",
    "end": "841600"
  },
  {
    "text": "for instance JavaScript has this notion of implicitly converting plus inputs to",
    "start": "841600",
    "end": "847079"
  },
  {
    "text": "Numbers if you do a plus somewhere it's either converted to a number or string the two inputs depending on well the",
    "start": "847079",
    "end": "853680"
  },
  {
    "text": "inputs but there's no way you can make that plus like the JavaScript plus",
    "start": "853680",
    "end": "859360"
  },
  {
    "text": "um uh essentially do like a more high level plus operation on vectors for you",
    "start": "859360",
    "end": "864839"
  },
  {
    "text": "so you cannot use JavaScript plus to implement Dart Plus in the general case it just doesn't work the the other way",
    "start": "864839",
    "end": "872160"
  },
  {
    "text": "to do it like the simple way is just to say whenever we see a plus and dart code we'll just call a method on the uh on",
    "start": "872160",
    "end": "877920"
  },
  {
    "text": "the left hand side and we actually tried doing that just like just add method calls for all arithmetic operations",
    "start": "877920",
    "end": "884720"
  },
  {
    "text": "turns out it's just too slow at the at the sort of the lowest part of the slide here I've showed how",
    "start": "884720",
    "end": "890839"
  },
  {
    "text": "you could do that by just adding a add method or a sub method to the number prototype and that actually allows you",
    "start": "890839",
    "end": "897000"
  },
  {
    "text": "to call the ad method or the sub method on numbers so it actually works the problem is this method is very slow and",
    "start": "897000",
    "end": "903519"
  },
  {
    "text": "the reason why it's very slow well one of the reasons why it's very slow is that inside this JavaScript function",
    "start": "903519",
    "end": "910360"
  },
  {
    "text": "that this uh reference in there is actually a box object so when you call",
    "start": "910360",
    "end": "916480"
  },
  {
    "text": "when you call the add method on uh say on the integer one JavaScript the Javas",
    "start": "916480",
    "end": "924680"
  },
  {
    "text": "actually has to go ahead and wrap that integer one in a new object and and bind",
    "start": "924680",
    "end": "931079"
  },
  {
    "text": "this to that object before it can call that method which gives you the overhead of allocating on every single arithmetic",
    "start": "931079",
    "end": "936880"
  },
  {
    "text": "operation which is just painfully slow in strict mode that's not the case but it's uh we didn't want to use strict",
    "start": "936880",
    "end": "942600"
  },
  {
    "text": "mode to um to make this uh we didn't want to rely on strict mode for making",
    "start": "942600",
    "end": "947680"
  },
  {
    "text": "our stuff work and be efficient so our solution is actually to to figure out when we can use JavaScript plus when",
    "start": "947680",
    "end": "953680"
  },
  {
    "text": "it's safe to use it when it has the right semantics for us and we do that by tracking types in the compiler so if we",
    "start": "953680",
    "end": "959639"
  },
  {
    "text": "know something about the operant if we know you're operating on uh on numbers it's safe to use uh a JavaScript Plus",
    "start": "959639",
    "end": "966680"
  },
  {
    "text": "for that the other big thing is the range checking so JavaScript has no notion of",
    "start": "966680",
    "end": "973040"
  },
  {
    "text": "of out of bounds axis and all all keys are essentially treated as as strings I'm not sure that all people that",
    "start": "973040",
    "end": "978959"
  },
  {
    "text": "actually work with Javas are sort of aware of this that they're actually working in a language that allows them",
    "start": "978959",
    "end": "984279"
  },
  {
    "text": "to uh well that actually doesn't really help them in in defining finding arrays",
    "start": "984279",
    "end": "989440"
  },
  {
    "text": "of a certain size and checking that you're asking stuff within that um so in Dart we've decided to uh to fix this",
    "start": "989440",
    "end": "996279"
  },
  {
    "text": "problem that Javas pass of of sort of keep keep on tracking mentality that just anything goes and we'll just deal",
    "start": "996279",
    "end": "1001880"
  },
  {
    "text": "with it later uh by inserting these explicit index checks uh unless we can prove that we don't need them so that",
    "start": "1001880",
    "end": "1008399"
  },
  {
    "text": "means that whenever you access an element of an array in in in Dart code in the JavaScript code translated from",
    "start": "1008399",
    "end": "1014839"
  },
  {
    "text": "that you will see explicit checks that you're within the range of that which is some like comparing against zero and the",
    "start": "1014839",
    "end": "1020399"
  },
  {
    "text": "lengths and stuff I'll show you that code in a moment so here's a nice piece of start code that um we'll allow me to",
    "start": "1020399",
    "end": "1027678"
  },
  {
    "text": "uh to tell you a bit about these uh optimizations here so can can anybody see this code at the the back to",
    "start": "1027679",
    "end": "1034120"
  },
  {
    "text": "otherwise you'll have to uh come closer so this is again Dart code has a main",
    "start": "1034120",
    "end": "1039640"
  },
  {
    "text": "method it creates a list uh there's a sum variable and just runs through the elements of the uh of the list from zero",
    "start": "1039640",
    "end": "1045360"
  },
  {
    "text": "to the uh to almost up to the length and just adds them together and prints the result fairly simple code when we",
    "start": "1045360",
    "end": "1052679"
  },
  {
    "text": "compile this to JavaScript code it it's not a onetoone translation anymore so you can probably recognize some things",
    "start": "1052679",
    "end": "1058360"
  },
  {
    "start": "1054000",
    "end": "1176000"
  },
  {
    "text": "in there the list is unchanged uh the for Loop looks a bit bigger um but the",
    "start": "1058360",
    "end": "1064880"
  },
  {
    "text": "biggest thing is really that before accessing the the the list um elements we actually insert an explicit check",
    "start": "1064880",
    "end": "1072400"
  },
  {
    "text": "which is the if I less than zero or I greater than the length of the list greater than equal throw this index out",
    "start": "1072400",
    "end": "1079440"
  },
  {
    "text": "of range exception that's the uh we the Poo reference I order um once when when",
    "start": "1079440",
    "end": "1086520"
  },
  {
    "text": "we've done that check it's perfectly safe to access the list as a list uh as a JavaScript array actually uh which",
    "start": "1086520",
    "end": "1092760"
  },
  {
    "text": "makes it reasonably fast but it's kind of annoying that we have to insert this check just because JavaScript doesn't do",
    "start": "1092760",
    "end": "1097919"
  },
  {
    "text": "that for us but to preserve the right startart semantics we've decided to do that the other big thing here is that",
    "start": "1097919",
    "end": "1104120"
  },
  {
    "text": "whenever you're adding things together to be able to use JavaScript plus you have to make sure that the stuff operating on is actually numbers so we",
    "start": "1104120",
    "end": "1111360"
  },
  {
    "text": "actually check that stuff we we read from uh from the list is a number before we operate on it if it's not a number we",
    "start": "1111360",
    "end": "1117919"
  },
  {
    "text": "will actually throw an illegal argument exception instead um you can see we've",
    "start": "1117919",
    "end": "1123159"
  },
  {
    "text": "done uh some amount of of shortening the code here by using shorter names just to",
    "start": "1123159",
    "end": "1128720"
  },
  {
    "text": "uh well for one thing make it fit on the slide and the other thing is of course that people care about code size so if we insert these checks everywhere in",
    "start": "1128720",
    "end": "1135480"
  },
  {
    "text": "their code uh we have to make sure that um that do take up too much space",
    "start": "1135480",
    "end": "1141039"
  },
  {
    "text": "either one thing I probably should mention here is that uh we actually clever enough to realize that the the",
    "start": "1141039",
    "end": "1146520"
  },
  {
    "text": "list that length doesn't change in this uh loop so we Heist that out of the loop and read it uh before entering the loop",
    "start": "1146520",
    "end": "1153000"
  },
  {
    "text": "only once uh and actually uh if I were to recompile this today the uh the",
    "start": "1153000",
    "end": "1159159"
  },
  {
    "text": "length check would actually uh go away because we've implemented um some array bounds check elimination because in this",
    "start": "1159159",
    "end": "1165320"
  },
  {
    "text": "case it's simple enough that we actually know we're within bounds so this is actually kind of wrong to show you guys but it's",
    "start": "1165320",
    "end": "1171240"
  },
  {
    "text": "it's just nice to show you that you might see stuff like this in your code if you compile and look at the",
    "start": "1171240",
    "end": "1177080"
  },
  {
    "start": "1176000",
    "end": "1383000"
  },
  {
    "text": "output another thing that is fairly common in Dart is to write uh classes um",
    "start": "1177080",
    "end": "1183080"
  },
  {
    "text": "so we see a lot of people in JavaScript using something that resembles classes by by having these patterns that they",
    "start": "1183080",
    "end": "1188840"
  },
  {
    "text": "use for setting up a Constructor function and adding a bunch of methods",
    "start": "1188840",
    "end": "1194200"
  },
  {
    "text": "to the Prototype off it and they have different patterns and some Frameworks support different patterns and uh um and",
    "start": "1194200",
    "end": "1202640"
  },
  {
    "text": "it's certainly the case that uh even when programming in JavaScript there's a lot of sort of adoc class definitions",
    "start": "1202640",
    "end": "1208360"
  },
  {
    "text": "floating around in Dart it's it's even more so people write a lot of classes and that means that you have a lot of",
    "start": "1208360",
    "end": "1214679"
  },
  {
    "text": "the like the boilerplate um for creating instances of classes and accessing the fields of classes that you need to uh",
    "start": "1214679",
    "end": "1221799"
  },
  {
    "text": "figure out how to um how to produce so we've decided to to go for um like using",
    "start": "1221799",
    "end": "1226960"
  },
  {
    "text": "a a simple helper function for setting up this system and just generate most of this spiler plate dynamically at runtime",
    "start": "1226960",
    "end": "1233280"
  },
  {
    "text": "using the fact that JavaScript is a dynamic platform that can actually you can inject and generate new code into at",
    "start": "1233280",
    "end": "1238960"
  },
  {
    "text": "runtime so it looks like this the the point class I I showed you before um",
    "start": "1238960",
    "end": "1245480"
  },
  {
    "text": "well I used before would actually compile to something like this this is Javascript code it looks a bit foreign",
    "start": "1245480",
    "end": "1250960"
  },
  {
    "text": "it has it has a uh an assignment to a point property on the um on the IET",
    "start": "1250960",
    "end": "1257840"
  },
  {
    "text": "object add it has uh it has a method um and it has a super class definition so",
    "start": "1257840",
    "end": "1264120"
  },
  {
    "text": "we hack it all into one uh object literal um which is fairly compact the",
    "start": "1264120",
    "end": "1270080"
  },
  {
    "text": "empty string up there denotes the uh the fields that we have so we say that all points have an X and A Y",
    "start": "1270080",
    "end": "1275600"
  },
  {
    "text": "field nowhere here do we have to write the actual Constructor function for the point because that is actually computed",
    "start": "1275600",
    "end": "1283360"
  },
  {
    "text": "at runtime from this list of field definitions uh and the superclass definition that is object",
    "start": "1283360",
    "end": "1289240"
  },
  {
    "text": "the methods however are just put in here like ordinary properties on this this object um so the distance two method",
    "start": "1289240",
    "end": "1295559"
  },
  {
    "text": "with the dollar one R encoding stuff um looks more or less like the javascri",
    "start": "1295559",
    "end": "1302080"
  },
  {
    "text": "function you would expect but the stuff around it is actually a compact way of introducing classes so we take this list",
    "start": "1302080",
    "end": "1308480"
  },
  {
    "text": "of fields like X comma Y and we we turn it into code like function point x comma",
    "start": "1308480",
    "end": "1314080"
  },
  {
    "text": "y this the X assignment all that stuff all that boiler plate we generate that for you at",
    "start": "1314080",
    "end": "1319640"
  },
  {
    "text": "runtime of course you only have to do this once with the the point class once it's in play you don't have to do it",
    "start": "1319640",
    "end": "1325080"
  },
  {
    "text": "anymore but it means that you the code you transfer to your clients is smaller and it only sort of uh expands in size",
    "start": "1325080",
    "end": "1332799"
  },
  {
    "text": "when it's actually run on the on the client side so we get these um helpers",
    "start": "1332799",
    "end": "1338159"
  },
  {
    "text": "generated for us by the system we actually also allow you to have um um",
    "start": "1338159",
    "end": "1343799"
  },
  {
    "text": "field list that have S of slightly more advanced annotation so you can have a question Mark or an or an assignment um",
    "start": "1343799",
    "end": "1352799"
  },
  {
    "text": "thing in the uh in the field name and just that's just our way of of figuring",
    "start": "1352799",
    "end": "1358279"
  },
  {
    "text": "out if we need to introduce a Setter or a getter or a combination of the two for those fields so this is just a a compact",
    "start": "1358279",
    "end": "1364640"
  },
  {
    "text": "way of doing it nice thing is if you look at the JavaScript output that we generate it it looks like we preserve",
    "start": "1364640",
    "end": "1370600"
  },
  {
    "text": "the class structure pretty well so I hope you're all familiar with",
    "start": "1370600",
    "end": "1376799"
  },
  {
    "text": "closures in JavaScript at least um so in in in Dart uh we do have closure support",
    "start": "1376799",
    "end": "1382960"
  },
  {
    "text": "so you can have these function expression floating around that takes uh arguments and produces values and our",
    "start": "1382960",
    "end": "1389840"
  },
  {
    "start": "1383000",
    "end": "1486000"
  },
  {
    "text": "closures actually support named arguments and they also have to be checked in the sense that if you pass too many arguments to them or too few we",
    "start": "1389840",
    "end": "1397000"
  },
  {
    "text": "want to catch that so um initially we wanted to try to compile",
    "start": "1397000",
    "end": "1402520"
  },
  {
    "text": "a dart closure to a JavaScript closure it turns out that it's kind of painful because the JavaScript closure is",
    "start": "1402520",
    "end": "1408159"
  },
  {
    "text": "something you can just invoke and there has no notion of checking how many arguments you pass it at least no cheap",
    "start": "1408159",
    "end": "1413720"
  },
  {
    "text": "way of doing it and uh it just somehow just hard to figure out a way of making",
    "start": "1413720",
    "end": "1419200"
  },
  {
    "text": "this fit really nicely together so at some point we realized that allocating small Javas object is actually very",
    "start": "1419200",
    "end": "1424799"
  },
  {
    "text": "cheap it's uh faster than allocating uh closures in many cases at least on",
    "start": "1424799",
    "end": "1430400"
  },
  {
    "text": "certain VMS and we found that even with uh up to like six or seven Fields you",
    "start": "1430400",
    "end": "1435960"
  },
  {
    "text": "can create an object of simple J object in the same amount of time as you can create U and the same amount of space as",
    "start": "1435960",
    "end": "1442640"
  },
  {
    "text": "you can create a a closure so we we talked about actually just using um",
    "start": "1442640",
    "end": "1448440"
  },
  {
    "text": "objects for representing the uh the um the dart closures so we actually",
    "start": "1448440",
    "end": "1454039"
  },
  {
    "text": "implemented this and it turned out so nice that this is what we kept in the system so we treat closures as instances",
    "start": "1454039",
    "end": "1459559"
  },
  {
    "text": "of closure classes so essentially in our model a closure is just some object that",
    "start": "1459559",
    "end": "1466039"
  },
  {
    "text": "has support for being invoked it has these call methods uh we use instance",
    "start": "1466039",
    "end": "1471320"
  },
  {
    "text": "fields in these um in these closure classes to uh to represent the variables",
    "start": "1471320",
    "end": "1476520"
  },
  {
    "text": "that you capture from your scope and we use methods on these closure classes to implement the calling intervention that",
    "start": "1476520",
    "end": "1482120"
  },
  {
    "text": "we need this is a bit abstract I'll just show you here's D code there's a list um",
    "start": "1482120",
    "end": "1488000"
  },
  {
    "start": "1486000",
    "end": "1643000"
  },
  {
    "text": "I run through the list and for every element in the list um I will uh get the",
    "start": "1488000",
    "end": "1494200"
  },
  {
    "text": "index um this is actually kind of weird code but anyway",
    "start": "1494200",
    "end": "1499760"
  },
  {
    "text": "uh what you have in the middle of it here is actually a closure that takes uh a parameter each and produces the result",
    "start": "1499760",
    "end": "1507240"
  },
  {
    "text": "of calling list. index off with that each thing and at the end we print everything so this is very short concise",
    "start": "1507240",
    "end": "1515399"
  },
  {
    "text": "Syntax for uh for doing maps map operations on on a list and what we compile it to is actually",
    "start": "1515399",
    "end": "1521840"
  },
  {
    "text": "this at the bottom you can see this closure class it's it's a class like any other it's like the pointing I've showed",
    "start": "1521840",
    "end": "1527799"
  },
  {
    "text": "you before it has a single instance field called list um and it has a method",
    "start": "1527799",
    "end": "1533840"
  },
  {
    "text": "called Call Dollar one which is what we need to uh the action we need to invoke when we're invoking this closure with",
    "start": "1533840",
    "end": "1540360"
  },
  {
    "text": "one argument so in there you actually see the code for the closure at the use",
    "start": "1540360",
    "end": "1546080"
  },
  {
    "text": "site where we allocate a new uh new closure and pass it to the map operation what you what you have there is actually",
    "start": "1546080",
    "end": "1552840"
  },
  {
    "text": "a a standard allocation called that creates a new new closure so it's it's",
    "start": "1552840",
    "end": "1558320"
  },
  {
    "text": "fairly simple that way the the biggest downside is that it really rips apart the uh the body of the of the closure",
    "start": "1558320",
    "end": "1565039"
  },
  {
    "text": "and puts it in a different place in the code so essentially this splitting it out in two different uh Parts in the",
    "start": "1565039",
    "end": "1571840"
  },
  {
    "text": "output is sometimes a bit harder when you have to debug because you end up jumping between different places but it's very nice uh for uh um for",
    "start": "1571840",
    "end": "1579760"
  },
  {
    "text": "compiling and having a a unified model of how we deal with closures and classes so one thing that that that's probably",
    "start": "1579760",
    "end": "1586600"
  },
  {
    "text": "worth mentioning here is that it might be a small detail for some but it's actually kind of important that at",
    "start": "1586600",
    "end": "1591720"
  },
  {
    "text": "the return dollar Index off we're not calling index off on the list we're",
    "start": "1591720",
    "end": "1598039"
  },
  {
    "text": "actually passing the list as the first document and this is a general thing um in our system we've decided not to do",
    "start": "1598039",
    "end": "1605399"
  },
  {
    "text": "what people usually refer to as monkey patching of the of the core classes so numbers arrays and strings of JavaScript",
    "start": "1605399",
    "end": "1612320"
  },
  {
    "text": "we're not adding a ton of new functionality on them we actually prefer to keep that on the side in this I",
    "start": "1612320",
    "end": "1618600"
  },
  {
    "text": "object and we just invoke this Isel object with this as the first parameter instead because then you don't have to",
    "start": "1618600",
    "end": "1624559"
  },
  {
    "text": "actually add things to these things again this is a way of trying to avoid uh clashing uh name clashes in these",
    "start": "1624559",
    "end": "1631279"
  },
  {
    "text": "these common objects so I showed you a lot of code",
    "start": "1631279",
    "end": "1636840"
  },
  {
    "text": "already H now I want to tell you a bit about how we actually go about generating this code so uh as I said the",
    "start": "1636840",
    "end": "1643399"
  },
  {
    "start": "1643000",
    "end": "1673000"
  },
  {
    "text": "dart compiler is uh is is kind of sophisticated uh Beast um it's a fairly",
    "start": "1643399",
    "end": "1649520"
  },
  {
    "text": "of classic compiler except for the tree shaking perhaps and it starts with building syntax trees for the dart uh",
    "start": "1649520",
    "end": "1655159"
  },
  {
    "text": "Dart code uh syntax trees are um like a very simple representation of of your",
    "start": "1655159",
    "end": "1661360"
  },
  {
    "text": "source code and it could look something like this for a for a simple plus expression you have a plus Noe and you",
    "start": "1661360",
    "end": "1666880"
  },
  {
    "text": "have a two and a three note hanging below it so we go through a stage that we called a SSA graph building that",
    "start": "1666880",
    "end": "1673919"
  },
  {
    "start": "1673000",
    "end": "1853000"
  },
  {
    "text": "actually constructs an intermediate representation based on an SSA form SSA form is probably not familiar to all of",
    "start": "1673919",
    "end": "1680720"
  },
  {
    "text": "you so I'll just give you a brief uh sort of heads up on what that is so the SSA form is static single assignment",
    "start": "1680720",
    "end": "1686360"
  },
  {
    "text": "form so it's a it's a a classic compiler uh intermediate representation form that",
    "start": "1686360",
    "end": "1692000"
  },
  {
    "text": "that people have used over the last maybe 20 years to uh with u with good results for uh for dealing with the data",
    "start": "1692000",
    "end": "1698799"
  },
  {
    "text": "flow analysis part of the of the compiler so what we actually translate a syntax tree like uh the one above to a a",
    "start": "1698799",
    "end": "1705799"
  },
  {
    "text": "flattened out representation that just have essentially instructions on what the the uh the resulting code needs to",
    "start": "1705799",
    "end": "1713399"
  },
  {
    "text": "do uh just lined out in in a sequence so we have a constant two constant three",
    "start": "1713399",
    "end": "1718559"
  },
  {
    "text": "and then a call that adds these two things together so this is a sort of a kind of a high level uh intermediate",
    "start": "1718559",
    "end": "1726000"
  },
  {
    "text": "representation that we use and the nice thing is that it allows us for certain optimizations that I'll I'll cover later",
    "start": "1726000",
    "end": "1731200"
  },
  {
    "text": "once we build this thing we run through a code generator and we end up with a a syntax tree that represents the",
    "start": "1731200",
    "end": "1736600"
  },
  {
    "text": "JavaScript code instead that and then be pretty printed and and emitted and that's what you",
    "start": "1736600",
    "end": "1742480"
  },
  {
    "text": "see so the um the intermediate representation that we have for for the SSA form is a is a",
    "start": "1742600",
    "end": "1749760"
  },
  {
    "text": "it's a graph of basic blocks essentially if you take the code on the on the left it has uh an if with an an else in there",
    "start": "1749760",
    "end": "1757320"
  },
  {
    "text": "so it has two different branches uh that are possible and it has some some some merging it actually compiles to",
    "start": "1757320",
    "end": "1764200"
  },
  {
    "text": "something that looks more or less like what I have on the right there it has a four basic blocks there's the the entry",
    "start": "1764200",
    "end": "1769760"
  },
  {
    "text": "one that everything goes through and at some point inside that basic block there's a there's a a split either you",
    "start": "1769760",
    "end": "1777640"
  },
  {
    "text": "go to the left or you go to the right depending on the value of of X and Y so the basic block on the left will",
    "start": "1777640",
    "end": "1784640"
  },
  {
    "text": "will call Print of X and the basic block on the on the right will call Print of Y",
    "start": "1784640",
    "end": "1790200"
  },
  {
    "text": "um and then they will uh they will join uh forces again at the at the return side and we'll end up returning either X",
    "start": "1790200",
    "end": "1797279"
  },
  {
    "text": "or Y depending depending on if we executed B1 or B2 so the trick with",
    "start": "1797279",
    "end": "1802919"
  },
  {
    "text": "static single assignment form is that you end up having these uh call them F nodes in the graph they are nodes that",
    "start": "1802919",
    "end": "1809600"
  },
  {
    "text": "are sort of explicitly uh merging two possible values from two different uh",
    "start": "1809600",
    "end": "1814919"
  },
  {
    "text": "points in the code the static single assignment property that every is that every single value produced in this",
    "start": "1814919",
    "end": "1820760"
  },
  {
    "text": "thing is only produced in one place so so for instance when you um when you go",
    "start": "1820760",
    "end": "1826399"
  },
  {
    "text": "to B3 we have to figure out if the return value that we need to produce is",
    "start": "1826399",
    "end": "1831559"
  },
  {
    "text": "from uh t0 or T1 um so this is a classic",
    "start": "1831559",
    "end": "1838399"
  },
  {
    "text": "uh optimization uh form and it allows us to do optimizations on it um and of",
    "start": "1838399",
    "end": "1843640"
  },
  {
    "text": "course the tricky part is here is finding a nice way of going from this rather abstract form uh back into",
    "start": "1843640",
    "end": "1849640"
  },
  {
    "text": "JavaScript that looks reasonable when we optimize it's often",
    "start": "1849640",
    "end": "1855320"
  },
  {
    "start": "1853000",
    "end": "2013000"
  },
  {
    "text": "very important for us to have a notion of of Domin tree where a dominated tree is really um it's a it's a tree of the",
    "start": "1855320",
    "end": "1863600"
  },
  {
    "text": "basic blocks that you have in the in the graph where you know something about um which blocks are always guaranteed to be",
    "start": "1863600",
    "end": "1869559"
  },
  {
    "text": "executed before other blocks so in this case you are not guaranteed that B1 is executed before B3 you're not guaranteed",
    "start": "1869559",
    "end": "1875679"
  },
  {
    "text": "that B2 is executed before B3 but you know for all the blocks up there that are not B b0 that b 0 will have been",
    "start": "1875679",
    "end": "1883519"
  },
  {
    "text": "executed and run to completion before you start running B1 B2 or B3",
    "start": "1883519",
    "end": "1888880"
  },
  {
    "text": "this actually allows you to start propagating information that you find in b0 to the nodes in B1 B2 and B3 H so we",
    "start": "1888880",
    "end": "1896039"
  },
  {
    "text": "use a lot of uh dominant Tree traversals in in the optimizing phase of the",
    "start": "1896039",
    "end": "1901519"
  },
  {
    "text": "compiler so the kind of optimization that we do um is is is listed here like",
    "start": "1901519",
    "end": "1906639"
  },
  {
    "text": "we do a lot of type propagation so we will we'll know that in in U um that we",
    "start": "1906639",
    "end": "1913080"
  },
  {
    "text": "can generate much better code if we know something about the types of the uints involved so we propagate types through",
    "start": "1913080",
    "end": "1919000"
  },
  {
    "text": "this uh this um this SSA form and uh that gives us a lot of information that helps us optimize we also do a lot of",
    "start": "1919000",
    "end": "1926039"
  },
  {
    "text": "function inlining uh when we know enough about the methods that we we are calling we can actually inline the bodies of",
    "start": "1926039",
    "end": "1931279"
  },
  {
    "text": "them at the at the call site which makes certain things much faster another optimization we do is global value",
    "start": "1931279",
    "end": "1937559"
  },
  {
    "text": "numbering which I'll cover in more detail um but I already showed you a a loop inv varant code motion phase that",
    "start": "1937559",
    "end": "1942960"
  },
  {
    "text": "move this length accessor from the um from the uh from the list axis outside",
    "start": "1942960",
    "end": "1949000"
  },
  {
    "text": "the loop so these are all classic optimizations it's not something we've invented for for Dart tojs uh but we've",
    "start": "1949000",
    "end": "1955919"
  },
  {
    "text": "uh we've just made sure that the compiler has enough structure to support these kind of",
    "start": "1955919",
    "end": "1961399"
  },
  {
    "text": "optimizations so I want to give you a feel for what kind of compilation tricks we uh we we play here so I want to spend",
    "start": "1961399",
    "end": "1968039"
  },
  {
    "text": "some time on on one of the optimizations global value numbering so Global value numbering is a way of of essentially um",
    "start": "1968039",
    "end": "1976480"
  },
  {
    "text": "replacing instructions with other instructions when we know that they're going to do the same thing so getting",
    "start": "1976480",
    "end": "1981519"
  },
  {
    "text": "rid of of common sub Expressions is is another way of of formulating it so for",
    "start": "1981519",
    "end": "1987360"
  },
  {
    "text": "Global value numbering we say that two instructions are the same if they perform the same operation on the same inputs",
    "start": "1987360",
    "end": "1993600"
  },
  {
    "text": "so clearly sometimes the um executing an",
    "start": "1993600",
    "end": "1998799"
  },
  {
    "text": "instruction can have side effects that may affect other instructions but in general if you already computed a value",
    "start": "1998799",
    "end": "2006399"
  },
  {
    "text": "and you haven't been affected by any side effects going forward you don't have to recompute that value that's",
    "start": "2006399",
    "end": "2012080"
  },
  {
    "text": "essentially Global value numbering so here's a simple example of that here's a a small Dart method called",
    "start": "2012080",
    "end": "2019600"
  },
  {
    "start": "2013000",
    "end": "2129000"
  },
  {
    "text": "W that produces the result of adding one to X um and summing that with adding one",
    "start": "2019600",
    "end": "2025480"
  },
  {
    "text": "to X there's some um refactoring that should be should have been done at that",
    "start": "2025480",
    "end": "2030639"
  },
  {
    "text": "code level already then um but if you haven't done that you'll get you get an SSA form that looks something like this",
    "start": "2030639",
    "end": "2036799"
  },
  {
    "text": "there are no branches here it's very simple you have t0 which is the X parameter you have uh T1 which is uh a",
    "start": "2036799",
    "end": "2044919"
  },
  {
    "text": "constant one and then you you add them together with a call uh that adds T1 and t uh t0 and T1 prod the value and then",
    "start": "2044919",
    "end": "2052520"
  },
  {
    "text": "you more or less do the same thing afterwards as you can see see here um we have different uh calls to plus we",
    "start": "2052520",
    "end": "2060800"
  },
  {
    "text": "have three different calls to plus and it would be nice to cut that down a bit so Global value numbering will",
    "start": "2060800",
    "end": "2066240"
  },
  {
    "text": "actually run through this code and figure out out that the the constant one at introduced at T3 is actually",
    "start": "2066240",
    "end": "2071878"
  },
  {
    "text": "something we've seen before so we can get rid of that and replace that one so",
    "start": "2071879",
    "end": "2077878"
  },
  {
    "text": "at this point my point was that the T3 one we can get rid of and we can replace",
    "start": "2077879",
    "end": "2084079"
  },
  {
    "text": "um we can replace the use of T3 with a T1 um in in the in the call to plus",
    "start": "2084079",
    "end": "2089919"
  },
  {
    "text": "there so that means that the T3 goes away completely that was the point so",
    "start": "2089919",
    "end": "2095440"
  },
  {
    "text": "that allows us actually to keep pushing on this and reuse the fact that T4 and T2 are now the same they do the same",
    "start": "2095440",
    "end": "2101640"
  },
  {
    "text": "operation on the same input so you can replace uh one with the other and we end up having a a simpler graph that looks",
    "start": "2101640",
    "end": "2107560"
  },
  {
    "text": "like this uh where you're doing less computations and uh at the end we can generate code that looks something like",
    "start": "2107560",
    "end": "2113920"
  },
  {
    "text": "this instead this is very simple stuff uh it just shows you how you run through the graph run through the code uh",
    "start": "2113920",
    "end": "2121119"
  },
  {
    "text": "realize that certain things are the same H they are equal and you just get rid of the Redundant version of it",
    "start": "2121119",
    "end": "2128880"
  },
  {
    "text": "so the uh the algorithm used to actually implement this thing is is uh is pretty",
    "start": "2128880",
    "end": "2134079"
  },
  {
    "start": "2129000",
    "end": "2271000"
  },
  {
    "text": "simple at the high level uh you just walk the Dominator tree and you keep um a set of live values values that you've",
    "start": "2134079",
    "end": "2141160"
  },
  {
    "text": "already computed um and if you find an instruction and you already have a live",
    "start": "2141160",
    "end": "2146200"
  },
  {
    "text": "value in your Set uh you just pick that live value instead and replace the current instruction with that live one",
    "start": "2146200",
    "end": "2151880"
  },
  {
    "text": "instead um and of course you you register these instructions in the set as you go and the the biggest thing is",
    "start": "2151880",
    "end": "2159800"
  },
  {
    "text": "that you need to make sure that if you see something that has a side effect that could affect something in this set of of values you need to remove that",
    "start": "2159800",
    "end": "2166200"
  },
  {
    "text": "from the from the set so it's really just a walk through the the Dominator tree where you keep track of which",
    "start": "2166200",
    "end": "2172400"
  },
  {
    "text": "values are already computed and can be reused so the control flow graph",
    "start": "2172400",
    "end": "2179920"
  },
  {
    "text": "associated with uh the Dominator tree like this uh is still necessary when you do these operations because when you",
    "start": "2179920",
    "end": "2185480"
  },
  {
    "text": "walk the Dominator tree uh you may have to kill um you may have to get rid of",
    "start": "2185480",
    "end": "2191480"
  },
  {
    "text": "live values you computed for one branch based information in uh in the control for graph so the example here is that if",
    "start": "2191480",
    "end": "2198160"
  },
  {
    "text": "you get to uh the the B2 um basic block",
    "start": "2198160",
    "end": "2203200"
  },
  {
    "text": "uh you uh you actually have to to let that perhaps affect um the live value",
    "start": "2203200",
    "end": "2210200"
  },
  {
    "text": "set for for the analysis of B3 because uh B3 can be reached through B2 in the",
    "start": "2210200",
    "end": "2216079"
  },
  {
    "text": "control flow so it's kind kind of complicated but the net result is that we generate smaller code and more",
    "start": "2216079",
    "end": "2221280"
  },
  {
    "text": "efficient code one of the biggest things that we still have problems with is that we have",
    "start": "2221280",
    "end": "2227400"
  },
  {
    "text": "we have a lack of knowledge in the in the generated output um so even when we propagated tons of types in the system U",
    "start": "2227400",
    "end": "2234880"
  },
  {
    "text": "we still have this problem that the code that we can generate we when we have no type information is is a lot worse than",
    "start": "2234880",
    "end": "2241480"
  },
  {
    "text": "the code that we can generate when we have it so sometimes we we we feel like we can actually make a pretty good guess",
    "start": "2241480",
    "end": "2247680"
  },
  {
    "text": "like if you're using something like a list maybe we should just treat it as a list if you're using something like a",
    "start": "2247680",
    "end": "2253760"
  },
  {
    "text": "number if you're adding them together for instance maybe we could just treat them as numbers the only problem is that",
    "start": "2253760",
    "end": "2259760"
  },
  {
    "text": "we could be wrong so we try to guess based on inputs and",
    "start": "2259760",
    "end": "2265079"
  },
  {
    "text": "uh and and how how things are used if they are for instance numbers uh but",
    "start": "2265079",
    "end": "2270520"
  },
  {
    "text": "when we're doing what we call speculative optimizations we have to be aware that we're just guessing and we're",
    "start": "2270520",
    "end": "2276240"
  },
  {
    "start": "2271000",
    "end": "2520000"
  },
  {
    "text": "not quite sure if we're right so let me show you how that looks if you have code like this that",
    "start": "2276240",
    "end": "2281920"
  },
  {
    "text": "runs through an array uh uses the X length property adds up everything in that um it would be really nice if we",
    "start": "2281920",
    "end": "2289640"
  },
  {
    "text": "could optimize the axis of the array elements of of X and and make use of uh",
    "start": "2289640",
    "end": "2295560"
  },
  {
    "text": "the fast Primitives for that the problem is we don't know if x is an array it could be a string it could be something",
    "start": "2295560",
    "end": "2302760"
  },
  {
    "text": "weird we just don't know what it is and but the compiler we we we have still actually allows is to speculate and say",
    "start": "2302760",
    "end": "2309520"
  },
  {
    "text": "it would be fantastic if x was a javascri array at this point so why don't we just try to compile it as if it",
    "start": "2309520",
    "end": "2314599"
  },
  {
    "text": "was so we end up generating code like this the first thing that we do is we",
    "start": "2314599",
    "end": "2319720"
  },
  {
    "text": "check if if x is a JavaScript array if it's not we deal with that but if it is",
    "start": "2319720",
    "end": "2325319"
  },
  {
    "text": "a JavaScript array which is the case from the first line down essentially we can just go ahead and do all the",
    "start": "2325319",
    "end": "2331200"
  },
  {
    "text": "operations on that JavaScript array knowing that it is a JavaScript array and we can access the length and we can",
    "start": "2331200",
    "end": "2337000"
  },
  {
    "text": "access the the array elements in a really fast way we still have to check that the things",
    "start": "2337000",
    "end": "2342040"
  },
  {
    "text": "we read from it is are numbers and we have to check that we're within bounds but it's still much better than having to call arbitrary Methods at this point",
    "start": "2342040",
    "end": "2349880"
  },
  {
    "text": "the problem is this this first line that checks if if uh if x is a ja JavaScript",
    "start": "2349880",
    "end": "2355000"
  },
  {
    "text": "array it would be kind of neat if we could just throw an exception there and say it looked like you were using this",
    "start": "2355000",
    "end": "2360240"
  },
  {
    "text": "as a JavaScript array and it really isn't so maybe this is a bug in your code the problem is that well actually",
    "start": "2360240",
    "end": "2366880"
  },
  {
    "text": "not a problem it's a feature the nice thing is that people can write their Dart code and have objects that behave",
    "start": "2366880",
    "end": "2373079"
  },
  {
    "text": "just like the built-in lists um and that needs to work too so we have to generate a version of this sum method that works",
    "start": "2373079",
    "end": "2381359"
  },
  {
    "text": "without the assumption that X is a JavaScript array so what we generate is actually this a separate method called the",
    "start": "2381359",
    "end": "2388079"
  },
  {
    "text": "bailout version which has some some state that we use to actually enter the method in different places if that's",
    "start": "2388079",
    "end": "2393520"
  },
  {
    "text": "necessary and it has uh the the environment live variables that we need to transfer from one to the other in",
    "start": "2393520",
    "end": "2400000"
  },
  {
    "text": "this case it's just X and here you have the slowc case version of the code which is what we would have been forced to",
    "start": "2400000",
    "end": "2405280"
  },
  {
    "text": "generate uh if we didn't uh if if we didn't have the specul speculative optimizations in play so what you see",
    "start": "2405280",
    "end": "2411839"
  },
  {
    "text": "here is is many more method calls to methods that try to compare if things are less than you try to get the lengths",
    "start": "2411839",
    "end": "2418640"
  },
  {
    "text": "by calling an accessor you try to index into something by calling the index operator um well not the index operator",
    "start": "2418640",
    "end": "2425880"
  },
  {
    "text": "the index method um so this is just much slower so we we much prefer running in the in the optimized version of it so we",
    "start": "2425880",
    "end": "2433599"
  },
  {
    "text": "have to put this in to have proper Dart semantics but we believe that uh that we will never use this method so we really",
    "start": "2433599",
    "end": "2440760"
  },
  {
    "text": "have to try to cut down the uh the speculations in the system so otherwise",
    "start": "2440760",
    "end": "2446000"
  },
  {
    "text": "we would generate too much code that we would never need and it's really hard to strike the right balance between",
    "start": "2446000",
    "end": "2451400"
  },
  {
    "text": "optimizing too much and too little we we don't have enough information at this point it's a sort of a static analysis",
    "start": "2451400",
    "end": "2457800"
  },
  {
    "text": "say that we we think this might be used in one way or the other so right now we've cut it down to a a point where",
    "start": "2457800",
    "end": "2463720"
  },
  {
    "text": "we're only speculating about um about types for values that are used from within Loops where we can actually move",
    "start": "2463720",
    "end": "2470920"
  },
  {
    "text": "certain checks outside the loop as a consequence so if the specula optimization is we can show that it's",
    "start": "2470920",
    "end": "2477240"
  },
  {
    "text": "it's good enough to actually move things out of Loops we'll do it otherwise we'll try to not do it we have some ideas on",
    "start": "2477240",
    "end": "2484160"
  },
  {
    "text": "how to actually improve that a bit so what if we actually just went ahead and generated speculative optimizations",
    "start": "2484160",
    "end": "2491680"
  },
  {
    "text": "about all the types that we would want to optimize based on and then took that",
    "start": "2491680",
    "end": "2497160"
  },
  {
    "text": "resulting too big code though but but just I put that out there and and ran through it and profiled it um that would",
    "start": "2497160",
    "end": "2504280"
  },
  {
    "text": "actually give us some insight into how the program is being used and um it would allow us to actually look at",
    "start": "2504280",
    "end": "2511000"
  },
  {
    "text": "which of these bailout methods are actually um uh being called it will also allow us to look at which of the optimum",
    "start": "2511000",
    "end": "2517480"
  },
  {
    "text": "methods that are being being called and which ones are hot so uh one neat way of doing this would actually be to to",
    "start": "2517480",
    "end": "2524160"
  },
  {
    "start": "2520000",
    "end": "2554000"
  },
  {
    "text": "speculatively optimize everything and then recompile with less speculation",
    "start": "2524160",
    "end": "2529200"
  },
  {
    "text": "where you only allow speculative expectations in methods that were actually uh they're actually hot um in",
    "start": "2529200",
    "end": "2536079"
  },
  {
    "text": "their optimized version so it's something we haven't implemented yet uh because the tool chain around having a",
    "start": "2536079",
    "end": "2541480"
  },
  {
    "text": "profile guided optimization step is kind of complicated for our users so uh but it it seems promising in in in the way",
    "start": "2541480",
    "end": "2548119"
  },
  {
    "text": "of of of getting uh more information about what the program actually does at run",
    "start": "2548119",
    "end": "2553599"
  },
  {
    "text": "time so one thing I want to say about dealing with control flow in in the code uh we we've um we would generate this",
    "start": "2553599",
    "end": "2561040"
  },
  {
    "start": "2554000",
    "end": "2678000"
  },
  {
    "text": "SSA form and it's kind of hard for us to um um to take that form and compile it",
    "start": "2561040",
    "end": "2566319"
  },
  {
    "text": "to to nice looking JavaScript the example I've shown you hopefully don't look too foreign um but it's actually",
    "start": "2566319",
    "end": "2573000"
  },
  {
    "text": "kind of hard to to translate a generic graph that has arbitrary jumps between basic blocks to something that looks",
    "start": "2573000",
    "end": "2579440"
  },
  {
    "text": "like JavaScript so what we've done is actually we've tried to keep the the code structure from Dart in the SSA form",
    "start": "2579440",
    "end": "2585559"
  },
  {
    "text": "we built not mess too much with it and just compile that to the the same uh",
    "start": "2585559",
    "end": "2591119"
  },
  {
    "text": "corresponding JavaScript controlflow statements uh it's not the the ideal",
    "start": "2591119",
    "end": "2596440"
  },
  {
    "text": "solution perhaps uh but it actually works pretty well and it's just there are certain optimizations on the control",
    "start": "2596440",
    "end": "2602440"
  },
  {
    "text": "flow that we cannot do that way but it it works fine for data flow so",
    "start": "2602440",
    "end": "2607920"
  },
  {
    "text": "just to give you a feel for what that looks like the kind of place where we have problems with this is is where we",
    "start": "2607920",
    "end": "2614440"
  },
  {
    "text": "have to introduce uh checks in uh places where",
    "start": "2614440",
    "end": "2620640"
  },
  {
    "text": "the JavaScript syntax only allows uh Expressions essentially so in this case you have uh an index uh check that you",
    "start": "2620640",
    "end": "2628480"
  },
  {
    "text": "want to inject in the condition of a for loop it's kind of hard to do uh in an",
    "start": "2628480",
    "end": "2634040"
  },
  {
    "text": "efficient way so what we end up compiling this two is something where we cannot compile the for Loop to a for",
    "start": "2634040",
    "end": "2639200"
  },
  {
    "text": "Loop we compile it to a while loop with some Brakes in there uh to try to escape that that boundary this is not as pretty",
    "start": "2639200",
    "end": "2646280"
  },
  {
    "text": "it it's it's bigger code it solves the problem in this case um but in general being able to compile a for Loop to a",
    "start": "2646280",
    "end": "2652720"
  },
  {
    "text": "for Loop and a while loop to a while loop is is is just nicer",
    "start": "2652720",
    "end": "2658520"
  },
  {
    "text": "so hopefully this gave you some insight into uh how the compiler uh is written",
    "start": "2658520",
    "end": "2664599"
  },
  {
    "text": "and what kind of optimizations it does um what we focused on mainly is in addition",
    "start": "2664599",
    "end": "2671119"
  },
  {
    "text": "to runtime performance and correctness it's it's really the the code side that has improved the most since our first",
    "start": "2671119",
    "end": "2676240"
  },
  {
    "text": "release um what we're seeing right now is that small examples U actually do",
    "start": "2676240",
    "end": "2681720"
  },
  {
    "start": "2678000",
    "end": "2755000"
  },
  {
    "text": "compile to small piece of of JavaScript output um so it's not the case anymore that you will get uh megabytes of of",
    "start": "2681720",
    "end": "2689480"
  },
  {
    "text": "JavaScript emitted for for a small hell World example um one thing that we sometimes do see though is that people",
    "start": "2689480",
    "end": "2695400"
  },
  {
    "text": "write an application that depends on a lot of uh libraries that like pulls in through Imports so if your application",
    "start": "2695400",
    "end": "2702680"
  },
  {
    "text": "translates to like sizable chunks of JavaScript it might be be because you're importing and using uh a lot of code uh",
    "start": "2702680",
    "end": "2709520"
  },
  {
    "text": "sort of transitively we still have more work to do in this area and we'll continue to push on this uh but it's",
    "start": "2709520",
    "end": "2715040"
  },
  {
    "text": "getting uh much better and it's kind of nice now uh one thing that we haven't implemented uh fully yet is support for",
    "start": "2715040",
    "end": "2721440"
  },
  {
    "text": "generating minified output which is very common in the JavaScript world where you get this slightly obus gated",
    "start": "2721440",
    "end": "2727480"
  },
  {
    "text": "um and minified version of your JavaScript output that's uh very well designed for Trans transmitting across",
    "start": "2727480",
    "end": "2734160"
  },
  {
    "text": "the the wire it essentially just a rewrite face that cuts down on the on the use identifiers in your code and",
    "start": "2734160",
    "end": "2740280"
  },
  {
    "text": "makes them as small and short as possible uh so you can already use that and experiment with it now through the",
    "start": "2740280",
    "end": "2747040"
  },
  {
    "text": "the Minify option but you should expect it to be get be getting a lot better over the next weeks and",
    "start": "2747040",
    "end": "2753440"
  },
  {
    "text": "months so I don't know if this is actually something you can see at the at the back here this is a this is a slide",
    "start": "2753440",
    "end": "2760800"
  },
  {
    "start": "2755000",
    "end": "2870000"
  },
  {
    "text": "that shows you our internal uh performance tracking uh site um so this",
    "start": "2760800",
    "end": "2766040"
  },
  {
    "text": "is a subset of The Benchmark that we run I just wanted to show you that we we do care about performance and we track them",
    "start": "2766040",
    "end": "2771559"
  },
  {
    "text": "track it every day if you really want to make a system fast you need to measure performance in every check-in essentially and and we do that we we",
    "start": "2771559",
    "end": "2778960"
  },
  {
    "text": "measure ourselves against uh V8 because we have a lot of familiarity with the code that generates um so what you see",
    "start": "2778960",
    "end": "2785559"
  },
  {
    "text": "here is actually uh on the on the very right you see for all the benchmarks that I've listed here you see how fast",
    "start": "2785559",
    "end": "2791440"
  },
  {
    "text": "we are compared to V8 so the the the last column the very right column is",
    "start": "2791440",
    "end": "2798440"
  },
  {
    "text": "start tojs so that is how fast are we uh or are how fast is the the generated",
    "start": "2798440",
    "end": "2804640"
  },
  {
    "text": "JavaScript code that we emit compared to just handwritten JavaScript code uh we",
    "start": "2804640",
    "end": "2809760"
  },
  {
    "text": "still have some work to do we at around 78% uh of the performance of of pure",
    "start": "2809760",
    "end": "2815920"
  },
  {
    "text": "JavaScript code but you have to pay uh or keep in mind that that this this",
    "start": "2815920",
    "end": "2822000"
  },
  {
    "text": "actually uh includes all the extra checks that we put in there that might help you catch your uh your box before",
    "start": "2822000",
    "end": "2828599"
  },
  {
    "text": "they go to production so we are generating code that is not as efficient as as native handwritten JavaScript in",
    "start": "2828599",
    "end": "2835400"
  },
  {
    "text": "in in all cases yet but we're improving a lot you can also see that the that the native Dart VM which is the second last",
    "start": "2835400",
    "end": "2842200"
  },
  {
    "text": "column here is actually doing better than V8 already um it's something we we uh will keep on pushing on uh but it's",
    "start": "2842200",
    "end": "2848480"
  },
  {
    "text": "nice to see that because of the semantics of Dart it's a simpler uh language to implement efficiently uh",
    "start": "2848480",
    "end": "2854880"
  },
  {
    "text": "we're already now even before the first real um Dart release we're already",
    "start": "2854880",
    "end": "2859920"
  },
  {
    "text": "20% faster than than V8 and we certainly expect to uh to uh improve that number going forward so expect more on the",
    "start": "2859920",
    "end": "2867040"
  },
  {
    "text": "performance front always so conclusions are very simple you should write your",
    "start": "2867040",
    "end": "2872680"
  },
  {
    "start": "2870000",
    "end": "3478000"
  },
  {
    "text": "web apps and dart and you should uh compile them to JavaScript if you need a a a compatibility story with with the",
    "start": "2872680",
    "end": "2879520"
  },
  {
    "text": "modern browsers um you can be more productive if you have a good tool chain that goes from like editing and a good",
    "start": "2879520",
    "end": "2886240"
  },
  {
    "text": "compiler to generate these things for you and you can let us worry about some of the low L optimization so you don't",
    "start": "2886240",
    "end": "2891480"
  },
  {
    "text": "have to argue with your co-workers about uh all these uh low-level tricks and uh",
    "start": "2891480",
    "end": "2896680"
  },
  {
    "text": "and things you need to uh to worry about in JavaScript so last thing is that we really want to",
    "start": "2896680",
    "end": "2902839"
  },
  {
    "text": "to keep improving the web platform we really believe that the web is in in need for better support for programming",
    "start": "2902839",
    "end": "2908960"
  },
  {
    "text": "in the large um in particular on mobile we see that application startup for big",
    "start": "2908960",
    "end": "2914319"
  },
  {
    "text": "web apps is still a problem it's something we certainly want to solve and we want to give you more predictable and",
    "start": "2914319",
    "end": "2919720"
  },
  {
    "text": "better runtime performance and as you already seen uh we're getting very close on the DJs front with Native JavaScript",
    "start": "2919720",
    "end": "2926000"
  },
  {
    "text": "performance and uh on the VM front it's it's already better so that was all I",
    "start": "2926000",
    "end": "2931400"
  },
  {
    "text": "had so uh I'm very very open to any kind of questions you guys may have about the technology or or dark okay so the first",
    "start": "2931400",
    "end": "2937760"
  },
  {
    "text": "question is about debugging and using JavaScript libraries so um debugging first so our our debugging story is",
    "start": "2937760",
    "end": "2944160"
  },
  {
    "text": "really that when you're running with the dart VM it's fairly simple you have a debug API for the VM and you can use",
    "start": "2944160",
    "end": "2950680"
  },
  {
    "text": "that uh as if as if you were running um any other native VM solution for the",
    "start": "2950680",
    "end": "2956680"
  },
  {
    "text": "generated JavaScript code what we produce is a source map on the side that tells um the the developer tools that",
    "start": "2956680",
    "end": "2963960"
  },
  {
    "text": "you're hooking it up to where um essentially it gives you like a mapping",
    "start": "2963960",
    "end": "2970119"
  },
  {
    "text": "from the generated output back into your source code so you can do like single stepping through your source code uh",
    "start": "2970119",
    "end": "2976559"
  },
  {
    "text": "even though you're running the JavaScript code so we we're getting a lot of help from from the fact that others have already generated this",
    "start": "2976559",
    "end": "2983440"
  },
  {
    "text": "Source mapping format so we we use that the uh the second part of the question was around JavaScript integration and",
    "start": "2983440",
    "end": "2989720"
  },
  {
    "text": "and interoperability with existing JavaScript libraries it's a really hard problem um and it's something that we'",
    "start": "2989720",
    "end": "2996240"
  },
  {
    "text": "we've talked a lot about uh different approaches too um and the biggest problem we have is really that we want",
    "start": "2996240",
    "end": "3001839"
  },
  {
    "text": "something that runs well on the native Dart VM and on the translated version that translates to JavaScript so we want",
    "start": "3001839",
    "end": "3008960"
  },
  {
    "text": "a solution where you can take a piece of JavaScript code and interact with it uh in the same way no matter if you end up",
    "start": "3008960",
    "end": "3014760"
  },
  {
    "text": "running on the dart VM or if you're in a translated uh version so what we come up with so far is a sort of limited way of",
    "start": "3014760",
    "end": "3022440"
  },
  {
    "text": "synchronously calling U essentially external functions external Javas functions and then doing some",
    "start": "3022440",
    "end": "3028280"
  },
  {
    "text": "serialization across the boundary uh between these uh the JavaScript world and the ad D World so it does mean that",
    "start": "3028280",
    "end": "3035559"
  },
  {
    "text": "um essentially doing this integration is a bit more conversome than just calling Javas functions getting stuff back but",
    "start": "3035559",
    "end": "3041680"
  },
  {
    "text": "we have to do some checking on the on the boundary to make sure that the two worlds are in a consistent format and you don't get a lot of uh pointers to",
    "start": "3041680",
    "end": "3049160"
  },
  {
    "text": "Raw native Javas objects embedded in all your data objects so it's it's doable",
    "start": "3049160",
    "end": "3054799"
  },
  {
    "text": "it's um it's getting easier easier uh but it's still something where it takes",
    "start": "3054799",
    "end": "3060160"
  },
  {
    "text": "some amount of work to integrate with a an external Library one thing that I I always like to ask is what kind of",
    "start": "3060160",
    "end": "3065880"
  },
  {
    "text": "libraries would you like to integrate with because usually there's like a bunch of very very uh important",
    "start": "3065880",
    "end": "3073640"
  },
  {
    "text": "JavaScript libraries that people really would like to see like jQuery and mobile jQuery and whatnot uh but the list is",
    "start": "3073640",
    "end": "3079680"
  },
  {
    "text": "very short so um if you have something that you would like like to see integrated we would like to know about",
    "start": "3079680",
    "end": "3084799"
  },
  {
    "text": "it um so the question is uh given that we as Google control V8 uh have we um",
    "start": "3084799",
    "end": "3092440"
  },
  {
    "text": "have we given into the temptation of adding stuff to V8 that would allow us to generate better JavaScript uh and F",
    "start": "3092440",
    "end": "3097720"
  },
  {
    "text": "and run it faster on V8 uh yeah so far we we haven't added anything to to V8 as",
    "start": "3097720",
    "end": "3102799"
  },
  {
    "text": "a result of of our dart stuff except for some missing optimizations that we found for instance V8 was not particularly",
    "start": "3102799",
    "end": "3109480"
  },
  {
    "text": "good at dealing with unsigned 32-bit values um it only dealt with 31 bits and",
    "start": "3109480",
    "end": "3115559"
  },
  {
    "text": "we had some benchmarks really really mattered so there is some feedback coming from the darkart team to the V8",
    "start": "3115559",
    "end": "3120839"
  },
  {
    "text": "team on particular things that are not performing as well in in V8 as on uh",
    "start": "3120839",
    "end": "3125920"
  },
  {
    "text": "maybe other Javas engines so there optimization opportunities but we really",
    "start": "3125920",
    "end": "3131040"
  },
  {
    "text": "only want to put stuff in V8 that generally makes sense for JavaScript programs so our our style here is really",
    "start": "3131040",
    "end": "3137240"
  },
  {
    "text": "to try to generate JavaScript code that runs well on all the modern browsers and",
    "start": "3137240",
    "end": "3142760"
  },
  {
    "text": "it doesn't really buy us much to make that run 10% faster on V8 alone um so uh so far it hasn't been uh",
    "start": "3142760",
    "end": "3150559"
  },
  {
    "text": "something that that has made sense to us uh I understand it's a I mean you could be tempted to do it but we wouldn't win",
    "start": "3150559",
    "end": "3155680"
  },
  {
    "text": "anything by doing it essentially um and to be honest the uh the places where we",
    "start": "3155680",
    "end": "3160880"
  },
  {
    "text": "have V8 is are also are also the places where we are more likely to have the dart VM so I don't think it actually is",
    "start": "3160880",
    "end": "3167359"
  },
  {
    "text": "a a terribly good idea um except for finding bottleneck and existing performance things that can be fixed um",
    "start": "3167359",
    "end": "3174480"
  },
  {
    "text": "so the question is did we consider adding a flat for enforcing stricter typing to be able",
    "start": "3174480",
    "end": "3180160"
  },
  {
    "text": "to generate better code um so we actually haven't considered that at all because we really feel like uh Dart is a",
    "start": "3180160",
    "end": "3185799"
  },
  {
    "text": "dynamic platform and it it it we really want it to be used as a dynamic platform so this this notion that you don't have",
    "start": "3185799",
    "end": "3192160"
  },
  {
    "text": "to write types everywhere to get a correct and efficient program out is very important to us so no that hasn't",
    "start": "3192160",
    "end": "3197559"
  },
  {
    "text": "really come up as something that we wanted to do and some people have asked us if we wanted to maybe uh trust type",
    "start": "3197559",
    "end": "3203559"
  },
  {
    "text": "annotations when they're there uh to generate code just based and the type annotation just assume that they're correct so far we haven't done it um",
    "start": "3203559",
    "end": "3211000"
  },
  {
    "text": "clearly in some cases that would allow programmers to express to us that certain things are probably likely to be",
    "start": "3211000",
    "end": "3216599"
  },
  {
    "text": "numbers or or whatnot but we haven't really taken that that step uh mostly because as it is right now we kind of",
    "start": "3216599",
    "end": "3222400"
  },
  {
    "text": "like to have that extra pressure put on us to deliver high performance without uh changing the meaning of the static",
    "start": "3222400",
    "end": "3228680"
  },
  {
    "text": "type annotations that people have have put in we really want to keep that as a as a documentation of of intent from the",
    "start": "3228680",
    "end": "3234319"
  },
  {
    "text": "program and not some lowlevel optimization trick so the question is have any other",
    "start": "3234319",
    "end": "3241160"
  },
  {
    "text": "browser vendors shown any interest in implementing a dart VM um I actually don't know if anyone has uh shown I",
    "start": "3241160",
    "end": "3247880"
  },
  {
    "text": "don't think we've seen any like public support for the dart VM across other browsers uh I think it's still very",
    "start": "3247880",
    "end": "3253559"
  },
  {
    "text": "early um the dart VM is is maturing as you can see the performance is is getting there um there's still a lot of",
    "start": "3253559",
    "end": "3260240"
  },
  {
    "text": "head room we can do much better I think it's on our table to try to to demonstrate how how uh how much that",
    "start": "3260240",
    "end": "3266400"
  },
  {
    "text": "affects what you can build on the web when it comes to application startup and uh Peak Performance uh and once we have",
    "start": "3266400",
    "end": "3272400"
  },
  {
    "text": "that I think the it's it's very uh for for us it's very hard to control what",
    "start": "3272400",
    "end": "3277760"
  },
  {
    "text": "will happen from that point forward H but we of course we hope that people will find that technology to be so compelling and interesting that they",
    "start": "3277760",
    "end": "3283400"
  },
  {
    "text": "want to uh use it to so the question is if when we switch isolates you're just",
    "start": "3283400",
    "end": "3289040"
  },
  {
    "text": "assigning to this this uh dollar variable um and if there's any code sharing behind the scenes between different isets so right now there is",
    "start": "3289040",
    "end": "3296559"
  },
  {
    "text": "actually um two different versions of of creating an iset either you're running",
    "start": "3296559",
    "end": "3302280"
  },
  {
    "text": "uh you're you're spawning another icelet based on your own source code in which case we do the code sharing um but",
    "start": "3302280",
    "end": "3308240"
  },
  {
    "text": "you're it's also possible to spawn an icelet from a URI where you don't know what you're spawning in which case we we",
    "start": "3308240",
    "end": "3313359"
  },
  {
    "text": "don't actually try to do any code sharing so it's actually up to the programmer to request one or the other",
    "start": "3313359",
    "end": "3319400"
  },
  {
    "text": "um and clearly if you're spawning based on your own source code it makes perfect sense to do more code sharing and there",
    "start": "3319400",
    "end": "3325520"
  },
  {
    "text": "are no weird versioning conflicts that can arise because you know you're guaranteed to be running the same source code so that's a nice place to be and",
    "start": "3325520",
    "end": "3332680"
  },
  {
    "text": "that's the place where people usually end up being when they just want to use isolates for covering up their application in in more bits and pieces",
    "start": "3332680",
    "end": "3339880"
  },
  {
    "text": "uh but also either getting some of the security benefits or uh just the concurrency B benefits of having so",
    "start": "3339880",
    "end": "3347200"
  },
  {
    "text": "actually what we do is we have an isolated object which actually created through a JavaScript function that has",
    "start": "3347200",
    "end": "3352680"
  },
  {
    "text": "tons of properties so we just use the same Constructor for creating the next one so essentially it's a JavaScript",
    "start": "3352680",
    "end": "3358119"
  },
  {
    "text": "object that has um it looks more or less like you have a JavaScript class as well",
    "start": "3358119",
    "end": "3363839"
  },
  {
    "text": "just instan shate once for for every isolate so it's fairly lightweight that way um and the idea is that we want to",
    "start": "3363839",
    "end": "3370839"
  },
  {
    "text": "to allow people to either run them as web workers or not depending on what they really need sometimes if they have",
    "start": "3370839",
    "end": "3376119"
  },
  {
    "text": "a need for Dom access from multiple isets um the only thing you really gain",
    "start": "3376119",
    "end": "3381240"
  },
  {
    "text": "from from having multiple is is this carving up your application in multiple pieces and uh and you also gain the an",
    "start": "3381240",
    "end": "3389079"
  },
  {
    "text": "extra Global name space essentially so for all the static State you get a new copy of all that all the static",
    "start": "3389079",
    "end": "3395280"
  },
  {
    "text": "variables are just split that way which is good for some things I think we have time for one more",
    "start": "3395280",
    "end": "3401839"
  },
  {
    "text": "question but I think we're running out of time yeah one more question so the the question is do we",
    "start": "3401839",
    "end": "3407520"
  },
  {
    "text": "have libraries foring the the Dom apis and databases and and things like that so clearly these things are being built",
    "start": "3407520",
    "end": "3414680"
  },
  {
    "text": "uh as we speak on the server side there are many different database that you can access and we we have some interfaces for some of them built by",
    "start": "3414680",
    "end": "3420720"
  },
  {
    "text": "people in the dart community on the uh when embedded into the browser we have",
    "start": "3420720",
    "end": "3426000"
  },
  {
    "text": "the full range of of Dom and and HTML apis available to us and we do have access to them through the uh Dart Co",
    "start": "3426000",
    "end": "3432559"
  },
  {
    "text": "and HTML Library which is just a simple way for you to write code that accesses the Dom through Dart so yeah there's",
    "start": "3432559",
    "end": "3439640"
  },
  {
    "text": "full support for that so that goes for all the index DBS and all those things that are in the browser so we're not",
    "start": "3439640",
    "end": "3444760"
  },
  {
    "text": "trying to limit your ACC to the Dom based apis we just want want to give them a a new serer language to to write",
    "start": "3444760",
    "end": "3452000"
  },
  {
    "text": "in that and still be able to use the browser technology so we're running out of time thanks a lot for spending time",
    "start": "3452000",
    "end": "3457400"
  },
  {
    "text": "with me today and I hope to see more of you in here for the uh for the remaining talks and in the Javas track",
    "start": "3457400",
    "end": "3463370"
  },
  {
    "text": "[Applause]",
    "start": "3463370",
    "end": "3472590"
  }
]