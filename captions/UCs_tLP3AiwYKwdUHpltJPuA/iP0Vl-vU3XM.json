[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "welcome to the talk about unit testing best practices and horrible mistakes or as my American friends like",
    "start": "2120",
    "end": "9719"
  },
  {
    "text": "to say good practices and possible mistakes because they don't like to hurt",
    "start": "9719",
    "end": "15240"
  },
  {
    "text": "other people's feelings and I agree I agree most of the things we'll talk about are possible mistakes they're only",
    "start": "15240",
    "end": "20840"
  },
  {
    "text": "a single specific point of view but I'll try to explain as most as",
    "start": "20840",
    "end": "26359"
  },
  {
    "text": "possible why do I think these things are possible mistakes",
    "start": "26359",
    "end": "31840"
  },
  {
    "text": "a little bit about me um I I wrote a book in 2006 called The Art of unit",
    "start": "31840",
    "end": "37280"
  },
  {
    "text": "testing it's going to come out in the second edition and when I started that book I had zero kids but when I finished",
    "start": "37280",
    "end": "44800"
  },
  {
    "text": "that book I had two kids and by the time I finished the book it took three years I realized just how",
    "start": "44800",
    "end": "51000"
  },
  {
    "text": "wrong I was and how the things I wrote In the book are already wrong so I had to rewrite some of it but for the second",
    "start": "51000",
    "end": "58120"
  },
  {
    "text": "edition basically I'm going to I actually went to Goodreads and I I marked my book as three stars because I",
    "start": "58120",
    "end": "64960"
  },
  {
    "text": "think some of it is wrong so I hope the second edition will fix some of that um I'm actually in the process of",
    "start": "64960",
    "end": "71960"
  },
  {
    "text": "writing another book called Beautiful builds and uh I just have a book about notes to software team leader published",
    "start": "71960",
    "end": "78200"
  },
  {
    "text": "uh but uh most of all if you have any questions or things after this talk you can feel free to just ask me via Twitter",
    "start": "78200",
    "end": "84799"
  },
  {
    "text": "or just contact me in some way after the after the uh uh presentation",
    "start": "84799",
    "end": "90880"
  },
  {
    "start": "90000",
    "end": "330000"
  },
  {
    "text": "and I want to say that uh everything that you're going to hear are based on my actual",
    "start": "90880",
    "end": "97799"
  },
  {
    "text": "failures so I failed quite a bit I think Chad follower would have been proud and",
    "start": "97799",
    "end": "104920"
  },
  {
    "text": "a lot of those failers uh taught me so much that today in projects I can kind",
    "start": "104920",
    "end": "111320"
  },
  {
    "text": "of get the projects to work and have unit testing actually succe uh success uh succeed in our teest in our project",
    "start": "111320",
    "end": "119200"
  },
  {
    "text": "I'm quite nervous this is quite a big crowd it was a joke um now the first",
    "start": "119200",
    "end": "125240"
  },
  {
    "text": "mistake is that people believe that just by doing it unit testing will will make your life easier you hear it in everyone",
    "start": "125240",
    "end": "132360"
  },
  {
    "text": "who talks about unit testing unit testing is amazing unit testing will",
    "start": "132360",
    "end": "137519"
  },
  {
    "text": "make it easier to find bugs so imagine that when you have 4,000 unit tests in",
    "start": "137519",
    "end": "142760"
  },
  {
    "text": "your code it's easier to find bugs well that's absolutely wrong most of the time",
    "start": "142760",
    "end": "149000"
  },
  {
    "text": "what happens when I come to projects and do Consulting is that the tests",
    "start": "149000",
    "end": "154120"
  },
  {
    "text": "themselves have bugs the tests pass when they shouldn't be passing they fail when",
    "start": "154120",
    "end": "159920"
  },
  {
    "text": "they shouldn't be failing and so there is no trust in the tests so how do you",
    "start": "159920",
    "end": "165120"
  },
  {
    "text": "make sure that your tests don't have bugs do you write a test for your test how does the test for your test how",
    "start": "165120",
    "end": "172120"
  },
  {
    "text": "do you know that doesn't have bugs so writing a test for the test for a test doesn't work I can tell you that",
    "start": "172120",
    "end": "179239"
  },
  {
    "text": "now one way way to solve it would be test driven development in which we see the test fail and then we see it pass",
    "start": "179239",
    "end": "184680"
  },
  {
    "text": "without touching the test so we're actually testing the test this way but most projects it's actually not",
    "start": "184680",
    "end": "191599"
  },
  {
    "text": "easier to find bugs unless you pay close attention to what the hell is going on in the code and the",
    "start": "191599",
    "end": "196799"
  },
  {
    "text": "tests and we'll see how to fix that another thing that everyone says is",
    "start": "196799",
    "end": "202000"
  },
  {
    "text": "that it's easier to maintain your code when you have something like a th000",
    "start": "202000",
    "end": "207080"
  },
  {
    "text": "unit test 4,000 unit tests and again that's AB absolutely not",
    "start": "207080",
    "end": "212159"
  },
  {
    "text": "true because the test if they test a lot of internal implementation what you end",
    "start": "212159",
    "end": "218439"
  },
  {
    "text": "up with is that you refactor your code and then suddenly you have tests breaking even though they should",
    "start": "218439",
    "end": "224080"
  },
  {
    "text": "actually be passing if the code still works and so you have to go and start changing the tests and at some point you",
    "start": "224080",
    "end": "230439"
  },
  {
    "text": "start saying you know what this isn't worth my time and then you start removing tests or actually commenting them out or",
    "start": "230439",
    "end": "237720"
  },
  {
    "text": "putting ignore attributes on them so that's not necessarily true and I I",
    "start": "237720",
    "end": "243959"
  },
  {
    "text": "would say that most projects that fail with unit tests it's because of the maintainability",
    "start": "243959",
    "end": "249200"
  },
  {
    "text": "issues one of the first pro projects that I've had we had to delete some of the our tests after just a few months of",
    "start": "249200",
    "end": "257439"
  },
  {
    "text": "code it's easier to understand your code when you have a thousand or 4,000 tests",
    "start": "257519",
    "end": "264720"
  },
  {
    "text": "well I know that you know that that's not true for most of the tests that you've seen most people especially when",
    "start": "264720",
    "end": "270800"
  },
  {
    "text": "they start out with tests what they see and what they what they think is that the test code is not as important so",
    "start": "270800",
    "end": "277840"
  },
  {
    "text": "they just give out names like ah just test one or test ad or test",
    "start": "277840",
    "end": "283039"
  },
  {
    "text": "whatever and then the test code itself is just oh you know what just assert on on the thing and and be done with it and",
    "start": "283039",
    "end": "290520"
  },
  {
    "text": "then the tests end up just like you treated them which is they don't help in",
    "start": "290520",
    "end": "296280"
  },
  {
    "text": "terms of readability so we talk about readability issues today as well but only when these",
    "start": "296280",
    "end": "302840"
  },
  {
    "text": "three things are true it's actually easier to develop your software when you have unit tests and one and most of the",
    "start": "302840",
    "end": "309560"
  },
  {
    "text": "reasons that to do with why companies do not adopt unit testing into the organization is because they are failing",
    "start": "309560",
    "end": "316919"
  },
  {
    "text": "with one of those at least and then that affects the other two that creates a very big Chain",
    "start": "316919",
    "end": "325000"
  },
  {
    "text": "Reaction the second big mistake is that once you've started doing tests you do",
    "start": "325000",
    "end": "330880"
  },
  {
    "start": "330000",
    "end": "580000"
  },
  {
    "text": "you do not do any test reviews or code reviews so some companies do actually do code reviews but most developers that I",
    "start": "330880",
    "end": "338600"
  },
  {
    "text": "know do not do test reviews so they review the code but only some of it and",
    "start": "338600",
    "end": "344120"
  },
  {
    "text": "only at specific times but the point of a code review and a test review is that you teach and you learn about",
    "start": "344120",
    "end": "351520"
  },
  {
    "text": "practices so you might have one person who really knows how to write good unit tests in the team and that person is",
    "start": "351520",
    "end": "357880"
  },
  {
    "text": "just writing there he's just sitting there coding awesome tests but then everyone else around you is just create",
    "start": "357880",
    "end": "363720"
  },
  {
    "text": "a pile of manure around so when you come and see the test you see a good test and",
    "start": "363720",
    "end": "369120"
  },
  {
    "text": "then right below it a test that has no business being there and there is very little",
    "start": "369120",
    "end": "375919"
  },
  {
    "text": "communication about the quality of the tests so test review is one of the best",
    "start": "375919",
    "end": "381400"
  },
  {
    "text": "ways to actually Institute code reviews because if you think about it tests are really mini use cases of your code that",
    "start": "381400",
    "end": "388319"
  },
  {
    "text": "you can drill into and you can actually understand very very quickly whether the developer actually understood the",
    "start": "388319",
    "end": "393840"
  },
  {
    "text": "requirement or not sometimes just by looking at the name of the test you can",
    "start": "393840",
    "end": "399360"
  },
  {
    "text": "actually understand that the developer did not understand the requirement you don't even have to drill into the code",
    "start": "399360",
    "end": "405479"
  },
  {
    "text": "you don't have to read 50 lines to say Oh no you're doing it all wrong",
    "start": "405479",
    "end": "410520"
  },
  {
    "text": "sometimes if the name is good enough then you've saved all that time and when you do code reviews and",
    "start": "410520",
    "end": "417080"
  },
  {
    "text": "test reviews it has to be in person you cannot use a tool if you use if you",
    "start": "417080",
    "end": "424599"
  },
  {
    "text": "use GitHub to do reviews of the code and all you do is in comments yes that's",
    "start": "424599",
    "end": "430319"
  },
  {
    "text": "good but it's nowhere nearly as powerful as par programming with that person or",
    "start": "430319",
    "end": "435759"
  },
  {
    "text": "actually even doing remote desktop or anything like that where that person can see the expression of your face where",
    "start": "435759",
    "end": "441560"
  },
  {
    "text": "you can hear the tone of their voice a lot of information is lost if you ask the person something and they hesitate",
    "start": "441560",
    "end": "449840"
  },
  {
    "text": "that's something that doesn't go through in comments if they keep fixing their answer while saying it that doesn't go",
    "start": "449840",
    "end": "456440"
  },
  {
    "text": "through when they write text you only see the end result so you can tell where there's things that they're weak their",
    "start": "456440",
    "end": "464800"
  },
  {
    "text": "knowledge is weak on and you can help them learn something or even better you learn something from them why why did",
    "start": "464800",
    "end": "471000"
  },
  {
    "text": "you do that that's something that maybe you wouldn't have written in a comment on GitHub because it was just a little",
    "start": "471000",
    "end": "477360"
  },
  {
    "text": "thing and it has nothing to do with current code review but you just saw that and you said and you would have",
    "start": "477360",
    "end": "482759"
  },
  {
    "text": "liked to say hey what was that little thing you just did or that you wrote there but that's not about what you're",
    "start": "482759",
    "end": "489280"
  },
  {
    "text": "doing and then you don't write it in the comment and maybe it's too large to start writing the text about it in the",
    "start": "489280",
    "end": "495639"
  },
  {
    "text": "comments and so a whole opportunity for learning something new is lost a new",
    "start": "495639",
    "end": "502520"
  },
  {
    "text": "technique if your team is learning and not doing code reviews and test reviews I would highly suggest that you start",
    "start": "502520",
    "end": "509080"
  },
  {
    "text": "doing it if you decide to do it do it on all the code everything no broken windows no",
    "start": "509080",
    "end": "517000"
  },
  {
    "text": "line of code should go unreviewed be even if it's a single line of XML somewhere should get reviewed no",
    "start": "517000",
    "end": "524959"
  },
  {
    "text": "broken windows because if you do you up the bar and then tomorrow someone said oh it's just one method it doesn't",
    "start": "524959",
    "end": "530680"
  },
  {
    "text": "really need to get reviewed but if you're trying to teach your team how to do unit testing that's",
    "start": "530680",
    "end": "535760"
  },
  {
    "text": "one of the best ways now when we're the the things I'm going",
    "start": "535760",
    "end": "542399"
  },
  {
    "text": "to talk about they have to do what with those three pillars of good unit tests that they're trustworthy they're",
    "start": "542399",
    "end": "548120"
  },
  {
    "text": "maintainable and they're readable if you don't trust your tests and you see them fail or pass you might still want to go",
    "start": "548120",
    "end": "555480"
  },
  {
    "text": "and debug your code if they pass or if they fail you might still say no it's okay and one of the points of trusting",
    "start": "555480",
    "end": "562519"
  },
  {
    "text": "your test is that you should be worried when they fail so someone said oh that's RTF but",
    "start": "562519",
    "end": "569000"
  },
  {
    "text": "just make them uh RTM right RTM tests but if you just make them fast it will",
    "start": "569000",
    "end": "574519"
  },
  {
    "text": "be rtfm and then everything is great and I thought maybe I I should add the fast then",
    "start": "574519",
    "end": "580640"
  },
  {
    "start": "580000",
    "end": "790000"
  },
  {
    "text": "later okay one big mistake is that uh people use mock objects and stubs for",
    "start": "580640",
    "end": "587519"
  },
  {
    "text": "everything when instead they should actually be using them very very uh",
    "start": "587519",
    "end": "592560"
  },
  {
    "text": "little so I would go far as say that maybe 5% of your code on your test",
    "start": "592560",
    "end": "598680"
  },
  {
    "text": "should have any a mock object and when I say mock object I don't mean a stub and",
    "start": "598680",
    "end": "605079"
  },
  {
    "text": "the difference between a mock object and a stub is that a mock object is something that will verify you will verify against at the end of the test",
    "start": "605079",
    "end": "611880"
  },
  {
    "text": "and a stub it's just something that makes happy noises you might have multiple stubs in a test but you could have usually only a single mock object",
    "start": "611880",
    "end": "620000"
  },
  {
    "text": "because it tests a single end result let me be a little more clear about that",
    "start": "620000",
    "end": "625040"
  },
  {
    "text": "when we're talking about unit test when I say the word unit in a unit test what I mean is a unit of work I don't mean a",
    "start": "625040",
    "end": "630440"
  },
  {
    "text": "method I don't mean a class or anything like that what I mean is that there could be multiple methods or even",
    "start": "630440",
    "end": "636360"
  },
  {
    "text": "multiple classes running in memory and they get invoked by some public API",
    "start": "636360",
    "end": "641839"
  },
  {
    "text": "somewhere but then the test invokes a public API and then many things happen in memory they do not touch the file",
    "start": "641839",
    "end": "649000"
  },
  {
    "text": "system or a database or anything like that and then at the end there is either",
    "start": "649000",
    "end": "654880"
  },
  {
    "text": "one of three possible end results you might get back of value right methods that return",
    "start": "654880",
    "end": "662639"
  },
  {
    "text": "something um you might uh have a void method and then the void method has to",
    "start": "662639",
    "end": "668160"
  },
  {
    "text": "do something as well right void methods don't return values but why would you call them they must be doing something",
    "start": "668160",
    "end": "674079"
  },
  {
    "text": "and that is usually to change the state of the system a noticeable State change in the system and the third uh uh type",
    "start": "674079",
    "end": "681839"
  },
  {
    "text": "of end result is when they don't change the state and they don't return a value",
    "start": "681839",
    "end": "687480"
  },
  {
    "text": "why would you have such methods when you forward calls to a third party like a some kind of logger or web",
    "start": "687480",
    "end": "695760"
  },
  {
    "text": "API and only in that third type of end result do mock objects actually make any",
    "start": "695760",
    "end": "702240"
  },
  {
    "text": "sense that's the only time where you have a fire and forget into an external",
    "start": "702240",
    "end": "708160"
  },
  {
    "text": "framework when you try to test on on third party without a mock object there is very little way to check that you",
    "start": "708160",
    "end": "714320"
  },
  {
    "text": "called Twitter the right way Etc so if you try to against it it would",
    "start": "714320",
    "end": "720240"
  },
  {
    "text": "be really really difficult so instead what we'll do is we'll do we'll have a mock object that looks like the Twitter",
    "start": "720240",
    "end": "726760"
  },
  {
    "text": "either not Twitter API but a facade that abstracts it away and if that was called everything is good that's the only time",
    "start": "726760",
    "end": "733000"
  },
  {
    "text": "where mock objects actually make sense but since the beginning of mock objects",
    "start": "733000",
    "end": "738959"
  },
  {
    "text": "in unit testing people have been abusing and using them much more just because they could and that has then created a",
    "start": "738959",
    "end": "745839"
  },
  {
    "text": "lot of tests that are very brittle very hard to maintain that would break on every little change to every internal",
    "start": "745839",
    "end": "751920"
  },
  {
    "text": "implementation in the code um so 5% is maybe the amount of",
    "start": "751920",
    "end": "759720"
  },
  {
    "text": "calls that you have to external apis in your in your code that's how many mock objects you should have but remember",
    "start": "759720",
    "end": "765959"
  },
  {
    "text": "this is only a fire and forget scenario if you get fire something and you get something back that doesn't always mean",
    "start": "765959",
    "end": "771560"
  },
  {
    "text": "it's a mock object it could still be a stub it depends on the flow of information so only if the end abs end",
    "start": "771560",
    "end": "779600"
  },
  {
    "text": "result is calling a third party it makes sense to use a mock",
    "start": "779600",
    "end": "784600"
  },
  {
    "text": "object now uh another very very common mistake that I see is that people say",
    "start": "785120",
    "end": "790320"
  },
  {
    "start": "790000",
    "end": "880000"
  },
  {
    "text": "mock this mock that everything is the word mock for for everyone but there should be a",
    "start": "790320",
    "end": "796000"
  },
  {
    "text": "differentiation now if you read the book xunit test patterns you've seen all these things test spy test double fake",
    "start": "796000",
    "end": "802760"
  },
  {
    "text": "mock stab and all these things mean something for all these something that look like other something and that's a",
    "start": "802760",
    "end": "809560"
  },
  {
    "text": "very very complicated thing especially for someone who's relatively new to this field to understand and what I find is",
    "start": "809560",
    "end": "816560"
  },
  {
    "text": "that if I use a a more uh a simpler ter terminology and I don't use all these I",
    "start": "816560",
    "end": "823480"
  },
  {
    "text": "just have three things that I talk about I have fakes fake is everything that looks like something else and then",
    "start": "823480",
    "end": "830920"
  },
  {
    "text": "whether if I assert against it then it's a mock if I don't assert against it it's a stub and that's the only",
    "start": "830920",
    "end": "836920"
  },
  {
    "text": "differentiation if you take this course grain grained differentiation you can",
    "start": "836920",
    "end": "842680"
  },
  {
    "text": "start talking about the difference between mocks and stubs and not call everything a mock instead of saying I'm",
    "start": "842680",
    "end": "848519"
  },
  {
    "text": "going to marck this I'm going to marck that usually what you mean is I'm going to stub this I'm going to stub that the",
    "start": "848519",
    "end": "855079"
  },
  {
    "text": "only time you should say I'm going to mock this is when you are expecting that this to be",
    "start": "855079",
    "end": "861560"
  },
  {
    "text": "called but even uh Frameworks use the word mock too much and mock is very very",
    "start": "861560",
    "end": "867959"
  },
  {
    "text": "overloaded and again differentiation is you only want a mark one Mark per test because you're testing one thing you",
    "start": "867959",
    "end": "874440"
  },
  {
    "text": "could have multiple stubs so you need to know the",
    "start": "874440",
    "end": "878720"
  },
  {
    "start": "880000",
    "end": "993000"
  },
  {
    "text": "difference third um state-based one of the nice things that happens is that if",
    "start": "880279",
    "end": "886639"
  },
  {
    "text": "you don't use mock objects you're getting into very simple test territory",
    "start": "886639",
    "end": "891720"
  },
  {
    "text": "sometimes it's just invoking method and then checking that some state has changed but you can even uh get that a",
    "start": "891720",
    "end": "899759"
  },
  {
    "text": "bit into some problems for example you might be checking that an internal state",
    "start": "899759",
    "end": "904839"
  },
  {
    "text": "has been changed so imagine that white line being the boundary of your",
    "start": "904839",
    "end": "910160"
  },
  {
    "text": "API and the test that invokes the public API should only be asserting on an API",
    "start": "910160",
    "end": "916560"
  },
  {
    "text": "at the same level no level deeper because if you do you're bound to get weird things for example look at this",
    "start": "916560",
    "end": "924040"
  },
  {
    "text": "test adds a user in memory creates a user and then checks",
    "start": "924040",
    "end": "930000"
  },
  {
    "text": "that there is an internal field somewhere that has the user in memory",
    "start": "930000",
    "end": "935360"
  },
  {
    "text": "now this test will pass but it doesn't mean that the code works because you're",
    "start": "935360",
    "end": "941040"
  },
  {
    "text": "checking internal implementation what's going to end up is that maybe the the the other methods that have to use that",
    "start": "941040",
    "end": "948040"
  },
  {
    "text": "user are using it wrong or they're using a different field so even though private",
    "start": "948040",
    "end": "953240"
  },
  {
    "text": "implementation works doesn't mean that the unit of work actually works from the same level of the publication API this",
    "start": "953240",
    "end": "960399"
  },
  {
    "text": "is a better implementation of the same test if you could do that create a user manager add a user and then check that",
    "start": "960399",
    "end": "967920"
  },
  {
    "text": "you can log in with the new user so noticeable State difference in this case is that the behavior of the object or",
    "start": "967920",
    "end": "975519"
  },
  {
    "text": "the system under test is different than it was before you changed the state",
    "start": "975519",
    "end": "980959"
  },
  {
    "text": "either a method returns a different value or a different method returns a different value but it's still at the",
    "start": "980959",
    "end": "986639"
  },
  {
    "text": "same level of the API it's not checking internal",
    "start": "986639",
    "end": "991759"
  },
  {
    "start": "993000",
    "end": "1103000"
  },
  {
    "text": "implementations uh one of the biggest problems that I've I see and I talked about this is that you that people do",
    "start": "994160",
    "end": "1000319"
  },
  {
    "text": "not trust their tests and one of the biggest reasons for that is that people mix unit and",
    "start": "1000319",
    "end": "1007720"
  },
  {
    "text": "integration tests together in the same suite and they run them all together and then integration tests are",
    "start": "1007720",
    "end": "1014880"
  },
  {
    "text": "usually much more coupled to the current implementation of the local machine for",
    "start": "1014880",
    "end": "1020040"
  },
  {
    "text": "example they need some kind of configuration um and what do we want we",
    "start": "1020040",
    "end": "1025438"
  },
  {
    "text": "want to determine that in this case unit tests are are lightweight tests they're",
    "start": "1025439",
    "end": "1030480"
  },
  {
    "text": "repeatable you can easily rerun them with no reconfiguration they're fast because",
    "start": "1030480",
    "end": "1037038"
  },
  {
    "text": "they don't touch any kind of IO hopefully they're consistent they're always the same test so if they're using",
    "start": "1037039",
    "end": "1044079"
  },
  {
    "text": "daytime the current daytime in the test every time you run them they're actually a different test test they might return",
    "start": "1044079",
    "end": "1050559"
  },
  {
    "text": "different results if they're using random numbers every time you run them they're a different test and the point",
    "start": "1050559",
    "end": "1056160"
  },
  {
    "text": "of these lightweight tests is not to make sure that everything everywhere works but to make sure that you have a",
    "start": "1056160",
    "end": "1062760"
  },
  {
    "text": "baseline of working software you can then fill all the rest with integration",
    "start": "1062760",
    "end": "1068679"
  },
  {
    "text": "tests and there're they should be easy to write and read usually integration tests need a lot of configuration and",
    "start": "1068679",
    "end": "1075640"
  },
  {
    "text": "you see a lot of magic like where did that come from I have no idea how did you know that that thing actually exists",
    "start": "1075640",
    "end": "1082000"
  },
  {
    "text": "somewhere so to accomplish all these things tests need to have full control over their dependencies that means that",
    "start": "1082000",
    "end": "1088480"
  },
  {
    "text": "if you have some kind of third party you create either a stub or a mock object",
    "start": "1088480",
    "end": "1093880"
  },
  {
    "text": "and they should really be in memory so that they can be fully",
    "start": "1093880",
    "end": "1099120"
  },
  {
    "text": "consistent I'm going to give you an example from an open source project called open layer when I got the latest",
    "start": "1099600",
    "end": "1106360"
  },
  {
    "start": "1103000",
    "end": "1201000"
  },
  {
    "text": "version of open layer and I just ran all the tests this is what happened you can see a lot of green but then you see some",
    "start": "1106360",
    "end": "1114840"
  },
  {
    "text": "Reds and the problem with this is you would expect a project that has",
    "start": "1116159",
    "end": "1121679"
  },
  {
    "text": "tests that all the tests would be passing so imagine a programmer in your",
    "start": "1121679",
    "end": "1126760"
  },
  {
    "text": "team that's getting the latest version of your source code then they run all the tests and some of them are failing",
    "start": "1126760",
    "end": "1132520"
  },
  {
    "text": "I'm sure that has never happened to any one of you in this room but it has happened to me in some teams",
    "start": "1132520",
    "end": "1138960"
  },
  {
    "text": "and then what's the worst thing that you can hear someone say when they ask why those tests are",
    "start": "1138960",
    "end": "1144320"
  },
  {
    "text": "failing don't worry about it it's okay it's just a configuration issue it's",
    "start": "1144320",
    "end": "1150159"
  },
  {
    "text": "okay and then those red tests become just an annoyance instead of something",
    "start": "1150159",
    "end": "1155280"
  },
  {
    "text": "to worry about and the big problem here is that you don't know which tests are",
    "start": "1155280",
    "end": "1160440"
  },
  {
    "text": "integration tests and which tests are unit test or lightweight tests if we had",
    "start": "1160440",
    "end": "1166320"
  },
  {
    "text": "a separation into a different project we could have easily said that we have a safe green zone test that should always",
    "start": "1166320",
    "end": "1173760"
  },
  {
    "text": "be green no matter what and then we have some confidence and if one of them fails",
    "start": "1173760",
    "end": "1178880"
  },
  {
    "text": "we should actually be worried but because they're mixed we tend to stop doing whatever",
    "start": "1178880",
    "end": "1185280"
  },
  {
    "text": "configuration we need to just get those things to pass because we have better things to do with our time so by",
    "start": "1185280",
    "end": "1191400"
  },
  {
    "text": "separating we at least give some sort of confidence and some sort of safety and",
    "start": "1191400",
    "end": "1196799"
  },
  {
    "text": "more trust at least in some of the tests as a group jQuery has the same problem when",
    "start": "1196799",
    "end": "1204880"
  },
  {
    "start": "1201000",
    "end": "1224000"
  },
  {
    "text": "you get the latest version of jQuery and you run all the tests by default you get this well actually you",
    "start": "1204880",
    "end": "1212480"
  },
  {
    "text": "get this but if you run it again take 7even minutes by the way if you run it again you get",
    "start": "1212480",
    "end": "1219039"
  },
  {
    "text": "this okay so it was 137 now it's 136",
    "start": "1219039",
    "end": "1224200"
  },
  {
    "start": "1224000",
    "end": "1285000"
  },
  {
    "text": "failed what the hell does that mean what am I supposed to think does it mean that",
    "start": "1224200",
    "end": "1229320"
  },
  {
    "text": "jQuery has bugs probably not what it does mean is that if you start digging",
    "start": "1229320",
    "end": "1235559"
  },
  {
    "text": "around and start to look at all the all the tests that are failing you're going to start seeing things like this oh you",
    "start": "1235559",
    "end": "1242880"
  },
  {
    "text": "require PHP and the server running locally to be able to run the Ajax",
    "start": "1242880",
    "end": "1248280"
  },
  {
    "text": "related tests makes sense but then these are not unit tests but all those tests",
    "start": "1248280",
    "end": "1254240"
  },
  {
    "text": "that require PHP are in the unit folder of the tests and there is no way to",
    "start": "1254240",
    "end": "1259880"
  },
  {
    "text": "easily run just the unit test of jQuery so I had so so I had to start",
    "start": "1259880",
    "end": "1265440"
  },
  {
    "text": "looking around and of course I said does that make sense that you have to have PHP running and of course you Google",
    "start": "1265440",
    "end": "1272240"
  },
  {
    "text": "will tell you yes you need PHP installed Etc to uh to get jQuery working not just",
    "start": "1272240",
    "end": "1280080"
  },
  {
    "text": "installed you need a server running with PHP and those files being served up and again you have the trust problem",
    "start": "1280080",
    "end": "1288200"
  },
  {
    "start": "1285000",
    "end": "1507000"
  },
  {
    "text": "if I wanted to do development this is an open source project so I'm comfortable with the fact that I have to set",
    "start": "1288200",
    "end": "1294000"
  },
  {
    "text": "everything up and make sure that everything is working before I do the first thing but if this was a team if",
    "start": "1294000",
    "end": "1300720"
  },
  {
    "text": "this was a project in a team in a company I would not expect that there to",
    "start": "1300720",
    "end": "1306039"
  },
  {
    "text": "be that kind of Separation uh of non-separation I would expect to at",
    "start": "1306039",
    "end": "1311799"
  },
  {
    "text": "least have a save green zone that says these are all the unit test that should be passing no matter what no matter what",
    "start": "1311799",
    "end": "1320520"
  },
  {
    "text": "if we want to trust our tests we have to remove logic from our tests so this is an example of logic",
    "start": "1321360",
    "end": "1328520"
  },
  {
    "text": "again these are tests from jQuery uh this is a test that actually generates a very very long string and it has a loop",
    "start": "1328520",
    "end": "1335200"
  },
  {
    "text": "and obviously that seems very very Innocent but the point is that this is a broken window someone else looks at this",
    "start": "1335200",
    "end": "1343640"
  },
  {
    "text": "and say okay it's okay to write Loops right and then and then later what's the point of logic is that if",
    "start": "1343640",
    "end": "1351120"
  },
  {
    "text": "your tests have bugs it's very hard to find any piece of logic in your test is",
    "start": "1351120",
    "end": "1357880"
  },
  {
    "text": "destined at some point to possibly be to have a bug in it so I want to avoid that",
    "start": "1357880",
    "end": "1363279"
  },
  {
    "text": "test should just be unit test should just be very very clear simple statements I can save all the loops and",
    "start": "1363279",
    "end": "1369720"
  },
  {
    "text": "the random numbers and all that stuff and I put them in a special folder called integration tests that are all",
    "start": "1369720",
    "end": "1375520"
  },
  {
    "text": "the things that either require logic or anything else by the way there's something else",
    "start": "1375520",
    "end": "1381080"
  },
  {
    "text": "interesting here is that if you look at the top of the test here there's a number and that's the number of a bug",
    "start": "1381080",
    "end": "1387760"
  },
  {
    "text": "that they fixed because there was a problem and when I have those bug fixes",
    "start": "1387760",
    "end": "1393880"
  },
  {
    "text": "especially when it's hard to recreate or they require special special attention",
    "start": "1393880",
    "end": "1398919"
  },
  {
    "text": "what I like to do is that I separate those tests that recreate bugs to to another special folder called Bug fixing",
    "start": "1398919",
    "end": "1405760"
  },
  {
    "text": "or something like that and in that special folder you can have all these crazy animals because obviously that's",
    "start": "1405760",
    "end": "1411400"
  },
  {
    "text": "the only way or that's one of the only ways you can recreate this bug you have",
    "start": "1411400",
    "end": "1416919"
  },
  {
    "text": "to have a really long string you might read it from a file you might generate it you might have it in memory you still",
    "start": "1416919",
    "end": "1422640"
  },
  {
    "text": "need that long string and it's still going to either hurt readability or the maintainability or the trust of the",
    "start": "1422640",
    "end": "1429760"
  },
  {
    "text": "tests so I put them in a special folder and then all those tests you're allowed",
    "start": "1429760",
    "end": "1435480"
  },
  {
    "text": "in a way to have these broken windows because that's a different building with",
    "start": "1435480",
    "end": "1441720"
  },
  {
    "text": "different windows but the safe green zone and the lightweight test should not have any broken",
    "start": "1441720",
    "end": "1449000"
  },
  {
    "text": "windows here's another example from a different test this is checking about",
    "start": "1449760",
    "end": "1455600"
  },
  {
    "text": "the percentages of working with CSS in different browsers they even put a comment have to verify this as the",
    "start": "1455600",
    "end": "1461919"
  },
  {
    "text": "result depends upon the support that the browser has for font size percentages if you have to put to",
    "start": "1461919",
    "end": "1468559"
  },
  {
    "text": "comment in it's first of all it probably should be a different test with a good name but second that if could also have",
    "start": "1468559",
    "end": "1476799"
  },
  {
    "text": "a bug right it looks really really innocent but even the innocent stuff I'm",
    "start": "1476799",
    "end": "1483840"
  },
  {
    "text": "sure if you've had more than three days experience as a developer you know that even three lines of code that look very",
    "start": "1483840",
    "end": "1490360"
  },
  {
    "text": "innocent might have a very un innocent",
    "start": "1490360",
    "end": "1495039"
  },
  {
    "text": "bug one of the things that I uh that I saw in a lot of Frameworks uh in the open source uh uh Frameworks tests is",
    "start": "1496039",
    "end": "1504919"
  },
  {
    "text": "that there is a lot of forced assertion counts so a lot of the Frameworks",
    "start": "1504919",
    "end": "1511559"
  },
  {
    "start": "1507000",
    "end": "1679000"
  },
  {
    "text": "especially Q unit in this case they support the idea that you can say how many asserts you're going to have in the",
    "start": "1511559",
    "end": "1518039"
  },
  {
    "text": "following test and then if some of the asserts don't execute your test will break and say no",
    "start": "1518039",
    "end": "1524159"
  },
  {
    "text": "no you told me there would be five asserts but there were more or less L and that's to me I don't think that's",
    "start": "1524159",
    "end": "1532080"
  },
  {
    "text": "a big problem but it's definitely kind of a maintainability issue because I don't you know it's it's not that big a",
    "start": "1532080",
    "end": "1537840"
  },
  {
    "text": "deal but when I asked uh John Rig why is that he said it's a bit of a extra work",
    "start": "1537840",
    "end": "1545080"
  },
  {
    "text": "but it's good to know if the suite ever stops running for some weird reason I think that's not a bad reason to have it",
    "start": "1545080",
    "end": "1551520"
  },
  {
    "text": "especially if again you're managing an open- source project and you do not know all the people who contribute to your",
    "start": "1551520",
    "end": "1557880"
  },
  {
    "text": "code and you don't really trust that they will remember to write",
    "start": "1557880",
    "end": "1563279"
  },
  {
    "text": "tests in a way that don't break and maybe in async way will will not run or something so maybe in that way it makes",
    "start": "1563279",
    "end": "1571440"
  },
  {
    "text": "some kind of sense to to implement this but need but but then you look at tests that have",
    "start": "1571440",
    "end": "1576720"
  },
  {
    "text": "78 78 asserts expected start saying okay this is getting a bit out of hand",
    "start": "1576720",
    "end": "1582640"
  },
  {
    "text": "because can you imagine adding another assert to that test and then having to go to the beginning and then add and",
    "start": "1582640",
    "end": "1587679"
  },
  {
    "text": "replacing it to 79 that's like working at a very very high bureaucracy company",
    "start": "1587679",
    "end": "1593919"
  },
  {
    "text": "no this is the number of expected asserts and of course you know that when",
    "start": "1593919",
    "end": "1598960"
  },
  {
    "text": "people started running this they just counted how many asserts they think they had and when they expect said no no you",
    "start": "1598960",
    "end": "1605279"
  },
  {
    "text": "have different number they just changed it to that number at the beginning and they just kept kept adding one and and",
    "start": "1605279",
    "end": "1611600"
  },
  {
    "text": "two and three um and then you have 119 that's",
    "start": "1611600",
    "end": "1617200"
  },
  {
    "text": "interesting this is just the beginning beginning of the test of course and you start seeing a now we're seeing a different pattern what the",
    "start": "1617200",
    "end": "1624159"
  },
  {
    "text": "reason we have 119 asserts in this test is because this isn't really a test this",
    "start": "1624159",
    "end": "1630240"
  },
  {
    "text": "is a test Suite disguised as a test method and in that test method we're",
    "start": "1630240",
    "end": "1636240"
  },
  {
    "text": "testing all of the possibilities relating to",
    "start": "1636240",
    "end": "1641399"
  },
  {
    "text": "jQuery do when and then what happens is that developers are then encouraged",
    "start": "1641399",
    "end": "1647080"
  },
  {
    "text": "because they see the other test test to then put new tests at the bottom of this method and then they change the expect",
    "start": "1647080",
    "end": "1654520"
  },
  {
    "text": "so it's really a test Suite disguised and then each assert is really a different test and then of course you",
    "start": "1654520",
    "end": "1661120"
  },
  {
    "text": "cannot really give it a good name you just have to give really good error messages we'll talk about the error",
    "start": "1661120",
    "end": "1666720"
  },
  {
    "text": "messages in a second then you have this right this",
    "start": "1666720",
    "end": "1672279"
  },
  {
    "text": "poor guy he just wanted to write a simple test still has to say expect one",
    "start": "1672279",
    "end": "1679159"
  },
  {
    "start": "1679000",
    "end": "1842000"
  },
  {
    "text": "now in terms of readability one of the things that are hard to read when I was looking at the jQuery tests I was looking at this test",
    "start": "1680080",
    "end": "1687480"
  },
  {
    "text": "and I said well you're expecting the word blog from this thing to to to",
    "start": "1687480",
    "end": "1692960"
  },
  {
    "text": "appear in this sap thing Etc but where where does that",
    "start": "1692960",
    "end": "1698480"
  },
  {
    "text": "actually exist and then I had to start thinking where is that coming from and nowhere does it mention where the text",
    "start": "1698480",
    "end": "1705240"
  },
  {
    "text": "is and of course once you realize it that you understand that the test Runner the index.html testr runner actually",
    "start": "1705240",
    "end": "1712600"
  },
  {
    "text": "contains all the test data and there is a shared it's basically a shared resource there's an HTML page where all",
    "start": "1712600",
    "end": "1718760"
  },
  {
    "text": "the tests are running on and then you have to go and you look at this page and you see oh there it is",
    "start": "1718760",
    "end": "1726279"
  },
  {
    "text": "okay but then you realize that all the developers who write tests for this they",
    "start": "1726279",
    "end": "1732080"
  },
  {
    "text": "each one of them probably adds a line to this page hopefully if they don't what",
    "start": "1732080",
    "end": "1737880"
  },
  {
    "text": "they would do is that they would manipulate this in memory as well so imagine that you have 6,000 tests all",
    "start": "1737880",
    "end": "1745559"
  },
  {
    "text": "manipulating the same piece of HTML and they all have to coincide with each other they all have to make sure that",
    "start": "1745559",
    "end": "1752519"
  },
  {
    "text": "the other test have the same state Etc and that's kind of also could be a maintainability",
    "start": "1752519",
    "end": "1760320"
  },
  {
    "text": "problem um here's another example somewhere up there in the beginning of a very long test Suite there is a declar",
    "start": "1761440",
    "end": "1768200"
  },
  {
    "text": "ation of a variable and then somewhere down below there is the usage of that",
    "start": "1768200",
    "end": "1773799"
  },
  {
    "text": "variable very very uh annoying to try to read and",
    "start": "1773799",
    "end": "1779399"
  },
  {
    "text": "understand that test and then what happens is that again developers look at the at the original broken windows and",
    "start": "1779399",
    "end": "1786120"
  },
  {
    "text": "say okay all the variables are defined at the top because this did start out",
    "start": "1786120",
    "end": "1791240"
  },
  {
    "text": "start out as a test method but then more and more things were added so someone at some point said",
    "start": "1791240",
    "end": "1797320"
  },
  {
    "text": "oh you know what it's it's it's 100 lines of code but all the vars are in one place I'm not going to do a",
    "start": "1797320",
    "end": "1802919"
  },
  {
    "text": "different thing obviously right so I'm going to put the VAR in the same place and human uh psychology is the same way",
    "start": "1802919",
    "end": "1810360"
  },
  {
    "text": "right you know the experiment you put everyone in an elevator all the all the people they are actors and you and you",
    "start": "1810360",
    "end": "1817679"
  },
  {
    "text": "get one person into the elevator and everyone turns around to face not the door and then the person who's the",
    "start": "1817679",
    "end": "1823760"
  },
  {
    "text": "innocent looks at everyone and he turns the other way as well why he doesn't know he does what everyone else does and",
    "start": "1823760",
    "end": "1831399"
  },
  {
    "text": "that's kind of the point is that here instead of aiming for the pit of success we giving people a template of how to",
    "start": "1831399",
    "end": "1837679"
  },
  {
    "text": "make the test more and more or less and less maintainable comments I'm not talking",
    "start": "1837679",
    "end": "1844559"
  },
  {
    "start": "1842000",
    "end": "1904000"
  },
  {
    "text": "about the regular comments I'm talking about commenting out tests what happens when you have these",
    "start": "1844559",
    "end": "1849799"
  },
  {
    "text": "things in your tests you can imagine the developer no one will ever delete these",
    "start": "1849799",
    "end": "1855639"
  },
  {
    "text": "things ever in 5 years this comments will exist and the reason nobody knows why",
    "start": "1855639",
    "end": "1862720"
  },
  {
    "text": "they were commented out nobody knows if they will be someday commented back in",
    "start": "1862720",
    "end": "1869279"
  },
  {
    "text": "nobody knows what's the point must be important and so it will stay there",
    "start": "1869279",
    "end": "1874440"
  },
  {
    "text": "forever not doing anything but just making everyone ask unnecessary",
    "start": "1874440",
    "end": "1880039"
  },
  {
    "text": "questions so I also tell people when I teach uh unit testing is that imagine",
    "start": "1880039",
    "end": "1886639"
  },
  {
    "text": "that the person is going to read your code is a serial killer that knows where you live you don't want them to start",
    "start": "1886639",
    "end": "1893240"
  },
  {
    "text": "asking unnecessary questions but in this case that serial killer is going to take an a ax come to your house and start",
    "start": "1893240",
    "end": "1900960"
  },
  {
    "text": "asking hey what's that comment about really what about naming well naming is",
    "start": "1900960",
    "end": "1907360"
  },
  {
    "start": "1904000",
    "end": "2026000"
  },
  {
    "text": "one of the things that I think people really miss the most um in this case we have a test for",
    "start": "1907360",
    "end": "1915320"
  },
  {
    "text": "text with an undefined and then at the end notice that they there is a message the last parameter of",
    "start": "1915320",
    "end": "1922480"
  },
  {
    "text": "the equal is what to put out what to print out if the test",
    "start": "1922480",
    "end": "1928480"
  },
  {
    "text": "fails and notice the message text undefined is chainable of course this is a bug F fix but then my question is is",
    "start": "1928480",
    "end": "1936639"
  },
  {
    "text": "chainable the bug or is chainable the fix which one of them is the important",
    "start": "1936639",
    "end": "1942360"
  },
  {
    "text": "one should it be changeable or should it not okay so the way like to name my test",
    "start": "1942360",
    "end": "1949080"
  },
  {
    "text": "is that I have three pieces of information somewhere so that the reader can understand what's going on and I",
    "start": "1949080",
    "end": "1955159"
  },
  {
    "text": "find that even if you leave out one of those things the reader is going to have",
    "start": "1955159",
    "end": "1960320"
  },
  {
    "text": "questions and then they have to read the code of your test and in this case it's",
    "start": "1960320",
    "end": "1965880"
  },
  {
    "text": "the unit of work or the entry point to the unit of work and then we have scenario which is under which conditions",
    "start": "1965880",
    "end": "1972720"
  },
  {
    "text": "are we testing in this case the scenario is undefined and then the expected behavior",
    "start": "1972720",
    "end": "1978880"
  },
  {
    "text": "and it should be in the name so in this case it would be text with undefined and then I would either",
    "start": "1978880",
    "end": "1986200"
  },
  {
    "text": "write can be chained or should not be chained either one but I would write it",
    "start": "1986200",
    "end": "1991240"
  },
  {
    "text": "at the name of the test not at the message of the equals or the asserts and",
    "start": "1991240",
    "end": "1996480"
  },
  {
    "text": "in fact I would argue that you shouldn't be writing any messages for as the last parameter of the asserts because if the",
    "start": "1996480",
    "end": "2003960"
  },
  {
    "text": "test name is good enough you wouldn't have to and when you see just the test name name you don't see all those",
    "start": "2003960",
    "end": "2009360"
  },
  {
    "text": "messages uh uh when the test fails you just see some of them and then you see stack Trace but the test name is the",
    "start": "2009360",
    "end": "2015760"
  },
  {
    "text": "first thing you see when you have failure and if the test name is good enough you might not need to see the code of your test before going to the",
    "start": "2015760",
    "end": "2022679"
  },
  {
    "text": "production code and starting to fix it here is an example that I call the",
    "start": "2022679",
    "end": "2028880"
  },
  {
    "start": "2026000",
    "end": "2134000"
  },
  {
    "text": "test of Doom okay lights okay this is the test of Doom",
    "start": "2028880",
    "end": "2035200"
  },
  {
    "text": "right there and when I looked at this test at the beginning what I saw is this first of all 78 we talked about",
    "start": "2035200",
    "end": "2042360"
  },
  {
    "text": "this but then remember this is a very very long test at some point you start",
    "start": "2042360",
    "end": "2048079"
  },
  {
    "text": "understanding that this test is a big big Suite of tests and then at some point you start seeing this you start",
    "start": "2048079",
    "end": "2055158"
  },
  {
    "text": "seeing all this stuff in this long test and you start saying okay you start have",
    "start": "2055159",
    "end": "2060760"
  },
  {
    "text": "to start reading it first and then time is wasted then you go oh I",
    "start": "2060760",
    "end": "2066079"
  },
  {
    "text": "understand this is a separate for a test and they're doing a try catch because if they don't all the code below will stop",
    "start": "2066079",
    "end": "2072919"
  },
  {
    "text": "working will never execute lights please",
    "start": "2072919",
    "end": "2078480"
  },
  {
    "text": "okay so we have multiple tests in a single test and that's mosto readability Nightmare and a maintainability",
    "start": "2078480",
    "end": "2085480"
  },
  {
    "text": "nightmare and one way to to to fix that is by having some kind of I don't know",
    "start": "2085480",
    "end": "2092000"
  },
  {
    "text": "separate test for everything you you test I think that's an important thing that we can do but it also leads to",
    "start": "2092000",
    "end": "2098240"
  },
  {
    "text": "these things at the beginning when Q unit was just starting out people were abusing it and they were calling Q unit",
    "start": "2098240",
    "end": "2104599"
  },
  {
    "text": "reset in the beginning and in the middle and and after each and everything that",
    "start": "2104599",
    "end": "2109720"
  },
  {
    "text": "has to be reset for example the state but this is really just an anti-pattern",
    "start": "2109720",
    "end": "2115359"
  },
  {
    "text": "whenever you see this what it the code is really telling you you really want different",
    "start": "2115359",
    "end": "2120480"
  },
  {
    "text": "tests to be extracted from here by the way do you notice there's",
    "start": "2120480",
    "end": "2126839"
  },
  {
    "text": "like an equal inside an equal that's got to be fun to",
    "start": "2126839",
    "end": "2133280"
  },
  {
    "text": "debug okay let's look at look at backbone now backbone has is also using",
    "start": "2133280",
    "end": "2139920"
  },
  {
    "start": "2134000",
    "end": "2193000"
  },
  {
    "text": "uh kind of the same ideas but here there are magic numbers what are the magic numbers well",
    "start": "2139920",
    "end": "2147839"
  },
  {
    "text": "it's not one two and three but what the hell is minus5 remember the serial killer they",
    "start": "2147839",
    "end": "2153640"
  },
  {
    "text": "look at this and say minus 5 that looks interesting because it doesn't follow the pattern right and by the way at the",
    "start": "2153640",
    "end": "2160400"
  },
  {
    "text": "top we have six that's the expected amount of assertions",
    "start": "2160400",
    "end": "2166240"
  },
  {
    "text": "again but here our brain is designed to see patterns 1 2 3 five minus five what",
    "start": "2166240",
    "end": "2175319"
  },
  {
    "text": "the hell if it was four I could understand it was minus four I might have understood but why five why did",
    "start": "2175319",
    "end": "2182200"
  },
  {
    "text": "they jump one this is a mystery that I still have not solved but just just wastes time from",
    "start": "2182200",
    "end": "2188960"
  },
  {
    "text": "the reader so in terms of naming let's look",
    "start": "2188960",
    "end": "2195280"
  },
  {
    "start": "2193000",
    "end": "2304000"
  },
  {
    "text": "at handlebars in this case handlebars is using Jasmine and in this case Jasmine allows",
    "start": "2195280",
    "end": "2202040"
  },
  {
    "text": "you to have nested blocks of things much like rpec from Ruby Etc but this is an example of how you",
    "start": "2202040",
    "end": "2210079"
  },
  {
    "text": "can have the structure but not have a fitting style for the structure so if we",
    "start": "2210079",
    "end": "2216599"
  },
  {
    "text": "look at the names of the test here we have describe blocks and then it array",
    "start": "2216599",
    "end": "2221839"
  },
  {
    "text": "it array okay and then what should happen is in the messages here arrays",
    "start": "2221839",
    "end": "2228920"
  },
  {
    "text": "ignore the contents when empty arrays iterate over the contents when not",
    "start": "2228920",
    "end": "2234400"
  },
  {
    "text": "empty well that's the wrong way to use the structure because now the person has",
    "start": "2234400",
    "end": "2240319"
  },
  {
    "text": "to read your test code to understand what's supposed to be going on if you want your tests to start reading like",
    "start": "2240319",
    "end": "2246040"
  },
  {
    "text": "documentation we can look at the tests in a different way here's how I would structure the",
    "start": "2246040",
    "end": "2252599"
  },
  {
    "text": "same tests describe blocks describe array describe then you would have a",
    "start": "2252599",
    "end": "2259240"
  },
  {
    "text": "nested describe inside it that is non-empty and then an it inside that",
    "start": "2259240",
    "end": "2265480"
  },
  {
    "text": "tells you what is the expected Behavior iterates over the contents and then just the describe blocks plus the its give",
    "start": "2265480",
    "end": "2272240"
  },
  {
    "text": "you everything that you need to know without looking at the code of the test the same with that is empty it ignores",
    "start": "2272240",
    "end": "2279880"
  },
  {
    "text": "the content with index uses the index variable and all I did was B basically",
    "start": "2279880",
    "end": "2287480"
  },
  {
    "text": "um take the error messages and from here and then down below the",
    "start": "2287480",
    "end": "2294480"
  },
  {
    "text": "the the file and just use them in different places and that gave me a much",
    "start": "2294480",
    "end": "2300520"
  },
  {
    "text": "easier way to understand what's going on same problem with knockout",
    "start": "2300520",
    "end": "2307599"
  },
  {
    "start": "2304000",
    "end": "2374000"
  },
  {
    "text": "in knockout you have describe binding dependencies it and then look if the",
    "start": "2307599",
    "end": "2315240"
  },
  {
    "text": "binding Handler depends on an observable invokes the ne Handler once",
    "start": "2315240",
    "end": "2321160"
  },
  {
    "text": "and the update Handler whenever a newu value is etc etc etc but it's the if",
    "start": "2321160",
    "end": "2326599"
  },
  {
    "text": "that bothers me here and again these are amazing Frameworks but I think the test could be more",
    "start": "2326599",
    "end": "2333560"
  },
  {
    "text": "readable when you have the if that's basically the scenario right you have have the thing that you're calling the",
    "start": "2333599",
    "end": "2338640"
  },
  {
    "text": "unit of work then we have the if which is the scenario and then the it also contains the expected Behavior so it's",
    "start": "2338640",
    "end": "2345319"
  },
  {
    "text": "combining these two pieces of information but then again maybe this would be a better way describe binding",
    "start": "2345319",
    "end": "2352560"
  },
  {
    "text": "dependency describe when Handler depends on observable and new value available it invokes the inate Handler it also makes",
    "start": "2352560",
    "end": "2359960"
  },
  {
    "text": "sense in English you can actually read it as a sentence and I think the authors did mean to do this but I don't think",
    "start": "2359960",
    "end": "2367160"
  },
  {
    "text": "that they knew about the possible structure that you can have and the nesting that you could do to make it",
    "start": "2367160",
    "end": "2372599"
  },
  {
    "text": "even more clear um now there is another common",
    "start": "2372599",
    "end": "2378960"
  },
  {
    "start": "2374000",
    "end": "2472000"
  },
  {
    "text": "problem which is when you have setups uh and you if you've ever used setups this is Batman JS in Batman JS one of the",
    "start": "2378960",
    "end": "2385480"
  },
  {
    "text": "files looks like this there is a they're using coffee script for some of the tests so the setup looks like this they",
    "start": "2385480",
    "end": "2392280"
  },
  {
    "text": "have a spy in this case the Spy is a mock object and somewhere down in the file",
    "start": "2392280",
    "end": "2398839"
  },
  {
    "text": "they start using it the problem is that the Spy created at the setup method is",
    "start": "2398839",
    "end": "2404200"
  },
  {
    "text": "only used in some of the tests okay so we're",
    "start": "2404200",
    "end": "2409440"
  },
  {
    "text": "checking we're basically using it as a mock object in all these places right we we're asserting against it",
    "start": "2409440",
    "end": "2416480"
  },
  {
    "text": "but there are a couple of tests that don't use it so the test method becomes less readable because when you look at",
    "start": "2416480",
    "end": "2422440"
  },
  {
    "text": "it you start saying oh all these things matter do some of them matter to all the tests or not and then you have to start",
    "start": "2422440",
    "end": "2427599"
  },
  {
    "text": "dissecting the code again so if you ever want to start refactoring these setup methods it's going to be very hard",
    "start": "2427599",
    "end": "2434119"
  },
  {
    "text": "because you don't know which dependencies which tests depend on it so if you have to use a setup method make",
    "start": "2434119",
    "end": "2440160"
  },
  {
    "text": "sure that you only put things in it that are applying to all the tests in the",
    "start": "2440160",
    "end": "2445880"
  },
  {
    "text": "file but if it's only for some of the tests in the file I would just use a factoring method directly in the test",
    "start": "2445880",
    "end": "2453960"
  },
  {
    "text": "actually I don't like using setup Methods at all I would just put the factory method most of the time and create the spy for each test I find that",
    "start": "2453960",
    "end": "2461040"
  },
  {
    "text": "it's more readable and then the reader of the test doesn't have to look in multiple places to understand what's",
    "start": "2461040",
    "end": "2466520"
  },
  {
    "text": "going on and while we're at it it's I don't",
    "start": "2466520",
    "end": "2472760"
  },
  {
    "start": "2472000",
    "end": "2769000"
  },
  {
    "text": "think it's a great idea to test multiple things in the same test I think that it makes the test name very very generic so",
    "start": "2472760",
    "end": "2479200"
  },
  {
    "text": "maybe in jQuery that's the pattern that has evolved but I don't think this is a good pattern for use in every other",
    "start": "2479200",
    "end": "2485520"
  },
  {
    "text": "framework as well I think that if you're if you if you have such a short test but",
    "start": "2485520",
    "end": "2491760"
  },
  {
    "text": "you're testing look at the name redirecting using redirect in action prevents implicit render I'm not sure",
    "start": "2491760",
    "end": "2497079"
  },
  {
    "text": "what prevents implicit render means but if we look at the asserts we say that the Batman current APP subviews length",
    "start": "2497079",
    "end": "2503760"
  },
  {
    "text": "is zero maybe that's the what prevents actually means but then there is I'm I'm",
    "start": "2503760",
    "end": "2508880"
  },
  {
    "text": "making sure that the nav Navigator redirect was called now interesting",
    "start": "2508880",
    "end": "2516000"
  },
  {
    "text": "questions why why do I care that it was called is it just an internal implementation possible and then I don't",
    "start": "2516000",
    "end": "2522520"
  },
  {
    "text": "need to assert on that I only need to assert on the end result which is the length is zero because",
    "start": "2522520",
    "end": "2529079"
  },
  {
    "text": "then if I don't need this line then tomorrow I can remove all these calls as",
    "start": "2529079",
    "end": "2534400"
  },
  {
    "text": "long as the end result is still zero my test will not break but if this is",
    "start": "2534400",
    "end": "2539640"
  },
  {
    "text": "important if indeed this method that has two end results which is possible a method can have multiple end results but",
    "start": "2539640",
    "end": "2546760"
  },
  {
    "text": "each end result should be tested separately and have a good name then I would have a different test that says",
    "start": "2546760",
    "end": "2553000"
  },
  {
    "text": "that when you call this it calls Navigator redirect for example but I would separate it because",
    "start": "2553000",
    "end": "2559880"
  },
  {
    "text": "in this case if one of them fails I'm not sure if it's actually a problem or",
    "start": "2559880",
    "end": "2565559"
  },
  {
    "text": "not and sometimes especially in the unit testing world people assert on on mock objects just because they can but",
    "start": "2565559",
    "end": "2571920"
  },
  {
    "text": "doesn't mean they should and when we look at all these things together we find that we have",
    "start": "2571920",
    "end": "2577680"
  },
  {
    "text": "those three pillars of good unit test they have to be readable they have to be maintainable they have to be trustworthy",
    "start": "2577680",
    "end": "2584440"
  },
  {
    "text": "if you don't trust your tests you're not going to bother reading them if you don't if you can't read your tests it's",
    "start": "2584440",
    "end": "2590440"
  },
  {
    "text": "going to be very hard to maintain them and if you can't maintain your tests you're never going to get them into any",
    "start": "2590440",
    "end": "2596160"
  },
  {
    "text": "kind of trustworthy States when they start failing thank you very much and if there are any questions we have a few minutes",
    "start": "2596160",
    "end": "2603319"
  },
  {
    "text": "so when will the second edition be released so some questions about my",
    "start": "2603319",
    "end": "2608400"
  },
  {
    "text": "mother and hey some people got the joke okay",
    "start": "2608400",
    "end": "2614319"
  },
  {
    "text": "does the regulator have a future nobody knows what the regulator is except me and that guy okay the second edition",
    "start": "2614319",
    "end": "2620640"
  },
  {
    "text": "should have been released this month should be released this month you say that only third party should be mocked what about when testing against your",
    "start": "2620640",
    "end": "2627319"
  },
  {
    "text": "repository I often find that I want to check that my repository was called in a specific way I fully understand if you",
    "start": "2627319",
    "end": "2633520"
  },
  {
    "text": "do have a repository and your test do have to use some kind of uh uh database then I would say don't do unit tests on",
    "start": "2633520",
    "end": "2640599"
  },
  {
    "text": "it I would never create a mock object of a database and prove that some SQL query",
    "start": "2640599",
    "end": "2646160"
  },
  {
    "text": "was actually called and the reason is because the repository also contains a piece of the logic you would like to",
    "start": "2646160",
    "end": "2652359"
  },
  {
    "text": "test for example the structure the schema is an example of some of that logic and so if you do have some kind of",
    "start": "2652359",
    "end": "2659280"
  },
  {
    "text": "a repository I would use only integration test to test the data layer against that repository and I would put",
    "start": "2659280",
    "end": "2665920"
  },
  {
    "text": "that in a separate folder otherwise it wouldn't make sense the test would be very very brittle and it still wouldn't",
    "start": "2665920",
    "end": "2671359"
  },
  {
    "text": "prove that anything worked you would have the perfect query passing in your test but if you got the wrong schema",
    "start": "2671359",
    "end": "2677599"
  },
  {
    "text": "your test uh uh your application will actually not work separating test integration versus",
    "start": "2677599",
    "end": "2684520"
  },
  {
    "text": "unit test do you use test categories or should it be separate projects I don't specifically use test categories um I",
    "start": "2684520",
    "end": "2692240"
  },
  {
    "text": "find that the physical separation is a better pit of success I have seen people use categories uh but I like the",
    "start": "2692240",
    "end": "2699599"
  },
  {
    "text": "physical separation it gives me a it gives me a a physical bucket to look at",
    "start": "2699599",
    "end": "2704680"
  },
  {
    "text": "when I'm sitting with someone and we're pairing together um we have a two",
    "start": "2704680",
    "end": "2709960"
  },
  {
    "text": "projects and then I say okay which project should we write this testing what happens with categories",
    "start": "2709960",
    "end": "2715559"
  },
  {
    "text": "that you end up deciding if you remember which category this should really be in and sometimes the the the whole point is",
    "start": "2715559",
    "end": "2723040"
  },
  {
    "text": "that it's so important that I would rather it be a physical thing moving things but I have seen people",
    "start": "2723040",
    "end": "2729400"
  },
  {
    "text": "successfully use categories so I would say it's more of a personal um preference than a specific problem with",
    "start": "2729400",
    "end": "2736400"
  },
  {
    "text": "categories I just always made sense to me to move things and then I don't have to worry about features of a framework",
    "start": "2736400",
    "end": "2742880"
  },
  {
    "text": "or naming conventions of categories if that changes at any time if there are no other questions I",
    "start": "2742880",
    "end": "2749000"
  },
  {
    "text": "would like to thank you you can you can uh feel free to learn more about all this stuff and get some more videos uh",
    "start": "2749000",
    "end": "2754920"
  },
  {
    "text": "at runit testing.com and you can always contact me on Twitter uh I appreciate your time thank you very much",
    "start": "2754920",
    "end": "2763440"
  }
]