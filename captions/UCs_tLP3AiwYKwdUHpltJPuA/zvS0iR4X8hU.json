[
  {
    "text": "so my name is Christopher Michael John like Katie said I'm a PhD student at a",
    "start": "9820",
    "end": "15230"
  },
  {
    "text": "university a catalyst I live on in Belgium we are in the French side not",
    "start": "15230",
    "end": "22340"
  },
  {
    "text": "the not the Dutch side and so yeah I think so this is gonna be a research",
    "start": "22340",
    "end": "28429"
  },
  {
    "text": "talk so just heads up if if that wasn't clear from the program and so I think I",
    "start": "28429",
    "end": "34550"
  },
  {
    "text": "successfully tricked everybody into coming to see an inner things talk about what we're really going to talk is about",
    "start": "34550",
    "end": "40250"
  },
  {
    "text": "distributed systems and so when I say the Internet of Things you know the",
    "start": "40250",
    "end": "46580"
  },
  {
    "text": "Internet of Things is like kind of buzzword we use it to refer to kind of one class of applications where we have a bunch of like sensors and we run",
    "start": "46580",
    "end": "53150"
  },
  {
    "text": "processing over them with things like aim AWS lamda and stuff like that but more generally what I want to talk about",
    "start": "53150",
    "end": "59300"
  },
  {
    "text": "here is is the idea of edge computation because this kind of predates this predates a lot of the internet-of-things",
    "start": "59300",
    "end": "65299"
  },
  {
    "text": "work by quite a bit and so what I mean by edge computation is we're referring",
    "start": "65299",
    "end": "71210"
  },
  {
    "text": "to the the process of kind of pushing both the computation and the data that we compute at to the logical extremes of",
    "start": "71210",
    "end": "77690"
  },
  {
    "text": "that work so we're talking about devices that are generating the data we want to do the processing at the devices as much",
    "start": "77690",
    "end": "83360"
  },
  {
    "text": "as possible and so this could be mobile devices this could be sensors this could be anything points of presence data",
    "start": "83360",
    "end": "89630"
  },
  {
    "text": "centers you know they're all some degree of the edge and if you come from the networking world you know the edge means quite a bit different thing than kind of",
    "start": "89630",
    "end": "97250"
  },
  {
    "text": "what we think of today when when it's kind of framed in terms of networking and so when I say computation what do I",
    "start": "97250",
    "end": "104240"
  },
  {
    "text": "mean I mean arbitrary computation like any program that I write and go on my computer I should be with the data on my",
    "start": "104240",
    "end": "110900"
  },
  {
    "text": "computer I should be able to kind of push that kind of computation the edge right so we'd like it to be arbitrary",
    "start": "110900",
    "end": "116119"
  },
  {
    "text": "well see why that's difficult to do in practice and finally I want to talk",
    "start": "116119",
    "end": "122450"
  },
  {
    "text": "about what one of these really interesting about edge computation is has a long history and in kind of self-organized",
    "start": "122450",
    "end": "127729"
  },
  {
    "text": "self-organizing and resilient systems and so if you're familiar with this work",
    "start": "127729",
    "end": "133459"
  },
  {
    "text": "directed or digest fusion this comes from Cornell University in the 90s and it's about kind of self-organizing",
    "start": "133459",
    "end": "140440"
  },
  {
    "text": "systems that can compute some sort of result together in in a very resilient manner and so I really like this work if",
    "start": "140440",
    "end": "147790"
  },
  {
    "text": "you follow me on Twitter you know that I absolutely love like computer history and stuff like that and so these papers",
    "start": "147790",
    "end": "154240"
  },
  {
    "text": "are interesting to read because this work was originally framed under under DARPA grants to Cornell's a Systems",
    "start": "154240",
    "end": "161020"
  },
  {
    "text": "Group and the idea was that you know they were dealing with sensor networks in the 90s they wanted to be able to",
    "start": "161020",
    "end": "166330"
  },
  {
    "text": "take an airplane and fly it over a hostile battlefield or an area that they could not get into drop a bunch of",
    "start": "166330",
    "end": "172600"
  },
  {
    "text": "sensors out of a back of a airplane have some of them hit the ground some of them will like keep working some of them will",
    "start": "172600",
    "end": "178120"
  },
  {
    "text": "break they'll self-organized into a distributed system using an ad hoc wireless network and then they'll compute some sort of result in the field",
    "start": "178120",
    "end": "184570"
  },
  {
    "text": "and so that's a pretty extreme case of edge computing it's something we don't think about when we're trying to just",
    "start": "184570",
    "end": "189820"
  },
  {
    "text": "you know monitor the temperature you know if your nest thermostat at your home right it's it's a much safer less",
    "start": "189820",
    "end": "196330"
  },
  {
    "text": "aggressive environment and so there's there's a good amount of history here and it's very interesting reading if you like this kind of work so to get a",
    "start": "196330",
    "end": "203739"
  },
  {
    "text": "little bit more practical we're going to talk about an example about hospital refrigerators and so many colleagues of",
    "start": "203739",
    "end": "211360"
  },
  {
    "text": "mine went to start a company that's doing exactly this so I've I've spent quite a bit of time thinking about the problem and kind of exploring",
    "start": "211360",
    "end": "217450"
  },
  {
    "text": "alternative ways of solving it and so what we're going to imagine here is that we have a bunch of hospital refrigerators I have sensors these",
    "start": "217450",
    "end": "223959"
  },
  {
    "text": "sensors are going to trigger kind of alerts about the temperature whether it's to warm to cold and maybe we want",
    "start": "223959",
    "end": "229000"
  },
  {
    "text": "to trigger behavior based on those those events and so kind of the IOT reference",
    "start": "229000",
    "end": "234310"
  },
  {
    "text": "architecture that that we kind of look at today and peter is going to talk about an alternative one after this is",
    "start": "234310",
    "end": "240310"
  },
  {
    "text": "that we have a bunch of things and we put them on the internet that's the starting point to get where we need to be and and what we would do is that",
    "start": "240310",
    "end": "247060"
  },
  {
    "text": "these things are going to like generate events they're going to generate samples and maybe we put this in something like",
    "start": "247060",
    "end": "252610"
  },
  {
    "text": "Hadoop distributed file system here and then you know if this was 2007 it'd be",
    "start": "252610",
    "end": "258130"
  },
  {
    "text": "really invoked to use Hadoop to run batch jobs over this data kind of produce some results and then and",
    "start": "258130",
    "end": "263260"
  },
  {
    "text": "trigger some sort of thing but but we've moved on since 2007 and so maybe now we use something like spark or Kafka which",
    "start": "263260",
    "end": "269890"
  },
  {
    "text": "was talked about earlier and so in this model we would kind of process those events as they're happening in real time and react to",
    "start": "269890",
    "end": "275280"
  },
  {
    "text": "those events as they happen so we can imagine an ideal execution with this",
    "start": "275280",
    "end": "281100"
  },
  {
    "text": "kind of topology this reference architecture that I've laid out would look something like this so we generate",
    "start": "281100",
    "end": "286470"
  },
  {
    "text": "some simple we say temperatures fine we send it to the data center and the data center does nothing now when we generate",
    "start": "286470",
    "end": "293880"
  },
  {
    "text": "a sample that says there's a problem and we transmit that to the data center usually somebody gets called by a phone",
    "start": "293880",
    "end": "299880"
  },
  {
    "text": "or maybe this is the modern day version of you know a paging system like page or duty or something like that right and so",
    "start": "299880",
    "end": "305039"
  },
  {
    "text": "this is the ideal situation we want it somebody gets call and all the things in the refrigerator don't go bad and so if",
    "start": "305039",
    "end": "312630"
  },
  {
    "text": "we want to kind of start poking holes at this we could say well I mean the first problem is the idea of connectivity right we all live on networks with you",
    "start": "312630",
    "end": "319110"
  },
  {
    "text": "know that use that you know that get partitioned all the time as we've seen from many talks earlier today and and",
    "start": "319110",
    "end": "324720"
  },
  {
    "text": "because of this I run into this situation where if I generate a bad sample and my connection to the internet happens to be down and I can't transmit",
    "start": "324720",
    "end": "331650"
  },
  {
    "text": "that back to the data center then I all I have is all I can do is buffer these events and so if I buffer these events I",
    "start": "331650",
    "end": "338430"
  },
  {
    "text": "this is fine these devices usually have enough to buffer the events but this doesn't help anything in the",
    "start": "338430",
    "end": "344159"
  },
  {
    "text": "refrigerator right and so this is kind of a this is kind of not desirable but",
    "start": "344159",
    "end": "349680"
  },
  {
    "text": "but something that we deal with that we deal with all the time and kind of these IOT systems that we that we kind of",
    "start": "349680",
    "end": "355380"
  },
  {
    "text": "deploy here and so what if I can't get my events to Amazon IOT or my Amazon service running on lambda or something",
    "start": "355380",
    "end": "360810"
  },
  {
    "text": "like that and so kind of the first thing that we could do here is is we could explore the notion of making local",
    "start": "360810",
    "end": "367409"
  },
  {
    "text": "decisions and so if we think about what it means to make a local decision and you know we have our event it gets",
    "start": "367409",
    "end": "374669"
  },
  {
    "text": "generated as a sensor it's transmitted to Hadoop nothing happens everything's fine if we generate a bad event if we",
    "start": "374669",
    "end": "381840"
  },
  {
    "text": "have the ability to take action to perform local decisions then we could just trigger the call from the device",
    "start": "381840",
    "end": "387419"
  },
  {
    "text": "right and so this is expensive obviously because you need a bunch of backup hardware but there is president for this",
    "start": "387419",
    "end": "393680"
  },
  {
    "text": "one of the companies that so PG&E for instance can't send can't send electro",
    "start": "393680",
    "end": "399690"
  },
  {
    "text": "electro mechanical signal for a paragraph that's overloaded because the power grids overloaded right so that's kind of a problem you know in",
    "start": "399690",
    "end": "407720"
  },
  {
    "text": "in the 80's and 90's so if you're in your late 30s maybe or 40s you might remember that you know it was very",
    "start": "407720",
    "end": "414020"
  },
  {
    "text": "common to have backup communication mechanisms for things like iced tea on lines and tea ones I actually worked for",
    "start": "414020",
    "end": "420560"
  },
  {
    "text": "a telecom that did this for fidelity so they would have a backup system for out-of-band channeling when when when things would go down if you were you",
    "start": "420560",
    "end": "428390"
  },
  {
    "text": "know in the in the world of computing in the 90s you know in in the late 90s early 2000s when EMC introduced the sin",
    "start": "428390",
    "end": "435350"
  },
  {
    "text": "and then as Nazz devices would have a modem connected to them with a phone line and when a disk was generating crc",
    "start": "435350",
    "end": "442850"
  },
  {
    "text": "areas it would actually like call with the modem to EMC and say hey this drives about to die and then you know the next",
    "start": "442850",
    "end": "449540"
  },
  {
    "text": "morning at the office of EMC guy would knock on the door you have a backup truck and so this idea of local decisions is not something that's that's",
    "start": "449540",
    "end": "456350"
  },
  {
    "text": "kind of new we've explored this before and so the using local decisions to kind",
    "start": "456350",
    "end": "461810"
  },
  {
    "text": "of build an application around is really expensive because it requires a bunch of additional hardware and so maybe an",
    "start": "461810",
    "end": "467690"
  },
  {
    "text": "alternative that we could explore is this idea of transitive dissemination and so in this idea we could say well",
    "start": "467690",
    "end": "473690"
  },
  {
    "text": "maybe I have this sample go suit it's fine the internet connection goes down and now I generate the bad sample but",
    "start": "473690",
    "end": "479480"
  },
  {
    "text": "I'm connected via another wireless protocol to appear and that peer can trigger it can send the events on on its",
    "start": "479480",
    "end": "485690"
  },
  {
    "text": "behalf and and so this model should be very familiar to anybody that's used something like an epidemic broadcast",
    "start": "485690",
    "end": "491180"
  },
  {
    "text": "protocol that tries to rely on on to give you very high probabilistic guarantees on message delivery but",
    "start": "491180",
    "end": "498170"
  },
  {
    "text": "doesn't guarantee that it will work correctly and so obviously you know these epidemic for broadcast protocols",
    "start": "498170",
    "end": "504560"
  },
  {
    "text": "have been studied for a while and the problem that you can trivially see here is that you know to achieve high",
    "start": "504560",
    "end": "510050"
  },
  {
    "text": "probability in mass network emissions to get you to 100% you potentially have to",
    "start": "510050",
    "end": "515180"
  },
  {
    "text": "send this down every single path you know and there are entire groups of researchers that are working on trying to make this problem more efficient and",
    "start": "515180",
    "end": "521780"
  },
  {
    "text": "so then you alternate then you additionally have the problem of well if I get all these copies back at the data center how do I know which ones given",
    "start": "521780",
    "end": "529160"
  },
  {
    "text": "that messages can go out of order how do I know which ones are the most up-to-date which ones are stale and",
    "start": "529160",
    "end": "534950"
  },
  {
    "text": "do I know which ones are duplicates okay and so finally maybe we could look at a",
    "start": "534950",
    "end": "541970"
  },
  {
    "text": "model where we just send around status right so rather than generating an event stream and trying to guarantee that we",
    "start": "541970",
    "end": "548480"
  },
  {
    "text": "deliver with extremely high probability within some sort of bounded amount of time disseminate all the events",
    "start": "548480",
    "end": "554570"
  },
  {
    "text": "maybe we just disseminate state instead and so a mutable state that describes the state of the system and so in this",
    "start": "554570",
    "end": "561620"
  },
  {
    "text": "case we could imagine that with this refrigerator here what the red circle is is problematic but these two are fine",
    "start": "561620",
    "end": "567110"
  },
  {
    "text": "they can kind of disseminate this state and build up kind of a overall state of",
    "start": "567110",
    "end": "572750"
  },
  {
    "text": "the system and in this model you know we we additionally have a challenge of",
    "start": "572750",
    "end": "578270"
  },
  {
    "text": "ensuring that with the out of order delivery everything can kind of look the same so we have an equivalence problem",
    "start": "578270",
    "end": "584210"
  },
  {
    "text": "here and additionally we also have this nice added benefit that any of the nodes",
    "start": "584210",
    "end": "590090"
  },
  {
    "text": "in the system can kind of make the phone call to say that something is wrong and so I will I will not talk about the idea",
    "start": "590090",
    "end": "597290"
  },
  {
    "text": "of how we ensure that you only get one phone call because that is a problem of synchronization and I will kind of just leave that exercise to the reader so I",
    "start": "597290",
    "end": "606440"
  },
  {
    "text": "talked about a lot of things and and kind of what I'm trying to do is get you to think about the idea of local computation and I'm trying to get you to",
    "start": "606440",
    "end": "613100"
  },
  {
    "text": "challenge kind of the reference architecture and think more critically about the applications that you're building and so there's kind of two main",
    "start": "613100",
    "end": "621050"
  },
  {
    "text": "points that I'd like to kind of drive home here the first one is you know if you don't just generate an infinite",
    "start": "621050",
    "end": "626420"
  },
  {
    "text": "stream of events that model every single change in the system and kind of work with a mutable state or aggregate state",
    "start": "626420",
    "end": "633020"
  },
  {
    "text": "then you can reduce state transmission and this is very important because a lot of mobile devices and sensors and things",
    "start": "633020",
    "end": "638870"
  },
  {
    "text": "like this operate with very low battery very little battery and the antenna is one of the most expensive components in the",
    "start": "638870",
    "end": "644930"
  },
  {
    "text": "system to drive the second thing that I'm getting you I'm trying to get across",
    "start": "644930",
    "end": "650480"
  },
  {
    "text": "is that the idea of making local decisions if we can base a decision if",
    "start": "650480",
    "end": "655610"
  },
  {
    "text": "we can take action at the device we can have a system that is in a sense more alive it can be more resilient to",
    "start": "655610",
    "end": "662750"
  },
  {
    "text": "failures it can take actions and we don't run into this situation where if you know a bunch of our devices that are doing something are",
    "start": "662750",
    "end": "668610"
  },
  {
    "text": "disconnected from the network where where you can't do anything okay all",
    "start": "668610",
    "end": "674730"
  },
  {
    "text": "right and so if I want to talk about replicated shared state away what I need to do is kind of talk about consistency",
    "start": "674730",
    "end": "680490"
  },
  {
    "text": "and so you've probably heard a bunch about this today already and you fight heard a bunch about this in the past and",
    "start": "680490",
    "end": "686850"
  },
  {
    "text": "so what kind of just briefly do a quick overview of kind of the ideas of consistency of replicated data and so",
    "start": "686850",
    "end": "695249"
  },
  {
    "text": "the kind of the the first notion we'll talk about is strong consistency and so if we think about this the single system",
    "start": "695249",
    "end": "701819"
  },
  {
    "text": "image so if we think about one database that we want to kind of have some total order of events over if I have a data",
    "start": "701819",
    "end": "709050"
  },
  {
    "text": "item here represented by this circle and I have two clients read that data item concurrently now if c1 goes to modify",
    "start": "709050",
    "end": "716100"
  },
  {
    "text": "that data item and write it back to the story using a compare and swap operation this this will succeed in within this",
    "start": "716100",
    "end": "723029"
  },
  {
    "text": "kind of single databases first replica will be updated now the problem that you",
    "start": "723029",
    "end": "729119"
  },
  {
    "text": "have here is that if c2 goes to right and say while I read this green circle I'm going to write this red triangle this right operation is going to fail",
    "start": "729119",
    "end": "736199"
  },
  {
    "text": "because it's attempting to do this compare and swap and the value has changed from already's it and so these are kind of this gives us this kind of",
    "start": "736199",
    "end": "742620"
  },
  {
    "text": "total order over the events and things kind of change in lockstep you only read them right and so this is kind of a",
    "start": "742620",
    "end": "748079"
  },
  {
    "text": "standard thing that we see in like kind of strongly consistent systems like like something like a console that's it's",
    "start": "748079",
    "end": "753990"
  },
  {
    "text": "backed by something like raft the raft consensus protocol and so you know I'm not going to diagram Paxos but I'm going",
    "start": "753990",
    "end": "761519"
  },
  {
    "text": "to diagram it just enough to show you that if you have multiple replicas if you have multiple copies of your data",
    "start": "761519",
    "end": "767759"
  },
  {
    "text": "items it gets that much more expensive to make those guarantees it takes a lot",
    "start": "767759",
    "end": "772829"
  },
  {
    "text": "of time to get all of these nodes to agree on an order never mind their requirement that these nodes need to be",
    "start": "772829",
    "end": "777899"
  },
  {
    "text": "online and we're specifically talking about systems today that we want to operate while the systems are offline so",
    "start": "777899",
    "end": "785610"
  },
  {
    "text": "kind of at the opposite side of the spectrum we have a notion of eventual consistency which which kind of became popular slowly over time and kind of",
    "start": "785610",
    "end": "792569"
  },
  {
    "text": "exploded in in to thin the kind of mid-2000s in kind of a eventually",
    "start": "792569",
    "end": "798179"
  },
  {
    "text": "consistent system we have multiple replicas you know you can have clients reading and reading these values from the",
    "start": "798179",
    "end": "804480"
  },
  {
    "text": "database and then if you have two concurrent rights so client one writes this Blue Square and then client two",
    "start": "804480",
    "end": "810810"
  },
  {
    "text": "writes this red triangle we can't determine which one came first and so we have to kind of assume that both rights",
    "start": "810810",
    "end": "816990"
  },
  {
    "text": "are concurrent and so this is very similar to a system I worked on called react and so in this case what we have",
    "start": "816990",
    "end": "822480"
  },
  {
    "text": "to do is have an arbiter the next reader decide what the value should be it should merge those values and then write",
    "start": "822480",
    "end": "828839"
  },
  {
    "text": "back to the dist data store the updated value and so ideally the the thing that",
    "start": "828839",
    "end": "834180"
  },
  {
    "text": "you want to perform this write operation to resolve these conflicts ideally you want this to be deterministic kind of",
    "start": "834180",
    "end": "840899"
  },
  {
    "text": "the most trivial case you can have of this is something like last writer wins which just puts a timestamp with everything and takes that that's",
    "start": "840899",
    "end": "846839"
  },
  {
    "text": "deterministic for a set of events but but that doesn't necessarily model the",
    "start": "846839",
    "end": "852149"
  },
  {
    "text": "way we want the system to work because it's hard to reason about kind of what updates will win because you don't know",
    "start": "852149",
    "end": "858390"
  },
  {
    "text": "when things are going to get delivered okay and so what I want people to think",
    "start": "858390",
    "end": "865170"
  },
  {
    "text": "is that kind of eventual consistency is is kind of the model we're talking about here we want to think of these devices",
    "start": "865170",
    "end": "872399"
  },
  {
    "text": "as as generating their own data kind of owning the the copies of the data that",
    "start": "872399",
    "end": "877440"
  },
  {
    "text": "they generate and so we can think of these three squares as being kind of the events that are being generated and we",
    "start": "877440",
    "end": "883560"
  },
  {
    "text": "want to kind of share those events with other members in the system in a peer-to-peer way we own our own data we",
    "start": "883560",
    "end": "888630"
  },
  {
    "text": "compute with our own data and we want to have the ability that these these data items regardless of delivery order are",
    "start": "888630",
    "end": "894540"
  },
  {
    "text": "going to resolve to the same value additionally when we think about the",
    "start": "894540",
    "end": "902700"
  },
  {
    "text": "results of computations we we kind of want two properties here so we want the property of merge ability and we want",
    "start": "902700",
    "end": "908640"
  },
  {
    "text": "the property of these computations tracking Providence and and I'll go through an example of what I mean by",
    "start": "908640",
    "end": "914190"
  },
  {
    "text": "that and so if we imagine that we have a refrigerator that has scene events in",
    "start": "914190",
    "end": "919410"
  },
  {
    "text": "the system a and C and another refrigerator that's seen the same event a but a different event B now if we",
    "start": "919410",
    "end": "925290"
  },
  {
    "text": "distribute some arbitrary computation F to these notes and F is computed with a",
    "start": "925290",
    "end": "930329"
  },
  {
    "text": "and C and F is also computed with a and B then the result of this computation represented by a D Prime and D double",
    "start": "930329",
    "end": "937109"
  },
  {
    "text": "prime here should kind of track the inputs that came from that computation this is what I mean by Providence and so",
    "start": "937109",
    "end": "943589"
  },
  {
    "text": "kind of to put this in in a notion that might be more familiar systems like SPARC do this so that when when a Hadoop",
    "start": "943589",
    "end": "950759"
  },
  {
    "text": "job is kind of failing halfway and some nodes get partitioned it can look at the data structure is created and identify",
    "start": "950759",
    "end": "956759"
  },
  {
    "text": "the missing components it can't figure out what those missing components are and and kind of figure out where to go",
    "start": "956759",
    "end": "962069"
  },
  {
    "text": "get them and this is why SPARC is more efficient than something like a dupe and so the idea there is that it each of the",
    "start": "962069",
    "end": "967199"
  },
  {
    "text": "results of the computations is tracking some data that is representing the inputs that contributed to that",
    "start": "967199",
    "end": "972899"
  },
  {
    "text": "computation now additionally it would also be nice to have the ability to",
    "start": "972899",
    "end": "978689"
  },
  {
    "text": "merge these so if I compute some partial result and I compute some partial result on another node I'd like to be able to",
    "start": "978689",
    "end": "984449"
  },
  {
    "text": "merge the results and so we could imagine you know that I have some device and I compute an aggregate over that",
    "start": "984449",
    "end": "990449"
  },
  {
    "text": "device maybe you know the average of all if I'm playing a game and I track a bunch of scores and and with those",
    "start": "990449",
    "end": "996179"
  },
  {
    "text": "scores I produce an average maybe I want to share that average with somebody else's average and combine it to create",
    "start": "996179",
    "end": "1001429"
  },
  {
    "text": "a new average right and so we want this idea of provenance so we know if two computations have are sharing some of",
    "start": "1001429",
    "end": "1007279"
  },
  {
    "text": "the data and we know what derive that data and we'd also like to have the ability to merge them right and so this",
    "start": "1007279",
    "end": "1012769"
  },
  {
    "text": "is kind of like the ideal world you know and and so it's trivial to do this if",
    "start": "1012769",
    "end": "1017809"
  },
  {
    "text": "you just store everything right and so that the challenge here is to make is to kind of try to make of this component is",
    "start": "1017809",
    "end": "1024438"
  },
  {
    "text": "to try to make this component efficient okay and here what I'm just showing what this D Prime and this D double prime",
    "start": "1024439",
    "end": "1030620"
  },
  {
    "text": "here is that we should be able to look at the results and kind of order them know some sort of relationship between them whatever that relationship may be",
    "start": "1030620",
    "end": "1038888"
  },
  {
    "text": "okay all right so uh that's kind of a pie in the sky idea imagining you know",
    "start": "1038949",
    "end": "1045470"
  },
  {
    "text": "what would make for a nice nice building blocks for building distributed applications that are easy and and very",
    "start": "1045470",
    "end": "1052190"
  },
  {
    "text": "nice to build correct that have these nice ordering guarantees and we don't have to worry about delays on the network or offline clients or things",
    "start": "1052190",
    "end": "1058940"
  },
  {
    "text": "getting partitioned okay and so what I'm going to do is talk about three three",
    "start": "1058940",
    "end": "1064220"
  },
  {
    "text": "kind of pieces of work here that a preliminary that we have and talk about kind of whether you being used in industry kind",
    "start": "1064220",
    "end": "1070880"
  },
  {
    "text": "of where they've seen adoption so far and then kind of make a vision for the future and appeal to people to challenge",
    "start": "1070880",
    "end": "1076640"
  },
  {
    "text": "the way they build systems and so the the first piece we're going to look at here is called conflict clear replicated",
    "start": "1076640",
    "end": "1082370"
  },
  {
    "text": "data types so again I am the the CR DT the the kind of CR DT talk of the conference I suppose and and what C or D",
    "start": "1082370",
    "end": "1090020"
  },
  {
    "text": "T's are are data structures that are designed for convergence for distribution and deterministic convergence and so we'll see an example",
    "start": "1090020",
    "end": "1097610"
  },
  {
    "text": "of what that means once we have these data types that bring us all these nice properties we need a way to combine",
    "start": "1097610",
    "end": "1104120"
  },
  {
    "text": "these into a programming abstraction that people can actually use that they can build and work with and kind of",
    "start": "1104120",
    "end": "1109610"
  },
  {
    "text": "operate with and finally we need a mechanism for scaling these computations",
    "start": "1109610",
    "end": "1115909"
  },
  {
    "text": "right and so we're not talking about networks of 30 nodes we're talking about networks that we're running applications",
    "start": "1115909",
    "end": "1121400"
  },
  {
    "text": "on that have 10,000 nodes and so these are the scale networks that were that we're currently targeting and so it's",
    "start": "1121400",
    "end": "1126919"
  },
  {
    "text": "not exactly trivial to build a system that can beckon scale like that in a single cluster okay and so kind of an",
    "start": "1126919",
    "end": "1134780"
  },
  {
    "text": "overview on C or D T's so Co duties kind of go back to 2011 there data types that",
    "start": "1134780",
    "end": "1140870"
  },
  {
    "text": "are so you know you would have in the same way that you have sequential data types and concurrent data types Co DTS",
    "start": "1140870",
    "end": "1146840"
  },
  {
    "text": "are distributed data types that come in a variety of flavors here and so we have things that look like sets multiple",
    "start": "1146840",
    "end": "1152690"
  },
  {
    "text": "different types of sets they have counters registers things that are called flags which are boolean 'z that",
    "start": "1152690",
    "end": "1158900"
  },
  {
    "text": "can only move in one direction and finally dictionaries so this is the recursive data type that can kind of",
    "start": "1158900",
    "end": "1164419"
  },
  {
    "text": "compose the others and what CRT T's do are they provide a property called what",
    "start": "1164419",
    "end": "1170240"
  },
  {
    "text": "we refer to as strong eventual consistency and that so means that if I have a CI DT and I distributed I make",
    "start": "1170240",
    "end": "1175460"
  },
  {
    "text": "three copies of a set and i--i play some events out of water I duplicate some of the events I reorder some of the events",
    "start": "1175460",
    "end": "1181610"
  },
  {
    "text": "no matter the ordering guarantee no matter the delivery of the messages and it doesn't matter if I see duplicates",
    "start": "1181610",
    "end": "1187580"
  },
  {
    "text": "all of these objects as long as they see the same set of events will have the same outcome state and this is a very",
    "start": "1187580",
    "end": "1192860"
  },
  {
    "text": "nice property when you have a distributed database that we were concurrent systems writing to and before",
    "start": "1192860",
    "end": "1198710"
  },
  {
    "text": "I show an example one just to give you an idea of where has been used in practice you know a league of the League of Legends chat",
    "start": "1198710",
    "end": "1204760"
  },
  {
    "text": "system from Riot Games uses CRD T's we've seen we've talked to a variety of other people that are using them for",
    "start": "1204760",
    "end": "1211360"
  },
  {
    "text": "instance opentable is using them and in some of their point-of-sale service systems the Danish healthcare service",
    "start": "1211360",
    "end": "1217420"
  },
  {
    "text": "the NHS in London so these are data structures that have been proven to be able to be used at scale",
    "start": "1217420",
    "end": "1223809"
  },
  {
    "text": "League of Legends especially the scale there is is pretty massive obviously familiar with the game and so to give",
    "start": "1223809",
    "end": "1230020"
  },
  {
    "text": "you an example of what this looks like and I apologize for it being so small it was much bigger over here we're going to",
    "start": "1230020",
    "end": "1235750"
  },
  {
    "text": "assume that we have three replicas here replicas a B and C now what we're going to do is we're going to model operations",
    "start": "1235750",
    "end": "1241390"
  },
  {
    "text": "on the set differently than we normally would so we're going to model the operations of the set as triples and so",
    "start": "1241390",
    "end": "1247090"
  },
  {
    "text": "this triple here is it's hard to see but it's going to be a triple which is the value one a set of unique operations",
    "start": "1247090",
    "end": "1254020"
  },
  {
    "text": "signifying additions into the set and a set of unique operations that represent removals and so here when I add one to",
    "start": "1254020",
    "end": "1260500"
  },
  {
    "text": "the set replica a will generate a unique identifier which we're calling lowercase a here and it will add it to the",
    "start": "1260500",
    "end": "1265750"
  },
  {
    "text": "additions so we'll say replica a at logical time lowercase a has added the",
    "start": "1265750",
    "end": "1271120"
  },
  {
    "text": "element 1 to the set and then it will propagate those results out to the network now if C concurrently adds one",
    "start": "1271120",
    "end": "1277990"
  },
  {
    "text": "to the set that's a different operation and so C will add one to the set with a unique identifier one with one and the",
    "start": "1277990",
    "end": "1284500"
  },
  {
    "text": "unique identifier C lowercase C to represent that and that you know really these need to be unique identifiers for",
    "start": "1284500",
    "end": "1291370"
  },
  {
    "text": "for all of the replicas I'm just using C to demonstrate to make it easier to to follow the diagram and so when C goes to",
    "start": "1291370",
    "end": "1298780"
  },
  {
    "text": "remove one from the set it can only remove the additions it's already seen added and so C has only ever seen one",
    "start": "1298780",
    "end": "1305590"
  },
  {
    "text": "added the set by C so C can only remove its own addition and so then it will perform this remove operation and",
    "start": "1305590",
    "end": "1311890"
  },
  {
    "text": "replicate and so finally once all the replicas see all the messages the merge part of the merge process here for these",
    "start": "1311890",
    "end": "1318460"
  },
  {
    "text": "data items is that we take a union of the the additions and we take a union of the removals and now that we know that",
    "start": "1318460",
    "end": "1324910"
  },
  {
    "text": "the add set is a strict superset of the removes that we know that one should",
    "start": "1324910",
    "end": "1330010"
  },
  {
    "text": "still be in the set now you might think well this is really complicated to think about the intuition is is rather simple so",
    "start": "1330010",
    "end": "1337580"
  },
  {
    "text": "this is a set that biases towards additions under concurrency but you've got to set the biases towards removals",
    "start": "1337580",
    "end": "1342860"
  },
  {
    "text": "and the intuition here is that the ad bias makes sense because normally you",
    "start": "1342860",
    "end": "1348440"
  },
  {
    "text": "don't add items to a set without without this when the element the elements are not on the set right that's kind of a",
    "start": "1348440",
    "end": "1354350"
  },
  {
    "text": "common programming technique and so there's a challenge here when building these data types that merge that you",
    "start": "1354350",
    "end": "1359600"
  },
  {
    "text": "have to find a distributed semantics that that closely approximates the",
    "start": "1359600",
    "end": "1365120"
  },
  {
    "text": "sequential semantics of a regular set that you would have in your programming language and so it's a challenge to figure out how to do that in a way where",
    "start": "1365120",
    "end": "1371810"
  },
  {
    "text": "it doesn't impose this massive burden on the programmer and so kind of the other thing here to notice is that you know",
    "start": "1371810",
    "end": "1377960"
  },
  {
    "text": "this is a kind of trivial example of building a CRE T but you can see that the garbage grows quite a bit it stores",
    "start": "1377960",
    "end": "1385220"
  },
  {
    "text": "every single update that's ever happened and so there are optimized representations of this that I could",
    "start": "1385220",
    "end": "1390740"
  },
  {
    "text": "have shown but it would have been much harder to follow and so once we have",
    "start": "1390740",
    "end": "1395840"
  },
  {
    "text": "these data items this allows us to replicate these things and currently modify them and merge them but the",
    "start": "1395840",
    "end": "1401390"
  },
  {
    "text": "challenge now is that a user can never make a programming decision based on the user external value the one in the set",
    "start": "1401390",
    "end": "1407030"
  },
  {
    "text": "because if it did it would violate this nice property of merge ability we have and so what we need to do is we need to",
    "start": "1407030",
    "end": "1413540"
  },
  {
    "text": "build a system that allows us to program with these objects where we think about programming against the external kind of",
    "start": "1413540",
    "end": "1419210"
  },
  {
    "text": "value like the one is in the set without actually programming with the internal representation and so we are working on",
    "start": "1419210",
    "end": "1426410"
  },
  {
    "text": "a system that's a that's a library right now for Erlang called a lattice processing and this is a declarative",
    "start": "1426410",
    "end": "1431960"
  },
  {
    "text": "functional programming model for sets only right now that makes the core data",
    "start": "1431960",
    "end": "1437990"
  },
  {
    "text": "abstraction kind of the lowest level object to deal with B these objects these CRT T's these mirja Ballabh jex",
    "start": "1437990",
    "end": "1443210"
  },
  {
    "text": "and because of this there's a challenge in ensuring that when I take a set and I",
    "start": "1443210",
    "end": "1448640"
  },
  {
    "text": "kind of you know map it or you know do a Cartesian product with another side or something like that there's a challenge",
    "start": "1448640",
    "end": "1454520"
  },
  {
    "text": "that ensures that we need to make that we need to make sure that all that metadata I showed you that's internally tracking this data structure to get that",
    "start": "1454520",
    "end": "1461150"
  },
  {
    "text": "convergence right we have to make sure that we transform that correctly and so that is a non-trivial task as we've as",
    "start": "1461150",
    "end": "1467540"
  },
  {
    "text": "we slowly learned and are continuing to prove is correct and so to give you kind of just an",
    "start": "1467540",
    "end": "1475130"
  },
  {
    "text": "example of what this might look like this is kind of like half Erlang half not to make it kind of readable for for",
    "start": "1475130",
    "end": "1481730"
  },
  {
    "text": "a slide and so here we might declare some set s1 and we might add three elements to it and then map the outputs",
    "start": "1481730",
    "end": "1488420"
  },
  {
    "text": "of s1 into another set s2 and so this would be like your normal functional map operation which would say every time I",
    "start": "1488420",
    "end": "1494570"
  },
  {
    "text": "change s1 those elements will go into s2 and this is a product as a distributed process that continues to do this over",
    "start": "1494570",
    "end": "1500870"
  },
  {
    "text": "time okay and so this is a work in progress that we're working on this part",
    "start": "1500870",
    "end": "1506720"
  },
  {
    "text": "of my PhD work now I've shown you that object before that one that if we go",
    "start": "1506720",
    "end": "1512630"
  },
  {
    "text": "back here that one that looks like this and you'd say wow there's there's quite a bit of information here this is quite a large object to disseminate on the",
    "start": "1512630",
    "end": "1519140"
  },
  {
    "text": "network and so our colleagues are along with us are working on trying to figure",
    "start": "1519140",
    "end": "1524330"
  },
  {
    "text": "out optimal ways to disseminate the state so that we don't have to ship around these entire objects and so our",
    "start": "1524330",
    "end": "1529730"
  },
  {
    "text": "colleagues in Portugal have come up with this notion of Delta base state dissemination and what this is going to",
    "start": "1529730",
    "end": "1536270"
  },
  {
    "text": "do is attempt to instead of send the entire object just send a minimal representation of the change because",
    "start": "1536270",
    "end": "1542960"
  },
  {
    "text": "that is going to be much easier to disseminate and these are referred to as",
    "start": "1542960",
    "end": "1548090"
  },
  {
    "text": "Delta state-based CRD T's and so the way the way Delta C IDT's work is that we",
    "start": "1548090",
    "end": "1554690"
  },
  {
    "text": "operate on the objects locally we make our changes locally we batch up a bunch of deltas or things that look like",
    "start": "1554690",
    "end": "1560030"
  },
  {
    "text": "differentials so similar to like a DIF might look an R sink or something like that and then we periodically broadcast",
    "start": "1560030",
    "end": "1566000"
  },
  {
    "text": "those out on the network to the other peers obviously this is problematic if",
    "start": "1566000",
    "end": "1572030"
  },
  {
    "text": "you have clients that go offline and never come back because your buffer things indefinitely so we have to kind of take practical measures to prune",
    "start": "1572030",
    "end": "1578090"
  },
  {
    "text": "things and and kind of evict clients out of this kind of delta synchronization process when when they're offline too",
    "start": "1578090",
    "end": "1585140"
  },
  {
    "text": "long and so we have to fall back to sending the whole data structure which is pretty common for anything that's",
    "start": "1585140",
    "end": "1590480"
  },
  {
    "text": "kind of doing mobile computing where somebody dropped their phone and never come back and so to kind of give an",
    "start": "1590480",
    "end": "1595820"
  },
  {
    "text": "intuition of how this works if we if we generate a vent here so if you have this green circle event",
    "start": "1595820",
    "end": "1601380"
  },
  {
    "text": "that gets generated and this blue circle event that gets generated we also store kind of a dictionary below which is the updates that we need to send on the",
    "start": "1601380",
    "end": "1607830"
  },
  {
    "text": "network these kind of get accumulated in in order and then when we go to perform",
    "start": "1607830",
    "end": "1613919"
  },
  {
    "text": "the synchronization we synchronize by shipping just the Delta buffer if we can unless that state needs to do full state",
    "start": "1613919",
    "end": "1620429"
  },
  {
    "text": "synchronization and then we prune the Delta buffer and we continue to make progress",
    "start": "1620429",
    "end": "1625730"
  },
  {
    "text": "so obviously this has some challenges as well because I can't store a log of",
    "start": "1627360",
    "end": "1632460"
  },
  {
    "text": "10,000 users I can't store a log of 10 to Delta buffers these buffers of updates for",
    "start": "1632460",
    "end": "1638100"
  },
  {
    "text": "10,000 clients and so we have to deal with the challenges of trying to figure out an efficient way to do the state",
    "start": "1638100",
    "end": "1646080"
  },
  {
    "text": "dissemination that we need to do without having to assume knowledge assume that",
    "start": "1646080",
    "end": "1651269"
  },
  {
    "text": "one node can know about everything that exists in the cluster and so this",
    "start": "1651269",
    "end": "1657570"
  },
  {
    "text": "requires kind of rethinking the way that you build a runtime system for a distributed language and so there's a",
    "start": "1657570",
    "end": "1662639"
  },
  {
    "text": "lot of historical work on trying to figure out how you can do something like this and and so what we've decided on so",
    "start": "1662639",
    "end": "1669059"
  },
  {
    "text": "far is that we want to build a dissemination mechanism into the runtime",
    "start": "1669059",
    "end": "1675029"
  },
  {
    "text": "system for shipping this kind of state about objects in the language or the model that's based on an epidemic",
    "start": "1675029",
    "end": "1680760"
  },
  {
    "text": "broadcast protocol and so these protocols are nice because they support high churn they support their extremely",
    "start": "1680760",
    "end": "1686519"
  },
  {
    "text": "fault tolerant and provide very strong delivery guarantees depending on kind of",
    "start": "1686519",
    "end": "1692309"
  },
  {
    "text": "how you how you implement and take advantage of the protocol and optimizations aside kind of the the",
    "start": "1692309",
    "end": "1699690"
  },
  {
    "text": "basic way this works is similar to like if you're familiar with the term gossip protocol is that you perform pairwise",
    "start": "1699690",
    "end": "1704820"
  },
  {
    "text": "synchronization of state with every client in the system so every time you make a change you kind of fan out and send it to a bunch of clients and then",
    "start": "1704820",
    "end": "1711120"
  },
  {
    "text": "you kind of pairwise do that until all clients see all the updates the",
    "start": "1711120",
    "end": "1716519"
  },
  {
    "text": "challenges is that to make these protocols extremely efficient and you know this is work that's been going on for for 20 years 30 years to make these",
    "start": "1716519",
    "end": "1723809"
  },
  {
    "text": "protocols extremely resilient and tolerant to churn failures these protocols can make very little",
    "start": "1723809",
    "end": "1730110"
  },
  {
    "text": "guarantees on message ordering and so this means that messages may arrive in any order you have to reason about which",
    "start": "1730110",
    "end": "1735990"
  },
  {
    "text": "ones came after which ones you have to potentially tag this with cause little information to figure out how to relate",
    "start": "1735990",
    "end": "1742140"
  },
  {
    "text": "these objects and so this pairs really well with the programming abstraction we built in with CRT tees themselves",
    "start": "1742140",
    "end": "1748560"
  },
  {
    "text": "because these objects are objects that again don't rely on message ordering to get",
    "start": "1748560",
    "end": "1753900"
  },
  {
    "text": "the correct result they're always going to merge regardless of the output of regardless of the message ordering and",
    "start": "1753900",
    "end": "1759800"
  },
  {
    "text": "so to scale this to our target number so our target number for the end of the year is 10,000 notes to begin moving",
    "start": "1759800",
    "end": "1766530"
  },
  {
    "text": "towards this target number what we need to do is start with kind of a membership overlay that doesn't store all of the",
    "start": "1766530",
    "end": "1772020"
  },
  {
    "text": "information in the cluster so not every not every node in the system needs to know about every other note but it does",
    "start": "1772020",
    "end": "1779250"
  },
  {
    "text": "need to guarantee that that what it does know about represents a connected graph so it does know about all it can deliver",
    "start": "1779250",
    "end": "1785550"
  },
  {
    "text": "messages to everybody in the cluster but it may not know about everybody in the cluster building on top of this we build",
    "start": "1785550",
    "end": "1792990"
  },
  {
    "text": "our broadcast trees which allow us to do very fast dissemination when there are no failures and we fall back to kind of",
    "start": "1792990",
    "end": "1798870"
  },
  {
    "text": "this peer to peer synchronization when failures do occur in the network and so for doing this in practice we use work",
    "start": "1798870",
    "end": "1804990"
  },
  {
    "text": "from our colleagues in Portugal the high power view protocol for membership and the plum tree protocol for broadcast and",
    "start": "1804990",
    "end": "1811310"
  },
  {
    "text": "so we build an overlay that kind of resembles something like this where we have a spanning tree through the network",
    "start": "1811310",
    "end": "1817710"
  },
  {
    "text": "and we have these kind of redundant paths that can be used for state that can be used for tree repair when a node",
    "start": "1817710",
    "end": "1823770"
  },
  {
    "text": "goes down in the system now each of these nodes in the system could be a completely transient node such as a",
    "start": "1823770",
    "end": "1829080"
  },
  {
    "text": "mobile phone or it could be something like a distributed hash table so this could also be backed by something that has a stronger",
    "start": "1829080",
    "end": "1834960"
  },
  {
    "text": "guarantee of fault tolerance if we need to make sure that data doesn't go away because in our system we have to deal",
    "start": "1834960",
    "end": "1840120"
  },
  {
    "text": "with the fact that we're dealing with data centers while also dealing with mobile devices mobile devices might get partitioned we don't care about",
    "start": "1840120",
    "end": "1845790"
  },
  {
    "text": "replication on mobile devices maybe for fault tolerance it all depends on the application and so this provides us a",
    "start": "1845790",
    "end": "1851130"
  },
  {
    "text": "flexible way to think about does different consistency criteria and so",
    "start": "1851130",
    "end": "1857150"
  },
  {
    "text": "what we do is are we kind of layer or work in between here so our application works it's below it sits",
    "start": "1857150",
    "end": "1864490"
  },
  {
    "text": "below the broadcast primitives and assumes that updates will be delivered off the network to our runtime and then",
    "start": "1864490",
    "end": "1871120"
  },
  {
    "text": "kind of disseminates through that network as well and so it kind of roughly resembles a diagram like this if",
    "start": "1871120",
    "end": "1876670"
  },
  {
    "text": "you think about how the networking architecture works and hopefully this will get us to the numbers that we're hoping to hit we'll find out soon okay",
    "start": "1876670",
    "end": "1884950"
  },
  {
    "text": "and so now they kind of just walked through an application scenario we're",
    "start": "1884950",
    "end": "1890950"
  },
  {
    "text": "gonna walk through this idea of an advertisement counter and so so our original work two years ago was working",
    "start": "1890950",
    "end": "1897880"
  },
  {
    "text": "with Rovio entertainment on Angry Birds but then we slowly started realizing",
    "start": "1897880",
    "end": "1903430"
  },
  {
    "text": "that a lot of our work is generally is is more applicable to any kind of edge edge computing scenario not just mobile",
    "start": "1903430",
    "end": "1909790"
  },
  {
    "text": "right and we can think of mobile is just kind of a restricted case or maybe a more general case of some of these",
    "start": "1909790",
    "end": "1916720"
  },
  {
    "text": "application designs and so for this advertisement counter example we're",
    "start": "1916720",
    "end": "1921850"
  },
  {
    "text": "going to assume that we have a kind of mobile advertiser that's going to display ads on something like an iPhone",
    "start": "1921850",
    "end": "1928890"
  },
  {
    "text": "in our in our use case that we have from Rovio they they want advertisements to",
    "start": "1928890",
    "end": "1935320"
  },
  {
    "text": "be displayed a minimum number of time times that it's a guaranteed minimum number of times they do this through contractual obligation I guess and and",
    "start": "1935320",
    "end": "1942970"
  },
  {
    "text": "so they don't care if we over count and so that's a very important part about this application design and we're gonna",
    "start": "1942970",
    "end": "1949870"
  },
  {
    "text": "have clients go offline so clients will have limited connectivity we still need to record the ad impressions at the clients offline and we need to",
    "start": "1949870",
    "end": "1956380"
  },
  {
    "text": "periodically synchronize these where we don't lose any of the ad impressions so",
    "start": "1956380",
    "end": "1961450"
  },
  {
    "text": "just to kind of reframe that and in in in different words it's a we want to guarantee that we have a minimum number",
    "start": "1961450",
    "end": "1967300"
  },
  {
    "text": "of impressions but we don't care if we over count and so the data flow graph for our application looks something",
    "start": "1967300",
    "end": "1972850"
  },
  {
    "text": "roughly like this and so we're just going to take a bunch of kind of ads which we represent by CRD",
    "start": "1972850",
    "end": "1978580"
  },
  {
    "text": "t counters and we kind of grouped them and just combine them with this notion of contracts to make the example a",
    "start": "1978580",
    "end": "1984490"
  },
  {
    "text": "little bit more interesting that says that only certain ads can be displayed at certain times let's say I mean I only",
    "start": "1984490",
    "end": "1990610"
  },
  {
    "text": "certain number of ads can be displayed like contractually like a different parts of the or something like that and then what we",
    "start": "1990610",
    "end": "1996910"
  },
  {
    "text": "want to do is just find things I have valid contracts and so you know we can kind of Union things and and kind of compute the Cartesian product and then",
    "start": "1996910",
    "end": "2003180"
  },
  {
    "text": "take the filter which is equivalent to just thinking about taking a lot of our ads in a sequel table and doing a join",
    "start": "2003180",
    "end": "2008970"
  },
  {
    "text": "with a bunch of contracts in a sequel table right and so this is how you would represent that in a functional dataflow",
    "start": "2008970",
    "end": "2014630"
  },
  {
    "text": "kind of graph and what we want to do is we want to send all of these copic we",
    "start": "2014630",
    "end": "2020610"
  },
  {
    "text": "want to take copies of these counters and put them on the devices so that when the device to send ads they increment",
    "start": "2020610",
    "end": "2025680"
  },
  {
    "text": "these counters so every time I display an ad I increment the counter display an ad increment the counter and then I",
    "start": "2025680",
    "end": "2031200"
  },
  {
    "text": "periodically send those counters back to the server for instance and merge that at the server and so every time a client",
    "start": "2031200",
    "end": "2038280"
  },
  {
    "text": "synchronizes with the server the server is going to advance and it's kind of view of the global number of counts that",
    "start": "2038280",
    "end": "2043410"
  },
  {
    "text": "have been done in the network and then the server is going to disable ads and we have a way of representing kind of",
    "start": "2043410",
    "end": "2049679"
  },
  {
    "text": "removals of ads in a way where it looks like kind of a growth in states so that",
    "start": "2049680",
    "end": "2054720"
  },
  {
    "text": "program stays kind of moving forward in in logical time and then periodically clients can just synchronize to get the",
    "start": "2054720",
    "end": "2061350"
  },
  {
    "text": "updated count list right and so in this application design there's an important",
    "start": "2061350",
    "end": "2068070"
  },
  {
    "text": "kind of notion here that everything is it this is modeled monotonically and and",
    "start": "2068070",
    "end": "2073320"
  },
  {
    "text": "what I mean by that is just kind of we're always accumulating information that allow us to know if we see",
    "start": "2073320",
    "end": "2078600"
  },
  {
    "text": "something in the past it's all I'm saying what's nice about the application",
    "start": "2078600",
    "end": "2084000"
  },
  {
    "text": "design is it supports arbitrary distribution so any of those nodes in that data flow graph I showed you before",
    "start": "2084000",
    "end": "2089520"
  },
  {
    "text": "could be running on any node in the network I could run this computation split across 50 different nodes it wouldn't matter because I don't have to",
    "start": "2089520",
    "end": "2096240"
  },
  {
    "text": "worry about network anomaly is causing the program to produce an incorrect result and finally a notion of",
    "start": "2096240",
    "end": "2105120"
  },
  {
    "text": "divergence so divergence is going to be a factor of synchronization so how often the clients synchronized with the server",
    "start": "2105120",
    "end": "2110640"
  },
  {
    "text": "will let us know how far we're going to drift off of the target number and so you can kind of see similar realizations",
    "start": "2110640",
    "end": "2118140"
  },
  {
    "text": "in some of the Google data flow work because they kind of have this same the same notion of saying well we don't know when the updates are going to stop",
    "start": "2118140",
    "end": "2123990"
  },
  {
    "text": "coming in so we need to do some sort of incremental processing and handle Avensis things are happening and so we think of just kind of our server notion",
    "start": "2123990",
    "end": "2130710"
  },
  {
    "text": "is getting these kind of batches as of events represented as mutable state rather than a stream of updates where we",
    "start": "2130710",
    "end": "2136590"
  },
  {
    "text": "just keep sending things all the time and that's kind of the - kind of opposite sides of the spectrum so this",
    "start": "2136590",
    "end": "2144600"
  },
  {
    "text": "kind of graph just shows that you know our server kind of interacts with all of",
    "start": "2144600",
    "end": "2149610"
  },
  {
    "text": "the clients in the same way the server does peer to peer synchronization just like something just like everything else",
    "start": "2149610",
    "end": "2154800"
  },
  {
    "text": "in this model we don't needs kind of a special API or anything like that a server is just a client that does some",
    "start": "2154800",
    "end": "2161160"
  },
  {
    "text": "additional processing that the other clients don't do and so the idea here is",
    "start": "2161160",
    "end": "2166830"
  },
  {
    "text": "that servers are kind of Pierce they might have additional code maybe some",
    "start": "2166830",
    "end": "2173280"
  },
  {
    "text": "additional security stuff to kind of perform additional actions but any node can make modifications to the advertisement counters and kind of ship",
    "start": "2173280",
    "end": "2179730"
  },
  {
    "text": "this state around and cuz the second notion here is that really when we talk",
    "start": "2179730",
    "end": "2184890"
  },
  {
    "text": "about servers what we're talking about is we need a place to do something exactly once we need a place to kind of synchronize and do something exactly",
    "start": "2184890",
    "end": "2190770"
  },
  {
    "text": "once and and this is the notion of well find all these advertisement counters and eventually once I hit some target",
    "start": "2190770",
    "end": "2196440"
  },
  {
    "text": "number I need to charge a credit card I can't let everybody charge the credit card I need to synchronize and know that",
    "start": "2196440",
    "end": "2201960"
  },
  {
    "text": "I did that credit card charging at one place and I did once and so we're trying to think about computations where where",
    "start": "2201960",
    "end": "2207510"
  },
  {
    "text": "things need to kind of happen once and where the rest of the system can kind of bend to the way the to bend to the",
    "start": "2207510",
    "end": "2212940"
  },
  {
    "text": "requirements of the model and so what I what I'm what I'm trying to get across I",
    "start": "2212940",
    "end": "2218370"
  },
  {
    "text": "guess you know kind of the general overall theme of this talk and kind of all of the crazy ideas that I've",
    "start": "2218370",
    "end": "2224400"
  },
  {
    "text": "proposed is the head or you know tried to convince you of is the idea that",
    "start": "2224400",
    "end": "2230160"
  },
  {
    "text": "we're building up from zero synchronization we're adding synchronization when we need it rather than trying to build a system that maybe",
    "start": "2230160",
    "end": "2236250"
  },
  {
    "text": "centers around something like zookeeper and then say well how can i how can I pull this apart how can I make this system faster let me find the places",
    "start": "2236250",
    "end": "2241740"
  },
  {
    "text": "that I'm synchronizing that I don't need to and so we want to kind of take this bottom-up approach rather than this",
    "start": "2241740",
    "end": "2247140"
  },
  {
    "text": "top-down approach which is kind of using these familiar tools and then trying to scale the infrastructure once we've built around kind of a common core okay",
    "start": "2247140",
    "end": "2256110"
  },
  {
    "text": "and so to kind of just like slowly wrap up here there are a bunch of",
    "start": "2256110",
    "end": "2262410"
  },
  {
    "text": "challenges going ahead right so I a lot of the ideas in here sound like they're silver bullets you know they sound like",
    "start": "2262410",
    "end": "2267600"
  },
  {
    "text": "they're amazing the the problem here is that some of the stuff is extremely",
    "start": "2267600",
    "end": "2272730"
  },
  {
    "text": "expensive to do still and so the first one is is a notion of state explosion and so if you if you're familiar with",
    "start": "2272730",
    "end": "2280650"
  },
  {
    "text": "the kind of the functional programming fold operation fold is great because it blows if you're building a language from",
    "start": "2280650",
    "end": "2286290"
  },
  {
    "text": "the ground up full blows open the doors on what you can express in a programming language and you can express a lot of",
    "start": "2286290",
    "end": "2292500"
  },
  {
    "text": "things in terms of fold and so if we think of having a set and then we have a",
    "start": "2292500",
    "end": "2297510"
  },
  {
    "text": "counter and what I want to do is just run a trivial fold over this set assuming you know we pick an order to",
    "start": "2297510",
    "end": "2303030"
  },
  {
    "text": "fold so it's assumed lexa graphical for the time being then if I'm going to produce a counter that just represents",
    "start": "2303030",
    "end": "2309450"
  },
  {
    "text": "just the number of items in the set this gets really expensive to store this provenance information it gets so",
    "start": "2309450",
    "end": "2316680"
  },
  {
    "text": "expensive that storing the count actually ends up being more expensive than storing the set itself and just querying for the count and so the",
    "start": "2316680",
    "end": "2323370"
  },
  {
    "text": "challenge here is how can we find most the most efficient how can we figure out a minimum bound for some of this a lower",
    "start": "2323370",
    "end": "2329430"
  },
  {
    "text": "bound for figuring out how to model some of this stuff where we don't lose information and so before we grow the",
    "start": "2329430",
    "end": "2336270"
  },
  {
    "text": "expressiveness of our language and our programming model it's kind of a you know it's it's growing into a language it's a model now before we kind of",
    "start": "2336270",
    "end": "2343140"
  },
  {
    "text": "figure out how to add more operators to the language and get nice syntax and do all this stuff what we really need to do",
    "start": "2343140",
    "end": "2348930"
  },
  {
    "text": "is figure out some of these challenges with state explosion additionally security is a huge area that we have",
    "start": "2348930",
    "end": "2355890"
  },
  {
    "text": "some colleagues looking at but it's really challenging you can imagine that if we have this transitive state dissemination that I might send data to",
    "start": "2355890",
    "end": "2363030"
  },
  {
    "text": "some node that shouldn't get it because I want it to go somewhere else and so we have some preliminary work",
    "start": "2363030",
    "end": "2368610"
  },
  {
    "text": "that tries to analyze programs and figure out through information flow control like can we find the most",
    "start": "2368610",
    "end": "2374730"
  },
  {
    "text": "optimal distribution path ensuring that you never ever use a node that should",
    "start": "2374730",
    "end": "2379890"
  },
  {
    "text": "not get some information for transit and so this is similar to you some of this different this decentralized IFC stuff",
    "start": "2379890",
    "end": "2386310"
  },
  {
    "text": "that Andrew Meyers has worked on at Cornell University and finally kind of the way a lot of this stuff",
    "start": "2386310",
    "end": "2393119"
  },
  {
    "text": "works is that oh my god this is I got cut off but this this is supposed to say",
    "start": "2393119",
    "end": "2399779"
  },
  {
    "text": "how restricted is programmable all the operations must be associative commutative an idempotent away a lot of this stuff works is that",
    "start": "2399779",
    "end": "2405599"
  },
  {
    "text": "we form a lot of this around semi lattices and kind of order theory and and it's extremely challenging to do",
    "start": "2405599",
    "end": "2413640"
  },
  {
    "text": "certain operations when you need everything to be associative commutative an item potent for instance how do you",
    "start": "2413640",
    "end": "2418829"
  },
  {
    "text": "do something like a division right and so uh things like averages choose end up being really problematic and so we have",
    "start": "2418829",
    "end": "2425640"
  },
  {
    "text": "to figure out a way to kind of identify where the trade-offs are and kind of",
    "start": "2425640",
    "end": "2430769"
  },
  {
    "text": "figure out clever ways of modeling some of these operations and and provide kind of explicit ways for the programmer to",
    "start": "2430769",
    "end": "2435869"
  },
  {
    "text": "say yes I know I'm giving up the safety of this model but I need to do this operation and so charging a credit card obviously is not associative commutative",
    "start": "2435869",
    "end": "2442319"
  },
  {
    "text": "an idempotent for the most case for the most part right and so you know we've",
    "start": "2442319",
    "end": "2447359"
  },
  {
    "text": "done a bunch of work and you know we're continuing to do work this is a this is kind of the the major work behind my PhD",
    "start": "2447359",
    "end": "2453210"
  },
  {
    "text": "thesis and and what I want you to kind of take away again there's another slide",
    "start": "2453210",
    "end": "2458609"
  },
  {
    "text": "cut off for the next one what I want you to take away is that I presented three independently successful techniques",
    "start": "2458609",
    "end": "2464450"
  },
  {
    "text": "these at techniques have been proven right so we know that the notion of Providence has been in turn",
    "start": "2464450",
    "end": "2469559"
  },
  {
    "text": "widely successful in things like spark I mean that's half of the reason spark is so successful that's one of the two main",
    "start": "2469559",
    "end": "2475619"
  },
  {
    "text": "kind of contributions of spark we know that see our duties are are very useful",
    "start": "2475619",
    "end": "2481890"
  },
  {
    "text": "in practice and we've seen them successful we've seen massive success at places like the London national hall in",
    "start": "2481890",
    "end": "2487259"
  },
  {
    "text": "the UK's National Health Service services and the Danish health care service and Riot Games where they",
    "start": "2487259",
    "end": "2492390"
  },
  {
    "text": "wouldn't have been able to build their applications without CRT T's and finally around the gossip protocols these",
    "start": "2492390",
    "end": "2498180"
  },
  {
    "text": "protocols have also been extremely successful these protocols underlie systems like Cassandra's metadata",
    "start": "2498180",
    "end": "2504630"
  },
  {
    "text": "dissemination and Reax metadata dissemination so we've seen these things work in practice at the scale of 100 to",
    "start": "2504630",
    "end": "2510509"
  },
  {
    "text": "200 nodes and so the challenges is the challenging and the the challenging part and the idea and this is the slide that",
    "start": "2510509",
    "end": "2516989"
  },
  {
    "text": "unfortunately got cut off because of the sixteen by nine is that can we take these three independently kind of",
    "start": "2516989",
    "end": "2523880"
  },
  {
    "text": "successful techniques that have been deployed in industry and used in practice and can we combine them into kind of a cohesive",
    "start": "2523880",
    "end": "2530120"
  },
  {
    "text": "programming environment for the end-user so that you have this nice library that you could use in your java application",
    "start": "2530120",
    "end": "2535440"
  },
  {
    "text": "or your Scala application that allows you to say this one part of my program I want it to like be able to work offline",
    "start": "2535440",
    "end": "2540630"
  },
  {
    "text": "and scale really well but then you know then I have to do the rest of the stuff in like kind of the Java world of the",
    "start": "2540630",
    "end": "2546270"
  },
  {
    "text": "Scala world and so we can think of this as kind of kind of this like kind of monadic looking look at a distributed",
    "start": "2546270",
    "end": "2552450"
  },
  {
    "text": "programming I suppose and so that's it thank you very much you know I'd be nowhere without the help of all these",
    "start": "2552450",
    "end": "2558540"
  },
  {
    "text": "fine people in Europe so so I thank them greatly for their support and so thank",
    "start": "2558540",
    "end": "2563910"
  },
  {
    "text": "you very much for coming",
    "start": "2563910",
    "end": "2566569"
  }
]