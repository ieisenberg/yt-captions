[
  {
    "text": "yeah so my my day job right now is to uh is to drive the evolution of the language itself forward um so um but at",
    "start": "5160",
    "end": "12120"
  },
  {
    "text": "the same time I get to dabble in lots of things so um you can blame me for much more than than C itself so um even",
    "start": "12120",
    "end": "19760"
  },
  {
    "text": "though it's dark in here um I want to ask before we get started how many people were in George's",
    "start": "19760",
    "end": "26199"
  },
  {
    "text": "talk oh that's good yeah good we have some you get to compare and contrast great um and so there'll be a survey",
    "start": "26199",
    "end": "33719"
  },
  {
    "text": "when you exit the door which language are you going to do your next project in after this double session here I'm just",
    "start": "33719",
    "end": "39000"
  },
  {
    "text": "joking so um uh also uh how many people in here are net",
    "start": "39000",
    "end": "46199"
  },
  {
    "text": "developers okay that's a lot but that's thankfully not all of you because I'm I'm kind of hoping that we can pick up a",
    "start": "46199",
    "end": "51840"
  },
  {
    "text": "few more so uh so great um I am going to um people have a lot of we've",
    "start": "51840",
    "end": "58640"
  },
  {
    "text": "essentially been the the butt a lot of jokes um um for a long time George was pretty gentle in his talk compared to",
    "start": "58640",
    "end": "65478"
  },
  {
    "text": "what I thought he might um but uh it's it's been uh we don't like being um the",
    "start": "65479",
    "end": "72640"
  },
  {
    "text": "center of ridicule so so we kind of we're kind of thinking about changing a lot of the perceptions um or working on",
    "start": "72640",
    "end": "79479"
  },
  {
    "text": "um changing a lot of perceptions around uh C and the net ecosystem um not",
    "start": "79479",
    "end": "85320"
  },
  {
    "text": "by marketing measures or speaking about things differently but just changing a lot of the stuff that really did suck",
    "start": "85320",
    "end": "91240"
  },
  {
    "text": "okay so um I'm going to I'm going to tell you about uh some of the uh a bunch",
    "start": "91240",
    "end": "97200"
  },
  {
    "text": "of the things that we changing and uh then I'm going to sort of Home in on and double click on some of the things that",
    "start": "97200",
    "end": "102759"
  },
  {
    "text": "I'm deeply involved in out of that out of that list and I'm going to I'm going to do a few demos as well because at",
    "start": "102759",
    "end": "108040"
  },
  {
    "text": "Microsoft we like to do live demos and kind of Crash and Burn in front of everyone um it's happened once it can",
    "start": "108040",
    "end": "113640"
  },
  {
    "text": "probably happen again on this trip um so um uh and we're a little short for time",
    "start": "113640",
    "end": "119000"
  },
  {
    "text": "I'm going to demo multiple things at once but I hope I hope you'll be fine with that you're pretty smart people so uh you should be able to follow um I'm",
    "start": "119000",
    "end": "125960"
  },
  {
    "text": "not going to I'm going to try to talk about this thing in a way that is um it",
    "start": "125960",
    "end": "132520"
  },
  {
    "text": "should be accessible for people who don't know cart but I may be familiar with Java something like that if there's a thing or two where I get to inside or",
    "start": "132520",
    "end": "139040"
  },
  {
    "text": "you just shout or ask or something like that I really don't mean this to be for just. net developers but hopefully",
    "start": "139040",
    "end": "144360"
  },
  {
    "text": "hopefully all the net people in the room still find this interesting too okay so",
    "start": "144360",
    "end": "149400"
  },
  {
    "text": "um we're really trying to change our tune here and and that's sort of up and down the stack so first of all um you",
    "start": "149400",
    "end": "156280"
  },
  {
    "text": "probably think that or many of you probably think that you can only use C on Windows and that's because the reason",
    "start": "156280",
    "end": "162800"
  },
  {
    "text": "you think it is that it's basically true um there there they have there are",
    "start": "162800",
    "end": "168360"
  },
  {
    "text": "implementations of csharp and.net for uh for other platforms but we didn't make them and um and uh people have had sort",
    "start": "168360",
    "end": "176200"
  },
  {
    "text": "of varing su success with that it's certainly not being supported by us in the way that it this now um we're really",
    "start": "176200",
    "end": "182280"
  },
  {
    "text": "um we're really giving up on that we want C to run everywhere so we're reporting. net um to we're doing it",
    "start": "182280",
    "end": "188159"
  },
  {
    "text": "ourselves supporting it to um what we call the core CLR core.net to um to Mac",
    "start": "188159",
    "end": "194159"
  },
  {
    "text": "and to Linux and we're doing it in an open source way so um we can get more ports over time to different uh",
    "start": "194159",
    "end": "199760"
  },
  {
    "text": "platforms and so on um we really want to be wherever you are right it shouldn't choice of C shouldn't be one that's",
    "start": "199760",
    "end": "206040"
  },
  {
    "text": "constrained to being just on one platform um and hey a lot of those Linux",
    "start": "206040",
    "end": "211400"
  },
  {
    "text": "uh VMS run on Asher that's fine with us you know we we still get the kaching so uh so uh we shouldn't be so",
    "start": "211400",
    "end": "217120"
  },
  {
    "text": "narrow-minded about this um you also probably you also probably",
    "start": "217120",
    "end": "223599"
  },
  {
    "text": "think that if you want to write in C you probably need to fire up visual studio and if you fire up visual studio because",
    "start": "223599",
    "end": "230239"
  },
  {
    "text": "you happen to be on a PC physically or running it on a Mac um as a VM you",
    "start": "230239",
    "end": "236599"
  },
  {
    "text": "should get a great experience and the things I will show today will be Visual Studio however we we don't want to be",
    "start": "236599",
    "end": "243959"
  },
  {
    "text": "just focused on providing a good tooling experience in Visual Studio we want to build our things in such a way that it's",
    "start": "243959",
    "end": "249200"
  },
  {
    "text": "easy to write great great tooling for C and for Visual Basic in um in your",
    "start": "249200",
    "end": "255280"
  },
  {
    "text": "editor of choice again so it's another one of those come to where you are rather than um than make you go to a",
    "start": "255280",
    "end": "261840"
  },
  {
    "text": "particular place to use that stuff right so um and how specifically we're doing",
    "start": "261840",
    "end": "267800"
  },
  {
    "text": "this um I'll get into that a little more later in the talk um another thing which",
    "start": "267800",
    "end": "272960"
  },
  {
    "text": "relates to something that um George talked about as well with um with the modules like he mentioned D hell um we",
    "start": "272960",
    "end": "280240"
  },
  {
    "text": "are also moving with the core CLR to a model where you don't have to rely on",
    "start": "280240",
    "end": "285960"
  },
  {
    "text": "net as a system component that you kind of pull on that's installed somewhere centrally on your machine right you can",
    "start": "285960",
    "end": "291880"
  },
  {
    "text": "you can uh deploy a selfcontained app um that has the libraries that you rely on",
    "start": "291880",
    "end": "297440"
  },
  {
    "text": "and nothing else and and you know doesn't behave differently because you happen to be um uh to be in a different",
    "start": "297440",
    "end": "304280"
  },
  {
    "text": "environment so um so making donet more modu is something that just just as with",
    "start": "304280",
    "end": "310759"
  },
  {
    "text": "Java that we you know is long overdue and um and so we're working actively to",
    "start": "310759",
    "end": "316080"
  },
  {
    "text": "do that so you just pull in what we call new get packages as as you need them and you deploy and everything stays",
    "start": "316080",
    "end": "323720"
  },
  {
    "text": "together um we're also working pretty hard on facilitating uh compilation to",
    "start": "323720",
    "end": "330919"
  },
  {
    "text": "uh Native codee right so um you can continue to run on a VM we have the the",
    "start": "330919",
    "end": "336360"
  },
  {
    "text": "good old desk Windows desktop VM runs better than ever um and the coreclr is",
    "start": "336360",
    "end": "343160"
  },
  {
    "text": "also a VM that is uh that's ported to different platforms but if you want to compile down to Native we want to",
    "start": "343160",
    "end": "348680"
  },
  {
    "text": "support that as well and so we have a lot of work right now the only the only compil to Native story that's uh that's",
    "start": "348680",
    "end": "355840"
  },
  {
    "text": "fully released and and in RTM is um is when you write uh Universal Windows apps",
    "start": "355840",
    "end": "361080"
  },
  {
    "text": "but that's a technology that we we are working on spreading out to more and more platforms and more and more",
    "start": "361080",
    "end": "366199"
  },
  {
    "text": "situations uh so you can get rid of that startup lag and and the various performance problems uh around running",
    "start": "366199",
    "end": "372759"
  },
  {
    "text": "on a VM if if you so desire um and um uh",
    "start": "372759",
    "end": "379000"
  },
  {
    "text": "one thing that I've been deeply involved in is the so-called rosling project which I'll talk a lot more about but the main thrust of it really is that we've",
    "start": "379000",
    "end": "386280"
  },
  {
    "text": "gone from taking all that all that understanding of C code that we do in",
    "start": "386280",
    "end": "392520"
  },
  {
    "text": "our compiler that's been locked up just inside this blackbox thing that you invoke um that produces source code out",
    "start": "392520",
    "end": "399880"
  },
  {
    "text": "or that takes source code and produces executable code out the other end and we we've taken that and open it up so that",
    "start": "399880",
    "end": "406720"
  },
  {
    "text": "it's an API that everybody can use for their source code understanding and that's something I'll I'll drill into a",
    "start": "406720",
    "end": "412160"
  },
  {
    "text": "lot more in this talk finally I think and this may be the biggest shift that you're seeing and",
    "start": "412160",
    "end": "417879"
  },
  {
    "text": "this is sort of a part of a trend across Microsoft um is we're we're taking our",
    "start": "417879",
    "end": "423960"
  },
  {
    "text": "assets from being proprietary and something that we want to try to milk for profit um and just throwing it open",
    "start": "423960",
    "end": "431720"
  },
  {
    "text": "source across the uh across the board and when we say no open source we don't mean there's this window over here where",
    "start": "431720",
    "end": "439000"
  },
  {
    "text": "we exhibit our code if you want to have a look at it right we mean that we work in our GitHub re repo just like everyone",
    "start": "439000",
    "end": "445120"
  },
  {
    "text": "else we take uh plenty of um of external contributions to our s source code",
    "start": "445120",
    "end": "450319"
  },
  {
    "text": "whenever somebody wants to um to use C from their editor or um or Port the the",
    "start": "450319",
    "end": "458240"
  },
  {
    "text": "CLR to their platform uh they they just um do a pull request like everyone on on",
    "start": "458240",
    "end": "463520"
  },
  {
    "text": "the team does and that's really starting to ramp up um the the first Mac Port of the core CLR was done by someone",
    "start": "463520",
    "end": "469960"
  },
  {
    "text": "external to Microsoft for instance so uh so we want to be open sourc in a big way that we are actually building a",
    "start": "469960",
    "end": "476159"
  },
  {
    "text": "community and sharing uh the responsibility for uh the direction of of the whole the whole stack of stuff",
    "start": "476159",
    "end": "483000"
  },
  {
    "text": "okay so um don't just believe me stay here and watch some of it um Let me show some of",
    "start": "483000",
    "end": "490039"
  },
  {
    "text": "the details of it and um and also go uh go have a look around um um and uh and",
    "start": "490039",
    "end": "495759"
  },
  {
    "text": "see what you can do with donet today um so I'm going to drill into this project Roslin that is really about",
    "start": "495759",
    "end": "503479"
  },
  {
    "text": "um about the compilers and and um and tool support uh to begin with so um um",
    "start": "503479",
    "end": "510800"
  },
  {
    "text": "we had this idea that we should uh we should take our C and VB compilers that that that people know and love and trust",
    "start": "510800",
    "end": "517560"
  },
  {
    "text": "and that are fast and and uh reliable and we should just rewrite them from scratch so that's a great idea right um",
    "start": "517560",
    "end": "525040"
  },
  {
    "text": "that's that's the kind of thing that can make managers uh choke on their coffee but um the reasons why we were we were",
    "start": "525040",
    "end": "531880"
  },
  {
    "text": "entertaining this idea and I'm talking back in like 2008 or 7 or something like that that we really that these ideas",
    "start": "531880",
    "end": "537519"
  },
  {
    "text": "really started to ferment um on our team the reason was that we have we had a bunch of really big problems we had um",
    "start": "537519",
    "end": "544160"
  },
  {
    "text": "C++ source code that wasn't well architected it's a stuff that you kind of throw together for a V1 and you fully",
    "start": "544160",
    "end": "549519"
  },
  {
    "text": "intent to clean it up later but instead you just keep piling stuff onto it um so",
    "start": "549519",
    "end": "555480"
  },
  {
    "text": "um at this point in time we had the source code that we were essentially scared of and um every change was kind",
    "start": "555480",
    "end": "562800"
  },
  {
    "text": "of a was a risky undertaking right so we couldn't it was hard whenever we wanted to evolve our languages and whenever we",
    "start": "562800",
    "end": "569040"
  },
  {
    "text": "wanted to to evolve our tooling on top of this Source base um it was out of the",
    "start": "569040",
    "end": "574160"
  },
  {
    "text": "question to use it in any way to support C in other idees or for other kinds of",
    "start": "574160",
    "end": "580000"
  },
  {
    "text": "tools that rely on language and and there are many kinds of those and I can list those out in a bit um just getting",
    "start": "580000",
    "end": "587720"
  },
  {
    "text": "um the the the compiler and the ID to and what other people built for",
    "start": "587720",
    "end": "592760"
  },
  {
    "text": "themselves on top of the language to agree on what the language actually meant um was the problem and we were all",
    "start": "592760",
    "end": "598519"
  },
  {
    "text": "C++ program rammers right so we didn't get to use C we were building something",
    "start": "598519",
    "end": "603880"
  },
  {
    "text": "but we weren't using it it's the it's your unique opportunity when you're implementing a language is that you can",
    "start": "603880",
    "end": "609519"
  },
  {
    "text": "use your product to do to build it to build your product and we were missing out on that opportunity that's just",
    "start": "609519",
    "end": "614959"
  },
  {
    "text": "stupid right so we had really really good motiv motivations now the challenge here is so I'm just going to speak um uh",
    "start": "614959",
    "end": "624120"
  },
  {
    "text": "a little bit about the it's going to make sense to you I'm going to speak a little bit about about",
    "start": "624120",
    "end": "629440"
  },
  {
    "text": "the challenges we we faced implementing why why do you care you'll see uh in a minute why it matters to you as well um",
    "start": "629440",
    "end": "635680"
  },
  {
    "text": "there sort of a traditional dichotomy between compilers and editors or idees around how they Implement uh the way",
    "start": "635680",
    "end": "643160"
  },
  {
    "text": "they understand a language okay if you're a compiler you're you're a batch",
    "start": "643160",
    "end": "648320"
  },
  {
    "text": "you do a batch operation that's optimized for throughput um you focus on correctness you'll only compile code",
    "start": "648320",
    "end": "653760"
  },
  {
    "text": "that's completely correct um and prevent errors from coming through um and you",
    "start": "653760",
    "end": "659760"
  },
  {
    "text": "sort of only relate to source code that somebody wrote already okay so you're kind of reactive whereas in an in a tool",
    "start": "659760",
    "end": "665959"
  },
  {
    "text": "you want to be incremental uh because the code changes all the time uh the the measure of",
    "start": "665959",
    "end": "672880"
  },
  {
    "text": "efficiency is is a different one it's about responsiveness it's about whenever somebody uh hits a key whenever they",
    "start": "672880",
    "end": "680480"
  },
  {
    "text": "press the m key or whatever about immediately being live and responding to what they do right they hit dot",
    "start": "680480",
    "end": "686279"
  },
  {
    "text": "something immediately happens so responsiveness is it's a very different performance measure from throughput um",
    "start": "686279",
    "end": "692399"
  },
  {
    "text": "error tolerance obviously 97% of the time that you are editing your code isn't correct right you're you're in the",
    "start": "692399",
    "end": "698000"
  },
  {
    "text": "middle of building it so obviously it isn't so you have to be really tolerant um to all kinds of things being half",
    "start": "698000",
    "end": "704160"
  },
  {
    "text": "done or being a little off um your your point really is to enable the programmer",
    "start": "704160",
    "end": "710240"
  },
  {
    "text": "enable them to um to navigate and create and explore um rather than prevent them",
    "start": "710240",
    "end": "717320"
  },
  {
    "text": "from doing something wrong and and so in order to achieve that you want to",
    "start": "717320",
    "end": "722440"
  },
  {
    "text": "essentially be predictive you want to say what are they likely to do next and then facilitate that so that the develop",
    "start": "722440",
    "end": "728720"
  },
  {
    "text": "can be as productive as possible so there are all these kinds of reasons why language understanding in these two",
    "start": "728720",
    "end": "734000"
  },
  {
    "text": "worlds is why that is very different right nevertheless um we have gone",
    "start": "734000",
    "end": "739800"
  },
  {
    "text": "Against the Grain here and uh essentially embarked on a project to build those two uh into one thing and",
    "start": "739800",
    "end": "746000"
  },
  {
    "text": "part of the reason is that there are so many other language scenarios that are increasingly important useful uh to",
    "start": "746000",
    "end": "752160"
  },
  {
    "text": "developers um and um and we want to facilitate those as well so it's no good",
    "start": "752160",
    "end": "757800"
  },
  {
    "text": "kind of building your language understanding per application or per per scenario right so just to here here's a",
    "start": "757800",
    "end": "764079"
  },
  {
    "text": "long long list I won't go through them all but we're going to look at some of them later like you want to uh you want",
    "start": "764079",
    "end": "769160"
  },
  {
    "text": "to uh provide feedback on code in various ways you want to refactor and transform code you want to build an",
    "start": "769160",
    "end": "775440"
  },
  {
    "text": "updator tool that updates to the latest version of your library um",
    "start": "775440",
    "end": "780800"
  },
  {
    "text": "scripting uh reppel uh documentation generated from source code all kinds of static analysis",
    "start": "780800",
    "end": "787959"
  },
  {
    "text": "on vast Source bases maybe figuring out how much is this used versus that which kind of patterns do people use when they",
    "start": "787959",
    "end": "794519"
  },
  {
    "text": "when they code Telemetry back from tools um metaprogramming of all kinds right um",
    "start": "794519",
    "end": "801279"
  },
  {
    "text": "generating source code based on other source code or based on other kinds of specifications injecting weaving all",
    "start": "801279",
    "end": "808120"
  },
  {
    "text": "that kind of stuff it's all all based on understanding the basics of the C",
    "start": "808120",
    "end": "813360"
  },
  {
    "text": "language or whatever language you're doing these things for so we want to facilitate all that even if we don't build all of it ourselves we want to",
    "start": "813360",
    "end": "819320"
  },
  {
    "text": "make sure that it's facilitated right and if if you come right down to the core of what we wanted to achieve and",
    "start": "819320",
    "end": "825480"
  },
  {
    "text": "what we believe we build is um there really should only need to be one source base in the whole world that understands",
    "start": "825480",
    "end": "832560"
  },
  {
    "text": "C right we should build that we should build something that is the only thing the world will ever need in",
    "start": "832560",
    "end": "839440"
  },
  {
    "text": "understanding this language and we should share it with everyone we should share it share it so that everyone can",
    "start": "839440",
    "end": "844959"
  },
  {
    "text": "use it for their purposes so that everyone can contribute to it so that it works for their purposes and so on and",
    "start": "844959",
    "end": "851320"
  },
  {
    "text": "that's what we've done that's what the rling project is make sense yeah good",
    "start": "851320",
    "end": "856680"
  },
  {
    "text": "okay um I want to talk a little bit about language Evolution",
    "start": "856680",
    "end": "863199"
  },
  {
    "text": "um so uh c um obviously when when you own a language you kind of have to you",
    "start": "863199",
    "end": "869600"
  },
  {
    "text": "have this how how quickly should you evolve your language either you can evolve it a little bit or you can evolve it a lot that's sort of that's sort of",
    "start": "869600",
    "end": "876040"
  },
  {
    "text": "one Spectrum right and um and both things will essentially lead to certain Doom over time um both ends of the",
    "start": "876040",
    "end": "883279"
  },
  {
    "text": "spectrum so it's kind of a balance here like if you're evolve your language too little as the rest of the world evolves",
    "start": "883279",
    "end": "888959"
  },
  {
    "text": "as there are new demands as you as you have new um real world uh requirements",
    "start": "888959",
    "end": "895320"
  },
  {
    "text": "to how you code uh your language will become less and less relevant it'll stag State and it'll become something that is",
    "start": "895320",
    "end": "901000"
  },
  {
    "text": "for maintaining existing code only Legacy right the the L word um so so",
    "start": "901000",
    "end": "908040"
  },
  {
    "text": "that's really bad uh on the other hand if you evolve your language a lot it's going to explode it's going to become too big nobody can understand the whole",
    "start": "908040",
    "end": "914959"
  },
  {
    "text": "language um and you kind of get uh another messy situation where the the",
    "start": "914959",
    "end": "920199"
  },
  {
    "text": "language uh chokes itself to death on on um too many new features so we kind of",
    "start": "920199",
    "end": "925920"
  },
  {
    "text": "have to find a way on the Spectrum and that goes for everyone who who owns the language and is thinking about how to",
    "start": "925920",
    "end": "931399"
  },
  {
    "text": "evolve it so we think C is right about here right this is very accurate I've",
    "start": "931399",
    "end": "936720"
  },
  {
    "text": "got a very accurate metric in my pocket that I'm not going to share with you no just just kidding here um we're sort of",
    "start": "936720",
    "end": "942800"
  },
  {
    "text": "around there we think that uh C is a language that should evolve pretty fast it should evolve in a responsible way",
    "start": "942800",
    "end": "948639"
  },
  {
    "text": "and we want to make sure that everything we add fits as well as possible into the language doesn't change the core Spirit",
    "start": "948639",
    "end": "954279"
  },
  {
    "text": "of the language that a lot of people like not as many as Java but that that decent amount of people uh really know",
    "start": "954279",
    "end": "961079"
  },
  {
    "text": "and love and are and are dedicated to um but at the same time that it's really",
    "start": "961079",
    "end": "966600"
  },
  {
    "text": "important that the language doesn't fall behind as long as possible it should be a a worthy Choice compared to some of",
    "start": "966600",
    "end": "973000"
  },
  {
    "text": "the newer languages that are out there right and we should we should work to keep it keep it like",
    "start": "973000",
    "end": "978639"
  },
  {
    "text": "that um quick overview of the evolution of c um the first version of C was uh maybe",
    "start": "978639",
    "end": "986959"
  },
  {
    "text": "vaguely inspired by other program ing languages that may have may or may not have been talked about earlier today um",
    "start": "986959",
    "end": "994600"
  },
  {
    "text": "I think there was a little bit of Envy back then um so if you can't join them beat them right",
    "start": "994600",
    "end": "1000600"
  },
  {
    "text": "um uh so um there were a few differences like we actually had value types already",
    "start": "1000600",
    "end": "1006839"
  },
  {
    "text": "back then and it's you you're welcome George to have a look it's uh we have some tricks",
    "start": "1006839",
    "end": "1014160"
  },
  {
    "text": "it's it's pretty good um I I I um I applaud the you Java programmers will",
    "start": "1014160",
    "end": "1019880"
  },
  {
    "text": "get it too of course there's the quicker way that you can get value types",
    "start": "1019880",
    "end": "1025079"
  },
  {
    "text": "um we added generics a little after Java um we have generics that are actually",
    "start": "1025079",
    "end": "1030798"
  },
  {
    "text": "part of the runtime um which has some pros and cons has mostly Pros so far um",
    "start": "1030799",
    "end": "1038079"
  },
  {
    "text": "in that uh the runtime can really do the uh specialization that George talked about and so on it also helped us uh",
    "start": "1038079",
    "end": "1044839"
  },
  {
    "text": "actually with the next couple of releases our language features were built on top of that generics in the r time but it does mean that if I get the",
    "start": "1044839",
    "end": "1050880"
  },
  {
    "text": "question that George got about higher kind of types that's a much harder proposition in C than in Java because",
    "start": "1050880",
    "end": "1056039"
  },
  {
    "text": "we'd have to fix the runtime up to do it whereas Java has erased generics uh c 3",
    "start": "1056039",
    "end": "1062919"
  },
  {
    "text": "2008 we got lambdas then um uh we uh we",
    "start": "1062919",
    "end": "1068080"
  },
  {
    "text": "got query syntax it it we have some different method names than the uh filter and and stuff that were in in",
    "start": "1068080",
    "end": "1074640"
  },
  {
    "text": "Georgia slides but essentially that same kind of thing came in with with the idea that lambdas and and a kind of higher",
    "start": "1074640",
    "end": "1080240"
  },
  {
    "text": "level abstraction over for instance going through collections they go well together for querying and stuff okay um C 4 some Dynamic stuff that yeah",
    "start": "1080240",
    "end": "1090880"
  },
  {
    "text": "um well we did it that's also when we got our our concurrent um like a task",
    "start": "1090880",
    "end": "1096760"
  },
  {
    "text": "parallel library that that enables a good high level abstractions for concurrency that's probably the more important thing that happened there cop",
    "start": "1096760",
    "end": "1102960"
  },
  {
    "text": "five async for direct language support for asyncronous programming and then cop six that came out um this Sumer is the",
    "start": "1102960",
    "end": "1109240"
  },
  {
    "text": "first one uh last summer it's the first one that's based on the rosling compiler it has essentially just all those little",
    "start": "1109240",
    "end": "1115520"
  },
  {
    "text": "features that we were too scared to add in the old codebase are finally there so I'm going to show a few of those and",
    "start": "1115520",
    "end": "1120799"
  },
  {
    "text": "then C 7 who knows but I'll I'll extrapolate a little on that thought later as well so right now let's go and",
    "start": "1120799",
    "end": "1127000"
  },
  {
    "text": "demo I said I would demo a couple of things at a time let's go and talk about the repple that we build on top of Roslin and um and show some of the C",
    "start": "1127000",
    "end": "1134919"
  },
  {
    "text": "features in the repple so do people know what a reppel is a redevelop print Loop essentially something that's been around since the the",
    "start": "1134919",
    "end": "1141679"
  },
  {
    "text": "50s um hang on um and we just uh sort of really only got to it now um uh let's",
    "start": "1141679",
    "end": "1149320"
  },
  {
    "text": "see here we are um of course you can run a Repel and we have a a version of it that you can sort of run in the command",
    "start": "1149320",
    "end": "1155120"
  },
  {
    "text": "line you type some code it gets evaluated you get feedback from the evaluation of it um it's a little nicer",
    "start": "1155120",
    "end": "1160760"
  },
  {
    "text": "we sort of have a um 21st century version of reppel um if you run it in",
    "start": "1160760",
    "end": "1167960"
  },
  {
    "text": "your in your favorite editor as long as that's uh visual studio um the other",
    "start": "1167960",
    "end": "1174480"
  },
  {
    "text": "ones could uh could probably catch onto this easily because it's based entirely on on public apis in rosling so here's a",
    "start": "1174480",
    "end": "1182200"
  },
  {
    "text": "repple um it's essentially a glorified um um calculator right you can write C",
    "start": "1182200",
    "end": "1188080"
  },
  {
    "text": "expressions and they're immediately evaluated yeah um you could console the",
    "start": "1188080",
    "end": "1194120"
  },
  {
    "text": "right line something let's write something nice hello [Music]",
    "start": "1194120",
    "end": "1200559"
  },
  {
    "text": "Yao brissy 2015 okay and evaluated it and and it it",
    "start": "1200559",
    "end": "1208159"
  },
  {
    "text": "does its thing yeah it does what you ask it to um that's nice uh so let's look at",
    "start": "1208159",
    "end": "1214120"
  },
  {
    "text": "some let's one good thing about reppel is let they'll let you explore apis and language features and so on and play",
    "start": "1214120",
    "end": "1220000"
  },
  {
    "text": "with them in a much more uh immediate way so let's do that let's explore some of the C language features that we added",
    "start": "1220000",
    "end": "1225360"
  },
  {
    "text": "in C 6 so uh we added something that Java has had for what 12 13 years now",
    "start": "1225360",
    "end": "1231600"
  },
  {
    "text": "the ability to um to import static things um using static system. console",
    "start": "1231600",
    "end": "1237440"
  },
  {
    "text": "for instance is you know just puts all the static members of system. console into into scope and so if we go and and",
    "start": "1237440",
    "end": "1246600"
  },
  {
    "text": "uh repeat that line here what you'll see is that as soon as the um as soon as the analysis catches up console kind of",
    "start": "1246600",
    "end": "1253360"
  },
  {
    "text": "Fades out there because it's no longer necessary that's rosin sitting behind um",
    "start": "1253360",
    "end": "1258720"
  },
  {
    "text": "saying hey let me check if there's something you could do more easily and and gray out this superf stuff so you",
    "start": "1258720",
    "end": "1264480"
  },
  {
    "text": "can write it like this now right line um we also have interpolated strings",
    "start": "1264480",
    "end": "1269760"
  },
  {
    "text": "because all the cool cool kits have that now so uh we want to also be cool um",
    "start": "1269760",
    "end": "1276320"
  },
  {
    "text": "so um it's the idea that you know formatting strings should be easier right so you can have now an",
    "start": "1276320",
    "end": "1281679"
  },
  {
    "text": "interpolated string which you do by putting a dollar because we like basic at in at um Microsoft so if you put a",
    "start": "1281679",
    "end": "1288799"
  },
  {
    "text": "dollar in front of your string you can put cures inside and that um that gives you a little hole there you can put",
    "start": "1288799",
    "end": "1294000"
  },
  {
    "text": "expressions in so now it will still print out to 2015 but now it does it by evaluating 2015 as an integer expression",
    "start": "1294000",
    "end": "1301360"
  },
  {
    "text": "so we if we put 2014 + 1 it would it would do the same thing because it's evaluated um or we could go and uh",
    "start": "1301360",
    "end": "1309840"
  },
  {
    "text": "actually make the code reusable next year uh by saying datetime do now Dot",
    "start": "1309840",
    "end": "1316320"
  },
  {
    "text": "and you can see why this is a slightly nicer reple because an ID as well right now dot with completion and stuff dot",
    "start": "1316320",
    "end": "1324279"
  },
  {
    "text": "year like this and it's still 2015 or we could go and say um you can also declare",
    "start": "1324279",
    "end": "1332840"
  },
  {
    "text": "things in a reple so we could say VAR the awesome Place equals",
    "start": "1332840",
    "end": "1340720"
  },
  {
    "text": "brissy and you know then you could go and yeah there we go there you could go",
    "start": "1340720",
    "end": "1347440"
  },
  {
    "text": "and um and insert that here",
    "start": "1347440",
    "end": "1353679"
  },
  {
    "text": "so the awesome place right so um uh",
    "start": "1355480",
    "end": "1361640"
  },
  {
    "text": "another thing is that you can declare um functions inside of repple so let's do you see I'm demoing the reppel and C 6",
    "start": "1361640",
    "end": "1368240"
  },
  {
    "text": "at the same time here um to save time and uh get out of here in time um string",
    "start": "1368240",
    "end": "1373360"
  },
  {
    "text": "uh let's let's take the greeting and and spell that take the greeting and",
    "start": "1373360",
    "end": "1380520"
  },
  {
    "text": "um actually let's reuse the the string from",
    "start": "1380520",
    "end": "1385919"
  },
  {
    "text": "here let's take the greeting and and um return it from a method right so let's define a top level method in the reppel",
    "start": "1385919",
    "end": "1392520"
  },
  {
    "text": "here you can't do that in C maybe one day um but let's do it so that you have string greeting open curly close curly",
    "start": "1392520",
    "end": "1400840"
  },
  {
    "text": "that's how you would Define a method in in C until recently but we now added the ability to have just like in a um SEC",
    "start": "1400840",
    "end": "1407480"
  },
  {
    "text": "you have to return it as well uh just like in um in lambdas you can have an expression based Lambda uh",
    "start": "1407480",
    "end": "1414120"
  },
  {
    "text": "instead of having like a body full of statements in it uh I believe you have that too in in Java right um we you can",
    "start": "1414120",
    "end": "1421360"
  },
  {
    "text": "now just write an expression based uh function here so it it just it's just reducing the boilerplate a little bit",
    "start": "1421360",
    "end": "1427919"
  },
  {
    "text": "but now you have a method that um that is defined just as with an expression body okay so if I evaluate greeting in",
    "start": "1427919",
    "end": "1435039"
  },
  {
    "text": "my repple um I get hello Bry 2015 okay um that's the repple um and",
    "start": "1435039",
    "end": "1445039"
  },
  {
    "text": "that's the C 6 there's plenty more features in C 6 but I don't want to kind of dwell on it too much um but uh ask me",
    "start": "1445039",
    "end": "1452480"
  },
  {
    "text": "later um if you want to see more instead I want to go back and talk a little",
    "start": "1452480",
    "end": "1457600"
  },
  {
    "text": "about um what we're thinking for the next version of C okay so we just shipped C 6 couple of months ago in July",
    "start": "1457600",
    "end": "1465760"
  },
  {
    "text": "I think Late July um so we're just now starting to work on what should be next",
    "start": "1465760",
    "end": "1471039"
  },
  {
    "text": "and instead of sitting down in a room with the blinds down and kind of plotting a secret what should we what",
    "start": "1471039",
    "end": "1476720"
  },
  {
    "text": "should be the big reveal three three years from now we're doing our design work in the open like we put C we have C",
    "start": "1476720",
    "end": "1482559"
  },
  {
    "text": "design meetings we put the the notes from that out in the open we take proposals we discuss them on GitHub we",
    "start": "1482559",
    "end": "1488240"
  },
  {
    "text": "um in general we do this stuff in public so it's it's a little more like I know Java's always done this yeah um but with",
    "start": "1488240",
    "end": "1494679"
  },
  {
    "text": "with more politics um so um because Java is so multivendor that um uh it really",
    "start": "1494679",
    "end": "1502080"
  },
  {
    "text": "hurts but um we we're not quite there yet maybe uh maybe one day um so some of",
    "start": "1502080",
    "end": "1507240"
  },
  {
    "text": "the things we're thinking about so we sort of have this general idea that um",
    "start": "1507240",
    "end": "1512360"
  },
  {
    "text": "it's it's it's all very well to be sort of a 90s uh era object-oriented",
    "start": "1512360",
    "end": "1517880"
  },
  {
    "text": "programming language but one of the things that's really changed is um the world is now",
    "start": "1517880",
    "end": "1524080"
  },
  {
    "text": "distributed a lot of people are working not so much maybe with self-contained objects with behavior and and mutable",
    "start": "1524080",
    "end": "1529399"
  },
  {
    "text": "state but they working with data that travels back and forth between different running uh pieces of code right um",
    "start": "1529399",
    "end": "1536559"
  },
  {
    "text": "distributed concurrent programming um and we um we kind of took our cues from",
    "start": "1536559",
    "end": "1542240"
  },
  {
    "text": "that a little bit already in C 5 where we added async um support for async programming so you so it's easy to deal",
    "start": "1542240",
    "end": "1549080"
  },
  {
    "text": "with latency and uh the natural concurrency of the of the world of the web of the internet",
    "start": "1549080",
    "end": "1555960"
  },
  {
    "text": "um easy to do that without breaking out of your sort of um usual style of coding",
    "start": "1555960",
    "end": "1561399"
  },
  {
    "text": "if you will without callback hell that's another hell right there callback hell um but um but we think there's more to",
    "start": "1561399",
    "end": "1568520"
  },
  {
    "text": "it we think that it should be easier to work with data as opposed to objects um so a little part of that um sort of",
    "start": "1568520",
    "end": "1576640"
  },
  {
    "text": "coming at it a little tangentially is we want to add tubes to the language okay it's about time um so essentially the",
    "start": "1576640",
    "end": "1582880"
  },
  {
    "text": "main the main purpose of TS probably is that the the most common use cases if",
    "start": "1582880",
    "end": "1588320"
  },
  {
    "text": "you want to return multiple things from a function why should that be so hard can't you just let me list the things to",
    "start": "1588320",
    "end": "1594080"
  },
  {
    "text": "return already and so um tubal types a natural place for them to occur would be an as return type there um there's a few",
    "start": "1594080",
    "end": "1602120"
  },
  {
    "text": "languages now including Swift that do tubes where they actually allow the different um elements of the tubble to",
    "start": "1602120",
    "end": "1608559"
  },
  {
    "text": "not just have a position but to have a name right so when you get three strings back and you can't remember which is the",
    "start": "1608559",
    "end": "1613919"
  },
  {
    "text": "first name which is the last name and which is the address um you know you can actually actually they can have a name",
    "start": "1613919",
    "end": "1619640"
  },
  {
    "text": "okay so we're thinking name tubes um there should be a way to the names also help that you can get the tuble and you",
    "start": "1619640",
    "end": "1625960"
  },
  {
    "text": "can dot into it with using those names but there should probably also be some kind of positional deconstruction for it",
    "start": "1625960",
    "end": "1631640"
  },
  {
    "text": "okay um so tobes is one thing um another",
    "start": "1631640",
    "end": "1636880"
  },
  {
    "text": "thing again talking about sort of data that comes in over the wire or whatever um you have a lot of structured data and",
    "start": "1636880",
    "end": "1643720"
  },
  {
    "text": "sometimes you want to figure out which shape it has and do something if it has a certain shape",
    "start": "1643720",
    "end": "1649440"
  },
  {
    "text": "based on the knowledge of it having that shape right so um we're thinking about pattern matching as well in the language",
    "start": "1649440",
    "end": "1654880"
  },
  {
    "text": "where you can uh for instance the is operator in C today is one where you can just check whether a given value has a",
    "start": "1654880",
    "end": "1661559"
  },
  {
    "text": "given type and you get Boolean saying true or false we want to extend that a little bit so that the thing you check",
    "start": "1661559",
    "end": "1666880"
  },
  {
    "text": "against could be more than a type it could be a pattern for instance the pattern the simple pattern here is point",
    "start": "1666880",
    "end": "1672159"
  },
  {
    "text": "P where as well as checking that O is a point you also check you also actually",
    "start": "1672159",
    "end": "1677399"
  },
  {
    "text": "take it if it's true true you take it as a point and put it into the variable P so that in subsequent code that is sort",
    "start": "1677399",
    "end": "1683960"
  },
  {
    "text": "of in scope of that check you can use P so you don't have to first check then cast or something like that right so",
    "start": "1683960",
    "end": "1689679"
  },
  {
    "text": "it's a natural way of working with objects when you are trying to realize",
    "start": "1689679",
    "end": "1694840"
  },
  {
    "text": "their shape and um and do something based on the shape the kind of combination of checking and and uh",
    "start": "1694840",
    "end": "1703039"
  },
  {
    "text": "assigning to variables if you will um uh yeah obviously so that would be in",
    "start": "1703039",
    "end": "1708279"
  },
  {
    "text": "scope in one places maybe we have recursive pattern matching where somehow Point knows can be is able to declare",
    "start": "1708279",
    "end": "1713360"
  },
  {
    "text": "that X is first uh Y is second and you can write recursive patterns that checks maybe that X is if x is five put Y into",
    "start": "1713360",
    "end": "1721399"
  },
  {
    "text": "that variable there and you can use that subsequently okay is that going to be useful yeah I got a thumb",
    "start": "1721399",
    "end": "1728840"
  },
  {
    "text": "up uh YF when's lunch",
    "start": "1728840",
    "end": "1734200"
  },
  {
    "text": "okay um of course you can use patterns in other places is statement right so",
    "start": "1734200",
    "end": "1739320"
  },
  {
    "text": "it's it's a New Concept in the language that can be applied in multiple places we'll try to apply it where it's it's kind of not breaking too much with the",
    "start": "1739320",
    "end": "1745760"
  },
  {
    "text": "feel of the language so a natural place to generalize is a switch statement good old C switch statement where you still",
    "start": "1745760",
    "end": "1751440"
  },
  {
    "text": "have to say break every time I'm sorry maybe we should do something about that as well but um you know instead of just",
    "start": "1751440",
    "end": "1757399"
  },
  {
    "text": "saying case and then a constant value you can now put patterns in your case statement you can switch in anything and",
    "start": "1757399",
    "end": "1762840"
  },
  {
    "text": "you can have like very expressive patterns saying if this pattern applies you know go into this uh case here you",
    "start": "1762840",
    "end": "1769919"
  },
  {
    "text": "could even have a um you have extra conditions attached where you say if it's a string you the case where it's a",
    "start": "1769919",
    "end": "1776960"
  },
  {
    "text": "string then call that s and check that x s is longer than uh zero uh and then fall into this case here so now you get",
    "start": "1776960",
    "end": "1784600"
  },
  {
    "text": "you can start seeing how you can write code that takes something that has multiple different possible shapes and",
    "start": "1784600",
    "end": "1791480"
  },
  {
    "text": "easily declaratively say what should I do or produce for each shape you can also we're also talking about having an",
    "start": "1791480",
    "end": "1797080"
  },
  {
    "text": "expression based version of this that instead of having statements that happen for each case that's that's an",
    "start": "1797080",
    "end": "1802600"
  },
  {
    "text": "expression that that gives you a result for that shape coming in um one thing is sort of everything",
    "start": "1802600",
    "end": "1811159"
  },
  {
    "text": "defaults in C and Java to uh objects with state so mutability is the default",
    "start": "1811159",
    "end": "1817880"
  },
  {
    "text": "over immutability and reference equality is the default and all these kinds of things and that's if you're working with",
    "start": "1817880",
    "end": "1824480"
  },
  {
    "text": "data and with values that's just all wrong and so you have to write so much code in order to get to where you want to be of course you could go use f",
    "start": "1824480",
    "end": "1831399"
  },
  {
    "text": "instead and I encourage you to do so but a lot of people um a lot of people don't",
    "start": "1831399",
    "end": "1836799"
  },
  {
    "text": "that's not the right solution right um so we we take inspiration from that and say okay let there should be a way to say that really shortly um so there",
    "start": "1836799",
    "end": "1843320"
  },
  {
    "text": "should be some kind of record types that aren't a new kind of type in C that you kind of have to wrap your head around oh",
    "start": "1843320",
    "end": "1848880"
  },
  {
    "text": "there new kind of type it's simply the way we think about it is it's simply an abbreviation from saying all that stuff",
    "start": "1848880",
    "end": "1854399"
  },
  {
    "text": "that changes the defaults right so uh when I say uh first and last up there in a sort of",
    "start": "1854399",
    "end": "1860679"
  },
  {
    "text": "new record syntax it really means do all Implement all the stuff give it a Constructor give it a positional uh",
    "start": "1860679",
    "end": "1866639"
  },
  {
    "text": "deconstruction that I used in the pattern matching before give it an equal set value based uh and and um and so on",
    "start": "1866639",
    "end": "1873919"
  },
  {
    "text": "right so um there should be a way to work just as easily with values as you do with objects without kind of breaking",
    "start": "1873919",
    "end": "1881159"
  },
  {
    "text": "completely out of what the language is about today should be easy to create immutable",
    "start": "1881159",
    "end": "1886200"
  },
  {
    "text": "objects from scratch or create IM mutable objects from other objects like what call non-destructive mutation take",
    "start": "1886200",
    "end": "1893320"
  },
  {
    "text": "take a value and get another one that's that's like the old one except for little changes",
    "start": "1893320",
    "end": "1899440"
  },
  {
    "text": "okay um maybe we can do we have a static type system that has no idea about nulls",
    "start": "1899440",
    "end": "1905760"
  },
  {
    "text": "um other languages know about null and tell you if",
    "start": "1905760",
    "end": "1911039"
  },
  {
    "text": "you're they know if you you can express whether a variable should be able to contain null or not and if it's not able",
    "start": "1911039",
    "end": "1917960"
  },
  {
    "text": "to contain null um then it will enforce that you don't assign null into it and if it is able to contain null then it",
    "start": "1917960",
    "end": "1924320"
  },
  {
    "text": "will enforce that you check for null before you der reference we can't sort of in version seven of a language we",
    "start": "1924320",
    "end": "1930840"
  },
  {
    "text": "can't go and do something that's very sort of radical and harsh and full of strong guarantees suddenly adding a null",
    "start": "1930840",
    "end": "1937880"
  },
  {
    "text": "awareness to a type system that would break a bunch of existing code but we could we could do something so we're",
    "start": "1937880",
    "end": "1944159"
  },
  {
    "text": "thinking about a sort of warning based system that could help you find most of your know reference exceptions it won't give you guarantees that's you know",
    "start": "1944159",
    "end": "1951760"
  },
  {
    "text": "compatibility sorry but it could it could tell you lots of things uh based on warnings and maybe some up in right",
    "start": "1951760",
    "end": "1958360"
  },
  {
    "text": "so if you could express if you had two versions of the string type um with a question mark you could express this is",
    "start": "1958360",
    "end": "1964360"
  },
  {
    "text": "a string variable that is intended to contain nulls and the other one well it might but it's not intended to and we're",
    "start": "1964360",
    "end": "1970559"
  },
  {
    "text": "going to try to keep it from it okay um then yeah we would assign let let your",
    "start": "1970559",
    "end": "1976240"
  },
  {
    "text": "assign null into one but not the other except you know we would but we would give you a warning um whether you do it",
    "start": "1976240",
    "end": "1982480"
  },
  {
    "text": "directly or indirectly um but on the other hand we would protect you a little bit from",
    "start": "1982480",
    "end": "1987679"
  },
  {
    "text": "dereferencing um things that could be null so we we would you'd be able to upt into or get a warning there saying that",
    "start": "1987679",
    "end": "1994480"
  },
  {
    "text": "end at length that's probably not a good idea because you said it might be null and so you might get a null reference exception here um",
    "start": "1994480",
    "end": "2001399"
  },
  {
    "text": "except if you check for null and so we'd have to be able to recognize we'd look at your source code and say do we think",
    "start": "2001399",
    "end": "2007559"
  },
  {
    "text": "he's checking for null trying to be pretty smart about it and if you are checking for null then we would let you do reference and if you really know it's",
    "start": "2007559",
    "end": "2013559"
  },
  {
    "text": "not null you checked some way the compiler can't see we would introduce a dam it operator saying I know what I'm",
    "start": "2013559",
    "end": "2018760"
  },
  {
    "text": "doing just get just do it already and I'll take the exception if I was wrong all right um so something like that um",
    "start": "2018760",
    "end": "2026000"
  },
  {
    "text": "it's what we're thinking as well so changing gear from the language level um I want to talk about something",
    "start": "2026000",
    "end": "2032120"
  },
  {
    "text": "that's available today but sort of on the advanced end so I saved it for last um messing up the chronology here a",
    "start": "2032120",
    "end": "2038080"
  },
  {
    "text": "little bit George was much better at that sorry um but um I want to talk",
    "start": "2038080",
    "end": "2043519"
  },
  {
    "text": "about one of those scenarios that is a language-based thing you want to enable Okay so this is the idea that you can",
    "start": "2043519",
    "end": "2049599"
  },
  {
    "text": "write your own custom analysis custom Diagnostics if you will for source code",
    "start": "2049599",
    "end": "2055079"
  },
  {
    "text": "if you have in your company you have a style guideline or in your API you have certain ways that the API should be used",
    "start": "2055079",
    "end": "2062398"
  },
  {
    "text": "it' be nice if you could write something programmatically that lets people know that they're doing something potentially",
    "start": "2062399",
    "end": "2069118"
  },
  {
    "text": "wrong and give them warnings and errors just like the language does but for more specific scenarios that that aren't",
    "start": "2069119",
    "end": "2074398"
  },
  {
    "text": "sensible for us to implement in the language itself um hey we like we don't like VAR around here um you know you",
    "start": "2074399",
    "end": "2081679"
  },
  {
    "text": "could build that analyzer to uh to smack people when they get when you use VAR that'd be great right or the other way",
    "start": "2081679",
    "end": "2087720"
  },
  {
    "text": "around actually you could have both and then you you um yeah",
    "start": "2087720",
    "end": "2094440"
  },
  {
    "text": "anyway so um and as well you know once you you custom diagnose something it'd be nice to be able to provide a custom",
    "start": "2094960",
    "end": "2101160"
  },
  {
    "text": "fix that people can apply just like a a built-in refactoring uh so that's what the the",
    "start": "2101160",
    "end": "2106400"
  },
  {
    "text": "analyzis and fixes framework does um and um and I'm going to show it to you and",
    "start": "2106400",
    "end": "2111680"
  },
  {
    "text": "we're going to use it um so essentially and this is the last part of my talk the",
    "start": "2111680",
    "end": "2117320"
  },
  {
    "text": "one that may Crash and Burn um and we're pretty close to lunch so if",
    "start": "2117320",
    "end": "2123800"
  },
  {
    "text": "it does I'm sure you go eat and get your sugar up and you still have a warm happy fuz feeling about me um even in that",
    "start": "2123800",
    "end": "2130640"
  },
  {
    "text": "case so um the the idea here is that you as non compiler Geeks you should be able",
    "start": "2130640",
    "end": "2136880"
  },
  {
    "text": "to go and write something that does something with the language so the rosling API is really an object model of language let's go use it okay so we have",
    "start": "2136880",
    "end": "2144400"
  },
  {
    "text": "uh this thing called the the um an analyzer and provider um right now",
    "start": "2144400",
    "end": "2151560"
  },
  {
    "text": "is just in vs there a project type if you if you um select that it will create a sort of default analyzis that you can",
    "start": "2151560",
    "end": "2158119"
  },
  {
    "text": "then go and hack in and all I did was rip out a few things and provide a few strings and other than that I haven't implemented much yet um the way it works",
    "start": "2158119",
    "end": "2164880"
  },
  {
    "text": "is you specify um um you specify uh you initialize by signing up some custom",
    "start": "2164880",
    "end": "2172200"
  },
  {
    "text": "analyzers and I'm signing up the analyze node here uh method I'm going to fill it out with the logic to actually uh",
    "start": "2172200",
    "end": "2178760"
  },
  {
    "text": "analyze so what I'm going to analyze well uh let's enter debug mode which I did now um which when you do it on this",
    "start": "2178760",
    "end": "2185400"
  },
  {
    "text": "project what it will do is this takes a little while so I'm going to talk over it while it does it the way it debugs is",
    "start": "2185400",
    "end": "2191079"
  },
  {
    "text": "it starts a nested version of Visual Studio up so that you can try your analyzer live on code the idea is the",
    "start": "2191079",
    "end": "2198040"
  },
  {
    "text": "analyzer should work on keystrokes and so um I want to be able the debugging",
    "start": "2198040",
    "end": "2203240"
  },
  {
    "text": "should be I'm able to try my analyzer in sort of this nested Visual Studio that has it installed so now I open a project",
    "start": "2203240",
    "end": "2209200"
  },
  {
    "text": "in the nested version of Visual Studio that's run by the outer Visual Studio that I'm writing the analyzer in and I",
    "start": "2209200",
    "end": "2214760"
  },
  {
    "text": "have some code here that is uh you know some people would say is not you know a",
    "start": "2214760",
    "end": "2220440"
  },
  {
    "text": "good form because it doesn't use curries around the the bodies of the if statements and so what I want to do is",
    "start": "2220440",
    "end": "2225640"
  },
  {
    "text": "write an analyzer that complains about that but only if you only if you um if",
    "start": "2225640",
    "end": "2231040"
  },
  {
    "text": "you don't have curries around your if statement um you good with that uh no somebody's",
    "start": "2231040",
    "end": "2238200"
  },
  {
    "text": "not yes good okay um and we have 10 minutes for this so let's see how far we get uh so",
    "start": "2238200",
    "end": "2244960"
  },
  {
    "text": "um this it took a while to kind of get into debug mode here so I'm going to simultaneously demo the much improved uh",
    "start": "2244960",
    "end": "2251640"
  },
  {
    "text": "support in visual studio for edit and continue by not actually um leaving debug mode while I code this analyzer so",
    "start": "2251640",
    "end": "2259720"
  },
  {
    "text": "um what what I'm going to do is I'm going to go out to the outer let's see where is it um here the outer uh Visual",
    "start": "2259720",
    "end": "2267480"
  },
  {
    "text": "Studio I'm going to put a breakpoint here where um where I'm going to write the analyzer",
    "start": "2267480",
    "end": "2274160"
  },
  {
    "text": "uh then I'm going to go back to the nested visual studio and do an edit and if I'm lucky that edit notices that",
    "start": "2274160",
    "end": "2280880"
  },
  {
    "text": "there are if statements and I registered an analyzer to go on if statements and so I hit a breako here calling my custom",
    "start": "2280880",
    "end": "2286680"
  },
  {
    "text": "code from within Visual Studio okay so now I get I can get to work I have a context there um uh let's have a look at",
    "start": "2286680",
    "end": "2295200"
  },
  {
    "text": "what that is um we can actually Let's see we can hover over it here and and uh",
    "start": "2295200",
    "end": "2300800"
  },
  {
    "text": "and see it live because we're in we're stuck in we in debugging right now we actually have a live object there so what you can do with this context that",
    "start": "2300800",
    "end": "2307000"
  },
  {
    "text": "comes into analyze this you can you can see what syntax node you're stuck on uh you can report a diagnostic if something",
    "start": "2307000",
    "end": "2312880"
  },
  {
    "text": "was wrong with it and if you want semantic information other more than syntax information you can dig into that",
    "start": "2312880",
    "end": "2318119"
  },
  {
    "text": "as well with the semantic model so let's just start by looking at the node here we can see that it is indeed an if",
    "start": "2318119",
    "end": "2325200"
  },
  {
    "text": "statement um so let's get it as an if statement um by using the syntax tree",
    "start": "2325200",
    "end": "2334200"
  },
  {
    "text": "that is really just an object model of C right so we can say VAR if",
    "start": "2334200",
    "end": "2340280"
  },
  {
    "text": "statement is there's that node as an if statement syntax and now we can if",
    "start": "2340280",
    "end": "2347040"
  },
  {
    "text": "statement the co I you know a little bit of OCD here okay it would have worked",
    "start": "2347040",
    "end": "2352680"
  },
  {
    "text": "anyway if now so now let's go and explore this if statement that we got what is it that we don't like we we we",
    "start": "2352680",
    "end": "2360359"
  },
  {
    "text": "don't like if its nested statement isn't a block so I'm going to get its nested",
    "start": "2360359",
    "end": "2366920"
  },
  {
    "text": "statement and I'm get the kind that it is and I'm say if that's not um hang on that is a method and if",
    "start": "2366920",
    "end": "2376079"
  },
  {
    "text": "that is not um a block something that has curries on it then I want to report",
    "start": "2376079",
    "end": "2382520"
  },
  {
    "text": "a diagnostic okay so uh let's report a diagnostic we saw that we could do that",
    "start": "2382520",
    "end": "2388000"
  },
  {
    "text": "on the context let's take the context and report a diagnostic what does it need it needs a diagnostic to report",
    "start": "2388000",
    "end": "2394720"
  },
  {
    "text": "okay um let's report a diagn NOC um I don't have one yet so let's go and use a",
    "start": "2394720",
    "end": "2401319"
  },
  {
    "text": "refactoring we have lots of new refactorings now based on rosling um let's go and create a diagnostic",
    "start": "2401319",
    "end": "2407800"
  },
  {
    "text": "diagnostic doc create um what does it need it needs a descriptor I cheated and made one uh in",
    "start": "2407800",
    "end": "2414680"
  },
  {
    "text": "the in the boilerplate code up there uh that was wrong um what did I call it um",
    "start": "2414680",
    "end": "2421240"
  },
  {
    "text": "uh rule that's what I call it there we are it needs a location whatever that is",
    "start": "2421240",
    "end": "2427400"
  },
  {
    "text": "and it needs to be told what kind of statement I stopped in here because it's going to print that out on screen okay",
    "start": "2427400",
    "end": "2432640"
  },
  {
    "text": "there we go now we just need uh this location thing what is a location um",
    "start": "2432640",
    "end": "2438040"
  },
  {
    "text": "well that is wherever in the code we want to have a squiggle telling us that there's a bug so let's let's do that on",
    "start": "2438040",
    "end": "2445079"
  },
  {
    "text": "the if keyword so we can say if keyword we can get the take the if",
    "start": "2445079",
    "end": "2450720"
  },
  {
    "text": "statements if keyword because this is not an abstract syntax tree this actually has a representation of every",
    "start": "2450720",
    "end": "2458200"
  },
  {
    "text": "instance of every keyword in the whole code so that can so it's this particular if keyword because then I can go and get",
    "start": "2458200",
    "end": "2465359"
  },
  {
    "text": "its location the where is it in the source code so there we go um I think I",
    "start": "2465359",
    "end": "2473000"
  },
  {
    "text": "did all I needed to so in these few lines of code if everything goes well um I am now doing uh everything I need to",
    "start": "2473000",
    "end": "2481760"
  },
  {
    "text": "get a squiggle on my code whenever there's not a block in there right so imagine how easy",
    "start": "2481760",
    "end": "2487760"
  },
  {
    "text": "it is for you to write your own rules that are that are smart to code if you will okay so you see the squiggle on the",
    "start": "2487760",
    "end": "2494960"
  },
  {
    "text": "second one but not on the first one um but if I if I edit here it gets called",
    "start": "2494960",
    "end": "2500359"
  },
  {
    "text": "every time I edit and now uh it gets a squiggle on the first one as well so um",
    "start": "2500359",
    "end": "2506480"
  },
  {
    "text": "it would be nice also to offer um to offer a fix so um I have a",
    "start": "2506480",
    "end": "2513960"
  },
  {
    "text": "let's see where are we I have a um a code fix provider as well that I can",
    "start": "2513960",
    "end": "2519119"
  },
  {
    "text": "that I can do here where I I sign up something I sign up this fix async method to be called whenever um whenever",
    "start": "2519119",
    "end": "2527119"
  },
  {
    "text": "this particular diagnostic gets hit and then I can offer the use the user some help um so",
    "start": "2527119",
    "end": "2534720"
  },
  {
    "text": "um let's see uh we need to get in there and let's just put a break point at the",
    "start": "2534720",
    "end": "2541200"
  },
  {
    "text": "end there actually let's put it all the way at the end um and then let's go and",
    "start": "2541200",
    "end": "2546880"
  },
  {
    "text": "trip Tri ER this code to be run so inside of my nested Visual Studio here now you see there's this light bulb that",
    "start": "2546880",
    "end": "2552960"
  },
  {
    "text": "says an if statement should contain braces okay let's go and see what options I have to deal with that well",
    "start": "2552960",
    "end": "2558599"
  },
  {
    "text": "there's an ad braces is fixed registered but and that calls my code and runs it",
    "start": "2558599",
    "end": "2564920"
  },
  {
    "text": "okay what does this code do it it asynchronously returns a document what",
    "start": "2564920",
    "end": "2570200"
  },
  {
    "text": "is a document it's a it's an object representation of the whole um the whole file here so here's an interesting thing",
    "start": "2570200",
    "end": "2578079"
  },
  {
    "text": "the the whole the syntax tree the whole object model is immutable so we are actually one of the",
    "start": "2578079",
    "end": "2585480"
  },
  {
    "text": "sets of people who would like to work more with immutable code who don't like necessarily to have a mutability be a",
    "start": "2585480",
    "end": "2591240"
  },
  {
    "text": "default right it's an immutable tree representing the code and IM mutable data structures representing the",
    "start": "2591240",
    "end": "2596800"
  },
  {
    "text": "semantics and everything so what I need to do is to I get the old model the old document and I need to return the new",
    "start": "2596800",
    "end": "2604040"
  },
  {
    "text": "document um I need to do it in four minutes um so I I go in here all I get is the",
    "start": "2604040",
    "end": "2610000"
  },
  {
    "text": "diagnostic I find the uh the document I find the location at the",
    "start": "2610000",
    "end": "2615160"
  },
  {
    "text": "location uh I find the token that is there which is the if keyword and from the if keyword I go up to the parent",
    "start": "2615160",
    "end": "2621319"
  },
  {
    "text": "which is the if statement syntax and get that out and that's that's what I have now so now I want to produce the new one",
    "start": "2621319",
    "end": "2626880"
  },
  {
    "text": "the fix the the one that I want to return at the end so we should create a new if statement I can't modify this one",
    "start": "2626880",
    "end": "2633319"
  },
  {
    "text": "it's immutable and that is really useful because it is um because then I can have both at",
    "start": "2633319",
    "end": "2639640"
  },
  {
    "text": "once first of all I could do everything in parallel I don't have any any uh concurrency issues but also I can have",
    "start": "2639640",
    "end": "2645599"
  },
  {
    "text": "them both around at once so I can create diffs and stuff and you see that in a minute so I need another if statement",
    "start": "2645599",
    "end": "2650760"
  },
  {
    "text": "that's like the old one except it's with a different statement namely the one",
    "start": "2650760",
    "end": "2655800"
  },
  {
    "text": "that has a block so let's create a block",
    "start": "2655800",
    "end": "2660839"
  },
  {
    "text": "syntax wrong completion here syntax",
    "start": "2660839",
    "end": "2665599"
  },
  {
    "text": "Factory dot block and that block should have the",
    "start": "2666040",
    "end": "2671079"
  },
  {
    "text": "original if statements man fat fingers here",
    "start": "2671079",
    "end": "2676319"
  },
  {
    "text": "statement inside of it right you see what I'm doing there building a new one from the old one VAR then I need to a",
    "start": "2676319",
    "end": "2683200"
  },
  {
    "text": "new um a new root syntax tree which is the old root syntax tree with um where",
    "start": "2683200",
    "end": "2691240"
  },
  {
    "text": "we replace the old if statement node with the new if statement node so I'm",
    "start": "2691240",
    "end": "2697280"
  },
  {
    "text": "zipping back together a new um a new data structure from the old one with",
    "start": "2697280",
    "end": "2703079"
  },
  {
    "text": "just the spine replaced here and finally we need a new document which is the old",
    "start": "2703079",
    "end": "2709800"
  },
  {
    "text": "document new document equals document",
    "start": "2709800",
    "end": "2715240"
  },
  {
    "text": "dowi syntax root new root here okay so now I have a new document",
    "start": "2715240",
    "end": "2721319"
  },
  {
    "text": "that I can return instead of the old one I wonder if this works uh let's",
    "start": "2721319",
    "end": "2727880"
  },
  {
    "text": "remove the break point and let's go up and execute from where we got to I like",
    "start": "2727880",
    "end": "2734160"
  },
  {
    "text": "debugging so I'm still in debug mode here hopefully this all works if anyone can see any reason why not thank you for",
    "start": "2734160",
    "end": "2740160"
  },
  {
    "text": "staying silent um so let's go and try this again add",
    "start": "2740160",
    "end": "2745839"
  },
  {
    "text": "braces whoa see there it shows the new code and the old code just based on that little transformation that I wrote that",
    "start": "2745839",
    "end": "2752000"
  },
  {
    "text": "you could have written um no problem it shows old C and new code because it DS",
    "start": "2752000",
    "end": "2757160"
  },
  {
    "text": "the two syntax trees because they were IM mutable and and didn't get mutated and and destroyed and now if I choose",
    "start": "2757160",
    "end": "2763160"
  },
  {
    "text": "this it inserts the new code right so you can with this you can build a whole infrastructure based on that same object",
    "start": "2763160",
    "end": "2769559"
  },
  {
    "text": "model of code that our compiler uses and that our ID uses it's all that shared thing in the middle that's going to give",
    "start": "2769559",
    "end": "2775680"
  },
  {
    "text": "you wonderful language-based experiences for years to come in C right that you",
    "start": "2775680",
    "end": "2781160"
  },
  {
    "text": "can contribute to because it's open source and that I'm obviously way too happy about like this is disgusting but",
    "start": "2781160",
    "end": "2786800"
  },
  {
    "text": "um um um hopefully that gave you an idea of both where we are going with concrete",
    "start": "2786800",
    "end": "2791839"
  },
  {
    "text": "things that you as an end user can use and how we're enabling uh an ecosystem",
    "start": "2791839",
    "end": "2796880"
  },
  {
    "text": "for tools um on different platforms and so on so that um hopefully C working",
    "start": "2796880",
    "end": "2803280"
  },
  {
    "text": "with C is relevant to you in the future and uh and it should make you happy camper all right thank you very",
    "start": "2803280",
    "end": "2811280"
  },
  {
    "text": "much",
    "start": "2811520",
    "end": "2814520"
  }
]