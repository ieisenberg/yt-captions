[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "[Music]",
    "start": "3540",
    "end": "6660"
  },
  {
    "text": "[Applause] yes thanks everybody uh so as Eric said we've been talking about events and",
    "start": "10810",
    "end": "16080"
  },
  {
    "text": "event driven all day right this is Eda day uh of course um and Eda as Eric",
    "start": "16080",
    "end": "22519"
  },
  {
    "text": "likes to say is all about something happening and then we respond right and the canonical example that we always see",
    "start": "22519",
    "end": "29199"
  },
  {
    "text": "is like e-commerce app somebody places an order there's an event the Fulfillment service does its thing the",
    "start": "29199",
    "end": "35559"
  },
  {
    "text": "shipping service does its thing onanon and whatever other fancy technical terms Eric just",
    "start": "35559",
    "end": "41520"
  },
  {
    "text": "used but uh there's usually a human component involved to these things at least some of them like a human",
    "start": "41520",
    "end": "47760"
  },
  {
    "text": "interface that we need to work with as well but there's no event bridge to tie all of that stuff together right it's",
    "start": "47760",
    "end": "54800"
  },
  {
    "text": "just not that simple front ends are generally built with a different set of Technology",
    "start": "54800",
    "end": "60600"
  },
  {
    "text": "typescript notwithstanding these days uh we have to get things like websockets involved often times if we want to make",
    "start": "60600",
    "end": "66640"
  },
  {
    "text": "it more real time uh so we've got vastly different technology vastly different",
    "start": "66640",
    "end": "73040"
  },
  {
    "text": "teams often times uh so if you want to build something that you know food",
    "start": "73040",
    "end": "78600"
  },
  {
    "text": "delivery order service sports scores maybe trade uh stock trading applications in order to build a rich",
    "start": "78600",
    "end": "85880"
  },
  {
    "text": "front end it actually takes some work on the back end to make that happen so I started thinking about this topic",
    "start": "85880",
    "end": "93360"
  },
  {
    "start": "90000",
    "end": "731000"
  },
  {
    "text": "recently because I think about 20 years ago I was building a Java desktop",
    "start": "93360",
    "end": "99079"
  },
  {
    "text": "application right who who remembers doing that right it was Java you could run it anywhere and I had to have a",
    "start": "99079",
    "end": "106200"
  },
  {
    "text": "button in this thing and it's an event handler right I mean user interfaces are",
    "start": "106200",
    "end": "111680"
  },
  {
    "text": "by their nature event driven we click on something something happens we want to do something about it even in some apps",
    "start": "111680",
    "end": "118759"
  },
  {
    "text": "if I pause rolling long enough that's also an event maybe it's just like a measurement that somebody takes in some",
    "start": "118759",
    "end": "126000"
  },
  {
    "text": "web web analytics uh platform but we want something to happen when the button gets clicked and the",
    "start": "126000",
    "end": "133239"
  },
  {
    "text": "develop front end developer is going to write some code to do that it's going to trigger some interaction um and yes there's going to",
    "start": "133239",
    "end": "140879"
  },
  {
    "text": "be some front-end code here like this is just a very simple react s uh s uh",
    "start": "140879",
    "end": "146920"
  },
  {
    "text": "example I'm sorry it's just 9:00 a.m. for me home so I'm still waking",
    "start": "146920",
    "end": "152400"
  },
  {
    "text": "up uh but a very simple react sample that we click the button an alert pops",
    "start": "152400",
    "end": "157440"
  },
  {
    "text": "up and says hey you clicked me so we are going to have a little bit of front-end code but most of this talk is going to",
    "start": "157440",
    "end": "163440"
  },
  {
    "text": "be kind of focused on the cloud-based patterns that we can use to enable Rich",
    "start": "163440",
    "end": "169200"
  },
  {
    "text": "front-end interactions and experiences so if you're a front-end developer a backend developer a 10x developer or the",
    "start": "169200",
    "end": "176560"
  },
  {
    "text": "mythical 100x developer uh hopefully this is applicable for you um I am also going to share a link",
    "start": "176560",
    "end": "184519"
  },
  {
    "text": "to the demo that we're going to see in a little bit that has all of the patterns that I'm going to talk about and they",
    "start": "184519",
    "end": "190680"
  },
  {
    "text": "all work and there's even a sample front end so what happens when I click this",
    "start": "190680",
    "end": "196720"
  },
  {
    "text": "button well often times we're going to go load some data and again this is a pretty simple example where we're just",
    "start": "196720",
    "end": "203680"
  },
  {
    "text": "going and fetching some example uh some data from somewhere and then using the reactivity on the front end to go update",
    "start": "203680",
    "end": "210879"
  },
  {
    "text": "a Dom element or go update some other interface so it's very very synchronous",
    "start": "210879",
    "end": "217120"
  },
  {
    "text": "but it's also static in this case so not only are we waiting for the data to come down over whatever magical pipe is out",
    "start": "217120",
    "end": "224159"
  },
  {
    "text": "there uh it's not going to change there's no mechanism to do that this is",
    "start": "224159",
    "end": "229640"
  },
  {
    "text": "pretty simplistic but we know the world is asynchronous something is happening somewhere in some way and if we want to",
    "start": "229640",
    "end": "237720"
  },
  {
    "text": "update the front end we need to make you you know make things a little bit more complex so we're going to talk about how",
    "start": "237720",
    "end": "244120"
  },
  {
    "text": "to enable these more interactive experiences mostly using AWS services and we're going to mix synchronous data",
    "start": "244120",
    "end": "250159"
  },
  {
    "text": "loading and asynchronous updates to keep that interface up to dat so as consumers we know that real",
    "start": "250159",
    "end": "258199"
  },
  {
    "text": "time generally makes things better right it enhances the user experience I'm going to use a food",
    "start": "258199",
    "end": "264280"
  },
  {
    "text": "delivery uh example throughout the talk today and I personally am one of those",
    "start": "264280",
    "end": "269840"
  },
  {
    "text": "people who's always following where their order is okay I'll be honest I have a chair that I'm waiting a fancy",
    "start": "269840",
    "end": "275479"
  },
  {
    "text": "leather chair that I'm waiting for I'm trying to check the status to see where it is um but if you've ever tried to",
    "start": "275479",
    "end": "281520"
  },
  {
    "text": "build this type of experience it's actually much harder than you than you think if you got a coffee downstairs",
    "start": "281520",
    "end": "287320"
  },
  {
    "text": "from the serous espresso Booth we'll talk about how they did that but creating that connectivity between the",
    "start": "287320",
    "end": "292919"
  },
  {
    "text": "back end and front end is harder for most people than I at least initially realized uh I have a diagram a little",
    "start": "292919",
    "end": "299720"
  },
  {
    "text": "later in the talk that was just a little corner of a broader reinvent talk that I did it was up literally up on the screen",
    "start": "299720",
    "end": "305520"
  },
  {
    "text": "for like 30 45 seconds and I had a half dozen or more people come up just to ask",
    "start": "305520",
    "end": "310680"
  },
  {
    "text": "about that diagram how do how do you make that happen how do you do that because again there's this",
    "start": "310680",
    "end": "317160"
  },
  {
    "text": "different set of Technologies one way to uh implement this type of experience is with polling",
    "start": "317160",
    "end": "324080"
  },
  {
    "text": "right we're all probably familiar with polling but the front end is just calling the back end on some interval",
    "start": "324080",
    "end": "330600"
  },
  {
    "text": "asking hey you have any information for me as a parent this is like your kid",
    "start": "330600",
    "end": "336880"
  },
  {
    "text": "sitting in the back seat asking are we there yet are we there",
    "start": "336880",
    "end": "342720"
  },
  {
    "text": "yet so polling can be expensive as a parent it can be grading right but when",
    "start": "342720",
    "end": "350440"
  },
  {
    "text": "we do this we're we're often crowding the network if you haven't designed your",
    "start": "350440",
    "end": "355479"
  },
  {
    "text": "apis in such a way that they only return the changes you're also returning a lot of unnecessary data you know that full",
    "start": "355479",
    "end": "363120"
  },
  {
    "text": "response may not be necessary this isn't also isn't quite as timely right it's not we don't get the data to see where",
    "start": "363120",
    "end": "370080"
  },
  {
    "text": "the delivery is in real time we only get it when the the client asks hey can you",
    "start": "370080",
    "end": "375880"
  },
  {
    "text": "give me an update and that that might be I don't know seconds to minutes later",
    "start": "375880",
    "end": "381039"
  },
  {
    "text": "now don't get me wrong polling can be appropriate in some cases if we've got this massive growing food delivery app",
    "start": "381039",
    "end": "389160"
  },
  {
    "text": "and our management wants a count for the number of orders that we filled that day",
    "start": "389160",
    "end": "394520"
  },
  {
    "text": "it's probably overwhelming to update that number on some interface on every single order so maybe we pull every five",
    "start": "394520",
    "end": "401840"
  },
  {
    "text": "to 10 minutes and just update the interface there so so that's probably",
    "start": "401840",
    "end": "406919"
  },
  {
    "text": "fine but my personal preference is to take more of a subscription based approach both here and with my kids I'll",
    "start": "406919",
    "end": "414599"
  },
  {
    "text": "let you know when we get there okay so the client basically just asks the server",
    "start": "414599",
    "end": "420240"
  },
  {
    "text": "hey let me know if you have any any data and this tends to work best for small",
    "start": "420240",
    "end": "427039"
  },
  {
    "text": "updates right we're not going to do the bulk load of data that's more of the synchronous request that probably",
    "start": "427039",
    "end": "433120"
  },
  {
    "text": "precedes this so if you think about like the the departure board at the airport",
    "start": "433120",
    "end": "439039"
  },
  {
    "text": "there's a lot of flights on there that's a lot of data so maybe you could Envision we synchronously load all of",
    "start": "439039",
    "end": "445360"
  },
  {
    "text": "that you know that day or that terminal's flight data and then as planes get you know as planes depart",
    "start": "445360",
    "end": "453080"
  },
  {
    "text": "flights get delayed or hopefully not cancelled we treat that as more of a subscription where we're just getting",
    "start": "453080",
    "end": "459400"
  },
  {
    "text": "that data pushed out to the app running the departure board to update that one",
    "start": "459400",
    "end": "464800"
  },
  {
    "text": "flight you might have also might also be familiar with things like web hooks so web hooks are another way that you could",
    "start": "464800",
    "end": "471319"
  },
  {
    "text": "update a client but frankly they're not going to work as well with web and mobile clients right they're just not",
    "start": "471319",
    "end": "477080"
  },
  {
    "text": "addressable in that way so I I organized a talk around three",
    "start": "477080",
    "end": "482960"
  },
  {
    "text": "different front-end interaction patterns and I did that because my brain tend to Works tends to work best from front to",
    "start": "482960",
    "end": "489840"
  },
  {
    "text": "back so we've already talked about the first one which is actually behind my head I realize now uh but this is",
    "start": "489840",
    "end": "496039"
  },
  {
    "text": "real-time events right something changes and we want to push that update out to the front",
    "start": "496039",
    "end": "501960"
  },
  {
    "text": "end the second is what I'm calling a long running process and I Define long",
    "start": "501960",
    "end": "507159"
  },
  {
    "text": "running as being more than 30 seconds for the API to return that's not a random number I picked that's actually",
    "start": "507159",
    "end": "514080"
  },
  {
    "text": "the the timeout for AWS API Gateway um but 30 seconds seems to be a pretty",
    "start": "514080",
    "end": "519320"
  },
  {
    "text": "reasonable timeout this kind of long running process thing or pattern has become",
    "start": "519320",
    "end": "525720"
  },
  {
    "text": "really common for customers to ask us about recently because of generative AI sometimes those models will take 30",
    "start": "525720",
    "end": "532240"
  },
  {
    "text": "seconds or longer to respond or you're in a situation where the model responds in 10 seconds once in a while but a",
    "start": "532240",
    "end": "538200"
  },
  {
    "text": "couple minutes other times so that's become more more common more prominent uh the last one and we'll just",
    "start": "538200",
    "end": "545680"
  },
  {
    "text": "touch on it towards the end is is push events or push push notifications and they kind of sound a",
    "start": "545680",
    "end": "552000"
  },
  {
    "text": "little bit like this real-time event stuff but there are some differences right we're probably not going to push",
    "start": "552000",
    "end": "558000"
  },
  {
    "text": "out every update to your food delivery order that's a recipe for automatically getting your notifications disabled on",
    "start": "558000",
    "end": "564519"
  },
  {
    "text": "my mobile device at least um and then these work a little bit differently from a technology",
    "start": "564519",
    "end": "570640"
  },
  {
    "text": "standpoint and and we'll talk about how so those are the three different interactions we're going to talk",
    "start": "570640",
    "end": "576480"
  },
  {
    "text": "about we're going to also talk about two different types of of messages uh or message patterns and the reason I bring",
    "start": "576480",
    "end": "583480"
  },
  {
    "text": "this up is because the the patterns that we're going to look at to implement these one of the differentiators is how",
    "start": "583480",
    "end": "589079"
  },
  {
    "text": "do I Implement broadcast versus point-to-point messaging so broadcast messages are",
    "start": "589079",
    "end": "595160"
  },
  {
    "text": "messages that go out to kind of a broader array of people for example if",
    "start": "595160",
    "end": "600399"
  },
  {
    "text": "you want to know the weather or when the rain rain is about to come in Chicago which is my hometown versus",
    "start": "600399",
    "end": "606600"
  },
  {
    "text": "point-to-point messages or P2P which is where we're you know pushing out individualized messages based on an",
    "start": "606600",
    "end": "612720"
  },
  {
    "text": "order ID or some other information maybe those are private right and we want to wrap some added security around them as",
    "start": "612720",
    "end": "620320"
  },
  {
    "text": "well and then just super super high level um we're going to use event bridge",
    "start": "620320",
    "end": "625519"
  },
  {
    "text": "and choreography really to manage the flow of events through our theor retical system today you can probably figure out",
    "start": "625519",
    "end": "632880"
  },
  {
    "text": "what these guys around the outskirts are we're really focused on that back end for front",
    "start": "632880",
    "end": "638800"
  },
  {
    "text": "end guy in the upper right hand corner um and we'll talk about what that",
    "start": "638800",
    "end": "644560"
  },
  {
    "text": "pattern is for just a second uh but basically we're just using event bridge and each of these Services",
    "start": "644560",
    "end": "650040"
  },
  {
    "text": "can kind of sign up for these are the the events that are important to me so back end for front end is a pretty",
    "start": "650040",
    "end": "657200"
  },
  {
    "text": "common architectural pattern that couples the need of a front-end application with some op optimized",
    "start": "657200",
    "end": "663839"
  },
  {
    "text": "backend API so it's going to handle the orchestration persistence and aggregation of data for one particular",
    "start": "663839",
    "end": "671160"
  },
  {
    "text": "front end and you might even end up with a backend for front end or BFF for each",
    "start": "671160",
    "end": "676800"
  },
  {
    "text": "of your front ends right there might be one for your IOS app and a separate one for your Android app for",
    "start": "676800",
    "end": "682920"
  },
  {
    "text": "example um as much as it sounds like this violates principles like don't repeat yourself because you will repeat",
    "start": "682920",
    "end": "689000"
  },
  {
    "text": "yourself in this case uh it actually does make things easier because it gives",
    "start": "689000",
    "end": "694040"
  },
  {
    "text": "your frontend teams more autonomy because there's a better separation of concerns and more",
    "start": "694040",
    "end": "701000"
  },
  {
    "text": "flexibility we're going to implement this is what we're going to implement in our patterns today I'm only worried",
    "start": "701000",
    "end": "707200"
  },
  {
    "text": "about the subscription aspect of it though so even the demo is really just kind of a slice it's all it's worried",
    "start": "707200",
    "end": "713639"
  },
  {
    "text": "about is getting data off of the event bus figuring out what do I need to publish and then publishing that data",
    "start": "713639",
    "end": "720600"
  },
  {
    "text": "out to subscribers you could expand on this and add kind of the query element or the synchronous loading element if",
    "start": "720600",
    "end": "726959"
  },
  {
    "text": "you wanted to but I didn't do that all right so let's talk about some",
    "start": "726959",
    "end": "732519"
  },
  {
    "start": "731000",
    "end": "1218000"
  },
  {
    "text": "real-time events and our first pattern so I'm going to spend a little bit more time on",
    "start": "732519",
    "end": "738399"
  },
  {
    "text": "this one than than some of the others just because you'll see that some of the the elements are pretty common so here",
    "start": "738399",
    "end": "744720"
  },
  {
    "text": "we're using AWS appsync which is a managed graphql service if you're not familiar graphql is a query language for",
    "start": "744720",
    "end": "752079"
  },
  {
    "text": "apis uh it helps to overcome some of the challenges with rest like over or under",
    "start": "752079",
    "end": "757519"
  },
  {
    "text": "or over or under fetching or having to make extra API calls the client also",
    "start": "757519",
    "end": "763800"
  },
  {
    "text": "asks for the data it wants and it's strongly typed so you get some bonus",
    "start": "763800",
    "end": "768920"
  },
  {
    "text": "development features validation Etc uh graphql uh has things like",
    "start": "768920",
    "end": "774920"
  },
  {
    "text": "queries to get data mutations to change data and subscription from operational",
    "start": "774920",
    "end": "781360"
  },
  {
    "text": "perspective some people think graphql adds a whole buch of extra complexity personally I really like it",
    "start": "781360",
    "end": "788480"
  },
  {
    "text": "for data driven applications you might disagree there's other patterns that that we're going to share that don't use",
    "start": "788480",
    "end": "796560"
  },
  {
    "text": "graphql I again think the benefits tend to outweigh the drawbacks all right so let's talk about",
    "start": "796560",
    "end": "802000"
  },
  {
    "text": "the pattern so we've got our event bus we have some Rule and a Lambda function",
    "start": "802000",
    "end": "807079"
  },
  {
    "text": "that's going to get invoked uh every every time our food delivery order status event hits that event",
    "start": "807079",
    "end": "814440"
  },
  {
    "text": "bus that first Lambda function that we're going to call the event handler kind of parses the event decides what's",
    "start": "814440",
    "end": "820760"
  },
  {
    "text": "going on and it writes it to a Dynamo DB table which is our view model it's the BFF's view of the current state of that",
    "start": "820760",
    "end": "828199"
  },
  {
    "text": "order then we're going to take advantage of Dynamo DB streams which is basically",
    "start": "828199",
    "end": "833399"
  },
  {
    "text": "change data capture if you're not familiar and we're going to watch for any changes that we want to act on now",
    "start": "833399",
    "end": "840639"
  },
  {
    "text": "this integration kind of comes for free with Lambda we can have a second Lambda function that gets invoked with batches",
    "start": "840639",
    "end": "847639"
  },
  {
    "text": "of messages and our stream Handler function is going to decide which of those we",
    "start": "847639",
    "end": "853440"
  },
  {
    "text": "want to publish an update against so that stream Handler function",
    "start": "853440",
    "end": "858639"
  },
  {
    "text": "is a going to perform a graphql mutation on our appsync API it's basically going",
    "start": "858639",
    "end": "865800"
  },
  {
    "text": "to create an order or it's going to update an order which is a little strange because we",
    "start": "865800",
    "end": "871839"
  },
  {
    "text": "already did that earlier right so with appsync uh mutations",
    "start": "871839",
    "end": "877880"
  },
  {
    "text": "invoke subscriptions so we have to tie together and I'll show you how to do this we have",
    "start": "877880",
    "end": "883560"
  },
  {
    "text": "to tie together a mutation with the subscription so that when that mutation",
    "start": "883560",
    "end": "889160"
  },
  {
    "text": "happens appsync will automatically notify any subscribers it actually makes your life significantly",
    "start": "889160",
    "end": "896440"
  },
  {
    "text": "easier but we don't want to actually mutate the data here so we're going to use a special kind of data source an",
    "start": "896440",
    "end": "902040"
  },
  {
    "text": "absin called none which basically just passes the inputs out to the outputs okay it's just basically a pass through",
    "start": "902040",
    "end": "909079"
  },
  {
    "text": "and we use that once in a while to kind of fake mutations or create a faw",
    "start": "909079",
    "end": "914600"
  },
  {
    "text": "mutation if you will one other thing is I like to use IM am here for authorization between my",
    "start": "914600",
    "end": "922040"
  },
  {
    "text": "Lambda function and uh my appsync API that's because it's a nice shortlived",
    "start": "922040",
    "end": "928279"
  },
  {
    "text": "credential I need to worry about managing API keys I'm looking at Eric because we have a project together where",
    "start": "928279",
    "end": "933440"
  },
  {
    "text": "we keep juggling an API key and it's painful um and as we'll talk about abson gives you a lot of flexibility here he",
    "start": "933440",
    "end": "940560"
  },
  {
    "text": "sat down at just the right time all right so that's the technology side of it kind of some of the tradeoffs because",
    "start": "940560",
    "end": "946600"
  },
  {
    "text": "everything has tradeoffs no matter what decisions we make this pattern is really really",
    "start": "946600",
    "end": "952279"
  },
  {
    "text": "flexible it can really support any kind of outof band update so I don't need to make the",
    "start": "952279",
    "end": "959079"
  },
  {
    "text": "change through my appsync API I can make the change anywhere to that data and I could eventually trigger",
    "start": "959079",
    "end": "966759"
  },
  {
    "text": "a subscription I could also swap out Dynam DB if I wanted to and replace it with",
    "start": "966759",
    "end": "973120"
  },
  {
    "text": "something like Amazon Neptune which is a managed graph database no relation to graphql in this case uh Neptune also has",
    "start": "973120",
    "end": "980480"
  },
  {
    "text": "a streams feature right so if you have that kind of change data capture going you can take advantage of this one of",
    "start": "980480",
    "end": "988040"
  },
  {
    "text": "the things I also really like about this pattern is the Event Source mapping that Lambda provides for you out of the box",
    "start": "988040",
    "end": "994959"
  },
  {
    "text": "so you can do things like filtering filtering can make your code a lot simpler and also reduce the cost of",
    "start": "994959",
    "end": "1002800"
  },
  {
    "text": "running your Lambda function because maybe you only care about inserts and updates like I do in this case so you",
    "start": "1002800",
    "end": "1010680"
  },
  {
    "text": "can ignore deletes you can even get more specific than that using a a syntax that",
    "start": "1010680",
    "end": "1016199"
  },
  {
    "text": "looks a little bit like a vent Bridge rules uh you Al also can do things like partial batch failure automatically",
    "start": "1016199",
    "end": "1023079"
  },
  {
    "text": "which again we use in the demo uh this is really flexible from a subscription standpoint we'll talk about",
    "start": "1023079",
    "end": "1029798"
  },
  {
    "text": "how you can build kind of different types of subscriptions pretty easily here on the flip side maybe you think",
    "start": "1029799",
    "end": "1036360"
  },
  {
    "text": "this have some added complexity right maybe graphql isn't you're not a big graphql fan either way there's a couple",
    "start": "1036360",
    "end": "1043079"
  },
  {
    "text": "of Lambda functions here that you need to manage my code personally is almost always a liability",
    "start": "1043079",
    "end": "1049559"
  },
  {
    "text": "right I'm always trying to troubleshoot something um and then the websocket",
    "start": "1049559",
    "end": "1054880"
  },
  {
    "text": "connection here is actually just a one-way connection so the way it works with appsync and graphql is the client",
    "start": "1054880",
    "end": "1061880"
  },
  {
    "text": "performs a subscription operation it says hey I'd like to subscribe for updates the appsync server is going to",
    "start": "1061880",
    "end": "1068240"
  },
  {
    "text": "respond with a secure websocket URI and then the client goes through the process of handshaking and and creating that",
    "start": "1068240",
    "end": "1074919"
  },
  {
    "text": "connection but again it's only one way absin can send updates to the client but",
    "start": "1074919",
    "end": "1080080"
  },
  {
    "text": "the client cannot send updates back to apps over the websocket there's other patterns that we'll talk about where you",
    "start": "1080080",
    "end": "1086080"
  },
  {
    "text": "do have that two-way connection um so all of these sorry",
    "start": "1086080",
    "end": "1093039"
  },
  {
    "text": "hopefully it's visible way down in the bottom corner there uh it has some of the off options that's available for you",
    "start": "1093039",
    "end": "1099000"
  },
  {
    "text": "the pinky color means you can't do it the green color means you can so with appsync you have a lot of flexibility",
    "start": "1099000",
    "end": "1105159"
  },
  {
    "text": "from an off perspective but there is no public and point with appsync right",
    "start": "1105159",
    "end": "1111039"
  },
  {
    "text": "everything needs to be signed or authenticated in some way uh in the demo we have kind of a guest mode right I",
    "start": "1111039",
    "end": "1118039"
  },
  {
    "text": "don't need to sign in but there is a Cognito identity pool involved to support broadcast versus",
    "start": "1118039",
    "end": "1125200"
  },
  {
    "text": "pointto point it's a mix between the client and the server so everything in graphql is based",
    "start": "1125200",
    "end": "1132480"
  },
  {
    "text": "off of a schema and this is just part of the schema from the demo there's two",
    "start": "1132480",
    "end": "1137520"
  },
  {
    "text": "mutations or uh data change operations that we can make creating an order or",
    "start": "1137520",
    "end": "1142919"
  },
  {
    "text": "updating an order and then we've got this at AWS subscribe directive and",
    "start": "1142919",
    "end": "1148919"
  },
  {
    "text": "that's basically where you tie together the mutation and the subscription and we're saying here if we",
    "start": "1148919",
    "end": "1154919"
  },
  {
    "text": "create an order or update an order we want to trigger this subscription and send anybody that wants that cares about",
    "start": "1154919",
    "end": "1161520"
  },
  {
    "text": "creating or updating an order an update the other tricky thing here is",
    "start": "1161520",
    "end": "1169120"
  },
  {
    "text": "order ID so we can choose to pass that parameter in or not so to make an",
    "start": "1169120",
    "end": "1175039"
  },
  {
    "text": "argument required you put a little exclamation point after the type ID is",
    "start": "1175039",
    "end": "1180240"
  },
  {
    "text": "the type in this case so if the uh argument's not there it's basically broadcast right every you're going to",
    "start": "1180240",
    "end": "1187120"
  },
  {
    "text": "get every order update which is what our demo does for the most part or you can specify an order",
    "start": "1187120",
    "end": "1193400"
  },
  {
    "text": "ID and on the client side this is using the amplify client but it holds true",
    "start": "1193400",
    "end": "1198520"
  },
  {
    "text": "with Apollo and others as well we basically just choose to include that order ID as a variable or not when we",
    "start": "1198520",
    "end": "1204240"
  },
  {
    "text": "perform the subscription so a lot of flexibility here may look different for your API may be slightly more complex uh",
    "start": "1204240",
    "end": "1212000"
  },
  {
    "text": "there's also some enhanced subscription stuff that you can do here as well to limit what data goes out to",
    "start": "1212000",
    "end": "1217720"
  },
  {
    "text": "subscribers second pattern looks a little bit like the first one but simpler okay and it's actually going to",
    "start": "1217720",
    "end": "1224840"
  },
  {
    "start": "1218000",
    "end": "1566000"
  },
  {
    "text": "share some commonalities because again we're using appsync as the front door here I promise this is the last graphql",
    "start": "1224840",
    "end": "1231480"
  },
  {
    "text": "pattern though okay in this case we're taking advantage of a direct integration",
    "start": "1231480",
    "end": "1237320"
  },
  {
    "text": "that we built between eventbridge and appsync and basically you can have uh an",
    "start": "1237320",
    "end": "1243039"
  },
  {
    "text": "eventbridge rule that targets an absin API as the",
    "start": "1243039",
    "end": "1249600"
  },
  {
    "text": "destination so kind of the rule looks very much the same the configuration is a little different it's going to invoke",
    "start": "1249600",
    "end": "1255919"
  },
  {
    "text": "our appsync API and then appsync Sy is actually going to perform the the data mutation operation on the Dynamo DB",
    "start": "1255919",
    "end": "1262960"
  },
  {
    "text": "table itself and it does that using a resolver which can be written in",
    "start": "1262960",
    "end": "1268080"
  },
  {
    "text": "JavaScript or vtl velocity templating language which is I guess nobody's favorite thing to do except Erics who's",
    "start": "1268080",
    "end": "1276600"
  },
  {
    "text": "giving me a face um in this case we're not using a non uh data source we're actually going",
    "start": "1276600",
    "end": "1282559"
  },
  {
    "text": "to use a Dynamo DB data source right so we're going to change the data directly from appsync so it does simplify",
    "start": "1282559",
    "end": "1290760"
  },
  {
    "text": "things it also makes some things a little bit harder the magic here is really in the",
    "start": "1290760",
    "end": "1296520"
  },
  {
    "text": "graphql uh uh in the event Bridge rule itself though so this is a very simple direct",
    "start": "1296520",
    "end": "1303840"
  },
  {
    "text": "integration but it's a lot of the the benefits and drawbacks are very similar to the first pattern because again",
    "start": "1303840",
    "end": "1310240"
  },
  {
    "text": "appsync is the front door one other thing I want to add but it's less applicable with this type of",
    "start": "1310240",
    "end": "1316520"
  },
  {
    "text": "client is absin can also support private Integrations so if you only want access to the API uh for on your like local",
    "start": "1316520",
    "end": "1324360"
  },
  {
    "text": "private Network you can do that in this case we are reliant on the input transformation capabilities that",
    "start": "1324360",
    "end": "1330520"
  },
  {
    "text": "event Bridge provides um you could do something like a what's called a pipeline resolver in",
    "start": "1330520",
    "end": "1336240"
  },
  {
    "text": "appsync but you'd have to add some complexity if you want to do more than kind of basic data",
    "start": "1336240",
    "end": "1342279"
  },
  {
    "text": "mapping um you might also change the the input to your graphql API if you needed",
    "start": "1342279",
    "end": "1347880"
  },
  {
    "text": "to kind of change the data in a more complex way than just simply kind of",
    "start": "1347880",
    "end": "1352919"
  },
  {
    "text": "mapping data from one place to the other one other thing to add here is that debugging might be a little bit",
    "start": "1352919",
    "end": "1358880"
  },
  {
    "text": "more challenging in some cases I like to use eventbridge dead letter cues or cloudwatch logs that tends to be the",
    "start": "1358880",
    "end": "1366039"
  },
  {
    "text": "easiest way to find when I've made some sort of mistake in",
    "start": "1366039",
    "end": "1371120"
  },
  {
    "text": "configuration the event bridge console actually has a very very simple integration um to put this together when",
    "start": "1372520",
    "end": "1380320"
  },
  {
    "text": "you go create your event Bridge rule you create a Target specify that it's appsync and then the pick your API the",
    "start": "1380320",
    "end": "1388760"
  },
  {
    "text": "console is then smart enough to go introspect the graphql schema figure out what mutations and which types are",
    "start": "1388760",
    "end": "1394720"
  },
  {
    "text": "available uh and then it helps you kind of pick all of that including what's called The Selection set and I'll talk",
    "start": "1394720",
    "end": "1401279"
  },
  {
    "text": "about that in a second plus it's got a really nice wizard for the input Transformer as well",
    "start": "1401279",
    "end": "1407120"
  },
  {
    "text": "so this is drawn again Direct from the demo but even nicer is there's a little",
    "start": "1407120",
    "end": "1412559"
  },
  {
    "text": "button that I'm not showing here that allows you to export that definition to cloud formation in yaml or",
    "start": "1412559",
    "end": "1419200"
  },
  {
    "text": "Jason so this is just a bit of the cloud formation definition we'll look at a little bit more in a second but again",
    "start": "1419200",
    "end": "1425760"
  },
  {
    "text": "the magic is kind of in this graphql operation block and if you've used",
    "start": "1425760",
    "end": "1431000"
  },
  {
    "text": "graphql it should look pretty familiar we're basically just describe uh",
    "start": "1431000",
    "end": "1436080"
  },
  {
    "text": "specifying which mutation we want to run specifying any input I personally like",
    "start": "1436080",
    "end": "1442039"
  },
  {
    "text": "to just have one input parameter as opposed to trying to have like five or 10 it just makes things easier from a",
    "start": "1442039",
    "end": "1448640"
  },
  {
    "text": "mapping standpoint you can also Define input types in your graphql schema uh there's two things to note",
    "start": "1448640",
    "end": "1455679"
  },
  {
    "text": "here one is that this role the order API rule role has to have permission to",
    "start": "1455679",
    "end": "1460880"
  },
  {
    "text": "invoke your absin API it has to support I am like that's the only off that you",
    "start": "1460880",
    "end": "1466919"
  },
  {
    "text": "can do between a vent Bridge and appsync and the other bit that's actually really",
    "start": "1466919",
    "end": "1472120"
  },
  {
    "text": "important is that appsync has two different Arns one is for the API itself and one",
    "start": "1472120",
    "end": "1479159"
  },
  {
    "text": "is for the endpoint and I won't try to explain why both of those exist but you need the endpoint Arn here it's",
    "start": "1479159",
    "end": "1486600"
  },
  {
    "text": "available in cloud formation or terraform or whatever you choose to use but you have to use the endpoint Arn or",
    "start": "1486600",
    "end": "1493039"
  },
  {
    "text": "it's all going to fail all right and then this is the second step this is where we kind of do that input transformation and again it's",
    "start": "1493039",
    "end": "1500320"
  },
  {
    "text": "basically taking parts of the uh event detail in this case customer ID and",
    "start": "1500320",
    "end": "1507000"
  },
  {
    "text": "mapping it to the input payload for our graphql operation so one other tip that I want",
    "start": "1507000",
    "end": "1513679"
  },
  {
    "text": "to throw out in case you choose to explore this pattern because I've tripped over this myself more times than I can count is when you uh do a graphql",
    "start": "1513679",
    "end": "1522480"
  },
  {
    "text": "mutation you specify this list of fields here and this is the selection set it's",
    "start": "1522480",
    "end": "1528120"
  },
  {
    "text": "B basically the set of data that's going to get res returned to whatever is",
    "start": "1528120",
    "end": "1534279"
  },
  {
    "text": "performing this mutation now frankly that doesn't matter so much for eventbridge for eventbridge it's kind of",
    "start": "1534279",
    "end": "1540240"
  },
  {
    "text": "fire and forget unless it's there's an air code that comes back vent Bridge doesn't care that I'm returning the",
    "start": "1540240",
    "end": "1547039"
  },
  {
    "text": "customer ID but subscribers care and the",
    "start": "1547039",
    "end": "1552480"
  },
  {
    "text": "selection set for your mutation actually influences what data subscribers have available to them",
    "start": "1552480",
    "end": "1559000"
  },
  {
    "text": "so if you ever get to the point where one of these is null that's why make sure you go back and add it to your sub",
    "start": "1559000",
    "end": "1564480"
  },
  {
    "text": "uh selection set all right let's get out of the graphql universe talk a little bit about",
    "start": "1564480",
    "end": "1569760"
  },
  {
    "start": "1566000",
    "end": "1742000"
  },
  {
    "text": "API Gateway so this is our third pattern and in this case we're going to use uh",
    "start": "1569760",
    "end": "1574960"
  },
  {
    "text": "API Gateway instead of appsync as the front door there are some similarities and I'm not going to talk about those",
    "start": "1574960",
    "end": "1581279"
  },
  {
    "text": "because you've already heard me go through them but we've got our event handler which is a Lambda function it",
    "start": "1581279",
    "end": "1587200"
  },
  {
    "text": "writes the order data to Dynamo DB the stream Handler does need to change a little bit in terms of what its",
    "start": "1587200",
    "end": "1593880"
  },
  {
    "text": "responsibilities are but there's a couple other bits that have to happen even before we can push out data to our",
    "start": "1593880",
    "end": "1601919"
  },
  {
    "text": "subscribers the first is when you're dealing with uh API Gateway connection management is a little bit more",
    "start": "1601919",
    "end": "1608559"
  },
  {
    "text": "do-it-yourself with appsync it just kind of worked like it it kind of managed everything for you once the client sent",
    "start": "1608559",
    "end": "1614760"
  },
  {
    "text": "that graphql subscription operation through in the the API Gateway world when a websocket Conn uh request comes",
    "start": "1614760",
    "end": "1622039"
  },
  {
    "text": "in there's a connect route or a connect event and in our sample we actually uh",
    "start": "1622039",
    "end": "1629080"
  },
  {
    "text": "manage that through two different Lambda functions the first handles connect the second handles",
    "start": "1629080",
    "end": "1634919"
  },
  {
    "text": "disconnect basically what it does is it takes each of those and writes a connection ID into what I'm calling the",
    "start": "1634919",
    "end": "1641559"
  },
  {
    "text": "client's table so you can imagine there's this list of like random strings",
    "start": "1641559",
    "end": "1647000"
  },
  {
    "text": "those are our connections API Gateway kind of knows which which is which but",
    "start": "1647000",
    "end": "1652080"
  },
  {
    "text": "anytime I want to push an update out to a client I need to know their connection ID so that stream Handler needs to",
    "start": "1652080",
    "end": "1659799"
  },
  {
    "text": "change in order to send updates out to any subscribers The Stream Handler also needs to go look up hey who wants to",
    "start": "1659799",
    "end": "1667360"
  },
  {
    "text": "know about this in that client table so there's actually kind of a a Dynamo DB",
    "start": "1667360",
    "end": "1673360"
  },
  {
    "text": "uh query involved here uh the stream Handler also needs to have permission as it does with appsync",
    "start": "1673360",
    "end": "1680559"
  },
  {
    "text": "to perform this post to connection action which is what API Gateway calls",
    "start": "1680559",
    "end": "1685960"
  },
  {
    "text": "it so you're going to need permission for that as well so the stream Handler becomes a little bit more",
    "start": "1685960",
    "end": "1692720"
  },
  {
    "text": "complex you can do a lot with this uh this example but there are more moving",
    "start": "1692720",
    "end": "1698919"
  },
  {
    "text": "parts right there's a couple more Lambda functions that might become liabilities for you although we do have a bunch of",
    "start": "1698919",
    "end": "1705000"
  },
  {
    "text": "patterns on serverless land and other docs that can help you get started there's no true broadcast message here",
    "start": "1705000",
    "end": "1711360"
  },
  {
    "text": "you actually if there's a whole list of subscribers that want the data I'd actually have to iterate through each",
    "start": "1711360",
    "end": "1716440"
  },
  {
    "text": "one and send the message individually and then if you do want to have kind of that synchronous asynchronous type approach you'd",
    "start": "1716440",
    "end": "1723000"
  },
  {
    "text": "actually need a second API Gateway instance uh this is a more general",
    "start": "1723000",
    "end": "1728600"
  },
  {
    "text": "purpose websocket connection though it is two-way so this might work well if you're building like a chat",
    "start": "1728600",
    "end": "1733720"
  },
  {
    "text": "application and it is a public web socket so you don't need to sign it if you don't want to and this is actually",
    "start": "1733720",
    "end": "1739720"
  },
  {
    "text": "the only example in the demo that does that all right last last pattern we're",
    "start": "1739720",
    "end": "1745080"
  },
  {
    "start": "1742000",
    "end": "1855000"
  },
  {
    "text": "going to share here because I'm probably running behind but in this case we're we're swapping in iot core which seems a",
    "start": "1745080",
    "end": "1752159"
  },
  {
    "text": "little odd because it's not an iot application but actually serverless espresso uses this downstairs to commun",
    "start": "1752159",
    "end": "1759799"
  },
  {
    "text": "communicate between what's happening on the back end and what you see on the front end so if you ordered a coffee",
    "start": "1759799",
    "end": "1765679"
  },
  {
    "text": "that front end application as well as what the Barista sees is all driven through iot core and iot core provides a",
    "start": "1765679",
    "end": "1773840"
  },
  {
    "text": "published subscribe model using mqtt topics mqtt is a lightweight uh publish",
    "start": "1773840",
    "end": "1780360"
  },
  {
    "text": "subscribe messaging protocol it's mostly designed for uh remote devices with",
    "start": "1780360",
    "end": "1786159"
  },
  {
    "text": "minimal code and bandwidth so think like switches sensors attenuators and",
    "start": "1786159",
    "end": "1791200"
  },
  {
    "text": "basically you just specify a topic using a string so it's really really easy but",
    "start": "1791200",
    "end": "1796679"
  },
  {
    "text": "you can also misspell things things and then it becomes hard so this one is very flexible it's",
    "start": "1796679",
    "end": "1802960"
  },
  {
    "text": "really easy to add new topics and frankly the difference between broadcast and pointto point is just the topic",
    "start": "1802960",
    "end": "1808760"
  },
  {
    "text": "name uh again it supports two-way um but then you also have a more limited set of",
    "start": "1808760",
    "end": "1814559"
  },
  {
    "text": "off options here uh I am am and Cognito uh but you can also use an x509",
    "start": "1814559",
    "end": "1821000"
  },
  {
    "text": "certificate which is really only applicable for iot in a lot of cases iot core also only has a single endpoint per",
    "start": "1821000",
    "end": "1828200"
  },
  {
    "text": "account per region so if you set up the demo you actually see there's a a step that we go through uh to get this done",
    "start": "1828200",
    "end": "1834399"
  },
  {
    "text": "but it's great for for simple back simple cases this is what it looks like uh in",
    "start": "1834399",
    "end": "1839960"
  },
  {
    "text": "the demo for the client to subscribe I'll be honest I spent an undue amount of time making this happen",
    "start": "1839960",
    "end": "1847159"
  },
  {
    "text": "I'm not sure why like I might have just taken a bad approach uh but it was a lot harder than I thought it would",
    "start": "1847159",
    "end": "1853159"
  },
  {
    "text": "be all right so before I actually go run the demo this is what what happening on the",
    "start": "1853159",
    "end": "1858760"
  },
  {
    "start": "1855000",
    "end": "1979000"
  },
  {
    "text": "back end way on the far end of the screen there's a little order simulator it just",
    "start": "1858760",
    "end": "1864600"
  },
  {
    "text": "publishes orders and updates at random intervals I think I said it for 15",
    "start": "1864600",
    "end": "1870000"
  },
  {
    "text": "seconds so we're not sitting here for 10 minutes waiting for this thing to run and then on the screen is a react",
    "start": "1870000",
    "end": "1876679"
  },
  {
    "text": "application and all four of those patterns are hooked up to it okay when I",
    "start": "1876679",
    "end": "1882279"
  },
  {
    "text": "click the button at the top that little widget actually I should probably go see if we can make there we go",
    "start": "1882279",
    "end": "1889320"
  },
  {
    "text": "big there's my mouse uh when I click this start simulation button that little widget up at the top is going to do more",
    "start": "1889320",
    "end": "1895679"
  },
  {
    "text": "of a point topoint type connection where it's only listening for updates on one order all of the rest are listening for",
    "start": "1895679",
    "end": "1902919"
  },
  {
    "text": "broadcast messages so you'll see that they're pulling for every order and look at that it",
    "start": "1902919",
    "end": "1910320"
  },
  {
    "text": "worked but you might notice there's some differences in latency and there might",
    "start": "1910320",
    "end": "1915760"
  },
  {
    "text": "also be some differences in ordering that does happen once in a while pattern two tends to look the",
    "start": "1915760",
    "end": "1923760"
  },
  {
    "text": "fastest right but that's because it's got that direct integration between event bridge and appsync there's no",
    "start": "1923760",
    "end": "1931080"
  },
  {
    "text": "batching of events on a on a Dynamo DB stream in that case but it may not be the best fit for your workload right",
    "start": "1931080",
    "end": "1938039"
  },
  {
    "text": "everything comes with tradeoffs um so we'll let this just go",
    "start": "1938039",
    "end": "1943799"
  },
  {
    "text": "for a second here see they they start to come fast and furious after a little bit",
    "start": "1943799",
    "end": "1949120"
  },
  {
    "text": "uh the order simulator again is just kind of sending out random updates uh at random intervals um but it does kind of",
    "start": "1949120",
    "end": "1955639"
  },
  {
    "text": "follow the the the path it does use step function so that events do come in",
    "start": "1955639",
    "end": "1961080"
  },
  {
    "text": "sequence as you would expect for any given order uh so I'd encourage you to go try it out the little green squarish",
    "start": "1961080",
    "end": "1968159"
  },
  {
    "text": "thing by the way just means that it's connected to the back end and again I'll uh share a link at the end with that uh",
    "start": "1968159",
    "end": "1976480"
  },
  {
    "text": "repository that's my my video in case the demo doesn't work all right so quick bonus pattern",
    "start": "1976480",
    "end": "1982639"
  },
  {
    "start": "1979000",
    "end": "2006000"
  },
  {
    "text": "polling again you can do this with just API Gateway but you're pushing more responsibility to the",
    "start": "1982639",
    "end": "1989480"
  },
  {
    "text": "client uh might be a good fit in some situations one of them might be that my team is familiar with rest and they know",
    "start": "1989480",
    "end": "1996080"
  },
  {
    "text": "how to use rest right uh so that is very very familiar but it's poll-based it's",
    "start": "1996080",
    "end": "2003480"
  },
  {
    "text": "intermittent let's talk about some long running processes and how do I deal with with that the good news is you can",
    "start": "2003480",
    "end": "2010320"
  },
  {
    "start": "2006000",
    "end": "2233000"
  },
  {
    "text": "actually apply all of the patterns we just went through to this use case as well I'm going to use pattern number two",
    "start": "2010320",
    "end": "2017960"
  },
  {
    "text": "because I like it I don't have to write any code so this is a pretty basic example I",
    "start": "2017960",
    "end": "2025120"
  },
  {
    "text": "think right after this downstairs there's a talk about geni um but this uses gen with Amazon",
    "start": "2025120",
    "end": "2032480"
  },
  {
    "text": "Bedrock where basically we have a really simple chat this is also available in the demo just further down the page I",
    "start": "2032480",
    "end": "2039080"
  },
  {
    "text": "didn't show it to you but you can ask our chatbot a question to help plan your",
    "start": "2039080",
    "end": "2044840"
  },
  {
    "text": "pizza party it generally responds pretty fast but in the demo there's actually an",
    "start": "2044840",
    "end": "2051240"
  },
  {
    "text": "added step in the step function State machine where you can put in a randomized delay if you want to make it",
    "start": "2051240",
    "end": "2056599"
  },
  {
    "text": "look longer so this doesn't handle like chaining or context it's just meant to",
    "start": "2056599",
    "end": "2062040"
  },
  {
    "text": "give you some feel for how you could architect this and basically once that that model",
    "start": "2062040",
    "end": "2067878"
  },
  {
    "text": "returns a response it's going to then publish uh uh that response through",
    "start": "2067879",
    "end": "2073560"
  },
  {
    "text": "event Bridge kind of through that event bridge to appsync channel again um there is no response streaming",
    "start": "2073560",
    "end": "2081398"
  },
  {
    "text": "here response streaming does tend to be important for these use cases but unfortunately none of the patterns that",
    "start": "2081399",
    "end": "2087200"
  },
  {
    "text": "we talked about today really support response streaming you'd have to look elsewhere for that um I'm using appsync",
    "start": "2087200",
    "end": "2093679"
  },
  {
    "text": "but if you wanted to use iot core you could do that just have a different topic with API Gateway you could do that",
    "start": "2093679",
    "end": "2101280"
  },
  {
    "text": "but you'd have to keep track of the connection map the connection ID to uh",
    "start": "2101280",
    "end": "2106480"
  },
  {
    "text": "whatever the chat I'm sorry the connection ID to the chat ID in some way right so you can do that on toone",
    "start": "2106480",
    "end": "2112160"
  },
  {
    "text": "correlation here I can just kind of do that automatically using the the appsync",
    "start": "2112160",
    "end": "2117560"
  },
  {
    "text": "resolver so this approach is really robust we've got a query or a synchronous call that kind of starts the",
    "start": "2117560",
    "end": "2124760"
  },
  {
    "text": "conversation it returns some randomized ID and then the client can subscribe to",
    "start": "2124760",
    "end": "2130240"
  },
  {
    "text": "any updates to that ID so the the the response could come in 5 seconds or it",
    "start": "2130240",
    "end": "2135520"
  },
  {
    "text": "could come in five hours well five hours might be too long frankly the connection might time out by then but it could",
    "start": "2135520",
    "end": "2141040"
  },
  {
    "text": "respond in minutes and you'd still be okay you're not worried about chasing like your P90 or P99 at that",
    "start": "2141040",
    "end": "2149040"
  },
  {
    "text": "point now you can also apply this approach to other means this is the diagram I talked about earlier this was",
    "start": "2149040",
    "end": "2155520"
  },
  {
    "text": "like a corner of a page in my reinvent talk last year but here we're doing some data analysis using Amazon",
    "start": "2155520",
    "end": "2162560"
  },
  {
    "text": "Athena again it's using absin because as you can tell I like it but the client is basically going to kick off some query",
    "start": "2162560",
    "end": "2170240"
  },
  {
    "text": "Athena is going to go run that query asynchronously and we can drop the results of that Athena query into an",
    "start": "2170240",
    "end": "2176800"
  },
  {
    "text": "Amazon S3 bucket when we're finished when that happens S3 will shoot",
    "start": "2176800",
    "end": "2182319"
  },
  {
    "text": "off a hey there's a new object here and we can invoke a Lambda function that function then can go do",
    "start": "2182319",
    "end": "2188680"
  },
  {
    "text": "probably using the nun data source can go publish to subscribers that hey your",
    "start": "2188680",
    "end": "2195480"
  },
  {
    "text": "results are ready and maybe whatever comes out to the client is like a pre-signed S3 URL where the client can",
    "start": "2195480",
    "end": "2202400"
  },
  {
    "text": "go download that information but again this could take minutes right it's not a",
    "start": "2202400",
    "end": "2207720"
  },
  {
    "text": "big deal and we're not blocking on the client side so this is a really useful pattern again I I have a lot of",
    "start": "2207720",
    "end": "2214400"
  },
  {
    "text": "customers asking about this right now because of generative AI but I've also worked with customers that have Legacy",
    "start": "2214400",
    "end": "2220400"
  },
  {
    "text": "apis that run for like way more than 30 seconds at times and this is a much more robust pattern for your clients uh and",
    "start": "2220400",
    "end": "2228160"
  },
  {
    "text": "probably less expensive to run overtime all right our last interaction pattern is push",
    "start": "2228160",
    "end": "2234400"
  },
  {
    "start": "2233000",
    "end": "2524000"
  },
  {
    "text": "notifications we are all familiar with these things they bother us throughout the day but again they have some fairly",
    "start": "2234400",
    "end": "2241400"
  },
  {
    "text": "different semantics and different technology involved including Tech that we don't own right right we're reliant",
    "start": "2241400",
    "end": "2248359"
  },
  {
    "text": "on Apple or Google or maybe Firefox if you're doing a web push notification they're all kind of in the",
    "start": "2248359",
    "end": "2255359"
  },
  {
    "text": "mix and it might have a similar purpose to the realtime events but in the case",
    "start": "2255359",
    "end": "2261720"
  },
  {
    "text": "of the demo we've limited push notifications to only when your order goes out for",
    "start": "2261720",
    "end": "2266880"
  },
  {
    "text": "delivery because you saw right it's kind of Chatty and if I got that many push notifications from One Source it would",
    "start": "2266880",
    "end": "2273079"
  },
  {
    "text": "get silenced pretty quickly right so we don't want to do that um",
    "start": "2273079",
    "end": "2278880"
  },
  {
    "text": "um so mobile and web are a little bit different and I'll talk about both plus",
    "start": "2278880",
    "end": "2284240"
  },
  {
    "text": "how we associate uh uh things to do a point-to-point update so this is how I've implemented",
    "start": "2284240",
    "end": "2291480"
  },
  {
    "text": "browser notifications or web push notifications in the demo I kept it to as many kind of cloud native Primitives",
    "start": "2291480",
    "end": "2298520"
  },
  {
    "text": "as possible to really show how this works um but in order to register for",
    "start": "2298520",
    "end": "2305599"
  },
  {
    "text": "those updates there's actually a couple things things that need to happen first",
    "start": "2305599",
    "end": "2310680"
  },
  {
    "text": "the user actually has to subscribe for notifications and allow them to happen in that in that browser now if you're",
    "start": "2310680",
    "end": "2317800"
  },
  {
    "text": "using something like Safari you can't just pop up hey subscribe to my website because that's annoying right you have",
    "start": "2317800",
    "end": "2324960"
  },
  {
    "text": "to click on a button that says I'd like to subscribe and then there's a permission that pops up that you as the user then need to accept when that",
    "start": "2324960",
    "end": "2332839"
  },
  {
    "text": "happens in the case of the demo we're actually sending some information that the browser provides to us including",
    "start": "2332839",
    "end": "2340040"
  },
  {
    "text": "like a unique endpoint and a couple of tokens that we can use to send notifications later across to API Gateway I just used",
    "start": "2340040",
    "end": "2349280"
  },
  {
    "text": "API Gateway as kind of a proxy for a vent Bridge here but we have to store that data in a subscriptions",
    "start": "2349280",
    "end": "2356280"
  },
  {
    "text": "table then later on when somebody places an order we have to associate that",
    "start": "2356280",
    "end": "2361960"
  },
  {
    "text": "particular subscription with the order uh I'm just hashing the endpoint to make that happen happen but maybe you",
    "start": "2361960",
    "end": "2368119"
  },
  {
    "text": "have a different approach then later on we've got that event handler again right so as the",
    "start": "2368119",
    "end": "2374680"
  },
  {
    "text": "order updates the events are flowing through the bus again we just subscribe for the",
    "start": "2374680",
    "end": "2380240"
  },
  {
    "text": "out for delivery status when our event handler sees that",
    "start": "2380240",
    "end": "2385800"
  },
  {
    "text": "it goes and it checks are there any subscribers to this particular order if the answer is yes I'm just using an",
    "start": "2385800",
    "end": "2392720"
  },
  {
    "text": "open- Source web push library to push that update out to whatever the",
    "start": "2392720",
    "end": "2398119"
  },
  {
    "text": "notification service is so it might be Google Firebase it might be Apple's push notification service Firefox again has",
    "start": "2398119",
    "end": "2405960"
  },
  {
    "text": "their own then it kind of goes goes outside of your control and those notifications are delivered on best",
    "start": "2405960",
    "end": "2413319"
  },
  {
    "text": "effort so this is pretty manual but again I did that purposely there are ways to abstract this away a little bit",
    "start": "2413319",
    "end": "2419880"
  },
  {
    "text": "more and if you're doing mobile push I would actually encourage you to use something like Firebase or Amazon",
    "start": "2419880",
    "end": "2426800"
  },
  {
    "text": "pinpoint because they will manage more of the who's connected what are the device",
    "start": "2426800",
    "end": "2432319"
  },
  {
    "text": "tokens they give you some device sdks to make it easier to get that data and to",
    "start": "2432319",
    "end": "2437440"
  },
  {
    "text": "map different user attributes to it as well so this is just a quick version of how you could do this with pinpoint um",
    "start": "2437440",
    "end": "2444640"
  },
  {
    "text": "again you have to register the device ask for permission we've all been through that match it to a user account",
    "start": "2444640",
    "end": "2451480"
  },
  {
    "text": "so once I have that device token I have to to match it to some maybe it's my",
    "start": "2451480",
    "end": "2457680"
  },
  {
    "text": "like I don't know food delivery account in pinpoint but I'm not manually tracking an endpoint like I did",
    "start": "2457680",
    "end": "2464960"
  },
  {
    "text": "earlier and then when that notification comes in I'm sorry when that event comes in uh we still need to look up maybe",
    "start": "2464960",
    "end": "2472040"
  },
  {
    "text": "like a customer ID to associate the order uh with that customer pinpoint",
    "start": "2472040",
    "end": "2477680"
  },
  {
    "text": "then will take care of pushing this through the notification service so that eventually it ends up on your screen",
    "start": "2477680",
    "end": "2483920"
  },
  {
    "text": "this is meant to make things easier uh you can use Amazon s s to do push notifications as well but the connection",
    "start": "2483920",
    "end": "2490240"
  },
  {
    "text": "management and some of the subscriptions becomes a little bit more DIY uh as well",
    "start": "2490240",
    "end": "2495280"
  },
  {
    "text": "I would definitely encourage you to use some of these abstractions when you have these use",
    "start": "2495280",
    "end": "2500359"
  },
  {
    "text": "cases all right so that was three different interaction patterns like six or sevenish different",
    "start": "2500359",
    "end": "2506839"
  },
  {
    "text": "technical patterns that you can use to implement them uh for realtime events long running processes and and push",
    "start": "2506839",
    "end": "2513760"
  },
  {
    "text": "notifications so hopefully these help you build uh richer more interactive",
    "start": "2513760",
    "end": "2519000"
  },
  {
    "text": "front ends that are driven off of the events that are already flowing around in your back end so all of the sample",
    "start": "2519000",
    "end": "2525960"
  },
  {
    "start": "2524000",
    "end": "2552000"
  },
  {
    "text": "code is available out there on GitHub if you find a bug let me know uh but I'd love to hear if you play have an",
    "start": "2525960",
    "end": "2531800"
  },
  {
    "text": "opportunity to play around with it thank you so much have a good rest of the day",
    "start": "2531800",
    "end": "2539040"
  }
]