[
  {
    "text": "[Music] okay so this is my talk I work at a",
    "start": "6990",
    "end": "14340"
  },
  {
    "text": "company called Douglas Connect which is a small a small company in Switzerland that works in toxicology and we built",
    "start": "14340",
    "end": "21570"
  },
  {
    "text": "two of our products in Elm and I want to talk to you a bit about my journey that",
    "start": "21570",
    "end": "28770"
  },
  {
    "text": "brought me to Al and what I like about it and about this kind of languages so",
    "start": "28770",
    "end": "34680"
  },
  {
    "text": "one idle Sunday this this year this summer I brought this I made this little map of",
    "start": "34680",
    "end": "40229"
  },
  {
    "text": "like programming languages that I I know and I like and I experienced at some",
    "start": "40229",
    "end": "45750"
  },
  {
    "text": "point in my life so I started out in the non garbage collected deserts in C and C++ and then I worked there for a while",
    "start": "45750",
    "end": "55350"
  },
  {
    "text": "and then I started to go more to the object-oriented mountains to c-sharp mostly I did a bit of Java as well I",
    "start": "55350",
    "end": "62940"
  },
  {
    "text": "mean I think for most intents and purposes they're very similar there were a couple of things I brought some",
    "start": "62940",
    "end": "69979"
  },
  {
    "text": "multi-threaded Windows desktop applications for statistics basically and there were a couple of things that I",
    "start": "69979",
    "end": "76979"
  },
  {
    "text": "really liked about it but then over time there were also these things that started to really annoy me two-way",
    "start": "76979",
    "end": "84000"
  },
  {
    "text": "data-binding was very nice in like theory but in practice it led to very",
    "start": "84000",
    "end": "89039"
  },
  {
    "text": "big problems in complex code object-oriented design patterns are cool",
    "start": "89039",
    "end": "95700"
  },
  {
    "text": "and they allow you to think a certain way but I often found that they are a kind of a distraction also I then went",
    "start": "95700",
    "end": "105119"
  },
  {
    "text": "into the dynamically typed swamps I call them swamps because I think it's a bit hard to build big projects in them",
    "start": "105119",
    "end": "113249"
  },
  {
    "text": "in a solid way that like endure for a long time in big teams I did some Python",
    "start": "113249",
    "end": "119310"
  },
  {
    "text": "work I'm still using that at the moment quite a bit JavaScript I started to build web front-ends in JavaScript and I",
    "start": "119310",
    "end": "127079"
  },
  {
    "text": "had this problem that refactorings are really error-prone I think that was one of my main pain points whenever I",
    "start": "127079",
    "end": "133220"
  },
  {
    "text": "changed something in JavaScript you have to be really diligent to make sure that you capture all usages and make sure",
    "start": "133220",
    "end": "140210"
  },
  {
    "text": "that changed data structures are caught everywhere and then I had a friend who",
    "start": "140210",
    "end": "145360"
  },
  {
    "text": "was telling me about Haskell which is part of this group of the functional forests I called them so we have",
    "start": "145360",
    "end": "151940"
  },
  {
    "text": "language like Scala which is like a hybrid language and f-sharp like they're somewhat object-oriented somewhat",
    "start": "151940",
    "end": "158500"
  },
  {
    "text": "functional and then we have pure script and Haskell and F sharp and pure script in Haskell and I've sorry and in these",
    "start": "158500",
    "end": "166610"
  },
  {
    "text": "kinds of languages and then we have Elm up there in the forest and I think that Elm is a very nice language because it's",
    "start": "166610",
    "end": "172850"
  },
  {
    "text": "from this entire family of languages that are all really cool and powerful I think and a very good thing to learn as",
    "start": "172850",
    "end": "179300"
  },
  {
    "text": "a programmer I think that Elm is the most approachable and it's very useful for building web applications and that's",
    "start": "179300",
    "end": "184520"
  },
  {
    "text": "why I want to talk to you about it let's jump in have a look at what the other",
    "start": "184520",
    "end": "191300"
  },
  {
    "text": "way to pitch would be so what is L maybe a quick show of hands how many of you have done at least a little bit of Elm",
    "start": "191300",
    "end": "197600"
  },
  {
    "text": "coding like a tutorial or something like that okay a few I mean if you like have heard a lot about Elm or like it has",
    "start": "197600",
    "end": "204050"
  },
  {
    "text": "come up on their radar okay cool so a lot of you will probably already have",
    "start": "204050",
    "end": "210350"
  },
  {
    "text": "like this idea what L mean is it is a statically typed language it's purely",
    "start": "210350",
    "end": "216470"
  },
  {
    "text": "functional so it's not object oriented it's not imperative it compiles to",
    "start": "216470",
    "end": "221510"
  },
  {
    "text": "JavaScript it's made for building web apps with it the big thing I was",
    "start": "221510",
    "end": "227600"
  },
  {
    "text": "thinking about making this blink or something like that right is it's no runtime errors if you've ever written",
    "start": "227600",
    "end": "233480"
  },
  {
    "text": "web apps in JavaScript I think this would be immediately appealing to you right so no runtime errors ever and it's",
    "start": "233480",
    "end": "242840"
  },
  {
    "text": "very easy to learn it's really a very approachable language and having a simplicity the creator of made it a",
    "start": "242840",
    "end": "248600"
  },
  {
    "text": "priority that I think we heard in the talk before here in the programming language is track where it was about",
    "start": "248600",
    "end": "253820"
  },
  {
    "text": "rust that the error messages from the compiler of Elm were an inspiration to",
    "start": "253820",
    "end": "259790"
  },
  {
    "text": "make the rust error messages better I think that is true for a lot of languages nowaday so Elm error messages",
    "start": "259790",
    "end": "265760"
  },
  {
    "text": "are like the gold standard I think by now for how nicely a compiler can tell you about what goes wrong",
    "start": "265760",
    "end": "273699"
  },
  {
    "text": "the syntax so here we have JavaScript cindex javascript is one of the",
    "start": "273699",
    "end": "279229"
  },
  {
    "text": "languages that like a lot of language has come from the c family of languages syntax wise so it has these curly braces",
    "start": "279229",
    "end": "285860"
  },
  {
    "text": "and like semicolons on the end of the lines and stuff like that and elm is from the ML family of languages both",
    "start": "285860",
    "end": "293569"
  },
  {
    "text": "syntactically and also from the concepts it uses and initially the syntax looks",
    "start": "293569",
    "end": "300500"
  },
  {
    "text": "weird but if you arrange it in the right way then you see that it just gets rid of the clutter so this is Elm so I",
    "start": "300500",
    "end": "308750"
  },
  {
    "text": "switch back basically all these weird things right we just take them away with",
    "start": "308750",
    "end": "314300"
  },
  {
    "text": "curly braces the semicolons yeah it was nice in the 70s to have that two bright parts there's a little easier but we",
    "start": "314300",
    "end": "320659"
  },
  {
    "text": "don't really need those right so usually you would align it more like this so you have a function declaration that is it's",
    "start": "320659",
    "end": "326900"
  },
  {
    "text": "clearly this a function because there are other tokens before the equals sign on the top level and then it evaluates",
    "start": "326900",
    "end": "332840"
  },
  {
    "text": "to this thing we don't need to return statements and then below you have function application so we have a value",
    "start": "332840",
    "end": "339349"
  },
  {
    "text": "called result and we assign the result of using the function multiply numbers",
    "start": "339349",
    "end": "344659"
  },
  {
    "text": "with these two operands and it's statically typed check so instead of",
    "start": "344659",
    "end": "351589"
  },
  {
    "text": "hear some weird type coercion happening when you call this function with an integer in the string here this would be",
    "start": "351589",
    "end": "358909"
  },
  {
    "text": "a compile error the compiler compiler would say no this doesn't work you need to use two numbers when you try to use",
    "start": "358909",
    "end": "364189"
  },
  {
    "text": "multiplications okay you can if you like use type annotation so this is a way of",
    "start": "364189",
    "end": "372349"
  },
  {
    "text": "specifying what these arguments are they're a bit unusual if you've never seen an ml language family language so",
    "start": "372349",
    "end": "379610"
  },
  {
    "text": "the way this works is the last thing in these type annotations is the return type of the function so in this case",
    "start": "379610",
    "end": "386300"
  },
  {
    "text": "multiply numbers is a function that takes two integers the first argument is an integer the second argument is an",
    "start": "386300",
    "end": "391400"
  },
  {
    "text": "integer the thing it returns is an integer and below you we also give a",
    "start": "391400",
    "end": "397129"
  },
  {
    "text": "type annotation to the single value result right it's also an it okay that's easy enough but it's good to know that",
    "start": "397129",
    "end": "402800"
  },
  {
    "text": "type of annotations in elm aren't I optional so you can never in your program write any type of notation and",
    "start": "402800",
    "end": "409180"
  },
  {
    "text": "it will be exactly as strongly typed as if you write type annotations a lot of programmers like to use type annotations",
    "start": "409180",
    "end": "416229"
  },
  {
    "text": "because it's a kind of documentation and the compiler can tell you when you make a mistake right at the first point where",
    "start": "416229",
    "end": "421960"
  },
  {
    "text": "you make the mistake and not then at some point later in the program when it's maybe a bit more obscure what's",
    "start": "421960",
    "end": "428199"
  },
  {
    "text": "going on here here's a bit more of like what a language look like this is a",
    "start": "428199",
    "end": "433930"
  },
  {
    "text": "simple type alias for we define a type called person and then we define a function calculate age that takes an",
    "start": "433930",
    "end": "440979"
  },
  {
    "text": "integer and then this person record or structure and it returns an integer by calculating the difference between the",
    "start": "440979",
    "end": "448120"
  },
  {
    "text": "current year and when the person was born ok let's talk a bit about pain",
    "start": "448120",
    "end": "454090"
  },
  {
    "text": "point at Elm addresses because I think that that's that's a good way to to think about the language especially",
    "start": "454090",
    "end": "459849"
  },
  {
    "text": "because it compiles to JavaScript and a lot of the use cases that you would use",
    "start": "459849",
    "end": "465340"
  },
  {
    "text": "it for is to replace JavaScript basically one of the things that I always found is I said that before a",
    "start": "465340",
    "end": "471639"
  },
  {
    "text": "code in dynamic languages is hard to refactor correctly right and because it's hard to refactor correctly we have",
    "start": "471639",
    "end": "477759"
  },
  {
    "text": "to really take care that we don't make any stupid mistake like if we add an argument to a function that all the",
    "start": "477759",
    "end": "484360"
  },
  {
    "text": "places where we call that function we make sure to pass in that argument and stuff like that if we have these",
    "start": "484360",
    "end": "491289"
  },
  {
    "text": "problems and we have to take care that we take it that we take care of doing this correctly we do it less because",
    "start": "491289",
    "end": "498310"
  },
  {
    "text": "we're afraid of changing it and we don't want to deal with it right now and which leads to lower code quality so if this",
    "start": "498310",
    "end": "503710"
  },
  {
    "text": "is a big project that several people are working on over time this can lead to a lot of like just a lot of refactoring is",
    "start": "503710",
    "end": "510280"
  },
  {
    "text": "not done a lot of lower like the code quality becomes lower and then the development speed goes down because you",
    "start": "510280",
    "end": "516700"
  },
  {
    "text": "have all these cruft that accumulates and you never deal with it and when you",
    "start": "516700",
    "end": "522520"
  },
  {
    "text": "do refactoring they often introduce bugs and crashes now in L everything is fully",
    "start": "522520",
    "end": "528130"
  },
  {
    "text": "typed so even if you give as I said no type annotations ever in your project the entire project will will be fully",
    "start": "528130",
    "end": "535300"
  },
  {
    "text": "typed and the compiler checks that all types match even between modules and  and everything like that there's",
    "start": "535300",
    "end": "541029"
  },
  {
    "text": "also no any type so if you know typescript or flow they have this kind of escape hatch of any Ellen doesn't",
    "start": "541029",
    "end": "548350"
  },
  {
    "text": "have that and doesn't have any it doesn't also have because it's not an object-oriented language so there's no",
    "start": "548350",
    "end": "553480"
  },
  {
    "text": "type hierarchy where everything like derives from object or something like that there's just a fundamental",
    "start": "553480",
    "end": "559180"
  },
  {
    "text": "difference between types and compiler will make sure that you don't cross these okay so records we briefly showed",
    "start": "559180",
    "end": "565959"
  },
  {
    "text": "those before we find one of those called programmer has two two fields one is",
    "start": "565959",
    "end": "572290"
  },
  {
    "text": "named which is a string and favorite language which is a string and then we create a new value with that type or off",
    "start": "572290",
    "end": "579190"
  },
  {
    "text": "that type named Daniel favorite language l that's nice and easy but then Elm has",
    "start": "579190",
    "end": "585430"
  },
  {
    "text": "a very nice feature that is called union types or some types this is something that I wish basically every modern",
    "start": "585430",
    "end": "592329"
  },
  {
    "text": "language had and I'm really sorely missing this in languages like Java and c-sharp if you look at it like that so",
    "start": "592329",
    "end": "599860"
  },
  {
    "text": "it's often used for cases like where you have something like an status right so it there's like two possible values this",
    "start": "599860",
    "end": "605200"
  },
  {
    "text": "status can have it can be by the pending word can be completed and then maybe we",
    "start": "605200",
    "end": "610329"
  },
  {
    "text": "have a record called task it has a name and then a value of this type so far so",
    "start": "610329",
    "end": "615790"
  },
  {
    "text": "good right so far this is this looks like an enum maybe that you know from Java or C sharp right okay so what's so special about this the",
    "start": "615790",
    "end": "623410"
  },
  {
    "text": "special thing about this or maybe first quickly how we use it so if you ever want to use a value of this type you",
    "start": "623410",
    "end": "630130"
  },
  {
    "text": "have to do pattern matching and elm does exhaustion checks so it will check did you at every use of a well a variable of",
    "start": "630130",
    "end": "637570"
  },
  {
    "text": "this type did you cover all cases so if you want to use a value of this type of",
    "start": "637570",
    "end": "642910"
  },
  {
    "text": "this type then you cannot just like grab into like look at it you have to say there's a value of this type I give you",
    "start": "642910",
    "end": "650140"
  },
  {
    "text": "all the cases that this can possibly have if I just write the pending a state here then the compiler will complain and",
    "start": "650140",
    "end": "656199"
  },
  {
    "text": "will say hey you didn't cover all cases so if I give it the completed state as well in this function that turns this",
    "start": "656199",
    "end": "662079"
  },
  {
    "text": "status value into a string then this is how you would do it you say case that is",
    "start": "662079",
    "end": "667660"
  },
  {
    "text": "off and then you give all the possible cases that this status there we could have the thing where it gets",
    "start": "667660",
    "end": "675880"
  },
  {
    "text": "interesting with union types is what if some of the states have data attached right so maybe for example we would have",
    "start": "675880",
    "end": "682240"
  },
  {
    "text": "a progress report right so we introduce a new state that's running I'm sorry I",
    "start": "682240",
    "end": "687279"
  },
  {
    "text": "forgot that the running state here so between pending there should be a running state as well as completed and",
    "start": "687279",
    "end": "693910"
  },
  {
    "text": "failed and then we have the current item and the number of items and then maybe we would like add these fields to the",
    "start": "693910",
    "end": "700750"
  },
  {
    "text": "task right so we basically have our enum like thing called status and then we have we would store this information",
    "start": "700750",
    "end": "707290"
  },
  {
    "text": "somehow now in the task and we also have this failed state right so when we are in the failed state maybe we want to",
    "start": "707290",
    "end": "712360"
  },
  {
    "text": "store a list of error messages that occurred during the task and again we",
    "start": "712360",
    "end": "718029"
  },
  {
    "text": "would need to store these in the task itself the problem with this is that and these kinds of things in data modeling I",
    "start": "718029",
    "end": "725020"
  },
  {
    "text": "think they come up all the time right where we have different States and some of them have additional like payload data that we need to take care of but in",
    "start": "725020",
    "end": "732399"
  },
  {
    "text": "most languages this is all you can do you have some kind of an enum that says like or like this state type that says",
    "start": "732399",
    "end": "738010"
  },
  {
    "text": "okay which state are you currently in and then you have a bunch of additional data then you want to keep track of and do you have to pack these into some",
    "start": "738010",
    "end": "744250"
  },
  {
    "text": "other data structure that's did you keep around the problem is the errors like",
    "start": "744250",
    "end": "749320"
  },
  {
    "text": "variable for example it only really makes sense when we're in the failed state right I mean sure we can't have",
    "start": "749320",
    "end": "754540"
  },
  {
    "text": "the empty field around lying lying there but it doesn't really make so much sense and there is this great thing that also",
    "start": "754540",
    "end": "761500"
  },
  {
    "text": "was mentioned in the talk about rusk that's a really important design philosophy I think if you can make",
    "start": "761500",
    "end": "768339"
  },
  {
    "text": "invalid States presentable in your code that's a very very useful thing to do so",
    "start": "768339",
    "end": "775329"
  },
  {
    "text": "what this means is if you can write your types so that an invalid state cannot",
    "start": "775329",
    "end": "780820"
  },
  {
    "text": "even be expressed in the program then you don't have to test for it it cannot occur and it can slip through",
    "start": "780820",
    "end": "786550"
  },
  {
    "text": "your code in practice and it can never end up in a bucket in production so here",
    "start": "786550",
    "end": "792160"
  },
  {
    "text": "we see the real power of Union types basically each one of these enum like",
    "start": "792160",
    "end": "797470"
  },
  {
    "text": "things right of this different cases that the type status can have like you're on a like pending they can have",
    "start": "797470",
    "end": "805180"
  },
  {
    "text": "payload data attached and so running for example has to intz that it carries with it and failed has a",
    "start": "805180",
    "end": "811990"
  },
  {
    "text": "list of strings that it carries with it and so if we want to for example create a value like here in the middle in valve",
    "start": "811990",
    "end": "818650"
  },
  {
    "text": "one where we create the value of this running of this type status but in this case we want to use the running value",
    "start": "818650",
    "end": "825250"
  },
  {
    "text": "constructor then we always have to specify these two integers in this case right because the type definition says",
    "start": "825250",
    "end": "831310"
  },
  {
    "text": "that there's four different kinds of things that a value of this type can have and if it's running then it need you need to give me two integers and",
    "start": "831310",
    "end": "838840"
  },
  {
    "text": "this means that our task struct type or a task record type only needs concern",
    "start": "838840",
    "end": "845170"
  },
  {
    "text": "itself with the name of the status right and the status depending on which of these values it actually has will have",
    "start": "845170",
    "end": "851830"
  },
  {
    "text": "different payload data data attached so here's how we do pattern matching when we have payload data so again this is to",
    "start": "851830",
    "end": "859240"
  },
  {
    "text": "get your I string function it takes a status it will like turns it into a string that we can display in the user interface the first case and the",
    "start": "859240",
    "end": "866140"
  },
  {
    "text": "completed case are the same as before but now we have this running where we say okay so we want to give these two",
    "start": "866140",
    "end": "872110"
  },
  {
    "text": "integers that we pass on in the running state we want to name these current and",
    "start": "872110",
    "end": "877210"
  },
  {
    "text": "total and then we turn the whole string into a the whole thing into a string that basically says this is number 1 of",
    "start": "877210",
    "end": "883000"
  },
  {
    "text": "10 or something like that and in the failed case we want to give an error message that joins all the entire list",
    "start": "883000",
    "end": "892630"
  },
  {
    "text": "of error messages and puts that into the string and this is a really powerful",
    "start": "892630",
    "end": "898210"
  },
  {
    "text": "construct right together these types these things are called often algebraic data types when a type system has some",
    "start": "898210",
    "end": "904570"
  },
  {
    "text": "types and I think that this alone is a very nice feature that allows us to model a lot of cases that are really",
    "start": "904570",
    "end": "910240"
  },
  {
    "text": "useful this pattern matching is the only way that we can get payload data out of",
    "start": "910240",
    "end": "916240"
  },
  {
    "text": "these value types right so for example if you we wanted to access the list of errors we have to make to pattern match",
    "start": "916240",
    "end": "922210"
  },
  {
    "text": "and say in the error case then I get a list of errors in all of these other cases I don't have that data even",
    "start": "922210",
    "end": "928390"
  },
  {
    "text": "available and I cannot accidentally access it or use it in a wrong way",
    "start": "928390",
    "end": "934500"
  },
  {
    "text": "briefly to mention it for some reason my syntax highlighting broke down on this slide and I think one or two",
    "start": "934500",
    "end": "941420"
  },
  {
    "text": "you can have polymorphic types aka generics so this is how you define a",
    "start": "941420",
    "end": "946430"
  },
  {
    "text": "binary tree type basically you have a type variable now called element type",
    "start": "946430",
    "end": "951949"
  },
  {
    "text": "and again this is a union type either it's a leaf then it has whatever type",
    "start": "951949",
    "end": "958850"
  },
  {
    "text": "you instantiate this with or you have a node type and then you have two payload",
    "start": "958850",
    "end": "964519"
  },
  {
    "text": "data pieces both of these are again binary trees and we need the parentheses",
    "start": "964519",
    "end": "969680"
  },
  {
    "text": "here to indicate to Elm that these are like basically positional arguments and there's like two of them otherwise it",
    "start": "969680",
    "end": "975110"
  },
  {
    "text": "would parse it differently okay basically that's it and there's a sample",
    "start": "975110",
    "end": "980329"
  },
  {
    "text": "of how to create a leaf only or how to make a small binary tree out of this",
    "start": "980329",
    "end": "986980"
  },
  {
    "text": "other pain points right undefined is not a function or null reference exception",
    "start": "987970",
    "end": "993019"
  },
  {
    "text": "when I was program in C sharp I think about half the like major bugs that we",
    "start": "993019",
    "end": "999410"
  },
  {
    "text": "have were not reference exceptions and often this is the case of just a big",
    "start": "999410",
    "end": "1006069"
  },
  {
    "text": "code base grows you had a piece of code that had this assumption that this part can never be null and then the code",
    "start": "1006069",
    "end": "1012430"
  },
  {
    "text": "changes and it grows and grows and grows and sometime later this assumption is no longer valid and you end up with null",
    "start": "1012430",
    "end": "1017769"
  },
  {
    "text": "reference exceptions in production code Elm doesn't have that Sun doesn't have the concept of null or undefined and",
    "start": "1017769",
    "end": "1024490"
  },
  {
    "text": "this kills a whole family of bugs but then if you don't have null right how",
    "start": "1024490",
    "end": "1030850"
  },
  {
    "text": "can you represent missing values well we use Union types for that so there's this",
    "start": "1030850",
    "end": "1035918"
  },
  {
    "text": "cut type called maybe so if you know Scala that's what option is in Scala basically it's either nothing now we",
    "start": "1035919",
    "end": "1043659"
  },
  {
    "text": "don't have any payload or just and then we have like one value of whatever a is",
    "start": "1043659",
    "end": "1049030"
  },
  {
    "text": "defined to be and so there's here we define two different values again about one is used a nothing constructor and",
    "start": "1049030",
    "end": "1056200"
  },
  {
    "text": "well two uses just and then we need to give it the actual content of it and then it's an maybe of int the first",
    "start": "1056200",
    "end": "1062740"
  },
  {
    "text": "thing where we use nothing the type that I've brought here is actually more",
    "start": "1062740",
    "end": "1067780"
  },
  {
    "text": "specific than it would really be so because elm if you just leave it to itself will just say okay this is a",
    "start": "1067780",
    "end": "1073000"
  },
  {
    "text": "maybe of a because nothing can be anything which is philosophically you've been weird but",
    "start": "1073000",
    "end": "1078640"
  },
  {
    "text": "whatever but basically it would infer that the type can even be more generic",
    "start": "1078640",
    "end": "1084400"
  },
  {
    "text": "and you can always give it a more specific type if you like what if we need error information so we saw this in",
    "start": "1084400",
    "end": "1090400"
  },
  {
    "text": "if you went to that in the in the in the previous talk the rust language has",
    "start": "1090400",
    "end": "1097570"
  },
  {
    "text": "picked up the same concept of a result type to represent operations that can",
    "start": "1097570",
    "end": "1103000"
  },
  {
    "text": "either succeed with some data type a or fail with some other data type beep",
    "start": "1103000",
    "end": "1108340"
  },
  {
    "text": "very often the error type is maybe just a string or a list of strings like here which use a single string and in the",
    "start": "1108340",
    "end": "1115840"
  },
  {
    "text": "okay case in the examples down here we use an integer but of course these can be arbitrarily complex data types right",
    "start": "1115840",
    "end": "1123630"
  },
  {
    "text": "this is a very nice thing because again every time you use a value of this type you have to say what do I want to do if",
    "start": "1123630",
    "end": "1129970"
  },
  {
    "text": "this is the okay case and what do I have to do if this is the error case another",
    "start": "1129970",
    "end": "1136030"
  },
  {
    "text": "interesting thing about elm is that all values are immutable so as opposed to rust where this is like kind of an",
    "start": "1136030",
    "end": "1141250"
  },
  {
    "text": "opt-in thing to make variables mutable in album everything is mutable so you cannot assign to the same variable a new",
    "start": "1141250",
    "end": "1149050"
  },
  {
    "text": "value so they're more like named values than like what you would think of as variables in programming languages and",
    "start": "1149050",
    "end": "1155500"
  },
  {
    "text": "you cannot like dot into length into values like for example here we define a",
    "start": "1155500",
    "end": "1161610"
  },
  {
    "text": "value of this programmer type there's no way you can just change a property or a field of this record now maybe you think",
    "start": "1161610",
    "end": "1169780"
  },
  {
    "text": "of like how the heck are you ever gonna program if there's no mutable values right which is a fair question the thing",
    "start": "1169780",
    "end": "1178750"
  },
  {
    "text": "is what you do is you have you create new values right so for example here when we want to create a new program or",
    "start": "1178750",
    "end": "1184330"
  },
  {
    "text": "B that has all the values all the fields set to the same value as programmer a",
    "start": "1184330",
    "end": "1189460"
  },
  {
    "text": "just the name be different then this is how you do it there's like this special syntax when you use the record curly",
    "start": "1189460",
    "end": "1197080"
  },
  {
    "text": "braces again and then you use a vertical bar before you specify what is the value that you want to base it on and then you",
    "start": "1197080",
    "end": "1203020"
  },
  {
    "text": "give the fields that you want to change and give the new values for that I'll come how to actually write useful programs",
    "start": "1203020",
    "end": "1210210"
  },
  {
    "text": "with an immutable language in a second right so keep that thought if you have it I just want to finish a few other",
    "start": "1210210",
    "end": "1216480"
  },
  {
    "text": "things about the language first one of the side effects of this by the way is",
    "start": "1216480",
    "end": "1222269"
  },
  {
    "text": "we can't do Loops you know right so for loops they require a counter variable right in other languages we can't do",
    "start": "1222269",
    "end": "1228990"
  },
  {
    "text": "that you know because we have no mutable values the solution for this particular thing is to use either map or fold which",
    "start": "1228990",
    "end": "1235889"
  },
  {
    "text": "most of you probably know more under the name reduce or use recursion instead but",
    "start": "1235889",
    "end": "1241860"
  },
  {
    "text": "yeah this is a bit weird in the beginning but you can use to it ok we're",
    "start": "1241860",
    "end": "1247409"
  },
  {
    "text": "almost through like language like features so we can look at some code in practice and how this all plays out but",
    "start": "1247409",
    "end": "1254730"
  },
  {
    "text": "one thing that you need to know still is that elm is entirely pure so this means that all the functions are pure and none",
    "start": "1254730",
    "end": "1261720"
  },
  {
    "text": "of the functions can have side effects there's two small caveats which is debug log which writes to the console and",
    "start": "1261720",
    "end": "1267539"
  },
  {
    "text": "debug crash which just crashes your application for debugging purposes but other than that it's like every function",
    "start": "1267539",
    "end": "1275009"
  },
  {
    "text": "is idempotent so this means that if you call the same function again with the same arguments the same thing will come",
    "start": "1275009",
    "end": "1281909"
  },
  {
    "text": "out of it right so how do you get work done in a language that's immutable and",
    "start": "1281909",
    "end": "1287970"
  },
  {
    "text": "all functions are pure it sounds weird Allan comes with a small runtime and",
    "start": "1287970",
    "end": "1294110"
  },
  {
    "text": "there's also no direct JavaScript foreign function interface so you cannot just call out into JavaScript but the",
    "start": "1294110",
    "end": "1302369"
  },
  {
    "text": "thing this how this works is the arm architecture that we'll take a look at in a second but just to explain a bit",
    "start": "1302369",
    "end": "1309419"
  },
  {
    "text": "more in detail maybe how this thing was the pure what this means that every function is pure in elm because there is",
    "start": "1309419",
    "end": "1317610"
  },
  {
    "text": "no way to just execute arbitrary JavaScript or perform any side-effects really this function that I have up here",
    "start": "1317610",
    "end": "1324149"
  },
  {
    "text": "at numbers D it will always evaluate to the same value right in JavaScript as you see below you could do weird stuff",
    "start": "1324149",
    "end": "1331169"
  },
  {
    "text": "you could like have a global variable that use this that may in this case for",
    "start": "1331169",
    "end": "1336389"
  },
  {
    "text": "example is a counter that we increase and so calling the same function again with different arguments actually leads to",
    "start": "1336389",
    "end": "1342450"
  },
  {
    "text": "different results right or if you have a library and you just call this function it might actually just do an HTTP call",
    "start": "1342450",
    "end": "1348450"
  },
  {
    "text": "and like transmit your data somewhere else or whatever in Al you have this guarantee that this can't happen there's",
    "start": "1348450",
    "end": "1354809"
  },
  {
    "text": "no side effects and you can perform in the language itself plus side makes",
    "start": "1354809",
    "end": "1360210"
  },
  {
    "text": "testing super nice functions that are idempotent that always return the same values when you give it the same",
    "start": "1360210",
    "end": "1366270"
  },
  {
    "text": "arguments they're super nice to test and you don't need this kind of knocking that you sometimes need in other",
    "start": "1366270",
    "end": "1371309"
  },
  {
    "text": "languages and thanks to static typing most of the unit tests can actually",
    "start": "1371309",
    "end": "1377070"
  },
  {
    "text": "focus on the logic like in JavaScript you test a lot of like okay but what if I pass in null here and what if I pass",
    "start": "1377070",
    "end": "1382740"
  },
  {
    "text": "some other and integer instead of a string and these kinds of things these are kind of boring properties that the type system takes care of it also makes",
    "start": "1382740",
    "end": "1390090"
  },
  {
    "text": "the refactor refactoring is a lot more safe and fun because the compiler can check all these things for you and then",
    "start": "1390090",
    "end": "1395250"
  },
  {
    "text": "can tell you if something goes wrong so now how to write actual programs in this",
    "start": "1395250",
    "end": "1400799"
  },
  {
    "text": "there's something called the Elm architecture and this is basically the gist of how it works you give the AL",
    "start": "1400799",
    "end": "1409010"
  },
  {
    "text": "initial start program that is that you used to create an elm application three",
    "start": "1409010",
    "end": "1415380"
  },
  {
    "text": "functions you give it the init function the update function interview function the init function basically creates the",
    "start": "1415380",
    "end": "1421980"
  },
  {
    "text": "initial model this is basically a single big record usually that contains the",
    "start": "1421980",
    "end": "1426990"
  },
  {
    "text": "entire state of your application from this this is then passed into the view",
    "start": "1426990",
    "end": "1432169"
  },
  {
    "text": "as you see here the model signature of that function is model goes to HTML of",
    "start": "1432169",
    "end": "1438030"
  },
  {
    "text": "message and so what this does is it it uses this model type that you created before this value and it turns whatever",
    "start": "1438030",
    "end": "1445440"
  },
  {
    "text": "this state representation is that you have of your application into something",
    "start": "1445440",
    "end": "1450570"
  },
  {
    "text": "that can be displayed to the user it does it's very similar to react if you know that so it has a virtual Dom kind",
    "start": "1450570",
    "end": "1455789"
  },
  {
    "text": "of library and you build up basically a virtual Dom the on runtime does the dipping to you and then changes the Dom",
    "start": "1455789",
    "end": "1461640"
  },
  {
    "text": "representation that is shown in the browser to the hello user the user does something and whenever the user clicks",
    "start": "1461640",
    "end": "1468360"
  },
  {
    "text": "something for example a message is sent back to your update function the update",
    "start": "1468360",
    "end": "1474059"
  },
  {
    "text": "function gets this new message that just happened it gets the model as it is currently and it outputs the new model as it should be",
    "start": "1474059",
    "end": "1481050"
  },
  {
    "text": "and a couple of commands if you like so commands are these things that go to the young runtime and there they are the",
    "start": "1481050",
    "end": "1487440"
  },
  {
    "text": "things that actually are allowed to perform side effects so a command is basically just a way of describing please do this HTTP request for me and",
    "start": "1487440",
    "end": "1494640"
  },
  {
    "text": "then when you're done like come back to my update function sent me to request the result of that request as a message",
    "start": "1494640",
    "end": "1501290"
  },
  {
    "text": "this is basically all there is to it right so this is the UM architecture and",
    "start": "1501290",
    "end": "1506850"
  },
  {
    "text": "it's this unidirectional cycle of doing user interfaces that has been very popular also in the reaction world with",
    "start": "1506850",
    "end": "1512610"
  },
  {
    "text": "the Redux library the Redux library took its ideas in its inspiration exactly from the unmarked attack sure the thing",
    "start": "1512610",
    "end": "1520170"
  },
  {
    "text": "is this looks maybe a bit weird if you use two other UI paradigms but the",
    "start": "1520170",
    "end": "1525180"
  },
  {
    "text": "really nice thing about this is that it's super easy to test and you have it",
    "start": "1525180",
    "end": "1530610"
  },
  {
    "text": "all laid out because the only place where some stake in your application can ever be modified is in the update",
    "start": "1530610",
    "end": "1536730"
  },
  {
    "text": "function so I think that this is a really powerful model the model that you",
    "start": "1536730",
    "end": "1542190"
  },
  {
    "text": "create in this initial intent and update continuously in your update function is a single source of truth so in a lot of",
    "start": "1542190",
    "end": "1549900"
  },
  {
    "text": "JavaScript applications when you the old way right though jQuery where you were restore it will restore data in the Dom",
    "start": "1549900",
    "end": "1557430"
  },
  {
    "text": "itself you had this kind of race conditions mercy for several components maybe try to update the same value in",
    "start": "1557430",
    "end": "1563070"
  },
  {
    "text": "the Dom at different times this cannot happen with the ARM architecture because there's only one place where it gets",
    "start": "1563070",
    "end": "1568590"
  },
  {
    "text": "updated which is the update function and this value that gets out of the update function the new model is the single",
    "start": "1568590",
    "end": "1574860"
  },
  {
    "text": "source of truth for your entire user interface visual elements are then created from this current model right as",
    "start": "1574860",
    "end": "1581640"
  },
  {
    "text": "we saw with this all with this new function the apps are always well-structured because they all follow the same paradigm and you can easily",
    "start": "1581640",
    "end": "1590130"
  },
  {
    "text": "replay UI sessions because you just have to log basically all the messages that were sent to your update function and",
    "start": "1590130",
    "end": "1595380"
  },
  {
    "text": "then you can go back and forth and you can serialize them and do an undo redo and stuff like that ok before we look at",
    "start": "1595380",
    "end": "1604020"
  },
  {
    "text": "actually some live demo of how this all works a quick explainer of how new functions work",
    "start": "1604020",
    "end": "1609929"
  },
  {
    "text": "because otherwise you will spend all the time on the next demo looking at what the heck this weird new function thing",
    "start": "1609929",
    "end": "1616230"
  },
  {
    "text": "is basically what you have here is like this is very similar to much reactors",
    "start": "1616230",
    "end": "1621720"
  },
  {
    "text": "with whatever it does with these diff functions that create virtual downloads",
    "start": "1621720",
    "end": "1628440"
  },
  {
    "text": "and stuff like that in elm this is not this is no special syntax right so this is not like JSX or so there was like",
    "start": "1628440",
    "end": "1635419"
  },
  {
    "text": "patched on to javascript this is just normal elm code and all of these functions did you see here like div and",
    "start": "1635419",
    "end": "1642539"
  },
  {
    "text": "button and so forth there are functions that create a single Dom representation",
    "start": "1642539",
    "end": "1647700"
  },
  {
    "text": "node and they always take two lists to live the first list is the list of attributes so as you see in the first",
    "start": "1647700",
    "end": "1653970"
  },
  {
    "text": "example with the outer div it gets a take the first list has exactly one",
    "start": "1653970",
    "end": "1659100"
  },
  {
    "text": "element which is whatever happens when you call the function class with the argument about the string of counter and",
    "start": "1659100",
    "end": "1665220"
  },
  {
    "text": "then you have three child elements that's the second argument to the div",
    "start": "1665220",
    "end": "1671039"
  },
  {
    "text": "function is another list of the children the children children elements and in",
    "start": "1671039",
    "end": "1676440"
  },
  {
    "text": "this case we have a button that if on the button and it corresponds to this HTML that you see below right again in",
    "start": "1676440",
    "end": "1683100"
  },
  {
    "text": "the beginning this looks a bit weird it takes a while a few days maybe for your eyes to acclimatize to this particular",
    "start": "1683100",
    "end": "1688770"
  },
  {
    "text": "syntax but once you get into it just like with the ML syntax it becomes",
    "start": "1688770",
    "end": "1693929"
  },
  {
    "text": "really very obvious in a very straightforward way of encoding this and you actually can read it very quickly",
    "start": "1693929",
    "end": "1700730"
  },
  {
    "text": "okay demo time so let's switch over here",
    "start": "1700730",
    "end": "1707510"
  },
  {
    "text": "I have an app running live that was",
    "start": "1707510",
    "end": "1712890"
  },
  {
    "text": "created with create an app which is maybe very similar to create react app if you know that and here I have the",
    "start": "1712890",
    "end": "1722820"
  },
  {
    "text": "atom editor with the elm plug-in installed one of the nice things that",
    "start": "1722820",
    "end": "1729450"
  },
  {
    "text": "you see immediately I hope you can maybe I don't know if you can read this but",
    "start": "1729450",
    "end": "1735240"
  },
  {
    "text": "you have this these type annotations here on hover right there bit too small maybe should I make this",
    "start": "1735240",
    "end": "1741720"
  },
  {
    "text": "can you read this in the back is that okay should I make it bigger it's okay okay so let's go through this basically",
    "start": "1741720",
    "end": "1749730"
  },
  {
    "text": "what we have here is here we define our model right this is a record that has",
    "start": "1749730",
    "end": "1755100"
  },
  {
    "text": "one variable called counter and it's of type int right it's a simple demo app then we have the init function and this",
    "start": "1755100",
    "end": "1761880"
  },
  {
    "text": "creates a tuple so I didn't cover the tuple syntax but this is basically just like within parenthesis separated by",
    "start": "1761880",
    "end": "1768330"
  },
  {
    "text": "comma you can have tuple values 2 2 this is a 2-tuple the first value is of type",
    "start": "1768330",
    "end": "1774360"
  },
  {
    "text": "counter model and the second type is of type command of counter model so this is basically if you want to tell the",
    "start": "1774360",
    "end": "1781230"
  },
  {
    "text": "runtime to do something for you like an HTTP request this is basically how what you would use for that in this case the",
    "start": "1781230",
    "end": "1789000"
  },
  {
    "text": "account and the thing that we want to do initially for the for the model is we",
    "start": "1789000",
    "end": "1794460"
  },
  {
    "text": "want to create a new record with a field counter set to 0 and for the command we just want to do nothing for now then we",
    "start": "1794460",
    "end": "1801300"
  },
  {
    "text": "have counter message this is the message type and the message type is a really",
    "start": "1801300",
    "end": "1806310"
  },
  {
    "text": "nice use of Union types because it enumerates all the possible things that can happen in your entire application so",
    "start": "1806310",
    "end": "1812940"
  },
  {
    "text": "if I if I colleague hands over an ell project to me I just need to look at the message type and I know immediately all",
    "start": "1812940",
    "end": "1819570"
  },
  {
    "text": "the things that can happen in this application and then I look at the update version then I see all the state transformations that have actually",
    "start": "1819570",
    "end": "1825810"
  },
  {
    "text": "happened in this in this application so here what we do is we get the message that was sent to the up to the",
    "start": "1825810",
    "end": "1831570"
  },
  {
    "text": "application to the update function we get the current model and then we pattern match on the message that we",
    "start": "1831570",
    "end": "1838140"
  },
  {
    "text": "received and if the message is increment then what we do is we create a new tuple and for the model value of the tuple we",
    "start": "1838140",
    "end": "1847710"
  },
  {
    "text": "use we use this record update syntax that I showed before so we update the current we use the current model as it",
    "start": "1847710",
    "end": "1855390"
  },
  {
    "text": "the base and then we set counter to model count row plus 1 right so we",
    "start": "1855390",
    "end": "1860730"
  },
  {
    "text": "increment the counter field in the record for command we still use none we don't want to do any HTTP requests or",
    "start": "1860730",
    "end": "1866760"
  },
  {
    "text": "something like that and then for decrement is basically the same thing but with minus 1 here and then here we",
    "start": "1866760",
    "end": "1872880"
  },
  {
    "text": "have this view function that we just saw before that it just takes this model and renders it so here you have the text where it",
    "start": "1872880",
    "end": "1880680"
  },
  {
    "text": "renders out the string as child node of this second div of this nested divs and",
    "start": "1880680",
    "end": "1887280"
  },
  {
    "text": "what's maybe interesting is this thing here the onclick decrement so unclick is",
    "start": "1887280",
    "end": "1893790"
  },
  {
    "text": "a function that will render an attribute and but what you pass into this on",
    "start": "1893790",
    "end": "1900000"
  },
  {
    "text": "clique is not a function which is maybe what you would expect from a functional programming language but it's the actual",
    "start": "1900000",
    "end": "1905250"
  },
  {
    "text": "message value that we want to receive when this happens so when the user clicks on this button what we would like",
    "start": "1905250",
    "end": "1911730"
  },
  {
    "text": "to receive in our update function is the message that was declared here decrement right and here if the user clicks the",
    "start": "1911730",
    "end": "1920430"
  },
  {
    "text": "plus button we want to receive the message increment and then here in the bottom we just wire it all together we",
    "start": "1920430",
    "end": "1927000"
  },
  {
    "text": "use this HTML program which is defined in one of the Elm standard libraries it",
    "start": "1927000",
    "end": "1932400"
  },
  {
    "text": "gets it takes a record and it wants a view function an init function and an update function which is what we give it",
    "start": "1932400",
    "end": "1938040"
  },
  {
    "text": "and it also wants this thing called subscriptions which I don't want to go into now but which is basically for",
    "start": "1938040",
    "end": "1943590"
  },
  {
    "text": "receiving regular events from JavaScript ok let's see how it behaves in practice",
    "start": "1943590",
    "end": "1948840"
  },
  {
    "text": "all lo and behold we have a culture now",
    "start": "1948840",
    "end": "1953880"
  },
  {
    "text": "if I click - here a couple of times one of the things that I want to show you here is that this is running in debug",
    "start": "1953880",
    "end": "1959940"
  },
  {
    "text": "mode so down here you have this explore history thing I hope you can all see it I can move them we know a bit up further",
    "start": "1959940",
    "end": "1966450"
  },
  {
    "text": "up maybe and what this is is basically just the log of what happened in the",
    "start": "1966450",
    "end": "1971520"
  },
  {
    "text": "application all the messages that we got which here is a bit boring because there's just two possible message and",
    "start": "1971520",
    "end": "1976560"
  },
  {
    "text": "they don't have any payload but you can just click on these and you can see that the counter reacts to this so maybe",
    "start": "1976560",
    "end": "1982440"
  },
  {
    "text": "let's make the counter a bit bigger so you can see that if I go back this is the first time I got a message then",
    "start": "1982440",
    "end": "1987810"
  },
  {
    "text": "we've got another increment and decrement the decrement the decrement and this is really nice for debugging",
    "start": "1987810",
    "end": "1992850"
  },
  {
    "text": "and you can also import or export these so you if you have testers and they do Q&A and they say oh this is your numbers",
    "start": "1992850",
    "end": "1999180"
  },
  {
    "text": "can get negative if that wasn't supposed to happen you're like oh I don't know how that could happen please send me the logs and they can just see realize they",
    "start": "1999180",
    "end": "2005510"
  },
  {
    "text": "send you to chasing you you know ingested into your application and it's super obvious what happened and you can",
    "start": "2005510",
    "end": "2011170"
  },
  {
    "text": "play around with this and fix it okay but what is the actual behavior of or",
    "start": "2011170",
    "end": "2017559"
  },
  {
    "text": "the experience of developing it now let's start and let's say business comes",
    "start": "2017559",
    "end": "2023230"
  },
  {
    "text": "back and they say okay this is like - and plus buttons they're really cool but for our customer we want a double +",
    "start": "2023230",
    "end": "2028870"
  },
  {
    "text": "button right ok so we say sure we make a double + button so let's make double",
    "start": "2028870",
    "end": "2034240"
  },
  {
    "text": "increment right okay now let me save this and let me say it like this because",
    "start": "2034240",
    "end": "2040780"
  },
  {
    "text": "what you will see is that just like if it works yeah just like you maybe you",
    "start": "2040780",
    "end": "2046450"
  },
  {
    "text": "notice from NGO or something like this there's an auto format which just form its code always the same way right so",
    "start": "2046450",
    "end": "2052000"
  },
  {
    "text": "maybe you notice from JavaScript now it's getting popular with prettier or go format in go does this which is a really",
    "start": "2052000",
    "end": "2058090"
  },
  {
    "text": "nice thing because I can just read every Elm code because everyone uses own format and it's so it's always formatted",
    "start": "2058090",
    "end": "2063608"
  },
  {
    "text": "the same way okay what happened here we get an error message and again the",
    "start": "2063609",
    "end": "2069368"
  },
  {
    "text": "overlay is a bit small I don't think I can easily make that bigger but basically the compiler here tells me wait a second the Union type that you",
    "start": "2069369",
    "end": "2077108"
  },
  {
    "text": "defined up here it has three cases but you're not handling double increment then that's super nice because yeah I",
    "start": "2077109",
    "end": "2083648"
  },
  {
    "text": "forgot to do this so let's go in here and add a case for this double increment",
    "start": "2083649",
    "end": "2091419"
  },
  {
    "text": "and in this case what do we want to do well basically the same as with increment but in this case yeah yeah go",
    "start": "2091419",
    "end": "2101080"
  },
  {
    "text": "away but in this case I want to add two right okay safe now it's gone okay",
    "start": "2101080",
    "end": "2108130"
  },
  {
    "text": "that's fantastic but we don't see it anywhere yet right we don't render it okay so let's duplicate this button here",
    "start": "2108130",
    "end": "2115359"
  },
  {
    "text": "that we have there and do a plus plus and save it again and here we have minus",
    "start": "2115359",
    "end": "2122800"
  },
  {
    "text": "plus and plus plus so now if we click plus plus whoa what happens here yeah I sent the wrong message so we need to",
    "start": "2122800",
    "end": "2128800"
  },
  {
    "text": "send double increment of course save and now if we click plus plus then it gets",
    "start": "2128800",
    "end": "2135250"
  },
  {
    "text": "incremented by 2 if we plus it gets incremented by 1 okay fantastic",
    "start": "2135250",
    "end": "2140410"
  },
  {
    "text": "now business comes back and they say yeah this is fantastic this feature you implemented super but now we want triple",
    "start": "2140410",
    "end": "2146590"
  },
  {
    "text": "increment right and you're like come on you know really but you think okay this",
    "start": "2146590",
    "end": "2152320"
  },
  {
    "text": "is getting a bit silly right making a single message every time for for these things let's just give a payload to the",
    "start": "2152320",
    "end": "2158140"
  },
  {
    "text": "incremented section value right so let's say increment always carries with it an integer which is by how much we want to",
    "start": "2158140",
    "end": "2164410"
  },
  {
    "text": "increment it okay we click Save and kaboom right something is wrong so what",
    "start": "2164410",
    "end": "2170860"
  },
  {
    "text": "is wrong we click here and Elm tells us it I cannot find the pattern double increment Yeah right I mean we removed",
    "start": "2170860",
    "end": "2177580"
  },
  {
    "text": "it so let's remove this okay safe what happens now still red okay it says",
    "start": "2177580",
    "end": "2184720"
  },
  {
    "text": "pattern main increment has too few arguments now this is also correct right I now said that increment always has to",
    "start": "2184720",
    "end": "2190990"
  },
  {
    "text": "have a payload of an integer okay so let's give it an X and then of course we don't want to increment always by one",
    "start": "2190990",
    "end": "2197440"
  },
  {
    "text": "we now want to increment by this value X okay safe again and still something is wrong okay double increment doesn't",
    "start": "2197440",
    "end": "2203890"
  },
  {
    "text": "exist yeah correct okay let's remove this button and duplicate the increment and now we need",
    "start": "2203890",
    "end": "2211060"
  },
  {
    "text": "to pass in two right now again I said this before sometimes in Elm you have to use",
    "start": "2211060",
    "end": "2216190"
  },
  {
    "text": "parentheses like this in this case also we need it's a positional argument we need to tell it one click once exactly",
    "start": "2216190",
    "end": "2221530"
  },
  {
    "text": "one argument so we need to use increment here with parentheses around them and then we click Save and still there's a",
    "start": "2221530",
    "end": "2229090"
  },
  {
    "text": "problem right increment here in the in place before doesn't have the number",
    "start": "2229090",
    "end": "2236590"
  },
  {
    "text": "attached to it by how much we should increment it so let's do this and save and now we're good again we have minus",
    "start": "2236590",
    "end": "2243970"
  },
  {
    "text": "plus and plus two right and it's a very simple example of course but this",
    "start": "2243970",
    "end": "2249280"
  },
  {
    "text": "development experience of course it works across modules it works across like other packages it's just really",
    "start": "2249280",
    "end": "2255760"
  },
  {
    "text": "nice and it helps you develop with confidence right the code just tends to work when it compiles it works and",
    "start": "2255760",
    "end": "2261730"
  },
  {
    "text": "sometimes it takes a while to get it to compile again because like when you refactor like all kinds of stuff all of",
    "start": "2261730",
    "end": "2267070"
  },
  {
    "text": "a sudden looks different but the compiler just nags you until everything works out again and this is a really",
    "start": "2267070",
    "end": "2272290"
  },
  {
    "text": "really nice thing that let you sleep much calmer there's also a really nice feature in that elm can",
    "start": "2272290",
    "end": "2278240"
  },
  {
    "text": "check the types of the packages that are generated and then it can enforce correct semantic versioning so basically",
    "start": "2278240",
    "end": "2285410"
  },
  {
    "text": "when you do an update to a package and you change something because you rename a variable or a rename function then the",
    "start": "2285410",
    "end": "2293059"
  },
  {
    "text": "Elm compiler will say hey the types are different this is a breaking change you have to do a major version upgrade the",
    "start": "2293059",
    "end": "2299210"
  },
  {
    "text": "small caveat is of course that if you just do like if you have a boolean and then you treat it differently or stuff like that so these kinds of things it",
    "start": "2299210",
    "end": "2305180"
  },
  {
    "text": "cannot check for you but a lot of the like usual semantic versioning breakages that happen in like JavaScript packages",
    "start": "2305180",
    "end": "2310849"
  },
  {
    "text": "it can catch these because the compiler just knows about it okay so time to go",
    "start": "2310849",
    "end": "2319790"
  },
  {
    "text": "to slowly come to the end what do they have my singing here okay quickly I just",
    "start": "2319790",
    "end": "2326960"
  },
  {
    "text": "passed like mentioned these commands in passing just to quickly show you how that works because maybe you're still wondering how to do side effects so for",
    "start": "2326960",
    "end": "2334160"
  },
  {
    "text": "stuff like HTTP requests or generate random numbers and things like these we need to use commands and the basic way",
    "start": "2334160",
    "end": "2340069"
  },
  {
    "text": "that this works is as you see here so send command it basically constructs one of these",
    "start": "2340069",
    "end": "2346670"
  },
  {
    "text": "command values it uses the HTTP library to say okay when this command should be",
    "start": "2346670",
    "end": "2352040"
  },
  {
    "text": "done like clear run time please go and do an HTTP GET string to this particular",
    "start": "2352040",
    "end": "2357380"
  },
  {
    "text": "URL and and this is the the second parameter to http send in line nine when",
    "start": "2357380",
    "end": "2364010"
  },
  {
    "text": "this comes back either like succeeding or failing please send the loaded",
    "start": "2364010",
    "end": "2370250"
  },
  {
    "text": "message back to my update function right and then in the update function you have a case and then you handle loaded either",
    "start": "2370250",
    "end": "2377059"
  },
  {
    "text": "with okay if it went well with the text that you want it to have or you handle",
    "start": "2377059",
    "end": "2382190"
  },
  {
    "text": "loaded with the error and then whatever HTTP error timeout or whatever is",
    "start": "2382190",
    "end": "2387400"
  },
  {
    "text": "captured in that HTTP error okay ports",
    "start": "2387400",
    "end": "2393430"
  },
  {
    "text": "okay I see I'm running a bit low on time so I'm just going to quickly go over this ports are basically similar to",
    "start": "2393430",
    "end": "2398960"
  },
  {
    "text": "commands but instead of talking to the on runtime and doing like things that are more or less pre baked into it ports",
    "start": "2398960",
    "end": "2405200"
  },
  {
    "text": "are used to have so you have your bright your own javascript next to your elm code and then you can communicate with",
    "start": "2405200",
    "end": "2410900"
  },
  {
    "text": "messages back and forth this is useful if for example you want to play audio which the elm light library doesn't",
    "start": "2410900",
    "end": "2416930"
  },
  {
    "text": "support yet then you write a bit of JavaScript that uses D Web Audio SDK and then you send a message through ports to",
    "start": "2416930",
    "end": "2423560"
  },
  {
    "text": "Chaves scripts the JavaScript starts playing and then if you like you can send messages back again the overall",
    "start": "2423560",
    "end": "2430190"
  },
  {
    "text": "experience of building production elm apps with Alain was super nice we really never had runtime exceptions which i",
    "start": "2430190",
    "end": "2436940"
  },
  {
    "text": "think is really a fantastic development experience the compiler helps you all the time and you have this wonderful",
    "start": "2436940",
    "end": "2442790"
  },
  {
    "text": "confidence in your code you're not like I need to push this button oh my god maybe it's gonna break in writing",
    "start": "2442790",
    "end": "2448430"
  },
  {
    "text": "production in these kinds of things right so reading great obstacles some of",
    "start": "2448430",
    "end": "2455660"
  },
  {
    "text": "the things that are like not so ideal sometimes you need to use ports for things that seem kind of trivial for",
    "start": "2455660",
    "end": "2461840"
  },
  {
    "text": "example to move focus between several input elements which is a bit annoying because in JavaScript is like not even a",
    "start": "2461840",
    "end": "2467840"
  },
  {
    "text": "one-liner basically and in elm you have to then set up ports and stuff like that you can't at the moment publish native",
    "start": "2467840",
    "end": "2474800"
  },
  {
    "text": "modules so basically all modules that also have JavaScript accompanying it but",
    "start": "2474800",
    "end": "2480350"
  },
  {
    "text": "you can do that just with github sharing code and there is a thing when you use",
    "start": "2480350",
    "end": "2486590"
  },
  {
    "text": "ports and you like deal like send messages back and forth you not only have to define the types of these things",
    "start": "2486590",
    "end": "2492710"
  },
  {
    "text": "that get sector sent back and forth but you have to write what's called Chase and decoders these things are a bit",
    "start": "2492710",
    "end": "2498410"
  },
  {
    "text": "tedious to write in theory for most of the cases the compiler could do it for you but for now it doesn't ok I think I",
    "start": "2498410",
    "end": "2505250"
  },
  {
    "text": "was absolutely ready to be used in production it drastically reduces part counts the development speed as I said",
    "start": "2505250",
    "end": "2511010"
  },
  {
    "text": "before it doesn't slow down as the project gets bigger and realistically you will probably have to maintain some",
    "start": "2511010",
    "end": "2517580"
  },
  {
    "text": "JavaScript on the side but I think that you still gain a lot if you can move the majority of your logic into L if you",
    "start": "2517580",
    "end": "2525260"
  },
  {
    "text": "want to learn more about it there's try l9 org which is an online editor that you can use to play around with on Allen",
    "start": "2525260",
    "end": "2532130"
  },
  {
    "text": "Lang dot orc you can get the compiler and all the links to the editor plugins",
    "start": "2532130",
    "end": "2537320"
  },
  {
    "text": "and stuff like that in the beginning maybe try it for a site tool or internal tool and go on the arm slack and ask",
    "start": "2537320",
    "end": "2543830"
  },
  {
    "text": "questions the very beginner friendly yeah with that thank you all for coming and I'm Daniel Butler I'm Danny x-23 and",
    "start": "2543830",
    "end": "2551630"
  },
  {
    "text": "Twitter and please ask questions and rate the talk thank you yeah we have",
    "start": "2551630",
    "end": "2563060"
  },
  {
    "text": "some questions one of them is are there any non-trivial open-source M",
    "start": "2563060",
    "end": "2569030"
  },
  {
    "text": "applications that could be used to learn a silent pneumatic and stuff",
    "start": "2569030",
    "end": "2574730"
  },
  {
    "text": "yes so if you go to Allen Langer org there's a couple of projects linked out and they are there's at least some of",
    "start": "2574730",
    "end": "2583160"
  },
  {
    "text": "them who have like a couple of thousand code lines or so I don't know if there's any like tens of thousands or so",
    "start": "2583160",
    "end": "2589520"
  },
  {
    "text": "open-source projects yet but there's definitely a few and two questions about",
    "start": "2589520",
    "end": "2595460"
  },
  {
    "text": "default values on models or parameters or on attributes yeah it's possible yes",
    "start": "2595460",
    "end": "2602510"
  },
  {
    "text": "this is something that I didn't have the time to go into it there's something called partial function application that",
    "start": "2602510",
    "end": "2607970"
  },
  {
    "text": "you can do in L where basically you can have a function with let's say seven parameters and if most of the time you",
    "start": "2607970",
    "end": "2613340"
  },
  {
    "text": "just need two of them then you can make a new function based on this function with seven parameters that has five of",
    "start": "2613340",
    "end": "2620510"
  },
  {
    "text": "these parameters applied in a default way so that's how you would do it",
    "start": "2620510",
    "end": "2626140"
  },
  {
    "text": "another two questions really about how do you structure or split an application which is a bit more complex so this is",
    "start": "2626170",
    "end": "2635510"
  },
  {
    "text": "an interesting point a lot of people are coming from react or similar other UI frameworks they think in components",
    "start": "2635510",
    "end": "2641480"
  },
  {
    "text": "right so there's a visual component and they think like okay this should have its own update and its own view and its own unit basically which you can do in L",
    "start": "2641480",
    "end": "2651530"
  },
  {
    "text": "so you can do this kind of structuring but usually it's more idiomatic if you just try to create different functions",
    "start": "2651530",
    "end": "2658580"
  },
  {
    "text": "and then maybe you have this one thing that renders like what like an abstract",
    "start": "2658580",
    "end": "2663830"
  },
  {
    "text": "of a person like first name last name whatever github repository count or whatever and then maybe you just have a",
    "start": "2663830",
    "end": "2669710"
  },
  {
    "text": "function that renders this given a certain kind of data but you don't but you wouldn't necessarily have its",
    "start": "2669710",
    "end": "2675109"
  },
  {
    "text": "own update function and these kinds of things again this is a bit of a bigger topic so because it's a bit of a mind",
    "start": "2675109",
    "end": "2680660"
  },
  {
    "text": "shift but you can absolutely structure your applications in a similar way but it's usually nicer if you just think in",
    "start": "2680660",
    "end": "2688009"
  },
  {
    "text": "functions first how about using other frameworks like ember x GS and something",
    "start": "2688009",
    "end": "2694579"
  },
  {
    "text": "like that in L you can't do it so the Elm is really tied to its own",
    "start": "2694579",
    "end": "2700940"
  },
  {
    "text": "implementation of the virtual Dom so it works basically similar to what react does and that's the only way you can",
    "start": "2700940",
    "end": "2707029"
  },
  {
    "text": "write code in it and you basically now you live in your like own little bubble so there's no directly calling out to",
    "start": "2707029",
    "end": "2712759"
  },
  {
    "text": "JavaScript in any form which is what makes it possible to give you all these guarantees on the other hand another",
    "start": "2712759",
    "end": "2720799"
  },
  {
    "text": "question I just read it it's been a while since the last major release of elm when will be the next release and",
    "start": "2720799",
    "end": "2727700"
  },
  {
    "text": "will it support server-side rendering on nodejs yeah I don't know I mean it's",
    "start": "2727700",
    "end": "2734359"
  },
  {
    "text": "definitely actively developed evan isn't the creator of the language was like the",
    "start": "2734359",
    "end": "2739730"
  },
  {
    "text": "main developer on it isn't very keen on publicizing any deadlines we know that",
    "start": "2739730",
    "end": "2745730"
  },
  {
    "text": "he's working on it and has been for a year it's probably gonna be soon ish",
    "start": "2745730",
    "end": "2751130"
  },
  {
    "text": "whether it's gonna be this year or well like human nobody knows server-side",
    "start": "2751130",
    "end": "2756559"
  },
  {
    "text": "rendering was set to be in his like focus whether it will be a nice language",
    "start": "2756559",
    "end": "2761960"
  },
  {
    "text": "to develop for node I'm not so sure for now because it's just like very much made for creating browser apps at the",
    "start": "2761960",
    "end": "2767960"
  },
  {
    "text": "moment yeah but there is some some support hinted at for like at least like",
    "start": "2767960",
    "end": "2773089"
  },
  {
    "text": "rendering the initial like basically HTML that you could serve to a non JavaScript enabled client and then also",
    "start": "2773089",
    "end": "2779390"
  },
  {
    "text": "one yeah one this track at least any vital question a comparison question can",
    "start": "2779390",
    "end": "2784819"
  },
  {
    "text": "you compare it a bit to Alex here yeah that's that's very different they're",
    "start": "2784819",
    "end": "2789980"
  },
  {
    "text": "often used side by side because Alex here of course is a server-side language right and it has a great concurrency",
    "start": "2789980",
    "end": "2797539"
  },
  {
    "text": "model whereas Alan doesn't have any basically right I mean it has effect like concurrency model through this update cycle but alum is very much like",
    "start": "2797539",
    "end": "2805640"
  },
  {
    "text": "focused on writing user interfaces like basically in the browser right whereas elixir is",
    "start": "2805640",
    "end": "2810990"
  },
  {
    "text": "something that runs on the server and it's very good at like handling like a lot of processes that communicate with",
    "start": "2810990",
    "end": "2816570"
  },
  {
    "text": "different end points and stuff like that but as I said they're often used together so in the company no red ink",
    "start": "2816570",
    "end": "2822750"
  },
  {
    "text": "where Evan works who develops the language they use both of these languages together",
    "start": "2822750",
    "end": "2827840"
  },
  {
    "text": "okay the others have probably be answered already in the end of your talk",
    "start": "2827840",
    "end": "2834170"
  },
  {
    "text": "any other questions in the room here okay you just replace any java",
    "start": "2834170",
    "end": "2846870"
  },
  {
    "text": "application for example or yes so basically everything that runs in the JavaScript that runs in the browser and",
    "start": "2846870",
    "end": "2853920"
  },
  {
    "text": "doesn't have like external dependencies that you need to bring in is a good",
    "start": "2853920",
    "end": "2859050"
  },
  {
    "text": "candidate to replace so basically the majority of web applications if you start building them now or if you",
    "start": "2859050",
    "end": "2864450"
  },
  {
    "text": "rewrite something that you have I think would be a good candidate the caveat is",
    "start": "2864450",
    "end": "2870090"
  },
  {
    "text": "if you have a lot of like experimental Web API that you use like WebGL plus Web Audio and so forth at some point maybe",
    "start": "2870090",
    "end": "2877110"
  },
  {
    "text": "you've you spend most of your time like sending messages through the ports to your JavaScript that you also have to",
    "start": "2877110",
    "end": "2882150"
  },
  {
    "text": "maintain and then you have to make this trade-off does it make sense but for a lot of like the normal kind of business",
    "start": "2882150",
    "end": "2888060"
  },
  {
    "text": "just display a couple of forums like make validations these kind of things I think Elm is a fantastic language okay",
    "start": "2888060",
    "end": "2895950"
  },
  {
    "text": "last question Thanks it is actually my second question okay ask on all night",
    "start": "2895950",
    "end": "2902160"
  },
  {
    "text": "very nice talk one thing I want to ask and I find it difficult so in redux how",
    "start": "2902160",
    "end": "2910110"
  },
  {
    "text": "do you work with the front-end team like they have to learn these strange definitional views that is there",
    "start": "2910110",
    "end": "2917250"
  },
  {
    "text": "something you mitigate somehow so we have this we had this experience when we",
    "start": "2917250",
    "end": "2922920"
  },
  {
    "text": "did our production if we have one developer who is mostly responsible for styling and designing she does have some",
    "start": "2922920",
    "end": "2931140"
  },
  {
    "text": "Python experience so she's maybe not your typical like entire just CSS person but she was really she was into it and",
    "start": "2931140",
    "end": "2938910"
  },
  {
    "text": "she liked it and it like as I said like it takes a few days for your to accommodate to this like kind of",
    "start": "2938910",
    "end": "2945029"
  },
  {
    "text": "writing like basically HTML again but it's totally possible and I think that",
    "start": "2945029",
    "end": "2950910"
  },
  {
    "text": "if you invite them and like try to explain these things like we can write",
    "start": "2950910",
    "end": "2956099"
  },
  {
    "text": "back free software with if we do it this way that they might very well be open to adjusting to different kind of doing it",
    "start": "2956099",
    "end": "2963529"
  },
  {
    "text": "writing back free software so very good ok thanks a lot thank you",
    "start": "2963529",
    "end": "2970530"
  },
  {
    "text": "[Applause]",
    "start": "2970530",
    "end": "2973819"
  }
]