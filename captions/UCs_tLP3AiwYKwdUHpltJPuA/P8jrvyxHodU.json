[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "okay so thank you for the invitation to have me speak here what i'm gonna speak",
    "start": "7200",
    "end": "13200"
  },
  {
    "text": "about is scala obviously and i'm going to speak about scala the simple parts",
    "start": "13200",
    "end": "18960"
  },
  {
    "text": "and that implies that maybe not all the parts as simple as has been applied but implied by many others before so",
    "start": "18960",
    "end": "26720"
  },
  {
    "text": "scala is actually celebrating its 10th anniversary uh so time flies uh ten years ago there",
    "start": "26720",
    "end": "35040"
  },
  {
    "start": "27000",
    "end": "185000"
  },
  {
    "text": "was the first announcement we would never have dreamed to actually have a language that has so many developers that is so popular now we",
    "start": "35040",
    "end": "42079"
  },
  {
    "text": "can't do that so when the announcement came out is we said that we",
    "start": "42079",
    "end": "48640"
  },
  {
    "text": "have a new language that has three innovations so the ones we mentioned",
    "start": "48640",
    "end": "54320"
  },
  {
    "text": "were abstract types and mixing compositions that unify ideas from object and module systems",
    "start": "54320",
    "end": "60879"
  },
  {
    "text": "that's something that hasn't had a lot of press so object and module systems was one of the main important points at the",
    "start": "60879",
    "end": "68960"
  },
  {
    "text": "beginning the second one was pattern matching over class hierarchies unifies function and",
    "start": "68960",
    "end": "74320"
  },
  {
    "text": "object oriented data access and it greatly simplifies the processing of xml trees so",
    "start": "74320",
    "end": "79920"
  },
  {
    "text": "xml was very important when when scala came out and was very important industry-wide",
    "start": "79920",
    "end": "85040"
  },
  {
    "text": "it was a time when everybody ibm many other companies announced the",
    "start": "85040",
    "end": "90960"
  },
  {
    "text": "language that would have built in xml support because xml was so important well now of course times have changed",
    "start": "90960",
    "end": "97280"
  },
  {
    "text": "and maybe we can replace xml with json and in 10 years we can replace it with something else i",
    "start": "97280",
    "end": "103280"
  },
  {
    "text": "would imagine but at the time it was very very very important and in particular was",
    "start": "103280",
    "end": "108320"
  },
  {
    "text": "important because it supported pattern matching so pattern matching is a functional technology and xml was so",
    "start": "108320",
    "end": "114960"
  },
  {
    "text": "sort of the showcase because until then the object-oriented dogma which was very strong everybody believed in that was",
    "start": "114960",
    "end": "121439"
  },
  {
    "text": "that to say well you should put your methods where your data is object-oriented encapsulation and",
    "start": "121439",
    "end": "128000"
  },
  {
    "text": "if at the time if you propose something else you wear a complete heretic people just said no no you you you have",
    "start": "128000",
    "end": "134319"
  },
  {
    "text": "it all wrong so the times have changed quite a bit and and opinions have changed quite a bit",
    "start": "134319",
    "end": "140080"
  },
  {
    "text": "but at the time it was like that and it when xml came out it was the poster",
    "start": "140080",
    "end": "145680"
  },
  {
    "text": "child for why function programming might be useful because you couldn't put methods into an xml",
    "start": "145680",
    "end": "151200"
  },
  {
    "text": "tree it wasn't possible xml was pure data but you still had to analyze and parse it and",
    "start": "151200",
    "end": "156239"
  },
  {
    "text": "that pattern matching was very good for that so that's why xml was sort of at the at the beginning",
    "start": "156239",
    "end": "161680"
  },
  {
    "text": "of scala it played a big role but now it stops the third one was the flexible syntax",
    "start": "161680",
    "end": "167040"
  },
  {
    "text": "and type system enables the construction of advanced libraries and new domain-specific languages",
    "start": "167040",
    "end": "172959"
  },
  {
    "text": "so that sort of uh shows the the theme that scala is a language that has sprouted quite a lot of",
    "start": "172959",
    "end": "179920"
  },
  {
    "text": "domain-specific languages on top of it okay so that was the announcement",
    "start": "179920",
    "end": "185920"
  },
  {
    "start": "185000",
    "end": "260000"
  },
  {
    "text": "and ten years later we scada has grown quite a bit we now have about a hundred",
    "start": "185920",
    "end": "192000"
  },
  {
    "text": "thousand developers uh hard to count but on the ballpark figure",
    "start": "192000",
    "end": "197120"
  },
  {
    "text": "more concrete numbers are 200 000 subscribers uh to the coursera online courses",
    "start": "197120",
    "end": "202800"
  },
  {
    "text": "overall uh 13 number 13 in the redmonk language ratings which are based on",
    "start": "202800",
    "end": "209680"
  },
  {
    "text": "number of github projects and number of stack overflow questions and beyond the numbers what i think is",
    "start": "209680",
    "end": "216400"
  },
  {
    "text": "is more important many many many successful rollouts and happy users so this is great to see that so many people",
    "start": "216400",
    "end": "222319"
  },
  {
    "text": "find this a language that that they can express themselves well in and that makes them",
    "start": "222319",
    "end": "227760"
  },
  {
    "text": "happy to write code but on the other hand scala is also discussed more controversially maybe",
    "start": "227760",
    "end": "233599"
  },
  {
    "text": "than can be expected for a language its age and the question of course is",
    "start": "233599",
    "end": "238799"
  },
  {
    "text": "why i mean scala is probably big than very big compared to what could be expected 10",
    "start": "238799",
    "end": "245200"
  },
  {
    "text": "years ago but compared to say a truly controversial language like c plus plus or java it's tiny so",
    "start": "245200",
    "end": "251920"
  },
  {
    "text": "why is everybody talking about something that in the big grand scheme of things is so",
    "start": "251920",
    "end": "257440"
  },
  {
    "text": "insignificant well i think there are both internal",
    "start": "257440",
    "end": "262639"
  },
  {
    "start": "260000",
    "end": "348000"
  },
  {
    "text": "controversies that doesn't help and then they're the external complaints the internal controversies are that",
    "start": "262639",
    "end": "268160"
  },
  {
    "text": "actually we have quite a few different sub-communities in this gala language who don't agree what programming in",
    "start": "268160",
    "end": "273199"
  },
  {
    "text": "scholars should be and quite often they really don't see the point of the other",
    "start": "273199",
    "end": "279600"
  },
  {
    "text": "communities there are parts that don't see the point of object orientation at all and they are object-oriented programmers",
    "start": "279600",
    "end": "285759"
  },
  {
    "text": "who don't see the point of the uh fine or the more advanced patterns of functional",
    "start": "285759",
    "end": "291919"
  },
  {
    "text": "programming and the two communities sometimes clash and don't mix and then there are the external",
    "start": "291919",
    "end": "297600"
  },
  {
    "text": "complaints like one you hear often is scatter is too academic uh one you hear also often is",
    "start": "297600",
    "end": "303919"
  },
  {
    "text": "scatter is sold out to industry so what is it scala's types are too hard that's what",
    "start": "303919",
    "end": "309680"
  },
  {
    "text": "you often hear but another subset of the community says scholars types are not strict enough we",
    "start": "309680",
    "end": "314720"
  },
  {
    "text": "need more types we need stronger types and a lot of people say scala is everything and the kitchen sink",
    "start": "314720",
    "end": "320800"
  },
  {
    "text": "and that last point is the one that gets me most upset because when i created scala that's precisely the opposite of what i wanted",
    "start": "320800",
    "end": "327919"
  },
  {
    "text": "to create i wanted to create something simple and because the language is a community",
    "start": "327919",
    "end": "333039"
  },
  {
    "text": "effort many people contribute to that and also for historic reasons the perception of scala maybe sometimes",
    "start": "333039",
    "end": "340639"
  },
  {
    "text": "not that so what i want to do in this talk is go back to the simple parts of scala to what i believe the core of scala",
    "start": "340639",
    "end": "347120"
  },
  {
    "text": "is and i believe this whole controversy is a sign that we haven't made it clear",
    "start": "347120",
    "end": "352400"
  },
  {
    "start": "348000",
    "end": "358000"
  },
  {
    "text": "enough what the simple parts of scala are and what the essence of programming in scala is so let's see",
    "start": "352400",
    "end": "358319"
  },
  {
    "start": "358000",
    "end": "406000"
  },
  {
    "text": "what the picture so far is so in most of my talks i had this diagram which says that search",
    "start": "358319",
    "end": "364800"
  },
  {
    "text": "scala is a unifier it unifies object oriented and functional programming and with that you've got at the same",
    "start": "364800",
    "end": "371919"
  },
  {
    "text": "time a unification of essentially scripting languages and systems languages so",
    "start": "371919",
    "end": "377280"
  },
  {
    "text": "scala can be used as a scripting language it even won the script bowl at java one one or two",
    "start": "377280",
    "end": "383360"
  },
  {
    "text": "times and it is also of course the substrate of very large deployment millions of lines",
    "start": "383360",
    "end": "389520"
  },
  {
    "text": "deployments at twitter for instance and many other companies that use it essentially for as the backbone for",
    "start": "389520",
    "end": "396000"
  },
  {
    "text": "their their whole business so scala in that picture was meant to be a scalable language as",
    "start": "396000",
    "end": "402479"
  },
  {
    "text": "the name implies already and if you ask what is scalable then in fact it you could say it has two",
    "start": "402479",
    "end": "408479"
  },
  {
    "text": "meanings the first meaning is a direct meaning to say scalable means growable so scala is a growable",
    "start": "408479",
    "end": "414400"
  },
  {
    "text": "language it's a language that can more be molded into new languages by adding libraries these libraries then",
    "start": "414400",
    "end": "421199"
  },
  {
    "text": "become domain-specific languages that are part of scala and if you want to find out all about",
    "start": "421199",
    "end": "428160"
  },
  {
    "text": "growing a language then by far the best talk about that is guy steele's 1998 oopsler keynote",
    "start": "428160",
    "end": "434720"
  },
  {
    "text": "called growing a language if you haven't seen the talk then by all means do it's a absolute piece of beauty the second",
    "start": "434720",
    "end": "442639"
  },
  {
    "text": "meaning that i'm also going to talk about is a language that enables growth so scalable",
    "start": "442639",
    "end": "448160"
  },
  {
    "text": "in the meaning of enabling growth that means that the same constructs can be used for small as well",
    "start": "448160",
    "end": "454319"
  },
  {
    "text": "as for large systems and that they allow a smooth growth from small to large",
    "start": "454319",
    "end": "460560"
  },
  {
    "text": "so first global language scala definitely is has a lot of features that make it a",
    "start": "460560",
    "end": "466160"
  },
  {
    "text": "growable language it has a very flexible syntax has a flexible type system has user",
    "start": "466160",
    "end": "471599"
  },
  {
    "text": "definable operators has higher order functions implicits and all these things together make it",
    "start": "471599",
    "end": "477120"
  },
  {
    "text": "relatively easy to build new domain specific languages on top of skyline many people have done",
    "start": "477120",
    "end": "482319"
  },
  {
    "text": "that and where this fails you now have macros which are still an experimental feature so",
    "start": "482319",
    "end": "489599"
  },
  {
    "text": "strictly speaking you shouldn't use macros for production use but that has never hold back anyone who",
    "start": "489599",
    "end": "494800"
  },
  {
    "text": "really wanted to create his own syntax and language so a lot of people have jumped on the bandwagon and used macros to create even",
    "start": "494800",
    "end": "502479"
  },
  {
    "text": "more refined and advance the main specific languages on top of scala",
    "start": "502479",
    "end": "508240"
  },
  {
    "start": "508000",
    "end": "565000"
  },
  {
    "text": "so that has indeed led to quite a lot of interesting and successful",
    "start": "508240",
    "end": "513440"
  },
  {
    "text": "domain-specific languages that we have here so there's chisel for hardware there's of course spark for big data",
    "start": "513440",
    "end": "520320"
  },
  {
    "text": "they're spray for http dispatch they're shapeless and scalar z libraries that",
    "start": "520320",
    "end": "525360"
  },
  {
    "text": "essentially do lift scala on the level to the level of type level programming",
    "start": "525360",
    "end": "531120"
  },
  {
    "text": "they're slick for database success so squirrel as an alternative there's specs and scatter tests for",
    "start": "531120",
    "end": "536399"
  },
  {
    "text": "testing there's arca for actors dispatch another http dispatch library and there's sbt",
    "start": "536399",
    "end": "542560"
  },
  {
    "text": "which is essentially a d scalar build tool that uses scala as the language for writing a build",
    "start": "542560",
    "end": "549040"
  },
  {
    "text": "so definitely this uh uh idea of global has worked out there there are a lot of",
    "start": "549040",
    "end": "555760"
  },
  {
    "text": "dsls on top of scala and that's of course just an example that many many more that that",
    "start": "555760",
    "end": "562160"
  },
  {
    "text": "i couldn't fit on the slide here but it's growable good is it always good well in fact i believe",
    "start": "562160",
    "end": "569200"
  },
  {
    "start": "565000",
    "end": "645000"
  },
  {
    "text": "it's a double edged work on the one hand definitely it lets you gives you the freedom to express",
    "start": "569200",
    "end": "575519"
  },
  {
    "text": "yourself to move the language into new fields and that's great but on the other hand it also can",
    "start": "575519",
    "end": "580959"
  },
  {
    "text": "fracture the user community there's a essay that i personally uh",
    "start": "580959",
    "end": "586560"
  },
  {
    "text": "found very good that really definitely rang a bell with me which is called the lisp curse to say well why if lisp is another very",
    "start": "586560",
    "end": "593200"
  },
  {
    "text": "growable language but the lisp curse is essentially that precisely this property leads to a",
    "start": "593200",
    "end": "599200"
  },
  {
    "text": "fractioning of the of the user community besides of course no domain-specific language is liked by",
    "start": "599200",
    "end": "605519"
  },
  {
    "text": "everyone like just like no general purpose language is liked by everyone uh so uh that again leads to",
    "start": "605519",
    "end": "613760"
  },
  {
    "text": "essentially partitioning of the user communities those who like sbt those who hate sbt those who like spark",
    "start": "613760",
    "end": "619680"
  },
  {
    "text": "those who prefer hadoop and so on so and the other problem is that host",
    "start": "619680",
    "end": "624880"
  },
  {
    "text": "languages often get at least part of the blames for the dsls they embed so in summary",
    "start": "624880",
    "end": "631279"
  },
  {
    "text": "growable is great for experimentation for the more adventurous among us but it demands discipline to remain",
    "start": "631279",
    "end": "638959"
  },
  {
    "text": "conform to some standard when you want to use it for large-scale production use",
    "start": "638959",
    "end": "646079"
  },
  {
    "start": "645000",
    "end": "745000"
  },
  {
    "text": "so the second meaning has been a little bit overlooked uh with all the the",
    "start": "646079",
    "end": "652320"
  },
  {
    "text": "attention on the first one on this dsls and growable and we can make put new things on top of scala but i",
    "start": "652320",
    "end": "657920"
  },
  {
    "text": "think it's even more important in the end so that scala is really a language for growth you can start with a one-liner",
    "start": "657920",
    "end": "664640"
  },
  {
    "text": "you can experiment quickly and then you can grow without fearing to fall off the cliff",
    "start": "664640",
    "end": "669760"
  },
  {
    "text": "because the same language constructs that helped you write your one-liner still apply when you write your million",
    "start": "669760",
    "end": "676240"
  },
  {
    "text": "line system it's just objects all the way downs and functions all the way down there's not other things that you have",
    "start": "676240",
    "end": "682079"
  },
  {
    "text": "to learn that then kick in for programming in the large say it's really the same language constructs that scale",
    "start": "682079",
    "end": "688160"
  },
  {
    "text": "up from scripts to large systems and scatter deployments indeed now go into",
    "start": "688160",
    "end": "693920"
  },
  {
    "text": "the millions of lines of code and the best characterization what that means a large system like that",
    "start": "693920",
    "end": "700079"
  },
  {
    "text": "that i've heard is this one here to say a large system is one where you do not even know that some of its components exist so",
    "start": "700079",
    "end": "706959"
  },
  {
    "text": "that's that's the definition of a large system you don't even know that certain things exist in that system",
    "start": "706959",
    "end": "712639"
  },
  {
    "text": "where you work on some part of that and we will find out what that means for software construction",
    "start": "712639",
    "end": "719040"
  },
  {
    "text": "so the language works indeed for very large programs the tools are challenged the larger the code bases",
    "start": "719040",
    "end": "724880"
  },
  {
    "text": "get for instance the higher the pressure on build times and we're working very hard to make the",
    "start": "724880",
    "end": "730480"
  },
  {
    "text": "tools catch up uh in the latest version of scala for instance we have dramatically improved",
    "start": "730480",
    "end": "735519"
  },
  {
    "text": "incremental build times and i hope we hope that this will help a lot of people out there that that",
    "start": "735519",
    "end": "740959"
  },
  {
    "text": "are struggling with the large scale code basis so what enables growth so what is this",
    "start": "740959",
    "end": "748320"
  },
  {
    "start": "745000",
    "end": "797000"
  },
  {
    "text": "thing that makes scala enabling growth so i really do believe it's this rather unique combination of object oriented",
    "start": "748320",
    "end": "754800"
  },
  {
    "text": "and functional because large systems that we see out there they really rely on both",
    "start": "754800",
    "end": "760000"
  },
  {
    "text": "so they generally take to be tend to be quite disciplined and functional and that's good but when you compo in the components of",
    "start": "760000",
    "end": "767600"
  },
  {
    "text": "course they use all the tricks available in the object oriented system because functional alone doesn't really",
    "start": "767600",
    "end": "774079"
  },
  {
    "text": "give you the the glue the the the composition the grouping mechanisms for large systems",
    "start": "774079",
    "end": "782160"
  },
  {
    "text": "a problem with that is that there's no established name for this should we call this language object functional some",
    "start": "782160",
    "end": "788399"
  },
  {
    "text": "people have proposed that but i don't like terms with a slash in them it reminds me too much of pl1",
    "start": "788399",
    "end": "794320"
  },
  {
    "text": "so so what do we do well what we would like to do but we",
    "start": "794320",
    "end": "799920"
  },
  {
    "start": "797000",
    "end": "848000"
  },
  {
    "text": "would prefer it to be like this to have functional and object programming in harmony sitting on the",
    "start": "799920",
    "end": "806480"
  },
  {
    "text": "beach but in actual reality it's unfortunately more often like this",
    "start": "806480",
    "end": "811920"
  },
  {
    "text": "that's how many functional people see object-oriented programming the evil manager that leans over your",
    "start": "811920",
    "end": "818399"
  },
  {
    "text": "cubicle and says well you haven't written your umldr diagram in the right way",
    "start": "818399",
    "end": "823519"
  },
  {
    "text": "and that's how many object-oriented people see functional programming as the uh the mad scientist that cocked",
    "start": "823519",
    "end": "830320"
  },
  {
    "text": "something that can't lead to any good and probably will threaten the world",
    "start": "830320",
    "end": "835600"
  },
  {
    "text": "and that's unfortunately where i find uh scala often to be so between the two",
    "start": "836639",
    "end": "842480"
  },
  {
    "text": "chairs falling between the chairs and getting the blame from both sides",
    "start": "842480",
    "end": "847839"
  },
  {
    "text": "another quote which is rather funny is james iris quote that scalars wrote in his role in",
    "start": "847839",
    "end": "853760"
  },
  {
    "start": "848000",
    "end": "924000"
  },
  {
    "text": "history so james has written this brief incomplete and mostly wrong history of programming languages it's hilarious if",
    "start": "853760",
    "end": "860480"
  },
  {
    "text": "you haven't seen that yet so here's what he writes about scala it's the last entry as far as i know",
    "start": "860480",
    "end": "865519"
  },
  {
    "text": "a drunken martin udersky sees a reese peanut butter cup at featuring somebody's peanut butter",
    "start": "865519",
    "end": "870560"
  },
  {
    "text": "getting on somebody else's chocolate and has an idea he creates scala a language that unifies constructs from",
    "start": "870560",
    "end": "876320"
  },
  {
    "text": "both object oriented and functional languages this pisses off both groups and each promptly declares jihad",
    "start": "876320",
    "end": "882160"
  },
  {
    "text": "so that's amazingly prescient i didn't when it came out it came when it came out i didn't",
    "start": "882160",
    "end": "888079"
  },
  {
    "text": "actually i thought it was slightly funny but now i'm actually not sure whether i should well at first it's actually true and",
    "start": "888079",
    "end": "894880"
  },
  {
    "text": "second i i'm not sure whether it's that funny anymore but",
    "start": "894880",
    "end": "900079"
  },
  {
    "text": "okay so so much for functional object oriented you see it's a tough it's a",
    "start": "901760",
    "end": "906880"
  },
  {
    "text": "tough area to be in so what i would like to propose is actually to slightly shift the viewpoint or if not",
    "start": "906880",
    "end": "913920"
  },
  {
    "text": "the viewpoint and at least the name we give to this thing so another way to view scala",
    "start": "913920",
    "end": "919839"
  },
  {
    "text": "is as a inherently modular language so what that means is that scala is",
    "start": "919839",
    "end": "926079"
  },
  {
    "start": "924000",
    "end": "979000"
  },
  {
    "text": "still a fusion of object-oriented and functional but it achieves that to go from small scripts to large systems because",
    "start": "926079",
    "end": "932959"
  },
  {
    "text": "it is very modular so what does modular programming mean exactly",
    "start": "932959",
    "end": "938079"
  },
  {
    "text": "well module programming means simply that systems should be composed from modules okay and",
    "start": "938079",
    "end": "944079"
  },
  {
    "text": "what are modules well modules should be simple parts and that can be combined in many flexible",
    "start": "944079",
    "end": "950959"
  },
  {
    "text": "ways to give interesting results simple parts that can be combined in many ways",
    "start": "950959",
    "end": "957199"
  },
  {
    "text": "and simple often means encapsulates one functionality only one but you could say",
    "start": "957199",
    "end": "963519"
  },
  {
    "text": "well that's old hat modular programming that's an early 80s phenomenon we had languages like modular",
    "start": "963519",
    "end": "969440"
  },
  {
    "text": "2 then and indeed i have a i have a certain fondness for modular 2 because that was the first language i programmed",
    "start": "969440",
    "end": "976639"
  },
  {
    "text": "seriously in and i think indeed modular 2 was great for its time but",
    "start": "976639",
    "end": "982079"
  },
  {
    "text": "these are not the early 80s times have changed in particular in the early 80s most",
    "start": "982079",
    "end": "987120"
  },
  {
    "text": "languages which and most computers were for neumann languages on for neumann",
    "start": "987120",
    "end": "992399"
  },
  {
    "text": "computers so that means that essentially a computer was a memory and a processor and a bus of one worldwide",
    "start": "992399",
    "end": "998560"
  },
  {
    "text": "and the languages reflected that so they had variables of a simple type or a pointer both fitted and",
    "start": "998560",
    "end": "1003600"
  },
  {
    "text": "fitted in a word and your the whole every api parameter or function was just",
    "start": "1003600",
    "end": "1010320"
  },
  {
    "text": "one word wide so to manipulate the system you had to do it word by word and at the time there was",
    "start": "1010320",
    "end": "1015759"
  },
  {
    "text": "already john beckers the inventor of the first high level for neumann language that was fortran",
    "start": "1015759",
    "end": "1021360"
  },
  {
    "text": "when he got the touring award in the 70s he gave a touring award lecture which essentially coined this term the fun",
    "start": "1021360",
    "end": "1027360"
  },
  {
    "text": "neumann bottleneck because he says well languages have to evolve beyond that because they have to",
    "start": "1027360",
    "end": "1032880"
  },
  {
    "text": "speak about higher level things not just single words they have to speak about graphs and polynomials and texts and",
    "start": "1032880",
    "end": "1039600"
  },
  {
    "text": "things like that and to do that you need a mathematical theory of these things and if you look at mathematics and",
    "start": "1039600",
    "end": "1044959"
  },
  {
    "text": "those ta theories are always immutable you never modify something in place in mathematics",
    "start": "1044959",
    "end": "1050799"
  },
  {
    "text": "and because of that you need functional programming so that was sort of the wake up call for functional programming in the 70s",
    "start": "1050799",
    "end": "1058640"
  },
  {
    "text": "okay so if you believe that then definitely function programming is a part of modular programming and indeed",
    "start": "1058640",
    "end": "1064160"
  },
  {
    "text": "if you look at the second most important foundational paper for function programming then i would say",
    "start": "1064160",
    "end": "1069919"
  },
  {
    "text": "it's this one here why functional programming matters john hughes 1985 and his case is clearly a case of",
    "start": "1069919",
    "end": "1076880"
  },
  {
    "text": "modularity so what john use says is well in an imperative program you",
    "start": "1076880",
    "end": "1081919"
  },
  {
    "text": "have an algorithm in the algorithm he looked at was just a newton-raphson iteration for square root",
    "start": "1081919",
    "end": "1087600"
  },
  {
    "text": "could have been any algorithm you have an algorithm and it has a loop and it has an iteration step and it has",
    "start": "1087600",
    "end": "1092640"
  },
  {
    "text": "a termination condition and they're all mangled together what he could do with functional programming is he could split these",
    "start": "1092640",
    "end": "1099520"
  },
  {
    "text": "elements into different modules functions that could be combined with in a mix and match approach so he split",
    "start": "1099520",
    "end": "1106240"
  },
  {
    "text": "these apart into separate functions and could combine them clear argument to modularity",
    "start": "1106240",
    "end": "1111919"
  },
  {
    "text": "so does that mean that functional programming is really the same as modular programming",
    "start": "1111919",
    "end": "1117200"
  },
  {
    "start": "1112000",
    "end": "1188000"
  },
  {
    "text": "well it has as i said it helps a lot but it's not synonymous synonymous it's not exactly the same",
    "start": "1117200",
    "end": "1122960"
  },
  {
    "text": "thing some concepts in functional languages are at odds in with modularities so for instance",
    "start": "1122960",
    "end": "1128720"
  },
  {
    "text": "sometimes functional languages or some functional languages assume in some areas a global namespace",
    "start": "1128720",
    "end": "1134799"
  },
  {
    "text": "an example are type classes in haskell you can only have one instance for a class in your whole",
    "start": "1134799",
    "end": "1140400"
  },
  {
    "text": "program and if you remember the definition of what a large system is you don't even",
    "start": "1140400",
    "end": "1146640"
  },
  {
    "text": "know certain components exist that's a problem because you don't know whether the components that you don't",
    "start": "1146640",
    "end": "1152000"
  },
  {
    "text": "know exists might have an implementation of your type class that will conflict with",
    "start": "1152000",
    "end": "1157280"
  },
  {
    "text": "yours and there are other things some functional languages have very strong module systems for instance sml",
    "start": "1157280",
    "end": "1163039"
  },
  {
    "text": "or camera other have module systems that are rather weaker for instance haskell or",
    "start": "1163039",
    "end": "1169440"
  },
  {
    "text": "clojure let's let's pick those two and then you can of also discuss whether dynamic typing",
    "start": "1169440",
    "end": "1174799"
  },
  {
    "text": "is actually something that is at odds with modularity because it gives you a",
    "start": "1174799",
    "end": "1180240"
  },
  {
    "text": "weaker way to check your interfaces or not but that's a completely different discussion and i'd rather steer away from that one",
    "start": "1180240",
    "end": "1188720"
  },
  {
    "start": "1188000",
    "end": "1297000"
  },
  {
    "text": "so objects and modules what what's their relationship so in a sense you could say",
    "start": "1188720",
    "end": "1194320"
  },
  {
    "text": "object-oriented languages were sort of the successors of modular languages because there was this",
    "start": "1194320",
    "end": "1199600"
  },
  {
    "text": "idea to say well instead of having single modules let's be more flexible let's have classes that can create these",
    "start": "1199600",
    "end": "1205600"
  },
  {
    "text": "things at runtime where we can have an arbitrary number of instances let's have traits or interfaces that be are the",
    "start": "1205600",
    "end": "1213360"
  },
  {
    "text": "apis of for those so that we can have a single module a single class has multiple",
    "start": "1213360",
    "end": "1218960"
  },
  {
    "text": "interfaces and the single interface can be implemented by multiple classes so it was in a sense a more flexible way to be",
    "start": "1218960",
    "end": "1225360"
  },
  {
    "text": "modular but on the other hand object oriented doesn't always imply modular either",
    "start": "1225360",
    "end": "1230640"
  },
  {
    "text": "so for instance we see we see things in at least old ruby monkey patching i i'm",
    "start": "1230640",
    "end": "1238000"
  },
  {
    "text": "hearing the ruby community steering away from that so that's very good because monkey patching of course is not",
    "start": "1238000",
    "end": "1243120"
  },
  {
    "text": "modular it has the same problem that you can of you can patch the same name only once in your whole program",
    "start": "1243120",
    "end": "1249440"
  },
  {
    "text": "and if somebody else does tries to do that you have very weird bugs and very hard to track down problems",
    "start": "1249440",
    "end": "1256000"
  },
  {
    "text": "reliance on mutable state is not modular because it gives you a lot of hidden dependencies",
    "start": "1256000",
    "end": "1261600"
  },
  {
    "text": "and then a lot of mainstream object-oriented languages have rather weak composition and decomposition",
    "start": "1261600",
    "end": "1267039"
  },
  {
    "text": "facilities so the effects of that is that they then need to rely on external dependency",
    "start": "1267039",
    "end": "1273440"
  },
  {
    "text": "injection frameworks so that's something that in principle the modules in your language should do",
    "start": "1273440",
    "end": "1279039"
  },
  {
    "text": "but if the language can't do it you need something else that uses aspect-oriented programming or",
    "start": "1279039",
    "end": "1284159"
  },
  {
    "text": "bytecode rewriting and the decomposition facilities often encourage this idea",
    "start": "1284159",
    "end": "1289679"
  },
  {
    "text": "that you should put your methods where your classes are which sometimes is the right approach",
    "start": "1289679",
    "end": "1294720"
  },
  {
    "text": "but not always so i want to come back to scala and it's",
    "start": "1294720",
    "end": "1300240"
  },
  {
    "start": "1297000",
    "end": "1356000"
  },
  {
    "text": "simple parts if we now look what the simple parts are modules and parts so they should be",
    "start": "1300240",
    "end": "1306559"
  },
  {
    "text": "simple and they should be combined in flexible ways before looking at modules how scala can",
    "start": "1306559",
    "end": "1311919"
  },
  {
    "text": "write modules as a library components let's look at the language itself what are the simple parts in scala that can",
    "start": "1311919",
    "end": "1318320"
  },
  {
    "text": "be mixed and matched in a flexible way what i'm gonna do is i'm gonna propose",
    "start": "1318320",
    "end": "1323600"
  },
  {
    "text": "seven simple building blocks i sort of took a bit uh an",
    "start": "1323600",
    "end": "1328960"
  },
  {
    "text": "overview of like the the programs and the classes i wrote uh in the in the past years and says what",
    "start": "1328960",
    "end": "1335440"
  },
  {
    "text": "are the things i can't do without what i really rely on because of course when i write code in scholar i find it",
    "start": "1335440",
    "end": "1341200"
  },
  {
    "text": "rather simple you could say well of course he does but i i still think i i want i want to sort",
    "start": "1341200",
    "end": "1348000"
  },
  {
    "text": "of give you my viewpoint why i find it simple and what i use what about where i think that",
    "start": "1348000",
    "end": "1353840"
  },
  {
    "text": "that things combine well as always of course simple is not the same as easy",
    "start": "1353840",
    "end": "1360559"
  },
  {
    "start": "1356000",
    "end": "1386000"
  },
  {
    "text": "so quoting rich hickey here some people confused still confuse the",
    "start": "1360559",
    "end": "1365760"
  },
  {
    "text": "two easy means it's something that is pretty close to what you already know it's familiar and therefore you can",
    "start": "1365760",
    "end": "1372240"
  },
  {
    "text": "quickly adopt it simple means something else simple means does one thing only and can be combined",
    "start": "1372240",
    "end": "1378159"
  },
  {
    "text": "well and the two are sometimes the same but not necessarily so and a lot of people confuse one for the",
    "start": "1378159",
    "end": "1384720"
  },
  {
    "text": "other so let's look at the simple parts and the simple parts are actually rather boring",
    "start": "1384720",
    "end": "1389919"
  },
  {
    "start": "1386000",
    "end": "1467000"
  },
  {
    "text": "but they're nevertheless important so i thought it's important that i stress them so for me the first thing which is",
    "start": "1389919",
    "end": "1397360"
  },
  {
    "text": "important is expressions and the fact that everything is an expression so that means i can plug in everything",
    "start": "1397360",
    "end": "1403919"
  },
  {
    "text": "and everything else because an expression of course can be a function call or operation and",
    "start": "1403919",
    "end": "1409200"
  },
  {
    "text": "it takes expressions as operands and because everything is an expression it means that i can compose everything",
    "start": "1409200",
    "end": "1414799"
  },
  {
    "text": "with everything else if i had a language that had statements and expressions like many mainstream",
    "start": "1414799",
    "end": "1420640"
  },
  {
    "text": "languages do i couldn't do that i would live in one world or in the other and when i live in the statement world i",
    "start": "1420640",
    "end": "1426080"
  },
  {
    "text": "have to write these statements one and one after the other and i have to sort of connect them with mutable variables",
    "start": "1426080",
    "end": "1431679"
  },
  {
    "text": "so they they sort of act on these variables it's a much more indirect and less composable way to treat things",
    "start": "1431679",
    "end": "1437760"
  },
  {
    "text": "so here's just some simple code that shows how that works so the if else has the same syntax as in java but",
    "start": "1437760",
    "end": "1445200"
  },
  {
    "text": "it's an expression this thing will give you a string grown up or minor and the same thing happens for match",
    "start": "1445200",
    "end": "1452480"
  },
  {
    "text": "expressions which are the analog of switch in c or java and tries and all the other",
    "start": "1452480",
    "end": "1458320"
  },
  {
    "text": "forms of statements that you would usually see are expressions and that means they can be put inside each other",
    "start": "1458320",
    "end": "1464400"
  },
  {
    "text": "and can be nested good so that was number one number two for me would be this",
    "start": "1464400",
    "end": "1470799"
  },
  {
    "start": "1467000",
    "end": "1515000"
  },
  {
    "text": "principle of nesting scopes so everything in scala can be nested",
    "start": "1470799",
    "end": "1475919"
  },
  {
    "text": "inside everything else and there's a static scoping discipline and that's again very important for just",
    "start": "1475919",
    "end": "1482559"
  },
  {
    "text": "be able to refactor programs freely so in scala you can write a method",
    "start": "1482559",
    "end": "1487760"
  },
  {
    "text": "inside a method in java you can't do that you can't write methods inside methods but you can",
    "start": "1487760",
    "end": "1493200"
  },
  {
    "text": "write a class inside a method and then the method inside the inner class so if there's a single class in",
    "start": "1493200",
    "end": "1498559"
  },
  {
    "text": "between then you're okay so if i would write a class here i'm okay but i can't nest directly",
    "start": "1498559",
    "end": "1504320"
  },
  {
    "text": "why there's no read no good reason why it's just the way it is right but it's a",
    "start": "1504320",
    "end": "1509600"
  },
  {
    "text": "big impediment to actually structure your programs freely so in",
    "start": "1509600",
    "end": "1514720"
  },
  {
    "text": "scala the two namespaces terms of terms and types and they have exactly the same rule for",
    "start": "1514720",
    "end": "1521279"
  },
  {
    "start": "1515000",
    "end": "1550000"
  },
  {
    "text": "each one whereas in other languages like again quoting java you have four namespaces fields methods",
    "start": "1521279",
    "end": "1528080"
  },
  {
    "text": "classes packages and you have different resolution rules for each one so just to say",
    "start": "1528080",
    "end": "1533120"
  },
  {
    "text": "that's sort of a difference between simple and easy i think the scala the java rules are for someone who comes",
    "start": "1533120",
    "end": "1538880"
  },
  {
    "text": "from java easy because that's what you're used to so you don't see the complexity in all this but it's far from being simple it's",
    "start": "1538880",
    "end": "1545679"
  },
  {
    "text": "rather complex four namespaces different rules for each",
    "start": "1545679",
    "end": "1550720"
  },
  {
    "text": "okay so what this principle leads to is actually a quite a powerful principle to simplify",
    "start": "1550720",
    "end": "1557039"
  },
  {
    "text": "your programs so the first tip i give everyone who says well how can i get on the right track in writing clean",
    "start": "1557039",
    "end": "1563360"
  },
  {
    "text": "scala code is you shouldn't pack too much in an expression it's a rookie mistake for",
    "start": "1563360",
    "end": "1568880"
  },
  {
    "text": "people who are new to functional programming because you can pack things in an expression often",
    "start": "1568880",
    "end": "1574480"
  },
  {
    "start": "1572000",
    "end": "1640000"
  },
  {
    "text": "people do so that's actually code i saw in our code base it's a single expression it does",
    "start": "1574480",
    "end": "1580640"
  },
  {
    "text": "has an amazing amount of functionality but it doesn't mean that you have to do it that way so just for the sake of it i i said well",
    "start": "1580640",
    "end": "1588080"
  },
  {
    "text": "let's let's just refactor this thing see what we get so here's the same expression but now i have i",
    "start": "1588080",
    "end": "1594720"
  },
  {
    "text": "have just factored out all the meaningful intermediate results so it see you see we actually produce a set",
    "start": "1594720",
    "end": "1602640"
  },
  {
    "text": "of sources and then we have a workspace root and then we have a function which says foreign given",
    "start": "1602640",
    "end": "1608720"
  },
  {
    "text": "entry which is a set of files uh we give you uh the files that correspond to",
    "start": "1608720",
    "end": "1615600"
  },
  {
    "text": "the entry and then what we do in the end we iterate over all the sources",
    "start": "1615600",
    "end": "1621360"
  },
  {
    "text": "and for each one of them they get the files that correspond to the entry and we concatenate them all together",
    "start": "1621360",
    "end": "1628159"
  },
  {
    "text": "if you don't know the vocabulary of course this might still look complicated to you but anybody who has sort of a",
    "start": "1628159",
    "end": "1634000"
  },
  {
    "text": "superficial knowledge of scala for them definitely this would be much more legible than the thing i've showed you before",
    "start": "1634000",
    "end": "1639760"
  },
  {
    "text": "and the important thing is that yes i can do that i can write valves so just local definitions but i",
    "start": "1639760",
    "end": "1645520"
  },
  {
    "start": "1640000",
    "end": "1688000"
  },
  {
    "text": "can also write functions that get called only on demand and i can put them right where",
    "start": "1645520",
    "end": "1651840"
  },
  {
    "text": "my result expressions is i don't have to pollute my enclosing class so that makes it very easy and really a",
    "start": "1651840",
    "end": "1658960"
  },
  {
    "text": "no-brainer to do precisely this thing if your language didn't let you do that and you'd have a choice to say i have to create a new",
    "start": "1658960",
    "end": "1665440"
  },
  {
    "text": "method in my class to factor this thing out but then i have to pass a lot of parameters to it and i had to have to write a document",
    "start": "1665440",
    "end": "1671600"
  },
  {
    "text": "and my whole thing will be much much bigger than there's a trade-off and you will be sort of more pushed towards writing very",
    "start": "1671600",
    "end": "1678240"
  },
  {
    "text": "long methods that have a have a soup of loops or long expressions or things like that",
    "start": "1678240",
    "end": "1684640"
  },
  {
    "text": "so that was number two nesting i think is very important number three is patterns and case",
    "start": "1684640",
    "end": "1690720"
  },
  {
    "text": "classes or decomposition and composition so um here's a classical example of that",
    "start": "1690720",
    "end": "1699039"
  },
  {
    "text": "so if you want to have a tree syntax tree that represents arithmetic expressions",
    "start": "1699039",
    "end": "1704880"
  },
  {
    "text": "and you would have a base trade called expression and then then you would have two classes one for numbers and one",
    "start": "1704880",
    "end": "1710000"
  },
  {
    "text": "for plus that both extend the base rate and they have the parameters that you expect so number",
    "start": "1710000",
    "end": "1715520"
  },
  {
    "text": "gets an end and plus gets two expressions that's the two operands of the of the plus and then somewhere else in a",
    "start": "1715520",
    "end": "1721840"
  },
  {
    "text": "different module at a different time you can write an evaluation method if you want and",
    "start": "1721840",
    "end": "1727039"
  },
  {
    "text": "the evaluation method would simply say well let's let's look at what we have here if it's a number let's return the m if",
    "start": "1727039",
    "end": "1733840"
  },
  {
    "text": "it's a plus then let's evaluate recursively the two sub expressions and",
    "start": "1733840",
    "end": "1738960"
  },
  {
    "text": "sum them so that's simple and flexible functional",
    "start": "1738960",
    "end": "1745360"
  },
  {
    "start": "1741000",
    "end": "1787000"
  },
  {
    "text": "programming aficionados coming from ml or haskell would probably say it's two verbose it can be done more concisely in haskell",
    "start": "1745360",
    "end": "1752799"
  },
  {
    "text": "or ml and that's true because haskell and ml have special types for these things called algebraic data types",
    "start": "1752799",
    "end": "1759279"
  },
  {
    "text": "we've chosen not to do that because a we want it to stay simple and uniform everything in scada is a class there's",
    "start": "1759279",
    "end": "1765919"
  },
  {
    "text": "not a separate set of types that express these things and second because i don't think in actual code it matters that much because",
    "start": "1765919",
    "end": "1773120"
  },
  {
    "text": "if you compare the size of your type definitions with the size of everything you do with them then i would believe in every program the",
    "start": "1773120",
    "end": "1779520"
  },
  {
    "text": "types are really a tiny minority so optimizing on the types isn't isn't isn't worth that much",
    "start": "1779520",
    "end": "1787039"
  },
  {
    "start": "1787000",
    "end": "1887000"
  },
  {
    "text": "so if you look at the traditional object oriented alternative for that it would of course be this one here so",
    "start": "1787039",
    "end": "1792640"
  },
  {
    "text": "here we now say well because we don't have pattern matching it's actually very awkward to figure out",
    "start": "1792640",
    "end": "1798240"
  },
  {
    "text": "what the class is we'd have to use an is instance off or as instance off for a visitor pattern or",
    "start": "1798240",
    "end": "1803679"
  },
  {
    "text": "things like that everything is rather clumsy and heavyweight what he would typically do is to say",
    "start": "1803679",
    "end": "1809279"
  },
  {
    "text": "well let's put eval in the trade expression itself and then in our number class uh and in",
    "start": "1809279",
    "end": "1815600"
  },
  {
    "text": "my plus class i have the right implementations of viva and that's okay if that's what your application domain",
    "start": "1815600",
    "end": "1823279"
  },
  {
    "text": "is that means that if you have a set of types a domain model and you know",
    "start": "1823279",
    "end": "1830159"
  },
  {
    "text": "already exactly what you want to do with it namely i have expressions to evaluate them and maybe to pretty print them but",
    "start": "1830159",
    "end": "1836880"
  },
  {
    "text": "i'm sure there won't be anything else on the other hand you have often situations where",
    "start": "1836880",
    "end": "1842159"
  },
  {
    "text": "the data model is given maybe from a database schema or an interchange format or something like that",
    "start": "1842159",
    "end": "1847919"
  },
  {
    "text": "and you don't know what you want to do with it and it might change next year and then the object-oriented approach",
    "start": "1847919",
    "end": "1854159"
  },
  {
    "text": "here is actually the wrong one because you have to sort of touch all these things all the time to change your business",
    "start": "1854159",
    "end": "1859760"
  },
  {
    "text": "logic where what you really should be doing is have a pure data model that's fixed and stable and put your business logic",
    "start": "1859760",
    "end": "1866159"
  },
  {
    "text": "elsewhere in function programming and pattern matching uh you have the choice you can do one or",
    "start": "1866159",
    "end": "1872640"
  },
  {
    "text": "the other of course choice is always something that is also a responsibility for you",
    "start": "1872640",
    "end": "1878080"
  },
  {
    "text": "you have to make the choice but i think in this case it's actually very very important very good because there is no",
    "start": "1878080",
    "end": "1883679"
  },
  {
    "text": "best default it really depends on your application so number four for me would be recursion",
    "start": "1883679",
    "end": "1892080"
  },
  {
    "start": "1887000",
    "end": "1967000"
  },
  {
    "text": "that's of course we all know what recursive functions are they are sort of everywhere but in",
    "start": "1892080",
    "end": "1897200"
  },
  {
    "text": "imperative programs they're rather underused people use rather loops instead and use variables",
    "start": "1897200",
    "end": "1902559"
  },
  {
    "text": "for that and in functional languages what people usually do at first is to replace a loop with",
    "start": "1902559",
    "end": "1909440"
  },
  {
    "text": "combinators like map and flatmap and filter and things like that and that's great that's exactly the right approach",
    "start": "1909440",
    "end": "1914559"
  },
  {
    "text": "that you should be doing but on the other hand there's always a time when your combinator library just",
    "start": "1914559",
    "end": "1920080"
  },
  {
    "text": "doesn't have what you need to do so you need a fallback you need a fallback to say well what if my combinators really",
    "start": "1920080",
    "end": "1926159"
  },
  {
    "text": "don't give me the right vocabulary and then the fall back in function programming i think is really",
    "start": "1926159",
    "end": "1931279"
  },
  {
    "text": "great to have this idea of recursion in particular tail recursive functions",
    "start": "1931279",
    "end": "1936960"
  },
  {
    "text": "that that can simulate by a very systematic way any state machine you can throw up with",
    "start": "1936960",
    "end": "1943360"
  },
  {
    "text": "you can come up with and that do so in particular very efficiently so that's the other thing that sometimes",
    "start": "1943360",
    "end": "1949519"
  },
  {
    "text": "you're concerned that all your higher level operators they might actually cost you too much in",
    "start": "1949519",
    "end": "1955279"
  },
  {
    "text": "general they're plenty fast enough but it could be that you are faced with essentially a hotspot where you say well",
    "start": "1955279",
    "end": "1960559"
  },
  {
    "text": "i have to squeeze every last cycle out of it and then it's it's great that you can specialize by hand",
    "start": "1960559",
    "end": "1966399"
  },
  {
    "text": "and recursive functions and particularly tail recursive functions they're sort of the natural evolution of what you would use",
    "start": "1966399",
    "end": "1973440"
  },
  {
    "start": "1967000",
    "end": "2008000"
  },
  {
    "text": "a loop for in imperative languages so now that i've said that then of course the",
    "start": "1973440",
    "end": "1979279"
  },
  {
    "text": "the number five that you definitely will use a lot in function programming is function values",
    "start": "1979279",
    "end": "1985279"
  },
  {
    "text": "so that one is pretty uncontroversial by now you could say almost all the languages",
    "start": "1985279",
    "end": "1990720"
  },
  {
    "text": "out there have some form of function values sometimes they get the scope rules a little bit wrong",
    "start": "1990720",
    "end": "1996320"
  },
  {
    "text": "like this uh the the meaning of this and javascript closures is a little bit",
    "start": "1996320",
    "end": "2001840"
  },
  {
    "text": "funky but by and large it's it's the right thing and that's great",
    "start": "2001840",
    "end": "2008159"
  },
  {
    "start": "2008000",
    "end": "2036000"
  },
  {
    "text": "number six for me would be collections so collections definitely are the backbone of programming in functional languages",
    "start": "2008159",
    "end": "2014880"
  },
  {
    "text": "we have immutable collections as our default so persistent collections uh that where your program is then a",
    "start": "2014880",
    "end": "2022799"
  },
  {
    "text": "transformer from collections to collections so it takes collections it produces new collections",
    "start": "2022799",
    "end": "2028159"
  },
  {
    "text": "and it's not a crud program a create read update delete program that pokes into collections element by",
    "start": "2028159",
    "end": "2034799"
  },
  {
    "text": "element and scala has a very nice library of immutable collections which happens to be very very simple to",
    "start": "2034799",
    "end": "2041679"
  },
  {
    "start": "2036000",
    "end": "2112000"
  },
  {
    "text": "use and it's simple to use in particular because it has a single vocabulary",
    "start": "2041679",
    "end": "2046799"
  },
  {
    "text": "of powerful operations such as map or filter and they apply to any collection that",
    "start": "2046799",
    "end": "2053040"
  },
  {
    "text": "you could think of that out there including collections that you write yourself so here's a little example in action so",
    "start": "2053040",
    "end": "2058960"
  },
  {
    "text": "we have an array people an array of persons and we map the function that takes the name of the",
    "start": "2058960",
    "end": "2065520"
  },
  {
    "text": "person over the array of people so that's uh that's essentially a screenshot of a worksheet scatter",
    "start": "2065520",
    "end": "2071679"
  },
  {
    "text": "worksheet so you write you type expressions on the left and you get here the types and the",
    "start": "2071679",
    "end": "2076720"
  },
  {
    "text": "answers that the scala rebel would throw back at you so this thing is integrated in the eclipse",
    "start": "2076720",
    "end": "2082398"
  },
  {
    "text": "ide and intellij has a very similar thing so it would respond to say well i go back with a with an array of string",
    "start": "2082399",
    "end": "2088878"
  },
  {
    "text": "you get back an array string and it's bob and carla you could do the same thing with sets so we have a set of one four five seven and",
    "start": "2088879",
    "end": "2095760"
  },
  {
    "text": "you could map it by saying well uh apply a division by two to each operand so that's the uh",
    "start": "2095760",
    "end": "2104078"
  },
  {
    "text": "canonical map over sets and you would get a set of zero two three note that the size of the set is",
    "start": "2104160",
    "end": "2110240"
  },
  {
    "text": "different and that's correct because sets are not sequences so if your map is have a map over a set then it's",
    "start": "2110240",
    "end": "2117280"
  },
  {
    "start": "2112000",
    "end": "2179000"
  },
  {
    "text": "something different than a map over a sequence the important thing is the concept of map is exactly the same it's",
    "start": "2117280",
    "end": "2123359"
  },
  {
    "text": "a mathematical concept here and here we have a third one a map actually of roman numeral so it maps the",
    "start": "2123359",
    "end": "2129920"
  },
  {
    "text": "characters to the corresponding numbers and what that map here does it reverts that",
    "start": "2129920",
    "end": "2135040"
  },
  {
    "text": "it inverts this map here so it swaps essentially the key and value pairs so here you have a key l and a value d",
    "start": "2135040",
    "end": "2141520"
  },
  {
    "text": "and you return a value d and a key l and what's important here is",
    "start": "2141520",
    "end": "2146560"
  },
  {
    "text": "in every case the result is of exactly the same type as what you started with no friction",
    "start": "2146560",
    "end": "2151839"
  },
  {
    "text": "so if i work in sets i want my map to apply to sets i don't want to convert to sequences iterate and then",
    "start": "2151839",
    "end": "2158480"
  },
  {
    "text": "convert back that would be essentially three operations instead of one so really the the maximal simplicity",
    "start": "2158480",
    "end": "2164640"
  },
  {
    "text": "that he could have here so i'm sort of making the case for this form of collections because",
    "start": "2164640",
    "end": "2171119"
  },
  {
    "text": "it has actually been criticized a lot in the past so i want to sort of give you the counter argument why i still think",
    "start": "2171119",
    "end": "2176400"
  },
  {
    "text": "it's the right way to use collections like this so the counter arguments are essentially two but i'm only presenting",
    "start": "2176400",
    "end": "2183280"
  },
  {
    "start": "2179000",
    "end": "2229000"
  },
  {
    "text": "one here the the counter argument that you hear sometimes is to say oh the type of map",
    "start": "2183280",
    "end": "2188560"
  },
  {
    "text": "is so complicated uh well let's look at the type of map here's what you see in the scala dock",
    "start": "2188560",
    "end": "2196079"
  },
  {
    "text": "it's a function it takes a function from a to b so that's the scatter dock for array",
    "start": "2196079",
    "end": "2201200"
  },
  {
    "text": "for the type array of a and gives you back an array of b that's what you would expect right well",
    "start": "2201200",
    "end": "2207520"
  },
  {
    "text": "the problem here is that it's uh there's a thing which says use case and that's sort of a red flag which",
    "start": "2207520",
    "end": "2213280"
  },
  {
    "text": "to say well that's actually not the real type that's the type you see as a user of",
    "start": "2213280",
    "end": "2218640"
  },
  {
    "text": "arrays which actually should be the only type that matters for you because as a user of arrays you want to see that type",
    "start": "2218640",
    "end": "2224400"
  },
  {
    "text": "so what's the real type well let's open this thing up the use case and here you see the full signature of map",
    "start": "2224400",
    "end": "2230640"
  },
  {
    "start": "2229000",
    "end": "2322000"
  },
  {
    "text": "and it is rather intimidating so you have a second type parameter that",
    "start": "2230640",
    "end": "2236079"
  },
  {
    "text": "and you have an implicit parameter of type can build from it says well if you start with an array",
    "start": "2236079",
    "end": "2242079"
  },
  {
    "text": "of t and you have a type b then uh you can uh you and",
    "start": "2242079",
    "end": "2249680"
  },
  {
    "text": "and and you have a recipe to build from an array of t and a b",
    "start": "2249680",
    "end": "2254720"
  },
  {
    "text": "a type of that then that's a result so that's something that is very very abstract and indirect but the",
    "start": "2254720",
    "end": "2261839"
  },
  {
    "text": "reason why we have this type is that we want to have only a single implementation",
    "start": "2261839",
    "end": "2267520"
  },
  {
    "text": "or prince in principle a single implementation of map in the whole collection libraries before",
    "start": "2267520",
    "end": "2273040"
  },
  {
    "text": "we had to start this type we didn't do that we had like 20 different implementations of map one",
    "start": "2273040",
    "end": "2278079"
  },
  {
    "text": "for arrays and ones for lists and things like that and the problem with that was that often these implementations",
    "start": "2278079",
    "end": "2284000"
  },
  {
    "text": "they diverged some of them were buggy others were not some of them some sometimes people would",
    "start": "2284000",
    "end": "2290000"
  },
  {
    "text": "implement a new method on a certain form collection then it was missing from the others sometimes the same functionality was was",
    "start": "2290000",
    "end": "2296800"
  },
  {
    "text": "present on different collections under different names because different developers found that they needed the same thing",
    "start": "2296800",
    "end": "2302400"
  },
  {
    "text": "so so essentially we said now stop all that what we need is a very strict framework that has a single",
    "start": "2302400",
    "end": "2308160"
  },
  {
    "text": "implementation of map for the whole thing and then it would work automatically for all the collections",
    "start": "2308160",
    "end": "2313520"
  },
  {
    "text": "and to actually be able to do that you need something as flexible as that which",
    "start": "2313520",
    "end": "2320240"
  },
  {
    "text": "you'll see in a second so the counter argument would be well why didn't we define map the global map",
    "start": "2320240",
    "end": "2326480"
  },
  {
    "start": "2322000",
    "end": "2433000"
  },
  {
    "text": "like this so we said these collections they are functors so functions are essentially",
    "start": "2326480",
    "end": "2331599"
  },
  {
    "text": "things that have a map and if you look up the the type that you would expect here and a functor is the type of map would",
    "start": "2331599",
    "end": "2339680"
  },
  {
    "text": "be very much that like the first type that you saw so it takes the new type the alt element type",
    "start": "2339680",
    "end": "2345839"
  },
  {
    "text": "t and the new element type u and it gives you an f of u where f is essentially your",
    "start": "2345839",
    "end": "2350960"
  },
  {
    "text": "constructor your type that uh that you parameterize over that's a function",
    "start": "2350960",
    "end": "2356240"
  },
  {
    "text": "the problem with that is that that map doesn't work for arrays since to build a new array on the jvm",
    "start": "2356240",
    "end": "2361839"
  },
  {
    "text": "you need a class tag and there's no way we can smuggle a class tag into the signature it's just",
    "start": "2361839",
    "end": "2367440"
  },
  {
    "text": "not possible it works over all types not just types that have class tags so it won't work that way would it work",
    "start": "2367440",
    "end": "2374160"
  },
  {
    "text": "for sets no i'm afraid it wouldn't work for sets either because to build a new set you need a way to",
    "start": "2374160",
    "end": "2380000"
  },
  {
    "text": "compare the elements of that set to avoid duplicates and again there's no way you can actually smuggle in an element",
    "start": "2380000",
    "end": "2386560"
  },
  {
    "text": "comparison function into that map so the reason for can build from is it's essentially",
    "start": "2386560",
    "end": "2392480"
  },
  {
    "text": "a generalized way to express all these collection specific constraints you say",
    "start": "2392480",
    "end": "2400400"
  },
  {
    "text": "you would have an instance of can build from to say that would itself demand well for sets if you give me inequality i can",
    "start": "2400400",
    "end": "2407200"
  },
  {
    "text": "build a set the array can build from would say if you give me a class tag i can build you an array and that's",
    "start": "2407200",
    "end": "2413359"
  },
  {
    "text": "essentially the sort of the generic glue that you find in the collection libraries as a user you never see that so it's",
    "start": "2413359",
    "end": "2419920"
  },
  {
    "text": "actually quite quite miraculous that all this clever machinery that builds the right collection for you",
    "start": "2419920",
    "end": "2426240"
  },
  {
    "text": "at runtime actually doesn't leak out into the signatures that's why i'm actually very fond of can build from",
    "start": "2426240",
    "end": "2433520"
  },
  {
    "start": "2433000",
    "end": "2471000"
  },
  {
    "text": "so number seven and last would be variables uh oops and variables",
    "start": "2433520",
    "end": "2439359"
  },
  {
    "text": "anti-functional yeah they are and aren't variables anti-modular well if you oh with",
    "start": "2439359",
    "end": "2444560"
  },
  {
    "text": "if you overuse them and misuse them yes global mutable state often leads to hidden dependencies between objects and",
    "start": "2444560",
    "end": "2451040"
  },
  {
    "text": "that's very very bad on the other hand i think part of the appeal and attraction that scala has for",
    "start": "2451040",
    "end": "2456880"
  },
  {
    "text": "me is that it's this rather cute way to combine mutable state with functions",
    "start": "2456880",
    "end": "2462079"
  },
  {
    "text": "and if you do that cleverly and wisely you can get great benefits from that so i looked at where in my last project",
    "start": "2462079",
    "end": "2469520"
  },
  {
    "text": "where did i actually use state so my last project was a is a new compiler for scala called dot c",
    "start": "2469520",
    "end": "2476000"
  },
  {
    "text": "and that compiler is in principle it's a functional program it's very close to a complete functional",
    "start": "2476000",
    "end": "2482480"
  },
  {
    "text": "architecture and the concern for doing that is on the one hand it's nice it's very clean the",
    "start": "2482480",
    "end": "2488079"
  },
  {
    "text": "concern of course is will not that be slow and the idea of this compiler is it's a compiler that",
    "start": "2488079",
    "end": "2494720"
  },
  {
    "text": "should be much much faster than current galaxy so a slow compiler is not what we wanted",
    "start": "2494720",
    "end": "2500880"
  },
  {
    "text": "but on the other hand there's a nice thing to say well if your program is purely functional then",
    "start": "2500880",
    "end": "2506720"
  },
  {
    "text": "it actually gives you a lot of new optimization of possibilities okay",
    "start": "2506720",
    "end": "2512079"
  },
  {
    "text": "opportunities that you wouldn't have otherwise the first one is caching and you say well if you have a function",
    "start": "2512079",
    "end": "2517839"
  },
  {
    "text": "it's a pure function it will give you the same result every time you apply it to the same arguments well",
    "start": "2517839",
    "end": "2523119"
  },
  {
    "text": "if the function is expensive it means that you can actually cache that you can memorize the function says well the first time i apply the",
    "start": "2523119",
    "end": "2529440"
  },
  {
    "text": "function i put the arguments and the result in a map and the second time i need the function",
    "start": "2529440",
    "end": "2534880"
  },
  {
    "text": "again i look up the map to do that that could be a big speed up depending on how fast",
    "start": "2534880",
    "end": "2540400"
  },
  {
    "text": "or slow your function is but caching is an art by itself so you can't imagine you can't assume that",
    "start": "2540400",
    "end": "2547440"
  },
  {
    "text": "your language will do it all for you because it will you just give a single single version of caching and that's often not good enough",
    "start": "2547440",
    "end": "2553520"
  },
  {
    "text": "so what i actually found in the compiler is that the lazy valves that the language gives us but then they're the memorized functions",
    "start": "2553520",
    "end": "2559920"
  },
  {
    "text": "and sometimes you put them in a normal map sometimes in a weak map depending on retention policies uh they're interned names uh so",
    "start": "2559920",
    "end": "2567119"
  },
  {
    "text": "that's sort of like string in turn but for our own structures and even lru caches too because here we",
    "start": "2567119",
    "end": "2573920"
  },
  {
    "text": "wanted to bound the size of a cache to prevent it from from from from growing too large so all these things are rather",
    "start": "2573920",
    "end": "2580000"
  },
  {
    "text": "sophisticated uses of state that in the end remain completely hidden the fact that you cache your program",
    "start": "2580000",
    "end": "2586240"
  },
  {
    "text": "aggressively doesn't change the semantics of your program at all it's still a purely functional program even though it uses",
    "start": "2586240",
    "end": "2592000"
  },
  {
    "text": "a lot of state in the caches internally and we can verify that by because we can",
    "start": "2592000",
    "end": "2597359"
  },
  {
    "text": "actually turn these things on and off by configuration and they have that way we can actually",
    "start": "2597359",
    "end": "2602880"
  },
  {
    "text": "verify that the program runs just as just as well with the same result i'll buy it much much slower if we turn the",
    "start": "2602880",
    "end": "2609280"
  },
  {
    "text": "caches off the second one usage that i found was",
    "start": "2609280",
    "end": "2614400"
  },
  {
    "start": "2611000",
    "end": "2771000"
  },
  {
    "text": "persisting so that idea is that if you have a value",
    "start": "2614400",
    "end": "2619440"
  },
  {
    "text": "in a map uh at some point often the value stabilizes so the value of the the map won't change",
    "start": "2619440",
    "end": "2625920"
  },
  {
    "text": "anymore that value for that key will always stay the same in the rest of the program",
    "start": "2625920",
    "end": "2631359"
  },
  {
    "text": "and then you might get an efficiency improvement if you remove the value from the map and put it",
    "start": "2631359",
    "end": "2636560"
  },
  {
    "text": "in the object right there because the access is faster and you don't have the problem of leaking memory that you have in a map so",
    "start": "2636560",
    "end": "2642960"
  },
  {
    "text": "that was number two again it's unobservable if you choose your time when you want to persist",
    "start": "2642960",
    "end": "2648640"
  },
  {
    "text": "correctly third one was copy on right so there these the compiler has untyped trees so",
    "start": "2648640",
    "end": "2656160"
  },
  {
    "text": "that's essentially the task of a type checker is it takes a syntax tree and it doesn't have types",
    "start": "2656160",
    "end": "2661440"
  },
  {
    "text": "and it produces a syntax tree and it does have types and in the current scala c compiler",
    "start": "2661440",
    "end": "2668160"
  },
  {
    "text": "uh essentially we did that by mutation so these syntax trees they have a slot for types and then there's",
    "start": "2668160",
    "end": "2673440"
  },
  {
    "text": "some sort of traversal that puts the type in the slot and that putting types in the slot of course is something imperative that's sort of the",
    "start": "2673440",
    "end": "2680400"
  },
  {
    "text": "traditional way it's been done in compilers so far but it's not the purely functional way because you can't just put types in",
    "start": "2680400",
    "end": "2686160"
  },
  {
    "text": "these slots so what you want to do is of course you want to transform these immutable trees to",
    "start": "2686160",
    "end": "2691920"
  },
  {
    "text": "type trees and there would be two different data structures the problem with that again is performance because these trees are very",
    "start": "2691920",
    "end": "2698240"
  },
  {
    "text": "very large these trees are typically the largest data data constructs in your in a compiler so to copy them all",
    "start": "2698240",
    "end": "2705760"
  },
  {
    "text": "just to add a type field is inefficient and there you observe well if you start with untyped trees and there's this type",
    "start": "2705760",
    "end": "2712000"
  },
  {
    "text": "field sitting there then the first time you sort of want to give a type to the tree you might as well",
    "start": "2712000",
    "end": "2717359"
  },
  {
    "text": "reuse the tree you started with and of course the second time you see",
    "start": "2717359",
    "end": "2722400"
  },
  {
    "text": "this tree in a different context and you say now that on type tree is a different type you shouldn't overwrite your type",
    "start": "2722400",
    "end": "2727839"
  },
  {
    "text": "that would be an observable side effect so at that point what we do is copy and write you say a copy on second write",
    "start": "2727839",
    "end": "2734160"
  },
  {
    "text": "there's a different type that you want to associate it with the same unimutable tree at that point but only at that point",
    "start": "2734160",
    "end": "2740560"
  },
  {
    "text": "let's copy the tree again it's a rather sophisticated use of imperative state that's not observable and finally",
    "start": "2740560",
    "end": "2746960"
  },
  {
    "text": "they're fresh values so fresh names and unique ids and if that's that's also something that",
    "start": "2746960",
    "end": "2756160"
  },
  {
    "text": "you is pretty pretty standard so you have to generate fresh names and that means you",
    "start": "2756160",
    "end": "2761440"
  },
  {
    "text": "have just a global counter that you update and that you that gives you an a number",
    "start": "2761440",
    "end": "2767680"
  },
  {
    "text": "that you add to your name and unique ideas will work the same way and if you've done that if you've done all that then actually it turns out that",
    "start": "2767680",
    "end": "2774560"
  },
  {
    "text": "we're left with exactly two variables the two variables give you the current constraint",
    "start": "2774560",
    "end": "2779680"
  },
  {
    "text": "for type checking so essentially what my constraints is for type inference and the current diagnostics so the error",
    "start": "2779680",
    "end": "2787040"
  },
  {
    "text": "log when i write errors and it turns out that this state needs to be version so there's",
    "start": "2787040",
    "end": "2792800"
  },
  {
    "text": "essentially a tree of possible explorations where you can backtrack and things like that so it needs to be very strictly controlled",
    "start": "2792800",
    "end": "2799359"
  },
  {
    "start": "2799000",
    "end": "2879000"
  },
  {
    "text": "okay now you could say well all these are interesting uses of state which you could hide but the last one",
    "start": "2799359",
    "end": "2805599"
  },
  {
    "text": "you couldn't that's really sort of the essence the essential state in in a type checker so shouldn't you",
    "start": "2805599",
    "end": "2812880"
  },
  {
    "text": "use a monarch for that so that's sort of the classical functional approach nowadays if you have state",
    "start": "2812880",
    "end": "2818480"
  },
  {
    "text": "encapsulated in a monarch well if you have a look at that then that's what we would have to do so",
    "start": "2818480",
    "end": "2824079"
  },
  {
    "text": "that's what we do now so that's two of the core operations that we deal with as this operation typed which takes an",
    "start": "2824079",
    "end": "2830400"
  },
  {
    "text": "untyped tree an unexpected type and gives you a type tree and there's an operation is subtype to",
    "start": "2830400",
    "end": "2835680"
  },
  {
    "text": "pick another example which takes two types and says it gives you back a boolean whether one type is a",
    "start": "2835680",
    "end": "2840720"
  },
  {
    "text": "subtype of the other so i just pick in this my mind the real code base that's sort of the two most",
    "start": "2840720",
    "end": "2846240"
  },
  {
    "text": "fundamental operations that i have here so in the monadic approach because both of these things can produce",
    "start": "2846240",
    "end": "2853280"
  },
  {
    "text": "new constraints and type can produce new errors i would have to put them in the type of",
    "start": "2853280",
    "end": "2858640"
  },
  {
    "text": "state monarch so that means the result now is a type of state of whatever else they returned before and under the covers a",
    "start": "2858640",
    "end": "2866000"
  },
  {
    "text": "type of state is in principle the result that you return and the new state",
    "start": "2866000",
    "end": "2871040"
  },
  {
    "text": "consisting of these two variables but you hide it in this in this did you hide the state in the monarch in the monarch",
    "start": "2871040",
    "end": "2876880"
  },
  {
    "text": "construction okay so if you do that then here's the typical use case use usage example so what we",
    "start": "2876880",
    "end": "2884880"
  },
  {
    "text": "would write now primonetic in prebonadic code something like that where you say well",
    "start": "2884880",
    "end": "2890960"
  },
  {
    "text": "let's see whether the sub type t1 is a subtype of the type t2 and the type t2 is a subtype of the type p3",
    "start": "2890960",
    "end": "2897280"
  },
  {
    "text": "and if yes then return some result with monads of course you can't do that because the",
    "start": "2897280",
    "end": "2902640"
  },
  {
    "text": "result of a subtype wouldn't be a boolean anymore it would be a type of state of boolean so what you would have to do is you have",
    "start": "2902640",
    "end": "2908880"
  },
  {
    "text": "to you'd have to pull out the type of state you'd have to pull out sorry the boolean from the type of state",
    "start": "2908880",
    "end": "2915119"
  },
  {
    "text": "and deal with it afterwards and scala has a very convenient syntactic sugar for that for these monadic things which is a four",
    "start": "2915119",
    "end": "2921760"
  },
  {
    "text": "expression it maps into map and flat map operation and you can use it for any monad anymore",
    "start": "2921760",
    "end": "2927680"
  },
  {
    "text": "that has map and flatmap which is which are our monarchs so it would look like that but the",
    "start": "2927680",
    "end": "2933200"
  },
  {
    "text": "question you'd have to ask for self well how is this better this is definitely",
    "start": "2933200",
    "end": "2938640"
  },
  {
    "text": "longer you could argue it's more imperative because i see something that smells like",
    "start": "2938640",
    "end": "2944160"
  },
  {
    "text": "statements here right so things that operations that return results so in a sense i'm back to",
    "start": "2944160",
    "end": "2950000"
  },
  {
    "text": "to to imperative programming only on a monotic level and third it still doesn't do or in the",
    "start": "2950000",
    "end": "2957200"
  },
  {
    "text": "naive setting it still doesn't do what i want because definitely here if the first subtype is false i want to immediately",
    "start": "2957200",
    "end": "2964720"
  },
  {
    "text": "return false not to the second one and i think i can i can rig up the monad with laziness that",
    "start": "2964720",
    "end": "2970640"
  },
  {
    "text": "that's true here but it's not the thing that you would immediately immediately do and that",
    "start": "2970640",
    "end": "2976400"
  },
  {
    "text": "would be very simple or efficient to do so for me the important thing of",
    "start": "2976400",
    "end": "2982319"
  },
  {
    "text": "function programming is not so much that we hide things in monads but the important thing",
    "start": "2982319",
    "end": "2988079"
  },
  {
    "text": "was this we reduced the state to two vars we were very very economical with the virus with device we",
    "start": "2988079",
    "end": "2995839"
  },
  {
    "text": "before introducing one you really think hard about it do you need that why do you need that how do you version",
    "start": "2995839",
    "end": "3001520"
  },
  {
    "text": "it that's the important part the weather then afterwards you say well i put this in behind essentially a type",
    "start": "3001520",
    "end": "3008000"
  },
  {
    "text": "wall like a monarch is a secondary and there are sort of practical considerations whether sometimes that's a good idea and",
    "start": "3008000",
    "end": "3014319"
  },
  {
    "text": "sometimes it is it is not so i think actually this question of typing and monitor",
    "start": "3014319",
    "end": "3020000"
  },
  {
    "text": "part of that is very much a question of trade-offs so i believe all these are fine",
    "start": "3020000",
    "end": "3025760"
  },
  {
    "text": "languages and none of them is right in their approach necessarily so you could choose to say well i don't",
    "start": "3025760",
    "end": "3032640"
  },
  {
    "text": "really want to talk about types at all in my language statically at compile time",
    "start": "3032640",
    "end": "3037839"
  },
  {
    "text": "i don't all the compiler does is essentially is a syntax checker that verifies that my syntax makes sense",
    "start": "3037839",
    "end": "3044240"
  },
  {
    "text": "or i could say well i talk about types in the traditional sense arguments and results of functions and i",
    "start": "3044240",
    "end": "3049599"
  },
  {
    "text": "have a very flexible type system in a very precise type systems that let you let me express that",
    "start": "3049599",
    "end": "3054960"
  },
  {
    "text": "or i could go further and say well i want to also talk about side effects like state",
    "start": "3054960",
    "end": "3060400"
  },
  {
    "text": "what state modifications do i have what i o modifications do i have and then when you do that then you have",
    "start": "3060400",
    "end": "3066400"
  },
  {
    "text": "the the haskell language or i could go in a different direction and i said well i",
    "start": "3066400",
    "end": "3071520"
  },
  {
    "text": "also want to talk about properties of values like whether this value is the same as that value or this value is in a",
    "start": "3071520",
    "end": "3077920"
  },
  {
    "text": "given interval and then you get a language with dependent typing like idris or you could go all the way and say i",
    "start": "3077920",
    "end": "3083280"
  },
  {
    "text": "want to talk about total correctness so with my program i want to have a correctness proof of my program",
    "start": "3083280",
    "end": "3088559"
  },
  {
    "text": "and then you have something like an interactive theater improver like or isabel and all these are valid approaches none",
    "start": "3088559",
    "end": "3095520"
  },
  {
    "text": "of them is right none of them is better than the other and it's always a practical argument until",
    "start": "3095520",
    "end": "3101040"
  },
  {
    "text": "what to what degree do your types help you more than they hinder you by inducing introducing",
    "start": "3101040",
    "end": "3108319"
  },
  {
    "text": "additional boilerplate and additional restrictions in in the way you can code",
    "start": "3108319",
    "end": "3115040"
  },
  {
    "text": "and definitely most programs aren't written as quickly in as they are written in closure so",
    "start": "3115040",
    "end": "3120880"
  },
  {
    "text": "there's also a speed argument and a productivity argument",
    "start": "3120880",
    "end": "3126000"
  },
  {
    "start": "3126000",
    "end": "3199000"
  },
  {
    "text": "and scala what scala type system really is it's very essentially it's firmly here so scadas",
    "start": "3126000",
    "end": "3132400"
  },
  {
    "text": "types are rather refined but they refined the the idea of having refined types is not so much",
    "start": "3132400",
    "end": "3138160"
  },
  {
    "text": "to be able to express a lot of properties with them at least not right now i think we might go there in the future",
    "start": "3138160",
    "end": "3145440"
  },
  {
    "text": "so but it's rather to say well we have a very flexible alternative for languages that",
    "start": "3145440",
    "end": "3151520"
  },
  {
    "text": "don't use stripes that are dynamically typed so we want to say well we want we want to have a language where the types are",
    "start": "3151520",
    "end": "3157280"
  },
  {
    "text": "flexible enough and expressive enough so that they're not a big burden for people who might otherwise have chosen",
    "start": "3157280",
    "end": "3163280"
  },
  {
    "text": "a dynamically typed language that's why the type system in scala is rather refined and the idea that we can actually move",
    "start": "3163280",
    "end": "3170640"
  },
  {
    "text": "it there is an interesting one but i wouldn't emphasize it right now so i think that over the next five years or",
    "start": "3170640",
    "end": "3176800"
  },
  {
    "text": "so there will be exciting new developments in effects to to express effects there are algebraic",
    "start": "3176800",
    "end": "3182400"
  },
  {
    "text": "effects that's a very active research topics there are several other research on effects and i believe in five years probably will come to the",
    "start": "3182400",
    "end": "3188400"
  },
  {
    "text": "conclusion that no monarchs are not the right way to talk about effects uh so that's also why i would be very",
    "start": "3188400",
    "end": "3194720"
  },
  {
    "text": "hesitant to use monads for effects right now good so i quickly go through the rest",
    "start": "3194720",
    "end": "3203119"
  },
  {
    "start": "3199000",
    "end": "3259000"
  },
  {
    "text": "forms of modules so we've seen seven simple parts of scala and how can these parts then be combined",
    "start": "3203119",
    "end": "3210800"
  },
  {
    "text": "to write modules in the user code in fact i believe that modules if we talk about modules that take a",
    "start": "3210800",
    "end": "3217200"
  },
  {
    "text": "large number of forms so i'm very open to different ways to write",
    "start": "3217200",
    "end": "3222319"
  },
  {
    "text": "a module module could be a function it could be an object it could be a class that means",
    "start": "3222319",
    "end": "3227440"
  },
  {
    "text": "a template in which you can have many objects it could be an actor it could be",
    "start": "3227440",
    "end": "3234160"
  },
  {
    "text": "a stream transform could be a microservice so it depends on what you want as long as a",
    "start": "3234160",
    "end": "3240319"
  },
  {
    "text": "module is something that is simple and where the i the focus lies on the way mod the module",
    "start": "3240319",
    "end": "3247520"
  },
  {
    "text": "can be combined with others for me it's a module so a module is something that exists primarily to be combined with",
    "start": "3247520",
    "end": "3253920"
  },
  {
    "text": "other things and less in isolation for what it can do",
    "start": "3253920",
    "end": "3259039"
  },
  {
    "start": "3259000",
    "end": "3314000"
  },
  {
    "text": "so scala is a fairly modular language its modular roots are modular too i mentioned that already it's the first",
    "start": "3259200",
    "end": "3265520"
  },
  {
    "text": "language i programmed in intensively and the first i wrote a compiler for a long time ago",
    "start": "3265520",
    "end": "3270559"
  },
  {
    "text": "modular 3 was also very interesting language introduced universal subtyping haskell from haskell scala picked this",
    "start": "3270559",
    "end": "3277680"
  },
  {
    "text": "idea of type classes which and made them more modular by transplanting them into implicit parameters and i believe the",
    "start": "3277680",
    "end": "3284640"
  },
  {
    "text": "biggest influence and the initial announcement on the first slide really pointed to that was sml modules so scala really inherits a",
    "start": "3284640",
    "end": "3292000"
  },
  {
    "text": "lot of ideas from sml modules as a rather direct correspondence to say what sml calls a structure we call an",
    "start": "3292000",
    "end": "3298480"
  },
  {
    "text": "object a functor is a class with parameters a signature is a trait abstract types are the same and what sml",
    "start": "3298480",
    "end": "3305599"
  },
  {
    "text": "calls a sharing constraint we call a refinement so the features that scala has for modular programming i believe",
    "start": "3305599",
    "end": "3311920"
  },
  {
    "text": "are first a rather rich type system that gives us the vocabulary",
    "start": "3311920",
    "end": "3317920"
  },
  {
    "start": "3314000",
    "end": "3353000"
  },
  {
    "text": "to talk about the things that go in and out of modules then i believe static typing is a very",
    "start": "3317920",
    "end": "3323599"
  },
  {
    "text": "important tool to verify encapsulation then you have the essentially the core abstractions for",
    "start": "3323599",
    "end": "3330240"
  },
  {
    "text": "modules objects so that's essentially an atomic module a class that can",
    "start": "3330240",
    "end": "3335599"
  },
  {
    "text": "be parameterized and be exist in many instances and a trait that essentially gives you a",
    "start": "3335599",
    "end": "3341119"
  },
  {
    "text": "slice of module uh of a module api and that can be essentially combined",
    "start": "3341119",
    "end": "3347119"
  },
  {
    "text": "with mixing composition with other slices so classes is parameterized traits are slicing",
    "start": "3347119",
    "end": "3352960"
  },
  {
    "text": "and then there are abstract types and abstract types are a very powerful way to actually to",
    "start": "3352960",
    "end": "3359520"
  },
  {
    "start": "3353000",
    "end": "3426000"
  },
  {
    "text": "abstract things to make them more generic more general so a good example here",
    "start": "3359520",
    "end": "3365040"
  },
  {
    "text": "is a graph library where which is actually amazingly hard",
    "start": "3365040",
    "end": "3371200"
  },
  {
    "text": "to do that in a in a truly generic way so here's something that we had in recently in the",
    "start": "3371200",
    "end": "3377920"
  },
  {
    "text": "acm communications in a paper where we had our own step at producing a graph library so what we would do here is to",
    "start": "3377920",
    "end": "3384319"
  },
  {
    "text": "say well there's a trade graphs which says well i'm talking about graphs now and talking about graphs means i have to",
    "start": "3384319",
    "end": "3390960"
  },
  {
    "text": "have a type of nodes and a type of edges but i don't know what they are they could be anything at nodes and edges",
    "start": "3390960",
    "end": "3397280"
  },
  {
    "text": "i only know that i have an operation predecessor that given an edge gives you back a node and successor",
    "start": "3397280",
    "end": "3402880"
  },
  {
    "text": "is the same thing and then i have a graph which is again an unknown type it could have any implementation",
    "start": "3402880",
    "end": "3409200"
  },
  {
    "text": "but i know it has these methods so that's this graphic upper bound of graph so i know for a graph i can find out",
    "start": "3409200",
    "end": "3415920"
  },
  {
    "text": "what are the set of nodes what are the set of edges for a given node what are the set of outgoing and incoming edges",
    "start": "3415920",
    "end": "3422160"
  },
  {
    "text": "and finally the set of sources instead of sources of a graph so that's my essentially to establish my",
    "start": "3422160",
    "end": "3428400"
  },
  {
    "start": "3426000",
    "end": "3501000"
  },
  {
    "text": "vocabulary to say well that's what we're going to talk about now and then if we want to write a simple",
    "start": "3428400",
    "end": "3435119"
  },
  {
    "text": "graph model then that's what we could do we could now say well inherit the straight graphs",
    "start": "3435119",
    "end": "3441680"
  },
  {
    "text": "and slot in the type of graph so here with the type of graph was something that i haven't told you i just told you",
    "start": "3441680",
    "end": "3447440"
  },
  {
    "text": "it will support these methods so what we say here is now we have a concrete class",
    "start": "3447440",
    "end": "3452480"
  },
  {
    "text": "and it has some nodes and it has some edges which i pass as parameters and here are obvious albeit very inefficient",
    "start": "3452480",
    "end": "3458880"
  },
  {
    "text": "implementations of the three remaining methods so there's a powerful principle here at",
    "start": "3458880",
    "end": "3466799"
  },
  {
    "text": "work and that's when when i start with this i have several i have many things which",
    "start": "3466799",
    "end": "3472319"
  },
  {
    "text": "are abstract i have nodes edges predecessor successor and graph at any point i can say well now i know",
    "start": "3472319",
    "end": "3478240"
  },
  {
    "text": "certain things and i define those and i don't still don't know other things and i just leave them abstract just define",
    "start": "3478240",
    "end": "3485040"
  },
  {
    "text": "what you know leave abstract what you don't it's a very powerful principle that in scala works universally for",
    "start": "3485040",
    "end": "3490960"
  },
  {
    "text": "everything values methods and types so in this abstract model i still haven't told you what a note and what an",
    "start": "3490960",
    "end": "3496400"
  },
  {
    "text": "edge is but i don't have to uh it works exactly the same way so if i want to",
    "start": "3496400",
    "end": "3501680"
  },
  {
    "start": "3501000",
    "end": "3551000"
  },
  {
    "text": "give you the concrete types of nodes and edges then that's what i could do i could give you a concrete model again",
    "start": "3501680",
    "end": "3507440"
  },
  {
    "text": "extends graphs and here i now say well a node let's say it's a social graph it's a person and then edge is a pair of",
    "start": "3507440",
    "end": "3513280"
  },
  {
    "text": "persons and here are the implementations of successor and predecessor so that's just one particular",
    "start": "3513280",
    "end": "3519200"
  },
  {
    "text": "instantiation of that which i can mix freely with my abstract graph model and that gives me the complete implementation",
    "start": "3519200",
    "end": "3526240"
  },
  {
    "text": "so what's interesting here is that the same principle can be used for encapsulation so",
    "start": "3526240",
    "end": "3532720"
  },
  {
    "text": "arguably that's a case of encapsulation there's a type node but i don't tell you what it is and parameterization so here i've given",
    "start": "3532720",
    "end": "3540559"
  },
  {
    "text": "you the type in the concrete model so that's what i would usually do under the name of parameters so it's a",
    "start": "3540559",
    "end": "3546960"
  },
  {
    "text": "very powerful principle that you can mix those two so talking about parameterization",
    "start": "3546960",
    "end": "3553520"
  },
  {
    "start": "3551000",
    "end": "3599000"
  },
  {
    "text": "generics of course is a staple of type languages now everybody has it and so his scala so parameterized types",
    "start": "3553520",
    "end": "3560480"
  },
  {
    "text": "is very important there's this sticky point of variance which i'd probably if you have written",
    "start": "3560480",
    "end": "3567280"
  },
  {
    "text": "scala you know what that is it depends how whether a set a list of apples is also a",
    "start": "3567280",
    "end": "3572960"
  },
  {
    "text": "list of fruit or not if apple is a fruit then it's a list of apples of a list of fruit",
    "start": "3572960",
    "end": "3578400"
  },
  {
    "text": "so in scada similar to c-sharp we express that by annotating the declaration point with a plus here for",
    "start": "3578400",
    "end": "3584839"
  },
  {
    "text": "covariant whereas other languages like java would force you to do that at the usage point",
    "start": "3584839",
    "end": "3590799"
  },
  {
    "text": "and that typically gets more complicated one interesting bit here is actually that the two things",
    "start": "3590799",
    "end": "3597079"
  },
  {
    "text": "parameterization abstract types can be combined or more precisely",
    "start": "3597079",
    "end": "3602160"
  },
  {
    "text": "parameters can be mapped into abstract types and one other interesting bit is that that actually explains what this",
    "start": "3602160",
    "end": "3608240"
  },
  {
    "text": "variance thing is about so just to show you what that is parameters can be mapped into abstract",
    "start": "3608240",
    "end": "3615200"
  },
  {
    "text": "members whether they are types or values doesn't matter and arguments then are refinements so let's have a look how",
    "start": "3615200",
    "end": "3621920"
  },
  {
    "text": "that works so here we have our class set and i would say well instead of parameterizing it",
    "start": "3621920",
    "end": "3628319"
  },
  {
    "text": "let me just give you a type field here so it has a type and i mangle the name slightly because i",
    "start": "3628319",
    "end": "3633680"
  },
  {
    "text": "don't want to essentially produce produce a name conflict if several classes are parameterized with t",
    "start": "3633680",
    "end": "3640799"
  },
  {
    "text": "so then a set of string would be a set where now i define what this type is type t equals",
    "start": "3640799",
    "end": "3647040"
  },
  {
    "text": "strength so that shows that this thing here can be treated as syntactic sugar for that thing here my",
    "start": "3647040",
    "end": "3652319"
  },
  {
    "text": "language gets simpler then for lists i would do the same thing",
    "start": "3652319",
    "end": "3657920"
  },
  {
    "text": "but because lists are covariant a list of number actually is a list where my type t",
    "start": "3657920",
    "end": "3664400"
  },
  {
    "text": "is a number or a subtype of that because lists of integers are also possible as lists of numbers and",
    "start": "3664400",
    "end": "3670960"
  },
  {
    "text": "that means my element type is actually just a subtype of number so it gives me a rather nice way to express a lot of",
    "start": "3670960",
    "end": "3677839"
  },
  {
    "text": "different features and map it into a common core okay and number seven and last one would",
    "start": "3677839",
    "end": "3684000"
  },
  {
    "text": "be implicit parameters so implicit parameters uh were sort of initially thought to be",
    "start": "3684000",
    "end": "3691520"
  },
  {
    "text": "a poor men's type classes that was my first characterization for them to say well haskell has classes and type",
    "start": "3691520",
    "end": "3697760"
  },
  {
    "text": "classes and instances and we have all these things in object-oriented languages so all we need to get type class functionality is",
    "start": "3697760",
    "end": "3703760"
  },
  {
    "text": "implicit parameters so indeed they can model that so here you would have a minimum operation that",
    "start": "3703760",
    "end": "3709280"
  },
  {
    "text": "works for all things that are ordered so you just need to give an ordering and that's implicit so the compiler will",
    "start": "3709280",
    "end": "3715119"
  },
  {
    "text": "do it for you and you can then express a minimum minimum operation over that set",
    "start": "3715119",
    "end": "3720960"
  },
  {
    "text": "but they actually can express a lot more than just type classes so for instance they can express a",
    "start": "3720960",
    "end": "3726720"
  },
  {
    "text": "context so a context is something that essentially everybody should get to see",
    "start": "3726720",
    "end": "3732400"
  },
  {
    "text": "and sometimes it changes but most of the time you still you you keep it the same so at some point",
    "start": "3732400",
    "end": "3737599"
  },
  {
    "text": "the context changes but most of the time it's the same and that's again a very useful use of",
    "start": "3737599",
    "end": "3742960"
  },
  {
    "text": "implicit parameters that by the way is uh that's how i nowadays do",
    "start": "3742960",
    "end": "3748000"
  },
  {
    "text": "dependency injection i think that's that's the ideal way to do that this way and finally it can express a",
    "start": "3748000",
    "end": "3753760"
  },
  {
    "text": "capability where you say for instance if i need to access a customer id then i need some admin rights so i need",
    "start": "3753760",
    "end": "3761200"
  },
  {
    "text": "to demand that as a parameter and again it makes sense to make that parameter implicit",
    "start": "3761200",
    "end": "3766319"
  },
  {
    "text": "because if i have admin rights and you need them and i call your operations then that's",
    "start": "3766319",
    "end": "3773280"
  },
  {
    "text": "all we need to know the precise way in which i pass this parameter to you is boring and cluttering the",
    "start": "3773280",
    "end": "3780319"
  },
  {
    "text": "important thing is i have it you need it and that means we can pass the capability along and that's okay",
    "start": "3780319",
    "end": "3786480"
  },
  {
    "text": "okay so to summarize simple parts uh everything is an expression everything",
    "start": "3786480",
    "end": "3791920"
  },
  {
    "text": "can be nested compose and match with pattern matching recurs function values immutable",
    "start": "3791920",
    "end": "3798240"
  },
  {
    "text": "collections and vars for me that's it that's the seven things that we can keep in our heads that",
    "start": "3798240",
    "end": "3803920"
  },
  {
    "text": "represent the the core of what i see is color and in the modules we have the things that i talked about",
    "start": "3803920",
    "end": "3810400"
  },
  {
    "text": "so the other parts them there's actually much more to scala than that and a lot gets written about",
    "start": "3810400",
    "end": "3818079"
  },
  {
    "text": "the much more parts there are things like implicit conversions existential type structure types higher kind of types",
    "start": "3818079",
    "end": "3824559"
  },
  {
    "text": "macros and all these things for me they are far from being the simple core they're",
    "start": "3824559",
    "end": "3830079"
  },
  {
    "text": "not the simple core in fact if you look closely then they're not even in the core language because to enable any of",
    "start": "3830079",
    "end": "3836960"
  },
  {
    "text": "these things you need a language feature flag so you have to say for instance import language.existentials before you",
    "start": "3836960",
    "end": "3842880"
  },
  {
    "text": "can use these existential types and my advice would be well don't just avoid them unless you have a",
    "start": "3842880",
    "end": "3849440"
  },
  {
    "text": "unless you have a clear use case often the use case is you want to use scala as a dsl for some other language and that's",
    "start": "3849440",
    "end": "3855359"
  },
  {
    "text": "okay but if you want to say well what is the core of function programming in scala what's the core of modular programming in scala",
    "start": "3855359",
    "end": "3862000"
  },
  {
    "text": "then that's not necessarily it okay thank you",
    "start": "3862000",
    "end": "3867838"
  }
]