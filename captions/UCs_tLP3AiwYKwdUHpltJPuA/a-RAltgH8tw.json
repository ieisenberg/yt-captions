[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "thanks very much for coming out I hope you have a great night and you get an idea this is a taste of ya just imagine",
    "start": "240",
    "end": "6319"
  },
  {
    "text": "there's like 40 speakers like these guys and you sort of feel what it's like so thanks very much for coming",
    "start": "6319",
    "end": "14480"
  },
  {
    "start": "15000",
    "end": "96000"
  },
  {
    "text": "Eric um now when uh I was uh when Dave asked me to talk I said you know I the",
    "start": "15039",
    "end": "22960"
  },
  {
    "text": "most fun talk um I've ever done is this talk called you know fundamentalist",
    "start": "22960",
    "end": "28279"
  },
  {
    "text": "functional programming because a lot of people talk about functional programming but they're not really doing functional",
    "start": "28279",
    "end": "34079"
  },
  {
    "text": "programming functional programming is really easy what is it it is you know what let me say first what is",
    "start": "34079",
    "end": "40559"
  },
  {
    "text": "objectoriented programming well that's programming with objects but what is an object I don't know it's like you know",
    "start": "40559",
    "end": "47199"
  },
  {
    "text": "something that represents a real world entity blah blah blah now we're already kind of getting fake but if you ask what",
    "start": "47199",
    "end": "54640"
  },
  {
    "text": "is functional programming well that's programming with functions well my son just finished high school and guess what",
    "start": "54640",
    "end": "60680"
  },
  {
    "text": "when he did the SAT test there is on page 35 of the book there is a",
    "start": "60680",
    "end": "66000"
  },
  {
    "text": "definition what is a function so every high school student knows what what is a function okay but then when we start",
    "start": "66000",
    "end": "74159"
  },
  {
    "text": "programming we forget what a function is and then we're kind of programming and we say we're doing functional",
    "start": "74159",
    "end": "79280"
  },
  {
    "text": "programming and say where are the functions you know they are not functions um so and but since the word",
    "start": "79280",
    "end": "84880"
  },
  {
    "text": "functional programming was already taken you know I had to call it fundamentalist functional programming",
    "start": "84880",
    "end": "90439"
  },
  {
    "text": "um now something happened in the meantime uh some um side effect happened",
    "start": "90439",
    "end": "95840"
  },
  {
    "text": "and one of the examples that I give in that talk is about mixing side effects and",
    "start": "95840",
    "end": "103200"
  },
  {
    "start": "96000",
    "end": "115000"
  },
  {
    "text": "and closures um and the example that I used you know has now been fixed in C so",
    "start": "103200",
    "end": "110119"
  },
  {
    "text": "there has been a breaking change in C 5 and now my example doesn't work anymore",
    "start": "110119",
    "end": "116200"
  },
  {
    "start": "115000",
    "end": "465000"
  },
  {
    "text": "so I had to give a completely um new talk so let me kind of explain to you",
    "start": "116200",
    "end": "121680"
  },
  {
    "text": "what what's going on here so Eric liard a very interesting guy if you don't read this blog again this blog is kind of you",
    "start": "121680",
    "end": "128599"
  },
  {
    "text": "know super interesting for any programmer not just a Microsoft programmer he has a kind of you know",
    "start": "128599",
    "end": "134280"
  },
  {
    "text": "this is from 2009 you know closing over Loop variables considered harmful you know one of the 1500 kind of you know",
    "start": "134280",
    "end": "142280"
  },
  {
    "text": "papers called something considered harmful um and then there's a little update there saying you know we have a",
    "start": "142280",
    "end": "147920"
  },
  {
    "text": "breaking change and poof there went my talk because my talk was about you know",
    "start": "147920",
    "end": "153879"
  },
  {
    "text": "about this so let's um look at this example and see what's going on here",
    "start": "153879",
    "end": "160040"
  },
  {
    "text": "okay so there's the kind of the simplest program um that you can imagine it's a a",
    "start": "160040",
    "end": "166159"
  },
  {
    "text": "loop for each variable in this you know in this array um I assume that you know",
    "start": "166159",
    "end": "173120"
  },
  {
    "text": "everybody can read this even if you're a Java programmer or a JavaScript programmer so it just iterate over the",
    "start": "173120",
    "end": "179840"
  },
  {
    "text": "values Zer to four and then I print them now the thing is that",
    "start": "179840",
    "end": "185959"
  },
  {
    "text": "there's a variable being declared there okay and if you have taken a compiler",
    "start": "185959",
    "end": "193000"
  },
  {
    "text": "course you know that declaring a variable is not just declaring a variable you know you have to allocate",
    "start": "193000",
    "end": "198599"
  },
  {
    "text": "some space um you know somewhere on the stack and you know you have to then you",
    "start": "198599",
    "end": "203680"
  },
  {
    "text": "know after you exit the scope you have to remove the thing so there is that variable there but where is it really",
    "start": "203680",
    "end": "209239"
  },
  {
    "text": "declared where is it allocated okay so let's uh run some tests so let's first",
    "start": "209239",
    "end": "215000"
  },
  {
    "text": "see you know is it declared outside the loop so and I cannot change the kind of you know the loop so I kind of you know",
    "start": "215000",
    "end": "222080"
  },
  {
    "text": "I declare the variable outside and then I assign it kind of you know inside here to simulate you know that the variable",
    "start": "222080",
    "end": "228560"
  },
  {
    "text": "is declared outside or the other thing is it declared inside so for every",
    "start": "228560",
    "end": "234280"
  },
  {
    "text": "iteration is a new variable allocated so now what do you think is it outside or",
    "start": "234280",
    "end": "241480"
  },
  {
    "text": "inside and or or does it matter are you say Eric you're such a theorist who",
    "start": "241480",
    "end": "247280"
  },
  {
    "text": "cares you know if it's outside or inside it just works okay so and if you don't",
    "start": "247280",
    "end": "255079"
  },
  {
    "text": "have closures it really doesn't matter you cannot tell the difference okay you if if you run these programs they give",
    "start": "255079",
    "end": "262800"
  },
  {
    "text": "you exactly the same answer who cares you you cannot observe the difference",
    "start": "262800",
    "end": "268199"
  },
  {
    "text": "maybe if you put the debugger and you look you can see it but normally you",
    "start": "268199",
    "end": "273600"
  },
  {
    "text": "cannot observe the difference where the variable is allocated before the loop or",
    "start": "273600",
    "end": "280440"
  },
  {
    "text": "after the loop now the thing is that it's this is an interesting thing it looks like a trivial thing but if you",
    "start": "280440",
    "end": "286000"
  },
  {
    "text": "look at JavaScript for example in JavaScript if you write if you declare a variable somewhere really that means",
    "start": "286000",
    "end": "293039"
  },
  {
    "text": "nothing because all the variables are declared at the beginning of the function so even in JavaScript if you",
    "start": "293039",
    "end": "298759"
  },
  {
    "text": "write this it still kind of you know behaves like that um so every language",
    "start": "298759",
    "end": "304759"
  },
  {
    "text": "is slightly different um in this respect and you can always kind of find um you",
    "start": "304759",
    "end": "310639"
  },
  {
    "text": "know once you have closures it becomes easier you can find kind of subtle differences so you know you pull your",
    "start": "310639",
    "end": "316479"
  },
  {
    "text": "hair out because you have a bug and then it turns out that there's some side effect that you can observe because a",
    "start": "316479",
    "end": "322400"
  },
  {
    "text": "variable kind of you know gets allocated every time in the loop or not okay but",
    "start": "322400",
    "end": "327520"
  },
  {
    "text": "in this case um if I these three uh programs I get the expected output I",
    "start": "327520",
    "end": "334639"
  },
  {
    "text": "guess that this is the expected output I just want to iterate over the array and um get four",
    "start": "334639",
    "end": "341639"
  },
  {
    "text": "values okay now this code looks already a little bit um",
    "start": "341639",
    "end": "347560"
  },
  {
    "text": "fishy um so let's uh look at it in more detail so the first",
    "start": "347560",
    "end": "354639"
  },
  {
    "text": "um Loop there is just the same as I did before except what I'm going to do is in",
    "start": "354639",
    "end": "362160"
  },
  {
    "text": "instead of printing that value directly I'm capturing that Loop variable in a",
    "start": "362160",
    "end": "368440"
  },
  {
    "text": "closure putting that closure in a list and then I'm just running through the list and called that function okay so",
    "start": "368440",
    "end": "376319"
  },
  {
    "text": "I'm just deferring printing the variable the the value of the variable and uh by",
    "start": "376319",
    "end": "382080"
  },
  {
    "text": "putting it in this list of functions and again um in in JavaScript you know you",
    "start": "382080",
    "end": "387280"
  },
  {
    "text": "would just write function open paren should be kind of you know very similar in Java I'm sorry you have to wait until",
    "start": "387280",
    "end": "394280"
  },
  {
    "text": "Java I don't know when they will have closures 2020 maybe",
    "start": "394280",
    "end": "401000"
  },
  {
    "text": "um anyway so that's the first thing so now um and I've Rewritten the the outer",
    "start": "401000",
    "end": "407599"
  },
  {
    "text": "and the inner one um in a similar way so don't get um oops this is like suicide",
    "start": "407599",
    "end": "413800"
  },
  {
    "text": "here and don't don't get too kind of you know confused here because the code is exactly the same so I I create the uh",
    "start": "413800",
    "end": "420080"
  },
  {
    "text": "the um list of functions here I do the for each Loop and then what I do is I copy the loop variable into this local",
    "start": "420080",
    "end": "427680"
  },
  {
    "text": "variable and that's the one that I capture and in this case I declare the variable before the loop and then I",
    "start": "427680",
    "end": "435400"
  },
  {
    "text": "capture and I I've used some kind of suggestive notation so the the the",
    "start": "435400",
    "end": "440800"
  },
  {
    "text": "underscore on the outside mean it's bound on the outer and here it means it's B bound on the inner okay good so",
    "start": "440800",
    "end": "449240"
  },
  {
    "text": "now you're all kind of you know way smarter than me so you probably already know what this will",
    "start": "449240",
    "end": "455400"
  },
  {
    "text": "print right so which one will print um 444 I did this once with 999 or whatever",
    "start": "455400",
    "end": "464039"
  },
  {
    "text": "but yeah that's would take too long so in C",
    "start": "464039",
    "end": "470039"
  },
  {
    "text": "4 this one would print four and so really the the semantics was that the",
    "start": "470039",
    "end": "475680"
  },
  {
    "text": "variable is declared outside the loop okay and then if you want to to get like",
    "start": "475680",
    "end": "480919"
  },
  {
    "text": "you know the expected Behavior you would have to kind of you know declare a variable in here and I must say I must",
    "start": "480919",
    "end": "489319"
  },
  {
    "text": "admit I had this book several times I can still remember that I was um this is",
    "start": "489319",
    "end": "497720"
  },
  {
    "text": "was like a marathon programming session with one of my devs and ah it just",
    "start": "497720",
    "end": "502919"
  },
  {
    "text": "didn't work and so my Dev started to kind of go and decompile into ilil and kind of look at the machine code and I",
    "start": "502919",
    "end": "509520"
  },
  {
    "text": "said ho ho ho ho ho wait a second let's let's look here what did we do um and",
    "start": "509520",
    "end": "514880"
  },
  {
    "text": "then it turned out that we kind of you know captured a variable like that in a closure and and instead of getting you",
    "start": "514880",
    "end": "521200"
  },
  {
    "text": "know 0 one to four we got 444 so in C and this was my example in",
    "start": "521200",
    "end": "526959"
  },
  {
    "text": "my previous talk to show that when you have mutable variables and closures you",
    "start": "526959",
    "end": "532920"
  },
  {
    "text": "get a toxic brew now this is really really dangerous um but then in C 5",
    "start": "532920",
    "end": "540440"
  },
  {
    "text": "um we this was changed and now it behaves like this so um now the problem",
    "start": "540440",
    "end": "548240"
  },
  {
    "text": "is um so this is great I think this like you can see like every day on The Forum",
    "start": "548240",
    "end": "554360"
  },
  {
    "text": "and I'm not sure every day but like this is the most asked questions on the Forum",
    "start": "554360",
    "end": "560240"
  },
  {
    "text": "it's like what's going on here why doesn't this work or you know people kind of bang their head against the wall",
    "start": "560240",
    "end": "565360"
  },
  {
    "text": "and so I think this is a good fix um now of course um",
    "start": "565360",
    "end": "570680"
  },
  {
    "text": "if this is the behavior that you want so if for some reason you you do want kind",
    "start": "570680",
    "end": "575760"
  },
  {
    "text": "of you know 444 you can still kind of you know change your code to kind of allocate the variable kind of outside the loop so",
    "start": "575760",
    "end": "582519"
  },
  {
    "text": "nothing has lost so you can still Express what you want um but you know the default is now that it behaves as if",
    "start": "582519",
    "end": "590120"
  },
  {
    "text": "a new variable is allocated um inside the loop now this is not as um",
    "start": "590120",
    "end": "599920"
  },
  {
    "text": "um natural as you might think because um there's also the for Loop and the for",
    "start": "599920",
    "end": "606120"
  },
  {
    "text": "Loop is unchanged so if you if you do the for Loop um that's still here as if",
    "start": "606120",
    "end": "611920"
  },
  {
    "text": "the variable was um allocated outside and the reasoning is that people expect",
    "start": "611920",
    "end": "617200"
  },
  {
    "text": "when they write a for Loop um since there is um some side effect on the",
    "start": "617200",
    "end": "624240"
  },
  {
    "text": "variable there anyway so they expect that there's only a single variable that you side effect so",
    "start": "624240",
    "end": "631720"
  },
  {
    "text": "um that's again a little bit of a disadvantage because now you have to sometimes you switch between four loops",
    "start": "631720",
    "end": "637320"
  },
  {
    "text": "and for each Loops um and now you get a little bit of a headache fortunately we have IU bruan or whatever so or beer um",
    "start": "637320",
    "end": "645760"
  },
  {
    "text": "that will take care of that okay so this is uh some really kind of tiny I I love",
    "start": "645760",
    "end": "653120"
  },
  {
    "text": "these things like tiny tiny programs that do things that you don't expect or that you know cause um so some",
    "start": "653120",
    "end": "660120"
  },
  {
    "start": "660000",
    "end": "673000"
  },
  {
    "text": "interesting Behavior now the question is who gets the blame okay because some people may",
    "start": "660120",
    "end": "668079"
  },
  {
    "text": "say you know the the the fund when I was a young Eric when I was a fundamentalist functional programmer I would say of",
    "start": "668079",
    "end": "674680"
  },
  {
    "start": "673000",
    "end": "701000"
  },
  {
    "text": "course you know you're using mutable State you should not do that use hll or a real language and this won't happen um",
    "start": "674680",
    "end": "683079"
  },
  {
    "text": "but on the other hand now that I kind of you know um write code for living",
    "start": "683079",
    "end": "690519"
  },
  {
    "text": "I kind of like imperative programming know you can get stuff done",
    "start": "690519",
    "end": "696639"
  },
  {
    "text": "you so I'm not so sure anymore who to blame so let's look look at this let's",
    "start": "697240",
    "end": "704079"
  },
  {
    "start": "701000",
    "end": "769000"
  },
  {
    "text": "look at this here I think the the world is imperative okay the real world is",
    "start": "704079",
    "end": "709880"
  },
  {
    "text": "imperative um and H why do I say that well um you know if you have two",
    "start": "709880",
    "end": "715000"
  },
  {
    "text": "programs here that are executing and that program here on the right you look",
    "start": "715000",
    "end": "720040"
  },
  {
    "text": "to the state of the program on the left and you know it's something like you know the the Microsoft logo and then you",
    "start": "720040",
    "end": "727000"
  },
  {
    "text": "look again and it's something different and then this morning you wake up and you look and the logo has changed again",
    "start": "727000",
    "end": "733720"
  },
  {
    "text": "okay so the real world is imperative this logo doesn't you know it it really",
    "start": "733720",
    "end": "740639"
  },
  {
    "text": "changes um and so I think we need to embrace side effects I think side",
    "start": "740639",
    "end": "747839"
  },
  {
    "text": "effects are good side effects are what makes the world thick okay so let's not do kind of crazy things with you know",
    "start": "747839",
    "end": "754839"
  },
  {
    "text": "pure functions and so on that's great for math books that's good for sat books that's good to forget about once you",
    "start": "754839",
    "end": "761680"
  },
  {
    "text": "leave High School forget about functions once you go to university or to real work let's do imperative programming",
    "start": "761680",
    "end": "767680"
  },
  {
    "text": "because the real world is imperative now you you don't believe me right you think oh Eric is just joking so I need three",
    "start": "767680",
    "end": "775680"
  },
  {
    "start": "769000",
    "end": "871000"
  },
  {
    "text": "volunteers to prove that the real world is impar one volunteer there you come",
    "start": "775680",
    "end": "782880"
  },
  {
    "text": "two volunteers um and then you you're kind of you're like every volunteers kind of looking away hoping that he",
    "start": "782880",
    "end": "789079"
  },
  {
    "text": "doesn't get kind yeah so let's come here and you pull on this leg you pull on",
    "start": "789079",
    "end": "794760"
  },
  {
    "text": "that leg you pull on that leg and now we're going to kind of you know rip this thing apart yes yes for real",
    "start": "794760",
    "end": "801320"
  },
  {
    "text": "okay okay look so we have now we first",
    "start": "801320",
    "end": "806959"
  },
  {
    "text": "had a kind of cute toy you can can sit down thank you very much this is exactly the effect that I wanted we had a cute",
    "start": "806959",
    "end": "814639"
  },
  {
    "text": "toy and now we performed a destructive update on this toy there's no transaction there's no",
    "start": "814639",
    "end": "821800"
  },
  {
    "text": "way I can put ever put this back and even if I would sue it up again it would not be the same toy okay so if you don't",
    "start": "821800",
    "end": "829240"
  },
  {
    "text": "believe that the world is imperative think of this poor little you know gly",
    "start": "829240",
    "end": "836000"
  },
  {
    "text": "toy the world is super imperative there's RVE updates that cannot be undone I could not copy this thing and",
    "start": "836000",
    "end": "843000"
  },
  {
    "text": "then you know mutate the copy this thing is mutated and this thing is dead Okay",
    "start": "843000",
    "end": "849600"
  },
  {
    "text": "so that if you know you can forget everything I say today if you just remember the world is imperative the",
    "start": "849600",
    "end": "856839"
  },
  {
    "text": "world scks on side effects good all",
    "start": "856839",
    "end": "862079"
  },
  {
    "text": "right now we can all go and drink beer which is the same thing you open the beer you drink it it's empty no side",
    "start": "862079",
    "end": "869320"
  },
  {
    "text": "effect all side effects okay so now if we if we now say",
    "start": "869320",
    "end": "876639"
  },
  {
    "start": "871000",
    "end": "922000"
  },
  {
    "text": "that um all that mutation is how the world should",
    "start": "876639",
    "end": "883040"
  },
  {
    "text": "be okay then who is guilty it's definitely not the the the loop there",
    "start": "883040",
    "end": "888639"
  },
  {
    "text": "that kind of you know updates the variable it's not this guy here that's",
    "start": "888639",
    "end": "894199"
  },
  {
    "text": "all was doing also kind of nasty things it had a list and it kind of you added elements to the list that capture that",
    "start": "894199",
    "end": "899560"
  },
  {
    "text": "variable also innocent so but we still have to assign blame so the only thing",
    "start": "899560",
    "end": "905759"
  },
  {
    "text": "that we can blame is the protocol between the two the interaction between",
    "start": "905759",
    "end": "911279"
  },
  {
    "text": "the producer and the consumer that must be wrong because the imperative actions",
    "start": "911279",
    "end": "916959"
  },
  {
    "text": "are perfect so it must be the thing that glues these different imperative actions",
    "start": "916959",
    "end": "922360"
  },
  {
    "start": "922000",
    "end": "1009000"
  },
  {
    "text": "together so let's look at that okay so but this is the main thing that I'm",
    "start": "922360",
    "end": "928639"
  },
  {
    "text": "going to do there's kind of quite a lot of kind of blood here on the floor from the from the little animal um anyway um",
    "start": "928639",
    "end": "936319"
  },
  {
    "text": "so what we have to do is we have to acknowledge the presence of effects okay",
    "start": "936319",
    "end": "941680"
  },
  {
    "text": "we should not try to fight it or whatever we should deal with it and we should think about it and make it",
    "start": "941680",
    "end": "947600"
  },
  {
    "text": "explicit so there are several things that we can do if we look at this producer consumer here so this was the",
    "start": "947600",
    "end": "953160"
  },
  {
    "text": "thing the loop and this was the um the list of actions where you know I just",
    "start": "953160",
    "end": "958480"
  },
  {
    "text": "accumulated ated um the uh variable so there's several things I can do okay",
    "start": "958480",
    "end": "965240"
  },
  {
    "text": "first of all I notice that what's really going on is that there's a sequence of",
    "start": "965240",
    "end": "970399"
  },
  {
    "text": "values that are communicated between the producer and the consumer every time I go around the loop there was some",
    "start": "970399",
    "end": "977440"
  },
  {
    "text": "mutation happening and something happened so that's the first clue is that there's this stream of things",
    "start": "977440",
    "end": "983199"
  },
  {
    "text": "happening okay and I can deal with that by every time reading that value but",
    "start": "983199",
    "end": "989040"
  },
  {
    "text": "then something goes wrong that was what we saw it's like if I if I read it again well depending on how I read it I might",
    "start": "989040",
    "end": "995880"
  },
  {
    "text": "get only the last value or I might store previous value so this was definitely",
    "start": "995880",
    "end": "1001399"
  },
  {
    "text": "you know the most dangerous thing so let's make it more explicit one thing that I could do",
    "start": "1001399",
    "end": "1008199"
  },
  {
    "text": "instead of just looking at this variable I could say if the producer would give",
    "start": "1008199",
    "end": "1013720"
  },
  {
    "start": "1009000",
    "end": "1280000"
  },
  {
    "text": "me a function and now I have to say Eric this is not a function this can never be",
    "start": "1013720",
    "end": "1020199"
  },
  {
    "text": "you know this is kind of the weirdest thing if you look at something that takes void and returns a value there's",
    "start": "1020199",
    "end": "1027038"
  },
  {
    "text": "not many interesting mathematical functions that can have that thing right because a function is something when you",
    "start": "1027039",
    "end": "1032120"
  },
  {
    "text": "give it the same argument it gives the same result so this thing is really isomorphic to just T so if you but like",
    "start": "1032120",
    "end": "1040038"
  },
  {
    "text": "every like there's so many functions in H or not not in h in C or Java that take",
    "start": "1040039",
    "end": "1047000"
  },
  {
    "text": "void and they do useful thing okay so but they're not functions but",
    "start": "1047000",
    "end": "1052080"
  },
  {
    "text": "that's why they're called funks yeah they're a little bit amputated functions um but anyway so what what I",
    "start": "1052080",
    "end": "1059360"
  },
  {
    "text": "can do is I can say you know the producer can hand me the consumer a funk",
    "start": "1059360",
    "end": "1065679"
  },
  {
    "text": "and every time I want to see a value I will call that funk and it will give me the value so now I've encoded that side",
    "start": "1065679",
    "end": "1074120"
  },
  {
    "text": "effect in this you know function this little thunk that you know know that I",
    "start": "1074120",
    "end": "1079520"
  },
  {
    "text": "share and I can now make explicit the fact that I want to read that thing now",
    "start": "1079520",
    "end": "1085200"
  },
  {
    "text": "if you look at um in C at least how um properties work properties have Getters",
    "start": "1085200",
    "end": "1091799"
  },
  {
    "text": "and Setters and poor Java programmers you have to say you know get Fu and set Fu and C you just say fu fu equals five",
    "start": "1091799",
    "end": "1100400"
  },
  {
    "text": "but really what happens is that you call or when I say you know x equals get Fu",
    "start": "1100400",
    "end": "1106320"
  },
  {
    "text": "or Fu that really means that you call get Fu so you call the getter so that's",
    "start": "1106320",
    "end": "1111799"
  },
  {
    "text": "this guy okay that's one way to do it the other one is inversion of control",
    "start": "1111799",
    "end": "1119720"
  },
  {
    "text": "where I as a consumer can give a function or you know one of those other",
    "start": "1119720",
    "end": "1124880"
  },
  {
    "text": "weird things because this is also weird right something that takes a te and returns",
    "start": "1124880",
    "end": "1130520"
  },
  {
    "text": "void if you look at it from a purely mathematical point of view that is complete nonsense because the only thing",
    "start": "1130520",
    "end": "1137600"
  },
  {
    "text": "it can do is return unit it just throws away its argument always returns unit super super useful",
    "start": "1137600",
    "end": "1144559"
  },
  {
    "text": "function right but there's many functions that return void that do great things console. right line you know",
    "start": "1144559",
    "end": "1151960"
  },
  {
    "text": "should not do anything because it returns void um but still you know my most used",
    "start": "1151960",
    "end": "1158320"
  },
  {
    "text": "function all right but here the the trick here is that I as the consumer",
    "start": "1158320",
    "end": "1164080"
  },
  {
    "text": "give the producer a function that it can call to not notify me whenever new value",
    "start": "1164080",
    "end": "1170320"
  },
  {
    "text": "is available okay so there's these two ways to kind of communicate so either the producer gives me a function or I as",
    "start": "1170320",
    "end": "1178240"
  },
  {
    "text": "the consumer give the producer a function and there you see that they go in opposite directions and guess what",
    "start": "1178240",
    "end": "1186080"
  },
  {
    "text": "signatures here also go in opposite directions woo Something Beautiful is starting there um okay so let's look a",
    "start": "1186080",
    "end": "1194720"
  },
  {
    "text": "little bit more into this um oh there there's an arrow missing",
    "start": "1194720",
    "end": "1201480"
  },
  {
    "text": "here oh there maybe the the the the PowerPoint ran out of arrows or what is it the keot run out of arrows um but the",
    "start": "1201480",
    "end": "1209960"
  },
  {
    "text": "thing is like you know and this is what what I'm trying to say here is like there's beautiful mathematical Theory",
    "start": "1209960",
    "end": "1215919"
  },
  {
    "text": "but when you write code you have to think about the operational details and the same here so I I kind of already",
    "start": "1215919",
    "end": "1221840"
  },
  {
    "text": "waved my hands with I pass a function to you and you pass a function to me blah blah blah blah blah but there's more to",
    "start": "1221840",
    "end": "1228360"
  },
  {
    "text": "it right first of all there must be some initial handshake where the producer and the consumer um establish the fact that",
    "start": "1228360",
    "end": "1236919"
  },
  {
    "text": "you know they want to communicate values between each other then maybe the",
    "start": "1236919",
    "end": "1242400"
  },
  {
    "text": "consumer can say you know what I've seen 0 one two three I'm a physicist I know",
    "start": "1242400",
    "end": "1249200"
  },
  {
    "text": "that it will be four five six and so on so don't even tell me any more value so the consumer wants to tell the",
    "start": "1249200",
    "end": "1255960"
  },
  {
    "text": "producer that's enough I'm not going to I'm not interested in any more values",
    "start": "1255960",
    "end": "1261440"
  },
  {
    "text": "and on the other hand the producer just like here might run out of values so it",
    "start": "1261440",
    "end": "1267400"
  },
  {
    "text": "has to tell the the uh consumer sorry guy or girl or whatever program there",
    "start": "1267400",
    "end": "1274600"
  },
  {
    "text": "will be no more values okay so there there's there's more to it than just um simple",
    "start": "1274600",
    "end": "1280000"
  },
  {
    "text": "functions so let's um encode this um and",
    "start": "1280000",
    "end": "1285720"
  },
  {
    "text": "for the Java programmers they will um recognize here the iterable interface C",
    "start": "1285720",
    "end": "1292760"
  },
  {
    "text": "programmers call that innumerable um and and the the closure programmers will say oh of course this is closure this is the",
    "start": "1292760",
    "end": "1299440"
  },
  {
    "text": "semantic domain of closure right that this is sequences um and so sequences",
    "start": "1299440",
    "end": "1305279"
  },
  {
    "text": "yes they are everywhere there's in hll the only type you use are lists other types you never even you know I don't",
    "start": "1305279",
    "end": "1311760"
  },
  {
    "text": "know I only write list the lists are even kind of there right in the in the syntax everywhere but anyway so this is",
    "start": "1311760",
    "end": "1318039"
  },
  {
    "text": "the initial handshake the consumer asks the producer give me this thing that I",
    "start": "1318039",
    "end": "1324400"
  },
  {
    "text": "can call if I want the next value um now",
    "start": "1324400",
    "end": "1330840"
  },
  {
    "text": "um in order to get the next value I can get the value or the the the producer",
    "start": "1330840",
    "end": "1336720"
  },
  {
    "text": "can say I'm done or the prod something can go wrong with the producer right they can throw an exception so really",
    "start": "1336720",
    "end": "1342960"
  },
  {
    "text": "that function that I showed you should be something like this so it's a something that takes unit and return",
    "start": "1342960",
    "end": "1348520"
  },
  {
    "text": "there's either a value or nothing that means termination or an exception throws",
    "start": "1348520",
    "end": "1354919"
  },
  {
    "text": "an exception something went wrong well this is the clumsy way you",
    "start": "1354919",
    "end": "1360440"
  },
  {
    "text": "know if you don't have Union types you have to encode that in a clumsy way um",
    "start": "1360440",
    "end": "1365480"
  },
  {
    "text": "I'm sorry um are there F programmers here no F programmers okay good then",
    "start": "1365480",
    "end": "1372880"
  },
  {
    "text": "this is beautiful this is this is such an elegant encoding of Union types",
    "start": "1372880",
    "end": "1379600"
  },
  {
    "text": "um and then the other thing here is that when the",
    "start": "1379600",
    "end": "1385559"
  },
  {
    "text": "consumer asks for the enumerator the producer gives us an enumerator but that enumerator is also disposable which",
    "start": "1385559",
    "end": "1392840"
  },
  {
    "text": "means that you the the consumer can say I dispose of this I don't need any more",
    "start": "1392840",
    "end": "1398840"
  },
  {
    "text": "values so um so this is uh how it works",
    "start": "1398840",
    "end": "1404440"
  },
  {
    "text": "good I don't have my glasses on Dave so this is not going to help um",
    "start": "1404440",
    "end": "1410080"
  },
  {
    "text": "the guys in Australia want see okay good so where do where should I stand for them here oh that's oh I I thought I I",
    "start": "1410080",
    "end": "1416919"
  },
  {
    "text": "should watch on then I have to look at at Charles and look oh too many side",
    "start": "1416919",
    "end": "1422600"
  },
  {
    "text": "effects on me all right good so now let's turn this",
    "start": "1422600",
    "end": "1427640"
  },
  {
    "text": "thing around so we we we said like you know one way was that the um the producer could give me as the",
    "start": "1427640",
    "end": "1436320"
  },
  {
    "text": "consumer this function that I could call to to get the next values but let's turn it around I want to be in control if I'm",
    "start": "1436320",
    "end": "1442120"
  },
  {
    "text": "the consumer I'm going to tell to the producer here's a function and you can",
    "start": "1442120",
    "end": "1447440"
  },
  {
    "text": "call me back here's my phone number just call me back when you have something interesting to say I'm not going to get",
    "start": "1447440",
    "end": "1453240"
  },
  {
    "text": "you I'm in control so that is this one so what you do here is you subscribe the",
    "start": "1453240",
    "end": "1459039"
  },
  {
    "text": "the producer subscribes to the consumer by giving it a function or interface and",
    "start": "1459039",
    "end": "1464240"
  },
  {
    "text": "in this case we encode um again the union type um by having three different",
    "start": "1464240",
    "end": "1470200"
  },
  {
    "text": "functions here um and again there's this way to say I'm I'm done so when you give",
    "start": "1470200",
    "end": "1477840"
  },
  {
    "text": "the uh producer your Observer you get back a disposable you then you can say",
    "start": "1477840",
    "end": "1483720"
  },
  {
    "text": "I'm not interested anymore okay so here you see that there's two ways to to um",
    "start": "1483720",
    "end": "1489240"
  },
  {
    "text": "communicate sequences of values in the first case it was the producer that was",
    "start": "1489240",
    "end": "1494919"
  },
  {
    "text": "in charge because the producer would kind of you know um you know have this function and in",
    "start": "1494919",
    "end": "1501039"
  },
  {
    "text": "this case it's the consumer that's in charge because the consumer just hands over this function to the producer and",
    "start": "1501039",
    "end": "1507840"
  },
  {
    "text": "it will kind of you know um notify whenever a value is ready um but the",
    "start": "1507840",
    "end": "1515360"
  },
  {
    "text": "interesting thing here and let me see if I can yep look at this look at this",
    "start": "1515360",
    "end": "1522600"
  },
  {
    "text": "thing here so I had to encode that weird um Union type here but look it looks",
    "start": "1522600",
    "end": "1529440"
  },
  {
    "text": "exactly the opposite and that reflects the the the the the difference in the",
    "start": "1529440",
    "end": "1534840"
  },
  {
    "text": "protocol where you know that the protocols work in in a different direction all right so this is uh the",
    "start": "1534840",
    "end": "1542440"
  },
  {
    "text": "two ways you can um communicate sequences of values and so the real trick is that",
    "start": "1542440",
    "end": "1551120"
  },
  {
    "start": "1546000",
    "end": "1634000"
  },
  {
    "text": "when you look at a program you should not say oh you know mutability is bad",
    "start": "1551120",
    "end": "1556840"
  },
  {
    "text": "you should really look at what are the effects that are going on and how do you",
    "start": "1556840",
    "end": "1561919"
  },
  {
    "text": "want to communicate these effects between you know the different parts of your program and in this case you have",
    "start": "1561919",
    "end": "1569440"
  },
  {
    "text": "to choose you know whether you want that sequence of values whether you want to kind of you expose that as an enumerable",
    "start": "1569440",
    "end": "1577240"
  },
  {
    "text": "so as a pull-based sequence or as an observable as a push-based sequence now",
    "start": "1577240",
    "end": "1582399"
  },
  {
    "text": "the interesting thing and I I won't go back on all the slides but you can ask yourself Eric",
    "start": "1582399",
    "end": "1588840"
  },
  {
    "text": "that code that you wrote that was like horrible you're iterating over an array",
    "start": "1588840",
    "end": "1594840"
  },
  {
    "text": "putting all these values in you know inside a closure inside the list and",
    "start": "1594840",
    "end": "1600120"
  },
  {
    "text": "then you're printing that out why didn't you just capture that array directly well that that would be this case right",
    "start": "1600120",
    "end": "1607000"
  },
  {
    "text": "so it was kind of weird what I was doing there um but anyway maybe I wanted to",
    "start": "1607000",
    "end": "1612799"
  },
  {
    "text": "kind of do it in this other way okay so the the the thing is that side effects",
    "start": "1612799",
    "end": "1617880"
  },
  {
    "text": "are good good side effects are good you know I don't know if if if he or she",
    "start": "1617880",
    "end": "1624960"
  },
  {
    "text": "agrees but um you have to kind of think about how you um how you design the",
    "start": "1625840",
    "end": "1634200"
  },
  {
    "start": "1634000",
    "end": "1675000"
  },
  {
    "text": "protocol now I talked here about multiple values",
    "start": "1634200",
    "end": "1640039"
  },
  {
    "text": "now you can say oh but Eric I'm not doing mutation I only deal with",
    "start": "1640039",
    "end": "1645200"
  },
  {
    "text": "constants there's only one value but even then you can have side effects if you're a hco guy you're saying well you",
    "start": "1645200",
    "end": "1654880"
  },
  {
    "text": "know I'm I'm never Computing anything until you ask for it because maybe you",
    "start": "1654880",
    "end": "1660320"
  },
  {
    "text": "never ask for it and then I will have done something you know that was not necessary I'm a lazy person um so that",
    "start": "1660320",
    "end": "1668679"
  },
  {
    "text": "is you know in some sense a way that the consumer and the producer communicate",
    "start": "1668679",
    "end": "1674480"
  },
  {
    "text": "right the producer is lazy it won't do anything unless the consumer explicitly",
    "start": "1674480",
    "end": "1681039"
  },
  {
    "start": "1675000",
    "end": "1874000"
  },
  {
    "text": "asks for it and then you only get one value and if you ask a second time you you're guaranteed to get the same value",
    "start": "1681039",
    "end": "1688120"
  },
  {
    "text": "but the thing is lazy so that's another thing that you have to be careful about and if if I have a function that returns",
    "start": "1688120",
    "end": "1693919"
  },
  {
    "text": "an end well that's different than a function that returns something that when I ask for it will return the end",
    "start": "1693919",
    "end": "1701080"
  },
  {
    "text": "right so there's this subtle difference there so again you have to be super careful about what what the effects are",
    "start": "1701080",
    "end": "1707720"
  },
  {
    "text": "of your computation so in this case if there's even one we can use the type",
    "start": "1707720",
    "end": "1713200"
  },
  {
    "text": "lazy of T and the lazy of T has one operation namely give me the",
    "start": "1713200",
    "end": "1718679"
  },
  {
    "text": "value which at that point will compute the value and return it and the next time you ask for it it will return",
    "start": "1718679",
    "end": "1725919"
  },
  {
    "text": "exactly the same uh value that's at least you know the guarantee there's nothing you know again since we're here",
    "start": "1725919",
    "end": "1732279"
  },
  {
    "text": "in imperative language there's nothing here that if you ask for Value again that will give you another one right um",
    "start": "1732279",
    "end": "1739559"
  },
  {
    "text": "which is the beauty as well actually so ah now you have asked five times for this value ah now I'm going to give you",
    "start": "1739559",
    "end": "1746279"
  },
  {
    "text": "something else let's see how good of a coder you are um that's the kind what I",
    "start": "1746279",
    "end": "1751440"
  },
  {
    "text": "usually do in my code um and then here's my other favorite type task of tea not",
    "start": "1751440",
    "end": "1759559"
  },
  {
    "text": "because I'm such a task oriented person I'm more creative kind you chaotic person but this one has such a beautiful",
    "start": "1759559",
    "end": "1766720"
  },
  {
    "text": "signature look at it so what is a task a task is something that has a continue",
    "start": "1766720",
    "end": "1774039"
  },
  {
    "text": "withd method and look at that that takes a function that takes a task and returns",
    "start": "1774039",
    "end": "1779519"
  },
  {
    "text": "some value and then returns a task wow it this see this thing seems to",
    "start": "1779519",
    "end": "1786279"
  },
  {
    "text": "be in the wrong place because why if I have a task you know why would you you",
    "start": "1786279",
    "end": "1791519"
  },
  {
    "text": "know give this function why would it you know give me the task well fortunately it also has this guy here where I can",
    "start": "1791519",
    "end": "1798279"
  },
  {
    "text": "that I can use to to grab the result um by the way this one is a gonet",
    "start": "1798279",
    "end": "1805799"
  },
  {
    "text": "okay so um if you if you're if you're bored now and you you what's going on",
    "start": "1805799",
    "end": "1811679"
  },
  {
    "text": "here this type here this is the bind of a konet um so C actually now has support",
    "start": "1811679",
    "end": "1817399"
  },
  {
    "text": "for both monets and konets in the language I think that's pretty kind of you know pretty nice for for weird um",
    "start": "1817399",
    "end": "1824919"
  },
  {
    "text": "imperative language that it has that um now note and this really makes me sad",
    "start": "1824919",
    "end": "1832200"
  },
  {
    "text": "makes me more sad than killing that little animal there is that lazy of T and task of T",
    "start": "1832200",
    "end": "1839159"
  },
  {
    "text": "are not interfaces so the innumerable and observable were interfaces but suddenly these things here are concrete",
    "start": "1839159",
    "end": "1845960"
  },
  {
    "text": "types um and that is why is that I mean",
    "start": "1845960",
    "end": "1851080"
  },
  {
    "text": "if you're a programmer I think the reason is that languages like Java and C",
    "start": "1851080",
    "end": "1856799"
  },
  {
    "text": "are too confusing with classes and interfaces and Abstract base types and",
    "start": "1856799",
    "end": "1861919"
  },
  {
    "text": "whatever it's like oh and so there's too much Choice and then well it's just like",
    "start": "1861919",
    "end": "1867039"
  },
  {
    "text": "the pigeon hole principle right if you have too much choice at some point you will make the wrong choice um so I think",
    "start": "1867039",
    "end": "1873320"
  },
  {
    "text": "this is a wrong choice here but let's look at it from the bright side what we",
    "start": "1873320",
    "end": "1880120"
  },
  {
    "text": "have seen is that we started with one type so this is the producer that had a",
    "start": "1880120",
    "end": "1885519"
  },
  {
    "text": "mutable variable of type int and and let's generalize it to type T and then",
    "start": "1885519",
    "end": "1890720"
  },
  {
    "text": "we saw that really there were four more choices that were hidden behind that",
    "start": "1890720",
    "end": "1895919"
  },
  {
    "text": "simple program right so it looked like a trivial program that just you know was communicating integers between producer",
    "start": "1895919",
    "end": "1903000"
  },
  {
    "text": "and consumer but really you know we could say well you know if if this thing",
    "start": "1903000",
    "end": "1908799"
  },
  {
    "text": "produces many values I can um interact with it you know in a pool-based or",
    "start": "1908799",
    "end": "1914320"
  },
  {
    "text": "push-based way or if it produces only one I can either do it lazy or um in in an",
    "start": "1914320",
    "end": "1923000"
  },
  {
    "text": "asynchronous way okay so there's five things here and now I like Chinese food",
    "start": "1923000",
    "end": "1931639"
  },
  {
    "text": "and guess what if you you cannot make Chinese food without five spice powder",
    "start": "1931639",
    "end": "1937480"
  },
  {
    "text": "you cannot make coat without five effects okay so these five effects are",
    "start": "1937480",
    "end": "1943519"
  },
  {
    "text": "the things that make your cat kind of tasty and beautiful okay and then the",
    "start": "1943519",
    "end": "1948679"
  },
  {
    "text": "other thing and which I really believe in that these spices or these effects",
    "start": "1948679",
    "end": "1953720"
  },
  {
    "text": "create a balance so this is the thing is when you write your code you have to have this balance you have to think",
    "start": "1953720",
    "end": "1960360"
  },
  {
    "text": "about the balance you know is your code only push based or is only pool based is it blocking all the time or so this is",
    "start": "1960360",
    "end": "1967480"
  },
  {
    "text": "all about like you know you are like the chef and you have to cook your program",
    "start": "1967480",
    "end": "1973240"
  },
  {
    "text": "um you can cook other things maybe you know you can make more money using that but I think you know cooking code is",
    "start": "1973240",
    "end": "1979679"
  },
  {
    "text": "kind of more fun all right so um let's put this kind",
    "start": "1979679",
    "end": "1984720"
  },
  {
    "start": "1980000",
    "end": "2026000"
  },
  {
    "text": "of ying yang thing up here um I'm a hippie I don't know what happened you know here I had like highlighted this",
    "start": "1984720",
    "end": "1991399"
  },
  {
    "text": "thing here you know opposite forces attract this and that um does this look",
    "start": "1991399",
    "end": "1997880"
  },
  {
    "text": "like yiny yeah all right but if you if you if you look back at the examples I",
    "start": "1997880",
    "end": "2004519"
  },
  {
    "text": "gave there was this yingyang right there was this thing I give you a function that you can call me back with or you",
    "start": "2004519",
    "end": "2011320"
  },
  {
    "text": "give me a function that I can so there's this there were these opposites so there's something deep in there that you",
    "start": "2011320",
    "end": "2018480"
  },
  {
    "text": "know when you're coding that you think about these kind of opposites you know can I do it in this way or can I do it",
    "start": "2018480",
    "end": "2025639"
  },
  {
    "text": "in a completely opposite way and since this is Chicago and there's many people",
    "start": "2025639",
    "end": "2030960"
  },
  {
    "start": "2026000",
    "end": "2053000"
  },
  {
    "text": "from financial industry another way to say it is like every coin has two sides and you know it you know you all always",
    "start": "2030960",
    "end": "2038000"
  },
  {
    "text": "have to look at both sides but the other thing is also you",
    "start": "2038000",
    "end": "2043039"
  },
  {
    "text": "have to find where is the real value I can flip a coin but you know I need to",
    "start": "2043039",
    "end": "2048040"
  },
  {
    "text": "make some money right I need need to make more coins so um where's the value",
    "start": "2048040",
    "end": "2053919"
  },
  {
    "start": "2053000",
    "end": "2130000"
  },
  {
    "text": "and let's look into that well I think the real value is",
    "start": "2053919",
    "end": "2060158"
  },
  {
    "text": "in making a distinction oh now poor guys in Australia I was kind of jumping okay",
    "start": "2060159",
    "end": "2066398"
  },
  {
    "text": "I'm still here um haven't disappeared so the thing is that you",
    "start": "2066399",
    "end": "2073320"
  },
  {
    "text": "that you have to kind of you know that's another thing that I think is super essential in functional programming is",
    "start": "2073320",
    "end": "2079800"
  },
  {
    "text": "that you separate the concepts of interface from implementation so in this",
    "start": "2079800",
    "end": "2085599"
  },
  {
    "text": "case when I gave you this interface for pool based communication that was an interface and",
    "start": "2085599",
    "end": "2092638"
  },
  {
    "text": "there's many concrete types that Implement that interface okay but if you comp your programs if you glue your code",
    "start": "2092639",
    "end": "2099760"
  },
  {
    "text": "together you do that in terms of the interface and I think if anything you",
    "start": "2099760",
    "end": "2105920"
  },
  {
    "text": "know I think functional programming has more to do with this concept than with side effects functional programming is",
    "start": "2105920",
    "end": "2112880"
  },
  {
    "text": "all about being aware of hidden assumptions and then making them making",
    "start": "2112880",
    "end": "2118480"
  },
  {
    "text": "them explicit or ignoring them but you know ignoring them knowingly um whenever",
    "start": "2118480",
    "end": "2125359"
  },
  {
    "text": "they don't really matter okay so let's look a little bit more into this um and",
    "start": "2125359",
    "end": "2132119"
  },
  {
    "start": "2130000",
    "end": "2230000"
  },
  {
    "text": "as I said um in oo programming I think this distinction is often blurred",
    "start": "2132119",
    "end": "2137599"
  },
  {
    "text": "because there's too many ways to kind of do it half if you have an abstract Base Class well is that an interface or is",
    "start": "2137599",
    "end": "2143880"
  },
  {
    "text": "that a class well it's it's kind of you know some zombie kind of halfway through okay so and and I think if you look at",
    "start": "2143880",
    "end": "2151000"
  },
  {
    "text": "go or oldfashioned Com or modern com there the the difference between inter",
    "start": "2151000",
    "end": "2157880"
  },
  {
    "text": "and implementation was super super crisp and clear um and in functional",
    "start": "2157880",
    "end": "2163119"
  },
  {
    "text": "programming that uh separation is also crisp and clear if I give you a function",
    "start": "2163119",
    "end": "2169280"
  },
  {
    "text": "the only thing you can assume is its signature okay that's the interface and",
    "start": "2169280",
    "end": "2174640"
  },
  {
    "text": "then I can give you any implementation of that function but there's nothing more you can do about it the only thing",
    "start": "2174640",
    "end": "2180599"
  },
  {
    "text": "you can that you know is its interface so I think that's one of the strong points about functional programming is",
    "start": "2180599",
    "end": "2186880"
  },
  {
    "text": "that it's kind of forces this strict separation between um interface and implementation whereas you know I don't",
    "start": "2186880",
    "end": "2193280"
  },
  {
    "text": "even know here's like protected virtual partial blah like my head is starting to",
    "start": "2193280",
    "end": "2199040"
  },
  {
    "text": "spin I I always have to I admit this every time I have to use all these you know quantifiers I I have to go and look",
    "start": "2199040",
    "end": "2206839"
  },
  {
    "text": "in the manual what does this mean oh protected oh is that something different than kind you",
    "start": "2206839",
    "end": "2213520"
  },
  {
    "text": "know like in JavaScript everything is public so why do so can anybody tell me",
    "start": "2213520",
    "end": "2218960"
  },
  {
    "text": "why Java and C have this kind of crazy stuff whereas like the language that everybody uses has only kind of public",
    "start": "2218960",
    "end": "2225760"
  },
  {
    "text": "things I don't know so I make everything public I don't like private all right so let's let's look at",
    "start": "2225760",
    "end": "2234480"
  },
  {
    "start": "2230000",
    "end": "2451000"
  },
  {
    "text": "some H now okay and again I'm I'm not trying to teach you H I'm trying to teach you the thinking that I think is",
    "start": "2234480",
    "end": "2241160"
  },
  {
    "text": "the value behind functional programming so let's look at this thing here fold R",
    "start": "2241160",
    "end": "2246720"
  },
  {
    "text": "that's something that takes a list and let me make sure that I stand here something that takes a list and",
    "start": "2246720",
    "end": "2254440"
  },
  {
    "text": "folds it down to a value of type B so you take a list of A's and it folds it down to a value of type B and what it",
    "start": "2254440",
    "end": "2261280"
  },
  {
    "text": "does it says when you have the empty list that's the first parameter there that's B and then when you have a a list",
    "start": "2261280",
    "end": "2267599"
  },
  {
    "text": "that's composed out of you know an element a and then the result of folding the list then you just kind of apply the",
    "start": "2267599",
    "end": "2274319"
  },
  {
    "text": "first operation so this is kind of you a higher function and everybody's using this",
    "start": "2274319",
    "end": "2280119"
  },
  {
    "text": "foldar um you already see here that this thing takes two functions or you know",
    "start": "2280119",
    "end": "2285400"
  },
  {
    "text": "one function and and a b and in that sense it's good because it it strictly",
    "start": "2285400",
    "end": "2291119"
  },
  {
    "text": "separates the interface from the implementation it says if you give me B and this function I can now reduce this",
    "start": "2291119",
    "end": "2298200"
  },
  {
    "text": "list down to a value but if you're real hasal programmer you see that there's",
    "start": "2298200",
    "end": "2303520"
  },
  {
    "text": "still a concrete type there's still that list these angle br pack first of all",
    "start": "2303520",
    "end": "2308800"
  },
  {
    "text": "this is kind of one of the only types that use this kind of disc fix notation so it's like a is saw I don't want to",
    "start": "2308800",
    "end": "2314800"
  },
  {
    "text": "see that and but also why couldn't I fold anything else why can I fold only",
    "start": "2314800",
    "end": "2321280"
  },
  {
    "text": "lists so in hll you can say well as long",
    "start": "2321280",
    "end": "2326359"
  },
  {
    "text": "as there are certain operations on here and I will show you in the next slide what they are I can fold something of",
    "start": "2326359",
    "end": "2333319"
  },
  {
    "text": "type T of a to a b if you give me these two functions this is quite remarkable",
    "start": "2333319",
    "end": "2339079"
  },
  {
    "text": "so um well if you're if you're using closure there's no types at all so this",
    "start": "2339079",
    "end": "2346119"
  },
  {
    "text": "this probably all doesn't make sense to you in the first place if you're a JavaScript programmer you know you don't",
    "start": "2346119",
    "end": "2351839"
  },
  {
    "text": "use types at all you don't know what this means either um but if you're an F",
    "start": "2351839",
    "end": "2357040"
  },
  {
    "text": "programmer or a Java programmer or a um C programmer or a VB programmer we all",
    "start": "2357040",
    "end": "2364160"
  },
  {
    "text": "love VB of course um this is really weird because this is a generic function",
    "start": "2364160",
    "end": "2371359"
  },
  {
    "text": "where the type parameter is a type Constructor and that is the thing that I",
    "start": "2371359",
    "end": "2377839"
  },
  {
    "text": "miss most in C sh and f um and and whatever functional languages",
    "start": "2377839",
    "end": "2385920"
  },
  {
    "text": "that they don't have these kind of you know higher kind of types I think Scala has them by now um but this is super",
    "start": "2385920",
    "end": "2392400"
  },
  {
    "text": "powerful because I don't want to have something that only works for lists I want to make it work for arbitrary data",
    "start": "2392400",
    "end": "2398240"
  },
  {
    "text": "structures okay and that's what this thing kind of allows you to do and then you can write functions like this saying",
    "start": "2398240",
    "end": "2405200"
  },
  {
    "text": "you know I can find something in a container of a if you give me a",
    "start": "2405200",
    "end": "2411760"
  },
  {
    "text": "predicate and then this thing must be foldable and then you can see that's probably implemented in terms of fold so",
    "start": "2411760",
    "end": "2417920"
  },
  {
    "text": "now this type gives you a lot of information because it kind of tells you exactly what are the assumptions on the",
    "start": "2417920",
    "end": "2424599"
  },
  {
    "text": "types uh that you need in order to to make this implementation work but it says nothing more and nothing less so",
    "start": "2424599",
    "end": "2431599"
  },
  {
    "text": "that is I think the important thing of types why I like types is because it",
    "start": "2431599",
    "end": "2438200"
  },
  {
    "text": "gives you this kind of specification of this problem in a very abstract way that",
    "start": "2438200",
    "end": "2443440"
  },
  {
    "text": "just tells me as a as a developer this is what you need to supply and then I will I can kind of you know find this",
    "start": "2443440",
    "end": "2450720"
  },
  {
    "text": "element for you now in in h there's these things called type classes have",
    "start": "2450720",
    "end": "2457359"
  },
  {
    "start": "2451000",
    "end": "2509000"
  },
  {
    "text": "nothing to do with classes in in C or Java um but a type class is really you",
    "start": "2457359",
    "end": "2463680"
  },
  {
    "text": "know just a collection of functions um so here's like a",
    "start": "2463680",
    "end": "2469720"
  },
  {
    "text": "monoid something that you might you know if you go to a cocktail party or you know maybe afterwards with a beard yeah",
    "start": "2469720",
    "end": "2476560"
  },
  {
    "text": "today I kind of defined three monoids oh but I defined five monets oh",
    "start": "2476560",
    "end": "2482440"
  },
  {
    "text": "but I did 10 coets yeah so it's like yeah um but what is a monoid it's just",
    "start": "2482440",
    "end": "2490079"
  },
  {
    "text": "something you know that has a binary operator that can kind of glue two two of them together and then there's a",
    "start": "2490079",
    "end": "2496400"
  },
  {
    "text": "neutral element that's all monoids are not kind of you know that special so when this H scho people love to have",
    "start": "2496400",
    "end": "2502640"
  },
  {
    "text": "these kind of things fold monoid whatever they try to impress you don't",
    "start": "2502640",
    "end": "2507760"
  },
  {
    "text": "believe them all right but here's the thing okay",
    "start": "2507760",
    "end": "2513079"
  },
  {
    "start": "2509000",
    "end": "2651000"
  },
  {
    "text": "and this is a where I want to kind of you get that is that if you're using these type classes um",
    "start": "2513079",
    "end": "2521760"
  },
  {
    "text": "really if you have a signature like that it says you know fault you know assumes that m is a monoid and then you know you",
    "start": "2521760",
    "end": "2528119"
  },
  {
    "text": "g t of M to M really that's a Shand for passing three functions um as an",
    "start": "2528119",
    "end": "2535800"
  },
  {
    "text": "argument to that function except that the compiler will",
    "start": "2535800",
    "end": "2542559"
  },
  {
    "text": "inject that um stuff for you so I I once made a remark that you know dependency",
    "start": "2542559",
    "end": "2550480"
  },
  {
    "text": "injection is for people that don't know math and I still believe that because",
    "start": "2550480",
    "end": "2555920"
  },
  {
    "text": "what this is really doing this is kind of you know dependency injection is controlled dependency injection but",
    "start": "2555920",
    "end": "2561559"
  },
  {
    "text": "you're explicit about it I don't want to have something in some XML file like XML",
    "start": "2561559",
    "end": "2567359"
  },
  {
    "text": "and that kind of then you changes how my program behaves okay so the whole point",
    "start": "2567359",
    "end": "2572760"
  },
  {
    "text": "about functional programming is that you make everything explicit you're super",
    "start": "2572760",
    "end": "2578359"
  },
  {
    "text": "explicit about it and then when you know what you're doing okay when you're a",
    "start": "2578359",
    "end": "2583640"
  },
  {
    "text": "little bit competent then you can let the compiler take care of it okay but",
    "start": "2583640",
    "end": "2589200"
  },
  {
    "text": "never ever pretend that you're smarter than whoever and like oh well I just do a kind of XML file here on the side and",
    "start": "2589200",
    "end": "2596280"
  },
  {
    "text": "now that's will kind of you mess around with my code no no no no you have to be able to express everything in terms of",
    "start": "2596280",
    "end": "2603240"
  },
  {
    "text": "this super explicit thing with you know look well that that means is this and so",
    "start": "2603240",
    "end": "2609800"
  },
  {
    "text": "you know whenever the compiler can figure out that there's only one choice for that monoid yes then it can inject",
    "start": "2609800",
    "end": "2616079"
  },
  {
    "text": "it but not because you know you you wrote that in an XML fun okay now if you would have looked at",
    "start": "2616079",
    "end": "2624960"
  },
  {
    "text": "this type and you know listened carefully to me you said Eric but what",
    "start": "2624960",
    "end": "2630119"
  },
  {
    "text": "what are you talking about there's still a concrete type I still see that Arrow you have not abstracted to the extreme",
    "start": "2630119",
    "end": "2636640"
  },
  {
    "text": "and and you're such an extreme person and now you're kind of look at this one",
    "start": "2636640",
    "end": "2642359"
  },
  {
    "text": "two three four five arrows in here how can you do that I mean it's staring in your face",
    "start": "2642359",
    "end": "2649839"
  },
  {
    "text": "bad okay so if you go all the way all the",
    "start": "2649839",
    "end": "2656559"
  },
  {
    "start": "2651000",
    "end": "2783000"
  },
  {
    "text": "way and you say even this arrow is something that's not a concrete type that should be an interface then you get",
    "start": "2656559",
    "end": "2663319"
  },
  {
    "text": "category Theory okay so again category Theory a lot of people are scared about it it's nothing it's just mathematicians",
    "start": "2663319",
    "end": "2671440"
  },
  {
    "text": "doing interface based programming okay that's it so now you know category",
    "start": "2671440",
    "end": "2677880"
  },
  {
    "text": "Theory um and so what they're saying is that well all I need is I need to have",
    "start": "2677880",
    "end": "2684119"
  },
  {
    "text": "some function from A to B what do what are the operations on a function and",
    "start": "2684119",
    "end": "2689280"
  },
  {
    "text": "they don't call it function they call it morphism that sounds better Morpheus like the red bill",
    "start": "2689280",
    "end": "2697240"
  },
  {
    "text": "okay so I have to go from A to B or there should be like some Arrow here and",
    "start": "2697240",
    "end": "2702640"
  },
  {
    "text": "if I can go from B to C there was an arrow here from a to c so",
    "start": "2702640",
    "end": "2709480"
  },
  {
    "text": "that's the composition that Arrow disappeared I think this is when you go from PowerPoint to Keynote um the arrows",
    "start": "2709480",
    "end": "2715880"
  },
  {
    "text": "disappear um and then you have to go kind of you know um this is what mathematicians like",
    "start": "2715880",
    "end": "2723359"
  },
  {
    "text": "they kind of like things to be kind of you know that if you have a that you can go to a and that you know if you compose",
    "start": "2723359",
    "end": "2729240"
  },
  {
    "text": "that that kind of falls out yeah sure so really this is like a monoid with kind",
    "start": "2729240",
    "end": "2734480"
  },
  {
    "text": "of you know semicolon as the kind of your composition operator but forget",
    "start": "2734480",
    "end": "2740000"
  },
  {
    "text": "about that okay but now the trick is that you should not fall in love with category Theory I see so many people and",
    "start": "2740000",
    "end": "2747240"
  },
  {
    "text": "I was one myself oh category Theory you go into a black hole you go into a rabbit hole and you know what's down in",
    "start": "2747240",
    "end": "2753520"
  },
  {
    "text": "the rabbit hole okay okay what the rabbit droppings",
    "start": "2753520",
    "end": "2759839"
  },
  {
    "text": "right you don't want to come out of the rabbit hole all kind of you know smudgy and so on so don't go into the rabbit",
    "start": "2759839",
    "end": "2766280"
  },
  {
    "text": "hole of category Theory okay show that you're proficient",
    "start": "2766280",
    "end": "2772440"
  },
  {
    "text": "and just step back and say okay I understand what they want these are just kind of poor mathematicians that also",
    "start": "2772440",
    "end": "2778359"
  },
  {
    "text": "try to be like programmers okay I see it good move on with your life um but of",
    "start": "2778359",
    "end": "2785319"
  },
  {
    "start": "2783000",
    "end": "2853000"
  },
  {
    "text": "course mathematicians are much smarter than us okay and like look you're if",
    "start": "2785319",
    "end": "2791400"
  },
  {
    "text": "you're in the kind of financial industry you're writing code or whatever but you know you're mathematicians friends or your kind of your physic physicist",
    "start": "2791400",
    "end": "2797920"
  },
  {
    "text": "friends those are the quants those are now they are kind of eating caviar somewhere you know across the street",
    "start": "2797920",
    "end": "2803839"
  },
  {
    "text": "okay so we should learn from mathematicians we should steal from their ideas so if you look at um",
    "start": "2803839",
    "end": "2810520"
  },
  {
    "text": "category Theory they also know yinyang only they call it Duality and they don't",
    "start": "2810520",
    "end": "2816200"
  },
  {
    "text": "make kind of a big deal with like warm and hot and sharp and soft but no they just say you you reverse the arrows and",
    "start": "2816200",
    "end": "2823119"
  },
  {
    "text": "then you get something useful oh great so if I kind of reverse the arrows I get something useful so that's how I kind of",
    "start": "2823119",
    "end": "2830640"
  },
  {
    "text": "invented this thing you know these two protocols I just looked at one and I said okay I'm doing the Ying Yang thing",
    "start": "2830640",
    "end": "2836760"
  },
  {
    "text": "and I can reverse the arrows and there must be something useful there too great but then of course I don't say that now",
    "start": "2836760",
    "end": "2842720"
  },
  {
    "text": "I'm teaching all my tricks to you um but that's all you do okay so but don't go",
    "start": "2842720",
    "end": "2849280"
  },
  {
    "text": "into that rabbit hole just look at that say okay that's some idea I can steal and um",
    "start": "2849280",
    "end": "2858200"
  },
  {
    "start": "2853000",
    "end": "2875000"
  },
  {
    "text": "yeah monets don't even you know it's like if if you ever hear yourself say the word",
    "start": "2858200",
    "end": "2865640"
  },
  {
    "text": "Monet go you contact the shrink okay something is deeply wrong with you",
    "start": "2865640",
    "end": "2874599"
  },
  {
    "text": "um okay let's go back this my last slide nearly",
    "start": "2874599",
    "end": "2881480"
  },
  {
    "start": "2875000",
    "end": "2912000"
  },
  {
    "text": "because if you looked at what I was trying to do I was trying to solve a practical problem does it really matter",
    "start": "2881480",
    "end": "2887599"
  },
  {
    "text": "that these guys are dual I don't know it's I used that as a",
    "start": "2887599",
    "end": "2893200"
  },
  {
    "text": "trick to go from one to the other but does it really matter I don't know does it matter that both are monets and",
    "start": "2893200",
    "end": "2898880"
  },
  {
    "text": "konets that they're selfdual does it matter that your brain is now in this kind of knot where you know it's kind of",
    "start": "2898880",
    "end": "2905040"
  },
  {
    "text": "all tied up and you I no I it solved my problem I got my paycheck so I'm",
    "start": "2905040",
    "end": "2912480"
  },
  {
    "start": "2912000",
    "end": "3087000"
  },
  {
    "text": "happy okay so the world is imperative never forget that",
    "start": "2912760",
    "end": "2921200"
  },
  {
    "text": "okay never forget that if somebody wants to prove me wrong I'm happy okay",
    "start": "2921200",
    "end": "2926319"
  },
  {
    "text": "functional programming is a great tool for thought but imperative programming is the tool for hackers thank you very",
    "start": "2926319",
    "end": "2933280"
  },
  {
    "text": "much",
    "start": "2933280",
    "end": "2936280"
  },
  {
    "text": "I completely lost track of time so I I don't know all right they're not sure where they",
    "start": "2942359",
    "end": "2948720"
  },
  {
    "text": "are all right so we got time for a couple of questions want the",
    "start": "2948720",
    "end": "2956200"
  },
  {
    "text": "pro any questions that's great everybody's",
    "start": "2956599",
    "end": "2963040"
  },
  {
    "text": "scared that that they will that they will end up you know okay",
    "start": "2963040",
    "end": "2968720"
  },
  {
    "text": "Rich ah what I mean by a value is um",
    "start": "2976040",
    "end": "2982319"
  },
  {
    "text": "nothing special okay so and I know that what we will see from you that you that",
    "start": "2982319",
    "end": "2987520"
  },
  {
    "text": "you kind of you know for you a value is something that kind of has kind of magic",
    "start": "2987520",
    "end": "2992920"
  },
  {
    "text": "powers um for me if value is anything that can assign to a variable in C or",
    "start": "2992920",
    "end": "2999280"
  },
  {
    "text": "Java that I can smack and mutate and whatever is just something that I can",
    "start": "2999280",
    "end": "3004920"
  },
  {
    "text": "stick in that you know in that position um so there's nothing special with that",
    "start": "3004920",
    "end": "3010799"
  },
  {
    "text": "um and again because the valness if if it matters that this thing is a value in",
    "start": "3010799",
    "end": "3016680"
  },
  {
    "text": "kind of you know in your sense I I don't know I haven't seen your talk yet but in that case you what I would say is you",
    "start": "3016680",
    "end": "3023079"
  },
  {
    "text": "have to make that effect explicit and so if you have an enumer of T but that t",
    "start": "3023079",
    "end": "3028760"
  },
  {
    "text": "itself you know you want to consider that as a value you might want to do it as an innumerable of lazy of T and so",
    "start": "3028760",
    "end": "3034880"
  },
  {
    "text": "you kind of push that that you make the effects kind of explicit until the value",
    "start": "3034880",
    "end": "3041640"
  },
  {
    "text": "the mutation of it doesn't matter anymore so this is about like whether you do you know it's like the essence",
    "start": "3041640",
    "end": "3047240"
  },
  {
    "text": "right you push it as far out as necessary but not for farther and sometimes you say I'll just mutate it as",
    "start": "3047240",
    "end": "3054480"
  },
  {
    "text": "is so that's um yeah the the quick answer here so I'm",
    "start": "3054480",
    "end": "3059960"
  },
  {
    "text": "I'm a super pragmatic guy I mean um I just want to get my work done and I'm",
    "start": "3059960",
    "end": "3065760"
  },
  {
    "text": "happy to steal left and right but sometimes you just have to kind of you know kill the baby",
    "start": "3065760",
    "end": "3074160"
  },
  {
    "text": "[Applause]",
    "start": "3075730",
    "end": "3084150"
  },
  {
    "text": "[Music]",
    "start": "3084210",
    "end": "3087400"
  }
]