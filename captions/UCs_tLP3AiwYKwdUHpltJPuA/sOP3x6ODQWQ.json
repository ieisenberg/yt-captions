[
  {
    "text": "(upbeat music)",
    "start": "405",
    "end": "2988"
  },
  {
    "text": "- All right, whatever you're doing, remember, I believe that code is the single most important thing we can do",
    "start": "9926",
    "end": "16307"
  },
  {
    "text": "if we're among the four or so billion people on the internet,\nconnected to the internet. The four or so billion\npeople on the planet",
    "start": "16308",
    "end": "23323"
  },
  {
    "text": "connected to the internet. For us, code is the single most impactful thing you can\ndo to make a change, to make a difference, to change the world.",
    "start": "23323",
    "end": "29713"
  },
  {
    "text": "There's still three or so billion people not yet connected to the internet. So of course, we have a long ways to go. But, if you're connected to the internet,",
    "start": "29713",
    "end": "36275"
  },
  {
    "text": "code is the most powerful\nthing you can do. That's why I start with code. I believe code is the essence of what we're trying to do here, so,",
    "start": "36275",
    "end": "42413"
  },
  {
    "text": "note that for your own reference. I'm also on the internet. I'm happy to carry this\ndiscussion forward. Above and beyond our humble\ntime together here today.",
    "start": "42413",
    "end": "49633"
  },
  {
    "text": "So, please note that Twitter handle. How many of you are on Twitter? Twitter?",
    "start": "49633",
    "end": "55086"
  },
  {
    "text": "It's 2016, Twitter? Twitter, okay, that's a little awkward. What about email?",
    "start": "55086",
    "end": "60924"
  },
  {
    "text": "Email? E mail, anybody? No. Okay, well if you're on email, at least you probably\nconsider your life choices.",
    "start": "60924",
    "end": "67887"
  },
  {
    "text": "If you're on Twitter, great. If not, get on it. It's the new IRC, it's\nhot stuff, good stuff. Little bit about me.",
    "start": "67887",
    "end": "73297"
  },
  {
    "text": "My name is Josh Long. I'm the Spring developer advocate on the Spring team. The.",
    "start": "73297",
    "end": "78007"
  },
  {
    "text": "I'm a book author. The latest and greatest book,\nwhich is not yet finished, but we're working on it. It's called \"Cloud Native Java.\"",
    "start": "79074",
    "end": "84626"
  },
  {
    "text": "Sort of the long form version of what we're about to talk about in the next 50 minutes. That bird, for those of\nyou who are wondering,",
    "start": "84626",
    "end": "91796"
  },
  {
    "text": "is the blue-eared kingfisher from the Javanesian island so it's a bird you see, that flies",
    "start": "91796",
    "end": "98351"
  },
  {
    "text": "from Java. So, bird, native bird, Java, no? Okay. It'll come, it'll come.\n(laughter)",
    "start": "98351",
    "end": "104397"
  },
  {
    "text": "Don't worry about it. You'll get it, it'll be fine. Also, I've done video training so the latest and greatest of which",
    "start": "104398",
    "end": "109520"
  },
  {
    "text": "is called Building\nSpring Boot Live Lessons with Spring Boot co-founder and my friend, and everybody's friend really, Phil Web.",
    "start": "109520",
    "end": "115951"
  },
  {
    "text": "So there's that. I'm also an open source\ncontributor and engineer. I am the number one, top ranked, no kidding,",
    "start": "115952",
    "end": "122632"
  },
  {
    "text": "number one, seven years running, seven years. More bugs per commit\nthan any other committer.",
    "start": "122632",
    "end": "128556"
  },
  {
    "text": "(laughter) Number one. Number one. For projects like Spring\nBoot, Spring Cloud,",
    "start": "128557",
    "end": "134165"
  },
  {
    "text": "Spring Innovation, Vaadin, Spring Badge, Thymeleaf Activity, et cetera. More bugs per commit.",
    "start": "134165",
    "end": "139206"
  },
  {
    "text": "And I work at Pivotal. And at Pivotal we care very\nmuch about open source. You can see that because I have",
    "start": "139206",
    "end": "144946"
  },
  {
    "text": "the cute icons on my\nslide, but that is not our reason d'etre. It's not the reason we're here.",
    "start": "144947",
    "end": "150137"
  },
  {
    "text": "It's not the reason we're excited to go to work in the morning. We're excited because we wanna help customers, community members,",
    "start": "150137",
    "end": "155388"
  },
  {
    "text": "and organizations at large, move quickly and safely from concept to production. And we see that a lot of\nthem struggle with this.",
    "start": "155388",
    "end": "160811"
  },
  {
    "text": "They don't know how to do this because they are lucky enough to have been around for more than 10 years.",
    "start": "160811",
    "end": "165993"
  },
  {
    "text": "Longer than the era of cloud computing that we know about right now,\nthe one we're in right now. These organizations have\nexisting applications",
    "start": "165994",
    "end": "173056"
  },
  {
    "text": "that were written in yesteryear, before the economics\nand before the benefits of cloud computing were so\nobvious and so apparent.",
    "start": "173056",
    "end": "179722"
  },
  {
    "text": "These applications, while they were well designed for the time\nin which they were conceived, now present a bit of an obstacle.",
    "start": "179723",
    "end": "186212"
  },
  {
    "text": "You see, speed is a differentiator. It is the secret sauce that helps us get to market quickly.",
    "start": "186212",
    "end": "191891"
  },
  {
    "text": "And I don't need to look too far for supporting evidence of this, right? What is the largest taxi\ncompany in the world right now?",
    "start": "191891",
    "end": "198023"
  },
  {
    "text": "Uber, right? What is the largest hotel\nbrand in the world right now? What is the largest in terms of",
    "start": "198023",
    "end": "203768"
  },
  {
    "text": "the year over year growth car company in the world right now? And what is the largest\nvideo rental service",
    "start": "203768",
    "end": "210138"
  },
  {
    "text": "in the world right now? (crowd murmur) No, exactly, see. It's so ironic. It's so bad it's ironic, and it's funny.",
    "start": "210138",
    "end": "215845"
  },
  {
    "text": "It's not Blockbuster. It's Netflix. And that proves my point.",
    "start": "215845",
    "end": "221241"
  },
  {
    "text": "These companies, when they were started, didn't have more money,\ndidn't have more resources, didn't even necessarily\nhave smarter people.",
    "start": "221241",
    "end": "227684"
  },
  {
    "text": "They had the advantage of speed. They had the ability to make a mistake, to course correct, and then to fix it.",
    "start": "227684",
    "end": "232924"
  },
  {
    "text": "To constantly ask themselves\nto pivot or persevere. And they had this ability because",
    "start": "232924",
    "end": "237991"
  },
  {
    "text": "they used agile processes. And they realized that they have the ability to go faster because",
    "start": "237991",
    "end": "243561"
  },
  {
    "text": "they worked on small batches. So, now we are in a good position. We understand what helps people go fast,",
    "start": "243561",
    "end": "249584"
  },
  {
    "text": "and what helps them rise\nthe ranks of the market. Speed is very important.",
    "start": "249585",
    "end": "254862"
  },
  {
    "text": "Even if you're making\nmore mistakes faster, you can fix them faster, right? It's not necessarily about being better. It's about making the same mistakes",
    "start": "254862",
    "end": "260829"
  },
  {
    "text": "as everybody else does and\nthen fixing them faster. Reducing the turn around time. And organizations understand this,",
    "start": "260830",
    "end": "266552"
  },
  {
    "text": "but the problem is that\na typical organization has a lot of places in the value chain where time is lost, when moving concepts",
    "start": "266553",
    "end": "272522"
  },
  {
    "text": "from concept to production. So, for example, if you\nhave a large organization,",
    "start": "272523",
    "end": "278477"
  },
  {
    "text": "you'll typically have queuing between product management, developers, you know, user experience people, testers,",
    "start": "278477",
    "end": "284353"
  },
  {
    "text": "administrators, et cetera. That queuing is a big problem, because you have to wait for people to handle the work.",
    "start": "284353",
    "end": "289783"
  },
  {
    "text": "The other problem is that you have large existing applications\nand it's very hard to move the Titanic, so to speak.",
    "start": "289783",
    "end": "295524"
  },
  {
    "text": "It takes a lot of people to make changes, to test it, to integrate\nit, to stabilize it. And then finally to deploy it. So, small batches of\nwork are what we need.",
    "start": "295524",
    "end": "302442"
  },
  {
    "text": "And we can use guidance\nfrom the good doctor. Sorry, the good Eric Evans,\nand his amazing tome,",
    "start": "302442",
    "end": "309146"
  },
  {
    "text": "\"Domain Driven Design.\" In which he talks about something called a bounded context. And the bounded context is a part",
    "start": "309146",
    "end": "314734"
  },
  {
    "text": "of the application that when extracted from the larger whole stands unto itself, internally consistent and reusable.",
    "start": "314734",
    "end": "320381"
  },
  {
    "text": "A bounded context is a crisp definition of part\nof the domain model. You get rid of the ambiguity between",
    "start": "320381",
    "end": "327438"
  },
  {
    "text": "this and some other parts of it. And you make it crisp and you extract it. If you can identify bounded contexts,",
    "start": "327438",
    "end": "332570"
  },
  {
    "text": "you have a candidate for\na small batch of work. A small batch of work on which a small group of people, who don't have to spend",
    "start": "332571",
    "end": "338725"
  },
  {
    "text": "a lot of time in meetings talking about what they're doing, they\ncan actually just do it. A small batch of work, for\na small group of people,",
    "start": "338726",
    "end": "344709"
  },
  {
    "text": "that can be evolved and deployed\nindependent of each other. A small, singly focused,\nindependently deployable,",
    "start": "344709",
    "end": "351798"
  },
  {
    "text": "internally consistent,\nreusable batch of work. This is a microservice. A microservice is a unit\nof organizational agility.",
    "start": "351798",
    "end": "359806"
  },
  {
    "text": "It happens to be the best architecture for scaling out horizontally. But, don't think you need to move",
    "start": "359806",
    "end": "365396"
  },
  {
    "text": "to this architecture for that. That is not the goal. If you move to microservices 'cause you're trying to scale, you're crazy.",
    "start": "365396",
    "end": "370591"
  },
  {
    "text": "You're not Google, you're not Netflix. Solve the real problem first. Solve your organizational bottlenecks.",
    "start": "370591",
    "end": "375712"
  },
  {
    "text": "And you can do that with microservices. Microservices are a hack on Conway's Law. Which says that software reflects",
    "start": "375712",
    "end": "382406"
  },
  {
    "text": "the organizational\nstructure that it serves. It mirrors it. So if your organization has a crappy organizational structure it\ncan have crappy software.",
    "start": "382406",
    "end": "388563"
  },
  {
    "text": "Fix that by building teams that you want to reflect in the software.",
    "start": "388563",
    "end": "393611"
  },
  {
    "text": "So when you move to this architecture, you have two problems. We've looked at Spring Boot. Spring Boot solves the first problem.",
    "start": "394760",
    "end": "400038"
  },
  {
    "text": "The first problem is how do I quickly stand up a new service, safely, consistently and usefully?",
    "start": "400038",
    "end": "406408"
  },
  {
    "text": "How do I do that, because I'm gonna have to do that a lot, right? If it sucks to stand up one service, one organization, one\napplication in your organization,",
    "start": "406408",
    "end": "411859"
  },
  {
    "text": "you're gonna be in complete hell when you move to microservices. That's the first problem\nyou have to solve.",
    "start": "411859",
    "end": "418907"
  },
  {
    "text": "Right, most organizations I've seen have this nightmarish wiki page. 500 easy steps to production.",
    "start": "418907",
    "end": "424655"
  },
  {
    "text": "That wiki page is the enemy of velocity. And you need to get past that. It has to be quick to\nstand up a new service.",
    "start": "424656",
    "end": "430164"
  },
  {
    "text": "Spring Boot makes it quick\nto stand up a new service, and do so with production\nreadiness in mind. To support security, and observability,",
    "start": "430165",
    "end": "437077"
  },
  {
    "text": "and consistency, and\nall these other things that you need for every service that don't directly contribute\nto the value chain. That's the first problem.",
    "start": "437077",
    "end": "443793"
  },
  {
    "text": "The second problem you're gonna have is now that you've got these independently deployed things, that\nimplies network partitions. That implies distribution.",
    "start": "443793",
    "end": "450987"
  },
  {
    "text": "You have now built a distributed system. And if there's anything upon which I'm sure we can all agree it's that",
    "start": "450987",
    "end": "456575"
  },
  {
    "text": "building distributed systems is hard. And so for that, today, we're gonna look at something called Spring Cloud.",
    "start": "456575",
    "end": "462701"
  },
  {
    "text": "How many of you have\nheard of Spring Cloud? Good stuff. How many of you have used it in anger? Which means, you know,\nin production, basically.",
    "start": "462701",
    "end": "469458"
  },
  {
    "text": "Okay. So, for the rest of you, this is gonna be a kitchen sink. If you have a phone or a computer,",
    "start": "469458",
    "end": "474980"
  },
  {
    "text": "I would close it. And then open your eyes. And we're gonna go pretty quickly, 'cause we don't have a lot of time.",
    "start": "474980",
    "end": "480834"
  },
  {
    "text": "So, remember my, this is\nmy second favorite place on the internet right here, start.spring.io.",
    "start": "480834",
    "end": "486950"
  },
  {
    "text": "My first favorite place on the internet is production. I love production. You should love production.",
    "start": "486950",
    "end": "492021"
  },
  {
    "text": "You should go as often as you can. The weather is great. It's the happiest place on earth. It's better than Disneyland.",
    "start": "492021",
    "end": "497037"
  },
  {
    "text": "I love production and you should too. But if you're not already in production, then begin your journey here at start.spring.io.",
    "start": "497037",
    "end": "503393"
  },
  {
    "text": "This is my second favorite place. So again, bookmark it. Keep it under your pillow. Keep it close to your heart.",
    "start": "504492",
    "end": "510255"
  },
  {
    "text": "If your children are\nhaving trouble sleeping, start",
    "start": "510256",
    "end": "515448"
  },
  {
    "text": ".spring .io.\n(laughter) If you find yourself suffering from indigestion and seek relief,",
    "start": "515449",
    "end": "522625"
  },
  {
    "text": "start .spring .io. And if you want for inspiration",
    "start": "522625",
    "end": "529345"
  },
  {
    "text": "in the early morning before\nyour cup of coffee or tea, start .spring",
    "start": "529345",
    "end": "534784"
  },
  {
    "text": ".io. We're gonna go ahead and\nbuild a very simple service. And I don't have all that much time to explain the service itself. So, we're gonna build this.",
    "start": "534784",
    "end": "540694"
  },
  {
    "text": "We're gonna call this\nthe Reservation Service. I'm gonna use Spring's web support. I'll use H2, which is an in memory, embedded SQL database.",
    "start": "540694",
    "end": "547299"
  },
  {
    "text": "It's in memory so it's gonna lose all of its state after each restart. Very much like Mongo DB, so there's that.",
    "start": "547299",
    "end": "552902"
  },
  {
    "text": "We're gonna use the Config Client, which is very useful for\ncentralized configuration.",
    "start": "552902",
    "end": "558558"
  },
  {
    "text": "We're gonna use Eureka for service registration and discovery. I'm gonna use JP, the\nJava Persistence API, because I make poor life decisions,",
    "start": "558558",
    "end": "565063"
  },
  {
    "text": "so JPA. I'm gonna bring in Actuator\nfor operational concerns. I'll bring in Zipkin\nfor distributed tracing, and RabbitMQ for stream processing.",
    "start": "565063",
    "end": "572718"
  },
  {
    "text": "And that I think will do it for now. Oh, we want Rest\nRepository support as well. Now, I could elect to go down here",
    "start": "572718",
    "end": "577836"
  },
  {
    "text": "and switch to the full version, whereupon I'll be given a veritable ocean of options,\ncheckboxes, that represent",
    "start": "577836",
    "end": "583436"
  },
  {
    "text": "all different types of\nworkloads and technologies. I could select any other option here.",
    "start": "583437",
    "end": "589048"
  },
  {
    "text": "But, we don't have enough time. Not nearly enough time. We also have some discretion about which language we'd like to use.",
    "start": "589048",
    "end": "594609"
  },
  {
    "text": "Any language on the JVM\nthat supports annotations and objects will work just fine. So, Scala, Groovy, Kotlin,\nand Java, of course.",
    "start": "594609",
    "end": "601392"
  },
  {
    "text": "Right, that's just fine. Here we have non-choices. And people get very confused about this. They don't know when and\nwhere to choose which.",
    "start": "601392",
    "end": "607746"
  },
  {
    "text": "So, I'm gonna do my level-headed best here and now to explain. Don't use these, ever.",
    "start": "607747",
    "end": "614521"
  },
  {
    "text": "(loud laughter) That's as simple as that. These are non-choices. These are choices in the same way that stripping naked and running\nin traffic is a choice.",
    "start": "614521",
    "end": "623326"
  },
  {
    "text": "You could. But, don't, just don't. And then here, we have\nthe choice of packaging.",
    "start": "623327",
    "end": "632787"
  },
  {
    "text": "If by some freak fluke of physics you find yourself stuck in the very, very, very, very distant past,",
    "start": "632787",
    "end": "639140"
  },
  {
    "text": "far, far beyond modern help, then choose .war.",
    "start": "639140",
    "end": "644972"
  },
  {
    "text": "But if you're here, with me, in 2016,",
    "start": "644972",
    "end": "648055"
  },
  {
    "text": "then choose .jar. This is a big part of my overarching, guiding personal philosophy,\nof make jar, not war. (laughter)\nAnd again.",
    "start": "650500",
    "end": "656407"
  },
  {
    "text": "You have options, you have choices. You should do what works for you, which in this case, corresponds to doing",
    "start": "656407",
    "end": "661620"
  },
  {
    "text": "what I said to do, so that's convenient. We're gonna go ahead and hit Generate, and that'll give us a new zip file.",
    "start": "661620",
    "end": "667148"
  },
  {
    "text": "I'm gonna open up the zip file in my IGE, and it doesn't really matter which IGE, so long as you have one. NetBeans, IntelliJ, and\nEclipse all work great.",
    "start": "667148",
    "end": "675104"
  },
  {
    "text": "Spring Boot Tools for NetBeans. Spring Boot Tools Suite for for Eclipse, of course,\nand then IntelliJ Ultimate,",
    "start": "675104",
    "end": "682315"
  },
  {
    "text": "have extra plugins, but\nthey're not necessary. You just need Java,\nand annotation support, and Maven support or Gradle support.",
    "start": "682315",
    "end": "688235"
  },
  {
    "text": "Now, what I'm gonna do is I'm gonna build a nonsensically\ntrivial domain model. Can you all see this in the back? Is that font big enough?",
    "start": "688236",
    "end": "694142"
  },
  {
    "text": "Should I make it a little bit less big? 'Cause it's almost too big for me.",
    "start": "694142",
    "end": "698858"
  },
  {
    "text": "I was giving the same\npresentation yesterday, and I was using my more bigger profile, but it's almost too more bigger. So, we're gonna say 222, okay.",
    "start": "700512",
    "end": "708042"
  },
  {
    "text": "There we go, is everybody okay with that? Fabu. So, I'm gonna say, I've got a domain model",
    "start": "708042",
    "end": "713251"
  },
  {
    "text": "of type reservation. I'm gonna give it a primary key, which I'll signal by using\nthe at ID annotation. at Generated Value.",
    "start": "713251",
    "end": "720244"
  },
  {
    "text": "Okay. And I'll say Private\nString Reservation Name. This is gonna be a jp field that'll be",
    "start": "720244",
    "end": "725925"
  },
  {
    "text": "mapped to a column called\nReservation_Name in the database. And I'll signal that\nthis is a jp annotation by using, entity rather, by using",
    "start": "725926",
    "end": "732089"
  },
  {
    "text": "the at Entity annotation. Now this, my friends, is the purest, most concise, most pristine, most clear expression of my domain model.",
    "start": "732090",
    "end": "738964"
  },
  {
    "text": "It's beautiful. Absolutely beautiful. But this is Java, so that\nwon't even be close to enough.",
    "start": "738965",
    "end": "745560"
  },
  {
    "text": "So we'll add this constructor. We'll add another constructor. This, just for jpa and jp alone, we'll add a two string method.",
    "start": "745560",
    "end": "752485"
  },
  {
    "text": "We'll add some gitters. And there we go. And what I wanna do is I wanna save records of that type to the database",
    "start": "752485",
    "end": "758592"
  },
  {
    "text": "and I could create a\nmanual repository object, again, turning to Eric Evans, and the amazing book,\n\"Domain Driven Design,\"",
    "start": "758592",
    "end": "764949"
  },
  {
    "text": "it's an object that is going to handle the underlying persistence,\nthe reading, the writing, etc. But that's not business\ndifferentiating functionality.",
    "start": "764949",
    "end": "771233"
  },
  {
    "text": "So instead, I'll defer to declarative interface based repositories\nfrom Spring data. I want to make this a Rest API.",
    "start": "771233",
    "end": "778554"
  },
  {
    "text": "So, I'll say at Rest Repository Resource. I'm gonna use Spring data there. And I wanna set up some sample data.",
    "start": "778554",
    "end": "784103"
  },
  {
    "text": "So, I'll say sample see LR implement Command Line Runner.",
    "start": "784103",
    "end": "790744"
  },
  {
    "text": "There we are and what I'm gonna do in this interface is just override the callback method called Void Run, and I'll tell Spring,\nwhenever it starts up,",
    "start": "790744",
    "end": "797920"
  },
  {
    "text": "to call this method, because\nit's got that interface. And I'm gonna use\ndependency injection here. I'm gonna tell Spring to provide",
    "start": "797921",
    "end": "803740"
  },
  {
    "text": "a reference to this repository. Which I'm gonna satisfy\nthrough the constructor. This is the correct way to do this, by the way, never, ever\nuse field injection.",
    "start": "803740",
    "end": "811329"
  },
  {
    "text": "Ever. Every single time you do that, a unit test dies. Don't do that.",
    "start": "811329",
    "end": "816409"
  },
  {
    "text": "Never. Not even when you're\nall by yourself at home, all alone and no one is looking. Ever. Okay.",
    "start": "816409",
    "end": "822203"
  },
  {
    "text": "So, goodbye to this. Now, I've got a simple record, and I'm gonna just insert some data.",
    "start": "822203",
    "end": "828082"
  },
  {
    "text": "So my name is Josh. It's lovely to meet you. My friend Joris, how you doing buddy?",
    "start": "828082",
    "end": "833154"
  },
  {
    "text": "Arjon, he's over there. Jorgen just left, of course.",
    "start": "833154",
    "end": "838230"
  },
  {
    "text": "Stephan, and Brian. That's six.",
    "start": "838230",
    "end": "843201"
  },
  {
    "text": "That's almost a good number. What's your name, buddy? (murmur) How do you spell it? (murmur)",
    "start": "844585",
    "end": "850194"
  },
  {
    "text": "Like this? (murmur) Okay. What about you boss? (murmur)",
    "start": "850194",
    "end": "855401"
  },
  {
    "text": "F-R-A-N-K? (murmur) Lovely to meet you. That's eight, that's a\nnice even, round number. I'll sleep fine tonight.",
    "start": "855401",
    "end": "860721"
  },
  {
    "text": "It's gonna be great. So, what I'm gonna do is I'm\ngonna pass in a consumer. This is a Java8ism, right? This is one of those new features",
    "start": "860721",
    "end": "866167"
  },
  {
    "text": "that only very modern languages have. Languages like C, COBOL,\nPHP, Ruby, Perl, Lisp,",
    "start": "866167",
    "end": "871727"
  },
  {
    "text": "Smalltalk, C++, Objective\nC, Visual Basic, Basic, Visual Basic.Net, Ruby Go, Lua, Haskell,",
    "start": "871728",
    "end": "879813"
  },
  {
    "text": "COBOL, right. So, as a Java champion, I've very happy to talk about something called a lambda,",
    "start": "881156",
    "end": "887018"
  },
  {
    "text": "which is new in Java 8 that\nwe introduced two years ago. And I'm gonna then visit every record. I'm gonna say for every record",
    "start": "887018",
    "end": "893115"
  },
  {
    "text": "let's call the Print Line Method and we're gonna print it out. Now, what that's going to do is it's going to spin up and it's going to write all the records to the database,",
    "start": "893115",
    "end": "899211"
  },
  {
    "text": "and then we'll see those records reflected in the output\non the Command Line.",
    "start": "899211",
    "end": "905023"
  },
  {
    "text": "Okay. I've go, just all sorts\nof stuff in my class path, so let's see how this goes.",
    "start": "905023",
    "end": "910568"
  },
  {
    "text": "I'm not even sure if I should\nhave deleted some of it. Okay. Good, there it is.",
    "start": "910568",
    "end": "916226"
  },
  {
    "text": "It worked. Of course it worked, it was a demo. What were you expecting? It was always going to work.",
    "start": "916226",
    "end": "922037"
  },
  {
    "text": "Instead what I really wanted\nto talk about was this. This is something that's\nnear and dear to my heart, and it's basically why I'm here.",
    "start": "922037",
    "end": "928472"
  },
  {
    "text": "This is a big problem. What the hell? Why is this here? See,",
    "start": "928472",
    "end": "934060"
  },
  {
    "text": "what I really wanted\nto talk about was this. This is the Spring Boot ASCII artwork,",
    "start": "934904",
    "end": "941516"
  },
  {
    "text": "and this ASCII artwork took\na long time to get right. We on the Spring team have several PhDs, doctors, people who\nworked in nuclear physics,",
    "start": "941516",
    "end": "948257"
  },
  {
    "text": "who worked very hard to\nmake this work for you. And so I consider this particular feature a very serious deficiency\nin the JetBrains product.",
    "start": "948257",
    "end": "955069"
  },
  {
    "text": "What the hell? Why is that there? So, I did what all people do when confronted with challenge\nand struggle on the internet.",
    "start": "955069",
    "end": "962569"
  },
  {
    "text": "I went on the internet and I cried. And I was greeted by a message of hope from my friend Yann Cebron, who's a software developer by passion",
    "start": "962569",
    "end": "968887"
  },
  {
    "text": "at IntelliJ JetBrains. And he responded with this message, which I share with you here, now.",
    "start": "968887",
    "end": "974395"
  },
  {
    "text": "(loud laughter) Don't worry my friends.",
    "start": "976235",
    "end": "981878"
  },
  {
    "text": "We're gonna make IntelliJ great again. Anyway. So we've got a now, a Rest API. We can visit the Rest API by going to",
    "start": "981878",
    "end": "987003"
  },
  {
    "text": "Reservations and we can see here that I've got a collection of resources. This blue box, I'm not\nsure if you can see it",
    "start": "987003",
    "end": "992909"
  },
  {
    "text": "in this tiny little screen there. But, that blue box is a resources. It's an envelope object with a payload and a collection of\nlinks about the payload.",
    "start": "992909",
    "end": "999173"
  },
  {
    "text": "It's hyper media. It's built on Spring HATEOS. Hyper media as the engine\nof application state. Which is a design pattern.",
    "start": "999173",
    "end": "1006907"
  },
  {
    "text": "Now, if you followed\nany of the earlier talks about Spring Boot then you know you can change all manner\nof different things.",
    "start": "1006907",
    "end": "1012141"
  },
  {
    "text": "For example, by going to\napplication.properties and changing, for example, the port. But, this is gonna betray some of",
    "start": "1012141",
    "end": "1017743"
  },
  {
    "text": "the things that we want in\na continuous delivery style, or agile style environment. I wanna be able to move my build",
    "start": "1017743",
    "end": "1023164"
  },
  {
    "text": "from one environment to another without having to recompile it. So, while I could change things in application.properties,\nand override them,",
    "start": "1023164",
    "end": "1029836"
  },
  {
    "text": "I would have to recompile\neach time if I did that. I can instead defer to Spring's good support for 12 factor\nstyle configuration here.",
    "start": "1029837",
    "end": "1038838"
  },
  {
    "text": "Right, so if I go here to my build, where my code is, like this. And I do Maven Clean Install.",
    "start": "1038838",
    "end": "1045321"
  },
  {
    "text": "Oh, nos, thank you. And then Maven minus D\nSkip Test, 'cause YOLO. Okay.",
    "start": "1046226",
    "end": "1051779"
  },
  {
    "text": "And CD Target, there we are. You can see I've got a so called Fat Jar that contains everything I\nneed to run the application.",
    "start": "1055402",
    "end": "1060582"
  },
  {
    "text": "And I can say Java minus D Server dot Port equals 8010 minus Jar\nreservation service at Jar",
    "start": "1060582",
    "end": "1065841"
  },
  {
    "text": "that'll spit out the\napplication on port 8010 instead of the default 8080.",
    "start": "1065841",
    "end": "1070174"
  },
  {
    "text": "Where is the. Oh, there it is. So, there's 8010, right? I can also use environment variables.",
    "start": "1071472",
    "end": "1077205"
  },
  {
    "text": "So, I can say export\nSERVER_PORT equals 8030, and then just do Java minus jar",
    "start": "1077206",
    "end": "1083243"
  },
  {
    "text": "reservation service at jar. And we'll see that spin up on port 8030 instead.",
    "start": "1083243",
    "end": "1087349"
  },
  {
    "text": "There we are. Right. Oh, come back. Son of a gun.",
    "start": "1089705",
    "end": "1093760"
  },
  {
    "text": "Nein, I've lost it. I blame you, Joris. There we are.",
    "start": "1095242",
    "end": "1100668"
  },
  {
    "text": "8030, okay. So, that works. And this is certainly very powerful, but it's not enough.",
    "start": "1100668",
    "end": "1106236"
  },
  {
    "text": "There's several use cases for which this isn't sufficient. Suppose I want to change the configuration while the service is running.",
    "start": "1106236",
    "end": "1111426"
  },
  {
    "text": "Suppose I want to support sensitive passwords and encrypted information on the file system, how do I support that?",
    "start": "1111426",
    "end": "1117162"
  },
  {
    "text": "Suppose I want to centralize\nall this information, instead of copying and pasting a configuration from one startup script",
    "start": "1117162",
    "end": "1122879"
  },
  {
    "text": "or manifest or Docker file,\nor whatever to another? Then suppose I wanna change things while the service is running live.",
    "start": "1122879",
    "end": "1129508"
  },
  {
    "text": "For all of these use cases and more, while this is a good basis,\nit's not nearly enough. And we need to do a little bit better.",
    "start": "1129509",
    "end": "1134958"
  },
  {
    "text": "So what I'm gonna do is I'm gonna build a Spring Cloud Config Server. Now the Configs are, oh yeah.",
    "start": "1134958",
    "end": "1140857"
  },
  {
    "text": "(loud laughter) Oh yeah. Good stuff.",
    "start": "1140857",
    "end": "1145362"
  },
  {
    "text": "The Config Server. The Config Server is an API that we're gonna stand up",
    "start": "1146268",
    "end": "1151755"
  },
  {
    "text": "that knows how to manage a\ndirectory full of configuration. And that directory is\ngonna be based on Git. And I'm gonna clone it from\nmy GitHub repository here.",
    "start": "1151755",
    "end": "1158053"
  },
  {
    "text": "Now, this is one approach. You can also use Zookeeper or Consul to centralize your configuration.",
    "start": "1158053",
    "end": "1164058"
  },
  {
    "text": "And again, I would refer you to my good friend Joris's talk later on. But, we have a Config Server.",
    "start": "1164058",
    "end": "1169364"
  },
  {
    "text": "So I'm gonna move this directory here to just, you know, Config. It's on my directory,\nit's on my home directory",
    "start": "1169364",
    "end": "1174950"
  },
  {
    "text": "in my Desktop. And I've now created this new module called the Config Server,\nso I'm gonna open this up. And I'm gonna configure\nit to be a Config Server.",
    "start": "1174950",
    "end": "1182171"
  },
  {
    "text": "It's going to manage our\ndirectory full of configuration on behalf of the microservices.",
    "start": "1182171",
    "end": "1187174"
  },
  {
    "text": "So, Config Service at\nEnable Config Server. I'm gonna go here to the Property File and we're gonna say Spring Cloud.",
    "start": "1188240",
    "end": "1195997"
  },
  {
    "text": "Cloud Config Server Git URI equals, and I'm gonna say Home",
    "start": "1195997",
    "end": "1201086"
  },
  {
    "text": "Desktop Config. And I'm also gonna point my application to port 8888.",
    "start": "1201086",
    "end": "1205693"
  },
  {
    "text": "Okay. And I'll spin that up. Now, suppose I am a microservice. What I want to do is I want to have my microservices call the Config Server",
    "start": "1207089",
    "end": "1213252"
  },
  {
    "text": "on port 8888. Then they're gonna ask for\ntheir sets of configuration. So instead of having\nto keep all that stuff",
    "start": "1213252",
    "end": "1218888"
  },
  {
    "text": "in property files in each application, I have just one service\nand it has one directory. So what if I am a microservice?",
    "start": "1218888",
    "end": "1224857"
  },
  {
    "text": "I'm gonna name myself\nthe Reservation Service. Reservation-Service. What configuration would I see?",
    "start": "1224857",
    "end": "1231427"
  },
  {
    "text": "I would see this. 8888 reservation-service default. Okay.",
    "start": "1231427",
    "end": "1236599"
  },
  {
    "text": "Default is the profile. This is the property,\nyou know, service name, and I'll see two property sources. One from application.",
    "start": "1236599",
    "end": "1242631"
  },
  {
    "text": "Sorry, one from application.properties, and another one from\nreservation service.properties. There are keys and values in\neach of these property files.",
    "start": "1242631",
    "end": "1248533"
  },
  {
    "text": "If there's a conflict like here, server port and server port. Then the more specific file overrides",
    "start": "1248534",
    "end": "1255038"
  },
  {
    "text": "the default fall back file. So, every microservice will see the values in application.properties.",
    "start": "1255038",
    "end": "1260721"
  },
  {
    "text": "Only the microservice\ncalled reservation-service will see the values in\nreservation-service.properties.",
    "start": "1260721",
    "end": "1265747"
  },
  {
    "text": "I also have a message here. So, let's go back to our little Rest API, with reservations and change it to",
    "start": "1265747",
    "end": "1271185"
  },
  {
    "text": "be called the Reservation Service and to get its configuration from the Config Server. So, here we are.",
    "start": "1271185",
    "end": "1277457"
  },
  {
    "text": "We're gonna change a few things. We're gonna say Spring Cloud Config URI equals http local host",
    "start": "1277457",
    "end": "1283553"
  },
  {
    "text": "8888. Now it turns out that the default value for this is actually\nexactly what I just put in.",
    "start": "1284727",
    "end": "1290261"
  },
  {
    "text": "I just want you to see how it's done. So, the other thing you need to do is give it a name. You have to tell it, you know,",
    "start": "1290261",
    "end": "1296412"
  },
  {
    "text": "how to identify itself when it calls the Config Server. Now, these two values are understandably and necessarily reused\nby the Config Server",
    "start": "1296412",
    "end": "1302731"
  },
  {
    "text": "before it loads the configuration\nfor everything else. It's used in the Bootstrap phase. So you have to rename this file",
    "start": "1302731",
    "end": "1308805"
  },
  {
    "text": "to Bootstrap.properties\nso that Spring Cloud can find it, so here's\nBootstrap.properties.",
    "start": "1308806",
    "end": "1315009"
  },
  {
    "text": "And we're gonna finally, go ahead and use a, that message that we had just created. That simple Hello World message,",
    "start": "1315009",
    "end": "1320925"
  },
  {
    "text": "we're gonna add and endpoint here. We'll say Rest Controller Class Message Rest Controller. And we'll say, Private\nFinal String Message.",
    "start": "1320926",
    "end": "1329211"
  },
  {
    "text": "And I'll create a constructor and I'll at auto-wire my value here from the Config Server. Okay.",
    "start": "1330387",
    "end": "1335244"
  },
  {
    "text": "Message. And I'll say I want to create an endpoint that simply returns that value whenever asked, so I'll say msg",
    "start": "1336596",
    "end": "1343996"
  },
  {
    "text": "string read and I'll return the collection, this dot message, there we are.",
    "start": "1345057",
    "end": "1350852"
  },
  {
    "text": "So now, we want this\nvalue to be available, and it will, now that we've\nconnected to the Config Server. I also wanna be able to change the value",
    "start": "1350853",
    "end": "1357019"
  },
  {
    "text": "live, when the service is running. So, I'll make the bean refreshable. Now to confirm that everything is working as expected we should be able to",
    "start": "1357019",
    "end": "1363491"
  },
  {
    "text": "go to port 8000, not 8080, but 8000, that's the new port on which\nwe launched the service.",
    "start": "1363491",
    "end": "1369443"
  },
  {
    "text": "And we should see the result post haste. Come on computer. Time is a wasting. There we are.",
    "start": "1369443",
    "end": "1375142"
  },
  {
    "text": "So that worked. Hurray! What about the message? There's our message, or not. No, I did msg, didn't I.",
    "start": "1375142",
    "end": "1380736"
  },
  {
    "text": "There we are. There's our message. It works but it's not great. We can do a better job. So, let's revisit this directory full of",
    "start": "1380736",
    "end": "1386997"
  },
  {
    "text": "configuration on the Config, in the file system here. And remember it's using Git. That's very important.",
    "start": "1386997",
    "end": "1393554"
  },
  {
    "text": "I'm using Git to manage this. Or some version. But it's gotta be some sort of, you know, thing that supports\nauditing and journaling.",
    "start": "1393554",
    "end": "1400395"
  },
  {
    "text": "So, I'll say, Hello Amsterdam! Extra exclamation marks for Reddit. Okay.",
    "start": "1400395",
    "end": "1406714"
  },
  {
    "text": "Git commit minus a minus m YOLO. Now, if I go to the Config Server, it sees the value immediately.",
    "start": "1406714",
    "end": "1414154"
  },
  {
    "text": "But, this has no idea. And I can change it a few different ways. I can use the Spring Cloud Event Bus,",
    "start": "1414154",
    "end": "1419198"
  },
  {
    "text": "or I can trigger an actuator endpoint, which is an endpoint that\nis setup by Spring Boot",
    "start": "1419198",
    "end": "1424229"
  },
  {
    "text": "for you to operate or get observability about the application. So, I'm gonna go ahead and hit.",
    "start": "1424229",
    "end": "1430155"
  },
  {
    "text": "Empty minus. I'm gonna send an empty post. Then refresh and I can\nsee the value immediately. This supports things like feature flags.",
    "start": "1430155",
    "end": "1435734"
  },
  {
    "text": "Or this helps me decouple\nthe release of software from the launch of that software, from the deployment of that software.",
    "start": "1435734",
    "end": "1440858"
  },
  {
    "text": "This helps me support\nbranch by abstraction, and continues the delivery pipelines. There's a lot power here. The Config Server, because it's between",
    "start": "1440858",
    "end": "1447089"
  },
  {
    "text": "my configuration directory\nand my microservices, can also do symmetric\nencryption and decryption",
    "start": "1447089",
    "end": "1452093"
  },
  {
    "text": "of values in the property files. So, there's a lot of power,\nbut we have to move on. The next thing we're gonna look at is service registration and discovery.",
    "start": "1452093",
    "end": "1458515"
  },
  {
    "text": "The thing that we care about now is for the ability of services\nto talk to each other without knowing about each host and port.",
    "start": "1458515",
    "end": "1464600"
  },
  {
    "text": "And there's a lot of good reasons why you'd want to do this and at first blush, at first look, this may seem\nlike a use case for DNS.",
    "start": "1464600",
    "end": "1470868"
  },
  {
    "text": "But it's actually a poor fit inside of a cloud based environment. First of all, DNS adds latency. You have to resolve the DNS entry,",
    "start": "1470868",
    "end": "1477280"
  },
  {
    "text": "and then hop back in. If you're in a cloud environment, it usually involves a\nhop outside of the router and then back in, which is even worse.",
    "start": "1477280",
    "end": "1483008"
  },
  {
    "text": "Then third of all, DNS is\nby definition routable. Sometimes I don't want my\nservices to be routable. I want to be able to talk to them,",
    "start": "1483009",
    "end": "1489144"
  },
  {
    "text": "but not expose them via\nsome sort of DNS entry. I can do the multi-home thing, where I have private DNS versus public,",
    "start": "1489144",
    "end": "1495007"
  },
  {
    "text": "but that gets very confusing. The other problem is that I want to be able to handle load balancing. Custom load balancing.",
    "start": "1495007",
    "end": "1500543"
  },
  {
    "text": "Your average F5 router for example, will have a checkbox that says do round robin load balancing. But, what about more specific business",
    "start": "1500543",
    "end": "1507250"
  },
  {
    "text": "case semantics specific use cases like, if I have a need to do sharding, or I want to route a client to",
    "start": "1507250",
    "end": "1512792"
  },
  {
    "text": "a specific node, or if\nI have multi-tenancy, or if I wanted to do an OAuth client and I wanted to lock\nit to a specific node,",
    "start": "1512792",
    "end": "1518645"
  },
  {
    "text": "or something stateful is happening. Some load balancers have\na dumb notion of stateful,",
    "start": "1518645",
    "end": "1524102"
  },
  {
    "text": "or a session affinity, or sticky sessions. But that doesn't apply\nto non-standard things like a OAuth token for example.",
    "start": "1524102",
    "end": "1530295"
  },
  {
    "text": "So, how do you support\nall of these use cases? We don't want to use DNS in your average big, dumb load balancer.",
    "start": "1530296",
    "end": "1535525"
  },
  {
    "text": "Instead, let's use something called a service registry. A service registry is like\na phone book for the cloud.",
    "start": "1535525",
    "end": "1540617"
  },
  {
    "text": "It's a logical mapping from a Service ID to host and ports. And there are many\ndifferent implementations,",
    "start": "1540617",
    "end": "1545651"
  },
  {
    "text": "and again, you can talk to my friend Joris a little bit later for his talk. But, there are many different\nimplementations out there. Apache Zookeeper, HashiCorp\nConsul, etcd, Cloud Foundry.",
    "start": "1545651",
    "end": "1553611"
  },
  {
    "text": "We have abstractions,\nwe have an abstraction that has implementations for all of them. But, I'm gonna use Eureka, because it was",
    "start": "1553611",
    "end": "1559132"
  },
  {
    "text": "developed by Netflix, it's\nvery, very, very proven. It's been used at scale for years. And it's dead simple to setup,",
    "start": "1559132",
    "end": "1564852"
  },
  {
    "text": "and I'm very, very lazy. Very lazy. I mean, you would not believe. So, I'm gonna say, Config Client,",
    "start": "1564852",
    "end": "1571422"
  },
  {
    "text": "Eureka Service. I'm gonna build my own\nEureka Registry here. And we're gonna do the\nsame thing as before. We're gonna tell Eureka\nwhere to find the Config.",
    "start": "1571422",
    "end": "1579190"
  },
  {
    "text": "So, Spring Cloud Config URI equals http local host 8888. And we're gonna give it a name,",
    "start": "1579191",
    "end": "1585187"
  },
  {
    "text": "so we're gonna say Spring Application Name equals Eureka Service. And we're gonna rename this property file",
    "start": "1585187",
    "end": "1590334"
  },
  {
    "text": "to be Bootstrap.properties as before. And then we're gonna open up\nEureka Service Application and we're gonna say\nabracadabra, you're a Eureka.",
    "start": "1590334",
    "end": "1596851"
  },
  {
    "text": "And that'll spin up, if\neverything goes to plan, on port 8761. Now we don't know. This could all go south in a minute.",
    "start": "1596851",
    "end": "1604964"
  },
  {
    "text": "Oh, son of a gun. Why? Oh, good, okay, so. First thing you need to know is,",
    "start": "1604964",
    "end": "1610112"
  },
  {
    "text": "is that we have good\nquality animated GIFs. (loud laughter) Very, very well done. Now, the other thing you need to notice is",
    "start": "1610112",
    "end": "1616457"
  },
  {
    "text": "that we don't have any\napplications registered yet. So, let's go back to our\nReservations Service, and teach it how to raise its hand. How to say, listen, if anybody needs me,",
    "start": "1616457",
    "end": "1623199"
  },
  {
    "text": "I'm right here, this is\nmy host, this is my port. On the client, in the build, we have Spring Cloud Starter Eureka.",
    "start": "1623199",
    "end": "1630005"
  },
  {
    "text": "Somewhere. Ba, ba, ba, baaa. Don't we?",
    "start": "1631293",
    "end": "1636600"
  },
  {
    "text": "(sigh) There it is. That's the discovery client abstraction implementation for Spring Cloud.",
    "start": "1639642",
    "end": "1645697"
  },
  {
    "text": "So, all I need to do is\nto enable that abstraction by saying at enable. Or at enable discovery client, and then I'll restart.",
    "start": "1645697",
    "end": "1651722"
  },
  {
    "text": "And that's going to raise its hand, and call home to the registry and say, listen if anybody needs me, find me here.",
    "start": "1651722",
    "end": "1657086"
  },
  {
    "text": "If you have 10 instances,\nthey're all gonna call the registry. Now, what we're gonna do is we're gonna build a client to use the service.",
    "start": "1657086",
    "end": "1662650"
  },
  {
    "text": "A Edge Service, okay. Or an Edge client. So we're gonna call this\nthe Reservation Client. We're gonna use the Config Server.",
    "start": "1662650",
    "end": "1668607"
  },
  {
    "text": "We'll use Eureka Service\nRegistration and Discovery. We'll use Zipkin for distributed tracing. We'll use RabbitMQ for stream processing.",
    "start": "1668608",
    "end": "1674158"
  },
  {
    "text": "We're gonna use Zuul for micro proxies. We're gonna use Hystrix\nfor circuit breakers. We're gonna use Rest Repository Support,",
    "start": "1674158",
    "end": "1680513"
  },
  {
    "text": "Web Support, Actuator Support. And then we're gonna go\nahead and hit Generate. Okay.",
    "start": "1680514",
    "end": "1685535"
  },
  {
    "text": "Now, this is the same as before. I'm gonna open it up. I'm gonna configure it and point it to my application., my\nConfig Server rather.",
    "start": "1685535",
    "end": "1691132"
  },
  {
    "text": "So there's this. So Spring Cloud Config URI equals http local host 8888.",
    "start": "1691132",
    "end": "1697518"
  },
  {
    "text": "Spring.Application Name equals Reservation-Client. And we're gonna rename this property file",
    "start": "1697518",
    "end": "1703349"
  },
  {
    "text": "to be Bootstrap.properties. We'll open up the code and at enable a discovery client\nabstraction implementation.",
    "start": "1703349",
    "end": "1709305"
  },
  {
    "text": "Now, think about what we're gonna do here. An Edge Service is a logical component. It lives at the edge of the architecture.",
    "start": "1709305",
    "end": "1714909"
  },
  {
    "text": "Responding to requests from outside. From your HTML5 devices,\nfrom your iPhones,",
    "start": "1714909",
    "end": "1720475"
  },
  {
    "text": "you Androids, your\nPlayStations, your Rokus, your Xboxes, your Teslas,\nand the internet of things. It could be your microwave, right?",
    "start": "1720475",
    "end": "1727424"
  },
  {
    "text": "Anything these days has an IP. So, each of these clients have specific payload, protocol,\nand security concerns.",
    "start": "1727425",
    "end": "1733215"
  },
  {
    "text": "And if you have to change\nevery single microservice to accommodate all of these new clients, you're gonna be redeploying stuff",
    "start": "1733215",
    "end": "1739627"
  },
  {
    "text": "all year long. It's insane, so don't bother. Centralize those concerns at the Edge,",
    "start": "1739627",
    "end": "1745158"
  },
  {
    "text": "the Edge Service is going\nto be exposed via DNS, but then when the Edge Service\nlooks for other services in the architecture, in the cluster,",
    "start": "1745158",
    "end": "1751705"
  },
  {
    "text": "it's going to use service\nregistration and discovery. Your iPhone isn't gonna\nuse Eureka, for example, right, it'll use a DNS endpoint.",
    "start": "1751705",
    "end": "1758470"
  },
  {
    "text": "But, then from there it'll be using services registration and discovery. So what we wanna do, for example, is to build an Edge Service that handles",
    "start": "1758470",
    "end": "1764967"
  },
  {
    "text": "client specific concerns. You may have an HTML5 Edge Service, and iPhone Edge Service, an\nAndroid Edge Service, etc.",
    "start": "1764967",
    "end": "1770664"
  },
  {
    "text": "Think about HTML5. HTML5 is ridiculously powerful today. An HTML5 browser can do all\nsorts of interesting things.",
    "start": "1770664",
    "end": "1777880"
  },
  {
    "text": "I think this guy is actually from here, maybe. Have you seen JS Linux?",
    "start": "1777880",
    "end": "1782889"
  },
  {
    "text": "This is insane. So this is, yeah. That is actually a browser",
    "start": "1782889",
    "end": "1788935"
  },
  {
    "text": "completely in memory booting Linux. So don't tell me you need to build",
    "start": "1788935",
    "end": "1794653"
  },
  {
    "text": "a native desktop application\nfor Windows anymore. It's just ridiculous. We just booted Linux\nentirely in JavaScript.",
    "start": "1794653",
    "end": "1800026"
  },
  {
    "text": "The point is, you can do a lot of stuff in the browser today that\nyou wouldn't think possible. So you don't really need to hold its hand",
    "start": "1800026",
    "end": "1806656"
  },
  {
    "text": "and babysit it for computational stuff. But, you do have to understand that it lives in a sandbox.",
    "start": "1806656",
    "end": "1812521"
  },
  {
    "text": "It cannot make requests outside of that same host and port. You can add a policy to every microservice but then you'd be changing\nevery microservice",
    "start": "1812521",
    "end": "1819182"
  },
  {
    "text": "to accommodate the new client. We wanna avoid that. One way to avoid that is to proxy all of my services that\nare registered in Eureka",
    "start": "1819182",
    "end": "1825391"
  },
  {
    "text": "through a single host and port. And we can do this using the micro-proxy. A micro-proxy is a design pattern that",
    "start": "1825391",
    "end": "1831859"
  },
  {
    "text": "blindly proxies things back and forth. And we're gonna use something called Zuul. Now, Zuul is a micro-proxy from Netflix.",
    "start": "1831859",
    "end": "1838253"
  },
  {
    "text": "I'm not sure if you keep abreast of your Greek and Ghostbusters mythology, but this is Zuul.",
    "start": "1838253",
    "end": "1843966"
  },
  {
    "text": "Now, Zuul is the gatekeeper to the underworld, to Hades, to Hell,",
    "start": "1843966",
    "end": "1849268"
  },
  {
    "text": "or at least that's what I thought. But then my friend said, you know Josh, that's not fair, we don't know that. In the movie they don't say that.",
    "start": "1849269",
    "end": "1855091"
  },
  {
    "text": "He might come from a very nice place. He might come from Hawaii. We can't judge. So, you know what, he's right.",
    "start": "1855091",
    "end": "1861069"
  },
  {
    "text": "I'm sorry. That's what I thought it\nwas, you know, I don't know. Anyway, he's the proxy to wherever. To Hawaii, okay.",
    "start": "1861069",
    "end": "1866558"
  },
  {
    "text": "And now Spring Cloud and Zuul have already set up an Edge Service for me",
    "start": "1868495",
    "end": "1874080"
  },
  {
    "text": "at reservation, you know, 9999/reservation-service/reservations. So, this is the Edge Service port.",
    "start": "1874081",
    "end": "1881268"
  },
  {
    "text": "This is the Service ID in Eureka. And that's the actual path. Remember I actually\nhave a real service here",
    "start": "1881268",
    "end": "1889456"
  },
  {
    "text": "on port 8000. So, real service, Edge Service. Real service, Edge Service. Real service, Edge Service, real service.",
    "start": "1889456",
    "end": "1895186"
  },
  {
    "text": "It's a proxy, my friends. It's proxying it. You can see that the proxy sends a header to the downstream service.",
    "start": "1895186",
    "end": "1901213"
  },
  {
    "text": "The downstream service uses that header to rewrite these URLs so that from the perspective of the client,",
    "start": "1901213",
    "end": "1907010"
  },
  {
    "text": "it doesn't know that that JSON didn't come from that node, right. This is very, very\npowerful so maybe I'm done. All of my services that are in Eureka,",
    "start": "1907010",
    "end": "1914585"
  },
  {
    "text": "I can access them by using them as the, the Service ID\nas the context path. Then I'm done.",
    "start": "1914585",
    "end": "1920286"
  },
  {
    "text": "Maybe. For my HTML5 developers,\nassuming all of my services are homogeneous rest in\nJSON, maybe I can go home.",
    "start": "1920286",
    "end": "1926754"
  },
  {
    "text": "(clap) I should probably add https, or actually certainly add https. I should probably add http basic, or OAuth",
    "start": "1926754",
    "end": "1933784"
  },
  {
    "text": "kind of authentication. But, maybe I'm done otherwise, right. Maybe I've done everything I need to empower them to be done.",
    "start": "1933785",
    "end": "1939396"
  },
  {
    "text": "Sometimes however, its' useful to have a subset of the data,\nor a view of the data, or a transformed, you know, endpoint",
    "start": "1939396",
    "end": "1945780"
  },
  {
    "text": "that has a composition of other services. This is a different type of Edge Service called an API Gateway.",
    "start": "1945780",
    "end": "1951617"
  },
  {
    "text": "And micro-proxy is a dumb\nproxy back and forth. It's an Edge Service. And API Gateway does\nsome sort of translation",
    "start": "1951617",
    "end": "1957930"
  },
  {
    "text": "or transformation of the\nrequest or the reply or both. They're both Edge Services. So we're gonna build a\nvery simple API Gateway",
    "start": "1957930",
    "end": "1964223"
  },
  {
    "text": "that simply takes the\ndownstream reservation service and gets only the names.",
    "start": "1964223",
    "end": "1969551"
  },
  {
    "text": "We're gonna strip away the strata of all the surrounding JSON. We want just the names. Now, in order to understand\nhow this is going to work,",
    "start": "1969551",
    "end": "1974907"
  },
  {
    "text": "we need to first think\nabout how this worked. How come it's able to route that request? How does it know?",
    "start": "1974907",
    "end": "1980640"
  },
  {
    "text": "It's making the request by going to Eureka and it's using that Service ID and Eureka",
    "start": "1980640",
    "end": "1986406"
  },
  {
    "text": "is saying I've got, you know,\n10 instances of that service. How does it pick which instance?",
    "start": "1986406",
    "end": "1991571"
  },
  {
    "text": "It's making this decision on the client using something called Netflix Ribbon. Ribbon is a client side load balancer.",
    "start": "1992464",
    "end": "1999355"
  },
  {
    "text": "Right. So we've got that already in play. Ribbon gives you the ability to, by plugging in an object, do different",
    "start": "1999355",
    "end": "2005125"
  },
  {
    "text": "kinds of load balancing. You can do round robin,\nwhich is the default, or sticky, or data center\naware load balancing, or sharding aware load balancing,",
    "start": "2005125",
    "end": "2011508"
  },
  {
    "text": "or whatever you want, right. So we're gonna build a very\nsimple Edge Service here. We're gonna say class Reservation",
    "start": "2011509",
    "end": "2017331"
  },
  {
    "text": "API Gateway Rest Controller and that's you know,\nvery succinct, I know.",
    "start": "2018543",
    "end": "2025338"
  },
  {
    "text": "And I'm gonna root this\nendpoint at Reservations. I'm gonna make it a Rest Controller. And I'm going to take advantage and create",
    "start": "2025338",
    "end": "2031020"
  },
  {
    "text": "an endpoint here that just\nreturns the string names. Okay. Just the names. So whenever somebody goes to local host",
    "start": "2031020",
    "end": "2036938"
  },
  {
    "text": "9999/reservations/names this endpoint's gonna be called,",
    "start": "2036938",
    "end": "2041968"
  },
  {
    "text": "and I'm gonna use a Rest Template from Spring Framework to make this call as quickly\nand concisely as possible.",
    "start": "2041968",
    "end": "2047471"
  },
  {
    "text": "But the problem is my Rest Template doesn't\nknow about Eureka yet. I need to make it aware.",
    "start": "2047471",
    "end": "2053766"
  },
  {
    "text": "So, I'm gonna configure a Eureka aware, load balanced, and ribbon\naware Rest Template here.",
    "start": "2053767",
    "end": "2060346"
  },
  {
    "text": "Okay. Return new Rest Template. And I'll then make sure that I qualify\nthat injected version here",
    "start": "2060346",
    "end": "2066351"
  },
  {
    "text": "with a qualifier annotation. And I'm gonna say call the Rest Template Exchange Method,",
    "start": "2066352",
    "end": "2073217"
  },
  {
    "text": "call the Reservation-Service,\nit doesn't matter which one. Remember this is not DNS, that's gonna be",
    "start": "2073217",
    "end": "2078636"
  },
  {
    "text": "intercepted by the load balancer. It's going to find an instance and it's gonna pick it and then substitute it",
    "start": "2078636",
    "end": "2084773"
  },
  {
    "text": "for this string. I'm gonna say make an http get call. No body. And then I'm gonna say I want the data to be returned as a collection of",
    "start": "2084774",
    "end": "2091811"
  },
  {
    "text": "spring HATEOS resource objects whose payload is of type reservation.",
    "start": "2091811",
    "end": "2097841"
  },
  {
    "text": "All right, so I'm using\nthe type token hack, sorry, design pattern\nhere, to do this work.",
    "start": "2097841",
    "end": "2103475"
  },
  {
    "text": "The type token hack gets\naround the fact that Java doesn't have good\ngeneric types system.",
    "start": "2103475",
    "end": "2110217"
  },
  {
    "text": "So, here's my getter. I'm making the request. And now, when the Rest Template returns,",
    "start": "2110217",
    "end": "2117406"
  },
  {
    "text": "the Rest Template will return a envelope object called\na Response Entity.",
    "start": "2118446",
    "end": "2123516"
  },
  {
    "text": "And the Response Entity has a payload of type Resources of Reservation. So I'm gonna say, Response\nEntity.get Body.get Content",
    "start": "2123516",
    "end": "2131341"
  },
  {
    "text": ".stream.map, and I'm gonna map from Reservation to Reservation Name and I'm gonna collect it all in a list.",
    "start": "2132510",
    "end": "2138609"
  },
  {
    "text": "So there, my friends, is a\nvery, very simple Edge Service. It's two lines. Two, admittedly, terrifyingly crazy lines.",
    "start": "2138610",
    "end": "2144474"
  },
  {
    "text": "But still, just two lines, all right. And those lines are going\nto do what we expect. They're going to take the data",
    "start": "2144475",
    "end": "2150694"
  },
  {
    "text": "and turn them into a\ncollection of resources whose payload is of type reservation and then de-reference\nthe reservation name,",
    "start": "2150694",
    "end": "2156395"
  },
  {
    "text": "and collect all that in a string. So we can see that here. Local host 9999",
    "start": "2156395",
    "end": "2160405"
  },
  {
    "text": "/reservations/names. And that's working just fine. But, what happens in\nthe case of a failure? I need to degrade gracefully.",
    "start": "2161594",
    "end": "2167875"
  },
  {
    "text": "High performing organizations understand that failure is a fact of life. It's an inevitability.",
    "start": "2167875",
    "end": "2172880"
  },
  {
    "text": "Netflix have a suite\nof software components called the Simian Army. The Simian Army are basically little software terrorists.",
    "start": "2172880",
    "end": "2178963"
  },
  {
    "text": "They run around in production, during office hours, kill\nminus nining processes, blocking ports, rm rfing\ndatabase and disk partitions.",
    "start": "2178963",
    "end": "2186557"
  },
  {
    "text": "They even have something called KS Kong that even as I talk to\nyou about it right now gives me goosebumps.",
    "start": "2186557",
    "end": "2191777"
  },
  {
    "text": "It kills a whole data\ncenter availability zone on purpose. (groan) They do this because they'd rather",
    "start": "2191777",
    "end": "2197635"
  },
  {
    "text": "find out during office hours when engineers are on call\nthat it's going to work than to wait until four in the morning",
    "start": "2197635",
    "end": "2204180"
  },
  {
    "text": "when its an actual emergency\nand nobody's awake. So we need to understand\nthat same fact as well. In a sufficiently cloud native system,",
    "start": "2204180",
    "end": "2210691"
  },
  {
    "text": "high availability of a\nsingle node is an illusion. It'll never happen. Instead you need to optimize\nfor time to remediation.",
    "start": "2210691",
    "end": "2217288"
  },
  {
    "text": "A cloud native architecture is one that is built to survive and thrive at scale, in horizontal scale.",
    "start": "2217288",
    "end": "2222959"
  },
  {
    "text": "Cloud native architecture is also one that is built to understand\nand do the right thing in case of a failure.",
    "start": "2222959",
    "end": "2228501"
  },
  {
    "text": "We need to optimize for\ntime to remediation. How quickly, from the\nperspective of the client, can we get up a new service?",
    "start": "2228501",
    "end": "2234922"
  },
  {
    "text": "Or load balance to another endpoint? Or do something so that it\nlooks like it's still working? If you build your application",
    "start": "2234922",
    "end": "2241351"
  },
  {
    "text": "with time to remediation in mind, instead of high availability\nof a single node, then from the perspective of the client,",
    "start": "2241351",
    "end": "2246892"
  },
  {
    "text": "you'll have the same result. But this has profound implications on how you build your systems, and how you architect it.",
    "start": "2246892",
    "end": "2252719"
  },
  {
    "text": "So in this case, we\nalready have 80% of this working just fine. If we call that downstream service,",
    "start": "2252719",
    "end": "2258661"
  },
  {
    "text": "and there is one or more instances of that service in the registry, this will work.",
    "start": "2258662",
    "end": "2263671"
  },
  {
    "text": "It's just it's not gonna\nwork if there are zero. Right. If there are zero instances,",
    "start": "2263671",
    "end": "2268729"
  },
  {
    "text": "this is gonna blow chunks\nand our poor iPhone users are gonna get a big, fat Java\nStack Trace in their phone.",
    "start": "2268729",
    "end": "2274634"
  },
  {
    "text": "That's no way to run a\nrailroad, my friends. We need to do better. So we're gonna introduce\ngraceful degradation. High performing websites do\nthis kinda thing all the time.",
    "start": "2274634",
    "end": "2281149"
  },
  {
    "text": "They'll say, oh well, you wanted\nthe search engine results. But, those aren't available right now, so here are some machined,\nlearned recommendations",
    "start": "2281149",
    "end": "2288683"
  },
  {
    "text": "from across the web. We're gonna use something called the Hystrix Circuit Breaker. And the Circuit Breaker is gonna be a stateful component that we're gonna add",
    "start": "2288684",
    "end": "2295101"
  },
  {
    "text": "to our potentially shaky\nservice to service call. So, if there's a failure.",
    "start": "2295102",
    "end": "2301416"
  },
  {
    "text": "If there's an exception in this method, we're gonna have it call another method of the same signature and form,",
    "start": "2301416",
    "end": "2306701"
  },
  {
    "text": "called Fallback. And we're just gonna return\nan empty array list, okay. So there's that.",
    "start": "2306701",
    "end": "2312482"
  },
  {
    "text": "Now, this Circuit Breaker is stateful. It's going to see that\nthere's enough exceptions, and it's gonna stop the traffic",
    "start": "2312482",
    "end": "2318576"
  },
  {
    "text": "and go directly to the\nfallback after a while. This gives our downstream service time to come back to life. If you're using something\nlike a cloud platform,",
    "start": "2318576",
    "end": "2325224"
  },
  {
    "text": "like Cloud Foundry, Cloud Foundry will move heaven and earth,\nall day and all night to restart services if you need it to.",
    "start": "2325224",
    "end": "2332036"
  },
  {
    "text": "If you say there's gotta be 10 instances or 100 instances it will make sure that that is true all the time.",
    "start": "2332037",
    "end": "2337042"
  },
  {
    "text": "But, it's up to us, as\narchitects and developers, to do the right thing in the software in the face of topology and\narchitecture changes like this.",
    "start": "2337042",
    "end": "2344278"
  },
  {
    "text": "So this is what we're doing. We're accounting for the\npossibility of failure, which is a real thing. So, okay, good.",
    "start": "2344278",
    "end": "2349921"
  },
  {
    "text": "I'm making requests. Happy path. Things are working. Great. Now, let's go back to our",
    "start": "2349921",
    "end": "2355066"
  },
  {
    "text": "Reservation-Service. And then kill the poor,\npoor Reservation Service. There we are. That's sucking, isn't it.",
    "start": "2355066",
    "end": "2360970"
  },
  {
    "text": "Look at that. It's hesitating. Eventually it's gonna time out. But, I can force it to time out and force it to go\ndirectly to the fallback",
    "start": "2360970",
    "end": "2366869"
  },
  {
    "text": "by hitting Command + R, there we go. So now, each time I do that, it just goes straight to the fallback.",
    "start": "2366869",
    "end": "2372564"
  },
  {
    "text": "It doesn't even try to call\nthe downstream service. We're giving our downstream service time to recover, time to breath. We all know that if a\nservice isn't responding,",
    "start": "2372564",
    "end": "2379694"
  },
  {
    "text": "you should hit Refresh\nin the browser, right? Does that work? Well, it doesn't work for\ndistributed systems either.",
    "start": "2379694",
    "end": "2385757"
  },
  {
    "text": "This negates that effect. This gets rid of that effect. Okay, now, my friends, we've only got,",
    "start": "2385757",
    "end": "2391461"
  },
  {
    "text": "how long? Seven minutes, eight minutes. So, we're gonna be a little late. Probably eight minutes.",
    "start": "2391461",
    "end": "2396962"
  },
  {
    "text": "We're gonna use. We need to now care about\nobservability, right. So a cloud native architecture is one",
    "start": "2396962",
    "end": "2403238"
  },
  {
    "text": "that is observable, it's one\nthat scales out correctly, and it's one that does the right thing in the case of failure.",
    "start": "2403238",
    "end": "2408483"
  },
  {
    "text": "It optimizes for time to remediation. That's the three tenets\nof a cloud native system.",
    "start": "2408483",
    "end": "2414633"
  },
  {
    "text": "We've looked ever so briefly at how to build a system\nthat does the right thing. It centralizes configuration. It uses service registry and discovery.",
    "start": "2414634",
    "end": "2420335"
  },
  {
    "text": "We've introduce graceful degradation, in case of the read. If I had a few more minutes, I might",
    "start": "2420335",
    "end": "2425429"
  },
  {
    "text": "show you how to do a bit\nof graceful degradation in the case of a write. When you post data, right.",
    "start": "2425429",
    "end": "2431161"
  },
  {
    "text": "If you post data, you wanna\ndeliver the message eventually, and for that you can use something called Spring Cloud Stream.",
    "start": "2431161",
    "end": "2437175"
  },
  {
    "text": "This gives you eventual consistency. There's a lot of ways to get two different services to agree\non the state of something.",
    "start": "2437176",
    "end": "2443355"
  },
  {
    "text": "One is to use eventual consistency, which is messaging, basically. That's what we're implying. Another one is to use the Saga Pattern,",
    "start": "2443355",
    "end": "2449359"
  },
  {
    "text": "which describes a set of interleavable, that is you can switch the order, transactions that each have semantic",
    "start": "2449359",
    "end": "2454959"
  },
  {
    "text": "compensatory transactions. Another way is to use a more sophisticated version of messaging called\nCQRS and event sourcing.",
    "start": "2454959",
    "end": "2461130"
  },
  {
    "text": "Right. But we will skip all that for now, 'cause that could be another five hours. So, instead, let's talk\nabout observability.",
    "start": "2461130",
    "end": "2467061"
  },
  {
    "text": "There's, in my system,\nand each of my nodes, I have the actuator endpoints.",
    "start": "2467061",
    "end": "2472101"
  },
  {
    "text": "The actuator endpoints give me information about\nwhat the application is doing. So, if I go to my Edge Service here.",
    "start": "2472101",
    "end": "2478304"
  },
  {
    "text": "9999/metrics. I can see information about this host",
    "start": "2478304",
    "end": "2483814"
  },
  {
    "text": "and this node, right. Memory, uptime, heap,\nnon-heap, code cache out, etc. This is all pretty standard stuff.",
    "start": "2483814",
    "end": "2489450"
  },
  {
    "text": "Now, I've also got env, it\nshows me my environment. Beans which shows me the objects",
    "start": "2489450",
    "end": "2495231"
  },
  {
    "text": "in the graph, etc. But these are host and\nnode specific information. I wanna see the emergent\nbehavior of the system. Remember, the map is not the terrain.",
    "start": "2495231",
    "end": "2502619"
  },
  {
    "text": "My architecture diagram\nis not the architecture. It's not the system. There's emergent behavior\nthat the system has",
    "start": "2502620",
    "end": "2509495"
  },
  {
    "text": "that your architecture diagram will never understand, or\nnever be able to encapsulate.",
    "start": "2509496",
    "end": "2514650"
  },
  {
    "text": "So we need to capture that,\nwe need to have observability. We're gonna use a few different things. We wanna look at",
    "start": "2514650",
    "end": "2521229"
  },
  {
    "text": "the flow of traffic in that circuit. That circuit represents\na connective tissue from a consumer and a service,",
    "start": "2521229",
    "end": "2527289"
  },
  {
    "text": "a producer and a consumer. A client and a service. That service may be down, right?",
    "start": "2527289",
    "end": "2532607"
  },
  {
    "text": "If it's a third party service especially, we have no way to instrument\nthat third party service. So we can use a Circuit Breaker to add",
    "start": "2532607",
    "end": "2538838"
  },
  {
    "text": "a connective tissue that\nlooks at the transit of data through that endpoint. So, one thing you should notice is that",
    "start": "2538839",
    "end": "2545575"
  },
  {
    "text": "I went to my, you know, a few seconds ago, I restarted the Reservation Service,",
    "start": "2545575",
    "end": "2551530"
  },
  {
    "text": "and nothing else, and now the\nCircuit Breaker is working. It's re-introduced traffic. So it saw that traffic is working",
    "start": "2551531",
    "end": "2558384"
  },
  {
    "text": "and it came back. It healed itself. But, it may fail again. So I wanna be able to\nsee what's happening. I can do this with the Hystrix Dashboard.",
    "start": "2558384",
    "end": "2564861"
  },
  {
    "text": "I'll say Hystrix Dashboard\nConfig Client Eureka Services Registration and Discovery. I'll hit Generate, I'll open this up,",
    "start": "2564861",
    "end": "2570191"
  },
  {
    "text": "and I'm gonna open this up in my IDE, and I'll do the same normal kinda thing as I've done before. Application.properties\nSpring Cloud Config URI",
    "start": "2570191",
    "end": "2577753"
  },
  {
    "text": "http local host 8888. Spring.application.name. Hystrix Dashboard.",
    "start": "2577753",
    "end": "2583919"
  },
  {
    "text": "Properties. Bootstrap.properties. Hystrix Dashboard Application, and I'm gonna say, oop.",
    "start": "2586685",
    "end": "2592085"
  },
  {
    "text": "At enable Discovery Client and finally, I'm gonna say\nat enable Hystrix Dashboard.",
    "start": "2592085",
    "end": "2597536"
  },
  {
    "text": "Now, this is gonna spin up on port 8010, and what it's going to expect is a server sent event stream.",
    "start": "2597536",
    "end": "2602848"
  },
  {
    "text": "A heartbeat stream, that each of the nodes that has a circuit breaker\nwill emit automatically.",
    "start": "2602848",
    "end": "2608376"
  },
  {
    "text": "This server sent event stream can be multiplexed, you can\ntake all of the streams from all of the service instances",
    "start": "2608376",
    "end": "2613901"
  },
  {
    "text": "and put them into one big stream using Spring Cloud Turbine, but that's a demo for\nanother day, my friend. So, for now let's look at the simple case",
    "start": "2613901",
    "end": "2620738"
  },
  {
    "text": "of this one node and this\none heartbeat stream. So, local host 9999",
    "start": "2620738",
    "end": "2624598"
  },
  {
    "text": "Hystrix.stream. Now, this stream is never ending. It's infinite. It's always being updated.",
    "start": "2627187",
    "end": "2633295"
  },
  {
    "text": "There's always new data. It is endless. Like the bugs in my code. It's gonna keep going forever.",
    "start": "2633295",
    "end": "2638423"
  },
  {
    "text": "So, whatever you do, whatever you do, do not curl this endpoint, okay.",
    "start": "2638424",
    "end": "2642980"
  },
  {
    "text": "I'm gonna take that URL. I'm gonna go to 8010/Hystrix.html. And I'm gonna put this in the Dashboard",
    "start": "2644045",
    "end": "2649887"
  },
  {
    "text": "that we just created, paste. Monitor. Open this up. Local host. Reservation Names.",
    "start": "2649887",
    "end": "2655455"
  },
  {
    "text": "Now, I'm gonna drive traffic on the left, and we'll see that reflected in the moving average that trends\never upward on the right. You can see that traffic is going through",
    "start": "2655455",
    "end": "2661898"
  },
  {
    "text": "the circuit breaker just fine. There's 30, 36, 42, whatever, requests. Everything is green though.",
    "start": "2661898",
    "end": "2667793"
  },
  {
    "text": "The circuit is closed. Life is great. Okay. If I were to kill the service then",
    "start": "2667793",
    "end": "2672842"
  },
  {
    "text": "we'd eventually see the\ncircuit would be open, and it would go to the\nfallback method directly. So that's one way to get visibility",
    "start": "2672842",
    "end": "2679286"
  },
  {
    "text": "into the emergent behavior\nof the application. The other way to get that visibility is to use distributed tracing.",
    "start": "2679286",
    "end": "2685366"
  },
  {
    "text": "And distributed tracing is actually, in theory, very, very simple. But in practice very, very painful. What we wanna do, my friends,",
    "start": "2685366",
    "end": "2692133"
  },
  {
    "text": "is to instrument every\ningress and egress point. That is to say every place where a message",
    "start": "2692133",
    "end": "2697215"
  },
  {
    "text": "can arrive or leave a\nSpring Cloud Application. Spring NBC, The Rest\nTemplate, Spring Cloud Stream,",
    "start": "2697216",
    "end": "2702221"
  },
  {
    "text": "the Feign Declarative Rest Based Clients, the micro-proxy based on Zuul. All these places where messages",
    "start": "2702221",
    "end": "2708160"
  },
  {
    "text": "arrive or exit, we wanna make sure that we intercept them or filter them. And see if there's a unique ID. A unique ID that we can use to correlate",
    "start": "2708160",
    "end": "2715976"
  },
  {
    "text": "the flow of a single message\nthrough the entire system. In distributed tracing parlance,",
    "start": "2715976",
    "end": "2721092"
  },
  {
    "text": "we talk about a trace and a span. A trace represents the whole journey, from a to zed of a request.",
    "start": "2721093",
    "end": "2727569"
  },
  {
    "text": "From a to zed. A span is each leg in the journey. A to b, b to c, c to d, d to e, etc.",
    "start": "2727569",
    "end": "2733906"
  },
  {
    "text": "And we have a framework called Spring Cloud Sleuth. So I'm gonna say, Zipkin Server.",
    "start": "2733906",
    "end": "2740067"
  },
  {
    "text": "Zipkin UI, Eureka Service\nRegistration and Discovery, Config Client, and we're\ngonna hit Generate.",
    "start": "2740067",
    "end": "2746793"
  },
  {
    "text": "Now, Spring Cloud Sleuth is already working on our applications. I've got this on the class path, and you can see it's already\ndoing something useful.",
    "start": "2746793",
    "end": "2753476"
  },
  {
    "text": "It's logging information here. This is the Service ID, the\nTrace ID, and the Span ID.",
    "start": "2753476",
    "end": "2759020"
  },
  {
    "text": "So, if you have a log analysis tool, like Elastic Search or\nPapertrail, or Splunk, you can already see\nsome of the information",
    "start": "2759020",
    "end": "2766054"
  },
  {
    "text": "as it flows through the system. But, I believe that a,",
    "start": "2766054",
    "end": "2769531"
  },
  {
    "text": "an image, a graphic, a picture, is worth a 1,000 traces. So we're gonna use Twitter's Zipkin Service.",
    "start": "2771377",
    "end": "2776903"
  },
  {
    "text": "We're gonna build a Zipkin Service here. We'll say, at enable Zipkin Server. Come on computer.",
    "start": "2776903",
    "end": "2781319"
  },
  {
    "text": "What are we having trouble with?",
    "start": "2783364",
    "end": "2786031"
  },
  {
    "text": "Did I do something wrong?",
    "start": "2798028",
    "end": "2800111"
  },
  {
    "text": "Come on computer.",
    "start": "2803177",
    "end": "2804594"
  },
  {
    "text": "Okay. No reason to cry yet. There might be though.",
    "start": "2810676",
    "end": "2817100"
  },
  {
    "text": "There might be. Come on computer. So, Zipkin Service Application.",
    "start": "2817100",
    "end": "2823739"
  },
  {
    "text": "Santa Maria.",
    "start": "2825524",
    "end": "2826524"
  },
  {
    "text": "I don't even understand what happened, that's the thing. You. Can we have two minutes? Three?",
    "start": "2835264",
    "end": "2840613"
  },
  {
    "text": "Three minutes, can I have three minutes? We're gonna do the nuclear option. Then I'm gonna stick the dismount. I'm gonna restart all of the IntelliJs,",
    "start": "2841743",
    "end": "2847841"
  },
  {
    "text": "and IntelliJ, we're gonna\nhave a big talk after this. (laughter) Okay, terminal.",
    "start": "2847841",
    "end": "2853470"
  },
  {
    "text": "Pkill. It's a good thing we don't build distributed systems on IntelliJ.",
    "start": "2853470",
    "end": "2859445"
  },
  {
    "text": "Okay. So, Config Server.",
    "start": "2859446",
    "end": "2862090"
  },
  {
    "text": "Open. Eureka Service, open. Reservation Service, open.",
    "start": "2864965",
    "end": "2871241"
  },
  {
    "text": "Sorry, what, huh? (murmur) Okay. That sounds like the\nnuclear nuclear option.",
    "start": "2877544",
    "end": "2885430"
  },
  {
    "text": "Yeah. Bad IntelliJ, bad. (murmur)",
    "start": "2886670",
    "end": "2892560"
  },
  {
    "text": "Okay, hold on. Yeah, it'll take forever. He's got a point, my friend. It's scanning files to index,",
    "start": "2892560",
    "end": "2897936"
  },
  {
    "text": "so it looks like it's\nalready doing something to that effect already. Reservation Service.",
    "start": "2897936",
    "end": "2902871"
  },
  {
    "text": "Santa Maria. Config Service.",
    "start": "2904621",
    "end": "2908988"
  },
  {
    "text": "I just wanna know it's gonna be all right. I just want to feel\nsecure in my life choices. Should I have used IntelliJ,\nshould I have used Eclipse?",
    "start": "2910517",
    "end": "2918715"
  },
  {
    "text": "Emacs? Every talk I go to there's always that one person who uses Emacs. I always ask who uses\nthis, that and the rest,",
    "start": "2918715",
    "end": "2924929"
  },
  {
    "text": "and there's always the same guy. I use Emacs, he says, and\nthen he leaves the room. I think he's just going to the next",
    "start": "2924929",
    "end": "2930498"
  },
  {
    "text": "country or continent where I am. He's a troll. So.",
    "start": "2930498",
    "end": "2936312"
  },
  {
    "text": "Config Service.",
    "start": "2937287",
    "end": "2938537"
  },
  {
    "text": "What about you, why are you so upset? Zipkin UI.",
    "start": "2943630",
    "end": "2946134"
  },
  {
    "text": "Well.",
    "start": "2949366",
    "end": "2950199"
  },
  {
    "text": "Santa Maria.",
    "start": "2967167",
    "end": "2968167"
  },
  {
    "text": "So the Reservation Service. Wait Config Service is running. Eureka. Reservations",
    "start": "2974279",
    "end": "2980194"
  },
  {
    "text": "Service. Okay.",
    "start": "2980194",
    "end": "2984379"
  },
  {
    "text": "Oh, come on. Zipkin.",
    "start": "2988071",
    "end": "2990569"
  },
  {
    "text": "Okay. So I fixed the build problem. I'm gonna say at enable",
    "start": "2994514",
    "end": "2999909"
  },
  {
    "text": "Discovery Client. At enable. Ah.",
    "start": "3001899",
    "end": "3006470"
  },
  {
    "text": "Zipkin Server. Okay. So, Reservation Service is up and running.",
    "start": "3008762",
    "end": "3015522"
  },
  {
    "text": "Eureka is up and running. Reservation Client, not so much.",
    "start": "3015522",
    "end": "3020671"
  },
  {
    "text": "Let's see that everything\nis working happily. Local host 9999/reservation/names. And then, my Zipkin Server,",
    "start": "3020671",
    "end": "3027541"
  },
  {
    "text": "I need to point that to the right things. So we say application.properties.",
    "start": "3027541",
    "end": "3034144"
  },
  {
    "text": "Spring.Cloud.Config.URI equals local host 8888 spring.applicationname.",
    "start": "3034144",
    "end": "3040721"
  },
  {
    "text": "Zipkin-Service. We need this to be bootstrap.properties.",
    "start": "3042343",
    "end": "3047760"
  },
  {
    "text": "Strap.properties. Okay.",
    "start": "3050322",
    "end": "3055348"
  },
  {
    "text": "And go, go, go.",
    "start": "3055348",
    "end": "3058298"
  },
  {
    "text": "Come on. That's the service, Config Service.",
    "start": "3066676",
    "end": "3073126"
  },
  {
    "text": "Eureka Service. Client is now springing up to load.",
    "start": "3073126",
    "end": "3077213"
  },
  {
    "text": "Come on. (murmur) Yeah. Here we go, Reservation\nNames, read, read, read, read.",
    "start": "3083014",
    "end": "3088624"
  },
  {
    "text": "Come on, come on, come on. Okay. Failure, good, it's working. Now, Zipkin.",
    "start": "3088624",
    "end": "3093742"
  },
  {
    "text": "So we've already got the\ntracing on the Command Line. That's useful, but I want to visualize it. So I'm gonna open up Zipkin,\nwhich is what I just set up.",
    "start": "3093742",
    "end": "3099474"
  },
  {
    "text": "Zipkin is a distributed server, a distributed tracing server from Twitter. It was open sourced in\n2010, and we have people",
    "start": "3099474",
    "end": "3105684"
  },
  {
    "text": "in the Spring Cloud team from\nboth Netflix and from Twitter who contribute often, so they helped us make this stuff really great.",
    "start": "3105685",
    "end": "3112095"
  },
  {
    "text": "So, here we have visibility into the two services that\nare already registered. I'm gonna go to Reservation\nService, for example.",
    "start": "3112095",
    "end": "3117740"
  },
  {
    "text": "I'll hit Find Traces. And it'll show me that I made a request less than a minute ago. I'm gonna click on that request here,",
    "start": "3117740",
    "end": "3123365"
  },
  {
    "text": "and I'll see a waterfall graph that said I made 88 milliseconds, good gravy. That's not the average one.",
    "start": "3123365",
    "end": "3129824"
  },
  {
    "text": "Let's try a different one that makes me feel better. 60, something's wrong. Anyway. 67 milliseconds. The request entered here at\nhttp:/reservations/names.",
    "start": "3131007",
    "end": "3139688"
  },
  {
    "text": "Then if flowed out of the Reservation Client to the http:/reservations endpoint,",
    "start": "3139688",
    "end": "3145090"
  },
  {
    "text": "and then finally that arrived at the Reservation Service here. I can click on this information to get details about the flow of\nthe message in the system.",
    "start": "3145090",
    "end": "3151263"
  },
  {
    "text": "I can click on this for\nexample to see tags, and show the actual log of the message. Now, this is information that you can use",
    "start": "3151263",
    "end": "3156705"
  },
  {
    "text": "to correlate transactions with requests. Make no mistake however, this\nis not for customer service. You're not supposed to use this",
    "start": "3156705",
    "end": "3162594"
  },
  {
    "text": "to find out what Jane did on the website two years ago. You're gonna keep at most a\ncouple of days worth of logs. This is about online telemetry right now.",
    "start": "3162594",
    "end": "3169388"
  },
  {
    "text": "How much money did we make last quarter? I don't know. But, I can tell you\nwhat the average latency on the website is right now.",
    "start": "3169388",
    "end": "3175245"
  },
  {
    "text": "This is for that. It's observability of the\nonline system right now. You will trace at most maybe 10%.",
    "start": "3175245",
    "end": "3181843"
  },
  {
    "text": "That's the default we trace\nfor you automatically. I have it at 100%, 'cause I do a demo. You're gonna get, by default, 10%.",
    "start": "3181843",
    "end": "3187289"
  },
  {
    "text": "Twitter, for example, keeps one out of every six million requests. One out of six million. They don't need it all.",
    "start": "3187289",
    "end": "3192989"
  },
  {
    "text": "So my friends, I'm sorry that\nwe didn't get to cover much this time. (loud laughter) Maybe next time, we could actually",
    "start": "3192989",
    "end": "3198738"
  },
  {
    "text": "get into the details if I just had a little more time and if I just would stop sucking with the code. Now, thank you very much for your time.",
    "start": "3198738",
    "end": "3205682"
  },
  {
    "text": "I hope you appreciate that while I am wearing a Spring Tshirt,\nand Spring underwear,",
    "start": "3205682",
    "end": "3210753"
  },
  {
    "text": "and I'm a big fan. You don't have to take my word for it. There are small organizations out there",
    "start": "3210753",
    "end": "3215962"
  },
  {
    "text": "that are doing amazing things with this. So several world governments. Alibaba in China made 14 billion dollars in a single day last year.",
    "start": "3215962",
    "end": "3222258"
  },
  {
    "text": "They're using Spring\nCloud, loud and proud. Netflix is using Spring\nCloud, loud and proud. Baidu is using Spring\nCloud, loud and proud.",
    "start": "3222258",
    "end": "3228463"
  },
  {
    "text": "Right, these are organizations that have the money, the people, the motivation, and the resources to solve this problem themselves, and they still choose",
    "start": "3228463",
    "end": "3234885"
  },
  {
    "text": "Spring Cloud because it represents the most powerful way to\nbuild these kinds of systems. The most cohesive way to\nbuild these kinds of systems.",
    "start": "3234885",
    "end": "3240569"
  },
  {
    "text": "Thank you very much for your time. I'm sorry I ran over. Thank you, though. I appreciate it, cheers. (clapping)",
    "start": "3240570",
    "end": "3246911"
  }
]