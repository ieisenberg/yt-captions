[
  {
    "start": "0",
    "end": "85000"
  },
  {
    "text": "[Music]",
    "start": "970",
    "end": "7838"
  },
  {
    "text": "yeah so welcome everyone as as ben already said we will try to",
    "start": "12880",
    "end": "18080"
  },
  {
    "text": "answer the question if you need a service measured if so maybe which which one or",
    "start": "18080",
    "end": "24880"
  },
  {
    "text": "what are the differences you should look at when you've been choosing a technology",
    "start": "24880",
    "end": "31039"
  },
  {
    "text": "um just a few words about us i am hana i work for innocue as a",
    "start": "31039",
    "end": "37200"
  },
  {
    "text": "developer and a consultant i'm mostly in the space of devops kubernetes",
    "start": "37200",
    "end": "43200"
  },
  {
    "text": "server smash um all of that um and i have given heart with me",
    "start": "43200",
    "end": "50399"
  },
  {
    "text": "yeah so uh thanks for uh for the introduction sven and i'm happy to be here so my name is ebert wolf and i'm",
    "start": "50399",
    "end": "57360"
  },
  {
    "text": "also with innocue i mostly work on architecture actually so i focus on business the business side of things",
    "start": "57360",
    "end": "63760"
  },
  {
    "text": "technology software architecture and how to put it all together i'm a fellow i've written a few books about microservices",
    "start": "63760",
    "end": "69680"
  },
  {
    "text": "for example and i'm glad to be here yeah",
    "start": "69680",
    "end": "76000"
  },
  {
    "text": "and me we also wrote a book together um a tiny book about service mesh which we",
    "start": "76000",
    "end": "82000"
  },
  {
    "text": "will link um at the end yeah so um",
    "start": "82000",
    "end": "87200"
  },
  {
    "start": "85000",
    "end": "346000"
  },
  {
    "text": "to start with um i think it's important to to briefly talk about what a service mesh is um technology",
    "start": "87200",
    "end": "94960"
  },
  {
    "text": "wise and why it was invented so what problems it tries to solve to start with",
    "start": "94960",
    "end": "100880"
  },
  {
    "text": "the problems um i think you all you are all aware that",
    "start": "100880",
    "end": "106479"
  },
  {
    "text": "microservices are distributed systems as being distributed systems",
    "start": "106479",
    "end": "111600"
  },
  {
    "text": "um they are complex um architecture and if you introduce such a distributed system",
    "start": "111600",
    "end": "119680"
  },
  {
    "text": "there are a lot of challenges to the integration of microservices",
    "start": "119680",
    "end": "125439"
  },
  {
    "text": "so for example you have to route the request between",
    "start": "125439",
    "end": "130640"
  },
  {
    "text": "the microservices instead of just calling a method or function and there's also service discovery to do",
    "start": "130640",
    "end": "138560"
  },
  {
    "text": "then there's also the decision of when you will stop a request so",
    "start": "138560",
    "end": "144319"
  },
  {
    "text": "what is your timeout limit for for this call and then there's also the decision of",
    "start": "144319",
    "end": "150160"
  },
  {
    "text": "when you if you want to retry and how often you want to retry",
    "start": "150160",
    "end": "155280"
  },
  {
    "text": "and um also connected to that we have circuit breaking which basically means you",
    "start": "155280",
    "end": "160480"
  },
  {
    "text": "exclude a certain endpoint if it behaves um unexpectedly for some time",
    "start": "160480",
    "end": "167040"
  },
  {
    "text": "um also it i think that's that's the major challenge in microservice integration or",
    "start": "167040",
    "end": "173599"
  },
  {
    "text": "networking is encryption so you want to make sure that whoever is inside your",
    "start": "173599",
    "end": "179120"
  },
  {
    "text": "network cannot see or manipulate what happens then there's",
    "start": "179120",
    "end": "184400"
  },
  {
    "text": "authentication and authorization which can apply to service to service or even",
    "start": "184400",
    "end": "190319"
  },
  {
    "text": "to user authentication and if you have microservices",
    "start": "190319",
    "end": "197920"
  },
  {
    "text": "you need to find out what's happening in your system so you need metrics for that um",
    "start": "197920",
    "end": "204400"
  },
  {
    "text": "dashboards observability tools um because there's no way of knowing if",
    "start": "204400",
    "end": "210080"
  },
  {
    "text": "you don't have these metrics what's going on and finally there's logging um",
    "start": "210080",
    "end": "216959"
  },
  {
    "text": "there's a challenge of logging so you need to get all the logs from all the services and um",
    "start": "216959",
    "end": "222720"
  },
  {
    "text": "yeah look at them all together that's only a few of the challenges that",
    "start": "222720",
    "end": "228000"
  },
  {
    "text": "you are facing when you're building microservices and that's why service mesh was invented in the first",
    "start": "228000",
    "end": "233840"
  },
  {
    "text": "place so if we look at the architecture of a service mesh",
    "start": "233840",
    "end": "239120"
  },
  {
    "text": "then we still of course have the micro service applications and the application layer and",
    "start": "239120",
    "end": "244959"
  },
  {
    "text": "instead of changing our microservices and put all the features inside of those",
    "start": "244959",
    "end": "250319"
  },
  {
    "text": "we add a proxy in front of each microservice that solves many problems around service networking",
    "start": "250319",
    "end": "257680"
  },
  {
    "text": "and many of the features i just mentioned",
    "start": "257680",
    "end": "262800"
  },
  {
    "text": "outside of the service and they the proxies intercept all the traffic",
    "start": "262800",
    "end": "268479"
  },
  {
    "text": "that's that's going in and out of the service and all the proxies together are called",
    "start": "268479",
    "end": "274240"
  },
  {
    "text": "the data plane the term is also coming for other technology",
    "start": "274240",
    "end": "279360"
  },
  {
    "text": "um but it also applies on service mesh and",
    "start": "279360",
    "end": "284479"
  },
  {
    "text": "the counterpart of the data plane is the control plane and just like the name suggests it",
    "start": "284479",
    "end": "290479"
  },
  {
    "text": "controls the proxies which means that it distributes configuration so it distributes new",
    "start": "290479",
    "end": "298000"
  },
  {
    "text": "timeout configuration or router configuration and um the proxies also communicate to",
    "start": "298000",
    "end": "304720"
  },
  {
    "text": "this control plane in sending metrics so they they have knowledge of all the",
    "start": "304720",
    "end": "310160"
  },
  {
    "text": "traffic that's going on and they can they can provide metrics about that to",
    "start": "310160",
    "end": "316080"
  },
  {
    "text": "the control plane so attach the control plan we can add infrastructure",
    "start": "316080",
    "end": "322800"
  },
  {
    "text": "and usually because most service mesh technology is based on kubernetes really",
    "start": "322800",
    "end": "328800"
  },
  {
    "text": "it's the kubernetes api that the control plane is connected to but there's also",
    "start": "328800",
    "end": "333919"
  },
  {
    "text": "other infrastructure services that you can um that you can plug in such as monitoring tools or tracing tools",
    "start": "333919",
    "end": "341840"
  },
  {
    "text": "so that's the architecture of the service mesh and um eberhard will tell you some more about",
    "start": "341840",
    "end": "348479"
  },
  {
    "start": "346000",
    "end": "642000"
  },
  {
    "text": "the implementations that there are yeah so and we are going to start with",
    "start": "348479",
    "end": "354800"
  },
  {
    "text": "the two most um let's say famous implementations which are istio",
    "start": "354800",
    "end": "361600"
  },
  {
    "text": "and linkadi and if you look at them um they have",
    "start": "361600",
    "end": "367440"
  },
  {
    "text": "actually quite different approaches so issue on the one hand is a project that has been started by google ibm and",
    "start": "367440",
    "end": "374080"
  },
  {
    "text": "lyft while linkid is a project that is run by a company that provides services",
    "start": "374080",
    "end": "379840"
  },
  {
    "text": "around linkedin istio has an emphasis on",
    "start": "379840",
    "end": "386639"
  },
  {
    "text": "the number of features it's highly customizable while linkid tries to be as usable as possible and is",
    "start": "386639",
    "end": "393919"
  },
  {
    "text": "also optimized for performance so there is a very different tradeoff here",
    "start": "393919",
    "end": "399440"
  },
  {
    "text": "istio uses the envoy proxy which is not that surprising because it is another project that lyft originally started",
    "start": "399440",
    "end": "406560"
  },
  {
    "text": "linkedid has its own proxy that they implemented specifically for linkade",
    "start": "406560",
    "end": "413599"
  },
  {
    "text": "and with istio so the ingress traffic is traffic that goes into your",
    "start": "413599",
    "end": "420479"
  },
  {
    "text": "kubernetes cluster or microservices system and with istio there is a",
    "start": "420479",
    "end": "425759"
  },
  {
    "text": "custom concept inside istio to handle that traffic while linkerd relies on the",
    "start": "425759",
    "end": "431280"
  },
  {
    "text": "features that kubernetes has in this in that regard and it would",
    "start": "431280",
    "end": "436560"
  },
  {
    "text": "support any ingress controller that kubernetes might support and uh",
    "start": "436560",
    "end": "442160"
  },
  {
    "text": "talking about kubernetes so linkedin is specifically just for kubernetes while istu is optimized for humanities but it",
    "start": "442160",
    "end": "450560"
  },
  {
    "text": "also supports other platforms so there are very different trade-offs here but um there is even more",
    "start": "450560",
    "end": "458240"
  },
  {
    "text": "which hana is going to talk about yeah so um if you look at service mesh",
    "start": "458240",
    "end": "464400"
  },
  {
    "text": "implementations there is much more than even i would expect to be so we don't",
    "start": "464400",
    "end": "472080"
  },
  {
    "text": "only have linkedin istio which are the most popular ones and also the oldest ones",
    "start": "472080",
    "end": "477440"
  },
  {
    "text": "we also have console which is currently like newly branded as a service mesh",
    "start": "477440",
    "end": "484960"
  },
  {
    "text": "which was the service discovery tool before um and then we have aws app mesh which",
    "start": "484960",
    "end": "491039"
  },
  {
    "text": "is available on aws and also integrated of course with the aws service",
    "start": "491039",
    "end": "496879"
  },
  {
    "text": "landscape um then we have two service meshes that are built by",
    "start": "496879",
    "end": "502720"
  },
  {
    "text": "companies who build api gateways or edge proxy so traffic is an edge proxy and it also has a",
    "start": "502720",
    "end": "509680"
  },
  {
    "text": "service mesh which makes a lot of sense because it's a similar challenges that the technology",
    "start": "509680",
    "end": "516560"
  },
  {
    "text": "solves and these companies have a lot of experience um with these challenges",
    "start": "516560",
    "end": "523279"
  },
  {
    "text": "and kuma is uh built by the company behind the api gateway kong so it's a",
    "start": "523279",
    "end": "529120"
  },
  {
    "text": "it's a similar situation with uh as with traffic and finally the the new service mesh",
    "start": "529120",
    "end": "536160"
  },
  {
    "text": "implementations are open service mesh and nginx service mesh um open service measures built by microsoft",
    "start": "536160",
    "end": "543440"
  },
  {
    "text": "so you see that there are a lot of major players around like google and aws and microsoft",
    "start": "543440",
    "end": "549120"
  },
  {
    "text": "that are investing here and also nginx has built their own",
    "start": "549120",
    "end": "555360"
  },
  {
    "text": "service mesh um many of these service mesh",
    "start": "555360",
    "end": "560880"
  },
  {
    "text": "implementations have implemented parts of the service mesh interface which is the api definition that was also",
    "start": "560880",
    "end": "569040"
  },
  {
    "text": "published by microsoft and also other companies",
    "start": "569040",
    "end": "574560"
  },
  {
    "text": "and the idea behind that is um that you have a common api for the features of a service mesh and you can",
    "start": "574560",
    "end": "581040"
  },
  {
    "text": "exchange the service mesh underneath so you are implementing your configuration",
    "start": "581040",
    "end": "586800"
  },
  {
    "text": "or you are writing your configuration against this api and um can exchange the service mesh but",
    "start": "586800",
    "end": "594640"
  },
  {
    "text": "also you could build services on on top of a service mesh for example a",
    "start": "594640",
    "end": "599680"
  },
  {
    "text": "dashboard and this dashboard could be compatible with all the service meshes",
    "start": "599680",
    "end": "605200"
  },
  {
    "text": "that implement the interface um so um colleagues and and and uh us irvan",
    "start": "605200",
    "end": "613839"
  },
  {
    "text": "and me we have built a website where you can compare those service mesh implementations also",
    "start": "613839",
    "end": "621680"
  },
  {
    "text": "how they implement the service mesh interface for example also linking a documentation what you will basically",
    "start": "621680",
    "end": "628240"
  },
  {
    "text": "see is a table just like this it's a huge much larger table than this",
    "start": "628240",
    "end": "634560"
  },
  {
    "text": "one actually um but this might be a good resource for everyone who's looking at",
    "start": "634560",
    "end": "639920"
  },
  {
    "text": "this topic yeah i know abraham will start talking about the service message features",
    "start": "639920",
    "end": "647360"
  },
  {
    "start": "642000",
    "end": "1342000"
  },
  {
    "text": "and actually there are quite a few of them i mean if you think about it it's just about wiretapping into the",
    "start": "647360",
    "end": "652959"
  },
  {
    "text": "communication between those microservices but that means that you can do a lot of stuff so let's start off",
    "start": "652959",
    "end": "658880"
  },
  {
    "text": "with features around security sorry about around routing",
    "start": "658880",
    "end": "665440"
  },
  {
    "text": "so with routing one thing that you can do is if you have a service right here",
    "start": "665440",
    "end": "672720"
  },
  {
    "text": "and you want to do some a b testing so that service should talk to another service",
    "start": "672720",
    "end": "678320"
  },
  {
    "text": "and there are two alternative strategies that this service might use so maybe it's a recommendation service and there",
    "start": "678320",
    "end": "684880"
  },
  {
    "text": "are different algorithms to recommend it and to recommend things to some customers you want to",
    "start": "684880",
    "end": "690640"
  },
  {
    "text": "test both implementations then you can do routing and you can say okay we are going to route",
    "start": "690640",
    "end": "697680"
  },
  {
    "text": "uh some of the traffic to a service instance to a and solve the traffic to",
    "start": "697680",
    "end": "703680"
  },
  {
    "text": "service instance to b so for example 90 percent here goes to a and 10 percent goes to b",
    "start": "703680",
    "end": "710000"
  },
  {
    "text": "and now we can see which one of the two is the better one because we we get some some metrics like",
    "start": "710000",
    "end": "716000"
  },
  {
    "text": "the revenue and then we see which implementation of the recommendation service is the better one and we can do",
    "start": "716000",
    "end": "721360"
  },
  {
    "text": "the same thing for canary releasing canary releasing means that we release a new version of in this case service 2",
    "start": "721360",
    "end": "728800"
  },
  {
    "text": "and we look at how good it actually behaves in production and we start off with 10 and",
    "start": "728800",
    "end": "735360"
  },
  {
    "text": "then we increase the load 20 30 and so on and that is something that you can do by wiretapping into the communication",
    "start": "735360",
    "end": "742320"
  },
  {
    "text": "and routing it to different instances what you can also do is you can do traffic mirroring",
    "start": "742320",
    "end": "749360"
  },
  {
    "text": "so here is the service and it talks to some service in production now there is a new",
    "start": "749360",
    "end": "755839"
  },
  {
    "text": "version of that second service and that's in staging and now you want to see whether that one actually behaves",
    "start": "755839",
    "end": "762399"
  },
  {
    "text": "correctly so you just take the production traffic and route it to the stage",
    "start": "762399",
    "end": "768959"
  },
  {
    "text": "environment too and in that way you can easily figure out whether that instance",
    "start": "768959",
    "end": "775040"
  },
  {
    "text": "uh in staging behaves correctly or whether you should rather go and fix some boxes box instead",
    "start": "775040",
    "end": "782399"
  },
  {
    "text": "so those are the features concerning routing and hannah's going to talk about the features concerning resilience",
    "start": "782399",
    "end": "790240"
  },
  {
    "text": "yeah so the second group is laggy versus resilience",
    "start": "790240",
    "end": "796160"
  },
  {
    "text": "there are quite some features around this topic of resilience",
    "start": "796160",
    "end": "801680"
  },
  {
    "text": "so um the first an hour already talked about it is timeout so",
    "start": "801680",
    "end": "808240"
  },
  {
    "text": "um if the the um the service you are talking to it",
    "start": "808240",
    "end": "814079"
  },
  {
    "text": "does not respond in time you can you can stop the request",
    "start": "814079",
    "end": "820320"
  },
  {
    "text": "you can configure the proxy to stop the request actually and you can also configure automatic",
    "start": "820320",
    "end": "825440"
  },
  {
    "text": "retries and you can also limit these automatically tries to",
    "start": "825440",
    "end": "830880"
  },
  {
    "text": "specific paths or um or http methods for example in some",
    "start": "830880",
    "end": "836560"
  },
  {
    "text": "service measures um and you could also configure circuit breaking so the proxy",
    "start": "836560",
    "end": "842560"
  },
  {
    "text": "would measure the health of its endpoints and as soon as it sees that",
    "start": "842560",
    "end": "848000"
  },
  {
    "text": "that another service does not behave like like it expects then it can exclude this service",
    "start": "848000",
    "end": "855839"
  },
  {
    "text": "instance from the potential endpoint list for some time so the",
    "start": "855839",
    "end": "861920"
  },
  {
    "text": "this is about the typical resilience features but there's also chaos engineering",
    "start": "861920",
    "end": "869279"
  },
  {
    "text": "which basically means that you perform some experiments around in your",
    "start": "869279",
    "end": "876000"
  },
  {
    "text": "life infrastructure or in your life in your production system",
    "start": "876000",
    "end": "881760"
  },
  {
    "text": "and you are verifying assumptions that you have so for example my service",
    "start": "881760",
    "end": "888160"
  },
  {
    "text": "will um even if this other service is not available it will it will respond or",
    "start": "888160",
    "end": "894399"
  },
  {
    "text": "it will bond with no error all it will um it can compensate for delays for",
    "start": "894399",
    "end": "900079"
  },
  {
    "text": "example so what you do is you you add arrows",
    "start": "900079",
    "end": "905600"
  },
  {
    "text": "to your um to your application or delays",
    "start": "905600",
    "end": "910800"
  },
  {
    "text": "and you measure the the outcome so yeah you you uh",
    "start": "910800",
    "end": "916880"
  },
  {
    "text": "afterwards you you know your assumptions were right about uh the fault and delay",
    "start": "916880",
    "end": "922000"
  },
  {
    "text": "behavior of your services and this is something you can add with the service mesh so you don't have to um",
    "start": "922000",
    "end": "929440"
  },
  {
    "text": "add error to your microservice instance for example you can just configure the proxy",
    "start": "929440",
    "end": "935199"
  },
  {
    "text": "to behave like um like an errors service",
    "start": "935199",
    "end": "941319"
  },
  {
    "text": "and ebart will talk about security yeah so concerning security there is again",
    "start": "941680",
    "end": "948560"
  },
  {
    "text": "quite a few features that the service mesh can bring to the table so first of all there is uh encryption",
    "start": "948560",
    "end": "955440"
  },
  {
    "text": "um so if you have two microservices uh the communication between the proxies",
    "start": "955440",
    "end": "961120"
  },
  {
    "text": "can be encrypted and you can do you can use mtls for that so that's",
    "start": "961120",
    "end": "966959"
  },
  {
    "text": "mutual tls so it means that both microservices authenticate to one",
    "start": "966959",
    "end": "972320"
  },
  {
    "text": "another so you can actually be sure that microservice1 is actually really talking",
    "start": "972320",
    "end": "977519"
  },
  {
    "text": "to microservice2 and not and that there is no middle attack",
    "start": "977519",
    "end": "983839"
  },
  {
    "text": "um so that's the authentication part",
    "start": "983839",
    "end": "989600"
  },
  {
    "text": "there's also authorization so if microservice1 is allowed to talk to",
    "start": "989600",
    "end": "995160"
  },
  {
    "text": "microservice2 then the proxy can actually make sure that this communication is allowed while",
    "start": "995160",
    "end": "1001519"
  },
  {
    "text": "if there is another microservice that tries to access that second microservice",
    "start": "1001519",
    "end": "1007360"
  },
  {
    "text": "that might fail because there are some routes in the authorization in the service mesh that",
    "start": "1007360",
    "end": "1013839"
  },
  {
    "text": "say that you it is not allowed to call that microservice and you can even limit that",
    "start": "1013839",
    "end": "1020880"
  },
  {
    "text": "to specific http methods so you can say okay this service is allowed to do get methods but not post",
    "start": "1020880",
    "end": "1027839"
  },
  {
    "text": "methods and it could be limited to a specific path like slash customer but not slash",
    "start": "1027839",
    "end": "1034240"
  },
  {
    "text": "order and the like a one additional remark in this regard",
    "start": "1034240",
    "end": "1039839"
  },
  {
    "text": "concerning well for example encryption you might wonder what about the communication",
    "start": "1040160",
    "end": "1046720"
  },
  {
    "text": "between the proxy and the microservice well that never leaves any machine and it's not observable from the outside so",
    "start": "1046720",
    "end": "1053440"
  },
  {
    "text": "it's fine that this is not encrypted and there is no authorization and these",
    "start": "1053440",
    "end": "1058480"
  },
  {
    "text": "kinds because it's limited to one machine actually one part if you talk about kubernetes",
    "start": "1058480",
    "end": "1066160"
  },
  {
    "text": "so next is observability that hana is going to talk about",
    "start": "1066160",
    "end": "1072160"
  },
  {
    "text": "yeah so i believe that um service the hype around service measure",
    "start": "1072160",
    "end": "1078400"
  },
  {
    "text": "also lives from the observability part because it's very um",
    "start": "1078400",
    "end": "1084320"
  },
  {
    "text": "interesting what you can see of your application without doing any changes to your code",
    "start": "1084320",
    "end": "1091360"
  },
  {
    "text": "and so the the dashboards that you can see are pretty um impressive",
    "start": "1091360",
    "end": "1097840"
  },
  {
    "text": "um and i will show you the dashboard for uh linkedin istio so um this is the",
    "start": "1097840",
    "end": "1103919"
  },
  {
    "text": "dashboard of linkedin so you have a graph of your services this is a very",
    "start": "1103919",
    "end": "1109200"
  },
  {
    "text": "tiny application and you also have statistics um like the success rates requests per second",
    "start": "1109200",
    "end": "1116480"
  },
  {
    "text": "the the performance of the system [Music] also broken down to paths um and there are",
    "start": "1116480",
    "end": "1123919"
  },
  {
    "text": "there's a lot more um in the dashboard that i i didn't show in the video now but i think you get the",
    "start": "1123919",
    "end": "1130559"
  },
  {
    "text": "you get an impression of what you can see um without as i said changing",
    "start": "1130559",
    "end": "1137200"
  },
  {
    "text": "anything in your code just by observing the the traffic um at the proxy side",
    "start": "1137200",
    "end": "1143200"
  },
  {
    "text": "and collecting it and uh you know building on building graphs and",
    "start": "1143200",
    "end": "1148960"
  },
  {
    "text": "tables about that and the dashboard of istio has a",
    "start": "1148960",
    "end": "1155039"
  },
  {
    "text": "slightly different approach um i will also show you a video of that",
    "start": "1155039",
    "end": "1160240"
  },
  {
    "text": "and you have a much more graphical approach and you also see the logs",
    "start": "1160240",
    "end": "1167440"
  },
  {
    "text": "that show that traffic is encrypted and you also see traffic flow floating",
    "start": "1167440",
    "end": "1172559"
  },
  {
    "text": "so sometimes you see some bubbles going from one surface to it to another like here um you can also see request per",
    "start": "1172559",
    "end": "1180559"
  },
  {
    "text": "second latency and request percentage distribution um just as you see in the menu",
    "start": "1180559",
    "end": "1187840"
  },
  {
    "text": "um and much more also um so",
    "start": "1187840",
    "end": "1194240"
  },
  {
    "text": "this is uh yeah this can be very impressive when you didn't have any",
    "start": "1194240",
    "end": "1200080"
  },
  {
    "text": "uh graphical or uh insight into your application",
    "start": "1200080",
    "end": "1205200"
  },
  {
    "text": "um yeah this this dashboard is uh is called kiali and it's integrated with istio um",
    "start": "1205200",
    "end": "1212880"
  },
  {
    "text": "i think it's possible that it will be available for other service measures as well but uh right now this is the dashboard",
    "start": "1212880",
    "end": "1219360"
  },
  {
    "text": "of sto only so you can see that you get a lot of",
    "start": "1219360",
    "end": "1225919"
  },
  {
    "text": "observability or insight to your microservice application",
    "start": "1225919",
    "end": "1232240"
  },
  {
    "text": "by by installing a service mesh what you get beyond these dashboards is",
    "start": "1232240",
    "end": "1238559"
  },
  {
    "text": "um most in most service measures a pre-configured instance of prometheus grafana and often even jaeger which is a",
    "start": "1238559",
    "end": "1246320"
  },
  {
    "text": "popular tracing back end um so you will get an instance of of these",
    "start": "1246320",
    "end": "1252720"
  },
  {
    "text": "services with prepared dashboards and they will collect the metrics that the proxies collect and",
    "start": "1252720",
    "end": "1261679"
  },
  {
    "text": "fill the dashboard with this data and you can even you can even get this",
    "start": "1261679",
    "end": "1267039"
  },
  {
    "text": "data from the prometheus instance for your own graphical tool for example or for your",
    "start": "1267039",
    "end": "1273840"
  },
  {
    "text": "own promising his dashboard",
    "start": "1273840",
    "end": "1277840"
  },
  {
    "text": "i mentioned jaeger already so that this means that service measures also support",
    "start": "1278960",
    "end": "1284159"
  },
  {
    "text": "tracing so they they are many many service machine implementations are",
    "start": "1284159",
    "end": "1289760"
  },
  {
    "text": "capable of sending the tracing data to a back end what you would still have to do is you",
    "start": "1289760",
    "end": "1296000"
  },
  {
    "text": "have to pass the incoming tracing headers to outgoing requests but the risk can be done",
    "start": "1296000",
    "end": "1302799"
  },
  {
    "text": "by service mesh um and another feature of observability is",
    "start": "1302799",
    "end": "1309919"
  },
  {
    "text": "access logs so um you can generate as access locks since the proxy sees all the traffic of",
    "start": "1309919",
    "end": "1315760"
  },
  {
    "text": "course that's uh for free for for the technology to do",
    "start": "1315760",
    "end": "1321039"
  },
  {
    "text": "um and linkedin has has a different approach to that it can let you tap into live traffic for for",
    "start": "1321039",
    "end": "1328720"
  },
  {
    "text": "debugging purposes for example yeah so yeah so",
    "start": "1328720",
    "end": "1335039"
  },
  {
    "text": "uh that's about the features of service mesh and i think it's uh it's very important to also talk about challenges",
    "start": "1335039",
    "end": "1343039"
  },
  {
    "start": "1342000",
    "end": "1565000"
  },
  {
    "text": "yeah so so far we could easily say well look here are the features and actually you don't need to change any of your",
    "start": "1343039",
    "end": "1349280"
  },
  {
    "text": "code you will get all those features for free so why wouldn't you do it well because it as usual there is a trade-off",
    "start": "1349280",
    "end": "1355760"
  },
  {
    "text": "and we need to talk about the challenges too so one of the challenges is that there is some additional configuration",
    "start": "1355760",
    "end": "1362880"
  },
  {
    "text": "that you need to do so if you have that example of the traffic split where 90 of the traffic goes to one specific service",
    "start": "1362880",
    "end": "1369919"
  },
  {
    "text": "instance and 10 percent goes to the other one where that might be 10 lines of yammer",
    "start": "1369919",
    "end": "1375120"
  },
  {
    "text": "if you use think idiot or it might be 30 lines of yammer if you use istio and",
    "start": "1375120",
    "end": "1380880"
  },
  {
    "text": "some people do enjoy at least i i think that there might be some people who actually do enjoy writing yamo but there",
    "start": "1380880",
    "end": "1387200"
  },
  {
    "text": "are also people who don't really like that and it might be somewhat cumbersome to do",
    "start": "1387200",
    "end": "1392240"
  },
  {
    "text": "that there is another thing that i would like to add well if you look at this",
    "start": "1392240",
    "end": "1398240"
  },
  {
    "text": "the question is what is the alternative so uh it's not enough to say uh here are",
    "start": "1398240",
    "end": "1404240"
  },
  {
    "text": "challenges and this is a problem and you shouldn't use my service meshes if you do need those features",
    "start": "1404240",
    "end": "1410880"
  },
  {
    "text": "you need to come up with an alternative that might be even worse then there is the additional debugging",
    "start": "1410880",
    "end": "1417760"
  },
  {
    "text": "complexity so if some traffic goes into your system it passes the ingress",
    "start": "1417760",
    "end": "1424000"
  },
  {
    "text": "controller it goes to the microservice so the first thing that might fail is the english controller and the",
    "start": "1424000",
    "end": "1429360"
  },
  {
    "text": "communication to the microservice the next thing that might feel is the communication from the microservice to",
    "start": "1429360",
    "end": "1435279"
  },
  {
    "text": "the other microservice proxy might fail the other proxy on the other side might",
    "start": "1435279",
    "end": "1441120"
  },
  {
    "text": "fail the original microservice might fail there is the control plane that takes",
    "start": "1441120",
    "end": "1446960"
  },
  {
    "text": "care of all the the proxies and configures them that one might fail kubernetes might fail the overlay",
    "start": "1446960",
    "end": "1452880"
  },
  {
    "text": "network might fail and also obviously the hardware welfare",
    "start": "1452880",
    "end": "1458159"
  },
  {
    "text": "some of these components are not specific to service measures so obviously kubernetes is not something",
    "start": "1458159",
    "end": "1465039"
  },
  {
    "text": "that is part of a service mesh because the service measures typically built on top of that but there is just more stuff",
    "start": "1465039",
    "end": "1473440"
  },
  {
    "text": "and more stuff can therefore go wrong and that means that debugging becomes more complex",
    "start": "1473440",
    "end": "1479360"
  },
  {
    "text": "because you need to figure out what is actually broken and that's a more complex problem now then there is",
    "start": "1479360",
    "end": "1486960"
  },
  {
    "text": "benchmarking and performance so there is some performance impact there",
    "start": "1486960",
    "end": "1492880"
  },
  {
    "text": "um and what istio says is is it's about three milliseconds",
    "start": "1492880",
    "end": "1499279"
  },
  {
    "text": "actually i'm quite thankful for that statement because it keeps me from doing benchmarking myself",
    "start": "1499279",
    "end": "1505360"
  },
  {
    "text": "but and it gives at least a rough number but",
    "start": "1505360",
    "end": "1511200"
  },
  {
    "text": "you need to figure out that there is more so there is cpu and memory resources that the proxies and the",
    "start": "1511360",
    "end": "1517440"
  },
  {
    "text": "control plane and these things will consume and uh what you actually the the latency",
    "start": "1517440",
    "end": "1524480"
  },
  {
    "text": "and the resource consumption that you actually see in production well that is something that depends on",
    "start": "1524480",
    "end": "1530400"
  },
  {
    "text": "your architecture and on the traffic that you're having if you have a lot of if you have chatty",
    "start": "1530400",
    "end": "1536080"
  },
  {
    "text": "micro services that talk a lot to one another you will have a huge impact of a service mesh",
    "start": "1536080",
    "end": "1543760"
  },
  {
    "text": "as if you would just have a few micro services that hardly talk to one another",
    "start": "1543760",
    "end": "1549360"
  },
  {
    "text": "so you should probably do your own benchmarking and figure out what the impact of a service mesh is to",
    "start": "1549360",
    "end": "1556640"
  },
  {
    "text": "your [Music] architecture um and that leads to",
    "start": "1556640",
    "end": "1563200"
  },
  {
    "text": "the next question do you actually need a service mesh and what are the alternatives and that is",
    "start": "1563200",
    "end": "1568640"
  },
  {
    "start": "1565000",
    "end": "1742000"
  },
  {
    "text": "what hana is going to talk about yeah so i think this is the the main question",
    "start": "1568640",
    "end": "1575120"
  },
  {
    "text": "that a lot of people have um if they need a service mesh or not um and i think the",
    "start": "1575120",
    "end": "1582240"
  },
  {
    "text": "the first question to ask yourself is do you need the features that we just",
    "start": "1582240",
    "end": "1588480"
  },
  {
    "text": "mentioned and did you already solve them in your system and are you happy with the way",
    "start": "1588480",
    "end": "1595440"
  },
  {
    "text": "you solve them or is there pain connected to these features and if you didn't solve these",
    "start": "1595440",
    "end": "1603520"
  },
  {
    "text": "challenges or if there's pain then um from what from what i see",
    "start": "1603520",
    "end": "1609919"
  },
  {
    "text": "you have two and a half options so uh two the first is to use libraries just like",
    "start": "1609919",
    "end": "1616799"
  },
  {
    "text": "we did for for the last years um the half is to implement it on your own",
    "start": "1616799",
    "end": "1622640"
  },
  {
    "text": "which i would not recommend so this is why this is the half option and the third is to use",
    "start": "1622640",
    "end": "1629760"
  },
  {
    "text": "automation just like a surface mesh and so you cannot compare the",
    "start": "1629760",
    "end": "1637520"
  },
  {
    "text": "the features of a service mesh against nothing you have to compare it to implementation um with help of the",
    "start": "1637520",
    "end": "1643039"
  },
  {
    "text": "library or even your own code um so this is the choice that i think you",
    "start": "1643039",
    "end": "1650240"
  },
  {
    "text": "got but i would like to take even a step back and think for a moment think about",
    "start": "1650240",
    "end": "1657760"
  },
  {
    "text": "why we actually need all these features um and if you can avoid needing those",
    "start": "1657760",
    "end": "1663440"
  },
  {
    "text": "features at all of course i'm not i don't mean not to write software",
    "start": "1663440",
    "end": "1668960"
  },
  {
    "text": "but i mean to think about architecture maybe a bit a bit longer um before just",
    "start": "1668960",
    "end": "1675600"
  },
  {
    "text": "going with the the default microservice approach um and",
    "start": "1675600",
    "end": "1681760"
  },
  {
    "text": "i say this because i think we have many options that we might not be aware",
    "start": "1681760",
    "end": "1687279"
  },
  {
    "text": "of so um one way to go is of course with synchronous microservice architecture",
    "start": "1687279",
    "end": "1692960"
  },
  {
    "text": "which is the the architecture that surface mesh is built for",
    "start": "1692960",
    "end": "1699360"
  },
  {
    "text": "but there's also asynchronous communication that you can use to um",
    "start": "1699360",
    "end": "1705520"
  },
  {
    "text": "to prevent the need for for for example monitoring or",
    "start": "1705520",
    "end": "1711440"
  },
  {
    "text": "routing and also resilience and also",
    "start": "1711440",
    "end": "1717440"
  },
  {
    "text": "there's also architecture that is not microservice so you could even think about a very",
    "start": "1717440",
    "end": "1723600"
  },
  {
    "text": "strong module modulized piece of software that you deploy as a monolith",
    "start": "1723600",
    "end": "1728960"
  },
  {
    "text": "um and i really believe that this is something that we should think about more um",
    "start": "1728960",
    "end": "1735679"
  },
  {
    "text": "when talking about the challenges of microservices",
    "start": "1735679",
    "end": "1740799"
  },
  {
    "text": "which leads me to the conclusion that evan will do",
    "start": "1740799",
    "end": "1746080"
  },
  {
    "start": "1742000",
    "end": "1941000"
  },
  {
    "text": "yeah so approaching microservices i think the first question is whether the architecture",
    "start": "1746080",
    "end": "1752320"
  },
  {
    "text": "that you've chosen is an architecture that makes it well desirable to have a",
    "start": "1752320",
    "end": "1759679"
  },
  {
    "text": "service mesh and the funny thing about that is and that is what what hannah was talking about",
    "start": "1759679",
    "end": "1766480"
  },
  {
    "text": "just in in the previous section of the presentation uh if you do need a service mesh you're",
    "start": "1766480",
    "end": "1771600"
  },
  {
    "text": "probably looking at the synchronous architecture with a lot of microservices talking to one another that are quite",
    "start": "1771600",
    "end": "1777120"
  },
  {
    "text": "shitty because then you have a lot of communication and resilience really pays off and you can wiretap into the",
    "start": "1777120",
    "end": "1783760"
  },
  {
    "text": "communication you have all the observability and that really means something because you have so much communication but then you also have",
    "start": "1783760",
    "end": "1790960"
  },
  {
    "text": "probably a lot of problems because a lot of network traffic means that the system will be slow because there's so",
    "start": "1790960",
    "end": "1797279"
  },
  {
    "text": "much network latency every incoming request causes a lot of other requests to happen",
    "start": "1797279",
    "end": "1803120"
  },
  {
    "text": "and it's also probably unreliable because the net if the network fails or if one",
    "start": "1803120",
    "end": "1809679"
  },
  {
    "text": "of those services fails then there will be a huge problem so maybe it would be worth to",
    "start": "1809679",
    "end": "1815279"
  },
  {
    "text": "use an alternative architecture um then the question is which",
    "start": "1815279",
    "end": "1822240"
  },
  {
    "text": "feature do you actually need routing resilient security and so on and so on and there are some features where i have",
    "start": "1822240",
    "end": "1828880"
  },
  {
    "text": "a hard time that you are imagining that you could do it without a service mesh so for example security in that case you",
    "start": "1828880",
    "end": "1835440"
  },
  {
    "text": "would need to distribute certificates um say securely to all those",
    "start": "1835440",
    "end": "1841840"
  },
  {
    "text": "microservices that's a tough problem so maybe you want to use the service mesh then and actually you can strip down",
    "start": "1841840",
    "end": "1848240"
  },
  {
    "text": "service measures like istio to just provide that to just encrypt communication and leave out all the",
    "start": "1848240",
    "end": "1855360"
  },
  {
    "text": "other features there are alternatives so you could use some libraries instead so there are",
    "start": "1855360",
    "end": "1862000"
  },
  {
    "text": "libraries like resilience4j that allow you to do resilience so you could use them instead",
    "start": "1862000",
    "end": "1867760"
  },
  {
    "text": "and then there are there is the impact on performance on configurations on and the",
    "start": "1867760",
    "end": "1874960"
  },
  {
    "text": "questions whether you're willing to pay that that overhead if you're interested in more information",
    "start": "1874960",
    "end": "1881440"
  },
  {
    "text": "there is the service mesh comparison that we already talked about there is a blog post that hannah did",
    "start": "1881440",
    "end": "1887360"
  },
  {
    "text": "about how you can be happy without using a service mesh so that is a blog post that",
    "start": "1887360",
    "end": "1893200"
  },
  {
    "text": "talks very detailed about why you would probably not want to use service mesh",
    "start": "1893200",
    "end": "1898399"
  },
  {
    "text": "there are the tutorials for link id and istio there is a sample application that we did for both istio and link id and it",
    "start": "1898399",
    "end": "1905360"
  },
  {
    "text": "should be pretty easy to get to to run it on your own machine we did",
    "start": "1905360",
    "end": "1910960"
  },
  {
    "text": "an interview with the go to con with the go to book club about service meshes so that's a good",
    "start": "1910960",
    "end": "1916880"
  },
  {
    "text": "another good source where you get a video of i believe almost half an hour",
    "start": "1916880",
    "end": "1921919"
  },
  {
    "text": "and last but not least there is the service mesh primer so that's this one that gives you a short overview about",
    "start": "1921919",
    "end": "1928799"
  },
  {
    "text": "service meshes uh so there and and the ebook is is free so it's a it's about 40",
    "start": "1928799",
    "end": "1935200"
  },
  {
    "text": "pages and it well tells you everything that you need to know about service meshes",
    "start": "1935200",
    "end": "1941519"
  },
  {
    "start": "1941000",
    "end": "1961000"
  },
  {
    "text": "so thanks a lot for uh having us thanks a lot for listening to our talk",
    "start": "1941519",
    "end": "1949639"
  }
]