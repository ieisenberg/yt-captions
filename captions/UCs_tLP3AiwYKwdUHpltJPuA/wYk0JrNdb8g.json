[
  {
    "start": "0",
    "end": "84000"
  },
  {
    "text": "so today i'm going to talk about building a gateway for a distributed system like a",
    "start": "13679",
    "end": "18720"
  },
  {
    "text": "microservices architecture and we're going to focus specifically on resilience and security now quick paul",
    "start": "18720",
    "end": "25680"
  },
  {
    "text": "how many of you are using java raise your hand what about spring do you use spring",
    "start": "25680",
    "end": "34718"
  },
  {
    "text": "nice now the next question do you use java 17",
    "start": "34960",
    "end": "41200"
  },
  {
    "text": "two people nice yeah so are you planning to migrate to java 17 at some point",
    "start": "42640",
    "end": "49038"
  },
  {
    "text": "yeah yeah it's it's really great not just for the features but also for uh improved performance and security i'm going to",
    "start": "50399",
    "end": "57199"
  },
  {
    "text": "use java 17 today i'm thomas i work as a senior software engineer at systematic a danish software",
    "start": "57199",
    "end": "63359"
  },
  {
    "text": "company i'm really passionate about anything cloud native i'm also writing this book about spring boots and",
    "start": "63359",
    "end": "69520"
  },
  {
    "text": "kubernetes i'm a big supporter of open source technologies i like contributing to",
    "start": "69520",
    "end": "75680"
  },
  {
    "text": "several projects when i have time including spring cloud and spring security before talking technologies i'd like to",
    "start": "75680",
    "end": "82320"
  },
  {
    "text": "focus on the api gateway pattern so which problems can we solve using a",
    "start": "82320",
    "end": "88159"
  },
  {
    "start": "84000",
    "end": "334000"
  },
  {
    "text": "gateway in our infrastructure let's let's look at the into some scenarios the first scenarios is about",
    "start": "88159",
    "end": "95759"
  },
  {
    "text": "systems where we have different clients with different needs with different that require",
    "start": "95759",
    "end": "100799"
  },
  {
    "text": "different apis so for example you have iot devices you have mobile applications",
    "start": "100799",
    "end": "106079"
  },
  {
    "text": "web applications and some of them might require different apis but you don't want necessarily to",
    "start": "106079",
    "end": "112079"
  },
  {
    "text": "update all your services in the back end to support different api so having",
    "start": "112079",
    "end": "117680"
  },
  {
    "text": "this gateway in the middle converting and exposing a more customized and tailored api to your clients",
    "start": "117680",
    "end": "124719"
  },
  {
    "text": "might be useful another scenario is when you have a monolith and you decide that you want",
    "start": "124719",
    "end": "130959"
  },
  {
    "text": "to start extracting some functionality as microservices so we call it uh strangling the monolith when you do that",
    "start": "130959",
    "end": "138080"
  },
  {
    "text": "you don't want to disrupt the services for the clients so having a gateway in",
    "start": "138080",
    "end": "143520"
  },
  {
    "text": "between we can guarantee an uh consistent and coherent experience for the clients while we do all these",
    "start": "143520",
    "end": "149840"
  },
  {
    "text": "changes in the back end so we decouple the two things next we might want to provide a unified",
    "start": "149840",
    "end": "156080"
  },
  {
    "text": "interface for the clients not just might we should do that because if we switch",
    "start": "156080",
    "end": "161519"
  },
  {
    "text": "to microservices we don't want clients being responsible for keeping track of all the microservices and",
    "start": "161519",
    "end": "168080"
  },
  {
    "text": "discovering them the clients should call uh directly the gateway and then the",
    "start": "168080",
    "end": "173440"
  },
  {
    "text": "gateway is responsible for keeping track of all the different microservices so this is also a part of the coupling",
    "start": "173440",
    "end": "179599"
  },
  {
    "text": "clients from what whatever happens in the backend so we're free to change things in the back end without",
    "start": "179599",
    "end": "185680"
  },
  {
    "text": "having necessarily to change the clients and finally since we have this component available that represents",
    "start": "185680",
    "end": "193360"
  },
  {
    "text": "the entry point to our system we might want to use it in order to implement some cross-cutting concerns",
    "start": "193360",
    "end": "200239"
  },
  {
    "text": "like resilience and security is the ingress point to our system so it's convenient to put some logic in there",
    "start": "200239",
    "end": "206720"
  },
  {
    "text": "instead of duplicating it everywhere in a distributed system this one is an example of a",
    "start": "206720",
    "end": "212959"
  },
  {
    "text": "microservices architecture you can see we have different types of clients iot mobile browser-based applications like a",
    "start": "212959",
    "end": "220159"
  },
  {
    "text": "single page application with angular we have a gateway and then we have some microservices in",
    "start": "220159",
    "end": "226080"
  },
  {
    "text": "the backend in this example they are springboot applications but they don't have to be spring with applications we",
    "start": "226080",
    "end": "231599"
  },
  {
    "text": "can have different services using different languages and different frameworks it doesn't matter today i'm",
    "start": "231599",
    "end": "237120"
  },
  {
    "text": "going to show you how to implement the gateway with spring cloud gateway but that's that doesn't mean that you have",
    "start": "237120",
    "end": "244000"
  },
  {
    "text": "to use springboot everywhere in your infrastructure in particular i want to",
    "start": "244000",
    "end": "249599"
  },
  {
    "text": "focus on what happens when we add a gateway because we are adding a new component to the system a new component we have to",
    "start": "249599",
    "end": "256720"
  },
  {
    "text": "implement we have to maintain we have to operate so we need to consider uh pros and cons",
    "start": "256720",
    "end": "263120"
  },
  {
    "text": "of this choice and also we are adding an extra hop in the in the traffic flow that maybe",
    "start": "263120",
    "end": "270240"
  },
  {
    "text": "most cases it doesn't matter if it's done in an efficient way but in some use",
    "start": "270240",
    "end": "275759"
  },
  {
    "text": "cases it might be a problem so as always there's no silver bullets we we need to consider all the trade-offs when we make",
    "start": "275759",
    "end": "283440"
  },
  {
    "text": "a decision today we're going to focus on a simplified version of the library system",
    "start": "283440",
    "end": "288880"
  },
  {
    "text": "we have the users which are members of the library they call the edge service the edge service is the",
    "start": "288880",
    "end": "296080"
  },
  {
    "text": "component that implements not only the api gateway but also all those cross-cutting concerns that i mentioned",
    "start": "296080",
    "end": "301759"
  },
  {
    "text": "earlier so we call it an edge service is at the edge of the system and besides the gateway it also takes",
    "start": "301759",
    "end": "308400"
  },
  {
    "text": "care of other different cross-cutting concerns then we have several services in the back end",
    "start": "308400",
    "end": "315680"
  },
  {
    "text": "today we're going to focus on book service as an example but the same will apply no matter how many",
    "start": "315680",
    "end": "322320"
  },
  {
    "text": "services we have in the back end or their languages and their frameworks so let's get started and look into this",
    "start": "322320",
    "end": "330479"
  },
  {
    "text": "sample application so i have already built the book service",
    "start": "330479",
    "end": "336880"
  },
  {
    "start": "334000",
    "end": "878000"
  },
  {
    "text": "application so we can have a look it's a very simple springboot application we have the main method",
    "start": "336880",
    "end": "343520"
  },
  {
    "text": "initializing the application then i use the record in order to model",
    "start": "343520",
    "end": "348639"
  },
  {
    "text": "a book domain entity with just one field the book title and then we have a rest controller so we",
    "start": "348639",
    "end": "354240"
  },
  {
    "text": "want to expose a get endpoint slash books that returns a collection of",
    "start": "354240",
    "end": "359680"
  },
  {
    "text": "hard-coded books so to make things easier i'm not using any persistent technology here it's a reactive",
    "start": "359680",
    "end": "367120"
  },
  {
    "text": "application i'm using the reactive stack provided by spring so you can notice that i'm not using i'm not returning a",
    "start": "367120",
    "end": "373120"
  },
  {
    "text": "collection of book i'm returning a flux of book flux it means that at some point eventually",
    "start": "373120",
    "end": "380000"
  },
  {
    "text": "we're gonna get a collection of values but it's a synchronous",
    "start": "380000",
    "end": "385280"
  },
  {
    "text": "and i'm also logging a message so we can keep track of what happens when we call the application",
    "start": "385280",
    "end": "391520"
  },
  {
    "text": "so let me run it and we can see how it works",
    "start": "391520",
    "end": "396160"
  },
  {
    "text": "now for sending http request i'm using a convenient utility called httpi",
    "start": "400639",
    "end": "405840"
  },
  {
    "text": "which is usually referred to as curl but for humans and i think that's really true because i can just",
    "start": "405840",
    "end": "412080"
  },
  {
    "text": "write http then column 9001 which is the port where my application is running in my localhost and then slash books",
    "start": "412080",
    "end": "420880"
  },
  {
    "text": "and they get the list back and this is fine so our next step now is to integrate an api gateway in our",
    "start": "420880",
    "end": "427759"
  },
  {
    "text": "architecture so the first thing that i want to do there is going to start dot spring dot io",
    "start": "427759",
    "end": "435120"
  },
  {
    "text": "from here i can initialize a new springboot project either from here or there's also integration with common java editors like intellij",
    "start": "435120",
    "end": "442479"
  },
  {
    "text": "so i will initialize a new gradle project i want to use springboot 2.6",
    "start": "442479",
    "end": "448479"
  },
  {
    "text": "the application is edge service and i'm using the latest and greatest java 17.",
    "start": "448479",
    "end": "455280"
  },
  {
    "text": "the only dependency i need here for a basic functionality in a gateway is the spring cloud gateway dependency nothing",
    "start": "455280",
    "end": "462479"
  },
  {
    "text": "else at this point i can generate the project and open it in my ide",
    "start": "462479",
    "end": "468000"
  },
  {
    "text": "i have already done that and um i have actually pre-configured both both",
    "start": "468000",
    "end": "474560"
  },
  {
    "text": "book service and edge service with some monitoring and tracing because it will uh help us later to visualize the",
    "start": "474560",
    "end": "481199"
  },
  {
    "text": "changes that we're going to make in the gateway but besides that it's an empty application so i can open the java class",
    "start": "481199",
    "end": "489199"
  },
  {
    "text": "so we can see we have the main method initializing the class and it's empty so the first step since we want to",
    "start": "489199",
    "end": "495919"
  },
  {
    "text": "introduce this gateway in the architecture is making sure that if we send a request to the gateway is routed",
    "start": "495919",
    "end": "502080"
  },
  {
    "text": "to book service so the first step is defining the routing i can configure it either in",
    "start": "502080",
    "end": "508240"
  },
  {
    "text": "java or kodlin if you're using kodlin oh",
    "start": "508240",
    "end": "513680"
  },
  {
    "text": "are you using kodlin good yeah so you can also use a codrin",
    "start": "513680",
    "end": "520000"
  },
  {
    "text": "or groovy when you work with a spring yes i'm using java i can use the java dsl for spring cloud gateway",
    "start": "520000",
    "end": "526640"
  },
  {
    "text": "or i can use configuration properties now i'm gonna show you how to do that via configuration properties in yaml not",
    "start": "526640",
    "end": "533519"
  },
  {
    "text": "because i prefer yaml over java because java would make things easier but because in a real production scenario",
    "start": "533519",
    "end": "541120"
  },
  {
    "text": "i would use the configuration properties to configure routing because it's something that you probably want to customize depending on the deployment",
    "start": "541120",
    "end": "547760"
  },
  {
    "text": "environment so i don't want to do that in java it's part of the externalized configuration principle",
    "start": "547760",
    "end": "553760"
  },
  {
    "text": "so i'll open the yaml file here we can ignore for now the existing configuration",
    "start": "553760",
    "end": "561959"
  },
  {
    "text": "and what i want to do here is adding a new section for a spring cloud gateway",
    "start": "563920",
    "end": "571040"
  },
  {
    "text": "we have a section for routes and i can define the first route which is the route to",
    "start": "571279",
    "end": "576560"
  },
  {
    "text": "the book service so i define it as a book route this route will forward request to book",
    "start": "576560",
    "end": "583200"
  },
  {
    "text": "service so as a uri i will pass",
    "start": "583200",
    "end": "588720"
  },
  {
    "text": "localhost 9001 but this is only useful when i'm working",
    "start": "588839",
    "end": "594480"
  },
  {
    "text": "locally i want to be able to override this value in a convenient way so i'm going to introduce an environment",
    "start": "594480",
    "end": "600880"
  },
  {
    "text": "variable let's call it book service url",
    "start": "600880",
    "end": "607440"
  },
  {
    "text": "and then i keep that as a default value so if i pass an environment variable called book service url i'll use that",
    "start": "607440",
    "end": "612640"
  },
  {
    "text": "value otherwise i have a default which is valid for my local environment",
    "start": "612640",
    "end": "619519"
  },
  {
    "text": "next i need to inform spring cloud gateway when we want to",
    "start": "619519",
    "end": "624560"
  },
  {
    "text": "route the request to book service so which are the conditions and we can do that using predicates",
    "start": "624560",
    "end": "633040"
  },
  {
    "text": "there are many predicates available in the framework they are really nicely documented on the spring",
    "start": "633040",
    "end": "639120"
  },
  {
    "text": "website in our case we want to make it easy so we want to have",
    "start": "639120",
    "end": "644640"
  },
  {
    "text": "a predicate depending on the path so whenever we send the request with the path starting with slash books",
    "start": "644640",
    "end": "652160"
  },
  {
    "text": "then we want to activate this route at this point",
    "start": "652160",
    "end": "657839"
  },
  {
    "text": "the example is actually pretty boring i mean we're just doing some routing any other proxy could do this but the the",
    "start": "657839",
    "end": "664640"
  },
  {
    "text": "real power comes next so once we have a predicate we match a request and we know where to send the request we can",
    "start": "664640",
    "end": "672000"
  },
  {
    "text": "wait before forwarding the request and start doing some processing with this request",
    "start": "672000",
    "end": "677440"
  },
  {
    "text": "and we do that via filters so a simple example would be to add an",
    "start": "677440",
    "end": "682640"
  },
  {
    "text": "http header to the request so i can say add request header",
    "start": "682640",
    "end": "687680"
  },
  {
    "text": "maybe the library system is a multi-tenant application so it might make sense to specify a tenant identifier as a header",
    "start": "687680",
    "end": "695920"
  },
  {
    "text": "acme but that's not just for request once we",
    "start": "695920",
    "end": "701760"
  },
  {
    "text": "eventually send a request to book service we get the response back then we can also do some post processing of that",
    "start": "701760",
    "end": "708800"
  },
  {
    "text": "response before sending it back to the client so in a similar way for example i could add a header to the response",
    "start": "708800",
    "end": "716720"
  },
  {
    "text": "so we're dealing with books so maybe the genre of the books they're fantasy books",
    "start": "716720",
    "end": "724160"
  },
  {
    "text": "and i'll run the application and we can see how it works",
    "start": "724399",
    "end": "729720"
  },
  {
    "text": "there are many filters for different situations supported by sprinkler gateway you can",
    "start": "733120",
    "end": "738320"
  },
  {
    "text": "also implement your own but the existing ones are already very powerful so from now on",
    "start": "738320",
    "end": "743839"
  },
  {
    "text": "all the examples that show about resilience and security they will actually rely on built-in filters we'll",
    "start": "743839",
    "end": "749279"
  },
  {
    "text": "see that in a minute but first we need to ensure that the routing is working so now i'll send again a get request to the",
    "start": "749279",
    "end": "756399"
  },
  {
    "text": "slash books but on port 9000 that's where the edge service is running",
    "start": "756399",
    "end": "763519"
  },
  {
    "text": "and i get the same result as before but now the request has been processed by",
    "start": "764560",
    "end": "770160"
  },
  {
    "text": "edge service you can notice that we have the general custom header",
    "start": "770160",
    "end": "776160"
  },
  {
    "text": "and since i have already pre-configured the application with some monitoring and tracing we can even",
    "start": "776160",
    "end": "781200"
  },
  {
    "text": "visualize in grafana what's going on so first i'll check the logs for uh book",
    "start": "781200",
    "end": "787200"
  },
  {
    "text": "service let's see where they are because",
    "start": "787200",
    "end": "793040"
  },
  {
    "text": "if you remember every time we call book service a new message is locked and that message is enhanced with",
    "start": "793040",
    "end": "799120"
  },
  {
    "text": "two information maybe it's not visible enough",
    "start": "799120",
    "end": "805760"
  },
  {
    "text": "yes so the first information there is the trace id is identifier of the collection",
    "start": "806000",
    "end": "812320"
  },
  {
    "text": "of tasks that together process the request and then the second one is is",
    "start": "812320",
    "end": "818079"
  },
  {
    "text": "called span id so it's the identifier of the specific task that is part of the trace so what i can do is getting this",
    "start": "818079",
    "end": "824639"
  },
  {
    "text": "trace id and then moving on to grafana and in grafana i can query tempo tempo is a",
    "start": "824639",
    "end": "831920"
  },
  {
    "text": "distributed tracing backend which is part of the graphan open source observability stack so i can",
    "start": "831920",
    "end": "839120"
  },
  {
    "text": "copy the trace id here run the query and they get the trace so we can see three",
    "start": "839120",
    "end": "844560"
  },
  {
    "text": "spans the first one is a server type of span it's when we when",
    "start": "844560",
    "end": "850560"
  },
  {
    "text": "the edge service receives the request the second one is a client spend so it's",
    "start": "850560",
    "end": "856399"
  },
  {
    "text": "when edge service forwards the request to book service and the last one finally is book service",
    "start": "856399",
    "end": "863839"
  },
  {
    "text": "we also get extra information about the class that is responsible for processing",
    "start": "863839",
    "end": "868959"
  },
  {
    "text": "the request and the method so we know that it's working",
    "start": "868959",
    "end": "874800"
  },
  {
    "text": "and we have our baseline and that's that's about routing but",
    "start": "875199",
    "end": "880639"
  },
  {
    "start": "878000",
    "end": "890000"
  },
  {
    "text": "that's only the the basic functionality of an api gateway we want to make the whole disability system more",
    "start": "880639",
    "end": "887839"
  },
  {
    "text": "resilient resilience is about having the system available",
    "start": "887839",
    "end": "892959"
  },
  {
    "start": "890000",
    "end": "932000"
  },
  {
    "text": "always even in the face of advertising adversities and failures so we want to build a full tolerant system and",
    "start": "892959",
    "end": "899279"
  },
  {
    "text": "whenever we have a distributed system we need to consider the fallacies of distributed computing so the first",
    "start": "899279",
    "end": "905199"
  },
  {
    "text": "example that comes to mind is the reliability of the network the network is not reliable so what happens if",
    "start": "905199",
    "end": "911760"
  },
  {
    "text": "the request that edge service sends to book service gets lost or maybe it arrives",
    "start": "911760",
    "end": "917760"
  },
  {
    "text": "to destination but then the response gets lost or maybe just book service is",
    "start": "917760",
    "end": "923279"
  },
  {
    "text": "momentarily unavailable that can happen as well it might be momentarily overloaded so it cannot really process",
    "start": "923279",
    "end": "929440"
  },
  {
    "text": "that request one thing that we can do is adopting a retry pattern so we can retry the",
    "start": "929440",
    "end": "935519"
  },
  {
    "start": "932000",
    "end": "951000"
  },
  {
    "text": "request a few times to see if the situation changed this is specifically useful if",
    "start": "935519",
    "end": "941920"
  },
  {
    "text": "it's a temporary issue or a network issue and we can implement this as a filter",
    "start": "941920",
    "end": "949360"
  },
  {
    "text": "so i'll go back to the project and in this properties file i'll add a",
    "start": "949360",
    "end": "957120"
  },
  {
    "start": "951000",
    "end": "1084000"
  },
  {
    "text": "new filter so the previous filters were really basic filters so i use this compact syntax for the retry filter i",
    "start": "957120",
    "end": "964399"
  },
  {
    "text": "will use an expanded one because we need to provide some parameters so this is a built-in filter for retrying request",
    "start": "964399",
    "end": "971680"
  },
  {
    "text": "and then we need some arguments for example we want to retry up to three times",
    "start": "971680",
    "end": "977120"
  },
  {
    "text": "retrying request might be dangerous because uh we don't know what happened",
    "start": "977120",
    "end": "983519"
  },
  {
    "text": "why the we didn't get a successful response maybe book service process the request but the response got lost so",
    "start": "983519",
    "end": "990639"
  },
  {
    "text": "what happens if we execute the same request twice that's where we need to consider item",
    "start": "990639",
    "end": "996240"
  },
  {
    "text": "potency so for get request for example by design they should be ad important and that's fine to retry but if you have",
    "start": "996240",
    "end": "1002639"
  },
  {
    "text": "a post request maybe it's not a good idea to retry the request because you might end",
    "start": "1002639",
    "end": "1007759"
  },
  {
    "text": "up having an inconsistent state in book service",
    "start": "1007759",
    "end": "1013199"
  },
  {
    "text": "we want to retry in this case only gets request get request",
    "start": "1013519",
    "end": "1019440"
  },
  {
    "text": "then we don't want to retry right away like one retry attempt after",
    "start": "1019600",
    "end": "1025199"
  },
  {
    "text": "the other because we might if book service is momentary and available we might risk to really send a dos attack",
    "start": "1025199",
    "end": "1031199"
  },
  {
    "text": "to it it doesn't really help it recover if we keep uh bombing with the request so what",
    "start": "1031199",
    "end": "1038160"
  },
  {
    "text": "we do is adopting a backup strategy the backup strategy means that every",
    "start": "1038160",
    "end": "1043760"
  },
  {
    "text": "each retry attempt uh waits a bit longer before being uh",
    "start": "1043760",
    "end": "1048960"
  },
  {
    "text": "executed so we wait with uh increasing delays we send retry attempts so that we give book service a",
    "start": "1048960",
    "end": "1055919"
  },
  {
    "text": "chance to recover and i can provide some extra configuration for this strategy as well",
    "start": "1055919",
    "end": "1061440"
  },
  {
    "text": "for example the first back off could be of 50 milliseconds and i'm i want to allow up",
    "start": "1061440",
    "end": "1068160"
  },
  {
    "text": "to 500 milliseconds of backup and this is it for a retries it's a",
    "start": "1068160",
    "end": "1076000"
  },
  {
    "text": "built-in filter but this doesn't always help",
    "start": "1076000",
    "end": "1081280"
  },
  {
    "text": "for example what about all the other requests the post request what about",
    "start": "1081280",
    "end": "1087600"
  },
  {
    "start": "1084000",
    "end": "1210000"
  },
  {
    "text": "other situations where the error is not temporary retries help if we have",
    "start": "1087600",
    "end": "1093039"
  },
  {
    "text": "temporary errors but if the system is down for a while we want to fail fast that's another",
    "start": "1093039",
    "end": "1099360"
  },
  {
    "text": "principle of resilience fail fast and deal with the failure so instead of keep sending requests maybe for several",
    "start": "1099360",
    "end": "1106320"
  },
  {
    "text": "minutes even if book service is done we could just send back an error to the client or even better",
    "start": "1106320",
    "end": "1112480"
  },
  {
    "text": "we want to allow a graceful degradation of functionality so we could fall back to",
    "start": "1112480",
    "end": "1117520"
  },
  {
    "text": "some default behavior so maybe we have some caching in place we have cached the previous response from the book service",
    "start": "1117520",
    "end": "1124000"
  },
  {
    "text": "so we could return that one and we can do that with circuit breakers and this pattern is not only useful uh in the",
    "start": "1124000",
    "end": "1130000"
  },
  {
    "text": "gateway but also in any other application where you have the situation that you are depending on some other",
    "start": "1130000",
    "end": "1135280"
  },
  {
    "text": "service so it's to make the integration point more resilient so we have overall",
    "start": "1135280",
    "end": "1140880"
  },
  {
    "text": "a more stable system circuit breakers are based on three states",
    "start": "1140880",
    "end": "1146320"
  },
  {
    "text": "we have this state diagram the inspiration comes from electric circuits so the default state is a circuit which",
    "start": "1146320",
    "end": "1153760"
  },
  {
    "text": "is closed when it's closed it means that traffic can flow from edge service to",
    "start": "1153760",
    "end": "1159440"
  },
  {
    "text": "book service but if there are a lot of failures that go",
    "start": "1159440",
    "end": "1165520"
  },
  {
    "text": "above a certain threshold then the circuit breaker trips and the circuit becomes open when it's open no traffic",
    "start": "1165520",
    "end": "1172720"
  },
  {
    "text": "goes through it will wait in that state for a while then at some point we'll switch to an",
    "start": "1172720",
    "end": "1179120"
  },
  {
    "text": "half open state it's sort of an exploratory state we allow just a few requests to see if the situation changed",
    "start": "1179120",
    "end": "1186160"
  },
  {
    "text": "so if the book service is back up and running available again if it is then the",
    "start": "1186160",
    "end": "1193120"
  },
  {
    "text": "circuit becomes closed again otherwise it goes back to being open an example can clarify how it works",
    "start": "1193120",
    "end": "1201600"
  },
  {
    "text": "for this example we have a filter a circuit breaker filter in a spring cloud gateway but in order to make it",
    "start": "1201679",
    "end": "1207760"
  },
  {
    "text": "work we need to add an extra dependency so if we are using a spring initializer we can add a dependency on spring cloud",
    "start": "1207760",
    "end": "1214880"
  },
  {
    "start": "1210000",
    "end": "1637000"
  },
  {
    "text": "a circuit breaker which is based on the resilience for j implementation resilience 4j is a really nice library",
    "start": "1214880",
    "end": "1222720"
  },
  {
    "text": "for implementing different resilience patterns it's a java library so you can use it in any java application it's not tied to",
    "start": "1222720",
    "end": "1229600"
  },
  {
    "text": "spring but with the spring cloud circuit breaker project we have a more seamless integration with the",
    "start": "1229600",
    "end": "1236080"
  },
  {
    "text": "framework so i'm gonna add that and then in the application property",
    "start": "1236080",
    "end": "1242159"
  },
  {
    "text": "file you guess it we add a new filter so we have now a circuit breaker filter",
    "start": "1242159",
    "end": "1250640"
  },
  {
    "text": "we need to configure a circuit breaker and we we're going to define a circuit",
    "start": "1250880",
    "end": "1257200"
  },
  {
    "text": "breaker called book service and we want to really make the system more resilient and take care of users so",
    "start": "1257200",
    "end": "1264080"
  },
  {
    "text": "that if something goes wrong users are not impacted that much so i really want to use a fallback for that",
    "start": "1264080",
    "end": "1271679"
  },
  {
    "text": "i can do different things as a fallback an easy way is forwarding the request to",
    "start": "1271760",
    "end": "1277200"
  },
  {
    "text": "another endpoint that i have in my gateway taking care of the default behavior so i can say to forward the",
    "start": "1277200",
    "end": "1282559"
  },
  {
    "text": "request to books fallback and then i implement this endpoint",
    "start": "1282559",
    "end": "1288559"
  },
  {
    "text": "inside the gateway application so if i go back to the java class i can define",
    "start": "1288559",
    "end": "1294480"
  },
  {
    "text": "a rest controller here",
    "start": "1294480",
    "end": "1298000"
  },
  {
    "text": "yeah let's call it fallback controller and then a get method",
    "start": "1302720",
    "end": "1308640"
  },
  {
    "text": "for now we are just yeah defining a fallback for the get method because it's all we have",
    "start": "1308640",
    "end": "1314559"
  },
  {
    "text": "implemented in book service books fall back and then uh",
    "start": "1314559",
    "end": "1320320"
  },
  {
    "text": "in this case we have no caching we have no other values that we might return so we can just return an empty collection",
    "start": "1320320",
    "end": "1326720"
  },
  {
    "text": "so at least we don't show any error in the uh in the gui for the application and since",
    "start": "1326720",
    "end": "1333039"
  },
  {
    "text": "a also spring cloud gateway is based on the reactive stack in spring i'm not going to return a collection",
    "start": "1333039",
    "end": "1338640"
  },
  {
    "text": "empty but i'm going to return a flux of void in this case because the type really doesn't matter",
    "start": "1338640",
    "end": "1346080"
  },
  {
    "text": "get fallback and then i return an empty flux",
    "start": "1346080",
    "end": "1352559"
  },
  {
    "text": "which is just an empty collection at this point the only thing that is left to implement is",
    "start": "1352559",
    "end": "1359440"
  },
  {
    "text": "configuring the circuit breaker so let me switch to the circuit breaker",
    "start": "1359440",
    "end": "1364720"
  },
  {
    "text": "branch",
    "start": "1364720",
    "end": "1367039"
  },
  {
    "text": "and what we get here is the configuration this is through resilience 4j so we have",
    "start": "1370000",
    "end": "1376400"
  },
  {
    "text": "the configuration for the circuit breaker and for a time limiter let's start with the circuit breaker so we",
    "start": "1376400",
    "end": "1382240"
  },
  {
    "text": "consider a window size of 10 it means that we monitor the last 10 requests and",
    "start": "1382240",
    "end": "1388080"
  },
  {
    "text": "if more than 50 percent of them failed then the circuit",
    "start": "1388080",
    "end": "1393600"
  },
  {
    "text": "trips and become open after 10 seconds",
    "start": "1393600",
    "end": "1399280"
  },
  {
    "text": "in an open state the application the circuit breaker will switch to half open",
    "start": "1399280",
    "end": "1405360"
  },
  {
    "text": "and it will allow only five requests while it's in a half open state",
    "start": "1405360",
    "end": "1411440"
  },
  {
    "text": "if more than 50 percent of them are successful it becomes closed otherwise",
    "start": "1411440",
    "end": "1416640"
  },
  {
    "text": "open i also define the time limiter because the circuit breaker",
    "start": "1416640",
    "end": "1422159"
  },
  {
    "text": "probably we don't want it to wait too much time to receive a response from a book service so if after two seconds",
    "start": "1422159",
    "end": "1429600"
  },
  {
    "text": "no response is received we just consider that as a failure we don't want to wait too long",
    "start": "1429600",
    "end": "1437520"
  },
  {
    "text": "at this point i can rerun the application and in order to better visualize and",
    "start": "1437679",
    "end": "1444720"
  },
  {
    "text": "understand how the circuit breaker works i'm going to use once again grafana since i have a prometheus matrix",
    "start": "1444720",
    "end": "1450720"
  },
  {
    "text": "as exported from edge service i have a dashboard provided by resilience4j that i can use",
    "start": "1450720",
    "end": "1457440"
  },
  {
    "text": "to monitor the circuit breakers so let's give it a second until the application is restarted",
    "start": "1457440",
    "end": "1463279"
  },
  {
    "text": "this is a really nice dashboard we can monitor not only circuit breaker but also other patterns implemented via",
    "start": "1463279",
    "end": "1468640"
  },
  {
    "text": "resilience 4j so perfect we have the edge service application the circuit breaker book service and its state",
    "start": "1468640",
    "end": "1476240"
  },
  {
    "text": "closed so what i want to do now is using a tool called apache",
    "start": "1476240",
    "end": "1482240"
  },
  {
    "text": "benchmark a b to send 10 requests to localhost",
    "start": "1482240",
    "end": "1489200"
  },
  {
    "text": "9000 slash books this is the edge service 10 is the sliding window size that we",
    "start": "1489200",
    "end": "1495360"
  },
  {
    "text": "configured in the circuit breaker so if i send this request all of them",
    "start": "1495360",
    "end": "1500720"
  },
  {
    "text": "succeed completed so there's no failure and the circuit breaker is still",
    "start": "1500720",
    "end": "1505919"
  },
  {
    "text": "closed that's because no error happens now i want to have an arrow so what i'm gonna do is",
    "start": "1505919",
    "end": "1512640"
  },
  {
    "text": "stopping the book service application and let's see how will that play out",
    "start": "1512640",
    "end": "1518640"
  },
  {
    "text": "so now that the book service application is down all 10 requests will fail it means that more than 50 50 percent of",
    "start": "1521120",
    "end": "1527919"
  },
  {
    "text": "them are failed and the circuit breaker should trip and become open",
    "start": "1527919",
    "end": "1533679"
  },
  {
    "text": "let's see if that's true we have a few seconds delay for prometheus scraping metrics so let's",
    "start": "1533679",
    "end": "1539200"
  },
  {
    "text": "give it a second also i'd like to focus on",
    "start": "1539200",
    "end": "1544240"
  },
  {
    "text": "the number here zero failed request that's because we have a fallback so we're not returning any error so still",
    "start": "1544240",
    "end": "1550400"
  },
  {
    "text": "there's no failed request but the circuit is now open and it will remain open for 10 seconds",
    "start": "1550400",
    "end": "1558320"
  },
  {
    "text": "after 10 seconds it will switch to half open so what i'm gonna do now is starting book service again",
    "start": "1558320",
    "end": "1565840"
  },
  {
    "text": "yes and then i'm gonna send one request just to see the circuit breaker",
    "start": "1569279",
    "end": "1575200"
  },
  {
    "text": "switching to half open",
    "start": "1575200",
    "end": "1578639"
  },
  {
    "text": "so hopefully 10 seconds have passed and now it's half open so we have now",
    "start": "1581600",
    "end": "1587200"
  },
  {
    "text": "four requests left and then the circuit breaker will make a decision about whether to become closed or open so if i",
    "start": "1587200",
    "end": "1594240"
  },
  {
    "text": "send now four more requests since book service is available and hoping that i'm not going to get any",
    "start": "1594240",
    "end": "1599840"
  },
  {
    "text": "network errors that could happen right that's the point of resilience",
    "start": "1599840",
    "end": "1606240"
  },
  {
    "text": "we should get the circuit back to closed",
    "start": "1606240",
    "end": "1610679"
  },
  {
    "text": "and now it's closed so i think this really helps visualizing",
    "start": "1614880",
    "end": "1620000"
  },
  {
    "text": "how the circuit breaker works and it's a really nice pattern when we have",
    "start": "1620000",
    "end": "1625279"
  },
  {
    "text": "integration point with any external system so it can make our system really really more robust",
    "start": "1625279",
    "end": "1633440"
  },
  {
    "start": "1637000",
    "end": "1990000"
  },
  {
    "text": "next let's move a bit out of resilience and talk about security now we have this",
    "start": "1637440",
    "end": "1643200"
  },
  {
    "text": "component the edge service is the the entry point to the system",
    "start": "1643200",
    "end": "1648240"
  },
  {
    "text": "and we might want to use it for something more than just routing and resilience so for example if we have a",
    "start": "1648240",
    "end": "1653360"
  },
  {
    "text": "user that is calling the system we could make edge service responsible for",
    "start": "1653360",
    "end": "1659440"
  },
  {
    "text": "authenticating the user but then we remember that one of the reasons for actually using the edge",
    "start": "1659440",
    "end": "1666080"
  },
  {
    "text": "service was one of the scenarios was to provide different apis to different clients so maybe different clients have",
    "start": "1666080",
    "end": "1671919"
  },
  {
    "text": "different needs in terms of authentication so we might have we might want to support the classic",
    "start": "1671919",
    "end": "1677440"
  },
  {
    "text": "form login with username and password or enable or disable two-factor authentication hopefully always enabled",
    "start": "1677440",
    "end": "1684080"
  },
  {
    "text": "we can have a social login like login with github login with twitter we can",
    "start": "1684080",
    "end": "1689120"
  },
  {
    "text": "use xaml maybe it's a the library organization already has an active directory in-house that they want",
    "start": "1689120",
    "end": "1696159"
  },
  {
    "text": "to use for authentication so how can we handle all those cases and one solution which really helps decoupling all these",
    "start": "1696159",
    "end": "1702640"
  },
  {
    "text": "concerns is using oauth 2 and open id because from the application point of view we",
    "start": "1702640",
    "end": "1708960"
  },
  {
    "text": "just make the application in this case edge service speak the language of oauth 2 and open id",
    "start": "1708960",
    "end": "1715919"
  },
  {
    "text": "and then behind the scenes the authentication can happen via different different strategies",
    "start": "1715919",
    "end": "1722159"
  },
  {
    "text": "so first we have the login part so if talking about oauth2 terminology we have",
    "start": "1722159",
    "end": "1727360"
  },
  {
    "text": "the user we have edge service which is an oauth2 client is the one initiating an",
    "start": "1727360",
    "end": "1734080"
  },
  {
    "text": "authorization request and the login part is not accomplished",
    "start": "1734080",
    "end": "1739120"
  },
  {
    "text": "directly by edge service edge service is just the initiator then we have a so-called authorization",
    "start": "1739120",
    "end": "1746399"
  },
  {
    "text": "server for example key clock you can use octa you can even use google or github",
    "start": "1746399",
    "end": "1751840"
  },
  {
    "text": "they are auth 2 and open id providers to actually log in the user",
    "start": "1751840",
    "end": "1758399"
  },
  {
    "text": "so as a developer i'm not concerned with how the authentication step happens i don't have to deal with",
    "start": "1758399",
    "end": "1765200"
  },
  {
    "text": "the user management with password storage uh encryption because",
    "start": "1765200",
    "end": "1770799"
  },
  {
    "text": "that's a different and separate component uh working with that so it might be another team if it's something",
    "start": "1770799",
    "end": "1776640"
  },
  {
    "text": "that we implement and manage in-house it can be a cloud service it doesn't matter we speak oauth to in-edge service",
    "start": "1776640",
    "end": "1785360"
  },
  {
    "text": "and after the authentication happens successfully between the user and in this case key clock then key cloud will",
    "start": "1785360",
    "end": "1792080"
  },
  {
    "text": "issue some tokens and send them back to edge service now the next challenge is we have a",
    "start": "1792080",
    "end": "1799120"
  },
  {
    "text": "login step performed successfully in edge service",
    "start": "1799120",
    "end": "1805440"
  },
  {
    "text": "the we also need to consider how to manage the session so how do we store session data how can",
    "start": "1805440",
    "end": "1811919"
  },
  {
    "text": "we keep track of the login that is currently locked in and also since",
    "start": "1811919",
    "end": "1817360"
  },
  {
    "text": "this is a gateway how can we propagate these authentication context to the services",
    "start": "1817360",
    "end": "1822640"
  },
  {
    "text": "in the backend all the services downstream and that's still something that oauth2 can help us with",
    "start": "1822640",
    "end": "1830559"
  },
  {
    "text": "so what we have now i'm focusing on a specific case where we have a browser-based application",
    "start": "1830880",
    "end": "1836640"
  },
  {
    "text": "we have a session cookie between traditional session cookie between the browser and edge service then edge service keeps a",
    "start": "1836640",
    "end": "1844159"
  },
  {
    "text": "mapping between a session cookie and the tokens and every time he needs to forward the",
    "start": "1844159",
    "end": "1850000"
  },
  {
    "text": "request to one of the services downstream he will add the access token issued by key clock to",
    "start": "1850000",
    "end": "1856720"
  },
  {
    "text": "as an http header now uh this is true when edge service",
    "start": "1856720",
    "end": "1862159"
  },
  {
    "text": "plays the auth to client role in the author framework you there are",
    "start": "1862159",
    "end": "1867760"
  },
  {
    "text": "some situations where the author client role is played by the client application like",
    "start": "1867760",
    "end": "1873600"
  },
  {
    "text": "the an spa for example angular so i really recommend always using a back-end application to",
    "start": "1873600",
    "end": "1881120"
  },
  {
    "text": "do that because it's more secure having these tokens exposed to the browser is never a good idea so even if",
    "start": "1881120",
    "end": "1887919"
  },
  {
    "text": "you don't have any back-end you just have the angular application somehow adopt a pattern like a back-end",
    "start": "1887919",
    "end": "1894080"
  },
  {
    "text": "for front-end pattern where you delegate this open id and oauth to handling to a",
    "start": "1894080",
    "end": "1900799"
  },
  {
    "text": "back-end service it's more secure this when we talk about a browser-based applications",
    "start": "1900799",
    "end": "1908000"
  },
  {
    "text": "so we have three things that we need to implement now in order to add user authentication",
    "start": "1908000",
    "end": "1913440"
  },
  {
    "text": "to the system the first one is that we need to integrate with key clock following open id so that the user can",
    "start": "1913440",
    "end": "1920080"
  },
  {
    "text": "log in the second problem is that we need to uh deal with session management",
    "start": "1920080",
    "end": "1926159"
  },
  {
    "text": "and we are hopefully scaling edge service when we deployed in production we don't want to",
    "start": "1926159",
    "end": "1931679"
  },
  {
    "text": "be we don't want it to be a single point of failure so we have multiple instances of edge service running so definitely we",
    "start": "1931679",
    "end": "1938720"
  },
  {
    "text": "want to keep them stateless but session management requires some state to be saved so what we can do is",
    "start": "1938720",
    "end": "1945279"
  },
  {
    "text": "externalize that state persistence to some external system for example radius and that's what we're",
    "start": "1945279",
    "end": "1951440"
  },
  {
    "text": "going to use and then the third problem is after the authentication step is performed",
    "start": "1951440",
    "end": "1956880"
  },
  {
    "text": "successfully how can we propagate the access token to the services downstream",
    "start": "1956880",
    "end": "1962880"
  },
  {
    "text": "so using what is called token relay so we can do that we're gonna rely on of",
    "start": "1962880",
    "end": "1970880"
  },
  {
    "text": "course on the oauth 2 and open id standards we're going to rely on key clock and on spring security and of",
    "start": "1970880",
    "end": "1978399"
  },
  {
    "text": "course on spring cloud gateway so let's have a look",
    "start": "1978399",
    "end": "1983200"
  },
  {
    "text": "so first of all i need to go back to my application initialization because i",
    "start": "1985120",
    "end": "1990960"
  },
  {
    "start": "1990000",
    "end": "2434000"
  },
  {
    "text": "need to add a couple of new dependencies the first dependency i need to add is for redis i",
    "start": "1990960",
    "end": "1997279"
  },
  {
    "text": "can add spring data reactive redis because i'm working on a reactive application",
    "start": "1997279",
    "end": "2002320"
  },
  {
    "text": "then i want to use redis for externalizing the session storage and",
    "start": "2002320",
    "end": "2007840"
  },
  {
    "text": "spring provides a component is called spring session",
    "start": "2007840",
    "end": "2012639"
  },
  {
    "text": "which abstracts the session management so that you can use different storage strategies",
    "start": "2013679",
    "end": "2019120"
  },
  {
    "text": "so out of the box transparently to the developer we're gonna get the session stored in redis",
    "start": "2019120",
    "end": "2025279"
  },
  {
    "text": "instead of in memory and finally i need to add a spring security dependency specifically for the",
    "start": "2025279",
    "end": "2032000"
  },
  {
    "text": "role that edge service will play in the oauth 2 scenario which is oauth2",
    "start": "2032000",
    "end": "2037519"
  },
  {
    "text": "client and that's it",
    "start": "2037519",
    "end": "2042960"
  },
  {
    "text": "now just by adding the oauth to client dependency which is an extension to",
    "start": "2042960",
    "end": "2048000"
  },
  {
    "text": "spring security but focused on oauth 2 client we'll get security by default so all endpoints in our application are now",
    "start": "2048000",
    "end": "2054878"
  },
  {
    "text": "protected and authenticated but i still need to configure how to integrate with key clock",
    "start": "2054879",
    "end": "2061040"
  },
  {
    "text": "and i can do that in the property file so i have this application yaml file",
    "start": "2061040",
    "end": "2067679"
  },
  {
    "text": "let's move down here",
    "start": "2067679",
    "end": "2071878"
  },
  {
    "text": "so we have a client and not that one so we define a new",
    "start": "2074480",
    "end": "2081440"
  },
  {
    "text": "client registration let's call it a key clock and in here we have",
    "start": "2081440",
    "end": "2087118"
  },
  {
    "text": "to define a client id and the client secret now put a secret here but",
    "start": "2087119",
    "end": "2093200"
  },
  {
    "text": "really we don't want to do that right yes then we have the client id edge",
    "start": "2093200",
    "end": "2099040"
  },
  {
    "text": "service and we have the scopes so the scopes are kind of permissions but for applications",
    "start": "2099040",
    "end": "2106640"
  },
  {
    "text": "in this case i'm going to use an openid scopes because i want to enable the open id authentication layer",
    "start": "2106640",
    "end": "2113280"
  },
  {
    "text": "which is built on top of oauth2 and then i need to define the issuer",
    "start": "2113280",
    "end": "2118880"
  },
  {
    "text": "uri which is keyclock now let me switch branch so we get all the",
    "start": "2118880",
    "end": "2124480"
  },
  {
    "text": "correct values",
    "start": "2124480",
    "end": "2127800"
  },
  {
    "text": "and application yaml file",
    "start": "2133680",
    "end": "2137838"
  },
  {
    "text": "yes so we have uh yeah client id client secret scope and we have the key clock",
    "start": "2139200",
    "end": "2145359"
  },
  {
    "text": "uri this is all we need to do to integrate with key clock then automatically all",
    "start": "2145359",
    "end": "2151040"
  },
  {
    "text": "endpoints are secured we can further configure them but for now i'm fine with",
    "start": "2151040",
    "end": "2156320"
  },
  {
    "text": "having all endpoints requiring authentication user authentication this is the first step then i have",
    "start": "2156320",
    "end": "2162960"
  },
  {
    "text": "to configure the session to use redis and i can do that with this property here session store type redis",
    "start": "2162960",
    "end": "2170000"
  },
  {
    "text": "and finally how to integrate with redis i have the redis instance running on my local host on port 6379",
    "start": "2170000",
    "end": "2178119"
  },
  {
    "text": "so we solve the problem of the login step and session management we still need to deliver this access token",
    "start": "2178400",
    "end": "2185839"
  },
  {
    "text": "to the downstream services every time we forward a request and that's another filter it's called token relay",
    "start": "2185839",
    "end": "2192880"
  },
  {
    "text": "very conveniently so just by having this filter if the an access token exists in the",
    "start": "2192880",
    "end": "2198000"
  },
  {
    "text": "current security context then is added as an http header and forwarded down to",
    "start": "2198000",
    "end": "2204160"
  },
  {
    "text": "for example book service this is the part regarding edge service we need to do something similar in book",
    "start": "2204160",
    "end": "2210240"
  },
  {
    "text": "service but easier because we only need to configure how to integrate with the",
    "start": "2210240",
    "end": "2215440"
  },
  {
    "text": "key clock so we have down here the configuration this time as a resource server which in",
    "start": "2215440",
    "end": "2222079"
  },
  {
    "text": "oauth2 is the the server which contains the protected resource that we are trying to access",
    "start": "2222079",
    "end": "2229920"
  },
  {
    "text": "we are going to use jwt a json web token as the format for the access token and once again we point to key clock",
    "start": "2229920",
    "end": "2238000"
  },
  {
    "text": "so i can now run both applications",
    "start": "2238000",
    "end": "2243000"
  },
  {
    "text": "again so if you have so have you used key",
    "start": "2243200",
    "end": "2249280"
  },
  {
    "text": "clock before raise your hand if you have some experience so there is a project to",
    "start": "2249280",
    "end": "2254640"
  },
  {
    "text": "integrate keylogger into a spring application is called this kick lock spring adapter that",
    "start": "2254640",
    "end": "2259839"
  },
  {
    "text": "was commonly used but now as you can see spring security has full support for",
    "start": "2259839",
    "end": "2264880"
  },
  {
    "text": "oauth 2 and open id so you don't need any key look dependency so what i have",
    "start": "2264880",
    "end": "2270079"
  },
  {
    "text": "shown here works in the same exact way if you use octa if you use",
    "start": "2270079",
    "end": "2275119"
  },
  {
    "text": "0 if you use github twitter you just need to specify a different url because it's a standard it's also why we like",
    "start": "2275119",
    "end": "2281920"
  },
  {
    "text": "working with author and open id their standards so we have no kick lock specific code in",
    "start": "2281920",
    "end": "2288000"
  },
  {
    "text": "the application that was just an example i could as well replace it with anything else supporting that protocol",
    "start": "2288000",
    "end": "2295280"
  },
  {
    "text": "so i have restarted book service let's restart edge service again",
    "start": "2295280",
    "end": "2301520"
  },
  {
    "text": "and now i'll open a private window so we don't get any cookie disturbance",
    "start": "2304480",
    "end": "2310960"
  },
  {
    "text": "and we want to access port 9000 slash books so let's see if the application",
    "start": "2310960",
    "end": "2317200"
  },
  {
    "text": "started let's give it a try and it started so all end points are authenticated by default so i'm",
    "start": "2317200",
    "end": "2323280"
  },
  {
    "text": "redirected to this login page provided by keyclock i have some users already defined in keyclock one of them is",
    "start": "2323280",
    "end": "2330079"
  },
  {
    "text": "isabel so let's login password and then i'm redirected back to the",
    "start": "2330079",
    "end": "2335680"
  },
  {
    "text": "application so i can see the list of books so a lot of things happen behind the",
    "start": "2335680",
    "end": "2340880"
  },
  {
    "text": "scenes but that's also the beauty of this like i don't have to work too much on getting this to work",
    "start": "2340880",
    "end": "2348240"
  },
  {
    "text": "because it's a standard and it's provided by the framework so what happened behind the scenes is that the user authenticated key clock",
    "start": "2348240",
    "end": "2354560"
  },
  {
    "text": "issued an access token edge service stored it in the session and when we",
    "start": "2354560",
    "end": "2359920"
  },
  {
    "text": "call the book's endpoint that access token has been sent down to book service which also requires",
    "start": "2359920",
    "end": "2365599"
  },
  {
    "text": "authentication for all endpoints accepted the access token validated it",
    "start": "2365599",
    "end": "2371200"
  },
  {
    "text": "with key clock and we got the response back",
    "start": "2371200",
    "end": "2375920"
  },
  {
    "text": "so once again we have uh just a session cookie based communication between the browser and",
    "start": "2380880",
    "end": "2386640"
  },
  {
    "text": "edge service and then we have the access token that is used to call services downstream",
    "start": "2386640",
    "end": "2392560"
  },
  {
    "text": "and in this particular case we used a jwt access token but it doesn't really matter because we haven't",
    "start": "2392560",
    "end": "2398640"
  },
  {
    "text": "had to deal with it it was uh relayed by edge service directly and",
    "start": "2398640",
    "end": "2403839"
  },
  {
    "text": "then the validation so checking the signature of the token also happens automatically another nice feature that",
    "start": "2403839",
    "end": "2410720"
  },
  {
    "text": "happens behind the scenes with this spring security implementation is that whenever the access token expires edge",
    "start": "2410720",
    "end": "2416800"
  },
  {
    "text": "service also takes care of using the refresh token in order to get a new access token so that's also",
    "start": "2416800",
    "end": "2423440"
  },
  {
    "text": "something that happens behind the scenes it's fully customizable of course now",
    "start": "2423440",
    "end": "2428800"
  },
  {
    "text": "we relied on the default configuration but already like that it's really powerful",
    "start": "2428800",
    "end": "2434720"
  },
  {
    "start": "2434000",
    "end": "2588000"
  },
  {
    "text": "next uh i want to talk about observability so spring cloud gateway and in general a",
    "start": "2434720",
    "end": "2441040"
  },
  {
    "text": "gateway is a good place for these cross-cutting concerns we mentioned resilience we mentioned security but",
    "start": "2441040",
    "end": "2446960"
  },
  {
    "text": "it's also a good place to deal with some observability concerns observability is a property that we really want in cloud",
    "start": "2446960",
    "end": "2454160"
  },
  {
    "text": "native applications and it's about inferring the internal state of an application starting from its outputs",
    "start": "2454160",
    "end": "2461599"
  },
  {
    "text": "like logs like metrics like traces but even more than that so sometimes it's",
    "start": "2461599",
    "end": "2467200"
  },
  {
    "text": "mistakenly confused with monitoring so monitoring is part of observability but with",
    "start": "2467200",
    "end": "2473200"
  },
  {
    "text": "monitoring we check we define alerts for known failure states",
    "start": "2473200",
    "end": "2479119"
  },
  {
    "text": "so we know in advance what can go wrong and we define some alerts and we define some metrics observability goes beyond",
    "start": "2479119",
    "end": "2485920"
  },
  {
    "text": "that observability is about being able to ask questions about the unknowns",
    "start": "2485920",
    "end": "2491440"
  },
  {
    "text": "so something that we don't know that so we didn't monitor it because we didn't know that could happen",
    "start": "2491440",
    "end": "2496960"
  },
  {
    "text": "that's that's a an important distinction so what i have been using uh today for this presentation is an open source",
    "start": "2496960",
    "end": "2503440"
  },
  {
    "text": "stack based on grafana so just for as a reference i used grafana for visualization then i have graphana loki",
    "start": "2503440",
    "end": "2510560"
  },
  {
    "text": "for logs we haven't seen that because yeah it was running locally but it works",
    "start": "2510560",
    "end": "2516400"
  },
  {
    "text": "if i run on dogger or kubernetes just to gather all the logs i used prometheus for metrics",
    "start": "2516400",
    "end": "2522560"
  },
  {
    "text": "and if you need to scale you can also use cortex in order to deal with the",
    "start": "2522560",
    "end": "2529119"
  },
  {
    "text": "pro medius at scale and with more data and then grafana tempo for traces and",
    "start": "2529119",
    "end": "2534560"
  },
  {
    "text": "one of the nice features is that once we have all these different information in one place we can really start asking",
    "start": "2534560",
    "end": "2540240"
  },
  {
    "text": "difficult questions and navigating through all these different information combining them together for example",
    "start": "2540240",
    "end": "2545680"
  },
  {
    "text": "earlier i went and manually checked the trace id from the log message and then copy that in a tempo in grafana in order",
    "start": "2545680",
    "end": "2553599"
  },
  {
    "text": "to correlate the two things but that can be done automatically inside grafana so i can start by checking some logs then a",
    "start": "2553599",
    "end": "2561839"
  },
  {
    "text": "link is generated from a trace id so i can navigate to a trace and then maybe from there i can navigate to metrics",
    "start": "2561839",
    "end": "2568560"
  },
  {
    "text": "which are related to that trace i think it's really nice it's one of the things that",
    "start": "2568560",
    "end": "2574880"
  },
  {
    "text": "you really enjoy when something goes wrong in production and you have to solve the problem maybe",
    "start": "2574880",
    "end": "2580000"
  },
  {
    "text": "you're called in the middle of the night so having all the information that you might need to actually understand what's going on",
    "start": "2580000",
    "end": "2585599"
  },
  {
    "text": "and how to fix it is really great thank you",
    "start": "2585599",
    "end": "2591160"
  },
  {
    "start": "2588000",
    "end": "2601000"
  },
  {
    "text": "you",
    "start": "2599760",
    "end": "2601839"
  }
]