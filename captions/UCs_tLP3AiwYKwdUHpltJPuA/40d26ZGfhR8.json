[
  {
    "start": "0",
    "end": "31000"
  },
  {
    "text": "[Music]",
    "start": "980",
    "end": "7849"
  },
  {
    "text": "so before we start I wanted to just general shout out to Ashley McNamara who is in the doctor hospital and I'm",
    "start": "12850",
    "end": "20630"
  },
  {
    "text": "wearing a super nice t-shirt she designed so if she sees the video hi Ashley",
    "start": "20630",
    "end": "26000"
  },
  {
    "text": "cool let's continue I don't have enough time for anything else so today I'm",
    "start": "26000",
    "end": "31849"
  },
  {
    "start": "31000",
    "end": "74000"
  },
  {
    "text": "gonna be talking about the robustness of code I propose this stock thinking that",
    "start": "31849",
    "end": "37370"
  },
  {
    "text": "go was robust and then I started thinking more about it and I'm going to",
    "start": "37370",
    "end": "43280"
  },
  {
    "text": "be talking about how actually maybe not that much and then as soon as I started",
    "start": "43280",
    "end": "48769"
  },
  {
    "text": "thinking was like well if Co is not robust what is robust and I tweeted about it and people were like see and I",
    "start": "48769",
    "end": "55129"
  },
  {
    "text": "was like no for real people actually think that C is robust which C is amazing but it's also super fragile and",
    "start": "55129",
    "end": "62659"
  },
  {
    "text": "it's super easy to break things so people then were like oh you should check out our line so we're gonna be",
    "start": "62659",
    "end": "68540"
  },
  {
    "text": "talking about those two languages and runtimes and environments talking about robustness so we're gonna be talking",
    "start": "68540",
    "end": "76310"
  },
  {
    "start": "74000",
    "end": "133000"
  },
  {
    "text": "about first what does it mean to be robust what are the robust features of the features that make go something at",
    "start": "76310",
    "end": "84140"
  },
  {
    "text": "prom language that I consider to be quite robust what are the ones that actually kind of break that robustness",
    "start": "84140",
    "end": "89840"
  },
  {
    "text": "which is sad but they exist then we'll give up on trying to make robust",
    "start": "89840",
    "end": "95150"
  },
  {
    "text": "programs because who cares anyway and then well actually Erlang is robust",
    "start": "95150",
    "end": "100700"
  },
  {
    "text": "so we'll talk about how is it that it is robust I go to is a great place to talk",
    "start": "100700",
    "end": "106730"
  },
  {
    "text": "about it because you know Erlang was created by Joe Armstrong that's walking around there and then we'll talk about a",
    "start": "106730",
    "end": "113570"
  },
  {
    "text": "new hope not the movie so if you want the slides there online you can follow",
    "start": "113570",
    "end": "119120"
  },
  {
    "text": "up you can use this beautiful QR code I should have thought about actually using",
    "start": "119120",
    "end": "124790"
  },
  {
    "text": "a link for those that read letters but it's on speaker deck under my username",
    "start": "124790",
    "end": "130700"
  },
  {
    "text": "campoy so you can find it there and real quick about me I'm Francis Campo I",
    "start": "130700",
    "end": "136400"
  },
  {
    "start": "133000",
    "end": "161000"
  },
  {
    "text": "worked that sourced even though I used to work at Google for quite a while I was a developer advocate at Google",
    "start": "136400",
    "end": "142370"
  },
  {
    "text": "platform doing go and machine learning and also as someone said Joseph funk is",
    "start": "142370",
    "end": "148760"
  },
  {
    "text": "a go YouTube channel that I post every two weeks except when my Mike Briggs which is like last time so I didn't post",
    "start": "148760",
    "end": "156140"
  },
  {
    "text": "the video but it will come one day about CORBA because I hate my life",
    "start": "156140",
    "end": "161770"
  },
  {
    "start": "161000",
    "end": "225000"
  },
  {
    "text": "okay so what does it mean to be robust and this is kind of an interesting question because when you think about",
    "start": "161770",
    "end": "168440"
  },
  {
    "text": "robustness there's many many things that you could think about like one of them is like something very very strong and",
    "start": "168440",
    "end": "174110"
  },
  {
    "text": "very hard to break right but something very strong are very hard to break could also break for some some of the reasons",
    "start": "174110",
    "end": "179959"
  },
  {
    "text": "right so when I think about robustness in the context of machine learning of computer science what I'm thinking about",
    "start": "179959",
    "end": "186380"
  },
  {
    "text": "is not about really how it is when things go well but how it works when",
    "start": "186380",
    "end": "192830"
  },
  {
    "text": "think things go wrong it is the reliability how easy it is to break something intentionally or",
    "start": "192830",
    "end": "199940"
  },
  {
    "text": "unintentionally right if I'm running a program how easy it is for me to write something that eventually will break by",
    "start": "199940",
    "end": "206330"
  },
  {
    "text": "itself or how is it is for me to write a program that when things are run that go wrong the connection I the network",
    "start": "206330",
    "end": "213769"
  },
  {
    "text": "connection fails or a disk fails or whatever my program still runs or fails",
    "start": "213769",
    "end": "219410"
  },
  {
    "text": "graciously whatever that means in that situation and what is the opposite of robustness the opposite of robust this",
    "start": "219410",
    "end": "226910"
  },
  {
    "start": "225000",
    "end": "260000"
  },
  {
    "text": "is fragility and it's when when things go wrong they go even worse right",
    "start": "226910",
    "end": "232330"
  },
  {
    "text": "the typical example it's this and if you've ever seen this kind of errors an",
    "start": "232330",
    "end": "238010"
  },
  {
    "text": "error happened while displaying this error Thanks what are you going to do",
    "start": "238010",
    "end": "243170"
  },
  {
    "text": "about this right like it is not about making something that works all of the time it is about working about creating",
    "start": "243170",
    "end": "249920"
  },
  {
    "text": "something that works most of the time and when things go wrong it handles",
    "start": "249920",
    "end": "255800"
  },
  {
    "text": "those as well as possible which is better than this so let's talk a little bit about go",
    "start": "255800",
    "end": "262430"
  },
  {
    "start": "260000",
    "end": "453000"
  },
  {
    "text": "itself the first thing is if you if you go to Y go exists you will see that it",
    "start": "262430",
    "end": "270229"
  },
  {
    "text": "was created by a group of three engineers Robert Whismur Rob Pike and Ken Thompson while they",
    "start": "270229",
    "end": "278140"
  },
  {
    "text": "were waiting for C++ to compile which is kind of a joke but kind of true at the same time and one of the things that",
    "start": "278140",
    "end": "284710"
  },
  {
    "text": "they were annoyed with C++ was not necessarily how long it is to compile but actually the fact that there's many",
    "start": "284710",
    "end": "291340"
  },
  {
    "text": "things that are very fragile and one of them is the way you handle memory it is very easy to write programs that are",
    "start": "291340",
    "end": "297280"
  },
  {
    "text": "wrong right actually there's a very good talk about B the prom language which they talk about how hard it is to write",
    "start": "297280",
    "end": "304330"
  },
  {
    "text": "out and actually robust HelloWorld in C++ it's amazing it's actually really hard like go and rust try to solve the",
    "start": "304330",
    "end": "313360"
  },
  {
    "text": "same problem with different approaches go what it says it's like oh I'm going to basically protect everything around",
    "start": "313360",
    "end": "319660"
  },
  {
    "text": "yourself everything is gonna be like very very very soft and no heart no",
    "start": "319660",
    "end": "325030"
  },
  {
    "text": "sharp edges so that way you will not hurt yourself rust is actually I'm gonna make it a",
    "start": "325030",
    "end": "330970"
  },
  {
    "text": "little bit more complicated so the language the type the type system of the language will avoid these issues",
    "start": "330970",
    "end": "337180"
  },
  {
    "text": "right so there different approaches to solve the same problem memory safety go",
    "start": "337180",
    "end": "342520"
  },
  {
    "text": "has pointers but there's no pointer arithmetic but does this mean well pointers are useful because if you have",
    "start": "342520",
    "end": "348880"
  },
  {
    "text": "one object that is 1 mega buddy in memory you don't want to copy that object over all the time right so maybe",
    "start": "348880",
    "end": "355570"
  },
  {
    "text": "what you want to do is actually say you know I'm going to pass the address to that that is a pointer sure what is that",
    "start": "355570",
    "end": "363010"
  },
  {
    "text": "address plus 4 who knows right so that is the thing that is not allowed and go memory pointer arithmetic is it just",
    "start": "363010",
    "end": "371290"
  },
  {
    "text": "simply doesn't exist unless you use the package and save which is called unsafe",
    "start": "371290",
    "end": "377170"
  },
  {
    "text": "for a very good reason so you should not use it in general there's also something",
    "start": "377170",
    "end": "382750"
  },
  {
    "text": "really cool which is escape analysis and the scapin Alison go is very interesting",
    "start": "382750",
    "end": "388330"
  },
  {
    "text": "especially for those that come from C and C++ it solves a very specific problem that most beginners in C and C++",
    "start": "388330",
    "end": "395710"
  },
  {
    "text": "will make that mistake and people are now beginners they will eventually also do it so I'm gonna show that in a minute",
    "start": "395710",
    "end": "403690"
  },
  {
    "text": "also there's garbage collection which means there's no dangling pointers the dangling pointer being a under that you still hold that pointer",
    "start": "403690",
    "end": "411040"
  },
  {
    "text": "but what it's pointing to doesn't exist anymore or is not something that you should be playing with and automatic",
    "start": "411040",
    "end": "416830"
  },
  {
    "text": "bond checks which is very important to all of these means that it is basically impossible to write a programming code",
    "start": "416830",
    "end": "423760"
  },
  {
    "text": "that will corrupt the memory which is amazing the only two ways to corrupt",
    "start": "423760",
    "end": "429160"
  },
  {
    "text": "memory ingo is using unsafe using c go which c go is not go so doesn't count",
    "start": "429160",
    "end": "435970"
  },
  {
    "text": "and the third one is to have a bug in the compiler right which is act on the",
    "start": "435970",
    "end": "441580"
  },
  {
    "text": "runtime which is kind of cool because it means that once that bug has been fixed the problem has been removed from all of",
    "start": "441580",
    "end": "446830"
  },
  {
    "text": "the problem screening go right so basically solving classes of problems at a time rather than solving a per problem",
    "start": "446830",
    "end": "453090"
  },
  {
    "start": "453000",
    "end": "545000"
  },
  {
    "text": "so what does that mean that scape analysis well it means that when you",
    "start": "453090",
    "end": "458380"
  },
  {
    "text": "call new and you allocate something it doesn't mean that this is allocated in the hip you may be allocating the stack",
    "start": "458380",
    "end": "464800"
  },
  {
    "text": "right in here for instance what we're doing is well you're calling Neil sure but then you're who this is wrong and I",
    "start": "464800",
    "end": "478110"
  },
  {
    "text": "cannot edit why cannot add edit okay I cannot edit so I'm gonna ask you to",
    "start": "478110",
    "end": "484240"
  },
  {
    "text": "imagine that that is actually returning star V so it's returning the value of",
    "start": "484240",
    "end": "489960"
  },
  {
    "text": "what its pointer right on the pointer right which means that the pointer itself the eye area memory does not",
    "start": "489960",
    "end": "495940"
  },
  {
    "text": "escape is not accessible from our other program therefore that value can be axed can be stored in there on the stack",
    "start": "495940",
    "end": "502960"
  },
  {
    "text": "which means that the problem will be faster this is good for performance on the other side if you're allocating a",
    "start": "502960",
    "end": "510070"
  },
  {
    "text": "viable int 42 that looks like something you're located on the stack right because",
    "start": "510070",
    "end": "515080"
  },
  {
    "text": "you're not doing new but then if you're returning the others to that that would be wrong if you do this same thing in in",
    "start": "515080",
    "end": "522099"
  },
  {
    "text": "C that will be wrong because the pointer to V will be an address that you should",
    "start": "522100",
    "end": "528100"
  },
  {
    "text": "not be accessing after the function value has finished so that is a problem",
    "start": "528100",
    "end": "533380"
  },
  {
    "text": "and go what it will do is it will actually recognize that and just simply allocate it in the stack automatically",
    "start": "533380",
    "end": "539440"
  },
  {
    "text": "you do not care about the you know think about it which is something very nice of someone coming from sitios class",
    "start": "539440",
    "end": "545050"
  },
  {
    "start": "545000",
    "end": "582000"
  },
  {
    "text": "and finally the bound checks which are important for correctness if you're doing this so you do a slice of 256",
    "start": "545050",
    "end": "554030"
  },
  {
    "text": "bytes integers and then you access the position 512 who knows what that is so",
    "start": "554030",
    "end": "561560"
  },
  {
    "text": "this will actually panic it will say no no no this is not correct right this means that you are doing extra checks",
    "start": "561560",
    "end": "568520"
  },
  {
    "text": "all the time which cannot brings performance a little bit down but actually correctness is way more",
    "start": "568520",
    "end": "573920"
  },
  {
    "text": "important performance and in some cases the compiler will be able to deduct that those checks are knowing not necessary",
    "start": "573920",
    "end": "580160"
  },
  {
    "text": "and they will be removed after memory safety let's talk about type safety so",
    "start": "580160",
    "end": "586930"
  },
  {
    "start": "582000",
    "end": "652000"
  },
  {
    "text": "type safety we have static typing so as many other languages basically once you",
    "start": "586930",
    "end": "593810"
  },
  {
    "text": "give a type to a variable you cannot just change it if a variable is an integer you cannot put a string in there",
    "start": "593810",
    "end": "599630"
  },
  {
    "text": "that that just doesn't work similarly we don't have implicit type conversion for",
    "start": "599630",
    "end": "605540"
  },
  {
    "text": "in for numeric types so if you have a float and an integer and you try to add",
    "start": "605540",
    "end": "611750"
  },
  {
    "text": "them that will not compile but also if you have an in 32 and in 64 and you try to add them that will not compile if you",
    "start": "611750",
    "end": "618620"
  },
  {
    "text": "want to add them you need to say explicitly I'm trying to I'm going to convert this value to that other type in",
    "start": "618620",
    "end": "625580"
  },
  {
    "text": "order to have two types that are compatible this is important because",
    "start": "625580",
    "end": "631300"
  },
  {
    "text": "that otherwise we would have type coercion type coercion is what",
    "start": "631300",
    "end": "636950"
  },
  {
    "text": "javascript has right where like the what videos they're basically all about type coercion where you have a string plus an",
    "start": "636950",
    "end": "643670"
  },
  {
    "text": "integer any word and a string man is an integer that's something completely different which is always confusing so",
    "start": "643670",
    "end": "649220"
  },
  {
    "text": "go just doesn't allow that right more things are about interfaces we do have",
    "start": "649220",
    "end": "656270"
  },
  {
    "start": "652000",
    "end": "773000"
  },
  {
    "text": "interfaces but they they work in play there the satisfaction is done",
    "start": "656270",
    "end": "661850"
  },
  {
    "text": "implicitly something like Python basically where impact on the duck typing will say that if you have all of",
    "start": "661850",
    "end": "668750"
  },
  {
    "text": "the methods that the algorithm requires then you're good right but that is checked at run",
    "start": "668750",
    "end": "674990"
  },
  {
    "text": "in gold that is checked a compilation time we will say for instance f println expects the rider so there's a method",
    "start": "674990",
    "end": "682070"
  },
  {
    "text": "right if you pass something that doesn't have the method at computation time it will say it you can deduce the type int as an",
    "start": "682070",
    "end": "688400"
  },
  {
    "text": "rider in argument f println it does not implement writer because it's missing the write method which is very nice this",
    "start": "688400",
    "end": "695540"
  },
  {
    "text": "is one of my favorite errors in go it's super easy to understanding clear similarly you can do something like in C",
    "start": "695540",
    "end": "704170"
  },
  {
    "text": "the void star or the crazy pointer has",
    "start": "704170",
    "end": "709850"
  },
  {
    "text": "anyone used void star okay void star basically what you're saying is yellow",
    "start": "709850",
    "end": "717350"
  },
  {
    "text": "of types it's who knows what's there once you say it's void star you forgot",
    "start": "717350",
    "end": "724190"
  },
  {
    "text": "everything about it right in go we have the empty interface which is kind of similar because you can put anything in",
    "start": "724190",
    "end": "729830"
  },
  {
    "text": "in an empty interface but we're keeping the type we keep in the type information so afterwards if you try to say V which",
    "start": "729830",
    "end": "736460"
  },
  {
    "text": "was 42 that integer I'm gonna use it now as an empty interface so I forgot what",
    "start": "736460",
    "end": "741770"
  },
  {
    "text": "it was and then I'm gonna say and now I'm gonna use it as a string that will not work and that will not work and it",
    "start": "741770",
    "end": "746840"
  },
  {
    "text": "will be a check at run time no compilation time because that'd be basically impossible to do but I run",
    "start": "746840",
    "end": "752780"
  },
  {
    "text": "them will say no you can't just not do this if you down C++ and give done",
    "start": "752780",
    "end": "758630"
  },
  {
    "text": "things like I even forgot the name the brain interprets cast those kind of",
    "start": "758630",
    "end": "764390"
  },
  {
    "text": "things were basically you saying just let me know I know what I'm doing let me do it I know what I'm doing you can do",
    "start": "764390",
    "end": "770510"
  },
  {
    "text": "also let it go and save package again one more thing that even if it looks",
    "start": "770510",
    "end": "777530"
  },
  {
    "start": "773000",
    "end": "832000"
  },
  {
    "text": "weird it actually helps with with detecting errors early is the fact that",
    "start": "777530",
    "end": "784040"
  },
  {
    "text": "Ingo if you never read a variable a local variable you will know compile and",
    "start": "784040",
    "end": "789350"
  },
  {
    "text": "it's interesting cuz this is an error in this error it's something that lots of beginners and go write very often what",
    "start": "789350",
    "end": "795770"
  },
  {
    "text": "you're getting when you're looping over s which is a slice and which is actually an image it's a matrix so you're looping",
    "start": "795770",
    "end": "801980"
  },
  {
    "text": "over that and you're getting a copy of the rows and then you're copying you're getting a copy of the cell",
    "start": "801980",
    "end": "808279"
  },
  {
    "text": "then you are sending something to that cell turns out that that is a copy that isn't a reference so when you try to",
    "start": "808279",
    "end": "813529"
  },
  {
    "text": "write something there you're actually no modifying anything so you're declaring a variable never reading from it that's",
    "start": "813529",
    "end": "819170"
  },
  {
    "text": "suspicious that doesn't compile this error is the kind of thing that if it wasn't like this it'd be super hard to",
    "start": "819170",
    "end": "825019"
  },
  {
    "text": "see because when I'm reading this code this looks super nice I don't see any problem with this the compiler will tell",
    "start": "825019",
    "end": "830930"
  },
  {
    "text": "you then the famous thing in gold",
    "start": "830930",
    "end": "835999"
  },
  {
    "start": "832000",
    "end": "882000"
  },
  {
    "text": "there's no exceptions instead we use errors and if you bring any go you know",
    "start": "835999",
    "end": "841189"
  },
  {
    "text": "if error is not nil then something right so we do those checks all of the time they're part of how we write good code",
    "start": "841189",
    "end": "847850"
  },
  {
    "text": "and this is something that I could give a whole talk about it right but there's actually a really whole talk about it",
    "start": "847850",
    "end": "853519"
  },
  {
    "text": "which is very good by Dave Jenny call handle errors gracefully which is a",
    "start": "853519",
    "end": "859550"
  },
  {
    "text": "really good talk explain how to how we do errors and go the important thing for robustness is what happens when you have",
    "start": "859550",
    "end": "867889"
  },
  {
    "text": "exceptions and exceptions are been at Google for C++ therefore it cannot make",
    "start": "867889",
    "end": "873769"
  },
  {
    "text": "sense that when they create new language they also banned exceptions but directly by not adding them to the programming",
    "start": "873769",
    "end": "880850"
  },
  {
    "text": "language if you see this code where you're saying oh I'm going to provide",
    "start": "880850",
    "end": "886339"
  },
  {
    "start": "882000",
    "end": "919000"
  },
  {
    "text": "this function where whatever you can going to do I'm going to do it inside of a mutex right mutual exclusion only one",
    "start": "886339",
    "end": "893600"
  },
  {
    "text": "function at a time could be called no matter from how many places you're running this what happens if F throws an",
    "start": "893600",
    "end": "901430"
  },
  {
    "text": "exception well the mythix will never be unlocked the program will block forever and the",
    "start": "901430",
    "end": "908269"
  },
  {
    "text": "system is down right that is a serious problem so that's why in go there's no",
    "start": "908269",
    "end": "913279"
  },
  {
    "text": "exceptions and if you know go you'll be like but we'll get there later so what",
    "start": "913279",
    "end": "920870"
  },
  {
    "start": "919000",
    "end": "967000"
  },
  {
    "text": "about channels why are these part of robustness writing correct concurrency",
    "start": "920870",
    "end": "927189"
  },
  {
    "text": "concurrent programs is really hard really really hard and I'd say that actually the way go works and the",
    "start": "927189",
    "end": "934670"
  },
  {
    "text": "concurrency features that it provides allows Gophers to write better code that",
    "start": "934670",
    "end": "941120"
  },
  {
    "text": "is easily correct so in very quick the way it works is we have goroutines which are",
    "start": "941120",
    "end": "947430"
  },
  {
    "text": "the cute golfers the cute golfers communicate with each other using channels which are basic like Linux",
    "start": "947430",
    "end": "952889"
  },
  {
    "text": "pipes but they're typed and concurrently safe to use and then there's one more",
    "start": "952889",
    "end": "958319"
  },
  {
    "text": "thing which is select for when you want to do multiple things over channels those are the three concepts you need to know about concurrency and with this you",
    "start": "958319",
    "end": "964829"
  },
  {
    "text": "have everything right so these actually really go okay so we've talked about all",
    "start": "964829",
    "end": "971519"
  },
  {
    "text": "of the things that are good let's talk about things are not that good just want",
    "start": "971519",
    "end": "978120"
  },
  {
    "text": "to make sure I'm on time okay yeah cool cool so let's talk about the things that",
    "start": "978120",
    "end": "984660"
  },
  {
    "text": "are that make go fragile mutable state",
    "start": "984660",
    "end": "989899"
  },
  {
    "text": "mutable state that is shared that is very very wrong if you ask any",
    "start": "989899",
    "end": "995129"
  },
  {
    "text": "functional programmer they will tell you that mutable shared state is the worst single thing you could have in a foreign",
    "start": "995129",
    "end": "1001160"
  },
  {
    "text": "language so what happens here what we have is we have a function ticker that",
    "start": "1001160",
    "end": "1006529"
  },
  {
    "text": "every second is printing the value of a counter and then we have a web endpoint",
    "start": "1006529",
    "end": "1013459"
  },
  {
    "text": "for a web server that every single time it's hit it just adds something to the counter so when you run this it works",
    "start": "1013459",
    "end": "1021790"
  },
  {
    "text": "but this is wrong right why is this wrong does anyone know you know yeah so",
    "start": "1021790",
    "end": "1033288"
  },
  {
    "text": "there's two things this every single request will be handled by a different girl routine so you can have two",
    "start": "1033289",
    "end": "1038808"
  },
  {
    "text": "different go requests adding one at the same time and only one of those will actually work even worse the behavior",
    "start": "1038809",
    "end": "1045620"
  },
  {
    "text": "might be undefined because all of a sudden you get a data race at the same time you could be writing at the same",
    "start": "1045620",
    "end": "1052309"
  },
  {
    "text": "time that the picker is reading which is also different kind of data race but when you run it you don't see this when",
    "start": "1052309",
    "end": "1059480"
  },
  {
    "text": "you see this well actually when you have enough high load and all of a sudden you start missing counters and good luck",
    "start": "1059480",
    "end": "1066140"
  },
  {
    "text": "figuring that out right luckily we have that race which is the data race detector which is super nice and when",
    "start": "1066140",
    "end": "1073340"
  },
  {
    "start": "1067000",
    "end": "1137000"
  },
  {
    "text": "you when you run the same program with the race detector enable which you only need to add - race super simple you will get",
    "start": "1073340",
    "end": "1079850"
  },
  {
    "text": "warning data race and it will tell you exactly where it was reading where it",
    "start": "1079850",
    "end": "1085670"
  },
  {
    "text": "was writing or if to go routines were running at the same time word were those lines what were the ID of the girl routines",
    "start": "1085670",
    "end": "1091820"
  },
  {
    "text": "all of these things in order to be able to figure out what's going on quite easily now the problem is that the data",
    "start": "1091820",
    "end": "1098960"
  },
  {
    "text": "race is not free it's it makes your friend go slower so in my personal opinion you should run",
    "start": "1098960",
    "end": "1106490"
  },
  {
    "text": "your test with data race enable every single time I don't care if it's slow make faster tests I don't care it should",
    "start": "1106490",
    "end": "1114200"
  },
  {
    "text": "be data reasonable because it's really important and maybe in production when",
    "start": "1114200",
    "end": "1119420"
  },
  {
    "text": "you're deploying a cannery you could actually also deploy with their Airways enable see if it's working and once it's",
    "start": "1119420",
    "end": "1125720"
  },
  {
    "text": "working then redeploy with the data is enable and send production traffic right that way every single warning data race",
    "start": "1125720",
    "end": "1132680"
  },
  {
    "text": "that's an issue that's something you need to fix before you deploy to production neo pointers I gave the whole",
    "start": "1132680",
    "end": "1141080"
  },
  {
    "start": "1137000",
    "end": "1215000"
  },
  {
    "text": "talk about neo pointers nail pointers are the 1 million dollar mistake or 1",
    "start": "1141080",
    "end": "1146150"
  },
  {
    "text": "billion dollar mistakes I don't even remember this very expensive mistake right the I forgot the name of the person that",
    "start": "1146150",
    "end": "1153020"
  },
  {
    "text": "invented pointers now but he said actually yeah see her he he",
    "start": "1153020",
    "end": "1161810"
  },
  {
    "text": "bent the pointers and he said it was the worst mistake he's ever done and then the gold creators come and they're like",
    "start": "1161810",
    "end": "1167360"
  },
  {
    "text": "you know what let's not have nail pointers but also neo slices me channels new maps and malfunction all these are",
    "start": "1167360",
    "end": "1173510"
  },
  {
    "text": "gonna be Neil so yeh everything is gonna tell I gave a whole talk go freak on in",
    "start": "1173510",
    "end": "1179540"
  },
  {
    "text": "2016 about this and I invite you to watch it the whole idea of this talk is yes Neil",
    "start": "1179540",
    "end": "1186350"
  },
  {
    "text": "pointers have bad sites but actually they're very useful and go if you have a",
    "start": "1186350",
    "end": "1191810"
  },
  {
    "text": "pointer to a type calling a function in it doesn't necessary fail which means",
    "start": "1191810",
    "end": "1197360"
  },
  {
    "text": "that Neil values are actually useful and go especially for slices and not functions but slices and channels and",
    "start": "1197360",
    "end": "1204320"
  },
  {
    "text": "receivers and all this Neil values are totally fine for some others like Neil Maps",
    "start": "1204320",
    "end": "1209570"
  },
  {
    "text": "they're actually the way they are they're not great but they're there and",
    "start": "1209570",
    "end": "1216009"
  },
  {
    "start": "1215000",
    "end": "1293000"
  },
  {
    "text": "lack of generics yes go does not have generics which is good in some sites in",
    "start": "1216789",
    "end": "1226460"
  },
  {
    "text": "some ways because it makes the primary language easier to understand and simpler to learn and all of these things",
    "start": "1226460",
    "end": "1231499"
  },
  {
    "text": "which is great but when you don't have generics there are many things that are",
    "start": "1231499",
    "end": "1236929"
  },
  {
    "text": "hard to implement one of them is bonnets one very nice way to handle errors is by",
    "start": "1236929",
    "end": "1243529"
  },
  {
    "text": "using Monat the error monitor or the maybe monad are great for this and I gave a talk at door go in 2015",
    "start": "1243529",
    "end": "1251259"
  },
  {
    "text": "long time ago so in 2015 I gave a talk about what did we try to do monads and",
    "start": "1251259",
    "end": "1259639"
  },
  {
    "text": "go so I tried and it works but it's so",
    "start": "1259639",
    "end": "1264679"
  },
  {
    "text": "painful that it's not worth it it is a really bad idea but the whole point is that the API you end up having is",
    "start": "1264679",
    "end": "1271909"
  },
  {
    "text": "actually quite nice so I'd say that if go had generics they're handy we do would be nicer and easier to to manage",
    "start": "1271909",
    "end": "1280159"
  },
  {
    "text": "there be old downsides problem will be the primal language be harder to understand but I don't know where I",
    "start": "1280159",
    "end": "1287090"
  },
  {
    "text": "don't know what we should do I'm not saying we should have generics I'm just saying there's good things about them I",
    "start": "1287090",
    "end": "1295210"
  },
  {
    "start": "1293000",
    "end": "1384000"
  },
  {
    "text": "also said go doesn't have exceptions instead eheh it has panics sure what are",
    "start": "1295210",
    "end": "1305389"
  },
  {
    "text": "what is the difference not much they're actually basically same thing panics are the same thing as exceptions they're",
    "start": "1305389",
    "end": "1310789"
  },
  {
    "text": "just not called exceptions because panic it's more about this is when you're really panicking literally there's",
    "start": "1310789",
    "end": "1317149"
  },
  {
    "text": "nothing else you could do right so for instance I don't know you try to allocate memory turns that there's no",
    "start": "1317149",
    "end": "1322729"
  },
  {
    "text": "more memory what are you going to do you can return now and that will fail later or you could just fail now there's no",
    "start": "1322729",
    "end": "1328789"
  },
  {
    "text": "point there's no point in trying to continue right so that the point where you panic I like to say that panics are",
    "start": "1328789",
    "end": "1335059"
  },
  {
    "text": "used exceptionally I like exceptions exceptions are a thing that you see all the time right panics are really really",
    "start": "1335059",
    "end": "1342520"
  },
  {
    "text": "and the way you recover from them is by using recovery function the recovery",
    "start": "1342520",
    "end": "1347799"
  },
  {
    "text": "function what it will do is will we be called always inside of the first function which means that that will be",
    "start": "1347799",
    "end": "1354490"
  },
  {
    "text": "called at the N of main and the function were you defining it no matter what right so even if there's a panic",
    "start": "1354490",
    "end": "1363240"
  },
  {
    "text": "deferred functions will be called in there you can go recover and that will check if we got there because of a panic",
    "start": "1363240",
    "end": "1370780"
  },
  {
    "text": "and then it would give you that value so that's how you can handle this errors",
    "start": "1370780",
    "end": "1375840"
  },
  {
    "text": "which is pre next because then it means that yeah we have panics but we can recover from them so you know we can",
    "start": "1375840",
    "end": "1381940"
  },
  {
    "text": "still keep our program running which is what we want so another HTTP server this",
    "start": "1381940",
    "end": "1388090"
  },
  {
    "start": "1384000",
    "end": "1455000"
  },
  {
    "text": "HTTP server is simply whenever you call when it receives an HTTP request it",
    "start": "1388090",
    "end": "1393280"
  },
  {
    "text": "panics saying boo what happens well the HTTP package actually recovers",
    "start": "1393280",
    "end": "1400750"
  },
  {
    "text": "from that mistake and it will print a message saying hey there was a panic but",
    "start": "1400750",
    "end": "1407110"
  },
  {
    "text": "don't worry we'll keep going we're fine and it just continues going the HTTP server will not",
    "start": "1407110",
    "end": "1413049"
  },
  {
    "text": "go down nice now you do this go panic",
    "start": "1413049",
    "end": "1418570"
  },
  {
    "text": "boom now panic happens in a different go",
    "start": "1418570",
    "end": "1423669"
  },
  {
    "text": "routine so the call stack that we're going up does not include the HTTP",
    "start": "1423669",
    "end": "1428679"
  },
  {
    "text": "package which means they it does not include a recover which means that the panic will not be caught which means",
    "start": "1428679",
    "end": "1435400"
  },
  {
    "text": "that everything will crash the whole HTTP server will crash right so no",
    "start": "1435400",
    "end": "1444010"
  },
  {
    "text": "matter how safely you read your code anyone can write go panic and take your",
    "start": "1444010",
    "end": "1450429"
  },
  {
    "text": "server down so go is not robust which is",
    "start": "1450429",
    "end": "1456010"
  },
  {
    "start": "1455000",
    "end": "1508000"
  },
  {
    "text": "sad but at the same time if you think about it no matter how robust your",
    "start": "1456010",
    "end": "1462520"
  },
  {
    "text": "brahmin language is if your computer catches fire who cares and by catching",
    "start": "1462520",
    "end": "1468190"
  },
  {
    "text": "fire on ned silly say catch fire but i'm plugging the computer the network goes down whatever could happen to the",
    "start": "1468190",
    "end": "1474730"
  },
  {
    "text": "country or even for some reason the CPU stops working like these things happen right",
    "start": "1474730",
    "end": "1479980"
  },
  {
    "text": "it had if they don't happen really often until you have billions of computers and then it happens every second so these",
    "start": "1479980",
    "end": "1487060"
  },
  {
    "text": "are things that you cannot really do it so so there's no point in trying to do robustness so we should just give up and",
    "start": "1487060",
    "end": "1493870"
  },
  {
    "text": "go so thank you now just kidding now that this is an",
    "start": "1493870",
    "end": "1499330"
  },
  {
    "text": "important point right because no matter how good your primary language is it will not be robust there's no way you",
    "start": "1499330",
    "end": "1505270"
  },
  {
    "text": "can do that but Erlang is robust Joe",
    "start": "1505270",
    "end": "1515380"
  },
  {
    "start": "1508000",
    "end": "1833000"
  },
  {
    "text": "answering gave a talk about how you can make incredibly robust programs that run",
    "start": "1515380",
    "end": "1521050"
  },
  {
    "text": "forever self-healed they're amazing miracles of computer science and not",
    "start": "1521050",
    "end": "1526090"
  },
  {
    "text": "only that but they achieve nine nines of availability which is by the way totally",
    "start": "1526090",
    "end": "1531640"
  },
  {
    "text": "false you can search it and find that this not correct but still even if it's",
    "start": "1531640",
    "end": "1537430"
  },
  {
    "text": "not nine nines and it's only five nines that's still amazing right so Erlang gets it right so how do they do it well",
    "start": "1537430",
    "end": "1547590"
  },
  {
    "text": "these I spend a lot of time doing this photoshop of Joe Armstrong because I",
    "start": "1547770",
    "end": "1553690"
  },
  {
    "text": "really his position on this image I did actually a or chimp I actually know",
    "start": "1553690",
    "end": "1558730"
  },
  {
    "text": "how to pronounce it anyway there's a really good talk that he gave it's called system the run forever self hill",
    "start": "1558730",
    "end": "1563950"
  },
  {
    "text": "and scale and I definitely recommend everyone to go watch it because it's one of my favorite talks it's an info cube and in those he talks",
    "start": "1563950",
    "end": "1572860"
  },
  {
    "text": "about six rules that make there are necessary for prom language or a system",
    "start": "1572860",
    "end": "1578890"
  },
  {
    "text": "in general to be robust the first one is isolation right which means that if",
    "start": "1578890",
    "end": "1584470"
  },
  {
    "text": "something fails it's fine that component will fail but the rest should still be",
    "start": "1584470",
    "end": "1590080"
  },
  {
    "text": "okay right so in go if you have a guru tinder panics and that panic is not cut",
    "start": "1590080",
    "end": "1596950"
  },
  {
    "text": "the whole system goes down so go that's not provide isolation so boo concurrency",
    "start": "1596950",
    "end": "1605200"
  },
  {
    "text": "Erlang provides concurrency they have processing which are actually very very similar to",
    "start": "1605200",
    "end": "1610550"
  },
  {
    "text": "threats to sorry to threat to go routines super cheap and you can run thousands millions of diamond in a",
    "start": "1610550",
    "end": "1617360"
  },
  {
    "text": "single in a single machine this is very nice the system of concurrency is a",
    "start": "1617360",
    "end": "1622700"
  },
  {
    "text": "little bit different and go we have channels airline has pro actors is that",
    "start": "1622700",
    "end": "1628190"
  },
  {
    "text": "if there's a really good interview which I forgot to add but there's a very good interview at two with Joe and Joe",
    "start": "1628190",
    "end": "1636410"
  },
  {
    "text": "Armstrong and the creator of the actor Proctor model talking about how the",
    "start": "1636410",
    "end": "1641870"
  },
  {
    "text": "actor model is better than communicating sequential processes which is the one with channels because you can implement",
    "start": "1641870",
    "end": "1648350"
  },
  {
    "text": "channels with actors and not the other way around so it's pretty powerful that",
    "start": "1648350",
    "end": "1654710"
  },
  {
    "text": "they're really similar so I'd say go concurrency pretty good failure",
    "start": "1654710",
    "end": "1659960"
  },
  {
    "text": "detection so when something goes wrong we notice it right in Erlang do you have",
    "start": "1659960",
    "end": "1665840"
  },
  {
    "text": "things like monitors so basically when a process fails you can get a notification",
    "start": "1665840",
    "end": "1670880"
  },
  {
    "text": "from somewhere else saying hey that that fell right and then you can you can ignore it or you can do something about",
    "start": "1670880",
    "end": "1676910"
  },
  {
    "text": "it in go well we detect it because the hope the whole program fails right so",
    "start": "1676910",
    "end": "1683030"
  },
  {
    "text": "it's easy to detect but there's no much more than that they'll have fault identification and",
    "start": "1683030",
    "end": "1689960"
  },
  {
    "text": "faulty different indentification is also quite interesting because it is not about knowing that something fell is",
    "start": "1689960",
    "end": "1696380"
  },
  {
    "text": "about knowing why it fell and this is quite interesting because in so in go",
    "start": "1696380",
    "end": "1702320"
  },
  {
    "text": "you could parse the panic like maybe I do not recommend trying to do that at",
    "start": "1702320",
    "end": "1708200"
  },
  {
    "text": "all like please done in Erlang when you pan when you when a process fails you",
    "start": "1708200",
    "end": "1713750"
  },
  {
    "text": "can actually say hey I'm failing this is the reason why which could be something from a stack trace to a string or any",
    "start": "1713750",
    "end": "1720620"
  },
  {
    "text": "other value Joe Armstrong and T star talks about you could send a whole database which I do not recommend either",
    "start": "1720620",
    "end": "1726380"
  },
  {
    "text": "but you do you and then you can act on it right go doesn't really that the let",
    "start": "1726380",
    "end": "1734230"
  },
  {
    "text": "life got upgrade this is something that I have never used with Erlang but it's",
    "start": "1734230",
    "end": "1741500"
  },
  {
    "text": "basically of being able to deploy a new chunk of a program while it's running and not take",
    "start": "1741500",
    "end": "1748760"
  },
  {
    "text": "it down and just refresh them update the code it just keep running which really",
    "start": "1748760",
    "end": "1755540"
  },
  {
    "text": "reminds me of this picture because it's it sounds really dangerous but it actually works really well go does not",
    "start": "1755540",
    "end": "1762800"
  },
  {
    "text": "do this I don't like don't even think about having this ever I do not think that anyone wants using go so you cannot",
    "start": "1762800",
    "end": "1769880"
  },
  {
    "text": "do this what's the point of this well if you need to stop the program to upgrade",
    "start": "1769880",
    "end": "1775130"
  },
  {
    "text": "it it means that in between that part where you stop it and you start again you might miss requests so you have a",
    "start": "1775130",
    "end": "1782000"
  },
  {
    "text": "little downtime in there right so that's why the live code upgrade is important",
    "start": "1782000",
    "end": "1787030"
  },
  {
    "text": "and finally he also talked stable storage and I would like to talk to him",
    "start": "1787030",
    "end": "1793070"
  },
  {
    "text": "about this because I'm actually not that sure about what he means stable storage is a storage that allows you to",
    "start": "1793070",
    "end": "1799100"
  },
  {
    "text": "basically do transactions so when you do something on it either it works completely or either or it fails",
    "start": "1799100",
    "end": "1805040"
  },
  {
    "text": "completely but there's no like me meat stays right so for instance if you have sequel database when you do a",
    "start": "1805040",
    "end": "1812600"
  },
  {
    "text": "transaction you have that if you have other databases you might have the same but for instance if you have wearing two",
    "start": "1812600",
    "end": "1817970"
  },
  {
    "text": "if you're running to a hard disk unless it's a transactional file system very",
    "start": "1817970",
    "end": "1823670"
  },
  {
    "text": "often if the program fails you may end up with corrected corrupted files right that is not stable so stable storage is",
    "start": "1823670",
    "end": "1830240"
  },
  {
    "text": "important to have a distributed system that is robust in all of these these six",
    "start": "1830240",
    "end": "1836210"
  },
  {
    "start": "1833000",
    "end": "2211000"
  },
  {
    "text": "rules allows you to then say let it crash which is something that Erlang",
    "start": "1836210",
    "end": "1841840"
  },
  {
    "text": "proposes saying if something's wrong just crash thank you",
    "start": "1841840",
    "end": "1847190"
  },
  {
    "text": "if something is wrong just crash don't worry about it someone else will fix the",
    "start": "1847190",
    "end": "1852410"
  },
  {
    "text": "mess right this is only you can do it once you've you've actually figure out the six rules before gold doesn't do it",
    "start": "1852410",
    "end": "1858830"
  },
  {
    "text": "therefore let it crash forgo is a bad strategy so who wins Erlang versus go okay or a",
    "start": "1858830",
    "end": "1868760"
  },
  {
    "text": "nine versus go good I said at the end filler detection yes because",
    "start": "1868760",
    "end": "1874460"
  },
  {
    "text": "keine life got upgrade therefore not in stable storage I mean her like a stable storage because",
    "start": "1874460",
    "end": "1880520"
  },
  {
    "text": "they use in Asia which is a database in go you can also use that database so for right why not like that's fine in my",
    "start": "1880520",
    "end": "1887390"
  },
  {
    "text": "book that means that we have stable storage for got you and this my best",
    "start": "1887390",
    "end": "1894020"
  },
  {
    "text": "slide look at this work come on now",
    "start": "1894020",
    "end": "1899870"
  },
  {
    "text": "there was a beautiful animation in there wait a second there you go",
    "start": "1899870",
    "end": "1905750"
  },
  {
    "text": "thank you I spent a lot of time doing this so why is the new hope the new hope",
    "start": "1905750",
    "end": "1912530"
  },
  {
    "text": "is kubernetes why well because with kubernetes you actually are able to",
    "start": "1912530",
    "end": "1917900"
  },
  {
    "text": "satisfy the rest of the rules that go doesn't bring by itself kubernetes so",
    "start": "1917900",
    "end": "1923240"
  },
  {
    "text": "installation that's kubernetes provided solution yes lots of it like everywhere first of all it runs on containers so if",
    "start": "1923240",
    "end": "1930710"
  },
  {
    "text": "a container goes down it doesn't bother anyone else there's namespaces so you can even",
    "start": "1930710",
    "end": "1935720"
  },
  {
    "text": "isolate those containers from interacting with each other you have multiple nodes so if a machine goes down nobody cares because there's other",
    "start": "1935720",
    "end": "1942290"
  },
  {
    "text": "machines and not only that but you have multiple clusters so if a whole country",
    "start": "1942290",
    "end": "1947510"
  },
  {
    "text": "loses electricity well there's another country where you have another data data center you find right so installation",
    "start": "1947510",
    "end": "1953630"
  },
  {
    "text": "perfect amazing concurrency well we already had it with go basically",
    "start": "1953630",
    "end": "1961070"
  },
  {
    "text": "the only thing we're getting is you have more parallelism you'll be able to run more replicas around different machines",
    "start": "1961070",
    "end": "1966710"
  },
  {
    "text": "and stuff like that but doesn't really add more from that point of view failure",
    "start": "1966710",
    "end": "1972050"
  },
  {
    "text": "detection these actually where kubernetes is amazing because it will monitor your your containers for free",
    "start": "1972050",
    "end": "1977990"
  },
  {
    "text": "right so you will actually be checking all the time are you okay are you okay are you okay you're not okay by new one",
    "start": "1977990",
    "end": "1984440"
  },
  {
    "text": "right that is what you want if something fails it will just be restarted automatically which is what airline also",
    "start": "1984440",
    "end": "1989900"
  },
  {
    "text": "does also restart policies allow you to even detect those things and do things",
    "start": "1989900",
    "end": "1996320"
  },
  {
    "text": "accordingly when something fails it doesn't need that it should be restarted automatically maybe you want to do something else you can also do those",
    "start": "1996320",
    "end": "2002770"
  },
  {
    "text": "things fault identification you luck stuff so you can go read the",
    "start": "2002770",
    "end": "2008080"
  },
  {
    "text": "logs no don't do that I mean Locke stuff for sure but do not",
    "start": "2008080",
    "end": "2013570"
  },
  {
    "text": "read the log so the tech but happen like with a machine that's really bad either yeah I consider but there's definition",
    "start": "2013570",
    "end": "2020200"
  },
  {
    "text": "log which I had no idea it existed but when a container goes down you can write to that file and that will be part of",
    "start": "2020200",
    "end": "2026440"
  },
  {
    "text": "your container specification of your pot actually so if a pot goes down you can right there and then ask hey that pot",
    "start": "2026440",
    "end": "2033610"
  },
  {
    "text": "fell what happened and you will get the message so you get exactly same idea as in Erlang you have that concept of being",
    "start": "2033610",
    "end": "2040510"
  },
  {
    "text": "able to leave a message I'm about to die but this is why right live code upgrade",
    "start": "2040510",
    "end": "2048480"
  },
  {
    "text": "sure we have liners Pro liveness pros and radius probes and the life running",
    "start": "2048480",
    "end": "2055839"
  },
  {
    "text": "updates what is this we have rolling updates which means that you can yes I",
    "start": "2055839",
    "end": "2061270"
  },
  {
    "text": "got it you can migrate from v1 to v2 or be 11.2 v1 dot you by saying hey I had",
    "start": "2061270",
    "end": "2069970"
  },
  {
    "text": "three parts in version one and I want to end up having three parts on version true please figure out what Q&A is going",
    "start": "2069970",
    "end": "2077618"
  },
  {
    "text": "to do is start a new pod for version two and once it's not only live but ready",
    "start": "2077619",
    "end": "2086079"
  },
  {
    "text": "imagine that you have a system that takes one minute to start it's running but still not ready to answer requests",
    "start": "2086079",
    "end": "2091898"
  },
  {
    "text": "that is the difference between lightness and readiness so once it's ready it will take down one of the version one then",
    "start": "2091899",
    "end": "2098230"
  },
  {
    "text": "start new one wait for readiness stop one and continue like this this means",
    "start": "2098230",
    "end": "2104050"
  },
  {
    "text": "that if for any reason something is wrong the deployment will stop so you will not have any problem of downtime",
    "start": "2104050",
    "end": "2110650"
  },
  {
    "text": "because a new version is broken unless your readiness probe is also",
    "start": "2110650",
    "end": "2116589"
  },
  {
    "text": "broken and then you're out of luck and finally stable storage sure we already",
    "start": "2116589",
    "end": "2123520"
  },
  {
    "text": "had it before so why not but also kubernetes comes with that CD which is a very good example of stable storage you",
    "start": "2123520",
    "end": "2129310"
  },
  {
    "text": "can also use sequel databases or any other that is that you want so in conclusion so airline and go",
    "start": "2129310",
    "end": "2139540"
  },
  {
    "text": "if you compare them or like clearly wins but Erlang is not robust beam yes and if",
    "start": "2139540",
    "end": "2151060"
  },
  {
    "text": "you convert to that and you compare err lying on top of beam versus go on top of kubernetes you will see that one I don't",
    "start": "2151060",
    "end": "2157960"
  },
  {
    "text": "know how to do animations but second that is actually exactly as robust as",
    "start": "2157960",
    "end": "2163510"
  },
  {
    "text": "beam so kubernetes is not something revolutionary for those that were",
    "start": "2163510",
    "end": "2169750"
  },
  {
    "text": "already using beam if you're using airline or using a mixer that's amazing",
    "start": "2169750",
    "end": "2174880"
  },
  {
    "text": "you're already using a system that has been incredibly robust for many many years but for those running different",
    "start": "2174880",
    "end": "2180430"
  },
  {
    "text": "program foreign languages so just go but you could also be writing any other language literally you could be writing",
    "start": "2180430",
    "end": "2185920"
  },
  {
    "text": "in Java you could be writing in JavaScript kubernetes will provide that extra layer that allows your programs to",
    "start": "2185920",
    "end": "2191950"
  },
  {
    "text": "be more robust I like to end up thanking two women that helped me write this talk",
    "start": "2191950",
    "end": "2197220"
  },
  {
    "text": "Veronica and Miriam Veronica is really good a little sir Miriam is really good",
    "start": "2197220",
    "end": "2202960"
  },
  {
    "text": "at her line and they made my talk much better so thank you to them and I'm done",
    "start": "2202960",
    "end": "2207970"
  },
  {
    "text": "so thank you very much and we have some time for questions [Applause]",
    "start": "2207970",
    "end": "2216840"
  },
  {
    "start": "2211000",
    "end": "2274000"
  },
  {
    "text": "all right yeah thanks Francesca oh and yeah if anyone has the app feel free to submit questions through the the go to",
    "start": "2216840",
    "end": "2223420"
  },
  {
    "text": "Chicago app or raise your hand if you have something to ask I have one to kick it off just cuz I don't know the NGO",
    "start": "2223420",
    "end": "2229000"
  },
  {
    "text": "ecosystem well off the top of your head what do you thinks the most robust",
    "start": "2229000",
    "end": "2234090"
  },
  {
    "text": "commonly used go program or even just that you've seen like you know can you",
    "start": "2234090",
    "end": "2239140"
  },
  {
    "text": "get to five 9s with a really good go program so I'd say that probably",
    "start": "2239140",
    "end": "2245920"
  },
  {
    "text": "kubernetes the fact that he's bringing go abscess I'd go with a bust somebody's not about the fun that he's bringing go",
    "start": "2245920",
    "end": "2252310"
  },
  {
    "text": "it could be raining in any other language and still be as robust because it's the architecture that counts right kubernetes is a rewrite an open-source",
    "start": "2252310",
    "end": "2260890"
  },
  {
    "text": "version of an internal version on the internal system in at Google called",
    "start": "2260890",
    "end": "2265960"
  },
  {
    "text": "board that is bringing C++ right so it's not about robustness of the language itself it's about the architecture that",
    "start": "2265960",
    "end": "2272230"
  },
  {
    "text": "you write cool um we got a question on the app",
    "start": "2272230",
    "end": "2278609"
  },
  {
    "start": "2274000",
    "end": "2483000"
  },
  {
    "text": "asking about sort of dependency management and versioning and go sort of",
    "start": "2278609",
    "end": "2285070"
  },
  {
    "text": "comparison to like nodejs or maven or something like that and asks why didn't",
    "start": "2285070",
    "end": "2290970"
  },
  {
    "text": "go sort of embrace the sort of no I",
    "start": "2290970",
    "end": "2298839"
  },
  {
    "text": "think no I think things are going in a different direction now why didn't go should make the choice that a lot of",
    "start": "2298839",
    "end": "2304240"
  },
  {
    "text": "other languages that came out in the early 2000s to have so version dependencies and distributed source",
    "start": "2304240",
    "end": "2310930"
  },
  {
    "text": "control and everything so I guess the most important thing to know is that we have not really decided yet",
    "start": "2310930",
    "end": "2316839"
  },
  {
    "text": "we've been playing we so go to very long time to have a version management system",
    "start": "2316839",
    "end": "2323339"
  },
  {
    "text": "because it comes from Google where we have one repo so we don't have versions",
    "start": "2323339",
    "end": "2328510"
  },
  {
    "text": "that's pretty easy right now not everybody should do that it's a not very",
    "start": "2328510",
    "end": "2333820"
  },
  {
    "text": "good idea if you have multiple teams and don't have many engineers to maintain your repo so we started doing it by",
    "start": "2333820",
    "end": "2342760"
  },
  {
    "text": "vending because it's the simplest way where you have all the power to do whatever you want basically you copy",
    "start": "2342760",
    "end": "2348339"
  },
  {
    "text": "that piece of code that you depend on you put it inside of your repository and then you want to upgrade well you go you",
    "start": "2348339",
    "end": "2355180"
  },
  {
    "text": "get a new version and you put there the problem is that upgrading that can be painful so that's why we we create tools",
    "start": "2355180",
    "end": "2361690"
  },
  {
    "text": "around that DEP is the tool that I still use personally that allows you to manage",
    "start": "2361690",
    "end": "2367570"
  },
  {
    "text": "this in a very simple way basically you're able to say hey find all the dependencies that I have once you bring",
    "start": "2367570",
    "end": "2373570"
  },
  {
    "text": "your program it will store them and then when you want to upgrade to something near you just added one file saying",
    "start": "2373570",
    "end": "2378700"
  },
  {
    "text": "actually I want to add to go to the next version and it will do it by yourself there's a new thing called Vigo which is",
    "start": "2378700",
    "end": "2385480"
  },
  {
    "text": "what everybody is supposed to be trying out now I have not tried that yet and it's similar idea but the most the most",
    "start": "2385480",
    "end": "2393339"
  },
  {
    "text": "important difference is that no js' and MPM and all these package managers very",
    "start": "2393339",
    "end": "2398770"
  },
  {
    "text": "often what they do is they are you to have lots of power on what version you want to run but the default is",
    "start": "2398770",
    "end": "2406270"
  },
  {
    "text": "the latest version which is dangerous so in Vigo what we do is the other way",
    "start": "2406270",
    "end": "2411970"
  },
  {
    "text": "around so you'd say if you say 2.10 but to the one dot nothing we're going to",
    "start": "2411970",
    "end": "2418750"
  },
  {
    "text": "try to use zero as long as it's available and if you want to upgrade to something higher then say it because",
    "start": "2418750",
    "end": "2424990"
  },
  {
    "text": "otherwise what happens if a new version comes you're just deploying and without even noticing you're deploying new code",
    "start": "2424990",
    "end": "2432119"
  },
  {
    "text": "right so Vigo and there the main difference is that is Vigo is much more",
    "start": "2432119",
    "end": "2437380"
  },
  {
    "text": "conservative for people who don't know the ecosystem well would you say there's",
    "start": "2437380",
    "end": "2442900"
  },
  {
    "text": "a talk or a blog post somewhere on like hey these are the best practices this is",
    "start": "2442900",
    "end": "2448359"
  },
  {
    "text": "how you should actually use like no dapper Vigo so for that I'd say I made",
    "start": "2448359",
    "end": "2454690"
  },
  {
    "text": "the documentation of that is amazing but also there was a really good talk by the",
    "start": "2454690",
    "end": "2460000"
  },
  {
    "text": "creator of the app which I forgot his name he's gonna kill me Sam Boyer he",
    "start": "2460000",
    "end": "2465730"
  },
  {
    "text": "gave a keynote gopher con last year about that explaining how it happened",
    "start": "2465730",
    "end": "2470859"
  },
  {
    "text": "and the decision taken during the process and stuff like that very good talk for Vigo there's a true blog post",
    "start": "2470859",
    "end": "2477640"
  },
  {
    "text": "brand by Russ Cox from the go team that explained this very cool",
    "start": "2477640",
    "end": "2482890"
  },
  {
    "text": "any other questions from the audience I've got one so let's let's imagine that",
    "start": "2482890",
    "end": "2490570"
  },
  {
    "start": "2483000",
    "end": "2562000"
  },
  {
    "text": "go-to comes out and it has Erlang style like hot code swapping yeah you could",
    "start": "2490570",
    "end": "2496720"
  },
  {
    "text": "magically swap out function implementations on a live go routine or",
    "start": "2496720",
    "end": "2502599"
  },
  {
    "text": "something yeah would you use that idea yes and yes yes it is a terrible in the",
    "start": "2502599",
    "end": "2511660"
  },
  {
    "text": "I'd say but yes I would definitely use it because I love so I'm sure you also a",
    "start": "2511660",
    "end": "2517510"
  },
  {
    "text": "sonic PI so I'm a PI based on the idea that you can actually refresh a function and keep running in God that's",
    "start": "2517510",
    "end": "2523540"
  },
  {
    "text": "impossible simply impossible right now I'd love to be able to do that because",
    "start": "2523540",
    "end": "2529480"
  },
  {
    "text": "this static an compiled yes and we have plugins but those plugins are loaded",
    "start": "2529480",
    "end": "2534750"
  },
  {
    "text": "dynamically but only once so then I bro that thing that is",
    "start": "2534750",
    "end": "2541300"
  },
  {
    "text": "disgusting so please I have not even going to say what it is but basically what it says is whenever you try to load on your file it",
    "start": "2541300",
    "end": "2548319"
  },
  {
    "text": "will say I'm going to compile it and load it and I'm going to going to give you a random name so that way you have a",
    "start": "2548319",
    "end": "2554200"
  },
  {
    "text": "new thing the problem is that of course there's no garbage collection for that so after a couple of minutes your program crashes but that's ok yeah a lot",
    "start": "2554200",
    "end": "2563650"
  },
  {
    "start": "2562000",
    "end": "2671000"
  },
  {
    "text": "of people really praise goes like small static binary outputs for things like",
    "start": "2563650",
    "end": "2569349"
  },
  {
    "text": "building like scratch docker files that is cool stuff like that yeah do you feel like that's the future do you feel like",
    "start": "2569349",
    "end": "2574630"
  },
  {
    "text": "a slightly more dynamic like hot loading thing has benefits like real benefits",
    "start": "2574630",
    "end": "2580089"
  },
  {
    "text": "for like sort of future so systems I've seen a system that got me really excited",
    "start": "2580089",
    "end": "2585220"
  },
  {
    "text": "which is so go and its run time have a pretty clear API right and what someone",
    "start": "2585220",
    "end": "2593290"
  },
  {
    "text": "was proposing was saying well why don't we use this API and the runtime brethren see they say it's a Windows runtime or a",
    "start": "2593290",
    "end": "2600940"
  },
  {
    "text": "Linux run time or whatever it's a distributed runtime right so that's in program whenever you're running a new",
    "start": "2600940",
    "end": "2607210"
  },
  {
    "text": "girl routine Danny girl routine might be running in a different machine which we wouldn't make go be more like Erlang / beam that is",
    "start": "2607210",
    "end": "2615940"
  },
  {
    "text": "super interesting but it's a research problem right now so if that happened I think be really interesting because then it would allow",
    "start": "2615940",
    "end": "2621760"
  },
  {
    "text": "go to be as robust as go Plus kubernetes without needing kubernetes and I think",
    "start": "2621760",
    "end": "2627099"
  },
  {
    "text": "that the runtime below go could actually be kubernetes which is kind of ADA but",
    "start": "2627099",
    "end": "2632950"
  },
  {
    "text": "it could work and I think that's super interesting that's something that I would like to see one day so like kubernetes would basically become a go",
    "start": "2632950",
    "end": "2638920"
  },
  {
    "text": "routine scheduler and nowhere yeah yeah and it knows everything so if you have",
    "start": "2638920",
    "end": "2644050"
  },
  {
    "text": "channels between two routines because they're going to communicate so you should be running the same machine if",
    "start": "2644050",
    "end": "2649119"
  },
  {
    "text": "possible and things like this what's the name of that project it's actually something that I heard internally at",
    "start": "2649119",
    "end": "2654490"
  },
  {
    "text": "Google but it was open source and I know I can talk about it because I don't work at Google know but also because it was a",
    "start": "2654490",
    "end": "2660339"
  },
  {
    "text": "public blog post but I don't remember the name cool well thank you so much",
    "start": "2660339",
    "end": "2666550"
  },
  {
    "text": "Francesco good you",
    "start": "2666550",
    "end": "2670530"
  }
]