[
  {
    "start": "0",
    "end": "321000"
  },
  {
    "text": "[Applause]",
    "start": "5240",
    "end": "8549"
  },
  {
    "text": "all right so good morning everyone uh so I want to talk today about reactive programming in particular I want to talk",
    "start": "11200",
    "end": "17400"
  },
  {
    "text": "about some ideas about how to integrate some of the traditional approaches of functional programming and in particular",
    "start": "17400",
    "end": "23599"
  },
  {
    "text": "functional and persistent data structures into uh the into Frameworks",
    "start": "23599",
    "end": "28800"
  },
  {
    "text": "that we have for doing rea active programming and show how you can merge those together to get a better and more effective way of doing reactive",
    "start": "28800",
    "end": "35120"
  },
  {
    "text": "programming but before I talk about that I want to talk for a minute about what reactive programming is and why it's",
    "start": "35120",
    "end": "41719"
  },
  {
    "text": "useful why it's important and why it's difficult uh so first what is reactive programming so for the present purposes",
    "start": "41719",
    "end": "48960"
  },
  {
    "text": "I I just think of reactive programming as being the case where you're writing programs that need to react in real time",
    "start": "48960",
    "end": "54559"
  },
  {
    "text": "to data flowing in from the outside world and to react promptly to that data so the kind of classic description of",
    "start": "54559",
    "end": "60920"
  },
  {
    "text": "what's going on computationally in reactive programming is you have some thing that you want to compute a",
    "start": "60920",
    "end": "66799"
  },
  {
    "text": "function of the current state of the world and the current state is changing under your feet data is streaming in new",
    "start": "66799",
    "end": "72960"
  },
  {
    "text": "information is always coming in and you need to be able to refresh that computation quickly as uh as that change",
    "start": "72960",
    "end": "80960"
  },
  {
    "text": "is occurring and it's worth noting what this isn't about this is not a statement",
    "start": "80960",
    "end": "86400"
  },
  {
    "text": "about doing time oriented computations or anything really interestingly semantically different",
    "start": "86400",
    "end": "92079"
  },
  {
    "text": "about it from the point of view I'm talking about now reactive programming is really a question of performance a",
    "start": "92079",
    "end": "97240"
  },
  {
    "text": "question of optimization and the thing that separates ordinary programs ordinary all",
    "start": "97240",
    "end": "103040"
  },
  {
    "text": "at once computations from reactive computations is really purely a question of optimization in this View and this",
    "start": "103040",
    "end": "110240"
  },
  {
    "text": "notion of reactive programming comes up all the time it's a very pervasive part",
    "start": "110240",
    "end": "115439"
  },
  {
    "text": "of lots of different programming problems and it shows up a lot in the work that I do and that we do Jan street so Jan street is a trading firm and we",
    "start": "115439",
    "end": "123159"
  },
  {
    "text": "run systems that interact with and get data from the markets constantly we have offices in New York and London and Hong",
    "start": "123159",
    "end": "129679"
  },
  {
    "text": "Kong and we have a 24-hour trading system that is constantly listening to",
    "start": "129679",
    "end": "134879"
  },
  {
    "text": "things that are happening in the market so we have Market Data Systems that consume and interpret and translate and",
    "start": "134879",
    "end": "140920"
  },
  {
    "text": "redistribute data that comes in from exchanges we have trading systems that listen to that data get configuration",
    "start": "140920",
    "end": "148400"
  },
  {
    "text": "and other data from the users who are working with those systems and emit trading decisions that go out into the",
    "start": "148400",
    "end": "153840"
  },
  {
    "text": "markets but they first go through order gateways which get information back from the exchanges they connect to and from",
    "start": "153840",
    "end": "159920"
  },
  {
    "text": "our own internal messaging and reconcile those two views live uh and then on the",
    "start": "159920",
    "end": "165400"
  },
  {
    "text": "outside of all that we have systems that pull in that data both the data from the markets and the data from our own",
    "start": "165400",
    "end": "170599"
  },
  {
    "text": "activity and present it to users who can then interact and explore and make decisions and take actions based on that",
    "start": "170599",
    "end": "176920"
  },
  {
    "text": "data and then there's a whole technological infrastructure underneath where we need to have systems that",
    "start": "176920",
    "end": "182319"
  },
  {
    "text": "monitor and analyze and look at those systems for finding problems so that those problems can be addressed and on",
    "start": "182319",
    "end": "188040"
  },
  {
    "text": "and on and on there's just a large list of different kinds of problems you have to solve where those problems are all",
    "start": "188040",
    "end": "195200"
  },
  {
    "text": "reactive in nature they're all doing computations that are big in their",
    "start": "195200",
    "end": "200720"
  },
  {
    "text": "entirety and that change where the inputs change a small percentage of the inputs change over time and you need to",
    "start": "200720",
    "end": "206159"
  },
  {
    "text": "effectively reup your computations get a current view of that in a way that allows you to respond",
    "start": "206159",
    "end": "212040"
  },
  {
    "text": "quickly to the changing world so when you think about why this kind of programming is hard my my basic claim is",
    "start": "212040",
    "end": "218599"
  },
  {
    "text": "that it's not hard so much because it's difficult necessarily to express the thing that you're trying to do often a",
    "start": "218599",
    "end": "225400"
  },
  {
    "text": "straight forward all at once description of the computation you're trying to do is relatively easy but even in those",
    "start": "225400",
    "end": "231120"
  },
  {
    "text": "cases the the reactive version of that can be difficult because figuring out how to express your clean all at once",
    "start": "231120",
    "end": "239120"
  },
  {
    "text": "algorithm as an online algorithm well that's just known to be a hard problem right people get phds for doing work on",
    "start": "239120",
    "end": "245680"
  },
  {
    "text": "figuring out how to translate all at once algorithms into online algorithms and when you're working in a reactive",
    "start": "245680",
    "end": "251159"
  },
  {
    "text": "context you have to do that translation all the time and so figuring out good ways of",
    "start": "251159",
    "end": "256639"
  },
  {
    "text": "doing that optimization is at the heart of what I want to talk about and in some",
    "start": "256639",
    "end": "261759"
  },
  {
    "text": "sense the the ideal the goal is that you should be able to write down your algorithm write down your program as if",
    "start": "261759",
    "end": "266919"
  },
  {
    "text": "it were an all at once computation and end up with something that has the performance that's closer to that of a",
    "start": "266919",
    "end": "272080"
  },
  {
    "text": "hand tuned",
    "start": "272080",
    "end": "274758"
  },
  {
    "text": "incrementalization I'm going to show you one of those Frameworks and traditional tools of functional programming and the",
    "start": "285960",
    "end": "292600"
  },
  {
    "text": "framework I want to talk about is one called incremental and this is one I've talked about a bunch before but I still",
    "start": "292600",
    "end": "298039"
  },
  {
    "text": "want to give you guys an introduction to what incr Al is and how to think about it uh so incremental is uh a library",
    "start": "298039",
    "end": "304600"
  },
  {
    "text": "that is uh all about oops oh my slides are not going hold on",
    "start": "304600",
    "end": "311160"
  },
  {
    "text": "one second I",
    "start": "311160",
    "end": "314199"
  },
  {
    "start": "321000",
    "end": "474000"
  },
  {
    "text": "apologize all right there we go don't know why that's not working um so",
    "start": "321000",
    "end": "326319"
  },
  {
    "text": "incremental is uh a library that's based off of work by umut takar and other",
    "start": "326319",
    "end": "331759"
  },
  {
    "text": "researchers at CMU uh which is a set of it's basically a system for allowing you",
    "start": "331759",
    "end": "337039"
  },
  {
    "text": "to express your program in a way that lets it the fun underlying representation be structured as a graph",
    "start": "337039",
    "end": "344000"
  },
  {
    "text": "in fact a dynamic dependency graph that represents the structure of the computation that you're doing and the basic idea here here is",
    "start": "344000",
    "end": "352120"
  },
  {
    "text": "that uh by representing your computation as a graph you can essentially save",
    "start": "352120",
    "end": "357960"
  },
  {
    "text": "versions of the computations as a form of essentially Dynamic memorization where you run your all- at once",
    "start": "357960",
    "end": "363240"
  },
  {
    "text": "computation once and you end up laying out this graph in memory that keeps track of not just the final result of",
    "start": "363240",
    "end": "369639"
  },
  {
    "text": "the last version of the computation but a bunch of the intermediate results of the computation as well and by virtue of",
    "start": "369639",
    "end": "375919"
  },
  {
    "text": "doing that when you get new inputs when new data comes into the system you then",
    "start": "375919",
    "end": "381199"
  },
  {
    "text": "only have to refire some subset of the graph and you get to reuse the previous",
    "start": "381199",
    "end": "386280"
  },
  {
    "text": "information from the program Trace that you've written down to get the full computation done even though you don't redo the full computation each",
    "start": "386280",
    "end": "393919"
  },
  {
    "text": "time so when you think about the way in which the incremental Library itself is",
    "start": "393919",
    "end": "399720"
  },
  {
    "text": "structured there are three different components of an incremental computation",
    "start": "399720",
    "end": "404800"
  },
  {
    "text": "there are variables which essentially correspond to the inputs to the computation there you can think of it as",
    "start": "404800",
    "end": "409919"
  },
  {
    "text": "like the mutable part of the computation where you do ref you do wres you do to the essentially like references that uh",
    "start": "409919",
    "end": "417680"
  },
  {
    "text": "represent the data that you're Computing over there are incrementals which are the computational tissue you use for",
    "start": "417680",
    "end": "424800"
  },
  {
    "text": "building up a computation based on those variables and there are observers and observers are in some sense the Dual to",
    "start": "424800",
    "end": "430800"
  },
  {
    "text": "variables they're the way that you get information out of the system uh and it's important to express The Observers",
    "start": "430800",
    "end": "436160"
  },
  {
    "text": "explicitly because The Observers let you determine which part of the computation",
    "start": "436160",
    "end": "441360"
  },
  {
    "text": "is necessary so if you think there's this big dependency graph The Observers are where you're getting your output and",
    "start": "441360",
    "end": "447400"
  },
  {
    "text": "the transitive closure of the dependency graph Under The Observers tells you which parts of the computation are necessary and that's another part of the",
    "start": "447400",
    "end": "453680"
  },
  {
    "text": "optimization that something like incremental gets you which is you don't have to run parts of the computation",
    "start": "453680",
    "end": "459360"
  },
  {
    "text": "that aren't currently necessary right so those are really the two big optimizations one is you only have to refire parts of the graph and the other",
    "start": "459360",
    "end": "465680"
  },
  {
    "text": "is you only you can qus the parts of the graph that are no longer necessary even if they're still sitting around in",
    "start": "465680",
    "end": "470800"
  },
  {
    "text": "memory they don't necessarily have to be run so that's a kind of big picture description it's useful to stop for a",
    "start": "470800",
    "end": "477560"
  },
  {
    "start": "474000",
    "end": "665000"
  },
  {
    "text": "moment now and talk about what the API of in Al looks like uh and in some sense this is just a kind of boring monatic",
    "start": "477560",
    "end": "484879"
  },
  {
    "text": "interface but it's worth I wanted to throw it up on the board because I want to talk about what each of the individual operators means when you",
    "start": "484879",
    "end": "491599"
  },
  {
    "text": "think about it in terms of the graphs so map is the simplest one right map you",
    "start": "491599",
    "end": "498319"
  },
  {
    "text": "get to take an a incremental and a function from A to B a transforming function you get a B incremental",
    "start": "498319",
    "end": "504960"
  },
  {
    "text": "so we can start out with some set of variables and then map lets you add new",
    "start": "504960",
    "end": "513560"
  },
  {
    "text": "nodes you can Branch out but you can't bring things back",
    "start": "513560",
    "end": "520000"
  },
  {
    "text": "together right map lets you build out and and grow but you can't bring",
    "start": "520000",
    "end": "525720"
  },
  {
    "text": "back in So map two map two lets you take two different computations and bring",
    "start": "525720",
    "end": "532040"
  },
  {
    "text": "them together and of course once you have map two you effectively have map three and",
    "start": "532040",
    "end": "537800"
  },
  {
    "text": "map four and you can you can now build essentially arbitrary directed a cyclic",
    "start": "537800",
    "end": "545279"
  },
  {
    "text": "graphs uh based on uh these two operators alone and the direct the",
    "start": "545279",
    "end": "551560"
  },
  {
    "text": "graphs that you get using map and map 2 are static which is to say they're not",
    "start": "551560",
    "end": "556600"
  },
  {
    "text": "going to you can of course add new nodes in the course of your of running your program but in the course of the",
    "start": "556600",
    "end": "562160"
  },
  {
    "text": "execution of the incremental computation itself the structure of the graph can change and then what's the key",
    "start": "562160",
    "end": "567800"
  },
  {
    "text": "optimization the optimization is well you modify some variable and then only",
    "start": "567800",
    "end": "573560"
  },
  {
    "text": "the transitive closure of the computation needs to Fire and then actually even sometimes less than that",
    "start": "573560",
    "end": "579000"
  },
  {
    "text": "if it turns out imagine that this node is taking the maximum of these two nodes",
    "start": "579000",
    "end": "584200"
  },
  {
    "text": "this node might discover that in the end when it red do the max because this number is less than this number was",
    "start": "584200",
    "end": "589360"
  },
  {
    "text": "before and still is now maybe this node doesn't change at which point the computation can short circuit so you",
    "start": "589360",
    "end": "594959"
  },
  {
    "text": "don't have to necessarily fire the entire graph you can stop once you discover that that no changes have been",
    "start": "594959",
    "end": "600600"
  },
  {
    "text": "made to your computation okay so that's map and as is",
    "start": "600600",
    "end": "606240"
  },
  {
    "text": "often the case in these kind of apis when you add bind to the system you materially increase the expressive power",
    "start": "606240",
    "end": "613480"
  },
  {
    "text": "of the resulting computation and that's true here as well the thing that bind gives you bind gives you dynamism in the",
    "start": "613480",
    "end": "620200"
  },
  {
    "text": "graph so to see what that means let's erase this bit",
    "start": "620200",
    "end": "629560"
  },
  {
    "text": "and let's draw what a bind node looks like so in a bind node you have a left hand",
    "start": "632519",
    "end": "639000"
  },
  {
    "text": "side uh which when it's read determines what's going to be wired into the right hand side so many different things can",
    "start": "639000",
    "end": "645560"
  },
  {
    "text": "be pulled in right you can pull in one one computation then change your mind and pull in another right that's what",
    "start": "645560",
    "end": "651120"
  },
  {
    "text": "the the little extra T in the right hand side of the transformation function means it means that you can read in the",
    "start": "651120",
    "end": "656600"
  },
  {
    "text": "a from the computation you depend on and then make a Choice as to what B is going to get wired and after so that's how",
    "start": "656600",
    "end": "662600"
  },
  {
    "text": "we're going to add dynamism into the system so let's try and make a little bit more concrete what that dynamism",
    "start": "662600",
    "end": "669040"
  },
  {
    "start": "665000",
    "end": "741000"
  },
  {
    "text": "looks like but before we get to there I want to walk through a little bit more of the API because the API I've shown you so far is a Kind of Perfect and",
    "start": "669040",
    "end": "676120"
  },
  {
    "text": "perfectly useless version of the API which is to say we've talked about how to construct computations but not how to",
    "start": "676120",
    "end": "681480"
  },
  {
    "text": "get data in or how to get data out so we need that too uh so variables I",
    "start": "681480",
    "end": "687040"
  },
  {
    "text": "mentioned are the inputs to your computation uh and there are three basic functions associated with variables one",
    "start": "687040",
    "end": "693839"
  },
  {
    "text": "is you can create a variable and you need to give it an initial value to get that initial version of a variable you",
    "start": "693839",
    "end": "699000"
  },
  {
    "text": "can set it right this is straightforwardly the mutable the imperative part of the API uh and you can watch a variable and what happens",
    "start": "699000",
    "end": "706160"
  },
  {
    "text": "when you watch a variable is you get the incremental that corresponds to whatever data is in that variable so if you think",
    "start": "706160",
    "end": "712120"
  },
  {
    "text": "about the way you construct one of these programs you start by building a bunch of variables you then watch those",
    "start": "712120",
    "end": "717800"
  },
  {
    "text": "variables to get the incrementals that you then build your computation out of and then in the end to get data out we",
    "start": "717800",
    "end": "723959"
  },
  {
    "text": "need to create observers and an observer can be created from an incremental and you're allowed",
    "start": "723959",
    "end": "729720"
  },
  {
    "text": "to ask the value of an observer right that's the key extra functionality you get that you don't get with any of the",
    "start": "729720",
    "end": "735600"
  },
  {
    "text": "other pieces you're not allowed to ask what the value is of an incremental variable of an incremental node and then",
    "start": "735600",
    "end": "741440"
  },
  {
    "start": "741000",
    "end": "832000"
  },
  {
    "text": "there's one more piece which is worth understanding which is stabilize and stabilize is the thing that makes the",
    "start": "741440",
    "end": "747160"
  },
  {
    "text": "whole computation go uh it's not obvious when you first look at this API why stabilize is important you might think",
    "start": "747160",
    "end": "753760"
  },
  {
    "text": "oh you should write some things in and read some data out and just be guaranteed that things are always consistent um but we it's there are two",
    "start": "753760",
    "end": "761560"
  },
  {
    "text": "distinct reasons why it's useful to have stabilize one is that uh one is just a",
    "start": "761560",
    "end": "767560"
  },
  {
    "text": "pure optimization issue which is when you're writing a kind of stream oriented program which is pulling in data and",
    "start": "767560",
    "end": "774440"
  },
  {
    "text": "analyzing it you'll often get batches of data that you have you know by the time you go back back to your IO Loop and",
    "start": "774440",
    "end": "780079"
  },
  {
    "text": "you're able to get a CH a chunk of data you don't just have one update you may have a collection of updates so from a",
    "start": "780079",
    "end": "785120"
  },
  {
    "text": "performance point of view it's often better to First do all of the rights get all of that data into the system and",
    "start": "785120",
    "end": "790880"
  },
  {
    "text": "then propagate through the graph just once uh so that you don't have to redo parts of the computation that are going",
    "start": "790880",
    "end": "796639"
  },
  {
    "text": "to be changed by both updates and the other reason that's useful is a semantic reason which is it",
    "start": "796639",
    "end": "803160"
  },
  {
    "text": "gives you a kind of natural transactional boundary so if you have different sources of information that",
    "start": "803160",
    "end": "809519"
  },
  {
    "text": "are related to each other and that would normally come in in a consistent way you",
    "start": "809519",
    "end": "814639"
  },
  {
    "text": "can make sure to update all of the corresponding variables and then call stabilize once and it'll propagate",
    "start": "814639",
    "end": "819760"
  },
  {
    "text": "through the whole system and you'll never hit uncanny computations that shouldn't happen because you violated",
    "start": "819760",
    "end": "824959"
  },
  {
    "text": "some invariance on the inside of the on the on the way that the variables were set",
    "start": "824959",
    "end": "831279"
  },
  {
    "text": "up okay so that's the core of the API uh and in order to understand this a little",
    "start": "831279",
    "end": "836920"
  },
  {
    "text": "better it's worth looking at some small examples so this is a very simple example but I think it gives you a flavor in particular of the difference",
    "start": "836920",
    "end": "843440"
  },
  {
    "text": "between the power of bind and the power of map in this context uh so what I'm going to show you is two different",
    "start": "843440",
    "end": "848720"
  },
  {
    "text": "implementations of an if statement uh and I'm using uh I know this is oaml",
    "start": "848720",
    "end": "854399"
  },
  {
    "text": "which is not maybe the syntax that everyone is most comfortable with so let me take a moment to point out what's",
    "start": "854399",
    "end": "859639"
  },
  {
    "text": "going on here so we're defining this function map if and it has three arguments C is an incremental that",
    "start": "859639",
    "end": "866240"
  },
  {
    "text": "represents the condition that we're looking at T for the the then branch and E for the else branch and then we have this somewhat",
    "start": "866240",
    "end": "873519"
  },
  {
    "text": "funny syntax let percent map c equal C and tals T and eals E so this is a this",
    "start": "873519",
    "end": "881639"
  },
  {
    "text": "is using a uh kind of monatic applicative syntax so that's essentially",
    "start": "881639",
    "end": "888000"
  },
  {
    "text": "gets translated into a map three right so if we look at how that",
    "start": "888000",
    "end": "893360"
  },
  {
    "text": "works and then in sorry to say clearly in the body of the map 3 all we do is there's an if statement which we then execute a totally or orary if statement",
    "start": "893360",
    "end": "899720"
  },
  {
    "text": "in the language and if you want to think about what's happening in this node in what we've done is we've created a",
    "start": "899720",
    "end": "907040"
  },
  {
    "text": "single node with three inputs c t and",
    "start": "907040",
    "end": "916120"
  },
  {
    "text": "E so one question to ask about this is what is the firing structure what does",
    "start": "916880",
    "end": "922440"
  },
  {
    "text": "the dependency what does the recomputation rules look like and it's straightforward when any of the",
    "start": "922440",
    "end": "928040"
  },
  {
    "text": "dependencies of the node change you have to redo the computation if the condition changes or the then Branch or the else",
    "start": "928040",
    "end": "933319"
  },
  {
    "text": "Branch you're going to redo that node here is a deceptively similar",
    "start": "933319",
    "end": "940600"
  },
  {
    "start": "937000",
    "end": "1061000"
  },
  {
    "text": "looking implementation of if that uses bind uh and so that it's it's",
    "start": "940600",
    "end": "946160"
  },
  {
    "text": "deceptively similar one has to look specifically at the meanings of the identifiers here so here we bind just on",
    "start": "946160",
    "end": "951720"
  },
  {
    "text": "C the condition node so in the in the in the bottom expression C is an ordinary",
    "start": "951720",
    "end": "957399"
  },
  {
    "text": "value just a value of type bu but T and E are incremental still right",
    "start": "957399",
    "end": "962480"
  },
  {
    "text": "so in this computation we look at the condition and then we choose which",
    "start": "962480",
    "end": "967839"
  },
  {
    "text": "incremental we're going to depend on so here the B note is really in one of two states",
    "start": "967839",
    "end": "973399"
  },
  {
    "text": "either if the condition is currently evaluated to true then the then branch is wired in and if it flips to false we",
    "start": "973399",
    "end": "980519"
  },
  {
    "text": "cut that edge and we add this Edge and now the else branch is wired in so importantly the firing structure and the",
    "start": "980519",
    "end": "987000"
  },
  {
    "text": "dependency structure are both different here in particular if the condition is true",
    "start": "987000",
    "end": "992440"
  },
  {
    "text": "and then the then branch is wired in and things change in the else Branch this particular node doesn't have to",
    "start": "992440",
    "end": "998880"
  },
  {
    "text": "refire also this affects which parts of the graph are necessary if the uh if there's some big",
    "start": "998880",
    "end": "1005639"
  },
  {
    "text": "computation hanging underneath that then node and hanging underneath the else node only one of those is going to be",
    "start": "1005639",
    "end": "1011839"
  },
  {
    "text": "lit up at a time or at least on be on behalf of this particular node something else might depend on it and cause it to",
    "start": "1011839",
    "end": "1017839"
  },
  {
    "text": "have to be computed but this particular uh if statement is only going to cause one of those two to be",
    "start": "1017839",
    "end": "1024240"
  },
  {
    "text": "around to be alive and therefore necessary and therefore computed so one",
    "start": "1024240",
    "end": "1029640"
  },
  {
    "text": "interesting question you have is why do you ever want to use the bind the map node the bind node just kind of sounds better uh but the thing to keep in mind",
    "start": "1029640",
    "end": "1036798"
  },
  {
    "text": "is that the switching itself can be expensive so if you have uh a condition",
    "start": "1036799",
    "end": "1043079"
  },
  {
    "text": "that changes rarely compared to how often the branches change then a B node",
    "start": "1043079",
    "end": "1049280"
  },
  {
    "text": "is very likely the right thing if the condition changes a lot it might be cheaper to have a map node because",
    "start": "1049280",
    "end": "1054840"
  },
  {
    "text": "you'll have less churn in the structure of the graph and that's one of the expensive things that can",
    "start": "1054840",
    "end": "1060840"
  },
  {
    "text": "happen Okay so that's one form of dynamism that we can have uh from bind",
    "start": "1060840",
    "end": "1066520"
  },
  {
    "start": "1061000",
    "end": "1221000"
  },
  {
    "text": "but we can do more than that here all we did was change dynamically the dependencies here's an example where we",
    "start": "1066520",
    "end": "1073360"
  },
  {
    "text": "actually change the structure of the graph itself as we go we're going to allocate new nodes so here imagine that",
    "start": "1073360",
    "end": "1080360"
  },
  {
    "text": "we have already in our disposal a sum function which takes a list of float",
    "start": "1080360",
    "end": "1086400"
  },
  {
    "text": "incrementals and consume and produces a single float incremental containing which is the sum of all the included",
    "start": "1086400",
    "end": "1092559"
  },
  {
    "text": "nodes and now imagine that what we want to build is a dynamically changing sum a",
    "start": "1092559",
    "end": "1099559"
  },
  {
    "text": "sum that might sum in some circumstances over one set of inputs and then when",
    "start": "1099559",
    "end": "1105200"
  },
  {
    "text": "things change can sum over another one essentially a reconfigurable sum so this is a simple implementation of",
    "start": "1105200",
    "end": "1111679"
  },
  {
    "text": "that so here this Dynamic sum has two different inputs it has a map containing",
    "start": "1111679",
    "end": "1118679"
  },
  {
    "text": "all of the a bunch of different Float incrementals indexed by some identifier type ID and then it has a list of IDs",
    "start": "1118679",
    "end": "1125559"
  },
  {
    "text": "and the list of IDs is itself incremental so now we can do a bind we",
    "start": "1125559",
    "end": "1131039"
  },
  {
    "text": "can do Le percent bind on the list of IDs and then whenever that set of IDs",
    "start": "1131039",
    "end": "1137559"
  },
  {
    "text": "changes we're going going to extract that's what the list up map is doing we're going to extract the set of",
    "start": "1137559",
    "end": "1142640"
  },
  {
    "text": "identifier the set of incrementals corresponding to those identifiers and then call sum on it so if you think about what's",
    "start": "1142640",
    "end": "1149520"
  },
  {
    "text": "happening here we're essentially just reconstructing the sum computation",
    "start": "1149520",
    "end": "1155120"
  },
  {
    "text": "whenever the set of IDs changes so there's an interesting trade-off here between dynamism and incrementality when",
    "start": "1155120",
    "end": "1161600"
  },
  {
    "text": "the set of IDs doesn't change the computation itself is incremental changes to the input sets just do a very",
    "start": "1161600",
    "end": "1168080"
  },
  {
    "text": "small amount of comp computation to update the sum but when you want to change the set of identifiers then you",
    "start": "1168080",
    "end": "1174240"
  },
  {
    "text": "kind of throw away the entire old computation and generate a new one in place so there's some trade-off we to",
    "start": "1174240",
    "end": "1180080"
  },
  {
    "text": "get the dynamism we have to do some amount of extra computation uh and this is actually one of things you have to be",
    "start": "1180080",
    "end": "1185120"
  },
  {
    "text": "careful about in general when writing incremental programs is making sure that you think hard about where you use bind",
    "start": "1185120",
    "end": "1190320"
  },
  {
    "text": "and that you're not doing too much extra work uh as a result it's all too easy to write an incremental program it's easy",
    "start": "1190320",
    "end": "1196520"
  },
  {
    "text": "to understand what it's doing and it looks like it very carefully reifies the dependency structure of your whole of",
    "start": "1196520",
    "end": "1202520"
  },
  {
    "text": "your whole computation but you've put a a bind in the wrong place so what you're really doing is all at once reallocating",
    "start": "1202520",
    "end": "1208919"
  },
  {
    "text": "the entire graph and taking no advantage of the history at all and it's not incremental and it's way slower than the",
    "start": "1208919",
    "end": "1214080"
  },
  {
    "text": "program you started with so it's a a thing you have to be careful as you operate in this",
    "start": "1214080",
    "end": "1220120"
  },
  {
    "text": "domain okay so how does this work right that's gives you some sense of how the overall system uh works this is a system",
    "start": "1220960",
    "end": "1227799"
  },
  {
    "start": "1221000",
    "end": "1657000"
  },
  {
    "text": "we've had for a long time it's 10 12 years old or something we've been we've run through you know a bunch of",
    "start": "1227799",
    "end": "1234480"
  },
  {
    "text": "different implementations of the system refining it over time we've used it in many different systems how does it work",
    "start": "1234480",
    "end": "1239600"
  },
  {
    "text": "well so first of all it works best when the world of inputs that you're",
    "start": "1239600",
    "end": "1245400"
  },
  {
    "text": "operating on is shattered it's broken out into many individual little components that's kind of the base use",
    "start": "1245400",
    "end": "1251919"
  },
  {
    "text": "case with which we started using incremental and it's the one for which it's best designed so a nice examp",
    "start": "1251919",
    "end": "1258600"
  },
  {
    "text": "example application that has the structure is Market data right there are thousands of different Securities in the",
    "start": "1258600",
    "end": "1264679"
  },
  {
    "text": "world each security has a bunch of different individual little properties uh that you want you might want to",
    "start": "1264679",
    "end": "1270000"
  },
  {
    "text": "subscribe to and each one of those makes sense as a separate incremental input and then you can take this world of",
    "start": "1270000",
    "end": "1276480"
  },
  {
    "text": "broken out inputs and compose out of it a big computation graph which builds the",
    "start": "1276480",
    "end": "1281760"
  },
  {
    "text": "thing that you want incremental works very well for this kind of computation and it's not surprising because if you",
    "start": "1281760",
    "end": "1286880"
  },
  {
    "text": "think about it this incremental model sounds a lot like a model that you guys have probably encountered already which",
    "start": "1286880",
    "end": "1292200"
  },
  {
    "text": "is the model of a spreadsheet right what is a spreadsheet other than a big directed a cyclic graph",
    "start": "1292200",
    "end": "1298799"
  },
  {
    "text": "each node is a little functional expression that tells you what other nodes it depends on and then Excel very",
    "start": "1298799",
    "end": "1305440"
  },
  {
    "text": "politely when you make changes is going to just try and refire the minimum part of the graph that needs to be",
    "start": "1305440",
    "end": "1311240"
  },
  {
    "text": "reconstructed so right Excel really is an example of an incrementalization framework um it's actually in many ways",
    "start": "1311240",
    "end": "1317039"
  },
  {
    "text": "a pretty good one it has a lot of things going for it for all that people like to make fun of spreadsheets um uh and and",
    "start": "1317039",
    "end": "1323600"
  },
  {
    "text": "it is exactly designed for this kind of world where you have these broken out",
    "start": "1323600",
    "end": "1328760"
  },
  {
    "text": "inputs in fact the way you build a dynamic uh a a dynamic view inside of a",
    "start": "1328760",
    "end": "1334720"
  },
  {
    "text": "spreadsheet is there are in addition to having equations that you can put in a spreadsheet that say you know I want this cell to be that cell times the",
    "start": "1334720",
    "end": "1340880"
  },
  {
    "text": "other cell you can also subscribe to streams of data those are typically small little inputs you have big sheets",
    "start": "1340880",
    "end": "1347200"
  },
  {
    "text": "where you've subscribed to all the different data sources and they're live and Ticking and then you build computations off of those incremental",
    "start": "1347200",
    "end": "1353760"
  },
  {
    "text": "works as a kind of in language model that's like that and more General than",
    "start": "1353760",
    "end": "1358799"
  },
  {
    "text": "that I think the big Advantage you get in something like incremental in addition to being in a in a ordinary",
    "start": "1358799",
    "end": "1364159"
  },
  {
    "text": "programming language which has a bunch of advantages is you get the power of bind you get this extra dynamism which is not quite so natural to do in the",
    "start": "1364159",
    "end": "1371600"
  },
  {
    "text": "context of a spreadsheet so that part works well and bind as I said is this very useful form",
    "start": "1371600",
    "end": "1377840"
  },
  {
    "text": "of dynamism but it's limited in some important ways in particular one thing that uh we saw",
    "start": "1377840",
    "end": "1384400"
  },
  {
    "text": "in the little example that we did is there's a kind of trade-off between the dynamism and the um the incrementality",
    "start": "1384400",
    "end": "1392240"
  },
  {
    "text": "of the resulting computation and there are ways of doing of of using bind and",
    "start": "1392240",
    "end": "1398360"
  },
  {
    "text": "getting all of that incrementality at the same time where you have essentially complex data structures that have bind",
    "start": "1398360",
    "end": "1404559"
  },
  {
    "text": "threaded all the way you have essentially Dynamic incremental nodes constructed with the bind threaded all the the whole way through so you can",
    "start": "1404559",
    "end": "1410480"
  },
  {
    "text": "have little places inside of this more complex structure where you do the reiring of just the parts that you want",
    "start": "1410480",
    "end": "1416640"
  },
  {
    "text": "to refire and that does make sense and that does work but it's a more complicated design process and one of",
    "start": "1416640",
    "end": "1424000"
  },
  {
    "text": "the things that doesn't work incredibly well is it's hard to take this model and integrate it with ordinary functional",
    "start": "1424000",
    "end": "1429279"
  },
  {
    "text": "programming data structures the lists and maps and sets and so on and so forth that you have as a a common place in",
    "start": "1429279",
    "end": "1435919"
  },
  {
    "text": "your functional programs it's not clear how to fit that that into this kind of framework and let's make that a little",
    "start": "1435919",
    "end": "1442840"
  },
  {
    "text": "more explicit uh by thinking about a problem that we might want to solve incrementally which is to map over an",
    "start": "1442840",
    "end": "1450360"
  },
  {
    "text": "incremental map so make that more explicit in a type sense what I mean so",
    "start": "1450360",
    "end": "1456240"
  },
  {
    "text": "here is the type signature of the function I want to be able to write it's a map function that takes as an input a",
    "start": "1456240",
    "end": "1461919"
  },
  {
    "text": "map which is itself inside of an incremental uh so here just to be clear",
    "start": "1461919",
    "end": "1467279"
  },
  {
    "text": "there's three type param to the maps that we use one is for the key one is for the value and one is for is a Type",
    "start": "1467279",
    "end": "1474279"
  },
  {
    "text": "window is for the comparison function that's being used so that's not like especially important for the talk but just so you if you're wondering where",
    "start": "1474279",
    "end": "1479919"
  },
  {
    "text": "that third type variable is going that's what it's for um so we have an input map",
    "start": "1479919",
    "end": "1486440"
  },
  {
    "text": "uh and which is incremental and then we have a function from uh the value in",
    "start": "1486440",
    "end": "1491600"
  },
  {
    "text": "that input map and from V1 to V2 and we want to generate an output map uh that",
    "start": "1491600",
    "end": "1497640"
  },
  {
    "text": "uh which has the new kind of data and it's gotten by applying the function f so it's kind of not obvious what to do",
    "start": "1497640",
    "end": "1505559"
  },
  {
    "text": "about this if you want to implement this inside of incremental right",
    "start": "1505559",
    "end": "1510720"
  },
  {
    "text": "so we know what the edges of the computation need to look like there's some map on the inside and there's some",
    "start": "1510720",
    "end": "1516440"
  },
  {
    "text": "map on the outside and then in between like it's not clear exactly what Miracle to pull",
    "start": "1516440",
    "end": "1523000"
  },
  {
    "text": "what graph you're going to put in the middle to actually make things better because the part of the problem here is",
    "start": "1523000",
    "end": "1529440"
  },
  {
    "text": "that the the map that you have inside of this is a single object and when it",
    "start": "1529440",
    "end": "1535720"
  },
  {
    "text": "changes right the basic model of incremental is something changes and then you fire the dependencies in the",
    "start": "1535720",
    "end": "1542000"
  },
  {
    "text": "graph and so it's not clear how we can not do the right amount of work here and",
    "start": "1542000",
    "end": "1547679"
  },
  {
    "text": "what graph we need to put in the middle so it turns out the answer to this comes from stepping away from the graph",
    "start": "1547679",
    "end": "1554000"
  },
  {
    "text": "question for a second and to think about a capability that we generally have more or less for free with persistent",
    "start": "1554000",
    "end": "1561480"
  },
  {
    "text": "data structures in functional language and that is the ability to efficiently diff functional data",
    "start": "1561480",
    "end": "1567600"
  },
  {
    "text": "structures so I think that this is not thing that everyone has really thought about in detail but functional uh",
    "start": "1567600",
    "end": "1574000"
  },
  {
    "text": "functional ways of building and modifying data structures are by their nature very natural uh fit in well with",
    "start": "1574000",
    "end": "1581679"
  },
  {
    "text": "having efficient algorithms for diffing those data structures why well if there's a big data structure and we have",
    "start": "1581679",
    "end": "1588480"
  },
  {
    "text": "an efficient way of updating it what does that mean it means we have a way of updating it that doesn't touch most of",
    "start": "1588480",
    "end": "1593799"
  },
  {
    "text": "the structure of the data right it means that if I take a map and I modify it",
    "start": "1593799",
    "end": "1599919"
  },
  {
    "text": "well I'm going to reallocate the spine of that data structure but I'm not going to reallocate most of it because if I",
    "start": "1599919",
    "end": "1606440"
  },
  {
    "text": "did it would be of O of n right it can't be fast and reallocate everything and",
    "start": "1606440",
    "end": "1611559"
  },
  {
    "text": "that means map one and map two right if map two was derived from map one in an",
    "start": "1611559",
    "end": "1617159"
  },
  {
    "text": "efficient way they they have to share most of their physical structure right they have to have the same pointers for",
    "start": "1617159",
    "end": "1624360"
  },
  {
    "text": "most of the data and that means you can write an efficient diffing program that",
    "start": "1624360",
    "end": "1629640"
  },
  {
    "text": "walks over the map and when it sees two things it needs to compare it can check them for physical equality for pointer",
    "start": "1629640",
    "end": "1634840"
  },
  {
    "text": "equality and if they're the same pointer it can short circuit right can stop moving forward at that point and this",
    "start": "1634840",
    "end": "1641960"
  },
  {
    "text": "trans out to be a powerful optimization what it means is you can if you have functional data structures you can read",
    "start": "1641960",
    "end": "1648480"
  },
  {
    "text": "off a diff a set of changes that allow you to go from one to the other in roughly the same amount of time it would",
    "start": "1648480",
    "end": "1654320"
  },
  {
    "text": "have taken you to make those changes so here's a signature of a function uh that was already inside of",
    "start": "1654320",
    "end": "1661760"
  },
  {
    "text": "our standard Library kind of before we started thinking about these problems for doing this here you give it two maps",
    "start": "1661760",
    "end": "1668000"
  },
  {
    "text": "and uh a function for comparing the whether the the data in the map is equal",
    "start": "1668000",
    "end": "1673600"
  },
  {
    "text": "and it returns to you a sequence which is a lazy stream of values uh of the",
    "start": "1673600",
    "end": "1679159"
  },
  {
    "text": "keys where there has been a change and what the nature of that change was so here left means something was on the",
    "start": "1679159",
    "end": "1685120"
  },
  {
    "text": "left and not on the right right means it was on the right and not on the left and unequal says it showed up in both Maps",
    "start": "1685120",
    "end": "1690519"
  },
  {
    "text": "but the data did not register as equal and this trick as I said turns out",
    "start": "1690519",
    "end": "1696200"
  },
  {
    "text": "to be very natural and very easy to implement inside of functional language",
    "start": "1696200",
    "end": "1702080"
  },
  {
    "text": "it's something youve in some sense by the virtue of programming in a functional style you've already worked",
    "start": "1702080",
    "end": "1707480"
  },
  {
    "text": "out the pr requisites for this kind of technique to work and this is the trick that we're",
    "start": "1707480",
    "end": "1713440"
  },
  {
    "text": "going to use for building better and faster incremental programs and for",
    "start": "1713440",
    "end": "1719240"
  },
  {
    "text": "merging together the incremental and the functional world so to do this we're",
    "start": "1719240",
    "end": "1724600"
  },
  {
    "text": "going to need an alternative version of the incor map right so this the incremental map function so we're going",
    "start": "1724600",
    "end": "1730519"
  },
  {
    "text": "to need one that is sensitive to history so this is the signature of the thing that we're going to want so it's a",
    "start": "1730519",
    "end": "1736039"
  },
  {
    "text": "function that takes an incremental of Some Type A and then the map function",
    "start": "1736039",
    "end": "1741159"
  },
  {
    "text": "has a somewhat more complicated signature uh so embedded in there it does take an A and produces a b but it",
    "start": "1741159",
    "end": "1747880"
  },
  {
    "text": "also takes an extra argument that's an option so it might be there and it might not be there and that option contains",
    "start": "1747880",
    "end": "1754640"
  },
  {
    "text": "the previous version of the computation both the input and the output so the idea is that function",
    "start": "1754640",
    "end": "1760640"
  },
  {
    "text": "needs to be written in a way the function you're going to pass into diff map to be able to take advantage of the",
    "start": "1760640",
    "end": "1766519"
  },
  {
    "text": "old version to optimize the computation of the new be so when you use diff map",
    "start": "1766519",
    "end": "1772240"
  },
  {
    "text": "when it when you when you write when you write the function you pass into diff map that function if it gets none if it",
    "start": "1772240",
    "end": "1777440"
  },
  {
    "text": "doesn't get a previous version it just needs to do the from scratch computation but when it gets the previous version",
    "start": "1777440",
    "end": "1782640"
  },
  {
    "text": "it's allowed to inspect it to look for ways of optimizing its computation of the fresh version it wants to produce",
    "start": "1782640",
    "end": "1787919"
  },
  {
    "text": "and then the output value is just that the B incremental that you would expect and this function itself is",
    "start": "1787919",
    "end": "1794480"
  },
  {
    "text": "actually super easy to write here's the implementation so we just use a little",
    "start": "1794480",
    "end": "1799559"
  },
  {
    "text": "benign effect we store a reference initialized to none which has the previous version of the computation and",
    "start": "1799559",
    "end": "1805919"
  },
  {
    "text": "then we do an incre an ordinary incremental map but in the body of the incremental map we actually sneak a peek at this reference and see if there's an",
    "start": "1805919",
    "end": "1812240"
  },
  {
    "text": "old version of the computation there we feed it to the function f and then whatever result F emits we store it back",
    "start": "1812240",
    "end": "1818240"
  },
  {
    "text": "in the reference so we get to use it next time we go through so with those tools in",
    "start": "1818240",
    "end": "1826200"
  },
  {
    "start": "1823000",
    "end": "1911000"
  },
  {
    "text": "hand we can now implement the thing I was talking about before mapping over incremental map so I'm going to do",
    "start": "1826200",
    "end": "1831360"
  },
  {
    "text": "something terrible now which is I'm going to show an uncomfortable amount of code on the board so you don't have to",
    "start": "1831360",
    "end": "1838000"
  },
  {
    "text": "understand it all but I just want to talk through the pieces so you can kind of see roughly what it's doing it's not",
    "start": "1838000",
    "end": "1843360"
  },
  {
    "text": "in the end that complicated so the implementation of map here is we start with diff map so we diff map the one we",
    "start": "1843360",
    "end": "1849159"
  },
  {
    "text": "just wrote over M and we have this function that gives us the old value and the map that we currently want to",
    "start": "1849159",
    "end": "1856200"
  },
  {
    "text": "transform we look at the old value if it's not there if it's none then we just use the the ordinary map. map the map",
    "start": "1856200",
    "end": "1863360"
  },
  {
    "text": "from the map data structure to do the all at once version of the computation and if it is there well I'm",
    "start": "1863360",
    "end": "1869880"
  },
  {
    "text": "going to compute the diff between the old input map and the current input map and then I'm going to fold over that",
    "start": "1869880",
    "end": "1876080"
  },
  {
    "text": "diff and transport that over apply that to the old output to generate the new",
    "start": "1876080",
    "end": "1881960"
  },
  {
    "text": "old output so and here I just look at all the changes I say if there's something that was deleted on the left hand side I'm going to delete it on the",
    "start": "1881960",
    "end": "1887639"
  },
  {
    "text": "right hand hand side if there's something that changed I'm going to set the map and add in the new",
    "start": "1887639",
    "end": "1893559"
  },
  {
    "text": "value so what we're seeing here in more prosaic terms is diff and Patch right",
    "start": "1893559",
    "end": "1899240"
  },
  {
    "text": "Unix utility is here to help you right we look at the old version We compute the diff and then we apply the patch",
    "start": "1899240",
    "end": "1905159"
  },
  {
    "text": "that we get out to the old output to generate the new",
    "start": "1905159",
    "end": "1910559"
  },
  {
    "text": "output okay so that's the basic idea there so that was the easy case right",
    "start": "1910559",
    "end": "1918440"
  },
  {
    "start": "1911000",
    "end": "2174000"
  },
  {
    "text": "when we first came to think about this problem uh and and when I think about",
    "start": "1918440",
    "end": "1923799"
  },
  {
    "text": "this problem think about how to extend incremental which we've been using for many years and extended to new kinds of",
    "start": "1923799",
    "end": "1929200"
  },
  {
    "text": "problems that we had to solve uh we got kind of up to the slide before and we thought oh okay this is going to be",
    "start": "1929200",
    "end": "1935080"
  },
  {
    "text": "fairly straightforward um and we realized at some point that there are",
    "start": "1935080",
    "end": "1940559"
  },
  {
    "text": "some things that we wanted to do that did not fit naturally into this diff",
    "start": "1940559",
    "end": "1945760"
  },
  {
    "text": "oriented style as something more complicated need to needed to be explained and that's when we started thinking about how to write this",
    "start": "1945760",
    "end": "1952679"
  },
  {
    "text": "function with the highly memorable name map Prime so if you look here it looks a",
    "start": "1952679",
    "end": "1959279"
  },
  {
    "text": "lot like map but there's a few extra incrementals floating around in",
    "start": "1959279",
    "end": "1964960"
  },
  {
    "text": "particular now the function that we're using for transforming the data of the map is itself",
    "start": "1964960",
    "end": "1972279"
  },
  {
    "text": "incremental right so that actually changes radically what you need to do",
    "start": "1972279",
    "end": "1977559"
  },
  {
    "text": "because if you think about what we did before in the previous example where we did diff map the graph structure was",
    "start": "1977559",
    "end": "1984880"
  },
  {
    "text": "simple right we had an input we had an output and there was a single Arrow between the incremental framework didn't",
    "start": "1984880",
    "end": "1990399"
  },
  {
    "text": "really know anything about the comp the complicated thing happening inside of that Arrow we had used some side effects",
    "start": "1990399",
    "end": "1997080"
  },
  {
    "text": "to stash this extra optimization inside of the computation and incremental is in some sense none the wiser but you can't",
    "start": "1997080",
    "end": "2004320"
  },
  {
    "text": "solve this problem that way because you need need to essentially mint a different incremental computation for",
    "start": "2004320",
    "end": "2011840"
  },
  {
    "text": "each different element in the map and you need that incremental computation to be persistent because you want the",
    "start": "2011840",
    "end": "2019000"
  },
  {
    "text": "optimization that that implies you want when you have to refresh the data you want to be able to use the old version of the computation so we need to do",
    "start": "2019000",
    "end": "2025799"
  },
  {
    "text": "something that's going to change the behavior of the system at the graph level and in particular if you think",
    "start": "2025799",
    "end": "2031200"
  },
  {
    "text": "about what the graph needs to look like it's quite a bit more complicated it needs to look something like this you",
    "start": "2031200",
    "end": "2037919"
  },
  {
    "text": "need a bunch of different incremental computations of some",
    "start": "2037919",
    "end": "2044000"
  },
  {
    "text": "shape one for each key value",
    "start": "2044480",
    "end": "2049039"
  },
  {
    "text": "pair and then you need a fan out and a fan in",
    "start": "2050000",
    "end": "2054919"
  },
  {
    "text": "operation and in order to make the performance of this really what you want it to be you have to think about really",
    "start": "2060879",
    "end": "2067320"
  },
  {
    "text": "what has to to happen at every stage so if the map on the input changes and some",
    "start": "2067320",
    "end": "2074040"
  },
  {
    "text": "key that was already there the value associated with the changes you need to fire that data just through this",
    "start": "2074040",
    "end": "2080200"
  },
  {
    "text": "subgraph just have this one computation be affected and then when it comes out you need this to translate in the end to",
    "start": "2080200",
    "end": "2086440"
  },
  {
    "text": "just one insertion into the final map so changes need to be incremental at the",
    "start": "2086440",
    "end": "2092040"
  },
  {
    "text": "level of the existing incremental computations that are there and then",
    "start": "2092040",
    "end": "2097760"
  },
  {
    "text": "when the map changes to add a new key well then you need to be able to add in a new",
    "start": "2097760",
    "end": "2104760"
  },
  {
    "text": "computation and when you remove something from the map well you need to delete you need to remove your your",
    "start": "2104920",
    "end": "2110040"
  },
  {
    "text": "connections to a computation so there's much more dynamism that's required in this version in order to get the",
    "start": "2110040",
    "end": "2115839"
  },
  {
    "text": "performance that we need um so and and in fact this dynamism is something that was not",
    "start": "2115839",
    "end": "2123280"
  },
  {
    "text": "expressable in the original version of incremental at all one of the invariants of the incremental of the initial",
    "start": "2123280",
    "end": "2128560"
  },
  {
    "text": "incremental implementation uh is that it had the property that if a given node",
    "start": "2128560",
    "end": "2133960"
  },
  {
    "text": "changed then either you detected the change wasn't real you could cut off if",
    "start": "2133960",
    "end": "2139240"
  },
  {
    "text": "you decided that the new value and the old value were equal and if they weren't equal every descendant of that node had",
    "start": "2139240",
    "end": "2147240"
  },
  {
    "text": "to refire and if you have that constraint you can't do this right you",
    "start": "2147240",
    "end": "2152680"
  },
  {
    "text": "you can build a graph that has the shape but doesn't have the performance characteristics you wanted so one of the things we needed to do to make this",
    "start": "2152680",
    "end": "2158359"
  },
  {
    "text": "possible was to change some of the fundamental apis inside of incremental to expose the ability to do more precise",
    "start": "2158359",
    "end": "2165280"
  },
  {
    "text": "management of the dependency graph and more precise management of which parts get fired when things",
    "start": "2165280",
    "end": "2172599"
  },
  {
    "text": "change so the underlying apis that we had to add to incremental are not the prettiest",
    "start": "2173960",
    "end": "2180720"
  },
  {
    "start": "2174000",
    "end": "2415000"
  },
  {
    "text": "things in the world there you know you can sort of tell when it's a complicated part of your API when you have very very",
    "start": "2180720",
    "end": "2186720"
  },
  {
    "text": "long comments explaining what are the invariants you need to follow in order to do it um but the so you requ it",
    "start": "2186720",
    "end": "2194440"
  },
  {
    "text": "requires a fair amount of expert understanding in order to use these more detailed apis but what's nice about them",
    "start": "2194440",
    "end": "2199880"
  },
  {
    "text": "is you can build Primitives that allow you to do considerably more than you can",
    "start": "2199880",
    "end": "2206880"
  },
  {
    "text": "do uh in the absence of those Primitives uh and those primitiv themselves are",
    "start": "2206880",
    "end": "2212359"
  },
  {
    "text": "easy to use so there's some custom work for a given data structure that's required to build something that's easy",
    "start": "2212359",
    "end": "2218839"
  },
  {
    "text": "for you to uh then use but it's then easy right it then it then works and",
    "start": "2218839",
    "end": "2223920"
  },
  {
    "text": "feels like an ordinary kind of functional program from there on forward so let's I want to show you a couple of",
    "start": "2223920",
    "end": "2229839"
  },
  {
    "text": "these Primitives that uh help you uh build more complicated",
    "start": "2229839",
    "end": "2235480"
  },
  {
    "text": "computations the first one is called split and what split does is it",
    "start": "2235480",
    "end": "2241160"
  },
  {
    "text": "essentially takes the incre an incremental map and pushes the incrementality down into the lead leaves",
    "start": "2241160",
    "end": "2247760"
  },
  {
    "text": "of the map so we start with a map incremental with ordinary data and we",
    "start": "2247760",
    "end": "2253240"
  },
  {
    "text": "end up with a map incremental with incremental data and again if we think about what's",
    "start": "2253240",
    "end": "2259000"
  },
  {
    "text": "going on here we need the same property of uh routing the changes to the correct",
    "start": "2259000",
    "end": "2265000"
  },
  {
    "text": "part of the graph which is to say if in the incoming map you have a change to",
    "start": "2265000",
    "end": "2271319"
  },
  {
    "text": "the data associated with a given key well that shouldn't change the outer incremental that should only change the",
    "start": "2271319",
    "end": "2277520"
  },
  {
    "text": "inner incremental that should route and update directly to the inner incremental on the other hand when you actually add",
    "start": "2277520",
    "end": "2283240"
  },
  {
    "text": "or remove a binding from the overall map that's going to modify the outer incremental so the inner incremental",
    "start": "2283240",
    "end": "2289760"
  },
  {
    "text": "lets you route data through the existing dependency graph and the outer incremental lets you add and remove",
    "start": "2289760",
    "end": "2295880"
  },
  {
    "text": "edges from the graph okay so once we have that operation it's a relatively",
    "start": "2295880",
    "end": "2302240"
  },
  {
    "text": "straightforward guess what the next operation is the next operation is called join and join just does the",
    "start": "2302240",
    "end": "2307960"
  },
  {
    "text": "reverse and again you have to be careful in the design of joint to make sure that you get the incrementality right which",
    "start": "2307960",
    "end": "2313440"
  },
  {
    "text": "is now the point is when something fires through uh either one of these kinds of changes either there's a change in the",
    "start": "2313440",
    "end": "2319960"
  },
  {
    "text": "inner structure uh which has to correspond to a a corresponding change",
    "start": "2319960",
    "end": "2325000"
  },
  {
    "text": "to the map or there's a change to the outer structure which you now have to read off again and how do we read off",
    "start": "2325000",
    "end": "2330680"
  },
  {
    "text": "that change using symmetric diff so symmetric diff is still going to play a role in this symmetric diff is the way",
    "start": "2330680",
    "end": "2336359"
  },
  {
    "text": "that we get an efficient understanding of the changes to the map sorry I meant sorry map diff and yeah symmetric diff",
    "start": "2336359",
    "end": "2342760"
  },
  {
    "text": "and map diff together uh and then just these the this more precise verification",
    "start": "2342760",
    "end": "2348119"
  },
  {
    "text": "of the dependency structure is how we're going to flow data through the system when we don't have to change the",
    "start": "2348119",
    "end": "2354079"
  },
  {
    "text": "structure of the map and then pleasantly when you have all of that map Prime is really easy to",
    "start": "2354079",
    "end": "2360520"
  },
  {
    "text": "write right all you do is you split it you map over it and you join uh and",
    "start": "2360520",
    "end": "2365800"
  },
  {
    "text": "importantly that map isn't the regular map over Maps it's by the way hard to",
    "start": "2365800",
    "end": "2371000"
  },
  {
    "text": "give this talk in a using a programming language where maps and maps are the same word it's not I do I do apologize",
    "start": "2371000",
    "end": "2378200"
  },
  {
    "text": "about that um but so so here it's it's just a the it's almost trivial to write",
    "start": "2378200",
    "end": "2384960"
  },
  {
    "text": "down and you can see join and split are the pieces that are doing this Fanning",
    "start": "2384960",
    "end": "2390680"
  },
  {
    "text": "out and Fanning in and then the map is the thing that's doing the incremental uh the incremental",
    "start": "2390680",
    "end": "2396800"
  },
  {
    "text": "interpretation of the map structure itself right so it's it's it's so once",
    "start": "2396800",
    "end": "2402200"
  },
  {
    "text": "you have these Primitives you can build map and you can build lots of other things too you can build filter map",
    "start": "2402200",
    "end": "2409040"
  },
  {
    "text": "right you can build all sorts of different Transformations on top of split and join um they're not the only",
    "start": "2409040",
    "end": "2414319"
  },
  {
    "text": "Primitives you need but they get you a large chunk of the way forward",
    "start": "2414319",
    "end": "2419599"
  },
  {
    "start": "2415000",
    "end": "2714000"
  },
  {
    "text": "so different and Patch are actually about more than just the particular",
    "start": "2419599",
    "end": "2425880"
  },
  {
    "text": "things we've shown so far you can use them in other context as I said you can you can do the operations I described",
    "start": "2425880",
    "end": "2432480"
  },
  {
    "text": "and actually there are many other kinds of operations that we've constructed you can do things like uh a range",
    "start": "2432480",
    "end": "2440040"
  },
  {
    "text": "query right you can say oh I want I have a I have an incoming map that's an incremental and I have a pair of",
    "start": "2440040",
    "end": "2446599"
  },
  {
    "text": "integers that's also an incremental that tells me what is the or pair of identifiers that tell I want all the sub",
    "start": "2446599",
    "end": "2452800"
  },
  {
    "text": "the submap that's between these two this range uh and",
    "start": "2452800",
    "end": "2457880"
  },
  {
    "text": "you can then write a little piece of code that gives you an incremental version of the output of that um another",
    "start": "2457880",
    "end": "2465960"
  },
  {
    "text": "uh another operation that comes up a lot is one that's called unordered fold and",
    "start": "2465960",
    "end": "2471119"
  },
  {
    "text": "unordered fold in some ways just exposes a little bit more of the base uh",
    "start": "2471119",
    "end": "2476359"
  },
  {
    "text": "mechanism of reading and writing diffs from the system unordered fold has a signature where you need to provide it",
    "start": "2476359",
    "end": "2483359"
  },
  {
    "text": "three different operations you need to provide an operation for adding a new element removing an element and changing",
    "start": "2483359",
    "end": "2490920"
  },
  {
    "text": "an element and then you can construct in arbitrary data structure as long as the",
    "start": "2490920",
    "end": "2498280"
  },
  {
    "text": "add remove and change operation follow the kind of obvious uh rules right they essentially need to commute with each",
    "start": "2498280",
    "end": "2503440"
  },
  {
    "text": "other so it should if you want to get a coherent version of a data structure at the end you want to make sure that uh uh",
    "start": "2503440",
    "end": "2511520"
  },
  {
    "text": "you want to make sure that the uh the operations will get you to the same place no matter which order that you do",
    "start": "2511520",
    "end": "2516680"
  },
  {
    "text": "it in because the order is some weird dependency of the history of your program and the whole point of incremental programs is efficiently",
    "start": "2516680",
    "end": "2522920"
  },
  {
    "text": "giving you what you would get from an all at once computation and so there should be no dependence on the history",
    "start": "2522920",
    "end": "2528240"
  },
  {
    "text": "so you have to be careful when you use unordered fold to make sure that the functions you put in follow the correct rules but once you do it it gives you an",
    "start": "2528240",
    "end": "2535640"
  },
  {
    "text": "efficient way of constructing all sorts of data structures on top of maps and not just uh and not just more maps from",
    "start": "2535640",
    "end": "2543160"
  },
  {
    "text": "Maps another interesting example uh of a data structure that bu is one called incor select and this is to solve a",
    "start": "2543160",
    "end": "2549680"
  },
  {
    "text": "problem that shows up in lots of user interface contexts and that's the problem of focus management I think incor select can used for other things",
    "start": "2549680",
    "end": "2555800"
  },
  {
    "text": "but Focus management is the one that we created it for uh and the focus",
    "start": "2555800",
    "end": "2561559"
  },
  {
    "text": "management story is in some sense very simple you often in your model want to represent in one place a UI element that",
    "start": "2561559",
    "end": "2569359"
  },
  {
    "text": "is in Focus you want to write down the identifier of the single object that is the current object that your UI should",
    "start": "2569359",
    "end": "2575480"
  },
  {
    "text": "be treating specially but then when you build individual incremental renderers",
    "start": "2575480",
    "end": "2580800"
  },
  {
    "text": "for all of the different uh for all of the different UI elements that are visible",
    "start": "2580800",
    "end": "2587400"
  },
  {
    "text": "currently each one of those needs to know whether or not it individually is in Focus so if you think about how",
    "start": "2587400",
    "end": "2593559"
  },
  {
    "text": "that's going to work you have one",
    "start": "2593559",
    "end": "2597280"
  },
  {
    "text": "input sorry about the erasing you have one",
    "start": "2601640",
    "end": "2608160"
  },
  {
    "text": "input that represents the the element that's in focus and then you want many",
    "start": "2608160",
    "end": "2613839"
  },
  {
    "text": "many different nodes that represent for each individual element in the UI",
    "start": "2613839",
    "end": "2620440"
  },
  {
    "text": "whether that UI is in Focus so this might be an integer incremental and these are all buol",
    "start": "2620440",
    "end": "2626800"
  },
  {
    "text": "incrementals right they just say yes or no as to whether or not that individual element is in focus and if you build",
    "start": "2626800",
    "end": "2632280"
  },
  {
    "text": "this in a naive way well what are you going to get you're going to get a computation that every",
    "start": "2632280",
    "end": "2639319"
  },
  {
    "text": "time this guy changes all of the UI elements need to fire right and you know",
    "start": "2639319",
    "end": "2645200"
  },
  {
    "text": "maybe they'll cut off at this point they won't cause further computation but you have a problem where you're trying to do something that should be very efficient",
    "start": "2645200",
    "end": "2651400"
  },
  {
    "text": "and it turns out to be very expensive you and what's the minimal thing that you want to be able to do the minimal",
    "start": "2651400",
    "end": "2657160"
  },
  {
    "text": "thing is to just fire just two of the nodes there's the one that was in Focus",
    "start": "2657160",
    "end": "2662760"
  },
  {
    "text": "that isn't anymore and the one that wasn't in focused but now is right so there's really just two specific nodes",
    "start": "2662760",
    "end": "2669599"
  },
  {
    "text": "that need to be recomputed and you want to figure out how to just fire those and it may not seem like diffing of",
    "start": "2669599",
    "end": "2676040"
  },
  {
    "text": "functional data structures but really it is the way in which you figure out what things you need to fire is you have to",
    "start": "2676040",
    "end": "2682280"
  },
  {
    "text": "it's the most trivial D in the world right you look I need to know how to go from the old number to the new number the old number was seven the new number",
    "start": "2682280",
    "end": "2688040"
  },
  {
    "text": "is 8,000 and I need to be sensitive to the history I have to know what the old",
    "start": "2688040",
    "end": "2693119"
  },
  {
    "text": "value was and just refire the parts of the computation that need to be done done so the the model of thinking about",
    "start": "2693119",
    "end": "2700160"
  },
  {
    "text": "things in terms of diff and Patch is valuable even when the diff itself is",
    "start": "2700160",
    "end": "2705640"
  },
  {
    "text": "kind of computationally trivial it's still in some sense the right way of thinking about things but different and Patch are also",
    "start": "2705640",
    "end": "2712040"
  },
  {
    "text": "about more than this different patch actually show up in lots of different incremental or reactive contexts where",
    "start": "2712040",
    "end": "2718960"
  },
  {
    "start": "2714000",
    "end": "2929000"
  },
  {
    "text": "you're trying to hook together functional worlds and other kinds of Worlds so a place that we found incr",
    "start": "2718960",
    "end": "2726000"
  },
  {
    "text": "this kind of diffing to be useful and which lots of other people have found it to be useful is when you want to connect",
    "start": "2726000",
    "end": "2731559"
  },
  {
    "text": "to some imperative API and imperative apis by their nature tend to think of things not in terms of",
    "start": "2731559",
    "end": "2738359"
  },
  {
    "text": "the whole big state because that's as we've talked for performance reasons a hard way to think about things but instead in terms of the changes right",
    "start": "2738359",
    "end": "2745520"
  },
  {
    "text": "what are the set of imperative operations you need to do to update this this API and this is the thing that",
    "start": "2745520",
    "end": "2752040"
  },
  {
    "text": "comes up in Virtual Dom Style UI so things like react are UI Frameworks that",
    "start": "2752040",
    "end": "2758160"
  },
  {
    "text": "are all organized around this notion of using diffing of functional data structures in particular the virtual Dom",
    "start": "2758160",
    "end": "2764520"
  },
  {
    "text": "is a functional data structure that represents the Dom tree you wish that you had and then there's the real",
    "start": "2764520",
    "end": "2769599"
  },
  {
    "text": "imperative Dom underneath and you basically use this translation via diff in order to figure out the set of",
    "start": "2769599",
    "end": "2774880"
  },
  {
    "text": "imperative operations that you need to use to update the Dom itself and this comes up not just in",
    "start": "2774880",
    "end": "2781480"
  },
  {
    "text": "virtual D it's actually a very common uh pattern whenever you need to interact with some imp comperative API whether",
    "start": "2781480",
    "end": "2787880"
  },
  {
    "text": "it's you know there's some graphing API that you need to use and you have your your functional data structure that",
    "start": "2787880",
    "end": "2793240"
  },
  {
    "text": "gives you all of your data and you want to convert it to the sets of additions and removals from the graphing",
    "start": "2793240",
    "end": "2799119"
  },
  {
    "text": "algorithms data structures that works very naturally in this way a thing that we have internally",
    "start": "2799119",
    "end": "2804359"
  },
  {
    "text": "at Jan stre is we have a pub subsystem where you you have this is actually a",
    "start": "2804359",
    "end": "2809960"
  },
  {
    "text": "way of communicating to excel if you've ever operated with any kind of trading or financial firm you'll discover that",
    "start": "2809960",
    "end": "2816640"
  },
  {
    "text": "they have put unpleasant amounts of engineering into interacting with Excel we are no different uh so this system",
    "start": "2816640",
    "end": "2822520"
  },
  {
    "text": "that we have called catalog the way it operates is it has a simple imperative API where you have Notions of catalog",
    "start": "2822520",
    "end": "2828839"
  },
  {
    "text": "cells which are things that you can put data into and the way it's very natural",
    "start": "2828839",
    "end": "2834319"
  },
  {
    "text": "to bridge the incremental and uh and catalog Worlds by when you have data",
    "start": "2834319",
    "end": "2839760"
  },
  {
    "text": "coming out you can compute the diff and that tells you essentially the sequence of rights that you need to do into the",
    "start": "2839760",
    "end": "2844880"
  },
  {
    "text": "catalog cells in order to get that information to the next layer of the architecture um and diffing also shows",
    "start": "2844880",
    "end": "2853800"
  },
  {
    "text": "up in the context of uh in the context of network protocols so if you think",
    "start": "2853800",
    "end": "2860280"
  },
  {
    "text": "about it there are really two common views of how you think",
    "start": "2860280",
    "end": "2865680"
  },
  {
    "text": "about applications that are consuming data in a stream there's a Delta oriented view where you think about the",
    "start": "2865680",
    "end": "2873119"
  },
  {
    "text": "sequence of changes the Delta encoding of the stream and there's a state oriented view where you get to see the",
    "start": "2873119",
    "end": "2879400"
  },
  {
    "text": "current view of the application and the kind of magic thing about functional data structures is they give you a cheap",
    "start": "2879400",
    "end": "2885760"
  },
  {
    "text": "and natural and efficient way of translating between these two views so you can consume data incrementally build",
    "start": "2885760",
    "end": "2892359"
  },
  {
    "text": "up your state operate on and transform your state and then go from the state oriented view back to a diff oriented",
    "start": "2892359",
    "end": "2899200"
  },
  {
    "text": "View and that works not just as a way of talking to incremental apis and talking",
    "start": "2899200",
    "end": "2904960"
  },
  {
    "text": "to imperative apis but also just talk talk to other computers right it's a natural way of compressing the stream of",
    "start": "2904960",
    "end": "2910160"
  },
  {
    "text": "data that you now have back onto the network so you're not wasting a huge amount of bandwidth at each",
    "start": "2910160",
    "end": "2917160"
  },
  {
    "text": "time so the in some sense one of the big picture ideas I want to leave you in",
    "start": "2917160",
    "end": "2922400"
  },
  {
    "text": "with is the notion that diff and Patch are a general purpose form of functional glue it's a way of taking functional",
    "start": "2922400",
    "end": "2929480"
  },
  {
    "text": "abstractions the kind of abstractions that we see routinely in uh functional programming languages and hooking them",
    "start": "2929480",
    "end": "2935480"
  },
  {
    "text": "in to all sorts of different places and I think that if you think about the work uh that we've done here there are two",
    "start": "2935480",
    "end": "2941400"
  },
  {
    "text": "different things you can take from it like the libraries themselves right they're available right you can go onto",
    "start": "2941400",
    "end": "2947079"
  },
  {
    "text": "our uh open source site and you can download the code you can look at it you can really use it we use it in",
    "start": "2947079",
    "end": "2952200"
  },
  {
    "text": "production for lots of different things um and but you can also I think take the ideas themselves and apply them to all",
    "start": "2952200",
    "end": "2959319"
  },
  {
    "text": "sorts of real world applications another point about this that I think is maybe uh easy to miss in",
    "start": "2959319",
    "end": "2967400"
  },
  {
    "text": "the overall kind of uh the kind of overall sweep of this argument is the",
    "start": "2967400",
    "end": "2972799"
  },
  {
    "text": "reason why the graph thing that we started with is so valuable so if you think about uh the techniques we've",
    "start": "2972799",
    "end": "2980920"
  },
  {
    "text": "talked about there's been a lot of focus about how do we integrate this notion of diffing into the structure of the graph",
    "start": "2980920",
    "end": "2987640"
  },
  {
    "text": "but why is the graph itself so important and I think if you if you want to see why the graph is important you need to stop for a moment and think about how",
    "start": "2987640",
    "end": "2994160"
  },
  {
    "text": "you would do these kind of applications if you didn't have these kind of techniques at your disposal and this is",
    "start": "2994160",
    "end": "2999760"
  },
  {
    "text": "actually one of these places where it it turns out that you come to it and if you",
    "start": "2999760",
    "end": "3005559"
  },
  {
    "text": "come to this from a a kind of functional programming background you think oh I'm going to use functional programming and it's going to make things better and it",
    "start": "3005559",
    "end": "3012480"
  },
  {
    "text": "turns out having done a lot of these kind of programs over time functional programming mostly doesn't make this better because if you just approach sort",
    "start": "3012480",
    "end": "3019880"
  },
  {
    "text": "of kind of naively try and smash through and do the obvious thing in order to optimize your program that's trying to",
    "start": "3019880",
    "end": "3026200"
  },
  {
    "text": "increment transform data and respond to the information that's coming in from the stream what you're going to do is",
    "start": "3026200",
    "end": "3032119"
  },
  {
    "text": "you're going to try and create little extra pieces of information that give you optimized",
    "start": "3032119",
    "end": "3039599"
  },
  {
    "text": "views let you answer some of the questions you need to answer so for example if you're building some kind of",
    "start": "3039599",
    "end": "3045359"
  },
  {
    "text": "state machine system we'd build a lot of these that are act as gateways between two different protocols you'll often",
    "start": "3045359",
    "end": "3050880"
  },
  {
    "text": "build up a bunch of State about what's going on and the data that's flying back and forth and you'll have a simple",
    "start": "3050880",
    "end": "3056200"
  },
  {
    "text": "normalized view that has all of the data and then you'll also want to construct little tiny views that answer small",
    "start": "3056200",
    "end": "3063839"
  },
  {
    "text": "questions really efficiently and there's a bunch of different of these kind of views that you need to construct and over the",
    "start": "3063839",
    "end": "3069520"
  },
  {
    "text": "course of the of the development of a program like this you'll discover more and more little extra useful",
    "start": "3069520",
    "end": "3075839"
  },
  {
    "text": "computational bits that you need to build along the way and in the building of those every time you add one of those",
    "start": "3075839",
    "end": "3082160"
  },
  {
    "text": "you're adding a small bit of technical debt you're adding an invariant right you you had a simple view of your data",
    "start": "3082160",
    "end": "3088599"
  },
  {
    "text": "that was just like you know all of the information that you knew so far and then you wanted some optimized view that",
    "start": "3088599",
    "end": "3094319"
  },
  {
    "text": "was smaller and then you have to carefully put a comment in your code that says every time I add something to",
    "start": "3094319",
    "end": "3100079"
  },
  {
    "text": "this big view I have to make sure to Transformer the following way and add it to this other optimized view over here",
    "start": "3100079",
    "end": "3105319"
  },
  {
    "text": "and then this other optimized view over there and then pretty soon you're like well it's hard to keep track of all",
    "start": "3105319",
    "end": "3111200"
  },
  {
    "text": "these so I'm going to write a big invariant function that does a kind of all at once analysis to make sure that",
    "start": "3111200",
    "end": "3116280"
  },
  {
    "text": "all the invariance hold um and now every time I build I'm going to write a bunch",
    "start": "3116280",
    "end": "3121799"
  },
  {
    "text": "of tests and in these tests I'm going to make sure to rerun the invariant constantly so I can make sure that I can",
    "start": "3121799",
    "end": "3127240"
  },
  {
    "text": "catch any transaction that goes in that violates the invariant uh and this is all super painful one of the big things",
    "start": "3127240",
    "end": "3135040"
  },
  {
    "text": "that we've discovered from taking this approach and really pushing hard on it is you can suddenly make all of that",
    "start": "3135040",
    "end": "3141720"
  },
  {
    "text": "complexity disappear because what you can do by by having a graph that explicitly represents the dependencies",
    "start": "3141720",
    "end": "3147960"
  },
  {
    "text": "of the computation and causes the necessary pieces to be recomputed when necessary is suddenly you have a system",
    "start": "3147960",
    "end": "3154559"
  },
  {
    "text": "an automated system that does that manual bookkeeping for you and you don't",
    "start": "3154559",
    "end": "3159839"
  },
  {
    "text": "need to write the invariant function anymore because the invariant is obviously just falls out of the way that",
    "start": "3159839",
    "end": "3166400"
  },
  {
    "text": "you structured the program in some ways it gives you something that's a little bit closer to",
    "start": "3166400",
    "end": "3171680"
  },
  {
    "text": "one of the nice things is programming in a database context like there are lots of terrible things about programming in",
    "start": "3171680",
    "end": "3176799"
  },
  {
    "text": "a databased context but one of the nice things is there's this natural notion of views that you can build into the system",
    "start": "3176799",
    "end": "3182720"
  },
  {
    "text": "that are kept up toate in an automated way and incremental gives you a way of",
    "start": "3182720",
    "end": "3187839"
  },
  {
    "text": "doing that inside of your program in a way that fits naturally inside of in ordinary functional program and in",
    "start": "3187839",
    "end": "3194079"
  },
  {
    "text": "ordinary functional programming language um and having that dependency management",
    "start": "3194079",
    "end": "3200880"
  },
  {
    "text": "for you along with the ability to use your ordinary functional data structures makes for a kind of profoundly better",
    "start": "3200880",
    "end": "3206040"
  },
  {
    "text": "experience in building these kind of systems okay and I think that's all I've",
    "start": "3206040",
    "end": "3211920"
  },
  {
    "text": "got thank you very much [Applause]",
    "start": "3211920",
    "end": "3218920"
  }
]