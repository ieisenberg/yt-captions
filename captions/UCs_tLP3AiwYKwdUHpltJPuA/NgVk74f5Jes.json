[
  {
    "start": "0",
    "end": "130000"
  },
  {
    "text": "[Music] let me very quickly introduce myself in",
    "start": "6990",
    "end": "12090"
  },
  {
    "text": "exonic just a few minutes so my name is Thomas from bill I'm officially known at our company as not the sales guy as it",
    "start": "12090",
    "end": "18660"
  },
  {
    "text": "says on my in my mug which kind of means that I am responsible for sales in some sense and telling the world about our",
    "start": "18660",
    "end": "24240"
  },
  {
    "text": "products but I'm a developer as well I spend about half of my time and doing Java coding and the rest of the time",
    "start": "24240",
    "end": "30989"
  },
  {
    "text": "telling the world about what we do so exonic is a new company started in",
    "start": "30989",
    "end": "37170"
  },
  {
    "text": "July of this year so just a few months ago and the core of exonic is excellent",
    "start": "37170",
    "end": "43650"
  },
  {
    "text": "framework so excellent framework is an open-source framework that by itself is not new has been around for about five",
    "start": "43650",
    "end": "49680"
  },
  {
    "text": "years and the reason for starting this new company around it is that it's adoption is increasing rapidly the",
    "start": "49680",
    "end": "57060"
  },
  {
    "text": "download chart that we get from maven Central's exponential last month 50k",
    "start": "57060",
    "end": "62910"
  },
  {
    "text": "downloads and the main reason why it's becoming so popular now is that people have kind of rediscovered some of the",
    "start": "62910",
    "end": "69659"
  },
  {
    "text": "principles behind axon framework in the context of micro services but we were talking a lot more about that later so",
    "start": "69659",
    "end": "76710"
  },
  {
    "text": "the business model about from exonic is to provide services around excellent framework consulting training that kind",
    "start": "76710",
    "end": "83010"
  },
  {
    "text": "of stuff and we provide a number of commercial software products in addition to the open source that's all I wanted",
    "start": "83010",
    "end": "91140"
  },
  {
    "text": "to say about your company this talk will just be about the open source stuff that we do so that basically as not that much to do with",
    "start": "91140",
    "end": "97590"
  },
  {
    "text": "the company jeanna for today first thing I want to do is to go over typical",
    "start": "97590",
    "end": "104130"
  },
  {
    "text": "layered architecture phenomena the problems associated with those some",
    "start": "104130",
    "end": "109710"
  },
  {
    "text": "stuff about DDD and how that relates to micro services and after that I want to jump into CQRS",
    "start": "109710",
    "end": "116190"
  },
  {
    "text": "an event sourcing and how these concepts are implements the Nexon framework and",
    "start": "116190",
    "end": "122970"
  },
  {
    "text": "then finally I will show you some code examples just to give you a flavor of what it looks like to work with excellent framework let's start by",
    "start": "122970",
    "end": "131489"
  },
  {
    "start": "130000",
    "end": "160000"
  },
  {
    "text": "considering the layered architecture very familiar picture I guess everybody has implemented this a ton of times so",
    "start": "131489",
    "end": "137819"
  },
  {
    "text": "you have a number of layers the main ordering principles that dependency only go one way and then they have to",
    "start": "137819",
    "end": "143490"
  },
  {
    "text": "share language that we call the domain model sometimes it may actually be business logic in the domain model but",
    "start": "143490",
    "end": "149490"
  },
  {
    "text": "more often than not those are just very anemic logic free data odors that are",
    "start": "149490",
    "end": "155040"
  },
  {
    "text": "really processed by the service layer now let's zoom in zoom into that domain model a little bit domain model start",
    "start": "155040",
    "end": "161610"
  },
  {
    "start": "160000",
    "end": "285000"
  },
  {
    "text": "simple in the beginning of the project and then they evolve as you add more classes to them and to make that",
    "start": "161610",
    "end": "167550"
  },
  {
    "text": "concrete let's have a look at your typical web shop example everybody knows that your can place orders orders have a",
    "start": "167550",
    "end": "174989"
  },
  {
    "text": "number of order lines or the lines relate to particular products and refer",
    "start": "174989",
    "end": "180150"
  },
  {
    "text": "to a quantity of that products that you're ordering products have a price order lines a quantity quantity times",
    "start": "180150",
    "end": "186840"
  },
  {
    "text": "price edit overall the order lines gives you the value of the total order simple will work now if you have a web shop",
    "start": "186840",
    "end": "194400"
  },
  {
    "text": "then it's not just about orders it's also about maintaining the list of products that people can buy right it",
    "start": "194400",
    "end": "200850"
  },
  {
    "text": "said as a like a set of product categories so it's a product catalog",
    "start": "200850",
    "end": "206579"
  },
  {
    "text": "perspective now interesting thing happens if prices change no prices will",
    "start": "206579",
    "end": "212549"
  },
  {
    "text": "change go up in the web shop now in this model once you start updating that price",
    "start": "212549",
    "end": "218150"
  },
  {
    "text": "what will happen is that you will also modify already existing orders which is",
    "start": "218150",
    "end": "224070"
  },
  {
    "text": "not what you want because they have been ordered that particular price points so this model very quickly brings you into",
    "start": "224070",
    "end": "229380"
  },
  {
    "text": "trouble so you need to solve that and one way of doing it I'm not I'm not recommending it but one way of doing it",
    "start": "229380",
    "end": "235380"
  },
  {
    "text": "would be to say well actually products have multiple prices because there's an",
    "start": "235380",
    "end": "241230"
  },
  {
    "text": "historical evolution of the price of those products each order line refers to a product and a historical version of",
    "start": "241230",
    "end": "248459"
  },
  {
    "text": "that price and then my products of course also have a current price the price that I'm currently displaying in",
    "start": "248459",
    "end": "254880"
  },
  {
    "text": "my store which might work but it spectacularly complex for something that",
    "start": "254880",
    "end": "261269"
  },
  {
    "text": "seems so easy right it's a very simple use case so if this simple use case already brings you logically into this",
    "start": "261269",
    "end": "267720"
  },
  {
    "text": "kind of mess what happens if your program really starts to evolve is that you end up in something like this",
    "start": "267720",
    "end": "274169"
  },
  {
    "text": "also known as the big ball of mud and my colleague a lot always says that's the architect sitting on top now",
    "start": "274169",
    "end": "286590"
  },
  {
    "start": "285000",
    "end": "313000"
  },
  {
    "text": "interestingly if we go back to this picture we've seen the complexity in this domain model the main thing that",
    "start": "286590",
    "end": "292590"
  },
  {
    "text": "we're doing here in this model to to manage complexity is to use those layers but those layers fundamentally have",
    "start": "292590",
    "end": "299129"
  },
  {
    "text": "nothing to do with the complexity so you can add layers all you want but adding",
    "start": "299129",
    "end": "306689"
  },
  {
    "text": "more layers is not going to solve the problem because the problem is not in the layers it's as easy as that",
    "start": "306689",
    "end": "312889"
  },
  {
    "start": "313000",
    "end": "341000"
  },
  {
    "text": "now this is I think it's where micro-services have a very interesting role to play because they are a fundamentally different approach to",
    "start": "313039",
    "end": "319860"
  },
  {
    "text": "managing the complexity instead of managing complexity by having layers you say I'm going to manage complexity by",
    "start": "319860",
    "end": "325949"
  },
  {
    "text": "breaking my system up into very small units that by themselves don't carry that much complexity so it's an",
    "start": "325949",
    "end": "331889"
  },
  {
    "text": "attractive idea and if you are there you can also scale them separately and deploy them in all kinds of different",
    "start": "331889",
    "end": "336990"
  },
  {
    "text": "ways upgrade them separately so it's it's a good proposition but there are some interesting stuff going on with",
    "start": "336990",
    "end": "343680"
  },
  {
    "text": "micro services projects these are some quotes from Martin Fowler and he says",
    "start": "343680",
    "end": "348930"
  },
  {
    "text": "well many successful microservices projects have started as a monolith that",
    "start": "348930",
    "end": "354210"
  },
  {
    "text": "was done broken up into microservices later on with on the other hand if you start out with a microservices",
    "start": "354210",
    "end": "360330"
  },
  {
    "text": "architecture because it's such a great pattern chances are that your project will fill so what should you do you",
    "start": "360330",
    "end": "367110"
  },
  {
    "text": "should actually start with that monolith and then break it up but at the same time this is more like a quote from",
    "start": "367110",
    "end": "372689"
  },
  {
    "text": "myself having hurt for many people is that it's really difficult to do that if you have this legacy monolith there is",
    "start": "372689",
    "end": "378990"
  },
  {
    "text": "no easy way to split it up into microservices so what you would like to",
    "start": "378990",
    "end": "384629"
  },
  {
    "text": "do ideally is start simple and then evolve that but avoid the big ball of",
    "start": "384629",
    "end": "390389"
  },
  {
    "text": "mud scenario and instead go to this structured monolith that you then later",
    "start": "390389",
    "end": "396240"
  },
  {
    "text": "on can split into micro services or even more micro services as needed",
    "start": "396240",
    "end": "401539"
  },
  {
    "text": "so this thing that's what we call the big friendly monolith it's a monolith but someone on earth that's man",
    "start": "401539",
    "end": "408039"
  },
  {
    "text": "and that can easily be split up into microservices as needed so this is the kind of thing that we want to support",
    "start": "408039",
    "end": "414909"
  },
  {
    "text": "with axonal framework and that many of our users actually have successfully done and we have some case studies on",
    "start": "414909",
    "end": "420580"
  },
  {
    "text": "that scenario in our booth as well so what is excellent framework open source",
    "start": "420580",
    "end": "426610"
  },
  {
    "start": "424000",
    "end": "483000"
  },
  {
    "text": "framework started out as an open source framework for CQRS in Java and the",
    "start": "426610",
    "end": "431949"
  },
  {
    "text": "seacrest principle something we will discuss in more detail and it's actually the thing that will make this",
    "start": "431949",
    "end": "437229"
  },
  {
    "text": "evolutionary market service as possible the essential parts of the framework is",
    "start": "437229",
    "end": "443740"
  },
  {
    "text": "that its messaging oriented so you have components that message to one another and we recognize three different types",
    "start": "443740",
    "end": "449740"
  },
  {
    "text": "of messages events commands and queries and not just defense that's very important part of it it enables location",
    "start": "449740",
    "end": "457059"
  },
  {
    "text": "transparency so components don't really care where other components are and that's the thing that makes it easy to",
    "start": "457059",
    "end": "463209"
  },
  {
    "text": "split up an existing application and it's highly customizable so you can",
    "start": "463209",
    "end": "468819"
  },
  {
    "text": "start out by using very simple technology if you have this monolith you don't need fancy message message buses",
    "start": "468819",
    "end": "475149"
  },
  {
    "text": "or anything but then later on if you want to integrate it with Kafka or rabbit or whatever that's also possible without changing your business code the",
    "start": "475149",
    "end": "485169"
  },
  {
    "start": "483000",
    "end": "549000"
  },
  {
    "text": "core pattern behind it is secure s command query responsibility segregation and as the name suggests that means that",
    "start": "485169",
    "end": "492009"
  },
  {
    "text": "you have separated your application in two sides one handling commands one handling queries commands are things",
    "start": "492009",
    "end": "499089"
  },
  {
    "text": "that are that change state so it's a request to do something but they don't provide any information back maybe a",
    "start": "499089",
    "end": "505990"
  },
  {
    "text": "confirmation that they have been executed but that's it no more information queries are exactly the",
    "start": "505990",
    "end": "511300"
  },
  {
    "text": "opposite there are questions you get answers from them but they don't change the states they leave this state",
    "start": "511300",
    "end": "517240"
  },
  {
    "text": "unchanged this side of it is called Akimov model those sides are called read",
    "start": "517240",
    "end": "524769"
  },
  {
    "text": "model or projections is a term you would often find in the literature about this now of course this can only work if the",
    "start": "524769",
    "end": "531490"
  },
  {
    "text": "projections are up-to-date with the state of the command model which means that there is a third component here and",
    "start": "531490",
    "end": "537399"
  },
  {
    "text": "those are the events so whenever commands lead to a change the crow mouth model they will raise an event the event will be picked up by the",
    "start": "537399",
    "end": "544080"
  },
  {
    "text": "projections and then you get good answers from your next queries so this",
    "start": "544080",
    "end": "550110"
  },
  {
    "start": "549000",
    "end": "567000"
  },
  {
    "text": "is a pretty complex thing to do right if you if you compare it to having just one",
    "start": "550110",
    "end": "556320"
  },
  {
    "text": "model and processing that for transactions and for queries this introduces a huge amount of complexity",
    "start": "556320",
    "end": "563100"
  },
  {
    "text": "so a very good question you could ask is why would you do this well there are",
    "start": "563100",
    "end": "569279"
  },
  {
    "start": "567000",
    "end": "629000"
  },
  {
    "text": "many technical reasons one of them is for instance that the throughput characteristics may be totally different",
    "start": "569279",
    "end": "575160"
  },
  {
    "text": "on those two sides if we consider again the web shop example then changes in your product catalog happen quite",
    "start": "575160",
    "end": "581940"
  },
  {
    "text": "infrequently compared to the number of times that this product catalog is actually being accessed by by you by",
    "start": "581940",
    "end": "587100"
  },
  {
    "text": "consumers so you may wish to optimize for those two things in a very different way and if you optimize your your right",
    "start": "587100",
    "end": "596130"
  },
  {
    "text": "side for processing transactions you would probably normalize them and that might lead to very complex queries on",
    "start": "596130",
    "end": "602640"
  },
  {
    "text": "your read side to actually produce the data again which will be bad for performance but so there are many",
    "start": "602640",
    "end": "607920"
  },
  {
    "text": "different technical reasons but do overarching reason why you would want to do this is simplification in the long",
    "start": "607920",
    "end": "613470"
  },
  {
    "text": "run so if you look at a very simple application in the beginning it introduces some additional complexity",
    "start": "613470",
    "end": "618510"
  },
  {
    "text": "because you have those commands those events and everything but in the long run you will find that these individual",
    "start": "618510",
    "end": "623850"
  },
  {
    "text": "commands and verse and event handlers or simple objects that are easy to maintain and expand zooming in a little bit on",
    "start": "623850",
    "end": "631470"
  },
  {
    "start": "629000",
    "end": "702000"
  },
  {
    "text": "those two sides this would be the command model very important aspects of",
    "start": "631470",
    "end": "637110"
  },
  {
    "text": "the command models that you start thinking in aggregates so aggregates are like units of consistency and",
    "start": "637110",
    "end": "643740"
  },
  {
    "text": "persistence and you split up the command",
    "start": "643740",
    "end": "649140"
  },
  {
    "text": "or the number of different aggregates where you stop having connections between everything if you do a typical",
    "start": "649140",
    "end": "655380"
  },
  {
    "text": "data modelling thing in a database you might have foreign key relations between all objects making it one big thing",
    "start": "655380",
    "end": "662310"
  },
  {
    "text": "where you think in aggregates you use small units and to make that concrete here if we go back to this order and",
    "start": "662310",
    "end": "669540"
  },
  {
    "text": "catalog example we might have an order aggregate that has a number of oral which can reprise and everything and",
    "start": "669540",
    "end": "676170"
  },
  {
    "text": "then separately from that you might have a product aggregates which has the category and the current price so what",
    "start": "676170",
    "end": "682650"
  },
  {
    "text": "happens now is that when you place a new order this aggregate gets created it records the price at that point and this",
    "start": "682650",
    "end": "690870"
  },
  {
    "text": "product aggregate is being updated when the price changes in the webshop but this would not directly affect an",
    "start": "690870",
    "end": "696690"
  },
  {
    "text": "existing order so you have to solve your problem of modeling in a lot more elegant way looking at the reed side key",
    "start": "696690",
    "end": "706350"
  },
  {
    "start": "702000",
    "end": "722000"
  },
  {
    "text": "thing here is that you have many different reed models segregated typically it might be one per use case",
    "start": "706350",
    "end": "712500"
  },
  {
    "text": "or one per screen in your application just optimized to very efficiently very",
    "start": "712500",
    "end": "717570"
  },
  {
    "text": "simply deliver the data needed for that particular use case you may also use",
    "start": "717570",
    "end": "723960"
  },
  {
    "start": "722000",
    "end": "754000"
  },
  {
    "text": "very different technologies there in a webshops example again you might want to have a full-text search in your product for for",
    "start": "723960",
    "end": "731250"
  },
  {
    "text": "people to find what they need so you may use an elastic search engine for instance behind that all the stuff may",
    "start": "731250",
    "end": "736770"
  },
  {
    "text": "better fit in a relational database model all the stuff may fit better in a document store with this concept of CTRs",
    "start": "736770",
    "end": "743310"
  },
  {
    "text": "and reed models makes it very easy to implement those various technologies alongside each other without your",
    "start": "743310",
    "end": "750120"
  },
  {
    "text": "application architecture becoming one big mess so if you put those things",
    "start": "750120",
    "end": "755790"
  },
  {
    "start": "754000",
    "end": "791000"
  },
  {
    "text": "together this is kind of like the axle architecture you would have come and",
    "start": "755790",
    "end": "761040"
  },
  {
    "text": "handling components that have their own storage model domain model if something",
    "start": "761040",
    "end": "766530"
  },
  {
    "text": "changes there they would publish events they just get picked up by find handling",
    "start": "766530",
    "end": "772530"
  },
  {
    "text": "components they do update on a separate storage and that's where you would do",
    "start": "772530",
    "end": "778050"
  },
  {
    "text": "reads of course the application user interface connects with both parts of",
    "start": "778050",
    "end": "785280"
  },
  {
    "text": "that so it's still just one applications from from an end-user perspective",
    "start": "785280",
    "end": "791660"
  },
  {
    "start": "791000",
    "end": "824000"
  },
  {
    "text": "looking at that again as a sequence diagram the product manager would create",
    "start": "791810",
    "end": "797730"
  },
  {
    "text": "products that would raise an event like a product rated event that would end up",
    "start": "797730",
    "end": "802950"
  },
  {
    "text": "in the product projection so that's when it becomes available for shoppers which",
    "start": "802950",
    "end": "808470"
  },
  {
    "text": "show up because humor would do a gap product info query get at info including",
    "start": "808470",
    "end": "814860"
  },
  {
    "text": "the price and then the product would be added to an order which would end up in",
    "start": "814860",
    "end": "820410"
  },
  {
    "text": "your projections that's the kind of logic that you would have in this model",
    "start": "820410",
    "end": "825980"
  },
  {
    "text": "now one one thing where you have a choice in this model is how to persist aggregates so these aggregates are",
    "start": "826430",
    "end": "832710"
  },
  {
    "text": "persisted in the commode model and they're being read back of course whenever a new command needs to be processed now the traditional way of",
    "start": "832710",
    "end": "839220"
  },
  {
    "text": "doing that would be just to persist the current state into a database and in Java many people choose JP a other",
    "start": "839220",
    "end": "844470"
  },
  {
    "text": "approaches are possible as well of course it's always the current state now",
    "start": "844470",
    "end": "849570"
  },
  {
    "text": "there's one interesting alternative that you might use there and which is used in fact by most excellent framework users",
    "start": "849570",
    "end": "856590"
  },
  {
    "text": "although it's not mandatory but it's very popular and that's event sourcing so with event sourcing you don't store",
    "start": "856590",
    "end": "862470"
  },
  {
    "text": "the current state but what you do instead is store all the events that have happens that would change the state",
    "start": "862470",
    "end": "869280"
  },
  {
    "text": "and then whenever you need to read back this aggregate you just replay all those events which again seems like some",
    "start": "869280",
    "end": "878190"
  },
  {
    "text": "complexity and there are some performance hit of course as well but there are some great benefits in",
    "start": "878190",
    "end": "884850"
  },
  {
    "text": "doing that and the benefits fall into two categories for some business benefits and those are the most important ones motivating organizations",
    "start": "884850",
    "end": "892170"
  },
  {
    "text": "to do this and those are there there's a lot of value in capturing all that history that may be value for compliance",
    "start": "892170",
    "end": "899130"
  },
  {
    "text": "purposes if you ever need to show exactly what happens in a particular case for instance we have some online",
    "start": "899130",
    "end": "905280"
  },
  {
    "text": "casinos that use excellent framework and for them it's very important that if a dispute arises that it can show exactly",
    "start": "905280",
    "end": "912420"
  },
  {
    "text": "what happened and they're using event sourcing for that reason and your reason is more into machine learning and",
    "start": "912420",
    "end": "918620"
  },
  {
    "text": "analytics and data science it's about exploiting the simple fact that data is",
    "start": "918620",
    "end": "925140"
  },
  {
    "text": "valuable it's very valuable to know what happens and to optimize your business for that just to show you an example",
    "start": "925140",
    "end": "931190"
  },
  {
    "start": "930000",
    "end": "1029000"
  },
  {
    "text": "suppose again that is that we have this webshop and it sells the fruit then you",
    "start": "931190",
    "end": "936240"
  },
  {
    "text": "could order two banana one peach and that would be just the order aggregate but in an event sourced",
    "start": "936240",
    "end": "942280"
  },
  {
    "text": "world you might actually see that something else has happened so the apples for attitude and order and I'm",
    "start": "942280",
    "end": "948430"
  },
  {
    "text": "bananas and then apples were removed and a peach was added before the order was actually committed now this is for order",
    "start": "948430",
    "end": "955930"
  },
  {
    "text": "fulfillment the apples are totally irrelevant because they were not ordered but from a business optimization",
    "start": "955930",
    "end": "962050"
  },
  {
    "text": "perspective it's very interesting to learn that I was on the brink of buying apples and then decided not to",
    "start": "962050",
    "end": "968050"
  },
  {
    "text": "so what could shop do differently to make me buy this Apple's next time that's an interesting thing so you don't",
    "start": "968050",
    "end": "973390"
  },
  {
    "text": "want to forget about that and that's what event sourcing gets you another",
    "start": "973390",
    "end": "978850"
  },
  {
    "text": "reason to do event sourcing is that it's interesting to capture in tenth so",
    "start": "978850",
    "end": "983980"
  },
  {
    "text": "suppose I have a customer database and I'm updating the address with simple update statements will work but it will",
    "start": "983980",
    "end": "991680"
  },
  {
    "text": "not show any information as to why that address was updated in an event system",
    "start": "991680",
    "end": "997060"
  },
  {
    "text": "what you do is create events that specify what happens and they would have as a result that em read models the",
    "start": "997060",
    "end": "1004050"
  },
  {
    "text": "address get updated but you may distinguish between a mere correction of an address versus an actual customer",
    "start": "1004050",
    "end": "1011370"
  },
  {
    "text": "relocating to a new address which are from a business perspective different things that you might react to",
    "start": "1011370",
    "end": "1016800"
  },
  {
    "text": "differently if you get the second event you might send a nice postcard to your customer saying congratulations on your",
    "start": "1016800",
    "end": "1022770"
  },
  {
    "text": "new house doesn't make any sense if it's the first event so it's good to make a distinction that's what the event",
    "start": "1022770",
    "end": "1028199"
  },
  {
    "text": "sourcing can do so the Sakura stuff and",
    "start": "1028199",
    "end": "1033420"
  },
  {
    "start": "1029000",
    "end": "1094000"
  },
  {
    "text": "actually event sourcing are really interesting ingredient to this big friendly monolith because already in the",
    "start": "1033420",
    "end": "1040560"
  },
  {
    "text": "concept you're splitting off things these aggregates they have small boundaries so different aggregates can",
    "start": "1040560",
    "end": "1046770"
  },
  {
    "text": "really easily live into in different market services the reed models are separate you have read models per screen",
    "start": "1046770",
    "end": "1054390"
  },
  {
    "text": "or per use case read models don't have to coincide with common models on the same server they just have to be able to",
    "start": "1054390",
    "end": "1061230"
  },
  {
    "text": "exchange events so there's a very natural mapping between this concept and micro-services there's just one other",
    "start": "1061230",
    "end": "1068160"
  },
  {
    "text": "thing that you also need and that's location transfer and see if those service components",
    "start": "1068160",
    "end": "1073500"
  },
  {
    "text": "assume that they're all on the same server then you cannot get into micro",
    "start": "1073500",
    "end": "1078570"
  },
  {
    "text": "services if they always have to communicate via a bus or something then",
    "start": "1078570",
    "end": "1085020"
  },
  {
    "text": "you're kind of in this place where you have to where you're starting with micro services from the beginning so you want",
    "start": "1085020",
    "end": "1090510"
  },
  {
    "text": "to abstract that away and allow evolution in that dimension so the way",
    "start": "1090510",
    "end": "1096060"
  },
  {
    "text": "we do that in Axum is that all communications between those components they take place through a bus API so",
    "start": "1096060",
    "end": "1103440"
  },
  {
    "text": "just a set of Java classes components do not make any assumptions where other components are and then in the excellent",
    "start": "1103440",
    "end": "1110580"
  },
  {
    "text": "configuration you can either choose a very simple implementation of those buses that just lives inside a JVM and",
    "start": "1110580",
    "end": "1117510"
  },
  {
    "text": "passes all messages directly or you can choose an implementation which actually",
    "start": "1117510",
    "end": "1122550"
  },
  {
    "text": "goes over the network and goes to different systems and importantly in our",
    "start": "1122550",
    "end": "1128250"
  },
  {
    "start": "1125000",
    "end": "1236000"
  },
  {
    "text": "messaging concept and our bus concepts it's not just about events we see that",
    "start": "1128250",
    "end": "1133590"
  },
  {
    "text": "sometimes that these architectures are being proposed where there are so-called event-driven and and all components just",
    "start": "1133590",
    "end": "1138690"
  },
  {
    "text": "speak to one another in the language of events we believe that this is not a very good idea reason being that events",
    "start": "1138690",
    "end": "1147570"
  },
  {
    "text": "lead to a particular dependency between components so in this example we have",
    "start": "1147570",
    "end": "1153090"
  },
  {
    "text": "components a in a component B component a races and events that's being processed by component B and potentially",
    "start": "1153090",
    "end": "1159990"
  },
  {
    "text": "also by other components of course and this creates a dependency from component",
    "start": "1159990",
    "end": "1165600"
  },
  {
    "text": "B to component a because component a determines what this event looks like",
    "start": "1165600",
    "end": "1171300"
  },
  {
    "text": "there are raising events and B has to adopt itself to the model that a has",
    "start": "1171300",
    "end": "1176610"
  },
  {
    "text": "created now if events also flow in the other direction from B to a and the same",
    "start": "1176610",
    "end": "1183870"
  },
  {
    "text": "mechanism ensures that there is a dependency from A to B so the two things are now interdependent you have the",
    "start": "1183870",
    "end": "1189270"
  },
  {
    "text": "cyclic dependency and the chances are that if you need to change something you need to change both components which is",
    "start": "1189270",
    "end": "1195090"
  },
  {
    "text": "exactly what you do not want to do in the microservices architecture one of the benefits should be that you can update them separately now consider what",
    "start": "1195090",
    "end": "1203070"
  },
  {
    "text": "happens if you use commands if a sends a command to B then a has to",
    "start": "1203070",
    "end": "1208710"
  },
  {
    "text": "adopt itself to the command language that B has defined it's a client so it's",
    "start": "1208710",
    "end": "1214380"
  },
  {
    "text": "dependency from A to B and then if events are being sent back from B to a",
    "start": "1214380",
    "end": "1219410"
  },
  {
    "text": "that's again a dependency from A to B because a has to adopt itself to the events produced by B so the dependency",
    "start": "1219410",
    "end": "1225840"
  },
  {
    "text": "is now only in one direction and you can't change a without making any change in B that's a fundamentally better place",
    "start": "1225840",
    "end": "1230940"
  },
  {
    "text": "to be so this is one very important reason why we believe it's not just about events the other thing is that if",
    "start": "1230940",
    "end": "1238590"
  },
  {
    "start": "1236000",
    "end": "1355000"
  },
  {
    "text": "you look at these three concepts commands events and queries they have quite different routing patterns so",
    "start": "1238590",
    "end": "1244350"
  },
  {
    "text": "command always has to be processed once and you need some confirmation that this happens ideally you want some consistent",
    "start": "1244350",
    "end": "1253530"
  },
  {
    "text": "routing if you have many instances of command processors it's a good thing to",
    "start": "1253530",
    "end": "1259170"
  },
  {
    "text": "send commands that are targeting the same aggregates to the same instance because then their caches will be warm",
    "start": "1259170",
    "end": "1265320"
  },
  {
    "text": "and it will work a lot faster events is totally different routing thing so",
    "start": "1265320",
    "end": "1270420"
  },
  {
    "text": "events are being spread to everyone you don't get any confirmations on them but",
    "start": "1270420",
    "end": "1276450"
  },
  {
    "text": "it's very important with events that they're being processed in the right order suppose that you're writing this read model and you get an order created",
    "start": "1276450",
    "end": "1283020"
  },
  {
    "text": "event and then an item added to order events but you have multiple instances",
    "start": "1283020",
    "end": "1289020"
  },
  {
    "text": "of the read model and the order created event is being handled by one of them and item added to order will be ended by",
    "start": "1289020",
    "end": "1295050"
  },
  {
    "text": "another instance it doesn't work if the order of events doesn't match anymore because first you get the item added to",
    "start": "1295050",
    "end": "1302070"
  },
  {
    "text": "order before the order was created some things will not work smoothly either so",
    "start": "1302070",
    "end": "1307320"
  },
  {
    "text": "they have some specific events routing requirements and their queries are again",
    "start": "1307320",
    "end": "1312330"
  },
  {
    "text": "different so usually you have one query handler giving an answer to a query but",
    "start": "1312330",
    "end": "1319380"
  },
  {
    "text": "there are some cases where you have scatter god or type of patterns or competing queries think for instance",
    "start": "1319380",
    "end": "1325140"
  },
  {
    "text": "about a pricing service where you put a second pricing service next to it for",
    "start": "1325140",
    "end": "1330990"
  },
  {
    "text": "special promotions or Christmas actions and through discounts and everything then your logic may be with queries",
    "start": "1330990",
    "end": "1338320"
  },
  {
    "text": "you want the best which is the lowest answer to your price query there are",
    "start": "1338320",
    "end": "1343809"
  },
  {
    "text": "some specific routing possible with each of those things that's again a reason why we believe these kind of",
    "start": "1343809",
    "end": "1349960"
  },
  {
    "text": "architecture should not just be about events messaging is richer than that",
    "start": "1349960",
    "end": "1356009"
  },
  {
    "text": "let's have a look at a few examples and let's have a look at the time as well so",
    "start": "1356220",
    "end": "1366240"
  },
  {
    "text": "if you use this style of architecture of",
    "start": "1366240",
    "end": "1371679"
  },
  {
    "text": "course you need to define a lot of commands and events as classes and they all tend to be immutable very boring to",
    "start": "1371679",
    "end": "1379480"
  },
  {
    "text": "write so even though you can write them in Java directly all but it almost nobody does that it's quite popular to",
    "start": "1379480",
    "end": "1386440"
  },
  {
    "text": "use a project Lombok for that but you can annotate your classes and then generate a lot of the stuff that you",
    "start": "1386440",
    "end": "1393370"
  },
  {
    "text": "need to create this immutable classes automatically but it's even more popular",
    "start": "1393370",
    "end": "1398980"
  },
  {
    "text": "nowadays to use Coughlin for that so even if you don't use Coughlin for your entire excellent project it may be very",
    "start": "1398980",
    "end": "1404679"
  },
  {
    "text": "useful to use it just to define those data classes you can define many of them just in a single file you can just",
    "start": "1404679",
    "end": "1411700"
  },
  {
    "text": "declare all the variables that you need and then you will get a bunch of immutable classes with equals and",
    "start": "1411700",
    "end": "1418149"
  },
  {
    "text": "getters and everything and constructors so that's the most popular thing to do",
    "start": "1418149",
    "end": "1423820"
  },
  {
    "text": "another thing that maybe that's relevant to note about this example is that here",
    "start": "1423820",
    "end": "1429159"
  },
  {
    "text": "in this add order line commands we're using this annotation target aggregate identifier so that's the thing that",
    "start": "1429159",
    "end": "1435879"
  },
  {
    "text": "helps accent to know which aggregate you're targeting with your command it's not needed when you are creating a new",
    "start": "1435879",
    "end": "1442389"
  },
  {
    "text": "aggregate because then it doesn't have an idea yet of course if you need to add an order line to an existing order you",
    "start": "1442389",
    "end": "1448509"
  },
  {
    "text": "need to specify which order it should be processed in so the flow would be that if this command is being processed by",
    "start": "1448509",
    "end": "1455110"
  },
  {
    "text": "axon it would start reading all the events related to that existing order",
    "start": "1455110",
    "end": "1461019"
  },
  {
    "text": "replay them then you have the state of an order in memory and then you can actually execute the command so that's",
    "start": "1461019",
    "end": "1466720"
  },
  {
    "text": "how it would work sending commands in the client who used",
    "start": "1466720",
    "end": "1472300"
  },
  {
    "start": "1468000",
    "end": "1509000"
  },
  {
    "text": "to look like this so you have this command gateway object which is your entry point into axon based on input you",
    "start": "1472300",
    "end": "1478780"
  },
  {
    "text": "get from the user you would set up one of those one of those commands here create new order commands we choose an",
    "start": "1478780",
    "end": "1485050"
  },
  {
    "text": "ID for that most of the time people use your you IDs because they can be generated without any concerns about",
    "start": "1485050",
    "end": "1491350"
  },
  {
    "text": "uniqueness etc and then it's being sent through the command gateway so that's where x1 will pick it up and depending",
    "start": "1491350",
    "end": "1498430"
  },
  {
    "text": "on the configuration that may mean that it's actually being handled in the same runtime the same JVM or it may go over",
    "start": "1498430",
    "end": "1505330"
  },
  {
    "text": "the network but this code wouldn't know about that at all [Music]",
    "start": "1505330",
    "end": "1510630"
  },
  {
    "text": "inside the aggregates you quote may look like this so you have of course an aggregate",
    "start": "1510630",
    "end": "1516310"
  },
  {
    "text": "identifier that you need to annotate so I acts on those what you mean with that and then there will be command handlers",
    "start": "1516310",
    "end": "1523630"
  },
  {
    "text": "and event handlers command handlers do a bunch of checks so they will determine",
    "start": "1523630",
    "end": "1529870"
  },
  {
    "text": "whether or not the command is allowed to be processed but we will never ever change state directly because change",
    "start": "1529870",
    "end": "1536800"
  },
  {
    "text": "will always go through events so what it will do if they decide that everything is ok they will call the apply method",
    "start": "1536800",
    "end": "1543970"
  },
  {
    "text": "which is a static method in external framework and include all the information in the apply method that's",
    "start": "1543970",
    "end": "1549820"
  },
  {
    "text": "needed to update the average actual updates will be done inside an event",
    "start": "1549820",
    "end": "1555700"
  },
  {
    "text": "handler so the order line edit events may be used here to change the state of the aggregate now what's interesting and",
    "start": "1555700",
    "end": "1563320"
  },
  {
    "text": "a little bit counterintuitive is that you don't need to store all state in the aggregate the only reason why you would",
    "start": "1563320",
    "end": "1569200"
  },
  {
    "text": "store state and in aggregate is if you somehow need that states to make command decisions later on if you just want to",
    "start": "1569200",
    "end": "1576040"
  },
  {
    "text": "remember it for querying it to show that data to users you don't need to have it",
    "start": "1576040",
    "end": "1581980"
  },
  {
    "text": "in aggregate because that will be done by the read models and read models will get a chance to process these events as",
    "start": "1581980",
    "end": "1588010"
  },
  {
    "text": "well so in this case the only business logic implemented here is that we",
    "start": "1588010",
    "end": "1594070"
  },
  {
    "text": "validate a quantity on a command cannot be less than 1 but nothing else is being validated and if that's truly my",
    "start": "1594070",
    "end": "1601090"
  },
  {
    "text": "business logic then I wouldn't need to store anything in my aggregates we could even drop this event handler altogether now",
    "start": "1601090",
    "end": "1608500"
  },
  {
    "text": "suppose that I have a little bit more complex business logic and we would check here that the total order value",
    "start": "1608500",
    "end": "1614580"
  },
  {
    "text": "can never be bigger than 10k then of course you need to start maintaining",
    "start": "1614580",
    "end": "1620860"
  },
  {
    "text": "some state and to maintain that state to do that check the only thing that you",
    "start": "1620860",
    "end": "1627100"
  },
  {
    "text": "would need to remember is the total value of the order and that would then be updated here in the handler but",
    "start": "1627100",
    "end": "1634120"
  },
  {
    "text": "there's no need to store all the order lines for instance of course this is just to illustrate the principle if you",
    "start": "1634120",
    "end": "1640690"
  },
  {
    "text": "would work this out in a little bit more detail probably that would be a good reason to keep those order lines here",
    "start": "1640690",
    "end": "1646080"
  },
  {
    "text": "but it's important to know that you don't have to store all information in the aggregate the read models would look",
    "start": "1646080",
    "end": "1655870"
  },
  {
    "start": "1652000",
    "end": "1702000"
  },
  {
    "text": "like this you would have an event handler there as well",
    "start": "1655870",
    "end": "1661240"
  },
  {
    "text": "and basically how you do the rest is up to you so X only in its current form doesn't do a lot for that so this is an",
    "start": "1661240",
    "end": "1668800"
  },
  {
    "text": "example with JPA but it could be any type of technology the core thing here is that you're capturing those events",
    "start": "1668800",
    "end": "1674970"
  },
  {
    "text": "and then updating your reads model accordingly something that will be",
    "start": "1674970",
    "end": "1680290"
  },
  {
    "text": "included in the new version of axon that will come out in a couple of weeks is that queries will be handled over a bus",
    "start": "1680290",
    "end": "1687070"
  },
  {
    "text": "as well currently queries would just be direct invocations of in this case the final orders method we don't have a way to",
    "start": "1687070",
    "end": "1693700"
  },
  {
    "text": "easily put those on the bus or create location transparency for queries as such but I will be included in a new",
    "start": "1693700",
    "end": "1699850"
  },
  {
    "text": "version now so far we've seen how to",
    "start": "1699850",
    "end": "1706690"
  },
  {
    "text": "program with axon locking your domain model sites and you can mount handling side of course you also need to set up",
    "start": "1706690",
    "end": "1712930"
  },
  {
    "text": "that infrastructure now assuming you're using a spring booth and you just want",
    "start": "1712930",
    "end": "1717940"
  },
  {
    "text": "to have a local command bus and the local event bus and use event sourcing",
    "start": "1717940",
    "end": "1723250"
  },
  {
    "text": "and use all the defaults and that's essentially nothing to configure you can start used to spring boots",
    "start": "1723250",
    "end": "1729460"
  },
  {
    "text": "excellent starter and it will just work and all these examples will just run now",
    "start": "1729460",
    "end": "1734820"
  },
  {
    "start": "1734000",
    "end": "1764000"
  },
  {
    "text": "once you start to evolve if you or that journey into microservices you are going to change those things one of",
    "start": "1734820",
    "end": "1742340"
  },
  {
    "text": "the simplest changes you could do is go to an asynchronous command bus so the default thing that you would get without",
    "start": "1742340",
    "end": "1748490"
  },
  {
    "text": "configuring anything it's a simple command bus now if you would if you're using spring then you could define an",
    "start": "1748490",
    "end": "1755390"
  },
  {
    "text": "alternative Commandos being that would be the asynchronous command bus and that's a that's efficient to get all",
    "start": "1755390",
    "end": "1761330"
  },
  {
    "text": "your commands being processed asynchronously if you want to actually distribute it there are various options",
    "start": "1761330",
    "end": "1768340"
  },
  {
    "start": "1764000",
    "end": "1790000"
  },
  {
    "text": "one option is to use J groups what you need to do to enable that is to put the",
    "start": "1768340",
    "end": "1774140"
  },
  {
    "text": "right dependencies in your project sort of on the class path and then enable one configuration property and then it's a",
    "start": "1774140",
    "end": "1780020"
  },
  {
    "text": "distributed commanders so that's very easy to do so without making any changes to your application logic you can evolve",
    "start": "1780020",
    "end": "1788270"
  },
  {
    "text": "from a monolith into Marc services you can also use spring clouds that's a",
    "start": "1788270",
    "end": "1793970"
  },
  {
    "text": "little bit more complex to configure and I won't go into all the details it's the same concept create some additional beam",
    "start": "1793970",
    "end": "1799760"
  },
  {
    "text": "factory methods and in your own business",
    "start": "1799760",
    "end": "1805330"
  },
  {
    "text": "examples that I use are all in spring most excellent framework users use",
    "start": "1806110",
    "end": "1811130"
  },
  {
    "text": "spring but it's not tied to spring you can use it without as well so to",
    "start": "1811130",
    "end": "1819110"
  },
  {
    "start": "1816000",
    "end": "1864000"
  },
  {
    "text": "summarize we believe that this concept of secure s and potential event sourcing",
    "start": "1819110",
    "end": "1824420"
  },
  {
    "text": "and DDD are really important ingredients in to having these evolutionary",
    "start": "1824420",
    "end": "1830300"
  },
  {
    "text": "microservices and helps you to get started quickly but don't end up in the big ball of mud scenario",
    "start": "1830300",
    "end": "1837100"
  },
  {
    "text": "apart from that evolutionary aspect event sourcing has some really interesting benefits because of keeping",
    "start": "1837100",
    "end": "1843950"
  },
  {
    "text": "history exploring the value of data and compliance so that's that's a valuable",
    "start": "1843950",
    "end": "1849050"
  },
  {
    "text": "concept by itself an excellent framework is a really easy way to implement this in Java you don't have to use it all",
    "start": "1849050",
    "end": "1855920"
  },
  {
    "text": "mostly there is no magic there you could do everything that excellent framework does to yourself it's just at this waste",
    "start": "1855920",
    "end": "1861260"
  },
  {
    "text": "of your time because it's already there and it's and it's free if you're",
    "start": "1861260",
    "end": "1866330"
  },
  {
    "start": "1864000",
    "end": "1896000"
  },
  {
    "text": "interested and want to learn more about this we will have some QA of course we will Lane and I also be at the booth Medina",
    "start": "1866330",
    "end": "1873169"
  },
  {
    "text": "has a lot more excellent experience actually than me so please ask us anything if you want you can also",
    "start": "1873169",
    "end": "1880580"
  },
  {
    "text": "register for our mailing list and I will send you some updates occasionally it's very we would very much love for you to",
    "start": "1880580",
    "end": "1887120"
  },
  {
    "text": "do that we have about 50,000 downloads a month and we only know personally a",
    "start": "1887120",
    "end": "1892610"
  },
  {
    "text": "couple of hundreds excellent framework users so it's very important for us to get a lot more connections into the acts",
    "start": "1892610",
    "end": "1898880"
  },
  {
    "text": "of framer communities that's why it's so valuable for us thanks a lot",
    "start": "1898880",
    "end": "1904990"
  },
  {
    "text": "[Applause]",
    "start": "1904990",
    "end": "1909789"
  },
  {
    "text": "thank you very much I got a bunch of questions we have some time left so I'll",
    "start": "1910940",
    "end": "1916020"
  },
  {
    "start": "1911000",
    "end": "1977000"
  },
  {
    "text": "try to ask most of them and otherwise the boot is just outside this room so that helps can you elaborate on how to",
    "start": "1916020",
    "end": "1923100"
  },
  {
    "text": "guarantee consistency do you query the Reid model in the right middle do you use conversation in fluency stats how to",
    "start": "1923100",
    "end": "1929850"
  },
  {
    "text": "start simple but a lot of room for improvements okay so in this architecture consistency requirements",
    "start": "1929850",
    "end": "1936570"
  },
  {
    "text": "are usually relaxed so you have eventual consistency you don't have consistency at every point in time you can't get",
    "start": "1936570",
    "end": "1943470"
  },
  {
    "text": "that if you want to you could use synchronous event bus and command bus",
    "start": "1943470",
    "end": "1948480"
  },
  {
    "text": "and then you can actually process everything in a single database transaction and then you have we would have guaranteed consistency but a",
    "start": "1948480",
    "end": "1954419"
  },
  {
    "text": "problem with consistency over an entire system like this is that it doesn't scale well you cannot really move to",
    "start": "1954419",
    "end": "1960570"
  },
  {
    "text": "various micro-services and then do big database transactions on all of them so the the key strategy is to use eventual",
    "start": "1960570",
    "end": "1968700"
  },
  {
    "text": "consistency and simply accept the fact that your business model will not be consistent on every milliseconds that's",
    "start": "1968700",
    "end": "1975240"
  },
  {
    "text": "how it's usually dealt with what do you think of about having chatty commands in",
    "start": "1975240",
    "end": "1980909"
  },
  {
    "start": "1977000",
    "end": "2026000"
  },
  {
    "text": "the context of building REST API is returning new newly created resource for",
    "start": "1980909",
    "end": "1986070"
  },
  {
    "text": "example so the the thing that is directly supported by our command",
    "start": "1986070",
    "end": "1992010"
  },
  {
    "text": "handling is that it returns the ID of a newly created object but only the ID now",
    "start": "1992010",
    "end": "2000049"
  },
  {
    "text": "that may or may not be enough for your users if it's not enough the way that we recommend you would do it is to create a",
    "start": "2000049",
    "end": "2007610"
  },
  {
    "text": "synchronization layer on top of your actual commands and read models so you",
    "start": "2007610",
    "end": "2013730"
  },
  {
    "text": "would first create something and then read it back from the read side of it and then give that result back to your",
    "start": "2013730",
    "end": "2020780"
  },
  {
    "text": "users but still keep the same architecture pattern in the backend this",
    "start": "2020780",
    "end": "2027049"
  },
  {
    "start": "2026000",
    "end": "2087000"
  },
  {
    "text": "question might relate a bit to previous one how do you guarantee events delivery is there a way to reach synchronize the",
    "start": "2027049",
    "end": "2033289"
  },
  {
    "text": "model yeah so there are multiple ways of handling events one would be to just",
    "start": "2033289",
    "end": "2040039"
  },
  {
    "text": "listen to new events coming in and then acting directly upon them another thing",
    "start": "2040039",
    "end": "2045110"
  },
  {
    "text": "is what we call a tracking event processor which means that events would get stored in an event store which can",
    "start": "2045110",
    "end": "2052368"
  },
  {
    "text": "be a database or something else and then these tracking event processors would read from the database and keep track of",
    "start": "2052369",
    "end": "2059600"
  },
  {
    "text": "where they are hence the name so if they are if they",
    "start": "2059600",
    "end": "2065179"
  },
  {
    "text": "are not online for a while they could just read start reading again when they come online and continue on the last",
    "start": "2065179",
    "end": "2070730"
  },
  {
    "text": "place they have been and also if you create new read models you would need to read back all all the events to",
    "start": "2070730",
    "end": "2078050"
  },
  {
    "text": "initialize that read model and this can also be done with those tracking event processors so the basic way of guaranteeing that events don't get lost",
    "start": "2078050",
    "end": "2084800"
  },
  {
    "text": "is storing them essentially how do you deal with potential time delays between",
    "start": "2084800",
    "end": "2090888"
  },
  {
    "start": "2087000",
    "end": "2155000"
  },
  {
    "text": "a command No yeah yeah sorry how do you",
    "start": "2090889",
    "end": "2098000"
  },
  {
    "text": "deal with potential time delays between a command executing and being able to read the data from the query model so",
    "start": "2098000",
    "end": "2105230"
  },
  {
    "text": "first of all you should evaluate whether that's a real problem sometimes it is sometimes it's not in many cases it's",
    "start": "2105230",
    "end": "2112130"
  },
  {
    "text": "totally acceptable that will take a few milliseconds before your a read model gets updated if it's not there are a few",
    "start": "2112130",
    "end": "2118460"
  },
  {
    "text": "solutions that you could do one of them simplest one not very elegant is simply wait and the other thing that's needed",
    "start": "2118460",
    "end": "2125690"
  },
  {
    "text": "know where you have more stringent requirement here is that you include some kind of time stamp with your",
    "start": "2125690",
    "end": "2131510"
  },
  {
    "text": "commands and this time stamp would then be replicated by the regional law as well",
    "start": "2131510",
    "end": "2136730"
  },
  {
    "text": "so you can get a query to the read model saying I want to read as soon as you",
    "start": "2136730",
    "end": "2141980"
  },
  {
    "text": "have processed this time stamp that's one way of doing it it's kind of evolved",
    "start": "2141980",
    "end": "2147640"
  },
  {
    "text": "so that's not the default thing you should always do but it's it's a mechanism that will work and is",
    "start": "2147640",
    "end": "2153109"
  },
  {
    "text": "sometimes used wonders pretty relevant with GTR coming on for event sourcing",
    "start": "2153109",
    "end": "2160130"
  },
  {
    "start": "2155000",
    "end": "2252000"
  },
  {
    "text": "how do you handle the fact that you may need to delete some data for example for privacy reasons which may lead to",
    "start": "2160130",
    "end": "2165290"
  },
  {
    "text": "inconsistency so that we pay some for someone for that question or that we pay someone for that question",
    "start": "2165290",
    "end": "2172720"
  },
  {
    "text": "the funny thing is that what we are told in the beginning that we have a number of commercial software products on top",
    "start": "2173230",
    "end": "2179540"
  },
  {
    "text": "of the open source and one of those products is exactly designed to deal with this issue so the issue is that if",
    "start": "2179540",
    "end": "2187790"
  },
  {
    "text": "on a gdpr you have to erase data sometimes if people ask that and events are immutable so it's hard to erase data",
    "start": "2187790",
    "end": "2194690"
  },
  {
    "text": "from events now one way of dealing with that is exploiting the fact that events are",
    "start": "2194690",
    "end": "2200390"
  },
  {
    "text": "conceptually immutable but physically just data so you can actually change them which goes against the model what",
    "start": "2200390",
    "end": "2206720"
  },
  {
    "text": "will work there are some big disadvantages there it's kind of hard to do diminishes the value of your event",
    "start": "2206720",
    "end": "2213980"
  },
  {
    "text": "stream as an audit log for compliance reasons so one other thing you can do is use cryptographic erasure",
    "start": "2213980",
    "end": "2221000"
  },
  {
    "text": "so you could encrypt personal data fields and then store the key somewhere",
    "start": "2221000",
    "end": "2226250"
  },
  {
    "text": "else not an event stream done a separate key database and then you could throw away that key if you get a request to",
    "start": "2226250",
    "end": "2233600"
  },
  {
    "text": "erasure and that will make the personal data fields effectively erased because you only have them in an encrypted form",
    "start": "2233600",
    "end": "2239270"
  },
  {
    "text": "you cannot decrypt it anymore so that's what we either you could implement that yourself what we have",
    "start": "2239270",
    "end": "2244730"
  },
  {
    "text": "implemented our GDP our module on top of axon to enable the specific scenario can",
    "start": "2244730",
    "end": "2253310"
  },
  {
    "start": "2252000",
    "end": "2267000"
  },
  {
    "text": "you elaborate on potential downside experience using event surging it's a",
    "start": "2253310",
    "end": "2261920"
  },
  {
    "text": "good question what do you think about it I think it is applicable for a lot of",
    "start": "2261920",
    "end": "2269210"
  },
  {
    "start": "2267000",
    "end": "2313000"
  },
  {
    "text": "applications but I have to say yeah one downside might be that your database is",
    "start": "2269210",
    "end": "2274610"
  },
  {
    "text": "getting really big and that's what customers might experience of course there's not a commercial product an",
    "start": "2274610",
    "end": "2280550"
  },
  {
    "text": "event store but yeah it's really big sets of data but that might be but for the rest of its I think it's pretty",
    "start": "2280550",
    "end": "2286940"
  },
  {
    "text": "useful that's actually a pretty good point so if a DC fan stores they tend to grow and relational databases don't",
    "start": "2286940",
    "end": "2294680"
  },
  {
    "text": "really like I think tables with billions of records so as long as you are",
    "start": "2294680",
    "end": "2299830"
  },
  {
    "text": "producing thousand events per day or 10,000 per day that it's a total non-issue but some",
    "start": "2299830",
    "end": "2305619"
  },
  {
    "text": "of our users are producing ten thousand events per second and then these tables were very fast and there are some",
    "start": "2305619",
    "end": "2312160"
  },
  {
    "text": "managing issues there yeah and of course if you have applications that are that",
    "start": "2312160",
    "end": "2317230"
  },
  {
    "text": "simple that you don't need all the events or don't not gonna used events",
    "start": "2317230",
    "end": "2322420"
  },
  {
    "text": "yeah it should not apply event sorting it's not like perfect for every application but most applications would",
    "start": "2322420",
    "end": "2328300"
  },
  {
    "text": "fit is it possible to migrate existing",
    "start": "2328300",
    "end": "2335320"
  },
  {
    "start": "2333000",
    "end": "2380000"
  },
  {
    "text": "history is data not events tours to an events or to an event source in",
    "start": "2335320",
    "end": "2342550"
  },
  {
    "text": "retrospect if yes how so yes the only thing that you cannot do is is suddenly",
    "start": "2342550",
    "end": "2349720"
  },
  {
    "text": "discover history that you haven't persisted in the past of course it's not magic but you can migrate what you would",
    "start": "2349720",
    "end": "2356470"
  },
  {
    "text": "probably do is create a special set of events that represents the migration and",
    "start": "2356470",
    "end": "2363430"
  },
  {
    "text": "then replay your your old store into",
    "start": "2363430",
    "end": "2368710"
  },
  {
    "text": "these new events and then ensure that your event handlers can deal with normal business events as well as these",
    "start": "2368710",
    "end": "2374230"
  },
  {
    "text": "migration events that just works can you",
    "start": "2374230",
    "end": "2381220"
  },
  {
    "text": "compare accent to other seekers based frameworks for creating micro services like Largo honestly I can't I'm aware of",
    "start": "2381220",
    "end": "2390070"
  },
  {
    "text": "log I'm of course what but I don't know a lot about the details what if I talk",
    "start": "2390070",
    "end": "2397690"
  },
  {
    "text": "to people not using Exxon or not half used axon but but went to something else it's usually occur so people move to",
    "start": "2397690",
    "end": "2405609"
  },
  {
    "text": "Scala akka I think that's closely related to the logon stuff and that",
    "start": "2405609",
    "end": "2411640"
  },
  {
    "text": "that's honestly just a different abstraction so there is an actor abstraction we use commands queries",
    "start": "2411640",
    "end": "2417220"
  },
  {
    "text": "events and if you want to do seeker as on top of that that's just a lot more involved that's all I really can say",
    "start": "2417220",
    "end": "2424359"
  },
  {
    "text": "about it mr. built-in monitoring tool for the",
    "start": "2424359",
    "end": "2430540"
  },
  {
    "start": "2427000",
    "end": "2504000"
  },
  {
    "text": "message bus an axle an odorous not but",
    "start": "2430540",
    "end": "2435610"
  },
  {
    "text": "there will be that's again one of those commercial products that we're developing yeah it's a if you look at",
    "start": "2435610",
    "end": "2442840"
  },
  {
    "text": "the entire roadmap of what we're doing then of course we will continue to evolve the framework itself and one of",
    "start": "2442840",
    "end": "2448690"
  },
  {
    "text": "the things in there being a better support for queries great relocation obstruction any other things we're",
    "start": "2448690",
    "end": "2454810"
  },
  {
    "text": "developing is an event store for processing super large numbers of events and new routing platform so you can do",
    "start": "2454810",
    "end": "2461650"
  },
  {
    "text": "all the routing that's needed for commands and events and messages with",
    "start": "2461650",
    "end": "2466740"
  },
  {
    "text": "traditional technology like rabbit or Kafka or what everyone's and that works but to implement those more advanced",
    "start": "2466740",
    "end": "2474250"
  },
  {
    "text": "messaging routing use cases it kind of gets evil involved it's not that easy to",
    "start": "2474250",
    "end": "2479680"
  },
  {
    "text": "do so we're developing this new messaging platform which will allow you to do that very easily and also give you",
    "start": "2479680",
    "end": "2485500"
  },
  {
    "text": "better monitoring capabilities I think that's the questions from the app do anyone else has a question as we still",
    "start": "2485500",
    "end": "2492580"
  },
  {
    "text": "have time thank you very much thank you",
    "start": "2492580",
    "end": "2499510"
  },
  {
    "text": "[Applause]",
    "start": "2499510",
    "end": "2506749"
  }
]