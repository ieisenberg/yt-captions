[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "[Music] all right so hello everybody I'm py so I",
    "start": "6990",
    "end": "12120"
  },
  {
    "text": "work at Square on the um API team and uh one one of my pet projects is uh called",
    "start": "12120",
    "end": "18000"
  },
  {
    "text": "Le Canary So today we're going to talk about that um in the past I've talked about how Le Canary is built uh today",
    "start": "18000",
    "end": "24840"
  },
  {
    "text": "we're not going to do that we're actually going to start looking into um what we can do with all of this",
    "start": "24840",
    "end": "31240"
  },
  {
    "text": "information that L Canary is doing and how we can actually fix memory leaks but first as with every talk uh um",
    "start": "31240",
    "end": "39879"
  },
  {
    "text": "here uh I encourage you to engage and ask questions uh anything uh even tricky",
    "start": "39879",
    "end": "46480"
  },
  {
    "text": "questions happy to take those um so let's start with sort of a story uh to",
    "start": "46480",
    "end": "53520"
  },
  {
    "start": "50000",
    "end": "315000"
  },
  {
    "text": "kind of set the frame so let's say we have a a fictional engineer and let's call him Steve he's a bit of an artist",
    "start": "53520",
    "end": "60719"
  },
  {
    "text": "and he wants to make a statement about how mobile apps uh they kind of take the they steal the focus away in our life",
    "start": "60719",
    "end": "67200"
  },
  {
    "text": "you know we're always like looking at our phone so he decided to make an app and to have the user steal the focus",
    "start": "67200",
    "end": "73240"
  },
  {
    "text": "from the app kind of a v you know Revenge kind of approach and so uh the app just comes to life when it's focused",
    "start": "73240",
    "end": "79560"
  },
  {
    "text": "and then kind of dies down when it's not and so decided to uh decided to use",
    "start": "79560",
    "end": "84720"
  },
  {
    "text": "multi- window is that and so to like it's an app that it's the app is just the top part the bottom part is ever",
    "start": "84720",
    "end": "90920"
  },
  {
    "text": "note and it's just blue and then when uh when you focus outside becomes gray and",
    "start": "90920",
    "end": "96840"
  },
  {
    "text": "then it becomes blue it's like the most amazing app ever um so he releases that",
    "start": "96840",
    "end": "102759"
  },
  {
    "text": "on the Play Store and obviously uh he gets a lot of downloads right uh and like so many downloads U millions of",
    "start": "102759",
    "end": "109680"
  },
  {
    "text": "downloads great success and then it starts getting uh one star reviews because of crashes people complain about",
    "start": "109680",
    "end": "116320"
  },
  {
    "text": "crashes so he adds um a crash reporter into his app and checks out what's going",
    "start": "116320",
    "end": "121640"
  },
  {
    "text": "on and it turns out uh that he gets a bunch of out of memory errors wow so you",
    "start": "121640",
    "end": "128959"
  },
  {
    "text": "got another memory error what what do you do what's the solution to that well they kind of start popping up",
    "start": "128959",
    "end": "135319"
  },
  {
    "text": "in different places so he realizes what about just marking it at fix and you know let's just forget about it and uh",
    "start": "135319",
    "end": "141239"
  },
  {
    "text": "move on with our life and maybe it's not going to happen again uh the problem is it keeps happening and over and over and",
    "start": "141239",
    "end": "148760"
  },
  {
    "text": "over again with different structure traces so then he hears about a library called Le Canary and",
    "start": "148760",
    "end": "155040"
  },
  {
    "text": "how yeah and how he supposed to make everything easy and to help you fix those things so he had you know",
    "start": "155040",
    "end": "162519"
  },
  {
    "text": "dependencies uh to use the library and then update his application class so",
    "start": "162519",
    "end": "168200"
  },
  {
    "text": "that um he just you know it's two lines of code it's installed and then he uses his app again and now things are",
    "start": "168200",
    "end": "176200"
  },
  {
    "text": "starting to happen you know like you use the app you try to focus I guess I need start the video and uh and yeah we're",
    "start": "176200",
    "end": "183760"
  },
  {
    "text": "going to wait a little bit you know it takes a little bit of like 5 Seconds probably and then dumping memory the app",
    "start": "183760",
    "end": "189519"
  },
  {
    "text": "will freeze bro you probably seen that if you've used ler in the past so what's",
    "start": "189519",
    "end": "194640"
  },
  {
    "text": "going on L Canary is acting now the next thing you get is a notification um and when you tap it on",
    "start": "194640",
    "end": "202120"
  },
  {
    "text": "the notification you get you know this uh pretty thing that might be a little",
    "start": "202120",
    "end": "207400"
  },
  {
    "text": "bit scary like what does it mean what are we looking at here um so let's pretend I'm Steve and I'm",
    "start": "207400",
    "end": "214200"
  },
  {
    "text": "looking at this I'm like I have no idea what's going on but I see this view here",
    "start": "214200",
    "end": "219959"
  },
  {
    "text": "it sounds like this is my code okay I'm going to just look into that this Neo realism view which you know it's",
    "start": "219959",
    "end": "227760"
  },
  {
    "text": "actually the view that renters blue is the most important view in the in the app uh and the way it kind of focuses in",
    "start": "227760",
    "end": "236239"
  },
  {
    "text": "and out it's just by registering an activity life cycle call back and changing the alpha of the view based on",
    "start": "236239",
    "end": "243120"
  },
  {
    "text": "if the activi is resumed or posted now if you're a bit of an Android expert you probably noticed that we're registering",
    "start": "243120",
    "end": "249959"
  },
  {
    "text": "an activity life cycle call back and what does that mean we're getting the application class which is Singleton and",
    "start": "249959",
    "end": "255079"
  },
  {
    "text": "we're adding a listener to it so that every time an activity is resumed and posed we you know we learn about it we",
    "start": "255079",
    "end": "261359"
  },
  {
    "text": "get we get a call back the problem is we're never unregistering that call back",
    "start": "261359",
    "end": "267240"
  },
  {
    "text": "so our view instance is is leaking right so what's the fix well fix sounds",
    "start": "267240",
    "end": "272600"
  },
  {
    "text": "obvious you know when the view is detached just remove the coreback from the application so we fixed the problem but",
    "start": "272600",
    "end": "279759"
  },
  {
    "text": "did we really fix the problem what did we do here I think what we did here what Steve did and what we all kind of do",
    "start": "279759",
    "end": "286039"
  },
  {
    "text": "when dealing with this is that um we kind of try to guess what's going on and",
    "start": "286039",
    "end": "291960"
  },
  {
    "text": "we see a bunch of classes that look familiar and we jump into them and we look at them we're like oh I think",
    "start": "291960",
    "end": "297440"
  },
  {
    "text": "there's a leak here so this is the leak and we fix the leak right and sometimes",
    "start": "297440",
    "end": "303320"
  },
  {
    "text": "that works but when it doesn't work you're by yourself and you're like I",
    "start": "303320",
    "end": "308840"
  },
  {
    "text": "don't know what to do this is probably just an Android leak and then you forget about it and move on with your life so",
    "start": "308840",
    "end": "315360"
  },
  {
    "text": "intution helps but um and that's what we're using here the problem with intution is that it makes you take",
    "start": "315360",
    "end": "320520"
  },
  {
    "text": "shortcut that's the whole point of it um but you want you don't want to take logical shortcuts and you need to kind",
    "start": "320520",
    "end": "326840"
  },
  {
    "text": "of step back go back to the first principles some sort of scientific method um because you know we're",
    "start": "326840",
    "end": "333600"
  },
  {
    "text": "Engineers it's kind of what we do um so let's come back to school uh and talk about class so we",
    "start": "333600",
    "end": "342479"
  },
  {
    "text": "have a class class a um and then we have class B wow and there's uh we're going",
    "start": "342479",
    "end": "349000"
  },
  {
    "text": "to class C and we're going to create an instance of Class A all right that's pretty easy so what happens when I call",
    "start": "349000",
    "end": "355400"
  },
  {
    "text": "this method triumverate like at the end of it um well if I call this method at the end of",
    "start": "355400",
    "end": "362000"
  },
  {
    "text": "it a is garbage collected because obviously there's nothing keeping a reference to a so it's useless and it's",
    "start": "362000",
    "end": "368440"
  },
  {
    "text": "going to be garbage collected um or let's say garbage collectible uh it will",
    "start": "368440",
    "end": "373759"
  },
  {
    "text": "be garbage collected in the future now let's come back to a uh let's say",
    "start": "373759",
    "end": "379400"
  },
  {
    "text": "that we also create an instance B and an instance C all right not very interesting so far but then we add a b",
    "start": "379400",
    "end": "386199"
  },
  {
    "text": "field on a and you know C field on B and an a field on C and still nothing still",
    "start": "386199",
    "end": "393280"
  },
  {
    "text": "the same right but now we're going to start setting references so we're going to change the code so that a b",
    "start": "393280",
    "end": "398960"
  },
  {
    "text": "references B same thing for C and same thing for a so we have these three objects and they reference each other",
    "start": "398960",
    "end": "405960"
  },
  {
    "text": "now what happens at the end of this method well again um the three objects",
    "start": "405960",
    "end": "411840"
  },
  {
    "text": "are garbage collected right they all have incoming references to them and they all reference other things but",
    "start": "411840",
    "end": "418240"
  },
  {
    "text": "they're just connected together so when nothing else is retaining them nothing else is retaining them they just get",
    "start": "418240",
    "end": "424039"
  },
  {
    "text": "cabbage collected well that's cool now let's um add a static field right we're going to",
    "start": "424039",
    "end": "431080"
  },
  {
    "text": "make a static field single ton and we're going to reference a we're going to pass the the a reference to the single T now",
    "start": "431080",
    "end": "438280"
  },
  {
    "text": "what's going on if I try to if when I leave the method um nothing gets garbage collected because the entire group of",
    "start": "438280",
    "end": "444440"
  },
  {
    "text": "object is held in memory um so the the static a Singleton",
    "start": "444440",
    "end": "450360"
  },
  {
    "text": "here it's called a GC rout that's what I've shown as the yellow box it's something that's never going to be",
    "start": "450360",
    "end": "455639"
  },
  {
    "text": "garbage collected uh it's a reference that is never cleared um so you could think of static Fields you can also",
    "start": "455639",
    "end": "462400"
  },
  {
    "text": "think of local variables on threads or uh references held by native code like",
    "start": "462400",
    "end": "468199"
  },
  {
    "text": "binder for example um so that's interesting but",
    "start": "468199",
    "end": "474440"
  },
  {
    "text": "let's like zoom out and think about the Java memory if you think about it your entire memory is pretty much a bunch of",
    "start": "474440",
    "end": "481960"
  },
  {
    "text": "GC roots that have references to objects that have references to other objects um",
    "start": "481960",
    "end": "487720"
  },
  {
    "text": "it is a directed graph you can think of the Java memory as a directed graph and",
    "start": "487720",
    "end": "493159"
  },
  {
    "text": "so we can apply some graph Theory to it like some very tiny things so we can",
    "start": "493159",
    "end": "498280"
  },
  {
    "text": "look at the the block of objects over here they're not connected to anything they're kind of on their own they're",
    "start": "498280",
    "end": "503919"
  },
  {
    "text": "Islands so they can be garbage collected right and they're gone um so an object",
    "start": "503919",
    "end": "510800"
  },
  {
    "text": "can be garbage collected it if it's not connected in some way uh to a GC route",
    "start": "510800",
    "end": "516518"
  },
  {
    "text": "and that's very important because this is what creates uh memory leaks so let's say that we the the red thing here is an",
    "start": "516519",
    "end": "523240"
  },
  {
    "text": "activity and UND destroy has been called by Android on that activity so we know that it's useless at that point and that",
    "start": "523240",
    "end": "529560"
  },
  {
    "text": "nothing really needs a to use it and it shouldn't be in use but it's still you",
    "start": "529560",
    "end": "534920"
  },
  {
    "text": "know holding on to a lot of memory and we want it to be garbage collected um and so so this activity um",
    "start": "534920",
    "end": "542160"
  },
  {
    "text": "is held in memory because there's a pass there's a bunch of references that eventually reference the activity and",
    "start": "542160",
    "end": "548880"
  },
  {
    "text": "that's why it's kept in memory right um so the activity is leaking so if we",
    "start": "548880",
    "end": "555000"
  },
  {
    "text": "wanted to figure out why it's leaking we have to find the path from those yellow boxes to the activity it's called a path",
    "start": "555000",
    "end": "561880"
  },
  {
    "text": "to GC Roots right so that's what it looks like in that example um there's in",
    "start": "561880",
    "end": "568600"
  },
  {
    "text": "in in the Java memory usually you end up with an Infinity of pass because there are so many objects that are connected together so you could look at like",
    "start": "568600",
    "end": "575240"
  },
  {
    "text": "10,000 pass that's not very helpful what's more helpful is um if there's",
    "start": "575240",
    "end": "581040"
  },
  {
    "text": "let's say there's only one leak one bad reference um that's causing the activity",
    "start": "581040",
    "end": "586240"
  },
  {
    "text": "to leak then there is an Infinity of pass but there is one that is the shortest pass that is guaranteed to go",
    "start": "586240",
    "end": "592680"
  },
  {
    "text": "through that bad reference so instead of looking at 10,000 uh passs we can just look at one and we're going to look at",
    "start": "592680",
    "end": "599160"
  },
  {
    "text": "the shortest because that's less information to deal with so um this is",
    "start": "599160",
    "end": "605240"
  },
  {
    "text": "the shortest pass in that case and then that's what actually what linary gives us the display that we saw this is",
    "start": "605240",
    "end": "612000"
  },
  {
    "text": "exactly what it's showing uh in a kind of a textual way now this is interesting",
    "start": "612000",
    "end": "617480"
  },
  {
    "text": "but this is where like the entire trick uh starts to apply okay we have this",
    "start": "617480",
    "end": "623000"
  },
  {
    "text": "pass what do we do now what we do is we identify the objects on the path that",
    "start": "623000",
    "end": "628600"
  },
  {
    "text": "are supposed to still be in me in memory and the objects that are supposed to be gone and it's not just going to be one",
    "start": "628600",
    "end": "634399"
  },
  {
    "text": "for example um maybe the top green one is the application class it should stay",
    "start": "634399",
    "end": "639639"
  },
  {
    "text": "around forever because it's a singl ton maybe the first red one is an A View class and the second red one is the",
    "start": "639639",
    "end": "646240"
  },
  {
    "text": "activity and the view is detached it should be gone so if we're able to kind of identify the ones that should be in",
    "start": "646240",
    "end": "652760"
  },
  {
    "text": "memory and the ones that should not be in memory uh then we can sort of split",
    "start": "652760",
    "end": "658480"
  },
  {
    "text": "our uh the path in sort of two areas um",
    "start": "658480",
    "end": "663920"
  },
  {
    "text": "and uh we can identify the the the the connection that's creating the problem right",
    "start": "663920",
    "end": "671120"
  },
  {
    "text": "so what's going to happen is in for every single leak the top part is always going to be um objects that should be in",
    "start": "671120",
    "end": "678600"
  },
  {
    "text": "memory and the bottom part is always going to be objects that should not be in memory and the key part for you is to identify each of the two zones it's not",
    "start": "678600",
    "end": "685720"
  },
  {
    "text": "going to inter leave so the top is always green the bottom is always red and the the place where it changes is",
    "start": "685720",
    "end": "692000"
  },
  {
    "text": "where there's a bad reference that you need to kill and if you kill that bad reference then the object is not",
    "start": "692000",
    "end": "698000"
  },
  {
    "text": "connected to a GC route anymore and the whole thing can be garbage collected all right so that was a little",
    "start": "698000",
    "end": "705360"
  },
  {
    "start": "705000",
    "end": "965000"
  },
  {
    "text": "bit of theory and now we're going to look at a couple of examples um the idea",
    "start": "705360",
    "end": "710760"
  },
  {
    "text": "is I think um it's it's nice in the abstract we need to kind of practice to get the idea of how to fix these things",
    "start": "710760",
    "end": "718000"
  },
  {
    "text": "um so so let's look back on the first example right we had this",
    "start": "718000",
    "end": "723240"
  },
  {
    "text": "um the canary uh like this very simple app so the first thing is you you start",
    "start": "723240",
    "end": "729639"
  },
  {
    "text": "looking at that and you might not be familiar with uh this guy here there's like a dollar one if I'm if I'm Steve I",
    "start": "729639",
    "end": "735959"
  },
  {
    "text": "just started writing Android apps and I'm like oh what is this class that's named dollar one and then there's a",
    "start": "735959",
    "end": "741519"
  },
  {
    "text": "field called this dollar zero what is this um so let's get on to that uh so we",
    "start": "741519",
    "end": "750519"
  },
  {
    "text": "saw that code and we saw that there's a life cycle call back it's actually an anonymous class right uh and that's what",
    "start": "750519",
    "end": "756279"
  },
  {
    "text": "what it is so in in Java um this might be obvious to a lot of you um but um",
    "start": "756279",
    "end": "762480"
  },
  {
    "text": "Java doesn't actually support Anonymous classes it's a lie it's all a lie you write an anonymous class and then what",
    "start": "762480",
    "end": "769000"
  },
  {
    "text": "it does it compiles it to a real class and it names it dollar some number and",
    "start": "769000",
    "end": "774160"
  },
  {
    "text": "the number is based on where it's defined so the first one is dollar one the second one is dollar two in that class",
    "start": "774160",
    "end": "779680"
  },
  {
    "text": "and then the name of the field is going to be like this dollar zero so if we come back here when we",
    "start": "779680",
    "end": "785480"
  },
  {
    "text": "look at this leak Trace now we have a better understanding of what's going on we can see that at the top there's a class called activity thread it has a",
    "start": "785480",
    "end": "791800"
  },
  {
    "text": "field called called s current activity thread and that field points to an instance of activity thread which has a",
    "start": "791800",
    "end": "798680"
  },
  {
    "text": "field called M initial application which itself points to an instance of the application which has a field called",
    "start": "798680",
    "end": "804560"
  },
  {
    "text": "life cycle callbacks etc etc etc it's kind of how you read these things right",
    "start": "804560",
    "end": "811120"
  },
  {
    "text": "view should be gone already but let's check that out how do we figure that out and so lary has a thing called Share",
    "start": "869160",
    "end": "875800"
  },
  {
    "text": "info and it's going to basically share a bunch of text that gives you more detail it's kind of a textual repres",
    "start": "875800",
    "end": "881680"
  },
  {
    "text": "representation of this it looks like that um and you can kind of see the same",
    "start": "881680",
    "end": "886800"
  },
  {
    "text": "like references blah blah blah the same view but at the bottom there's a detail section and the detail section it might",
    "start": "886800",
    "end": "893959"
  },
  {
    "text": "sounds like it's kind of crazy it's just a ton of stuff um but it's all the values of the static fields and the",
    "start": "893959",
    "end": "899079"
  },
  {
    "text": "fields in the in the objects on the chain and so if we slide down to the view which have here and we start",
    "start": "899079",
    "end": "905040"
  },
  {
    "text": "looking at fields we can see that there's a field called M attach info which is uh n so what is M attach info",
    "start": "905040",
    "end": "911920"
  },
  {
    "text": "well if we open the view class we can see that the method called is attached to window actually checks for M attached",
    "start": "911920",
    "end": "918639"
  },
  {
    "text": "info so being null so when when M attach info is null the the view is not attached to the window and if the view",
    "start": "918639",
    "end": "925160"
  },
  {
    "text": "is not attached to the window then it doesn't really have a business being around it should probably be garbage collected because who needs a view",
    "start": "925160",
    "end": "931759"
  },
  {
    "text": "that's not attached to the window right that's kind of our hint that this view should be garbage collected so we know",
    "start": "931759",
    "end": "938279"
  },
  {
    "text": "that we can like go up and include the view and then the call back being kind",
    "start": "938279",
    "end": "943680"
  },
  {
    "text": "of tied to the view should also be gone so we're pretty much uh back to",
    "start": "943680",
    "end": "949920"
  },
  {
    "text": "where we were I added the last the list basically so M activity like cycle callbacks it's an array list and then",
    "start": "949920",
    "end": "956800"
  },
  {
    "text": "you can see that it goes down and the array list is implemented by an array and then the first element of the array points to the complex right okay that's",
    "start": "956800",
    "end": "965519"
  },
  {
    "start": "965000",
    "end": "1153000"
  },
  {
    "text": "good so we saw the first principles let get let's get into more um interesting leaks um so when you install L Canary",
    "start": "965519",
    "end": "973319"
  },
  {
    "text": "and and like you pass that in you know you make an application and you have everybody in in your company use the dev",
    "start": "973319",
    "end": "979160"
  },
  {
    "text": "application with Le canary on what happens when um when Le Canary is trigger then notification shows up so",
    "start": "979160",
    "end": "987240"
  },
  {
    "text": "you think you know people will sit down bring it to you fix it well no what actually happens is that uh you swipe",
    "start": "987240",
    "end": "994920"
  },
  {
    "text": "the notification away and you just do something else and you pretend like you didn't see that there was a leak because",
    "start": "994920",
    "end": "1000079"
  },
  {
    "text": "it's kind of annoying and you don't want to like change what you are doing so we had this problem and we thought of",
    "start": "1000079",
    "end": "1007120"
  },
  {
    "text": "a way to fix it which is to automate the the leak reporting so that they would be uploaded in background so that was great",
    "start": "1007120",
    "end": "1013199"
  },
  {
    "text": "great idea but nobody wants to write a back end for that I certainly didn't so",
    "start": "1013199",
    "end": "1018759"
  },
  {
    "text": "what we did is we decided to upload to a crash reporter and to fake a crash uh so",
    "start": "1018759",
    "end": "1024839"
  },
  {
    "text": "we basically you can fake a crash by making a fake stack trace this is how you make a a fake exception and then you",
    "start": "1024839",
    "end": "1030880"
  },
  {
    "text": "can then pass to a a fake uh stack Trace to a fake to a crash reporter and then",
    "start": "1030880",
    "end": "1036918"
  },
  {
    "text": "we have you know we use bunag and we had a bunag leak uploader that converted the leak Trace into a fake St trace and then",
    "start": "1036919",
    "end": "1043520"
  },
  {
    "text": "it's uploaded to back stag which then gives us this this looks like a stack Trace but it's not right you can see cuz",
    "start": "1043520",
    "end": "1050840"
  },
  {
    "text": "like uh there is uh at Java link object and then the method name is like zero",
    "start": "1050840",
    "end": "1057600"
  },
  {
    "text": "which is weird or 97 um but there's another tab where we",
    "start": "1057600",
    "end": "1063360"
  },
  {
    "text": "actually added the the kind of meaningful information so the the nice part part here is that um if you get",
    "start": "1063360",
    "end": "1069840"
  },
  {
    "text": "five times the same leak it's going to lead to the same stack trace and then bunag or crash liex is going to group it",
    "start": "1069840",
    "end": "1076120"
  },
  {
    "text": "together so you get grouping and Counting and you know the leaks that happen the most often uh so that's",
    "start": "1076120",
    "end": "1081640"
  },
  {
    "text": "really nice but then there's another tab um give me a second sorry uh there's another tab",
    "start": "1081640",
    "end": "1088960"
  },
  {
    "text": "which provides like the same useful information so let's let's look into that one what's that about um and you",
    "start": "1088960",
    "end": "1095840"
  },
  {
    "text": "know if you do a quick scan you could say oh there's support library in there I don't want to know about that let's",
    "start": "1095840",
    "end": "1101200"
  },
  {
    "text": "just walk away but no we we don't want any leak so we're going to look into every leak um so let's start with the",
    "start": "1101200",
    "end": "1109120"
  },
  {
    "text": "top uh we can see that uh there's a Looper at the top and it's where and the",
    "start": "1109120",
    "end": "1114360"
  },
  {
    "text": "the field that's holding onto it is called main uh main Looper so you're pretty sure that this is the Looper of",
    "start": "1114360",
    "end": "1120559"
  },
  {
    "text": "the main thread and the main thread is around forever the Looper of the main thread is around forever so you know",
    "start": "1120559",
    "end": "1125960"
  },
  {
    "text": "that's good and then at the bottom we can see that there's the leaking activity all right that's easy this one",
    "start": "1125960",
    "end": "1131240"
  },
  {
    "text": "should be dead then we're just going to poke around so let's look at the middle one",
    "start": "1131240",
    "end": "1136400"
  },
  {
    "text": "there's a class called rank q and it has a field called ma actions and what is this like who who's ever looked at the",
    "start": "1136400",
    "end": "1143039"
  },
  {
    "text": "code of run Q before in the room no one literally no one that's good but Android",
    "start": "1143039",
    "end": "1150080"
  },
  {
    "text": "is open source so we're going to do that right now right so we have the view root imple which is actually the the the the",
    "start": "1150080",
    "end": "1157159"
  },
  {
    "text": "view that is at at the roots of your VI hierarchy um it's not exposed by the",
    "start": "1157159",
    "end": "1162320"
  },
  {
    "text": "Android SDK but that's how it is in in the code and run Q is an in class of that and run has a method called um post",
    "start": "1162320",
    "end": "1170880"
  },
  {
    "text": "delayed which um basically lets you um pass it a runable and it's going to wrap",
    "start": "1170880",
    "end": "1177080"
  },
  {
    "text": "it in a Handler action and then uh it's going to just add this action to ma actions which is a",
    "start": "1177080",
    "end": "1184000"
  },
  {
    "text": "list of actions right that's easy and then there's another method that's called post and it just gos post delay",
    "start": "1184000",
    "end": "1191000"
  },
  {
    "text": "with a delay of zero right so so far so good",
    "start": "1191000",
    "end": "1197720"
  },
  {
    "text": "so what it looks like is that when you call Post you're actually enqing a runnable into ma actions and when is it",
    "start": "1197720",
    "end": "1204039"
  },
  {
    "text": "ined let's read the Java do Java do says the work is executed during the next call to perform traversals on the thread",
    "start": "1204039",
    "end": "1210919"
  },
  {
    "text": "so this is the view rout this is the one that handles the traversals that are going going to measure your",
    "start": "1210919",
    "end": "1216080"
  },
  {
    "text": "layout and it's basically saying I'm keeping things here until I get the next",
    "start": "1216080",
    "end": "1221280"
  },
  {
    "text": "traversal um and then who's calling that it says the Run que is used to enq Penning work from views when no Handler",
    "start": "1221280",
    "end": "1227840"
  },
  {
    "text": "is attached so this only happens when you're in between two traversals and",
    "start": "1227840",
    "end": "1233320"
  },
  {
    "text": "there is no view hierarchy around to execute the work um so let's verify that",
    "start": "1233320",
    "end": "1239960"
  },
  {
    "text": "if you look at the view class and we open post on um post on animation and post uh we can see that uh the first",
    "start": "1239960",
    "end": "1247559"
  },
  {
    "text": "thing it does is get the M attached info which we saw can be n if the view is not attached and you know if it's not null",
    "start": "1247559",
    "end": "1254559"
  },
  {
    "text": "post forhe into the choreographer or the Handler but if it's null get the Run",
    "start": "1254559",
    "end": "1259720"
  },
  {
    "text": "queue and post to it all right so that seems to confirm what the Java de was saying so the idea is uh at that point",
    "start": "1259720",
    "end": "1268320"
  },
  {
    "text": "we don't have a view uh we don't have a hierarchy the view is detached it's not attached to window but we're posting to",
    "start": "1268320",
    "end": "1273840"
  },
  {
    "text": "that queue and next time we get a new view hierarchy we're going to execute those things and where where is uh get",
    "start": "1273840",
    "end": "1280559"
  },
  {
    "text": "run Q well it's a static method uh where's where's the Run Q coming from so",
    "start": "1280559",
    "end": "1285640"
  },
  {
    "text": "it's coming from this get run Q method and what it is it's stored in a thread local so you you you know a thread local",
    "start": "1285640",
    "end": "1292720"
  },
  {
    "text": "is um it's a variable for which each thread has its own value but for the",
    "start": "1292720",
    "end": "1297760"
  },
  {
    "text": "purpose of this you can just think of it as as a static thread that's pointing to the r q except every thread sorry as a",
    "start": "1297760",
    "end": "1303400"
  },
  {
    "text": "static field that's pointing to run q and then every thread gets its own so then if we look at the Run Q",
    "start": "1303400",
    "end": "1309960"
  },
  {
    "text": "method then it's basically um if the Q is not null return on the Q otherwise",
    "start": "1309960",
    "end": "1315039"
  },
  {
    "text": "create one store it and return it right that's pretty easy so that brings us to to that where we can see uh we can start",
    "start": "1315039",
    "end": "1321600"
  },
  {
    "text": "to understand the things that are below like right here uh that thread. local",
    "start": "1321600",
    "end": "1327360"
  },
  {
    "text": "values uh it's not the Run Q field that we are saying but that's basically how thread locals are stored on on a thread",
    "start": "1327360",
    "end": "1333640"
  },
  {
    "text": "on Android so the rank CU you know it's the static field doesn't sound like",
    "start": "1333640",
    "end": "1339360"
  },
  {
    "text": "there's anything wrong there so it just holds on to a list of actions so the Run que and its list of actions should",
    "start": "1339360",
    "end": "1345559"
  },
  {
    "text": "actually stick in memory so if you just go down there yeah there's like like the Run Q actions the list itself not the",
    "start": "1345559",
    "end": "1352200"
  },
  {
    "text": "elements in the list but the full list itself should be in memory so that's kind of um we now have",
    "start": "1352200",
    "end": "1359679"
  },
  {
    "text": "less things in there so let's look at this weird class name app compat delegate impul p23 what is that well",
    "start": "1359679",
    "end": "1368200"
  },
  {
    "text": "it's an instance of a compat delegate so it turns out that um if you",
    "start": "1368200",
    "end": "1373600"
  },
  {
    "text": "use the super library on Android you have to extend app compat activity and what app compat activity does is it",
    "start": "1373600",
    "end": "1380600"
  },
  {
    "text": "builds a delegate and it delegates all of the calls to that delegate and then you have different implementations of",
    "start": "1380600",
    "end": "1385760"
  },
  {
    "text": "that delegate based on the Android version um and so because it creates an",
    "start": "1385760",
    "end": "1391320"
  },
  {
    "text": "instance right there when the activity is destroyed the delegate should be",
    "start": "1391320",
    "end": "1396440"
  },
  {
    "text": "destroyed as well right there's one instance Pro activity so we can come back here and now we know that the",
    "start": "1396440",
    "end": "1402240"
  },
  {
    "text": "delegate should be gone right so that's the reasoning that you keep applying when you look at the leak Trace so let's",
    "start": "1402240",
    "end": "1408000"
  },
  {
    "text": "look at the one above uh so v9 do one so it's an anonymous class so I talked",
    "start": "1408000",
    "end": "1414559"
  },
  {
    "text": "about how there's a bunch of implementation and v33 actually extends v9 eventually um so let's open the v9",
    "start": "1414559",
    "end": "1422159"
  },
  {
    "text": "class and the dollar one class is this runnable uh M invalidate panel menu",
    "start": "1422159",
    "end": "1428240"
  },
  {
    "text": "runnable uh and then it gets posted U on the on a view uh with post on animation",
    "start": "1428240",
    "end": "1435159"
  },
  {
    "text": "right and so if that view was not attached we already know what",
    "start": "1435159",
    "end": "1441200"
  },
  {
    "text": "happens you post an animation the view is not attached it gets put into the Run queue and it will be dced and executed",
    "start": "1441200",
    "end": "1448120"
  },
  {
    "text": "the next time uh that the um the next time that there is a view hierarchy but",
    "start": "1448120",
    "end": "1454840"
  },
  {
    "text": "what if your activity is destroyed and the user goes away and there's not an activity for another 30 minutes then the",
    "start": "1454840",
    "end": "1463159"
  },
  {
    "text": "runable is still in the queue for another 30 minutes and it leaks the entire view hierarchy",
    "start": "1463159",
    "end": "1469480"
  },
  {
    "text": "and so you're basically keeping the entire view hierarchy and all of its bit map for another 30 minutes until you get",
    "start": "1469480",
    "end": "1475640"
  },
  {
    "text": "some other activity so it is a leak uh and so the way you could fix that I",
    "start": "1475640",
    "end": "1480880"
  },
  {
    "text": "don't know that this is the right way but one ways could be well when the delegates know that the activity is destroyed just remove the call back from",
    "start": "1480880",
    "end": "1489000"
  },
  {
    "text": "uh from the Run que basically so this was an interesting uh",
    "start": "1489000",
    "end": "1496360"
  },
  {
    "text": "an interesting uh sort of um leak we actually filed an issue this is a this is a real leak that we found uh",
    "start": "1496360",
    "end": "1503279"
  },
  {
    "text": "last week so I haven't seen any response from the the support Library team but",
    "start": "1503279",
    "end": "1509200"
  },
  {
    "text": "they're looking into it so like we need to give them time eventually it's going to be fixed it's not like one of the biggest",
    "start": "1509200",
    "end": "1516600"
  },
  {
    "text": "leaks but I encourage you the reason I'm showing that is because I want to encourage you to do the same next time",
    "start": "1517120",
    "end": "1522840"
  },
  {
    "text": "you find a leak Android is open source you can go and even if it's not in your code which the way it's still kind of",
    "start": "1522840",
    "end": "1529240"
  },
  {
    "text": "likely to be in your code like most of the time it's in our code not in the support Library um but if it's not in your code don't just drop it on the",
    "start": "1529240",
    "end": "1535919"
  },
  {
    "text": "floor look into it look into the code try to figure out what's going on and then report uh a bug on the AOSP issue",
    "start": "1535919",
    "end": "1543960"
  },
  {
    "text": "tracker because if we all do that then we make we make Android better and then everybody profits from",
    "start": "1543960",
    "end": "1549919"
  },
  {
    "text": "it all right so let's look at one that's maybe",
    "start": "1549919",
    "end": "1555440"
  },
  {
    "text": "a little bit harder um it was harder for me I was really confused by it originally so this is the leak the new",
    "start": "1555440",
    "end": "1563200"
  },
  {
    "text": "leak race today um I checked for to make sure that I wasn't",
    "start": "1563200",
    "end": "1569799"
  },
  {
    "text": "like showing any bad names or any sensitive information that shouldn't be in there but I think it's good um but uh",
    "start": "1569799",
    "end": "1576840"
  },
  {
    "text": "this is real Square code so um so let's let's uh let's do the same like so I",
    "start": "1576840",
    "end": "1583159"
  },
  {
    "text": "said don't choose intuition uh or rather don't choose intuition to make shortcut logical",
    "start": "1583159",
    "end": "1589080"
  },
  {
    "text": "shortcuts however intuition helps here to know to find one good thing to look",
    "start": "1589080",
    "end": "1595279"
  },
  {
    "text": "at right like there's a a lot of references or a lot of objects here and I kind of don't want to look at every",
    "start": "1595279",
    "end": "1601600"
  },
  {
    "text": "one of them because if I can find one in the middle and I know it's good or I know it's bad that I can bring down the",
    "start": "1601600",
    "end": "1606840"
  },
  {
    "text": "green part or bring up the the red part right so we're going to be kind of smart about this and I can see that right in",
    "start": "1606840",
    "end": "1612720"
  },
  {
    "text": "the middle there's a class called passcode passcode unlock view this is a view and I kind of know how to verify if",
    "start": "1612720",
    "end": "1619399"
  },
  {
    "text": "a view should be around or not right we already saw that so let's look at that view and check if it should be garbage",
    "start": "1619399",
    "end": "1625960"
  },
  {
    "text": "collected so same thing we go to the details and we can see that M attach",
    "start": "1625960",
    "end": "1631080"
  },
  {
    "text": "info is n so the view is detached and we can assume that it should be gone at that point which is really nice because",
    "start": "1631080",
    "end": "1638399"
  },
  {
    "text": "now we can just make all that red that's good we know that we don't have to look",
    "start": "1638399",
    "end": "1643520"
  },
  {
    "text": "below that the leak has to be somewhere above the that fult",
    "start": "1643520",
    "end": "1649240"
  },
  {
    "text": "then um let's uh let's keep going another anonymous class so guess what",
    "start": "1649240",
    "end": "1654440"
  },
  {
    "text": "Anonymous classes they tend to be very often present when you have a leak",
    "start": "1654440",
    "end": "1659840"
  },
  {
    "text": "because of the natural you know uh they always have an outer reference to the class where they're declared so that",
    "start": "1659840",
    "end": "1666080"
  },
  {
    "text": "tends to create leaks it's not always the case um so don't jum to conclusions but here it's a kind of an",
    "start": "1666080",
    "end": "1672440"
  },
  {
    "text": "interesting one it's called dollar one doll four doll one so you can have like any number of dollars it's because it's",
    "start": "1672440",
    "end": "1677919"
  },
  {
    "text": "an anous class in an anonymous class so let's look at that so we have this passcode un log view uh what it does is",
    "start": "1677919",
    "end": "1685240"
  },
  {
    "text": "we have a small utility method called wait for measure where you pass a view and a call back and it calls you back",
    "start": "1685240",
    "end": "1690640"
  },
  {
    "text": "when the view has been measured um and so that's the first Anonymous class that",
    "start": "1690640",
    "end": "1696000"
  },
  {
    "text": "we're saying seeing but the second one is where things are interesting what we're doing is we're getting a request",
    "start": "1696000",
    "end": "1702480"
  },
  {
    "text": "Creator object which is a Picasso object Picasso is our uh kind of Open Source",
    "start": "1702480",
    "end": "1707799"
  },
  {
    "text": "image Library uh to make it very easy to deal with images on Android and so here",
    "start": "1707799",
    "end": "1713240"
  },
  {
    "text": "this is something that um basically makes a request uh after the view has been",
    "start": "1713240",
    "end": "1719320"
  },
  {
    "text": "measured uh and you get a call back when it's successful or error so you know",
    "start": "1719320",
    "end": "1725039"
  },
  {
    "text": "let's look at the Java do of this request. in method um because P so guys",
    "start": "1725039",
    "end": "1732080"
  },
  {
    "text": "they're smart and they're telling you what you should do and what you shouldn't do so when you call into the",
    "start": "1732080",
    "end": "1737640"
  },
  {
    "text": "Java do says asynchronously fulfills the request into the specified image View and invokes the target call back if it's",
    "start": "1737640",
    "end": "1743200"
  },
  {
    "text": "not nor right so far so good but there's also a note which is the Callback pram",
    "start": "1743200",
    "end": "1748360"
  },
  {
    "text": "is a strong reference and will prevent your activity of fragments from being average collected haha so I was like",
    "start": "1748360",
    "end": "1756080"
  },
  {
    "text": "yeah that's it and it says also if you you know use this method it is strongly recommended you you invoke an adjacent",
    "start": "1756080",
    "end": "1762039"
  },
  {
    "text": "ped cancel request cult to prevent temporary leaking so obviously sounds like we",
    "start": "1762039",
    "end": "1768120"
  },
  {
    "text": "forgot to do that so I opened up the passcode and unlock view guess what we were actually already calling cancel",
    "start": "1768120",
    "end": "1775320"
  },
  {
    "text": "request what so at that point I was like ah okay I don't know what's going on I",
    "start": "1775320",
    "end": "1780799"
  },
  {
    "text": "was kind of lost um I decided to take a look at Picasso what cancel request actually does um and so you open Picasso",
    "start": "1780799",
    "end": "1789159"
  },
  {
    "text": "like that's the cancel request method and essentially what it has but it does a bunch of things but it has a list of a",
    "start": "1789159",
    "end": "1797159"
  },
  {
    "text": "map of Target to and it you know takes your image which is Target removes it from the map uh gives you the action",
    "start": "1797159",
    "end": "1804120"
  },
  {
    "text": "back and then it goes cancel on the action right and so what happens when",
    "start": "1804120",
    "end": "1809240"
  },
  {
    "text": "you call cancel on the action a bunch of things but in the super class there's a Boolean called canel uh and it becomes",
    "start": "1809240",
    "end": "1815399"
  },
  {
    "text": "true and the reason I'm going there is and what I do when I po at the code is I look for State because I know that then",
    "start": "1815399",
    "end": "1821799"
  },
  {
    "text": "I can go and see if that state matches in the details that I have about the leak right so if I come back to to the",
    "start": "1821799",
    "end": "1828880"
  },
  {
    "text": "image view action which is an action then I can look at the states oh canel this fults wait I called request cancel",
    "start": "1828880",
    "end": "1836799"
  },
  {
    "text": "but canel is false it can't happen because request cancel sets cancel to true this is very confusing so really",
    "start": "1836799",
    "end": "1844600"
  },
  {
    "text": "looks like the leak is definitely there but we have no idea what's going on so this pretty much shows us that uh the",
    "start": "1844600",
    "end": "1851480"
  },
  {
    "text": "leak is at the the the basically we can very easily reason now we know that the IM image reaction should be gun it's",
    "start": "1851480",
    "end": "1858240"
  },
  {
    "text": "state to the image view uh the P passcode unlock view should be gone we know that the the list of actions",
    "start": "1858240",
    "end": "1864880"
  },
  {
    "text": "themselves are probably should still be around so we know that the leak is there but we don't know why it's happening and",
    "start": "1864880",
    "end": "1872080"
  },
  {
    "text": "that's where things kind get kind of annoying like what do you do now we found the leak but we don't know how we",
    "start": "1872080",
    "end": "1877760"
  },
  {
    "text": "created it well we did another hack um so what if I",
    "start": "1877760",
    "end": "1886039"
  },
  {
    "start": "1881000",
    "end": "2215000"
  },
  {
    "text": "could poke around the memory and like figure out out more things well turns out that's what a hep dump is for which",
    "start": "1886039",
    "end": "1891360"
  },
  {
    "text": "is what lonary uses lary kind of takes a shortcut and presents you the the quick view but you can do it the old way which",
    "start": "1891360",
    "end": "1898600"
  },
  {
    "text": "is by poking around in memory so you know we thought well we kind of need those hip dumps when the leaks happen so",
    "start": "1898600",
    "end": "1904720"
  },
  {
    "text": "we need to upload them but again I'm too lazy to build a back end right I don't want to do that so what do you do",
    "start": "1904720",
    "end": "1911639"
  },
  {
    "text": "instead well it turns out that slack has a very nice API for uploading things or chats or whatever",
    "start": "1911639",
    "end": "1918440"
  },
  {
    "text": "and you can upload a hep dump to slack so and that's true we have a slack",
    "start": "1918440",
    "end": "1923720"
  },
  {
    "text": "channel uh that just gets a bunch of leak reported and you can see that it actually has a binary uh so far so good",
    "start": "1923720",
    "end": "1931159"
  },
  {
    "text": "like hasn't really reached out to us telling us to not do that I'm expecting that someday they're going to be really",
    "start": "1931159",
    "end": "1936760"
  },
  {
    "text": "unhappy but um maybe if everybody starts doing that we'll see um anyway it's very",
    "start": "1936760",
    "end": "1942399"
  },
  {
    "text": "nice it's very practical uh because then I basically I go on bunag I just go there I find the and if I need more",
    "start": "1942399",
    "end": "1948639"
  },
  {
    "text": "information I I go on slack so the thing with slack is that it's hard to like get that Groove view that I have on bu snag",
    "start": "1948639",
    "end": "1955120"
  },
  {
    "text": "um but when I look for something specific I just search in slack and then I download the binary and then I have",
    "start": "1955120",
    "end": "1961120"
  },
  {
    "text": "it so I download downloaded The Hip from slack um",
    "start": "1961120",
    "end": "1967000"
  },
  {
    "text": "then um so we know that the first thing we do in um in this Picasso class when",
    "start": "1967000",
    "end": "1972799"
  },
  {
    "text": "you cancel cancel request is remove the targets from the map right so the map should not have that entry anymore um so",
    "start": "1972799",
    "end": "1981720"
  },
  {
    "text": "let's look at the map let's search for this action object so I opened the hip",
    "start": "1981720",
    "end": "1986840"
  },
  {
    "text": "dump with um something called your kit which I believe you need a license for",
    "start": "1986840",
    "end": "1992039"
  },
  {
    "text": "that uh there might be some free licenses the other option is to use Eclipse memory analyzer tool mat um I",
    "start": "1992039",
    "end": "2000159"
  },
  {
    "text": "like your kit for I guess two reasons one um it works with Android hip Dums",
    "start": "2000159",
    "end": "2005720"
  },
  {
    "text": "and for Eclipse mat you actually have to convert them first and then you can load them the other reason is that it is more",
    "start": "2005720",
    "end": "2011760"
  },
  {
    "text": "beautiful uh it feels better I don't know Eclipse just feels bad and wrong so there's like something about that that",
    "start": "2011760",
    "end": "2017360"
  },
  {
    "text": "turns me off um anyway so I I started you know it's easy you search for",
    "start": "2017360",
    "end": "2023120"
  },
  {
    "text": "Picasso and something interesting pops up which is oh there are two instances okay I'll just look at the",
    "start": "2023120",
    "end": "2029000"
  },
  {
    "text": "two uh and so I look at the first one and I see that the target to action map has zero entries okay and the second one",
    "start": "2029000",
    "end": "2037080"
  },
  {
    "text": "the target to action map has one entry uh and one of those entry is the image",
    "start": "2037080",
    "end": "2044679"
  },
  {
    "text": "view action the one that I was kind of looking for uh and so and you can see",
    "start": "2044679",
    "end": "2050280"
  },
  {
    "text": "that the reference is like um it's an image view so that's interesting that means",
    "start": "2050280",
    "end": "2057079"
  },
  {
    "text": "that the action is still in there and hasn't been removed which maps with the idea that cancel was false um so again",
    "start": "2057079",
    "end": "2064760"
  },
  {
    "text": "don't jump to conclusion it's not because we're seeing like the image reaction in here that this means that",
    "start": "2064760",
    "end": "2071240"
  },
  {
    "text": "this is the the cause of the leaks like we can see strong references here but this uh sorry we see weak references",
    "start": "2071240",
    "end": "2078000"
  },
  {
    "text": "here it's a weak hashmap so this is not it's by itself causing a leak um but it",
    "start": "2078000",
    "end": "2084040"
  },
  {
    "text": "sort of plays into it so we have that action and it's not cancelled and not",
    "start": "2084040",
    "end": "2089358"
  },
  {
    "text": "removed so it means that cancel request wasn't called but we saw that we call cancel request so I came back and I",
    "start": "2089359",
    "end": "2095240"
  },
  {
    "text": "looked at this class and I was like okay um we do call that method uh let's look",
    "start": "2095240",
    "end": "2100560"
  },
  {
    "text": "at what the Picasso instance is on that object so I looked at the Picasso object and then opened it up and I looked at",
    "start": "2100560",
    "end": "2106880"
  },
  {
    "text": "Target to action and I see Zero here so I had two instances of Picasso and one",
    "start": "2106880",
    "end": "2113240"
  },
  {
    "text": "of them had the target to action uh that I added and the other one had zero but",
    "start": "2113240",
    "end": "2119200"
  },
  {
    "text": "the one that had zero was the one that was referenced by The View so it means that this is the wrong Picasso basically",
    "start": "2119200",
    "end": "2124839"
  },
  {
    "text": "what's going on here is that we're getting a request Creator from Picasso from another Picasso instance and then",
    "start": "2124839",
    "end": "2131599"
  },
  {
    "text": "we call cancel request on the wrong Picasso instance so we're canceling nothing um and that's how we were",
    "start": "2131599",
    "end": "2138920"
  },
  {
    "text": "creating that memor so we were unregistering from the wrong one um I couldn't have figured that out with I",
    "start": "2138920",
    "end": "2145079"
  },
  {
    "text": "mean I maybe could have in retrospect looking at the data I found some ways that I could have done that but it's",
    "start": "2145079",
    "end": "2150359"
  },
  {
    "text": "much easier when you can poke around memory so that's why downloading the Hep dump eventually really helps you all",
    "start": "2150359",
    "end": "2156760"
  },
  {
    "text": "right so so um I'm going to kind of go through a summary",
    "start": "2156760",
    "end": "2161960"
  },
  {
    "text": "so the idea the general idea is don't jump to conclusions you're going to see a bunch of classes that you know hold on",
    "start": "2161960",
    "end": "2168359"
  },
  {
    "text": "for a minute think about what it means and then try to you know look for",
    "start": "2168359",
    "end": "2173720"
  },
  {
    "text": "instances that should be de but the first thing is like go back to First principles don't jump to conclusions",
    "start": "2173720",
    "end": "2179359"
  },
  {
    "text": "then try to find the objects that should be dead and the objects that should be alive this is really what's going to",
    "start": "2179359",
    "end": "2185440"
  },
  {
    "text": "help you figure out um what's wrong um and then you can you know split the leak",
    "start": "2185440",
    "end": "2191000"
  },
  {
    "text": "Trace into two places find the reference to kill and hopefully you can you can fix your B so uh this is the last slide",
    "start": "2191000",
    "end": "2199280"
  },
  {
    "text": "you can rate the session send questions um and that's",
    "start": "2199280",
    "end": "2205079"
  },
  {
    "text": "[Applause]",
    "start": "2205380",
    "end": "2210219"
  },
  {
    "text": "it",
    "start": "2214200",
    "end": "2217200"
  }
]