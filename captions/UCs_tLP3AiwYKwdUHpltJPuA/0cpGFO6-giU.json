[
  {
    "start": "0",
    "end": "253000"
  },
  {
    "text": "okay we'll get right into this so the preliminaries I Charles nutter I work",
    "start": "0",
    "end": "6390"
  },
  {
    "text": "currently at Red Hat various open-source things but mostly on JRuby JDM language",
    "start": "6390",
    "end": "12900"
  },
  {
    "text": "stuff making it easier for new languages to approach the platform expanding the",
    "start": "12900",
    "end": "17910"
  },
  {
    "text": "platform to put a native language and so on so the structure of this talk is kind",
    "start": "17910",
    "end": "23279"
  },
  {
    "text": "of going to be a story a play in three acts talking about work we've been doing",
    "start": "23279",
    "end": "29039"
  },
  {
    "text": "on junior beautiful pastels decade now the challenges that we've had to meet",
    "start": "29039",
    "end": "34110"
  },
  {
    "text": "dealing with the JVM and some of its limitations and how the JVM and jari they're evolving together to make this",
    "start": "34110",
    "end": "40469"
  },
  {
    "text": "easier in the future so we'll talk a little bit first jruby horse is basically just ruby on the JVM products",
    "start": "40469",
    "end": "49230"
  },
  {
    "text": "been around for quite a while and 2001 was the initial commit to JRuby was basically just started implementing the",
    "start": "49230",
    "end": "55890"
  },
  {
    "text": "parser I think mostly they were looking at doing it for tooling and then decided hey we've got a parser we can interfere",
    "start": "55890",
    "end": "61469"
  },
  {
    "text": "we can start building an actual could be run time on top of the jury yeah but for",
    "start": "61469",
    "end": "66540"
  },
  {
    "text": "about five years or so it didn't really move very quickly it couldn't run most Ruby code it was based on an older",
    "start": "66540",
    "end": "72479"
  },
  {
    "text": "version of Ruby the rails singularity that happened within the Ruby community was during that period and so around",
    "start": "72479",
    "end": "80990"
  },
  {
    "text": "2005-2006 I got involved in the project and we thought well why can't be is",
    "start": "80990",
    "end": "86759"
  },
  {
    "text": "there any reason we couldn't actually have Jay Ruby on Rails Ranji rails running on top of the jamie i'm taking",
    "start": "86759",
    "end": "92820"
  },
  {
    "text": "advantage of JVM libraries with JDM so and in 2006 we actually were able to do",
    "start": "92820",
    "end": "98159"
  },
  {
    "text": "so we presented at javaone show running on top of Serie B on top of the GBM there very early primitive pack together",
    "start": "98159",
    "end": "105810"
  },
  {
    "text": "form but it was soon as a beginning that's what we're do this and we're working on JRuby 9000 now this",
    "start": "105810",
    "end": "114340"
  },
  {
    "text": "is actually the ninth major release of JRuby that we've had since 10 so when I was the first one and we're now it's a",
    "start": "114340",
    "end": "122410"
  },
  {
    "text": "jruby that is orders of magnitude faster than the one from 2006 we're looking at",
    "start": "122410",
    "end": "127660"
  },
  {
    "text": "running much more radhika running rails applications in production for real customers like square it's like",
    "start": "127660",
    "end": "135520"
  },
  {
    "text": "SoundCloud on JRuby as key parts of their members right it is a lot of work",
    "start": "135520",
    "end": "140980"
  },
  {
    "text": "to get to this point this is what I ran last night just to see where our master branch is that this is 29,000 commits",
    "start": "140980",
    "end": "147100"
  },
  {
    "text": "that are getting to cut into JRuby over the years and this doesn't count all the work we've done on maintenance branches",
    "start": "147100",
    "end": "152380"
  },
  {
    "text": "for each of these releases too so there's obviously a lot of work but why would we suffer through with the",
    "start": "152380",
    "end": "159130"
  },
  {
    "text": "challenges of bringing a language like Ruby to the JVM for 9 years 10 years now",
    "start": "159130",
    "end": "165600"
  },
  {
    "text": "but the bottom line is that we were all Java guys you know the JVM well we know its skin tones at ins and outs or at",
    "start": "165600",
    "end": "172180"
  },
  {
    "text": "least we thought we do all of the things and outs and it it just fits the way we",
    "start": "172180",
    "end": "178630"
  },
  {
    "text": "wanted to build Ruby want to be able to focus on implementing the functionality of Ruby the language Ruby's core classes",
    "start": "178630",
    "end": "184900"
  },
  {
    "text": "and not have to build our own in our own GC all those other pieces that the JVM gives us for free so the JVM is",
    "start": "184900",
    "end": "191320"
  },
  {
    "text": "kind of this magical black box that we can just throw our stuff at throw our code at throw a ruby interpreter do",
    "start": "191320",
    "end": "197920"
  },
  {
    "text": "little byte code generation whatever and it will run our code great and everything runs fast except my brother",
    "start": "197920",
    "end": "204340"
  },
  {
    "text": "and that's what the challenge of the interesting part working on traitor",
    "start": "204340",
    "end": "209520"
  },
  {
    "text": "nine years is actually in when the JDM can't do what we needed to do that next",
    "start": "209520",
    "end": "215970"
  },
  {
    "text": "step how do we cross that line of impossibility the jvm can't do it most people just give up we don't have an",
    "start": "215970",
    "end": "222120"
  },
  {
    "text": "option so we find new ways to do it so we're left with this challenge we want",
    "start": "222120",
    "end": "227190"
  },
  {
    "text": "to make Java and Ruby work really well together and not only work well together as a JDM language but work well as a",
    "start": "227190",
    "end": "234300"
  },
  {
    "text": "ruby implementation so Ruby users get the experience they expect out of running JRuby running Ruby on top of the",
    "start": "234300",
    "end": "241350"
  },
  {
    "text": "JVM so we're going to talk about three specific areas here that have been challenges for us and how the JVM is",
    "start": "241350",
    "end": "247560"
  },
  {
    "text": "evolving to make it a little easier in the future for folks like you and for us to continue working on here so first off",
    "start": "247560",
    "end": "254790"
  },
  {
    "start": "253000",
    "end": "371000"
  },
  {
    "text": "we're going to talk about just the most basic primitive concept in Ruby where all the performance is generally lost",
    "start": "254790",
    "end": "260720"
  },
  {
    "text": "all those method calls that we make in a typical Ruby application here's a metric",
    "start": "260720",
    "end": "268500"
  },
  {
    "text": "Iran real quick just this morning just to see how many simple calls and this is like just calling the Foo method or",
    "start": "268500",
    "end": "274950"
  },
  {
    "text": "calling a dot foo on some object so there's other types of calls doing super in vacations and whatnot that aren't",
    "start": "274950",
    "end": "281910"
  },
  {
    "text": "listed here but you know for doing things like gem installing rails and all of the dependencies that it needs",
    "start": "281910",
    "end": "288170"
  },
  {
    "text": "315,000 calls that are made Ruby calls making generating a new rails",
    "start": "288170",
    "end": "293460"
  },
  {
    "text": "application 606 thousand and this is generating the app plus installing",
    "start": "293460",
    "end": "298530"
  },
  {
    "text": "additional dependencies needed for a running application I did some quick crud application and just ran through",
    "start": "298530",
    "end": "304560"
  },
  {
    "text": "all four operations about 16,000 to do all four crud operations so that's you",
    "start": "304560",
    "end": "311700"
  },
  {
    "text": "know roughly going to be like a 4,000 per request just to do a really basic display of some data so we need to make",
    "start": "311700",
    "end": "318600"
  },
  {
    "text": "these method calls fast and the problem we always had in JRuby we've got a simple example here foo calling bar",
    "start": "318600",
    "end": "324360"
  },
  {
    "text": "calling Baz and on Java five and six what we were building jaber beyond most",
    "start": "324360",
    "end": "330690"
  },
  {
    "text": "of the most of its lifetime we've got all this extra call logic in between these we need to go and look up the",
    "start": "330690",
    "end": "337260"
  },
  {
    "text": "method type we need to make sure we've got the same class in hand that we expected last time we've got to do that",
    "start": "337260",
    "end": "343440"
  },
  {
    "text": "and unfortunately the JVM is very bad at optimizing through a generic piece of",
    "start": "343440",
    "end": "349260"
  },
  {
    "text": "code and buy generic I mean you've got lots of different call paths that are all going through this same piece of",
    "start": "349260",
    "end": "354570"
  },
  {
    "text": "code that becomes a optimization black hole nothing can get through that that",
    "start": "354570",
    "end": "360990"
  },
  {
    "text": "set of calls nothing can get through that intermediate call logic that we have and so most of the great JVM",
    "start": "360990",
    "end": "366780"
  },
  {
    "text": "optimizations we hope to get out of building Ruby on the JVM don't actually materialize and that's where invoke",
    "start": "366780",
    "end": "372630"
  },
  {
    "start": "371000",
    "end": "656000"
  },
  {
    "text": "dynamic comes in how many folks are familiar with invoke dynamic at least on the surface okay so most of you ever",
    "start": "372630",
    "end": "378090"
  },
  {
    "text": "heard at least a little bit about it we'll go through a little history here the JVM authors actually did talk about",
    "start": "378090",
    "end": "383940"
  },
  {
    "text": "having other non Java languages on the JVM and didn't at least it didn't exclude that possibility in the future",
    "start": "383940",
    "end": "390710"
  },
  {
    "text": "and because of that lots and lots of folks of targeted languages on the JVM some of the earliest ones were in you",
    "start": "390710",
    "end": "397830"
  },
  {
    "text": "know 96 97 shortly after Java actually was first released some of the more obvious more well-known ones like Jai",
    "start": "397830",
    "end": "405150"
  },
  {
    "text": "thon were actually before 2000 dry now I think was before 2000 or early 2000s so",
    "start": "405150",
    "end": "410580"
  },
  {
    "text": "very early before the JVM was even considered to be a multi-language vm people were building languages on top of",
    "start": "410580",
    "end": "416580"
  },
  {
    "text": "it the problem is that although the JVM was always expected that it could run other languages it was never designed",
    "start": "416580",
    "end": "422130"
  },
  {
    "text": "for a lot of these other languages there are tricks like dynamic dispatch that didn't work very well with a statically",
    "start": "422130",
    "end": "428640"
  },
  {
    "text": "typed vm there are optimizations that dynamic languages or other new types of",
    "start": "428640",
    "end": "433710"
  },
  {
    "text": "languages would need different sorts of call patterns so we're stuck in this kind of this bubble this world of JVM",
    "start": "433710",
    "end": "441000"
  },
  {
    "text": "opcodes which is pretty much all we can work with and and there's three primary areas of operations that you can perform",
    "start": "441000",
    "end": "448350"
  },
  {
    "text": "at the JVM level you can do calls invocation you can access fields on objects set and get so putting data out",
    "start": "448350",
    "end": "455610"
  },
  {
    "text": "there for other threads to see an array access again similar sort of thing",
    "start": "455610",
    "end": "460710"
  },
  {
    "text": "putting data into some data structure that's going to be passed around and used by the world these are the pretty",
    "start": "460710",
    "end": "466560"
  },
  {
    "text": "much the only operations that will potentially have some side effects some visible side effect outside of that",
    "start": "466560",
    "end": "471780"
  },
  {
    "text": "operation and then there's all these other flow control and stack manipulation new",
    "start": "471780",
    "end": "477600"
  },
  {
    "text": "Eric operations that don't really have any side effect their kind of functional operations at the jvm level but they",
    "start": "477600",
    "end": "483090"
  },
  {
    "text": "serve to move data into the right places for these key out operations like",
    "start": "483090",
    "end": "488310"
  },
  {
    "text": "invocation and and data access and if you're going to build a language on top of the JVM you pretty much have to stay",
    "start": "488310",
    "end": "495510"
  },
  {
    "text": "within here you have to color within these lines and that's where invoke dynamic really came into really really",
    "start": "495510",
    "end": "502410"
  },
  {
    "text": "enables the platform to do a lot more than it did before this is from the JVM this is the quote that I mentioned in",
    "start": "502410",
    "end": "508740"
  },
  {
    "text": "the future we will consider bounded extensions to the Java Virtual Machine to provide better support for other",
    "start": "508740",
    "end": "514050"
  },
  {
    "text": "languages this is back in 1997 talking about the possibility of adding additional features just to support",
    "start": "514050",
    "end": "520289"
  },
  {
    "text": "other non JVM non Java languages and that leads us the jsr 292 which was the",
    "start": "520289",
    "end": "526050"
  },
  {
    "text": "java 7 jsr for invoke dynamic invoke dynamic is basically a user definable",
    "start": "526050",
    "end": "531390"
  },
  {
    "text": "bytecode so we've got our invokes and we've got our field accesses this is a special byte code that we program",
    "start": "531390",
    "end": "537780"
  },
  {
    "text": "internally the JVM asks us what to do when it runs into this bytecode rather than having a predetermined set of",
    "start": "537780",
    "end": "544590"
  },
  {
    "text": "operations that it knows already it also comes with a set of fast method pointers called method handles you've seen the",
    "start": "544590",
    "end": "550620"
  },
  {
    "text": "java.lang invoke package those handles are now getting the point where they're much faster than calling through",
    "start": "550620",
    "end": "556560"
  },
  {
    "text": "reflection they can optimize much better the JVM can actually optimize through those handles through those pointers as",
    "start": "556560",
    "end": "562770"
  },
  {
    "text": "if it was a direct call that's a very very empower phul way to start wiring",
    "start": "562770",
    "end": "567810"
  },
  {
    "text": "things together just with simple reflective handles that optimize nicely and then as stuff for caching and",
    "start": "567810",
    "end": "573090"
  },
  {
    "text": "validation the general idea was that we wanted to build a bytecode that to end",
    "start": "573090",
    "end": "579000"
  },
  {
    "text": "all byte codes we could we could have this one opportunity to make a change the JVM spec which is really really hard",
    "start": "579000",
    "end": "585690"
  },
  {
    "text": "to do we need to do it right and so it was made very customizable very configurable and it's it's actually",
    "start": "585690",
    "end": "592860"
  },
  {
    "text": "starting to play out really well for different languages talk about a few users obviously JRuby and groovy existed",
    "start": "592860",
    "end": "598260"
  },
  {
    "text": "before invoke dynamic and we have grown into it jruby was the first adopter of",
    "start": "598260",
    "end": "603990"
  },
  {
    "text": "invoke dynamic we actually started using it before it was any inner release before it was even finalized as an API",
    "start": "603990",
    "end": "609990"
  },
  {
    "text": "just to try it out and help test it kick the tires I believe groovy has a mode you can turn on now that uses invoke dynamic to great",
    "start": "609990",
    "end": "616620"
  },
  {
    "text": "effect new implementations as well Diane Diane Jas and nas horn built on top of",
    "start": "616620",
    "end": "622290"
  },
  {
    "text": "invoke dynamic from the very beginning and so they're they're getting the advantage of having that from the day",
    "start": "622290",
    "end": "627720"
  },
  {
    "text": "one and designing the whole system around it this is a little known fact that Java 8 lambdas and the lot of the",
    "start": "627720",
    "end": "634860"
  },
  {
    "text": "Java 9 features are also building on top of invoke dynamic all of these roadblocks that kept the JVM guys the",
    "start": "634860",
    "end": "641279"
  },
  {
    "text": "jdk guys from adding features to java now start to get swept away as well we can add java features based on invoke",
    "start": "641279",
    "end": "648149"
  },
  {
    "text": "dynamic that were impossible to do before or at least hard to do efficiently very exciting stuff and I'll",
    "start": "648149",
    "end": "654420"
  },
  {
    "text": "talk a little bit more about all those work later so now what exactly is invoked enemies any actually know how invoke dynamic works not one awesome",
    "start": "654420",
    "end": "662970"
  },
  {
    "start": "656000",
    "end": "834000"
  },
  {
    "text": "that means everybody was going to get something new out of this okay so invoke we've got our four basic invocation",
    "start": "662970",
    "end": "670019"
  },
  {
    "text": "types static for you know static methods simple enough virtual when at the compile time you know the concrete class",
    "start": "670019",
    "end": "676230"
  },
  {
    "text": "that you're calling against interface when you're calling against an interface you don't know what the concrete class is JVM has to figure that out later and",
    "start": "676230",
    "end": "683459"
  },
  {
    "text": "then constructor and super calls which are called special invitations and these boil down into four different byte codes",
    "start": "683459",
    "end": "690240"
  },
  {
    "text": "here with some of the the garbled internal mess that represents the method they're actually going to call their and",
    "start": "690240",
    "end": "696470"
  },
  {
    "text": "if we take these four operations and break them down into what actually happens at the JVM level you'll start to",
    "start": "696470",
    "end": "702990"
  },
  {
    "text": "see that this is largely the same thing for every one of them there's minor changes how it looks up methods how it",
    "start": "702990",
    "end": "708810"
  },
  {
    "text": "caches optimization guards that'll be in place in some cases but not in others it'd be nice if we could take those",
    "start": "708810",
    "end": "716189"
  },
  {
    "text": "pieces those individual pieces out of each of these invokes and stitch them together however we want do caching our",
    "start": "716189",
    "end": "723089"
  },
  {
    "text": "own way do method look up our own way and that's where invoke dynamic comes in all invoke dynamic does is call back to",
    "start": "723089",
    "end": "731550"
  },
  {
    "text": "your code you set up call site caching you go look up methods you go stand up",
    "start": "731550",
    "end": "738120"
  },
  {
    "text": "values in memory and then you give that back to the JVM and say here's how you do this operation here's how this invoke",
    "start": "738120",
    "end": "744420"
  },
  {
    "text": "dynamic supposed to work it does that from then on with these optimized method handles with all the caching logic that you've",
    "start": "744420",
    "end": "750900"
  },
  {
    "text": "got and ideally optimizes it as if it was are straight thru static call that's what we're looking for a bit more",
    "start": "750900",
    "end": "757529"
  },
  {
    "text": "graphically we got the this kind of a switchboard metaphor here so up at the",
    "start": "757529",
    "end": "762600"
  },
  {
    "text": "top we make our call and that's an invoke dynamic that we we need something out there some piece of data we need to",
    "start": "762600",
    "end": "768150"
  },
  {
    "text": "get some method we need to call or invoke dynamic starts right there that goes to the JVM the JVM then we'll look",
    "start": "768150",
    "end": "776640"
  },
  {
    "text": "for our bootstrap method it's going to call back into our code into user code from the JVM level bootstrap method",
    "start": "776640",
    "end": "782220"
  },
  {
    "text": "finds the right target wires everything up and uses method handles to do it",
    "start": "782220",
    "end": "787260"
  },
  {
    "text": "that's kind of the wires here connecting one call to another those method handles",
    "start": "787260",
    "end": "793110"
  },
  {
    "text": "then will eventually terminate on that target method or Target Field or some piece of data and before Java 7 you know",
    "start": "793110",
    "end": "801089"
  },
  {
    "text": "similar sort of process was done for every every call in Ruby every jruby call but we had to do it every time we'd",
    "start": "801089",
    "end": "808560"
  },
  {
    "text": "go back through this process look it up maybe check a cache do the call look it up check the cash do call its and so on",
    "start": "808560",
    "end": "815460"
  },
  {
    "text": "over and over again and lost a lot of time and then again the JVM can optimize through that the magic with invoke",
    "start": "815460",
    "end": "820980"
  },
  {
    "text": "dynamic is that after this first bootstrapping process all of that stuff disappears and you get direct calls from",
    "start": "820980",
    "end": "829410"
  },
  {
    "text": "that invoke dynamic to the target method from that on and that is where the real magic happens so you look at JRuby on",
    "start": "829410",
    "end": "835680"
  },
  {
    "text": "Java 7 that intermediate logic disappears or at least as far as the JVM",
    "start": "835680",
    "end": "840930"
  },
  {
    "text": "is concerned it disappears we wire it up in a way the JVM understands a little better we get straight through call pads",
    "start": "840930",
    "end": "847080"
  },
  {
    "text": "as far as the JVM nose goes directly from food a bar to baz and all those",
    "start": "847080",
    "end": "852209"
  },
  {
    "text": "great optimizations that we get out of the JVM like inlining actually do happen and we see this happen Ruby in line to",
    "start": "852209",
    "end": "858930"
  },
  {
    "text": "in line into Ruby Java in line into Ruby vice versa all of this stuff actually does work and works really well on",
    "start": "858930",
    "end": "865410"
  },
  {
    "text": "current JVMs so invoke dynamic in JRuby obviously we're using it for method",
    "start": "865410",
    "end": "870630"
  },
  {
    "text": "dispatch it's pretty simple our logic look up the method we have a cash that",
    "start": "870630",
    "end": "876480"
  },
  {
    "text": "says what the last type was and whether it may matches invalidated if the class changes",
    "start": "876480",
    "end": "881490"
  },
  {
    "text": "or if some new type comes in and we might chain those so we have two or three types that are available three or",
    "start": "881490",
    "end": "886620"
  },
  {
    "text": "two or three types of a two or three methods cash we also use it for places like constant look up in Ruby constants",
    "start": "886620",
    "end": "893220"
  },
  {
    "text": "are defined lazily they can also be forcibly modified it's generally not",
    "start": "893220",
    "end": "898589"
  },
  {
    "text": "done but it can be done so we have similar caching logic we go out and look up the constant we have a cache that",
    "start": "898589",
    "end": "904980"
  },
  {
    "text": "rarely is broken rarely has to be invalidated the JVM then can see that as",
    "start": "904980",
    "end": "910769"
  },
  {
    "text": "a true constant even an even though in Ruby it can change at any time and it can optimize it as if it were a constant",
    "start": "910769",
    "end": "917010"
  },
  {
    "text": "written in the code directly all right now how well does it work for us this is",
    "start": "917010",
    "end": "923490"
  },
  {
    "text": "a chart basically showing how much faster we are than ruby 1.9 the performance numbers for 2 point 0 2 2.2",
    "start": "923490",
    "end": "929610"
  },
  {
    "text": "aren't significantly different here these are this is j Ruby baseline this",
    "start": "929610",
    "end": "935190"
  },
  {
    "text": "is I think jruby 1.7 or so on a Java five or six where we've got that logic",
    "start": "935190",
    "end": "941010"
  },
  {
    "text": "preventing the optimizations from happening and this is what it looks like with invoke dynamic just by switching these calls to use invoke dynamic and",
    "start": "941010",
    "end": "947370"
  },
  {
    "text": "changing nothing else in the runtime we get this much improvement a significant improvement on the red black there so",
    "start": "947370",
    "end": "954360"
  },
  {
    "text": "much though that we actually wanted to explore this a little further so this is a benchmark of building up a big red",
    "start": "954360",
    "end": "960240"
  },
  {
    "text": "black tree traversing it a few different ways deleting elements and then you know dumping it and trying again on this",
    "start": "960240",
    "end": "967500"
  },
  {
    "text": "particular benchmark Ruby 20 and a pure ruby implementation of red black took",
    "start": "967500",
    "end": "972750"
  },
  {
    "text": "about 2 2.5 seconds or so and this is this is reusable reason why people in",
    "start": "972750",
    "end": "978750"
  },
  {
    "text": "the Ruby world will turn to see extensions they've got an algorithmic thing like this a data structure a heavy",
    "start": "978750",
    "end": "985320"
  },
  {
    "text": "heavily hit data structure that they need to make fast and so they write it and see instead there's only so much you",
    "start": "985320",
    "end": "990570"
  },
  {
    "text": "can do to get the standard implementation to Ruby to run faster see is the usual go-to and that does help",
    "start": "990570",
    "end": "995790"
  },
  {
    "text": "that brings it down to about half a second for every or every iteration of this particular benchmark and now this",
    "start": "995790",
    "end": "1002600"
  },
  {
    "text": "is the cool part JRuby with the same pure ruby implementation running the same benchmark we're actually faster",
    "start": "1002600",
    "end": "1009170"
  },
  {
    "text": "than Ruby with a see extension and we're seeing this more in more that rather than having to go to",
    "start": "1009170",
    "end": "1014389"
  },
  {
    "text": "sea to get performance out of Ruby code people can just move it to JRuby and get the same sort of boost alright so back",
    "start": "1014389",
    "end": "1023240"
  },
  {
    "text": "to the users talking a little bit about how they are using it neighs horn I mentioned earlier built on invoke dynamic from first from the get-go",
    "start": "1023240",
    "end": "1029650"
  },
  {
    "text": "they're doing a lot more advanced compiler work advanced optimization they",
    "start": "1029650",
    "end": "1035659"
  },
  {
    "text": "speculatively say okay this is probably going to be a method that uses intz or lungs and then they use invoke dynamic",
    "start": "1035659",
    "end": "1041870"
  },
  {
    "text": "as a wit as an escape valve when it turns out you're not doing this algorithm against along it bails out via",
    "start": "1041870",
    "end": "1047750"
  },
  {
    "text": "invoke dynamic generates some new code and then goes into that modified version very cool stuff looking at performance",
    "start": "1047750",
    "end": "1055070"
  },
  {
    "text": "starting to be comparable to the v8 on a lot of benchmarks just by a little bit of extra magic on top of them both",
    "start": "1055070",
    "end": "1060740"
  },
  {
    "text": "dynamic and there they're very interested in turning the work they've done on nasrin into a general language",
    "start": "1060740",
    "end": "1066470"
  },
  {
    "text": "framework so everybody that wants to use invoke dynamic a dynamic language type",
    "start": "1066470",
    "end": "1071840"
  },
  {
    "text": "specialization optimizing numerics and whatnot we'll be able to plug into this and have the same thing so that's really",
    "start": "1071840",
    "end": "1077870"
  },
  {
    "text": "cool i mentioned that lambdas in java 8 use invoke dynamic it's if it works very",
    "start": "1077870",
    "end": "1083690"
  },
  {
    "text": "similar to inner classes but it lazily generates that class it doesn't need to",
    "start": "1083690",
    "end": "1088820"
  },
  {
    "text": "have that on the on the command on the file system it doesn't need to be in the jar you don't need these dollar zero",
    "start": "1088820",
    "end": "1094460"
  },
  {
    "text": "dollar one and all that invoke dynamic is used to basically generate it on the",
    "start": "1094460",
    "end": "1100340"
  },
  {
    "text": "fly if you actually get to that point and this is an example of a bytecode so",
    "start": "1100340",
    "end": "1105440"
  },
  {
    "text": "we've got a sort that we're doing with a simple integer compare that's our that's our lambda there the invoke dynamic goes",
    "start": "1105440",
    "end": "1113809"
  },
  {
    "text": "out and generates that class wrapping all of this code that is used for the",
    "start": "1113809",
    "end": "1118970"
  },
  {
    "text": "the actual string length calls and the compare right here and then that class",
    "start": "1118970",
    "end": "1124640"
  },
  {
    "text": "is returned and plugged right into the invoke dynamic so it's never never has to be generated again it's as if that",
    "start": "1124640",
    "end": "1130490"
  },
  {
    "text": "virtual that anonymous inner class always existed but you don't have to have it on the command line you don't",
    "start": "1130490",
    "end": "1135710"
  },
  {
    "text": "have to have that extra that extra hassle of dealing with the files this is",
    "start": "1135710",
    "end": "1141230"
  },
  {
    "text": "the uses of invoke dynamic get cooler every year there'll be no java nine is",
    "start": "1141230",
    "end": "1146240"
  },
  {
    "text": "going to be doing generic specialization reification for collections you will have an ArrayList of int that operates",
    "start": "1146240",
    "end": "1152000"
  },
  {
    "text": "like you expect it's one of the key features that's coming along and it's built very heavily on top of invoke",
    "start": "1152000",
    "end": "1157340"
  },
  {
    "text": "dynamic again at the point where you need an ArrayList of int you need a primitive collection which we never were",
    "start": "1157340",
    "end": "1163550"
  },
  {
    "text": "able to have before without specialized libraries it will go off ask the in invoke dynamic call into some JDK level",
    "start": "1163550",
    "end": "1173179"
  },
  {
    "text": "code generate what an ArrayList of int would look like and then plug it right back into the invoke dynamic so we can",
    "start": "1173179",
    "end": "1179660"
  },
  {
    "text": "actually have these reified collections without generating them all ahead of time without having an ArrayList event",
    "start": "1179660",
    "end": "1184700"
  },
  {
    "text": "and an ArrayList of char it'll all just work and it'll all plug in using invoke dynamic under the covers very cool and",
    "start": "1184700",
    "end": "1190910"
  },
  {
    "text": "they've got working prototypes of this already if you want to try out the the project valhalla branch of OpenJDK okay",
    "start": "1190910",
    "end": "1198290"
  },
  {
    "start": "1197000",
    "end": "1359000"
  },
  {
    "text": "so i think that the method call a performance getting Ruby method calls to",
    "start": "1198290",
    "end": "1204320"
  },
  {
    "text": "optimize the way we want is is kind of a solved problem at this point there's obviously the type specialization stuff",
    "start": "1204320",
    "end": "1210110"
  },
  {
    "text": "we still need to work on the next area that we really ran into and we still run into to this day is that Ruby is largely",
    "start": "1210110",
    "end": "1215690"
  },
  {
    "text": "a wrapper around UNIX or a wrapper around POSIX see looking at a few",
    "start": "1215690",
    "end": "1221330"
  },
  {
    "text": "examples of this this is the air no class and all of the classes defined under it for for generating errors and",
    "start": "1221330",
    "end": "1227480"
  },
  {
    "text": "these are basically just all the air knows that you'd see at sea level stuff that you would recognize if you're",
    "start": "1227480",
    "end": "1233510"
  },
  {
    "text": "building any application see another example the etsy library in ruby has a",
    "start": "1233510",
    "end": "1239360"
  },
  {
    "text": "number of methods for accessing the password file on a unix system group information user information and so on",
    "start": "1239360",
    "end": "1245510"
  },
  {
    "text": "and they didn't even bother to make these names nice these are just the sea functions pulled up into ruby directly",
    "start": "1245510",
    "end": "1252920"
  },
  {
    "text": "so if we want to implement it and have all the ruby code out there work we need to be able to do these things we need to",
    "start": "1252920",
    "end": "1258980"
  },
  {
    "text": "have these operations available to us at the JVM level how do we do that and",
    "start": "1258980",
    "end": "1264530"
  },
  {
    "text": "that's where having better native interop at the JVM comes in so we look",
    "start": "1264530",
    "end": "1271280"
  },
  {
    "text": "at the JVM world here we got our nice quaternized happy area where there's no native code its write once run anywhere",
    "start": "1271280",
    "end": "1276530"
  },
  {
    "text": "right and then we've got this native world where we got all these cool library is that we need to call we've got operating system features that we need",
    "start": "1276530",
    "end": "1283100"
  },
  {
    "text": "to access new libraries new graphics subsystems and there's really no good",
    "start": "1283100",
    "end": "1289880"
  },
  {
    "text": "way to do this right now as part of the standard JVM is a great quote from John",
    "start": "1289880",
    "end": "1296180"
  },
  {
    "text": "Rose if non Java programmers find some library useful and easy to access it should be similarly accessible to Java",
    "start": "1296180",
    "end": "1303200"
  },
  {
    "text": "programmers and this has not been the philosophy of the Java platform for most of its lifetime the the philosophy of",
    "start": "1303200",
    "end": "1310490"
  },
  {
    "text": "the Java platform is generally been if John on Java programmers find some library use easy useful and easy to",
    "start": "1310490",
    "end": "1317480"
  },
  {
    "text": "access we should port that to Java so that we can have it on Java and then what everybody who's done a port or a",
    "start": "1317480",
    "end": "1323990"
  },
  {
    "text": "copy of a project knows that you're going to get out of sync you're going to have to maintain two different versions it's kind of stupid that we can't just",
    "start": "1323990",
    "end": "1330590"
  },
  {
    "text": "call down into some of these libraries and use them directly right I think it seems stupid so the example I want to go",
    "start": "1330590",
    "end": "1338660"
  },
  {
    "text": "through here is what if we just we just want to get the pit for the current process we've got some monitoring system",
    "start": "1338660",
    "end": "1346010"
  },
  {
    "text": "or some administrative DevOps sort of thing that needs the pit so it can shut down send signals whatever this is not",
    "start": "1346010",
    "end": "1354200"
  },
  {
    "text": "possible to do on the JVM right now you can't even get the current process ID",
    "start": "1354200",
    "end": "1359590"
  },
  {
    "start": "1359000",
    "end": "1499000"
  },
  {
    "text": "the only way that you can get added is if you're going to write some C code yourself and basically write an",
    "start": "1359590",
    "end": "1364970"
  },
  {
    "text": "extension for the JVM so for jni is anybody done Jay and I okay there are a",
    "start": "1364970",
    "end": "1370460"
  },
  {
    "text": "few folks I feel for you in Jay and I we've got our user code at the top that",
    "start": "1370460",
    "end": "1375530"
  },
  {
    "text": "needs to make some call there will be a jni native endpoint on the Java side some C code that represents what that",
    "start": "1375530",
    "end": "1382580"
  },
  {
    "text": "could that that native logic is supposed to do and then eventually we get to the target library and now if you start",
    "start": "1382580",
    "end": "1388130"
  },
  {
    "text": "looking at what Jay and I does its kind of deceptively simple here oh we just stick native on there and we've got a native call it's like magic suddenly",
    "start": "1388130",
    "end": "1395180"
  },
  {
    "text": "down calls into native code and we're good to go but then there's all this stuff that has to be done behind the",
    "start": "1395180",
    "end": "1401120"
  },
  {
    "text": "scenes that has nothing to do with the Java code you just wrote you need to generate the jni headers for all of your",
    "start": "1401120",
    "end": "1407510"
  },
  {
    "text": "native endpoints with some nicely mangled function name so the JVM can find it",
    "start": "1407510",
    "end": "1413460"
  },
  {
    "text": "you need to implement that for this case it's obviously fairly simple get paid returns in an int that fits right fits",
    "start": "1413460",
    "end": "1422130"
  },
  {
    "text": "nicely into the j long we could do some casting logic to make sure it fits right or signed right for a particular call",
    "start": "1422130",
    "end": "1428159"
  },
  {
    "text": "but but this is not too terribly bad so we got our header we've got our C file now we have to build it and this is",
    "start": "1428159",
    "end": "1435090"
  },
  {
    "text": "where I fall down because I don't know how to do any of this crap I don't know which libraries I'm supposed to connect",
    "start": "1435090",
    "end": "1440789"
  },
  {
    "text": "up and on a per platform basis how I'm supposed to do this different compilers do things different ways and then you",
    "start": "1440789",
    "end": "1446820"
  },
  {
    "text": "got to think about users either you're going to have to build this ahead of time for all platforms or your users are going to have to build it whenever they",
    "start": "1446820",
    "end": "1452669"
  },
  {
    "text": "need to use it and that sucks for them too so you're going to have to have make files you're gonna have to have other stuff that's not part of the Java world",
    "start": "1452669",
    "end": "1458820"
  },
  {
    "text": "there got it there's got to be a better way to do this all I want is a damn kid right so that were that's where Java",
    "start": "1458820",
    "end": "1466770"
  },
  {
    "text": "native runtime comes in so the Java need of runtime is a java api for calling native code we have a sort of a layered",
    "start": "1466770",
    "end": "1473399"
  },
  {
    "text": "runtime a bunch of different utility libraries that you can use if some of you may have used j or seen java native",
    "start": "1473399",
    "end": "1480360"
  },
  {
    "text": "access around very similar we've taken some we takin jnr a little bit further",
    "start": "1480360",
    "end": "1486440"
  },
  {
    "text": "it's essentially a foreign function interface you've ever dealt with anything in the sea world that uses ffi",
    "start": "1486440",
    "end": "1491640"
  },
  {
    "text": "it's a foreign function interface for the JVM I mean there's the organization",
    "start": "1491640",
    "end": "1497070"
  },
  {
    "text": "on github where we keep all the projects jnr so what we can actually do with jnr is go from this situation where we have",
    "start": "1497070",
    "end": "1503610"
  },
  {
    "start": "1499000",
    "end": "2076000"
  },
  {
    "text": "to implement everything in purple here including stuff that's not in Java and has nothing to do with what we actually",
    "start": "1503610",
    "end": "1509520"
  },
  {
    "text": "want to get done to this we've got some user code that defines an endpoint in",
    "start": "1509520",
    "end": "1514860"
  },
  {
    "text": "some C library says here's the library here's the function here's the parameters and return value just let me",
    "start": "1514860",
    "end": "1520470"
  },
  {
    "text": "call the blasted thing the jnr stub underneath that figures out how to wire that into Java types the J and I call",
    "start": "1520470",
    "end": "1527460"
  },
  {
    "text": "actually makes the invocation and then all that logic is pre built for every platform so we can just ship a simple",
    "start": "1527460",
    "end": "1533610"
  },
  {
    "text": "library plus our two or three lines of Java code so this is what get pit actually looks like in jnr we define an",
    "start": "1533610",
    "end": "1540809"
  },
  {
    "text": "interface that has roughly the function prototype of the c function we want to",
    "start": "1540809",
    "end": "1545909"
  },
  {
    "text": "call we tell the library loader to create a version an implementation of this",
    "start": "1545909",
    "end": "1551070"
  },
  {
    "text": "interface based on the function coming out of some C library and then we have in hand an object that we can call those",
    "start": "1551070",
    "end": "1557790"
  },
  {
    "text": "see functions directly on much better than the J and I version i think i mentioned the layered run time that",
    "start": "1557790",
    "end": "1565440"
  },
  {
    "text": "we've got we're going to go through a few of these JN a kind of stops at the point I just showed you can call into",
    "start": "1565440",
    "end": "1571830"
  },
  {
    "text": "functions you can define function endpoints but there's not a whole lot of support code available for you first of",
    "start": "1571830",
    "end": "1578460"
  },
  {
    "text": "all I want to mention the platform's we don't want to have to rebuild this every time we go to a new system so we ship with support for all of these platforms",
    "start": "1578460",
    "end": "1585030"
  },
  {
    "text": "tiny little native stub that's in the jar unpacks itself as needed and then dynamically loads if anybody has a",
    "start": "1585030",
    "end": "1592830"
  },
  {
    "text": "platform that's not on there I'd love to hear it we do have yes openvms is is I",
    "start": "1592830",
    "end": "1599070"
  },
  {
    "text": "think working now for all you openvms users out there that really want to jump on that as400 z Linux mainframe Linux",
    "start": "1599070",
    "end": "1606630"
  },
  {
    "text": "we've got all the support for the stuff there are certainly other platforms that are come along but it's very easy for us",
    "start": "1606630",
    "end": "1612300"
  },
  {
    "text": "to build a small stub on any platform stuff it into our build and it's good to go so Jay NRF if I is basically the code",
    "start": "1612300",
    "end": "1619679"
  },
  {
    "text": "that I showed you that's the the jna a equivalent that's the basic library for for wiring up some C library and again",
    "start": "1619679",
    "end": "1627900"
  },
  {
    "text": "there's that example pretty easy to do and of course once you've got the basic plumbing wired up it's easy to add new",
    "start": "1627900",
    "end": "1634290"
  },
  {
    "text": "functions to this as they come along but of course a lot of these things are",
    "start": "1634290",
    "end": "1639840"
  },
  {
    "text": "standard operations that everyone's going to need like get pit we don't need to have everybody in the world write",
    "start": "1639840",
    "end": "1645059"
  },
  {
    "text": "their own get pit interface and their own load logic to get the get pit operation available so we built our",
    "start": "1645059",
    "end": "1651270"
  },
  {
    "text": "first layer on top of j NR j jnr posix which basically pre wires a whole bunch",
    "start": "1651270",
    "end": "1657059"
  },
  {
    "text": "of common POSIX functions that most users are probably going to need this is a small snippet of the ones that are",
    "start": "1657059",
    "end": "1663720"
  },
  {
    "text": "defined things like chmod chn that you still can't do as well through JVM api's",
    "start": "1663720",
    "end": "1670970"
  },
  {
    "text": "fork is on there and does not work very well you can imagine what sort of",
    "start": "1670970",
    "end": "1676260"
  },
  {
    "text": "horrible things forking a JVM would do you know things like geez GC threads that don't come along for the",
    "start": "1676260",
    "end": "1682320"
  },
  {
    "text": "ride kind of a problem what else is good our get paid call is in there kill doing",
    "start": "1682320",
    "end": "1691080"
  },
  {
    "text": "actual signal operations getting raw environment variables and setting by our variables into the current environment",
    "start": "1691080",
    "end": "1696770"
  },
  {
    "text": "down at the bottom hard to see here we've got POSIX spawn which is like the ultimate tool kit for spawning",
    "start": "1696770",
    "end": "1702930"
  },
  {
    "text": "subprocesses and it incidentally there's a Jan our process package that I'm",
    "start": "1702930",
    "end": "1708540"
  },
  {
    "text": "working on it that skips all of the process builder nonsense and goes straight to a raw spawn call so you get",
    "start": "1708540",
    "end": "1714780"
  },
  {
    "text": "real real channels out of that process you can do select you can actually control interactively a subprocess",
    "start": "1714780",
    "end": "1721320"
  },
  {
    "text": "pretty much impossible to do through the JV jdk process api's so here's what our",
    "start": "1721320",
    "end": "1726960"
  },
  {
    "text": "get pit looks like now we go to posix factory we create a new instance you can create your own handler you can make air",
    "start": "1726960",
    "end": "1734340"
  },
  {
    "text": "nose raise an exception rather than do a return value things along those lines whether you want the native features to",
    "start": "1734340",
    "end": "1741870"
  },
  {
    "text": "be enabled or use only the pure java emulation of POSIX api's and then at the",
    "start": "1741870",
    "end": "1746970"
  },
  {
    "text": "bottom once you've got it in hand you just do the call so we've got POSIX we got a POSIX instance for every JRuby",
    "start": "1746970",
    "end": "1752310"
  },
  {
    "text": "instance and that's where all of our logic goes to call through to the native functions so now we need to build a",
    "start": "1752310",
    "end": "1758730"
  },
  {
    "text": "little bit more on top of this so what if we do a c-level open call to open a file or a socket call to create a socket",
    "start": "1758730",
    "end": "1766110"
  },
  {
    "text": "at the native level and we've just got a file descriptor in hand well as not much we can do we can go back and do a read",
    "start": "1766110",
    "end": "1771330"
  },
  {
    "text": "call at the sea level and keep going out to the native side every time I want to do a read but then you get things like",
    "start": "1771330",
    "end": "1777030"
  },
  {
    "text": "select which are more complicated they're different across platforms the api's don't quite match there's low",
    "start": "1777030",
    "end": "1782370"
  },
  {
    "text": "level control over these file descriptors that you really can't do at the JVM level so that that's where we",
    "start": "1782370",
    "end": "1787530"
  },
  {
    "text": "get e NX ioj in our enx i/o extended native cross-platform I oh it's",
    "start": "1787530",
    "end": "1793110"
  },
  {
    "text": "basically niño compatible so it fits into all everywhere else we use channels and streams in the JVM but it does",
    "start": "1793110",
    "end": "1799650"
  },
  {
    "text": "native calls for every operation through jnr it does a native read it does in native k q or e poll for the select",
    "start": "1799650",
    "end": "1807030"
  },
  {
    "text": "logic it does the right things on all different platforms but you can just pass in a native file descriptor",
    "start": "1807030",
    "end": "1814140"
  },
  {
    "text": "one thing that's really fun to do with this you can take the you can take this and pass in any of the standard IO",
    "start": "1814140",
    "end": "1820500"
  },
  {
    "text": "descriptors and have fully interactive selectable standard i/o which you don't",
    "start": "1820500",
    "end": "1826020"
  },
  {
    "text": "actually have any way to do on the JVM today you can't select against standard in for example when you're waiting for",
    "start": "1826020",
    "end": "1831030"
  },
  {
    "text": "input trivial to do with this built on top of this again trying to add more of",
    "start": "1831030",
    "end": "1838200"
  },
  {
    "text": "these features we expect lots of people are going to need jnr unix socket uses jnr en xio provides a eunuch socket",
    "start": "1838200",
    "end": "1845190"
  },
  {
    "text": "implementation in an ni o channel just looks like any other niño channel in the system selectable works like a socket",
    "start": "1845190",
    "end": "1851760"
  },
  {
    "text": "it's perfect so what else can we do with this well honestly if we could have this",
    "start": "1851760",
    "end": "1857820"
  },
  {
    "text": "at the JVM level in the JDK itself we could do we could have done niño niño to",
    "start": "1857820",
    "end": "1863160"
  },
  {
    "text": "ourselves in Java basically we don't need to have the JVM include a bunch of",
    "start": "1863160",
    "end": "1869400"
  },
  {
    "text": "native code to do these things anymore that's really exciting especially for the JDK engineers that want to add some",
    "start": "1869400",
    "end": "1874830"
  },
  {
    "text": "of these new features especially like desktop integration have to wait for the next JVM version to include C code for",
    "start": "1874830",
    "end": "1880050"
  },
  {
    "text": "it that sucks we don't want to do that accessing unmanaged memory a lot of people go through unsafe to allocate a",
    "start": "1880050",
    "end": "1886110"
  },
  {
    "text": "chunk of memory and work with it directly we can do that tribulus call malloc that's all there is to it call",
    "start": "1886110",
    "end": "1892530"
  },
  {
    "text": "malloc and you get a pointer object back that lets you interact with that chunk of data out in the native world very",
    "start": "1892530",
    "end": "1898260"
  },
  {
    "text": "easily I mentioned selectable standard i/o and process io give much more interactivity to those streams and then",
    "start": "1898260",
    "end": "1904890"
  },
  {
    "text": "you know other socket types new API is new crypto libraries all the stuff we could do without ever writing a line of",
    "start": "1904890",
    "end": "1909960"
  },
  {
    "text": "c code so i think this needs to be in the JVM and we'll talk about that a little bit later performance-wise",
    "start": "1909960",
    "end": "1916170"
  },
  {
    "text": "getting back to why we don't use je na sadly we do a lot of work to make this",
    "start": "1916170",
    "end": "1922470"
  },
  {
    "text": "run as fast as possible the code leading up to the jni call is generated so ideally it's just one hop from your call",
    "start": "1922470",
    "end": "1928710"
  },
  {
    "text": "to the jni endpoint on the other side the C code we actually generate assembly on the fly link it into the JVM so that",
    "start": "1928710",
    "end": "1936330"
  },
  {
    "text": "it's hopefully one call from your native invocation in the Java side to the actual library so maybe two or three",
    "start": "1936330",
    "end": "1943200"
  },
  {
    "text": "hops total this is comparing je na and jnr je na is the pluses Jr's the circles",
    "start": "1943200",
    "end": "1951060"
  },
  {
    "text": "here and this is a logarithmic scale jnr is roughly an order of magnitude faster than J and so you can imagine when we're",
    "start": "1951060",
    "end": "1957720"
  },
  {
    "text": "using je na to do all this stuff before how much of a performance impact that actually was you can improve it further",
    "start": "1957720",
    "end": "1963810"
  },
  {
    "text": "there's ways that you can customize these calls if for example you're not at all interested in the air no value and",
    "start": "1963810",
    "end": "1969390"
  },
  {
    "text": "you don't need it to be saved off you can throw ignore error annotation on that and get another twenty five percent",
    "start": "1969390",
    "end": "1974850"
  },
  {
    "text": "or so out of it if it's a raw call that you know is unlikely to fail like a get pinned call there is certainly more to",
    "start": "1974850",
    "end": "1982080"
  },
  {
    "text": "do here though this is jnr with with and",
    "start": "1982080",
    "end": "1987300"
  },
  {
    "text": "without the ignore error jni in the circles unusually there that jnr with ignore errors faster than the jni",
    "start": "1987300",
    "end": "1993900"
  },
  {
    "text": "version I'm not sure why that is and then the GCC 03 potentially optimizing",
    "start": "1993900",
    "end": "2000020"
  },
  {
    "text": "some of this get paid call away but there is still non-trivial work being done here for the benchmark and it's",
    "start": "2000020",
    "end": "2005660"
  },
  {
    "text": "much faster than what we have at the JVM level just going through jnr so that's where project Panama comes in this is",
    "start": "2005660",
    "end": "2012170"
  },
  {
    "text": "JEP 191 fi for the JVM what we're working on right now or what the JVM",
    "start": "2012170",
    "end": "2018200"
  },
  {
    "text": "folks are working on right now is the JVM side of this how to actually make these native calls optimize fast so that",
    "start": "2018200",
    "end": "2024560"
  },
  {
    "text": "when they generate optimized assembly for the Java code it just goes straight through to a C call to get pit rather",
    "start": "2024560",
    "end": "2030470"
  },
  {
    "text": "than going through all of our extra plumbing that's possible to do when they're getting close to that now there's also possibilities of getting",
    "start": "2030470",
    "end": "2036380"
  },
  {
    "text": "better security for this having fine grains to control over I want to load the Lib C but I only want these",
    "start": "2036380",
    "end": "2041990"
  },
  {
    "text": "functions to be mappable nothing like that exists in the Java security model at the moment and then having method",
    "start": "2041990",
    "end": "2047960"
  },
  {
    "text": "handles for this is a native function make it optimized like a method handle and invoke dynamic so I can actually",
    "start": "2047960",
    "end": "2053240"
  },
  {
    "text": "have my Ruby code do a native call and it does the native call in the generated",
    "start": "2053240",
    "end": "2058340"
  },
  {
    "text": "assembly cool stuff and of course native memory layout manipulation there's lots of work on different structure shapes",
    "start": "2058340",
    "end": "2064580"
  },
  {
    "text": "and and value types and other things that are being done at the JVM level having more knowledge of what native",
    "start": "2064580",
    "end": "2071840"
  },
  {
    "text": "code wants to see will make the JVM build better structures for those the",
    "start": "2071840",
    "end": "2076940"
  },
  {
    "start": "2076000",
    "end": "2377000"
  },
  {
    "text": "final area I want to talk about Ruby equals objects and I mean lots and lots and lots of objects somebody did a",
    "start": "2076940",
    "end": "2084370"
  },
  {
    "text": "measure of how many how many strings a single rails request creates during the",
    "start": "2084370",
    "end": "2090139"
  },
  {
    "text": "process of handling it and it was thousands and thousands of strings I mean the amount of objects created for",
    "start": "2090140",
    "end": "2095960"
  },
  {
    "text": "just basic operations in Ruby where everything is an object it can be overwhelming and it really can swap a",
    "start": "2095960",
    "end": "2102080"
  },
  {
    "text": "system I I contend that allocation is really the root of all evil ninety-nine",
    "start": "2102080",
    "end": "2107660"
  },
  {
    "text": "percent of the performance problems that I diagnose in Ruby and Jay Ruby or other projects almost always boil down to",
    "start": "2107660",
    "end": "2113510"
  },
  {
    "text": "allocation you really need to keep an eye on that and so you need to monitor GC logs and whatnot it's more specific",
    "start": "2113510",
    "end": "2121280"
  },
  {
    "text": "case here jruby 1 dot 0 included a feature by default called object space",
    "start": "2121280",
    "end": "2126370"
  },
  {
    "text": "Ruby object space allows you to walk every object in the heap and you know do",
    "start": "2126370",
    "end": "2132410"
  },
  {
    "text": "whatever calculation you want on them you can go look for all I o objects or look for all strings or whatever in",
    "start": "2132410",
    "end": "2137900"
  },
  {
    "text": "order for us to implement this on the JVM we could use the debugging api's but then we'd have to have debugging api's",
    "start": "2137900",
    "end": "2143450"
  },
  {
    "text": "turned on all the time so initially we implemented it by having a separate week",
    "start": "2143450",
    "end": "2148730"
  },
  {
    "text": "graph a week tree of all of these different objects with a little wrapper so that we could walk our structure in",
    "start": "2148730",
    "end": "2155720"
  },
  {
    "text": "memory and that would see all the objects that have been created and ideally if their weekly referenced they",
    "start": "2155720",
    "end": "2161390"
  },
  {
    "text": "should go away once it's been garbage collected massive performance hit from that every object that we create had to",
    "start": "2161390",
    "end": "2167690"
  },
  {
    "text": "have a second double so that we'd be able to object spacewalk it and it's for a feature that's only used largely for",
    "start": "2167690",
    "end": "2173510"
  },
  {
    "text": "debugging or exploration not used for typical runtime execution of the system",
    "start": "2173510",
    "end": "2178850"
  },
  {
    "text": "did kill any application if you use it at runtime even on the standard implementation so that was our first big",
    "start": "2178850",
    "end": "2184670"
  },
  {
    "text": "boost we were like we just can't do this sorry Ruby guys this is going to be disabled by default even at the JVM",
    "start": "2184670",
    "end": "2191450"
  },
  {
    "text": "level this isn't going to be efficient for us to do this here's our actually",
    "start": "2191450",
    "end": "2196580"
  },
  {
    "text": "he's the G some of the GC output for when we had object space enabled and note that each of these there was 20 28",
    "start": "2196580",
    "end": "2203330"
  },
  {
    "text": "more of these lines we were pushing about 1.8 giga second through the memory pipeline and on my system here the max",
    "start": "2203330",
    "end": "2211840"
  },
  {
    "text": "bandwidth i'm getting is about 10 gig and so this is taking almost twenty percent of the",
    "start": "2211840",
    "end": "2217940"
  },
  {
    "text": "memory bandwidth of the system for a simple benchmark in one application obviously not going to work this is",
    "start": "2217940",
    "end": "2223550"
  },
  {
    "text": "after we decided to turn off object space by default very little evacuation happening here we're not burning through",
    "start": "2223550",
    "end": "2229490"
  },
  {
    "text": "objects nearly as fast so now there are things that are hard to fix unfortunately closures and blocks they",
    "start": "2229490",
    "end": "2235700"
  },
  {
    "text": "need to hold on to and be able to modify surrounding methods surrounding variables and so on so those need to be",
    "start": "2235700",
    "end": "2241640"
  },
  {
    "text": "in a heap structure somewhere there's no way for us to read across calls and see local variables in a method from a",
    "start": "2241640",
    "end": "2247610"
  },
  {
    "text": "closure numerics in JRuby are still all objects so every time you do one plus",
    "start": "2247610",
    "end": "2254540"
  },
  {
    "text": "one will create a to object as a result we are going to be working on some specialization above the JVM level but",
    "start": "2254540",
    "end": "2261740"
  },
  {
    "text": "ideally we'd like the JVM to be able to see this and do it for us hopefully that coming that's coming down the line and",
    "start": "2261740",
    "end": "2266990"
  },
  {
    "text": "then there's a lot of Ruby code that looks like this we've got these transient data structures that are used",
    "start": "2266990",
    "end": "2272270"
  },
  {
    "text": "to do some simple operation very convenient api's here we're going to take each of these objects we're going",
    "start": "2272270",
    "end": "2277760"
  },
  {
    "text": "to call 2's on them to turn them into strings sort them and then get the first one out of that now unfortunately this",
    "start": "2277760",
    "end": "2284000"
  },
  {
    "text": "is going to create a bunch of separate data structures internally we've got the map result that's the 2's call we've got",
    "start": "2284000",
    "end": "2290360"
  },
  {
    "text": "the the new collection that's a that's a sorted result and then finally we pull one value out I ideally we'd be able to",
    "start": "2290360",
    "end": "2298370"
  },
  {
    "text": "optimize through all that and just do the logic that does this sort the call and the sorting without the intermediate",
    "start": "2298370",
    "end": "2304160"
  },
  {
    "text": "objects and this is also very difficult to do on the JVM right now we can make",
    "start": "2304160",
    "end": "2309170"
  },
  {
    "text": "it lazy but that still doesn't help a whole lot because we're creating a lazy enumerator in the middle ideally there should be no objects created here other",
    "start": "2309170",
    "end": "2315620"
  },
  {
    "text": "than what the 2's call does itself can't do that on the JVM right now so help us",
    "start": "2315620",
    "end": "2321230"
  },
  {
    "text": "jbm well it does include a feature called escape analysis which i believe is enabled by default in the Java 8",
    "start": "2321230",
    "end": "2327230"
  },
  {
    "text": "builds and the general idea here is that if it can see an object never leaves a",
    "start": "2327230",
    "end": "2332330"
  },
  {
    "text": "piece of code and is never visible across threads it will eliminate the actual allocation of that object and",
    "start": "2332330",
    "end": "2337940"
  },
  {
    "text": "just use the data that's inside it and then recursively if those are objects",
    "start": "2337940",
    "end": "2343100"
  },
  {
    "text": "and they're never they never leave this scope eventually you get down to just primitive register values that optimize",
    "start": "2343100",
    "end": "2348620"
  },
  {
    "text": "the way you want them to unfortunately this fails to work for us in pretty much every case primarily because the escape analysis in",
    "start": "2348620",
    "end": "2356460"
  },
  {
    "text": "hot spot right now can't work across any branch which I mean every one of our",
    "start": "2356460",
    "end": "2362970"
  },
  {
    "text": "calls has a branch to at least see that we've still got the right method cached so every method breaks escape analysis",
    "start": "2362970",
    "end": "2369840"
  },
  {
    "text": "in JRuby in the very simple form that's on the JVM hopefully there's improvements on the way I don't know",
    "start": "2369840",
    "end": "2375510"
  },
  {
    "text": "what the status of that is so this brings us to another framework that's been helping us bridge deal with some of",
    "start": "2375510",
    "end": "2382530"
  },
  {
    "start": "2377000",
    "end": "2818000"
  },
  {
    "text": "these allocation issues truffle so we start out we look at what it takes to actually build a language on the JVM and",
    "start": "2382530",
    "end": "2389280"
  },
  {
    "text": "this could be a dynamic language of static language whatever you want the same basic steps apply we have our JVM",
    "start": "2389280",
    "end": "2397260"
  },
  {
    "text": "language that we've parsed and possibly turned into some bytecode form maybe we have just have an interpreter to that's",
    "start": "2397260",
    "end": "2403230"
  },
  {
    "text": "fine but we're going to take the case where we take a JVM language we compile it into byte code and then toss it to the JVM to run the JVM is going to throw",
    "start": "2403230",
    "end": "2410640"
  },
  {
    "text": "that into a bytecode interpreter for a while it's going to profile it optimize it throw it into the JIT and then",
    "start": "2410640",
    "end": "2417000"
  },
  {
    "text": "eventually we get native code that comes out the back now the problem is that all that magic in the middle the cool stuff",
    "start": "2417000",
    "end": "2422400"
  },
  {
    "text": "we'd have no control over there's no way for you to give compile hints to the JVM",
    "start": "2422400",
    "end": "2428300"
  },
  {
    "text": "there's no way for you to tweak it at runtime you can tweak some of the",
    "start": "2428300",
    "end": "2433350"
  },
  {
    "text": "settings some of the the metrics it uses at the command line but no way to change it at runtime so we have no control out",
    "start": "2433350",
    "end": "2440520"
  },
  {
    "text": "of this on this section and this is where it gets very frustrating for us we try to find a way to form fit Ruby code",
    "start": "2440520",
    "end": "2448320"
  },
  {
    "text": "for what we know the JVM can do that's not what that's not what we want so what if the JVM jit optimizer we're actually",
    "start": "2448320",
    "end": "2454920"
  },
  {
    "text": "written in Java and we could customize it and call in two different pieces and and change the way it optimizes our",
    "start": "2454920",
    "end": "2460260"
  },
  {
    "text": "language and that's where growl comes in growl as a project out of Oracle labs a hundred percent Java essentially you",
    "start": "2460260",
    "end": "2468060"
  },
  {
    "text": "can think of it as hotspot ported to Java and then running on top of the JVM it can either admit assembly or it can",
    "start": "2468060",
    "end": "2474720"
  },
  {
    "text": "actually output hotspot ir which is the intermediate form hotspot uses to generate its code so you'd have Grall do",
    "start": "2474720",
    "end": "2480780"
  },
  {
    "text": "its work hotspot do its work and then finally you get native code at the bottom but you can directly control all",
    "start": "2480780",
    "end": "2486450"
  },
  {
    "text": "this code generation and you don't have to even you don't have to use JVM bytecode which can be sometimes a blunt tool you can say much more directly I",
    "start": "2486450",
    "end": "2493020"
  },
  {
    "text": "want to access this memory I want to call this function so we look at this",
    "start": "2493020",
    "end": "2498060"
  },
  {
    "text": "with the grawl setup we've got our JVM language instead we generate a growl",
    "start": "2498060",
    "end": "2503700"
  },
  {
    "text": "intermediate representation we use growls bytecode essentially that's a",
    "start": "2503700",
    "end": "2509220"
  },
  {
    "text": "goes into growls optimizer and again this is all Java code so we can plug into this process and add our own",
    "start": "2509220",
    "end": "2514950"
  },
  {
    "text": "optimizations that our language specific make things optimized more like Ruby should optimize and then eventually we",
    "start": "2514950",
    "end": "2521310"
  },
  {
    "text": "do get our native code out the back but we get a lot more control over the process now in force the problem here is",
    "start": "2521310",
    "end": "2527700"
  },
  {
    "text": "that not everybody is a compiler writer and this is a very low level very rich a",
    "start": "2527700",
    "end": "2532980"
  },
  {
    "text": "very complicated I are within brawl as you can imagine this is bridging from the Java world to actual native",
    "start": "2532980",
    "end": "2539640"
  },
  {
    "text": "operations CPU level operations so there's a lot of understanding required to actually write crawl I are we need",
    "start": "2539640",
    "end": "2546359"
  },
  {
    "text": "something a little bit better than this too so the dream is that we design the language we've got some amount of steps",
    "start": "2546359",
    "end": "2552060"
  },
  {
    "text": "in the middle and at some point in the future everybody loves our language and we travel around the world to talk about",
    "start": "2552060",
    "end": "2557220"
  },
  {
    "text": "it what we really want this to be is the absolute minimum amount of work right",
    "start": "2557220",
    "end": "2562740"
  },
  {
    "text": "the interpreter and we're done everybody can write an interpreter probably everybody in here has written some sort",
    "start": "2562740",
    "end": "2567839"
  },
  {
    "text": "of interpreter for a general-purpose language or a specific language at some point in their life if we could just do",
    "start": "2567839",
    "end": "2574260"
  },
  {
    "text": "that and then have their language be as fast as everything that'd be great and that's where truffle comes in truffle is",
    "start": "2574260",
    "end": "2581130"
  },
  {
    "text": "a language framework built on top of Grall it all you have to do is create",
    "start": "2581130",
    "end": "2586349"
  },
  {
    "text": "your parser so you know what your language looks like produce an AST and the AST gets marked up with some",
    "start": "2586349",
    "end": "2591990"
  },
  {
    "text": "annotations in truffle to say here's an integer path here's a long path here's how you here's a data structure that's",
    "start": "2591990",
    "end": "2598829"
  },
  {
    "text": "only going to be used temporarily and based on the interpreter and the way",
    "start": "2598829",
    "end": "2604349"
  },
  {
    "text": "that it runs truffle can actually do all that work in grow for you and optimize",
    "start": "2604349",
    "end": "2609810"
  },
  {
    "text": "it as if it were written specifically is that the vm were written specifically for your language it's really amazing a",
    "start": "2609810",
    "end": "2615540"
  },
  {
    "text": "very similar approach to what they do in pie pie if anyone's familiar with that you write interpreter",
    "start": "2615540",
    "end": "2620590"
  },
  {
    "text": "and based on how the interpreter runs it can generate a jit for you really cool so all we really need to do here is",
    "start": "2620590",
    "end": "2627810"
  },
  {
    "text": "write our jvm language and create a truffle AST that goes into Grall",
    "start": "2627810",
    "end": "2633000"
  },
  {
    "text": "optimizes down and we've got fast native code that's based on our languages actual semantics Chris Seaton is working",
    "start": "2633000",
    "end": "2640930"
  },
  {
    "text": "with Oracle labs right now on ruby implementation as part of JRuby using truffle it's called Ruby truffle before",
    "start": "2640930",
    "end": "2648040"
  },
  {
    "text": "we kind of call it jruby plus truffle now because we I I guess I talked to the",
    "start": "2648040",
    "end": "2653650"
  },
  {
    "text": "right people we managed to convince Oracle to take this closed source ruby implementation that was amazingly fast",
    "start": "2653650",
    "end": "2658960"
  },
  {
    "text": "and give it to us under our licenses I'm shocked that actually happened but it is",
    "start": "2658960",
    "end": "2665110"
  },
  {
    "text": "part of JRuby now and it will be released with JRuby 9000 and how much better is it this is a graph on the far",
    "start": "2665110",
    "end": "2671950"
  },
  {
    "text": "left hard to read their JRuby 17 with invoke dynamic which as I showed is four or five times as fast as the sea",
    "start": "2671950",
    "end": "2677920"
  },
  {
    "text": "implementation of Ruby and on the right the far right that's truffle Ruby",
    "start": "2677920",
    "end": "2683080"
  },
  {
    "text": "truffle in some cases as much as 20 times faster than JRuby plus invoke dynamic and this is ninety percent of",
    "start": "2683080",
    "end": "2690490"
  },
  {
    "text": "this improvement is because they can get rid of all those extra objects because it sees through allocations much better",
    "start": "2690490",
    "end": "2696910"
  },
  {
    "text": "than the JVM does and we can give it the hints that it needs to wipe those objects away so I mentioned Ruby truffle",
    "start": "2696910",
    "end": "2703450"
  },
  {
    "text": "is part of JRuby now and will be released in JRuby 9000 there are many other languages in the works and it's",
    "start": "2703450",
    "end": "2709030"
  },
  {
    "text": "actually really easy to build languages on top of truffle just the trivial case an AST an interpreter that just uses",
    "start": "2709030",
    "end": "2715810"
  },
  {
    "text": "object it'll still actually optimize pretty well then you can throw in your specializations as you need them it",
    "start": "2715810",
    "end": "2721600"
  },
  {
    "text": "might be become part of OpenJDK it's possibility in the future it's not likely to happen in java 9 given the",
    "start": "2721600",
    "end": "2727600"
  },
  {
    "text": "time frame this is the other happened this is that it's also forcing the hotspot folks to think about priorities",
    "start": "2727600",
    "end": "2733270"
  },
  {
    "text": "hopefully the hotspot guys will realize that you know Escape analysis with in",
    "start": "2733270",
    "end": "2738550"
  },
  {
    "text": "with the with unclear future for those objects is something we actually need we need to be able to do escape analysis",
    "start": "2738550",
    "end": "2744400"
  },
  {
    "text": "even if we can't see through all the code alright so wrapping up here so what",
    "start": "2744400",
    "end": "2750400"
  },
  {
    "text": "we learned I mean I can't really say what you've learned hopefully you've gotten something out of this what I've learned over a decade of",
    "start": "2750400",
    "end": "2756170"
  },
  {
    "text": "working on JRuby is that there's really nothing that's impossible on the JVM if we're willing to route around it a",
    "start": "2756170",
    "end": "2762560"
  },
  {
    "text": "little bit and I've also learned that the folks that work on the JVM and work on the JDK are extremely interested in",
    "start": "2762560",
    "end": "2769329"
  },
  {
    "text": "avoiding those workarounds and making it possible for us to just use the JVM as",
    "start": "2769329",
    "end": "2774800"
  },
  {
    "text": "is and have all this all these features come along without extra libraries an extra work so hopefully that's what the",
    "start": "2774800",
    "end": "2781130"
  },
  {
    "text": "future is going to look like the JVM does have a problem but we can fix them and in the interim folks like us so help",
    "start": "2781130",
    "end": "2788270"
  },
  {
    "text": "you route around them now one thing I want to the last thing I'll say here is this is all open source you really can",
    "start": "2788270",
    "end": "2795140"
  },
  {
    "text": "help with this gras truffle all the jnr stuff obviously JRuby JRuby plus truffle",
    "start": "2795140",
    "end": "2801200"
  },
  {
    "text": "the JVM itself with that with an open source with a little bit of knowledge nothing is impossible on the platform",
    "start": "2801200",
    "end": "2808280"
  },
  {
    "text": "and we can make all this stuff reality for the future thanks",
    "start": "2808280",
    "end": "2813880"
  }
]