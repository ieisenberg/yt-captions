[
  {
    "text": "[Music]",
    "start": "980",
    "end": "7849"
  },
  {
    "text": "welcome to this talk on functional programming in Kotlin how many of you know Carl in Nice how many of you have",
    "start": "12440",
    "end": "20490"
  },
  {
    "text": "never seen it how many of you have never heard about it I'm near you in the wrong",
    "start": "20490",
    "end": "26340"
  },
  {
    "text": "room ok does who who did Kotlin before May",
    "start": "26340",
    "end": "34290"
  },
  {
    "text": "17th 2007 teen right that was the day",
    "start": "34290",
    "end": "39719"
  },
  {
    "text": "that Google announced that I about Scotland who heard of it after that",
    "start": "39719",
    "end": "44879"
  },
  {
    "text": "announcement and not before yeah quite a few of you like that that just confirms",
    "start": "44879",
    "end": "51270"
  },
  {
    "text": "that I wasted six years of my life just talking about katli thank you anyway I could've just waited and waited for",
    "start": "51270",
    "end": "57719"
  },
  {
    "text": "them to say something so I'm gonna give you a brief introduction in in terms of",
    "start": "57719",
    "end": "62820"
  },
  {
    "text": "functional programming with Kotlin what is there what there is not what you can",
    "start": "62820",
    "end": "68670"
  },
  {
    "text": "use through third parties and yeah just",
    "start": "68670",
    "end": "73770"
  },
  {
    "text": "give you enough so that you can maybe look into it a little bit more if you're interested like this isn't the session",
    "start": "73770",
    "end": "79320"
  },
  {
    "text": "for you to actually learn something right I mean like seriously conference talks aren't about learning are they did",
    "start": "79320",
    "end": "86880"
  },
  {
    "text": "I say that anyway I always like to start with why right so",
    "start": "86880",
    "end": "94470"
  },
  {
    "text": "I'll start with why over here take a look at this code don't judge me it was it's only demo code which is like",
    "start": "94470",
    "end": "102720"
  },
  {
    "text": "all the code I write and tell me as soon as you know what it does raise your",
    "start": "102720",
    "end": "108600"
  },
  {
    "text": "hands and don't shout don't like say oh I know what it does I'll tell you just just raise your hands and tell me you",
    "start": "108600",
    "end": "114390"
  },
  {
    "text": "know what it does and if you were in my workshop yesterday don't raise your hand because that would be unfair",
    "start": "114390",
    "end": "122060"
  },
  {
    "text": "anyone know we got one two three okay thank you put your hands down down I'm",
    "start": "131640",
    "end": "138120"
  },
  {
    "text": "good take a look at this raise your hands when you know what it does right so yeah",
    "start": "138120",
    "end": "147420"
  },
  {
    "text": "we get the hands raising much quicker so when people say why functional programming",
    "start": "147420",
    "end": "152550"
  },
  {
    "text": "well because it's hip right it's it's the hipster thing to do nowadays but also because it's potentially easier for",
    "start": "152550",
    "end": "159630"
  },
  {
    "text": "us to understand right the idea behind functional programming is to remove certain things and add certain things",
    "start": "159630",
    "end": "166230"
  },
  {
    "text": "that make our code a little bit more understandable and comprehensible so if",
    "start": "166230",
    "end": "173190"
  },
  {
    "text": "you look at these two pieces of code it does something also is exactly the same as it does something sure that the",
    "start": "173190",
    "end": "178740"
  },
  {
    "text": "return type might be different but the principle of what it does is exactly the same and if you look take a look at this",
    "start": "178740",
    "end": "185400"
  },
  {
    "text": "code what you're looking at is a whole bunch of code where in your head you have to have this entire mental model of",
    "start": "185400",
    "end": "192420"
  },
  {
    "text": "what exactly is going on right I have to have a little storage area over here of my cache to cache my variables to figure",
    "start": "192420",
    "end": "199800"
  },
  {
    "text": "out what is going on with those variables increment them as they go along figure out what the operations are doing",
    "start": "199800",
    "end": "205080"
  },
  {
    "text": "what each operation is doing whether it's a statement whether it's an expression whether it's what is returning store that and try and",
    "start": "205080",
    "end": "211890"
  },
  {
    "text": "basically become a compiler right and become the application to interpret this",
    "start": "211890",
    "end": "217280"
  },
  {
    "text": "whereas with this one it's essentially the same thing the only difference is",
    "start": "217280",
    "end": "222959"
  },
  {
    "text": "that I've abstracted some of that functionality into some other thing",
    "start": "222959",
    "end": "229019"
  },
  {
    "text": "which is called a function right and I've given those functions good names so",
    "start": "229019",
    "end": "234030"
  },
  {
    "text": "everybody kind of understands what the concept of group-by means even if they do not understand the syntax of Kotlin",
    "start": "234030",
    "end": "240269"
  },
  {
    "text": "or they do not understand the concept of what the actual function group is but",
    "start": "240269",
    "end": "245430"
  },
  {
    "text": "they pretty much know what it means right and pair everyone knows what pair does and everyone knows what not you",
    "start": "245430",
    "end": "251340"
  },
  {
    "text": "don't maybe not know what map does but generally as soon as you understand what these functions do this becomes much",
    "start": "251340",
    "end": "257790"
  },
  {
    "text": "easier to follow and that is one of the goals of functional programming I mean every person have their has their own",
    "start": "257790",
    "end": "264330"
  },
  {
    "text": "goal functional programming but the benefits that I found in functional programming are about essentially raising the level",
    "start": "264330",
    "end": "270720"
  },
  {
    "text": "of abstraction making those abstractions essentially functions and then using that to write more expressive and",
    "start": "270720",
    "end": "277550"
  },
  {
    "text": "concise code and there's an important factor here because concise doesn't",
    "start": "277550",
    "end": "282570"
  },
  {
    "text": "always lead to comprehensible right we can't have concise code take one of those esoteric languages on on Wikipedia",
    "start": "282570",
    "end": "290100"
  },
  {
    "text": "that starts with a b and finishes with a k and you know that that is very condensed but it's not understandable so",
    "start": "290100",
    "end": "297919"
  },
  {
    "text": "this is about still keeping code that is comprehensible right and that's where i",
    "start": "297919",
    "end": "303690"
  },
  {
    "text": "think the the what you would call the you know because often people say like if i'm doing functional programming",
    "start": "303690",
    "end": "310730"
  },
  {
    "text": "where do I start where do I end what is the you know the the the ultimate",
    "start": "310730",
    "end": "316220"
  },
  {
    "text": "epiphany of functional programming where is it it's just the journey that each",
    "start": "316220",
    "end": "321450"
  },
  {
    "text": "time you start to understand more and more and then when you understand these things more and more that's where you're",
    "start": "321450",
    "end": "326610"
  },
  {
    "text": "comfortable and that's where you can stay ok so now in terms of Kotlin what",
    "start": "326610",
    "end": "332669"
  },
  {
    "text": "we're gonna do is kind of show some of the functional aspects of Colin because Colin as you know is if you're not",
    "start": "332669",
    "end": "339150"
  },
  {
    "text": "familiar with Colin Colin is an object-oriented programming language with functional constructs what does that mean that means it's also a",
    "start": "339150",
    "end": "345120"
  },
  {
    "text": "functional language what is a functional language well there's many definitions it depends who you ask if you ask a",
    "start": "345120",
    "end": "351330"
  },
  {
    "text": "Haskell programmer generally they will say it's only Haskell if you ask a f-sharp programmer they'll say it's only",
    "start": "351330",
    "end": "356790"
  },
  {
    "text": "F sharp generally the the agreed sentiment is that any language that",
    "start": "356790",
    "end": "362250"
  },
  {
    "text": "gives support to functions as first-class citizens can be considered a functional language so what is",
    "start": "362250",
    "end": "369240"
  },
  {
    "text": "first-class citizens that the ability that I can essentially have functions that I can pass around as parameters",
    "start": "369240",
    "end": "374910"
  },
  {
    "text": "which give way to higher-order functions the ability to maybe have some sort of immutability in terms of state",
    "start": "374910",
    "end": "381690"
  },
  {
    "text": "management etc this function is called in a functional language by far it is of",
    "start": "381690",
    "end": "387000"
  },
  {
    "text": "course otherwise what what am I doing here like what are you doing here right you know I'm not gonna give a talk on",
    "start": "387000",
    "end": "392340"
  },
  {
    "text": "programming in calling functionally and use something like I don't know VB so",
    "start": "392340",
    "end": "398849"
  },
  {
    "text": "it is why that account functional because in calling you have the ability to do certain things okay and but let's",
    "start": "398849",
    "end": "405360"
  },
  {
    "text": "go through the basics in case you're not that familiar with Cortland over here so let me create a new file and not a",
    "start": "405360",
    "end": "412529"
  },
  {
    "text": "scratch file it's over here and we'll do column file live me I love naming stuff",
    "start": "412529",
    "end": "422789"
  },
  {
    "text": "okay so and what we're gonna see here is essentially some syntax for Kotla now",
    "start": "422789",
    "end": "429779"
  },
  {
    "text": "calling object-oriented so I have a class customer there you go that's a class you've just declared a class in",
    "start": "429779",
    "end": "435809"
  },
  {
    "text": "custom in Kotlin and I can create a function in Cortland as well that says",
    "start": "435809",
    "end": "441089"
  },
  {
    "text": "do print message and I'll have a value",
    "start": "441089",
    "end": "448499"
  },
  {
    "text": "that I'm passing in and then I can you know do whatever I want with that",
    "start": "448499",
    "end": "454129"
  },
  {
    "text": "parameter okay so this is the basic of a",
    "start": "454129",
    "end": "460019"
  },
  {
    "text": "function in in calling a function by default returns unit so if you do not specify unit it is assumed that it's",
    "start": "460019",
    "end": "467129"
  },
  {
    "text": "returning unit unit is exactly the same as void except it's not void there you go that's my explanation there the",
    "start": "467129",
    "end": "473759"
  },
  {
    "text": "difference is that unit is actually an object so if you're not familiar again object is in Cortland we can have",
    "start": "473759",
    "end": "479459"
  },
  {
    "text": "classes and you can create instance of classes and then you can also have objects which are kind of like Java",
    "start": "479459",
    "end": "485459"
  },
  {
    "text": "Script okay and please every time I say Java Script think about the good things",
    "start": "485459",
    "end": "490860"
  },
  {
    "text": "of JavaScript I never make the comparison of JavaScript as in all the hell that JavaScript is okay so it's",
    "start": "490860",
    "end": "497879"
  },
  {
    "text": "kind of like JavaScript in terms of an object now this actually means that's a",
    "start": "497879",
    "end": "503399"
  },
  {
    "text": "call and returns something in fact you know if I do four if I do result prints",
    "start": "503399",
    "end": "508589"
  },
  {
    "text": "message and passing some value and then I do a print line of result this is",
    "start": "508589",
    "end": "515159"
  },
  {
    "text": "going to give me back a value which is actually unit right so you can see that",
    "start": "515159",
    "end": "520229"
  },
  {
    "text": "it gives me back unit okay now in calling you can actually have a function",
    "start": "520229",
    "end": "526769"
  },
  {
    "text": "indicates that a function never returns and you do that by saying that it",
    "start": "526769",
    "end": "532649"
  },
  {
    "text": "turns nothing and when I say nothing I literally mean nothing so you write nothing and then that function never",
    "start": "532649",
    "end": "538319"
  },
  {
    "text": "returns so you can see that this immediately says that this well in that",
    "start": "538319",
    "end": "543360"
  },
  {
    "text": "case just yet that one doesn't work and here you can see that this is",
    "start": "543360",
    "end": "549290"
  },
  {
    "text": "unreachable code right because by all accounts now the compiler interprets",
    "start": "549290",
    "end": "554699"
  },
  {
    "text": "that that function is never going to return so you wonder why would I ever want to do that well for instance",
    "start": "554699",
    "end": "559920"
  },
  {
    "text": "there's one function built into the standard library which is called to do implement this and if you go to do you",
    "start": "559920",
    "end": "567149"
  },
  {
    "text": "can see that it essentially throws a not implemented error exception and it returns nothing okay so if anyone ever",
    "start": "567149",
    "end": "574920"
  },
  {
    "text": "asks you what is the top-level object in Kotlin it's called any and they ask you what's the what's at the very bottom you",
    "start": "574920",
    "end": "581339"
  },
  {
    "text": "say nothing and it won't you turn in the truth and if you don't know you just say",
    "start": "581339",
    "end": "586980"
  },
  {
    "text": "nothing anyways well and yeah think you're right okay so in calling we try and be concise",
    "start": "586980",
    "end": "593040"
  },
  {
    "text": "I mean you can see how concise a class is so I can also do for instance a fun",
    "start": "593040",
    "end": "598139"
  },
  {
    "text": "sum if I write some X int y int I don't have to do something like this return X",
    "start": "598139",
    "end": "605670"
  },
  {
    "text": "plus y I can do it much shorter as a single expression function and just",
    "start": "605670",
    "end": "611339"
  },
  {
    "text": "return the value there type inference will now allow me to the type inference we'll know the return type based on the",
    "start": "611339",
    "end": "616889"
  },
  {
    "text": "parameter types and I can just express every function essentially as a single",
    "start": "616889",
    "end": "621929"
  },
  {
    "text": "expression function considering most of us now have 4k monitors we don't even have the limitation of 80 columns so you",
    "start": "621929",
    "end": "629189"
  },
  {
    "text": "can have really really really long single expression functions okay now this is great but one of the",
    "start": "629189",
    "end": "638069"
  },
  {
    "text": "things that I said around caught by the way that was a joke about the column so it's just I don't care if you don't",
    "start": "638069",
    "end": "644009"
  },
  {
    "text": "laugh on my jokes but sometimes people are like did he really say something that's stupid yes I did so in in Carlin",
    "start": "644009",
    "end": "652619"
  },
  {
    "text": "you know you couldn't consider it a functional language if we didn't have the ability to pass around functions which essentially leads to higher order",
    "start": "652619",
    "end": "659189"
  },
  {
    "text": "functions so now I have a higher order function in Kotlin I can write higher order and then this one is going to take",
    "start": "659189",
    "end": "665339"
  },
  {
    "text": "a a parameter and so I can say it's going to take a function and then I pass in",
    "start": "665339",
    "end": "673050"
  },
  {
    "text": "the actual signature of the function so in this case I'll say that this function is an int and it takes an Internet int",
    "start": "673050",
    "end": "678480"
  },
  {
    "text": "and returns an int right so essentially what this is saying is that this one is",
    "start": "678480",
    "end": "685160"
  },
  {
    "text": "what this one is is essentially taking a",
    "start": "686360",
    "end": "694260"
  },
  {
    "text": "function that takes two parameters of type integer and returns an integer okay by the way you can make this really cool",
    "start": "694260",
    "end": "700550"
  },
  {
    "text": "instead of writing funk I can actually put lambda watch this I'll put is that cool or what like if",
    "start": "700550",
    "end": "713070"
  },
  {
    "text": "you learn nothing else in this talk you know how to type lambdas now so that I'm",
    "start": "713070",
    "end": "719520"
  },
  {
    "text": "not gonna tell you how to do it but you know that is possible no it's just with a live templates anyway so this is",
    "start": "719520",
    "end": "726270"
  },
  {
    "text": "essentially the lambda which is passing in a high order function this is a high order function that is taking a",
    "start": "726270",
    "end": "732420"
  },
  {
    "text": "parameter which is another function so now I can call this higher order and I can pass in the lambda anything that",
    "start": "732420",
    "end": "737850"
  },
  {
    "text": "takes this signature to begin with I can pass in an existing function you dereference that you reference that in",
    "start": "737850",
    "end": "744480"
  },
  {
    "text": "Kotlin by just using colon colon some right so here I am passing in the function sum because it matches our",
    "start": "744480",
    "end": "751200"
  },
  {
    "text": "signature so I can pass this in if I want I can actually pass in a lambda and",
    "start": "751200",
    "end": "756680"
  },
  {
    "text": "there I'm having a lambda that is being passed in right and what is saying to me",
    "start": "756680",
    "end": "761910"
  },
  {
    "text": "is this this hint is essentially saying that you can do this in a more efficient way or a nicer way or more idiomatic way",
    "start": "761910",
    "end": "767190"
  },
  {
    "text": "in Kotlin which is that if a last parameter to a function is another function I don't have to enclose it in",
    "start": "767190",
    "end": "773310"
  },
  {
    "text": "the brackets right so I can just exclude this from the brackets and put it outside of the brackets right and the",
    "start": "773310",
    "end": "779430"
  },
  {
    "text": "brackets would go here now given that I don't have any other parameters I can just drop those brackets as well because",
    "start": "779430",
    "end": "785310"
  },
  {
    "text": "they're redundant okay in Collin if you have a single parameter lambda you can",
    "start": "785310",
    "end": "791760"
  },
  {
    "text": "also put that on multiple lines so you can do something like that and if you",
    "start": "791760",
    "end": "796920"
  },
  {
    "text": "have higher order functions which are just with single parameter so we have a",
    "start": "796920",
    "end": "802470"
  },
  {
    "text": "hospital which just takes a single parameter what you can do is write",
    "start": "802470",
    "end": "808399"
  },
  {
    "text": "Hospital of doing X is X plus y you can essentially just write it plus y okay so",
    "start": "808399",
    "end": "814889"
  },
  {
    "text": "single parameter lambdas can be used with it name instead of being explicit this gives me the similar if you are",
    "start": "814889",
    "end": "821579"
  },
  {
    "text": "familiar with groovy it's essentially the same thing right so these are how you declare higher-order functions and",
    "start": "821579",
    "end": "828119"
  },
  {
    "text": "how you can essentially like you know have your own now in the in the language itself we don't have any higher-order",
    "start": "828119",
    "end": "834449"
  },
  {
    "text": "functions as such we have all of that in the standard library which is a very small library that is part of the Kotlin",
    "start": "834449",
    "end": "840059"
  },
  {
    "text": "that ships as run time so for instance if I do numbers equals 1 to 100 I have a whole bunch of new functions here right",
    "start": "840059",
    "end": "847259"
  },
  {
    "text": "so for instance filter that I do filter 5 equals 0 and then on this I map that",
    "start": "847259",
    "end": "853649"
  },
  {
    "text": "to 20 and then on this for instance I can do a for each and print line the",
    "start": "853649",
    "end": "858899"
  },
  {
    "text": "actual result okay and now you get this nice little wonderful pipeline of",
    "start": "858899",
    "end": "863999"
  },
  {
    "text": "functions and you can say look I'm doing functional programming ok and then in about 10 years we'll go to this and",
    "start": "863999",
    "end": "869999"
  },
  {
    "text": "it'll be 60 lines and we'll wonder where we went wrong and we'll call it enterprise functional code ok but don't",
    "start": "869999",
    "end": "877829"
  },
  {
    "text": "worry by that time something else will come around that we'll be promoting so what will always have a job in this life",
    "start": "877829",
    "end": "883529"
  },
  {
    "text": "right we will always have a job right we are part of destroying things that we later come and fix ourselves ok so all",
    "start": "883529",
    "end": "891660"
  },
  {
    "text": "of these are part of the standard library which it's all defined as extension functions so it's very small",
    "start": "891660",
    "end": "898829"
  },
  {
    "text": "and available on a whole bunch of different things extension functions for those that are not familiar in in Kotlin you can have",
    "start": "898829",
    "end": "905850"
  },
  {
    "text": "any class you can have any extend any type of new functionality so if I have a",
    "start": "905850",
    "end": "911179"
  },
  {
    "text": "string class that I want to do a to camel case I can write to camel case and",
    "start": "911179",
    "end": "916889"
  },
  {
    "text": "now basically this is implemented now what happens is that if I take any",
    "start": "916889",
    "end": "924089"
  },
  {
    "text": "string I have the - camel case function right so this is now available to me",
    "start": "924089",
    "end": "929339"
  },
  {
    "text": "anywhere where that it is defined in the package so these filter not that you see here they're all",
    "start": "929339",
    "end": "936029"
  },
  {
    "text": "essentially extension functions on iterables generica timbrels so they're",
    "start": "936029",
    "end": "941250"
  },
  {
    "text": "available pretty much everything okay this is kind of nice and also gives us a whole bunch of functionality inside the",
    "start": "941250",
    "end": "946950"
  },
  {
    "text": "standard library around strings and fun and extension functions around all of the strings stuff so which is quite which is pretty decent also one thing",
    "start": "946950",
    "end": "954540"
  },
  {
    "text": "that we're going to be using that you'll notice is well in in Kotlin you can actually call functions within fix",
    "start": "954540",
    "end": "960180"
  },
  {
    "text": "notation so if I have an extension function that we can call is the same as that takes a parameter which is value",
    "start": "960180",
    "end": "966060"
  },
  {
    "text": "that checks whether this equals value and this is the actual instance then I",
    "start": "966060",
    "end": "972240"
  },
  {
    "text": "can write it like this you know me is same as me and also I can write it in",
    "start": "972240",
    "end": "979380"
  },
  {
    "text": "infix notation okay I can write it like that ignore the error so it's same as",
    "start": "979380",
    "end": "989459"
  },
  {
    "text": "right you so you add the in fix and then you can write it essentially the same way so this looks beautiful right this",
    "start": "989459",
    "end": "995550"
  },
  {
    "text": "is no no okay now before diving more",
    "start": "995550",
    "end": "1001279"
  },
  {
    "text": "into into the ends of the functions let me just point out a couple of things",
    "start": "1001279",
    "end": "1006370"
  },
  {
    "text": "first of all well anybody know what a",
    "start": "1006370",
    "end": "1011540"
  },
  {
    "text": "lambda is I just showed one right there you go what's an anonymous function it's a",
    "start": "1011540",
    "end": "1019279"
  },
  {
    "text": "lambda right so if you go to if you go to Wikipedia which is the source of truth and you say whiskey glass",
    "start": "1019279",
    "end": "1026300"
  },
  {
    "text": "I love whiskey and you say you know lambda and you come down oh look I got",
    "start": "1026300",
    "end": "1033380"
  },
  {
    "text": "it right lambda lambda computers in",
    "start": "1033380",
    "end": "1040730"
  },
  {
    "text": "computer science say you got anyway in Wikipedia it says",
    "start": "1040730",
    "end": "1047870"
  },
  {
    "text": "that lambda otherwise known as an anonymous function is blah blah blah now in all languages lambdas are the same as",
    "start": "1047870",
    "end": "1056120"
  },
  {
    "text": "anonymous functions except in calling in column we actually have anonymous functions as well okay so if you want to",
    "start": "1056120",
    "end": "1062960"
  },
  {
    "text": "do anonymous functions you can actually type something like like this over here",
    "start": "1062960",
    "end": "1069800"
  },
  {
    "text": "so for instance if I have my higher order my higher order function right so",
    "start": "1069800",
    "end": "1078380"
  },
  {
    "text": "instead of passing in a lambda like that I can pass in a fun X Y and then inside",
    "start": "1078380",
    "end": "1084170"
  },
  {
    "text": "of that for example do return X plus y okay and why is that give me a and and",
    "start": "1084170",
    "end": "1094550"
  },
  {
    "text": "unit and oh there you go okay so that is",
    "start": "1094550",
    "end": "1104030"
  },
  {
    "text": "a different to a lambda in Kotlin so you have the concept of anonymous function then you have the concept of lambdas and",
    "start": "1104030",
    "end": "1111140"
  },
  {
    "text": "this is important because lambdas have certain behaviors that it's important",
    "start": "1111140",
    "end": "1116780"
  },
  {
    "text": "for you to to know so for instance if I have a function that is a container and",
    "start": "1116780",
    "end": "1123170"
  },
  {
    "text": "I don't mean docker because there's way more containers and are nowadays and if I pass in for example a lambda over here",
    "start": "1123170",
    "end": "1130190"
  },
  {
    "text": "that takes for instance an int and returns an int right and then I'll do",
    "start": "1130190",
    "end": "1136700"
  },
  {
    "text": "something like you know numbers well numbers equals 1 to 100 and then I'll do",
    "start": "1136700",
    "end": "1144290"
  },
  {
    "text": "numbers for each then if numbers is",
    "start": "1144290",
    "end": "1152350"
  },
  {
    "text": "dividable by 0 right I'm going to do a",
    "start": "1152350",
    "end": "1157840"
  },
  {
    "text": "return ok so if I if you take a look at that code and let's just we don't even",
    "start": "1157840",
    "end": "1166790"
  },
  {
    "text": "need this so take a look at that code right that is a that is a lambda expression in in Kotlin which I'm",
    "start": "1166790",
    "end": "1171830"
  },
  {
    "text": "passing to for each for each is a higher-order function and I say to you return and then I'm gonna write here for",
    "start": "1171830",
    "end": "1178220"
  },
  {
    "text": "example print line hello right and then let's format this so I'm gonna write",
    "start": "1178220",
    "end": "1185060"
  },
  {
    "text": "print line hello there okay now if I",
    "start": "1185060",
    "end": "1190850"
  },
  {
    "text": "take a look if I'd say to you if I run that code container what is it gonna",
    "start": "1190850",
    "end": "1196340"
  },
  {
    "text": "print on the screen what would you intuitively say well it's",
    "start": "1196340",
    "end": "1203720"
  },
  {
    "text": "either going to print hello or nothing which one is it going to be hello hello",
    "start": "1203720",
    "end": "1212770"
  },
  {
    "text": "hi it's me No so yes no it's actually not gonna print",
    "start": "1212770",
    "end": "1219440"
  },
  {
    "text": "hello I never like why like this is completely counterintuitive right I'm in the forage I'm in a lambda I'm gonna do",
    "start": "1219440",
    "end": "1226010"
  },
  {
    "text": "a return why is it not gonna print hello well the reason it's not going to be in hello is because in Kotlin when you",
    "start": "1226010",
    "end": "1233390"
  },
  {
    "text": "return from a lambda you do a non-local return you do not do a local return so",
    "start": "1233390",
    "end": "1239540"
  },
  {
    "text": "that means that this is going to return outside of the container function and like way why why is this well let's take",
    "start": "1239540",
    "end": "1246680"
  },
  {
    "text": "a look at the implementation of for each take a look at the implementation for each it is looping over elements it's",
    "start": "1246680",
    "end": "1254570"
  },
  {
    "text": "just a higher-order function however it's got this little thing over here called inline right now in line is a",
    "start": "1254570",
    "end": "1260870"
  },
  {
    "text": "very fancy word for copy-paste so when you actually invoke this what's going to happen it's that it's going to copy and",
    "start": "1260870",
    "end": "1268010"
  },
  {
    "text": "paste that code into the actual content the the calling code so it's not going to have like a call stack calling",
    "start": "1268010",
    "end": "1274310"
  },
  {
    "text": "another function it's going to copy and paste that code so there is no outer function there is just one function",
    "start": "1274310",
    "end": "1280010"
  },
  {
    "text": "which is container and when you do a return it's gonna come out of that container right what happens if I don't",
    "start": "1280010",
    "end": "1287210"
  },
  {
    "text": "have an inline function so if I you know declare my own function over here or an",
    "start": "1287210",
    "end": "1294050"
  },
  {
    "text": "inline function that doesn't am I for each that doesn't have inline then you cannot do a local return a non-local",
    "start": "1294050",
    "end": "1300080"
  },
  {
    "text": "return if you write return here it's gonna give you an error now if you want to actually do a local return going back",
    "start": "1300080",
    "end": "1306470"
  },
  {
    "text": "to the anonymous function instead of passing in a lambda you can then pass in an anonymous function as we saw here in",
    "start": "1306470",
    "end": "1314090"
  },
  {
    "text": "this case return will actually perform what's called the local return so it will return to the container another way",
    "start": "1314090",
    "end": "1322100"
  },
  {
    "text": "is if you don't want to do that you can use the labels which is essentially the ability to call return at the lambda so",
    "start": "1322100",
    "end": "1330800"
  },
  {
    "text": "if this lambda cause for each then this if this function is called for each then this",
    "start": "1330800",
    "end": "1336380"
  },
  {
    "text": "return would be at for each right if this function is called Jo then it will be returned at Jo okay no this is going",
    "start": "1336380",
    "end": "1350900"
  },
  {
    "text": "to the question is if it's going to print hello four times no it's going to repeat it none do i oh",
    "start": "1350900",
    "end": "1357110"
  },
  {
    "text": "they're mine now completely changes everything right anyway thank you bye so",
    "start": "1357110",
    "end": "1367340"
  },
  {
    "text": "yes no that was meant to be outside of the the forage okay okay so now we'll",
    "start": "1367340",
    "end": "1375650"
  },
  {
    "text": "stop up functions for a moment one other thing that we have in cotton is the ability to have immutability the ability",
    "start": "1375650",
    "end": "1382850"
  },
  {
    "text": "to have immutability I'm just a poet today aren't I so if I have a data class for instance Val customer string and Val",
    "start": "1382850",
    "end": "1391120"
  },
  {
    "text": "phone string this is essentially customer good customer Vega class good",
    "start": "1391120",
    "end": "1402050"
  },
  {
    "text": "customer this is essentially creating a DTO for me with some two string equals hash code etc and call in and I've got",
    "start": "1402050",
    "end": "1407900"
  },
  {
    "text": "two immutable properties Val means immutable that means that I cannot read and write and then I cannot write to",
    "start": "1407900",
    "end": "1413510"
  },
  {
    "text": "them once I've initialized them right so you generally want to stay away from maintain changing state one of the",
    "start": "1413510",
    "end": "1419300"
  },
  {
    "text": "premises of functional programming is stay away from state and with data classes for instance it's always good to",
    "start": "1419300",
    "end": "1426080"
  },
  {
    "text": "have immutable properties because one of the things that you will remove by having immutable properties is the the",
    "start": "1426080",
    "end": "1435080"
  },
  {
    "text": "concept of a data class not actually being valid right so let's say that you have a customer and you that customer",
    "start": "1435080",
    "end": "1442190"
  },
  {
    "text": "has read and write properties at some point somebody writes to that customers updates a property you have to have some",
    "start": "1442190",
    "end": "1448670"
  },
  {
    "text": "now validation logic inside our customer to validate whether it is still valid or not if you go by the the idea that I",
    "start": "1448670",
    "end": "1457310"
  },
  {
    "text": "cannot create an invalid object make all of your properties read-only and you know that once that object is created",
    "start": "1457310",
    "end": "1463340"
  },
  {
    "text": "it's always valid and you have to worry about that okay now this read only is great because I cannot do",
    "start": "1463340",
    "end": "1470990"
  },
  {
    "text": "anything like changes so if I have N equals one I can't do any calls to I",
    "start": "1470990",
    "end": "1476419"
  },
  {
    "text": "can't do that anymore because this is saying that it's it's a vowel it's read only I can't do any assignment and we",
    "start": "1476419",
    "end": "1482750"
  },
  {
    "text": "have the same things in classes so if I do Val customer and initialize that value that property cannot be changed",
    "start": "1482750",
    "end": "1488990"
  },
  {
    "text": "the problem is that there are situations where it can be so for instance here I have an object and I have a property",
    "start": "1488990",
    "end": "1496730"
  },
  {
    "text": "called value which is Val this means that it's immutable this means that there is no way for me to be able to do",
    "start": "1496730",
    "end": "1503150"
  },
  {
    "text": "something like this it is immutable okay this one is also immutable except it's",
    "start": "1503150",
    "end": "1509659"
  },
  {
    "text": "not immutable right because this one is has a property with a custom getter",
    "start": "1509659",
    "end": "1517010"
  },
  {
    "text": "which is possible in Kotlin but what it's doing in this case it's actually changing all the time because it's",
    "start": "1517010",
    "end": "1523580"
  },
  {
    "text": "calling a function that the end result of that function is not a constant expression so in cases where you want to",
    "start": "1523580",
    "end": "1531890"
  },
  {
    "text": "avoid these scenarios because like why like I can't reassign the value the",
    "start": "1531890",
    "end": "1537200"
  },
  {
    "text": "value itself is immutable if you want to be explicit about that that is where you",
    "start": "1537200",
    "end": "1542600"
  },
  {
    "text": "can use the Const in Kotlin and indicate that this essentially has to be a constant expression so it has to be",
    "start": "1542600",
    "end": "1548330"
  },
  {
    "text": "initialized as a constant in order to be able to remain truly immutable in terms",
    "start": "1548330",
    "end": "1555230"
  },
  {
    "text": "of inheritance in calling again we don't close in you know you property has a",
    "start": "1555230",
    "end": "1561169"
  },
  {
    "text": "reference and that reference is another object that that has mutable properties there is no way actually to guarantee",
    "start": "1561169",
    "end": "1567470"
  },
  {
    "text": "the immutability all the way down right but otherwise you you you know in this",
    "start": "1567470",
    "end": "1573409"
  },
  {
    "text": "case you can do certain things to guarantee properties in terms of them being constants so let's now start to",
    "start": "1573409",
    "end": "1582080"
  },
  {
    "text": "get into some of these things we can do with these data classes right so a lot of times when you write some code you",
    "start": "1582080",
    "end": "1587510"
  },
  {
    "text": "say for example process entry and your rights I don't know some data that takes",
    "start": "1587510",
    "end": "1594140"
  },
  {
    "text": "a string and then you say if data is not empty then then print line day or",
    "start": "1594140",
    "end": "1601340"
  },
  {
    "text": "data print line data is good else and then we do our general error management",
    "start": "1601340",
    "end": "1608150"
  },
  {
    "text": "right which is throw exception and we generally just throw exception like the top level I it's good enough it's fine",
    "start": "1608150",
    "end": "1613880"
  },
  {
    "text": "it's fine everything is okay so now this is cool okay this is really really cool",
    "start": "1613880",
    "end": "1620620"
  },
  {
    "text": "but this sucks in in what sense this sucks because if I look at that",
    "start": "1620620",
    "end": "1625790"
  },
  {
    "text": "signature that signature is not guaranteeing it's lying to me right that",
    "start": "1625790",
    "end": "1630980"
  },
  {
    "text": "signature saying this function returns a unit it's not true this function can",
    "start": "1630980",
    "end": "1636410"
  },
  {
    "text": "potentially return something else it's the same as something like this if I write divide X int Y int right X divided",
    "start": "1636410",
    "end": "1645140"
  },
  {
    "text": "by Y that's a lie they've been lying to us all our lives because that is not",
    "start": "1645140",
    "end": "1651500"
  },
  {
    "text": "true because for 0 that is not going to return an integer yeah so this is what's",
    "start": "1651500",
    "end": "1658400"
  },
  {
    "text": "called a partial function in that it doesn't work for all potential input",
    "start": "1658400",
    "end": "1665120"
  },
  {
    "text": "values as opposed to a total function which for all potential values it will work so how can I be explicit about this",
    "start": "1665120",
    "end": "1673460"
  },
  {
    "text": "right how can I say that for example process entry can actually throw an exception well we can use checked",
    "start": "1673460",
    "end": "1679190"
  },
  {
    "text": "exceptions like in Java now I'm joking or you can just use Java know so generally some people tend to",
    "start": "1679190",
    "end": "1687050"
  },
  {
    "text": "shy away from using exceptions for error management and they do something like result right so now they'll create a",
    "start": "1687050",
    "end": "1693440"
  },
  {
    "text": "class called result and then in that results they might have for instance a property which",
    "start": "1693440",
    "end": "1700430"
  },
  {
    "text": "is you know value string and then they'll have another property which is",
    "start": "1700430",
    "end": "1706610"
  },
  {
    "text": "called error boolean right which then they'll say you know if the result is",
    "start": "1706610",
    "end": "1713780"
  },
  {
    "text": "okay then I will return result good and",
    "start": "1713780",
    "end": "1719800"
  },
  {
    "text": "boolean false and we can use default parameters here so default and otherwise",
    "start": "1719800",
    "end": "1725810"
  },
  {
    "text": "I will return okay now that's nice isn't it and if",
    "start": "1725810",
    "end": "1731220"
  },
  {
    "text": "you're generally in JavaScript error is represented as an e so that you can spend time figuring out if it's event or",
    "start": "1731220",
    "end": "1737250"
  },
  {
    "text": "error so in this case I will return a result true now what's wrong with you",
    "start": "1737250",
    "end": "1748310"
  },
  {
    "text": "every time there you go thank you so what's wrong with you now so that",
    "start": "1748310",
    "end": "1757730"
  },
  {
    "text": "works except the problem here is that if I have two parameters or if I have three",
    "start": "1757730",
    "end": "1763530"
  },
  {
    "text": "that need to be returned as a result now I have to figure out looking at that what exactly is is in the context of a",
    "start": "1763530",
    "end": "1770580"
  },
  {
    "text": "valid result and what exactly is in the context of an invalid result which in this case we move away from this and we",
    "start": "1770580",
    "end": "1776190"
  },
  {
    "text": "can say hey why don't we do something else why don't we just have a base class which is result and then I can have a",
    "start": "1776190",
    "end": "1782010"
  },
  {
    "text": "class which is success that inherits from result and I have a class which is",
    "start": "1782010",
    "end": "1787320"
  },
  {
    "text": "failure that inherits from result two and why can't I do this because in Kotlin by default everything is final so",
    "start": "1787320",
    "end": "1794220"
  },
  {
    "text": "now I can do return success and here I",
    "start": "1794220",
    "end": "1799680"
  },
  {
    "text": "can do result failure right and then the failure success is going to have a",
    "start": "1799680",
    "end": "1805710"
  },
  {
    "text": "property which is value for instance of type string and failure is going to have",
    "start": "1805710",
    "end": "1813840"
  },
  {
    "text": "a property of type message for example saying the actual error message okay so",
    "start": "1813840",
    "end": "1819510"
  },
  {
    "text": "now I even get more information here so this is message okay so okay because you",
    "start": "1819510",
    "end": "1830130"
  },
  {
    "text": "can make this nested class as well which is even nicer because now I can enclose",
    "start": "1830130",
    "end": "1836160"
  },
  {
    "text": "it into a specific context okay so now I can have my result dot success and result of failure and now it gives me",
    "start": "1836160",
    "end": "1842820"
  },
  {
    "text": "more contextual information about when is it a result when is it a failure now",
    "start": "1842820",
    "end": "1848640"
  },
  {
    "text": "this is it's nice the problem is that now comes my friend and goes to a file",
    "start": "1848640",
    "end": "1853920"
  },
  {
    "text": "that is not owned by the standard library and says Oh data class sometimes that also inherits from",
    "start": "1853920",
    "end": "1863220"
  },
  {
    "text": "result right there you go and now if we",
    "start": "1863220",
    "end": "1872640"
  },
  {
    "text": "go back to my thing over here I have just introduced a new class which",
    "start": "1872640",
    "end": "1878179"
  },
  {
    "text": "potentially I don't know about right and now there's a third case what I'm",
    "start": "1878179",
    "end": "1884549"
  },
  {
    "text": "generally showing you here is the concept of the algebraic data type which is essentially a type that can be of one type or another type now in Colleen as",
    "start": "1884549",
    "end": "1891480"
  },
  {
    "text": "soon as you declare a class open anyone can inherit from it if you want to close our hierarchy what you can do is call it",
    "start": "1891480",
    "end": "1897480"
  },
  {
    "text": "sealed right so instead of open you create it says sealed and what that means is that essentially only classes",
    "start": "1897480",
    "end": "1903780"
  },
  {
    "text": "in this specific file are allowed to inherit from this so in that sense you",
    "start": "1903780",
    "end": "1909750"
  },
  {
    "text": "do get some safety in that you will see all of the types so if we go back to",
    "start": "1909750",
    "end": "1914760"
  },
  {
    "text": "live me you can see that down now this gives me an error saying that you can no longer inherit from sometimes okay now",
    "start": "1914760",
    "end": "1922590"
  },
  {
    "text": "this is a pattern that is quite good because I can use this over and over again right instead of I can try and",
    "start": "1922590",
    "end": "1927809"
  },
  {
    "text": "move away from exceptions and move towards this data classes which allow me to return different results based on",
    "start": "1927809",
    "end": "1934289"
  },
  {
    "text": "success or failure the problem is that it's a lot of boilerplate code that I constantly have to write over and over",
    "start": "1934289",
    "end": "1939390"
  },
  {
    "text": "again so how can I try and solve this problem well you can use for example one of multiple libraries one of them is",
    "start": "1939390",
    "end": "1946919"
  },
  {
    "text": "called arrow anyone here heard of arrow right so arrow has this concept",
    "start": "1946919",
    "end": "1951990"
  },
  {
    "text": "basically built in arrow is a is a library which is available it was a it",
    "start": "1951990",
    "end": "1958830"
  },
  {
    "text": "was a excuse me it was a merge between two libraries one of them called category with a K another one called",
    "start": "1958830",
    "end": "1964320"
  },
  {
    "text": "functionality yeah you guessed it was okay and they joined efforts and made a single library called arrow and they",
    "start": "1964320",
    "end": "1970380"
  },
  {
    "text": "offer out-of-the-box certain additional functionality to make some of these things smoother so one of those things",
    "start": "1970380",
    "end": "1976710"
  },
  {
    "text": "that they provide is the ability to have this kind of like this or that data class okay so in this case I have an",
    "start": "1976710",
    "end": "1984390"
  },
  {
    "text": "either the either is a type that's available an arrow that says either something",
    "start": "1984390",
    "end": "1989740"
  },
  {
    "text": "so the result of something is either the type on the left or the type on the",
    "start": "1989740",
    "end": "1995020"
  },
  {
    "text": "right so in this case I can say that this function returns either are not applicable which in this case is just a",
    "start": "1995020",
    "end": "2000690"
  },
  {
    "text": "simple object or a double okay then when I want to return the result I do either",
    "start": "2000690",
    "end": "2006510"
  },
  {
    "text": "left and the actual result either right and the actual result so this starts to",
    "start": "2006510",
    "end": "2012690"
  },
  {
    "text": "be nice because now I don't I've just cut down all of that boilerplate code that I wanted to write and I only specifically returned the actual type",
    "start": "2012690",
    "end": "2019200"
  },
  {
    "text": "that I want to provide now this starts to provide me with some other things that we'll get into like for example you",
    "start": "2019200",
    "end": "2025350"
  },
  {
    "text": "know is left is left it not only returns at the the actual ADT for me but it also returns",
    "start": "2025350",
    "end": "2032399"
  },
  {
    "text": "additional functionality which then I can call and pass to other functions and kind of do this pipelining that we saw",
    "start": "2032399",
    "end": "2038700"
  },
  {
    "text": "previously such as one of them four instances is left is left tells me if the value returned is is left or is it",
    "start": "2038700",
    "end": "2044250"
  },
  {
    "text": "if is right exists will tell me whether the given a predicate it exists if the",
    "start": "2044250",
    "end": "2050099"
  },
  {
    "text": "value is left and then from then on continue to do other types of executions so moving away from exceptions we get",
    "start": "2050099",
    "end": "2057839"
  },
  {
    "text": "this kind of like return types that we can use back kind of like use to define",
    "start": "2057839",
    "end": "2063419"
  },
  {
    "text": "how we want to return values but there are times for instance that I want to actually stick to the concept of",
    "start": "2063419",
    "end": "2070230"
  },
  {
    "text": "exceptions and there's another type that is part of arrow as well which is called try which allows me to exactly do this",
    "start": "2070230",
    "end": "2076858"
  },
  {
    "text": "right so in this case what try does is it essentially says that this signature",
    "start": "2076859",
    "end": "2082980"
  },
  {
    "text": "this function can return either an exception or a string right so it's",
    "start": "2082980",
    "end": "2089700"
  },
  {
    "text": "being explicit it is now moving away from lying to me right because if this was just a string then I know that this",
    "start": "2089700",
    "end": "2096960"
  },
  {
    "text": "is going to just return a string but in this case it's saying no this I can actually fail so it's kind of like",
    "start": "2096960",
    "end": "2102270"
  },
  {
    "text": "checked exceptions except you don't have to mess around with all of those checked",
    "start": "2102270",
    "end": "2107280"
  },
  {
    "text": "exceptions so in this case I say return a try and the try if you know if it's if",
    "start": "2107280",
    "end": "2112710"
  },
  {
    "text": "it's a valid URL then return the contents otherwise throw exception so now if I do get page with throw and I",
    "start": "2112710",
    "end": "2120300"
  },
  {
    "text": "pass in some value and I run this this is not going to do anything because it's absolutely fine",
    "start": "2120300",
    "end": "2126750"
  },
  {
    "text": "it's just return the contents I mean if I do a print line here it would return return the value of the contents but",
    "start": "2126750",
    "end": "2134010"
  },
  {
    "text": "essentially it's absolutely fine but again we go back to this isn't only",
    "start": "2134010",
    "end": "2139079"
  },
  {
    "text": "about introducing a type with nothing else it's introducing a type with more functionality one of those things is for",
    "start": "2139079",
    "end": "2144869"
  },
  {
    "text": "example get or else right so get or else what this allows me to do is say ok get",
    "start": "2144869",
    "end": "2150930"
  },
  {
    "text": "this value or else if you cannot get this value if an exception is thrown do",
    "start": "2150930",
    "end": "2157349"
  },
  {
    "text": "something with it right so I can say print line and then you know error occurred right and what is this this is",
    "start": "2157349",
    "end": "2167309"
  },
  {
    "text": "a lambda so since it's a lambda it's taking a parameter if we look at the",
    "start": "2167309",
    "end": "2172440"
  },
  {
    "text": "parameter of get or elles is taking a throwable what is the throwable it's the exact throwable that we're throwing",
    "start": "2172440",
    "end": "2178020"
  },
  {
    "text": "since it's a single parameter I can refer it to it as it I don't have to be",
    "start": "2178020",
    "end": "2183720"
  },
  {
    "text": "explicit so if I run this and I pass in an M if I run this and I pass in an",
    "start": "2183720",
    "end": "2189450"
  },
  {
    "text": "empty string then that is going to say error occurred and it's going to tell me",
    "start": "2189450",
    "end": "2195119"
  },
  {
    "text": "the actual exception that has been thrown but it's not throwing the exception for me if I want to I could",
    "start": "2195119",
    "end": "2201000"
  },
  {
    "text": "then throw that exception for whatever reason but it's allowing me to gracefully manage these situations okay",
    "start": "2201000",
    "end": "2208020"
  },
  {
    "text": "so you can continue to use exceptions but you can do them in a more one would",
    "start": "2208020",
    "end": "2216029"
  },
  {
    "text": "say you know a more subtle and clean away okay so one other thing that you're",
    "start": "2216029",
    "end": "2225599"
  },
  {
    "text": "having caught in which you're all familiar with is nulls or not nulls so if I write a string and that string is",
    "start": "2225599",
    "end": "2233279"
  },
  {
    "text": "nullable right and if I do if s is not",
    "start": "2233279",
    "end": "2238920"
  },
  {
    "text": "null then print line something this I",
    "start": "2238920",
    "end": "2244740"
  },
  {
    "text": "can do in shorthand by just doing something like all print line s dot",
    "start": "2244740",
    "end": "2249869"
  },
  {
    "text": "length for instance this I can do in shorthand by using the safe operator so I can do safe",
    "start": "2249869",
    "end": "2255930"
  },
  {
    "text": "right this is the same as doing an if essentially it's like if it's not null then do this right now this is built out",
    "start": "2255930",
    "end": "2263369"
  },
  {
    "text": "of the box in Colleen it's the safe operator in many other languages such as for example Java you have option right",
    "start": "2263369",
    "end": "2270180"
  },
  {
    "text": "where you can basically say if it's not null then do something but that concept of option doesn't have to exist only for",
    "start": "2270180",
    "end": "2277170"
  },
  {
    "text": "the case of null the concept of option is more broader that exists for something having a value or not having a",
    "start": "2277170",
    "end": "2284220"
  },
  {
    "text": "value otherwise also known as a maybe so for instance here I have a function that",
    "start": "2284220",
    "end": "2289799"
  },
  {
    "text": "returns an option of string which essentially means is the value is it",
    "start": "2289799",
    "end": "2296880"
  },
  {
    "text": "returning an actual value or is it returning empty empty can one day be",
    "start": "2296880",
    "end": "2301920"
  },
  {
    "text": "mapped to null in the case of safe operator other times it can just be considered empty and then I can do",
    "start": "2301920",
    "end": "2308819"
  },
  {
    "text": "things like well if it if the result is defined there is a value again it gives me not only this concept of the data",
    "start": "2308819",
    "end": "2315299"
  },
  {
    "text": "class but a whole bunch of new functionality on this data class right so now I can say if the value is defined",
    "start": "2315299",
    "end": "2321420"
  },
  {
    "text": "do something but what else can it do so for instance here here what I have is a",
    "start": "2321420",
    "end": "2328589"
  },
  {
    "text": "function divide that now becomes total remember the initial function we had that was partial now this becomes total",
    "start": "2328589",
    "end": "2334740"
  },
  {
    "text": "so in this case what I'm saying is divide two numbers option int and if",
    "start": "2334740",
    "end": "2340950"
  },
  {
    "text": "it's greater than 0 then return the value you call that with a just you say empty just the value otherwise return",
    "start": "2340950",
    "end": "2348359"
  },
  {
    "text": "empty and then in my when statement I can say when result is non print line",
    "start": "2348359",
    "end": "2355200"
  },
  {
    "text": "this won't work otherwise print line result and T refers to the actual type",
    "start": "2355200",
    "end": "2360569"
  },
  {
    "text": "the value that is returning ok so now I have this case where I can change",
    "start": "2360569",
    "end": "2366059"
  },
  {
    "text": "between none and some but let's to continue on with this because this kind",
    "start": "2366059",
    "end": "2374520"
  },
  {
    "text": "of pattern starts to become cumbersome right because if I'm starting to work",
    "start": "2374520",
    "end": "2381029"
  },
  {
    "text": "with these option types and every single time that I have this option type I have to do if it",
    "start": "2381029",
    "end": "2387240"
  },
  {
    "text": "is empty do this if it is not empty do that this starts to become cumbersome",
    "start": "2387240",
    "end": "2392780"
  },
  {
    "text": "like here I'm taking an int imagine for instance that I wanted to take an option",
    "start": "2392780",
    "end": "2398790"
  },
  {
    "text": "as an input what would I have to do I would have to come here and say if you",
    "start": "2398790",
    "end": "2404490"
  },
  {
    "text": "know if we change this to option of int now I have to say if X is defined then",
    "start": "2404490",
    "end": "2416970"
  },
  {
    "text": "do something with the result otherwise do something else and when you start to",
    "start": "2416970",
    "end": "2422730"
  },
  {
    "text": "have all of these functions that start to take options and you start to change these it becomes quite cumbersome",
    "start": "2422730",
    "end": "2428790"
  },
  {
    "text": "boilerplate code and of course this is already solved for you right because in",
    "start": "2428790",
    "end": "2433800"
  },
  {
    "text": "in arrow you can you have the ability to have this built in which is essentially",
    "start": "2433800",
    "end": "2440040"
  },
  {
    "text": "a map a map is a general concept that",
    "start": "2440040",
    "end": "2446040"
  },
  {
    "text": "comes from functional programming which is called a functor which essentially knows how to work with a value apply a",
    "start": "2446040",
    "end": "2451380"
  },
  {
    "text": "function to that value so what I do here is I have a function that's called squared option that takes an actual",
    "start": "2451380",
    "end": "2457859"
  },
  {
    "text": "option and I say map that with inside values so map under the covers now knows",
    "start": "2457859",
    "end": "2465600"
  },
  {
    "text": "that if it's not empty perform this predicate on that if it is empty then",
    "start": "2465600",
    "end": "2472200"
  },
  {
    "text": "don't do anything right and again map gives me back the ability to start to do",
    "start": "2472200",
    "end": "2478320"
  },
  {
    "text": "other types of chaining right so here I have map in this case I have triple option so I can pass in trouble option",
    "start": "2478320",
    "end": "2484950"
  },
  {
    "text": "empty so now this is essentially not going to return anything because it's triple option on Mt it returns none",
    "start": "2484950",
    "end": "2490320"
  },
  {
    "text": "right if I put in a value here for instance triple option of just three",
    "start": "2490320",
    "end": "2495410"
  },
  {
    "text": "just three this if I got it wrong right it should return some 27 okay and then I",
    "start": "2495410",
    "end": "2503400"
  },
  {
    "text": "can actually get the actual value from that and we can continue to build on this and take it further so for instance",
    "start": "2503400",
    "end": "2510750"
  },
  {
    "text": "here we introduce another thing which is essentially flat map which is very again",
    "start": "2510750",
    "end": "2516000"
  },
  {
    "text": "common in functional programming and flat map is the idea that now I'm not going",
    "start": "2516000",
    "end": "2521010"
  },
  {
    "text": "to just return the value I'm going to return an option of that and operate on",
    "start": "2521010",
    "end": "2526290"
  },
  {
    "text": "that and the end result of that flat map has to be an actual option that is returned this then allows me to take it",
    "start": "2526290",
    "end": "2533910"
  },
  {
    "text": "to the next level which is something that you may have heard very common in functional programming which is called",
    "start": "2533910",
    "end": "2540540"
  },
  {
    "text": "binds right and if you've ever heard of the table of the monad type or the type",
    "start": "2540540",
    "end": "2546300"
  },
  {
    "text": "classed monad a monad has this function called bind which essentially allows me to do monadic comprehensions with this",
    "start": "2546300",
    "end": "2553560"
  },
  {
    "text": "generally means take all of all of these different operations that are referring returning these types these monads all",
    "start": "2553560",
    "end": "2559410"
  },
  {
    "text": "of these options try either these are examples of monads right so we've just seen monads without saying monad and",
    "start": "2559410",
    "end": "2566510"
  },
  {
    "text": "combine these in operations so for instance here I can now start to do a",
    "start": "2566510",
    "end": "2573210"
  },
  {
    "text": "sequence of operations that are independent that do not depend on each",
    "start": "2573210",
    "end": "2578340"
  },
  {
    "text": "other and then combine these and get results and have all of the error handling done for me behind the scenes",
    "start": "2578340",
    "end": "2585030"
  },
  {
    "text": "in the much nicer way okay so the either",
    "start": "2585030",
    "end": "2590820"
  },
  {
    "text": "option binding try all of these are some of the things that are available in Aero",
    "start": "2590820",
    "end": "2596760"
  },
  {
    "text": "if you are interested in it check out the library and start to play with that it does give you some nice things out of",
    "start": "2596760",
    "end": "2604260"
  },
  {
    "text": "the box now one thing I want to also touch on briefly before we finish which",
    "start": "2604260",
    "end": "2609870"
  },
  {
    "text": "is very functional in terms of Kotlin is some other things that you can do with",
    "start": "2609870",
    "end": "2615300"
  },
  {
    "text": "functions in common okay so let me start with you're all familiar with the concept of a DSL right domain-specific",
    "start": "2615300",
    "end": "2621450"
  },
  {
    "text": "language right which the explanation of a domain-specific language is a language that is specific to a certain domain",
    "start": "2621450",
    "end": "2627000"
  },
  {
    "text": "there you go so hope I have for instance a class configuration that says for",
    "start": "2627000",
    "end": "2633240"
  },
  {
    "text": "instance has a string port a string a host string and let's say it has a port",
    "start": "2633240",
    "end": "2640320"
  },
  {
    "text": "information of type port and then I'm going to have a class port which has for instance a value and then is it is it is",
    "start": "2640320",
    "end": "2649650"
  },
  {
    "text": "secure boolean right so these are VARs because I'm going to set",
    "start": "2649650",
    "end": "2654870"
  },
  {
    "text": "now in calling there's multiple ways to initialize this right what you want to do is you wouldn't do like Val",
    "start": "2654870",
    "end": "2660090"
  },
  {
    "text": "configuration configuration let's just set some default parameters here so",
    "start": "2660090",
    "end": "2666120"
  },
  {
    "text": "we'll do that is that port is port and then here we'll say is false sorry false",
    "start": "2666120",
    "end": "2674250"
  },
  {
    "text": "and int equals zero right so you could do configuration and then here do",
    "start": "2674250",
    "end": "2681630"
  },
  {
    "text": "configuration and then you know set the sorry Val config configuration and then",
    "start": "2681630",
    "end": "2689400"
  },
  {
    "text": "set host host and then set some value",
    "start": "2689400",
    "end": "2696030"
  },
  {
    "text": "etc or you could do something like with C and then inside C now you get access",
    "start": "2696030",
    "end": "2702030"
  },
  {
    "text": "to host and then you get access to port so inside here you would do with port and then inside here you would say for",
    "start": "2702030",
    "end": "2708750"
  },
  {
    "text": "example you know value equals 90 and is secure equals true and then host I could",
    "start": "2708750",
    "end": "2716550"
  },
  {
    "text": "put for example one two seven zero zero one right now this is nice the problem",
    "start": "2716550",
    "end": "2722730"
  },
  {
    "text": "is that this is kind of like a little bit ugly because I've got this with over here right and what I want to do is like",
    "start": "2722730",
    "end": "2729720"
  },
  {
    "text": "if this is called config for instance what I want to do is why can't I get rid",
    "start": "2729720",
    "end": "2736050"
  },
  {
    "text": "of this and just do something like that right and kind of like create my own",
    "start": "2736050",
    "end": "2741420"
  },
  {
    "text": "configuration DSL right just like JSON just like anything else like I've created a configuration",
    "start": "2741420",
    "end": "2747360"
  },
  {
    "text": "file for configuring my ports but imagine that this could be some business logic or whatever like tax information I",
    "start": "2747360",
    "end": "2753000"
  },
  {
    "text": "want to be able to have this ability to write this kind of code and have completion and have type checking and",
    "start": "2753000",
    "end": "2759270"
  },
  {
    "text": "all of this for me can I do this in Kotlin well actually we can so what is this what is exactly that we're doing",
    "start": "2759270",
    "end": "2764850"
  },
  {
    "text": "here this is essentially an object right config in this case is an object and",
    "start": "2764850",
    "end": "2771240"
  },
  {
    "text": "what I'm trying to do if you look at the pattern I'm putting some lambdas so what I'm trying to do is invoke that object",
    "start": "2771240",
    "end": "2776610"
  },
  {
    "text": "can I do that in Colleen you can I can have a class for example Q right and",
    "start": "2776610",
    "end": "2783030"
  },
  {
    "text": "then I can come here and create a new class right by the way",
    "start": "2783030",
    "end": "2788210"
  },
  {
    "text": "this is not this is actually true a friend of mine was doing a live talk one day there was two of them on stage and",
    "start": "2788210",
    "end": "2793580"
  },
  {
    "text": "he was saying you know one of them is like typing the other one is doing speaking he says ah hey he's like",
    "start": "2793580",
    "end": "2798859"
  },
  {
    "text": "Richard create a queue for me so what does Richard do he creates a queue called foo queue right and the other one",
    "start": "2798859",
    "end": "2806270"
  },
  {
    "text": "is like saying right now we've got this flu queue and he says i Richard create a second queue for me what does it do it",
    "start": "2806270",
    "end": "2811490"
  },
  {
    "text": "creates a fluke YouTube so that's why you should never name your stuff foo so",
    "start": "2811490",
    "end": "2817599"
  },
  {
    "text": "if I have this foo I can now invoke it how can I invoke it you see I just hit",
    "start": "2817599",
    "end": "2824780"
  },
  {
    "text": "alt enter that's how I invoke it so what is this doing let's call this fool basically what I want to do is create an",
    "start": "2824780",
    "end": "2832540"
  },
  {
    "text": "operator in Kotlin which is called invoke as soon as I do that I can now",
    "start": "2832540",
    "end": "2837589"
  },
  {
    "text": "invoke this object so if I can do it there let's do it here let's create an",
    "start": "2837589",
    "end": "2845290"
  },
  {
    "text": "invocation now when I invoke we're not",
    "start": "2845290",
    "end": "2851630"
  },
  {
    "text": "what parameter should I be passing in here so let's see what I need access to I need access to host and port what our",
    "start": "2851630",
    "end": "2857900"
  },
  {
    "text": "host imports their properties of configuration right now what is a high",
    "start": "2857900",
    "end": "2865550"
  },
  {
    "text": "order function in Kotlin it's a lambda right that takes a lambda what is an",
    "start": "2865550",
    "end": "2871010"
  },
  {
    "text": "extension function it's a function can I pass extension functions to high order",
    "start": "2871010",
    "end": "2876530"
  },
  {
    "text": "functions in college yes you can it's it's unique to call in the concept is called lambdas with receivers so I can",
    "start": "2876530",
    "end": "2883010"
  },
  {
    "text": "pass in a lambda with receiver here which the type is actually an extension function to configuration right so this",
    "start": "2883010",
    "end": "2893690"
  },
  {
    "text": "is an extension function to configuration given that it's an extension function to configuration it",
    "start": "2893690",
    "end": "2898760"
  },
  {
    "text": "means that it has access to the properties of configuration which means that suddenly this is no longer read and",
    "start": "2898760",
    "end": "2906400"
  },
  {
    "text": "I'll do the exact same operation here keeps giving the same thing so I'll do",
    "start": "2906400",
    "end": "2912230"
  },
  {
    "text": "function what do I need access to here port right so I'll do port unit and then",
    "start": "2912230",
    "end": "2919280"
  },
  {
    "text": "come down voila I have my dear so right so I've done DSL driven",
    "start": "2919280",
    "end": "2925049"
  },
  {
    "text": "development I started out with what I wanted and I've driven in and out using alt-enter now I don't even need to know Colin so but the point is here of course",
    "start": "2925049",
    "end": "2933359"
  },
  {
    "text": "I've just done a small DSL which is specific to a configuration setting now",
    "start": "2933359",
    "end": "2938849"
  },
  {
    "text": "you might not go to this extension to do something for configuration but the idea here is that you can really embrace the",
    "start": "2938849",
    "end": "2944670"
  },
  {
    "text": "ability of using courtland's functions and lambdas with receivers and the ability to invoke objects and create DSL",
    "start": "2944670",
    "end": "2952280"
  },
  {
    "text": "for your specific parts of your application because I mean if you're doing for instance things like domain",
    "start": "2952280",
    "end": "2958049"
  },
  {
    "text": "driven design right one of the key aspects of domain driven design is to have an ubiquitous language which is the",
    "start": "2958049",
    "end": "2964619"
  },
  {
    "text": "same language you use in your code matches that of the business domain and now you can start to leverage that you",
    "start": "2964619",
    "end": "2970680"
  },
  {
    "text": "know creating the sl's isn't only about creating HTML the new version of that which you don't need to it's called",
    "start": "2970680",
    "end": "2976410"
  },
  {
    "text": "markdown ok anyway that's all the time we have for now I don't know if we have time ne for",
    "start": "2976410",
    "end": "2983099"
  },
  {
    "text": "any questions if not I'm around a little bit afterwards anyway so one question",
    "start": "2983099",
    "end": "2990079"
  },
  {
    "text": "so just a short question the last part why isn't that default is there some",
    "start": "2999490",
    "end": "3006990"
  },
  {
    "text": "drawbacks of having that functionality what part is not default or having a DSL",
    "start": "3006990",
    "end": "3013980"
  },
  {
    "text": "on your on your object why would you have to why do we have to implement",
    "start": "3013980",
    "end": "3020220"
  },
  {
    "text": "those methods oh well I mean yes I mean",
    "start": "3020220",
    "end": "3025530"
  },
  {
    "text": "first of all not everyone is going to want to have a DSL on their object right and that's a whole lot of added code that is gonna have to be generated in",
    "start": "3025530",
    "end": "3032190"
  },
  {
    "text": "some sense second of all that technically would only be possible to do using some kind of like a pro",
    "start": "3032190",
    "end": "3038250"
  },
  {
    "text": "post-processing like using capped for instance a call in-house right which you can analyze your codebase and based on",
    "start": "3038250",
    "end": "3043980"
  },
  {
    "text": "that generate some DSL but again it's like I don't think it would be something",
    "start": "3043980",
    "end": "3049560"
  },
  {
    "text": "that you want to have every single class have this ability to be honest with you okay thanks thank you",
    "start": "3049560",
    "end": "3057070"
  },
  {
    "text": "[Applause] you",
    "start": "3057070",
    "end": "3063300"
  },
  {
    "text": "you",
    "start": "3070040",
    "end": "3072100"
  }
]