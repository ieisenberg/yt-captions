[
  {
    "text": "[Music]",
    "start": "2550",
    "end": "10170"
  },
  {
    "text": "I'm Nick Bray I work at Google on Chrome and lately I've been working on a new",
    "start": "12200",
    "end": "17359"
  },
  {
    "text": "technology called Web assembly I've been working on this with a handful of co-workers and uh other software",
    "start": "17359",
    "end": "22800"
  },
  {
    "text": "engineers at other companies web assembly is designed to",
    "start": "22800",
    "end": "29560"
  },
  {
    "text": "run native code on the web run it uh quickly run it efficiently run it safely",
    "start": "29560",
    "end": "36840"
  },
  {
    "text": "run it performant and by themselves we've seen this all before when I say native code I",
    "start": "36840",
    "end": "42920"
  },
  {
    "text": "mean c C++ or anything that compiles down to a machine architecture and native code naturally runs fast right",
    "start": "42920",
    "end": "50320"
  },
  {
    "text": "well getting this all together getting it to run on the web is we've had pieces of the puzzle for a long time but web",
    "start": "50320",
    "end": "56480"
  },
  {
    "text": "assembly I believe is going to be the first thing that puts all the pieces together so the two reasons I'm very interested in web assembly are",
    "start": "56480",
    "end": "64080"
  },
  {
    "text": "everyone's talking about it uh or I should say the major browser vendors are talking together about it now this is a",
    "start": "64080",
    "end": "70560"
  },
  {
    "text": "far way away from actually being a standard this is a far way away from uh everyone committing to it but the fact",
    "start": "70560",
    "end": "77680"
  },
  {
    "text": "that we're talking is a very good sign for what's coming the other thing that I'm very excited about is that it has",
    "start": "77680",
    "end": "84079"
  },
  {
    "text": "shared memory multi-threading now um there's a lot of front-end developers in here and uh front-end developers please",
    "start": "84079",
    "end": "91400"
  },
  {
    "text": "raise the hand so I know who I'm talking to and then people with experience with native code okay so it looks like we have bit",
    "start": "91400",
    "end": "98399"
  },
  {
    "text": "of a split with a little bias towards the native code so um I I will explain shared memory multi-threading in a bit",
    "start": "98399",
    "end": "104759"
  },
  {
    "text": "especially for the front end developers but this is very very important to get native code to work and work very",
    "start": "104759",
    "end": "113718"
  },
  {
    "text": "well so we we've been down this rout before road before is native the web is",
    "start": "115439",
    "end": "120560"
  },
  {
    "text": "we've been trying at it for I don't know about five years now and it's never quite worked but there have been some",
    "start": "120560",
    "end": "126320"
  },
  {
    "text": "things which have been really impressive in my view um one of the things that's occurring nowadays is uh game engines on",
    "start": "126320",
    "end": "133160"
  },
  {
    "text": "the web is Unity on unreal is they're taking their game engine which is currently targeted at desktops on mobile",
    "start": "133160",
    "end": "140560"
  },
  {
    "text": "and then they're adding components so they can run on the web and this shows a sort of cross-platform strategy is",
    "start": "140560",
    "end": "147040"
  },
  {
    "text": "you're looking for all the distribution channels you can for your cont content and the web is just another one currently it's a little tough because",
    "start": "147040",
    "end": "154120"
  },
  {
    "text": "the web is weird as we'll get into in a moment but if it was less weird if you could just Target everything at once",
    "start": "154120",
    "end": "161040"
  },
  {
    "text": "more opportunities for Revenue more opportunities for delivery imagine if you could just send a link to someone to",
    "start": "161040",
    "end": "166360"
  },
  {
    "text": "the game your friend clicks on the link then you're they're in the game immediately no install they're right",
    "start": "166360",
    "end": "172760"
  },
  {
    "text": "next to you just works um there's been some interesting uh uh interesting",
    "start": "172760",
    "end": "180239"
  },
  {
    "text": "experiments with running different languages on the web right now you can use any language you want on the web as long as it's JavaScript and uh there's a",
    "start": "180239",
    "end": "187519"
  },
  {
    "text": "website called replit which has been using technology to compile native code to JavaScript to run things like python",
    "start": "187519",
    "end": "193440"
  },
  {
    "text": "on a web page run things like C on a web page um even crazier people are",
    "start": "193440",
    "end": "198799"
  },
  {
    "text": "emulating entire operating systems there's a website called dosbox where you can run all your favorite old games",
    "start": "198799",
    "end": "204760"
  },
  {
    "text": "if you're that old um JS Linux is someone run an entire Linux machine and",
    "start": "204760",
    "end": "210400"
  },
  {
    "text": "translate it to Java in a web page so you can do Linux in a web page uh one of my co-workers set up an entire",
    "start": "210400",
    "end": "216519"
  },
  {
    "text": "development environment inside a Native client module so you can run GCC inside",
    "start": "216519",
    "end": "223640"
  },
  {
    "text": "of a web page crazy stuff impressive stuff um and people have experimented",
    "start": "223640",
    "end": "229239"
  },
  {
    "text": "with PDF viewing is that you could actually compile PDF viewer and run it inside a webpage traditionally PDF",
    "start": "229239",
    "end": "234720"
  },
  {
    "text": "viewers are part of the web browser but they actually made it a web app and similar with media decoding is there's",
    "start": "234720",
    "end": "241560"
  },
  {
    "text": "some uh places that people have taken uh media decoders audio decoders and run them inside the web page again",
    "start": "241560",
    "end": "247840"
  },
  {
    "text": "traditionally these things are part of the web browsers if you want to decode video you say well my program isn't",
    "start": "247840",
    "end": "253319"
  },
  {
    "text": "going to do that so I'm going to delegate to the web browser and there's a lot of reasons for this that the web browser just isn't fast enough in a lot",
    "start": "253319",
    "end": "259359"
  },
  {
    "text": "of case is or even or I should say web apps are not fast enough but I mean they are fast enough in the throughput sense",
    "start": "259359",
    "end": "265280"
  },
  {
    "text": "but sometimes they just aren't reliable enough you know if you're trying to decode audio you have to to do it exactly when the audio is needed or else",
    "start": "265280",
    "end": "272039"
  },
  {
    "text": "there's gaps there's pops so performance is more than throughput it's also reliability of performance so right now",
    "start": "272039",
    "end": "279960"
  },
  {
    "text": "all these things are very interesting and they work in many cases and almost",
    "start": "279960",
    "end": "285759"
  },
  {
    "text": "work in some cases but they are the product of very dedicated people and if",
    "start": "285759",
    "end": "290840"
  },
  {
    "text": "we lower the bar to entry things like this will become much more common much more pervasive so the problem with the web is",
    "start": "290840",
    "end": "297600"
  },
  {
    "text": "that it had its own evolution history is it responded to a different set of",
    "start": "297600",
    "end": "303520"
  },
  {
    "text": "forces than the native platform did and ended up in a different place with an entirely different set of properties now",
    "start": "303520",
    "end": "309360"
  },
  {
    "text": "different isn't bad but when we're asking how can we do multiplatform development how can we take Legacy code",
    "start": "309360",
    "end": "314759"
  },
  {
    "text": "and move it to the web it becomes much harder that because it's different so one big property of the web which is",
    "start": "314759",
    "end": "320120"
  },
  {
    "text": "different is this asynchronous is that if you ever want to ask the system for something say load a file you say hey I",
    "start": "320120",
    "end": "326199"
  },
  {
    "text": "want to load a file the system says that's great give me a call back so you give it a call back and it says okay I'll get back to you later now if you're",
    "start": "326199",
    "end": "332600"
  },
  {
    "text": "executing still executing you'll never get the response in fact the only way you can get a response when you're",
    "start": "332600",
    "end": "337960"
  },
  {
    "text": "running JavaScript is that you stop execution you unwind your entire call stack go back to the event Loop the",
    "start": "337960",
    "end": "344400"
  },
  {
    "text": "event Loop may do a few things in the meantime you have no control over what it's doing and then eventually they'll",
    "start": "344400",
    "end": "349440"
  },
  {
    "text": "call you back and say oh yeah here's the file you request across the network native code on the other hand like",
    "start": "349440",
    "end": "354520"
  },
  {
    "text": "synchronous interfaces this is a legacy of how the operating systems first were is you go to the operating system and",
    "start": "354520",
    "end": "359840"
  },
  {
    "text": "say Hey I want a file it says stop right there for a moment goes gets the file then says here's the file resume so the",
    "start": "359840",
    "end": "366360"
  },
  {
    "text": "interesting thing here is that you don't unwind the call stack you have the entire function call chain you get the",
    "start": "366360",
    "end": "372360"
  },
  {
    "text": "file and then you can resume execution immediately from where you're at so if you're trying to translate a synchronous",
    "start": "372360",
    "end": "379120"
  },
  {
    "text": "program into an asynchronous program this ends up being a lot of work because you have to cut the entire call stack",
    "start": "379120",
    "end": "384560"
  },
  {
    "text": "you have to change things so every time you had what used to be a synchronous operation it becomes an asynchron",
    "start": "384560",
    "end": "391160"
  },
  {
    "text": "operation that turns into a call another aspect that makes porting",
    "start": "391160",
    "end": "396639"
  },
  {
    "text": "to the web fairly hard is that there are no threads with shared state so if",
    "start": "396639",
    "end": "402160"
  },
  {
    "text": "you're familiar with a web platform there are web workers which are technically threads but they have their",
    "start": "402160",
    "end": "408319"
  },
  {
    "text": "entire own JavaScript contexts they have their own set of objects and you can never have an object that is simultaneously modifiable with two",
    "start": "408319",
    "end": "415080"
  },
  {
    "text": "threads where when you have something like the native platform when you have threads you can freely pass data to them",
    "start": "415080",
    "end": "421039"
  },
  {
    "text": "and you can actually Access Data at the same time which is usually a bad idea unless you're very very careful even the",
    "start": "421039",
    "end": "427560"
  },
  {
    "text": "people I work with who are expert at threads when you ask them how does this work they're like ah let me think about that for a moment and that is called",
    "start": "427560",
    "end": "433879"
  },
  {
    "text": "wisdom as people realize they are not as smart as they think they are and threads are tricky um so when you're porting",
    "start": "433879",
    "end": "440960"
  },
  {
    "text": "native programs you want threads because they despite being You know despite the fact you're juggling hand grenades is",
    "start": "440960",
    "end": "446440"
  },
  {
    "text": "they give you things that you need they give you performance they give you reliable performance they are",
    "start": "446440",
    "end": "451479"
  },
  {
    "text": "essentially The Primitives that the CPU uses so you can't really get any more",
    "start": "451479",
    "end": "456720"
  },
  {
    "text": "efficient than that you can't get any more reliable than that in a lot of ways um you can debate whether you actually",
    "start": "456720",
    "end": "463440"
  },
  {
    "text": "want threads as a programming model is they are dangerous but they are very very useful so having a platform that",
    "start": "463440",
    "end": "471000"
  },
  {
    "text": "provides them to you and lets you build things on top of them lets you build better abstractions on top of it that's pretty important another weird thing",
    "start": "471000",
    "end": "478280"
  },
  {
    "text": "about the web is inconsist consistent performance is Javascript was designed to be easy to use and it's only over",
    "start": "478280",
    "end": "486120"
  },
  {
    "text": "time that we've been able to make it run faster and faster and this is in part due to the heroic efforts of the people",
    "start": "486120",
    "end": "492319"
  },
  {
    "text": "implementing JavaScript is they've gotten clever and clever and the JavaScript engine has gotten more",
    "start": "492319",
    "end": "497720"
  },
  {
    "text": "complex and more complex so when you ask why does my JavaScript application perform the way it does the answer is",
    "start": "497720",
    "end": "504560"
  },
  {
    "text": "not very clear so there's all sorts of Justin time compilers which start at the beginning saying well I know nothing",
    "start": "504560",
    "end": "510879"
  },
  {
    "text": "about your program other than its text then it starts executing it for a while then says oh wait this is a number I can",
    "start": "510879",
    "end": "517719"
  },
  {
    "text": "do a little better so then it runs faster then it says oh I know the type of this then it can run better then it",
    "start": "517719",
    "end": "523240"
  },
  {
    "text": "says oh whoops uh I got new information that says this could be number of string o I don't know what I'm doing so let's",
    "start": "523240",
    "end": "528440"
  },
  {
    "text": "run slower so you can actually have through the lifetime of your program that run faster then run slower then run",
    "start": "528440",
    "end": "533839"
  },
  {
    "text": "faster and it's because of the heuristics and the tuning and the magic which on average makes the web go better",
    "start": "533839",
    "end": "540880"
  },
  {
    "text": "but for your specific application it may result in bizarre behavior that you can't explain another thing is garbage",
    "start": "540880",
    "end": "547560"
  },
  {
    "text": "collection is Javascript provides the abstraction that you don't have to deal with memory so if You' ever done C or",
    "start": "547560",
    "end": "553040"
  },
  {
    "text": "C++ manually saying I'm done with this object it's very error prone you know if",
    "start": "553040",
    "end": "559000"
  },
  {
    "text": "you do C++ for long enough you sort of get in the habits you know how to do it but ultimately when you get it wrong",
    "start": "559000",
    "end": "564160"
  },
  {
    "text": "that becomes the worst bug in the world to deal with so garbage collection fixes all this by saying the system will figure it out for you but the cost of",
    "start": "564160",
    "end": "570600"
  },
  {
    "text": "this is that occasionally the system has to come in stop the world and say let me clean up after you then resume the world",
    "start": "570600",
    "end": "577160"
  },
  {
    "text": "and this is GC pauses is when you have a JavaScript application or any application with um uh with uh uh real",
    "start": "577160",
    "end": "586880"
  },
  {
    "text": "or any application with uh memory management is if you're trying to do rendering 60 frames a second or",
    "start": "586880",
    "end": "593360"
  },
  {
    "text": "rendering audio in the worst case you could be interrupted and there could be a bit of a hiccup so all the together",
    "start": "593360",
    "end": "599920"
  },
  {
    "text": "porting code to the web is currently painful no matter how you do it and the question is how can we do better so you",
    "start": "599920",
    "end": "607240"
  },
  {
    "text": "might think that maybe the web just isn't worth it is there's all these things that makes pouring native code to the web hard so let's just not do this",
    "start": "607240",
    "end": "613920"
  },
  {
    "text": "let's the web set on its own strengths but it has a lot of interesting strengths for other developers um it's",
    "start": "613920",
    "end": "620640"
  },
  {
    "text": "open so you want to ship an app all you have to do is get a Cloud Server somewhere load it on there boom you're",
    "start": "620640",
    "end": "627200"
  },
  {
    "text": "an app publisher uh there's also multiple vendors who have different browsers you never have to worry about",
    "start": "627200",
    "end": "632760"
  },
  {
    "text": "vendor lockin for any web standards because there's multiple implementations of it it's secure now there should be an",
    "start": "632760",
    "end": "638320"
  },
  {
    "text": "asterisk next to this is technically every platform is secure but they have a",
    "start": "638320",
    "end": "643560"
  },
  {
    "text": "different definition of security and the web has a fairly unique definition of security that it's as safe as a document",
    "start": "643560",
    "end": "650040"
  },
  {
    "text": "so the history of the web started with viewing HTML documents and the security model keeps going from that so when",
    "start": "650040",
    "end": "656600"
  },
  {
    "text": "someone hands a document you don't have to worry about it picking your pocket you know it's it's not going to harm you in any ways your eyes aren't going to",
    "start": "656600",
    "end": "662519"
  },
  {
    "text": "explode is a document is safe there's nothing anyone can do to damage you by giving you a document uh other platforms",
    "start": "662519",
    "end": "669160"
  },
  {
    "text": "they have a more a different approach to this and this has caused Legacy problems like operating systems assume any",
    "start": "669160",
    "end": "675440"
  },
  {
    "text": "program is operating on your behalf so therefore if it wants to take your tax return and upload it to some strange",
    "start": "675440",
    "end": "681920"
  },
  {
    "text": "server in some foreign country that's a perfectly fine thing to do because that's you doing it which isn't true for",
    "start": "681920",
    "end": "688680"
  },
  {
    "text": "many apps whichwich or loaded across the network another thing is it's portable again this is a attribute that deserves",
    "start": "688680",
    "end": "694519"
  },
  {
    "text": "an asterisk next to it is it is portable in the sense that anywhere there's a web browser web content can run and the same",
    "start": "694519",
    "end": "702600"
  },
  {
    "text": "program should run the same anywhere so if you're used to native code you spend a lot of time porting it and native code",
    "start": "702600",
    "end": "709959"
  },
  {
    "text": "is portable in the sense that you can make it run on any machine fast but there may be Behavior differences",
    "start": "709959",
    "end": "716000"
  },
  {
    "text": "between it so things are a little different between platforms so there's two distinct different uh versions of",
    "start": "716000",
    "end": "721480"
  },
  {
    "text": "portability and the web's version of portability is that consistent Behavior no matter what the Opera system no",
    "start": "721480",
    "end": "727760"
  },
  {
    "text": "matter what the CPU another nice property which sort of Springs from the uh security and portability is",
    "start": "727760",
    "end": "734040"
  },
  {
    "text": "ephemerality is you don't have to install it you just point your web browser at the app you're up and running",
    "start": "734040",
    "end": "740120"
  },
  {
    "text": "instantly and as it turns out when you have to ask users oh can I have permission to do bad things to you but",
    "start": "740120",
    "end": "746600"
  },
  {
    "text": "honestly I will not this sort of uh reduces the user Buy in it adds friction",
    "start": "746600",
    "end": "751880"
  },
  {
    "text": "it makes it harder to convince them to use your app uh similarly ephemerality",
    "start": "751880",
    "end": "757040"
  },
  {
    "text": "allows the idea of Evergreen apps is that every time someone goes to your web server they get the newest version you",
    "start": "757040",
    "end": "762680"
  },
  {
    "text": "have to worry less about text support for someone who's using the application that's two years old and then you're",
    "start": "762680",
    "end": "768399"
  },
  {
    "text": "scratching your head figuring out why did they have such a weird thing going on so wouldn't it be nice if we could",
    "start": "768399",
    "end": "773880"
  },
  {
    "text": "get all of these properties of the web and all of the good properties of native in one bundle that's kind of the question that's motivating web assembly",
    "start": "773880",
    "end": "780320"
  },
  {
    "text": "and I should say at this point I'm going to refer to it at wasm at some points WM",
    "start": "780320",
    "end": "785399"
  },
  {
    "text": "and that's just habit because we've been talking about internally so long and we have Jaron so to understand how we got",
    "start": "785399",
    "end": "791760"
  },
  {
    "text": "here it's we should briefly look at the history and as I was saying that in the first there's hypertex markup language",
    "start": "791760",
    "end": "797040"
  },
  {
    "text": "which was just a document and then few years later people figured out interactive documents are cooler than",
    "start": "797040",
    "end": "802560"
  },
  {
    "text": "just documents so this is where JavaScript came from is you can click on it and that's an event and you respond",
    "start": "802560",
    "end": "808360"
  },
  {
    "text": "to the event and then you return to the event Loop but people wanted more so they immediately saying hey we have this",
    "start": "808360",
    "end": "814639"
  },
  {
    "text": "nice document distribution platform so what if we could have other kinds of documents like PDF documents or vector",
    "start": "814639",
    "end": "821320"
  },
  {
    "text": "graphics or we could embed Word documents so there's this profusion of plug-in Technologies where people said",
    "start": "821320",
    "end": "827519"
  },
  {
    "text": "hey we want to do more in the web browser but instead of doing it inside the web browser let's just bolt this",
    "start": "827519",
    "end": "832560"
  },
  {
    "text": "chunk of code into the web browser and the legacy is still with us today 20 years is uh we're finally dealing with",
    "start": "832560",
    "end": "839160"
  },
  {
    "text": "with but the problem with this is there's severe security problems is that because you weren't inside the web",
    "start": "839160",
    "end": "845320"
  },
  {
    "text": "browser because you weren't thinking about how to behave as web content because you your entire own stack you",
    "start": "845320",
    "end": "851199"
  },
  {
    "text": "could have just different rules for what was Secure and it was sort of like when you had the two parents and you're like hey can I do this no hey can I do this",
    "start": "851199",
    "end": "858399"
  },
  {
    "text": "okay and you know once you're in that situation it's very hard to be secure and there is surface area complexity",
    "start": "858399",
    "end": "864759"
  },
  {
    "text": "issues so in some ways we were we had the best of intentions in this era but we didn't quite understand all the nice",
    "start": "864759",
    "end": "870600"
  },
  {
    "text": "properties of the web I said earlier around 2008 We There Is A",
    "start": "870600",
    "end": "876600"
  },
  {
    "text": "Renewed interest in JavaScript performance um Chrome came out Mozilla started really pushing their jit and",
    "start": "876600",
    "end": "883279"
  },
  {
    "text": "suddenly JavaScript became fast it became practical to think about building large scale applications in JavaScript",
    "start": "883279",
    "end": "889800"
  },
  {
    "text": "there's an exponential takeoff and everyone was like magic JavaScript elves are making things faster all the",
    "start": "889800",
    "end": "896120"
  },
  {
    "text": "time but I actually know those JavaScript elves and as it turns out this is very very hard and the amount of",
    "start": "896120",
    "end": "902519"
  },
  {
    "text": "complexity involved is huge and so this exponential takeoff we saw around the",
    "start": "902519",
    "end": "908600"
  },
  {
    "text": "2008 era is not sustainable is there's a certain ceiling where we're going to slow down progress and slow down",
    "start": "908600",
    "end": "915000"
  },
  {
    "text": "progress and the question is how do we keep going how do we keep getting more performance and web assembly kind of answers that by saying we do it by being",
    "start": "915000",
    "end": "921639"
  },
  {
    "text": "simpler is we make the the um browsers life easier in order to make it run",
    "start": "921639",
    "end": "927000"
  },
  {
    "text": "fast uh a project that I worked on was native client is Google said hey what we're going to do is we're going to take",
    "start": "927000",
    "end": "933319"
  },
  {
    "text": "a native programming environment figure out how to make it safe by making sure it can only talk to the op or only talk",
    "start": "933319",
    "end": "939360"
  },
  {
    "text": "to the browser not talk to the operating system and there you got native code on the web Unfortunately they did not get",
    "start": "939360",
    "end": "945440"
  },
  {
    "text": "buying from other vendor render browser browser vendors is um in my",
    "start": "945440",
    "end": "952040"
  },
  {
    "text": "point of view from my point of view it's the right technical solution but it never got the uh C the multi-party buyin",
    "start": "952040",
    "end": "959040"
  },
  {
    "text": "the cross browser solution and this always made it a very hard sell for web developers is you know you got Chrome",
    "start": "959040",
    "end": "965519"
  },
  {
    "text": "great but what about the other 50% or so that's a very hard thing to overcome web",
    "start": "965519",
    "end": "970920"
  },
  {
    "text": "developers want to run everywhere they want it to be a web technology they want it to be fully open and fully portable",
    "start": "970920",
    "end": "977279"
  },
  {
    "text": "so around 2010 M scripton came on the scene and at first blush this is a truly",
    "start": "977279",
    "end": "982759"
  },
  {
    "text": "horrifying idea is that you take native code and compile it into JavaScript now",
    "start": "982759",
    "end": "988199"
  },
  {
    "text": "this was just after JavaScript started becoming fast or fast so people are still in the mindset of JavaScript isn't",
    "start": "988199",
    "end": "993800"
  },
  {
    "text": "that slow but due to some very careful engineering decisions it was able to run",
    "start": "993800",
    "end": "998839"
  },
  {
    "text": "shockingly fast and it actually just worked a lot of the time the big limitation of M scripton is that because",
    "start": "998839",
    "end": "1005680"
  },
  {
    "text": "it was being compiled to JavaScript it couldn't do threads effectively it had to use javascript's concurrency model is",
    "start": "1005680",
    "end": "1012399"
  },
  {
    "text": "you had to have the event Loop you had to be asynchronous you could not block so there's always a bit of porting",
    "start": "1012399",
    "end": "1017759"
  },
  {
    "text": "friction where you to rework your model your applications model to work inside",
    "start": "1017759",
    "end": "1023480"
  },
  {
    "text": "javascript's application model so this brings us to web assembly is what if we",
    "start": "1023480",
    "end": "1028558"
  },
  {
    "text": "could have the nice pervasiveness of M scripton but at the same time have shared memory",
    "start": "1028559",
    "end": "1035240"
  },
  {
    "text": "concurrency so this is kind of a summary of that uh somewhat long-winded history thing is if you look at the top that's",
    "start": "1035240",
    "end": "1041918"
  },
  {
    "text": "the plug-in era and um the obvious problems there are security and another",
    "start": "1041919",
    "end": "1047480"
  },
  {
    "text": "thing that came along is because there security there sort of grudging AC acceptance of things like npapi so when",
    "start": "1047480",
    "end": "1053200"
  },
  {
    "text": "the mobile browsers came out they said that's technically not part of the standard web so we're not going to support that so uh Apple's decision not",
    "start": "1053200",
    "end": "1060480"
  },
  {
    "text": "to support Flash for instance that was a real big impetus to um uh uh sort of uh",
    "start": "1060480",
    "end": "1067840"
  },
  {
    "text": "reexamine these Technologies and because of that they aren't really cross browser",
    "start": "1067840",
    "end": "1073360"
  },
  {
    "text": "anymore even though one version of Chrome supports Flash the mobile version does not um then if you look at the",
    "start": "1073360",
    "end": "1079520"
  },
  {
    "text": "right corner or the right column this is the one that particularly interests me is there's really no platform right now that both runs in every browser and",
    "start": "1079520",
    "end": "1086840"
  },
  {
    "text": "supports shared memory multi-threading and that's one of the the big things making it easy to run",
    "start": "1086840",
    "end": "1092520"
  },
  {
    "text": "native apps on the web so web assembly potentially so enough history how does",
    "start": "1092520",
    "end": "1099480"
  },
  {
    "text": "web assembly actually work and the answer in some ways is very simple and very boring is that you're used to a",
    "start": "1099480",
    "end": "1106039"
  },
  {
    "text": "normal web app and that web app takes in an HT mail page takes in JavaScript sources takes in data files like images",
    "start": "1106039",
    "end": "1113080"
  },
  {
    "text": "CSS things along those lines and uh the web assembly uh when the browser",
    "start": "1113080",
    "end": "1119159"
  },
  {
    "text": "supports web assembly there's just going to be a binary is it's going to be a binary produced by a c compiler from C",
    "start": "1119159",
    "end": "1125080"
  },
  {
    "text": "source files and then you just load into the browser much like you would JavaScript um has its own VM turns into",
    "start": "1125080",
    "end": "1131640"
  },
  {
    "text": "a bunch of functions turns into a bunch of code inside the browser now I'm lying a little bit in fact as an",
    "start": "1131640",
    "end": "1137039"
  },
  {
    "text": "implementation issue a lot of the uh people who are planning on implementing this are planning to fuse the JavaScript",
    "start": "1137039",
    "end": "1142960"
  },
  {
    "text": "in the web assembly bits so when you actually have a web assembly file what's going on is you're taking it and you're",
    "start": "1142960",
    "end": "1148760"
  },
  {
    "text": "shoving it into your JavaScript engine just at a much lower level is the web assembly file you know more about it",
    "start": "1148760",
    "end": "1155320"
  },
  {
    "text": "from the beginning so you can skip all of the uh Dynamic and adaptive compilation things where you're trying",
    "start": "1155320",
    "end": "1160840"
  },
  {
    "text": "to figure out is this an integer or is this a string you know from the beginning but this is an implementation detail from the user's point of view you",
    "start": "1160840",
    "end": "1167280"
  },
  {
    "text": "don't know you don't care what's actually inside this binary file it's rather hard to make slides about",
    "start": "1167280",
    "end": "1173640"
  },
  {
    "text": "binary so here's a uh an image to illustrate it so if you have an example",
    "start": "1173640",
    "end": "1178760"
  },
  {
    "text": "you're calling the function Fu and you have you know one argument which is a plus 7 another which is B both A and B",
    "start": "1178760",
    "end": "1185559"
  },
  {
    "text": "are locals if this was JavaScript you'd initially say well I know nothing about this I don't exactly know what function",
    "start": "1185559",
    "end": "1192200"
  },
  {
    "text": "I'm calling you know I don't know if a is an integer I don't know if it's a string so this addition operation it",
    "start": "1192200",
    "end": "1198080"
  },
  {
    "text": "could do a lot of things it could concatenate it could add etc etc but the",
    "start": "1198080",
    "end": "1203840"
  },
  {
    "text": "in the web assembly version is you have a tree of operations and each of those operations you can exactly infer what",
    "start": "1203840",
    "end": "1210640"
  },
  {
    "text": "it's going to do so when you have an addition operation that says this is the type of it it's an in32 operation so the",
    "start": "1210640",
    "end": "1216280"
  },
  {
    "text": "inputs are both going to be 32-bit integers the output is going to be a 32-bit integer and this allows you to",
    "start": "1216280",
    "end": "1222799"
  },
  {
    "text": "have good performance from the beginning the binary format itself is",
    "start": "1222799",
    "end": "1228039"
  },
  {
    "text": "important because it allows us to be smaller so if you just take uh a JavaScript",
    "start": "1228039",
    "end": "1235960"
  },
  {
    "text": "application you know compiled to asm.js and then transcode it to Binary uh one of the uh software engineers at mosula",
    "start": "1235960",
    "end": "1243280"
  },
  {
    "text": "did this experiment and found that they could reduce the file to about the third the original size but this is before",
    "start": "1243280",
    "end": "1249159"
  },
  {
    "text": "compression if you actually compress it there's sort of an entropy argument in play that it's still the same program so",
    "start": "1249159",
    "end": "1255600"
  },
  {
    "text": "it's still going to be about the same size but nonetheless they were able to shave off about a quarter of the size",
    "start": "1255600",
    "end": "1262440"
  },
  {
    "text": "now size is very important especially on the web because it's data is it's how",
    "start": "1262440",
    "end": "1268640"
  },
  {
    "text": "much do you have to download and this also affects how fast you start up it also affects how often can you update",
    "start": "1268640",
    "end": "1275279"
  },
  {
    "text": "your app and things along those lines so the smaller you can get it it pays dividends in all sorts of other ways and",
    "start": "1275279",
    "end": "1281960"
  },
  {
    "text": "I I should say this point I've you know harped on performance and again performance is one of these things that",
    "start": "1281960",
    "end": "1287080"
  },
  {
    "text": "is more than just how fast you run it's Mobile Battery it is um the difference",
    "start": "1287080",
    "end": "1292760"
  },
  {
    "text": "between four frames a second ha nice hack and 40 frames a second oh this could actually work so performance is a",
    "start": "1292760",
    "end": "1301120"
  },
  {
    "text": "feature it isn't just the same application running faster um another interesting thing about the binary",
    "start": "1301120",
    "end": "1306720"
  },
  {
    "text": "format is that it's about 23 times faster to parse than text so because it's binary because it's not designed to",
    "start": "1306720",
    "end": "1312679"
  },
  {
    "text": "be human readable or human writable you can lay it out in such a way that the machine doesn't have to think too hard",
    "start": "1312679",
    "end": "1320000"
  },
  {
    "text": "when it sucks it in and parsing the JavaScript is actually a fairly large component of startup and JavaScript",
    "start": "1320000",
    "end": "1327159"
  },
  {
    "text": "engines do things like overlap it with the download to try to amortize it but it's fundamentally",
    "start": "1327159",
    "end": "1334039"
  },
  {
    "text": "expensive so what's actually going on under the hood I've waved my hands about uh uh binary encoding and things like",
    "start": "1334039",
    "end": "1340840"
  },
  {
    "text": "that but what does it actually do and when I first did this slide I was like wow this is kind of boring is that WM",
    "start": "1340840",
    "end": "1347400"
  },
  {
    "text": "you get a big chunk of memory a big bunch of bites and you take bites out of it you do operations on them and you",
    "start": "1347400",
    "end": "1354400"
  },
  {
    "text": "shove bites back into it there are no objects there are no strings this does",
    "start": "1354400",
    "end": "1359600"
  },
  {
    "text": "not look like anything you expect to be a programming language especially if you're coming from the JavaScript",
    "start": "1359600",
    "end": "1365520"
  },
  {
    "text": "world but after thinking about it for a while I realize the important thing here is this is not a programming language",
    "start": "1365520",
    "end": "1370799"
  },
  {
    "text": "what this is is it is a portable machine architecture it's kind of equivalent to",
    "start": "1370799",
    "end": "1377480"
  },
  {
    "text": "a CPU in a sense it's CPU has a bunch of memory it has uh can do arithmetic operations it can move things in and out",
    "start": "1377480",
    "end": "1383640"
  },
  {
    "text": "of memory you build programming languages on top of this so you take something like C it gets compiled in",
    "start": "1383640",
    "end": "1390240"
  },
  {
    "text": "terms of this you take something like C++ it gets compiled in terms of this so for example if you have a c program with",
    "start": "1390240",
    "end": "1396240"
  },
  {
    "text": "its nice uh manual memory uh management whenever you create a new structure a new object it boils down to say hey I",
    "start": "1396240",
    "end": "1403200"
  },
  {
    "text": "want to allocate enough bytes to hold the data structure in so I want to allocate 100 bytes and then it does some",
    "start": "1403200",
    "end": "1410840"
  },
  {
    "text": "bookkeeping your program itself says I know I have this big chunk of memory and based on bookkeeping I know this area is",
    "start": "1410840",
    "end": "1417240"
  },
  {
    "text": "free so here have the address of these 100 bytes and then you can load numbers in and out of that specific region and",
    "start": "1417240",
    "end": "1423440"
  },
  {
    "text": "that corresponds to fields on your data structures for example um another thing going on here",
    "start": "1423440",
    "end": "1429200"
  },
  {
    "text": "is that you have a limited amount of memory is hopefully large but still",
    "start": "1429200",
    "end": "1435039"
  },
  {
    "text": "limited because this is running inside a process with a lot of other things so this chunk of memory is going to be next",
    "start": "1435039",
    "end": "1441559"
  },
  {
    "text": "to the JavaScript runtime it's going to be next to the uh document object model so anytime you try to go out of this",
    "start": "1441559",
    "end": "1448000"
  },
  {
    "text": "chunk there's going to be checks that say oh wait you can't do that that isn't safe so that is how security is",
    "start": "1448000",
    "end": "1454760"
  },
  {
    "text": "maintained is that uh whenever you're doing memory accesses you only can access memory you're allowed to",
    "start": "1454760",
    "end": "1462278"
  },
  {
    "text": "access another very important part of uh web assembly is uh foreign function",
    "start": "1462720",
    "end": "1468480"
  },
  {
    "text": "invocation so it isn't just its own thing it's designed to integrate with JavaScript so JavaScript can call into",
    "start": "1468480",
    "end": "1475240"
  },
  {
    "text": "web assembly and web assembly can call back out to JavaScript and this means that you can build hybrid applications",
    "start": "1475240",
    "end": "1481600"
  },
  {
    "text": "is you could for example build your front end or your UI in the Dom and then de uh delegate to web assembly to do",
    "start": "1481600",
    "end": "1488760"
  },
  {
    "text": "some heavy lifting like video decoding or game logic or whatever you want so if",
    "start": "1488760",
    "end": "1494240"
  },
  {
    "text": "you if you've done a Android development it's sort of along the same lines is",
    "start": "1494240",
    "end": "1499480"
  },
  {
    "text": "that you have to Define what the interface is between the two languages uh that's the top of the slide you know",
    "start": "1499480",
    "end": "1504679"
  },
  {
    "text": "it's just declaring two functions as the entry points and exit points and then from that point your two different",
    "start": "1504679",
    "end": "1510080"
  },
  {
    "text": "languages can interoperate with each other now here's where some of the Evil",
    "start": "1510080",
    "end": "1516600"
  },
  {
    "text": "Genius comes into play is because the web is a",
    "start": "1516600",
    "end": "1522240"
  },
  {
    "text": "multi-party uh platform everyone's invested everyone's standardizing everyone has their own implementation",
    "start": "1522240",
    "end": "1528320"
  },
  {
    "text": "doing something new is difficult it takes time so how do you get people to",
    "start": "1528320",
    "end": "1534200"
  },
  {
    "text": "adopt a technology when there's one two three maybe all the browsers don't",
    "start": "1534200",
    "end": "1539480"
  },
  {
    "text": "support it natively yet so the first version of web assembly is going to be designed to be translatable to",
    "start": "1539480",
    "end": "1545520"
  },
  {
    "text": "JavaScript is semantically speaking you can just take this web assembly binary spit out a Javascript file and run it",
    "start": "1545520",
    "end": "1552720"
  },
  {
    "text": "directly in the browser this means that browsers who don't Implement can run it but it'll just be slower so if you have",
    "start": "1552720",
    "end": "1558480"
  },
  {
    "text": "a native implementation you can take in the binary file directly it'll load faster and it will run",
    "start": "1558480",
    "end": "1566200"
  },
  {
    "text": "faster this is roughly what it looks like is you know you start out with a c function this just does two loads from",
    "start": "1567360",
    "end": "1573039"
  },
  {
    "text": "memory adds it together and returns it and then in the web assembly version hand waving this is binary is it has an",
    "start": "1573039",
    "end": "1580760"
  },
  {
    "text": "operation tree which essentially is the same thing just explicitly naming what everything is and then the JavaScript",
    "start": "1580760",
    "end": "1586679"
  },
  {
    "text": "version this is asm.js if you're familiar with that is the first two lines are just saying well the um the",
    "start": "1586679",
    "end": "1594600"
  },
  {
    "text": "inputs are integers the two arguments are integers and you see uh the or zero",
    "start": "1594600",
    "end": "1599840"
  },
  {
    "text": "logically that does nothing but as a quirk of JavaScript that actually turns what was a floating Point number into a",
    "start": "1599840",
    "end": "1605840"
  },
  {
    "text": "32-bit integer because you can't do Boolean operations on floating Point numbers and whenever you have a memory",
    "start": "1605840",
    "end": "1612760"
  },
  {
    "text": "operation instead it says there's this this giant array it's an array buffer and we're going to treat it like the",
    "start": "1612760",
    "end": "1618640"
  },
  {
    "text": "Heap that we see elsewhere another thing to note is that in the web assembly version there are no pointers so what",
    "start": "1618640",
    "end": "1626039"
  },
  {
    "text": "was used to be a pointer gets turned into a 32-bit integer and it's the same as there's other data types like 8bit",
    "start": "1626039",
    "end": "1631360"
  },
  {
    "text": "integers which aren't represented directly they're just emulated on top of this so it's designed to be minimal in",
    "start": "1631360",
    "end": "1637919"
  },
  {
    "text": "the sense there's certain things which you'd think would be part of the platform but don't need to be and it's designed sort of like a CPU is that you",
    "start": "1637919",
    "end": "1644559"
  },
  {
    "text": "just have bits that you're shuffling and Computing on so lot of talking let's see it in",
    "start": "1644559",
    "end": "1650799"
  },
  {
    "text": "action so uh before I get too far into this um I have to say that all the numbers I am going to",
    "start": "1650799",
    "end": "1658000"
  },
  {
    "text": "quote are actually completely unfair and I am being unfair for a",
    "start": "1658000",
    "end": "1663679"
  },
  {
    "text": "reason sort of to illustrate the point so this is all early work this is um a",
    "start": "1663679",
    "end": "1669559"
  },
  {
    "text": "patched version of Chrome it isn't in uh Chrome yet uh this right here is a um R",
    "start": "1669559",
    "end": "1675840"
  },
  {
    "text": "Trace sphere and it's running entirely in JavaScript and it's and running entirely on the CPU",
    "start": "1675840",
    "end": "1681080"
  },
  {
    "text": "no GPU involved which in modern terms is kind of silly but at least it shows what the CPU can do uh up in the right hand",
    "start": "1681080",
    "end": "1687159"
  },
  {
    "text": "corner running about 30 32 frames a second and the program here is just a textual version of the binary format I",
    "start": "1687159",
    "end": "1694600"
  },
  {
    "text": "whipped up uh so we could do some prototypes with it's not the official syntax or anything along those lines",
    "start": "1694600",
    "end": "1700240"
  },
  {
    "text": "it's on my GitHub account if you're interested there will be uh a link later on so it's about 30 frames a second and",
    "start": "1700240",
    "end": "1707559"
  },
  {
    "text": "now the question is is what happens when I click this box and I go into the native version of the back end and we'll",
    "start": "1707559",
    "end": "1713080"
  },
  {
    "text": "see that Sly it's in like 8090 frames a second",
    "start": "1713080",
    "end": "1718320"
  },
  {
    "text": "range now note that I said this is unfair you know if I could claim a 2X performance advantage over JavaScript",
    "start": "1718320",
    "end": "1724519"
  },
  {
    "text": "you know there there there is the sales point there but the the truth of matter is actually more subtle so this example",
    "start": "1724519",
    "end": "1730960"
  },
  {
    "text": "uses uh 32-bit floating Point math whereas naturally JavaScript Works in",
    "start": "1730960",
    "end": "1737559"
  },
  {
    "text": "terms of 64-bit floating Point math so when you have a number for example that's a 64-bit quantity goes to FPU and",
    "start": "1737559",
    "end": "1744519"
  },
  {
    "text": "when you have less bits for the floating Point numbers you can do them faster because you need less Precision it takes",
    "start": "1744519",
    "end": "1750600"
  },
  {
    "text": "less clocks to pump them through now JavaScript could do 32-bit",
    "start": "1750600",
    "end": "1756320"
  },
  {
    "text": "floating Point math fast is there's ways you can Hint it you know there's a JavaScript function called",
    "start": "1756320",
    "end": "1761480"
  },
  {
    "text": "math.round and so every time you do a floating Point function you can immediately do math. F round after it",
    "start": "1761480",
    "end": "1768360"
  },
  {
    "text": "and then the JavaScript engine can say well because you're dropping those bits",
    "start": "1768360",
    "end": "1773440"
  },
  {
    "text": "I don't need to compute them in the first place so if it is really smart and some JavaScript engines are this smart",
    "start": "1773440",
    "end": "1779159"
  },
  {
    "text": "it could look at a sequence of math operations with f round and say I will just generate the most optimal code",
    "start": "1779159",
    "end": "1784919"
  },
  {
    "text": "possible for it but as it turns out dis optimization has not been implemented yet in this particular JavaScript engine",
    "start": "1784919",
    "end": "1791720"
  },
  {
    "text": "and this is an issue of triage is there's just more important things to do at the time so in theory JavaScript",
    "start": "1791720",
    "end": "1798039"
  },
  {
    "text": "script could run just this fast it could run 85 frames a second but the fact is that it doesn't and it doesn't because",
    "start": "1798039",
    "end": "1805159"
  },
  {
    "text": "of complexity and time so the real win for web assembly is that it's simpler",
    "start": "1805159",
    "end": "1810640"
  },
  {
    "text": "it's simpler and easier to get the performance and it takes less effort to get to the point where you have full",
    "start": "1810640",
    "end": "1815679"
  },
  {
    "text": "performance but I have full faith that JavaScript could do this if you throw enough engineers and enough money at",
    "start": "1815679",
    "end": "1821640"
  },
  {
    "text": "it another interesting thing I can't get this to reliably reproduce but I'll try anyways is we'll flip back to JavaScript",
    "start": "1821640",
    "end": "1828240"
  },
  {
    "text": "so when I did that it just regenerated a new JavaScript program compiled it and started running it so it's entirely",
    "start": "1828240",
    "end": "1833880"
  },
  {
    "text": "different code and then I flipped back to the native code same performance flip back to JavaScript there we go um so now",
    "start": "1833880",
    "end": "1841799"
  },
  {
    "text": "you'll see that I'm down to 24 frames a second whereas previously I was at 32 frames a second now I haven't bothered",
    "start": "1841799",
    "end": "1848600"
  },
  {
    "text": "investigating exactly why this is but this is the sort of stuff you get all the time is I was doing something weird",
    "start": "1848600",
    "end": "1855120"
  },
  {
    "text": "is I was just throwing more and more JavaScript at it and at some point the JavaScript engine was like okay whatever",
    "start": "1855120",
    "end": "1862000"
  },
  {
    "text": "I've reached some threshold and I'm not going to try as hard anymore and now it's running slower and this is what I",
    "start": "1862000",
    "end": "1868039"
  },
  {
    "text": "started talking about is predictable performance is uh on the road to this I did things like uh prototypes with shared memory where I was trying to do",
    "start": "1868039",
    "end": "1874440"
  },
  {
    "text": "fluid simulation another parallel computation in JavaScript and actually I",
    "start": "1874440",
    "end": "1879960"
  },
  {
    "text": "I ran into all sorts of weird bugs that took a lot of time to understand why was it running slower like some of them",
    "start": "1879960",
    "end": "1885799"
  },
  {
    "text": "involved uh invisible fields that were added to the objects to give them a hash",
    "start": "1885799",
    "end": "1891159"
  },
  {
    "text": "ID because I was sending it to another process and it needed the hash ID to know if there's Cycles in the object",
    "start": "1891159",
    "end": "1897639"
  },
  {
    "text": "graph so is entirely invisible entirely part of the underlying um underlying",
    "start": "1897639",
    "end": "1903039"
  },
  {
    "text": "implementation so that a nutshell is web assembly",
    "start": "1903039",
    "end": "1909960"
  },
  {
    "text": "um I have an uncle who's a Salesman and one of his quotes is anyone can sell the",
    "start": "1912399",
    "end": "1917600"
  },
  {
    "text": "fut so the question is when is this actually going to be uh available now all these",
    "start": "1917600",
    "end": "1922799"
  },
  {
    "text": "numbers are very very tentative and possibly optimistic they were sort of at the threshold where I said what about",
    "start": "1922799",
    "end": "1929679"
  },
  {
    "text": "2016 and no one laughed out loud um but you know things are still under development these are not a promise so",
    "start": "1929679",
    "end": "1937039"
  },
  {
    "text": "despite previously I was saying shared shared memory multi-threading is the most important thing to make native code",
    "start": "1937039",
    "end": "1943679"
  },
  {
    "text": "on the web work version one isn't going to have it so version one is going to be more a",
    "start": "1943679",
    "end": "1949200"
  },
  {
    "text": "canonicalization of what would happen if you translated to JavaScript is you have a single thread you have an event Loop",
    "start": "1949200",
    "end": "1956080"
  },
  {
    "text": "but what you get is you get it to load faster and run faster and have more reliable performance then as soon as",
    "start": "1956080",
    "end": "1962320"
  },
  {
    "text": "possible after that we're going to add shared memory multi-threading and why",
    "start": "1962320",
    "end": "1967600"
  },
  {
    "text": "not make that part of version one and the answer is is that threading is complicated as a user but it's even more",
    "start": "1967600",
    "end": "1975000"
  },
  {
    "text": "complicated as someone trying to specify how it works so this is one of these like quagmires where you send soldiers",
    "start": "1975000",
    "end": "1982320"
  },
  {
    "text": "in and they never leave alive is everyone who has tried to spec um threads and shared memory has had a",
    "start": "1982320",
    "end": "1988840"
  },
  {
    "text": "tough time of it now we can learn from everything that they did and we definitely are you know seeing what the C++ standards committee does but we are",
    "start": "1988840",
    "end": "1995320"
  },
  {
    "text": "being very cautious and not saying that we're going to block the release on this and that's why the most important",
    "start": "1995320",
    "end": "2001080"
  },
  {
    "text": "feature in my mind is actually not going to be part of the initial version and then from there on out there's all sorts",
    "start": "2001080",
    "end": "2006480"
  },
  {
    "text": "of interesting things to add um uh one of the big ones for me is going to be",
    "start": "2006480",
    "end": "2011679"
  },
  {
    "text": "dynamic linking is right now when you have a web assembly biner it's just going to be one binary so the question",
    "start": "2011679",
    "end": "2017960"
  },
  {
    "text": "is how do you share functionality between apps how do you potentially update part of your app but not all of",
    "start": "2017960",
    "end": "2023559"
  },
  {
    "text": "it at once so you can have a partial download and dynamic linking is a technique from uh native code which if",
    "start": "2023559",
    "end": "2029000"
  },
  {
    "text": "you use to JavaScript is like what it doesn't do that all the time is where you just have multiple files that get loaded and turned into a single program",
    "start": "2029000",
    "end": "2038080"
  },
  {
    "text": "so that is all the prepared content and let's do questions we can get as technical as you want I was just trying",
    "start": "2038080",
    "end": "2045120"
  },
  {
    "text": "to spare you I'd love to talk about it but we'll see what people want to ask um",
    "start": "2045120",
    "end": "2050800"
  },
  {
    "text": "what is the expected performance compared to a need uh we're going to try to get as",
    "start": "2050800",
    "end": "2057320"
  },
  {
    "text": "close as possible and uh for example when you're translating to",
    "start": "2057320",
    "end": "2064280"
  },
  {
    "text": "JavaScript you know just like compiling native code to JavaScript you can sometimes get like",
    "start": "2064280",
    "end": "2071280"
  },
  {
    "text": "within it varies on the app you you can like get within 2% in like the best cases where I think you're pure numeric",
    "start": "2071280",
    "end": "2078158"
  },
  {
    "text": "so if it can look at the program and says oh this is a bunch of math it can just generate the math and run directly on the CPU but then when you start doing",
    "start": "2078159",
    "end": "2085079"
  },
  {
    "text": "something with memory accesses it has to validate all of those memory accesses",
    "start": "2085079",
    "end": "2090118"
  },
  {
    "text": "and make sure they're in the right bounds so there's more friction or if you have a call stack at least to translate to JavaScript but WM will be",
    "start": "2090119",
    "end": "2097040"
  },
  {
    "text": "less of an overhead like the call stack also has overhead so it's very mixed is translate to",
    "start": "2097040",
    "end": "2102079"
  },
  {
    "text": "JavaScript I've seen on Fast JavaScript implementations be pretty much neck and- neck with native code or sometimes be",
    "start": "2102079",
    "end": "2109079"
  },
  {
    "text": "like 20 30% slower on bad JavaScript well I shouldn't say bad but on",
    "start": "2109079",
    "end": "2114560"
  },
  {
    "text": "JavaScript implementations that weren't tuned for this workload is you can sometimes be like a factor of 10 slower",
    "start": "2114560",
    "end": "2121839"
  },
  {
    "text": "um Native client the experience was uh we we told people around 10",
    "start": "2121839",
    "end": "2129839"
  },
  {
    "text": "20% and your expectations would be reasonable and in some ways this is the cost of portability um like one thing I",
    "start": "2129839",
    "end": "2137040"
  },
  {
    "text": "didn't get into is like bit shifting is how does that work when your number is",
    "start": "2137040",
    "end": "2142320"
  },
  {
    "text": "too big so you have like a 32-bit integer and you want to shift it by 33 bits as it turns out different Hardware",
    "start": "2142320",
    "end": "2149440"
  },
  {
    "text": "does this differently you know and if you want something truly portable then you have to sort of tighten that down",
    "start": "2149440",
    "end": "2156280"
  },
  {
    "text": "and say Well when you're out of of range it does exactly this and then that adds cost to every bit shifting operation so",
    "start": "2156280",
    "end": "2164240"
  },
  {
    "text": "security is going to cost you and portability in the sense that your program functions the same everywhere is",
    "start": "2164240",
    "end": "2169680"
  },
  {
    "text": "going to cost you but not cost you that much um especially when you consider",
    "start": "2169680",
    "end": "2174760"
  },
  {
    "text": "you're getting threads and simmed out of the deal eventually as you'll make up for it h",
    "start": "2174760",
    "end": "2182760"
  },
  {
    "text": "yes so the question was are are there any touching points was the phrase used",
    "start": "2182800",
    "end": "2188720"
  },
  {
    "text": "uh between web assembly and GWT uh is GWT still of interest in any Google",
    "start": "2188720",
    "end": "2193839"
  },
  {
    "text": "interest to Google um so for those of you who don't know I believe that GWT is a technology which uh transpiles Java",
    "start": "2193839",
    "end": "2203920"
  },
  {
    "text": "into JavaScript and I believe it's used for applications such as Gmail um I'm",
    "start": "2203920",
    "end": "2210920"
  },
  {
    "text": "not not Gmail um AdWords okay yes um and I cannot",
    "start": "2210920",
    "end": "2219160"
  },
  {
    "text": "speak for is this of interest to Google is I'm just sitting on the web platform part you know I'm trying to make this",
    "start": "2219160",
    "end": "2225560"
  },
  {
    "text": "work so there there there's people I cannot speak for um from our vision eventually we would want to support this",
    "start": "2225560",
    "end": "2232119"
  },
  {
    "text": "case so if you're um cross compiling Java it's a little more complicated",
    "start": "2232119",
    "end": "2237800"
  },
  {
    "text": "because uh Java is a memory safe language and especially uh uh in in the first version",
    "start": "2237800",
    "end": "2245160"
  },
  {
    "text": "is web assembly is not designed to have efficient uh support for garbage collection you could do it but it's not",
    "start": "2245160",
    "end": "2252640"
  },
  {
    "text": "going to be as efficient as saying mapping onto JavaScript objects and um",
    "start": "2252640",
    "end": "2257920"
  },
  {
    "text": "relying on the JavaScript garbage collector itself So eventually version two we're going to think about memory",
    "start": "2257920",
    "end": "2264400"
  },
  {
    "text": "safe languages but version two as far as I'm concerned does not exist is right now we're only focusing on the you got a",
    "start": "2264400",
    "end": "2271960"
  },
  {
    "text": "bucket of btes type languages and things that are implemented directly thereof like python",
    "start": "2271960",
    "end": "2277680"
  },
  {
    "text": "so um okay one more from the audience uh the question is typescript it has types",
    "start": "2277680",
    "end": "2284599"
  },
  {
    "text": "um could web assembly be useful in that case um I personally would not use it so",
    "start": "2284599",
    "end": "2292200"
  },
  {
    "text": "there's an interesting point right here where you know the binary format has all sorts of",
    "start": "2292200",
    "end": "2298280"
  },
  {
    "text": "types and it would be nice to be able to say hey I have something that's JavaScript but it has types but that's",
    "start": "2298280",
    "end": "2306000"
  },
  {
    "text": "going to be different than saying have a big chunk of memory that I manually manage so you know typescript is sort of",
    "start": "2306000",
    "end": "2311640"
  },
  {
    "text": "in between and you know version two where there's a memory safe language that might be worthwhile but I mean a",
    "start": "2311640",
    "end": "2318280"
  },
  {
    "text": "lot of these things that are transpiled to JavaScript were designed with JavaScript in mind is they have exactly",
    "start": "2318280",
    "end": "2325599"
  },
  {
    "text": "the same concurrency model they have you know shared memory etc etc so I think",
    "start": "2325599",
    "end": "2331760"
  },
  {
    "text": "they're always going to be best on top of JavaScript so okay okay um do we have any more",
    "start": "2331760",
    "end": "2339200"
  },
  {
    "text": "questions on the app okay no more so there's someone raising hand in the back hi um sorry the other browser vendors",
    "start": "2339200",
    "end": "2348119"
  },
  {
    "text": "how how in on the W game are they is it going to be a real standard or are we going to end up with everybody doing",
    "start": "2348119",
    "end": "2354200"
  },
  {
    "text": "their own different implementation of it and it'll be the same mess as you know JavaScript and the and everything else",
    "start": "2354200",
    "end": "2360240"
  },
  {
    "text": "inow so um one of these tricky lines to walk is I cannot speak for other browser",
    "start": "2360240",
    "end": "2366040"
  },
  {
    "text": "vendors um however this link at the bottom of the page uh you know github.com",
    "start": "2366040",
    "end": "2371880"
  },
  {
    "text": "webassembly is that sort of being used as a staging area for people to discuss things to write things down um and you",
    "start": "2371880",
    "end": "2380440"
  },
  {
    "text": "can go there and see for yourself who's participating um I I think that if",
    "start": "2380440",
    "end": "2386920"
  },
  {
    "text": "anything we're coordinating a little too much as we're planning too many things out I personally want to see more",
    "start": "2386920",
    "end": "2392520"
  },
  {
    "text": "prototyping but in terms of lack of coordination I can say that that's not a",
    "start": "2392520",
    "end": "2397920"
  },
  {
    "text": "problem at this point so the question is who do I see as",
    "start": "2397920",
    "end": "2403560"
  },
  {
    "text": "the target audience I'm repeating this because it's being recorded and I'm not sure you're being recorded I think everyone heard him",
    "start": "2403560",
    "end": "2409400"
  },
  {
    "text": "um this is a rather tough question is",
    "start": "2409400",
    "end": "2414880"
  },
  {
    "text": "um I mean in the beginning like all the game engine developers who are trying to Target multiple platforms is these are",
    "start": "2414880",
    "end": "2421560"
  },
  {
    "text": "very dedicated people you know very uh technically skilled people and there's",
    "start": "2421560",
    "end": "2427040"
  },
  {
    "text": "always is going to be those people who say I can use this technology no matter what um but when we think about the web",
    "start": "2427040",
    "end": "2434280"
  },
  {
    "text": "today there's a lot of a lot of longtail is you know pretty much anyone can get",
    "start": "2434280",
    "end": "2439720"
  },
  {
    "text": "involved in the web you know it's fairly easy to learn JavaScript it's you know fairly easy to start writing",
    "start": "2439720",
    "end": "2445040"
  },
  {
    "text": "applications and when you're looking at something like native code you're losing some of the features that make it a",
    "start": "2445040",
    "end": "2450680"
  },
  {
    "text": "little easier to onboard is you have to have a compiler in the loop and I think over time things like grunt you know",
    "start": "2450680",
    "end": "2456280"
  },
  {
    "text": "could be adapted to like rerun the compiler and regenerate your binary um",
    "start": "2456280",
    "end": "2461680"
  },
  {
    "text": "but yeah so I have native developers in the audience I have front-end developers um sometimes when we're talking about um",
    "start": "2461680",
    "end": "2468200"
  },
  {
    "text": "shared memory concurrency on the web some of the JavaScript people get a little concerned and say well we don't",
    "start": "2468200",
    "end": "2473280"
  },
  {
    "text": "see see any need for this on the platform so it's one of these until it's actually there it's hard to understand",
    "start": "2473280",
    "end": "2479640"
  },
  {
    "text": "how the environment is going to evolve and I think that one of the things that you know personally distresses me is how",
    "start": "2479640",
    "end": "2487319"
  },
  {
    "text": "you know how uh different the Webb platform is than the other platforms so I think right now they're very separate",
    "start": "2487319",
    "end": "2493880"
  },
  {
    "text": "ecosystems and it's a little hard to see what's going to happen when they start merging but when you're asking things",
    "start": "2493880",
    "end": "2500119"
  },
  {
    "text": "like codex is like as a web developer you could use a native library or some",
    "start": "2500119",
    "end": "2506480"
  },
  {
    "text": "like it looks just like importing JavaScript but it provides some high performance video encoding functionality",
    "start": "2506480",
    "end": "2512880"
  },
  {
    "text": "or video decoding functionality and it's just running in the browser so you may not write it yourself self but you can",
    "start": "2512880",
    "end": "2518240"
  },
  {
    "text": "still use it okay so he's a native developer he's using uh openal and",
    "start": "2518240",
    "end": "2524040"
  },
  {
    "text": "libvorbis um so libvorbis is pretty simple because that's just a codec it's",
    "start": "2524040",
    "end": "2529119"
  },
  {
    "text": "just computation so you um compile it and it magically works and it's",
    "start": "2529119",
    "end": "2534560"
  },
  {
    "text": "magically high performance no problem there open Al is a little more complicated because that interacts with",
    "start": "2534560",
    "end": "2541000"
  },
  {
    "text": "the system it's an audio library so you're saying hey I want to play this sound well how does it get there so one",
    "start": "2541000",
    "end": "2548160"
  },
  {
    "text": "thing I wave my hands over and didn't go too deep into is that for version one uh you you don't have any apis you just",
    "start": "2548160",
    "end": "2555760"
  },
  {
    "text": "call out to JavaScript so for future versions We want to have web apis",
    "start": "2555760",
    "end": "2561119"
  },
  {
    "text": "directly bound to web assembly um but fundamentally they're going to be different apis so it's going to be the",
    "start": "2561119",
    "end": "2567480"
  },
  {
    "text": "same issue whether you have them directly or going to JavaScript is you're going to have to write some sort of compatibility library on top of it so",
    "start": "2567480",
    "end": "2573920"
  },
  {
    "text": "someone somewhere is going to write a library that says oh here's open Al interface here's how I implement it in",
    "start": "2573920",
    "end": "2580240"
  },
  {
    "text": "terms of the web apis for doing audio and there's probably going to like for openal because it's 3D because the Web",
    "start": "2580240",
    "end": "2586760"
  },
  {
    "text": "currently doesn't have 3D there's going to have to be some emulation of you know all the spatialization stuff on top of",
    "start": "2586760",
    "end": "2592480"
  },
  {
    "text": "that so ultimately you compile your code and you thunk into the web apis uh like",
    "start": "2592480",
    "end": "2599599"
  },
  {
    "text": "openg into webg you know that's going to be a fairly simple one does that answer your question",
    "start": "2599599",
    "end": "2605839"
  },
  {
    "text": "sufficiently anyone anyone",
    "start": "2605839",
    "end": "2609319"
  },
  {
    "text": "else okay thank you for coming",
    "start": "2611000",
    "end": "2615640"
  }
]