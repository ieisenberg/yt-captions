[
  {
    "start": "0",
    "end": "165000"
  },
  {
    "text": "my name is Ben Smith and I'm a developer advocate for AWS that's Amazon web",
    "start": "12679",
    "end": "17800"
  },
  {
    "text": "services and I specialize specifically in building serverless based applications so this talk is about",
    "start": "17800",
    "end": "24480"
  },
  {
    "text": "building applications using a workflow service called AWS step functions now I",
    "start": "24480",
    "end": "30199"
  },
  {
    "text": "am going to talk about the service I know sometimes in developer conferences people don't like you talking about",
    "start": "30199",
    "end": "35960"
  },
  {
    "text": "vendor specific services and features but I'll give you a warning now I am going to go into some depth about it but",
    "start": "35960",
    "end": "42000"
  },
  {
    "text": "I'm going to also be showing you some patterns that you can pick out on how to build common kind of architectural",
    "start": "42000",
    "end": "48360"
  },
  {
    "text": "patterns as a workflow and you can pick that out and kind of drop that into other tools that help you build as",
    "start": "48360",
    "end": "54320"
  },
  {
    "text": "workflow so I hope if you're if you're not an AWS user then you can still use some of the ideas here just to get an",
    "start": "54320",
    "end": "60640"
  },
  {
    "text": "idea actually who's already building applications or got some kind of workload running in some sort of uh",
    "start": "60640",
    "end": "66680"
  },
  {
    "text": "cloud-based environment can you give me a rough idea okay so about 2third of the room is anyone already using serverless",
    "start": "66680",
    "end": "74119"
  },
  {
    "text": "in some form same people okay thank you so my",
    "start": "74119",
    "end": "79680"
  },
  {
    "text": "name is Ben Smith as I said and um before joining AWS I was actually a web",
    "start": "79680",
    "end": "84840"
  },
  {
    "text": "developer a PHP developer for about 15 years specializing in uh workflow",
    "start": "84840",
    "end": "90799"
  },
  {
    "text": "automation um before doing Tech I was actually a ski instructor and I once had",
    "start": "90799",
    "end": "95920"
  },
  {
    "text": "the pleasure of even teaching David Hasselhoff how to ski so anyone over the age of about 37 maybe you've heard of",
    "start": "95920",
    "end": "101520"
  },
  {
    "text": "David Hasselhoff great actor not such a great skier but he was fun um so I'm not going to be showing",
    "start": "101520",
    "end": "108600"
  },
  {
    "text": "you loads of links and loads of QR codes that's interesting that keeps popping up I'm not going to be showing you loads of",
    "start": "108600",
    "end": "114040"
  },
  {
    "text": "QR codes throughout this talk or lots of links I'm going to show this one now and again at the very end but this is",
    "start": "114040",
    "end": "119920"
  },
  {
    "text": "landing page that kind of um Aggregates everything I'm going to be talking about so you have here lots of downloadable",
    "start": "119920",
    "end": "125920"
  },
  {
    "text": "and Deployable infrastructure as code templates uh lots of blog posts that go into detail about some of the features",
    "start": "125920",
    "end": "132319"
  },
  {
    "text": "I'll be talking about um videos some really good indepth workshops that take a few hours to complete let you get",
    "start": "132319",
    "end": "139000"
  },
  {
    "text": "handson um and literally hundreds of code samples that you can use to kind of help debug with applications that you're",
    "start": "139000",
    "end": "145840"
  },
  {
    "text": "currently building and as I say I'll show that again at the very end",
    "start": "145840",
    "end": "150879"
  },
  {
    "text": "so since joining AWS about four years ago I've spent most of my time there's that lovely popup again this is going to",
    "start": "150879",
    "end": "157040"
  },
  {
    "text": "this is going to be a good game isn't it I spent most of my time building applications using this service called",
    "start": "157040",
    "end": "162480"
  },
  {
    "text": "Step functions using workflows and when you start building a lot of things using workflows you tend",
    "start": "162480",
    "end": "168200"
  },
  {
    "start": "165000",
    "end": "222000"
  },
  {
    "text": "to start thinking of everything as a a workflow or a decision tree and I'm even doing my kind of uh agendas as workflow",
    "start": "168200",
    "end": "175840"
  },
  {
    "text": "now so this is what I'll be covering I'll be talking about why I believe step functions is a great choice for your",
    "start": "175840",
    "end": "182319"
  },
  {
    "text": "next serverless based application we talking about the different modes you can run your step functions workflows in",
    "start": "182319",
    "end": "188640"
  },
  {
    "text": "as a standard or Express and about the cost implementations and um why you would and how you would save costs uh",
    "start": "188640",
    "end": "196560"
  },
  {
    "text": "running it in those two different modes I'll be talking about a lot of different patterns that you can apply throughout",
    "start": "196560",
    "end": "201760"
  },
  {
    "text": "the whole talk things for stuff like handling errors and running applications at huge",
    "start": "201760",
    "end": "207200"
  },
  {
    "text": "scale and this is what I hope you take away from this right I hope you get some inspiration for ideas that help you",
    "start": "207200",
    "end": "213480"
  },
  {
    "text": "deliver more value for your customers to build applications that are reliable",
    "start": "213480",
    "end": "218599"
  },
  {
    "text": "resilient to faults and failures super scalable super easy to build and to",
    "start": "218599",
    "end": "223760"
  },
  {
    "start": "222000",
    "end": "330000"
  },
  {
    "text": "build as quickly as possible and actually I hope every talk you've been to here today is in service to at least",
    "start": "223760",
    "end": "228920"
  },
  {
    "text": "some of these goals so this is how I think of the kind of serous event driven model right the",
    "start": "228920",
    "end": "236439"
  },
  {
    "text": "serous Spectrum everything is serous in the cloud these days or so it seems",
    "start": "236439",
    "end": "242439"
  },
  {
    "text": "wonder how I can get rid of that update everything is serverless in the cloud these days right and every time a new",
    "start": "242439",
    "end": "248239"
  },
  {
    "text": "feature comes out it's always announced as serus it tends to get quite confusing really the way I think of serus is this",
    "start": "248239",
    "end": "255439"
  },
  {
    "text": "right if you think of it as a kind of pyramid or a spectrum where you're Building Services or you're building",
    "start": "255439",
    "end": "260720"
  },
  {
    "text": "applications by leaning into this service driven approach and each of these each of these Services kind of",
    "start": "260720",
    "end": "267400"
  },
  {
    "text": "sits on a pyramid from manual to manag so as you move along the Spectrum these Services become more and more managed or",
    "start": "267400",
    "end": "274280"
  },
  {
    "text": "more and more serverless and you're using these services for the individual thing for which they're designed and",
    "start": "274280",
    "end": "281039"
  },
  {
    "text": "when you're building applications in this way you're normally going to use more than one service right you're not",
    "start": "281039",
    "end": "286080"
  },
  {
    "text": "just going to have a whole application running on a Lambda function or running on a vent Bridge you're going to want to",
    "start": "286080",
    "end": "291560"
  },
  {
    "text": "combine them together so the the new challenge that arises is when you have these applications that are spread over",
    "start": "291560",
    "end": "298360"
  },
  {
    "text": "multiple different services is sometimes in different regions and different accounts is how do you understand how",
    "start": "298360",
    "end": "304199"
  },
  {
    "text": "those applications are linked together right how do you uh keep them decoupled but know how to inspect the kind of",
    "start": "304199",
    "end": "310960"
  },
  {
    "text": "passing of data from one service to another and this is where step functions",
    "start": "310960",
    "end": "316120"
  },
  {
    "text": "comes in right so step functions is an AWS service that lets you orchestrate",
    "start": "316120",
    "end": "321280"
  },
  {
    "text": "all the other services into workflows this really is going to be a",
    "start": "321280",
    "end": "326919"
  },
  {
    "text": "game throughout the talk isn't it um it let you orchestrate all the other services as workflows now here's a",
    "start": "326919",
    "end": "333919"
  },
  {
    "start": "330000",
    "end": "989000"
  },
  {
    "text": "little animation of me building out a workflow in something called workflow Studio which is in the AWS console and",
    "start": "333919",
    "end": "340240"
  },
  {
    "text": "I'm able to select from a bunch of actions on the left things like saving something to a database or invoking a",
    "start": "340240",
    "end": "346680"
  },
  {
    "text": "Lambda function um I'm also able to uh drag that into a kind of design view and",
    "start": "346680",
    "end": "353759"
  },
  {
    "text": "I can arrange that around conditional logic with if statements Loops I can run",
    "start": "353759",
    "end": "358880"
  },
  {
    "text": "dynamic parallel States at the same time and then I can drill down into any one of those actions and configure it with",
    "start": "358880",
    "end": "365639"
  },
  {
    "text": "the editable form on the right I can also export that workflow as",
    "start": "365639",
    "end": "371360"
  },
  {
    "text": "code right it's called ASL Amazon States language and I can commit that to my git repository and I can share that with my",
    "start": "371360",
    "end": "378120"
  },
  {
    "text": "development team we can make pull requests to it and we can add it to our infrastructure as code templates I tell",
    "start": "378120",
    "end": "385039"
  },
  {
    "text": "you what I'm going to do if I take that out and I just stand here here we go this will solve it so I can add that to",
    "start": "385039",
    "end": "391479"
  },
  {
    "text": "my infrastructure as code templates and I can start building out my applications in a more scalable way with my other",
    "start": "391479",
    "end": "397199"
  },
  {
    "text": "development team now step functions are pay per use so the payment model scales",
    "start": "397199",
    "end": "403479"
  },
  {
    "text": "in line with the number of requests that you send to your workflow okay if you're using it more you pay more if you're",
    "start": "403479",
    "end": "409000"
  },
  {
    "text": "using it less you pay less if you're not using it at all you pay nothing that's the whole kind of concept of serverless",
    "start": "409000",
    "end": "415680"
  },
  {
    "text": "where you can scale back down to zero and this scaling happens Auto automatically right it's fully managed",
    "start": "415680",
    "end": "421000"
  },
  {
    "text": "so there's nothing to provision there's nothing to patch or anything like that it has this neat drag and drop interface",
    "start": "421000",
    "end": "427000"
  },
  {
    "text": "or you can export and build as code and it's superb for handling errors okay so",
    "start": "427000",
    "end": "432080"
  },
  {
    "text": "I'll show you some patterns for handling errors with workflows in a moment but the kind of magic piece with step",
    "start": "432080",
    "end": "437800"
  },
  {
    "text": "functions is that it integrates natively with over 220 other AWS services and the",
    "start": "437800",
    "end": "444919"
  },
  {
    "text": "way it does that is by calling that Services SDK directly so it doesn't spin up some sort of Lambda function under",
    "start": "444919",
    "end": "451080"
  },
  {
    "text": "the hood and invoke their SDK the service itself actually calls that SDK",
    "start": "451080",
    "end": "456120"
  },
  {
    "text": "action whether that's putting something onto a database or invoking a Lambda",
    "start": "456120",
    "end": "461319"
  },
  {
    "text": "function so this is why I think workflows are something you should uh",
    "start": "461319",
    "end": "466680"
  },
  {
    "text": "you should use as soon as you start building your next serverless application and I want to explain why I",
    "start": "466680",
    "end": "471720"
  },
  {
    "text": "say that right here's the sort of most common uh hurdle that we see customers",
    "start": "471720",
    "end": "477280"
  },
  {
    "text": "moving or hitting against every time they start building a serverless application using Lambda this is the",
    "start": "477280",
    "end": "482400"
  },
  {
    "text": "most common story I've seen after speaking to many many customers let's say it's day one and I want to take",
    "start": "482400",
    "end": "487960"
  },
  {
    "text": "advantage of this new serverless thing and I've been told by some manager to go and run something in Lambda so I'm just",
    "start": "487960",
    "end": "494080"
  },
  {
    "text": "going to figure it out and I'm going to get something from a Dynamo DB database so the first thing I need to do is",
    "start": "494080",
    "end": "500240"
  },
  {
    "text": "choose which runtime I'm going to build my Lambda function in I'm going to choose node then I'm going to bring in",
    "start": "500240",
    "end": "505800"
  },
  {
    "text": "the SDK for node and then I'm going to bring in the library for Dynamo DB it's called dot client and it lets me kind of",
    "start": "505800",
    "end": "512360"
  },
  {
    "text": "Marshal and unmarshal data with Dynamo DB then I set up my pams object so I have things like the name of the",
    "start": "512360",
    "end": "518719"
  },
  {
    "text": "database the partition key and the sort key then I set up my function to query",
    "start": "518719",
    "end": "523800"
  },
  {
    "text": "the items so here I'm going to use that doc client put the pams object in I'm",
    "start": "523800",
    "end": "528880"
  },
  {
    "text": "going to promisify the call I put that in a tri catch block and then I'm going to learn all about what the Lambda export Handler is what the event hand",
    "start": "528880",
    "end": "536240"
  },
  {
    "text": "the event object is what the context object is what this event driven model actually means once I've learned that",
    "start": "536240",
    "end": "542880"
  },
  {
    "text": "with the Fantastic AWS docs I'm going to put that inside a tri catch statement and I'm going to um make a synchronous",
    "start": "542880",
    "end": "549640"
  },
  {
    "text": "call to that query items and I'm going to stringify the response and I'm going to return any",
    "start": "549640",
    "end": "555160"
  },
  {
    "text": "errors that's 20 lines of code just to get something from a Dynamo DB table",
    "start": "555160",
    "end": "560320"
  },
  {
    "text": "where I already knew the key it's not very easy this is one of our hello world kind of setups on um on",
    "start": "560320",
    "end": "567320"
  },
  {
    "text": "the docs regardless of the fact that it doesn't actually do a Hello World I think it's quite a complicated getting",
    "start": "567320",
    "end": "572640"
  },
  {
    "text": "started use case right I've got 20 lines of code here and a lot of learning before I can do anything uh just to get",
    "start": "572640",
    "end": "578920"
  },
  {
    "text": "something from a Dynamo DB table I can achieve exactly the same thing using a",
    "start": "578920",
    "end": "584399"
  },
  {
    "text": "workflow and it would look like this I'd simply use the get item SDK in my step",
    "start": "584399",
    "end": "590079"
  },
  {
    "text": "functions workflow I can still retry for anything that fails I can still send failures",
    "start": "590079",
    "end": "596000"
  },
  {
    "text": "Downstream to a dead letter Q to process later on and this is not just like a pretty",
    "start": "596000",
    "end": "601240"
  },
  {
    "text": "picture in a PowerPoint diagram this is actually how it looks in the service right I can see all the different",
    "start": "601240",
    "end": "606680"
  },
  {
    "text": "Services involved and I can understand exactly what this application does so if",
    "start": "606680",
    "end": "612440"
  },
  {
    "text": "I come back to this in a month or a week or either later on in the day I have these two versions and which one is",
    "start": "612440",
    "end": "618480"
  },
  {
    "text": "going to be easier for me to reason about understand pick up and extend then I start sending executions",
    "start": "618480",
    "end": "625920"
  },
  {
    "text": "to my workflow now with step functions I have this kind of single pane of glass to see all the failed and all the",
    "start": "625920",
    "end": "632320"
  },
  {
    "text": "successful executions in one place I can drill down into any one of those executions and I can see what the input",
    "start": "632320",
    "end": "638560"
  },
  {
    "text": "look like what the failure look like what the output look like I can even step through each individual State and",
    "start": "638560",
    "end": "645680"
  },
  {
    "text": "understand what the input to that step was and what the output was these are things that are really difficult to do",
    "start": "645680",
    "end": "651320"
  },
  {
    "text": "with a serverless application that's spread over multiple different resources where you're chasing around various logs",
    "start": "651320",
    "end": "657639"
  },
  {
    "text": "but because you're orchestrating it all together in a step functions workflow all of that information is handled and",
    "start": "657639",
    "end": "664240"
  },
  {
    "text": "presented to you by the step functions console okay let's go back to my Lambda",
    "start": "664240",
    "end": "669839"
  },
  {
    "text": "example let's say I built it in Lambda in day one and I figured all that stuff out and now I'm at day 100 and I have",
    "start": "669839",
    "end": "676000"
  },
  {
    "text": "this little micros service that's running and it's a servicing requests it's grabbing items from Dynamo DB I'm",
    "start": "676000",
    "end": "681680"
  },
  {
    "text": "getting a lot of traffic it's scaling automatically I'm pretty happy with it and now I need this little tiny micros",
    "start": "681680",
    "end": "687279"
  },
  {
    "text": "service to do more things I needed to create things in Dynamo DB I needed to update and delete so I put it behind a",
    "start": "687279",
    "end": "696360"
  },
  {
    "text": "URL and I use API Gateway which is another AWS service to create a URL to",
    "start": "696360",
    "end": "702200"
  },
  {
    "text": "access your Lambda function so I put it behind this URL I send all valid requests Downstream to my Lambda",
    "start": "702200",
    "end": "708800"
  },
  {
    "text": "function then in my Lambda function I have some extra code that Roots each request to the valid bit of code right",
    "start": "708800",
    "end": "715680"
  },
  {
    "text": "whether it's a create an update or a delete probably I'm going to look at the the shape of that inbound HTTP request",
    "start": "715680",
    "end": "721760"
  },
  {
    "text": "and know which bit of code I need to run okay this is working right because it's",
    "start": "721760",
    "end": "726920"
  },
  {
    "text": "still serverless it's still scaling automatically so I'm happy with this at",
    "start": "726920",
    "end": "732079"
  },
  {
    "text": "first but this is the problem right there's a few things here actually the first is that in order to build",
    "start": "732079",
    "end": "738360"
  },
  {
    "text": "something like this I need to configure security permissions to my Lambda function so I need a Lambda function in",
    "start": "738360",
    "end": "744079"
  },
  {
    "text": "this case who is allowed to create update and delete items in Dynamo DB",
    "start": "744079",
    "end": "749680"
  },
  {
    "text": "it's quite Loosely permiss function I also need to configure the memory allocation to this function which could",
    "start": "749680",
    "end": "755560"
  },
  {
    "text": "be different depending on which one of these actions it needs to perform and I need to configure things like the",
    "start": "755560",
    "end": "760920"
  },
  {
    "text": "timeout limit which again would be different depending on which one of those actions so this is what most",
    "start": "760920",
    "end": "766760"
  },
  {
    "text": "people at AWS or most Experts of uh Lambda will tell you to do right they'll tell you to split this function out into",
    "start": "766760",
    "end": "773839"
  },
  {
    "text": "three separate functions one for each one of those actions one thing to create one to update one want to delete move",
    "start": "773839",
    "end": "780199"
  },
  {
    "text": "that rooting logic to the configuration of API Gateway so I've cut out a whole bunch of code there and I've set that",
    "start": "780199",
    "end": "786880"
  },
  {
    "text": "code AS config on the API Gateway service this is better because now I can",
    "start": "786880",
    "end": "792760"
  },
  {
    "text": "configure each one of these functions with the security and the memory and the timeout to be more specific to that",
    "start": "792760",
    "end": "798800"
  },
  {
    "text": "actual function to what it needs but now I've got three resources instead of one",
    "start": "798800",
    "end": "804320"
  },
  {
    "text": "I've got 60 lines of code instead of 20 and my application becomes more and more",
    "start": "804320",
    "end": "809480"
  },
  {
    "text": "difficult to kind of understand reason about picture how it's put together there's no kind of diagram that exists",
    "start": "809480",
    "end": "815320"
  },
  {
    "text": "like this in the service right so you just have to draw this externally or or kind of keep an idea of it in your head",
    "start": "815320",
    "end": "821880"
  },
  {
    "text": "this becomes problem people tell us that they don't know how to keep track of their application when it starts",
    "start": "821880",
    "end": "827120"
  },
  {
    "text": "spreading out like this and this is just three Lambda functions also what I have here because it's 60 lines of code it's",
    "start": "827120",
    "end": "833639"
  },
  {
    "text": "60 places where there's something that can go wrong because it's my code it's the most likely place for something to",
    "start": "833639",
    "end": "839279"
  },
  {
    "text": "go wrong this is the first pattern that I want to show you it's called the rest crud API based on step functions",
    "start": "839279",
    "end": "846720"
  },
  {
    "text": "workflows and API Gateway so here what I'm doing is instead of a Lambda function or three Lambda functions I",
    "start": "846720",
    "end": "853759"
  },
  {
    "text": "have a workflow I root all requests from that API Gateway endpoint to my step",
    "start": "853759",
    "end": "858800"
  },
  {
    "text": "functions workflow and the first task is to decide which branch to run whether",
    "start": "858800",
    "end": "864079"
  },
  {
    "text": "that's get put post or patch then that runs the SD K directly on Dynamo DB so",
    "start": "864079",
    "end": "871120"
  },
  {
    "text": "there's no compute being used here if I go back to this example there's actually no compute here all I'm doing is",
    "start": "871120",
    "end": "876320"
  },
  {
    "text": "reshaping a request and doing something on a database right I'm not calculating anything so I shouldn't need to use",
    "start": "876320",
    "end": "882839"
  },
  {
    "text": "Lambda which is a compute service if I'm not really running any compute so here I'm running the SDK directly there's no",
    "start": "882839",
    "end": "889920"
  },
  {
    "text": "invocation cost for Lambda there's no cold start time it's just as cost effective and just as performant and",
    "start": "889920",
    "end": "895839"
  },
  {
    "text": "it's much easier to understand what this application's doing now the reason I show you that is",
    "start": "895839",
    "end": "901480"
  },
  {
    "text": "because we kind of arrived on that uh that workflow through our own experience",
    "start": "901480",
    "end": "906959"
  },
  {
    "text": "if you like we created this application called server espresso which was here last year in the expo hall and it was an",
    "start": "906959",
    "end": "913800"
  },
  {
    "text": "application that lets you order a cup of coffee from your mobile phone um and it was built entirely on servess",
    "start": "913800",
    "end": "920720"
  },
  {
    "text": "Technologies one of the microservices in this application was called the order manager service and it was this very",
    "start": "920720",
    "end": "927880"
  },
  {
    "text": "kind of simple crud rest API that used API Gateway to Lambda to Dynamo DB much like the",
    "start": "927880",
    "end": "934160"
  },
  {
    "text": "example I showed you before we had some issues with it right we ran this for the first ever time in 2020 at uh AWS",
    "start": "934160",
    "end": "942079"
  },
  {
    "text": "reinvent where we had 60,000 uh customers and there were some latency",
    "start": "942079",
    "end": "947279"
  },
  {
    "text": "issues there were some kind of buggy code issues we had a flickering issue with the screen because of it and we",
    "start": "947279",
    "end": "953279"
  },
  {
    "text": "were trying to debug this in production because we'd never run it at that sort of scale before and we found it was",
    "start": "953279",
    "end": "958839"
  },
  {
    "text": "really difficult to find the individual line of code that was causing this error",
    "start": "958839",
    "end": "964000"
  },
  {
    "text": "we got through the event and we rebuilt the whole thing as a workflow for all the reasons that I've just explained",
    "start": "964000",
    "end": "970399"
  },
  {
    "text": "easy debugging better observability less latency and this is how the order manager service looks today on that",
    "start": "970399",
    "end": "976800"
  },
  {
    "text": "particular application that now runs sometimes at five different events around the world at the same time and",
    "start": "976800",
    "end": "982759"
  },
  {
    "text": "it's much more reliable and resilient we think we chose to run that as an Express",
    "start": "982759",
    "end": "990920"
  },
  {
    "start": "989000",
    "end": "1416000"
  },
  {
    "text": "workflow and that's what I want to focus on next right there's two different modes for running your step functions",
    "start": "990920",
    "end": "997120"
  },
  {
    "text": "workflow on AWS you have a standard and you have Express and it's really important that you choose the right mode",
    "start": "997120",
    "end": "1004000"
  },
  {
    "text": "since step functions was first released it's kind of had a a reputation for being",
    "start": "1004000",
    "end": "1009399"
  },
  {
    "text": "expensive and kind of in uh in response to this I think 2019 the step function",
    "start": "1009399",
    "end": "1015759"
  },
  {
    "text": "team launched something called Express workflows which our more cost effective shorter duration type of workflow",
    "start": "1015759",
    "end": "1023000"
  },
  {
    "text": "they've launched many other features as well since then but what we found is that people were either unaware of this",
    "start": "1023000",
    "end": "1028360"
  },
  {
    "text": "launch or didn't really know how to use it and so they still think step functions is expensive whereas it's more",
    "start": "1028360",
    "end": "1034160"
  },
  {
    "text": "a case of understanding how to use the features to optimize right and that's what I want to just quickly show you so",
    "start": "1034160",
    "end": "1040640"
  },
  {
    "text": "standard workflows can run for up to one year longlasting this is unusual for serverless applications to have",
    "start": "1040640",
    "end": "1046760"
  },
  {
    "text": "something that can run for so long long they're asynchronous so if you trigger a",
    "start": "1046760",
    "end": "1051919"
  },
  {
    "text": "standard workflow you won't get the response you'll just get the acknowledgement that it's been triggered you'll have to retrieve that response by",
    "start": "1051919",
    "end": "1058080"
  },
  {
    "text": "some other call and they have this exactly once execution model so if you invoke a standard workflow with a given",
    "start": "1058080",
    "end": "1064880"
  },
  {
    "text": "input payload you can be sure there will be no duplicate invocations then we've got Express",
    "start": "1064880",
    "end": "1070720"
  },
  {
    "text": "workflows which have a much higher throughput so they transition through those States much more quickly single",
    "start": "1070720",
    "end": "1077240"
  },
  {
    "text": "digit milliseconds and in some cases they have a totally different billing model I'll explain that in a moment they",
    "start": "1077240",
    "end": "1083600"
  },
  {
    "text": "have an at least once execution so there is a chance that you'll get a duplicate invocation with a given payload so you",
    "start": "1083600",
    "end": "1090320"
  },
  {
    "text": "have to make your steps in that workflow IDM poent which means the matter how many times you run it with that given",
    "start": "1090320",
    "end": "1096640"
  },
  {
    "text": "input you'll always get the same result now these can be run synchronously okay",
    "start": "1096640",
    "end": "1101679"
  },
  {
    "text": "so that means you can invoke your Express workflow and get the response back and that's because they have a",
    "start": "1101679",
    "end": "1107039"
  },
  {
    "text": "maximum duration of 5 minutes so it's much shorter one year versus 5",
    "start": "1107039",
    "end": "1112840"
  },
  {
    "text": "minutes so here's an example of an e-commerce workflow that I built using step functions and this is based on a",
    "start": "1112840",
    "end": "1119200"
  },
  {
    "text": "real uh customer that's doing something like this and it does kind of simple things high level stuff here like uh an",
    "start": "1119200",
    "end": "1126400"
  },
  {
    "text": "sqsq putting something on an sqsq to notify that an order's ready polling a",
    "start": "1126400",
    "end": "1131679"
  },
  {
    "text": "Dynamo DB table to check that the order is approved uh publishing a topic processing a payment and then checking",
    "start": "1131679",
    "end": "1138080"
  },
  {
    "text": "the payments being received and then a bunch of LDA functions that update order history uh and inventory and so on it's",
    "start": "1138080",
    "end": "1145480"
  },
  {
    "text": "kind of a high level implementation now I ran this a thousand times as a",
    "start": "1145480",
    "end": "1150919"
  },
  {
    "text": "standard workflow and then a thousand times as an Express workflow to show you the results so I'm comparing some things",
    "start": "1150919",
    "end": "1157960"
  },
  {
    "text": "with the real data now the first point is that the standard workflow took a little bit longer to complete it's not",
    "start": "1157960",
    "end": "1163799"
  },
  {
    "text": "very interesting you know half a second more okay we probably would expect that but that's not the bit I want to focus",
    "start": "1163799",
    "end": "1170159"
  },
  {
    "text": "on this is the important piece right the standard workflow costs 42 cents for a",
    "start": "1170159",
    "end": "1176320"
  },
  {
    "text": "thousand executions but the express workflow costs one cent it's exactly the same workflow definition exactly the",
    "start": "1176320",
    "end": "1183440"
  },
  {
    "text": "same code doing exactly the same thing but just run in a different mode Express",
    "start": "1183440",
    "end": "1188760"
  },
  {
    "text": "versus standard and I'll show you why right standard workflow billing is based",
    "start": "1188760",
    "end": "1194640"
  },
  {
    "text": "on the number of State transitions in your workflow so that's when the the execution passes from one step to the",
    "start": "1194640",
    "end": "1201640"
  },
  {
    "text": "next that's a state transition and you'll build 0.025 for 1,000 State transitions so to",
    "start": "1201640",
    "end": "1209880"
  },
  {
    "text": "work out the cost you take the kind of average number of State transitions in your 1,000 executions which in this case",
    "start": "1209880",
    "end": "1216120"
  },
  {
    "text": "is 17 I run it a th times so I times that by 0.25 and that's how I get my 42",
    "start": "1216120",
    "end": "1223760"
  },
  {
    "text": "cents for my Express workflow it's different you're based on the number of times you run the workflow and how long",
    "start": "1223760",
    "end": "1230880"
  },
  {
    "text": "that workflow takes to complete it doesn't matter how many transitions or how many steps there are in that",
    "start": "1230880",
    "end": "1237000"
  },
  {
    "text": "workflow right so that's the execution Cost Plus the duration cost Times by the",
    "start": "1237000",
    "end": "1242240"
  },
  {
    "text": "number of requests now the duration cost itself is broken down into the execution",
    "start": "1242240",
    "end": "1248000"
  },
  {
    "text": "duration to the nearest 100 milliseconds Times by the memory cost so every time",
    "start": "1248000",
    "end": "1253559"
  },
  {
    "text": "your workflow runs we allocate a certain amount of in uh in memory megabytes goes",
    "start": "1253559",
    "end": "1259559"
  },
  {
    "text": "up in 64 megabyte increments and you can find out what this value is after you run it for this workflow it's this",
    "start": "1259559",
    "end": "1265880"
  },
  {
    "text": "number here so I add that to my overall execution cost and that's how I get the",
    "start": "1265880",
    "end": "1271880"
  },
  {
    "text": "0.01 uh dollar now a typical application like this wouldn't run a thousand times",
    "start": "1271880",
    "end": "1277919"
  },
  {
    "text": "it will run hundreds of thousands or even millions of times right so when you extrapolate this out and send a million",
    "start": "1277919",
    "end": "1283559"
  },
  {
    "text": "requests to it the difference starts to become really clear right I should",
    "start": "1283559",
    "end": "1288799"
  },
  {
    "text": "definitely be running this as an Express workflow and this is really important for developers to think especially when",
    "start": "1288799",
    "end": "1294200"
  },
  {
    "text": "you're building applications in the cloud because everything you do especially when it's serverless it has",
    "start": "1294200",
    "end": "1299640"
  },
  {
    "text": "an implementation uh against the cost right so you have to constantly be thinking about how can I optimize this",
    "start": "1299640",
    "end": "1305840"
  },
  {
    "text": "particular workload if it's going to be serverless and get all those benefits that serverless gets you you have to",
    "start": "1305840",
    "end": "1311640"
  },
  {
    "text": "watch out for the best way to build it so why would you ever choose to build",
    "start": "1311640",
    "end": "1316960"
  },
  {
    "text": "something as a standard work workflow if it's going to cost so much more well there are times that you'll have to right if it takes more than 5 minutes to",
    "start": "1316960",
    "end": "1323600"
  },
  {
    "text": "complete for example then you can't run that as an Express workflow or if you require the exactly once execution model",
    "start": "1323600",
    "end": "1330840"
  },
  {
    "text": "but you have options if you need either of those two things what you can actually do is merge both together so",
    "start": "1330840",
    "end": "1338000"
  },
  {
    "text": "this is the next pattern I want to show you it's called the Nester and here I have a parent standard workflow that",
    "start": "1338000",
    "end": "1344559"
  },
  {
    "text": "calls at some point a kind of child Express workflow gets the response from that child Express and then it continues",
    "start": "1344559",
    "end": "1351400"
  },
  {
    "text": "running um let's imagine that this little polling sequence here does take more",
    "start": "1351400",
    "end": "1358000"
  },
  {
    "text": "than five minutes maybe there's a human approval step involved and they're not at their desk or something so in this",
    "start": "1358000",
    "end": "1363520"
  },
  {
    "text": "case I would have to run this as a standard workflow right so here's what I do I take those em potent Lambda",
    "start": "1363520",
    "end": "1369440"
  },
  {
    "text": "functions I strip them out I save them as an Express workflow and then I just call them from my parent standard",
    "start": "1369440",
    "end": "1375760"
  },
  {
    "text": "workflow and to work out the cost of that you just add the cost of the two together now my parent workflow now has",
    "start": "1375760",
    "end": "1382559"
  },
  {
    "text": "14 State Transitions and not 17 so that costs just 30 cents my child workflow is",
    "start": "1382559",
    "end": "1389039"
  },
  {
    "text": "absolutely tiny it doesn't even affect the overall cost so now I have this workflow that can still run for up to",
    "start": "1389039",
    "end": "1394320"
  },
  {
    "text": "one year and it cost 30 cents instead of 42 cents just by stripping that out and",
    "start": "1394320",
    "end": "1399760"
  },
  {
    "text": "running it as an Express workflow so the key thing to know when you're building with step functions is",
    "start": "1399760",
    "end": "1406000"
  },
  {
    "text": "if it's a standard workflow want to reduce the number of steps in that workflow if it's a Express workflow you",
    "start": "1406000",
    "end": "1412919"
  },
  {
    "text": "want to reduce the overall definition and the input payload so you have less memory that you need to use when you're",
    "start": "1412919",
    "end": "1418919"
  },
  {
    "start": "1416000",
    "end": "1831000"
  },
  {
    "text": "running it but that cost is only the cost of the orchestration piece right that's only",
    "start": "1418919",
    "end": "1425679"
  },
  {
    "text": "the cost of pulling these together in Step functions you still pay a cost for all those other services that you're",
    "start": "1425679",
    "end": "1431520"
  },
  {
    "text": "running so here's an example of a simple workflow first of all I get an item from",
    "start": "1431520",
    "end": "1436679"
  },
  {
    "text": "Dynamo DB now that takes up read capacity units there's a cost associated with that then I have my first state",
    "start": "1436679",
    "end": "1443039"
  },
  {
    "text": "transition then I invoke a Lambda function there's a cost associated with that separate to my step functions cost",
    "start": "1443039",
    "end": "1449799"
  },
  {
    "text": "then I have another state transition and then I put something onto an event bus and again there's a cost associated with",
    "start": "1449799",
    "end": "1455760"
  },
  {
    "text": "that so another way to kind of optimize for cost is to reduce the uh Reliance on",
    "start": "1455760",
    "end": "1462600"
  },
  {
    "text": "other services right and step functions has this thing built in called intrinsic",
    "start": "1462600",
    "end": "1467919"
  },
  {
    "text": "functions and these allow you to perform simple little manipulations simple Transformations without having to use a",
    "start": "1467919",
    "end": "1474720"
  },
  {
    "text": "Lambda function for example so things like manipulating arrays working with Json data uh creating a a unique ID",
    "start": "1474720",
    "end": "1483360"
  },
  {
    "text": "simple math operations and it would be like this so let's say before you use an",
    "start": "1483360",
    "end": "1488440"
  },
  {
    "text": "intrinsic function and you had to chunk an array up into four pieces you might use a Lambda function and run a bunch of",
    "start": "1488440",
    "end": "1495240"
  },
  {
    "text": "code like this and then return those four Chun Chun arrays but if you use an intrinsic function you can take that",
    "start": "1495240",
    "end": "1501640"
  },
  {
    "text": "Lambda function out and simply run this states. array partition so then you're not incurring the cost of invoking your",
    "start": "1501640",
    "end": "1508559"
  },
  {
    "text": "Lambda function if you wanted to split an array well you would probably use a Lambda function and then you'd have to",
    "start": "1508559",
    "end": "1514679"
  },
  {
    "text": "run some code like this or you could just use the intrinsic for um merging",
    "start": "1514679",
    "end": "1519919"
  },
  {
    "text": "data together merging two uh Json uh objects together sorry this was one that",
    "start": "1519919",
    "end": "1525440"
  },
  {
    "text": "was really heavily requested which was Genera a unique ID you had to use a Lambda function for that where you might",
    "start": "1525440",
    "end": "1531200"
  },
  {
    "text": "even need to pull in a library in order to do it now you can just use this intrinsic to generate your own unique ID",
    "start": "1531200",
    "end": "1537760"
  },
  {
    "text": "so the whole point of using an intrinsic function is that you don't incur any invocation delays of things like Lambda",
    "start": "1537760",
    "end": "1544279"
  },
  {
    "text": "cold start times you don't incur any cost for things like running a Lambda uh function and there's no code to manage",
    "start": "1544279",
    "end": "1550720"
  },
  {
    "text": "because it's built directly into your step functions workflow now another thing so here here I have a",
    "start": "1550720",
    "end": "1558720"
  },
  {
    "text": "a loop right and here I have another one because this is an asynchronous uh little mini workload here I'm doing",
    "start": "1558720",
    "end": "1565559"
  },
  {
    "text": "something I'm waiting a certain amount of time and I'm checking if that's done and this is a a common kind of challenge",
    "start": "1565559",
    "end": "1572480"
  },
  {
    "text": "with anything that you build a synchronously is that you need at some point to understand when that workload is finished right um probably the",
    "start": "1572480",
    "end": "1580480"
  },
  {
    "text": "easiest way to figure out when that's finished is by polling and this is a super easy thing to implement I know",
    "start": "1580480",
    "end": "1587440"
  },
  {
    "text": "that because my six-year-old's really good at this I live in the south coast of England okay not far from France I",
    "start": "1587440",
    "end": "1593679"
  },
  {
    "text": "thought and I chose to take my six-year-old on a boat to France for one day and back and when we got to the boat",
    "start": "1593679",
    "end": "1600880"
  },
  {
    "text": "from New Haven to deep the first thing she asked me is Daddy how long is this going to take I thought oh I hadn't",
    "start": "1600880",
    "end": "1607880"
  },
  {
    "text": "actually thought about that I asked someone and they said four hours so I said four hours Great 10 minutes later",
    "start": "1607880",
    "end": "1615159"
  },
  {
    "text": "Daddy how much longer is it going to take every 10 minutes minut she's polling me for status updates about our",
    "start": "1615159",
    "end": "1620320"
  },
  {
    "text": "journey really effective works really well but really annoying really chatty",
    "start": "1620320",
    "end": "1625840"
  },
  {
    "text": "and it's the same with your step functions workflow I'm such a boring dad that immediately I thought about step",
    "start": "1625840",
    "end": "1631520"
  },
  {
    "text": "functions yeah I need to think about that actually um because what you're doing here is you're going around this",
    "start": "1631520",
    "end": "1637080"
  },
  {
    "text": "Loop and every time you go around this Loop you incur three state Transitions and that costs you money right a better",
    "start": "1637080",
    "end": "1642799"
  },
  {
    "text": "way of doing this is a callback mechanism where she would ask me Daddy you let me know when we get there",
    "start": "1642799",
    "end": "1648080"
  },
  {
    "text": "and when we get there I say okay well let's look at our phones and I'll let you know and we arrive and I say we're",
    "start": "1648080",
    "end": "1653440"
  },
  {
    "text": "there and we can have a happy day together and you can Implement that in Step functions as well I'm going to show",
    "start": "1653440",
    "end": "1659559"
  },
  {
    "text": "you this next pattern because it's a better one which is the emit and weight if you're not building serverless",
    "start": "1659559",
    "end": "1665440"
  },
  {
    "text": "applications if you're not running workloads in the cloud this is the pattern to take away with you this is",
    "start": "1665440",
    "end": "1670919"
  },
  {
    "text": "the thing that you can drop into anything you're already doing to orchestrate something okay it's called",
    "start": "1670919",
    "end": "1676559"
  },
  {
    "text": "the emit and weight and what this does is it uses choreography and orchestration together",
    "start": "1676559",
    "end": "1682880"
  },
  {
    "text": "to uh control a sequence of events so anything where you have a kind of a",
    "start": "1682880",
    "end": "1688279"
  },
  {
    "text": "conveyor belt of operations that you need to carry out that you need to organize this is the pattern you use the",
    "start": "1688279",
    "end": "1694919"
  },
  {
    "text": "first thing it does is it puts an event for the most important the first Milestone we call it Milestone one it",
    "start": "1694919",
    "end": "1700960"
  },
  {
    "text": "drops an event for Milestone one onto this event bus and then that will in",
    "start": "1700960",
    "end": "1706120"
  },
  {
    "text": "theory trigger off some other micros service now that could be something that's on premise something you're already running it could be a Lambda",
    "start": "1706120",
    "end": "1712480"
  },
  {
    "text": "function could be something in another account doesn't matter for this example but that that does whatever Milestone",
    "start": "1712480",
    "end": "1719120"
  },
  {
    "text": "one needs to do what it also does is it drops the unique task token onto that",
    "start": "1719120",
    "end": "1724519"
  },
  {
    "text": "event bus you catch that task token and you throw it into storage somewhere for",
    "start": "1724519",
    "end": "1729679"
  },
  {
    "text": "example a Dynamo DB table now when whatever needs to do Milestone one is",
    "start": "1729679",
    "end": "1735360"
  },
  {
    "text": "finished doing Milestone one you you send a request back into your uh your your uh workflow to say okay grab that",
    "start": "1735360",
    "end": "1742360"
  },
  {
    "text": "task token and give it back to step functions and tell it to continue and then step functions will jump to the",
    "start": "1742360",
    "end": "1748799"
  },
  {
    "text": "next step and the pattern continues with Milestone 2 so you can orchestrate anything in this way right and it will",
    "start": "1748799",
    "end": "1755880"
  },
  {
    "text": "wait for up to one year for each Milestone to finish let's say you didn't want to wait a year though let's say you",
    "start": "1755880",
    "end": "1762080"
  },
  {
    "text": "only had 20 seconds and then you need to react based on that well of course you can set that with a Time out or with a",
    "start": "1762080",
    "end": "1768039"
  },
  {
    "text": "heartbeat where your application will just wait that specific amount of time and then it will catch that when it 's",
    "start": "1768039",
    "end": "1773960"
  },
  {
    "text": "out and you can take a different branch and react accordingly that's the emit",
    "start": "1773960",
    "end": "1779039"
  },
  {
    "text": "and weight workflow I put that back into my e-commerce workflow which means I can",
    "start": "1779039",
    "end": "1784919"
  },
  {
    "text": "strip away these two polling Loops completely and replace that with this weit for task token model I won't go",
    "start": "1784919",
    "end": "1791760"
  },
  {
    "text": "through this in lots of detail but the key thing to know is that now I've got just eight State transitions so the",
    "start": "1791760",
    "end": "1796919"
  },
  {
    "text": "overall cost of this parent child workflow has now dropped to 20 cents per thousand executions and this still runs",
    "start": "1796919",
    "end": "1804039"
  },
  {
    "text": "for up to one year right so I've gone from 42 to 20 cents just by implementing",
    "start": "1804039",
    "end": "1809679"
  },
  {
    "text": "some kind of simple functionality and I haven't even added intrinsics to this yet I won't show that again we'll move",
    "start": "1809679",
    "end": "1816640"
  },
  {
    "text": "on to some other stuff this is Dr Werner Vogal he's the",
    "start": "1816640",
    "end": "1824320"
  },
  {
    "text": "CTO of Amazon I believe he's Dutch actually um he's well known as having",
    "start": "1824320",
    "end": "1830799"
  },
  {
    "text": "said everything fails all the time and step functions and workflows in",
    "start": "1830799",
    "end": "1836279"
  },
  {
    "start": "1831000",
    "end": "1947000"
  },
  {
    "text": "general are great for managing failures great for capturing and reacting to failures probably the the best known",
    "start": "1836279",
    "end": "1843880"
  },
  {
    "text": "pattern for workflows is this Saga pattern where you can use the built-in error handling to roll back a sequence",
    "start": "1843880",
    "end": "1851720"
  },
  {
    "text": "of events so let's say I've built a holiday booking system where I book a hotel I book a flight I book a car and",
    "start": "1851720",
    "end": "1858679"
  },
  {
    "text": "the happy path is like this but let's say the booking of the hotel cancels or fails well I can capture that failure",
    "start": "1858679",
    "end": "1865279"
  },
  {
    "text": "and roll it back if that passes but then uh customer chooses to cancel or the",
    "start": "1865279",
    "end": "1871600"
  },
  {
    "text": "booking of the flight fails well I can capture that and then roll back sequentially so you have this nice kind",
    "start": "1871600",
    "end": "1876840"
  },
  {
    "text": "of elegant waterfall pattern of sequential roll backs another interesting one that you",
    "start": "1876840",
    "end": "1883039"
  },
  {
    "text": "can Implement is called the circuit breaker so here what I do is I um",
    "start": "1883039",
    "end": "1888159"
  },
  {
    "text": "prevent retrying some Downstream service when I know my application is broken",
    "start": "1888159",
    "end": "1893519"
  },
  {
    "text": "somehow so I maintain the overall status of my circuit we'll call it uh I'm going",
    "start": "1893519",
    "end": "1899159"
  },
  {
    "text": "to maintain that in Dynamo DB and then the first thing I do every time is I check is my circuit open or close what's",
    "start": "1899159",
    "end": "1905399"
  },
  {
    "text": "the health of my application like and if it's closed I go ahead and run that Downstream service and I exit then the",
    "start": "1905399",
    "end": "1911880"
  },
  {
    "text": "next request comes in is it open or close I go ahead and run because it's closed and then something fails I",
    "start": "1911880",
    "end": "1918399"
  },
  {
    "text": "capture that failure I open the circuit so that the next request knows that there's a problem and then the next",
    "start": "1918399",
    "end": "1924799"
  },
  {
    "text": "request comes in it knows that it's open it doesn't run that Downstream service and I can start to escalate that that's",
    "start": "1924799",
    "end": "1931799"
  },
  {
    "text": "the circuit breaker pattern with step functions workflows now I mentioned at the",
    "start": "1931799",
    "end": "1937159"
  },
  {
    "text": "beginning that step functions let you run at tremendous scale right and there's there's whole uh talks all about",
    "start": "1937159",
    "end": "1943679"
  },
  {
    "text": "this so I'm trying to condense this down into the specifics okay the main thing to know is that step",
    "start": "1943679",
    "end": "1949440"
  },
  {
    "start": "1947000",
    "end": "2295000"
  },
  {
    "text": "functions let you do lots of parallel invocations and these are independent threads or independent workflows so if",
    "start": "1949440",
    "end": "1956279"
  },
  {
    "text": "one of these breaks or fails it doesn't affect the other workflows that are running they're totally um unaware of",
    "start": "1956279",
    "end": "1963240"
  },
  {
    "text": "each other if you like now you have this thing called The Parallel state which allows you to",
    "start": "1963240",
    "end": "1969519"
  },
  {
    "text": "execute a fixed number of Branch with a given input and that same input is given",
    "start": "1969519",
    "end": "1974559"
  },
  {
    "text": "to every Branch within the parallel state so in this this example it's a user ID so I give the user ID one and",
    "start": "1974559",
    "end": "1981440"
  },
  {
    "text": "then I look up the zip code I look up the phone number and then when both of those things is finished that gets added",
    "start": "1981440",
    "end": "1987279"
  },
  {
    "text": "as an output array to the final state if one of those errors then the whole thing errors out so again I have to capture",
    "start": "1987279",
    "end": "1994600"
  },
  {
    "text": "that error so it's all about building workflows where where you capture those errors and you react to them accordingly",
    "start": "1994600",
    "end": "2000200"
  },
  {
    "text": "to make your applications more resilient this is where it gets interesting though this is dynamic",
    "start": "2000200",
    "end": "2006039"
  },
  {
    "text": "parallelism so this is essentially a workflow within a workflow I hand to",
    "start": "2006039",
    "end": "2011840"
  },
  {
    "text": "this Dynamic State an array of items and I can execute these three steps within",
    "start": "2011840",
    "end": "2018000"
  },
  {
    "text": "that uh parallel State all at the same time okay so here's an example of where",
    "start": "2018000",
    "end": "2023480"
  },
  {
    "text": "we've done that or an example of the fan out pattern which you see in all sorts of different architectural uh blog posts",
    "start": "2023480",
    "end": "2030440"
  },
  {
    "text": "this is the fanout pattern as a workflow and we built this for a website called serverless land which is a really great",
    "start": "2030440",
    "end": "2036360"
  },
  {
    "text": "resource by by the way if you're building out serverless applications where we the first thing we wanted to do",
    "start": "2036360",
    "end": "2041519"
  },
  {
    "text": "when we built this site is to aggregate all the AWS blog post into one central",
    "start": "2041519",
    "end": "2047359"
  },
  {
    "text": "location so we built this workflow that populates the site and the first thing it does is it scans an RSS fee to get",
    "start": "2047359",
    "end": "2054118"
  },
  {
    "text": "all the new blog posts on that day it saves them into an array and it sends that array to this Dynamic map State the",
    "start": "2054119",
    "end": "2061280"
  },
  {
    "text": "dynamic map State then all at the same time depending on how many new blog posts there were will scrape that blog",
    "start": "2061280",
    "end": "2067760"
  },
  {
    "text": "post for metadata generate an object that looks like this that has things like the title in the author of that",
    "start": "2067760",
    "end": "2073358"
  },
  {
    "text": "post and then it will save that information to GitHub which is where we keep the code base for this static web",
    "start": "2073359",
    "end": "2079679"
  },
  {
    "text": "application when each one of the blog posts metad data has been grabbed it",
    "start": "2079679",
    "end": "2084720"
  },
  {
    "text": "will trigger a new build of the application and that gets pushed out we actually improved this by using",
    "start": "2084720",
    "end": "2091839"
  },
  {
    "text": "the fan in fan out or the scatter gather pattern so what we did here was move that saf to GitHub step outside of the",
    "start": "2091839",
    "end": "2099800"
  },
  {
    "text": "dynamic uh parallelism state so what that means is we send to this final",
    "start": "2099800",
    "end": "2104960"
  },
  {
    "text": "safety GitHub one array of all the new blog posts and we save that in one go so what we've done there is we've reduced",
    "start": "2104960",
    "end": "2111520"
  },
  {
    "text": "the number of State transitions straight away just by moving that out of our um",
    "start": "2111520",
    "end": "2116760"
  },
  {
    "text": "our Dynamic parallelism workflow now that will only do a concurrency of up to",
    "start": "2116760",
    "end": "2122160"
  },
  {
    "text": "40 items at the same time so what customers were doing they were embedding parallel map states within parallel map",
    "start": "2122160",
    "end": "2129400"
  },
  {
    "text": "states within parallel map states and it's quite a clever way of creating like really uh Dynamic concurrent",
    "start": "2129400",
    "end": "2135880"
  },
  {
    "text": "applications but it became quite difficult to track when things went wrong quite difficult to debug so we",
    "start": "2135880",
    "end": "2142680"
  },
  {
    "text": "launched something six months ago called the distributed map state so what this",
    "start": "2142680",
    "end": "2147800"
  },
  {
    "text": "does is it allows you to run that Dynamic map State as what we call a distributed mode and it gives you up to",
    "start": "2147800",
    "end": "2153960"
  },
  {
    "text": "10,000 parallel executions so we've gone from from a concurrency of 40 to 10,000",
    "start": "2153960",
    "end": "2160160"
  },
  {
    "text": "just by updating something now this plays really nicely with S3 which is an",
    "start": "2160160",
    "end": "2165200"
  },
  {
    "text": "object store and what you can do is you can point it at an S3 bucket and say run",
    "start": "2165200",
    "end": "2170920"
  },
  {
    "text": "these uh these next steps concurrently for every item in this S3 bucket or you",
    "start": "2170920",
    "end": "2176400"
  },
  {
    "text": "can point it at an object and you say run it concurrently for every uh Row in this CSV",
    "start": "2176400",
    "end": "2184000"
  },
  {
    "text": "file here's an example of uh something I built to kind of show this off so this is a serverless gif generator so if you",
    "start": "2184119",
    "end": "2191720"
  },
  {
    "text": "imagine you have an application where you want to timeline scrub across an mp4 file what this does is it creates a five",
    "start": "2191720",
    "end": "2200000"
  },
  {
    "text": "minute GIF anim a 5-c gif animation for every 5-second window of an mp4 file and",
    "start": "2200000",
    "end": "2206640"
  },
  {
    "text": "lets you kind of scrub across that timeline so it's triggered when you save",
    "start": "2206640",
    "end": "2211880"
  },
  {
    "text": "that mp4 file to S3 and then it runs this workflow the first thing it does is it uses ffmpeg to say okay if this is a",
    "start": "2211880",
    "end": "2220400"
  },
  {
    "text": "an mp4 file and I need to create a bunch of GIF animations where will the start and the end be for each one of these",
    "start": "2220400",
    "end": "2226880"
  },
  {
    "text": "gifs and it generates an array to figure that out for each GIF animation it saves",
    "start": "2226880",
    "end": "2232079"
  },
  {
    "text": "that array to S3 and then it invokes and enters this distributed map state where it spins up a Lambda function that will",
    "start": "2232079",
    "end": "2240280"
  },
  {
    "text": "go ahead and build each individual GIF animation and then finally save that back to",
    "start": "2240280",
    "end": "2245599"
  },
  {
    "text": "S3 why am i showing you that what's interesting about that the interesting",
    "start": "2245599",
    "end": "2251280"
  },
  {
    "text": "piece is that it doesn't matter if the MP4 that I upload is 10 hours or 10 minutes it will take the same amount of",
    "start": "2251280",
    "end": "2257640"
  },
  {
    "text": "time to complete because I'm spinning up a Lambda um invocation for each individual",
    "start": "2257640",
    "end": "2264839"
  },
  {
    "text": "GIF animation 10,000 at a time so that's the interesting bit right that's how I'm",
    "start": "2264839",
    "end": "2270520"
  },
  {
    "text": "able to get this incredible parallelism by using this distributed map State and Lambda together",
    "start": "2270520",
    "end": "2278599"
  },
  {
    "text": "if you want to learn more about building applications with workflows this is a really good resource it's called s12d",
    "start": "2279839",
    "end": "2285760"
  },
  {
    "text": "do.com workflows and here you have well over a hundred uh examples from",
    "start": "2285760",
    "end": "2291359"
  },
  {
    "text": "customers it's all um from the community really where they've built workflows and they've uh they've added it to this",
    "start": "2291359",
    "end": "2297520"
  },
  {
    "start": "2295000",
    "end": "2359000"
  },
  {
    "text": "resource you can search by use case you can search by Services um and you can deploy that directly into your account",
    "start": "2297520",
    "end": "2304880"
  },
  {
    "text": "you can uh explore it visually you can look at the infrastructure as code template that they all have they have uh",
    "start": "2304880",
    "end": "2310520"
  },
  {
    "text": "terraform Sam cloud formation and the cdk you can even inspect the ASL syntax",
    "start": "2310520",
    "end": "2317280"
  },
  {
    "text": "the definition of your workflow which is great for helping you debug any issues and with this button here you can",
    "start": "2317280",
    "end": "2323359"
  },
  {
    "text": "actually deploy that straight into your AWS account so here's that final link",
    "start": "2323359",
    "end": "2329119"
  },
  {
    "text": "again that has all of those resources together on one page so Deployable uh",
    "start": "2329119",
    "end": "2334640"
  },
  {
    "text": "templates blog posts videos workshops and code samples and if there's any",
    "start": "2334640",
    "end": "2339920"
  },
  {
    "text": "questions I'm happy to answer that and thank you very",
    "start": "2339920",
    "end": "2344359"
  },
  {
    "text": "much",
    "start": "2357359",
    "end": "2360359"
  }
]