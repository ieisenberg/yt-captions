[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "I'm will I'm with me the MS and I'm gonna talk",
    "start": "9500",
    "end": "15120"
  },
  {
    "text": "about clustering and go so just as a heads up I'm gonna do a little bit of",
    "start": "15120",
    "end": "20189"
  },
  {
    "text": "like live demo stuff which is probably going to catastrophic Allah fail and if",
    "start": "20189",
    "end": "25830"
  },
  {
    "text": "that does we can all just laugh at me I'm totally cool with that so a little bit about myself actually real quick who",
    "start": "25830",
    "end": "33030"
  },
  {
    "text": "here uses go in some way I know you do all right handful anyone written any go",
    "start": "33030",
    "end": "40829"
  },
  {
    "text": "for fun that didn't raise their hand okay so some light amount of experience did anyone actually come to go to last",
    "start": "40829",
    "end": "50039"
  },
  {
    "text": "year in the crowd well I know you guys did that's not fair okay did anybody",
    "start": "50039",
    "end": "55320"
  },
  {
    "text": "actually come see my talk last year on go this is not the same talk so don't",
    "start": "55320",
    "end": "61920"
  },
  {
    "text": "worry I'm not like shilling the same same stuff anyway a little bit of a go",
    "start": "61920",
    "end": "67920"
  },
  {
    "start": "67000",
    "end": "111000"
  },
  {
    "text": "enthusiast I actually sadly don't write a lot of code anymore myself which you",
    "start": "67920",
    "end": "75360"
  },
  {
    "text": "know is just what it is I guess sometimes in life and career whatever I",
    "start": "75360",
    "end": "80580"
  },
  {
    "text": "lead up the infrastructure and platform teams at media ass and I'd be remiss to",
    "start": "80580",
    "end": "85619"
  },
  {
    "text": "say not to say that we're hiring because we're hiring so if you're interested in",
    "start": "85619",
    "end": "90960"
  },
  {
    "text": "those sorts of things come talk to me later okay so really quickly why go this is not a go pitch I'm not going to",
    "start": "90960",
    "end": "97530"
  },
  {
    "text": "actually pitch you on using go in fact I think I'm gonna say some things that might make you think that go is not good",
    "start": "97530",
    "end": "102659"
  },
  {
    "text": "which is totally not true go is awesome but like the really quick basic things",
    "start": "102659",
    "end": "108799"
  },
  {
    "text": "which I'm glad that none of you came to my talk last year because this is",
    "start": "108799",
    "end": "114210"
  },
  {
    "start": "111000",
    "end": "257000"
  },
  {
    "text": "literally the same slide almost it's easy to build services like it's just",
    "start": "114210",
    "end": "119460"
  },
  {
    "text": "really quick to build micro services since that's the buzzword it's got a",
    "start": "119460",
    "end": "126270"
  },
  {
    "text": "great standard library if you want to build something like truly from scratch",
    "start": "126270",
    "end": "132239"
  },
  {
    "text": "you have pretty much everything that you need to do that out of language and if",
    "start": "132239",
    "end": "137340"
  },
  {
    "text": "you don't want to build something from complete scratch there's a ton of and a very quickly growing community that has",
    "start": "137340",
    "end": "143580"
  },
  {
    "text": "a ton of libraries and a ton of utilities which some of a couple of which we'll talk about soon but you know",
    "start": "143580",
    "end": "152010"
  },
  {
    "text": "topic du jour if you like docker that things and go and there's like a lot of",
    "start": "152010",
    "end": "158100"
  },
  {
    "text": "other awesome examples out there the built in tooling is also amazing in fact",
    "start": "158100",
    "end": "163620"
  },
  {
    "text": "I think this is one of the places where Co actually really excels over other languages and tools like Go fum",
    "start": "163620",
    "end": "168959"
  },
  {
    "text": "so the formatting built-in formatting stuff that exists within go that makes it possible for you never to have an",
    "start": "168959",
    "end": "175170"
  },
  {
    "text": "argument about whether or not the brace goes on the next line or whether or not there's a space between the function",
    "start": "175170",
    "end": "180900"
  },
  {
    "text": "name and the open parens like I'm really happy that I never have to have the argument ever again",
    "start": "180900",
    "end": "186450"
  },
  {
    "text": "go tests which is you know a package that basically has baked in tests and make it really easy to build your own",
    "start": "186450",
    "end": "194010"
  },
  {
    "text": "whether it's you know unit tests or functional tests or whatever go vet which basically says hey this code looks",
    "start": "194010",
    "end": "201150"
  },
  {
    "text": "suspicious you could make it you should make it better that's not really a good description you should go look it up if",
    "start": "201150",
    "end": "206579"
  },
  {
    "text": "you're interesting to go and then like the race race condition checker which has been quite handy at times for me",
    "start": "206579",
    "end": "213380"
  },
  {
    "text": "something you'll see a couple times in the demos that I'm gonna hopefully make",
    "start": "213380",
    "end": "219450"
  },
  {
    "text": "work in a second are the compile times they're like really fast it's really",
    "start": "219450",
    "end": "228090"
  },
  {
    "text": "like more of a scripting language when it comes to just being able to do you",
    "start": "228090",
    "end": "233700"
  },
  {
    "text": "know control see up arrow enter and test real quick so that's super spoiling and",
    "start": "233700",
    "end": "242450"
  },
  {
    "text": "it just feels productive I can't quantify that in any meaningful way but I like it because I but the code that I",
    "start": "242450",
    "end": "249750"
  },
  {
    "text": "wrote to put this thing together I don't think it took me more than like six hours anyway",
    "start": "249750",
    "end": "257640"
  },
  {
    "start": "257000",
    "end": "486000"
  },
  {
    "text": "cool so why talk about clustering go well clustering is not really batteries",
    "start": "257640",
    "end": "266610"
  },
  {
    "text": "included in go and when I say batteries include I mean like there are a lot of other",
    "start": "266610",
    "end": "271710"
  },
  {
    "text": "languages that have things that are really closely tied to language or",
    "start": "271710",
    "end": "276810"
  },
  {
    "text": "closely affiliated with language that are like the preferred mechanism for clustering so things like gosh akka",
    "start": "276810",
    "end": "283770"
  },
  {
    "text": "cluster or ylang OTP like quas are I",
    "start": "283770",
    "end": "289200"
  },
  {
    "text": "guess like stuff like that like go doesn't really have a de facto that I'm",
    "start": "289200",
    "end": "295320"
  },
  {
    "text": "aware of and there are a lot of newer libraries but none of them are really",
    "start": "295320",
    "end": "301080"
  },
  {
    "text": "that mature from what I've seen so like I think beehive and go circuit are a",
    "start": "301080",
    "end": "307890"
  },
  {
    "text": "couple that come to mind and so more often than not services that are out there kind of roll it roll it themselves",
    "start": "307890",
    "end": "314670"
  },
  {
    "text": "and I think a decent example of rolling it yourself and then having to roll it",
    "start": "314670",
    "end": "320790"
  },
  {
    "text": "again a couple times as you understand you're laying problem space better has been like in Flex DB which has had to",
    "start": "320790",
    "end": "326010"
  },
  {
    "text": "actually go through and you know rebuild a bunch of they're clustering a few",
    "start": "326010",
    "end": "331620"
  },
  {
    "text": "times over for good reasons so what I'm going to walk you guys through is like",
    "start": "331620",
    "end": "339450"
  },
  {
    "text": "one way of building a clustered stateful service there are many ways to do that",
    "start": "339450",
    "end": "344670"
  },
  {
    "text": "this is not the perfect way this is just a way I only have so much time to actually like demonstrate a couple",
    "start": "344670",
    "end": "349950"
  },
  {
    "text": "different tools so you know you're gonna get to see those tools in action and",
    "start": "349950",
    "end": "356810"
  },
  {
    "text": "yeah cool so let me just set up a fake",
    "start": "356810",
    "end": "363210"
  },
  {
    "text": "scenario for the thing that we're building um let's say let's say you're a business that has like multiple data",
    "start": "363210",
    "end": "370620"
  },
  {
    "text": "centers each of those data centers is like distributed in different parts of",
    "start": "370620",
    "end": "376800"
  },
  {
    "text": "the world so hypothetically like Chicago Hong Kong Amsterdam I picked those three",
    "start": "376800",
    "end": "384000"
  },
  {
    "text": "in particular because there's like anywhere between 180 260 milliseconds of",
    "start": "384000",
    "end": "389190"
  },
  {
    "text": "latency between each of them which means these events happen when they happen concurrently it's non-trivial to tell",
    "start": "389190",
    "end": "396600"
  },
  {
    "text": "the other data center that they happen and certainly you can't do so in a way that says wait you can't do anything else until I",
    "start": "396600",
    "end": "403120"
  },
  {
    "text": "tell you and so what we want to do is we want to build a service that counts those events this is actually not too",
    "start": "403120",
    "end": "411430"
  },
  {
    "text": "dissimilar from what we've got at medium F we have several thousand servers we have millions of events per second we",
    "start": "411430",
    "end": "417460"
  },
  {
    "text": "have nine data centers we have you know tons of concurrency tons of different",
    "start": "417460",
    "end": "423640"
  },
  {
    "text": "types of events and it's really important for us to be able to handle those events with a specific bounded",
    "start": "423640",
    "end": "430720"
  },
  {
    "text": "latency budget and if we miss that budget we effectively are missing out on",
    "start": "430720",
    "end": "435910"
  },
  {
    "text": "you know potential money so the",
    "start": "435910",
    "end": "441250"
  },
  {
    "text": "constraints that we have here is that Counting should be fast right we can't actually afford to cross the ocean every",
    "start": "441250",
    "end": "448180"
  },
  {
    "text": "time we can't afford to wait on that transfer back and forth every time an",
    "start": "448180",
    "end": "453310"
  },
  {
    "text": "event happens certainly and certainly couldn't do that synchronously and count should be correct so we should try to",
    "start": "453310",
    "end": "461470"
  },
  {
    "text": "make it possible not to lose events right as they as they are effectively",
    "start": "461470",
    "end": "467190"
  },
  {
    "text": "incremented upon so for those guys who are familiar with the cat theorems is",
    "start": "467190",
    "end": "472540"
  },
  {
    "text": "starting to look a little bit of like an AP system right basically I need I need my operations to occur and be available",
    "start": "472540",
    "end": "481510"
  },
  {
    "text": "often in the state of a potential partition cool so let's get started",
    "start": "481510",
    "end": "489040"
  },
  {
    "start": "486000",
    "end": "520000"
  },
  {
    "text": "just as our bedrock I'm going to do a really basic counter service so we'll",
    "start": "489040",
    "end": "495940"
  },
  {
    "text": "start with one node and a atomic integer nothing fancy right so those two little",
    "start": "495940",
    "end": "503980"
  },
  {
    "text": "curl lines and I did write the code will demonstrate in a second but that's basically what you're going to expect",
    "start": "503980",
    "end": "509140"
  },
  {
    "text": "right it's if before I do the increment if I do it get on it I get zero after I",
    "start": "509140",
    "end": "516820"
  },
  {
    "text": "get one yay cool so this is this is the",
    "start": "516820",
    "end": "522250"
  },
  {
    "text": "code it's pretty much exactly what I just said there's a counter with an integer if I run an increment on it it",
    "start": "522250",
    "end": "528760"
  },
  {
    "text": "increments the counter if I count then it tells me what the counters value is",
    "start": "528760",
    "end": "534380"
  },
  {
    "text": "so I'm going to do this in my browser and hope that it doesn't break cool I'm",
    "start": "534380",
    "end": "547190"
  },
  {
    "text": "incrementing it by one and incremented counter to one wow this is working so well okay it's incrementing me three",
    "start": "547190",
    "end": "554620"
  },
  {
    "text": "four or five yeah okay close that awesome all right well that",
    "start": "554620",
    "end": "562130"
  },
  {
    "text": "was really nice that worked it's always good good to get a running start with the demos that",
    "start": "562130",
    "end": "567230"
  },
  {
    "text": "might totally crash and burn Oh Microsoft Area reporting like Excel crashing and burning so okay so that's",
    "start": "567230",
    "end": "574010"
  },
  {
    "text": "cool we have one note in one data center not particularly useful have definitely not met the needs of the hypothetical",
    "start": "574010",
    "end": "582560"
  },
  {
    "text": "situation that I brought up which is lots of data centers lots of events happening distributed so next step is to",
    "start": "582560",
    "end": "588920"
  },
  {
    "text": "co distribute said said service so we're gonna take that same exact thing that we",
    "start": "588920",
    "end": "594860"
  },
  {
    "start": "592000",
    "end": "645000"
  },
  {
    "text": "just built we're gonna put it in several data centers and then we're going to",
    "start": "594860",
    "end": "601450"
  },
  {
    "text": "route those increment requests to the closest node and so let's let's let's do",
    "start": "601450",
    "end": "610040"
  },
  {
    "text": "that real quick let's see all right I'm sure some of you guys in the back can't",
    "start": "610040",
    "end": "615500"
  },
  {
    "text": "actually see what's going on",
    "start": "615500",
    "end": "619540"
  },
  {
    "text": "go run by the way every time I do this I'm compiling so that was pretty quick",
    "start": "621830",
    "end": "628200"
  },
  {
    "text": "fast rate alright go run go port equals",
    "start": "628200",
    "end": "637050"
  },
  {
    "text": "4,000 to go run go port equals 4,000",
    "start": "637050",
    "end": "644370"
  },
  {
    "text": "three alright so I've got three three nodes and now I'm gonna increment them",
    "start": "644370",
    "end": "651990"
  },
  {
    "start": "645000",
    "end": "717000"
  },
  {
    "text": "awesome it still works this is the best day ever cool so I just did seven",
    "start": "651990",
    "end": "658170"
  },
  {
    "text": "increment requests on that first node oh you can't see it can you damn it hold on let's fix this magic Oh",
    "start": "658170",
    "end": "665210"
  },
  {
    "text": "what is this that's Excel guys I love Excel okay so",
    "start": "665210",
    "end": "673760"
  },
  {
    "text": "here's my second node Oh No see I got two like twelve here but now when I hit",
    "start": "673760",
    "end": "679320"
  },
  {
    "text": "refresh on this one it's only two hmm all right only got two five well they're",
    "start": "679320",
    "end": "687330"
  },
  {
    "text": "counting they are counting that's pretty cool by the way if if I were like",
    "start": "687330",
    "end": "692400"
  },
  {
    "text": "actually a truthful person I would I would put each of these in parts",
    "start": "692400",
    "end": "697710"
  },
  {
    "text": "different parts of the world but because I'm on conference Wi-Fi we're just gonna do on my laptop and pretend so all right",
    "start": "697710",
    "end": "705030"
  },
  {
    "text": "so I just did a bunch of increment requests let's make these go away a",
    "start": "705030",
    "end": "712850"
  },
  {
    "text": "bunch of the increment requests they're different on every node and its really obvious because we're not replicating",
    "start": "712850",
    "end": "719490"
  },
  {
    "text": "state all I did was take that counter and like deploy it three times so well you're boring us I know so basically we",
    "start": "719490",
    "end": "726630"
  },
  {
    "text": "in order to actually get this whole thing to work we need to counter to talk to each other which means we need the",
    "start": "726630",
    "end": "732300"
  },
  {
    "text": "nodes to actually know about each other which means that we need to solve for cluster membership so I think I",
    "start": "732300",
    "end": "739680"
  },
  {
    "text": "mentioned at the very beginning that this is a stateful service right this is",
    "start": "739680",
    "end": "745380"
  },
  {
    "text": "when I say stateful I mean like if you were implementing a database you would carry the state locally one option would",
    "start": "745380",
    "end": "751320"
  },
  {
    "text": "be obviously to like take something like a Cassandra and let it do all the work for you",
    "start": "751320",
    "end": "756450"
  },
  {
    "text": "that's cheating you wouldn't be here if all I said was using Cassandra with go and then like five minutes later it's",
    "start": "756450",
    "end": "762750"
  },
  {
    "text": "done hooray bye so what we're gonna do is we're gonna use member list and member list is a go library that's built",
    "start": "762750",
    "end": "771180"
  },
  {
    "text": "by Hoshi Corp which or I guess managed oversee yet built sure by hashing Corp",
    "start": "771180",
    "end": "777000"
  },
  {
    "text": "which is an amazing company it does really good work they built vagrant in console and hatless and terraform and all sorts of",
    "start": "777000",
    "end": "784170"
  },
  {
    "text": "really great DevOps magic sprinkly dust tools basically what it does is it",
    "start": "784170",
    "end": "790560"
  },
  {
    "text": "manages costs cluster membership it's based on swim which is a gossip style membership protocol I'll speak more a",
    "start": "790560",
    "end": "796050"
  },
  {
    "text": "little bit more about that in a second it has baked in member failure detection which is really important right because",
    "start": "796050",
    "end": "801870"
  },
  {
    "text": "if you're managing a member a list of members you want to make sure that you have an accurate list of who you should",
    "start": "801870",
    "end": "807120"
  },
  {
    "text": "be talking to and this library is actually in use by like console docker Lib network anymore actually if you want",
    "start": "807120",
    "end": "813450"
  },
  {
    "text": "some fun like go to github and do the whole code search thing type in hash you Corp slash member list and there's like I don't know forty pages of results of",
    "start": "813450",
    "end": "822000"
  },
  {
    "text": "people actually implementing it so swim is scalable weekly consistent infection",
    "start": "822000",
    "end": "830880"
  },
  {
    "start": "824000",
    "end": "978000"
  },
  {
    "text": "style process group membership protocol that is way more than four letters it",
    "start": "830880",
    "end": "837240"
  },
  {
    "text": "basically has two goals which is to maintain a local membership list of non faulty processes local like local to the",
    "start": "837240",
    "end": "844470"
  },
  {
    "text": "node and then detect and eventually notify others of process failures and so",
    "start": "844470",
    "end": "850620"
  },
  {
    "text": "mechanically the way that works is it's gossip based and basically that means it's typically",
    "start": "850620",
    "end": "858329"
  },
  {
    "text": "these interactions happen node to node like one node to another node and so when a node joins a cluster it does a",
    "start": "858329",
    "end": "865440"
  },
  {
    "text": "full state sync with an existing member and it begins gossiping its existence to all of the other members in the cluster",
    "start": "865440",
    "end": "872899"
  },
  {
    "text": "gossip about that internal member list state actually happens on a regular interval and against a randomly a number",
    "start": "872899",
    "end": "879149"
  },
  {
    "text": "of randomly selected members so basically what this means is on it like every three seconds every five seconds or so I'm going to gossip to like",
    "start": "879149",
    "end": "885720"
  },
  {
    "text": "another three people hey I'm here here's my state there's also this thing called probes",
    "start": "885720",
    "end": "890970"
  },
  {
    "text": "and probes or basically hey are you here and and there's an expectation there is for you to say yep I'm here I'm live and",
    "start": "890970",
    "end": "897900"
  },
  {
    "text": "so if a node doesn't act a probe message it's marked as suspicious and because of",
    "start": "897900",
    "end": "903180"
  },
  {
    "text": "gossip whenever you mark a note as suspicious you actually tell the rest of the cluster well sorry you gossip to the",
    "start": "903180",
    "end": "908280"
  },
  {
    "text": "rest of the cluster hey this notes suspicious and then if it's mr. snowed suspicious no doesn't",
    "start": "908280",
    "end": "915090"
  },
  {
    "text": "dispute suspicions after a certain time out it's marked as dead which is also gossip doubt so you end up getting this",
    "start": "915090",
    "end": "921410"
  },
  {
    "text": "kind of cool eventually consistent like weekly consistent set of members that's",
    "start": "921410",
    "end": "926850"
  },
  {
    "text": "managed across the entire node so the entire node eventually knows that a particular set of members exist and",
    "start": "926850",
    "end": "933180"
  },
  {
    "text": "every so often a full state sync actually happens between like two different random members and depending",
    "start": "933180",
    "end": "940860"
  },
  {
    "text": "on how big your cluster gets like this is really okay and fine in my you know hypothetical cluster of three that's",
    "start": "940860",
    "end": "946080"
  },
  {
    "text": "running on my laptop but if your cluster is tens of thousands of servers you",
    "start": "946080",
    "end": "951510"
  },
  {
    "text": "can't really afford to do this all the time unless you have infinite bandwidth which is not a thing the speed of light",
    "start": "951510",
    "end": "957870"
  },
  {
    "text": "is like way too slow for that and so the trade-offs between the bandwidth and",
    "start": "957870",
    "end": "963900"
  },
  {
    "text": "converges time here are configurable right you can you can say I want more bandwidth to be used by this process and",
    "start": "963900",
    "end": "969830"
  },
  {
    "text": "converges time across the cluster will be less or vice versa cool so your nodes becoming cluster",
    "start": "969830",
    "end": "981510"
  },
  {
    "start": "978000",
    "end": "1179000"
  },
  {
    "text": "we're using member list is actually relatively straightforward this is the code snippet behind it you basically set",
    "start": "981510",
    "end": "992520"
  },
  {
    "text": "it config and then create the member list instance and then join another",
    "start": "992520",
    "end": "1001160"
  },
  {
    "text": "member list node if you know there are others that's pretty much it at that point then the cluster does does things",
    "start": "1001160",
    "end": "1009500"
  },
  {
    "text": "on itself on its own so let me show you the whole does things on its own part",
    "start": "1009500",
    "end": "1014860"
  },
  {
    "text": "we're done with that last example member list all right cool",
    "start": "1014860",
    "end": "1023040"
  },
  {
    "text": "all right so what I'm doing right now is I'm spinning up this is the first node this is the seed node so I've got a note",
    "start": "1023040",
    "end": "1031209"
  },
  {
    "text": "here who is basically the first node in a particular cluster I'm going to spin",
    "start": "1031210",
    "end": "1037750"
  },
  {
    "text": "up a second node here in the middle and I'm gonna actually make this little bit bigger and try to explain it what's",
    "start": "1037750",
    "end": "1043959"
  },
  {
    "text": "happening so here we have I don't know if you can see this cool so what",
    "start": "1043960",
    "end": "1051340"
  },
  {
    "text": "happened was remember the member joined and now we have some syncing happening so that full",
    "start": "1051340",
    "end": "1059320"
  },
  {
    "text": "state sync that I talked about a second ago is actually called a push-pull sync so let me show you really quickly this",
    "start": "1059320",
    "end": "1065290"
  },
  {
    "text": "is what the cluster looks like right now I have two nodes in it I have this this",
    "start": "1065290",
    "end": "1070630"
  },
  {
    "text": "node which was well the second node because maps aren't ordered in go or",
    "start": "1070630",
    "end": "1076360"
  },
  {
    "text": "lists are in order and go I guess Lysa's I should say and then here we've got the",
    "start": "1076360",
    "end": "1082860"
  },
  {
    "text": "first first node okay cool so I'm gonna spin up a second one or sorry the third",
    "start": "1082860",
    "end": "1088480"
  },
  {
    "text": "one remember list all right and we've got",
    "start": "1088480",
    "end": "1095800"
  },
  {
    "text": "three that was pretty quick that's because of the gosset mechanism so let",
    "start": "1095800",
    "end": "1104170"
  },
  {
    "text": "me let me actually go back and take this one out I just killed it so if you watch over here it's gonna say",
    "start": "1104170",
    "end": "1110350"
  },
  {
    "text": "suspect so suspect has failed and no axe received so this has failed no accident",
    "start": "1110350",
    "end": "1115360"
  },
  {
    "text": "received it's going to continue to do that until this point where it says marking that node has failed because the",
    "start": "1115360",
    "end": "1122710"
  },
  {
    "text": "timeout on it being suspect has actually been reached so if we go back here and hit refresh now there's back to two nodes relatively straightforward again I",
    "start": "1122710",
    "end": "1130300"
  },
  {
    "text": "can configure the settings that this entire handshake process will happen or gossip process I should say will happen",
    "start": "1130300",
    "end": "1135820"
  },
  {
    "text": "on a regular basis and I can either make it converge slower or faster in this",
    "start": "1135820",
    "end": "1141400"
  },
  {
    "text": "case because we're doing a live demonstration I've actually cranked up the time so that I can show you things",
    "start": "1141400",
    "end": "1146980"
  },
  {
    "text": "as they're happening and yeah cool",
    "start": "1146980",
    "end": "1152589"
  },
  {
    "text": "awesome so I have this counter they're",
    "start": "1152589",
    "end": "1158559"
  },
  {
    "text": "still disconnected what are we still doing here why haven't you solved the problem we'll okay fine",
    "start": "1158559",
    "end": "1163839"
  },
  {
    "text": "so I still need these counters to actually you know interact with each",
    "start": "1163839",
    "end": "1169989"
  },
  {
    "text": "other in some way so the way that I'm going to solve for this problem and again we mentioned at the very beginning this is an AP like system I'm gonna use",
    "start": "1169989",
    "end": "1179049"
  },
  {
    "start": "1179000",
    "end": "1299000"
  },
  {
    "text": "CRT T's mainly because I think CRD T's are super awesome and super cool and",
    "start": "1179049",
    "end": "1184389"
  },
  {
    "text": "like the best invention ever and I will say really quickly I'm going to attempt",
    "start": "1184389",
    "end": "1190149"
  },
  {
    "text": "to explain it I actually have some drawings that are gonna attempt to explain it I would really recommend if",
    "start": "1190149",
    "end": "1195519"
  },
  {
    "text": "you're into distributed systems or actually even if you're not read or watch Scott Michael John's content on",
    "start": "1195519",
    "end": "1204039"
  },
  {
    "text": "this especially about last he talks a lot about sturdy T's because they are actually pretty cool so what's ERD T",
    "start": "1204039",
    "end": "1211450"
  },
  {
    "text": "stands for is it's a conflict-free replicated data type these are data",
    "start": "1211450",
    "end": "1217659"
  },
  {
    "text": "types that are typically like things like counters sets maps Flags registers the operations within those types have",
    "start": "1217659",
    "end": "1224829"
  },
  {
    "text": "to be associative commutative and item potent and because like those are principles if I believe it's called",
    "start": "1224829",
    "end": "1230519"
  },
  {
    "text": "implement sorry implemented through semi-lattice algebra you basically get this thing where you can item potently",
    "start": "1230519",
    "end": "1237429"
  },
  {
    "text": "like you can basically merge all the time right so the side effect of that is there is no order or there is it's it's",
    "start": "1237429",
    "end": "1245619"
  },
  {
    "text": "technically partially ordered right but the the data types here do not actually",
    "start": "1245619",
    "end": "1251289"
  },
  {
    "text": "have or support someone's of order and because of that in almost every maybe",
    "start": "1251289",
    "end": "1257979"
  },
  {
    "text": "every failure scenario all you have to do to get these counters to merge again",
    "start": "1257979",
    "end": "1263139"
  },
  {
    "text": "is just to merge again like that's literally it if you have two nodes that can't communicate and then finally they",
    "start": "1263139",
    "end": "1268809"
  },
  {
    "text": "can just have them merge again if a node dies and comes back and is out of sync just have them merge again like there's",
    "start": "1268809",
    "end": "1274509"
  },
  {
    "text": "literally every scenario that you have if you have like several divergent States just have them merge and then it will",
    "start": "1274509",
    "end": "1281340"
  },
  {
    "text": "come to come to consistent converging state or rather converging state so CRT",
    "start": "1281340",
    "end": "1288220"
  },
  {
    "text": "T's because of that again they're by nature eventually consistent there is no single source of truth this works really",
    "start": "1288220",
    "end": "1294160"
  },
  {
    "text": "well for our made-up scenario so yeah",
    "start": "1294160",
    "end": "1299320"
  },
  {
    "start": "1299000",
    "end": "1480000"
  },
  {
    "text": "the most basic of these the one that I'm actually gonna implement is called a G counter it is very cleverly named that",
    "start": "1299320",
    "end": "1308440"
  },
  {
    "text": "way because it is a grow only counter and it's a counter that has literally just two operations increment and merge",
    "start": "1308440",
    "end": "1316870"
  },
  {
    "text": "right so it only goes up it never comes down now if you actually want one that",
    "start": "1316870",
    "end": "1322660"
  },
  {
    "text": "can come down too that's called a PN counter it's implemented by actually taking two of these counters one goes up",
    "start": "1322660",
    "end": "1330040"
  },
  {
    "text": "one goes down sum them together problem solved so the way that G",
    "start": "1330040",
    "end": "1335200"
  },
  {
    "text": "counters work is each node manages its own count the nodes then communicate",
    "start": "1335200",
    "end": "1341650"
  },
  {
    "text": "their own counter state with other nodes and then when they merge they take the",
    "start": "1341650",
    "end": "1346660"
  },
  {
    "text": "max count for each nodes value so the value itself of the G counters of sum of",
    "start": "1346660",
    "end": "1352480"
  },
  {
    "text": "all the node counts so let me just give you an example out here we have three three actors Alice Bob and Claire Alice",
    "start": "1352480",
    "end": "1362320"
  },
  {
    "text": "does an increment of one Bob doesn't increment of 1 and then Claire at some",
    "start": "1362320",
    "end": "1367540"
  },
  {
    "text": "point doesn't increment of 6 so Bob",
    "start": "1367540",
    "end": "1373140"
  },
  {
    "text": "sends its state to Claire and so Claire here at this point has knowledge of Bob",
    "start": "1373140",
    "end": "1380230"
  },
  {
    "text": "State before this increment of 3 and knowledge of Claire's own state because Claire you know did set action and so at",
    "start": "1380230",
    "end": "1387520"
  },
  {
    "text": "this point Claire knows that this happened and this happened and counts",
    "start": "1387520",
    "end": "1392530"
  },
  {
    "text": "both of those things right so in her storage she knows both Bob and Claire and can sum them together to 7 next step",
    "start": "1392530",
    "end": "1400030"
  },
  {
    "text": "we have another sink here that happens so we have Bob actually sharing state",
    "start": "1400030",
    "end": "1406000"
  },
  {
    "text": "over to Alice and so now Alice knows that Bob is at 4 right because 1 plus 3",
    "start": "1406000",
    "end": "1411790"
  },
  {
    "text": "is 4 awesome and Alice herself has done this increment one and you've got this that",
    "start": "1411790",
    "end": "1417580"
  },
  {
    "text": "is not 4 that is 5 yes fantastic these",
    "start": "1417580",
    "end": "1423400"
  },
  {
    "text": "counters are definitely divergent okay cool so now we have like this this other jump here and I hope that this map is",
    "start": "1423400",
    "end": "1429970"
  },
  {
    "text": "right it seems to be that's pretty cool let's just pretend that didn't happen okay so Alice is now gonna send her",
    "start": "1429970",
    "end": "1437830"
  },
  {
    "text": "state which she understands the system to be what she what she knows and what",
    "start": "1437830",
    "end": "1444550"
  },
  {
    "text": "Bob knows or rather what bob has told her up until this point so she's gonna send all of that down declare and since",
    "start": "1444550",
    "end": "1450550"
  },
  {
    "text": "Claire has understanding of Bob and obviously is the canonical owner of Claire's own data you have Claire now",
    "start": "1450550",
    "end": "1458620"
  },
  {
    "text": "understanding Alice's won Bob's for right because at this point four is",
    "start": "1458620",
    "end": "1464440"
  },
  {
    "text": "bigger than one right so we should take that value because Bob is the canonical owner of said value and then Claire so I",
    "start": "1464440",
    "end": "1472120"
  },
  {
    "text": "did the math again in my head 1 plus 4 plus 6 does equal 11 so that number",
    "start": "1472120",
    "end": "1478000"
  },
  {
    "text": "there is correct that's basically basically G Conner here's a really you",
    "start": "1478000",
    "end": "1486640"
  },
  {
    "start": "1480000",
    "end": "1615000"
  },
  {
    "text": "know two since since drawings are actually not sufficient and we need code",
    "start": "1486640",
    "end": "1493380"
  },
  {
    "text": "this is basically the implementation of it so the increment here says you know I have my ID n which is identifier which",
    "start": "1493560",
    "end": "1501610"
  },
  {
    "text": "represents me and then for every increment I'm only going to increment the number that I own to get the count",
    "start": "1501610",
    "end": "1509020"
  },
  {
    "text": "I'm going to sum all of the numbers that I know and to do the merge I'm going to",
    "start": "1509020",
    "end": "1514750"
  },
  {
    "text": "take the largest of any given value that isn't me cool so let me show you this in",
    "start": "1514750",
    "end": "1523960"
  },
  {
    "text": "practice",
    "start": "1523960",
    "end": "1526169"
  },
  {
    "text": "all right cool so just didn't increment",
    "start": "1536309",
    "end": "1541360"
  },
  {
    "text": "on the first node that number is increasing and oh that's too big now we",
    "start": "1541360",
    "end": "1551379"
  },
  {
    "text": "have this is the this is actually a raw view of the data structure underneath so as I increment this guy this is my node",
    "start": "1551379",
    "end": "1559509"
  },
  {
    "text": "name this this I here I'm really unique and so I like URI IDs for node names",
    "start": "1559509",
    "end": "1567330"
  },
  {
    "text": "because they have a ton of uniqueness to them and then these seven is the value",
    "start": "1567330",
    "end": "1573580"
  },
  {
    "text": "that I have for my counter if I do the same operation here on the second node",
    "start": "1573580",
    "end": "1580350"
  },
  {
    "text": "you will be not surprised at all to notice that they aren't sinking but now",
    "start": "1580350",
    "end": "1585580"
  },
  {
    "text": "I have a second ident with that UID of that second node and that is here",
    "start": "1585580",
    "end": "1591730"
  },
  {
    "text": "the value that matches right so if I go over here this is a totally different set of data same thing if I run it on",
    "start": "1591730",
    "end": "1597639"
  },
  {
    "text": "the third node this make sense is starting to make make sense come together awesome well we still have a",
    "start": "1597639",
    "end": "1604419"
  },
  {
    "text": "problem which is we haven't merged state yet so we should probably merge the",
    "start": "1604419",
    "end": "1609700"
  },
  {
    "text": "state and that's what we're gonna do now so member list has this thing which I",
    "start": "1609700",
    "end": "1618700"
  },
  {
    "start": "1615000",
    "end": "1673000"
  },
  {
    "text": "mentioned before which is that kind of complete state exchange with another random member that's called the push/pull sync in the code it actually",
    "start": "1618700",
    "end": "1626919"
  },
  {
    "text": "also provides developers a way to piggyback off of it and because it this happens over TCP you",
    "start": "1626919",
    "end": "1634990"
  },
  {
    "text": "have basically anything that you can send over the wire you can choose how to serialize it over the wire and how you",
    "start": "1634990",
    "end": "1642460"
  },
  {
    "text": "want to deserialize on the other side so there's a delegate has basically two",
    "start": "1642460",
    "end": "1648399"
  },
  {
    "text": "functions that are important relevant to this point it's local state and merge remote state local state which basically",
    "start": "1648399",
    "end": "1653860"
  },
  {
    "text": "kind of dumps the state of someone who's being asked to provide State and merge remote state is does the opposite it",
    "start": "1653860",
    "end": "1661059"
  },
  {
    "text": "takes that remote stay and merges it in and that again that interval of that full state transfer is",
    "start": "1661059",
    "end": "1667240"
  },
  {
    "text": "configurable and so we're gonna use it to eventually emerge the state in the background so this is what the code",
    "start": "1667240",
    "end": "1675280"
  },
  {
    "start": "1673000",
    "end": "1906000"
  },
  {
    "text": "looks like it's exactly what I just said I'm in a marshal that the state of that",
    "start": "1675280",
    "end": "1680380"
  },
  {
    "text": "CR DT to JSON and then on the other side I'm going to instantiate a CR DT for",
    "start": "1680380",
    "end": "1685930"
  },
  {
    "text": "that external cnut JSON that was just sent over the wire and then I'm gonna",
    "start": "1685930",
    "end": "1691690"
  },
  {
    "text": "merge it into my CR DT so let's do that real quick and this is the demo you've",
    "start": "1691690",
    "end": "1699490"
  },
  {
    "text": "all been waiting for",
    "start": "1699490",
    "end": "1702240"
  },
  {
    "text": "cool all right",
    "start": "1705840",
    "end": "1709440"
  },
  {
    "text": "all right so as you can see I mentioned there's a state transfer that happens here so this is sharing a road state for",
    "start": "1713840",
    "end": "1720260"
  },
  {
    "text": "push/pull sync and merging it there's not really any state at this point if you just go in and look at the contents",
    "start": "1720260",
    "end": "1728180"
  },
  {
    "text": "there's it's empty right there's nothing to talk about however if I go in here and increment on",
    "start": "1728180",
    "end": "1733460"
  },
  {
    "text": "node 2 you see this one that one is eventually going to show up here",
    "start": "1733460",
    "end": "1742330"
  },
  {
    "text": "eventually there it is landed right and it's already here because that's where",
    "start": "1742420",
    "end": "1748850"
  },
  {
    "text": "we did it it's also already here because this thing happened right so I'm gonna",
    "start": "1748850",
    "end": "1754190"
  },
  {
    "text": "just kind of keep doing this a little bit I just did it on the third node we should get in some 5 to 10 seconds I",
    "start": "1754190",
    "end": "1763220"
  },
  {
    "text": "think I said yeah there it is see that event showing up just kind of keep doing",
    "start": "1763220",
    "end": "1769820"
  },
  {
    "text": "this a little bit so it's here not quite here yet oh that happened quick I must have",
    "start": "1769820",
    "end": "1775670"
  },
  {
    "text": "caught it in between oh there it is do you guys catch that should do that again no everyone's tired it's like the second",
    "start": "1775670",
    "end": "1783860"
  },
  {
    "text": "last talking last day cool this is like pretty I mean it's pretty cool to me it's pretty cool that like you know this",
    "start": "1783860",
    "end": "1789620"
  },
  {
    "text": "is state transfer happens a merge happens the CR DD you know again if the state transfer fails all you have to do",
    "start": "1789620",
    "end": "1794810"
  },
  {
    "text": "is do it again like just do it again and then it's gonna happen so let me actually play with this a little bit I'm",
    "start": "1794810",
    "end": "1801170"
  },
  {
    "text": "actually gonna kill the second node and it's see it's dead you actually can't get to it if I go over here to the first",
    "start": "1801170",
    "end": "1808760"
  },
  {
    "text": "node well it's still there right the data from the second node is actually still there and I promise you",
    "start": "1808760",
    "end": "1814610"
  },
  {
    "text": "oh sorry not that node let's do just to prove to you that the cluster is gone the second notes gone the second notes",
    "start": "1814610",
    "end": "1821450"
  },
  {
    "text": "gone we only have two nodes here but the data from the second node is still there so if I spin it back up it will rejoin",
    "start": "1821450",
    "end": "1832790"
  },
  {
    "text": "the cluster I'm going to increment on it and",
    "start": "1832790",
    "end": "1837640"
  },
  {
    "text": "eventually eventually there it is you",
    "start": "1841730",
    "end": "1846990"
  },
  {
    "text": "see a fourth right so because I assign that new unique identity you nee qid",
    "start": "1846990",
    "end": "1852080"
  },
  {
    "text": "I now have a fourth item here so the nifty part here is that the amount of",
    "start": "1852080",
    "end": "1858320"
  },
  {
    "text": "state that you can potentially lose is basically a function of how recently did",
    "start": "1858320",
    "end": "1863700"
  },
  {
    "text": "the last straight state transfer captian happen right and so in cases where you you desire a lot of correctness you can",
    "start": "1863700",
    "end": "1868799"
  },
  {
    "text": "tune that the amount of correctness there based on how often you'd like to do some sort of the state transfer",
    "start": "1868799",
    "end": "1875600"
  },
  {
    "text": "obviously there are actually a lot of interesting some things that you can do on this point to ensure that state transfer happens locally as opposed to",
    "start": "1875600",
    "end": "1882210"
  },
  {
    "text": "remotely if you have multiple different data centers and say transfer can happen between you know nodes in the same data",
    "start": "1882210",
    "end": "1887400"
  },
  {
    "text": "center which is cheaper than going over the network those sorts of things are possible but I'm not going to go through them here so",
    "start": "1887400",
    "end": "1894240"
  },
  {
    "text": "awesome we have achieved success it's very eventual right it took us",
    "start": "1894240",
    "end": "1899309"
  },
  {
    "text": "about 10 seconds for that first sync to happen but we did sync member listed",
    "start": "1899309",
    "end": "1904559"
  },
  {
    "text": "solve that problem for us there are obviously ways that you can sync faster one way to sink faster which actually",
    "start": "1904559",
    "end": "1911940"
  },
  {
    "start": "1906000",
    "end": "2027000"
  },
  {
    "text": "would be very stupid for our use case that we're talking about right now is to broadcast on every increment request I",
    "start": "1911940",
    "end": "1917700"
  },
  {
    "text": "say very stupid because we just said that we want increments to be fast and we want bandwidth to be the amount of",
    "start": "1917700",
    "end": "1923520"
  },
  {
    "text": "bandwidth used for this entire operation to be low so if I broadcast on every single increment request I'm blowing",
    "start": "1923520",
    "end": "1929130"
  },
  {
    "text": "through that entire requirement but let me just go ahead and do that so that you can see how this works so I had this",
    "start": "1929130",
    "end": "1937460"
  },
  {
    "text": "broadcast state function here which you",
    "start": "1937460",
    "end": "1943350"
  },
  {
    "text": "know appends a broadcast event into the queue and then on the other side anyone",
    "start": "1943350",
    "end": "1948600"
  },
  {
    "text": "who receives the broadcast event gets this notify message function invoked and",
    "start": "1948600",
    "end": "1954630"
  },
  {
    "text": "then they can do the same thing that we did previously which is instantiate the CR DT merge it in and then get the merge",
    "start": "1954630",
    "end": "1961140"
  },
  {
    "text": "value so quick demo I have this line of code it's a go routine which broadcast",
    "start": "1961140",
    "end": "1968070"
  },
  {
    "text": "the state let's hope this works again it's",
    "start": "1968070",
    "end": "1976250"
  },
  {
    "text": "compiling super quick promise this is not a go talk all right cool",
    "start": "1976250",
    "end": "1984650"
  },
  {
    "text": "so I'm gonna hit increment several times and you should see here several of these",
    "start": "1984650",
    "end": "1992180"
  },
  {
    "text": "receive broadcast remote states actually if I spam this a ton of times you'll see",
    "start": "1992180",
    "end": "1998260"
  },
  {
    "text": "lots of those you see lots of those on a few of the different nodes so again this",
    "start": "1998260",
    "end": "2003730"
  },
  {
    "text": "is just a somewhat clever way of ensuring that the the cluster converges",
    "start": "2003730",
    "end": "2011790"
  },
  {
    "text": "sooner rather than later but again it's not necessarily suggested mechanism cool",
    "start": "2011790",
    "end": "2019600"
  },
  {
    "text": "so what I would do next if I was actually building this thing as a service is I would build tests my source",
    "start": "2019600",
    "end": "2027880"
  },
  {
    "start": "2027000",
    "end": "2134000"
  },
  {
    "text": "code while up on the internet and available for for all of you guys to critique directly and make fun of me on",
    "start": "2027880",
    "end": "2034240"
  },
  {
    "text": "Twitter for doesn't have any tests so because I said that it's okay so you can't shame me although I will take",
    "start": "2034240",
    "end": "2041190"
  },
  {
    "text": "complete blame for being a bad developer after tests for that thing I would",
    "start": "2041190",
    "end": "2049050"
  },
  {
    "text": "probably implement some former system sometime when doing one counter that",
    "start": "2049050",
    "end": "2054790"
  },
  {
    "text": "just goes up forever it's probably not that useful so you know I would also",
    "start": "2054790",
    "end": "2060460"
  },
  {
    "text": "implement more than one node per datacenter again this is just my laptop so it's a very small and cheap data",
    "start": "2060460",
    "end": "2067628"
  },
  {
    "text": "center but we would if we actually cared about it being an AP system and being available we would put lots of these",
    "start": "2067629",
    "end": "2073419"
  },
  {
    "text": "things in every local data center and allow them to sync I would also run and implement Jepson",
    "start": "2073419",
    "end": "2082870"
  },
  {
    "text": "testing for this or some other form of",
    "start": "2082870",
    "end": "2088020"
  },
  {
    "text": "correctness validation right so modeling it with TLA plus or similar would",
    "start": "2088020",
    "end": "2094450"
  },
  {
    "text": "probably also implement a real RPC layer right so member list elegant is pretty useful but if I wanted finer performance",
    "start": "2094450",
    "end": "2102070"
  },
  {
    "text": "control or authentication position control so not just any node can join my cluster I would want to",
    "start": "2102070",
    "end": "2107530"
  },
  {
    "text": "implement my own RPC layer there and then as just kind of part of the last",
    "start": "2107530",
    "end": "2113200"
  },
  {
    "text": "set of extremely important to do's I would run it as a unit kernel within docker running inside a VM in AWS and",
    "start": "2113200",
    "end": "2121210"
  },
  {
    "text": "then I would sprinkle DevOps magic dust on it and then I would have achieved peak microservice which is what we're",
    "start": "2121210",
    "end": "2128590"
  },
  {
    "text": "all here to do so yeah there's one",
    "start": "2128590",
    "end": "2135130"
  },
  {
    "start": "2134000",
    "end": "2363000"
  },
  {
    "text": "takeaway it's actually not that hard to build clustered services and go again member list is your friend CR DTS are",
    "start": "2135130",
    "end": "2142180"
  },
  {
    "text": "also your friend all this code is up on github you can play around with it and",
    "start": "2142180",
    "end": "2148480"
  },
  {
    "text": "again that pic as you will ask questions whatever and that's it for me so if you",
    "start": "2148480",
    "end": "2153640"
  },
  {
    "text": "guys have any questions",
    "start": "2153640",
    "end": "2156390"
  },
  {
    "text": "say it one more time okay",
    "start": "2163290",
    "end": "2171460"
  },
  {
    "text": "the question was how do you handle fault tolerance in a clustered or discrete architecture there are many many ways to",
    "start": "2171460",
    "end": "2179980"
  },
  {
    "text": "do that and there are I guess several different implement definitions of fault tolerance that I would you know be able",
    "start": "2179980",
    "end": "2185470"
  },
  {
    "text": "to take here but in this case I'm piggybacking completely off of the fault tolerance or rather failure handling",
    "start": "2185470",
    "end": "2192790"
  },
  {
    "text": "that member list has and because it is a very weakly consistent system those are",
    "start": "2192790",
    "end": "2198670"
  },
  {
    "text": "the constraints that I have if I wanted to try to enforce you know stronger",
    "start": "2198670",
    "end": "2206730"
  },
  {
    "text": "handles I could I could do other things like maybe try to implement some sort of a dynamo model where I actually have more control over the amount of ways",
    "start": "2206730",
    "end": "2214240"
  },
  {
    "text": "that a data is a piece of data is actually sent around the answers",
    "start": "2214240",
    "end": "2220810"
  },
  {
    "text": "question any any other questions about NGO or member list or seer DTE or so",
    "start": "2220810",
    "end": "2228970"
  },
  {
    "text": "state I guess the question was how do you reduce replication for the amount of state that you're actually as the amount",
    "start": "2228970",
    "end": "2234640"
  },
  {
    "text": "of data so are you are you specifically talking about the C R DT implementation or the member list imitation like the",
    "start": "2234640",
    "end": "2240940"
  },
  {
    "text": "data that we care about replicating is the counter but member list that possible by sharing the cluster state so",
    "start": "2240940",
    "end": "2248080"
  },
  {
    "text": "which one are you asking about member",
    "start": "2248080",
    "end": "2254070"
  },
  {
    "text": "lucerne is the actual member list we we happen to be piggybacking off of the",
    "start": "2254070",
    "end": "2261430"
  },
  {
    "text": "member list protocols to facilitate transport of the state in the CR DT so",
    "start": "2261430",
    "end": "2269860"
  },
  {
    "text": "there are a lot of other ways that you could do that right I think actually when I originally wrote this talk I was going to do it first and member list and",
    "start": "2269860",
    "end": "2277150"
  },
  {
    "text": "then build my own RPC layer that did something that was more akin to a dynamo where I could say you know do a quorum",
    "start": "2277150",
    "end": "2282550"
  },
  {
    "text": "right where it funnels out to quorum waits and then does some sort of like a two or three phase commit to ensure that",
    "start": "2282550",
    "end": "2287740"
  },
  {
    "text": "all the rights are made but I didn't have time for that the the problem I think with what you're saying here is",
    "start": "2287740",
    "end": "2293530"
  },
  {
    "text": "that my assumption is that every node has the state of every other node in the CR DT in eventualities and that is correct",
    "start": "2293530",
    "end": "2300579"
  },
  {
    "text": "because we're using member oulous to do that work so another way to do that",
    "start": "2300579",
    "end": "2306640"
  },
  {
    "text": "would actually be to build like some sort of a ring or partitioning or sharding how whatever where do you want to use to structure the movement of the",
    "start": "2306640",
    "end": "2313270"
  },
  {
    "text": "data and the limitation of the data to only relevant sets of nodes so one of our systems at media mass actually you",
    "start": "2313270",
    "end": "2320440"
  },
  {
    "text": "know makes huge amount of this it borrows heavily from the V node concept that cassandra has where basically you",
    "start": "2320440",
    "end": "2326410"
  },
  {
    "text": "have pools of data that are classed within like a mod ring and that that",
    "start": "2326410",
    "end": "2333700"
  },
  {
    "text": "data is effectively shard and pinned to a specific node and the node sorry the cluster sizes don't have to be the same",
    "start": "2333700",
    "end": "2339400"
  },
  {
    "text": "across all the data centers they're effectively like a piece of data is replicated to a particular node in a",
    "start": "2339400",
    "end": "2344559"
  },
  {
    "text": "cluster on the other data center none of that's implemented here sorry cool",
    "start": "2344559",
    "end": "2351520"
  },
  {
    "text": "thanks guys",
    "start": "2351520",
    "end": "2354299"
  }
]