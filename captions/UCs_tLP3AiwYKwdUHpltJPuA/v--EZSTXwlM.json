[
  {
    "text": "okay I'm going to talk about bottleneck analysis and I'm talking about a very important aspect of bottleneck analysis",
    "start": "659",
    "end": "6420"
  },
  {
    "text": "which is the delivery of beer to large numbers of conference attendees some of you were were there I think and it's",
    "start": "6420",
    "end": "12960"
  },
  {
    "text": "very important to keep them in this happy State you can see um as opposed to this fairly grumpy",
    "start": "12960",
    "end": "19199"
  },
  {
    "text": "state that we had also at the night and what you tend to run into is this",
    "start": "19199",
    "end": "24840"
  },
  {
    "text": "problem where you'll see a bottle and it's empty okay so so you have to figure out how are you going to manage and",
    "start": "24840",
    "end": "31619"
  },
  {
    "text": "maintain four bottlenecks so that people can stay happy all the time so let's assume that we've deployed a",
    "start": "31619",
    "end": "38640"
  },
  {
    "text": "netflix-based cloud service because we would do that kind of thing to collect lots of data on on how much beer people",
    "start": "38640",
    "end": "46680"
  },
  {
    "text": "have consumed and how long it took them to get it so we have this beer service that's uh monitoring things and it's you",
    "start": "46680",
    "end": "54120"
  },
  {
    "text": "know and we just have it to the URL so we can put some R code in here so people can figure out how to read files from R",
    "start": "54120",
    "end": "61020"
  },
  {
    "text": "and and we plot the response time of how long it takes to get your beer",
    "start": "61020",
    "end": "66119"
  },
  {
    "text": "and uh you know it's sort of okay but it looks like there's these big spikes every now and again we run out of beer",
    "start": "66119",
    "end": "71760"
  },
  {
    "text": "um or they or something um and the unit of time here is the GIF the Jiffy because you go to beer in a",
    "start": "71760",
    "end": "76979"
  },
  {
    "text": "jiffy that's it's a unit of you know if one Jiffy is a good amount of time to get your beer if it takes too many",
    "start": "76979",
    "end": "82140"
  },
  {
    "text": "jiffies it's too long obviously you know spending 60 jiffies is a very long time so how would we summarize this uh",
    "start": "82140",
    "end": "89340"
  },
  {
    "text": "response time it's this is the hard part right so let's try summarizing it with a few different ways of doing statistical",
    "start": "89340",
    "end": "96060"
  },
  {
    "text": "things and this you know it's maybe sort of well the mean is three so that's sort of okay but the max is 67 and then we",
    "start": "96060",
    "end": "103979"
  },
  {
    "text": "are quantiles and response standard deviations and means and two standards it's this is all hard stuff",
    "start": "103979",
    "end": "110040"
  },
  {
    "text": "so what we really want to do is make it easy to deliver large amounts of beer very quickly and I have a a great",
    "start": "110040",
    "end": "116399"
  },
  {
    "text": "example here from qcon London who was at qcon London so this was this was the best beer",
    "start": "116399",
    "end": "121920"
  },
  {
    "text": "delivery system I had ever seen basically there was a room with maybe you know something like 500 or a",
    "start": "121920",
    "end": "127320"
  },
  {
    "text": "thousand people in it and there were these Waiters with trades of Grouch just making forays they were just appearing",
    "start": "127320",
    "end": "132959"
  },
  {
    "text": "and dashing in and and when their trade was empty they went back for more and it filled this room with beer extremely",
    "start": "132959",
    "end": "138840"
  },
  {
    "text": "efficiently and so that's that's made easy so um so",
    "start": "138840",
    "end": "144239"
  },
  {
    "text": "let's let's sort of do some modeling around what that actually looks like um there's a a some code I wrote in R1",
    "start": "144239",
    "end": "152220"
  },
  {
    "text": "it's called CHP which draws interesting graphs um and I I tried fitting it on a slide",
    "start": "152220",
    "end": "157620"
  },
  {
    "text": "and it didn't fit so you just have to go and find it um but if you if you create this artificial",
    "start": "157620",
    "end": "164280"
  },
  {
    "text": "scenario where we actually let's see how much let's scan let's let's try putting a throughput of more and more beer by",
    "start": "164280",
    "end": "170640"
  },
  {
    "text": "sending these guys with trays these guys in faster and faster to see how much beer we can deliver to a crowd in one go",
    "start": "170640",
    "end": "178620"
  },
  {
    "text": "um this is what the CHP plot looks like so what I've got in the top right is a ramp of throughput I'm just testing",
    "start": "178620",
    "end": "186120"
  },
  {
    "text": "out all the possible throughputs I could have in terms of delivering Bearer into a crowd and what I have along the bottom",
    "start": "186120",
    "end": "191879"
  },
  {
    "text": "is the response time versus Headroom well the big space here is the distribution of response time versus",
    "start": "191879",
    "end": "198360"
  },
  {
    "text": "Headroom right and it's a scatter plot but in this case I've got a very controlled input and I get a straight",
    "start": "198360",
    "end": "204540"
  },
  {
    "text": "line and this is a well-behaved system but it seems like whoever is putting beer on these trays as a build of a",
    "start": "204540",
    "end": "210300"
  },
  {
    "text": "bottleneck there and it we run out of capacity for the purposes of putting beer on these trays so it gets slower",
    "start": "210300",
    "end": "216599"
  },
  {
    "text": "and slower it takes longer and longer to respond as you put more people in and these funny blocks on the side are",
    "start": "216599",
    "end": "222180"
  },
  {
    "text": "histograms of the distribution so I've got a very even distribution of throughput because I was kind of just",
    "start": "222180",
    "end": "227519"
  },
  {
    "text": "doing this sort of test theoretically and I have a distribution of response time that shows most of the time it's",
    "start": "227519",
    "end": "233700"
  },
  {
    "text": "nice and fast but it gets you know there's a smaller and smaller amount now that's not very realistic so let's say",
    "start": "233700",
    "end": "238920"
  },
  {
    "text": "you know let's say we were measuring a real system and it would look something like this it's roughly the same so I've",
    "start": "238920",
    "end": "244019"
  },
  {
    "text": "got a roughly constant um distribution of throughput and I have a",
    "start": "244019",
    "end": "249720"
  },
  {
    "text": "sort of a distribution of response time that's a bit more varied but it's still got this sort of up and to the right",
    "start": "249720",
    "end": "255000"
  },
  {
    "text": "hockey stick curve kind of thing so as and this is what you expect as you put more throughput into a system its",
    "start": "255000",
    "end": "261959"
  },
  {
    "text": "response time slows down that's the bottleneck right so that's the computer version of the bottleneck right",
    "start": "261959",
    "end": "267240"
  },
  {
    "text": "and you can see I've got them this is sort of three days worth of Fairly noisy looking data the top right part of this",
    "start": "267240",
    "end": "272520"
  },
  {
    "text": "graph is the throughput over time to give you some context for what this looks like okay so we figured out what a",
    "start": "272520",
    "end": "278520"
  },
  {
    "text": "normal looking response time looks like if you happen to be delivering large amounts of beer into a large group of",
    "start": "278520",
    "end": "284759"
  },
  {
    "text": "conference attendees but what happens if instead of this being go to ohus it's go to Hawaii",
    "start": "284759",
    "end": "291840"
  },
  {
    "text": "let's say we're in Hawaii and instead of beer we're trying to deliver mites to people and Mai Tai is a much more",
    "start": "291840",
    "end": "297660"
  },
  {
    "text": "complicated they have umbrellas in them um and and let's say there's only one",
    "start": "297660",
    "end": "302759"
  },
  {
    "text": "person that knows how to put the umbrella in and and and that causes another different kind of bottleneck so",
    "start": "302759",
    "end": "308460"
  },
  {
    "text": "we've got actually we end up with a distribution that looks like this and this is what happens when there's lot contention in the system because there's",
    "start": "308460",
    "end": "315540"
  },
  {
    "text": "a serialization point where only one person can figure out how to get that umbrella and there's lots of people that can make my ties lots of people trying",
    "start": "315540",
    "end": "322259"
  },
  {
    "text": "to drink my taste there's only one person who's got the stock and can get that umbrella in exactly right so if you",
    "start": "322259",
    "end": "327780"
  },
  {
    "text": "ever see that distribution and it's got sort of it's flat but it's it's going up so here if I double the throughput I",
    "start": "327780",
    "end": "335100"
  },
  {
    "text": "double the response time yeah and just basically blocking up on one thing so that's that's a very different shape of",
    "start": "335100",
    "end": "340800"
  },
  {
    "text": "graph so well let's help solve this problem by bringing in the same guys we had in",
    "start": "340800",
    "end": "346919"
  },
  {
    "text": "London uh and have them deliver lots of beer to people but and that lets us do",
    "start": "346919",
    "end": "352139"
  },
  {
    "text": "simple drinks and complicated drinks and if you're if you're in Hawaii you can get this really complicated drink which",
    "start": "352139",
    "end": "358020"
  },
  {
    "text": "is an entire pineapple it takes quite a long time to make you start with a pineapple you hollow out",
    "start": "358020",
    "end": "364440"
  },
  {
    "text": "the pineapple you put rum and stuff in it and then you decorate it to look like a Dalek when you've drunk half of it",
    "start": "364440",
    "end": "371699"
  },
  {
    "text": "let's get sort of instead of saying exterminate it says inebriate inebriate right it's sort of that's the general",
    "start": "371699",
    "end": "377759"
  },
  {
    "text": "principle here um so what we now have is a mixture of work going on we're trying",
    "start": "377759",
    "end": "382800"
  },
  {
    "text": "to we have one group of we have one guy delivering extremely high uh extremely",
    "start": "382800",
    "end": "389400"
  },
  {
    "text": "high volume very simple things in your bottles of beer very easily and we have",
    "start": "389400",
    "end": "394680"
  },
  {
    "text": "some other people making these incredibly complicated drinks and if we do them both at the same time we get",
    "start": "394680",
    "end": "400740"
  },
  {
    "text": "this very strange looking distribution if we plot it using our special beer and",
    "start": "400740",
    "end": "406699"
  },
  {
    "text": "drink delivery monitoring service that we're still running obviously because it's in the cloud and it can see what's",
    "start": "406699",
    "end": "412080"
  },
  {
    "text": "happening somehow um and what's going on here is that let's",
    "start": "412080",
    "end": "417900"
  },
  {
    "text": "say we have a number of servers and they can either be filling trees with beer or they can be carving out",
    "start": "417900",
    "end": "424199"
  },
  {
    "text": "um pineapples so the they start off like a mixture of",
    "start": "424199",
    "end": "429539"
  },
  {
    "text": "these things but eventually they all end up carving pineapples because it takes forever and there's nobody filling trays",
    "start": "429539",
    "end": "434819"
  },
  {
    "text": "with beer and what happens then is the throughput goes down and it goes really really slow and you're up on the top",
    "start": "434819",
    "end": "439979"
  },
  {
    "text": "left side here you're right up there and and eventually somebody finishes carving pineapples and there's a big stack of",
    "start": "439979",
    "end": "446520"
  },
  {
    "text": "guys standing there with empty trees you start filling trays and the system starts delivering lots and lots of trays",
    "start": "446520",
    "end": "451860"
  },
  {
    "text": "of beer and then gradually more orders of pineapples come in and you oscillate back so this system is not stable it",
    "start": "451860",
    "end": "457740"
  },
  {
    "text": "oscillates back and forth between delivering lots and lots of very fast things and a few very slow things and",
    "start": "457740",
    "end": "463979"
  },
  {
    "text": "this is a characteristic which is quite hard to observe but when you do these these distribution plots it's easy to",
    "start": "463979",
    "end": "470520"
  },
  {
    "text": "see that this is happening and when you see a system oscillating it's quite often because you've got a mixture of",
    "start": "470520",
    "end": "475680"
  },
  {
    "text": "very slow things and very fast things that you're giving it to do at once and this is this is the characteristic",
    "start": "475680",
    "end": "482099"
  },
  {
    "text": "of a thread starved system right there's plenty of spare capacity in the system but you don't have enough threads you",
    "start": "482099",
    "end": "487919"
  },
  {
    "text": "need to add more people that can carve pineapples until you have an excess of people and you have some spare people",
    "start": "487919",
    "end": "493380"
  },
  {
    "text": "left over that can also deliver beer while the full possible number of pineapple carving is going on at the",
    "start": "493380",
    "end": "498780"
  },
  {
    "text": "same time so the way you solve this problem is by adding threads right so now we can see we know when we have lock",
    "start": "498780",
    "end": "504660"
  },
  {
    "text": "contention and if we have we have outer threads and we have normal behavior but",
    "start": "504660",
    "end": "509940"
  },
  {
    "text": "I want to show you something else that happens which is that if you manage to build systems that auto scale that grow",
    "start": "509940",
    "end": "515520"
  },
  {
    "text": "and Shrink with capacity which is sort of you know this was a good example I think you know I have a scale level set",
    "start": "515520",
    "end": "521099"
  },
  {
    "text": "of beers here that are being delivered I'm getting multiple beers um but the only example I could find was",
    "start": "521099",
    "end": "526620"
  },
  {
    "text": "actually a Netflix one this is actually one of our internal Services the auto scales and app Dynamics has a way of",
    "start": "526620",
    "end": "532980"
  },
  {
    "text": "plotting this so this is the throughput and this is the response sign the response time looks a bit weird but one",
    "start": "532980",
    "end": "538320"
  },
  {
    "text": "of the things you can see is that the low lowest response time occurs when the throughput is dropping and then it goes",
    "start": "538320",
    "end": "544200"
  },
  {
    "text": "up a little bit later now if you do the distribution plot for this there's this weird sort of set of Dots here but",
    "start": "544200",
    "end": "550260"
  },
  {
    "text": "what's actually happening is let's start at the peak peek throughput okay the top",
    "start": "550260",
    "end": "555660"
  },
  {
    "text": "of that blue section that's the bit to the furthest to the right when over time what happens now is",
    "start": "555660",
    "end": "562980"
  },
  {
    "text": "there's a circle you're going around a circle so you go down the bottom along the bottom lowest response time to the",
    "start": "562980",
    "end": "570000"
  },
  {
    "text": "lowest throughput and then what actually happens is do I have a",
    "start": "570000",
    "end": "575640"
  },
  {
    "text": "can I get yeah there we go um I now have very few machines or very few",
    "start": "575640",
    "end": "581580"
  },
  {
    "text": "bottles of beer or whatever in front of me and so as capacity increases it actually goes up in a Sawtooth because",
    "start": "581580",
    "end": "587160"
  },
  {
    "text": "it gets a bit slow and then I add more machines and it drops and so there's this Sawtooth going up here as I'm",
    "start": "587160",
    "end": "593399"
  },
  {
    "text": "throwing more capacity as I'm increasing and then it comes all the way up here and then and then I'm throwing capacity",
    "start": "593399",
    "end": "599880"
  },
  {
    "text": "away and it sort of comes back down here so you get a big loop in your in your thing so if you see a loop you know",
    "start": "599880",
    "end": "604920"
  },
  {
    "text": "you've got something that's sort of Auto scaling all right and uh so that you can",
    "start": "604920",
    "end": "609959"
  },
  {
    "text": "use this little CHP code that I wrote years ago to do the diagrams or or if you happen to have app Dynamics I might",
    "start": "609959",
    "end": "616320"
  },
  {
    "text": "persuade them to add this to their product which made me happy all right so this is basically my summary plot",
    "start": "616320",
    "end": "622500"
  },
  {
    "text": "um these are the hard things figuring out whether you have lock contention whether you have a well-behaved system whether you're oscillating and have",
    "start": "622500",
    "end": "628800"
  },
  {
    "text": "thread shortages or whether you have some sort of looping Auto scaled system and if all you have to do is draw a",
    "start": "628800",
    "end": "634380"
  },
  {
    "text": "graph look at it and decide which kind of you know what shape the graph is and you can see what's going on all right so",
    "start": "634380",
    "end": "640860"
  },
  {
    "text": "that's it and we can finish it with some liquid Aloha and that was nice good",
    "start": "640860",
    "end": "648320"
  },
  {
    "text": "do you also observe that um when uh the system uh uh changes performance",
    "start": "649500",
    "end": "656339"
  },
  {
    "text": "characteristic then that the system itself is used in another way so then your data also",
    "start": "656339",
    "end": "662339"
  },
  {
    "text": "changes because for you of course the users for example go away and then you",
    "start": "662339",
    "end": "667740"
  },
  {
    "text": "have Auto scaling because um yeah you can certainly move between",
    "start": "667740",
    "end": "673620"
  },
  {
    "text": "these different things you could have a system that starts off well behaved and you put and all of a sudden say maybe",
    "start": "673620",
    "end": "680459"
  },
  {
    "text": "it's well behaved in test but when you go to production there's more latency because real customers are further away",
    "start": "680459",
    "end": "686100"
  },
  {
    "text": "and all of a sudden you're out of threads and system that starts off well behaved starts becoming oscillating so",
    "start": "686100",
    "end": "691680"
  },
  {
    "text": "you and you sometimes see this um there's these graphs which show sort",
    "start": "691680",
    "end": "697079"
  },
  {
    "text": "of throughput like this except the the high point see this is a beautifully smooth top right but if the top looks",
    "start": "697079",
    "end": "704279"
  },
  {
    "text": "like Dilbert's head it goes up and then it oscillates like this and then it's got a nice smooth dip right you know Dilbert's haircut it's kind of so spiky",
    "start": "704279",
    "end": "711180"
  },
  {
    "text": "on top that's oscillating and then low load it's actually nice and smooth and",
    "start": "711180",
    "end": "716339"
  },
  {
    "text": "sometimes you see throughput graphs that do that and that spikiness means that at Peak you're out of threads but at load",
    "start": "716339",
    "end": "722399"
  },
  {
    "text": "low utilization it's being well behaved so you're actually moving between these",
    "start": "722399",
    "end": "727800"
  },
  {
    "text": "two positions on the left and and when you average everything out you can't see those oscillations it's one of the",
    "start": "727800",
    "end": "733920"
  },
  {
    "text": "problems and and it's odd to think that a system would have an oscillating Behavior it's a it's not normally",
    "start": "733920",
    "end": "739980"
  },
  {
    "text": "something you see so it but it's very confusing because the first time I saw this graph at the bottom I couldn't",
    "start": "739980",
    "end": "745620"
  },
  {
    "text": "figure out it's not supposed to be that shape supposed to go up and to the right",
    "start": "745620",
    "end": "751339"
  },
  {
    "text": "where are we so this morning's reading uh",
    "start": "752760",
    "end": "759540"
  },
  {
    "text": "comes from the book of geek in the Old Testament",
    "start": "759540",
    "end": "764660"
  },
  {
    "text": "in the beginning the software was without form and void the architect said let there be light",
    "start": "764760",
    "end": "771420"
  },
  {
    "text": "and they separated the light from the darkness and they called the light architecture and they called The Darkness hacking",
    "start": "771420",
    "end": "779279"
  },
  {
    "text": "and that was the first project on the second project",
    "start": "779279",
    "end": "785940"
  },
  {
    "text": "The Architects used all the Technologies of the heavens and earth they hadn't got round to the first time",
    "start": "785940",
    "end": "792839"
  },
  {
    "text": "the simple new was replaced by a factory which was replaced by a dependency injection",
    "start": "792839",
    "end": "798360"
  },
  {
    "text": "which was replaced by an ioc container which was augmented by XML configuration",
    "start": "798360",
    "end": "803940"
  },
  {
    "text": "which was supplemented by annotations but they were not done yet",
    "start": "803940",
    "end": "810540"
  },
  {
    "text": "the simple save was replaced by a data access object who remembers those who still uses them",
    "start": "810540",
    "end": "816779"
  },
  {
    "text": "oh which was replaced by a unit of work pattern where's Martin",
    "start": "816779",
    "end": "823760"
  },
  {
    "text": "which was replaced by a custom orm which was replaced by hibernate which is called n hibernate by the Redmond",
    "start": "824160",
    "end": "830040"
  },
  {
    "text": "Knights which was partly replaced by batteries because we didn't replace it everywhere you just replace it a bit now you've got",
    "start": "830040",
    "end": "836160"
  },
  {
    "text": "two orms to worry about which was replaced by ejb3 which was not",
    "start": "836160",
    "end": "842100"
  },
  {
    "text": "really replaced by active record and still they toiled",
    "start": "842100",
    "end": "848339"
  },
  {
    "text": "the simple what's that say wow compile there we go yeah the simple compile is replaced by a make file which was",
    "start": "848339",
    "end": "855060"
  },
  {
    "text": "replaced by an ant build XML which is called nant by the Redmond lights",
    "start": "855060",
    "end": "860459"
  },
  {
    "text": "which was replaced by many build XML files which was generated by an xslt transfer I was on that project",
    "start": "860459",
    "end": "866700"
  },
  {
    "text": "there was a project that had an xslt at the XSL transform that would take input",
    "start": "866700",
    "end": "872040"
  },
  {
    "text": "and generate 2 million lines of build xmls across many oh wow happy days which",
    "start": "872040",
    "end": "880079"
  },
  {
    "text": "was replaced by maven and Maven brought forth a plague of Apache Commons and there was a flood of",
    "start": "880079",
    "end": "886740"
  },
  {
    "text": "all the libraries of the internet as a judgment upon the people",
    "start": "886740",
    "end": "891500"
  },
  {
    "text": "and that was the second project there's a phenomenon known as the second system effect where if you let people who write",
    "start": "896040",
    "end": "902519"
  },
  {
    "text": "one system build a second system build the replacement of that system",
    "start": "902519",
    "end": "907680"
  },
  {
    "text": "um they act out a whole bunch of things they never got to do the first time",
    "start": "907680",
    "end": "914160"
  },
  {
    "text": "so uh all of the ideas they had you know they just oh we need this thing to work oh okay well if we just have to get it",
    "start": "914160",
    "end": "920220"
  },
  {
    "text": "to work we'll just put something together that works now we need it to be Enterprise oh okay well that means I get",
    "start": "920220",
    "end": "927120"
  },
  {
    "text": "to do all this other stuff and this is called the second system effect you'll see this a lot especially people",
    "start": "927120",
    "end": "932399"
  },
  {
    "text": "who call themselves Enterprise Architects or even words who get cooler Enterprise Architects by other people",
    "start": "932399",
    "end": "938660"
  },
  {
    "text": "The Architects were fruitful and multiplied they decided to build an architecture that would reach to the Heavens to show",
    "start": "941519",
    "end": "947339"
  },
  {
    "text": "how clever and wise they were and remote invocation would be its name",
    "start": "947339",
    "end": "953339"
  },
  {
    "text": "and it came to pass they were scattered to the Four Winds and began to speak in different tongues some smoking corba",
    "start": "953339",
    "end": "958680"
  },
  {
    "text": "which was called Decon by the redmondites the sunlight spoke the language of jindi of the edubites which was xmlish and",
    "start": "958680",
    "end": "965579"
  },
  {
    "text": "verbose and there was a plague of Standards to test the people",
    "start": "965579",
    "end": "971300"
  },
  {
    "text": "these are the generations of our PC RPC begat RMI which begat com and object",
    "start": "971579",
    "end": "978600"
  },
  {
    "text": "brokers com bagat.com which we get WCF object Brokers begat web services",
    "start": "978600",
    "end": "985019"
  },
  {
    "text": "web services married XML and they begat soap and wisdal soap beget the 1200 tribes of WS Death",
    "start": "985019",
    "end": "992639"
  },
  {
    "text": "Star warsdorf begat code generated stubs and",
    "start": "992639",
    "end": "998940"
  },
  {
    "text": "the people run their hands and wept",
    "start": "998940",
    "end": "1003040"
  },
  {
    "text": "on the seventh day they rested",
    "start": "1004220",
    "end": "1007959"
  },
  {
    "text": "um thus ends the reading so this is what we do okay we we just",
    "start": "1010579",
    "end": "1018440"
  },
  {
    "text": "over complicate these things we over engineer over engineer things so this is how it works we observe a",
    "start": "1018440",
    "end": "1024438"
  },
  {
    "text": "pattern we see a thing that happens more than once typically only twice but more than once and we're designed to see",
    "start": "1024439",
    "end": "1030020"
  },
  {
    "text": "patterns oh I saw this thing that's nearly like that so we go okay well what we're going to do is we're going to create an abstraction we're going to",
    "start": "1030020",
    "end": "1035360"
  },
  {
    "text": "create a generalization because that's useful that's a thing that might help because we're just trying to help right",
    "start": "1035360",
    "end": "1041780"
  },
  {
    "text": "so then abstractions we turn into a framework and we go hey not only can I describe this idea I can give you a",
    "start": "1041780",
    "end": "1048980"
  },
  {
    "text": "thing that does it for you you don't have to think okay so the framework then becomes a",
    "start": "1048980",
    "end": "1054559"
  },
  {
    "text": "golden Hammer we will use I know insert a ruby on brailles everywhere right",
    "start": "1054559",
    "end": "1060440"
  },
  {
    "text": "that's what we're going to use yeah and then people start to subvert the framework because it isn't quite what",
    "start": "1060440",
    "end": "1065660"
  },
  {
    "text": "they need it doesn't quite work um and then finally",
    "start": "1065660",
    "end": "1071539"
  },
  {
    "text": "sometimes finally Simplicity grows out of adversity so um",
    "start": "1071539",
    "end": "1078260"
  },
  {
    "text": "Joe warns uh my colleague over many years in various different guises uh",
    "start": "1078260",
    "end": "1083780"
  },
  {
    "text": "he's a he's a rather astonishing programmer he also makes up words and",
    "start": "1083780",
    "end": "1089299"
  },
  {
    "text": "one of the words he made up to the words he made up he talks about complifying and simplicating so um so complifying is making something",
    "start": "1089299",
    "end": "1097760"
  },
  {
    "text": "much harder than it needs to be okay simplicating is the opposite it's",
    "start": "1097760",
    "end": "1104059"
  },
  {
    "text": "implicating is seeing the Simplicity the inherent Simplicity in something and pulling it out okay there's I think there might be a",
    "start": "1104059",
    "end": "1111200"
  },
  {
    "text": "core behavioral difference between oo programmers and functional programmers which side of that they sit",
    "start": "1111200",
    "end": "1117679"
  },
  {
    "text": "that's all I'm saying about that um so what's this",
    "start": "1117679",
    "end": "1125500"
  },
  {
    "text": "what are you looking at the clues in the title I put the title",
    "start": "1126740",
    "end": "1132080"
  },
  {
    "text": "up there and you still aren't seeing it you're looking at two three-quarter circles what do you think you're looking",
    "start": "1132080",
    "end": "1138559"
  },
  {
    "text": "at you think you're looking at a gray Square in the middle don't you",
    "start": "1138559",
    "end": "1144260"
  },
  {
    "text": "um this is how our brains work our brain is wired to make sense of incomplete data",
    "start": "1144260",
    "end": "1150460"
  },
  {
    "text": "because what we get in life is incomplete data so um we're programmed to see structure",
    "start": "1151100",
    "end": "1156380"
  },
  {
    "text": "so what does this mean um even when none exists so we distort delete and generalize this is one of the",
    "start": "1156380",
    "end": "1161600"
  },
  {
    "text": "sort of core principles of Behavioral psychology and particularly uh neuro-linguistic programming",
    "start": "1161600",
    "end": "1166880"
  },
  {
    "text": "NLP is this like the idea that any information coming in we distort it we delete it we generalize it so distorting",
    "start": "1166880",
    "end": "1173299"
  },
  {
    "text": "it is all of the different cognitive biases like attribution bias confirmation bias all of those things",
    "start": "1173299",
    "end": "1179080"
  },
  {
    "text": "deleting in particular with confirmation bias is when information comes in that doesn't agree with my model of the world",
    "start": "1179080",
    "end": "1185480"
  },
  {
    "text": "I I just I literally my unconscious doesn't even hear it okay how many times",
    "start": "1185480",
    "end": "1190700"
  },
  {
    "text": "have you been speaking to someone and you felt they haven't been listening to you and then you say something and they're suddenly they're engaged",
    "start": "1190700",
    "end": "1196460"
  },
  {
    "text": "yeah usually you know your partner say",
    "start": "1196460",
    "end": "1201279"
  },
  {
    "text": "um and and that's what they're doing they're filtering stuff out until you say something they think is interesting and then they engage okay say more",
    "start": "1201679",
    "end": "1208640"
  },
  {
    "text": "interesting stuff how about that um and generalize is how we do this pattern matching thing so we complify",
    "start": "1208640",
    "end": "1215600"
  },
  {
    "text": "where we should simplicate uh fantastic book I wanna tell you to go and read a book called",
    "start": "1215600",
    "end": "1221660"
  },
  {
    "text": "influence by a guy called Robert cialdini who's an advertising guy and he doesn't call it a book about advertising he calls about it and he calls it a book",
    "start": "1221660",
    "end": "1228200"
  },
  {
    "text": "about the compliance profession okay these guys are so advertising people are experts in making you comply",
    "start": "1228200",
    "end": "1235100"
  },
  {
    "text": "with what they want you to do and they do that by messing with you so a lot of this stuff comes from there",
    "start": "1235100",
    "end": "1241460"
  },
  {
    "text": "um so what am I saying that if I were going to Dublin there's a lovely there's a lovely joke that starts uh this is chats",
    "start": "1241460",
    "end": "1248360"
  },
  {
    "text": "come over here is this guy with an Irish accent he says oh you're from Ireland he",
    "start": "1248360",
    "end": "1253880"
  },
  {
    "text": "says yeah this is uh well I want to get to Dublin how do I get to Dublin and the Russian says Ah if I were going to",
    "start": "1253880",
    "end": "1260600"
  },
  {
    "text": "Dublin I wouldn't start from here oh so",
    "start": "1260600",
    "end": "1266360"
  },
  {
    "text": "so so the problem we've got is we're starting from here yeah and we go oh I'd like to do this thing um agile Transformations yeah so uh you",
    "start": "1266360",
    "end": "1274039"
  },
  {
    "text": "need to set up scrum you need to set up your scrum Masters well we don't have that we're starting",
    "start": "1274039",
    "end": "1279380"
  },
  {
    "text": "from here oh no you have to start from here the thing that scrum says uh you know XP is a similar thing I'm not just",
    "start": "1279380",
    "end": "1284720"
  },
  {
    "text": "ragging on scrum I'm saying these things uh I need to wrap up quickly um so start where you are okay try to",
    "start": "1284720",
    "end": "1292100"
  },
  {
    "text": "see what's really there Terry Pratchett uh who's read Terry Pratchett books excellent I'm in a room full of nerds",
    "start": "1292100",
    "end": "1297919"
  },
  {
    "text": "loads of hands went up that's great um Terry Pratchett has three of his characters are witches actually several",
    "start": "1297919",
    "end": "1304159"
  },
  {
    "text": "of his characters are witches but three in particular um and one of them granny Weather Wax um she talks about uh Witchcraft and and",
    "start": "1304159",
    "end": "1311780"
  },
  {
    "text": "what it means and someone says oh I know witchcraft that's having Second Sight isn't it and she says no no she says",
    "start": "1311780",
    "end": "1317659"
  },
  {
    "text": "witchcraft is having First Sight it's seeing what's really there sir",
    "start": "1317659",
    "end": "1323000"
  },
  {
    "text": "pretty deep so what's actually slowing you down okay it may be all of these Frameworks and all of these libraries",
    "start": "1323000",
    "end": "1329000"
  },
  {
    "text": "and all these bits of architecture you've pulled in are the reason that you think you need all these bits of architecture it could be a",
    "start": "1329000",
    "end": "1334220"
  },
  {
    "text": "self-sustaining problem um when you externalize a question when",
    "start": "1334220",
    "end": "1340340"
  },
  {
    "text": "you're sitting in there the parts of the brain you use and the cognitive processes you use to",
    "start": "1340340",
    "end": "1346039"
  },
  {
    "text": "externalize a problem to someone else um are different from the ones when you",
    "start": "1346039",
    "end": "1351559"
  },
  {
    "text": "have your internal dialogue which is why you get this phenomenon where you go up to someone you say can you think how I",
    "start": "1351559",
    "end": "1357799"
  },
  {
    "text": "could possibly don't worry I've got it how often does that happen yeah a lot right and this is why and so",
    "start": "1357799",
    "end": "1364220"
  },
  {
    "text": "I actually have a bath duck I have a little yellow bathtub I don't have it here in the hotel room I it travels with",
    "start": "1364220",
    "end": "1369559"
  },
  {
    "text": "me when I'm when I don't have someone to pair with I talk to the bathroom because talking to yourself would be mad right so I've got about that",
    "start": "1369559",
    "end": "1377480"
  },
  {
    "text": "um and the Amazon stand downstairs has got these little sort of these little rather Skittle people like there for",
    "start": "1377480",
    "end": "1382520"
  },
  {
    "text": "just big smiles in their faces go and grab one of those if they've got any left because they've like perfect bath",
    "start": "1382520",
    "end": "1387559"
  },
  {
    "text": "Ducks because they just smile at you do you think I should do this crazy thing okay I'll do the crazy thing",
    "start": "1387559",
    "end": "1395840"
  },
  {
    "text": "um you know ask yourself do you really need another logging Library and I just want to leave you with this quote I love this Oliver Wendell Holmes",
    "start": "1395840",
    "end": "1401539"
  },
  {
    "text": "he says I would not give a fig for the Simplicity this side of complexity but I would give my life for the",
    "start": "1401539",
    "end": "1407000"
  },
  {
    "text": "Simplicity on the other side of complexity and this is uh you know simple versus uh",
    "start": "1407000",
    "end": "1413240"
  },
  {
    "text": "simplistic if you like it's just a lovely thing um so that's kind of all I wanted to say I just want to leave you with this",
    "start": "1413240",
    "end": "1419480"
  },
  {
    "text": "lovely picture um the picture on the left is uh the is",
    "start": "1419480",
    "end": "1426500"
  },
  {
    "text": "how you pass the is is the as the structure of the Ruby language the thing on the right is the structure",
    "start": "1426500",
    "end": "1433280"
  },
  {
    "text": "of the Python language okay just saying",
    "start": "1433280",
    "end": "1438400"
  },
  {
    "text": "um that's all I've got I've I guess you want some questions anyone got anything to ask",
    "start": "1440299",
    "end": "1445400"
  },
  {
    "text": "what's my dog's name ah excellent my duck didn't have a name until three days",
    "start": "1445400",
    "end": "1451280"
  },
  {
    "text": "ago no Thursday last week Thursday last week um my duck got a name",
    "start": "1451280",
    "end": "1459020"
  },
  {
    "text": "um and the way what I've got a name was there's a a uh a girl called Cara who I met at another conference uh last week",
    "start": "1459020",
    "end": "1465500"
  },
  {
    "text": "in in Cambridge and she's one of the organizers and we were having this conversation about you",
    "start": "1465500",
    "end": "1470900"
  },
  {
    "text": "know externalizing things and and one of the sessions there was about you know using a darkened externalizing",
    "start": "1470900",
    "end": "1477620"
  },
  {
    "text": "and how you pair and that kind of thing and she said oh right like an epiphany duck",
    "start": "1477620",
    "end": "1482659"
  },
  {
    "text": "I know I just went what he said yeah we call it an epiphany duck right because you you speak to the talk and as you",
    "start": "1482659",
    "end": "1488480"
  },
  {
    "text": "speak to the duck you have an epiphany so my duck is now called epiphany his name is Epiphany duck so I that",
    "start": "1488480",
    "end": "1495860"
  },
  {
    "text": "that's how I speak to here okay thank you right thanks",
    "start": "1495860",
    "end": "1501340"
  },
  {
    "text": "who already knows monads I was hoping like everyone knows them so",
    "start": "1501559",
    "end": "1508360"
  },
  {
    "text": "really yeah it wasn't the case so what's this this",
    "start": "1508400",
    "end": "1514100"
  },
  {
    "text": "is a handle right a door handle for for this photo uh why is it interesting",
    "start": "1514100",
    "end": "1522320"
  },
  {
    "text": "because actually once you look at it you know how to use it right this is basically an interface an",
    "start": "1522320",
    "end": "1528140"
  },
  {
    "text": "interface that we all understand and we all know how to use and once we we see it somewhere we know how to use it",
    "start": "1528140",
    "end": "1535220"
  },
  {
    "text": "actually we use it on windows on doors on refrigerators on other things and",
    "start": "1535220",
    "end": "1542659"
  },
  {
    "text": "again once we see it we are operational we know how to use it it's a known interface it has a shared semantics we",
    "start": "1542659",
    "end": "1548900"
  },
  {
    "text": "know how to use it no matter what the mechanics are behind right if the lock is sophisticated if it's a left side or",
    "start": "1548900",
    "end": "1557120"
  },
  {
    "text": "right side if it's a window it's a refrigerator all these things we don't care about it's an interface it has",
    "start": "1557120",
    "end": "1563140"
  },
  {
    "text": "clearly defined semantics you just swing this uh you you turn this handle and you",
    "start": "1563140",
    "end": "1569480"
  },
  {
    "text": "can open something right that's interesting so we're talking about an interface",
    "start": "1569480",
    "end": "1574779"
  },
  {
    "text": "shared semantics it's familiar it's ready to use and you're operational",
    "start": "1574779",
    "end": "1580940"
  },
  {
    "text": "right it's just an interface now is exactly the same thing it's an",
    "start": "1580940",
    "end": "1588860"
  },
  {
    "text": "interface okay that defines some shared semantics okay so that if everyone",
    "start": "1588860",
    "end": "1594980"
  },
  {
    "text": "understands these semantics okay then we will be able to use it no matter what the mechanics are behind of the",
    "start": "1594980",
    "end": "1601880"
  },
  {
    "text": "implementation and it has an implementation so anyone that tells you Monas are patterns or monitors are",
    "start": "1601880",
    "end": "1608720"
  },
  {
    "text": "whatever else they're wrong monads are interfaces okay it's an interface with an implementation",
    "start": "1608720",
    "end": "1616279"
  },
  {
    "text": "in the same sense that we use also interfaces in Java so just it's a particular interface that has some",
    "start": "1616279",
    "end": "1622100"
  },
  {
    "text": "semantics all right so let's imagine that we have a container",
    "start": "1622100",
    "end": "1627559"
  },
  {
    "text": "it's a container of something right a container of an A A B is a class of",
    "start": "1627559",
    "end": "1634159"
  },
  {
    "text": "things right it's a container of maybe ins okay or a container of strings it's",
    "start": "1634159",
    "end": "1639679"
  },
  {
    "text": "a container okay that might contain something of type A",
    "start": "1639679",
    "end": "1645220"
  },
  {
    "text": "now it could be a list of A's right at least it's a container it could be a",
    "start": "1646279",
    "end": "1651500"
  },
  {
    "text": "list of ins list of strings at least being the container okay that we know",
    "start": "1651500",
    "end": "1656720"
  },
  {
    "text": "about right it's still simple here it could be an option of a that's another",
    "start": "1656720",
    "end": "1661820"
  },
  {
    "text": "type of container okay that's a window versus the door for the first example",
    "start": "1661820",
    "end": "1667520"
  },
  {
    "text": "and an option of a meaning like it's an option is a type that has two subclasses",
    "start": "1667520",
    "end": "1672799"
  },
  {
    "text": "being sum or none and it's it's used to represent some something like nulls we have what we have in Java code nulls but",
    "start": "1672799",
    "end": "1680179"
  },
  {
    "text": "in in a more modular and more composable way we don't care about this stuff so an option of a is another kind of uh",
    "start": "1680179",
    "end": "1686900"
  },
  {
    "text": "container could be an option of int an option of string or whatever else could be a tree of a yet another",
    "start": "1686900",
    "end": "1693320"
  },
  {
    "text": "container okay we are talking about containers of type A future of a there's a value that happens",
    "start": "1693320",
    "end": "1700580"
  },
  {
    "text": "in the future I have this container that will allow me to subscribe to notification when the thing comes in",
    "start": "1700580",
    "end": "1706159"
  },
  {
    "text": "it's still a container of a okay we understand like there's a container we have just a container",
    "start": "1706159",
    "end": "1712400"
  },
  {
    "text": "okay now if I have a function okay A transformation thing that knows how to",
    "start": "1712400",
    "end": "1718100"
  },
  {
    "text": "transform an a into a b so if an a is end and I have a transformation it's a",
    "start": "1718100",
    "end": "1723740"
  },
  {
    "text": "Transformer or a function that can transform an INT into a string okay that's simple right I just know how to",
    "start": "1723740",
    "end": "1730159"
  },
  {
    "text": "out of an end do a string together with the container",
    "start": "1730159",
    "end": "1736100"
  },
  {
    "text": "it could be interesting actually and nice from this container to implement something that can give me a container",
    "start": "1736100",
    "end": "1742220"
  },
  {
    "text": "of B okay it's very simple if I have a list of A's okay if I have a list of ins for",
    "start": "1742220",
    "end": "1750620"
  },
  {
    "text": "instance and I got this function that can take an i and return a string wow",
    "start": "1750620",
    "end": "1756020"
  },
  {
    "text": "got a get an i and then it will be nice from this container to implement a way a",
    "start": "1756020",
    "end": "1762679"
  },
  {
    "text": "mechanism so that they can transform it into a container of string right and basically what will happen is just go",
    "start": "1762679",
    "end": "1768440"
  },
  {
    "text": "into all the the items in the list and transforming all all of them using this function right very simple you got a",
    "start": "1768440",
    "end": "1775640"
  },
  {
    "text": "container a list of uh ins I and I got the function that transforms into string and I would like to have a container of",
    "start": "1775640",
    "end": "1782899"
  },
  {
    "text": "string no and I don't want to care about the structure of the list what's inside the",
    "start": "1782899",
    "end": "1788600"
  },
  {
    "text": "list how is it implemented How do they go through the list all of these things",
    "start": "1788600",
    "end": "1793880"
  },
  {
    "text": "I don't care it's just an interface I want to use it and I know how to use it because I got this interface if I have",
    "start": "1793880",
    "end": "1800059"
  },
  {
    "text": "it of course now if I got an option of end the same transformation function I",
    "start": "1800059",
    "end": "1805460"
  },
  {
    "text": "would like to get an option of string same thing it's a container of some type okay it's a function that transforms",
    "start": "1805460",
    "end": "1812960"
  },
  {
    "text": "this this type inside and I get the container of of the other type right",
    "start": "1812960",
    "end": "1818720"
  },
  {
    "text": "very very simple semantics here and same thing for a future of end I get",
    "start": "1818720",
    "end": "1824600"
  },
  {
    "text": "the same transformation function and I want to get this thing so we see like some kind of interface right where we",
    "start": "1824600",
    "end": "1830000"
  },
  {
    "text": "don't want to to care about the details of how these things are implemented we just wanted to have it there and we know",
    "start": "1830000",
    "end": "1835880"
  },
  {
    "text": "how to use it we don't care about the mechanics how do they implement it we don't really care right it's the",
    "start": "1835880",
    "end": "1841460"
  },
  {
    "text": "container guide that will implement this interface for me and I I know once I see it I know how to use it exactly like the",
    "start": "1841460",
    "end": "1846860"
  },
  {
    "text": "handle now this is a functor now we just describe what functor is",
    "start": "1846860",
    "end": "1853700"
  },
  {
    "text": "a functor is just this interface where you can you have a container of",
    "start": "1853700",
    "end": "1859279"
  },
  {
    "text": "something and you have a transformative transformation function and you can you can return a a container of the other",
    "start": "1859279",
    "end": "1866419"
  },
  {
    "text": "type that's all what functor art well that's not monad right but we're almost there",
    "start": "1866419",
    "end": "1873880"
  },
  {
    "text": "so I would like to implement the functor interface now we talk about code right so it's this is exactly the same what",
    "start": "1874100",
    "end": "1881960"
  },
  {
    "text": "you're seeing here nothing more complicated we're saying a functor is an interface trait is an interface in",
    "start": "1881960",
    "end": "1887659"
  },
  {
    "text": "scanner it's like an interface it can have some implementation but that's we don't care about here and it has this",
    "start": "1887659",
    "end": "1893179"
  },
  {
    "text": "container okay a generic container we don't care about what's inside it's like it could be an M of ain't an M of string",
    "start": "1893179",
    "end": "1900860"
  },
  {
    "text": "we don't care it's just a container and that the map function okay will take a",
    "start": "1900860",
    "end": "1905899"
  },
  {
    "text": "container of a and a function that transforms A to B and gives a container of B okay that's exactly what this we",
    "start": "1905899",
    "end": "1913279"
  },
  {
    "text": "will describe just here right just we wrote it in in code right now I would like to implement this interface okay",
    "start": "1913279",
    "end": "1920120"
  },
  {
    "text": "for a list for instance well that's very simple I would say Okay a list functor",
    "start": "1920120",
    "end": "1925520"
  },
  {
    "text": "extends the functor of list and let's be in the container and now I have to implement it by having a list of A and A",
    "start": "1925520",
    "end": "1932720"
  },
  {
    "text": "to B and then list to B right and I have to go through the list whatever the what's inside the make and the mechanic",
    "start": "1932720",
    "end": "1938659"
  },
  {
    "text": "the mechanics in the inside the list to transform all the elements using this function",
    "start": "1938659",
    "end": "1943880"
  },
  {
    "text": "right now we implemented the functor we can implement this functor for option for futures for whatever else now of",
    "start": "1943880",
    "end": "1950659"
  },
  {
    "text": "course I'm playing an API designer as a developer you don't even care about these things and how they are defined",
    "start": "1950659",
    "end": "1956779"
  },
  {
    "text": "you just use them it's just an interface it's map and one no matter where I see a",
    "start": "1956779",
    "end": "1962539"
  },
  {
    "text": "map I know exactly how can I use it this is a function I said oh this is a functor I know it's a shared semantics",
    "start": "1962539",
    "end": "1968299"
  },
  {
    "text": "we understand the same things now so that's what I was saying",
    "start": "1968299",
    "end": "1974419"
  },
  {
    "text": "so I just don't want to reason about the container in terms of what's inside it and not in terms of what is it I don't",
    "start": "1974419",
    "end": "1980779"
  },
  {
    "text": "want to care if it's an option or if it's a none I don't want to test these cases here's a function just give me a",
    "start": "1980779",
    "end": "1985880"
  },
  {
    "text": "container of the transformation this transformation now",
    "start": "1985880",
    "end": "1991880"
  },
  {
    "text": "we until we run into a problem now of course whenever we we're working with these things then I would like actually",
    "start": "1991880",
    "end": "1998899"
  },
  {
    "text": "I give you a transformation function that doesn't return a b but the same container of B for instance I got a list",
    "start": "1998899",
    "end": "2005440"
  },
  {
    "text": "of a I give you a list of ins and I give you a function that takes an end and",
    "start": "2005440",
    "end": "2011320"
  },
  {
    "text": "gives a list of something a list of strings now we are kind of stuck because",
    "start": "2011320",
    "end": "2016779"
  },
  {
    "text": "this using the functor it will produce exactly this it will it will produce a list of list of things right the same",
    "start": "2016779",
    "end": "2023980"
  },
  {
    "text": "signature we're using the same functor and we get this and this is not very nice",
    "start": "2023980",
    "end": "2029919"
  },
  {
    "text": "it's very not very nice because it's it's complicated as a type like list of list of things what does it mean at all",
    "start": "2029919",
    "end": "2035440"
  },
  {
    "text": "I mean list of list of things isn't it list of ins so if you got an option of option of int which means I maybe maybe",
    "start": "2035440",
    "end": "2043960"
  },
  {
    "text": "have an INT well it means I maybe have an INT right optionally option I have an",
    "start": "2043960",
    "end": "2049599"
  },
  {
    "text": "INT then I can kind of flatten these things okay and this is very interesting imagine I got an option of something and",
    "start": "2049599",
    "end": "2055960"
  },
  {
    "text": "I have an operation that actually returns another option so using the functor I'm stuck I know I",
    "start": "2055960",
    "end": "2062020"
  },
  {
    "text": "need something more powerful that can also flatten these things okay",
    "start": "2062020",
    "end": "2067618"
  },
  {
    "text": "so in in the case of list it gets a list of lists of a the same for options gets",
    "start": "2069399",
    "end": "2074618"
  },
  {
    "text": "an option option of a because I got the option f a a to option of B it gives me option of option of B that's using the",
    "start": "2074619",
    "end": "2081460"
  },
  {
    "text": "the earlier signature we are not changing anything here right now how nice would it be if someone can",
    "start": "2081460",
    "end": "2087760"
  },
  {
    "text": "Implement for me something that also flattens when I need right not only uses",
    "start": "2087760",
    "end": "2093280"
  },
  {
    "text": "the transformation but when I have this signature where I from a to container of B flattens the container of container of",
    "start": "2093280",
    "end": "2100720"
  },
  {
    "text": "B the list of list of a because a list of list of a is a list of a right it's a list of list of ins then I can just",
    "start": "2100720",
    "end": "2107800"
  },
  {
    "text": "flatten this list and I have one list of all the ins contained on all the these lists right that's that's very simple",
    "start": "2107800",
    "end": "2115000"
  },
  {
    "text": "okay and that's the moment now you know exactly what the Monet is",
    "start": "2115000",
    "end": "2120760"
  },
  {
    "text": "so if we look at the interface the implementation and that's exactly the code that we were showing exactly we",
    "start": "2120760",
    "end": "2127359"
  },
  {
    "text": "didn't add anything here we say like a moment is an interface that takes any container okay that you can Define the",
    "start": "2127359",
    "end": "2134079"
  },
  {
    "text": "moon at for any container and I got these two operations one comes from the",
    "start": "2134079",
    "end": "2139119"
  },
  {
    "text": "functor okay so a monad is a functor now you know this you can say yeah you can",
    "start": "2139119",
    "end": "2144700"
  },
  {
    "text": "tweet about it like there's a functor wow how cool is that and so you have the map function but you",
    "start": "2144700",
    "end": "2151300"
  },
  {
    "text": "have also the flat map which is more interesting in some cases where you need to flatten things so I get flat map and",
    "start": "2151300",
    "end": "2158079"
  },
  {
    "text": "I got one container of a an a function that takes an A and gives an a container",
    "start": "2158079",
    "end": "2163960"
  },
  {
    "text": "of B and I get a container of b instead of getting container of container of B right that's very simple you can even",
    "start": "2163960",
    "end": "2170140"
  },
  {
    "text": "implement it yourself now that that code is the designer of a an implementer of a",
    "start": "2170140",
    "end": "2175240"
  },
  {
    "text": "monad it's not the developer that has to see this code right it's someone that is designing a that implementing a monad",
    "start": "2175240",
    "end": "2182619"
  },
  {
    "text": "for his particular container right and that's interesting because from a developer side",
    "start": "2182619",
    "end": "2188800"
  },
  {
    "text": "all what I need to know is this is a monad oh I can use flat map or map and I",
    "start": "2188800",
    "end": "2195640"
  },
  {
    "text": "can continue using this thing forever without any problem right I can completely transform things compose",
    "start": "2195640",
    "end": "2202540"
  },
  {
    "text": "things and completely like use this without any any anything stopping me",
    "start": "2202540",
    "end": "2208180"
  },
  {
    "text": "almost because imagine this handle if you take this handle as an example and if if for",
    "start": "2208180",
    "end": "2216820"
  },
  {
    "text": "instance that uh manufacturer of this handle will tell you like well you can only turn it three times and after three",
    "start": "2216820",
    "end": "2224020"
  },
  {
    "text": "the third time you have to turn it the other way around or it won't work or you should not turn it three times or",
    "start": "2224020",
    "end": "2229480"
  },
  {
    "text": "whatever so there are things that are not captured in the structure right the structure is not telling any everything",
    "start": "2229480",
    "end": "2235000"
  },
  {
    "text": "about the handle there are some lows you need to obey to be able to use to have a",
    "start": "2235000",
    "end": "2241240"
  },
  {
    "text": "good implementation of of a handle right if some manufacturer gives you a handle that has some weird",
    "start": "2241240",
    "end": "2247140"
  },
  {
    "text": "characteristics you lost the shared semantics short semantics is very important and you don't want to lose it",
    "start": "2247140",
    "end": "2253180"
  },
  {
    "text": "and that's why there's there are some things that you can capture you can Implement in the structure in your implementation and there are few things",
    "start": "2253180",
    "end": "2260140"
  },
  {
    "text": "you need to verify to be able to to be sure that everything will will be",
    "start": "2260140",
    "end": "2266320"
  },
  {
    "text": "working fine so some properties are not guaranteed with a structure and you need to",
    "start": "2266320",
    "end": "2271960"
  },
  {
    "text": "validate some laws which are left identity right identity and Associate really very simple laws like if you",
    "start": "2271960",
    "end": "2279700"
  },
  {
    "text": "apply it with the idea with a function that takes the same and Returns the same returns an argument and returns it then",
    "start": "2279700",
    "end": "2285579"
  },
  {
    "text": "it will be the same monad and things like that so very small laws that are not captured in the structure if as an",
    "start": "2285579",
    "end": "2292660"
  },
  {
    "text": "implementer of a monad as someone that has a container and wants to implement a monad you satisfy these laws you're",
    "start": "2292660",
    "end": "2299200"
  },
  {
    "text": "guaranteed that you'll have a functioning well-functioning Mona that will never break while the user is using",
    "start": "2299200",
    "end": "2304660"
  },
  {
    "text": "it you know imagine you're chaining and someone you get some weird uh state where it tells you no I can't do that",
    "start": "2304660",
    "end": "2310180"
  },
  {
    "text": "anymore something you get with jQuery for instance sometimes when you start using the thing and then it tells you oh",
    "start": "2310180",
    "end": "2315820"
  },
  {
    "text": "it's not an array anymore and you have to rewrap it into a dollar so that it gets back to the jQuery and all of these",
    "start": "2315820",
    "end": "2321640"
  },
  {
    "text": "things you don't want to have this kind of weird things happening you want like the thing to continue functioning that's",
    "start": "2321640",
    "end": "2328420"
  },
  {
    "text": "why you obey these laws and that's it well what about category Theory well category",
    "start": "2328420",
    "end": "2335500"
  },
  {
    "text": "theory is all there is there just for proving for you that that this thing it's it's kind of hard the the",
    "start": "2335500",
    "end": "2341619"
  },
  {
    "text": "foundation that proves that this thing will continue to function if you obey the laws and that's it and you don't",
    "start": "2341619",
    "end": "2348040"
  },
  {
    "text": "need to care about these things you care about them if you're interested in the proof why this thing is functional and",
    "start": "2348040",
    "end": "2353740"
  },
  {
    "text": "why is it interesting as a developer you see a map you see a flat map you know it's a Mona you know how to deal with it",
    "start": "2353740",
    "end": "2360099"
  },
  {
    "text": "be it whatever container it is it could be option could be future it could be tree it could be IO it could be anything",
    "start": "2360099",
    "end": "2367660"
  },
  {
    "text": "you just have a shirt semantics an interface and you know exactly how to",
    "start": "2367660",
    "end": "2372820"
  },
  {
    "text": "deal with that as an implementer we have a little bit of work to do is just to implement this interface which we saw",
    "start": "2372820",
    "end": "2378940"
  },
  {
    "text": "very very simple and you can implement it for your own mechanics of your own container and Obey these three laws",
    "start": "2378940",
    "end": "2387400"
  },
  {
    "text": "and actually that's it so open for questions now",
    "start": "2387400",
    "end": "2392820"
  },
  {
    "text": "so what I want like if you now I guess a lot of people didn't know what Monas are I guess it's fairly simple right like we",
    "start": "2394720",
    "end": "2401980"
  },
  {
    "text": "we hear a lot of definitions that try to complicate them but just now when you see map or flat map you know exactly how",
    "start": "2401980",
    "end": "2408280"
  },
  {
    "text": "to deal with these things right Josh he talked a lot about putting things",
    "start": "2408280",
    "end": "2414820"
  },
  {
    "text": "into the Container how do you get them back out of the container yeah uh well that's that's not part of the Monarch so",
    "start": "2414820",
    "end": "2421960"
  },
  {
    "text": "some containers so some containers can allow you to get out things of the",
    "start": "2421960",
    "end": "2427480"
  },
  {
    "text": "container some won't like the I almost will not let you get things out of it some of them tell you okay you can get",
    "start": "2427480",
    "end": "2433720"
  },
  {
    "text": "out friends in the future you can't get something out you can subscribe to the notification when it happens too and",
    "start": "2433720",
    "end": "2439480"
  },
  {
    "text": "this is not part of the mechanics of the of the of the monad we don't care really about it when we talk about the monad",
    "start": "2439480",
    "end": "2445060"
  },
  {
    "text": "it's the container that defines something else it could be another abstraction that will Define how to extract things there are some others",
    "start": "2445060",
    "end": "2451540"
  },
  {
    "text": "like common ads there are monoids that are foldable there are a lot of other things to so that you can extract things",
    "start": "2451540",
    "end": "2457480"
  },
  {
    "text": "but monad is doesn't happen to be one of caring about this kind of aspects",
    "start": "2457480",
    "end": "2464200"
  },
  {
    "text": "questions okay",
    "start": "2464200",
    "end": "2469800"
  },
  {
    "text": "so far you've been talking mostly abstractly about the interface of the moned can you talk about more",
    "start": "2471700",
    "end": "2479260"
  },
  {
    "text": "concretely what this gives you is it just you see this thing and you know how to use it yeah what are some examples",
    "start": "2479260",
    "end": "2485500"
  },
  {
    "text": "monads you might use I gave you an example of a list now if in 15 minutes I",
    "start": "2485500",
    "end": "2491260"
  },
  {
    "text": "can I don't know what how much time I got but I can none no",
    "start": "2491260",
    "end": "2498480"
  },
  {
    "text": "minutes so it's like I showed the list one and the least one is very interesting because it's a very simple example of how you use it you got a list",
    "start": "2499839",
    "end": "2506740"
  },
  {
    "text": "of things you reason about one thing as if it were one thing right and you give a function so you have a list of ins and",
    "start": "2506740",
    "end": "2514060"
  },
  {
    "text": "you say like okay I can transform an end into a string which means like and the moment will allow you or the functor for",
    "start": "2514060",
    "end": "2519700"
  },
  {
    "text": "that matter allow you to transform the whole list into a list of strings right this is one case one use case the option",
    "start": "2519700",
    "end": "2526000"
  },
  {
    "text": "was another case but there are a lot of cases you can go through there are a lot of examples of Monas but they are",
    "start": "2526000",
    "end": "2531400"
  },
  {
    "text": "exactly the same semantics and you know this transforming the what's inside the container and uh reflattening okay but",
    "start": "2531400",
    "end": "2540099"
  },
  {
    "text": "again in the list case you don't care about how the list is implemented is the mechanics of the implementation",
    "start": "2540099",
    "end": "2546520"
  },
  {
    "text": "of the monad right so since I don't have really",
    "start": "2546520",
    "end": "2552579"
  },
  {
    "text": "much time I will try okay just step please Christian tell me when I am",
    "start": "2552579",
    "end": "2558040"
  },
  {
    "text": "you know if I don't have any more time it's already the case right and I don't",
    "start": "2558040",
    "end": "2563200"
  },
  {
    "text": "see my consoles I wouldn't you wouldn't make it here anyway",
    "start": "2563200",
    "end": "2568500"
  },
  {
    "text": "okay I see something wrong um I won't build this fast",
    "start": "2568660",
    "end": "2577079"
  },
  {
    "text": "come on come on come on this is BT",
    "start": "2577839",
    "end": "2583020"
  },
  {
    "text": "okay so I want to go to console well let's not go and make it it's going",
    "start": "2583660",
    "end": "2590740"
  },
  {
    "text": "to download the internet but anyway I mean you can you can just search and there are a lot of examples",
    "start": "2590740",
    "end": "2597400"
  },
  {
    "text": "of of uh different kinds of Monet but you need to capture the main ideas shirt semantics so here I got something if I",
    "start": "2597400",
    "end": "2604839"
  },
  {
    "text": "say like I have a list that got one two three and I say and probably you don't",
    "start": "2604839",
    "end": "2611500"
  },
  {
    "text": "see anything right okay let's try to zoom it",
    "start": "2611500",
    "end": "2616440"
  },
  {
    "text": "dot map and I'm taking an end and it'll be returning a string of",
    "start": "2616780",
    "end": "2623680"
  },
  {
    "text": "got a plus I and now I get if it runs it",
    "start": "2623680",
    "end": "2631720"
  },
  {
    "text": "sometime soon yeah so I got the list I've got a got a I got two get three right and uh okay I",
    "start": "2631720",
    "end": "2639400"
  },
  {
    "text": "I have a space here in space here now I can I can return a list of things here",
    "start": "2639400",
    "end": "2645819"
  },
  {
    "text": "for each item I'm returning a list another in the same container of another another type so I got a list here of",
    "start": "2645819",
    "end": "2653619"
  },
  {
    "text": "got an A and I don't know what wow",
    "start": "2653619",
    "end": "2660160"
  },
  {
    "text": "and here I have to so if I used the functor here what I will get is a list of lists we see the type here we see the",
    "start": "2660160",
    "end": "2667000"
  },
  {
    "text": "type it's a list of list of string that's not very nice right I get a list of list of the first list and the second",
    "start": "2667000",
    "end": "2672760"
  },
  {
    "text": "list and so on if I use flat map then it will go flat in it",
    "start": "2672760",
    "end": "2679560"
  },
  {
    "text": "and I will get something nicer which is one list flattened of this list and I can apply it to options I can apply it",
    "start": "2679780",
    "end": "2686200"
  },
  {
    "text": "to anything right and of course languages since it's very very interesting and like this shirt",
    "start": "2686200",
    "end": "2692079"
  },
  {
    "text": "semantics very general they provide even Syntax for doing that which is for comprehensions whatever they they tend",
    "start": "2692079",
    "end": "2698200"
  },
  {
    "text": "to call them in different languages C sharp C Scala whatever the other languages High School",
    "start": "2698200",
    "end": "2705460"
  },
  {
    "text": "so thanks okay thank you",
    "start": "2705460",
    "end": "2711540"
  },
  {
    "text": "so see you see you back for in",
    "start": "2715359",
    "end": "2719400"
  }
]