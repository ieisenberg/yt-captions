[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "[Music]",
    "start": "980",
    "end": "7849"
  },
  {
    "text": "[Applause] all right hi I have three parts in my talk the first one is why would you want",
    "start": "13000",
    "end": "20130"
  },
  {
    "text": "to build your own language the second part is building a little language and the third part then is a couple of",
    "start": "20130",
    "end": "25439"
  },
  {
    "text": "lessons learned we learned from building languages lots of stuff not enough time I'll speak",
    "start": "25439",
    "end": "33390"
  },
  {
    "text": "quickly and you ask questions quickly at the end we'll get this done somehow all right so motivation you've probably seen",
    "start": "33390",
    "end": "41690"
  },
  {
    "start": "37000",
    "end": "95000"
  },
  {
    "text": "business people say something like this you know I've just written those requirements and now I have to explain",
    "start": "41690",
    "end": "47400"
  },
  {
    "text": "them for three months so the technical guys to implement it and they'll get it wrong anyway and then of course the",
    "start": "47400",
    "end": "53580"
  },
  {
    "text": "technical people are also frustrated because they get these imprecise word documents with stuff in it and they",
    "start": "53580",
    "end": "59580"
  },
  {
    "text": "don't really know how to implement it but they're responsible if it failed right it's always their fault or our fault as developers so that's bad",
    "start": "59580",
    "end": "66390"
  },
  {
    "text": "there's also the other direction where the IT guys decide that they have to re-implement whatever application in and",
    "start": "66390",
    "end": "72869"
  },
  {
    "text": "use some new technology you know mobile micro service whatever thing and so the",
    "start": "72869",
    "end": "79260"
  },
  {
    "text": "business people have to again talk to those guys and explain to them what the application actually does again so",
    "start": "79260",
    "end": "85080"
  },
  {
    "text": "that's annoying but of course the technical guys have to do this because they are hype driven as we all are and",
    "start": "85080",
    "end": "90570"
  },
  {
    "text": "so we have to redo everything every few years in a new technology so how can we",
    "start": "90570",
    "end": "97020"
  },
  {
    "start": "95000",
    "end": "162000"
  },
  {
    "text": "make that problem less annoying well we should be able to somehow decouple",
    "start": "97020",
    "end": "102060"
  },
  {
    "text": "fastly cut and Technology notice fastly cut if your German you're probably not surprised about this word if you speak",
    "start": "102060",
    "end": "108720"
  },
  {
    "text": "English natively this is our attempt to you know do a kindergarten because there",
    "start": "108720",
    "end": "114780"
  },
  {
    "text": "is no word in English that represents fastly quite precisely if you translate",
    "start": "114780",
    "end": "120720"
  },
  {
    "text": "it you get professionalism which is completely not fitting fastly card is the non-technical core of your system",
    "start": "120720",
    "end": "127710"
  },
  {
    "text": "that the thing that's relevant to your domain right did the actual business knowledge or whatever so firstly cut",
    "start": "127710",
    "end": "133049"
  },
  {
    "text": "nice word so you want to represent that in a way so that it is independent of a particular technology you want to",
    "start": "133049",
    "end": "139680"
  },
  {
    "text": "represent it in a way that it's precisely formal enough so it can be",
    "start": "139680",
    "end": "144720"
  },
  {
    "text": "directly tested analyzed executed simulated you want to represent it in a way that",
    "start": "144720",
    "end": "149870"
  },
  {
    "text": "with the language that is friendly so you're you know these people here you",
    "start": "149870",
    "end": "155700"
  },
  {
    "text": "know they can directly write and work with this kind of stuff and not just the",
    "start": "155700",
    "end": "161370"
  },
  {
    "text": "technical guys so that's the idea right you built a domain-specific language that is formal that is checkable and",
    "start": "161370",
    "end": "168329"
  },
  {
    "text": "that is understandable by those people and then they can directly implement",
    "start": "168329",
    "end": "175439"
  },
  {
    "text": "systems by writing code in that language and I'm putting quotation marks around all of these things because I don't know",
    "start": "175439",
    "end": "181799"
  },
  {
    "text": "what what we should use as a word right I don't want to call it code because then those guys get scared I don't want",
    "start": "181799",
    "end": "187260"
  },
  {
    "text": "to call it programming but if I call it modeling everybody thinks of boxes and lines so it's it's it's a tough wording",
    "start": "187260",
    "end": "193769"
  },
  {
    "text": "problem maybe I should call it faculty cutting but then it's even worse than whatever so how does this work",
    "start": "193769",
    "end": "199439"
  },
  {
    "start": "197000",
    "end": "250000"
  },
  {
    "text": "conceptually and I'll get more concrete in a moment so you have the business guy he creates models specifications fuzzy",
    "start": "199439",
    "end": "207329"
  },
  {
    "text": "things different ones for different aspects of a system and they do that by",
    "start": "207329",
    "end": "214379"
  },
  {
    "text": "using languages tailored for these different aspects they are implemented by the software guy right and then of",
    "start": "214379",
    "end": "222000"
  },
  {
    "text": "course you need tools that allow you to implement languages these are then meta",
    "start": "222000",
    "end": "228000"
  },
  {
    "text": "languages or language workbenches and those are implemented by strange people",
    "start": "228000",
    "end": "233069"
  },
  {
    "text": "right because they have to work on meta meta level I know some of them they",
    "start": "233069",
    "end": "238709"
  },
  {
    "text": "don't all look like this but it's a reasonably close approximation so the",
    "start": "238709",
    "end": "244109"
  },
  {
    "text": "language workbench I like to use is MPs open source stuff from JetBrains I'll show that in a moment so I'm going",
    "start": "244109",
    "end": "251939"
  },
  {
    "start": "250000",
    "end": "601000"
  },
  {
    "text": "to show you a few examples that maybe hopefully drive home why you would want to do this so here is a sorry German",
    "start": "251939",
    "end": "259280"
  },
  {
    "text": "this is a representation of an insurer of a part of an insurance product and this looks like a Word document",
    "start": "259280",
    "end": "265889"
  },
  {
    "text": "and the reason why it looks like a Word document is that in like in the old system it actually was a Word document",
    "start": "265889",
    "end": "272130"
  },
  {
    "text": "which was then transferred into a transfer format PDF shipped to some",
    "start": "272130",
    "end": "279120"
  },
  {
    "text": "cheap you know implementation place and then people implemented all of the stuff manually interesting you can see",
    "start": "279120",
    "end": "285660"
  },
  {
    "text": "here that these pseudocode things actually no they're not in the original system they were actually German so you",
    "start": "285660",
    "end": "291990"
  },
  {
    "text": "wondered how these people at the other end of the world would actually understand this but whatever so",
    "start": "291990",
    "end": "297200"
  },
  {
    "text": "obviously this is not a very like streamlined process and so we were tasked to build a domain-specific",
    "start": "297200",
    "end": "303540"
  },
  {
    "text": "language that tried to look as much as possible as the original Word document thing but still is formal enough to be",
    "start": "303540",
    "end": "310050"
  },
  {
    "text": "executable and so here you can see parameter declarations you can actually see code that runs this whole table thing is essentially a case statement",
    "start": "310050",
    "end": "317280"
  },
  {
    "text": "right so there are different cases and then this is what's executed and it also mixes you know textual descriptions and",
    "start": "317280",
    "end": "325080"
  },
  {
    "text": "it really looks like a word document and so that's an example of one particular DSL and of course the the idea of making",
    "start": "325080",
    "end": "333120"
  },
  {
    "text": "it look friendly to meet to the main expert has been driven to some kind of extreme right you don't have to do it",
    "start": "333120",
    "end": "338520"
  },
  {
    "text": "that badly right here is another example calculating public benefits in a German",
    "start": "338520",
    "end": "345810"
  },
  {
    "text": "context I mentioned that because I have another context later and you can see",
    "start": "345810",
    "end": "351210"
  },
  {
    "text": "there's a mix between almost like form style and language right so these these",
    "start": "351210",
    "end": "357510"
  },
  {
    "text": "bold things they are kind of always there you can't remove them like in a normal text editor they're they're like",
    "start": "357510",
    "end": "362630"
  },
  {
    "text": "projected as a template into which you put your code and then you can put expressions here with like any other",
    "start": "362630",
    "end": "369740"
  },
  {
    "text": "language and so one problem that we found with domain experts is that they",
    "start": "369740",
    "end": "375660"
  },
  {
    "text": "don't like the empty paper effect right you give them an empty file into which they can put their code not a good idea",
    "start": "375660",
    "end": "381630"
  },
  {
    "text": "you have to guide people and you can do that by you know giving a form style thing into which they can then fill in",
    "start": "381630",
    "end": "388230"
  },
  {
    "text": "code in in various places this is just a random example of a graphical notation",
    "start": "388230",
    "end": "394530"
  },
  {
    "text": "for a functional programming language just to illustrate yes you can also do graphics it's surprisingly rare I mean",
    "start": "394530",
    "end": "400460"
  },
  {
    "text": "useful people don't want that much they rather prefer tables math symbols stuff",
    "start": "400460",
    "end": "407160"
  },
  {
    "text": "like that but the occasional graphical diagram for example for data modelling of course makes sense here's a weird",
    "start": "407160",
    "end": "414720"
  },
  {
    "text": "example it is used to specify the rules that go into Tahoe graphs tribal in",
    "start": "414720",
    "end": "421139"
  },
  {
    "text": "German and perhaps Dutch I don't know so if you drive a truck there are all these rules when you have to take breaks and",
    "start": "421139",
    "end": "427469"
  },
  {
    "text": "these rules are a non trivial and be different in every European country let",
    "start": "427469",
    "end": "433199"
  },
  {
    "text": "alone outside of the EU and if you're a manufacturer of these tacho graphs you have to describe these rules somehow and our customer built a prototype language",
    "start": "433199",
    "end": "440639"
  },
  {
    "text": "in I guess you can guess which tool they build a prototype in right Excel like",
    "start": "440639",
    "end": "446069"
  },
  {
    "text": "everybody does everything in Excel and so we've built a very custom notation",
    "start": "446069",
    "end": "451560"
  },
  {
    "text": "this is a notation for the language that looks like no other DSL because we try to replicate Excel but there is a type",
    "start": "451560",
    "end": "457919"
  },
  {
    "text": "system behind it there is a structure behind these different bottles if you will have semantic meaning you can embed",
    "start": "457919",
    "end": "464930"
  },
  {
    "text": "C code and then from that we generate the firmware that actually runs on the tachograph",
    "start": "464930",
    "end": "470129"
  },
  {
    "text": "and so this is a very efficient way to manage all these rules these are just two random examples to show that we can",
    "start": "470129",
    "end": "477060"
  },
  {
    "text": "use mathematical notations and this is short function recursive function style",
    "start": "477060",
    "end": "485460"
  },
  {
    "text": "for insurance math click click this is",
    "start": "485460",
    "end": "492440"
  },
  {
    "text": "example that I guess needs some stylistic polishing in terms of the language but it's used to describe or",
    "start": "492440",
    "end": "499440"
  },
  {
    "text": "actually implement satellite unball software so that the software that controls the you know thermal management",
    "start": "499440",
    "end": "505650"
  },
  {
    "text": "energy management scheduling of various tasks on a satellite that's part of the implementation here and this is an",
    "start": "505650",
    "end": "512130"
  },
  {
    "text": "example from healthcare where doctors and other medical professionals encode algorithms for diagnosing various you",
    "start": "512130",
    "end": "520078"
  },
  {
    "text": "know effect I shouldn't say very I shouldn't say diagnosing illnesses as part of a therapy they essentially track",
    "start": "520079",
    "end": "526019"
  },
  {
    "text": "the progress and then you know identify whether you should take this pillow that pill or you know measure your",
    "start": "526019",
    "end": "532290"
  },
  {
    "text": "temperature at this or that time or have more breakfast or a certain diet and in the worst case tell you to call your",
    "start": "532290",
    "end": "537600"
  },
  {
    "text": "doctor all right so the idea was to have doctors direct the code these algorithms in this language it relies heavily on",
    "start": "537600",
    "end": "544380"
  },
  {
    "text": "decision trees and decision tables and then of course they can also write tests so if you simulate a whole treatment for a given",
    "start": "544380",
    "end": "551709"
  },
  {
    "text": "patient that was a very interesting project because if you know anything about healthcare you might know that in",
    "start": "551709",
    "end": "557800"
  },
  {
    "text": "order to do this like build such applications that do these kind of treatment support thing you have to get",
    "start": "557800",
    "end": "566050"
  },
  {
    "text": "a stem from the FDA Food and Drug Administration in the US and it's not so",
    "start": "566050",
    "end": "572259"
  },
  {
    "text": "obvious how you get DSL and code generation and all of this kind of certificated by the FDA but there is a",
    "start": "572259",
    "end": "579399"
  },
  {
    "text": "two-phase process we've well our customer has successfully gone through the first phase so we're extremely",
    "start": "579399",
    "end": "585220"
  },
  {
    "text": "confident that this thing will get the stamp so that's very interesting so there's a source on paper that we",
    "start": "585220",
    "end": "590980"
  },
  {
    "text": "recently wrote which you can either somehow rescue from behind the paywall",
    "start": "590980",
    "end": "597189"
  },
  {
    "text": "or you can find a draft as it happens on my website anyway so this was the",
    "start": "597189",
    "end": "604389"
  },
  {
    "start": "601000",
    "end": "835000"
  },
  {
    "text": "motivation why you would want to do this DSL if you do them right allow you to really integrate stakeholders domain",
    "start": "604389",
    "end": "611740"
  },
  {
    "text": "experts into the software development process directly as opposed to just writing documents and then hoping for",
    "start": "611740",
    "end": "617740"
  },
  {
    "text": "the best all of these examples are gay for built with MPs MPs is a language",
    "start": "617740",
    "end": "623980"
  },
  {
    "text": "workbench right a tool for building languages it's open source so everything I've shown well I mean the languages of",
    "start": "623980",
    "end": "630759"
  },
  {
    "text": "course propietario customers right but the the tooling to do all this is all",
    "start": "630759",
    "end": "636370"
  },
  {
    "text": "open source there are some aspects of the languages for example the tables and the diagrams that are not directly part",
    "start": "636370",
    "end": "642490"
  },
  {
    "text": "of MPs they're part of a if you will extension library but that's also open source there is no catch to what I'm",
    "start": "642490",
    "end": "649449"
  },
  {
    "text": "talking about here I think personally that MPs is the most powerful example of",
    "start": "649449",
    "end": "655899"
  },
  {
    "text": "a language workbench of course I'm a little bit biased well you could say I only use it because it's the best write",
    "start": "655899",
    "end": "661809"
  },
  {
    "text": "that means is always this causality in both directions but it's extremely powerful and it has been used for 10",
    "start": "661809",
    "end": "668709"
  },
  {
    "text": "years my team in the team has spent the last 10 years doing nothing else and",
    "start": "668709",
    "end": "673720"
  },
  {
    "text": "while it still has its quirks and rough edges I guess I mean that's 15 years of",
    "start": "673720",
    "end": "678970"
  },
  {
    "text": "development history you know embedded in it it's extremely powerful and highly recommended to use here are a",
    "start": "678970",
    "end": "685570"
  },
  {
    "text": "couple of companies that use MPs in production you might recognize those guys if you're Dutch so your taxes and your benefits in",
    "start": "685570",
    "end": "694360"
  },
  {
    "text": "case you get some are calculated based on a rule set that is described and",
    "start": "694360",
    "end": "700269"
  },
  {
    "text": "implemented and tested Indy parked with MPs so the Dutch tax agency has a has a language engineering team for years",
    "start": "700269",
    "end": "706360"
  },
  {
    "text": "actually like for 20 years they've done this and a few years ago they've ported everything from their own proprietary",
    "start": "706360",
    "end": "711459"
  },
  {
    "text": "solution to MPs and so it's really interesting what's going on there I mean if you want to see this stuff used",
    "start": "711459",
    "end": "718360"
  },
  {
    "text": "really for absolutely for real you should talk to those guys so they have",
    "start": "718360",
    "end": "723550"
  },
  {
    "text": "well they should tell the anecdotes it's really interesting language workbench as",
    "start": "723550",
    "end": "729880"
  },
  {
    "text": "I said allows you to define essentially all aspects of a language structure syntax notation type system code",
    "start": "729880",
    "end": "737200"
  },
  {
    "text": "generators interpreters everything that you need to make the language and of course the IDE everything you need to",
    "start": "737200",
    "end": "742480"
  },
  {
    "text": "make the language like useful to real people and what is interesting in MPs in",
    "start": "742480",
    "end": "748209"
  },
  {
    "text": "particular is that it supports all these different notations you've seen many of them in my examples and it also supports",
    "start": "748209",
    "end": "754720"
  },
  {
    "text": "language modularity so you can have a language that has modular extensions we",
    "start": "754720",
    "end": "760660"
  },
  {
    "text": "spent three years between 22 years and a research project and a few more years after that building something called and",
    "start": "760660",
    "end": "767649"
  },
  {
    "text": "better which is a bunch of extensions to see to make it more useful for embedded programming you can also do embedding",
    "start": "767649",
    "end": "773920"
  },
  {
    "text": "where you have one dsl embedded in another one but not like they do in scala or groovy or ruby by using",
    "start": "773920",
    "end": "781270"
  },
  {
    "text": "reflection meta programming by but by actual like language definition with type",
    "start": "781270",
    "end": "787630"
  },
  {
    "text": "system and everything it's extremely powerful in particular it allows us to use this pattern here where a",
    "start": "787630",
    "end": "793480"
  },
  {
    "text": "domain-specific language is often structured in these three layers at the call you have a functional language with",
    "start": "793480",
    "end": "798579"
  },
  {
    "text": "expressions primitive types values things like functions option types you",
    "start": "798579",
    "end": "803890"
  },
  {
    "text": "know that the stuff you know from any modern language but then you build domain-specific behaviors around it and",
    "start": "803890",
    "end": "809620"
  },
  {
    "text": "domain-specific data structures on top of it like for example an insurance contract could be a domain-specific",
    "start": "809620",
    "end": "814630"
  },
  {
    "text": "structure it has rules inside of it that execute in like any rule engine but then at the core you",
    "start": "814630",
    "end": "820769"
  },
  {
    "text": "have these functional expressions we've built a language called kernel F like kernel as in core and F like functional",
    "start": "820769",
    "end": "827459"
  },
  {
    "text": "that is intended to be used here and essentially all of the languages we've",
    "start": "827459",
    "end": "832529"
  },
  {
    "text": "built over the last few years embed this language so now we're let's move to the",
    "start": "832529",
    "end": "837990"
  },
  {
    "start": "835000",
    "end": "854000"
  },
  {
    "text": "demo and actually what we're going to do is we're going to make a little",
    "start": "837990",
    "end": "843029"
  },
  {
    "text": "extension to Colonel F because it doesn't make a lot of sense to you know",
    "start": "843029",
    "end": "848579"
  },
  {
    "text": "do a whole domain analysis and try to explain the you know intricacies of a particular domain so what you see here",
    "start": "848579",
    "end": "855589"
  },
  {
    "start": "854000",
    "end": "1164000"
  },
  {
    "text": "is a little bit of coding kernel F you can define a function it takes two",
    "start": "855589",
    "end": "861180"
  },
  {
    "text": "arguments the first one is a number between 0 and 100 we do range checking for numbers in the type system here and",
    "start": "861180",
    "end": "868500"
  },
  {
    "text": "a string and then it has an if expression and says if the number here is bigger than 10 then you return",
    "start": "868500",
    "end": "874290"
  },
  {
    "text": "greetings comma string else you return an empty string so you can run this in",
    "start": "874290",
    "end": "879329"
  },
  {
    "text": "the built-in interpreter right and if you pass 20 then you get the greeting if",
    "start": "879329",
    "end": "884430"
  },
  {
    "text": "you pass 10 you get nothing right and now my idea is to just to show you how all of this works to build a modular",
    "start": "884430",
    "end": "890879"
  },
  {
    "text": "language extension that essentially does exactly the same as the if but it's",
    "start": "890879",
    "end": "896610"
  },
  {
    "text": "different rather which is reimplemented if as a modular extension and we use touch keywords just because key words in",
    "start": "896610",
    "end": "903809"
  },
  {
    "text": "any language other than English are extremely weird but why not so we want",
    "start": "903809",
    "end": "910319"
  },
  {
    "text": "to write here something like eyelids blah blah blah done blah blah under",
    "start": "910319",
    "end": "915449"
  },
  {
    "text": "thread that's I think what it would be called in Dutch but if then else has done under right okay so Google Translate did a good job",
    "start": "915449",
    "end": "923870"
  },
  {
    "text": "so I already prepared an empty new",
    "start": "923870",
    "end": "928949"
  },
  {
    "text": "language and an empty new solution where I will put the interpreter to make all",
    "start": "928949",
    "end": "934500"
  },
  {
    "text": "of this run I did that because it's boring right you just use a bunch of menu items to create new languages and",
    "start": "934500",
    "end": "940350"
  },
  {
    "text": "stuff so I don't have to show this here we'll out of time anyway so let's create a new language concept which I'll call",
    "start": "940350",
    "end": "946500"
  },
  {
    "text": "the earth it's done under expression right",
    "start": "946500",
    "end": "953220"
  },
  {
    "text": "everything is an expression comment left because it's functional language mostly so okay I can do this now the way you",
    "start": "953220",
    "end": "961680"
  },
  {
    "text": "build something that is modular but can still be used in another language is use",
    "start": "961680",
    "end": "967800"
  },
  {
    "text": "simple object-oriented polymorphism right so you know that here Colonel F",
    "start": "967800",
    "end": "973199"
  },
  {
    "text": "expects expressions because Colonel F expression expects expressions essentially everywhere so in order to to",
    "start": "973199",
    "end": "979320"
  },
  {
    "text": "make the ID stand and those thing be able to plug here you have to inherit from expression simple object",
    "start": "979320",
    "end": "986040"
  },
  {
    "text": "orientation right so I've put expression here but captured expression expression",
    "start": "986040",
    "end": "992940"
  },
  {
    "text": "isn't visible why well I've just defined a new language that has no relationship to any other language so I can't inherit",
    "start": "992940",
    "end": "999630"
  },
  {
    "text": "from the expression concept that comes from the kernel F language right it's not visible so what I'm going to do is",
    "start": "999630",
    "end": "1004940"
  },
  {
    "text": "I'm going to say that my new language here extends the expression language",
    "start": "1004940",
    "end": "1010339"
  },
  {
    "text": "that the language that defines expressions in kernel F and that language is blah blah blah core base",
    "start": "1010339",
    "end": "1017470"
  },
  {
    "text": "here this is actually the package for the kernel F expression lives for historic reasons it's called IAT is 3",
    "start": "1017470",
    "end": "1024709"
  },
  {
    "text": "that was the name of the research project it's a shitty name that will changed at at some point actually something that MPs isn't very good at",
    "start": "1024709",
    "end": "1031490"
  },
  {
    "text": "its renaming languages so that's why it still has this name so and I say I'm",
    "start": "1031490",
    "end": "1037640"
  },
  {
    "text": "going to extend this language which allows me to put expression here as",
    "start": "1037640",
    "end": "1044058"
  },
  {
    "text": "something from which I inherit and why doesn't it work so this is careful this",
    "start": "1044059",
    "end": "1052400"
  },
  {
    "text": "is expression from base language right based language is JetBrains this version",
    "start": "1052400",
    "end": "1059870"
  },
  {
    "text": "of Java it also has an expression if I make my thing inherit from this one then that's the wrong expression so I'm",
    "start": "1059870",
    "end": "1067100"
  },
  {
    "text": "actually slightly surprised why I don't see oh yeah because it's the wrong",
    "start": "1067100",
    "end": "1072950"
  },
  {
    "text": "language",
    "start": "1072950",
    "end": "1075309"
  },
  {
    "text": "core expression base that's the one",
    "start": "1078769",
    "end": "1086450"
  },
  {
    "text": "you notice that I didn't explicitly explained the NPS based language so I",
    "start": "1089520",
    "end": "1097620"
  },
  {
    "text": "think it's a back that it's visible here JetBrains thinks it's a feature we couldn't agree maybe you can vote",
    "start": "1097620",
    "end": "1104010"
  },
  {
    "text": "somewhere for something all right so now we have the ads done and those expression and I want to the syntax for",
    "start": "1104010",
    "end": "1110910"
  },
  {
    "text": "that thing for now I'll just define it as is which is like the leading keyword right so I",
    "start": "1110910",
    "end": "1116400"
  },
  {
    "text": "go into the editor definition and define an editor which is just a LS I'm",
    "start": "1116400",
    "end": "1121920"
  },
  {
    "text": "combining compiling this thing so now we generate a language implementation which is Java code that's then dynamically",
    "start": "1121920",
    "end": "1127680"
  },
  {
    "text": "loaded from MPs and I can now go into my example program here and what should I",
    "start": "1127680",
    "end": "1133860"
  },
  {
    "text": "be able to do can I use the Al's",
    "start": "1133860",
    "end": "1139650"
  },
  {
    "text": "though oh yes I already have to import all right I want you to make this point that you can only use a language",
    "start": "1139650",
    "end": "1146760"
  },
  {
    "text": "extension if you import that particular new language into your program right and",
    "start": "1146760",
    "end": "1152670"
  },
  {
    "text": "it seems I forgot to delete that particular import after I did my test run yeah there is the language already",
    "start": "1152670",
    "end": "1159570"
  },
  {
    "text": "so that shouldn't have been there for demo purposes and now I would have edited right it's already there okay so",
    "start": "1159570",
    "end": "1165390"
  },
  {
    "start": "1164000",
    "end": "1290000"
  },
  {
    "text": "anyway I can put the islets here not surprising also not very useful but it kind of structurally works so how",
    "start": "1165390",
    "end": "1172050"
  },
  {
    "text": "does the it's done under sting look structurally in terms of syntax tree what other children does this thing have",
    "start": "1172050",
    "end": "1178650"
  },
  {
    "text": "well it has a condition right which is the expression exactly one and then we",
    "start": "1178650",
    "end": "1186690"
  },
  {
    "text": "have the then part that would be the done right so I'm going all out on touch",
    "start": "1186690",
    "end": "1191700"
  },
  {
    "text": "here right I'm not only going to make the concrete syntax touch but also the names of the language definition",
    "start": "1191700",
    "end": "1196830"
  },
  {
    "text": "elements so no be very sophisticated so it's plenty another expression and then",
    "start": "1196830",
    "end": "1202800"
  },
  {
    "text": "the unders right also an expression okay",
    "start": "1202800",
    "end": "1208290"
  },
  {
    "text": "so how does the editor look well the editor simply puts these things into a",
    "start": "1208290",
    "end": "1215220"
  },
  {
    "text": "collection right so arts and then I embed the condition that's not very Dutch I just noticed",
    "start": "1215220",
    "end": "1222130"
  },
  {
    "text": "then the keyword done and I put the expression that represents the then part",
    "start": "1222130",
    "end": "1228070"
  },
  {
    "text": "and I put the under s key word and the remaining expression okay I'm compiling",
    "start": "1228070",
    "end": "1233170"
  },
  {
    "text": "this going back to the example and you can see that the existing code changed",
    "start": "1233170",
    "end": "1240880"
  },
  {
    "text": "how it looked why is that well NPS uses a projection Aletta tur you don't type stuff which is",
    "start": "1240880",
    "end": "1248470"
  },
  {
    "text": "then parsed into a tree and then processed rather every editing activity directly changes the tree and then there",
    "start": "1248470",
    "end": "1256660"
  },
  {
    "text": "is a projection engine almost like a Model View controller thing that shows it in whatever editor you define and if",
    "start": "1256660",
    "end": "1262300"
  },
  {
    "text": "you already have an instance of something in your tree and you change the editor well then you change the look",
    "start": "1262300",
    "end": "1267370"
  },
  {
    "text": "of existing programs whether this is good or bad depends on what you do with it right but that's how it works so I",
    "start": "1267370",
    "end": "1275050"
  },
  {
    "text": "can now put code here like for example a plus 3 then I think we can already do",
    "start": "1275050",
    "end": "1284050"
  },
  {
    "text": "something useful greeting plus s adults an empty string you notice that we can",
    "start": "1284050",
    "end": "1291520"
  },
  {
    "text": "already put all expressions that are already there in this language here right so we just said that the condition",
    "start": "1291520",
    "end": "1297790"
  },
  {
    "text": "then and else part of our new language concept are expressions any expression so I can already use the argument",
    "start": "1297790",
    "end": "1303960"
  },
  {
    "text": "reference expression or the plus expression here without any other thing",
    "start": "1303960",
    "end": "1309130"
  },
  {
    "text": "notice that these come from a different language right so I've already done two kinds of composition compositions I've",
    "start": "1309130",
    "end": "1314230"
  },
  {
    "text": "embedded my new thing into kernel F and I've used stuff from Colonel F which I've been embedded into my new thing",
    "start": "1314230",
    "end": "1319720"
  },
  {
    "text": "without any parser ambiguity issues or something so structurally this looks",
    "start": "1319720",
    "end": "1325420"
  },
  {
    "text": "good but of course from a type system perspective that's wrong because we expect this to be boolean and we didn't",
    "start": "1325420",
    "end": "1333460"
  },
  {
    "text": "say that anywhere so we don't get an error right now so we can put the plus and nobody cares I mean the type system",
    "start": "1333460",
    "end": "1339340"
  },
  {
    "text": "doesn't care so let's fix that right so we're gonna go into the language definition again and add a type system",
    "start": "1339340",
    "end": "1345370"
  },
  {
    "text": "rule an inference rule for the it's done under expression when we say that the",
    "start": "1345370",
    "end": "1350770"
  },
  {
    "text": "type of the adds done and those expressions condition must be boolean now there is a little",
    "start": "1350770",
    "end": "1360330"
  },
  {
    "text": "particularity about colonel F which is that it has replaceable primitive types",
    "start": "1360330",
    "end": "1365680"
  },
  {
    "text": "you can plug in your own primitive types domain-specific primitive types into the existing expression language and that's",
    "start": "1365680",
    "end": "1371650"
  },
  {
    "text": "why I'm not just like writing an instance of the boolean type here but",
    "start": "1371650",
    "end": "1376990"
  },
  {
    "text": "I'm actually going to use the primitive type Factory and I asked it to create a",
    "start": "1376990",
    "end": "1382630"
  },
  {
    "text": "boolean type but what this is here is an equation right it says for the type system to be correct the type of the",
    "start": "1382630",
    "end": "1390010"
  },
  {
    "text": "condition must be the same or a subtype of the kind of literal boolean type okay",
    "start": "1390010",
    "end": "1397990"
  },
  {
    "text": "so let's see if this works going back here press f5 to reach rigor",
    "start": "1397990",
    "end": "1404770"
  },
  {
    "text": "the type system and now I get an error right and interestingly it already figured out that the type of this thing",
    "start": "1404770",
    "end": "1409990"
  },
  {
    "text": "here is a number between 2 and 102 because it knows that the a is between 0",
    "start": "1409990",
    "end": "1415840"
  },
  {
    "text": "and 100 and if I add 2 it's going to be a differently structured interval we don't do this static arrange calculation",
    "start": "1415840",
    "end": "1422950"
  },
  {
    "text": "for every program because that would require a fully dependent type system which is slightly beyond my capabilities",
    "start": "1422950",
    "end": "1430060"
  },
  {
    "text": "but we do it for enough stuff to be useful all right so let's change this to",
    "start": "1430060",
    "end": "1437370"
  },
  {
    "text": "this and of course to replicate the example from above we should put a 10",
    "start": "1437370",
    "end": "1444010"
  },
  {
    "text": "here ok okay so we have made progress what else do we see here we see that a",
    "start": "1444010",
    "end": "1449770"
  },
  {
    "text": "stupid error message which essentially says you haven't calculated a type for the whole I'd stand otherwise expression",
    "start": "1449770",
    "end": "1458080"
  },
  {
    "text": "right so it doesn't have a type so it can't check whether the type of this whole thing somehow fits to the type of",
    "start": "1458080",
    "end": "1463990"
  },
  {
    "text": "the function if there were one defect defined right I can make the type explicit here and now it's trying to",
    "start": "1463990",
    "end": "1471570"
  },
  {
    "text": "check whether this type is whether this",
    "start": "1471570",
    "end": "1478630"
  },
  {
    "text": "type is a subtype of string but I didn't say anything about how the type of the whole expression derives from other",
    "start": "1478630",
    "end": "1485140"
  },
  {
    "text": "types right so let's let's fix that let's go back to our typing thing here and I'm gonna write",
    "start": "1485140",
    "end": "1492100"
  },
  {
    "text": "the code then I'll explain it so I'm gonna declare a type system variable I'm",
    "start": "1492100",
    "end": "1497500"
  },
  {
    "text": "going to express that T is a super type",
    "start": "1497500",
    "end": "1504100"
  },
  {
    "text": "of the type of the expressions done part",
    "start": "1504100",
    "end": "1509410"
  },
  {
    "text": "and I'm gonna do the same for the understand then I'm going to say type of",
    "start": "1509410",
    "end": "1515680"
  },
  {
    "text": "the whole thing is T so what does this do I said before this is a actual you",
    "start": "1515680",
    "end": "1522490"
  },
  {
    "text": "specified equations right this is not an assignment or a test this is an equation a set of equations that goes into a",
    "start": "1522490",
    "end": "1528370"
  },
  {
    "text": "solver which then tries to figure out the type systems correctness so what I'm gonna say here I'm saying here is I'm",
    "start": "1528370",
    "end": "1533890"
  },
  {
    "text": "defining a variable T and I expressed that this variable T must be the same or a super type of the done part and it",
    "start": "1533890",
    "end": "1541900"
  },
  {
    "text": "must also be it's just a second constraint must also be the same or",
    "start": "1541900",
    "end": "1547000"
  },
  {
    "text": "super type of the otherwise pub so in other words to satisfy both of these T",
    "start": "1547000",
    "end": "1552490"
  },
  {
    "text": "must be the common super type of the done and the unders expressions right",
    "start": "1552490",
    "end": "1559900"
  },
  {
    "text": "and if they are the same then it's just that same type and then I'm essentially saying that the type of the whole",
    "start": "1559900",
    "end": "1564970"
  },
  {
    "text": "expression is exactly that computed type T so let's compute compile press f5 once",
    "start": "1564970",
    "end": "1572710"
  },
  {
    "text": "and everything's fine because this is now type string because the common super",
    "start": "1572710",
    "end": "1579970"
  },
  {
    "text": "type of that thing and that thing is surprise surprise string okay okay good",
    "start": "1579970",
    "end": "1588640"
  },
  {
    "text": "so let's see what the tests say okay we could look up what actually the test",
    "start": "1588640",
    "end": "1595510"
  },
  {
    "text": "says the test says that there is an exception flow falling being thrown because I haven't yet implemented an",
    "start": "1595510",
    "end": "1602020"
  },
  {
    "text": "interpreter for this thing here right so it doesn't know how to actually execute",
    "start": "1602020",
    "end": "1607330"
  },
  {
    "text": "this right this is only code and a static type check but there's no execution semantics defined so far an",
    "start": "1607330",
    "end": "1613750"
  },
  {
    "text": "NPS by default you define semantics through generation so for example you could generate all of this stuff to Java",
    "start": "1613750",
    "end": "1619420"
  },
  {
    "text": "and then run Java program and in fact we do have a java generator for this Colonel F language because for deployment purposes",
    "start": "1619420",
    "end": "1626050"
  },
  {
    "text": "when you deploy this thing for real it's usually some kind of Java server back-end thing we also have a type",
    "start": "1626050",
    "end": "1632080"
  },
  {
    "text": "script generator almost finished so you can deploy it into the browser and more interestingly in my opinion we have this",
    "start": "1632080",
    "end": "1638980"
  },
  {
    "text": "interpretive framework where you can run these things directly in the IDE which allows your domain expert when they write code in a DSL to directly play",
    "start": "1638980",
    "end": "1646390"
  },
  {
    "text": "with it executes it directly in the tool so you have like a serial turnaround time without any deployment should",
    "start": "1646390",
    "end": "1651490"
  },
  {
    "text": "further domain person okay so let's implement the interpreter we have an",
    "start": "1651490",
    "end": "1657670"
  },
  {
    "start": "1652000",
    "end": "1818000"
  },
  {
    "text": "interpretive framework here that allows us to do that so we have the let's",
    "start": "1657670",
    "end": "1663460"
  },
  {
    "text": "expression here and so this interpreter works by essentially mapping a piece of",
    "start": "1663460",
    "end": "1669970"
  },
  {
    "text": "syntax tree to a piece of code written in Java so the like that the way to",
    "start": "1669970",
    "end": "1676660"
  },
  {
    "text": "define the semantics of your DSL in this case is to write Java code that does",
    "start": "1676660",
    "end": "1683500"
  },
  {
    "text": "whatever the thing is supposed to do so let's write this Java code so the first thing we have to do is we have to execute we have to evaluate that the",
    "start": "1683500",
    "end": "1689950"
  },
  {
    "text": "condition right so we can do this by recalling the interpreter recursively on D no dot condition so this hash is a",
    "start": "1689950",
    "end": "1702460"
  },
  {
    "text": "shortcut for calling the interpreter again with this new node because you do that all the time it's good to have a shortcut so from that from this comes",
    "start": "1702460",
    "end": "1711190"
  },
  {
    "text": "back a Java object and because we are there's no reason to be defensive here of course you should do check if it's",
    "start": "1711190",
    "end": "1717640"
  },
  {
    "text": "actually a boolean but for now we just say ok we know it's boolean because our type system has already verified that we",
    "start": "1717640",
    "end": "1724000"
  },
  {
    "text": "expect boolean here and actually I think Java does automatic unwrapping and so we",
    "start": "1724000",
    "end": "1729070"
  },
  {
    "text": "can do boolean condition right so this is the evaluated condition and now we can simply say if you know if our",
    "start": "1729070",
    "end": "1735880"
  },
  {
    "text": "if-then-else thing is true else do something else well what do we do in the",
    "start": "1735880",
    "end": "1741520"
  },
  {
    "text": "in the case where the condition is true well we return the evaluation of the",
    "start": "1741520",
    "end": "1748620"
  },
  {
    "text": "done part and otherwise we return the evaluation of the",
    "start": "1748620",
    "end": "1754620"
  },
  {
    "text": "ambos pop right and this just calls recursively the interpreter for whatever",
    "start": "1754620",
    "end": "1759659"
  },
  {
    "text": "expressions already there and I think this should work okay so it works for",
    "start": "1759659",
    "end": "1770070"
  },
  {
    "text": "the den kay photo for the ten case but not for the other one and that's just because I seem to have put an S here",
    "start": "1770070",
    "end": "1777419"
  },
  {
    "text": "which shouldn't be there so now it works okay so we've implemented structure syntax type system semantics in whatever",
    "start": "1777419",
    "end": "1785730"
  },
  {
    "text": "15 minutes including IDE support and including or while making this a modular",
    "start": "1785730",
    "end": "1791610"
  },
  {
    "text": "extension of an existing language we didn't touch the existing language at all we've put that into separate module",
    "start": "1791610",
    "end": "1796919"
  },
  {
    "text": "you could even do this if your existing language were only available as a binary right a compiled plug-in so this really",
    "start": "1796919",
    "end": "1803519"
  },
  {
    "text": "allows language modularity in in the same way and also by the way with the same patterns as object-oriented",
    "start": "1803519",
    "end": "1809399"
  },
  {
    "text": "programming very useful that's how we build many of our dsls by building them",
    "start": "1809399",
    "end": "1814769"
  },
  {
    "text": "on top of existing mostly kernel f abstractions alright surprisingly i'm still on time",
    "start": "1814769",
    "end": "1822590"
  },
  {
    "text": "let's go back to the slides come on so there are other language",
    "start": "1822590",
    "end": "1828960"
  },
  {
    "start": "1827000",
    "end": "1890000"
  },
  {
    "text": "workbenches of course there is a spoof ox from Delft there is rascal from",
    "start": "1828960",
    "end": "1836159"
  },
  {
    "text": "Amsterdam like around the corner on CWI both of them are mostly intended for",
    "start": "1836159",
    "end": "1842490"
  },
  {
    "text": "academic stuff they do really interesting things but I'm not sure they",
    "start": "1842490",
    "end": "1847679"
  },
  {
    "text": "would even suggest to use it in like in practice without some connection to the",
    "start": "1847679",
    "end": "1853350"
  },
  {
    "text": "developers maybe they would say that I don't know but they don't it's mostly used for research then there is X text",
    "start": "1853350",
    "end": "1860159"
  },
  {
    "text": "which you might have heard about which is an eclipse-based textual language workbench that's where I started my",
    "start": "1860159",
    "end": "1867179"
  },
  {
    "text": "textual modeling career after I kind of suffered from UML and other stuff it's",
    "start": "1867179",
    "end": "1873450"
  },
  {
    "text": "nice but NPS is better and then there is the whole platform which can only be",
    "start": "1873450",
    "end": "1878970"
  },
  {
    "text": "used in Italy at least it is only used in Italy two lists by Italians and",
    "start": "1878970",
    "end": "1885630"
  },
  {
    "text": "I don't know I've never seen it used outside of Italy so I guess it's not an option it's an interesting tool there is",
    "start": "1885630",
    "end": "1892230"
  },
  {
    "start": "1890000",
    "end": "1911000"
  },
  {
    "text": "a paper we wrote in 2013 that compares various language work vendors you might want to check this out and get a kind of",
    "start": "1892230",
    "end": "1898410"
  },
  {
    "text": "objective comparison of course the various paragraphs of the different tools were written by the developers of",
    "start": "1898410",
    "end": "1903900"
  },
  {
    "text": "these tools so whatever objective means but it got accepted in a reasonably reputable journal so it must be",
    "start": "1903900",
    "end": "1909960"
  },
  {
    "text": "scientific all right few lessons learned first of all the language is not enough",
    "start": "1909960",
    "end": "1916200"
  },
  {
    "start": "1911000",
    "end": "1987000"
  },
  {
    "text": "right you need of course a language but then you need a good IDE without an IDE languages just aren't useful in my",
    "start": "1916200",
    "end": "1924060"
  },
  {
    "text": "opinion and experience and that's also why many if the internal D results aren't really useful for non-programmers",
    "start": "1924060",
    "end": "1930090"
  },
  {
    "text": "because the IDE doesn't know anything about it sure you can write an IDE plug-in and a compiler plug-in and",
    "start": "1930090",
    "end": "1936030"
  },
  {
    "text": "somehow mash this all together but that's much more work than doing it with a dedicated language workbench analyses",
    "start": "1936030",
    "end": "1942360"
  },
  {
    "text": "good error messages really useful you can really piss off your users if you",
    "start": "1942360",
    "end": "1947580"
  },
  {
    "text": "just have you know symbol not found style error messages not good refactorings there is some as a thing",
    "start": "1947580",
    "end": "1955410"
  },
  {
    "text": "such as refactoring insurance contracts this makes sense to kind of product line",
    "start": "1955410",
    "end": "1961470"
  },
  {
    "text": "if I an existing contract so you should provide these things but then also testing if you're an insurance guy who",
    "start": "1961470",
    "end": "1966780"
  },
  {
    "text": "specifies new insurance product you want to test it because you don't want to be responsible if your company loses",
    "start": "1966780",
    "end": "1972180"
  },
  {
    "text": "millions because you have an arithmetic bug in your contract right and it's actually not a challenge to convince",
    "start": "1972180",
    "end": "1978600"
  },
  {
    "text": "domain experts to become test driven they really want this and of course you want advanced features like debuggers",
    "start": "1978600",
    "end": "1984900"
  },
  {
    "text": "any made or simulated stuff like that influences on the language design in",
    "start": "1984900",
    "end": "1990300"
  },
  {
    "text": "addition to of course the domain structure and the notation that appeals to the people in the domain you have to",
    "start": "1990300",
    "end": "1996210"
  },
  {
    "text": "take into account things like tool capabilities like if you truly can't do graphical editors like X text you can't",
    "start": "1996210",
    "end": "2002030"
  },
  {
    "text": "do it or you have to somehow put gmf into the whole story you have to make",
    "start": "2002030",
    "end": "2007040"
  },
  {
    "text": "sure you don't over stress your users like if you want to have a language with",
    "start": "2007040",
    "end": "2012950"
  },
  {
    "text": "inheritance and contracts and I don't know template method patterns and",
    "start": "2012950",
    "end": "2018720"
  },
  {
    "text": "paalam or dispatch and you try to sell that to insurance experts it's gonna be a tough sell because these more abstract",
    "start": "2018720",
    "end": "2024360"
  },
  {
    "text": "software engineering kind of things are not easily communicated stuff like that",
    "start": "2024360",
    "end": "2030990"
  },
  {
    "start": "2029000",
    "end": "2049000"
  },
  {
    "text": "right and then there is also a matter of style as you can clearly see from this well-designed slide languages can just",
    "start": "2030990",
    "end": "2037799"
  },
  {
    "text": "be ugly like if you mix COBOL style and lisp style probably not a good idea",
    "start": "2037799",
    "end": "2043530"
  },
  {
    "text": "right so there is some yeah it's a matter of taste and experience so how to",
    "start": "2043530",
    "end": "2050280"
  },
  {
    "start": "2049000",
    "end": "2126000"
  },
  {
    "text": "make people precise right how do you make non-programmers do this like write",
    "start": "2050280",
    "end": "2056398"
  },
  {
    "text": "code in all these tiers as I've shown and the first thing you should do is you should convince them that expressing",
    "start": "2056399",
    "end": "2064648"
  },
  {
    "text": "yourself precisely in terms of the domain is not programming right",
    "start": "2064649",
    "end": "2069720"
  },
  {
    "text": "programming is all about these entities the other thing is just writing a precise specification sure you use",
    "start": "2069720",
    "end": "2077250"
  },
  {
    "text": "something like functions or variable definitions but you know this is your",
    "start": "2077250",
    "end": "2082740"
  },
  {
    "text": "first propaganda challenge you have to convince people about that if they aren't convinced already and then the",
    "start": "2082740",
    "end": "2088290"
  },
  {
    "text": "other thing is you have to do some training so we're actually writing right now a tutorial to teach these really",
    "start": "2088290",
    "end": "2095580"
  },
  {
    "text": "fundamental ideas of programming like expressions types references functions",
    "start": "2095580",
    "end": "2101880"
  },
  {
    "text": "parameters stuff like that to teach this very slowly and methodically to non-programmers we start from excel",
    "start": "2101880",
    "end": "2108300"
  },
  {
    "text": "because everybody knows excel and we kind of build on that it's an open-source effort if you want to join",
    "start": "2108300",
    "end": "2113790"
  },
  {
    "text": "and help very welcome and we use that to kind of lay the groundwork for domain",
    "start": "2113790",
    "end": "2120630"
  },
  {
    "text": "experts to then be able to understand and use the particular DSL generally",
    "start": "2120630",
    "end": "2127890"
  },
  {
    "text": "about skills right my organization doesn't know how to build languages we've never used NPS and also it's",
    "start": "2127890",
    "end": "2133800"
  },
  {
    "text": "rocket science because language engineering is computer science I already didn't understand it when I was at university right that's what you hear",
    "start": "2133800",
    "end": "2140280"
  },
  {
    "text": "so the first reply is well there's all these other new things you have no clue",
    "start": "2140280",
    "end": "2145470"
  },
  {
    "text": "about right so what do you do well you build the skills you hire people you get",
    "start": "2145470",
    "end": "2150810"
  },
  {
    "text": "consultants you you buy knowledge whatever not different here right and the other thing I say",
    "start": "2150810",
    "end": "2158070"
  },
  {
    "text": "which is not on the slide is that tools like MPs again while they have their quirks they make language engineering it's not",
    "start": "2158070",
    "end": "2167370"
  },
  {
    "text": "it's not really computer science anymore it's software engineering it's it's just something you do it's like you build a",
    "start": "2167370",
    "end": "2172410"
  },
  {
    "text": "framework right it's it's just a different thing you build and everybody who has some meta you know thinking in",
    "start": "2172410",
    "end": "2180270"
  },
  {
    "text": "their head can do that it's this the next legacy system I'm motivated this",
    "start": "2180270",
    "end": "2186240"
  },
  {
    "start": "2182000",
    "end": "2341000"
  },
  {
    "text": "talk among other things by trying to get rid of a particular implementation technology are we now just you know",
    "start": "2186240",
    "end": "2193680"
  },
  {
    "text": "burying all of this stuff inside weird tools like MPs this is a valid question I think I think no and let me explain",
    "start": "2193680",
    "end": "2203790"
  },
  {
    "text": "why so here's the scenario we have a language workbench in this case MPs and",
    "start": "2203790",
    "end": "2208950"
  },
  {
    "text": "their version wonderful language and we generate that - some kind of runtime they'd say Java code okay now let's say",
    "start": "2208950",
    "end": "2214230"
  },
  {
    "text": "your language changes the language definition changes what do you do with your existing models you have well MPs",
    "start": "2214230",
    "end": "2220500"
  },
  {
    "text": "supports language versioning and automatic migration of existing models so you can meaningfully evolve your",
    "start": "2220500",
    "end": "2227430"
  },
  {
    "text": "language over time even if you already have models in the wild and you can't touch them for explicit manual migration",
    "start": "2227430",
    "end": "2233910"
  },
  {
    "text": "right the tool does that so now the next scenario is what do you do if your runtime changes if you go from Java to",
    "start": "2233910",
    "end": "2240060"
  },
  {
    "text": "typescript because you have to put it into the browser well you just write a new generator that isn't always totally trivial and in very",
    "start": "2240060",
    "end": "2248790"
  },
  {
    "text": "rare cases it's not possible because you have some weird constructor you can map to your target without a huge",
    "start": "2248790",
    "end": "2255330"
  },
  {
    "text": "performance impact that does happen sometimes but it's very rare usually you just invest a few months of writing in",
    "start": "2255330",
    "end": "2261600"
  },
  {
    "text": "generator and these few months really don't count if you have man or person years put into your domain specific",
    "start": "2261600",
    "end": "2267660"
  },
  {
    "text": "models right it's not a very big investment and then of course question number three is what happens if you go",
    "start": "2267660",
    "end": "2273690"
  },
  {
    "text": "from MPs to whatever new kid on the block language workbench how do you migrate that and there the answer is a",
    "start": "2273690",
    "end": "2279750"
  },
  {
    "text": "little bit more abstract but you know your language you have to find it you know the structure you know the",
    "start": "2279750",
    "end": "2284970"
  },
  {
    "text": "semantics and you have everything as a kind of formal instance of that data model so",
    "start": "2284970",
    "end": "2291059"
  },
  {
    "text": "you can always migrate it to the same language defined in the new technology like you exported some kind of XML here",
    "start": "2291059",
    "end": "2298049"
  },
  {
    "text": "and you imported here you know the semantics there is nothing lost there is no burying in Java code it's",
    "start": "2298049",
    "end": "2304229"
  },
  {
    "text": "not it's not like you can't reverse engineer what it means this is a it's maybe hard to appreciate from this like",
    "start": "2304229",
    "end": "2311099"
  },
  {
    "text": "abstract slide but this is a huge difference you don't lose anything right and we've done this example Dutch text",
    "start": "2311099",
    "end": "2318539"
  },
  {
    "text": "agency they have migrated all of their text rules from their proprietary system",
    "start": "2318539",
    "end": "2323789"
  },
  {
    "text": "into MPs they've also migrated the tests and they have run all the existing tests against the new implementation until",
    "start": "2323789",
    "end": "2329700"
  },
  {
    "text": "everything worked so this is possible without prohibitive effort and that's",
    "start": "2329700",
    "end": "2335009"
  },
  {
    "text": "really it that really is a difference to coding this stuff in Java and putting into an AGP JB or something so the",
    "start": "2335009",
    "end": "2342989"
  },
  {
    "start": "2341000",
    "end": "2571000"
  },
  {
    "text": "answer is no so how does all of this relate to agile that's another thing I",
    "start": "2342989",
    "end": "2348059"
  },
  {
    "text": "hear right well we do agile stuff here we do DDD we give our classes names that correspond to the domain that's good",
    "start": "2348059",
    "end": "2354509"
  },
  {
    "text": "enough I think that's total nonsense so let me point out how this looks so there are",
    "start": "2354509",
    "end": "2361140"
  },
  {
    "text": "two scenarios scenario one you have one project in which you develop a language",
    "start": "2361140",
    "end": "2366180"
  },
  {
    "text": "and some other code that uses the language in the same project right and then the other scenario is you already",
    "start": "2366180",
    "end": "2373380"
  },
  {
    "text": "have you have a project that develops the language and then you have many projects that use the language like you",
    "start": "2373380",
    "end": "2379319"
  },
  {
    "text": "built this I don't know insurance language in your company and then you have different you know health insurance life insurance and other",
    "start": "2379319",
    "end": "2386400"
  },
  {
    "text": "insurance that use that language so let's see how that works oops sorry in terms of process now in the first case",
    "start": "2386400",
    "end": "2391829"
  },
  {
    "text": "this language development inside your project is just exactly as if you were",
    "start": "2391829",
    "end": "2396869"
  },
  {
    "text": "developing a framework or library or a platform like some basic artifacts that other parts of project use there's",
    "start": "2396869",
    "end": "2403440"
  },
  {
    "text": "nothing different except you use a different tool so I don't feel I have to say anything else it's the same thing so in the other case",
    "start": "2403440",
    "end": "2410339"
  },
  {
    "text": "where you have this one project to build the language and the other projects to",
    "start": "2410339",
    "end": "2416190"
  },
  {
    "text": "use the language well here it's just like a depend see on some third-party thing right if",
    "start": "2416190",
    "end": "2421979"
  },
  {
    "text": "you use whatever package from the web that might change at some point and you have to import that you have to decide",
    "start": "2421979",
    "end": "2427140"
  },
  {
    "text": "do I use the new package version and you have to migrate same thing here if your language team develops a new version of",
    "start": "2427140",
    "end": "2433049"
  },
  {
    "text": "the language they give it a new version they publish it in some kind of artifact thing right repository and you decide if",
    "start": "2433049",
    "end": "2439499"
  },
  {
    "text": "you want to use it and the good thing is if they do it right the new language version ships with migration scripts so",
    "start": "2439499",
    "end": "2446400"
  },
  {
    "text": "this is actually something that's easier than changing a library because libraries and frameworks do not ship",
    "start": "2446400",
    "end": "2452700"
  },
  {
    "text": "with migration scripts languages do or at least can write so this isn't something that makes you less agile and",
    "start": "2452700",
    "end": "2459630"
  },
  {
    "text": "then of course number three once you have defined your language and now you",
    "start": "2459630",
    "end": "2465269"
  },
  {
    "text": "have a DSL where insurance people can define and test and experiment with new product definitions themselves in real",
    "start": "2465269",
    "end": "2472469"
  },
  {
    "text": "time without a lengthy you know let's implement this manually this is what actually enables business agility I",
    "start": "2472469",
    "end": "2480509"
  },
  {
    "text": "think there is no other technology that that that allows you to do that in this way so there I don't even understand the",
    "start": "2480509",
    "end": "2487680"
  },
  {
    "text": "question and then the language definition itself you have seen how",
    "start": "2487680",
    "end": "2493499"
  },
  {
    "text": "little code I had to write to implement this thing of course for more",
    "start": "2493499",
    "end": "2499049"
  },
  {
    "text": "semantically rich languages it can be more work but still I have this quote from one of my customers like I've",
    "start": "2499049",
    "end": "2505140"
  },
  {
    "text": "opened mps and and looked at the language definition I was wondering where the code was because you only saw",
    "start": "2505140",
    "end": "2510299"
  },
  {
    "text": "these like five things you know that the structure the editor to type system and interpret he was wondering where's the",
    "start": "2510299",
    "end": "2516029"
  },
  {
    "text": "actual meat and there isn't any because that's all you have to do so once you master NPS which is admittedly quite a",
    "start": "2516029",
    "end": "2523170"
  },
  {
    "text": "bit of a learning curve you have a very powerful tool at your hand on the kind of meta level and the way I develop",
    "start": "2523170",
    "end": "2530369"
  },
  {
    "text": "languages literally is I sit together with the domain expert code a little language turn around the laptop and let",
    "start": "2530369",
    "end": "2535920"
  },
  {
    "text": "them try it out I do this for like an hour like the iterations one hour understand a bit about the domain build",
    "start": "2535920",
    "end": "2541920"
  },
  {
    "text": "a bit of language let them try out I do this three or four times in a day and then I go home and clean things up you",
    "start": "2541920",
    "end": "2547829"
  },
  {
    "text": "know sometimes you take shortcuts here you know and next day I come back or if",
    "start": "2547829",
    "end": "2553199"
  },
  {
    "text": "you so it's an extremely agile process in fact building a language in my opinion is the best way to understand a domain",
    "start": "2553199",
    "end": "2560730"
  },
  {
    "text": "because in contrast to just drawing UML diagrams that represent domain concepts you can actually play with this and",
    "start": "2560730",
    "end": "2566790"
  },
  {
    "text": "instantiate it which is much more useful than just pictures all right what about",
    "start": "2566790",
    "end": "2572700"
  },
  {
    "start": "2571000",
    "end": "2644000"
  },
  {
    "text": "continuous integration well just like always right so you let your domain",
    "start": "2572700",
    "end": "2578340"
  },
  {
    "text": "expert understand the world right the models run the tests in the language workbench directly then you somehow",
    "start": "2578340",
    "end": "2585060"
  },
  {
    "text": "commit this onto some kind of I'm done branch and they're on the build server",
    "start": "2585060",
    "end": "2590850"
  },
  {
    "text": "you run the same tests if they fail you go back to here then you generate on the build server for example the Java",
    "start": "2590850",
    "end": "2597300"
  },
  {
    "text": "representation of your code and you also generate the tests and then you run the tests again on the generated code so",
    "start": "2597300",
    "end": "2603930"
  },
  {
    "text": "this is how you align the semantics of the interpreter and your generator if you have sufficient tests as useful as",
    "start": "2603930",
    "end": "2610440"
  },
  {
    "text": "usual and then once you've generated the artifacts you combine that with whatever framework code you have create some kind",
    "start": "2610440",
    "end": "2616410"
  },
  {
    "text": "of deployment package and go to staging and then to live deployment all of this is no different than any other automated",
    "start": "2616410",
    "end": "2624200"
  },
  {
    "text": "development step NPS can be run from the command line you know no problem well",
    "start": "2624200",
    "end": "2629820"
  },
  {
    "text": "actually a bit of a problem because the way to set this up is a bit annoying like just in terms of the details you",
    "start": "2629820",
    "end": "2635340"
  },
  {
    "text": "have to configure but otherwise this works well we have all our languages all our customer projects all running on CI",
    "start": "2635340",
    "end": "2642090"
  },
  {
    "text": "as you would expect so this brings us to the wrap up I have a few more things I",
    "start": "2642090",
    "end": "2649050"
  },
  {
    "start": "2644000",
    "end": "2924000"
  },
  {
    "text": "want to mention one I have another session tomorrow somebody else dropped out so I'm the kind of replacement",
    "start": "2649050",
    "end": "2655470"
  },
  {
    "text": "speaker in the blockchains track and I'm going to talk not really about clock chains but about how to actually",
    "start": "2655470",
    "end": "2661110"
  },
  {
    "text": "implement contracts like as in real contracts with or without block chains",
    "start": "2661110",
    "end": "2666300"
  },
  {
    "text": "and I of course use a bit of DSL here so if you're interested in this you might want to join this same time tomorrow a",
    "start": "2666300",
    "end": "2672870"
  },
  {
    "text": "different room also there is another paper that I want you to want to point",
    "start": "2672870",
    "end": "2678090"
  },
  {
    "text": "you to we have capture so as I told you we've implemented this and better thing right these extensions to see for years",
    "start": "2678090",
    "end": "2685110"
  },
  {
    "text": "and we have written 46 page paper where we discuss",
    "start": "2685110",
    "end": "2690400"
  },
  {
    "text": "in painstaking detail all the good and bad experiences we've had doing this like things like performance learn",
    "start": "2690400",
    "end": "2697029"
  },
  {
    "text": "ability of mps everything you can think of so this is a I think relatively",
    "start": "2697029",
    "end": "2702160"
  },
  {
    "text": "objective account of maybe one of the biggest DSL development projects out",
    "start": "2702160",
    "end": "2710739"
  },
  {
    "text": "there certainly with MPs also I don't know of another tool that built a",
    "start": "2710739",
    "end": "2715779"
  },
  {
    "text": "similar ecosystem of languages so this is I think a really good kind of reality",
    "start": "2715779",
    "end": "2720880"
  },
  {
    "text": "check of what what can be done with these tools alright wrap up separation",
    "start": "2720880",
    "end": "2726130"
  },
  {
    "text": "of concerns is key right separate faculty card from technology otherwise",
    "start": "2726130",
    "end": "2731140"
  },
  {
    "text": "you'll step into the legacy trap dear self can do that they completely",
    "start": "2731140",
    "end": "2736989"
  },
  {
    "text": "separate fastly card from technical concerns they can help integrate domain",
    "start": "2736989",
    "end": "2742539"
  },
  {
    "text": "experts into the development process directly if you build the languages in a way where you can at least do pair",
    "start": "2742539",
    "end": "2747880"
  },
  {
    "text": "programming between a technical guy in a domain expert and over time they'll do it alone right language workbenches is",
    "start": "2747880",
    "end": "2754150"
  },
  {
    "text": "what enables TS else you should not open up whatever ide and start doing this",
    "start": "2754150",
    "end": "2759249"
  },
  {
    "text": "from scratch like building your own parser and doing everything from scratch it's just too much work and finally yes that's aren't in",
    "start": "2759249",
    "end": "2767499"
  },
  {
    "text": "conflict with the agile you just have to you know think about how you're gonna",
    "start": "2767499",
    "end": "2773529"
  },
  {
    "text": "approach it alright I'm done questions you have to ask questions",
    "start": "2773529",
    "end": "2781359"
  },
  {
    "text": "because I finished five minutes before the tour ended now you have to ask questions thank you very much I very",
    "start": "2781359",
    "end": "2793989"
  },
  {
    "text": "much enjoy to talk I will definitely look into amperes right now I can",
    "start": "2793989",
    "end": "2799359"
  },
  {
    "text": "remember a long time ago I was knee-deep in Common Lisp and close and back then I was thinking about something that you",
    "start": "2799359",
    "end": "2806289"
  },
  {
    "text": "call projections editors I was wondering the if then else statement that she just",
    "start": "2806289",
    "end": "2812650"
  },
  {
    "text": "made can you actually change the editor right now or maybe maybe it takes a bit",
    "start": "2812650",
    "end": "2818739"
  },
  {
    "text": "more time to allow you to project even this if-then-else construction in the editor",
    "start": "2818739",
    "end": "2824240"
  },
  {
    "text": "differently so for example my cursor commands might change depending on",
    "start": "2824240",
    "end": "2830359"
  },
  {
    "text": "whether I'm in the expression or not I don't know what you mean that cursor commands but well for example the",
    "start": "2830359",
    "end": "2837290"
  },
  {
    "text": "mathematical expression would have to change the cursor commands if you want to go and skip down you can even have",
    "start": "2837290",
    "end": "2844130"
  },
  {
    "text": "palettes where you can drag and drop in mathematical symbols yeah I can even build several editors for the same",
    "start": "2844130",
    "end": "2850520"
  },
  {
    "text": "concept and make them switchable so every user can select their own editor yeah so one thing I didn't say that but",
    "start": "2850520",
    "end": "2857569"
  },
  {
    "text": "one thing that changed I mean protection editors have been experimented with in the 70s and 80s but the difference from back then to now",
    "start": "2857569",
    "end": "2865670"
  },
  {
    "text": "is that the editors you define now are actually usable like you can most of the",
    "start": "2865670",
    "end": "2870950"
  },
  {
    "text": "things you can just type linearly and not building the tree explicitly which no but like you don't want to enter plus",
    "start": "2870950",
    "end": "2876170"
  },
  {
    "text": "5 3 right you want to type 5 plus 3 and this this ability actually rests on an",
    "start": "2876170",
    "end": "2882109"
  },
  {
    "text": "extension of MPs we build it's programmer cells it's also open source and this extension repository and this",
    "start": "2882109",
    "end": "2888470"
  },
  {
    "text": "allows you with very little effort to build editors that are very close to text editors for textual notations and",
    "start": "2888470",
    "end": "2894049"
  },
  {
    "text": "of course if you have non-textual annotations like tables or math symbols well then you have buttons and stuff",
    "start": "2894049",
    "end": "2899240"
  },
  {
    "text": "because you can type I mean and nobody expects to be able to type because that's not how you interact with these things very cool I will really check it",
    "start": "2899240",
    "end": "2905990"
  },
  {
    "text": "out thank you very much anybody else",
    "start": "2905990",
    "end": "2913240"
  },
  {
    "text": "okay thank you very much [Applause]",
    "start": "2915380",
    "end": "2924729"
  }
]