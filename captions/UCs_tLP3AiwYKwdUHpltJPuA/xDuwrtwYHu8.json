[
  {
    "start": "0",
    "end": "47000"
  },
  {
    "text": "I'm Katie McCaffrey I'm a distributed systems engineer that's my disco hoodie I program in that sometimes so I work at",
    "start": "4300",
    "end": "11920"
  },
  {
    "text": "the Twitter is currently on infrastructure and platform specifically observability and I just joined in",
    "start": "11920",
    "end": "17770"
  },
  {
    "text": "January and I live in San Francisco prior to that though I spent six six plus years working in our team in",
    "start": "17770",
    "end": "23079"
  },
  {
    "text": "industry on games like Gears of War two and three and then Halo four is the one",
    "start": "23079",
    "end": "28480"
  },
  {
    "text": "that I spent the bulk of my time on building like services and networking and distributed systems that essentially",
    "start": "28480",
    "end": "33610"
  },
  {
    "text": "power a lot of the entertainment experiences that when you turn on your Xbox and start playing that you see so",
    "start": "33610",
    "end": "41019"
  },
  {
    "text": "that's my Twitter and I have a tech blog if you want to talk to me on the Internet I'd do that so feel free okay",
    "start": "41019",
    "end": "47500"
  },
  {
    "text": "like I said I worked at halo I joined in 2010 when 343 Industries was a studio",
    "start": "47500",
    "end": "53800"
  },
  {
    "text": "created inside of Microsoft to take over the Halo franchise from Bungie who decided they want to go make other games",
    "start": "53800",
    "end": "59050"
  },
  {
    "text": "and they just made destiny right so I was like web service dev number two hired in this tiny studio at like 30",
    "start": "59050",
    "end": "65050"
  },
  {
    "text": "people to figure out what we were gonna do with this old halo stack because the original games had services there was like Halo one two three and then reach",
    "start": "65050",
    "end": "71950"
  },
  {
    "text": "and ODST all had additional services to help you play and experience the game but they were you know the way we were",
    "start": "71950",
    "end": "78940"
  },
  {
    "text": "used to building old services where you had the game talking to a static service",
    "start": "78940",
    "end": "84100"
  },
  {
    "text": "that you could just like linearly scale out and then you had one giant sequel database that everything that housed the",
    "start": "84100",
    "end": "89770"
  },
  {
    "text": "source of truth for all of like Halo all of the Halo games and so we realized that that wasn't gonna scale for us when",
    "start": "89770",
    "end": "95980"
  },
  {
    "text": "we looked at what we wanted to do for Halo 4 and the future of the franchise going forward so like we knew or we actually hit",
    "start": "95980",
    "end": "103030"
  },
  {
    "text": "numbers of 1.5 billion games for Halo 4 played and then 11.6 million unique",
    "start": "103030",
    "end": "109150"
  },
  {
    "text": "users and so that wasn't gonna fit on a single giant sequel database anymore so",
    "start": "109150",
    "end": "114700"
  },
  {
    "text": "we ended up going and rewriting all the services and moving to Asura's cloud and we ended up using Azure table store as",
    "start": "114700",
    "end": "121210"
  },
  {
    "text": "our as our largest form of like no sequel storage and so that's a key-value store for those of you who aren't",
    "start": "121210",
    "end": "126520"
  },
  {
    "text": "familiar with it and so now in this world we had this challenge where we had used to do things with transactions on a",
    "start": "126520",
    "end": "133360"
  },
  {
    "text": "single database since we were very used to programming against transactions giant database and that kept our system consistent and that was really nice but",
    "start": "133360",
    "end": "139840"
  },
  {
    "text": "now we no longer had this because all of our data was split across multiple partitions so we decided we thought",
    "start": "139840",
    "end": "145569"
  },
  {
    "text": "really hard about how we're going to do this for me thinking really hard is definitely like going to a bar and reading a bunch of papers and drinking",
    "start": "145569",
    "end": "150790"
  },
  {
    "text": "bourbon but we came across the saga pattern which is a paper that was published in 1987 that I'm going to tell",
    "start": "150790",
    "end": "157180"
  },
  {
    "text": "you guys about and we actually went implemented that so that we could process statistics in sort of a transactional way and I'm using it in",
    "start": "157180",
    "end": "162879"
  },
  {
    "text": "quotations because we are giving up some things if you saw in a house talk we do not have serialize ability we were",
    "start": "162879",
    "end": "169480"
  },
  {
    "text": "giving up some things but it does give us a way to guarantee consistency like from the beginning to the end of the transaction and what to do in failure",
    "start": "169480",
    "end": "175959"
  },
  {
    "text": "scenarios so I'm going to talk to you guys today about sagas give you a little bit of motivation for why we need them",
    "start": "175959",
    "end": "182639"
  },
  {
    "text": "and then we'll talk about the original paper its contribution to the distributed or to the database space",
    "start": "182639",
    "end": "188079"
  },
  {
    "text": "because it actually came out at the database community and then we'll talk about how you do this in a distributed world because it is a little bit different there are additional",
    "start": "188079",
    "end": "194439"
  },
  {
    "text": "challenges and constraints that you need to impose and then we'll talk about how we actually did this in Halo 4 ok so",
    "start": "194439",
    "end": "201729"
  },
  {
    "start": "201000",
    "end": "215000"
  },
  {
    "text": "right like our systems used to be really simple we used to be able to have like an app or a website that talked to a stateless service I talked to this giant",
    "start": "201729",
    "end": "207699"
  },
  {
    "text": "canonical database source of truth and so you got transactions you got serialize ability and acid so right",
    "start": "207699",
    "end": "215859"
  },
  {
    "start": "215000",
    "end": "284000"
  },
  {
    "text": "serialize ability is our guarantee that things look like they sort of happens quench alee at Thomas City is this idea",
    "start": "215859",
    "end": "221650"
  },
  {
    "text": "that it either all happened or it didn't and we do not see the state of things being processed in between consistency",
    "start": "221650",
    "end": "229449"
  },
  {
    "text": "is application level consistency it's not linearize ability consistency but it's basically that our system is still",
    "start": "229449",
    "end": "235060"
  },
  {
    "text": "in a valid state after we have us when we've started the transaction at the end",
    "start": "235060",
    "end": "240189"
  },
  {
    "text": "of the transaction the system is in a valid state in that it either like totally whether the transaction completed or did not isolation is that",
    "start": "240189",
    "end": "247840"
  },
  {
    "text": "these transactions do not affect each other if they are running concurrently and then durability is this idea that",
    "start": "247840",
    "end": "253209"
  },
  {
    "text": "once we've committed something it persists in as long-lived and like we don't lose data so right but now we're",
    "start": "253209",
    "end": "259419"
  },
  {
    "text": "in this world we have service-oriented architectures and micro services and you don't have canonical sources of truth",
    "start": "259419",
    "end": "264969"
  },
  {
    "text": "anymore often when we are writing applications we were interacting with maybe some of our own api's or we are interacting with someone",
    "start": "264969",
    "end": "271670"
  },
  {
    "text": "else's api's and using them and so we actually can not and they all have their own backing stores right so there is no",
    "start": "271670",
    "end": "277490"
  },
  {
    "text": "like one canonical source of truth we don't get transactions anymore we just can't have them and so some ways that",
    "start": "277490",
    "end": "285140"
  },
  {
    "start": "284000",
    "end": "300000"
  },
  {
    "text": "we've tried to solve the distributed transaction problem as two-phase commit so two-phase commit is an atomic commitment protocol and basically it's a",
    "start": "285140",
    "end": "292850"
  },
  {
    "text": "specialized version of consensus protocol so sometimes it's like okay and it's been implemented and done at small",
    "start": "292850",
    "end": "299000"
  },
  {
    "text": "scale and basically I'm gonna go very quickly through it but you have a prepare phase where you'll have a single coordinator the coordinator is very",
    "start": "299000",
    "end": "305150"
  },
  {
    "start": "300000",
    "end": "323000"
  },
  {
    "text": "special in the system he's a single point of failure and he'll propose to all of the resources involved hey we're",
    "start": "305150",
    "end": "311240"
  },
  {
    "text": "going to go do this thing and then all the resources get to vote yes I want to do this thing or no I do not want to do",
    "start": "311240",
    "end": "316850"
  },
  {
    "text": "this thing and the coordinator collects all of the votes",
    "start": "316850",
    "end": "321490"
  },
  {
    "text": "so once the coordinator has received all of the votes we now enter the commit",
    "start": "322750",
    "end": "327830"
  },
  {
    "start": "323000",
    "end": "356000"
  },
  {
    "text": "phase and if everyone has said yes then we say go and do the transaction commit and so that is how they achieve at",
    "start": "327830",
    "end": "333740"
  },
  {
    "text": "Thomas today because everyone is committing at the same time or if anyone says no then they say don't do it right",
    "start": "333740",
    "end": "339680"
  },
  {
    "text": "so there's no like state where you could have the car reserved and not have the hotel reserved in your travel app",
    "start": "339680",
    "end": "345430"
  },
  {
    "text": "everyone at the end must say done in order in a real distributed system so that you can the coordinator can know",
    "start": "345430",
    "end": "351170"
  },
  {
    "text": "what has happened so this is kind of nice and this is actually people use this but it doesn't really scale all",
    "start": "351170",
    "end": "358160"
  },
  {
    "start": "356000",
    "end": "404000"
  },
  {
    "text": "that well and failure conditions you can have up to Oh N squared messages going",
    "start": "358160",
    "end": "363200"
  },
  {
    "text": "through your system your coordinator is once again a single point of failure so if that thing dies at any point during the transaction like it's just aborted",
    "start": "363200",
    "end": "370130"
  },
  {
    "text": "and so the more resources you have the more latency there probably is and you're bounded by the slowest resource",
    "start": "370130",
    "end": "375470"
  },
  {
    "text": "in the system and so therefore that coordinator is a larger chance of failing and there's just sort of reduced throughput through your system because",
    "start": "375470",
    "end": "381530"
  },
  {
    "text": "you're still like holding these locks on these resources as you're operating over them and so that's kind of slow also",
    "start": "381530",
    "end": "387530"
  },
  {
    "text": "it's worth pointing out that none of the large cloud providers implement two-phase commit protocol and they actually specifically say they don't",
    "start": "387530",
    "end": "393290"
  },
  {
    "text": "like azor has a blog post on this because it just doesn't scale well and it's not something that they want you",
    "start": "393290",
    "end": "398930"
  },
  {
    "text": "using their system because they're worried about all of these things okay and then",
    "start": "398930",
    "end": "404759"
  },
  {
    "start": "404000",
    "end": "472000"
  },
  {
    "text": "Google has spanner right this is how they do their distributed databases this is also another paper that came out of",
    "start": "404759",
    "end": "410310"
  },
  {
    "text": "Google I highly recommend going and reading it I'm gonna cover it briefly it also is a great point of challenging",
    "start": "410310",
    "end": "416520"
  },
  {
    "text": "your notion of time because it doesn't really exist or we can't have one logical use of time so spanner is the",
    "start": "416520",
    "end": "423840"
  },
  {
    "text": "way that Google does globally distributed databases and transactions between databases across the world and",
    "start": "423840",
    "end": "430379"
  },
  {
    "text": "the way they sort of make all of this work is they have their to time API and they have GPS and atomic clocks",
    "start": "430379",
    "end": "436500"
  },
  {
    "text": "installed in all the data centers it's also worth pointing out that Google has fiber between all of their data centers so they're not going over in the",
    "start": "436500",
    "end": "442169"
  },
  {
    "text": "network like they're not going over the normal Network that most of us use and so that's much faster and so what this",
    "start": "442169",
    "end": "449819"
  },
  {
    "text": "true time API does is it takes all of the inputs from the system which includes the GPS and the atomic clocks and then it Cal is able to calculate a",
    "start": "449819",
    "end": "457169"
  },
  {
    "text": "bound of time when this event occurred and so they use that to create a total ordering in the system but they're only getting down to 0 to 7 milliseconds like",
    "start": "457169",
    "end": "464190"
  },
  {
    "text": "it's still not synchronization is not a solved problem they just get it really really tiny window and so it works pretty well so obviously Google spanner",
    "start": "464190",
    "end": "473729"
  },
  {
    "text": "is not available to all of us it is really expensive and it's proprietary so write distributed transactions is not",
    "start": "473729",
    "end": "480719"
  },
  {
    "text": "once again solved for the masses and it's really you know synchronization is not solved so what I'm trying to get at",
    "start": "480719",
    "end": "487169"
  },
  {
    "text": "here is that distributed transactions are really hard and they're really expensive especially if you want serialize ability and acid so can we do",
    "start": "487169",
    "end": "497039"
  },
  {
    "start": "495000",
    "end": "526000"
  },
  {
    "text": "better right can we get distributed transactions with serialize ability an acid well I'm not a researcher I just",
    "start": "497039",
    "end": "504210"
  },
  {
    "text": "build large-scale distributed systems so right now the answer is no we can't because of the cap pyramid we can't have",
    "start": "504210",
    "end": "510960"
  },
  {
    "text": "nice things and distributed systems are terrible but we can start to give up some of these really tough constraints",
    "start": "510960",
    "end": "516599"
  },
  {
    "text": "like serialize ability and acid if what can we give up and still program in this model that we're used to and still have",
    "start": "516599",
    "end": "522448"
  },
  {
    "text": "build correct systems so this is where sagas come in Saugus is",
    "start": "522449",
    "end": "529920"
  },
  {
    "start": "526000",
    "end": "546000"
  },
  {
    "text": "actually from the distributors from the database literature in nineteen seven I was published by Hector Garcia",
    "start": "529920",
    "end": "535649"
  },
  {
    "text": "Molina and Kenneth Salem from Princeton University and it's a paper that is looking at just like how do we do long",
    "start": "535649",
    "end": "542970"
  },
  {
    "text": "live transactions on a single database so they they came across this problem",
    "start": "542970",
    "end": "548519"
  },
  {
    "start": "546000",
    "end": "632000"
  },
  {
    "text": "where if we're doing a transaction that consumes a lot of resources or runs for a really long time like computing a bank",
    "start": "548519",
    "end": "554129"
  },
  {
    "text": "statement or something that has to go through a large range of history that creates a bottleneck on even just a",
    "start": "554129",
    "end": "559889"
  },
  {
    "text": "single database because it's holding locks on a bunch of different resources as it's doing this and so they they",
    "start": "559889",
    "end": "565379"
  },
  {
    "text": "wanted to maybe they knew they couldn't get full acid and serialize ability but they're like what can we do to make this faster and still get some guarantees and",
    "start": "565379",
    "end": "573269"
  },
  {
    "text": "so they came up with this concept of a Saga and they purpose this for long live transactions on a single database so",
    "start": "573269",
    "end": "581759"
  },
  {
    "text": "they defined sagas as a long lived transaction that can be written as a sequence of transactions and these",
    "start": "581759",
    "end": "587220"
  },
  {
    "text": "transactions can be interleaved with one another all transactions of the sequence either complete successfully at the end",
    "start": "587220",
    "end": "593129"
  },
  {
    "text": "of the saga or compensating transactions are ran to amend partial execution so let's break this down so it's a little",
    "start": "593129",
    "end": "599339"
  },
  {
    "text": "bit more understandable right they said a saga is a collection of sub transactions you take whatever the large",
    "start": "599339",
    "end": "605069"
  },
  {
    "text": "thing you want to do and you break it down into these little pieces of transactions and these all transactions can have asset on a single database",
    "start": "605069",
    "end": "610879"
  },
  {
    "text": "concerns the one gotchas they cannot like depend on one another so you get",
    "start": "610879",
    "end": "616800"
  },
  {
    "text": "the interleaving part like t1 cannot take or teach you can't take an input from t1 and they don't have they can't",
    "start": "616800",
    "end": "622170"
  },
  {
    "text": "have any ordering that is supposed to happen for them so if you can break your work into sort of normal system or into",
    "start": "622170",
    "end": "628319"
  },
  {
    "text": "these things then you have as the start of a saga each transaction in the saga",
    "start": "628319",
    "end": "633930"
  },
  {
    "start": "632000",
    "end": "685000"
  },
  {
    "text": "has a compensating transaction and once again the interleaving and the the not being dependent on one one another",
    "start": "633930",
    "end": "640740"
  },
  {
    "text": "principle holds here as well and the thing about these compensating",
    "start": "640740",
    "end": "646050"
  },
  {
    "text": "transactions that they're going to semantically undo the transaction that they correspond to and so the paper",
    "start": "646050",
    "end": "651059"
  },
  {
    "text": "actually acknowledged is that because we're dividing the work into these pieces sometimes you can't you can't",
    "start": "651059",
    "end": "658439"
  },
  {
    "text": "return the system to the same state if you execute a transaction and then you have to compensate for it you may not be able to return to the same state as it",
    "start": "658439",
    "end": "664860"
  },
  {
    "text": "was before the transaction started like for instance if you were gonna send an email like one of your transactions was sending an email you can't unsend",
    "start": "664860",
    "end": "671520"
  },
  {
    "text": "that email but you can't send a follow-up email to say like hey this is what happened and so like we're",
    "start": "671520",
    "end": "678150"
  },
  {
    "text": "correcting it and so it's sort of like this failure management pattern that we're doing okay and then after we",
    "start": "678150",
    "end": "686070"
  },
  {
    "start": "685000",
    "end": "714000"
  },
  {
    "text": "define all of this we have this nice guarantee that either all of the transactions completed so our saga was successful and like whatever unit of",
    "start": "686070",
    "end": "692370"
  },
  {
    "text": "work we wanted to do has finished or some of the transactions have completed and all of the compensating transactions",
    "start": "692370",
    "end": "698130"
  },
  {
    "text": "have ran so the saga failed but we are now back to a semantically consistent state that we were before we started the",
    "start": "698130",
    "end": "703860"
  },
  {
    "text": "saga this is actually a really nice model to program against cuz it's very similar to transactions right like we're",
    "start": "703860",
    "end": "708930"
  },
  {
    "text": "either it we're keeping consistency and application correctness throughout our system so what we did here though is we",
    "start": "708930",
    "end": "715589"
  },
  {
    "start": "714000",
    "end": "735000"
  },
  {
    "text": "traded off atomicity for availability you saw these um these sub transactions are going to execute independent of one",
    "start": "715589",
    "end": "722220"
  },
  {
    "text": "another and so you will see pieces of the saga completing before the whole saga has completed and so if you need",
    "start": "722220",
    "end": "728880"
  },
  {
    "text": "atomicity this doesn't work for you but for a lot of our applications this is okay and then I also really just like",
    "start": "728880",
    "end": "736980"
  },
  {
    "start": "735000",
    "end": "771000"
  },
  {
    "text": "sagas as a whole because they're a failure management pattern and so building distributed systems we should",
    "start": "736980",
    "end": "742740"
  },
  {
    "text": "just plan for everything fail especially if you're in the cloud especially if you don't like own your own networks even if",
    "start": "742740",
    "end": "748860"
  },
  {
    "text": "you own your own networks you should plan for everything to fail and so forcing your application developers to",
    "start": "748860",
    "end": "754020"
  },
  {
    "text": "think about failure as like the first and foremost in your design pattern is gonna help you build more robust systems",
    "start": "754020",
    "end": "759720"
  },
  {
    "text": "and it's gonna help you build more like less fragile systems because you don't just code the Golden Path right you",
    "start": "759720",
    "end": "765900"
  },
  {
    "text": "actually are having to think about like what happens when we go off of the Golden Path okay so how this works in a",
    "start": "765900",
    "end": "772170"
  },
  {
    "start": "771000",
    "end": "794000"
  },
  {
    "text": "single database is if you were gonna do this we're gonna have our travel application you would try and book a",
    "start": "772170",
    "end": "778020"
  },
  {
    "text": "trip and instead of having this one large transaction that would try to reserve all of the things we needed to go on our trip we would split it up into",
    "start": "778020",
    "end": "784860"
  },
  {
    "text": "like these logical units of work like booking a hotel booking a car booking a flight and then cancelling all those",
    "start": "784860",
    "end": "790830"
  },
  {
    "text": "reservations in the case that the saga fails the way this works in a single",
    "start": "790830",
    "end": "796440"
  },
  {
    "start": "794000",
    "end": "815000"
  },
  {
    "text": "database is you have this process called the saga execution coordinator or the SEC the SEC lives in process with",
    "start": "796440",
    "end": "802739"
  },
  {
    "text": "your database and so it sort of shares the same face so we're not in a distributed world just yet but his job",
    "start": "802739",
    "end": "808439"
  },
  {
    "text": "is to go and execute these sub transactions and then in the case of failure start applying compensating",
    "start": "808439",
    "end": "813480"
  },
  {
    "text": "transactions you also have a saw a log that is just like your normal database",
    "start": "813480",
    "end": "818519"
  },
  {
    "start": "815000",
    "end": "832000"
  },
  {
    "text": "log and so it's going to do things like you're going to commit the messages to it like begin saga ends Agha abort saga",
    "start": "818519",
    "end": "825629"
  },
  {
    "text": "and then all the beginning and commit messages for the transactions and compensating transactions and so what",
    "start": "825629",
    "end": "832410"
  },
  {
    "start": "832000",
    "end": "877000"
  },
  {
    "text": "this looks like as you're going through just to give you an idea is if a successful saga would be like I want a book a trip right I'm gonna start my",
    "start": "832410",
    "end": "838529"
  },
  {
    "text": "saga in the log I will start booking the hotel at this point I now own that hotel resource the rest of the world can see",
    "start": "838529",
    "end": "844290"
  },
  {
    "text": "this right we don't have atomicity I'll continue I'll book the car I'll end",
    "start": "844290",
    "end": "849720"
  },
  {
    "text": "booking the car that completed I now have that car resource and then finally if I can get my flight then I can go on",
    "start": "849720",
    "end": "854910"
  },
  {
    "text": "my trip and we can say that we successfully completed the saga with also nice to note here is that in your",
    "start": "854910",
    "end": "862379"
  },
  {
    "text": "application you can order things in the in like a risk centric way so like right sometimes there's penalties with",
    "start": "862379",
    "end": "868019"
  },
  {
    "text": "cancelling a flight so maybe that's the last thing we want to do because I don't want to have to go and roll that back so there is a there is a reason I'm showing",
    "start": "868019",
    "end": "874589"
  },
  {
    "text": "you the ordering in this way okay so what happens when like things fail and things break right we have unsuccessful",
    "start": "874589",
    "end": "880949"
  },
  {
    "start": "877000",
    "end": "901000"
  },
  {
    "text": "sagas and the paper actually discusses a couple different failure modes there's like backwards recovery and forwards recovery and a couple other ones but I'm",
    "start": "880949",
    "end": "886980"
  },
  {
    "text": "gonna talk about backwards recovery because I think it's the most common and the most useful and this is the idea that as soon as we have a failure or or",
    "start": "886980",
    "end": "893579"
  },
  {
    "text": "we can't complete a transaction or something happens we just start rollback and we start applying our compensating transactions for anything that had been",
    "start": "893579",
    "end": "899549"
  },
  {
    "text": "ran so an unsuccessful saga will look like this in the log will begin the saga maybe we start booking the hotel and",
    "start": "899549",
    "end": "905970"
  },
  {
    "start": "901000",
    "end": "963000"
  },
  {
    "text": "that succeeds so we own that reservation and then for whatever reason booking the car will fail because maybe there wasn't",
    "start": "905970",
    "end": "912839"
  },
  {
    "text": "an available rental car that day so now we need to roll back and start applying compensating transactions so you'll",
    "start": "912839",
    "end": "920220"
  },
  {
    "text": "start to apply the compensating transactions it will free any resources that happen to have been taken and then",
    "start": "920220",
    "end": "927059"
  },
  {
    "text": "you'll free the hotel reservation as well and now we're back into semantically the same state",
    "start": "927059",
    "end": "932880"
  },
  {
    "text": "sad because I don't get to on my trip and I can try and rebook later but right like we are still in a consistent state",
    "start": "932880",
    "end": "938880"
  },
  {
    "text": "for application even though we like held on to that hotel resource for a brief period of time now someone else can go",
    "start": "938880",
    "end": "944010"
  },
  {
    "text": "and take it it's just like a normal",
    "start": "944010",
    "end": "953100"
  },
  {
    "text": "transaction a single database so it's the transaction that's asset it either complete successfully or it doesn't abort in a single database is like",
    "start": "953100",
    "end": "959040"
  },
  {
    "text": "someone is canceling it okay so saga is",
    "start": "959040",
    "end": "964470"
  },
  {
    "start": "963000",
    "end": "1026000"
  },
  {
    "text": "in a distributed system the paper actually comments on this and it does my favorite thing that early database literature does where they say due to",
    "start": "964470",
    "end": "970650"
  },
  {
    "text": "space limitations we only discuss it on a centralized system although clearly it can be implemented in a distributed",
    "start": "970650",
    "end": "976080"
  },
  {
    "text": "database and I laughed because this is my life so so thanks dr. Garcia Molina",
    "start": "976080",
    "end": "982980"
  },
  {
    "text": "so we're actually gonna go through and implement this there are blog posts and stuff written about this pattern but I don't like any of them because I don't",
    "start": "982980",
    "end": "988380"
  },
  {
    "text": "actually think they give you enough detail to implement the full guarantee so we're gonna talk about how you",
    "start": "988380",
    "end": "993840"
  },
  {
    "text": "actually do that why it's different in a distributed world and some of the additional restrictions we have to apply in order to like get the same year in T",
    "start": "993840",
    "end": "1001150"
  },
  {
    "text": "so we're back to this world right we are no longer on one canonical database source of truth we are probably",
    "start": "1001150",
    "end": "1006650"
  },
  {
    "text": "operating with a bunch of services that are holding on to different date like using whatever data store they choose to",
    "start": "1006650",
    "end": "1012440"
  },
  {
    "text": "use and applying their own constraints and so this sort of translates really nicely right we can still break the",
    "start": "1012440",
    "end": "1017900"
  },
  {
    "text": "units of work into these like requests a book Hotel book car book flight and then",
    "start": "1017900",
    "end": "1023600"
  },
  {
    "text": "the cancellation requests so so far so good I'm gonna do a little term redefinition because I don't like using the word",
    "start": "1023600",
    "end": "1029270"
  },
  {
    "text": "transaction in the distributed sense because it's not really a transaction it's generally gonna be a request it's",
    "start": "1029270",
    "end": "1034310"
  },
  {
    "text": "also a transaction applies asset semantics to me and you can get like",
    "start": "1034310",
    "end": "1039589"
  },
  {
    "text": "these requests could be acid if that service like gave you that guarantee but it's really up to the service to define",
    "start": "1039589",
    "end": "1045620"
  },
  {
    "text": "what guarantee you have here so I hopefully they give you like consistency",
    "start": "1045620",
    "end": "1051350"
  },
  {
    "text": "and durability you're probably not going to get isolation or atomicity from any of these okay maybe depends on what your API you're",
    "start": "1051350",
    "end": "1058010"
  },
  {
    "text": "interacting with so and so you still have your sub requests as well right they're gonna semantically undo the",
    "start": "1058010",
    "end": "1063080"
  },
  {
    "text": "requests that are happening so the successful distributed saga looks exactly the same and we still have",
    "start": "1063080",
    "end": "1069080"
  },
  {
    "start": "1065000",
    "end": "1071000"
  },
  {
    "text": "our log we still need a log but now it's not co-located with a database because we don't have a single database so we have",
    "start": "1069080",
    "end": "1075289"
  },
  {
    "start": "1071000",
    "end": "1085000"
  },
  {
    "text": "to have a durable and distributed log that lives somewhere so this might be Kafka as your service bus or like whatever you want to use it just needs",
    "start": "1075289",
    "end": "1082789"
  },
  {
    "text": "to function as a log you still need a Saga execution coordinator this is once again I process",
    "start": "1082789",
    "end": "1088549"
  },
  {
    "start": "1085000",
    "end": "1118000"
  },
  {
    "text": "and it doesn't live co-located with anything it's not special I want to point out that this thing is not special",
    "start": "1088549",
    "end": "1094309"
  },
  {
    "text": "does not like our coordinator and two-phase commit it can die it has no state it doesn't do anything special all of our sources of truth is still in that",
    "start": "1094309",
    "end": "1100370"
  },
  {
    "text": "log so sorry execution coordinator is this process that's going to interpret and write two saga logs it'll apply our",
    "start": "1100370",
    "end": "1107030"
  },
  {
    "text": "saga sub requests and then in the case of failure it'll decide when it needs to start applying compensating requests so",
    "start": "1107030",
    "end": "1113990"
  },
  {
    "text": "let's walk through what this looks like because things are a little different now I'll have our service that will",
    "start": "1113990",
    "end": "1119360"
  },
  {
    "start": "1118000",
    "end": "1200000"
  },
  {
    "text": "commit a message to our saga log to say I want to start a saga a large unit of work it can commit a bunch of data to",
    "start": "1119360",
    "end": "1125480"
  },
  {
    "text": "this log these are not just like start and commit messages now they can commit everything that I need to know to process this request a saga execution",
    "start": "1125480",
    "end": "1133309"
  },
  {
    "text": "coordinator can be spun up or will be there to see that I need to start processing this saga and and then it'll",
    "start": "1133309",
    "end": "1140390"
  },
  {
    "text": "start reading the saga and figuring out what it needs to do it'll first start by committing a",
    "start": "1140390",
    "end": "1145610"
  },
  {
    "text": "message to the log that says I'm gonna do the first request in the saga and that has to commit successfully before it can do anything else it's then going",
    "start": "1145610",
    "end": "1152870"
  },
  {
    "text": "to send a request to the service responsible for handling that and then once that responds it will commit a that",
    "start": "1152870",
    "end": "1158630"
  },
  {
    "text": "I finished the saga message to the log so I walked through this fairly slowly to show you that now we have like four",
    "start": "1158630",
    "end": "1164870"
  },
  {
    "text": "additional points of failure that we did not have when we were on a single database where everything was co-located",
    "start": "1164870",
    "end": "1169909"
  },
  {
    "text": "and like essentially if it crashed every the sec the log and all of these like transactions shared the same fate so we",
    "start": "1169909",
    "end": "1176510"
  },
  {
    "text": "have a bunch of places where things can now fail again so we'll walk through like it sort of does the same thing",
    "start": "1176510",
    "end": "1181789"
  },
  {
    "text": "it'll commit the message to the log for the second request and then it will make the request it will receive the response",
    "start": "1181789",
    "end": "1187580"
  },
  {
    "text": "and then we'll commit the message to a log and then the same with the third it'll commit the message send the request receive a response and end the",
    "start": "1187580",
    "end": "1194360"
  },
  {
    "text": "saga this is a successful saga and it still sort of all works the same and like life is good",
    "start": "1194360",
    "end": "1199460"
  },
  {
    "text": "so what happens when things fail when do we need to start applying these compensating requests right we still can",
    "start": "1199460",
    "end": "1205370"
  },
  {
    "start": "1200000",
    "end": "1413000"
  },
  {
    "text": "have this idea of an aborted saga our response like the services could say no I'm not going to do this thing for you because I just can't or they could say",
    "start": "1205370",
    "end": "1212510"
  },
  {
    "text": "like I'm not available as a service or they could say things like you don't have access to do this these start",
    "start": "1212510",
    "end": "1220160"
  },
  {
    "text": "requests fail right so this could be like whatever HTTP or failure response if there was a service it's not there",
    "start": "1220160",
    "end": "1225530"
  },
  {
    "text": "and then in some cases if that sec crashes we might have to start compensating actions because these",
    "start": "1225530",
    "end": "1231740"
  },
  {
    "text": "requests we have not applied any additional constraints on there they don't have to be idempotent there's nothing special about them you can do",
    "start": "1231740",
    "end": "1237830"
  },
  {
    "text": "whatever you want with them and we'll talk more about the sec crashes in a second so what happens here let's walk",
    "start": "1237830",
    "end": "1245420"
  },
  {
    "text": "through like a failure case so we've done the first thing we've attained whatever the first request is successfully I've now started the second",
    "start": "1245420",
    "end": "1252590"
  },
  {
    "text": "request and the service says no I'm not going to do this I want you to abort the saga or it gets a failure message and",
    "start": "1252590",
    "end": "1257960"
  },
  {
    "text": "the SEC will then commit an abort saga message to the log so now we know that we're in rollback right we need to start",
    "start": "1257960",
    "end": "1264890"
  },
  {
    "text": "applying the compensating transactions or requests sorry so what it will do is",
    "start": "1264890",
    "end": "1271640"
  },
  {
    "text": "it'll do the same thing like it's replying the regular request it will commit the start message to the log it will send the start compensating request",
    "start": "1271640",
    "end": "1277490"
  },
  {
    "text": "to the service it will hopefully succeed and then it will commit the message to the log and then the same thing with the",
    "start": "1277490",
    "end": "1284330"
  },
  {
    "text": "third one because it's just reading the log to understand that like oh I still to apply the conference any requests for service one as well so that's great and",
    "start": "1284330",
    "end": "1291500"
  },
  {
    "text": "now we still sort of have the same kind of a guarantee we had but what if compensating requests fail right now",
    "start": "1291500",
    "end": "1297890"
  },
  {
    "text": "we're in this world where there were no they're not transactional what if they fail so because they can fail we need to",
    "start": "1297890",
    "end": "1304340"
  },
  {
    "text": "be able to retry them indefinitely until they succeed and so this poses an extra constraint that we didn't have in the",
    "start": "1304340",
    "end": "1309800"
  },
  {
    "text": "database world on our system which our compensating requests have to be idempotent I have to be able to replay them until they succeed so this is a",
    "start": "1309800",
    "end": "1317480"
  },
  {
    "text": "little bit different than in the in the normal single database case okay and",
    "start": "1317480",
    "end": "1323840"
  },
  {
    "text": "then finally what happens when our FEC fails like I've said this guy isn't this this lytic process is not special we can",
    "start": "1323840",
    "end": "1329990"
  },
  {
    "text": "just spin up another one too continue whatever happens like it doesn't even have to be on the same machine we had to determine whether the",
    "start": "1329990",
    "end": "1336800"
  },
  {
    "text": "SEC was in it or the saga was in a safe state when the SEC crashed it or not and so a safe State is that all the sub",
    "start": "1336800",
    "end": "1342260"
  },
  {
    "text": "requests are complete so you have the start and end both logged because at that point we know like we know what",
    "start": "1342260",
    "end": "1347930"
  },
  {
    "text": "happened we just left off somewhere and we can just continue picking up with the saga wherever it left off and then if",
    "start": "1347930",
    "end": "1354290"
  },
  {
    "text": "you're in an aborted state because compensating requests are idempotent we know we can just keep replaying them",
    "start": "1354290",
    "end": "1359360"
  },
  {
    "text": "even if I committed to start one I just send it again and so that's a safe state as well where we have to start applying",
    "start": "1359360",
    "end": "1366350"
  },
  {
    "text": "rollback as when we get into this case of uncertainty of is did we start a request and we don't have the end",
    "start": "1366350",
    "end": "1372920"
  },
  {
    "text": "request logged because I don't know if it crashed before I even sent the request I don't know if it crashed",
    "start": "1372920",
    "end": "1378050"
  },
  {
    "text": "because it got a response back and then crashed like I don't know the state of like whether the service even saw this but it's not safe to replay that request",
    "start": "1378050",
    "end": "1384380"
  },
  {
    "text": "because we haven't put any additional constraints on them if in your system you can also make your normal request",
    "start": "1384380",
    "end": "1389510"
  },
  {
    "text": "item potent you can just you never have to worry about SEC recovery like you just bring it back up and start reprocessing but I think like making all",
    "start": "1389510",
    "end": "1395990"
  },
  {
    "text": "requests idempotent is a tall order to impose on like your normal method of execution and so what happens is you",
    "start": "1395990",
    "end": "1403490"
  },
  {
    "text": "just committed an abort saga message to log if you if the SEC comes back up in an unsafe State and you start the",
    "start": "1403490",
    "end": "1409040"
  },
  {
    "text": "compensating requests okay so essentially what we've done here we",
    "start": "1409040",
    "end": "1415250"
  },
  {
    "start": "1413000",
    "end": "1439000"
  },
  {
    "text": "have to define some request messaging semantics on top of on top of like these",
    "start": "1415250",
    "end": "1420440"
  },
  {
    "text": "requests so we're gonna define an eSATA or sub requests are at most once they will get delivered zero or one time and",
    "start": "1420440",
    "end": "1426470"
  },
  {
    "text": "then our compensating requests are at least once so they will get delivered at least one or more time in the system and",
    "start": "1426470",
    "end": "1431810"
  },
  {
    "text": "so that's you need to know that when you're designing your saga to make sure that the systems that you're making these requests on can handle that but",
    "start": "1431810",
    "end": "1438920"
  },
  {
    "text": "now we're back at this world where we have the same saga guarantee that we did in no single database and that's really great right because now I know that",
    "start": "1438920",
    "end": "1445970"
  },
  {
    "start": "1439000",
    "end": "1461000"
  },
  {
    "text": "either my whole saga has completed and I'm in a semantically consistent state for my application or my whole saga has",
    "start": "1445970",
    "end": "1452150"
  },
  {
    "text": "not completed and I'm still in a semantically consistent state for my application and so that's a big win to be able to program with these bounds",
    "start": "1452150",
    "end": "1460150"
  },
  {
    "text": "okay so just to sort of recap distributed sagas they're very similar to the single one except for now you",
    "start": "1460410",
    "end": "1465870"
  },
  {
    "start": "1461000",
    "end": "1495000"
  },
  {
    "text": "need a distributed durable saga log and you can use whatever thing you like you need an FCC process he's not special but",
    "start": "1465870",
    "end": "1472170"
  },
  {
    "text": "you do need something that will like continually spin it up and make sure that it's running and then you need these compensating or comments any",
    "start": "1472170",
    "end": "1477570"
  },
  {
    "text": "requests now have to be idempotent so that's that's different but I think it that's okay and I don't think up too tall of an order for us as application",
    "start": "1477570",
    "end": "1483270"
  },
  {
    "text": "developers because like if you think about like restful services like post is",
    "start": "1483270",
    "end": "1488430"
  },
  {
    "text": "not or like delete is idempotent right or semantically it's supposed to be idempotent",
    "start": "1488430",
    "end": "1494030"
  },
  {
    "text": "okay so let's go back to this guy this is the Master Chief he's the main character of the Halo",
    "start": "1494360",
    "end": "1500670"
  },
  {
    "start": "1495000",
    "end": "1520000"
  },
  {
    "text": "series in Halo 4 and like I said before when we started looking at how to move",
    "start": "1500670",
    "end": "1505800"
  },
  {
    "text": "from the single database world into this multi like partitioned world of azure no sequel we ran into some problems so I'm",
    "start": "1505800",
    "end": "1513150"
  },
  {
    "text": "gonna talk about the statistic service that's the main service in Halo that controls everything about your player I",
    "start": "1513150",
    "end": "1519440"
  },
  {
    "text": "wrote the majority of this service and so it we have very very detailed",
    "start": "1519440",
    "end": "1524670"
  },
  {
    "start": "1520000",
    "end": "1599000"
  },
  {
    "text": "analytics on what you're doing sort of at all times in the game and so we do this by getting a giant blob of data",
    "start": "1524670",
    "end": "1530520"
  },
  {
    "text": "uploaded to us at the end of every game and sometimes while you're playing and so one of the problems that we ran into",
    "start": "1530520",
    "end": "1536550"
  },
  {
    "text": "the system was that people care a lot about these statistics like they get really really upset when you screw them",
    "start": "1536550",
    "end": "1541920"
  },
  {
    "text": "up it's always the best game they've ever had always shockingly and so so and",
    "start": "1541920",
    "end": "1549270"
  },
  {
    "text": "I mean like cause like right me gaming is a thing people play game like halo for money and competition and prize",
    "start": "1549270",
    "end": "1555030"
  },
  {
    "text": "money and then people like to should talk with their friends so and then they also like how like we have this whole website that you can go and like deep",
    "start": "1555030",
    "end": "1561570"
  },
  {
    "text": "dive through and this is just like a fraction of what we have per player so some things to know about the statistics",
    "start": "1561570",
    "end": "1568380"
  },
  {
    "text": "service is that we could have one to 32 players per game all of our player data",
    "start": "1568380",
    "end": "1573510"
  },
  {
    "text": "when we did this migration to fully cloud and storage as a service was on",
    "start": "1573510",
    "end": "1578970"
  },
  {
    "text": "Azure table which is a key value store and each player in the key value store had their own partition and so now",
    "start": "1578970",
    "end": "1584760"
  },
  {
    "text": "you've got you're talking about writing data to maybe 32 partitions and it still sort of has to look like one unit of",
    "start": "1584760",
    "end": "1589950"
  },
  {
    "text": "work and either all succeed or all fail so we you know a little like stumped but sagas",
    "start": "1589950",
    "end": "1596279"
  },
  {
    "text": "came in and helped us do this so this is if you've seen any of my halo talks before where I talk about our liens this",
    "start": "1596279",
    "end": "1603330"
  },
  {
    "start": "1599000",
    "end": "1643000"
  },
  {
    "text": "is what I normally show so we built the bulk of the services using a MSR actor",
    "start": "1603330",
    "end": "1609779"
  },
  {
    "text": "framework called Arleen's it's not super integral to this but the little diamonds are actors or grains from orleans and so",
    "start": "1609779",
    "end": "1616169"
  },
  {
    "text": "what happens is the xbox will send us a bunch of statistics the game actor or",
    "start": "1616169",
    "end": "1621179"
  },
  {
    "text": "like process you can think of it like that if you're not familiar with the actor model will like aggregate those right it's a blob storage and then at",
    "start": "1621179",
    "end": "1627059"
  },
  {
    "text": "the end we'll say hey all the players please go update your statistics and then all of those players will write to their corresponding partition and as",
    "start": "1627059",
    "end": "1633450"
  },
  {
    "text": "your table storage and then I do this hand wavy song and answer I'm like it doesn't fail just like there's a way to",
    "start": "1633450",
    "end": "1638760"
  },
  {
    "text": "deal with failure and so this is actually what it looks like because it",
    "start": "1638760",
    "end": "1643919"
  },
  {
    "text": "can fail and so what actually happened is we had our Xbox running into our",
    "start": "1643919",
    "end": "1648990"
  },
  {
    "text": "stateless front-end service that we wrote in F sharp which would then log a",
    "start": "1648990",
    "end": "1654269"
  },
  {
    "text": "message to Azure service boss which is a service it's a queueing service and",
    "start": "1654269",
    "end": "1659460"
  },
  {
    "text": "message broker in Azure that you can use and it would commit the payload of stats to the service bus and like hey like go",
    "start": "1659460",
    "end": "1666720"
  },
  {
    "text": "start the saga for this game so that was like that's what we use as our saga log we had these router grains these",
    "start": "1666720",
    "end": "1673440"
  },
  {
    "text": "stateless router workers that would just notice that like hey something I got it committed and so we need to spend someone up to go and process this work",
    "start": "1673440",
    "end": "1679919"
  },
  {
    "text": "and we treated our our game actors or a game processes like our sec coordinator",
    "start": "1679919",
    "end": "1686279"
  },
  {
    "text": "so all the routers did is they just notice that like new work was there and then they would spin up the right the",
    "start": "1686279",
    "end": "1691529"
  },
  {
    "text": "right game grain to go and handle it so the game grain then acted like the s you see at this point and would you know",
    "start": "1691529",
    "end": "1697590"
  },
  {
    "text": "do the whole like send all the messages and then commit back to the ad room saw as your service bus log so what happened",
    "start": "1697590",
    "end": "1704760"
  },
  {
    "text": "in failure right in failure you maybe don't want to just roll back statistics",
    "start": "1704760",
    "end": "1710820"
  },
  {
    "text": "right because if I've committed your statistics and you can see them even though your friends can't and then I",
    "start": "1710820",
    "end": "1715980"
  },
  {
    "start": "1713000",
    "end": "1762000"
  },
  {
    "text": "roll them back that looks really jarring to say like oh you have a hundred kills and now you have like ninety eight kills that's a really bad user experience um",
    "start": "1715980",
    "end": "1722220"
  },
  {
    "text": "also we just wanted to process this eventually anyway it's not like we were gonna throw that data away if we failed to write for one",
    "start": "1722220",
    "end": "1728059"
  },
  {
    "text": "player so we implemented forward recovery which is another pattern specified in the saga paper which just",
    "start": "1728059",
    "end": "1733460"
  },
  {
    "text": "basically says this saga like always needs to succeed so just recover forward right like don't roll back and so the",
    "start": "1733460",
    "end": "1739669"
  },
  {
    "text": "basic premise here is you check point and you say when am I at a safe state you check point these safe States and if",
    "start": "1739669",
    "end": "1745549"
  },
  {
    "text": "you have a failure you roll back to the safe state and then you roll forward luckily for us any players succeeding on",
    "start": "1745549",
    "end": "1752030"
  },
  {
    "text": "writing was essentially a safe state we didn't have to do any rollback so we would just retry the saga later if",
    "start": "1752030",
    "end": "1758299"
  },
  {
    "text": "someone failed to write and I'll sort of walk you through what that looked like right so we had our game drain which is",
    "start": "1758299",
    "end": "1763760"
  },
  {
    "start": "1762000",
    "end": "1815000"
  },
  {
    "text": "our SEC he talked to all of the players and the players talked to all of their own partitions and so say like player",
    "start": "1763760",
    "end": "1769730"
  },
  {
    "text": "free couldn't write to its partition because we blew our ups budget on that storage account or something I don't know and so like three of the players will",
    "start": "1769730",
    "end": "1776510"
  },
  {
    "text": "now be able to see their statistics for that game on Halo Waypoint and player 3 will not and that's ok we like people",
    "start": "1776510",
    "end": "1783169"
  },
  {
    "text": "knew that our statistics processing scene with someone asynchronous generally halo players are a little",
    "start": "1783169",
    "end": "1788390"
  },
  {
    "text": "narcissistic so they weren't looking at their friends stats they were looking more at their stats so we actually like",
    "start": "1788390",
    "end": "1793610"
  },
  {
    "text": "never had complaints about this so that was fine and so we would then have to go",
    "start": "1793610",
    "end": "1799549"
  },
  {
    "text": "and replay throughout the system we would have to go Bri play layer player 3 right so we would actually put this the",
    "start": "1799549",
    "end": "1804970"
  },
  {
    "text": "message on and like back off on processing this for a while to give the system a chance to catch up so you don't just want to like hammer your storage",
    "start": "1804970",
    "end": "1811160"
  },
  {
    "text": "account again if it's already like saturated so but because of this if",
    "start": "1811160",
    "end": "1816410"
  },
  {
    "text": "you're noticing I'm not rolling back and I'm actually replaying the request to",
    "start": "1816410",
    "end": "1821570"
  },
  {
    "text": "player through again and because great the game drain didn't know where that failed it didn't know if it wrote and then like just failed to like get it",
    "start": "1821570",
    "end": "1827809"
  },
  {
    "text": "back or like what had happened and so so Ford requests or if you're gonna do forward recovery in your system in a",
    "start": "1827809",
    "end": "1834020"
  },
  {
    "text": "distributed system then the sub requests also have to be idempotent so we were able to do some nice little tricks and",
    "start": "1834020",
    "end": "1839240"
  },
  {
    "text": "rely on our databases consistency to ensure that we weren't like double",
    "start": "1839240",
    "end": "1844309"
  },
  {
    "text": "counting statistics or everything all of our requests right opponent because it was essentially just set operations",
    "start": "1844309",
    "end": "1849500"
  },
  {
    "text": "anyway cuz you're just like adding like requests so then when the saga got retried later and for recovery the",
    "start": "1849500",
    "end": "1856190"
  },
  {
    "start": "1853000",
    "end": "1891000"
  },
  {
    "text": "game grain would send it to our stats grain player three he would successfully store his statistics and now we know we've",
    "start": "1856190",
    "end": "1862179"
  },
  {
    "text": "processed all of the data in in this game and then we can just sort of like we would discard it we didn't actually",
    "start": "1862179",
    "end": "1867340"
  },
  {
    "text": "have like a persistent log of everything because that wasn't useful to us we actually stored the data we needed and then threw it away and so at this point",
    "start": "1867340",
    "end": "1874779"
  },
  {
    "text": "we now have that guarantee that like all of the players in the in the game had processed their to statistics and our system was in a consistent state and",
    "start": "1874779",
    "end": "1880899"
  },
  {
    "text": "everyone could see their state this statistics for the game cool so I'm",
    "start": "1880899",
    "end": "1886239"
  },
  {
    "text": "lying a little bit about this what we actually did and this is where I like to come in and tune systems is there's a",
    "start": "1886239",
    "end": "1893590"
  },
  {
    "start": "1891000",
    "end": "1976000"
  },
  {
    "text": "trade-off here right if you're gonna write for 32 players back to the azure service bus log which has to be",
    "start": "1893590",
    "end": "1900549"
  },
  {
    "text": "consistent right there's a little bit of seep consistency and you're having a CP log of hopefully because you don't want",
    "start": "1900549",
    "end": "1906759"
  },
  {
    "text": "to just like drop data or like have errors in there that's like kind of expensive to talk to that thing 32 times",
    "start": "1906759",
    "end": "1912970"
  },
  {
    "text": "per game so we optimized for our failure case because writing this to a single partition was not expensive because",
    "start": "1912970",
    "end": "1918700"
  },
  {
    "text": "players were only doing that like once every 20 minutes when they had finished a game and so for us it was easier to",
    "start": "1918700",
    "end": "1924070"
  },
  {
    "text": "just retry it was a better trade off network latency and all things considered wise to just retry everything",
    "start": "1924070",
    "end": "1929649"
  },
  {
    "text": "because we knew we were idempotent so that's a trade-off you can make so when we would have a failure we word-for-word",
    "start": "1929649",
    "end": "1935710"
  },
  {
    "text": "recovery would actually just like Reeb last everyone and say process your statistics and the ones that already had",
    "start": "1935710",
    "end": "1941349"
  },
  {
    "text": "them when it double count and restore they were just say hey I process this correctly and we were done so I like to",
    "start": "1941349",
    "end": "1948369"
  },
  {
    "text": "point this out because I think as an industry we hide a little bit like some of the shortcuts we take but I think it's actually really valid to take these",
    "start": "1948369",
    "end": "1954609"
  },
  {
    "text": "shortcuts when you're going to tune a very bespoke instance of a system like this is a very like one-off instance you",
    "start": "1954609",
    "end": "1959619"
  },
  {
    "text": "could go build a general saga distributed distributed saga execution coordinator in system but like you can",
    "start": "1959619",
    "end": "1964659"
  },
  {
    "text": "also just go and build one that works for your system and that's totally valid this is a pattern for you to utilize and",
    "start": "1964659",
    "end": "1970149"
  },
  {
    "text": "building your applications and making sure that they are correct so just to",
    "start": "1970149",
    "end": "1976840"
  },
  {
    "start": "1976000",
    "end": "2054000"
  },
  {
    "text": "sort of recap write sagas are these long-lived distributed transactions and you should use them in your system",
    "start": "1976840",
    "end": "1982059"
  },
  {
    "text": "because I think they're a really helpful way to think and design and program against in a model that we're used to programming against you are trading off",
    "start": "1982059",
    "end": "1989409"
  },
  {
    "text": "atomicity for availability so if you cannot tolerate seeing part execution of the thing happening in the",
    "start": "1989409",
    "end": "1994720"
  },
  {
    "text": "saga and you can't do this but in most cases we can do this right and then we can take corrective actions I build a",
    "start": "1994720",
    "end": "2001140"
  },
  {
    "text": "like my skew in the world is towards highly available systems right games social media stuff like that there's a",
    "start": "2001140",
    "end": "2007950"
  },
  {
    "text": "very real world business consequence to us not being able to take actions and do things like if you can't play Halo then",
    "start": "2007950",
    "end": "2013200"
  },
  {
    "text": "that affects the amount of money that we make and so that's bad so like making this trade-off is fine",
    "start": "2013200",
    "end": "2020130"
  },
  {
    "text": "for us and we if we had to take corrective actions we were going to go do this and then finally it's a failure",
    "start": "2020130",
    "end": "2025260"
  },
  {
    "text": "management pattern right like it helps you build more reliable and robust systems and less fragile systems and so",
    "start": "2025260",
    "end": "2032039"
  },
  {
    "text": "I like this as a pattern in a hole because of that finally I want to thank",
    "start": "2032039",
    "end": "2037260"
  },
  {
    "text": "a bunch of people who helped me out with this talk Peter Bayliss you know Sombra Thomson Tarot Kyle Kingsbury Jeff Hodges and",
    "start": "2037260",
    "end": "2043350"
  },
  {
    "text": "Clemens basser's without them I could not have done this and now if you guys",
    "start": "2043350",
    "end": "2048358"
  },
  {
    "text": "have questions I'm happy to take them [Applause]",
    "start": "2048359",
    "end": "2056569"
  }
]