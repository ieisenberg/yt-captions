[
  {
    "text": "thank you",
    "start": "6180",
    "end": "8839"
  },
  {
    "text": "so in this topic today we're going to talk about building optimized Java microservices with Micronaut and more",
    "start": "12540",
    "end": "17760"
  },
  {
    "text": "specifically we'll also go over Micronaut 4 which is coming out very shortly so for those of you who haven't",
    "start": "17760",
    "end": "25199"
  },
  {
    "text": "heard of Micronaut Micronaut is a relatively new it's been around for a little while now but it's relatively new",
    "start": "25199",
    "end": "30560"
  },
  {
    "text": "framework for Java for the Java ecosystem that works very differently to",
    "start": "30560",
    "end": "35640"
  },
  {
    "text": "your traditional application Frameworks it's it's hence the name it's focused on",
    "start": "35640",
    "end": "40739"
  },
  {
    "text": "microservices and serverless workloads but really it's a general purpose framework so you can use it for any kind",
    "start": "40739",
    "end": "47460"
  },
  {
    "text": "of application we have folks who are using micronard in the context of building command line applications",
    "start": "47460",
    "end": "54780"
  },
  {
    "text": "building serverless applications building iot applications deployed to devices",
    "start": "54780",
    "end": "61100"
  },
  {
    "text": "so it's very very flexible and the way it works is by plugging into",
    "start": "61100",
    "end": "66780"
  },
  {
    "text": "the Java compiler or if you're using kotlin the kotlin compiler or if you're using groovy the Ruby compiler and it",
    "start": "66780",
    "end": "74820"
  },
  {
    "text": "computes everything to do with the way the framework works during the compilation phase of the application so",
    "start": "74820",
    "end": "80820"
  },
  {
    "text": "whilst your application is compiling it'll analyze your application your",
    "start": "80820",
    "end": "85860"
  },
  {
    "text": "source code it's essentially an annotation processor and generate classes that sit alongside your existing",
    "start": "85860",
    "end": "93119"
  },
  {
    "text": "classes that essentially enhance the performance and startup of your application reducing its memory",
    "start": "93119",
    "end": "98579"
  },
  {
    "text": "footprint and so forth uh this in this way it shifts a lot of",
    "start": "98579",
    "end": "103740"
  },
  {
    "text": "the processing from runtime to the compilation step and that results in a",
    "start": "103740",
    "end": "109380"
  },
  {
    "text": "much smaller thinner lighter run time than your traditional Frameworks like",
    "start": "109380",
    "end": "115259"
  },
  {
    "text": "spring and so forth uh that that optimization is makes it smaller both in",
    "start": "115259",
    "end": "121140"
  },
  {
    "text": "terms of the the actual packaging and deployment size so whether you're when you're building a Java file or a Docker image it's smaller but also into just a",
    "start": "121140",
    "end": "129239"
  },
  {
    "text": "little runtime footprint because we're doing so much compilation time that it's able to eliminate code that's no longer",
    "start": "129239",
    "end": "135239"
  },
  {
    "text": "necessary at runtime like compute Computing reflective caches and and that kind of thing because essentially micro",
    "start": "135239",
    "end": "141599"
  },
  {
    "text": "note doesn't use reflection it doesn't use the traditional technologies that",
    "start": "141599",
    "end": "146660"
  },
  {
    "text": "Frameworks traditional Frameworks use like runtime reflection runtime bytecode generation Dynamic class loading all of",
    "start": "146660",
    "end": "154140"
  },
  {
    "text": "that is eliminated from the runtime part which actually has a number of other benefits it has benefits like for",
    "start": "154140",
    "end": "161099"
  },
  {
    "text": "example in terms of security uh you know there's there's no since there's no",
    "start": "161099",
    "end": "166379"
  },
  {
    "text": "reflection at runtime the the and that no reflective you can still do reflection in your own code of course I",
    "start": "166379",
    "end": "172680"
  },
  {
    "text": "don't want to make that clear but at the framework level there's none um that leaves us you know a smaller",
    "start": "172680",
    "end": "178200"
  },
  {
    "text": "vulnerability footprint um and if you take a look at things like Micronaut serialization which is our",
    "start": "178200",
    "end": "184140"
  },
  {
    "text": "serialization and deserialization library for Json and other formats which can be seen as a complete replacement",
    "start": "184140",
    "end": "190680"
  },
  {
    "text": "for Jackson that also allows you to restrict uh what is serializable and",
    "start": "190680",
    "end": "196260"
  },
  {
    "text": "what is deserializable reducing again the potential for vulnerabilities so it it has a by default it has a",
    "start": "196260",
    "end": "203280"
  },
  {
    "text": "client in This Server based on the Neti i o toolkit but it's also plugable like I said it's very modular",
    "start": "203280",
    "end": "209640"
  },
  {
    "text": "um the server implementation is by default Neti but we have server implementations that are based on Tomcat",
    "start": "209640",
    "end": "216120"
  },
  {
    "text": "we have server implement we have implementations that are not even don't even have a server serverless right so",
    "start": "216120",
    "end": "222900"
  },
  {
    "text": "based on AWS Lambda or Oracle function or whatever right so",
    "start": "222900",
    "end": "229620"
  },
  {
    "text": "we have a very also Rich ecosystem of modules covering a wide range of use",
    "start": "229620",
    "end": "238080"
  },
  {
    "text": "cases particularly for cloud deployments so we have modules that are for help you",
    "start": "238080",
    "end": "243180"
  },
  {
    "text": "to deploy your application to whichever Cloud whether it be AWS Azure gcp Oracle",
    "start": "243180",
    "end": "250019"
  },
  {
    "text": "cloud and um a very you know growing and and Rich",
    "start": "250019",
    "end": "255239"
  },
  {
    "text": "ecosystem out there for building applications now you've probably heard of Grill VM or",
    "start": "255239",
    "end": "263040"
  },
  {
    "text": "some of you may have heard about grazium so uh I I work for Oracle labs and roll",
    "start": "263040",
    "end": "269880"
  },
  {
    "text": "VM is when the another technology that's part of our portfolio and it's a key",
    "start": "269880",
    "end": "275340"
  },
  {
    "text": "part that takes that next step where Micronaut optimizes the Java compilation",
    "start": "275340",
    "end": "281580"
  },
  {
    "text": "side growlvm is able to take your your Java application and turn it into a",
    "start": "281580",
    "end": "286620"
  },
  {
    "text": "self-contained native executable or a native image which has a number of additional",
    "start": "286620",
    "end": "292380"
  },
  {
    "text": "benefits that allow you to take Java workloads to places that just weren't possible before so with growl VM you can",
    "start": "292380",
    "end": "299880"
  },
  {
    "text": "produce a native executable that runs specifically on the platform that it's designed for the Linux Mac",
    "start": "299880",
    "end": "306740"
  },
  {
    "text": "windows and that that executable starts significantly faster reduces memory even",
    "start": "306740",
    "end": "313080"
  },
  {
    "text": "further and um and and and really um provides optimizations particularly",
    "start": "313080",
    "end": "319620"
  },
  {
    "text": "for certain kinds of workloads so gravy M like for example for serverless has really enabled Java to be used in a",
    "start": "319620",
    "end": "326699"
  },
  {
    "text": "serverless context where that just wasn't you know whilst it was technically possible it wasn't optimal",
    "start": "326699",
    "end": "332160"
  },
  {
    "text": "now with growl VM it's actually optimal as well uh and it it's also it allows",
    "start": "332160",
    "end": "338639"
  },
  {
    "text": "you to do go to take Java to places that weren't technically possible before I mentioned iot devices we have people",
    "start": "338639",
    "end": "344880"
  },
  {
    "text": "using Micronaut plus girl VM to run on Tiny devices that run on edge services that were just not possible to deploy to",
    "start": "344880",
    "end": "352919"
  },
  {
    "text": "with raw Java before because of their memory footprint requirements of the device whether it be a Raspberry Pi or",
    "start": "352919",
    "end": "358979"
  },
  {
    "text": "something smaller right so between Micron and gravity and there's really been a revolution in the",
    "start": "358979",
    "end": "365520"
  },
  {
    "text": "last few years in terms of optimizing Java for these kinds of workloads for",
    "start": "365520",
    "end": "370680"
  },
  {
    "text": "different kind of workloads I know a lot of you folks possibly are building more traditional applications and traditional",
    "start": "370680",
    "end": "376680"
  },
  {
    "text": "workloads but there's you know the variety of deployments out there need more flexible and innovative solutions",
    "start": "376680",
    "end": "382680"
  },
  {
    "text": "and in the Java space American have been optimizing these workloads and providing",
    "start": "382680",
    "end": "388199"
  },
  {
    "text": "possibilities that are really exciting and for Java developers to open up new possibilities",
    "start": "388199",
    "end": "394740"
  },
  {
    "text": "in addition to that recently at Oracle we announced growl Cloud native which is",
    "start": "394740",
    "end": "399960"
  },
  {
    "text": "a curated and collaborative effort where we work at Oracle we have around 15",
    "start": "399960",
    "end": "405300"
  },
  {
    "text": "people working on the Micronaut framework through the Micronaut Foundation and through that contribution we also",
    "start": "405300",
    "end": "412319"
  },
  {
    "text": "want to make available a curated set of modules that are known to work with Native image and we can support",
    "start": "412319",
    "end": "418740"
  },
  {
    "text": "officially through or on when deploying to Oracle cloud",
    "start": "418740",
    "end": "424199"
  },
  {
    "text": "so check out those links if you want to find more more about growl Cloud native it's an important Initiative for us",
    "start": "424199",
    "end": "431699"
  },
  {
    "text": "now let's move on to Micronaut 4. so micronauts history in terms of",
    "start": "431699",
    "end": "438180"
  },
  {
    "text": "releases you know about two years ago released micro three and now we're on to",
    "start": "438180",
    "end": "443280"
  },
  {
    "text": "the next major release and I was hoping to be able to come to you and talk to you about this new micro Note 4 release",
    "start": "443280",
    "end": "449340"
  },
  {
    "text": "as it already being released we our initial plan was the second",
    "start": "449340",
    "end": "455220"
  },
  {
    "text": "quarter of 2023. unfortunately that hasn't quite happened we're we're hoping to release next week",
    "start": "455220",
    "end": "462020"
  },
  {
    "text": "uh and all the demos I'm going to be doing today are with Micronaut 4 so it's actually ready to adopt now but we're",
    "start": "462020",
    "end": "468660"
  },
  {
    "text": "actually going ga next week and it provides a number of significant advancements uh to the framework so for",
    "start": "468660",
    "end": "475259"
  },
  {
    "text": "example uh this release will officially support gravity M23 which just came out",
    "start": "475259",
    "end": "480539"
  },
  {
    "text": "as well and we'll also use jdk 17 or Java 17 as a baseline so if you if you",
    "start": "480539",
    "end": "487020"
  },
  {
    "text": "saw the point using jabber right then you want to stick with Micronaut 3 and we're going to continue to support that",
    "start": "487020",
    "end": "493020"
  },
  {
    "text": "that release but if you want the latest and greatest features for the latest and greatest version of java LTS then you",
    "start": "493020",
    "end": "500520"
  },
  {
    "text": "want to go ahead and look at Micronaut 4. speaking of latest and greatest with uh",
    "start": "500520",
    "end": "506759"
  },
  {
    "text": "Micronaut 4 we have initial support for virtual threads which means or Loom",
    "start": "506759",
    "end": "512580"
  },
  {
    "text": "which requires dedicate 20 plus at the moment but as soon as jdk 21 is out it",
    "start": "512580",
    "end": "517740"
  },
  {
    "text": "will be out of preview and we'll support them officially now virtual threads are an exciting new",
    "start": "517740",
    "end": "524580"
  },
  {
    "text": "feature because it potentially allows uh you know you to write traditional imperative logic and get the same kind",
    "start": "524580",
    "end": "532380"
  },
  {
    "text": "of scalability benefits offered by reactive programming right so I you might have heard me mention",
    "start": "532380",
    "end": "538080"
  },
  {
    "text": "that the market Note 4 server is based on Nettie so that's that's",
    "start": "538080",
    "end": "543959"
  },
  {
    "text": "essentially an event Loop non-blocking i o based server toolkit and what we have",
    "start": "543959",
    "end": "549000"
  },
  {
    "text": "with virtual thread support in Microsoft 4 is the ability to offload to Virtual threads from the Neti event Loop and",
    "start": "549000",
    "end": "557160"
  },
  {
    "text": "allow you to scale up even further and write traditional blocking apps additional imperative code",
    "start": "557160",
    "end": "563300"
  },
  {
    "text": "and scale those out on Virtual threads which is really exciting for Micronaut 4 it's even more modular",
    "start": "563300",
    "end": "569700"
  },
  {
    "text": "than before as well we have been breaking down the framework into more reusable components and certain parts of",
    "start": "569700",
    "end": "575580"
  },
  {
    "text": "the framework can now be separated and and not included if you so choose for",
    "start": "575580",
    "end": "581040"
  },
  {
    "text": "example monk or nothing things like micro not retry Micronaut Discovery Micronaut validation",
    "start": "581040",
    "end": "588180"
  },
  {
    "text": "can be excluded as were previously packaged so if you really want to get like the smallest possible for your",
    "start": "588180",
    "end": "593940"
  },
  {
    "text": "application you can do that and what the the feature that I'm particularly excited about is we in",
    "start": "593940",
    "end": "599880"
  },
  {
    "text": "Minecraft four uh given my history in within the spring community and so forth is the expression language support so we",
    "start": "599880",
    "end": "607440"
  },
  {
    "text": "have a new expression language for micro Note 4 and it's very cool because basically it's completely compilation",
    "start": "607440",
    "end": "614279"
  },
  {
    "text": "time based and reflection free and type checked so as you type in expression and",
    "start": "614279",
    "end": "619380"
  },
  {
    "text": "compile your code if you type if you make a mistake in your expression in The annotation it will fail compilation and",
    "start": "619380",
    "end": "626399"
  },
  {
    "text": "say this is an invalid expression and it will compile the expression into a completely reflection free invocation so",
    "start": "626399",
    "end": "633600"
  },
  {
    "text": "you can Define things like Micronaut security rules using expressions or conditional job schedules or all sorts",
    "start": "633600",
    "end": "641339"
  },
  {
    "text": "of things throughout the framework and a compilation time they are checked validated and this is also also far far",
    "start": "641339",
    "end": "648360"
  },
  {
    "text": "more secure you know there's been several instances there's been a few incidences of",
    "start": "648360",
    "end": "653839"
  },
  {
    "text": "vulnerabilities in expressing languages out there micronauts expression language",
    "start": "653839",
    "end": "659100"
  },
  {
    "text": "does not allow runtime evaluation of Expressions it's fully compile time based fully type checked",
    "start": "659100",
    "end": "667260"
  },
  {
    "text": "and absolutely safe we would not have put this in the framework if it wasn't you know absolutely secure",
    "start": "667260",
    "end": "672899"
  },
  {
    "text": "so um so this is an already exciting and beyond that we also have uh the shift",
    "start": "672899",
    "end": "679440"
  },
  {
    "text": "from java X to Jakarta so we finally made the transition to use the new namespace for all the",
    "start": "679440",
    "end": "686640"
  },
  {
    "text": "different apis that Micronaut exposes and for our kotlin user base which is significant last we were looking at we",
    "start": "686640",
    "end": "693000"
  },
  {
    "text": "we kind of track uh who's using Micronaut and how how many users we have in kotlin was about 30 percent so we",
    "start": "693000",
    "end": "700920"
  },
  {
    "text": "have support for kotlin symbol processing which is a new uh compilation time API",
    "start": "700920",
    "end": "706940"
  },
  {
    "text": "compiler plugin API for KSP that's significant for kotlin that is significantly faster",
    "start": "706940",
    "end": "712920"
  },
  {
    "text": "we also have support for annotation driven HTTP filters",
    "start": "712920",
    "end": "719279"
  },
  {
    "text": "and this is this was kind of uh our previous phase DB filter based API was",
    "start": "719279",
    "end": "724500"
  },
  {
    "text": "based on reactive streams and now as we move to a virtual thread",
    "start": "724500",
    "end": "731160"
  },
  {
    "text": "World we've been optimizing the entire HTTP stack to plan for uh the feature",
    "start": "731160",
    "end": "737339"
  },
  {
    "text": "where there is no reactive code at all in in the entire end-to-end pipeline so you can write filters and if if no",
    "start": "737339",
    "end": "743760"
  },
  {
    "text": "reactive code is required to execute them it'll go the fast path of running it on the virtual thread event Loop and",
    "start": "743760",
    "end": "752100"
  },
  {
    "text": "allow the blocking code to proceed so we're planning ahead in terms of virtual thread support we also have experimental",
    "start": "752100",
    "end": "759300"
  },
  {
    "text": "support for new techno new newer Technologies like HTTP 3 IO urine and in",
    "start": "759300",
    "end": "766079"
  },
  {
    "text": "addition from at the compiler level we've allowed annotations on generic type arguments which is really nice",
    "start": "766079",
    "end": "771360"
  },
  {
    "text": "because uh now we now you for example you can declare uh",
    "start": "771360",
    "end": "777839"
  },
  {
    "text": "validation annotations on the generic type arguments so you can have list not blank string kind of thing which is",
    "start": "777839",
    "end": "784560"
  },
  {
    "text": "really cool um and we've we've we've improved modularity like I said and added lots of",
    "start": "784560",
    "end": "789660"
  },
  {
    "text": "quality of life improvements better error message injectional maps and overall the framework is just better",
    "start": "789660",
    "end": "795959"
  },
  {
    "text": "so let's do some demoing now and that's enough that's enough talk let's get over to writing some code and",
    "start": "795959",
    "end": "801720"
  },
  {
    "text": "seeing how uh uh how how what Micronaut 4 looks like and to be honest it doesn't",
    "start": "801720",
    "end": "807899"
  },
  {
    "text": "look hugely different from Micronaut 3 so we haven't we haven't you know changed the developer experience but",
    "start": "807899",
    "end": "814200"
  },
  {
    "text": "what we have is um a much more optimal one and you will see we'll I'll demo some of the expression stuff",
    "start": "814200",
    "end": "820200"
  },
  {
    "text": "so here I have a micro note application it's like any other traditional Java",
    "start": "820200",
    "end": "825779"
  },
  {
    "text": "application we have a source Main Source main Java directly with where my code is and we have a application class",
    "start": "825779",
    "end": "833459"
  },
  {
    "text": "that lets me launch the application Micronaut includes a testing framework",
    "start": "833459",
    "end": "839700"
  },
  {
    "text": "that lets you declare integration tests and this is very uh nice because it",
    "start": "839700",
    "end": "846000"
  },
  {
    "text": "automatically lets you dependency inject components into the test using add inject or you can even pass",
    "start": "846000",
    "end": "852600"
  },
  {
    "text": "them as arguments now this application that I've set up to demonstrate is is already set up with",
    "start": "852600",
    "end": "860399"
  },
  {
    "text": "a few features if you wanted to replicate this application it's using things like Micro Data Micro Data jdbc a",
    "start": "860399",
    "end": "868019"
  },
  {
    "text": "mySQL database and so forth um and you can go to",
    "start": "868019",
    "end": "874200"
  },
  {
    "text": "um start.micronaut.io to create this application",
    "start": "874200",
    "end": "879839"
  },
  {
    "text": "or in your IDE in IntelliJ ultimate and in vs code there are Wizards that work",
    "start": "879839",
    "end": "887279"
  },
  {
    "text": "with Micronaut launch where you can create your application but basically I chose Micronaut for",
    "start": "887279",
    "end": "892620"
  },
  {
    "text": "um and I and I chose some specific features like Micronaut data jdbc and so",
    "start": "892620",
    "end": "898260"
  },
  {
    "text": "forth and you can click once you've decided on your application you can click generate project import it into",
    "start": "898260",
    "end": "903660"
  },
  {
    "text": "your IDE and you're ready to go so one of the really nice features that",
    "start": "903660",
    "end": "909360"
  },
  {
    "text": "we introduced later on in Micronaut 3 but we've really been optimizing for Micronaut 4 is our integration with test",
    "start": "909360",
    "end": "915480"
  },
  {
    "text": "resources or test containers so this application for example includes",
    "start": "915480",
    "end": "921000"
  },
  {
    "text": "integration with mySQL now if I run this uh it includes a configuration for a mySQL database which you can see it's",
    "start": "921000",
    "end": "927899"
  },
  {
    "text": "using MySQL and if I run this at this test",
    "start": "927899",
    "end": "933000"
  },
  {
    "text": "what's going to happen is it's going to start the test and it's actually going",
    "start": "933000",
    "end": "938579"
  },
  {
    "text": "to start a test container that's going to start my database and it's going to run the test against a real mySQL",
    "start": "938579",
    "end": "947100"
  },
  {
    "text": "database right now one of the important things with as a developer that you want",
    "start": "947100",
    "end": "952800"
  },
  {
    "text": "is your testic execute quickly and fast so as you can see that particular",
    "start": "952800",
    "end": "958680"
  },
  {
    "text": "execution took 16 seconds to start the MySQL container and then run my my test against the database 16 seconds is not",
    "start": "958680",
    "end": "966300"
  },
  {
    "text": "great it's quite a long time because I'm waiting for like the MySQL container to start up",
    "start": "966300",
    "end": "971660"
  },
  {
    "text": "so one of the things we recommend you do with Micronaut whenever you get going is to do",
    "start": "971660",
    "end": "977459"
  },
  {
    "text": "um and we have both Gradle first of all I want to point out we have growth Gradle and Maven integration I'm demonstrating Gradle but if you do Maven",
    "start": "977459",
    "end": "984480"
  },
  {
    "text": "wmn run it's the same and if I do Gradle W run slash T that",
    "start": "984480",
    "end": "990000"
  },
  {
    "text": "activates what's called continuous mode um with my micro node application so every",
    "start": "990000",
    "end": "997139"
  },
  {
    "text": "time I make a change to my micro node application it's going to automatically restart the server and and you're going",
    "start": "997139",
    "end": "1003139"
  },
  {
    "text": "to see and it's going to be almost instantaneous little startup you can see the first startup took 13 seconds",
    "start": "1003139",
    "end": "1008959"
  },
  {
    "text": "because it had to start the MySQL instance and connect up to the database but now the cool thing is now that I have",
    "start": "1008959",
    "end": "1014720"
  },
  {
    "text": "continuous mode running in the background I can come back to my test here and I can run this test",
    "start": "1014720",
    "end": "1021100"
  },
  {
    "text": "I can run this test from my IDE and it connects to the existing running application in the existing container",
    "start": "1021100",
    "end": "1029260"
  },
  {
    "text": "and it runs almost instantly right I'm not waiting",
    "start": "1029260",
    "end": "1035058"
  },
  {
    "text": "for the for the MySQL see pretty much instantly right so I can",
    "start": "1035059",
    "end": "1040459"
  },
  {
    "text": "have my MySQL container managed by Micronaut in the background and I can run my integration tests and you can",
    "start": "1040459",
    "end": "1046220"
  },
  {
    "text": "write integration tests that use real databases instead of having mock unit test mock this mock this you can have",
    "start": "1046220",
    "end": "1052520"
  },
  {
    "text": "all those containers managed and run run those tests instantly and get the same productivity that you get when writing",
    "start": "1052520",
    "end": "1059720"
  },
  {
    "text": "unit tests go another days of having to separate separate out unit tests into these mocking Etc you can actually write",
    "start": "1059720",
    "end": "1067280"
  },
  {
    "text": "write a production level integration tests that are super fast to execute and",
    "start": "1067280",
    "end": "1073100"
  },
  {
    "text": "that's one of the cool things about Micronaut um so since this is a database application",
    "start": "1073100",
    "end": "1080360"
  },
  {
    "text": "let's demonstrate some more things that you can do so one of the features in Micronaut",
    "start": "1080360",
    "end": "1085880"
  },
  {
    "text": "is uh Micronaut data and micro not data lets you write",
    "start": "1085880",
    "end": "1091940"
  },
  {
    "text": "um let's use a underlying technology for example jpa Java persistence API or jdbc",
    "start": "1091940",
    "end": "1099740"
  },
  {
    "text": "directly to write repositories so if you've ever used spring data",
    "start": "1099740",
    "end": "1105740"
  },
  {
    "text": "I was involved in the very early development of spring data defining the original apis The Way Spring data worked",
    "start": "1105740",
    "end": "1112520"
  },
  {
    "text": "and the history of spring data is that it came from Grails where we had the",
    "start": "1112520",
    "end": "1117559"
  },
  {
    "text": "technology called gorm which lets you write like Dynamic finders and so forth",
    "start": "1117559",
    "end": "1122919"
  },
  {
    "text": "the next evolution of that was spring data which we built back in 2011 I think",
    "start": "1122919",
    "end": "1128720"
  },
  {
    "text": "and when we started micro node I really wanted to take database access productivity to the next level and",
    "start": "1128720",
    "end": "1135919"
  },
  {
    "text": "that's Micronaut data and how is it different to Spring data so it instead of checking",
    "start": "1135919",
    "end": "1143120"
  },
  {
    "text": "your repository definitions at runtime it does all the checking at compilation",
    "start": "1143120",
    "end": "1148280"
  },
  {
    "text": "time and this is a this is a theme with Micronaut that you will see when whenever you're using it so for example",
    "start": "1148280",
    "end": "1155480"
  },
  {
    "text": "let's let's go and build a theoretical um uh",
    "start": "1155480",
    "end": "1161840"
  },
  {
    "text": "uh pet clinic style application so I'm going to define a pet Rec record now",
    "start": "1161840",
    "end": "1167539"
  },
  {
    "text": "this is another cool thing about micro node data jdbc is that you can use",
    "start": "1167539",
    "end": "1172760"
  },
  {
    "text": "records so I can make this a mapped entity that maps to the database and",
    "start": "1172760",
    "end": "1177919"
  },
  {
    "text": "it's got a long uh ID and this is going to be a generated value that is the ID of The",
    "start": "1177919",
    "end": "1184700"
  },
  {
    "text": "Entity right and we my pet is going to have a name",
    "start": "1184700",
    "end": "1189700"
  },
  {
    "text": "um oops and it's going to have an age and maybe we're going to have a health",
    "start": "1189799",
    "end": "1195380"
  },
  {
    "text": "rating rating for the you know for how more or less rating one out of 10 or 9",
    "start": "1195380",
    "end": "1202100"
  },
  {
    "text": "being your super healthy one being you're not very healthy so we've got all these fields that represent different aspects of data",
    "start": "1202100",
    "end": "1208640"
  },
  {
    "text": "this is as a mapped entity this is going to be mapped to a pet table if I wanted",
    "start": "1208640",
    "end": "1213740"
  },
  {
    "text": "to customize that I could say undescribed b t pet or whatever so that's my pet record",
    "start": "1213740",
    "end": "1221720"
  },
  {
    "text": "and what you can do is you can Define repositories so I can say I'm going to",
    "start": "1221720",
    "end": "1227240"
  },
  {
    "text": "create a pet Repository and this is going to be a jdbc",
    "start": "1227240",
    "end": "1232880"
  },
  {
    "text": "repository that's using a dialect of MySQL",
    "start": "1232880",
    "end": "1240620"
  },
  {
    "text": "and we're going to extend a crud Repository and we're going to supply The Entity",
    "start": "1240620",
    "end": "1247220"
  },
  {
    "text": "type and the ID type so with that I have a repository",
    "start": "1247220",
    "end": "1253580"
  },
  {
    "text": "implementation now what I can do is I can go to my for example application class",
    "start": "1253580",
    "end": "1260720"
  },
  {
    "text": "and I'm going to make this application Class A Singleton so what does that mean I mean I could do this with any class",
    "start": "1260720",
    "end": "1266780"
  },
  {
    "text": "just making it a Singleton makes it a component of my application that's subject to dependency injection",
    "start": "1266780",
    "end": "1272960"
  },
  {
    "text": "right so I'm just making my application Class A Singleton and then I'm going to inject into my application class my pet",
    "start": "1272960",
    "end": "1281720"
  },
  {
    "text": "Repository like so there it is and I'm going to use it right",
    "start": "1281720",
    "end": "1288880"
  },
  {
    "text": "to write an event listener that is using uh",
    "start": "1288880",
    "end": "1295520"
  },
  {
    "text": "that runs when the application Scott starts up so we have the micro node has a whole event system that you can use",
    "start": "1295520",
    "end": "1302840"
  },
  {
    "text": "and a whole bunch of built-in events one of them is startup event startup event is fired as the name might",
    "start": "1302840",
    "end": "1309860"
  },
  {
    "text": "suggest when the application starts up right um and I'm going to make this",
    "start": "1309860",
    "end": "1314900"
  },
  {
    "text": "transactional so Micronaut has built-in support for jakarta.transaction so I can run",
    "start": "1314900",
    "end": "1322640"
  },
  {
    "text": "this method within the scope of a transaction if anything goes wrong you can roll it back automatically or commit",
    "start": "1322640",
    "end": "1328340"
  },
  {
    "text": "it automatically and in here I'm going to say pet repository dot save all and I'm going to",
    "start": "1328340",
    "end": "1335600"
  },
  {
    "text": "list and I and I'm going to save a couple of pits",
    "start": "1335600",
    "end": "1341059"
  },
  {
    "text": "so we're going to do one that's one pit the first idea is the is the ID so",
    "start": "1341059",
    "end": "1346940"
  },
  {
    "text": "initially there's not going to be an ID so I just apply null let's call him Fred maybe he has 10 and he has a health",
    "start": "1346940",
    "end": "1354620"
  },
  {
    "text": "rating of seven or something um and then let's have another pet",
    "start": "1354620",
    "end": "1362140"
  },
  {
    "text": "um like that right and let's call this one Bob and",
    "start": "1363200",
    "end": "1369260"
  },
  {
    "text": "maybe this Bob is a bit younger so a bit healthier maybe I don't know",
    "start": "1369260",
    "end": "1375740"
  },
  {
    "text": "um and there we go so we have we have two pets save to my database we can",
    "start": "1375740",
    "end": "1382880"
  },
  {
    "text": "verify that this runs on on Startup by writing some integration tests so",
    "start": "1382880",
    "end": "1390380"
  },
  {
    "text": "I actually like dependency injecting by with Micronaut by their arguments instead",
    "start": "1390380",
    "end": "1398059"
  },
  {
    "text": "so you can actually direct directly inject to the junit 5 test arguments right",
    "start": "1398059",
    "end": "1404360"
  },
  {
    "text": "there and then you can do assert equals to repository dot count",
    "start": "1404360",
    "end": "1411860"
  },
  {
    "text": "and replace that with a static import and if we run this theoretically",
    "start": "1411860",
    "end": "1418179"
  },
  {
    "text": "it should work and my application will",
    "start": "1418179",
    "end": "1423440"
  },
  {
    "text": "my test will pass which it does right so I've written some initial database access logic there",
    "start": "1423440",
    "end": "1430039"
  },
  {
    "text": "using Micronaut data jdbc now the cool thing with Micronaut is the way it's end",
    "start": "1430039",
    "end": "1436039"
  },
  {
    "text": "to end integrated with with everything so I can for example directly on this",
    "start": "1436039",
    "end": "1441380"
  },
  {
    "text": "entity I can Define uh validation rules like that's not blank",
    "start": "1441380",
    "end": "1447500"
  },
  {
    "text": "and the age must be a positive number and the health rating must be a minimum",
    "start": "1447500",
    "end": "1455299"
  },
  {
    "text": "one and a maximum 10 and we and we get like validation rule rules built in now",
    "start": "1455299",
    "end": "1462799"
  },
  {
    "text": "one of the changes in Micronaut 4 that I I mentioned was support for",
    "start": "1462799",
    "end": "1469100"
  },
  {
    "text": "annotations on generic type arguments so previously micro would validate",
    "start": "1469100",
    "end": "1475820"
  },
  {
    "text": "automatically anything that you passed to the repository in micro four we actually changed this because uh so that",
    "start": "1475820",
    "end": "1482000"
  },
  {
    "text": "users who don't want validation can remove it and add it so now the way you do it is you can say",
    "start": "1482000",
    "end": "1487280"
  },
  {
    "text": "this should be valid and that's much nicer because you have more fine grain control right by the",
    "start": "1487280",
    "end": "1493039"
  },
  {
    "text": "generic type argument that this this particular pet should be valid for any method that defines in the repository",
    "start": "1493039",
    "end": "1499220"
  },
  {
    "text": "yeah or although or the long that you could say this must be a positive number",
    "start": "1499220",
    "end": "1504620"
  },
  {
    "text": "or whatever um so generic annotations on generic type arguments is is really nice",
    "start": "1504620",
    "end": "1513200"
  },
  {
    "text": "now um database access logic is is super easy",
    "start": "1513200",
    "end": "1518780"
  },
  {
    "text": "to implement and so is repository like controller Logic for example I can",
    "start": "1518780",
    "end": "1524120"
  },
  {
    "text": "define a pet controller here that is mapped to a particular end URI",
    "start": "1524120",
    "end": "1530360"
  },
  {
    "text": "let's call it pets and I can inject my pet Repository",
    "start": "1530360",
    "end": "1538880"
  },
  {
    "text": "into the Constructor you'll notice that whenever I I tend to favor Constructor injection",
    "start": "1538880",
    "end": "1545900"
  },
  {
    "text": "um it works really nicely you just Define a construct argument and a more like clearly expresses the requirements",
    "start": "1545900",
    "end": "1551120"
  },
  {
    "text": "of the class you know I know if people some people historically have you know",
    "start": "1551120",
    "end": "1556340"
  },
  {
    "text": "done this kind of thing where you say inject but I think it leads to confusion about what what is actually for the",
    "start": "1556340",
    "end": "1562760"
  },
  {
    "text": "needed for the class to function and more likelihood of a null pointer exception in your tests and it's more so",
    "start": "1562760",
    "end": "1569600"
  },
  {
    "text": "definitely favor Constructor injection and here you can write endpoints uh",
    "start": "1569600",
    "end": "1575240"
  },
  {
    "text": "really easily so for example if I wanted to list all of the pet names",
    "start": "1575240",
    "end": "1581840"
  },
  {
    "text": "um List names for example I can maybe write a names",
    "start": "1581840",
    "end": "1588020"
  },
  {
    "text": "endpoint right and I could say if I'm like return",
    "start": "1588020",
    "end": "1594260"
  },
  {
    "text": "this.pet repository dot find um name",
    "start": "1594520",
    "end": "1600980"
  },
  {
    "text": "now this is an interesting thing here is that that the",
    "start": "1600980",
    "end": "1607120"
  },
  {
    "text": "file name method doesn't exist but I can create it in the pet Repository",
    "start": "1607120",
    "end": "1613279"
  },
  {
    "text": "and it will be automatically aware that the pet entity has a name property",
    "start": "1613279",
    "end": "1620720"
  },
  {
    "text": "and therefore we'll perform a predict projection just to retrieve the names right",
    "start": "1620720",
    "end": "1626480"
  },
  {
    "text": "um and so that that's really cool how you can do projections on just to retrieve like particular properties now",
    "start": "1626480",
    "end": "1631880"
  },
  {
    "text": "what's interesting [Music] um is that if I were to rename this to find",
    "start": "1631880",
    "end": "1637880"
  },
  {
    "text": "num which is clearly something that that doesn't exist right",
    "start": "1637880",
    "end": "1643000"
  },
  {
    "text": "um you'll see that that will actually fail with a compilation error in my continuous build thing happening",
    "start": "1643100",
    "end": "1649880"
  },
  {
    "text": "although I'd run my test it would have failed as well and this is where Micro Data is really powerful right because it's checking",
    "start": "1649880",
    "end": "1655580"
  },
  {
    "text": "actively checking a compilation time am I doing the right thing with the framework right in another framework",
    "start": "1655580",
    "end": "1662179"
  },
  {
    "text": "or Not Another framework you would get a runtime error saying you know something went wrong here and it's this is not",
    "start": "1662179",
    "end": "1669200"
  },
  {
    "text": "ideal you know go and fix it and run again here you're getting like active compilation time",
    "start": "1669200",
    "end": "1675880"
  },
  {
    "text": "checking of what is possible to do with the framework right I can correct that and",
    "start": "1675880",
    "end": "1681740"
  },
  {
    "text": "and um it will eventually hopefully",
    "start": "1681740",
    "end": "1689120"
  },
  {
    "text": "recompile yeah and startup so um so with that you know we have like",
    "start": "1689120",
    "end": "1696559"
  },
  {
    "text": "a basic endpoint um that we can we can hit",
    "start": "1696559",
    "end": "1703539"
  },
  {
    "text": "uh oh it's pits.names I guess",
    "start": "1706600",
    "end": "1711460"
  },
  {
    "text": "there you go so it's retrieving the data from my my application and and all as",
    "start": "1711799",
    "end": "1719179"
  },
  {
    "text": "well so Micronaut data is is a really really cool cool thing and you know",
    "start": "1719179",
    "end": "1725779"
  },
  {
    "text": "there's a lot of flexibility that you get with different queries for example I can Define",
    "start": "1725779",
    "end": "1731000"
  },
  {
    "text": "another query that lists all the pets and maybe find by your completion in the",
    "start": "1731000",
    "end": "1737419"
  },
  {
    "text": "ID in both IntelliJ ultimate and vs code so you can say fine by Health rating greater than you know",
    "start": "1737419",
    "end": "1745640"
  },
  {
    "text": "I don't know five or something and and it will Implement all that logic for you and you",
    "start": "1745640",
    "end": "1752480"
  },
  {
    "text": "get you get active compilation time checking of what's what's happening right which which is really really sweet",
    "start": "1752480",
    "end": "1758260"
  },
  {
    "text": "now Micronaut itself has like so many different uh features built in that make",
    "start": "1758260",
    "end": "1765380"
  },
  {
    "text": "it easier to create resilient applications as well uh so when I created this application",
    "start": "1765380",
    "end": "1771440"
  },
  {
    "text": "for example um I I basically included the management",
    "start": "1771440",
    "end": "1776720"
  },
  {
    "text": "endpoint so I have built-in support for things like Health checking for my",
    "start": "1776720",
    "end": "1782840"
  },
  {
    "text": "health status and I can run those management endpoints on a different port if I wanted to so I can change the",
    "start": "1782840",
    "end": "1788120"
  },
  {
    "text": "management port I have integration with metrics so I can",
    "start": "1788120",
    "end": "1793940"
  },
  {
    "text": "get uh I think I don't think I've selected the metrics feature one okay but anyway if I if I had selected",
    "start": "1793940",
    "end": "1799720"
  },
  {
    "text": "micrometer it would be there right so you just have to select micrometer metrics and you'll select them you see",
    "start": "1799720",
    "end": "1807080"
  },
  {
    "text": "the metrics endpoint and the data and so forth so all of those features help you create production ready applications",
    "start": "1807080",
    "end": "1813559"
  },
  {
    "text": "that are ready to deploy in addition to that you know you can create a highly",
    "start": "1813559",
    "end": "1819500"
  },
  {
    "text": "resilient applications for example if I were to go to my test and and I could",
    "start": "1819500",
    "end": "1825020"
  },
  {
    "text": "actually write a test here that tested my endpoint right",
    "start": "1825020",
    "end": "1830659"
  },
  {
    "text": "and I could Define an interface here let's call it pet client that's going to",
    "start": "1830659",
    "end": "1837020"
  },
  {
    "text": "actually talk to my Pet's endpoint and uh",
    "start": "1837020",
    "end": "1843740"
  },
  {
    "text": "it's going to basically call that names endpoint for example",
    "start": "1843740",
    "end": "1849460"
  },
  {
    "text": "um what I can do is I can inject this client and this is going to be a full",
    "start": "1849679",
    "end": "1855080"
  },
  {
    "text": "integration test this is with micronauts declarative HTTP client and I can call per client.list names to",
    "start": "1855080",
    "end": "1862159"
  },
  {
    "text": "get all the names back right and I can say this is uh so equals",
    "start": "1862159",
    "end": "1868520"
  },
  {
    "text": "to names.size and this is like a full integration test",
    "start": "1868520",
    "end": "1875299"
  },
  {
    "text": "that's using an HTTP client to send a",
    "start": "1875299",
    "end": "1880700"
  },
  {
    "text": "send a request to the htb server and",
    "start": "1881059",
    "end": "1887240"
  },
  {
    "text": "if I run it it should work in theory",
    "start": "1887240",
    "end": "1891820"
  },
  {
    "text": "and it works right so this is an HTTP client request going to my server end to",
    "start": "1892880",
    "end": "1898159"
  },
  {
    "text": "end and it runs executes instantaneously now if this was a real HTTP client I",
    "start": "1898159",
    "end": "1904399"
  },
  {
    "text": "could I could Define this with an ID say pets and I could configure that ID",
    "start": "1904399",
    "end": "1909799"
  },
  {
    "text": "to point to my service wherever and Micronaut features extensive support for service Discovery with kubernetes with",
    "start": "1909799",
    "end": "1916820"
  },
  {
    "text": "console with Eureka with in the cloud based on IDs service IDs and you can",
    "start": "1916820",
    "end": "1922760"
  },
  {
    "text": "look it up and so forth in this case I'm not going to do that but you've also got resiliency Primitives so you know I can",
    "start": "1922760",
    "end": "1929659"
  },
  {
    "text": "say this this operation is retryable so you know if it's if it fails to retry",
    "start": "1929659",
    "end": "1935419"
  },
  {
    "text": "again I've got circuit breaker supports so that you can basically Short Circuit",
    "start": "1935419",
    "end": "1942020"
  },
  {
    "text": "the circuit and you know come back try me again later when I'm better right so",
    "start": "1942020",
    "end": "1947120"
  },
  {
    "text": "all of those Primitives are built into the framework and it makes it highly resilient and easy to to Define these",
    "start": "1947120",
    "end": "1954080"
  },
  {
    "text": "kinds of applications now I mentioned before as well the",
    "start": "1954080",
    "end": "1959179"
  },
  {
    "text": "notion of the expression language that I'm really excited about for micro note 4. so and it's it's it's really cool so",
    "start": "1959179",
    "end": "1966860"
  },
  {
    "text": "one of the things you can do for example is define typesafe configuration in",
    "start": "1966860",
    "end": "1972860"
  },
  {
    "text": "micronauts so I can imagine for example I had a scheduled job schedule job that executed you executed",
    "start": "1972860",
    "end": "1980419"
  },
  {
    "text": "every few seconds or a few minutes that checked on the health of the different pets in the system right and and maybe",
    "start": "1980419",
    "end": "1985880"
  },
  {
    "text": "sent a notification hey somebody's unhealthy right um so what you can do is you can Define and",
    "start": "1985880",
    "end": "1992240"
  },
  {
    "text": "you can use records as well so what I'm going to do is I'm going to define a configuration property called Pet's job",
    "start": "1992240",
    "end": "1999200"
  },
  {
    "text": "right and uh I'm going to Define like uh",
    "start": "1999200",
    "end": "2006159"
  },
  {
    "text": "something in here that says is it paused right is the job paused or",
    "start": "2006159",
    "end": "2012100"
  },
  {
    "text": "not paused and maybe something like unhealthy",
    "start": "2012100",
    "end": "2017260"
  },
  {
    "text": "threshold where when you get to you know there's the fire you need a certain",
    "start": "2017260",
    "end": "2022539"
  },
  {
    "text": "amount of hunt or let's just call unhealthy so that it's easier to remember",
    "start": "2022539",
    "end": "2027820"
  },
  {
    "text": "and what we can do is in my configuration we can configure this pet shop",
    "start": "2027820",
    "end": "2035440"
  },
  {
    "text": "configuration directly and the cool thing is you get IDE completion automatically so I can",
    "start": "2035440",
    "end": "2041080"
  },
  {
    "text": "say the job is not paused so the ID integration the ID is already aware of",
    "start": "2041080",
    "end": "2046299"
  },
  {
    "text": "that that configuration properties and the unteulty threshold is maybe five",
    "start": "2046299",
    "end": "2051520"
  },
  {
    "text": "right so when Health repair hits five uh we you know and now what I can do is I can create a",
    "start": "2051520",
    "end": "2058240"
  },
  {
    "text": "job it's called a pet shop",
    "start": "2058240",
    "end": "2063580"
  },
  {
    "text": "that is a Singleton and let's let's make it a scheduled job",
    "start": "2063580",
    "end": "2069940"
  },
  {
    "text": "well first let's inject my configuration so we're going to inject the pet job configuration",
    "start": "2069940",
    "end": "2076980"
  },
  {
    "text": "um like that and we're going to create a new",
    "start": "2078520",
    "end": "2084158"
  },
  {
    "text": "construct argument for it right and we're going to make this a scheduled",
    "start": "2084159",
    "end": "2089378"
  },
  {
    "text": "job um called report unhealthy",
    "start": "2089379",
    "end": "2096338"
  },
  {
    "text": "something like that and for the moment we're just going to Output it to print line",
    "start": "2096700",
    "end": "2102880"
  },
  {
    "text": "but you know we could send an email or some operational thing pet is unhealthy right",
    "start": "2102880",
    "end": "2109920"
  },
  {
    "text": "um okay so we're going to run this in a at a fixed rate just for every 10 seconds",
    "start": "2110020",
    "end": "2118420"
  },
  {
    "text": "now the cool thing about the uh the expression language the",
    "start": "2118420",
    "end": "2123640"
  },
  {
    "text": "possibilities that it opens up is you can do things like add conditions so I",
    "start": "2123640",
    "end": "2129280"
  },
  {
    "text": "can say you know this will only run if",
    "start": "2129280",
    "end": "2135420"
  },
  {
    "text": "configuration not paused right so we know it's expression languages",
    "start": "2135420",
    "end": "2142240"
  },
  {
    "text": "because it opens up with hash and curly bracket I can reference the configuration of my job check if it's",
    "start": "2142240",
    "end": "2148960"
  },
  {
    "text": "not paused and only run if it's not paused right",
    "start": "2148960",
    "end": "2154300"
  },
  {
    "text": "so the expression ring is really really sweet now now the other cool thing is",
    "start": "2154300",
    "end": "2159940"
  },
  {
    "text": "that um the ah you see it's already type",
    "start": "2159940",
    "end": "2167320"
  },
  {
    "text": "checking that my expression is correct so I've actually got a compilation error here saying I",
    "start": "2167320",
    "end": "2173740"
  },
  {
    "text": "can't find anything with configuration that is available because you actually in the context of Expressions need to",
    "start": "2173740",
    "end": "2180280"
  },
  {
    "text": "refer to this right so when I save this",
    "start": "2180280",
    "end": "2187380"
  },
  {
    "text": "hopefully it",
    "start": "2187420",
    "end": "2190559"
  },
  {
    "text": "let's see [Music] um ah there's no I actually need to expose",
    "start": "2193900",
    "end": "2200619"
  },
  {
    "text": "the configuration as a property so it has to be available as a property would be",
    "start": "2200619",
    "end": "2206859"
  },
  {
    "text": "so luckily I have this compiler that's helping me to figure these out with good good error messages yeah giving me all",
    "start": "2206859",
    "end": "2213099"
  },
  {
    "text": "these good error messages and telling me what I'm doing wrong while I'm doing live demos to all the people in the audience here so",
    "start": "2213099",
    "end": "2220060"
  },
  {
    "text": "um so yeah there you go pet is unhealthy right so obviously I I should probably check the other parts of my",
    "start": "2220060",
    "end": "2226540"
  },
  {
    "text": "configuration like the threshold and run a query and whatever else and and Etc",
    "start": "2226540",
    "end": "2231599"
  },
  {
    "text": "but if I go into my configuration and I say this job is paused right and my",
    "start": "2231599",
    "end": "2238660"
  },
  {
    "text": "application restarts it won't actually run the schedule top right because the job is paused and I can unpause it I",
    "start": "2238660",
    "end": "2245320"
  },
  {
    "text": "could imagine add a management endpoint to my application that my new my management people can run to pause and",
    "start": "2245320",
    "end": "2251320"
  },
  {
    "text": "resume the job or or whatever right so very cool",
    "start": "2251320",
    "end": "2256380"
  },
  {
    "text": "capabilities getting added via the expression language in micro Note 4",
    "start": "2256380",
    "end": "2262800"
  },
  {
    "text": "and you know micro note is really really flexible there's lots of possibilities and this it just opens up even more",
    "start": "2262800",
    "end": "2269859"
  },
  {
    "text": "flexibility to the framework uh one thing I forgot to point out as well with with uh with",
    "start": "2269859",
    "end": "2277119"
  },
  {
    "text": "Micro Data and a feature I really love is the ability to Define data transfer",
    "start": "2277119",
    "end": "2282160"
  },
  {
    "text": "objects so you can see that we have a pet entity here which has a number of",
    "start": "2282160",
    "end": "2287820"
  },
  {
    "text": "fields each of them mapping to a column in the database right ID name age Health",
    "start": "2287820",
    "end": "2293140"
  },
  {
    "text": "rating but it might be that you for a particular query you only want a subset of the data right so and this is where",
    "start": "2293140",
    "end": "2300700"
  },
  {
    "text": "it comes uh it comes in really handy Micronaut data",
    "start": "2300700",
    "end": "2306099"
  },
  {
    "text": "support for dtos or data transfer objects so you can Define it for example a pip dto",
    "start": "2306099",
    "end": "2313420"
  },
  {
    "text": "that that only retrieves the name and the age right and you can Define it in",
    "start": "2313420",
    "end": "2321640"
  },
  {
    "text": "the return type of so for example I can write another query here that lists all",
    "start": "2321640",
    "end": "2327880"
  },
  {
    "text": "of the pets dtos right and",
    "start": "2327880",
    "end": "2333960"
  },
  {
    "text": "uses my dto dto now there's no there's a couple of ways rules here one is the",
    "start": "2333960",
    "end": "2339220"
  },
  {
    "text": "detail users needs to use at introspective this is our compile time introspection support",
    "start": "2339220",
    "end": "2344859"
  },
  {
    "text": "but another thing that's cool as well is with Micronaut serialization so you might so by default with Micronaut if I",
    "start": "2344859",
    "end": "2351040"
  },
  {
    "text": "would try to serialize this dto so for example if I wrote a controller here called uh endpoint here called",
    "start": "2351040",
    "end": "2359140"
  },
  {
    "text": "that list listed my dto and listed everything right",
    "start": "2359140",
    "end": "2364440"
  },
  {
    "text": "and used this.repository.list",
    "start": "2364440",
    "end": "2368680"
  },
  {
    "text": "and and basically listed all the records if I were to hit that",
    "start": "2369760",
    "end": "2376119"
  },
  {
    "text": "in with curl in here let's hit the pets endpoint it says",
    "start": "2376119",
    "end": "2384280"
  },
  {
    "text": "internal server error so this is expected because with Micronaut data and micro serialization you cannot",
    "start": "2384280",
    "end": "2392260"
  },
  {
    "text": "serialize pet dto without explicitly saying this this is",
    "start": "2392260",
    "end": "2397359"
  },
  {
    "text": "serializable there's been lots of vulnerabilities historically with things like Jackson for arbitrary serialization",
    "start": "2397359",
    "end": "2403480"
  },
  {
    "text": "of parts of the object graph that you didn't expect to be serializable so imagine you have an entity and then you have a field in",
    "start": "2403480",
    "end": "2410079"
  },
  {
    "text": "admin details and then that gets serialized and you didn't realize right so you actually have to with Micronaut",
    "start": "2410079",
    "end": "2416619"
  },
  {
    "text": "serialization and of course we still support Jackson so if you prefer Jackson you can continue using Jackson we haven't dropped support for Jackson but",
    "start": "2416619",
    "end": "2423280"
  },
  {
    "text": "you can build more secure applications by specifically declaring which parts of",
    "start": "2423280",
    "end": "2428440"
  },
  {
    "text": "your application are serializable and not serializable right and there's that session called searchable now that's the",
    "start": "2428440",
    "end": "2434260"
  },
  {
    "text": "kind of both ways so that means serializer will ND serializable but you can also say this is only serializable",
    "start": "2434260",
    "end": "2439960"
  },
  {
    "text": "and it's not deserializable right or vice versa so you can control",
    "start": "2439960",
    "end": "2445240"
  },
  {
    "text": "you're in more control of what parts of your application actually get serialized leaving you less likely and less open to",
    "start": "2445240",
    "end": "2453040"
  },
  {
    "text": "serialization and deserialization vulnerabilities right um so if I save that hopefully uh",
    "start": "2453040",
    "end": "2461980"
  },
  {
    "text": "that last demo will work and it does now you can see I'm retrieving the age and the name of each pet",
    "start": "2461980",
    "end": "2468000"
  },
  {
    "text": "which is cool but the important thing about the dto as well when combined with Micronaut data is Micronaut data is",
    "start": "2468000",
    "end": "2474400"
  },
  {
    "text": "actually optimizing in the query as well to only select the columns underneath that so it's optimizing the query it's",
    "start": "2474400",
    "end": "2480760"
  },
  {
    "text": "not just doing a blind select star and then you know it's actually being smart",
    "start": "2480760",
    "end": "2486040"
  },
  {
    "text": "and optimizing the query and of course Micro Data doesn't take anything away from you you can still come in here and",
    "start": "2486040",
    "end": "2491680"
  },
  {
    "text": "you can write use the art query annotation to you know directly write",
    "start": "2491680",
    "end": "2496720"
  },
  {
    "text": "your SQL or statements and bind them to parameters and in fact I think even the",
    "start": "2496720",
    "end": "2502240"
  },
  {
    "text": "Ides often offer completion for all of the SQL queries nothing is taken away and I'm I'm demonstrating my you know",
    "start": "2502240",
    "end": "2509380"
  },
  {
    "text": "data jdbc because I really like it because of the records support in this much simpler model but we support jpa",
    "start": "2509380",
    "end": "2514839"
  },
  {
    "text": "you can use hibernate if that's what you used to and it's all it also works",
    "start": "2514839",
    "end": "2520420"
  },
  {
    "text": "really well so that was the live coding section of the presentation I hope you enjoyed it",
    "start": "2520420",
    "end": "2526720"
  },
  {
    "text": "and now I'll give you some tips on how you can get started on your own exploring Micronaut and ground VM so if",
    "start": "2526720",
    "end": "2534579"
  },
  {
    "text": "you wanted to create your own application exactly the same as my demo here you can go to start.micronaut.io",
    "start": "2534579",
    "end": "2543460"
  },
  {
    "text": "start.micronaut.io and choose the features that you want I don't know about what you guys are interested in the I demoed here like data with my kind",
    "start": "2543960",
    "end": "2551680"
  },
  {
    "text": "of data jdbc Maybe you prefer jpa maybe for mongodb there's lots of like different Integrations and different",
    "start": "2551680",
    "end": "2557800"
  },
  {
    "text": "possibilities in this demo today I used IntelliJ ultimate but we also have really great tooling for vs code",
    "start": "2557800",
    "end": "2565060"
  },
  {
    "text": "so there's vs code extensions that offer even like finder completion configuration validation",
    "start": "2565060",
    "end": "2572320"
  },
  {
    "text": "in both Ides the documentation for the framework is",
    "start": "2572320",
    "end": "2579040"
  },
  {
    "text": "available at docs.io guides so",
    "start": "2579040",
    "end": "2584200"
  },
  {
    "text": "we don't have a lot of like um kind of sample applications hanging out out there we every single guide for",
    "start": "2584200",
    "end": "2592420"
  },
  {
    "text": "Micronaut and there's dozens of them is also a sample application so if you're",
    "start": "2592420",
    "end": "2597819"
  },
  {
    "text": "looking for sample applications on how to use Micronaut go to",
    "start": "2597819",
    "end": "2603240"
  },
  {
    "text": "guides.micronaut.io because it's awesome and there's loads and loads of guides from Advanced topics like kubernetes",
    "start": "2603240",
    "end": "2609400"
  },
  {
    "text": "service discovery to beginners topics like creating your first micro application now the cool",
    "start": "2609400",
    "end": "2614800"
  },
  {
    "text": "thing is you can go into these guides you can choose whether you you're a Java or a kotlin or a groovy user whether you",
    "start": "2614800",
    "end": "2621099"
  },
  {
    "text": "prefer Maven whether you prefer Gradle choose one of the guides and there's a complement this is just like Hello World",
    "start": "2621099",
    "end": "2626980"
  },
  {
    "text": "right basic application creating your first micro notification you can come in here the guide now the cool thing about",
    "start": "2626980",
    "end": "2633160"
  },
  {
    "text": "the guides is every release of Micronaut we do is tested integration tested with the",
    "start": "2633160",
    "end": "2638980"
  },
  {
    "text": "guides right so we we do a release we bump the version and they get the guides get updated so everything is tested even",
    "start": "2638980",
    "end": "2645220"
  },
  {
    "text": "all the Snippets are tested we you know we there's a huge amount of testing and that's why we went through a phase where",
    "start": "2645220",
    "end": "2650980"
  },
  {
    "text": "we had like random supplications on GitHub and they were not being maintained and the way forward is guides",
    "start": "2650980",
    "end": "2657339"
  },
  {
    "text": "we have like any each one if you look over here you can download the complete solution",
    "start": "2657339",
    "end": "2664119"
  },
  {
    "text": "by clicking this button as a zip file so you go to the source code you've got the sample application",
    "start": "2664119",
    "end": "2669579"
  },
  {
    "text": "whatever language you choose whatever build tool you choose so the guides for for Micronaut are really great",
    "start": "2669579",
    "end": "2676839"
  },
  {
    "text": "and for growl DM you can learn more about girl VM at growlvm.org so and that",
    "start": "2676839",
    "end": "2684099"
  },
  {
    "text": "brings me to the final part which is like the deployment options so to deploy a market application you",
    "start": "2684099",
    "end": "2690940"
  },
  {
    "text": "can Gradle W assemble a runnable uh jar file",
    "start": "2690940",
    "end": "2697800"
  },
  {
    "text": "and that will build like a Java file which I can run you can also do Gradle W",
    "start": "2697839",
    "end": "2704140"
  },
  {
    "text": "um uh Docker build which will which will build a Docker image",
    "start": "2704140",
    "end": "2710200"
  },
  {
    "text": "for my application and all of these commands have equivalence in Maven so we have maybe I think it's Maven W package",
    "start": "2710200",
    "end": "2717960"
  },
  {
    "text": "packaging Docker or whatever and you know all of",
    "start": "2717960",
    "end": "2723339"
  },
  {
    "text": "them have equivalents in Maven as well so you can build Docker images and the other thing is you can build is native",
    "start": "2723339",
    "end": "2729040"
  },
  {
    "text": "images so you can say native compile and this will compile the application into into a native image you can even",
    "start": "2729040",
    "end": "2735460"
  },
  {
    "text": "run the native image locally and the only thing you do have to do is activate test resources from the Native image and",
    "start": "2735460",
    "end": "2742119"
  },
  {
    "text": "if I do this it will compile the application my complete application into a native executable withdrawal VM and",
    "start": "2742119",
    "end": "2748060"
  },
  {
    "text": "the other command that's useful is Gradle W native test so you can do you can write J in the five tests that are",
    "start": "2748060",
    "end": "2754720"
  },
  {
    "text": "natively executable and you can write native tests and you can also do Gradle",
    "start": "2754720",
    "end": "2760480"
  },
  {
    "text": "W test hyphen P agent which will activate the ground VM tracing agent if",
    "start": "2760480",
    "end": "2765700"
  },
  {
    "text": "you wanted to like produce your own reflective data but in most cases you don't need to think about that right you",
    "start": "2765700",
    "end": "2770920"
  },
  {
    "text": "just build a native image or you can do Gradle or W Docker build native and and build a Docker image from",
    "start": "2770920",
    "end": "2778420"
  },
  {
    "text": "from using native image and and you're ready to go now one thing to remember",
    "start": "2778420",
    "end": "2784480"
  },
  {
    "text": "with Native image is the the image that's being produced now is specific to this machine this",
    "start": "2784480",
    "end": "2791980"
  },
  {
    "text": "happens to be a relatively long in the tooth Intel based MacBook Pro",
    "start": "2791980",
    "end": "2798700"
  },
  {
    "text": "um if you so it's going to build it in an x86 image for the Mac if you're on an",
    "start": "2798700",
    "end": "2804220"
  },
  {
    "text": "arm machine uh you know the new the newer M2 MacBooks whatever that will build an Arm based so it's going to",
    "start": "2804220",
    "end": "2810880"
  },
  {
    "text": "build an image that is specific to the machine that's that's also where Docker comes in useful because you know you can",
    "start": "2810880",
    "end": "2816880"
  },
  {
    "text": "just literally build for different architectures and so forth um but typically when you build native",
    "start": "2816880",
    "end": "2822339"
  },
  {
    "text": "images you're going to do them in your CI pipeline right on your in your CI CD",
    "start": "2822339",
    "end": "2827800"
  },
  {
    "text": "infrastructure build which is probably going to be Linux based and you're going to be developing Linux images you're",
    "start": "2827800",
    "end": "2833920"
  },
  {
    "text": "going to be deploying them to uh to Containers etc etc uh so",
    "start": "2833920",
    "end": "2839400"
  },
  {
    "text": "uh yeah Micronaut has first class support for Native image and we have in micro four we have invested huge amounts",
    "start": "2839400",
    "end": "2845859"
  },
  {
    "text": "in making it writing new tests uh and using the shared gravity and metadata",
    "start": "2845859",
    "end": "2851440"
  },
  {
    "text": "repository which we co-developed with the spring team to basically share",
    "start": "2851440",
    "end": "2857319"
  },
  {
    "text": "metadata across the the community and the ecosystem um so whilst that image is building and I'm",
    "start": "2857319",
    "end": "2864640"
  },
  {
    "text": "sort of it'll build and start up immensely um the Micronaut framework and gravyam",
    "start": "2864640",
    "end": "2869980"
  },
  {
    "text": "are leading this revolution into ahead of time compilation aot",
    "start": "2869980",
    "end": "2875819"
  },
  {
    "text": "Micronaut was the first framework to support growl VM native images in the recent times server-side Java is",
    "start": "2875819",
    "end": "2883060"
  },
  {
    "text": "adapting to this new world right and micro number is really pushing boundaries with regards to what is",
    "start": "2883060",
    "end": "2889780"
  },
  {
    "text": "possible with modern architectures building more efficient applications is possible today right now with the right",
    "start": "2889780",
    "end": "2896560"
  },
  {
    "text": "framework choices and whilst iot does sacrifice some compilation speed it opens up",
    "start": "2896560",
    "end": "2903400"
  },
  {
    "text": "possibilities that we're not technically possible before to take Java to new workloads particularly in serverless",
    "start": "2903400",
    "end": "2910240"
  },
  {
    "text": "containerized workloads iot etc etc even command line applications",
    "start": "2910240",
    "end": "2916540"
  },
  {
    "text": "you know we have a lot of people using Micronaut plus gravim to build really great command line experiences for Java",
    "start": "2916540",
    "end": "2923260"
  },
  {
    "text": "using Java you know these things were not technically possible before it's reality today and it's really exciting",
    "start": "2923260",
    "end": "2930520"
  },
  {
    "text": "time to be a Java developer so I hope you all get to try these Technologies I think they are very very cool",
    "start": "2930520",
    "end": "2936640"
  },
  {
    "text": "so thank you very much I hope you enjoyed the talk and if you have any questions after the talk don't hesitate",
    "start": "2936640",
    "end": "2942700"
  },
  {
    "text": "to ask or be around [Applause]",
    "start": "2942700",
    "end": "2951479"
  }
]