[
  {
    "text": "[Music] so yes my name is Andreas halber I come",
    "start": "6990",
    "end": "12440"
  },
  {
    "text": "from a Swedish company called trusk and I'm going to be talking about secure cating patterns but not only are they",
    "start": "12440",
    "end": "18480"
  },
  {
    "text": "secure they're also robust and rugged of course since this is the uh rugged track",
    "start": "18480",
    "end": "24199"
  },
  {
    "text": "so robustness is really an important word I think in security because if it's not robust it's not likely to be secure",
    "start": "24199",
    "end": "32640"
  },
  {
    "text": "uh please remember to rate this session you all know this um so but I'm repeating it",
    "start": "32640",
    "end": "38559"
  },
  {
    "text": "anyway uh so yes I work at trusk here's us on a company trip in South Africa uh",
    "start": "38559",
    "end": "45320"
  },
  {
    "text": "most of my time I spend developing maybe 95% of my time spent developing uh used",
    "start": "45320",
    "end": "51039"
  },
  {
    "text": "to do a lot of CP now it's uh mostly Java these days uh I also do some U security code",
    "start": "51039",
    "end": "58320"
  },
  {
    "text": "reviews security penetration test in security training and stuff like this basically anything security related and",
    "start": "58320",
    "end": "64878"
  },
  {
    "text": "if you don't want know what I look like uh that's me right there and uh now I've been out talking a little bit in",
    "start": "64879",
    "end": "70720"
  },
  {
    "text": "conferences like this I've noticed I become somewhat of an Internet celebrity in fact here's just a sample of the",
    "start": "70720",
    "end": "77400"
  },
  {
    "text": "pictures that are out on the internet of me yeah so Paparazzi is",
    "start": "77400",
    "end": "83320"
  },
  {
    "text": "everywhere yeah not too shabby a bad hair day but you know you can't win them all so anyway security let's talk talk",
    "start": "83320",
    "end": "90079"
  },
  {
    "text": "about it it's important or is it uh why why are we here why are you why are we",
    "start": "90079",
    "end": "95640"
  },
  {
    "text": "discussing this at all the thing is when I talk to uh oh",
    "start": "95640",
    "end": "101280"
  },
  {
    "text": "sorry too far when I talk to developers I I find a lot of the time that many are",
    "start": "101280",
    "end": "106520"
  },
  {
    "text": "dissolution with security they say that there's no point in securing my code",
    "start": "106520",
    "end": "111560"
  },
  {
    "text": "because if someone wants to get in you know they're going to get in eventually if the NSA is after me they're going to",
    "start": "111560",
    "end": "117719"
  },
  {
    "text": "hack me no matter what I do well maybe that's true if the NSA is after you but",
    "start": "117719",
    "end": "123840"
  },
  {
    "text": "NSA is not after you and your application your application is the target of an army of mediocre semi",
    "start": "123840",
    "end": "132000"
  },
  {
    "text": "criminals and kids in basements okay that's the uh that's the major threat to",
    "start": "132000",
    "end": "138959"
  },
  {
    "text": "your to your uh application and the thing is when we do",
    "start": "138959",
    "end": "144040"
  },
  {
    "text": "penetration tests uh at TR SEC we don't have to bring out the big guns we don't use zero days to take over your systems",
    "start": "144040",
    "end": "150800"
  },
  {
    "text": "we just use basic flaws that you could have fixed you know with a minimal effort there's a SQL injection there's a",
    "start": "150800",
    "end": "156599"
  },
  {
    "text": "command injection we can run system commands vi from your website we can upload a file and and run it on your",
    "start": "156599",
    "end": "162800"
  },
  {
    "text": "website without any problems these are the trivial mistakes that we find that",
    "start": "162800",
    "end": "167920"
  },
  {
    "text": "you can fix so just like Josh uh said this morning you are the cavalary the",
    "start": "167920",
    "end": "174319"
  },
  {
    "text": "cavalary is not coming we are the cavalary okay and we can fix this and also uh in the the uh rugged Manifesto",
    "start": "174319",
    "end": "181720"
  },
  {
    "text": "Josh was talking about it said that you should assume that your code is being attacked by a skilled uh I can't",
    "start": "181720",
    "end": "188519"
  },
  {
    "text": "remember the exact words but a talented and persistent adversary I want to say that talented",
    "start": "188519",
    "end": "195200"
  },
  {
    "text": "maybe not so much you know don't be afraid don't be disolution persistent yes these people have a lot of time but",
    "start": "195200",
    "end": "201920"
  },
  {
    "text": "they're not that smart don't give them that much credit they they're persistent they use tools and use the basic flaws",
    "start": "201920",
    "end": "208439"
  },
  {
    "text": "uh that you have in your code and have in our code so it's um here's a picture of a",
    "start": "208439",
    "end": "215360"
  },
  {
    "text": "it's not a Cavalry man but an infantry man this is the Sweden's fictitious national hero send duva who",
    "start": "215360",
    "end": "222000"
  },
  {
    "text": "single-handedly held the bridge against this ragtag Army of Russian Invaders uh there's no uh similarity to the internet",
    "start": "222000",
    "end": "228799"
  },
  {
    "text": "world of course they can be from another country than Russia but the thing is armed with a little bit of knowledge and",
    "start": "228799",
    "end": "234680"
  },
  {
    "text": "uh daring you can hold the bridge against uh this Army of mediocre attackers okay it's the 8020 rule uh",
    "start": "234680",
    "end": "242439"
  },
  {
    "text": "which we learned is called the peretto rule I think with 20% effort you get 80%",
    "start": "242439",
    "end": "247680"
  },
  {
    "text": "done okay so let's get started I'm going to be talking about trust setting the",
    "start": "247680",
    "end": "253840"
  },
  {
    "text": "stage for the rest of the talk and I'm going to uh dive into the U the patterns",
    "start": "253840",
    "end": "260560"
  },
  {
    "text": "hold a second and uh the first pattern or method I'm going to be talking about",
    "start": "260560",
    "end": "265600"
  },
  {
    "text": "is called domain driven security it's uh based on domain driven design which um I'm sure many of you are",
    "start": "265600",
    "end": "273000"
  },
  {
    "text": "familiar with I'm going to be talking about something called the untrusted",
    "start": "273000",
    "end": "278720"
  },
  {
    "text": "pattern I'm going to be talking about immutability and finally the uh weirdly",
    "start": "278720",
    "end": "284960"
  },
  {
    "text": "named the inverse life coach pattern so let's get started trust the",
    "start": "284960",
    "end": "291199"
  },
  {
    "text": "foundation of software security oh bold words yes it is the foundation of software security many security issues",
    "start": "291199",
    "end": "298479"
  },
  {
    "text": "if not most boil down to poor understanding of where we and our code uh is are placing the",
    "start": "298479",
    "end": "305720"
  },
  {
    "text": "trust so let us uh take a look at a typical interaction here how do we control who we trust how do we establish",
    "start": "305720",
    "end": "312479"
  },
  {
    "text": "trust this these are important things so here's uh businessman Bob he's at the",
    "start": "312479",
    "end": "319440"
  },
  {
    "text": "bank they're authentic themselves to each other and then uh Bob wants to",
    "start": "319440",
    "end": "325120"
  },
  {
    "text": "transfer xur from account y to account Z and sure go ahead so what could go wrong",
    "start": "325120",
    "end": "332639"
  },
  {
    "text": "this is just like a typical thing you have an authentication step and you have an action that needs to be performed what could go wrong",
    "start": "332639",
    "end": "340120"
  },
  {
    "text": "here uh yeah so first of all let's look at the actual authentication how does uh how can the",
    "start": "340120",
    "end": "346520"
  },
  {
    "text": "bank be sure that Bob is indeed Bob and how can Bob be sure that the bank is the",
    "start": "346520",
    "end": "353439"
  },
  {
    "text": "bank and uh when he wants to transfer the money how do we even know that Bob",
    "start": "353479",
    "end": "358560"
  },
  {
    "text": "owns account y do we know that account y holds the amount that he wants to transfer in fact",
    "start": "358560",
    "end": "366120"
  },
  {
    "text": "uh yeah and in fact do we even know that X is a number is it a or minus one or Fu",
    "start": "366120",
    "end": "373039"
  },
  {
    "text": "or something so depending on which side you're on you can really get screwed here Bob could screw the bank or the",
    "start": "373039",
    "end": "379120"
  },
  {
    "text": "bank could screw Bob so let's visualize trust as a circle of trust and",
    "start": "379120",
    "end": "386360"
  },
  {
    "text": "um as an application or API what whatever we have all this stuff that is",
    "start": "386360",
    "end": "391840"
  },
  {
    "text": "outside the circle of trust you have the user definitely not trusted you have the data that's coming you have the database",
    "start": "391840",
    "end": "399319"
  },
  {
    "text": "you have third- party services and etc etc and there is a",
    "start": "399319",
    "end": "405680"
  },
  {
    "text": "trust boundary here what that means is that everything outside the trust",
    "start": "405680",
    "end": "410880"
  },
  {
    "text": "boundary is untrusted and everything inside is trusted and so I'm going to burn your eyes out with this slide here",
    "start": "410880",
    "end": "417039"
  },
  {
    "text": "it's going to be on your retina for the next 30 minutes so this is really simple and and uh but",
    "start": "417039",
    "end": "422639"
  },
  {
    "text": "an illustrative slide has some many important Concepts one is that the trusted area is bounded it's small we",
    "start": "422639",
    "end": "431280"
  },
  {
    "text": "can enumerate everything inside the trusted area whereas the untrusted is unbounded it has no limits it's so much",
    "start": "431280",
    "end": "438759"
  },
  {
    "text": "larger and meaning that this is why white listing versus black listing doesn't work I'll be talking about that",
    "start": "438759",
    "end": "444639"
  },
  {
    "text": "a bit later white listing is where you enumerate everything that is allowed whereas black listing is where you try",
    "start": "444639",
    "end": "450160"
  },
  {
    "text": "to enumerate and list everything that's not allowed just by looking at this you can see that black listing does not work",
    "start": "450160",
    "end": "455680"
  },
  {
    "text": "because everything that's not allowed is practically infinite so that's why we should do wh listing over black",
    "start": "455680",
    "end": "463360"
  },
  {
    "text": "listing but then uh after all how does something from the untrusted area become",
    "start": "463360",
    "end": "469039"
  },
  {
    "text": "trusted after all we need to work with all this data otherwise our application is",
    "start": "469039",
    "end": "474400"
  },
  {
    "text": "useless uh well through every uh developer favorite",
    "start": "474400",
    "end": "479960"
  },
  {
    "text": "activity validation that's the most fun part of your application that's the first thing you start to do when you write new not new features not nothing",
    "start": "479960",
    "end": "487039"
  },
  {
    "text": "like that you start with a validation maybe not but the thing is validation is your tool to make sure that you have",
    "start": "487039",
    "end": "494560"
  },
  {
    "text": "trusted data so two things can happen either your data is valid it is in allowed",
    "start": "494560",
    "end": "502039"
  },
  {
    "text": "inside the circle of trust or it's not valid it's rejected and bounces",
    "start": "502039",
    "end": "507520"
  },
  {
    "text": "out so validation uh there's some different types of validation we have",
    "start": "507520",
    "end": "512599"
  },
  {
    "text": "the what you normally think of validation meaning that is the data valid in the",
    "start": "512599",
    "end": "518760"
  },
  {
    "text": "domain like we can't transfer a Euros or minus one there's also uh",
    "start": "519719",
    "end": "527240"
  },
  {
    "text": "canonicalization and normalization I think canonicalization is like C13 n or something if you want",
    "start": "527240",
    "end": "533600"
  },
  {
    "text": "to be cool but uh this these are things that must happen before validation here you see a potential path traversal",
    "start": "533600",
    "end": "540399"
  },
  {
    "text": "attack as it's called maybe you're letting people upload stuff through public file upload but some attacker sends a file",
    "start": "540399",
    "end": "548800"
  },
  {
    "text": "with the file name do do/ do do/ Secrets keys so your operating system is going",
    "start": "548800",
    "end": "553920"
  },
  {
    "text": "to collapse it to see Secrets keys but if you validate this and see that yeah it's going to public file upload you",
    "start": "553920",
    "end": "560160"
  },
  {
    "text": "will be the victim of a path traversal attack so that's normalization has to happen before",
    "start": "560160",
    "end": "566279"
  },
  {
    "text": "validation then there's sanitization uh where you clean up uh dangerous or",
    "start": "566519",
    "end": "571920"
  },
  {
    "text": "unknown data and a textbook example is log injection uh you all have logging on",
    "start": "571920",
    "end": "577560"
  },
  {
    "text": "your websites and uh if someone enters a value that you don't recognize maybe you",
    "start": "577560",
    "end": "583120"
  },
  {
    "text": "say okay I got this I expected X Euros but got minus one and then you log the",
    "start": "583120",
    "end": "588399"
  },
  {
    "text": "minus one how do you know that user doesn't type into a new line and a total",
    "start": "588399",
    "end": "593440"
  },
  {
    "text": "new row of uh logging that way the the malicious user can actually insert rows",
    "start": "593440",
    "end": "598839"
  },
  {
    "text": "into your log so you have to clean up the data that's coming that you're logging also so that's",
    "start": "598839",
    "end": "605440"
  },
  {
    "text": "sanitization now validation I mentioned this before always prefer white listing over black listing remember the image",
    "start": "605440",
    "end": "612320"
  },
  {
    "text": "it's easy to you you cannot know everything that's not valid but you can know what's valid and another thing with strict",
    "start": "612320",
    "end": "619760"
  },
  {
    "text": "validation besides uh being a security uh thing that makes your that moves",
    "start": "619760",
    "end": "626279"
  },
  {
    "text": "stuff from the untrusted to The Trusted side it helps you find bugs early instead of you know getting an",
    "start": "626279",
    "end": "633560"
  },
  {
    "text": "exception eight layers down in your code and spending half a day trying to figure out and pouring over stack traces if you",
    "start": "633560",
    "end": "639440"
  },
  {
    "text": "had caught it up here where it entered your application you would have seen that oh this value was minus one or a is",
    "start": "639440",
    "end": "645040"
  },
  {
    "text": "not allowed it could have saved you all that time so it finds bugs early if you fail fast so every time",
    "start": "645040",
    "end": "651519"
  },
  {
    "text": "you you validate something you wanted to ask yourself okay what is the minimum",
    "start": "651519",
    "end": "657360"
  },
  {
    "text": "acceptable range for this parameter and make your validation not accept any more than that because it's always tempting",
    "start": "657360",
    "end": "663959"
  },
  {
    "text": "as a developer to say okay okay I have an account number it today it's supposed",
    "start": "663959",
    "end": "669600"
  },
  {
    "text": "to be 10 digits but I know or I think I know that you know in a few months or",
    "start": "669600",
    "end": "674880"
  },
  {
    "text": "half a year Management's going to say you know now our account numbers are 12 digits or 15 and I don't want to you",
    "start": "674880",
    "end": "682079"
  },
  {
    "text": "know release this code again and have them complaining that stuff doesn't work anymore so I'll just allow 100",
    "start": "682079",
    "end": "689920"
  },
  {
    "text": "uh characters for the account number don't do that be be safe and say that",
    "start": "689920",
    "end": "695079"
  },
  {
    "text": "this is what I know right now and this is what I'm going to",
    "start": "695079",
    "end": "699160"
  },
  {
    "text": "validate so that's uh briefly about trust and validation so without further",
    "start": "700760",
    "end": "707079"
  },
  {
    "text": "Ado let's get our hands dirty and look at some code domain driven security how",
    "start": "707079",
    "end": "713399"
  },
  {
    "text": "many in here are are somewhat familiar with domain driven design hands up okay",
    "start": "713399",
    "end": "719079"
  },
  {
    "text": "good good that's almost everyone yeah how many know what the domain model is just a domain yeah yeah it's it's not",
    "start": "719079",
    "end": "725480"
  },
  {
    "text": "hard a domain is just like the objects in your solution if I'm working with a bank I have an account I have a user I",
    "start": "725480",
    "end": "732000"
  },
  {
    "text": "have money and you know those those types of objects and domain driven",
    "start": "732000",
    "end": "737320"
  },
  {
    "text": "design talks about how these objects are related to each other how you create them how you save them how you",
    "start": "737320",
    "end": "743199"
  },
  {
    "text": "manipulate them Etc so domain driven security is",
    "start": "743199",
    "end": "749199"
  },
  {
    "text": "domainer design plus some conventions for validation it's really simple but profound pattern and the thing with this",
    "start": "749199",
    "end": "756120"
  },
  {
    "text": "is it helps us with a trust boundary and it gives us validation everywhere in a good way so domain D in security was",
    "start": "756120",
    "end": "762519"
  },
  {
    "text": "coined by um uh two developers at the Swedish company actually called Omega points so I haven't made this up myself",
    "start": "762519",
    "end": "769000"
  },
  {
    "text": "at all none of these patterns I've made up myself I just collected them okay so let's look at our interaction here again",
    "start": "769000",
    "end": "776560"
  },
  {
    "text": "here's Bob again so Bob is coming back to the B the bank trusts him and they",
    "start": "776560",
    "end": "782360"
  },
  {
    "text": "forget to validate now because well Bob was trusted right so but see what uh",
    "start": "782360",
    "end": "788199"
  },
  {
    "text": "he's doing now he's transferring a minus 10 a minus th000 EUR instead from",
    "start": "788199",
    "end": "793560"
  },
  {
    "text": "account y to account Z and Bank says sure fine why not I've already validated you I trust you everything's fine and",
    "start": "793560",
    "end": "800680"
  },
  {
    "text": "kaching Bobs ends up with this note in his pocket so the thing with with",
    "start": "800680",
    "end": "806000"
  },
  {
    "text": "validation is that you are painfully aware of that it has to be performed over and",
    "start": "806000",
    "end": "811760"
  },
  {
    "text": "over right and because of this it's easy to forget to validate somewhere and it",
    "start": "811760",
    "end": "818399"
  },
  {
    "text": "ends up everywhere in the code but it's still forgotten",
    "start": "818399",
    "end": "823480"
  },
  {
    "text": "somewhere and it's easy to forget to validate something that you think is trusted like an internal database I mean",
    "start": "825079",
    "end": "832519"
  },
  {
    "text": "a database you think that all data is coming from the database you know we control the database we should trust it",
    "start": "832519",
    "end": "838880"
  },
  {
    "text": "well there's something called crossy scripting which you may or may not be familiar with with people in where you",
    "start": "838880",
    "end": "844759"
  },
  {
    "text": "can inject script tags into uh HTML Pages essentially running scripts uh in",
    "start": "844759",
    "end": "850240"
  },
  {
    "text": "the context of the logged in user so you can store if someone inserts a script uh into your database and you show it on a",
    "start": "850240",
    "end": "857320"
  },
  {
    "text": "page you're the victim of the stored crossy scripting that's the I don't know if you remember the Myspace worm uh many",
    "start": "857320",
    "end": "864720"
  },
  {
    "text": "years ago that was a crossy scripting attack and um my mypace a funny just",
    "start": "864720",
    "end": "871360"
  },
  {
    "text": "totally off topic here but I got an email 3 days ago about a security vulnerability in Myspace did anyone of you get this also maybe I was yeah one",
    "start": "871360",
    "end": "879399"
  },
  {
    "text": "guy hey I didn't even know Myspace existed anymore I apparently I had an account that they had an A B had a",
    "start": "879399",
    "end": "885680"
  },
  {
    "text": "breach so they had to email everybody and be publicly shamed and the developer maybe even more",
    "start": "885680",
    "end": "892440"
  },
  {
    "text": "so uh so let's take a look at the uh trust boundary again and see how domainer in",
    "start": "892440",
    "end": "898480"
  },
  {
    "text": "security can can help with this so back to the circle of trust so if you have",
    "start": "898480",
    "end": "904560"
  },
  {
    "text": "your regular validation of uh your types you can still be secure like you validate them you're inside the circle",
    "start": "904560",
    "end": "910880"
  },
  {
    "text": "of trust everything's green but this is a picture where it's green the problem is you can't look at your code and see",
    "start": "910880",
    "end": "918199"
  },
  {
    "text": "that this string which is an account number maybe or this integer which is a",
    "start": "918199",
    "end": "923240"
  },
  {
    "text": "sum has been validated there's no way for you to see that in your code it doesn't pop out",
    "start": "923240",
    "end": "930320"
  },
  {
    "text": "so domain d security what that does is that primitive types and data structures are untrusted by default if you see a",
    "start": "931480",
    "end": "938720"
  },
  {
    "text": "string an integer a bite array or whatever that's being passed around you know that it has not been validated so",
    "start": "938720",
    "end": "945279"
  },
  {
    "text": "we always use domain objects and the special thing which is the security part",
    "start": "945279",
    "end": "950319"
  },
  {
    "text": "of domain driven security is that all the domain objects by convention must have built in validation they cannot be",
    "start": "950319",
    "end": "957360"
  },
  {
    "text": "created invalid is the key convention here they also a good thing for them to",
    "start": "957360",
    "end": "962600"
  },
  {
    "text": "be mutable we're going to talk about that a little bit more later",
    "start": "962600",
    "end": "968480"
  },
  {
    "text": "so uh with the domain objects our circle of trust looks like this instead uh we",
    "start": "968480",
    "end": "974639"
  },
  {
    "text": "have inside the circle we have the domain objects we don't have the Primitive types we don't have strings integers floating around so uh string",
    "start": "974639",
    "end": "982040"
  },
  {
    "text": "containing in account number turns into an account object an integer which is an amount let's see yeah it works turns out",
    "start": "982040",
    "end": "988519"
  },
  {
    "text": "into an amount object so inside the trust boundary only the validated domain objects are used",
    "start": "988519",
    "end": "995839"
  },
  {
    "text": "and uh here's an example of the typical domain object then you have your account number which you see the key part is",
    "start": "995839",
    "end": "1003199"
  },
  {
    "text": "that upon creation it's validated right you cannot",
    "start": "1003199",
    "end": "1009079"
  },
  {
    "text": "create an invalid account number there can never be an invalid account number being passed around and used somewhere",
    "start": "1009079",
    "end": "1015639"
  },
  {
    "text": "deep in deep in your code because you will catch it immediately on creation that's it that's domain d security",
    "start": "1015639",
    "end": "1022279"
  },
  {
    "text": "that's the whole key okay and notice also the final keyword up there I'm",
    "start": "1022279",
    "end": "1027918"
  },
  {
    "text": "going to discuss that a little bit more later meaning that it's immutable so that's it you have if you have a domain",
    "start": "1027919",
    "end": "1033558"
  },
  {
    "text": "model applying domain driven security is easy okay you just add validation to",
    "start": "1033559",
    "end": "1039199"
  },
  {
    "text": "your domain objects you have to of course remember to do this it's not going to happen",
    "start": "1039199",
    "end": "1045240"
  },
  {
    "text": "automatically but after a while it becomes second nature and if you see a domain without validation you're going",
    "start": "1045240",
    "end": "1050480"
  },
  {
    "text": "to react and say what's this this is uh strange so if you have a web service uh",
    "start": "1050480",
    "end": "1056760"
  },
  {
    "text": "circle of trust you have a soap call integer strings bites coming in you get your user object get your account",
    "start": "1056760",
    "end": "1063640"
  },
  {
    "text": "object but if we get some uh invalid data it's just going to bounce off an as",
    "start": "1063640",
    "end": "1068919"
  },
  {
    "text": "an exception so you know you know that everything inside your circle is going to be fine and you're going to be happy",
    "start": "1068919",
    "end": "1075120"
  },
  {
    "text": "we don't have to worry about it another thing that domain driven",
    "start": "1075120",
    "end": "1081159"
  },
  {
    "text": "security uh does for you is that it immediately tells you when you forgot to",
    "start": "1081159",
    "end": "1086799"
  },
  {
    "text": "validate something so here you have the reticulate function which reticulates a spline and on some certain angle but you",
    "start": "1086799",
    "end": "1093320"
  },
  {
    "text": "know what's going on here angle integer what what is that angle can it be negative can it be how large can it be",
    "start": "1093320",
    "end": "1099640"
  },
  {
    "text": "is it in radians probably not since in an integer but still there's nothing telling you anything about this angle",
    "start": "1099640",
    "end": "1105640"
  },
  {
    "text": "here it's just an integer so this is what it should look like the angle should have its own domain object I",
    "start": "1105640",
    "end": "1112640"
  },
  {
    "text": "think this is a good example because it shows that even such a trivial thing such as an angle should have its own",
    "start": "1112640",
    "end": "1118440"
  },
  {
    "text": "domain object maybe you're not thinking this way that oh this is it's not worthy of an object it is it's cheap and easy",
    "start": "1118440",
    "end": "1126000"
  },
  {
    "text": "to create objects so let's go ahead and do it so anytime you see something not",
    "start": "1126000",
    "end": "1131520"
  },
  {
    "text": "being a domain object in a a function a public function in your class you know that you forgot to validate something",
    "start": "1131520",
    "end": "1139880"
  },
  {
    "text": "so in the first example like if you don't have validation in the domain object now reticulate would have to",
    "start": "1139880",
    "end": "1145159"
  },
  {
    "text": "remember to do the validation you you would again get this validation spread out everywhere in your",
    "start": "1145159",
    "end": "1151039"
  },
  {
    "text": "code another another thing is that U domain d security or domain driven",
    "start": "1151039",
    "end": "1156240"
  },
  {
    "text": "design actually helps us uh lean on the type system so here you have something U",
    "start": "1156240",
    "end": "1161919"
  },
  {
    "text": "that heats Heats something up for a certain amount of time to a certain temperature maybe it's a reactor right",
    "start": "1161919",
    "end": "1167880"
  },
  {
    "text": "so we want that to uh boil for 5 minutes which would probably heat I know Amsterdam for or give it electricity for",
    "start": "1167880",
    "end": "1175440"
  },
  {
    "text": "I have no idea a minute maybe but uh is this really what's going to happen here",
    "start": "1175440",
    "end": "1181440"
  },
  {
    "text": "you see anything wrong with this yeah yeah it's not going to boil for 5 minutes it's going to be at five",
    "start": "1181440",
    "end": "1188880"
  },
  {
    "text": "cool degrees Celsius for about 100 minutes so everyone is everyone is going to start complaining of how nuclear",
    "start": "1188880",
    "end": "1195080"
  },
  {
    "text": "energy doesn't work and we should go coal instead because that's much better so yeah of course this is what you",
    "start": "1195080",
    "end": "1202559"
  },
  {
    "text": "want here you have proper domain object the type system will tell you during compilation if you're calling this",
    "start": "1202559",
    "end": "1208919"
  },
  {
    "text": "function with the object switched so that's robust and rugged I think and it helps you with",
    "start": "1208919",
    "end": "1215679"
  },
  {
    "text": "security so another thing when you use domain driven security for a while seeing validation outside of",
    "start": "1217919",
    "end": "1225880"
  },
  {
    "text": "domain objects almost becomes like a code smell so here you have something you pick up a",
    "start": "1225880",
    "end": "1232320"
  },
  {
    "text": "account number for a user from the database so we do some validation throw for an",
    "start": "1232320",
    "end": "1238080"
  },
  {
    "text": "exception and uh but if it passes the validation we say okay we transfer it but compare it to this so what we would",
    "start": "1238080",
    "end": "1246600"
  },
  {
    "text": "do is we would new up an account number and then we would do the transfer it's much cleaner much easier to read and We",
    "start": "1246600",
    "end": "1252280"
  },
  {
    "text": "Know by convention the validation will be done in there so the code you know",
    "start": "1252280",
    "end": "1257720"
  },
  {
    "text": "it's it's transparent to the to the successful path use case while while still protecting you from the uh from",
    "start": "1257720",
    "end": "1264840"
  },
  {
    "text": "the uh the bad paths so don't be afraid to create",
    "start": "1264840",
    "end": "1271720"
  },
  {
    "text": "objects by the way how many are C programmers in here okay and",
    "start": "1271720",
    "end": "1278640"
  },
  {
    "text": "Java okay mostly Java right and anything else a few yeah it's still I think uh",
    "start": "1278640",
    "end": "1287679"
  },
  {
    "text": "Java is G in a bit on C I've been asking this question for for a",
    "start": "1287679",
    "end": "1292840"
  },
  {
    "text": "while cool well I'm in Java myself now after a long time with C so so let's",
    "start": "1292840",
    "end": "1300200"
  },
  {
    "text": "reiterate the essentials of domain driven security you know by convention that all",
    "start": "1300200",
    "end": "1305679"
  },
  {
    "text": "domain objects are valid because you that's the convention you have to validate them and you know that you",
    "start": "1305679",
    "end": "1312039"
  },
  {
    "text": "forgot to validate something if you see primitive types being passed around like the angle we had there the heat the",
    "start": "1312039",
    "end": "1318080"
  },
  {
    "text": "duration uh which were integers in the example that's where the type system",
    "start": "1318080",
    "end": "1323320"
  },
  {
    "text": "comes in and ensurance that the correct domain object must be used and of course there are still a lot",
    "start": "1323320",
    "end": "1330080"
  },
  {
    "text": "of validation that does not fit inside uh inside the uh domain object there are",
    "start": "1330080",
    "end": "1335440"
  },
  {
    "text": "still business rules like is this user allow does this user have access to this entity or whatever this stuff of course",
    "start": "1335440",
    "end": "1341679"
  },
  {
    "text": "you still have to validate maybe there are some more domain objects that can pop out that you can put your validation",
    "start": "1341679",
    "end": "1347039"
  },
  {
    "text": "in but there's not a place place for a domain object everywhere there's still a bunch of validation has to be done but",
    "start": "1347039",
    "end": "1353200"
  },
  {
    "text": "at least you know that the basic building blocks of your application are valid you will catch these validation",
    "start": "1353200",
    "end": "1359240"
  },
  {
    "text": "bugs early you will not have them explode down here in the database or close to it you will catch them up in the you know the first service layer you",
    "start": "1359240",
    "end": "1368159"
  },
  {
    "text": "have and there's one more thing uh that I want to talk about here uh which I",
    "start": "1368200",
    "end": "1375279"
  },
  {
    "text": "sort of shoehorn into the domainer security design it's the question about null what do we do with",
    "start": "1375279",
    "end": "1381159"
  },
  {
    "text": "null what is null null is a construct that some languages have languages which",
    "start": "1381159",
    "end": "1387520"
  },
  {
    "text": "use a reference type which is where you need to denote that this is an invalid reference a reference that has not been",
    "start": "1387520",
    "end": "1394039"
  },
  {
    "text": "instantiated or assigned to an object so some languages these days do not have",
    "start": "1394039",
    "end": "1399360"
  },
  {
    "text": "null because the dangers of null have been realized null is an invalid pointer",
    "start": "1399360",
    "end": "1404520"
  },
  {
    "text": "it causes exceptions it's just a bad idea so never use null in your code do",
    "start": "1404520",
    "end": "1410279"
  },
  {
    "text": "not write the word null unless you're doing a null check in your domain object saying that I'm constructing this from",
    "start": "1410279",
    "end": "1416120"
  },
  {
    "text": "something and the the thing that I'm constructing it from should not be null what are the reasons why you would want",
    "start": "1416120",
    "end": "1422760"
  },
  {
    "text": "to use null typical is oh this value might not exist I'm picking something up",
    "start": "1422760",
    "end": "1427840"
  },
  {
    "text": "from the database it doesn't exist I'll just return null well returning",
    "start": "1427840",
    "end": "1434120"
  },
  {
    "text": "null uh and pardon me is like returning a bag of burning dog crap okay and if",
    "start": "1434120",
    "end": "1441000"
  },
  {
    "text": "the person know the code that that gets this Burning bag manages not to get hurt they're still left with a disgusting",
    "start": "1441000",
    "end": "1446840"
  },
  {
    "text": "smelly object that they now have to handle you know don't be that person that gives someone else a burning bag of",
    "start": "1446840",
    "end": "1452480"
  },
  {
    "text": "dog crap okay so make it explicit Java has this type the optional of this is in",
    "start": "1452480",
    "end": "1458960"
  },
  {
    "text": "Java 8 now this is and this is just a car example of what it would look like it's a really simple class it's a",
    "start": "1458960",
    "end": "1465760"
  },
  {
    "text": "generic that you can uh wrap your object in and you can ask it is it present if it is present you can get it if you try",
    "start": "1465760",
    "end": "1472960"
  },
  {
    "text": "to get it when it's not present you'll then you'll get an exception this makes your code really",
    "start": "1472960",
    "end": "1478559"
  },
  {
    "text": "explicit and clear saying that yes when I pick this value up from the database I don't know if this user or account is",
    "start": "1478559",
    "end": "1484559"
  },
  {
    "text": "going to exist or not so it's an optional of the user it's not a user object that could be null and you have",
    "start": "1484559",
    "end": "1489760"
  },
  {
    "text": "to sprinkle your code with null checks and end up with burning bags of dog crap okay um just have to C has this",
    "start": "1489760",
    "end": "1497919"
  },
  {
    "text": "construct this nullable for primitive types uh which is used for the",
    "start": "1497919",
    "end": "1503200"
  },
  {
    "text": "motivation with for this is to use for databases basically the databases work a lot with null that's fine and in the",
    "start": "1503200",
    "end": "1510039"
  },
  {
    "text": "fringes of your application the UI layer maybe you're dealing with radio buttons that can use the null also and down in",
    "start": "1510039",
    "end": "1516399"
  },
  {
    "text": "the database uh where you communicate with it it's convenient to have this but do not use it in your your domain do not",
    "start": "1516399",
    "end": "1523760"
  },
  {
    "text": "use it in your object I don't want to see this floating around in your object it's just a new way of adding null to",
    "start": "1523760",
    "end": "1529360"
  },
  {
    "text": "your application it's like null 2.0 now you have null for primitive types yay so",
    "start": "1529360",
    "end": "1535240"
  },
  {
    "text": "don't use that unless you have to unless it's very convenient at the fringes of your location uh your",
    "start": "1535240",
    "end": "1541559"
  },
  {
    "text": "application the other example the other typical example where returning null is tempting is when you get into oh this",
    "start": "1541559",
    "end": "1548640"
  },
  {
    "text": "this shouldn't happen you know how weird I'll just return null no don't return",
    "start": "1548640",
    "end": "1553679"
  },
  {
    "text": "null if something is an exceptional circumstance in your application I'll do go ahead and use the aply name exception",
    "start": "1553679",
    "end": "1561000"
  },
  {
    "text": "and throw that instead don't be afraid it's better you know what would you listening to uh to the talk this morning",
    "start": "1561000",
    "end": "1568799"
  },
  {
    "text": "about self-driving cars would you like the car just to say that oh I'll just return n or would you like it to say",
    "start": "1568799",
    "end": "1575080"
  },
  {
    "text": "stop something exceptional has happened you know slam the brakes that's what I would like so here's an example and you",
    "start": "1575080",
    "end": "1581200"
  },
  {
    "text": "see the optional pattern at work here also so you have uh some kind of",
    "start": "1581200",
    "end": "1586320"
  },
  {
    "text": "repository you pick uh up an account for the user so you get an optional of here",
    "start": "1586320",
    "end": "1592039"
  },
  {
    "text": "maybe there is an account for this user maybe there isn't and in this case it is an exceptional circumstance that a user",
    "start": "1592039",
    "end": "1598640"
  },
  {
    "text": "does not have a default account this is the default account repository it shouldn't happen but you know don't",
    "start": "1598640",
    "end": "1606440"
  },
  {
    "text": "return null here because we don't have an optional we the caller of this code",
    "start": "1606440",
    "end": "1611919"
  },
  {
    "text": "always expects account to be valid or an exception to be thrown this is the best way to do this so",
    "start": "1611919",
    "end": "1619720"
  },
  {
    "text": "when should you uh return null when should you use it anyone anyone never",
    "start": "1619720",
    "end": "1625480"
  },
  {
    "text": "yes good okay so that's trust and domain",
    "start": "1625480",
    "end": "1632840"
  },
  {
    "text": "driven security domain driven security is great I've been using it and the project I've been working on for two",
    "start": "1632840",
    "end": "1638600"
  },
  {
    "text": "years now using domain driven security and uh I can't see myself going back",
    "start": "1638600",
    "end": "1643919"
  },
  {
    "text": "from it",
    "start": "1643919",
    "end": "1647158"
  },
  {
    "text": "so moving on the untrusted pattern this I learned this from a colleague of mine",
    "start": "1649120",
    "end": "1654840"
  },
  {
    "text": "I don't know where he got it from if he made it up himself or if you got it from somewhere somewhere else so make trust a",
    "start": "1654840",
    "end": "1660360"
  },
  {
    "text": "first class concept at trust boundaries so the maybe you don't have a domain model so you can't use domain",
    "start": "1660360",
    "end": "1668519"
  },
  {
    "text": "security um maybe it's a major surgery to introduce a a domain model into the existing code that you have so whereas",
    "start": "1668519",
    "end": "1676519"
  },
  {
    "text": "domain driven security gives us defense like in depth",
    "start": "1676519",
    "end": "1682039"
  },
  {
    "text": "everywhere there's validation going on everywhere the untrusted pattern Zooms in on the trust boundary",
    "start": "1682039",
    "end": "1688200"
  },
  {
    "text": "itself it's like a perimeter uh defense so let's take a take a look at this function Fu it's accepts some bar and",
    "start": "1688200",
    "end": "1696320"
  },
  {
    "text": "string and it validates it and then it does something with it so the thing here",
    "start": "1696320",
    "end": "1702000"
  },
  {
    "text": "there's a trust boundary here because there's validation going on we don't trust bar we validate it then we do",
    "start": "1702000",
    "end": "1707919"
  },
  {
    "text": "something something with it well we can't see it really besides there being an exception being thrown there's",
    "start": "1707919",
    "end": "1713399"
  },
  {
    "text": "nothing telling us how however how whether bar is trusted or",
    "start": "1713399",
    "end": "1718840"
  },
  {
    "text": "untrusted so a simple thing we can you do which is really useful is just renaming it if we know",
    "start": "1718840",
    "end": "1726279"
  },
  {
    "text": "that something is untrusted we'll just go ahead and rename it to untrusted of and I know this violates every naming",
    "start": "1726279",
    "end": "1733000"
  },
  {
    "text": "guideline and C but who cares this is really useful so First Step annotate",
    "start": "1733000",
    "end": "1739600"
  },
  {
    "text": "your uh your variables with untrusted underscore and it just becomes a lot clearer what you trust and what what you",
    "start": "1739600",
    "end": "1745240"
  },
  {
    "text": "do not trust where you place your trust so if you look at this function",
    "start": "1745240",
    "end": "1751279"
  },
  {
    "text": "here's here you have another function that does something with a bar and a fra you have some data coming in but what's",
    "start": "1751279",
    "end": "1756399"
  },
  {
    "text": "going on here do why do we trust data obviously we don't trust the other ones",
    "start": "1756399",
    "end": "1761600"
  },
  {
    "text": "so we probably forgot to validate this or something is not right here so that's",
    "start": "1761600",
    "end": "1766679"
  },
  {
    "text": "good it really pops up help us see what's trusted and not",
    "start": "1766679",
    "end": "1771640"
  },
  {
    "text": "trusted um you can clean this up you know have a validate method that returns this U Bar untrusted or throws if it",
    "start": "1771919",
    "end": "1780200"
  },
  {
    "text": "fails but uh we can do better actually uh there's nothing here that forces us to perform validation it's just a rename",
    "start": "1780200",
    "end": "1787000"
  },
  {
    "text": "it's easy to just assign you know to call the function do something with with an untrusted instead with the untrust",
    "start": "1787000",
    "end": "1793640"
  },
  {
    "text": "because it's still a string we can use a type system for this how about something like this",
    "start": "1793640",
    "end": "1799240"
  },
  {
    "text": "this looks better right we have we have taken our string and put it into an untrusted box and what we want to do is",
    "start": "1799240",
    "end": "1806559"
  },
  {
    "text": "we want to make sure that we cannot get the string out of the untrusted box without doing validation so how can we",
    "start": "1806559",
    "end": "1813399"
  },
  {
    "text": "do this let's take a look at this untrusted class so it's just a simple uh generic",
    "start": "1813399",
    "end": "1819559"
  },
  {
    "text": "wrapper here just holds a value and um as a getter you can get the value out of",
    "start": "1819559",
    "end": "1824679"
  },
  {
    "text": "it does anyone see anything weird with this object does it it seem useful",
    "start": "1824679",
    "end": "1829960"
  },
  {
    "text": "you no someone shaking your head sorry yeah there's no getter really",
    "start": "1829960",
    "end": "1836360"
  },
  {
    "text": "is there it's a there's a private getter so there's no way of getting the value",
    "start": "1836360",
    "end": "1841440"
  },
  {
    "text": "out once you put your value into this untrusted box it's just going to stay there",
    "start": "1841440",
    "end": "1846840"
  },
  {
    "text": "forever so uh how do you use this well C has this thing uh the internals visible",
    "start": "1846840",
    "end": "1854720"
  },
  {
    "text": "to assembly direct them assemblies in C it's like sort of like jar files in Java it's the packaging unit for for",
    "start": "1854720",
    "end": "1861720"
  },
  {
    "text": "classes and you can tell one assembly you can say that me my me as an assembly I I would like",
    "start": "1861720",
    "end": "1869600"
  },
  {
    "text": "to have my internals visible to this other assembly so if you in the assembly that",
    "start": "1869600",
    "end": "1875639"
  },
  {
    "text": "contains the untrusted class have a director that says that my internals my private methods private classes should",
    "start": "1875639",
    "end": "1882320"
  },
  {
    "text": "be visible to the validation assembly then we can have meanwhile going on the validation assembly",
    "start": "1882320",
    "end": "1888440"
  },
  {
    "text": "a validator which you can which has one method called validate which takes an untrusted value and does a uses a um",
    "start": "1888440",
    "end": "1896639"
  },
  {
    "text": "template method here um abstract method called interv validate where it can get the value because the internals of the",
    "start": "1896639",
    "end": "1904720"
  },
  {
    "text": "uh untrusted class are visible to the validation assembly so the validation assembly is the only one that can get the value out and now you can construct",
    "start": "1904720",
    "end": "1911679"
  },
  {
    "text": "your own validators from this base validator you just have to inherit from this validator and put it in the same",
    "start": "1911679",
    "end": "1917159"
  },
  {
    "text": "assembly and you can do stuff like this so you have an untrusted coming in",
    "start": "1917159",
    "end": "1922679"
  },
  {
    "text": "it's really clear you look at the code yep untrusted it's in the Box we can't access it unless we run it through a",
    "start": "1922679",
    "end": "1928840"
  },
  {
    "text": "validator so we have to write an account number validator we have to R write a validate method so there's no way you",
    "start": "1928840",
    "end": "1935559"
  },
  {
    "text": "can forget this of course you can just write a do nothing validator that just Returns the the object that's you know",
    "start": "1935559",
    "end": "1941600"
  },
  {
    "text": "then you're shooting yourself in the in the foot aren't you so quite useful it",
    "start": "1941600",
    "end": "1947320"
  },
  {
    "text": "prevents you from forgetting to do validation um makes the security boundary the trust boundary",
    "start": "1947320",
    "end": "1954519"
  },
  {
    "text": "clear and forces you to do uh validation so the thing is of course you",
    "start": "1954519",
    "end": "1960399"
  },
  {
    "text": "have to write some glue code to get this going you have to recognize where your trust boundary is and new up these",
    "start": "1960399",
    "end": "1966120"
  },
  {
    "text": "objects does anyone want to work with the C++ here yeah a few this pattern is is",
    "start": "1966120",
    "end": "1972679"
  },
  {
    "text": "really suited for C++ it's better because C++ has uh friend friend classes",
    "start": "1972679",
    "end": "1977960"
  },
  {
    "text": "which make you can make the visibility thing more granular instead of having the whole assembly open and it also has",
    "start": "1977960",
    "end": "1983760"
  },
  {
    "text": "U implicit Constructors meaning that you don't need the glue code the compiler will figure out that there is a way for",
    "start": "1983760",
    "end": "1989360"
  },
  {
    "text": "me to con construct an untrusted object uh and pass it into this function so the glue code is needed so if you're doing",
    "start": "1989360",
    "end": "1995399"
  },
  {
    "text": "C++ uh take a look at this uh",
    "start": "1995399",
    "end": "1999760"
  },
  {
    "text": "pattern so that's the untrusted pattern we talked about trust domain d security",
    "start": "2001279",
    "end": "2007200"
  },
  {
    "text": "and the untrust usted pattern I have to drink some water next up",
    "start": "2007200",
    "end": "2015039"
  },
  {
    "text": "immutability what is immutability means that something can change something that is immutable does not change it's it's",
    "start": "2015039",
    "end": "2021399"
  },
  {
    "text": "the opposite of mutable which means something that can change so stuff passed over a trust boundary regardless",
    "start": "2021399",
    "end": "2027960"
  },
  {
    "text": "of direction should not be able to change later why well does your application handle",
    "start": "2027960",
    "end": "2036039"
  },
  {
    "text": "concurrency maybe you have any threads how does that affect validation if the",
    "start": "2036039",
    "end": "2041760"
  },
  {
    "text": "thing you just validated can change will it still be",
    "start": "2041760",
    "end": "2047480"
  },
  {
    "text": "valid uh how many heard of this time of check to time of use one good well you're all too you're",
    "start": "2047480",
    "end": "2054760"
  },
  {
    "text": "all about to hear about time of check to time of use talk to if you will uh you've seen this a billion times it's",
    "start": "2054760",
    "end": "2061398"
  },
  {
    "text": "everywhere uh but it's probably you haven't thought about it here's a typical talk to case here here's a time",
    "start": "2061399",
    "end": "2068358"
  },
  {
    "text": "of check we check if this is a uh this account contains the amount of money",
    "start": "2068359",
    "end": "2074200"
  },
  {
    "text": "that we want to transfer and then we use it time of check to time of use now you",
    "start": "2074200",
    "end": "2081200"
  },
  {
    "text": "can have problems here what if amount is is mutable it can be changed and we have",
    "start": "2081200",
    "end": "2087000"
  },
  {
    "text": "a multi-threaded application well something like this could happen after we've done the check",
    "start": "2087000",
    "end": "2094358"
  },
  {
    "text": "another another thread that's we're using for some reason that an attacker has figured out that that he or she can",
    "start": "2094359",
    "end": "2100640"
  },
  {
    "text": "bombard the application with calls setting the value to a million euros and if timing is right this set value the",
    "start": "2100640",
    "end": "2108960"
  },
  {
    "text": "setter will be C called just after the check but before the use so even though we have a check we're still uh",
    "start": "2108960",
    "end": "2116680"
  },
  {
    "text": "vulnerable because the amount object is not immutable it can change and it can",
    "start": "2116680",
    "end": "2121800"
  },
  {
    "text": "be changed by another thread so even though we think we're good citizens and we've checked this we're still going to",
    "start": "2121800",
    "end": "2127240"
  },
  {
    "text": "get screwed so how do you solve this well make",
    "start": "2127240",
    "end": "2133720"
  },
  {
    "text": "internal State immutable final that's the final keyword in Java read only in",
    "start": "2133720",
    "end": "2140480"
  },
  {
    "text": "C and get rid of those Setters there's no Setter here and I know that Java and",
    "start": "2140480",
    "end": "2146000"
  },
  {
    "text": "C they're not immutable languages intrinsically there are languages",
    "start": "2146000",
    "end": "2151319"
  },
  {
    "text": "nowadays and particularly the functional languages which where immutability is like a a first class concept um forces",
    "start": "2151319",
    "end": "2158680"
  },
  {
    "text": "you to to have everything immutable and if you want to some make something mutable you have to jump through a lot",
    "start": "2158680",
    "end": "2164359"
  },
  {
    "text": "of Hoops maybe you can't even do it but that doesn't mean you shouldn't strive to use immutability in Java or you know",
    "start": "2164359",
    "end": "2172440"
  },
  {
    "text": "the normal uh object oriented languages it can be done it's not like going",
    "start": "2172440",
    "end": "2177760"
  },
  {
    "text": "against the grain it can be done it's a little bit more complicated than it should be but it's definitely worth",
    "start": "2177760",
    "end": "2183119"
  },
  {
    "text": "doing so because immutability significantly reduces talk to problems",
    "start": "2183119",
    "end": "2188160"
  },
  {
    "text": "as you see it plays very well with demain D of security readability",
    "start": "2188160",
    "end": "2193599"
  },
  {
    "text": "parallelization event sourcing etc etc immutability is a great thing it's like",
    "start": "2193599",
    "end": "2200400"
  },
  {
    "text": "a security spray they can spray over your code and you have a lot less",
    "start": "2200400",
    "end": "2206000"
  },
  {
    "text": "problems who uh how many in here knows what a race condition is yes yes great everyone uh then you",
    "start": "2206000",
    "end": "2213920"
  },
  {
    "text": "know that race condition is that if the outcome of some operation depends on the ordering or sequence of events that are",
    "start": "2213920",
    "end": "2219520"
  },
  {
    "text": "outside of your control they race against each other then you have a race condition let's see uh typical web",
    "start": "2219520",
    "end": "2226359"
  },
  {
    "text": "example here of this uh imagine a wizard based flow like you have a shopping cart or maybe something on your website like",
    "start": "2226359",
    "end": "2232920"
  },
  {
    "text": "a three-step flow so in the first one the customer goes to the the first",
    "start": "2232920",
    "end": "2239240"
  },
  {
    "text": "page yeah that's a step one okay uh first I just want to mention here yeah",
    "start": "2239240",
    "end": "2244400"
  },
  {
    "text": "static all you concurrency aware people you think oh I should never would never have a static variable in my web",
    "start": "2244400",
    "end": "2250319"
  },
  {
    "text": "application that's crazy but uh you can imagine that you have some sort of a dependency injection container that that",
    "start": "2250319",
    "end": "2256160"
  },
  {
    "text": "is a Singleton instead this class then this would just be a regular member variable so it wouldn't be that obvious",
    "start": "2256160",
    "end": "2261280"
  },
  {
    "text": "but you can still end up with these situations where you have in fact a static or a Singleton so in the first",
    "start": "2261280",
    "end": "2267920"
  },
  {
    "text": "step the user comes into the application uh you assign uh some key like in uh GD",
    "start": "2267920",
    "end": "2274480"
  },
  {
    "text": "or a u ID in Java and you create some wiisard data this holds the stuff that's uh you need",
    "start": "2274480",
    "end": "2279760"
  },
  {
    "text": "to keep track on during the transaction and then you return the key so that the user can supply the key in the query",
    "start": "2279760",
    "end": "2285040"
  },
  {
    "text": "string preps in the next call Second Step is that you uh you choose a product",
    "start": "2285040",
    "end": "2290880"
  },
  {
    "text": "so you set the product adid here to some product that the user chooses and the third step is sort of like the checkout",
    "start": "2290880",
    "end": "2298000"
  },
  {
    "text": "step that you pick up the the Wizard data you see that okay does the user have access to this product can she buy",
    "start": "2298000",
    "end": "2304400"
  },
  {
    "text": "this product and then you do something with and here you have the time of check and time of use uh thing going so easy",
    "start": "2304400",
    "end": "2312200"
  },
  {
    "text": "to see where this is going to some anyone can see what's wrong here what can what could go wrong how can a",
    "start": "2312200",
    "end": "2318160"
  },
  {
    "text": "malicious user that knows that the code looks sort of like this what could she",
    "start": "2318160",
    "end": "2324839"
  },
  {
    "text": "do or he what what",
    "start": "2324839",
    "end": "2330519"
  },
  {
    "text": "if we do this what if the user bombards our application with calls to to step",
    "start": "2330720",
    "end": "2336560"
  },
  {
    "text": "two with some other product ID that he knows about that he shouldn't have access to but right before checking out",
    "start": "2336560",
    "end": "2344119"
  },
  {
    "text": "he just just blasts the application with calls to step two and maybe if the",
    "start": "2344119",
    "end": "2349839"
  },
  {
    "text": "timing is just exactly right it will end up after the check but before the use so",
    "start": "2349839",
    "end": "2355400"
  },
  {
    "text": "the uh this user will get access to this uh secret product that you wouldn't have access to so how do we fix this",
    "start": "2355400",
    "end": "2363520"
  },
  {
    "text": "immutability of course let's look at it again it looks pretty much the same only now we have something called immutable",
    "start": "2363520",
    "end": "2369240"
  },
  {
    "text": "data up here step one everything is the same just immutable data step two here's",
    "start": "2369240",
    "end": "2375839"
  },
  {
    "text": "the difference if something is immutable we can't change it there's no Setter for this this uh product so we have to",
    "start": "2375839",
    "end": "2383160"
  },
  {
    "text": "create a new object so we have written a convenience method called clone with product ID meaning that it takes all the properties that this object has clones",
    "start": "2383160",
    "end": "2390280"
  },
  {
    "text": "them and then with a new product ID you can imagine that there's other properties on this object except the the",
    "start": "2390280",
    "end": "2396160"
  },
  {
    "text": "product ID step three looks exactly the same there's nothing nothing changed here and",
    "start": "2396160",
    "end": "2403640"
  },
  {
    "text": "we still have a time of check to time of use we always we always have that but now we have no problem because the data is immutable",
    "start": "2403640",
    "end": "2411760"
  },
  {
    "text": "doesn't matter how many threads that try to change or uh call step two in between",
    "start": "2411760",
    "end": "2416880"
  },
  {
    "text": "here they'll just create a new data object that is not being used right now in step three so we're safe nothing will",
    "start": "2416880",
    "end": "2424200"
  },
  {
    "text": "change between time of check to time of use so immutability like I said a security",
    "start": "2424200",
    "end": "2430920"
  },
  {
    "text": "spray it's a great thing it helps you with security and bugs and concurrency",
    "start": "2430920",
    "end": "2436800"
  },
  {
    "text": "in general go for it use im mutability as much as you can it should be the norm",
    "start": "2436800",
    "end": "2443000"
  },
  {
    "text": "when you see an object that is mutable you should H you should cringe and feel bad because you know this is dangerous",
    "start": "2443000",
    "end": "2450119"
  },
  {
    "text": "what you can do is of course something has to be immutable sometime somewhere probably something needs to change but",
    "start": "2450119",
    "end": "2455760"
  },
  {
    "text": "try to try to contain it try to minimize it maybe you have a large object where if you have 20 properties maybe only",
    "start": "2455760",
    "end": "2461720"
  },
  {
    "text": "three of them are mutable well factor out the mutable object and and keep it isolated so you can have it you know",
    "start": "2461720",
    "end": "2468079"
  },
  {
    "text": "where it is you know where the mutable state is and maybe it can be refactored later or at least you have better",
    "start": "2468079",
    "end": "2473400"
  },
  {
    "text": "control of where the mutable state is it will help you a",
    "start": "2473400",
    "end": "2478079"
  },
  {
    "text": "lot so that was uh immutability now uh let's talk about the",
    "start": "2479599",
    "end": "2485760"
  },
  {
    "text": "uh final uh pattern which uh we're going to talk about today it's called the inverse life coach pattern be a",
    "start": "2485760",
    "end": "2492839"
  },
  {
    "text": "pessimist okay so what's the inverse life life coach pattern before we uh look at that we have to look at the",
    "start": "2492839",
    "end": "2498520"
  },
  {
    "text": "anti- pattern which is called the life coach pattern it looks uh something like this you've all seen and maybe written a",
    "start": "2498520",
    "end": "2505800"
  },
  {
    "text": "function that starts uh like this and you can just hear the the life coach here you my friend you have done nothing",
    "start": "2505800",
    "end": "2512359"
  },
  {
    "text": "but you are a success your life is going to be great no matter what happens in bunch of a code here we're still going",
    "start": "2512359",
    "end": "2519119"
  },
  {
    "text": "to return and you're going to be successful and even if you do I'm still going to charge you that's what's so",
    "start": "2519119",
    "end": "2524400"
  },
  {
    "text": "great about being a life coach it's awesome so what happens here what can",
    "start": "2524400",
    "end": "2529480"
  },
  {
    "text": "happen here of course is that something goes wrong in here and you return",
    "start": "2529480",
    "end": "2535319"
  },
  {
    "text": "prematurely and success is still true the client of your code will think that",
    "start": "2535319",
    "end": "2540640"
  },
  {
    "text": "everything went well when it didn't this is sort of what happened in the uh uh",
    "start": "2540640",
    "end": "2546599"
  },
  {
    "text": "what's it called go to fail if you remember that a few years ago was on OSX go to fail bug which bypassed the uh",
    "start": "2546599",
    "end": "2553640"
  },
  {
    "text": "certificate validation was uh a case of the life coach pattern so this is what",
    "start": "2553640",
    "end": "2560079"
  },
  {
    "text": "it should look like should be a pessimist you you have not done anything you are not a success yet you have to",
    "start": "2560079",
    "end": "2566319"
  },
  {
    "text": "prove yourself in bunch of code you have to go through it and maybe if you're good you good out on the other side as a",
    "start": "2566319",
    "end": "2572319"
  },
  {
    "text": "success of course we used this is uh not a very domain uh sorry object oriented",
    "start": "2572319",
    "end": "2579680"
  },
  {
    "text": "example uh we use objects instead fail fast and force a narrow path of success",
    "start": "2579680",
    "end": "2585839"
  },
  {
    "text": "fail fast meaning that if you try to um",
    "start": "2585839",
    "end": "2591480"
  },
  {
    "text": "do the validation first and if something's not valid you throw an exception there's a bunch of code",
    "start": "2591480",
    "end": "2596960"
  },
  {
    "text": "happening and then you return the data and the only way of getting out of this function is returning a valid domain",
    "start": "2596960",
    "end": "2603760"
  },
  {
    "text": "object there's no success true or false parameter here either you throw an",
    "start": "2603760",
    "end": "2609440"
  },
  {
    "text": "exception or you return a valid domain object there's no other way to do this",
    "start": "2609440",
    "end": "2616319"
  },
  {
    "text": "so when you apply this this pattern to your code um your code is going to start",
    "start": "2616319",
    "end": "2621400"
  },
  {
    "text": "to look a lot like this you have the uh some validation if da daada yada y throw",
    "start": "2621400",
    "end": "2627640"
  },
  {
    "text": "if not this then throw if not this then throw code happening and return I'm not",
    "start": "2627640",
    "end": "2633440"
  },
  {
    "text": "saying that you should always use a single return statement that's not what I'm saying multiple return statements are fine in the languages that we are",
    "start": "2633440",
    "end": "2640040"
  },
  {
    "text": "using but I'm just saying that if your code looks like this it's probably good if your code looks like this it maybe",
    "start": "2640040",
    "end": "2647480"
  },
  {
    "text": "it's not as good I'm not saying it's definitely wrong I have functions that looks like this and that are perfectly",
    "start": "2647480",
    "end": "2653440"
  },
  {
    "text": "fine but still you know if you use this pattern you're going to expect your functions to look a lot more like the",
    "start": "2653440",
    "end": "2658760"
  },
  {
    "text": "previous example where you have these sections of validation they you have the code and then you return",
    "start": "2658760",
    "end": "2664680"
  },
  {
    "text": "something so give yourself you give give your code a narrow challenging path of",
    "start": "2664680",
    "end": "2670280"
  },
  {
    "text": "success where you either throw an exception or you return a valid domain object that's the inverse life coach",
    "start": "2670280",
    "end": "2679119"
  },
  {
    "text": "pattern yeah that's so uh we have about 10 minutes",
    "start": "2679119",
    "end": "2684480"
  },
  {
    "text": "that's good I'm going to wrap things up I have uh there are five things to take home with you from this uh",
    "start": "2684480",
    "end": "2691720"
  },
  {
    "text": "session consider your trust boundaries that's the important part SEC many security issues boil down to an poor",
    "start": "2691720",
    "end": "2698920"
  },
  {
    "text": "understanding of where you're placing your trust you want to minimize where you place your trust you want to trust",
    "start": "2698920",
    "end": "2704079"
  },
  {
    "text": "as little as possible you're in inside the circle of trust everything's trusted outside it's",
    "start": "2704079",
    "end": "2710000"
  },
  {
    "text": "untrusted the untrusted area is practically infinite where the trusted is bounded and you can control it with",
    "start": "2710000",
    "end": "2716480"
  },
  {
    "text": "white listing domain driven security a great pattern if you have domain driven design",
    "start": "2716480",
    "end": "2722319"
  },
  {
    "text": "already in your application go ahead and look into domain driven security uh you're not going to regret it only",
    "start": "2722319",
    "end": "2728839"
  },
  {
    "text": "validated domain objects no primitive types they're untrusted it's very easy very simple uh but it has a profound",
    "start": "2728839",
    "end": "2735880"
  },
  {
    "text": "impact impact on your application it will give you defense in depth immutability should be the norm",
    "start": "2735880",
    "end": "2743839"
  },
  {
    "text": "try to make all your objects immutable if you see something mutable you know think deeply does this",
    "start": "2743839",
    "end": "2749240"
  },
  {
    "text": "have to be mutable is there really a reason or is there is there an immutable object that wants to get out of this for",
    "start": "2749240",
    "end": "2755920"
  },
  {
    "text": "me right to use it everywhere in your application use the Builder pattern for",
    "start": "2755920",
    "end": "2760960"
  },
  {
    "text": "instead of setting properties in your Constructors instead of newing up an object and then setting 10 properties use a builder pattern that lets you",
    "start": "2760960",
    "end": "2767599"
  },
  {
    "text": "build it in a nice way and then creates an immutable",
    "start": "2767599",
    "end": "2771880"
  },
  {
    "text": "object yeah null is a burning bag of dog B don't use null use optional uh throw",
    "start": "2772880",
    "end": "2779280"
  },
  {
    "text": "an exception if something is an exceptional circumstance don't pass around null okay null is a it's a",
    "start": "2779280",
    "end": "2784960"
  },
  {
    "text": "construct that some languages need to have doesn't mean you need to use it",
    "start": "2784960",
    "end": "2790440"
  },
  {
    "text": "okay and uh last but not least fire life coach you don't need them okay it's better to be a pessimist and assume",
    "start": "2790440",
    "end": "2797160"
  },
  {
    "text": "failure and force a uh narrow path of success and I'd like to conclude uh here",
    "start": "2797160",
    "end": "2803200"
  },
  {
    "text": "with the words of uh Jesus Christ Our Lord and Savior who I think said it best when he said for the gate is wide and",
    "start": "2803200",
    "end": "2810880"
  },
  {
    "text": "the road is broad that leads to destruction but the gate is small and the road is narrow that leads to your",
    "start": "2810880",
    "end": "2816880"
  },
  {
    "text": "code returning a valid domain object that's what he said it's true 2,000 years ago and few are the code paths",
    "start": "2816880",
    "end": "2822960"
  },
  {
    "text": "that find this gate so I want to thank you very much for listening and I hope you learned something that you can uh",
    "start": "2822960",
    "end": "2829240"
  },
  {
    "text": "take home with you and apply to your code uh immediately and gives you a robust rugged and secure code and uh",
    "start": "2829240",
    "end": "2836559"
  },
  {
    "text": "please remember rate this session and if you want to contact me uh you can tweet",
    "start": "2836559",
    "end": "2843000"
  },
  {
    "text": "me and there's we have a Blog TR SEC which where we write uh uh interesting",
    "start": "2843000",
    "end": "2849119"
  },
  {
    "text": "stuff I think I'm not biased at all so yeah go ahead and visit it thank you very much for listening to me thank",
    "start": "2849119",
    "end": "2857720"
  },
  {
    "text": "you okay um fortunately or unfortunately",
    "start": "2860599",
    "end": "2865839"
  },
  {
    "text": "uh too many questions via the app actually fortunately but we we cannot ask them all so please uh ask Andreas",
    "start": "2865839",
    "end": "2874400"
  },
  {
    "text": "afterwards um I just picked three three um the idea of domain model for passing",
    "start": "2874400",
    "end": "2880480"
  },
  {
    "text": "perimeters is good but it is it also produces a lot of memory overhead how",
    "start": "2880480",
    "end": "2885559"
  },
  {
    "text": "can we balance that well I think you uh need to ask",
    "start": "2885559",
    "end": "2890720"
  },
  {
    "text": "yourself is memory overhead a problem for your application these These are typically short-lived objects easily uh",
    "start": "2890720",
    "end": "2897200"
  },
  {
    "text": "collected by your garbage collector not not usually a problem if you're working with maybe trading or games where also",
    "start": "2897200",
    "end": "2905960"
  },
  {
    "text": "exceptions is a problem performance wise as well as objects yes maybe you have an issue but then you're probably programming in C++ anyway I I think that",
    "start": "2905960",
    "end": "2913880"
  },
  {
    "text": "you you this question of performance always comes up right but it's always",
    "start": "2913880",
    "end": "2919599"
  },
  {
    "text": "easier to do we're so keen on doing premature optimization so that's why I say don't be afraid",
    "start": "2919599",
    "end": "2926640"
  },
  {
    "text": "create a lot of objects I don't think it's going to be a problem if you have a typical if you have a special domain where this is a problem fine you know",
    "start": "2926640",
    "end": "2933720"
  },
  {
    "text": "you need to deal with it but most may think you do but I think it's more",
    "start": "2933720",
    "end": "2940240"
  },
  {
    "text": "likely that you don't that's my answer okay um have you used immutable.",
    "start": "2940240",
    "end": "2947720"
  },
  {
    "text": "org uh while implementing domain driven Securities patterns have you heard of it nope NOP look it",
    "start": "2947720",
    "end": "2955000"
  },
  {
    "text": "up um what if a domain object can't validate itself because it has",
    "start": "2955000",
    "end": "2961480"
  },
  {
    "text": "dependencies what if a domain object can't validate itself because dependencies well I don't know what",
    "start": "2961480",
    "end": "2968119"
  },
  {
    "text": "dependencies that might be um you you're not calling a service from a domain",
    "start": "2968119",
    "end": "2973720"
  },
  {
    "text": "object that's all you can pass in a service uh well the domain object I do",
    "start": "2973720",
    "end": "2981160"
  },
  {
    "text": "usually can validate themselves is there a concrete the person asked the question maybe have a a concrete",
    "start": "2981160",
    "end": "2989240"
  },
  {
    "text": "example yeah we can talk about this afterward who wrote the question but uh",
    "start": "2989920",
    "end": "2995720"
  },
  {
    "text": "uh the dependencies that your domain objects have should themselves be validated already if they are domain objects so usually it works",
    "start": "2995720",
    "end": "3002440"
  },
  {
    "text": "out okay and the last one um The Domain objects you showed they are actually",
    "start": "3002440",
    "end": "3009119"
  },
  {
    "text": "value types okay yeah angle is more of a value type okay yeah",
    "start": "3009119",
    "end": "3016240"
  },
  {
    "text": "good okay that's it thank you very much thank you thank you",
    "start": "3016240",
    "end": "3023599"
  }
]