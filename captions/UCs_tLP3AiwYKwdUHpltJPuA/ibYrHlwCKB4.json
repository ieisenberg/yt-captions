[
  {
    "start": "0",
    "end": "235000"
  },
  {
    "text": "[Music]",
    "start": "2570",
    "end": "10170"
  },
  {
    "text": "[Applause] thank you Kristen so um this talk should",
    "start": "10940",
    "end": "18880"
  },
  {
    "text": "be a good contrast to Eric's talk last night because I'm covering some of the same topics from a slightly different",
    "start": "18880",
    "end": "24960"
  },
  {
    "text": "direction so everybody can take away the Viewpoint that uh that you find personally compelling um so when I was",
    "start": "24960",
    "end": "31439"
  },
  {
    "text": "writing this talk one of the topic ideas I was kicking around was trying to illustrate what separated what you might",
    "start": "31439",
    "end": "37640"
  },
  {
    "text": "call grown-up software engineering from well for one of a better term kid stuff",
    "start": "37640",
    "end": "43320"
  },
  {
    "text": "and I I collected some stories about some heroic Feats of software engineering such as um how Stratus",
    "start": "43320",
    "end": "49600"
  },
  {
    "text": "systems anybody remember Stratus systems a few of you okay so they made these amazing systems in the 1980s they were",
    "start": "49600",
    "end": "55559"
  },
  {
    "text": "fault tolerant systems which were super redundant and they were designed to never go down under any you know",
    "start": "55559",
    "end": "61239"
  },
  {
    "text": "condition they could tolerate multiple Hardware failures and all of that but the really cool thing was that you could",
    "start": "61239",
    "end": "66280"
  },
  {
    "text": "also update the device drivers in the operating system while applications were still running without losing connections",
    "start": "66280",
    "end": "72000"
  },
  {
    "text": "and this was one of those amazing you know superhuman Feats of software engineering that you know would Inspire us all so I you know I I I had um you",
    "start": "72000",
    "end": "79439"
  },
  {
    "text": "know I had some ideas for this talk and I'm really glad I didn't write that talk because it would have looked really pathetic uh next to Anita's keynote",
    "start": "79439",
    "end": "86520"
  },
  {
    "text": "yesterday which gave us a glimpse into what real grownup engineer ing looks like so compared you know to the",
    "start": "86520",
    "end": "93520"
  },
  {
    "text": "challenges of Landing a Rover on mars or building a self-sufficient system that has to live on Mars for years with no",
    "start": "93520",
    "end": "99320"
  },
  {
    "text": "hope of resupply or repair what we all do sounds pretty easy to me um and as softare Engineers we also",
    "start": "99320",
    "end": "106759"
  },
  {
    "text": "have a different sense of History than uh some of the other engineering disciplines um for example in conventional architecture we've um you",
    "start": "106759",
    "end": "113920"
  },
  {
    "text": "know we've known how to make buildings that could stand for a thousand years for almost a thousand years um and it's",
    "start": "113920",
    "end": "120759"
  },
  {
    "text": "software engineering 5 years is a long time um a lot of the systems you know that uh that we're working on I mean how",
    "start": "120759",
    "end": "127000"
  },
  {
    "text": "many people here uh for the system that you're working on in your primary workday has been around for more than 10",
    "start": "127000",
    "end": "133480"
  },
  {
    "text": "years so it looks like about 30% so most of what we're working on has been built",
    "start": "133480",
    "end": "139000"
  },
  {
    "text": "in the last 5 to 10 years um and as a result a lot of the focus and what we do is aimed at building new systems to do",
    "start": "139000",
    "end": "144879"
  },
  {
    "text": "something today and not necessarily to build them to stand for a thousand years or even 10 um now the system I work on",
    "start": "144879",
    "end": "151800"
  },
  {
    "text": "is old by comparison to most offer systems um uh that you know this year Java is 20 years old and for the last",
    "start": "151800",
    "end": "158319"
  },
  {
    "text": "five I've had the privilege of piloting the evolution of the Java language and today I'm going to share a few thoughts",
    "start": "158319",
    "end": "164080"
  },
  {
    "text": "on the challenges of evolving a mature platform and a few lessons I've learned along the way and a few thoughts on",
    "start": "164080",
    "end": "169840"
  },
  {
    "text": "where we're going next because we want to ensure that Java remains vibrant for the next 20 years as well so the title of this talk refers to",
    "start": "169840",
    "end": "177599"
  },
  {
    "text": "the slogan Eric mentioned last night move move fast and break things so Facebook CEO Mark Zuckerberg uh Advanced",
    "start": "177599",
    "end": "184760"
  },
  {
    "text": "this as the motto for the Facebook engineering culture in the early days basically telling the team that it was more important to make progress on",
    "start": "184760",
    "end": "191080"
  },
  {
    "text": "improving the user experience than it was to worry about preserving what was already there and this may have started at",
    "start": "191080",
    "end": "197200"
  },
  {
    "text": "Facebook but it's become you know emblematic of the startup culture and you're starting to see it you know even filtering into uh open source projects",
    "start": "197200",
    "end": "203920"
  },
  {
    "text": "as well and it's not surprising that developers are drawn to a catchphrase like this you know breaking can be fun",
    "start": "203920",
    "end": "210560"
  },
  {
    "text": "right and it's often a lot easier to break things than to build them and the parts that slow you down are often the",
    "start": "210560",
    "end": "216319"
  },
  {
    "text": "boring unglamorous parts so who wouldn't want permission to ignore all of the things that slow you down uh we do have",
    "start": "216319",
    "end": "222879"
  },
  {
    "text": "to be um mindful of the logical fallacy uh just because some progress entails",
    "start": "222879",
    "end": "227959"
  },
  {
    "text": "breaking things doesn't mean that breakage indicates progress some people have that a little bit a little bit",
    "start": "227959",
    "end": "235319"
  },
  {
    "start": "235000",
    "end": "600000"
  },
  {
    "text": "backwards now this phrase really isn't about breaking things it's about building things uh breaking things is",
    "start": "235319",
    "end": "241159"
  },
  {
    "text": "rarely a good idea on its own in fact usually breaking things comes with legal and financial",
    "start": "241159",
    "end": "246480"
  },
  {
    "text": "consequences um and obviously the intent of saying move",
    "start": "246480",
    "end": "253040"
  },
  {
    "text": "fast and break things is not to say go out and commit vandalism right or to celebrate destruction it it's to create",
    "start": "253040",
    "end": "258840"
  },
  {
    "text": "the opportunity to build something better uh without getting slowed down by the need to preserve the status quo and",
    "start": "258840",
    "end": "264680"
  },
  {
    "text": "in other words it's a way of giving people permission to Value what could be over what is and and that's a pretty",
    "start": "264680",
    "end": "270320"
  },
  {
    "text": "good thing um and giving permission to break things so that better things could be",
    "start": "270320",
    "end": "275720"
  },
  {
    "text": "built in its place isn't really expressing a technological or social Viewpoint it's expressing an economic",
    "start": "275720",
    "end": "281440"
  },
  {
    "text": "one um so zukerberg was knowingly or not appealing to the work of The Economist Joseph Sher who coined the phrase",
    "start": "281440",
    "end": "288360"
  },
  {
    "text": "creative destruction to describe the inevitable fact uh of capitalism that the that progress comes at the expense",
    "start": "288360",
    "end": "294520"
  },
  {
    "text": "of what came before the growth of new Industries like automobiles uh inevitably brings back the de brings out",
    "start": "294520",
    "end": "299880"
  },
  {
    "text": "the decline of old Industries like horses so it's notable that Facebook",
    "start": "299880",
    "end": "307240"
  },
  {
    "text": "doesn't say this anymore um last year at uh the f8 conference Zuckerberg retired the old motto and offered this much less",
    "start": "307240",
    "end": "314080"
  },
  {
    "text": "catchy one in its place um and and this really was saying something uh you know is saying that yes well progress is",
    "start": "314080",
    "end": "320600"
  },
  {
    "text": "still important but not at the cost of destabilizing the user experience so",
    "start": "320600",
    "end": "325919"
  },
  {
    "text": "what changed for them well when you're a startup with no users and a minimum viable product the economics all point",
    "start": "325919",
    "end": "332639"
  },
  {
    "text": "you towards making a lot of progress fast regardless of the collateral damage or the accumulation of technical debt",
    "start": "332639",
    "end": "338319"
  },
  {
    "text": "because if you don't make some progress fast you're going to run out of money you're going to get scooped by the competition and it's game over when",
    "start": "338319",
    "end": "344600"
  },
  {
    "text": "you're the market leader with a mature product the economics point in a different direction and you don't have",
    "start": "344600",
    "end": "350199"
  },
  {
    "text": "as far up you can climb and you have a lot farther that you can fall so it's not surprising that",
    "start": "350199",
    "end": "356759"
  },
  {
    "text": "startups are more concerned with progress than uh while while more established businesses care more about",
    "start": "356759",
    "end": "362240"
  },
  {
    "text": "stability um and you know for a good summary of this we we can look at the uh the poet Bob Dillan who said it pretty",
    "start": "362240",
    "end": "368400"
  },
  {
    "text": "clearly when you ain't got nothing you got nothing to lose I'm not going to sing it for you um so move fast and",
    "start": "368400",
    "end": "375400"
  },
  {
    "text": "break things is a sensible strategy when you're a Plucky startup hoping to rise above the crowd uh to get some attention",
    "start": "375400",
    "end": "381160"
  },
  {
    "text": "but it's a less appropriate strategy when you have a billion users and and the point of all of this",
    "start": "381160",
    "end": "386800"
  },
  {
    "text": "is the priority between progress and preservation is a business decision move fast and break things isn't a philosophy",
    "start": "386800",
    "end": "393919"
  },
  {
    "text": "and it's not a strategy it's a tactic it's a business tactic and hopefully it's one supported by a sensible cost",
    "start": "393919",
    "end": "399520"
  },
  {
    "text": "benefit analysis of whether this is going to further your business goals or not one of the things that separates uh",
    "start": "399520",
    "end": "406960"
  },
  {
    "text": "the grown-ups from the kids in this industry is the understanding that programming is fundamentally an economic activity and technology is exciting and",
    "start": "406960",
    "end": "414039"
  },
  {
    "text": "it's fun and we're all Lucky that we get to do it for a living I mean I'm thrilled that I get to do what I do for a living but technology is a means to an",
    "start": "414039",
    "end": "420720"
  },
  {
    "text": "end it isn't an end unto itself if it were cheaper to or faster to build Facebook out of rubber bands and duct",
    "start": "420720",
    "end": "427000"
  },
  {
    "text": "tape uh then then out of PHP then that's what they would have done and I know what some of you are thinking you're thinking PHP is rubber bands and duct",
    "start": "427000",
    "end": "434039"
  },
  {
    "text": "tape and that's perfectly valid conversation but that's a subject for a different talk a a you know but if programming is",
    "start": "434039",
    "end": "441520"
  },
  {
    "text": "economic activity we should be able to measure the uh the inputs and outputs um and so the inputs are pretty simple",
    "start": "441520",
    "end": "447160"
  },
  {
    "text": "right uh you need programmers and you need pizza a and uh the outputs are a little harder",
    "start": "447160",
    "end": "452759"
  },
  {
    "text": "to measure but um you know in any successful scenario you're hoping to get some working code and you're also bound",
    "start": "452759",
    "end": "458759"
  },
  {
    "text": "to ACR some technical debt which you could think of as the obligation to provide more developer time and more",
    "start": "458759",
    "end": "463879"
  },
  {
    "text": "pizza in the future assuming you're planning to stay in business so moving fast and breaking things is a choice",
    "start": "463879",
    "end": "470919"
  },
  {
    "text": "that I want to get more of both of these outputs more working code and also more technical debt for a given amount of",
    "start": "470919",
    "end": "477800"
  },
  {
    "text": "pizza and you know in some cases where you've got nothing to lose and your investors are breathing down your neck",
    "start": "477800",
    "end": "483919"
  },
  {
    "text": "it can really be a smart choice but again this is a business decision based on business conditions and those change",
    "start": "483919",
    "end": "489400"
  },
  {
    "text": "over time and you it's it's important that we not confuse this for a philosophy so by moving fast and",
    "start": "489400",
    "end": "495759"
  },
  {
    "text": "breaking things you're choosing to Value time to Market over stability and future maintenance cost and sometimes that's a",
    "start": "495759",
    "end": "501000"
  },
  {
    "text": "perfectly sensible decision so to bring this point home uh I've picked out a few quotes here from a",
    "start": "501000",
    "end": "506960"
  },
  {
    "text": "great article I just found a few weeks ago by and goldfine called the right way to ship software so I'll skip to the",
    "start": "506960",
    "end": "513800"
  },
  {
    "text": "secret there's no right way to ship software but um you know it all depends",
    "start": "513800",
    "end": "519200"
  },
  {
    "text": "on the business context so Coline says in a profession where we carry out decad",
    "start": "519200",
    "end": "524839"
  },
  {
    "text": "spanning Holy Wars over tab widths and capitalization it's not surprising that people get attached to their development",
    "start": "524839",
    "end": "531160"
  },
  {
    "text": "and release habits but if shipping so much software has taught me one thing it's to be agnostic different",
    "start": "531160",
    "end": "537080"
  },
  {
    "text": "methodologies optimized for different goals and and all of them have downsides if you maximize for for schedule",
    "start": "537080",
    "end": "542920"
  },
  {
    "text": "predictability you'll lose out on on engineering productivity and this leads up to a plea",
    "start": "542920",
    "end": "549079"
  },
  {
    "text": "that you know to developers please stop asking is this process good or bad and",
    "start": "549079",
    "end": "554279"
  },
  {
    "text": "start asking is this process well suited to my situation now goldfine was knowingly or",
    "start": "554279",
    "end": "561480"
  },
  {
    "text": "not appealing to the philosophy of Charles Saunders purse sometimes referred to as the father of pragmatism",
    "start": "561480",
    "end": "567000"
  },
  {
    "text": "who in 1878 framed what is now called pragmatic Maxim I know it's a little bit wordy so I'll summarize it for you",
    "start": "567000",
    "end": "573839"
  },
  {
    "text": "pragmatism means judging a thing based on its practical effects on the world around us rather than on their innate uh",
    "start": "573839",
    "end": "580760"
  },
  {
    "text": "properties as we perceive them so um and we're all like to think of ourselves as",
    "start": "580760",
    "end": "587360"
  },
  {
    "text": "pragmatists as Engineers so it's useful to go back to what pragmatism really means and you know you could imagine",
    "start": "587360",
    "end": "595160"
  },
  {
    "text": "that purse is in turn appealing to the works of a a much older philosopher from a galaxy far far away who might have",
    "start": "595160",
    "end": "602320"
  },
  {
    "start": "600000",
    "end": "770000"
  },
  {
    "text": "said although he didn't there's no good there is only good for and and if Master Yoda had said this",
    "start": "602320",
    "end": "609040"
  },
  {
    "text": "what he would have meant is that as Engineers who are supposed to be pragmatic we need to be willing to look past our own aesthetic and principled",
    "start": "609040",
    "end": "615399"
  },
  {
    "text": "beliefs about what is good and what is bad and instead judge things on the basis of whether they work in the real world and we should judge the good of",
    "start": "615399",
    "end": "622040"
  },
  {
    "text": "something based not on its intrinsic property is but on what it is good for so in that light what do we think of",
    "start": "622040",
    "end": "629000"
  },
  {
    "text": "this move fast and break things strategy well as probably no one will be surprised the you know to if we say",
    "start": "629000",
    "end": "635320"
  },
  {
    "text": "either good or bad we're wrong right the answer is it depends is it right for the",
    "start": "635320",
    "end": "641000"
  },
  {
    "text": "situation so this brings me to the main topic of my talk today which is about engineering closer to the bottom of the",
    "start": "641000",
    "end": "648600"
  },
  {
    "text": "stack and how you know the uh the engineering decisions you make in that context are different from what a lot of",
    "start": "648600",
    "end": "654000"
  },
  {
    "text": "us are used to and one reason why this might be more relevant to you than you might initially think is as our careers",
    "start": "654000",
    "end": "660639"
  },
  {
    "text": "as Engineers progress we have a tendency to move down the stack not because we make a choice to move down the stack but",
    "start": "660639",
    "end": "666560"
  },
  {
    "text": "because the stack is growing above us there's more layers up there now than there were 20 years ago so if you're",
    "start": "666560",
    "end": "672480"
  },
  {
    "text": "comfortable at a certain layer of the stack which might be the middle when your career starts it's going to be closer to the bottom um you know as you",
    "start": "672480",
    "end": "679360"
  },
  {
    "text": "get later into your career so you need to think about this so you know I Googled around for some uh",
    "start": "679360",
    "end": "686360"
  },
  {
    "text": "Java software stack diagram so I found you know found a lot here's one I found internally this is uh the Oracle",
    "start": "686360",
    "end": "691760"
  },
  {
    "text": "middleware stack most of these are Java based software Services you know for building applications and you can see",
    "start": "691760",
    "end": "697560"
  },
  {
    "text": "you know there's Java there at the at the way very bottom um actually in the official version of this stack doesn't",
    "start": "697560",
    "end": "702760"
  },
  {
    "text": "even show Java because they they can't even see that far down but you know uh and uh here's another one this is the",
    "start": "702760",
    "end": "709560"
  },
  {
    "text": "the spring stack and again you know what you see is Javas down there at the bottom right and of course it's not",
    "start": "709560",
    "end": "714680"
  },
  {
    "text": "really the bottom right you know below that you have containers and virtualization operating systems and Hardware where but it's the bottommost",
    "start": "714680",
    "end": "720760"
  },
  {
    "text": "part that's visible to the developers in the programming model and when you're the platform that everything depends on",
    "start": "720760",
    "end": "726480"
  },
  {
    "text": "moving fast and breaking things isn't such a great approach uh because down here you know the term for breaking things is bug right and with millions of",
    "start": "726480",
    "end": "733920"
  },
  {
    "text": "users there there's no such thing as oh we can just we can change that no one will notice",
    "start": "733920",
    "end": "739720"
  },
  {
    "text": "right everybody notices everything it's it's really it's really scary so you know when you're down here you know you",
    "start": "739720",
    "end": "745720"
  },
  {
    "text": "have to place a very high priority on stability and compatibility and you know there was a time in Java's history when",
    "start": "745720",
    "end": "751560"
  },
  {
    "text": "it wasn't the bottom of the stack or even part of the stack and in those days we did move fast and break things the",
    "start": "751560",
    "end": "756920"
  },
  {
    "text": "amount of churn in the language and and the VM design you know leading up to the first release was really pretty incredible but success comes with a",
    "start": "756920",
    "end": "764000"
  },
  {
    "text": "price and once you have users counting on you your your choices are a little bit more",
    "start": "764000",
    "end": "770040"
  },
  {
    "start": "770000",
    "end": "956000"
  },
  {
    "text": "constrained so when we talk about not breaking things of of course we don't want to break our users code right but",
    "start": "770360",
    "end": "777160"
  },
  {
    "text": "this aversion to breaking things doesn't end with the code the people part matters a lot we don't want to break our",
    "start": "777160",
    "end": "782600"
  },
  {
    "text": "users expectations or their confidence in the platform or their mental models of how things work or the value of the",
    "start": "782600",
    "end": "789600"
  },
  {
    "text": "investment they've made in their technical skills and each of these forms of people compatibility adds additional",
    "start": "789600",
    "end": "795240"
  },
  {
    "text": "constraints to how we might involve the Evolve the platform so you know in my",
    "start": "795240",
    "end": "800320"
  },
  {
    "text": "role as architect for uh the Java language and also for the core libraries my job is to shape the developers view",
    "start": "800320",
    "end": "806920"
  },
  {
    "text": "of what Java is the user visible programming model and of course there's no shortage of well let's call them helpful suggestions",
    "start": "806920",
    "end": "813480"
  },
  {
    "text": "that I get from developers in the community Eric had one on stage last night um but there's a big disconnect",
    "start": "813480",
    "end": "819800"
  },
  {
    "text": "from my perspective between what people think I do and what I actually do so I made some charts to illustrate the difference so here's one possible view",
    "start": "819800",
    "end": "826519"
  },
  {
    "text": "of what an industry focused language designer does from the perspective of our academic colleagues and in this view",
    "start": "826519",
    "end": "834759"
  },
  {
    "text": "my job would mostly be about the technical aspects of language design creating more expressive type systems",
    "start": "834759",
    "end": "841000"
  },
  {
    "text": "adding features that let us express more kinds of programs safely or to make the intent of the program more",
    "start": "841000",
    "end": "847360"
  },
  {
    "text": "clear and okay these things are part of my job also but this view completely omits The Human Side of it when we're",
    "start": "847360",
    "end": "854480"
  },
  {
    "text": "doing a particular group of features we we will have of course A Time budget and a resource budget to get it done but",
    "start": "854480",
    "end": "860040"
  },
  {
    "text": "we're also mindful of what we like to call our complexity budget a complex feature might allow you",
    "start": "860040",
    "end": "865560"
  },
  {
    "text": "to do some really cool new things that express some interesting and valuable programs but it can also do a lot of",
    "start": "865560",
    "end": "871320"
  },
  {
    "text": "damage both directly and indirectly so directly you know a complex feature can",
    "start": "871320",
    "end": "876440"
  },
  {
    "text": "cause damage because it's easier to misuse and indirectly it can cause damage by distracting the developer from",
    "start": "876440",
    "end": "881720"
  },
  {
    "text": "the task that they're really trying to accomplish so keeping it simple means that things can actually be used and",
    "start": "881720",
    "end": "887079"
  },
  {
    "text": "used correctly by real developers and even simple and otherwise",
    "start": "887079",
    "end": "892480"
  },
  {
    "text": "sensible ideas might be discarded on the basis of cultural constraints because they're too disruptive or they're just too different to uh from the existing",
    "start": "892480",
    "end": "899160"
  },
  {
    "text": "mental models of our developers so for example um and to take an example from java 8 in in schola if you have",
    "start": "899160",
    "end": "905440"
  },
  {
    "text": "conflicts between members inherited from multiple traits uh the conflicts get resolved by linearizing the super types",
    "start": "905440",
    "end": "910839"
  },
  {
    "text": "you give priority to the ones that appeared first in the extend Clause totally sensible way to do",
    "start": "910839",
    "end": "916759"
  },
  {
    "text": "things except we couldn't do that in Java because Java developers have 20 years of experience that tells them that",
    "start": "916759",
    "end": "922839"
  },
  {
    "text": "the order in which the super class super types appear doesn't matter and to yank that out from under them and say oh just",
    "start": "922839",
    "end": "929360"
  },
  {
    "text": "for the last 20 years it's been this way but now uh you know the gong rings and all of a sudden you know your program",
    "start": "929360",
    "end": "935600"
  },
  {
    "text": "semantics are frozen you know the way they are people people aren't going to be happy about that would have been very",
    "start": "935600",
    "end": "941160"
  },
  {
    "text": "disruptive so these considerations are something you know that someone coming from an",
    "start": "941160",
    "end": "946880"
  },
  {
    "text": "academic programming language background might never think about but when you're involving a plat evolving a platform",
    "start": "946880",
    "end": "952639"
  },
  {
    "text": "used by millions of developers they become very important so this next short is a little",
    "start": "952639",
    "end": "959800"
  },
  {
    "text": "bit less charitable and therefore more fun and this is what I sometimes think",
    "start": "959800",
    "end": "965759"
  },
  {
    "text": "people in the community imagine I do based on what they say so if you proceed",
    "start": "965759",
    "end": "970959"
  },
  {
    "text": "around clockwise from the top you know you've got your secret back room meetings and then every once in a while you poke your head out of the secret",
    "start": "970959",
    "end": "977199"
  },
  {
    "text": "back room and you make some obnoxious comments on a mailing list maybe you come to a conference and make some self-promoting comments and um you know",
    "start": "977199",
    "end": "984360"
  },
  {
    "text": "and from a technical perspective it's mostly about stealing features from other languages and um of course the most important topic is",
    "start": "984360",
    "end": "991880"
  },
  {
    "text": "syntax now it's fun to complain about how people don't understand what you do and and certainly it's it's somewhat",
    "start": "991880",
    "end": "998240"
  },
  {
    "text": "therapeutic but I it's it's also important to remember that these are the",
    "start": "998240",
    "end": "1003480"
  },
  {
    "text": "people we're doing it for so in some sense what success looks like is not correcting their wrong ideas about how",
    "start": "1003480",
    "end": "1009680"
  },
  {
    "text": "it works but just making it work better anyway now James Gosling described Java",
    "start": "1009680",
    "end": "1014720"
  },
  {
    "text": "as a bluecollar language and what he meant was it's a tool for working programmers to get job's done it's not",
    "start": "1014720",
    "end": "1020560"
  },
  {
    "text": "an ivory Tower creation right and there may be a lot of rocket science in designing it or implementing it and",
    "start": "1020560",
    "end": "1026240"
  },
  {
    "text": "certainly in specifying it but you shouldn't have to be a rocket scientist to use it and we heard from real rocket",
    "start": "1026240",
    "end": "1032678"
  },
  {
    "text": "scientist yesterday um and of course you know we want to have a broad spectrum of",
    "start": "1032679",
    "end": "1037918"
  },
  {
    "text": "users right uh and we can't alienate any of these segments of our uh you know of our user base we need to have a wide",
    "start": "1037919",
    "end": "1044480"
  },
  {
    "text": "range of users but otherwise we risk sight of losing where's the mainstream going so while Java primarily today may",
    "start": "1044480",
    "end": "1050840"
  },
  {
    "text": "have its home in server side business logic we can't afford to alienate The High Frequency trading crowd because",
    "start": "1050840",
    "end": "1056200"
  },
  {
    "text": "that you know that they may be Niche today but some of those concerns may may be mainstream",
    "start": "1056200",
    "end": "1062120"
  },
  {
    "start": "1062000",
    "end": "1193000"
  },
  {
    "text": "tomorrow okay so this version of the chart is a little bit closer to reality from my perspective and and there are",
    "start": "1062120",
    "end": "1067280"
  },
  {
    "text": "some structural similarities with the previous chart you know there's definitely a slice for for meetings and interacting with the community but",
    "start": "1067280",
    "end": "1073000"
  },
  {
    "text": "what's really different is the technical Focus uh if you look at some languages",
    "start": "1073000",
    "end": "1078280"
  },
  {
    "text": "it seems like the goal is to add every feature possible and certainly if you listen to the users what you get are",
    "start": "1078280",
    "end": "1083960"
  },
  {
    "text": "requests or sometimes demands for more features features features features but",
    "start": "1083960",
    "end": "1089280"
  },
  {
    "text": "in reality adding language features should generally be your last resort and because every feature adds",
    "start": "1089280",
    "end": "1096440"
  },
  {
    "text": "some bad weight to the language every feature may interact with not only every feature that's already there but it may",
    "start": "1096440",
    "end": "1102880"
  },
  {
    "text": "interact with features that don't exist now but that you're considering for the future and so we have to choose our",
    "start": "1102880",
    "end": "1108360"
  },
  {
    "text": "features very carefully because we're going to be living with them for a very long time and a perfect example of this which is on the chart here is",
    "start": "1108360",
    "end": "1114679"
  },
  {
    "text": "serialization which has managed to interact with every single feature we've added since and you know for example in",
    "start": "1114679",
    "end": "1121039"
  },
  {
    "text": "the process of adding Lambda expressions in Java 8 the interaction with serialization took literally hundreds of",
    "start": "1121039",
    "end": "1127559"
  },
  {
    "text": "hours of analysis and discussion and I tell you I want every one of those hours of my life",
    "start": "1127559",
    "end": "1134120"
  },
  {
    "text": "back um the remaining slices mostly have to do with the consequences of feature",
    "start": "1134120",
    "end": "1139240"
  },
  {
    "text": "interaction you know a common misperception about language features is that the hard part is either the idea or the implementation and of course these",
    "start": "1139240",
    "end": "1146480"
  },
  {
    "text": "are important um but for the most part we consider these things to be the first 0% of the work right you know they're",
    "start": "1146480",
    "end": "1153080"
  },
  {
    "text": "needed to get started but that's not where the hard work is the hard work comes from fitting them in with the existing features you have and analyzing",
    "start": "1153080",
    "end": "1159760"
  },
  {
    "text": "and testing them for interactions with other features and not just with the features you have but with the features that you might have in the future and",
    "start": "1159760",
    "end": "1167120"
  },
  {
    "text": "you know the the most important aspect of this is the compatibility analysis you know analyzing the compatibility",
    "start": "1167120",
    "end": "1172840"
  },
  {
    "text": "consequences of everything and of course their calization um now the really fun part",
    "start": "1172840",
    "end": "1177960"
  },
  {
    "text": "and the part I get to do just just a little bit of the time is this slice here at the bottom that's what would",
    "start": "1177960",
    "end": "1183320"
  },
  {
    "text": "James do right that's where you get to go into your cave and meditate on what is the true Spirit of java I get to do",
    "start": "1183320",
    "end": "1189039"
  },
  {
    "text": "that for about three hours a year but it's but it's but it's good",
    "start": "1189039",
    "end": "1194120"
  },
  {
    "start": "1193000",
    "end": "1373000"
  },
  {
    "text": "okay so let's come back to this theme of don't break anything the biggest Slice on the previous uh slide was",
    "start": "1194120",
    "end": "1200600"
  },
  {
    "text": "compatibility and compatibility comes in a lot of forms and we worry about all of",
    "start": "1200600",
    "end": "1206600"
  },
  {
    "text": "them uh the most important of these is binary compatibility and uh this is about whether call sites that are",
    "start": "1206600",
    "end": "1212440"
  },
  {
    "text": "embedded in your class files will continue to link when you run them um you know against uh against other uh",
    "start": "1212440",
    "end": "1219080"
  },
  {
    "text": "other newly compiled class files you remember all method invocations and field access in Java are dynamically",
    "start": "1219080",
    "end": "1224480"
  },
  {
    "text": "linked at runtime they're linked by name there's uh the name of the method the name of the segment",
    "start": "1224480",
    "end": "1229520"
  },
  {
    "text": "uh is embedded in the uh in the class file and it gets connected at runtime with the Implement you know with with",
    "start": "1229520",
    "end": "1235159"
  },
  {
    "text": "the method uh that that you're trying to call and dynamic linkage is like one of java secret weapons right this is what",
    "start": "1235159",
    "end": "1241559"
  },
  {
    "text": "enables you to just drop a new jar on your class path and not worry about it but it's actually a pretty strong",
    "start": "1241559",
    "end": "1246600"
  },
  {
    "text": "constraint you know and and class files that are compiled in 1995 still run today and we you know expect that they",
    "start": "1246600",
    "end": "1252320"
  },
  {
    "text": "should still run 20 years even though linkage is happening every time you run your run your program",
    "start": "1252320",
    "end": "1258840"
  },
  {
    "text": "um Source compatibility another form of compatibility we worry about a lot that's whether clients or subclasses",
    "start": "1258840",
    "end": "1264360"
  },
  {
    "text": "will continue to compile after you make a change to a class and um so I changeed",
    "start": "1264360",
    "end": "1269799"
  },
  {
    "text": "super class I go to recompile my subass does it still compile right that's Source compatibility uh there's behavioral",
    "start": "1269799",
    "end": "1276400"
  },
  {
    "text": "compatibility do things continue to work the same way after a change there's of course civilization compatibility bring",
    "start": "1276400",
    "end": "1282000"
  },
  {
    "text": "up my favorite subject instances that have been serialized on an older jvm or maybe a newer jvm will they deseral Iz",
    "start": "1282000",
    "end": "1288880"
  },
  {
    "text": "properly and then there's a whole host of more subtle compatibility issues such as changes in the inmemory footprint or",
    "start": "1288880",
    "end": "1294960"
  },
  {
    "text": "the performance characteristics and you know there's this cross cutting concern that's you know that cuts across all of",
    "start": "1294960",
    "end": "1301640"
  },
  {
    "text": "these uh compatibility um modes which is separate compilation so because of",
    "start": "1301640",
    "end": "1307120"
  },
  {
    "text": "dynamic linkage you're always having to deal with the fact that part of your system may have been recompiled and part",
    "start": "1307120",
    "end": "1312919"
  },
  {
    "text": "of it hasn't been and normally you know if you follow some reasonable rules for evolving your code this doesn't you know",
    "start": "1312919",
    "end": "1319559"
  },
  {
    "text": "turn out to be a problem but these things can show up if you change your",
    "start": "1319559",
    "end": "1325080"
  },
  {
    "text": "your compilation code generation strategy or when the generated code for a class depends on information from",
    "start": "1325080",
    "end": "1330559"
  },
  {
    "text": "other classes this shows up with a bridge methods uh you know that are uh consequence of generics and you know",
    "start": "1330559",
    "end": "1337559"
  },
  {
    "text": "it's happened more than once that an otherwise Wordly idea has gotten dropped",
    "start": "1337559",
    "end": "1342799"
  },
  {
    "text": "because we have we have an ongoing compatibility concern whether it be a binary compatibility or Source",
    "start": "1342799",
    "end": "1347960"
  },
  {
    "text": "compatibility and that's not to say that we would never ever violate any of these forms of compatibility you know after all you",
    "start": "1347960",
    "end": "1354200"
  },
  {
    "text": "can't fix a bug without violating behavioral compatibility on the other hand there are times we don't fix bugs for that reason um and so you know it",
    "start": "1354200",
    "end": "1362720"
  },
  {
    "text": "has to be a very careful decision you know so after you know sufficiently quantifying the amount of code that",
    "start": "1362720",
    "end": "1367960"
  },
  {
    "text": "might break we we can consider whether this is the right thing to do but it's not something that we do very",
    "start": "1367960",
    "end": "1374000"
  },
  {
    "start": "1373000",
    "end": "1488000"
  },
  {
    "text": "lightly now a lot of people think we're crazy to be this concerned about compatibility but my claim is there",
    "start": "1374000",
    "end": "1381400"
  },
  {
    "text": "really isn't any other responsible choice when you have billions of lines of code out there nearly any",
    "start": "1381400",
    "end": "1386600"
  },
  {
    "text": "incompatible change is going to break someone's mission critical code and some people say so what right",
    "start": "1386600",
    "end": "1392480"
  },
  {
    "text": "but I think it takes a certain kind of arrogance to say yeah yeah you should break his code it'll be for his own good",
    "start": "1392480",
    "end": "1399120"
  },
  {
    "text": "right but still people actually say this to us with some frequency um and I'm",
    "start": "1399120",
    "end": "1404480"
  },
  {
    "text": "sure they think they're being helpful rather than arrogant but the but but the mistake that they're making is they're only focusing on part of the picture and",
    "start": "1404480",
    "end": "1411400"
  },
  {
    "text": "what I see is that developers tend to overestimate the importance of code and underestimate the importance of stable",
    "start": "1411400",
    "end": "1418440"
  },
  {
    "text": "programs now this shouldn't be surprising to anyone right what a developer stare at all day code right so",
    "start": "1418440",
    "end": "1424240"
  },
  {
    "text": "for them it's their whole world um but it's really only part of the picture it's just the part of the picture they",
    "start": "1424240",
    "end": "1429480"
  },
  {
    "text": "see all day so it's a little bit like one of those optical illusions where depending on what part of the picture you look at you see a different answer",
    "start": "1429480",
    "end": "1436640"
  },
  {
    "text": "does everybody see it good evil good evil okay good so you know when users look at a",
    "start": "1436640",
    "end": "1443240"
  },
  {
    "text": "language feature they're imagining all the good things they could do with it which is great that you know that that's what they're supposed to do they're",
    "start": "1443240",
    "end": "1449159"
  },
  {
    "text": "imagining what code could I write with that that I can't write with the language that stands today and when we",
    "start": "1449159",
    "end": "1454440"
  },
  {
    "text": "look at a language feature we do the same thing but also we look have to look at the bigger picture of how not only",
    "start": "1454440",
    "end": "1460799"
  },
  {
    "text": "how it might be used but how might it be misused how might it interact with other language features how it might change",
    "start": "1460799",
    "end": "1467080"
  },
  {
    "text": "the style in which Developers program how it might affect the migration of existing code to use these new features",
    "start": "1467080",
    "end": "1472919"
  },
  {
    "text": "and whether it'll cause subtle changes and whether those changes are overall good or bad for the ecosystem so when we",
    "start": "1472919",
    "end": "1479200"
  },
  {
    "text": "when we look at the changes and how they might affect your code we're not thinking about how it will affect your",
    "start": "1479200",
    "end": "1485120"
  },
  {
    "text": "code we have to be thinking about how does it affect everybody's code now at this point you're probably",
    "start": "1485120",
    "end": "1491559"
  },
  {
    "start": "1488000",
    "end": "1580000"
  },
  {
    "text": "getting a little bit depressed right you're probably thinking well it's impossible to change anything how how can you make any progress if you can't",
    "start": "1491559",
    "end": "1497679"
  },
  {
    "text": "change anything and so you might conclude the sensible strategy is just do nothing right and that is a",
    "start": "1497679",
    "end": "1504399"
  },
  {
    "text": "guaranteed path to compatibility but it's also a guaranteed path to irrelevance so evolving things",
    "start": "1504399",
    "end": "1510320"
  },
  {
    "text": "compatibly is not impossible it's just harder and it's like working in pretty much any other difficult environment you",
    "start": "1510320",
    "end": "1516840"
  },
  {
    "text": "have to approach the situation with the proper precautions and training and safety equipment so you got a suit",
    "start": "1516840",
    "end": "1524440"
  },
  {
    "text": "up this is an actual picture from our offices no no just",
    "start": "1524440",
    "end": "1530000"
  },
  {
    "text": "kidding okay so how do we do it um well if it's not acceptable to change the meaning of existing programs our",
    "start": "1530000",
    "end": "1536840"
  },
  {
    "text": "language designer's next best trick is to expand the range of valid programs that you can express so to assign",
    "start": "1536840",
    "end": "1542080"
  },
  {
    "text": "meaning to programs that previously were invalid so ideally what you want to do",
    "start": "1542080",
    "end": "1547279"
  },
  {
    "text": "is add features so that they abstract over other existing features so instead of adding a completely new feature take",
    "start": "1547279",
    "end": "1553320"
  },
  {
    "text": "an existing feature and extend it to a broader range of situations the reason we this is that",
    "start": "1553320",
    "end": "1559039"
  },
  {
    "text": "this Builds on the users's existing mental models of how things work and is also less likely to create interactions",
    "start": "1559039",
    "end": "1565960"
  },
  {
    "text": "with other features now the really hard part in this is coming up with a a sensible semantics for the abstracted",
    "start": "1565960",
    "end": "1572840"
  },
  {
    "text": "feature such that when you restrict it to the conditions where it used to be valid they match up with the existing",
    "start": "1572840",
    "end": "1579200"
  },
  {
    "text": "semantics right that's the hard part um so I'll give a quick example of this um",
    "start": "1579200",
    "end": "1585440"
  },
  {
    "start": "1580000",
    "end": "1696000"
  },
  {
    "text": "this is like I think the only code in the uh in the talk so apolog if you're not Java programmers um so if we were",
    "start": "1585440",
    "end": "1591360"
  },
  {
    "text": "going to start uh you know s it's a good example of this is when we added default methods in Java 8 so Java 8 is a adds",
    "start": "1591360",
    "end": "1598760"
  },
  {
    "text": "default methods you can add Behavior to methods and interfaces it's a form of multiple inheritance of behavior not",
    "start": "1598760",
    "end": "1604200"
  },
  {
    "text": "multiple inheritance of state but multiple inheritance of behavior and if we were starting from scratch with multiple inheritance of behavior the",
    "start": "1604200",
    "end": "1610080"
  },
  {
    "text": "rules for resolving conflicts but when you're inheriting behavior from two different super types probably would",
    "start": "1610080",
    "end": "1615520"
  },
  {
    "text": "have been very different from what we came up with so so to summarize briefly in you know uh Java starting from java",
    "start": "1615520",
    "end": "1621840"
  },
  {
    "text": "10 interfaces can could contribute only type information and members so you have interface I with member m and then Class",
    "start": "1621840",
    "end": "1628919"
  },
  {
    "text": "C has a member m and then you have this class D that expends both C and I and uh what happens there is when D inherits M",
    "start": "1628919",
    "end": "1635840"
  },
  {
    "text": "from both C and I the compiler just merges the members because it says okay I have a contract",
    "start": "1635840",
    "end": "1642279"
  },
  {
    "text": "declaration in this super type I have an implementation in that super type I'm going to declare them to be the same thing and everything's good",
    "start": "1642279",
    "end": "1649039"
  },
  {
    "text": "so in Java 8 we added the ability to add Behavior to the interface by marking it as having a default implementation which",
    "start": "1649039",
    "end": "1655000"
  },
  {
    "text": "can be inherited in classes that don't declare the method but now if you look",
    "start": "1655000",
    "end": "1660120"
  },
  {
    "text": "at D you have it inheriting Behavior potentially from two different supertypes so that's a conflict that has",
    "start": "1660120",
    "end": "1665840"
  },
  {
    "text": "to be resolved um and we want being adding a default implementation to be a binary",
    "start": "1665840",
    "end": "1671320"
  },
  {
    "text": "and Source compatible change so we don't want uh D to all of a sudden be broken and have the compiler say well you have",
    "start": "1671320",
    "end": "1677240"
  },
  {
    "text": "a conflict now you have to resolve it um and so you know what we um what we did",
    "start": "1677240",
    "end": "1684200"
  },
  {
    "text": "here uh is we looked at how does the existing semantics you know uh behave",
    "start": "1684200",
    "end": "1690200"
  },
  {
    "text": "and let's find a way of defining the semantics of multiple inheritance to be um you know to be consistent with",
    "start": "1690200",
    "end": "1696559"
  },
  {
    "start": "1696000",
    "end": "1767000"
  },
  {
    "text": "that so what we did was we used a standard um evolutionary trick which was to adjust the rules to give the priority",
    "start": "1696559",
    "end": "1702640"
  },
  {
    "text": "to the old way so when resolving a conflict we have three rules um",
    "start": "1702640",
    "end": "1708640"
  },
  {
    "text": "rule one says we prefer the implementation from a super class to that of a super",
    "start": "1708640",
    "end": "1714200"
  },
  {
    "text": "interface um so if there is an implementation in the super class superclass wins we don't even look at the interfaces and this gives us",
    "start": "1714200",
    "end": "1720519"
  },
  {
    "text": "absolute compatibility with this existing code because this rule one is how things worked you know before we",
    "start": "1720519",
    "end": "1726640"
  },
  {
    "text": "added Behavior to interfaces and then like you know the second rule uh is if two interfaces have an implementation",
    "start": "1726640",
    "end": "1733279"
  },
  {
    "text": "and one's a subass of the other we prefer the subass that's pretty obvious and then the third rule is well there's no rule three um and then the programmer",
    "start": "1733279",
    "end": "1741240"
  },
  {
    "text": "has to resolve the conflict by overriding the method and picking which implementation they want right so this",
    "start": "1741240",
    "end": "1747240"
  },
  {
    "text": "is what I meant by you know adjusting a feature to fit in with other other features right the rules that we arrived",
    "start": "1747240",
    "end": "1752519"
  },
  {
    "text": "at that that um that implementations and interfaces are just default and they're subordinate to the inter implementations",
    "start": "1752519",
    "end": "1758480"
  },
  {
    "text": "and classes probably wouldn't be exactly what we came up with if we were inventing an object-oriented language",
    "start": "1758480",
    "end": "1764360"
  },
  {
    "text": "with multiple inherence of behavior from scratch that's okay there's this is also a perfectly",
    "start": "1764360",
    "end": "1770240"
  },
  {
    "start": "1767000",
    "end": "1945000"
  },
  {
    "text": "reasonable and sensible model and there's more than one reasonable way to design a programming language and we've used this trick before this is the same",
    "start": "1770240",
    "end": "1776480"
  },
  {
    "text": "trick we used when we added autoboxing in Java 5 so we added these new implicit type conversions where you can convert",
    "start": "1776480",
    "end": "1782320"
  },
  {
    "text": "from an into to an integer um and this is great except that all of a sudden the set of applicable methods now is larger",
    "start": "1782320",
    "end": "1788640"
  },
  {
    "text": "than it used to be and that could perturb overload selection decisions and we didn't want code that used to compile",
    "start": "1788640",
    "end": "1795120"
  },
  {
    "text": "to not compile because now the overloads are ambiguous so in order to keep this from being incompatible we said we took",
    "start": "1795120",
    "end": "1802159"
  },
  {
    "text": "the overload resolution rules we said take the old rules that's step one in the new algorithm and then if step one",
    "start": "1802159",
    "end": "1807960"
  },
  {
    "text": "doesn't come up with anything then we move on to step two which is consider boxing conversions it's a tradeoff of",
    "start": "1807960",
    "end": "1814039"
  },
  {
    "text": "complexity for compatibility and if you don't make that tradeoff too many times",
    "start": "1814039",
    "end": "1819279"
  },
  {
    "text": "you don't get mired in complexity if you do that over and over and over again eventually the rule set get so complicated that you you don't want to",
    "start": "1819279",
    "end": "1825120"
  },
  {
    "text": "deal with it but if you do it judiciously it's a pretty good trick so I call the strategy Embrace and",
    "start": "1825120",
    "end": "1830919"
  },
  {
    "text": "extend because first you have to embrace the existing semantics before you can find a sensible generalization that both",
    "start": "1830919",
    "end": "1836840"
  },
  {
    "text": "stands on its own and matches the existing semantics so this is like one of the tricks that we have in our",
    "start": "1836840",
    "end": "1842120"
  },
  {
    "text": "toolbox all right so I've talk a little bit more philosophically now about the things that we learned um the previous",
    "start": "1842120",
    "end": "1849519"
  },
  {
    "text": "example default methods this worked out pretty well and and we were pretty happy with how that uh came out but the idea",
    "start": "1849519",
    "end": "1855159"
  },
  {
    "text": "did not spring fully formed on day one it took two or three years from the time we first cooked up the crazy idea of",
    "start": "1855159",
    "end": "1862360"
  },
  {
    "text": "what if we could attach Behavior to to interface methods and the time we arrived at a sensible model that Java",
    "start": "1862360",
    "end": "1867919"
  },
  {
    "text": "developers don't look at and say what is this alien Contraption you've nailed on to the side of my language well people",
    "start": "1867919",
    "end": "1873960"
  },
  {
    "text": "say that anyway but you know you some people don't like to learn new things um",
    "start": "1873960",
    "end": "1879279"
  },
  {
    "text": "and so you know the solution of course of how you get there is iterations we",
    "start": "1879279",
    "end": "1884760"
  },
  {
    "text": "went through a lot of iterations of the language design you know for this and each one seemed like an improvement over",
    "start": "1884760",
    "end": "1889880"
  },
  {
    "text": "the previous one but it probably wasn't until we got to about the sixth iteration that we got it down to",
    "start": "1889880",
    "end": "1895080"
  },
  {
    "text": "something that was Simple and Clean enough that we could fit on one slide like the slide I just showed you the",
    "start": "1895080",
    "end": "1900880"
  },
  {
    "text": "danger is because each iteration was simpler than the previous one at almost any point we could have easily made the",
    "start": "1900880",
    "end": "1906120"
  },
  {
    "text": "mistake of saying Oh we must be there because it's definitely simpler than what we had yesterday and it's way simpler than what we had last year um",
    "start": "1906120",
    "end": "1913760"
  },
  {
    "text": "and we could have easily convinced ourselves we were done um and it you know the reality is it takes a long time",
    "start": "1913760",
    "end": "1919919"
  },
  {
    "text": "and sometimes a lot of iterations to find the right idea and and more than once I I had to tell my management actually the man sitting there hi George",
    "start": "1919919",
    "end": "1927919"
  },
  {
    "text": "we weren't there we're not there yet and it's going to take longer and thankfully the answer was always take the time to",
    "start": "1927919",
    "end": "1933159"
  },
  {
    "text": "get it right because when contemplating something that you're going to have to support for 20 years uh and it's going",
    "start": "1933159",
    "end": "1938679"
  },
  {
    "text": "to constrain your Evolution over the next 20 years you want to be able to take the time to get it right or be willing to not do it at all so I",
    "start": "1938679",
    "end": "1946240"
  },
  {
    "start": "1945000",
    "end": "2239000"
  },
  {
    "text": "recently came across this quote which I I think really echoed our experience here uh this quote is from Steve Jobs um",
    "start": "1946240",
    "end": "1952519"
  },
  {
    "text": "where he says when you start looking at a problem and it seems really simple and you have all these Simple Solutions you",
    "start": "1952519",
    "end": "1957880"
  },
  {
    "text": "don't really understand the complexity of it and then you know you start to understand the complexity and your",
    "start": "1957880",
    "end": "1963639"
  },
  {
    "text": "Solutions are are you know are are are really complex and you know that's when",
    "start": "1963639",
    "end": "1969960"
  },
  {
    "text": "you're at the middle of the uh of of the process and that's where most people stop and the solutions there tend maybe",
    "start": "1969960",
    "end": "1976760"
  },
  {
    "text": "to work for a while but the great person will keep on going and find the key underlying principle of the problem and",
    "start": "1976760",
    "end": "1982399"
  },
  {
    "text": "come up with a beautiful elegant solution that works and the really hard part you know",
    "start": "1982399",
    "end": "1987760"
  },
  {
    "text": "is when you found something that feels like it works realizing that you might still be in the middle and you probably",
    "start": "1987760",
    "end": "1993519"
  },
  {
    "text": "are still in the middle and having the faith to keep going that there you know",
    "start": "1993519",
    "end": "1998880"
  },
  {
    "text": "that there might be a better answer in there even if you don't know what it is because it's really tempting to just declare Victory and stop there you know",
    "start": "1998880",
    "end": "2005360"
  },
  {
    "text": "CU After all you've been thinking about this for two years you know the problem is complex and yes your solution is complex but of course it's complex it's",
    "start": "2005360",
    "end": "2012159"
  },
  {
    "text": "a complex problem right and uh you know externally you could be dealing with forces pushing you to ship what you've",
    "start": "2012159",
    "end": "2017919"
  },
  {
    "text": "got and and you know you need to be able to take the time to find The Simple Solution that's lurking in the in the",
    "start": "2017919",
    "end": "2023760"
  },
  {
    "text": "complex solution and it's amazing how often this happens if you give yourself the time to do it uh an even more extreme example of",
    "start": "2023760",
    "end": "2030799"
  },
  {
    "text": "this um is generics themselves uh so last year at Java 1 James Gosling told this story about why generics weren't",
    "start": "2030799",
    "end": "2037080"
  },
  {
    "text": "included in Java from the outset and it's not because we didn't understand parametric polymorphism in 1995 and it's",
    "start": "2037080",
    "end": "2043080"
  },
  {
    "text": "not because we thought it was a great idea to have a static cype system that wasn't strong enough to let you put typed elements into a container and not",
    "start": "2043080",
    "end": "2049599"
  },
  {
    "text": "retain their types when they come out it's because we didn't know how to do it right and if we had kept going anyway we",
    "start": "2049599",
    "end": "2055560"
  },
  {
    "text": "would have ended up with something like C++ templates or patterns from Beta And I think we're all pretty glad we didn't",
    "start": "2055560",
    "end": "2060839"
  },
  {
    "text": "get those Solutions in Java 10 and it may have taken 10 years to get there but the generics we got were much closer to",
    "start": "2060839",
    "end": "2066720"
  },
  {
    "text": "the spirit of the language and the generics we would have gotten in '95 would not have been so if you don't know",
    "start": "2066720",
    "end": "2072358"
  },
  {
    "text": "the right thing to do at least don't do the wrong thing and sometimes that means doing nothing and you have to be okay",
    "start": "2072359",
    "end": "2078480"
  },
  {
    "text": "with that another way to say this is reality hardens like concrete before you",
    "start": "2078480",
    "end": "2084158"
  },
  {
    "text": "do anything there's lots of paths forward once you do something there are many fewer paths forward and maybe only",
    "start": "2084159",
    "end": "2089760"
  },
  {
    "text": "one and this is true for the little things as well as the big so always be thinking about what doors are you closing in addition to the doors you're",
    "start": "2089760",
    "end": "2096118"
  },
  {
    "text": "opening a a related aspect uh to this lesson is",
    "start": "2096119",
    "end": "2101560"
  },
  {
    "text": "you need to be skeptical of the inclination to punt on the hard cases when you're tempted to punt on some case",
    "start": "2101560",
    "end": "2107839"
  },
  {
    "text": "because it's too hard that's generally a sign you're not at the middle yet oh H sorry the question is what does",
    "start": "2107839",
    "end": "2113880"
  },
  {
    "text": "punt mean give up say oh forget about that I'm just gonna you know I'm just going to ignore that it's a term from American",
    "start": "2113880",
    "end": "2121920"
  },
  {
    "text": "football uh so the reason this sense of finishing the job is so important in language design is that what might see",
    "start": "2121920",
    "end": "2127720"
  },
  {
    "text": "seem like a clever compromise of we're going to handle cases A and C and forget about case D this may seem like a good",
    "start": "2127720",
    "end": "2133640"
  },
  {
    "text": "compromise today and tomorrow it is uh just another incomprehensible irregularity that makes programmers",
    "start": "2133640",
    "end": "2140000"
  },
  {
    "text": "crazy um and it's often tempting to you know to give into that because you can at least say well it's better than it",
    "start": "2140000",
    "end": "2146240"
  },
  {
    "text": "was before before AB andc didn't work at all now ab andc work and we still haven't solved D but you know that's got",
    "start": "2146240",
    "end": "2152480"
  },
  {
    "text": "to be better right but you know irregularity really bothers developers and for good reason because irregularity",
    "start": "2152480",
    "end": "2158880"
  },
  {
    "text": "breeds complexity and complexity distracts you from the programming task at hand so the kind of naive suggestions",
    "start": "2158880",
    "end": "2166040"
  },
  {
    "text": "that we sometimes get of well just make another language restriction that you can't do this when that happens you know",
    "start": "2166040",
    "end": "2171960"
  },
  {
    "text": "it may seem like a practical shortcut but it it's always going to be tomorrow's what in God's name were they",
    "start": "2171960",
    "end": "2177760"
  },
  {
    "text": "thinking topics so this last bit advice is might",
    "start": "2177760",
    "end": "2183960"
  },
  {
    "text": "sound almost like the opposite of the previous one which advises against accepting irregularities because",
    "start": "2183960",
    "end": "2189359"
  },
  {
    "text": "building a regular regular solution is too hard um the opposite of that which",
    "start": "2189359",
    "end": "2194520"
  },
  {
    "text": "is also important is to be skeptical of the motivation to do anything for reasons of consistency consistency is a",
    "start": "2194520",
    "end": "2201440"
  },
  {
    "text": "good a good guide and and of course and and but we often you know allow the desire for superficial consistency to",
    "start": "2201440",
    "end": "2208440"
  },
  {
    "text": "replace a deeper analysis of the problem and you know I came to this by you know observing many of the most poorly",
    "start": "2208440",
    "end": "2215640"
  },
  {
    "text": "thought out suggestions that we get always start with for consistency we should do dot dot dot and invariably you",
    "start": "2215640",
    "end": "2223079"
  },
  {
    "text": "know these are terrible ideas and they're just you know people are justifying it to by consistency well the",
    "start": "2223079",
    "end": "2229040"
  },
  {
    "text": "reality is when you have a complex system you can find a consistency excuse for anything right and so you you know",
    "start": "2229040",
    "end": "2234680"
  },
  {
    "text": "when when consistency see you know feels like the the best explanation you got to dig",
    "start": "2234680",
    "end": "2239760"
  },
  {
    "start": "2239000",
    "end": "2356000"
  },
  {
    "text": "deeper and of course that doesn't mean consistency is a bad goal it's a great goal right uh just don't use it to",
    "start": "2239760",
    "end": "2245319"
  },
  {
    "text": "justify anything um and you know we have this great quote from the American philosopher uh Ralph Waldo Emerson uh a",
    "start": "2245319",
    "end": "2253000"
  },
  {
    "text": "foolish consistency is the hobgoblin of little minds of this is often misquoted though people leave out the word foolish",
    "start": "2253000",
    "end": "2259200"
  },
  {
    "text": "so just be aware that some consistencies are foolish and guard against that okay",
    "start": "2259200",
    "end": "2265079"
  },
  {
    "text": "so I want to talk just a little bit about um where we're going in the future you know I talked a little bit about",
    "start": "2265079",
    "end": "2270480"
  },
  {
    "text": "some of the lessons we learned during the you know the Java 8 Evolution and Java 8 was a great upgrade it was",
    "start": "2270480",
    "end": "2275520"
  },
  {
    "text": "probably the biggest upgrade to the Java programming model ever involved coordinated updates to the language the",
    "start": "2275520",
    "end": "2281040"
  },
  {
    "text": "library and the jbm and you know we're seeing renewed excitement over java you",
    "start": "2281040",
    "end": "2286480"
  },
  {
    "text": "know in the community these days which is great so we're done right time to you know time to rest on all orals of course",
    "start": "2286480",
    "end": "2292760"
  },
  {
    "text": "not okay so how do we pick the things that we uh we decide to work on because we can only work on a few things we",
    "start": "2292760",
    "end": "2298480"
  },
  {
    "text": "don't have infinite bandwidth we have a limited budget a limited complexity budget so we have to pick our our",
    "start": "2298480",
    "end": "2303760"
  },
  {
    "text": "targets carefully and our approach for picking targets I think is a pragmatic one look",
    "start": "2303760",
    "end": "2309599"
  },
  {
    "text": "at the pain points that developers and um and deployers are suffering from pick the biggest one and beat on that so in",
    "start": "2309599",
    "end": "2316839"
  },
  {
    "text": "Java 8 you know these pain points were mostly language driven uh specifically improving the ability to abstract over",
    "start": "2316839",
    "end": "2322440"
  },
  {
    "text": "Behavior using Lambda Expressions that was great in Java 9 our focus is on the",
    "start": "2322440",
    "end": "2328880"
  },
  {
    "text": "pain of programming in the large uh reducing the pain of assembling large applications out of components and using",
    "start": "2328880",
    "end": "2334440"
  },
  {
    "text": "those techniques to modularize the platform itself and get us out of class path hell or jar hell um but pain points",
    "start": "2334440",
    "end": "2342599"
  },
  {
    "text": "can also come uh environmentally so uh sometimes they Bubble Up from the hardware and we since we want Java and",
    "start": "2342599",
    "end": "2348760"
  },
  {
    "text": "the jvm to continue to run well on the moving Target of Modern Hardware every once in a while we have to look at",
    "start": "2348760",
    "end": "2354599"
  },
  {
    "text": "Java's relationship with the hardware so let's talk about hardware for a second and how it's changed in the last 25",
    "start": "2354599",
    "end": "2361119"
  },
  {
    "start": "2356000",
    "end": "2549000"
  },
  {
    "text": "years and the summary is a lot right most of us don't pay attention to this on a day-to-day basis which is great but",
    "start": "2361119",
    "end": "2367240"
  },
  {
    "text": "uh Hardware has really changed dramatically um in the last 20 25 years in the very old days we had",
    "start": "2367240",
    "end": "2374280"
  },
  {
    "text": "systems that were single core S single socket so the green thing represents your core and the blue thing represents main memory they had no cash no",
    "start": "2374280",
    "end": "2381440"
  },
  {
    "text": "instruction par no instruction level parallelism no pipelining so in those days an arithmetic operation cost about",
    "start": "2381440",
    "end": "2389280"
  },
  {
    "text": "the same as a memory fetch on the order of you know one two three four Cycles so",
    "start": "2389280",
    "end": "2394359"
  },
  {
    "text": "the performance model was really simple count instructions you just do it statically you could look at the assembly dump of a program and model its",
    "start": "2394359",
    "end": "2401079"
  },
  {
    "text": "performance in your head over time our systems got more complicated so we added cash and we",
    "start": "2401079",
    "end": "2407400"
  },
  {
    "text": "added multiple layers of cash and then we added multiple sockets and we added multiple cores and the core counts grew",
    "start": "2407400",
    "end": "2414200"
  },
  {
    "text": "um and as these systems got more sophisticated the cost of memory access got less predictable and it ranged from",
    "start": "2414200",
    "end": "2421520"
  },
  {
    "text": "you know a couple of Cycles uh to get something that's in your L1 cache to a few hundred Cycles if you cash miss all",
    "start": "2421520",
    "end": "2428480"
  },
  {
    "text": "the way down to main memory usually 300 block 300 Cycles is a reasonable estimate for a full cash Miss and at the",
    "start": "2428480",
    "end": "2436040"
  },
  {
    "text": "same time the core has got more complex with deep pipelines and supercal or execution uh and we can execute four",
    "start": "2436040",
    "end": "2441720"
  },
  {
    "text": "arithmetic operations on a single cycle so if a cash Mist cost you 300 cycles",
    "start": "2441720",
    "end": "2446800"
  },
  {
    "text": "and you can Issue four arithmetic operations in one cycle a cash mist is now costing you potentially a thousand",
    "start": "2446800",
    "end": "2453280"
  },
  {
    "text": "instructions so 25 years ago one:1 day a th to",
    "start": "2453280",
    "end": "2459319"
  },
  {
    "text": "one now it stands to reason that given a three order of magnitude shift in the",
    "start": "2459319",
    "end": "2464400"
  },
  {
    "text": "cost model whatever engineering tradeoffs we made uh in 1995 about how Java lays out data in memory can't",
    "start": "2464400",
    "end": "2471760"
  },
  {
    "text": "possibly be optimal for days today's systems unless we got really lucky and we've been suffering with some really",
    "start": "2471760",
    "end": "2477079"
  },
  {
    "text": "bad decisions for the last 20 years so it further stands the reason",
    "start": "2477079",
    "end": "2482319"
  },
  {
    "text": "that periodically we need to uh uh you know update these things so let's look at the jvm type system so you've got",
    "start": "2482319",
    "end": "2488760"
  },
  {
    "text": "your eight primitive types you've got objects you've got arrays and this is super flexible you can model anything",
    "start": "2488760",
    "end": "2493920"
  },
  {
    "text": "you want with this but the flexibility isn't in exactly the right places so Primitives are more rigid than we'd like",
    "start": "2493920",
    "end": "2499839"
  },
  {
    "text": "you know if you want to represent you know a 65 bit integer you're out of luck",
    "start": "2499839",
    "end": "2505920"
  },
  {
    "text": "right you have to you have to do that with objects um and objects are really flexible but sometimes more flexible",
    "start": "2505920",
    "end": "2512119"
  },
  {
    "text": "than we need um and the big issue is every object has identity which exists to serve mut ility and polymorphism but",
    "start": "2512119",
    "end": "2518880"
  },
  {
    "text": "not all objects need this even though all objects pay for it and you might think that the VM would just be able to",
    "start": "2518880",
    "end": "2524480"
  },
  {
    "text": "figure it out and optimize around this and VMS have gotten really good at um at slicing through the uh the cost of code",
    "start": "2524480",
    "end": "2531800"
  },
  {
    "text": "abstraction but they never really got very good at slicing through the cost of data abstraction um and and the reason",
    "start": "2531800",
    "end": "2537280"
  },
  {
    "text": "for that is that the VM can never really figure out whether an object is going to need its identity or not because any",
    "start": "2537280",
    "end": "2542839"
  },
  {
    "text": "code can use any object as a lock at any time and so the VM has to be pessimistic in the way it lays out",
    "start": "2542839",
    "end": "2548920"
  },
  {
    "text": "data so to illustrate this you know imagine you've got a simple tupal like class like an XY point and let's say you",
    "start": "2548920",
    "end": "2556640"
  },
  {
    "start": "2549000",
    "end": "2722000"
  },
  {
    "text": "know this is an immutable class and it's final so it's not polymorphic so it doesn't really need an object identity",
    "start": "2556640",
    "end": "2562160"
  },
  {
    "text": "but it gets one anyway so now let's say you've got an array of those things so the array has an object header and each",
    "start": "2562160",
    "end": "2568079"
  },
  {
    "text": "element of the array is a reference to a point object which has its own header and you know from a memory efficiency",
    "start": "2568079",
    "end": "2573800"
  },
  {
    "text": "perspective we're not doing very well right we've got two words of data and for each one of those we've got two words of object header and a pointer so",
    "start": "2573800",
    "end": "2580640"
  },
  {
    "text": "that's like 60% overhead right um and you know because these objects are",
    "start": "2580640",
    "end": "2585800"
  },
  {
    "text": "allocated on the Heap that's going to be work for the allocated on the garbage collector and uh after garbage",
    "start": "2585800",
    "end": "2591319"
  },
  {
    "text": "collection they may even get shuffled in memory right but the real cost comes from the indirection cost of these",
    "start": "2591319",
    "end": "2596559"
  },
  {
    "text": "pointers so if you're walking your way uh through an array of ins you get great locality right so you uh pull the first",
    "start": "2596559",
    "end": "2603319"
  },
  {
    "text": "one in and uh you know it pulls the next seven or 15 into the cach line and by the time you're on the third or",
    "start": "2603319",
    "end": "2609119"
  },
  {
    "text": "fourth the hardware prefet is kicked in and it's already pulled the next slug in and everything's great um on the other hand if you've got",
    "start": "2609119",
    "end": "2615960"
  },
  {
    "text": "an array of objects like this you may cash Miss on every one of those D references and cash misses like I said",
    "start": "2615960",
    "end": "2622720"
  },
  {
    "text": "before can be really expensive now maybe this is fine maybe your data set is small maybe you know your performance",
    "start": "2622720",
    "end": "2627839"
  },
  {
    "text": "requirements are are you know are are moderate and it's not an issue which is actually the case for you know 90 95%",
    "start": "2627839",
    "end": "2634040"
  },
  {
    "text": "you know of of jva deployments but if you're doing something like High frequency trading or big data analytics",
    "start": "2634040",
    "end": "2639160"
  },
  {
    "text": "these costs really add up and you didn't really ask for this layout right what you'd really rather have is this layout",
    "start": "2639160",
    "end": "2645359"
  },
  {
    "text": "you have an array of XY points you'd like them to be laid out xyxyxy now when confronted with a",
    "start": "2645359",
    "end": "2652079"
  },
  {
    "text": "situation like this developers sometimes take things into their own hands um sometimes they have to sometimes they",
    "start": "2652079",
    "end": "2657920"
  },
  {
    "text": "just can't help themselves um but developers will do ugly tricks like this where they'll shred you know an array of",
    "start": "2657920",
    "end": "2663280"
  },
  {
    "text": "XY points into two arrays you know one of x's and one of y's hoping to gain the locality that they lost um and you know",
    "start": "2663280",
    "end": "2671040"
  },
  {
    "text": "this code is harder to write and it's harder to read it's harder to maintain and the sad part is developers",
    "start": "2671040",
    "end": "2676559"
  },
  {
    "text": "often do stuff like this for performance reasons with no actual evidence that",
    "start": "2676559",
    "end": "2681640"
  },
  {
    "text": "their code isn't already fast enough or maybe in fact without having performance measurements or goals at all but",
    "start": "2681640",
    "end": "2688520"
  },
  {
    "text": "regardless of whether developers do this at a genuine need or out of some destructive obsessive compulsive",
    "start": "2688520",
    "end": "2696040"
  },
  {
    "text": "disorder you know we have to blame ourselves for this to some degree right we've put developers in a situation",
    "start": "2696040",
    "end": "2701559"
  },
  {
    "text": "where they feel like they have to choose between you know the good stuff good abstraction and encapsulation and good",
    "start": "2701559",
    "end": "2707079"
  },
  {
    "text": "performance and if you put people in that choice some you know sometimes people will choose wrong so this brings us to the feature",
    "start": "2707079",
    "end": "2714440"
  },
  {
    "text": "that we're working on um it's a VM feature uh and it's designed you know um",
    "start": "2714440",
    "end": "2719520"
  },
  {
    "text": "because of the uh you know change in uh Hardware characteristics which is value types if we recast this point class as a",
    "start": "2719520",
    "end": "2727040"
  },
  {
    "start": "2722000",
    "end": "2857000"
  },
  {
    "text": "value class what we're saying is we don't care about identity we don't care about all the baggage that brings with it and by giving up on this flexibility",
    "start": "2727040",
    "end": "2734359"
  },
  {
    "text": "we gain the ability to treat it as a value so values are implicitly immutable",
    "start": "2734359",
    "end": "2739839"
  },
  {
    "text": "and final and they derive their equality from State rather than identity which means they can be passed by value you",
    "start": "2739839",
    "end": "2745440"
  },
  {
    "text": "can pass them in registers or on the stack instead of on the Heap and this means that if you have an array of them",
    "start": "2745440",
    "end": "2751200"
  },
  {
    "text": "they automatically flatten into an array and if they're embedded in classes they automatically get flat P into their",
    "start": "2751200",
    "end": "2757559"
  },
  {
    "text": "enclosing classes um and so when you Traverse them you don't have those IND directions that you had in the previous example so the",
    "start": "2757559",
    "end": "2765480"
  },
  {
    "text": "cool thing about values is they can have most of the things classes have they can have methods and Constructors and Fields and their methods can be private and",
    "start": "2765480",
    "end": "2771240"
  },
  {
    "text": "they can be generic and all of that um and because they're not polymorphic there's no dispatch cost when you invoke",
    "start": "2771240",
    "end": "2777359"
  },
  {
    "text": "their methods um and so you can essentially use them as cost-free",
    "start": "2777359",
    "end": "2782599"
  },
  {
    "text": "rappers that give you abstraction with no runtime cost so this is great and so our mantra for Value types is codes like",
    "start": "2782599",
    "end": "2789400"
  },
  {
    "text": "a class behaves like an INT the applications for this are obvious right uh alternate numerics",
    "start": "2789400",
    "end": "2795760"
  },
  {
    "text": "tupes algebraic data types like optional or Choice uh STL sty cursors um and you",
    "start": "2795760",
    "end": "2803000"
  },
  {
    "text": "know there's no expressiveness benefit here you can't write any new programs that you couldn't write today with",
    "start": "2803000",
    "end": "2808200"
  },
  {
    "text": "objects but what it means is it lets you do that without worrying about the cost and you know we definitely you know um",
    "start": "2808200",
    "end": "2816400"
  },
  {
    "text": "we definitely worry about cost as programmers even when we shouldn't worry about cost because we're wired to worry",
    "start": "2816400",
    "end": "2821640"
  },
  {
    "text": "about performance it's just how we're built so by making the right thing also be the fast thing we remove a whole set",
    "start": "2821640",
    "end": "2828359"
  },
  {
    "text": "of sources of friction from the development process and because value types you know have access to encapsulation just like regular classes",
    "start": "2828359",
    "end": "2835400"
  },
  {
    "text": "you know we can use them like I said as secure cost-free wrappers around sensitive data um and get this free",
    "start": "2835400",
    "end": "2841480"
  },
  {
    "text": "lunch of safety maintainability and performance so that's really cool it's been working on this for probably a year",
    "start": "2841480",
    "end": "2848160"
  },
  {
    "text": "and a half and we're getting close to having a design that works takes a long time uh we've got a prototype uh in open",
    "start": "2848160",
    "end": "2855680"
  },
  {
    "text": "jdk if anybody's interested um so okay how does this interact with generics remember I said you add a new feature it",
    "start": "2855680",
    "end": "2862119"
  },
  {
    "start": "2857000",
    "end": "3015000"
  },
  {
    "text": "interacts with everything else you've already got so um you know when you look at generics with box Primitives you we",
    "start": "2862119",
    "end": "2868599"
  },
  {
    "text": "have the same layout problem we had with the array of points before uh we have an inefficient data layout too much inter",
    "start": "2868599",
    "end": "2873640"
  },
  {
    "text": "Direction bad locality too much allocation you know so if we have array list of box integers you know you have",
    "start": "2873640",
    "end": "2879280"
  },
  {
    "text": "an object for the array list and an object for the array and then an object for each",
    "start": "2879280",
    "end": "2884440"
  },
  {
    "text": "element and you know once you add values to the language you immediately see that this sort of uneasy uh uh irregularity",
    "start": "2884440",
    "end": "2892040"
  },
  {
    "text": "that we embraced in Java 5 which is you can't generif over Primitives you can only generif over",
    "start": "2892040",
    "end": "2898000"
  },
  {
    "text": "references that starts to fall apart worked for a while remember like Steve Jobs says those things work for a while",
    "start": "2898000",
    "end": "2903359"
  },
  {
    "text": "and then they fall apart well we're hitting that fall apart point when there only eight primitive Ty types you can",
    "start": "2903359",
    "end": "2908800"
  },
  {
    "text": "look the other way but once we add userdefined Primitives it really has to work with generics so you know we're",
    "start": "2908800",
    "end": "2914880"
  },
  {
    "text": "going to have to bite the bullet here and this is um involves VM work as well as language and Library work to support",
    "start": "2914880",
    "end": "2920040"
  },
  {
    "text": "generics over Primitives and values so you could say I want an array list of ins and I actually have it backed by a",
    "start": "2920040",
    "end": "2927119"
  },
  {
    "text": "array of ins you know uh under under the under the hood so these two features that kind of",
    "start": "2927119",
    "end": "2933280"
  },
  {
    "text": "work together value types and generics over Primitives are part of actually a larger effort to reboot the jvm's",
    "start": "2933280",
    "end": "2938559"
  },
  {
    "text": "relationship with memory and the underlying Hardware to try to balance the need for abstraction encapsulation",
    "start": "2938559",
    "end": "2944040"
  },
  {
    "text": "with the performance reality of Modern Hardware but I think it's a pretty cool example of being able to teach an old",
    "start": "2944040",
    "end": "2949440"
  },
  {
    "text": "dog some some pretty exciting New Tricks so okay time to wrap up I'll just",
    "start": "2949440",
    "end": "2955480"
  },
  {
    "text": "close with a little bit of a warning be careful what you ask for we all want the",
    "start": "2955480",
    "end": "2960799"
  },
  {
    "text": "software we write to be successful we all want it to be used by many people for many years but success brings with",
    "start": "2960799",
    "end": "2967200"
  },
  {
    "text": "it costs and constraints that can be really frustrating at times on the other hand these constraints most notably the",
    "start": "2967200",
    "end": "2974160"
  },
  {
    "text": "need to keep the promises you've made to your users um whether you've made them implicitly or explicitly they force you",
    "start": "2974160",
    "end": "2979920"
  },
  {
    "text": "to spend a lot of time upfront thinking about whether something is the right thing to do and what the possible consequences and interactions will be",
    "start": "2979920",
    "end": "2986640"
  },
  {
    "text": "and most of the time thinking deeply about something uh ahead of time pays off so even if it does mean you can't",
    "start": "2986640",
    "end": "2993400"
  },
  {
    "text": "rush forward as quickly and um you know as you might have otherwise liked so thank you everyone for listening",
    "start": "2993400",
    "end": "2998880"
  },
  {
    "text": "enjoy the conference and don't break anything on the way out",
    "start": "2998880",
    "end": "3004000"
  }
]