[
  {
    "text": "[Music]",
    "start": "970",
    "end": "7838"
  },
  {
    "text": "all right this is new to me as well but",
    "start": "13430",
    "end": "19800"
  },
  {
    "text": "welcome to a talk virtually I'm about JVM performance I really hope this is",
    "start": "19800",
    "end": "25500"
  },
  {
    "text": "recording which makes a fine difference between giving a conference presentation",
    "start": "25500",
    "end": "31620"
  },
  {
    "text": "and sitting alone vexman talking to yourself at special times and",
    "start": "31620",
    "end": "37500"
  },
  {
    "text": "I hope yeah I guess we all know that it's probably the best that we don't travel as much as we used to",
    "start": "37500",
    "end": "44460"
  },
  {
    "text": "it's a shame that we can't meet in person and have to talk face-to-face but you know what it's good for if you've",
    "start": "44460",
    "end": "50190"
  },
  {
    "text": "got sick or if any of got sick on this trip I guess we would be regretting so",
    "start": "50190",
    "end": "55739"
  },
  {
    "text": "let's make the best out of it as long as the situation is emplacement yeah we'll just try next year right alright but",
    "start": "55739",
    "end": "62899"
  },
  {
    "text": "doesn't stop us from discussing a topic I'm have to be working with for very",
    "start": "62899",
    "end": "67950"
  },
  {
    "text": "long time and JVM performs what I'm trying to do is talk is to basically",
    "start": "67950",
    "end": "74460"
  },
  {
    "text": "discuss how a drawable to the machine is working when it runs your code and how",
    "start": "74460",
    "end": "79649"
  },
  {
    "text": "it tries to make it faster than would be without these optimizations and what I'm",
    "start": "79649",
    "end": "84719"
  },
  {
    "text": "trying to do is to basically show you how a Java programmer would optimize code not how I find many performance",
    "start": "84719",
    "end": "91979"
  },
  {
    "text": "talks approach this by showing you machine code and by talking about hardware and processor pipelines and so",
    "start": "91979",
    "end": "99539"
  },
  {
    "text": "forth I tried to make an approachable presentation was topic that is accessible to everybody right so how",
    "start": "99539",
    "end": "108570"
  },
  {
    "text": "does a Java Virtual Machine run code or how the Java program executes and as you all know like if you write a Java",
    "start": "108570",
    "end": "114390"
  },
  {
    "text": "program you will compile it using Java C and this will render the source code",
    "start": "114390",
    "end": "119490"
  },
  {
    "text": "that you write to Java bytecode and already Java bytecode is a bit of a cryptic former to many but all in all",
    "start": "119490",
    "end": "127799"
  },
  {
    "text": "the Java bytecode is a very much a direct translation of a Java source program to a better machine",
    "start": "127799",
    "end": "134890"
  },
  {
    "text": "process of language it's it's already basically normalized in a way and",
    "start": "134890",
    "end": "139900"
  },
  {
    "text": "bytecode is low it doesn't have formatting issues it's it's binary it",
    "start": "139900",
    "end": "145390"
  },
  {
    "text": "can be transformed over the internet very quickly which was important the beginning of Java when applets and so",
    "start": "145390",
    "end": "151090"
  },
  {
    "text": "forth was still the driving factor we had to pull up the platform but the",
    "start": "151090",
    "end": "156190"
  },
  {
    "text": "magic normally happens between JVM and the processor houses by code actually",
    "start": "156190",
    "end": "161620"
  },
  {
    "text": "executed house it rendered into machine code instructions and and if you want to",
    "start": "161620",
    "end": "167050"
  },
  {
    "text": "understand child performance this as well you have to look at you can't really look at Java C because Java C is",
    "start": "167050",
    "end": "173110"
  },
  {
    "text": "not applying optimizations more or less it is doing a very few basic clean ups",
    "start": "173110",
    "end": "179440"
  },
  {
    "text": "more I'd say and optimizations but it doesn't it's not an optimizing compiler so we try to go a bit deeper today and",
    "start": "179440",
    "end": "187150"
  },
  {
    "text": "then show you where where things happen and how they happen and also of course how you might be able to debug",
    "start": "187150",
    "end": "193810"
  },
  {
    "text": "performance bugs because those happen obviously in the JVM and I'll explain you also what a good approach is to",
    "start": "193810",
    "end": "201310"
  },
  {
    "text": "writing for the program staff right so um how does how does the JVM process",
    "start": "201310",
    "end": "207940"
  },
  {
    "text": "bytecode so any any Java class rips and this Java bytecode is in the first step",
    "start": "207940",
    "end": "215860"
  },
  {
    "text": "of a Java program it is enterprise it's actually run instruction by instruction so if you run a program that adds num by",
    "start": "215860",
    "end": "224709"
  },
  {
    "text": "NP together and then returns number c then the interpreter will just do what",
    "start": "224709",
    "end": "230440"
  },
  {
    "text": "would you tell the by code it will load number it will load number B it will apply an addition and then push back",
    "start": "230440",
    "end": "236800"
  },
  {
    "text": "well you see right and and how this works is that the JVM includes machine code templates so for certain bytecode",
    "start": "236800",
    "end": "244510"
  },
  {
    "text": "instructions it already knows how the best way to run those those is and then it will use these templates and for",
    "start": "244510",
    "end": "250480"
  },
  {
    "text": "every bytecode instructions or every source code instruction in a way it will execute this machine code template",
    "start": "250480",
    "end": "257729"
  },
  {
    "text": "quickly after that though air pollution Co templating which is also called level",
    "start": "257729",
    "end": "263020"
  },
  {
    "text": "zero it will evolve because of JVM is an adaptive platform it's it's a tiered so",
    "start": "263020",
    "end": "268870"
  },
  {
    "text": "it will start in interpreting all programs will start being interpreted but then the more a program is run or",
    "start": "268870",
    "end": "275560"
  },
  {
    "text": "the more a segment of your program is run for example a loop or a web server like in a repeated in any repeated",
    "start": "275560",
    "end": "282009"
  },
  {
    "text": "manner it will be promoted in a way to to more important kotas is where the",
    "start": "282009",
    "end": "287650"
  },
  {
    "text": "name comes from Java hotspot right and it finds hotspots important parts of your programs and it will try to improve",
    "start": "287650",
    "end": "295180"
  },
  {
    "text": "runtime from this mere recreation of how you wrote in your source code right so",
    "start": "295180",
    "end": "301409"
  },
  {
    "text": "c1 and the time compiler out is called in the static ablation process has three",
    "start": "301409",
    "end": "307810"
  },
  {
    "text": "stages which are less about performance than they are about profiling and this",
    "start": "307810",
    "end": "313840"
  },
  {
    "text": "is what makes a cheat compiled language which is compiled language or what the reason is that JIT compilation",
    "start": "313840",
    "end": "318990"
  },
  {
    "text": "just-in-time in basically during the runtime of a program so such a compilation means that",
    "start": "318990",
    "end": "326050"
  },
  {
    "text": "while your program is running which a VM will be analyzing how it is executed how",
    "start": "326050",
    "end": "331810"
  },
  {
    "text": "your program is actually executed and then use this profile information to in the end",
    "start": "331810",
    "end": "336940"
  },
  {
    "text": "hand your program over to the c2 server compiler to use this information about",
    "start": "336940",
    "end": "342310"
  },
  {
    "text": "observing your program in action to make it as efficient as possible and this is what the JVM is all about it's a profile",
    "start": "342310",
    "end": "349509"
  },
  {
    "text": "topped based optimization approach so you start just executing your code simply you will then for example look is",
    "start": "349509",
    "end": "357250"
  },
  {
    "text": "this if statement ever true or is it ever false then this information of",
    "start": "357250",
    "end": "362349"
  },
  {
    "text": "observing how your program is actually actually used will be used to apply a speculative optimization to your run",
    "start": "362349",
    "end": "369550"
  },
  {
    "text": "your program and the best manner given the way you are currently running it right",
    "start": "369550",
    "end": "375509"
  },
  {
    "text": "so I said everything starts out deliberate you will then typically jump to level",
    "start": "375509",
    "end": "381330"
  },
  {
    "text": "three so these levels don't have to be passed level by level and in this level you",
    "start": "381330",
    "end": "386729"
  },
  {
    "text": "will collect all kinds of profit off of profiling data and then give them this data and the end hotspot would the JVM",
    "start": "386729",
    "end": "394259"
  },
  {
    "text": "will try to make the best out of it and the terms of path is because of course",
    "start": "394259",
    "end": "400820"
  },
  {
    "text": "resources are restrained and lending machines so if you are already profiling",
    "start": "400820",
    "end": "406530"
  },
  {
    "text": "a lot of code is profiling itself will cause overhead and every profiling approach system is a trade-off between",
    "start": "406530",
    "end": "412849"
  },
  {
    "text": "running your program and optimizing your program or using resources for that so",
    "start": "412849",
    "end": "417960"
  },
  {
    "text": "if the JVM is very busy it will send code to for example level to where just",
    "start": "417960",
    "end": "423599"
  },
  {
    "text": "apply some simple profiling then when the machine gets a bit more and less",
    "start": "423599",
    "end": "429930"
  },
  {
    "text": "busy again it will then promoted against it once profiling and then the end put it in situ again another option which is",
    "start": "429930",
    "end": "437340"
  },
  {
    "text": "also typical is that it starts profiling a method and then realizes oh you know what this is too trivial think of a",
    "start": "437340",
    "end": "444539"
  },
  {
    "text": "ghetto or setter I don't have to really do optimization on this method so so I",
    "start": "444539",
    "end": "453000"
  },
  {
    "text": "don't have to really use resources on making it better right now so this is",
    "start": "453000",
    "end": "458550"
  },
  {
    "text": "basically what all old JVM is doing all the time it will start running your code it will analyze it will look into how it",
    "start": "458550",
    "end": "465539"
  },
  {
    "text": "is executed and the end try to make a most efficient program out of it right",
    "start": "465539",
    "end": "470909"
  },
  {
    "text": "so and in order to look into how what profiling information is collected and",
    "start": "470909",
    "end": "477479"
  },
  {
    "text": "how the JVM then speculatively optimizes your code the most important factor to",
    "start": "477479",
    "end": "483030"
  },
  {
    "text": "understand is the building block of a call site so the JVM or at least hotspot",
    "start": "483030",
    "end": "488520"
  },
  {
    "text": "is a method based JIT it's not the tracing like for example Android is",
    "start": "488520",
    "end": "494789"
  },
  {
    "text": "a tracing JIT so it's not not trying to focus on a method level but but for the most games is a",
    "start": "494789",
    "end": "501050"
  },
  {
    "text": "level gypped we're a method as itself is compiled so every Java method is a",
    "start": "501050",
    "end": "506240"
  },
  {
    "text": "compilation unit that can be improved to be a better performing method and a call",
    "start": "506240",
    "end": "513950"
  },
  {
    "text": "sign in this context is if you call a method from a method like here we then",
    "start": "513950",
    "end": "519950"
  },
  {
    "text": "do something you call well par you will be able to perform optimizations that",
    "start": "519950",
    "end": "526310"
  },
  {
    "text": "are the most crucial to to how perform your Java code will be executing so",
    "start": "526310",
    "end": "532279"
  },
  {
    "text": "because if you run well bar on some class or some instance of a class you",
    "start": "532279",
    "end": "537800"
  },
  {
    "text": "don't really know what code you like the executing in this case you can just say all right it will just be bar but it is an",
    "start": "537800",
    "end": "544519"
  },
  {
    "text": "indirection so a program or any program stores the data of a methods of the",
    "start": "544519",
    "end": "550790"
  },
  {
    "text": "executable of a method somewhere in your memory and whenever you jump from one",
    "start": "550790",
    "end": "556160"
  },
  {
    "text": "memory location where to do something method is located and then you have to apply a redirection to travel from to do",
    "start": "556160",
    "end": "563420"
  },
  {
    "text": "something method to the bar method to invoke it right and this method calls",
    "start": "563420",
    "end": "569060"
  },
  {
    "text": "our virtual some some languages like in C++ or C sharp you actually have to",
    "start": "569060",
    "end": "574220"
  },
  {
    "text": "declare methods to be virtual - to allow overriding them and the reason for that",
    "start": "574220",
    "end": "579800"
  },
  {
    "text": "is simple is that it is expensive to travel through these in directions it's not it's not expensive an absolute",
    "start": "579800",
    "end": "585950"
  },
  {
    "text": "manner but it's expensive to not in a contextual manner because if all a program is assembled off our method",
    "start": "585950",
    "end": "592399"
  },
  {
    "text": "calls then jumping from one memory location to another all the time we'll",
    "start": "592399",
    "end": "598010"
  },
  {
    "text": "of course slow down your program right so how house is soft in Java how our",
    "start": "598010",
    "end": "604550"
  },
  {
    "text": "virtual calls possible job which was actually quite unique for the language when when it came out so how can da",
    "start": "604550",
    "end": "610970"
  },
  {
    "text": "would be still performant despite having all these in directions all this jumping from A to B so as I said a virtual",
    "start": "610970",
    "end": "619279"
  },
  {
    "text": "method called per se isn't really expensive you think that once you if you",
    "start": "619279",
    "end": "624380"
  },
  {
    "text": "go back if you arrive at this well dot for a call site what you would have to do is to have to look up where",
    "start": "624380",
    "end": "630900"
  },
  {
    "text": "the implementation of bar is located for this purpose the JVM entertains a so",
    "start": "630900",
    "end": "636330"
  },
  {
    "text": "called vtable virtual method table for every single class that exists so for class foo there will be a we table where",
    "start": "636330",
    "end": "643290"
  },
  {
    "text": "all methods from all subclasses are positioned and it will then basically",
    "start": "643290",
    "end": "650460"
  },
  {
    "text": "have the signature of the method and a location of the code to this method in order to execute it so fu you have to",
    "start": "650460",
    "end": "659550"
  },
  {
    "text": "this method table and and like the day the entry for the bar method will point to some location where the",
    "start": "659550",
    "end": "666720"
  },
  {
    "text": "system.out.print on HelloWorld is is located however if you overrode through",
    "start": "666720",
    "end": "672300"
  },
  {
    "text": "in a subclass and you'd overwrite the bar method so then this method shouldn't",
    "start": "672300",
    "end": "677940"
  },
  {
    "text": "be shouldn't be executed anymore then of course the JVM will have another method table which is a direct copy of the old",
    "start": "677940",
    "end": "684600"
  },
  {
    "text": "one to to point to this other address while the other methods on over'n will",
    "start": "684600",
    "end": "691080"
  },
  {
    "text": "just point to the addresses of the same methods as before and the reason for",
    "start": "691080",
    "end": "696779"
  },
  {
    "text": "this copying mechanism is that since we have single class inheritance in Java the method pointer will be at the same",
    "start": "696779",
    "end": "705510"
  },
  {
    "text": "index as for all super classes so whenever the JVM discovers the call side",
    "start": "705510",
    "end": "711660"
  },
  {
    "text": "like this one we seen before through well bar it will just for example jump to the sub we table to the 8th location",
    "start": "711660",
    "end": "719400"
  },
  {
    "text": "date offset of of the signature method and invoke the code it is pointed at and",
    "start": "719400",
    "end": "726360"
  },
  {
    "text": "that's not much it's a triple indirection first you discover a call site you have",
    "start": "726360",
    "end": "732209"
  },
  {
    "text": "to discover then the class that the instance is invoked on to do an all",
    "start": "732209",
    "end": "738240"
  },
  {
    "text": "track you know why we'll just handle a bit differently than that but then you have to jump to the memory address and",
    "start": "738240",
    "end": "744510"
  },
  {
    "text": "you have to run the code right so it's it's not expensive but as said before if",
    "start": "744510",
    "end": "749580"
  },
  {
    "text": "you do this a lot if this is essentially what your program is doing all the time it will still be expensive so how can we",
    "start": "749580",
    "end": "755940"
  },
  {
    "text": "improve from that and something that JVM doesn't do but it is something small talk did for example fem",
    "start": "755940",
    "end": "761779"
  },
  {
    "text": "most famously small talk also had virtual methods for for everything you",
    "start": "761779",
    "end": "768050"
  },
  {
    "text": "could overwrite everything and they also had performance problems they based on",
    "start": "768050",
    "end": "773570"
  },
  {
    "text": "that because you had to jump around and you had to look up methods all the time so how did they approach it they just",
    "start": "773570",
    "end": "780380"
  },
  {
    "text": "added caches and envious developers all know that if you have a problem just add casualty in there and then typically it",
    "start": "780380",
    "end": "786500"
  },
  {
    "text": "might get better and until it doesn't because cash is overflow and if you don't hit cashes properly you will have",
    "start": "786500",
    "end": "794149"
  },
  {
    "text": "same problem but to some degree in small talk having global caches worked very",
    "start": "794149",
    "end": "800870"
  },
  {
    "text": "well because many times methods aren't overridden ever right so as long as methods on overridden which is a",
    "start": "800870",
    "end": "807370"
  },
  {
    "text": "assumption that it holds for many call sites then doesn't work and even if a",
    "start": "807370",
    "end": "812959"
  },
  {
    "text": "method is overridden as long as this particular call site is always invoked with a certain subclass of a type then",
    "start": "812959",
    "end": "821779"
  },
  {
    "text": "it will still work with the cache so when you discover well bar and the casually has to address populated for",
    "start": "821779",
    "end": "830329"
  },
  {
    "text": "this type then you can just jump that only if you miss the cache then things will get more expensive and then they",
    "start": "830329",
    "end": "836329"
  },
  {
    "text": "will get even more expensive than with the vtable intercept heuristic Lee speaking and programming language is",
    "start": "836329",
    "end": "842720"
  },
  {
    "text": "dynamic programming languages work a lot with heuristics you will you will be",
    "start": "842720",
    "end": "847970"
  },
  {
    "text": "fine more very likely so now you have a cached link and you have a double",
    "start": "847970",
    "end": "853069"
  },
  {
    "text": "indirection instead of a triple indirection which is a speed-up of 30% after all which is pretty good for",
    "start": "853069",
    "end": "858519"
  },
  {
    "text": "program platform but I said JVM listen to that the JVM Rada works with one more",
    "start": "858519",
    "end": "865459"
  },
  {
    "text": "fixed so called linked call sites so whenever the JVM discovers that you call",
    "start": "865459",
    "end": "871040"
  },
  {
    "text": "a method on on a variable or at a particular place in your codes on a call",
    "start": "871040",
    "end": "876110"
  },
  {
    "text": "site it will just go to the method directly instead of having a casual a",
    "start": "876110",
    "end": "881389"
  },
  {
    "text": "track it will add an assertion to check if the type is correct and as long as this is the case it's always the same",
    "start": "881389",
    "end": "888290"
  },
  {
    "text": "class it just jump directly without conditions and this doesn't seem like it's cheaper",
    "start": "888290",
    "end": "895330"
  },
  {
    "text": "maybe to you as like a cash wave so check in and walk or to a miss but the",
    "start": "895330",
    "end": "900850"
  },
  {
    "text": "way how processes work this can make a difference so first of all the assertion",
    "start": "900850",
    "end": "907110"
  },
  {
    "text": "doesn't have to be applied immediately so processes can reorder instructions",
    "start": "907110",
    "end": "913930"
  },
  {
    "text": "and then undo work that was done in an",
    "start": "913930",
    "end": "919270"
  },
  {
    "text": "expectation at certain assumptions also that if that happens it's very expensive but as long as the assumption the",
    "start": "919270",
    "end": "924880"
  },
  {
    "text": "assertion holds for the most time this is fine actually how exploits like Spector were built it",
    "start": "924880",
    "end": "935380"
  },
  {
    "text": "sits around making the JVM execute not the JVM in particular make a process I execute instructions that it is not",
    "start": "935380",
    "end": "942100"
  },
  {
    "text": "supposed to execute to just yield the the result of it somewhere from from",
    "start": "942100",
    "end": "947920"
  },
  {
    "text": "cache lines right but all in all owns oversimplified speaking we do these",
    "start": "947920",
    "end": "955810"
  },
  {
    "text": "assertions and then we can just jump somewhere and an executor decoder it you",
    "start": "955810",
    "end": "960960"
  },
  {
    "text": "still however we have to travel to a different memory location but the next trivial optimization based on us having",
    "start": "960960",
    "end": "969280"
  },
  {
    "text": "added this assertion is that we can just inline code but before we we look into",
    "start": "969280",
    "end": "975940"
  },
  {
    "text": "this and let's let's look into all the cold side types we have discovered now and if you just take this single thing",
    "start": "975940",
    "end": "982600"
  },
  {
    "text": "out of this talk to the call set mechanism you have already understood a lot about the inner workings of the JVM",
    "start": "982600",
    "end": "989170"
  },
  {
    "text": "so call sites in JVM can be monomorphic they can be biomorphic and they can be",
    "start": "989170",
    "end": "995950"
  },
  {
    "text": "mega morphogens you read performance blocks you will discover these terms a lot so a",
    "start": "995950",
    "end": "1001890"
  },
  {
    "text": "monomorphic call sign in the JVM is a direct link to another code position and",
    "start": "1001890",
    "end": "1008330"
  },
  {
    "text": "heuristic Allah speaking so so by just looking into how an average Java program",
    "start": "1008330",
    "end": "1013980"
  },
  {
    "text": "is assembled about 90% of all call sites are actually discovered to be Mon",
    "start": "1013980",
    "end": "1019350"
  },
  {
    "text": "morphic Dameon by running profiles and but then speculatively saying alright I'll just",
    "start": "1019350",
    "end": "1024910"
  },
  {
    "text": "assume this to be true for now and then build my optimizations on top of it if a",
    "start": "1024910",
    "end": "1031240"
  },
  {
    "text": "call site discovers at most two classes let's say you have a an ArrayList and a",
    "start": "1031240",
    "end": "1038650"
  },
  {
    "text": "linked list at a list look at call site location right then this course I will be by morphic and typically that's",
    "start": "1038650",
    "end": "1044770"
  },
  {
    "text": "holding four data structures those will still have a direct link but it will be just guarded by a conditional so it will",
    "start": "1044770",
    "end": "1051700"
  },
  {
    "text": "say if instance of ArrayList go to this location if instance of linkless go to",
    "start": "1051700",
    "end": "1057850"
  },
  {
    "text": "this location else uncommon trap just fail the whole thing and we will reconsider how to run this code now",
    "start": "1057850",
    "end": "1065070"
  },
  {
    "text": "polymorphic means in a way metamorphic is also polymorphic by morphix of course",
    "start": "1065070",
    "end": "1071230"
  },
  {
    "text": "also polymorphic everything that's not monomorphic is but but the JVM only knows a distinction between biomorphic",
    "start": "1071230",
    "end": "1077380"
  },
  {
    "text": "and and mega morphic and mega morphic if you have a tight loop that needs to run",
    "start": "1077380",
    "end": "1082810"
  },
  {
    "text": "performant and what do you have to do simple performance engineering of JVM is you have to avoid mega morphism for call",
    "start": "1082810",
    "end": "1091990"
  },
  {
    "text": "sites so make sure that call of a method on a variable always hits the same class",
    "start": "1091990",
    "end": "1098620"
  },
  {
    "text": "if you have more than two classes being discovered there then you will end up",
    "start": "1098620",
    "end": "1105910"
  },
  {
    "text": "doing a me table lookup meaning that you have three times the different dispatching costs compared to the direct",
    "start": "1105910",
    "end": "1111430"
  },
  {
    "text": "links and you lose on a lot as well which I will show you later the famous",
    "start": "1111430",
    "end": "1118300"
  },
  {
    "text": "exception is if you have a so called dominant target so let's say you call a",
    "start": "1118300",
    "end": "1124150"
  },
  {
    "text": "method bar on variable foo a thousand times and if 90% of these calls are on a",
    "start": "1124150",
    "end": "1132670"
  },
  {
    "text": "particular class then this class will be dominant target and will still be",
    "start": "1132670",
    "end": "1138060"
  },
  {
    "text": "treated as if it was monomorphic and then all all the other classes will still be reachable lockups but at least",
    "start": "1138060",
    "end": "1146570"
  },
  {
    "text": "the big fraction of hits on the skulls that will be performed right and the JVM",
    "start": "1146570",
    "end": "1154039"
  },
  {
    "text": "is basically starting with the we table lookup in the worst case it will then use this profiling optimization see what",
    "start": "1154039",
    "end": "1160610"
  },
  {
    "text": "class was invoked the last ten thousand times this method was called was it",
    "start": "1160610",
    "end": "1165620"
  },
  {
    "text": "always the same class if it discovers that it will just transform the call site to a monomorphic call site and",
    "start": "1165620",
    "end": "1171909"
  },
  {
    "text": "recompile the method into machine code read a monomer FISMA supplied adding",
    "start": "1171909",
    "end": "1177409"
  },
  {
    "text": "this uncommon trap where if the call set suddenly isn't monomorphic anymore the",
    "start": "1177409",
    "end": "1183259"
  },
  {
    "text": "the compilation unit the compiled method will just be thrown away and be",
    "start": "1183259",
    "end": "1188330"
  },
  {
    "text": "recompiled again with a little method table lookup so when you start your JVM",
    "start": "1188330",
    "end": "1194330"
  },
  {
    "text": "basically it starts out slow it will collect all the data about how your program is working and then to move the",
    "start": "1194330",
    "end": "1201320"
  },
  {
    "text": "longer runs it will and yeah basically try to to find a good balance between",
    "start": "1201320",
    "end": "1209620"
  },
  {
    "text": "making a code efficient and making it flexible because if your code meets flexibility by changing targets all the",
    "start": "1209620",
    "end": "1217159"
  },
  {
    "text": "time then of course it is much cheaper to to use we tables rather than using",
    "start": "1217159",
    "end": "1222860"
  },
  {
    "text": "direct links where you always have to throw away your code and if you have",
    "start": "1222860",
    "end": "1228110"
  },
  {
    "text": "followed the development on JIT compilation and to JVM then you will have heard about Gras maybe which is",
    "start": "1228110",
    "end": "1235159"
  },
  {
    "text": "also to confine a budget office and a way of also compile your code ahead of",
    "start": "1235159",
    "end": "1241340"
  },
  {
    "text": "time and as you might know or really like I guess you can imagine that all",
    "start": "1241340",
    "end": "1246559"
  },
  {
    "text": "this optimization the optimization runtime is expensive in terms that it runs it needs code and it needs",
    "start": "1246559",
    "end": "1253940"
  },
  {
    "text": "resources to optimize the code as well as at us to run your code and by ahead",
    "start": "1253940",
    "end": "1259759"
  },
  {
    "text": "of time compiling some fractions of your code which are fairly static you can of",
    "start": "1259759",
    "end": "1265340"
  },
  {
    "text": "course save you these costs and of course also the startup to run the first twenty seconds of your trivia process",
    "start": "1265340",
    "end": "1272059"
  },
  {
    "text": "will run much faster which is very attractive for short live process processes because judge compilation in this",
    "start": "1272059",
    "end": "1279119"
  },
  {
    "text": "context isn't really suited for programs that only run for five seconds because once you have reached the optimization",
    "start": "1279119",
    "end": "1286950"
  },
  {
    "text": "state the VM will die in all the profiles will die with it right so if you are curious about ahead of time",
    "start": "1286950",
    "end": "1293249"
  },
  {
    "text": "compilation it has its place it is very much a useful technique but for business",
    "start": "1293249",
    "end": "1298710"
  },
  {
    "text": "applications I still think that JIT compilation is the way to go and and this is what if your process runs many",
    "start": "1298710",
    "end": "1306090"
  },
  {
    "text": "hours and often looking into your profiles is it's making you cope much",
    "start": "1306090",
    "end": "1312359"
  },
  {
    "text": "more efficient and especially if you write prune space in libraries where you probably will not use all the",
    "start": "1312359",
    "end": "1319289"
  },
  {
    "text": "functionality of these libraries the JIT based profile collection will look into",
    "start": "1319289",
    "end": "1324960"
  },
  {
    "text": "library coaches that will look into your code and then remove all the library",
    "start": "1324960",
    "end": "1330239"
  },
  {
    "text": "code more or less that you don't need for you and just run the hot path the set that you execute in the way you",
    "start": "1330239",
    "end": "1335489"
  },
  {
    "text": "execute them so this is just the general idea of how the JVM works and how the",
    "start": "1335489",
    "end": "1340619"
  },
  {
    "text": "optimizations work and if you want to make sure your program doesn't get slow just make sure you don't have mega",
    "start": "1340619",
    "end": "1346080"
  },
  {
    "text": "morphic call sites on your hot bump and why is that and I'll show you in a second so now that we've established",
    "start": "1346080",
    "end": "1354649"
  },
  {
    "text": "call sites and monomorphic mega morphism if a Methodist is monomorphic so you can",
    "start": "1354649",
    "end": "1363809"
  },
  {
    "text": "just jump into a location where some code is added why not just copy the code",
    "start": "1363809",
    "end": "1370220"
  },
  {
    "text": "where you have to go to statement best case to go to instructions are all about",
    "start": "1370220",
    "end": "1376859"
  },
  {
    "text": "as much code as the actual instruction and forget or a setter this will very",
    "start": "1376859",
    "end": "1382710"
  },
  {
    "text": "much be the case because then I get unsaid there's not much code to you have and now not only you have you saved",
    "start": "1382710",
    "end": "1391919"
  },
  {
    "text": "yourself from the indirection but you created a bigger chunk of code that an",
    "start": "1391919",
    "end": "1397230"
  },
  {
    "text": "optimizing compiler can process again because as I told you at JVM is a method",
    "start": "1397230",
    "end": "1403169"
  },
  {
    "text": "unit compiling JIT so it takes a method and by inlining code you just make the",
    "start": "1403169",
    "end": "1409049"
  },
  {
    "text": "method big that is the target of the optimization so typically and this is why my Mon",
    "start": "1409049",
    "end": "1414110"
  },
  {
    "text": "Amour fizzle is so important to at least polymorph dimorphism or a dominant mega",
    "start": "1414110",
    "end": "1419990"
  },
  {
    "text": "morphism yes because you can now apply all the other techniques at the chit and",
    "start": "1419990",
    "end": "1426140"
  },
  {
    "text": "nose right so and once you lose the mana morphism all this is gone right so this",
    "start": "1426140",
    "end": "1432800"
  },
  {
    "text": "is why it's often called so called uber diamond the optimization and this is why it's important and to to keep get as",
    "start": "1432800",
    "end": "1441050"
  },
  {
    "text": "small and settle small because if they were complicated and mega morphic and",
    "start": "1441050",
    "end": "1446450"
  },
  {
    "text": "overridden many times right and you would lose the ability to inline setters and then your calls to data wouldn't be",
    "start": "1446450",
    "end": "1454940"
  },
  {
    "text": "filled axes anymore as they typically end up being but it would be expensive",
    "start": "1454940",
    "end": "1460160"
  },
  {
    "text": "ever to a method dispatches and if you have like a Jason processing step where",
    "start": "1460160",
    "end": "1466820"
  },
  {
    "text": "you read all the data from many many data objects and will get much more",
    "start": "1466820",
    "end": "1471950"
  },
  {
    "text": "expensive turn shortly right yes and in this context it's good to know because",
    "start": "1471950",
    "end": "1478250"
  },
  {
    "text": "this is a pattern I see a lot as well that every type matters so let's say you have a list and you don't know what type",
    "start": "1478250",
    "end": "1484460"
  },
  {
    "text": "the list is it might be an area linked list then list of sites will be a buy more freak all right as we just learned",
    "start": "1484460",
    "end": "1491360"
  },
  {
    "text": "it can either be an aerialist size so on linkless size which I have both different implementations but now people",
    "start": "1491360",
    "end": "1498020"
  },
  {
    "text": "want to be briefed with their code so they use this technique called double",
    "start": "1498020",
    "end": "1505490"
  },
  {
    "text": "brace initialization where they can basically they create a constructor of a",
    "start": "1505490",
    "end": "1511250"
  },
  {
    "text": "subclass of every list if you've seen a Sara Costa the first brace open zone",
    "start": "1511250",
    "end": "1516290"
  },
  {
    "text": "animus subclass on T second brace it initializes a constructor initial",
    "start": "1516290",
    "end": "1523940"
  },
  {
    "text": "initial eyes the block which is added as a constructor so but now you have created a new type now yes aerialist",
    "start": "1523940",
    "end": "1531230"
  },
  {
    "text": "linked list antis mm a subclass meaning that if this end of a subclass",
    "start": "1531230",
    "end": "1536900"
  },
  {
    "text": "hits the size method you will have turned the call side too you make a morphic which it wasn't",
    "start": "1536900",
    "end": "1542840"
  },
  {
    "text": "before right so look out for these sort of things you can have a nice",
    "start": "1542840",
    "end": "1548240"
  },
  {
    "text": "deterministic code path the JVM will be thankful because in the end determinism",
    "start": "1548240",
    "end": "1554149"
  },
  {
    "text": "predictability is what makes programs fast and not only because the JVM knows",
    "start": "1554149",
    "end": "1559309"
  },
  {
    "text": "how to do speculative optimizations and the less often false about its",
    "start": "1559309",
    "end": "1565490"
  },
  {
    "text": "assumptions but also because how how computers work in general prefetching of",
    "start": "1565490",
    "end": "1570740"
  },
  {
    "text": "memory and so forth the more prediction you can give the better right and",
    "start": "1570740",
    "end": "1576340"
  },
  {
    "text": "ironically you could micro optimizes right if you had a interface with three implementations this would by definition",
    "start": "1576340",
    "end": "1582529"
  },
  {
    "text": "be Meng amorphic right because the magic number of three less once all observed",
    "start": "1582529",
    "end": "1590029"
  },
  {
    "text": "to be dominant so what we could do is we could instead I have three static methods sub-1 sub-2 sub-3 and have a",
    "start": "1590029",
    "end": "1597110"
  },
  {
    "text": "field and that now represents what instance of a subclass from before we",
    "start": "1597110",
    "end": "1602330"
  },
  {
    "text": "will be considering for instance now we just switch on foo the ID and invoke the",
    "start": "1602330",
    "end": "1610909"
  },
  {
    "text": "corresponding static method and now since we don't have one call side like we had here with DM methods we now have",
    "start": "1610909",
    "end": "1619039"
  },
  {
    "text": "three call sites which each are by definition static methods are always monomorphic",
    "start": "1619039",
    "end": "1624429"
  },
  {
    "text": "at monomorphic and now we have my crop demise the program and if you do certain",
    "start": "1624429",
    "end": "1629679"
  },
  {
    "text": "types of applications on the JVM and you want to force the JVM in a certain state and then this can be very helpful",
    "start": "1629679",
    "end": "1636919"
  },
  {
    "text": "because then now you control the narrative writing you you don't you trick the JIT compiler",
    "start": "1636919",
    "end": "1642830"
  },
  {
    "text": "into doing what do you want exactly and you don't leave it to chance or or a small fragile changes in your program",
    "start": "1642830",
    "end": "1650260"
  },
  {
    "text": "but generally is not something you want to do but it's something we can do and it's nice to experiment it to compare",
    "start": "1650260",
    "end": "1657260"
  },
  {
    "text": "the effects of things right alright and",
    "start": "1657260",
    "end": "1662320"
  },
  {
    "text": "mentioning inlining as before and why inlining is so important I mean now we",
    "start": "1662320",
    "end": "1669260"
  },
  {
    "text": "have a now in the talk and I'm still talking about in in my office but this is the big the big",
    "start": "1669260",
    "end": "1675240"
  },
  {
    "text": "thing this is what most people look into a name and they've analyzed programs for",
    "start": "1675240",
    "end": "1680520"
  },
  {
    "text": "their performance I'd say you have this method a log method and and normally you don't use parental right but that's just",
    "start": "1680520",
    "end": "1688380"
  },
  {
    "text": "for the sake of the example assume we log to print on then we have this log method and and you might recognize his",
    "start": "1688380",
    "end": "1695010"
  },
  {
    "text": "log method from the signature somewhat it's not that different to how many logging frameworks look like so now you",
    "start": "1695010",
    "end": "1703320"
  },
  {
    "text": "call this log method right now we have",
    "start": "1703320",
    "end": "1709650"
  },
  {
    "text": "arguments and we iterate over these arguments and they of type object and we call to string on all of them now after",
    "start": "1709650",
    "end": "1716340"
  },
  {
    "text": "all we've learnt so far this call side to string method will most likely be mega morphic because any type can be in",
    "start": "1716340",
    "end": "1725250"
  },
  {
    "text": "there right so let's look at an example we log through the number four and new",
    "start": "1725250",
    "end": "1731220"
  },
  {
    "text": "object we have three types string in integer and an object and we already",
    "start": "1731220",
    "end": "1737670"
  },
  {
    "text": "crossed the magic barrier so now logging will be really expensive and really slow which is of course something we wouldn't",
    "start": "1737670",
    "end": "1744240"
  },
  {
    "text": "want to do but thanks to the log method being static we know that the log method",
    "start": "1744240",
    "end": "1751500"
  },
  {
    "text": "at least is hmm monomorphic meaning that law code will just be in light and now",
    "start": "1751500",
    "end": "1759030"
  },
  {
    "text": "we have something true another JIT compiler as something to chew on and the first thing it might do is to unroll the",
    "start": "1759030",
    "end": "1766200"
  },
  {
    "text": "loop as it's called so we'll see a write as a loop on three arguments instead of allocating in an iterator I'll just take",
    "start": "1766200",
    "end": "1776100"
  },
  {
    "text": "the three arguments and then basically duplicate the system.out.print all in there three times and now thanks to the",
    "start": "1776100",
    "end": "1784710"
  },
  {
    "text": "unrolling we'll have 3 call sites instead of one and this is where things fall into place right because now these",
    "start": "1784710",
    "end": "1792450"
  },
  {
    "text": "three copies call sites have suddenly become monomorphic so what the JVM can",
    "start": "1792450",
    "end": "1799740"
  },
  {
    "text": "now do is it can just basically eliminate boxing of course the",
    "start": "1799740",
    "end": "1805160"
  },
  {
    "text": "the fruit to string is no up because it's to string on a string is just this the world--you itself so we'll discover",
    "start": "1805160",
    "end": "1811190"
  },
  {
    "text": "all these things as well but thanks to in lining all the following optimizations have become possible to",
    "start": "1811190",
    "end": "1817370"
  },
  {
    "text": "begin with so it's only thanks to that that jaebeum's faster even if the the in",
    "start": "1817370",
    "end": "1823340"
  },
  {
    "text": "direction of mega morphism isn't so expensive by itself the consequences are",
    "start": "1823340",
    "end": "1829010"
  },
  {
    "text": "often rather drastic because you lose all the potential of optimizing a method by not being able to in line it's",
    "start": "1829010",
    "end": "1836990"
  },
  {
    "text": "dependent method calls right now programs are type this is not only a",
    "start": "1836990",
    "end": "1842540"
  },
  {
    "text": "java thing this is a compiler thing generally so even if you look into javascript for example the same",
    "start": "1842540",
    "end": "1852650"
  },
  {
    "text": "techniques are applied only that it is less obvious so if you look into we ate the the wrong time between nodejs and",
    "start": "1852650",
    "end": "1859630"
  },
  {
    "text": "you have this object through javascript",
    "start": "1859630",
    "end": "1864770"
  },
  {
    "text": "doesn't have the types doesn't have the classes it has types but doesn't have subtyping of any of any object type",
    "start": "1864770",
    "end": "1872540"
  },
  {
    "text": "right and but the way to us of course because we ate this has a compiler and",
    "start": "1872540",
    "end": "1878330"
  },
  {
    "text": "wants to make a note program quick so whenever you define a class or variable that is not checked in and note that",
    "start": "1878330",
    "end": "1884990"
  },
  {
    "text": "when we ate the we ate will add a hidden class word the star indicates here an object without any properties once you",
    "start": "1884990",
    "end": "1893630"
  },
  {
    "text": "add a variable to the object it will create a subclass more or less that is",
    "start": "1893630",
    "end": "1899630"
  },
  {
    "text": "now having the value X and once you add another one you will have to type XY",
    "start": "1899630",
    "end": "1905210"
  },
  {
    "text": "being a subclass of X being a subclass of star next person comes along and",
    "start": "1905210",
    "end": "1911120"
  },
  {
    "text": "defines the very same object we already have seen this one but now we define y",
    "start": "1911120",
    "end": "1916340"
  },
  {
    "text": "first meaning that now you have a subclass that is different from X and there's a consequence XY or YX rather",
    "start": "1916340",
    "end": "1925640"
  },
  {
    "text": "Y X and X Y even though being the same object from a programming perspective will not be marked",
    "start": "1925640",
    "end": "1932830"
  },
  {
    "text": "be equally why we ate and simple reason for us that keeping track of that those",
    "start": "1932830",
    "end": "1938470"
  },
  {
    "text": "two clauses are the same most likely is more expensive than the benefits of it",
    "start": "1938470",
    "end": "1944640"
  },
  {
    "text": "so the trade-off and to be honest I looked up how we ate has developed and it lost two or three years so this might",
    "start": "1944640",
    "end": "1951730"
  },
  {
    "text": "as well have changed but it was like that for a long time and most likely it's still like that because this is a pretty fundamental thing",
    "start": "1951730",
    "end": "1957549"
  },
  {
    "text": "so even dynamic languages that don't have any type systems typically in their",
    "start": "1957549",
    "end": "1963940"
  },
  {
    "text": "compilation phases add as much information as they can or the interpretation bases add as much of this",
    "start": "1963940",
    "end": "1970090"
  },
  {
    "text": "type information as they can because deep down the processor just treats bits",
    "start": "1970090",
    "end": "1975779"
  },
  {
    "text": "being bits and and shifts the murad right so you kind of have to tell the",
    "start": "1975779",
    "end": "1981669"
  },
  {
    "text": "the processor and the operating system what it spits mean of course and the more information you have about the day",
    "start": "1981669",
    "end": "1989740"
  },
  {
    "text": "that you'd you're processing in it in advance and it's when what's the grecian part is the better because processes are",
    "start": "1989740",
    "end": "1997659"
  },
  {
    "text": "very fast today but you have to prefetch data and if you don't know what they did prefetch them that data I'm normally",
    "start": "1997659",
    "end": "2003659"
  },
  {
    "text": "meet the actual data the input to your program but the program itself the better you are aware of what path of",
    "start": "2003659",
    "end": "2011250"
  },
  {
    "text": "your program you will be walking down that the more of this program that you",
    "start": "2011250",
    "end": "2016679"
  },
  {
    "text": "want to execute you can basically put into the caches of the processor to",
    "start": "2016679",
    "end": "2022769"
  },
  {
    "text": "being loaded when when it's time for write and then basic that's all I try to explain here type information of the",
    "start": "2022769",
    "end": "2029370"
  },
  {
    "text": "type program language like Java is very useful not only to you to assure quality",
    "start": "2029370",
    "end": "2035039"
  },
  {
    "text": "and and correctness of your code but also to compile us to optimizing",
    "start": "2035039",
    "end": "2041039"
  },
  {
    "text": "compilers and that's the same as its job isn't for peyten is for JavaScript all",
    "start": "2041039",
    "end": "2046260"
  },
  {
    "text": "jits want to know what the things they process actually mean right and in",
    "start": "2046260",
    "end": "2051510"
  },
  {
    "text": "JavaScript it's all always easy yes all right so now we've we've comment a",
    "start": "2051510",
    "end": "2058270"
  },
  {
    "text": "lot already for the introductory talk about performance and also I'm basically",
    "start": "2058270",
    "end": "2064990"
  },
  {
    "text": "closing now the method call site chapter which is the major chapter and then just",
    "start": "2064990",
    "end": "2070990"
  },
  {
    "text": "quickly look into other performance measures in compiled programs like a",
    "start": "2070990",
    "end": "2078040"
  },
  {
    "text": "branch prediction was just the other big topic but it's less interesting because you we have less control of it but let's",
    "start": "2078040",
    "end": "2084878"
  },
  {
    "text": "say you have 20 thousands random values between 0 and 100 s generated by this",
    "start": "2084879",
    "end": "2090638"
  },
  {
    "text": "obscure program here and then you iterate over them a thousand times and",
    "start": "2090639",
    "end": "2096010"
  },
  {
    "text": "if a while you speak it in 50 you add it and if it's less than 50 use abstractor",
    "start": "2096010",
    "end": "2103000"
  },
  {
    "text": "value then you will end up with some some how can you make this program",
    "start": "2103000",
    "end": "2108640"
  },
  {
    "text": "faster so turns out in Java yeah so first of all this is a conditional",
    "start": "2108640",
    "end": "2114670"
  },
  {
    "text": "branch is a control flow and branch prediction basically means can you",
    "start": "2114670",
    "end": "2120790"
  },
  {
    "text": "predict are you gonna end up in the if or in the else so you can make this",
    "start": "2120790",
    "end": "2126520"
  },
  {
    "text": "program faster by adding every sort and that's not very intuitive as you I guess",
    "start": "2126520",
    "end": "2133660"
  },
  {
    "text": "yeah of course it's not because why would it be faster to more than two less and the reason simply is that processes",
    "start": "2133660",
    "end": "2142150"
  },
  {
    "text": "mullen processes to work speculatively they will try to execute code before it",
    "start": "2142150",
    "end": "2149560"
  },
  {
    "text": "is actually known which path of a branch you will be taking and the reason for",
    "start": "2149560",
    "end": "2155230"
  },
  {
    "text": "this is what I mentioned before is is about data pipelines for web CPUs when they preload a lot of data to actually",
    "start": "2155230",
    "end": "2162119"
  },
  {
    "text": "keep the process of busy because processes are stalling a lot meaning they are not doing anything",
    "start": "2162119",
    "end": "2168540"
  },
  {
    "text": "nifty for example you in this case they sort nary that most likely the next",
    "start": "2168540",
    "end": "2175020"
  },
  {
    "text": "10,000 values will be positive pay on average then it can just start adding",
    "start": "2175020",
    "end": "2181210"
  },
  {
    "text": "10,000 values without even checking the branch and then only if it finds out that the branch was missed",
    "start": "2181210",
    "end": "2187970"
  },
  {
    "text": "that we didn't end up in the if statement half the time and can still",
    "start": "2187970",
    "end": "2194599"
  },
  {
    "text": "unroll or rollback instructions that it has already applied and that is cheaper then not knowing whether to add or",
    "start": "2194599",
    "end": "2204080"
  },
  {
    "text": "subtract ur value because the values are actually randomly positive or negative",
    "start": "2204080",
    "end": "2209650"
  },
  {
    "text": "so by sorting you add predictability to your program helping the CPU to just do",
    "start": "2209650",
    "end": "2217250"
  },
  {
    "text": "a lot of work very quickly and then just correct a few mistakes makes once you've reached a barrier where positive value",
    "start": "2217250",
    "end": "2224230"
  },
  {
    "text": "crosses over to being a negative value right so this is again the same idea",
    "start": "2224230",
    "end": "2230660"
  },
  {
    "text": "basically from mega morphism on/off isn't the more predictability you add to",
    "start": "2230660",
    "end": "2235730"
  },
  {
    "text": "your program the faster it will execute right yes that's it's of course too",
    "start": "2235730",
    "end": "2242570"
  },
  {
    "text": "simple but but it in all in all this is how it works it's a good enough example",
    "start": "2242570",
    "end": "2247640"
  },
  {
    "text": "for educational purposes so that's why I'm using it all right I only have three more minutes so yeah in person talks go",
    "start": "2247640",
    "end": "2257270"
  },
  {
    "text": "quickly apparently them and virtual ones but I last want to to look into which is",
    "start": "2257270",
    "end": "2262520"
  },
  {
    "text": "interesting now is escape analysis so we alright as content many of you might",
    "start": "2262520",
    "end": "2268040"
  },
  {
    "text": "know that this is just syntactic sugar for writing this code and this code of",
    "start": "2268040",
    "end": "2274910"
  },
  {
    "text": "course has a has a an object allocation it allocates an iterator and allocation",
    "start": "2274910",
    "end": "2282050"
  },
  {
    "text": "isn't as expensive but garbage collection is actually fairly expensive compared to many other operations so you",
    "start": "2282050",
    "end": "2290300"
  },
  {
    "text": "probably might want to avoid this in a program that is very short and very needs to be efficient so why not use the",
    "start": "2290300",
    "end": "2297260"
  },
  {
    "text": "old syntax for for iterating over over collection that the four index notation",
    "start": "2297260",
    "end": "2304869"
  },
  {
    "text": "so it turns out that the JVM can look into this code and find out that this",
    "start": "2304869",
    "end": "2311060"
  },
  {
    "text": "iteration iterator is only needed in a certain scope and then since this",
    "start": "2311060",
    "end": "2318250"
  },
  {
    "text": "instance will never escape it can just delete it and by doing it it never gets",
    "start": "2318250",
    "end": "2326109"
  },
  {
    "text": "allocated so you will have all the benefits of writing your code",
    "start": "2326109",
    "end": "2331420"
  },
  {
    "text": "efficiently or how you want to do it in object-oriented language that you delegate responsibilities to objects",
    "start": "2331420",
    "end": "2337839"
  },
  {
    "text": "without paying the costs hmm and unfortunately hotspot has been rather",
    "start": "2337839",
    "end": "2345010"
  },
  {
    "text": "bad at escape analysis so if a man if even if an instance escapes a method",
    "start": "2345010",
    "end": "2353230"
  },
  {
    "text": "then typically it will be allocating heap and but it has gotten better and",
    "start": "2353230",
    "end": "2362049"
  },
  {
    "text": "Microsoft I think has started to contribute a bunch of things in this direction to make escape analysis better",
    "start": "2362049",
    "end": "2370319"
  },
  {
    "text": "all right and it's been 40 minutes I have a lot more material but I've given",
    "start": "2370319",
    "end": "2375700"
  },
  {
    "text": "this talk someone talked a bunch of time so and I try to cover different areas every time so if you want to know more",
    "start": "2375700",
    "end": "2381280"
  },
  {
    "text": "you might just google this title of talk and and find more information so I'll",
    "start": "2381280",
    "end": "2387910"
  },
  {
    "text": "just make a very quick jump to the end um and you'll see how much we've skipped",
    "start": "2387910",
    "end": "2394289"
  },
  {
    "text": "but that's kind of my trademark to not get down with miss lights on just stick",
    "start": "2394289",
    "end": "2400720"
  },
  {
    "text": "to that but thank you so much for virtually turning my talk I wish we could have met in person but it is this",
    "start": "2400720",
    "end": "2407319"
  },
  {
    "text": "is how this if you want to meet new Utley and it's a good thing maybe I saved a bunch of time on traveling so I",
    "start": "2407319",
    "end": "2413470"
  },
  {
    "text": "have more time on following out my open source work and my community outreach so",
    "start": "2413470",
    "end": "2418720"
  },
  {
    "text": "just get all of me on Twitter ruffle coats find me now find me on my web page",
    "start": "2418720",
    "end": "2424029"
  },
  {
    "text": "I am find my open source project mainly bite buddy which is something I work with a coach in Russia and just regard a",
    "start": "2424029",
    "end": "2430630"
  },
  {
    "text": "few interested in these things thank you so much have a good rest of the day and or night when this whenever",
    "start": "2430630",
    "end": "2437950"
  },
  {
    "text": "let's move these dreams yeah thank you oh I'll see if the recording actually recorded now and I'll be very",
    "start": "2437950",
    "end": "2444160"
  },
  {
    "text": "disappointed if it hasn't but see you around and stay safe as long as this diseases is",
    "start": "2444160",
    "end": "2451030"
  },
  {
    "text": "around we won't don't want to spread this more than we already did so let's",
    "start": "2451030",
    "end": "2456130"
  },
  {
    "text": "hope to keep it ain't Jesus bye-bye",
    "start": "2456130",
    "end": "2460529"
  }
]