[
  {
    "text": "[Music] thank you",
    "start": "3670",
    "end": "8880"
  },
  {
    "text": "thank you very much Dave appreciate the introduction all right my name is Kyla Kingsbury and",
    "start": "8880",
    "end": "14519"
  },
  {
    "text": "we're going to be talking about Jepsen uh in this talk I'm going to be looking",
    "start": "14519",
    "end": "19800"
  },
  {
    "text": "at distributed systems the way they break we're going to do a little tour of some recent research results but to",
    "start": "19800",
    "end": "25019"
  },
  {
    "text": "start off I want to give you a bit of context um my name is Kyle you might know me as afer online my pronouns are he him and",
    "start": "25019",
    "end": "31619"
  },
  {
    "text": "my day job is to break databases so I focus on the ways in which distributed systems explode under common failure",
    "start": "31619",
    "end": "37920"
  },
  {
    "text": "conditions but before I worked on distributed systems I was a back-end engineer like I'm sure many of you have",
    "start": "37920",
    "end": "43500"
  },
  {
    "text": "been I built this thing called an API which is kind of like the solutions beautiful rainbow that customers behold",
    "start": "43500",
    "end": "49680"
  },
  {
    "text": "and that rainbow was supported by actual code here represented by these steel girders that ran on top of the Ruby",
    "start": "49680",
    "end": "56640"
  },
  {
    "text": "runtime here represented by some wooden pilings and that wooden piling was firmly planted into a bunch of databases",
    "start": "56640",
    "end": "63300"
  },
  {
    "text": "that we found lying around on the internet here represented by a pile of tires",
    "start": "63300",
    "end": "68520"
  },
  {
    "text": "now is anybody who's ever run a database knows the pile of tires is usually on",
    "start": "68520",
    "end": "73680"
  },
  {
    "text": "fire and it's our job as good Engineers to engage in what's called information hiding we're going to conceal the fact",
    "start": "73680",
    "end": "80640"
  },
  {
    "text": "that the pile of tires is on fire and so while our Engineers are screaming and throwing more tires onto the pile in an",
    "start": "80640",
    "end": "85979"
  },
  {
    "text": "effort to put out the Flames users will perceive that everything is fine in short we're trying to build reliable",
    "start": "85979",
    "end": "91920"
  },
  {
    "text": "systems out of unreliable parts and that's challenging I'm not just talking about databases",
    "start": "91920",
    "end": "97740"
  },
  {
    "text": "here I also think about cues Discovery Services any sort of coordination primitive wherever you have distributed",
    "start": "97740",
    "end": "104340"
  },
  {
    "text": "systems there is fear and Terror because distributed systems get into split brain where different sides of the network",
    "start": "104340",
    "end": "110220"
  },
  {
    "text": "believe different truths or they have broken four and key constraints so you can't look up some value that you",
    "start": "110220",
    "end": "115619"
  },
  {
    "text": "referenced or they have transient anomalies like you write something and then can't read it back and later it",
    "start": "115619",
    "end": "121860"
  },
  {
    "text": "shows up are these just theoretical or do they happen in real systems that's the",
    "start": "121860",
    "end": "127799"
  },
  {
    "text": "question I've been asking for the last seven years and I've been trying to measure real distributed systems to understand what they do in production",
    "start": "127799",
    "end": "135060"
  },
  {
    "text": "I built a library called Jepson which is a toolkit for building tests for almost any type of concurrent system and",
    "start": "135060",
    "end": "142260"
  },
  {
    "text": "through Jepson we can model the distributed system as for one coherent thing",
    "start": "142260",
    "end": "148200"
  },
  {
    "text": "so we have the environment that's uh clients people the outside world",
    "start": "148200",
    "end": "153420"
  },
  {
    "text": "and the system itself is typically a bunch of Linux processes some VMS or",
    "start": "153420",
    "end": "158879"
  },
  {
    "text": "some physical machines sort of networks and disks all of that we pretend is one thing after all that's what distributed",
    "start": "158879",
    "end": "165900"
  },
  {
    "text": "systems are right it should be one thing and if the boundary between the environment and the system there should",
    "start": "165900",
    "end": "171540"
  },
  {
    "text": "be some invariants that hold I should for example be able to put",
    "start": "171540",
    "end": "176580"
  },
  {
    "text": "something into a queue and then read it back later if I can't that would be an invariant violation",
    "start": "176580",
    "end": "183000"
  },
  {
    "text": "so I'm going to run a bunch of clients outside the distributed system I'm going to know exactly what everyone does and",
    "start": "183000",
    "end": "189300"
  },
  {
    "text": "those clients will interact with different database nodes and hopefully get some sort of picture of what the",
    "start": "189300",
    "end": "194519"
  },
  {
    "text": "database does but notably we don't have any picture of what's inside the database we don't do",
    "start": "194519",
    "end": "200879"
  },
  {
    "text": "any sort of code analysis there's no instrumentation no tracing this is partly because sometimes the database",
    "start": "200879",
    "end": "207180"
  },
  {
    "text": "isn't open source and sometimes because the language in which is written wouldn't be amenable to the kind of",
    "start": "207180",
    "end": "212340"
  },
  {
    "text": "tracing and proof techniques you might appreciate so focusing just on the database has no Peg box allows us to",
    "start": "212340",
    "end": "219239"
  },
  {
    "text": "write a test which is maximally portable and yet hopefully still finds bugs",
    "start": "219239",
    "end": "225540"
  },
  {
    "text": "so the general approach is to generate some random operation like set the current value of object X to three we",
    "start": "225540",
    "end": "232860"
  },
  {
    "text": "make a network request and we get back a response and then that response can be interpreted in one of three ways",
    "start": "232860",
    "end": "239220"
  },
  {
    "text": "it could be okay we know what happened it could fail and we know it did not happen",
    "start": "239220",
    "end": "244739"
  },
  {
    "text": "or something else could happen we could get a timeout or some sort of indeterminate message and it's important",
    "start": "244739",
    "end": "250439"
  },
  {
    "text": "that when this happens we actually leave the invocation open for all time",
    "start": "250439",
    "end": "255659"
  },
  {
    "text": "that's because the operation may or may not have happened already and if it hasn't it could happen later it might",
    "start": "255659",
    "end": "261720"
  },
  {
    "text": "still be in the network it might be queued we just don't know so over time we're going to build up a",
    "start": "261720",
    "end": "266820"
  },
  {
    "text": "concurrent history of operations perform a different clients some invoke some",
    "start": "266820",
    "end": "271860"
  },
  {
    "text": "completes some of them crashing and Lasting forever once we have this history we can start to ask questions",
    "start": "271860",
    "end": "277919"
  },
  {
    "text": "like is there some sequence of these operations which looks like it made sense",
    "start": "277919",
    "end": "285419"
  },
  {
    "text": "can we find a path that goes forward in time that would tell us the system is Real Time coherent if we have to go",
    "start": "285419",
    "end": "291720"
  },
  {
    "text": "backwards in time we know that it might not be linearizable the technique I want to talk about in",
    "start": "291720",
    "end": "298500"
  },
  {
    "text": "particular today is a cycle finding program called L this system takes all of those operations and says each one is",
    "start": "298500",
    "end": "304979"
  },
  {
    "text": "a transaction let's find dependencies between those transactions and look for Cycles in that graph",
    "start": "304979",
    "end": "310800"
  },
  {
    "text": "why do we care about Cycles because Cycles tell us when those operations can't possibly happen in any total order",
    "start": "310800",
    "end": "318960"
  },
  {
    "text": "so if I have two transactions T1 and T2 and the first one performs a right of",
    "start": "318960",
    "end": "324539"
  },
  {
    "text": "some version call it V1 and the second transaction overwrites that version with V2 of the same object we're going to",
    "start": "324539",
    "end": "332160"
  },
  {
    "text": "call that a write write dependency I'll write that as ww in this talk all right read dependencies when you",
    "start": "332160",
    "end": "338460"
  },
  {
    "text": "write some value and somebody else sees what you wrote obviously the person seeing your fax",
    "start": "338460",
    "end": "343919"
  },
  {
    "text": "needs to come second and a rewrite dependency is When You observe something and a second transaction overwrites it",
    "start": "343919",
    "end": "349740"
  },
  {
    "text": "with the next version now implicit in all of these definitions is the idea that there is a total order",
    "start": "349740",
    "end": "355680"
  },
  {
    "text": "of versions but when you make queries to a database you don't necessarily know what the version order is like if you",
    "start": "355680",
    "end": "363539"
  },
  {
    "text": "ask for the value of object X in the database and you get back five and then you ask again you get back three which",
    "start": "363539",
    "end": "369720"
  },
  {
    "text": "one came first there's no real way to tell so the secret in L is to make our data",
    "start": "369720",
    "end": "377280"
  },
  {
    "text": "types stronger so that we can introduce some heuristics allowing us to recover the version order",
    "start": "377280",
    "end": "383699"
  },
  {
    "text": "what we're going to do is Define our objects not as single values not as numbers but as lists",
    "start": "383699",
    "end": "389819"
  },
  {
    "text": "and each list can only be modified by appending a unique object unique number",
    "start": "389819",
    "end": "394979"
  },
  {
    "text": "to the end of it so if I have the list one two and I call append X3 the new value of x would be",
    "start": "394979",
    "end": "401699"
  },
  {
    "text": "one two three an interesting property of this data type is that if You observe a list one",
    "start": "401699",
    "end": "408180"
  },
  {
    "text": "two three you know that the right of three the append operation that had to be the thing that produced that value",
    "start": "408180",
    "end": "414919"
  },
  {
    "text": "because it always appends to the end and because every append is unique",
    "start": "414919",
    "end": "420419"
  },
  {
    "text": "the other interesting thing you can do is",
    "start": "420419",
    "end": "425160"
  },
  {
    "text": "you can go backwards if I see the value one two three I can go back to one two I",
    "start": "427259",
    "end": "432660"
  },
  {
    "text": "know that was the previous version and I can inductively do that process so if I see version 143 I know that the",
    "start": "432660",
    "end": "440039"
  },
  {
    "text": "previous version was 1 4 before that was one and before that was the empty version",
    "start": "440039",
    "end": "445080"
  },
  {
    "text": "so I can infer the total order if I have any visibility at all I do one read I get the whole version order out of it up",
    "start": "445080",
    "end": "451800"
  },
  {
    "text": "to that read this allows me to infer all those dependencies I talked about before I can",
    "start": "451800",
    "end": "457740"
  },
  {
    "text": "see that transaction one wrote version one of X and it was overwritten by X2",
    "start": "457740",
    "end": "463319"
  },
  {
    "text": "and T2 know that that right of 2 to X was visible to a later re of 1 2 and I know",
    "start": "463319",
    "end": "470819"
  },
  {
    "text": "that that read of 1 2 did not observe an append of three so I can extract all three types of transitions all three",
    "start": "470819",
    "end": "476819"
  },
  {
    "text": "types of dependencies between transactions this allows us to identify a broad swath",
    "start": "476819",
    "end": "482160"
  },
  {
    "text": "of anomalies things like write Cycles aborted reads intermediate reads cyclic information flow when two transactions",
    "start": "482160",
    "end": "488759"
  },
  {
    "text": "see each other's effects read skew when you see part of the transaction but not all of it anti-dependency Cycles we also",
    "start": "488759",
    "end": "496080"
  },
  {
    "text": "find some things that aren't in the typical formalisms like garbage reads where you read some value that nobody",
    "start": "496080",
    "end": "501180"
  },
  {
    "text": "ever wrote or inconsistencies in the version order when there was no total order of versions itself",
    "start": "501180",
    "end": "507419"
  },
  {
    "text": "we can find internal consistency violations where you have a single transaction which violates its own",
    "start": "507419",
    "end": "513539"
  },
  {
    "text": "threat of causality and duplicate writes when you write something once and it shows up five or six times",
    "start": "513539",
    "end": "519899"
  },
  {
    "text": "so for one test uh ordinarily you would expect to pay a cost of n factorial",
    "start": "519899",
    "end": "525959"
  },
  {
    "text": "that's because it's a combinatorial problem you have to find every single order of transactions and analyze it",
    "start": "525959",
    "end": "531959"
  },
  {
    "text": "there's a proof that says this has to happen for anything like serializability analysis",
    "start": "531959",
    "end": "537060"
  },
  {
    "text": "but if we constrain ourselves to the particular data types that I talked about lists with append we can do this",
    "start": "537060",
    "end": "543540"
  },
  {
    "text": "analysis in linear time and most importantly we can do it in a way that does not depend on concurrency",
    "start": "543540",
    "end": "548940"
  },
  {
    "text": "that means this process crashes we don't have to keep stacking up more and more combinations to search",
    "start": "548940",
    "end": "555839"
  },
  {
    "text": "so our general program here is to generate randomized operations to record",
    "start": "555839",
    "end": "560880"
  },
  {
    "text": "a history of those operations is applied to the actual database and then to verify that history is consistent with",
    "start": "560880",
    "end": "566220"
  },
  {
    "text": "some abstract model of the system and the way that we're going to do that is by looking for these Cycles",
    "start": "566220",
    "end": "574019"
  },
  {
    "text": "while this is going on we're going to call Beyonce and say please get your network shares we're going to cut the",
    "start": "574019",
    "end": "579240"
  },
  {
    "text": "network into pieces we're going to change notes clocks we're going to kill processes we're going to pause them we're going to create chaos and see what",
    "start": "579240",
    "end": "585720"
  },
  {
    "text": "happens okay I'm going to talk about three databases now three case studies",
    "start": "585720",
    "end": "591060"
  },
  {
    "text": "starting off with postgres version 12 3. this worked from earlier in the summer postgres as you may be aware is a SQL",
    "start": "591060",
    "end": "599339"
  },
  {
    "text": "database and for this talk we're actually not talking about a distributed system at all it's just a single node",
    "start": "599339",
    "end": "605100"
  },
  {
    "text": "the simplest possible installation you could do now Mr postgres offers the standard for SQL",
    "start": "605100",
    "end": "613320"
  },
  {
    "text": "isolation levels which means read uncommitted and read committed in postgres both of those are read",
    "start": "613320",
    "end": "618779"
  },
  {
    "text": "committed and that's the default safety level repeatable read and postgres means snapshot isolation although this was not",
    "start": "618779",
    "end": "625140"
  },
  {
    "text": "written down in the documentation it was I think well known in the community at the time",
    "start": "625140",
    "end": "630240"
  },
  {
    "text": "and then there's serializable which in postgres actually means serializable snapshot isolation it's slightly",
    "start": "630240",
    "end": "637080"
  },
  {
    "text": "stronger than serializability but for all intents and purposes you could treat them as equivalent",
    "start": "637080",
    "end": "643080"
  },
  {
    "text": "now I want to focus on one part of this graph um serializability is stronger than in",
    "start": "643080",
    "end": "648959"
  },
  {
    "text": "that it prohibits any histories which would also be illegal under snapshot isolation and repeatable read but what",
    "start": "648959",
    "end": "655260"
  },
  {
    "text": "postgres calls repeatable read isn't the same thing as like the formalism's",
    "start": "655260",
    "end": "661140"
  },
  {
    "text": "repeatable read so can we see the difference I I don't know let's try it out",
    "start": "661140",
    "end": "667560"
  },
  {
    "text": "so let's do a bunch of requests that repeatable read and see what comes out what we see are transactions like this",
    "start": "667560",
    "end": "673320"
  },
  {
    "text": "uh this top transaction reads wide and sees the value one two it must have",
    "start": "673320",
    "end": "678660"
  },
  {
    "text": "executed before the second transaction because the second transaction appended 4 to y",
    "start": "678660",
    "end": "684300"
  },
  {
    "text": "that transaction in turn depended 5 to Y and that had to happen before the read",
    "start": "684300",
    "end": "689459"
  },
  {
    "text": "of one two four five but that bottom transaction in turn uh",
    "start": "689459",
    "end": "694560"
  },
  {
    "text": "looked at X and saw four five that means it had to happen before the first transaction which appended a to X",
    "start": "694560",
    "end": "700920"
  },
  {
    "text": "so we have a cycle here involving two read write edges that means it's G2 item",
    "start": "700920",
    "end": "706620"
  },
  {
    "text": "this is an anomaly described in Aja and liskov's formalism for SQL levels",
    "start": "706620",
    "end": "712079"
  },
  {
    "text": "it's illegal under repeatable read but it is in fact legal under Snapchat isolation",
    "start": "712079",
    "end": "717420"
  },
  {
    "text": "so like what gives you know postgres claims that repeatable read is stronger",
    "start": "717420",
    "end": "723420"
  },
  {
    "text": "than the ANSI SQL repeatable read are they wrong about that",
    "start": "723420",
    "end": "728820"
  },
  {
    "text": "well it depends the ANSI SQL standard is actually ambiguous on this point there are at least two possible",
    "start": "728820",
    "end": "734640"
  },
  {
    "text": "interpretations of the standard this actually comes to us from ajin laskov and then baronson Emilio O'Neal at all",
    "start": "734640",
    "end": "741839"
  },
  {
    "text": "the bearings in paper is notable because it defined snapshot isolation in the literature and in the paper they go on",
    "start": "741839",
    "end": "748500"
  },
  {
    "text": "to say look you could take this interpretation of repeatable read and wind up with histories that are legal",
    "start": "748500",
    "end": "755880"
  },
  {
    "text": "but have weird anomalies isn't that interesting let's redefine uh",
    "start": "755880",
    "end": "761040"
  },
  {
    "text": "repeatability to be stronger so the definitions I'm using come from those papers they're the they're the uh the",
    "start": "761040",
    "end": "767760"
  },
  {
    "text": "broad interpretations of the standard but what postgres is doing and defensively so is using the strict",
    "start": "767760",
    "end": "774480"
  },
  {
    "text": "interpretations which allow these anomalies that's why this is both legal and illegal under the standard because",
    "start": "774480",
    "end": "780959"
  },
  {
    "text": "the standard is ambiguous okay so enough faffing about with uh",
    "start": "780959",
    "end": "786600"
  },
  {
    "text": "repeatable read let's talk about serializability the property that every transaction takes place in total order",
    "start": "786600",
    "end": "792240"
  },
  {
    "text": "or at least it looks like it now the way that serializability is built in postgres is by preventing",
    "start": "792240",
    "end": "799139"
  },
  {
    "text": "so-called dangerous structures a dangerous structure is a pair of transactions or a cycle of transactions",
    "start": "799139",
    "end": "805320"
  },
  {
    "text": "linked by two adjacent read write edges why is this the case go read the paper I",
    "start": "805320",
    "end": "810839"
  },
  {
    "text": "don't have a good intuition for it yet um now they're going to look for these transactions and prevent them",
    "start": "810839",
    "end": "817200"
  },
  {
    "text": "but when we actually run at serializable we see some Cycles like this one",
    "start": "817200",
    "end": "823260"
  },
  {
    "text": "um we append Y2 but that had to happen after the empty read of Y in the bottom",
    "start": "823260",
    "end": "828480"
  },
  {
    "text": "and the first transaction append or observes X to be the empty value and the bottom transaction of n something to X",
    "start": "828480",
    "end": "834360"
  },
  {
    "text": "so each one of these transactions saw the state before the other transactions",
    "start": "834360",
    "end": "839760"
  },
  {
    "text": "rights this is an anti-dependency cycle a G2 items like we saw before",
    "start": "839760",
    "end": "845220"
  },
  {
    "text": "and we can find more like this that are indirect this one has a right read Edge and two read write edges",
    "start": "845220",
    "end": "852839"
  },
  {
    "text": "now if you kind of squint and you just draw big circles around those transactions what you realize is that",
    "start": "852839",
    "end": "858899"
  },
  {
    "text": "these are exactly the same shapes of transactions that are supposed to be identified and prevented under serializable snapshot isolation",
    "start": "858899",
    "end": "865980"
  },
  {
    "text": "isn't that interesting so it turns out that when postgres was claiming to be serializable it was",
    "start": "865980",
    "end": "872820"
  },
  {
    "text": "actually not even repeatable read it was in fact strong snapshot isolation which",
    "start": "872820",
    "end": "878820"
  },
  {
    "text": "is Snapshot isolation plus the real time guarantee you never get to observe values from the past",
    "start": "878820",
    "end": "886399"
  },
  {
    "text": "so that's uh that's troubling it actually it was not as strong as it was supposed to be and nobody figured this",
    "start": "886440",
    "end": "893100"
  },
  {
    "text": "out for a while this happened under normal operation no crashes no problems just this is what postgres did",
    "start": "893100",
    "end": "899579"
  },
  {
    "text": "this happened because the conflict detection mechanism inside of postgres tries to figure out which transactions",
    "start": "899579",
    "end": "905339"
  },
  {
    "text": "own which tuples and it would incorrectly tag a single transaction as",
    "start": "905339",
    "end": "910560"
  },
  {
    "text": "the owner of both the old and new versions of some Tuple that meant the transaction would assume nobody had",
    "start": "910560",
    "end": "915600"
  },
  {
    "text": "conflicted with it and it was therefore safe to commit even if it didn't observe the rights of a prior transaction",
    "start": "915600",
    "end": "922860"
  },
  {
    "text": "okay so this was present essentially since the start of postgres serializability so every version uh",
    "start": "922860",
    "end": "928079"
  },
  {
    "text": "prior to August of 2020 exhibits this bug as far as we can tell it is fixed in",
    "start": "928079",
    "end": "934139"
  },
  {
    "text": "9523 1014 11 9 12 4 and 13. hooray what this means is that uh",
    "start": "934139",
    "end": "941279"
  },
  {
    "text": "postgres at least my best guess from a little bit of cursory testing offers strip serializability in recent versions",
    "start": "941279",
    "end": "947160"
  },
  {
    "text": "a strong snapshot isolation for repeatable read and redone committed and recommitted the defaults are both",
    "start": "947160",
    "end": "953040"
  },
  {
    "text": "recommitted we never saw a violation of those levels all right",
    "start": "953040",
    "end": "958800"
  },
  {
    "text": "part two mongodb version 426 also in early summer",
    "start": "958800",
    "end": "964199"
  },
  {
    "text": " and Jepson we've got a history we've done several analyzes some paid some free uh and mongodb had a web page",
    "start": "964199",
    "end": "970320"
  },
  {
    "text": "that talked about all the things that Jepson had found and what I thought was interesting was that that page omitted",
    "start": "970320",
    "end": "975540"
  },
  {
    "text": "many of the findings from previous chapter analyzes and instead claimed manga to be offered among the strongest",
    "start": "975540",
    "end": "981660"
  },
  {
    "text": "data consistency correctness and safety guarantees of any database available today which is an awfully strong claim",
    "start": "981660",
    "end": "988019"
  },
  {
    "text": "it also claimed uh prominently on the homepage to offer full acid transactions which is a wonderful property that many",
    "start": "988019",
    "end": "995160"
  },
  {
    "text": "of us have wanted for some time now when you hear acid you're thinking Atomic consistent isolated durable",
    "start": "995160",
    "end": "1002560"
  },
  {
    "text": "isolation means that transactions should appear to take effect as if no other transaction were executed concurrently",
    "start": "1002560",
    "end": "1008300"
  },
  {
    "text": "they should look like they happened in sequence that means serializability or stronger",
    "start": "1008300",
    "end": "1013940"
  },
  {
    "text": "but if you read the documentation what  actually offered was snapshot isolation and as we've seen before not",
    "start": "1013940",
    "end": "1019820"
  },
  {
    "text": "quite the same thing and this of course assumes that you're using majority rights and snapshot reads",
    "start": "1019820",
    "end": "1025400"
  },
  {
    "text": "which raises the question well what are the defaults in the defaults in mongodb are that committed rights can be thrown",
    "start": "1025400",
    "end": "1032540"
  },
  {
    "text": "away silently and reads can show you whatever a note happens to have locally",
    "start": "1032540",
    "end": "1037699"
  },
  {
    "text": "which could be present it could be old data that's been overwritten or it could be garbage data that's going to be",
    "start": "1037699",
    "end": "1043400"
  },
  {
    "text": "disappeared later you just don't know so what that means is that mongodb's defaults are in fact we done committed",
    "start": "1043400",
    "end": "1049700"
  },
  {
    "text": "and this is this is known uh this is a result from previous Epson analyzes it's been the documentation for a good five",
    "start": "1049700",
    "end": "1055820"
  },
  {
    "text": "years now so old ground I want to raise a question here and I'm",
    "start": "1055820",
    "end": "1061220"
  },
  {
    "text": "not entirely sure about this um read uncommitted doesn't actually mean everything goes in the Audra",
    "start": "1061220",
    "end": "1067760"
  },
  {
    "text": "formalism it prohibits a phenomenon called g0 a right cycle which is a dependency graph where there are all",
    "start": "1067760",
    "end": "1075380"
  },
  {
    "text": "right right edges for restaurant for a transaction cycle but that assumes that there is a total",
    "start": "1075380",
    "end": "1081320"
  },
  {
    "text": "order over those committed versions and mongodb doesn't actually have",
    "start": "1081320",
    "end": "1086720"
  },
  {
    "text": "necessarily a total order of versions  is happy to go into split brain and allow two different leaders to have",
    "start": "1086720",
    "end": "1093140"
  },
  {
    "text": "concurrent rights that evolve separately when that happens can you compare those values do they",
    "start": "1093140",
    "end": "1099559"
  },
  {
    "text": "have an order I'm not sure they do in which case maybe mongodb isn't even redone committed maybe it's something",
    "start": "1099559",
    "end": "1105200"
  },
  {
    "text": "weaker I'm not really sure how to evaluate that in this formalism okay so let's try it out let's create a",
    "start": "1105200",
    "end": "1112520"
  },
  {
    "text": "collection we'll ask the database handle from the client to give us reconcern linearizable right concern majority",
    "start": "1112520",
    "end": "1118640"
  },
  {
    "text": "we're going to issue an update statement on that collection if you do this your",
    "start": "1118640",
    "end": "1123919"
  },
  {
    "text": "single document operations will be snapshot isolated and linearizable at least in the cursory testing I did",
    "start": "1123919",
    "end": "1131480"
  },
  {
    "text": "uh so let's add a transaction we'll create a session object and we'll call session with transaction and we'll",
    "start": "1131480",
    "end": "1138080"
  },
  {
    "text": "change our update operations to use the session otherwise everything's the same and suddenly our previously linearizable",
    "start": "1138080",
    "end": "1145340"
  },
  {
    "text": "snapshot isolated history starts showing lost rights and award and reads what's going on",
    "start": "1145340",
    "end": "1151280"
  },
  {
    "text": "this is because transactions actually ignore the database and collection level reconcerns and silently downgrade them",
    "start": "1151280",
    "end": "1158059"
  },
  {
    "text": "to Local by default so adding transactions to the system actually makes it worse unless you make",
    "start": "1158059",
    "end": "1165799"
  },
  {
    "text": "sure to set the read concerned snapshot on the transaction options Builder so every time you do a transaction make",
    "start": "1165799",
    "end": "1171799"
  },
  {
    "text": "sure you are setting that reconcert snapshot if you wanted snapshot reads",
    "start": "1171799",
    "end": "1176960"
  },
  {
    "text": "and if you do this you're still going to see split brain and imported reads it's not snapshot isolated which",
    "start": "1176960",
    "end": "1182720"
  },
  {
    "text": "um caused me to think for a moment I found something very interesting and then I discovered this is actually also in the documentation snapshot reconcern",
    "start": "1182720",
    "end": "1190340"
  },
  {
    "text": "only gives you snapshot isolated reads if you also use write concern majority",
    "start": "1190340",
    "end": "1195620"
  },
  {
    "text": "and this doesn't just apply to read write transactions it also applies to read-only transactions so even if you're",
    "start": "1195620",
    "end": "1201140"
  },
  {
    "text": "doing no rights you can see histories like this one you read x a bunch of times and see it go empty one five one",
    "start": "1201140",
    "end": "1209240"
  },
  {
    "text": "five six and then all of that data disappears and you get empty 3e37 as if",
    "start": "1209240",
    "end": "1215059"
  },
  {
    "text": "one five six had never happened in the first place so when you do a request you need to",
    "start": "1215059",
    "end": "1220880"
  },
  {
    "text": "call reconcert snapshot right concern majority even if you're only doing a read",
    "start": "1220880",
    "end": "1226460"
  },
  {
    "text": "this is in the documentation it's just surprise link that's all now maybe the question is how many uses",
    "start": "1226460",
    "end": "1233299"
  },
  {
    "text": "are bothering to do this correctly mongodb's research suggests that 80 of users of their hosted service use the",
    "start": "1233299",
    "end": "1239660"
  },
  {
    "text": "default right concern and 99.6 of users use the default reconcern which means that you know these people are whether",
    "start": "1239660",
    "end": "1246679"
  },
  {
    "text": "they intend to or not getting unsafe default Behavior hopefully the idea is that it just",
    "start": "1246679",
    "end": "1252200"
  },
  {
    "text": "happens infrequently enough that it doesn't matter for their applications and this could be a valid assumption the paper goes on to argue that",
    "start": "1252200",
    "end": "1259700"
  },
  {
    "text": "now you might ask whether mongodb's documentation showed examples of correct usage and the answer is not really uh",
    "start": "1259700",
    "end": "1266059"
  },
  {
    "text": "they used read concern local and write only transactions or they use only the defaults there were actually no examples",
    "start": "1266059",
    "end": "1271940"
  },
  {
    "text": "I could find of doing snapshot isolated reads so I went looking for third-party blog posts and of the dozen or so I evaluated",
    "start": "1271940",
    "end": "1279140"
  },
  {
    "text": "almost all of them claim snapshot isolation or acid but they either use the defaults which as we've seen are not",
    "start": "1279140",
    "end": "1286400"
  },
  {
    "text": "snapshot isolated or they explicitly said weaker options they're only a couple of blog posts I found that knew",
    "start": "1286400",
    "end": "1292520"
  },
  {
    "text": "how to do this correctly so I think the mongodb community has some careful reading to do you know make sure you",
    "start": "1292520",
    "end": "1298039"
  },
  {
    "text": "read this documentation to figure out how to use transactions correctly",
    "start": "1298039",
    "end": "1303200"
  },
  {
    "text": "now as we've pointed out before snapshot isolation isn't necessarily the same thing as acid here is a G2 item a right",
    "start": "1303200",
    "end": "1310220"
  },
  {
    "text": "skew just like we saw in postgres one transaction reads the empty value of y",
    "start": "1310220",
    "end": "1315620"
  },
  {
    "text": "and T2 adds something to Y so T1 has to come first but T2 reads the empty value of x and T1",
    "start": "1315620",
    "end": "1322760"
  },
  {
    "text": "appends something to X so T2 had to happen first clearly these things are isolated",
    "start": "1322760",
    "end": "1328520"
  },
  {
    "text": "because they executed mixed into each other but this is still legal under snapshot isolation",
    "start": "1328520",
    "end": "1334520"
  },
  {
    "text": "this leads to this weird phenomenon where you can find clusters of 123",
    "start": "1334520",
    "end": "1339679"
  },
  {
    "text": "different transactions all of which executed both before and after I.E during other transactions and observe",
    "start": "1339679",
    "end": "1346400"
  },
  {
    "text": "their effects mixed together but this is still according to mongodb marketing uh fully acid",
    "start": "1346400",
    "end": "1351980"
  },
  {
    "text": "what does acid even mean if not fully isolated I don't know is this common it depends uh in the",
    "start": "1351980",
    "end": "1359960"
  },
  {
    "text": "transactions I was generating which are intentionally designed to create conflict about 10 percent of transactions violated isolation in",
    "start": "1359960",
    "end": "1366320"
  },
  {
    "text": "healthy clusters again this is still snapshot isolated it's just not serializable",
    "start": "1366320",
    "end": "1371900"
  },
  {
    "text": "does it actually matter for your application maybe many applications are perfectly fine under snapshot or even",
    "start": "1371900",
    "end": "1377840"
  },
  {
    "text": "weaker but you're going to have to look at your transactions and figure out whether that holds or not",
    "start": "1377840",
    "end": "1383380"
  },
  {
    "text": "okay so let's try it again let's try majority in snapshot and see what happens",
    "start": "1383380",
    "end": "1388760"
  },
  {
    "text": "what you'll find at least I'm all going to be 426 is that you can append a value to an object like append six to X and",
    "start": "1388760",
    "end": "1396860"
  },
  {
    "text": "then go to read X and see two four one six seven or sorry six eight seven six",
    "start": "1396860",
    "end": "1402760"
  },
  {
    "text": "it's as if the right took place twice then you start to think huh maybe",
    "start": "1402760",
    "end": "1408140"
  },
  {
    "text": "there's like a transaction retry mechanism that improperly retry the transaction and you go to turn it off",
    "start": "1408140",
    "end": "1414080"
  },
  {
    "text": "and you find out that the transaction system ignores the retry right setting so you can't disable it",
    "start": "1414080",
    "end": "1420200"
  },
  {
    "text": "okay you go on to find more Cycles uh here's one where the first transaction adds four to Y second one adds five to Y",
    "start": "1420200",
    "end": "1428419"
  },
  {
    "text": "and we have a later read that shows four comes before 5. so right right Edge the second transaction reads X12 and the",
    "start": "1428419",
    "end": "1436100"
  },
  {
    "text": "third transaction adds three to that so the third transaction happened later and the third transactions append of three",
    "start": "1436100",
    "end": "1441740"
  },
  {
    "text": "to X is visible so the first transactions read of X so we have a cycle with only one read write Edge",
    "start": "1441740",
    "end": "1448039"
  },
  {
    "text": "this is new this is interesting this is called G single it's a read SKU and it's illegal under snapshot isolation",
    "start": "1448039",
    "end": "1455299"
  },
  {
    "text": "it gets worse we can see transactions where both observe the others rights so here both transactions appended to",
    "start": "1455299",
    "end": "1462559"
  },
  {
    "text": "some key and then the other one saw that append that's g1c cyclic information flow and",
    "start": "1462559",
    "end": "1467900"
  },
  {
    "text": "that's prohibited under not just snapshot isolation but that's illegal under recommitted",
    "start": "1467900",
    "end": "1474140"
  },
  {
    "text": "in fact we can even see single transactions where you read x1234 but",
    "start": "1474140",
    "end": "1479360"
  },
  {
    "text": "that right of one is one that you executed later in the same transaction it's as if the read had time traveled",
    "start": "1479360",
    "end": "1485900"
  },
  {
    "text": "forward in time to read your effects in the future in fact there's also a bunch of other",
    "start": "1485900",
    "end": "1491480"
  },
  {
    "text": "right right edges here um you know other transactions added X2 X3 X4 and all those are visible all of",
    "start": "1491480",
    "end": "1497900"
  },
  {
    "text": "those points to a retry problem we found internal consistency violations so I'm only going to be claimed to be",
    "start": "1497900",
    "end": "1504500"
  },
  {
    "text": "acid and the documentation claimed to be snapshot isolated it was actually something I think weaker than redone",
    "start": "1504500",
    "end": "1509780"
  },
  {
    "text": "committed this is probably due to server 48307 committed transactions could incorrectly",
    "start": "1509780",
    "end": "1516440"
  },
  {
    "text": "appear to fail and the retry mechanism would retry them when it wasn't supposed to that was fixed in 428 and I've done a",
    "start": "1516440",
    "end": "1522260"
  },
  {
    "text": "couple hours of really quickly looking in 428 I haven't seen a violation since so fingers crossed uh offers",
    "start": "1522260",
    "end": "1530240"
  },
  {
    "text": "snapshot isolation as its strongest isolation level but you need to be aware the defaults are recommitted or maybe",
    "start": "1530240",
    "end": "1535760"
  },
  {
    "text": "something weaker last but not least I want to talk about redis and in particular redis raft",
    "start": "1535760",
    "end": "1543679"
  },
  {
    "text": "where does raptor is a replication system for redis it's got many ways of replicating and this is a new one from",
    "start": "1543679",
    "end": "1548840"
  },
  {
    "text": "redis Labs which is based on the raft consensus algorithm all of this research is based on unreleased internal builds",
    "start": "1548840",
    "end": "1554360"
  },
  {
    "text": "so there are no users to speak of now in theory uh using graph should give",
    "start": "1554360",
    "end": "1560419"
  },
  {
    "text": "you linearizability or at least sequential consistency and linearizability over multiple transactions that strict serializability",
    "start": "1560419",
    "end": "1567799"
  },
  {
    "text": "to put this into normal person terms every operation every transaction should appear to happen in some total order and",
    "start": "1567799",
    "end": "1575600"
  },
  {
    "text": "that order needs to be consistent with the real-time order you observed them so if you write X you should be able to",
    "start": "1575600",
    "end": "1581840"
  },
  {
    "text": "read that right later in real time the first thing we found was that redis",
    "start": "1581840",
    "end": "1587480"
  },
  {
    "text": "would go into Infinite Loops you'd issue a set request to a follower and with proxying enabled the follower would send",
    "start": "1587480",
    "end": "1594020"
  },
  {
    "text": "that request to the leader the leader would broadcast the request to get acknowledgment for the set and commit it",
    "start": "1594020",
    "end": "1599720"
  },
  {
    "text": "and the followers say great what do I do with a set operation oh I'm a follower I'll proxy it to leader and the cycle",
    "start": "1599720",
    "end": "1605840"
  },
  {
    "text": "would repeat again so it would sit there thrashing itself endlessly until it ran out of memory or",
    "start": "1605840",
    "end": "1611960"
  },
  {
    "text": "disk that was fixed by adding a re-entrancy check but it turned out that there was a",
    "start": "1611960",
    "end": "1617120"
  },
  {
    "text": "related bug we'd see on any failover event all the data in the cluster disappeared",
    "start": "1617120",
    "end": "1622880"
  },
  {
    "text": "this happened because with proxy mode disabled a leader would get a set",
    "start": "1622880",
    "end": "1628159"
  },
  {
    "text": "request broadcast it commit it and the follower would say what do I do with the set ah I am but a humble follower I'm",
    "start": "1628159",
    "end": "1634760"
  },
  {
    "text": "not supposed to execute any operations I will throw this in the trash so as a result only the leader had any",
    "start": "1634760",
    "end": "1641179"
  },
  {
    "text": "state the followers didn't have anything in their state machine that was fixed by the same re-emergency check",
    "start": "1641179",
    "end": "1648520"
  },
  {
    "text": "we found split brain and lost updates related to The Joint consensus mechanism used on membership changes when you",
    "start": "1648559",
    "end": "1655400"
  },
  {
    "text": "change memberships you're supposed to get approval from the old group nodes and a new group of nodes just before you",
    "start": "1655400",
    "end": "1661279"
  },
  {
    "text": "can move on but in redisraft you could tell a note that it was the only person",
    "start": "1661279",
    "end": "1666679"
  },
  {
    "text": "in the cluster like forget about your old friends and that node would then go on to believe itself the leader of a",
    "start": "1666679",
    "end": "1673700"
  },
  {
    "text": "single node cluster and execute all the rights it wanted in isolation of course this led to Lost updates",
    "start": "1673700",
    "end": "1680600"
  },
  {
    "text": "this is because the raft log type remove node message was left out of the set of message types that was supposed to be",
    "start": "1680600",
    "end": "1685640"
  },
  {
    "text": "considered a configuration change so it just needed to make sure to look at that message properly this was fixed in ea7",
    "start": "1685640",
    "end": "1694820"
  },
  {
    "text": "we found issues with transient stale reads um you write something to the database and then you go to read it it would show",
    "start": "1694820",
    "end": "1700640"
  },
  {
    "text": "up and then If you restarted the node it would disappear for a little bit you see like the empty",
    "start": "1700640",
    "end": "1706640"
  },
  {
    "text": "state or you'd be writing things along happily and then with no apparent cause you just observe something from five",
    "start": "1706640",
    "end": "1714260"
  },
  {
    "text": "seconds ago this happened because the raft Library didn't issue a no-op log entry when a",
    "start": "1714260",
    "end": "1719900"
  },
  {
    "text": "new leader was elected as part of the specification in the raft algorithm but not every implementation does it this is",
    "start": "1719900",
    "end": "1725600"
  },
  {
    "text": "already fixed Upstream so they just had to merge the changes we found issues with availability as",
    "start": "1725600",
    "end": "1731179"
  },
  {
    "text": "well uh nodes would show that there was no leader in the cluster for hundreds of seconds",
    "start": "1731179",
    "end": "1736220"
  },
  {
    "text": "so you'd be running along doing operations everything's great no Faults required and then it would just fall over saying no leader no leader this",
    "start": "1736220",
    "end": "1743659"
  },
  {
    "text": "happened because of a number of bugs mostly involving connection handling issues that cause the state machine to",
    "start": "1743659",
    "end": "1749480"
  },
  {
    "text": "stall for a long time on an election and the election timeouts caused it to happen often because the timeouts were",
    "start": "1749480",
    "end": "1755480"
  },
  {
    "text": "set fairly aggressively that was fixed in recent builds we found a board of reeds began with no",
    "start": "1755480",
    "end": "1762440"
  },
  {
    "text": "leader you'd issue a right and it would say oh there's no leader I didn't do that right or so you would think",
    "start": "1762440",
    "end": "1768500"
  },
  {
    "text": "but then you go to read it and it turned out that you're right did complete after all this was addressed by a whole Suite of",
    "start": "1768500",
    "end": "1774320"
  },
  {
    "text": "protocol fixes we found that you could do a transaction abort it or discard the transaction",
    "start": "1774320",
    "end": "1781700"
  },
  {
    "text": "State and it wouldn't necessarily discard sometimes those operations would get squirreled away in some weird place",
    "start": "1781700",
    "end": "1788299"
  },
  {
    "text": "and show up later this happened when you do like a",
    "start": "1788299",
    "end": "1793460"
  },
  {
    "text": "multi-operation start a transaction you would issue a couple of requests and you say exec to commit if this fails you",
    "start": "1793460",
    "end": "1800840"
  },
  {
    "text": "would say okay great discard the connection State start fresh but what would happen is the set and",
    "start": "1800840",
    "end": "1807500"
  },
  {
    "text": "push operations would get saved for later and if you later issued a new transaction like get X your earlier",
    "start": "1807500",
    "end": "1815000"
  },
  {
    "text": "seven R push operations would get pulled into it and executed first this happened because the discard",
    "start": "1815000",
    "end": "1821120"
  },
  {
    "text": "operation went through the rathlog directly so every single thing you did in the transaction it was a separate log",
    "start": "1821120",
    "end": "1826820"
  },
  {
    "text": "entry if your discard failed because of a timeout or something you'd end up with",
    "start": "1826820",
    "end": "1832340"
  },
  {
    "text": "all of those connections all those operations still in the state machine still in the raft lock and they would get folded into the next exec this is",
    "start": "1832340",
    "end": "1839480"
  },
  {
    "text": "fixed by adding a local state machine that buffers the operations first come across wires and this is one of my",
    "start": "1839480",
    "end": "1846020"
  },
  {
    "text": "all-time favorite bugs you'd issue a request and if there were no predictions and crashes involved reddit's raft could",
    "start": "1846020",
    "end": "1852440"
  },
  {
    "text": "send you back a response intended for someone else this is a type error but if you're",
    "start": "1852440",
    "end": "1858679"
  },
  {
    "text": "unlucky you get a type that's the same as you expected and you just get silent data corruption like you asked for the",
    "start": "1858679",
    "end": "1864440"
  },
  {
    "text": "number of days that this restaurant has been open and you got back the age of the Grand Canyon in Millennia",
    "start": "1864440",
    "end": "1870820"
  },
  {
    "text": "so this happened because the response uh logic used the wrong context object",
    "start": "1870820",
    "end": "1877340"
  },
  {
    "text": "there were a redisraft context and a request context and they just typo the wrong context there were a few other",
    "start": "1877340",
    "end": "1883279"
  },
  {
    "text": "issues here as well but we got fixed we found more cases of split brain more",
    "start": "1883279",
    "end": "1888860"
  },
  {
    "text": "lost updates uh you could have membership changes and crashes result in states where the middle of the history",
    "start": "1888860",
    "end": "1894620"
  },
  {
    "text": "would diverge and then come back together so you'd see like one two five on one node and one three four five on another",
    "start": "1894620",
    "end": "1902000"
  },
  {
    "text": "this was a bug in the underlying raft Library nodes were supposed to be demoted before removal but they were instead left running and could still",
    "start": "1902000",
    "end": "1908360"
  },
  {
    "text": "participate with their data files even after being removed this is fixed as well",
    "start": "1908360",
    "end": "1914240"
  },
  {
    "text": "we found more transient empty reads this is litany I'm going on forever but uh",
    "start": "1914240",
    "end": "1919760"
  },
  {
    "text": "knows what we started after membership changes could temporarily exhibit empty reads we could have a bug in the log",
    "start": "1919760",
    "end": "1925460"
  },
  {
    "text": "loading process where you would look at the log try to replay to figure out who owned what when and use a set of all",
    "start": "1925460",
    "end": "1932600"
  },
  {
    "text": "nodes rather than a set of voting notes to figure out something was committed you could also treat former members of the Clusters if they were still alive",
    "start": "1932600",
    "end": "1938779"
  },
  {
    "text": "send the messages and get confirmation so that was fixed and we found more",
    "start": "1938779",
    "end": "1944059"
  },
  {
    "text": "cases to split brain we'd find Divergence of the tales of histories where a single list would go into two",
    "start": "1944059",
    "end": "1949880"
  },
  {
    "text": "different versions of two different nodes due to a bug in the snapshot process snapshots would be fine in",
    "start": "1949880",
    "end": "1955100"
  },
  {
    "text": "memory but due to a bug in the way they were written to disk you'd end up with a state that couldn't be recovered properly there'd be nodes missing from",
    "start": "1955100",
    "end": "1961399"
  },
  {
    "text": "the snapshot on disk that was fixed and we found dueling histories another case of split brain",
    "start": "1961399",
    "end": "1967360"
  },
  {
    "text": "this is uncommon for rap systems but I think this is because uh you know this system had never been deployed before",
    "start": "1967360",
    "end": "1973700"
  },
  {
    "text": "hadn't really had a chance to go through Shakedown early prototype and also because the underlying raft Library just",
    "start": "1973700",
    "end": "1978980"
  },
  {
    "text": "hadn't had a chance to be used in this kind of context before that happened with process kills fix as",
    "start": "1978980",
    "end": "1984799"
  },
  {
    "text": "well we found a whole bunch of crashes seg faults and variant violations you",
    "start": "1984799",
    "end": "1989960"
  },
  {
    "text": "name it um those were not really safety related but really did",
    "start": "1989960",
    "end": "1996019"
  },
  {
    "text": "cause issues with availability all fixed now so redis wrap's goal is to get stretch",
    "start": "1996019",
    "end": "2003039"
  },
  {
    "text": "serializability but it was actually something weaker than redone committed it allowed all kinds of terrible things",
    "start": "2003039",
    "end": "2008440"
  },
  {
    "text": "to happen however all of this stuff was in early development builds so no users were actually affected this is precisely",
    "start": "2008440",
    "end": "2014799"
  },
  {
    "text": "the stage which we want to find awful bugs my guess is that by the time redisraf gets released officially uh you know",
    "start": "2014799",
    "end": "2021460"
  },
  {
    "text": "they will have lots of time to shake this out and towards the end of our testing we were seeing what looked pretty close to strip serializability in",
    "start": "2021460",
    "end": "2027340"
  },
  {
    "text": "all of our runs so I'm optimistic to recap",
    "start": "2027340",
    "end": "2032380"
  },
  {
    "text": "when you choose database whether you choose a commercial one or an open source database you're essentially",
    "start": "2032380",
    "end": "2038380"
  },
  {
    "text": "signing a contract with the vendor and the vendor here represented by Ursula the sea witch may have hidden some terms",
    "start": "2038380",
    "end": "2045100"
  },
  {
    "text": "in that contract which you might want to be aware of if you don't kiss the prince by the third day your data might be",
    "start": "2045100",
    "end": "2050500"
  },
  {
    "text": "forfeit so read the documentation very carefully look for consistency models look for uh failure modes try to figure",
    "start": "2050500",
    "end": "2059378"
  },
  {
    "text": "out what happens when nodes crash or or are partitioned then test it for yourself because",
    "start": "2059379",
    "end": "2064658"
  },
  {
    "text": "oftentimes the documentation lies look out for words like strict consistency acids strong these are words",
    "start": "2064659",
    "end": "2072099"
  },
  {
    "text": "which don't have a super well-defined meaning and vendors are therefore free to use them in ways that might be",
    "start": "2072099",
    "end": "2077320"
  },
  {
    "text": "surprising so when you do see something like acid or you do see strong consistency try to ask what else is this",
    "start": "2077320",
    "end": "2082898"
  },
  {
    "text": "coupled with it can be sensible in context but you want to see an actual model like serializable or linearizable",
    "start": "2082899",
    "end": "2088780"
  },
  {
    "text": "to go with that I want to encourage both vendors and users to be formal and specific in the",
    "start": "2088780",
    "end": "2094540"
  },
  {
    "text": "consistency models and safety properties they expect and provide and also to acknowledge that not",
    "start": "2094540",
    "end": "2099820"
  },
  {
    "text": "everybody needs this safety for all those Monger users running at like read uncommitted is that bad I mean lots of",
    "start": "2099820",
    "end": "2106540"
  },
  {
    "text": "companies are still doing okay right so maybe this isn't the end of the world there are many applications in which data loss is actually fine",
    "start": "2106540",
    "end": "2114339"
  },
  {
    "text": "I Harbor this often to use proven algorithms always telling vendors don't invent your own but as we've seen with",
    "start": "2114339",
    "end": "2119980"
  },
  {
    "text": "both postgres and redis raft proofs Aren't Enough you can wind up with a system that",
    "start": "2119980",
    "end": "2125740"
  },
  {
    "text": "breaks either because the implementation of the proof isn't correct or oftentimes it's the coupling of the implementation",
    "start": "2125740",
    "end": "2132220"
  },
  {
    "text": "to some other system like the snapshot system in redis raft uh this the logging",
    "start": "2132220",
    "end": "2138160"
  },
  {
    "text": "of the snapshots is kind of out of scope of the core replication system but it could still lead to consistency anomalies",
    "start": "2138160",
    "end": "2144700"
  },
  {
    "text": "when you do testing for these systems consider your failure modes inject things like process crashes with kill-9",
    "start": "2144700",
    "end": "2151859"
  },
  {
    "text": "try killing nodes uh by pulling out their power switches or by running AWS terminate",
    "start": "2151859",
    "end": "2157960"
  },
  {
    "text": "try inducing clock skew with date or live fake time you can simulate garbage collection i o",
    "start": "2157960",
    "end": "2164140"
  },
  {
    "text": "pauses with Sig stop and stick continue and you can simulate Network partitions which I think are one of the most useful",
    "start": "2164140",
    "end": "2170380"
  },
  {
    "text": "tools for inducing distributed systems faults with iptables J drop a little bit",
    "start": "2170380",
    "end": "2176200"
  },
  {
    "text": "of TC the traffic control program will get you simulated latency and that could be helpful for testing uh any sort of",
    "start": "2176200",
    "end": "2182140"
  },
  {
    "text": "system which has performance constraints or is intended to be geographically replicated what I'm advocating for is property",
    "start": "2182140",
    "end": "2189700"
  },
  {
    "text": "based testing instead of writing down the specific sequence of operations you want to perform generate randomized",
    "start": "2189700",
    "end": "2195880"
  },
  {
    "text": "operations and then apply them to the system this was successful because uh we're able to create partitions we're",
    "start": "2195880",
    "end": "2203020"
  },
  {
    "text": "able to create transactions which nobody had thought to ask about postgres had an extensive test suite for serializability",
    "start": "2203020",
    "end": "2209800"
  },
  {
    "text": "and it passed that test suite for years but nobody had thought to write the particular extremely strange combination",
    "start": "2209800",
    "end": "2215980"
  },
  {
    "text": "of operations that Jepson made up by random so try property is testing",
    "start": "2215980",
    "end": "2221020"
  },
  {
    "text": "when you do this think of high level invariance the more General your program verification the better that's why L has",
    "start": "2221020",
    "end": "2227740"
  },
  {
    "text": "been so successful because it can verify all kinds of properties at a high level but you don't have to use something complicated to get good results if",
    "start": "2227740",
    "end": "2234940"
  },
  {
    "text": "you're building a user registration system maybe your variants are things like after changing a password the user",
    "start": "2234940",
    "end": "2241240"
  },
  {
    "text": "can log in using that password maybe your verification is you can only",
    "start": "2241240",
    "end": "2246760"
  },
  {
    "text": "register a user account once these are simple invariants that you could apply to your own services",
    "start": "2246760",
    "end": "2252460"
  },
  {
    "text": "and when you do this testing it's not enough to do it in the happy case as we saw with redisraft inducing failure",
    "start": "2252460",
    "end": "2259000"
  },
  {
    "text": "modes like a failover can make the system do something very surprising indeed so try a little bit of that",
    "start": "2259000",
    "end": "2266079"
  },
  {
    "text": "finally if you look for Perfection you will never be content every database has problems and running databases is an",
    "start": "2266079",
    "end": "2271960"
  },
  {
    "text": "almost impossible problem in itself so I want to have a little bit of humility and respect for the people who are",
    "start": "2271960",
    "end": "2277720"
  },
  {
    "text": "trying to make these things work we should understand that they're going to mess up sometimes that said doing a little bit of testing",
    "start": "2277720",
    "end": "2284380"
  },
  {
    "text": "a little bit of experimentation up front can yield dramatic results and that's",
    "start": "2284380",
    "end": "2290140"
  },
  {
    "text": "what I'm hoping to play today this work would not have been possible without my research collaborator Peter",
    "start": "2290140",
    "end": "2295480"
  },
  {
    "text": "alvro from UC Santa Cruz kit Patel who helped write early versions of L has made many contributions to Jepson Andres",
    "start": "2295480",
    "end": "2301540"
  },
  {
    "text": "Peter Felix Thomas and Daniel from the postgres team Maxine from mongodb redis",
    "start": "2301540",
    "end": "2307420"
  },
  {
    "text": "Labs who funded their analysis specifically you've talk and yasi from",
    "start": "2307420",
    "end": "2312700"
  },
  {
    "text": "redis thank you all very much for coming to this talk even virtually it's nice to see all of you I'll be in this live take",
    "start": "2312700",
    "end": "2319180"
  },
  {
    "text": "questions later and if you want to read about any of this research you can go to jepson.io thanks",
    "start": "2319180",
    "end": "2325800"
  }
]