[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "so I worked on there VMs in my life and as all people do in",
    "start": "5820",
    "end": "12209"
  },
  {
    "text": "VMs I started with a Java VM and then I went and participated in the v8",
    "start": "12209",
    "end": "17340"
  },
  {
    "text": "development and I will be mostly talking about v8 related stuff here and for the",
    "start": "17340",
    "end": "22980"
  },
  {
    "text": "last three years I have been working on an optimizing compiler for the dart VM and all of these VMs I worked on they",
    "start": "22980",
    "end": "31110"
  },
  {
    "text": "have one thing in common and its complexity some people tend to think that complexity comes from us VM people",
    "start": "31110",
    "end": "39449"
  },
  {
    "start": "34000",
    "end": "238000"
  },
  {
    "text": "trying to ensure a certain level of job security for ourselves but that's not",
    "start": "39449",
    "end": "44970"
  },
  {
    "text": "the case the complexity comes in because we have the VMS have to run all kinds of",
    "start": "44970",
    "end": "52200"
  },
  {
    "text": "weird code fast unfortunately there is a side-effects to complexity and while the",
    "start": "52200",
    "end": "58680"
  },
  {
    "text": "MS run all kinds of weird code fast sometimes they suddenly run simple code",
    "start": "58680",
    "end": "65759"
  },
  {
    "text": "slow and because VMs complex developers usually have no insight on why that",
    "start": "65759",
    "end": "71760"
  },
  {
    "text": "happens and what can they do to fix it and what I'm trying to do here is to",
    "start": "71760",
    "end": "78900"
  },
  {
    "text": "alleviate this problem for you provide",
    "start": "78900",
    "end": "83939"
  },
  {
    "text": "you with some methodology or some way of thinking about performance that would allow you to solve your problems just",
    "start": "83939",
    "end": "94439"
  },
  {
    "text": "recently I saw this question so this question on Stack Overflow and I monitor",
    "start": "94439",
    "end": "101729"
  },
  {
    "text": "all kinds of social media closely searching for people having performance",
    "start": "101729",
    "end": "107400"
  },
  {
    "text": "problems and somebody wrote chart one implementation in JavaScript if you",
    "start": "107400",
    "end": "114840"
  },
  {
    "text": "don't know what church are Tony is that's okay I did not know either so it's a cypher like all ciphers it takes",
    "start": "114840",
    "end": "122220"
  },
  {
    "text": "some bytes and it spits some bytes out and it does a lot of integer operations",
    "start": "122220",
    "end": "128039"
  },
  {
    "text": "and it looks all reasonable and then performs reasonably fast for this",
    "start": "128039",
    "end": "133049"
  },
  {
    "text": "developer like we did 20 megabytes a second and I don't know whether it's",
    "start": "133049",
    "end": "138269"
  },
  {
    "text": "fast or slow because I do know cryptography so probably it is slow but it looks fast enough for me",
    "start": "138269",
    "end": "144170"
  },
  {
    "text": "but they did not look fast enough for the developer who wrote it so he looked at that computational kernel of his",
    "start": "144170",
    "end": "149950"
  },
  {
    "text": "cipher and he said Oh what if I try to eliminate the overhead of the calls",
    "start": "149950",
    "end": "155530"
  },
  {
    "text": "inside the loop there so he took this the function that was there and just",
    "start": "155530",
    "end": "162410"
  },
  {
    "text": "textually inlined it multiple times like completely and you can see it's a lot of codes I'm not even showing the complete",
    "start": "162410",
    "end": "169370"
  },
  {
    "text": "loop body anymore and what would you expect you would expect either speed up",
    "start": "169370",
    "end": "176090"
  },
  {
    "text": "or a neutral performance change right nothing should have changed but on",
    "start": "176090",
    "end": "182269"
  },
  {
    "text": "Chrome suddenly the performance dropped by a factor of 10 after doing this and of course nobody is very happy I was not",
    "start": "182269",
    "end": "189230"
  },
  {
    "text": "happy when I saw this question I said something fishy is going on here for the",
    "start": "189230",
    "end": "194390"
  },
  {
    "text": "rescue and I looked at the benchmark and I looked and I looked and I found this function and then they put this comment",
    "start": "194390",
    "end": "201260"
  },
  {
    "text": "with a nice user awesome ASCII art inside and lo and behold the performance",
    "start": "201260",
    "end": "207110"
  },
  {
    "text": "was restored so basically you take this and you commit it to your repo and the",
    "start": "207110",
    "end": "213650"
  },
  {
    "text": "problem is solved to the next problem so",
    "start": "213650",
    "end": "218959"
  },
  {
    "text": "how did I know where to put this comment and what to look for well that's because",
    "start": "218959",
    "end": "224329"
  },
  {
    "text": "I worked on the v8 team and I will keep the secret to ensure my successful consultancy career in the future",
    "start": "224329",
    "end": "231820"
  },
  {
    "text": "well let's backtrack a little bit and talk about benchmarks in general most",
    "start": "231820",
    "end": "238970"
  },
  {
    "start": "238000",
    "end": "384000"
  },
  {
    "text": "people talking about JavaScript performance or talking about benchmarking something in JavaScript",
    "start": "238970",
    "end": "246170"
  },
  {
    "text": "world they think about GS / com if you never saw this site well it's the best",
    "start": "246170",
    "end": "252440"
  },
  {
    "text": "for you but that's the place where people write benchmarks for JavaScript",
    "start": "252440",
    "end": "259039"
  },
  {
    "text": "so they can write some code snippets and then the the harness of Jesus birth runs them and plots the nice graphs like for",
    "start": "259039",
    "end": "266390"
  },
  {
    "text": "example here you can see that on Firefox there is a way so some in this",
    "start": "266390",
    "end": "271430"
  },
  {
    "text": "particular example somebody tried to find the best two to count the occurrences of the character in the string so suddenly",
    "start": "271430",
    "end": "279180"
  },
  {
    "text": "there is a way on Firefox that to count these occurrences that beats all other browsers and all other ways to do the",
    "start": "279180",
    "end": "287040"
  },
  {
    "text": "same thing on Firefox and this way is to split the string by this character and",
    "start": "287040",
    "end": "292680"
  },
  {
    "text": "then count the lengths of the array that is returned by the split and then subtract one and this provides like nine",
    "start": "292680",
    "end": "302580"
  },
  {
    "text": "and then eight zeros after nine so it's very fast which is really",
    "start": "302580",
    "end": "308160"
  },
  {
    "text": "counterintuitive and another way to do it which is relatively fast on all the browser's according to this chess perf",
    "start": "308160",
    "end": "314490"
  },
  {
    "text": "is to take the string and then walk it character by character but instead of",
    "start": "314490",
    "end": "320100"
  },
  {
    "text": "actually using the iteration variable you slice it again and again producing a",
    "start": "320100",
    "end": "325800"
  },
  {
    "text": "new string until the string is empty like how unless you come up with this",
    "start": "325800",
    "end": "331110"
  },
  {
    "text": "way of iterating the string I don't know this is not taught in any university in the world so if we were to approach this",
    "start": "331110",
    "end": "342210"
  },
  {
    "text": "stuff namely we would just go and switch all our loops over strings to this nice",
    "start": "342210",
    "end": "347220"
  },
  {
    "text": "new way but I'm saying this is not good and not good is a politically correct",
    "start": "347220",
    "end": "352290"
  },
  {
    "text": "way for saying so we should doubt everything that we see on GS / F",
    "start": "352290",
    "end": "359430"
  },
  {
    "text": "or in any benchmark you write the benchmark you get results first thing you do you doubt it and you don't apply",
    "start": "359430",
    "end": "366840"
  },
  {
    "text": "it directly before you understand what actually is happening there so let's",
    "start": "366840",
    "end": "372390"
  },
  {
    "text": "backtrack even more so this talk is back to actually go in backwards from",
    "start": "372390",
    "end": "377570"
  },
  {
    "text": "applications to the foundations instead of going from foundations to the applications so we're trying here to",
    "start": "377570",
    "end": "385590"
  },
  {
    "text": "measure the performance of a single operation well how you do it well you do it with this state of our benchmark driver here",
    "start": "385590",
    "end": "392490"
  },
  {
    "text": "you take the beginning of the benchmark and then you subdue the operation and then you subtract from the current time",
    "start": "392490",
    "end": "400050"
  },
  {
    "text": "the beginning of the benchmark right what if the operation you try to",
    "start": "400050",
    "end": "405270"
  },
  {
    "text": "benchmark is actually faster than the clock you have access to like for example I doubt that addition takes milliseconds",
    "start": "405270",
    "end": "412530"
  },
  {
    "text": "on the current hardware unless you are running on a very very very very old computer very old computer so this state",
    "start": "412530",
    "end": "422310"
  },
  {
    "text": "of art bug driver is an upgrade you try to perform the same operation multiple times and then you just divide",
    "start": "422310",
    "end": "429020"
  },
  {
    "text": "the time spent on performing n operations to get the cost of a single",
    "start": "429020",
    "end": "435390"
  },
  {
    "text": "operation this is basically mathematics from the first grade like you do operation n times then you divide by n",
    "start": "435390",
    "end": "441720"
  },
  {
    "text": "all magic happens and you get the cost of a single operations okay it's similar",
    "start": "441720",
    "end": "451320"
  },
  {
    "text": "to the keynote where there was a lot of mass right there is a lot of mass here so let's take a look at what Jesus perv",
    "start": "451320",
    "end": "458340"
  },
  {
    "text": "does to this nice string case here that we try to benchmark with a slice and stuff like that",
    "start": "458340",
    "end": "463710"
  },
  {
    "text": "well in fact it wraps it in the outer generated function like this so it jesper generates the code around to",
    "start": "463710",
    "end": "471810"
  },
  {
    "text": "their snippets you provide and compiles it dynamically using the function constructor and if you read at all",
    "start": "471810",
    "end": "480120"
  },
  {
    "text": "several times so maybe one time depending on how good you are or maybe zero times if you're super good you will",
    "start": "480120",
    "end": "487290"
  },
  {
    "text": "notice that there is a loop here that is performed multiple times repeating our",
    "start": "487290",
    "end": "492540"
  },
  {
    "text": "operation here and basically we never initialize the string which are slices",
    "start": "492540",
    "end": "498540"
  },
  {
    "text": "slices slice it until it becomes empty and then when I equals one we start the",
    "start": "498540",
    "end": "503880"
  },
  {
    "text": "loop with the empty string so all the operations after the first measurement",
    "start": "503880",
    "end": "509070"
  },
  {
    "text": "of the first operation I actually costing nothing because the string is empty already so let me repeat the",
    "start": "509070",
    "end": "515789"
  },
  {
    "text": "mathematics we expect it to repeat the same operation n times but what we actually did we repeat it at once and",
    "start": "515790",
    "end": "522390"
  },
  {
    "text": "the rest is costing as zero if you divide it by n well you get C divided by",
    "start": "522390",
    "end": "529080"
  },
  {
    "text": "N and C is very small and n is very large because J's perf repeats at",
    "start": "529080",
    "end": "534600"
  },
  {
    "text": "thousands of thousands of times and you get approximately zero that's why it looks so fast because we",
    "start": "534600",
    "end": "541230"
  },
  {
    "text": "misusing GS perv and the measurement is basically we're measuring empty loop and",
    "start": "541230",
    "end": "549260"
  },
  {
    "start": "549000",
    "end": "685000"
  },
  {
    "text": "the key lesson here to take away is that you need to ensure that operation when",
    "start": "549260",
    "end": "556080"
  },
  {
    "text": "you repeat it is doing the same amount of work every time okay so but let's dig",
    "start": "556080",
    "end": "564300"
  },
  {
    "text": "deeper so the problem is you are not alone when you are running your benchmarks there is somebody standing",
    "start": "564300",
    "end": "571110"
  },
  {
    "text": "behind your back and looking at this and this somebody is your browser essentially because the browser's are",
    "start": "571110",
    "end": "578010"
  },
  {
    "text": "very smart let's take a look at this example so here somebody tries to measure what's the fastest way to",
    "start": "578010",
    "end": "584100"
  },
  {
    "text": "convert an integer hidden inside the string so a string representation of an integer into an actual integer and it",
    "start": "584100",
    "end": "591690"
  },
  {
    "text": "turns out that on Firefox the fastest way to do that is double till the operator so you apply a tilde twice",
    "start": "591690",
    "end": "598790"
  },
  {
    "text": "tilde is a bitwise negation and then you get integer out and this is very fast",
    "start": "598790",
    "end": "604620"
  },
  {
    "text": "like blazingly fast time to use double tilde everywhere instead of parse int",
    "start": "604620",
    "end": "611570"
  },
  {
    "text": "well you probably already realize how this talk is going to go I will say something something something they say",
    "start": "611570",
    "end": "618000"
  },
  {
    "text": "no and that would be it our browsers and the machinery inside",
    "start": "618000",
    "end": "624420"
  },
  {
    "text": "them is very clever though are very clever because we have multiple browsers",
    "start": "624420",
    "end": "629450"
  },
  {
    "text": "and they optimize the code as it executes and that means our simple first",
    "start": "629450",
    "end": "637770"
  },
  {
    "text": "grade model does not work we need to go to the second grade of school and realize that there are multiple costs",
    "start": "637770",
    "end": "644880"
  },
  {
    "text": "involved so first your application starts the operation starts costing something and then as the program runs",
    "start": "644880",
    "end": "651450"
  },
  {
    "text": "the cost changes it actually can be more complicated that cost changes multiple",
    "start": "651450",
    "end": "656820"
  },
  {
    "text": "times as some browsers have multi-tiered cheats like Safari has interpreted that",
    "start": "656820",
    "end": "662730"
  },
  {
    "text": "in a compiler than another compiler and then another compiler for compilers in total well Counting the interpreter so",
    "start": "662730",
    "end": "670020"
  },
  {
    "text": "and they can switch back and forth multiple times so it's very complicated and when you can factor in all of this out the",
    "start": "670020",
    "end": "676000"
  },
  {
    "text": "mathematics really gets out of hand and you can no longer approach it with this first-rate mathematics at all and",
    "start": "676000",
    "end": "681880"
  },
  {
    "text": "you have to start thinking so you need to start thinking and try to be smarter",
    "start": "681880",
    "end": "687760"
  },
  {
    "start": "685000",
    "end": "794000"
  },
  {
    "text": "than JIT compiler now I will show you how to be smarter than sheet compiler",
    "start": "687760",
    "end": "693010"
  },
  {
    "text": "and to show you how to be smarter than JIT compiler I have to show you what should compiler actually does inside and",
    "start": "693010",
    "end": "700570"
  },
  {
    "text": "I will show it on this based on the source representation of the program compilers do not operate on the source",
    "start": "700570",
    "end": "706660"
  },
  {
    "text": "representation but showing you non source representation of the same examples would take me more time it's",
    "start": "706660",
    "end": "712120"
  },
  {
    "text": "basically would would require me teaching you a compiler course or at least parts of it so let's just use the",
    "start": "712120",
    "end": "719560"
  },
  {
    "text": "source so we tried to measure this double till the thing and we wrote the benchmark so this is a kind of the gist",
    "start": "719560",
    "end": "726760"
  },
  {
    "text": "or driver here and then there is insulation here and compilers they are",
    "start": "726760",
    "end": "732100"
  },
  {
    "text": "trying to do the same as you would do to your program so just think about yourself as you were in the second or",
    "start": "732100",
    "end": "739120"
  },
  {
    "text": "third grade when you were not that established JavaScript programmer but",
    "start": "739120",
    "end": "744220"
  },
  {
    "text": "you had already some basic reasoning and you know that if you have a constant here and you use it only once here well",
    "start": "744220",
    "end": "751750"
  },
  {
    "text": "you just put it there right it makes total sense and then you can just evaluate this expression step by step",
    "start": "751750",
    "end": "758290"
  },
  {
    "text": "and that's what the compiler does at compile a time at compile time basically",
    "start": "758290",
    "end": "763540"
  },
  {
    "text": "that's what compiler arrives to it just has the assignment of a constant to a variable and that's it there is no",
    "start": "763540",
    "end": "769300"
  },
  {
    "text": "actual tilde operator left anymore to execute there is no parsing happening so you're",
    "start": "769300",
    "end": "775450"
  },
  {
    "text": "not measuring doing anything this optimization is called constant propagation and most or all now all",
    "start": "775450",
    "end": "782590"
  },
  {
    "text": "cheats even Internet Explorer because Internet Explorer JIT is pretty good these days or it's called edge in it now",
    "start": "782590",
    "end": "788110"
  },
  {
    "text": "I'm outdated so everybody does this here",
    "start": "788110",
    "end": "794770"
  },
  {
    "start": "794000",
    "end": "893000"
  },
  {
    "text": "people can become very optimistic and say mmm I can trick the compiler because",
    "start": "794770",
    "end": "800290"
  },
  {
    "text": "I am smarter and I will make it known constant there and it will not be able",
    "start": "800290",
    "end": "805540"
  },
  {
    "text": "to do the constant propagation anymore well yeah it wouldn't be able to do the constant propagation anymore but it has",
    "start": "805540",
    "end": "812430"
  },
  {
    "text": "more tricks in its sleeve it will just look I is initialized one since outside the loop and it never changes inside the",
    "start": "812430",
    "end": "819480"
  },
  {
    "text": "loop that means there is out of apply until the operator does not change either and that means it will screw you",
    "start": "819480",
    "end": "829199"
  },
  {
    "text": "up it will go there and say this is loop invariant so this whole expression is",
    "start": "829199",
    "end": "834329"
  },
  {
    "text": "loop invariant and the loop invariants can be moved out of the loop and placed before the loop just like you would do",
    "start": "834329",
    "end": "840660"
  },
  {
    "text": "to your code manually and again you end up with just assignment of some variable",
    "start": "840660",
    "end": "845819"
  },
  {
    "text": "to a variable essentially and you are not measuring parsing time because it will happen only once outside of the",
    "start": "845819",
    "end": "851339"
  },
  {
    "text": "loop this is called loop invariant code motion again everybody does this without this you cannot really reach any good",
    "start": "851339",
    "end": "857160"
  },
  {
    "text": "performance in JavaScript compilers can go further they can look at this code",
    "start": "857160",
    "end": "863880"
  },
  {
    "text": "and say well it doesn't look like anybody is using this variable and if",
    "start": "863880",
    "end": "869339"
  },
  {
    "text": "nobody uses this variable nobody needs this computation and nobody needs this",
    "start": "869339",
    "end": "875069"
  },
  {
    "text": "computation that means nobody means I well hasta la vista baby and some",
    "start": "875069",
    "end": "882870"
  },
  {
    "text": "compilers would go as far as just saying well there is a loop that that's nothing but looping well also see you so this",
    "start": "882870",
    "end": "893880"
  },
  {
    "start": "893000",
    "end": "989000"
  },
  {
    "text": "code this is called dead code elimination not every compiler will go as far as",
    "start": "893880",
    "end": "900089"
  },
  {
    "text": "eliminating the loops or example v8 right now cannot do it but there are some new compiler infrastructure being",
    "start": "900089",
    "end": "906689"
  },
  {
    "text": "built in v8 as we speak or rather a sleep now because they in Europe but they will start building it when we",
    "start": "906689",
    "end": "912990"
  },
  {
    "text": "sleep so which will be able to eliminate the loops as well",
    "start": "912990",
    "end": "919339"
  },
  {
    "text": "remember this example with the super fast string splitting stuff for on",
    "start": "919470",
    "end": "925139"
  },
  {
    "text": "Firefox well it turns out that Firefox is able to understand that splitting a string by a string and taking the",
    "start": "925139",
    "end": "931980"
  },
  {
    "text": "lengths of that and doing some math on that is at that code because the result is never used and nothing has a side",
    "start": "931980",
    "end": "938100"
  },
  {
    "text": "effect here so it just disappears and that's why it's so fast and is it runs",
    "start": "938100",
    "end": "943350"
  },
  {
    "text": "with such incredible speed basically if you see anything on GSP running with an speed like six and then eight zeros that",
    "start": "943350",
    "end": "951779"
  },
  {
    "text": "means nothing is happening it's an empty loop and you have to reevaluate the way",
    "start": "951779",
    "end": "957209"
  },
  {
    "text": "you write the benchmark so what we established here is that optimizer it's",
    "start": "957209",
    "end": "963689"
  },
  {
    "text": "all the benchmarks for breakfast align your dinner basically all the day",
    "start": "963689",
    "end": "969300"
  },
  {
    "text": "long and then in the night as well you can try to develop benchmarks that are",
    "start": "969300",
    "end": "975769"
  },
  {
    "text": "impossible for the optimizer to eat because you are still smarter than machine right machines dumber than",
    "start": "975769",
    "end": "982379"
  },
  {
    "text": "humans were at least for now until Skynet comes and optimizes everything away so my biggest suggestion on my most",
    "start": "982379",
    "end": "992370"
  },
  {
    "start": "989000",
    "end": "1067000"
  },
  {
    "text": "common suggestion to people who ask me how to write benchmarks that are smarter than compiler is not to try to write",
    "start": "992370",
    "end": "998790"
  },
  {
    "text": "them just use the real code and benchmark your real applications in production or something like that",
    "start": "998790",
    "end": "1004879"
  },
  {
    "text": "use your users as the experimental hamsters so yeah back to the topic here",
    "start": "1004879",
    "end": "1012980"
  },
  {
    "text": "is three suggestions what you can do basically you have to avoid the most common optimizations by avoiding",
    "start": "1012980",
    "end": "1019459"
  },
  {
    "text": "constants avoided loop invariants and the voyage in the dead code but the most important thing you should verify",
    "start": "1019459",
    "end": "1024620"
  },
  {
    "text": "results when you actually do benchmarking because that already",
    "start": "1024620",
    "end": "1030020"
  },
  {
    "text": "usually helps to trick certain optimizations like dead code elimination because you're actually using values to",
    "start": "1030020",
    "end": "1036918"
  },
  {
    "text": "verify them so here's what we could do to this benchmark to avoid the problems",
    "start": "1036919",
    "end": "1044020"
  },
  {
    "text": "we could say initialize two strings non constants and then start just swapping",
    "start": "1044020",
    "end": "1051919"
  },
  {
    "text": "them in the loop to keep them non invariant in the loop and then you do",
    "start": "1051919",
    "end": "1058580"
  },
  {
    "text": "some check-in at the end and you throw an exception if it fails and this is not",
    "start": "1058580",
    "end": "1064640"
  },
  {
    "text": "bad but might not still be enough if your compiler is smart",
    "start": "1064640",
    "end": "1071120"
  },
  {
    "start": "1067000",
    "end": "1111000"
  },
  {
    "text": "for example compilers have this suite optimization where they say I see the loop what if I repeat the",
    "start": "1071120",
    "end": "1078320"
  },
  {
    "text": "body tries but do twice less iterations",
    "start": "1078320",
    "end": "1083380"
  },
  {
    "text": "and then you do one additional depending on whether it's even or what what",
    "start": "1083380",
    "end": "1089480"
  },
  {
    "text": "happens here is that if you swap twice within the body that means you did not swap anything right",
    "start": "1089480",
    "end": "1094790"
  },
  {
    "text": "swaps cancel each other and compiler propagates some values and the loop body",
    "start": "1094790",
    "end": "1099980"
  },
  {
    "text": "turns into that so base if you have two dead assignments to some variables which nobody uses and then you have an",
    "start": "1099980",
    "end": "1106160"
  },
  {
    "text": "assignment of a loop invariant and you are not measuring anything again this optimization is called loop unrolling",
    "start": "1106160",
    "end": "1112250"
  },
  {
    "start": "1111000",
    "end": "1127000"
  },
  {
    "text": "and nobody does it yet in JavaScript VMs as far as I know v8 for example does not",
    "start": "1112250",
    "end": "1118669"
  },
  {
    "text": "do it but I like inducing paranoia in people so they will become afraid of writing the benchmarks okay so here is",
    "start": "1118669",
    "end": "1129020"
  },
  {
    "start": "1127000",
    "end": "1232000"
  },
  {
    "text": "the clash between micro benchmarks and VMs and now we are switching to the second part of the talk where I am going",
    "start": "1129020",
    "end": "1136130"
  },
  {
    "text": "to show you so previously I showed how VMs find bugs in your benchmarks and",
    "start": "1136130",
    "end": "1141140"
  },
  {
    "text": "turn them into nothing now I will show you how benchmarks find bugs in the VMs",
    "start": "1141140",
    "end": "1146510"
  },
  {
    "text": "and if you don't realize that benchmarks can cause bugs in the vmsu will get",
    "start": "1146510",
    "end": "1151820"
  },
  {
    "text": "completely flabbergasted by the results here is somebody trying to measure a",
    "start": "1151820",
    "end": "1158480"
  },
  {
    "text": "strange thing I don't know how people come up with this ideas for Jesperson sleep it's hard to read but what's",
    "start": "1158480",
    "end": "1165530"
  },
  {
    "text": "happening there is somebody decided to measure whether it's faster to concatenate strings defined as literals",
    "start": "1165530",
    "end": "1172280"
  },
  {
    "text": "or concatenate strings saved in variable captured by a function and then you concatenate these two variables and it",
    "start": "1172280",
    "end": "1180679"
  },
  {
    "text": "turns out that on v8 so this g8 thing don't be scared by it on this dollar is",
    "start": "1180679",
    "end": "1185960"
  },
  {
    "text": "not a dollar so it's not money but it's a shell prompt so the DA thing has just",
    "start": "1185960",
    "end": "1191240"
  },
  {
    "text": "a standalone version of v8 which is running outside of the browser it's kind of like nodejs but without note just yes",
    "start": "1191240",
    "end": "1199870"
  },
  {
    "text": "so I wrote this standalone benchmark and I ran it and it turned out that the",
    "start": "1199870",
    "end": "1206710"
  },
  {
    "text": "inside so you defined the string literals outside of the function then you concatenate",
    "start": "1206710",
    "end": "1212839"
  },
  {
    "text": "variables inside the function is quite a",
    "start": "1212839",
    "end": "1217849"
  },
  {
    "text": "bit faster outside and the insight when you just compute a string literals is",
    "start": "1217849",
    "end": "1224089"
  },
  {
    "text": "slower which is completely counterintuitive because you just concatenate literals right it should be",
    "start": "1224089",
    "end": "1229159"
  },
  {
    "text": "faster should be constant folded so I managed to fight my instinct to move all",
    "start": "1229159",
    "end": "1236869"
  },
  {
    "start": "1232000",
    "end": "1247000"
  },
  {
    "text": "my strings out of functions and kept them down and I started looking what",
    "start": "1236869",
    "end": "1242089"
  },
  {
    "text": "happened with my patented blaze so I",
    "start": "1242089",
    "end": "1247749"
  },
  {
    "start": "1247000",
    "end": "1349000"
  },
  {
    "text": "expect that both variants should be completely dead called eliminated or at least constant folded so there is a tool",
    "start": "1247749",
    "end": "1256099"
  },
  {
    "text": "to look at the things that I wrote in dart advertisement so it's very",
    "start": "1256099",
    "end": "1261349"
  },
  {
    "text": "paradoxical so and if you click on this link and watch it right now only I can",
    "start": "1261349",
    "end": "1267409"
  },
  {
    "text": "click on this thing but if you just google this you will find it so it's a tool to see the intermediate",
    "start": "1267409",
    "end": "1273649"
  },
  {
    "text": "representation used by the optimizing compiler inside v8 and all the things",
    "start": "1273649",
    "end": "1279979"
  },
  {
    "text": "that I'm showing to you here available as links inside this tool so it just clean called click on it and it",
    "start": "1279979",
    "end": "1285919"
  },
  {
    "text": "downloads the stuff and it shows you it's completely browser-based it has no server side component stuff like that ok",
    "start": "1285919",
    "end": "1293119"
  },
  {
    "text": "let's let's take a look why outside is so much faster so this is the tool so",
    "start": "1293119",
    "end": "1299239"
  },
  {
    "text": "there is a URL there you can go on my site and find it deploy it there and the example is sitting here so I just dude",
    "start": "1299239",
    "end": "1306109"
  },
  {
    "text": "click and then you see this kind of nice",
    "start": "1306109",
    "end": "1311299"
  },
  {
    "text": "UI or well you can obviously see I do 0 web development but looks nice to me and",
    "start": "1311299",
    "end": "1319369"
  },
  {
    "text": "you see the stuff that is like that was optimized when the benchmark was running",
    "start": "1319369",
    "end": "1324739"
  },
  {
    "text": "on the site and if you click on like each of these entries they represent an",
    "start": "1324739",
    "end": "1331429"
  },
  {
    "text": "optimization that occurred during the run you click on the thing and then you",
    "start": "1331429",
    "end": "1337309"
  },
  {
    "text": "see a lot of strange stuff going on here like write all this Phi",
    "start": "1337309",
    "end": "1342350"
  },
  {
    "text": "that came from Asian grease and all kinds of stuff going on here it's a little bit hard to read so the",
    "start": "1342350",
    "end": "1349309"
  },
  {
    "start": "1349000",
    "end": "1447000"
  },
  {
    "text": "forest of the stuff that is actually happening with the code is hidden behind all these miniscule details of the",
    "start": "1349309",
    "end": "1356510"
  },
  {
    "text": "compiler implementation so there is a Olfa since our on I there which you can",
    "start": "1356510",
    "end": "1364490"
  },
  {
    "text": "click and it activates something called interesting mode this interesting mode",
    "start": "1364490",
    "end": "1370700"
  },
  {
    "text": "hides all the details which are irrelevant and it splices the source of your benchmark of the source of your",
    "start": "1370700",
    "end": "1376669"
  },
  {
    "text": "JavaScript function into the IR IR S stands for intermediate representation",
    "start": "1376669",
    "end": "1382309"
  },
  {
    "text": "or internal representation depends who you talk to and this source is right",
    "start": "1382309",
    "end": "1388760"
  },
  {
    "text": "next to the instructions produced from the from this source so for example here",
    "start": "1388760",
    "end": "1394220"
  },
  {
    "text": "you can see there is a loop variable decrement and this is an addition",
    "start": "1394220",
    "end": "1399460"
  },
  {
    "text": "operation there and then there is branch which is not a lunch and breakfast",
    "start": "1399460",
    "end": "1405530"
  },
  {
    "text": "combined together but go to instruction essentially so and what you can see here",
    "start": "1405530",
    "end": "1410780"
  },
  {
    "text": "is there is also this red line here which signifies the loop nesting so it's",
    "start": "1410780",
    "end": "1416179"
  },
  {
    "text": "very easy to find where the action is going on in this benchmark and if you",
    "start": "1416179",
    "end": "1422240"
  },
  {
    "text": "look and you remember that you try to benchmark concatenation then you just",
    "start": "1422240",
    "end": "1427370"
  },
  {
    "text": "cover that where the action is going on the concatenation is definitely not going on like there is no concatenation",
    "start": "1427370",
    "end": "1433309"
  },
  {
    "text": "inside there is some double addition going on here for a loop variable but no string concatenation so outside is fast",
    "start": "1433309",
    "end": "1440860"
  },
  {
    "text": "because there is nothing in there there is empty loop we are measuring them to loop it is fast because it's doing",
    "start": "1440860",
    "end": "1447830"
  },
  {
    "start": "1447000",
    "end": "1465000"
  },
  {
    "text": "nothing so the true phase v8 failed the constant fault the case when you had two",
    "start": "1447830",
    "end": "1454970"
  },
  {
    "text": "literals together which is counterintuitive it was a back which was fixed so all the backs that I show you here they were",
    "start": "1454970",
    "end": "1460400"
  },
  {
    "text": "fixed maybe so this one I for example fixed myself",
    "start": "1460400",
    "end": "1466970"
  },
  {
    "start": "1465000",
    "end": "1503000"
  },
  {
    "text": "before it even was fixed in the v8 it's pretty simple fix after you spend a couple of years and v8 but I'm not going",
    "start": "1466970",
    "end": "1473299"
  },
  {
    "text": "to go into details of what happening here basically it's you can see it's like 1 2 3 4 whatever 10 lines of code eight",
    "start": "1473299",
    "end": "1481549"
  },
  {
    "text": "lines of code even better and after fixing it inside and outside they become",
    "start": "1481549",
    "end": "1488149"
  },
  {
    "text": "of the same speed but we should remember everything is that is this fast is empty",
    "start": "1488149",
    "end": "1494149"
  },
  {
    "text": "empty both are now doing nothing so scratch this benchmark move to the",
    "start": "1494149",
    "end": "1500059"
  },
  {
    "text": "better one what we should think well how the way we should think about all of",
    "start": "1500059",
    "end": "1507289"
  },
  {
    "start": "1503000",
    "end": "1532000"
  },
  {
    "text": "this stuff is we should assume that the reasonable code we write is reasonably",
    "start": "1507289",
    "end": "1513589"
  },
  {
    "text": "fast they call it the presumption of performance like presumption of innocence so VM is always innocent until",
    "start": "1513589",
    "end": "1518929"
  },
  {
    "text": "proven guilty and you prove it guilty by writing reasonable benchmarks and trying",
    "start": "1518929",
    "end": "1525619"
  },
  {
    "text": "to understand what happens and happens inside you don't prove it guilty by just jumping to conclusions but people",
    "start": "1525619",
    "end": "1533149"
  },
  {
    "start": "1532000",
    "end": "1538000"
  },
  {
    "text": "actually jump to conclusions all the time so people think prototype chains",
    "start": "1533149",
    "end": "1539509"
  },
  {
    "start": "1538000",
    "end": "1599000"
  },
  {
    "text": "are slow and they write benchmarks to confirm it to confirm their own",
    "start": "1539509",
    "end": "1545539"
  },
  {
    "text": "assumptions about prototype chains so for example here we create a very deeply nested prototype chain with this awesome",
    "start": "1545539",
    "end": "1551929"
  },
  {
    "text": "object dot create thing and we leave some list tribute at the end for the people who like Lisp and then we write",
    "start": "1551929",
    "end": "1559369"
  },
  {
    "text": "this nice benchmark with for whatever even three loops because we have a lot of letters in the English alphabet and",
    "start": "1559369",
    "end": "1566919"
  },
  {
    "text": "then we hoist manually the property access and then we feed these two",
    "start": "1566919",
    "end": "1572779"
  },
  {
    "text": "versions together using our state of our benchmark driver here and we measure",
    "start": "1572779",
    "end": "1579080"
  },
  {
    "text": "first one which does look up on each iteration and then we measure the second one which caches it outside of the loop",
    "start": "1579080",
    "end": "1584119"
  },
  {
    "text": "and we see that doing many lookups is eight times slower than cashing it seems",
    "start": "1584119",
    "end": "1591769"
  },
  {
    "text": "reasonable right that means we confirmed what we thought the prototype chains are slow okay if we",
    "start": "1591769",
    "end": "1599989"
  },
  {
    "text": "assume that this is the truth let's make it harder what if I fetch the creation",
    "start": "1599989",
    "end": "1605570"
  },
  {
    "text": "of this prototype chain and I say instead of creating the data property use the getter",
    "start": "1605570",
    "end": "1611470"
  },
  {
    "text": "what do you think will happen will it become even slower by how much because",
    "start": "1612160",
    "end": "1618080"
  },
  {
    "text": "people know that accessors even slower than the normal properties well it turns",
    "start": "1618080",
    "end": "1623180"
  },
  {
    "text": "out it becomes 8 times faster like what happened here",
    "start": "1623180",
    "end": "1628750"
  },
  {
    "text": "voodoo magic happened so if we look",
    "start": "1628750",
    "end": "1633800"
  },
  {
    "text": "using the IR hider we will discover that the property access when it's defined as a getter is inlined",
    "start": "1633800",
    "end": "1639950"
  },
  {
    "text": "because Gator is just ultimately a function and we are using the constant",
    "start": "1639950",
    "end": "1645220"
  },
  {
    "text": "in the addition operation down there so",
    "start": "1645220",
    "end": "1651220"
  },
  {
    "text": "the actual access to the constant costs nothing and in the case of the property",
    "start": "1651220",
    "end": "1660080"
  },
  {
    "text": "the data property defined on the prototype we suddenly discover that there is this load named generic",
    "start": "1660080",
    "end": "1665120"
  },
  {
    "text": "operation which is actually a call and there is no constant 10 inside and it",
    "start": "1665120",
    "end": "1670940"
  },
  {
    "text": "was not hoisted out of the loop either because you can see this red line going on here well it turns out that we were",
    "start": "1670940",
    "end": "1678080"
  },
  {
    "start": "1676000",
    "end": "1706000"
  },
  {
    "text": "benchmarking on note a note is well known for being very outdated with v8",
    "start": "1678080",
    "end": "1684320"
  },
  {
    "text": "version and the person who wrote this benchmark he used the even older version",
    "start": "1684320",
    "end": "1690320"
  },
  {
    "text": "of note like from whatever four years ago and that version of v8 did not",
    "start": "1690320",
    "end": "1695360"
  },
  {
    "text": "support properly the data properties defined on prototypes it only supported immediate data properties but it had",
    "start": "1695360",
    "end": "1702170"
  },
  {
    "text": "support for getters defined on prototypes that's why the Gator was faster so if you try a new v8 then you",
    "start": "1702170",
    "end": "1708560"
  },
  {
    "start": "1706000",
    "end": "1715000"
  },
  {
    "text": "see they're roughly the same speed even without the Gator without the Gator trick so and the prototype chain",
    "start": "1708560",
    "end": "1716330"
  },
  {
    "text": "traversal as we saw God completely looked out of the loop there is no checks left inside for the prototype",
    "start": "1716330",
    "end": "1722780"
  },
  {
    "text": "check for prototype so the stability of the prototypes ok and now for something",
    "start": "1722780",
    "end": "1730460"
  },
  {
    "start": "1729000",
    "end": "1744000"
  },
  {
    "text": "completely different this light was there even before I saw the keynote so this is not plagiarizing of the keynote",
    "start": "1730460",
    "end": "1738100"
  },
  {
    "text": "it's a pleasure writing of the great British humor so",
    "start": "1738100",
    "end": "1743830"
  },
  {
    "text": "what if we run the same benchmark twice like do many lookups measure it twice",
    "start": "1743830",
    "end": "1750380"
  },
  {
    "start": "1744000",
    "end": "1761000"
  },
  {
    "text": "look up and cache measure it twice well it turns out the second time even on the new way we eat it suddenly slows down by",
    "start": "1750380",
    "end": "1757520"
  },
  {
    "text": "a factor of roughly three like Oh what",
    "start": "1757520",
    "end": "1762890"
  },
  {
    "start": "1761000",
    "end": "1792000"
  },
  {
    "text": "just happened here again some would've happened if we look in the IR hide right now I'm not going to go into details",
    "start": "1762890",
    "end": "1769190"
  },
  {
    "text": "because I still want to tell you some stuff before we all out of here the like",
    "start": "1769190",
    "end": "1775820"
  },
  {
    "text": "I told you that there can be multiple optimized versions of the same function as it runs and that's precisely what",
    "start": "1775820",
    "end": "1782180"
  },
  {
    "text": "happened here so first v8 came and optimized their function so if you remember what we were doing there we",
    "start": "1782180",
    "end": "1788540"
  },
  {
    "text": "were doing summation here so we have a counter and then we just add the",
    "start": "1788540",
    "end": "1793970"
  },
  {
    "start": "1792000",
    "end": "1951000"
  },
  {
    "text": "constant ten again and again to the counter so we ate first optimize the",
    "start": "1793970",
    "end": "1800960"
  },
  {
    "text": "code assuming that the counter fits into 31 bit integer which is called a small",
    "start": "1800960",
    "end": "1807290"
  },
  {
    "text": "integer and we toss my for short then this counter overflows and we D optimizes the code and then re optimizes",
    "start": "1807290",
    "end": "1813290"
  },
  {
    "text": "it using the insert a two for the counter that is still not enough because we are doing enough iterations to",
    "start": "1813290",
    "end": "1818540"
  },
  {
    "text": "overflow 32 bit range as well and then it D optimizes and produces the version",
    "start": "1818540",
    "end": "1826460"
  },
  {
    "text": "with a double code inside for this counter this D optimizes again because",
    "start": "1826460",
    "end": "1832370"
  },
  {
    "text": "we reached the end of the loop and v8d optimizes when it reaches the code path",
    "start": "1832370",
    "end": "1838730"
  },
  {
    "text": "that were never executed before this is so this is different kinds of the",
    "start": "1838730",
    "end": "1844700"
  },
  {
    "text": "optimizations they do I use color coding to signify like this is a so called",
    "start": "1844700",
    "end": "1850730"
  },
  {
    "text": "eager the optimization which happens when some assumption is violated in the code and this is so-called soft G",
    "start": "1850730",
    "end": "1856910"
  },
  {
    "text": "optimization which happens when you reach the code path that was never executed and then the version substa",
    "start": "1856910",
    "end": "1864140"
  },
  {
    "text": "boluses and never the optimizes again you can see it has no special color it's just black so",
    "start": "1864140",
    "end": "1872650"
  },
  {
    "text": "but unfortunately stabilized in a very strange state so now the counter is stored as a tagged variable so tact",
    "start": "1872650",
    "end": "1880420"
  },
  {
    "text": "is the v8 the JavaScript is a dynamically typed language so it has to",
    "start": "1880420",
    "end": "1886510"
  },
  {
    "text": "store things it can store things boxed like because you need that type assigned",
    "start": "1886510",
    "end": "1892570"
  },
  {
    "text": "to the value and this is called tagged in in v8 due to the implementation details which I'm not going to go into",
    "start": "1892570",
    "end": "1899350"
  },
  {
    "text": "here but to take the number you need to",
    "start": "1899350",
    "end": "1904660"
  },
  {
    "text": "allocate the box for it and that's precisely what happens here so you first untag the counter so you take the number",
    "start": "1904660",
    "end": "1912010"
  },
  {
    "text": "from inside the box converted to the machine number and then you do a different operation and then you Reeboks",
    "start": "1912010",
    "end": "1918940"
  },
  {
    "text": "it back into the box and each time you Reeboks it you allocate a new box so that obviously costs you that's why it",
    "start": "1918940",
    "end": "1924700"
  },
  {
    "text": "slowed down by this factor of three I could explain you why this happens but I",
    "start": "1924700",
    "end": "1930550"
  },
  {
    "text": "don't want to go into details because it's again the back and the like explained in box is not fun it's much",
    "start": "1930550",
    "end": "1937510"
  },
  {
    "text": "fun it's much more fun to show you the result of this box what they do to your code basically this plus operation at",
    "start": "1937510",
    "end": "1944470"
  },
  {
    "text": "the end of the loop was confusing the way we thought about the counter variable and you could walk around it by",
    "start": "1944470",
    "end": "1952960"
  },
  {
    "start": "1951000",
    "end": "1975000"
  },
  {
    "text": "adding two string for example to the counter it's a little bit of magic happening here the bug should be fixed",
    "start": "1952960",
    "end": "1959530"
  },
  {
    "text": "now as well so you don't need to do that to your additions but before it was",
    "start": "1959530",
    "end": "1964990"
  },
  {
    "text": "fixed you could have walk around by doing this so after you do this all of",
    "start": "1964990",
    "end": "1970780"
  },
  {
    "text": "them perform nice and fast and the second run is faster than the first one as we would expect so now let's do the",
    "start": "1970780",
    "end": "1976840"
  },
  {
    "start": "1975000",
    "end": "1982000"
  },
  {
    "text": "desert or not desert I forgot one s so",
    "start": "1976840",
    "end": "1982050"
  },
  {
    "start": "1982000",
    "end": "1990000"
  },
  {
    "text": "methyl colon function called that is a very popular topic of discussion in our",
    "start": "1982050",
    "end": "1987580"
  },
  {
    "text": "world so somebody wanted to benchmark what is faster this is taken from just",
    "start": "1987580",
    "end": "1994240"
  },
  {
    "start": "1990000",
    "end": "2030000"
  },
  {
    "text": "perfect game function invocation so there is this function that does some",
    "start": "1994240",
    "end": "1999610"
  },
  {
    "text": "crash computation on the string or the method invocation so he took or she took",
    "start": "1999610",
    "end": "2004950"
  },
  {
    "text": "the same function and applied it put it on the prototype of some empty object like it's a factory",
    "start": "2004950",
    "end": "2012840"
  },
  {
    "text": "adapter trampoline known for to us from Java patterns of design yeah and then",
    "start": "2012840",
    "end": "2020460"
  },
  {
    "text": "you just benchmark the function invocation or the method invocation and you would assume that they would perform",
    "start": "2020460",
    "end": "2027570"
  },
  {
    "text": "the same but it turns out that the method was completely optimized the way",
    "start": "2027570",
    "end": "2032809"
  },
  {
    "text": "but the function is doing like very sluggishly so somebody is calling me from los",
    "start": "2032809",
    "end": "2039809"
  },
  {
    "text": "angeles they hang up okay so I'm becoming very popular anyway so why",
    "start": "2039809",
    "end": "2047399"
  },
  {
    "text": "method call was faster so I'm going to show you the workaround for this bag but",
    "start": "2047399",
    "end": "2053819"
  },
  {
    "start": "2051000",
    "end": "2057000"
  },
  {
    "text": "never show it to anybody else so I just took the setup of the benchmark and I added this magical",
    "start": "2053819",
    "end": "2060089"
  },
  {
    "start": "2057000",
    "end": "2075000"
  },
  {
    "text": "concatenations in front of it speed your JavaScript with this one vir trick and",
    "start": "2060089",
    "end": "2067158"
  },
  {
    "text": "lo and behold it did indeed sped it up so again my patented blaze well it turns",
    "start": "2067159",
    "end": "2076500"
  },
  {
    "start": "2075000",
    "end": "2094000"
  },
  {
    "text": "out that before I did that there was no function benchmark",
    "start": "2076500",
    "end": "2082230"
  },
  {
    "text": "optimized at all for some reason we it was not optimizing it at all and of",
    "start": "2082230",
    "end": "2087750"
  },
  {
    "text": "course if you don't optimize it it will be slower than the completely optimized methods benchmark there is an",
    "start": "2087750",
    "end": "2095220"
  },
  {
    "text": "explanation here but it all boils doubles down together yeah that stuff and I am NOT going to go into details",
    "start": "2095220",
    "end": "2102020"
  },
  {
    "text": "but let's look at the code once I put this things in front of it and it was",
    "start": "2102020",
    "end": "2108119"
  },
  {
    "text": "optimized so there is this source pane in IR hider which you can use to look at the source line by line and for example",
    "start": "2108119",
    "end": "2116520"
  },
  {
    "text": "lines that produce no code they are grayed out and there is some special",
    "start": "2116520",
    "end": "2122280"
  },
  {
    "text": "things marking that the function call here was in line and so on so forth so",
    "start": "2122280",
    "end": "2127819"
  },
  {
    "text": "it turns out that after we forced it to optimize this thing here is completely",
    "start": "2127819",
    "end": "2137160"
  },
  {
    "text": "in line now and if you click on the inlining marker you will go and see the source of the",
    "start": "2137160",
    "end": "2143240"
  },
  {
    "text": "inline function which can be quite useful and there is this strange wavy background which is quite psychedelic",
    "start": "2143240",
    "end": "2148760"
  },
  {
    "text": "but I couldn't come up with a better way to show it this basically means this line produced the code but it was hoisted out of the",
    "start": "2148760",
    "end": "2155960"
  },
  {
    "text": "loop where it was originally that is an easy way to find the lines of code that were completely moved by the loop",
    "start": "2155960",
    "end": "2162590"
  },
  {
    "text": "invariant code motion so here the only thing that state and the benchmarking loop was this stupid comparison and",
    "start": "2162590",
    "end": "2168230"
  },
  {
    "text": "return undefined thing that's because the way it has historical language which prevents it from removing or moving",
    "start": "2168230",
    "end": "2177770"
  },
  {
    "text": "around branches so but everything else that you try to benchmark went away and",
    "start": "2177770",
    "end": "2183619"
  },
  {
    "text": "that's why it's so fast again so this is becoming really a repetitive thing to",
    "start": "2183619",
    "end": "2189440"
  },
  {
    "text": "say but we are not measuring anything here move on so can the function called be",
    "start": "2189440",
    "end": "2194840"
  },
  {
    "start": "2193000",
    "end": "2197000"
  },
  {
    "text": "faster than the method call well it turns out it can be so I said I work on",
    "start": "2194840",
    "end": "2200600"
  },
  {
    "start": "2197000",
    "end": "2269000"
  },
  {
    "text": "the dart team and we have a compiler to JavaScript and that's what the compiler",
    "start": "2200600",
    "end": "2207170"
  },
  {
    "text": "sometimes produces we have this concurrent so this is a loop-the-loop well this is wrong here there should be",
    "start": "2207170",
    "end": "2213230"
  },
  {
    "text": "no I but let's ignore this this is a loop iterating over the list and we",
    "start": "2213230",
    "end": "2218930"
  },
  {
    "text": "produce almost the JavaScript's loop but it has the concurrent modification check there which checks that if you modify",
    "start": "2218930",
    "end": "2226700"
  },
  {
    "text": "the length of the distance side the loop then it will throw an error inside and they came to me and said can you make",
    "start": "2226700",
    "end": "2234380"
  },
  {
    "text": "this code as fast as this code with no concurrent modification check on v8 and",
    "start": "2234380",
    "end": "2241490"
  },
  {
    "text": "I said is it slower and they said yes it is slower by 18% we would like this 18%",
    "start": "2241490",
    "end": "2247910"
  },
  {
    "text": "back and then I looked at it and I said well there is a solution you just need",
    "start": "2247910",
    "end": "2254240"
  },
  {
    "text": "to write it like that put zero comma and then the name of your function and then some stuff after it so and they like",
    "start": "2254240",
    "end": "2262430"
  },
  {
    "text": "looked at me and then called the ambulance so well internets in fact it",
    "start": "2262430",
    "end": "2270440"
  },
  {
    "text": "turns out that it actually makes it stur why this happens well let me repeat",
    "start": "2270440",
    "end": "2278460"
  },
  {
    "text": "what I did I just got 18% speed up by replacing method call with a function",
    "start": "2278460",
    "end": "2284400"
  },
  {
    "text": "call in the code that never executes because it does never throw there because this particular benchmark",
    "start": "2284400",
    "end": "2289650"
  },
  {
    "text": "iterates the list without changing its lengths I just got the speed up by",
    "start": "2289650",
    "end": "2294660"
  },
  {
    "text": "changing the code that never runs during the benchmark Wow I'm good",
    "start": "2294660",
    "end": "2300589"
  },
  {
    "text": "well it turns out that if you write the code like this this was never executed",
    "start": "2300589",
    "end": "2305999"
  },
  {
    "text": "during the benchmark run and we does not know where it will go if it will be executed because it does not know it has",
    "start": "2305999",
    "end": "2314039"
  },
  {
    "text": "to assume that it can have arbitrary side effects and it has to keep",
    "start": "2314039",
    "end": "2319109"
  },
  {
    "text": "reloading the lengths here and reloading the lengths here and stuff like that and that's why it is slower than not doing",
    "start": "2319109",
    "end": "2325769"
  },
  {
    "text": "the check because the rest of this has no side effects it's only this call that goes to some unknown place can",
    "start": "2325769",
    "end": "2332039"
  },
  {
    "text": "potentially have side effects so this code also was never executed but",
    "start": "2332039",
    "end": "2338609"
  },
  {
    "text": "property loads are treated specially in v8 if the property load was never executed v8 would say this pass can",
    "start": "2338609",
    "end": "2345299"
  },
  {
    "text": "never be taken this does not apply to calls for some reasons which are quite deep so deep that I never dived deep",
    "start": "2345299",
    "end": "2352469"
  },
  {
    "text": "enough not okay anyway so because we it assumes that that pass can never be",
    "start": "2352469",
    "end": "2358589"
  },
  {
    "text": "taken there are no side effects left in the loop and it can hoist all stuff away and optimize things like it will hoist",
    "start": "2358589",
    "end": "2366839"
  },
  {
    "text": "this length slowed and falls away this branch you can see it's now completely grayed out so what I would actually",
    "start": "2366839",
    "end": "2374759"
  },
  {
    "start": "2373000",
    "end": "2380000"
  },
  {
    "text": "recommend to not benchmark things and if you need to benchmark things talk to the VM people so thank you very much",
    "start": "2374759",
    "end": "2380880"
  },
  {
    "text": "well not wait wait there was another example in the very beginning of the talk so remember this guy here which I",
    "start": "2380880",
    "end": "2387059"
  },
  {
    "text": "sped up by the comment well it turns out that if you look at it in the IR hider you have this repetitively the",
    "start": "2387059",
    "end": "2392969"
  },
  {
    "text": "optimizing gate lock function so this function is called get block and completely goes of the rails and this is where the optimization",
    "start": "2392969",
    "end": "2399150"
  },
  {
    "text": "happens for Hydra shows you everything and repetitive the optimization is the case where you call me from Los Angeles",
    "start": "2399150",
    "end": "2404759"
  },
  {
    "text": "and ask to file a back in V it so it always a back in v8 if we talk",
    "start": "2404759",
    "end": "2410460"
  },
  {
    "start": "2408000",
    "end": "2454000"
  },
  {
    "text": "to Mises in again and again and again and never stabilizes so again yeah they got the explanation of what happened",
    "start": "2410460",
    "end": "2416850"
  },
  {
    "text": "there there is a more sane walk around than the comment I just wanted to make it funny because I know how it works the",
    "start": "2416850",
    "end": "2425190"
  },
  {
    "text": "same workaround is just to truncate this value load here from the UN 32 array immediately to in 32",
    "start": "2425190",
    "end": "2432180"
  },
  {
    "text": "but this back was fixed I fixed it and so you basically should never assume",
    "start": "2432180",
    "end": "2438540"
  },
  {
    "text": "that something is slow if it is slow and stuff like that all the things and I said talk to the M people like me if you",
    "start": "2438540",
    "end": "2445290"
  },
  {
    "text": "need my help and this is a real lens I thank you very much",
    "start": "2445290",
    "end": "2451670"
  }
]