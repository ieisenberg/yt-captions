[
  {
    "start": "0",
    "end": "257000"
  },
  {
    "text": "this is functional programming for pragmatists i'm richard feldman so this is a picture of two tools that i",
    "start": "13679",
    "end": "19520"
  },
  {
    "text": "own i have both of them but i don't use them about as much as often as one",
    "start": "19520",
    "end": "24720"
  },
  {
    "text": "another in practice what i find is that about 95 of the time when i'm doing a project around the house just the types",
    "start": "24720",
    "end": "30080"
  },
  {
    "text": "of projects i do i reach for the screwdriver rather than the drill the drill even though the drill has like a screw bit i can use both of them for the",
    "start": "30080",
    "end": "36000"
  },
  {
    "text": "same thing but only five percent of the time do i find myself about um reaching for the power tool",
    "start": "36000",
    "end": "42000"
  },
  {
    "text": "so why is that that's a reasonable question i asked myself this and i mean really the answer is it's sort of a revealed",
    "start": "42000",
    "end": "47840"
  },
  {
    "text": "preference it's an automatic thing i don't really think about it i don't sit down and be like what are the trade-offs between these two i just i'm like i don't know i want to tighten the screw i",
    "start": "47840",
    "end": "53760"
  },
  {
    "text": "pick up a screwdriver and go tighten it um but i sort of tried to ask myself this question and try to think of specifically why is it like what is it",
    "start": "53760",
    "end": "60480"
  },
  {
    "text": "objectively about the screwdriver that makes me in practice pick it so often um so i came up with a couple of sort of",
    "start": "60480",
    "end": "66640"
  },
  {
    "text": "objective observable measurable things about the screwdriver uh one is that it weighs less than the power drill",
    "start": "66640",
    "end": "72560"
  },
  {
    "text": "another is that it has no battery like i don't have to worry did i remember to charge my screwdriver no no it works you know um and i've had that happen with",
    "start": "72560",
    "end": "78400"
  },
  {
    "text": "the drill i picked it up and uh whoops got to go charge it and then i can come back and do my project um it's also smaller it's like easier to",
    "start": "78400",
    "end": "84720"
  },
  {
    "text": "fit into certain places these are sort of objective things that i can just truthfully say about the screwdriver and they're sort of advantageous for the",
    "start": "84720",
    "end": "90720"
  },
  {
    "text": "types of projects i do at home but there's a reason that i actually own the drill as well which are you know for example it has more torque like",
    "start": "90720",
    "end": "97680"
  },
  {
    "text": "sometimes i'm screwing a wood screw into a piece of wood and that's like a lot of effort to do by hand whereas the fact",
    "start": "97680",
    "end": "103840"
  },
  {
    "text": "that the power drill has adjustable torque i can just crank it up and then boom no problem it also has higher rpms",
    "start": "103840",
    "end": "109600"
  },
  {
    "text": "so if i'm doing a bunch of screws the fact that each one of them goes in faster is advantageous um also the fact",
    "start": "109600",
    "end": "115040"
  },
  {
    "text": "that there's just like less twisting it's sort of less exertion because i don't have to apply as much force from my arm i can just you know squeeze the",
    "start": "115040",
    "end": "120960"
  },
  {
    "text": "trigger and that's it but the thing is usually i'm doing projects like this like i'm just like okay i've got a little screw here that",
    "start": "120960",
    "end": "127280"
  },
  {
    "text": "needs a little bit of adjusting stick the screwdriver in twist it no problem so i i could use the power drill for",
    "start": "127280",
    "end": "132879"
  },
  {
    "text": "this but it's kind of awkward um it's just not as nice of an experience for me um sometimes it's kind of like the size",
    "start": "132879",
    "end": "138640"
  },
  {
    "text": "gets in the way i don't really want a lot of torque i'm more worried about stripping this screw than i am about you know having to exert less force on it",
    "start": "138640",
    "end": "144720"
  },
  {
    "text": "it's just the trade-offs just don't make sense for the types of projects that i do so i spend you know 95 of the time uh",
    "start": "144720",
    "end": "151200"
  },
  {
    "text": "reaching for the screwdriver even though i have both my toolbox similarly i find myself in my career",
    "start": "151200",
    "end": "156560"
  },
  {
    "text": "like at work over the past decade like 95 of the time i find myself reaching for functional programming over",
    "start": "156560",
    "end": "162239"
  },
  {
    "text": "imperative programming even though i sort of have both my toolbox decade before that i did exclusively imperative programming so i know how to do both but",
    "start": "162239",
    "end": "168800"
  },
  {
    "text": "at work at least in practice i just overwhelmingly find myself with the types of projects i do as a web developer reaching for functional",
    "start": "168800",
    "end": "175440"
  },
  {
    "text": "programming and again i might ask myself why i mean yes again it's sort of a an",
    "start": "175440",
    "end": "180879"
  },
  {
    "text": "ingrained thing i'm just like i don't know that just seems like it'll be nicer but i want to try and you know get more specific about that because i sort of",
    "start": "180879",
    "end": "186560"
  },
  {
    "text": "self-identify as a pragmatist um i think about things you know objectively i want to try and be more specific about why",
    "start": "186560",
    "end": "192159"
  },
  {
    "text": "i'm choosing functional programming because i'll be honest like usually when i hear people explain like hey here's why functional programming is awesome",
    "start": "192159",
    "end": "197920"
  },
  {
    "text": "here's why you should check it out it's a lot of like pretty subjective debatable things like people say like oh it's simpler you know or or it's more",
    "start": "197920",
    "end": "204640"
  },
  {
    "text": "elegant or like it lets me there's something something reason about something something um these are all sort of in the eye of the",
    "start": "204640",
    "end": "210480"
  },
  {
    "text": "beholder like depending on who you ask one thing is simpler than another people can make arguments about which way um",
    "start": "210480",
    "end": "215680"
  },
  {
    "text": "something is more elegant than another you know it lets you reason about things these are not things i can measure i can't get out my reason about amateur",
    "start": "215680",
    "end": "222000"
  },
  {
    "text": "and say like oh yes this language is more reasonably than the other one um whereas these things that i said about",
    "start": "222000",
    "end": "227440"
  },
  {
    "text": "the screwdriver yeah i can put it on a scale and say it weighs less than this one i can observe that it has no battery i can like measure it and see that it's",
    "start": "227440",
    "end": "233280"
  },
  {
    "text": "smaller than the other one has less volume so today i want to talk about functional",
    "start": "233280",
    "end": "238799"
  },
  {
    "text": "programming using specific objective trade-offs not my feelings about it not about you",
    "start": "238799",
    "end": "244319"
  },
  {
    "text": "know what i perceive to be true about it but just things where it's like we can all agree this is not up for debate this is just a fact about using this",
    "start": "244319",
    "end": "250799"
  },
  {
    "text": "particular technique so that's what i mean by functional programming for pragmatists let's dive into it",
    "start": "250799",
    "end": "256639"
  },
  {
    "text": "so the outline of the talk we're going to talk about first sort of the scope of like what's in scope for this talk and what's out of scope",
    "start": "256639",
    "end": "261759"
  },
  {
    "start": "257000",
    "end": "271000"
  },
  {
    "text": "i'm going to talk about performance implications of functional programming again getting specific specific things about development and finally talking",
    "start": "261759",
    "end": "268560"
  },
  {
    "text": "about sort of the ecosystem implications of all this so let's start with scope so in order to find the scope of this",
    "start": "268560",
    "end": "274400"
  },
  {
    "start": "271000",
    "end": "392000"
  },
  {
    "text": "talk i have to answer the usual question which is what is functional programming and depending on who you ask you might get a different answer so let me just",
    "start": "274400",
    "end": "280000"
  },
  {
    "text": "start by giving you my answer so to me functional programming style means that we're going to avoid mutation",
    "start": "280000",
    "end": "286639"
  },
  {
    "text": "and we're going to avoid side effects i'll define what i mean by side effects later so in this sense the functional",
    "start": "286639",
    "end": "292400"
  },
  {
    "text": "programming style can be done in any language that supports procedures you don't have to use a functional programming language you can do it this",
    "start": "292400",
    "end": "298000"
  },
  {
    "text": "style in lots of languages functional programming languages i would say is a language that primarily",
    "start": "298000",
    "end": "304560"
  },
  {
    "text": "encourages the use of the functional style as sort of the primary way of doing things it's not just supported but it's the main way that's what the",
    "start": "304560",
    "end": "310400"
  },
  {
    "text": "standard library encourages so the ecosystem encourages that's just the way things are done in that language",
    "start": "310400",
    "end": "315520"
  },
  {
    "text": "um it may still support mutation and side effects but those are sort of off to the side and it's sort of discouraged to use them you're supposed to only",
    "start": "315520",
    "end": "321199"
  },
  {
    "text": "reach for them like as a last resort now a pure functional programming language on the other hand is a language",
    "start": "321199",
    "end": "327280"
  },
  {
    "text": "that basically supports only pure functions and to be fair most of these pure functional programming language have some sort of",
    "start": "327280",
    "end": "333199"
  },
  {
    "text": "escape patch which is beyond discouraged it's like if you use this and it wasn't a complete emergency people like what",
    "start": "333199",
    "end": "339039"
  },
  {
    "text": "are you doing so there may be like ffi like you know haskell support cfi but haskell most",
    "start": "339039",
    "end": "345120"
  },
  {
    "text": "people would agree is a pure functional programming language because by default every single function in that language is a pure",
    "start": "345120",
    "end": "351199"
  },
  {
    "text": "function and again i'll define what i mean by pure function momentarily okay so in scope for this talk i'm going",
    "start": "351199",
    "end": "356880"
  },
  {
    "text": "to focus on things like immutability pure functions and functional languages i'm not going to talk about things that",
    "start": "356880",
    "end": "363039"
  },
  {
    "text": "you often find with functional programming languages but which aren't sort of unique to them that are not exclusively found in functional",
    "start": "363039",
    "end": "368400"
  },
  {
    "text": "programming languages such as pattern matching polymorphism type checking now granted you can find immutability in",
    "start": "368400",
    "end": "374080"
  },
  {
    "text": "other languages than functional programming languages and it's not sort of like that immutability is tied to",
    "start": "374080",
    "end": "379360"
  },
  {
    "text": "functional programming but rather that it's sort of like these are the bare minimum requirements so when i'm talking about functional programming i'm just",
    "start": "379360",
    "end": "384960"
  },
  {
    "text": "going to talk about these things immutability pure functions and actual functional languages okay so that's the scope of the talk",
    "start": "384960",
    "end": "391440"
  },
  {
    "text": "let's dive into performance so when we talk about performance um we're going to sort of",
    "start": "391440",
    "end": "396880"
  },
  {
    "start": "392000",
    "end": "411000"
  },
  {
    "text": "break this down to a couple of different categories so one is caching another is pre-computing now there's parallelizing",
    "start": "396880",
    "end": "402160"
  },
  {
    "text": "these are areas where functional programming has advantages and i'm going to also talk about some of the disadvantages some of the drawbacks of",
    "start": "402160",
    "end": "407360"
  },
  {
    "text": "using a functional style when it comes to performance okay so i mentioned earlier this this",
    "start": "407360",
    "end": "412479"
  },
  {
    "start": "411000",
    "end": "535000"
  },
  {
    "text": "term pure function let me define that real quick so a pure function is a function where when you give it the same arguments it's definitely going to give",
    "start": "412479",
    "end": "419280"
  },
  {
    "text": "you the same return value no matter what when i say no matter what i mean basically like unless it like runs out",
    "start": "419280",
    "end": "424639"
  },
  {
    "text": "of memory or something like that i mean these are still computers um there are sort of like exceptions there but assuming nothing sort of catastrophic",
    "start": "424639",
    "end": "431039"
  },
  {
    "text": "catastrophically unusual happens no gamma rays you give it the same arguments it's going to give you the same return value",
    "start": "431039",
    "end": "436639"
  },
  {
    "text": "guaranteed also if your function has no side effects so when you call it when you run that function it's not going to modify",
    "start": "436639",
    "end": "443360"
  },
  {
    "text": "the outside world all it's going to do is return that value and the only thing that's going to look at are the arguments or maybe like some global",
    "start": "443360",
    "end": "449440"
  },
  {
    "text": "immutable constants so pure functions are basically lookup tables um shout out to chris jenkins who",
    "start": "449440",
    "end": "455440"
  },
  {
    "text": "gave a talk earlier today um he's the one i heard this from but basically this is i think a great way to think about do you have a pure",
    "start": "455440",
    "end": "461840"
  },
  {
    "text": "function or not so to give an example of this let's say i have a function called string length and you give it a string and it returns the length of that string",
    "start": "461840",
    "end": "468080"
  },
  {
    "text": "so here's a little like table of uh we could sort of map if i give it call with this argument like the string high it",
    "start": "468080",
    "end": "473599"
  },
  {
    "text": "returns two because there's two letters in it if i say go to returns four i say copenhagen returns 10.",
    "start": "473599",
    "end": "479520"
  },
  {
    "text": "so i've written this out like a table and if i wanted to i could actually replace the string length function with an actual lookup table like i could just",
    "start": "479520",
    "end": "486240"
  },
  {
    "text": "say the key is this string and then the value associated with this key is this number and these would basically be equivalent",
    "start": "486240",
    "end": "492160"
  },
  {
    "text": "ways to solve the same problem i could just say like rather than calling a function i could be like oh string length is a table and i just go look up",
    "start": "492160",
    "end": "497440"
  },
  {
    "text": "at this particular key what's the value and those will do the same thing so this is the way the way to tell if a",
    "start": "497440",
    "end": "504000"
  },
  {
    "text": "function is pure could you replace the entire body of the function with one big lookup table access",
    "start": "504000",
    "end": "509840"
  },
  {
    "text": "if that sounds fine to you great you've got a pure function if that sounds like wait well no that wouldn't wouldn't do",
    "start": "509840",
    "end": "515279"
  },
  {
    "text": "this thing that i it's not a pure function if there's any if there's any well not a pure function it's got to be",
    "start": "515279",
    "end": "520719"
  },
  {
    "text": "you could replace the entire body of that function with a lookup table maybe a gigantically huge lookup table ridiculously huge lookup table that you",
    "start": "520719",
    "end": "526959"
  },
  {
    "text": "would never actually write in practice that's why we have functions but it's got to be replaceable by a lookup table",
    "start": "526959",
    "end": "532240"
  },
  {
    "text": "if you want it to be a pure function that's how you can tell okay this has a very important implication",
    "start": "532240",
    "end": "537600"
  },
  {
    "start": "535000",
    "end": "657000"
  },
  {
    "text": "for caching because one of the things we do in caching is we use lookup tables so memoization is a term for when you",
    "start": "537600",
    "end": "543519"
  },
  {
    "text": "want to avoid running or re-running a costly function over and over and the way that you do it is you basically say",
    "start": "543519",
    "end": "549360"
  },
  {
    "text": "whenever you're going to call this function after it's done returning store its return value in a lookup table that is",
    "start": "549360",
    "end": "554640"
  },
  {
    "text": "keyed on the arguments that you gave it and then basically you can say okay well the next time i would call that function",
    "start": "554640",
    "end": "559839"
  },
  {
    "text": "i can look and see if i have those arguments in that lookup table and if i do well i don't need to bother calling the function i'll just return return the",
    "start": "559839",
    "end": "566000"
  },
  {
    "text": "stored answer and now i can save redoing all that costly work that was needed to compute that answer",
    "start": "566000",
    "end": "571279"
  },
  {
    "text": "this is a caching strategy peer functions are safely memoizable by definition as we said it a second ago",
    "start": "571279",
    "end": "578240"
  },
  {
    "text": "they're basically lookup tables already semantically um the only difference is sort of like what they do at runtime and",
    "start": "578240",
    "end": "583279"
  },
  {
    "text": "so if you have a really complicated function where like making out you know the entire lookup table for that would take like gigabytes of memory makes more",
    "start": "583279",
    "end": "589519"
  },
  {
    "text": "sense to use a pure function but because it is a pure function you know for sure that it's memoizable so if it is really",
    "start": "589519",
    "end": "595760"
  },
  {
    "text": "computationally expensive to compute that answer potentially not a problem if you if you're worried about running",
    "start": "595760",
    "end": "600880"
  },
  {
    "text": "it multiple times and having to pay that cost over and over you can memoize it if it's a pure function now a problem you can run into when",
    "start": "600880",
    "end": "607360"
  },
  {
    "text": "doing this in like an imperative language is you can say well this is a pure function and it's pretty complicated but maybe at some point",
    "start": "607360",
    "end": "614079"
  },
  {
    "text": "along the line it calls a function that at the time you wrote it was pure but then later on that other function stops",
    "start": "614079",
    "end": "619839"
  },
  {
    "text": "being pure it starts picking up a side effect or something now you no longer have a pure function it's no longer safely memoizable by definition",
    "start": "619839",
    "end": "627200"
  },
  {
    "text": "memorizing it might still work sometimes but other times it might not depending on what the side effect is and depending on like how important it is um",
    "start": "627200",
    "end": "634320"
  },
  {
    "text": "you kind of don't know so this is something to watch out for is and this is something we're going to talk about a couple times in the talk is like if",
    "start": "634320",
    "end": "639519"
  },
  {
    "text": "you're relying on the guarantees of pure functions you got to make sure that they're staying pure even as the program",
    "start": "639519",
    "end": "644880"
  },
  {
    "text": "changes over time um of course this is one of the draws of pure functional languages is that you",
    "start": "644880",
    "end": "650079"
  },
  {
    "text": "can rely on this always you don't really have to worry about like oh is it going to secretly stop being pure nope nope it's pure that's that's all we're",
    "start": "650079",
    "end": "656000"
  },
  {
    "text": "working with here um precomputing is sort of like a you can think of it as like an even more aggressive uh version of this",
    "start": "656000",
    "end": "662320"
  },
  {
    "start": "657000",
    "end": "734000"
  },
  {
    "text": "optimization um where instead of doing it on repeat calls of the function we can actually do it ahead of time anytime",
    "start": "662320",
    "end": "668160"
  },
  {
    "text": "we're calling a pure function where all the arguments are known at build time like they're all constants or they're all function pure function calls on",
    "start": "668160",
    "end": "674320"
  },
  {
    "text": "constants we can just pre-compute that entire value so an example of this is like if i call string length on the the",
    "start": "674320",
    "end": "679760"
  },
  {
    "text": "static string copenhagen we don't need to run the program to tell the answer we can just do this at build time like an optimizing compiler can",
    "start": "679760",
    "end": "686079"
  },
  {
    "text": "just turn this you know into the answer by using techniques like constant propagation inlining constant folding",
    "start": "686079",
    "end": "692240"
  },
  {
    "text": "and just be like the answer here is 10 and then that's just what gets compiled into your program this is a very simple function but you",
    "start": "692240",
    "end": "698240"
  },
  {
    "text": "can imagine if you have a really complicated set of functions then it's potentially computationally expensive in some cases when you're calling those",
    "start": "698240",
    "end": "704079"
  },
  {
    "text": "with static constants it's pretty nice to be able to inline those down into just you know the actual answer and not",
    "start": "704079",
    "end": "709200"
  },
  {
    "text": "even have to run it once and memoize it now of course if you're doing this based on a variable it all kind of depends on",
    "start": "709200",
    "end": "715680"
  },
  {
    "text": "uh is that variable resolvable in the same way at compile time like if conference name here is a function",
    "start": "715680",
    "end": "721440"
  },
  {
    "text": "argument yeah maybe that's not going to work unless that function's only getting called you know with with static arguments um but you know this is an",
    "start": "721440",
    "end": "728079"
  },
  {
    "text": "optimization that some of the time can happen and when it can happen it's basically a really nice performance optimization",
    "start": "728079",
    "end": "734240"
  },
  {
    "start": "734000",
    "end": "900000"
  },
  {
    "text": "okay but really i mean the thing that people talk about when they talk about functional programming and performance is parallelization",
    "start": "734240",
    "end": "740639"
  },
  {
    "text": "so if i call this function users.map passing it format phone number so this is a higher order function that is a",
    "start": "740639",
    "end": "746240"
  },
  {
    "text": "function that takes another function as an argument what the map function will do is it will iterate through all these users so let's",
    "start": "746240",
    "end": "752720"
  },
  {
    "text": "say we've got user12345 and say it's a really long list of users and what it's going to do is it's going",
    "start": "752720",
    "end": "758320"
  },
  {
    "text": "to create a new list and the way it's going to create that new list is it's going to look at each individual element",
    "start": "758320",
    "end": "763360"
  },
  {
    "text": "in this list call that format phone number function on it and then that's going to tell it",
    "start": "763360",
    "end": "768639"
  },
  {
    "text": "how to get back the new user that's going to be in the resulting list so user one gets format phone number called",
    "start": "768639",
    "end": "774000"
  },
  {
    "text": "on it that returns new user one user two new user two etc etc so one of the nice things about",
    "start": "774000",
    "end": "780240"
  },
  {
    "text": "something like this is that about a map function like this is if you've got a super long list you might be running it and finding out this is kind of slow",
    "start": "780240",
    "end": "786800"
  },
  {
    "text": "it's kind of too slow how can we speed this thing up and make it run faster and a common answer is we can parallelize it",
    "start": "786800",
    "end": "792639"
  },
  {
    "text": "so when when you run this in parallel it's basically saying i'm going to take this function that you gave me and i'm going to run it on core number one on",
    "start": "792639",
    "end": "798720"
  },
  {
    "text": "user one core number two on user two and core number three on user three so you can do you know up to like eight sixteen",
    "start": "798720",
    "end": "804240"
  },
  {
    "text": "you know maybe even more of these users at a time by using uh all the cpu scores that you've got in your machine",
    "start": "804240",
    "end": "810240"
  },
  {
    "text": "now whether or not this is safe to do uh once again you get a sort of different answer depending on whether or not this",
    "start": "810240",
    "end": "816880"
  },
  {
    "text": "is a pure function so parallel function calls may be run in any order like the cpus might potentially do this like this one's like",
    "start": "816880",
    "end": "822800"
  },
  {
    "text": "oh i'm busy hang on no i'm free i can i can run one over here they can run in potentially any order",
    "start": "822800",
    "end": "827920"
  },
  {
    "text": "and one of the nice things about pure functions that they are sort of thread safe by definition like the definition of a pure function is you know",
    "start": "827920",
    "end": "834480"
  },
  {
    "text": "means that it's only looking at its its arguments and then it's only going to return a value which means that it",
    "start": "834480",
    "end": "839519"
  },
  {
    "text": "doesn't really care what other cpus are doing or in what order they're run it's always going to give you the the same",
    "start": "839519",
    "end": "844560"
  },
  {
    "text": "answer completely independent of what else is going on in the system so this means that sort of like in a",
    "start": "844560",
    "end": "849600"
  },
  {
    "text": "pure functional programming language thread safety is just not a concern if you want to replace map with map",
    "start": "849600",
    "end": "854880"
  },
  {
    "text": "parallel you just can there's nothing to think about it's just like yes i can do that does that seem like a good idea okay well i'll just do it",
    "start": "854880",
    "end": "862480"
  },
  {
    "text": "similarly data races which is basically where you have multiple threads trying to mutate the same thing at the same time and potentially causing",
    "start": "862480",
    "end": "869040"
  },
  {
    "text": "certain really nasty race conditions those can only happen when mutation happens so this is again not something",
    "start": "869040",
    "end": "874240"
  },
  {
    "text": "that is exclusive to functional programming like you can write a pure function you know in any programming language like i said earlier um and data",
    "start": "874240",
    "end": "880639"
  },
  {
    "text": "races can be ruled out in other ways than just using viewer functions like for example rust famously has a borrow checker that eliminates data races by",
    "start": "880639",
    "end": "887040"
  },
  {
    "text": "giving you compile errors if you would be using mutation in a certain way but the point is that this is one of the",
    "start": "887040",
    "end": "892320"
  },
  {
    "text": "nice things about functional programming is that there's just nothing to think about here you don't have to use a particular language feature you don't",
    "start": "892320",
    "end": "897360"
  },
  {
    "text": "have to think about thread safety it just it just works okay so those are some nice things about performance in terms of functional",
    "start": "897360",
    "end": "903519"
  },
  {
    "start": "900000",
    "end": "1142000"
  },
  {
    "text": "programming but there are some drawbacks too the most obvious drawback is just that usually most algorithms in-place",
    "start": "903519",
    "end": "909839"
  },
  {
    "text": "mutation is usually the fastest way to do the thing the alternative to that is like if you want you know we use that list.map",
    "start": "909839",
    "end": "915199"
  },
  {
    "text": "earlier um example earlier when you're mapping over a list you're creating a whole new list by default it's not doing",
    "start": "915199",
    "end": "920639"
  },
  {
    "text": "in-place mutation and in-place mutation is usually a faster way to do something if that works for the algorithm that you're using",
    "start": "920639",
    "end": "926560"
  },
  {
    "text": "um also managed effects can have non-zero overhead so this is another new term let me explain what i mean briefly",
    "start": "926560",
    "end": "932320"
  },
  {
    "text": "by managed effects and how they're different from side effects so side effects an example of side effects is uh",
    "start": "932320",
    "end": "937759"
  },
  {
    "text": "promises in java sorry javascript so managed effects would be sort of an",
    "start": "937759",
    "end": "942959"
  },
  {
    "text": "alternative way to do the same thing as promises so here's some sample javascript code saying promise one equals fetch and then",
    "start": "942959",
    "end": "949600"
  },
  {
    "text": "giving it a url so this is the http fetch api it's basically going to run an http request that url and then give you",
    "start": "949600",
    "end": "955440"
  },
  {
    "text": "back whatever um the uh whatever comes back from that server promise2 is again calling fetch on a",
    "start": "955440",
    "end": "961519"
  },
  {
    "text": "different url and then it's calling.then and passing in some callback so both of these are examples of fetch",
    "start": "961519",
    "end": "967360"
  },
  {
    "text": "and then also fetch.then are returning a promise which is basically javascript's asynchronous abstraction so this is",
    "start": "967360",
    "end": "973759"
  },
  {
    "text": "what's uh called a side effect though because even though there is that promise wrapper around it right when i call the fetch function it",
    "start": "973759",
    "end": "980480"
  },
  {
    "text": "immediately does the http request like as soon as i execute that it is immediately going to run the request",
    "start": "980480",
    "end": "986000"
  },
  {
    "text": "now in contrast the managed effects version this over here is elm code um when i call fetch passing this url in",
    "start": "986000",
    "end": "992399"
  },
  {
    "text": "elm it's going to give me back a task rather than a promise but as you can see from these two examples like you know",
    "start": "992399",
    "end": "998240"
  },
  {
    "text": "task two is fetch url and then piped and then callback structurally these are basically the same thing um either we're",
    "start": "998240",
    "end": "1004320"
  },
  {
    "text": "saying like fetch or we're saying fetch and then you know do this callback um the only difference here is that it's",
    "start": "1004320",
    "end": "1009519"
  },
  {
    "text": "promise versus task or the only like significant difference the difference there is that whereas the",
    "start": "1009519",
    "end": "1014639"
  },
  {
    "text": "promise is running the http request when you create it instead the task is not the task is just",
    "start": "1014639",
    "end": "1020959"
  },
  {
    "text": "a description of what you want to be done later so if i called fetch 100 times in javascript it's going to run",
    "start": "1020959",
    "end": "1027600"
  },
  {
    "text": "100 http requests right away if i call fetch 100 times an elm nothing happens it's zero times 100. just zero things",
    "start": "1027600",
    "end": "1034480"
  },
  {
    "text": "happen it's just building up a description of what i want to be done so then the question becomes okay but",
    "start": "1034480",
    "end": "1039600"
  },
  {
    "text": "like surely eventually we want to actually do the http request so how does that happen and basically the answer is that what you give to main in elm like",
    "start": "1039600",
    "end": "1046640"
  },
  {
    "text": "the main you know start of the program is essentially like one of these chained together tasks and then maine says okay",
    "start": "1046640",
    "end": "1052320"
  },
  {
    "text": "i know what to do and when your program starts up maine says i've got this big long list of tasks now i'm going to evaluate it so the key is really just",
    "start": "1052320",
    "end": "1059039"
  },
  {
    "text": "are we building up a description and then giving that to main to run or are we actually as soon as we call the fetch",
    "start": "1059039",
    "end": "1064559"
  },
  {
    "text": "function immediately running the effect and that is the difference between lookup table versus not if you wanted to",
    "start": "1064559",
    "end": "1070559"
  },
  {
    "text": "you could take all of these pure pure functions that you've got in the entire language and you could replace",
    "start": "1070559",
    "end": "1076720"
  },
  {
    "text": "them with lookup tables it's just the thing that would be coming out of the lookup table is a task that's the difference",
    "start": "1076720",
    "end": "1082480"
  },
  {
    "text": "okay now i said managed effects can have non-zero overhead what i mean by this is basically that in javascript you don't",
    "start": "1082480",
    "end": "1088480"
  },
  {
    "text": "necessarily have to use a promise-based api it's quite common to use a promise-based api but it's not required",
    "start": "1088480",
    "end": "1093919"
  },
  {
    "text": "there are apis that don't have that promise wrapper around things that gives you this sort of abstraction for asynchronous effects",
    "start": "1093919",
    "end": "1100000"
  },
  {
    "text": "but in a pure language you do need something like that you have to have some sort of wrapper because you have to be able to store this thing and say like",
    "start": "1100000",
    "end": "1105679"
  },
  {
    "text": "you know this is what i'm actually returning you can't just like run it and then it's done with no wrapper that can",
    "start": "1105679",
    "end": "1110799"
  },
  {
    "text": "have non-zero overhead but worth noting that compiler optimizations can reduce it and potentially get it all the way",
    "start": "1110799",
    "end": "1115840"
  },
  {
    "text": "down to zero overhead by using things like inlining and whatnot um but by default in most languages there is some",
    "start": "1115840",
    "end": "1121280"
  },
  {
    "text": "overhead there it's usually pretty minimal but but it's there um one more note about performance um",
    "start": "1121280",
    "end": "1126960"
  },
  {
    "text": "there's a lot more to this topic of like sort of things that are normally true but don't necessarily have to be true depending on the language i gave a whole",
    "start": "1126960",
    "end": "1132799"
  },
  {
    "text": "talk about this at strange loop about a month ago called outperforming imperative with pure function languages if you want to learn more about that",
    "start": "1132799",
    "end": "1138480"
  },
  {
    "text": "topic um i recommend that talk okay so that's performance um let's talk",
    "start": "1138480",
    "end": "1144720"
  },
  {
    "start": "1142000",
    "end": "1172000"
  },
  {
    "text": "about development again through this same lens of like not my opinion but just like things that we can observe that are true about the characteristics",
    "start": "1144720",
    "end": "1150720"
  },
  {
    "text": "of pure functions and things like that and this to me is the good part um performance okay performance is cool but",
    "start": "1150720",
    "end": "1156559"
  },
  {
    "text": "development is is the part that i really enjoy about functional programming so let's start off by sort of outlining",
    "start": "1156559",
    "end": "1162880"
  },
  {
    "text": "the things we're gonna talk about we're gonna talk about testing revising debugging and of course same as before",
    "start": "1162880",
    "end": "1168240"
  },
  {
    "text": "some drawbacks to the pure functional style when it comes to development so sorry i didn't mean to scare everyone i",
    "start": "1168240",
    "end": "1174160"
  },
  {
    "start": "1172000",
    "end": "1346000"
  },
  {
    "text": "know it's like a month past halloween but um uh just just let's let's just talk about something that nobody likes",
    "start": "1174160",
    "end": "1179520"
  },
  {
    "text": "to talk about um within the topic of testing which is flaky tests so flaky tests are no fun um they're difficult to",
    "start": "1179520",
    "end": "1185679"
  },
  {
    "text": "debug they're a pain um but they do have a sort of known cause which is either a race condition or an",
    "start": "1185679",
    "end": "1191520"
  },
  {
    "text": "effect like something it didn't happen the same way that it used to or it happened in a different order than it's used to happening and this is what",
    "start": "1191520",
    "end": "1197120"
  },
  {
    "text": "caused the test to momentarily flake um well one of the nice things about pure",
    "start": "1197120",
    "end": "1202640"
  },
  {
    "text": "functional programming or even just functional programming in general is that you're trying to minimize side effects and sort of uh you know not use",
    "start": "1202640",
    "end": "1208240"
  },
  {
    "text": "that as a default strategy unless you really need to that has the consequence that you're minimizing effects in general you're",
    "start": "1208240",
    "end": "1214240"
  },
  {
    "text": "sort of doing things in a less effective way which means that you're having fewer flaky tests and in fact you can take this all the",
    "start": "1214240",
    "end": "1220640"
  },
  {
    "text": "way to using a pure functional language um where like for example i work at a company called no red ink and",
    "start": "1220640",
    "end": "1226159"
  },
  {
    "text": "anecdotally we've been using element production since about 2015 so um yeah six years now um and at this point we",
    "start": "1226159",
    "end": "1233039"
  },
  {
    "text": "have about half a million lines of elm code running in production and of those like hundreds of thousands of lines of",
    "start": "1233039",
    "end": "1238080"
  },
  {
    "text": "code worth of elm tests and since 2015 you know between then and the present day the total number of",
    "start": "1238080",
    "end": "1244480"
  },
  {
    "text": "flakes we've ever had with our elm tests is zero has never happened we've never had a",
    "start": "1244480",
    "end": "1249760"
  },
  {
    "text": "single flaky elm test ever this is not surprising because they can't they're all pure functions there's nothing that",
    "start": "1249760",
    "end": "1255360"
  },
  {
    "text": "could possibly flake we run them over and over and over and they just you know give them the same arguments and they give the same answer and that's it",
    "start": "1255360",
    "end": "1260480"
  },
  {
    "text": "there's there's no opportunity for them to flake um we also have big ruby code base slightly different story in terms",
    "start": "1260480",
    "end": "1266240"
  },
  {
    "text": "of flakes not gonna go there um but uh this has just been a really nice experience for us um if you're not",
    "start": "1266240",
    "end": "1271760"
  },
  {
    "text": "familiar with elm it's elmlang.org it's a delightful language for reliable web applications i would subjectively agree",
    "start": "1271760",
    "end": "1277280"
  },
  {
    "text": "with that and this is like one of the aspects of that delight is just like tests that don't flake now granted um",
    "start": "1277280",
    "end": "1283600"
  },
  {
    "text": "i've been talking about this in terms of you know minimizing effects but there is another piece of this story which is that if we don't have any effects",
    "start": "1283600",
    "end": "1290400"
  },
  {
    "text": "there's no mocking needed okay that's another benefit great there's no flaking also great but what if you actually do",
    "start": "1290400",
    "end": "1296080"
  },
  {
    "text": "have effects like what if you have these managed effects like we were talking about earlier which definitely does happen um",
    "start": "1296080",
    "end": "1301600"
  },
  {
    "text": "basically instead of doing mocking you can also test effects by doing essentially simulation this is basically",
    "start": "1301600",
    "end": "1307039"
  },
  {
    "text": "you've got your big built-up task and you say okay i'm going to run this thing but i'm going to sort of simulate at each chain of the task well i'm going to",
    "start": "1307039",
    "end": "1313360"
  },
  {
    "text": "assume that this task this first task in the chain gets these things and then the second one gets these things and the third one gets these things and the",
    "start": "1313360",
    "end": "1319280"
  },
  {
    "text": "first one's going to return this when it gets though and it's going to return this when it gets those and so on and so forth so it sort of serves the same purpose as mocking i personally find it",
    "start": "1319280",
    "end": "1325760"
  },
  {
    "text": "more ergonomic but that's subjective so it's out of scope for this talk but the point is you can still do it and you're",
    "start": "1325760",
    "end": "1330799"
  },
  {
    "text": "still not going to get any flakes so some examples of this like in practice and elms like html tests and",
    "start": "1330799",
    "end": "1336000"
  },
  {
    "text": "also elm program tests these are ways that we can sort of like test the entire program including all the effects in it without ever having any possibility of",
    "start": "1336000",
    "end": "1342559"
  },
  {
    "text": "flakes and using simulation instead of mocking um okay revising code so let's",
    "start": "1342559",
    "end": "1348559"
  },
  {
    "start": "1346000",
    "end": "1549000"
  },
  {
    "text": "say i write this line of code um i'm calling a format phone number giving it a user and i'm",
    "start": "1348559",
    "end": "1354159"
  },
  {
    "text": "taking a return value of that and calling it phone so this is just going to format the user's phone number some sort of standard way in terms of spaces",
    "start": "1354159",
    "end": "1359919"
  },
  {
    "text": "and whatnot then i'm also going to see if the user is valid like maybe the user someone's filling out a form i want to see if you",
    "start": "1359919",
    "end": "1366000"
  },
  {
    "text": "know what they filled out is valid so i'm calling check valid on on that same user value",
    "start": "1366000",
    "end": "1371280"
  },
  {
    "text": "now let's say that i were to switch these around do nothing else just swap the order of them um",
    "start": "1371280",
    "end": "1376799"
  },
  {
    "text": "does my code still work i mean this is the thing that i like to do sometimes i'll realize that like hey maybe if i call these another order it's",
    "start": "1376799",
    "end": "1382240"
  },
  {
    "text": "you know the code's gonna read a little bit nicer um i like to rearrange things uh does the code still work after i've",
    "start": "1382240",
    "end": "1387360"
  },
  {
    "text": "rearranged it well potentially not potentially depending on the language this might cause a bug why might this cause a bug",
    "start": "1387360",
    "end": "1393600"
  },
  {
    "text": "well one reason is that maybe check valid mutates user it doesn't just check that it's valid but for some reason the way that whoever",
    "start": "1393600",
    "end": "1399840"
  },
  {
    "text": "implemented it implemented it it modifies something about the user and maybe it modifies the phone number such that when i call format phone number",
    "start": "1399840",
    "end": "1405760"
  },
  {
    "text": "later it's actually calling it on a different phone number than before and because i'm now calling them in this",
    "start": "1405760",
    "end": "1411520"
  },
  {
    "text": "order that mutation affects the the format phone number call you can avoid this in ways other than",
    "start": "1411520",
    "end": "1417760"
  },
  {
    "text": "functional programming though like rust for example has mutation annotations so you can actually see in your in your",
    "start": "1417760",
    "end": "1423360"
  },
  {
    "text": "functions type whether or not it's allowed to mutate the arguments that you're giving it um i've been spending a lot of my time outside of work using",
    "start": "1423360",
    "end": "1429360"
  },
  {
    "text": "rust um it's probably my favorite imperative language at this point um and it's definitely true that this like sort",
    "start": "1429360",
    "end": "1435039"
  },
  {
    "text": "of cuts down on these things although worth noting i've definitely still bitten myself with this usually it's not an example this trivial but i mean it's",
    "start": "1435039",
    "end": "1441360"
  },
  {
    "text": "a presentation so i'm kind of having to shrink it down usually what'll happen is i have some like big chunks of code that i'm rearranging in various ways and with",
    "start": "1441360",
    "end": "1448000"
  },
  {
    "text": "russ sometimes i'll rearrange that and i'll get an error saying like hey this thing's mutating this thing you can't do that oops and then i'll you know revert",
    "start": "1448000",
    "end": "1453760"
  },
  {
    "text": "it but sometimes it still works because that thing happened to have mutation permissions already and now it's mutating in the wrong order and",
    "start": "1453760",
    "end": "1461360"
  },
  {
    "text": "it doesn't work anymore um on the other hand i don't actually have this happen to me in l i just rearrange",
    "start": "1461360",
    "end": "1466720"
  },
  {
    "text": "stuff uh as much as i want and in fact in l it's actually true that you don't need to have an ordering to your",
    "start": "1466720",
    "end": "1472080"
  },
  {
    "text": "assignments you can just rearrange them however you want and they're all the compiler is always going to just say okay those are all equivalent",
    "start": "1472080",
    "end": "1477600"
  },
  {
    "text": "um another thing that can happen is you know even if i have a language with mutation annotations what if it's not",
    "start": "1477600",
    "end": "1483440"
  },
  {
    "text": "that it's mutating this user value but rather that it's going completely outside my system",
    "start": "1483440",
    "end": "1488559"
  },
  {
    "text": "and writing to a database and what if for some reason the second function is reading from that database",
    "start": "1488559",
    "end": "1493760"
  },
  {
    "text": "now the order matters again and again you know reordering these things can potentially cause them to break so this is another way that we can get a",
    "start": "1493760",
    "end": "1500240"
  },
  {
    "text": "bug you know even though there's no mutation involved it's still just like that side effect of writing to a database and reading from that database",
    "start": "1500240",
    "end": "1505919"
  },
  {
    "text": "means that the order matters but again peer functions just don't rely on call order you can just reorder your",
    "start": "1505919",
    "end": "1511120"
  },
  {
    "text": "assignments and like i said an element you're just allowed to and the compiler does not care how you order your assignments they all do the same thing",
    "start": "1511120",
    "end": "1516960"
  },
  {
    "text": "um so whether i write it like this or write like this exactly the same and i've gotten used to this like in in pure",
    "start": "1516960",
    "end": "1523200"
  },
  {
    "text": "languages that i can just you know restructure my code kind of however i want without really thinking about it and it definitely has bitten me when i",
    "start": "1523200",
    "end": "1529360"
  },
  {
    "text": "got back to rust um and sometimes i've ended up making refactors i'm like ah this is better now and it doesn't work",
    "start": "1529360",
    "end": "1534480"
  },
  {
    "text": "anymore i'm like ah all right all right i'll put it back the old way um so this is again like something that's you know",
    "start": "1534480",
    "end": "1541120"
  },
  {
    "text": "depending on how much revising you like to do how much refactoring you like to do of your code um this is just something that's just objectively true",
    "start": "1541120",
    "end": "1546720"
  },
  {
    "text": "about pure functions that you can reorder them um okay and finally we come to debugging which for me is sort of like maybe the",
    "start": "1546720",
    "end": "1552640"
  },
  {
    "start": "1549000",
    "end": "1878000"
  },
  {
    "text": "biggest uh benefit here um so i was told earlier on my career that global mutable variables are bad",
    "start": "1552640",
    "end": "1560240"
  },
  {
    "text": "just don't use them like they're there but just don't use them at this point i've like i i think i've",
    "start": "1560240",
    "end": "1565360"
  },
  {
    "text": "you know years later i don't want to say that anymore um i i think that was maybe reasonable advice to my former",
    "start": "1565360",
    "end": "1570720"
  },
  {
    "text": "self but i think it's it's it's too broad um i would like to be more specific about like what is the downside",
    "start": "1570720",
    "end": "1575919"
  },
  {
    "text": "of global mutable variables because there are some times when they're legitimately the right choice um the problem with global variables or the",
    "start": "1575919",
    "end": "1582080"
  },
  {
    "text": "downside of them is that they create implicit dependencies so let me explain what i mean by that let's say i have this function it's",
    "start": "1582080",
    "end": "1588880"
  },
  {
    "text": "count messages it takes the user and returns an integer so let's say that the input to that",
    "start": "1588880",
    "end": "1594400"
  },
  {
    "text": "function is just the user and i think we can also say that the output of that function is an int at least as far as we know like this is",
    "start": "1594400",
    "end": "1599840"
  },
  {
    "text": "like a you know c header kind of style pseudocode we don't really know what the body of this function is but just looking at this declaration we can say",
    "start": "1599840",
    "end": "1606559"
  },
  {
    "text": "that like it's got one input and one output so if the output value is wrong like the value that is returning is wrong like",
    "start": "1606559",
    "end": "1613279"
  },
  {
    "text": "which functions might be to blame who is the potential culprit here it's like well it's count messages so if i want to debug this i'm just going to step",
    "start": "1613279",
    "end": "1618960"
  },
  {
    "text": "through the count messages function and just see at what point you know it's it's causing the answer to be wrong there",
    "start": "1618960",
    "end": "1624640"
  },
  {
    "text": "okay but now let's say i introduce a global so a global mutable variable this is also an integer well now there's sort of an implicit",
    "start": "1624640",
    "end": "1631039"
  },
  {
    "text": "potential input to this function which is this global like if i call count messages multiple times and i give it the same user it",
    "start": "1631039",
    "end": "1637919"
  },
  {
    "text": "still might give me a different answer because it might be reading from this global now again we can't see the body of this function here we're just looking at the declaration so just based on the",
    "start": "1637919",
    "end": "1644399"
  },
  {
    "text": "declaration the fact that i've added this global to my program means that when i'm debugging i now have",
    "start": "1644399",
    "end": "1650080"
  },
  {
    "text": "one more input to consider here i also have one more output because when count messages runs it can also mutate",
    "start": "1650080",
    "end": "1656000"
  },
  {
    "text": "that global and other functions might be relying on that so i've increased my inputs and outputs to this function by",
    "start": "1656000",
    "end": "1661360"
  },
  {
    "text": "one just by adding this global at least as far as like looking at the declaration if i want to see what it depends on i now need to like go into",
    "start": "1661360",
    "end": "1666799"
  },
  {
    "text": "the body and actually see does it actually reference the global or not and this is not just for this function",
    "start": "1666799",
    "end": "1671840"
  },
  {
    "text": "it's for every single function of my code base which is potentially a lot of them and if i had a second global it's again",
    "start": "1671840",
    "end": "1677520"
  },
  {
    "text": "multiplied by all the functions of my code base another input another output so this is what i mean um about like",
    "start": "1677520",
    "end": "1682799"
  },
  {
    "text": "implicit dependencies if this value is wrong like which function might be to blame i mean it could be any of them it could",
    "start": "1682799",
    "end": "1688559"
  },
  {
    "text": "be any function of my entire program that like changed that global so how do i go about debugging this thing",
    "start": "1688559",
    "end": "1694480"
  },
  {
    "text": "i mean i kind of just need to like step through all the function calls in my program um or if i have some ide maybe it can tell me like okay here's the only",
    "start": "1694480",
    "end": "1700880"
  },
  {
    "text": "functions that reference this global and then i can narrow it down that way but i mean the amount of functions that can potentially be affected by this thing or",
    "start": "1700880",
    "end": "1707039"
  },
  {
    "text": "potentially affect this thing is just all of them so i wouldn't say the global immutable",
    "start": "1707039",
    "end": "1712320"
  },
  {
    "text": "variables are bad i would say though that they create implicit dependencies similarly i also would not say the side",
    "start": "1712320",
    "end": "1718240"
  },
  {
    "text": "effects are bad but i would say that they introduce implicit dependencies",
    "start": "1718240",
    "end": "1724320"
  },
  {
    "text": "because they do in basically the same way that global variables do so like let's say that i have this count messages function and i know for some",
    "start": "1724320",
    "end": "1730960"
  },
  {
    "text": "reason that it's a pure function um if this value is wrong which function might be to blame just count messages no",
    "start": "1730960",
    "end": "1736840"
  },
  {
    "text": "problem but again if it has side effects uh",
    "start": "1736840",
    "end": "1742640"
  },
  {
    "text": "which functions might be to blame well i mean what if what if it's like reading from a database what if it's reading from a remote server could be",
    "start": "1742640",
    "end": "1748399"
  },
  {
    "text": "doing http requests it could be reading from some local store in memory that's not one of its arguments uh and",
    "start": "1748399",
    "end": "1754399"
  },
  {
    "text": "whatever output i mean it could be changing a database it could be changing a remote server state like what if i have this remote database that my",
    "start": "1754399",
    "end": "1760640"
  },
  {
    "text": "program talks to and that state is wrong somehow i'm like you know running my program i'm like wait wait why is that",
    "start": "1760640",
    "end": "1765919"
  },
  {
    "text": "column have that value which function in my program might be to blame could be any of them if they all could",
    "start": "1765919",
    "end": "1772559"
  },
  {
    "text": "do side effects that's one of the many side effects they could potentially do so again how do i debug that i have to",
    "start": "1772559",
    "end": "1777919"
  },
  {
    "text": "potentially step through as as many as all the function calls my database as opposed to being able like if i know that this function is pure i'm like yeah",
    "start": "1777919",
    "end": "1784880"
  },
  {
    "text": "i don't have to worry about that like if if i know somehow that you know whether it's a pure language or because i've been following a pure functional style",
    "start": "1784880",
    "end": "1790640"
  },
  {
    "text": "and i'm confident that this is a pure function i'm like yeah i i may not know exactly which function",
    "start": "1790640",
    "end": "1796240"
  },
  {
    "text": "is to blame but i know it's not this one i can rule this one out right away just by looking at the declaration i don't even need to potentially",
    "start": "1796240",
    "end": "1802559"
  },
  {
    "text": "like step into the body of the function or run any id commands to try and figure out if it references things or not and",
    "start": "1802559",
    "end": "1807760"
  },
  {
    "text": "you know in the case of globals maybe i could have gotten it to reference things and say like oh this function references you know these globals but",
    "start": "1807760",
    "end": "1814880"
  },
  {
    "text": "what am i going to look for if it's like accessing the database i mean hopefully i do all my database access through one function maybe i can like it's a lot",
    "start": "1814880",
    "end": "1820880"
  },
  {
    "text": "harder of a question to ask the state space to search is a lot bigger",
    "start": "1820880",
    "end": "1826480"
  },
  {
    "text": "so basically in a sort of a pure functional context you know if i'm if i'm using pure functions everywhere especially if i'm in a pure functional",
    "start": "1826480",
    "end": "1832240"
  },
  {
    "text": "language and i i'm wondering how my database got changed i can debug only functions that return wrapped effects",
    "start": "1832240",
    "end": "1838320"
  },
  {
    "text": "like task so if this returns task then okay maybe this is one of the functions but now i",
    "start": "1838320",
    "end": "1844240"
  },
  {
    "text": "can tell i can immediately partition my search space for potential culprits down just like just way smaller down to only the ones",
    "start": "1844240",
    "end": "1850320"
  },
  {
    "text": "that actually return tasks just because i've been following this style so in the world where i have side",
    "start": "1850320",
    "end": "1855520"
  },
  {
    "text": "effects my search space is you know potentially as big as the entire program but in a world where i'm using pure functions everywhere the search space is",
    "start": "1855520",
    "end": "1862320"
  },
  {
    "text": "just way smaller and potentially astronomically smaller depending on you know how many tasks i have like the ratio of functions that return tasks to",
    "start": "1862320",
    "end": "1868960"
  },
  {
    "text": "functions that return not task so this is a way of just like making me just strictly spend less time debugging",
    "start": "1868960",
    "end": "1875519"
  },
  {
    "text": "just by virtue of the fact that i'm following this style okay so having said that again there are",
    "start": "1875519",
    "end": "1881200"
  },
  {
    "start": "1878000",
    "end": "1955000"
  },
  {
    "text": "some drawbacks here um explicit dependencies are more verbose like not just the fact that i have to return task",
    "start": "1881200",
    "end": "1887279"
  },
  {
    "text": "but mutations are another really common example rather than having to rather than being able to pass in a user and say i'm just",
    "start": "1887279",
    "end": "1893519"
  },
  {
    "text": "going to mutate this thing if i want to follow a pure functional style i need to not only take a user but then return a new user that's modified version of the",
    "start": "1893519",
    "end": "1900000"
  },
  {
    "text": "original that's just more verbose than uh than having you know the implicit dependency of being able to mutate it",
    "start": "1900000",
    "end": "1905840"
  },
  {
    "text": "directly also manage effects make functions colorful which when i say it like that sounds like a good thing um and honestly",
    "start": "1905840",
    "end": "1912960"
  },
  {
    "text": "to me it is a good thing overall but there is definitely another perspective on this like from my perspective i like the fact that i know that all of my",
    "start": "1912960",
    "end": "1919840"
  },
  {
    "text": "functions that return tasks do effects and if they don't return tasks they don't do effects but there's a downside",
    "start": "1919840",
    "end": "1926399"
  },
  {
    "text": "to this which is if you have like a deeply nested function call and you decide that you want to do an effect in that leaf node now you have to make it",
    "start": "1926399",
    "end": "1933120"
  },
  {
    "text": "return a task and also this parent caller has to return a task and its caller has to return a task and so forth now that's definitely a downside there's",
    "start": "1933120",
    "end": "1939279"
  },
  {
    "text": "a whole blog post about this called what color is your function that sort of talks about this downside and it's it's about really wrapped effects like task",
    "start": "1939279",
    "end": "1945760"
  },
  {
    "text": "and promise it's not necessarily specific to functional programming um but if you're following a pure functional programming style and you",
    "start": "1945760",
    "end": "1950880"
  },
  {
    "text": "want to get these benefits this is one of the drawbacks that sort of comes with that territory okay",
    "start": "1950880",
    "end": "1956480"
  },
  {
    "start": "1955000",
    "end": "2289000"
  },
  {
    "text": "so that's development let's talk about sort of like putting all this together and the sort of ecosystem implications",
    "start": "1956480",
    "end": "1962159"
  },
  {
    "text": "of things that we're talking about here okay so before i got into functional",
    "start": "1962159",
    "end": "1967200"
  },
  {
    "text": "programming i was a javascript programmer um professionally and um i was at first doing an imperative style",
    "start": "1967200",
    "end": "1972320"
  },
  {
    "text": "and at some point in my career i found out about the functional style and sort of started writing in a functional style where i was avoiding mutation and avoiding side effects",
    "start": "1972320",
    "end": "1978720"
  },
  {
    "text": "and one of the things i learned sort of the hard way is that as i mentioned earlier a pure function that calls a non-pure function is no longer a pure",
    "start": "1978720",
    "end": "1985440"
  },
  {
    "text": "function it no longer gets all the benefits that we've been talking about um found this out the hard way in some cases because i made a mistake like i",
    "start": "1985440",
    "end": "1992480"
  },
  {
    "text": "you know thought i had a pure function but i actually just didn't apply the rules correctly i didn't at that time",
    "start": "1992480",
    "end": "1997600"
  },
  {
    "text": "have the mnemonic of like oh can it be could i replace the entire body with a lookup table i think that would have helped me out but didn't have it at the",
    "start": "1997600",
    "end": "2002880"
  },
  {
    "text": "time so sometimes i'd mess that up um or sometimes i would have it be a pure function but it's calling this other",
    "start": "2002880",
    "end": "2008480"
  },
  {
    "text": "function which calls this other function and then that one stops being pure and i don't notice um that could also you know",
    "start": "2008480",
    "end": "2013840"
  },
  {
    "text": "break my assumptions or even worse i did call a function which calls another function which calls a function in somebody else's package and maybe i just",
    "start": "2013840",
    "end": "2020559"
  },
  {
    "text": "update my packages and there's no breaking api change there but it turns out that something picked up a side effect and now",
    "start": "2020559",
    "end": "2026240"
  },
  {
    "text": "all my stuff breaks so this is like somewhat of a bad experience that i had um so if i had",
    "start": "2026240",
    "end": "2031519"
  },
  {
    "text": "this function like you know count messages that we've been using before i would have all these questions about it that i you know i wanted to be able",
    "start": "2031519",
    "end": "2038399"
  },
  {
    "text": "to answer with the pure functional um you know just like oh yeah i know the answer right away but i couldn't necessarily always do it so i'd ask like",
    "start": "2038399",
    "end": "2045279"
  },
  {
    "text": "okay might discount messages function be what changed my database or uh what inputs does this thing depend on is it",
    "start": "2045279",
    "end": "2051599"
  },
  {
    "text": "just user or is it more than that um does this rely on call order or not can i rearrange it",
    "start": "2051599",
    "end": "2057440"
  },
  {
    "text": "could this flake if i put it in a test uh can i pre-compute this like do i need to run this at runtime or like if it's",
    "start": "2057440",
    "end": "2063200"
  },
  {
    "text": "expensive can i potentially compute it up ahead if i can't do it a compile time can i memoize it at runtime so if i'm re-running it um i can potentially you",
    "start": "2063200",
    "end": "2069599"
  },
  {
    "text": "know not have to pay that cost over and over again and like is this thread safe i mean in javascript that's not so much of a concern but like i was a java",
    "start": "2069599",
    "end": "2075919"
  },
  {
    "text": "programmer before that so like i definitely remember thinking about these things and again if i'm confident this is a",
    "start": "2075919",
    "end": "2081040"
  },
  {
    "text": "pure function i know the answers to all these things might it be what changed my database well it doesn't return a task so yeah",
    "start": "2081040",
    "end": "2086320"
  },
  {
    "text": "definitely not no problem what inputs does it depend on just user easy what else you got does it",
    "start": "2086320",
    "end": "2091440"
  },
  {
    "text": "rely on call order no no problem could it flake in a test absolutely not can i pre-compute this yeah if i want to could",
    "start": "2091440",
    "end": "2096480"
  },
  {
    "text": "i memoize this sure also fine is it thread safe absolutely so if i know it's a pure function i know",
    "start": "2096480",
    "end": "2101920"
  },
  {
    "text": "all these nice things about it but again in the javascript world can i really be sure it's a pure function like i hope it's a pure function like i think it's",
    "start": "2101920",
    "end": "2108400"
  },
  {
    "text": "pure function um and most of the time when i was you know programming that style i was on a team of people who were also bought into this most of the time",
    "start": "2108400",
    "end": "2114800"
  },
  {
    "text": "we wouldn't make a mistake and it'd be fine but sometimes it wouldn't be um sometimes we'd have this like oops not",
    "start": "2114800",
    "end": "2120079"
  },
  {
    "text": "pure anymore and then we would get burned by one of these things and then all these these nice answers",
    "start": "2120079",
    "end": "2125280"
  },
  {
    "text": "would go away and we would have bugs so this is my experience like doing javascript in the functional style and i",
    "start": "2125280",
    "end": "2131920"
  },
  {
    "text": "gotta say that you know one of the the biggest parts about being a javascript programmer is installing lots of packages from npm",
    "start": "2131920",
    "end": "2138880"
  },
  {
    "text": "and i would have this question mark around the confidence of things i was getting from npm because let's face it npm is largely written in an imperative",
    "start": "2138880",
    "end": "2145040"
  },
  {
    "text": "style like most of the packages on there the overwhelming majority packages on there are not really concerned about side effects there are definitely some",
    "start": "2145040",
    "end": "2151280"
  },
  {
    "text": "functional libraries and there are some other packages that are built on those functional libraries and there are other packages that happen to not use side",
    "start": "2151280",
    "end": "2156720"
  },
  {
    "text": "effects and things like that but culturally it's not really like everybody's like you must avoid side effects this is a pure function you can",
    "start": "2156720",
    "end": "2162720"
  },
  {
    "text": "rely on it being a pure function i verified that it's a pure function i'm never going to change that it's not really how it's done it's a lot more",
    "start": "2162720",
    "end": "2168079"
  },
  {
    "text": "loosey-goosey than that and that's kind of how these bugs can happen in contrast eventually later in my career i got into elm which is a pure",
    "start": "2168079",
    "end": "2174720"
  },
  {
    "text": "functional programming language that compiles the javascript and i started using it instead of javascript for my front-end programming um elm has its own",
    "start": "2174720",
    "end": "2180880"
  },
  {
    "text": "package ecosystem package.online.org and it's 100 pure functions guaranteed",
    "start": "2180880",
    "end": "2186800"
  },
  {
    "text": "no exceptions there's just no there's not even like javascript interop allowed on there it's just like you can do",
    "start": "2186800",
    "end": "2192000"
  },
  {
    "text": "javascript interrupt in your program but but on the package ecosystem it's like no 100 elm code 100 pure functions so you never have to worry about any of",
    "start": "2192000",
    "end": "2198079"
  },
  {
    "text": "that stuff it's just all the questions all the answers to all these questions we've been talking about it's always like yes it's a pure function not a",
    "start": "2198079",
    "end": "2203200"
  },
  {
    "text": "problem i have to think about that so i have this like supreme confidence when i'm writing elm code i can just like refactor stuff reorganize it",
    "start": "2203200",
    "end": "2209040"
  },
  {
    "text": "however i want tests never flake all these benefits i just get them 100 of the time and this is like sort of an",
    "start": "2209040",
    "end": "2215359"
  },
  {
    "text": "unbeatable ecosystem benefit to me like the lm ecosystem is like one of the biggest selling points the language to me even though it's by like numerically",
    "start": "2215359",
    "end": "2221920"
  },
  {
    "text": "it's much smaller than npm which is you know the biggest package repo in the world i am much happier using this ecosystem because all of these objective",
    "start": "2221920",
    "end": "2228400"
  },
  {
    "text": "properties we've been talking about hold for every single line of code in this entire ecosystem",
    "start": "2228400",
    "end": "2234720"
  },
  {
    "text": "so in javascript when i'm like uh i don't know about the answers these questions i don't know maybe i have to like you know hopefully hopefully they",
    "start": "2234720",
    "end": "2241119"
  },
  {
    "text": "hold nope but they almost just there's this complete piece of mind it's like yes it's a pure function for sure i get",
    "start": "2241119",
    "end": "2246320"
  },
  {
    "text": "all these objective benefits for sure there's nothing to worry about which means that all of these things in",
    "start": "2246320",
    "end": "2251920"
  },
  {
    "text": "practice are just not in my brain anymore like when i'm writing elm code i'm never",
    "start": "2251920",
    "end": "2257440"
  },
  {
    "text": "spending time thinking about these things i just have all these cycles freed up to think about like what i'm trying to",
    "start": "2257440",
    "end": "2263280"
  },
  {
    "text": "build and subjectively that's what i love about functional programming it's all",
    "start": "2263280",
    "end": "2268400"
  },
  {
    "text": "the things that i don't have to think about anymore because i'm just working in this world where all these questions",
    "start": "2268400",
    "end": "2273680"
  },
  {
    "text": "have a very immediately known answer i just don't have to think about them i don't have to worry about them anymore",
    "start": "2273680",
    "end": "2279119"
  },
  {
    "text": "so that's why in practice 95 of the time i find myself reaching for the functional screwdriver",
    "start": "2279119",
    "end": "2285200"
  },
  {
    "text": "even though i'm still happy to have the other one in my toolbox okay so to summarize all the things we",
    "start": "2285200",
    "end": "2290240"
  },
  {
    "start": "2289000",
    "end": "2415000"
  },
  {
    "text": "talked about talked about how sort of traditionally the way that people talk about functional programming is subjectively",
    "start": "2290240",
    "end": "2295280"
  },
  {
    "text": "in terms of like it's simpler it's more elegant you can you know reason about things better um but the goal here of this talk is to",
    "start": "2295280",
    "end": "2301839"
  },
  {
    "text": "focus on sort of the pragmatic concrete measurable things that are different about functional programming the style",
    "start": "2301839",
    "end": "2307440"
  },
  {
    "text": "the languages specific objective trade-offs both pros and also the cons of using this style",
    "start": "2307440",
    "end": "2313359"
  },
  {
    "text": "um we talked about caching how things are sort of innately memorizable if they're pure function if you're using",
    "start": "2313359",
    "end": "2318880"
  },
  {
    "text": "pure functions they're in innately parallelizable um you can pre-compute them ahead of time and sort of not even",
    "start": "2318880",
    "end": "2325040"
  },
  {
    "text": "need to memoize them at compile time we talked about testing never have to worry about flakes um you never have to",
    "start": "2325040",
    "end": "2330640"
  },
  {
    "text": "use mocs you can use simulation for wrapped effects we talked about revising code you can reorder them as much as you want and not have to worry because pure",
    "start": "2330640",
    "end": "2337359"
  },
  {
    "text": "functions are order independent since they only depend on their arguments and we talked about debugging and how the sort of search space for potential",
    "start": "2337359",
    "end": "2343520"
  },
  {
    "text": "problems is much much smaller if you have functions that aren't doing side effects and again this part the development much",
    "start": "2343520",
    "end": "2350320"
  },
  {
    "text": "more so than the performance is the reason that i've come to love functional programming and finally we talked about ecosystems",
    "start": "2350320",
    "end": "2356800"
  },
  {
    "text": "and how you know there is a lot of benefit to be had from using the functional programming style but it definitely does come at least in my experience with occasionally getting",
    "start": "2356800",
    "end": "2363040"
  },
  {
    "text": "bitten by assumptions not actually holding in practice and sometimes that's because of the ecosystem and things that",
    "start": "2363040",
    "end": "2368400"
  },
  {
    "text": "i got off of npm or other package managers one of the really nice things about a functional programming language or",
    "start": "2368400",
    "end": "2374000"
  },
  {
    "text": "especially a pure functional programming language is if you have an ecosystem where these guarantees are actually enforced like they are in elm",
    "start": "2374000",
    "end": "2380320"
  },
  {
    "text": "all these things can just go out of my brain i just don't have to think about them and instead i can think about what i'm actually trying to build",
    "start": "2380320",
    "end": "2385839"
  },
  {
    "text": "as a pragmatist that's what i want and again i want to reiterate i still want both of these in my toolbox like",
    "start": "2385839",
    "end": "2391440"
  },
  {
    "text": "yes at work i spend most of my time doing functional programming but actually on the side i spend most of my time doing rust i've been working on",
    "start": "2391440",
    "end": "2397040"
  },
  {
    "text": "some like really performance intensive stuff where i just really want that i want a systems level language and i also",
    "start": "2397040",
    "end": "2402560"
  },
  {
    "text": "like russ a lot i'm definitely not like somebody who thinks that functional programming is the only way to do things",
    "start": "2402560",
    "end": "2407760"
  },
  {
    "text": "but again when it comes to work 95 of the time i'm still choosing the screwdriver functional programming over",
    "start": "2407760",
    "end": "2412880"
  },
  {
    "text": "imperative because of all these things and i can say that in full confidence as a pragmatist",
    "start": "2412880",
    "end": "2419040"
  },
  {
    "start": "2415000",
    "end": "2430000"
  },
  {
    "text": "thanks very much [Applause]",
    "start": "2419040",
    "end": "2425880"
  },
  {
    "text": "you",
    "start": "2429680",
    "end": "2431760"
  }
]