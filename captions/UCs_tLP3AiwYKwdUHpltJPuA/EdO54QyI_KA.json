[
  {
    "text": "yeah hi not sure what what it means to be a rock star with like a trash hotel rooms or something like that anyway so",
    "start": "9559",
    "end": "17279"
  },
  {
    "text": "well yeah welcome to my talk on asynchronous microservices and really what the goal of the talk is to describe",
    "start": "17279",
    "end": "24320"
  },
  {
    "text": "how to implement transactions and queries in a microservice architecture",
    "start": "24320",
    "end": "29560"
  },
  {
    "text": "using a asynchronous messaging and as you're going to see there's sort of some",
    "start": "29560",
    "end": "34600"
  },
  {
    "text": "kind of essential characteristics of the microservice architecture that make it",
    "start": "34600",
    "end": "39760"
  },
  {
    "text": "slightly challenging to do transactions and queries um and then along the way I'm going to sort of describe why",
    "start": "39760",
    "end": "46280"
  },
  {
    "text": "there's more to microservices than just rest why there's more to microservices than just events and you know micros",
    "start": "46280",
    "end": "53920"
  },
  {
    "text": "Services don't have to be implemented with event sourcing and um also going to just throw",
    "start": "53920",
    "end": "59680"
  },
  {
    "text": "in that you know contrary to what's sort of written on various websites you know",
    "start": "59680",
    "end": "65478"
  },
  {
    "text": "Apache cfer is not really an event store it's an excellent message broker but but",
    "start": "65479",
    "end": "71159"
  },
  {
    "text": "it's not doesn't it's only part of a solution for implementing event sourcing anyway before I talk about that a little",
    "start": "71159",
    "end": "77560"
  },
  {
    "text": "bit about me done a number of things over the years way back did list wrote the um book pojo in action that was 12",
    "start": "77560",
    "end": "84000"
  },
  {
    "text": "years ago um then discovered Amazon ec2 created the original cloud Foundry that",
    "start": "84000",
    "end": "90200"
  },
  {
    "text": "was a path for deploying Java applications on ec2 and that that's sort of more more ancient history for the",
    "start": "90200",
    "end": "96479"
  },
  {
    "text": "past 5 years I've been pretty much focused on the microservice architecture so I do kind of basically travel the",
    "start": "96479",
    "end": "102640"
  },
  {
    "text": "world doing consulting and training and just generally helping organizations",
    "start": "102640",
    "end": "108719"
  },
  {
    "text": "adopt the microservice architecture and I also have the site microservices doio which I'm sure many many of you have",
    "start": "108719",
    "end": "115399"
  },
  {
    "text": "read and I also have a startup um we're building a platform to simplify the",
    "start": "115399",
    "end": "120880"
  },
  {
    "text": "development of business applications that use microservices and yeah my book",
    "start": "120880",
    "end": "126039"
  },
  {
    "text": "um microservices patterns just came out um earlier this month and you can buy it",
    "start": "126039",
    "end": "131720"
  },
  {
    "text": "from the Manning website with a discount code ctw y comp 18 and I I will repeat",
    "start": "131720",
    "end": "139560"
  },
  {
    "text": "that at the end end of the conference end of the talk in terms of what I'm going to talk about first I'm going to",
    "start": "139560",
    "end": "145440"
  },
  {
    "text": "describe the problems that you have implementing transactions and queries in microservice architecture then I'm going",
    "start": "145440",
    "end": "152319"
  },
  {
    "text": "to describe how you go about implementing transactions using the what",
    "start": "152319",
    "end": "157560"
  },
  {
    "text": "a mechanism known as sagas going to describe how you can Implement queries using an event driven approach known as",
    "start": "157560",
    "end": "165680"
  },
  {
    "text": "cqrs and then I'm going to finish up by talking about what I call transactional",
    "start": "165680",
    "end": "170879"
  },
  {
    "text": "mechanism which is basically a way of um publishing events as part of a database",
    "start": "170879",
    "end": "178120"
  },
  {
    "text": "um uh transaction which is non-trivial um even though on",
    "start": "178120",
    "end": "183840"
  },
  {
    "text": "the surface it seems quite straightforward okay so let let's get going so you know first off what is the",
    "start": "183840",
    "end": "189360"
  },
  {
    "text": "microservice architecture well you know it's an architectural style that structures an application as a set of",
    "start": "189360",
    "end": "196840"
  },
  {
    "text": "loosely coupled services so you and they're generally organized around business functions and one of the key",
    "start": "196840",
    "end": "203120"
  },
  {
    "text": "things there is Loosely coupled and that actually means that microservices can't share databases or to be more precise",
    "start": "203120",
    "end": "210840"
  },
  {
    "text": "they can't share database tables um I'll talk more about that in a minute an",
    "start": "210840",
    "end": "216560"
  },
  {
    "text": "individual service from the perspective of its clients is defined entirely by",
    "start": "216560",
    "end": "221760"
  },
  {
    "text": "its API and and and the API of a service consists of two parts the first part are",
    "start": "221760",
    "end": "228000"
  },
  {
    "text": "its operations um which are things that you can invoke and there's two types of",
    "start": "228000",
    "end": "234120"
  },
  {
    "text": "operations there are commands that mutate data so create order cancel order",
    "start": "234120",
    "end": "239799"
  },
  {
    "text": "rise order there are also queries that revi that retrieve data um and these",
    "start": "239799",
    "end": "246079"
  },
  {
    "text": "these these operations can be invoked either synchronously using something",
    "start": "246079",
    "end": "251280"
  },
  {
    "text": "like rest or grpc some you know some synchronous protocol like that or as",
    "start": "251280",
    "end": "257280"
  },
  {
    "text": "you're going to see in this talk they can also be invoked asynchronously by sending what's known as a command",
    "start": "257280",
    "end": "265080"
  },
  {
    "text": "message and in in some situations that that's kind of a key mechanism that you",
    "start": "265080",
    "end": "271080"
  },
  {
    "text": "need to use in order to maintain data consistency and then the other part of an API of a service is that it publishes",
    "start": "271080",
    "end": "278080"
  },
  {
    "text": "events or or to be more precise domain DDD domain driven design domain events",
    "start": "278080",
    "end": "284759"
  },
  {
    "text": "so like order created order revised order cancelled order shipped and so on",
    "start": "284759",
    "end": "290080"
  },
  {
    "text": "um and that that's sort of another kind of key mechanism that you often end up using so from the perspective of a",
    "start": "290080",
    "end": "297120"
  },
  {
    "text": "client that you know a service is defined by its in API in terms of its",
    "start": "297120",
    "end": "302360"
  },
  {
    "text": "implementation a service can invoke operations of other services and as",
    "start": "302360",
    "end": "308720"
  },
  {
    "text": "you're going to see it can also subscribe to their events and then of course a service has a database where",
    "start": "308720",
    "end": "314639"
  },
  {
    "text": "you know it's storing its data it also might have a replica of data that's owned by other",
    "start": "314639",
    "end": "320560"
  },
  {
    "text": "services so your sis this is the basic building block of of a system that has a",
    "start": "320560",
    "end": "327319"
  },
  {
    "text": "microservice architecture and the the reason you want to use this architecture is first and foremost to tackle",
    "start": "327319",
    "end": "334280"
  },
  {
    "text": "complexity and to enable you to do rapid frequent and reliable delivery in other",
    "start": "334280",
    "end": "341240"
  },
  {
    "text": "words devops of large complex applications so this is generally not an architecture that you'd want to use if",
    "start": "341240",
    "end": "347800"
  },
  {
    "text": "you have a small application and a small team but once your application gets large as successful applications",
    "start": "347800",
    "end": "355039"
  },
  {
    "text": "inevitably do and and your team gets large you know this is an architecture",
    "start": "355039",
    "end": "360280"
  },
  {
    "text": "that you want to consider and the reason you would would want to use this architecture is that it gives you the",
    "start": "360280",
    "end": "367680"
  },
  {
    "text": "deployability that is needed to support devops these Services can be developed and tested and deployed and scaled",
    "start": "367680",
    "end": "374880"
  },
  {
    "text": "independently of one another and you this architecture also gives you the testability you know one of the key sort",
    "start": "374880",
    "end": "381840"
  },
  {
    "text": "of foundational techniques of devops or continuous delivery is automated testing",
    "start": "381840",
    "end": "387840"
  },
  {
    "text": "and in order for that in order to do automated testing you need an architecture that is testable and the",
    "start": "387840",
    "end": "394280"
  },
  {
    "text": "microservice architecture is exactly that and then the the second way in",
    "start": "394280",
    "end": "399360"
  },
  {
    "text": "which microservices support devops is because it enables you to have Loosely",
    "start": "399360",
    "end": "405000"
  },
  {
    "text": "coupled autonomous team so you've got Loosely coupled services that are owned",
    "start": "405000",
    "end": "411080"
  },
  {
    "text": "by Loosely coupled teams that can develop test and deploy their services",
    "start": "411080",
    "end": "416280"
  },
  {
    "text": "independently so this is you know the primary reason why you want to use the microservice architecture and there are",
    "start": "416280",
    "end": "423680"
  },
  {
    "text": "there are other reasons like it can help with scaling and so on but first and foremost it's to tackle complexity and",
    "start": "423680",
    "end": "429520"
  },
  {
    "text": "to modularize your application um so let let's let's sort of look at a simple example so imagine",
    "start": "429520",
    "end": "436199"
  },
  {
    "text": "that you're building an online store so you know that that application will have",
    "start": "436199",
    "end": "441479"
  },
  {
    "text": "apis for creating customers um creating orders and and doing queries retrieving",
    "start": "441479",
    "end": "448039"
  },
  {
    "text": "customers retrieving orders and so on so that from the outside it's going to implement an AP that that API now",
    "start": "448039",
    "end": "454440"
  },
  {
    "text": "internally you could imagine that it will have a customer service that's responsible for all of the operations on",
    "start": "454440",
    "end": "462240"
  },
  {
    "text": "a customer it would also have an order service that's responsible for all",
    "start": "462240",
    "end": "468120"
  },
  {
    "text": "operations on an order now each one of those services will have its own database and this is one of the",
    "start": "468120",
    "end": "474120"
  },
  {
    "text": "essential characteristics of the microservice architecture in order to ensure that these services are Loosely",
    "start": "474120",
    "end": "480840"
  },
  {
    "text": "coupled they cannot share database um tables now if you want to if you're",
    "start": "480840",
    "end": "487240"
  },
  {
    "text": "working on the order service you want to be able to quickly and easily change its",
    "start": "487240",
    "end": "493000"
  },
  {
    "text": "schema without having to coordinate meetings with or schedule meetings with",
    "start": "493000",
    "end": "498159"
  },
  {
    "text": "the 10 other teams whose services are also accessing your um your your",
    "start": "498159",
    "end": "503800"
  },
  {
    "text": "services database that will just slow you down so for that reason the the data",
    "start": "503800",
    "end": "509159"
  },
  {
    "text": "that is owned by a service is encapsulated by the API and is only accessible through that",
    "start": "509159",
    "end": "516240"
  },
  {
    "text": "API okay so that that's and that's actually the source of the problems that you run into around transaction",
    "start": "516240",
    "end": "522560"
  },
  {
    "text": "management and querying and then sitting in front of you know your services you'd have an API Gateway that routes requests",
    "start": "522560",
    "end": "529640"
  },
  {
    "text": "for to to operate on customers to the customer service routes requests that",
    "start": "529640",
    "end": "535160"
  },
  {
    "text": "operate on orders to the order service and sort of you know and at that level",
    "start": "535160",
    "end": "540440"
  },
  {
    "text": "it all looks quite straightforward but there's a couple of interesting problems you sort of the way it's drawn here the",
    "start": "540440",
    "end": "546839"
  },
  {
    "text": "two services are somewhat I sort of independent of one another but if you look at the you know the meaning of the",
    "start": "546839",
    "end": "553320"
  },
  {
    "text": "create order operation it actually has to ensure that there's sufficient credit",
    "start": "553320",
    "end": "559519"
  },
  {
    "text": "available for that customer in order to place an order so in other words you sort of you need a transaction that",
    "start": "559519",
    "end": "566040"
  },
  {
    "text": "spans the order service and the customer service service and then there are query",
    "start": "566040",
    "end": "571880"
  },
  {
    "text": "operations that retrieve operations that retrieve data from both of those",
    "start": "571880",
    "end": "577480"
  },
  {
    "text": "services and and doing those things are quite challenging so for instance if you",
    "start": "577480",
    "end": "582640"
  },
  {
    "text": "think about um Ure enforcing the credit limit in a monolithic system that's",
    "start": "582640",
    "end": "588519"
  },
  {
    "text": "quite straightforward you simply begin an assd transaction you find the existing orders you retrieve the",
    "start": "588519",
    "end": "593839"
  },
  {
    "text": "customer you make sure there's enough credit available and then you create the order and you commit the transaction and",
    "start": "593839",
    "end": "600519"
  },
  {
    "text": "the great thing here is is that the the isolation property of asset transactions",
    "start": "600519",
    "end": "605920"
  },
  {
    "text": "ensure that even if there a simultaneous attempts to create orders for the same",
    "start": "605920",
    "end": "611000"
  },
  {
    "text": "customer the credit limit will be enforced at all times but even a simple",
    "start": "611000",
    "end": "616640"
  },
  {
    "text": "transaction like this cannot be implemented directly in a microservice architecture because orders and",
    "start": "616640",
    "end": "622959"
  },
  {
    "text": "customers are actually in two separate services so you can't access them within",
    "start": "622959",
    "end": "628200"
  },
  {
    "text": "the same transaction because if you did you'd actually need to have a form of you'd need to use a",
    "start": "628200",
    "end": "633760"
  },
  {
    "text": "distributed transaction two-phase commit or XA and that that's just a technology",
    "start": "633760",
    "end": "639240"
  },
  {
    "text": "that's not used in modern applications for for one reason is it impacts",
    "start": "639240",
    "end": "645200"
  },
  {
    "text": "availability another reason is that it is not supported by many modern database",
    "start": "645200",
    "end": "650600"
  },
  {
    "text": "techn Technologies so it's sort of like well if we can't write transactions like in",
    "start": "650600",
    "end": "656399"
  },
  {
    "text": "in the usual way to maintain data consistent and see what what are we going to do and then we also have a",
    "start": "656399",
    "end": "662560"
  },
  {
    "text": "similar problem with queries you know it's ex you know extremely common to just do joins between tables you know",
    "start": "662560",
    "end": "670279"
  },
  {
    "text": "you want to know about customers and the orders well you just do a join between those tables and and retrieve the data that",
    "start": "670279",
    "end": "677760"
  },
  {
    "text": "you need but once again customers are in one service orders are in another",
    "start": "677760",
    "end": "682880"
  },
  {
    "text": "service and you cannot do a straightforward join um between tables so we've got two",
    "start": "682880",
    "end": "689920"
  },
  {
    "text": "problems how to implement transactions and how to implement um queries so we look at the the problem of transactions",
    "start": "689920",
    "end": "697000"
  },
  {
    "text": "first the solution there is to use a mechanism known as sagas um and the the idea of a saga you",
    "start": "697000",
    "end": "706360"
  },
  {
    "text": "know it's sort of kind of a long I suppose if you think about the kind of the everyday meaning it's sort of like a long a long story right um so it it's",
    "start": "706360",
    "end": "715200"
  },
  {
    "text": "actually an old idea comes from a paper that was first you know that was published back in",
    "start": "715200",
    "end": "721160"
  },
  {
    "text": "1987 and so the idea of a saga is instead of a distributed transaction or",
    "start": "721160",
    "end": "726680"
  },
  {
    "text": "a long transaction that spans multiple Services you you use a saga that is a",
    "start": "726680",
    "end": "733720"
  },
  {
    "text": "series of local transactions you know one in service a another in service b",
    "start": "733720",
    "end": "739519"
  },
  {
    "text": "and a third in service C and so on and as you're going to see th those those",
    "start": "739519",
    "end": "744600"
  },
  {
    "text": "individual local transactions are coordinated through some form of a synchronous messaging and in the case of",
    "start": "744600",
    "end": "751680"
  },
  {
    "text": "the create order Sager it would work like this request comes in to create an order the order service would create",
    "start": "751680",
    "end": "758639"
  },
  {
    "text": "that order and it's in a pending state which indicates that it's in the process",
    "start": "758639",
    "end": "765480"
  },
  {
    "text": "of being created you know we actually need to go off from validate Reserve credit and if there was inventory",
    "start": "765480",
    "end": "771880"
  },
  {
    "text": "involved we'd have to go and Reserve infantry and so on so forth then the next step is to go and Reserve credit",
    "start": "771880",
    "end": "779839"
  },
  {
    "text": "in the customer service and assuming that that's successful the final step is",
    "start": "779839",
    "end": "785680"
  },
  {
    "text": "to go and approve the order back in the order service so instead of one",
    "start": "785680",
    "end": "792839"
  },
  {
    "text": "distributed transaction we have a series of local transactions which in some cases ex is",
    "start": "792839",
    "end": "800320"
  },
  {
    "text": "extremely simple to implement but there are a number of sort of challenges with",
    "start": "800320",
    "end": "806160"
  },
  {
    "text": "with implementing sort of data or managing data consistency in this way so",
    "start": "806160",
    "end": "811880"
  },
  {
    "text": "the first off invol first issue you run into is API design you basically could",
    "start": "811880",
    "end": "817079"
  },
  {
    "text": "have a rest call you know synchronous rest request like create order posters",
    "start": "817079",
    "end": "823560"
  },
  {
    "text": "SL orders that now it's initiating what is basically an asynchronous operation",
    "start": "823560",
    "end": "829600"
  },
  {
    "text": "and so there's an issue of well when do you send back a response do you wait until all of the P until that um Saga is",
    "start": "829600",
    "end": "838000"
  },
  {
    "text": "completed which would actually impact availability or do you return immediately once you've initiated the",
    "start": "838000",
    "end": "844680"
  },
  {
    "text": "Saga which means that you can't tell the client the outcome of of the operation",
    "start": "844680",
    "end": "851720"
  },
  {
    "text": "you can just say I've AC I've received the request to create an order and I'm working on it which is actually the",
    "start": "851720",
    "end": "857320"
  },
  {
    "text": "preferred approach but it pushes the burden of continually checking the",
    "start": "857320",
    "end": "862440"
  },
  {
    "text": "status of the order back to the client or you can send them an event but it's complicates your API design the other",
    "start": "862440",
    "end": "869680"
  },
  {
    "text": "problem you run into is in you know if you look at ASD transactions you can",
    "start": "869680",
    "end": "875040"
  },
  {
    "text": "perform an arbitrary number of updates and then execute a roll back statement and it's as if those updates were never",
    "start": "875040",
    "end": "882680"
  },
  {
    "text": "performed with sagas each step is a local transaction that commits its",
    "start": "882680",
    "end": "888759"
  },
  {
    "text": "changes and so you can no you no longer have automatic roll back you actually have to implement design and Implement",
    "start": "888759",
    "end": "896480"
  },
  {
    "text": "compensating transactions that explicitly undo what was done",
    "start": "896480",
    "end": "902040"
  },
  {
    "text": "previously so that's a complication and then the third complication is that Saga are ACD",
    "start": "902040",
    "end": "909199"
  },
  {
    "text": "they're not actually isolated from one another in the sense that acid transactions are isolated so the",
    "start": "909199",
    "end": "915399"
  },
  {
    "text": "execution of the of sagas can be interleaved and they can s they can",
    "start": "915399",
    "end": "921160"
  },
  {
    "text": "basically you can essentially access dat one Saga can access data that is",
    "start": "921160",
    "end": "926920"
  },
  {
    "text": "currently being updated by another Saga which can result in sort of data anomalies and that ends up",
    "start": "926920",
    "end": "934399"
  },
  {
    "text": "requiring the use of counter measures um and i' which I've talked about in detail before that's sort of a",
    "start": "934399",
    "end": "940920"
  },
  {
    "text": "whole other presentation but you've already seen an example of a counter measure where in the example when an",
    "start": "940920",
    "end": "946959"
  },
  {
    "text": "order was created it was in a pending State that's an example of a semantic",
    "start": "946959",
    "end": "952079"
  },
  {
    "text": "lock which indicates to other sagas or other transactions that that order is in",
    "start": "952079",
    "end": "958120"
  },
  {
    "text": "flux and it's still being worked on and to either not attempt to change it or or",
    "start": "958120",
    "end": "964319"
  },
  {
    "text": "to kind of take its state um you know be cautious when when observing its state",
    "start": "964319",
    "end": "971480"
  },
  {
    "text": "and it turns out that this all sounds rather complicated but in in general in",
    "start": "971480",
    "end": "976680"
  },
  {
    "text": "many cases it's actually quite straightforward to implement um so that so that's sort of",
    "start": "976680",
    "end": "983800"
  },
  {
    "text": "the basic idea you have you know you break up what would otherwise be a distributed trans trans action into a",
    "start": "983800",
    "end": "990199"
  },
  {
    "text": "series of local steps so then that sort of raises the question how do the",
    "start": "990199",
    "end": "995759"
  },
  {
    "text": "participants of a saga collaborate you might think well we just use",
    "start": "995759",
    "end": "1001560"
  },
  {
    "text": "rest um and in some cases that might work but there's a whole bunch of issues",
    "start": "1001560",
    "end": "1007360"
  },
  {
    "text": "number one rest is a synchronous protocol that requires the the client",
    "start": "1007360",
    "end": "1012680"
  },
  {
    "text": "and the server to be available during the request so that introduces temporal coupling",
    "start": "1012680",
    "end": "1019560"
  },
  {
    "text": "um and then then the ISS the other issue you run into is how to recover from",
    "start": "1019560",
    "end": "1024798"
  },
  {
    "text": "failure so the you know the customer service could fail that's a simple recovery because the order service could",
    "start": "1024799",
    "end": "1032240"
  },
  {
    "text": "just keep retrying until it succeeds assuming that the Reserve credit operation is item poent but then what",
    "start": "1032240",
    "end": "1040160"
  },
  {
    "text": "happens if the order service fails then the system is sort of in this",
    "start": "1040160",
    "end": "1045199"
  },
  {
    "text": "really weird inconsistent State and it would r on the client to actually",
    "start": "1045199",
    "end": "1051120"
  },
  {
    "text": "continually to keep retrying the create order operation until it succeeds which",
    "start": "1051120",
    "end": "1057480"
  },
  {
    "text": "can work in some situations except that you're sort of relying on a client that is outside of your firewall to ensure",
    "start": "1057480",
    "end": "1064400"
  },
  {
    "text": "that the data inside your system is consistent and as you know users can",
    "start": "1064400",
    "end": "1069919"
  },
  {
    "text": "just close their browser walk away go off for lunch and so that that doesn't feel quite right to",
    "start": "1069919",
    "end": "1075960"
  },
  {
    "text": "me so turns out that a a much better way to to ensure data consistency and to and",
    "start": "1075960",
    "end": "1083600"
  },
  {
    "text": "to reliably Implement sagas is to use asynchronous messaging so the",
    "start": "1083600",
    "end": "1089559"
  },
  {
    "text": "participants in The Saga are exchanging a communicating via a message broker so",
    "start": "1089559",
    "end": "1095720"
  },
  {
    "text": "the order service will will execute its local transaction send a message to Via",
    "start": "1095720",
    "end": "1101640"
  },
  {
    "text": "the message broker to the customer service and and so on and so forth and",
    "start": "1101640",
    "end": "1108600"
  },
  {
    "text": "this will actually ensure that the Saga completes you you use a message broker",
    "start": "1108600",
    "end": "1114919"
  },
  {
    "text": "that give gives you at least once delivery so that means that you know if",
    "start": "1114919",
    "end": "1120080"
  },
  {
    "text": "the order service performs one step and publishes a message the the the message",
    "start": "1120080",
    "end": "1126400"
  },
  {
    "text": "broker will keep trying to deliver that message to the customer service you and deal with the handle the",
    "start": "1126400",
    "end": "1134240"
  },
  {
    "text": "scenario where the customer service is temporarily unavailable and so this means that once the Saga has has started",
    "start": "1134240",
    "end": "1142039"
  },
  {
    "text": "it is guaranteed to complete even if the even if some participants are",
    "start": "1142039",
    "end": "1147080"
  },
  {
    "text": "temporarily unavailable and you also want a message broker that gives you ordered delivery and you want a message",
    "start": "1147080",
    "end": "1153480"
  },
  {
    "text": "broker that lets you scale out consumers while um Ure while preserving ordering",
    "start": "1153480",
    "end": "1159640"
  },
  {
    "text": "which requires you know if you look at modern Brokers like aache kafa they have this feature older ones like active mq",
    "start": "1159640",
    "end": "1167360"
  },
  {
    "text": "do as well rabbit mq not so much you end up having to implement a whole kind of",
    "start": "1167360",
    "end": "1174120"
  },
  {
    "text": "complex mechanism to scale up Rabbid mq in this way um so that's the idea the",
    "start": "1174120",
    "end": "1180480"
  },
  {
    "text": "participants communicate via a message broker that gives you ordered at least once",
    "start": "1180480",
    "end": "1186120"
  },
  {
    "text": "delivery so then that means that each step of a saga is does two things it",
    "start": "1186120",
    "end": "1191320"
  },
  {
    "text": "updates the database you know creates an order reserves credit approves an order",
    "start": "1191320",
    "end": "1198120"
  },
  {
    "text": "and it publishes a message or or sends an event and interestingly there's a",
    "start": "1198120",
    "end": "1204120"
  },
  {
    "text": "there's sort of a sub problem here how to ensure that both of those things happen",
    "start": "1204120",
    "end": "1210360"
  },
  {
    "text": "automically um you know a traditional application you you'd use like the Java transaction API J JTA to have a",
    "start": "1210360",
    "end": "1218559"
  },
  {
    "text": "distributed transaction spanning your database and your message broker um but that's not something we",
    "start": "1218559",
    "end": "1225039"
  },
  {
    "text": "want to use here and later on I'll describe the mechan the a couple of different ways of of ensuring atomicity",
    "start": "1225039",
    "end": "1232919"
  },
  {
    "text": "without using two-phase commit um and then the next question is",
    "start": "1232919",
    "end": "1238880"
  },
  {
    "text": "well how how do we actually coordinate and sequence the series of local",
    "start": "1238880",
    "end": "1244679"
  },
  {
    "text": "transactions so when one trans when one transaction finishes a message needs to",
    "start": "1244679",
    "end": "1250679"
  },
  {
    "text": "be sent to to the next participant so we need some logic to decide based on the",
    "start": "1250679",
    "end": "1256520"
  },
  {
    "text": "outcome of the local transaction who to who to invoke next and there's two",
    "start": "1256520",
    "end": "1263240"
  },
  {
    "text": "possible coordination mechanisms that you can use one is choreography where",
    "start": "1263240",
    "end": "1268640"
  },
  {
    "text": "the decision making is distributed amongst the participants and then the other one is is orchestration where the",
    "start": "1268640",
    "end": "1275720"
  },
  {
    "text": "decision making is centralized in basically a um a workflow or a state",
    "start": "1275720",
    "end": "1281720"
  },
  {
    "text": "state machine sort or or an object that implements a state machine so if we look",
    "start": "1281720",
    "end": "1287360"
  },
  {
    "text": "at choreography um it's actually quite simple so in the",
    "start": "1287360",
    "end": "1292480"
  },
  {
    "text": "and the participants just exchange messages as you're going to see the order service publishes messages that",
    "start": "1292480",
    "end": "1299600"
  },
  {
    "text": "which get consumed by the customer service and vice versa so in the case of the create order Saga you request comes",
    "start": "1299600",
    "end": "1307159"
  },
  {
    "text": "in to create an order it publishes it actually creates the order and it",
    "start": "1307159",
    "end": "1312320"
  },
  {
    "text": "publishes an order created event um then that that event gets get",
    "start": "1312320",
    "end": "1318840"
  },
  {
    "text": "consumed by the customer service which attempt which will then attempt to",
    "start": "1318840",
    "end": "1324320"
  },
  {
    "text": "Reserve credit for that order and then based on the outcome we'll publish an",
    "start": "1324320",
    "end": "1329559"
  },
  {
    "text": "event either a credit reserved event indicating success or a credit limit",
    "start": "1329559",
    "end": "1335360"
  },
  {
    "text": "exceeded event indicating well I tried to Reserve credit but there wasn't any",
    "start": "1335360",
    "end": "1340440"
  },
  {
    "text": "available the order service then receives will receive those one of one",
    "start": "1340440",
    "end": "1346159"
  },
  {
    "text": "of those events and then either approve or reject the order so we just have a bunch",
    "start": "1346159",
    "end": "1353080"
  },
  {
    "text": "of events bouncing back and forth between the services and eventually your",
    "start": "1353080",
    "end": "1358200"
  },
  {
    "text": "system is in an in is in a consistent State the order is created and the",
    "start": "1358200",
    "end": "1363880"
  },
  {
    "text": "credit has been reserved so it's a fairly simple mechanism and in lots of simple",
    "start": "1363880",
    "end": "1370279"
  },
  {
    "text": "scenarios it actually works extremely well and it's quite easy to use",
    "start": "1370279",
    "end": "1375520"
  },
  {
    "text": "especially if you use it if you're stru implementing your business logic using a",
    "start": "1375520",
    "end": "1381120"
  },
  {
    "text": "pattern known as event sourcing which I'll describe um in a little while it",
    "start": "1381120",
    "end": "1386279"
  },
  {
    "text": "also means that the the the the participants are Loosely coupled they're just communicating asynchronously using",
    "start": "1386279",
    "end": "1392720"
  },
  {
    "text": "these events there's no temporal coupling between them um but there are a whole bunch of downsides um so number",
    "start": "1392720",
    "end": "1400080"
  },
  {
    "text": "one the the the coordination is decentralized you can't look at a par",
    "start": "1400080",
    "end": "1405679"
  },
  {
    "text": "single piece of code and see how the cre order Saga is implemented you actually",
    "start": "1405679",
    "end": "1411520"
  },
  {
    "text": "have to look at a whole bunch of event handlers and business logic that are",
    "start": "1411520",
    "end": "1416559"
  },
  {
    "text": "that's publishing events and consuming events there's also cyclic dependencies",
    "start": "1416559",
    "end": "1422200"
  },
  {
    "text": "these services are listening to each other's events which seems sort of a bit of a design smell and then not only that",
    "start": "1422200",
    "end": "1429600"
  },
  {
    "text": "the customer service has to know about all of the order events that could possibly impact the available credit",
    "start": "1429600",
    "end": "1437360"
  },
  {
    "text": "which sort of means that it's having to know a little bit too much about the order service which doesn't seem quite",
    "start": "1437360",
    "end": "1444000"
  },
  {
    "text": "right and then sometimes when you're implementing Saga you just want to tell one of the services to do something but",
    "start": "1444000",
    "end": "1451080"
  },
  {
    "text": "with this approach you can only publish a sort of you know you can announce what",
    "start": "1451080",
    "end": "1456520"
  },
  {
    "text": "you've done and you can't tell what someone else needs to do it's sort of a passive aggressive kind of style of",
    "start": "1456520",
    "end": "1465200"
  },
  {
    "text": "communication um so some but as I said sometimes this works extremely well and if you want to look at a code example um",
    "start": "1465200",
    "end": "1472480"
  },
  {
    "text": "I have quite a few online so the other option is to use orchestration and that's simply where where you have a",
    "start": "1472480",
    "end": "1481360"
  },
  {
    "text": "sort of orchestration object that tells the participants what to do as you're",
    "start": "1481360",
    "end": "1487480"
  },
  {
    "text": "going to see the customer service is told to Reserve credit and then the",
    "start": "1487480",
    "end": "1492960"
  },
  {
    "text": "order service is told to approve the order so instead of a service just saying I've done this you know now that",
    "start": "1492960",
    "end": "1500799"
  },
  {
    "text": "now the participants are being told what to do and so this orchestrator is a",
    "start": "1500799",
    "end": "1506520"
  },
  {
    "text": "persistent object in some ways it's it's almost like another domain object or a DDD Aggregate and it implements a state",
    "start": "1506520",
    "end": "1515039"
  },
  {
    "text": "machine and it and its sole responsibility is to tell a part tell",
    "start": "1515039",
    "end": "1520840"
  },
  {
    "text": "the participants what to do or receive replies from them and then figure out",
    "start": "1520840",
    "end": "1527200"
  },
  {
    "text": "what to do next so when one of these orchestrators is created it it it",
    "start": "1527200",
    "end": "1532600"
  },
  {
    "text": "basically sends a command message as you're going to see to a participant and",
    "start": "1532600",
    "end": "1537640"
  },
  {
    "text": "then gets saved in the database waiting for a reply to come back and you can",
    "start": "1537640",
    "end": "1543799"
  },
  {
    "text": "imagine the the command message has a header that contains the Saga ID that",
    "start": "1543799",
    "end": "1550120"
  },
  {
    "text": "gets returned in the reply so when the reply comes back you can um the framework will P will retrieve the Saga",
    "start": "1550120",
    "end": "1557880"
  },
  {
    "text": "instance from the database hand it the reply The Saga orchestrator then",
    "start": "1557880",
    "end": "1563919"
  },
  {
    "text": "determines what to do next which participant to send a command message to and does it updates its state under goes",
    "start": "1563919",
    "end": "1571480"
  },
  {
    "text": "a state transition in other words and then it gets saved in the database waiting for reply to come back and it",
    "start": "1571480",
    "end": "1577960"
  },
  {
    "text": "just keeps going around this cycle until um you know it it reaches an end",
    "start": "1577960",
    "end": "1586080"
  },
  {
    "text": "state so in the case of the cre order Saga it would work like this request comes into the order service the order",
    "start": "1586080",
    "end": "1593279"
  },
  {
    "text": "service actually in this design it creates the order first and then creates the create order Saga now they in a",
    "start": "1593279",
    "end": "1600360"
  },
  {
    "text": "different design they could be combined that could be combined into one step um so it's sort of using the create",
    "start": "1600360",
    "end": "1608240"
  },
  {
    "text": "order Saga to finalize the creation of the order so the first thing that create",
    "start": "1608240",
    "end": "1613760"
  },
  {
    "text": "order Saga does is send a Reserve credit command message to the order service so",
    "start": "1613760",
    "end": "1620279"
  },
  {
    "text": "instead of Pub sub event based communication this is onetoone sending a command message to a",
    "start": "1620279",
    "end": "1628399"
  },
  {
    "text": "particular service telling it to do something customer service will process",
    "start": "1628399",
    "end": "1634000"
  },
  {
    "text": "this process that command Reserve credit and then send back a reply message which",
    "start": "1634000",
    "end": "1640760"
  },
  {
    "text": "contains the outcome of that operation that gets cons in this case the credit was reserved this gets cons",
    "start": "1640760",
    "end": "1648240"
  },
  {
    "text": "assumed by The Saga which um orchestrator which then approves the",
    "start": "1648240",
    "end": "1654279"
  },
  {
    "text": "order so at a high level if you just kind of squinted at this there's like Services communicating via message",
    "start": "1654279",
    "end": "1661440"
  },
  {
    "text": "channels but the style of communication is very different instead of events it's",
    "start": "1661440",
    "end": "1666519"
  },
  {
    "text": "actually command messages which are invoking commands asynchronously on some",
    "start": "1666519",
    "end": "1673120"
  },
  {
    "text": "other service so you know this is quite a good pattern is it's a little bit more",
    "start": "1673120",
    "end": "1679159"
  },
  {
    "text": "complex than choreography but it does have some benefits first the the the the actual",
    "start": "1679159",
    "end": "1686279"
  },
  {
    "text": "coordination is centralized in one piece of code um you know there if you go look",
    "start": "1686279",
    "end": "1691919"
  },
  {
    "text": "at the code example there is a class that it that implements this create order Saga and you can see the",
    "start": "1691919",
    "end": "1698640"
  },
  {
    "text": "individual steps it also reduces the coupling between the services because",
    "start": "1698640",
    "end": "1703960"
  },
  {
    "text": "the customer service is simply told to Reserve credit release credit it no",
    "start": "1703960",
    "end": "1709240"
  },
  {
    "text": "longer has to know about all of the order life cycle events it it's just focused on doing customer things which",
    "start": "1709240",
    "end": "1716320"
  },
  {
    "text": "is exactly what you want um and it get it gets rid of cyclic",
    "start": "1716320",
    "end": "1722080"
  },
  {
    "text": "dependencies now there is a risk that you could overload The Saga um with too",
    "start": "1722080",
    "end": "1727919"
  },
  {
    "text": "much business logic and so that's something you just want to look out for and avoid you want to push the business",
    "start": "1727919",
    "end": "1734440"
  },
  {
    "text": "logic down into the Saga participants",
    "start": "1734440",
    "end": "1739960"
  },
  {
    "text": "um so that anyway so that that that's orchestration so my preference is you could use choreography for really simple",
    "start": "1740039",
    "end": "1747320"
  },
  {
    "text": "sagas but once it gets you know a little comp more complex you really want to",
    "start": "1747320",
    "end": "1753000"
  },
  {
    "text": "consider using orchestration so that's transaction management which you know which is the",
    "start": "1753000",
    "end": "1759760"
  },
  {
    "text": "much more complex topic and I want to spend a little bit of time talking about",
    "start": "1759760",
    "end": "1765279"
  },
  {
    "text": "um queries so you queries in a microservice architecture often retrieve data that's",
    "start": "1765279",
    "end": "1773240"
  },
  {
    "text": "owned by multiple services so you can imagine in this um online store you need",
    "start": "1773240",
    "end": "1779039"
  },
  {
    "text": "a you want you the client can execute queries that retrieves customer",
    "start": "1779039",
    "end": "1784480"
  },
  {
    "text": "information and Order information so one there's one simple pattern that you can",
    "start": "1784480",
    "end": "1789840"
  },
  {
    "text": "use is API composition and that and what happens there is the the the API Gateway",
    "start": "1789840",
    "end": "1797000"
  },
  {
    "text": "implements that quick query by simply retrieving the data from the services",
    "start": "1797000",
    "end": "1802200"
  },
  {
    "text": "that own the data so in this example it's finding the orders for a given customer so it just goes and gets the",
    "start": "1802200",
    "end": "1808159"
  },
  {
    "text": "customer information from the customer service and then goes and retrieves the orders for that customer from the order",
    "start": "1808159",
    "end": "1815480"
  },
  {
    "text": "service you know join kind of combines the data and returns it quite",
    "start": "1815480",
    "end": "1820799"
  },
  {
    "text": "straightforward and whenever you can you should use this pattern it's just that",
    "start": "1820799",
    "end": "1826440"
  },
  {
    "text": "you're often encounter a query that cannot be implemented efficiently using",
    "start": "1826440",
    "end": "1831720"
  },
  {
    "text": "API composition so here's here's a slightly more complex query which try",
    "start": "1831720",
    "end": "1837799"
  },
  {
    "text": "which finds recently created or finds recently created customers that have",
    "start": "1837799",
    "end": "1844600"
  },
  {
    "text": "placed orders over a certain amount that have been shipped now in a monolithic",
    "start": "1844600",
    "end": "1850399"
  },
  {
    "text": "system that's trivial you just do a join with the appropriate wear clause and you're done and in a microservice",
    "start": "1850399",
    "end": "1857440"
  },
  {
    "text": "architect you could try and Implement that using API composition but it would be pretty",
    "start": "1857440",
    "end": "1864960"
  },
  {
    "text": "inefficient so for instance one way to do it is you you ask the query Ser ask",
    "start": "1864960",
    "end": "1870880"
  },
  {
    "text": "the customer service for all of the recent customers that gives you back a list of customers and then you iterate",
    "start": "1870880",
    "end": "1878039"
  },
  {
    "text": "through that list invoking the order service asking it for its high value",
    "start": "1878039",
    "end": "1884000"
  },
  {
    "text": "orders for that particular customer kind of simple but that could",
    "start": "1884000",
    "end": "1889240"
  },
  {
    "text": "exhibit really high latency because of um lots of round trips basically it's an N plus1 query the other option is you",
    "start": "1889240",
    "end": "1897760"
  },
  {
    "text": "ask the customer service for all of the recently created customers you ask the order service for all of the recently",
    "start": "1897760",
    "end": "1904360"
  },
  {
    "text": "created orders and basically do an in-memory join of th those those two data sets so",
    "start": "1904360",
    "end": "1912360"
  },
  {
    "text": "that's kind of good in the sense that it's just two round trips it's just that each of those queries could give you",
    "start": "1912360",
    "end": "1918279"
  },
  {
    "text": "back a large amount of data that you then have to join together in memory um",
    "start": "1918279",
    "end": "1925120"
  },
  {
    "text": "so that could be also quite inefficient and you could imagine other scenarios where that gets basically you end up",
    "start": "1925120",
    "end": "1931600"
  },
  {
    "text": "implementing a distributed query engine which is really un you know not the best use of your time so that that's sort of",
    "start": "1931600",
    "end": "1938960"
  },
  {
    "text": "the issue with with API composition is that there are just so many there are a",
    "start": "1938960",
    "end": "1944279"
  },
  {
    "text": "lot of scenarios where it really doesn't um kind of it's gets to it's just too",
    "start": "1944279",
    "end": "1950799"
  },
  {
    "text": "difficult to implement it that way so the solution for those for these queries is to use the patent known as cqrs",
    "start": "1950799",
    "end": "1958799"
  },
  {
    "text": "basically the it's a sort of a or command query responsibility segregation",
    "start": "1958799",
    "end": "1964159"
  },
  {
    "text": "which is a very complicated way of saying simply maintain a replica of the",
    "start": "1964159",
    "end": "1969919"
  },
  {
    "text": "data in a format that makes it easy to query um so for a given query or for a",
    "start": "1969919",
    "end": "1978559"
  },
  {
    "text": "given group of queries you def you design a database schema using whatever",
    "start": "1978559",
    "end": "1983919"
  },
  {
    "text": "database technology makes sense for those queries um like you might use elastic",
    "start": "1983919",
    "end": "1989960"
  },
  {
    "text": "search or mongodb depends on the nature of those queries and what what makes it",
    "start": "1989960",
    "end": "1996639"
  },
  {
    "text": "interesting is that that view is kept up to date by subscribing to events that",
    "start": "1996639",
    "end": "2002440"
  },
  {
    "text": "are being published by the order service or by by Sorry by the service that own",
    "start": "2002440",
    "end": "2008559"
  },
  {
    "text": "the data so in this example the customer order view service subscribes to events from the",
    "start": "2008559",
    "end": "2015760"
  },
  {
    "text": "order service and subscribes to events from the customer service and when it",
    "start": "2015760",
    "end": "2020799"
  },
  {
    "text": "receives those events it's updating its replica um so very simple idea in fact I",
    "start": "2020799",
    "end": "2028600"
  },
  {
    "text": "mean people have been using this sort of pattern in a you know for a long time it's very common to say use my SQL or or",
    "start": "2028600",
    "end": "2037320"
  },
  {
    "text": "a Rel databas is your system of record and then copy the data into elastic",
    "start": "2037320",
    "end": "2043679"
  },
  {
    "text": "search or solar so that you can do text searches against it that in a sense is a",
    "start": "2043679",
    "end": "2049000"
  },
  {
    "text": "simple form of cqrs the one difference perhaps is that the view in with cqrs",
    "start": "2049000",
    "end": "2055398"
  },
  {
    "text": "the view is kept up to date in near Real Time by subscribing to events rather",
    "start": "2055399",
    "end": "2060560"
  },
  {
    "text": "than periodically doing etls against the um system of",
    "start": "2060560",
    "end": "2066240"
  },
  {
    "text": "record so in the case of like um orders and customers you know you could you",
    "start": "2066240",
    "end": "2072040"
  },
  {
    "text": "could for instance use mongodb here's one of the examples I have where you",
    "start": "2072040",
    "end": "2077158"
  },
  {
    "text": "know a mongodb document is basically adjacent object there's one mongodb",
    "start": "2077159",
    "end": "2082320"
  },
  {
    "text": "document for each customer it has information about the the customer you",
    "start": "2082320",
    "end": "2087638"
  },
  {
    "text": "know their name their credit limit Etc and it has information about their",
    "start": "2087639",
    "end": "2092960"
  },
  {
    "text": "orders so the customer information is kept up to date by subscribing to Customer Events the order information is",
    "start": "2092960",
    "end": "2100800"
  },
  {
    "text": "kept up to date by subscribing to the order event and the nice thing about",
    "start": "2100800",
    "end": "2106560"
  },
  {
    "text": "this is that you know is storing this what is in essence a pre-join blob",
    "start": "2106560",
    "end": "2113040"
  },
  {
    "text": "of Json um so with one SI one simple primary key query you can retrieve all",
    "start": "2113040",
    "end": "2120599"
  },
  {
    "text": "this information about a customer and their orders and return it to the client",
    "start": "2120599",
    "end": "2125960"
  },
  {
    "text": "that that's requesting the data so very efficient very",
    "start": "2125960",
    "end": "2131160"
  },
  {
    "text": "scalable um so the origin of the name cqrs or command query responsibility",
    "start": "2131160",
    "end": "2137280"
  },
  {
    "text": "segregation comes from the fact that in a traditional application you're supporting but you have commands which",
    "start": "2137280",
    "end": "2143400"
  },
  {
    "text": "are M mutating data you have queries that are retrieving data and normally",
    "start": "2143400",
    "end": "2148839"
  },
  {
    "text": "there is a single data model single schema that's supporting both commands and queries and with cqrs the idea is",
    "start": "2148839",
    "end": "2156760"
  },
  {
    "text": "that you're seg gating them so you have one data model for the commands and",
    "start": "2156760",
    "end": "2163280"
  },
  {
    "text": "another data model for the queries and the the query side data",
    "start": "2163280",
    "end": "2168839"
  },
  {
    "text": "model is just kept up to date by subscribing to the events that are being emitted by the command side whenever um",
    "start": "2168839",
    "end": "2177680"
  },
  {
    "text": "data or more specifically DDD Aggregates are being created updated or",
    "start": "2177680",
    "end": "2183760"
  },
  {
    "text": "deleted and at an architectural level you could very well will have multiple",
    "start": "2183760",
    "end": "2189280"
  },
  {
    "text": "of these query side views the idea is for each group of",
    "start": "2189280",
    "end": "2194359"
  },
  {
    "text": "queries you define a schema that will support that group of queries",
    "start": "2194359",
    "end": "2201000"
  },
  {
    "text": "efficiently so for instance you know if you've got you you need to return Blobs",
    "start": "2201000",
    "end": "2206119"
  },
  {
    "text": "of Json to a um rest through a rest API you could use",
    "start": "2206119",
    "end": "2211440"
  },
  {
    "text": "mongodb whereas if you need to do text search queries you can do elastic search",
    "start": "2211440",
    "end": "2216960"
  },
  {
    "text": "and then if you doing graph queries maybe this is finance and you're doing fraud detection based on a graph of",
    "start": "2216960",
    "end": "2224440"
  },
  {
    "text": "customers and accounts and transactions you would dump the data into a graph",
    "start": "2224440",
    "end": "2229960"
  },
  {
    "text": "database like Neo forj which can you know which efficiently implements graph",
    "start": "2229960",
    "end": "2235960"
  },
  {
    "text": "graph queries and if you wanted to run a traditional report writer you know bi",
    "start": "2235960",
    "end": "2241839"
  },
  {
    "text": "tool you could even use a SQL database as as one of these views",
    "start": "2241839",
    "end": "2248200"
  },
  {
    "text": "um so you know it's kind of you you just basically have as many views as you need",
    "start": "2248200",
    "end": "2254079"
  },
  {
    "text": "to support each group of queries efficiently and and with good good",
    "start": "2254079",
    "end": "2260760"
  },
  {
    "text": "scalability now one interesting thing is that these views are actually disposable you know if you suddenly",
    "start": "2260760",
    "end": "2267720"
  },
  {
    "text": "decide oh this query needs to return an additional attribute that was not",
    "start": "2267720",
    "end": "2273160"
  },
  {
    "text": "previously being stored by The View you can actually just go and rebuild these",
    "start": "2273160",
    "end": "2278880"
  },
  {
    "text": "views from the um source of truth if you're using event sourcing that I'll",
    "start": "2278880",
    "end": "2283960"
  },
  {
    "text": "talk about later you can seally replay all events from the beginning of time and rebuild the views if you're using",
    "start": "2283960",
    "end": "2290839"
  },
  {
    "text": "traditional persistence you you basically do an ETL out of all of the source of Truth databases to reconstruct",
    "start": "2290839",
    "end": "2298720"
  },
  {
    "text": "this View and then use events going forward to keep it up to date so that's",
    "start": "2298720",
    "end": "2305079"
  },
  {
    "text": "that's quite nice and then one issue that you can run into is replication lag you know there",
    "start": "2305079",
    "end": "2312800"
  },
  {
    "text": "is a finite there will be a delay from updating the command side um to that",
    "start": "2312800",
    "end": "2319599"
  },
  {
    "text": "view being updated because well a me a me an event gets published has to flow",
    "start": "2319599",
    "end": "2325359"
  },
  {
    "text": "through the message broker get processed by the query side event handler to",
    "start": "2325359",
    "end": "2330760"
  },
  {
    "text": "update the view um you know that's analogist to querying from a MySQL slave there's",
    "start": "2330760",
    "end": "2338359"
  },
  {
    "text": "always this replication lag and so as a result there's the possibility that you",
    "start": "2338359",
    "end": "2344520"
  },
  {
    "text": "could show stale data to the user um you know like a naively",
    "start": "2344520",
    "end": "2350720"
  },
  {
    "text": "implemented AP UI could um um you know do an update and",
    "start": "2350720",
    "end": "2357640"
  },
  {
    "text": "then immediately turn around and and query the query side and show the old",
    "start": "2357640",
    "end": "2363200"
  },
  {
    "text": "version of the data to the user which would be pretty confusing so as a UI",
    "start": "2363200",
    "end": "2368400"
  },
  {
    "text": "developer you you actually have to do some work to hide this lag from the",
    "start": "2368400",
    "end": "2374359"
  },
  {
    "text": "customer from the user so for instance update the browser side data model you",
    "start": "2374359",
    "end": "2380200"
  },
  {
    "text": "know if you're using angular or react and so as to avoid having to go and",
    "start": "2380200",
    "end": "2385640"
  },
  {
    "text": "query the um query side and with the idea that by the time the user ever",
    "start": "2385640",
    "end": "2391560"
  },
  {
    "text": "triggers a query that query the query side is up to date and interestingly if",
    "start": "2391560",
    "end": "2397440"
  },
  {
    "text": "you look carefully at a lot of complex um uis you often see hints of",
    "start": "2397440",
    "end": "2403480"
  },
  {
    "text": "sort of replication lag you I've seen it in Banks and other other",
    "start": "2403480",
    "end": "2409440"
  },
  {
    "text": "places um anyway so that that's cqrs now in the remaining um few minutes",
    "start": "2409440",
    "end": "2416160"
  },
  {
    "text": "I just want to talk about um transactional mechanis transactional messaging which is a mechanism that's",
    "start": "2416160",
    "end": "2423440"
  },
  {
    "text": "sort of underpinning sagas and underpinning um",
    "start": "2423440",
    "end": "2429440"
  },
  {
    "text": "cqrs so if you you know think about sort of the fundamental kind of sequence of",
    "start": "2429440",
    "end": "2435960"
  },
  {
    "text": "operations um you know with sagas it's like each step of a saga has to update",
    "start": "2435960",
    "end": "2441680"
  },
  {
    "text": "the database and publish a message or send an event uh and likewise if you're just if",
    "start": "2441680",
    "end": "2448680"
  },
  {
    "text": "you're using cqrs whenever this the command side data model is updated you",
    "start": "2448680",
    "end": "2454640"
  },
  {
    "text": "need to um publish an event now turns out that in order for your",
    "start": "2454640",
    "end": "2460400"
  },
  {
    "text": "system to be reliable both of those things have to happen if you update the",
    "start": "2460400",
    "end": "2465520"
  },
  {
    "text": "data and fail to publish an event your system is in an inconsistent State um",
    "start": "2465520",
    "end": "2471280"
  },
  {
    "text": "you know if you publish if you update data commit the transaction crash before publishing the the event um",
    "start": "2471280",
    "end": "2480920"
  },
  {
    "text": "you've got an inconsistency alternatively if in the middle of a transaction you publish a message",
    "start": "2480920",
    "end": "2488560"
  },
  {
    "text": "and then the transaction gets rolled back you have a similar kind of cons",
    "start": "2488560",
    "end": "2493599"
  },
  {
    "text": "inconsistency you you've you've told people that you've changed data when in fact you haven't so there's sort of this",
    "start": "2493599",
    "end": "2500000"
  },
  {
    "text": "really interesting challenge like which um is even more challenging to solve",
    "start": "2500000",
    "end": "2505800"
  },
  {
    "text": "because you cannot use two-phase commit so one solution that can work in some",
    "start": "2505800",
    "end": "2511680"
  },
  {
    "text": "scenarios is to just simply publish to the message broker and then have an",
    "start": "2511680",
    "end": "2517680"
  },
  {
    "text": "event handler that updates the database so this guarantees atomicity right you",
    "start": "2517680",
    "end": "2524000"
  },
  {
    "text": "put you the publishing and the update are guaranteed to happen",
    "start": "2524000",
    "end": "2529560"
  },
  {
    "text": "eventually um but it does mean that a service cannot read its own rights",
    "start": "2529560",
    "end": "2536119"
  },
  {
    "text": "because the the rights don't happen immediately you've got a very inconsistent very eventually consistent",
    "start": "2536119",
    "end": "2543319"
  },
  {
    "text": "data model which makes it basically impossible to write Common forms of business logic that need to do a read to",
    "start": "2543319",
    "end": "2551319"
  },
  {
    "text": "verify certain preconditions and then do an update um so you end up H having to use",
    "start": "2551319",
    "end": "2559119"
  },
  {
    "text": "sort of a more elaborate mechanism this will work in some very simple scenarios but doesn't really work in in most sort",
    "start": "2559119",
    "end": "2566200"
  },
  {
    "text": "of typical business you know Enterprise application business logic so one option",
    "start": "2566200",
    "end": "2572160"
  },
  {
    "text": "is to use a me a mechanism known as event sourcing which is event Centric approach",
    "start": "2572160",
    "end": "2578680"
  },
  {
    "text": "to writing business logic and doing persistence so your business logic is",
    "start": "2578680",
    "end": "2584839"
  },
  {
    "text": "written just solely to generate events and then when it comes to",
    "start": "2584839",
    "end": "2591280"
  },
  {
    "text": "persistence this takes an absolutely fascinating approach basically every one",
    "start": "2591280",
    "end": "2596880"
  },
  {
    "text": "of your business objects or to be more precise DDD Aggregates is persisted as a",
    "start": "2596880",
    "end": "2603359"
  },
  {
    "text": "sequence of events so in other words there's no order table that in your database there's no customer table",
    "start": "2603359",
    "end": "2610000"
  },
  {
    "text": "basically there is an event table that stores the events so when you create an",
    "start": "2610000",
    "end": "2615200"
  },
  {
    "text": "order you insert an event into that table when you approve the order you",
    "start": "2615200",
    "end": "2620400"
  },
  {
    "text": "insert an order approved event and when you ship an order you insert an order shipped",
    "start": "2620400",
    "end": "2625599"
  },
  {
    "text": "event and this is the system of sort of the source of Truth as to the state of",
    "start": "2625599",
    "end": "2631880"
  },
  {
    "text": "your order when you want to re recreate that order in memory you query the database",
    "start": "2631880",
    "end": "2639319"
  },
  {
    "text": "you get the sequence the series of events and you replay them um there's",
    "start": "2639319",
    "end": "2644839"
  },
  {
    "text": "you can imagine there's an apply method on the domain object that takes an event and updates its state you know this is",
    "start": "2644839",
    "end": "2652280"
  },
  {
    "text": "very easy to think about in the context of a bank account where you um you've",
    "start": "2652280",
    "end": "2658040"
  },
  {
    "text": "got credit and debit events that just in that just adjust the current balance so",
    "start": "2658040",
    "end": "2663960"
  },
  {
    "text": "the key thing here is in order to use this you need to retrieve events by the ID of the aggregate um which kind of",
    "start": "2663960",
    "end": "2672359"
  },
  {
    "text": "means that just using a message broker like CFA is not sufficient to implement",
    "start": "2672359",
    "end": "2677680"
  },
  {
    "text": "an event store you actually need the database part in in addition to the",
    "start": "2677680",
    "end": "2683280"
  },
  {
    "text": "messaging component now you can certainly use CFA for the messaging component because the other key aspect",
    "start": "2683280",
    "end": "2690119"
  },
  {
    "text": "of an event store which is why it's really relevant is that um the events",
    "start": "2690119",
    "end": "2696559"
  },
  {
    "text": "that are in inserted into the event store can be subscribed to so the customer service can subscribe to the",
    "start": "2696559",
    "end": "2703200"
  },
  {
    "text": "stream of order events and the order service can subscribe to the stream of customer",
    "start": "2703200",
    "end": "2708680"
  },
  {
    "text": "event um so this gives you one way of",
    "start": "2708680",
    "end": "2714640"
  },
  {
    "text": "reliably sort of one of the guarantees that the event store gives you is every",
    "start": "2714640",
    "end": "2719839"
  },
  {
    "text": "event that is inserted into the event store will be published so this is one",
    "start": "2719839",
    "end": "2725319"
  },
  {
    "text": "mechanism that gives you the atomicity that you need essentially there's instead of",
    "start": "2725319",
    "end": "2732760"
  },
  {
    "text": "having separate State and events there's just events um so it solves the atom",
    "start": "2732760",
    "end": "2739440"
  },
  {
    "text": "atomicity problem that way plus there are these sort of other useful um other",
    "start": "2739440",
    "end": "2744960"
  },
  {
    "text": "benefits of event sourcing namely it preserves the history of domain objects",
    "start": "2744960",
    "end": "2750000"
  },
  {
    "text": "so you can do temporal queries you can actually go back in time to figure out how to retroactively fix the things",
    "start": "2750000",
    "end": "2757599"
  },
  {
    "text": "which can be useful and you get guaranteed ordering um auditing as well the event can store the ID of the user",
    "start": "2757599",
    "end": "2764359"
  },
  {
    "text": "that made the update um but there is a whole bunch of downsides with event",
    "start": "2764359",
    "end": "2770680"
  },
  {
    "text": "sourcing it's a very unfamiliar programming model the events conceptually live forever so you have to",
    "start": "2770680",
    "end": "2778000"
  },
  {
    "text": "deal with the challenge of schema Evolution and supporting all the old all",
    "start": "2778000",
    "end": "2784040"
  },
  {
    "text": "all the old versions of the schemas from the beginning of of time the event store only supports primary key based lookup",
    "start": "2784040",
    "end": "2791319"
  },
  {
    "text": "so it forces you to use cqrs and then and then in terms of sagas",
    "start": "2791319",
    "end": "2797400"
  },
  {
    "text": "it actually does a really good job of supporting choreography because event sourcing just generates the events that",
    "start": "2797400",
    "end": "2804119"
  },
  {
    "text": "drive a choreography based Saga but it doesn't it's not such a good fit for",
    "start": "2804119",
    "end": "2809599"
  },
  {
    "text": "orchestration because it's generating events and we need to translate them into rep those events into reply",
    "start": "2809599",
    "end": "2817319"
  },
  {
    "text": "messages and so there's an extra translation step that you need to implement so anyway it's kind of an",
    "start": "2817319",
    "end": "2823359"
  },
  {
    "text": "interesting approach the other option um is simply to use traditional persistence",
    "start": "2823359",
    "end": "2830680"
  },
  {
    "text": "so you you know when you migrate to a microservice architecture you can just",
    "start": "2830680",
    "end": "2835720"
  },
  {
    "text": "use your traditional persistence you know framework so in the Java world jpa my bad is hibernate so on and so forth",
    "start": "2835720",
    "end": "2843319"
  },
  {
    "text": "but then you have to in order to get the atomicity of of messaging you you have to use the",
    "start": "2843319",
    "end": "2850839"
  },
  {
    "text": "transactional outbox pattern so what that means is you write sort of normal",
    "start": "2850839",
    "end": "2857000"
  },
  {
    "text": "code like this that saves your you know in this case the order in the database and then publishes the um domain event",
    "start": "2857000",
    "end": "2865760"
  },
  {
    "text": "so that sort of looks kind of straightforward but what's actually happening under the covers is the domain",
    "start": "2865760",
    "end": "2872960"
  },
  {
    "text": "event publisher is not directly publishing to the message broker but",
    "start": "2872960",
    "end": "2878359"
  },
  {
    "text": "it's inserting a message into a message table that's basically functioning as",
    "start": "2878359",
    "end": "2884119"
  },
  {
    "text": "the outbox for that service and that's done as part of the assd transaction",
    "start": "2884119",
    "end": "2890520"
  },
  {
    "text": "that's updating the order or updating the um customer so we get G you know we have an",
    "start": "2890520",
    "end": "2897960"
  },
  {
    "text": "assd guarantee at this point you know when the transaction commits a message will be in the outbox the question you",
    "start": "2897960",
    "end": "2905680"
  },
  {
    "text": "have is then how do you get the message out of the outbox the message table to",
    "start": "2905680",
    "end": "2912040"
  },
  {
    "text": "the message broker so the preferred way is to actually tail the um database",
    "start": "2912040",
    "end": "2919559"
  },
  {
    "text": "transaction log or commit log every committed change ends up in the well by",
    "start": "2919559",
    "end": "2926359"
  },
  {
    "text": "definition ends up in the transaction log and commit log and so there's how",
    "start": "2926359",
    "end": "2931720"
  },
  {
    "text": "you do that depends on the particular database whether I mean so MySQL bin log",
    "start": "2931720",
    "end": "2938839"
  },
  {
    "text": "um postgress right ahead log or so on so that the actual mechanism is very",
    "start": "2938839",
    "end": "2945000"
  },
  {
    "text": "database specific but there's Frameworks including the one I've written that just takes care of that the other option",
    "start": "2945000",
    "end": "2951240"
  },
  {
    "text": "which is very generic is just simply to poll periodically execute a query",
    "start": "2951240",
    "end": "2957119"
  },
  {
    "text": "against the database that finds the the messages that haven't been published publishes them and then marks them as",
    "start": "2957119",
    "end": "2965680"
  },
  {
    "text": "having been published but that can introduce issues around that has issues around",
    "start": "2965680",
    "end": "2971000"
  },
  {
    "text": "latency anyway so you got two mechanisms as I said the preferred one is to tail",
    "start": "2971000",
    "end": "2976720"
  },
  {
    "text": "the transaction log which and that's an approach which is becoming extreme increasingly common so that's my talk",
    "start": "2976720",
    "end": "2984640"
  },
  {
    "text": "you know so in summary right you know asynchronous messaging plays a key role",
    "start": "2984640",
    "end": "2990680"
  },
  {
    "text": "in in solving the distributed data management problems in a microservice architecture you know services will",
    "start": "2990680",
    "end": "2997839"
  },
  {
    "text": "typically publish events either to implement choreography based sagas or to",
    "start": "2997839",
    "end": "3004040"
  },
  {
    "text": "implement um cqrs you know Services can also send",
    "start": "3004040",
    "end": "3009559"
  },
  {
    "text": "command exchange command reply messages to implement orchestration based um",
    "start": "3009559",
    "end": "3015960"
  },
  {
    "text": "sagas and then you need some mechanism to automically update State and exchange",
    "start": "3015960",
    "end": "3022680"
  },
  {
    "text": "messages whether that's event sourcing or the transactional out outbox pattern",
    "start": "3022680",
    "end": "3029480"
  },
  {
    "text": "so that's my talk um thank you for listening hope that you found it useful",
    "start": "3029480",
    "end": "3034760"
  },
  {
    "text": "um and if you know I'd love to get feedback so please ping me shoot me an",
    "start": "3034760",
    "end": "3039920"
  },
  {
    "text": "email and also you know consider buying my book 40% off today only thank you",
    "start": "3039920",
    "end": "3046860"
  },
  {
    "text": "[Applause]",
    "start": "3046860",
    "end": "3052199"
  }
]