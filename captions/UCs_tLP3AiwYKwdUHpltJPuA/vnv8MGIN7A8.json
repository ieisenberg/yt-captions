[
  {
    "text": "thank you yes I was going to talk about the perfect language but",
    "start": "5240",
    "end": "10740"
  },
  {
    "text": "it's kind of seems like the cool thing to talk about now is Bass",
    "start": "10740",
    "end": "16139"
  },
  {
    "text": "and I wonder if I should just do a complete pivot and and do a talk about the space exploration instead",
    "start": "16139",
    "end": "22199"
  },
  {
    "text": "I wanted to do sort of a what-if thing like what if what if instead of of the Soviet Union uh Australians have",
    "start": "22199",
    "end": "28920"
  },
  {
    "text": "actually been the first people to put a live creature into space like I can see when that would go that would",
    "start": "28920",
    "end": "35460"
  },
  {
    "text": "be like for a laugh you just then drop it is up instead of dogs right",
    "start": "35460",
    "end": "40500"
  },
  {
    "text": "and we'll forever be looking up to the sky worrying about when Leica is going to come down",
    "start": "40500",
    "end": "46440"
  },
  {
    "text": "no actually I'm going to talk about dogs instead um this is it",
    "start": "46440",
    "end": "53460"
  },
  {
    "text": "is a beagle this is a thing he does I think this is how he got to become",
    "start": "53460",
    "end": "59760"
  },
  {
    "text": "um a celebrity he's a celebrity on Instagram you should totally follow him as my Regal Beagle and",
    "start": "59760",
    "end": "67140"
  },
  {
    "text": "he got into prominence by",
    "start": "67140",
    "end": "72240"
  },
  {
    "text": "holding food in his mouth not eating it just sitting there holding it",
    "start": "72240",
    "end": "77840"
  },
  {
    "text": "anticipation building as it were and drooling a lot she can see",
    "start": "77840",
    "end": "82979"
  },
  {
    "text": "and then before it leaves you can see a bit of drool",
    "start": "82979",
    "end": "87380"
  },
  {
    "text": "that that big drip awesome uh yeah so basically",
    "start": "90360",
    "end": "96780"
  },
  {
    "text": "all of my slides I'm going to have said on them so I figured I'd just introduce him it's not going to be uh animated all the",
    "start": "96780",
    "end": "104280"
  },
  {
    "text": "time and I want to talk about the perfect language I believe so",
    "start": "104280",
    "end": "109560"
  },
  {
    "text": "quite the perfect language the thing about the perfect language is there is no such thing uh",
    "start": "109560",
    "end": "116820"
  },
  {
    "text": "languages are usually designed for a purpose and to accommodate that purpose you tend to make trade-offs like you",
    "start": "116820",
    "end": "123240"
  },
  {
    "text": "might make trade-offs to to have a more performant language not to have a more correct language and so on",
    "start": "123240",
    "end": "129840"
  },
  {
    "text": "and so Perfection sort of depends on",
    "start": "129840",
    "end": "135239"
  },
  {
    "text": "what you need it for and in any case I don't think we have the perfect language for for any",
    "start": "135239",
    "end": "141660"
  },
  {
    "text": "particular purpose yet but I think we have gotten so far that we might be able to express extrapolate",
    "start": "141660",
    "end": "148560"
  },
  {
    "text": "a few of the good parts if not certainly all of them by by looking at what we've got and what",
    "start": "148560",
    "end": "154319"
  },
  {
    "text": "seems to work we might sort of get a rough idea well maybe we should be going",
    "start": "154319",
    "end": "159360"
  },
  {
    "text": "not so much where we've actually gotten um do you disagree with me though is there",
    "start": "159360",
    "end": "165120"
  },
  {
    "text": "a perfect language do you have any suggestions yeah",
    "start": "165120",
    "end": "171360"
  },
  {
    "text": "Esperanto beautiful I'm not a huge fan of Esperanto I'm a",
    "start": "171360",
    "end": "176879"
  },
  {
    "text": "Klingon person myself",
    "start": "176879",
    "end": "179780"
  },
  {
    "text": "I actually said are you a Klingon um any others",
    "start": "183360",
    "end": "189780"
  },
  {
    "text": "somebody's got to say PHP and this isn't going to be funny another one",
    "start": "189780",
    "end": "195900"
  },
  {
    "text": "JavaScript actually you know I figured",
    "start": "195900",
    "end": "202019"
  },
  {
    "text": "why don't we just sort of try and find some metrics for which language is still the most popular and we can probably",
    "start": "202019",
    "end": "207120"
  },
  {
    "text": "assume that the more popular languages are going to be the more perfect ones right",
    "start": "207120",
    "end": "212220"
  },
  {
    "text": "so I found this this chart this basically uh it's a site called githubs.info which collects metrics from",
    "start": "212220",
    "end": "219120"
  },
  {
    "text": "GitHub and this one has collected the amount of repos using a certain language",
    "start": "219120",
    "end": "226140"
  },
  {
    "text": "and we can see JavaScript right there at the top we've got Java python CSS is a",
    "start": "226140",
    "end": "232260"
  },
  {
    "text": "programming language did you know it is actually Turing complete for getting anywhere near that is an",
    "start": "232260",
    "end": "238799"
  },
  {
    "text": "absolute nightmare as if normal CSS will send oh I love this chart though it's got so",
    "start": "238799",
    "end": "244200"
  },
  {
    "text": "much interesting stuff on it so yeah it's going to developers in the audience represent",
    "start": "244200",
    "end": "250680"
  },
  {
    "text": "and this one two three awesome four is slowly admissing",
    "start": "250680",
    "end": "256739"
  },
  {
    "text": "to it that's brilliant yeah Scarlet's gonna be the next Enterprise language it's huge",
    "start": "256739",
    "end": "263040"
  },
  {
    "text": "it's actually just below coffee script back I can't believe that I I mean I can't",
    "start": "263040",
    "end": "270000"
  },
  {
    "text": "believe covers coffee script is actually even on the list but there you go",
    "start": "270000",
    "end": "275220"
  },
  {
    "text": "there's there's been Al the the scripting language for the Vim tax editor",
    "start": "275220",
    "end": "281100"
  },
  {
    "text": "it's more popular than go and it's also more popular than emacs",
    "start": "281100",
    "end": "286860"
  },
  {
    "text": "list which I personally don't care about curse so much for uh in my sleep incidentally it's right there above",
    "start": "286860",
    "end": "292259"
  },
  {
    "text": "Haskell and closure particularly feeling I'm feeling",
    "start": "292259",
    "end": "298500"
  },
  {
    "text": "particularly smug about that one disclosure is going to be the new the new Big Enterprise list Sprite it's it's",
    "start": "298500",
    "end": "304979"
  },
  {
    "text": "huge everybody uses it but of course if you're a list programmer",
    "start": "304979",
    "end": "310620"
  },
  {
    "text": "the idea you want to be using is obviously emacs so emacs Let's Be Still ahead anyway let's",
    "start": "310620",
    "end": "317639"
  },
  {
    "text": "look at the perfect language JavaScript do you know it",
    "start": "317639",
    "end": "322740"
  },
  {
    "text": "can you actually read this code because I can't actually change the font size so I hope you can I might actually have to",
    "start": "322740",
    "end": "327900"
  },
  {
    "text": "read it out for you so this says x equals one y equals one less than uh",
    "start": "327900",
    "end": "336979"
  },
  {
    "text": "Boolean invert minus minus X if the Boolean invertise is a bang so",
    "start": "337020",
    "end": "343740"
  },
  {
    "text": "what does that evaluating have you seen this before then shut up",
    "start": "343740",
    "end": "350720"
  },
  {
    "text": "anybody I mean we can go through it right it's fairly obvious we set X to one",
    "start": "350880",
    "end": "356820"
  },
  {
    "text": "and I'm going to be using the cursor to highlight instead of the the cat bother I think so access one",
    "start": "356820",
    "end": "365900"
  },
  {
    "text": "and so this bit uh decrements X by one and",
    "start": "365900",
    "end": "372660"
  },
  {
    "text": "Returns the result of the decrement so basically at this point this is zero",
    "start": "372660",
    "end": "378660"
  },
  {
    "text": "and the Boolean inverse of zero zero is full C so that should be true",
    "start": "378660",
    "end": "384419"
  },
  {
    "text": "and so one less than true is false because JavaScript",
    "start": "384419",
    "end": "392240"
  },
  {
    "text": "so I think we got to X's zero and Y is false yeah",
    "start": "392340",
    "end": "397740"
  },
  {
    "text": "so let's evaluate and see what it turned into X is one why is one",
    "start": "397740",
    "end": "402840"
  },
  {
    "text": "okay what's going on so yeah",
    "start": "402840",
    "end": "408960"
  },
  {
    "text": "you know JavaScript is is a scripting language for browsers right you remember back in the day when browsers didn't",
    "start": "408960",
    "end": "415020"
  },
  {
    "text": "necessarily support JavaScript what we would do is inside the script tag to make sure that the contents of the",
    "start": "415020",
    "end": "421380"
  },
  {
    "text": "script tag weren't dumped into our web page we will put some HTML comment in there",
    "start": "421380",
    "end": "428460"
  },
  {
    "text": "and to this day JavaScript s of HTML comments so that's what's going on that's one and a comment",
    "start": "428460",
    "end": "437340"
  },
  {
    "text": "because JavaScript and I could go and I could make the the typical crazy examples like two plus two",
    "start": "437340",
    "end": "444840"
  },
  {
    "text": "is string 22 obviously to minus",
    "start": "444840",
    "end": "450440"
  },
  {
    "text": "string two is zero obviously array this is a no joke",
    "start": "450960",
    "end": "458160"
  },
  {
    "text": "all right 16 join lower minus two plus",
    "start": "458160",
    "end": "464220"
  },
  {
    "text": "Batman yes",
    "start": "464220",
    "end": "468500"
  },
  {
    "text": "but I mean so these are the crazy parts of JavaScript and",
    "start": "469259",
    "end": "474479"
  },
  {
    "text": "um you also have Nifty Parts like it's kind of a really neat functional",
    "start": "474479",
    "end": "480120"
  },
  {
    "text": "language in there without the types to be fair but yeah you can do a map",
    "start": "480120",
    "end": "485699"
  },
  {
    "text": "over an array with an inline function functions are the first class",
    "start": "485699",
    "end": "492780"
  },
  {
    "text": "in JavaScript this one multiplies the contents of with two so you get two four and six",
    "start": "492780",
    "end": "500220"
  },
  {
    "text": "very nice you've got Co routines this is new in es6 so you can go like oops",
    "start": "500220",
    "end": "508500"
  },
  {
    "text": "can create a chorus in here one heal two ink three",
    "start": "508500",
    "end": "516060"
  },
  {
    "text": "call that and see what it applies to a stream of one two and three amazing",
    "start": "516060",
    "end": "521839"
  },
  {
    "text": "ah yeah so let's talk about rust our nearest program is in the audience",
    "start": "521839",
    "end": "530100"
  },
  {
    "text": "not a single one but there's one who's sort of hand waving about it it's a very new language it's it's",
    "start": "530100",
    "end": "535740"
  },
  {
    "text": "designed to be the next big systems language I think I might actually have a shot I",
    "start": "535740",
    "end": "540959"
  },
  {
    "text": "mean the competition is not exactly rough it's basically C can you design a",
    "start": "540959",
    "end": "546959"
  },
  {
    "text": "language that's better than C Maybe so yeah um I got a function called say hello",
    "start": "546959",
    "end": "552839"
  },
  {
    "text": "which basically makes a string saying oh hi person from wherever they're from",
    "start": "552839",
    "end": "560220"
  },
  {
    "text": "and I got two variables here Pinky and Ponyville probably see where I'm intending to go with this",
    "start": "560220",
    "end": "567120"
  },
  {
    "text": "so standing out upright say hello",
    "start": "567120",
    "end": "572580"
  },
  {
    "text": "Pinky and Ponyville should print Pinky and Ponyville oops",
    "start": "572580",
    "end": "580320"
  },
  {
    "text": "so yeah this Rapala mine is sort of coupled together",
    "start": "580320",
    "end": "585959"
  },
  {
    "text": "and the service just crashed let me just restarted and the compilation should actually work",
    "start": "585959",
    "end": "591540"
  },
  {
    "text": "after I relearn the page what even happened ah",
    "start": "591540",
    "end": "597480"
  },
  {
    "text": "and this is my code and now it compiles no it doesn't yeah we've got a completion out",
    "start": "598019",
    "end": "604019"
  },
  {
    "text": "because this is not a string which my function is expecting it's a string slice a",
    "start": "604019",
    "end": "609540"
  },
  {
    "text": "reference to string slice because why would you have less than two string data",
    "start": "609540",
    "end": "615000"
  },
  {
    "text": "types in your language so what I'm going to need to do is I'm going to convert them to Strings just",
    "start": "615000",
    "end": "620580"
  },
  {
    "text": "push into their methods for that because obviously this is not a string already that would be too easy",
    "start": "620580",
    "end": "626760"
  },
  {
    "text": "I know oh right the right trade isn't in scope",
    "start": "626760",
    "end": "631800"
  },
  {
    "text": "then it out to supplement the right trait if you know any Haskell that's about the same as a type class you can think of it as",
    "start": "631800",
    "end": "637680"
  },
  {
    "text": "an interface um but I need to to use it the right method and send it out I need",
    "start": "637680",
    "end": "644339"
  },
  {
    "text": "to import write in scope so now that compares but we've got",
    "start": "644339",
    "end": "650399"
  },
  {
    "text": "another error oh yeah so stand it out at Rice does not take either a string or a",
    "start": "650399",
    "end": "655920"
  },
  {
    "text": "string slant it takes an array of bytes",
    "start": "655920",
    "end": "661160"
  },
  {
    "text": "so I go ass bites I think yes that's bites",
    "start": "661160",
    "end": "667740"
  },
  {
    "text": "and it combines oh thank you finally let's celebrate by printing that twice",
    "start": "667740",
    "end": "674040"
  },
  {
    "text": "oh yeah it says value moved here value is",
    "start": "674040",
    "end": "680040"
  },
  {
    "text": "here after move so um the thing about rust is it has these",
    "start": "680040",
    "end": "685740"
  },
  {
    "text": "ideas of ownership and and borrowing instead of just",
    "start": "685740",
    "end": "691079"
  },
  {
    "text": "giving you a garbage collection because performance reasons I mentioned",
    "start": "691079",
    "end": "696300"
  },
  {
    "text": "trade-offs earlier this is one of them it's it's he's better than C where you just have to to remember to allocate and",
    "start": "696300",
    "end": "701700"
  },
  {
    "text": "deallocate your own stuff but yeah so essentially what I need to be doing here is instead of passing the string along",
    "start": "701700",
    "end": "708180"
  },
  {
    "text": "which will transfer ownership to the cello function and thus I can't use it twice",
    "start": "708180",
    "end": "713760"
  },
  {
    "text": "I pass a reference to string I'm just borrowing it and then compiling it says yeah I'm",
    "start": "713760",
    "end": "720300"
  },
  {
    "text": "passing string set not references I need to add this all over",
    "start": "720300",
    "end": "724940"
  },
  {
    "text": "and now finally it does what I wanted to do",
    "start": "725700",
    "end": "731360"
  },
  {
    "text": "celebrate by printing it six times rust",
    "start": "731399",
    "end": "737279"
  },
  {
    "text": "yeah so this is my life with rusts it's like",
    "start": "737279",
    "end": "743060"
  },
  {
    "text": "I get closer and closer and I don't ever feel like I'm guessing just to the point where I can actually make it compile",
    "start": "743160",
    "end": "748500"
  },
  {
    "text": "it's just more and more work cropping up so the thing is though",
    "start": "748500",
    "end": "756180"
  },
  {
    "text": "well you've seen both with the JavaScript and with us is these are actually language features",
    "start": "756180",
    "end": "761579"
  },
  {
    "text": "believe it or not JavaScript was decided to be quick and dirty it was designed back in 95",
    "start": "761579",
    "end": "768120"
  },
  {
    "text": "in legendarily in only 10 days",
    "start": "768120",
    "end": "773339"
  },
  {
    "text": "um to be a very small scripting language for web pages so it",
    "start": "773339",
    "end": "779820"
  },
  {
    "text": "was supposed to just print some like an incrementing time counter or something",
    "start": "779820",
    "end": "785579"
  },
  {
    "text": "on web pages it was never actually designed to be an language that you wrote applications in so the trade-ups",
    "start": "785579",
    "end": "791940"
  },
  {
    "text": "that were being made um we're about",
    "start": "791940",
    "end": "797459"
  },
  {
    "text": "just making it simple like the two plus string two that's because you were probably going to be making a string",
    "start": "797459",
    "end": "802740"
  },
  {
    "text": "anyway to print on the web page so just do the casting from integers to Strings automatically and not have the use of",
    "start": "802740",
    "end": "809160"
  },
  {
    "text": "bother with it so user doesn't want to care about this that was a good idea back then maybe not so much now why we are actually writing",
    "start": "809160",
    "end": "816540"
  },
  {
    "text": "big applications in JavaScript both client-side and server side horrifyingly",
    "start": "816540",
    "end": "822180"
  },
  {
    "text": "and and so JavaScript is sort of catching up to the new reality of what it's supposed to",
    "start": "822180",
    "end": "828600"
  },
  {
    "text": "be doing and we got the the tc39 committee uh slowly redesigning the",
    "start": "828600",
    "end": "834240"
  },
  {
    "text": "language into something that is almost usable we've got typescript happening which which",
    "start": "834240",
    "end": "839820"
  },
  {
    "text": "had even more but we have to remember where it came from and while it's really tempting to",
    "start": "839820",
    "end": "845820"
  },
  {
    "text": "just take out these silica coercions like two minus string two in this case",
    "start": "845820",
    "end": "850980"
  },
  {
    "text": "you're probably not making a string so so let's try and make the the string two into an integer and you get zero and and",
    "start": "850980",
    "end": "857220"
  },
  {
    "text": "this we've kind of learned that this is a bad idea in serious language it is but",
    "start": "857220",
    "end": "862380"
  },
  {
    "text": "if we were to take it out of JavaScript we will break the internet we would most likely have a lot of web",
    "start": "862380",
    "end": "868740"
  },
  {
    "text": "pages just suddenly not working anymore and that is actually a bit unfortunate which is why these weird things are",
    "start": "868740",
    "end": "875700"
  },
  {
    "text": "still there it's not straightforward to take it out furthermore rust",
    "start": "875700",
    "end": "880980"
  },
  {
    "text": "is the system's language it's it's very strict about this idea of zero cost abstractions",
    "start": "880980",
    "end": "887220"
  },
  {
    "text": "that all the language features that they've added don't add a performance",
    "start": "887220",
    "end": "893160"
  },
  {
    "text": "hit and so you have all this borrowing stuff which gets really annoying but it's",
    "start": "893160",
    "end": "899519"
  },
  {
    "text": "there for a good reason and the good reason is it's not being seen you don't",
    "start": "899519",
    "end": "904740"
  },
  {
    "text": "have to keep all this stuff in your own heads you've got the compiler complaining at you when you're not doing",
    "start": "904740",
    "end": "910860"
  },
  {
    "text": "the right thing um it's not providing much help and and managing all this for you but",
    "start": "910860",
    "end": "917459"
  },
  {
    "text": "it's telling you at every step no this won't won't do whereas in C",
    "start": "917459",
    "end": "923160"
  },
  {
    "text": "you allocate something if we get to deallocate it you've got a memory leak and it's quite the limit",
    "start": "923160",
    "end": "930600"
  },
  {
    "text": "so that's actually a feature yeah remember what what low level programming used to be like any anybody done see",
    "start": "930600",
    "end": "937560"
  },
  {
    "text": "yeah do you know what I'm talking about we feel the pain",
    "start": "937560",
    "end": "942779"
  },
  {
    "text": "I certainly did and much as really gets on my nerves sometimes at least it's",
    "start": "942779",
    "end": "949019"
  },
  {
    "text": "nothing as bad as that in fact um I've been sort of being unfair to rust I",
    "start": "949019",
    "end": "955980"
  },
  {
    "text": "was just basically going through the compiler errors and and um doing what a fixing what is that was",
    "start": "955980",
    "end": "962699"
  },
  {
    "text": "wrong right there which actually doesn't lead to Optimal arrest what I could be doing instead of just taking strings",
    "start": "962699",
    "end": "967920"
  },
  {
    "text": "here and or reference to Strings I could just literally take the string slices",
    "start": "967920",
    "end": "974240"
  },
  {
    "text": "which these are and instead of using the standard out thing",
    "start": "974639",
    "end": "981480"
  },
  {
    "text": "which takes bytes that I need to be converting to there's a macro called print line would you believe it",
    "start": "981480",
    "end": "989040"
  },
  {
    "text": "no wait it has a new line print which will convert anything to a string",
    "start": "989040",
    "end": "996060"
  },
  {
    "text": "and print it so I can just go say Hello Pinky Pony",
    "start": "996060",
    "end": "1001220"
  },
  {
    "text": "Even should be enough it looks",
    "start": "1001220",
    "end": "1007100"
  },
  {
    "text": "it's sort of just it takes a while when learning rust but eventually you get to",
    "start": "1007100",
    "end": "1012440"
  },
  {
    "text": "the point where you have a better feel of what you should be doing with the language rather than just struggling",
    "start": "1012440",
    "end": "1018079"
  },
  {
    "text": "with it all the time you still struggle but it does get better oh look at that a lot easier",
    "start": "1018079",
    "end": "1025659"
  },
  {
    "text": "so rust is actually interesting to me more in the sense of what I could",
    "start": "1026900",
    "end": "1032178"
  },
  {
    "text": "slowly turn it into with enough macros and standard Library niceties than what it is when you start",
    "start": "1032179",
    "end": "1040220"
  },
  {
    "text": "out with it uh the macros are really nice meta",
    "start": "1040220",
    "end": "1046819"
  },
  {
    "text": "programming in any language is nice it has its issues in that macros don't tend to produce nice error messages but",
    "start": "1046819",
    "end": "1053780"
  },
  {
    "text": "it takes me from from struggling with uh",
    "start": "1053780",
    "end": "1059660"
  },
  {
    "text": "the low level integrities to just being able to to print something that is sort of like a",
    "start": "1059660",
    "end": "1066260"
  },
  {
    "text": "string without worrying about exactly what I'm doing there it's basically abstraction",
    "start": "1066260",
    "end": "1072940"
  },
  {
    "text": "um oh wait so I had this crazy idea actually um I wanted to make",
    "start": "1073580",
    "end": "1080120"
  },
  {
    "text": "a trans pilot or whatever you could call it from from some syntax that that Maps cleaning",
    "start": "1080120",
    "end": "1087500"
  },
  {
    "text": "to rust and maybe actually add automatic wrapping with a garbage collector",
    "start": "1087500",
    "end": "1093200"
  },
  {
    "text": "and suddenly you get autism is a high level language because",
    "start": "1093200",
    "end": "1099440"
  },
  {
    "text": "rust actually comes really close um",
    "start": "1099440",
    "end": "1104320"
  },
  {
    "text": "and it wouldn't hurt so much to write rust but you would be fairly close to the metal anyway",
    "start": "1105380",
    "end": "1111799"
  },
  {
    "text": "this is one of my money language projects it might never happen it probably never will happen but it's fun",
    "start": "1111799",
    "end": "1117020"
  },
  {
    "text": "to think about these things anyway I should probably Define where I'm going with this talk",
    "start": "1117020",
    "end": "1123100"
  },
  {
    "text": "um I don't want to tell you how to be the perfect language",
    "start": "1123200",
    "end": "1128200"
  },
  {
    "text": "think about the ones that we got already and how we can improve them even if that means kind of forking them into a new",
    "start": "1128660",
    "end": "1135200"
  },
  {
    "text": "kind of language or or just slap on your syntax in an existing language but just",
    "start": "1135200",
    "end": "1140240"
  },
  {
    "text": "looking at what's there already and what you can actually be using that for isn't necessarily about everybody going",
    "start": "1140240",
    "end": "1147020"
  },
  {
    "text": "out and writing a new language I want to examine where I think",
    "start": "1147020",
    "end": "1153919"
  },
  {
    "text": "we should be adding I'm going to add some of my own opinions here you might disagree but that's fine I'm gonna have them anyway",
    "start": "1153919",
    "end": "1161360"
  },
  {
    "text": "um and I really want you to be asking because I'm slowly coming to terms with having",
    "start": "1161360",
    "end": "1167840"
  },
  {
    "text": "to ask this myself do we really need any more languages well I think we do but I think every",
    "start": "1167840",
    "end": "1174080"
  },
  {
    "text": "language needs a reason to exist you can't just sit down and say oh I'm going to write a language unless you're doing it to teach yourself",
    "start": "1174080",
    "end": "1180620"
  },
  {
    "text": "how to write a language which is fine like everybody should make a toy list once in their lives but if you're",
    "start": "1180620",
    "end": "1187400"
  },
  {
    "text": "planning on making a language and introducing it to the world then make sure that there's a reason for it like",
    "start": "1187400",
    "end": "1193400"
  },
  {
    "text": "in the case of rust you might feel very strongly that we do need a new slightly better systems",
    "start": "1193400",
    "end": "1199760"
  },
  {
    "text": "language and I think we did um in the case of JavaScript maybe you",
    "start": "1199760",
    "end": "1204919"
  },
  {
    "text": "should just think don't but",
    "start": "1204919",
    "end": "1210080"
  },
  {
    "text": "whatever you do if if you have a new language sort of growing inside of you then make sure that you thought through",
    "start": "1210080",
    "end": "1218179"
  },
  {
    "text": "what the audience for it should be what they're going to need and not just with throwing a new",
    "start": "1218179",
    "end": "1224780"
  },
  {
    "text": "language out there for no reason at all that's not good for anybody",
    "start": "1224780",
    "end": "1229880"
  },
  {
    "text": "so my perfect language speaking for myself is a language where I don't have to",
    "start": "1229880",
    "end": "1237200"
  },
  {
    "text": "think okay let's hope it is",
    "start": "1237200",
    "end": "1242720"
  },
  {
    "text": "um I don't want to be to be dealing with on the low level",
    "start": "1242720",
    "end": "1248120"
  },
  {
    "text": "details like you saw me having to do in Russia actually the perfect language will kind of look like this",
    "start": "1248120",
    "end": "1253820"
  },
  {
    "text": "hi computer please figure out what I want you to do then do it",
    "start": "1253820",
    "end": "1260179"
  },
  {
    "text": "and that's about as simple as it gets right that will be honestly the perfect language actually we could even make it",
    "start": "1260179",
    "end": "1266179"
  },
  {
    "text": "even better because we know from airline that this there's punctuation things like the the",
    "start": "1266179",
    "end": "1271780"
  },
  {
    "text": "dot the comma and the semicolon can get really confusing so let's just remove those",
    "start": "1271780",
    "end": "1277539"
  },
  {
    "text": "and it is literally the perfect language obviously I'm joking but",
    "start": "1277539",
    "end": "1284240"
  },
  {
    "text": "there's some truth to it we can't really have the computer read our minds but we can have them",
    "start": "1284240",
    "end": "1291440"
  },
  {
    "text": "be dealing with all the the mechanical stuff in our programming languages I made you a quote",
    "start": "1291440",
    "end": "1298400"
  },
  {
    "text": "with a picture of said looking very seriously I asked you to to make sure that you remember the quote so thinking",
    "start": "1298400",
    "end": "1304039"
  },
  {
    "text": "about the Machinery programming start thinking about the problem you're solving you shouldn't ideally in my",
    "start": "1304039",
    "end": "1309500"
  },
  {
    "text": "perfect language you shouldn't need to be worrying about making loops and",
    "start": "1309500",
    "end": "1315140"
  },
  {
    "text": "memory allocations and stuff like that um the language should be able to abstract all that away for you so you",
    "start": "1315140",
    "end": "1321620"
  },
  {
    "text": "can focus on certainly an actual problem that you're dealing with",
    "start": "1321620",
    "end": "1326620"
  },
  {
    "text": "so I got a shopping list for my perfect language I want garbage collection because I work",
    "start": "1326659",
    "end": "1332360"
  },
  {
    "text": "with enough wood bus to know that uh not having it I actually hurts",
    "start": "1332360",
    "end": "1337760"
  },
  {
    "text": "unless you really need performance obviously and and I'd like to extend that even to to other kinds of resource",
    "start": "1337760",
    "end": "1344840"
  },
  {
    "text": "management like say you open a file handle or a network connection and you want to make sure the compiler",
    "start": "1344840",
    "end": "1351220"
  },
  {
    "text": "notices that you forget to close it and and tassio for it that would be",
    "start": "1351220",
    "end": "1356659"
  },
  {
    "text": "brilliant I want to meet ability by default because if there's one thing one single",
    "start": "1356659",
    "end": "1364640"
  },
  {
    "text": "thing I could think of that makes it easier to reason about your program it's that things Don't Go Changing randomly",
    "start": "1364640",
    "end": "1372559"
  },
  {
    "text": "like if you're storing state in some object and you pass a reference to that objective to use some other object",
    "start": "1372559",
    "end": "1379159"
  },
  {
    "text": "somewhere on the other side of your code base and it goes and mutates the state of your object without you necessarily",
    "start": "1379159",
    "end": "1386299"
  },
  {
    "text": "seeing the code that does it that's a lot of reasoning ever had if",
    "start": "1386299",
    "end": "1392120"
  },
  {
    "text": "there's a bug there you are going to spend a lot of time finding what's been messing with your state",
    "start": "1392120",
    "end": "1398179"
  },
  {
    "text": "so I really really like this idea I mean immutability by default it helps so much",
    "start": "1398179",
    "end": "1404179"
  },
  {
    "text": "in in making code clearer the one thing I really I really learned from closure actually",
    "start": "1404179",
    "end": "1411279"
  },
  {
    "text": "but most importantly higher order programming which basically means if you see",
    "start": "1411380",
    "end": "1418700"
  },
  {
    "text": "something you should be able to abstract it if you see some mechanical piece of code",
    "start": "1418700",
    "end": "1425360"
  },
  {
    "text": "repeating a lot you should be able to move that out into the standard library or even into to a language feature so",
    "start": "1425360",
    "end": "1433100"
  },
  {
    "text": "that the next time you have to do this you don't need to think about how to do it you just know that",
    "start": "1433100",
    "end": "1438799"
  },
  {
    "text": "this function here would do it for me let me give you my my favorite example",
    "start": "1438799",
    "end": "1444200"
  },
  {
    "text": "of this thing idea so this is a bit of time script",
    "start": "1444200",
    "end": "1452299"
  },
  {
    "text": "I've got basically a database of votes for which is more",
    "start": "1452299",
    "end": "1457580"
  },
  {
    "text": "awesome ponies or puppies and I got a vote function which registers",
    "start": "1457580",
    "end": "1464059"
  },
  {
    "text": "a vote in the database basically takes the key for what I'm voting for and increments it by one",
    "start": "1464059",
    "end": "1470720"
  },
  {
    "text": "oh and if it doesn't exist there already I need to make sure that I create one and make it one",
    "start": "1470720",
    "end": "1477760"
  },
  {
    "text": "so basically um",
    "start": "1477980",
    "end": "1483260"
  },
  {
    "text": "but database puppies are best",
    "start": "1483260",
    "end": "1489740"
  },
  {
    "text": "so now we've got a the new tally bonus 557 and I think the state resets for every",
    "start": "1489740",
    "end": "1496159"
  },
  {
    "text": "invocation so it does actually mutate but recent",
    "start": "1496159",
    "end": "1502220"
  },
  {
    "text": "uh let's check with ponies let's try it with Otis Orchards are",
    "start": "1502220",
    "end": "1509240"
  },
  {
    "text": "awesome actually this is Australia right it should be",
    "start": "1509240",
    "end": "1514580"
  },
  {
    "text": "coca is a rhythm so we gotta wait for Quake Esther",
    "start": "1514580",
    "end": "1520159"
  },
  {
    "text": "now do you tend to do this a lot if you're dealing with just a basic key value mapping data type like the JavaScript",
    "start": "1520159",
    "end": "1527779"
  },
  {
    "text": "object or a dictionary or hash whatever you want to call it this particular pattern here do you see",
    "start": "1527779",
    "end": "1533299"
  },
  {
    "text": "that a lot I know in my JavaScript code it's all over the place like see if there's a key",
    "start": "1533299",
    "end": "1539600"
  },
  {
    "text": "there already and if there is do this to the value if not then create a new value",
    "start": "1539600",
    "end": "1546860"
  },
  {
    "text": "so this is a perfect candidate for for abstraction and this is basically my",
    "start": "1546860",
    "end": "1552679"
  },
  {
    "text": "favorite Haskell function this isn't in the standard library for JavaScript but it is in Haskell Haskell",
    "start": "1552679",
    "end": "1558559"
  },
  {
    "text": "is really good at having every last function imaginable for a particular",
    "start": "1558559",
    "end": "1565159"
  },
  {
    "text": "data type this isn't like this is why Haskell is better than JavaScript but this is just",
    "start": "1565159",
    "end": "1570260"
  },
  {
    "text": "Haskell access function let's put it in JavaScript too it's called insert width",
    "start": "1570260",
    "end": "1576260"
  },
  {
    "text": "and it takes a function it takes a key it takes a value and it takes the object to act on",
    "start": "1576260",
    "end": "1582380"
  },
  {
    "text": "and I'm not bothering to put the types in here because I didn't have enough screen space basically",
    "start": "1582380",
    "end": "1588020"
  },
  {
    "text": "but the function takes the previous value and the new value I'll show you that",
    "start": "1588020",
    "end": "1595700"
  },
  {
    "text": "so if object has own property",
    "start": "1595700",
    "end": "1601100"
  },
  {
    "text": "key then object",
    "start": "1601100",
    "end": "1607880"
  },
  {
    "text": "key is function object key Val",
    "start": "1607880",
    "end": "1615580"
  },
  {
    "text": "as objects key is about so basically",
    "start": "1615580",
    "end": "1622640"
  },
  {
    "text": "I got the new value here or the the units by which I want to change the",
    "start": "1622640",
    "end": "1628400"
  },
  {
    "text": "previous value and I've got a function which takes the previous value object key and the new value Val",
    "start": "1628400",
    "end": "1635539"
  },
  {
    "text": "and Returns what it should be which means oh I need to also",
    "start": "1635539",
    "end": "1642158"
  },
  {
    "text": "return object to make it work the same which means I can get rid of all this",
    "start": "1642380",
    "end": "1649720"
  },
  {
    "text": "this one and I can replace it with an indication of insert width",
    "start": "1650000",
    "end": "1657320"
  },
  {
    "text": "which looks like this it's a function which takes a and b and returns a plus b",
    "start": "1657320",
    "end": "1664640"
  },
  {
    "text": "literally just add these two numbers together and it takes the key that I'm updating and it takes the number one which is",
    "start": "1664640",
    "end": "1671720"
  },
  {
    "text": "what I want to be updating it by and it takes the database that should be working exactly in the",
    "start": "1671720",
    "end": "1677600"
  },
  {
    "text": "same way except now I move this into wow",
    "start": "1677600",
    "end": "1683179"
  },
  {
    "text": "if I could I move it into the standard library for for JavaScript objects",
    "start": "1683179",
    "end": "1688460"
  },
  {
    "text": "but I could move it into my my util file or something like we're all good",
    "start": "1688460",
    "end": "1695440"
  },
  {
    "text": "um this is abstraction in a nutshell and of",
    "start": "1695779",
    "end": "1700820"
  },
  {
    "text": "course it goes much further but this is just my favorite example your language needs to be able to to",
    "start": "1700820",
    "end": "1708679"
  },
  {
    "text": "let you do this but I think pretty much every language does I also wouldn't half mind having a good",
    "start": "1708679",
    "end": "1715700"
  },
  {
    "text": "type system I want types to be able to help you not",
    "start": "1715700",
    "end": "1721520"
  },
  {
    "text": "just be there as sort of annotations to make let the compiler make better code for you faster code for you I want types",
    "start": "1721520",
    "end": "1728299"
  },
  {
    "text": "that are able to not just tell you when you're making a stupid mistake that's going to crush your program but to be",
    "start": "1728299",
    "end": "1734480"
  },
  {
    "text": "able to just something as basic as the autocomplete",
    "start": "1734480",
    "end": "1739580"
  },
  {
    "text": "also to be ideally to be able to infer what sort of function it thinks you",
    "start": "1739580",
    "end": "1745340"
  },
  {
    "text": "might be writing and fill out as much of it as possible which is something that languages like Idris are able to do",
    "start": "1745340",
    "end": "1751580"
  },
  {
    "text": "right now like if you're writing a concat function for two lists is it's almost going to be",
    "start": "1751580",
    "end": "1758179"
  },
  {
    "text": "able to to infer from the the type signature that you're written out with a function what the function is going to",
    "start": "1758179",
    "end": "1763460"
  },
  {
    "text": "have to look like which is an amazing feature",
    "start": "1763460",
    "end": "1768500"
  },
  {
    "text": "on the other on the flip side it would be nice to have a language that is also",
    "start": "1768500",
    "end": "1773779"
  },
  {
    "text": "sufficiently low level because I think most code doesn't really need to",
    "start": "1773779",
    "end": "1779480"
  },
  {
    "text": "run performantly but I think key parts of",
    "start": "1779480",
    "end": "1784580"
  },
  {
    "text": "your program will always need to be optimized and so",
    "start": "1784580",
    "end": "1790179"
  },
  {
    "text": "um when you actually need to be writing some really performant code it would be great if you could",
    "start": "1790340",
    "end": "1796640"
  },
  {
    "text": "actually drop down to the low level to sort of where rust lives rather than my Haskell or JavaScript lives",
    "start": "1796640",
    "end": "1803059"
  },
  {
    "text": "and do the mechanical parts because",
    "start": "1803059",
    "end": "1808880"
  },
  {
    "text": "you will probably know how to optimize your code sometimes a lot better than the compiler",
    "start": "1808880",
    "end": "1815720"
  },
  {
    "text": "can of course the obvious answer then and a counter that that the Haskell",
    "start": "1815720",
    "end": "1821179"
  },
  {
    "text": "Community often makes is that yeah but that's just a matter of making the compilers matter",
    "start": "1821179",
    "end": "1826880"
  },
  {
    "text": "and for the past 25 years or so Haskell has actually made a bit of progress on",
    "start": "1826880",
    "end": "1832279"
  },
  {
    "text": "on having a really smart optimizing compiler but it's still very far from from actually",
    "start": "1832279",
    "end": "1839380"
  },
  {
    "text": "[Music] um matching the the performance level of something like hand optimized assembler",
    "start": "1839700",
    "end": "1845779"
  },
  {
    "text": "or I'll have a hardcore you want to be I'd even suggest that that rust by default is probably going to be a lot",
    "start": "1845779",
    "end": "1853220"
  },
  {
    "text": "faster than Haskell by default uh and also might also be just to have",
    "start": "1853220",
    "end": "1858620"
  },
  {
    "text": "ffi if you don't know what ffi is it short for foreign function interfaces",
    "start": "1858620",
    "end": "1865159"
  },
  {
    "text": "and it's the thing that higher level languages tend to have one thing because",
    "start": "1865159",
    "end": "1870380"
  },
  {
    "text": "they need to be able to talk to the to the to the operating system and",
    "start": "1870380",
    "end": "1876559"
  },
  {
    "text": "it's also a place where you can sort of plug in hand optimize code basically an f45 will",
    "start": "1876559",
    "end": "1883640"
  },
  {
    "text": "let you usually call out a c code oh I'm running out of time that's",
    "start": "1883640",
    "end": "1888679"
  },
  {
    "text": "brilliant I'll talk faster uh and I don't really have the best answer",
    "start": "1888679",
    "end": "1896179"
  },
  {
    "text": "here for how to make your program properly performant but um ffi is actually starting to look tempting not so much in the past where",
    "start": "1896179",
    "end": "1902659"
  },
  {
    "text": "for instance in in Ruby if you are going to to hand optimize",
    "start": "1902659",
    "end": "1907700"
  },
  {
    "text": "part of your Ruby code rubico by default being fairly slow you would be writing C and plugging it into",
    "start": "1907700",
    "end": "1915020"
  },
  {
    "text": "the Ruby interpreter nowadays we could be using languages like rust for that",
    "start": "1915020",
    "end": "1920960"
  },
  {
    "text": "and suddenly that seems slightly less unappealing so maybe that is the way to",
    "start": "1920960",
    "end": "1926360"
  },
  {
    "text": "go um now let's talk about",
    "start": "1926360",
    "end": "1931640"
  },
  {
    "text": "not so much my perspective as I think perhaps the perspective of most Developers",
    "start": "1931640",
    "end": "1936860"
  },
  {
    "text": "which is don't make me learn basically I've learned my languages already I can",
    "start": "1936860",
    "end": "1945020"
  },
  {
    "text": "do a lot with them why should I need to learn anymore I get things done anyway the thing is",
    "start": "1945020",
    "end": "1950539"
  },
  {
    "text": "familiarity really matters and this can come in many shapes",
    "start": "1950539",
    "end": "1957278"
  },
  {
    "text": "um I want to be able to introduce new Concepts to",
    "start": "1958760",
    "end": "1964580"
  },
  {
    "text": "to all programmers like the ability to to do abstraction using higher order",
    "start": "1964580",
    "end": "1969860"
  },
  {
    "text": "functions fortunately most languages can do that now even Java just got it recently",
    "start": "1969860",
    "end": "1975260"
  },
  {
    "text": "uh but we've had it I mean and basically unless we've had it for 50 years",
    "start": "1975260",
    "end": "1982159"
  },
  {
    "text": "and it's a little sort of trickling into languages that have been designed for other purposes than than just being",
    "start": "1982159",
    "end": "1988760"
  },
  {
    "text": "functional um and I think the way to do this is not to throw",
    "start": "1988760",
    "end": "1995179"
  },
  {
    "text": "Haskell Anthem because they will be terrified and rightly so but to try and and social make a",
    "start": "1995179",
    "end": "2001539"
  },
  {
    "text": "compromise actually Scarlet is kind of a compromise in that sense and that is got basically all the ideas",
    "start": "2001539",
    "end": "2007960"
  },
  {
    "text": "of a fancy academic language like Haskell but it's got the familiarity of",
    "start": "2007960",
    "end": "2013419"
  },
  {
    "text": "sort of mostly looking like Java and I've literally seen Scarlet Soul as",
    "start": "2013419",
    "end": "2019059"
  },
  {
    "text": "Java without the semicolons and that totally works it just sort of from there you can sort of start pushing",
    "start": "2019059",
    "end": "2026679"
  },
  {
    "text": "Java developers towards nice functional programming ideas for instance I've",
    "start": "2026679",
    "end": "2033100"
  },
  {
    "text": "played around with a syntax of my own so I already made a language before",
    "start": "2033100",
    "end": "2039159"
  },
  {
    "text": "called bootle I never actually finished it but I made it so my new language is going to be called modular 2 obviously",
    "start": "2039159",
    "end": "2046059"
  },
  {
    "text": "well I don't know it sounds like a disease but that's that's fine",
    "start": "2046059",
    "end": "2052118"
  },
  {
    "text": "so what I've done here is I basically this is my master plan for making JavaScript programmers into Haskell",
    "start": "2052119",
    "end": "2057158"
  },
  {
    "text": "programmers I've taken a syntax that looks social like typescript except I've added",
    "start": "2057159",
    "end": "2062980"
  },
  {
    "text": "pattern matching here oh I've shortened function down to FN yeah",
    "start": "2062980",
    "end": "2069700"
  },
  {
    "text": "that's actually my biggest complaint about JavaScript the aid character function keyword",
    "start": "2069700",
    "end": "2076000"
  },
  {
    "text": "and you've got pattern matching you've got types you've got coloring in",
    "start": "2076000",
    "end": "2082960"
  },
  {
    "text": "in this kind of style he got trades I was stolen from rust they're basically type classes from",
    "start": "2082960",
    "end": "2088480"
  },
  {
    "text": "Haskell I've kept the the generator functions from from JavaScript because they're amazing",
    "start": "2088480",
    "end": "2094720"
  },
  {
    "text": "and I was still an algebraic data types from hath calls they've got higher kind of types because",
    "start": "2094720",
    "end": "2100599"
  },
  {
    "text": "they got out higher kind of types uh have you even been playing around with dependent types like an interest",
    "start": "2100599",
    "end": "2107020"
  },
  {
    "text": "but it also sort of looks like JavaScript",
    "start": "2107020",
    "end": "2112060"
  },
  {
    "text": "all right actually use the tested the syntax in a couple of people",
    "start": "2112060",
    "end": "2117760"
  },
  {
    "text": "um who are basically JavaScript Developers and sort of having having them compare it to",
    "start": "2117760",
    "end": "2123820"
  },
  {
    "text": "Haskell And when they see Haskell they go oh what the hell is this I've never seen this before it's it's really",
    "start": "2123820",
    "end": "2129099"
  },
  {
    "text": "confusing which indeed it is if you don't know it and and comparing it to this syntax and",
    "start": "2129099",
    "end": "2134560"
  },
  {
    "text": "they go yes I could understand this so that's my grand plan for",
    "start": "2134560",
    "end": "2140859"
  },
  {
    "text": "tricking JavaScript developers into becoming into talking using words like monads and an applicative function and",
    "start": "2140859",
    "end": "2146920"
  },
  {
    "text": "whatnotes it's going to be a grand future uh speaking of syntax though",
    "start": "2146920",
    "end": "2153520"
  },
  {
    "text": "I think this is an excellent strategy for for introducing these Concepts to to",
    "start": "2153520",
    "end": "2161800"
  },
  {
    "text": "people who are programmers already but for new programmers perhaps not so much",
    "start": "2161800",
    "end": "2167380"
  },
  {
    "text": "I just came let me give me this amazing example I found on on Twitter of somebody having it doesn't matter",
    "start": "2167380",
    "end": "2173980"
  },
  {
    "text": "what the intuition is it's basically a fairly normal thing to realize about applicative functions you don't even",
    "start": "2173980",
    "end": "2180820"
  },
  {
    "text": "need to know what they are but no it is this is a function from foa to B into F of major F of B and",
    "start": "2180820",
    "end": "2189040"
  },
  {
    "text": "the guy says Oh look The F actually this is a function that takes the F and moves",
    "start": "2189040",
    "end": "2194260"
  },
  {
    "text": "it inside the parentheses on both sides is a bit like the the basic rules of",
    "start": "2194260",
    "end": "2199900"
  },
  {
    "text": "algebra that you learn in high school so the F goes in front of each element and that",
    "start": "2199900",
    "end": "2208480"
  },
  {
    "text": "it's kind of like multiplication is what it reminds me of and",
    "start": "2208480",
    "end": "2214359"
  },
  {
    "text": "it doesn't really matter about the inside what I want to highlight is how obvious it is looking at the",
    "start": "2214359",
    "end": "2220540"
  },
  {
    "text": "hospital Syntax for the type the app just goes from being outside to",
    "start": "2220540",
    "end": "2225579"
  },
  {
    "text": "being inside the parentheses so for a laugh I translated this into typescript and it looks different",
    "start": "2225579",
    "end": "2233339"
  },
  {
    "text": "is it still obesity because to me this is just I mean I can understand what what the type signature says but I don't",
    "start": "2233440",
    "end": "2240940"
  },
  {
    "text": "see that thing going on there so I think syntax actually",
    "start": "2240940",
    "end": "2246760"
  },
  {
    "text": "can really matter despite having a lot of language designers insisting that it doesn't but",
    "start": "2246760",
    "end": "2252220"
  },
  {
    "text": "that's usually just because they have bad syntax if I'm being honest um",
    "start": "2252220",
    "end": "2258700"
  },
  {
    "text": "this really got to me actually as an argument for for the importance of thinking about",
    "start": "2258700",
    "end": "2264820"
  },
  {
    "text": "syntax and yeah it is important that you don't learn too much at once",
    "start": "2264820",
    "end": "2271060"
  },
  {
    "text": "like maybe if you can defer the syntax learning for later then that would be a",
    "start": "2271060",
    "end": "2276820"
  },
  {
    "text": "great thing to do a great example is I used to be closer developer ones and",
    "start": "2276820",
    "end": "2284500"
  },
  {
    "text": "I was sort of evangelizing for closure and going out and telling people you should do a little enclosure",
    "start": "2284500",
    "end": "2290500"
  },
  {
    "text": "um and the first thing they asked me is okay I'm Gonna Learn closer it looks cool what idea should I be using",
    "start": "2290500",
    "end": "2296920"
  },
  {
    "text": "and obviously I say emacs because for one thing emacs is usually",
    "start": "2296920",
    "end": "2303640"
  },
  {
    "text": "the best idea there is for any any kind of lisp and for another thing emacs is amazing",
    "start": "2303640",
    "end": "2308680"
  },
  {
    "text": "and everybody should learn it just sing um but the thing that usually happened",
    "start": "2308680",
    "end": "2313839"
  },
  {
    "text": "then is they went out decided to learn closure and emacs",
    "start": "2313839",
    "end": "2319359"
  },
  {
    "text": "and emac says let's say it has a steep learning curve for one thing you also need to learn another language to use it",
    "start": "2319359",
    "end": "2325780"
  },
  {
    "text": "properly he makes lisp and it's completely different from any editor you're likely to have seen before",
    "start": "2325780",
    "end": "2331240"
  },
  {
    "text": "if you haven't seen your math already so what happened is you went from having the closure",
    "start": "2331240",
    "end": "2336940"
  },
  {
    "text": "learning curve to having two steep learning curves and that usually meant people dropped off",
    "start": "2336940",
    "end": "2342220"
  },
  {
    "text": "so fortunately um like Sam an IntelliJ plugin showed up",
    "start": "2342220",
    "end": "2347619"
  },
  {
    "text": "and most of these people were probably Java developers I could just say yeah you know the the idea you're already",
    "start": "2347619",
    "end": "2353140"
  },
  {
    "text": "using there's a plugin for closure and that I think to have a look for an adoption so I wish I got one minute left",
    "start": "2353140",
    "end": "2361839"
  },
  {
    "text": "I'm actually always wondering if I should skip this or if I can rush for it",
    "start": "2361839",
    "end": "2366880"
  },
  {
    "text": "um I think I'm going to make a run for it so focus on tooling",
    "start": "2366880",
    "end": "2375339"
  },
  {
    "text": "and I don't just mean ide's they that's really important to you I mean",
    "start": "2375339",
    "end": "2382359"
  },
  {
    "text": "I have this perfect little example I've seen Adam Developers I personally really really care about",
    "start": "2382359",
    "end": "2388780"
  },
  {
    "text": "formatting code and I've used tabs to do it then you're with the Devil but I've",
    "start": "2388780",
    "end": "2393880"
  },
  {
    "text": "seen M developers just writing out uncode the in the ugliest way imaginable",
    "start": "2393880",
    "end": "2399220"
  },
  {
    "text": "just sort of hardly even using spaces or line breaks and",
    "start": "2399220",
    "end": "2405099"
  },
  {
    "text": "I look at that and I I completely freak out this is like absolutely horrible",
    "start": "2405099",
    "end": "2411339"
  },
  {
    "text": "but what they do suddenly is they there is a key and Adam format runs which is",
    "start": "2411339",
    "end": "2417460"
  },
  {
    "text": "um I think is part of the Quran tooling and it reformats the code into perfectly consistently for my sedan code and",
    "start": "2417460",
    "end": "2425380"
  },
  {
    "text": "suddenly you have stopped worrying about formatting code which takes a little bit",
    "start": "2425380",
    "end": "2430540"
  },
  {
    "text": "of cognitive load off you and and it's such a simple thing too",
    "start": "2430540",
    "end": "2436900"
  },
  {
    "text": "you should focus on community because the more documentation there is the the better it is for you the more",
    "start": "2436900",
    "end": "2443619"
  },
  {
    "text": "places you have to to learn and and get help um for your language",
    "start": "2443619",
    "end": "2449859"
  },
  {
    "text": "the better that is for you as well as everybody else coming into to use your language",
    "start": "2449859",
    "end": "2456220"
  },
  {
    "text": "um more importantly focus on both make sure that you have an easy way to share",
    "start": "2456220",
    "end": "2461619"
  },
  {
    "text": "code and by that I basically mean a good package manager that isn't just helping",
    "start": "2461619",
    "end": "2466960"
  },
  {
    "text": "you put a code in to use for yourself but to publish code that you're written yourself",
    "start": "2466960",
    "end": "2472900"
  },
  {
    "text": "rushing for a hair but I I want to I had to have an a slide of a saying for this particular",
    "start": "2472900",
    "end": "2479079"
  },
  {
    "text": "point with three dogs just to emphasize make it easy to check out",
    "start": "2479079",
    "end": "2484180"
  },
  {
    "text": "uh I'm gonna totally skip that so what I'm going to do next",
    "start": "2484180",
    "end": "2491320"
  },
  {
    "text": "I got all my wild ideas I want to do that transpiler for us I think that's totally going to change the the surface",
    "start": "2491320",
    "end": "2497140"
  },
  {
    "text": "of rest I've got my budget letter two thing I",
    "start": "2497140",
    "end": "2502960"
  },
  {
    "text": "would like to build a language that sort of fits in between pure script which has a very terrifying syntax and typescript",
    "start": "2502960",
    "end": "2509380"
  },
  {
    "text": "which doesn't really have a good type system finally I discovered that a subset of JavaScript",
    "start": "2509380",
    "end": "2517599"
  },
  {
    "text": "would actually compile very neatly to to Ally so I figured hey let's let's put Javascript properly on the server side",
    "start": "2517599",
    "end": "2524500"
  },
  {
    "text": "on the basic current VM there is and as an added bonus I think",
    "start": "2524500",
    "end": "2531460"
  },
  {
    "text": "um it would really upset Joe Armstrong who hates JavaScript yeah",
    "start": "2531460",
    "end": "2536500"
  },
  {
    "text": "so if if my my JavaScript Syntax for airline becomes more popular than Airline itself then Joe is going to kill",
    "start": "2536500",
    "end": "2542859"
  },
  {
    "text": "me and that will be amazing I could actually believe in myself",
    "start": "2542859",
    "end": "2550480"
  },
  {
    "text": "um if I actually were to design my language and I think that would look something like Idris basically I want to take",
    "start": "2550480",
    "end": "2557380"
  },
  {
    "text": "dependent types which is a really powerful idea and I want to make it accessible to normal people like me and",
    "start": "2557380",
    "end": "2563320"
  },
  {
    "text": "that might actually just be Idris um it will need a little bit of work some addition to this to the standard",
    "start": "2563320",
    "end": "2569560"
  },
  {
    "text": "libraries I'm tooling but I think maybe it might work I should maybe just go right tooling",
    "start": "2569560",
    "end": "2575859"
  },
  {
    "text": "actually uh I mean the world certainly needs another text editor and I would really be able to love to make one",
    "start": "2575859",
    "end": "2582640"
  },
  {
    "text": "and I think it might be a bit of work though we'll see what I am actually doing",
    "start": "2582640",
    "end": "2588640"
  },
  {
    "text": "though is I'm building a package manager for any language",
    "start": "2588640",
    "end": "2593980"
  },
  {
    "text": "because I've been learning a lot of languages recently like Idris and and pony like very small Niche but very very",
    "start": "2593980",
    "end": "2602079"
  },
  {
    "text": "cool languages and what they all have in common because there's actually really hard to write one is they don't have a",
    "start": "2602079",
    "end": "2607300"
  },
  {
    "text": "package manager and I think until they get one the community is going to stay small so I",
    "start": "2607300",
    "end": "2612640"
  },
  {
    "text": "decided let's go and write one that they could just use that will work for for any language",
    "start": "2612640",
    "end": "2619740"
  },
  {
    "text": "[Music] this I'll read it totally about the abstractions I have this quote though",
    "start": "2620330",
    "end": "2626560"
  },
  {
    "text": "about abstractions it's not don't repeat yourself it's don't be the machine if you can figure out how to make loops",
    "start": "2626560",
    "end": "2632920"
  },
  {
    "text": "obsolete then your language has one basically",
    "start": "2632920",
    "end": "2638338"
  },
  {
    "text": "I want you to look around you I want to see what cool tooling there is out there in different languages and I want you to",
    "start": "2640000",
    "end": "2645040"
  },
  {
    "text": "go make them for for your own language that would be amazing",
    "start": "2645040",
    "end": "2650079"
  },
  {
    "text": "you should have done at least one new language a year just to to keep yourself current on what's going on",
    "start": "2650079",
    "end": "2656380"
  },
  {
    "text": "and out in the world it's going to make you a better programmer in your own language as well I guarantee you",
    "start": "2656380",
    "end": "2662500"
  },
  {
    "text": "finally if you do find that niche you should totally go and build your own language",
    "start": "2662500",
    "end": "2668619"
  },
  {
    "text": "it's going to be a lot of fun and lots of hideous hard work but it's going to be amazing",
    "start": "2668619",
    "end": "2674560"
  },
  {
    "text": "thank you that's all [Applause]",
    "start": "2674560",
    "end": "2682760"
  }
]