[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "okay Lum is uh yeah lumus jdk proposal um uh consists of two parts viral",
    "start": "12559",
    "end": "19199"
  },
  {
    "start": "19000",
    "end": "42000"
  },
  {
    "text": "threats and structed concurrency and yeah like Yip said there's probably a lot of talks already",
    "start": "19199",
    "end": "24880"
  },
  {
    "text": "on conference about this because it's uh hot at the moment so I wanted to uh",
    "start": "24880",
    "end": "31400"
  },
  {
    "text": "attack it from uh the angle that um what does this mean for us as developer right",
    "start": "31400",
    "end": "36920"
  },
  {
    "text": "now what should we do um what do I know need to know about it um this is copied from the uh jdk",
    "start": "36920",
    "end": "45360"
  },
  {
    "start": "42000",
    "end": "76000"
  },
  {
    "text": "proposal page basically uh Java already has a very powerful and flexible",
    "start": "45360",
    "end": "51000"
  },
  {
    "text": "concurrency model however it might be complex to use and of course we have",
    "start": "51000",
    "end": "56520"
  },
  {
    "text": "different Alternatives available like I already said we already have reactive and callbacks and those kind of things",
    "start": "56520",
    "end": "62840"
  },
  {
    "text": "uh but none of them uh hides the complexity for the developer so the goal of project Loom is to make concurrent",
    "start": "62840",
    "end": "69840"
  },
  {
    "text": "programming in Java very very easy for us as",
    "start": "69840",
    "end": "75000"
  },
  {
    "text": "developers going back to the root of the problem uh we probably built",
    "start": "75000",
    "end": "80479"
  },
  {
    "start": "76000",
    "end": "155000"
  },
  {
    "text": "applications um that have a lot of uh requests a lot of transactions and also",
    "start": "80479",
    "end": "85960"
  },
  {
    "text": "make a lot of network calls or maybe even IO calls and you probably know if you make a request to an external",
    "start": "85960",
    "end": "92159"
  },
  {
    "text": "service for instance and it take a couple of milliseconds or hundreds of milliseconds to get the response that in",
    "start": "92159",
    "end": "98280"
  },
  {
    "text": "the meantime that threat that handles that request cannot do anything else so it's kind of waste we want to optimize",
    "start": "98280",
    "end": "105119"
  },
  {
    "text": "our application that if we have to wait for an IO call or for a network call that in the meantime we can do something",
    "start": "105119",
    "end": "111000"
  },
  {
    "text": "else so of course we can schedule with um operating system threats so in the",
    "start": "111000",
    "end": "117880"
  },
  {
    "text": "classic request per threat a model for each request we could say we have a different thread a Java thread which um",
    "start": "117880",
    "end": "125560"
  },
  {
    "text": "is one to one to an operating system thread and then the other threads can do something else to basically keep our",
    "start": "125560",
    "end": "130879"
  },
  {
    "text": "true put up and uh make efficient use of our resources but the problem is",
    "start": "130879",
    "end": "137879"
  },
  {
    "text": "operating system threats are kind of expensive they have a uh each have their own stack they so they have a big",
    "start": "137879",
    "end": "143879"
  },
  {
    "text": "initial memory uh needs and there therefore the",
    "start": "143879",
    "end": "148959"
  },
  {
    "text": "amount is very limited you only have a limited amount",
    "start": "148959",
    "end": "154480"
  },
  {
    "text": "available so existing Solutions um we probably is there anyone who uses",
    "start": "154480",
    "end": "160480"
  },
  {
    "start": "155000",
    "end": "202000"
  },
  {
    "text": "callbacks in Java JavaScript maybe that's where it's used more uh reactive",
    "start": "160480",
    "end": "166879"
  },
  {
    "text": "programming which is very nice do you have users of reactive programming do you also use Co",
    "start": "166879",
    "end": "175480"
  },
  {
    "text": "routines okay good um and while these are all all nice Solutions and they all",
    "start": "175800",
    "end": "181319"
  },
  {
    "text": "have their specific strengths and all have their specific problems they each require a very",
    "start": "181319",
    "end": "187080"
  },
  {
    "text": "specific programming model we cannot just say we have this existing Java application without rewriting we make",
    "start": "187080",
    "end": "193640"
  },
  {
    "text": "use of uh basically being able to handle multiple uh request responses on the",
    "start": "193640",
    "end": "199040"
  },
  {
    "text": "same thread so what's the answer uh the answer is part one of project Loom",
    "start": "199040",
    "end": "205519"
  },
  {
    "start": "202000",
    "end": "347000"
  },
  {
    "text": "virtual threads and virtual threads are basically user mode threats so they",
    "start": "205519",
    "end": "210640"
  },
  {
    "text": "allow us to switch tasks on platform level uh using our existing synchronous",
    "start": "210640",
    "end": "216400"
  },
  {
    "text": "code style that we used to they have a very low initial memory footprint I have to say initial because of course um you",
    "start": "216400",
    "end": "224080"
  },
  {
    "text": "can still uh have a lot of memory attached to a single thread we will talk about it later as well and that's",
    "start": "224080",
    "end": "230360"
  },
  {
    "text": "because the stack is stored on the actually on the Heap so that's a very nice thing where when you learn Java or",
    "start": "230360",
    "end": "235560"
  },
  {
    "text": "you do your Java programming exam you learn about the stack and the Heap and now you have the stack on the on the",
    "start": "235560",
    "end": "241319"
  },
  {
    "text": "Heap and it's dynamically sized and it also means we don't have to reserve the stack memory when we spin up a virtual",
    "start": "241319",
    "end": "248159"
  },
  {
    "text": "thread we can increase it later if needed uh because of all of these things",
    "start": "248159",
    "end": "253560"
  },
  {
    "text": "uh we can have more of them available actually thousands of more than than actually platform",
    "start": "253560",
    "end": "259040"
  },
  {
    "text": "threads and the other thing is uh switching between threads is cheaper as well so the suspend and resume",
    "start": "259040",
    "end": "265560"
  },
  {
    "text": "operations are faster than with platform threats so how does this look if if we uh if you look at it uh how the threads",
    "start": "265560",
    "end": "272440"
  },
  {
    "text": "are mapped so basically the virtual threads now replace the Java threads as we are used to them the virtual threads",
    "start": "272440",
    "end": "280000"
  },
  {
    "text": "are then mapped onto actually uh system threads and those system threads are mapped on uh operating system threads so",
    "start": "280000",
    "end": "287360"
  },
  {
    "text": "we have an extra layer of abstraction in our threading model what are good use cases uh like I",
    "start": "287360",
    "end": "294360"
  },
  {
    "text": "mentioned if you have latency due to IO or due to network calls and if you have",
    "start": "294360",
    "end": "299400"
  },
  {
    "text": "lot of request that you need to handle from the outside uh that's a very good use case uh another one you you might",
    "start": "299400",
    "end": "306280"
  },
  {
    "text": "think of if I have high computation and I want to do more parallel processing it's actually not that much uh influence",
    "start": "306280",
    "end": "313639"
  },
  {
    "text": "in that area so basically if you have latency if your threat would be doing nothing and it can do something else",
    "start": "313639",
    "end": "318720"
  },
  {
    "text": "then it helps I have an example in computation we can actually have a look at it later but that's not the main",
    "start": "318720",
    "end": "324880"
  },
  {
    "text": "focus so we're not focusing on speed but we're actually focusing on throughput",
    "start": "324880",
    "end": "329960"
  },
  {
    "text": "these two cars are on the same thread the blue one is basically blocked by the red one um and if you had two lanes",
    "start": "329960",
    "end": "336440"
  },
  {
    "text": "although they're going slower because they're in the pit Lane they would arrive both at the same time or they can",
    "start": "336440",
    "end": "341600"
  },
  {
    "text": "arrive at the same time at the end of the pit Lane so our true Bo is actually two cars instead of",
    "start": "341600",
    "end": "347080"
  },
  {
    "start": "347000",
    "end": "352000"
  },
  {
    "text": "one okay um let's compare it to uh existing",
    "start": "347080",
    "end": "352440"
  },
  {
    "start": "352000",
    "end": "681000"
  },
  {
    "text": "Solutions um actually I don't use it much myself but if you have uh asynchronous code with callbacks you you",
    "start": "352440",
    "end": "359800"
  },
  {
    "text": "could you can Define uh a function parameter and then instead of just giving a parameter you can pass in a",
    "start": "359800",
    "end": "366160"
  },
  {
    "text": "Lambda function and that should be called when the function is done but you already see from this example where we",
    "start": "366160",
    "end": "372440"
  },
  {
    "text": "call two services and let's let's assume that the service calls on external network server so there's actually some",
    "start": "372440",
    "end": "378080"
  },
  {
    "text": "latency involved we call the first service and then with the result of the first service you want to call the",
    "start": "378080",
    "end": "383240"
  },
  {
    "text": "second service and you can imagine that if you have maybe some if statements some try catches and maybe a third surface this can become very unreadable",
    "start": "383240",
    "end": "390599"
  },
  {
    "text": "very fast so then what you could do is you could use uh completable Futures instead",
    "start": "390599",
    "end": "397560"
  },
  {
    "text": "of callbacks well Compu futes already U looks uh way nicer so instead of passing",
    "start": "397560",
    "end": "403360"
  },
  {
    "text": "in a callback function we just return a completable future um the nice thing",
    "start": "403360",
    "end": "408759"
  },
  {
    "text": "about completable Futures is you can asynchronously wait for the result so if you look at the Java future if you want",
    "start": "408759",
    "end": "415560"
  },
  {
    "text": "to get a result from that that's a blocking operation in standard Java uh with the complet future it's an",
    "start": "415560",
    "end": "421440"
  },
  {
    "text": "asynchronous uh operation so you can actually asynchronously fire two requests to two",
    "start": "421440",
    "end": "427400"
  },
  {
    "text": "different network services and then you can say Okay I want to combine the result when the results both come in you",
    "start": "427400",
    "end": "432479"
  },
  {
    "text": "can do something with it uh you join it and then you have the result um a",
    "start": "432479",
    "end": "437879"
  },
  {
    "text": "completely Futures I don't use them a lot I don't really like the API uh I I thought if you if you're want to do a",
    "start": "437879",
    "end": "444080"
  },
  {
    "text": "synness programming why not do reactive U because it's a bit more powerful it",
    "start": "444080",
    "end": "449280"
  },
  {
    "text": "has a functional programming style so again if the call surface is a",
    "start": "449280",
    "end": "455280"
  },
  {
    "text": "asynchronous function and it's uh call an external service instead of a completable future we can now return a",
    "start": "455280",
    "end": "461720"
  },
  {
    "text": "mono mono basically means uh uh something or nothing comes",
    "start": "461720",
    "end": "467319"
  },
  {
    "text": "out of as a result um you can combine it with other mono calls by using flat map so you have",
    "start": "467319",
    "end": "475319"
  },
  {
    "text": "one surface and you want to uh the result of the surface you want to combine it with the result of another",
    "start": "475319",
    "end": "480879"
  },
  {
    "text": "service you do a flat map and then you subscribe to result and then in the Subscribe you have access to the result",
    "start": "480879",
    "end": "487199"
  },
  {
    "text": "and you can do whatever you want with it um if if you like reactive programming",
    "start": "487199",
    "end": "492800"
  },
  {
    "text": "it can be very fun it can be very powerful you can do a lot of different things with it especially if time is",
    "start": "492800",
    "end": "498360"
  },
  {
    "text": "involved in your use case so if you have a data arriving over time for instance",
    "start": "498360",
    "end": "504599"
  },
  {
    "text": "but it can also be a little bit overwhelming I think if you Ed if you've used programming of you you have joined",
    "start": "504599",
    "end": "511000"
  },
  {
    "text": "a project where already reactive programming were used um these chains can basically get very long and it can",
    "start": "511000",
    "end": "517200"
  },
  {
    "text": "also become a bit unreadable and you it's definitely a paradigm shift from uh",
    "start": "517200",
    "end": "522959"
  },
  {
    "text": "synchronous programming to reactive programming and one of the other things is you have to be really aware whether",
    "start": "522959",
    "end": "529959"
  },
  {
    "text": "you use blocking calls or not so this is based around the fact that every call you make is non-blocking so if you have",
    "start": "529959",
    "end": "536920"
  },
  {
    "text": "for instance a database call you need to use an Asing synchronous database driver to leverage this and if it's not an",
    "start": "536920",
    "end": "542560"
  },
  {
    "text": "asynchronous database driver then you have to be aware from the fact that it's actually you making a blocking call to",
    "start": "542560",
    "end": "548000"
  },
  {
    "text": "your database you cannot just do that from your reactive chain well you can that's probably the one of the aspects",
    "start": "548000",
    "end": "554360"
  },
  {
    "text": "of the problem you can but you shouldn't so you still have to be aware do not block the main",
    "start": "554360",
    "end": "559640"
  },
  {
    "text": "threat um maybe fans of cotlin in the in the room cotlin has a very elegant",
    "start": "559640",
    "end": "565079"
  },
  {
    "text": "solution for uh the asynchronous problem which are co- routines cines basically",
    "start": "565079",
    "end": "570720"
  },
  {
    "text": "is a SN of weight so if you know from JavaScript or typescript other programming languages they have they",
    "start": "570720",
    "end": "577519"
  },
  {
    "text": "call it a single weight in cotland it's called co-routines co-routines roughly allow",
    "start": "577519",
    "end": "584200"
  },
  {
    "text": "you to program in the synchronous programming way but making use of asynchronous functions which are called",
    "start": "584200",
    "end": "589920"
  },
  {
    "text": "suspend functions you still have to declare in your code that the the code",
    "start": "589920",
    "end": "595600"
  },
  {
    "text": "you are running is asynchronous and you cannot just go from a suspension function to a normal function so you",
    "start": "595600",
    "end": "602519"
  },
  {
    "text": "still have to be aware of the fact am I blocking the main thread is this a asynchronous function or is this a",
    "start": "602519",
    "end": "607800"
  },
  {
    "text": "synchronous function but it does allow you to um yeah do more synchronous style",
    "start": "607800",
    "end": "613680"
  },
  {
    "text": "programming in and still using asynchronous programming model um and we",
    "start": "613680",
    "end": "619240"
  },
  {
    "text": "also have to know that this is Scotland so it's um runs on the jdk but uh cotin",
    "start": "619240",
    "end": "625200"
  },
  {
    "text": "is not natively supported by the jdk they have to do work to conf vert your",
    "start": "625200",
    "end": "630959"
  },
  {
    "text": "co- routin code into something that works on the jdk uh and then a virtual threats so how",
    "start": "630959",
    "end": "638720"
  },
  {
    "text": "does the programming uh model look in Virtual threads if we call two Services well actually it just looks the same as",
    "start": "638720",
    "end": "645519"
  },
  {
    "text": "what we do now so if you now have two calls to external service and those are",
    "start": "645519",
    "end": "650800"
  },
  {
    "text": "blocking calls um by using virtual threads they become non-blocking calls because they",
    "start": "650800",
    "end": "657079"
  },
  {
    "text": "don't block the main thread anymore they actually yield the main threat if they're waiting for a response from an",
    "start": "657079",
    "end": "663639"
  },
  {
    "text": "external service for instance response from a network call and then in the time that we are waiting for one response we",
    "start": "663639",
    "end": "670120"
  },
  {
    "text": "can make another call and we can wait for that so we can do multiple things at the same time without changing our",
    "start": "670120",
    "end": "676639"
  },
  {
    "text": "programming model which is really nice um so for instance these two calls",
    "start": "676639",
    "end": "683720"
  },
  {
    "start": "681000",
    "end": "804000"
  },
  {
    "text": "are now blocking so if you make on Java everything up until 20 uh any of these",
    "start": "683720",
    "end": "689760"
  },
  {
    "text": "gos we you are blocking the main thread so getting the result from a future but also thread. sleep will block the main",
    "start": "689760",
    "end": "696320"
  },
  {
    "text": "thread uh from java 21 on uh when you're running on a virtual threading model",
    "start": "696320",
    "end": "701639"
  },
  {
    "text": "these two are not blocking the main thread anymore these become yield",
    "start": "701639",
    "end": "706680"
  },
  {
    "text": "operations okay um I hope that you think okay this looks nice I also want these",
    "start": "707000",
    "end": "713120"
  },
  {
    "text": "virtual threads how do I get them uh where do you get them from um you need",
    "start": "713120",
    "end": "719839"
  },
  {
    "text": "at least a Java 19 with previe functionality enabled or you have to wait till Java 21 uh but then you can",
    "start": "719839",
    "end": "727320"
  },
  {
    "text": "with this new uh low level API you can actually create virtual threads yourself",
    "start": "727320",
    "end": "732680"
  },
  {
    "text": "so instead of thread dot of platform you say thread dot or virtual and it will",
    "start": "732680",
    "end": "737760"
  },
  {
    "text": "create a virtual thread and then the way you use that thread is exactly the same as you would use a current threat in",
    "start": "737760",
    "end": "744680"
  },
  {
    "text": "Java so you can create a runnable and you can say threat start this runnable and that will be exactly the same but I",
    "start": "744680",
    "end": "751839"
  },
  {
    "text": "assume that you don't want to make virtual threads yourself right because if you're already programming at that level um yeah you're already in in that",
    "start": "751839",
    "end": "759519"
  },
  {
    "text": "complexity and actually what we want we want to use Virtual threads but we don't want to manage them",
    "start": "759519",
    "end": "765480"
  },
  {
    "text": "ourselves so let's look in a more uh a real world example um I've prepared a demo with",
    "start": "765480",
    "end": "772680"
  },
  {
    "text": "actually Four variants of the same application um we have uh three of them",
    "start": "772680",
    "end": "778959"
  },
  {
    "text": "are spring boot applications and that what is what I'm have the most experience with with I'm using now as",
    "start": "778959",
    "end": "785120"
  },
  {
    "text": "well and one is uh Halon Nema example which is actually a new web server based",
    "start": "785120",
    "end": "791800"
  },
  {
    "text": "on completely based on Virtual threads so you can think of it as a replacement for NTI which is uh asynchronous IO",
    "start": "791800",
    "end": "799079"
  },
  {
    "text": "based and then this one is virtual threads based um well the demo is is the",
    "start": "799079",
    "end": "805320"
  },
  {
    "start": "804000",
    "end": "916000"
  },
  {
    "text": "following we have a client in in our CL case the client will be J met J meter we can use to send requests and do a small",
    "start": "805320",
    "end": "812320"
  },
  {
    "text": "performance measure then we have the surfers we are testing so that's the either the just the normal spring boot",
    "start": "812320",
    "end": "818160"
  },
  {
    "text": "one or the reactive one or the non-blocking virtual threats one and then we call a a a backend server which",
    "start": "818160",
    "end": "824880"
  },
  {
    "text": "is reasonably slow um and the scenario is we have 10 uh we have thousand users and uh each",
    "start": "824880",
    "end": "831920"
  },
  {
    "text": "user makes 10 requests and then we want to measure the troot and the uh request",
    "start": "831920",
    "end": "837720"
  },
  {
    "text": "duration so this this is how our backend surface looks um I implemented it in reactive to avoid all problems",
    "start": "837720",
    "end": "845079"
  },
  {
    "text": "associated with uh treading uh request um how you say request for tread model",
    "start": "845079",
    "end": "851680"
  },
  {
    "text": "so in the reactive so it's it it has a delay of a th milliseconds but it doesn't become a a",
    "start": "851680",
    "end": "858079"
  },
  {
    "text": "blocking um surface in as a downstream serface so we don't run into problems",
    "start": "858079",
    "end": "863600"
  },
  {
    "text": "there um okay what do we expect um if I call a web servers external web servers",
    "start": "863600",
    "end": "870880"
  },
  {
    "text": "which has a delay of 1 second I expect that my application is a little bit overhead so if I make my call it will be",
    "start": "870880",
    "end": "877519"
  },
  {
    "text": "around just above one second right but now what if I have a thousand users and",
    "start": "877519",
    "end": "883720"
  },
  {
    "text": "each User make 10 requests then probably because these um calls are all blocking",
    "start": "883720",
    "end": "890360"
  },
  {
    "text": "the request uh average response time goes up right and the true put uh is",
    "start": "890360",
    "end": "896000"
  },
  {
    "text": "lower and then I expect because uh in our Loom example and our reactive",
    "start": "896000",
    "end": "901720"
  },
  {
    "text": "programming example because the are these are optimized to handle more requests on the",
    "start": "901720",
    "end": "907279"
  },
  {
    "text": "same thread so they don't block the thread it should be around that one second right it should be comparable to",
    "start": "907279",
    "end": "912920"
  },
  {
    "text": "if it's one user okay so let's have a look if um",
    "start": "912920",
    "end": "918000"
  },
  {
    "start": "916000",
    "end": "975000"
  },
  {
    "text": "what I'm saying is true is this readable yes good um I",
    "start": "918000",
    "end": "926160"
  },
  {
    "text": "already have my backend surface uh started on 8081 and now I have a classic uh spring",
    "start": "926160",
    "end": "933240"
  },
  {
    "text": "boot controller just a rest controller it will call my external service and then it will will return the",
    "start": "933240",
    "end": "938519"
  },
  {
    "text": "result so I need to start",
    "start": "938519",
    "end": "942680"
  },
  {
    "text": "this and then we go to G meter uh gmet just does one HTTP request uh to the",
    "start": "945800",
    "end": "953399"
  },
  {
    "text": "hello and uh I defined a thread group so we have like I said a thousand threads",
    "start": "953399",
    "end": "958519"
  },
  {
    "text": "and then each user each threat those 10 requests and let's run it this takes a",
    "start": "958519",
    "end": "966160"
  },
  {
    "text": "while to [Music] complete I did prepare all the results",
    "start": "966160",
    "end": "971920"
  },
  {
    "text": "in uh in slide anyway so what I wanted to show you um was basically if you uh",
    "start": "971920",
    "end": "978240"
  },
  {
    "start": "975000",
    "end": "1024000"
  },
  {
    "text": "run the examples uh with a normal Java application uh blocking application the",
    "start": "978240",
    "end": "984800"
  },
  {
    "text": "request time goes up really fast and it starts at around a th and the line uh on",
    "start": "984800",
    "end": "990040"
  },
  {
    "text": "top is around 5,000 so um the average response time becomes 5 Seconds instead",
    "start": "990040",
    "end": "995959"
  },
  {
    "text": "of 1 second and if you compare it with the reactive one which is the web Flex one it stays around 1",
    "start": "995959",
    "end": "1001920"
  },
  {
    "text": "second and then if you compare it with using the same spring boot application",
    "start": "1001920",
    "end": "1008600"
  },
  {
    "text": "but now running on Virtual threads you see that also the line stays flat and is around 1 second and in uh Loom but then",
    "start": "1008600",
    "end": "1016680"
  },
  {
    "text": "on helon NAS so not on uh spring boot it's the same result so how can we um",
    "start": "1016680",
    "end": "1025880"
  },
  {
    "start": "1024000",
    "end": "1196000"
  },
  {
    "text": "basically explain uh what happened well the average response time of reactive and virtual threats is comparable and",
    "start": "1025880",
    "end": "1032880"
  },
  {
    "text": "this is because the mechanism is actually very similar what they do is they handle more request on the same",
    "start": "1032880",
    "end": "1038640"
  },
  {
    "text": "thread by switching between these tasks um our classic thread model it it",
    "start": "1038640",
    "end": "1044400"
  },
  {
    "text": "becomes blocked basically every uh uh outgoing request which takes one",
    "start": "1044400",
    "end": "1050240"
  },
  {
    "text": "second is basically blocking the rest of the request we have to wait until it returns and then we can handle the next",
    "start": "1050240",
    "end": "1055919"
  },
  {
    "text": "request so our thread paay request model has way lower throughput I think I have",
    "start": "1055919",
    "end": "1061360"
  },
  {
    "text": "the numbers as well uh the blocking uh spring boot application it handled",
    "start": "1061360",
    "end": "1066720"
  },
  {
    "text": "around 200 requests per second and the other three that do the task switching on one thread it was around thousand",
    "start": "1066720",
    "end": "1073160"
  },
  {
    "text": "request per second so what do I need to do um if I I",
    "start": "1073160",
    "end": "1079039"
  },
  {
    "text": "have a spring boot uh Tre application and I want to use Virtual threats",
    "start": "1079039",
    "end": "1084919"
  },
  {
    "text": "because that is eventually what we're looking for right we don't want to create those virtual threads ourself um well actually it's those two",
    "start": "1084919",
    "end": "1092960"
  },
  {
    "text": "beans that we need we need to provide spring uh um if you run on tomat",
    "start": "1092960",
    "end": "1098400"
  },
  {
    "text": "actually um and virtual thread uh per task executor and if you paste this in",
    "start": "1098400",
    "end": "1105159"
  },
  {
    "text": "an conf at configuration uh class then these two uh executors will be defined",
    "start": "1105159",
    "end": "1111760"
  },
  {
    "text": "for Tomcat and you can actually use Virtual threat so this is the only thing you have to do the rest controller it",
    "start": "1111760",
    "end": "1119039"
  },
  {
    "text": "looks exactly the same you don't have to change your code so if you're um uh existing application is",
    "start": "1119039",
    "end": "1127280"
  },
  {
    "text": "just normal synchronous Java this is still how it looks if you want to use web flux if you",
    "start": "1127280",
    "end": "1133480"
  },
  {
    "text": "want to do reactive programming it looks completely different this is uh using project reactor so this is your um",
    "start": "1133480",
    "end": "1140400"
  },
  {
    "text": "functional style programming model and if you want to do uh virtual threads",
    "start": "1140400",
    "end": "1145600"
  },
  {
    "text": "with Halon Nema which is actually a micro profile um you can also do that but also",
    "start": "1145600",
    "end": "1152960"
  },
  {
    "text": "your uh um programming model is is different we've done that um so uh in",
    "start": "1152960",
    "end": "1163480"
  },
  {
    "text": "summary um use cases with external calls we can Leverage The user mode threats",
    "start": "1163480",
    "end": "1170440"
  },
  {
    "text": "but it's not a cheaper task switching per se that gives us this Advantage so",
    "start": "1170440",
    "end": "1175559"
  },
  {
    "text": "it's it's mainly focused on the TR um so you say c can I what happens",
    "start": "1175559",
    "end": "1182840"
  },
  {
    "text": "when we do it for a compute for instance so if we have an application that has a high CPU",
    "start": "1182840",
    "end": "1189679"
  },
  {
    "text": "requirement uh but no external calls and no IO and we pray that this",
    "start": "1189679",
    "end": "1197640"
  },
  {
    "start": "1196000",
    "end": "1318000"
  },
  {
    "text": "works so basically if it's readable I can make",
    "start": "1197640",
    "end": "1203400"
  },
  {
    "text": "it a bit quicker so basically what we do is we have a range of numbers from one to 1",
    "start": "1203400",
    "end": "1208679"
  },
  {
    "text": "million and we want to calculate the sum um and we have two uh approaches in",
    "start": "1208679",
    "end": "1215039"
  },
  {
    "text": "the first approach we use platform threats so we say we make a thread Factory um of platform",
    "start": "1215039",
    "end": "1222080"
  },
  {
    "text": "threats and then we have the list of numbers so one till a million we ask for",
    "start": "1222080",
    "end": "1227880"
  },
  {
    "text": "a parallel stream and then we sum the results and then we want to get the result and then the",
    "start": "1227880",
    "end": "1235159"
  },
  {
    "text": "other approach is actually the same code but then we use Virtual threads and the",
    "start": "1235159",
    "end": "1240799"
  },
  {
    "text": "only difference between this is the cost of thread switching right platform threads have that high stack so that's",
    "start": "1240799",
    "end": "1247159"
  },
  {
    "text": "more expensive to switch on and virtual threads have a lower uh uh cost of",
    "start": "1247159",
    "end": "1253880"
  },
  {
    "text": "switching so if we run this uh we see that uh processing time",
    "start": "1253880",
    "end": "1260200"
  },
  {
    "text": "for platform threads is roughly 100 milliseconds and for virtual threads",
    "start": "1260200",
    "end": "1265240"
  },
  {
    "text": "it's 66 so it's still uh faster it still helps to have virtual threats in this",
    "start": "1265240",
    "end": "1271840"
  },
  {
    "text": "case but the difference in trut was five times we had 200 requests per second",
    "start": "1271840",
    "end": "1278000"
  },
  {
    "text": "versus a th000 requests per second and now it's not even half it's around",
    "start": "1278000",
    "end": "1283520"
  },
  {
    "text": "40% and the funny thing is if you um",
    "start": "1283520",
    "end": "1289080"
  },
  {
    "text": "don't use parallel threads uh parallel",
    "start": "1289080",
    "end": "1295000"
  },
  {
    "text": "streams um you don't do any task switching so it's even faster because",
    "start": "1295000",
    "end": "1300240"
  },
  {
    "text": "for this example just adding numbers together doesn't make any sense to run it on more threads right just run it on",
    "start": "1300240",
    "end": "1305919"
  },
  {
    "text": "Main thread uh it's way faster than having the overhead of switching to parallel",
    "start": "1305919",
    "end": "1312679"
  },
  {
    "text": "threads okay I um I explained that you can use regular code on ftual threads",
    "start": "1315559",
    "end": "1321279"
  },
  {
    "start": "1318000",
    "end": "1454000"
  },
  {
    "text": "and that most calls that we would consider blocking are not blocking anymore so then the question of course",
    "start": "1321279",
    "end": "1327559"
  },
  {
    "text": "is which calls are still blocking right uh it's important to know if you use Virtual threads that there's still two",
    "start": "1327559",
    "end": "1335120"
  },
  {
    "text": "two ways of blocking the main thread uh first is if you use synchronized blocks and this is probably the one that you",
    "start": "1335120",
    "end": "1340440"
  },
  {
    "text": "could run into although I don't think uh much people still use synchronized blocks uh and the other one is calling",
    "start": "1340440",
    "end": "1347919"
  },
  {
    "text": "native method and calling native methods um there's no way around that that that that can",
    "start": "1347919",
    "end": "1354320"
  },
  {
    "text": "always be blocking but for synchronized blocks we have a a solution but uh let's look at the code first so if you're",
    "start": "1354320",
    "end": "1361640"
  },
  {
    "text": "running on ftual threads and if you uh call thread dot sleep for a duration of",
    "start": "1361640",
    "end": "1367320"
  },
  {
    "text": "one second we only block the virtual thread we don't block the underlying main thread now if you put that same",
    "start": "1367320",
    "end": "1373240"
  },
  {
    "text": "code in a synchronized function it becomes the blocking method so that's",
    "start": "1373240",
    "end": "1378679"
  },
  {
    "text": "important to know if you do any blocking work in a synchronized method um it's it becomes a blocking",
    "start": "1378679",
    "end": "1385799"
  },
  {
    "text": "method for the main thread so how can we solve this well luckily since Java 8",
    "start": "1385799",
    "end": "1391799"
  },
  {
    "text": "already we have um a programmatic loog which is called uh re-engine lock and",
    "start": "1391799",
    "end": "1397279"
  },
  {
    "text": "you can basically Define this lock and then if you need a resource and you want to be the only one using that resource",
    "start": "1397279",
    "end": "1403880"
  },
  {
    "text": "of or you maybe you want to call make a call to an external service which only has one connection to so you want to",
    "start": "1403880",
    "end": "1409080"
  },
  {
    "text": "make sure only one outgoing connection is there not all request trigger connection you can say try lock so try",
    "start": "1409080",
    "end": "1416039"
  },
  {
    "text": "to acquire the lock when you get the lock you do something and then finally you release the lock so if you have any",
    "start": "1416039",
    "end": "1423000"
  },
  {
    "text": "synchronized blocks in your code and you want to prepare for virtual threads then uh look for reent",
    "start": "1423000",
    "end": "1430640"
  },
  {
    "text": "lock and other thing to uh be aware of is uh of course a thread local a thread",
    "start": "1430640",
    "end": "1437080"
  },
  {
    "text": "local is a um um an instance um where",
    "start": "1437080",
    "end": "1442400"
  },
  {
    "text": "you can store information that's bound to a thread and for instance this is used sometimes when you do",
    "start": "1442400",
    "end": "1448200"
  },
  {
    "text": "authentication you want to pass on the user in your threat or maybe uh you want to use it for for loing for um um uh",
    "start": "1448200",
    "end": "1456960"
  },
  {
    "start": "1454000",
    "end": "1580000"
  },
  {
    "text": "metrics and those kind of things so tread local is used so how does it behave for FAL threads well the good",
    "start": "1456960",
    "end": "1463600"
  },
  {
    "text": "news is feral threads all have their own thread local so you can still use thread",
    "start": "1463600",
    "end": "1469399"
  },
  {
    "text": "local with your virtual threads if you want but there are a few things to be aware of um first of all uh thread local",
    "start": "1469399",
    "end": "1477039"
  },
  {
    "text": "can become uh quite big the thing is uh thread local um uh for each thread",
    "start": "1477039",
    "end": "1485000"
  },
  {
    "text": "uh the memory will be reserved um that's there and it will also be copied into CH threads everything you put put in there",
    "start": "1485000",
    "end": "1492520"
  },
  {
    "text": "um can mean a higher memory footprint and also thread local is mutable it",
    "start": "1492520",
    "end": "1498440"
  },
  {
    "text": "something that we you run in already so if you have multiple threats with the same uh um multiple child threads with",
    "start": "1498440",
    "end": "1506120"
  },
  {
    "text": "the same thread local it's possible that the state get M gets",
    "start": "1506120",
    "end": "1511320"
  },
  {
    "text": "mutated um so let's have a",
    "start": "1511320",
    "end": "1516000"
  },
  {
    "text": "look the thread local example so again we have two",
    "start": "1517039",
    "end": "1522679"
  },
  {
    "text": "examples um this should be of platform",
    "start": "1522679",
    "end": "1530240"
  },
  {
    "text": "we have uh two threads two platform threads and they are they each get their own thread local",
    "start": "1530240",
    "end": "1537080"
  },
  {
    "text": "version um and one puts in platform thread one second one puts in platform",
    "start": "1537080",
    "end": "1542640"
  },
  {
    "text": "thread two so we assume that if you print the the value from thread one it",
    "start": "1542640",
    "end": "1549320"
  },
  {
    "text": "is thread one if you print the value from thread two it's thread through and the same goes for virtual threads but",
    "start": "1549320",
    "end": "1554399"
  },
  {
    "text": "now we call them virtual threads so if you run",
    "start": "1554399",
    "end": "1560760"
  },
  {
    "text": "this we can actually see that uh platform thread one uh still has the",
    "start": "1562480",
    "end": "1568320"
  },
  {
    "text": "value uh two still has the value of two and one still has the value of one and for virtual threads is the same so the",
    "start": "1568320",
    "end": "1574000"
  },
  {
    "text": "virtual threads if each have their own instance of the thread logo but um since they can become uh a",
    "start": "1574000",
    "end": "1584279"
  },
  {
    "start": "1580000",
    "end": "1640000"
  },
  {
    "text": "big because uh uh and we want to keep uh the memory footprint of the F thread",
    "start": "1584279",
    "end": "1590399"
  },
  {
    "text": "low uh in jdk 21 together with project Loom a new thing called scoped values",
    "start": "1590399",
    "end": "1596720"
  },
  {
    "text": "will be introduced and a scoped value is um uh",
    "start": "1596720",
    "end": "1603559"
  },
  {
    "text": "uh yeah a thread local um alternative that only exists within this a certain",
    "start": "1603559",
    "end": "1610279"
  },
  {
    "text": "scope so in this case it only exist in a in this Lambda function so we can say we want a scoped",
    "start": "1610279",
    "end": "1617240"
  },
  {
    "text": "value of typ string we put a test value in it and then within our Lambda function we can use it and we can we can",
    "start": "1617240",
    "end": "1624480"
  },
  {
    "text": "print print it and the good thing to know is it's immutable so if you have any child",
    "start": "1624480",
    "end": "1630000"
  },
  {
    "text": "threats uh it's just reference it's not copied so it's way cheaper to have this sculped value I have to quickly check",
    "start": "1630000",
    "end": "1637120"
  },
  {
    "text": "the time we can do that example I",
    "start": "1637120",
    "end": "1643799"
  },
  {
    "start": "1640000",
    "end": "1695000"
  },
  {
    "text": "think um so this actually uh in this demo we",
    "start": "1647159",
    "end": "1654520"
  },
  {
    "text": "have a scope value of type string and we set the value test value and then within",
    "start": "1654520",
    "end": "1660679"
  },
  {
    "text": "the scope we try to read uh that value and that should be uh uh present so it",
    "start": "1660679",
    "end": "1667559"
  },
  {
    "text": "should be test value but then if you have the same value and then without uh",
    "start": "1667559",
    "end": "1672960"
  },
  {
    "text": "out of that scope you try to read it we actually expect you get an exception",
    "start": "1672960",
    "end": "1679600"
  },
  {
    "text": "so that's true inside the Lambda we just we can just print the value test value",
    "start": "1679600",
    "end": "1684679"
  },
  {
    "text": "and then outside of the Lambda we get a no such element exception so that's what",
    "start": "1684679",
    "end": "1690519"
  },
  {
    "text": "sculpt values are for okay that was um about what I had",
    "start": "1690519",
    "end": "1697799"
  },
  {
    "start": "1695000",
    "end": "1786000"
  },
  {
    "text": "about virtual threads now the second part of project Loom is structured concurrency and virtual threads solved",
    "start": "1697799",
    "end": "1704440"
  },
  {
    "text": "the asynchronous problem by letting us use synchronous code but then in user mode threats but you still have use",
    "start": "1704440",
    "end": "1711399"
  },
  {
    "text": "cases of course where you want to do um parallel operations so you want to do concurrency and you have to manage those",
    "start": "1711399",
    "end": "1718159"
  },
  {
    "text": "virtual threats because you don't want to do it yourself and this is where structured concurrency comes in so for",
    "start": "1718159",
    "end": "1723440"
  },
  {
    "text": "instance if you want to run things in parallel and want to collect all the results or maybe you want to um just uh",
    "start": "1723440",
    "end": "1732080"
  },
  {
    "text": "spin up a bunch uh of instances of a piece of code and then the first one",
    "start": "1732080",
    "end": "1737519"
  },
  {
    "text": "that returns you want to use that one or you want to do things like retry and",
    "start": "1737519",
    "end": "1743159"
  },
  {
    "text": "timeout you can use a structured concurrency um so we LLY Define a",
    "start": "1743159",
    "end": "1749279"
  },
  {
    "text": "computation and then we have an orchestrator and the orchestrator is called structure to scope and then",
    "start": "1749279",
    "end": "1754600"
  },
  {
    "text": "depending on the type of structure Tas scope we can do these things so running in parallel and collecting results or",
    "start": "1754600",
    "end": "1761039"
  },
  {
    "text": "running in parallel and then only collect the first one and the good thing to know is that um the scope of the",
    "start": "1761039",
    "end": "1767760"
  },
  {
    "text": "threat so the lifetime of the thread is bound to the scope of the code so the",
    "start": "1767760",
    "end": "1772799"
  },
  {
    "text": "threads do not exist anymore outside of that scope which makes it way more manageable than if you just start",
    "start": "1772799",
    "end": "1778799"
  },
  {
    "text": "spinning up threats um yeah let's show this example",
    "start": "1778799",
    "end": "1787559"
  },
  {
    "start": "1786000",
    "end": "1902000"
  },
  {
    "text": "here so we have two examples and the first example we we want to have uh uh",
    "start": "1793360",
    "end": "1800720"
  },
  {
    "text": "two calls to an external service and we want to result of both those calls in",
    "start": "1800720",
    "end": "1805880"
  },
  {
    "text": "that case you create a structured task scope with um a shutdown on failure type",
    "start": "1805880",
    "end": "1812919"
  },
  {
    "text": "which means uh only quit if there's a failure and if it's successful run to",
    "start": "1812919",
    "end": "1818000"
  },
  {
    "text": "the end and if we have that uh call service and that call service is uh",
    "start": "1818000",
    "end": "1824039"
  },
  {
    "text": "doing a sleep for uh one second and the call service is doing a sleep for two",
    "start": "1824039",
    "end": "1829480"
  },
  {
    "text": "seconds then uh how much time do we think uh",
    "start": "1829480",
    "end": "1835559"
  },
  {
    "text": "does this code needs to complete roughly so two calls one is 1 second one is two",
    "start": "1835559",
    "end": "1842039"
  },
  {
    "text": "seconds two right because we run them in parallel that's exactly what we what we like to um run them for and then if we",
    "start": "1842039",
    "end": "1851559"
  },
  {
    "text": "have uh another example where we say okay we want to run these two services",
    "start": "1851559",
    "end": "1857200"
  },
  {
    "text": "but we only care about result of one we do shut down on success so whenever one of the task is successful we stop and we",
    "start": "1857200",
    "end": "1864960"
  },
  {
    "text": "have the same uh DeLay So with these same two Services one is 1 second one is two seconds how long do we think it",
    "start": "1864960",
    "end": "1870399"
  },
  {
    "text": "takes one excellent last parallel session of the",
    "start": "1870399",
    "end": "1876320"
  },
  {
    "text": "day people are still sharp and the code runs which is also",
    "start": "1876320",
    "end": "1883440"
  },
  {
    "text": "very nice so the first example we get our hello world roughly over two seconds of course always bit of overhead and in",
    "start": "1883440",
    "end": "1889320"
  },
  {
    "text": "the second example we get uh our result only Hello because the world cost lost",
    "start": "1889320",
    "end": "1894679"
  },
  {
    "text": "that took too long uh in one",
    "start": "1894679",
    "end": "1899320"
  },
  {
    "start": "1902000",
    "end": "1929000"
  },
  {
    "text": "second okay so uh vertial threats and structured concurrency uh we can",
    "start": "1902399",
    "end": "1907760"
  },
  {
    "text": "leverage vertial threads without structured concurrency structur concurrency is a Threading model on top",
    "start": "1907760",
    "end": "1913080"
  },
  {
    "text": "of vertual uh threads and it aims to reduce errors",
    "start": "1913080",
    "end": "1918200"
  },
  {
    "text": "with concurrent programming so it should make it easier to uh manage threats and",
    "start": "1918200",
    "end": "1923279"
  },
  {
    "text": "do a computational work uh without making uh threading",
    "start": "1923279",
    "end": "1928600"
  },
  {
    "text": "errors uh if you want to start now um that's possible you need uh jdk 19 or 20",
    "start": "1928600",
    "end": "1935000"
  },
  {
    "start": "1929000",
    "end": "2013000"
  },
  {
    "text": "and you need to enable preview I showed you in the slide what you need if you have spring boot you need a virtual",
    "start": "1935000",
    "end": "1940840"
  },
  {
    "text": "thread execute uh yeah FAL de task executor you also have Alternatives you can have a look at helona uh you can",
    "start": "1940840",
    "end": "1947960"
  },
  {
    "text": "have a look at quarkus which is also available virtual threats and even Tomcat has its own uh Loom executor so",
    "start": "1947960",
    "end": "1954399"
  },
  {
    "text": "if you want to play around with then any of those uh can satisfy you",
    "start": "1954399",
    "end": "1960480"
  },
  {
    "text": "already if you say I like this a lot I want to prepare because September uh it",
    "start": "1960480",
    "end": "1966440"
  },
  {
    "text": "will be released so I don't think you want to use it now in production but if you want to prepare uh upgrade to Java",
    "start": "1966440",
    "end": "1973600"
  },
  {
    "text": "20 uh because then you will be ready for 21 upgrade to spring boot 3 which has",
    "start": "1973600",
    "end": "1979039"
  },
  {
    "text": "spring framework six which is uh ready for virtual threats and replace your",
    "start": "1979039",
    "end": "1984399"
  },
  {
    "text": "synchronized blocks with reent lock and I actually started a project last year and before this project we did a",
    "start": "1984399",
    "end": "1990559"
  },
  {
    "text": "reactive project and a co- routine project and I explicitly decided to use plain Java plain spring brute no",
    "start": "1990559",
    "end": "1996720"
  },
  {
    "text": "reactive no web flux because I knew if you stay very close to that um simple",
    "start": "1996720",
    "end": "2002799"
  },
  {
    "text": "stack then you can very easily upgrade to Virtual threats and you will actually get the same benefits as Co routines and",
    "start": "2002799",
    "end": "2009880"
  },
  {
    "text": "reactive programming um which leads probably to the question is reactive debt so did we",
    "start": "2009880",
    "end": "2016240"
  },
  {
    "start": "2013000",
    "end": "2068000"
  },
  {
    "text": "have our fun uh couple of years of reactive um the answer is always it",
    "start": "2016240",
    "end": "2022320"
  },
  {
    "text": "depends of course there's uh very much similarities between these two if you're thinking about optimizing a trading",
    "start": "2022320",
    "end": "2029039"
  },
  {
    "text": "model uh optimizing trut but we also have to know that reactive is not only",
    "start": "2029039",
    "end": "2035559"
  },
  {
    "text": "doing more things at the same time on the same threat reactive also deals with the problem of infinite streams so if",
    "start": "2035559",
    "end": "2042440"
  },
  {
    "text": "you have data coming in over time but you don't know how much data it is and there you don't know when when the data",
    "start": "2042440",
    "end": "2048720"
  },
  {
    "text": "ends um reactive streams still has a good programming model for that so there's uh there something that is not",
    "start": "2048720",
    "end": "2055760"
  },
  {
    "text": "solved by virtual threats and of course if you like a functional programming model that's also uh what reactive has",
    "start": "2055760",
    "end": "2062158"
  },
  {
    "text": "the virtual threats will just be your synchronous programming model and not the functional programming model uh then what about golink Co",
    "start": "2062159",
    "end": "2069599"
  },
  {
    "start": "2068000",
    "end": "2157000"
  },
  {
    "text": "routines actually very similar um cotlin Co routines has a very nice API for",
    "start": "2069599",
    "end": "2074638"
  },
  {
    "text": "current programming but also has apis for things that reactive solve they have",
    "start": "2074639",
    "end": "2079919"
  },
  {
    "text": "flow and channels which are basically hot and cold sources so you can also deal with infite",
    "start": "2079919",
    "end": "2085919"
  },
  {
    "text": "streams um it you have to know that it does uh it is based on non-blocking iio",
    "start": "2085919",
    "end": "2091919"
  },
  {
    "text": "the same with reactive so this means it exposes a little bit of complexity to us as a developer you have to be aware",
    "start": "2091919",
    "end": "2099480"
  },
  {
    "text": "which part of your code use blocking calls and which part of your code use non-blocking calls so you actually that",
    "start": "2099480",
    "end": "2105839"
  },
  {
    "text": "application your application split in those two um uh virtual threads make uh the co",
    "start": "2105839",
    "end": "2113839"
  },
  {
    "text": "routine part easier but there's still uh reasons to use cotlin Co routines and of",
    "start": "2113839",
    "end": "2120440"
  },
  {
    "text": "course um the the nicest thing is if you like cotland and even if you like",
    "start": "2120440",
    "end": "2125520"
  },
  {
    "text": "co-routines um you could use them on top of virtual threats so one thing does not",
    "start": "2125520",
    "end": "2131839"
  },
  {
    "text": "exclude the other virtual threat will still be a thread and you can can use the codin on top of that a little bit of",
    "start": "2131839",
    "end": "2140119"
  },
  {
    "text": "a overview in time uh the loom was introduced as a",
    "start": "2140119",
    "end": "2145160"
  },
  {
    "text": "preview F future last year in September 2022 we got a new version in March this",
    "start": "2145160",
    "end": "2151440"
  },
  {
    "text": "year and then the next one will be available in September and then finally we can use it for",
    "start": "2151440",
    "end": "2156640"
  },
  {
    "text": "real um summarizing uh it choose to rout a tool",
    "start": "2156640",
    "end": "2163400"
  },
  {
    "start": "2157000",
    "end": "2225000"
  },
  {
    "text": "for the job that's always the case so if you only care about parallelism if you don't want to uh deal with infinite data",
    "start": "2163400",
    "end": "2169800"
  },
  {
    "text": "streams or make more complex concurrent programming just wait for virtual threads or start playing with it",
    "start": "2169800",
    "end": "2176240"
  },
  {
    "text": "already uh because you will get them for free on Java 21 and then I still have eight minutes",
    "start": "2176240",
    "end": "2183920"
  },
  {
    "text": "right okay let's keep those for questions",
    "start": "2183920",
    "end": "2188960"
  },
  {
    "text": "I had prepared a little demo where I migrate the current application we're using in two virtual threats but I think",
    "start": "2188960",
    "end": "2195000"
  },
  {
    "text": "it's not enough time but I will tell you the ID behind it I was just trying it um",
    "start": "2195000",
    "end": "2200880"
  },
  {
    "text": "two weekends ago for fun so I upgraded to Spring boot 3 I um enabled in the Java",
    "start": "2200880",
    "end": "2206920"
  },
  {
    "text": "compiler um enable preview then I added that virtual thread executor that I had",
    "start": "2206920",
    "end": "2212240"
  },
  {
    "text": "on my slide and that was basically it I could start up the application uh it used virtual threads and true poop was",
    "start": "2212240",
    "end": "2218400"
  },
  {
    "text": "around twice as high in the performance test that I did so it can actually be",
    "start": "2218400",
    "end": "2223920"
  },
  {
    "text": "that simple okay all my demos including the not working one which should work is uh",
    "start": "2223920",
    "end": "2231400"
  },
  {
    "start": "2225000",
    "end": "2258000"
  },
  {
    "text": "in my GitHub the presentation is there as well uh so yeah you can just clone the whole thing all the examples will be",
    "start": "2231400",
    "end": "2238119"
  },
  {
    "text": "there and the slides is in markdown and there's HTML should be HML version as",
    "start": "2238119",
    "end": "2244480"
  },
  {
    "text": "well",
    "start": "2246520",
    "end": "2249520"
  }
]