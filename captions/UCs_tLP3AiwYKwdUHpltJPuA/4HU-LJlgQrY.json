[
  {
    "text": "[Applause] great um thank you fact the the only tennis joke that comes to mind that's",
    "start": "3860",
    "end": "10480"
  },
  {
    "text": "related to microservices is that one of my friends at my tennis club accused me of having a micro",
    "start": "10480",
    "end": "18279"
  },
  {
    "text": "serve ouch you know it hurt but it but it's but it's actually remarkable in in",
    "start": "18279",
    "end": "24039"
  },
  {
    "text": "like I don't know seven years of doing microservices that pun had never",
    "start": "24039",
    "end": "29439"
  },
  {
    "text": "occurred to to me until he came up with it so this is my talk on on the ESS on",
    "start": "29439",
    "end": "35719"
  },
  {
    "text": "the essential characteristics of microservices so basically I'm going to talk about sort of the motivations for",
    "start": "35719",
    "end": "42719"
  },
  {
    "text": "microservices Give a definition of of give my definition of the microservice",
    "start": "42719",
    "end": "48360"
  },
  {
    "text": "architecture and then just talk about some of the design issues that you will face as well as some of the development",
    "start": "48360",
    "end": "55600"
  },
  {
    "text": "issues that you will face when when using the microservice architecture and um just because it sounds cute I'm going",
    "start": "55600",
    "end": "63079"
  },
  {
    "text": "to use shapes series of visual metaphors and and most of them make sense which is",
    "start": "63079",
    "end": "69840"
  },
  {
    "text": "good so before I you know talk about that a little bit about me done a number of things over the years um way back",
    "start": "69840",
    "end": "78680"
  },
  {
    "text": "like in the late 80s um early 90s I worked on lisp systems so I worked on",
    "start": "78680",
    "end": "84840"
  },
  {
    "text": "implementations of common list garbage collectors compilers idees and all of that",
    "start": "84840",
    "end": "91000"
  },
  {
    "text": "um and then back in 2000 I wrote the book pojo's in action back 13 years ago",
    "start": "91000",
    "end": "96439"
  },
  {
    "text": "then back in 2007 no 2008 I started tinkering around with this obscure",
    "start": "96439",
    "end": "102240"
  },
  {
    "text": "service known as Amazon ec2 which is you know from an online bookstore blew my",
    "start": "102240",
    "end": "108000"
  },
  {
    "text": "mind ended up creating the original cloud Foundry so that was PA for deploying Java applications on ec2 that",
    "start": "108000",
    "end": "114640"
  },
  {
    "text": "then got acquired by Spring Source then by VM and so I was part of those",
    "start": "114640",
    "end": "119960"
  },
  {
    "text": "organizations plus pivotal for 4 and a half years since then I've been pretty much focused on the microservice",
    "start": "119960",
    "end": "125520"
  },
  {
    "text": "architecture travel around the world um doing consulting and training or using",
    "start": "125520",
    "end": "131360"
  },
  {
    "text": "around microservices or using that as an excuse to eat really good food I must",
    "start": "131360",
    "end": "136760"
  },
  {
    "text": "say that Singapore really wins the prize here I've done nothing for three days except",
    "start": "136760",
    "end": "142120"
  },
  {
    "text": "eat um hike I should say hike and sweat a lot um and I have a startup with",
    "start": "142120",
    "end": "150760"
  },
  {
    "text": "we're building software to simplify the development of business applications that use the microservice architecture",
    "start": "150760",
    "end": "157000"
  },
  {
    "text": "then my book microservices patterns came out back in November and with that discount code you can get it and I",
    "start": "157000",
    "end": "163800"
  },
  {
    "text": "believe other Manning products for for an amazing 40% off um and I'll show it at the end but",
    "start": "163800",
    "end": "170959"
  },
  {
    "text": "it's what's it CW ya S as in Singapore 19 and then I also have the website",
    "start": "170959",
    "end": "178000"
  },
  {
    "text": "microservices doio so that's a destination where you go there learn about microservices and there's also a",
    "start": "178000",
    "end": "184200"
  },
  {
    "text": "self assessment tool essentially a sophisticated questionaire that you can use to self assess your",
    "start": "184200",
    "end": "191200"
  },
  {
    "text": "architecture so that's me I just do microservices and eat and last night I",
    "start": "191200",
    "end": "197080"
  },
  {
    "text": "should mention that I discovered I prefer black pepper crab to chili crab cuz I well we ordered both of",
    "start": "197080",
    "end": "205920"
  },
  {
    "text": "them um and I'm still digesting so anyway back to the talk um so as I've",
    "start": "205920",
    "end": "214480"
  },
  {
    "text": "mentioned a series of sort of visual metaphors success triangle scale Cube",
    "start": "214480",
    "end": "219640"
  },
  {
    "text": "hexagonal architecture and so on so I'm going to start off by talking about the",
    "start": "219640",
    "end": "224680"
  },
  {
    "text": "success triangle which I sort of view as the kind of the three factors that you",
    "start": "224680",
    "end": "230239"
  },
  {
    "text": "need in order to deliver software successfully in sort of this Modern Age",
    "start": "230239",
    "end": "235799"
  },
  {
    "text": "um and if I was to obviously part of that is the micos service architecture and if I was to sort of sum up a huge",
    "start": "235799",
    "end": "243879"
  },
  {
    "text": "motivation for change in and for us as it developers it's really on this slide",
    "start": "243879",
    "end": "250239"
  },
  {
    "text": "so software is eating the world right which basically means that every company",
    "start": "250239",
    "end": "255920"
  },
  {
    "text": "has to master the ability the the skills to deliver software you know it doesn't",
    "start": "255920",
    "end": "262120"
  },
  {
    "text": "matter if obviously Banks been doing that for some time but if you're a mining company you know it's all about",
    "start": "262120",
    "end": "268280"
  },
  {
    "text": "software as well as things that dig and so on or governments apparently it's all",
    "start": "268280",
    "end": "273680"
  },
  {
    "text": "about software you know it's sort of like how businesses engage with their customers or their citizens and so on",
    "start": "273680",
    "end": "280680"
  },
  {
    "text": "and then you know in the private sector the marketplace within which businesses are operating are becoming increasingly",
    "start": "280680",
    "end": "287400"
  },
  {
    "text": "volatile and uncertain competitors arise out of new nowhere there's regulatory changes and",
    "start": "287400",
    "end": "294000"
  },
  {
    "text": "so on and that actually means that businesses need to innovate faster they",
    "start": "294000",
    "end": "299280"
  },
  {
    "text": "need to to deliver new products and new services and iterate on those products and services at a much faster rate than",
    "start": "299280",
    "end": "305960"
  },
  {
    "text": "they did before and what that means for us as software developers is we need to",
    "start": "305960",
    "end": "311880"
  },
  {
    "text": "deliver software much more rapidly much more frequently and much more reliably",
    "start": "311880",
    "end": "317280"
  },
  {
    "text": "and obviously not just by like throwing more coal on the fire to use Greg Gregor's metaphor so you can quantify",
    "start": "317280",
    "end": "324360"
  },
  {
    "text": "rapid frequent and reliable delivery with a few different metrics so the first two metrics concern velocity one",
    "start": "324360",
    "end": "332240"
  },
  {
    "text": "of those metrics is lead time minimizing the amount of time from a developer",
    "start": "332240",
    "end": "337360"
  },
  {
    "text": "committing that change so that change going into production you want to shrink that as much as possible and just to",
    "start": "337360",
    "end": "344960"
  },
  {
    "text": "give you a hint that's today that should be measured in minutes not hours weeks",
    "start": "344960",
    "end": "350039"
  },
  {
    "text": "or days or or months or anything like that and you also want to increase your",
    "start": "350039",
    "end": "355280"
  },
  {
    "text": "deployment frequency and the unit for that is deploys per Developers per day",
    "start": "355280",
    "end": "360720"
  },
  {
    "text": "so you want to be constantly pushing changes into production many times a day",
    "start": "360720",
    "end": "367080"
  },
  {
    "text": "and the idea is every developer commits their changes and those changes get built tested and deployed automatically",
    "start": "367080",
    "end": "373479"
  },
  {
    "text": "so it's about moving very rapidly it's also about doing it in a very safe reliable way and there's some metrics",
    "start": "373479",
    "end": "380000"
  },
  {
    "text": "around that change failure rate how often does what percentage of deployments result in the outage",
    "start": "380000",
    "end": "386160"
  },
  {
    "text": "obviously that needs to be as close to zero as possible and then if there is an outage how quickly can you recover from",
    "start": "386160",
    "end": "392840"
  },
  {
    "text": "it it was interesting Greg had a few things to mention about that as well so there some you know so those are the key",
    "start": "392840",
    "end": "399479"
  },
  {
    "text": "metrics so that that drives ultimately ends up driving software processes and",
    "start": "399479",
    "end": "405120"
  },
  {
    "text": "software architectures and then another factor which I'm sure many of you are",
    "start": "405120",
    "end": "410319"
  },
  {
    "text": "experiencing on a daily basis if you're successful if your application is",
    "start": "410319",
    "end": "415599"
  },
  {
    "text": "successful it has a habit of living for very very long",
    "start": "415599",
    "end": "421120"
  },
  {
    "text": "time um you know like last week at the conference there were people who were programming in I think it was",
    "start": "421120",
    "end": "428080"
  },
  {
    "text": "pl1 right you know which in a sense is an absolutely ancient technology but",
    "start": "428080",
    "end": "433759"
  },
  {
    "text": "someone way back built an incredibly successful application using that using that technology and it's still Central",
    "start": "433759",
    "end": "441440"
  },
  {
    "text": "to the business today um which on the one hand is great you've actually survived that long",
    "start": "441440",
    "end": "448160"
  },
  {
    "text": "trouble is technology changes right you might you know it's sort of not a hot",
    "start": "448160",
    "end": "454160"
  },
  {
    "text": "desirable job to be a P1 programmer or a C++ programmer today even right you know",
    "start": "454160",
    "end": "460759"
  },
  {
    "text": "because all the cool kids want to use Java and goang apparently node",
    "start": "460759",
    "end": "467240"
  },
  {
    "text": "strange so anyway you want to be able to easily modernize your applications you",
    "start": "467240",
    "end": "472599"
  },
  {
    "text": "know so rather than being stuck with absolutely ancient technology which is increasingly getting out of date and",
    "start": "472599",
    "end": "478199"
  },
  {
    "text": "really hard to hire for you want to be able to modernize your technology stack",
    "start": "478199",
    "end": "483240"
  },
  {
    "text": "so I sort of view the way you achieve those goals delivering software rapidly",
    "start": "483240",
    "end": "488479"
  },
  {
    "text": "frequently and reliably to and to have long lived applications that requires a",
    "start": "488479",
    "end": "493919"
  },
  {
    "text": "combination of three things process organization and",
    "start": "493919",
    "end": "498960"
  },
  {
    "text": "architecture so today process actually means using lean product development",
    "start": "498960",
    "end": "505240"
  },
  {
    "text": "methodology combined with devops for actual software delivery and devops is",
    "start": "505240",
    "end": "511280"
  },
  {
    "text": "really an umbrella term that encompasses things like continuous delivery continuous deployment with with agile",
    "start": "511280",
    "end": "518518"
  },
  {
    "text": "mixed in there as well so that's your process um and it's interesting that",
    "start": "518519",
    "end": "523919"
  },
  {
    "text": "Gregor mentioned organization as well so you know there instead of having siloed",
    "start": "523919",
    "end": "530120"
  },
  {
    "text": "organizational sort of structures where Dev wres code apparently doesn't test it",
    "start": "530120",
    "end": "535920"
  },
  {
    "text": "gives it to QA who tests it and then gives it to Ops what you really want are small cross functional autonomous teams",
    "start": "535920",
    "end": "543959"
  },
  {
    "text": "that have on them all of the capabilities to take concept implement it test it and deploy it so get it",
    "start": "543959",
    "end": "551760"
  },
  {
    "text": "eliminating the handoffs between the different silos which possibly also have conflicting goals right like Ops wants",
    "start": "551760",
    "end": "558680"
  },
  {
    "text": "to change or Ops want stability but developers want to change things so then that leads to",
    "start": "558680",
    "end": "565399"
  },
  {
    "text": "architecture um so you need an architecture to enable devops you need an architecture to enable these small",
    "start": "565399",
    "end": "573079"
  },
  {
    "text": "cross functional teams as well and given that this is a talk about microservices you can imagine that sometimes that is",
    "start": "573079",
    "end": "580920"
  },
  {
    "text": "the answer um so but I want to talk about why and that leads the part two of this",
    "start": "580920",
    "end": "586839"
  },
  {
    "text": "talk which is the scale Cube which I will get to later but that was sort of how I got into",
    "start": "586839",
    "end": "593920"
  },
  {
    "text": "microservices so you if you think about what kind of architecture you need in",
    "start": "593920",
    "end": "600320"
  },
  {
    "text": "order to support devops in order to support autonomous teams and in also in",
    "start": "600320",
    "end": "606880"
  },
  {
    "text": "order to support these longlived applications you need an architecture that's highly testable highly Deployable",
    "start": "606880",
    "end": "613680"
  },
  {
    "text": "and highly maintainable I mean that those are sort of the basic requirements to actually do",
    "start": "613680",
    "end": "619360"
  },
  {
    "text": "devops um in particular it needs to be automated tested using automated tests",
    "start": "619360",
    "end": "626240"
  },
  {
    "text": "um to support the autonomous teams if we we apply Conway's law which says that",
    "start": "626240",
    "end": "631600"
  },
  {
    "text": "the architecture and the team structure are basically mirrors of one another if you want to have Loosely couped teams",
    "start": "631600",
    "end": "638320"
  },
  {
    "text": "you actually need a Loosely coupled modular architecture so those two things go hand in hand and then finally for to",
    "start": "638320",
    "end": "645839"
  },
  {
    "text": "have a long lift application that you can evolve over time to to take",
    "start": "645839",
    "end": "652839"
  },
  {
    "text": "advantage of new technology you also need a highly modular architecture that",
    "start": "652839",
    "end": "658279"
  },
  {
    "text": "lets you replace parts of it incrementally and you just need this General kind of attribute of",
    "start": "658279",
    "end": "665120"
  },
  {
    "text": "evolvability as well so those the that's the architecture that we need so we go",
    "start": "665120",
    "end": "670959"
  },
  {
    "text": "look at a monolithic application um and most applications that I built over the years until I",
    "start": "670959",
    "end": "678600"
  },
  {
    "text": "don't know 2011 2012 kind of look like this so internally they were actually",
    "start": "678600",
    "end": "683720"
  },
  {
    "text": "layered they had some modules and so on but everything was packaged up as a single deploy loable unit so in Java",
    "start": "683720",
    "end": "691120"
  },
  {
    "text": "this was a war file um in some other language you there would be a way some equivalent Deployable unit or",
    "start": "691120",
    "end": "698600"
  },
  {
    "text": "executable so that's the monolithic architecture that this architecture is",
    "start": "698600",
    "end": "703680"
  },
  {
    "text": "not an anti- pattern it's and can be a good choice because if you have a small",
    "start": "703680",
    "end": "709079"
  },
  {
    "text": "monolith it can be highly testable Deployable maintainable so on and so forth the problem you have is that",
    "start": "709079",
    "end": "716079"
  },
  {
    "text": "applications have a habit of growing so you start off with a tiny little application but then little by little",
    "start": "716079",
    "end": "723360"
  },
  {
    "text": "the developers are making it bigger and bigger because they're adding new features every day they're committing",
    "start": "723360",
    "end": "728639"
  },
  {
    "text": "their tested 20 lines of code or whatever that metric is um so the",
    "start": "728639",
    "end": "733920"
  },
  {
    "text": "application is getting bigger the development team is getting bigger so the actual rate of change is even",
    "start": "733920",
    "end": "738959"
  },
  {
    "text": "increasing as well um and then you might try and split up the team into a team of",
    "start": "738959",
    "end": "744880"
  },
  {
    "text": "teams But ultimately they all contributing the same code base and things just tend to get slower and",
    "start": "744880",
    "end": "751440"
  },
  {
    "text": "slower if for no other reason than the sheer size of the application and then probably at some",
    "start": "751440",
    "end": "758480"
  },
  {
    "text": "point modularity breaks down because the code base is too large to fit in any developer's head right and if you don't",
    "start": "758480",
    "end": "766440"
  },
  {
    "text": "understand it it's difficult to change you're likely to um kind of make sort of",
    "start": "766440",
    "end": "771920"
  },
  {
    "text": "quick choices and break and and ignore service boundaries especially because in",
    "start": "771920",
    "end": "777160"
  },
  {
    "text": "languages like Java there's no really an effective module um modularity mechanism",
    "start": "777160",
    "end": "784480"
  },
  {
    "text": "so you end up ultimately with a big ball of mud that's even worse and that's the downward spiral and then as I mentioned",
    "start": "784480",
    "end": "792839"
  },
  {
    "text": "your technology stack is getting out of dat literally day by day you know the",
    "start": "792839",
    "end": "798720"
  },
  {
    "text": "the Fantastic new framework that you picked back in the year 2000 you know 19",
    "start": "798720",
    "end": "806160"
  },
  {
    "text": "years later is getting kind of out of date right right even the programming language that you picked perhaps is not",
    "start": "806160",
    "end": "813760"
  },
  {
    "text": "so exciting anymore you know I've talked with clients who have had apps that are 20 years old and they're written in some",
    "start": "813760",
    "end": "820480"
  },
  {
    "text": "ancient 4gl from database company that no longer exists but they're absolutely",
    "start": "820480",
    "end": "825639"
  },
  {
    "text": "Mission critical to you know for their business so not an uncommon situation",
    "start": "825639",
    "end": "831120"
  },
  {
    "text": "and I'm sure some of you in this room are you know this is your daily existence right which is what I call",
    "start": "831120",
    "end": "837720"
  },
  {
    "text": "monolithic heal and if I was to draw this you know picture you know as a graph right you know as as the size and",
    "start": "837720",
    "end": "845959"
  },
  {
    "text": "the complexity of your application and its value increases over time that all",
    "start": "845959",
    "end": "852320"
  },
  {
    "text": "of those desirable ilities kind of go go in the opposite direction so your ability to deliver",
    "start": "852320",
    "end": "860240"
  },
  {
    "text": "software rapidly and frequently and reliably just declines over time and",
    "start": "860240",
    "end": "865320"
  },
  {
    "text": "this is usually a problem because since software is eating the world you actually need to be going faster not",
    "start": "865320",
    "end": "872639"
  },
  {
    "text": "slower so there really is this risk of disruption to your business which actually could pose an existential",
    "start": "872639",
    "end": "880600"
  },
  {
    "text": "threat you know for instance I think like in Hong Kong was it like eight virtual Banks were licensed overnight",
    "start": "880600",
    "end": "887800"
  },
  {
    "text": "suddenly the incumbent physical Banks you know they had eight new competitors or in the gig economy there's an",
    "start": "887800",
    "end": "894639"
  },
  {
    "text": "insurance company that offers hourly insurance for um gig workers like a lyt",
    "start": "894639",
    "end": "900959"
  },
  {
    "text": "and a uber right and so imagine you're working for an insurance company with your ancient Mainframe systems can you",
    "start": "900959",
    "end": "909000"
  },
  {
    "text": "really you know adapt that quickly and offer hourly Insurance perhaps not so th",
    "start": "909000",
    "end": "915720"
  },
  {
    "text": "those kinds of changes can ultimately pose an existential threat to your",
    "start": "915720",
    "end": "921079"
  },
  {
    "text": "business so what can you do about it so 10 years ago 9 10 years ago now I I read",
    "start": "921079",
    "end": "927320"
  },
  {
    "text": "this book The Art of scalability which was written by some folks who worked at",
    "start": "927320",
    "end": "932360"
  },
  {
    "text": "eBay one of the original sort of thought leaders in large scale applications and",
    "start": "932360",
    "end": "938000"
  },
  {
    "text": "in the book they had this three-dimensional model of scaling so three different dimensions x-axis",
    "start": "938000",
    "end": "944199"
  },
  {
    "text": "scaling is running multiple copies of your monolith behind a a standard load balancer we do that all the time Zed",
    "start": "944199",
    "end": "951720"
  },
  {
    "text": "axis scaling is running multiple copies of your monolith behind a load balancer that uses some attribute of the request",
    "start": "951720",
    "end": "959199"
  },
  {
    "text": "to route that request accordingly so some requ you know requests for one some",
    "start": "959199",
    "end": "964240"
  },
  {
    "text": "customers get routed to destination a requests for other customers get routed to destination B and so on at the",
    "start": "964240",
    "end": "971800"
  },
  {
    "text": "database level that would be called shutting quite a common technique but both x and z AIS scaling are all about",
    "start": "971800",
    "end": "979000"
  },
  {
    "text": "scaling the monolith but then there's Y axis scaling or functional",
    "start": "979000",
    "end": "984160"
  },
  {
    "text": "decomposition which is where you basically break up what would otherwise",
    "start": "984160",
    "end": "989399"
  },
  {
    "text": "be a monolithic application into a set of smaller applications or in other",
    "start": "989399",
    "end": "995639"
  },
  {
    "text": "words services and for the most part this was sort of my you know this to me kind of is what got me thinking about",
    "start": "995639",
    "end": "1002480"
  },
  {
    "text": "the microservice architecture especially at the time the original cloud Foundry was a monolith and had we broken it",
    "start": "1002480",
    "end": "1009199"
  },
  {
    "text": "apart like this it would have solved a number of sort of development and operational",
    "start": "1009199",
    "end": "1015759"
  },
  {
    "text": "challenges so so that's kind of the the essence of the microservice architecture",
    "start": "1015759",
    "end": "1021360"
  },
  {
    "text": "it's really functional decomposition the other sort of a more detailed way of explaining this is that",
    "start": "1021360",
    "end": "1027760"
  },
  {
    "text": "it's an architectural style that structures an application as a set of services and each service I hate",
    "start": "1027760",
    "end": "1034880"
  },
  {
    "text": "actually hate the term microservice because that implies tiny which I think is quite",
    "start": "1034880",
    "end": "1040760"
  },
  {
    "text": "misleading um it's just does it's not helpful so for me you know M an",
    "start": "1040760",
    "end": "1046959"
  },
  {
    "text": "individual service is maintainable and testable right actually has to be",
    "start": "1046959",
    "end": "1052160"
  },
  {
    "text": "Loosely coupled with other services because because of the requirement for modularity in order to support the",
    "start": "1052160",
    "end": "1058400"
  },
  {
    "text": "Loosely couple teams and I'll talk more about that later um has to be independently",
    "start": "1058400",
    "end": "1064320"
  },
  {
    "text": "Deployable because deployability is a key thing so in it it has to essentially be an application or a Deployable unit",
    "start": "1064320",
    "end": "1072280"
  },
  {
    "text": "or executable in its own right tends to be it tends to implement a business case",
    "start": "1072280",
    "end": "1078880"
  },
  {
    "text": "capability or business function um so one reason for that is that sort of the business the functions",
    "start": "1078880",
    "end": "1086799"
  },
  {
    "text": "that your business implements tend to be somewhat stable so if your technical",
    "start": "1086799",
    "end": "1092280"
  },
  {
    "text": "architecture mirrors that then they are also stable and then also and this is",
    "start": "1092280",
    "end": "1097600"
  },
  {
    "text": "the last point which is really important and kind of says something about the size of a service it should be owned by",
    "start": "1097600",
    "end": "1104640"
  },
  {
    "text": "a small team so if you have a large team owning a service it's you're not really",
    "start": "1104640",
    "end": "1110320"
  },
  {
    "text": "doing microservices at this point because small teams are teams that are",
    "start": "1110320",
    "end": "1115840"
  },
  {
    "text": "highly productive and the larger the team gets the less productive it gets now in terms of ser how many services",
    "start": "1115840",
    "end": "1122400"
  },
  {
    "text": "should you have a good starting point is actually just to have one service per",
    "start": "1122400",
    "end": "1128600"
  },
  {
    "text": "team because that's all you need to enable team autonomy so despite what some companies",
    "start": "1128600",
    "end": "1137159"
  },
  {
    "text": "like uber would say where hey we've got a service C developer right I mean in my",
    "start": "1137159",
    "end": "1142720"
  },
  {
    "text": "opinion that's far too complex far too fine grained an architecture so I think in an Enterprise setting just have have",
    "start": "1142720",
    "end": "1150200"
  },
  {
    "text": "a relatively coar grained architecture now in the case of microservices doio",
    "start": "1150200",
    "end": "1156159"
  },
  {
    "text": "sorry food too um so earlier I showed the monolithic version right so in the",
    "start": "1156159",
    "end": "1163280"
  },
  {
    "text": "microservice version it would look like this you'd have a bunch of services each one of which implements a business",
    "start": "1163280",
    "end": "1170320"
  },
  {
    "text": "function or business capability like order management delivery management and so on each one of the services has its",
    "start": "1170320",
    "end": "1178039"
  },
  {
    "text": "own database that's important for loose coupling that I will talk about in a",
    "start": "1178039",
    "end": "1183080"
  },
  {
    "text": "minute um the services often for reasons I will also talk about communicate",
    "start": "1183080",
    "end": "1190559"
  },
  {
    "text": "asynchronously um and you can also I should also say you can functionally decompose the web tier as well sitting",
    "start": "1190559",
    "end": "1197520"
  },
  {
    "text": "in front of them is n API Gateway that basically defines the external API for",
    "start": "1197520",
    "end": "1203360"
  },
  {
    "text": "those services and in this case is invoked by JavaScript and and running in",
    "start": "1203360",
    "end": "1209559"
  },
  {
    "text": "a browser also by a mobile application so that's sort of kind of",
    "start": "1209559",
    "end": "1215000"
  },
  {
    "text": "the big the big picture view and obviously as you can see it's it's kind of a bit complicated lots of moving",
    "start": "1215000",
    "end": "1221039"
  },
  {
    "text": "Parts which hints it sort of some of the drawbacks of this approach but in terms of benefits right you you get much",
    "start": "1221039",
    "end": "1229000"
  },
  {
    "text": "better testability um maintainability because the services are basically much smaller",
    "start": "1229000",
    "end": "1236080"
  },
  {
    "text": "applications they fit in a developer's head which is really really important",
    "start": "1236080",
    "end": "1241480"
  },
  {
    "text": "they're obviously by definition independently Deployable this is quite a",
    "start": "1241480",
    "end": "1246679"
  },
  {
    "text": "modular architecture right the the module boundaries are actually basically sort",
    "start": "1246679",
    "end": "1254000"
  },
  {
    "text": "of remote apis so you can't bypass them",
    "start": "1254000",
    "end": "1259480"
  },
  {
    "text": "and in Access sort of the private internals of an actual service and",
    "start": "1259480",
    "end": "1265799"
  },
  {
    "text": "what's really important this is a this the this architecture is highly evolvable as well you you no longer are",
    "start": "1265799",
    "end": "1273679"
  },
  {
    "text": "required to use the same technology stack for each service it lets you",
    "start": "1273679",
    "end": "1279320"
  },
  {
    "text": "upgrade in an incremental way um but by far sort of the best way that kind of",
    "start": "1279320",
    "end": "1285640"
  },
  {
    "text": "summarizes this is to relate it back to the success triangle so the microservice",
    "start": "1285640",
    "end": "1291120"
  },
  {
    "text": "architecture gives you the testability and the deployability that you need in order to devops and it also have gives",
    "start": "1291120",
    "end": "1298720"
  },
  {
    "text": "you the illes that are required to to enable you to have longlived",
    "start": "1298720",
    "end": "1304520"
  },
  {
    "text": "applications and also the modular the modular nature of this architecture does",
    "start": "1304520",
    "end": "1309919"
  },
  {
    "text": "an excellent job of supporting of enabling the teams to be autonomous as",
    "start": "1309919",
    "end": "1315279"
  },
  {
    "text": "well each team can develop and test and employ and scale their service",
    "start": "1315279",
    "end": "1322039"
  },
  {
    "text": "independently of the other teams and that's really important but but you know in the interest of full disclosure there",
    "start": "1322039",
    "end": "1328480"
  },
  {
    "text": "are some drawbacks you already got a sense of that it's a lot more complex you're building a distributed system so",
    "start": "1328480",
    "end": "1335279"
  },
  {
    "text": "there were quite complex issues around development um testing in a sense is",
    "start": "1335279",
    "end": "1342960"
  },
  {
    "text": "simultaneously easier and harder and I'll talk about some of that later",
    "start": "1342960",
    "end": "1348000"
  },
  {
    "text": "deployment while it's sort of each service is independently Deployable you basically",
    "start": "1348000",
    "end": "1353279"
  },
  {
    "text": "have an order of magnitude or two orders of magnitude more moving Parts in production that all need to be monitored",
    "start": "1353279",
    "end": "1359919"
  },
  {
    "text": "and managed and orchestrated and so on so it's all all a bit complicated um defining service",
    "start": "1359919",
    "end": "1367679"
  },
  {
    "text": "boundaries is tricky and if you get it wrong it's really really bad that",
    "start": "1367679",
    "end": "1372960"
  },
  {
    "text": "actually can slow you down and not make you go faster and then also the act of",
    "start": "1372960",
    "end": "1378720"
  },
  {
    "text": "taking a monolith and incrementally migrating it into a set of services is",
    "start": "1378720",
    "end": "1383960"
  },
  {
    "text": "extremely chall time consuming and painful",
    "start": "1383960",
    "end": "1389080"
  },
  {
    "text": "um but but people have done this so you can do it too okay so that's the",
    "start": "1389080",
    "end": "1394799"
  },
  {
    "text": "definition the essential definition of the microservice architecture I now want to spend a little bit of time talking",
    "start": "1394799",
    "end": "1400520"
  },
  {
    "text": "about the the hexagonal architecture which is a good way of thinking about",
    "start": "1400520",
    "end": "1405880"
  },
  {
    "text": "the the individual structure of each service so we like to use the three",
    "start": "1405880",
    "end": "1411279"
  },
  {
    "text": "three tier architecture right where you've got the presentation layer the business logic layer and the databased",
    "start": "1411279",
    "end": "1416880"
  },
  {
    "text": "access layer you know that's sort of the standard way of like structuring it we think that our system is structured but",
    "start": "1416880",
    "end": "1424080"
  },
  {
    "text": "it tends not to actually be a good reflect it doesn't actually it's not actually accurate um some of the",
    "start": "1424080",
    "end": "1431360"
  },
  {
    "text": "dependencies are in fact the other way around or they should be the other way around and it's not sufficiently",
    "start": "1431360",
    "end": "1437120"
  },
  {
    "text": "flexible so for this reason I actually like the hexagonal architecture which",
    "start": "1437120",
    "end": "1442840"
  },
  {
    "text": "places the business logic at the center of the application then the business logic",
    "start": "1442840",
    "end": "1449400"
  },
  {
    "text": "exposes or has a number of ports which are basically interfaces like literally",
    "start": "1449400",
    "end": "1455400"
  },
  {
    "text": "interfaces in a Java application some ports are inbound so that enables the",
    "start": "1455400",
    "end": "1461480"
  },
  {
    "text": "business logic to be invoked other ports are outbound which enables which enables",
    "start": "1461480",
    "end": "1467279"
  },
  {
    "text": "the business logic to invoke other things access the database interact with",
    "start": "1467279",
    "end": "1473080"
  },
  {
    "text": "message broker invoke some other service so that's sort of the internal",
    "start": "1473080",
    "end": "1479120"
  },
  {
    "text": "that's the you know the most important part of the application is its business logic and then around the outside there",
    "start": "1479120",
    "end": "1485200"
  },
  {
    "text": "are various adapters which handle like for example inbound requests so an",
    "start": "1485200",
    "end": "1490960"
  },
  {
    "text": "inbound adapter will invoke the business logic using an inbound Port there are also outbound adapters which actually",
    "start": "1490960",
    "end": "1499360"
  },
  {
    "text": "like in this case the data access object implements the interface that defines",
    "start": "1499360",
    "end": "1504880"
  },
  {
    "text": "the outbound Port um and then there are other ports as well like for doing messaging and",
    "start": "1504880",
    "end": "1510799"
  },
  {
    "text": "also for invoking other services so that's sort of a nice model a much better way of thinking about the",
    "start": "1510799",
    "end": "1517000"
  },
  {
    "text": "architecture of your service now how that relates back to to actual Services",
    "start": "1517000",
    "end": "1522720"
  },
  {
    "text": "is as follows so the whole point of a microservice is to expose an API to its",
    "start": "1522720",
    "end": "1528559"
  },
  {
    "text": "consumers right that's his reason for existing so if you're on a order",
    "start": "1528559",
    "end": "1533640"
  },
  {
    "text": "management team your whole job is around implementing the order management API an",
    "start": "1533640",
    "end": "1540320"
  },
  {
    "text": "API consists of two parts it has operations um which can be invoked by",
    "start": "1540320",
    "end": "1546320"
  },
  {
    "text": "the consumers there's two types of operations commands which change data place in order cancel an order there's",
    "start": "1546320",
    "end": "1553640"
  },
  {
    "text": "queries that retrieve data find order find order history and so on",
    "start": "1553640",
    "end": "1559080"
  },
  {
    "text": "these operations can be invoked either synchronously which is our standard way of doing it but for reasons I'll get",
    "start": "1559080",
    "end": "1565840"
  },
  {
    "text": "into later it's often desirable to invoke them asynchronously um you know basically by",
    "start": "1565840",
    "end": "1574600"
  },
  {
    "text": "sending messages via message bus broker that's that's sort of the standard approach the other part of an API are",
    "start": "1574600",
    "end": "1581720"
  },
  {
    "text": "the events that are emitted by the service so these in if you're familiar with domain Dr design would be domain",
    "start": "1581720",
    "end": "1589559"
  },
  {
    "text": "events so when when when a business object is created or updated an event",
    "start": "1589559",
    "end": "1596080"
  },
  {
    "text": "would be emitted like order created order cancelled and so on so the API is",
    "start": "1596080",
    "end": "1601200"
  },
  {
    "text": "the most important part of the service but a service also has dependencies so it can invoke operations that are",
    "start": "1601200",
    "end": "1608520"
  },
  {
    "text": "implemented by other services and then it can also subscribe to events that are implemented that are",
    "start": "1608520",
    "end": "1616039"
  },
  {
    "text": "published by other services as well so that's sort of the kind of the developer view of of of a service it's like in the",
    "start": "1616039",
    "end": "1623720"
  },
  {
    "text": "case of the order service in the example application in my book it implements a",
    "start": "1623720",
    "end": "1629240"
  },
  {
    "text": "create order operation that's that's a post it emits order creative events and",
    "start": "1629240",
    "end": "1635279"
  },
  {
    "text": "then it's primarily collaborating asynchronously with other",
    "start": "1635279",
    "end": "1641880"
  },
  {
    "text": "services so there's also an operational aspect to a service as well so so it has",
    "start": "1643240",
    "end": "1649000"
  },
  {
    "text": "it supports externalized configuration for passing in configuration properties",
    "start": "1649000",
    "end": "1654600"
  },
  {
    "text": "like databas like the databased IP address and credentials it will",
    "start": "1654600",
    "end": "1659919"
  },
  {
    "text": "typically do lower logging is also essential it will also Implement a health check API as well like SL health",
    "start": "1659919",
    "end": "1668279"
  },
  {
    "text": "or slhc so the runtime can um check up on the health of a service um it should",
    "start": "1668279",
    "end": "1675640"
  },
  {
    "text": "expose metrics as well to a metric collection system and it should support",
    "start": "1675640",
    "end": "1681480"
  },
  {
    "text": "distributed tracing as well um which is really really useful for debugging that's kind of a key",
    "start": "1681480",
    "end": "1688480"
  },
  {
    "text": "observability pattern so that's sort of the struct so that's sort of the production ready nature of a service and",
    "start": "1688480",
    "end": "1696279"
  },
  {
    "text": "normally many of these capabilities would be provided by what I call a micro",
    "start": "1696279",
    "end": "1702080"
  },
  {
    "text": "service chassis framework such as spring boot or spring Cloud if you work in the",
    "start": "1702080",
    "end": "1707679"
  },
  {
    "text": "Javas space and there are analogous ones in other for other languages as well okay so that's sort of the",
    "start": "1707679",
    "end": "1714640"
  },
  {
    "text": "structure of an individual service now I want to talk a little bit about coupling um beginning with icebergs which yes",
    "start": "1714640",
    "end": "1723720"
  },
  {
    "text": "it's not a geometric shape but I think of them as triangles so Services",
    "start": "1723720",
    "end": "1729919"
  },
  {
    "text": "collaborate like so for instance the order service might actually have to Reserve credit by invoking the customer",
    "start": "1729919",
    "end": "1737399"
  },
  {
    "text": "service you know assuming customers have a credit limit so some amount of coupling is inevitable because because",
    "start": "1737399",
    "end": "1744240"
  },
  {
    "text": "of the collaborative nature of these services but you want to make sure that this coupling is what what is defined as",
    "start": "1744240",
    "end": "1752360"
  },
  {
    "text": "loose right and it's actually two types of coupling runtime coupling which I'm",
    "start": "1752360",
    "end": "1757559"
  },
  {
    "text": "going to talk about in a minute but that arises when Services synchronously invoke one another and then there's",
    "start": "1757559",
    "end": "1764360"
  },
  {
    "text": "design time coupling um which I'm want to talk about now and that's where one changing one",
    "start": "1764360",
    "end": "1772679"
  },
  {
    "text": "service such as the customer service regularly causes other services to be",
    "start": "1772679",
    "end": "1779279"
  },
  {
    "text": "changed in lock step and this is particularly problematic because design",
    "start": "1779279",
    "end": "1785039"
  },
  {
    "text": "time coupling requires the teams to collaborate and coordinate their work",
    "start": "1785039",
    "end": "1791399"
  },
  {
    "text": "right like I'm working on the customer service and oh dear I need to make a change that's back that is breaking to",
    "start": "1791399",
    "end": "1797720"
  },
  {
    "text": "the customer service API so I now need to meet and and coord plan that change",
    "start": "1797720",
    "end": "1804000"
  },
  {
    "text": "with all of the other teams you know so you got to schedule meetings you have to get a meeting room which I'm sure is",
    "start": "1804000",
    "end": "1810679"
  },
  {
    "text": "challenging in most of your companies it's like a universal truth as far as I can tell Never Enough meeting rooms and",
    "start": "1810679",
    "end": "1818000"
  },
  {
    "text": "whenever you have to coordinate across teams it slows down development quite a",
    "start": "1818000",
    "end": "1823039"
  },
  {
    "text": "lot so it's really important to ENT to minimize the amount of coupling so you want to have stable well-designed apis",
    "start": "1823039",
    "end": "1832000"
  },
  {
    "text": "that do a really good job of encapsulating the internals of the service so that they can be changed",
    "start": "1832000",
    "end": "1838000"
  },
  {
    "text": "regularly and you want to be careful with things like shared libraries especially ones that contain business",
    "start": "1838000",
    "end": "1844120"
  },
  {
    "text": "logic because if the rules that that business logic Implement change then all",
    "start": "1844120",
    "end": "1849600"
  },
  {
    "text": "of the light all of the services have to be updated in in lockstep so I like to think of services as looking like",
    "start": "1849600",
    "end": "1856279"
  },
  {
    "text": "icebergs where they have a relatively small API um and and a relatively large",
    "start": "1856279",
    "end": "1864960"
  },
  {
    "text": "implementation so you know a good example of this is if you think about twio the messaging system there's an",
    "start": "1864960",
    "end": "1872320"
  },
  {
    "text": "operation like send text message right it's kind of like phone number message",
    "start": "1872320",
    "end": "1877519"
  },
  {
    "text": "bit more complicated than that in reality but that's a great API because it that it's very small but it actually",
    "start": "1877519",
    "end": "1885679"
  },
  {
    "text": "behind it is a really complex implementation um and likewise you know",
    "start": "1885679",
    "end": "1891840"
  },
  {
    "text": "with with strip for doing payments it's like charge credit card right behind that it's a really complex",
    "start": "1891840",
    "end": "1898279"
  },
  {
    "text": "implementation and that's great because you can the team that owns the service can keep enhancing the implementation",
    "start": "1898279",
    "end": "1904639"
  },
  {
    "text": "without introducing breaking changes to the API now you contrast this with the",
    "start": "1904639",
    "end": "1910279"
  },
  {
    "text": "with an anti pattern where you've got a service that's basically all API and no",
    "start": "1910279",
    "end": "1916519"
  },
  {
    "text": "implementation like it's just a wrapper around the database guaranteed if that database change the database schema",
    "start": "1916519",
    "end": "1924039"
  },
  {
    "text": "changes the API will change which will then cause other services to be updated",
    "start": "1924039",
    "end": "1931240"
  },
  {
    "text": "um at the same time and that can just Ripple throughout your system and that's deeply problematic and similarly sharing",
    "start": "1931240",
    "end": "1939080"
  },
  {
    "text": "database tables is a really problematic kind of implementation coupling because",
    "start": "1939080",
    "end": "1946159"
  },
  {
    "text": "for instance imagine if the order service access the customer table directly well that would mean that",
    "start": "1946159",
    "end": "1952799"
  },
  {
    "text": "whenever the customer table customer team wanted to change that scheme or they'd have to coordinate that work with",
    "start": "1952799",
    "end": "1958320"
  },
  {
    "text": "the other with the order team and everyone else and you know you end up in a situation in a lot of Enterprises",
    "start": "1958320",
    "end": "1964120"
  },
  {
    "text": "where it becomes impossible to change anything um so basically databases are",
    "start": "1964120",
    "end": "1972320"
  },
  {
    "text": "an implementation detail that that encapsulated by an API and that's",
    "start": "1972320",
    "end": "1978519"
  },
  {
    "text": "actually kind of a big change in a lot of Enterprises which I get the people in",
    "start": "1978519",
    "end": "1983679"
  },
  {
    "text": "Enterprises always think about their database tables right and it's like I want to access that table and that table",
    "start": "1983679",
    "end": "1990840"
  },
  {
    "text": "and really in the microservice world it's all about apis and services and we",
    "start": "1990840",
    "end": "1996120"
  },
  {
    "text": "don't talk about databases okay so that that's how to deal with um design time coupling and",
    "start": "1996120",
    "end": "2005039"
  },
  {
    "text": "how to minimize it and interestingly this design time coupling is really I",
    "start": "2005039",
    "end": "2011080"
  },
  {
    "text": "mean that's one of the core problems in software right it's like how do you break things up into pieces that can",
    "start": "2011080",
    "end": "2017519"
  },
  {
    "text": "evolve in different ways and still work together so the other thing I want to talk about um using the cylinder",
    "start": "2017519",
    "end": "2026240"
  },
  {
    "text": "metaphor um so I guess that's a real shape right is is relying on asynchronous messaging now today I mean",
    "start": "2026240",
    "end": "2034320"
  },
  {
    "text": "we all just love to use this was in Martin's talk as well right we always we love to use rest",
    "start": "2034320",
    "end": "2040840"
  },
  {
    "text": "because well because we do right but that can be deeply problematic so let's",
    "start": "2040840",
    "end": "2046720"
  },
  {
    "text": "imagine that you had implemented the order service so that it worked like this post request comes in to create an",
    "start": "2046720",
    "end": "2053158"
  },
  {
    "text": "order partway through doing that the order service then makes a put request",
    "start": "2053159",
    "end": "2059000"
  },
  {
    "text": "to the customer service to Reserve credit and then it's sitting there waiting for the customer service to",
    "start": "2059000",
    "end": "2065118"
  },
  {
    "text": "respond response comes back do the order service responds to its client",
    "start": "2065119",
    "end": "2071280"
  },
  {
    "text": "superficially that's super simple right the problem that you run into is that",
    "start": "2071280",
    "end": "2077878"
  },
  {
    "text": "well you can't create orders unless both the order service and the customer",
    "start": "2077879",
    "end": "2082919"
  },
  {
    "text": "service are up and running at the same time um so you know mathematically the",
    "start": "2082919",
    "end": "2089599"
  },
  {
    "text": "availability of the create order mpoint is a product of the availability of this",
    "start": "2089599",
    "end": "2095158"
  },
  {
    "text": "of the two services so it's gone from highly well you want it to be highly",
    "start": "2095159",
    "end": "2101599"
  },
  {
    "text": "available but clearly it is not um and really this is sort of a",
    "start": "2101599",
    "end": "2107400"
  },
  {
    "text": "symptom of a common design sort of anti pattern where you just think well we had",
    "start": "2107400",
    "end": "2112920"
  },
  {
    "text": "a bunch of modules our monolith they just communicated and so we just turn them into services and instead of method",
    "start": "2112920",
    "end": "2119760"
  },
  {
    "text": "calls we'll replace it with rest and everything will be fine right or or grpc",
    "start": "2119760",
    "end": "2126040"
  },
  {
    "text": "it doesn't really matter um but the obvious problem is well one you've got latency that can kill you right but also",
    "start": "2126040",
    "end": "2133240"
  },
  {
    "text": "you've got this synchronous sort of runtime coupling where",
    "start": "2133240",
    "end": "2138359"
  },
  {
    "text": "essentially any one of those services in that in a chain is a single point of",
    "start": "2138359",
    "end": "2144440"
  },
  {
    "text": "failure so you've got this incredibly brittle architecture you know where the",
    "start": "2144440",
    "end": "2149680"
  },
  {
    "text": "availability of the end of a given end point is the availability of an individual service to the power n so it",
    "start": "2149680",
    "end": "2157800"
  },
  {
    "text": "you know becomes highly unavailable or less than highly available quite",
    "start": "2157800",
    "end": "2164000"
  },
  {
    "text": "quickly um so for that reason you want to particularly when implementing",
    "start": "2164000",
    "end": "2170319"
  },
  {
    "text": "commands which are doing updates you want to rely quite heavily on asynchronous messaging and I sort of",
    "start": "2170319",
    "end": "2177319"
  },
  {
    "text": "like like to recommend Gregor's book right um Enterprise Integration patterns because that has a great pattern",
    "start": "2177319",
    "end": "2184240"
  },
  {
    "text": "language for thinking about messaging systems um so the idea right is a sender sends a",
    "start": "2184240",
    "end": "2191160"
  },
  {
    "text": "message and a message is comprised of headers metadata and a payload through",
    "start": "2191160",
    "end": "2196359"
  },
  {
    "text": "to a message Channel and that message is read by a recipient um and there's a whole very",
    "start": "2196359",
    "end": "2202680"
  },
  {
    "text": "rich pattern language in the book but basically the channel is an abstraction",
    "start": "2202680",
    "end": "2207720"
  },
  {
    "text": "over whatever messaging capabilities your broker provides so it could actually be at a pach CFA topic or a JMS",
    "start": "2207720",
    "end": "2214920"
  },
  {
    "text": "Q or or topic but you of an abstract way to to model things and I find that quite",
    "start": "2214920",
    "end": "2222240"
  },
  {
    "text": "useful so at a higher level how do you make use of them inside a microservice",
    "start": "2222240",
    "end": "2228000"
  },
  {
    "text": "architecture well so one version of one way to make the order service more",
    "start": "2228000",
    "end": "2235240"
  },
  {
    "text": "available is to use the Saga pattern which is a way of doing implementing",
    "start": "2235240",
    "end": "2241040"
  },
  {
    "text": "transactions that spam multiple services in a microservice architecture and I",
    "start": "2241040",
    "end": "2246400"
  },
  {
    "text": "cover it thoroughly in my book chapter 4 so you should check that",
    "start": "2246400",
    "end": "2252000"
  },
  {
    "text": "out um so anyway this is a really simple",
    "start": "2252000",
    "end": "2258440"
  },
  {
    "text": "example of actually specifically what's known as choreography based Saga so in",
    "start": "2258440",
    "end": "2263560"
  },
  {
    "text": "this example you know the the create request actually respond returns",
    "start": "2263560",
    "end": "2269119"
  },
  {
    "text": "immediately so it's actually saying well the order idea is this but by the way",
    "start": "2269119",
    "end": "2274480"
  },
  {
    "text": "can't tell you the outcome of the creation right cuz this in this",
    "start": "2274480",
    "end": "2279640"
  },
  {
    "text": "architecture that then happens the finalization of the order is done",
    "start": "2279640",
    "end": "2285040"
  },
  {
    "text": "asynchronously so the order service publishing is is an event saying hey I've created an order for this customer",
    "start": "2285040",
    "end": "2292119"
  },
  {
    "text": "customer service gets that event and then attempts to Reserve credit and then",
    "start": "2292119",
    "end": "2297440"
  },
  {
    "text": "will publish an event saying the credit has been reserved or credit has um limit",
    "start": "2297440",
    "end": "2303319"
  },
  {
    "text": "has been exceeded the order service then gets that event changes the status of the order to",
    "start": "2303319",
    "end": "2309440"
  },
  {
    "text": "approved so this is an eventually consistent model where once the dust",
    "start": "2309440",
    "end": "2315560"
  },
  {
    "text": "settles the order has been created or not and the credit has been reserved or not and this is kind of nice because the",
    "start": "2315560",
    "end": "2322079"
  },
  {
    "text": "availability of create order is now the availability of the order",
    "start": "2322079",
    "end": "2327200"
  },
  {
    "text": "service um so the order service can keep accepting orders and trying to approve",
    "start": "2327200",
    "end": "2332319"
  },
  {
    "text": "them even though other services in the system are are not available",
    "start": "2332319",
    "end": "2338319"
  },
  {
    "text": "um so that actually works quite well the drawback is you have the complexity of sagas um but in a lot and there some",
    "start": "2338319",
    "end": "2345839"
  },
  {
    "text": "very s subtle issues and actually if you go to my in all seriousness if you read my book or go to my blog um I talk about",
    "start": "2345839",
    "end": "2353800"
  },
  {
    "text": "some of those issues in a lot of details um then the other the other",
    "start": "2353800",
    "end": "2359520"
  },
  {
    "text": "complication is is that the the response to the post doesn't contain the outcome",
    "start": "2359520",
    "end": "2366480"
  },
  {
    "text": "it just says the order request has been accepted and the order idea is this and the client kind of has to check back so",
    "start": "2366480",
    "end": "2373560"
  },
  {
    "text": "it's it's doing more work um but interestingly this Saga",
    "start": "2373560",
    "end": "2378800"
  },
  {
    "text": "pattern is actually how you implement transactions in a microservice architecture I think Martin in his talk",
    "start": "2378800",
    "end": "2384960"
  },
  {
    "text": "did mention that like two phase commit and XA is a fundamentally flawed mechanism so in in microservice",
    "start": "2384960",
    "end": "2392359"
  },
  {
    "text": "architecture sagas is what you need but there are some subtle comp complexities",
    "start": "2392359",
    "end": "2398040"
  },
  {
    "text": "to them so the other the other option is actually to replicate data using a",
    "start": "2398040",
    "end": "2404800"
  },
  {
    "text": "pattern which often goes by the name of command query responsibility segregation",
    "start": "2404800",
    "end": "2410920"
  },
  {
    "text": "quite a mouthful but it's basically an event driven way of replicating data to",
    "start": "2410920",
    "end": "2416160"
  },
  {
    "text": "where it's needed and there's a couple of different uses for this the other use is to implement high performance",
    "start": "2416160",
    "end": "2421760"
  },
  {
    "text": "scalable queries here what it's what's actually happening is the credit limit",
    "start": "2421760",
    "end": "2428200"
  },
  {
    "text": "is actually replicated to the or to the order service and the order service is",
    "start": "2428200",
    "end": "2435119"
  },
  {
    "text": "now responsible for keeping track of the available credit that's no longer",
    "start": "2435119",
    "end": "2440319"
  },
  {
    "text": "maintained by the customer service so that means that in this simplistic",
    "start": "2440319",
    "end": "2446079"
  },
  {
    "text": "example the order service has all of the data that it needs in order to validate",
    "start": "2446079",
    "end": "2451319"
  },
  {
    "text": "an order because it has the available credit there locally",
    "start": "2451319",
    "end": "2457880"
  },
  {
    "text": "um and that that increases the availability of the system um it also means that the",
    "start": "2457880",
    "end": "2464560"
  },
  {
    "text": "response can actually contain the outcome of validation but you do have",
    "start": "2464560",
    "end": "2470319"
  },
  {
    "text": "the complexity and cost of of replicating data so when I was in",
    "start": "2470319",
    "end": "2476200"
  },
  {
    "text": "Australia last week I made the joke that there's only 20 million people living in in Australia so how much data is there",
    "start": "2476200",
    "end": "2482839"
  },
  {
    "text": "to replicate um and I guess it's even easier in Singapore right not quite sure",
    "start": "2482839",
    "end": "2490280"
  },
  {
    "text": "what the what the population is okay yeah so most you've got 6",
    "start": "2490280",
    "end": "2495760"
  },
  {
    "text": "million customers right so much more manageable laptop scale kind of database",
    "start": "2495760",
    "end": "2504119"
  },
  {
    "text": "replication I'm mostly",
    "start": "2504119",
    "end": "2507720"
  },
  {
    "text": "joking um you can get some pretty powerful laptops though",
    "start": "2509760",
    "end": "2515359"
  },
  {
    "text": "right um third 32 gig MacBook Pro 8 core processor you can do a lot with that um",
    "start": "2515359",
    "end": "2523480"
  },
  {
    "text": "anyway but anyway so those are a couple of patterns that are relying on a so the fundamentally they're relying on",
    "start": "2523480",
    "end": "2529960"
  },
  {
    "text": "asynchronous communication to either Implement sort",
    "start": "2529960",
    "end": "2535560"
  },
  {
    "text": "distributed transactions or a better form of distributed",
    "start": "2535560",
    "end": "2540720"
  },
  {
    "text": "transactions or they're using it to replicate data in in an asynchronous",
    "start": "2540720",
    "end": "2546680"
  },
  {
    "text": "event way so though it all seems a bit complicated and in a sense it is but the",
    "start": "2546680",
    "end": "2552599"
  },
  {
    "text": "sort of the tradeoff is well we've got these Loosely coupled services that we can develop and test and deploy",
    "start": "2552599",
    "end": "2560160"
  },
  {
    "text": "independently um so that that it can be a a worthwhile tradeoff but you but in",
    "start": "2560160",
    "end": "2566040"
  },
  {
    "text": "each situation you do need to properly evaluate pros and cons so the last thing",
    "start": "2566040",
    "end": "2571800"
  },
  {
    "text": "I want to talk about is testing um and it really just blows my mind Facebook kind of gets away with a",
    "start": "2571800",
    "end": "2579079"
  },
  {
    "text": "whole with with limited testing I want to talk with Kent about that um even",
    "start": "2579079",
    "end": "2584559"
  },
  {
    "text": "though he's my hero I I kind of want to argue with",
    "start": "2584559",
    "end": "2589880"
  },
  {
    "text": "him slight as side I met Kent 20 years ago and wait and I got him to sign a",
    "start": "2589880",
    "end": "2596599"
  },
  {
    "text": "copy of my of the XP book and I said you know Kent you're my hero and he wrote in",
    "start": "2596599",
    "end": "2601720"
  },
  {
    "text": "my book you're one sad puppy",
    "start": "2601720",
    "end": "2606520"
  },
  {
    "text": "so I I I treasure that",
    "start": "2607520",
    "end": "2612760"
  },
  {
    "text": "um okay so yeah um testing so from my",
    "start": "2612760",
    "end": "2618599"
  },
  {
    "text": "perspective um like so the whole why are we doing microservices well it's to do",
    "start": "2618599",
    "end": "2624200"
  },
  {
    "text": "devops right and a key part of devops is Automation and a part of that is",
    "start": "2624200",
    "end": "2631319"
  },
  {
    "text": "automated testing and then the kind of the complexity of the for service",
    "start": "2631319",
    "end": "2637720"
  },
  {
    "text": "architecture actually requires a lot of automated testing um so in a so if you're doing",
    "start": "2637720",
    "end": "2645920"
  },
  {
    "text": "microservices without automated testing arguably it's like self-defeating and",
    "start": "2645920",
    "end": "2651319"
  },
  {
    "text": "it's really really risky um but sadly I've actually encountered a number of companies who",
    "start": "2651319",
    "end": "2656800"
  },
  {
    "text": "have gone down that path and I I wrote this up I wrote up a series of anti- patterns of microservices adoption and",
    "start": "2656800",
    "end": "2664160"
  },
  {
    "text": "one of them is trying to fly before you can War you know if you're you know if",
    "start": "2664160",
    "end": "2669280"
  },
  {
    "text": "you're embracing the microservice architecture you have to simultaneously get very serious about",
    "start": "2669280",
    "end": "2676640"
  },
  {
    "text": "automated testing or or it will not go well and the sad thing is if you survey",
    "start": "2676640",
    "end": "2682960"
  },
  {
    "text": "the industry this is from the 2018 state of testing report 72% of organizations",
    "start": "2682960",
    "end": "2690559"
  },
  {
    "text": "are still relying very heavily on manual testing and ironically it's like like 90",
    "start": "2690559",
    "end": "2697800"
  },
  {
    "text": "89 and 90% of organizations want to do devops and agile and it's like total",
    "start": "2697800",
    "end": "2705040"
  },
  {
    "text": "mismatch so a key testing concept is actually the the test pyramid",
    "start": "2705040",
    "end": "2710960"
  },
  {
    "text": "so this this is really the final shape of the day and what it's showing are the relative proportions of the types of",
    "start": "2710960",
    "end": "2717400"
  },
  {
    "text": "tests that you need to write and essentially you want to push testing as",
    "start": "2717400",
    "end": "2722960"
  },
  {
    "text": "far down the pyramid as possible and the reason for that is that is that the",
    "start": "2722960",
    "end": "2728480"
  },
  {
    "text": "tests at the bottom of the pyramid are reliable they don't fail randomly like",
    "start": "2728480",
    "end": "2734480"
  },
  {
    "text": "CU it's Monday they they're very fast to execute because unit tests in particular",
    "start": "2734480",
    "end": "2740440"
  },
  {
    "text": "are all in memory so you're not sort of doing networking or or hitting the disc",
    "start": "2740440",
    "end": "2745760"
  },
  {
    "text": "or anything like that and they're relatively straightforward to test so you know you work at a bank and youve",
    "start": "2745760",
    "end": "2752240"
  },
  {
    "text": "you you you want to C you've got some code that calculates the repayment schedule for a loan you want to test the",
    "start": "2752240",
    "end": "2760240"
  },
  {
    "text": "heck out of that at the at the unit test level right dealing with all the complex Edge conditions and so on because you",
    "start": "2760240",
    "end": "2767839"
  },
  {
    "text": "can test that very effectively now once you move up the stack the tests get",
    "start": "2767839",
    "end": "2773000"
  },
  {
    "text": "increasingly more brittle as in more likely to fail just for random",
    "start": "2773000",
    "end": "2778400"
  },
  {
    "text": "reasons and then because of the amount of net working in IO in general that they become a much slower and they tend",
    "start": "2778400",
    "end": "2785119"
  },
  {
    "text": "to be much more complex to R right um so unit test testing the individual classes",
    "start": "2785119",
    "end": "2791480"
  },
  {
    "text": "within a service in a sense that's absolutely not any different than testing inside a monolith integration",
    "start": "2791480",
    "end": "2799280"
  },
  {
    "text": "testing is testing the com the adapters that are integrating with other things",
    "start": "2799280",
    "end": "2805440"
  },
  {
    "text": "component testing is a form of acceptance testing um for you for an",
    "start": "2805440",
    "end": "2810520"
  },
  {
    "text": "individual service that's actually the first point at which you have a fully assembled service and you're testing it",
    "start": "2810520",
    "end": "2817000"
  },
  {
    "text": "and then end to end testing which is really not drawn to scale and or perhaps shouldn't even be there is where you're",
    "start": "2817000",
    "end": "2823200"
  },
  {
    "text": "testing the whole system obviously the path from developer machine to",
    "start": "2823200",
    "end": "2829079"
  },
  {
    "text": "production is the automated deployment pipeline that runs a series of tests",
    "start": "2829079",
    "end": "2835319"
  },
  {
    "text": "each service should have its own independent deployment pipeline right so the order team they're",
    "start": "2835319",
    "end": "2842240"
  },
  {
    "text": "developing committing their changes are automatically being built tested and",
    "start": "2842240",
    "end": "2847359"
  },
  {
    "text": "ideally deployed into production while the kitchen team is doing the same thing",
    "start": "2847359",
    "end": "2852599"
  },
  {
    "text": "and I'm going to talk a little bit about end to testing and why it's problematic in the middle in a minute but I want to",
    "start": "2852599",
    "end": "2858720"
  },
  {
    "text": "mention very briefly one of the key ideas that's quite distinctive to the microservice architecture and that is",
    "start": "2858720",
    "end": "2866240"
  },
  {
    "text": "consumer-driven contract testing you want to be able to test Services",
    "start": "2866240",
    "end": "2871280"
  },
  {
    "text": "independently while being confident that when you put them together they can",
    "start": "2871280",
    "end": "2876400"
  },
  {
    "text": "actually communicate so my example right the API Gateway invokes the a service",
    "start": "2876400",
    "end": "2882680"
  },
  {
    "text": "using rest and the way you do this is with consumer-driven contract testing",
    "start": "2882680",
    "end": "2888520"
  },
  {
    "text": "there's a whole bunch of different ways to do that but like in the case of spring Cloud contract you write you kind",
    "start": "2888520",
    "end": "2895079"
  },
  {
    "text": "of describe the expected Behavior with a series of contracts that are are example",
    "start": "2895079",
    "end": "2902400"
  },
  {
    "text": "in this case example request response pairs so that's what this this groovy",
    "start": "2902400",
    "end": "2907839"
  },
  {
    "text": "document is and there's other ways of writing this and if you're using messaging it's not request response it's",
    "start": "2907839",
    "end": "2914240"
  },
  {
    "text": "kind of different but equivalent so it's like this is like API definition by",
    "start": "2914240",
    "end": "2921200"
  },
  {
    "text": "example then on the consumer side you can test the order service proxy which",
    "start": "2921200",
    "end": "2926640"
  },
  {
    "text": "is the adapter class that's in the API Gateway that's making requests to the API Gateway Ser to the to the order",
    "start": "2926640",
    "end": "2933119"
  },
  {
    "text": "service those contracts are actually used to configure a simulator of the order",
    "start": "2933119",
    "end": "2940599"
  },
  {
    "text": "service so we're testing this class and it thinks it's making HTTP request to the real order service but it's actually",
    "start": "2940599",
    "end": "2947760"
  },
  {
    "text": "a test double um and like my example I use yck which is one of the several",
    "start": "2947760",
    "end": "2954119"
  },
  {
    "text": "service virtualization Frameworks so but that's the point we're testing in isolation but then those same contracts",
    "start": "2954119",
    "end": "2961640"
  },
  {
    "text": "are then used to test the service the actual contracts are written by the the",
    "start": "2961640",
    "end": "2966799"
  },
  {
    "text": "API Gateway team and then then they give them to the order team who then uses them to test the order controller that's",
    "start": "2966799",
    "end": "2974000"
  },
  {
    "text": "the adapter class that is handling the inbound HTTP request and the idea I mean",
    "start": "2974000",
    "end": "2981520"
  },
  {
    "text": "there's a whole bunch of details that I'm skipping over but the idea is you take you use the same contracts and you",
    "start": "2981520",
    "end": "2988359"
  },
  {
    "text": "test the consumer and the provider with them and well hey if they work",
    "start": "2988359",
    "end": "2993640"
  },
  {
    "text": "independently when you put them together they must agree by definition they must agree on the structure of the API",
    "start": "2993640",
    "end": "3001079"
  },
  {
    "text": "fingers crossed so that's contract driven testing in a nutshell hugely",
    "start": "3001079",
    "end": "3006520"
  },
  {
    "text": "important but and the reason it's important is that you try and avoid end",
    "start": "3006520",
    "end": "3012119"
  },
  {
    "text": "to end testing because n2n tests are brittle slow and complex so you could",
    "start": "3012119",
    "end": "3017640"
  },
  {
    "text": "actually have this sort of structure and you have these slow tedious constantly",
    "start": "3017640",
    "end": "3023280"
  },
  {
    "text": "breaking into entest but imagine this you know you have a production outage and you quickly want to get a new change",
    "start": "3023280",
    "end": "3029960"
  },
  {
    "text": "into production it has to go through this potential bottleneck and and so the kind of the",
    "start": "3029960",
    "end": "3037760"
  },
  {
    "text": "thinking about this is to actually avoid endtoend testing",
    "start": "3037760",
    "end": "3044240"
  },
  {
    "text": "um and if you want to have a better name so the idea is you can call it this",
    "start": "3044240",
    "end": "3049680"
  },
  {
    "text": "concept of testing in production or if that frightens the business people you call it validation in production",
    "start": "3049680",
    "end": "3058640"
  },
  {
    "text": "right but but the basic idea is this end to endend testing is just a total",
    "start": "3058720",
    "end": "3064160"
  },
  {
    "text": "bottleneck it's not guaranteed to catch all of your bugs anyway especially",
    "start": "3064160",
    "end": "3069720"
  },
  {
    "text": "because your endtoend environment is a mere simulation and production so you've got to get things into production as",
    "start": "3069720",
    "end": "3076240"
  },
  {
    "text": "fast as possible because that's when they encounter reality and you need",
    "start": "3076240",
    "end": "3081559"
  },
  {
    "text": "mechanisms in place in your production environment to quickly like um deal with",
    "start": "3081559",
    "end": "3088119"
  },
  {
    "text": "fa detect and deal with and recover from failure so one key idea is you separate",
    "start": "3088119",
    "end": "3093680"
  },
  {
    "text": "deployment from release right so deployment is the act of running and production release is",
    "start": "3093680",
    "end": "3099319"
  },
  {
    "text": "actually making it available to users so you actually deploy Code test it and",
    "start": "3099319",
    "end": "3105280"
  },
  {
    "text": "then gradually release it with appropriate monitoring mechanism so I quickly step through this because I'm",
    "start": "3105280",
    "end": "3111960"
  },
  {
    "text": "I'm almost out of time actually I'm I'm out of time so for instance you deploy",
    "start": "3111960",
    "end": "3117880"
  },
  {
    "text": "version two side by side with version one behind an intelligent traffic router",
    "start": "3117880",
    "end": "3124079"
  },
  {
    "text": "so you might be using one of these new fangled service meshes like ISO um but at this point you've",
    "start": "3124079",
    "end": "3130880"
  },
  {
    "text": "configured the the routing rules not to Route any traffic to version two then",
    "start": "3130880",
    "end": "3136440"
  },
  {
    "text": "you can test it it's safe it's running but it's not getting production traffic and then you can start routing test",
    "start": "3136440",
    "end": "3143200"
  },
  {
    "text": "traffic to it and then little by little you can actually start ramp ramping out the percentage of traffic just by",
    "start": "3143200",
    "end": "3150240"
  },
  {
    "text": "changing the produ changing the routing rules until all of the ideally all of",
    "start": "3150240",
    "end": "3156040"
  },
  {
    "text": "the production traffic is running is being routed to version two but you're monitoring it",
    "start": "3156040",
    "end": "3162079"
  },
  {
    "text": "carefully and if you detect a problem like a spike in 500s or SP or a spike in",
    "start": "3162079",
    "end": "3169040"
  },
  {
    "text": "latency you change the routing rules and all of the traffic just goes back to version one and you can debug the",
    "start": "3169040",
    "end": "3174799"
  },
  {
    "text": "problem so that's sort of one of the key ideas for testing and production and",
    "start": "3174799",
    "end": "3180079"
  },
  {
    "text": "there there's a whole bunch of other stuff um at copy construct Cindy shahan",
    "start": "3180079",
    "end": "3185720"
  },
  {
    "text": "on on Twitter has written about this anyway that's that's basically my",
    "start": "3185720",
    "end": "3190880"
  },
  {
    "text": "presentation right so briefly summarizing right you know the success",
    "start": "3190880",
    "end": "3196040"
  },
  {
    "text": "triangle is the goal that's how you rapidly um and frequently and deliver",
    "start": "3196040",
    "end": "3202799"
  },
  {
    "text": "software the the scale Cube sort of defines the microservice architecture",
    "start": "3202799",
    "end": "3208400"
  },
  {
    "text": "that has all of the architectural qualities that you need the hexagonal architecture defines the structure of",
    "start": "3208400",
    "end": "3215119"
  },
  {
    "text": "The Individual Services um you want to design them so that they are like icebergs with those",
    "start": "3215119",
    "end": "3222599"
  },
  {
    "text": "tiny API that encapsulates the implementation details you want to use",
    "start": "3222599",
    "end": "3228119"
  },
  {
    "text": "asynchronous messaging as much as possible and you want to um do automated",
    "start": "3228119",
    "end": "3235000"
  },
  {
    "text": "testing according to to the test pyramid so that's my talk hope that you found it",
    "start": "3235000",
    "end": "3240680"
  },
  {
    "text": "useful and and thank you for listening [Applause]",
    "start": "3240680",
    "end": "3250119"
  }
]