[
  {
    "text": "[Music]",
    "start": "2550",
    "end": "10480"
  },
  {
    "text": "all right want to be a better programmer is great title first of all I want to",
    "start": "10480",
    "end": "16760"
  },
  {
    "text": "introduce uh Casper my colleague do you want to introduce me I",
    "start": "16760",
    "end": "21840"
  },
  {
    "text": "can do that this is Lars you you probably heard all you need to know about him already so uh let's stop right",
    "start": "21840",
    "end": "27519"
  },
  {
    "text": "there too much yeah so um before we start we'll just recap some of the stuff",
    "start": "27519",
    "end": "33719"
  },
  {
    "text": "um Dave said uh we've been doing virtual machines high performance virtual machines for many many years uh I",
    "start": "33719",
    "end": "40719"
  },
  {
    "text": "started working on the beta programming language 30 years ago you all know beta",
    "start": "40719",
    "end": "46719"
  },
  {
    "text": "right wow five three three five yes pretty good um but it's been fun uh so",
    "start": "46719",
    "end": "54879"
  },
  {
    "text": "the first uh 25 years uh was spent on making them fast and small and dynamic",
    "start": "54879",
    "end": "61840"
  },
  {
    "text": "um and that's the reason why you have I guess to some effect can rely on Dynamic class loading and polymorphic inline",
    "start": "61840",
    "end": "69560"
  },
  {
    "text": "cashing and what have you the um last 5 years we worked on Dot and uh this talk",
    "start": "69560",
    "end": "76520"
  },
  {
    "text": "will be related to dark mostly MH um but what I want to tell you about the threat",
    "start": "76520",
    "end": "82240"
  },
  {
    "text": "throughout the um the at least my career has been to empower programmers so they",
    "start": "82240",
    "end": "89799"
  },
  {
    "text": "can can do abstractions at no cost it's super important that programmers when",
    "start": "89799",
    "end": "95640"
  },
  {
    "text": "they scale the application they're not forced to flatten out remove functions and and basically turn the",
    "start": "95640",
    "end": "103040"
  },
  {
    "text": "implementation inside out to make it fast so it's always been important for all these system we built that if you",
    "start": "103040",
    "end": "109159"
  },
  {
    "text": "add abstractions we will inline it and make it no cost I work with C for the last uh 16",
    "start": "109159",
    "end": "116640"
  },
  {
    "text": "years yeah so that has been fun and so he's been trained and he probably better",
    "start": "116640",
    "end": "121880"
  },
  {
    "text": "than me now um but we got um when we",
    "start": "121880",
    "end": "128159"
  },
  {
    "text": "joined when we joined Google uh nearly 10 years ago we started building the V8",
    "start": "128200",
    "end": "133959"
  },
  {
    "text": "engine I hope you heard about JavaScript uh but when we joined it was",
    "start": "133959",
    "end": "140040"
  },
  {
    "text": "very very slow and our task was to make it much faster",
    "start": "140040",
    "end": "145720"
  },
  {
    "text": "so we came up with a way to make it objectoriented and um then we knew how to make it fast",
    "start": "145720",
    "end": "153400"
  },
  {
    "text": "so that's how V8 came about and uh it turns out that V8 at this point is used",
    "start": "153400",
    "end": "158920"
  },
  {
    "text": "for everything it's used for node.js even a gamas programming environment is",
    "start": "158920",
    "end": "164000"
  },
  {
    "text": "built on top of V8 which is scary but true and we have a lot of browsers um",
    "start": "164000",
    "end": "169599"
  },
  {
    "text": "that are also using technology the best part about this system here was it was a",
    "start": "169599",
    "end": "176599"
  },
  {
    "text": "open sourced so a compe itors browser competitors they had to at least match",
    "start": "176599",
    "end": "182599"
  },
  {
    "text": "the performance otherwise they looked like they couldn't uh do JavaScript so I think this friendly open competition for",
    "start": "182599",
    "end": "190159"
  },
  {
    "text": "JavaScript has created the world we have today with browsers that are across the board very fast and I'm very pleased",
    "start": "190159",
    "end": "196400"
  },
  {
    "text": "with that so one one question you can ask yourself is that did this sort of",
    "start": "196400",
    "end": "202120"
  },
  {
    "text": "performance Improvement that we we delivered um as a sort of a combined ecosystem did that really make you all",
    "start": "202120",
    "end": "208159"
  },
  {
    "text": "better programmers I think that's a good question to ask so I I went searching online for finding out how people use",
    "start": "208159",
    "end": "213560"
  },
  {
    "text": "JavaScript today and um you find code like this I don't know if you can read",
    "start": "213560",
    "end": "218599"
  },
  {
    "text": "it from the from the back I I hope so um it's very hard to tell what that does",
    "start": "218599",
    "end": "224560"
  },
  {
    "text": "um clearly doesn't quite work there's a weird assignment there where you assign zero to I inside the loop and it's this",
    "start": "224560",
    "end": "231120"
  },
  {
    "text": "is the kind of code you still find around there's just something rotten about that and it gets it gets worse",
    "start": "231120",
    "end": "236680"
  },
  {
    "text": "right you can find so much extremely poor code in JavaScript out there and um",
    "start": "236680",
    "end": "244079"
  },
  {
    "text": "you find things like people want to figure out if something is a function they'll use like two string conversion slicing and dicing and trying to figure",
    "start": "244079",
    "end": "251159"
  },
  {
    "text": "out if um if this is a string so I think you can ask yourself like does",
    "start": "251159",
    "end": "256239"
  },
  {
    "text": "performance in itself really make you guys better programmers um I think the answer is",
    "start": "256239",
    "end": "262919"
  },
  {
    "text": "resounding yes of course it does clearly we did I think we did it we made you all much better programmers not um I there's",
    "start": "262919",
    "end": "272400"
  },
  {
    "text": "there's something missing here um and that's what we want to try to dive into in in this uh this talk so like we we",
    "start": "272400",
    "end": "278560"
  },
  {
    "text": "both live and breathe performance and it's a it's a whole lot of fun to try to make uh code run fast but it's not",
    "start": "278560",
    "end": "284919"
  },
  {
    "text": "everything um so that's what we want to try to cover I don't think the uh the fact that",
    "start": "284919",
    "end": "291080"
  },
  {
    "text": "we made JavaScript faster on the on the web was I wasted effort at all um like it does enable a lot of innovation we've",
    "start": "291080",
    "end": "296919"
  },
  {
    "text": "seen very very cool things come out of that that that thing richer Frameworks better abstractions like L was telling",
    "start": "296919",
    "end": "302000"
  },
  {
    "text": "about and much much Larter applications are now running online uh and on top of a infrastructure like nodejs it is",
    "start": "302000",
    "end": "309800"
  },
  {
    "text": "though true that developers still sort of suffering from somewhat puzzling semantics and and very hard to identify",
    "start": "309800",
    "end": "315960"
  },
  {
    "text": "errors in their code bases there's no almost like no declarative syntax anywhere it's very hard to find",
    "start": "315960",
    "end": "322319"
  },
  {
    "text": "dependencies it's a very sort of um loose relaxed keep on trucking kind of a",
    "start": "322319",
    "end": "328240"
  },
  {
    "text": "system that we have a ER are sort of consumed by the system absorbed even and",
    "start": "328240",
    "end": "334319"
  },
  {
    "text": "people and the system is sort of implicitly converts values in weird ways",
    "start": "334319",
    "end": "339360"
  },
  {
    "text": "all the time as part of the core programming model so not a wasted effort but there is something missing",
    "start": "339360",
    "end": "347240"
  },
  {
    "text": "here all right so um it's great to have a fast gcan people start making more and",
    "start": "348080",
    "end": "354520"
  },
  {
    "text": "more source code and they figure out it's very hard to manage it so what do they do what they they always do they",
    "start": "354520",
    "end": "361080"
  },
  {
    "text": "come up with a pre-processor or compilers that will take another source",
    "start": "361080",
    "end": "366360"
  },
  {
    "text": "language and compile it to jeros script and uh I think most big companies are",
    "start": "366360",
    "end": "372000"
  },
  {
    "text": "guilty in creating one of these transpilers and you can see a list here you have typescript coffee script silent",
    "start": "372000",
    "end": "378280"
  },
  {
    "text": "scals hack Elm uh closure script quit",
    "start": "378280",
    "end": "383319"
  },
  {
    "text": "closure compiler and even dot now translates also JavaScript and it's interesting and the whole thing stems",
    "start": "383319",
    "end": "390599"
  },
  {
    "text": "from that is really hard to manage a large code base in",
    "start": "390599",
    "end": "396440"
  },
  {
    "text": "JavaScript so the reason why we're here uh is to tell you that we might not be",
    "start": "398240",
    "end": "406400"
  },
  {
    "text": "able to make you smarter but we can help building some systems that will make you more productive as a programmer and what",
    "start": "406400",
    "end": "413400"
  },
  {
    "text": "we believe um is that simplic Simplicity and consistency in the programming",
    "start": "413400",
    "end": "419919"
  },
  {
    "text": "language and the Frameworks you're using will help you make you a better programmer so what we'll cover in this",
    "start": "419919",
    "end": "426879"
  },
  {
    "text": "talk here we will talk about uh Simplicity and consistency with a programming language talk about some",
    "start": "426879",
    "end": "433039"
  },
  {
    "text": "issues with JavaScript and Java and C++ compared to dot we actually learned from",
    "start": "433039",
    "end": "438360"
  },
  {
    "text": "the past in designing the dot programming language I think and the second one we will show you an example",
    "start": "438360",
    "end": "444039"
  },
  {
    "text": "of a framework that actually tries to also be simple and consistent",
    "start": "444039",
    "end": "451280"
  },
  {
    "text": "yeah why don't we start with the uh with the language part um I think this is the right quote to",
    "start": "451280",
    "end": "457319"
  },
  {
    "text": "start with um and clearly the right guide to deliver it um shouldn't listen to us you should listen to Bruce Lee instead but simple language advantics is",
    "start": "457319",
    "end": "464199"
  },
  {
    "text": "really important to make people productive and uh make people write better and cleaner code um I don't know",
    "start": "464199",
    "end": "470599"
  },
  {
    "text": "how many of you are actually familiar with that um raise of ADV fairly few",
    "start": "470599",
    "end": "476599"
  },
  {
    "text": "people oops is that a comment on that no I'll",
    "start": "476599",
    "end": "482599"
  },
  {
    "text": "I'll walk you through what what uh what what DART is uh it's it's actually fairly simple um it's an unsurprising",
    "start": "482599",
    "end": "488639"
  },
  {
    "text": "object-oriented language it's based on classes uh it does come with support for interfaces and mixins it's very familiar",
    "start": "488639",
    "end": "495639"
  },
  {
    "text": "syntax with curly braces and everything you would expect from a sort of a language derived from the SE school of",
    "start": "495639",
    "end": "501759"
  },
  {
    "text": "thought um it's uh kept simple through a single- threaded model with um isolate",
    "start": "501759",
    "end": "507919"
  },
  {
    "text": "or actor based concurrency and it comes with optional static types here there are quite a number of differences in",
    "start": "507919",
    "end": "513640"
  },
  {
    "text": "sort of on this slide from from JavaScript but I'm just curious how many people here know",
    "start": "513640",
    "end": "519800"
  },
  {
    "text": "JavaScript I thought so how many know it really well there are people that raise their",
    "start": "519800",
    "end": "526720"
  },
  {
    "text": "hands I I like that so I'm going to need a volunteer oh just back up a little bit can you go back to the previous slide",
    "start": "526720",
    "end": "532760"
  },
  {
    "text": "yeah one thing we forgot to tell you guys is that um if you don't translate D",
    "start": "532760",
    "end": "538279"
  },
  {
    "text": "to JavaScript but run on its native viral machine is actually twice as fast as JavaScript so if you want speed it's",
    "start": "538279",
    "end": "545800"
  },
  {
    "text": "an option sure on I'm still going to need a volunteer so in JavaScript you",
    "start": "545800",
    "end": "551480"
  },
  {
    "text": "can do interesting things with fairly simple operators like the equality operator and I just need someone to tell",
    "start": "551480",
    "end": "559240"
  },
  {
    "text": "me what will this evaluate to in",
    "start": "559240",
    "end": "565200"
  },
  {
    "text": "JavaScript any volunteers it should be easy no nothing I'll pick you then oh okay",
    "start": "565200",
    "end": "573800"
  },
  {
    "text": "yeah I recently read the Eggos script 262 Standard Version 5.1 and if you go",
    "start": "573800",
    "end": "580800"
  },
  {
    "text": "to paragraph 911 1193 you will find the um abstract",
    "start": "580800",
    "end": "588800"
  },
  {
    "text": "equality comparison algorithm and there you will find a very complicated way of computing this it turns out what happens",
    "start": "588800",
    "end": "597120"
  },
  {
    "text": "is first expression you're comparing 2.0 to the string to it will try to convert",
    "start": "597120",
    "end": "604680"
  },
  {
    "text": "the right hand side to a number so the string will be converted into the number",
    "start": "604680",
    "end": "610360"
  },
  {
    "text": "two and the first expression will return true then we have true equals new",
    "start": "610360",
    "end": "616680"
  },
  {
    "text": "Boolean true now here's the hint in JavaScript there's values and objects",
    "start": "616680",
    "end": "622240"
  },
  {
    "text": "two different things so true is not the same as new Boolean of true but if you",
    "start": "622240",
    "end": "627880"
  },
  {
    "text": "look at this uh paragraph I talked about before you'll figure out that you'll",
    "start": "627880",
    "end": "633320"
  },
  {
    "text": "then have to convert the Boolean to True Boolean true to A Primitive type this is",
    "start": "633320",
    "end": "638639"
  },
  {
    "text": "true so we have true equals true it turns turns two true and then you have true equals that string one that's",
    "start": "638639",
    "end": "646399"
  },
  {
    "text": "simple because in the first few comparison we converted the right hand side to something else but that's not",
    "start": "646399",
    "end": "653279"
  },
  {
    "text": "true when you have true equals a string then you first convert the left hand side true and that'll be converted to a",
    "start": "653279",
    "end": "661079"
  },
  {
    "text": "number which is one and then you have a number one compared to the string one",
    "start": "661079",
    "end": "666760"
  },
  {
    "text": "and again you then convert the right hand side the string one to one and then",
    "start": "666760",
    "end": "672279"
  },
  {
    "text": "one equals 1 is true and the result is true you all knew that right yeah yeah",
    "start": "672279",
    "end": "681160"
  },
  {
    "text": "good it's interesting at least I feel like this is more than enough sort of",
    "start": "681160",
    "end": "686639"
  },
  {
    "text": "implicit conversions happening behind the scenes to make my heada explode the thing is this actually happens in real code not intentionally you probably will",
    "start": "686639",
    "end": "693240"
  },
  {
    "text": "not write expressions like this very often um but these kind of conversions happening behind the scenes just because",
    "start": "693240",
    "end": "698880"
  },
  {
    "text": "you're unaware of how things work out it's kind of painful to say the least I think so that is an attempt to try to",
    "start": "698880",
    "end": "706600"
  },
  {
    "text": "fix some of these things it's an open standard um and it has been since 2013",
    "start": "706600",
    "end": "711639"
  },
  {
    "text": "we've gone through a number of revisions and we'll walk through through a few of the things we've added over the years um",
    "start": "711639",
    "end": "718200"
  },
  {
    "text": "but it is uh it's also uh governed by the the ecma committee that over also sort of",
    "start": "718200",
    "end": "723399"
  },
  {
    "text": "oversees the um the uh the evolution of of",
    "start": "723399",
    "end": "728600"
  },
  {
    "text": "ecmascript maybe you'll talk about uh something else Lis oh",
    "start": "729720",
    "end": "735040"
  },
  {
    "text": "yeah so we have a small section here about Constructors we all use",
    "start": "735040",
    "end": "740160"
  },
  {
    "text": "Constructors create to create new instances of classes and uh most people believe",
    "start": "740160",
    "end": "746160"
  },
  {
    "text": "semantics is clear for different programming languages so I took the liberty of trying a different",
    "start": "746160",
    "end": "752680"
  },
  {
    "text": "a few different object language to see what actually happens so let's uh let's go at",
    "start": "752680",
    "end": "759040"
  },
  {
    "text": "it so I decided to look at three different languages C++ Java and Dot and see how",
    "start": "759240",
    "end": "768360"
  },
  {
    "text": "Constructors work I'm only looking at a particular aspect of it but the situation is very",
    "start": "768360",
    "end": "775600"
  },
  {
    "text": "simple we have two classes a Class A and A Class B B is a subass of a and they both have",
    "start": "775600",
    "end": "783360"
  },
  {
    "text": "virtual uh methods all both called f and",
    "start": "783360",
    "end": "789199"
  },
  {
    "text": "Constructors of a will call F and Constructors of B will call F2 and then",
    "start": "789199",
    "end": "794800"
  },
  {
    "text": "we'll see what happens when you execute these different languages I did not",
    "start": "794800",
    "end": "800000"
  },
  {
    "text": "include JavaScript and small talk because they don't really have Constructors you have to do everything by hand and that's even",
    "start": "800000",
    "end": "806959"
  },
  {
    "text": "worse so um let's go at it here are uh the constructors in",
    "start": "806959",
    "end": "815440"
  },
  {
    "text": "C++ I hope you can read s++ it's very simple you have an include you have a",
    "start": "815440",
    "end": "821320"
  },
  {
    "text": "class A and A Class B and um then the a",
    "start": "821320",
    "end": "826839"
  },
  {
    "text": "Constructor calls F and F is a virtual function that prints out A and B uh also",
    "start": "826839",
    "end": "833959"
  },
  {
    "text": "has Constructor calls F and a function f override that of B and you have the main",
    "start": "833959",
    "end": "840639"
  },
  {
    "text": "function and you create an instance of B what happens it will print out a and b and",
    "start": "840639",
    "end": "848759"
  },
  {
    "text": "you'll wonder why since you just have one instance and why is it not b in the",
    "start": "848759",
    "end": "854160"
  },
  {
    "text": "two cases it is because in C++ they have chosen that when you evaluate the",
    "start": "854160",
    "end": "860040"
  },
  {
    "text": "Constructor of a you have not initialized the B portion so you can only see what an a instance",
    "start": "860040",
    "end": "867120"
  },
  {
    "text": "could see but this actually might be confusing to to people and it surprises the most when they try it",
    "start": "867120",
    "end": "875680"
  },
  {
    "text": "out in Java they sort of solved it you have a class A again is exactly the same",
    "start": "878480",
    "end": "885440"
  },
  {
    "text": "uh scenario except that you have to wrap the the main in a in a class which is pretty",
    "start": "885440",
    "end": "891040"
  },
  {
    "text": "annoying um and you say new B and uh it will then execute the construct of B",
    "start": "891040",
    "end": "898320"
  },
  {
    "text": "first by execu the body of the Constructor of a and then afterwards the body of Constructor of B and you are",
    "start": "898320",
    "end": "905920"
  },
  {
    "text": "lucky in this case uh it's the same vir you're calling it prints out B and D",
    "start": "905920",
    "end": "911759"
  },
  {
    "text": "this is what you expect and you are sort of happy sort of let's see how we can",
    "start": "911759",
    "end": "918440"
  },
  {
    "text": "expand this example just a little bit in red you'll see I added a final string",
    "start": "918440",
    "end": "925240"
  },
  {
    "text": "X and its values will be set to be string this is",
    "start": "925240",
    "end": "931240"
  },
  {
    "text": "cool um final means that that field will",
    "start": "931240",
    "end": "937279"
  },
  {
    "text": "only have one value ever and I really mean ever and we run the program again and as",
    "start": "937279",
    "end": "945399"
  },
  {
    "text": "you expected you get B and B out so this is behaving like expected so to pay",
    "start": "945399",
    "end": "953160"
  },
  {
    "text": "careful uh attention to the red line now I'm going to make a small",
    "start": "953160",
    "end": "958639"
  },
  {
    "text": "change to the program I will say string. trim I don't",
    "start": "958639",
    "end": "965279"
  },
  {
    "text": "think it's going to matter much in terms of functionality since there's no spaces around the",
    "start": "965279",
    "end": "971279"
  },
  {
    "text": "B but what does it print out any take",
    "start": "971279",
    "end": "978160"
  },
  {
    "text": "us it'll pin out the same right Casper well I mean it it really",
    "start": "980360",
    "end": "986839"
  },
  {
    "text": "should right I mean it's a final variable you would expect that to always have one value and this should be B so",
    "start": "986839",
    "end": "993680"
  },
  {
    "text": "yes it should be B but I know it's",
    "start": "993680",
    "end": "998720"
  },
  {
    "text": "not it prints null it prints null of course and it take us why is it",
    "start": "999160",
    "end": "1006079"
  },
  {
    "text": "null oh of course the reason why this is printing",
    "start": "1006079",
    "end": "1012759"
  },
  {
    "text": "out all is that in the previous one where the right right hand side is a",
    "start": "1012759",
    "end": "1019880"
  },
  {
    "text": "constant the JV C compiler will inline it so this is actually not a real field",
    "start": "1019880",
    "end": "1025720"
  },
  {
    "text": "and then it behaves like expected if it's a real field like in this case and the right hand side is is",
    "start": "1025720",
    "end": "1034360"
  },
  {
    "text": "a computed when you initialize the B portion you will not have initialized",
    "start": "1034360",
    "end": "1039678"
  },
  {
    "text": "the B portion when invoking the if uh method uh in the Constructor of a",
    "start": "1039679",
    "end": "1047520"
  },
  {
    "text": "and that surprises people and this is a real problem in my mind because you have a final field and you",
    "start": "1047520",
    "end": "1053600"
  },
  {
    "text": "get two different values out of it first null and then the real string and and this also happens in in",
    "start": "1053600",
    "end": "1060000"
  },
  {
    "text": "real code and it's a kind of issue that's really annoying to track down like actually having final fields and",
    "start": "1060000",
    "end": "1065520"
  },
  {
    "text": "being able to observe that their values change over time is not a pretty thing",
    "start": "1065520",
    "end": "1073440"
  },
  {
    "text": "so anyways um I give you this examples to show that",
    "start": "1073440",
    "end": "1079840"
  },
  {
    "text": "when we designed the dot programming language we we tried to learn from the past so when you run the same code in DT",
    "start": "1079840",
    "end": "1088240"
  },
  {
    "text": "please note that the code in DT is shorter than in any of the other programs um but you get B and B and um",
    "start": "1088240",
    "end": "1098760"
  },
  {
    "text": "any combination will yield uh that same result and the reason for that is we",
    "start": "1098760",
    "end": "1104039"
  },
  {
    "text": "decided to have clean constructive semantics we decided to split up the uh",
    "start": "1104039",
    "end": "1110120"
  },
  {
    "text": "Constructor evaluation in two parts first one is to initialize all the fields and the second uh pass just uh",
    "start": "1110120",
    "end": "1118880"
  },
  {
    "text": "evaluate the body of the constructors this might seem like a simple thing but you get the consistency we're looking",
    "start": "1118880",
    "end": "1124760"
  },
  {
    "text": "for you are not surprised uh by what the programming language is doing and when you debug you know exactly what to",
    "start": "1124760",
    "end": "1131720"
  },
  {
    "text": "expect basically so uh this is uh one of the issues we talk about when when going",
    "start": "1131720",
    "end": "1137799"
  },
  {
    "text": "for a clean semantics that will make you a better",
    "start": "1137799",
    "end": "1142919"
  },
  {
    "text": "programmer finally uh we also this is just like an add-on uh in addition to the Constructor",
    "start": "1144400",
    "end": "1153000"
  },
  {
    "text": "semantics I explained before uh we can have Factory Constructors so unlike in",
    "start": "1153000",
    "end": "1158760"
  },
  {
    "text": "Java where you uh you are sort of bound to returning uh the instance the system",
    "start": "1158760",
    "end": "1163960"
  },
  {
    "text": "creates for you you can cheat in um in Dot and in this example here we have a",
    "start": "1163960",
    "end": "1169520"
  },
  {
    "text": "simple class and the Constructor will take a string and turn a sybol but these",
    "start": "1169520",
    "end": "1175799"
  },
  {
    "text": "symbols are canonicalized so sometimes it will return um um um a symbol that",
    "start": "1175799",
    "end": "1182679"
  },
  {
    "text": "has been created a while back so this is a complete implementation of a simple table in dot which is uh uh not that",
    "start": "1182679",
    "end": "1190159"
  },
  {
    "text": "complicated and it shows that uh you'll get uh you create two new symbols and it",
    "start": "1190159",
    "end": "1195600"
  },
  {
    "text": "will get exactly the same if the string is equals that's it so",
    "start": "1195600",
    "end": "1201559"
  },
  {
    "text": "um let's go to boilerplate code in programming languages yeah I actually",
    "start": "1201559",
    "end": "1207039"
  },
  {
    "text": "want to go to the the at least an attempt to um to go for like the lack of",
    "start": "1207039",
    "end": "1212240"
  },
  {
    "text": "boilerplate but I think everybody who writes code for a living um has to um be",
    "start": "1212240",
    "end": "1218360"
  },
  {
    "text": "willing to write a certain amount of boiler plate but it's very painful for all of us one thing is writing it the other thing is actually reading it as",
    "start": "1218360",
    "end": "1224400"
  },
  {
    "text": "well so some people argue that you just need a good tooling experience in your ID that would just fill out this stuff for you but it still come comes with a",
    "start": "1224400",
    "end": "1230799"
  },
  {
    "text": "Tex right you have to pay for reading it and understanding it over and over and over again we really need to try to",
    "start": "1230799",
    "end": "1236960"
  },
  {
    "text": "avoid some of that so I'm going to do some comparisons between D and Java and",
    "start": "1236960",
    "end": "1242679"
  },
  {
    "text": "and the two languages are fairly alike in many ways uh and we just try to make things more concise and better sort of",
    "start": "1242679",
    "end": "1249440"
  },
  {
    "text": "capturing the intent of what you want to do instead of being sort of garbled up in in too much ceremony so here's an",
    "start": "1249440",
    "end": "1256320"
  },
  {
    "text": "example of this in dot you have the ability is to write very simple Constructors that just feed",
    "start": "1256320",
    "end": "1261960"
  },
  {
    "text": "values um that are pass to the Constructor into Fields um you can of course do the same thing in Java it just",
    "start": "1261960",
    "end": "1267640"
  },
  {
    "text": "takes more writing that is not the only language in the world to have these kind of features but I think it's really",
    "start": "1267640",
    "end": "1272960"
  },
  {
    "text": "important that you you aim to make simple Constructors really easy to express and we found actually that by",
    "start": "1272960",
    "end": "1279200"
  },
  {
    "text": "allowing people to uh to have this shorthand notation for writing these kind of Constructors people tend to",
    "start": "1279200",
    "end": "1284440"
  },
  {
    "text": "prefer writing really simple Constructors so that means that people really want to have uh Constructors",
    "start": "1284440",
    "end": "1290039"
  },
  {
    "text": "without complicated method bodies or Constructor bodies and actually comes with a a number of positive side effects",
    "start": "1290039",
    "end": "1296000"
  },
  {
    "text": "for the understandability of their of their code like having less side effects as part of construct instances of of",
    "start": "1296000",
    "end": "1301760"
  },
  {
    "text": "classes is a very good thing um so by making this uh easy to write you",
    "start": "1301760",
    "end": "1307039"
  },
  {
    "text": "encourage it and people um will definitely use it so I hope you can all read the Java code as well it's nothing",
    "start": "1307039",
    "end": "1312799"
  },
  {
    "text": "fancy nothing uh um interesting about that except that like actually having public fields in job is sort of frowned",
    "start": "1312799",
    "end": "1319320"
  },
  {
    "text": "upon uh so if you want to fix this and make this more real you probably have to go through like something like this",
    "start": "1319320",
    "end": "1325760"
  },
  {
    "text": "right adding get X and get y fields and turning the the double Fields X and Y into private instance fields and yes I",
    "start": "1325760",
    "end": "1334640"
  },
  {
    "text": "don't it's sort of intentional overflow here it's it it grows right it gets bigger and bigger and bigger even for simple things like this you have to",
    "start": "1334640",
    "end": "1340520"
  },
  {
    "text": "write well this is a fairly large fun right but it adds up and you don't have to do that in Dart",
    "start": "1340520",
    "end": "1346840"
  },
  {
    "text": "like the X and the Y are proper properties and you can access them and and you can of course also overwrite them in subass and provide an",
    "start": "1346840",
    "end": "1353559"
  },
  {
    "text": "implementation of them that is based on something that executes real code so this is actually I think an important",
    "start": "1353559",
    "end": "1359880"
  },
  {
    "text": "thing that even the simple case looks better in dot but once you start using it for real having less sper plate makes",
    "start": "1359880",
    "end": "1366320"
  },
  {
    "text": "it much more clean clear what you're trying to express here another I think important point is",
    "start": "1366320",
    "end": "1372039"
  },
  {
    "text": "that can just interrupt just so you all know these programming environments for Java and are so helpful",
    "start": "1372039",
    "end": "1379320"
  },
  {
    "text": "because if you start writing writing your Constructor and Constructor parameters take final Fields",
    "start": "1379320",
    "end": "1387000"
  },
  {
    "text": "it will expand uh it will add a half a page of code to to your class and you",
    "start": "1387000",
    "end": "1392600"
  },
  {
    "text": "don't have to do anything and I understand what that why they're doing it is to help you but at the end of the",
    "start": "1392600",
    "end": "1398600"
  },
  {
    "text": "day right you you end up getting generated boilerplate code uh and uh",
    "start": "1398600",
    "end": "1405039"
  },
  {
    "text": "that's just hard to change and and and refactor afterwards so the less code you",
    "start": "1405039",
    "end": "1410320"
  },
  {
    "text": "have in your program the better it is in my mind within reason like there are",
    "start": "1410320",
    "end": "1415760"
  },
  {
    "text": "complicated languages where you can express just about anything in one line and maybe not the we're aiming for",
    "start": "1415760",
    "end": "1422279"
  },
  {
    "text": "yeah one other important thing is that um often when you write Java code you find",
    "start": "1422279",
    "end": "1428080"
  },
  {
    "text": "yourself sort of being forced to prepare for uh the possibility of adding new",
    "start": "1428080",
    "end": "1433520"
  },
  {
    "text": "implementations uh at some point in the future uh so you you have to basically not write a just a class definition you",
    "start": "1433520",
    "end": "1440520"
  },
  {
    "text": "have to like it's good uh it's good form at least to write an interface as a separate thing and then go ahead and",
    "start": "1440520",
    "end": "1446080"
  },
  {
    "text": "Implement that interface with a Class A lot of people either forget it or just disliked it didn't you get this sort of",
    "start": "1446080",
    "end": "1452080"
  },
  {
    "text": "duplication of the interfaces even for the simple cases where you may not need it in the future but you have to prepare",
    "start": "1452080",
    "end": "1457720"
  },
  {
    "text": "for it um in D we decided that actually being able to treat a class as an",
    "start": "1457720",
    "end": "1463520"
  },
  {
    "text": "interface in a sense at least allowing it to have an implied interface that you can go ahead and Implement is very useful so it means that in dot you don't",
    "start": "1463520",
    "end": "1471159"
  },
  {
    "text": "have to uh worry about splitting the the point into a contion point and a point interface from the get-go you can go",
    "start": "1471159",
    "end": "1477760"
  },
  {
    "text": "ahead and add a separate class polar point in this case that just implements the interface of a concrete class point",
    "start": "1477760",
    "end": "1484799"
  },
  {
    "text": "and here it also shows how you can then go ahead and instead of materializing the X and the Y um properties as Fields",
    "start": "1484799",
    "end": "1491760"
  },
  {
    "text": "you can go ahead and compute them instead but you still implement the same interface so in a sense this just makes",
    "start": "1491760",
    "end": "1497159"
  },
  {
    "text": "it easier for a for a programmer to avoid getting into this problem where they have to write too much stuff write",
    "start": "1497159",
    "end": "1503279"
  },
  {
    "text": "duplicate interface and and and classes just to prepare for what might change in the future does that make sense you",
    "start": "1503279",
    "end": "1510360"
  },
  {
    "text": "probably all been uh forced in a code review to add more interfaces to your to your stuff and for simple things it",
    "start": "1510360",
    "end": "1516080"
  },
  {
    "text": "doesn't really help the readability and again this is a little",
    "start": "1516080",
    "end": "1522279"
  },
  {
    "text": "bit bigger on the other side I mean if I were to type out all of the stuff you would find that uh you would not be able",
    "start": "1522279",
    "end": "1527440"
  },
  {
    "text": "to read it because because the font size would have to be so small there are other things that are a little bit more sort of technical in in",
    "start": "1527440",
    "end": "1534679"
  },
  {
    "text": "its nature that that uh it's just a little little bit better in in dot um so on the right hand side I don't know how",
    "start": "1534679",
    "end": "1540720"
  },
  {
    "text": "many of you are familiar with sort of the idioms that are associated with turning collection types into more",
    "start": "1540720",
    "end": "1546799"
  },
  {
    "text": "primitive array types in in Java the one problem that they have in Java is that the actual uh type of the of the",
    "start": "1546799",
    "end": "1553559"
  },
  {
    "text": "elements in a uh in a collection type like a set of string is not reified at runtime so the system doesn't really",
    "start": "1553559",
    "end": "1559360"
  },
  {
    "text": "know that you have a set of strings it just knows it's a set so the system canot really help you when you want to",
    "start": "1559360",
    "end": "1564799"
  },
  {
    "text": "extract a in this case A Primitive array of strings from a set of strings you have to tell it by passing in a that",
    "start": "1564799",
    "end": "1572360"
  },
  {
    "text": "primitive array you want to be filled in otherwise the types don't really match up and you cannot get the right runtime type out of the system in that we've",
    "start": "1572360",
    "end": "1579320"
  },
  {
    "text": "decided to to reify this materialize the runtime type information that you need to be able to do this without requesting",
    "start": "1579320",
    "end": "1586480"
  },
  {
    "text": "the user to pass in sort of EXP licitly what he wants everywhere here just let the set of strings know that actually",
    "start": "1586480",
    "end": "1592880"
  },
  {
    "text": "contains strings and allow a method like to list on that string to return the right kind of list of strings not just a",
    "start": "1592880",
    "end": "1599480"
  },
  {
    "text": "random list and that really helps too in in terms of uh making it much easier to express these things without having to",
    "start": "1599480",
    "end": "1605159"
  },
  {
    "text": "write error prone code that ends up looking a little bit weird I mean I think people coming to Java from from",
    "start": "1605159",
    "end": "1611159"
  },
  {
    "text": "different backgrounds would find this this S2 array new string SI size thing",
    "start": "1611159",
    "end": "1616200"
  },
  {
    "text": "kind of convoluted and weird in terms of what it tries to express feels a little bit off at least I just want to add that uh in Java",
    "start": "1616200",
    "end": "1625679"
  },
  {
    "text": "there's a reason why they don't have that because they could not change the jvm specification when they introduced",
    "start": "1625679",
    "end": "1632360"
  },
  {
    "text": "generics um so they had to do a ratio of the generic types so the only data type",
    "start": "1632360",
    "end": "1638360"
  },
  {
    "text": "in jav that have generics is a primitive arrays because they have reified types",
    "start": "1638360",
    "end": "1645600"
  },
  {
    "text": "yeah there are other things where draw sort of um picking up good features from",
    "start": "1645799",
    "end": "1651480"
  },
  {
    "text": "other languages and implying them in in a new context here works out pretty well so we have a notion of cascaded calls",
    "start": "1651480",
    "end": "1657679"
  },
  {
    "text": "very often at least in in in certain kinds of code you end up calling lots of different methods on the same object",
    "start": "1657679",
    "end": "1664600"
  },
  {
    "text": "like the trick usually is to throw that object into a a a new local variable and",
    "start": "1664600",
    "end": "1669799"
  },
  {
    "text": "then just repeat that all along but Small Talk had a pretty neat solution to this that allowed you to send multiple",
    "start": "1669799",
    "end": "1676240"
  },
  {
    "text": "messages to the same object without having to to do that um and we sort of cloned that and put that into a a a c",
    "start": "1676240",
    "end": "1684200"
  },
  {
    "text": "syntax and made it possible to actually in this case call 1 2 3 four five",
    "start": "1684200",
    "end": "1689279"
  },
  {
    "text": "methods on the canvas context object um without having to materialize that in a",
    "start": "1689279",
    "end": "1694880"
  },
  {
    "text": "in a in a new local variable here I mean the difference if you actually went ahead and put context in a local",
    "start": "1694880",
    "end": "1700320"
  },
  {
    "text": "variable probably wouldn't be that big but we do find that people write better code and can stay within what is uh um",
    "start": "1700320",
    "end": "1707600"
  },
  {
    "text": "what is sort of expression context you don't have to be a place where you can write statements to make this work and it makes the code a little bit simpler",
    "start": "1707600",
    "end": "1713600"
  },
  {
    "text": "and it it I think it encapsulates what the intent here is U even better than",
    "start": "1713600",
    "end": "1718679"
  },
  {
    "text": "actually pulling out the uh the context object into a local variable there are other places where this actually works",
    "start": "1718679",
    "end": "1724279"
  },
  {
    "text": "pretty well and that's where you um where you initialize uh objects and right away want to do something to them",
    "start": "1724279",
    "end": "1731120"
  },
  {
    "text": "so in in uh in small talk uh this was a very common idiom uh with one twist in small talk the the uh the evaluation of",
    "start": "1731120",
    "end": "1739120"
  },
  {
    "text": "sort of a a set of messages always evaluated to the last expression evaluated here and we've decided in dot",
    "start": "1739120",
    "end": "1746200"
  },
  {
    "text": "that um that was not really necessary that we always wanted the overall",
    "start": "1746200",
    "end": "1751559"
  },
  {
    "text": "operation here to evaluate to the original uh object you were invoking these messages on so the code for",
    "start": "1751559",
    "end": "1757440"
  },
  {
    "text": "creating a small initial set here could easily look something like this it's a method that returns a set and on the",
    "start": "1757440",
    "end": "1764000"
  },
  {
    "text": "right hand side you see us creating a set and right away adding the single element to it before returning it and it",
    "start": "1764000",
    "end": "1769559"
  },
  {
    "text": "works pretty well in practice and we see a lot of people using these things for just writing slightly better code uh so it's sort of encouraging people not to",
    "start": "1769559",
    "end": "1776080"
  },
  {
    "text": "have to invent names for all all the Expressions that they want to reuse in this context so it's a way of making",
    "start": "1776080",
    "end": "1781679"
  },
  {
    "text": "things more concise does it make sense to you",
    "start": "1781679",
    "end": "1788360"
  },
  {
    "text": "great so just to sum up the cated things maybe you haven't seen these things",
    "start": "1788360",
    "end": "1793600"
  },
  {
    "text": "before right but it it does allow you as a programmer to do sort of a chaining of Meth methods on any kind of object with",
    "start": "1793600",
    "end": "1799760"
  },
  {
    "text": "a different with a set of methods without having the apis prepared for that and in Java we see a lot of people",
    "start": "1799760",
    "end": "1805320"
  },
  {
    "text": "writing these sort of fluent style or method chaining style apis where they always return uh the uh the object",
    "start": "1805320",
    "end": "1811840"
  },
  {
    "text": "you're invoking on to be able to sort of um just have a chain of method invocations but that it looks a little",
    "start": "1811840",
    "end": "1817880"
  },
  {
    "text": "bit off-putting when you look at the apis like why are the apis always returning to the object is that just to",
    "start": "1817880",
    "end": "1823000"
  },
  {
    "text": "prepare for something where someone who wants to use the API has has a need to do the in in a row it feels weird like",
    "start": "1823000",
    "end": "1829840"
  },
  {
    "text": "why I these methods returning this all the time so you don't have to do that in",
    "start": "1829840",
    "end": "1834919"
  },
  {
    "text": "Dart um as I said the Expressions always return the receiver object the one you're invoking the methods on and it's",
    "start": "1834919",
    "end": "1841200"
  },
  {
    "text": "uh certainly inspired from from small talk there a lot of things in D that uh is inspired for other languages and I",
    "start": "1841200",
    "end": "1847600"
  },
  {
    "text": "find that's the that's that's the best way of actually building pragmatic uh useful languages um and people generally",
    "start": "1847600",
    "end": "1855840"
  },
  {
    "text": "find this is our experience that it's kind of easy to pick up a language like that because it feels very",
    "start": "1855840",
    "end": "1862278"
  },
  {
    "text": "familiar so just one more I just want to add one more thing here first of all um",
    "start": "1863880",
    "end": "1869320"
  },
  {
    "text": "I hope you see a theme here if you want to use method chaining in Java the",
    "start": "1869320",
    "end": "1875200"
  },
  {
    "text": "implementation ahead of time has to be planned for it everything has to return this so we can do the method",
    "start": "1875200",
    "end": "1881320"
  },
  {
    "text": "chaining in dot you can also you can use at the client side on any interface it's",
    "start": "1881320",
    "end": "1886600"
  },
  {
    "text": "exactly the same as with the polar point in D you can use any class as an interface you don't have to pre-plan for",
    "start": "1886600",
    "end": "1893600"
  },
  {
    "text": "uh for doing an extra class whereas like in Java you have to do that so we really",
    "start": "1893600",
    "end": "1898799"
  },
  {
    "text": "believe that creating Frameworks for one use case is not a good idea in",
    "start": "1898799",
    "end": "1905399"
  },
  {
    "text": "software I know many people like that but it's a terrible idea because you don't know how the second er a client",
    "start": "1905399",
    "end": "1913240"
  },
  {
    "text": "will be using that interface so in my mind it's better to have a programming language that makes it flexible",
    "start": "1913240",
    "end": "1918600"
  },
  {
    "text": "and when a second user is coming in and want to use that interface they can use it in any way they choose to now let's",
    "start": "1918600",
    "end": "1925279"
  },
  {
    "text": "get back to Eric so um this",
    "start": "1925279",
    "end": "1930760"
  },
  {
    "text": "ISM used to be at Microsoft that asynchronous uh support in C has",
    "start": "1930760",
    "end": "1939080"
  },
  {
    "text": "added to almost any language in the world by now mhm and uh I'm going to go",
    "start": "1939080",
    "end": "1944320"
  },
  {
    "text": "through a small Spiel how we did that in um in Dot",
    "start": "1944320",
    "end": "1949840"
  },
  {
    "text": "so um I assume all of you guys that have program in in JavaScript you try to",
    "start": "1952039",
    "end": "1960240"
  },
  {
    "text": "block the UI thread and then everything goes to hell um sometimes a browser even time",
    "start": "1960240",
    "end": "1967200"
  },
  {
    "text": "you out and stops the whole web page and it's just really annoying uh in Java you have multiple",
    "start": "1967200",
    "end": "1973480"
  },
  {
    "text": "threads so you can always spin off another thread working on it uh that's not possible if you run inside the",
    "start": "1973480",
    "end": "1978679"
  },
  {
    "text": "browser for instance so uh the browser enforces single thread execution and the big",
    "start": "1978679",
    "end": "1985240"
  },
  {
    "text": "problem here is how do you deal with IO uh without uh killing responsiveness",
    "start": "1985240",
    "end": "1991919"
  },
  {
    "text": "because if you read something over the network you don't know when it'll",
    "start": "1991919",
    "end": "1997519"
  },
  {
    "text": "return many people over the time have said that multi-threading is uh it's a solution but even that is not a problem",
    "start": "1997519",
    "end": "2004720"
  },
  {
    "text": "even that is not the solution because often when you make new thread in a programming language you bind it to a",
    "start": "2004720",
    "end": "2010320"
  },
  {
    "text": "native thread and there's limited threads you can allocate so in Java uh",
    "start": "2010320",
    "end": "2015919"
  },
  {
    "text": "if you allocate much more than 10,000 threats it start uh killing the machine",
    "start": "2015919",
    "end": "2020960"
  },
  {
    "text": "you're running on if it's a discop so what is the solution because the code you want to",
    "start": "2020960",
    "end": "2028320"
  },
  {
    "text": "have is sort of on the right this is simplified IO code it reads something",
    "start": "2028320",
    "end": "2033440"
  },
  {
    "text": "and it writes it um and there can be errors you want to handle that with a catch clause and when you're done with",
    "start": "2033440",
    "end": "2040320"
  },
  {
    "text": "the whole thing you want to close the uh the streams you've been working on so",
    "start": "2040320",
    "end": "2045480"
  },
  {
    "text": "very simple so in the browser without having real",
    "start": "2045480",
    "end": "2051118"
  },
  {
    "text": "support for a synchronous programming The Simple Solution is like if you used",
    "start": "2051119",
    "end": "2056679"
  },
  {
    "text": "OS 9 on the Mac many many years ago you put down a call back so when the iio",
    "start": "2056679",
    "end": "2062320"
  },
  {
    "text": "operation completes that'll be called and then you know that the iio operation has terminated",
    "start": "2062320",
    "end": "2069118"
  },
  {
    "text": "so in um here's some pseudo code that can",
    "start": "2069119",
    "end": "2074200"
  },
  {
    "text": "handle uh it and what you do is you make a read operation that will um you can pass in a",
    "start": "2074200",
    "end": "2083158"
  },
  {
    "text": "closure and that closure will be called with what was read when it happened and",
    "start": "2083159",
    "end": "2088240"
  },
  {
    "text": "then you can s do whatever you want with it in this case here you want to write it uh to some place the content C and",
    "start": "2088240",
    "end": "2094878"
  },
  {
    "text": "then you also pass in an error Handler which is a call back if something goes wrong it'll be",
    "start": "2094879",
    "end": "2100160"
  },
  {
    "text": "called uh please note that we don't handle handle finally because then this becomes completely unreadable and this",
    "start": "2100160",
    "end": "2106240"
  },
  {
    "text": "is the absolute simplest case for iio one read one write imagine if you have",
    "start": "2106240",
    "end": "2112359"
  },
  {
    "text": "logic involved in this uh uh then it becomes completely",
    "start": "2112359",
    "end": "2117920"
  },
  {
    "text": "unreadable so uh smart people have come up with uh abstractions called Futures",
    "start": "2117920",
    "end": "2124520"
  },
  {
    "text": "uh to make it better and a future is just a dumb object that can contain a",
    "start": "2124520",
    "end": "2130200"
  },
  {
    "text": "closure and the idea with the futurs is that when a future completes it will",
    "start": "2130200",
    "end": "2135680"
  },
  {
    "text": "call the uh the stored closure on the future and then you also have some uh uh",
    "start": "2135680",
    "end": "2142680"
  },
  {
    "text": "Library routines on a future that will help you organize your code in this case here you can actually handle the uh",
    "start": "2142680",
    "end": "2150280"
  },
  {
    "text": "finally Clause that's on the right and you can see you have a then catch error",
    "start": "2150280",
    "end": "2155520"
  },
  {
    "text": "and when complete it makes a code more readable especially when you have sequential uh code like I do a read and",
    "start": "2155520",
    "end": "2163200"
  },
  {
    "text": "I do a write if you have any any kind of looping going on this gets really complicated because you have to",
    "start": "2163200",
    "end": "2169119"
  },
  {
    "text": "replicate all the language constructs in library for the future so",
    "start": "2169119",
    "end": "2175200"
  },
  {
    "text": "you get this duality in the in the system that's uh hard to to deal with so",
    "start": "2175200",
    "end": "2181119"
  },
  {
    "text": "for those of you who are more familiar with this JavaScript just think promise when we say future and you'll be fine",
    "start": "2181119",
    "end": "2187240"
  },
  {
    "text": "same issue same deal it's called a promise I'll promise",
    "start": "2187240",
    "end": "2192359"
  },
  {
    "text": "to do that in the future good so",
    "start": "2192359",
    "end": "2198920"
  },
  {
    "text": "uh so meire just left Microsoft so we hired him in as a consultant to make",
    "start": "2198920",
    "end": "2204040"
  },
  {
    "text": "sure that our libraries was fit with a new asynchronous design so uh we came up",
    "start": "2204040",
    "end": "2210599"
  },
  {
    "text": "or he came up mostly uh with a new keyword for our language called a sync you can put on",
    "start": "2210599",
    "end": "2216599"
  },
  {
    "text": "methods we already have libraries that had streams and Futures so that fit uh",
    "start": "2216599",
    "end": "2222880"
  },
  {
    "text": "really well into the system the solution is inspired by C but nowadays they they",
    "start": "2222880",
    "end": "2227920"
  },
  {
    "text": "have it everywhere yes so uh so this is mostly for a pleasure you probably know all of this but the if you introduce the",
    "start": "2227920",
    "end": "2235520"
  },
  {
    "text": "snc keyword you can come back and get some code that's almost",
    "start": "2235520",
    "end": "2241400"
  },
  {
    "text": "readable please note that the code on the right looks like the code on the left now we have now gone back to using",
    "start": "2241400",
    "end": "2249920"
  },
  {
    "text": "try cats and finally yes we have some weights sprinkle around that'll say this",
    "start": "2249920",
    "end": "2256119"
  },
  {
    "text": "actually can be suspended at this point in time but the logic in the program is",
    "start": "2256119",
    "end": "2264280"
  },
  {
    "text": "restored behind the scenes is all awful because you have to terminate an activation in",
    "start": "2264680",
    "end": "2273480"
  },
  {
    "text": "mid-flight and then you have to reactivate it again when a certain future fires so we have a compiler that",
    "start": "2273480",
    "end": "2281200"
  },
  {
    "text": "compiles a method uh into a state machine where the locals in the",
    "start": "2281200",
    "end": "2288680"
  },
  {
    "text": "activation has been migrated into a heap representation and so whenever you",
    "start": "2288680",
    "end": "2294880"
  },
  {
    "text": "continue after an a wait it will B basically resume that activation on the other hand you get",
    "start": "2294880",
    "end": "2301680"
  },
  {
    "text": "readable code and we made the call that this is better to readable code than a complicated implement ation behind the",
    "start": "2301680",
    "end": "2310318"
  },
  {
    "text": "scenes so um that's pros and cons with",
    "start": "2311680",
    "end": "2317680"
  },
  {
    "text": "as Syer weight the pros are obvious I talked about them they restore the normal control flow of the application",
    "start": "2317680",
    "end": "2324359"
  },
  {
    "text": "is super important because then you can actually maintain the code you even have the try",
    "start": "2324359",
    "end": "2330440"
  },
  {
    "text": "and finally Clauses and then you can do incremental migration of code you can take one one",
    "start": "2330440",
    "end": "2337599"
  },
  {
    "text": "method at a time and convert it from a method Rec callbacks and Futures to a an a sync method and I think that's really",
    "start": "2337599",
    "end": "2345599"
  },
  {
    "text": "nice so the compilation process only changes around one method if you have",
    "start": "2345599",
    "end": "2352240"
  },
  {
    "text": "the SN keyword on the negative side right you get this Duality between",
    "start": "2352240",
    "end": "2359560"
  },
  {
    "text": "ASN code and sync code and it's like const in C++ it seems",
    "start": "2359560",
    "end": "2364920"
  },
  {
    "text": "to spread out uh um but that's sort of the",
    "start": "2364920",
    "end": "2370280"
  },
  {
    "text": "drawback of it it has more more positive sides than negative",
    "start": "2370280",
    "end": "2375319"
  },
  {
    "text": "sides one problem is of course that stack traces disappear because whenever you are at an a weight point you unwind",
    "start": "2375319",
    "end": "2382960"
  },
  {
    "text": "the complete stack and then when you fire the next future you'll reestablish",
    "start": "2382960",
    "end": "2388119"
  },
  {
    "text": "that activation the debugging is is not intuitive especially when the systems",
    "start": "2388119",
    "end": "2393480"
  },
  {
    "text": "guys tells you that I if you step into an async method there's two",
    "start": "2393480",
    "end": "2401000"
  },
  {
    "text": "results um anyways people love this and",
    "start": "2401280",
    "end": "2406680"
  },
  {
    "text": "uh so I I'm glad we put it in and thanks to Eric for",
    "start": "2406680",
    "end": "2411720"
  },
  {
    "text": "it so um we have gone through a few examples here in this presentation I hope you",
    "start": "2411920",
    "end": "2418680"
  },
  {
    "text": "convinced you that having simple and having a simple and consistent program Lang is important for you to understand",
    "start": "2418680",
    "end": "2425560"
  },
  {
    "text": "how the program executes I spent too many years doing small talk and I really really like that there's a",
    "start": "2425560",
    "end": "2433040"
  },
  {
    "text": "onetoone correspondence between what you see in the source code and one you what you execute when you run your",
    "start": "2433040",
    "end": "2439800"
  },
  {
    "text": "program that I leave out the sync stuff um but that's important so now we'll",
    "start": "2439800",
    "end": "2446400"
  },
  {
    "text": "talk a little bit about the framework that's also important to make it simple and understandable to make you a better",
    "start": "2446400",
    "end": "2451560"
  },
  {
    "text": "programmer Casper so the name of the framework we're going to give",
    "start": "2451560",
    "end": "2458119"
  },
  {
    "text": "yeah it's thought of you but I'll I'll take it anyway um all right it's called flutter um and we're going to just give",
    "start": "2458119",
    "end": "2463400"
  },
  {
    "text": "you a brief overview of that but I'm going to mess a little bit with some machines up here to actually show you a demo of this stuff running for Real uh",
    "start": "2463400",
    "end": "2469079"
  },
  {
    "text": "so I'm going to switch over a few things here so so I'll do let L Lars do a bit of the talking here while I start",
    "start": "2469079",
    "end": "2474599"
  },
  {
    "text": "sweating and moving machines around so I guess you you can get a a first taste of it while I start working on",
    "start": "2474599",
    "end": "2481680"
  },
  {
    "text": "this all right so um we need to freeze the frame signal here and then we can",
    "start": "2481680",
    "end": "2490119"
  },
  {
    "text": "I'll take this wow thank",
    "start": "2490119",
    "end": "2493440"
  },
  {
    "text": "you so we have a new project at Google called flutter it's open source",
    "start": "2496560",
    "end": "2502119"
  },
  {
    "text": "flutter.io and um it's all about making",
    "start": "2502119",
    "end": "2507280"
  },
  {
    "text": "uh mobile development faster so today uh when you have to do a mobile app you",
    "start": "2507280",
    "end": "2513280"
  },
  {
    "text": "first have to do it for iOS or for Android and then make a a similar app on the other side so one of the main points",
    "start": "2513280",
    "end": "2521720"
  },
  {
    "text": "of flutter is that you can write this the source code in uh once and it runs",
    "start": "2521720",
    "end": "2527800"
  },
  {
    "text": "on all these devices and uh Casper is ready for a",
    "start": "2527800",
    "end": "2533040"
  },
  {
    "text": "demo you're not the machine is still booting so you have to stall a little bit but the more interesting part of this uh framework here is all written in",
    "start": "2533040",
    "end": "2540800"
  },
  {
    "text": "Dart and it started out as a a as a product from the Chrome guys uh they",
    "start": "2540800",
    "end": "2547520"
  },
  {
    "text": "wanted to make something that's simpler than the browser so they start making a simplified Dom model and interface to",
    "start": "2547520",
    "end": "2554280"
  },
  {
    "text": "that and try to build a framework on top of that got too complicated so they took that out and replaced that with more dot",
    "start": "2554280",
    "end": "2560880"
  },
  {
    "text": "code and eventually it ends up that they only have a C++ lowlevel Graphics API",
    "start": "2560880",
    "end": "2568480"
  },
  {
    "text": "the rest is implemented in thatt and the point is in this uh project here is that",
    "start": "2568480",
    "end": "2574359"
  },
  {
    "text": "when you run the debugger all the code isn't do so you can see what's going on and that is to a big contrast to most of",
    "start": "2574359",
    "end": "2581119"
  },
  {
    "text": "the systems that being implemented today we have a demo I'm ready now can we switch over to the uh the live HDMI it",
    "start": "2581119",
    "end": "2588200"
  },
  {
    "text": "is on we're on great let me start this up here's a um a flutter based small",
    "start": "2588200",
    "end": "2595119"
  },
  {
    "text": "sort of gallery app that shows you some of the things that that flutter can do um as lar said almost everything here is",
    "start": "2595119",
    "end": "2601920"
  },
  {
    "text": "written in D um and right now I'm actually running it here on a on this the small device uh the iPod and I'm",
    "start": "2601920",
    "end": "2608480"
  },
  {
    "text": "just going to show you a few of the things be aware that the frame rate you see up here is probably not going to",
    "start": "2608480",
    "end": "2613599"
  },
  {
    "text": "match what I see here so uh things that look really nice for me might look somewhat crappy for you guys but should",
    "start": "2613599",
    "end": "2618839"
  },
  {
    "text": "come up here afterwards and I'll show you the the real life devices so on my",
    "start": "2618839",
    "end": "2624559"
  },
  {
    "text": "uh device up here this is super smooth and you have to trust me on this just like a 60 frames per second easily it",
    "start": "2624559",
    "end": "2630839"
  },
  {
    "text": "just runs really nice and it shows a of great um uh animation frame ratees and",
    "start": "2630839",
    "end": "2637319"
  },
  {
    "text": "and a very consistent frame ratees as well this is all powered by dot um and",
    "start": "2637319",
    "end": "2642720"
  },
  {
    "text": "the uh the flutter framework and I mean this is a fairly simple thing but a lot of the sort of more high level managed",
    "start": "2642720",
    "end": "2648839"
  },
  {
    "text": "systems out there have a hard time delivering these very consistent frame rates and this is actually an area where",
    "start": "2648839",
    "end": "2654160"
  },
  {
    "text": "where dot is doing really really well so let me go back to something that might look a little bit better even on the on",
    "start": "2654160",
    "end": "2659200"
  },
  {
    "text": "the screen here and uh pick a through the uh flexible tool bar thing here",
    "start": "2659200",
    "end": "2665079"
  },
  {
    "text": "here's a uh another part of this uh of gallery app that shows some of the uh transitions that you would expect from",
    "start": "2665079",
    "end": "2671720"
  },
  {
    "text": "like modern mobile um apps are all working in this this framework so it all",
    "start": "2671720",
    "end": "2676839"
  },
  {
    "text": "has a nice uh fluent um feel to it again like the frame rates look really nice",
    "start": "2676839",
    "end": "2682480"
  },
  {
    "text": "here uh but you can see that there's a some attention paid to the details and it actually looks like a real native app",
    "start": "2682480",
    "end": "2688559"
  },
  {
    "text": "um the thing is that this does not just run on the on the iPod here if you come",
    "start": "2688559",
    "end": "2693800"
  },
  {
    "text": "up here and I'll I can show you this on a a different device let me just wave it about so then you get a feel for that it",
    "start": "2693800",
    "end": "2700240"
  },
  {
    "text": "actually is real but here is the the same thing running on an an Android phone same code base same system and it",
    "start": "2700240",
    "end": "2706920"
  },
  {
    "text": "works really nicely there as well and that is a big reason why this this works out and of course the other reason is",
    "start": "2706920",
    "end": "2712599"
  },
  {
    "text": "the the is the implementation quality of the of the flutter framework so what you have here and what you see is basically",
    "start": "2712599",
    "end": "2718800"
  },
  {
    "text": "two uh separate uh phones or in this case an iPod running a a native app",
    "start": "2718800",
    "end": "2726720"
  },
  {
    "text": "built bu with a a flutter flutter stack uh from the same code base I think this",
    "start": "2726720",
    "end": "2731760"
  },
  {
    "text": "is kind of thing that we need to make people much more productive um in terms of delivering apps across the at least",
    "start": "2731760",
    "end": "2738280"
  },
  {
    "text": "the two major um mobile um platforms anything you want to add",
    "start": "2738280",
    "end": "2744839"
  },
  {
    "text": "anything you want to show you should really drop by afterwards and and form a line and I'll",
    "start": "2744839",
    "end": "2749880"
  },
  {
    "text": "show you all the how it all works out in practice it's much much nicer and you're not connected here well we'll see how",
    "start": "2749880",
    "end": "2755720"
  },
  {
    "text": "many people we can get to see us want to change back oh yeah let's try it",
    "start": "2755720",
    "end": "2761799"
  },
  {
    "text": "out all right",
    "start": "2770000",
    "end": "2776559"
  },
  {
    "text": "yep oh jeez all right so this is the",
    "start": "2777119",
    "end": "2782880"
  },
  {
    "text": "architectural overview of flut",
    "start": "2782880",
    "end": "2786880"
  },
  {
    "text": "oh much better so you can see it's a layer Approach at the bottom you have the VM",
    "start": "2790760",
    "end": "2797920"
  },
  {
    "text": "uh skia which is the graphics Library used in Chrome you have something called",
    "start": "2797920",
    "end": "2803200"
  },
  {
    "text": "Mojo which is just a uh an isolation shell around it and then you have a flow Indian for text the rest is written in",
    "start": "2803200",
    "end": "2810319"
  },
  {
    "text": "dot which is really cool they love it because they can all they have to debug in is in one program language you know",
    "start": "2810319",
    "end": "2816480"
  },
  {
    "text": "when you build a a big system and you use different components it could be",
    "start": "2816480",
    "end": "2821760"
  },
  {
    "text": "JavaScript angular and HTML there all always a blame game when it comes to",
    "start": "2821760",
    "end": "2827599"
  },
  {
    "text": "Performance like these are the guys that's not performing and stuff like that and it's never ending the cool",
    "start": "2827599",
    "end": "2833520"
  },
  {
    "text": "thing about this is um if there's a performance problem we can actually fix it in the in the dart VM to get good",
    "start": "2833520",
    "end": "2839839"
  },
  {
    "text": "frame rates and for the flutter system we have actually done a lot of uh",
    "start": "2839839",
    "end": "2844880"
  },
  {
    "text": "Engineering in the dovm we've done a head of time compilation we have done",
    "start": "2844880",
    "end": "2851599"
  },
  {
    "text": "Dynamic uh storage of dynamic generator code on Android so if the underlying",
    "start": "2851599",
    "end": "2857640"
  },
  {
    "text": "system kills it and restarts it you can use a code that's already compiled and",
    "start": "2857640",
    "end": "2863559"
  },
  {
    "text": "um so this is H this is a fairly good fit for the the do um programming",
    "start": "2863559",
    "end": "2869000"
  },
  {
    "text": "language and the VM one thing you should note is why didn't we do this in JavaScript you okay you should try to",
    "start": "2869000",
    "end": "2875920"
  },
  {
    "text": "pre-compile JavaScript script and come back to me then because that's nearly impossible JavaScript is so Dynamic that",
    "start": "2875920",
    "end": "2882440"
  },
  {
    "text": "uh you cannot pre-compile much so um this is great you should go",
    "start": "2882440",
    "end": "2887960"
  },
  {
    "text": "look at the flooded IO uh homepage and uh try it out next page please um here's",
    "start": "2887960",
    "end": "2896200"
  },
  {
    "text": "a sample application uh from the or a sample code from from flutter is a rack",
    "start": "2896200",
    "end": "2901960"
  },
  {
    "text": "to framework and the way that works is that",
    "start": "2901960",
    "end": "2907119"
  },
  {
    "text": "um you can see an increment if somebody call increments uh set state will be called with a closure and set state will",
    "start": "2907119",
    "end": "2913920"
  },
  {
    "text": "just render the system dirty and the underlying system will call the build construct and create a new UI uh tree",
    "start": "2913920",
    "end": "2922440"
  },
  {
    "text": "and then only U with a diff algorithm display what's necessary for the update",
    "start": "2922440",
    "end": "2928119"
  },
  {
    "text": "this is a very modern way of doing uis today and it's very clean so um we are",
    "start": "2928119",
    "end": "2934599"
  },
  {
    "text": "very excited about uh sending this out soon as an SDK and we have even a quote for uh from",
    "start": "2934599",
    "end": "2943640"
  },
  {
    "text": "a fellow googler they just love it right now which is good I hope they'll",
    "start": "2943640",
    "end": "2949440"
  },
  {
    "text": "continue so um run programs to roll them Ru them all",
    "start": "2950440",
    "end": "2958119"
  },
  {
    "text": "and um I really believe in this and it's sort of going back to the old days where",
    "start": "2958119",
    "end": "2963160"
  },
  {
    "text": "you had lisp machines all in lisp or Small Talk systems all in small talk but",
    "start": "2963160",
    "end": "2969359"
  },
  {
    "text": "actually there's something to it you you become a much more efficient programmer",
    "start": "2969359",
    "end": "2974400"
  },
  {
    "text": "because when you have to cross the boundary between one language and another one there's always what happens",
    "start": "2974400",
    "end": "2980680"
  },
  {
    "text": "in the interfacing part and you have to change a mental model this is actually very clean and example on that if you",
    "start": "2980680",
    "end": "2986440"
  },
  {
    "text": "you start with angular and HTML it's actually very complicated to figure out where the time goes and who initiated",
    "start": "2986440",
    "end": "2993440"
  },
  {
    "text": "what code so um very good so let me give you an update on like",
    "start": "2993440",
    "end": "2999440"
  },
  {
    "text": "where Dart is at in 2016 like you're probably all familiar with the fact that 2016 at least a good chunk of it is the",
    "start": "2999440",
    "end": "3005640"
  },
  {
    "text": "year of the um the selfie and um D is actually doing pretty well in this year",
    "start": "3005640",
    "end": "3012040"
  },
  {
    "text": "so I'm just going to give you an update on how we see it used today and there's a lot of internal Google projects that are using it uh I just want to let you",
    "start": "3012040",
    "end": "3019160"
  },
  {
    "text": "know a few details on on those things so Google Fiber for those of you let's say lucky enough to be in an area where you",
    "start": "3019160",
    "end": "3025480"
  },
  {
    "text": "can get that um is actually using dot for some of the UI heavy stuff that they're building and they're very happy",
    "start": "3025480",
    "end": "3031880"
  },
  {
    "text": "with with with the uh the benefits that they also get from dot maybe our sort of most um the biggest customer we have",
    "start": "3031880",
    "end": "3039520"
  },
  {
    "text": "internally is is the AdWords team that are rewriting the entire AdWords product which is a very important product to",
    "start": "3039520",
    "end": "3044839"
  },
  {
    "text": "Google in Dart um and this works um from within browsers across mobile devices um",
    "start": "3044839",
    "end": "3051559"
  },
  {
    "text": "and it's actually being being launched more or less as we speak this this new version of it all built in Dart so we're",
    "start": "3051559",
    "end": "3057079"
  },
  {
    "text": "seeing really really really healthy uptake of of the technology um and we're really shipping these large very",
    "start": "3057079",
    "end": "3064079"
  },
  {
    "text": "critical web apps built in in Dot and there are a lot of people writing dot code and the reason why we we we see",
    "start": "3064079",
    "end": "3069480"
  },
  {
    "text": "these internal teams moving to dot is that they can actually see that they are highly productive as as they scale",
    "start": "3069480",
    "end": "3076160"
  },
  {
    "text": "upwards and uh uh one of our uh friends there that work on on AdWords Josie um",
    "start": "3076160",
    "end": "3082119"
  },
  {
    "text": "was kind enough to provide a a small testimonial for here but I think the the core uh uh core thing here is really",
    "start": "3082119",
    "end": "3088040"
  },
  {
    "text": "that that is really in in quite heavy use probably more on the inside of the company than outside but I guess part of",
    "start": "3088040",
    "end": "3094400"
  },
  {
    "text": "uh part of the um the reason why we're also here is just to let you know where we're going with this technology so you can can think about whether or not it",
    "start": "3094400",
    "end": "3100400"
  },
  {
    "text": "fits your your will so that actually runs in a lot of different places just to make it very clear where where it",
    "start": "3100400",
    "end": "3106960"
  },
  {
    "text": "runs um it runs in browsers through a translation process of JavaScript um it",
    "start": "3106960",
    "end": "3113119"
  },
  {
    "text": "also runs on mobile and you sort of saw a demo and you should definitely come up here and did for Real uh but there it",
    "start": "3113119",
    "end": "3118240"
  },
  {
    "text": "actually runs on top of an optimized VM uh that gives us some uh really nice frame rates and some good uh debugging",
    "start": "3118240",
    "end": "3124160"
  },
  {
    "text": "properties as well it runs on servers as well we use it for a lot of different things but the sort of the latest things",
    "start": "3124160",
    "end": "3129920"
  },
  {
    "text": "that we've also sort of venturing into is a uh is they plan to actually run these things on much smaller devices iot",
    "start": "3129920",
    "end": "3137119"
  },
  {
    "text": "is probably the most famous buzzword for these things um I like to think of it as embedded instead um but at least we want",
    "start": "3137119",
    "end": "3144119"
  },
  {
    "text": "to run dot on small microcontrol controllers um and it's actually working",
    "start": "3144119",
    "end": "3149760"
  },
  {
    "text": "um very well for us it's certainly work in progress It's not a product yet um but we have start running really well on",
    "start": "3149760",
    "end": "3156640"
  },
  {
    "text": "on small cortex uh based microcontrollers um and it scales this",
    "start": "3156640",
    "end": "3162920"
  },
  {
    "text": "is not like really low-end devices at all but it's sort of the the high end of the low end you could say uh small",
    "start": "3162920",
    "end": "3168319"
  },
  {
    "text": "devices 32-bit microcontrollers with maybe around 100 128 KOB of RAM and a a",
    "start": "3168319",
    "end": "3174880"
  },
  {
    "text": "good chunk of flash as well this is where it starts getting interesting having a managed language that actually works well in that space um that gives",
    "start": "3174880",
    "end": "3182480"
  },
  {
    "text": "you some of the benefits and the productivity benefits in particular um that we see for like desktop and and",
    "start": "3182480",
    "end": "3189280"
  },
  {
    "text": "Mobile on these small devices is a very powerful thing we're not the first to have tried this it's been done in the",
    "start": "3189280",
    "end": "3195000"
  },
  {
    "text": "past like they probably have some War stories to share with you um but it feels like the market right now is um in",
    "start": "3195000",
    "end": "3202240"
  },
  {
    "text": "terms of Hardware capabilities it's it's really getting there and the the difference in price between a a chip",
    "start": "3202240",
    "end": "3208000"
  },
  {
    "text": "that can run a high level managed language like that and one that cannot is really really shrinking quite",
    "start": "3208000",
    "end": "3213599"
  },
  {
    "text": "dramatically these days so it feels like this is actually a pretty good uh fit for thatt one thing that's really",
    "start": "3213599",
    "end": "3219480"
  },
  {
    "text": "important to stress here is and uh the embedded space is a very interesting space lots of um closed software Stacks",
    "start": "3219480",
    "end": "3227079"
  },
  {
    "text": "that you cannot really get access to unless you pay a very high premium it's still like developer seat licenses and",
    "start": "3227079",
    "end": "3232799"
  },
  {
    "text": "it's very of old school model for it we're going for a the more modern approach with an open source uh sort of",
    "start": "3232799",
    "end": "3239599"
  },
  {
    "text": "alternative to to those um systems and uh even though that some people find",
    "start": "3239599",
    "end": "3245079"
  },
  {
    "text": "that uh um sort of an interesting change uh I think it's it's it's highly",
    "start": "3245079",
    "end": "3250480"
  },
  {
    "text": "critical that we uh we we get much more uh open and much more accessible Stacks out there that people can really use so",
    "start": "3250480",
    "end": "3256960"
  },
  {
    "text": "it's um it's certainly an attempt to also improve software for embedded devices in",
    "start": "3256960",
    "end": "3263520"
  },
  {
    "text": "general so I think we're heading close to the end yep how we on time that looks good we",
    "start": "3263520",
    "end": "3269599"
  },
  {
    "text": "started early oh I see all right so let's uh try to conclude uh before we",
    "start": "3269599",
    "end": "3275799"
  },
  {
    "text": "have questions so um we believe we did the",
    "start": "3275799",
    "end": "3281359"
  },
  {
    "text": "after spending 25 years doing VMS uh we got fed up did a new program language",
    "start": "3281359",
    "end": "3287680"
  },
  {
    "text": "and we think we have learned from the past we think it's readable and it's concise and uh I think you should try it",
    "start": "3287680",
    "end": "3294720"
  },
  {
    "text": "out if you haven't um we heard from other projects I like",
    "start": "3294720",
    "end": "3300319"
  },
  {
    "text": "it which is nice and we already have several milon lines of code of dot written inside Google and uh the good",
    "start": "3300319",
    "end": "3306960"
  },
  {
    "text": "thing about that is that it means this is not a fluke uh dot is going to be around for a long time so get used to",
    "start": "3306960",
    "end": "3313960"
  },
  {
    "text": "it um so uh",
    "start": "3313960",
    "end": "3321119"
  },
  {
    "text": "[Applause] [Music]",
    "start": "3324220",
    "end": "3331240"
  },
  {
    "text": "MH so we created um uh Casper and I created that and I think we are we at",
    "start": "3331240",
    "end": "3337400"
  },
  {
    "text": "least have an attempt to make something that's more concise um so that's good and uh we hope",
    "start": "3337400",
    "end": "3345200"
  },
  {
    "text": "you like it too so um let's go to the questions do we have any questions from",
    "start": "3345200",
    "end": "3352440"
  },
  {
    "text": "uh from the the audience here if not I have a good list here of questions that you all sort of questions are are really",
    "start": "3352440",
    "end": "3359880"
  },
  {
    "text": "good so please take a mic if you want to ask questions about VMS or",
    "start": "3359880",
    "end": "3367400"
  },
  {
    "text": "languages oh I don't have a question about that sorry I wanted to ask a quick question about flutter even though I could probably look this up I'm just",
    "start": "3367400",
    "end": "3373640"
  },
  {
    "text": "wondering what the current support is for the the native apis such as",
    "start": "3373640",
    "end": "3378760"
  },
  {
    "text": "interfacing with Bluetooth accelera etc etc so the um flutter apps aren native",
    "start": "3378760",
    "end": "3384960"
  },
  {
    "text": "apps so they um they have access to all the same native capabilities as any other native app and there's a little",
    "start": "3384960",
    "end": "3391799"
  },
  {
    "text": "bit of Plumbing that you have to do to uh to make that available in dot but it's certainly possible to access anything from the underlying system by",
    "start": "3391799",
    "end": "3399039"
  },
  {
    "text": "so basically having interrupt with uh Java on Android and uh and Objective C and Swift on on iOS so but this is where",
    "start": "3399039",
    "end": "3407480"
  },
  {
    "text": "it gets tricky because you don't want to use too much platform specific code because then it doesn't work on both so",
    "start": "3407480",
    "end": "3413680"
  },
  {
    "text": "you have to make sure that when you do uh uh like the compass interface to that",
    "start": "3413680",
    "end": "3420079"
  },
  {
    "text": "right you want to make sure that you use the same API and provide two implementation so people can take advantage of a common API on on the two",
    "start": "3420079",
    "end": "3427599"
  },
  {
    "text": "systems but that is the int intent I actually have a question for",
    "start": "3427599",
    "end": "3432720"
  },
  {
    "text": "you here Lars um it's sort of for me as well but it says like V8 is very impressive do you feel any guilt for",
    "start": "3432720",
    "end": "3438799"
  },
  {
    "text": "inflicting the world's worst most painful language on the planet I I didn't make this up",
    "start": "3438799",
    "end": "3446880"
  },
  {
    "text": "the last part of that question um I've been told not to say from my own mouth",
    "start": "3448599",
    "end": "3455039"
  },
  {
    "text": "because that gets me into problems but um you have I have an excuse here",
    "start": "3455039",
    "end": "3463160"
  },
  {
    "text": "because when we started on uh on V8 in",
    "start": "3463160",
    "end": "3468280"
  },
  {
    "text": "2006 it was um josp was mostly used for",
    "start": "3468280",
    "end": "3474559"
  },
  {
    "text": "uh describing an action when you push the button it was very simple a com",
    "start": "3474559",
    "end": "3480160"
  },
  {
    "text": "competing browser would do a full garbage collection for each 1,000 object allocations so the recommended style of",
    "start": "3480160",
    "end": "3487520"
  },
  {
    "text": "programming was to do an object pool uh for your whole app so it was pretty",
    "start": "3487520",
    "end": "3493280"
  },
  {
    "text": "pitiful um do I regret it it's",
    "start": "3493280",
    "end": "3499520"
  },
  {
    "text": "um I don't like inflicting pain uh and you never know how a system will be used",
    "start": "3499520",
    "end": "3506400"
  },
  {
    "text": "I think it's amazing what people can do with josp today uh given the fact that people are doing pre-processors or",
    "start": "3506400",
    "end": "3513240"
  },
  {
    "text": "transpilers on top of JavaScript makes it bearable to many big organizations to",
    "start": "3513240",
    "end": "3518599"
  },
  {
    "text": "use it um there's a reason why did that is that",
    "start": "3518599",
    "end": "3524359"
  },
  {
    "text": "the when we looked into the specification of JavaScript we got horrified and you saw some examples in",
    "start": "3524359",
    "end": "3530119"
  },
  {
    "text": "the talk um I think that most people do not understand the",
    "start": "3530119",
    "end": "3537319"
  },
  {
    "text": "the course am manance of JavaScript and that makes you a bad programmer if you understand this the",
    "start": "3537319",
    "end": "3543079"
  },
  {
    "text": "course am manance of programming language you're using you will become better and you will trust the underlying system so I think um we learned our",
    "start": "3543079",
    "end": "3551000"
  },
  {
    "text": "lesson is the answer next I think that's a pretty good good answer so my question is sort of an",
    "start": "3551000",
    "end": "3558799"
  },
  {
    "text": "extension of what she asked uh so a framework like ionic uses Cordova to translate uh code to the native platform",
    "start": "3558799",
    "end": "3567160"
  },
  {
    "text": "MH does dot use something similar to do that if that use a like a wrapper",
    "start": "3567160",
    "end": "3572760"
  },
  {
    "text": "framework like codova or for Gap to actually translate code to uh no the",
    "start": "3572760",
    "end": "3577920"
  },
  {
    "text": "native mobile platforms for the flutter framework there is no sort of translation process involved there um so",
    "start": "3577920",
    "end": "3583920"
  },
  {
    "text": "it it's basically um there is some some work being done by well mostly the flutter team at this point to expose",
    "start": "3583920",
    "end": "3589240"
  },
  {
    "text": "these apis in a uh in a in a mostly platform specific way but um to just",
    "start": "3589240",
    "end": "3595000"
  },
  {
    "text": "avoid papering over important details in this thing U but there is no um sort of um of regular way",
    "start": "3595000",
    "end": "3602880"
  },
  {
    "text": "of of doing this in in a more General way right now so but one of the important things to realize is that the",
    "start": "3602880",
    "end": "3608000"
  },
  {
    "text": "flutter stack does allow you to do these things yourself as well so if there are apis you really need to hook up to it's",
    "start": "3608000",
    "end": "3613640"
  },
  {
    "text": "certainly doable um okay we can take one more from the uh",
    "start": "3613640",
    "end": "3619640"
  },
  {
    "text": "from from here I guess take the dot versus typescript that's fun dot versus typescript thoughts well thoughts I",
    "start": "3619640",
    "end": "3626359"
  },
  {
    "text": "guess that's pretty easy yeah lots of thoughts yes I think that and typescript",
    "start": "3626359",
    "end": "3632960"
  },
  {
    "text": "certainly are trying to solve some of the same issues but they have very we have different approaches to to this um",
    "start": "3632960",
    "end": "3639400"
  },
  {
    "text": "I think if you dive into the details in many ways typescript is still JavaScript with some very very nice uh additional",
    "start": "3639400",
    "end": "3645760"
  },
  {
    "text": "features that makes tooling much better and makes it possible to at least for part of your app have a a um sort of a a",
    "start": "3645760",
    "end": "3653640"
  },
  {
    "text": "much better uh understanding what's happening at runtime through the static type annotations in in that respect that",
    "start": "3653640",
    "end": "3660039"
  },
  {
    "text": "and types are very very alike but if you dive into the details there are a lot of differences as well and you could say",
    "start": "3660039",
    "end": "3665480"
  },
  {
    "text": "that D is a little bit more ambitious right we wanted to fix things like not um just giving you weird issues when you",
    "start": "3665480",
    "end": "3672559"
  },
  {
    "text": "try to read ER sort of out out of bounds from an array we actually give you a proper error when you do that that",
    "start": "3672559",
    "end": "3678680"
  },
  {
    "text": "doesn't happen in typescript and there are a lot of other details where the implicit value uh cerion that you saw",
    "start": "3678680",
    "end": "3684760"
  },
  {
    "text": "before happens just as they should in in typescript because it's based on JavaScript in that we actually check",
    "start": "3684760",
    "end": "3690160"
  },
  {
    "text": "these things to make sure you're not burned by that at run time so there a lot of places where we just in some ways",
    "start": "3690160",
    "end": "3696039"
  },
  {
    "text": "took the uh maybe the more difficult approach of trying to solve these fundamental issues and guard you well",
    "start": "3696039",
    "end": "3701880"
  },
  {
    "text": "anyone in here that wants to use that at least from some of these issues at runtime so I think I mean clearly",
    "start": "3701880",
    "end": "3707359"
  },
  {
    "text": "there's overlap in in the technology space here um but at least personally I find that there's also lots of",
    "start": "3707359",
    "end": "3713240"
  },
  {
    "text": "differences that only become very visible if you really look at into the details here so one one thing I want to",
    "start": "3713240",
    "end": "3719240"
  },
  {
    "text": "mention is uh that typescript is actually an interesting language and if you if you program only in",
    "start": "3719240",
    "end": "3727000"
  },
  {
    "text": "typescript it will help you make you a better programmer but you can you can",
    "start": "3727000",
    "end": "3733039"
  },
  {
    "text": "fall into JavaScript at any point in time and then hell is",
    "start": "3733039",
    "end": "3738400"
  },
  {
    "text": "loose right but it means that you can you you can manipulate the underlying model remove properties and whatnot",
    "start": "3738839",
    "end": "3746039"
  },
  {
    "text": "change prototypes on the Fly and then the guarantees of typescript will not hold so I think if you keep within the",
    "start": "3746039",
    "end": "3753480"
  },
  {
    "text": "the area of of typescript you can actually have a fairly decent system in that you cannot break out into",
    "start": "3753480",
    "end": "3760480"
  },
  {
    "text": "JavaScript there's no unsafe part of Dot and if that matters to you uh then I",
    "start": "3760480",
    "end": "3768079"
  },
  {
    "text": "think uh dot is a is a better option and then then it runs outside the browser",
    "start": "3768079",
    "end": "3773279"
  },
  {
    "text": "yes how's the performance um versus the jvm that's a good question so the",
    "start": "3773279",
    "end": "3780599"
  },
  {
    "text": "question is how is the dot performance on the do VM compared to the",
    "start": "3780599",
    "end": "3786110"
  },
  {
    "text": "[Music] jvm um that",
    "start": "3786110",
    "end": "3792160"
  },
  {
    "text": "depends um there's different J systems out there my favorite one is hotspot but",
    "start": "3792160",
    "end": "3797640"
  },
  {
    "text": "the and this I think it's still the fastest one um I hope so the",
    "start": "3797640",
    "end": "3804520"
  },
  {
    "text": "um that is uh same speed or even faster when it",
    "start": "3804520",
    "end": "3809880"
  },
  {
    "text": "comes to inlining of abstractions and so on there's a big uh difference between Dot",
    "start": "3809880",
    "end": "3816839"
  },
  {
    "text": "and um and Java on a fundamental level in that in Java you have basic types in",
    "start": "3816839",
    "end": "3822599"
  },
  {
    "text": "the bite codes of uh Java you have specified whether it's an INT or a double or stuff like that we don't have",
    "start": "3822599",
    "end": "3829640"
  },
  {
    "text": "that in Dot and certainly that more flexibility can cost you so if you do",
    "start": "3829640",
    "end": "3836000"
  },
  {
    "text": "Matrix mplications say you have to bind all the implementation types to a certain thing that will be slower but",
    "start": "3836000",
    "end": "3842640"
  },
  {
    "text": "for normal application programmer is just as fast or even faster",
    "start": "3842640",
    "end": "3847680"
  },
  {
    "text": "sometimes and we decided when we did that and this is again I was annoyed by",
    "start": "3847680",
    "end": "3852720"
  },
  {
    "text": "writing c c and C++ when I overflow an integer it will silently just get the",
    "start": "3852720",
    "end": "3858160"
  },
  {
    "text": "wrong number and like what what is what world are we living in so in that we",
    "start": "3858160",
    "end": "3863520"
  },
  {
    "text": "have everything will overflow to Big nums when you use it as it should be so preserve the interet semantics when",
    "start": "3863520",
    "end": "3868960"
  },
  {
    "text": "using it's just I cannot believe most program they don't even do",
    "start": "3868960",
    "end": "3873960"
  },
  {
    "text": "that and there jospt is actually wonderful it it doesn't have",
    "start": "3874039",
    "end": "3880160"
  },
  {
    "text": "integers um should we go on yeah I think we probably have time for we have one more",
    "start": "3880160",
    "end": "3886400"
  },
  {
    "text": "question one more question want to take it from the audience yeah so for the dart uh from",
    "start": "3886400",
    "end": "3892319"
  },
  {
    "text": "the client side perspective you say it has no connections to JavaScript so what is the browser",
    "start": "3892319",
    "end": "3899240"
  },
  {
    "text": "support if in terms of different devices and so so maybe we can clarify the",
    "start": "3899240",
    "end": "3904960"
  },
  {
    "text": "answer and so there is certainly is a way for do code to call out into JavaScript it just cannot sort of mix it",
    "start": "3904960",
    "end": "3911880"
  },
  {
    "text": "in inside a DOT method you will not find bits and pieces of JavaScript floating around in there so there's much clearer",
    "start": "3911880",
    "end": "3918160"
  },
  {
    "text": "split between the dot parts and the JavaScript Parts but you're right in terms of writing a software that runs in",
    "start": "3918160",
    "end": "3923760"
  },
  {
    "text": "a browser you need access to existing JavaScript functionality that's one thing but also just all the browser",
    "start": "3923760",
    "end": "3929599"
  },
  {
    "text": "apis need to be exposed in a in a they're available at start libraries by the way in the browser but you cannot",
    "start": "3929599",
    "end": "3934960"
  },
  {
    "text": "take a third party JavaScript blob and suck into your D program and and and",
    "start": "3934960",
    "end": "3940720"
  },
  {
    "text": "just use because there's impedance mismatch between the D programming language and the JavaScript programming",
    "start": "3940720",
    "end": "3947480"
  },
  {
    "text": "language so you you need to do some interfacing I think I think that's it",
    "start": "3947480",
    "end": "3953599"
  },
  {
    "text": "that's it thank you very much for showing up",
    "start": "3953599",
    "end": "3957640"
  },
  {
    "text": "[Music] [Applause]",
    "start": "3958970",
    "end": "3964460"
  }
]