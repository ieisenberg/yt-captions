[
  {
    "text": "thanks Simon as developers we get the",
    "start": "5890",
    "end": "14618"
  },
  {
    "text": "best work done when we just have the opportunity to sit down undistracted and get into the flow context switching",
    "start": "14619",
    "end": "20949"
  },
  {
    "text": "greatly reduces our efficiency and it can cause us a lot of frustration how many of you would love to work in a",
    "start": "20949",
    "end": "27099"
  },
  {
    "text": "world where you get to work in a consistent expressive concise and fun programming language all day both for",
    "start": "27099",
    "end": "33550"
  },
  {
    "text": "the app development you do as well as the tools to build it I know I would when it comes to building",
    "start": "33550",
    "end": "40899"
  },
  {
    "text": "Android we may use a mix of languages in the app source and the built will source everything from java groovy xml",
    "start": "40899",
    "end": "47260"
  },
  {
    "text": "javascript if there's any web stuff native code could be in c c++ there's a",
    "start": "47260",
    "end": "52538"
  },
  {
    "text": "lot of stuff going on here and it can really slow us down and inhibit new developers to the codebase I'm tie and",
    "start": "52539",
    "end": "59920"
  },
  {
    "text": "I'm an Android developer at uber working on our external developer platform today I'm going to walk you through this under",
    "start": "59920",
    "end": "66490"
  },
  {
    "text": "new language that some of you may have heard about by now called Kotlin and how it can help make your life a little bit better and more consistent throughout",
    "start": "66490",
    "end": "72850"
  },
  {
    "text": "the entire development stack walk you through a short overview the language and then specific real-world examples",
    "start": "72850",
    "end": "79210"
  },
  {
    "text": "primarily focused on using it in the the build tools but first remember to use",
    "start": "79210",
    "end": "84939"
  },
  {
    "text": "the conference app to rate and ask questions before we begin with Scotland",
    "start": "84939",
    "end": "91148"
  },
  {
    "text": "why isn't java good enough for us one of the major talking points lately",
    "start": "91149",
    "end": "96430"
  },
  {
    "text": "has been when android will see true java 8 support recently along with the in release we did hear word of eight",
    "start": "96430",
    "end": "103030"
  },
  {
    "text": "support with the new compiler jack however kind of in a fragmented worlds when it comes to the languages that",
    "start": "103030",
    "end": "108880"
  },
  {
    "text": "android supports with Jack you get the land of support and you get that new API",
    "start": "108880",
    "end": "114369"
  },
  {
    "text": "features for the brand new release but we all know how Android users are slow",
    "start": "114369",
    "end": "119500"
  },
  {
    "text": "to adopt new versions of Java 7 has support for a larger set of devices i",
    "start": "119500",
    "end": "125618"
  },
  {
    "text": "believe from KitKat and up and below that they're still stuck on java 6 support so with that fragmentation it's",
    "start": "125619",
    "end": "132760"
  },
  {
    "text": "really hard to focus on just using a new language java android can both",
    "start": "132760",
    "end": "139569"
  },
  {
    "text": "be quite error-prone as well capturing in her classes for example leaves your apps from the memory leaks especially",
    "start": "139569",
    "end": "145689"
  },
  {
    "text": "when passing those onto asynchronous operations hopefully you got to see the talk by py earlier he does a lot more into the leaks that can be associated",
    "start": "145689",
    "end": "152319"
  },
  {
    "text": "with that you didn't get a chance to see that today I'd recommend watching that video there are also several syntactical",
    "start": "152319",
    "end": "160060"
  },
  {
    "text": "problems with java beside lambdas which is kind of the most popular thing that people say they want such as the",
    "start": "160060",
    "end": "165819"
  },
  {
    "text": "collection streaming and other systemic problems such as the verbis no ability and mutability the syntactical problems",
    "start": "165819",
    "end": "173049"
  },
  {
    "text": "can be resolved with some great libraries that help improve the app development experience and safely back fort some of those features from job and",
    "start": "173049",
    "end": "179680"
  },
  {
    "text": "eight and seven to previous versions libraries like Jack retro lambda and even RX Java but the systemic problems",
    "start": "179680",
    "end": "186189"
  },
  {
    "text": "cause for a bit of an issue though well Ruby is what is primarily used in",
    "start": "186189",
    "end": "193180"
  },
  {
    "text": "for building Gradle and it's an expressive and useful language however I think it also has a few limitations that",
    "start": "193180",
    "end": "200079"
  },
  {
    "text": "make it less than ideal for a world where we wanted this consistency across the first is that it's a that the first",
    "start": "200079",
    "end": "206680"
  },
  {
    "text": "is that it's a dynamic language will call in a statically typed girls going to spend more time processing the",
    "start": "206680",
    "end": "211750"
  },
  {
    "text": "language because of the runtime checking that needs to be done and it's been noted that using cotton in your Gradle",
    "start": "211750",
    "end": "217269"
  },
  {
    "text": "bills will speed up the configuration step because previous dynamic harder for",
    "start": "217269",
    "end": "224049"
  },
  {
    "text": "the ide to be smart for you to parse to autocomplete and therefore it's going to be more prone to error you're going to",
    "start": "224049",
    "end": "229540"
  },
  {
    "text": "have to do the build before you can often see that there's an issue that's going to slow down the feedback cycle by using a statically typed language you",
    "start": "229540",
    "end": "236259"
  },
  {
    "text": "allow the ID to be smarter for you and help give you these issues before you have to spend the time to reveal brings",
    "start": "236259",
    "end": "243909"
  },
  {
    "text": "a number of performance and memory concerns if it was going to be specifically on Android as well so that might limit this consistency that we",
    "start": "243909",
    "end": "250090"
  },
  {
    "text": "talked about for example the standard runtime for groovy is quite large the dynamic nature means that the garbage",
    "start": "250090",
    "end": "255969"
  },
  {
    "text": "collector and android would be running quite frequently which could cause a poor user experience and close friends to drop wouldn't be great to have",
    "start": "255969",
    "end": "262659"
  },
  {
    "text": "consistency between our build scripts plugins and the deliverable code well I think that we can get that by",
    "start": "262659",
    "end": "268330"
  },
  {
    "text": "using column with all type i'm sure you've heard a thing or two about it but there's been a few our talks already about Colin here the",
    "start": "268330",
    "end": "275020"
  },
  {
    "text": "conference but for those of you who haven't got a chance to hear about it i'll walk through a few of the advantages of it it's built by the folks",
    "start": "275020",
    "end": "282010"
  },
  {
    "text": "at jetbrains the people behind IntelliJ and most of the android studio work and",
    "start": "282010",
    "end": "287140"
  },
  {
    "text": "it's completely in its built completely in the open and it's designed with mobile first in mind with Android",
    "start": "287140",
    "end": "292900"
  },
  {
    "text": "developers being a really large target audience for them they reach their 10 milestone somewhat recently so we have a",
    "start": "292900",
    "end": "299080"
  },
  {
    "text": "stable I and many of the top apps are already starting to integrate or explore integration since the first time I gave",
    "start": "299080",
    "end": "306250"
  },
  {
    "text": "this stock the Gradle team has also announced official support for cotton and build scripts as well while it's",
    "start": "306250",
    "end": "312580"
  },
  {
    "text": "still in its infancy the dedication from the team and the official announcement means that going forward will see it",
    "start": "312580",
    "end": "318460"
  },
  {
    "text": "treated as a first class citizen because it's designed to work with android",
    "start": "318460",
    "end": "323680"
  },
  {
    "text": "mobile first in mind the bytecode that's generated by colin is a hundred percent compatible with the jvm six so it covers",
    "start": "323680",
    "end": "330100"
  },
  {
    "text": "that fragmentation problem that i mentioned earlier you don't really need to convert your entire project to Kotlin",
    "start": "330100",
    "end": "336970"
  },
  {
    "text": "to start using it you can use it right away because colin is fully interoperable with java you can intermix",
    "start": "336970",
    "end": "343210"
  },
  {
    "text": "them in the same project the language has its own standard runtime and this",
    "start": "343210",
    "end": "348729"
  },
  {
    "text": "library does need to be bundled with your application fortunately it's quite small coming in around 600 k last time I checked now if",
    "start": "348729",
    "end": "356139"
  },
  {
    "text": "you were to contrast this to the iOS world which many of you may be familiar with as well Swift has a very similar setup you need",
    "start": "356140",
    "end": "362380"
  },
  {
    "text": "a bundle Swift with your iOS application but it comes in around 10 megs for",
    "start": "362380",
    "end": "368350"
  },
  {
    "text": "android it's pretty important especially if we're going to consider targeting emerging markets that we need to keep",
    "start": "368350",
    "end": "373630"
  },
  {
    "text": "our appt binary small and fortunately Kotlin allows us to do that because",
    "start": "373630",
    "end": "380470"
  },
  {
    "text": "colin is statically typed as i mentioned earlier and it keeps memory allocation in mind we don't have the same type of",
    "start": "380470",
    "end": "386229"
  },
  {
    "text": "runtime overhead that we would be that we would have by using a dynamically typed language like Ruby this could be a",
    "start": "386229",
    "end": "393520"
  },
  {
    "text": "large constraint on Android wear the GC would be making that more problematic lastly colin is a modern language with",
    "start": "393520",
    "end": "400930"
  },
  {
    "text": "many awesome features that make development fun and you can use it on all of your android devices today",
    "start": "400930",
    "end": "406380"
  },
  {
    "text": "but more importantly Colin helps us with many of the constraints that java introduced that java android both",
    "start": "406380",
    "end": "413340"
  },
  {
    "text": "introduced by utilizing Collins type system for all safety it can help us",
    "start": "413340",
    "end": "418380"
  },
  {
    "text": "reduce easy to avoid no corner error exceptions and make our code much more maintainable column gives us a great way",
    "start": "418380",
    "end": "426210"
  },
  {
    "text": "to reduce the boilerplate code that's so synonymous with java it makes our code much more maintainable and approachable",
    "start": "426210",
    "end": "432330"
  },
  {
    "text": "for other developers the Android API is rely primarily on an architecture of",
    "start": "432330",
    "end": "437910"
  },
  {
    "text": "inheritance and although this works well for the teams at Google it puts the large larger burden on the app developer",
    "start": "437910",
    "end": "445199"
  },
  {
    "text": "especially when many of us seek an architecture of composition there are also many api's that require proper",
    "start": "445200",
    "end": "451410"
  },
  {
    "text": "ceremony to complete you have to call a number of methods in order just think about the steps required for",
    "start": "451410",
    "end": "457200"
  },
  {
    "text": "toasting saving sequel light transactions or using the media recorder often you have to initialize do your",
    "start": "457200",
    "end": "464100"
  },
  {
    "text": "work and then call a committer save and if you happen to miss one of those steps you're only going to discover that at",
    "start": "464100",
    "end": "469380"
  },
  {
    "text": "one time lastly while java is too verbose in my",
    "start": "469380",
    "end": "474750"
  },
  {
    "text": "opinion to define a maintainable build script I believe Colin is expressive and concise enough to compete with many",
    "start": "474750",
    "end": "480480"
  },
  {
    "text": "aspects of groovy the preferred build script language of of Gradle while providing much-needed type safety to",
    "start": "480480",
    "end": "486780"
  },
  {
    "text": "reduce errors and expedite the development of your tooling so we call",
    "start": "486780",
    "end": "492120"
  },
  {
    "text": "it has it brings a lot of cool features to the table we have higher order functions and properties and mix-ins and",
    "start": "492120",
    "end": "497340"
  },
  {
    "text": "there's a there's a lot of these and I'm only supposed to be up here for about 45 minutes so I'm just gonna go to a few of",
    "start": "497340",
    "end": "504270"
  },
  {
    "text": "these today that i think will be really promising and help with your tooling so",
    "start": "504270",
    "end": "510300"
  },
  {
    "text": "one of the most common exceptions and job development is the null pointer exception infamously known as the",
    "start": "510300",
    "end": "516150"
  },
  {
    "text": "billion-dollar mistake unfortunately job doesn't have a first clapper class representation of",
    "start": "516150",
    "end": "521880"
  },
  {
    "text": "something that may or may not be in all and we've seen many libraries and tooling try to address this in the past",
    "start": "521880",
    "end": "527100"
  },
  {
    "text": "with band-aids on top of java by having run time-based checks for all it makes the code much more susceptible even when",
    "start": "527100",
    "end": "533610"
  },
  {
    "text": "we're using those in all checks and having the potential value of null requires defensive programming",
    "start": "533610",
    "end": "539390"
  },
  {
    "text": "which leads to let much less maintainable code as well so here's our",
    "start": "539390",
    "end": "545270"
  },
  {
    "text": "first example to show Collins variable assignments you'll notice that Scotland uses a syntax that reverses the type a",
    "start": "545270",
    "end": "551959"
  },
  {
    "text": "name ordering for variable declaration in this case we'll get a compile-time exception on that second line as we're",
    "start": "551960",
    "end": "559129"
  },
  {
    "text": "not allowed to sign a sign all 2 VAR a however in this next example you'll note",
    "start": "559130",
    "end": "566000"
  },
  {
    "text": "the ? along with the Declaration this indicates to Colin that the value maybe not all and we'll take care of checking",
    "start": "566000",
    "end": "572030"
  },
  {
    "text": "that once we try to utilize the variable though we will see a compilation error as we needed to explicitly check for",
    "start": "572030",
    "end": "578930"
  },
  {
    "text": "null before using you may notice the two different ways of declaring the variable here with bar and valve and to clarify",
    "start": "578930",
    "end": "586970"
  },
  {
    "text": "Scotland uses bar to indicate that it's immutable variable well it uses Val to indicate indicate that it's an immutable",
    "start": "586970",
    "end": "593510"
  },
  {
    "text": "value in this last example of no ability we can see a few different formats to",
    "start": "593510",
    "end": "600350"
  },
  {
    "text": "check for null the first line of code you'll note the ? and use again with",
    "start": "600350",
    "end": "606200"
  },
  {
    "text": "that is declared any further method calls on that object will return all if the parent object is not and this",
    "start": "606200",
    "end": "612920"
  },
  {
    "text": "removes the need for us to do the nested if no checks in Java in the second line of code we follow a slightly different",
    "start": "612920",
    "end": "619850"
  },
  {
    "text": "format of utilizing all we specify a default value using a single expression",
    "start": "619850",
    "end": "625010"
  },
  {
    "text": "if else and in this last example we take advantage of the Elvis operator to",
    "start": "625010",
    "end": "630680"
  },
  {
    "text": "simplify the syntax of the previous examples let's move on to another cool",
    "start": "630680",
    "end": "636860"
  },
  {
    "text": "feature of Colin class properties in this example will define a class called",
    "start": "636860",
    "end": "641959"
  },
  {
    "text": "user and specify a member variable for the name using the syntax we put the member in line with the class name is",
    "start": "641960",
    "end": "648620"
  },
  {
    "text": "one approach although we could specify it below in the class as well which may be more familiar some of you although",
    "start": "648620",
    "end": "654740"
  },
  {
    "text": "this looks like a standard Java field this is a synthetic property this means that the getters and setters",
    "start": "654740",
    "end": "659810"
  },
  {
    "text": "are automatically generated for us and that's what's being used near the bottom with a slide that definitely helps clean",
    "start": "659810",
    "end": "665090"
  },
  {
    "text": "up some of that boilerplate code we can however override the default generated",
    "start": "665090",
    "end": "670970"
  },
  {
    "text": "getters and setters to specify custom log check by declaring a get a set method below the plot property definition",
    "start": "670970",
    "end": "677389"
  },
  {
    "text": "you'll notice that we change the syntax for the property declaration here as well from the previous slide this is",
    "start": "677389",
    "end": "683389"
  },
  {
    "text": "just another way of handling that in addition to using properties to clean up",
    "start": "683389",
    "end": "689000"
  },
  {
    "text": "boilerplate code college offers a concept called the data class this is designed to be a lightweight pojo and",
    "start": "689000",
    "end": "696680"
  },
  {
    "text": "all and do all of those things than standard pojo and java would normally need to take care of advising by adding",
    "start": "696680",
    "end": "703040"
  },
  {
    "text": "the data keyword in the Declaration we get this behavior will automatically",
    "start": "703040",
    "end": "708139"
  },
  {
    "text": "generate an equals and hashcode method for us so we no longer need to define that it will also create the two-string",
    "start": "708139",
    "end": "714529"
  },
  {
    "text": "method with all of the constructor parameters that we defined lastly it",
    "start": "714529",
    "end": "719750"
  },
  {
    "text": "will generate the copy method for us with default parameters so that you don't have to implement builders to copy",
    "start": "719750",
    "end": "725449"
  },
  {
    "text": "and create immutable pojos throughout your code base data classes do have many",
    "start": "725449",
    "end": "731089"
  },
  {
    "text": "limits as well for example they cannot extend another class or be abstract so i",
    "start": "731089",
    "end": "736310"
  },
  {
    "text": "definitely recommend looking up the restrictions of this in the cotton documentation to decide if it's right for you",
    "start": "736310",
    "end": "741680"
  },
  {
    "text": "let's move on to another example function literals or lambdas are a great",
    "start": "741680",
    "end": "748550"
  },
  {
    "text": "way to make code more readable and have come to be expected from Modern Languages today java 6 doesn't have support for these",
    "start": "748550",
    "end": "755240"
  },
  {
    "text": "but by using a framework like retro lambda that rewrites the bytecode from a",
    "start": "755240",
    "end": "760339"
  },
  {
    "text": "lambda java 7 or a job at lambda to a single abstract method is a great way",
    "start": "760339",
    "end": "766250"
  },
  {
    "text": "for us to get that in android today lucky for us we get it out of the box with Colin in this example we see it a",
    "start": "766250",
    "end": "773420"
  },
  {
    "text": "few different syntactical ways to write them they will infer the type from the definition so we can reference the",
    "start": "773420",
    "end": "779389"
  },
  {
    "text": "variables directly in the first example in a second with the old with only a",
    "start": "779389",
    "end": "785000"
  },
  {
    "text": "single parameter we can refer to it as the standard it notation similar to groovy or many other languages and we",
    "start": "785000",
    "end": "791930"
  },
  {
    "text": "can store the function literal in variables such that we can access it later when needed expanding on the function literal",
    "start": "791930",
    "end": "799940"
  },
  {
    "text": "concept call it also provides us with higher order functions or functions that take functions as parameters or return",
    "start": "799940",
    "end": "806270"
  },
  {
    "text": "them this is a very powerful technique to write clean readable code will get to see some more powerful examples of this",
    "start": "806270",
    "end": "812840"
  },
  {
    "text": "in real-world use cases for cleaning up android and Gradle code as soon as we understand the last concept required",
    "start": "812840",
    "end": "818780"
  },
  {
    "text": "that last concept that i want to talk about his extension functions calling",
    "start": "818780",
    "end": "824390"
  },
  {
    "text": "gives you the ability to add methods to existing types and this is very powerful and similar to other languages like C",
    "start": "824390",
    "end": "830720"
  },
  {
    "text": "sharp and it's a great way to replace the utility health at java has known to become we have a utah class representing",
    "start": "830720",
    "end": "837140"
  },
  {
    "text": "interactions with an object that's out of your control the syntax requires that",
    "start": "837140",
    "end": "842240"
  },
  {
    "text": "you just define the type . method name and the code interacts with that class as if it was owned by that class please",
    "start": "842240",
    "end": "849170"
  },
  {
    "text": "note that you cannot override existing methods of a class with a functioning with an extension function",
    "start": "849170",
    "end": "854839"
  },
  {
    "text": "another thing to note is that Colin only gives you access to the method that you",
    "start": "854840",
    "end": "860180"
  },
  {
    "text": "defined in a class where you define the function extension if you wanted to use it in other classes you would need to",
    "start": "860180",
    "end": "865850"
  },
  {
    "text": "explicitly imported from the class where you had to find it i mentioned earlier",
    "start": "865850",
    "end": "871370"
  },
  {
    "text": "that function that extension functions were a great way to wrote avoid that you tell Helen Java but also mentioned that",
    "start": "871370",
    "end": "877430"
  },
  {
    "text": "cotton is completely interoperable with java so what is this actually doing its",
    "start": "877430",
    "end": "883610"
  },
  {
    "text": "generating a class with a static method that intercepts calls to the object in Colin but in Java you can back you can",
    "start": "883610",
    "end": "890060"
  },
  {
    "text": "call that generated static you told directly Colin will assign a default name to the file based on the file name",
    "start": "890060",
    "end": "896029"
  },
  {
    "text": "but you can specify something custom by using the annotation here file jvm name",
    "start": "896030",
    "end": "901310"
  },
  {
    "text": "with the string for the file you wanted to group multiple of these extension functions in one you told class instead",
    "start": "901310",
    "end": "907790"
  },
  {
    "text": "of having one generated per you could use this other annotation and declare",
    "start": "907790",
    "end": "912889"
  },
  {
    "text": "the name and use the jvm multi file class annotation to do that this can be",
    "start": "912890",
    "end": "919490"
  },
  {
    "text": "really powerful and android here's the traditional way of saving an object into shared preferences in Java you can see",
    "start": "919490",
    "end": "925550"
  },
  {
    "text": "that it requires us to admit the preference editor put the object into the reference editor and then call apply",
    "start": "925550",
    "end": "931280"
  },
  {
    "text": "and this is prone for error as it requires the ceremony to befall the exact followed exactly and if we don't",
    "start": "931280",
    "end": "937340"
  },
  {
    "text": "then we don't save the value that we expect so how can we make this better",
    "start": "937340",
    "end": "945950"
  },
  {
    "text": "here's that same functionality but using the last three concepts that we talked about using and Colin extension",
    "start": "945950",
    "end": "951230"
  },
  {
    "text": "functions higher-order functions and function literals we add method edit to",
    "start": "951230",
    "end": "956720"
  },
  {
    "text": "the shared preference object that takes a function literal that is defined as another extension function of the editor",
    "start": "956720",
    "end": "961760"
  },
  {
    "text": "class this can be confusing at first but it's incredibly powerful and it allows any",
    "start": "961760",
    "end": "967069"
  },
  {
    "text": "function literal past n to behave as if it was a method on the shared preferences editor object",
    "start": "967070",
    "end": "973490"
  },
  {
    "text": "this allows us to use the code in a type-safe way knowing that the string is saved without having to worry about referencing the correct editor a caveat",
    "start": "973490",
    "end": "983420"
  },
  {
    "text": "to note though is that since colin is java 6 compatible using higher order functions imposes certain certain",
    "start": "983420",
    "end": "989600"
  },
  {
    "text": "runtime penalties each function is an object and it captures a closure these",
    "start": "989600",
    "end": "994910"
  },
  {
    "text": "variables that are accessed in the body of the function so now we have memory allocations both for the function object",
    "start": "994910",
    "end": "999980"
  },
  {
    "text": "and for the classes and the virtual calls to introduce runtime overhead as well but by adding the inline keyword",
    "start": "999980",
    "end": "1007870"
  },
  {
    "text": "and Colin to the function declaration we're telling the cotton compiler to compile the code in line as if we had to",
    "start": "1007870",
    "end": "1014590"
  },
  {
    "text": "find it the very first way that i showed in Java which is while prone day error",
    "start": "1014590",
    "end": "1019720"
  },
  {
    "text": "from a maintainability perspective much more performance for the machine so now our bytecode between the cotton version",
    "start": "1019720",
    "end": "1025990"
  },
  {
    "text": "and the java version is identical remember when I said that Colin doesn't add runtime overhead",
    "start": "1025990",
    "end": "1031810"
  },
  {
    "text": "well this is one of those features that really allows for that these cotton",
    "start": "1031810",
    "end": "1037750"
  },
  {
    "text": "features give us a powerful ability to start creating a dsl there's a school proof-of-concept library called and",
    "start": "1037750",
    "end": "1044139"
  },
  {
    "text": "co-written by the jetbrains team that allows you to clearly described android layouts using purely Collins without",
    "start": "1044140",
    "end": "1050860"
  },
  {
    "text": "having to use XML xml at all by utilizing higher-order functions you can write a clean android layout dsl you",
    "start": "1050860",
    "end": "1057760"
  },
  {
    "text": "may also notice that the syntax is starting to look quite similar to groovy so maybe now I've sold you on some of",
    "start": "1057760",
    "end": "1064720"
  },
  {
    "text": "the benefits of colin is a language and you can see how it could be useful for work in your Android app but introducing",
    "start": "1064720",
    "end": "1069759"
  },
  {
    "text": "that without further fragmentation to this to your code minutes you might have column in your app and mixing of mix of groovy and java your",
    "start": "1069760",
    "end": "1077230"
  },
  {
    "text": "build tools that's up to three languages jvm languages just to be thinking about and",
    "start": "1077230",
    "end": "1083320"
  },
  {
    "text": "humans aren't really that great context switching the matter really what you said what you think about yourself",
    "start": "1083320",
    "end": "1089470"
  },
  {
    "text": "studies show that were not great at it so this overhead is going to reduce developer productivity maybe we can use",
    "start": "1089470",
    "end": "1096429"
  },
  {
    "text": "Colin by bringing it to the next level in Gradle we could use in the build tool as well and i'm going to walk through",
    "start": "1096429",
    "end": "1102670"
  },
  {
    "text": "some small examples of many use case of a use case many of us have had how to",
    "start": "1102670",
    "end": "1108309"
  },
  {
    "text": "load api key information so that we can sign outgoing request to a web server and have been quite a few talks and blog",
    "start": "1108309",
    "end": "1115000"
  },
  {
    "text": "posts and sample projects to teach us using cotton in an android specifically so from now on I'll just be focusing",
    "start": "1115000",
    "end": "1120490"
  },
  {
    "text": "primarily on inside of cradle course to use Scotland we need to install it",
    "start": "1120490",
    "end": "1127120"
  },
  {
    "text": "it's quite simple to install using Gradle we had a bill time dependency and apply the plug-in and then we include",
    "start": "1127120",
    "end": "1132820"
  },
  {
    "text": "the standard library and runtime we can intermix . Katy files and the java files",
    "start": "1132820",
    "end": "1138220"
  },
  {
    "text": "and the groovy files also to know be sure to install the intelligence or Android studio Colin plug-in it'll make",
    "start": "1138220",
    "end": "1144700"
  },
  {
    "text": "your life a little bit easier can even help facilitate adding these dependencies and it has provided at java",
    "start": "1144700",
    "end": "1150940"
  },
  {
    "text": "to Kotlin converter may not produce the most idiomatic Colin but it's definitely a great start this get scotland in our",
    "start": "1150940",
    "end": "1158410"
  },
  {
    "text": "runtime code let's take a moment to make our build script even better using Colin as well the column Gradle support the",
    "start": "1158410",
    "end": "1165880"
  },
  {
    "text": "cotton support in Braille scripts specifically is still a work in progress at the moment the Gradle team first",
    "start": "1165880",
    "end": "1171850"
  },
  {
    "text": "unveiled Colin support for build scripts that great also met a few months ago but the benefits of cotton in the IDE will",
    "start": "1171850",
    "end": "1177940"
  },
  {
    "text": "now be much easier for us to write and maintain these build scripts i know i'm really excited for autocomplete in",
    "start": "1177940",
    "end": "1183400"
  },
  {
    "text": "cradle at this point the integration is somewhat limited though and it requires some workarounds here's an example that",
    "start": "1183400",
    "end": "1190600"
  },
  {
    "text": "I created that's a subset of the larger example in the cradle repo for Colin and I have",
    "start": "1190600",
    "end": "1196780"
  },
  {
    "text": "that link from the slides when those get posted you'll see that but if you look carefully at that previous example",
    "start": "1196780",
    "end": "1202870"
  },
  {
    "text": "you'll notice that there are a couple things that were a little bit off there's a few lines just didn't look quite right that's because to make Colin",
    "start": "1202870",
    "end": "1210320"
  },
  {
    "text": "work in an idiomatic way that most of us are familiar with from groovy and what",
    "start": "1210320",
    "end": "1215539"
  },
  {
    "text": "most Android developers are used to in general I to add all of these extension functions to get it to work some things",
    "start": "1215539",
    "end": "1221990"
  },
  {
    "text": "that I did hear created a block for the android tag so that we could use the Android dsl reference we wanted named",
    "start": "1221990",
    "end": "1229639"
  },
  {
    "text": "access to the release build since it statically typed in groovy when you type your bill type release brackets that's",
    "start": "1229640",
    "end": "1237080"
  },
  {
    "text": "actually internally resolving that in doing a look up with defined by name if we want that static compilation we have",
    "start": "1237080",
    "end": "1243110"
  },
  {
    "text": "to use an extension function to explicitly declare build type it's not awesome but that's one of the",
    "start": "1243110",
    "end": "1248480"
  },
  {
    "text": "workarounds that need to be done we also needed to access the default product flavor object directly if we",
    "start": "1248480",
    "end": "1255289"
  },
  {
    "text": "were just use the default config that groovy provides us or that Gradle provides us it returns the abstract",
    "start": "1255289",
    "end": "1262190"
  },
  {
    "text": "class so we'd have to do an instance of check and cast into something different which would be pretty gross so this",
    "start": "1262190",
    "end": "1267500"
  },
  {
    "text": "allows us to get around that a little bit as well also in standard groovy when using the Android build tools you'll",
    "start": "1267500",
    "end": "1274730"
  },
  {
    "text": "notice that you can set the min SDK and the compile-time sdk just using an integer well under the hood that's",
    "start": "1274730",
    "end": "1281299"
  },
  {
    "text": "actually converting that into an API level object so we also created a couple",
    "start": "1281299",
    "end": "1286399"
  },
  {
    "text": "extension functions to facilitate being able to take an integer and convert it into that you can definitely see that",
    "start": "1286400",
    "end": "1292010"
  },
  {
    "text": "it's a proof-of-concept however it goes to show that the entire Internet can be used in column and we can dig into some",
    "start": "1292010",
    "end": "1299059"
  },
  {
    "text": "examples now that we've moved past the script a little bit into work Kotlin shines without having to have these type",
    "start": "1299059",
    "end": "1304520"
  },
  {
    "text": "of workarounds and that's in the plugins so as your your build scale and you want",
    "start": "1304520",
    "end": "1310400"
  },
  {
    "text": "to share different logic between the different apps that you have you start building plugins it's colin and those",
    "start": "1310400",
    "end": "1316490"
  },
  {
    "text": "can be very productive so here's a common scenario that a lot of Android engineers would be familiar with",
    "start": "1316490",
    "end": "1321980"
  },
  {
    "text": "developer would want to sign an outgoing request with the consumer key and secret for authentication on the back end in",
    "start": "1321980",
    "end": "1328490"
  },
  {
    "text": "this example we define the key in secret and then we use them with a generic sdk let's focus on that API key part",
    "start": "1328490",
    "end": "1335720"
  },
  {
    "text": "specifically one obvious improvement that we can do to protect nice the code here is to have different",
    "start": "1335720",
    "end": "1340858"
  },
  {
    "text": "API keys for different cell types of flavors for example due to analytics you",
    "start": "1340859",
    "end": "1345869"
  },
  {
    "text": "may want a different consumer key and secret used for the developer release and the production release this wasn't",
    "start": "1345869",
    "end": "1351450"
  },
  {
    "text": "an SDK but your own web service you also want to find this staging and production credentials this way",
    "start": "1351450",
    "end": "1356608"
  },
  {
    "text": "potentially as well more interestingly what if you wanted to push this to an open source repo like",
    "start": "1356609",
    "end": "1361769"
  },
  {
    "text": "github or allow third-party developers or contractors to work on your source code and you didn't want to expose confidential information",
    "start": "1361769",
    "end": "1369239"
  },
  {
    "text": "ideally we'd have a proper separation of concerns and we have these keys provided to the application during the build",
    "start": "1369239",
    "end": "1374758"
  },
  {
    "text": "process from a secure location on the CIA machine this would meet the previous concern and give us the confidence that",
    "start": "1374759",
    "end": "1382229"
  },
  {
    "text": "when the developer pushed it open source repo that they didn't accidentally leaked information this is an example of",
    "start": "1382229",
    "end": "1389460"
  },
  {
    "text": "where the Gradle tooling can really shine what we have here is the android Gradle plug-in dsl that allows us to add",
    "start": "1389460",
    "end": "1395999"
  },
  {
    "text": "a constant to the generated build config class that's accessible in the Android source code were able to define",
    "start": "1395999",
    "end": "1402509"
  },
  {
    "text": "different keys and secrets for various built types and flavors both and the syntax is very straightforward you just",
    "start": "1402509",
    "end": "1408779"
  },
  {
    "text": "declare the type followed by the name and the value to be accessed so now we have the keys provided to",
    "start": "1408779",
    "end": "1414450"
  },
  {
    "text": "Gradle to the class that's broadly accessible in our Android source code although this allows us to provide",
    "start": "1414450",
    "end": "1420028"
  },
  {
    "text": "different keys for different build types meeting one of our previous requirements we still haven't been able to achieve",
    "start": "1420029",
    "end": "1426389"
  },
  {
    "text": "our other goal of separating the API keys from the main repository so let's take a look at some other techniques",
    "start": "1426389",
    "end": "1431970"
  },
  {
    "text": "that we can use with Gradle to help us their rail provides a number of",
    "start": "1431970",
    "end": "1439529"
  },
  {
    "text": "mechanisms to provider inject values into the build process there's the Gradle properties or sometimes referred",
    "start": "1439529",
    "end": "1445169"
  },
  {
    "text": "to as the project properties of Dash P this lives in various locations starting in the local project defined as the",
    "start": "1445169",
    "end": "1451440"
  },
  {
    "text": "Gradle . properties file but also including the user's home in the home / . Gradle great about properties that",
    "start": "1451440",
    "end": "1459359"
  },
  {
    "text": "lives outside of your repo there's also the standard standard system variables set for running that running on the",
    "start": "1459359",
    "end": "1466559"
  },
  {
    "text": "terminal with dash D lastly you can always load your own custom property file and then use those values and",
    "start": "1466559",
    "end": "1473309"
  },
  {
    "text": "rest of your build lifecycle and practice the choice varies from team to team it's largely driven by your own",
    "start": "1473309",
    "end": "1479340"
  },
  {
    "text": "teams policies working process and structure what CI system you use what your onboarding process like for new and",
    "start": "1479340",
    "end": "1485190"
  },
  {
    "text": "new engineers and other minor constraints once we have the property accessible",
    "start": "1485190",
    "end": "1490559"
  },
  {
    "text": "this get prop function uses both the Gradle properties and the system variables and that's the order of",
    "start": "1490559",
    "end": "1497070"
  },
  {
    "text": "precedence and how they're resolved you can have your development key for your dad builds but when it comes to the",
    "start": "1497070",
    "end": "1503248"
  },
  {
    "text": "CI build you can have your system variable set by build engineer DevOps to",
    "start": "1503249",
    "end": "1508559"
  },
  {
    "text": "overwrite that to avoid accidental check ends and this could protect confidential",
    "start": "1508559",
    "end": "1513600"
  },
  {
    "text": "information for your organization and here so we could use that get proper function in the build-up Gradle whatever",
    "start": "1513600",
    "end": "1521008"
  },
  {
    "text": "that has been set to inject that into the bill can fit class now we've met the capability to have both of our",
    "start": "1521009",
    "end": "1527879"
  },
  {
    "text": "requirements that we mentioned earlier we have the separation of concerns and we're being able to inject that into the different types",
    "start": "1527879",
    "end": "1533669"
  },
  {
    "text": "however if you have multiple keys it can be tedious to keep track of all the different environment variables",
    "start": "1533669",
    "end": "1539669"
  },
  {
    "text": "required to setup a new development environment or spin up a new CI box you might want to create a custom",
    "start": "1539669",
    "end": "1545009"
  },
  {
    "text": "properties file and leave the Gradle that properties checked in for in sensitive information like the artifact",
    "start": "1545009",
    "end": "1551369"
  },
  {
    "text": "ID version number other things like that and then you may need to file another",
    "start": "1551369",
    "end": "1557850"
  },
  {
    "text": "reason you might want a properties file like this is if you use their party SDKs that rely on these for pulling out",
    "start": "1557850",
    "end": "1563820"
  },
  {
    "text": "client ID or information like that simply you just wanna onboard new engineers with your own Gradle plug-in",
    "start": "1563820",
    "end": "1569460"
  },
  {
    "text": "and simplify that process as you scale out your team so if you wanted to do that we added to the . get ignore and",
    "start": "1569460",
    "end": "1575789"
  },
  {
    "text": "then we'll go ahead and we'll we'll show some code for generating some custom property files from that",
    "start": "1575789",
    "end": "1580830"
  },
  {
    "text": "let's create a custom task that can be defined build Gradle we get all the",
    "start": "1580830",
    "end": "1586169"
  },
  {
    "text": "values we need and then we write them into the file for the build you a job engineer that's not very familiar with",
    "start": "1586169",
    "end": "1592049"
  },
  {
    "text": "groovy without put stream will be of interest to you hear an extension to the",
    "start": "1592049",
    "end": "1597629"
  },
  {
    "text": "file class implemented by groovy that just wraps opening a file and reading the output stream conceptually it's very",
    "start": "1597629",
    "end": "1604110"
  },
  {
    "text": "similar to the cotton extension functions function extensions groovy like Scotland",
    "start": "1604110",
    "end": "1609930"
  },
  {
    "text": "also does not have checked exceptions so there's no need for a try-catch here so",
    "start": "1609930",
    "end": "1616649"
  },
  {
    "text": "now all you need to do is run this task once for whenever you have a new environment a new developer additional keys if you add a custom property to the",
    "start": "1616650",
    "end": "1623460"
  },
  {
    "text": ". getting more file you can push this code to a public repo as well without concern your team probably has more than",
    "start": "1623460",
    "end": "1629940"
  },
  {
    "text": "one app though maybe for consistency you want to share some of this code you can make sure every app is set up in the",
    "start": "1629940",
    "end": "1635070"
  },
  {
    "text": "same way even better you want to read this process for other external apps so",
    "start": "1635070",
    "end": "1641490"
  },
  {
    "text": "let's make this more consistent for all your apps through building a great plugin the Gradle plug-in has three",
    "start": "1641490",
    "end": "1649139"
  },
  {
    "text": "basic ingredients that I'm going to be talking about today and the first is the task typically used to represent an",
    "start": "1649140",
    "end": "1655230"
  },
  {
    "text": "action triggered from the command line or another task you can also extend the",
    "start": "1655230",
    "end": "1660480"
  },
  {
    "text": "project object for various things some examples of providing values from the build-up cradle or a function to the",
    "start": "1660480",
    "end": "1667080"
  },
  {
    "text": "bill . Gradle this is the land object that you normally see in your build.gradle files lastly the plug-in itself is used to",
    "start": "1667080",
    "end": "1676320"
  },
  {
    "text": "bind the previous components that we just talked about into the Gradle lifecycle and this is generally the business logic of your plugin that we",
    "start": "1676320",
    "end": "1682860"
  },
  {
    "text": "need to talk about a very simple way to create a custom task is by extending the",
    "start": "1682860",
    "end": "1688440"
  },
  {
    "text": "default task class functions annotated with that task action will be called",
    "start": "1688440",
    "end": "1693630"
  },
  {
    "text": "when the task is executed create file function here contains the logic that we wrote values into the custom property",
    "start": "1693630",
    "end": "1699990"
  },
  {
    "text": "file with some generalization to allow for reusability this task requires key",
    "start": "1699990",
    "end": "1705990"
  },
  {
    "text": "and output file to be provided so that the plug-in consumer supplies their own lists of the keys and the path to the",
    "start": "1705990",
    "end": "1711840"
  },
  {
    "text": "file that they want to write because this code will sit outside of the bill . Gradle we could have written in java",
    "start": "1711840",
    "end": "1718410"
  },
  {
    "text": "let's do a simple example to demonstrate why I think groovier Kotlin would be preferable to java in this example this",
    "start": "1718410",
    "end": "1726390"
  },
  {
    "text": "is what it looks like in Java as you can see it's a lot more ugly than the groovy",
    "start": "1726390",
    "end": "1731550"
  },
  {
    "text": "version that we just looked at includes additional try-catch all checks and",
    "start": "1731550",
    "end": "1736919"
  },
  {
    "text": "while java developers acclimate overtime to seeing that and kinda get out and looking at the business logic it actively discourages many new",
    "start": "1736920",
    "end": "1743890"
  },
  {
    "text": "developers from approaching the code base especially when they're coming from different languages how many of you have opened up an",
    "start": "1743890",
    "end": "1750190"
  },
  {
    "text": "objective-c file and had a hard time looking past all the brackets that's the",
    "start": "1750190",
    "end": "1756490"
  },
  {
    "text": "exact same feeling that non java developers get when they look at java code like this",
    "start": "1756490",
    "end": "1763539"
  },
  {
    "text": "unfortunately it's a barrier for entry and I believe Colin can help us out with that for dramatic effect",
    "start": "1763540",
    "end": "1770770"
  },
  {
    "text": "I'll show you what it looks like if we just commented out all that ceremonial code all that boilerplate and this is about as concise as the group aversion",
    "start": "1770770",
    "end": "1777669"
  },
  {
    "text": "and as you can see it's much easier to follow along what's going on now that",
    "start": "1777670",
    "end": "1783220"
  },
  {
    "text": "we've followed the small rabbit hole down let's get back on track with our plug-in example to continue along with",
    "start": "1783220",
    "end": "1790419"
  },
  {
    "text": "the task another important part of it is the defined inputs and outputs and put it",
    "start": "1790420",
    "end": "1795430"
  },
  {
    "text": "the Gradle annotation that marks the field is an input task to be completed and output file is another Gradle",
    "start": "1795430",
    "end": "1800680"
  },
  {
    "text": "annotation that's declared in an output of the task for this file there",
    "start": "1800680",
    "end": "1805720"
  },
  {
    "text": "particularly important for incremental building for the great land for the Gradle clean task to empower proper",
    "start": "1805720",
    "end": "1811630"
  },
  {
    "text": "caching and fast builds for the consumers of this plugin to make it",
    "start": "1811630",
    "end": "1818080"
  },
  {
    "text": "easier for plug-in consumers to configure the task will provide an extension extension is a simple class",
    "start": "1818080",
    "end": "1824410"
  },
  {
    "text": "that allows the plug-in consumer to provide the certain data required to run the plugin for example it's a great",
    "start": "1824410",
    "end": "1832090"
  },
  {
    "text": "little so it's primarily inside of the Gradle plug-in dsl so this is what you're used to and an example of this is",
    "start": "1832090",
    "end": "1838300"
  },
  {
    "text": "a using a pogo or a groovy version of a POJO and this gives us the functionality",
    "start": "1838300",
    "end": "1844179"
  },
  {
    "text": "to create that lambda now these data members at compile time will be provided",
    "start": "1844180",
    "end": "1849190"
  },
  {
    "text": "with getters and setters similar to the synthetic properties and Colin to make",
    "start": "1849190",
    "end": "1854860"
  },
  {
    "text": "it more idiomatic will provide will also provide the key file to shortcut assignment to file you can add the get",
    "start": "1854860",
    "end": "1860740"
  },
  {
    "text": "proper function here in the extensions so the function can be available to any project that applies our plug-in and",
    "start": "1860740",
    "end": "1868210"
  },
  {
    "text": "lastly the plug-in itself that will help us find it integrate these components into our build lifecycle",
    "start": "1868210",
    "end": "1874029"
  },
  {
    "text": "first we want to add our extension into the project object by using the extensions properly property",
    "start": "1874029",
    "end": "1880989"
  },
  {
    "text": "this allows us to access the provided data by the plug-in consumer and allows them to use its syntax and they're built",
    "start": "1880989",
    "end": "1886929"
  },
  {
    "text": "the plug in class interacts a lot with",
    "start": "1886929",
    "end": "1895090"
  },
  {
    "text": "the project object and the Gradle provides a configuration function in the project object to allow for a more",
    "start": "1895090",
    "end": "1900219"
  },
  {
    "text": "concise syntax by inferring the project object will be used in the following closure you can see the second line here",
    "start": "1900219",
    "end": "1908138"
  },
  {
    "text": "product extensions for more concise example this can be inferred to simply can be inferred to simply as extensions",
    "start": "1908139",
    "end": "1914858"
  },
  {
    "text": "with the configure closure which performs exactly like the first example another important part of the plugins is",
    "start": "1914859",
    "end": "1923320"
  },
  {
    "text": "to make the task available to the project the after evaluate closure means",
    "start": "1923320",
    "end": "1928450"
  },
  {
    "text": "that if you want the block of code to be called once all the initialization phase of Gradle has been completed",
    "start": "1928450",
    "end": "1933489"
  },
  {
    "text": "let's say that we only want to add the task if the keys have actually been assigned and that is we do in the after",
    "start": "1933489",
    "end": "1938799"
  },
  {
    "text": "evaluating closure to allow the plug-in consumers setting it in their bill . Gradle here we can see how one would use",
    "start": "1938799",
    "end": "1946089"
  },
  {
    "text": "that plug that plug in your build.gradle script so there you have it a greater",
    "start": "1946089",
    "end": "1951429"
  },
  {
    "text": "plugin in groovy simplifying your use of the web api keys now let's see what it would look like if we try to convert",
    "start": "1951429",
    "end": "1957639"
  },
  {
    "text": "that into Colin here's the syntax that you should already be familiar with from the earlier introduction that I gave to",
    "start": "1957639",
    "end": "1964089"
  },
  {
    "text": "the language we have two fields key that our list and file that is knowledgeable",
    "start": "1964089",
    "end": "1969580"
  },
  {
    "text": "now we don't need it to be knowledgeable per se but for this demo I want to make it knowledgeable to show you how to deal",
    "start": "1969580",
    "end": "1975460"
  },
  {
    "text": "with the interoperability of java api is that are by nature knowledgeable so Colin needs to be able to interact with",
    "start": "1975460",
    "end": "1981820"
  },
  {
    "text": "that API know that that's inaudible coming in please pay attention to the first line the open here declares that",
    "start": "1981820",
    "end": "1988658"
  },
  {
    "text": "this class is not final by default all classes and Colin are final and that'll be an issue when it",
    "start": "1988659",
    "end": "1995499"
  },
  {
    "text": "comes to building this in Gradle because the task needs to explicitly be extended from the Gradle and provides a proxy and",
    "start": "1995499",
    "end": "2002908"
  },
  {
    "text": "we need to market is open such a great all can inherit from it that its own logic is that version of",
    "start": "2002909",
    "end": "2009710"
  },
  {
    "text": "create file function when translated line-by-line similar to groovy Colin",
    "start": "2009710",
    "end": "2014750"
  },
  {
    "text": "does not have checked exceptions so any uncaught exception will just be elevated to the caller here we have another",
    "start": "2014750",
    "end": "2020960"
  },
  {
    "text": "version that's a bit more idiomatic we've replaced the for loop with a for",
    "start": "2020960",
    "end": "2026269"
  },
  {
    "text": "each and function literal but what's more interesting here is this last line here we're using the double bang",
    "start": "2026270",
    "end": "2033230"
  },
  {
    "text": "operator remember how key file was knowledgeable well what we're saying here with the double bang operator is",
    "start": "2033230",
    "end": "2039530"
  },
  {
    "text": "that Keith key file isn't all just throw the null pointer exception and that's",
    "start": "2039530",
    "end": "2044659"
  },
  {
    "text": "another way to deal with multiple objects and job in with multiple objects coming from java here's our version of",
    "start": "2044660",
    "end": "2053780"
  },
  {
    "text": "the pojo as the Gradle extension and this uses the data classroom Colin now",
    "start": "2053780",
    "end": "2062780"
  },
  {
    "text": "we're looking at the plug in class similar to before we want to add the extension to the project and again we",
    "start": "2062780",
    "end": "2070639"
  },
  {
    "text": "want to use the after evaluate here to allow the extension to be set in the build-up cradle well this is cleaner than the java",
    "start": "2070640",
    "end": "2076700"
  },
  {
    "text": "example that I showed earlier at this stage it still looks quite verbose and I'd love to further improve on that some",
    "start": "2076700",
    "end": "2084440"
  },
  {
    "text": "examples the fight to get my name with the holder you're looking that up that's",
    "start": "2084440",
    "end": "2090440"
  },
  {
    "text": "just not going to autocomplete so can we do to simplify this by utilizing a",
    "start": "2090440",
    "end": "2096379"
  },
  {
    "text": "couple extension functions we can assign a configure function to the project in the first line extensions and in",
    "start": "2096380",
    "end": "2103970"
  },
  {
    "text": "extensions on the second line one will be able to make the code alot more concise and comfortable to those coming",
    "start": "2103970",
    "end": "2109790"
  },
  {
    "text": "from groovy so here's the example of how it",
    "start": "2109790",
    "end": "2114860"
  },
  {
    "text": "looks like before and after we use extension functions to clean it up you can see in the second example how we",
    "start": "2114860",
    "end": "2120319"
  },
  {
    "text": "move towards a more declarative and groovy like syntax so now we have the",
    "start": "2120320",
    "end": "2127280"
  },
  {
    "text": "final version of our plug-in Colin just like with the groovy version we add extension the after evaluation is done",
    "start": "2127280",
    "end": "2134600"
  },
  {
    "text": "to create a task to create a file based on the extension date that was supplied declarative concise",
    "start": "2134600",
    "end": "2141940"
  },
  {
    "text": "and familiar groovy developers but it's consistent with the cotton that is",
    "start": "2141940",
    "end": "2147250"
  },
  {
    "text": "potentially already in your Android app if you use panko or similar patterns in your Android app all of your code can",
    "start": "2147250",
    "end": "2153910"
  },
  {
    "text": "start to look like this as well I believe this reduces the context switching the overhead and it allows for",
    "start": "2153910",
    "end": "2160180"
  },
  {
    "text": "faster move between different layers of the stack and I've run into a large case",
    "start": "2160180",
    "end": "2167440"
  },
  {
    "text": "of developers that have a little bit of anxiety and hopping into the build tool incoming from android apps and I hope that something like this can start to",
    "start": "2167440",
    "end": "2172809"
  },
  {
    "text": "make that a little more approachable we've talked about a lot of info here today there's some great resources on",
    "start": "2172810",
    "end": "2179710"
  },
  {
    "text": "the web to help you dig deeper into the language first is the official docs there a great learning resource with a",
    "start": "2179710",
    "end": "2186640"
  },
  {
    "text": "ton of info I'd recommend starting their the column Cohens are a great way to learn and play",
    "start": "2186640",
    "end": "2192099"
  },
  {
    "text": "with Colin your browser it's an interactive ide echoes that cool plugin",
    "start": "2192100",
    "end": "2197410"
  },
  {
    "text": "that i showed earlier it's open source you can dig into that it's kinda cold replace xml layouts I wouldn't",
    "start": "2197410",
    "end": "2204820"
  },
  {
    "text": "necessarily using that in production i know that some apps are but it's kinda",
    "start": "2204820",
    "end": "2209829"
  },
  {
    "text": "cool to see how that evolves is also the official Gradle repo that has examples",
    "start": "2209830",
    "end": "2215710"
  },
  {
    "text": "of using cotton and build scripts now there's another talk given by jeff",
    "start": "2215710",
    "end": "2221590"
  },
  {
    "text": "gordon actually last year door to have that dives a lot deeper and using Colin and android development i recommend",
    "start": "2221590",
    "end": "2226810"
  },
  {
    "text": "watching that there's also been a lot of other great Colin talks coming out of the android seen recently if you wanted more information on using",
    "start": "2226810",
    "end": "2232930"
  },
  {
    "text": "that in android lastly this sample Gradle plug-in is open-source this one",
    "start": "2232930",
    "end": "2240099"
  },
  {
    "text": "that we bought today and Scotland version lives in this repo on github these are all clickable links from the",
    "start": "2240100",
    "end": "2245260"
  },
  {
    "text": "slides will be shared the more people use and contribute to Colin the faster",
    "start": "2245260",
    "end": "2250570"
  },
  {
    "text": "we can all have a modern language for our day jobs since Google may take awhile to officially sanction cotton",
    "start": "2250570",
    "end": "2256030"
  },
  {
    "text": "cotton for android if they ever do it's up to us in the community to drive the best practices forward while google",
    "start": "2256030",
    "end": "2262660"
  },
  {
    "text": "owns Android Open Source ecosystem and we are all responsible for making it",
    "start": "2262660",
    "end": "2267730"
  },
  {
    "text": "better can take some questions now and if you don't want to say them out loud out then I'm happy to talk afterwards as",
    "start": "2267730",
    "end": "2274000"
  },
  {
    "text": "well thank you for your time today very",
    "start": "2274000",
    "end": "2284800"
  },
  {
    "text": "much time we got one question from the apps and that's out",
    "start": "2284800",
    "end": "2290560"
  },
  {
    "text": "we're cuddling has support for lint in Android studio right now on the landing",
    "start": "2290560",
    "end": "2296109"
  },
  {
    "text": "tooling is a very telling in general is an awesome i'm jake today introduced and",
    "start": "2296110",
    "end": "2301510"
  },
  {
    "text": "support in 104 it's somewhat recent one of three so",
    "start": "2301510",
    "end": "2307089"
  },
  {
    "text": "it'sit's reason but i don't think there's a lot of out-of-the-box left",
    "start": "2307090",
    "end": "2312490"
  },
  {
    "text": "tooling for the things in common that you might want to be checking for so just be the android lengths that you don't know whether any questions from",
    "start": "2312490",
    "end": "2321490"
  },
  {
    "text": "the audience surprised no one's asking",
    "start": "2321490",
    "end": "2326920"
  },
  {
    "text": "me about the downsides of college you know maybe you could do something whether I well I mean it'sit's not the",
    "start": "2326920",
    "end": "2333790"
  },
  {
    "text": "first party tooling that by the Android team so it's definitely running a little slower",
    "start": "2333790",
    "end": "2339250"
  },
  {
    "text": "all times are slower they're still think eNOS in the IDE if you're using an",
    "start": "2339250",
    "end": "2345700"
  },
  {
    "text": "alternative build system like fuck you're gonna have some issues getting it running it's definitely a fast-moving",
    "start": "2345700",
    "end": "2351370"
  },
  {
    "text": "environment so the tooling will get there but it's definitely a work in progress so we see something that you",
    "start": "2351370",
    "end": "2358990"
  },
  {
    "text": "would you try to absolutely will absolutely guys in the corner",
    "start": "2358990",
    "end": "2364359"
  },
  {
    "text": "no I mean for us we've had multiple teams in uber that have been been investigating it using it in testing",
    "start": "2364360",
    "end": "2370210"
  },
  {
    "text": "different things for a little while I know there's been plenty of other teams pinterest has some of their code written",
    "start": "2370210",
    "end": "2375550"
  },
  {
    "text": "in it I no squares worked in column a little bit on some of their stuff it's definitely up-and-coming and it's going",
    "start": "2375550",
    "end": "2382660"
  },
  {
    "text": "to be a great way to put in your apps but it's definitely since it's still evolving is an ecosystem the tools",
    "start": "2382660",
    "end": "2388750"
  },
  {
    "text": "coming up around it it's something to be thoughtful about the migration okay",
    "start": "2388750",
    "end": "2393970"
  },
  {
    "text": "thank you time please give him a hand and remember to rate decision",
    "start": "2393970",
    "end": "2402870"
  }
]