[
  {
    "start": "0",
    "end": "173000"
  },
  {
    "text": "so most of my career I've been a developer and an architect but in the",
    "start": "8330",
    "end": "14040"
  },
  {
    "text": "early 2000s through a somewhat bizarre and slightly desperate set of circumstances I made a trip into",
    "start": "14040",
    "end": "22160"
  },
  {
    "text": "operations and I lived in operations for a while and in fact I lived in a part of",
    "start": "22160",
    "end": "28980"
  },
  {
    "text": "operations where I wasn't just responsible for the availability of systems I was responsible for the",
    "start": "28980",
    "end": "34200"
  },
  {
    "text": "availability of systems that I didn't write I had to keep other people's code running and get the wake-up call when",
    "start": "34200",
    "end": "41040"
  },
  {
    "text": "their code failed in the middle of the night my initial reaction was oh I've",
    "start": "41040",
    "end": "47640"
  },
  {
    "text": "got this I've been running stuff in production for a long time no problem and then after a few weeks reality set",
    "start": "47640",
    "end": "54780"
  },
  {
    "text": "in and I started to realize that almost all of the production failures we were dealing with had nothing to do with",
    "start": "54780",
    "end": "61860"
  },
  {
    "text": "hardware and nothing to do with the network they were divided roughly into two categories one was operator error",
    "start": "61860",
    "end": "68909"
  },
  {
    "text": "and usually sort of an induced error because things were misleading or ambiguous and the other was software",
    "start": "68909",
    "end": "75990"
  },
  {
    "text": "defects operator error that's a separate topic for a different kind of conference",
    "start": "75990",
    "end": "81300"
  },
  {
    "text": "a lot of interesting stuff around there but the software defects are something that we ought to be able to do something",
    "start": "81300",
    "end": "87180"
  },
  {
    "text": "about so I was one of the few people in operations who had a background in",
    "start": "87180",
    "end": "92760"
  },
  {
    "text": "development and could look at the software defects dig down to the individual lines of source code and send",
    "start": "92760",
    "end": "99120"
  },
  {
    "text": "my bug reports with patches and fixes back to the development teams and I",
    "start": "99120",
    "end": "104970"
  },
  {
    "text": "found that these problems came in categories or types I started to see",
    "start": "104970",
    "end": "112400"
  },
  {
    "text": "recurring situations commonly recreated problems this is actually a hopeful",
    "start": "112400",
    "end": "119610"
  },
  {
    "text": "discovery because if problems come in types then maybe we can find categorical",
    "start": "119610",
    "end": "125760"
  },
  {
    "text": "solutions for those types of problems so I took my my experiences of you know",
    "start": "125760",
    "end": "132659"
  },
  {
    "text": "living in another field and sort of being in a foreign country for a while and I tried to bring them back into the",
    "start": "132659",
    "end": "138930"
  },
  {
    "text": "development world with this book release it which is all about you know what do we",
    "start": "138930",
    "end": "144060"
  },
  {
    "text": "do to make our software run in production how does it how do you get it to survive more than just Hugh a how do",
    "start": "144060",
    "end": "150780"
  },
  {
    "text": "you survive contact with the real world and as I got into this I got in touch",
    "start": "150780",
    "end": "156450"
  },
  {
    "text": "with some of the long and rich discipline of reliability engineering in",
    "start": "156450",
    "end": "161850"
  },
  {
    "text": "other areas mechanical and electrical and civil engineering and so on so I want to start by providing just a little",
    "start": "161850",
    "end": "168870"
  },
  {
    "text": "bit of terminology a couple of definitions the first is availability so",
    "start": "168870",
    "end": "174660"
  },
  {
    "start": "173000",
    "end": "233000"
  },
  {
    "text": "what does it mean for something to be available it's the probability that the system is operating at time T so when I",
    "start": "174660",
    "end": "181530"
  },
  {
    "text": "try to do something is the system going to successfully complete that thing now",
    "start": "181530",
    "end": "187350"
  },
  {
    "text": "notice this doesn't talk about servers being up and running it doesn't talk about hardware being alive or networks",
    "start": "187350",
    "end": "193050"
  },
  {
    "text": "functioning it actually talks about being able to complete the mission that I'm giving it so if I'm trying to do a",
    "start": "193050",
    "end": "198990"
  },
  {
    "text": "business process I can complete the business process if I'm doing a transaction I can do a transaction and so on now availability is not something",
    "start": "198990",
    "end": "207060"
  },
  {
    "text": "you can directly control it's the result it's an output variable it's a dependent",
    "start": "207060",
    "end": "213090"
  },
  {
    "text": "variable based on your ability to create stability in your system and stability",
    "start": "213090",
    "end": "219209"
  },
  {
    "text": "is the architectural characteristic that allows you to maintain availability in",
    "start": "219209",
    "end": "224310"
  },
  {
    "text": "the face of outrageous fortune the slings and arrows of faults and errors",
    "start": "224310",
    "end": "229970"
  },
  {
    "text": "now just a little more terminology when I say fault what I'm talking about is an",
    "start": "229970",
    "end": "235020"
  },
  {
    "start": "233000",
    "end": "396000"
  },
  {
    "text": "incorrect internal state in your application so a fault arises in your",
    "start": "235020",
    "end": "240630"
  },
  {
    "text": "application through one of two ways one is that you've got a latent defect and that defect creates an incorrect",
    "start": "240630",
    "end": "246989"
  },
  {
    "text": "internal state the other place that a fault can enter your system is through the perimeter through interfaces into",
    "start": "246989",
    "end": "253770"
  },
  {
    "text": "your system bad data that you're not correctly checking for you might call that a defect of omission malformed",
    "start": "253770",
    "end": "262220"
  },
  {
    "text": "network packets are a great place to see faults being injected now a fault is not",
    "start": "262220",
    "end": "268680"
  },
  {
    "text": "necessarily that bad faults do happen there are two broad",
    "start": "268680",
    "end": "275490"
  },
  {
    "text": "schools of thought on how you deal with faults one is fault tolerance means more",
    "start": "275490",
    "end": "280530"
  },
  {
    "text": "or less exactly what it says you can tolerate faults and recover you can repair the incorrect internal state and",
    "start": "280530",
    "end": "287280"
  },
  {
    "text": "get back to a nominal operating state the other approach is fault intolerance",
    "start": "287280",
    "end": "293539"
  },
  {
    "text": "fault intolerance basically says as soon as I detect an incorrect internal state",
    "start": "293539",
    "end": "298770"
  },
  {
    "text": "exit terminate the fault intolerant school says there's no state as clean as",
    "start": "298770",
    "end": "305729"
  },
  {
    "text": "your initial startup so the best thing to do is to exit and let somebody else start you back up this is the school of",
    "start": "305729",
    "end": "312270"
  },
  {
    "text": "thought that we see in airline or actor based systems fault tolerance tends to",
    "start": "312270",
    "end": "318569"
  },
  {
    "text": "be the state you see or they approach you see in languages with exceptions like Java c-sharp Scala Ruby etc now the",
    "start": "318569",
    "end": "329250"
  },
  {
    "text": "reason that we do any of these approaches is because we want to prevent a fault from creating an error the error",
    "start": "329250",
    "end": "335940"
  },
  {
    "text": "is when the fault becomes observably incorrect so fault can be latent in your",
    "start": "335940",
    "end": "342900"
  },
  {
    "text": "application for a long time but if nobody ever sees it it doesn't really matter it's a haizen bug the error is when you",
    "start": "342900",
    "end": "351539"
  },
  {
    "text": "actually produce incorrect output or you start taking behaviors that you would normally not take so maybe it's not an",
    "start": "351539",
    "end": "359669"
  },
  {
    "text": "output but if your system suddenly begins hammering another remote system with excessive requests that's an error even",
    "start": "359669",
    "end": "367770"
  },
  {
    "text": "though it's not really an output being produced some errors lead to failures so",
    "start": "367770",
    "end": "375120"
  },
  {
    "text": "failure is a loss of availability you can no longer accomplish the mission that your system is meant to accomplish",
    "start": "375120",
    "end": "380430"
  },
  {
    "text": "and failure is what we really most want to avoid so within this framework we're",
    "start": "380430",
    "end": "387780"
  },
  {
    "text": "going to look at some of those recurring patterns that I observed that create",
    "start": "387780",
    "end": "393770"
  },
  {
    "text": "failures on a frequent basis now I refer to these as anti patterns so if a",
    "start": "393770",
    "end": "399060"
  },
  {
    "start": "396000",
    "end": "493000"
  },
  {
    "text": "pattern is a solution to a problem in a context an anti-pattern is simply a",
    "start": "399060",
    "end": "404219"
  },
  {
    "text": "solution to a problem in a context that produces a worse context as a result",
    "start": "404219",
    "end": "409690"
  },
  {
    "text": "it's something that people rediscover or recreate a lot intentionally or otherwise but we don't like it it",
    "start": "409690",
    "end": "416110"
  },
  {
    "text": "produces outcomes that we'd rather not have so the first and most important I'm",
    "start": "416110",
    "end": "422139"
  },
  {
    "text": "only doing a subset of the anti-patterns because the the whole thing takes about three hours and I definitely don't have",
    "start": "422139",
    "end": "428560"
  },
  {
    "text": "that much time so I'm going to give you the most important ones by far the single most important one is integration",
    "start": "428560",
    "end": "435280"
  },
  {
    "text": "points an integration point is any place where your application makes an out of process call so you're talking over a",
    "start": "435280",
    "end": "441100"
  },
  {
    "text": "socket a pipe maybe you're forking a new process remote procedure calls all of these",
    "start": "441100",
    "end": "447940"
  },
  {
    "text": "things are out to destroy your system you should look at every integration point as an evil to be avoided if",
    "start": "447940",
    "end": "455229"
  },
  {
    "text": "possible and contained if not possible and I'm going to show you an example of",
    "start": "455229",
    "end": "460840"
  },
  {
    "text": "how even your friendly neighborhood database is out to get you now most of you have probably encountered things",
    "start": "460840",
    "end": "467139"
  },
  {
    "text": "like database deadlocks right you've got two threads one's holding a lock needs another lock the other one holds that lock needs that",
    "start": "467139",
    "end": "473349"
  },
  {
    "text": "lock textbook problem in fact it's been addressed in the textbooks for I don't know 40 years that's actually one of the",
    "start": "473349",
    "end": "481930"
  },
  {
    "text": "easy situations the database server can detect that problem and just abort one of the transactions one thread gets an",
    "start": "481930",
    "end": "488979"
  },
  {
    "text": "error the other one gets to complete no problem but I had a situation where",
    "start": "488979",
    "end": "494979"
  },
  {
    "start": "493000",
    "end": "902000"
  },
  {
    "text": "there was a database on the other side of a firewall from my application server and during the wee hours of the night",
    "start": "494979",
    "end": "502830"
  },
  {
    "text": "the database connections were sort of idle for a long period of time and as they were idle the firewall timed out",
    "start": "502830",
    "end": "510760"
  },
  {
    "text": "connections from its table of allowed allowed traffic so firewall exists to",
    "start": "510760",
    "end": "516880"
  },
  {
    "text": "break the internet it's a computer with finite resources it's got a table of rules for when it allows packets through",
    "start": "516880",
    "end": "524080"
  },
  {
    "text": "on a packet that's trying to open a connection it consults rules about the source IP the destination IP the port",
    "start": "524080",
    "end": "530529"
  },
  {
    "text": "number all of that once a connection is established it just allows packets through but if it expires a connection",
    "start": "530529",
    "end": "538780"
  },
  {
    "text": "from that table then a new packet from the application server just gets dropped on the floor",
    "start": "538780",
    "end": "546120"
  },
  {
    "text": "the firewall doesn't send back an ICMP reset which would tell the server that",
    "start": "546120",
    "end": "551830"
  },
  {
    "text": "the connection is no longer available it just drops the packet on the floor so TCP says aha your network is unreliable",
    "start": "551830",
    "end": "558700"
  },
  {
    "text": "I'm going to retransmit and it retransmits and that gets dropped on the floor and this keeps going until the",
    "start": "558700",
    "end": "565270"
  },
  {
    "text": "tcp/ip abort interval elapses the default is ten minutes on that tcp/ip",
    "start": "565270",
    "end": "571120"
  },
  {
    "text": "abort interval so it's going to keep retransmitting for 10 minutes 10 minutes on a web application in a data center is",
    "start": "571120",
    "end": "578080"
  },
  {
    "text": "eternity 10 minutes might as well be 5 days so what would happen is the",
    "start": "578080",
    "end": "587020"
  },
  {
    "text": "connection would appear broken after it had been idle for more than an hour now",
    "start": "587020",
    "end": "593620"
  },
  {
    "text": "this problem appeared at 5:00 in the morning because during the night we had few enough users that only one page was",
    "start": "593620",
    "end": "601810"
  },
  {
    "text": "being served from each application server at a time the connection pool",
    "start": "601810",
    "end": "607930"
  },
  {
    "text": "that was being used to serve these pages was last in first out so one database",
    "start": "607930",
    "end": "614260"
  },
  {
    "text": "connection would get exercised all through the night the other 39 would sit there aging and getting dropped from the",
    "start": "614260",
    "end": "620470"
  },
  {
    "text": "firewall 5:00 in the morning turned out to be the first time we needed to serve two pages simultaneously on one of these",
    "start": "620470",
    "end": "627070"
  },
  {
    "text": "app servers well the first one would get served from the connection that had been",
    "start": "627070",
    "end": "632260"
  },
  {
    "text": "kept warm and the second one would well it would block retransmitting and",
    "start": "632260",
    "end": "637360"
  },
  {
    "text": "retransmitting and retransmitting until 10 minutes went by at which point a sequel exception would be thrown and the",
    "start": "637360",
    "end": "645550"
  },
  {
    "text": "application server said aha this connection is no longer any good I need to close the connection and discard it",
    "start": "645550",
    "end": "652000"
  },
  {
    "text": "well of course closing the connection sends a packet to the database server so that one gets dropped on the floor and",
    "start": "652000",
    "end": "657910"
  },
  {
    "text": "we go through the whole ten minute retransmit timeout again so basically at",
    "start": "657910",
    "end": "663790"
  },
  {
    "text": "5:00 in the morning all of our application servers hung every day until",
    "start": "663790",
    "end": "669370"
  },
  {
    "text": "we diagnose this problem it took a few weeks now the interesting thing about",
    "start": "669370",
    "end": "674470"
  },
  {
    "text": "this is the number of parameters that had to be exactly right in order to observe this",
    "start": "674470",
    "end": "680760"
  },
  {
    "text": "particular problem so we're dealing with a database connection every application has a database you talk to databases all",
    "start": "680760",
    "end": "687270"
  },
  {
    "text": "the time in order for this problem to manifest we had to have a firewall in the way the",
    "start": "687270",
    "end": "694140"
  },
  {
    "text": "firewall had to have a short timeout on its live connections table we had to",
    "start": "694140",
    "end": "700230"
  },
  {
    "text": "have a large enough application server pool that we didn't need to use multiple connections through the middle of the",
    "start": "700230",
    "end": "705750"
  },
  {
    "text": "night the connection pool had to be last in first out not first in first out otherwise they would have gotten",
    "start": "705750",
    "end": "711450"
  },
  {
    "text": "refreshed enough I can probably find other parameters if the tcp/ip abort",
    "start": "711450",
    "end": "717810"
  },
  {
    "text": "interval had been set to a low number then lots of people in the early morning",
    "start": "717810",
    "end": "723030"
  },
  {
    "text": "would get errors but the server's wouldn't hang that might actually have",
    "start": "723030",
    "end": "728250"
  },
  {
    "text": "been worse because we wouldn't have detected that problem for even longer but my point here is really to tell you",
    "start": "728250",
    "end": "734250"
  },
  {
    "text": "that it's impossible to engineer away",
    "start": "734250",
    "end": "739560"
  },
  {
    "text": "all of the failures that could possibly happen instead you must expect failures",
    "start": "739560",
    "end": "745860"
  },
  {
    "text": "to occur around every integration point you've got and deal with them you need",
    "start": "745860",
    "end": "752490"
  },
  {
    "text": "to put things in place to prevent a failure at an integration point like this from propagating to the entire",
    "start": "752490",
    "end": "758940"
  },
  {
    "text": "system and taking your whole system down now that a lot of developers in the",
    "start": "758940",
    "end": "765030"
  },
  {
    "text": "audience we're all problem solvers by nature if I don't tell you how to solve this problem you're gonna sit here thinking about it and googling for it",
    "start": "765030",
    "end": "770970"
  },
  {
    "text": "instead of listening to the rest of my talk so I'm gonna tell you how to solve this one it's to enable a feature that",
    "start": "770970",
    "end": "776760"
  },
  {
    "text": "the database server has called dead connection detection basically that's just a way of checking if the client is",
    "start": "776760",
    "end": "783240"
  },
  {
    "text": "still alive and cleaning up server side resources if the client is dead periodically the database server sends",
    "start": "783240",
    "end": "789150"
  },
  {
    "text": "out a little ping packet up to the client and says are you still alive are you still alive you're not answering you",
    "start": "789150",
    "end": "797370"
  },
  {
    "text": "must be a Windows box you're probably crashed I'm gonna clean up all my connection stuff well in our case we",
    "start": "797370",
    "end": "803400"
  },
  {
    "text": "didn't actually care about things crashing and disappearing we didn't need the dead connection detection",
    "start": "803400",
    "end": "809160"
  },
  {
    "text": "to detect dead connections but the ping packet was just enough to tell the firewall that the connection was still",
    "start": "809160",
    "end": "815370"
  },
  {
    "text": "alive so that's how we solved that one and the good news is you'll never have",
    "start": "815370",
    "end": "821940"
  },
  {
    "text": "this problem because you've heard me describe this and you'll be on the alert for it every time you see a firewall",
    "start": "821940",
    "end": "827910"
  },
  {
    "text": "between your application and your database there's an alternative solution where you can run a trivial query on a",
    "start": "827910",
    "end": "835230"
  },
  {
    "text": "much more frequent basis than than the timeout in the firewall that one",
    "start": "835230",
    "end": "840899"
  },
  {
    "text": "requires a little more effort in the code so I prefer the configuration solution could we have prevented this",
    "start": "840899",
    "end": "851209"
  },
  {
    "text": "well we could have prevented it from taking down the rest of the system so",
    "start": "851209",
    "end": "856459"
  },
  {
    "text": "one of the things that was going on here is we would use a thread from a",
    "start": "856459",
    "end": "861870"
  },
  {
    "text": "connection pool up front or from a thread pool up front that was receiving the incoming requests that thread would",
    "start": "861870",
    "end": "867449"
  },
  {
    "text": "then be the same one that went and did the database query and there was no mechanism for another timeout to be",
    "start": "867449",
    "end": "873389"
  },
  {
    "text": "applied everything was synchronous and on the same thread had we introduced some asynchrony there maybe we could",
    "start": "873389",
    "end": "880560"
  },
  {
    "text": "have decoupled the front-end thread pool from the interior thread pool that was actually issuing the database queries",
    "start": "880560",
    "end": "886040"
  },
  {
    "text": "that's the type of technique you do to make sure you can remain available even",
    "start": "886040",
    "end": "891779"
  },
  {
    "text": "in the face of partial failures okay we're gonna leave the database behind",
    "start": "891779",
    "end": "897240"
  },
  {
    "text": "now and just talk about other issues with integration points one thing that I",
    "start": "897240",
    "end": "902670"
  },
  {
    "start": "902000",
    "end": "1010000"
  },
  {
    "text": "see a lot is that we test for and we design for failures that are defined",
    "start": "902670",
    "end": "909060"
  },
  {
    "text": "within the specifications of the protocols we're using so you know when we're dealing with TCP connection",
    "start": "909060",
    "end": "914670"
  },
  {
    "text": "refused is a perfectly legitimate kind of response to a TCP connection request",
    "start": "914670",
    "end": "920120"
  },
  {
    "text": "accepting the connection into a listen queue but then never completing it and leaving it in a half-open state that's",
    "start": "920120",
    "end": "926910"
  },
  {
    "text": "not really an acceptable part of the protocol but it does happen when we're",
    "start": "926910",
    "end": "932759"
  },
  {
    "text": "talking HTTP getting back a response code 500 perfectly reasonable we know how to deal with that if you think",
    "start": "932759",
    "end": "939449"
  },
  {
    "text": "you're talking HTTP and instead the server answers with smtp you're gonna have a much",
    "start": "939449",
    "end": "944700"
  },
  {
    "text": "bigger issue right you're not actually talking the protocol you thought you were talking so none of your parsing",
    "start": "944700",
    "end": "950340"
  },
  {
    "text": "will work I love doing things like testing services by sending an infinite",
    "start": "950340",
    "end": "957150"
  },
  {
    "text": "stream of open element tags when they think they're talking XML blows out nearly every XML parser on earth they",
    "start": "957150",
    "end": "964260"
  },
  {
    "text": "just can't they can't handle it and they eventually consume all memory and throw you know out of memory errors or just",
    "start": "964260",
    "end": "970890"
  },
  {
    "text": "abort a process these out of spec failures are the kinds of things I call",
    "start": "970890",
    "end": "976050"
  },
  {
    "text": "wicked errors they do happen in production they will never happen in QA unless you force them to and sometimes",
    "start": "976050",
    "end": "983310"
  },
  {
    "text": "even trying to force them in QA seems a little bit insane you know I'm designing",
    "start": "983310",
    "end": "988500"
  },
  {
    "text": "an integration point that's supposed to talk JSON over HTTP why would I send back streaming binary mp3 files well",
    "start": "988500",
    "end": "996510"
  },
  {
    "text": "just to see if the server can handle it because somewhere some someday in production someone's gonna send you an",
    "start": "996510",
    "end": "1002810"
  },
  {
    "text": "unending stream of binary data maybe they do it accidentally maybe they're doing it deliberately to try and kill",
    "start": "1002810",
    "end": "1008720"
  },
  {
    "text": "your system another issue with integration points is that debugging the",
    "start": "1008720",
    "end": "1014660"
  },
  {
    "start": "1010000",
    "end": "1127000"
  },
  {
    "text": "problems with them often requires peeling back one or more layers of abstraction so think about the database",
    "start": "1014660",
    "end": "1020990"
  },
  {
    "text": "problem that I was talking about in order to observe that we had to get all the way down to doing packet traces on",
    "start": "1020990",
    "end": "1026780"
  },
  {
    "text": "the wire to see a high number of TCP retransmits well in the application code",
    "start": "1026780",
    "end": "1033290"
  },
  {
    "text": "we were dealing with a Java sequel a sequel connection object that object is",
    "start": "1033290",
    "end": "1039170"
  },
  {
    "text": "an abstraction over some bytes in memory right the object tells us how to interpret the bytes in memory one of the",
    "start": "1039170",
    "end": "1045860"
  },
  {
    "text": "sections of bytes is supposed to be a pointer to a socket we go and look at the socket it's basically another chunk",
    "start": "1045860",
    "end": "1052010"
  },
  {
    "text": "of memory one of the items is a file handle which is an index into a table in",
    "start": "1052010",
    "end": "1057200"
  },
  {
    "text": "the kernel that table just has a bunch of numbers that say you know this",
    "start": "1057200",
    "end": "1062360"
  },
  {
    "text": "destination address port and sequence number represents a connection so we're",
    "start": "1062360",
    "end": "1068540"
  },
  {
    "text": "drilling through many layers of abstraction to finally get to what's happening at a level where we can",
    "start": "1068540",
    "end": "1073610"
  },
  {
    "text": "diagnose it the bigger your system is the faster",
    "start": "1073610",
    "end": "1079220"
  },
  {
    "text": "these problems will propagate so we tend to think that scaling something up buys us more time or gives us more ability to",
    "start": "1079220",
    "end": "1086659"
  },
  {
    "text": "survive but in fact it usually just means that there's more traffic and you amplify these errors even faster there",
    "start": "1086659",
    "end": "1094429"
  },
  {
    "text": "are some patterns that we can use to help us with these integration points I'm going to talk about a few of these a",
    "start": "1094429",
    "end": "1100759"
  },
  {
    "text": "little later on and test harnesses are not something I'm going to be talking about today but it's a way that you can",
    "start": "1100759",
    "end": "1107049"
  },
  {
    "text": "test for these conditions before you reach production basically doing evil things to your own system before someone",
    "start": "1107049",
    "end": "1112999"
  },
  {
    "text": "else does once you have a failure in one node",
    "start": "1112999",
    "end": "1122289"
  },
  {
    "text": "you're actually more likely to get failures in other nodes so it's tempting",
    "start": "1122289",
    "end": "1128059"
  },
  {
    "text": "to look at a horizontally scaled a farm of servers or machines or containers or",
    "start": "1128059",
    "end": "1134149"
  },
  {
    "text": "whatever and statistically treat them as identical independent devices they are",
    "start": "1134149",
    "end": "1140869"
  },
  {
    "text": "not they're highly correlated one way that they're correlated is through your",
    "start": "1140869",
    "end": "1146690"
  },
  {
    "text": "software so the software you put on these devices is always a common mode among them in this case suppose we have",
    "start": "1146690",
    "end": "1154580"
  },
  {
    "text": "something that goes down due to a load related condition maybe it's a memory",
    "start": "1154580",
    "end": "1159950"
  },
  {
    "text": "leak maybe it's a race condition where the more load you've got the more likely you are to observe the race condition",
    "start": "1159950",
    "end": "1166450"
  },
  {
    "text": "but in whatever case we have one of the nodes S 4 here going down because of",
    "start": "1166450",
    "end": "1172610"
  },
  {
    "text": "load well the load then gets redistributed on the other nodes not",
    "start": "1172610",
    "end": "1178999"
  },
  {
    "text": "only are they equally well if they were uncorrelated we would expect them to be",
    "start": "1178999",
    "end": "1184309"
  },
  {
    "text": "equally likely to fail as the original one but in fact we're distributing more load on them so their failure given the",
    "start": "1184309",
    "end": "1191990"
  },
  {
    "text": "failure of the original one is more likely you can watch these sort of",
    "start": "1191990",
    "end": "1200049"
  },
  {
    "text": "popping like a row of flashbulbs on a camera and you'll see each one failing",
    "start": "1200049",
    "end": "1205250"
  },
  {
    "text": "faster than the one before this is something that's really common",
    "start": "1205250",
    "end": "1210940"
  },
  {
    "text": "when you do have memory leaks because things tend to get restarted all around the same time when you deploy a release",
    "start": "1210940",
    "end": "1217510"
  },
  {
    "text": "and so they're all leaking memory at roughly the same rate just one of them tips over first and then the traffic on",
    "start": "1217510",
    "end": "1224020"
  },
  {
    "text": "the others causes them to go faster and faster so if you've got a large array of",
    "start": "1224020",
    "end": "1231040"
  },
  {
    "text": "servers it is not like the lighted sign in front of a casino where one lightbulb",
    "start": "1231040",
    "end": "1236380"
  },
  {
    "text": "out is no big deal and you wait until 10% of them are down to go fix it when one goes down you need to find out why",
    "start": "1236380",
    "end": "1243220"
  },
  {
    "text": "and fix it as quickly as possible this often happens with resource leaks and",
    "start": "1243220",
    "end": "1248380"
  },
  {
    "text": "connection pools and separating your capacity into different bulkheads as is one of the ways that you defeat this",
    "start": "1248380",
    "end": "1257400"
  },
  {
    "start": "1258000",
    "end": "1303000"
  },
  {
    "text": "once you have a chain-reaction in one layer you need to be concerned",
    "start": "1258390",
    "end": "1264640"
  },
  {
    "text": "about what happens with other layers that call into that one so this is something that I think of as the micro",
    "start": "1264640",
    "end": "1270970"
  },
  {
    "text": "service system failure mode because we often have this deep stack of tiers of",
    "start": "1270970",
    "end": "1277060"
  },
  {
    "text": "services calling other services that call other services when one of those goes down your system can either amplify",
    "start": "1277060",
    "end": "1285130"
  },
  {
    "text": "the failure and allow the the damage to jump the gap or it can dampen the",
    "start": "1285130",
    "end": "1290440"
  },
  {
    "text": "failure sadly most of the ways that we write calls between systems are",
    "start": "1290440",
    "end": "1295650"
  },
  {
    "text": "synchronous requests response calls with no timeout and that amplifies the",
    "start": "1295650",
    "end": "1301000"
  },
  {
    "text": "failure so we really need to keep a mentality of containing damage and",
    "start": "1301000",
    "end": "1307600"
  },
  {
    "start": "1303000",
    "end": "1346000"
  },
  {
    "text": "preventing it from jumping the gaps one of the places you see this a lot is around things like connection pools or",
    "start": "1307600",
    "end": "1314320"
  },
  {
    "text": "thread pools for making out calls once those get exhausted you'll start",
    "start": "1314320",
    "end": "1319840"
  },
  {
    "text": "consuming the threads in your layer and then you stop responding to your caller",
    "start": "1319840",
    "end": "1325470"
  },
  {
    "text": "timeouts and circuit breakers are effective against this the next anti",
    "start": "1325470",
    "end": "1332200"
  },
  {
    "text": "pattern I want to share with you is something that my friend Paul Lord described as good marketing can kill",
    "start": "1332200",
    "end": "1339490"
  },
  {
    "text": "your system at any time in fact the better your marketing is the more likely you are to suffer",
    "start": "1339490",
    "end": "1344930"
  },
  {
    "text": "from this this is an attack of self denial because you're doing it to yourself very common pattern retailers",
    "start": "1344930",
    "end": "1353180"
  },
  {
    "text": "have have demonstrated this for us many times I remember when the Xbox 360 was",
    "start": "1353180",
    "end": "1360350"
  },
  {
    "text": "brand new Amazon sent out a a poll to all the Amazon Prime customers asking",
    "start": "1360350",
    "end": "1366410"
  },
  {
    "text": "which of these three things would you most like a discount on during Thanksgiving would you like a discount",
    "start": "1366410",
    "end": "1373610"
  },
  {
    "text": "on an Xbox 360 would you like an Xbox on a garden stool",
    "start": "1373610",
    "end": "1379670"
  },
  {
    "text": "that you can put your gardening implements in or would you like a discount on a bicycle well of course the",
    "start": "1379670",
    "end": "1387860"
  },
  {
    "text": "voting was like 98 percent for the Xbox and so they offered a steep discount on the Xbox 360 on a particular day at a",
    "start": "1387860",
    "end": "1395180"
  },
  {
    "text": "particular time with the timezone specified so they made sure everyone is gonna show up at exactly the same minute",
    "start": "1395180",
    "end": "1402050"
  },
  {
    "text": "of the same day and Amazon took themselves down for 20 minutes and when",
    "start": "1402050",
    "end": "1407390"
  },
  {
    "text": "you think about the kind of capacity they have you know that you're vulnerable to this there are things you",
    "start": "1407390",
    "end": "1414110"
  },
  {
    "start": "1412000",
    "end": "1481000"
  },
  {
    "text": "can do to to defend against this make sure marketing offers don't send out deep links I had one client where the",
    "start": "1414110",
    "end": "1422450"
  },
  {
    "text": "marketer was just browsing on his own desktop picked out a link that included",
    "start": "1422450",
    "end": "1427490"
  },
  {
    "text": "a specific machine that they were bound to it bypassed the CDN because inside",
    "start": "1427490",
    "end": "1433460"
  },
  {
    "text": "the company walls they didn't want to go all the way out through the CDN and incur those costs and it had a session",
    "start": "1433460",
    "end": "1439940"
  },
  {
    "text": "ID in it that was the link that got put into the email that got distributed to everyone there are things you can do to",
    "start": "1439940",
    "end": "1448040"
  },
  {
    "text": "make serving the traffic lighter static landing pages are a great approach you can even put a static landing page out",
    "start": "1448040",
    "end": "1454070"
  },
  {
    "text": "at your CDN and only allow the second click to reach your actual servers and",
    "start": "1454070",
    "end": "1461630"
  },
  {
    "text": "there are things like throttling and lightweight pages that you can do the",
    "start": "1461630",
    "end": "1467540"
  },
  {
    "text": "catch is this only works if you know that the traffic is coming and in many",
    "start": "1467540",
    "end": "1472910"
  },
  {
    "text": "companies marketing gotten the the no from IT so often that",
    "start": "1472910",
    "end": "1478090"
  },
  {
    "text": "they don't even talk anymore so one thing you can do is try and re-establish lines of communication by talking to",
    "start": "1478090",
    "end": "1484870"
  },
  {
    "start": "1481000",
    "end": "1517000"
  },
  {
    "text": "your marketing department and saying hey can I see the marketing calendar first of all it'll be fun to watch them faint",
    "start": "1484870",
    "end": "1492009"
  },
  {
    "text": "because someone from IT is actually interested in marketing when they get",
    "start": "1492009",
    "end": "1497049"
  },
  {
    "text": "back off the floor they'll be happy to share the marketing calendar because these things don't happen instantaneously they're planned well in",
    "start": "1497049",
    "end": "1502389"
  },
  {
    "text": "advance and if you don't support your marketers they will work around you and",
    "start": "1502389",
    "end": "1508299"
  },
  {
    "text": "they'll go through third-party services and do things that might jeopardize your systems even worse than the original offer that they were contemplating so",
    "start": "1508299",
    "end": "1518169"
  },
  {
    "start": "1517000",
    "end": "1552000"
  },
  {
    "text": "moving on another big issue is scaling effects so we tend to build things that",
    "start": "1518169",
    "end": "1524379"
  },
  {
    "text": "are like 1 to 1 to 1 you know I've got my service and I've got a thing I'm calling and I've got a database and",
    "start": "1524379",
    "end": "1529659"
  },
  {
    "text": "they're all sized about the same there's one instance of everything running on my box and then you get to production and",
    "start": "1529659",
    "end": "1536139"
  },
  {
    "text": "you're like well my service has five instances and it's being called by something with 4,000 instances that",
    "start": "1536139",
    "end": "1544289"
  },
  {
    "text": "ratio is a little bit different the traffic patterns are a little bit different and it can cause a big issue",
    "start": "1544289",
    "end": "1549730"
  },
  {
    "text": "for your services for example one of the communication patterns that never",
    "start": "1549730",
    "end": "1556120"
  },
  {
    "start": "1552000",
    "end": "1619000"
  },
  {
    "text": "belongs in production is point-to-point messaging so this was a particular platform where they had a caching layer",
    "start": "1556120",
    "end": "1563830"
  },
  {
    "text": "as part of their database abstraction tool and if you wrote through to the",
    "start": "1563830",
    "end": "1569889"
  },
  {
    "text": "database your node would communicate to all the other nodes to knock that item",
    "start": "1569889",
    "end": "1574960"
  },
  {
    "text": "out of cache well when you're in dev it's just a local call it didn't even go",
    "start": "1574960",
    "end": "1580360"
  },
  {
    "text": "out through a network in QA it was sort of unnoticeable because there was one local call and one T speed connection in",
    "start": "1580360",
    "end": "1587710"
  },
  {
    "text": "production it's kind of going up as an N squared function right so in production",
    "start": "1587710",
    "end": "1594669"
  },
  {
    "text": "we had about a hundred nodes each one would open up 99 connections send one",
    "start": "1594669",
    "end": "1600370"
  },
  {
    "text": "packet to each and then close 99 connections almost all of our network",
    "start": "1600370",
    "end": "1605950"
  },
  {
    "text": "bandwidth was just these cache invalidation notices why was it point-to-point no",
    "start": "1605950",
    "end": "1612340"
  },
  {
    "text": "reason at all that should have been broadcast so watch out for this type of",
    "start": "1612340",
    "end": "1618010"
  },
  {
    "text": "communication pattern another place where we see scaling effects really kicking in is with shared resources so",
    "start": "1618010",
    "end": "1626190"
  },
  {
    "start": "1619000",
    "end": "1653000"
  },
  {
    "text": "anything like a cluster manager a lock manager Network components like firewalls API gateways ESB appliances",
    "start": "1626190",
    "end": "1635710"
  },
  {
    "text": "these kinds of things they're all a place where you have a fan in from some horizontally scaled thing to some",
    "start": "1635710",
    "end": "1641950"
  },
  {
    "text": "vertically scaled thing you can always win at horizontally scaling over the",
    "start": "1641950",
    "end": "1649330"
  },
  {
    "text": "amount of vertical scaling you can do now this is not the type of thing that",
    "start": "1649330",
    "end": "1654970"
  },
  {
    "text": "you can test out of existence very easily because we don't build QA environments up to the same size as we",
    "start": "1654970",
    "end": "1660519"
  },
  {
    "text": "do production it's not economically viable so this is a place where you have to apply some engineering you know desk",
    "start": "1660519",
    "end": "1666519"
  },
  {
    "text": "check the ratios among the things that you're dealing with all the different layers of your system watch out for the",
    "start": "1666519",
    "end": "1673570"
  },
  {
    "text": "things that are invisible in your typical diagram so normally when you draw an application architecture diagram",
    "start": "1673570",
    "end": "1680320"
  },
  {
    "text": "you don't depict network components they're part of the substrate but the",
    "start": "1680320",
    "end": "1685330"
  },
  {
    "text": "network components are a funnel that traffic goes through even after you've",
    "start": "1685330",
    "end": "1692740"
  },
  {
    "start": "1691000",
    "end": "1769000"
  },
  {
    "text": "done that desk checking you may run into this kind of a problem where you have different sizes at different layers of",
    "start": "1692740",
    "end": "1700299"
  },
  {
    "text": "your system and you have that deliberately because most of the time most of the traffic from something like",
    "start": "1700299",
    "end": "1708190"
  },
  {
    "text": "your online store doesn't go through to order management and so it's kind of",
    "start": "1708190",
    "end": "1714460"
  },
  {
    "text": "okay that the online store has six times as many threads available to make calls",
    "start": "1714460",
    "end": "1720039"
  },
  {
    "text": "as the middle tier has to respond to them but if traffic patterns change",
    "start": "1720039",
    "end": "1726000"
  },
  {
    "text": "you're not really stable you're only sort of stable by convention and under normal patterns so at this particular",
    "start": "1726000",
    "end": "1734279"
  },
  {
    "text": "retailer there was a big offer during Thanksgiving weekend offering free home",
    "start": "1734279",
    "end": "1740230"
  },
  {
    "text": "delivery and installation of big-screen TVs just in time for the peak of football season and that caused a big",
    "start": "1740230",
    "end": "1747759"
  },
  {
    "text": "change in people's traffic patterns suddenly a lot more people were looking up delivery dates and availability for",
    "start": "1747759",
    "end": "1752950"
  },
  {
    "text": "home installation and so a much larger fraction of those online store threads",
    "start": "1752950",
    "end": "1759639"
  },
  {
    "text": "were making calls to order management and it was making more calls to scheduling than normal",
    "start": "1759639",
    "end": "1765659"
  },
  {
    "text": "well that caused everything to to pile up so the scheduling system stopped responding the order management system",
    "start": "1765659",
    "end": "1773049"
  },
  {
    "text": "got slow couldn't actually process any orders because all of its threads were busy trying to look up delivery dates",
    "start": "1773049",
    "end": "1778799"
  },
  {
    "text": "and we had to sit there on the online store turning on and off features all",
    "start": "1778799",
    "end": "1784809"
  },
  {
    "text": "weekend long to try and you know eke out a little more revenue and then turn it",
    "start": "1784809",
    "end": "1790029"
  },
  {
    "text": "off when things were getting wobbly so it is a type of scaling effect it's very",
    "start": "1790029",
    "end": "1795730"
  },
  {
    "text": "common in a large enterprise because you you tend to build each of these things in isolation in different groups we can",
    "start": "1795730",
    "end": "1805450"
  },
  {
    "text": "do some desk checking on this and see if it's a potential problem when it is a potential problem your best bet is to",
    "start": "1805450",
    "end": "1811960"
  },
  {
    "text": "stress both sides of the interface so unhook the front end collar and put in a",
    "start": "1811960",
    "end": "1819100"
  },
  {
    "text": "load generator that calls the back end with much more load than its intended to take and see what happens does it simply",
    "start": "1819100",
    "end": "1825700"
  },
  {
    "text": "crumble or does it give fast errors does it get slow maybe it's good and it sheds",
    "start": "1825700",
    "end": "1833529"
  },
  {
    "text": "load and tells the front end I can't do this right now ask again later do the",
    "start": "1833529",
    "end": "1839529"
  },
  {
    "text": "same thing with the front end and see what happens when the calls it's making gets slowed or stopped responding your",
    "start": "1839529",
    "end": "1846999"
  },
  {
    "text": "front end should be safe against that kind of thing but you need to test for it and observe what really happens now",
    "start": "1846999",
    "end": "1854889"
  },
  {
    "start": "1854000",
    "end": "1920000"
  },
  {
    "text": "I'm emphasizing slow responses because this is another anti-pattern I would much rather have a fast no or a",
    "start": "1854889",
    "end": "1861429"
  },
  {
    "text": "connection refused then someone say yeah I can try to get that done and then drag",
    "start": "1861429",
    "end": "1867249"
  },
  {
    "text": "it out and drag it out and drag it out oh I'm supposed to be talking about systems not co-workers with systems I'd",
    "start": "1867249",
    "end": "1874480"
  },
  {
    "text": "rather have a fast you're fast no than a slow response or a slow failure so you look at something",
    "start": "1874480",
    "end": "1881050"
  },
  {
    "text": "like a TCP connection refused and that's like a one microsecond operation you look at something like allowing a",
    "start": "1881050",
    "end": "1888010"
  },
  {
    "text": "connection into a listen queue and then just not getting around to it until it times out and that's like a one second",
    "start": "1888010",
    "end": "1893800"
  },
  {
    "text": "to one minute operation so let's not tie up the resources on the front end",
    "start": "1893800",
    "end": "1900280"
  },
  {
    "text": "because the longer the responses are in a service provider the larger the caller",
    "start": "1900280",
    "end": "1905710"
  },
  {
    "text": "needs to scale to handle the same amount of traffic so it's actually like a gain",
    "start": "1905710",
    "end": "1910780"
  },
  {
    "text": "knob on our scaling of the calling side and very often slow response ends in a",
    "start": "1910780",
    "end": "1917950"
  },
  {
    "text": "failure or a timeout and the work was wasted anyway this can creep in in a lot of places excess load is the most",
    "start": "1917950",
    "end": "1924610"
  },
  {
    "start": "1920000",
    "end": "1983000"
  },
  {
    "text": "obvious one and the most common one but we can also find things like the network being too busy so I've been in companies",
    "start": "1924610",
    "end": "1932020"
  },
  {
    "text": "when they were dealing with a worm rampaging around their network and suddenly you know their networks at like",
    "start": "1932020",
    "end": "1938170"
  },
  {
    "text": "80% saturation all the time and back-end calls get really slow components like",
    "start": "1938170",
    "end": "1944920"
  },
  {
    "text": "firewalls can get overloaded you know the first time I had a network admin tell me that the firewalls CPU was at a",
    "start": "1944920",
    "end": "1951820"
  },
  {
    "text": "hundred percent it was a revelation I'm like oh yeah they have CPUs they can be",
    "start": "1951820",
    "end": "1956890"
  },
  {
    "text": "overloaded to some protocols you really need to be where NFS has retries",
    "start": "1956890",
    "end": "1962950"
  },
  {
    "text": "built-in DNS has retries built in in fact some older versions of NFS had retries built in in the kernel that were",
    "start": "1962950",
    "end": "1970210"
  },
  {
    "text": "uninterruptible your own remote protocols may be an issue as well if you",
    "start": "1970210",
    "end": "1975910"
  },
  {
    "text": "do things like an N plus one query pattern you you ask for the extent of all the results and then you ask for",
    "start": "1975910",
    "end": "1981280"
  },
  {
    "text": "each result one at a time slow responses are one of the ways that damage jumps",
    "start": "1981280",
    "end": "1987520"
  },
  {
    "start": "1983000",
    "end": "2000000"
  },
  {
    "text": "the gap and causes those cascading failures they do provoke people into pounding reload at the end-user level",
    "start": "1987520",
    "end": "1994780"
  },
  {
    "text": "and they provoke calling systems into retrying their calls so we want to watch out for that the final anti-pattern i",
    "start": "1994780",
    "end": "2002340"
  },
  {
    "start": "2000000",
    "end": "2043000"
  },
  {
    "text": "want to talk about is unbounded result sets so when you make a query you don't",
    "start": "2002340",
    "end": "2007410"
  },
  {
    "text": "often get too by how many results do I want if you're going through something like an ORM it's",
    "start": "2007410",
    "end": "2013950"
  },
  {
    "text": "definitely not the default behavior and if you're going through an ORM and actually traversing a relationship from",
    "start": "2013950",
    "end": "2019410"
  },
  {
    "text": "a parent record to a child record type it's very difficult to say no I I really",
    "start": "2019410",
    "end": "2025410"
  },
  {
    "text": "only want the first million of those things don't send me all 12 million",
    "start": "2025410",
    "end": "2030830"
  },
  {
    "text": "sequel queries you can add limits to the clauses but you know you have to think",
    "start": "2031070",
    "end": "2038160"
  },
  {
    "text": "about it and the syntax is a little bit different for each flavor of sequel I",
    "start": "2038160",
    "end": "2043940"
  },
  {
    "start": "2043000",
    "end": "2055000"
  },
  {
    "text": "often see this with service architectures so you'll again have this",
    "start": "2043940",
    "end": "2049200"
  },
  {
    "text": "n plus 1 pattern where you ask for the extent and then you ask for each item so you want to make sure that you",
    "start": "2049200",
    "end": "2056639"
  },
  {
    "start": "2055000",
    "end": "2082000"
  },
  {
    "text": "test with real data volumes and real relationships and real distributions so",
    "start": "2056640",
    "end": "2063929"
  },
  {
    "text": "you know if you are building a social network make sure you're testing with a power law for the number of connections",
    "start": "2063930",
    "end": "2070590"
  },
  {
    "text": "that each person has not a Gaussian all right because you'll find those those black hole people who have 50,000",
    "start": "2070590",
    "end": "2077580"
  },
  {
    "text": "connections instead of the median of one connection okay so that was kind of the",
    "start": "2077580",
    "end": "2083970"
  },
  {
    "start": "2082000",
    "end": "2088000"
  },
  {
    "text": "bad news section I want to talk about the good news you know one of the",
    "start": "2083970",
    "end": "2089760"
  },
  {
    "start": "2088000",
    "end": "2156000"
  },
  {
    "text": "patterns that you can use is time outs so a lot of the anti patterns I described are just failures to apply",
    "start": "2089760",
    "end": "2096419"
  },
  {
    "text": "time outs and and the willingness to block infinitely things like connection pools almost always have one version of",
    "start": "2096420",
    "end": "2102690"
  },
  {
    "text": "check out that blocks forever and one version that has a timeout I wish people",
    "start": "2102690",
    "end": "2108120"
  },
  {
    "text": "would just get rid of the version that blocks forever and only supply the version that takes a timeout when you",
    "start": "2108120",
    "end": "2115260"
  },
  {
    "text": "apply timeouts you have to decide what you're going to do if the timeout occurs so do i retry the work do i queue it up",
    "start": "2115260",
    "end": "2122940"
  },
  {
    "text": "to call it later how am I going to handle that do I just report error to the user another area",
    "start": "2122940",
    "end": "2130620"
  },
  {
    "text": "that I'm really leery about is binary client jars or client dll's that sort of",
    "start": "2130620",
    "end": "2136830"
  },
  {
    "text": "thing because they're written by programmers just like us they don't have enough time they don't get to do enough testing",
    "start": "2136830",
    "end": "2142990"
  },
  {
    "text": "maybe they don't know about these kinds of problems the main difference is you",
    "start": "2142990",
    "end": "2148580"
  },
  {
    "text": "can't see it and so when there is something problematic inside that code it's much harder to get to",
    "start": "2148580",
    "end": "2156520"
  },
  {
    "start": "2156000",
    "end": "2162000"
  },
  {
    "text": "so timeouts are pretty useful against a lot of those anti-patterns circuit",
    "start": "2156520",
    "end": "2163700"
  },
  {
    "start": "2162000",
    "end": "2233000"
  },
  {
    "text": "breakers are kind of the the pattern that's gotten the most popular and caught the most buzz I guess the idea is",
    "start": "2163700",
    "end": "2172810"
  },
  {
    "text": "we shouldn't be doing retry loops like this where you you attempt an operation",
    "start": "2172810",
    "end": "2178580"
  },
  {
    "text": "it fails and you basically immediately attempt it again it takes what 1",
    "start": "2178580",
    "end": "2185000"
  },
  {
    "text": "nanosecond to get from the bottom of that while loop back up to the top what kind of problem disappears after 1",
    "start": "2185000",
    "end": "2191660"
  },
  {
    "text": "nanosecond what makes this more likely to succeed on the third attempt or the",
    "start": "2191660",
    "end": "2197060"
  },
  {
    "text": "fifth attempt instead of the first and if the third attempt is more likely shouldn't I set my retries to something",
    "start": "2197060",
    "end": "2203330"
  },
  {
    "text": "like a thousand well I don't want to I don't want to do the retries at all the",
    "start": "2203330",
    "end": "2210230"
  },
  {
    "text": "problems are very likely to still be present 1 nanosecond later the only kind of problem that disappears that fast is",
    "start": "2210230",
    "end": "2216200"
  },
  {
    "text": "something like a dropped packet which your lower level protocol takes care of anyway retries make users wait they tie",
    "start": "2216200",
    "end": "2224540"
  },
  {
    "text": "up calling resources on the system they very often end in failure anyway so you're just delaying the response and",
    "start": "2224540",
    "end": "2231470"
  },
  {
    "text": "provoking a slow response so the idea with a circuit breaker is we wrap it",
    "start": "2231470",
    "end": "2236840"
  },
  {
    "start": "2233000",
    "end": "2335000"
  },
  {
    "text": "around any kind of a dangerous call and you've already heard me talk about what dangerous calls mean we count failures",
    "start": "2236840",
    "end": "2243850"
  },
  {
    "text": "in making that call and when there are too many failures we we basically cut",
    "start": "2243850",
    "end": "2249140"
  },
  {
    "text": "off the interface and say we're gonna return an immediate error or an immediate fallback rather than making",
    "start": "2249140",
    "end": "2255770"
  },
  {
    "text": "the call all the way through after some period of time has elapsed and and usually this is a human-scale period of",
    "start": "2255770",
    "end": "2262520"
  },
  {
    "text": "time I'm willing to try again to make the call if the call works then great",
    "start": "2262520",
    "end": "2268130"
  },
  {
    "text": "I'm back to normal operation and I can reintegrate the feature into full operation if it doesn't",
    "start": "2268130",
    "end": "2274700"
  },
  {
    "text": "work then something's still wrong and I go back to the state where I don't keep trying one of the nice things about",
    "start": "2274700",
    "end": "2281210"
  },
  {
    "text": "using the circuit breaker is it doesn't require every thread and every request to discover anew that the thing it's",
    "start": "2281210",
    "end": "2288410"
  },
  {
    "text": "trying to talk to is broken you know if you got a timeout one millisecond ago",
    "start": "2288410",
    "end": "2293650"
  },
  {
    "text": "why would you issue another call when you think you're going to give another timeout there are loads of open-source",
    "start": "2293650",
    "end": "2302720"
  },
  {
    "text": "libraries that implement circuit breakers I definitely recommend picking up one of those rather than doing your",
    "start": "2302720",
    "end": "2308540"
  },
  {
    "text": "own work because you are sharing information across threads that's tricky business I do not recommend sharing",
    "start": "2308540",
    "end": "2314960"
  },
  {
    "text": "circuit breaker State across all of your calling services and that's basically",
    "start": "2314960",
    "end": "2321230"
  },
  {
    "text": "just a trade off between saying yes more of my nodes have to independently discover the failure versus the risk of",
    "start": "2321230",
    "end": "2329869"
  },
  {
    "text": "new failure modes from sharing the state across the server's you definitely need",
    "start": "2329869",
    "end": "2337490"
  },
  {
    "start": "2335000",
    "end": "2385000"
  },
  {
    "text": "to talk about what to do when the circuit breaker is is popped what's your fallback strategy can you",
    "start": "2337490",
    "end": "2343940"
  },
  {
    "text": "use cache data do you need to cue the work for later retry is there a secondary service you can try these are",
    "start": "2343940",
    "end": "2350540"
  },
  {
    "text": "all legitimate approaches it's both a technical and a business process discussion to have exposing the state of",
    "start": "2350540",
    "end": "2358760"
  },
  {
    "text": "circuit breakers across your system makes a great way to look at sort of overall health if I have 20 nodes and",
    "start": "2358760",
    "end": "2366980"
  },
  {
    "text": "they're all showing red on the same circuit breaker then I'm pretty sure the problem is with the provider if I have",
    "start": "2366980",
    "end": "2374060"
  },
  {
    "text": "20 nodes and two of them are showing red then it's likely that the problem is on the calling side or there's an",
    "start": "2374060",
    "end": "2381079"
  },
  {
    "text": "intermittent problem in the network in between them so next pattern I like to",
    "start": "2381079",
    "end": "2388369"
  },
  {
    "start": "2385000",
    "end": "2448000"
  },
  {
    "text": "apply is something I call bulkheads and the metaphor here is from ships",
    "start": "2388369",
    "end": "2393920"
  },
  {
    "text": "never mind the Titanic they were just implemented wrong there the design was fine it was bad implementation the idea",
    "start": "2393920",
    "end": "2401300"
  },
  {
    "text": "is that we compartmentalized the system so that some parts of the system can go down and other parts survive",
    "start": "2401300",
    "end": "2408500"
  },
  {
    "text": "when we create multiple thread pools inside an application we're creating two",
    "start": "2408500",
    "end": "2414650"
  },
  {
    "text": "compartments or multiple compartments with bulkheads between them process binding to CPUs",
    "start": "2414650",
    "end": "2420320"
  },
  {
    "text": "again compartments with bulkheads one approach that I particularly like",
    "start": "2420320",
    "end": "2425980"
  },
  {
    "text": "especially in the sort of SAS arena is different server pools for different",
    "start": "2425980",
    "end": "2431030"
  },
  {
    "text": "priority clients so if you're on a freemium model you know you should definitely think about allocating some",
    "start": "2431030",
    "end": "2438590"
  },
  {
    "text": "pools to your premium clients and having all your free clients kind of mingle to",
    "start": "2438590",
    "end": "2443869"
  },
  {
    "text": "get mingle together in steerage class",
    "start": "2443869",
    "end": "2448029"
  },
  {
    "text": "bulkheads really helped with this kind of common mode dependency foo and bar",
    "start": "2449020",
    "end": "2454400"
  },
  {
    "text": "here can each damage the other in a denial of service by over-consuming Baz",
    "start": "2454400",
    "end": "2462130"
  },
  {
    "start": "2462000",
    "end": "2488000"
  },
  {
    "text": "if you can separate them into different pools with dedicated clients then",
    "start": "2462130",
    "end": "2468560"
  },
  {
    "text": "neither one can harm the other now one thing about doing the bulkheads is that",
    "start": "2468560",
    "end": "2473960"
  },
  {
    "text": "you really need to pick a useful level of granularity to apply this at it's it's not helpful to do it at every level",
    "start": "2473960",
    "end": "2480920"
  },
  {
    "text": "so you don't need to do thread pools and process binding and server binding and containers and so on okay I am going to",
    "start": "2480920",
    "end": "2491349"
  },
  {
    "start": "2488000",
    "end": "2498000"
  },
  {
    "text": "jump ahead just a little bit the next really important pattern is fail fast",
    "start": "2491349",
    "end": "2498130"
  },
  {
    "text": "it's often possible to find out whether an operation is going to succeed before",
    "start": "2498130",
    "end": "2504770"
  },
  {
    "text": "you get all the way into it so there are things like acquiring critical resources and checking",
    "start": "2504770",
    "end": "2511880"
  },
  {
    "text": "parameters and checking on your internal state these are all ways of detecting whether you're going to be able to",
    "start": "2511880",
    "end": "2517490"
  },
  {
    "text": "complete a request before you've spent a lot of time doing it it's useful to do",
    "start": "2517490",
    "end": "2523700"
  },
  {
    "start": "2522000",
    "end": "2550000"
  },
  {
    "text": "this sort of thing so that you dampen failures so if you can apply fail fast",
    "start": "2523700",
    "end": "2530270"
  },
  {
    "text": "and do it by looking at the state of your circuit breakers then you can say",
    "start": "2530270",
    "end": "2536020"
  },
  {
    "text": "you know damage to this other part of the system would normally put stress on the entire enter",
    "start": "2536020",
    "end": "2542160"
  },
  {
    "text": "but I'm actually gonna act like a shock absorber and not transmit that damage upward checking resources and",
    "start": "2542160",
    "end": "2553200"
  },
  {
    "start": "2550000",
    "end": "2575000"
  },
  {
    "text": "integration points via circuit breakers is one of the great ways to do it validating input is another great way to",
    "start": "2553200",
    "end": "2558900"
  },
  {
    "text": "do it we can often apply more validation than you would think it sometimes looks",
    "start": "2558900",
    "end": "2564570"
  },
  {
    "text": "a little bit like breaking encapsulation but I could also make a case that it's it's it can be done by providing a",
    "start": "2564570",
    "end": "2571260"
  },
  {
    "text": "richer API on your domain objects the",
    "start": "2571260",
    "end": "2576450"
  },
  {
    "start": "2575000",
    "end": "2584000"
  },
  {
    "text": "final stability pattern I want to talk about is using decoupling middleware and",
    "start": "2576450",
    "end": "2581490"
  },
  {
    "text": "basically this is all about going async if we look at this spectrum of coupling",
    "start": "2581490",
    "end": "2586740"
  },
  {
    "start": "2584000",
    "end": "2646000"
  },
  {
    "text": "that I think David Gardner originated there are a lot of positions along this",
    "start": "2586740",
    "end": "2592110"
  },
  {
    "text": "spectrum that we can explore when we're doing in process method calls we don't",
    "start": "2592110",
    "end": "2597390"
  },
  {
    "text": "worry too much about differential availability if the library is there the caller is there because you're running",
    "start": "2597390",
    "end": "2604830"
  },
  {
    "text": "in the same process we keep reinventing remote procedure calls under different",
    "start": "2604830",
    "end": "2610290"
  },
  {
    "text": "names about once a decade we get a new acronym for remote procedure calls but",
    "start": "2610290",
    "end": "2616260"
  },
  {
    "text": "there's a lot of value to be had in moving further to the right on this spectrum when we do messaging for",
    "start": "2616260",
    "end": "2623430"
  },
  {
    "text": "example we have the ability for the provider to be offline while the caller is still functioning or vice-versa we",
    "start": "2623430",
    "end": "2630870"
  },
  {
    "text": "have the ability to absorb a spike in load and spread it out over time because",
    "start": "2630870",
    "end": "2637110"
  },
  {
    "text": "we've got messages in a queue that we can digest at the throughput of the back end and so those unbalanced capacities",
    "start": "2637110",
    "end": "2643710"
  },
  {
    "text": "and scaling effects are much easier to deal with now unfortunately changing middleware often requires a rewrite it's not a",
    "start": "2643710",
    "end": "2650610"
  },
  {
    "start": "2646000",
    "end": "2670000"
  },
  {
    "text": "simple kind of drop in thing switching from you know wrests HTTP JSON calls to",
    "start": "2650610",
    "end": "2657950"
  },
  {
    "text": "Avro messages on a caf-co bus yeah that's a that's a big change and",
    "start": "2657950",
    "end": "2664740"
  },
  {
    "text": "sometimes those decisions are made at a level where we don't really get to counterman them but I'll say the more of",
    "start": "2664740",
    "end": "2672420"
  },
  {
    "start": "2670000",
    "end": "2687000"
  },
  {
    "text": "these different architectural styles you can having your toolbox and the later you",
    "start": "2672420",
    "end": "2679339"
  },
  {
    "text": "can make the decisions the better the chances you're gonna have of creating a system with a lot of stability so we",
    "start": "2679339",
    "end": "2689349"
  },
  {
    "start": "2687000",
    "end": "2742000"
  },
  {
    "text": "have to accept that problems are going to occur faults are going to be",
    "start": "2689349",
    "end": "2694369"
  },
  {
    "text": "initiated we're gonna have bugs we're gonna have latent issues the big issue",
    "start": "2694369",
    "end": "2700279"
  },
  {
    "text": "or the big question is do we amplify those throughout our enterprise or do we find ways to dampen or nullify them and",
    "start": "2700279",
    "end": "2708079"
  },
  {
    "text": "I view this a lot as acting like cracks in metal so when metal is fatigue a",
    "start": "2708079",
    "end": "2714709"
  },
  {
    "text": "crack gets started someplace and then maybe the structure of the metal is such",
    "start": "2714709",
    "end": "2720920"
  },
  {
    "text": "that the crack gets stopped at a crystalline boundary and nothing bad happens if that doesn't occur the crack",
    "start": "2720920",
    "end": "2730219"
  },
  {
    "text": "accelerates at supersonic speed through the metal and you have a catastrophic failure of the metal something like a",
    "start": "2730219",
    "end": "2736099"
  },
  {
    "text": "plane fuselage ripping open we don't want our plane fuselage is ripping open",
    "start": "2736099",
    "end": "2742039"
  },
  {
    "text": "we want something more like this where we've got cracked Stoppers we've got ways of dampening the failure and",
    "start": "2742039",
    "end": "2747709"
  },
  {
    "text": "preventing it from propagating and accelerating the system is still damaged we can't prevent that completely I hope",
    "start": "2747709",
    "end": "2755029"
  },
  {
    "text": "I've convinced you of that with the the 5 a.m. problem with the database but at",
    "start": "2755029",
    "end": "2761029"
  },
  {
    "text": "least we can preserve some features for some users and we can prevent those",
    "start": "2761029",
    "end": "2766719"
  },
  {
    "text": "catastrophic failures and with that I thank you for your attention and I",
    "start": "2766719",
    "end": "2773239"
  },
  {
    "start": "2769000",
    "end": "2926000"
  },
  {
    "text": "believe we have time for some questions",
    "start": "2773239",
    "end": "2777039"
  },
  {
    "text": "thank you Michael I'm very interesting we do actually have question here I'll bring up first and",
    "start": "2783000",
    "end": "2789579"
  },
  {
    "text": "then we have time for some more possibly what are your thoughts on tools such as chaos monkey I'm a big fan of chaos",
    "start": "2789579",
    "end": "2798460"
  },
  {
    "text": "monkey and the whole simian army I want to see them go on a world tour I think",
    "start": "2798460",
    "end": "2804190"
  },
  {
    "text": "those those tools are fantastic for exactly the the reason that I said it's hard to test these problems out in QA",
    "start": "2804190",
    "end": "2811450"
  },
  {
    "text": "you kind of need real production environments real scale real topologies",
    "start": "2811450",
    "end": "2817559"
  },
  {
    "text": "and I love the idea of forcing yourself to be anti fragile by creating problems",
    "start": "2817559",
    "end": "2824769"
  },
  {
    "text": "when there aren't enough I liken it to the the theory that autoimmune disorders",
    "start": "2824769",
    "end": "2832480"
  },
  {
    "text": "are on the rise because our immune systems aren't challenged enough and so you know they're immunologists are",
    "start": "2832480",
    "end": "2837849"
  },
  {
    "text": "recommending that we go out and eat dirt to get more challenges to our immune system the chaos monkey is kind of like",
    "start": "2837849",
    "end": "2843099"
  },
  {
    "text": "eating dirt okay we actually did have another question we have another",
    "start": "2843099",
    "end": "2850779"
  },
  {
    "text": "question here how can ma during monitoring system design help or hurt cascading failures that's a fantastic",
    "start": "2850779",
    "end": "2859210"
  },
  {
    "text": "question unfortunately there is a there's a big issue with a lot of monitoring systems",
    "start": "2859210",
    "end": "2864609"
  },
  {
    "text": "in that they only report when things happen they don't report when things don't happen and so this is one of those",
    "start": "2864609",
    "end": "2870940"
  },
  {
    "text": "places where the absence of a signal is the information you want so I would look",
    "start": "2870940",
    "end": "2876700"
  },
  {
    "text": "for monitoring systems that know how to collect heartbeats and as soon as you stop seeing heartbeats that's a big",
    "start": "2876700",
    "end": "2882490"
  },
  {
    "text": "issue okay do we have it yet we have",
    "start": "2882490",
    "end": "2888490"
  },
  {
    "text": "time for possibly one other question if somebody didn't put one in and what like to bring one up anybody else go back",
    "start": "2888490",
    "end": "2897099"
  },
  {
    "text": "here okay so what we'll do one more here you go let's get the mic so that we want to make sure that everybody hears it",
    "start": "2897099",
    "end": "2906029"
  },
  {
    "text": "when's the second edition coming out no comment oh that was a quick answer anybody else",
    "start": "2906029",
    "end": "2915240"
  },
  {
    "text": "want to throw one end before we break for lunch or everybody's ready for lunch okay listen I'm ready",
    "start": "2915240",
    "end": "2922010"
  }
]