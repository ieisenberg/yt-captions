[
  {
    "start": "0",
    "end": "62000"
  },
  {
    "text": "um yeah so anyway I'm I'm Alex I'm excited to be here talking about Dynamo DV uh as Eric said I do a lot of I do a",
    "start": "11840",
    "end": "19520"
  },
  {
    "text": "lot of talks on Dynamo DB a lot of data modeling um over the last five years um I I don't think it makes sense to do",
    "start": "19520",
    "end": "25640"
  },
  {
    "text": "data modeling here just because we're talking about Dynamo DB in an Eda world and I think there's nothing really specific to there's not that much",
    "start": "25640",
    "end": "31439"
  },
  {
    "text": "specific to Eda for for data modeling but what I want to talk about here is is how and why Dynamo fits so well in an",
    "start": "31439",
    "end": "38280"
  },
  {
    "text": "Eda world because I think Dynamo has a lot of unique characteristics for a",
    "start": "38280",
    "end": "43320"
  },
  {
    "text": "database um both in terms of like some really nice strengths and capabilities and features and also some like unique",
    "start": "43320",
    "end": "49280"
  },
  {
    "text": "weaknesses or uh you know missing features i' would say compared to other databases I think dyo just fits really",
    "start": "49280",
    "end": "55000"
  },
  {
    "text": "well in an Eda world I think I think its strengths are accentuate I think its weaknesses are are muted a little bit so",
    "start": "55000",
    "end": "60039"
  },
  {
    "text": "I just want to talk about that today um so I want to start off and just talk about hey what's unique about Dynamo DB",
    "start": "60039",
    "end": "65840"
  },
  {
    "start": "62000",
    "end": "328000"
  },
  {
    "text": "in general I like to start off by saying hey it's it's both fully managed and proprietary to AWS and these these go",
    "start": "65840",
    "end": "72119"
  },
  {
    "text": "together in an interesting way so it's proprietary to AWS you can't run Dynamo DB in in gcp or Azure or on Prem you",
    "start": "72119",
    "end": "79880"
  },
  {
    "text": "can't run on ec2 in AWS it's it's only a a service that you can use from AWS",
    "start": "79880",
    "end": "85360"
  },
  {
    "text": "directly um and I you know there are some downsides to that but there also some upsides in the sense that like they",
    "start": "85360",
    "end": "90400"
  },
  {
    "text": "can really make this a more fully managed service than they can even for something like RDS a relational database",
    "start": "90400",
    "end": "96159"
  },
  {
    "text": "service right this is this is a region-wide multi-tenant service where all the users in a given region are",
    "start": "96159",
    "end": "102320"
  },
  {
    "text": "basically using the same Dynamo DB infrastructure uh which is great so it's more like S3 sqs in that way and the",
    "start": "102320",
    "end": "108439"
  },
  {
    "text": "fact that it's proprietary to AWS means they don't have to make it sort of like lowest common denominator that you can run it yourself if you want to um",
    "start": "108439",
    "end": "115360"
  },
  {
    "text": "different things like that we good to go better okay sorry",
    "start": "115360",
    "end": "120640"
  },
  {
    "text": "um cool so yeah Dynamo is um proprietary to AWS but because of that you get some",
    "start": "120640",
    "end": "125719"
  },
  {
    "text": "really nice fully managed capabilities from Dynam DB now Dynamo DB's like main claim the",
    "start": "125719",
    "end": "132440"
  },
  {
    "text": "main thing it's really aiming for is consistent predictable performance at any scale right we talk about any scale",
    "start": "132440",
    "end": "138640"
  },
  {
    "text": "um at reinvent last year one of the senior principles on the Dynamo DB team put this slide up there just about some",
    "start": "138640",
    "end": "143760"
  },
  {
    "text": "of the usage of their higher scale clients on Dynamo right where they have hundreds of customers that are doing",
    "start": "143760",
    "end": "148920"
  },
  {
    "text": "half million requests per second they have hundreds of customers that are doing a billion requests per hour and they have hundreds of customers that",
    "start": "148920",
    "end": "155160"
  },
  {
    "text": "have tables over 200 terabytes each and these are disjoint customers in some ways right some that have really huge",
    "start": "155160",
    "end": "160200"
  },
  {
    "text": "tables some that have high peaks and some that have you know pretty sustained load over a long period of time right so",
    "start": "160200",
    "end": "166519"
  },
  {
    "text": "Dynamo is serving some of the biggest workloads on the planet so it's aiming for that",
    "start": "166519",
    "end": "172560"
  },
  {
    "text": "consistent predictable performance at any scale and and two ways it really goes about that number one is just how",
    "start": "172560",
    "end": "178519"
  },
  {
    "text": "its architecture works I mentioned that Dynamo is this sort of region-wide multi-tenant service and if you look at",
    "start": "178519",
    "end": "185040"
  },
  {
    "text": "the architecture at a really high level it looks something like this where when you reach out to the Dynamo service it's going to hit this region wide endpoint",
    "start": "185040",
    "end": "191959"
  },
  {
    "text": "that's going to go to this giant Fleet of load balancers that are shared across all the customers in a given region that's going to do TLS termination",
    "start": "191959",
    "end": "198640"
  },
  {
    "text": "forwarded along to these request routers where it's going to authenticate your request it's going to look up metadata",
    "start": "198640",
    "end": "204120"
  },
  {
    "text": "about your table figure out where your data lives and then forward that request to one of one of these you know enormous",
    "start": "204120",
    "end": "209840"
  },
  {
    "text": "Fleet of of storage nodes that actually hold your data and either write your data or read your data from one of those nodes and handle that and again this is",
    "start": "209840",
    "end": "216360"
  },
  {
    "text": "shared across the region so if you're running us east1 you're probably running with Uber and snap and Disney and",
    "start": "216360",
    "end": "222400"
  },
  {
    "text": "amazon.com and all these other enormous customers so that's part of the way they",
    "start": "222400",
    "end": "229040"
  },
  {
    "text": "get that consistent performance at any scale they have this horizontally scalable architecture that can that can work work really well um but on the",
    "start": "229040",
    "end": "235280"
  },
  {
    "text": "other side it's also like a more reduced feature set right Dynamo doesn't do all the things that a relational database",
    "start": "235280",
    "end": "241439"
  },
  {
    "text": "does for some background on this I um you know it's in this this more unique category of no SQL um I think it's worth",
    "start": "241439",
    "end": "249280"
  },
  {
    "text": "sort of understanding Dynamo the Dynamo paper this came out in 2006 2007 and this isn't Dynamo DB this is",
    "start": "249280",
    "end": "256519"
  },
  {
    "text": "Dynamo which is like an internal database that amazon.com Engineers built for themselves when they were having",
    "start": "256519",
    "end": "261639"
  },
  {
    "text": "scaling issues for Amazon retail like this is before AWS they built this um some pretty unique names on there Swami",
    "start": "261639",
    "end": "268000"
  },
  {
    "text": "Verner rogal and and a lot of other really distinguish folks from Amazon um and wner looking at this 10 years later",
    "start": "268000",
    "end": "274960"
  },
  {
    "text": "just reflecting back on Dynamo and the way they built it their the way they did you don't have to read all this but but",
    "start": "274960",
    "end": "280280"
  },
  {
    "text": "understand they were looking at their highs scale use cases and realizing hey a a vast majority of their use cases",
    "start": "280280",
    "end": "286280"
  },
  {
    "text": "were accessing a single row you know identified by its primary key you know another 20% of that would just get a a",
    "start": "286280",
    "end": "292520"
  },
  {
    "text": "set of row a range of rows from an individual table so they didn't really need all the capabilities of a",
    "start": "292520",
    "end": "297680"
  },
  {
    "text": "relational database and what they did is they said hey we can build something that can scale better give us more consistent predictable performance um by",
    "start": "297680",
    "end": "304800"
  },
  {
    "text": "reducing some of the features we give right so that's sort of like the the upside and downside of Dynamo you get",
    "start": "304800",
    "end": "310639"
  },
  {
    "text": "that that nice architecture but you also get this reduced feature set um and what I'll what I'll sort of claim today is",
    "start": "310639",
    "end": "315960"
  },
  {
    "text": "it's an awesome fit for event driven applications right so this is you know this is in my humble opinion but I think it really accentuates the upsides and",
    "start": "315960",
    "end": "322560"
  },
  {
    "text": "and mutes the downsides um the way Dynamo works all right so let's talk about",
    "start": "322560",
    "end": "328160"
  },
  {
    "start": "328000",
    "end": "419000"
  },
  {
    "text": "Dynamo in an Eda world just an overview of what I want to talk about today you know I started off with what's unique",
    "start": "328160",
    "end": "333560"
  },
  {
    "text": "about Dynamo give you a flavor of that I do want to talk a bit about what are event driven applications which I've",
    "start": "333560",
    "end": "338720"
  },
  {
    "text": "I've seen a few other people do as well but I want I want to set it up just so we have like the same terminology here as we continue to go here and also",
    "start": "338720",
    "end": "345360"
  },
  {
    "text": "register some of like hey what what's good what's hard about event driven applications and then we'll look at hey",
    "start": "345360",
    "end": "352039"
  },
  {
    "text": "why is Dynamo DB good in a producer application in a event driven architecture and why is Dynamo DB good",
    "start": "352039",
    "end": "357759"
  },
  {
    "text": "in a consumer uh who am I I'm Alex De I'm an AWS data",
    "start": "357759",
    "end": "363080"
  },
  {
    "text": "hero and I wrote the Dynamo DB book which is just a comprehensive guide to data modeling with Dynamo DB uh we're",
    "start": "363080",
    "end": "369199"
  },
  {
    "text": "going to have some books um to give away today but they didn't get shipped here in time unfortunately so sorry about",
    "start": "369199",
    "end": "374280"
  },
  {
    "text": "that uh reach out if you want to copy um I don't work for AWS but I I you know I like AWS I do a lot of work um just in",
    "start": "374280",
    "end": "381560"
  },
  {
    "text": "the Dynamo DB space um also just saying I love Poland like it's it's been super fun to visit",
    "start": "381560",
    "end": "387360"
  },
  {
    "text": "here great weather um I've worked with some really great polish Engineers over the years these are like some of my favorite people so glad to visit and",
    "start": "387360",
    "end": "393520"
  },
  {
    "text": "also I have some Polish uh you know lineage myself my great grandma Valeria",
    "start": "393520",
    "end": "399319"
  },
  {
    "text": "chisik I think uh was born here in Warsaw in 1897 I don't know if any of you maybe went to grade school with her",
    "start": "399319",
    "end": "405639"
  },
  {
    "text": "or anything like that uh but she left for Omaha Nebraska which is where I live in 1911 so she's she's been gone for a",
    "start": "405639",
    "end": "411440"
  },
  {
    "text": "while but um yeah I I think I'm like the first member of my extended family to make it back here so I'm excited to be",
    "start": "411440",
    "end": "416759"
  },
  {
    "text": "here all right cool so let's do what are",
    "start": "416759",
    "end": "422199"
  },
  {
    "start": "419000",
    "end": "904000"
  },
  {
    "text": "event-driven applications um event driven applications let's just walk through it you know using a typical architecture",
    "start": "422199",
    "end": "429560"
  },
  {
    "text": "that we have here we'll start with a user service because most applications are going to have some notion of a user",
    "start": "429560",
    "end": "435160"
  },
  {
    "text": "with that user service let's say a request comes in to create a user as part of the work it's doing within that",
    "start": "435160",
    "end": "441080"
  },
  {
    "text": "user service in this Avenger of an application right it's going to be producing onto an event bus an event",
    "start": "441080",
    "end": "446160"
  },
  {
    "text": "stream something like that it's going to be publishing an event saying what has happened in this application right so in",
    "start": "446160",
    "end": "451840"
  },
  {
    "text": "this case it's publishing this event this user created it's got some data on that and now I can have different",
    "start": "451840",
    "end": "457560"
  },
  {
    "text": "services that are subscribed to that event bus and and do some work on that right and I'm guessing a lot of youall",
    "start": "457560",
    "end": "463919"
  },
  {
    "text": "know that but I just want to point out hey we got the the producer so in terms of vocabulary we have that producer that's actually producing the event we",
    "start": "463919",
    "end": "470159"
  },
  {
    "text": "also have these consumers so those are the two big vocab words we want there um and you know most services will be both",
    "start": "470159",
    "end": "476440"
  },
  {
    "text": "producers and consumers at different times um in their lify",
    "start": "476440",
    "end": "481440"
  },
  {
    "text": "so what are event driven applications right these are applications that communicate by publishing and consuming",
    "start": "482080",
    "end": "487879"
  },
  {
    "text": "events just to contrast this with a few different types of application patterns Eric talked about this as well but like",
    "start": "487879",
    "end": "493280"
  },
  {
    "text": "hey synchronous communication right HTTP RPC so if you have like a client server a front end talking to a backend",
    "start": "493280",
    "end": "499840"
  },
  {
    "text": "synchronous communication there over HTTP I love doing that in a lot of ways cuz because you get really nice feedback",
    "start": "499840",
    "end": "506240"
  },
  {
    "text": "on um you know if there's an error if something happened it's is really rich that way it's not sort of like a a",
    "start": "506240",
    "end": "511680"
  },
  {
    "text": "murder mystery find finding out what went wrong if there's an error uh but there are some downsides to synchronous communication as well a lot of times",
    "start": "511680",
    "end": "519039"
  },
  {
    "text": "those downsides with synchronous communication can be resolved with asynchronous communication asynchronous",
    "start": "519039",
    "end": "524320"
  },
  {
    "text": "but what I call intentful so not event driven uh architectures but intentful",
    "start": "524320",
    "end": "530240"
  },
  {
    "text": "things where you're putting a record into a cue you're put you're starting off uh a state machine you know using",
    "start": "530240",
    "end": "536240"
  },
  {
    "text": "AWS step functions something like that but using it in an intentful way rather than this more decoupled way um",
    "start": "536240",
    "end": "543560"
  },
  {
    "text": "of event driven applications right so I like those patterns quite a bit as well but event driven is great too um the",
    "start": "543560",
    "end": "549640"
  },
  {
    "text": "other thing I would say is like I think sometimes event driven gets gets confused with like certain types of compute like Lambda um but you you know",
    "start": "549640",
    "end": "557079"
  },
  {
    "text": "venden applications are independent of the compute that you're using the database that you're using so we're",
    "start": "557079",
    "end": "562760"
  },
  {
    "text": "going to talk about Dy here but you can do Avent driven with relational databases with whatever you want to do there",
    "start": "562760",
    "end": "569640"
  },
  {
    "text": "and again the two big elements we're going to have there are both the producer and the",
    "start": "569640",
    "end": "574439"
  },
  {
    "text": "consumer I do want to talk about challenges with Avenger applications because I think I was sort of a slow",
    "start": "579079",
    "end": "585399"
  },
  {
    "text": "convert to aveng driven applications due to some of the challenges and the complexity you get there I think number one these are usually going to be",
    "start": "585399",
    "end": "591360"
  },
  {
    "text": "microservices right and microservices add complexity to your application right now you have to deal with deployment of",
    "start": "591360",
    "end": "598079"
  },
  {
    "text": "more services you have to deal with data boundaries and how do you sort of communicate data across that sort of thing um but event driven applications",
    "start": "598079",
    "end": "604959"
  },
  {
    "text": "are almost always going to be microservices CU I think it doesn't make that much sense to do event-driven communication within you know a larger",
    "start": "604959",
    "end": "612519"
  },
  {
    "text": "monolithic service and I think a good article sort of on this point is is from yant Trey uh the burning monk he's got",
    "start": "612519",
    "end": "619440"
  },
  {
    "text": "this this post on choreography versus orchestration in the land of service servus where he talks about hey when",
    "start": "619440",
    "end": "626000"
  },
  {
    "text": "should you use Avent driven applications use event bridge to to communicate between applications and when should you",
    "start": "626000",
    "end": "631880"
  },
  {
    "text": "use something uh more orchestration like like a step function to sort of declare",
    "start": "631880",
    "end": "636959"
  },
  {
    "text": "uh the intent that you want to do and walk through certain steps right so I think that's a really good uh piece if you haven't read that",
    "start": "636959",
    "end": "644040"
  },
  {
    "text": "one the other thing I would say is like hey event driven is often used to reduce",
    "start": "647440",
    "end": "652600"
  },
  {
    "text": "coupling um CRA and I keep messing with this and I'm freaking out",
    "start": "652600",
    "end": "658079"
  },
  {
    "text": "okay okay okay so Avent driven often used to reduce",
    "start": "658079",
    "end": "663320"
  },
  {
    "text": "coupling across your application there are a couple different types of coupling you could be met a little higher",
    "start": "663320",
    "end": "669600"
  },
  {
    "text": "sorry there we go okay I feel like I can hear my breathing it's freaking me out",
    "start": "669600",
    "end": "676760"
  },
  {
    "text": "um um so anyway it's it's often used to reduce coupling part of that is just",
    "start": "677120",
    "end": "682160"
  },
  {
    "text": "going to be like coupling of uptime right cuz you might have different workloads or different components in",
    "start": "682160",
    "end": "687760"
  },
  {
    "text": "your application that have um you know different resource needs or maybe you're using a third party service",
    "start": "687760",
    "end": "694040"
  },
  {
    "text": "and you don't want to tie your your uptime to that third party service I would say event driven application can",
    "start": "694040",
    "end": "699480"
  },
  {
    "text": "help with that but again other asynchronous patterns might be better for reducing like coupling of uptime",
    "start": "699480",
    "end": "704519"
  },
  {
    "text": "right if you have a resource intensive task or a Time intensive task kicking that off to a queue or something um",
    "start": "704519",
    "end": "710959"
  },
  {
    "text": "intentful can be better there we good cool a second type of coupling is like",
    "start": "710959",
    "end": "718399"
  },
  {
    "text": "coupling of intent and I think this is what a lot of people talk about initially when they talk about hey we're",
    "start": "718399",
    "end": "723600"
  },
  {
    "text": "decoupling we're moving to a venture ofen architectures and things like that where it's like hey you know this one",
    "start": "723600",
    "end": "729040"
  },
  {
    "text": "service is going to do something it's going to publish and then all these other services they can do whatever they want that initial service doesn't need",
    "start": "729040",
    "end": "734680"
  },
  {
    "text": "to know about that and I think that's useful in some cases but also like in a lot of cases I think that's overdone",
    "start": "734680",
    "end": "741959"
  },
  {
    "text": "like if you have I think the canonical example I see here is like some sort of ordering service or an e-commerce s",
    "start": "741959",
    "end": "748120"
  },
  {
    "text": "Service where like something is taking the order and then a different thing is fulfilling the order and it's like hey",
    "start": "748120",
    "end": "754040"
  },
  {
    "text": "you can decouple that intent but really those those are pretty coupled right if if you take the order you actually want",
    "start": "754040",
    "end": "759639"
  },
  {
    "text": "to like fulfill the order in some way it reminds me of uh I don't know if youall watch Seinfeld here but like he tries to",
    "start": "759639",
    "end": "765880"
  },
  {
    "text": "make a car rental reservation and they like take the reservation but they don't have the car for right he's like you",
    "start": "765880",
    "end": "771120"
  },
  {
    "text": "know how to take the reservation but you don't know how to hold it which is like the important part of it right so I think that decoupling of intent can be",
    "start": "771120",
    "end": "777480"
  },
  {
    "text": "good in some cases I would say like clicks stream data right if you're talking about like um you know",
    "start": "777480",
    "end": "784079"
  },
  {
    "text": "clickstream data that's coming from the front end I think if you look at like Kafka and and the way that was built at",
    "start": "784079",
    "end": "789959"
  },
  {
    "text": "LinkedIn it's taking that and and making those into like decoupled sort of datadriven recommendations or",
    "start": "789959",
    "end": "796440"
  },
  {
    "text": "notifications and things like that that's a good place where like decoupling of intent is okay but in a lot of places you do have your intent is",
    "start": "796440",
    "end": "802800"
  },
  {
    "text": "more is more coupled there so then I think the most common way you're actually like reducing coupling between",
    "start": "802800",
    "end": "809360"
  },
  {
    "text": "these applications is this coupling of the development process right where you have a large team a lot of different",
    "start": "809360",
    "end": "815440"
  },
  {
    "text": "Services a lot of things going on you don't want to have this huge monolith I think David Anderson was talking about hey a huge monolith with 35 teams all",
    "start": "815440",
    "end": "822160"
  },
  {
    "text": "working in this large monolith we want to decouple that and allow people to deploy independently and move quicker",
    "start": "822160",
    "end": "828760"
  },
  {
    "text": "and it's like hey there's there's some coupled intent there and I know like teams need to work together in different ways um around that but um um you know",
    "start": "828760",
    "end": "839120"
  },
  {
    "text": "so like there's still some coupling but you're decoupling that development process and allowing people to move faster that way and I think that's where",
    "start": "839120",
    "end": "844320"
  },
  {
    "text": "event driven applications can really be",
    "start": "844320",
    "end": "848399"
  },
  {
    "text": "useful so my big Takeaway on Avenger event application is like hey it's really great but also like understand what you're giving up I think James um e",
    "start": "851440",
    "end": "858600"
  },
  {
    "text": "did a really good talk about like observability in Avenger ofen applications and and how that's a lot harder than it is with like a",
    "start": "858600",
    "end": "863759"
  },
  {
    "text": "synchronous application or even those intentful asynchronous applications right so you really need to think about",
    "start": "863759",
    "end": "869360"
  },
  {
    "text": "that how are you observing that um how are you knowing uh who's using your events different things like that and",
    "start": "869360",
    "end": "875560"
  },
  {
    "text": "then also know no why you're decoupling and what you're decoupling um because you might have to like deal with some",
    "start": "875560",
    "end": "881320"
  },
  {
    "text": "trade-offs elsewhere in your application in your team things like [Music]",
    "start": "881320",
    "end": "887440"
  },
  {
    "text": "that all right cool so now let's talk Dynamo DB and get into that and why it works so well with event driven",
    "start": "887440",
    "end": "893399"
  },
  {
    "text": "applications right so if we go back to that inent driven application again we have our producers and our consumers I",
    "start": "893399",
    "end": "899120"
  },
  {
    "text": "want to talk about two reasons why Dynamo works so well in an event driven uh producer right and and the first",
    "start": "899120",
    "end": "905639"
  },
  {
    "start": "904000",
    "end": "1599000"
  },
  {
    "text": "problem I want to talk about is what what I've called the Dual right problem or or what's known as the Dual right problem do people generally know the",
    "start": "905639",
    "end": "911079"
  },
  {
    "text": "Dual right problem have you heard of this cool so let's talk about this let's go back to our Avenger of an application",
    "start": "911079",
    "end": "917639"
  },
  {
    "text": "we were talking about before where we have this user service and I was saying hey that user service is going to you",
    "start": "917639",
    "end": "923600"
  },
  {
    "text": "know send off this event that this user was created but that's not really the point of that service first it's got to like do something like saving that data",
    "start": "923600",
    "end": "929600"
  },
  {
    "text": "somewhere right so it's going to save it in a table make sure we can actually create that user in our application and",
    "start": "929600",
    "end": "934680"
  },
  {
    "text": "then once it's done that then it writes out to our event bus or our stream or whatever so that people can do it right",
    "start": "934680",
    "end": "939920"
  },
  {
    "text": "so what we have are are two different rights to two different external system we have our actual database where we",
    "start": "939920",
    "end": "945560"
  },
  {
    "text": "want to write that record but then we also want to publish that event right and the problem with those two events is",
    "start": "945560",
    "end": "950600"
  },
  {
    "text": "hey what happens if there's issues with your event bus or for whatever reason you can't publish that event right and",
    "start": "950600",
    "end": "956240"
  },
  {
    "text": "now you've sort of got these two external systems that are to be kept in sync in some way and now um You only",
    "start": "956240",
    "end": "963680"
  },
  {
    "text": "able to update one of them without updating the second one right so what happens there I think this is the first problem",
    "start": "963680",
    "end": "969680"
  },
  {
    "text": "you're going to run into when you're working with event driven applications and there's some bad solutions to event to the to the Dual right problem right",
    "start": "969680",
    "end": "975480"
  },
  {
    "text": "so the first one is just retries people are like hey why don't I just retry this a couple times to my event bus and that",
    "start": "975480",
    "end": "981000"
  },
  {
    "text": "can work uh but what it's going to do is it's going to add latency to your request right so now if you're creating",
    "start": "981000",
    "end": "986079"
  },
  {
    "text": "a user now you got to wait for it to be retried a couple times and more importantly like hey retries aren't going to solve all your problems there",
    "start": "986079",
    "end": "992399"
  },
  {
    "text": "like your event bus could legitimately be down or there could be issues with that service and how are you going to you know get that back in sync uh get",
    "start": "992399",
    "end": "999519"
  },
  {
    "text": "that event published eventually so rri help a little bit but not really going to save you there some people think hey",
    "start": "999519",
    "end": "1005319"
  },
  {
    "text": "what if I just flip the order of it and I'll publish the event first and then I'll write to the database but like that's not going to work right you still",
    "start": "1005319",
    "end": "1011040"
  },
  {
    "text": "have the Dual WR problem youve just flipped the order of these things I mean you could technically say",
    "start": "1011040",
    "end": "1016639"
  },
  {
    "text": "Hey you know I'm publishing an intent to create a user and now your Downstream consumers maybe when they when they consume that event need to make sure",
    "start": "1016639",
    "end": "1022759"
  },
  {
    "text": "that it actually happened but you're pushing a lot of complexity down to your your consumers that I I would not",
    "start": "1022759",
    "end": "1028000"
  },
  {
    "text": "recommend and then finally you could use a database transaction right so in your database maybe you open a transaction",
    "start": "1028000",
    "end": "1035079"
  },
  {
    "text": "you write that user to your record to your user's table and then while keeping that transaction open now you can reach",
    "start": "1035079",
    "end": "1041120"
  },
  {
    "text": "out to your external service try and publish that um to the to the event bus there if that doesn't work then you roll",
    "start": "1041120",
    "end": "1047520"
  },
  {
    "text": "back the entire transaction action um and and prevent that and but there's some downsides there too like number one",
    "start": "1047520",
    "end": "1054440"
  },
  {
    "text": "like the commit of your your transaction could still fail so now you have like sort of a triple right problem rather than just a dual WR problem um it also",
    "start": "1054440",
    "end": "1061440"
  },
  {
    "text": "like blocks creation of your users or blocks creation of whatever like actual event you want to do you're blocking",
    "start": "1061440",
    "end": "1067160"
  },
  {
    "text": "that if your event bus is is actually down uh and then finally you're just you're just holding these open database",
    "start": "1067160",
    "end": "1072520"
  },
  {
    "text": "connections right and and sort of tying up resources and locks and all sorts of things in your database so you don't really want to do that one either",
    "start": "1072520",
    "end": "1079360"
  },
  {
    "text": "so those are three I would say bad solutions to the Dual right problem uh but there are a couple good Solutions so",
    "start": "1079360",
    "end": "1085000"
  },
  {
    "text": "we're in luck here uh first one is you can do What's called the transactional outbox pattern right where when you're",
    "start": "1085000",
    "end": "1091320"
  },
  {
    "text": "doing this you you open up a transaction to your database and you're writing a user record but you're also writing you",
    "start": "1091320",
    "end": "1097159"
  },
  {
    "text": "know some intent to deliver an event or or that a user was updated or created or something into a separate table in your",
    "start": "1097159",
    "end": "1103600"
  },
  {
    "text": "application and then something once you commit that you know something's going to be sort of processing that out box",
    "start": "1103600",
    "end": "1109120"
  },
  {
    "text": "table publishing events or doing whatever needs to happen with that and you get some transactionality you get some resiliency around um around",
    "start": "1109120",
    "end": "1116480"
  },
  {
    "text": "publishing that event without blocking it um you know if your event bus happens to be down that can work um it does",
    "start": "1116480",
    "end": "1123480"
  },
  {
    "text": "require you know it add some additional load to your database you're doing more transactions you're writing more rows",
    "start": "1123480",
    "end": "1128679"
  },
  {
    "text": "and things like that and then you're also pulling from that table quite frequently the better approach the best",
    "start": "1128679",
    "end": "1134600"
  },
  {
    "text": "approach I would say is just using change data capture and this is where Dynamo DB can come in right so if we go back back to our our service here right",
    "start": "1134600",
    "end": "1141039"
  },
  {
    "text": "let's let's remove that second right to our event bus let's change that RDS to a Dynamo DB table and now on our Dynamo DB",
    "start": "1141039",
    "end": "1147440"
  },
  {
    "text": "table let's enable Dynamo DB streams right and what Dynamo DB streams do is they anytime you write to your database",
    "start": "1147440",
    "end": "1153280"
  },
  {
    "text": "you an insert update delete anything like that it's going to drop a record of that into your Dynamo DB stream and now",
    "start": "1153280",
    "end": "1159679"
  },
  {
    "text": "this is a stream just like Kinesis or koffka or anything like that you can consume off that consume those right events and you can package them up and",
    "start": "1159679",
    "end": "1166320"
  },
  {
    "text": "publish on an event to your event bus and and get those consumed by your services there right so so what's going",
    "start": "1166320",
    "end": "1172320"
  },
  {
    "text": "on with dyb streams is every right operation on your table is going to get placed into a d Dynamo DB stream that",
    "start": "1172320",
    "end": "1177720"
  },
  {
    "text": "you could then process and this is going to be easily consumable via a Lambda function you can also process it",
    "start": "1177720",
    "end": "1183440"
  },
  {
    "text": "yourself like on ec2 instances or containers if you want to but very easy to do with Lambda function which is very",
    "start": "1183440",
    "end": "1189200"
  },
  {
    "text": "nice and also if you're doing it VI a Lambda function it's not going to cost you anything so Dynamo DB streams",
    "start": "1189200",
    "end": "1194960"
  },
  {
    "text": "there's no cost actually right into those streams to enable it the only costs you have are reading from that streams and if you do it from Lambda",
    "start": "1194960",
    "end": "1200679"
  },
  {
    "text": "it's free so um pretty good pretty easy to use",
    "start": "1200679",
    "end": "1206000"
  },
  {
    "text": "there in terms of working with Dynamo DB streams it's very similar to mechanics to kesa Kinesis and Kafka so if you saw",
    "start": "1206720",
    "end": "1213960"
  },
  {
    "text": "on heat presentation earlier and learned about like stream processing some of the failure modes on consumers I think",
    "start": "1213960",
    "end": "1219039"
  },
  {
    "text": "that's really uh useful and and similar here you know basically you have an ordered event log where the consumers",
    "start": "1219039",
    "end": "1225679"
  },
  {
    "text": "are tracking the positions so you're not like popping off events and and processing like in a queue you're they're just staying there and you're",
    "start": "1225679",
    "end": "1231200"
  },
  {
    "text": "tracking your position in this event log the one thing I would say is like hey you don't want to use Dynamo streams",
    "start": "1231200",
    "end": "1237919"
  },
  {
    "text": "as your event bus directly even though you can use Kinesis or kofka as your event bus and the the reason for this",
    "start": "1237919",
    "end": "1243919"
  },
  {
    "text": "you know I guess what you want to do there is you want to have that event bus in the middle you might be tempted to take that event bus out and just have",
    "start": "1243919",
    "end": "1249919"
  },
  {
    "text": "your services your Downstream Services read from that Damo DB stream uh but the problem with this is Dynamo wants to",
    "start": "1249919",
    "end": "1256480"
  },
  {
    "text": "limit the amount of consumers you have on the stream they really want only want you to have two concurrent consumers on that stream so you're probably going to",
    "start": "1256480",
    "end": "1262640"
  },
  {
    "text": "get throttled here U it's not going to be a good situation so you want to put that event bus in the middle or or some",
    "start": "1262640",
    "end": "1267799"
  },
  {
    "text": "other consumer and then publish the event bus in the middle that's that's better meant for fan out so there's that",
    "start": "1267799",
    "end": "1273240"
  },
  {
    "text": "limit of two concurrent consumers on that stream another problem is like hey that's going to be a pretty raw format",
    "start": "1273240",
    "end": "1279159"
  },
  {
    "text": "that you're getting from that database right it's going to be like kind of a database record it's going to have uh your PK and SK like sort of internal",
    "start": "1279159",
    "end": "1286159"
  },
  {
    "text": "database stuff um a lot of a lot of stuff that Downstream consumers aren't going to care about whereas like hey",
    "start": "1286159",
    "end": "1291880"
  },
  {
    "text": "your your domain your service can take that event it can package it up and understand hey was this a new user",
    "start": "1291880",
    "end": "1297120"
  },
  {
    "text": "that's created is it an updated is it deleted things like that and package it up into a nicer format to be consumed by",
    "start": "1297120",
    "end": "1302559"
  },
  {
    "text": "your by your end users so yeah my recommendation there is the service that's actually owning that",
    "start": "1302559",
    "end": "1307919"
  },
  {
    "text": "Dynamo DB table that's the one that should consume those records it can just use that one consumer there to do that",
    "start": "1307919",
    "end": "1313559"
  },
  {
    "text": "and and publish events from its own stream",
    "start": "1313559",
    "end": "1318039"
  },
  {
    "text": "if you want to know more about the Dual right problem this guy Gunner moring he's really great about it he's got uh this idea of friends don't let friends",
    "start": "1320640",
    "end": "1326080"
  },
  {
    "text": "do dual rights and you really do run into a lot of problems with those dual rights where you get inconsistent system so I would strongly avoid that if you",
    "start": "1326080",
    "end": "1332200"
  },
  {
    "text": "can um if you want to look in this in like other non- Dynamo DB places deum is",
    "start": "1332200",
    "end": "1337799"
  },
  {
    "text": "is this tool that's used to basically give you similar semantics from like relational databases even mongodb where",
    "start": "1337799",
    "end": "1343720"
  },
  {
    "text": "it's going to be tailing like the bin log or the rep some sort of replication log for those databas bases and creating",
    "start": "1343720",
    "end": "1349400"
  },
  {
    "text": "events and and putting them into kofka Forest so you can get some similar semantics there the one thing I like",
    "start": "1349400",
    "end": "1354960"
  },
  {
    "text": "about Dynamo is again it's got that that multi-tier decoupled architecture so when it's pushing those events to those",
    "start": "1354960",
    "end": "1360880"
  },
  {
    "text": "streams you can consume that that stream and it's not going to have any impact on your Upstream database at all it's on a",
    "start": "1360880",
    "end": "1366080"
  },
  {
    "text": "totally different piece of uh it's on a totally different node it's not going to be messing with your storage nodes or anything like that as compared to to",
    "start": "1366080",
    "end": "1372480"
  },
  {
    "text": "beum which is like sharing that those Resources with your your actual production traffic",
    "start": "1372480",
    "end": "1378820"
  },
  {
    "text": "[Music] all right so that's our first issue is the Dual right problem with a producer",
    "start": "1378820",
    "end": "1384240"
  },
  {
    "text": "uh I got another scary problem here though the giant table problem right so we just got our two problems in the the Eda producer world and I thought of this",
    "start": "1384240",
    "end": "1390880"
  },
  {
    "text": "one when I was sort of Surfing Twitter one day and I saw Sam Lambert who he's the CEO of Planet scale which is like a",
    "start": "1390880",
    "end": "1396400"
  },
  {
    "text": "sharded MySQL so uh a very scalable MySQL solution he asked people hey what's the name of your largest database",
    "start": "1396400",
    "end": "1403760"
  },
  {
    "text": "table I think a lot of people empathize with Josh when Josh Brun Shad when he said events right I just have this table",
    "start": "1403760",
    "end": "1409360"
  },
  {
    "text": "with events in it and it has uh just like this mess of data and and you think if you have this um with this giant",
    "start": "1409360",
    "end": "1416240"
  },
  {
    "text": "table problem you might have an event table that's much larger than your other application data right if you're doing that transactional outbox pattern your",
    "start": "1416240",
    "end": "1423159"
  },
  {
    "text": "outbox that's that's tracking all the changes to these records is going to be much bigger than your your your sort of",
    "start": "1423159",
    "end": "1428640"
  },
  {
    "text": "core data right because you only create a user once or you update it and you have that one user record but every time you make an update you have to put a",
    "start": "1428640",
    "end": "1434760"
  },
  {
    "text": "record in that transactional outbox table or maybe you're doing like the storage first pattern things like that and you're just storing a lot of sort of",
    "start": "1434760",
    "end": "1440760"
  },
  {
    "text": "like raw data in this events table that that's getting sent out elsewhere you also might have like a",
    "start": "1440760",
    "end": "1447799"
  },
  {
    "text": "pretty significant variability in usage over time so not only do you have this giant table that you need to maintain the storage and indexes and all that",
    "start": "1447799",
    "end": "1453480"
  },
  {
    "text": "stuff for but you might have pretty different variability in usage right and I look at Luke von doners good who he's",
    "start": "1453480",
    "end": "1459279"
  },
  {
    "text": "an AWS hero he just posted on post nl's Serv Journey he does a lot of event driven stuff that's really good but he",
    "start": "1459279",
    "end": "1464600"
  },
  {
    "text": "showed this is what post nl's traffic looks like during the day during the week and you can see hey there's",
    "start": "1464600",
    "end": "1470000"
  },
  {
    "text": "significant variability within a day where it goes up you know an order of magnitude during a day or you can see",
    "start": "1470000",
    "end": "1475480"
  },
  {
    "text": "like during the week hey Sunday is not getting any traffic as compared to Tuesday Wednesday Thursday much higher traffic than the rest of those right so",
    "start": "1475480",
    "end": "1481960"
  },
  {
    "text": "you can see significant variability during the day and in most traditional databases are you going to make you provision for Peak on that uh with",
    "start": "1481960",
    "end": "1489399"
  },
  {
    "text": "Dynamo you don't have to do that so how does Dynamo DB help here not only do you get that consistent performance at any",
    "start": "1489399",
    "end": "1494960"
  },
  {
    "text": "scale like we talked about hey your events table no matter how big it is it's not 200 terabytes you're going to be fine there um but addition to that",
    "start": "1494960",
    "end": "1502360"
  },
  {
    "text": "you can you have flexible building and scaling to sort of scale your database up and down for your usage as needed",
    "start": "1502360",
    "end": "1508520"
  },
  {
    "text": "right so Luke was showing hey this is our traffic during the day he also showed their Dynamo DB consumption and",
    "start": "1508520",
    "end": "1513960"
  },
  {
    "text": "provision there so he's got this chart that that blue that's how much they're actually consuming in Dynamo during the",
    "start": "1513960",
    "end": "1519679"
  },
  {
    "text": "week and then that that reddish orange is is how much they're provisioned for in their Dynamo DB table so they've got",
    "start": "1519679",
    "end": "1525559"
  },
  {
    "text": "Auto scaling set up and you can see how it just Falls follows their traffic pretty well and you can see there's",
    "start": "1525559",
    "end": "1531440"
  },
  {
    "text": "there's like a 10 or 20x um difference between like their Peak and their trough in terms of how much prison capacity",
    "start": "1531440",
    "end": "1537760"
  },
  {
    "text": "they're doing which is it's just not something you're going to do with relational database right that's going to be pretty static in terms of like how",
    "start": "1537760",
    "end": "1543840"
  },
  {
    "text": "big that is but with Dynamo you can scale that up um during the day during the week during the month to meet your",
    "start": "1543840",
    "end": "1550159"
  },
  {
    "text": "needs so Dynamo's got that flexible billing and scaling to change your capacity up and down to meet needs if",
    "start": "1550159",
    "end": "1556559"
  },
  {
    "text": "you don't know how much capacity you need if if it's unpredictable if you just don't want to deal that with that it also has like a pay-per you spilling",
    "start": "1556559",
    "end": "1561919"
  },
  {
    "text": "option so just like S3 sqs Lambda API Gateway like all these Services we know and love you can use Dynamo and just do",
    "start": "1561919",
    "end": "1569240"
  },
  {
    "text": "paper use and not have to provision any capacity for it and it's just going to handle that um almost without limit",
    "start": "1569240",
    "end": "1575360"
  },
  {
    "text": "unless you like you know some very extreme situations it's going to work pretty well on",
    "start": "1575360",
    "end": "1580880"
  },
  {
    "text": "that so just looking at Dynamo in an Eda producer I think it solves two of the problems in that world of a producer",
    "start": "1581360",
    "end": "1587120"
  },
  {
    "text": "right that dual right problem where you're keeping your systems out of sync or getting your systems out of sync and that giant table problem where you have",
    "start": "1587120",
    "end": "1593000"
  },
  {
    "text": "this this amount of data that's that's sort of disproportionate has has weird workloads and and things like",
    "start": "1593000",
    "end": "1599039"
  },
  {
    "start": "1599000",
    "end": "2122000"
  },
  {
    "text": "that all right so what about on the other end of the spectrum right how does Dynamo work in an Eda consumer so",
    "start": "1599039",
    "end": "1604559"
  },
  {
    "text": "looking back at our avend driven applications right over on this consumer side how is how is Dynamo helping",
    "start": "1604559",
    "end": "1610200"
  },
  {
    "text": "here and I think there are two points I want to make out here and I I mentioned earlier about um Dynamo DB's feature set",
    "start": "1610200",
    "end": "1617760"
  },
  {
    "text": "right it has a a more a targeted narrower feature set and I think that's less of a concern in this world of Avent",
    "start": "1617760",
    "end": "1624240"
  },
  {
    "text": "driven architecture right so generally when you have these aveng driven architectures you have smaller more",
    "start": "1624240",
    "end": "1629279"
  },
  {
    "text": "focused Services you don't have these larger monoliths that are that are doing a lot of things storing a lot of different kinds of data right so again",
    "start": "1629279",
    "end": "1635880"
  },
  {
    "text": "we talked about what's unique to Dynamo it has that that narrower feature set what do I mean by that I think the",
    "start": "1635880",
    "end": "1643120"
  },
  {
    "text": "easiest way to think about it up front is like hey there's no query planner in Dynamo so like when you're submitting a query in a relational database or even",
    "start": "1643120",
    "end": "1650240"
  },
  {
    "text": "mongodb right it's going to parse that query it's going to you know look at your your table definitions your indexes",
    "start": "1650240",
    "end": "1656159"
  },
  {
    "text": "your table statistics all that stuff and figure out the most efficient way to handle that um Dynamo doesn't have a query planner it's basically giving you",
    "start": "1656159",
    "end": "1662159"
  },
  {
    "text": "like direct access to these data structures in like this this horizontally scalable way and because it",
    "start": "1662159",
    "end": "1667720"
  },
  {
    "text": "doesn't have a query planner it's it's missing some like core features that you miss from like a more uh featureful",
    "start": "1667720",
    "end": "1673440"
  },
  {
    "text": "database right it doesn't have joins you can't join data from two different tables together you can't do aggregation",
    "start": "1673440",
    "end": "1679360"
  },
  {
    "text": "so you can't say hey get all this user get all these user records and sum them up and tell me what that total is or",
    "start": "1679360",
    "end": "1684640"
  },
  {
    "text": "what's the largest order that this customers ever made or what's the smallest reading from this iot sensor or anything like that no aggregations in",
    "start": "1684640",
    "end": "1690559"
  },
  {
    "text": "Dynamo and it doesn't even have like flexible filtering right what if you wanted to do like index intersections",
    "start": "1690559",
    "end": "1696000"
  },
  {
    "text": "and use multiple indexes to help with a query it's not going to do that it doesn't have any of of those sorts of",
    "start": "1696000",
    "end": "1701080"
  },
  {
    "text": "things and I think this is like the biggest objection I get from Dynamo is like hey it's it's missing a lot of the things I wish it had um so even though",
    "start": "1701080",
    "end": "1707760"
  },
  {
    "text": "it has has that consistent performance at any scale uh because it's missing these things it's it's hard to use but I",
    "start": "1707760",
    "end": "1712799"
  },
  {
    "text": "think that's less of an issue again in in this world of Adventure of an architecture where we have these like narrower Services right the mail service",
    "start": "1712799",
    "end": "1719679"
  },
  {
    "text": "the widget service the team service whatever it's only like they're only dealing with one or two entities you're not really um doing these these large",
    "start": "1719679",
    "end": "1725840"
  },
  {
    "text": "joints or aggregations or things like that right so I think Dynamo's limitations are less relevant in a world",
    "start": "1725840",
    "end": "1731159"
  },
  {
    "text": "of event driven applications",
    "start": "1731159",
    "end": "1735200"
  },
  {
    "text": "so Avenger one applications like we said it's microservices so usually smaller applications I think you're also like",
    "start": "1738399",
    "end": "1744919"
  },
  {
    "text": "accustomed to dealing with data duplication because these these consumers they're like Downstream applications they're not the owners of",
    "start": "1744919",
    "end": "1751000"
  },
  {
    "text": "that Source data so they're used to sort of dealing with duplication and and and uh denormalization and things like that",
    "start": "1751000",
    "end": "1756640"
  },
  {
    "text": "which are important in um Dynamo's sort of nosql modeling there and then you just have those like",
    "start": "1756640",
    "end": "1762720"
  },
  {
    "text": "smaller more focused access patterns right like what verer vogo was saying you're usually just getting an individual record maybe you're operating",
    "start": "1762720",
    "end": "1768840"
  },
  {
    "text": "on a range of Records but you don't have like these giant joins and queries across multiple different tables or or",
    "start": "1768840",
    "end": "1774399"
  },
  {
    "text": "lots of complex filtering generally so that's how Dynamo Works uh",
    "start": "1774399",
    "end": "1781399"
  },
  {
    "text": "or helps an Eda consumer with with those small Focus Services I think I think it mitigates some of those downsides those",
    "start": "1781399",
    "end": "1786760"
  },
  {
    "text": "event driven applications another thing um and Eric touched on this a little bit is just it it does help with idempotency",
    "start": "1786760",
    "end": "1793320"
  },
  {
    "text": "and duplication management right so you're going to have duplicates you're going to have failures in your event",
    "start": "1793320",
    "end": "1798679"
  },
  {
    "text": "driven architecture right it's really hard some would say impossible to have exactly one messaging it sort of depends",
    "start": "1798679",
    "end": "1804080"
  },
  {
    "text": "on definition there but like likely you're not going to get uh exactly once delivery of messages it's hard to have",
    "start": "1804080",
    "end": "1810880"
  },
  {
    "text": "idempotence in your messaging system and even like what Eric was showing about hey you can do you can get idempotence",
    "start": "1810880",
    "end": "1817120"
  },
  {
    "text": "in your sqs 5q you can get it in your state machines you can't get it in event",
    "start": "1817120",
    "end": "1822240"
  },
  {
    "text": "Bridge right that's just not meant for it message messaging systems aren't as good for that sort of thing but the good",
    "start": "1822240",
    "end": "1828360"
  },
  {
    "text": "thing is Dynamo is actually really good at at managing duplicates um or or handling idempotency so Dynamo has",
    "start": "1828360",
    "end": "1834760"
  },
  {
    "text": "condition Expressions which can be surprising to people because people hear that hey Dynamo has eventual consistency",
    "start": "1834760",
    "end": "1840760"
  },
  {
    "text": "I've dealt with eventual consisten consistency in something like Cassandra I know I can't like manage conditions",
    "start": "1840760",
    "end": "1847120"
  },
  {
    "text": "that way uh but Dynamo actually has some architectural differences with Cassandra that that make it work better so I think",
    "start": "1847120",
    "end": "1853120"
  },
  {
    "text": "eventual consistency is less of an issue um I would love to go deep on the architecture but um I I don't think I",
    "start": "1853120",
    "end": "1860799"
  },
  {
    "text": "can but just like a little sense of it right if we looked at that architecture and look at these storage nodes uh these storage noes are probably be like two",
    "start": "1860799",
    "end": "1867159"
  },
  {
    "text": "terabytes of data holding all this data from a lot of different customers if we look at Dynamo and what's happening",
    "start": "1867159",
    "end": "1872600"
  },
  {
    "text": "behind the scenes right if you have a Dynamo DB table what they're going to be doing is sharding your data across a lot",
    "start": "1872600",
    "end": "1877840"
  },
  {
    "text": "of different partitions right so basically every 10 gigs of data they're going to Shard that and put it on a different partition put it on a",
    "start": "1877840",
    "end": "1883080"
  },
  {
    "text": "different storage node that's collocated with all these other different nodes so if you look at those tables that have",
    "start": "1883080",
    "end": "1888760"
  },
  {
    "text": "200 terabytes they're going to be spread across like 2,000 storage nodes right something like that and if you drill",
    "start": "1888760",
    "end": "1894679"
  },
  {
    "text": "into one of these partitions oops sorry I guess yeah when a request comes in that request router is figuring out",
    "start": "1894679",
    "end": "1899799"
  },
  {
    "text": "which partition the request goes to and if you look at one of these partitions right and drill into that that's",
    "start": "1899799",
    "end": "1905559"
  },
  {
    "text": "actually going to be three nodes working together to replicate this data to give you better durability give you better availability and this is where some of",
    "start": "1905559",
    "end": "1912320"
  },
  {
    "text": "that eventual consistency on Dynamo comes in this is going to be called a replica group um where all these noes",
    "start": "1912320",
    "end": "1918080"
  },
  {
    "text": "are working together and when a WR comes into Dynamo DB it it's going to hit that and it's going to make sure it commits",
    "start": "1918080",
    "end": "1923360"
  },
  {
    "text": "to two of those three nodes before it acknowledges it back to you that eventual consistency can come can come",
    "start": "1923360",
    "end": "1928639"
  },
  {
    "text": "on the reads if you hit that third note if it's trailing but the important thing here is Dynamo has a leader it has a",
    "start": "1928639",
    "end": "1934240"
  },
  {
    "text": "strong leader model within its replica group and this is different from Cassandra this is different from the original Dynamo and that allows you to",
    "start": "1934240",
    "end": "1941000"
  },
  {
    "text": "use condition Expressions right so condition Expressions again Dynamo uses that strong leader model this is",
    "start": "1941000",
    "end": "1946360"
  },
  {
    "text": "different than Apache Cassandra or the original Dynamo which are some of those like original nosql databases similar to",
    "start": "1946360",
    "end": "1952600"
  },
  {
    "text": "Dynamo DB in certain ways but different enough especially in this that that you can um I think you can get some better",
    "start": "1952600",
    "end": "1959880"
  },
  {
    "text": "um capabilities out of it the key here is you can specify conditions on any write operation you do",
    "start": "1959880",
    "end": "1966679"
  },
  {
    "text": "so when you write to Dynamo you can say hey make sure that this doesn't exist or make sure that this condition is true",
    "start": "1966679",
    "end": "1971720"
  },
  {
    "text": "and if that condition is false the right is rejected so Eric was talking about like using an idency token in your",
    "start": "1971720",
    "end": "1978519"
  },
  {
    "text": "events right and you can use that idency token or some other identifier maybe it's a user ID whatever it is to avoid",
    "start": "1978519",
    "end": "1985399"
  },
  {
    "text": "double processing items right and so whether that's an upstream system that's like double publishing events for some",
    "start": "1985399",
    "end": "1990799"
  },
  {
    "text": "reason you need to D duplicate there or whether that's hey you're you're processing a batch of records and and",
    "start": "1990799",
    "end": "1996320"
  },
  {
    "text": "maybe you know you had a failure halfway through and you reprocess that batch you can make sure you're not double processing some of those records",
    "start": "1996320",
    "end": "2004840"
  },
  {
    "text": "there so I like to think of Dynamo as like a pool of idency and there's like",
    "start": "2004960",
    "end": "2010080"
  },
  {
    "text": "you know rivers of potential duplicates in in your messages systems like that but then you have Dynamo which like can",
    "start": "2010080",
    "end": "2015240"
  },
  {
    "text": "enforce that the idempotency for you so you can use condition Expressions",
    "start": "2015240",
    "end": "2020399"
  },
  {
    "text": "those are going to work for single item constraints so if you're working on a single record and just saying hey make sure this user doesn't already exist or",
    "start": "2020399",
    "end": "2025519"
  },
  {
    "text": "something like that you can that's what condition expressions are great for sometimes you need to have conditions across multiple different records and",
    "start": "2025519",
    "end": "2031480"
  },
  {
    "text": "that's where Dynamo does have transactions right people think of transactions as not a nosql thing that's more of a relational database thing but",
    "start": "2031480",
    "end": "2038080"
  },
  {
    "text": "dynamos added transactions uh 5 years ago or so so they have a really robust transaction thing where if you need to",
    "start": "2038080",
    "end": "2044039"
  },
  {
    "text": "submit multiple rights that either succeed or fail together you can do that in a Dynamo transaction so if you have",
    "start": "2044039",
    "end": "2049200"
  },
  {
    "text": "five items that you need to write conditions on all of them and one of them fails it'll roll back that entire",
    "start": "2049200",
    "end": "2054280"
  },
  {
    "text": "batch for you um why is this useful I'd say um so",
    "start": "2054280",
    "end": "2059960"
  },
  {
    "text": "this is going be useful when you need to manipulate multiple records at once this is actually like less common in most",
    "start": "2059960",
    "end": "2066040"
  },
  {
    "text": "event driven applications right because you're down Downstream consumers aren't usually responsible for maintaining",
    "start": "2066040",
    "end": "2071440"
  },
  {
    "text": "constraints right if you're like if your Upstream service is creating a user your Downstream service is going to say hey that user already exists right it's",
    "start": "2071440",
    "end": "2077480"
  },
  {
    "text": "already it's asynchronous it's decoupled like it can't really make that claim on it but sometimes you might want to like",
    "start": "2077480",
    "end": "2082720"
  },
  {
    "text": "maintain counts or something like that where you're you know inserting a record but you're also incrementing account somewhere else and doing that in a",
    "start": "2082720",
    "end": "2088679"
  },
  {
    "text": "Dynamo transaction with conditions can be a good way to to maintain that so Dynamo DB transactions are great",
    "start": "2088679",
    "end": "2095560"
  },
  {
    "text": "for multi-atom constraints and then just going further on idency you can with Dynamo DB transactions you",
    "start": "2095560",
    "end": "2101839"
  },
  {
    "text": "can actually include an idency token which is just like some some token you send up with your transaction it'll make",
    "start": "2101839",
    "end": "2107320"
  },
  {
    "text": "sure that that request is not double processed at all that's only within a 10-minute window so I I think it's kind",
    "start": "2107320",
    "end": "2112440"
  },
  {
    "text": "of limited how useful that is but I think the condition Expressions Dynamo DB transactions are really useful",
    "start": "2112440",
    "end": "2118880"
  },
  {
    "text": "here all right so that's how Dynamo is useful in an Eda consumer let's let's wrap this up with some some takeaways",
    "start": "2119280",
    "end": "2125359"
  },
  {
    "start": "2122000",
    "end": "2193000"
  },
  {
    "text": "here um big takeaways here is like hey Dynamo DB is unique if if you're using Dynamo DB um it's going to be different",
    "start": "2125359",
    "end": "2132440"
  },
  {
    "text": "than a relational database again it has some really strong benefits and capabilities it also has some unique",
    "start": "2132440",
    "end": "2138079"
  },
  {
    "text": "downsides but I I think they do work so like in terms of its strengths right that predictable performance at any scale it's really nice it's essentially",
    "start": "2138079",
    "end": "2144359"
  },
  {
    "text": "set it and forget it right assuming you've modeled your data correctly you're just not going to have to worry about this like sort of De uh your",
    "start": "2144359",
    "end": "2149960"
  },
  {
    "text": "performance degrading over time it also has those Dynamic scaling capabilities where like you can change",
    "start": "2149960",
    "end": "2157000"
  },
  {
    "text": "how much capacity how much throughput you have throughout the day and really save a lot of money in a way that you can't R the relational database or you",
    "start": "2157000",
    "end": "2162760"
  },
  {
    "text": "can do that pay-per-view spilling as well and then because it has that strong leader model in contrast to like some",
    "start": "2162760",
    "end": "2168359"
  },
  {
    "text": "earlier nosql databases you can still maintain constraints and handle conditions and things like that that one",
    "start": "2168359",
    "end": "2174160"
  },
  {
    "text": "constraint that it does have is just like hey limited query flexibility right it's not going to give you a lot of flexibility on your queries but again in",
    "start": "2174160",
    "end": "2180640"
  },
  {
    "text": "a world of Avent driven applications this is usually not as important so my big claim there is hey Avent",
    "start": "2180640",
    "end": "2187359"
  },
  {
    "text": "driven applications benefit from strength and don't need the missing features um from Dynamo so that's what I",
    "start": "2187359",
    "end": "2194000"
  },
  {
    "start": "2193000",
    "end": "2211000"
  },
  {
    "text": "have um thanks for coming on",
    "start": "2194000",
    "end": "2198599"
  }
]