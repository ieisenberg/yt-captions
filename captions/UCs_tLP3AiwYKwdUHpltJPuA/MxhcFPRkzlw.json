[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": "[Music]",
    "start": "3510",
    "end": "7529"
  },
  {
    "text": "okay so let's start thank you all for coming my name is Dmytro rich and I'm a lead",
    "start": "12049",
    "end": "19530"
  },
  {
    "text": "software engineer at free to move here in Berlin and I'm going to be talking about the world after micro service",
    "start": "19530",
    "end": "26490"
  },
  {
    "start": "22000",
    "end": "43000"
  },
  {
    "text": "migration with service mesh and contract testing so we're going to talk about how",
    "start": "26490",
    "end": "32308"
  },
  {
    "text": "and why we split our analytic system and what happens what happened afterwards what were the the errors that the",
    "start": "32309",
    "end": "39840"
  },
  {
    "text": "problems that we encountered and how we solve them so this is the brief edge",
    "start": "39840",
    "end": "45170"
  },
  {
    "text": "agenda first I'm going to talk about motivation again why we did what we did",
    "start": "45170",
    "end": "51690"
  },
  {
    "text": "and then we're gonna deep type into service mesh concept and contract",
    "start": "51690",
    "end": "57180"
  },
  {
    "text": "testing and see how they fit into this whole micro service ecosystem so one of",
    "start": "57180",
    "end": "63480"
  },
  {
    "start": "61000",
    "end": "172000"
  },
  {
    "text": "the things my company does is the car sharing aggregation so the idea is that you have one app for all this car",
    "start": "63480",
    "end": "70920"
  },
  {
    "text": "scooter bike sharing providers and we had to integrate them somehow into our system so when you are a start-up of",
    "start": "70920",
    "end": "79049"
  },
  {
    "text": "course you wanna deliver as fast as you can and you don't care about the technical depth that you're creating",
    "start": "79049",
    "end": "85170"
  },
  {
    "text": "that's gonna come back afterwards and bite you in the arse so this is what happened here exactly like in many",
    "start": "85170",
    "end": "91619"
  },
  {
    "text": "companies around here so all these providers were implemented inside of a monolith but not just a regular monolith",
    "start": "91619",
    "end": "98490"
  },
  {
    "text": "but from my personal view the worst kind so each of the providers was implemented",
    "start": "98490",
    "end": "105600"
  },
  {
    "text": "as a separate library and then hooked into the into the main system so discretes later on disk reads problems",
    "start": "105600",
    "end": "112860"
  },
  {
    "text": "when you want to debug stuff you have to like change the library publish the code or import the library tests that you see",
    "start": "112860",
    "end": "118560"
  },
  {
    "text": "it crashes then do it again and so on but this was not the main point why we started doing all this so the problem",
    "start": "118560",
    "end": "125250"
  },
  {
    "text": "was that you would clean test check everything locally and you will see",
    "start": "125250",
    "end": "130950"
  },
  {
    "text": "everything's fine afterwards you deploy your system and two hours later you get class not found",
    "start": "130950",
    "end": "136620"
  },
  {
    "text": "exception what's going on so the one of the problem is the trio's Scala and all",
    "start": "136620",
    "end": "144990"
  },
  {
    "text": "these libraries use slightly different versions of third-party libraries so usually this is not a problem but the",
    "start": "144990",
    "end": "151620"
  },
  {
    "text": "Scala you change from version zero point seven to zero point eight and everything is like wrong the package names a",
    "start": "151620",
    "end": "157980"
  },
  {
    "text": "different half of the classes are missing and that library is doing something completely else now so not a",
    "start": "157980",
    "end": "163500"
  },
  {
    "text": "lot of attentions what was paid when this was developed so we have to fix this somehow right to split is model it",
    "start": "163500",
    "end": "170360"
  },
  {
    "text": "so we observed it as kind of a black box and so what kind of requests are coming",
    "start": "170360",
    "end": "177420"
  },
  {
    "text": "into it and we we saw that we can somehow group them into two categories so there are requests that work with",
    "start": "177420",
    "end": "184860"
  },
  {
    "text": "multiple providers like you want to fetch vehicles for providers given in the query parameter and then there are",
    "start": "184860",
    "end": "191190"
  },
  {
    "text": "requests that work with single provider like you want to create a booking to book us particular car and after",
    "start": "191190",
    "end": "199020"
  },
  {
    "text": "analyzing this we proposed an architecture that looks something like this so nothing fancy there is an",
    "start": "199020",
    "end": "205950"
  },
  {
    "text": "initial gate weight component which we call which determines whether the call goes directly to the provider or goes to",
    "start": "205950",
    "end": "213270"
  },
  {
    "text": "the aggregator component so the first one will go to the aggregate of the second one will go to the provider",
    "start": "213270",
    "end": "219120"
  },
  {
    "text": "directly and then the aggregator zips simply like wraps up this query string",
    "start": "219120",
    "end": "227370"
  },
  {
    "text": "causing the individual providers assembles the JSON and gives back to the result again nothing fancy but we had a",
    "start": "227370",
    "end": "235110"
  },
  {
    "text": "rather requirement that all this should be very dynamic so initially we would",
    "start": "235110",
    "end": "241380"
  },
  {
    "text": "set up the gateway and the aggregator and all the traffic would go to the monolith as we extract one provider the",
    "start": "241380",
    "end": "247950"
  },
  {
    "text": "traffic should just start slowing to that new provider and eventually there will be no traffic going to the back end",
    "start": "247950",
    "end": "253470"
  },
  {
    "text": "to the monolith and we can just remove it at the same time people are adding",
    "start": "253470",
    "end": "258570"
  },
  {
    "text": "new providers so again as I developed new provider I deployed I immediately want to see it in the in the app I don't",
    "start": "258570",
    "end": "265140"
  },
  {
    "text": "want to change any enums any configuration files or stuff like that so we need a kind of a",
    "start": "265140",
    "end": "271030"
  },
  {
    "text": "dynamic routing to support this and this is what we're service mesh came into",
    "start": "271030",
    "end": "277480"
  },
  {
    "start": "274000",
    "end": "411000"
  },
  {
    "text": "place so we started looking what's there and we found this this concept which could be defined as follows I'll take a",
    "start": "277480",
    "end": "284500"
  },
  {
    "text": "quote from this website so sarrish master is a dedicated infrastructure layer for making service to service",
    "start": "284500",
    "end": "290410"
  },
  {
    "text": "communications safe fast and reliable so what are the options the functionalities",
    "start": "290410",
    "end": "296740"
  },
  {
    "text": "to say offered by the service mesh so the core functionalities are dynamic",
    "start": "296740",
    "end": "302170"
  },
  {
    "text": "routing what we needed load balancing with tribal failures circuit breaking",
    "start": "302170",
    "end": "307630"
  },
  {
    "text": "and distributing tracing and metrics so these are all the things that you need in a in a micro service architecture in",
    "start": "307630",
    "end": "314380"
  },
  {
    "text": "the long run none of this content concepts are new of course so for",
    "start": "314380",
    "end": "319870"
  },
  {
    "text": "example dynamic routing we could do by setting up a service directory and then",
    "start": "319870",
    "end": "325270"
  },
  {
    "text": "having the aggregator check in the service directory where is this service located and then make the chord called",
    "start": "325270",
    "end": "331419"
  },
  {
    "text": "there but the point of the service mesh is that you want to extract all this behavior away from your service let the",
    "start": "331419",
    "end": "337930"
  },
  {
    "text": "infrastructure do it okay so in our in our code we don't have any connections",
    "start": "337930",
    "end": "344740"
  },
  {
    "text": "to the service directories we don't have any libraries for circuit breaking distributed tracing and matrix that's a",
    "start": "344740",
    "end": "350950"
  },
  {
    "text": "whole other topic but this is all covered again by the service mesh and",
    "start": "350950",
    "end": "356310"
  },
  {
    "text": "currently there are a lot of not say a lot about several implementations on the",
    "start": "356310",
    "end": "361690"
  },
  {
    "text": "service mesh the one that we are going to cover is called linker D so when when",
    "start": "361690",
    "end": "368080"
  },
  {
    "text": "we start this project over a year ago linker D was the only production-ready",
    "start": "368080",
    "end": "373710"
  },
  {
    "text": "service mesh implementation that didn't require your system running on",
    "start": "373710",
    "end": "379930"
  },
  {
    "text": "kubernetes so we back then we were running on AWS ECS and linker D fulfilled all our needs",
    "start": "379930",
    "end": "388110"
  },
  {
    "text": "currently there are two branches of linker D the first one branch one is the",
    "start": "388110",
    "end": "394840"
  },
  {
    "text": "one we cannot going to cover here the second branch has been released some three months ago we'll mention it a bit",
    "start": "394840",
    "end": "401229"
  },
  {
    "text": "later and how it compares to other solutions and to the first version so we will deal with link D version one",
    "start": "401229",
    "end": "407530"
  },
  {
    "text": "here okay so how do you deploy a service",
    "start": "407530",
    "end": "414879"
  },
  {
    "start": "411000",
    "end": "530000"
  },
  {
    "text": "machine in your instruct infrastructure so there are several several ways the",
    "start": "414879",
    "end": "420129"
  },
  {
    "text": "first one is so called host only mode where you deploy linker D as a component on the host of your systems let's say",
    "start": "420129",
    "end": "428460"
  },
  {
    "text": "ec2 node and then all the services are basically talking to this linker the",
    "start": "428460",
    "end": "434500"
  },
  {
    "text": "instance and it does what it needs to do another approach is so a so-called side",
    "start": "434500",
    "end": "440740"
  },
  {
    "text": "card so sidecar means that you are deploying the single linker the instance",
    "start": "440740",
    "end": "446020"
  },
  {
    "text": "along with your services so and you can do this in two ways as an outgoing or",
    "start": "446020",
    "end": "451930"
  },
  {
    "text": "incoming as an outgoing so your service talks to link ID and then link ID talks",
    "start": "451930",
    "end": "458319"
  },
  {
    "text": "to the target service which again goes to the linker D and so on and in this way you can for example achieve dynamic",
    "start": "458319",
    "end": "464409"
  },
  {
    "text": "routing the other thing is that external entities never called never talked to your service directly but instead they",
    "start": "464409",
    "end": "470590"
  },
  {
    "text": "talk to linker D which forwards the request to your service in this way you can for example measure the response",
    "start": "470590",
    "end": "476770"
  },
  {
    "text": "time of your services and so on so you don't have the dynamic routing per se",
    "start": "476770",
    "end": "482080"
  },
  {
    "text": "and of course you can combine the two and get the best of both best of both",
    "start": "482080",
    "end": "487090"
  },
  {
    "text": "worlds you know why would you do this for example there are quite a bit of",
    "start": "487090",
    "end": "494639"
  },
  {
    "text": "HTTP headers that linker degenerates and passes through so if you have a setup",
    "start": "494639",
    "end": "499870"
  },
  {
    "text": "like this there is a specific header or CTX trace which then can be used by",
    "start": "499870",
    "end": "506529"
  },
  {
    "text": "Zipkin and you use this to show the call graph of your services so you get this",
    "start": "506529",
    "end": "511960"
  },
  {
    "text": "for free these are generated valley by linker D of course nothing is done done automatically so your service has to",
    "start": "511960",
    "end": "518709"
  },
  {
    "text": "forward them in any calls that it makes but eventually you can export this to Zipkin and see how everything is working",
    "start": "518709",
    "end": "525310"
  },
  {
    "text": "what what are the bottlenecks in your call graphs and so on now let's see how",
    "start": "525310",
    "end": "532390"
  },
  {
    "start": "530000",
    "end": "641000"
  },
  {
    "text": "linker D is working there are several steps in this whole process the first is",
    "start": "532390",
    "end": "537660"
  },
  {
    "text": "identification so we have this post request as an example we choose these are fictional",
    "start": "537660",
    "end": "543860"
  },
  {
    "text": "drive to move provider and we want to send a login request so how does link",
    "start": "543860",
    "end": "548930"
  },
  {
    "text": "identify this request and allow you to process it later on there is basically a",
    "start": "548930",
    "end": "555050"
  },
  {
    "text": "configuration file in each in which you can set the identifiers so one of the",
    "start": "555050",
    "end": "563570"
  },
  {
    "text": "identifiers is called the header token it basically looks in one of the headers in your request by default it's the host",
    "start": "563570",
    "end": "570079"
  },
  {
    "text": "so if you set up identifiers like this this request will be identified as slash",
    "start": "570079",
    "end": "576800"
  },
  {
    "text": "service slash free to move so it just takes the the hostname of your request",
    "start": "576800",
    "end": "583000"
  },
  {
    "text": "the second possible identifier it's called is the path so it looks at the request path you can tell it how many",
    "start": "583000",
    "end": "589970"
  },
  {
    "text": "segments you want to check in this case two and whether you want to consume the request to consume the segment's when",
    "start": "589970",
    "end": "598010"
  },
  {
    "text": "you forward the request or not so in this case my call will be identified",
    "start": "598010",
    "end": "605269"
  },
  {
    "text": "service providers drive to move if I say consume to true what the services will",
    "start": "605269",
    "end": "610880"
  },
  {
    "text": "eventually receive is the login part only this is one of the very few",
    "start": "610880",
    "end": "615980"
  },
  {
    "text": "identifiers that can be used to modify the incoming request there is also method and path so your",
    "start": "615980",
    "end": "622069"
  },
  {
    "text": "request will be identified like this HTTP 1.1 post and then free to move and",
    "start": "622069",
    "end": "628370"
  },
  {
    "text": "so on there are a lot of other identifiers the documentation is very well-written you can see how they work",
    "start": "628370",
    "end": "633889"
  },
  {
    "text": "you can write your own but whatever you find there suits for suitable for most",
    "start": "633889",
    "end": "639680"
  },
  {
    "text": "cases now once you have the the identifier the second step is so called",
    "start": "639680",
    "end": "645709"
  },
  {
    "start": "641000",
    "end": "758000"
  },
  {
    "text": "binding so you process this identifier of the request and assign it to some so",
    "start": "645709",
    "end": "653060"
  },
  {
    "text": "called client name this is done using using the delegation tab so these are the set of rules that will be applied to",
    "start": "653060",
    "end": "660310"
  },
  {
    "text": "identifier to figure out where the traffic needs to be routed the priority",
    "start": "660310",
    "end": "666709"
  },
  {
    "text": "is from bottom to top so the bottommost has the highest priority and let's say we have identifiers like",
    "start": "666709",
    "end": "672939"
  },
  {
    "text": "from the previous slide it takes two segments and the request is written out",
    "start": "672939",
    "end": "679879"
  },
  {
    "text": "there so how does this work in practice so the data fire that we have is service provider drive to move and let me use",
    "start": "679879",
    "end": "688129"
  },
  {
    "text": "this and then linker D goes and tries to",
    "start": "688129",
    "end": "693289"
  },
  {
    "text": "match this part here to the left part written here so it cannot match service",
    "start": "693289",
    "end": "700309"
  },
  {
    "text": "to vehicles that fails but it can match service providers to server service providers and then this part is",
    "start": "700309",
    "end": "706939"
  },
  {
    "text": "rewritten to this part so this idea becomes SVC okay and then we have s miss",
    "start": "706939",
    "end": "714499"
  },
  {
    "text": "SVC and drive to move as a left over and now the process starts from from the beginning so as we see drive to move",
    "start": "714499",
    "end": "722749"
  },
  {
    "text": "cannot be matched to this cannot be matched to this but matches this and then it's replaced by console /d MO and",
    "start": "722749",
    "end": "730339"
  },
  {
    "text": "the end result is this so once link Rd encounters a hashtag or dollar sign it",
    "start": "730339",
    "end": "739069"
  },
  {
    "text": "stops the the binding mode as you can see link at these supports many",
    "start": "739069",
    "end": "744109"
  },
  {
    "text": "different kinds of neighbors as they are called this is console a service directory it",
    "start": "744109",
    "end": "749689"
  },
  {
    "text": "works with kubernetes api it works with zookeeper and so on and you can",
    "start": "749689",
    "end": "755629"
  },
  {
    "text": "basically configure it to a configuration file and this is the last",
    "start": "755629",
    "end": "760699"
  },
  {
    "start": "758000",
    "end": "847000"
  },
  {
    "text": "step the resolution so once we have a name which references consul how do we get the IP addresses of the services to",
    "start": "760699",
    "end": "767509"
  },
  {
    "text": "which we need to forward the call and these are so called neighbors so I'm telling here I have a console name er",
    "start": "767509",
    "end": "773929"
  },
  {
    "text": "which is a dissident is port and basically link Rd will ping it get these",
    "start": "773929",
    "end": "781309"
  },
  {
    "text": "IP addresses let's say I have multiple instances of the services it will pick one of those and send a request there",
    "start": "781309",
    "end": "788409"
  },
  {
    "text": "what happens if consul does not have this entry in its registry the the",
    "start": "788409",
    "end": "798169"
  },
  {
    "text": "process continues so this has failed here and then linker D tries to",
    "start": "798169",
    "end": "803239"
  },
  {
    "text": "satisfies this branch this means that request should be forwarded exactly to",
    "start": "803239",
    "end": "808550"
  },
  {
    "text": "decipher your hostname the Dysport and by having a configuration like this this",
    "start": "808550",
    "end": "814939"
  },
  {
    "text": "is how we actually managed to develop the dynamic routing we had before so all",
    "start": "814939",
    "end": "821720"
  },
  {
    "text": "the new services were put into console and then link of the checks if they're in causal console I sent a request there",
    "start": "821720",
    "end": "828230"
  },
  {
    "text": "if there are nothing cause I just send everything to the legacy back-end and hope it can handle the requests there",
    "start": "828230",
    "end": "837050"
  },
  {
    "text": "are many more details again the documentation is very well-written you can modify many of these steps and",
    "start": "837050",
    "end": "846160"
  },
  {
    "text": "configure link ID to work the way you need it another one question that arises is what are the penalties for penalties",
    "start": "846160",
    "end": "854120"
  },
  {
    "start": "847000",
    "end": "891000"
  },
  {
    "text": "for using this intermediate components into your architecture on this website you have like hints how to fine tune and",
    "start": "854120",
    "end": "862879"
  },
  {
    "text": "optimize link ID and with optimize instance this is the performance penalty",
    "start": "862879",
    "end": "868339"
  },
  {
    "text": "that you get so in 1,000 requests a second p99 is 5 milliseconds so it",
    "start": "868339",
    "end": "874089"
  },
  {
    "text": "behaves nicely up to 20,000 requests a second you get 6 milliseconds of delay",
    "start": "874089",
    "end": "880550"
  },
  {
    "text": "afterwards it goes a bit higher but you can use additional instances and so on so we are still far away from 20,000",
    "start": "880550",
    "end": "887899"
  },
  {
    "text": "requests a second so we don't care about this it's fine for us ok let's do a bit",
    "start": "887899",
    "end": "894829"
  },
  {
    "start": "891000",
    "end": "1311000"
  },
  {
    "text": "of a demo so I have a docker compose",
    "start": "894829",
    "end": "904879"
  },
  {
    "text": "file which configures console link ID",
    "start": "904879",
    "end": "910309"
  },
  {
    "text": "and two instances of our service and then we see how this all works in practice with cause I won't go into too",
    "start": "910309",
    "end": "918829"
  },
  {
    "text": "many details that the computation again is very good there are it's described how you can deploy it on AWS how you can",
    "start": "918829",
    "end": "924920"
  },
  {
    "text": "deploy it on kubernetes if you need it and so on but the interesting thing here is the registrate ER so as you are",
    "start": "924920",
    "end": "933259"
  },
  {
    "text": "deploying services how do they appear in in in console and once you shut them",
    "start": "933259",
    "end": "938929"
  },
  {
    "text": "down how do you moved on from console you can do this via your deployment pipeline but there is this nice little pool called",
    "start": "938929",
    "end": "945410"
  },
  {
    "text": "registrate it basically hooks into docker listens to events and whenever there is a new component new container",
    "start": "945410",
    "end": "951470"
  },
  {
    "text": "starting it scans for the exposed ports and then registers these ports with the console and this works very nicely we",
    "start": "951470",
    "end": "958640"
  },
  {
    "text": "start the services in console we kill it it's out out of console you can configure registrate are using these",
    "start": "958640",
    "end": "964810"
  },
  {
    "text": "environment variables like service underscore Lincoln or means don't put this service into the into console",
    "start": "964810",
    "end": "971510"
  },
  {
    "text": "because I don't want console in console right there is a linker D configuration",
    "start": "971510",
    "end": "981070"
  },
  {
    "text": "we can check it quickly so this is basically what I show you in slides there is an admin port there is a",
    "start": "981279",
    "end": "988610"
  },
  {
    "text": "telemetry information so linker D works with primitives out-of-the-box you can collect all kinds information about your",
    "start": "988610",
    "end": "994550"
  },
  {
    "text": "services we've set up the console named ER and the routers delegation table and",
    "start": "994550",
    "end": "1000010"
  },
  {
    "text": "so on sorry is there anything else in",
    "start": "1000010",
    "end": "1008740"
  },
  {
    "text": "the docker compose that's interesting yeah and we have two services two",
    "start": "1008740",
    "end": "1015730"
  },
  {
    "text": "instances of the same service we call it the echo service and we're gonna see how",
    "start": "1015730",
    "end": "1020850"
  },
  {
    "text": "link ID communicates with them so let's start this this is just the docker",
    "start": "1020850",
    "end": "1029050"
  },
  {
    "text": "compose up we wait until everything set up",
    "start": "1029050",
    "end": "1034140"
  },
  {
    "text": "all good so far now it's all good so how",
    "start": "1042140",
    "end": "1050419"
  },
  {
    "text": "do you use link Rd the the easiest way is just to set up the HTTP proxy environment variable well this so I say",
    "start": "1050419",
    "end": "1059539"
  },
  {
    "text": "HTTP proxy is localhost 4040 which is the default force a default port for link ID and then just I make a request",
    "start": "1059539",
    "end": "1066620"
  },
  {
    "text": "to echo service pink and the traffic",
    "start": "1066620",
    "end": "1078350"
  },
  {
    "text": "goes out there and the service responds with echo to I can do the same thing now",
    "start": "1078350",
    "end": "1084409"
  },
  {
    "text": "I see that the second service has responded so we see here the load",
    "start": "1084409",
    "end": "1089659"
  },
  {
    "text": "balancer in practice by default link ID takes it receives from console let's say",
    "start": "1089659",
    "end": "1096049"
  },
  {
    "text": "a set of services it picks two of those and then based on the algorithm chooses to which one to forward the traffic so",
    "start": "1096049",
    "end": "1105019"
  },
  {
    "text": "let's see how the load balancer works in practice we can put some of the some delay into one of these services and",
    "start": "1105019",
    "end": "1111860"
  },
  {
    "text": "then see how link Rd will choose one of them to which the road to traffic so let's go to the docker compose file in",
    "start": "1111860",
    "end": "1122090"
  },
  {
    "text": "this echo service we will say delay one hundred milliseconds and in the second",
    "start": "1122090",
    "end": "1129380"
  },
  {
    "text": "one sorry we will say they say delay is 500",
    "start": "1129380",
    "end": "1134659"
  },
  {
    "text": "milliseconds but start with a delay after you receive 50 requests so",
    "start": "1134659",
    "end": "1140450"
  },
  {
    "text": "initially it works fine after 50 requests it will slow down dramatically we save this neuron the thing again",
    "start": "1140450",
    "end": "1153009"
  },
  {
    "text": "and in here I have a small script it just loops hundred times and calls the echo service I'll use the break for some",
    "start": "1154260",
    "end": "1165150"
  },
  {
    "text": "water and let's hope this works",
    "start": "1165150",
    "end": "1173690"
  },
  {
    "text": "echo service delay loop",
    "start": "1173900",
    "end": "1178700"
  },
  {
    "text": "hmm it doesn't work it worked on my machine before let's let's do it again",
    "start": "1188299",
    "end": "1196778"
  },
  {
    "text": "if it doesn't work this time you have to trust me that it works did they put",
    "start": "1198519",
    "end": "1209809"
  },
  {
    "text": "correct delays in echo service yeah 1 and 500 yeah",
    "start": "1209809",
    "end": "1219769"
  },
  {
    "text": "Oh could be could be let's see",
    "start": "1219769",
    "end": "1226809"
  },
  {
    "text": "it's there 500 milliseconds or it means after 50 calls yeah",
    "start": "1242710",
    "end": "1249990"
  },
  {
    "text": "just 50 calls okay",
    "start": "1249990",
    "end": "1255150"
  },
  {
    "text": "is it again yeah it works let's pretend",
    "start": "1255150",
    "end": "1260530"
  },
  {
    "text": "this is the first time around this call and we can edit the video afterwards",
    "start": "1260530",
    "end": "1269140"
  },
  {
    "text": "right so and cut the first part okay so how did it work it first called the",
    "start": "1269140",
    "end": "1275590"
  },
  {
    "text": "first one then its second one so the second one is responding faster and then",
    "start": "1275590",
    "end": "1280750"
  },
  {
    "text": "you just continue calling the second one after approximately 50 calls the second one started delaying and it fall back to",
    "start": "1280750",
    "end": "1287140"
  },
  {
    "text": "the last to the first one you see from time to time it tries to ping the second instance to see if it recovered but it",
    "start": "1287140",
    "end": "1294670"
  },
  {
    "text": "continues calling the first so this is again something you get out of the box and in most cases 50% of the cases it",
    "start": "1294670",
    "end": "1301270"
  },
  {
    "text": "works as expected there are again all kinds of different load balancers you",
    "start": "1301270",
    "end": "1306610"
  },
  {
    "text": "can check them it's all very well documented and yeah before I said that",
    "start": "1306610",
    "end": "1315340"
  },
  {
    "text": "link ID can be deployed as a sidecar although it can be deployed it doesn't",
    "start": "1315340",
    "end": "1320920"
  },
  {
    "text": "mean it should be deployed it's not really lightweight in our production",
    "start": "1320920",
    "end": "1325929"
  },
  {
    "text": "system we've been monitoring an instance uses around 350 megawatts let's say so",
    "start": "1325929",
    "end": "1331510"
  },
  {
    "text": "you have if you have two instances which each of your services that 700 megabytes more which I'm not sure you really want",
    "start": "1331510",
    "end": "1337809"
  },
  {
    "text": "to do even with all the benefits so they kind of approached this problem again and redesigned the whole system and this",
    "start": "1337809",
    "end": "1344770"
  },
  {
    "text": "is what they came up with so now link Rd is split into two parts it one is called control plane the other one is called",
    "start": "1344770",
    "end": "1350530"
  },
  {
    "text": "data plane so control plane handles all the configuration all the settings connection with Prometheus graphin and",
    "start": "1350530",
    "end": "1356500"
  },
  {
    "text": "so on and the component that you actually deploy with your services is",
    "start": "1356500",
    "end": "1361900"
  },
  {
    "text": "very lightweight so they mentioned some 10 megabytes or so so here you just get the proxy reverse proxy whatever and all",
    "start": "1361900",
    "end": "1368950"
  },
  {
    "text": "the configuration is deployed only once in your kubernetes cluster starting with this branch they work exclusively with",
    "start": "1368950",
    "end": "1374500"
  },
  {
    "text": "kubernetes so no AWS or other cloud providers anymore",
    "start": "1374500",
    "end": "1380250"
  },
  {
    "text": "of course thinker D is not the only one there is East EO and to be honest from what I",
    "start": "1380250",
    "end": "1388830"
  },
  {
    "text": "read on the web and from the vibe in this conference I think Easter has become the synonym for service match even link Rd I think was there before",
    "start": "1388830",
    "end": "1395690"
  },
  {
    "text": "production-ready least Easter is kind of taking over because east you started with this approach from the start so",
    "start": "1395690",
    "end": "1401940"
  },
  {
    "text": "they had a control plane it all the like heavy stuff and have lightweight proxies which you deploy to in your application",
    "start": "1401940",
    "end": "1409760"
  },
  {
    "text": "others are also trying to catch up there is a conk if you're using Conchas in the api gateway which we do they have",
    "start": "1409760",
    "end": "1417090"
  },
  {
    "text": "announced from the version 1 they are also going to support something called Kwan mesh but you will also be able to",
    "start": "1417090",
    "end": "1422940"
  },
  {
    "text": "use East us part of conk funny enough konso is also pushing into the service",
    "start": "1422940",
    "end": "1428039"
  },
  {
    "text": "mesh ecosystem they have something called console connect which takes the",
    "start": "1428039",
    "end": "1435029"
  },
  {
    "text": "Envoy from East EO and then console can worked as a service mesh on its own so you don't need any other parts like I",
    "start": "1435029",
    "end": "1442559"
  },
  {
    "text": "said these two are still like battles being tested East us production ready it can be used on kubernetes as you can see",
    "start": "1442559",
    "end": "1450840"
  },
  {
    "text": "this service mesh area is quite live a lot of things happening and then you'll",
    "start": "1450840",
    "end": "1456899"
  },
  {
    "text": "see what what happens next this is the final architecture that we",
    "start": "1456899",
    "end": "1462120"
  },
  {
    "text": "have that we had so basically there is a console instance there is an entry entry",
    "start": "1462120",
    "end": "1469679"
  },
  {
    "text": "level let's say linker B it asks the console about the services talks to the",
    "start": "1469679",
    "end": "1474750"
  },
  {
    "text": "legacy money directly or forwards the information to the aggregator aggregator",
    "start": "1474750",
    "end": "1479970"
  },
  {
    "text": "has one of its own link at instances deployed as a sidecar and in the easiest",
    "start": "1479970",
    "end": "1485610"
  },
  {
    "text": "cluster we have DC so to ec2 instances I do see my pointer here it is and each of",
    "start": "1485610",
    "end": "1491070"
  },
  {
    "text": "the instances ec2 instances as the registrate ER which then just pushes the information to console once we were done",
    "start": "1491070",
    "end": "1498929"
  },
  {
    "text": "with this we decided to move from AWS to kubernetes and all this works out of the",
    "start": "1498929",
    "end": "1504419"
  },
  {
    "text": "box so linker they can hook into the kubernetes api we don't need counseling",
    "start": "1504419",
    "end": "1509879"
  },
  {
    "text": "because we have the name is system in kubernetes but we still use console as it works nicely as a key value store so",
    "start": "1509879",
    "end": "1517320"
  },
  {
    "text": "we use it to store runtime configuration of our services there and it has an ass",
    "start": "1517320",
    "end": "1522959"
  },
  {
    "text": "API which can call let's say notify when there are configurator configurational",
    "start": "1522959",
    "end": "1529019"
  },
  {
    "text": "changes so you can update your services on the fly you don't have to redeploy or restart them yeah that's about it about service",
    "start": "1529019",
    "end": "1538679"
  },
  {
    "start": "1535000",
    "end": "1570000"
  },
  {
    "text": "meshes the next point is consumer-driven contract testing so the question is when",
    "start": "1538679",
    "end": "1546029"
  },
  {
    "text": "you are splitting the monolid how do you keep the legacy systems running so this is something we have to take care of all",
    "start": "1546029",
    "end": "1552269"
  },
  {
    "text": "our mobile applications should continue working as before even though we are splitting the the service and later on",
    "start": "1552269",
    "end": "1558719"
  },
  {
    "text": "if you are deploying the services how do you make sure that you are not breaking the contract that you have to with your",
    "start": "1558719",
    "end": "1564779"
  },
  {
    "text": "consumers so this is all the the point of consumer-driven contract testing",
    "start": "1564779",
    "end": "1570589"
  },
  {
    "start": "1570000",
    "end": "1712000"
  },
  {
    "text": "let's say one example let's say that we have one let's say that we hand have one",
    "start": "1570589",
    "end": "1579299"
  },
  {
    "text": "service which is called vehicle booking which knows how to book vehicles on behalf of users this vehicle booking has",
    "start": "1579299",
    "end": "1586079"
  },
  {
    "text": "two external clients it has the mobile client which the user actually uses and it has business intelligence which is",
    "start": "1586079",
    "end": "1592859"
  },
  {
    "text": "like let's say our eternal department wants to see keep track of booking and so on and this vehicle booking talks",
    "start": "1592859",
    "end": "1600029"
  },
  {
    "text": "directly to our fictional drive to move provider which is outside and then how",
    "start": "1600029",
    "end": "1606719"
  },
  {
    "text": "do we work with this vehicle booking service how do we do end to end testing that we when we have external",
    "start": "1606719",
    "end": "1612929"
  },
  {
    "text": "dependencies so we cannot just book cars and open doors and so on it doesn't work and when we are deploying this how do we",
    "start": "1612929",
    "end": "1620039"
  },
  {
    "text": "make sure we don't break our clients and that business intelligence can get their data to do the contract testing we are",
    "start": "1620039",
    "end": "1628019"
  },
  {
    "text": "using the pact framework back framework is specification of contracts and also",
    "start": "1628019",
    "end": "1633690"
  },
  {
    "text": "has the implementation for various other languages these are the languages and frameworks that are supported so Ruby",
    "start": "1633690",
    "end": "1640679"
  },
  {
    "text": "JVM go etc if your favorite language is not here there are still possibilities on how to",
    "start": "1640679",
    "end": "1646820"
  },
  {
    "text": "use it there are some tools and you have to do some JSON writing yourself but but",
    "start": "1646820",
    "end": "1651980"
  },
  {
    "text": "that's more or less it let us go back to this picture and introduce some some",
    "start": "1651980",
    "end": "1658970"
  },
  {
    "text": "terminology first so contract between two services or two entities basically",
    "start": "1658970",
    "end": "1665120"
  },
  {
    "text": "describes how the requests look like and what are the expected formats of responses so it says if I send you this",
    "start": "1665120",
    "end": "1671900"
  },
  {
    "text": "request I expect this kind of a response in our case it will be simple JSON files",
    "start": "1671900",
    "end": "1678850"
  },
  {
    "text": "then we will identify two types of contracts once is one is downstream so",
    "start": "1678850",
    "end": "1685250"
  },
  {
    "text": "vehicle booking has one downstream contract with drive to move and has to upstream contact contracts with a mobile",
    "start": "1685250",
    "end": "1691640"
  },
  {
    "text": "client and with business intelligence and then consume and River contract",
    "start": "1691640",
    "end": "1696710"
  },
  {
    "text": "testing means that contracts are defined from the point of view of the client so the client defines the contracts and",
    "start": "1696710",
    "end": "1704390"
  },
  {
    "text": "tells the provider okay I want you to behave like this and then the provider takes that in implements it okay we",
    "start": "1704390",
    "end": "1715190"
  },
  {
    "text": "switch to another demo let's just look at the API of this vehicle booking so he",
    "start": "1715190",
    "end": "1721309"
  },
  {
    "text": "has two clients a mobile client as a post to the bookings it sends the user ID and the car ID and",
    "start": "1721309",
    "end": "1729309"
  },
  {
    "text": "receive the booking ID as a response but there is bad we cast 502 cat role and",
    "start": "1729309",
    "end": "1736940"
  },
  {
    "text": "the BI has a different endpoint that they are calling so there is a get bookings user ID and we through the",
    "start": "1736940",
    "end": "1744350"
  },
  {
    "text": "client receives all the bookings for this user nothing fancy but it will",
    "start": "1744350",
    "end": "1749450"
  },
  {
    "text": "serve our purpose so when we have we are",
    "start": "1749450",
    "end": "1761690"
  },
  {
    "text": "now building the vehicle booking service and one thing we want to do is write the client that we called the external",
    "start": "1761690",
    "end": "1767510"
  },
  {
    "text": "provider so this is just a lightweight client lightweight wrap around the HTTP",
    "start": "1767510",
    "end": "1772940"
  },
  {
    "text": "library and Scala developers here let's call the developers No oh thank",
    "start": "1772940",
    "end": "1780120"
  },
  {
    "text": "you hopefully we have more Scala developers after this talk so nothing big going on",
    "start": "1780120",
    "end": "1787950"
  },
  {
    "text": "here the drive to move client just received the URL and the HTTP client instance sets up the booking URL and",
    "start": "1787950",
    "end": "1795150"
  },
  {
    "text": "just post whatever it receives post the booking request and receive the booking",
    "start": "1795150",
    "end": "1800220"
  },
  {
    "text": "response as a result wrapped in some effect and now how do we write unit",
    "start": "1800220",
    "end": "1805710"
  },
  {
    "text": "tests for this and see how so I will",
    "start": "1805710",
    "end": "1812370"
  },
  {
    "text": "write a unit test and see how it fits into all of these contract testing stuff so we will be testing behavior of drive",
    "start": "1812370",
    "end": "1819780"
  },
  {
    "text": "to move client and we say it should I book a car for a user we will set up the",
    "start": "1819780",
    "end": "1831240"
  },
  {
    "text": "request body response body so request body this is a literal string in Scala",
    "start": "1831240",
    "end": "1837660"
  },
  {
    "text": "if you have a user ID which will be user",
    "start": "1837660",
    "end": "1842970"
  },
  {
    "text": "1 2 3 and it will have car ID which will be car 1 2 3 and not respond",
    "start": "1842970",
    "end": "1857160"
  },
  {
    "text": "response body will be booking ID which",
    "start": "1857160",
    "end": "1864330"
  },
  {
    "text": "is booking 1 2 3 ok this is what we are gonna send this is what we're gonna",
    "start": "1864330",
    "end": "1869850"
  },
  {
    "text": "expect and now we are writing a contract using this a bit dramatic fourth packet",
    "start": "1869850",
    "end": "1876420"
  },
  {
    "text": "command and we are forging a pact between vehicle booking and drive to",
    "start": "1876420",
    "end": "1885900"
  },
  {
    "text": "move and now we are adding the interactions between these two services so I'm adding an interaction which has a",
    "start": "1885900",
    "end": "1896130"
  },
  {
    "text": "description book a car for a class for a",
    "start": "1896130",
    "end": "1902040"
  },
  {
    "text": "user and you say upon receiving",
    "start": "1902040",
    "end": "1908090"
  },
  {
    "text": "which upon receiving post to bookings no",
    "start": "1908260",
    "end": "1914740"
  },
  {
    "text": "query string headers is content type",
    "start": "1914740",
    "end": "1923549"
  },
  {
    "text": "application to Jason what we need now",
    "start": "1923549",
    "end": "1931120"
  },
  {
    "text": "bodies request body and there are no",
    "start": "1931120",
    "end": "1936429"
  },
  {
    "text": "matching rules will respond with 201",
    "start": "1936429",
    "end": "1942450"
  },
  {
    "text": "response body and we say run",
    "start": "1942450",
    "end": "1949919"
  },
  {
    "text": "ah sorry this is the end of interaction we say run consumer tests what so what",
    "start": "1957660",
    "end": "1965550"
  },
  {
    "text": "happens here here we basically have created a stop a stop that says expect",
    "start": "1965550",
    "end": "1972240"
  },
  {
    "text": "this kind of request and provide this kind of response and this thing will run a stop service in the background and",
    "start": "1972240",
    "end": "1978000"
  },
  {
    "text": "give me the configuration of this top service in this variable so now I can create my client try to move is the new",
    "start": "1978000",
    "end": "1987780"
  },
  {
    "text": "drive to move config base URL and give",
    "start": "1987780",
    "end": "1996000"
  },
  {
    "text": "it an HTTP client we create a new",
    "start": "1996000",
    "end": "2002180"
  },
  {
    "text": "booking request which has user 1 2 3 and",
    "start": "2002180",
    "end": "2010430"
  },
  {
    "text": "car 1 2 3 we say what's the expected response booking response booking 1 2 3",
    "start": "2010430",
    "end": "2025760"
  },
  {
    "text": "and then we call our well do I keep single bar instead the wall and then we",
    "start": "2025760",
    "end": "2035210"
  },
  {
    "text": "call our service and see what's the actual response actual response is drive",
    "start": "2035210",
    "end": "2042950"
  },
  {
    "text": "to move book with a request and some",
    "start": "2042950",
    "end": "2048020"
  },
  {
    "text": "magic and we say actual response should be expected response ok and now let's",
    "start": "2048020",
    "end": "2061220"
  },
  {
    "text": "run this so we do SBT",
    "start": "2061220",
    "end": "2065740"
  },
  {
    "text": "this is SBT for you take some time we do",
    "start": "2068600",
    "end": "2076370"
  },
  {
    "text": "clean and we do vehicle booking test",
    "start": "2076370",
    "end": "2082360"
  },
  {
    "text": "for sources re I did clean",
    "start": "2088790",
    "end": "2092950"
  },
  {
    "text": "look one field",
    "start": "2098050",
    "end": "2101400"
  },
  {
    "text": "baking's",
    "start": "2111119",
    "end": "2114078"
  },
  {
    "text": "I will just run it from here",
    "start": "2116270",
    "end": "2119980"
  },
  {
    "text": "and now it succeeded okay so our unit test is passing now the question is why do we do this complicated way of",
    "start": "2128260",
    "end": "2134440"
  },
  {
    "text": "stopping why just not use mockito or something like that and do this in one line well the the thing is that once you",
    "start": "2134440",
    "end": "2140710"
  },
  {
    "text": "start using the packed framework what you get is an output of running the unit",
    "start": "2140710",
    "end": "2145720"
  },
  {
    "text": "tests are contract files so in the target packets folder you will see something like this so our interaction",
    "start": "2145720",
    "end": "2152920"
  },
  {
    "text": "with the stub will be recorded as form this form in form of a contract yeah so",
    "start": "2152920",
    "end": "2161890"
  },
  {
    "text": "I've been kind to you and wrote the contracts for BI and the mobile client separately and now let's see how we do",
    "start": "2161890",
    "end": "2168850"
  },
  {
    "text": "how we use all of these in practice so I",
    "start": "2168850",
    "end": "2174930"
  },
  {
    "text": "will do another docker compose there is",
    "start": "2176220",
    "end": "2181510"
  },
  {
    "text": "a very nice component that comes from the pact framework it's called the pact broker so it's basically repository of",
    "start": "2181510",
    "end": "2187750"
  },
  {
    "text": "all of yours all of your contracts so as soon as all this is running you'll see",
    "start": "2187750",
    "end": "2195130"
  },
  {
    "text": "how the pact broker looks like okay so",
    "start": "2195130",
    "end": "2201190"
  },
  {
    "text": "now it's listening at localhost 9000 so",
    "start": "2201190",
    "end": "2207700"
  },
  {
    "start": "2206000",
    "end": "2428000"
  },
  {
    "text": "I've taken these interactions this contract and uploaded uploaded them to",
    "start": "2207700",
    "end": "2212980"
  },
  {
    "text": "the pact broker and you can see them here you can click on an end on any of these and see the JSON files in a bit",
    "start": "2212980",
    "end": "2220180"
  },
  {
    "text": "nicer format also cool thing is you can click on the provider and then see a graph of your services so you see how",
    "start": "2220180",
    "end": "2226690"
  },
  {
    "text": "each of the your services communicated to the others so I can click here and",
    "start": "2226690",
    "end": "2233080"
  },
  {
    "text": "see the contracts between these these two now this is very fancy but you don't usually use it in practices just to show",
    "start": "2233080",
    "end": "2239980"
  },
  {
    "text": "off how fancy it looks what is this pack broker is really cool is that you can",
    "start": "2239980",
    "end": "2245710"
  },
  {
    "text": "query it during your build pipelines let's say so when we are deploying the",
    "start": "2245710",
    "end": "2251400"
  },
  {
    "text": "vehicle booking service what we are saying is give me all the downstream",
    "start": "2251400",
    "end": "2257500"
  },
  {
    "text": "dependencies of the service and we use them to stop the downstream dependency and then we say give me all the",
    "start": "2257500",
    "end": "2263800"
  },
  {
    "text": "consumers of this service we take them and run all the interactions with the service and we make sure that the",
    "start": "2263800",
    "end": "2269470"
  },
  {
    "text": "service behaves the way it's supposed to help it's supposed to behave sorry so",
    "start": "2269470",
    "end": "2275080"
  },
  {
    "text": "let's see this in practice this thing is running I could say let's hide this",
    "start": "2275080",
    "end": "2281650"
  },
  {
    "text": "reading I can say CBC test and what is",
    "start": "2281650",
    "end": "2292210"
  },
  {
    "text": "it has done it has checked the contract between the bone mobile client and the",
    "start": "2292210",
    "end": "2298450"
  },
  {
    "text": "vehicle booking it has checked the contract between the BI and the vehicle booking and it has checked the swagger",
    "start": "2298450",
    "end": "2304720"
  },
  {
    "text": "API definition so you can take the swagger API file and your contract and see whether your service really behaves",
    "start": "2304720",
    "end": "2310960"
  },
  {
    "text": "the way swagger tells it behaves so this is one way of keeping your swagger documentation up to date we don't like",
    "start": "2310960",
    "end": "2317830"
  },
  {
    "text": "to generate the sacrifice from code because then it's very easy to change them in this way you have the",
    "start": "2317830",
    "end": "2323140"
  },
  {
    "text": "commutation written separately and you have the consistency all the time and we",
    "start": "2323140",
    "end": "2328150"
  },
  {
    "text": "have integrated this into our build pipelines and it's executed even actually when you open a pull request so",
    "start": "2328150",
    "end": "2334600"
  },
  {
    "text": "when you open a pull request we run the service with all the dependency runs the contract and then see if everything is running as it's supposed to run this",
    "start": "2334600",
    "end": "2342520"
  },
  {
    "text": "swagger API definition check is provided by a Atlassian library called swagger",
    "start": "2342520",
    "end": "2347980"
  },
  {
    "text": "packet validator something like that combination of these three words so this",
    "start": "2347980",
    "end": "2354250"
  },
  {
    "text": "is for new services what do you do with the old services so we had the monolid and we wanted to make sure that we don't",
    "start": "2354250",
    "end": "2360550"
  },
  {
    "text": "break it so what we did is we used wire mock wire mock among other things can be",
    "start": "2360550",
    "end": "2367300"
  },
  {
    "text": "used to record the traffic so we would put one wire mock instance in front of the service one wire mock after the",
    "start": "2367300",
    "end": "2374770"
  },
  {
    "text": "legacy and we will run all the possible requests that we can this will be recorded we then convert into packed",
    "start": "2374770",
    "end": "2381160"
  },
  {
    "text": "files and we have our incoming and outgoing contracts and then as we separate one provider we just use these",
    "start": "2381160",
    "end": "2387910"
  },
  {
    "text": "contracts to check if the provider is behaving as it should be we told the Box and with a features and so on as the",
    "start": "2387910",
    "end": "2395260"
  },
  {
    "text": "legacy system so this is what the client expects to happen and this this has",
    "start": "2395260",
    "end": "2400869"
  },
  {
    "text": "worked flawlessly for us we split the whole monolid it took us like six months",
    "start": "2400869",
    "end": "2405910"
  },
  {
    "text": "nobody noticed that we were doing anything and everything was just fine yeah that's about it there are some",
    "start": "2405910",
    "end": "2415960"
  },
  {
    "text": "questions or comments thank you",
    "start": "2415960",
    "end": "2420088"
  },
  {
    "text": "you",
    "start": "2422240",
    "end": "2424300"
  }
]