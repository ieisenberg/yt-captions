[
  {
    "text": "[Music] thanks for coming to my talk it's I guess the last Talk of the day so it's",
    "start": "6990",
    "end": "12480"
  },
  {
    "text": "always fun so thanks for sticking it out uh I'm going to talk about a bunch",
    "start": "12480",
    "end": "18720"
  },
  {
    "text": "of research today so you know there's not going to be some scholar library at the end of the talk that you can install and use immediately unfortunately but",
    "start": "18720",
    "end": "25359"
  },
  {
    "text": "what I'm going to do is kind of just challenge you to think differently about the way you build large scale distributed applications today and uh uh",
    "start": "25359",
    "end": "34000"
  },
  {
    "text": "so my name is Christopher Mel John uh I'm a PhD student at the University Catholic de uh in Belgium uh and uh this",
    "start": "34000",
    "end": "42440"
  },
  {
    "text": "this research I'm going to talk about today is a joint research project funded by the European Union um that's work",
    "start": "42440",
    "end": "48879"
  },
  {
    "text": "between my University the haslab in Portugal uh and the University of Oxford",
    "start": "48879",
    "end": "54320"
  },
  {
    "text": "um so this is where all of our collaborators are and so basically the challenges that we're trying to address are how to safely build large scale",
    "start": "54320",
    "end": "61199"
  },
  {
    "text": "systems that minimize coordination so we're trying to kind of do the opposite of what you might do today where you",
    "start": "61199",
    "end": "66840"
  },
  {
    "text": "build a large scale distributor system around something like zookeeper or or console or ETD or something like this",
    "start": "66840",
    "end": "72759"
  },
  {
    "text": "like a a consensus protocol and so I'm just going to kind of set the stage about what U my",
    "start": "72759",
    "end": "79640"
  },
  {
    "text": "research works on and so um if we consider the case uh of an application",
    "start": "79640",
    "end": "84840"
  },
  {
    "text": "where we have a a register so a register is like a variable that you can set or get the value and and uh we distribute",
    "start": "84840",
    "end": "90799"
  },
  {
    "text": "this so we have two copies of it uh replica a and replica B so we we distribute this for fault tolerance and",
    "start": "90799",
    "end": "96000"
  },
  {
    "text": "high availability traditionally um in most schemes that use optimistic replication uh we'll set",
    "start": "96000",
    "end": "102560"
  },
  {
    "text": "the value to one and then we'll send a message asynchronously to replica B and we'll say your value should now be one",
    "start": "102560",
    "end": "109040"
  },
  {
    "text": "and so at this point in time the value of B will be one as well now if I without synchronization",
    "start": "109040",
    "end": "115799"
  },
  {
    "text": "without coordination if I concurrently set replica a to the value two and then you know in in concurrent logical time I",
    "start": "115799",
    "end": "123079"
  },
  {
    "text": "said replica B to the value three then at the end of this execution I don't",
    "start": "123079",
    "end": "128520"
  },
  {
    "text": "know what the result I'm going to have is um if I do this without coordination it's because these messages can be",
    "start": "128520",
    "end": "134040"
  },
  {
    "text": "arbitrarily delayed they can be reordered and they can be replayed because this is the realities of the",
    "start": "134040",
    "end": "139440"
  },
  {
    "text": "asynchronous kind of communication networks that we build systems on and so historically uh the way that",
    "start": "139440",
    "end": "146080"
  },
  {
    "text": "we solve this program whether you know you realize it or not is through the use of synchronization and so what",
    "start": "146080",
    "end": "151959"
  },
  {
    "text": "synchronization does in programming is it it enforces an order it says that given this program I'm going to enforce",
    "start": "151959",
    "end": "157440"
  },
  {
    "text": "either a locking order or some sort of mutch strategy or something like this to enforce a predictable order and then I",
    "start": "157440",
    "end": "163760"
  },
  {
    "text": "know what the outcome of the execution is going to be and so to kind of put this in non-academic terms uh well first",
    "start": "163760",
    "end": "169840"
  },
  {
    "text": "I'll put it in the academic term we call this accidental non-determinism um but you may be more",
    "start": "169840",
    "end": "174920"
  },
  {
    "text": "familiar with the term race condition says that if I have a shared object and I am modifying it from two actors I",
    "start": "174920",
    "end": "181840"
  },
  {
    "text": "don't know what the value is gonna get unless I use a lock to excl to use something like Mutual exclusion or something like that and so the",
    "start": "181840",
    "end": "189200"
  },
  {
    "text": "techniques you might be familiar with for solving this problem uh there's a bunch uh so you have you know all the traditional concurrent programming",
    "start": "189200",
    "end": "195440"
  },
  {
    "text": "techniques such as locks mutexes uh Mutual exclusion semaphor uh monitors",
    "start": "195440",
    "end": "202040"
  },
  {
    "text": "and a variety of others and uh so in the distributed context we would have things like paxos or replicated State machines",
    "start": "202040",
    "end": "207720"
  },
  {
    "text": "or things like this and so the problem that we're looking at as researchers is",
    "start": "207720",
    "end": "212959"
  },
  {
    "text": "this situation where if we have devices that are not connected to the internet all the time and they need to continue",
    "start": "212959",
    "end": "218080"
  },
  {
    "text": "making progress if I have two devices that are modifying the same piece of data I can't stop the world and",
    "start": "218080",
    "end": "223680"
  },
  {
    "text": "synchronize if the device is offline because I may wait for an unbounded amount of time and so in a lot of these",
    "start": "223680",
    "end": "229599"
  },
  {
    "text": "cases uh and these are motivated by actual industry use cases in a lot of these cases we cannot use synchronization to solve these problems",
    "start": "229599",
    "end": "235840"
  },
  {
    "text": "and so we need to approach the problems in a different way and so the example I'm going to give you is uh based on a",
    "start": "235840",
    "end": "241879"
  },
  {
    "text": "company that I've been working with in the Bay Area um that that monitors the temperature of Hospital refrigerators uh",
    "start": "241879",
    "end": "248599"
  },
  {
    "text": "at hospitals around uh uh UCSF so the University of California at San",
    "start": "248599",
    "end": "253720"
  },
  {
    "text": "Francisco and so uh what they want to do is they want to send alerts whenever the temperature either gets too hot or too",
    "start": "253720",
    "end": "260400"
  },
  {
    "text": "warm because it means there's some sort of manufacturer like some sort of problem that needs to be addressed by a manufacturer or something like this like",
    "start": "260400",
    "end": "266919"
  },
  {
    "text": "compressor not working or something and so in the in the world that we live in today uh the way we would kind of",
    "start": "266919",
    "end": "273199"
  },
  {
    "text": "address this is we would have our refrigerators and we' put them on the Internet uh because it's the internet of things and if this was 2007 uh the",
    "start": "273199",
    "end": "281600"
  },
  {
    "text": "architecture that we would use looks kind of like this we would send data from the refrigerators to some Central",
    "start": "281600",
    "end": "286840"
  },
  {
    "text": "data center this data center would be running Hadoop or something similar and then we would periodically run jobs to",
    "start": "286840",
    "end": "292919"
  },
  {
    "text": "say are any of the refrigerator is going bad and if we found one that was going bad we'd trigger some",
    "start": "292919",
    "end": "298400"
  },
  {
    "text": "alert now that was 2007 it's 2016 now so things are much more advanced and so",
    "start": "298400",
    "end": "304600"
  },
  {
    "text": "maybe we would use something like spark or spark streaming right and so kind of the same idea works even if you use spark streaming it's still micro",
    "start": "304600",
    "end": "310840"
  },
  {
    "text": "batching and so kind of the same philosophy applies and so in the ideal execution of",
    "start": "310840",
    "end": "316360"
  },
  {
    "text": "this application what we have is that we have our refrigerators and we'll assume that we're using spark and we gener we",
    "start": "316360",
    "end": "322199"
  },
  {
    "text": "generate some data point that says things are okay from this refrigerator and we send it to the data center nothing happens now when we generate an",
    "start": "322199",
    "end": "329800"
  },
  {
    "text": "alert that says oh my God the refrigerator's too warm everything is going to go bad then when we transmit this to the data center ideally what",
    "start": "329800",
    "end": "336400"
  },
  {
    "text": "this is going to do is trigger some sort of condition based on some job that's running in spark and it's going to alert somebody on the phone via pag or Duty or",
    "start": "336400",
    "end": "343639"
  },
  {
    "text": "something like this right and so the interesting observation if we look at this infrastructure is that this this",
    "start": "343639",
    "end": "350160"
  },
  {
    "text": "typical infrastructure relies on immutability it says that every single event that's generated is unique and I",
    "start": "350160",
    "end": "356199"
  },
  {
    "text": "propagate that event I can replay these events cuz there's only ever going to be one with with a unique identifier and so the observation here",
    "start": "356199",
    "end": "363759"
  },
  {
    "text": "is that immutability is really expensive because what we're doing is we have these devices that are theoretically low",
    "start": "363759",
    "end": "369560"
  },
  {
    "text": "power but they have to stay online all the time and they have to operate the antenna all the time because they're constantly transmitting data every",
    "start": "369560",
    "end": "375880"
  },
  {
    "text": "second saying everything's fine everything's fine everything's fine until there's a problem now the second problem is if we",
    "start": "375880",
    "end": "383280"
  },
  {
    "text": "look at this infrastructure and we consider the case where the internet connection is down for the refrigerator",
    "start": "383280",
    "end": "389000"
  },
  {
    "text": "now we can't transmit the samples and so a lot of Manufacturers will tell you well that's fine what we'll do is we'll",
    "start": "389000",
    "end": "394240"
  },
  {
    "text": "buffer them and we'll eventually transmit them but in the event that this internet connection is done down for I",
    "start": "394240",
    "end": "400280"
  },
  {
    "text": "don't know a day or an hour who knows that might be too late we may need to take local action here um if you've",
    "start": "400280",
    "end": "406840"
  },
  {
    "text": "looked at this this research paper that Google released uh at um at sigcom a few weeks ago uh Google at least saw the",
    "start": "406840",
    "end": "414840"
  },
  {
    "text": "observation in their own data centers that Network partitions that cause connectivity to not work in their own",
    "start": "414840",
    "end": "419919"
  },
  {
    "text": "data center would be no quicker resolve than 10 minutes so I mean that can be a",
    "start": "419919",
    "end": "425759"
  },
  {
    "text": "big deal if we're talking about you know across the whole internet if we're talking about this is operating over a radio or GPRS or whatever and so ideally",
    "start": "425759",
    "end": "435680"
  },
  {
    "text": "what we want to do is we want to be able to have the devices take local aption so we'd like the code that we write that",
    "start": "435680",
    "end": "440840"
  },
  {
    "text": "runs over here to also run over here and this means that when we do this the devices can continue to take action",
    "start": "440840",
    "end": "447759"
  },
  {
    "text": "continue to process things even even in the event that connectivity is down so we're decentralizing the processing and",
    "start": "447759",
    "end": "453960"
  },
  {
    "text": "so kind of the observation you can take away from this is that centralized processing is isn't available and when I",
    "start": "453960",
    "end": "459560"
  },
  {
    "text": "mean available I mean availability in kind of the cap big a availability sense in distributed systems in that the",
    "start": "459560",
    "end": "465520"
  },
  {
    "text": "system cannot make progress It's not live when the connectivity is",
    "start": "465520",
    "end": "470639"
  },
  {
    "text": "down so a lot of this stuff isn't new um this kind of falls under a broad range of research called Edge computation it",
    "start": "470639",
    "end": "477840"
  },
  {
    "text": "basically means that we want to push code and the data that that code operates on kind of to where the data is being generated which we refer to as the",
    "start": "477840",
    "end": "485000"
  },
  {
    "text": "logical extremes of the network um ideally we want this to be arbitrary",
    "start": "485000",
    "end": "490120"
  },
  {
    "text": "computation so anything that you could run on a turning machine you know anything kind of like that that you'd want to be able to do we'll see that",
    "start": "490120",
    "end": "496080"
  },
  {
    "text": "that's not easily uh easily able to be done and finally uh there's precedent on",
    "start": "496080",
    "end": "501400"
  },
  {
    "text": "a lot of this work going back for a very long time there's systems at least in the 80s that did some of this stuff and then in the 9s Cornell University in the",
    "start": "501400",
    "end": "508479"
  },
  {
    "text": "United States did a lot of work around having self-organizing systems that were used by the US military uh in areas",
    "start": "508479",
    "end": "514839"
  },
  {
    "text": "where there was only peer-to-peer connectivity and transitive connectivity between peers uh you couldn't you couldn't rely on there being Wi-Fi",
    "start": "514839",
    "end": "521039"
  },
  {
    "text": "effectively in the battlefield right and so uh what I'm going to try to convince you of I guess or or rather the the",
    "start": "521039",
    "end": "528360"
  },
  {
    "text": "point of my research is that what we what we the ideal the gold standard we consider here is that all of the devices",
    "start": "528360",
    "end": "534160"
  },
  {
    "text": "rather than transmitting uh individual events saying what the state is over time a time series what I want to",
    "start": "534160",
    "end": "540600"
  },
  {
    "text": "convince you is that well what we could do is just keep a piece of state that represents the state of everything and",
    "start": "540600",
    "end": "546000"
  },
  {
    "text": "then we could transitively disseminate this without order to all the clients in the system and effectively what this",
    "start": "546000",
    "end": "552760"
  },
  {
    "text": "will allow us to do is have any of the events in our system any of the Sy any",
    "start": "552760",
    "end": "557800"
  },
  {
    "text": "of the machines in our system take local action and uh what I'm representing here is that the core challenge here is that",
    "start": "557800",
    "end": "563880"
  },
  {
    "text": "traditionally in systems like I said in the beginning we need synchronization to enforce a predictable order so we can program again those that order and what",
    "start": "563880",
    "end": "571800"
  },
  {
    "text": "I'm trying to do with my research is build programming languages and computational models where ordering doesn't matter and we'll see what I mean",
    "start": "571800",
    "end": "578600"
  },
  {
    "text": "by that and so again to summarize the two points of the research uh the two points are that immutability is very",
    "start": "578600",
    "end": "584920"
  },
  {
    "text": "nice it's very easy to program but it's very expensive uh it's very expensive in terms of bandwidth and because it's",
    "start": "584920",
    "end": "590519"
  },
  {
    "text": "expensive in terms of bandwidth it's expensive in terms of power because we have to operate antennas on devices and",
    "start": "590519",
    "end": "596079"
  },
  {
    "text": "the second one is that centralized processing is not available but it's easier program and so can we make",
    "start": "596079",
    "end": "601279"
  },
  {
    "text": "distributed programming as easy as centralized programming now to just kind of give you some figures so you understand what",
    "start": "601279",
    "end": "607240"
  },
  {
    "text": "we're looking at here if we look at this report from Andre and horrorwitz from uh from a deck they released I forget uh",
    "start": "607240",
    "end": "613399"
  },
  {
    "text": "maybe earlier this year or last year uh we can see that even though the price to manufacture mobile devices is getting",
    "start": "613399",
    "end": "619440"
  },
  {
    "text": "much cheaper and mobile devices are becoming kind of you know everybody has one they're everywhere we can get them",
    "start": "619440",
    "end": "625279"
  },
  {
    "text": "to all sorts of countries we see that data is still really expensive and so the price of bandwidth and the price of",
    "start": "625279",
    "end": "630560"
  },
  {
    "text": "data is not going down uh in the same way that kind of Moore's Law is is affecting our our processing and so the",
    "start": "630560",
    "end": "638000"
  },
  {
    "text": "goals of my work to summarize are to make mutable mutable state is reality so can we make dealing with mutable State",
    "start": "638000",
    "end": "644519"
  },
  {
    "text": "easier and secondly uh IM mutability makes programming easier so can we make",
    "start": "644519",
    "end": "649959"
  },
  {
    "text": "programming with mutable state in in a distributed system easier and so these are challenging because it relies on",
    "start": "649959",
    "end": "655279"
  },
  {
    "text": "commutativity and we'll talk more about how commutativity pies in with concurrency",
    "start": "655279",
    "end": "660720"
  },
  {
    "text": "and so the goal of researchers again is to just kind of combine these two things and see how far we can push it and so if",
    "start": "660720",
    "end": "667600"
  },
  {
    "text": "you're not familiar with distributed programming um and you're familiar with",
    "start": "667600",
    "end": "673240"
  },
  {
    "text": "concurrent programming uh the main difference when you move from concurrent programming to distributed programming",
    "start": "673240",
    "end": "678440"
  },
  {
    "text": "is that in distributed programming things can fail and you don't know that they failed so in a lot of concurrent programming a lot of concurrent",
    "start": "678440",
    "end": "684399"
  },
  {
    "text": "programming models we have today assume that you can reliably detect a failure you kind of have and you have synchr",
    "start": "684399",
    "end": "689600"
  },
  {
    "text": "clocks on your machine right and you have a clock rate on your machine and so distributed systems brings in this additional challenge that I could send a",
    "start": "689600",
    "end": "695680"
  },
  {
    "text": "message to somebody and I don't know if that party received the message and didn't reply or never received the",
    "start": "695680",
    "end": "700880"
  },
  {
    "text": "message or received the message and crashed and I can't I cannot determine the difference of these things and",
    "start": "700880",
    "end": "706160"
  },
  {
    "text": "there's a lot of famous uh academic results that show that this is extremely difficult to do reliably and so we need",
    "start": "706160",
    "end": "712320"
  },
  {
    "text": "to build systems that that do this in an unreliable fashion and so timeouts are one way that we do this in real systems",
    "start": "712320",
    "end": "718839"
  },
  {
    "text": "that's reliable because we assume if you didn't respond within this time you're you're down but that doesn't mean that you're actually down and so the reason",
    "start": "718839",
    "end": "726480"
  },
  {
    "text": "that this is challenging is because traditionally in distributed database development to date uh what we do is we",
    "start": "726480",
    "end": "732519"
  },
  {
    "text": "build these massively big databases that have hundreds of machines but in these systems what we try to do is give the",
    "start": "732519",
    "end": "738639"
  },
  {
    "text": "illusion that they are one system with one consistency model if I write to one machine and I read from another I'll get",
    "start": "738639",
    "end": "744839"
  },
  {
    "text": "the same value and we'll see that that's very difficult to do in practice",
    "start": "744839",
    "end": "750880"
  },
  {
    "text": "um so to show you kind of where synchronization plays in and why it might be unreliable I'm going to talk",
    "start": "750880",
    "end": "756839"
  },
  {
    "text": "about databases um and so prior to doing my PhD uh I was an engineer at uh at I",
    "start": "756839",
    "end": "763360"
  },
  {
    "text": "worked on many databases I worked on a database at uh gaming company machine Zone I worked at baso for several years",
    "start": "763360",
    "end": "768440"
  },
  {
    "text": "on the react database and I also worked at mesosphere on on their database that",
    "start": "768440",
    "end": "773480"
  },
  {
    "text": "uh is used for high availability in Marathon and so um a lot of my background is on databases and so I'll",
    "start": "773480",
    "end": "779279"
  },
  {
    "text": "briefly talk about uh databases and so in databases we have this notion of of linearizability or",
    "start": "779279",
    "end": "785920"
  },
  {
    "text": "more commonly known strong consistency and what this means is uh if I have a single copy of my database so",
    "start": "785920",
    "end": "792680"
  },
  {
    "text": "only one replica and I have this object this screen Circle if I have two clients that are",
    "start": "792680",
    "end": "798079"
  },
  {
    "text": "executing concurrently one is going to read a value from the replica and then the second note is going to read the same value from that",
    "start": "798079",
    "end": "804720"
  },
  {
    "text": "replica now when client one mutates this value and changes it from the green circle to the Blue Square when client",
    "start": "804720",
    "end": "811720"
  },
  {
    "text": "one goes to write this operation back to the database a lot of times we use what's referred to as a compare and swap operation which says that as long as the",
    "start": "811720",
    "end": "818880"
  },
  {
    "text": "value is still the green circle my change of that value to the blue square is still valid but if that value changed",
    "start": "818880",
    "end": "824680"
  },
  {
    "text": "in between the time that I retrieved it and wrote a value and sent it back to the database I want to refuse that",
    "start": "824680",
    "end": "830600"
  },
  {
    "text": "operation so this succeeds but then when client two goes to write its red diamond",
    "start": "830600",
    "end": "836320"
  },
  {
    "text": "back to the replica this operation fails and the reason this is done in a lot of databases is and transaction protocols",
    "start": "836320",
    "end": "843199"
  },
  {
    "text": "kind of work this way if you're familiar depending on the isolation level and the consistency level it provides but the",
    "start": "843199",
    "end": "848440"
  },
  {
    "text": "intuition here is that well my change of that value to this red diamond might no longer be valid because I based my",
    "start": "848440",
    "end": "855120"
  },
  {
    "text": "change on some state that is no longer in the database now you can imagine if I have",
    "start": "855120",
    "end": "862120"
  },
  {
    "text": "to do this in a distributed system where I have multiple copies of my replicas multiple copies of my database multiple",
    "start": "862120",
    "end": "867320"
  },
  {
    "text": "replicas and any of them can fail and I want to maintain availability you can imagine that this process gets very very",
    "start": "867320",
    "end": "874399"
  },
  {
    "text": "expensive because now I need to have the nodes agree on what the value is going to be and I need to wait until I have",
    "start": "874399",
    "end": "880040"
  },
  {
    "text": "acknowledgements from a majority of those nodes and then I can proceed and so we're starting to see kind of am",
    "start": "880040",
    "end": "885279"
  },
  {
    "text": "doll's law come out here where we only can go fast as fast as the slowest kind",
    "start": "885279",
    "end": "890519"
  },
  {
    "text": "of component here which is going to be solving that consensus problem getting agreement of these",
    "start": "890519",
    "end": "895839"
  },
  {
    "text": "databases and so you may be more familiar with database uh these web scale databases uh that are",
    "start": "895839",
    "end": "902199"
  },
  {
    "text": "that have an eventually consistent uh or a weekly consistent model uh reak is one of these Apache",
    "start": "902199",
    "end": "908880"
  },
  {
    "text": "Cassandra is another and the way these databases work is they kind of acknowledge that you're",
    "start": "908880",
    "end": "914199"
  },
  {
    "text": "going to have concurrent readers and writers operating but then concurrently client one could go to issue or write",
    "start": "914199",
    "end": "921120"
  },
  {
    "text": "back at the same time that client two goes to issue a right back and because of this what a lot of these databases do",
    "start": "921120",
    "end": "928560"
  },
  {
    "text": "is they'll store multiple values back because they cannot determine a relationship between those values they",
    "start": "928560",
    "end": "933759"
  },
  {
    "text": "say they happen concurrently we don't know which one really happened first and so they'll store multiple values and",
    "start": "933759",
    "end": "939360"
  },
  {
    "text": "they'll place the onus on the application developer when they read the database next time to resolve these and",
    "start": "939360",
    "end": "946079"
  },
  {
    "text": "so uh if we go back to the Apache so react will store both um because it never wants to lose a right if we look",
    "start": "946079",
    "end": "952040"
  },
  {
    "text": "at uh the default settings for Apache Cassandra Apache Cassandra will use the last one that happened at the time stamp",
    "start": "952040",
    "end": "958240"
  },
  {
    "text": "provided by the client and so in the react case you have to deal with the problem where you have multiple values",
    "start": "958240",
    "end": "963880"
  },
  {
    "text": "and when you read from the database you might not be expecting multiple values where in the Apache Cassandra case what",
    "start": "963880",
    "end": "969240"
  },
  {
    "text": "you can do is you can supply a timestamp that's much farther in the future than it actually is and then no right that",
    "start": "969240",
    "end": "974759"
  },
  {
    "text": "will ever happen after you in actual temporal time until that time is reached will appear because you've effectively",
    "start": "974759",
    "end": "980040"
  },
  {
    "text": "said I wrote this in the future and so it's going to be there until it gets to be that time in the future and so Cassandra resolves this automatically",
    "start": "980040",
    "end": "986759"
  },
  {
    "text": "will arbitrate and pick the one with the greatest time stamp and so kind of both of these approaches are problematic",
    "start": "986759",
    "end": "992199"
  },
  {
    "text": "because it makes developing on these systems difficult for application developers and so we're going to kind of",
    "start": "992199",
    "end": "998959"
  },
  {
    "text": "argue with this work that we consistency is a better model because this concurrency actually happens to assume",
    "start": "998959",
    "end": "1004880"
  },
  {
    "text": "that you can have a total order on a globally distri distributed system for every single event that happens anywhere",
    "start": "1004880",
    "end": "1010880"
  },
  {
    "text": "in the world well that's kind of a fallacy right there is no simultaneity plane we can't do this it makes programming easier and that's why we do",
    "start": "1010880",
    "end": "1017360"
  },
  {
    "text": "it but it doesn't actually match the way things are actually working and so to resolve this uh the",
    "start": "1017360",
    "end": "1024600"
  },
  {
    "text": "the area of research that me and my colleagues work on is an area of research called strong eventual consistency and so this is a combination",
    "start": "1024600",
    "end": "1031480"
  },
  {
    "text": "of a convergence property which is strong and a consistency model which is weak and what this says is that as long",
    "start": "1031480",
    "end": "1038160"
  },
  {
    "text": "as all of the machines in the system observe the same set of updates regardless of order they'll all converge",
    "start": "1038160",
    "end": "1043839"
  },
  {
    "text": "to the same result now what's nice about this model is that it only relies on us delivering",
    "start": "1043839",
    "end": "1049640"
  },
  {
    "text": "the messages to every node in the system this can be trun transitively you don't need a sequencer you don't need consensus you don't need anything like",
    "start": "1049640",
    "end": "1055720"
  },
  {
    "text": "that and the other very two important properties uh demonstrated from my earlier example are that since all the",
    "start": "1055720",
    "end": "1062360"
  },
  {
    "text": "operations with strong eventually consistent uh strongly event strong eventual consistency systems are",
    "start": "1062360",
    "end": "1068120"
  },
  {
    "text": "commutative that means I can deliver the updates in any order which is very nice the other benefit is that this is so",
    "start": "1068120",
    "end": "1074720"
  },
  {
    "text": "there's also uh operations are item potent so I can replay them multiple times so I can build systems that are at least once delivery which is nice",
    "start": "1074720",
    "end": "1081400"
  },
  {
    "text": "because those are easier to build and finally it's also batching and sensitive which is an associativity property if",
    "start": "1081400",
    "end": "1087280"
  },
  {
    "text": "you uh remember your uh you know uh high school algebra and so I'm going to give",
    "start": "1087280",
    "end": "1093280"
  },
  {
    "text": "you a a super simple example of kind of what how we could fulfill this trivially",
    "start": "1093280",
    "end": "1099360"
  },
  {
    "text": "uh that won't be super valuable so if we go back to the original example that I had here I said that I was going to",
    "start": "1099360",
    "end": "1104520"
  },
  {
    "text": "concurrently write two and three to this register now if I assume that these Val",
    "start": "1104520",
    "end": "1109720"
  },
  {
    "text": "the values that I only can give to this register are arranged over the monotonically increasing natural numbers",
    "start": "1109720",
    "end": "1114919"
  },
  {
    "text": "so from one and greater then a function that delivers strong eventual",
    "start": "1114919",
    "end": "1119960"
  },
  {
    "text": "consistency is the max function it says that I can reorder this diagram in any",
    "start": "1119960",
    "end": "1125640"
  },
  {
    "text": "arbitrary way and I can replay these messages an arbitrary number of time and",
    "start": "1125640",
    "end": "1131080"
  },
  {
    "text": "I will not get different results I will always get the same result now is this useful no I mean if you were building a",
    "start": "1131080",
    "end": "1137559"
  },
  {
    "text": "distributed C service and charging for API calls then this would be a really really great design for that but but",
    "start": "1137559",
    "end": "1144600"
  },
  {
    "text": "this is not very useful in itself right and so the challenge that we are trying to solve is how can I make this Max",
    "start": "1144600",
    "end": "1150320"
  },
  {
    "text": "function be arbitrary how can I make this an arbitrary F and that f is your application code and so we'll see that",
    "start": "1150320",
    "end": "1156120"
  },
  {
    "text": "this is extremely difficult to do that's why you get a PhD for it I guess or maybe you don't if you don't",
    "start": "1156120",
    "end": "1161919"
  },
  {
    "text": "solve it but and so uh if we would say uh so if we if we go back on the strong",
    "start": "1161919",
    "end": "1167120"
  },
  {
    "text": "eventually consistent the strong eventual consistency idea if I was going to define a criteria on why I think uh",
    "start": "1167120",
    "end": "1173840"
  },
  {
    "text": "how we can be successful in building these systems I would break it into three components and the first component",
    "start": "1173840",
    "end": "1179559"
  },
  {
    "text": "is we want these data structures that allow us to do these operations without coordination now once I have a bunch of",
    "start": "1179559",
    "end": "1185480"
  },
  {
    "text": "data structures that allow me to do this what I need is a programming language that allows me to build applications with these data structures and so we'll",
    "start": "1185480",
    "end": "1191679"
  },
  {
    "text": "see what I mean but the important property here that we're trying to achieve is something we call Confluence and so if you're familiar with uh uh",
    "start": "1191679",
    "end": "1198960"
  },
  {
    "text": "Lambda calculus or or hascal programming or something Confluence is a property that says I can evaluate the schedule of",
    "start": "1198960",
    "end": "1204880"
  },
  {
    "text": "a program in any arbitrary order any arbitrary reduction order and I get the same result and that's a very important",
    "start": "1204880",
    "end": "1211280"
  },
  {
    "text": "property to have in programming languages and then finally the last component is well we need a way to actually deploy this thing and run it",
    "start": "1211280",
    "end": "1217840"
  },
  {
    "text": "because that's the you know that's the way things work in the real world and we have to make this efficient and so we'll talk about the challenges",
    "start": "1217840",
    "end": "1223880"
  },
  {
    "text": "there okay and so I'm going to go through each of these in sequence and so for number one for the data structures",
    "start": "1223880",
    "end": "1230159"
  },
  {
    "text": "the the design that I showed you before is a much more General design that was observed by some of my colleagues in",
    "start": "1230159",
    "end": "1235760"
  },
  {
    "text": "2011 and uh this this data structure design is called Conflict Free replicated data",
    "start": "1235760",
    "end": "1241400"
  },
  {
    "text": "types um and so what Conflict Free replicated data types are are data structures that app that have sequential",
    "start": "1241400",
    "end": "1248679"
  },
  {
    "text": "versions but they're designed for distribution so we have things like sets counters uh registers so counters are",
    "start": "1248679",
    "end": "1254679"
  },
  {
    "text": "integers but you can't set the value you only can start at a particular value go up and down well that's problematic",
    "start": "1254679",
    "end": "1260440"
  },
  {
    "text": "because set is an operation that is not commutative in many cases uh we have things like Flags which are booleans",
    "start": "1260440",
    "end": "1266360"
  },
  {
    "text": "that can move in One Direction so they can move from false to true or true to false we'll see that's a a lattice and",
    "start": "1266360",
    "end": "1272679"
  },
  {
    "text": "then finally we have things like dictionaries which are recursive and graphs and so we there's also sequences",
    "start": "1272679",
    "end": "1278559"
  },
  {
    "text": "but sequences are are much too complicated to show here but um sequences obviously would be your list",
    "start": "1278559",
    "end": "1283840"
  },
  {
    "text": "data type and what these data structures are going to do is they're going to fulfill this property this convergence property",
    "start": "1283840",
    "end": "1289880"
  },
  {
    "text": "for a given data structure only and I'm going to show you what this means so I'm going to show you how to",
    "start": "1289880",
    "end": "1296279"
  },
  {
    "text": "design a set that can be distributed without coordination or minimal coordination that will allow me to",
    "start": "1296279",
    "end": "1302200"
  },
  {
    "text": "remove and add elements to it and always get the same result after just doing asynchronous replication and so the way",
    "start": "1302200",
    "end": "1308640"
  },
  {
    "text": "this works is I I'm going to have a three I'm going to have three pieces here the the circle in the middle is",
    "start": "1308640",
    "end": "1314360"
  },
  {
    "text": "going to represent what the value of the set is at that time uh the the kind of old shape on the top there is going to",
    "start": "1314360",
    "end": "1320640"
  },
  {
    "text": "be uh the operation that I'm running and then I'm going to model the contents of the S the set as a set of three tuples",
    "start": "1320640",
    "end": "1328840"
  },
  {
    "text": "and these three tuples are going to represent the element that's been added to the set a set of unique constants",
    "start": "1328840",
    "end": "1334159"
  },
  {
    "text": "representing the times it was added and a set of unique removals and so the way this works is when replica a goes to",
    "start": "1334159",
    "end": "1340360"
  },
  {
    "text": "issue an add on the set and add the value one it's going to generate some unique token represented by Alpha here",
    "start": "1340360",
    "end": "1345840"
  },
  {
    "text": "and it's going to add one with Alpha and so what this represent presentation shows is that I have added one to the",
    "start": "1345840",
    "end": "1351799"
  },
  {
    "text": "set with unique at time logical time Alpha now it's going to asynchronously",
    "start": "1351799",
    "end": "1357159"
  },
  {
    "text": "replicate these messages to the other to the other replicas in the system and now if concurrent if",
    "start": "1357159",
    "end": "1362840"
  },
  {
    "text": "concurrently replica C also adds one replica C is going to generate a different constant beta and that",
    "start": "1362840",
    "end": "1369240"
  },
  {
    "text": "constant is going to represent that c added it at logical Time beta now when C",
    "start": "1369240",
    "end": "1374559"
  },
  {
    "text": "goes to remove the element from the set C is going to take the additions it knows about so the times it was added it",
    "start": "1374559",
    "end": "1381240"
  },
  {
    "text": "knows about and it's going to mark them as deleted so it said okay I saw that one was added to the set at logical Time",
    "start": "1381240",
    "end": "1387559"
  },
  {
    "text": "beta and so I want to Mark beta is deleted now what happens is when I eventually deliver these messages from a",
    "start": "1387559",
    "end": "1394600"
  },
  {
    "text": "what I do is to merge these data structures together I take the pairwise union of both the additions and the removals and then determine what is in",
    "start": "1394600",
    "end": "1401760"
  },
  {
    "text": "the set I say is the additions a strict superet of the removals and if it are if",
    "start": "1401760",
    "end": "1407799"
  },
  {
    "text": "it is right then uh one is still in the set and so what this shows here is that it shows",
    "start": "1407799",
    "end": "1414200"
  },
  {
    "text": "here that one is in the set because it was added at logical time Alpha added at logical Time beta and removed at logical",
    "start": "1414200",
    "end": "1420520"
  },
  {
    "text": "Time beta and so this allows me to modify a data structure where I can add and remove things arbitrarily and I",
    "start": "1420520",
    "end": "1426600"
  },
  {
    "text": "don't have to worry about using something like paxos to coordinate the rights if I want",
    "start": "1426600",
    "end": "1432799"
  },
  {
    "text": "convergence it's happening logic at concurrently so there's no relationship between",
    "start": "1437440",
    "end": "1444360"
  },
  {
    "text": "them because the the remove operation tombstones the known",
    "start": "1445080",
    "end": "1451320"
  },
  {
    "text": "ads remove happens at a different time but it but it Mark it marks the",
    "start": "1451400",
    "end": "1456960"
  },
  {
    "text": "additions it's seen as removed so it says I observe",
    "start": "1456960",
    "end": "1462240"
  },
  {
    "text": "these I am not recording I am not recording that here yes but there are some representations that do record time",
    "start": "1463080",
    "end": "1468880"
  },
  {
    "text": "it's just not necessary for this okay and so that's how you do data structures and so there's a variety of",
    "start": "1468880",
    "end": "1475240"
  },
  {
    "text": "these uh this is a very unoptimized representation because it grows on order of the number of operations that are",
    "start": "1475240",
    "end": "1480320"
  },
  {
    "text": "executed and so that's not very good but we have all sorts of optimized representations of this we have a bunch",
    "start": "1480320",
    "end": "1485840"
  },
  {
    "text": "of variants of this set and so if you're interested in that after the talk I can point you to the literature where there are many many different designs this is",
    "start": "1485840",
    "end": "1492520"
  },
  {
    "text": "just the one that's the most compelling for slide driven development if you will okay and so",
    "start": "1492520",
    "end": "1498880"
  },
  {
    "text": "and so once we have these data structures uh these data structures are formalized as a bound to join semilattices if you're if you're into",
    "start": "1498880",
    "end": "1505760"
  },
  {
    "text": "mathematics and once we have these data structures what we need is a programming language that will allow us to build",
    "start": "1505760",
    "end": "1511240"
  },
  {
    "text": "applications with them because I can't read the value if I go back to this example and at this time I read this",
    "start": "1511240",
    "end": "1517120"
  },
  {
    "text": "value and then I base some decision on it in my language well when it eventually merges this that decision might not be valid anymore and so what",
    "start": "1517120",
    "end": "1524000"
  },
  {
    "text": "we want to do is have a language that appears like a normal functional language but actually it manipulates all",
    "start": "1524000",
    "end": "1529399"
  },
  {
    "text": "of this internal metadata transparently for you as you can think of this as kind of a monatic composition of the data structures and so uh we built a system",
    "start": "1529399",
    "end": "1537000"
  },
  {
    "text": "in uh 2015 uh called lce processing or last for short and this is a system that",
    "start": "1537000",
    "end": "1542880"
  },
  {
    "text": "is a asynchronous dataflow system that uh has a functional programming API that allows you to take these objects and",
    "start": "1542880",
    "end": "1549799"
  },
  {
    "text": "compose them in ways and so the only operations we have today are things like map filter fold uh uh product Union and",
    "start": "1549799",
    "end": "1556799"
  },
  {
    "text": "intersection but this is efficient for us to express a good amount of uh subset of of anql that allows people to kind of",
    "start": "1556799",
    "end": "1564200"
  },
  {
    "text": "Express uh types of computations that they want to run and so the important thing here is that uh the language the",
    "start": "1564200",
    "end": "1570960"
  },
  {
    "text": "core data abstraction the only data abstraction in the language is the crdt so it's just these data structures we",
    "start": "1570960",
    "end": "1576240"
  },
  {
    "text": "talked about and finally what this does is allows us to guarantee SEC through",
    "start": "1576240",
    "end": "1582760"
  },
  {
    "text": "composition so if I take some data structure and I compute some product and then I filter it and fold it into some",
    "start": "1582760",
    "end": "1587799"
  },
  {
    "text": "aggregate I guarantee that the result I get out at the end is a crdt which means that I can have a crdt input a program",
    "start": "1587799",
    "end": "1594480"
  },
  {
    "text": "and produce crdt output and I can partially execute these I can merge the results of programs it's very nice and",
    "start": "1594480",
    "end": "1600600"
  },
  {
    "text": "so what this looks like is uh this is pseudo code uh all of our code is all of our prototype is implemented in llang",
    "start": "1600600",
    "end": "1607279"
  },
  {
    "text": "and and basically the most important thing here to just see is that I have some set S1 and I can apply some function here that doubles the elements",
    "start": "1607279",
    "end": "1613880"
  },
  {
    "text": "in S1 and produces the set S2 and uh just these annotations are all required re ired because ear Lang doesn't have a",
    "start": "1613880",
    "end": "1619360"
  },
  {
    "text": "type system and so what this is going to do is that every time that set changes",
    "start": "1619360",
    "end": "1625559"
  },
  {
    "text": "because we're replicating things and sending these messages it will keep those data structures in sync so S2 will",
    "start": "1625559",
    "end": "1630880"
  },
  {
    "text": "always be the map applied to S1 and it guarantees this monotonicity property so",
    "start": "1630880",
    "end": "1636399"
  },
  {
    "text": "to go back to the example I had before if I'm considering this map operation that doubles the elements if I have",
    "start": "1636399",
    "end": "1642600"
  },
  {
    "text": "replica C this is the same replica C you saw before with the betas that are being merged and uh with Bas that are being",
    "start": "1642600",
    "end": "1648919"
  },
  {
    "text": "added and removed and then I have the function applied to replica C at the same node what this is going to say is",
    "start": "1648919",
    "end": "1654279"
  },
  {
    "text": "every time this first data structure changes I compute some new result for the second data structure and so this",
    "start": "1654279",
    "end": "1659720"
  },
  {
    "text": "map is pretty trivial here because all I have to do is map the metadata through without changing it and just modify the",
    "start": "1659720",
    "end": "1665480"
  },
  {
    "text": "element so map is kind of trivial um it gets a lot more complicated when you start doing the other operations and so",
    "start": "1665480",
    "end": "1671960"
  },
  {
    "text": "we can just imagine that this is an arbitrary transformation process and then we produce some result where this metadata is combined and mud in the",
    "start": "1671960",
    "end": "1679120"
  },
  {
    "text": "correct way now to talk about this Confluence property that I keep saying is so",
    "start": "1679120",
    "end": "1684279"
  },
  {
    "text": "important what this Confluence property says is that if I have this application with data structure a and my map process",
    "start": "1684279",
    "end": "1690200"
  },
  {
    "text": "here which is really an arbitrary application written in lasp and then I have data structure B which is the result what I want to do is as a",
    "start": "1690200",
    "end": "1697360"
  },
  {
    "text": "programmer I want to write this as if it's a single-threaded application I want to have an input data structure I",
    "start": "1697360",
    "end": "1702440"
  },
  {
    "text": "want to have some program that operates over that input data structure and then I want to produce some output data structure now in reality what you're",
    "start": "1702440",
    "end": "1709240"
  },
  {
    "text": "really going to do is probably have this arbitrarily distributed across all of the nodes in your system so there will be a b Prime there'll be a b double",
    "start": "1709240",
    "end": "1715600"
  },
  {
    "text": "Prime there'll be a b triple prime and you'll have this flow exec double uh replicated for every node in your system",
    "start": "1715600",
    "end": "1721440"
  },
  {
    "text": "so every one of these vertical structures now the Confluence property that's so important says that if I have",
    "start": "1721440",
    "end": "1728039"
  },
  {
    "text": "a piece of input that comes in through a synchronizes because a and a prime are",
    "start": "1728039",
    "end": "1734720"
  },
  {
    "text": "synchronized as I showed you computes this way and synchronize is out this way I want to guarantee that for that same",
    "start": "1734720",
    "end": "1742080"
  },
  {
    "text": "input I can also have the same output if it happens this way because with no",
    "start": "1742080",
    "end": "1747399"
  },
  {
    "text": "synchronization I cannot enforce the order that events are going to travel on the network the event might travel to my",
    "start": "1747399",
    "end": "1753480"
  },
  {
    "text": "colleague over here and then my colleague over here and back to me or it might happen the opposite way I don't know it's going to be based on who's",
    "start": "1753480",
    "end": "1759720"
  },
  {
    "text": "online who I have connectivity to and things like this and so ideally I want all of these different possible pads to",
    "start": "1759720",
    "end": "1767039"
  },
  {
    "text": "be reducible to this same path and what this property shows us what's very important about this property is it",
    "start": "1767039",
    "end": "1773039"
  },
  {
    "text": "shows us that I can take a program written in this way which is a very very small subset of a language only allows",
    "start": "1773039",
    "end": "1778919"
  },
  {
    "text": "us to express a few things but I can say for the very small amount of things I can express I can arbitrarily distribute",
    "start": "1778919",
    "end": "1785440"
  },
  {
    "text": "the program without sacrificing program correctness and so that's a very nice property to have because getting these",
    "start": "1785440",
    "end": "1791279"
  },
  {
    "text": "distribution things is very very difficult without coordination now you might be saying uh",
    "start": "1791279",
    "end": "1798120"
  },
  {
    "text": "uh these data structures are great but they're really expensive and so how can we do this efficiently and so we're working on a",
    "start": "1798120",
    "end": "1804480"
  },
  {
    "text": "system currently which is called uh anab branch which is a layered approach to building uh runtime systems for",
    "start": "1804480",
    "end": "1811279"
  },
  {
    "text": "distributed data languages trying to re-evaluate the approach that we take",
    "start": "1811279",
    "end": "1816559"
  },
  {
    "text": "and so what anab branch is going to do is it's going to use uh techniques that we refer to is Delta State",
    "start": "1816559",
    "end": "1823200"
  },
  {
    "text": "synchronization uh that allow us to not have to ship that data structure around all the time so we can ship a minimum representation of that data so it's very",
    "start": "1823200",
    "end": "1830480"
  },
  {
    "text": "efficient and then finally uh we'd like to demonstrate the scales so uh",
    "start": "1830480",
    "end": "1835600"
  },
  {
    "text": "currently today our prototype runs for a single application at at 1,024 nodes in the same cluster which is pretty",
    "start": "1835600",
    "end": "1841600"
  },
  {
    "text": "impressive uh considering that uh at least for the erlang users in the room the biggest cluster that Ericson has",
    "start": "1841600",
    "end": "1847320"
  },
  {
    "text": "ever run of erlang is only 200 to 300 so that's a pretty nice increase uh and so",
    "start": "1847320",
    "end": "1852679"
  },
  {
    "text": "our Target number by at least in the next six to eight months is 10,000 nodes so we'll see if we get there um but most",
    "start": "1852679",
    "end": "1858840"
  },
  {
    "text": "of the problems around State dissemination have been uh resolved pretty easily with some of the techniques that we have and so um the",
    "start": "1858840",
    "end": "1866639"
  },
  {
    "text": "runtime system takes a layered Approach at how uh distributed application should be built so the first component is that",
    "start": "1866639",
    "end": "1873159"
  },
  {
    "text": "we need a way to persist the data structures we need a way for a client to have a bunch of data structures and store them on disk and be able to",
    "start": "1873159",
    "end": "1879320"
  },
  {
    "text": "retrieve them and so we do this by having pluggable backends that run either via level DB or rocks DB or",
    "start": "1879320",
    "end": "1884760"
  },
  {
    "text": "something like this or can be stored in memory the second component is that all of the machines in the network in this",
    "start": "1884760",
    "end": "1890519"
  },
  {
    "text": "in this 1024 node cluster that I run all the machines in the network need to have a way to synchronize with each other so",
    "start": "1890519",
    "end": "1896240"
  },
  {
    "text": "we need service Discovery and in addition to that we also want to enforce different types of dissemination",
    "start": "1896240",
    "end": "1902080"
  },
  {
    "text": "topologies and so our system is configurable to either operate in a client server mode where you have this Hub and spoke with servers where clients",
    "start": "1902080",
    "end": "1908880"
  },
  {
    "text": "are connecting to the servers or it can operate in peer-to-peer mode excellent have your",
    "start": "1908880",
    "end": "1918360"
  },
  {
    "text": "may I have your attention please the public address and fire alarm systems are about to be tested fire signal first",
    "start": "1918360",
    "end": "1927120"
  },
  {
    "text": "found followed by evacuation signal please take no further action",
    "start": "1927120",
    "end": "1935398"
  },
  {
    "text": "the test is",
    "start": "1949480",
    "end": "1952518"
  },
  {
    "text": "[Music] completey thank for your cooperation even they're concerned about drop",
    "start": "1956330",
    "end": "1961519"
  },
  {
    "text": "messages you hear that yeah I mean it's amazing uh and so and so finally um and",
    "start": "1961519",
    "end": "1967240"
  },
  {
    "text": "finally uh if if we have particular topologies if we can make particular guarantees about the network then we can",
    "start": "1967240",
    "end": "1972360"
  },
  {
    "text": "optimize the network by building spanning trees and doing all sorts of clever things there and so we have a way to do this as well and so to give you an",
    "start": "1972360",
    "end": "1979159"
  },
  {
    "text": "an example of what the last kind of the anab branch runtime system looks like is that we have a unified way of looking at",
    "start": "1979159",
    "end": "1985159"
  },
  {
    "text": "how we deal with mobile phones distributed hash tables replicated State machines any type of system and what we",
    "start": "1985159",
    "end": "1990880"
  },
  {
    "text": "do is we build an overlay we have our application which sits on top of our language runtime uh we have a KV store",
    "start": "1990880",
    "end": "1996960"
  },
  {
    "text": "that's built into the runtime for persisting all of the state of your applications and then we have a pluggable membership layer that controls",
    "start": "1996960",
    "end": "2004159"
  },
  {
    "text": "either operating your system in client server or peer-to-peer mode and so this has proved to be a very nice",
    "start": "2004159",
    "end": "2009880"
  },
  {
    "text": "way because we can kind of swap out components and optimize things and unoptimized things and run all sorts of",
    "start": "2009880",
    "end": "2016399"
  },
  {
    "text": "experiments now uh the core behind how we're able to efficiently disseminate things in the network is this technique",
    "start": "2016399",
    "end": "2022679"
  },
  {
    "text": "called deltaab base dissemination and so what it does is it uses a variant of these crdts that are",
    "start": "2022679",
    "end": "2028760"
  },
  {
    "text": "referred to as Delta State crdts and the observation here is that if I have some massive data structure and I only add",
    "start": "2028760",
    "end": "2034919"
  },
  {
    "text": "one element to the set I can produce a minimal represent ation of that change and disseminate just that change rather",
    "start": "2034919",
    "end": "2040519"
  },
  {
    "text": "than the entire data structure so what this allows clients to do is that they operate locally on their own data types",
    "start": "2040519",
    "end": "2046679"
  },
  {
    "text": "and then they periodically disseminate a buffer to the other clients they know about in the system that delivers the",
    "start": "2046679",
    "end": "2052679"
  },
  {
    "text": "messages in causal order so it can be applied correctly and allow us to have the most minimal",
    "start": "2052679",
    "end": "2058280"
  },
  {
    "text": "representation now the core challenge behind this is that you cannot have a system where every client knows about",
    "start": "2058280",
    "end": "2065040"
  },
  {
    "text": "every other client in the system because then it becomes too difficult to buffer all of the updates and so you have to rely on this transitive closure over all",
    "start": "2065040",
    "end": "2071839"
  },
  {
    "text": "the clients in the system and so what we do is we have a protocol that underlies our system that builds an overlay",
    "start": "2071839",
    "end": "2077839"
  },
  {
    "text": "Network where not every client knows about every other client in the system and that is a fixed size that increase",
    "start": "2077839",
    "end": "2084280"
  },
  {
    "text": "uh that that approaches log scale and then what we do is for every time I I change a data structure I buffer an",
    "start": "2084280",
    "end": "2090480"
  },
  {
    "text": "update to the people I know about I deliver it to them and then they produce a Delta based on that and then",
    "start": "2090480",
    "end": "2096520"
  },
  {
    "text": "disseminate to them so we have this transitive delivery of messages and so what this looks like is",
    "start": "2096520",
    "end": "2104240"
  },
  {
    "text": "that in this example replica a performs some change which is this screen Circle I produce a minimal representation of",
    "start": "2104240",
    "end": "2110680"
  },
  {
    "text": "this change and then I buffer it for the three other clients that I know about now there could be 200 clients in the system but I only know about three other",
    "start": "2110680",
    "end": "2117200"
  },
  {
    "text": "clients and so I only buffer it for those three replica B also does the same we're assuming that the views are",
    "start": "2117200",
    "end": "2123040"
  },
  {
    "text": "symmetric and so B also knows the same members here and then I buffer these causal order because if I can deliver",
    "start": "2123040",
    "end": "2130240"
  },
  {
    "text": "these if I can make a guarantee that I deliver these in the order that they were generated then the Deltas can become even more minimal than they could",
    "start": "2130240",
    "end": "2136920"
  },
  {
    "text": "normally be um if you can deliver them in any order the Deltas get more expensive and so by making a trade-off",
    "start": "2136920",
    "end": "2142920"
  },
  {
    "text": "with stronger delivery guarantees you can get a more minimal representation so when I go to synchronize all I do is I",
    "start": "2142920",
    "end": "2148200"
  },
  {
    "text": "send these buffers I apply the buffers and I flush them and it's done and so what we do is we just periodically do",
    "start": "2148200",
    "end": "2153960"
  },
  {
    "text": "this whenever clients are offline and we actually have a mechanism for quantifying how far off somebody may be",
    "start": "2153960",
    "end": "2161160"
  },
  {
    "text": "from the global view of the system and so that those are kind of the three components and so you know to kind",
    "start": "2161160",
    "end": "2167800"
  },
  {
    "text": "of get to the last part of the talk I'm going to talk about one application that we built for uh that we built as part of",
    "start": "2167800",
    "end": "2173040"
  },
  {
    "text": "a research project with roio entertainment which is uh the company that makes uh Angry Birds as part of this sync free project that uh we are",
    "start": "2173040",
    "end": "2179480"
  },
  {
    "text": "collaborators on with tri Fork as well and so uh we built this uh thing called the advertisement counter and so what",
    "start": "2179480",
    "end": "2185520"
  },
  {
    "text": "robio entertainment wanted was the ability to display ads inside of uh the game and then uh these ads would be",
    "start": "2185520",
    "end": "2193200"
  },
  {
    "text": "displayed while the clients were offline so it would keep track of all the times the ad was displayed this would happen",
    "start": "2193200",
    "end": "2198560"
  },
  {
    "text": "while clients were offline and then periodically they would synchronize the state back at a centralized location and",
    "start": "2198560",
    "end": "2204359"
  },
  {
    "text": "then what we would do is we would wait for a minimum number of ads to be shown and then disable the ad now can you do",
    "start": "2204359",
    "end": "2212079"
  },
  {
    "text": "this with regular integers no absolutely not and the reason is is that if I if we both have a counter that's says the",
    "start": "2212079",
    "end": "2218000"
  },
  {
    "text": "counter value is now one and then we both go offline and we both increment that counter to two and then we come",
    "start": "2218000",
    "end": "2224000"
  },
  {
    "text": "online and synchronize that Max function doesn't work because that Max function is going to give me two and that means that I will lose one of the Impressions",
    "start": "2224000",
    "end": "2230640"
  },
  {
    "text": "and so the goal in this design is to ensure that we never drop one of the Impressions and so we do this with a crdt based number uh which we call a",
    "start": "2230640",
    "end": "2238359"
  },
  {
    "text": "counter a grow only counter and so what we do is we have an application design that roughly looks",
    "start": "2238359",
    "end": "2243400"
  },
  {
    "text": "like this uh this entire thing minus the component at the end is expressable in",
    "start": "2243400",
    "end": "2248599"
  },
  {
    "text": "SQL now so it's very nice to write um this is actually just a data flow representation of a SQL query uh which",
    "start": "2248599",
    "end": "2253800"
  },
  {
    "text": "has a union and then a product and filter combination which is just a join that's how you express a join is a",
    "start": "2253800",
    "end": "2259720"
  },
  {
    "text": "product filter with a map and so kind of the most important part here that I want",
    "start": "2259720",
    "end": "2265000"
  },
  {
    "text": "to demonstrate is that we just we just say I have some ads I have some contracts that say which ads should be displayed I take an inner joint and then",
    "start": "2265000",
    "end": "2272160"
  },
  {
    "text": "I just you know select the ads that have contracts that should be displayed so it's pretty simple looks complicated but it's not",
    "start": "2272160",
    "end": "2278200"
  },
  {
    "text": "now what I do is I send a copy of those counters to every single mobile device that's running and then those counters",
    "start": "2278200",
    "end": "2283960"
  },
  {
    "text": "are incremented by the clients on the devices and then periodically those counters will be synchronized back with",
    "start": "2283960",
    "end": "2290839"
  },
  {
    "text": "the central server and when the central server receives those counters and can receive this through other clients or directly it will say Well when the",
    "start": "2290839",
    "end": "2298000"
  },
  {
    "text": "counter has reached a minimum value as long as I guarantee I've displayed the ad enough times then I'll issue a",
    "start": "2298000",
    "end": "2303560"
  },
  {
    "text": "removal and I'll remove that ad and then I'll send down to the clients to say stop displaying that ad and so I've",
    "start": "2303560",
    "end": "2310560"
  },
  {
    "text": "already shown you how we can do this because I've already showed you how you can do a removal without having to coordinate that was the first example I",
    "start": "2310560",
    "end": "2316680"
  },
  {
    "text": "gave you with that set I said I can remove this thing I don't have to synchronize for it so I've shown you how I can capture the removal and capture",
    "start": "2316680",
    "end": "2323680"
  },
  {
    "text": "the dissemination of the state and I can do this all with minimal coordination and so you know from an",
    "start": "2323680",
    "end": "2328960"
  },
  {
    "text": "academic standpoint this is a very nice program to analyze because it's completely monotonic information only grows in the in the system we don't need",
    "start": "2328960",
    "end": "2335400"
  },
  {
    "text": "to have coordination because coordination is needed to retract information many times because you have",
    "start": "2335400",
    "end": "2340640"
  },
  {
    "text": "to get agreement that it's no longer valid uh the other thing I've shown you with the Confluence property is that we",
    "start": "2340640",
    "end": "2347000"
  },
  {
    "text": "can arbitrarily distribute the application and we don't have to like we don't have to make sure two parts of the",
    "start": "2347000",
    "end": "2352280"
  },
  {
    "text": "application run on one node because the Confluence property says well I can just arbitrarily distribute these things I don't have to worry about the ordering",
    "start": "2352280",
    "end": "2358280"
  },
  {
    "text": "guarantees at all and finally an interesting observation that you can make is that depending on how often the client",
    "start": "2358280",
    "end": "2365000"
  },
  {
    "text": "synchronize back with the centralized server we can quantify this in terms of Divergence so if we know that clients",
    "start": "2365000",
    "end": "2370920"
  },
  {
    "text": "are only going to synchronize back every so often we can quantify what the maximum amount we ever might overcount",
    "start": "2370920",
    "end": "2376640"
  },
  {
    "text": "is and then we can configure clients to synchronize more often if we want to reduce the amount that we overcount",
    "start": "2376640",
    "end": "2382040"
  },
  {
    "text": "because they're periodically synchronizing and so you could have a bunch of people that are right at the threshold they don't synchronize for",
    "start": "2382040",
    "end": "2387640"
  },
  {
    "text": "five minutes and so they might overcount for that whole five minute period and so the general idea here um",
    "start": "2387640",
    "end": "2394680"
  },
  {
    "text": "and hopefully what I've tried to convince you of uh is that what we're",
    "start": "2394680",
    "end": "2399800"
  },
  {
    "text": "trying to do is we're trying to look at building applications and adding synchronization just where it's",
    "start": "2399800",
    "end": "2405160"
  },
  {
    "text": "necessary we're not trying to we're not trying to look at existing systems that are built using spark or zookeeper or",
    "start": "2405160",
    "end": "2411040"
  },
  {
    "text": "something like this that you might be more familiar with and then try to figure out how to make those systems go faster by looking at the things that",
    "start": "2411040",
    "end": "2416920"
  },
  {
    "text": "don't need to happen in order and pull those apart what we're trying to do is take a look at building applications",
    "start": "2416920",
    "end": "2422000"
  },
  {
    "text": "that gradually add synchronization only where we know that it's going to make the program not correct we know where",
    "start": "2422000",
    "end": "2427359"
  },
  {
    "text": "it's going to sacrifice correctness of the application and so what have we learned",
    "start": "2427359",
    "end": "2432400"
  },
  {
    "text": "so to summarize the three points uh crdts are a very interesting thing uh crdts have been around the longest so",
    "start": "2432400",
    "end": "2438800"
  },
  {
    "text": "they exist in many forms there uh there's implementations and go there's implementations in AA I know the people",
    "start": "2438800",
    "end": "2445359"
  },
  {
    "text": "working on it in AA and and all the people at lightbend so uh there's a bunch of crdt stuff happening in the",
    "start": "2445359",
    "end": "2450560"
  },
  {
    "text": "scholar world uh there's a bunch of crdts happening in the llang world from llang Solutions and baso and our",
    "start": "2450560",
    "end": "2456400"
  },
  {
    "text": "research Group which writes in in llang so crdts are around a lot and they're a great solution for if you have a single",
    "start": "2456400",
    "end": "2462000"
  },
  {
    "text": "data structure that you want to have uh you know you want to eliminate these concurrency anomalies uh second uh",
    "start": "2462000",
    "end": "2468760"
  },
  {
    "text": "second point is that uh if you can build applications that have this strong Confluence property building distributed",
    "start": "2468760",
    "end": "2474760"
  },
  {
    "text": "applications becomes much easier and so what we're doing is growing a language slowly uh around trying to apply crdts",
    "start": "2474760",
    "end": "2481560"
  },
  {
    "text": "to make systems more flexible and then finally our most recent work is on you know the",
    "start": "2481560",
    "end": "2486720"
  },
  {
    "text": "observation that before we kind of make our language able to do more we have to build a runtime system that allows just",
    "start": "2486720",
    "end": "2492359"
  },
  {
    "text": "what we can do today be very efficient and so we're working on that large scale evaluation and and making the system",
    "start": "2492359",
    "end": "2498359"
  },
  {
    "text": "actually run well and so if I I want to give you key points to take away for your own system design uh I have kind of",
    "start": "2498359",
    "end": "2505119"
  },
  {
    "text": "three points to make I guess um the first one is that uh it's a reality that",
    "start": "2505119",
    "end": "2510359"
  },
  {
    "text": "many applications today and continuing to grow uh are applications that are not going to be able to synchronize uh you",
    "start": "2510359",
    "end": "2517040"
  },
  {
    "text": "can cannot have a mobile application that's going to operate offline if you need to totally order every single",
    "start": "2517040",
    "end": "2522240"
  },
  {
    "text": "operation um and you can't allow any any speculative execution if you cannot do",
    "start": "2522240",
    "end": "2527319"
  },
  {
    "text": "that your application won't be available um I made a joke at a conference once that said you know I can't call if I the",
    "start": "2527319",
    "end": "2533000"
  },
  {
    "text": "only way I can do this is if I call everybody to tell them to get online and so we can run around to paxos and a good",
    "start": "2533000",
    "end": "2538400"
  },
  {
    "text": "colleague of mine said well then all you're doing is solving consensus over the phone instead of on the computer so",
    "start": "2538400",
    "end": "2543520"
  },
  {
    "text": "I guess that that's the point there um the second point is that that uh you should only apply synchronization where",
    "start": "2543520",
    "end": "2549480"
  },
  {
    "text": "it's required um there are some problems that we deal with in Computing that are a synchronization problem so you cannot",
    "start": "2549480",
    "end": "2556119"
  },
  {
    "text": "build them synchronization free for instance uh if you need to enforce strict Global invariance uh you cannot",
    "start": "2556119",
    "end": "2562000"
  },
  {
    "text": "do this synchronization free um this is a synchronization problem uh second one if you need Atomic visibility on rights",
    "start": "2562000",
    "end": "2569040"
  },
  {
    "text": "in a system same problem uh and finally I think there's a lot of value in",
    "start": "2569040",
    "end": "2574240"
  },
  {
    "text": "Building Systems that attempt to take a holistic approach to to solving the problem uh and building up from kind of",
    "start": "2574240",
    "end": "2579920"
  },
  {
    "text": "components rather than trying to take something off the shelf and bending it to to fit the type of application you're trying to develop and so I challenge",
    "start": "2579920",
    "end": "2586040"
  },
  {
    "text": "people to think more holistically about the applications uh that they're building uh with distributed systems today and so to to wrap up I'm going to",
    "start": "2586040",
    "end": "2593160"
  },
  {
    "text": "leave you with this quote from Ivan Sutherland uh who is uh who who I had the pleasure of meeting a couple weeks ago um he's uh he won the Turing award",
    "start": "2593160",
    "end": "2600440"
  },
  {
    "text": "for uh the basically inventing computer graphics and so um he's actually working on a similar thing uh he's working on",
    "start": "2600440",
    "end": "2607720"
  },
  {
    "text": "on designing Hardware without synchronization so asynchronized systems no clocks uh it's kind of like data flow",
    "start": "2607720",
    "end": "2614319"
  },
  {
    "text": "in the hardware you can imagine and so he kind of makes the same observation that I made we actually didn't even know each other until two weeks ago and we",
    "start": "2614319",
    "end": "2620359"
  },
  {
    "text": "both said the same thing so it was kind of cool and I guess the general Point here is that simultaneity is a thing",
    "start": "2620359",
    "end": "2625839"
  },
  {
    "text": "that doesn't exist uh and so we should stop Building Systems that assume that it does um just because it makes",
    "start": "2625839",
    "end": "2631440"
  },
  {
    "text": "programming easier we should devote efforts into building better languages and so I challenge you to build better",
    "start": "2631440",
    "end": "2636599"
  },
  {
    "text": "languages thank you [Applause]",
    "start": "2636599",
    "end": "2645449"
  }
]