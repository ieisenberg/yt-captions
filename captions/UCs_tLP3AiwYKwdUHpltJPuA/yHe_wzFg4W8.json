[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "[Music]",
    "start": "3500",
    "end": "7820"
  },
  {
    "text": "thank you okay such a pleasure to be here first of all and I'm a bit excited",
    "start": "12320",
    "end": "17680"
  },
  {
    "text": "because this my first time talking at go-to and it's lovely seeing that there's people interested about gleam so",
    "start": "17680",
    "end": "24599"
  },
  {
    "text": "um as You' heard my name is jako I'm a bit of a functional programming nerd maybe you've guessed it if you've to me",
    "start": "24599",
    "end": "30599"
  },
  {
    "text": "in the HS um the thing I'm most proud about though is I'm part of glim score team so I'm helping with the language",
    "start": "30599",
    "end": "36600"
  },
  {
    "text": "with the tooling compiler and of course bug fixing so today I will be your guide",
    "start": "36600",
    "end": "42280"
  },
  {
    "start": "40000",
    "end": "336000"
  },
  {
    "text": "through the gim language we're going to be learning what Gleim is of course why it's interesting what it's bringing to",
    "start": "42280",
    "end": "48520"
  },
  {
    "text": "the table of programming languages and why you should start learning it today also by the end of the talk hopefully",
    "start": "48520",
    "end": "54800"
  },
  {
    "text": "you'll have all the resources you need to keep your gleam Journey going hoping that it doesn't stop today after my 40",
    "start": "54800",
    "end": "60519"
  },
  {
    "text": "minutes of rambling so what is glim well if you've never heard of it before glim",
    "start": "60519",
    "end": "66320"
  },
  {
    "text": "is a friendly language for building typ Safe Systems that scale that's quite a",
    "start": "66320",
    "end": "72000"
  },
  {
    "text": "big to unpack in just a single sentence though what does it even mean for a language to be",
    "start": "72000",
    "end": "77119"
  },
  {
    "text": "friendly also type tape systems so we're talking about static typing and those",
    "start": "77119",
    "end": "82960"
  },
  {
    "text": "systems also scale that's quite an interesting word quite a luring so what's gleam superpower that allows us",
    "start": "82960",
    "end": "89640"
  },
  {
    "text": "to will systems that are reliable that can scale as we need them to our journey today will be guided by",
    "start": "89640",
    "end": "97280"
  },
  {
    "text": "these three principles friendliness type safety and scalability and of course",
    "start": "97280",
    "end": "102600"
  },
  {
    "text": "being a code Centric journey we'll have a look at many code Snippets don't worry I know it's the last day so they're not",
    "start": "102600",
    "end": "109840"
  },
  {
    "text": "going to be extremely hard to follow and I hope you'll appreciate how glimp syntax is familiar one could",
    "start": "109840",
    "end": "118479"
  },
  {
    "text": "say REM inent of many mainstream programming languages so one could even",
    "start": "118479",
    "end": "125520"
  },
  {
    "text": "say friendly it's just one of the many puzzle pieces that is working towards",
    "start": "125520",
    "end": "131360"
  },
  {
    "text": "making gleam a language that is easy to pick up that's by Design we want gleam",
    "start": "131360",
    "end": "136959"
  },
  {
    "text": "to be simple and anyone could really learn all there is to know to the language in just a couple of",
    "start": "136959",
    "end": "143920"
  },
  {
    "text": "afternoons and that is intentional if you're learning gleam and functional programming well that might be new",
    "start": "143920",
    "end": "150560"
  },
  {
    "text": "Concepts for you and that's the fun part you get to learn something new but if at the same time you're",
    "start": "150560",
    "end": "156920"
  },
  {
    "text": "learning these new cool things you also have to fight with the language you have to juggle different things in your head",
    "start": "156920",
    "end": "162159"
  },
  {
    "text": "how do I write this how do I do this well it's going to be twice as hard and",
    "start": "162159",
    "end": "167319"
  },
  {
    "text": "so the syntax being reminiscent of one could say JavaScript rust maybe is",
    "start": "167319",
    "end": "174159"
  },
  {
    "text": "actually a really um empowering thing because now the language won't get in the way of you learning",
    "start": "174159",
    "end": "181080"
  },
  {
    "text": "so if you've add any exposure to any to a mainstream programming language like JavaScript and who hasn't by 2024 um you",
    "start": "181080",
    "end": "188239"
  },
  {
    "text": "should have maybe a rough idea of what is going on here even if you've never wrote a single line of glim before so we",
    "start": "188239",
    "end": "195040"
  },
  {
    "text": "are defining two functions the entry point of the program and a GD function here we don't write function we just",
    "start": "195040",
    "end": "201599"
  },
  {
    "text": "write FN but it's the same thing and the grid function is taking a name as input",
    "start": "201599",
    "end": "207799"
  },
  {
    "text": "and then it's printing something to standard out put by joining those strings together it does that with that",
    "start": "207799",
    "end": "213920"
  },
  {
    "text": "diamond operator it's just the less sign and greater sign and when you see that",
    "start": "213920",
    "end": "220319"
  },
  {
    "text": "io. printline it means we are calling the print line function coming from the io module you can also do that in",
    "start": "220319",
    "end": "226599"
  },
  {
    "text": "JavaScript with Imports um a module is basically a way to organize glimps code",
    "start": "226599",
    "end": "232400"
  },
  {
    "text": "and standard library is already having many useful things like modules to work",
    "start": "232400",
    "end": "237840"
  },
  {
    "text": "with IO with lists results whatever that might be and then in the main we're doing",
    "start": "237840",
    "end": "243519"
  },
  {
    "text": "something that is just a step above the simplest hello word I could come up with that is we are using that function we've",
    "start": "243519",
    "end": "249879"
  },
  {
    "text": "defined to print many greetings so we are saying Hello Lucy and hello Copenhagen and gim also has some nice",
    "start": "249879",
    "end": "258239"
  },
  {
    "text": "pieces of syntactic sugar I'm going to be using in the slides that I'd like to show you and one of those is the pipe",
    "start": "258239",
    "end": "264800"
  },
  {
    "text": "operator basically what that is doing is it takes what comes before it and then it passes it as the first argument of",
    "start": "264800",
    "end": "271600"
  },
  {
    "text": "the function so this is virtually the same as writing this where the function is the AR the list is the argument to",
    "start": "271600",
    "end": "277520"
  },
  {
    "text": "the function but now it's a bit nicer to read and if you squint hard enough and",
    "start": "277520",
    "end": "282600"
  },
  {
    "text": "maybe cover one eye you'll see that that is basically like calling the for each method on an array on a JavaScript array",
    "start": "282600",
    "end": "290560"
  },
  {
    "text": "don't get me wrong uh glim is not objectoriented it doesn't have methods it doesn't have classes interfaces",
    "start": "290560",
    "end": "297680"
  },
  {
    "text": "whatever thing object Orient as um the only thing it has is data and",
    "start": "297680",
    "end": "304680"
  },
  {
    "text": "functions and some nice syntactic suar to make things easier to read and when I say data and functions",
    "start": "304680",
    "end": "312199"
  },
  {
    "text": "I'm not really kidding one thing you usually hear from people in the glim community is all you need is data and",
    "start": "312199",
    "end": "319039"
  },
  {
    "text": "functions there's really not much more to it and so it's quite simple it feels",
    "start": "319039",
    "end": "324120"
  },
  {
    "text": "a bit exhilarating at first getting to something that is so like minimal",
    "start": "324120",
    "end": "330120"
  },
  {
    "text": "okay now that we've got the basic hello word example out of the way so far so good right okay um let's get to the",
    "start": "330120",
    "end": "337840"
  },
  {
    "start": "336000",
    "end": "1099000"
  },
  {
    "text": "first point glim is type save so glim has a strong static type system",
    "start": "337840",
    "end": "343919"
  },
  {
    "text": "basically everything in your code has a type A number is an integer you have strings you have lists dictionaries",
    "start": "343919",
    "end": "350600"
  },
  {
    "text": "whatever that might be and Siri going off um so the compiler can tell what's",
    "start": "350600",
    "end": "358840"
  },
  {
    "text": "the type of different things in your program and make sure that you don't mess things up the way I like to think",
    "start": "358840",
    "end": "365600"
  },
  {
    "text": "about it is like having a pair programmer who's always by our side and is constantly reading through our code",
    "start": "365600",
    "end": "372240"
  },
  {
    "text": "and knows a lot about our code base and makes sure that we don't make any mistake that would result in our code",
    "start": "372240",
    "end": "378479"
  },
  {
    "text": "behaving strangely at R time or crashing and this PA programmer has a",
    "start": "378479",
    "end": "384280"
  },
  {
    "text": "really nice property is never tired is tireless and I think that's quite",
    "start": "384280",
    "end": "389599"
  },
  {
    "text": "valuable because we programmers humans do get tired after writing code for a long time so having someone or something",
    "start": "389599",
    "end": "397199"
  },
  {
    "text": "in this case who's by our side and is telling us wait maybe here you made a",
    "start": "397199",
    "end": "402319"
  },
  {
    "text": "mistake this thing wouldn't work at run time it would explode it would make your system fall down and",
    "start": "402319",
    "end": "408759"
  },
  {
    "text": "crash and so this is I think really valuable let's get to our first example we have the grid function and here we",
    "start": "408759",
    "end": "415639"
  },
  {
    "text": "say it's taking a string as input so as long as we say greet Lucy we will see",
    "start": "415639",
    "end": "421120"
  },
  {
    "text": "Hello Lucy in started output what if we make a mistake so what if instead of",
    "start": "421120",
    "end": "426520"
  },
  {
    "text": "passing the something that is a string maybe after a refactoring whatever that",
    "start": "426520",
    "end": "431639"
  },
  {
    "text": "might be an integer ends up there now here I'm using just the literal number",
    "start": "431639",
    "end": "436720"
  },
  {
    "text": "11 but imagine you have some variable some thing that is returned by another function and you pass it around and then",
    "start": "436720",
    "end": "443039"
  },
  {
    "text": "it ends up there well as I've told you this spare programmer who's always by our side is going to tell us well that",
    "start": "443039",
    "end": "450520"
  },
  {
    "text": "is wrong and I was expecting this to be a string but it it actually is an",
    "start": "450520",
    "end": "456000"
  },
  {
    "text": "integer this doesn't work so this is most likely something you don't want to be happening and this is the first error",
    "start": "456000",
    "end": "463759"
  },
  {
    "text": "message I'll be showing you today and hopefully you'll enjoy how like straight",
    "start": "463759",
    "end": "469159"
  },
  {
    "text": "to the point but also clear and explicative glimps errow messages are that's how the compiler can feel someone",
    "start": "469159",
    "end": "476240"
  },
  {
    "text": "who's friendly and not someone who's there to to like scold us for making",
    "start": "476240",
    "end": "481800"
  },
  {
    "text": "mistakes and the nice thing is also it's not only telling us that something is wrong it's also telling us well I was",
    "start": "481800",
    "end": "488039"
  },
  {
    "text": "expecting something else and it's going to tell us so it's not enough nowadays for a language to be like well there's a",
    "start": "488039",
    "end": "493759"
  },
  {
    "text": "problem in your code go figure it out don't write bugs um the language has to be much more informative go the extra",
    "start": "493759",
    "end": "500759"
  },
  {
    "text": "mile and help the programmer try to figure out what is wrong with their code I think languages like rust and Elm",
    "start": "500759",
    "end": "507280"
  },
  {
    "text": "really has shown us what good error message should look like and most notably in many languages",
    "start": "507280",
    "end": "515518"
  },
  {
    "text": "you would be able to do something like this to pass an integer and that gets magically mushed into a string or",
    "start": "515519",
    "end": "522640"
  },
  {
    "text": "something that can then be printed automatically and here we get to one of the many philos the core philosophies of",
    "start": "522640",
    "end": "529160"
  },
  {
    "text": "gim that is gim is an explicit language there's always this tension when you're",
    "start": "529160",
    "end": "535040"
  },
  {
    "text": "designing a language you want maybe a language that's super powerful that allows you to squash as many things into",
    "start": "535040",
    "end": "542959"
  },
  {
    "text": "a single line and be extremely clever and do as many things as possible with as little code as possible and while the",
    "start": "542959",
    "end": "550480"
  },
  {
    "text": "code writing is undeniably a lot of fun doing that well the code reading starts",
    "start": "550480",
    "end": "556959"
  },
  {
    "text": "getting harder and harder because now the code relies on some hidden knowledge that is shared between you the developer",
    "start": "556959",
    "end": "563560"
  },
  {
    "text": "and the compiler and no one else so for someone to come in and read through your",
    "start": "563560",
    "end": "568800"
  },
  {
    "text": "code and understand what is going on they need that knowledge that is not explicit in the code you're writing and",
    "start": "568800",
    "end": "575120"
  },
  {
    "text": "so gleam decides to favor being explicit you'll have to type a bit more that's",
    "start": "575120",
    "end": "581279"
  },
  {
    "text": "undeniable but now you get code that is much more explicit about what it wants",
    "start": "581279",
    "end": "586959"
  },
  {
    "text": "to do it doesn't rely on some hidden knowledge that it's not accessible that",
    "start": "586959",
    "end": "592440"
  },
  {
    "text": "is only accessible if you know a slew of unknown rules or magic compiler stuff so",
    "start": "592440",
    "end": "599959"
  },
  {
    "text": "here for example I wasn't lying when I said all you need is Thea and functions you just add another function call and",
    "start": "599959",
    "end": "605959"
  },
  {
    "text": "you're turning that integer explicitly into a string so now if you're reading it you know that that is being turned",
    "start": "605959",
    "end": "613160"
  },
  {
    "text": "into a string keeping on with this being",
    "start": "613160",
    "end": "619640"
  },
  {
    "text": "explicit idea well gleam also has no nulls and no exceptions and I think",
    "start": "619640",
    "end": "624760"
  },
  {
    "text": "that's like one of the best things one could ask from a language I think we can relate with the pain of seeing a null",
    "start": "624760",
    "end": "631480"
  },
  {
    "text": "pointer exception or undefined whatever pop up in the console and it's just painful so let's make an example that is",
    "start": "631480",
    "end": "638680"
  },
  {
    "text": "a bit more involved don't worry this is going to be probably the hardest bit um it's all going to be downhill from here",
    "start": "638680",
    "end": "645760"
  },
  {
    "text": "we're making an HTTP request and you can see how the pipe operator is really nice",
    "start": "645760",
    "end": "651519"
  },
  {
    "text": "here it's describing this pipeline of Transformations so we are building a basic HTTP request we are setting the",
    "start": "651519",
    "end": "658920"
  },
  {
    "text": "host the path and then we are sending it using an HTTP client in this case we get",
    "start": "658920",
    "end": "664160"
  },
  {
    "text": "a response back and then we want to print the response body in this case or do whatever might make sense here in",
    "start": "664160",
    "end": "670120"
  },
  {
    "text": "this case it's just going to be some Json blob with the info about this Pokemon I'm asking to the Pokey API but",
    "start": "670120",
    "end": "677639"
  },
  {
    "text": "if you think about it an HTTP request is something that could fail in myriads of",
    "start": "677639",
    "end": "682959"
  },
  {
    "text": "ways we could get a timeout we could lose internet connection the server might not ever ever answer and so the",
    "start": "682959",
    "end": "689440"
  },
  {
    "text": "body might not be there so how can this work well if blame doesn't have exceptions and doesn't have null",
    "start": "689440",
    "end": "696320"
  },
  {
    "text": "pointers well this this cannot possibly work because there's not going to be anything in the body and you're right it",
    "start": "696320",
    "end": "703240"
  },
  {
    "text": "doesn't work and the compiler this pair programmer knows it and he's going to tell us hey buddy the body is not",
    "start": "703240",
    "end": "710519"
  },
  {
    "text": "actually there because you're not just working with a response you're working",
    "start": "710519",
    "end": "715800"
  },
  {
    "text": "with something that is a bit more complex with a result so it's all about being honest being explicit a function",
    "start": "715800",
    "end": "723279"
  },
  {
    "text": "cannot lie about the fact that it can fail so making an HTTP request won't",
    "start": "723279",
    "end": "728639"
  },
  {
    "text": "always return a response but it can sometimes return something else a failure and so this has to be explicit",
    "start": "728639",
    "end": "735120"
  },
  {
    "text": "and the function is returning a result in this case and that doesn't have a body a result might be wrapping a",
    "start": "735120",
    "end": "742519"
  },
  {
    "text": "response with a body but we need a way to access it so how does this work well",
    "start": "742519",
    "end": "748560"
  },
  {
    "text": "a result is just some other piece of data like everything else in Lim just data but it's quite peculiar because it",
    "start": "748560",
    "end": "756079"
  },
  {
    "text": "can wrap other things inside it the way you build a result is using two different Constructors if you're used to",
    "start": "756079",
    "end": "764519"
  },
  {
    "text": "objectoriented programming you might have an interface result and then two classes okay and error so these two",
    "start": "764519",
    "end": "771800"
  },
  {
    "text": "Constructors are represent both success and failure in this case and in both",
    "start": "771800",
    "end": "777160"
  },
  {
    "text": "cases you can add additional data so not only you have a success case where you have your response or whatever that",
    "start": "777160",
    "end": "783880"
  },
  {
    "text": "might be you were looking for a user a Pokemon whatever but you can also have the error case where you have maybe some",
    "start": "783880",
    "end": "791760"
  },
  {
    "text": "information about why the thing you wanted to do failed well I couldn't make a an HTTP request because I had no",
    "start": "791760",
    "end": "799560"
  },
  {
    "text": "internet connection because the server didn't reply in time and whatever the reason might",
    "start": "799560",
    "end": "805240"
  },
  {
    "text": "be and the thing is both okay and error are just result s so in this case we",
    "start": "805240",
    "end": "811120"
  },
  {
    "text": "have a result that is wrapping an integer if everything works out fine that is that 11 or a string if something",
    "start": "811120",
    "end": "817320"
  },
  {
    "text": "goes wrong and that string might be an explanation in human language of what has gone",
    "start": "817320",
    "end": "822399"
  },
  {
    "text": "wrong so when we have to deal with a result we have to deal with the possibility that that might be okay but",
    "start": "822399",
    "end": "829120"
  },
  {
    "text": "it could also be an error and to do that in gleam we have um pter matching that",
    "start": "829120",
    "end": "835360"
  },
  {
    "text": "is a really powerful feature you can think of it as some sort of switch if you're used to Java C languages but way",
    "start": "835360",
    "end": "844920"
  },
  {
    "text": "more powerful we're not going to go into into in depth into that um but basically",
    "start": "844920",
    "end": "852639"
  },
  {
    "text": "what it allows you to do is to act based on the shape of some data that could be",
    "start": "852639",
    "end": "858199"
  },
  {
    "text": "many different things so here for example the result might be okay and",
    "start": "858199",
    "end": "863880"
  },
  {
    "text": "then wrap a finally a response we can use and then we can access that body",
    "start": "863880",
    "end": "870720"
  },
  {
    "text": "that we know for sure is going to be there because it's explicit and it says okay everything worked out fine it's",
    "start": "870720",
    "end": "877480"
  },
  {
    "text": "okay so you can do this but if something goes wrong well then now we have to deal with the error you might want to return",
    "start": "877480",
    "end": "886279"
  },
  {
    "text": "return an error yourself and pop that up up the C stack but you have to be",
    "start": "886279",
    "end": "891320"
  },
  {
    "text": "explicit about it or you might deal with it maybe put in place some retry logic",
    "start": "891320",
    "end": "896759"
  },
  {
    "text": "or whatever that might look like for your for for your use case here I'm just printing a string cuz it wouldn't fit in",
    "start": "896759",
    "end": "902920"
  },
  {
    "text": "the slide otherwise and the nice thing is if we are P matching on something on a result",
    "start": "902920",
    "end": "909440"
  },
  {
    "text": "on whatever that might be the PA programmer once again looks at our code and is going to",
    "start": "909440",
    "end": "917279"
  },
  {
    "text": "make sure that we deal with everything with all possible values so if we forget",
    "start": "917279",
    "end": "922360"
  },
  {
    "text": "something if for example we forget to deal with the eror case and it's already hard because you write the okay so you",
    "start": "922360",
    "end": "928600"
  },
  {
    "text": "know that an arrow should be there but let's say you forget about it well it's impossible to do that because once again",
    "start": "928600",
    "end": "935160"
  },
  {
    "text": "the compiler rise up and will tell you wait that this expression doesn't handle",
    "start": "935160",
    "end": "940519"
  },
  {
    "text": "all the possible cases and it's going to explain you all the cases you're missing so now you are forced to deal with the",
    "start": "940519",
    "end": "947600"
  },
  {
    "text": "possibility of failure and that's really empowering because as developers we're",
    "start": "947600",
    "end": "953160"
  },
  {
    "text": "really good at ignoring and forgetting about the myriads of ways our code could fail and having someone who's going to",
    "start": "953160",
    "end": "960759"
  },
  {
    "text": "tell us well actually your C could fail here remember to handle this is really",
    "start": "960759",
    "end": "967440"
  },
  {
    "text": "powerful at the end of the day though we might talk about types and I",
    "start": "967440",
    "end": "973839"
  },
  {
    "text": "think it's really fun I would never stop about it but the the reason we do that",
    "start": "973839",
    "end": "979000"
  },
  {
    "text": "is to have that red squiggly line in our code editor and a super fast feedback loop because now the errors can be moved",
    "start": "979000",
    "end": "987399"
  },
  {
    "text": "from runtime to compile time we can know that if that red squiggly line goes away",
    "start": "987399",
    "end": "994600"
  },
  {
    "text": "well then our code compiles and there's no possible way for our code to explode",
    "start": "994600",
    "end": "1000000"
  },
  {
    "text": "in unexpected ways and again that's really powerful because an error that",
    "start": "1000000",
    "end": "1005720"
  },
  {
    "text": "you don't that you're missing maybe could slip through your tests and end up",
    "start": "1005720",
    "end": "1010880"
  },
  {
    "text": "in production code and then the way you have to discover it is for someone to use your product the product explodes",
    "start": "1010880",
    "end": "1018360"
  },
  {
    "text": "and then they report an error and now a week a month a year after introducing",
    "start": "1018360",
    "end": "1024280"
  },
  {
    "text": "that bug you have to go back to the code see what was wrong and you're lucky if",
    "start": "1024280",
    "end": "1030280"
  },
  {
    "text": "your all the reports logging whatever help you there and now you can try and",
    "start": "1030280",
    "end": "1036120"
  },
  {
    "text": "figure it out but it's going to be harder and especially the longer the bug stays there it's going to be harder and",
    "start": "1036120",
    "end": "1041880"
  },
  {
    "text": "harder to fix it so if we can move and make sure that many errors are taken",
    "start": "1041880",
    "end": "1047000"
  },
  {
    "text": "care of as we are writing the code well that's going to save us a lot of testing first and a lot of",
    "start": "1047000",
    "end": "1054679"
  },
  {
    "text": "time I was reading just yesterday so one last minute change to the slides this",
    "start": "1054679",
    "end": "1060039"
  },
  {
    "text": "lovely blog post from a member of glimps community aen and she was saying that",
    "start": "1060039",
    "end": "1066400"
  },
  {
    "text": "looking at her glim code makes her feel calm because she knew oh also she's",
    "start": "1066400",
    "end": "1071799"
  },
  {
    "text": "putting glim in production this is production code so someone is doing that",
    "start": "1071799",
    "end": "1076840"
  },
  {
    "text": "um and she said says that looking at glimp code makes her film calm cuz she",
    "start": "1076840",
    "end": "1082039"
  },
  {
    "text": "knows she can rest assured and have the ease of mind that that code she wrote is",
    "start": "1082039",
    "end": "1087120"
  },
  {
    "text": "not going to blow up in unexpected ways because again the compiler this friendly",
    "start": "1087120",
    "end": "1092240"
  },
  {
    "text": "P programmer who's by your side is helping figure that",
    "start": "1092240",
    "end": "1097919"
  },
  {
    "text": "out second Point glean can scale how does it do it well for",
    "start": "1098880",
    "end": "1106320"
  },
  {
    "start": "1099000",
    "end": "1583000"
  },
  {
    "text": "languages nowadays it's important to take into account many needs we might",
    "start": "1106320",
    "end": "1111559"
  },
  {
    "text": "have to work in distributed concurrent systems for example to help us build systems that are full tolerant the GL",
    "start": "1111559",
    "end": "1119039"
  },
  {
    "text": "the way gim does that is by leveraging an amazing runtime that is the beam",
    "start": "1119039",
    "end": "1124840"
  },
  {
    "text": "virtual machine to do that glim compiles down to erlang code and that in turn is",
    "start": "1124840",
    "end": "1130400"
  },
  {
    "text": "run by the beam and erlang and the beam were born in the 80s from some really",
    "start": "1130400",
    "end": "1136320"
  },
  {
    "text": "specific needs of Industry so imagine you're at ericon and you have to write software for phone switches that is a",
    "start": "1136320",
    "end": "1143000"
  },
  {
    "text": "thing and those have to be extremely reliable they have to be full tolerant",
    "start": "1143000",
    "end": "1149919"
  },
  {
    "text": "you don't want an error to bring down your whole phone",
    "start": "1149919",
    "end": "1155559"
  },
  {
    "text": "network you might have heard of the 99 of up time of those systems that was",
    "start": "1155559",
    "end": "1161000"
  },
  {
    "text": "achieved with Lan and also those systems also had to work in highly concurrent",
    "start": "1161000",
    "end": "1166400"
  },
  {
    "text": "distributed systems if a phone switch could only handle a single phone call at a time well that wouldn't be quite",
    "start": "1166400",
    "end": "1173640"
  },
  {
    "text": "useful and so that's how erlang and the beam were Bor no other language was up",
    "start": "1173640",
    "end": "1179280"
  },
  {
    "text": "to the task could fulfill all those needs and so um these ideas of full",
    "start": "1179280",
    "end": "1187280"
  },
  {
    "text": "tolerance concurrency distribution were baked in into the run time you might",
    "start": "1187280",
    "end": "1192840"
  },
  {
    "text": "have done some concurrent programming I have done my first sh at University for example using oros threads locks mutexes",
    "start": "1192840",
    "end": "1201640"
  },
  {
    "text": "whatever semaphores and you might remember that's quite painful to get",
    "start": "1201640",
    "end": "1208200"
  },
  {
    "text": "right the llang and the be virtual machine decided to go another way and to",
    "start": "1208200",
    "end": "1213640"
  },
  {
    "text": "rely on something different the basic unit of concurrency is the process but",
    "start": "1213640",
    "end": "1219440"
  },
  {
    "text": "you don't have to think of a process as an O process that is heavyweight and you can't have many of those and you have to",
    "start": "1219440",
    "end": "1225799"
  },
  {
    "text": "share memory and use locks mutexes process looks basically like a",
    "start": "1225799",
    "end": "1230840"
  },
  {
    "text": "sequential task and then can communicate with others by exchanging messages so",
    "start": "1230840",
    "end": "1236919"
  },
  {
    "text": "you don't have to share memory and you don't have to use mutexes locks whatever",
    "start": "1236919",
    "end": "1242320"
  },
  {
    "text": "that might result in code that's really hard to write and reason",
    "start": "1242320",
    "end": "1247480"
  },
  {
    "text": "about also those processes are super lightweight it's simple to spin up many",
    "start": "1247480",
    "end": "1253760"
  },
  {
    "text": "of those because they have a small memory footprint you can spin one up in no time time um if I recall correctly",
    "start": "1253760",
    "end": "1260960"
  },
  {
    "text": "it's just a couple hundred words of memory per process so they're super lightweight they can be terminated",
    "start": "1260960",
    "end": "1267360"
  },
  {
    "text": "quickly and they can be scheduled automatically by the beam to take into Advantage all the CES of the physical",
    "start": "1267360",
    "end": "1274000"
  },
  {
    "text": "machine beneath it and so you get all those amazing processes and you can span",
    "start": "1274000",
    "end": "1280480"
  },
  {
    "text": "span hundreds of thousands of those and the beam would deal with those without butting an eye so gleam really sh as",
    "start": "1280480",
    "end": "1289080"
  },
  {
    "text": "part of a wider richer ecosystem the ecosystem of the beam languages erlang",
    "start": "1289080",
    "end": "1294559"
  },
  {
    "text": "and elixir just to name a few and we wanted for gam to have a",
    "start": "1294559",
    "end": "1299919"
  },
  {
    "text": "great ffi story so you want to be able to access this ecosystem these really",
    "start": "1299919",
    "end": "1305919"
  },
  {
    "text": "amazing and Powerful libraries that have been developed and battle tested through many years since the 80s",
    "start": "1305919",
    "end": "1312880"
  },
  {
    "text": "basically so glimps ffi is pretty straightforward basically you a function",
    "start": "1312880",
    "end": "1319520"
  },
  {
    "text": "and you say to the compiler well this is external this is going to be implemented in Earl don't worry about it or in",
    "start": "1319520",
    "end": "1326039"
  },
  {
    "text": "Elixir and then it's going to work out just fine because the compiler will then call that function at",
    "start": "1326039",
    "end": "1332520"
  },
  {
    "text": "runtime and the nice thing it has also zero overhead Because by the end of the",
    "start": "1332520",
    "end": "1337840"
  },
  {
    "text": "day when you compile your glim code it's just going to be turned into erlang and",
    "start": "1337840",
    "end": "1342880"
  },
  {
    "text": "so this is just another ear function call so now we get access to loads of",
    "start": "1342880",
    "end": "1350400"
  },
  {
    "text": "amazing libraries for example Elixir has some great libraries to do tensor math",
    "start": "1350400",
    "end": "1356799"
  },
  {
    "text": "and using those it's as simple as saying well I have my Elixir dependency and I can use it by saying",
    "start": "1356799",
    "end": "1363600"
  },
  {
    "text": "it's an external function it's coming from some Elixir written code and now I",
    "start": "1363600",
    "end": "1368679"
  },
  {
    "text": "can just do tenso mathing gleam without having to go through the undertaking of",
    "start": "1368679",
    "end": "1374440"
  },
  {
    "text": "having to write and Implement a super fast optimized and amazing Tor math",
    "start": "1374440",
    "end": "1379679"
  },
  {
    "text": "library that would be a huge undertaking and so gleam can take advantage of those",
    "start": "1379679",
    "end": "1385200"
  },
  {
    "text": "amazing libraries but it also goes the other way around I don't know why Siri keeps",
    "start": "1385200",
    "end": "1391159"
  },
  {
    "text": "popping up okay glim also goes the other way",
    "start": "1391159",
    "end": "1396400"
  },
  {
    "text": "around so glim code can be used by other beam languages by virtue of compiling to",
    "start": "1396400",
    "end": "1402880"
  },
  {
    "text": "llang well then any llang process can just use Glen code once it gets compiled",
    "start": "1402880",
    "end": "1409880"
  },
  {
    "text": "and so if you start writing something in gam you might want to start maybe adopting gam in your project",
    "start": "1409880",
    "end": "1416000"
  },
  {
    "text": "incrementally you might have a big erlan code base and maybe there's some places",
    "start": "1416000",
    "end": "1421400"
  },
  {
    "text": "where that type safety would really be nice would make sure that you have to write less test and maybe your code is a",
    "start": "1421400",
    "end": "1427799"
  },
  {
    "text": "bit more reliable there and so you can just write that in gim compile it toong",
    "start": "1427799",
    "end": "1433320"
  },
  {
    "text": "and start using it just like that and GLE also has some other really",
    "start": "1433320",
    "end": "1439279"
  },
  {
    "text": "nice things up its sleeve so for example also and here's an example of how you",
    "start": "1439279",
    "end": "1444760"
  },
  {
    "text": "use it from LL if there's anyone who's doing Earl or elixir in their code Bas",
    "start": "1444760",
    "end": "1449799"
  },
  {
    "text": "it's just another function called and we want that generated code to be human",
    "start": "1449799",
    "end": "1456559"
  },
  {
    "text": "readable and nice to use it's not just some super optimized uh format that's",
    "start": "1456559",
    "end": "1462200"
  },
  {
    "text": "impossible to use from other projects you can get that ear and code and most of the time it's better better than what",
    "start": "1462200",
    "end": "1469080"
  },
  {
    "text": "I would have written by hand and just use it and another really nice thing G has",
    "start": "1469080",
    "end": "1475279"
  },
  {
    "text": "going on is that glim can compile to JavaScript as well so you have two different compilation targets here and",
    "start": "1475279",
    "end": "1482440"
  },
  {
    "text": "that makes for a really nice full stock development story because on the back end you can use the beam you can use",
    "start": "1482440",
    "end": "1489679"
  },
  {
    "text": "this amazing bottle tested runtime that is proven great for many many workloads",
    "start": "1489679",
    "end": "1495440"
  },
  {
    "text": "for example to make web servers that are long Le that need to be full tolerant",
    "start": "1495440",
    "end": "1500480"
  },
  {
    "text": "that need to use resources in a smart way and also handle with many concurrent",
    "start": "1500480",
    "end": "1506880"
  },
  {
    "text": "requests and on the front end you can leverage the type safety of gleam so you",
    "start": "1506880",
    "end": "1512480"
  },
  {
    "text": "can stop writing code in JavaScript or whatever the language you might be using and enjoy the absence of errors in the",
    "start": "1512480",
    "end": "1520640"
  },
  {
    "text": "browser console and I think that is quite nice because now you have a project that is using the same language",
    "start": "1520640",
    "end": "1527360"
  },
  {
    "text": "on the front end and the the back end and now you can share code between the two you can share type definitions you",
    "start": "1527360",
    "end": "1533840"
  },
  {
    "text": "can share encoders and decoders for all the data that has to cross that Network boundary and you don't have to write it",
    "start": "1533840",
    "end": "1540480"
  },
  {
    "text": "twice in two different languages because it's just a single language and now you are doing full stock web development in",
    "start": "1540480",
    "end": "1547320"
  },
  {
    "text": "Gleim and Gleim has some amazing libraries to do that for example there's",
    "start": "1547320",
    "end": "1552720"
  },
  {
    "text": "wisp to develop um backends and web servers and luster that is a glim take",
    "start": "1552720",
    "end": "1559559"
  },
  {
    "text": "on the elm architecture to do front end and so now you get some really nice",
    "start": "1559559",
    "end": "1565279"
  },
  {
    "text": "Frameworks that really feel very mature despite gleam being a young language that you can use and start adopting in",
    "start": "1565279",
    "end": "1571360"
  },
  {
    "text": "your code base in an incremental way you can compile your glim code to JavaScript",
    "start": "1571360",
    "end": "1576559"
  },
  {
    "text": "and start using it from other JavaScript code like if it were some andwritten",
    "start": "1576559",
    "end": "1583039"
  },
  {
    "start": "1583000",
    "end": "1786000"
  },
  {
    "text": "JavaScript and hopefully by looking at all the error messages and the code now",
    "start": "1583360",
    "end": "1588399"
  },
  {
    "text": "might start getting an idea of why gleam is friendly the compiler really tries to go the extra mile here to make the",
    "start": "1588399",
    "end": "1595039"
  },
  {
    "text": "errors as clear as explicit and precise as possible so let's say you make a typo",
    "start": "1595039",
    "end": "1602520"
  },
  {
    "text": "now the compiler can pinpoint to the problem and tell you well you're trying to access a user it has a name fi but",
    "start": "1602520",
    "end": "1609279"
  },
  {
    "text": "you wrote n m did you mean name and now you can go and fix your code again you have a super fast feedback loop you",
    "start": "1609279",
    "end": "1616240"
  },
  {
    "text": "don't have to run your tests you don't have to run your code and feed it to some uh user or production whatever that",
    "start": "1616240",
    "end": "1624760"
  },
  {
    "text": "might be to find out you made a type and now things are exploding because it's the compiler that's telling you as you",
    "start": "1624760",
    "end": "1631240"
  },
  {
    "text": "write it's that per programmer who's helping you as you are typing but that's not enough a language",
    "start": "1631240",
    "end": "1639159"
  },
  {
    "text": "might have an amazing runtime it might be compiling to llang to JavaScript allowing you to do full stock web",
    "start": "1639159",
    "end": "1645919"
  },
  {
    "text": "development it might have great error message messages and still that's not enough nowadays you can't just give",
    "start": "1645919",
    "end": "1653200"
  },
  {
    "text": "people a compiler and tell them go do your thing it's it's not what happens there's loads of toolings and things we",
    "start": "1653200",
    "end": "1660360"
  },
  {
    "text": "give for granted that actually make or break a language that make a language Pleasant to use friendly that make a",
    "start": "1660360",
    "end": "1668039"
  },
  {
    "text": "language something that you can recommend people and not just say well it's fun but I wouldn't really use it in",
    "start": "1668039",
    "end": "1674000"
  },
  {
    "text": "production because it's a bit of a pain to use for example you need a build to",
    "start": "1674000",
    "end": "1679320"
  },
  {
    "text": "to build your project to build a thing that you can run to package your thing",
    "start": "1679320",
    "end": "1685039"
  },
  {
    "text": "and publish it online on some package repository so now you also need",
    "start": "1685039",
    "end": "1690399"
  },
  {
    "text": "something to manage your dependencies a package manager you need a formatter to make your code look nice you don't want",
    "start": "1690399",
    "end": "1697200"
  },
  {
    "text": "to go through hours of exhausting by shedding about what code looks best and",
    "start": "1697200",
    "end": "1702399"
  },
  {
    "text": "where the comma should be because now two co-workers cannot cannot like come to an agreement on what looks",
    "start": "1702399",
    "end": "1709519"
  },
  {
    "text": "best you also need editor integration and I think that's the main thing you",
    "start": "1709519",
    "end": "1714679"
  },
  {
    "text": "really want you want syntax highlighting no one wants to be typing on some white text on black on black background so you",
    "start": "1714679",
    "end": "1722600"
  },
  {
    "text": "want syntax highlighting you want a language server that's helping you write your code and we kind of give those",
    "start": "1722600",
    "end": "1728679"
  },
  {
    "text": "tools for granted when we're using any mainstream language because it's just there until it starts getting painful",
    "start": "1728679",
    "end": "1736240"
  },
  {
    "text": "until you have to go through tooling ha to find the best combination of different tools you can then compose",
    "start": "1736240",
    "end": "1743640"
  },
  {
    "text": "together and get something that is usable and nice to use and every project will have their favorite tool their",
    "start": "1743640",
    "end": "1749919"
  },
  {
    "text": "favorite standard or configuration file to use and now you have to learn something new every time you move to a",
    "start": "1749919",
    "end": "1755600"
  },
  {
    "text": "different project so gleam putting developer experience as its utmost",
    "start": "1755600",
    "end": "1761360"
  },
  {
    "text": "priority as all of those things built in so when you're installing gim you get a",
    "start": "1761360",
    "end": "1767000"
  },
  {
    "text": "compiler you get get a build tool you get a package manager a formatter you",
    "start": "1767000",
    "end": "1772279"
  },
  {
    "text": "get code editor integration and a language server all in one neat little",
    "start": "1772279",
    "end": "1777720"
  },
  {
    "text": "package and you don't have to worry about all the tooling mess that might be out there because you get that out of",
    "start": "1777720",
    "end": "1783720"
  },
  {
    "text": "the box so I think it's time for something a bit scary that is showing you what it actually looks like to get",
    "start": "1783720",
    "end": "1790320"
  },
  {
    "start": "1786000",
    "end": "2094000"
  },
  {
    "text": "started with a project and how nice it can actually be",
    "start": "1790320",
    "end": "1796600"
  },
  {
    "text": "so here we are are creating a new project and to do that again as simple",
    "start": "1796600",
    "end": "1802080"
  },
  {
    "text": "as glim new now it's going to scaffold everything for you and as you can see",
    "start": "1802080",
    "end": "1807320"
  },
  {
    "text": "it's um G project by default so it's taking care of that for you I think it's quite nice because I can never be",
    "start": "1807320",
    "end": "1813519"
  },
  {
    "text": "bothered to do that by myself and you have a basic project with some tests",
    "start": "1813519",
    "end": "1819880"
  },
  {
    "text": "that you can look at they're just an example of what a unit test looks like in glim so you know how to move forward",
    "start": "1819880",
    "end": "1826559"
  },
  {
    "text": "what to do next now let's go here and let's try implementing that HTTP request thing we",
    "start": "1826559",
    "end": "1833279"
  },
  {
    "text": "were doing earlier so we need some dependencies we need an HTTP client again glim comes with a package manager",
    "start": "1833279",
    "end": "1840519"
  },
  {
    "text": "built-in so adding a new dependency again it's as simple as glim OD and then the dependency you need it's going to",
    "start": "1840519",
    "end": "1847120"
  },
  {
    "text": "take care of version resolution and everything for you automatically you don't have to mark with configuration",
    "start": "1847120",
    "end": "1852600"
  },
  {
    "text": "files and whatever that might be now that we're done with that we can start coding and as you can see we have",
    "start": "1852600",
    "end": "1859399"
  },
  {
    "text": "editor integration here I'm using Zed because it's quite nice we have a person in the Zed contributors who was really",
    "start": "1859399",
    "end": "1866399"
  },
  {
    "text": "into glim so they've been super nice with us but it works with all the editors you might want so visual studio",
    "start": "1866399",
    "end": "1872679"
  },
  {
    "text": "code Zed terminal based editors I don't know the name of whatever um so here we can create a new",
    "start": "1872679",
    "end": "1880480"
  },
  {
    "text": "request and as you can see the language server is going to show us what we can use it's going to take care of Auto",
    "start": "1880480",
    "end": "1887440"
  },
  {
    "text": "Imports um documentation Discovery you can hover over things and see whatever is going on",
    "start": "1887440",
    "end": "1895519"
  },
  {
    "text": "so for example we can set the host to Pokey",
    "start": "1895519",
    "end": "1900440"
  },
  {
    "text": "API we can set the path and again the language server can help us unless I",
    "start": "1901080",
    "end": "1907279"
  },
  {
    "text": "make horrible mistakes here so we can say CH Pokémon and then a star-shaped",
    "start": "1907279",
    "end": "1913720"
  },
  {
    "text": "Pokémon just to stay relevant to the theme and now we can send the request so",
    "start": "1913720",
    "end": "1919760"
  },
  {
    "text": "htpc which is glimps client. send",
    "start": "1919760",
    "end": "1925720"
  },
  {
    "text": "htpc and then we're good to go we can bind this to a variable so this is the result we get back and as I've told you",
    "start": "1926399",
    "end": "1933559"
  },
  {
    "text": "inl everything as a type and just by hovering over things you're going to see",
    "start": "1933559",
    "end": "1939320"
  },
  {
    "text": "those types so you can just ask the language server the compiler to tell you what's the type of things and now you",
    "start": "1939320",
    "end": "1945440"
  },
  {
    "text": "see that is a result and that is Aus so what do we do with results well we pattern match on",
    "start": "1945440",
    "end": "1951000"
  },
  {
    "text": "those so we can do some pattern matching case result and keep going again you see",
    "start": "1951000",
    "end": "1957960"
  },
  {
    "text": "the red squiggle as you're typing and it's telling you well these patterns are not all the things that could happen",
    "start": "1957960",
    "end": "1964519"
  },
  {
    "text": "you're forgetting about the error case and the okay case you're not handling those and since the the compiler and the",
    "start": "1964519",
    "end": "1970840"
  },
  {
    "text": "language server knows so much about your code they can help you for example by adding all those missing patterns for",
    "start": "1970840",
    "end": "1977000"
  },
  {
    "text": "you so you don't have to to type those by hand which is extra nice here we're just print lining",
    "start": "1977000",
    "end": "1983480"
  },
  {
    "text": "something and here we can do something with the response so now that we do have that we got our hands on that response",
    "start": "1983880",
    "end": "1991120"
  },
  {
    "text": "because we know that things worked out fine we can for example um print line",
    "start": "1991120",
    "end": "1996960"
  },
  {
    "text": "the response body which is just going to be a Json blob or whatever that might be",
    "start": "1996960",
    "end": "2003320"
  },
  {
    "text": "response and response and things just",
    "start": "2003320",
    "end": "2009760"
  },
  {
    "text": "work um we can run this and probably you're going to be",
    "start": "2009760",
    "end": "2015200"
  },
  {
    "text": "seeing some yeah some Jone that is all the data about the Pokemon maybe this is not super nice to look at so we can try",
    "start": "2015200",
    "end": "2022320"
  },
  {
    "text": "doing something different that is printing the status code so what we can",
    "start": "2022320",
    "end": "2027880"
  },
  {
    "text": "do is if we write a pipeline for example response Dot and you can see you can also see all the fields you can get a",
    "start": "2027880",
    "end": "2034639"
  },
  {
    "text": "hold of so here we also have a status but now we got error again the compiler knows that we can't do that there's no",
    "start": "2034639",
    "end": "2041519"
  },
  {
    "text": "magic implicit conversion that is going to turn that integer into a string for us we have to be explicit about it",
    "start": "2041519",
    "end": "2048440"
  },
  {
    "text": "because the argument is an integer but the function was expecting a string so we have to add a new step to this",
    "start": "2048440",
    "end": "2054440"
  },
  {
    "text": "pipeline of Transformations and so here it's just going to become a into to string and we",
    "start": "2054440",
    "end": "2061398"
  },
  {
    "text": "can import the module automatically now we're good to go we can run it again and again running the code as simple as as",
    "start": "2061399",
    "end": "2067878"
  },
  {
    "text": "glim run you don't have to go through uh H Hoops to like run your code it's just",
    "start": "2067879",
    "end": "2074560"
  },
  {
    "text": "that simple glim run and you're good to go if you want to run your test well that's glim test here we have just an",
    "start": "2074560",
    "end": "2080520"
  },
  {
    "text": "example test that is not going to fail and okay now that is out of the way",
    "start": "2080520",
    "end": "2087000"
  },
  {
    "text": "I'm quite happy that it didn't explode and I think it's time to wrap",
    "start": "2087000",
    "end": "2092358"
  },
  {
    "text": "things up so Gleim is a friendly language that puts developer experience",
    "start": "2092359",
    "end": "2098839"
  },
  {
    "start": "2094000",
    "end": "2152000"
  },
  {
    "text": "as its utmost priority it wants to make the experience of using it as smooth and",
    "start": "2098839",
    "end": "2103880"
  },
  {
    "text": "as simple as possible by giving you loads of tooling out of the box and it just works you don't have to go through",
    "start": "2103880",
    "end": "2110119"
  },
  {
    "text": "the hell of having to decide which combination of tool which configuration is better for your",
    "start": "2110119",
    "end": "2115599"
  },
  {
    "text": "team glim is also typ safe so you always have this extremely valuable par",
    "start": "2115599",
    "end": "2122520"
  },
  {
    "text": "programmer who's really smart and thinks really hard about your code and is going to tell you what might go wrong and",
    "start": "2122520",
    "end": "2129200"
  },
  {
    "text": "again it's scalable it can compile down to Earl using an amazing runtime to get features like uh concurrency full",
    "start": "2129200",
    "end": "2135920"
  },
  {
    "text": "tolerance dealing with highly distributed",
    "start": "2135920",
    "end": "2140760"
  },
  {
    "text": "systems so what now let's say now you're you're interested about gleam you would",
    "start": "2141000",
    "end": "2146560"
  },
  {
    "text": "like this journey to keep going well there's many great resources as well so",
    "start": "2146560",
    "end": "2151839"
  },
  {
    "text": "first of all I think the best place to get started is Gams language tour it's an online interactive tool since glim",
    "start": "2151839",
    "end": "2159920"
  },
  {
    "start": "2152000",
    "end": "2181000"
  },
  {
    "text": "compiles to JavaScript it runs in your browser because it compiles your code down to JavaScript and then just runs it",
    "start": "2159920",
    "end": "2166160"
  },
  {
    "text": "and it's great it will get you through all the um features of the language and",
    "start": "2166160",
    "end": "2171319"
  },
  {
    "text": "there's really few of those glim is a simple language once again and so you will probably be able to like go through",
    "start": "2171319",
    "end": "2177720"
  },
  {
    "text": "the entire thing in a couple evenings if you're more like the code cat a person you would you would sure",
    "start": "2177720",
    "end": "2184720"
  },
  {
    "start": "2181000",
    "end": "2203000"
  },
  {
    "text": "for sure enjoy the gimps exorcism truck so what you can do there is solve exercises be introduced to functional",
    "start": "2184720",
    "end": "2191599"
  },
  {
    "text": "programming Concepts and also ask for feedback from other people from the community and they will try and help you",
    "start": "2191599",
    "end": "2199160"
  },
  {
    "text": "with your problem if you're struggling to do something but I think the best place to be is gim's Discord glim has",
    "start": "2199160",
    "end": "2206599"
  },
  {
    "start": "2203000",
    "end": "2244000"
  },
  {
    "text": "really an amazing Community what I love to say is you get in for the language but you really stay for the community",
    "start": "2206599",
    "end": "2212319"
  },
  {
    "text": "it's full of lovely caring people they're always happy to help someone who's just getting started with gam so",
    "start": "2212319",
    "end": "2219000"
  },
  {
    "text": "if you have any questions any feedback if you're stuck and you don't know how to do something in gam please do reach",
    "start": "2219000",
    "end": "2224599"
  },
  {
    "text": "out also you can also reach out to me so if you want to ping me uh I never shut",
    "start": "2224599",
    "end": "2230520"
  },
  {
    "text": "up about gleam so come talk to me I might look shy but I will talk to you and you will want to kill me after",
    "start": "2230520",
    "end": "2236880"
  },
  {
    "text": "that so I my email I'm on Twitter geub open issues whatever you want to do to",
    "start": "2236880",
    "end": "2242119"
  },
  {
    "text": "reach me please do and that's it that was my talk so",
    "start": "2242119",
    "end": "2247160"
  },
  {
    "start": "2244000",
    "end": "2267000"
  },
  {
    "text": "thank you so much for listening and please remember to rate it on the go-to up [Applause]",
    "start": "2247160",
    "end": "2257559"
  }
]