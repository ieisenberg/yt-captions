[
  {
    "start": "0",
    "end": "48000"
  },
  {
    "text": "we've held a lot of go to conferences across the world and collaborated with some of the top creators and innovators within software",
    "start": "5520",
    "end": "13200"
  },
  {
    "text": "in this brand new go to book club to give you key takeaways from the masters themselves in the form",
    "start": "13200",
    "end": "18560"
  },
  {
    "text": "of interviews revolving around books they've created learn strategies empowered to become a",
    "start": "18560",
    "end": "23920"
  },
  {
    "text": "more efficient developer as we dive into the first online series of our go to book club",
    "start": "23920",
    "end": "31010"
  },
  {
    "text": "[Music]",
    "start": "31010",
    "end": "40930"
  },
  {
    "text": "this episode was made possible thanks to growtopia.tech",
    "start": "42719",
    "end": "47840"
  },
  {
    "start": "48000",
    "end": "79000"
  },
  {
    "text": "welcome this is the go to book club this book was written by sasha urich one of our",
    "start": "48320",
    "end": "54239"
  },
  {
    "text": "top-rated speakers we invited him to a conversation about",
    "start": "54239",
    "end": "59520"
  },
  {
    "text": "elixir in general and about his book to lead the conversation we invited",
    "start": "59520",
    "end": "65360"
  },
  {
    "text": "eric stern managing director of earling solutions in sweden and an author himself we started by",
    "start": "65360",
    "end": "71119"
  },
  {
    "text": "asking sasha if you could do a quick overview what is elixir",
    "start": "71119",
    "end": "77520"
  },
  {
    "start": "79000",
    "end": "381000"
  },
  {
    "text": "so elixir is a programming language in theory you could say that it's a general purpose programming language but",
    "start": "79439",
    "end": "86479"
  },
  {
    "text": "in my personal view it has like it's a particular sweet spot of what kind of programs can you write",
    "start": "86479",
    "end": "92400"
  },
  {
    "text": "with with elixir and such programs are what i call software systems",
    "start": "92400",
    "end": "98000"
  },
  {
    "text": "and by that i mean uh any kind of program that runs on the backend side of thing any kind of a server",
    "start": "98000",
    "end": "103280"
  },
  {
    "text": "uh server-side program such as a web server but also for example say a database or a",
    "start": "103280",
    "end": "109040"
  },
  {
    "text": "message queue uh and uh what is particular for software systems compared to other types",
    "start": "109040",
    "end": "115040"
  },
  {
    "text": "of programs is that once you put them into production you know you start them for the very first time in production",
    "start": "115040",
    "end": "120719"
  },
  {
    "text": "they have to be running for a long period of time constantly continuously for a long amount of time like a couple",
    "start": "120719",
    "end": "126240"
  },
  {
    "text": "of years or maybe even a couple of decades and during this period you don't really want them to go down because that",
    "start": "126240",
    "end": "132239"
  },
  {
    "text": "essentially means that the system is not providing any service at all another particular",
    "start": "132239",
    "end": "137360"
  },
  {
    "text": "property of a software system is that at any point in time it is doing a bunch of different things a bunch of different activities",
    "start": "137360",
    "end": "143040"
  },
  {
    "text": "are happening within the system like say all of us are making requests uh to a web server",
    "start": "143040",
    "end": "148800"
  },
  {
    "text": "and each request by a different person is its own separate activity uh but beyond just uh handling requests",
    "start": "148800",
    "end": "154640"
  },
  {
    "text": "the system has to do other things like say run background jobs or periodical jobs",
    "start": "154640",
    "end": "160400"
  },
  {
    "text": "it might need to manage some kind of an in-memory state such as cash for example it may need to",
    "start": "160400",
    "end": "166560"
  },
  {
    "text": "do some load control such as applying back pressure or rate limiting so a lot of stuff is happening just",
    "start": "166560",
    "end": "172560"
  },
  {
    "text": "beyond a plane request responding and what's interesting is that these activities are uh mostly",
    "start": "172560",
    "end": "178400"
  },
  {
    "text": "mutually either very loosely dependent or in many cases even completely independent like say your request and my request are",
    "start": "178400",
    "end": "185360"
  },
  {
    "text": "typically you know completely unrelated and what this means is that in a software system uh",
    "start": "185360",
    "end": "190959"
  },
  {
    "text": "the the the semantics of success are not binary you have like degrees of success which",
    "start": "190959",
    "end": "196560"
  },
  {
    "text": "is not true for every type of program like if you take say a compiler or typically any kind of a command line",
    "start": "196560",
    "end": "202080"
  },
  {
    "text": "tool you know these programs get some input they do some processing they produce the output and they can either succeed or fail",
    "start": "202080",
    "end": "208000"
  },
  {
    "text": "there is nothing in between but for software systems you have this uh these degrees of uh success",
    "start": "208000",
    "end": "214640"
  },
  {
    "text": "so like of course ideally uh we want uh the system to always work for everyone",
    "start": "214640",
    "end": "220400"
  },
  {
    "text": "but clearly this is not possible uh because i mean ultimately we're humans and we're gonna produce some bugs and some things will",
    "start": "220400",
    "end": "226640"
  },
  {
    "text": "go wrong and even if we are able to write perfect software this software runs on some hardware which will occasionally fail",
    "start": "226640",
    "end": "233519"
  },
  {
    "text": "typically in many systems we depend on external stuff not developed by us like say external database",
    "start": "233519",
    "end": "239280"
  },
  {
    "text": "or third-party services like say payment gateway for example um so these things might fall and it's",
    "start": "239280",
    "end": "245360"
  },
  {
    "text": "completely out of or might fail right and that's completely out of our control so things will go wrong",
    "start": "245360",
    "end": "250560"
  },
  {
    "text": "but because there is a non-binary idea of success we we can implement we can capitalize on",
    "start": "250560",
    "end": "256320"
  },
  {
    "text": "this and implement the system in a way that it uh provides as much of the service as possible at any point in time",
    "start": "256320",
    "end": "262639"
  },
  {
    "text": "even when something go wrong which is better than you know providing nothing and so this is a very particular challenge for",
    "start": "262639",
    "end": "268000"
  },
  {
    "text": "any kind of a software system and this is what i what i like to call uh what for me is high availability it's",
    "start": "268000",
    "end": "273440"
  },
  {
    "text": "not about you know chase chasing some mythical amount of nines of uptime it's about providing as much of the service",
    "start": "273440",
    "end": "278960"
  },
  {
    "text": "as possible for our users you know and uh also of course the system should be able",
    "start": "278960",
    "end": "284639"
  },
  {
    "text": "to automatically detect when something goes wrong and recover automatically from that failure as soon as possible",
    "start": "284639",
    "end": "290800"
  },
  {
    "text": "given the circumstances um so those are the challenges of software system",
    "start": "290800",
    "end": "296240"
  },
  {
    "text": "and uh again they are really applied to any kind of a software system regardless of the particular business domain or",
    "start": "296240",
    "end": "302720"
  },
  {
    "text": "even scaling even in smaller systems and simple systems uh you still want your system to be",
    "start": "302720",
    "end": "308400"
  },
  {
    "text": "mostly up and running and providing as much of the service now elixir uh as a language gives us",
    "start": "308400",
    "end": "314080"
  },
  {
    "text": "tools to address those challenges uh gives us you know like basic building blocks very",
    "start": "314080",
    "end": "319440"
  },
  {
    "text": "simple in their nature but very powerful and flexible to approach the challenge of high availability",
    "start": "319440",
    "end": "325199"
  },
  {
    "text": "in a systematical uh fashion um now i want to say that elixir is not the",
    "start": "325199",
    "end": "330320"
  },
  {
    "text": "only such language available uh for this job there are a couple of other languages like for",
    "start": "330320",
    "end": "335440"
  },
  {
    "text": "example erlang or a lisp for erlang or gleam as an example of a newer and a strongly typed",
    "start": "335440",
    "end": "341840"
  },
  {
    "text": "language and what ties all these languages together is the fact that they share the same runtime",
    "start": "341840",
    "end": "347759"
  },
  {
    "text": "which is called beam and this is the name of the erlang virtual machine originally designed or written for uh",
    "start": "347759",
    "end": "354160"
  },
  {
    "text": "the erlang programming language and now you know with time we have a bunch of other newer languages built",
    "start": "354160",
    "end": "360000"
  },
  {
    "text": "on top of beam and beam is really the secret sauce here which allows this story to happen which allows",
    "start": "360000",
    "end": "366240"
  },
  {
    "text": "us to build a highly available systems takeaway number one the key ingredient of alexia's support",
    "start": "366240",
    "end": "373520"
  },
  {
    "text": "for high availability is beam the erlang virtual machine",
    "start": "373520",
    "end": "381120"
  },
  {
    "start": "381000",
    "end": "749000"
  },
  {
    "text": "so sasha speaking of the beam here i mean that's that's the elixir virtual machine how do you say how would you say that",
    "start": "381120",
    "end": "387280"
  },
  {
    "text": "compares to to other virtual machines that people may be more more familiar with like the the java",
    "start": "387280",
    "end": "392639"
  },
  {
    "text": "virtual machine the jvm for instance yeah so uh what i personally find about",
    "start": "392639",
    "end": "397919"
  },
  {
    "text": "beam is that it really has a strong focus on what it wants to do and this is to power the software systems highly available",
    "start": "397919",
    "end": "405120"
  },
  {
    "text": "long-running programs which should ideally never fail never go down completely and uh beam has been built from the",
    "start": "405120",
    "end": "411599"
  },
  {
    "text": "ground up from the day one you know even day minus one if you will before it didn't even exist there was a lot of thought",
    "start": "411599",
    "end": "417039"
  },
  {
    "text": "put into it you know how to build such uh a runtime and so build provides uh many things at the runtime layer which",
    "start": "417039",
    "end": "423440"
  },
  {
    "text": "uh other runtimes typically do not uh let me briefly explain how how it works on beam so it's gonna be",
    "start": "423440",
    "end": "429599"
  },
  {
    "text": "clearer so uh essentially the way it works is like when you build your program in the beam blank which such as elixir or lung",
    "start": "429599",
    "end": "436240"
  },
  {
    "text": "or other languages you will start your program and the single operating system process is started",
    "start": "436240",
    "end": "441599"
  },
  {
    "text": "and this is the instance of beam where uh our program is running if i run five beam programs i'm gonna have five",
    "start": "441599",
    "end": "447360"
  },
  {
    "text": "of those uh instances five os processes now within a single uh beam instance uh",
    "start": "447360",
    "end": "452960"
  },
  {
    "text": "we can start many uh small lightweight independent programs which we call processors",
    "start": "452960",
    "end": "458240"
  },
  {
    "text": "so just to clarify process is not a noise process os process is one beam instance and then within a single beam instance you can",
    "start": "458240",
    "end": "464720"
  },
  {
    "text": "have a bunch of these small processes and when i say a bunch i really mean like a large number like hundreds of",
    "start": "464720",
    "end": "469840"
  },
  {
    "text": "thousands millions up to i think around 100 million uh processes per single beam instance",
    "start": "469840",
    "end": "476080"
  },
  {
    "text": "now uh these uh these processes these programs are completely isolated uh",
    "start": "476080",
    "end": "482479"
  },
  {
    "text": "from each other uh so they share no memory at all uh they have their own separate",
    "start": "482479",
    "end": "487840"
  },
  {
    "text": "memory space uh and they can only communicate through uh sending themselves messages which is",
    "start": "487840",
    "end": "493039"
  },
  {
    "text": "also known as message passing concurrency and they are completely isolated from each other so like if a single process",
    "start": "493039",
    "end": "499199"
  },
  {
    "text": "crashes if that single small program crashes all the other processes in the system are still up and running",
    "start": "499199",
    "end": "505680"
  },
  {
    "text": "so they will not fail and this crash can be detected and these are like the basic foundational uh stuff that we get at the beam level",
    "start": "505680",
    "end": "513599"
  },
  {
    "text": "now uh what this means is uh basically i like to sometimes say that like we have uh support for microservices at",
    "start": "513599",
    "end": "520560"
  },
  {
    "text": "least some parts of microservices directly at the runtime layer and therefore directly at the language",
    "start": "520560",
    "end": "525839"
  },
  {
    "text": "level we can do stuff for for which in other languages we have to fall back to the os level and run a bunch of",
    "start": "525839",
    "end": "531440"
  },
  {
    "text": "different os processes and different components and orchestrate them through some uh",
    "start": "531440",
    "end": "536480"
  },
  {
    "text": "service manager and whatnot you can do a lot of that stuff directly in a beam language such as elixir and so the idea of building a",
    "start": "536480",
    "end": "544320"
  },
  {
    "text": "fault tolerant and highly available system is like in its basic form it's like very simple to me uh like let's say a system",
    "start": "544320",
    "end": "550800"
  },
  {
    "text": "has to do this huge chunk huge amount of job you know everything the system has to do like it's like some huge big square",
    "start": "550800",
    "end": "556720"
  },
  {
    "text": "if you take this big square and somehow strategically split it into a small number of",
    "start": "556720",
    "end": "561760"
  },
  {
    "text": "independent or loosely dependent programs then suddenly no one is too big to fail right and so if you experience some sort",
    "start": "561760",
    "end": "568880"
  },
  {
    "text": "of an error in a particular part of the system you know like maybe there is some division by zero square",
    "start": "568880",
    "end": "574640"
  },
  {
    "text": "root of minus one something unexpected happens uh still most of the system is up and running and we are still providing as",
    "start": "574640",
    "end": "580560"
  },
  {
    "text": "much of the service as possible and uh at the same time because failure",
    "start": "580560",
    "end": "585839"
  },
  {
    "text": "and in general the process termination is not a silent event so any other process can be notified about it",
    "start": "585839",
    "end": "592000"
  },
  {
    "text": "you can uh implement uh self-healing uh strategies so like uh one process crashes the other one",
    "start": "592000",
    "end": "598399"
  },
  {
    "text": "gets notified about it and starts a new process in its place or maybe redirects some jobs to",
    "start": "598399",
    "end": "605040"
  },
  {
    "text": "another process that was uh that is still available so it's like a pretty simple uh but very",
    "start": "605040",
    "end": "610560"
  },
  {
    "text": "powerful idea um compared to other uh virtual machines well i didn't do it like a thorough",
    "start": "610560",
    "end": "616560"
  },
  {
    "text": "comparison but in general as far as i know no other runtime layer has such support",
    "start": "616560",
    "end": "623200"
  },
  {
    "text": "for high available systems or such focus uh in particular for example in jvm as far as i know there is no light with",
    "start": "623200",
    "end": "629360"
  },
  {
    "text": "concurrency at the runtime level uh people do this on top of jvm so the most notable",
    "start": "629360",
    "end": "634480"
  },
  {
    "text": "example is akka which takes a lot of ideas from uh erlang and i mean",
    "start": "634480",
    "end": "639519"
  },
  {
    "text": "brings also a lot of other interesting ideas to the table but this is implemented at the library level so like you implement aka in a",
    "start": "639519",
    "end": "646320"
  },
  {
    "text": "language i don't know in which language is it written probably java but what this means is",
    "start": "646320",
    "end": "652160"
  },
  {
    "text": "that you kind of fall short uh you basically can do only what your runtime can do so",
    "start": "652160",
    "end": "657360"
  },
  {
    "text": "uh for example in beam these processes are scheduled preemptively so to speak",
    "start": "657360",
    "end": "662800"
  },
  {
    "text": "so like when a single process runs in an infinite cpu bound loop it's moved out and someone else gets the",
    "start": "662800",
    "end": "668800"
  },
  {
    "text": "slot so you can terminate the process even if it gets stuck completely even if it refuses to stop",
    "start": "668800",
    "end": "674240"
  },
  {
    "text": "as far as i know this these things are not possible in akka or anything else because you essentially don't have the support from the runtime",
    "start": "674240",
    "end": "681200"
  },
  {
    "text": "you know the runtime doesn't know about uh these lightweight uh likely concurrency entities so in my",
    "start": "681200",
    "end": "687839"
  },
  {
    "text": "view beam is really you know very focused and very well built it's a really stable runtime you know has been",
    "start": "687839",
    "end": "693279"
  },
  {
    "text": "around for uh more than 20 years or so and i mean erlang itself is old i think",
    "start": "693279",
    "end": "699040"
  },
  {
    "text": "about 30 years or maybe even more if you take the design phase into account so",
    "start": "699040",
    "end": "704480"
  },
  {
    "text": "uh very stable proven practice in large systems and diverse systems such as whatsapp for example",
    "start": "704480",
    "end": "710079"
  },
  {
    "text": "and of course in ericsson telecom systems so it's as far as i know the best option we",
    "start": "710079",
    "end": "715760"
  },
  {
    "text": "have available today or the most suitable option that we have available today as a foundation for building software",
    "start": "715760",
    "end": "721839"
  },
  {
    "text": "systems or again highly available fault tolerance and scalable programs",
    "start": "721839",
    "end": "726880"
  },
  {
    "text": "so yeah i fully agree with you sasha and this is really captured in in the saying right once run",
    "start": "726880",
    "end": "732560"
  },
  {
    "text": "forever right this that's sort of the essence of what you just described right take away",
    "start": "732560",
    "end": "737839"
  },
  {
    "text": "number two beam is very stable which has been proven in practice in very large systems",
    "start": "737839",
    "end": "744000"
  },
  {
    "text": "like whatsapp",
    "start": "744000",
    "end": "746720"
  },
  {
    "start": "749000",
    "end": "1192000"
  },
  {
    "text": "yeah and i'm thinking in the community now there's a lot of talk about golang and dark lang",
    "start": "749360",
    "end": "755839"
  },
  {
    "text": "and that are in some aspects similar um what are your thoughts on on sort of the",
    "start": "755839",
    "end": "760880"
  },
  {
    "text": "differences and similarities uh between these languages and and the languages on the beam elixir being one",
    "start": "760880",
    "end": "767360"
  },
  {
    "text": "of them of course yeah so let's uh let's start with uh go",
    "start": "767360",
    "end": "772959"
  },
  {
    "text": "so in my view go go is a really great language for uh building tools you know the complete",
    "start": "772959",
    "end": "778720"
  },
  {
    "text": "opposite of software uh systems because a tool especially like if you want to distribute them massively",
    "start": "778720",
    "end": "784079"
  },
  {
    "text": "to a large audience which runs in a bunch of different operating systems and whatnot so gogo",
    "start": "784079",
    "end": "789519"
  },
  {
    "text": "really has a great deployment story which i really like you know you build this standalone binary",
    "start": "789519",
    "end": "794880"
  },
  {
    "text": "and give it away and it works you know so this is uh super great i think as far as i know",
    "start": "794880",
    "end": "799920"
  },
  {
    "text": "it's probably the state of the art in that particular area it's very simple language to pick up you know uh",
    "start": "799920",
    "end": "806079"
  },
  {
    "text": "so uh those are like pretty good things but uh i personally and i know that people are building systems",
    "start": "806079",
    "end": "812800"
  },
  {
    "text": "with go but personally i don't feel that go is as good of a fit for that job as beam",
    "start": "812800",
    "end": "820480"
  },
  {
    "text": "languages so i mean go does have a lightweight concurrency but that's pretty much",
    "start": "820480",
    "end": "826079"
  },
  {
    "text": "all it has so it's not just about having lightweight concurrence it has to be designed in a particular way",
    "start": "826079",
    "end": "831279"
  },
  {
    "text": "if you want to build software systems with it in go for example all these go routines are sharing memory",
    "start": "831279",
    "end": "836959"
  },
  {
    "text": "which can lead to all sort of uh strange problems and bugs if a goal",
    "start": "836959",
    "end": "842079"
  },
  {
    "text": "routine crashes then the entire program crashes so you know think about like if you have a a single go program which",
    "start": "842079",
    "end": "850399"
  },
  {
    "text": "runs i don't know maybe a million of go routines you are i don't know handling websocket connections to some real-time",
    "start": "850399",
    "end": "855839"
  },
  {
    "text": "uh game server or something like that and see there is a single bug you know you have somewhere square root of minus",
    "start": "855839",
    "end": "861839"
  },
  {
    "text": "one single go routine crashes all of these connections go down and this is like super disruptive uh for all the users you know this is the",
    "start": "861839",
    "end": "868320"
  },
  {
    "text": "kind of thing that will not happen in beam when you design it properly uh you know you will just have one",
    "start": "868320",
    "end": "873360"
  },
  {
    "text": "process crashing uh then go also basically has like still has cooperative",
    "start": "873360",
    "end": "878959"
  },
  {
    "text": "uh scheduling uh they did a lot of improvements there but as far as i'm aware they're still not",
    "start": "878959",
    "end": "884399"
  },
  {
    "text": "completely preemptive so you can still end up with a go routine which just you know runs in some longer cpu bound loop",
    "start": "884399",
    "end": "892000"
  },
  {
    "text": "and uh just takes up a single scheduler and a couple of such routines basically block your entire system and uh also",
    "start": "892000",
    "end": "899440"
  },
  {
    "text": "uh you cannot really terminate go routines this is a very interesting thing that you have on beam",
    "start": "899440",
    "end": "904880"
  },
  {
    "text": "so in beam you know because process is a runtime entity uh you can terminate it uh by the random",
    "start": "904880",
    "end": "911040"
  },
  {
    "text": "you can ask the runtime please stop this thing now you know and no matter what it does it's going to be stopped now",
    "start": "911040",
    "end": "916720"
  },
  {
    "text": "because you know this is the random level service and so this is the first class cancellation at the runtime layer you know",
    "start": "916720",
    "end": "921920"
  },
  {
    "text": "that kind of things pretty much are not possible to implement reliably or come completely reliably on",
    "start": "921920",
    "end": "928480"
  },
  {
    "text": "uh in go or in say on top of jvm again because the runtime doesn't uh have the support for that uh just",
    "start": "928480",
    "end": "934639"
  },
  {
    "text": "maybe as a passing mention you know i explained this in more detail through a demo driven presentation about a year ago when i was",
    "start": "934639",
    "end": "941199"
  },
  {
    "text": "talking to go to chicago giving a talk called the soul of erlang and elixir so you know i'm giving a very",
    "start": "941199",
    "end": "946480"
  },
  {
    "text": "high level overview here but if you want to see this in action you may want to check out that talk so",
    "start": "946480",
    "end": "951839"
  },
  {
    "text": "yeah in general i think that go for me uh personally i would definitely use it and recommend it to build tools to build one of",
    "start": "951839",
    "end": "958480"
  },
  {
    "text": "programs pretty works pretty great for that uh probably the best in class for many",
    "start": "958480",
    "end": "963600"
  },
  {
    "text": "such scenarios but for software system you know again i understand that people are building large and uh interesting things",
    "start": "963600",
    "end": "970639"
  },
  {
    "text": "with that uh but personally you know for me that would not be the choice i feel that uh beam languages are a better",
    "start": "970639",
    "end": "976320"
  },
  {
    "text": "uh better option now when it comes to dark this is a very interesting story so i really like dark i mean what i've",
    "start": "976320",
    "end": "983600"
  },
  {
    "text": "seen you know so i didn't really get to try it but i just saw a couple of presentations uh i think the dark really",
    "start": "983600",
    "end": "989519"
  },
  {
    "text": "has a very important story and this is the story that uh dark starts with the premise that backhand development",
    "start": "989519",
    "end": "995600"
  },
  {
    "text": "is very complex because you have to use a huge amount of different tooling and somehow glue it all together",
    "start": "995600",
    "end": "1000800"
  },
  {
    "text": "this is like the modern state of art you start with kubernetes and then run a bunch of different components",
    "start": "1000800",
    "end": "1006079"
  },
  {
    "text": "and you split your system into a bunch of different micro services and whatnot and the the amount of technical complexity",
    "start": "1006079",
    "end": "1012560"
  },
  {
    "text": "we introduce here uh is crazy this is like definitely server side back inside programming",
    "start": "1012560",
    "end": "1018160"
  },
  {
    "text": "is way too complex these days um and so dark aims to solve this by being uh like a single",
    "start": "1018160",
    "end": "1025120"
  },
  {
    "text": "tool you know you learn this one tool and you can do everything with dark so you know it reduces a huge amount of",
    "start": "1025120",
    "end": "1031280"
  },
  {
    "text": "this technical complexity and i really like this story now what's interesting is that you can",
    "start": "1031280",
    "end": "1036480"
  },
  {
    "text": "sort of get a similar story on top of beam languages uh precisely because beam already at the runtime level gives you",
    "start": "1036480",
    "end": "1042959"
  },
  {
    "text": "a lot of the things that you get otherwise from the operating system uh so like indeed we sometimes say that",
    "start": "1042959",
    "end": "1048400"
  },
  {
    "text": "uh erlang or elixir is like an operating system for our code and when you have",
    "start": "1048400",
    "end": "1054480"
  },
  {
    "text": "operating system services in your code then you don't have to fall back to the operating system level and you can do a",
    "start": "1054480",
    "end": "1059520"
  },
  {
    "text": "lot of stuff from the language and i've had a bunch of these examples in practice where i built a system using exclusively",
    "start": "1059520",
    "end": "1065760"
  },
  {
    "text": "erlang or using exclusively beam with nothing else running on the side supporting it",
    "start": "1065760",
    "end": "1071039"
  },
  {
    "text": "uh so like no nginx for example no external in memory kv because we have",
    "start": "1071039",
    "end": "1076880"
  },
  {
    "text": "like an in-memory key value storage called or long term storage or ets so",
    "start": "1076880",
    "end": "1083120"
  },
  {
    "text": "things like that you know when with other languages i would have to fall back and run a couple of different processes and a couple of different",
    "start": "1083120",
    "end": "1089200"
  },
  {
    "text": "third-party components and glue them and again this is a huge amount of technical complexity uh with erlang and elixir you",
    "start": "1089200",
    "end": "1094960"
  },
  {
    "text": "can frequently you know get away just fine with a single project and a single os process uh",
    "start": "1094960",
    "end": "1100160"
  },
  {
    "text": "running for each machine in the cluster and i believe that uh basically with beam",
    "start": "1100160",
    "end": "1105760"
  },
  {
    "text": "you can get similar uh similar uh sort of properties that dark aims to give you",
    "start": "1105760",
    "end": "1111600"
  },
  {
    "text": "uh however uh beam uh and the entire ecosystem is kind of a ground up story it's more like a toolkit",
    "start": "1111600",
    "end": "1118400"
  },
  {
    "text": "less than a framework so uh with beam and standard libraries overland elixir you get like a",
    "start": "1118400",
    "end": "1123679"
  },
  {
    "text": "relatively low level uh low level uh abstractions and then uh libraries give you some medium level",
    "start": "1123679",
    "end": "1130000"
  },
  {
    "text": "abstractions and uh what we are kind of liking and dark sort of starts from the opposite direction are",
    "start": "1130000",
    "end": "1136160"
  },
  {
    "text": "like super high level abstractions so ideally i mean this is perfectly possible we have good foundations in place and again",
    "start": "1136160",
    "end": "1142480"
  },
  {
    "text": "in my view you can typically implement something like on top of beam and not many other platforms but we",
    "start": "1142480",
    "end": "1148960"
  },
  {
    "text": "are lacking these high level abstractions and i would like to see the ecosystem evolving to the point where like when i say i want to build a small",
    "start": "1148960",
    "end": "1155200"
  },
  {
    "text": "to medium uh distributed web facing system and in 15 minutes you know i bring in a couple of libraries a",
    "start": "1155200",
    "end": "1161440"
  },
  {
    "text": "single project and bam it just works this is perfectly possible and uh i would really like like to see our ecosystem getting there",
    "start": "1161440",
    "end": "1168720"
  },
  {
    "text": "yeah and i think that's that's a very good comment i think the the ecosystem around elixir and the beam is fantastic",
    "start": "1168720",
    "end": "1174480"
  },
  {
    "text": "and i'm sure there are brains as we speak thinking and working on exactly those things take away number",
    "start": "1174480",
    "end": "1181280"
  },
  {
    "text": "three beam languages handle a lot of the complexity for you doing server-side programming you could",
    "start": "1181280",
    "end": "1188320"
  },
  {
    "text": "say they're the operating system for your code so um slightly related topic i was",
    "start": "1188320",
    "end": "1195280"
  },
  {
    "start": "1192000",
    "end": "1404000"
  },
  {
    "text": "listening to another episode on the go to book club on elm in action and um you know elm being a total",
    "start": "1195280",
    "end": "1202000"
  },
  {
    "text": "different beast of course but what i found interesting there is the the approach taken to to static",
    "start": "1202000",
    "end": "1207600"
  },
  {
    "text": "typing it's very very rigid what are your thoughts on on static typing for for the beam and beam languages",
    "start": "1207600",
    "end": "1216000"
  },
  {
    "text": "so uh in my view uh the lack of static typing is uh the biggest deficiency on uh on beam",
    "start": "1216480",
    "end": "1223840"
  },
  {
    "text": "languages and i mean i know that there are like camps uh dynamic versus static i",
    "start": "1223840",
    "end": "1229600"
  },
  {
    "text": "personally you know done uh both uh for like many many years and uh for the",
    "start": "1229600",
    "end": "1236320"
  },
  {
    "text": "past 15 years i've been mostly using dynamic languages and i'm now pretty much certain to say that i",
    "start": "1236320",
    "end": "1241679"
  },
  {
    "text": "believe that static uh is definitely a better option you know i still love erlang and the leagues here and these are like",
    "start": "1241679",
    "end": "1247520"
  },
  {
    "text": "my first languages regardless of the lack of static typing because they offer something that i cannot find",
    "start": "1247520",
    "end": "1253360"
  },
  {
    "text": "anywhere else but i would love to see static typing story on uh beam languages unfortunately uh mostly it hasn't been available so",
    "start": "1253360",
    "end": "1260559"
  },
  {
    "text": "what we have for erlang and elixir is uh what is called a success typing through the tool called dialyzer",
    "start": "1260559",
    "end": "1265919"
  },
  {
    "text": "which i like to say is far from perfect but it's the best we got uh however uh there are very interesting",
    "start": "1265919",
    "end": "1272000"
  },
  {
    "text": "initiatives uh there is one language called alpaca and another language called clean",
    "start": "1272000",
    "end": "1278559"
  },
  {
    "text": "which look very very promising uh and they basically aim to bring static",
    "start": "1278559",
    "end": "1284320"
  },
  {
    "text": "typing into the beam world like you know proper sound static typing and this is something i'm super excited",
    "start": "1284320",
    "end": "1290880"
  },
  {
    "text": "about i still didn't have the chance to try them out but i would definitely love uh love to",
    "start": "1290880",
    "end": "1296080"
  },
  {
    "text": "see how this story unfolds uh yeah i mean the one challenge you know with beam languages is because",
    "start": "1296080",
    "end": "1301440"
  },
  {
    "text": "you you really have two dimensions in those languages so like there is a functional dimension so",
    "start": "1301440",
    "end": "1307200"
  },
  {
    "text": "erlang is a functional language and elixir is a functional language typically all the languages are functional because somehow the",
    "start": "1307200",
    "end": "1313679"
  },
  {
    "text": "the runtime itself is tuned to that and but then there is a whole other dimension which is concurrent dimension",
    "start": "1313679",
    "end": "1319760"
  },
  {
    "text": "that's what i talked about you know the ability to run and manage a large number of programs within a single uh os process",
    "start": "1319760",
    "end": "1326080"
  },
  {
    "text": "and this is usually lacking from other languages and like these two dimensions are completely serve completely",
    "start": "1326080",
    "end": "1332080"
  },
  {
    "text": "different purposes uh and uh the challenge is uh i'm curious to see how this will be sold in uh",
    "start": "1332080",
    "end": "1338080"
  },
  {
    "text": "like gleam for example is how to get uh uh type safe message passing for example",
    "start": "1338080",
    "end": "1344640"
  },
  {
    "text": "uh so this is going to be very interesting to see how it unfold but in any case i'm certain that uh strong",
    "start": "1344640",
    "end": "1350320"
  },
  {
    "text": "typing can be added to beam languages and i'm very very excited about uh gleam and i'm looking forward to see",
    "start": "1350320",
    "end": "1357600"
  },
  {
    "text": "how it unfolds yeah i fully agree with you i think that's a very interesting story and there's even rumors",
    "start": "1357600",
    "end": "1363679"
  },
  {
    "text": "that you know what's up they're being a big user of the being language called erlang they they are very",
    "start": "1363679",
    "end": "1370720"
  },
  {
    "text": "much into strong typing and they even invented different new versions of languages",
    "start": "1370720",
    "end": "1377440"
  },
  {
    "text": "including strong types so let's see how that plays out and i'm really excited take away number four the lack of static",
    "start": "1377440",
    "end": "1383200"
  },
  {
    "text": "typing is the biggest deficiency on beam languages but it will likely be solved",
    "start": "1383200",
    "end": "1388720"
  },
  {
    "text": "with the emergence of gleam and alpaca goto gives you the chance to learn from",
    "start": "1388720",
    "end": "1394799"
  },
  {
    "text": "the brightest minds in software development join community meetups and highly rated conferences",
    "start": "1394799",
    "end": "1400080"
  },
  {
    "text": "and take deep dives on your favorite topics with master classes so um moving a bit into to alex here",
    "start": "1400080",
    "end": "1408159"
  },
  {
    "start": "1404000",
    "end": "1749000"
  },
  {
    "text": "um what would you say are the the key benefits from from a business",
    "start": "1408159",
    "end": "1413600"
  },
  {
    "text": "perspective let's say a business user considering elixir what would be the key benefits",
    "start": "1413600",
    "end": "1418960"
  },
  {
    "text": "from that angle so uh right i mean as i said uh elixir",
    "start": "1418960",
    "end": "1424080"
  },
  {
    "text": "like any other bim language for me it should be strongly considered when you want to build a server-side system and i don't",
    "start": "1424080",
    "end": "1429600"
  },
  {
    "text": "want to repeat all that again but definitely you know give it a try at least give it an evaluation",
    "start": "1429600",
    "end": "1434960"
  },
  {
    "text": "uh but of course it begs the question you know why would we choose say elixir or erlang which is the first beam language",
    "start": "1434960",
    "end": "1440880"
  },
  {
    "text": "and uh clearly like the whole runtime has been designed for erlang and i mean there are of course other languages as well so in my personal view",
    "start": "1440880",
    "end": "1448320"
  },
  {
    "text": "and just to be clear you know i'm not the member of the core team or i'm not the creator of the language or anything so i'm just a user i",
    "start": "1448320",
    "end": "1453919"
  },
  {
    "text": "always like to say i'm a happy user overlang and elixir and my personal impression is that uh what",
    "start": "1453919",
    "end": "1460400"
  },
  {
    "text": "elixir brings to the table compared to erlang is a better approachability and maybe a",
    "start": "1460400",
    "end": "1467279"
  },
  {
    "text": "better developer productivity story so i have been using erlang in",
    "start": "1467279",
    "end": "1472559"
  },
  {
    "text": "production for a couple of years before you know elixir even existed and then uh",
    "start": "1472559",
    "end": "1477919"
  },
  {
    "text": "through the middle of the past decade i was using both languages side by side and uh finally a couple of",
    "start": "1477919",
    "end": "1483679"
  },
  {
    "text": "years ago i moved completely to elixir and i like to think that i had like a good uh good you know practice with both",
    "start": "1483679",
    "end": "1490240"
  },
  {
    "text": "languages and so i could have seen like pros and cons and the thing is you know in my view erlang is a very simple",
    "start": "1490240",
    "end": "1497520"
  },
  {
    "text": "language you know people get confused people uh think that elixir is simpler but that's not true erlang is a simpler",
    "start": "1497520",
    "end": "1502720"
  },
  {
    "text": "language it just looks strange to most people because it has this prologue like uh syntax right but like very very",
    "start": "1502720",
    "end": "1509360"
  },
  {
    "text": "simple language and that's that's really cool um very simple syntax and very regular syntax no no ambiguities at all uh but",
    "start": "1509360",
    "end": "1517120"
  },
  {
    "text": "you know that's the problem with simplicity as well because uh the simpler the language also the less",
    "start": "1517120",
    "end": "1522320"
  },
  {
    "text": "expressive it is so what i found in erlang is that i had to write a lot of repeating a boilerplate and what you could call a",
    "start": "1522320",
    "end": "1529360"
  },
  {
    "text": "noise you know i know some people will say that it's like more explicit then but my personal sentiment is that",
    "start": "1529360",
    "end": "1534640"
  },
  {
    "text": "it's more noisy and so elixir i would say which looks maybe more approachable",
    "start": "1534640",
    "end": "1539760"
  },
  {
    "text": "for the syntax which is the least interesting part but you know it has like this ruby like syntax which people many people are used to but what really",
    "start": "1539760",
    "end": "1546880"
  },
  {
    "text": "in my view is alexia versus erlang is it's a more complex more complicated language uh so there's more there are more things",
    "start": "1546880",
    "end": "1553279"
  },
  {
    "text": "to learn but because of that uh you as a programmer can also be more expressive so you can actually reduce",
    "start": "1553279",
    "end": "1559840"
  },
  {
    "text": "and uh put aside some boilerplate and so i i found that like it strikes a better uh balance for",
    "start": "1559840",
    "end": "1565840"
  },
  {
    "text": "me personally but you know i wouldn't dare to say that either one of these two languages is better it's more about you",
    "start": "1565840",
    "end": "1571600"
  },
  {
    "text": "know your own personal preferences of whether you like to you know write a bit more uh",
    "start": "1571600",
    "end": "1576640"
  },
  {
    "text": "and then have that boilerplate but also you know the simpler language or you prefer to have like more complex uh",
    "start": "1576640",
    "end": "1582799"
  },
  {
    "text": "features in the language uh but then uh you know you you also can reduce some noise so it's",
    "start": "1582799",
    "end": "1588720"
  },
  {
    "text": "a matter of personal preferences to me now uh another thing that elixir brought to the table uh back when it was uh when it",
    "start": "1588720",
    "end": "1595120"
  },
  {
    "text": "originally appeared so i believe that jose valim started writing in 2011. if i remember correctly",
    "start": "1595120",
    "end": "1601120"
  },
  {
    "text": "i personally saw it in like early 2013 and at that time my impression my impression was that elixir had a much",
    "start": "1601120",
    "end": "1607520"
  },
  {
    "text": "better tooling support so like uh basically erlang didn't have official tool at the time so you had to use some",
    "start": "1607520",
    "end": "1613760"
  },
  {
    "text": "third-party tool which now has been integrated and which is now actually much better so",
    "start": "1613760",
    "end": "1618880"
  },
  {
    "text": "the story in urlank has approved as well but you know with elixir you just get this thing",
    "start": "1618880",
    "end": "1624159"
  },
  {
    "text": "and you start this mixed new project and you do everything with mix and it was like very easy to build an otp",
    "start": "1624159",
    "end": "1629840"
  },
  {
    "text": "release even back at that time when uh that thing the doing it with erlang was a bit more uh complex and again required",
    "start": "1629840",
    "end": "1636400"
  },
  {
    "text": "some different tools even the community overland didn't have this consensus about which tool you should use so there were",
    "start": "1636400",
    "end": "1642559"
  },
  {
    "text": "five or more different options to do that so this is where i find you know historically elixir uh working better",
    "start": "1642559",
    "end": "1649279"
  },
  {
    "text": "i believe that you know i don't really follow overland so much anymore but my impression is that erlang has",
    "start": "1649279",
    "end": "1654720"
  },
  {
    "text": "improved as well in those areas and i kind of like the thing that you know having these multiple choices that these communities uh",
    "start": "1654720",
    "end": "1661120"
  },
  {
    "text": "essentially move each other forward together so uh we are all like whole beam ecosystem and i mean it's",
    "start": "1661120",
    "end": "1666960"
  },
  {
    "text": "always worth saying that you can use uh like in elixir you can use erlang libraries and we wouldn't even exist if",
    "start": "1666960",
    "end": "1672320"
  },
  {
    "text": "we didn't use those libraries starting from the standard library and the otp framework but then also third-party libraries such as the",
    "start": "1672320",
    "end": "1678640"
  },
  {
    "text": "popular cowboy web server and things like that and also then again uh owing to the work",
    "start": "1678640",
    "end": "1684000"
  },
  {
    "text": "on the links here there have been some pull requests done back to the uh erlang slash otp",
    "start": "1684000",
    "end": "1689840"
  },
  {
    "text": "so essentially these two languages you know kind of work together and not just these two languages but all of them languages as they should so ultimately",
    "start": "1689840",
    "end": "1696640"
  },
  {
    "text": "to me you know the uh the question of say erlang versus elixir is all more about like do you",
    "start": "1696640",
    "end": "1702080"
  },
  {
    "text": "prefer a simpler language with a bit more typing or do you want a more expressive language but also more",
    "start": "1702080",
    "end": "1707440"
  },
  {
    "text": "complex language and again i think that uh my impression is that elixir has like a",
    "start": "1707440",
    "end": "1712559"
  },
  {
    "text": "slightly better story in tooling in documentation maybe support for uh tests and so on yeah i think you're",
    "start": "1712559",
    "end": "1719919"
  },
  {
    "text": "absolutely right there and that that was a bit of a weakness in the community and i think that the whole elixir team with jose and the",
    "start": "1719919",
    "end": "1726960"
  },
  {
    "text": "others have have you know moved the community forwards as a whole and now the whole beam community can can benefit",
    "start": "1726960",
    "end": "1733600"
  },
  {
    "text": "from it so i think that's just awesome work done there take away number five",
    "start": "1733600",
    "end": "1738720"
  },
  {
    "text": "alexia is focused on being approachable and making developers productive",
    "start": "1738720",
    "end": "1744799"
  },
  {
    "start": "1749000",
    "end": "1821000"
  },
  {
    "text": "speaking a bit about your book i i think it's really cool and i love your your t-shirt so um what kind of",
    "start": "1749679",
    "end": "1757360"
  },
  {
    "text": "person did you have in mind when when writing it um yeah that's that's a very good",
    "start": "1757360",
    "end": "1762399"
  },
  {
    "text": "question uh thank you for giving a chance to clarify that uh so elixir in action is i personally",
    "start": "1762399",
    "end": "1768480"
  },
  {
    "text": "advertise it as it's an introductional introductory book to alex here uh but not for non-programmers so it's not",
    "start": "1768480",
    "end": "1775279"
  },
  {
    "text": "introduction to programming i actually expect expect a programmer who is has some experience",
    "start": "1775279",
    "end": "1781200"
  },
  {
    "text": "in other languages not related to beam at all uh you know such as ruby c sharp java",
    "start": "1781200",
    "end": "1787039"
  },
  {
    "text": "javascript whatever you know python and so on um preferably on the server side of things you know for at least i",
    "start": "1787039",
    "end": "1793360"
  },
  {
    "text": "would say a year or two so uh the reader should be familiar with what it feels like to write a web server",
    "start": "1793360",
    "end": "1799600"
  },
  {
    "text": "a web facing system the way i like to call it um other than that of course they don't have to know anything about",
    "start": "1799600",
    "end": "1805760"
  },
  {
    "text": "uh about beam or orlando or elixir at all yeah take away number six the readers",
    "start": "1805760",
    "end": "1812480"
  },
  {
    "text": "should be familiar with what's happening inside a web server",
    "start": "1812480",
    "end": "1822240"
  },
  {
    "start": "1821000",
    "end": "2060000"
  },
  {
    "text": "nowadays there there are quite a few books on on elixir out there on the market so what would you say is is unique with",
    "start": "1822240",
    "end": "1829840"
  },
  {
    "text": "with alex here in action uh yeah i actually you know up until a few years ago i read",
    "start": "1829840",
    "end": "1836080"
  },
  {
    "text": "all of books written on alex here uh these days you know that there are like already so many that i know i find hard",
    "start": "1836080",
    "end": "1841600"
  },
  {
    "text": "to catch up uh my personal impression is uh obviously no one partial to my book but",
    "start": "1841600",
    "end": "1846960"
  },
  {
    "text": "that my personal impression is that all of these books are great books and that mostly they complement each other so in",
    "start": "1846960",
    "end": "1853840"
  },
  {
    "text": "particular uh for elixir in action uh i wrote it with the focus again",
    "start": "1853840",
    "end": "1859919"
  },
  {
    "text": "remember i said there are like two dimensions of elixir so functional and concurrent my focus was on the concurrent aspect of",
    "start": "1859919",
    "end": "1866320"
  },
  {
    "text": "elixir because this is where i find uh that any beam language really shines the most",
    "start": "1866320",
    "end": "1871360"
  },
  {
    "text": "this is what's uh what they bring significance to the table compared to anything else available",
    "start": "1871360",
    "end": "1876799"
  },
  {
    "text": "out there i'm not saying that functional is somehow boring or anything but this is the the stuff that i kind of",
    "start": "1876799",
    "end": "1883440"
  },
  {
    "text": "treat it more as a nuisance uh so that's uh one thing about elixir reaction you know it starts very",
    "start": "1883440",
    "end": "1889360"
  },
  {
    "text": "uneventfully very like the first part of the book uh those are the first of",
    "start": "1889360",
    "end": "1894960"
  },
  {
    "text": "four chapters uh they basically deal with functional programming and the type",
    "start": "1894960",
    "end": "1900240"
  },
  {
    "text": "system and it's more like you have this and you have that and you have that so you kind of have to survive through",
    "start": "1900240",
    "end": "1905919"
  },
  {
    "text": "this first third but then the the second and the third third uh so the second part and the third part",
    "start": "1905919",
    "end": "1911440"
  },
  {
    "text": "they are uh focused on concurrency how to think concurrently in beam and uh how to use it properly and how to use",
    "start": "1911440",
    "end": "1920159"
  },
  {
    "text": "the higher level abstraction from the beam standpoint or from the those languages like otp uh how to use",
    "start": "1920159",
    "end": "1926720"
  },
  {
    "text": "those things properly and what i really like about those chapters is that they they're sort of modeled through my own",
    "start": "1926720",
    "end": "1933120"
  },
  {
    "text": "experience you know like when i was working with erlang for i started using girling in 2010 and back then",
    "start": "1933120",
    "end": "1940480"
  },
  {
    "text": "there wasn't even the famous book learning summer lang and there were a couple of books i learned from joe's book for example",
    "start": "1940480",
    "end": "1946240"
  },
  {
    "text": "but it wasn't completely clear to me how should i do things you know so i made many mistakes and in a sense this is replicated in a",
    "start": "1946240",
    "end": "1952720"
  },
  {
    "text": "book uh so it doesn't you know just guide you in a straight line from point a to point b",
    "start": "1952720",
    "end": "1958000"
  },
  {
    "text": "but it does more of like a zigzag you know i do some things wrong deliberately so like you start in a",
    "start": "1958000",
    "end": "1964480"
  },
  {
    "text": "with one chapter and you're gonna start with something learn some new techniques and build some implementation and you're",
    "start": "1964480",
    "end": "1969919"
  },
  {
    "text": "gonna feel good about yourself and then in the beginning of the next chapter i'm gonna explain why this implementation is wrong",
    "start": "1969919",
    "end": "1975679"
  },
  {
    "text": "you know and then we're going to learn something new and then we're going to improve it and then in the next chapter you're going to learn",
    "start": "1975679",
    "end": "1981760"
  },
  {
    "text": "that this is wrong too uh so but i never let you fall very far you know go straight very far but i believe that",
    "start": "1981760",
    "end": "1989440"
  },
  {
    "text": "in this sense you know my goal was to not explain not only uh how you should do something but also why",
    "start": "1989440",
    "end": "1995760"
  },
  {
    "text": "you should do something because this is what i found at the time liking uh in beam literature you know people will",
    "start": "1995760",
    "end": "2001679"
  },
  {
    "text": "tell you like you should do it like this and no explanation at all why and so uh i made some mistakes which i've seen",
    "start": "2001679",
    "end": "2008640"
  },
  {
    "text": "on i mean on forums and other exchange sites that people also tend to make when when they don't know this and this",
    "start": "2008640",
    "end": "2014159"
  },
  {
    "text": "is where i personally find uh the book uh like for me at least you know uh most helpful and in essence i wrote",
    "start": "2014159",
    "end": "2021279"
  },
  {
    "text": "this book uh the way i would want to have it you know if i if i didn't write it in so",
    "start": "2021279",
    "end": "2026320"
  },
  {
    "text": "something that i was found find missing myself now i really love that approach i mean",
    "start": "2026320",
    "end": "2031840"
  },
  {
    "text": "it's fantastic way of teaching because that's the way you learn in reality right it's it's never this straight path it's",
    "start": "2031840",
    "end": "2038880"
  },
  {
    "text": "always you know one step forward a half step back and two step forward and so on and so forth so so",
    "start": "2038880",
    "end": "2044559"
  },
  {
    "text": "having that approach when writing a book is is really awesome takeaway number seven the book focuses",
    "start": "2044559",
    "end": "2051118"
  },
  {
    "text": "on teaching not only how but also why you should do something in concur in the",
    "start": "2051119",
    "end": "2057919"
  },
  {
    "text": "lecture thinking about you know being being a writer myself um i'm curious to what kind of feedback you",
    "start": "2058839",
    "end": "2065440"
  },
  {
    "start": "2060000",
    "end": "2152000"
  },
  {
    "text": "you got on the book and what what kind of feedback was most surprising to you because i mean you said that you wrote it",
    "start": "2065440",
    "end": "2070960"
  },
  {
    "text": "like you would have liked it right so what kind of feedback and surprising feedback did you receive uh",
    "start": "2070960",
    "end": "2077520"
  },
  {
    "text": "so far yeah well i mean the book so this is now the second edition uh if i remember correctly the first",
    "start": "2077520",
    "end": "2083440"
  },
  {
    "text": "edition was released in 2015 so it's been like now uh five years or so yeah i got to say",
    "start": "2083440",
    "end": "2090960"
  },
  {
    "text": "that i was surprised first and foremost i was surprised that they got any feedback uh so uh you know it was the first and",
    "start": "2090960",
    "end": "2097839"
  },
  {
    "text": "the only book i ever wrote and i wasn't really famous or anything before that",
    "start": "2097839",
    "end": "2102960"
  },
  {
    "text": "so there were more famous authors writing on elixir and i really you know didn't expect that",
    "start": "2102960",
    "end": "2109839"
  },
  {
    "text": "anyone would even read the book except for myself and my uh family but yeah it was actually turned",
    "start": "2109839",
    "end": "2116079"
  },
  {
    "text": "out like a pretty pretty nice surprise that people actually read it and i got a very good feedback and it feels like the",
    "start": "2116079",
    "end": "2121760"
  },
  {
    "text": "book has grown sort of organically you know so i see people recommending it and sometimes i get",
    "start": "2121760",
    "end": "2128720"
  },
  {
    "text": "unsolicited feedback and it's just someone you know contacts me on whatever channel and say you know",
    "start": "2128720",
    "end": "2134400"
  },
  {
    "text": "hey i read your book and it's uh it's a really good book thank you for writing it and this for me is is like the best reward that you can",
    "start": "2134400",
    "end": "2141839"
  },
  {
    "text": "get from a book you know when you're not fishing for a review or anything you know someone approaches you and just said you know i read your book",
    "start": "2141839",
    "end": "2147119"
  },
  {
    "text": "and it's uh i really enjoyed it it really helped me",
    "start": "2147119",
    "end": "2151680"
  },
  {
    "start": "2152000",
    "end": "2244000"
  },
  {
    "text": "subscribe to the go to youtube channel now for ad-free videos released almost daily and join the experts in person or",
    "start": "2153839",
    "end": "2160560"
  },
  {
    "text": "online at any upcoming go to conference using the promo code book club visit gotopia.tech to learn",
    "start": "2160560",
    "end": "2168890"
  },
  {
    "text": "[Music] more",
    "start": "2168890",
    "end": "2173839"
  },
  {
    "text": "[Music]",
    "start": "2174890",
    "end": "2232630"
  },
  {
    "text": "[Music]",
    "start": "2237030",
    "end": "2240089"
  },
  {
    "text": "you",
    "start": "2243760",
    "end": "2245839"
  }
]