[
  {
    "start": "0",
    "end": "51000"
  },
  {
    "text": "[Music]",
    "start": "970",
    "end": "7838"
  },
  {
    "text": "hello everyone and welcome to beautiful",
    "start": "16800",
    "end": "18720"
  },
  {
    "text": "graphql with kathleen",
    "start": "18720",
    "end": "20800"
  },
  {
    "text": "i'm darius gutz and in the next 18",
    "start": "20800",
    "end": "22560"
  },
  {
    "text": "minutes i'll show you how easy it is to",
    "start": "22560",
    "end": "24720"
  },
  {
    "text": "build the reactive graphql web server",
    "start": "24720",
    "end": "26960"
  },
  {
    "text": "with kathleen i work at expedia group",
    "start": "26960",
    "end": "30800"
  },
  {
    "text": "which is a leading travel platform",
    "start": "30800",
    "end": "32880"
  },
  {
    "text": "and consists of a number of companies",
    "start": "32880",
    "end": "34960"
  },
  {
    "text": "besides expedia",
    "start": "34960",
    "end": "36480"
  },
  {
    "text": "such as verbal hotels.com orbits",
    "start": "36480",
    "end": "39360"
  },
  {
    "text": "travelocity",
    "start": "39360",
    "end": "40399"
  },
  {
    "text": "and more i've been building graphql apis",
    "start": "40399",
    "end": "43520"
  },
  {
    "text": "for the last",
    "start": "43520",
    "end": "44000"
  },
  {
    "text": "two years and today i'm going to demo",
    "start": "44000",
    "end": "46320"
  },
  {
    "text": "some of the libraries that were open",
    "start": "46320",
    "end": "47920"
  },
  {
    "text": "sourced as part of this effort",
    "start": "47920",
    "end": "51120"
  },
  {
    "start": "51000",
    "end": "82000"
  },
  {
    "text": "but before we jump to the demo let's",
    "start": "51120",
    "end": "53120"
  },
  {
    "text": "take a quick refresher on some of the",
    "start": "53120",
    "end": "54879"
  },
  {
    "text": "technologies that we will be using today",
    "start": "54879",
    "end": "58079"
  },
  {
    "text": "as the doc title implies we will be",
    "start": "58079",
    "end": "60480"
  },
  {
    "text": "using spring and spring boot libraries",
    "start": "60480",
    "end": "63039"
  },
  {
    "text": "spring boot is a set of libraries that",
    "start": "63039",
    "end": "64878"
  },
  {
    "text": "aim to simplify",
    "start": "64879",
    "end": "66400"
  },
  {
    "text": "and bootstrap your application",
    "start": "66400",
    "end": "67680"
  },
  {
    "text": "development process by",
    "start": "67680",
    "end": "69439"
  },
  {
    "text": "automatically configuring application",
    "start": "69439",
    "end": "71360"
  },
  {
    "text": "environment with some",
    "start": "71360",
    "end": "72720"
  },
  {
    "text": "predefined defaults it helps you",
    "start": "72720",
    "end": "75680"
  },
  {
    "text": "eliminate a lot of boilerplate code",
    "start": "75680",
    "end": "77759"
  },
  {
    "text": "and allows you to focus on writing your",
    "start": "77759",
    "end": "79600"
  },
  {
    "text": "business logic instead",
    "start": "79600",
    "end": "82880"
  },
  {
    "start": "82000",
    "end": "111000"
  },
  {
    "text": "today we're also going to be using",
    "start": "82880",
    "end": "84479"
  },
  {
    "text": "graphql which is a query language for",
    "start": "84479",
    "end": "86880"
  },
  {
    "text": "your apis",
    "start": "86880",
    "end": "88479"
  },
  {
    "text": "it is a specification that defines how",
    "start": "88479",
    "end": "90400"
  },
  {
    "text": "to expose your data",
    "start": "90400",
    "end": "91680"
  },
  {
    "text": "in a format that is easily discoverable",
    "start": "91680",
    "end": "94079"
  },
  {
    "text": "and also allows your clients to",
    "start": "94079",
    "end": "95439"
  },
  {
    "text": "explicitly ask",
    "start": "95439",
    "end": "96880"
  },
  {
    "text": "only for the data they need graphql is",
    "start": "96880",
    "end": "100479"
  },
  {
    "text": "not",
    "start": "100479",
    "end": "100799"
  },
  {
    "text": "tied to any specific database or storage",
    "start": "100799",
    "end": "103360"
  },
  {
    "text": "engine",
    "start": "103360",
    "end": "104159"
  },
  {
    "text": "it is up to the developers to decide",
    "start": "104159",
    "end": "106079"
  },
  {
    "text": "what data to expose",
    "start": "106079",
    "end": "107439"
  },
  {
    "text": "and where to get their data from",
    "start": "107439",
    "end": "111119"
  },
  {
    "start": "111000",
    "end": "171000"
  },
  {
    "text": "this finally brings us to kathleen",
    "start": "111280",
    "end": "114479"
  },
  {
    "text": "kotlin is a great programming language",
    "start": "114479",
    "end": "116799"
  },
  {
    "text": "that has a number of features",
    "start": "116799",
    "end": "118560"
  },
  {
    "text": "that make it a pleasure to work with but",
    "start": "118560",
    "end": "121200"
  },
  {
    "text": "why choose kotlin to develop your",
    "start": "121200",
    "end": "122880"
  },
  {
    "text": "graphql apis",
    "start": "122880",
    "end": "125840"
  },
  {
    "text": "first of all it is strongly typed in",
    "start": "125840",
    "end": "127840"
  },
  {
    "text": "nullar",
    "start": "127840",
    "end": "128959"
  },
  {
    "text": "this allows us to build our coffin data",
    "start": "128959",
    "end": "131280"
  },
  {
    "text": "model that is going to exactly match",
    "start": "131280",
    "end": "133120"
  },
  {
    "text": "corresponding graphql schema",
    "start": "133120",
    "end": "134879"
  },
  {
    "text": "without the need for any third-party",
    "start": "134879",
    "end": "136640"
  },
  {
    "text": "libraries",
    "start": "136640",
    "end": "138400"
  },
  {
    "text": "additionally thanks to full java interop",
    "start": "138400",
    "end": "141120"
  },
  {
    "text": "we can use any of the existing libraries",
    "start": "141120",
    "end": "142959"
  },
  {
    "text": "from the jvm ecosystem",
    "start": "142959",
    "end": "145200"
  },
  {
    "text": "this was extremely important to us at",
    "start": "145200",
    "end": "147040"
  },
  {
    "text": "expedia's over the years we built a",
    "start": "147040",
    "end": "148879"
  },
  {
    "text": "number of java libraries",
    "start": "148879",
    "end": "150640"
  },
  {
    "text": "so being able to continue to use them",
    "start": "150640",
    "end": "152400"
  },
  {
    "text": "without the need for rewrite was a must",
    "start": "152400",
    "end": "155920"
  },
  {
    "text": "and last but not least well",
    "start": "155920",
    "end": "157519"
  },
  {
    "text": "core teams are awesome they allow you to",
    "start": "157519",
    "end": "160239"
  },
  {
    "text": "write a synchronous code",
    "start": "160239",
    "end": "161519"
  },
  {
    "text": "an imperative way that is easier to",
    "start": "161519",
    "end": "163760"
  },
  {
    "text": "understand and reason about",
    "start": "163760",
    "end": "165519"
  },
  {
    "text": "which leads to more maintainable code",
    "start": "165519",
    "end": "171040"
  },
  {
    "start": "171000",
    "end": "214000"
  },
  {
    "text": "once you combine all of those together",
    "start": "171040",
    "end": "173120"
  },
  {
    "text": "we end up with graphql kotlin",
    "start": "173120",
    "end": "175120"
  },
  {
    "text": "which is a set of libraries that we",
    "start": "175120",
    "end": "176800"
  },
  {
    "text": "created to streamline development of",
    "start": "176800",
    "end": "178560"
  },
  {
    "text": "graphql services",
    "start": "178560",
    "end": "180720"
  },
  {
    "text": "today we're going to be using graphql",
    "start": "180720",
    "end": "182640"
  },
  {
    "text": "kathleen schema generator",
    "start": "182640",
    "end": "184239"
  },
  {
    "text": "which uses reflections to generate your",
    "start": "184239",
    "end": "186000"
  },
  {
    "text": "schema directly from your source code",
    "start": "186000",
    "end": "188480"
  },
  {
    "text": "this makes your code single source of",
    "start": "188480",
    "end": "190319"
  },
  {
    "text": "truth for defining the shape of the",
    "start": "190319",
    "end": "191840"
  },
  {
    "text": "schema",
    "start": "191840",
    "end": "192560"
  },
  {
    "text": "and makes your developer experience",
    "start": "192560",
    "end": "194159"
  },
  {
    "text": "similar to writing traditional rest",
    "start": "194159",
    "end": "195840"
  },
  {
    "text": "services",
    "start": "195840",
    "end": "197680"
  },
  {
    "text": "since we will be creating a reactive",
    "start": "197680",
    "end": "199440"
  },
  {
    "text": "graphql server",
    "start": "199440",
    "end": "200720"
  },
  {
    "text": "we also will be using graphql kotlin",
    "start": "200720",
    "end": "203440"
  },
  {
    "text": "spring server",
    "start": "203440",
    "end": "204560"
  },
  {
    "text": "which is our spring boot auto",
    "start": "204560",
    "end": "205920"
  },
  {
    "text": "configuration library that automatically",
    "start": "205920",
    "end": "208319"
  },
  {
    "text": "configures all the necessary beans to",
    "start": "208319",
    "end": "210159"
  },
  {
    "text": "start up a reactive graphql server",
    "start": "210159",
    "end": "213360"
  },
  {
    "text": "and without further ado let's move on to",
    "start": "213360",
    "end": "215840"
  },
  {
    "start": "214000",
    "end": "1077000"
  },
  {
    "text": "the demo",
    "start": "215840",
    "end": "218319"
  },
  {
    "text": "i already pre-loaded my sample project",
    "start": "220799",
    "end": "223599"
  },
  {
    "text": "in my ide to save some time",
    "start": "223599",
    "end": "225040"
  },
  {
    "text": "but this is a default spring boot",
    "start": "225040",
    "end": "226720"
  },
  {
    "text": "application that you can generate from",
    "start": "226720",
    "end": "228360"
  },
  {
    "text": "star.spring.io",
    "start": "228360",
    "end": "229840"
  },
  {
    "text": "using latest springboot 2.2 and kotlin",
    "start": "229840",
    "end": "232959"
  },
  {
    "text": "as a",
    "start": "232959",
    "end": "233599"
  },
  {
    "text": "language i chose gradle for a build",
    "start": "233599",
    "end": "235680"
  },
  {
    "text": "system but um you can use maven as well",
    "start": "235680",
    "end": "238080"
  },
  {
    "text": "the only difference between the default",
    "start": "238080",
    "end": "240720"
  },
  {
    "text": "generator project in my",
    "start": "240720",
    "end": "242480"
  },
  {
    "text": "current one is this extra dependency",
    "start": "242480",
    "end": "244400"
  },
  {
    "text": "here on graphql kotlin spring stroke",
    "start": "244400",
    "end": "248159"
  },
  {
    "text": "before we run it we also need to",
    "start": "248159",
    "end": "250319"
  },
  {
    "text": "configure one extra property",
    "start": "250319",
    "end": "252560"
  },
  {
    "text": "as i mentioned before we are using",
    "start": "252560",
    "end": "253920"
  },
  {
    "text": "reflection to generate our schemas from",
    "start": "253920",
    "end": "255599"
  },
  {
    "text": "a source code",
    "start": "255599",
    "end": "256720"
  },
  {
    "text": "so in order to limit the amount of",
    "start": "256720",
    "end": "258880"
  },
  {
    "text": "classes that we need to scan",
    "start": "258880",
    "end": "260239"
  },
  {
    "text": "and also to prevent accidental leakage",
    "start": "260239",
    "end": "262800"
  },
  {
    "text": "of some of the classes that should not",
    "start": "262800",
    "end": "264160"
  },
  {
    "text": "be exposed as part of the schema",
    "start": "264160",
    "end": "265680"
  },
  {
    "text": "we have to white list the supported",
    "start": "265680",
    "end": "267680"
  },
  {
    "text": "packages so in our case",
    "start": "267680",
    "end": "268960"
  },
  {
    "text": "common example beautiful",
    "start": "268960",
    "end": "272319"
  },
  {
    "text": "so now let's create our first graphical",
    "start": "273280",
    "end": "275520"
  },
  {
    "text": "query",
    "start": "275520",
    "end": "276320"
  },
  {
    "text": "let's create a conference query class",
    "start": "276320",
    "end": "279600"
  },
  {
    "text": "that will",
    "start": "279600",
    "end": "280080"
  },
  {
    "text": "act as a wrapper for all queries and in",
    "start": "280080",
    "end": "282800"
  },
  {
    "text": "traditional resumes apis what we would",
    "start": "282800",
    "end": "284639"
  },
  {
    "text": "do is you would expose this as some",
    "start": "284639",
    "end": "286800"
  },
  {
    "text": "rest controller and then annotate its",
    "start": "286800",
    "end": "288960"
  },
  {
    "text": "method with some",
    "start": "288960",
    "end": "289840"
  },
  {
    "text": "get or post mapping to expose them as an",
    "start": "289840",
    "end": "292320"
  },
  {
    "text": "input right",
    "start": "292320",
    "end": "293440"
  },
  {
    "text": "here we already have our graphql",
    "start": "293440",
    "end": "294960"
  },
  {
    "text": "endpoint configured for us so all what",
    "start": "294960",
    "end": "296639"
  },
  {
    "text": "we need to do",
    "start": "296639",
    "end": "297280"
  },
  {
    "text": "is to make sure that this beam is",
    "start": "297280",
    "end": "299360"
  },
  {
    "text": "available in application context so just",
    "start": "299360",
    "end": "300960"
  },
  {
    "text": "mark it as a component",
    "start": "300960",
    "end": "302639"
  },
  {
    "text": "and i implement one of the marker",
    "start": "302639",
    "end": "304160"
  },
  {
    "text": "interfaces that tells us",
    "start": "304160",
    "end": "305840"
  },
  {
    "text": "what sort of operation we're going to be",
    "start": "305840",
    "end": "307919"
  },
  {
    "text": "building out",
    "start": "307919",
    "end": "308960"
  },
  {
    "text": "so we got a marker interface for query",
    "start": "308960",
    "end": "311440"
  },
  {
    "text": "mutation and subscription",
    "start": "311440",
    "end": "313039"
  },
  {
    "text": "and we use those uh interfaces to easily",
    "start": "313039",
    "end": "315600"
  },
  {
    "text": "identify",
    "start": "315600",
    "end": "316639"
  },
  {
    "text": "your graphical beans so we know which",
    "start": "316639",
    "end": "318720"
  },
  {
    "text": "ones we need to process to generate your",
    "start": "318720",
    "end": "320479"
  },
  {
    "text": "data model from",
    "start": "320479",
    "end": "322000"
  },
  {
    "text": "with this let's generate our first data",
    "start": "322000",
    "end": "324160"
  },
  {
    "text": "class",
    "start": "324160",
    "end": "325039"
  },
  {
    "text": "conference that has a name and location",
    "start": "325039",
    "end": "327680"
  },
  {
    "text": "and you can see that the location is",
    "start": "327680",
    "end": "329280"
  },
  {
    "text": "actually a nullable string",
    "start": "329280",
    "end": "330639"
  },
  {
    "text": "so this let's write our first query",
    "start": "330639",
    "end": "332960"
  },
  {
    "text": "conference query returns as a conference",
    "start": "332960",
    "end": "335280"
  },
  {
    "text": "object",
    "start": "335280",
    "end": "336160"
  },
  {
    "text": "that has a name go to chicago",
    "start": "336160",
    "end": "340240"
  },
  {
    "text": "and location is virtual",
    "start": "340240",
    "end": "344160"
  },
  {
    "text": "with this let's start up our server",
    "start": "344160",
    "end": "347360"
  },
  {
    "text": "you'll notice that the schema is",
    "start": "347360",
    "end": "349280"
  },
  {
    "text": "actually printed out",
    "start": "349280",
    "end": "350479"
  },
  {
    "text": "during the startup so you can right away",
    "start": "350479",
    "end": "353199"
  },
  {
    "text": "verify that your data model is correct",
    "start": "353199",
    "end": "355280"
  },
  {
    "text": "and the type conference that was",
    "start": "355280",
    "end": "356639"
  },
  {
    "text": "generated matches exactly your data",
    "start": "356639",
    "end": "358400"
  },
  {
    "text": "class definition",
    "start": "358400",
    "end": "360720"
  },
  {
    "text": "the easiest way to interact with uh your",
    "start": "360720",
    "end": "363039"
  },
  {
    "text": "graphql schema is actually through the",
    "start": "363039",
    "end": "364840"
  },
  {
    "text": "bundled graphql playground from",
    "start": "364840",
    "end": "367120"
  },
  {
    "text": "prismalabs",
    "start": "367120",
    "end": "368240"
  },
  {
    "text": "this in-browser id allows you to write",
    "start": "368240",
    "end": "370479"
  },
  {
    "text": "your queries directly in the browser",
    "start": "370479",
    "end": "372000"
  },
  {
    "text": "execute them and see the results as well",
    "start": "372000",
    "end": "375280"
  },
  {
    "text": "well browser schema right so if i open",
    "start": "375280",
    "end": "377199"
  },
  {
    "text": "up the docs here i can see that",
    "start": "377199",
    "end": "379199"
  },
  {
    "text": "i get a conference query that returns a",
    "start": "379199",
    "end": "381199"
  },
  {
    "text": "conference object that is not",
    "start": "381199",
    "end": "383360"
  },
  {
    "text": "null and the type conference has a",
    "start": "383360",
    "end": "386639"
  },
  {
    "text": "location and a name",
    "start": "386639",
    "end": "388240"
  },
  {
    "text": "associated so now let's write our first",
    "start": "388240",
    "end": "391680"
  },
  {
    "text": "query",
    "start": "391680",
    "end": "392400"
  },
  {
    "text": "if i start typing you'll notice that uh",
    "start": "392400",
    "end": "395360"
  },
  {
    "text": "playground also gives us arm to",
    "start": "395360",
    "end": "396880"
  },
  {
    "text": "completion and also a validation",
    "start": "396880",
    "end": "399199"
  },
  {
    "text": "so if i try to select just the",
    "start": "399199",
    "end": "400880"
  },
  {
    "text": "conference well this is a complex type i",
    "start": "400880",
    "end": "403600"
  },
  {
    "text": "need to select some of the fields",
    "start": "403600",
    "end": "405600"
  },
  {
    "text": "before i can run it so if i select name",
    "start": "405600",
    "end": "409840"
  },
  {
    "text": "if i run it and my response back is a",
    "start": "409840",
    "end": "412319"
  },
  {
    "text": "conference and name go to chicago",
    "start": "412319",
    "end": "414800"
  },
  {
    "text": "if i additionally select a location",
    "start": "414800",
    "end": "418160"
  },
  {
    "text": "i got my result back with the name and",
    "start": "418160",
    "end": "420840"
  },
  {
    "text": "location",
    "start": "420840",
    "end": "423840"
  },
  {
    "text": "so while we can try to make our schema",
    "start": "424160",
    "end": "426479"
  },
  {
    "text": "as descriptive as possible",
    "start": "426479",
    "end": "428319"
  },
  {
    "text": "well the names only get you that far for",
    "start": "428319",
    "end": "431280"
  },
  {
    "text": "the most part you will have to provide",
    "start": "431280",
    "end": "432639"
  },
  {
    "text": "some additional documentation to some",
    "start": "432639",
    "end": "434960"
  },
  {
    "text": "graphql accounts unfortunately we cannot",
    "start": "434960",
    "end": "437360"
  },
  {
    "text": "use javadocs",
    "start": "437360",
    "end": "438479"
  },
  {
    "text": "because they're not available at runtime",
    "start": "438479",
    "end": "440479"
  },
  {
    "text": "but we can use the next best",
    "start": "440479",
    "end": "442080"
  },
  {
    "text": "thing which is the graphql description",
    "start": "442080",
    "end": "446000"
  },
  {
    "text": "so now we can specify something like",
    "start": "446000",
    "end": "447840"
  },
  {
    "text": "this is my super",
    "start": "447840",
    "end": "450160"
  },
  {
    "text": "awesome",
    "start": "450160",
    "end": "452639"
  },
  {
    "text": "conference name and you can see i'm",
    "start": "453599",
    "end": "456639"
  },
  {
    "text": "using a",
    "start": "456639",
    "end": "457280"
  },
  {
    "text": "markdown syntax here to provide some",
    "start": "457280",
    "end": "459360"
  },
  {
    "text": "extra formatting",
    "start": "459360",
    "end": "461039"
  },
  {
    "text": "the graphical descriptions can also be",
    "start": "461039",
    "end": "463360"
  },
  {
    "text": "multi-line strings so you can provide as",
    "start": "463360",
    "end": "465039"
  },
  {
    "text": "much details as possible",
    "start": "465039",
    "end": "467520"
  },
  {
    "text": "additionally when you are working on",
    "start": "467520",
    "end": "469520"
  },
  {
    "text": "your graphql schemas well they will be",
    "start": "469520",
    "end": "471599"
  },
  {
    "text": "evolving over time so adding new fields",
    "start": "471599",
    "end": "474720"
  },
  {
    "text": "to it well it's a backwards compatible",
    "start": "474720",
    "end": "476479"
  },
  {
    "text": "change so you can easily do that",
    "start": "476479",
    "end": "478720"
  },
  {
    "text": "but if you're trying to remove some of",
    "start": "478720",
    "end": "480639"
  },
  {
    "text": "the fields well someone might be using",
    "start": "480639",
    "end": "482400"
  },
  {
    "text": "it",
    "start": "482400",
    "end": "482720"
  },
  {
    "text": "and you may end up breaking them right",
    "start": "482720",
    "end": "485120"
  },
  {
    "text": "so before we do so",
    "start": "485120",
    "end": "486800"
  },
  {
    "text": "let's let the client know that this",
    "start": "486800",
    "end": "489039"
  },
  {
    "text": "field is actually deprecated this is a",
    "start": "489039",
    "end": "491360"
  },
  {
    "text": "built in the deprecated annotation you",
    "start": "491360",
    "end": "493599"
  },
  {
    "text": "can provide a reason that this is",
    "start": "493599",
    "end": "495440"
  },
  {
    "text": "not needed anymore so now",
    "start": "495440",
    "end": "499039"
  },
  {
    "text": "if i restart my application",
    "start": "499039",
    "end": "507039"
  },
  {
    "text": "and let's reload playground as well",
    "start": "507039",
    "end": "510080"
  },
  {
    "text": "you'll notice that the id itself already",
    "start": "510080",
    "end": "512640"
  },
  {
    "text": "highlights that the location",
    "start": "512640",
    "end": "514560"
  },
  {
    "text": "is actually a deprecated field and it's",
    "start": "514560",
    "end": "516399"
  },
  {
    "text": "not needed anymore",
    "start": "516399",
    "end": "517760"
  },
  {
    "text": "if we open up a documentation here",
    "start": "517760",
    "end": "520240"
  },
  {
    "text": "you'll notice that",
    "start": "520240",
    "end": "521440"
  },
  {
    "text": "again the deprecation information is on",
    "start": "521440",
    "end": "523440"
  },
  {
    "text": "top of the field",
    "start": "523440",
    "end": "524880"
  },
  {
    "text": "and if we drill down into the name field",
    "start": "524880",
    "end": "527839"
  },
  {
    "text": "we get the super awesome conference name",
    "start": "527839",
    "end": "529920"
  },
  {
    "text": "description as well with the",
    "start": "529920",
    "end": "531440"
  },
  {
    "text": "markdown formatting applied to",
    "start": "531440",
    "end": "534640"
  },
  {
    "text": "this deprecation information actually",
    "start": "534640",
    "end": "536399"
  },
  {
    "text": "since it's available to the clients",
    "start": "536399",
    "end": "538240"
  },
  {
    "text": "can be used during a build time to",
    "start": "538240",
    "end": "540080"
  },
  {
    "text": "actually verify",
    "start": "540080",
    "end": "541680"
  },
  {
    "text": "that their queries not are not using",
    "start": "541680",
    "end": "543519"
  },
  {
    "text": "anything that's deprecated and can fail",
    "start": "543519",
    "end": "545440"
  },
  {
    "text": "the build if they do",
    "start": "545440",
    "end": "547600"
  },
  {
    "text": "additionally since we are actually",
    "start": "547600",
    "end": "550480"
  },
  {
    "text": "running a graphql server we",
    "start": "550480",
    "end": "552000"
  },
  {
    "text": "also know if anyone's actually asking",
    "start": "552000",
    "end": "554160"
  },
  {
    "text": "for any of those deprecated fields right",
    "start": "554160",
    "end": "555839"
  },
  {
    "text": "so if no one is asking for a location",
    "start": "555839",
    "end": "558800"
  },
  {
    "text": "we know that it's actually safe to",
    "start": "558800",
    "end": "560160"
  },
  {
    "text": "remove as well",
    "start": "560160",
    "end": "562800"
  },
  {
    "text": "so now let's move on to a slightly more",
    "start": "562800",
    "end": "564800"
  },
  {
    "text": "uh complex topic of polymorphism",
    "start": "564800",
    "end": "567920"
  },
  {
    "text": "require supports poromorphism to the",
    "start": "567920",
    "end": "571040"
  },
  {
    "text": "means of interfaces and unions and",
    "start": "571040",
    "end": "573279"
  },
  {
    "text": "the difference between them is that",
    "start": "573279",
    "end": "575200"
  },
  {
    "text": "interfaces",
    "start": "575200",
    "end": "576399"
  },
  {
    "text": "share some common fields between the",
    "start": "576399",
    "end": "578320"
  },
  {
    "text": "objects and the unions",
    "start": "578320",
    "end": "580320"
  },
  {
    "text": "or their collection of arbitrary objects",
    "start": "580320",
    "end": "582560"
  },
  {
    "text": "so in kotlin we can create an interface",
    "start": "582560",
    "end": "584959"
  },
  {
    "text": "called people that has a common field",
    "start": "584959",
    "end": "587360"
  },
  {
    "text": "name",
    "start": "587360",
    "end": "588320"
  },
  {
    "text": "and then we have two implementations",
    "start": "588320",
    "end": "590080"
  },
  {
    "text": "here one is a speaker",
    "start": "590080",
    "end": "591760"
  },
  {
    "text": "that has a list of talks and the other",
    "start": "591760",
    "end": "593680"
  },
  {
    "text": "one is an attendee that has a ticket",
    "start": "593680",
    "end": "595600"
  },
  {
    "text": "type",
    "start": "595600",
    "end": "596240"
  },
  {
    "text": "associated ticket type is an enum that",
    "start": "596240",
    "end": "598640"
  },
  {
    "text": "has one of those three values",
    "start": "598640",
    "end": "600800"
  },
  {
    "text": "so now let's write a query that returns",
    "start": "600800",
    "end": "603279"
  },
  {
    "text": "a list of",
    "start": "603279",
    "end": "604079"
  },
  {
    "text": "people so it's a list that contains both",
    "start": "604079",
    "end": "606640"
  },
  {
    "text": "a speaker and an attendee",
    "start": "606640",
    "end": "608320"
  },
  {
    "text": "and let's see how it looks like from the",
    "start": "608320",
    "end": "611120"
  },
  {
    "text": "graphql",
    "start": "611120",
    "end": "612160"
  },
  {
    "text": "perspective so let's restart our",
    "start": "612160",
    "end": "616319"
  },
  {
    "text": "application and let's",
    "start": "616839",
    "end": "618720"
  },
  {
    "text": "reload our playground so now if we open",
    "start": "618720",
    "end": "621839"
  },
  {
    "text": "up a dock",
    "start": "621839",
    "end": "622720"
  },
  {
    "text": "here we can see that um we've got a new",
    "start": "622720",
    "end": "625200"
  },
  {
    "text": "query called people",
    "start": "625200",
    "end": "626320"
  },
  {
    "text": "that returns a list of people um people",
    "start": "626320",
    "end": "629120"
  },
  {
    "text": "is an interface and we have two known",
    "start": "629120",
    "end": "631040"
  },
  {
    "text": "implementation and one is the speaker",
    "start": "631040",
    "end": "633120"
  },
  {
    "text": "and the other one is intent so now let's",
    "start": "633120",
    "end": "636480"
  },
  {
    "text": "try selecting some data so if i try to",
    "start": "636480",
    "end": "639200"
  },
  {
    "text": "run",
    "start": "639200",
    "end": "639519"
  },
  {
    "text": "people credit here the only field that i",
    "start": "639519",
    "end": "642160"
  },
  {
    "text": "can select",
    "start": "642160",
    "end": "642959"
  },
  {
    "text": "is name i can only select name because",
    "start": "642959",
    "end": "646000"
  },
  {
    "text": "that's the common feel between both",
    "start": "646000",
    "end": "647839"
  },
  {
    "text": "speaker and",
    "start": "647839",
    "end": "649360"
  },
  {
    "text": "attendee so how can i select those",
    "start": "649360",
    "end": "651519"
  },
  {
    "text": "additional",
    "start": "651519",
    "end": "652480"
  },
  {
    "text": "fields from those concrete types well",
    "start": "652480",
    "end": "655680"
  },
  {
    "text": "in graphql we can use what's called",
    "start": "655680",
    "end": "658560"
  },
  {
    "text": "inline fragments to have a special",
    "start": "658560",
    "end": "660560"
  },
  {
    "text": "clauses that tells us",
    "start": "660560",
    "end": "662160"
  },
  {
    "text": "that when i'm selecting a specific type",
    "start": "662160",
    "end": "665600"
  },
  {
    "text": "speaker i can also select the fields",
    "start": "665600",
    "end": "668959"
  },
  {
    "text": "associated with it in this case",
    "start": "668959",
    "end": "670320"
  },
  {
    "text": "dogs on the other hand if i'm selecting",
    "start": "670320",
    "end": "674079"
  },
  {
    "text": "an attendee i want to get a ticket type",
    "start": "674079",
    "end": "677519"
  },
  {
    "text": "as well",
    "start": "677519",
    "end": "678560"
  },
  {
    "text": "so now if i run my query here you can",
    "start": "678560",
    "end": "681760"
  },
  {
    "text": "see i'm getting the",
    "start": "681760",
    "end": "682959"
  },
  {
    "text": "expected results but running the queries",
    "start": "682959",
    "end": "686720"
  },
  {
    "text": "uh simple get parameters right",
    "start": "686720",
    "end": "690240"
  },
  {
    "text": "those well they're pretty simple they",
    "start": "690240",
    "end": "692480"
  },
  {
    "text": "don't get you that far",
    "start": "692480",
    "end": "693680"
  },
  {
    "text": "for the most part you will want to",
    "start": "693680",
    "end": "695279"
  },
  {
    "text": "specify some arguments right",
    "start": "695279",
    "end": "696959"
  },
  {
    "text": "so let's add some um function arguments",
    "start": "696959",
    "end": "700399"
  },
  {
    "text": "to our people that's the",
    "start": "700399",
    "end": "702399"
  },
  {
    "text": "name starts with that is a string",
    "start": "702399",
    "end": "705920"
  },
  {
    "text": "that can be known and let's apply it on",
    "start": "705920",
    "end": "709040"
  },
  {
    "text": "our list so we can do",
    "start": "709040",
    "end": "710079"
  },
  {
    "text": "filter let's filter entries that has a",
    "start": "710079",
    "end": "712399"
  },
  {
    "text": "name that",
    "start": "712399",
    "end": "713360"
  },
  {
    "text": "starts with our name starts with",
    "start": "713360",
    "end": "718240"
  },
  {
    "text": "so now if i restart my graphql server",
    "start": "720800",
    "end": "730240"
  },
  {
    "text": "let's reload our playground",
    "start": "730240",
    "end": "734000"
  },
  {
    "text": "if i rerun my query it works the same",
    "start": "734000",
    "end": "736720"
  },
  {
    "text": "way right we created",
    "start": "736720",
    "end": "738320"
  },
  {
    "text": "uh we had an argument but this argument",
    "start": "738320",
    "end": "741360"
  },
  {
    "text": "is actually a nullable string so you can",
    "start": "741360",
    "end": "743519"
  },
  {
    "text": "see that people query now takes the name",
    "start": "743519",
    "end": "745600"
  },
  {
    "text": "starts with argument that can be",
    "start": "745600",
    "end": "747760"
  },
  {
    "text": "available string",
    "start": "747760",
    "end": "748720"
  },
  {
    "text": "so let's specify there we can do",
    "start": "748720",
    "end": "752959"
  },
  {
    "text": "name starts with",
    "start": "752959",
    "end": "758399"
  },
  {
    "text": "let's add and as expected we get",
    "start": "758399",
    "end": "762560"
  },
  {
    "text": "our expected results back",
    "start": "762560",
    "end": "766160"
  },
  {
    "text": "now let's spend a few moments talking",
    "start": "767200",
    "end": "768880"
  },
  {
    "text": "about the performance implications of",
    "start": "768880",
    "end": "770880"
  },
  {
    "text": "how we expose",
    "start": "770880",
    "end": "772399"
  },
  {
    "text": "our data so let's create a scheduled",
    "start": "772399",
    "end": "774720"
  },
  {
    "text": "details class that has a greeting and a",
    "start": "774720",
    "end": "776880"
  },
  {
    "text": "list of talks",
    "start": "776880",
    "end": "778000"
  },
  {
    "text": "and let's expose it to the corresponding",
    "start": "778000",
    "end": "780399"
  },
  {
    "text": "schedule query",
    "start": "780399",
    "end": "781680"
  },
  {
    "text": "this is exactly the same thing that",
    "start": "781680",
    "end": "783760"
  },
  {
    "text": "we've been doing so far",
    "start": "783760",
    "end": "785279"
  },
  {
    "text": "so what's the problem of this approach",
    "start": "785279",
    "end": "788720"
  },
  {
    "text": "well in order to construct this schedule",
    "start": "788720",
    "end": "791680"
  },
  {
    "text": "details object we have to",
    "start": "791680",
    "end": "793440"
  },
  {
    "text": "compute both the greeting and",
    "start": "793440",
    "end": "797279"
  },
  {
    "text": "get the list of talks so what if",
    "start": "797279",
    "end": "801120"
  },
  {
    "text": "this list of talks comes from some very",
    "start": "801120",
    "end": "804320"
  },
  {
    "text": "expensive",
    "start": "804320",
    "end": "805120"
  },
  {
    "text": "downstream service call that takes two",
    "start": "805120",
    "end": "807200"
  },
  {
    "text": "seconds to complete",
    "start": "807200",
    "end": "809120"
  },
  {
    "text": "well all your clients now that only care",
    "start": "809120",
    "end": "812000"
  },
  {
    "text": "about the greeting",
    "start": "812000",
    "end": "813279"
  },
  {
    "text": "they incur this extra two second penalty",
    "start": "813279",
    "end": "816240"
  },
  {
    "text": "because",
    "start": "816240",
    "end": "816880"
  },
  {
    "text": "we need to fetch the list of uh talks",
    "start": "816880",
    "end": "819839"
  },
  {
    "text": "before we can return the",
    "start": "819839",
    "end": "821440"
  },
  {
    "text": "schedule details object so how can we",
    "start": "821440",
    "end": "825120"
  },
  {
    "text": "fix this from the schema generator",
    "start": "825120",
    "end": "829199"
  },
  {
    "text": "perspective",
    "start": "829199",
    "end": "830000"
  },
  {
    "text": "uh we can expose graphql fields either",
    "start": "830000",
    "end": "832959"
  },
  {
    "text": "through some",
    "start": "832959",
    "end": "833760"
  },
  {
    "text": "properties and objects and that's what",
    "start": "833760",
    "end": "835199"
  },
  {
    "text": "we we've been doing so far",
    "start": "835199",
    "end": "837199"
  },
  {
    "text": "or to the corresponding functions so",
    "start": "837199",
    "end": "840000"
  },
  {
    "text": "instead of",
    "start": "840000",
    "end": "840800"
  },
  {
    "text": "having value talks let's",
    "start": "840800",
    "end": "844240"
  },
  {
    "text": "create function talks",
    "start": "844240",
    "end": "847279"
  },
  {
    "text": "this returns a list of string and it's",
    "start": "847279",
    "end": "849760"
  },
  {
    "text": "the same list that we had here before",
    "start": "849760",
    "end": "853040"
  },
  {
    "text": "as you can see i've also added the two",
    "start": "853040",
    "end": "854639"
  },
  {
    "text": "second delay here to simulate the",
    "start": "854639",
    "end": "856560"
  },
  {
    "text": "slow call now if i restart my",
    "start": "856560",
    "end": "860480"
  },
  {
    "text": "application",
    "start": "860480",
    "end": "863040"
  },
  {
    "text": "and let's reload playground if i now",
    "start": "864959",
    "end": "869440"
  },
  {
    "text": "write my schedule query and i just",
    "start": "869440",
    "end": "872480"
  },
  {
    "text": "select greeting",
    "start": "872480",
    "end": "874560"
  },
  {
    "text": "i get my data back right away",
    "start": "874560",
    "end": "878639"
  },
  {
    "text": "but if i select a list of talks",
    "start": "878800",
    "end": "882079"
  },
  {
    "text": "well it takes a bit to compute it's",
    "start": "882079",
    "end": "883760"
  },
  {
    "text": "about two seconds give or take right",
    "start": "883760",
    "end": "886079"
  },
  {
    "text": "so now let's add some additional metrics",
    "start": "886079",
    "end": "888320"
  },
  {
    "text": "to it",
    "start": "888320",
    "end": "889920"
  },
  {
    "text": "so since we're using uh graphql kotlin",
    "start": "889920",
    "end": "892320"
  },
  {
    "text": "which relies on graphical java",
    "start": "892320",
    "end": "894240"
  },
  {
    "text": "we can add additional um instrumentation",
    "start": "894240",
    "end": "896560"
  },
  {
    "text": "to our queries to provide some",
    "start": "896560",
    "end": "897920"
  },
  {
    "text": "additional metrics",
    "start": "897920",
    "end": "899600"
  },
  {
    "text": "so let's add a tracing instrumentation",
    "start": "899600",
    "end": "901839"
  },
  {
    "text": "that's a built-in",
    "start": "901839",
    "end": "903360"
  },
  {
    "text": "instrumentation from graphql java and",
    "start": "903360",
    "end": "905440"
  },
  {
    "text": "let's restart",
    "start": "905440",
    "end": "907040"
  },
  {
    "text": "our server",
    "start": "907040",
    "end": "913839"
  },
  {
    "text": "so again let's reload the playground",
    "start": "914480",
    "end": "917839"
  },
  {
    "text": "and let's try selecting the schedule um",
    "start": "917839",
    "end": "921279"
  },
  {
    "text": "again so let's try running the two",
    "start": "921279",
    "end": "923600"
  },
  {
    "text": "schedule credits",
    "start": "923600",
    "end": "925279"
  },
  {
    "text": "if we run it you'll notice that",
    "start": "925279",
    "end": "928959"
  },
  {
    "text": "actually the data was deduped so graphql",
    "start": "928959",
    "end": "932320"
  },
  {
    "text": "server is smart enough to",
    "start": "932320",
    "end": "935120"
  },
  {
    "text": "dedupe your selection so if it sees that",
    "start": "935120",
    "end": "936880"
  },
  {
    "text": "you're selecting the same field multiple",
    "start": "936880",
    "end": "938720"
  },
  {
    "text": "times",
    "start": "938720",
    "end": "939600"
  },
  {
    "text": "it will only execute it once we can see",
    "start": "939600",
    "end": "942480"
  },
  {
    "text": "that if we look at",
    "start": "942480",
    "end": "943759"
  },
  {
    "text": "our metrics here and tracing that only",
    "start": "943759",
    "end": "946959"
  },
  {
    "text": "took about two seconds to complete which",
    "start": "946959",
    "end": "949759"
  },
  {
    "text": "that's what we would expect if you want",
    "start": "949759",
    "end": "952160"
  },
  {
    "text": "to force",
    "start": "952160",
    "end": "952880"
  },
  {
    "text": "the graphql to actually execute the um",
    "start": "952880",
    "end": "956399"
  },
  {
    "text": "and fetch the same field multiple times",
    "start": "956399",
    "end": "958320"
  },
  {
    "text": "for example you have different",
    "start": "958320",
    "end": "959360"
  },
  {
    "text": "parameters",
    "start": "959360",
    "end": "960399"
  },
  {
    "text": "you can do that by specifying your",
    "start": "960399",
    "end": "962320"
  },
  {
    "text": "aliases right so let's do s1 and s2",
    "start": "962320",
    "end": "966320"
  },
  {
    "text": "and now if i execute the query again",
    "start": "966320",
    "end": "971120"
  },
  {
    "text": "you'll notice that it's actually slower",
    "start": "971120",
    "end": "972560"
  },
  {
    "text": "than before right and now i get s1 and",
    "start": "972560",
    "end": "975120"
  },
  {
    "text": "s2",
    "start": "975120",
    "end": "976160"
  },
  {
    "text": "and well it took four",
    "start": "976160",
    "end": "979360"
  },
  {
    "text": "seconds to complete right but um",
    "start": "979360",
    "end": "983040"
  },
  {
    "text": "in the graphql we should",
    "start": "983040",
    "end": "986079"
  },
  {
    "text": "resolve all those fields independently",
    "start": "986079",
    "end": "988399"
  },
  {
    "text": "of each other right but",
    "start": "988399",
    "end": "989839"
  },
  {
    "text": "it looks like they're executed",
    "start": "989839",
    "end": "991199"
  },
  {
    "text": "sequentially so what's the problem here",
    "start": "991199",
    "end": "994639"
  },
  {
    "text": "well if we look at the query here as",
    "start": "994639",
    "end": "996639"
  },
  {
    "text": "it's easy to guess",
    "start": "996639",
    "end": "999040"
  },
  {
    "text": "we're blocking the track so how can we",
    "start": "999040",
    "end": "1001920"
  },
  {
    "text": "actually",
    "start": "1001920",
    "end": "1002720"
  },
  {
    "text": "make it better well",
    "start": "1002720",
    "end": "1005920"
  },
  {
    "text": "let's make it a suspendable function",
    "start": "1005920",
    "end": "1009199"
  },
  {
    "text": "and instead of sleeping on the tread",
    "start": "1009199",
    "end": "1011519"
  },
  {
    "text": "let's just",
    "start": "1011519",
    "end": "1012320"
  },
  {
    "text": "add a two second delay",
    "start": "1012320",
    "end": "1015680"
  },
  {
    "text": "so now if i restart my graphql server",
    "start": "1015680",
    "end": "1021199"
  },
  {
    "text": "again",
    "start": "1022839",
    "end": "1024400"
  },
  {
    "text": "and let's add maybe",
    "start": "1024400",
    "end": "1027600"
  },
  {
    "text": "additional like s3",
    "start": "1027600",
    "end": "1030798"
  },
  {
    "text": "here so now if i rerun it",
    "start": "1030880",
    "end": "1034798"
  },
  {
    "text": "i'll get s1 s2 s3",
    "start": "1034959",
    "end": "1038160"
  },
  {
    "text": "but the query only took two seconds",
    "start": "1038160",
    "end": "1041038"
  },
  {
    "text": "right so",
    "start": "1041039",
    "end": "1041918"
  },
  {
    "text": "we are now executing those in parallel",
    "start": "1041919",
    "end": "1045600"
  },
  {
    "text": "and they all executed independently of",
    "start": "1045600",
    "end": "1047839"
  },
  {
    "text": "each other",
    "start": "1047839",
    "end": "1048799"
  },
  {
    "text": "so let's just a reiterate of what we",
    "start": "1048799",
    "end": "1051280"
  },
  {
    "text": "just did so",
    "start": "1051280",
    "end": "1052000"
  },
  {
    "text": "simply by moving from property to a",
    "start": "1052000",
    "end": "1054080"
  },
  {
    "text": "function",
    "start": "1054080",
    "end": "1055039"
  },
  {
    "text": "i deferred the execution to",
    "start": "1055039",
    "end": "1058240"
  },
  {
    "text": "only when our clients actually asked for",
    "start": "1058240",
    "end": "1061440"
  },
  {
    "text": "the data",
    "start": "1061440",
    "end": "1062480"
  },
  {
    "text": "furthermore by moving to a core team now",
    "start": "1062480",
    "end": "1066240"
  },
  {
    "text": "i made my resolver fully asynchronous as",
    "start": "1066240",
    "end": "1069440"
  },
  {
    "text": "well",
    "start": "1069440",
    "end": "1070400"
  },
  {
    "text": "so there's a quite a big performance",
    "start": "1070400",
    "end": "1072559"
  },
  {
    "text": "game just by doing those",
    "start": "1072559",
    "end": "1073840"
  },
  {
    "text": "simple changes",
    "start": "1073840",
    "end": "1076559"
  },
  {
    "start": "1077000",
    "end": "1120000"
  },
  {
    "text": "alrighty so just to reiterate on some of",
    "start": "1078480",
    "end": "1080640"
  },
  {
    "text": "the features that i've just demoed um",
    "start": "1080640",
    "end": "1082880"
  },
  {
    "text": "in order to use the library well it",
    "start": "1082880",
    "end": "1084480"
  },
  {
    "text": "requires very minimal setup right it's",
    "start": "1084480",
    "end": "1086400"
  },
  {
    "text": "just",
    "start": "1086400",
    "end": "1086880"
  },
  {
    "text": "setting up a single dependency and",
    "start": "1086880",
    "end": "1088559"
  },
  {
    "text": "configuring that single property",
    "start": "1088559",
    "end": "1091120"
  },
  {
    "text": "once configured library can generate",
    "start": "1091120",
    "end": "1093039"
  },
  {
    "text": "your schema directly from your source",
    "start": "1093039",
    "end": "1094720"
  },
  {
    "text": "code",
    "start": "1094720",
    "end": "1095280"
  },
  {
    "text": "and you can use annotations for",
    "start": "1095280",
    "end": "1096880"
  },
  {
    "text": "documentation and providing directives",
    "start": "1096880",
    "end": "1100400"
  },
  {
    "text": "additionally library have native support",
    "start": "1100400",
    "end": "1102160"
  },
  {
    "text": "for core teams that allow you to easily",
    "start": "1102160",
    "end": "1104000"
  },
  {
    "text": "write",
    "start": "1104000",
    "end": "1104400"
  },
  {
    "text": "a fully asynchronous code as well",
    "start": "1104400",
    "end": "1108080"
  },
  {
    "text": "you can find a lot more detailed",
    "start": "1108080",
    "end": "1109919"
  },
  {
    "text": "examples as well as pretty comprehensive",
    "start": "1109919",
    "end": "1111679"
  },
  {
    "text": "documentation on",
    "start": "1111679",
    "end": "1112720"
  },
  {
    "text": "our github pages thanks for watching",
    "start": "1112720",
    "end": "1121760"
  }
]