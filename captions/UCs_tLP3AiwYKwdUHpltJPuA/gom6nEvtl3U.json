[
  {
    "start": "0",
    "end": "58000"
  },
  {
    "text": "[Music] so first start by saying that the title",
    "start": "6990",
    "end": "12960"
  },
  {
    "text": "is a bit of a loaded statement further strategy of getting a talk accepted is to you know give kind of crazy idle talk",
    "start": "12960",
    "end": "19859"
  },
  {
    "text": "and hoping that it stands out and then I am burdened with having to defend the",
    "start": "19859",
    "end": "27240"
  },
  {
    "text": "the title talk during the talk I do think that there is some truth in it though and hopefully I'm able to at",
    "start": "27240",
    "end": "34500"
  },
  {
    "text": "least get some people on my side tradition so I like curiosity first of",
    "start": "34500",
    "end": "39629"
  },
  {
    "text": "all are there any people that are actively developing their day job in elixir in the room no name buddy",
    "start": "39629",
    "end": "46820"
  },
  {
    "text": "unfamiliar with elixir they're just like what is that I came in here to learn more about it okay all right so about",
    "start": "46820",
    "end": "52949"
  },
  {
    "text": "half the room it's familiar with liquor the other half so I'm familiar that's good mix alright as I was introduced on",
    "start": "52949",
    "end": "59370"
  },
  {
    "start": "58000",
    "end": "80000"
  },
  {
    "text": "the CEO of Dockyard we are a software consultancy and we do full stack",
    "start": "59370",
    "end": "66420"
  },
  {
    "text": "application development so if your company has a project that they want to ship out to a company that has a very",
    "start": "66420",
    "end": "72659"
  },
  {
    "text": "good track record of delivering on-time and on-budget application build issues",
    "start": "72659",
    "end": "78000"
  },
  {
    "text": "please consider us so why the infinity I'm going to try to define the insanity",
    "start": "78000",
    "end": "85560"
  },
  {
    "start": "80000",
    "end": "185000"
  },
  {
    "text": "in today's terms as the amount of demand that's being put upon engineering teams",
    "start": "85560",
    "end": "92250"
  },
  {
    "text": "to deliver today's problems on today's problems we're starting to have",
    "start": "92250",
    "end": "98759"
  },
  {
    "text": "requirements that may have a mix of distributed systems mitigating downtime",
    "start": "98759",
    "end": "104280"
  },
  {
    "text": "cell failing systems real-time etc and these are difficult problems of solve",
    "start": "104280",
    "end": "109530"
  },
  {
    "text": "for the tools that we've been using for the past few years on top of that your",
    "start": "109530",
    "end": "116490"
  },
  {
    "text": "systems must be fast and they also must scale to ever-increasing demand as more",
    "start": "116490",
    "end": "121770"
  },
  {
    "text": "of the world gets turned on and mobile device is getting faster interconnections there's going to be",
    "start": "121770",
    "end": "128190"
  },
  {
    "text": "more demand put upon your applications that are coming from a global demand now",
    "start": "128190",
    "end": "133550"
  },
  {
    "text": "the most part as I said we're using yesterday's tools but the way that we",
    "start": "133550",
    "end": "138740"
  },
  {
    "text": "reach for new ideas like entrepreneurs or managers or teams or part developers",
    "start": "138740",
    "end": "144770"
  },
  {
    "text": "in general is we've taken like the older problems which was how do I build a",
    "start": "144770",
    "end": "152050"
  },
  {
    "text": "dynamic running application and we've kind of bullet down to get push Roku",
    "start": "152050",
    "end": "157640"
  },
  {
    "text": "right so that problem is solved it's hyper optimized and now that the cost of",
    "start": "157640",
    "end": "163580"
  },
  {
    "text": "building those outs are so nominal now the problems that were that felt",
    "start": "163580",
    "end": "169880"
  },
  {
    "text": "unreachable before are now problems that are within our reach but we're going to need the tools to build this out so",
    "start": "169880",
    "end": "176560"
  },
  {
    "text": "before I get into the elixir stuff I want to take a step back 30 years and",
    "start": "176560",
    "end": "182240"
  },
  {
    "text": "talk about the underlying technology of elixir and it's early so for those of",
    "start": "182240",
    "end": "189170"
  },
  {
    "start": "185000",
    "end": "283000"
  },
  {
    "text": "you that are from unfamiliar with Erlang it was a rather it is a technology that",
    "start": "189170",
    "end": "194870"
  },
  {
    "text": "was built by Ericsson on the telecommunications company out of Sweden it was like mid eighties late 80s when I",
    "start": "194870",
    "end": "202760"
  },
  {
    "text": "was build a thing it's really 28 29 years ago not exactly around 30 but it",
    "start": "202760",
    "end": "208489"
  },
  {
    "text": "was meant to handle global telecommunication systems so the some of",
    "start": "208489",
    "end": "215540"
  },
  {
    "text": "the requirements of it are like almost zero downtime right so if you have a",
    "start": "215540",
    "end": "221120"
  },
  {
    "text": "telecommunication system worldwide you can't really deal with downtime you have",
    "start": "221120",
    "end": "226130"
  },
  {
    "text": "to have fall backs you have to have fail shapes you have to have systems that can monitor other systems to ensure that",
    "start": "226130",
    "end": "233209"
  },
  {
    "text": "they're going to be bounced properly you have hot code loading so think of your",
    "start": "233209",
    "end": "240560"
  },
  {
    "text": "phone right when's the last time you received an update from your provider saying we're taking down the network for an update you know it doesn't happen so",
    "start": "240560",
    "end": "248000"
  },
  {
    "text": "in Erlang you can actually have the system in production and you can push code deltas up without taking the",
    "start": "248000",
    "end": "255350"
  },
  {
    "text": "production server down and it will absorb these code deltas and incorporate them into the runtime that's currently",
    "start": "255350",
    "end": "261230"
  },
  {
    "text": "live in production these are some really incredible and kind of",
    "start": "261230",
    "end": "266320"
  },
  {
    "text": "they feel like cutting-edge technologies today that have been around for a long",
    "start": "266320",
    "end": "271570"
  },
  {
    "text": "time so if that's the case if they're lying so awesome then why aren't we using our line I mean there's a couple",
    "start": "271570",
    "end": "278140"
  },
  {
    "text": "different potential answers to this a lot of them are opinion based but this is my opinion why we're not using our",
    "start": "278140",
    "end": "285040"
  },
  {
    "start": "283000",
    "end": "608000"
  },
  {
    "text": "line it's just in tax so I mean it's against one of the reasons but Erlang at",
    "start": "285040",
    "end": "292510"
  },
  {
    "text": "the time was based upon prologue syntax which has a I think the way to describe",
    "start": "292510",
    "end": "298600"
  },
  {
    "text": "it it's like a sentence like a like programming structure where each line is",
    "start": "298600",
    "end": "305670"
  },
  {
    "text": "eliminated by a comma the statement is finished with a period but it kind of",
    "start": "305670",
    "end": "313900"
  },
  {
    "text": "grew over time organically and so something that should feel simple ends",
    "start": "313900",
    "end": "320410"
  },
  {
    "text": "up looking difficult for those that are used to more modern syntaxes in their",
    "start": "320410",
    "end": "325720"
  },
  {
    "text": "languages I personally came up learning C C++ assembler through Microsoft",
    "start": "325720",
    "end": "331330"
  },
  {
    "text": "assembler and then he jumped over to Ruby and been doing JavaScript so I don't want to think those steps I don't",
    "start": "331330",
    "end": "337210"
  },
  {
    "text": "take a step back and tactically like if I'm working in my day job I'm working with a language I wanna use something that I enjoy it feels like a bit of a",
    "start": "337210",
    "end": "344260"
  },
  {
    "text": "cop-out I think some people that perhaps have been programming for a long time they may be thinking like all that that's a stupid reason but the the proof",
    "start": "344260",
    "end": "352000"
  },
  {
    "text": "is there and that Erlang has it reached math adoption despite its incredible power despite how",
    "start": "352000",
    "end": "358000"
  },
  {
    "text": "well its solutions applied to the current problems or doing with today on the web and this is where elixir had an",
    "start": "358000",
    "end": "366490"
  },
  {
    "text": "opportunity so this is Joe Armstrong this is much younger picture of Jill",
    "start": "366490",
    "end": "372280"
  },
  {
    "text": "Armstrong so Joe after elixir a pickled",
    "start": "372280",
    "end": "379300"
  },
  {
    "text": "version but early on in its inception he",
    "start": "379300",
    "end": "384510"
  },
  {
    "text": "on his personal blog he wrote a link down the bottom anyway is it just a blog",
    "start": "384510",
    "end": "391330"
  },
  {
    "text": "post and he's they got I'm going to check out this elixir thing and one of the quotes in there he recognized the",
    "start": "391330",
    "end": "397750"
  },
  {
    "text": "syntactic issue of her Langan what electric brings to the table here so he said quote what elixir brings the",
    "start": "397750",
    "end": "405130"
  },
  {
    "text": "table is a complete different surface in text inspired by Ruby well you might call a non-scary",
    "start": "405130",
    "end": "410290"
  },
  {
    "text": "plum code syntax and loaded extra goodies so elixir a little bit of",
    "start": "410290",
    "end": "417430"
  },
  {
    "text": "history of elixir is that it is created by a programmer name is Jose a Bellini",
    "start": "417430",
    "end": "424180"
  },
  {
    "text": "and he was at until maybe two years ago somewhere around there on the Ruby and",
    "start": "424180",
    "end": "431350"
  },
  {
    "text": "rails core team he came up learning Ruby gone through the rails core team was",
    "start": "431350",
    "end": "437710"
  },
  {
    "text": "probably one of the top developers on the core team but while he was working on rails he saw a lot of the problems",
    "start": "437710",
    "end": "445060"
  },
  {
    "text": "that the rails core team was trying to solve especially around concurrency and how difficult it was to solve these problems",
    "start": "445060",
    "end": "452140"
  },
  {
    "text": "with Ruby as the language that they were limited to so I'm not trying to talk",
    "start": "452140",
    "end": "458290"
  },
  {
    "text": "down to Ruby at all ruby is an awesome language they gave me a career I I was not doing anything after college and",
    "start": "458290",
    "end": "464650"
  },
  {
    "text": "then I got into Ruby and I had about ten year career working in Ruby so I'm particularly rails I'm very thankful for",
    "start": "464650",
    "end": "471330"
  },
  {
    "text": "for that technology but you know we can't use the same technologies forever",
    "start": "471330",
    "end": "476650"
  },
  {
    "text": "and as I said earlier as the problems become more complex we'd better tool to solve those so in",
    "start": "476650",
    "end": "484030"
  },
  {
    "text": "kind of the bit of research on how best he can solve these concurrency issues within rails",
    "start": "484030",
    "end": "489750"
  },
  {
    "text": "josée went back start reading a lot of papers he always had an interest in",
    "start": "489750",
    "end": "495700"
  },
  {
    "text": "Erlang and he decided you know Oh screw it I'm going to try to write a syntax on",
    "start": "495700",
    "end": "502120"
  },
  {
    "text": "top of the Erlang virtual machine the first pass was a bit of an object-oriented application sorry",
    "start": "502120",
    "end": "510090"
  },
  {
    "text": "object-oriented syntax of a compile to the Erlang functional byte code that",
    "start": "510090",
    "end": "517990"
  },
  {
    "text": "didn't work he then backed up and said like look do I have to try to create a whole new language or can I just kind of",
    "start": "517990",
    "end": "524169"
  },
  {
    "text": "keep this like this light sugar on top of her line and that's where he really found a good place to excel with elixir",
    "start": "524170",
    "end": "532710"
  },
  {
    "text": "so the elixir itself it's you know it is a language but it is you know it's really",
    "start": "532710",
    "end": "539649"
  },
  {
    "text": "a surface level language that doesn't do much on its own beyond once it compiled",
    "start": "539649",
    "end": "547600"
  },
  {
    "text": "her line it allows erlangs virtual nation to handle all that stuff so when you compare it to other languages like",
    "start": "547600",
    "end": "553390"
  },
  {
    "text": "Scala or other like the JVM has a whole bunch of languages that run on a virtual machine Lister is probably less involved",
    "start": "553390",
    "end": "561490"
  },
  {
    "text": "with the nuts and bolts under the hood then some of those other languages are elixirs probably more complex part of",
    "start": "561490",
    "end": "568690"
  },
  {
    "text": "the source code is really a parser and tokenizer once you get past that a lot",
    "start": "568690",
    "end": "575350"
  },
  {
    "text": "of the language itself is actually written in a lick sir so if you were to check out the elixir github repo you",
    "start": "575350",
    "end": "581950"
  },
  {
    "text": "would see I think it's something like 80 north of 80% of the actual repository is",
    "start": "581950",
    "end": "588550"
  },
  {
    "text": "an elixir itself so simple statements that you may be considered to be like compiler keywords like if statements are",
    "start": "588550",
    "end": "596769"
  },
  {
    "text": "actually just elixir code that is you can write your own if statement through",
    "start": "596769",
    "end": "602890"
  },
  {
    "text": "a macro system that I'll be talking about a little bit later but anyway so let's see what some of things that",
    "start": "602890",
    "end": "608770"
  },
  {
    "start": "608000",
    "end": "762000"
  },
  {
    "text": "elixir inherited from our line so as if",
    "start": "608770",
    "end": "616750"
  },
  {
    "text": "there's the battle-tested 30 drill technology if you're in here like wondering like is this a good technology",
    "start": "616750",
    "end": "622990"
  },
  {
    "text": "for my company so nowadays we're kind of overwhelmed with the number of new",
    "start": "622990",
    "end": "628870"
  },
  {
    "text": "languages new frameworks are coming out almost on a daily basis like if you're reading hacker news it's you know the running joke like what's the new",
    "start": "628870",
    "end": "635050"
  },
  {
    "text": "JavaScript framework this week and we kind of have this sense of anxiety like",
    "start": "635050",
    "end": "640810"
  },
  {
    "text": "you know should I be on the latest and greatest thing all the time I think I'm a hiring perspective sometimes that may",
    "start": "640810",
    "end": "646600"
  },
  {
    "text": "be easier because people like to work with and tinker with the newest thing but anybody that's been a manager in a technology company for any period time",
    "start": "646600",
    "end": "653140"
  },
  {
    "text": "could tell you that well there may be easier to hire when that person leaves your company I mean the technical debt that you leave behind is very very",
    "start": "653140",
    "end": "659199"
  },
  {
    "text": "expensive so I in my career I tended to",
    "start": "659199",
    "end": "664300"
  },
  {
    "text": "actually look back and try to look at things that have work from technology perspective how can",
    "start": "664300",
    "end": "669760"
  },
  {
    "text": "we leverage that in the future and our link to me makes a lot of sense here so it's not like an unproven new language",
    "start": "669760",
    "end": "676840"
  },
  {
    "text": "that we're taking on this significant risk into our organization this is something that is being used in our",
    "start": "676840",
    "end": "682300"
  },
  {
    "text": "global scale by multibillion-dollar corporations right now when it comes to",
    "start": "682300",
    "end": "690760"
  },
  {
    "text": "managing distributed systems there is a library within so I've actually bold the",
    "start": "690760",
    "end": "697630"
  },
  {
    "text": "James River there's a library within Erlang called gem server and we will see code examples on how easy it is to write",
    "start": "697630",
    "end": "704320"
  },
  {
    "text": "a gen server how easy it is to work with doing asynchronous and concurrent",
    "start": "704320",
    "end": "711730"
  },
  {
    "text": "computing we can get self-healing systems through supervisors so what do I",
    "start": "711730",
    "end": "717430"
  },
  {
    "text": "mean by self-healing a fillip feeling system is one that recognizes when",
    "start": "717430",
    "end": "723130"
  },
  {
    "text": "something goes wrong and puts us back into a good state and the supervisor pattern within Erlang is a very simple",
    "start": "723130",
    "end": "730240"
  },
  {
    "text": "idea that ends up being incredibly powerful and if you've done any type of",
    "start": "730240",
    "end": "735630"
  },
  {
    "text": "programming where you're having to predict how can the system go wrong and",
    "start": "735630",
    "end": "740860"
  },
  {
    "text": "having to basically do a lot of error caching and if statements or case",
    "start": "740860",
    "end": "746080"
  },
  {
    "text": "statements I think that the supervisor pattern is going to be an eye-opener for you based upon one simple principle",
    "start": "746080",
    "end": "752800"
  },
  {
    "text": "which I'll get to on those floods and it can quickly feel to me tomorrow's demands and finally a nice kind of",
    "start": "752800",
    "end": "759970"
  },
  {
    "text": "syntactic thing is pattern matching which I will show so nuclear elixir so those visual things that all those",
    "start": "759970",
    "end": "765670"
  },
  {
    "start": "762000",
    "end": "952000"
  },
  {
    "text": "things from our laying is what elixir inherits and these are the things that elixir adds on top of it so it adds a",
    "start": "765670",
    "end": "770830"
  },
  {
    "text": "clean familiar syntax if you've worked in Python if you worked in Ruby if",
    "start": "770830",
    "end": "776620"
  },
  {
    "text": "you've worked in c-sharp there's all different aspects of those languages that Joe's a look so he looked at the",
    "start": "776620",
    "end": "783430"
  },
  {
    "text": "kind of the landscape it said like okay I really like Ruby syntax but there's some things that are wrong with it some things I wouldn't have have done",
    "start": "783430",
    "end": "790810"
  },
  {
    "text": "myself he took all the best things that he thought were the best things from different languages and brought them",
    "start": "790810",
    "end": "796450"
  },
  {
    "text": "into a lecture for the syntax as amateur tooling system so for a language that just hit 1.0 in",
    "start": "796450",
    "end": "803350"
  },
  {
    "text": "the past year and a half or maybe closer to years at this point ie launched with a task running tool called it's that one",
    "start": "803350",
    "end": "811570"
  },
  {
    "text": "called mix it mix brings in debugging tools linting tools documentation tools",
    "start": "811570",
    "end": "821550"
  },
  {
    "text": "dependency installation and dependency resolution tools generating tools so all",
    "start": "821550",
    "end": "827649"
  },
  {
    "text": "these things are already built into language this is in a separate library that you have to bring in that's just something that as part of the core",
    "start": "827649",
    "end": "833320"
  },
  {
    "text": "languages made part of it built-in unit testing again through the language grew",
    "start": "833320",
    "end": "838810"
  },
  {
    "text": "way of it's called X unit meta programming so meta programming to you",
    "start": "838810",
    "end": "845830"
  },
  {
    "text": "and different language may be may be considered dynamic programming right like how do I declare a class",
    "start": "845830",
    "end": "852010"
  },
  {
    "text": "dynamically or how do i define a method dynamically meta programming and elixir",
    "start": "852010",
    "end": "857080"
  },
  {
    "text": "is actually a lot more deeper than that so it actually tries to do away with the",
    "start": "857080",
    "end": "863440"
  },
  {
    "text": "idea of dynamic application like code creation and it brings in this idea that",
    "start": "863440",
    "end": "869440"
  },
  {
    "text": "what you're generating is only being generated at Build time so I forgot to",
    "start": "869440",
    "end": "875740"
  },
  {
    "text": "mention elixir is a compiled language is not a naughty language said that is at a",
    "start": "875740",
    "end": "882310"
  },
  {
    "text": "runtime type language so during compile time the macros that you're doing better program with well",
    "start": "882310",
    "end": "889180"
  },
  {
    "text": "actually view the pile down to bytecode and you can do language extension features at this point so when I was",
    "start": "889180",
    "end": "894279"
  },
  {
    "text": "measuring the if statement and things like that earlier those are all done through the macro system the meta",
    "start": "894279",
    "end": "900430"
  },
  {
    "text": "programming system in elixir built in documentation is the documentation is a",
    "start": "900430",
    "end": "905829"
  },
  {
    "text": "first-class citizen inside elixir in fact it's not just documentation itself",
    "start": "905829",
    "end": "911170"
  },
  {
    "text": "but there are this concept called doc tests which I wasn't able to add to my slides but doc tests will actually route",
    "start": "911170",
    "end": "917440"
  },
  {
    "text": "allow you to write small little unit tests inside your documentation and so that when you run your test suite you'll",
    "start": "917440",
    "end": "923200"
  },
  {
    "text": "run the doc tests as well to ensure that your documentation is actually showing the proper working code which is really",
    "start": "923200",
    "end": "930459"
  },
  {
    "text": "important so Joe they want to make sure that documentation was you know something that was really first and foremost the mind of Alicia",
    "start": "930459",
    "end": "937480"
  },
  {
    "text": "developers pipes which is another syntactic sugar and filing Phoenix which",
    "start": "937480",
    "end": "943209"
  },
  {
    "text": "I won't get to today but Phoenix is a web framework that is probably if you",
    "start": "943209",
    "end": "948399"
  },
  {
    "text": "heard a lecture that's probably the reason why you've heard of elixir so let's look at pattern matching so this",
    "start": "948399",
    "end": "955209"
  },
  {
    "start": "952000",
    "end": "1356000"
  },
  {
    "text": "is a simple statement eight equals one but we have to consider that in a",
    "start": "955209",
    "end": "961420"
  },
  {
    "text": "lecture we're not doing what is done in other languages so in other languages you'd be looking at this is saying this",
    "start": "961420",
    "end": "967930"
  },
  {
    "text": "is an assignment now look sir it's not an assignment it can feel like an assignment because after you've done",
    "start": "967930",
    "end": "974440"
  },
  {
    "text": "this the a variable has the value of one what you're saying is that a is equal to",
    "start": "974440",
    "end": "981160"
  },
  {
    "text": "one so you have to look at it like an equation the left hand side on the right hand side of the equation operator",
    "start": "981160",
    "end": "987130"
  },
  {
    "text": "because what you can also do is that after you've said a is equal to one you just say that one is equal to a both of",
    "start": "987130",
    "end": "993399"
  },
  {
    "text": "these are valid statements but only after you've done to the first one so this is the basis of pattern matching",
    "start": "993399",
    "end": "999660"
  },
  {
    "text": "you're saying that some variable is equal to some value this is also a valid",
    "start": "999660",
    "end": "1008790"
  },
  {
    "text": "statement so these are not arrays user lists there's no concept of arrays in a",
    "start": "1008790",
    "end": "1015029"
  },
  {
    "text": "lecture but lists have mostly the same purpose there's another type called a",
    "start": "1015029",
    "end": "1021329"
  },
  {
    "text": "tuple that can also act probably more similar similarly to a list a to an",
    "start": "1021329",
    "end": "1026668"
  },
  {
    "text": "array but anyway in this case I mean these are exactly the same values right these have equality you can go on to the",
    "start": "1026669",
    "end": "1032850"
  },
  {
    "text": "elixir IEX which is the kind of repple for a lecture and you type this in and it would be a true statement so you can",
    "start": "1032850",
    "end": "1044370"
  },
  {
    "text": "do this what I'm saying now is that a list with a variable a in it is equal to",
    "start": "1044370",
    "end": "1051240"
  },
  {
    "text": "a list with the verb with a value of 1 which means that a is has finished is",
    "start": "1051240",
    "end": "1058530"
  },
  {
    "text": "equal to the value of 1 so if I were to unwrap the a variable from the list the",
    "start": "1058530",
    "end": "1065669"
  },
  {
    "text": "value of a would be you know a list one rapid list but in this case",
    "start": "1065669",
    "end": "1071760"
  },
  {
    "text": "were pattern matching or we're saying that based upon the pattern the right hand side we have pattern a left hand",
    "start": "1071760",
    "end": "1076860"
  },
  {
    "text": "side and matches it but we're saying that this variable matches the particular value that knot that pattern",
    "start": "1076860",
    "end": "1082710"
  },
  {
    "text": "matches on the right hand side we get more complex so here's a here's a two",
    "start": "1082710",
    "end": "1089910"
  },
  {
    "text": "dimensional list and of course all the values were able to capture those and",
    "start": "1089910",
    "end": "1096170"
  },
  {
    "text": "finally we can get you know you go to end and any gap so we can say that the",
    "start": "1096170",
    "end": "1102120"
  },
  {
    "text": "third element in here is also a list and if the third element on the right hand",
    "start": "1102120",
    "end": "1108390"
  },
  {
    "text": "side is also a list we've properly pattern match upon that and we capture the value inside so what this ends up",
    "start": "1108390",
    "end": "1115290"
  },
  {
    "text": "doing is that this kind of primer right here it will prepare you for writing",
    "start": "1115290",
    "end": "1121320"
  },
  {
    "text": "functions with an elixir so typically when you're in other languages you only",
    "start": "1121320",
    "end": "1128040"
  },
  {
    "text": "get to write like one in function definition there's plenty of other languages you can write multiple function definitions you know based upon",
    "start": "1128040",
    "end": "1134040"
  },
  {
    "text": "the arity of your arguments but in a lecture you can write multiple function definitions with the same arity but have",
    "start": "1134040",
    "end": "1141300"
  },
  {
    "text": "different patterns within that area so here i've declared two functions foo and",
    "start": "1141300",
    "end": "1148070"
  },
  {
    "text": "i put values directly inside the function arguments and this is completely valid syntax if i call foo",
    "start": "1148070",
    "end": "1156660"
  },
  {
    "text": "and i pass the number two to it it's going to call the second foo function",
    "start": "1156660",
    "end": "1163680"
  },
  {
    "text": "because it looks at the values there and just matches it it says okay this pattern matches this these values",
    "start": "1163680",
    "end": "1171420"
  },
  {
    "text": "matches pattern if I were to have a flu with just a named variable inside of it",
    "start": "1171420",
    "end": "1178170"
  },
  {
    "text": "then based upon the order that it is defined in it will match so it kind of a",
    "start": "1178170",
    "end": "1185040"
  },
  {
    "text": "first win so if I were to have like flu and then bar up above blue one that would be a greedy matcher and and that",
    "start": "1185040",
    "end": "1192120"
  },
  {
    "text": "one were always wanting to just the order what you tries it but if I put it last then if I pass blue three it would",
    "start": "1192120",
    "end": "1198990"
  },
  {
    "text": "pass to that one and then the variable in the argument would be would have that value looks you're smart",
    "start": "1198990",
    "end": "1205230"
  },
  {
    "text": "enough that if you were to put the greedy matcher above a function that otherwise should",
    "start": "1205230",
    "end": "1210269"
  },
  {
    "text": "match it will warn you when you compile and say that this function on this line will always match and then functions XYZ",
    "start": "1210269",
    "end": "1218090"
  },
  {
    "text": "can never be can never be matched let me",
    "start": "1218090",
    "end": "1225240"
  },
  {
    "text": "back up for a second so this pattern ends up being really really powerful because what it really does is kind of",
    "start": "1225240",
    "end": "1231450"
  },
  {
    "text": "breaks out branching logic right so you may have functions that you've written",
    "start": "1231450",
    "end": "1238289"
  },
  {
    "text": "our methods that you've written in other languages where we get passed into the function now you have some like really",
    "start": "1238289",
    "end": "1243570"
  },
  {
    "text": "nasty if statement in there to kind of you know break up the conditionals or you may have to sacrifice on your",
    "start": "1243570",
    "end": "1250440"
  },
  {
    "text": "function naming by basically creating a bunch of different function names that are you know maybe things is hard and",
    "start": "1250440",
    "end": "1256740"
  },
  {
    "text": "programming languages what this ends up wanting you to do is doesn't so much",
    "start": "1256740",
    "end": "1261809"
  },
  {
    "text": "obfuscate the the conditional logic but at least allows you to give a cleaner pattern for having branching in your",
    "start": "1261809",
    "end": "1268440"
  },
  {
    "text": "code and having specialized function to handle things pipes allow you to clean up messes like",
    "start": "1268440",
    "end": "1275730"
  },
  {
    "text": "this so I super guilty of this and other languages you may try to clean up a",
    "start": "1275730",
    "end": "1282059"
  },
  {
    "text": "little bit by doing something like this so you take the innermost function assigned to a variable and you keep",
    "start": "1282059",
    "end": "1287070"
  },
  {
    "text": "passing it down and down and down and down well this is another feature that electric soul so it's piping and the way",
    "start": "1287070",
    "end": "1293129"
  },
  {
    "text": "it works that it takes the value that you're piping and it will inject it as",
    "start": "1293129",
    "end": "1298889"
  },
  {
    "text": "the first argument into the corresponding function does that mean no",
    "start": "1298889",
    "end": "1306049"
  },
  {
    "text": "so if you know the result of bad taking",
    "start": "1306049",
    "end": "1312029"
  },
  {
    "text": "the hello world value gets piped into the first argument to bar and the result",
    "start": "1312029",
    "end": "1317429"
  },
  {
    "text": "of bar gets piped into the first argument of foo the pattern that starts great for you in",
    "start": "1317429",
    "end": "1322830"
  },
  {
    "text": "your in your your elixir code is that you start to really write for composability right so a while your",
    "start": "1322830",
    "end": "1329370"
  },
  {
    "text": "functions end up corresponding to this simple idea that the first argument",
    "start": "1329370",
    "end": "1334679"
  },
  {
    "text": "should be to carry out to carry value in fact elixir wraps a",
    "start": "1334679",
    "end": "1339869"
  },
  {
    "text": "lot of the Erlang API and it rewrites the argument order to try to ensure that",
    "start": "1339869",
    "end": "1347399"
  },
  {
    "text": "the primary value being passed in is always the first argument to allow for easy function it starts yes a lot of for",
    "start": "1347399",
    "end": "1353879"
  },
  {
    "text": "easy function piping the scalability so that was all syntax those nice stuff and",
    "start": "1353879",
    "end": "1359819"
  },
  {
    "start": "1356000",
    "end": "1443000"
  },
  {
    "text": "there's a lot more really cool syntax on lecture but I'm limited on time your",
    "start": "1359819",
    "end": "1366389"
  },
  {
    "text": "length VM also known as the beam I do not recall but it stands for at the moment so the Erlang VM is almost an",
    "start": "1366389",
    "end": "1376469"
  },
  {
    "text": "operating system onto itself its primary purpose is to monitor and schedule its",
    "start": "1376469",
    "end": "1381629"
  },
  {
    "text": "own processes so within within and if you're confused on inter changing or",
    "start": "1381629",
    "end": "1387779"
  },
  {
    "text": "Lang elixir just let me know and I'll okay explain a little bit more but again Erlang is the underlying system of",
    "start": "1387779",
    "end": "1394859"
  },
  {
    "text": "elixir lecture it depends upon our length and so a lot of this kind of low-level stuff is our traits of our",
    "start": "1394859",
    "end": "1400889"
  },
  {
    "text": "life but a lecturer gets everything so in in in our length you have the idea",
    "start": "1400889",
    "end": "1409799"
  },
  {
    "text": "that it is a very concurrent language so you can create very small and cheap processes very very easily and all those",
    "start": "1409799",
    "end": "1415829"
  },
  {
    "text": "processes are monitored and scheduled by the Erlang VM so in the same way that your operating system monitors and",
    "start": "1415829",
    "end": "1421349"
  },
  {
    "text": "schedules operating system processes or Lang VM monitors and schedules its own processes so it will make sure that when",
    "start": "1421349",
    "end": "1430169"
  },
  {
    "text": "these processes die that the right error code is being reported if the processes",
    "start": "1430169",
    "end": "1435209"
  },
  {
    "text": "are kind of eating up a lot of resources it's probably distributing them within",
    "start": "1435209",
    "end": "1441539"
  },
  {
    "text": "the system as it said so it's contributing them it can actually distribute them across all available CPU",
    "start": "1441539",
    "end": "1447599"
  },
  {
    "start": "1443000",
    "end": "1531000"
  },
  {
    "text": "cores this is a huge performance gain if you have anything that is fairly CPU",
    "start": "1447599",
    "end": "1452759"
  },
  {
    "text": "intensive and it happens automatically so as long as you're running your application in a concurrent manner and",
    "start": "1452759",
    "end": "1459029"
  },
  {
    "text": "using processes then all the processes will get the Shoojit cost be available",
    "start": "1459029",
    "end": "1464789"
  },
  {
    "text": "to you cords to the Erlang PM so one of the more popular deployment",
    "start": "1464789",
    "end": "1472940"
  },
  {
    "text": "targets in general right now is Roku and everyone's wondering if the point is",
    "start": "1472940",
    "end": "1480080"
  },
  {
    "text": "still kind of a difficult answer to give us the straight something difficulties a",
    "start": "1480080",
    "end": "1485630"
  },
  {
    "text": "straight answer to an elixir the problem being solved but we don't have an awesome deployment story yet there's",
    "start": "1485630",
    "end": "1492500"
  },
  {
    "text": "decent ones but not awesome ones and so the reason for that is you can do get push Roku",
    "start": "1492500",
    "end": "1498020"
  },
  {
    "text": "but Roku is not a good deployment target for a lick sir and the reason for that is because Heroku shards your CPUs you",
    "start": "1498020",
    "end": "1504800"
  },
  {
    "text": "can pay for dedicated you know system where you're going to get a multi-core",
    "start": "1504800",
    "end": "1511480"
  },
  {
    "text": "Roku box but then you're paying a lot of money for me right now I think it's",
    "start": "1511480",
    "end": "1517910"
  },
  {
    "text": "better to go with like a Rackspace or an LED note or something like that so that you get those dedicated course work at a",
    "start": "1517910",
    "end": "1526490"
  },
  {
    "text": "better cost just deal with the deployment headaches for now so the nice",
    "start": "1526490",
    "end": "1532760"
  },
  {
    "text": "thing is that the Erlang processes are incredibly cheap compared to operations and processes so each process is a",
    "start": "1532760",
    "end": "1539870"
  },
  {
    "text": "little bit over a kilobyte so you can spin up by ton of them it's been a very very fascinating diver very quickly and",
    "start": "1539870",
    "end": "1548180"
  },
  {
    "text": "on top of that each process carries its own garbage collector so what depends on meaning for you is",
    "start": "1548180",
    "end": "1556390"
  },
  {
    "text": "that in other languages where you have a single thread our main thread and the",
    "start": "1556390",
    "end": "1561830"
  },
  {
    "text": "garbage collection ends up happening it may be a marking sleep you may be a generational garbage collector but in",
    "start": "1561830",
    "end": "1568310"
  },
  {
    "text": "any event it still has to stop the world and do its work while it's collecting all the garbage now if you take another",
    "start": "1568310",
    "end": "1574160"
  },
  {
    "text": "language with a center of objects and compared to a Erlanger literature application with the same number of",
    "start": "1574160",
    "end": "1579350"
  },
  {
    "text": "objects these objects may be distributed across multiple processes and if you process runs concurrently and has its",
    "start": "1579350",
    "end": "1584630"
  },
  {
    "text": "own garbage collector then the surface area in which it's actually supposed to for cleaning up its own garbage is very",
    "start": "1584630",
    "end": "1589880"
  },
  {
    "text": "very small so that garbage collection process goes very very fast on top of that those those processes are there",
    "start": "1589880",
    "end": "1595640"
  },
  {
    "text": "aren't currently garbage collecting are still running so this is where Erlang gets a ton of it",
    "start": "1595640",
    "end": "1601340"
  },
  {
    "text": "from because it's not lot its main roads not being blocked by any garbage",
    "start": "1601340",
    "end": "1606590"
  },
  {
    "text": "collection any one garbage collector rather so a lot of the the process work",
    "start": "1606590",
    "end": "1612830"
  },
  {
    "start": "1610000",
    "end": "1723000"
  },
  {
    "text": "process kind of skilling within Erlang was evidenced through work that employee",
    "start": "1612830",
    "end": "1619940"
  },
  {
    "text": "of ours Chris McCord who created the Phoenix framework was doing with a with",
    "start": "1619940",
    "end": "1626720"
  },
  {
    "text": "WebSockets in Phoenix so he was around like early 1.00 Phoenix someone came",
    "start": "1626720",
    "end": "1634040"
  },
  {
    "text": "into one of the channels or an IRC and said hey I tried to scale up to 60,000 concurrent connections and started kind",
    "start": "1634040",
    "end": "1641270"
  },
  {
    "text": "of bombing out on me so Chris started poking with it and after a week he got up to two million concurrent connections and at that point",
    "start": "1641270",
    "end": "1647960"
  },
  {
    "text": "I figured this was good enough that's on one box that is one box it has a ton of memory but it's one Rackspace box that",
    "start": "1647960",
    "end": "1655910"
  },
  {
    "text": "was able to scale up to two million concurrent connections these are not just dummy connections sitting there doing nothing they were actually",
    "start": "1655910",
    "end": "1662090"
  },
  {
    "text": "simulating real conversations real message passion between each other the latency for distributing a message",
    "start": "1662090",
    "end": "1668930"
  },
  {
    "text": "across all two million web sockets at that point was lucky two seconds so you",
    "start": "1668930",
    "end": "1673970"
  },
  {
    "text": "can imagine that you know real-time communication system that is dealing",
    "start": "1673970",
    "end": "1681170"
  },
  {
    "text": "with a lot of people like to think of slack like I can't imagine how much money slack is paying at server power right now because I know that some other",
    "start": "1681170",
    "end": "1687260"
  },
  {
    "text": "underlying tech is PHP I don't know if that further real-time side of things",
    "start": "1687260",
    "end": "1693800"
  },
  {
    "text": "but I know that is part of their stack but I would just be I mean it wasn't",
    "start": "1693800",
    "end": "1700820"
  },
  {
    "text": "surprising that they were using Erlang in some way but I don't know what they are if they weren't I can imagine I can",
    "start": "1700820",
    "end": "1706280"
  },
  {
    "text": "only imagine that something like this could really cut down their cost if you're doing anything that is a real-time messaging system I you",
    "start": "1706280",
    "end": "1714890"
  },
  {
    "text": "immediately can start to see the benefits of this from our business perspective and how you really can bring",
    "start": "1714890",
    "end": "1720920"
  },
  {
    "text": "down your overhead big time so let's look at a case study specifically on one company that was able to have massive",
    "start": "1720920",
    "end": "1728770"
  },
  {
    "start": "1723000",
    "end": "1805000"
  },
  {
    "text": "infrastructure savings by moving from one language over to elixir and sweet report so they had an",
    "start": "1728770",
    "end": "1735850"
  },
  {
    "text": "eight-year-old real gap and here are the here's the architecture of that real tap for anyone that's not familiar with",
    "start": "1735850",
    "end": "1742120"
  },
  {
    "text": "bleach report it's a Sports News website so they do a lot of reporting they have",
    "start": "1742120",
    "end": "1748990"
  },
  {
    "text": "a lot of video when I top of that they also do like a lot of push notifications",
    "start": "1748990",
    "end": "1754420"
  },
  {
    "text": "right so a big thing in the sports news world is who pushes the sport who's",
    "start": "1754420",
    "end": "1759580"
  },
  {
    "text": "pushes the sports news first prior to this which herb if you had like",
    "start": "1759580",
    "end": "1767530"
  },
  {
    "text": "a CBS Sports and ESPN and Yahoo Sports",
    "start": "1767530",
    "end": "1772570"
  },
  {
    "text": "and whatever applications on your phone you have bleach report on there it would take sometimes up to a few minutes like",
    "start": "1772570",
    "end": "1779440"
  },
  {
    "text": "if they bleach report person plugs in the report bang it took a few minutes for you to receive that push notification i'll tell you what it was",
    "start": "1779440",
    "end": "1786130"
  },
  {
    "text": "afterwards so they had a hundred fifty eight of us in instances supporting this",
    "start": "1786130",
    "end": "1792160"
  },
  {
    "text": "application even at this point their servers were jammed up with requests so there are many times in which they were",
    "start": "1792160",
    "end": "1798640"
  },
  {
    "text": "steaming too many requests and they can get responses out they and this is you know of course the big problem there",
    "start": "1798640",
    "end": "1805990"
  },
  {
    "start": "1805000",
    "end": "1831000"
  },
  {
    "text": "engineering teams were fairly large and support each of their apps each their own individual apps our main app with",
    "start": "1805990",
    "end": "1812020"
  },
  {
    "text": "the eight-year-old little dab and so there's a lot of personnel overhead for each application and they had multiple",
    "start": "1812020",
    "end": "1820299"
  },
  {
    "text": "complex caching strategies the tacking is you know not putting on easy problem to solve and getting something in place",
    "start": "1820299",
    "end": "1826720"
  },
  {
    "text": "that is that works well can be expensive at times so afterwards this is after",
    "start": "1826720",
    "end": "1834580"
  },
  {
    "start": "1831000",
    "end": "1884000"
  },
  {
    "text": "they moved over to election or phoenix they had one fifth than a number of AWS instances for one of their applications",
    "start": "1834580",
    "end": "1840580"
  },
  {
    "text": "they went from twenty servers down to two and the only reason they had two is because the second one was there for",
    "start": "1840580",
    "end": "1845890"
  },
  {
    "text": "redundancy now they're averaging about ten to thirty millisecond response times",
    "start": "1845890",
    "end": "1852780"
  },
  {
    "text": "the larger largest average spike is about 400 milliseconds and they have one",
    "start": "1852780",
    "end": "1858010"
  },
  {
    "text": "outlier spike of 800 milliseconds these numbers are good ads of six months ago so I don't know if they've changed much",
    "start": "1858010",
    "end": "1863020"
  },
  {
    "text": "but which reports been pretty vocal in their elixir in Phoenix case",
    "start": "1863020",
    "end": "1869100"
  },
  {
    "text": "studies so imagine that are still pre similar on some of that they have the one engineer per application now and we",
    "start": "1869100",
    "end": "1876390"
  },
  {
    "text": "have time we'll get to why why this is important and how this is possible and they're also doing no caching so other",
    "start": "1876390",
    "end": "1884909"
  },
  {
    "start": "1884000",
    "end": "1931000"
  },
  {
    "text": "examples I promised you the the push notification thing so which report went",
    "start": "1884909",
    "end": "1890970"
  },
  {
    "text": "from like three minutes to get in to push notifications down to within like three seconds so all of their",
    "start": "1890970",
    "end": "1895980"
  },
  {
    "text": "subscribers get a push notification almost immediately when when the reporter actually publishes the article",
    "start": "1895980",
    "end": "1902190"
  },
  {
    "text": "so the business value back which report for this is that if you're competing with other applications on phone to be",
    "start": "1902190",
    "end": "1907890"
  },
  {
    "text": "the first one to publish an article you're you're to get the push notification you're computing all these other applications get people to push in",
    "start": "1907890",
    "end": "1914370"
  },
  {
    "text": "your push notification and to bring you back to butchered part so you can start getting eyeballs on ads so it's very",
    "start": "1914370",
    "end": "1921510"
  },
  {
    "text": "important to be the first one there so look sir you know brought in you know significant business value for them",
    "start": "1921510",
    "end": "1927419"
  },
  {
    "text": "almost immediately other examples and",
    "start": "1927419",
    "end": "1933630"
  },
  {
    "start": "1931000",
    "end": "1993000"
  },
  {
    "text": "these are more Erlang examples but kind of demonstrates the scalability what DAP is a classic example within our link for",
    "start": "1933630",
    "end": "1942750"
  },
  {
    "text": "those that may be unfamiliar with whatsapp it is a it's a messaging system right so it has you know phone text but",
    "start": "1942750",
    "end": "1950610"
  },
  {
    "text": "it's all over all over the internet they're famous because Facebook bought them I think was Facebook but they were",
    "start": "1950610",
    "end": "1958710"
  },
  {
    "text": "but for a lot of money so they bought for like seventeen billion dollars or some like that and they had an engineering team of less than twenty",
    "start": "1958710",
    "end": "1963899"
  },
  {
    "text": "people so they were able to develop build up playing that scaled to billions of connections per minute with a very",
    "start": "1963899",
    "end": "1971429"
  },
  {
    "text": "small team relatively and because they're able to build them that scaled that high you know the amount of return",
    "start": "1971429",
    "end": "1978390"
  },
  {
    "text": "they got on that when they got bought out with significant age a bird is a pretty good example but open source",
    "start": "1978390",
    "end": "1985140"
  },
  {
    "text": "their online application is one check one out Riot Games uses are lying",
    "start": "1985140",
    "end": "1990240"
  },
  {
    "text": "eternally for their for their messaging system as well League of Legends that's",
    "start": "1990240",
    "end": "1996990"
  },
  {
    "start": "1993000",
    "end": "2164000"
  },
  {
    "text": "good right here next okay junkies all right",
    "start": "1996990",
    "end": "2005980"
  },
  {
    "text": "work you had no idea how long it took me to get there right okay",
    "start": "2005980",
    "end": "2012740"
  },
  {
    "text": "so this is a simple gem server you know what we're just going to do is create a stack so you really point on my pointer",
    "start": "2012740",
    "end": "2020720"
  },
  {
    "text": "but would I think this is actually a real kind of first comprehensive lecture",
    "start": "2020720",
    "end": "2026720"
  },
  {
    "text": "could I've showed you but the idea here is that we have a module module simply just a namespace so we don't have classes we don't have objects for the",
    "start": "2026720",
    "end": "2033110"
  },
  {
    "text": "whole lecture it's not object oriented language it's a functional programming language but the the namespace allows us to organize our functions in such a way",
    "start": "2033110",
    "end": "2039620"
  },
  {
    "text": "so we don't have this you know one monolithic neo space so we have to avoid name collisions function names main",
    "start": "2039620",
    "end": "2045620"
  },
  {
    "text": "event huge gen server allows us to bring in some functionality of the gen server module so now we get some code injected",
    "start": "2045620",
    "end": "2054349"
  },
  {
    "text": "into our module automatically and start link allows us to create the new process",
    "start": "2054349",
    "end": "2059770"
  },
  {
    "text": "so in this case our start link function is calling a gen server start link",
    "start": "2059770",
    "end": "2065210"
  },
  {
    "text": "function the underscore in scream module just away to reference you go to college otago stack module state is going to be",
    "start": "2065210",
    "end": "2073128"
  },
  {
    "text": "the starting state of the gen server so in this case we're going to pass it an empty list this is going to be our",
    "start": "2073129",
    "end": "2079398"
  },
  {
    "text": "starting state and then options we'll ignore for now so there's two functions here handle called halo cap handle call",
    "start": "2079399",
    "end": "2086330"
  },
  {
    "text": "allows us to what you call a gem server it's a blocking request and when you",
    "start": "2086330",
    "end": "2091398"
  },
  {
    "text": "cast a gem server it's basically just a fire-and-forget to quest so the handle",
    "start": "2091399",
    "end": "2097339"
  },
  {
    "text": "call we're using some pattern matching here and we're going to say that on a pop request you can ignore the second",
    "start": "2097339",
    "end": "2104990"
  },
  {
    "text": "argument from for now just know that anything that starts with underscore is a argument that gets ignored by the",
    "start": "2104990",
    "end": "2110900"
  },
  {
    "text": "compiler if you have an argument that is not underscoring don't use it you get a warning saying that even unused argument",
    "start": "2110900",
    "end": "2117380"
  },
  {
    "text": "and then just intact and there is a way for us to reference the parts of a list",
    "start": "2117380",
    "end": "2123349"
  },
  {
    "text": "so you have a head and tail and head is going to be a first element and tail as the remainder of the list so in this",
    "start": "2123349",
    "end": "2130280"
  },
  {
    "text": "case if we passed we had one two three a tree would be one and then tea would",
    "start": "2130280",
    "end": "2135739"
  },
  {
    "text": "be two and three it should be a single value the tea would be a list it'll cast",
    "start": "2135739",
    "end": "2141519"
  },
  {
    "text": "so we're pushing into the list at this point and we want to we give it the the",
    "start": "2141519",
    "end": "2147650"
  },
  {
    "text": "you know the the request we're pushing and then we give it a value W want to push onto it and then T is the state and",
    "start": "2147650",
    "end": "2154999"
  },
  {
    "text": "so down bottom we have a reply no reply rather and we're basically pretending the head on to the on to the stack so",
    "start": "2154999",
    "end": "2164048"
  },
  {
    "text": "the way we end up using it is that we can call start link we pass at that initial state with an empty list and we",
    "start": "2164229",
    "end": "2171769"
  },
  {
    "text": "get back this this reply says okay and this is kind of semantics with in Erlang",
    "start": "2171769",
    "end": "2177229"
  },
  {
    "text": "for things that are going well to say okay you know some of the things that don't go well we may get an error but",
    "start": "2177229",
    "end": "2183440"
  },
  {
    "text": "the second argument within the tuple is a second element rather is the pit so",
    "start": "2183440",
    "end": "2188539"
  },
  {
    "text": "similar to an operation pin this is going to be our reference back to this given process so in this case we're",
    "start": "2188539",
    "end": "2195769"
  },
  {
    "start": "2194000",
    "end": "2261000"
  },
  {
    "text": "going to tack to the gem server so cast again is a fire-and-forget so we pass to",
    "start": "2195769",
    "end": "2201410"
  },
  {
    "text": "the pig because we need that unique identifier back to our gem server process and we're going to do the push",
    "start": "2201410",
    "end": "2206630"
  },
  {
    "text": "we're going to push in a hello onto the stack and then finally we we make a",
    "start": "2206630",
    "end": "2212569"
  },
  {
    "text": "block request because we're waiting for response from the server and we do call a passing pig because we need to",
    "start": "2212569",
    "end": "2218269"
  },
  {
    "text": "reference the gem server and call pop that is gen server in a bit in a",
    "start": "2218269",
    "end": "2223400"
  },
  {
    "text": "nutshell it's a very simple system that allows you you know kind of abstract from more complex system within elixir",
    "start": "2223400",
    "end": "2230499"
  },
  {
    "text": "each process has its own mailbox and you can do message even reference other",
    "start": "2230499",
    "end": "2236779"
  },
  {
    "text": "processes in past messages and these messages can get processed will do get processed signaling so you can build out",
    "start": "2236779",
    "end": "2246049"
  },
  {
    "text": "something like gen server on your own but gen server gives you this really nice kind of abstract layer for dealing",
    "start": "2246049",
    "end": "2251599"
  },
  {
    "text": "with message passing you guys think a bit like a web server right so you have your web server educated you give it a",
    "start": "2251599",
    "end": "2257839"
  },
  {
    "text": "request and it gives your response so supervisors and",
    "start": "2257839",
    "end": "2264089"
  },
  {
    "start": "2261000",
    "end": "2347000"
  },
  {
    "text": "the tree or the supervisor it's resigned the tree there so let's look back at our",
    "start": "2264089",
    "end": "2269549"
  },
  {
    "text": "gem server for a minute so let's say we started it up again and we did the push into it okay that's great but what if we",
    "start": "2269549",
    "end": "2276269"
  },
  {
    "text": "gave it a request with request something that we didn't previously find what",
    "start": "2276269",
    "end": "2281339"
  },
  {
    "text": "we're going to end up getting is this error back and the most important thing is the last word on the first sentence",
    "start": "2281339",
    "end": "2287249"
  },
  {
    "text": "is terminating so when an error occurs within our process the process just dies",
    "start": "2287249",
    "end": "2292829"
  },
  {
    "text": "out and this brings us into one of the more important aspects and ideas within",
    "start": "2292829",
    "end": "2298650"
  },
  {
    "text": "Erlang which is called let it die and as",
    "start": "2298650",
    "end": "2305130"
  },
  {
    "text": "those thing or you may you know go through a lot of trouble trying to figure out like here where's different ways in which my plot my application can",
    "start": "2305130",
    "end": "2312449"
  },
  {
    "text": "error out and I should try to capture those errors and handle them gracefully but in Erlang they realize that there's",
    "start": "2312449",
    "end": "2318930"
  },
  {
    "text": "you know almost infinite permutations in which this can happen so the only state you can bring your application back to",
    "start": "2318930",
    "end": "2325559"
  },
  {
    "text": "what you just guaranteed to have a good state is when you initially started it so why not just let it die and then just",
    "start": "2325559",
    "end": "2332670"
  },
  {
    "text": "restart it so you're back at that clean state again so even like right here we",
    "start": "2332670",
    "end": "2338519"
  },
  {
    "text": "can see that with the or the process even if I try to call it the pit is",
    "start": "2338519",
    "end": "2343859"
  },
  {
    "text": "undefined now the process is gone it's no longer available so the supervisors this is a looks like a child's drawing",
    "start": "2343859",
    "end": "2351299"
  },
  {
    "start": "2347000",
    "end": "2509000"
  },
  {
    "text": "but this was made by an adult Hey the website learned you some Erlang calm",
    "start": "2351299",
    "end": "2357630"
  },
  {
    "text": "it's kind of like a you know funny let's say for learning our line but the idea",
    "start": "2357630",
    "end": "2364769"
  },
  {
    "text": "here is that you have all the green our supervisors and all the Blues are purple and colorblind can tell the difference",
    "start": "2364769",
    "end": "2370170"
  },
  {
    "text": "but our workers so the idea you have a supervisor that's either watching other supervisors or watching workers and that",
    "start": "2370170",
    "end": "2376469"
  },
  {
    "text": "supervisor watches other supervisors and workers so you have this infinite depth treat potentially at the tree and so if",
    "start": "2376469",
    "end": "2383699"
  },
  {
    "text": "a worker dies then the supervisors are watching it is notified and the supervisor can decide what it wants to",
    "start": "2383699",
    "end": "2389939"
  },
  {
    "text": "do with that worker does it want to reboot that worker does it just want to keep it dead or should it",
    "start": "2389939",
    "end": "2397470"
  },
  {
    "text": "go back up the tree further if your Riesling a worker there different strategies in which you can reboot the",
    "start": "2397470",
    "end": "2402750"
  },
  {
    "text": "worker do we just reboot that one worker do we look at all the worker siblings and kill those off and then reboot",
    "start": "2402750",
    "end": "2409380"
  },
  {
    "text": "everything at what to put everything within you know the siblings processes back into a clean State so these are all",
    "start": "2409380",
    "end": "2416130"
  },
  {
    "text": "different options you have for working with supervisors and elixir I work so",
    "start": "2416130",
    "end": "2422160"
  },
  {
    "text": "hard I had to put it in toys okay so the",
    "start": "2422160",
    "end": "2427319"
  },
  {
    "text": "defined supervisor looks a little bit similar to the gem server so then you supervisor we have the start link on",
    "start": "2427319",
    "end": "2432660"
  },
  {
    "text": "this the difference here is this init function gets called after the supervisor starts after the start link",
    "start": "2432660",
    "end": "2440130"
  },
  {
    "text": "so supervisor sorry a certain link gets called passes in this state that was the",
    "start": "2440130",
    "end": "2445950"
  },
  {
    "text": "last argument on that and then I'm creating this list called children which is just the supervisors child processors",
    "start": "2445950",
    "end": "2454770"
  },
  {
    "text": "that's monitoring you get this worker function from the supervisor module",
    "start": "2454770",
    "end": "2460650"
  },
  {
    "text": "above and I am passing as the first argument our stack that previously defined and then it looks a little bit",
    "start": "2460650",
    "end": "2467609"
  },
  {
    "text": "another you really saw what's going on there but there's the list with two arguments in it the first argument is going to be the state that we rest start",
    "start": "2467609",
    "end": "2475680"
  },
  {
    "text": "our our gym server with the second argument is off the options that we had just a default and you list for",
    "start": "2475680",
    "end": "2482339"
  },
  {
    "text": "previously the reason for that is because the worker starting within the context of the supervisor now we don't",
    "start": "2482339",
    "end": "2488369"
  },
  {
    "text": "get access to pin and so we have to give it some sort of unique name that we can identify it on so that we can reference",
    "start": "2488369",
    "end": "2493530"
  },
  {
    "text": "it so in this case we're passing at the name option and we're just calling it my stack and then we call supervise can we",
    "start": "2493530",
    "end": "2499200"
  },
  {
    "text": "give it the children list and the strategy here is one-to-one you can look",
    "start": "2499200",
    "end": "2504329"
  },
  {
    "text": "up there's a whole little good documentation on lecture on what all the strategies mean okay so if we were to",
    "start": "2504329",
    "end": "2512160"
  },
  {
    "start": "2509000",
    "end": "2643000"
  },
  {
    "text": "start our supervisor now again it looks similar to when we started our gem server we get back to pit we don't",
    "start": "2512160",
    "end": "2518010"
  },
  {
    "text": "really need it you can if you're using it within another system you can hold on to it but for the purposes of this we're",
    "start": "2518010",
    "end": "2524819"
  },
  {
    "text": "not using again anyway so now we're calling the gem server for calling cast so again we're making that",
    "start": "2524819",
    "end": "2530760"
  },
  {
    "text": "a fire if we get requests to the gym server to push in the flow value onto the stack but instead of referencing the",
    "start": "2530760",
    "end": "2536910"
  },
  {
    "text": "pit we're going to reference the unique identifier for which was my stack so you",
    "start": "2536910",
    "end": "2542190"
  },
  {
    "text": "get back okay and now we're going to call Pater and called pop we get that close it's great",
    "start": "2542190",
    "end": "2547200"
  },
  {
    "text": "now we're going to call that same function that came one before that caused it to die and oh it died but the",
    "start": "2547200",
    "end": "2558450"
  },
  {
    "text": "supervisor we starts it oh I think I",
    "start": "2558450",
    "end": "2564600"
  },
  {
    "text": "actually had that on your twist and that you have the death on the other screen sorry oh now I have to go through all my steps again okay so this is this is when",
    "start": "2564600",
    "end": "2575430"
  },
  {
    "text": "we kill it right here and but this time instead that should be sorry that's the",
    "start": "2575430",
    "end": "2583440"
  },
  {
    "text": "syntax are that just a kid that should say my stack that also should say my study that's a complication error so",
    "start": "2583440",
    "end": "2590250"
  },
  {
    "text": "just over cast my stack what we find is that the supervisor saw that the worker",
    "start": "2590250",
    "end": "2596220"
  },
  {
    "text": "died and then automatically started whereas previously if you recall back in the previous slides that when I tried to",
    "start": "2596220",
    "end": "2601470"
  },
  {
    "text": "cat when I tried to push a new item onto the stack to the gem server is no longer able to do so because there's no longer",
    "start": "2601470",
    "end": "2607350"
  },
  {
    "text": "available the process had died out the difference here though is one thing to",
    "start": "2607350",
    "end": "2612480"
  },
  {
    "text": "be aware of is that it will reboot itself with its previous state I'm sorry with the state in which the supervisor",
    "start": "2612480",
    "end": "2617910"
  },
  {
    "text": "is to find us there are strategies for getting around that and there's the",
    "start": "2617910",
    "end": "2623070"
  },
  {
    "text": "concept of an agent within elixir basically when you instantiate your gem",
    "start": "2623070",
    "end": "2628320"
  },
  {
    "text": "server you can have it but you can push all that all those values into an agent which live outside the gem server and",
    "start": "2628320",
    "end": "2635430"
  },
  {
    "text": "then when the Jets ever dies you can be populate it with your populated state from the from the agent okay so this",
    "start": "2635430",
    "end": "2645090"
  },
  {
    "start": "2643000",
    "end": "2702000"
  },
  {
    "text": "last part is more opinion based and more subjective than objective but it's one",
    "start": "2645090",
    "end": "2651480"
  },
  {
    "text": "thing that I've experienced doesn't let you develop over the past four years and something that I've thought a lot about and what type of impact this means to",
    "start": "2651480",
    "end": "2657810"
  },
  {
    "text": "engineering teams and the question I pose is you know panel language make you happy when I first got into Ruby one of",
    "start": "2657810",
    "end": "2663720"
  },
  {
    "text": "the kind of core tenants of ruby was that ruby makes you happy there's a language",
    "start": "2663720",
    "end": "2668730"
  },
  {
    "text": "that was written to kind of do away with this idea that the end here had to be",
    "start": "2668730",
    "end": "2674790"
  },
  {
    "text": "the slave to the to the computer and you know the computer should be doing the",
    "start": "2674790",
    "end": "2680040"
  },
  {
    "text": "work for us so we have this nice you know beautiful looking language but it you know as we",
    "start": "2680040",
    "end": "2687240"
  },
  {
    "text": "indicated has its on locations so with",
    "start": "2687240",
    "end": "2693240"
  },
  {
    "text": "literature I found that it actually took that argument a bit a lot further or a",
    "start": "2693240",
    "end": "2699990"
  },
  {
    "text": "bit farther and the reason for that is you know some of the stuff that object oriented programming brings in olp and",
    "start": "2699990",
    "end": "2707060"
  },
  {
    "start": "2702000",
    "end": "2821000"
  },
  {
    "text": "here's the kind of classical hopi structure and you know this idea that oh",
    "start": "2707060",
    "end": "2714090"
  },
  {
    "text": "it's just objects and we have inheritance and we have objects can inherit from other objects it's so clean",
    "start": "2714090",
    "end": "2719370"
  },
  {
    "text": "it makes so much sense but you know yeah how many people seen this in a book and then a year or two from now this is what",
    "start": "2719370",
    "end": "2727170"
  },
  {
    "text": "they really got yeah have something like this it's absolutely nightmare it happens to everybody and that's because",
    "start": "2727170",
    "end": "2734280"
  },
  {
    "text": "you know P gives you a lot of rope and this is true of any language and it's",
    "start": "2734280",
    "end": "2739530"
  },
  {
    "text": "kind of like my argument against javascript in general is that it gives you too much flexibility and limitations",
    "start": "2739530",
    "end": "2745500"
  },
  {
    "text": "are actually better there's power in limiting yourself and what what you can do you know one of the kind of I don't",
    "start": "2745500",
    "end": "2755520"
  },
  {
    "text": "know if they're going to see that but the basic idea here is that you know as you know programmers you know we we sit",
    "start": "2755520",
    "end": "2762180"
  },
  {
    "text": "there and we you know we have at least an hour to ourselves we can build up this amazing state in our head on",
    "start": "2762180",
    "end": "2768210"
  },
  {
    "text": "exactly what's going on and then you know once we get interrupted it's gone right and so that he that ends up being",
    "start": "2768210",
    "end": "2774450"
  },
  {
    "text": "the big problem of object-oriented program is state so you have these objects that are carrying state around",
    "start": "2774450",
    "end": "2780860"
  },
  {
    "text": "they're not immediately accessible but buried in the memory somewhere whereas functional programming is right there in",
    "start": "2780860",
    "end": "2786840"
  },
  {
    "text": "your face the idea of data and data out you do not have in a classical pure",
    "start": "2786840",
    "end": "2794220"
  },
  {
    "text": "functional programming language you should not be able to access anything outside of the different",
    "start": "2794220",
    "end": "2800990"
  },
  {
    "text": "function that you're currently in now lit sir on our line does violate this a bit through its process message passing",
    "start": "2800990",
    "end": "2807470"
  },
  {
    "text": "so it's not 100% pure but within its own process it's completely pure I think I",
    "start": "2807470",
    "end": "2813440"
  },
  {
    "text": "had someone correct me before on the message passing thing so something wants to correct me on they completely pure in the process I'd appreciate it",
    "start": "2813440",
    "end": "2820190"
  },
  {
    "text": "but you know list of being a functional programming language this has a huge advantage not over just your ability to",
    "start": "2820190",
    "end": "2827660"
  },
  {
    "start": "2821000",
    "end": "3021000"
  },
  {
    "text": "learn it quickly if you know we took existing rails engineers and we gave",
    "start": "2827660",
    "end": "2834500"
  },
  {
    "text": "them give them the programming elixir book like the Atomics which is published by pragmatic programmers if you're",
    "start": "2834500",
    "end": "2839930"
  },
  {
    "text": "interested in lecture I highly suggest that you read it the first part of it was about two hundred pages and introduced convey ideas of functional",
    "start": "2839930",
    "end": "2846590"
  },
  {
    "text": "programming the syntax within a week this is no joke within a week they were making contributions back to a Phoenix",
    "start": "2846590",
    "end": "2852980"
  },
  {
    "text": "application that's not to say that they were expert literature engineers within a week not to say that they would learn",
    "start": "2852980",
    "end": "2858830"
  },
  {
    "text": "all the nuances of distribute programming on the week but just that you know the idea of funcle' programming",
    "start": "2858830",
    "end": "2863900"
  },
  {
    "text": "it ends up being very very simple and very very easy to to learn the reason",
    "start": "2863900",
    "end": "2869450"
  },
  {
    "text": "why in part like functional programming perhaps taking a while to catch on now",
    "start": "2869450",
    "end": "2874640"
  },
  {
    "text": "like you're seeing a lot of articles on functional programming due in part to memory limitations right so you're not",
    "start": "2874640",
    "end": "2882430"
  },
  {
    "text": "passing in values by reference within functional programming you're passing it",
    "start": "2882430",
    "end": "2888890"
  },
  {
    "text": "about passing everything by value and so that ends up being memory copy the memory allocation nowadays memory is",
    "start": "2888890",
    "end": "2896480"
  },
  {
    "text": "fairly cheap and so this is less of a concern but back when you had 16 megabytes of RAM yeah that was you know",
    "start": "2896480",
    "end": "2902480"
  },
  {
    "text": "that was concerning that was difficult so you know you could see the value of an object-oriented language that was",
    "start": "2902480",
    "end": "2908780"
  },
  {
    "text": "mutating memory on the fly back then but today the value is is really not there",
    "start": "2908780",
    "end": "2916430"
  },
  {
    "text": "for that really starting for that is not there all right anyway I will stop",
    "start": "2916430",
    "end": "2921500"
  },
  {
    "text": "roaming because I think I'm getting close to time I will just say go learn use some elixir it's an awesome language",
    "start": "2921500",
    "end": "2926990"
  },
  {
    "text": "and just to put myself again again CEO of doctoral",
    "start": "2926990",
    "end": "2932189"
  },
  {
    "text": "based in Boston we use Phoenix framework consulting elixir and also energy as consulting and you can find us at dr.",
    "start": "2932189",
    "end": "2938999"
  },
  {
    "text": "calm so thank you very much does the lik",
    "start": "2938999",
    "end": "2945839"
  },
  {
    "text": "sir support protocol only it programming in the class structure so there are no classes in elixir",
    "start": "2945839",
    "end": "2951630"
  },
  {
    "text": "there's modules it's just mainstays but what do you mean by perfect all work already programming a turbo when you",
    "start": "2951630",
    "end": "2957479"
  },
  {
    "text": "have you attempt to write a class structure and you have to extend it and based upon pattern matching so there is",
    "start": "2957479",
    "end": "2965039"
  },
  {
    "text": "an idea of an it's not really so much inheritance within elixir it's more like our class extensions you have modules",
    "start": "2965039",
    "end": "2972179"
  },
  {
    "text": "and you can actually have those modules to find compiled time functions that",
    "start": "2972179",
    "end": "2977849"
  },
  {
    "text": "will emit Erlang ASP and so when you look we do use gen server there's a",
    "start": "2977849",
    "end": "2984929"
  },
  {
    "text": "compile time function within the gen server module that will emit the the ASP",
    "start": "2984929",
    "end": "2991410"
  },
  {
    "text": "code that gets injected into the module that you're using it in so it's just yes there is a way to reuse code it's but",
    "start": "2991410",
    "end": "2999479"
  },
  {
    "text": "it's not through a it's not through a more like classical like class extension",
    "start": "2999479",
    "end": "3005269"
  },
  {
    "text": "style but it's it's done in such a way that it pushes all the work to build time okay thanks everyone and don't",
    "start": "3005269",
    "end": "3015619"
  },
  {
    "text": "forget to write in the app have a great day",
    "start": "3015619",
    "end": "3020049"
  }
]