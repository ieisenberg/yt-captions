[
  {
    "text": "[Music]",
    "start": "2540",
    "end": "11480"
  },
  {
    "text": "so we're going to talk about core data magic record and Swifty stuff today uh reminder before we get going uh to go",
    "start": "11480",
    "end": "18439"
  },
  {
    "text": "ahead and download the app review the the session and all that stuff so um I was going to say uh also if you're not",
    "start": "18439",
    "end": "25439"
  },
  {
    "text": "familiar with me I'm s MOA uh you might know me from a podcast called NS brief it's pretty cool the kids like it talk",
    "start": "25439",
    "end": "30759"
  },
  {
    "text": "about cool developer stuff with developer friends from around the world so got got lots of European people on",
    "start": "30759",
    "end": "37600"
  },
  {
    "text": "there so you might you might like to hear what they have to say uh I also work at a place called Lounge buddy out",
    "start": "37600",
    "end": "43360"
  },
  {
    "text": "in the small startup in San Francisco um so just so you know you can uh download that app if you travel a lot and uh go",
    "start": "43360",
    "end": "49879"
  },
  {
    "text": "do some stuff with that so um what we're going to talk about today uh data uh",
    "start": "49879",
    "end": "56520"
  },
  {
    "text": "data is uh the heart of your app or if you will the core uh data is is this",
    "start": "56520",
    "end": "63519"
  },
  {
    "text": "silent Workhorse you have these these these nice apps and there's all this stuff going on behind the scenes uh and",
    "start": "63519",
    "end": "69720"
  },
  {
    "text": "this is a this is a real life shot of of an app in work uh but we've got uh you",
    "start": "69720",
    "end": "75159"
  },
  {
    "text": "know we've got these mobile devices they're really handy they're really personal and they're really flashy and",
    "start": "75159",
    "end": "80439"
  },
  {
    "text": "the users kind of don't realize that uh the data is is super important so they",
    "start": "80439",
    "end": "86320"
  },
  {
    "text": "don't realize that data is what uh makes their app super useful super functional",
    "start": "86320",
    "end": "91880"
  },
  {
    "text": "and it's the reason why people come back and use their apps right so how do we tie uh the data to the UI right so we've",
    "start": "91880",
    "end": "99200"
  },
  {
    "text": "got a framework called core data which is hopefully you're aware of that uh and",
    "start": "99200",
    "end": "104280"
  },
  {
    "text": "the thing is is we've got these these apps and these like I said these things are nothing without data so you've got a",
    "start": "104280",
    "end": "109320"
  },
  {
    "text": "nice app it's got all this information on here now just kind of I didn't go through the exercise of scraping the the",
    "start": "109320",
    "end": "115240"
  },
  {
    "text": "the numbers off of here but if there was no data here what would this app be it would be pretty useful less it'd be just",
    "start": "115240",
    "end": "121159"
  },
  {
    "text": "a bunch of pixels all over the place there's no information the information is really what you're use what you're",
    "start": "121159",
    "end": "126200"
  },
  {
    "text": "looking for the fact that you have the pixels and the presentation and all the graphics in the UI help you consume the",
    "start": "126200",
    "end": "132840"
  },
  {
    "text": "data but if without the data your app is nothing so again we've got the this",
    "start": "132840",
    "end": "138319"
  },
  {
    "text": "framework that we need to actually get our data into the app and into the users's uh uh interface here so core",
    "start": "138319",
    "end": "146640"
  },
  {
    "text": "data you like like my my pictures there you can get that one it's pretty easy reference right thought",
    "start": "146640",
    "end": "153040"
  },
  {
    "text": "the the nerd crowd would get that uh so some of you might be familiar with something called an orm object",
    "start": "153040",
    "end": "159200"
  },
  {
    "text": "relational mapper um I was kind of thinking that this would be more of an Enterprise focused crowd and that's",
    "start": "159200",
    "end": "164599"
  },
  {
    "text": "definitely one of the technologies that I know uh Enterprises use a lot uh things like I think hibernate uh I think",
    "start": "164599",
    "end": "170760"
  },
  {
    "text": "back in the day when I didn net it was n hibernate was the big deal um stuff like",
    "start": "170760",
    "end": "176239"
  },
  {
    "text": "that uh the problem with or's is there are generally generally leaky abstractions uh so things like uh having",
    "start": "176239",
    "end": "184720"
  },
  {
    "text": "SQL queries embedded in your um actual app code is generally the one big",
    "start": "184720",
    "end": "190640"
  },
  {
    "text": "problem that that we have with ORS um just the fact that you kind of have this idea that your your client code knows",
    "start": "190640",
    "end": "197680"
  },
  {
    "text": "about all how the database works and is structured and everything is it's kind of bad because then you can do secret",
    "start": "197680",
    "end": "203720"
  },
  {
    "text": "things in this one place but then this other place doesn't know that secret trick so then you try to access the same",
    "start": "203720",
    "end": "209280"
  },
  {
    "text": "data and it doesn't do it the right way so uh you can kind of run into some problems by by having those abstractions",
    "start": "209280",
    "end": "214959"
  },
  {
    "text": "be leaky now core data is is a little bit different uh it's actually an object",
    "start": "214959",
    "end": "220680"
  },
  {
    "text": "uh graph persistence framework so you're actually dealing with an a graph of objects and they just happen to save to",
    "start": "220680",
    "end": "226799"
  },
  {
    "text": "disk or some uh persistence mechanism now uh our previous session had mentioned an in-memory format now that's",
    "start": "226799",
    "end": "233760"
  },
  {
    "text": "certainly one place that it could go you could also write your own custom format uh or you could use something like like",
    "start": "233760",
    "end": "239920"
  },
  {
    "text": "a Json or pist you could actually write an atomic store that stores all of your data to a pist if you need to debug uh",
    "start": "239920",
    "end": "247879"
  },
  {
    "text": "debug and quotes there uh some of your data uh you can do it to an XML for f uh",
    "start": "247879",
    "end": "253360"
  },
  {
    "text": "an XML file uh I wouldn't use that in your regular app so it's really slow um",
    "start": "253360",
    "end": "258560"
  },
  {
    "text": "but anyhow let's just go over core data and some of the uh objects that we have uh real quick uh first of all let's",
    "start": "258560",
    "end": "265120"
  },
  {
    "text": "start off with our NS persistent store like I was just saying you could have any type of format that you need uh Json",
    "start": "265120",
    "end": "271400"
  },
  {
    "text": "uh if you wanted to do Json you'd have to write this yourself uh but you could but you have that flexibility to do that",
    "start": "271400",
    "end": "277320"
  },
  {
    "text": "and a persistance store is an object in your stack think of it as the bottom of your stack this is where all the data",
    "start": "277320",
    "end": "283400"
  },
  {
    "text": "goes uh once you actually save it to dis uh so next up is our uh Precision store",
    "start": "283400",
    "end": "289400"
  },
  {
    "text": "coordinator so the coordinator helps manage traffic between some of the upper",
    "start": "289400",
    "end": "294680"
  },
  {
    "text": "layers we'll talk about in a second and the persistent store so this just kind of says here's an object uh where does",
    "start": "294680",
    "end": "301639"
  },
  {
    "text": "it need to save and it saves it in the proper store and it and it kind of does a lot of that work for you so it's kind of a traffic cop for your data uh",
    "start": "301639",
    "end": "308639"
  },
  {
    "text": "between the upper and lower levels the next thing that we've got in our core data tour here is the NS manage object",
    "start": "308639",
    "end": "314960"
  },
  {
    "text": "model uh if you're familiar with databases you can think of this as your schema uh this describes what your data",
    "start": "314960",
    "end": "321280"
  },
  {
    "text": "looks like uh how uh you know what entities there are what properties they",
    "start": "321280",
    "end": "326840"
  },
  {
    "text": "have how what how each entity is related to each other uh whether an entity has a super entity",
    "start": "326840",
    "end": "332360"
  },
  {
    "text": "or not uh this this manage object model also has things like uh fetch request",
    "start": "332360",
    "end": "337720"
  },
  {
    "text": "that you can have preann uh you can have some different configurations but this basically gives you a nice overview of",
    "start": "337720",
    "end": "344240"
  },
  {
    "text": "what your data looks like and it's really nice uh because what we also have is a tool that is basically a visual",
    "start": "344240",
    "end": "350400"
  },
  {
    "text": "modeler uh what What's nice about it is that you can actually see all of the objects in your application and actually",
    "start": "350400",
    "end": "357080"
  },
  {
    "text": "visualize the relationships and the hierarchy so what I like to do is have all of my kind of my my domain objects",
    "start": "357080",
    "end": "364479"
  },
  {
    "text": "into this in this uh visual editor uh just get basically have a map of what",
    "start": "364479",
    "end": "370319"
  },
  {
    "text": "what I'm uh trying to to work with uh so next on the the list here is the NS",
    "start": "370319",
    "end": "376759"
  },
  {
    "text": "manage object context so uh the best analogy for this is basically a scratch Pad so uh what",
    "start": "376759",
    "end": "384880"
  },
  {
    "text": "you'll be doing late most often with core data is you'll be using uh the NS manage object context uh with tons of",
    "start": "384880",
    "end": "391800"
  },
  {
    "text": "NIS man managed objects right so uh an object is going to uh I guess be related",
    "start": "391800",
    "end": "399160"
  },
  {
    "text": "to a context in in a way that uh one instance kind of relates to one uh one",
    "start": "399160",
    "end": "405479"
  },
  {
    "text": "instance of an object relates to one instance of a context right so if you have multiple contexts and you have",
    "start": "405479",
    "end": "411000"
  },
  {
    "text": "multiple objects those objects are not going to belong to two different contexts right so context is a place",
    "start": "411000",
    "end": "416800"
  },
  {
    "text": "where you can say uh I need to save this thing of this I need to write this pink piece of data and it's only going to",
    "start": "416800",
    "end": "423560"
  },
  {
    "text": "write it in that context if you have another context which we'll talk about shortly and you have the same piece of",
    "start": "423560",
    "end": "428680"
  },
  {
    "text": "data it's not going to be the same actual row right so this is where this",
    "start": "428680",
    "end": "433919"
  },
  {
    "text": "this whole flow of traffic gets down gets a little complicated and that's why you have something like a coordinator to manage who writes to the actual store",
    "start": "433919",
    "end": "441120"
  },
  {
    "text": "and who wins and how to merge these things there's a lot of moving pieces in in a core data stack all right so we've",
    "start": "441120",
    "end": "447639"
  },
  {
    "text": "got these relationships here so this is a really high level overview",
    "start": "447639",
    "end": "452960"
  },
  {
    "text": "very not in depth I'm hoping uh most of you already know a lot of the things about core data and about these objects",
    "start": "452960",
    "end": "459120"
  },
  {
    "text": "but uh what I wanted to get to was maybe some of the code uh this is a very",
    "start": "459120",
    "end": "464520"
  },
  {
    "text": "simple simple way to create a person object uh for use in your code this is",
    "start": "464520",
    "end": "470560"
  },
  {
    "text": "kind of the raw raw way to do it so what you do is you get the entity description so the NS entity description is an",
    "start": "470560",
    "end": "477639"
  },
  {
    "text": "object that is uh stored in your manage object model that describes what that",
    "start": "477639",
    "end": "482879"
  },
  {
    "text": "object looks like in the model right so this is saying I have an I have a class",
    "start": "482879",
    "end": "488639"
  },
  {
    "text": "The Entity description so create me an instance of a person in this case that's a lot of code",
    "start": "488639",
    "end": "495000"
  },
  {
    "text": "to just say person alakan nit or person new right that's a lot of code for that",
    "start": "495000",
    "end": "501520"
  },
  {
    "text": "seems kind of nutty here's how we would find what are we finding in here I forgot I think we're finding employees",
    "start": "501520",
    "end": "508960"
  },
  {
    "text": "yeah it's it's it got it got moved a little bit but yeah we're finding employees in this example all we're",
    "start": "508960",
    "end": "514320"
  },
  {
    "text": "doing is we're searching for employees we are setting a uh sort order and we're",
    "start": "514320",
    "end": "520080"
  },
  {
    "text": "actually doing a little bit of a filter just as an example for a predicate and then we're also sorting things and then",
    "start": "520080",
    "end": "525680"
  },
  {
    "text": "we have a fetch request and we send it off and then in case we have errors we also have to andle the errors every time",
    "start": "525680",
    "end": "532680"
  },
  {
    "text": "that's a lot of code it's a lot of uh very error prone messy code right",
    "start": "532680",
    "end": "540040"
  },
  {
    "text": "so and if we wanted to save stuff well we have to use uh perform block now so",
    "start": "540040",
    "end": "545920"
  },
  {
    "text": "uh in kind of the the pre I think iOS 7 days before iOS 7 you didn't have to use",
    "start": "545920",
    "end": "551920"
  },
  {
    "text": "perform block you could get away with it uh without using it um especially since it's a newer API uh but nowadays you",
    "start": "551920",
    "end": "558720"
  },
  {
    "text": "have to use perform block or perform block and weight and if you're going to do anything with with any uh object data",
    "start": "558720",
    "end": "564600"
  },
  {
    "text": "you want to do that here and to save data you're going to take your data",
    "start": "564600",
    "end": "570200"
  },
  {
    "text": "uh and you're going to have another context and you're going to do it on on this Moc uh mock object here and you",
    "start": "570200",
    "end": "577160"
  },
  {
    "text": "have to make sure that you load the object that you want to save into that",
    "start": "577160",
    "end": "582200"
  },
  {
    "text": "context that you're performing The Block into modify the changes inside that block and then do your perform saves",
    "start": "582200",
    "end": "588959"
  },
  {
    "text": "inside the perform block call this is very complicated I'm not even saying this correctly to make you understand I know this this is here to kind of show",
    "start": "588959",
    "end": "595640"
  },
  {
    "text": "you just how I guess difficult some of these core data apis are because it's",
    "start": "595640",
    "end": "600800"
  },
  {
    "text": "not really intuitive as to when you need to use what right just the fact that I",
    "start": "600800",
    "end": "605880"
  },
  {
    "text": "said this perform block is something that you need to use all the time just kind of adds to the confusion I think",
    "start": "605880",
    "end": "611120"
  },
  {
    "text": "because I don't see a whole lot of people using that so this is the entity modeler uh this is really nice the other",
    "start": "611120",
    "end": "617680"
  },
  {
    "text": "the thing about this thing is is that um when you create a new entity in your uh",
    "start": "617680",
    "end": "625160"
  },
  {
    "text": "uh model here right so when you do this you go up to file and I think you'll say uh one of the menus and say uh create",
    "start": "625160",
    "end": "633200"
  },
  {
    "text": "new uh entity for from the model right so you'll pick the entity that it relates to so say I wanted to create the",
    "start": "633200",
    "end": "639440"
  },
  {
    "text": "new GitHub event uh class code so I could tie that code to this entity and",
    "start": "639440",
    "end": "645399"
  },
  {
    "text": "then it'll xcode will generate you a class file well when you change uh this",
    "start": "645399",
    "end": "652480"
  },
  {
    "text": "entity here like adding a new attribute or change the type or change the relationships or anything like that you",
    "start": "652480",
    "end": "659279"
  },
  {
    "text": "have to manually go and update that code that you just edited in xcode or created in xcode and if you go and update it",
    "start": "659279",
    "end": "666320"
  },
  {
    "text": "through xcode it will go and delete all of your previous changes so that was kind of not cool so all of these things",
    "start": "666320",
    "end": "674639"
  },
  {
    "text": "where it's cool as core data is it's like why what what a big pain in the butt so uh one of the solutions to one",
    "start": "674639",
    "end": "683000"
  },
  {
    "text": "of the problems is called a mo generator so that last problem that I talked about",
    "start": "683000",
    "end": "688200"
  },
  {
    "text": "where we have something that uh you have the code tied to the way that your",
    "start": "688200",
    "end": "693839"
  },
  {
    "text": "entity is described in that manage object model uh those things together um",
    "start": "693839",
    "end": "699000"
  },
  {
    "text": "that uh is solved using this tool called mod generator and it uses something called the generation gap pattern uh and",
    "start": "699000",
    "end": "705920"
  },
  {
    "text": "the generation G pattern is really really simple uh you basically have a Base Class A very common Base Class and",
    "start": "705920",
    "end": "712079"
  },
  {
    "text": "you have uh a subass that's generated off of that base class so in our case",
    "start": "712079",
    "end": "717120"
  },
  {
    "text": "with NS manage objects right right so the manage NS manage object will be our Base Class and mode generator will",
    "start": "717120",
    "end": "724360"
  },
  {
    "text": "automatically generate and regenerate based on the schema the and the manage object model it'll regenerate all the",
    "start": "724360",
    "end": "731519"
  },
  {
    "text": "properties all the attributes all the things that you need and a to be able to uh interact with core data uh on a code",
    "start": "731519",
    "end": "738279"
  },
  {
    "text": "basis much easier so it'll generate that all of that uh boilerplate code for you and",
    "start": "738279",
    "end": "745000"
  },
  {
    "text": "it'll update it every time and then what you do in that in that case is then use your own handed subass off",
    "start": "745000",
    "end": "753320"
  },
  {
    "text": "of the generated class so this is that generation gap so the between instead of having uh NS manage object and then",
    "start": "753320",
    "end": "760440"
  },
  {
    "text": "directly subclassing that you have uh the generated code in the middle and that that gets you uh buy a lot of stuff",
    "start": "760440",
    "end": "767320"
  },
  {
    "text": "and that's a super handy tool I use it all the time um definitely open source you can go get that on GitHub and the",
    "start": "767320",
    "end": "774079"
  },
  {
    "text": "way that I use it is I actually have it in of as part of my xcode build step so",
    "start": "774079",
    "end": "779240"
  },
  {
    "text": "I've got a little script there and when you get the uh the notes from this talk uh there'll be a link to this script",
    "start": "779240",
    "end": "785920"
  },
  {
    "text": "that I have and I basically what I do is I have this regenerate core data entities code and that will go and",
    "start": "785920",
    "end": "793320"
  },
  {
    "text": "rebuild and regenerate all of those generated files and I'll make sure I do that before the compile sources step in",
    "start": "793320",
    "end": "800880"
  },
  {
    "text": "my project and that way every time I do command b or you know command R to run",
    "start": "800880",
    "end": "806600"
  },
  {
    "text": "uh I've got my entities all up to date based on what's configured in my core data model automatically there's there's",
    "start": "806600",
    "end": "814000"
  },
  {
    "text": "no more thinking of that it's just I change it and it's done uh automatic stuff like that is super handy so you",
    "start": "814000",
    "end": "820880"
  },
  {
    "text": "can grab this uh script um I update this uh often enough when I figure out how to",
    "start": "820880",
    "end": "827279"
  },
  {
    "text": "do more scripty Shelly stuff but uh it's very useful and I I recommend this as part of your build step when you're",
    "start": "827279",
    "end": "833040"
  },
  {
    "text": "using core data that gets rid of a little bit more pain the other thing to get rid of pain uh is magical record uh",
    "start": "833040",
    "end": "838519"
  },
  {
    "text": "this certainly uh has helped me over the years and new in 3.0 we have some more fun stuff so um one of the fun things in",
    "start": "838519",
    "end": "848040"
  },
  {
    "text": "magical record is now we have things called Stacks so we have a whole uh",
    "start": "848040",
    "end": "854320"
  },
  {
    "text": "object to kind of collect all of those different objects right so one of the things with core data which was kind of",
    "start": "854320",
    "end": "860639"
  },
  {
    "text": "weird is that you have four different objects that you have to use in order to just access a file right so when it",
    "start": "860639",
    "end": "867759"
  },
  {
    "text": "comes down to it uh you're just trying to get data and push it down into a file",
    "start": "867759",
    "end": "872959"
  },
  {
    "text": "on disk so this is really like a file interface format right and you have all of these different objects to kind of do",
    "start": "872959",
    "end": "879199"
  },
  {
    "text": "all these different things and it's overly complicated so what I've done is kind of created this idea of a stack",
    "start": "879199",
    "end": "886959"
  },
  {
    "text": "that basically holds on to all of those objects into one object that you can use uh with an easier interface so that you",
    "start": "886959",
    "end": "892720"
  },
  {
    "text": "just do the things that you need to do and the stack will kind of figure out all of the details in between to do them",
    "start": "892720",
    "end": "898279"
  },
  {
    "text": "to do do them in the manner that is most efficient based on the type of Stack that you've chosen right and so in this",
    "start": "898279",
    "end": "904880"
  },
  {
    "text": "case this is a very simple stack a SQL light magical record stack all it does is it has one persistent store one",
    "start": "904880",
    "end": "910800"
  },
  {
    "text": "coordinator one model one context done just very very simple one of each and",
    "start": "910800",
    "end": "916600"
  },
  {
    "text": "all you get is the context you save data to the stack and it'll figure it out and to turn it on you just say hey I need a",
    "start": "916600",
    "end": "922560"
  },
  {
    "text": "new SQL light stack if you want to tell it a particular store file name because",
    "start": "922560",
    "end": "927639"
  },
  {
    "text": "you don't like the default one just give it a parameter it's it's a very simple thing like you already know",
    "start": "927639",
    "end": "932759"
  },
  {
    "text": "what you want to do you don't need to go through the the exercise of redoing all of that core data code especially the",
    "start": "932759",
    "end": "939639"
  },
  {
    "text": "sample code that Apple gives you in their templates horrible don't use it please so we looked at this example a",
    "start": "939639",
    "end": "946279"
  },
  {
    "text": "little bit earlier with uh fetching if we look at some of the stuff that was um what we were actually looking for uh we",
    "start": "946279",
    "end": "952959"
  },
  {
    "text": "can actually boil it down to something like this with magical record so all we need to do is um let me",
    "start": "952959",
    "end": "959800"
  },
  {
    "text": "see this was kind of going a little bit slow maybe I'll go back here all right here we go so what I wanted to point out",
    "start": "959800",
    "end": "966000"
  },
  {
    "text": "here was like out of all of this code the only things that were actually like really important were like the class",
    "start": "966000",
    "end": "972480"
  },
  {
    "text": "name and the predicate and how we're sorting right all of that other stuff should just be automatic or refactored",
    "start": "972480",
    "end": "979319"
  },
  {
    "text": "into some kind of helper method and that's what we're actually trying to do with magical record so we're actually just trying to say have a simple way to",
    "start": "979319",
    "end": "986199"
  },
  {
    "text": "get the data have a function or method will do that and just a really nice way",
    "start": "986199",
    "end": "991519"
  },
  {
    "text": "to kind of read the code and just see that you're actually just fetching data without having to worry about all of the",
    "start": "991519",
    "end": "997040"
  },
  {
    "text": "details the error handling any logging uh how to format the fetch request you",
    "start": "997040",
    "end": "1003000"
  },
  {
    "text": "really don't care all you want is the data and this lets you access the data with a really simple",
    "start": "1003000",
    "end": "1009000"
  },
  {
    "text": "API so if we wanted to save data this one this one I think is like the the",
    "start": "1009000",
    "end": "1014360"
  },
  {
    "text": "really awesome part of magical record if we want to save data we had to do a",
    "start": "1014360",
    "end": "1019600"
  },
  {
    "text": "whole lot of stuff we had to create another managed object context uh if we wanted to have multiple contexts which",
    "start": "1019600",
    "end": "1025360"
  },
  {
    "text": "is very common we have to figure out how to merge that have to set how to set it up especially in the old days before uh",
    "start": "1025360",
    "end": "1032079"
  },
  {
    "text": "our nested context scenario with cord data we had to use uh NS notification center to listen for the notification",
    "start": "1032079",
    "end": "1039038"
  },
  {
    "text": "and observe and merge and do all this all of this stuff that you just didn't want to deal with and all I wanted was I",
    "start": "1039039",
    "end": "1046000"
  },
  {
    "text": "just want to save data it's like as as simp as that and if I have to save data I have to do it through a context on",
    "start": "1046000",
    "end": "1051919"
  },
  {
    "text": "occasion so I made this API that says hey save with block and here's the",
    "start": "1051919",
    "end": "1058080"
  },
  {
    "text": "context that you write all your data to basically says here's where you're going to save your changes to I will create it",
    "start": "1058080",
    "end": "1064799"
  },
  {
    "text": "for you I will save it for you I will also do all the merging I will handle all the errors everything is already",
    "start": "1064799",
    "end": "1071200"
  },
  {
    "text": "handled it's just a really simple API that you can focus on your data right",
    "start": "1071200",
    "end": "1076840"
  },
  {
    "text": "and what's nice is you can also have a completion Handler so when you know that so when magical record knows that the",
    "start": "1076840",
    "end": "1083000"
  },
  {
    "text": "that the save has finally completed that step is done everything persisted on disk uh then you'll get a completion",
    "start": "1083000",
    "end": "1089240"
  },
  {
    "text": "block and you can kind of do some stuff there uh I have seen this API misused however which I guess any API can be",
    "start": "1089240",
    "end": "1095440"
  },
  {
    "text": "misused but uh it's definitely uh has had some good intentions here and it's been very useful so U there's a lot of",
    "start": "1095440",
    "end": "1102200"
  },
  {
    "text": "good ways that you can use this API so the thing about uh core data and",
    "start": "1102200",
    "end": "1108080"
  },
  {
    "text": "like like I said it's just this all it it boils down to core data being a simple API or an API that lets you save",
    "start": "1108080",
    "end": "1116120"
  },
  {
    "text": "changes to a file on disk so why do we need all of these objects and all this configuration all this complication when",
    "start": "1116120",
    "end": "1123039"
  },
  {
    "text": "something like maybe nscoder could do or a pis format would do right well the",
    "start": "1123039",
    "end": "1128880"
  },
  {
    "text": "thing is is like this handles a lot of uh it handles objects",
    "start": "1128880",
    "end": "1134919"
  },
  {
    "text": "directly and uh you don't have to you have various uh performance",
    "start": "1134919",
    "end": "1140960"
  },
  {
    "text": "characteristics and various flexibilities with your architecture they solve different problems uh for different uh things in your in your app",
    "start": "1140960",
    "end": "1147640"
  },
  {
    "text": "yeah you had a question yeah can I think of this whole stack as a serialization um framework yeah it's",
    "start": "1147640",
    "end": "1154679"
  },
  {
    "text": "it's a well being an object graph persistence framework I mean it's it's about serializing and the serialization",
    "start": "1154679",
    "end": "1161360"
  },
  {
    "text": "happens in the NS manage object itself so so yeah so yeah it's definitely a serialization framework um and nscoder",
    "start": "1161360",
    "end": "1169000"
  },
  {
    "text": "pist they're all different types of serializations within U the Coco framework itself so I guess the point is",
    "start": "1169000",
    "end": "1176159"
  },
  {
    "text": "I'm trying to say is like we have these four objects why do we need four objects or why do we need these four classes right",
    "start": "1176159",
    "end": "1182679"
  },
  {
    "text": "so in certain cases you're going to actually need a second manage object context especially now because core data",
    "start": "1182679",
    "end": "1189320"
  },
  {
    "text": "is going to actually try to manage the threading for you so what what'll typically be the case is you'll have",
    "start": "1189320",
    "end": "1194799"
  },
  {
    "text": "like one of these contexts be the on the main thread and the other one be on the private uh private ceue or basically a",
    "start": "1194799",
    "end": "1201360"
  },
  {
    "text": "background context so a lot of times you'll do your changes and you'll save them on the background cue and get some",
    "start": "1201360",
    "end": "1207400"
  },
  {
    "text": "updates on the main Q thread right so you'll have two different ones and if you have them in isolation you could say",
    "start": "1207400",
    "end": "1212559"
  },
  {
    "text": "save this one and then notify the other one and merge those changes separately so this second context mode is very",
    "start": "1212559",
    "end": "1221440"
  },
  {
    "text": "common this is this is kind of the preferred way to use uh core data in general um but there's also the case",
    "start": "1221440",
    "end": "1228840"
  },
  {
    "text": "uh well you'll need uh maybe multiple stores and why would you need multiple",
    "start": "1228840",
    "end": "1234080"
  },
  {
    "text": "stores well think of having uh different word documents or not word Pages",
    "start": "1234080",
    "end": "1239559"
  },
  {
    "text": "documents uh open right so you have different files different instances of",
    "start": "1239559",
    "end": "1244640"
  },
  {
    "text": "files on disk and you have them all connected to the same coordinator now in your application it doesn't really care",
    "start": "1244640",
    "end": "1251240"
  },
  {
    "text": "which file is every object belongs to that's the job of the coordinator the coordinator knows hey here's an object",
    "start": "1251240",
    "end": "1258799"
  },
  {
    "text": "and I it's going to be saved well pick you know persistent store b or here's another object pers you know pick the",
    "start": "1258799",
    "end": "1265400"
  },
  {
    "text": "other persistent store C it knows how to do that that's what that's what that coordinator does it's the traffic cop so",
    "start": "1265400",
    "end": "1271120"
  },
  {
    "text": "it knows that that it knows which file the object should go into the data",
    "start": "1271120",
    "end": "1276360"
  },
  {
    "text": "should go into but from your apps perspective it doesn't really care it just says hey I have some data it came",
    "start": "1276360",
    "end": "1283039"
  },
  {
    "text": "from somewhere core data can deal with that and you don't have to deal with any of that so it's kind of nice",
    "start": "1283039",
    "end": "1288919"
  },
  {
    "text": "so another another scenario is that if you really need to save like a whole bunch of data really really fast there",
    "start": "1288919",
    "end": "1295279"
  },
  {
    "text": "are scenarios where you have high throughput you basically say I'm importing a bunch of data and I'm going",
    "start": "1295279",
    "end": "1301159"
  },
  {
    "text": "to do it at you know the store level I'm going to do the file locking at the lowest level possible which basically is",
    "start": "1301159",
    "end": "1306640"
  },
  {
    "text": "on disk or at the operating system level right so in a lot of cases you're going to actually share this persistence store",
    "start": "1306640",
    "end": "1312400"
  },
  {
    "text": "and you're going to have two parallel Stacks all the way up uh right so uh this is this is a case where you're",
    "start": "1312400",
    "end": "1318799"
  },
  {
    "text": "importing tons and tons of data and this may be more common on a Mac um but certainly you could do this on iPhone as",
    "start": "1318799",
    "end": "1325080"
  },
  {
    "text": "well um but you're going to import a lot of data and you want it to be as fast as possible so that means if you're doing",
    "start": "1325080",
    "end": "1330880"
  },
  {
    "text": "in a multi-processing or multi-threading environment you want to have as few locks as possible right because locks slow you down so to have as few locks as",
    "start": "1330880",
    "end": "1338159"
  },
  {
    "text": "possible you have a completely uh separate uh persistance store",
    "start": "1338159",
    "end": "1343559"
  },
  {
    "text": "coordinator and they're going to share the same model so because the data is going to look exactly the same so again",
    "start": "1343559",
    "end": "1350840"
  },
  {
    "text": "uh this is some examples of how to do that in magical record uh so we can set",
    "start": "1350840",
    "end": "1356080"
  },
  {
    "text": "up a sqlite stack by the default really easy uh if we need an inmemory store",
    "start": "1356080",
    "end": "1361799"
  },
  {
    "text": "this is how you would do it magical record it's super awesome super easy because it's pretty readable like I",
    "start": "1361799",
    "end": "1367440"
  },
  {
    "text": "don't know about you but like some of the uh options in in core data so i' never never remember all those stupid",
    "start": "1367440",
    "end": "1373320"
  },
  {
    "text": "enumerations and and configuration values so uh this this is usually a lot easier for me I just changed the slide",
    "start": "1373320",
    "end": "1379960"
  },
  {
    "text": "if you didn't notice because it's so subtle right all you change is auto migrating stack you",
    "start": "1379960",
    "end": "1385559"
  },
  {
    "text": "know and if you need to do a manual one it does it there uh and if you need to set the store name or you can set the",
    "start": "1385559",
    "end": "1391159"
  },
  {
    "text": "path the URL you know when you're trying to save data to a file all you care",
    "start": "1391159",
    "end": "1396440"
  },
  {
    "text": "about is maybe where that file is located and what it's named and there may be some performance details that you",
    "start": "1396440",
    "end": "1402559"
  },
  {
    "text": "care about at one point but after that you don't care right you only care that you have something to say to so uh it",
    "start": "1402559",
    "end": "1410240"
  },
  {
    "text": "kind of takes care of that for you again it's on it's on GitHub so out there open source for free uh for all you guys to",
    "start": "1410240",
    "end": "1417000"
  },
  {
    "text": "to grab uh it's pretty popular with the kids these days so yeah but anyhow uh we wanted to talk",
    "start": "1417000",
    "end": "1424679"
  },
  {
    "text": "about Swift and kind of maybe going forward a little bit so the thing about",
    "start": "1424679",
    "end": "1430279"
  },
  {
    "text": "magical record uh and maybe you've noticed this it's like I you know we tal wanted to talk about Swift but up until",
    "start": "1430279",
    "end": "1435880"
  },
  {
    "text": "now all of the code has been in Objective C so Objective C has definitely influenced",
    "start": "1435880",
    "end": "1441679"
  },
  {
    "text": "the design of the magical record code base and just the way that magical Record Works uh it's very Dynamic core",
    "start": "1441679",
    "end": "1449720"
  },
  {
    "text": "data itself is a very Dynamic framework it's very key value coding oriented uh",
    "start": "1449720",
    "end": "1455559"
  },
  {
    "text": "if you notice on when you're saving data uh when you want to set data you set it",
    "start": "1455559",
    "end": "1461039"
  },
  {
    "text": "uh using key value coding type of methods you say object set value for a",
    "start": "1461039",
    "end": "1466360"
  },
  {
    "text": "key right so you have that that same same mechanism and it keeps it very Dynamic um but with swift it's not like",
    "start": "1466360",
    "end": "1473799"
  },
  {
    "text": "that Swift likes to be pre-compiled it likes to know about all of these properties ahead of time right so how do",
    "start": "1473799",
    "end": "1478880"
  },
  {
    "text": "we reconcile that right and the the core data Engineers reconcile that by putting",
    "start": "1478880",
    "end": "1485240"
  },
  {
    "text": "a nice NS manage uh at NS manag keyword in the language in Swift so that it",
    "start": "1485240",
    "end": "1491240"
  },
  {
    "text": "could tell the compiler like this still needs to be dynamic and it's core data specific and there's all these things",
    "start": "1491240",
    "end": "1496360"
  },
  {
    "text": "that it does for you under the covers that we don't even know but all we have to do is we have to tell the language",
    "start": "1496360",
    "end": "1502000"
  },
  {
    "text": "that this is a special property and it has special special things that go on under the covers that we don't need to",
    "start": "1502000",
    "end": "1507240"
  },
  {
    "text": "worry about but that just kind of shows you that cord dat is is a different beast when it comes to how it works with",
    "start": "1507240",
    "end": "1514279"
  },
  {
    "text": "Swift and Objective C as well so uh Magic record also took",
    "start": "1514279",
    "end": "1520320"
  },
  {
    "text": "advantage of objective c uh just to just as the way it works um so a couple of",
    "start": "1520320",
    "end": "1526679"
  },
  {
    "text": "things to note like in this example here uh one of the things that we had to do",
    "start": "1526679",
    "end": "1531799"
  },
  {
    "text": "uh early on uh was add this mror prefix to everything right so that prefix is a",
    "start": "1531799",
    "end": "1538919"
  },
  {
    "text": "result of objective c in categories and what happens when uh categories get",
    "start": "1538919",
    "end": "1546200"
  },
  {
    "text": "redefined and reloaded later on in the system right so if you have two",
    "start": "1546200",
    "end": "1551240"
  },
  {
    "text": "categories name the exact same thing which one gets",
    "start": "1551240",
    "end": "1556679"
  },
  {
    "text": "loaded undefined typically you might guess it's",
    "start": "1556679",
    "end": "1561760"
  },
  {
    "text": "the last one to be loaded which is what my logical guess would be but that's still undefined that's it could be that",
    "start": "1561760",
    "end": "1568120"
  },
  {
    "text": "it could be that it just picks a random number and then picks whichever one it likes it doesn't matter we don't know uh",
    "start": "1568120",
    "end": "1573640"
  },
  {
    "text": "so we had to use something like this that basically said this is our name space these methods that have this",
    "start": "1573640",
    "end": "1578919"
  },
  {
    "text": "prefix are ours guaranteed if anybody over writes them well you know they really messed up so that's a consequence",
    "start": "1578919",
    "end": "1587159"
  },
  {
    "text": "of um you know object of The Objective C language the other thing that we could do here uh was put stuff as class",
    "start": "1587159",
    "end": "1594279"
  },
  {
    "text": "methods here now we could still do that in uh in Swift but I think in Objective C it's a little easier to read this way",
    "start": "1594279",
    "end": "1600960"
  },
  {
    "text": "with a class method maybe it's a little little more complicated uh and the other thing is uh these name parameters",
    "start": "1600960",
    "end": "1607640"
  },
  {
    "text": "definitely influence the way that the the the API kind of was designed and the",
    "start": "1607640",
    "end": "1613360"
  },
  {
    "text": "way that we try to label things and flow and kind of more class Bic um you know",
    "start": "1613360",
    "end": "1619880"
  },
  {
    "text": "uh API Design Elements but if we were to convert it to Swift some things would",
    "start": "1619880",
    "end": "1625840"
  },
  {
    "text": "read really really weird so if we have that Mr underscore that doesn't really fit with the Swift language so you know",
    "start": "1625840",
    "end": "1633880"
  },
  {
    "text": "we don't want that to carry over the other thing is that magical record codebase is pretty large it is",
    "start": "1633880",
    "end": "1641960"
  },
  {
    "text": "quite large I was surprised at how large this code base is um i' I've always said",
    "start": "1641960",
    "end": "1647200"
  },
  {
    "text": "that magical record is a framework and a collection of core data related methods",
    "start": "1647200",
    "end": "1653720"
  },
  {
    "text": "and helper methods that you could write on your own I've just collected them all for you and put them in one bundle and",
    "start": "1653720",
    "end": "1659880"
  },
  {
    "text": "uh I just didn't know how large that framework was until I went and looked um I guess what's also in there is a nice",
    "start": "1659880",
    "end": "1667360"
  },
  {
    "text": "uh import uh library that we'll go over really soon here um there's also a bunch of logging and stuff uh there's a bunch",
    "start": "1667360",
    "end": "1674200"
  },
  {
    "text": "of just helper methods the stacks thing is really useful um um there's a lot of stuff in there just to make your life",
    "start": "1674200",
    "end": "1680240"
  },
  {
    "text": "easier and make my life easier too so you know when it comes to deciding how",
    "start": "1680240",
    "end": "1685600"
  },
  {
    "text": "to move forward I have to take into account that not only is this code base kind of large now it's pretty stable for",
    "start": "1685600",
    "end": "1693760"
  },
  {
    "text": "the most part uh any crashes are just a result of user error for the most part so I really don't want to rock the boat",
    "start": "1693760",
    "end": "1700039"
  },
  {
    "text": "and rewrite everything uh just because everything's in Swift right so I've got to take this into account the other",
    "start": "1700039",
    "end": "1705960"
  },
  {
    "text": "thing that I noticed is that Swift moves pretty fast did you see it there it was was pretty fast you miss it Swift is",
    "start": "1705960",
    "end": "1712480"
  },
  {
    "text": "pretty fast so on the timeline here uh let's",
    "start": "1712480",
    "end": "1718399"
  },
  {
    "text": "let's look at uh take a look at some history here uh Swift was first announced oh just last year and uh let's",
    "start": "1718399",
    "end": "1726039"
  },
  {
    "text": "kind of walk through that timeline here so 1.0 was about uh October 2nd U",
    "start": "1726039",
    "end": "1735279"
  },
  {
    "text": "that introduced uh failable initializers oh my gosh can you believe that wasn't",
    "start": "1735279",
    "end": "1740919"
  },
  {
    "text": "at launch 1.1 or 1.2 was on February 9th",
    "start": "1740919",
    "end": "1747880"
  },
  {
    "text": "2015 that introduced the as bang uh it introduced uh compound IFL statements so",
    "start": "1747880",
    "end": "1755880"
  },
  {
    "text": "the IFL comma IFL comma or comma IFL comma let whatever uh it also introduced",
    "start": "1755880",
    "end": "1761440"
  },
  {
    "text": "what else did it have here it introduced uh Objective C improvements so that you can mark them as null or non-null so",
    "start": "1761440",
    "end": "1767919"
  },
  {
    "text": "that they would actually convert over into Swift properly right so that was",
    "start": "1767919",
    "end": "1773360"
  },
  {
    "text": "only February this is the almost three four months Cadence and then we got a",
    "start": "1773360",
    "end": "1779440"
  },
  {
    "text": "big drop in June and you know how that was right with the guard statements and",
    "start": "1779440",
    "end": "1784919"
  },
  {
    "text": "the protocol extensions and all those fun things I mean in one year like I you",
    "start": "1784919",
    "end": "1790960"
  },
  {
    "text": "know I was still trying to learn Swift as a functional language and in one year it just changed a whole bunch of stuff",
    "start": "1790960",
    "end": "1796360"
  },
  {
    "text": "on me so the hard thing about converting something that kind of works and a lot",
    "start": "1796360",
    "end": "1802480"
  },
  {
    "text": "of people's apps rely on this code base like magical record is something that isn't a lot of App Store code and uh to",
    "start": "1802480",
    "end": "1810240"
  },
  {
    "text": "kind of change that and uh this fast is really hard so I really don't want to",
    "start": "1810240",
    "end": "1817159"
  },
  {
    "text": "you know basically I don't want to make less work for myself and not have everybody come yell at me like hey you change this API what' you do you know",
    "start": "1817159",
    "end": "1823840"
  },
  {
    "text": "I'm trying to not uh not do all that kind of work but still you know keep things moving forward oh and I forgot",
    "start": "1823840",
    "end": "1830559"
  },
  {
    "text": "we've also had betas in between that broke a lot of stuff so like you know you're never going to win because this thing is just going so so fast so you",
    "start": "1830559",
    "end": "1836840"
  },
  {
    "text": "have to be kind of you have it sometimes it is better to wait when it comes to some of the Apple uh apis and core data",
    "start": "1836840",
    "end": "1842960"
  },
  {
    "text": "is one of those things that it doesn't feel like Apple's going to really rock the boat on API wise it feels like",
    "start": "1842960",
    "end": "1850240"
  },
  {
    "text": "cordate is going to be pretty much on its same trajectory for a long time to come so I really don't feel like I need",
    "start": "1850240",
    "end": "1857919"
  },
  {
    "text": "to go at this pace or magic recer needs to go at this pace to kind of keep up with stuff but it doesn't mean that it's",
    "start": "1857919",
    "end": "1863840"
  },
  {
    "text": "not not good to kind of keep going one of the other things with swift",
    "start": "1863840",
    "end": "1868880"
  },
  {
    "text": "was that it's less Dynamic and this was kind of actually one of my one of the",
    "start": "1868880",
    "end": "1874120"
  },
  {
    "text": "kind of things I had a hard time dealing with uh in the beginning with swift it's like how do I not use this language that",
    "start": "1874120",
    "end": "1880320"
  },
  {
    "text": "isn't dynamic because Dynamic languages are really cool I mean once I figured out how to hack the objectivec runtime",
    "start": "1880320",
    "end": "1887399"
  },
  {
    "text": "and you know you know intercept messages and CH use proxy objects and you know",
    "start": "1887399",
    "end": "1892840"
  },
  {
    "text": "just all that fun stuff you know can you know writing to selector you know writing my own selectors and and doing",
    "start": "1892840",
    "end": "1898039"
  },
  {
    "text": "that kind of stuff it was it was hard to give that up so and let's let's see how it's actually",
    "start": "1898039",
    "end": "1905000"
  },
  {
    "text": "used in magical record to be really really useful for one this is the secret",
    "start": "1905000",
    "end": "1910320"
  },
  {
    "text": "sauce in magical record this is how it figures out What entity to look up and",
    "start": "1910320",
    "end": "1916840"
  },
  {
    "text": "how to map that entity description to The Entity class it's really simple now",
    "start": "1916840",
    "end": "1922480"
  },
  {
    "text": "what it also does is it gives you an opportunity to override that entity name",
    "start": "1922480",
    "end": "1928120"
  },
  {
    "text": "yourself and this is how it works with Mo generator so magic record has worked with a mo generator from the beginning",
    "start": "1928120",
    "end": "1934919"
  },
  {
    "text": "because of this Secret Sauce because Mo generator already implements this method so I'm just using What mo generator",
    "start": "1934919",
    "end": "1941320"
  },
  {
    "text": "already does and if I need to change it I can just change it in a subass in my own custom enti",
    "start": "1941320",
    "end": "1947880"
  },
  {
    "text": "and it works I Define the mapping where it's supposed to be in the object and the class and the code that it's related",
    "start": "1947880",
    "end": "1953679"
  },
  {
    "text": "to but this is the secret sauce this is dynamic it's very useful this is very hard this I I could probably do this in",
    "start": "1953679",
    "end": "1960799"
  },
  {
    "text": "a in a protocol so maybe that's not the best uh best example so let's move on to the next one",
    "start": "1960799",
    "end": "1967960"
  },
  {
    "text": "this is nice so remember that data importing I talked about so should will and did import are",
    "start": "1967960",
    "end": "1974360"
  },
  {
    "text": "methods that are called back on the calling class classes uh when we do data Imports right so a should import",
    "start": "1974360",
    "end": "1981000"
  },
  {
    "text": "obviously gives you an opportunity to bail out of importing data that might be bad right and then before and after just",
    "start": "1981000",
    "end": "1986960"
  },
  {
    "text": "tells you hey here's some data it was done right now this is also implemented in a protocol so maybe this isn't this",
    "start": "1986960",
    "end": "1993919"
  },
  {
    "text": "isn't really that good of an example either so let's talk about this one what does this one",
    "start": "1993919",
    "end": "2001039"
  },
  {
    "text": "do so this one's a little more ugly only because I have to do things in the kind",
    "start": "2001039",
    "end": "2007399"
  },
  {
    "text": "of approved Objective C way so remember before we could just do uh object",
    "start": "2007399",
    "end": "2013960"
  },
  {
    "text": "perform selector with object and just use those kinds of methods uh a long",
    "start": "2013960",
    "end": "2019399"
  },
  {
    "text": "time ago maybe around xcode 4ish I don't remember just a couple years ago uh",
    "start": "2019399",
    "end": "2026360"
  },
  {
    "text": "Apple had said don't use the perform selector methods use NS invocation instead because what NS invocation does",
    "start": "2026360",
    "end": "2032039"
  },
  {
    "text": "is it checks all of your arguments checks all of your selectors and things like that does some more checking for",
    "start": "2032039",
    "end": "2038080"
  },
  {
    "text": "you which is what they want to do to help you so hence we have the bottom I",
    "start": "2038080",
    "end": "2043240"
  },
  {
    "text": "don't know the bottom third of this is really kind of boilerplate stuff just to be able to send off that method but the",
    "start": "2043240",
    "end": "2050240"
  },
  {
    "text": "top three lines are really or the top two lines there are really important in this method so we have in the red it",
    "start": "2050240",
    "end": "2056200"
  },
  {
    "text": "says import some string with a colon so it's creating a",
    "start": "2056200",
    "end": "2061240"
  },
  {
    "text": "selector how are we creating this selector from well we're creating the selector from the key right so what",
    "start": "2061240",
    "end": "2067480"
  },
  {
    "text": "we're actually doing in this method we are importing a value for a particular key so for one attribute on an",
    "start": "2067480",
    "end": "2075040"
  },
  {
    "text": "entity right we're going to say here's some data imported into that attribute",
    "start": "2075040",
    "end": "2081638"
  },
  {
    "text": "on an entity and so what happens is we're going to create a selector that says",
    "start": "2081639",
    "end": "2087878"
  },
  {
    "text": "import Capital attribute name and we're going to create this selector",
    "start": "2087879",
    "end": "2093440"
  },
  {
    "text": "dynamically I cannot Define this in a protocol this is a convention-based",
    "start": "2093440",
    "end": "2098480"
  },
  {
    "text": "interface right it's a convention based API so it lets me write client code like",
    "start": "2098480",
    "end": "2104119"
  },
  {
    "text": "this that lets me Define custom import Logic on a property by property basis or",
    "start": "2104119",
    "end": "2109760"
  },
  {
    "text": "an attribute by attribute basis in my entities and I have this all over the place and it's useful and it doesn't it",
    "start": "2109760",
    "end": "2116800"
  },
  {
    "text": "means that I don't have to clutter up code all over the place it says well here's all of my custom import logic",
    "start": "2116800",
    "end": "2121839"
  },
  {
    "text": "it's this giant messy function it's just well here's my the majority of my import",
    "start": "2121839",
    "end": "2127280"
  },
  {
    "text": "routine and this one special property needs it now if I don't Implement in this case import name it's not going to",
    "start": "2127280",
    "end": "2134839"
  },
  {
    "text": "be called right it had it if response to selector check beforehand but this is",
    "start": "2134839",
    "end": "2139920"
  },
  {
    "text": "the power of dynamic programming and this is where it's kind of hard to not",
    "start": "2139920",
    "end": "2145359"
  },
  {
    "text": "have that sometimes sometimes dynamic programming like this is the right tool in your toolbox right coding by",
    "start": "2145359",
    "end": "2151880"
  },
  {
    "text": "convention is actually useful so some of the other things that",
    "start": "2151880",
    "end": "2157119"
  },
  {
    "text": "um kind of held me back I guess a little bit from jumping into the Swift boat uh thing really fast is other",
    "start": "2157119",
    "end": "2165319"
  },
  {
    "text": "Frameworks so sugar record is another framework out there that was written in Swift early on I I kind of ran across",
    "start": "2165319",
    "end": "2170760"
  },
  {
    "text": "this early uh they they're um their big thing is that they do multiple uh file",
    "start": "2170760",
    "end": "2176800"
  },
  {
    "text": "formats so they do core data and I think they do realm and uh they have other",
    "start": "2176800",
    "end": "2182240"
  },
  {
    "text": "things that they work on as well and uh it's a very similar interface so I thought oh great you know these guys",
    "start": "2182240",
    "end": "2188119"
  },
  {
    "text": "kind of they they even mentioned like hey they took inspiration from R record and had a lot of their interface defined",
    "start": "2188119",
    "end": "2193680"
  },
  {
    "text": "the same way so like great you know maybe they they solved it for me so I can just focus on The Objective C",
    "start": "2193680",
    "end": "2199400"
  },
  {
    "text": "stuff but uh I think there's still room for Magical record to have some Swift uh Insight of itself one of the other",
    "start": "2199400",
    "end": "2205880"
  },
  {
    "text": "things that I was worried looking for was I saw something called query kit so",
    "start": "2205880",
    "end": "2211480"
  },
  {
    "text": "query kit has uh if you've ever seen back in the old days man I'm really dating myself here back in the old days",
    "start": "2211480",
    "end": "2217640"
  },
  {
    "text": "when I worked on on Microsoft code uh one guy in the audience right uh",
    "start": "2217640",
    "end": "2224000"
  },
  {
    "text": "there was a technology called link to SQL right so that let you write wrote SQL code inside of your C code and I did",
    "start": "2224000",
    "end": "2231400"
  },
  {
    "text": "write C code back in the day and query kit reminds me a lot of that it's basically a a kind of a SQL domain",
    "start": "2231400",
    "end": "2238839"
  },
  {
    "text": "specific language written in Swift uh it's interesting uh it's it's an",
    "start": "2238839",
    "end": "2244880"
  },
  {
    "text": "interesting project and it kind of gave me some ideas maybe I should kind of venture down that way uh as far as how",
    "start": "2244880",
    "end": "2250800"
  },
  {
    "text": "to incorporate Swift into uh magical record but uh if you're curious",
    "start": "2250800",
    "end": "2255880"
  },
  {
    "text": "definitely you can take a look at that so but the one thing that I wanted to",
    "start": "2255880",
    "end": "2261119"
  },
  {
    "text": "not do was I did not want to rewrite the entire code base that was kind of my big thing like I said the codebase was huge",
    "start": "2261119",
    "end": "2267680"
  },
  {
    "text": "so I decided not to and I still am able to get some Swift in there uh again",
    "start": "2267680",
    "end": "2273200"
  },
  {
    "text": "being pragmatic about things not throwing away code that works just because I have the new hotness in my",
    "start": "2273200",
    "end": "2278839"
  },
  {
    "text": "hands um the other thing that really made me want to not rewrite the code base was when they announced Swift",
    "start": "2278839",
    "end": "2286359"
  },
  {
    "text": "when Apple announced Swift back in 2014 they made a big deal about the interoperability right Swift and",
    "start": "2286359",
    "end": "2293000"
  },
  {
    "text": "Objective C they're built on the same runtime there's just different optimizations made for Swift versus",
    "start": "2293000",
    "end": "2298880"
  },
  {
    "text": "objective c based on the nature of a a statically linked language versus dynamically uh bound language right so",
    "start": "2298880",
    "end": "2305599"
  },
  {
    "text": "but there's still a lot of inter ability right you can have Objective C code and you know have it uh called from Swift",
    "start": "2305599",
    "end": "2312520"
  },
  {
    "text": "and vice versa so they can talk to each other there's no problem with that that isn't the issue I don't need to throw",
    "start": "2312520",
    "end": "2318160"
  },
  {
    "text": "away Objective C code I can still build more stuff going forward um but there's",
    "start": "2318160",
    "end": "2323760"
  },
  {
    "text": "one problem and only recently has this been fixed is if I have an API like this",
    "start": "2323760",
    "end": "2330680"
  },
  {
    "text": "by default right now what you would see is you'd see all these crash operators",
    "start": "2330680",
    "end": "2336040"
  },
  {
    "text": "so the bang uh I I I I like somebody had given that given it that name the the",
    "start": "2336040",
    "end": "2341520"
  },
  {
    "text": "crash operator so this this uh explic implicitly unwrapped uh object type uh",
    "start": "2341520",
    "end": "2348280"
  },
  {
    "text": "kind of indicates that there's a problem with with your uh type setting there",
    "start": "2348280",
    "end": "2353560"
  },
  {
    "text": "right so you don't know whether it's nil or not you still have to check if it's nil so that's a problem and the way to",
    "start": "2353560",
    "end": "2360760"
  },
  {
    "text": "fix that is with this guy right here so if you have um some code uh you can just",
    "start": "2360760",
    "end": "2365800"
  },
  {
    "text": "really do it on basically an entire file basis just basically say hey assume all of the code in between these things is",
    "start": "2365800",
    "end": "2372560"
  },
  {
    "text": "not nil all the parameters all the return values all of this stuff is not nil and it's super awesome uh you can do",
    "start": "2372560",
    "end": "2380040"
  },
  {
    "text": "stuff like this and the way that I've been able to use it which is super useful if I do want something to be nil",
    "start": "2380040",
    "end": "2387079"
  },
  {
    "text": "I can just say assume not nil and then just say hey this is the this is the one that you can say hey this is nullable",
    "start": "2387079",
    "end": "2392800"
  },
  {
    "text": "this one this one I'll allow this one right so this gives me the right way it",
    "start": "2392800",
    "end": "2399000"
  },
  {
    "text": "basically what this does is it lets uh the Swift uh interpreter and the compiler uh convert the Header",
    "start": "2399000",
    "end": "2406359"
  },
  {
    "text": "information correctly so now we end up with something without all of the crash operators all over the place and this",
    "start": "2406359",
    "end": "2411960"
  },
  {
    "text": "helps us integrate with swift a lot better and a lot more cleanly and also let Swift help you so if you do end up",
    "start": "2411960",
    "end": "2419119"
  },
  {
    "text": "giving it uh an optional parameter when I really meant not to have an optional",
    "start": "2419119",
    "end": "2424680"
  },
  {
    "text": "but if I had the crash operators I could Swift couldn't tell it couldn't help me so this is trying to let Swift help me",
    "start": "2424680",
    "end": "2431280"
  },
  {
    "text": "help you something like that right so so ultimately what I'm going to be",
    "start": "2431280",
    "end": "2438400"
  },
  {
    "text": "doing is using Swift extensions and using those to kind of carry this",
    "start": "2438400",
    "end": "2444359"
  },
  {
    "text": "forward now the benefit of this is that uh what I can do is uh maintain The",
    "start": "2444359",
    "end": "2451240"
  },
  {
    "text": "Objective C code and the Swift Code and I can just have the Swift Code almost literally called",
    "start": "2451240",
    "end": "2456920"
  },
  {
    "text": "into the um Into The Objective C code so basically it's just one more level and",
    "start": "2456920",
    "end": "2463119"
  },
  {
    "text": "that that could cause its own problems later on but a lot of times what I really want to focus on is making the",
    "start": "2463119",
    "end": "2468200"
  },
  {
    "text": "API super simple so we you know we have category PRI pces prefixes and we don't",
    "start": "2468200",
    "end": "2473280"
  },
  {
    "text": "need those anymore uh so this is kind of what I was thinking with uh Magic record",
    "start": "2473280",
    "end": "2478800"
  },
  {
    "text": "and Swift and integration and going forward right there's a lot of stuff in there so let's unpack that a little bit",
    "start": "2478800",
    "end": "2485640"
  },
  {
    "text": "so we have generics right so we have a generic find function and then we have",
    "start": "2485640",
    "end": "2491520"
  },
  {
    "text": "this really weird function",
    "start": "2491520",
    "end": "2496599"
  },
  {
    "text": "signature all right so what I've decided to do there is use uh one of the neat",
    "start": "2496599",
    "end": "2503240"
  },
  {
    "text": "little um features of Swift called currying right so currying lets me",
    "start": "2503240",
    "end": "2509480"
  },
  {
    "text": "create a partial function so partially apply a function so basically the the",
    "start": "2509480",
    "end": "2515760"
  },
  {
    "text": "mental model that I have in my head is if if you have a whole lot of ifls if you have an IFL and you need to kind of",
    "start": "2515760",
    "end": "2521880"
  },
  {
    "text": "have that Pyramid of Doom the currying lets you get rid of that in certain cases so basically what I can do is I",
    "start": "2521880",
    "end": "2529079"
  },
  {
    "text": "can have a partial function and say oh find me this type and then just return",
    "start": "2529079",
    "end": "2534280"
  },
  {
    "text": "that function and what I have after that is a function that will take a predicate order by ascending as parameters so",
    "start": "2534280",
    "end": "2541559"
  },
  {
    "text": "basically I have to call this function twice now that's kind of weird like why",
    "start": "2541559",
    "end": "2546680"
  },
  {
    "text": "would I do that it's handy in like the a lot of the functional kinds of Concepts but what it also lets me do is in the",
    "start": "2546680",
    "end": "2552640"
  },
  {
    "text": "bottom case uh what we have here is we can say I'm going to set the context for",
    "start": "2552640",
    "end": "2559480"
  },
  {
    "text": "this function first and then all the calls after that are going to use that context so I don't have to worry about",
    "start": "2559480",
    "end": "2565760"
  },
  {
    "text": "the context anymore right so you can kind of specify that and you know I've also done that up here uh in the top one",
    "start": "2565760",
    "end": "2573359"
  },
  {
    "text": "having uh the context already specified for you and it's it's it's a crazy idea but it",
    "start": "2573359",
    "end": "2580480"
  },
  {
    "text": "lets you do some of the it lets you use some functional characteristics of Swift and it um it also just it uses the",
    "start": "2580480",
    "end": "2589200"
  },
  {
    "text": "generics so but I think a lot of the the big important thing is that uh two of",
    "start": "2589200",
    "end": "2594559"
  },
  {
    "text": "the important things is we're using the old school Objective C magical record uh and then the new syntax actually will",
    "start": "2594559",
    "end": "2601079"
  },
  {
    "text": "read a little bit better going forward as far as how you use it in your Swift Code and using generics uh we can do",
    "start": "2601079",
    "end": "2608800"
  },
  {
    "text": "some type checking and type converting and do that all inside of the magical record stuff whereas uh you in your",
    "start": "2608800",
    "end": "2617119"
  },
  {
    "text": "client code just gets all of the help that the Swift compiler will give you because it's using a generic function",
    "start": "2617119",
    "end": "2623800"
  },
  {
    "text": "versus uh the any object kind of thing that uh the the um Objective C converted",
    "start": "2623800",
    "end": "2631400"
  },
  {
    "text": "Swift headers give you right because if you have um this find all sorted by",
    "start": "2631400",
    "end": "2637000"
  },
  {
    "text": "Method it returns an array of any object because that's an array of IDs right in",
    "start": "2637000",
    "end": "2642440"
  },
  {
    "text": "Objective C it can't tell you what exactly that type is but we can kind of",
    "start": "2642440",
    "end": "2647599"
  },
  {
    "text": "force it using the as question mark uh operator and if we don't succeed well we",
    "start": "2647599",
    "end": "2653880"
  },
  {
    "text": "can just say Well it failed and just we got no results because we didn't do that right so we can do this without crashing",
    "start": "2653880",
    "end": "2659200"
  },
  {
    "text": "and still have results and still do all that stuff so that's kind of the way that I was thinking and if if we want to",
    "start": "2659200",
    "end": "2664280"
  },
  {
    "text": "use this in our client code so one scenario that I had thought of was that we could have our stack and again we",
    "start": "2664280",
    "end": "2671359"
  },
  {
    "text": "could specify the context in our first call and now we have a find function and",
    "start": "2671359",
    "end": "2677400"
  },
  {
    "text": "if we want to limit the scope of our calls to just in this case books we can",
    "start": "2677400",
    "end": "2684800"
  },
  {
    "text": "create a new function from the first find function that says find these books",
    "start": "2684800",
    "end": "2690880"
  },
  {
    "text": "right so it finds the books in the context and then now we can say find books where the title is valid with",
    "start": "2690880",
    "end": "2698040"
  },
  {
    "text": "everything else so then we can just apply that function as normal so this is how you would use that API this has some",
    "start": "2698040",
    "end": "2703839"
  },
  {
    "text": "different characteristics and it is differently different um but I think",
    "start": "2703839",
    "end": "2709359"
  },
  {
    "text": "being able to separate these steps out is as a really important way to kind of move forward and move forward with the",
    "start": "2709359",
    "end": "2716319"
  },
  {
    "text": "way to use magic record with Swift uh and to have it feel like it's part of the Swift language versus something that",
    "start": "2716319",
    "end": "2723240"
  },
  {
    "text": "I just ported over from Objective C so using uh some of the same same ideas",
    "start": "2723240",
    "end": "2730920"
  },
  {
    "text": "we can just kind of shorten the block syntax and do some really simple save",
    "start": "2730920",
    "end": "2736319"
  },
  {
    "text": "it's really uh it should be really familiar it's not that complicated so",
    "start": "2736319",
    "end": "2741920"
  },
  {
    "text": "that's about all for Swift and uh yeah so we have a whole lot of examples",
    "start": "2741920",
    "end": "2747440"
  },
  {
    "text": "actually in this book that I helped co-write uh core data by tutorials uh it's all written in Swift um it",
    "start": "2747440",
    "end": "2756480"
  },
  {
    "text": "uh it has a lot of stuff with uh threading and it's the only book that I know of on core data that covers",
    "start": "2756480",
    "end": "2762640"
  },
  {
    "text": "migrations as well so definitely uh if you want to see more core data just raw",
    "start": "2762640",
    "end": "2767960"
  },
  {
    "text": "core data with swift examples there's definitely a lot there um but anyway you can also get some more uh iOS tutorials",
    "start": "2767960",
    "end": "2775280"
  },
  {
    "text": "books um but anyhow I think that's uh my time and um be sure to rate the session",
    "start": "2775280",
    "end": "2781160"
  },
  {
    "text": "thank you so the question is what's story on",
    "start": "2781160",
    "end": "2786280"
  },
  {
    "text": "core data and iCloud synchronization I don't think really much has changed since iOS 8 really um I think it's just",
    "start": "2786280",
    "end": "2795480"
  },
  {
    "text": "gotten more stable but it's um I think it's it's usable but I think it's I",
    "start": "2795480",
    "end": "2802960"
  },
  {
    "text": "don't think much has changed um we do have a section on that in the book uh",
    "start": "2802960",
    "end": "2808240"
  },
  {
    "text": "and it walks you through that but as far as I mean is there more specific",
    "start": "2808240",
    "end": "2813720"
  },
  {
    "text": "something more specific to that question so the last that I that I know of was",
    "start": "2813720",
    "end": "2819280"
  },
  {
    "text": "that core data and iCloud is usable uh it's a little easier to set up um and if",
    "start": "2819280",
    "end": "2824599"
  },
  {
    "text": "it does fail you can recover from it now and you can reset things so as far as I",
    "start": "2824599",
    "end": "2830480"
  },
  {
    "text": "know it's it's usable so the question was didn't they change the uh xcode uh",
    "start": "2830480",
    "end": "2835800"
  },
  {
    "text": "core data entity generator um but uh Mo generator has always been my go-to tool",
    "start": "2835800",
    "end": "2843559"
  },
  {
    "text": "and uh it mode generator also gives you some extra accessors as well so there",
    "start": "2843559",
    "end": "2849960"
  },
  {
    "text": "are apis in core data that are very Dynamic so one of the apis in core data",
    "start": "2849960",
    "end": "2856680"
  },
  {
    "text": "is uh set primitive value for key and that's a very generic Dynamic function",
    "start": "2856680",
    "end": "2863359"
  },
  {
    "text": "and it turns out if you just Define the function set attribute name for key like",
    "start": "2863359",
    "end": "2871400"
  },
  {
    "text": "an actual just the header you don't have to actually Define the function if you just Define the header core data will",
    "start": "2871400",
    "end": "2877280"
  },
  {
    "text": "create that function for you and it will um be more efficient than the generic",
    "start": "2877280",
    "end": "2882920"
  },
  {
    "text": "Dynamic function right so um and mode generator will generate all of those",
    "start": "2882920",
    "end": "2888640"
  },
  {
    "text": "headers for you so there is definitely some benefits to using mod generator that you don't get you also have uh an",
    "start": "2888640",
    "end": "2895720"
  },
  {
    "text": "enumeration that mode generator will generate for you uh of all the properties for an entity so if you have",
    "start": "2895720",
    "end": "2902119"
  },
  {
    "text": "an entity and you have a list of attributes it has an enumeration with all of the attributes in it right so it",
    "start": "2902119",
    "end": "2908240"
  },
  {
    "text": "it so you can use compiler checked uh enumerations to see if you've actually",
    "start": "2908240",
    "end": "2914240"
  },
  {
    "text": "reuse the same property right so basically you have a tool that will generate a map from compiled code to",
    "start": "2914240",
    "end": "2921359"
  },
  {
    "text": "just raw string values which core data needs in order to look things up so that's definitely a benefit so that's I",
    "start": "2921359",
    "end": "2927000"
  },
  {
    "text": "still use Mo jenerator anyway even if um even if they've xcode has been updated",
    "start": "2927000",
    "end": "2932839"
  },
  {
    "text": "to not like have some of the problems they had before they're still still enough benefit with Mo generator to use it even even",
    "start": "2932839",
    "end": "2939960"
  },
  {
    "text": "now uh so actually the the question is with with swift being more of a focus on",
    "start": "2939960",
    "end": "2946839"
  },
  {
    "text": "uh value types versus reference types uh being the classical Objective C model uh",
    "start": "2946839",
    "end": "2953720"
  },
  {
    "text": "going forward you think you should focus on using the the value types instead of core data um and I actually I'm doing",
    "start": "2953720",
    "end": "2960640"
  },
  {
    "text": "that um at Lounge buddy these days um so we're converting over a project to Swift",
    "start": "2960640",
    "end": "2966200"
  },
  {
    "text": "2 and we're using core data and what I've actually done is I will store all",
    "start": "2966200",
    "end": "2971480"
  },
  {
    "text": "of the data into core data so it'll import it stored in there and basically",
    "start": "2971480",
    "end": "2976960"
  },
  {
    "text": "it's got an interface for all of the the data that's available from the kind of the data side of things and it will",
    "start": "2976960",
    "end": "2984200"
  },
  {
    "text": "actually convert all of the core data objects into structs and value types the",
    "start": "2984200",
    "end": "2990280"
  },
  {
    "text": "the difference being is that we actually have a protocol that defines what the data looks like so basic basically uh in",
    "start": "2990280",
    "end": "2999359"
  },
  {
    "text": "a managed object model defined in protocols and by having this protocol",
    "start": "2999359",
    "end": "3005400"
  },
  {
    "text": "and having it defined for data what we can do on the other side of the client",
    "start": "3005400",
    "end": "3010599"
  },
  {
    "text": "is we can vend It Whatever implementation we want we just tell it that it implements the protocol so all",
    "start": "3010599",
    "end": "3017000"
  },
  {
    "text": "that the the client depends on is the data protocol the data that we give it can either be core data it could be some",
    "start": "3017000",
    "end": "3024240"
  },
  {
    "text": "dictionary that conforms to the protocol somehow um it could be um a struct right",
    "start": "3024240",
    "end": "3030480"
  },
  {
    "text": "so it could be any one of those things but as long as they conform to the protocol the client code doesn't really",
    "start": "3030480",
    "end": "3036280"
  },
  {
    "text": "care so what I've done is um you know have all of my asynchronous data",
    "start": "3036280",
    "end": "3041599"
  },
  {
    "text": "management saving things on multiply threads and do all that crazy concurrency that I have to do with core data kind of in the background uh away",
    "start": "3041599",
    "end": "3049960"
  },
  {
    "text": "from kind of the UI client and before it gets to the UI client it will actually",
    "start": "3049960",
    "end": "3055680"
  },
  {
    "text": "vend out a copy of the core dat object and convert it over to a struct object",
    "start": "3055680",
    "end": "3062280"
  },
  {
    "text": "so basically just copy all those values into a struct so now it's a value type and then just give that to the client so",
    "start": "3062280",
    "end": "3068480"
  },
  {
    "text": "you can can kind of mix and match it's whether or not you're willing to accept the tradeoff of doing all of that data",
    "start": "3068480",
    "end": "3075119"
  },
  {
    "text": "copying and transformation so you know I think there's still value in both I mean",
    "start": "3075119",
    "end": "3080520"
  },
  {
    "text": "I could still have just vended out the straight core data object have it conformed to the protocol still be",
    "start": "3080520",
    "end": "3085839"
  },
  {
    "text": "usable the problem there is that uh core data uh really doesn't like it when you",
    "start": "3085839",
    "end": "3091079"
  },
  {
    "text": "cross the threads cross the streams when it comes to threading and that also means that even when you're accessing",
    "start": "3091079",
    "end": "3096359"
  },
  {
    "text": "data you can sometimes crash because you access the object on the wrong thread or the wrong queue so that could be a",
    "start": "3096359",
    "end": "3102920"
  },
  {
    "text": "problem so I decided to just do the all the thread Management on my own and then just vend out a readon object that",
    "start": "3102920",
    "end": "3108680"
  },
  {
    "text": "really doesn't care so that that hopefully eliminates a lot of those particular",
    "start": "3108680",
    "end": "3114359"
  },
  {
    "text": "problems any other",
    "start": "3114359",
    "end": "3118119"
  },
  {
    "text": "questions I don't think you can do that so core data is a single process framework so you really can't share the",
    "start": "3127960",
    "end": "3134240"
  },
  {
    "text": "same instance of core data um you can share maybe the the persistent store um",
    "start": "3134240",
    "end": "3140559"
  },
  {
    "text": "but then you're going to be blocked by the process of the operating system so the operating system still has to lock the the sqlite file right so when you",
    "start": "3140559",
    "end": "3148000"
  },
  {
    "text": "access things and the problem with that also is that if you write from one process you know how do you update the",
    "start": "3148000",
    "end": "3154359"
  },
  {
    "text": "other one how does that know that's kind of bad too so that's why you know you really just want to have like one",
    "start": "3154359",
    "end": "3160040"
  },
  {
    "text": "process per Prof file at a time um but yeah yeah the question was what do you",
    "start": "3160040",
    "end": "3165480"
  },
  {
    "text": "think about uh um multiple uh instances",
    "start": "3165480",
    "end": "3171160"
  },
  {
    "text": "multiple processes accessing the same accessing core data so yeah is a little little complicated there I try to keep",
    "start": "3171160",
    "end": "3178040"
  },
  {
    "text": "it simple though yeah any other",
    "start": "3178040",
    "end": "3183200"
  },
  {
    "text": "questions cool well [Applause]",
    "start": "3184839",
    "end": "3192679"
  },
  {
    "text": "thanks",
    "start": "3198599",
    "end": "3201599"
  }
]