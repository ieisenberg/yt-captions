[
  {
    "start": "0",
    "end": "136000"
  },
  {
    "text": "today I'm going to be talking about event driven architectures and how on Earth you pick seress comput because",
    "start": "11960",
    "end": "18080"
  },
  {
    "text": "obviously you've got seress applications that you're going to be running or non seress applications uh but I think seress compute is the best way to um do",
    "start": "18080",
    "end": "25119"
  },
  {
    "text": "your compute for your event of an architectures now I know we here in an audience of people that know lot about",
    "start": "25119",
    "end": "30720"
  },
  {
    "text": "lots of things but just you know what is the point of serus well the point of serus is that we AWS takes over as much",
    "start": "30720",
    "end": "37719"
  },
  {
    "text": "of the stuff as possible and the big picture is that you can focus on writing code that solves your business problems",
    "start": "37719",
    "end": "43360"
  },
  {
    "text": "but now you're writing code to solve your business problems and so you need some sort of service to run that code and that's why we're talking about",
    "start": "43360",
    "end": "49000"
  },
  {
    "text": "servess compute but you know servess is has a lot of things at AWS and even",
    "start": "49000",
    "end": "55160"
  },
  {
    "text": "beyond the industry there you know other players and other Cloud providers who also provide serverless services so",
    "start": "55160",
    "end": "60239"
  },
  {
    "text": "although we're going to talk about um some of our compute services today you know please remember that serus is way",
    "start": "60239",
    "end": "65400"
  },
  {
    "text": "bigger than just compute even though sort of serus was a bit born when Lambda was came out which is 10 years ago but",
    "start": "65400",
    "end": "71799"
  },
  {
    "text": "if you think some of our foundational services at AWS like sqs and S3 were born you know many years before Lambda",
    "start": "71799",
    "end": "78680"
  },
  {
    "text": "and are very much serve the services as well so I sort of sometimes say flippantly that uh the cloud was",
    "start": "78680",
    "end": "85320"
  },
  {
    "text": "actually born serverless because S3 and sqs came out before easy2 so before you could even rent a virtual machine you",
    "start": "85320",
    "end": "91920"
  },
  {
    "text": "could use S3 and sqs you could use our serous Services before someone probably begrudgingly said ah we need virtual",
    "start": "91920",
    "end": "97759"
  },
  {
    "text": "machines okay okay okay and come after that as well but of course nowadays that storage and workflows and analytics and",
    "start": "97759",
    "end": "103600"
  },
  {
    "text": "many databases and you know different integration services and a whole bunch of other seress services that you can",
    "start": "103600",
    "end": "108799"
  },
  {
    "text": "use with AWS and other companies as well so there are you know we're in the world of gen there are vector datab bases that",
    "start": "108799",
    "end": "114280"
  },
  {
    "text": "are servess they are momento is coming out with a really cool cache there is neon and there's you know other kind of",
    "start": "114280",
    "end": "120000"
  },
  {
    "text": "Services all across the industry um you know new Revolutions of Kafka for example with confluent and red panda",
    "start": "120000",
    "end": "126600"
  },
  {
    "text": "which are all coming out with servess Services as well so the point of that is that surus isn't just an AWS thing but",
    "start": "126600",
    "end": "132040"
  },
  {
    "text": "obviously AWS is also heavily investing in building more servus services and obviously this runs at ridiculous scale",
    "start": "132040",
    "end": "138239"
  },
  {
    "start": "136000",
    "end": "612000"
  },
  {
    "text": "I mean l processes you know tens of trillions of requests a month um what have we got here event Bridge you know",
    "start": "138239",
    "end": "143599"
  },
  {
    "text": "more than 2 trillion events are are done and you know ECS tasks over you know 2 billion ECS tasks and these are you know",
    "start": "143599",
    "end": "150640"
  },
  {
    "text": "rolled they're going to be more figures than that so I mean servess at AWS runs at absolutely ridiculously massive scale",
    "start": "150640",
    "end": "157160"
  },
  {
    "text": "and you know part of the benefit of servus is also this sort of utilization thing if you've got a traditional on premises infrastructure you've always",
    "start": "157160",
    "end": "163599"
  },
  {
    "text": "got to you know pick a load that you're going to do something and if your uh uh your throughputs or something goes above",
    "start": "163599",
    "end": "168680"
  },
  {
    "text": "that load well you're going to you know not make your customers unhappy now with ec2 sure you've got um Auto scaling",
    "start": "168680",
    "end": "175440"
  },
  {
    "text": "you've got various load balancing things you can do that and there's this sort of stepping up thing but often you can't handle that top peak because you can't",
    "start": "175440",
    "end": "181760"
  },
  {
    "text": "just react in time while with servess Services generally they're going to scale up as much as possible now there's",
    "start": "181760",
    "end": "187640"
  },
  {
    "text": "some ways you want to maybe control that or you don't want things to scale up but the point is generally with seress Services you've got this very um the",
    "start": "187640",
    "end": "194640"
  },
  {
    "text": "scale that matches your uh Your Capacity which is exactly what you need but fine",
    "start": "194640",
    "end": "201120"
  },
  {
    "text": "that's all sounds interesting but the actual reason you go serverless is this faster time to Market you've got an idea",
    "start": "201120",
    "end": "206519"
  },
  {
    "text": "and you want to get it into production as quick as possible and when you're using a servess approach you can get rid of a whole bunch of that ec2",
    "start": "206519",
    "end": "212640"
  },
  {
    "text": "provisioning or clusters or nodes or Auto scaling and all that kind of thing you just don't have to think about it",
    "start": "212640",
    "end": "217760"
  },
  {
    "text": "and so you can get ideas out to Market listen to what your customers want and sort of some people say you know take",
    "start": "217760",
    "end": "223200"
  },
  {
    "text": "your um prototype idea into production really quickly and that for me is actually the benefit of serus is to do",
    "start": "223200",
    "end": "228959"
  },
  {
    "text": "things quicker sure sometimes seress services are going to get complex as your as your business gets more complex",
    "start": "228959",
    "end": "234840"
  },
  {
    "text": "and going to be you know create these huge big applications but if you've got an idea and you can try it out really quick",
    "start": "234840",
    "end": "240680"
  },
  {
    "text": "um that's really powerful and if your idea doesn't work will you try another one while if you're using a sort of ec2",
    "start": "240680",
    "end": "245840"
  },
  {
    "text": "or non- servess approach trying that idea is going to take a long amount of time so my name is Julian wood I'm a",
    "start": "245840",
    "end": "251799"
  },
  {
    "text": "developer Advocate at the within the service team at AWS Eric and I are on the same team and yeah before I did a",
    "start": "251799",
    "end": "257840"
  },
  {
    "text": "lot of the ec2b stuff as an infrastructure engineer uh and luckily I saw the light and I sort of love talking",
    "start": "257840",
    "end": "263240"
  },
  {
    "text": "about serous but today we're at Eda day and we're sort of all talking about events and we've got you know producers and",
    "start": "263240",
    "end": "269400"
  },
  {
    "text": "consum consumers and event Brokers and message buses and cues and topics and streams and all these kind of things um",
    "start": "269400",
    "end": "275039"
  },
  {
    "text": "but today we're talking about events and how we get things from A to B and particularly in my talk all about",
    "start": "275039",
    "end": "280880"
  },
  {
    "text": "compute and our sort of main um service for events is called Amazon eventbridge",
    "start": "280880",
    "end": "286680"
  },
  {
    "text": "and this is just a actual real really simple service um does anybody have an",
    "start": "286680",
    "end": "291960"
  },
  {
    "text": "AWS account anybody can hand okay so you're already using a vbridge you may not know it because every AWS account",
    "start": "291960",
    "end": "299160"
  },
  {
    "text": "comes comes with a default event bus and anytime AWS uh any infrastructural",
    "start": "299160",
    "end": "305759"
  },
  {
    "text": "change to any service in AWS generates an event and it's already put on your event bus now luckily you're not",
    "start": "305759",
    "end": "311360"
  },
  {
    "text": "sweating and panicking thinking you're paying for this already with everything that's going on in your account but uh",
    "start": "311360",
    "end": "316759"
  },
  {
    "text": "event Bridge came out of cloudwatch events and so anything that's reacting to anywhere in your AWS account is already throwing uh flowing through your",
    "start": "316759",
    "end": "323919"
  },
  {
    "text": "um eventbridge account and that's cool because you can do stuff on that so if an ec2 instance uh appears on the network or someone has a tag or some",
    "start": "323919",
    "end": "330800"
  },
  {
    "text": "does something you can react to those events but the thing that made Amazon event Bridge even cooler than cloudwatch",
    "start": "330800",
    "end": "337199"
  },
  {
    "text": "events is where you can then run your own custom applications so you can have another event bus or use a default event",
    "start": "337199",
    "end": "343120"
  },
  {
    "text": "bus and generate your own events on that and then thirdly you can also connect SAS Partners to eventbridge and so if",
    "start": "343120",
    "end": "349360"
  },
  {
    "text": "you are using you know zenes or pag of Duty or I mean they are you know tens of different partner Integrations where the",
    "start": "349360",
    "end": "356199"
  },
  {
    "text": "events from this partner will just be put on your event bus you don't have to run a web hook or poll do any API calls",
    "start": "356199",
    "end": "361520"
  },
  {
    "text": "to them and it's a really efficient way to connect these Services external services to AWS with your Customer",
    "start": "361520",
    "end": "366919"
  },
  {
    "text": "Events with your AWS events all in one place and you know pay for the events you process so it's got that sort of",
    "start": "366919",
    "end": "372720"
  },
  {
    "text": "scaling mechanism not just from the throughput but also from the uh from the costing and then on the other side some",
    "start": "372720",
    "end": "379360"
  },
  {
    "text": "of the earlier talks today have been talking about step functions and so eventbridge is many things come in and can go to many targets step functions is",
    "start": "379360",
    "end": "386520"
  },
  {
    "text": "what you use sort of within a microservice when you need a transaction or something that's a bit more coordinated for example you you you've",
    "start": "386520",
    "end": "392720"
  },
  {
    "text": "um maybe booking a flight or doing something uh some Bank transaction and you know if the bank transaction for a",
    "start": "392720",
    "end": "398400"
  },
  {
    "text": "flight fails well you need to reverse that transaction and you need to release the the seat for example or a loyalty",
    "start": "398400",
    "end": "403720"
  },
  {
    "text": "point or whatever some kind of different things that are coordinated together and step functions does this um is anybody",
    "start": "403720",
    "end": "410440"
  },
  {
    "text": "using step functions excellent we've got some hands up I think the concept of",
    "start": "410440",
    "end": "415639"
  },
  {
    "text": "Step functions and behind it workflows is the sort of one of the new things that people are starting to really",
    "start": "415639",
    "end": "421479"
  },
  {
    "text": "understand and I know we talk about step functions uh composed of different states and you can connect to all AWS",
    "start": "421479",
    "end": "427120"
  },
  {
    "text": "Services um and that sounds all cool but the actual idea of doing uh workflows as a managed service is a very powerful uh",
    "start": "427120",
    "end": "434000"
  },
  {
    "text": "construct and I think that's a sort of very sort of future way that the cloud is going to be done where you're just going to have this sort of cloud native",
    "start": "434000",
    "end": "440280"
  },
  {
    "text": "orchestrator that is going to connect to things all over the cloud and your thirdparty services to do things so step functions is a really great",
    "start": "440280",
    "end": "446759"
  },
  {
    "text": "service and step functions has got some cool capabilities ities here you got one way where it's request response where",
    "start": "446759",
    "end": "453120"
  },
  {
    "text": "step functions goes through a workflow so if you can each think of each thing it's called a state but it's like a step do this then do that then do that then",
    "start": "453120",
    "end": "459360"
  },
  {
    "text": "do this and the request response basically goes oh I'm going to connect to another service and I'm going to wait",
    "start": "459360",
    "end": "464479"
  },
  {
    "text": "for the response from that so maybe you're going to connect to a Lambda a Lambda function Lambda function is going to then run some code and send the",
    "start": "464479",
    "end": "470720"
  },
  {
    "text": "response back but it could be something else it could be uh Dynam DB for example I'm going to query a database that's the",
    "start": "470720",
    "end": "475759"
  },
  {
    "text": "same thing query the database wait for the response uh another example I'm going to use uh sagemaker for example",
    "start": "475759",
    "end": "481840"
  },
  {
    "text": "sagemaker ml service I want to do something ml in this ml world do that to sagemaker it's going to then come back",
    "start": "481840",
    "end": "487360"
  },
  {
    "text": "with the response slightly differently but in a sort of similar vein is the sort of Runner job and these for the sort of",
    "start": "487360",
    "end": "493560"
  },
  {
    "text": "longlasting transactions so for example uh so step functions isn't going to wait for the response it's actually just",
    "start": "493560",
    "end": "499240"
  },
  {
    "text": "going to pause until the second thing uh uh second thing happens so maybe you're going to you know do a a build with code",
    "start": "499240",
    "end": "505319"
  },
  {
    "text": "build or you're going to run an ECS task or a kubernetes uh pod or these kind of things and the cool thing is the step",
    "start": "505319",
    "end": "510919"
  },
  {
    "text": "functions is built natively into AWS that you don't then have to pull for that blue job or other kind of thing to",
    "start": "510919",
    "end": "516320"
  },
  {
    "text": "finish that's just automatically going to tell step functions ah finished my job carry on with the workflow but the",
    "start": "516320",
    "end": "521479"
  },
  {
    "text": "response actually isn't going to go back to the workflow it's just the notification to say whatever you've asked to run is going to",
    "start": "521479",
    "end": "527680"
  },
  {
    "text": "finish and then another really cool thing for step functions is you've got this weight for callback and it's called",
    "start": "527680",
    "end": "533320"
  },
  {
    "text": "a call back to call back pattern or wait for task token but it basically means the step functions will pause until you",
    "start": "533320",
    "end": "539519"
  },
  {
    "text": "tell it to resume now this can be a number of things this could be because you're calling an on- premises service",
    "start": "539519",
    "end": "545040"
  },
  {
    "text": "or something in another data center or a cloud or that kind of thing and there isn't no direct integration or it can be",
    "start": "545040",
    "end": "550760"
  },
  {
    "text": "you have a human in the loop so a human needs to sign off on a loan application or a parcel needs to be loaned on loaned",
    "start": "550760",
    "end": "556240"
  },
  {
    "text": "onto a truck and someone's going to then you know scan a be a barcode and that's going to tell step functions well the",
    "start": "556240",
    "end": "561720"
  },
  {
    "text": "workflow can continue so very powerful Integrations that you can use for step functions it connects to all AWS",
    "start": "561720",
    "end": "567720"
  },
  {
    "text": "services so step functions has this concept of using an SDK call so anything in the AWS SDK and I don't know it's",
    "start": "567720",
    "end": "574720"
  },
  {
    "text": "like 11 12 probably 13,000 different SDK calls which is all built directly into step functions you don't you don't have",
    "start": "574720",
    "end": "580360"
  },
  {
    "text": "to use a Lambda function for many kind of things and obviously you can use a vent Bridge can you use step functions",
    "start": "580360",
    "end": "586079"
  },
  {
    "text": "together uh there have been talks earlier today about this concept of orchestration and choreography so choreographies you've got different",
    "start": "586079",
    "end": "592000"
  },
  {
    "text": "microservices that need to talk to each other and it's sort of this if you think of a dance all the dances are working",
    "start": "592000",
    "end": "598000"
  },
  {
    "text": "separately but they all choreograph together to you know create a dance that's all cohesive while orchestration",
    "start": "598000",
    "end": "603360"
  },
  {
    "text": "is very much tight within a a workflow where you've got very strict ordering things and retry logic and all that kind",
    "start": "603360",
    "end": "608839"
  },
  {
    "text": "of happen thing that happens and obviously many applications are going to use both so how does then seress compute",
    "start": "608839",
    "end": "614920"
  },
  {
    "start": "612000",
    "end": "724000"
  },
  {
    "text": "fit into this picture well great that step functions has these SDK Integrations and great that you can do a",
    "start": "614920",
    "end": "620200"
  },
  {
    "text": "whole bunch of things but um you often need to run your uh you need to run some compute to do something which is going",
    "start": "620200",
    "end": "626279"
  },
  {
    "text": "to be your custom business Logic the thing that makes your your business cool and so we've got sort of three services",
    "start": "626279",
    "end": "632279"
  },
  {
    "text": "uh that you can think about it and it's sort of on a a vertical scale of what you need to manage and then an",
    "start": "632279",
    "end": "637880"
  },
  {
    "text": "opinionated scale from left to right less and more opinionated and of course Amazon ec2 you need to manage a lot more",
    "start": "637880",
    "end": "643920"
  },
  {
    "text": "um but it's not opinionated you know thousands of different instance types you can do whatever you need to do through ECS which is a container",
    "start": "643920",
    "end": "649800"
  },
  {
    "text": "orchestrator which we're going to go into depth and Lambda above that which um you've got far less to manage but you",
    "start": "649800",
    "end": "655320"
  },
  {
    "text": "do need to do it's a bit more opinionated on what you can run so let's have a look at Lambda anybody using",
    "start": "655320",
    "end": "662440"
  },
  {
    "text": "Lambda excellent excellent so you may understand this as well but for some",
    "start": "662440",
    "end": "667519"
  },
  {
    "text": "people who don't uh Lambda is event driven it is literally the main one of the main event driven architectures in",
    "start": "667519",
    "end": "673360"
  },
  {
    "text": "AWS an event source is going to do something so it's going to a database record's going to change a request to an",
    "start": "673360",
    "end": "678720"
  },
  {
    "text": "HTTP endpoint's going to be a um an event as well a change in a resource",
    "start": "678720",
    "end": "683760"
  },
  {
    "text": "State this is going to kick off a Lambda function in any kind of language which is then going to have something in in its code to do something to another",
    "start": "683760",
    "end": "690480"
  },
  {
    "text": "service and there three different types of invocation models asynchronous behind an API call you can imagine that call",
    "start": "690480",
    "end": "697360"
  },
  {
    "text": "the API behind maybe API Gateway or function URLs get the response and come back to the caller you've got",
    "start": "697360",
    "end": "702839"
  },
  {
    "text": "asynchronous where you just hand the message uh hand the request off to Lambda lambda's got a Q and it just",
    "start": "702839",
    "end": "707880"
  },
  {
    "text": "handles things asynchronously that's perfect and then a very sort of powerful Event Source mapping where you Lambda",
    "start": "707880",
    "end": "713639"
  },
  {
    "text": "has a a polar service built into built into it it's actually free to use so if you're using things like cfco or Kinesis",
    "start": "713639",
    "end": "720240"
  },
  {
    "text": "or sqs Lambda can just pull things off that message CU and do the processing from it so I'm just going to quickly",
    "start": "720240",
    "end": "726720"
  },
  {
    "start": "724000",
    "end": "757000"
  },
  {
    "text": "because I want to show you some Lambda scaling we may as well do live demos on this because um why not so all I'm going to do is I have a Lambda function that I",
    "start": "726720",
    "end": "734199"
  },
  {
    "text": "am going to run um and I'll explain what's actually happening over here so I have a Lambda",
    "start": "734199",
    "end": "740279"
  },
  {
    "text": "function that not very exciting is literally going to say hello world and it is going to sleep for 10 seconds but",
    "start": "740279",
    "end": "746680"
  },
  {
    "text": "that's maybe not the most exciting Lambda function let's talk about how that can scale I haven't set up any clusters haven't set up any pods haven't",
    "start": "746680",
    "end": "753240"
  },
  {
    "text": "done anything like that I've just got a Lambda function that's running and I want to do something with it so Lambda",
    "start": "753240",
    "end": "758399"
  },
  {
    "start": "757000",
    "end": "856000"
  },
  {
    "text": "functions can scale pretty impressively and they can scale up to a thousand executions so each time a Lambda",
    "start": "758399",
    "end": "763560"
  },
  {
    "text": "function runs in parallel it's this paralyzation kind of thing you can run a thousand at the same time every 10",
    "start": "763560",
    "end": "769399"
  },
  {
    "text": "seconds so in 10 seconds in 20 seconds time Lambda can scale up to 20,000 30,000 4 so this is literally the",
    "start": "769399",
    "end": "776279"
  },
  {
    "text": "fastest way you can get a huge amount of computer in the CL without having to pre-plan any of your scaling um scaling",
    "start": "776279",
    "end": "782639"
  },
  {
    "text": "in advance and when I spoke about that sort of uh consumption patter pattern in the beginning this is a great way if",
    "start": "782639",
    "end": "788600"
  },
  {
    "text": "you've got varying uh traffic patterns it's just going to scale automatically you don't need to set set anything else",
    "start": "788600",
    "end": "794079"
  },
  {
    "text": "up now uh we did have a previous scaling thing which worked for the first sort of nine years I think it it of Lambda where",
    "start": "794079",
    "end": "801360"
  },
  {
    "text": "instead of that thousand every 10 seconds it was initial 3,000 burst and then sort of 500 every minute the sort",
    "start": "801360",
    "end": "806600"
  },
  {
    "text": "of staggered approach it was going up and that meant if you needed to have 10,000 Lambda functions working in",
    "start": "806600",
    "end": "812040"
  },
  {
    "text": "parallel that would take 12 minutes to get up to get up to that now it's not the end of the world because 10,000",
    "start": "812040",
    "end": "818680"
  },
  {
    "text": "sustained requests is a pretty big web application and that's from a standing start when you're doing nothing obviously if it's a slow ramp up you",
    "start": "818680",
    "end": "824880"
  },
  {
    "text": "know this would be absolutely fine but the lamb team like no no no no we can do better than this let's improve it so in",
    "start": "824880",
    "end": "831120"
  },
  {
    "text": "reent last year we announced this 10,000 this 1,000 invocations every 10 seconds",
    "start": "831120",
    "end": "836279"
  },
  {
    "text": "and this is also now per function previously it was for all the function shared within your account so that means",
    "start": "836279",
    "end": "841480"
  },
  {
    "text": "from 12 minutes we are literally down to 90 seconds to get up to that sustained request so you know 10,000 um concurrent",
    "start": "841480",
    "end": "849360"
  },
  {
    "text": "hits on your website or something like that uh you know this just handles it natively don't have to do anything to",
    "start": "849360",
    "end": "855160"
  },
  {
    "text": "see that running so in the background I've actually been running that that uh that scaling so I had this Lambda",
    "start": "855160",
    "end": "861279"
  },
  {
    "start": "856000",
    "end": "974000"
  },
  {
    "text": "function I'm using this little utility called hey it's called hey uh because it's actually really hard to to stress",
    "start": "861279",
    "end": "867360"
  },
  {
    "text": "test a Lambda function in this way a cre 10,000 requests from a single machine I don't have a a botnet that I'm running",
    "start": "867360",
    "end": "873240"
  },
  {
    "text": "you know all over the world to be able to hit my Lambda function but this utility called Hay is really cool not",
    "start": "873240",
    "end": "878360"
  },
  {
    "text": "sure how much you can see on the screen but it doesn't really matter I'm just saying please run 10,000 requests to an API Gateway endpoint because I have a",
    "start": "878360",
    "end": "886399"
  },
  {
    "text": "Lambda function that is here connected to an API Gateway what is more importantly is here we go so this is",
    "start": "886399",
    "end": "895160"
  },
  {
    "text": "I've got a graph and I've got a graph of my uh concurrency which is the blue line and the throttles which is the orange",
    "start": "895160",
    "end": "901959"
  },
  {
    "text": "line so here you can see immediately as soon as I start with 10,000 immediate requests what's going to happen a th000",
    "start": "901959",
    "end": "908240"
  },
  {
    "text": "requests are going to be allowed in the first 10 seconds and then 9,000 going to be denied going hang on I'm not ready yet I'm not ready yet just wait a little",
    "start": "908240",
    "end": "914800"
  },
  {
    "text": "bit but obviously 10 seconds later lambda's going to say okay now I can accept 2,000 8,000 are going to are",
    "start": "914800",
    "end": "920600"
  },
  {
    "text": "going to be throttled so you can see this sort of very clear um ramp up for the concurrent",
    "start": "920600",
    "end": "926199"
  },
  {
    "text": "executions and it's doesn't Okay the graph hasn't quite behaved itself when it starts it starts at 3,000 but you can",
    "start": "926199",
    "end": "932160"
  },
  {
    "text": "see here I'm at 10,000 what is that 10,9 don't know where it came above more than",
    "start": "932160",
    "end": "937480"
  },
  {
    "text": "10,000 maybe I ran this beforehand but um sometimes it's very annoying sometimes it goes 10,000 And1 and you're",
    "start": "937480",
    "end": "943199"
  },
  {
    "text": "like where did the other one come from please do my demon nicely but you can see basically in a very short amount of",
    "start": "943199",
    "end": "949319"
  },
  {
    "text": "time probably over there uh you know that's 32 up to 34 so maybe 2 minutes so you know to",
    "start": "949319",
    "end": "956519"
  },
  {
    "text": "1 and a half in 2 minutes without doing any configur without doing anything I've basically scaled up a Lambda function to",
    "start": "956519",
    "end": "962079"
  },
  {
    "text": "be able to handle 10,000 to be able to handle 10,000 sustained requests and this is just going to run so that's a",
    "start": "962079",
    "end": "967759"
  },
  {
    "text": "really powerful to way way to that I can get a lot of compute capacity in the cloud but Lambda as I mentioned have",
    "start": "967759",
    "end": "974360"
  },
  {
    "start": "974000",
    "end": "1077000"
  },
  {
    "text": "this event Source mapping where you can pull from all these various sources filter and batch them up and send in your to your target Lambda function",
    "start": "974360",
    "end": "980600"
  },
  {
    "text": "sorry something sounds really weird I've got a bit of an echo um but also the Lambda team said well you know those",
    "start": "980600",
    "end": "987519"
  },
  {
    "text": "were synchronous requests I was heading an API but we can do much better for these Event Source mappings so previously sqs also had a sort of",
    "start": "987519",
    "end": "993839"
  },
  {
    "text": "gradual scale up that we was doing and we were like you know what we can do this much better so reinvent again last year we also dramatically improved how",
    "start": "993839",
    "end": "1000120"
  },
  {
    "text": "quickly sqs scales up and also how that we actually delay the scale down so if you using sqs uh you can get Lambda",
    "start": "1000120",
    "end": "1007160"
  },
  {
    "text": "functions to spin up much much quicker and uh that sounds all great but sometimes you also want to control that",
    "start": "1007160",
    "end": "1012680"
  },
  {
    "text": "you don't want unlimited Lambda functions running uh because maybe you you've got a downstream service so what",
    "start": "1012680",
    "end": "1018040"
  },
  {
    "text": "you can do is can actually also on the event SS mapping configure how that uh how that works and so you don't uh you",
    "start": "1018040",
    "end": "1024438"
  },
  {
    "text": "say from sqs only poll at this rate and then I don't unnecessarily send invokes to a Lambda function which is going to",
    "start": "1024439",
    "end": "1030038"
  },
  {
    "text": "throttle so it's just a a configuration setting that you can control how many Lambda functions run of an sqsq because",
    "start": "1030039",
    "end": "1036038"
  },
  {
    "text": "it's awesome that we can scale this far but I don't always want that sometimes I've got something Downstream that doesn't work and we've done the same",
    "start": "1036039",
    "end": "1042360"
  },
  {
    "text": "thing for CFA so you can see you know big event processing you know you can imagine Kafka or Kinesis as well and you",
    "start": "1042360",
    "end": "1047400"
  },
  {
    "text": "know really huge scut of of um Lambda processing and you can see that sort of NE vertical line that comes up um the",
    "start": "1047400",
    "end": "1054160"
  },
  {
    "text": "Orange Line show how quickly the the um the poers get up and running what's interesting is right at the end you can",
    "start": "1054160",
    "end": "1059559"
  },
  {
    "text": "see how sort of the vertical drop that the the poers will stay up and running as you know as long as possible to be",
    "start": "1059559",
    "end": "1064840"
  },
  {
    "text": "able to drain that uh this CFA um service at the moment and do your processing as quick as possible so",
    "start": "1064840",
    "end": "1071240"
  },
  {
    "text": "basically the story is behind the scenes Lambda is trying to do as much as possible to speed things up and uh improve the",
    "start": "1071240",
    "end": "1077120"
  },
  {
    "start": "1077000",
    "end": "1445000"
  },
  {
    "text": "throughput so that is the sort of servess functions compute part of it you know all about uh scale that matches",
    "start": "1077120",
    "end": "1082960"
  },
  {
    "text": "your workload F scaleup connecting to a whole bunch of different services with far less work to do but there's",
    "start": "1082960",
    "end": "1088840"
  },
  {
    "text": "obviously another way that you can run your code and these are in containers anybody using",
    "start": "1088840",
    "end": "1094400"
  },
  {
    "text": "containers people using containers anybody using ECS yes anybody using",
    "start": "1094400",
    "end": "1099559"
  },
  {
    "text": "fargate we have people cool excellent so um I'll explain how this works and then we'll go into some of the differences so",
    "start": "1099559",
    "end": "1107360"
  },
  {
    "text": "Amazon ECS is a TR container orchestrator it is actually in a way serverless because there's nothing you",
    "start": "1107360",
    "end": "1113480"
  },
  {
    "text": "don't have to install a ECS you don't have to do anything it's just a service that runs in the cloud and it's a fully",
    "start": "1113480",
    "end": "1119120"
  },
  {
    "text": "fully managed control plane doesn't cost you anything you pay for the Computer Resources but the actual container",
    "start": "1119120",
    "end": "1124159"
  },
  {
    "text": "orchestrator is is is free to use any no cluster versions no data store you know none of the stuff that you need to do uh",
    "start": "1124159",
    "end": "1131320"
  },
  {
    "text": "to keep this uh container orchestrator up and running I know there people are using kubernetes and there's really good",
    "start": "1131320",
    "end": "1136480"
  },
  {
    "text": "use cases for that as well but if you think about this kubernetes does need a lot of infrastructure um for kubernetes",
    "start": "1136480",
    "end": "1142120"
  },
  {
    "text": "to run for good reason that's what it needs but ECS doesn't need that it's just a sort of servess control plane and",
    "start": "1142120",
    "end": "1147440"
  },
  {
    "text": "then fargate is where the work happens so far fargate is the the data plane this is where your containers actually",
    "start": "1147440",
    "end": "1152960"
  },
  {
    "text": "run um but again we manage E2 instances that run underneath it you don't have",
    "start": "1152960",
    "end": "1158200"
  },
  {
    "text": "any Amis that you need to do and you know we'll handle the you know the provision the scaling and the management of it and it's uh you just pay for the",
    "start": "1158200",
    "end": "1165679"
  },
  {
    "text": "computer resources that you provision so just looking at ECS the cool thing about ECS Lambda has got great Integrations",
    "start": "1165679",
    "end": "1172840"
  },
  {
    "text": "from the senten model ECS do has integr does have Integrations but they're it's",
    "start": "1172840",
    "end": "1178080"
  },
  {
    "text": "not an event driven model partly you'll see a little bit later but aw but um ECS does have Integrations with all the code",
    "start": "1178080",
    "end": "1184159"
  },
  {
    "text": "suite and then also you know Secrets manager native Integrations and uh Key Management store for um making sure",
    "start": "1184159",
    "end": "1190440"
  },
  {
    "text": "you've got your secure credentials and things and then of course the whole world of um open source container orchestration stuff you know Prometheus",
    "start": "1190440",
    "end": "1197080"
  },
  {
    "text": "grafana for logs and metrics and all these kind of things and sort of anything you can run in a container you",
    "start": "1197080",
    "end": "1202640"
  },
  {
    "text": "can connect out to all these different services so you know a broad picture of services that you can also use with ECS ECS does have some core constructs",
    "start": "1202640",
    "end": "1210200"
  },
  {
    "text": "so it has a a task and this is just a you know one or more containers that you define and you then configure what um",
    "start": "1210200",
    "end": "1216840"
  },
  {
    "text": "what compute capacity that's got some of the networking stuff some IM and things in configuration and then a service is",
    "start": "1216840",
    "end": "1223280"
  },
  {
    "text": "basically just one or more identical task so you can imagine if you need to scale something else or you got a front-end website you need to run this",
    "start": "1223280",
    "end": "1229240"
  },
  {
    "text": "across multiple azs Lambda is multi-az uh doesn't need to worry about A's that just handles it automatically but for",
    "start": "1229240",
    "end": "1236000"
  },
  {
    "text": "ECS this is something you explicitly uh work on but a service is multiple tasks and they sort of work in unison and ECS",
    "start": "1236000",
    "end": "1242880"
  },
  {
    "text": "has got health checks to make sure that these services are up and running and then a cluster is sort of a logical grouping of services and tasks and uh",
    "start": "1242880",
    "end": "1249880"
  },
  {
    "text": "you know handles the capacity in a in a region and underneath that you can use standard ec2 or ec2 spot um and then on",
    "start": "1249880",
    "end": "1256799"
  },
  {
    "text": "the serverless side you can use fargate and in fargate spot as serverless containers uh which I'll explain shortly",
    "start": "1256799",
    "end": "1262880"
  },
  {
    "text": "so you may have picked up two different words ECS is this concept of tasks and services so tasks are OnDemand workloads",
    "start": "1262880",
    "end": "1269640"
  },
  {
    "text": "the the ECS task scheduler runs them and this is you know something that runs as a batch or runs uh once and it uses a",
    "start": "1269640",
    "end": "1276600"
  },
  {
    "text": "runtask API so this is event driven so an event will kick off a ECS task it's",
    "start": "1276600",
    "end": "1282360"
  },
  {
    "text": "going to run it's going to do what it needs to do and then the task is going to finish while uh Services is a long",
    "start": "1282360",
    "end": "1287880"
  },
  {
    "text": "running app so I mentioned a front-end website for example spread across three availability zones well that is going to",
    "start": "1287880",
    "end": "1293640"
  },
  {
    "text": "be a long running Service uh it has a the service schedul which is going to manage them coming up and down it's got",
    "start": "1293640",
    "end": "1299200"
  },
  {
    "text": "some in the Health Management in it and it's going to sort that out uh I talked about the availability zones yeah you can figure out where stuff is going to",
    "start": "1299200",
    "end": "1305400"
  },
  {
    "text": "go on the availability Zone uh a task definition is just this whole bunch of uh Json over here and you",
    "start": "1305400",
    "end": "1312200"
  },
  {
    "text": "set memory you set CPU uh you know whether it's going to be fargate or E ECS underneath the hood to to make that",
    "start": "1312200",
    "end": "1318960"
  },
  {
    "text": "actually work so let's talk a little bit about fargate cuz this is the compute engine",
    "start": "1318960",
    "end": "1324840"
  },
  {
    "text": "for containers and this is very much serverless you don't need to worry about uh things like that each task is going",
    "start": "1324840",
    "end": "1330480"
  },
  {
    "text": "to be run in a dynamically provisioned instance so although there are servers behind the scenes fargate is running on",
    "start": "1330480",
    "end": "1336159"
  },
  {
    "text": "actual E2 instances you've got no access to them you can't see them you don't need to manage them you can't even SSH",
    "start": "1336159",
    "end": "1342120"
  },
  {
    "text": "into them but this is a cool way to be able to use a container construct without having to manage easy2 instances",
    "start": "1342120",
    "end": "1347799"
  },
  {
    "text": "behind them which is is really cool you then configure the tasks based on the CPU and the RAM and then that obviously",
    "start": "1347799",
    "end": "1354279"
  },
  {
    "text": "configuration is applicable to all the tasks that's all the containers that sit within the task now Lambda handles P",
    "start": "1354279",
    "end": "1360480"
  },
  {
    "text": "patching for you and does a whole bunch of stuff for you fargate there's a little bit more that you need to do but",
    "start": "1360480",
    "end": "1365840"
  },
  {
    "text": "AWS is still going to manage the underlying hosts and all of the infrastructure if thing fails it's going to replace that but anything your code",
    "start": "1365840",
    "end": "1372520"
  },
  {
    "text": "related and your runtime and anything that sits within the container that's your responsibility to look after in terms of patching",
    "start": "1372520",
    "end": "1379000"
  },
  {
    "text": "in terms of load balancing and Ingress yet again it's a bit more of a do do it yourself you manage the Ingress um and",
    "start": "1379000",
    "end": "1385960"
  },
  {
    "text": "the load balancing with some sort of load balance in front of it and then AWS is again going to manage the instances",
    "start": "1385960",
    "end": "1391320"
  },
  {
    "text": "behind that if they fail it's going to replace that all that ec2 stuff behind the scenes that's aws's",
    "start": "1391320",
    "end": "1397279"
  },
  {
    "text": "responsibility and then in terms of scaling it's not the same Auto scaling that Lambda happens where it just went",
    "start": "1397279",
    "end": "1402840"
  },
  {
    "text": "up to those 10,000 requests but you've got a lot of control and sort of really interesting control that you can do and",
    "start": "1402840",
    "end": "1408600"
  },
  {
    "text": "you can use AP uh AWS autoscaling which is a service from AWS using cloudwatch metrics to say when my task um",
    "start": "1408600",
    "end": "1416080"
  },
  {
    "text": "throughput reaches this number add a new task when I when it goes below remove a task and do all that kind of thing so um",
    "start": "1416080",
    "end": "1423120"
  },
  {
    "text": "you can use metrics from anything you can use metrics from third party services and all these kind of things but you use basically AWS Auto scaling",
    "start": "1423120",
    "end": "1428960"
  },
  {
    "text": "to be specific about when you want to scale up and when you want to scale down so it's not automatic but you don't necessarily want it to be automatic CU",
    "start": "1428960",
    "end": "1435400"
  },
  {
    "text": "you want to handle how you're connecting how many tasks you've got across which availability zones again underneath the",
    "start": "1435400",
    "end": "1441360"
  },
  {
    "text": "hood AWS is looking after all the compute capacity and infrastructure so we here at Eda day",
    "start": "1441360",
    "end": "1447559"
  },
  {
    "start": "1445000",
    "end": "1626000"
  },
  {
    "text": "let's talk about the sort of Eda patterns using containers and so when I mentioned earlier you know a task per",
    "start": "1447559",
    "end": "1453039"
  },
  {
    "text": "event so this is a common thing you want to run a container when something happens event driven architectures so in",
    "start": "1453039",
    "end": "1460279"
  },
  {
    "text": "this example you load something into an S3 bucket that is going to automatically kick off an event Bridge Rule and that",
    "start": "1460279",
    "end": "1465640"
  },
  {
    "text": "event Bridge rule which has got an integration with fargate says please can you or ECS and fargate please can you",
    "start": "1465640",
    "end": "1470880"
  },
  {
    "text": "spin up a task and do something to my uh to download the image and do some work with that so it's a one-off task that he",
    "start": "1470880",
    "end": "1477640"
  },
  {
    "text": "going to run uh when the task is finished that service is going to then shut down now you do need it doesn't",
    "start": "1477640",
    "end": "1484120"
  },
  {
    "text": "have a native integration like with Lambda so you do need something like a vent Bridge or step functions to kick off the task something needs to invoke",
    "start": "1484120",
    "end": "1490279"
  },
  {
    "text": "the task but as you know by now step functions in a vent Bridge they're really easy to create these orchestrations to do that as well and so",
    "start": "1490279",
    "end": "1496880"
  },
  {
    "text": "the use case would be you know less frequent events you don't want a service that's up and running and polling all the time or doing something all the time",
    "start": "1496880",
    "end": "1503440"
  },
  {
    "text": "something less frequency um you can just use this to run and obviously uh Lambda functions how long can how long can a",
    "start": "1503440",
    "end": "1509559"
  },
  {
    "text": "Lambda function run for anybody know 15 minutes there we go we've got people still awake later on in the afternoon excellent so if you do need something",
    "start": "1509559",
    "end": "1515840"
  },
  {
    "text": "that runs for longer than 15 minutes you've got some big processing or some kind of thing you can't break it up then",
    "start": "1515840",
    "end": "1521039"
  },
  {
    "text": "this is a really good great use case because you can have a long running task so on the services I did talk about a",
    "start": "1521039",
    "end": "1527679"
  },
  {
    "text": "web workload that's a very obvious way but there's also an event processing workload so say you have something on on",
    "start": "1527679",
    "end": "1534600"
  },
  {
    "text": "sqs for example now I talked about sqs and Lambda for scaling well there's a different approach you can also use a",
    "start": "1534600",
    "end": "1539960"
  },
  {
    "text": "container as well if you've got very high throughput you've got a lot of data coming into sqs you prefer to have that",
    "start": "1539960",
    "end": "1545559"
  },
  {
    "text": "sort of steady state consumers this is a great way to do it so um ECS is going to handle the deployments the water scaling",
    "start": "1545559",
    "end": "1552440"
  },
  {
    "text": "and all that kind of thing and yeah you got a lot of events very high frequency this is a way that you can also use containers for these kind of workloads",
    "start": "1552440",
    "end": "1559240"
  },
  {
    "text": "which may have some uh cost implications which may be better for you than running on Lambda and uh you know um uh you",
    "start": "1559240",
    "end": "1567600"
  },
  {
    "text": "don't need to you know configure this all manually you can use the cdk anybody using the cdk cloud development kit so this is a",
    "start": "1567600",
    "end": "1574640"
  },
  {
    "text": "way to generate cloud formation and what we've got these sort of uh el3 constructs so basically all that",
    "start": "1574640",
    "end": "1579840"
  },
  {
    "text": "configuration stuff that you need for um ECS is wrapped up in some simpl to use",
    "start": "1579840",
    "end": "1585080"
  },
  {
    "text": "constructs which you put into your code and then you can set up all these kind of things and set up um you know",
    "start": "1585080",
    "end": "1590440"
  },
  {
    "text": "distribute between the on demand and spot and set up all the configuration it's just an easy way to do it in code",
    "start": "1590440",
    "end": "1595480"
  },
  {
    "text": "so you can use infrastructures code with your um with your um container workloads as",
    "start": "1595480",
    "end": "1600760"
  },
  {
    "text": "well uh so another use case is file processing so I spoke about this beforehand so you do have something uh",
    "start": "1600760",
    "end": "1608080"
  },
  {
    "text": "this is the event driven architecture kind of thing where you have a video or a file or something loads up to S3 which",
    "start": "1608080",
    "end": "1613279"
  },
  {
    "text": "then kicks off an event Bridge rule which then maybe uses step functions and in this case well it's actually going to",
    "start": "1613279",
    "end": "1619000"
  },
  {
    "text": "choose between Lambda and fargate to do something and put something in a um in an S3 um in an S3 bucket so let's see",
    "start": "1619000",
    "end": "1626399"
  },
  {
    "start": "1626000",
    "end": "1799000"
  },
  {
    "text": "how that actually works now I have a ECS task over",
    "start": "1626399",
    "end": "1633520"
  },
  {
    "text": "here I don't have any task nothing running so how much this is costing me",
    "start": "1633520",
    "end": "1639240"
  },
  {
    "text": "because ECS costs me it's only when the tasks are running that it's going to cost me some money so I have defined an",
    "start": "1639240",
    "end": "1645480"
  },
  {
    "text": "ECS task which is a task definition it's it's got a certain amount of CPU it's got a certain amount of ram it's based",
    "start": "1645480",
    "end": "1651320"
  },
  {
    "text": "on a fargate instance uh you know all that kind of configuration but it's not doing anything and so I'm not paying for",
    "start": "1651320",
    "end": "1656840"
  },
  {
    "text": "anything at the moment so what I'm going to do is I am going to kick off an S3",
    "start": "1656840",
    "end": "1663000"
  },
  {
    "text": "copy which is going to basically just copy a file from one S3 bucket to another S3 bucket which is going to kick",
    "start": "1663000",
    "end": "1668600"
  },
  {
    "text": "off an event Bridge rule which is going to go to step functions and is then going to do something so if we actually",
    "start": "1668600",
    "end": "1674159"
  },
  {
    "text": "look at my step function State machine we will see I have a running execution over here you",
    "start": "1674159",
    "end": "1682120"
  },
  {
    "text": "can see basically I've got a use case here is I have a a file and I want to use Lambda for the small images and I",
    "start": "1682120",
    "end": "1689519"
  },
  {
    "text": "want to use fargate for the big images because it's going to take more than 15 minutes to run now maybe this could be an image and it could be a video file",
    "start": "1689519",
    "end": "1695960"
  },
  {
    "text": "anything the point is to show event Bridge kicked off a step functions workflow and I'm picking between Lambda",
    "start": "1695960",
    "end": "1701720"
  },
  {
    "text": "and so this is running the ECS task so if I now go back to ECS that has",
    "start": "1701720",
    "end": "1706799"
  },
  {
    "text": "provisioned a task I now have a running ECS task it's entirely uh oops it's",
    "start": "1706799",
    "end": "1712640"
  },
  {
    "text": "entirely event driven and you can see here I have four V CPUs 30 gig of RAM",
    "start": "1712640",
    "end": "1718600"
  },
  {
    "text": "anything interesting it is running with fargate under the uh under the hood and that's just running and you can see the",
    "start": "1718600",
    "end": "1724679"
  },
  {
    "text": "container name is Step task CU that was my task definition so by simply copying",
    "start": "1724679",
    "end": "1730200"
  },
  {
    "text": "a file up to S3 wiring it into a little bit of uh EV vent Bridge wiring a vent bridge to um Step functions which isn't",
    "start": "1730200",
    "end": "1737159"
  },
  {
    "text": "a hard thing as well I now have a task division which is a task which is using you know 30 gig of memory um which is",
    "start": "1737159",
    "end": "1744480"
  },
  {
    "text": "more than a Lambda function can run and this task can run for as long as long as it is and it's entirely event Ren I",
    "start": "1744480",
    "end": "1749600"
  },
  {
    "text": "didn't pay anything uh and as soon as this runs I'm just running the task and then the task is going to uh the task is",
    "start": "1749600",
    "end": "1755279"
  },
  {
    "text": "going to shut down so people often don't think oh you can do a vent Ren architectures with containers surely containers need to be up and running all",
    "start": "1755279",
    "end": "1761559"
  },
  {
    "text": "the time and you can sort of scale them no this is a really useful way that you can do containers with ECS and fargate",
    "start": "1761559",
    "end": "1767760"
  },
  {
    "text": "there's talk earlier from Natasha Natasha Wright and she was talking about a similar concept with kubernetes so if",
    "start": "1767760",
    "end": "1772880"
  },
  {
    "text": "you are using kubernetes there two tools one's called kadada and one's called Carpenter again where you can have event",
    "start": "1772880",
    "end": "1777960"
  },
  {
    "text": "driven um kubernetes so that's all working I'm not going to wait for the 20 minutes for the",
    "start": "1777960",
    "end": "1783760"
  },
  {
    "text": "Faro task to run because that'll be the most boring uh boring use of our time so the question you may be thinking is",
    "start": "1783760",
    "end": "1790919"
  },
  {
    "text": "which serverless compute option is actually right for my application so uh for your application who's going to use",
    "start": "1790919",
    "end": "1797399"
  },
  {
    "text": "Lambda some people who's going to use ECS the thing is you have no idea what",
    "start": "1797399",
    "end": "1802760"
  },
  {
    "start": "1799000",
    "end": "2364000"
  },
  {
    "text": "your application is you're thinking in your head what you're going to use and that's obviously not common in this room so we need to work out some decision",
    "start": "1802760",
    "end": "1808360"
  },
  {
    "text": "trees and reasons why you may use one compute service over the other and there",
    "start": "1808360",
    "end": "1814159"
  },
  {
    "text": "are some architectural decisions so when you talk when I spoke about Lambda in the beginning what is a really cool",
    "start": "1814159",
    "end": "1819880"
  },
  {
    "text": "thing about Lambda is it works with all these managed triggers and a runtime you know the integration with API Gateway is",
    "start": "1819880",
    "end": "1825720"
  },
  {
    "text": "just there The Event Source mapping for SQ or Kinesis or Kafka is just there Dynam Dynam Dynamo DB streams is just",
    "start": "1825720",
    "end": "1833399"
  },
  {
    "text": "there it's got all these managed triggers it's got managed runtime so you're doing node python Java go. Nets",
    "start": "1833399",
    "end": "1841960"
  },
  {
    "text": "I've probably forgotten some others but basically AWS is going to manage those run times for you and he's going to",
    "start": "1841960",
    "end": "1847240"
  },
  {
    "text": "upgrade them and Patch them so you don't have to do anything so that is a huge benefit that you don't have to manage",
    "start": "1847240",
    "end": "1852480"
  },
  {
    "text": "things in your container yourself Lambda is just going to upgrade that on your behalf slight Nuance for the you know",
    "start": "1852480",
    "end": "1859760"
  },
  {
    "text": "clever people in here who say oh but Lambda functions can run as a container image which is entirely true it's a sort",
    "start": "1859760",
    "end": "1865519"
  },
  {
    "text": "of halfway house between the both between both if you do configure Lambda function as a container image you then",
    "start": "1865519",
    "end": "1871880"
  },
  {
    "text": "do take on the responsibility of patching because a container image is a a mutable artifact that's just the way",
    "start": "1871880",
    "end": "1877440"
  },
  {
    "text": "containers work but if you're using a zip archive you've got all these um uh all these run times that are going to",
    "start": "1877440",
    "end": "1883000"
  },
  {
    "text": "automatically upgrade uh behind the scenes that is an amazing thing to happen um I don't know if anyone",
    "start": "1883000",
    "end": "1888519"
  },
  {
    "text": "remembers a few years ago where the log 4J came out and you know lots of java programmers spent you know a horrible",
    "start": "1888519",
    "end": "1894440"
  },
  {
    "text": "horrible Christmas fixing all their Java code AS log forj was announced anyone who was using Lambda we're like yeah",
    "start": "1894440",
    "end": "1900760"
  },
  {
    "text": "we're done we're done Lambda just upgraded log for J and you know that problem went away so super super benefit",
    "start": "1900760",
    "end": "1907200"
  },
  {
    "text": "and of course that scaling as I mentioned the the scaling up and down all managed by AWS you don't have to do",
    "start": "1907200",
    "end": "1912320"
  },
  {
    "text": "that as well but sometimes container for an architectural consideration is when you do have custom code you've got",
    "start": "1912320",
    "end": "1918760"
  },
  {
    "text": "services that don't natively interact with Lambda or you've got services in other kind of places where you got to",
    "start": "1918760",
    "end": "1924279"
  },
  {
    "text": "connect to kind of things and it doesn't make sense to use a native integration with Lambda because it doesn't exist and you've got some custom code maybe",
    "start": "1924279",
    "end": "1930120"
  },
  {
    "text": "something that's on premises or somewhere else or you want to have the same code that runs in various different places and you don't really want to fit",
    "start": "1930120",
    "end": "1936679"
  },
  {
    "text": "into lambda's programming model then you can use containers which is a great great thing but does need a little bit",
    "start": "1936679",
    "end": "1941760"
  },
  {
    "text": "of management and orchestration but you know we continually working on that to try and make it a little bit easier then",
    "start": "1941760",
    "end": "1947120"
  },
  {
    "text": "of course there are resource considerations um uh Lambda functions can run from 128 Mig to up to 10 gig you",
    "start": "1947120",
    "end": "1954159"
  },
  {
    "text": "saw my demo over there it was you know that was a 30 gig uh um uh fargate task",
    "start": "1954159",
    "end": "1959440"
  },
  {
    "text": "so you know 0.5 you know fargate you can separate CPU and memory and you know all",
    "start": "1959440",
    "end": "1964519"
  },
  {
    "text": "the way up to 120 gig of RAM with um 120 gig in size so different um resource",
    "start": "1964519",
    "end": "1970279"
  },
  {
    "text": "considerations on the networking side um when you add more memory to a Lambda function that's the only performance",
    "start": "1970279",
    "end": "1975880"
  },
  {
    "text": "configuration you get you get prop more CPU and you get proportionately more Network cool all simple but maybe that's",
    "start": "1975880",
    "end": "1982440"
  },
  {
    "text": "not quite you want maybe you do want different network modes or you do want different CPU uh things that you need to",
    "start": "1982440",
    "end": "1987519"
  },
  {
    "text": "choose if you want more control then ECS on fargate is the one you're going to do Lambda functions the clever people knew",
    "start": "1987519",
    "end": "1993519"
  },
  {
    "text": "it was only 15 minutes unlimited with fargate so if you need long running task that's going to work as well Lambda",
    "start": "1993519",
    "end": "1999760"
  },
  {
    "text": "function every time it runs it's one single event that's going to go through super powerful it's a great way to build",
    "start": "1999760",
    "end": "2005320"
  },
  {
    "text": "event of an architectures but sometimes that just doesn't work if is particularly if you're running a high a",
    "start": "2005320",
    "end": "2010639"
  },
  {
    "text": "high throughput sqs polar as we saw before or a High throughput website to have a single invocation for every time",
    "start": "2010639",
    "end": "2017120"
  },
  {
    "text": "somebody hits your website maybe that's going to be uh you know cross prohibitive for you and maybe you're running some multiprocessing within",
    "start": "2017120",
    "end": "2023760"
  },
  {
    "text": "python or node or this kind of thing and you want to take advantage of advantage of multic concurrency then ETS fargate",
    "start": "2023760",
    "end": "2029840"
  },
  {
    "text": "is your friend because it's going to be able to support that because ultimately it's just behind a load balancer the requests are going to come in across",
    "start": "2029840",
    "end": "2035039"
  },
  {
    "text": "your containers and you know very high throughput so there are some considerations for paying for what you provision so fargate",
    "start": "2035039",
    "end": "2042480"
  },
  {
    "text": "when you provision something and that task is running if you use it or you don't use it you're going to pay for that so you can see uh there's an",
    "start": "2042480",
    "end": "2048118"
  },
  {
    "text": "initialization phase and then all the requests come in but you're basically going to pay for that chunk if you've got run one request coming in or a",
    "start": "2048119",
    "end": "2054118"
  },
  {
    "text": "million request coming in you're going to pay for that chunk uh that chunk and So that obviously means you know if",
    "start": "2054119",
    "end": "2059560"
  },
  {
    "text": "you've got a high traffic and your code is efficient this is definitely the lowest per request cost so that's something you're going to do but Lambda",
    "start": "2059560",
    "end": "2067000"
  },
  {
    "text": "is different because you you pay for what you use so a Lambda function is going to start do a single invocation",
    "start": "2067000",
    "end": "2072280"
  },
  {
    "text": "when there's no invocation running Lambda basically goes to sleep next invocation comes along it wakes up very quickly does its invocation and goes to",
    "start": "2072280",
    "end": "2079000"
  },
  {
    "text": "sleep and so when there are gaps between work to do or it's very variable workload and you don't quite know how",
    "start": "2079000",
    "end": "2085320"
  },
  {
    "text": "long you want to you know how many tasks you need to run this is very efficient and can save you money and can be really",
    "start": "2085320",
    "end": "2090358"
  },
  {
    "text": "fast so and it's scales down to zero you know there's no charge when between those gaps when it's not running you",
    "start": "2090359",
    "end": "2095878"
  },
  {
    "text": "know super powerful architectural pattern so ideas on scaling uh ideas on",
    "start": "2095879",
    "end": "2101880"
  },
  {
    "text": "selecting uh seress containers so seress containers when you want low is startup latency it's not as quick as Lambda but",
    "start": "2101880",
    "end": "2108000"
  },
  {
    "text": "it's lowish nothing like ec2 when you need to spend speed speed when you need to put up an instance more than 15",
    "start": "2108000",
    "end": "2114839"
  },
  {
    "text": "minutes high traffic use case and when you need data persistence so Lambda you know runs a little function code and",
    "start": "2114839",
    "end": "2120400"
  },
  {
    "text": "it's going to disappear um seress containers with ECS and fargate you can attach an EBS volume to it so you've got",
    "start": "2120400",
    "end": "2127000"
  },
  {
    "text": "some persistence that you can then share and do that kind of thing so also when you need then control of your computer",
    "start": "2127000",
    "end": "2132960"
  },
  {
    "text": "environment you particular want to particularly want to select CPU and memory um uh or particular instance TI",
    "start": "2132960",
    "end": "2139440"
  },
  {
    "text": "you know instance kind of things that's available with fargate that's available for you as well and of course tooling consistency landra is a different kind",
    "start": "2139440",
    "end": "2145240"
  },
  {
    "text": "of model but if you are already using container tooling that works in a whole container orchestration way and um the",
    "start": "2145240",
    "end": "2152319"
  },
  {
    "text": "packaging part Lambda can do but there had a lot of different you know observability tools and a whole bunch of other kind of tools that don't work with",
    "start": "2152319",
    "end": "2158960"
  },
  {
    "text": "Lambda but work in your um container way then this is a great way you can have consistent tooling whether your",
    "start": "2158960",
    "end": "2164720"
  },
  {
    "text": "containers are running on AWS or you know other kind of places this could be helpful for you as",
    "start": "2164720",
    "end": "2170079"
  },
  {
    "text": "well then uh when you want seress functions you want that immediate startup time you need like that 10,000",
    "start": "2170079",
    "end": "2175240"
  },
  {
    "text": "request and didn't do any config didn't set up any auto scaling or any anything uh off you go and it's going to be",
    "start": "2175240",
    "end": "2180720"
  },
  {
    "text": "variable workloads when you do have the triggers coming in for uh trigger an action on an event that's going to be",
    "start": "2180720",
    "end": "2186079"
  },
  {
    "text": "super useful the VAR utilization and you know when you don't actually know the demand also uh you want to make fewer",
    "start": "2186079",
    "end": "2192800"
  },
  {
    "text": "decisions you don't want to have to decide what your Autos scaling policy is or all your scale up or scale down and just get Lambda to figure it out for you",
    "start": "2192800",
    "end": "2199359"
  },
  {
    "text": "that's really good obviously when I mentioned in the beginning that faster prototype to production this is a great",
    "start": "2199359",
    "end": "2204480"
  },
  {
    "text": "way to do that to do that as well when you are comfortable handing off the oper operational complexity the resilience",
    "start": "2204480",
    "end": "2210640"
  },
  {
    "text": "the scaling up the patching all that kind of stuff to AWS and so there's some people sort of",
    "start": "2210640",
    "end": "2217240"
  },
  {
    "text": "get the slide and I never know where to put it in but sometimes it helps people that if you've got you know a lot of",
    "start": "2217240",
    "end": "2222520"
  },
  {
    "text": "requests with stable and predictable workloads fargate is your friend um if you've got variable workloads and",
    "start": "2222520",
    "end": "2228920"
  },
  {
    "text": "they're sort of intermittent and it's you know has spiky or oriles then lambda's going to be your friend that's",
    "start": "2228920",
    "end": "2234480"
  },
  {
    "text": "going to be the the way to do it but some of you are thinking like a a lot of slides I just want it a bit simpler I just want a bit simpler so the takeaway",
    "start": "2234480",
    "end": "2241720"
  },
  {
    "text": "is ECS fargate is your friend long running stable high volume High resource event sources get the bang best bang for",
    "start": "2241720",
    "end": "2248640"
  },
  {
    "text": "your buck for ECS fargate and then for most other event sources uh try Lambda now I would often suggest that you maybe",
    "start": "2248640",
    "end": "2255079"
  },
  {
    "text": "try lamba first to see if that works for you and then as soon as you uh understand your architecture you can",
    "start": "2255079",
    "end": "2260839"
  },
  {
    "text": "then um you can do things as well but also as I mentioned there's no reason that this is an either or decision you",
    "start": "2260839",
    "end": "2268280"
  },
  {
    "text": "can 100% use both and so in this example uh which I showed in the demo which we didn't go through entirely but uh you",
    "start": "2268280",
    "end": "2275280"
  },
  {
    "text": "got an example I've got an image file and I've got a video file now an image it gets both uploaded to S3 triggers off",
    "start": "2275280",
    "end": "2281079"
  },
  {
    "text": "the event Bridge Rule and then step functions what did that do that had a decision tree and the step functions was",
    "start": "2281079",
    "end": "2287440"
  },
  {
    "text": "as silly as going I've worked out something okay this isn't checking the image size but it could be is this an",
    "start": "2287440",
    "end": "2292760"
  },
  {
    "text": "image or is this a a movie and so say on the image side is it bigger than I don't",
    "start": "2292760",
    "end": "2298240"
  },
  {
    "text": "know pick a number one gig or something so one gig would be much more efficient to run on fargate so why don't we spin",
    "start": "2298240",
    "end": "2304359"
  },
  {
    "text": "up a fargate task to do that anything smaller let's use Lambda maybe I should update this to talk about",
    "start": "2304359",
    "end": "2309680"
  },
  {
    "text": "you know uh images would go to Lambda and movie files would go to fargate because if it's going to take more than",
    "start": "2309680",
    "end": "2315200"
  },
  {
    "text": "15 minutes to run or any of the considerations that you can do you can do that but here you're building it into",
    "start": "2315200",
    "end": "2320400"
  },
  {
    "text": "the same uh application you've got choreography because uh you've got orchestration working because you've got",
    "start": "2320400",
    "end": "2327160"
  },
  {
    "text": "something coming from event bridge going to step functions there's a no code uh if then statement that's going uh either",
    "start": "2327160",
    "end": "2333280"
  },
  {
    "text": "way there's no code to manage run either one of those things and you can see what then happens is once those are complete",
    "start": "2333280",
    "end": "2340359"
  },
  {
    "text": "um it's just going to send a message to eventbridge and then maybe you've got another thirdparty service or your own service says ah whatever conversion",
    "start": "2340359",
    "end": "2347079"
  },
  {
    "text": "process whatever task was happening that is finished and the rest of your event of an architectures can carry on Happily",
    "start": "2347079",
    "end": "2352440"
  },
  {
    "text": "as well so the point is it's not a Lambda or ECS fargate uh you can they",
    "start": "2352440",
    "end": "2358240"
  },
  {
    "text": "got great use cases separately but also you can use them very much in the same um in the same application as",
    "start": "2358240",
    "end": "2364240"
  },
  {
    "start": "2364000",
    "end": "2404000"
  },
  {
    "text": "well but you know that's not the end of the story that's just the story today you know we are always going to be",
    "start": "2364240",
    "end": "2369880"
  },
  {
    "text": "working on the fundamentals we're going to try and improve the developer experience as much as possible we're always going to be adding more guard",
    "start": "2369880",
    "end": "2375920"
  },
  {
    "text": "rails more controls more connecting to other services and you know better Integrations with all the other kind of",
    "start": "2375920",
    "end": "2380960"
  },
  {
    "text": "things so watch the space you know reinvent is coming around the corner I'm sure the Lambda team and I'm sure the",
    "start": "2380960",
    "end": "2386119"
  },
  {
    "text": "ECS team well I say I'm sure I know they are working on some cool kind of things and all the other server Services I I",
    "start": "2386119",
    "end": "2391800"
  },
  {
    "text": "spoke about as well and maybe they even going to be some new new ones AWS is you know servus is very much in in the",
    "start": "2391800",
    "end": "2397920"
  },
  {
    "text": "Forefront of how AWS does things and so the road ahead is bright there's lots of cool things coming out as well so thank",
    "start": "2397920",
    "end": "2404160"
  },
  {
    "start": "2404000",
    "end": "2426000"
  },
  {
    "text": "you very much I appreciate your your time today go build and enjoy building seress Computer Applications thank you",
    "start": "2404160",
    "end": "2409800"
  },
  {
    "text": "very much",
    "start": "2409800",
    "end": "2412960"
  }
]