[
  {
    "start": "0",
    "end": "141000"
  },
  {
    "text": "[Music]",
    "start": "3510",
    "end": "7529"
  },
  {
    "text": "hello everyone so before I start I just want to say how happy I am to be here",
    "start": "12300",
    "end": "18460"
  },
  {
    "text": "today and I'm very honored to have the opportunity to speak at go to Valen 2018 so this is the first time I have the",
    "start": "18460",
    "end": "26169"
  },
  {
    "text": "opportunity to speak at the go to conference so thank you very much for that so welcome to several as",
    "start": "26169",
    "end": "33610"
  },
  {
    "text": "architectural patterns and best practices my name is Sascha Mehring and I am an AW a Solutions Architect based",
    "start": "33610",
    "end": "40180"
  },
  {
    "text": "in Berlin so and I work for Amazon Web",
    "start": "40180",
    "end": "45699"
  },
  {
    "text": "Services now for about three years I have 16 years of development software architecture system architecture",
    "start": "45699",
    "end": "52180"
  },
  {
    "text": "background and I've written tons of Java code and recently I started adopting",
    "start": "52180",
    "end": "57969"
  },
  {
    "text": "golang and I'm really excited about this so goaling is amazing and usually I do a lot of containers",
    "start": "57969",
    "end": "65710"
  },
  {
    "text": "related and service related stuff so if you want to follow me on twitter i'm",
    "start": "65710",
    "end": "70900"
  },
  {
    "text": "sasha two for two and you can drop me an e-mail at smile at amazon.de so our",
    "start": "70900",
    "end": "79210"
  },
  {
    "text": "agenda today is to focus on three different service patterns so first of",
    "start": "79210",
    "end": "85540"
  },
  {
    "text": "course we will start with a brief introduction into micro services and service foundations and this is actually",
    "start": "85540",
    "end": "92590"
  },
  {
    "text": "really important for the understanding of the patterns we will discuss today so we will start with the web application",
    "start": "92590",
    "end": "98950"
  },
  {
    "text": "pattern which is also applicable for like let's say mobile backends micro",
    "start": "98950",
    "end": "104860"
  },
  {
    "text": "services and API deployments and then I'll talk about the data like pattern",
    "start": "104860",
    "end": "111610"
  },
  {
    "text": "and some very specific sub patterns related to analytical processing and",
    "start": "111610",
    "end": "117100"
  },
  {
    "text": "last but not least I will talk about stream processing but before we will dive into each of the patterns we'll",
    "start": "117100",
    "end": "125049"
  },
  {
    "text": "take a closer look at some foundational concepts of service applications so",
    "start": "125049",
    "end": "131380"
  },
  {
    "text": "let's start off with the concept of micro services and what this term actually means in the context of service",
    "start": "131380",
    "end": "137379"
  },
  {
    "text": "architectures which paradigms are important so I can't imagine that many of you have",
    "start": "137379",
    "end": "143209"
  },
  {
    "start": "141000",
    "end": "141000"
  },
  {
    "text": "seen something like this or something similar so we'll just go briefly over this just to give a small introduction",
    "start": "143209",
    "end": "151209"
  },
  {
    "text": "first of all in your typical micro-services architecture you can use different languages and different",
    "start": "151209",
    "end": "157250"
  },
  {
    "text": "platforms for different microservices so you have a polyglot environment so for example let's say you start with a",
    "start": "157250",
    "end": "165200"
  },
  {
    "text": "Python development and then you realize okay maybe this is not fast enough or I have very specific requirements and then",
    "start": "165200",
    "end": "172459"
  },
  {
    "text": "switch to something like raster golang or so and so you can have mixed",
    "start": "172459",
    "end": "178100"
  },
  {
    "text": "languages and mixed platforms for your micro services and usually micro services focus on one specific",
    "start": "178100",
    "end": "184310"
  },
  {
    "text": "functionality so you do one thing but you do very well and the team that",
    "start": "184310",
    "end": "189680"
  },
  {
    "text": "usually builds those micro services it's also responsible for running them in production and typically your micro",
    "start": "189680",
    "end": "197120"
  },
  {
    "text": "service is kind of a black box so this means you have a simple interface and you hide the implementation details and",
    "start": "197120",
    "end": "203920"
  },
  {
    "text": "micro services can of course be deployed independently from each other so you",
    "start": "203920",
    "end": "209570"
  },
  {
    "text": "should avoid situations where you have like where you have to deploy service be",
    "start": "209570",
    "end": "215450"
  },
  {
    "text": "because you have deployed service a and there is no central service those",
    "start": "215450",
    "end": "221600"
  },
  {
    "text": "services talk to each other so we have a decentralized service landscape micro",
    "start": "221600",
    "end": "228470"
  },
  {
    "text": "services of course in general should be stateless and if you have state this",
    "start": "228470",
    "end": "233989"
  },
  {
    "text": "should be kept on external systems session information for instance can be stored and let's say Redis or memcache D",
    "start": "233989",
    "end": "240739"
  },
  {
    "text": "and data should be stored in relational databases or no sequel systems so",
    "start": "240739",
    "end": "245930"
  },
  {
    "text": "depending on your specific requirements of course and you can use or you can implement loose coupling of those",
    "start": "245930",
    "end": "252650"
  },
  {
    "text": "services using resin two phases or queues let's say you can use SQL kinases",
    "start": "252650",
    "end": "259130"
  },
  {
    "text": "Kafka Amazon MQ RabbitMQ T to decouple those particular services and shared",
    "start": "259130",
    "end": "267530"
  },
  {
    "text": "libraries and share SDKs should be avoided because in general this has a negative impact on the",
    "start": "267530",
    "end": "273889"
  },
  {
    "text": "this process sewn by shared libraries I mean libraries that create actual coupling and dependencies so don't use",
    "start": "273889",
    "end": "282020"
  },
  {
    "text": "shared libraries for your business logic and for your models so instead accept redundancy and reduce some kind of",
    "start": "282020",
    "end": "288979"
  },
  {
    "text": "shared service that can be accessed by other services or also think about",
    "start": "288979",
    "end": "294740"
  },
  {
    "text": "realizing your micro services and keep in mind the application is far cheaper",
    "start": "294740",
    "end": "300469"
  },
  {
    "text": "than the wrong abstraction and please don't make any assumptions about things",
    "start": "300469",
    "end": "306199"
  },
  {
    "text": "like IP addresses or directories so this is really important because this can",
    "start": "306199",
    "end": "312560"
  },
  {
    "text": "have a huge impact if you start migrating your services so for example if you have your services running in",
    "start": "312560",
    "end": "318469"
  },
  {
    "text": "your own data center or in your colocation and you have specific",
    "start": "318469",
    "end": "323719"
  },
  {
    "text": "requirements and you rely on let's say hard-coded IP addresses or file system layouts and then you start migrating",
    "start": "323719",
    "end": "330289"
  },
  {
    "text": "those workloads to two AWS you will certainly run into issues because you wouldn't have those specific IP",
    "start": "330289",
    "end": "336889"
  },
  {
    "text": "addresses anymore and you should always use mechanisms and services for",
    "start": "336889",
    "end": "343490"
  },
  {
    "text": "registration so a popular example for those services",
    "start": "343490",
    "end": "348500"
  },
  {
    "text": "things like console etcd eureka zookeeper you name it and in general it is a good",
    "start": "348500",
    "end": "356990"
  },
  {
    "text": "idea to use lightweight protocols for communication so for instance you can use HTTP and rest for asynchronous",
    "start": "356990",
    "end": "362539"
  },
  {
    "text": "communication between services and we've already touched asynchronous",
    "start": "362539",
    "end": "368389"
  },
  {
    "text": "communication a little bit so you can use messaging implementations like Kinesis SQS and so on for asynchronous",
    "start": "368389",
    "end": "376039"
  },
  {
    "text": "communication so we took a closer look",
    "start": "376039",
    "end": "382189"
  },
  {
    "text": "at micro services and some of the best practices and in the next few minutes I want to cover a few of the foundational",
    "start": "382189",
    "end": "390259"
  },
  {
    "text": "concepts of service applications which are people which are applicable to all",
    "start": "390259",
    "end": "397189"
  },
  {
    "text": "the patterns we're discussing today and all those patterns which which I will show today are well adopted and used by",
    "start": "397189",
    "end": "403639"
  },
  {
    "text": "the AWS customers so let's start off with water service application actually",
    "start": "403639",
    "end": "410090"
  },
  {
    "start": "406000",
    "end": "406000"
  },
  {
    "text": "yes so as you might already know on AWS we have several choices to deploy your",
    "start": "410090",
    "end": "416389"
  },
  {
    "text": "applications so certainly of course you can deploy your applications directly into a virtual machine which is easy to",
    "start": "416389",
    "end": "423860"
  },
  {
    "text": "instance or you can deploy them and docker containers on ec2 with services",
    "start": "423860",
    "end": "429560"
  },
  {
    "text": "like ECS or eks and then you have this class of service that's kind of in the",
    "start": "429560",
    "end": "436430"
  },
  {
    "text": "middle which is called managed service and these services where you may not",
    "start": "436430",
    "end": "442520"
  },
  {
    "text": "really be responsible for the actual servers but this service are still there",
    "start": "442520",
    "end": "448930"
  },
  {
    "text": "so and those are really important when you consume the service because you need",
    "start": "448930",
    "end": "455270"
  },
  {
    "text": "to be able to right-size that's potentially also scale that service and",
    "start": "455270",
    "end": "460340"
  },
  {
    "text": "you define that by achieving the number of servers and instance types of the ec2",
    "start": "460340",
    "end": "466460"
  },
  {
    "text": "instances which fits your particular workload so for example if you want to run your Postgres database on AWS",
    "start": "466460",
    "end": "474650"
  },
  {
    "text": "so one choice is typically that you set it up in RDS so RDS is some kind of",
    "start": "474650",
    "end": "482449"
  },
  {
    "text": "managed framework around different database engine implementations and then",
    "start": "482449",
    "end": "489529"
  },
  {
    "text": "you pick the ec2 instance that fits your workload so maybe you work load is CPU",
    "start": "489529",
    "end": "496370"
  },
  {
    "text": "intensive and c5 instance ID might be a good choice for that and on the right",
    "start": "496370",
    "end": "502430"
  },
  {
    "text": "you can see the class of services that we will focus in on today which service",
    "start": "502430",
    "end": "508009"
  },
  {
    "text": "services where servers are not present at all so this means you can typically",
    "start": "508009",
    "end": "515089"
  },
  {
    "text": "reduce your operational overhead using that particular type of services and",
    "start": "515089",
    "end": "521409"
  },
  {
    "text": "recently there has been some kind of confusion and discussion around what",
    "start": "521589",
    "end": "527570"
  },
  {
    "text": "service actually means so things like if I deploy my function as a service",
    "start": "527570",
    "end": "534100"
  },
  {
    "text": "framework or make human eaters class is actually server less so no it isn't so",
    "start": "534100",
    "end": "540050"
  },
  {
    "text": "that's why want to repeat that here and you have basically four common tenets of a",
    "start": "540050",
    "end": "546450"
  },
  {
    "text": "service application so no service provision wants and to manage and you",
    "start": "546450",
    "end": "551910"
  },
  {
    "text": "also never pay for idle with service applications so for example if your",
    "start": "551910",
    "end": "557339"
  },
  {
    "text": "application is kind of cyclically in nature maybe you have a lot of in the",
    "start": "557339",
    "end": "563100"
  },
  {
    "text": "month processing you so you don't pay for these times when it's not in use and this is this is really important also",
    "start": "563100",
    "end": "569990"
  },
  {
    "text": "those service applications have built in high availability and as s recovery",
    "start": "569990",
    "end": "575370"
  },
  {
    "text": "capabilities and those service and those have other services we are talking about today is it on a regional level on AWS",
    "start": "575370",
    "end": "583350"
  },
  {
    "text": "I'm not sure if you're familiar with the region and availability concept and in AWS those services span automatically",
    "start": "583350",
    "end": "591089"
  },
  {
    "text": "overall availability zones and provide you with built in high availability and",
    "start": "591089",
    "end": "598050"
  },
  {
    "text": "disaster recovery capabilities and perhaps the most important aspect of a",
    "start": "598050",
    "end": "604260"
  },
  {
    "text": "service application that it scales with the usage so let's say you have a lot of",
    "start": "604260",
    "end": "609810"
  },
  {
    "text": "user requests coming in and those are growing so the service application will scale as well so this means not servers",
    "start": "609810",
    "end": "618270"
  },
  {
    "text": "are the unit of scale anymore but lamina functions so and at SRI min 2016 two of",
    "start": "618270",
    "end": "625740"
  },
  {
    "text": "my colleagues introduced the service compute manifesto so if you want to dive deeper here you can you can google that",
    "start": "625740",
    "end": "631920"
  },
  {
    "text": "and which is very similar to those four core tenets so let's take a closer look",
    "start": "631920",
    "end": "639270"
  },
  {
    "text": "at what a travel occation actually consists of so we have three different",
    "start": "639270",
    "end": "645120"
  },
  {
    "text": "parts so the first one is an event source so this means this can be changes",
    "start": "645120",
    "end": "651360"
  },
  {
    "text": "in your data state so let's say for example you have a dynamo DB table and",
    "start": "651360",
    "end": "657750"
  },
  {
    "text": "you constantly write data into this dynamo DB table and you can push a delta",
    "start": "657750",
    "end": "664680"
  },
  {
    "text": "through through dynamo DB stream and then consume those changes and maybe",
    "start": "664680",
    "end": "671610"
  },
  {
    "text": "built a meter index things like this also request two end points so let's say maybe you have an",
    "start": "671610",
    "end": "678540"
  },
  {
    "text": "API gateway set up that maps to Lemna functions and also things like changes",
    "start": "678540",
    "end": "686010"
  },
  {
    "text": "in your resource state then you have as a second part the function itself which",
    "start": "686010",
    "end": "692220"
  },
  {
    "text": "can be implemented in different languages using different platforms so you have the Java Virtual Machine dotnet",
    "start": "692220",
    "end": "698970"
  },
  {
    "text": "Python nodejs and Golding and then there's a third part you have the",
    "start": "698970",
    "end": "704820"
  },
  {
    "text": "services which can be anything of course it can be an AWS service so you can",
    "start": "704820",
    "end": "711270"
  },
  {
    "text": "communicate with DynamoDB e or with r es database or write things into in Kinesis",
    "start": "711270",
    "end": "716610"
  },
  {
    "text": "stream but this can be also third party ad is so we already talked about the",
    "start": "716610",
    "end": "723690"
  },
  {
    "start": "722000",
    "end": "722000"
  },
  {
    "text": "general concept of stateless architectures so but now the question is what does being stateless mean and the",
    "start": "723690",
    "end": "730529"
  },
  {
    "text": "context of a do alias lambda so state like user sessions should be stored in",
    "start": "730529",
    "end": "737279"
  },
  {
    "text": "an external service like let's say dynam will be s3 and a Tavares lambda",
    "start": "737279",
    "end": "743250"
  },
  {
    "text": "functions execute in a container so you have some kind of a sandbox environment that isolates them from other functions",
    "start": "743250",
    "end": "750690"
  },
  {
    "text": "and provides resources such as memory and then CPU and this is specified in",
    "start": "750690",
    "end": "756630"
  },
  {
    "text": "the functions configuration and this container exists for a certain amount of",
    "start": "756630",
    "end": "761700"
  },
  {
    "text": "time so please don't assume any affinity with the underlying computer",
    "start": "761700",
    "end": "767579"
  },
  {
    "text": "infrastructure because let's say if you store files in the slash temp directory",
    "start": "767579",
    "end": "772860"
  },
  {
    "text": "in your lambda function the files may be gone in the next call of your lambda",
    "start": "772860",
    "end": "778829"
  },
  {
    "text": "function so it means you have to maybe really check your application for lambda",
    "start": "778829",
    "end": "785540"
  },
  {
    "text": "and it is really important to speak about how lambda functions actually",
    "start": "785540",
    "end": "791100"
  },
  {
    "text": "behave so when you first invoke a lambda function it goes through a process that",
    "start": "791100",
    "end": "796680"
  },
  {
    "text": "we call a cold start process so I'm not sure how many of you have already heard",
    "start": "796680",
    "end": "802020"
  },
  {
    "text": "about this so lambda cold snap okay and this involves things like",
    "start": "802020",
    "end": "809000"
  },
  {
    "text": "downloading code from s3 to AWS lambda starting it up in a container on a",
    "start": "809000",
    "end": "815540"
  },
  {
    "text": "lambda host and then running additional initialization code that you have defined in the code of your lambda",
    "start": "815540",
    "end": "822020"
  },
  {
    "text": "function so here in this example you can see that I'm importing some external",
    "start": "822020",
    "end": "829430"
  },
  {
    "text": "libraries yes so this is not a complete example I wanted to just show a few",
    "start": "829430",
    "end": "834920"
  },
  {
    "text": "lines of code and to make Fira what what the actual ideas behind that",
    "start": "834920",
    "end": "839980"
  },
  {
    "text": "and I'm also making a connection to an RDS database and what is important here",
    "start": "839980",
    "end": "848690"
  },
  {
    "text": "is that I'm doing that outside of the handler so you can see the lambda",
    "start": "848690",
    "end": "853850"
  },
  {
    "text": "highlighted here and that happens only",
    "start": "853850",
    "end": "859340"
  },
  {
    "text": "during the cold start process so lambda will keep the container available for a",
    "start": "859340",
    "end": "865100"
  },
  {
    "text": "period of time so if you have subsequent invocations of the lambda function the",
    "start": "865100",
    "end": "871910"
  },
  {
    "text": "lambda function will be warm and it is really important to take advantage of the container reuse in your service",
    "start": "871910",
    "end": "879380"
  },
  {
    "text": "application because it makes it much more performant and each subsequent invocation will then just happen on a",
    "start": "879380",
    "end": "887000"
  },
  {
    "text": "handle level so which you can see here highlighted and if cold start times are",
    "start": "887000",
    "end": "895160"
  },
  {
    "text": "an issue for your application you can also keep them warm by scheduling events in flood watch events so let's say every",
    "start": "895160",
    "end": "902660"
  },
  {
    "text": "30 seconds or so you just fire an event and keep the lambda function warm and",
    "start": "902660",
    "end": "910870"
  },
  {
    "text": "also keep in mind you can attach an elastic network interface to your lambda function so you can communicate with",
    "start": "910870",
    "end": "918230"
  },
  {
    "text": "private resources in your V PC so one very popular example for that is if you",
    "start": "918230",
    "end": "924530"
  },
  {
    "text": "have an elastic hash cluster running in your V pieces of for instance a radius",
    "start": "924530",
    "end": "932780"
  },
  {
    "text": "cluster and this Redis cluster is and private subnets of a V PC and you want",
    "start": "932780",
    "end": "938959"
  },
  {
    "text": "to have access to it you need to attach an elastic network interface and this",
    "start": "938959",
    "end": "944269"
  },
  {
    "text": "should only be used if needed because it will add to the cold start time and a",
    "start": "944269",
    "end": "951769"
  },
  {
    "start": "950000",
    "end": "950000"
  },
  {
    "text": "few other lambda best practices so you want to minimize the package size only",
    "start": "951769",
    "end": "958069"
  },
  {
    "text": "two necessities especially if you're using things like dotnet and Java and",
    "start": "958069",
    "end": "964149"
  },
  {
    "text": "some AWS SDKs like the Java SDK are modular so you can just bring the",
    "start": "964149",
    "end": "970009"
  },
  {
    "text": "components you need for example modules for dynamo DB and Kinesis so take a",
    "start": "970009",
    "end": "975800"
  },
  {
    "text": "closer look at your maven dependencies and throw out as many dependencies as possible this reduces the call set-up",
    "start": "975800",
    "end": "983569"
  },
  {
    "text": "time and usually it is best practice to separate the lambda handler from the",
    "start": "983569",
    "end": "988910"
  },
  {
    "text": "core logic of your function because this improves accessibility of your code so",
    "start": "988910",
    "end": "994279"
  },
  {
    "text": "you can write your unit tests for your business logic test it and then have a separate layer of invocation code that",
    "start": "994279",
    "end": "1001660"
  },
  {
    "text": "is calling your business logic and this is also a very good approach if you",
    "start": "1001660",
    "end": "1007720"
  },
  {
    "text": "start with lambda and then maybe detect in the future that the lambda is maybe",
    "start": "1007720",
    "end": "1013480"
  },
  {
    "text": "not the right tool for it and the moment you want to migrate to two containers then it is a very good idea to have the",
    "start": "1013480",
    "end": "1021550"
  },
  {
    "text": "actual handler function separated from the business logic because you can take the business logic put in a container",
    "start": "1021550",
    "end": "1028000"
  },
  {
    "text": "and you're fine so and also leverage",
    "start": "1028000",
    "end": "1033938"
  },
  {
    "text": "environment variables as much as possible because this is a very great way to change how your code behaves",
    "start": "1033939",
    "end": "1040569"
  },
  {
    "text": "without actually changing your code so this is often used if you want to keep",
    "start": "1040569",
    "end": "1049950"
  },
  {
    "text": "the same lambda function in different stages of your environments so if you have test dev in a production stage you",
    "start": "1049950",
    "end": "1060460"
  },
  {
    "text": "can use the same lambda package and just say okay I'm now in the difference stage",
    "start": "1060460",
    "end": "1067330"
  },
  {
    "text": "and then function picks a different set of configurations and it is also",
    "start": "1067330",
    "end": "1076909"
  },
  {
    "text": "recommended to self-contained dependencies in your package as much as possible and keep in mind that lamina",
    "start": "1076909",
    "end": "1083900"
  },
  {
    "text": "has a single configuration option to change the memory allocation of your lambda function so by changing this",
    "start": "1083900",
    "end": "1090890"
  },
  {
    "text": "configuration you are also changing the amount of CPU that is associated with this particular lambda function and",
    "start": "1090890",
    "end": "1097610"
  },
  {
    "text": "remember there is a cloud metric called max memory used which can which you can",
    "start": "1097610",
    "end": "1103490"
  },
  {
    "text": "use to find Huhn you ulema configuration and another way to get great insights",
    "start": "1103490",
    "end": "1111620"
  },
  {
    "start": "1107000",
    "end": "1107000"
  },
  {
    "text": "into your lambda function is to leverage AWS x-ray and it's very easy to",
    "start": "1111620",
    "end": "1117710"
  },
  {
    "text": "integrate so actually it's just a checkbox in the console or an API call",
    "start": "1117710",
    "end": "1122720"
  },
  {
    "text": "and then you have an abled active tracing and this gives you information",
    "start": "1122720",
    "end": "1128029"
  },
  {
    "text": "how you learn the function in the context of the lambda service is performing and this can also be used for",
    "start": "1128029",
    "end": "1135770"
  },
  {
    "text": "other workloads so let's say maybe you have your communities cluster running on",
    "start": "1135770",
    "end": "1141620"
  },
  {
    "text": "AWS and then request come in through the application load balancer and then starting from the application load",
    "start": "1141620",
    "end": "1147620"
  },
  {
    "text": "balancer you get this tracing information so you can see a tracing map",
    "start": "1147620",
    "end": "1152630"
  },
  {
    "text": "and how the requests are flowing through your architecture so this is very very",
    "start": "1152630",
    "end": "1158120"
  },
  {
    "text": "useful especially if you want to debug and then see okay how much time is spent",
    "start": "1158120",
    "end": "1164659"
  },
  {
    "text": "for the communication between two certain services so and there's also a",
    "start": "1164659",
    "end": "1172669"
  },
  {
    "text": "way to customize the sampling rates so here's a small sample to show how to do this so the second line of this code",
    "start": "1172669",
    "end": "1179149"
  },
  {
    "text": "sample is including a sample configuration file to configure custom sampling interval and the third line you",
    "start": "1179149",
    "end": "1186890"
  },
  {
    "text": "see that we actually wrap the require statement of the AWS SDK in order to",
    "start": "1186890",
    "end": "1194149"
  },
  {
    "text": "instrument the AWS SDK and in that particular case it is s3 and here's a",
    "start": "1194149",
    "end": "1201169"
  },
  {
    "start": "1200000",
    "end": "1200000"
  },
  {
    "text": "quick example of what produced an x-ray for lamina function so on the top half of this picture you can",
    "start": "1201169",
    "end": "1208250"
  },
  {
    "text": "see the laminar service itself and you can see things like dwell time as an example or how long a function actually",
    "start": "1208250",
    "end": "1215300"
  },
  {
    "text": "waited for the lamda service to be executed and you can also see the entire duration of the lambda function",
    "start": "1215300",
    "end": "1222410"
  },
  {
    "text": "executing from start to finish this is really useful to get a better feeling",
    "start": "1222410",
    "end": "1228470"
  },
  {
    "text": "how your application actually behaves and now I want you to meet a good friend",
    "start": "1228470",
    "end": "1233780"
  },
  {
    "text": "of mine say hello to Sam Sam means",
    "start": "1233780",
    "end": "1240800"
  },
  {
    "start": "1239000",
    "end": "1239000"
  },
  {
    "text": "basically serverless application model and I want to talk a little bit about deployment and then modeling of your",
    "start": "1240800",
    "end": "1247370"
  },
  {
    "text": "service applications so Sam is built on top of cloud formation so which means",
    "start": "1247370",
    "end": "1252620"
  },
  {
    "text": "you can reuse any tool that supports cloud formation and Sam also supports",
    "start": "1252620",
    "end": "1258260"
  },
  {
    "text": "cloud formation features like parameters and intrinsic functions and you can combine some resources with cloud",
    "start": "1258260",
    "end": "1265880"
  },
  {
    "text": "formation resources and Sam also includes some ways to deploy your application and it will provide",
    "start": "1265880",
    "end": "1272770"
  },
  {
    "text": "artifacts for deployments and we'll load it up to to s3 and then it will leverage",
    "start": "1272770",
    "end": "1278660"
  },
  {
    "text": "cloud formation change set and it's an open specification so you can find it on on github and yeah",
    "start": "1278660",
    "end": "1285620"
  },
  {
    "text": "use it for your own implementation you can do pull requests and you may also",
    "start": "1285620",
    "end": "1295190"
  },
  {
    "start": "1293000",
    "end": "1293000"
  },
  {
    "text": "have heard that AWS has published Sam local and this is a really exciting",
    "start": "1295190",
    "end": "1303530"
  },
  {
    "text": "project which provides you a way to do local testing for your Lema functions",
    "start": "1303530",
    "end": "1310400"
  },
  {
    "text": "before deploying them into the service so you can basically develop test mock",
    "start": "1310400",
    "end": "1317059"
  },
  {
    "text": "events test ulema functions and it gives you also a local copy of api gateway",
    "start": "1317059",
    "end": "1323179"
  },
  {
    "text": "which is really really cool so you can spin it up and then it supports also hot",
    "start": "1323179",
    "end": "1328790"
  },
  {
    "text": "reloading so you can change your code on the fly and once you have finished your",
    "start": "1328790",
    "end": "1334310"
  },
  {
    "text": "local tests Sam has also a CLI implementation that includes all of the same commands to",
    "start": "1334310",
    "end": "1341980"
  },
  {
    "text": "package and deploy your application to the lamda service and probably the best",
    "start": "1341980",
    "end": "1348610"
  },
  {
    "text": "way in AWS to deploy your cloud formation templates is a custom pipeline",
    "start": "1348610",
    "end": "1353919"
  },
  {
    "text": "and which uses a coal pipeline and coal pipeline is a continuous integration service so coal pipeline has built-in",
    "start": "1353919",
    "end": "1362950"
  },
  {
    "text": "support for AWS Sam and also for cloud formation obviously so and you can",
    "start": "1362950",
    "end": "1368049"
  },
  {
    "text": "integrate additional stages in your pipeline so for example you have build",
    "start": "1368049",
    "end": "1373269"
  },
  {
    "text": "stage to do builds and potential test stages as well and you can also leverage",
    "start": "1373269",
    "end": "1379269"
  },
  {
    "text": "pipeline to deploy into different stages so for example if you want to do some",
    "start": "1379269",
    "end": "1384460"
  },
  {
    "text": "testing any development environment and if those tests pass automatically deploy",
    "start": "1384460",
    "end": "1391419"
  },
  {
    "text": "in your staging environment and potentially have a manual approval step before deploying into production and",
    "start": "1391419",
    "end": "1398009"
  },
  {
    "text": "this is all possible in copper plan or what is also really great is you can",
    "start": "1398009",
    "end": "1403240"
  },
  {
    "text": "integrate lambda functions here so you can implement custom logic in your",
    "start": "1403240",
    "end": "1408700"
  },
  {
    "text": "pipeline and also want to mention one",
    "start": "1408700",
    "end": "1413919"
  },
  {
    "start": "1411000",
    "end": "1411000"
  },
  {
    "text": "capability with an lambda that provides the Cape of the ability to have one",
    "start": "1413919",
    "end": "1419500"
  },
  {
    "text": "lambda alias mapped to multiple lambda function versions it sounds a little bit",
    "start": "1419500",
    "end": "1425500"
  },
  {
    "text": "complicated but this is very important for canary deployments that you can do",
    "start": "1425500",
    "end": "1430929"
  },
  {
    "text": "with the lambda so what you can do is basically to define in your Center and",
    "start": "1430929",
    "end": "1436330"
  },
  {
    "text": "plate multiple function versions and specify an amount of traffic and an interval in which the traffic will move",
    "start": "1436330",
    "end": "1443379"
  },
  {
    "text": "from one version to another version of your lambda function and this is fully",
    "start": "1443379",
    "end": "1448990"
  },
  {
    "text": "supported by a biko deploy and code deploy will actually money to a cloud watch alerts for failures if you yeah if",
    "start": "1448990",
    "end": "1457389"
  },
  {
    "text": "something goes wrong in your new alumni function and it will also initiate a rollback for you",
    "start": "1457389",
    "end": "1464399"
  },
  {
    "text": "canary deployments are also supported on an API gateway level so I have to decide okay watch which",
    "start": "1464399",
    "end": "1472470"
  },
  {
    "text": "which implementation is better for me this bet on an API level or maybe on an",
    "start": "1472470",
    "end": "1478930"
  },
  {
    "text": "alumna level maybe I can combine both approaches so let's go ahead and start",
    "start": "1478930",
    "end": "1489520"
  },
  {
    "text": "talking about a first pattern which is the web application pattern so and this",
    "start": "1489520",
    "end": "1494920"
  },
  {
    "start": "1494000",
    "end": "1494000"
  },
  {
    "text": "is a common pattern we have like static content in the upper part of the architecture so maybe you have some",
    "start": "1494920",
    "end": "1501490"
  },
  {
    "text": "resources in your s3 buckets so let's say HTML web pages you have your",
    "start": "1501490",
    "end": "1506950"
  },
  {
    "text": "JavaScript codes you have your images and those are delivered through our",
    "start": "1506950",
    "end": "1514059"
  },
  {
    "text": "content delivery network Amazon CloudFront and at the bottom you might",
    "start": "1514059",
    "end": "1519100"
  },
  {
    "text": "have the more dynamic calls of your web application because typically today's",
    "start": "1519100",
    "end": "1524440"
  },
  {
    "text": "web applications we have like a static part and then you have a dynamic part with your s API so which could be",
    "start": "1524440",
    "end": "1534059"
  },
  {
    "text": "angularjs reactor s or so accessing some some rest api s' and the content here is",
    "start": "1534059",
    "end": "1544030"
  },
  {
    "text": "going through an api get where api which is backed by lambda functions so this",
    "start": "1544030",
    "end": "1550059"
  },
  {
    "text": "means you have your business logic implemented in you a mm-nah functions",
    "start": "1550059",
    "end": "1556450"
  },
  {
    "text": "and then you have additional downstream services like in this particular case you have dynamo DB waste or your data",
    "start": "1556450",
    "end": "1562510"
  },
  {
    "text": "always the store your estate and it is really important not to leave out",
    "start": "1562510",
    "end": "1568690"
  },
  {
    "text": "kognito in this pattern because Cognito provides you sign up and sign-in",
    "start": "1568690",
    "end": "1574679"
  },
  {
    "text": "capabilities in your application as well as identity federation so you can use",
    "start": "1574679",
    "end": "1579730"
  },
  {
    "text": "things like let's say Facebook identity Federation or if you have Active",
    "start": "1579730",
    "end": "1586000"
  },
  {
    "text": "Directory running in in your account or in your data center you can leverage",
    "start": "1586000",
    "end": "1593679"
  },
  {
    "text": "kognito to use this information and this pattern actually is well used",
    "start": "1593679",
    "end": "1599009"
  },
  {
    "text": "and well adopted across a lot of different websites today and of course",
    "start": "1599009",
    "end": "1604919"
  },
  {
    "start": "1603000",
    "end": "1603000"
  },
  {
    "text": "security is really important it is worth discussing also in the surveillance",
    "start": "1604919",
    "end": "1611940"
  },
  {
    "text": "context because it is a little bit different from security for traditional applications so each of those services",
    "start": "1611940",
    "end": "1620279"
  },
  {
    "text": "we have talked about in this pattern has a lot of different security features and",
    "start": "1620279",
    "end": "1625460"
  },
  {
    "text": "to be honest I won't be able to go over all of them but I just want to call a",
    "start": "1625460",
    "end": "1630509"
  },
  {
    "text": "few out and there is for instance the origin access identity capability both",
    "start": "1630509",
    "end": "1636509"
  },
  {
    "text": "cloud front so it can ensure that only cloud front can access the resources that are stored in u.s. free bucket so",
    "start": "1636509",
    "end": "1643289"
  },
  {
    "text": "this is really important because sometimes you don't want people to",
    "start": "1643289",
    "end": "1649769"
  },
  {
    "text": "request data directly from as free so we want them to go through cloud front and",
    "start": "1649769",
    "end": "1659210"
  },
  {
    "text": "CloudFront an api gateway supports also",
    "start": "1659210",
    "end": "1664489"
  },
  {
    "text": "TLS certificates and of course I am is heavily used for API gateway so this",
    "start": "1664489",
    "end": "1676320"
  },
  {
    "text": "means API gateway has a privileges to actually call a lambda function and one",
    "start": "1676320",
    "end": "1682019"
  },
  {
    "text": "of the most important topics when we talk about security is basically authorization of your API gateway",
    "start": "1682019",
    "end": "1689460"
  },
  {
    "text": "methods so and there are many different ways to do this actually worth of API gateway and probably the most common one",
    "start": "1689460",
    "end": "1695849"
  },
  {
    "text": "is using IM authorization and also here",
    "start": "1695849",
    "end": "1701820"
  },
  {
    "text": "are a few ways to leverage kognito to provide those IM credentials so and in",
    "start": "1701820",
    "end": "1706919"
  },
  {
    "text": "addition to I am there's also the capability to use authorization or custom authorization with your API",
    "start": "1706919",
    "end": "1715169"
  },
  {
    "text": "gateway so in the documentation there is one really good page about this",
    "start": "1715169",
    "end": "1720869"
  },
  {
    "text": "particular implementation for for custom authorizations of custom authorizes",
    "start": "1720869",
    "end": "1728250"
  },
  {
    "start": "1728000",
    "end": "1728000"
  },
  {
    "text": "and if you month ago AWS had a really big announcements",
    "start": "1728250",
    "end": "1734640"
  },
  {
    "text": "around regional endpoints for API gateway and this is basically about decoupling your API gateway from",
    "start": "1734640",
    "end": "1741240"
  },
  {
    "text": "CloudFront and this is a big release because it enables multi-region service",
    "start": "1741240",
    "end": "1746309"
  },
  {
    "text": "applications and with this pattern you can actually create regional endpoints for api gateway and as you see here in",
    "start": "1746309",
    "end": "1756600"
  },
  {
    "text": "separate regions and each of them can be associated with the same custom domain",
    "start": "1756600",
    "end": "1761970"
  },
  {
    "text": "name and then you can use weighted routing for example we've seen em to direct traffic from a request to the",
    "start": "1761970",
    "end": "1769770"
  },
  {
    "text": "same for for the same name to different regions using for example weighted",
    "start": "1769770",
    "end": "1775110"
  },
  {
    "text": "routing and lastly for this particular pattern I want to mention a few",
    "start": "1775110",
    "end": "1781260"
  },
  {
    "text": "frameworks that are available to help travelers web applications so the first",
    "start": "1781260",
    "end": "1787049"
  },
  {
    "text": "one for the Python developers in the room that are familiar with decorator based api's is this chalice and Chellis",
    "start": "1787049",
    "end": "1795600"
  },
  {
    "text": "basically allows you to model api's and api path with Lemna functions and deploy",
    "start": "1795600",
    "end": "1801450"
  },
  {
    "text": "those applications from Python code into a service environment and if you have",
    "start": "1801450",
    "end": "1807270"
  },
  {
    "text": "for instance nodejs Express applications or Java applications we have additional",
    "start": "1807270",
    "end": "1812580"
  },
  {
    "text": "libraries and frameworks in github to convert those over to the alw service",
    "start": "1812580",
    "end": "1818610"
  },
  {
    "text": "platform",
    "start": "1818610",
    "end": "1821090"
  },
  {
    "text": "so now let's talk about pet anima to the server less data like pattern now one",
    "start": "1826309",
    "end": "1833789"
  },
  {
    "start": "1832000",
    "end": "1832000"
  },
  {
    "text": "thing that's for sure when you think about data and analytics and processing",
    "start": "1833789",
    "end": "1839429"
  },
  {
    "text": "all the data is that for sure your data needs and your requirements are changing",
    "start": "1839429",
    "end": "1847289"
  },
  {
    "text": "over the future so they usually don't stay consistent because you need maybe",
    "start": "1847289",
    "end": "1852749"
  },
  {
    "text": "more information from your data you get a different kind of data so everything",
    "start": "1852749",
    "end": "1859559"
  },
  {
    "text": "changes and that's why data Lake is a",
    "start": "1859559",
    "end": "1864749"
  },
  {
    "text": "really good fit and is really important because it sets basically the foundational components for you to be",
    "start": "1864749",
    "end": "1871619"
  },
  {
    "text": "more agile and one of the common tenants of a data Lake is that all of the data",
    "start": "1871619",
    "end": "1879509"
  },
  {
    "text": "from your organization goes into that italic so maybe you don't know exactly",
    "start": "1879509",
    "end": "1885179"
  },
  {
    "text": "what you're going to do the data but the data Lake should implement a so-called",
    "start": "1885179",
    "end": "1891539"
  },
  {
    "text": "schema and read strategy so that means you request the data you can specify the",
    "start": "1891539",
    "end": "1898379"
  },
  {
    "text": "schema to do so so in the future let's say when you have new requirements",
    "start": "1898379",
    "end": "1904190"
  },
  {
    "text": "you'll be able to do this with the schema on read approach and the data Lake should be basically the home of all",
    "start": "1904190",
    "end": "1911399"
  },
  {
    "text": "your data whether it's structured data semi-structured or unstructured data and",
    "start": "1911399",
    "end": "1917240"
  },
  {
    "text": "of course it should also support bi and analytical use cases as well as machine",
    "start": "1917240",
    "end": "1922619"
  },
  {
    "text": "learning and last but not least you should implement a d-cup of compute and storage and here's basically a look at",
    "start": "1922619",
    "end": "1932369"
  },
  {
    "start": "1929000",
    "end": "1929000"
  },
  {
    "text": "the surveillance data like architecture at the center the architecture is based",
    "start": "1932369",
    "end": "1937649"
  },
  {
    "text": "on s3 which has a lot of great features so obviously the data Lake also needs to",
    "start": "1937649",
    "end": "1945570"
  },
  {
    "text": "be able to accept data in a lot of different forms so the ingestion part is",
    "start": "1945570",
    "end": "1953909"
  },
  {
    "text": "really important so you get data from a lot of sources in great volumes and then you need capabilities to do",
    "start": "1953909",
    "end": "1961290"
  },
  {
    "text": "cataloging and searching so we'll cover a few patterns here including DynamoDB",
    "start": "1961290",
    "end": "1968280"
  },
  {
    "text": "and elasticsearch and this is basically all about discovering your data and then",
    "start": "1968280",
    "end": "1975920"
  },
  {
    "text": "analytics and processing of course is very important to data leak and there are many different service services here",
    "start": "1975920",
    "end": "1982500"
  },
  {
    "text": "that you can use to do analytics and processing like Athena and and lamda and",
    "start": "1982500",
    "end": "1987590"
  },
  {
    "text": "there are also servers services aren't server lists that have an important role here for instance EMR so elastic",
    "start": "1987590",
    "end": "1995160"
  },
  {
    "text": "MapReduce which is basically a managed to dupe implementation so you can fire",
    "start": "1995160",
    "end": "2001760"
  },
  {
    "text": "up um our cluster start your spark jobs to access the data transform it write",
    "start": "2001760",
    "end": "2008360"
  },
  {
    "text": "the data and in a different format write it into different target services and so",
    "start": "2008360",
    "end": "2015080"
  },
  {
    "text": "on and of course security is important",
    "start": "2015080",
    "end": "2022000"
  },
  {
    "text": "to data leak because you want to be able to manage access to data for different",
    "start": "2022000",
    "end": "2029240"
  },
  {
    "text": "users and also for for different groups so you want to be able to encrypt your data which is also very important and",
    "start": "2029240",
    "end": "2036190"
  },
  {
    "text": "there are multiple ways to achieve it and auditing access to your data is also",
    "start": "2036190",
    "end": "2042320"
  },
  {
    "text": "a very important aspect which you can which can be implemented using claw trail so this is also a general best",
    "start": "2042320",
    "end": "2048888"
  },
  {
    "text": "practice if you have an AWS account please activate Lao Trail because cloud where will will basically monitor and",
    "start": "2048889",
    "end": "2058690"
  },
  {
    "text": "yeah will basically monitor all the API calls and will give you a log file of",
    "start": "2058690",
    "end": "2065419"
  },
  {
    "text": "those API calls and then of course you need some kind of user interface for a",
    "start": "2065419",
    "end": "2070610"
  },
  {
    "text": "data Lake so you need a way for users to log into a portal and begin to discover",
    "start": "2070610",
    "end": "2076850"
  },
  {
    "text": "and search so let's talk a little bit about as three as a foundation of a data",
    "start": "2076850",
    "end": "2083330"
  },
  {
    "start": "2080000",
    "end": "2080000"
  },
  {
    "text": "rake so one of the great things is you have virtually unlimited amount of",
    "start": "2083330",
    "end": "2088580"
  },
  {
    "text": "storage Nestle and no aggregate throughput limits in s3 you have multiple storage classes that I",
    "start": "2088580",
    "end": "2095090"
  },
  {
    "text": "have able to store your data in a very cost-efficient way depending on the hotness of your data so some of the data",
    "start": "2095090",
    "end": "2103450"
  },
  {
    "text": "is maybe hot you you need it in standard s3 storage classes and others accessed",
    "start": "2103450",
    "end": "2112520"
  },
  {
    "text": "in a more infrequently manner so this means you can optimize for for costs here as well so and of course versioning",
    "start": "2112520",
    "end": "2120410"
  },
  {
    "text": "and encryption is also fully supported in s3 so now let's talk specifically",
    "start": "2120410",
    "end": "2127640"
  },
  {
    "start": "2124000",
    "end": "2124000"
  },
  {
    "text": "about cataloguing and searching and there's a couple of patterns here to showcase so the first pattern is more of",
    "start": "2127640",
    "end": "2135500"
  },
  {
    "text": "an event-based pattern so data arrives in s3 and",
    "start": "2135500",
    "end": "2140930"
  },
  {
    "text": "regardless of how it arrives I ran a lambda function to store the meter data in Amazon DynamoDB so the great thing is",
    "start": "2140930",
    "end": "2148040"
  },
  {
    "text": "here if I upload data in s3 or deleted from from s3 events events are created",
    "start": "2148040",
    "end": "2158510"
  },
  {
    "text": "and I can react on those events using an AWS lambda function then if I have a",
    "start": "2158510",
    "end": "2164240"
  },
  {
    "text": "file there is uploaded to to s3 I can start a lemon function start in ETL",
    "start": "2164240",
    "end": "2170870"
  },
  {
    "text": "process or start other workloads and",
    "start": "2170870",
    "end": "2176950"
  },
  {
    "text": "let's say in this lama function i could analyze this particular data set and",
    "start": "2178870",
    "end": "2186500"
  },
  {
    "text": "then I have an update stream of the data that is written in the animal DB and also a lambda function that reacts on",
    "start": "2186500",
    "end": "2193250"
  },
  {
    "text": "that and sends this information to elastic search for search ability to",
    "start": "2193250",
    "end": "2198500"
  },
  {
    "text": "build searchable index so and I've included a link here to a whole answers",
    "start": "2198500",
    "end": "2203720"
  },
  {
    "text": "article doing exactly this so I'm not sure if you already know Glu Glu plays a",
    "start": "2203720",
    "end": "2213620"
  },
  {
    "start": "2207000",
    "end": "2207000"
  },
  {
    "text": "very vital role in the space so glue can dispatch crawlers which can be on a",
    "start": "2213620",
    "end": "2219560"
  },
  {
    "text": "scheduled basis or on demand glucan automatically look into your files and infer a schema around those",
    "start": "2219560",
    "end": "2227480"
  },
  {
    "text": "files ability catalog from this information so that data catalog that glue builds automatically with us",
    "start": "2227480",
    "end": "2234620"
  },
  {
    "text": "callers is also hive meta store compliant so you can immediately define tables and create them using a bi tool",
    "start": "2234620",
    "end": "2242090"
  },
  {
    "text": "of your choice like let's say quick site and from analytics and prospecting",
    "start": "2242090",
    "end": "2248360"
  },
  {
    "start": "2245000",
    "end": "2245000"
  },
  {
    "text": "prospectus there are lots of tools here that can provide access to s3 and to",
    "start": "2248360",
    "end": "2254600"
  },
  {
    "text": "your analytical and processing workloads but I want to focus on Athena today and a table is similar for the different sub",
    "start": "2254600",
    "end": "2261260"
  },
  {
    "text": "patterns so first of all what is Athena Athena is a service query service that",
    "start": "2261260",
    "end": "2270820"
  },
  {
    "start": "2263000",
    "end": "2263000"
  },
  {
    "text": "provides a way to submit sequel queries to data that you have stored in s3 and",
    "start": "2270820",
    "end": "2277720"
  },
  {
    "text": "the great thing here is it is really really fast so in this example we've processed 170 gigabytes of data in under",
    "start": "2277720",
    "end": "2286010"
  },
  {
    "text": "45 seconds executing this particular query which is almost 4 gigabytes per",
    "start": "2286010",
    "end": "2291770"
  },
  {
    "text": "second and it uses presto as the engine for data manipulation so you can think",
    "start": "2291770",
    "end": "2297260"
  },
  {
    "text": "of Athena like some kind of managed presto service and of course there are",
    "start": "2297260",
    "end": "2304790"
  },
  {
    "start": "2302000",
    "end": "2302000"
  },
  {
    "text": "some efficiencies and best practices around Athena so I've got a link here here to include the top 10 efficiencies",
    "start": "2304790",
    "end": "2313940"
  },
  {
    "text": "and best practices and I just want to pick up a few of them so first of all you can leverage Athena to partition",
    "start": "2313940",
    "end": "2321740"
  },
  {
    "text": "your data and the important thing here is Athena's pricing model is based on",
    "start": "2321740",
    "end": "2328280"
  },
  {
    "text": "the amount of data that you scan so if you can reduce the amount of data that",
    "start": "2328280",
    "end": "2333830"
  },
  {
    "text": "you have to scan you can save money and you can do this very efficiently by using partitioning so and if your data",
    "start": "2333830",
    "end": "2339980"
  },
  {
    "text": "is stored and an s3 bucket in a path that you see here Athena will",
    "start": "2339980",
    "end": "2345800"
  },
  {
    "text": "automatically partition your data but you can also specify manual manual partitioning schemes as well",
    "start": "2345800",
    "end": "2353150"
  },
  {
    "text": "and I strongly recommend taking a closer look at columnar data formats like let's",
    "start": "2353150",
    "end": "2360109"
  },
  {
    "text": "say Parque Avro or or RC and optimization for file size also becomes",
    "start": "2360109",
    "end": "2367789"
  },
  {
    "text": "very important because if you have a lot of small files you will have a lot of overhead interacting with f3 and you",
    "start": "2367789",
    "end": "2375020"
  },
  {
    "text": "really want to avoid that but if it's just one file it may not give you the",
    "start": "2375020",
    "end": "2380210"
  },
  {
    "text": "parallelism of that that you might need so depending on your workloads you have",
    "start": "2380210",
    "end": "2385430"
  },
  {
    "text": "to test which file size is is is a good",
    "start": "2385430",
    "end": "2391970"
  },
  {
    "text": "match for your particular requirements and splittable compressions using for instance piece of 2 can help here as",
    "start": "2391970",
    "end": "2398059"
  },
  {
    "text": "well and so the last set pattern for",
    "start": "2398059",
    "end": "2404180"
  },
  {
    "start": "2400000",
    "end": "2400000"
  },
  {
    "text": "pattern 2 I wanted to show you is more do-it-yourself approach for batch",
    "start": "2404180",
    "end": "2411289"
  },
  {
    "text": "processing pattern so you have here lambda functions that takes the source",
    "start": "2411289",
    "end": "2418160"
  },
  {
    "text": "data and splits it up maybe by let's say lines or size and hands it off to a set",
    "start": "2418160",
    "end": "2424910"
  },
  {
    "text": "of mapper functions that process your data and write results to Amazon DynamoDB and then we have a reducer",
    "start": "2424910",
    "end": "2431750"
  },
  {
    "text": "function collecting the data and storing the end results in Amazon s3 on github",
    "start": "2431750",
    "end": "2437720"
  },
  {
    "text": "there is also a slightly different implementation of this particular approach just using s3 instead of dynamo",
    "start": "2437720",
    "end": "2445010"
  },
  {
    "text": "DB this is also working so pattern number 3 so imagine you're responsible",
    "start": "2445010",
    "end": "2453549"
  },
  {
    "text": "for building and operating a highly successful e-commerce website and you",
    "start": "2453549",
    "end": "2459470"
  },
  {
    "text": "had a really amazing Cyber Monday and you've collecting clickstream data for all of your actions on the website but",
    "start": "2459470",
    "end": "2468799"
  },
  {
    "text": "you've processing them on a daily base so this means you have 24 hours after",
    "start": "2468799",
    "end": "2473809"
  },
  {
    "text": "event you have that particular data and your management gives you the challenge",
    "start": "2473809",
    "end": "2480650"
  },
  {
    "text": "to bring that down from a day to a few minutes because the management one",
    "start": "2480650",
    "end": "2485670"
  },
  {
    "text": "to take actions in near-real-time depending on what is actually happening",
    "start": "2485670",
    "end": "2492809"
  },
  {
    "text": "on the website and this is a very classical example of having to deal with streaming data so yeah we have here now",
    "start": "2492809",
    "end": "2499530"
  },
  {
    "text": "streaming a stream processing application to build and if we take a",
    "start": "2499530",
    "end": "2505619"
  },
  {
    "start": "2504000",
    "end": "2504000"
  },
  {
    "text": "closer look at the characteristics of a stream processing application we typically have things like a high ingest",
    "start": "2505619",
    "end": "2512400"
  },
  {
    "text": "rate near real-time processing so he needs low latency from ingest to",
    "start": "2512400",
    "end": "2518819"
  },
  {
    "text": "processing and typically you have spiky traffic so let's say you don't have an",
    "start": "2518819",
    "end": "2524880"
  },
  {
    "text": "e-commerce website but maybe an IOT use case where I had a lot of different devices so I have a fleet of devices",
    "start": "2524880",
    "end": "2530390"
  },
  {
    "text": "collecting data points and maybe those",
    "start": "2530390",
    "end": "2535470"
  },
  {
    "text": "devices are batching this data locally because they don't have access to the",
    "start": "2535470",
    "end": "2540540"
  },
  {
    "text": "network and things like this also message durability is very important you",
    "start": "2540540",
    "end": "2546180"
  },
  {
    "text": "don't want to lose my messages in general and for some use cases message",
    "start": "2546180",
    "end": "2551760"
  },
  {
    "text": "ordering is also very important so let's",
    "start": "2551760",
    "end": "2556950"
  },
  {
    "start": "2556000",
    "end": "2556000"
  },
  {
    "text": "take a closer look of an example here how a typical data ingestion architecture could look like so the core",
    "start": "2556950",
    "end": "2564329"
  },
  {
    "text": "of this architecture is Amazon Kinesis firehose in the middle and you can think",
    "start": "2564329",
    "end": "2570299"
  },
  {
    "text": "of keaney's firehose as a service that lets you ingest large amounts of data then buffer it up in a micro batches and",
    "start": "2570299",
    "end": "2578299"
  },
  {
    "text": "deliver them to destination services so this is basically to decouple a high",
    "start": "2578299",
    "end": "2586500"
  },
  {
    "text": "rate of messages coming in from services that can better deal with a patches of data so you can sense the data and raw",
    "start": "2586500",
    "end": "2595470"
  },
  {
    "text": "records directly to the firehose api or you can also install a Kinesis agent",
    "start": "2595470",
    "end": "2601200"
  },
  {
    "text": "which will for instance take a closer look at the log files and as new messages come in to to post it to the",
    "start": "2601200",
    "end": "2607799"
  },
  {
    "text": "Kinesis firehose delivery stream so in this particular example here we have",
    "start": "2607799",
    "end": "2613559"
  },
  {
    "text": "like a freight of producers at this constantly producing data sending it to",
    "start": "2613559",
    "end": "2619410"
  },
  {
    "text": "nice data file was delivery stream and then we have like target services like",
    "start": "2619410",
    "end": "2626099"
  },
  {
    "text": "s3 redshift for data warehousing and elasticsearch service and if a record is",
    "start": "2626099",
    "end": "2638339"
  },
  {
    "text": "in a delivery stream you can do transformation on this records so you",
    "start": "2638339",
    "end": "2644760"
  },
  {
    "text": "can invoke a lambda function and have custom logic for instance if you want to do simple ETL things and once the",
    "start": "2644760",
    "end": "2652619"
  },
  {
    "text": "transformation is done those records are sent back to Kinesis files and files now",
    "start": "2652619",
    "end": "2658109"
  },
  {
    "text": "makes micro batches and delivers them to destination services and as you",
    "start": "2658109",
    "end": "2664559"
  },
  {
    "text": "implement this pattern some best practices firehose basically has two parameters you need to choose one is the",
    "start": "2664559",
    "end": "2672329"
  },
  {
    "text": "buffer size and the other one is the buffer interval so let's take a look at",
    "start": "2672329",
    "end": "2679650"
  },
  {
    "start": "2678000",
    "end": "2678000"
  },
  {
    "text": "an example of a real-time application so imagine you have a large fleet of IOT sensors sending temperature data we want",
    "start": "2679650",
    "end": "2687359"
  },
  {
    "text": "to smooth out the noisy data over let's say a 60 second period and compare that",
    "start": "2687359",
    "end": "2692670"
  },
  {
    "text": "to a threshold and this is a pipeline that achieves that and starting from the left we have the data that arrives from",
    "start": "2692670",
    "end": "2699779"
  },
  {
    "text": "the king a stream and then we have a Kinesis analytics application and this",
    "start": "2699779",
    "end": "2705630"
  },
  {
    "text": "application or and and Kinesis analytics basically a service that lets you",
    "start": "2705630",
    "end": "2711390"
  },
  {
    "text": "perform your real-time analytics of your data coming through a stream and you can represent your logic as a sequel",
    "start": "2711390",
    "end": "2717839"
  },
  {
    "text": "statement and those are basically and and this is basically the application so",
    "start": "2717839",
    "end": "2724529"
  },
  {
    "text": "the parts in white set up the sources as well as the destination definitions and",
    "start": "2724529",
    "end": "2729799"
  },
  {
    "text": "an orange we set up this one minute window in which you will want to average",
    "start": "2729799",
    "end": "2737010"
  },
  {
    "text": "our data and the blue parts represent",
    "start": "2737010",
    "end": "2742260"
  },
  {
    "text": "the aggregation so we calculate the sum of the measurements the sensor centers",
    "start": "2742260",
    "end": "2747660"
  },
  {
    "text": "we also count the number of measurements and this gives us a keeper to calculate an average so we are also",
    "start": "2747660",
    "end": "2754890"
  },
  {
    "text": "grouping that whole measurement set by the device ID and once we have those",
    "start": "2754890",
    "end": "2762390"
  },
  {
    "text": "aggregated measurements we can deliver those to a destination stream again and",
    "start": "2762390",
    "end": "2768119"
  },
  {
    "text": "perform thresholding logic so let's take",
    "start": "2768119",
    "end": "2774750"
  },
  {
    "text": "a closer look at the middle part here where can use this triggers member and discuss a few best practices here so one",
    "start": "2774750",
    "end": "2781349"
  },
  {
    "start": "2780000",
    "end": "2780000"
  },
  {
    "text": "of the important aspects you have to remember is kinesin scales in terms of",
    "start": "2781349",
    "end": "2787650"
  },
  {
    "text": "charts so what does this mean each chart in aki-nee's stream has a certain capacity it is one megabyte per",
    "start": "2787650",
    "end": "2795510"
  },
  {
    "text": "second in and two megabyte per second out so this is important to remember and",
    "start": "2795510",
    "end": "2801359"
  },
  {
    "text": "each chart that you have any key neither screen gives you one parallel and",
    "start": "2801359",
    "end": "2806430"
  },
  {
    "text": "concurrent invocation of lambda and the other thing is you have a parameter called batch size so this is this",
    "start": "2806430",
    "end": "2813690"
  },
  {
    "text": "basically configures how many messages Kinesis will send to one Lemna function",
    "start": "2813690",
    "end": "2819480"
  },
  {
    "text": "invocation and sometimes you may find that the amount of processing that you",
    "start": "2819480",
    "end": "2827550"
  },
  {
    "start": "2822000",
    "end": "2822000"
  },
  {
    "text": "want to do in your lambda functions so much that you basically can't keep up with the messages coming in and in that",
    "start": "2827550",
    "end": "2833369"
  },
  {
    "text": "case there is one pattern called a fan or pattern and in this pattern you take",
    "start": "2833369",
    "end": "2839730"
  },
  {
    "text": "you learn the function logic and split it into two parts so the first one is the dispatcher and you read from",
    "start": "2839730",
    "end": "2846690"
  },
  {
    "text": "aki-nee's stream as fast as possible and this dispatcher is then sending batches",
    "start": "2846690",
    "end": "2854700"
  },
  {
    "text": "of messages to processing functions so this means you can get a higher",
    "start": "2854700",
    "end": "2860580"
  },
  {
    "text": "throughput and lower latency but you lose strict message ordering so this means you have to think about your",
    "start": "2860580",
    "end": "2868080"
  },
  {
    "text": "particular workload and if the fan-out pattern really works for you and some",
    "start": "2868080",
    "end": "2873510"
  },
  {
    "text": "best practices remember you have to tune the batch size this is really important because this lets you invoke less than",
    "start": "2873510",
    "end": "2880710"
  },
  {
    "text": "the functions so you pay less because you're charged by the amount of lambda invocation",
    "start": "2880710",
    "end": "2885750"
  },
  {
    "text": "so two new memory settings also for your lambda functions so if you tune your",
    "start": "2885750",
    "end": "2890760"
  },
  {
    "text": "memory settings higher you get more CPU and that might help you to process the",
    "start": "2890760",
    "end": "2896070"
  },
  {
    "text": "invocations faster and if you have control over the client side of the processing pipeline you might also want",
    "start": "2896070",
    "end": "2903720"
  },
  {
    "text": "to take a closer look at kpl the key nieces producer library which is a",
    "start": "2903720",
    "end": "2908820"
  },
  {
    "text": "client-side library and patches multiple messages into one Kinesis record so this",
    "start": "2908820",
    "end": "2915090"
  },
  {
    "text": "lets you saturate your kinis a string capacity so in summary we took a closer",
    "start": "2915090",
    "end": "2922530"
  },
  {
    "text": "look of how our how to use DevOps tool to automate service deployments and we",
    "start": "2922530",
    "end": "2929940"
  },
  {
    "text": "discussed three different patterns so we have the web application data lakes and",
    "start": "2929940",
    "end": "2935310"
  },
  {
    "text": "stream processing and highly encourage you to take these patterns home with you and see what fits in terms of solving",
    "start": "2935310",
    "end": "2942840"
  },
  {
    "text": "your business problems and here are some white papers which will tell you more",
    "start": "2942840",
    "end": "2948840"
  },
  {
    "text": "about service patterns and some of the cons considerations so thank you very",
    "start": "2948840",
    "end": "2954360"
  },
  {
    "text": "much and enjoy the rest of the conference",
    "start": "2954360",
    "end": "2958010"
  }
]