[
  {
    "text": "hi so welcome to the second day of Lambda Jam also known as the last day of",
    "start": "539",
    "end": "6540"
  },
  {
    "text": "Lambda Jam and today we're going to start off with our third Keynote",
    "start": "6540",
    "end": "12599"
  },
  {
    "text": "done by my friend and colleague Robbie Findler who's at Northwestern University he's going to be talking about racket in",
    "start": "12599",
    "end": "20699"
  },
  {
    "text": "case you don't know there's this nest of crazy people who work on scheme and",
    "start": "20699",
    "end": "26220"
  },
  {
    "text": "Racket and stuff like that and they're all very interesting people let's welcome Robbie",
    "start": "26220",
    "end": "34099"
  },
  {
    "text": "thanks thank you okay so this is maybe a little bit of a",
    "start": "36780",
    "end": "43440"
  },
  {
    "text": "strange title so I wanted to try to give you a sense of what I mean by that",
    "start": "43440",
    "end": "49140"
  },
  {
    "text": "title by just doing a little programming so this is Dr racket",
    "start": "49140",
    "end": "55379"
  },
  {
    "text": "and Racket programs always begin with a declaration saying what programming language that they're in and so I'll",
    "start": "55379",
    "end": "62280"
  },
  {
    "text": "start with a different one so this is a programming language we built for writing texts so you say like",
    "start": "62280",
    "end": "69180"
  },
  {
    "text": "uh not g numbers say we want to write a little essay about Fibonacci numbers",
    "start": "69180",
    "end": "76140"
  },
  {
    "text": "they're beautiful they have math blah blah blah",
    "start": "76140",
    "end": "83600"
  },
  {
    "text": "spirals nature awesome okay the first few are",
    "start": "83960",
    "end": "90360"
  },
  {
    "text": "one zero one let's see one one two three five eight",
    "start": "90360",
    "end": "97680"
  },
  {
    "text": "thirteen uh 23 I don't know",
    "start": "97680",
    "end": "104520"
  },
  {
    "text": "Etc okay something like that all right so this is a programming language okay I want to emphasize that this is a",
    "start": "104520",
    "end": "110520"
  },
  {
    "text": "programming language despite my um ability to spell the word beautiful",
    "start": "110520",
    "end": "116180"
  },
  {
    "text": "it's um and this here the syntax is inspired by latex and so we use a at",
    "start": "117420",
    "end": "123840"
  },
  {
    "text": "sign instead of a backslash but like this title here this is a function okay oh and we can run it so if we run",
    "start": "123840",
    "end": "129599"
  },
  {
    "text": "it uh",
    "start": "129599",
    "end": "132560"
  },
  {
    "text": "um if we run it we'll see this output rendered uh beautiful Fibonacci number output we",
    "start": "135060",
    "end": "140640"
  },
  {
    "text": "can render it as a PDF file and it uses latex in the back end to do that",
    "start": "140640",
    "end": "146000"
  },
  {
    "text": "and this this here's this is a function this imported comes directly from the from the programming language",
    "start": "146000",
    "end": "152580"
  },
  {
    "text": "and like you know there's other ones we can like we like math here and I don't know we like we like nature",
    "start": "152580",
    "end": "160560"
  },
  {
    "text": "and if we if we do that then um uh you know then these functions are",
    "start": "160560",
    "end": "167099"
  },
  {
    "text": "called and our text turns the way we expect it to take right um okay so uh since this is a",
    "start": "167099",
    "end": "174180"
  },
  {
    "text": "programming language and as a few of you noticed like as I was typing I think that I sort of can't do math here",
    "start": "174180",
    "end": "180440"
  },
  {
    "text": "uh you know we shouldn't it's importantly language so why don't we use",
    "start": "180440",
    "end": "185760"
  },
  {
    "text": "it to program right the Fibonacci numbers are like the world's worst example of recursive function so let's let's totally write that",
    "start": "185760",
    "end": "192480"
  },
  {
    "text": "okay um and let's use a different programming language so this is a programming language for text",
    "start": "192480",
    "end": "198120"
  },
  {
    "text": "so let's use a programming language for like little functions so here's how you write the Fibonacci",
    "start": "198120",
    "end": "205580"
  },
  {
    "text": "see if n is zero then it's zero if n is one then it's one",
    "start": "205580",
    "end": "211980"
  },
  {
    "text": "and otherwise we take the sum of the previous two Fibonacci numbers",
    "start": "211980",
    "end": "218459"
  },
  {
    "text": "sorry two so this is let's see",
    "start": "218459",
    "end": "223500"
  },
  {
    "text": "so we can do things like this and I don't have to do the arithmetic here and now we want to use this function",
    "start": "223500",
    "end": "229260"
  },
  {
    "text": "back in the other file um and then that's that's text and so what we do to be able to get text out of",
    "start": "229260",
    "end": "235799"
  },
  {
    "text": "this is we have to make a string so we can you know build that over on this side",
    "start": "235799",
    "end": "243060"
  },
  {
    "text": "so if we make a function that takes in a number and we want to turn all the Fibonacci numbers up to that number we can say build list",
    "start": "243060",
    "end": "249060"
  },
  {
    "text": "I think it's n FIB let's see so I say fibs of 10 yeah so that's the",
    "start": "249060",
    "end": "254879"
  },
  {
    "text": "first 10 Fibonacci numbers and then um turn them into Strings",
    "start": "254879",
    "end": "262320"
  },
  {
    "text": "and let's see add some commas",
    "start": "262320",
    "end": "267500"
  },
  {
    "text": "between them let's see how we're doing here yeah okay and then uh",
    "start": "269340",
    "end": "276020"
  },
  {
    "text": "make it into one string okay so we can put all this stuff together and then we",
    "start": "276840",
    "end": "281880"
  },
  {
    "text": "can export it and this is here let me save this",
    "start": "281880",
    "end": "287820"
  },
  {
    "text": "this is the same way that functions like title and bold and italic work except",
    "start": "287820",
    "end": "293220"
  },
  {
    "text": "for you know this compute something different and we can provide it and then over here we can require it",
    "start": "293220",
    "end": "300259"
  },
  {
    "text": "um and then we can say fibs of 10 here",
    "start": "300300",
    "end": "306419"
  },
  {
    "text": "and the curly braces here for the argument of title mean that the argument is text so curly braces are the way that",
    "start": "306419",
    "end": "312720"
  },
  {
    "text": "you know that you delimit text in the scribble programming language and um here I've I've got square brackets",
    "start": "312720",
    "end": "319979"
  },
  {
    "text": "and that means that the arguments inside are like the number 10 in this case whatever they are and so if I if I run",
    "start": "319979",
    "end": "326160"
  },
  {
    "text": "this one then okay now the I don't can see that not that the math is a little better",
    "start": "326160",
    "end": "332520"
  },
  {
    "text": "right we can we can do a few more if we wanted to be that would be cool",
    "start": "332520",
    "end": "337560"
  },
  {
    "text": "maybe just a couple more okay so um if you're a peel wonk you're looking",
    "start": "337560",
    "end": "342960"
  },
  {
    "text": "at this code and you're sort of dissatisfied by it a little bit um because this is an eminently typable",
    "start": "342960",
    "end": "349020"
  },
  {
    "text": "function right so um uh you know it's kind of like",
    "start": "349020",
    "end": "354600"
  },
  {
    "text": "maybe you want a little more checking you want to improve the quality of your software so you're like okay this is a library lots of people are going to want",
    "start": "354600",
    "end": "360660"
  },
  {
    "text": "to use so I want to use I want to use types for it so you can say okay",
    "start": "360660",
    "end": "366539"
  },
  {
    "text": "I want this to be in typed racket not in just a regular Racket and the type Checker the type Checker gets angry",
    "start": "366539",
    "end": "372479"
  },
  {
    "text": "because um we didn't put declarations and the default things it assumes are not",
    "start": "372479",
    "end": "377639"
  },
  {
    "text": "correct here so if we say this is a integer to integer function and then okay then good things are",
    "start": "377639",
    "end": "385139"
  },
  {
    "text": "happening like we we get types here on some of these things and I give a type Declaration on this one",
    "start": "385139",
    "end": "393419"
  },
  {
    "text": "this one's integer to string and that little that little that little",
    "start": "393419",
    "end": "398940"
  },
  {
    "text": "Green Dot that you probably can't see on the bottom right corner means that the type Checker was happy with this and so now when I run the program it's it says",
    "start": "398940",
    "end": "405000"
  },
  {
    "text": "it's in typed racket not regular Racket and when I run something like this uh it tells me the type of it before it",
    "start": "405000",
    "end": "412080"
  },
  {
    "text": "starts the evaluation so there's been a runtime error I still have seen that that purple line there saying that that was a string",
    "start": "412080",
    "end": "418500"
  },
  {
    "text": "okay so I can um you know I can go back over here and this still works",
    "start": "418500",
    "end": "424860"
  },
  {
    "text": "okay here no why don't I do something like let's just see the first two of them so you believe that it really runs",
    "start": "424860",
    "end": "430380"
  },
  {
    "text": "now okay um and uh but one thing that's that's",
    "start": "430380",
    "end": "436440"
  },
  {
    "text": "kind of interesting about this is that scribble like latex is an untyped programming language and so we're calling from an untyped",
    "start": "436440",
    "end": "443400"
  },
  {
    "text": "programming language into a typed programming language which is dangerous right",
    "start": "443400",
    "end": "449639"
  },
  {
    "text": "let's see so like I don't know that's the way you spell true in racket so if I",
    "start": "449639",
    "end": "454979"
  },
  {
    "text": "run that oh so the the type system knows let's go back to",
    "start": "454979",
    "end": "462539"
  },
  {
    "text": "the other file type system knows that this is a function from integers to integers what it doesn't know is where this function",
    "start": "462539",
    "end": "469080"
  },
  {
    "text": "is going to be used and so it knows that this integer is good and that it's the type Checker has",
    "start": "469080",
    "end": "476099"
  },
  {
    "text": "proven that this function always returns an injure it has not however proven that this function is always called with an integer because like right there it",
    "start": "476099",
    "end": "484500"
  },
  {
    "text": "didn't it didn't get called as an insurance so what it does is it puts a contract on to make sure that the",
    "start": "484500",
    "end": "490080"
  },
  {
    "text": "um you know that the input really isn't injured and this is the error message you get when it's not",
    "start": "490080",
    "end": "496979"
  },
  {
    "text": "um so that's that's one piece of Racket there's a lot of stuff like that goes into having being a programming language",
    "start": "496979",
    "end": "502319"
  },
  {
    "text": "programming language um so let's put this back anybody know what happened if I if I put another zero",
    "start": "502319",
    "end": "507720"
  },
  {
    "text": "here",
    "start": "507720",
    "end": "509900"
  },
  {
    "text": "I'm hearing mumbling which is almost certainly the right answer let's just stop that because that's uh",
    "start": "515820",
    "end": "521580"
  },
  {
    "text": "like if you look at this uh the stack Trace here is it's basically it's so skip I don't know if you",
    "start": "521580",
    "end": "527640"
  },
  {
    "text": "probably can read this but here at the top it says it says skip 25 duplicate frames because this is uh like gonna",
    "start": "527640",
    "end": "533459"
  },
  {
    "text": "take a long time to compute uh Fibonacci of 120 with this algorithm right and so",
    "start": "533459",
    "end": "540839"
  },
  {
    "text": "we all know how to fix this right you um the standard way that you can compute the nth",
    "start": "540839",
    "end": "547260"
  },
  {
    "text": "Fibonacci numbers with only n uses of addition instead of like some exponential numbers of additions which is what this algorithm does is you",
    "start": "547260",
    "end": "553140"
  },
  {
    "text": "accumulated with the previous value right okay but that's not going to satisfy the",
    "start": "553140",
    "end": "558360"
  },
  {
    "text": "programming language programming language or guy right what's a is there",
    "start": "558360",
    "end": "564000"
  },
  {
    "text": "a better way that we could do this if we had another programming language Maybe",
    "start": "564000",
    "end": "570300"
  },
  {
    "text": "so this is uh so we can say",
    "start": "570300",
    "end": "575339"
  },
  {
    "text": "the Fibonacci numbers are a sequence of numbers that begin with zero and then",
    "start": "575339",
    "end": "580560"
  },
  {
    "text": "have one and connell's back there knows what's coming",
    "start": "580560",
    "end": "585980"
  },
  {
    "text": "then are followed like and so any of you programmed the streams before so okay I'll give you the two second version of",
    "start": "586920",
    "end": "592860"
  },
  {
    "text": "what this code is doing if you haven't but this is this is the infinite stream of Fibonacci numbers and what it says is the first Fibonacci number is zero the",
    "start": "592860",
    "end": "599399"
  },
  {
    "text": "second Fibonacci number is one and then um map plus so if you know Haskell this",
    "start": "599399",
    "end": "605640"
  },
  {
    "text": "is like Zip width or this is like map but where plus is getting two arguments so you give it two in this case infinite",
    "start": "605640",
    "end": "611880"
  },
  {
    "text": "streams but two lists also so what it's doing is it's like cuter fibs is like take the Fibonacci numbers drop the",
    "start": "611880",
    "end": "617580"
  },
  {
    "text": "first one so you can think of that as a stream of all the Fibonacci numbers without the first one and then fibs is a stream of all the Fibonacci numbers and",
    "start": "617580",
    "end": "623459"
  },
  {
    "text": "so what it's doing is it's just doing pairwise Edition all the way along them and making a new stream out of that and",
    "start": "623459",
    "end": "628860"
  },
  {
    "text": "that is all the fibs so we can say fibs",
    "start": "628860",
    "end": "634860"
  },
  {
    "text": "and we get the first 10 and we can say take 100 fibs and laziness does good",
    "start": "634860",
    "end": "640200"
  },
  {
    "text": "things here that like make this work if I take the first 1009 fibs it takes",
    "start": "640200",
    "end": "645480"
  },
  {
    "text": "longer to print them than to compute them um okay and so let's package that up",
    "start": "645480",
    "end": "653220"
  },
  {
    "text": "for use back in strict land so how about get fibs of n",
    "start": "653220",
    "end": "658260"
  },
  {
    "text": "and then we want to put in there and uh we don't have as good an interoperability story between the lazy",
    "start": "658260",
    "end": "663899"
  },
  {
    "text": "programming language and the strict programming language and the way we do between typed and untyped programming languages and so there's a little bit of",
    "start": "663899",
    "end": "669899"
  },
  {
    "text": "like interrupt glue code there which is that bang bang function basically and",
    "start": "669899",
    "end": "675480"
  },
  {
    "text": "what the bang bang function means is like get the value now um and then so and we'll put that right",
    "start": "675480",
    "end": "681600"
  },
  {
    "text": "before we would cross things back over to the uh to the strict language",
    "start": "681600",
    "end": "688579"
  },
  {
    "text": "okay and then so now we can get rid of this abomination and say",
    "start": "688980",
    "end": "695399"
  },
  {
    "text": "uh well here let's see so what we want to do is we don't want to do this now we want to say get fibs",
    "start": "695399",
    "end": "700980"
  },
  {
    "text": "of n and of course get fibs is a free variable now because I haven't pulled in that Library",
    "start": "700980",
    "end": "707100"
  },
  {
    "text": "um and this this lazy language is an untyped lazy language so we have the same problem we had before",
    "start": "707100",
    "end": "714120"
  },
  {
    "text": "um with connecting between the typed and an untyped programming language but here there's no like type declaration to",
    "start": "714120",
    "end": "719760"
  },
  {
    "text": "guide the interop so we have to like write it uh over here so you say require typed",
    "start": "719760",
    "end": "727380"
  },
  {
    "text": "of uh lazy and I want the get fibs function and it",
    "start": "727380",
    "end": "735480"
  },
  {
    "text": "should have this type list of sure",
    "start": "735480",
    "end": "741920"
  },
  {
    "text": "what though and I should provide it over here",
    "start": "743839",
    "end": "750440"
  },
  {
    "text": "and now what this is saying is assume",
    "start": "752760",
    "end": "758459"
  },
  {
    "text": "dear type Checker please assume that this is the correct type and prove that you obey it and then turn",
    "start": "758459",
    "end": "766079"
  },
  {
    "text": "green when you've done that and in certain similar kind of dynamic checking via the contract system to make sure",
    "start": "766079",
    "end": "771660"
  },
  {
    "text": "that the untyped side is obeying what you've declared here so in this case we know that get FIB is",
    "start": "771660",
    "end": "777779"
  },
  {
    "text": "going to be called with an integer and we have to check that it returns a list of integers um but here let's just put this back in",
    "start": "777779",
    "end": "784920"
  },
  {
    "text": "the essay now so now now I can hit this button and I should get",
    "start": "784920",
    "end": "790200"
  },
  {
    "text": "things and hey and there's our there's our beautiful matte spirals okay okay so that's that's a taste of",
    "start": "790200",
    "end": "799320"
  },
  {
    "text": "programming in the programming language programming language and what I want to do for the rest of",
    "start": "799320",
    "end": "804600"
  },
  {
    "text": "this talk is try to give you a little bit of a glimpse into the technology that that makes it work",
    "start": "804600",
    "end": "812339"
  },
  {
    "text": "so here is a picture of an architectural diagram of a compiler of an",
    "start": "812339",
    "end": "819660"
  },
  {
    "text": "implementation of a language all right and really I just want to focus in on the compiler and so let's look inside that box a",
    "start": "819660",
    "end": "825959"
  },
  {
    "text": "little bit if you open up a compiler you expect to find it like a giant a function with a giant case statement in",
    "start": "825959",
    "end": "831779"
  },
  {
    "text": "it like this one um so the compiler takes in an expression and then does some kind of",
    "start": "831779",
    "end": "837660"
  },
  {
    "text": "pattern matching on the expression and if it's a conditional it does this thing and if it's an addition it does that thing and blah blah blah blah",
    "start": "837660",
    "end": "844440"
  },
  {
    "text": "and if you were to look at the implementation of scribble or of the typed language or the regular rocket",
    "start": "844440",
    "end": "851459"
  },
  {
    "text": "language of the lazy language or like any of the other programming languages we have you you these boxes would all",
    "start": "851459",
    "end": "857459"
  },
  {
    "text": "look very similar to each other I mean there's important differences between a lazy programming language and a strict",
    "start": "857459",
    "end": "862920"
  },
  {
    "text": "programming language but in terms of the like Delta number of characters and the implementation of the compiler is small",
    "start": "862920",
    "end": "868920"
  },
  {
    "text": "and the same thing for the type Checker right in fact many type Checkers many types of programming languages for a",
    "start": "868920",
    "end": "874200"
  },
  {
    "text": "long time their implementation strategy was basically do the type checking and then compile it using the untyped compiler for the for a sort of a similar",
    "start": "874200",
    "end": "880740"
  },
  {
    "text": "programming language all right and type dragons is a little bit smarter than that but there's really",
    "start": "880740",
    "end": "885899"
  },
  {
    "text": "not a lot of difference if you're looking at this level of granularity and so kind of the magic that we want to to",
    "start": "885899",
    "end": "892380"
  },
  {
    "text": "make work to be able to reuse a lot of code to be able to implement all these languages the way we have is to we want",
    "start": "892380",
    "end": "898620"
  },
  {
    "text": "to think about our compiler and the ReUse in our compiler at this level sort of boxes of this and we want to mix and",
    "start": "898620",
    "end": "905160"
  },
  {
    "text": "match boxes that sort of correspond to cases in our compiler and the way we do that",
    "start": "905160",
    "end": "911880"
  },
  {
    "text": "is is macros um so let me explain let me try to explain",
    "start": "911880",
    "end": "918420"
  },
  {
    "text": "that so first I'll just Define what a macro is a macro extends a language",
    "start": "918420",
    "end": "924540"
  },
  {
    "text": "by adding one feature to that programming language and specifying how that one new feature compiles into some",
    "start": "924540",
    "end": "929940"
  },
  {
    "text": "existing features and so if you're thinking about mixing and matching boxes in your compiler's",
    "start": "929940",
    "end": "935220"
  },
  {
    "text": "implementation you need a little bit more to be able to like pick a subset of boxes and put them together into a",
    "start": "935220",
    "end": "940980"
  },
  {
    "text": "programming language and that's something that the module system handles for you and that I won't really be talking much more about in this talk so",
    "start": "940980",
    "end": "947100"
  },
  {
    "text": "we'll just focus on this one piece of how you can take a programming language and add one feature to the programming",
    "start": "947100",
    "end": "952260"
  },
  {
    "text": "language via macro okay and I have to do a little bit of History here and take you back to",
    "start": "952260",
    "end": "959880"
  },
  {
    "text": "roughly 1963 um as as immortalized in gcc-traditional",
    "start": "959880",
    "end": "967139"
  },
  {
    "text": "CPP and if you were to run this program in gcc-traditional CPP anybody know what",
    "start": "967139",
    "end": "973560"
  },
  {
    "text": "it prints salad bar which is terrible okay okay",
    "start": "973560",
    "end": "981420"
  },
  {
    "text": "so if you look at this program and you're like a normal person you see an open quote on the first line and you see",
    "start": "981420",
    "end": "987959"
  },
  {
    "text": "a close quote on some further line down there and you think that's a string and if you are in the 1963 technology of",
    "start": "987959",
    "end": "995660"
  },
  {
    "text": "macros that's not what you see what you do is a textual replacement of Foo with",
    "start": "995660",
    "end": "1001279"
  },
  {
    "text": "open quote salad and that's all you do um okay so now",
    "start": "1001279",
    "end": "1007940"
  },
  {
    "text": "um there's a lot of baggage associated with macro so that's why I'm taking you through this sort of quick tour of history of so we all caught up with",
    "start": "1007940",
    "end": "1014180"
  },
  {
    "text": "what's a good macro system and um I want to point out why this is a bad macro system okay this",
    "start": "1014180",
    "end": "1023360"
  },
  {
    "text": "is a bad macro system because it doesn't respect the parsing level structure of the programming language right the",
    "start": "1023360",
    "end": "1029600"
  },
  {
    "text": "lexime structure there's a thing such as a string in the programming language and we should respect that in the macro",
    "start": "1029600",
    "end": "1035418"
  },
  {
    "text": "system by not sort of munching in the middle of strings okay that's a bad macro system because",
    "start": "1035419",
    "end": "1041780"
  },
  {
    "text": "it doesn't respect the parsing level structure of the programming language okay now we're caught up with the current GCC",
    "start": "1041780",
    "end": "1048679"
  },
  {
    "text": "um and this is also very old in terms of the macro",
    "start": "1048679",
    "end": "1054200"
  },
  {
    "text": "technology and what we understand about macros but anybody know what this produces",
    "start": "1054200",
    "end": "1060500"
  },
  {
    "text": "10 is close and 25 is wrong okay 25 is what you would hope would produce and it",
    "start": "1060500",
    "end": "1066200"
  },
  {
    "text": "actually produces 11 right okay why does it produce 11. all right okay is that",
    "start": "1066200",
    "end": "1073039"
  },
  {
    "text": "um this does not expand into that which is what a sane person might expect it to",
    "start": "1073039",
    "end": "1078140"
  },
  {
    "text": "expand into instead what happens when you do the substitution with this Macro for three plus two is you get that",
    "start": "1078140",
    "end": "1084559"
  },
  {
    "text": "and if you please excuse my dear Aunt Sally it's the same as that which is 11.",
    "start": "1084559",
    "end": "1091160"
  },
  {
    "text": "this is also a bad macro system okay this is a bad",
    "start": "1091160",
    "end": "1096679"
  },
  {
    "text": "macro system because it doesn't respect the expression level structure of the programming language that it plays a",
    "start": "1096679",
    "end": "1102440"
  },
  {
    "text": "host to so when you're a macro writer and you write a macro like that one you're",
    "start": "1102440",
    "end": "1108679"
  },
  {
    "text": "expecting that each of those occurrences of X is going to have the like a tree plugged in not a sequence of tokens",
    "start": "1108679",
    "end": "1115039"
  },
  {
    "text": "plugged into it right so you expect that you think of the expression three plus two as a tree with three as the node and",
    "start": "1115039",
    "end": "1123020"
  },
  {
    "text": "with with plus as a node and three and two as the children of it and then in the macro substitution template thing",
    "start": "1123020",
    "end": "1129500"
  },
  {
    "text": "that happens at compile time you expect that entire tree to be plugged in for x right not just the sequence of of",
    "start": "1129500",
    "end": "1136179"
  },
  {
    "text": "lexines basically being plugged in for x okay so this is a bad macro system",
    "start": "1136179",
    "end": "1141860"
  },
  {
    "text": "because it doesn't respect the expression structure of the programming language all right",
    "start": "1141860",
    "end": "1147380"
  },
  {
    "text": "all right so let me let me take a minute here and just tell you in a little more detail where we're going with this talk",
    "start": "1147380",
    "end": "1152960"
  },
  {
    "text": "um I'm going to I'm going to next go through in more detail the definition of a macro and we'll use racket notation",
    "start": "1152960",
    "end": "1158600"
  },
  {
    "text": "for that that will I'll call it a challenge while I'll say I'll say let's implement this thing and we'll see what",
    "start": "1158600",
    "end": "1165080"
  },
  {
    "text": "it takes to implement that and then and then we'll go from we'll get from that into another reason a macro system",
    "start": "1165080",
    "end": "1170900"
  },
  {
    "text": "can be bad namely that it doesn't respect the scope of the programming language it doesn't respect the variable",
    "start": "1170900",
    "end": "1176000"
  },
  {
    "text": "level structure of the programming language and then I'll talk a little bit about how when you do respect that you",
    "start": "1176000",
    "end": "1181340"
  },
  {
    "text": "can get good stuff out and how we get to really start to get close to this idea that we're taking the compiler and",
    "start": "1181340",
    "end": "1188059"
  },
  {
    "text": "um sort of getting reused to the level of Clauses in the compiler once you have a macro system that's that's able to",
    "start": "1188059",
    "end": "1193520"
  },
  {
    "text": "respect scope properly and then I'll show you a programming language they implemented for this talk just to give",
    "start": "1193520",
    "end": "1198860"
  },
  {
    "text": "you a sense of what it takes you know in kind of the um the pieces that you have to put together in order to actually make a",
    "start": "1198860",
    "end": "1204860"
  },
  {
    "text": "programming language if you were to choose to do that with racket all right okay so here's the challenge",
    "start": "1204860",
    "end": "1210679"
  },
  {
    "text": "implement or okay you have a programming language that doesn't have or in it and we want",
    "start": "1210679",
    "end": "1216799"
  },
  {
    "text": "to add that to the programming language and this should be an or like sees or or like the list bore where",
    "start": "1216799",
    "end": "1223520"
  },
  {
    "text": "um you evaluate the first expression if it returns something that's not false that's the value of the entire or",
    "start": "1223520",
    "end": "1229039"
  },
  {
    "text": "expression if it returns false and only if it returns false then you evaluate the other expression and then that",
    "start": "1229039",
    "end": "1235039"
  },
  {
    "text": "should be the value so it's both short-circuiting and also there's not just two booleans right",
    "start": "1235039",
    "end": "1241400"
  },
  {
    "text": "everything that's not false it counts as true and so you should return it okay",
    "start": "1241400",
    "end": "1247640"
  },
  {
    "text": "um and this is the example function that we'll use to test out a bunch of bad",
    "start": "1247640",
    "end": "1252740"
  },
  {
    "text": "versions of the ore macro okay so this is a function that given a",
    "start": "1252740",
    "end": "1257780"
  },
  {
    "text": "list returns true if the list is either empty or contains exactly one element in it all right so here is non-solution one",
    "start": "1257780",
    "end": "1264440"
  },
  {
    "text": "it's not even a macro if we Define or as a function and we",
    "start": "1264440",
    "end": "1270380"
  },
  {
    "text": "call the zero one list predicate with the empty list then we'll get could or given the empty list because",
    "start": "1270380",
    "end": "1277340"
  },
  {
    "text": "in a call by value programming language you evaluate the arguments to a function before you do the substitution into the",
    "start": "1277340",
    "end": "1282440"
  },
  {
    "text": "body that's what that's what functions mean and so what happens here is we evaluate null question mark of X that's",
    "start": "1282440",
    "end": "1289100"
  },
  {
    "text": "true but then we keep evaluating because or is a function and so it crashes okay so so this is not so when",
    "start": "1289100",
    "end": "1296000"
  },
  {
    "text": "you have a function you can't get the short circuiting Behavior so we can't use a function to implement or right when you're working with macros if you",
    "start": "1296000",
    "end": "1301520"
  },
  {
    "text": "can use a function to do it okay so here we can't so we need to use a macro this",
    "start": "1301520",
    "end": "1306679"
  },
  {
    "text": "is all right so that's a macro up there let me zoom in a little bit on that and just read to you the syntax so you can",
    "start": "1306679",
    "end": "1313820"
  },
  {
    "text": "understand uh you know what's what's really going on with just sort of get over some of the",
    "start": "1313820",
    "end": "1319220"
  },
  {
    "text": "notational hurdles here with this so the first thing is the keyword Define syntax what that means is I'm",
    "start": "1319220",
    "end": "1325100"
  },
  {
    "text": "defining something at compile time it does not mean I'm defining a macro right it's more General than just",
    "start": "1325100",
    "end": "1331460"
  },
  {
    "text": "defining a macro this happens to be the definition of a macro but Define syntax as a construct in the programming",
    "start": "1331460",
    "end": "1337039"
  },
  {
    "text": "language means Define something at compile time okay so the thing we're defining is or",
    "start": "1337039",
    "end": "1343820"
  },
  {
    "text": "and it's being defined to be a function so I didn't put the put the little nub in of this thing around the parens but",
    "start": "1343820",
    "end": "1350059"
  },
  {
    "text": "it's both the parens and the word STX there that means that this is being this is the definition of a function and so",
    "start": "1350059",
    "end": "1355580"
  },
  {
    "text": "that's what a macro is a macro is a function that's defined using defined syntax okay and we're going to return to",
    "start": "1355580",
    "end": "1361580"
  },
  {
    "text": "this point later because you can Define other things that aren't functions that give you some power in the macro system",
    "start": "1361580",
    "end": "1367220"
  },
  {
    "text": "okay so so we're defining or is a function of one argument and therefore it's a macro",
    "start": "1367220",
    "end": "1374539"
  },
  {
    "text": "that one um that one argument is this is unlike closures macro system and then that one",
    "start": "1374539",
    "end": "1379880"
  },
  {
    "text": "argument is not kind of the argument to or that one argument is the entire expression",
    "start": "1379880",
    "end": "1385100"
  },
  {
    "text": "that was at that was used by or okay so um then now we're in the body of the function and what happens in the body of",
    "start": "1385100",
    "end": "1391640"
  },
  {
    "text": "the function is we use this pattern matching Library called syntax parse so I'm going to pattern match on the",
    "start": "1391640",
    "end": "1398600"
  },
  {
    "text": "tree that was the expression and I'm going to be doing that pattern matching because I'm in the body of this function",
    "start": "1398600",
    "end": "1404120"
  },
  {
    "text": "at compile time okay this is the line that begins with the square bracket there they're just",
    "start": "1404120",
    "end": "1410720"
  },
  {
    "text": "following the rest of it not including the square bracket is the pattern that I expect to appear at that point so this",
    "start": "1410720",
    "end": "1416720"
  },
  {
    "text": "should be an or expression so it should begin with the keyword or and then it's got two sub-expressions",
    "start": "1416720",
    "end": "1421880"
  },
  {
    "text": "um x and x expression of Y expression and then this thing is the result of the macro so I'm going to transform my or",
    "start": "1421880",
    "end": "1427280"
  },
  {
    "text": "expression into an if expression and you see that hash tick at the beginning of",
    "start": "1427280",
    "end": "1432320"
  },
  {
    "text": "the line hash quote that means I'm constructing a new expression if I left off the hash tick that would mean I'm",
    "start": "1432320",
    "end": "1438140"
  },
  {
    "text": "doing a conditional at compile time right but because I have the hash tick on the front that means that's the result of this macro Transformer I'm",
    "start": "1438140",
    "end": "1444500"
  },
  {
    "text": "replacing the ore expression with the if expression because that's what the macro returns and this is all happening at",
    "start": "1444500",
    "end": "1449900"
  },
  {
    "text": "compile time okay so that's our um that's our macro and this is not a",
    "start": "1449900",
    "end": "1456200"
  },
  {
    "text": "good solution to the problem because a duplicates code so if we look at what happens when we",
    "start": "1456200",
    "end": "1461720"
  },
  {
    "text": "actually apply the macro transformation to the zero and list function then we get this",
    "start": "1461720",
    "end": "1467480"
  },
  {
    "text": "so the the X expression gets duplicated into the test position and the then position of our if expression and so we",
    "start": "1467480",
    "end": "1473960"
  },
  {
    "text": "have two null question mark X's when we had one originally so that's bad because what if",
    "start": "1473960",
    "end": "1479659"
  },
  {
    "text": "we had nested oars here I have one no question mark x expression and then I do one step of",
    "start": "1479659",
    "end": "1486500"
  },
  {
    "text": "macro transformation now I have two of them and two more Ores and I now I have four of them and you see if I Nest it",
    "start": "1486500",
    "end": "1493580"
  },
  {
    "text": "one more time you can imagine what's going to happen and so this you know the the size of the",
    "start": "1493580",
    "end": "1499220"
  },
  {
    "text": "expansion when you duplicate code can the general go grow exponentially in the size of the program and your compiler is",
    "start": "1499220",
    "end": "1504679"
  },
  {
    "text": "going to choke on that so that's bad this is bad it's actually worse than that though because of State",
    "start": "1504679",
    "end": "1513860"
  },
  {
    "text": "test and set is like this low level primitive you can use to implement synchronization like locks and",
    "start": "1513860",
    "end": "1519140"
  },
  {
    "text": "semaphores and things like that and what it what it does is it checks to see if x is set and if x is set it returns false",
    "start": "1519140",
    "end": "1526460"
  },
  {
    "text": "and if X is not set so like xsm location in memory If X is not set then it sets it and returns true and so if you",
    "start": "1526460",
    "end": "1533240"
  },
  {
    "text": "duplicate that expression then it's always going to be true and you sort of your little proto-lock implementation is",
    "start": "1533240",
    "end": "1538520"
  },
  {
    "text": "not going to be doing what you want it to do right so okay so duplication of code is just bad all right",
    "start": "1538520",
    "end": "1543740"
  },
  {
    "text": "okay so we know how to avoid duplicating code we use local variables right you",
    "start": "1543740",
    "end": "1549140"
  },
  {
    "text": "just bind the result of the X expression to some variable X and then you can refer to the variable twice and now",
    "start": "1549140",
    "end": "1556940"
  },
  {
    "text": "we're in good shape because uh well at least we don't have the we're not duplicating the effect we're not going",
    "start": "1556940",
    "end": "1563299"
  },
  {
    "text": "to cause the compiler to choke because we're not sort of growing ridiculous amounts of code in the expansion",
    "start": "1563299",
    "end": "1569120"
  },
  {
    "text": "but so let's look at see how this transforms so if I have my zero one list function which unfortunately also",
    "start": "1569120",
    "end": "1576679"
  },
  {
    "text": "happened to use the variable name X in it then I've got sort of two x's and they're",
    "start": "1576679",
    "end": "1583100"
  },
  {
    "text": "going to collide with each other so if I call the zero one list function on a list with one element in it it's",
    "start": "1583100",
    "end": "1589460"
  },
  {
    "text": "supposed to return true and instead it crashes with could or given false the only use of Kutter is",
    "start": "1589460",
    "end": "1595220"
  },
  {
    "text": "that that one in the bottom right there so he could have X there that X is in the original program the x is referring",
    "start": "1595220",
    "end": "1602419"
  },
  {
    "text": "to the parameter it's the argument to the zero in this function but in after the macro expansion step it's referring",
    "start": "1602419",
    "end": "1608419"
  },
  {
    "text": "to this temporary variable that got introduced so that's bad and that's not what we wanted now the",
    "start": "1608419",
    "end": "1614240"
  },
  {
    "text": "problem in this case is not with the macro",
    "start": "1614240",
    "end": "1619640"
  },
  {
    "text": "the problem is that the macro system is not respecting a part of the post programming language it's not respecting",
    "start": "1619640",
    "end": "1625940"
  },
  {
    "text": "the scope the notion of scope the variables in the host programming language so what we want is something called",
    "start": "1625940",
    "end": "1631880"
  },
  {
    "text": "hygiene okay and so now I just just to put this in some context we are now caught up with 1986.",
    "start": "1631880",
    "end": "1637760"
  },
  {
    "text": "okay in macro technology all right after I explain how you in the next two slides or three slides or whatever all right",
    "start": "1637760",
    "end": "1644059"
  },
  {
    "text": "okay um so the way hygiene works is you say",
    "start": "1644059",
    "end": "1649460"
  },
  {
    "text": "oh this is the original program I will put a marker on all the variables in it",
    "start": "1649460",
    "end": "1655039"
  },
  {
    "text": "to indicate that they are in the zeroeth step of macro expansion they exist before macro expansion started happening",
    "start": "1655039",
    "end": "1660679"
  },
  {
    "text": "and then whenever I do a step of macro transformation any variables that are introduced in that step they will get a",
    "start": "1660679",
    "end": "1667039"
  },
  {
    "text": "number associated with whatever step they are on or a color associated with it so the X's that are the parameter to",
    "start": "1667039",
    "end": "1674299"
  },
  {
    "text": "the 0 1 list function have zero and the X's that were introduced by the macro expansions the first macro expansion",
    "start": "1674299",
    "end": "1681260"
  },
  {
    "text": "step have a one and the compiler knows the zeros and ones that sort of count morally as different X's",
    "start": "1681260",
    "end": "1687320"
  },
  {
    "text": "okay so this program now uh you know this macro is correct if you",
    "start": "1687320",
    "end": "1693679"
  },
  {
    "text": "use a good macro system one that respects the scope so it's important recap we want to respect the parsing",
    "start": "1693679",
    "end": "1699320"
  },
  {
    "text": "level structure of the programming language in the macro system we want to respect the expression level structure",
    "start": "1699320",
    "end": "1704419"
  },
  {
    "text": "of the programming language in our macro system and we want to respect the variable level structure of the programming language you need to be able",
    "start": "1704419",
    "end": "1710600"
  },
  {
    "text": "to do all these things so you have this firm foundation on which to be able to build real programming languages you don't want to have to like remember to",
    "start": "1710600",
    "end": "1717140"
  },
  {
    "text": "put hashes on the ends of your identifiers right it's easy to make mistakes if you do that and in fact",
    "start": "1717140",
    "end": "1722419"
  },
  {
    "text": "there's more to be said there putting hash is not actually that big a deal but in some situations you don't you you both need to put and not put the hash",
    "start": "1722419",
    "end": "1729020"
  },
  {
    "text": "right okay so those you know what I'm talking about you know okay but um so I want to I want to go a little",
    "start": "1729020",
    "end": "1734299"
  },
  {
    "text": "further now and to talk about how when you have scope sort of really understood by the",
    "start": "1734299",
    "end": "1742460"
  },
  {
    "text": "programming language by the macro system that you can build some good stuff um using it and I'm going to do that by",
    "start": "1742460",
    "end": "1750440"
  },
  {
    "text": "looking at kind of a common flaw a common I don't",
    "start": "1750440",
    "end": "1755840"
  },
  {
    "text": "know what I don't know what bad thing that that happens in programming languages um you know like in the in the general",
    "start": "1755840",
    "end": "1762399"
  },
  {
    "text": "lisp scheme family where you don't have an enum operation you don't have enums",
    "start": "1762399",
    "end": "1767480"
  },
  {
    "text": "so what you do is you use symbols instead of um and if you're not familiar with that",
    "start": "1767480",
    "end": "1773840"
  },
  {
    "text": "sort of thing and then strings it's the same thing as using strings here so basically I have I have in my mind the",
    "start": "1773840",
    "end": "1779539"
  },
  {
    "text": "notion that there are four kinds of animals I'm interested in with this program and I'm using symbols or strings or whatever to to represent those four",
    "start": "1779539",
    "end": "1786380"
  },
  {
    "text": "different because I don't have a notion of an enum thing built into my programming language so in this case",
    "start": "1786380",
    "end": "1791779"
  },
  {
    "text": "there's dogs Turtles sheeps and horses and that's how I think about what the possible character possible animals are",
    "start": "1791779",
    "end": "1799340"
  },
  {
    "text": "and if I forget one of them then the programming language doesn't complain at me and if I don't have a",
    "start": "1799340",
    "end": "1805880"
  },
  {
    "text": "good enough test Suite I don't notice or it's actually kind of worse than that because of course you're never going to",
    "start": "1805880",
    "end": "1811460"
  },
  {
    "text": "leave it alone right your programs either the programs either evolve and change or they're dead and so probably",
    "start": "1811460",
    "end": "1817100"
  },
  {
    "text": "I'm going to change and add a new thing to my enum or remove one or something like that and I want to be able to help",
    "start": "1817100",
    "end": "1822559"
  },
  {
    "text": "the compiler to actually help me find the places where I need to modify my program all right",
    "start": "1822559",
    "end": "1828440"
  },
  {
    "text": "so um so we'll return to this defined syntax guy now and now I'm using Define syntax",
    "start": "1828440",
    "end": "1835279"
  },
  {
    "text": "to bind at compile time the variable animals to a set and it's a set of all the symbols that",
    "start": "1835279",
    "end": "1841940"
  },
  {
    "text": "currently I think of as what the animal name should be and what's interesting about this",
    "start": "1841940",
    "end": "1848480"
  },
  {
    "text": "definition is that I'm not defining a macro I'm just defining a thing which will be useful to me at compile time a",
    "start": "1848480",
    "end": "1854419"
  },
  {
    "text": "macro is a function that's useful to me to compile time that the macro expander knows how to work with here I'm just defining a variable that's useful to me",
    "start": "1854419",
    "end": "1861440"
  },
  {
    "text": "at compile time and so I can look it up at compile time and so you need one more piece to be able to do that",
    "start": "1861440",
    "end": "1866960"
  },
  {
    "text": "if you say syntax local value you give it an expression that should",
    "start": "1866960",
    "end": "1872899"
  },
  {
    "text": "and that expression should be a variable then it will look up what that variable is bound to and you can use this at",
    "start": "1872899",
    "end": "1879020"
  },
  {
    "text": "compile time to look up what animals is bound to so and if you do this then you'll get back that set that same set",
    "start": "1879020",
    "end": "1884779"
  },
  {
    "text": "okay and now we can put this together with the ability to Define macros to actually put some checking in so so here",
    "start": "1884779",
    "end": "1891919"
  },
  {
    "text": "is the definition of an animal case macro okay and it's still using syntax parse",
    "start": "1891919",
    "end": "1898940"
  },
  {
    "text": "and it's actually not doing anything interesting with animals yet it's just expanding directly into",
    "start": "1898940",
    "end": "1904880"
  },
  {
    "text": "the case expression so what this is saying is an an animal animal case expression should have an animal",
    "start": "1904880",
    "end": "1911480"
  },
  {
    "text": "expression and Then followed by a bunch of cases the Ellipsis means you can repeat the thing that comes before as",
    "start": "1911480",
    "end": "1917120"
  },
  {
    "text": "many times as you like so we can have as many different cases and each case can have as many animals as you want inside",
    "start": "1917120",
    "end": "1922520"
  },
  {
    "text": "them and it just expands into the case so it's using the same construct we were using before to do the case dispatch and",
    "start": "1922520",
    "end": "1928880"
  },
  {
    "text": "what we really want to do is layer in some additional checking that tells us um whether or not we've got the right",
    "start": "1928880",
    "end": "1934700"
  },
  {
    "text": "set of animals in there okay so we can just run stuff at compile",
    "start": "1934700",
    "end": "1940640"
  },
  {
    "text": "time because this macro is is run at compile time and so what we can do is I've written a little function called",
    "start": "1940640",
    "end": "1946220"
  },
  {
    "text": "same as set which I'm not showing you here but basically I give it as one argument the the tree",
    "start": "1946220",
    "end": "1953059"
  },
  {
    "text": "that corresponds to all of the animals that are mentioned in this expression and I give it the other argument syntax",
    "start": "1953059",
    "end": "1958580"
  },
  {
    "text": "local value hash quote animals which as we know is going to just look up what animals is in the current lexical context and return to that set that we",
    "start": "1958580",
    "end": "1965299"
  },
  {
    "text": "had there and then same as that will return you the true or false if they're the same when viewed as a set okay and",
    "start": "1965299",
    "end": "1970580"
  },
  {
    "text": "then what we can do is we can just check and see if that Boolean is true or not and if it's false then we'll call this",
    "start": "1970580",
    "end": "1976580"
  },
  {
    "text": "function called raise syntax error and what race syntax error takes is the first two arguments are basically some",
    "start": "1976580",
    "end": "1982460"
  },
  {
    "text": "information about you know text to put into the error message and the interesting one is that third argument",
    "start": "1982460",
    "end": "1987740"
  },
  {
    "text": "and what that race syntax error does is it looks at that and there's like metadata associated with the tree",
    "start": "1987740",
    "end": "1994340"
  },
  {
    "text": "that got passed into the animal case macro that has things like line and column information in it and it can use",
    "start": "1994340",
    "end": "2000460"
  },
  {
    "text": "that to give an error message directly you know highlighting the right spot in the in the source text or just to print",
    "start": "2000460",
    "end": "2005620"
  },
  {
    "text": "out line column information if you're running up to the terminal or whatever okay",
    "start": "2005620",
    "end": "2011019"
  },
  {
    "text": "so um we don't maybe we want to have more enums than just animals so maybe we",
    "start": "2011019",
    "end": "2018039"
  },
  {
    "text": "should have defined enum which uses a nice Syntax for enums and",
    "start": "2018039",
    "end": "2023260"
  },
  {
    "text": "gives us a single point of control so that we can have maybe have better error messages and more refined checking in",
    "start": "2023260",
    "end": "2028539"
  },
  {
    "text": "our in our in an enum case macro so we say Define enum animals and of course",
    "start": "2028539",
    "end": "2034059"
  },
  {
    "text": "that should just expand into defined syntax right and so that's like okay so you",
    "start": "2034059",
    "end": "2039580"
  },
  {
    "text": "guys are all up to speed on how macros work and so that's a that's a straightforward macro now",
    "start": "2039580",
    "end": "2045519"
  },
  {
    "text": "you just turn it into Define syntax and then we can generalize this is the",
    "start": "2045519",
    "end": "2054158"
  },
  {
    "text": "exact same code as animal case except for the word animal is now replaced with enum and there are two other changes namely you have to put in",
    "start": "2054159",
    "end": "2061658"
  },
  {
    "text": "the enum in addition to putting in the expression and then use syntax local value on that",
    "start": "2061659",
    "end": "2068138"
  },
  {
    "text": "enum and so because scope is baked into the understanding that the macro system has of the programming language then",
    "start": "2068139",
    "end": "2074858"
  },
  {
    "text": "this syntax local value is going to get the right enum so you can declare your enum in a local",
    "start": "2074859",
    "end": "2081820"
  },
  {
    "text": "scope somewhere and it will work it will do the the right thing because syntax local value understands the scope of the",
    "start": "2081820",
    "end": "2088300"
  },
  {
    "text": "programming language in the same way that the macro system understands the scope okay so this is more General than",
    "start": "2088300",
    "end": "2093760"
  },
  {
    "text": "just just um the sort of original notion of hygiene but but if you're thinking about it as a",
    "start": "2093760",
    "end": "2100599"
  },
  {
    "text": "macro programmer or as a user of these macros you just think scope scope works and that's enough to understand what's",
    "start": "2100599",
    "end": "2107200"
  },
  {
    "text": "happening in this macro all right and so here's what the code looks like and I left out the turtle",
    "start": "2107200",
    "end": "2113320"
  },
  {
    "text": "case again and now we get this enume case and um with the right Source location and",
    "start": "2113320",
    "end": "2119920"
  },
  {
    "text": "everything would be printed out in the in the era if we run it in in Dr racket or in the terminal or whatever",
    "start": "2119920",
    "end": "2126160"
  },
  {
    "text": "all right okay so that's that's a little bit about some of the benefits you get",
    "start": "2126160",
    "end": "2131320"
  },
  {
    "text": "of having a macro system that properly respects the underlying structure of the programming language that it's a host to",
    "start": "2131320",
    "end": "2139119"
  },
  {
    "text": "and gets us caught up to maybe I don't know I'm not sure where somewhere somewhere",
    "start": "2139119",
    "end": "2144160"
  },
  {
    "text": "in the late 90s or late 2000s of macro system technology in 2002 I think",
    "start": "2144160",
    "end": "2150640"
  },
  {
    "text": "not that there's been a lot since then but there's some okay all right so let me take a minute now and show you another programming language that I um",
    "start": "2150640",
    "end": "2157180"
  },
  {
    "text": "implemented for this talk that is a mini Hardware description language",
    "start": "2157180",
    "end": "2162760"
  },
  {
    "text": "okay and I'll just show you this program and then I'll give you kind of a flyby of",
    "start": "2162760",
    "end": "2169000"
  },
  {
    "text": "the implementation of the programming language so you get a sense of how much code it takes to do something",
    "start": "2169000",
    "end": "2174940"
  },
  {
    "text": "okay so mini HDL is it's really focused on like the",
    "start": "2174940",
    "end": "2181480"
  },
  {
    "text": "um the combinatory logic you know there's no there's no Cycles or anything like",
    "start": "2181480",
    "end": "2187660"
  },
  {
    "text": "that happening here but um so if I if I uh if I say you say inputs and you put a",
    "start": "2187660",
    "end": "2194500"
  },
  {
    "text": "bunch of variables this is the inputs to the circuit and then this equals 11 means take 11 think of it as a two's",
    "start": "2194500",
    "end": "2200920"
  },
  {
    "text": "complement binary number and then initialize a0 A1 A2 Etc as the booleans corresponding to",
    "start": "2200920",
    "end": "2208960"
  },
  {
    "text": "those ones and zeros and do the same thing with the 22 in in the B's and then do some stuff and then show int you give",
    "start": "2208960",
    "end": "2217300"
  },
  {
    "text": "it you give it the the ones and zeros the booleans that corresponds you know to whatever and it's going to assemble",
    "start": "2217300",
    "end": "2223839"
  },
  {
    "text": "them into a two's complement integer and print it out and so anybody know what this is going to print when I run it",
    "start": "2223839",
    "end": "2230020"
  },
  {
    "text": "did you read it yet anybody recognize this anybody take like intro to CE as an undergrad or anything",
    "start": "2230020",
    "end": "2236200"
  },
  {
    "text": "like that this is a this is a ripple carry Adder okay so it's gonna it's gonna sum the",
    "start": "2236200",
    "end": "2241720"
  },
  {
    "text": "numbers yeah okay 11 plus 22 is 33 good okay",
    "start": "2241720",
    "end": "2247960"
  },
  {
    "text": "um and if I uh I made a variation on this language called the gate count",
    "start": "2247960",
    "end": "2254320"
  },
  {
    "text": "variation and if I run that one then let's see",
    "start": "2254320",
    "end": "2259480"
  },
  {
    "text": "uh then it shows you how the values are",
    "start": "2259480",
    "end": "2265599"
  },
  {
    "text": "kind of flowing through the circuit so you can see how roughly how many time steps it takes or a Time step",
    "start": "2265599",
    "end": "2272619"
  },
  {
    "text": "corresponds to a gate switching okay with which in a matter is is a good",
    "start": "2272619",
    "end": "2278260"
  },
  {
    "text": "measure for time so initially you know all the uh",
    "start": "2278260",
    "end": "2283420"
  },
  {
    "text": "all the variables are not known and then in the first step all the inputs become known and then some of these",
    "start": "2283420",
    "end": "2288700"
  },
  {
    "text": "intermediate things are not known but they come become known in various at various points throughout and the",
    "start": "2288700",
    "end": "2294220"
  },
  {
    "text": "reason that they sort of become known at different steps is they depend on other things earlier so they become known sort of as",
    "start": "2294220",
    "end": "2301480"
  },
  {
    "text": "values flows through the circuit and so it took what six time steps to compute the sum of",
    "start": "2301480",
    "end": "2308380"
  },
  {
    "text": "to compute that sum and if I change it to doing this then it takes only three time steps and that's because andanor",
    "start": "2308380",
    "end": "2314079"
  },
  {
    "text": "have certain short-circuiting behavior that makes additions of different numbers go faster than other numbers okay and and so since I was kind of",
    "start": "2314079",
    "end": "2321520"
  },
  {
    "text": "playing around with this stuff I also put a loop in the programming language",
    "start": "2321520",
    "end": "2326619"
  },
  {
    "text": "implementation that if you don't initialize the values in the gate language it just runs them all and gives",
    "start": "2326619",
    "end": "2332200"
  },
  {
    "text": "you a summary of it so you can get kind of a sense of there's like a lot of difference you know there's a lot of stuff going on inside your chips like it",
    "start": "2332200",
    "end": "2338440"
  },
  {
    "text": "doesn't actually use Ripple carry adders in your implementation in your in your laptops there and there's like some",
    "start": "2338440",
    "end": "2344079"
  },
  {
    "text": "interesting stuff that happens if you I don't know anyway I find that stuff cool but so let me show you the implementation of",
    "start": "2344079",
    "end": "2349599"
  },
  {
    "text": "this programming language so here is a sample program sort of a",
    "start": "2349599",
    "end": "2355119"
  },
  {
    "text": "shorter version a ripple carry adder with two bits and the first thing that happens is of course we make it more",
    "start": "2355119",
    "end": "2362260"
  },
  {
    "text": "beautiful this is the parser okay and it's a it's",
    "start": "2362260",
    "end": "2367960"
  },
  {
    "text": "109 lines of code and it's uh in a very small font over there",
    "start": "2367960",
    "end": "2373720"
  },
  {
    "text": "and it's basically using you know Lex and Yak library that racket comes with",
    "start": "2373720",
    "end": "2379720"
  },
  {
    "text": "all right and then once we have it in that form then the macros come in and",
    "start": "2379720",
    "end": "2384880"
  },
  {
    "text": "this is what this is the macro transformation for that program does so inputs that inputs declaration just",
    "start": "2384880",
    "end": "2391119"
  },
  {
    "text": "turns into a bunch of definitions one for each variable equals really was just defined",
    "start": "2391119",
    "end": "2396339"
  },
  {
    "text": "and nth bit is a function in the runtime system for this little programming language so this is the 73 lines of code",
    "start": "2396339",
    "end": "2403359"
  },
  {
    "text": "over here is the implementation of those of the the xor and the wedge and",
    "start": "2403359",
    "end": "2409060"
  },
  {
    "text": "whatever those Boolean operations as well as the trans those macros that did the transformation you can kind of",
    "start": "2409060",
    "end": "2414280"
  },
  {
    "text": "imagine that those macros are not super complicated right it's just calling nth bit you know with zero with with you",
    "start": "2414280",
    "end": "2420460"
  },
  {
    "text": "know n and then and then the number it was initialized with um so the macros are not very complicated they're pretty simple",
    "start": "2420460",
    "end": "2426339"
  },
  {
    "text": "Transformations and that's why the code's short um and then it expands in a totally",
    "start": "2426339",
    "end": "2432579"
  },
  {
    "text": "different way for the gate count language because I want to be able to count how many times you know I want to be able to like interrupt the process of",
    "start": "2432579",
    "end": "2439119"
  },
  {
    "text": "the values flowing through so it has a different implementation of the Boolean operations because they don't just get booleans now they also get the I don't",
    "start": "2439119",
    "end": "2445660"
  },
  {
    "text": "know what the value is yet and they have this nice short-circuiting behavior so if you give if you give like what uh if",
    "start": "2445660",
    "end": "2451060"
  },
  {
    "text": "you give and a false and an I don't know it says false right because it doesn't need to know",
    "start": "2451060",
    "end": "2456700"
  },
  {
    "text": "what the other one is and so um so you so this iterate function um",
    "start": "2456700",
    "end": "2462400"
  },
  {
    "text": "you know it just gets called multiple times to see and then it keeps going until the results don't change in one",
    "start": "2462400",
    "end": "2468460"
  },
  {
    "text": "Loop and then so there's a little Loop that the bottom that bottom thing there where the horrible rightward drift I",
    "start": "2468460",
    "end": "2474160"
  },
  {
    "text": "don't know if you can see it there that's the little Loop that's calling this generated function multiple times and this is this is what the macros",
    "start": "2474160",
    "end": "2479680"
  },
  {
    "text": "expand to for the same program in the gate count programming language so this expenses you know slightly",
    "start": "2479680",
    "end": "2486700"
  },
  {
    "text": "different but really it's still a very simple expansion and that's why it's only 107 lines so uh and then there's",
    "start": "2486700",
    "end": "2493839"
  },
  {
    "text": "another these lines right here this is a little metadata programming language that basically stitches together the parser and says like my parser's over",
    "start": "2493839",
    "end": "2500920"
  },
  {
    "text": "there and my my other files are over there and here's how here's the exported name of the parser and whatever so you",
    "start": "2500920",
    "end": "2506079"
  },
  {
    "text": "put all that together it's like about 300 lines of code um for for that implementation of mini",
    "start": "2506079",
    "end": "2511599"
  },
  {
    "text": "HDL okay all right so this is a picture of the",
    "start": "2511599",
    "end": "2518859"
  },
  {
    "text": "directory structure of the standard distribution of racket and that little",
    "start": "2518859",
    "end": "2524020"
  },
  {
    "text": "um not looking thing in the middle is the root of the tree and the circles are the files and so what I'm going to do",
    "start": "2524020",
    "end": "2530260"
  },
  {
    "text": "now is color in the circles based on the programming language that they're that they're written in",
    "start": "2530260",
    "end": "2536220"
  },
  {
    "text": "and this is you know like a lot of the reason why we're able",
    "start": "2536220",
    "end": "2542260"
  },
  {
    "text": "to make racket have the batteries that it has and it's got some it's got a lot of batteries included in it it's because",
    "start": "2542260",
    "end": "2548560"
  },
  {
    "text": "we're able to leverage the macro system and the fact that we can write things in whatever programming language we find",
    "start": "2548560",
    "end": "2554800"
  },
  {
    "text": "most convenient um and there's definitely a power law thing happening here this everything else black thing on the bottom contains a",
    "start": "2554800",
    "end": "2561520"
  },
  {
    "text": "bunch of crazy little one-off programming languages in it okay and uh",
    "start": "2561520",
    "end": "2568980"
  },
  {
    "text": "this slide always makes me think of paulhood X the one whose birthday was yesterday as you may recall and this is",
    "start": "2568980",
    "end": "2574599"
  },
  {
    "text": "a quote that he made he did a lot of work on domain specific languages in the context of Haskell",
    "start": "2574599",
    "end": "2581220"
  },
  {
    "text": "all right so let me just leave you with two thoughts um",
    "start": "2581440",
    "end": "2586540"
  },
  {
    "text": "macros are a lot of what makes us able to as a not very large team build bracket",
    "start": "2586540",
    "end": "2592619"
  },
  {
    "text": "and there's a lot going on there in the macro system that's both interesting",
    "start": "2592619",
    "end": "2598359"
  },
  {
    "text": "like if you want to do some hacking and you want to build a programming language and interesting if you're a researcher studying how to build programming",
    "start": "2598359",
    "end": "2605560"
  },
  {
    "text": "languages and if you need a new programming language you know and everybody does maybe you should give maybe you should",
    "start": "2605560",
    "end": "2612760"
  },
  {
    "text": "give racket a try all right thanks foreign",
    "start": "2612760",
    "end": "2618579"
  },
  {
    "text": "[Applause]",
    "start": "2627080",
    "end": "2630369"
  },
  {
    "text": "construct is green threads style so it has a",
    "start": "2644280",
    "end": "2649480"
  },
  {
    "text": "it doesn't do it the way it doesn't have the the Gill the way python whatever do",
    "start": "2649480",
    "end": "2655119"
  },
  {
    "text": "but so so the threading construct is for concurrency",
    "start": "2655119",
    "end": "2660400"
  },
  {
    "text": "so for like programming guise and with with uh you know networking and stuff like that where you're interested in",
    "start": "2660400",
    "end": "2666099"
  },
  {
    "text": "bringing non-determinism into the programming language and then there's two separate constructs for",
    "start": "2666099",
    "end": "2671980"
  },
  {
    "text": "parallelism one is Futures and one is called places and they have different trade-offs",
    "start": "2671980",
    "end": "2677380"
  },
  {
    "text": "having to do with the fact that our runtime system is about 15 years old and heavily optimized for the sequential",
    "start": "2677380",
    "end": "2682900"
  },
  {
    "text": "case um and one one of them yeah I can tell you more about them",
    "start": "2682900",
    "end": "2688660"
  },
  {
    "text": "later but but roughly um we have support for parallelism in this two different ways and one of them",
    "start": "2688660",
    "end": "2695140"
  },
  {
    "text": "clones the runtime System state and one of them kind of knows which part of the runtime System state is safe to run in parallel and they have different",
    "start": "2695140",
    "end": "2700900"
  },
  {
    "text": "limitations and different trade-offs depending on you know what your actual parallel application looks like so like and the the build system for",
    "start": "2700900",
    "end": "2708280"
  },
  {
    "text": "Rocket is all parallel using places the cloning the runtime system state",
    "start": "2708280",
    "end": "2714300"
  },
  {
    "text": "yep anything",
    "start": "2721000",
    "end": "2724920"
  },
  {
    "text": "no oh sorry the question was if there's anything maybe we should finish it I",
    "start": "2726400",
    "end": "2732160"
  },
  {
    "text": "should I cut you off yeah [Music]",
    "start": "2732160",
    "end": "2736619"
  },
  {
    "text": "well the questions whether there's anything with a similar power that you can use in a browser uh",
    "start": "2740800",
    "end": "2747040"
  },
  {
    "text": "I feel like that's a very dangerous question for me to answer there's JavaScript in browsers",
    "start": "2747040",
    "end": "2753280"
  },
  {
    "text": "and it has a level of power which I would say is different than",
    "start": "2753280",
    "end": "2758859"
  },
  {
    "text": "racket uh maybe I should leave it at that I don't",
    "start": "2758859",
    "end": "2764500"
  },
  {
    "text": "know so there's a there's a project that um to run racket that's a job racket to",
    "start": "2764500",
    "end": "2769839"
  },
  {
    "text": "JavaScript compiler called whale song which lets you run some much of Racket in a browser",
    "start": "2769839",
    "end": "2776520"
  },
  {
    "text": "IES",
    "start": "2783880",
    "end": "2786660"
  },
  {
    "text": "yeah so there's a there's a cffi uh the question is whether or not um",
    "start": "2791440",
    "end": "2796839"
  },
  {
    "text": "racket has a good interoperability story for languages that are not written using racket right and definitely the",
    "start": "2796839",
    "end": "2803319"
  },
  {
    "text": "interoperability story is worse than it is uh for languages that are you know the languages can cooperate at a higher",
    "start": "2803319",
    "end": "2810099"
  },
  {
    "text": "level when they when they're implemented together with macros because I didn't talk about the module system but they can they can interact at higher levels",
    "start": "2810099",
    "end": "2816640"
  },
  {
    "text": "than just the kind of low-level lowest common denominator that you expect from more",
    "start": "2816640",
    "end": "2822880"
  },
  {
    "text": "traditional interop stories but we also have a we have a c ffi interface that's",
    "start": "2822880",
    "end": "2829839"
  },
  {
    "text": "got some interesting clever Ellie barsley uh did it it's got some interesting cleverness in there having",
    "start": "2829839",
    "end": "2835540"
  },
  {
    "text": "to do with not needing a c compiler all the time that makes but it's a cffi that that's maybe what",
    "start": "2835540",
    "end": "2843040"
  },
  {
    "text": "you're used to",
    "start": "2843040",
    "end": "2845460"
  },
  {
    "text": "types of",
    "start": "2851260",
    "end": "2854040"
  },
  {
    "text": "uh how does so the question is how the contract generation works with user-defined types between typed bracket",
    "start": "2867460",
    "end": "2873400"
  },
  {
    "text": "and and untyped bracket and it works fine the the the typed racket type",
    "start": "2873400",
    "end": "2878859"
  },
  {
    "text": "system knows how to generate uh contracts for every type that you could Define yourself using type track it",
    "start": "2878859",
    "end": "2887280"
  },
  {
    "text": "Dave Thomas",
    "start": "2888040",
    "end": "2890940"
  },
  {
    "text": "is the type system itself extensible um",
    "start": "2893800",
    "end": "2898619"
  },
  {
    "text": "not it's not as extensible as someone who's steeped in the macro world of",
    "start": "2901540",
    "end": "2908140"
  },
  {
    "text": "Racket might wish it were right in the sense that like like for example the pattern matcher in in racket",
    "start": "2908140",
    "end": "2914740"
  },
  {
    "text": "lets you define new kinds of patterns that you can add in and you might hope",
    "start": "2914740",
    "end": "2919960"
  },
  {
    "text": "that a type system in the spirit of Racket would let you give new type rules say to Define new things which it",
    "start": "2919960",
    "end": "2925960"
  },
  {
    "text": "doesn't currently do although I think it could and should and the guy who implemented the thing that does the",
    "start": "2925960",
    "end": "2931540"
  },
  {
    "text": "pattern matchers the extensibility in the pattern matcher also implemented typed Racket and I think you should",
    "start": "2931540",
    "end": "2936880"
  },
  {
    "text": "really get on that um uh you know the the macros at the type",
    "start": "2936880",
    "end": "2942220"
  },
  {
    "text": "level and in a way of defining an extensible type system seem like something that would be really cool to have but we don't have it right now it's",
    "start": "2942220",
    "end": "2948220"
  },
  {
    "text": "extensible in the more traditional ways of like user-defined types that you expect from a normal type",
    "start": "2948220",
    "end": "2953260"
  },
  {
    "text": "system",
    "start": "2953260",
    "end": "2955560"
  },
  {
    "text": "yeah um the the question is um and I will paraphrase this a lot",
    "start": "2980500",
    "end": "2988359"
  },
  {
    "text": "you've let somebody add things to the compiler and now they can break all of your programs they can break all the",
    "start": "2988359",
    "end": "2994060"
  },
  {
    "text": "things and the answer is yes if you know we've I mean",
    "start": "2994060",
    "end": "3000240"
  },
  {
    "text": "in some sense I don't know if I we sort of made the program worse problem worse because it used to be that you know only",
    "start": "3000240",
    "end": "3007500"
  },
  {
    "text": "the The Trusted few had the power to extend the compiler and now we're saying let's all extend the compiler right and",
    "start": "3007500",
    "end": "3013440"
  },
  {
    "text": "so um you know that in some sense makes the program worse but I think worse than a that's a different variation on horses",
    "start": "3013440",
    "end": "3019500"
  },
  {
    "text": "better maybe worse in a better way so so yeah I think all those problems",
    "start": "3019500",
    "end": "3026819"
  },
  {
    "text": "are there and that's an interesting thing to study and now we have a platform to study it",
    "start": "3026819",
    "end": "3033180"
  },
  {
    "text": "how we can do better yeah then so I don't know maybe that's the most satisfying answer but",
    "start": "3033180",
    "end": "3039800"
  },
  {
    "text": "where's the question is where is this image from you mean the the the the the",
    "start": "3050059",
    "end": "3056940"
  },
  {
    "text": "the the background not yeah uh that's from the lunchroom",
    "start": "3056940",
    "end": "3062520"
  },
  {
    "text": "foreign",
    "start": "3062520",
    "end": "3065240"
  },
  {
    "text": "the the graph oh I use a racket program",
    "start": "3067859",
    "end": "3074420"
  },
  {
    "text": "and you know Nito the which comes with a graph is you know dot you may have heard of to actually lay out the actual graph",
    "start": "3075000",
    "end": "3080400"
  },
  {
    "text": "but a rocket program did sort of get the data of course",
    "start": "3080400",
    "end": "3085339"
  },
  {
    "text": "okay let's thank the speaker thank you",
    "start": "3094319",
    "end": "3099380"
  }
]