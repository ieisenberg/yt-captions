[
  {
    "start": "0",
    "end": "133000"
  },
  {
    "text": "[Music]",
    "start": "2540",
    "end": "9599"
  },
  {
    "text": "this is a short talk um made to get you a bit excited about FR",
    "start": "9599",
    "end": "15359"
  },
  {
    "text": "FRP uh re functional reactive programming or reactive programming these are two different things but today",
    "start": "15359",
    "end": "20800"
  },
  {
    "text": "we're going to talk about mainly reactive programming how many of you have some experience with",
    "start": "20800",
    "end": "27359"
  },
  {
    "text": "it all right so some people already had some exposure so reactive",
    "start": "27359",
    "end": "32398"
  },
  {
    "text": "programming uh is a Hot Topic as of late especially with such such things as the",
    "start": "32399",
    "end": "37760"
  },
  {
    "text": "reactive Manifesto and uh I think it was corera made a massive course in Scala by",
    "start": "37760",
    "end": "45079"
  },
  {
    "text": "one of the authors of uh of uh SC well the author of Scala Martin",
    "start": "45079",
    "end": "50879"
  },
  {
    "text": "nki uh so it's kind of it's it's it's getting traction uh I'm going to talk about uh",
    "start": "50879",
    "end": "57280"
  },
  {
    "text": "functional reactive programming applied in JavaScript it's going to be very practical I'm not going to go through Theory which there's a lot so",
    "start": "57280",
    "end": "66400"
  },
  {
    "text": "um I am oh sorry it's not on yeah I'm Ser",
    "start": "66400",
    "end": "72080"
  },
  {
    "text": "manilia uh that's my Twitter that's my GitHub I have a lot of projects I collaborate on many open source projects",
    "start": "72080",
    "end": "79119"
  },
  {
    "text": "uh before I used to work at TomTom uh making the web kidi of the devices",
    "start": "79119",
    "end": "84600"
  },
  {
    "text": "there's three devices of TomTom that use JavaScript to uh to draw the UI now now",
    "start": "84600",
    "end": "90119"
  },
  {
    "text": "they use they're back to using Android um and then I worked at Cloud 9 ID which",
    "start": "90119",
    "end": "96399"
  },
  {
    "text": "is an IDE online that runs in your browser uh currently I'm working at",
    "start": "96399",
    "end": "101799"
  },
  {
    "text": "telenor that's a Scandinavian Telco um but I don't do anything related to telecommunications I work on Firefox OS",
    "start": "101799",
    "end": "110000"
  },
  {
    "text": "uh with Mozilla and first of all let me apologize about apologize about the",
    "start": "110000",
    "end": "115759"
  },
  {
    "text": "Shameless Ling baiting um that I done with the title I mean conquering time",
    "start": "115759",
    "end": "121640"
  },
  {
    "text": "with FR FRP is uh pretty grandiose and ambitious um but my first title was",
    "start": "121640",
    "end": "127520"
  },
  {
    "text": "something like that so we should be grateful tame your racing code with this one weird trick um so we're going to",
    "start": "127520",
    "end": "134400"
  },
  {
    "start": "133000",
    "end": "253000"
  },
  {
    "text": "talk about time anyway um human beings have time",
    "start": "134400",
    "end": "140560"
  },
  {
    "text": "Hardware in their brains we know uh about our appointments we know what happened yesterday we know about our",
    "start": "140560",
    "end": "145720"
  },
  {
    "text": "birthday everything is about time we have to meet a friend at a particular time um a specialization of human beings",
    "start": "145720",
    "end": "151840"
  },
  {
    "text": "which is which are JavaScript developers have Hardware hardwired acyn in their",
    "start": "151840",
    "end": "157959"
  },
  {
    "text": "brain um that's for many reasons uh JavaScript has only one thread uh most",
    "start": "157959",
    "end": "163519"
  },
  {
    "text": "of the interactions you do in JavaScript has to be have to be asynchronous if you don't want to block UI you probably are",
    "start": "163519",
    "end": "168879"
  },
  {
    "text": "familiar with the with the reasons the thing is Javascript deals with a lot of",
    "start": "168879",
    "end": "175040"
  },
  {
    "text": "asynchronicity but it didn't come with any way to make it easy so we came up",
    "start": "175040",
    "end": "180840"
  },
  {
    "text": "with all kinds of constructs to deal with that time annoying time concept uh",
    "start": "180840",
    "end": "187400"
  },
  {
    "text": "we came back with callbacks which is the rawest most basic node.js",
    "start": "187400",
    "end": "192920"
  },
  {
    "text": "uh chosen way of dealing with a synchronous stuff um you just pass",
    "start": "192920",
    "end": "198239"
  },
  {
    "text": "functions and call them when the function that that executed uh before is",
    "start": "198239",
    "end": "203879"
  },
  {
    "text": "finished promises are um an improvement I mean that's an opinion but are are an",
    "start": "203879",
    "end": "209879"
  },
  {
    "text": "improvement over Coba because you at least have a Handler on the on the uh uh",
    "start": "209879",
    "end": "215439"
  },
  {
    "text": "time related task and now generators are coming generators are cool they're going to change everything about JavaScript",
    "start": "215439",
    "end": "222560"
  },
  {
    "text": "because they're extremely powerful and they allow you to go back to a synchronous way of programming kind of",
    "start": "222560",
    "end": "228959"
  },
  {
    "text": "um then we have events but in reality everything you do",
    "start": "228959",
    "end": "234799"
  },
  {
    "text": "asynchronously uh could be called events because whenever a function comes back",
    "start": "234799",
    "end": "240439"
  },
  {
    "text": "is an event whenever a promise uh executed then uh Clause it's an event so",
    "start": "240439",
    "end": "246439"
  },
  {
    "text": "it's all events it's all things that happen and you want to do something when they",
    "start": "246439",
    "end": "252360"
  },
  {
    "text": "happen um we use events to deal with all the synchronous tasks so I will I will start with my",
    "start": "252360",
    "end": "260199"
  },
  {
    "start": "253000",
    "end": "447000"
  },
  {
    "text": "first example um being a JavaScript",
    "start": "260199",
    "end": "265360"
  },
  {
    "text": "event for those of you that program Javas usually this a very familiar code",
    "start": "266520",
    "end": "272840"
  },
  {
    "text": "that's a an event listener for a click event um what it does is count it logs",
    "start": "272840",
    "end": "280560"
  },
  {
    "text": "the coordinates of clicks that happen on the right side of the screen but only the first 10 clicks then it stops",
    "start": "280560",
    "end": "288039"
  },
  {
    "text": "logging that's all we want to do but we don't think about it anymore",
    "start": "288039",
    "end": "294039"
  },
  {
    "text": "because we do it all the time but look at this code I just want to L clicks on the right 10 times this a lot of",
    "start": "294039",
    "end": "300639"
  },
  {
    "text": "code why are still micromanaging code this kind of code especially it's not",
    "start": "300639",
    "end": "307320"
  },
  {
    "text": "that I want some Precision um because it's a very uh performance sensitive",
    "start": "307320",
    "end": "313880"
  },
  {
    "text": "task um I don't there's absolutely no reason why I have to write so much so",
    "start": "313880",
    "end": "319400"
  },
  {
    "text": "let's go back to the code what I really want this code to do the really meaningful lines are if clicks is less",
    "start": "319400",
    "end": "329120"
  },
  {
    "text": "than 10 that means like only look 10 clicks or only do it for 10 clicks if the",
    "start": "329120",
    "end": "336479"
  },
  {
    "text": "coordinates are the right ones which is right side of the screen then just output uh do some side",
    "start": "336479",
    "end": "344080"
  },
  {
    "text": "effect and output the X and Y cordinates that's all I want from that code now you",
    "start": "344080",
    "end": "351160"
  },
  {
    "text": "might be thinking well that's not that bad it's not isn't horrible code but now I want to add another condition to that",
    "start": "351160",
    "end": "358520"
  },
  {
    "text": "code um and I want that all this only happens that it only locks the clicks",
    "start": "358520",
    "end": "364800"
  },
  {
    "text": "when the a key is pressed another another simple condition that's what happens to the code and if you have a",
    "start": "364800",
    "end": "371120"
  },
  {
    "text": "better way just tell me but what I have to do is that two more event listeners one for key down the other one for key",
    "start": "371120",
    "end": "378280"
  },
  {
    "text": "up at uh nextra variable is a pressed",
    "start": "378280",
    "end": "383520"
  },
  {
    "text": "which is initialized to false whenever a is pressed whenever I do key down uh is press is true and then if then I click I",
    "start": "383520",
    "end": "392039"
  },
  {
    "text": "check for that condition everything works but this is a lot of code and very complicated and the thing is I wrote",
    "start": "392039",
    "end": "397919"
  },
  {
    "text": "that probably I'm familiar with it but if I suddenly I take this computer you've never seen that code and I give",
    "start": "397919",
    "end": "404000"
  },
  {
    "text": "it to you you will need some minutes to know what this is doing or why am I doing",
    "start": "404000",
    "end": "410000"
  },
  {
    "text": "it and that is because nowadays um at least in JavaScript and in um for the",
    "start": "410000",
    "end": "416360"
  },
  {
    "text": "web we still code the how instead of the what the what is what I want to do the",
    "start": "416360",
    "end": "424160"
  },
  {
    "text": "how is how the computer should do it so this code I'm telling the computer exactly",
    "start": "424160",
    "end": "433039"
  },
  {
    "text": "how to do that I'm telling him okay now register this event listener then remove it uh if the clicks are less than 10",
    "start": "433039",
    "end": "439919"
  },
  {
    "text": "this is it has nothing to do with the task at hand which is like log the first 10",
    "start": "439919",
    "end": "446759"
  },
  {
    "text": "clicks programming should be more about the what programming for these kind of tasks I'm",
    "start": "446759",
    "end": "452919"
  },
  {
    "start": "447000",
    "end": "695000"
  },
  {
    "text": "not talking about um programming microprocessors we do have to be very precise very fast for this kind of task",
    "start": "452919",
    "end": "459520"
  },
  {
    "text": "we should be able to just say like log this log the first 10 clicks as so",
    "start": "459520",
    "end": "465680"
  },
  {
    "text": "simply as possible without leaving memory leaks uh because when you don't remove an event listener it's a Memory",
    "start": "465680",
    "end": "472520"
  },
  {
    "text": "leak and stuff like this um so programming should be more about the want that woman knows well um the other",
    "start": "472520",
    "end": "480520"
  },
  {
    "text": "thing is state is dangerous how many of you are familiar with functional",
    "start": "480520",
    "end": "487960"
  },
  {
    "text": "programming all right uh state is dangerous the more State you keep uh in",
    "start": "487960",
    "end": "494599"
  },
  {
    "text": "an object or whever or whatever style your program the more State you keep the more risks of somebody else some in your",
    "start": "494599",
    "end": "501479"
  },
  {
    "text": "program uh modifying the that state and ending up with um with unpredictable",
    "start": "501479",
    "end": "508759"
  },
  {
    "text": "consequences it's dangerous and we're talking about a very small program here",
    "start": "508759",
    "end": "514240"
  },
  {
    "text": "we really have all this state everything that's circled out um it's state so I",
    "start": "514240",
    "end": "520080"
  },
  {
    "text": "need a variable uh to register the clicks outside my event",
    "start": "520080",
    "end": "525560"
  },
  {
    "text": "listener if somebody else in other part of program modifies this variable I'm screwed the program doesn't work as I",
    "start": "525560",
    "end": "532040"
  },
  {
    "text": "expect it more then I have to take care to update these clicks I need another variable to register whether a is per",
    "start": "532040",
    "end": "539640"
  },
  {
    "text": "pressed and then I have to modify to true or false all the time depending on",
    "start": "539640",
    "end": "545440"
  },
  {
    "text": "whether a is pressed um this is not good we have the smallest program and we already have all",
    "start": "545440",
    "end": "553640"
  },
  {
    "text": "the state um risking you know for example here I don't reset clicks to I don't reset clicks ever I there's",
    "start": "553640",
    "end": "559959"
  },
  {
    "text": "already a bug you could count it as a bug but you know um it's not really but",
    "start": "559959",
    "end": "566680"
  },
  {
    "text": "it is depends on that how this program evolves these are potential bucks uh that will happen at some point then",
    "start": "566680",
    "end": "574480"
  },
  {
    "text": "there is another thing uh which I call event limbo um it's not that kind of limbo but",
    "start": "574480",
    "end": "582279"
  },
  {
    "text": "if you have to take something away from the stock it should be the following this record exists David hasselhof do",
    "start": "582279",
    "end": "589399"
  },
  {
    "text": "the Limbo Dance that really is out there um even Limbo what is it uh our poor",
    "start": "589399",
    "end": "595800"
  },
  {
    "text": "events are one of the most important parts in JavaScript whether you do noes",
    "start": "595800",
    "end": "600959"
  },
  {
    "text": "whether you front end backend it's all about events but they are not really first",
    "start": "600959",
    "end": "607480"
  },
  {
    "text": "class citizens um an event first of all it's",
    "start": "607480",
    "end": "612920"
  },
  {
    "text": "stateful by default an event you cannot you cannot not do any a side effects for",
    "start": "612920",
    "end": "619279"
  },
  {
    "text": "an event it doesn't make sense whatever value you return from an event doesn't matter you can return whatever nobody",
    "start": "619279",
    "end": "624399"
  },
  {
    "text": "will pick up this value ever um an event just is there to make to do side effects",
    "start": "624399",
    "end": "631279"
  },
  {
    "text": "also you cannot pass an event an event stream I should say you can pass the event object but you know what do you do",
    "start": "631279",
    "end": "638399"
  },
  {
    "text": "with this not much what you want is to isolate you know first of all to have a",
    "start": "638399",
    "end": "644480"
  },
  {
    "text": "Handler to the event because in this example when I click click is very",
    "start": "644480",
    "end": "649800"
  },
  {
    "text": "synchronous code that's for sure but imagine that was an ax request from the",
    "start": "649800",
    "end": "655079"
  },
  {
    "text": "moment I send Divan for some let's it with click from the moment I click to",
    "start": "655079",
    "end": "661720"
  },
  {
    "text": "the moment my function um gets executed I don't have a Handler to the event so I",
    "start": "661720",
    "end": "667120"
  },
  {
    "text": "just hope for the best I just say like listen to click whenever you click um",
    "start": "667120",
    "end": "672920"
  },
  {
    "text": "just uh execute this in case of Ajax I would do like do this request when it's",
    "start": "672920",
    "end": "679399"
  },
  {
    "text": "back do this in the meantime I don't I don't know where this function is I",
    "start": "679399",
    "end": "684680"
  },
  {
    "text": "don't know where the Callback is the developer is kind of helpless until",
    "start": "684680",
    "end": "691760"
  },
  {
    "text": "the Callback is executed no feedback nothing but isn't that the problem the",
    "start": "691760",
    "end": "698240"
  },
  {
    "start": "695000",
    "end": "998000"
  },
  {
    "text": "promises try to solve kind of so promises are good for solving",
    "start": "698240",
    "end": "705079"
  },
  {
    "text": "asynchronous operations such just saring a service uh with an XML HP request um",
    "start": "705079",
    "end": "711279"
  },
  {
    "text": "where the expected behavior is one value and then completion or go to the next",
    "start": "711279",
    "end": "717800"
  },
  {
    "text": "promise um so something like",
    "start": "717800",
    "end": "723360"
  },
  {
    "text": "that here on the upper side of the of the diagram I have the synchronous",
    "start": "724639",
    "end": "731720"
  },
  {
    "text": "version which is just assigning functions to variables on the right of that we have the promise way we do fing",
    "start": "731720",
    "end": "739720"
  },
  {
    "text": "or ging and then we execute when this is completed so what I'm going to introduce",
    "start": "739720",
    "end": "745600"
  },
  {
    "text": "today which is rxjs it's a it's a reactive framework that allows us to do",
    "start": "745600",
    "end": "752360"
  },
  {
    "text": "what promises do but with streams of events the equivalent will be imagine",
    "start": "752360",
    "end": "757760"
  },
  {
    "text": "that you have a an array of stocks uh that's the lower the lower part of the picture you have an array of stocks and",
    "start": "757760",
    "end": "766399"
  },
  {
    "text": "you just filter by symbol the Facebook symbol and then you map it to whatever",
    "start": "766399",
    "end": "772240"
  },
  {
    "text": "quote that um that stock has whatever value has and then when you have that",
    "start": "772240",
    "end": "778279"
  },
  {
    "text": "you can iterate right uh how many of you are familiar with uh filter and map",
    "start": "778279",
    "end": "785160"
  },
  {
    "text": "operations most of you so what's happening here is that um on an array we filter whatever has the symbol Facebook",
    "start": "785160",
    "end": "792920"
  },
  {
    "text": "returns true so only the values that have the symbol Facebook will go to the next stage which is the map and the map",
    "start": "792920",
    "end": "799000"
  },
  {
    "text": "replaces uh the symbol the string FB in that case by the",
    "start": "799000",
    "end": "804560"
  },
  {
    "text": "quote that's pretty awesome of a race but the what rxs allows us to do is the",
    "start": "804560",
    "end": "810680"
  },
  {
    "text": "same exact that's real code um with asynchronous retrieval so in that case",
    "start": "810680",
    "end": "817639"
  },
  {
    "text": "stocks is not an array let me see this stocks that's not an array that is what",
    "start": "817639",
    "end": "824639"
  },
  {
    "text": "we call an observable this is an asynchronous operation that might have that that has not happened yet this is",
    "start": "824639",
    "end": "832639"
  },
  {
    "text": "uh HX request or user input whatever whenever it happens we'll get the",
    "start": "832639",
    "end": "838600"
  },
  {
    "text": "results so to understand that better um what I'm trying to say is",
    "start": "838600",
    "end": "843880"
  },
  {
    "text": "that reactive programming and axas in particular it's all about stream of events so how is how does an event work",
    "start": "843880",
    "end": "852480"
  },
  {
    "text": "this is you know my way of drawing what happened when uh a user clicks the",
    "start": "852480",
    "end": "858160"
  },
  {
    "text": "screen so whenever I keep clicking the screen the screen the the the computer gets this gets one click then another",
    "start": "858160",
    "end": "865639"
  },
  {
    "text": "one then maybe one hour later another one what does this look",
    "start": "865639",
    "end": "871560"
  },
  {
    "text": "like um what if we put some brackets around it and put some commas between",
    "start": "871560",
    "end": "879160"
  },
  {
    "text": "the clicks that looks like an array what is an array an array is is a sequence",
    "start": "879160",
    "end": "885360"
  },
  {
    "text": "so what we want to do is to see our events and by event I I not only mean",
    "start": "885360",
    "end": "892600"
  },
  {
    "text": "JavaScript events but anything is synchronous as a sequence not as as a",
    "start": "892600",
    "end": "899240"
  },
  {
    "text": "single event we don't want to deal with this click and this click we want to take the whole sequence of clicks and",
    "start": "899240",
    "end": "905399"
  },
  {
    "text": "operate on it and be able to take this sequence pass it around capture it and",
    "start": "905399",
    "end": "913560"
  },
  {
    "text": "clone it and do stuff with the sequence that cannot be done in in plain",
    "start": "913560",
    "end": "920600"
  },
  {
    "text": "JavaScript the best programming style to deal with sequences is functional",
    "start": "922120",
    "end": "927920"
  },
  {
    "text": "functional functional programming is very good at dealing with lists of items transforming them um passing them",
    "start": "927920",
    "end": "935959"
  },
  {
    "text": "around so we have in JavaScript we have stuff like this we have an array of",
    "start": "935959",
    "end": "943440"
  },
  {
    "text": "numbers we filter it by the ones that are divisible by two we add a string and",
    "start": "943440",
    "end": "949319"
  },
  {
    "text": "we log it this is functional I'm passing at no point there's state in this whole",
    "start": "949319",
    "end": "954399"
  },
  {
    "text": "operation there's no external State I don't keep anything I just keep passing and trans transforming the initial",
    "start": "954399",
    "end": "961120"
  },
  {
    "text": "sequence into a final output uh I'm using es6 by the way",
    "start": "961120",
    "end": "966560"
  },
  {
    "text": "that's why you don't see function names or anything like that I'm using arrows it's much better for presentations code",
    "start": "966560",
    "end": "972279"
  },
  {
    "text": "fits everywhere very nice if there's any doubt about the code just let me",
    "start": "972279",
    "end": "978959"
  },
  {
    "text": "know so we haven't solved anything yet um this is very obvious this is",
    "start": "979120",
    "end": "985399"
  },
  {
    "text": "synchronous code and very easy to to grasp in the way",
    "start": "985399",
    "end": "990920"
  },
  {
    "text": "um what is good at discrete acing event stream processing",
    "start": "991040",
    "end": "997319"
  },
  {
    "text": "is fr FRP if you look for f FRP online you will might not find the ref the",
    "start": "997319",
    "end": "1003880"
  },
  {
    "start": "998000",
    "end": "1223000"
  },
  {
    "text": "right reference of the at first you will find final resting place that's that's true in",
    "start": "1003880",
    "end": "1009199"
  },
  {
    "text": "Google uh fantasy role playing that's not what I'm talking about I'm talking",
    "start": "1009199",
    "end": "1014319"
  },
  {
    "text": "about functional reactive programming and there is a very cool um concept that",
    "start": "1014319",
    "end": "1021839"
  },
  {
    "text": "or image visual image that um shows reactive programming in a",
    "start": "1021839",
    "end": "1028480"
  },
  {
    "text": "second how many of you have ever used a spreadsheet most of you obviously we all",
    "start": "1028480",
    "end": "1036280"
  },
  {
    "text": "have um in Excel you might think whatever you think in Excel or whatever spread sheet",
    "start": "1036280",
    "end": "1042678"
  },
  {
    "text": "you use you might think anything about that program but Excel got one thing",
    "start": "1042679",
    "end": "1048000"
  },
  {
    "text": "amazingly right first first of all is the most people say that JavaScript is the most extended programming platform",
    "start": "1048000",
    "end": "1054280"
  },
  {
    "text": "in the world because all the browsers run it uh no JS everything starting to",
    "start": "1054280",
    "end": "1059440"
  },
  {
    "text": "move to JavaScript no the most exciting programming platform in the world is Excel everyone programs in Excel my dad",
    "start": "1059440",
    "end": "1066080"
  },
  {
    "text": "programs in Excel just puts formulas and formulas and things work and as a",
    "start": "1066080",
    "end": "1071679"
  },
  {
    "text": "developer you might make fun of it but Excel has one amazing feature",
    "start": "1071679",
    "end": "1079520"
  },
  {
    "text": "which is this in Excel you change",
    "start": "1079520",
    "end": "1087320"
  },
  {
    "text": "values and a value that has a formula referring to these values changes automatically the C uh cell has just the",
    "start": "1087320",
    "end": "1096640"
  },
  {
    "text": "I think the addition or the multiplication of A and B whenever I change a or whenever I change b c",
    "start": "1096640",
    "end": "1102440"
  },
  {
    "text": "changes I don't have to tell Excel uh when A and B changes uh a",
    "start": "1102440",
    "end": "1108799"
  },
  {
    "text": "changes or be changes in any case update yourself by adding this to result nobody has to do that you just know that you",
    "start": "1108799",
    "end": "1115159"
  },
  {
    "text": "just put a plus b u whenever you change it it works nobody instructed Excel",
    "start": "1115159",
    "end": "1120280"
  },
  {
    "text": "nobody registered an event nobody um told the program step by step what to do",
    "start": "1120280",
    "end": "1126159"
  },
  {
    "text": "when sales change and that's very easy to grasp um imagine that Excel didn't work",
    "start": "1126159",
    "end": "1133159"
  },
  {
    "text": "that way nobody will use it if you had to do any programming that's why it's so popular",
    "start": "1133159",
    "end": "1140720"
  },
  {
    "text": "um that's not what I wanted to do yeah so why don't we why don't we program",
    "start": "1143520",
    "end": "1150039"
  },
  {
    "text": "like this why don't we at least have the possibility to program like this why do we have to pain takingly tell everything",
    "start": "1150039",
    "end": "1157360"
  },
  {
    "text": "that's going to happen deal with every race condition every Edge case that exists and only then our program kind of",
    "start": "1157360",
    "end": "1164919"
  },
  {
    "text": "works and whenever I want to add a feature it's more painstaking ly um",
    "start": "1164919",
    "end": "1170120"
  },
  {
    "text": "adding stuff to the code so what do we want to do and one of the",
    "start": "1170120",
    "end": "1176679"
  },
  {
    "text": "hardest things in computer science right now um is deal with values that change",
    "start": "1176679",
    "end": "1182720"
  },
  {
    "text": "over time properly without complications RX this is the symbol this",
    "start": "1182720",
    "end": "1189919"
  },
  {
    "text": "is the logo for RX RX is a platform that was made by Microsoft amazingly enough",
    "start": "1189919",
    "end": "1196960"
  },
  {
    "text": "um sometimes it's easy to for get them some good stuff comes out from Microsoft still um RX was made by Microsoft open",
    "start": "1196960",
    "end": "1204559"
  },
  {
    "text": "Technologies and open source and the cool thing is that here I'm talking about rxjs JavaScript but almost for",
    "start": "1204559",
    "end": "1210880"
  },
  {
    "text": "every language there is an RX there's an RX for Java for net for Ruby for Lua for",
    "start": "1210880",
    "end": "1218480"
  },
  {
    "text": "all kinds of all kinds of languages um anx helps us compose a synchronous",
    "start": "1218480",
    "end": "1225520"
  },
  {
    "text": "and event based programs let's take our previous",
    "start": "1225520",
    "end": "1232559"
  },
  {
    "text": "example there's three things I wanted to do with my clicks I wanted to limit them",
    "start": "1232559",
    "end": "1237640"
  },
  {
    "text": "to 10 clicks limit the whole thing to 10 clicks I don't want anything else I just want the first 10 I want to filter them by coordinate",
    "start": "1237640",
    "end": "1246039"
  },
  {
    "text": "and I want to eventually print the coordinates this is our previous code this is how you do it with a",
    "start": "1246039",
    "end": "1253120"
  },
  {
    "text": "Rex in our re we say from the event click in the document",
    "start": "1253120",
    "end": "1259440"
  },
  {
    "text": "filter by these coordinates take 10 of these",
    "start": "1259440",
    "end": "1264919"
  },
  {
    "text": "results and once is done subscribe what is happening is the first",
    "start": "1264919",
    "end": "1271919"
  },
  {
    "text": "line creates an observable which I will get back to it",
    "start": "1271919",
    "end": "1277360"
  },
  {
    "text": "in a moment of of what about what it is from that observable we filter so we",
    "start": "1277360",
    "end": "1284200"
  },
  {
    "text": "create another observable that contains the filtering from the first one create a final observable taking only the first",
    "start": "1284200",
    "end": "1291120"
  },
  {
    "text": "10 results and actually kick off the competition so until I subscribe nothing",
    "start": "1291120",
    "end": "1296720"
  },
  {
    "text": "happens I'm just declaring what I want to happen when there is a",
    "start": "1296720",
    "end": "1302080"
  },
  {
    "text": "subscription now RX has two main types there's other types but they rely on those or I or are specializations of",
    "start": "1302080",
    "end": "1309799"
  },
  {
    "start": "1304000",
    "end": "1370000"
  },
  {
    "text": "these two there's an observable and un observable you can think of of the",
    "start": "1309799",
    "end": "1317600"
  },
  {
    "text": "observable class as a push equivalent to itable so an an iterator in other languages in",
    "start": "1317600",
    "end": "1324039"
  },
  {
    "text": "JavaScript we still don't have them but in other languages just an object which to which you ask next item next item",
    "start": "1324039",
    "end": "1331039"
  },
  {
    "text": "next item an item uh this this iterator contains a collection you ask for the next item until it's it says like uh",
    "start": "1331039",
    "end": "1338679"
  },
  {
    "text": "there's no more items and then it's completed or throws an error and the in",
    "start": "1338679",
    "end": "1343919"
  },
  {
    "text": "the meantime um the observable is like this but",
    "start": "1343919",
    "end": "1349480"
  },
  {
    "text": "instead of pulling from the uh uh from The Collection it gets the items pushed",
    "start": "1349480",
    "end": "1356880"
  },
  {
    "text": "so the observable would push to The Observer whenever it has items whenever",
    "start": "1356880",
    "end": "1362080"
  },
  {
    "text": "it receive a request whenever the user clicks it will push to The Observer The Observer doesn't have to do anything",
    "start": "1362080",
    "end": "1367120"
  },
  {
    "text": "just has to wait there's only three methods on an observer which is on next on error and",
    "start": "1367120",
    "end": "1374840"
  },
  {
    "text": "un complete same same kind of methods as as in iable but with the particularity that",
    "start": "1374840",
    "end": "1381799"
  },
  {
    "text": "they get caught so the observable type adds the",
    "start": "1381799",
    "end": "1387039"
  },
  {
    "text": "ability for the producer to signal to the consumer that there is no more data",
    "start": "1387039",
    "end": "1392240"
  },
  {
    "text": "available in that in that regard you can think of the observable it's a very simple concept you can think of the",
    "start": "1392240",
    "end": "1398320"
  },
  {
    "start": "1393000",
    "end": "1434000"
  },
  {
    "text": "observable as a as a fusion between iterators and the Observer pattern the",
    "start": "1398320",
    "end": "1404159"
  },
  {
    "text": "good old Observer pattern right Observer pattern you just have one object that has all these",
    "start": "1404159",
    "end": "1409960"
  },
  {
    "text": "listeners whenever something happens call the listeners but the Observer pattern doesn't have the concept of",
    "start": "1409960",
    "end": "1415840"
  },
  {
    "text": "uncomplete and on error it just keeps passing stuff the iterator has this but",
    "start": "1415840",
    "end": "1421880"
  },
  {
    "text": "what it doesn't have is the ability to push values to the customers the customers has have to add uh have to ask",
    "start": "1421880",
    "end": "1428520"
  },
  {
    "text": "for them",
    "start": "1428520",
    "end": "1433880"
  },
  {
    "text": "so this a little bit more code I try to keep the code simple",
    "start": "1433880",
    "end": "1440440"
  },
  {
    "start": "1434000",
    "end": "1898000"
  },
  {
    "text": "simple rxjs um has a lot of operators or",
    "start": "1442440",
    "end": "1449279"
  },
  {
    "text": "methods here I I show range you have all kinds of uh of tools to manipulate",
    "start": "1449279",
    "end": "1455520"
  },
  {
    "text": "create and transform sequences in that case it's very simple uh I make a range from 1 to five and I",
    "start": "1455520",
    "end": "1462799"
  },
  {
    "text": "subscribe to this uh and if you see in the Subscribe method I pass",
    "start": "1462799",
    "end": "1469000"
  },
  {
    "text": "uh the UN next function which is the first one on error second one and the third one is completed of course no",
    "start": "1469000",
    "end": "1475640"
  },
  {
    "text": "errors will happen so the output I get is all the values of the range and then",
    "start": "1475640",
    "end": "1481039"
  },
  {
    "text": "uncompleted so this is exactly what we expect the important part here is I am",
    "start": "1481039",
    "end": "1487320"
  },
  {
    "text": "assigning this to a variable from this",
    "start": "1487320",
    "end": "1492919"
  },
  {
    "text": "variable I can pass it I can clone it I can create extra observables that don't modify the par this variable is final",
    "start": "1492919",
    "end": "1500080"
  },
  {
    "text": "but at the same time it's a stream that changes whenever new values",
    "start": "1500080",
    "end": "1505559"
  },
  {
    "text": "come let's see something more interesting um this one is another",
    "start": "1505559",
    "end": "1512120"
  },
  {
    "text": "example I create uh an observable from a mouse mov EV I create",
    "start": "1512120",
    "end": "1521159"
  },
  {
    "text": "another observable from this mouse move event but this one Maps uh the event to",
    "start": "1521159",
    "end": "1527120"
  },
  {
    "text": "an object with a coordinates I create yet another observable called Mouse side which Maps the first Mouse",
    "start": "1527120",
    "end": "1535919"
  },
  {
    "text": "move to uh it checks the coordinate and outputs either right or",
    "start": "1535919",
    "end": "1542480"
  },
  {
    "text": "left and then I subscribe to only the coordinates this will output objects",
    "start": "1542480",
    "end": "1548880"
  },
  {
    "text": "with coordinates this will subscribe to the mouse side this will output um right",
    "start": "1548880",
    "end": "1554799"
  },
  {
    "text": "or left depending on wherever I I move the mouse and this will be updated real",
    "start": "1554799",
    "end": "1560279"
  },
  {
    "text": "time these two observables the three of them will be completely independent they",
    "start": "1560279",
    "end": "1565480"
  },
  {
    "text": "will update I don't have to do anything else to lock all these coordinates and to do all this stuff with the mouse",
    "start": "1565480",
    "end": "1571919"
  },
  {
    "text": "now real world example or kind this this might look like a lot of code but it's",
    "start": "1571919",
    "end": "1577720"
  },
  {
    "text": "very simple the first function just retrieves uh creates an observable that",
    "start": "1577720",
    "end": "1584320"
  },
  {
    "text": "retrieves a term from the Wikipedia you see I have the URL so you pass it a term",
    "start": "1584320",
    "end": "1589480"
  },
  {
    "text": "like whatever Amsterdam it and I create an observable that has instead of the",
    "start": "1589480",
    "end": "1594679"
  },
  {
    "text": "methods we've seen it has getjson P request um this is some normal query",
    "start": "1594679",
    "end": "1601200"
  },
  {
    "text": "selector stuff now this is pretty cool keop will contain the stream of",
    "start": "1601200",
    "end": "1607679"
  },
  {
    "text": "events of keop but not only that I will get the target value so the value of the",
    "start": "1607679",
    "end": "1613640"
  },
  {
    "text": "input field where the text is uh longer than",
    "start": "1613640",
    "end": "1619799"
  },
  {
    "text": "two I don't want to retrieve one character I will throttle 200",
    "start": "1619799",
    "end": "1625039"
  },
  {
    "text": "milliseconds so that the user if a user types very fast uh I don't send a",
    "start": "1625039",
    "end": "1630159"
  },
  {
    "text": "million requests to Wikipedia um and I will only accept",
    "start": "1630159",
    "end": "1635799"
  },
  {
    "text": "distinct values so if I move the Cur the cursor Keys which don't change the value of the input box I don't want to send",
    "start": "1635799",
    "end": "1642679"
  },
  {
    "text": "new requests so in three lines we are filtering we're throttling throttling is",
    "start": "1642679",
    "end": "1650159"
  },
  {
    "text": "hard in in real JavaScript um and I will only accept distinct",
    "start": "1650159",
    "end": "1655399"
  },
  {
    "text": "values and now on the other on the other hand so here I have I get the input of the user on the other hand I get on key",
    "start": "1655399",
    "end": "1662960"
  },
  {
    "text": "up um so I subscribe to this key up",
    "start": "1662960",
    "end": "1668440"
  },
  {
    "text": "event and that we call it Searcher which is will be another",
    "start": "1668440",
    "end": "1673840"
  },
  {
    "text": "observable um we map it we map each value to the actual Wikipedia retrieval",
    "start": "1673840",
    "end": "1680960"
  },
  {
    "text": "so all this look synchronous but it's highly highly highly synchronous this um",
    "start": "1680960",
    "end": "1686559"
  },
  {
    "text": "registering the keys the key apps from the user searching in Wikipedia then we have another method called switch latest",
    "start": "1686559",
    "end": "1693399"
  },
  {
    "text": "which only will accept the latest result that arrives what I don't want to is to",
    "start": "1693399",
    "end": "1699600"
  },
  {
    "text": "you know some of the terms um it happens with the synchronous and that's one of the hard things I can keep typing on a",
    "start": "1699600",
    "end": "1706480"
  },
  {
    "text": "search box on the latest result is not the one that I was asking anymore so it",
    "start": "1706480",
    "end": "1713159"
  },
  {
    "text": "it's not the one that that it corresponds to the text I'm I'm putting like asynchronous is chaos so anything",
    "start": "1713159",
    "end": "1718640"
  },
  {
    "text": "can arrive right switch laters ensures that I only get the result that is the",
    "start": "1718640",
    "end": "1724320"
  },
  {
    "text": "last result that I want so whatever the text corresponds to all the others it are",
    "start": "1724320",
    "end": "1730360"
  },
  {
    "text": "discarded and I also just filter by um data length to which means where we have",
    "start": "1730360",
    "end": "1737000"
  },
  {
    "text": "data because that's uh it it returns an array we",
    "start": "1737000",
    "end": "1742399"
  },
  {
    "text": "subscribe and we we just do whatever we want with the code and that's the I have",
    "start": "1742399",
    "end": "1747640"
  },
  {
    "text": "the web page around but I don't like um demo effects so that's what happens um",
    "start": "1747640",
    "end": "1754840"
  },
  {
    "text": "this is and there's no more code like there's only the HTML code to make the input that's all to make real requests",
    "start": "1754840",
    "end": "1764039"
  },
  {
    "text": "to a Wikipedia real time throttled um uh distinct making sure that no mixed",
    "start": "1764039",
    "end": "1771000"
  },
  {
    "text": "results come another cool side effect comes from",
    "start": "1771000",
    "end": "1777000"
  },
  {
    "text": "the fact that I can abstract stream of events into variables and is",
    "start": "1777000",
    "end": "1783159"
  },
  {
    "text": "that this code usually or what this code does will be held to",
    "start": "1783159",
    "end": "1788760"
  },
  {
    "text": "test asynchronous code is very hard to test people start making mockups with",
    "start": "1788760",
    "end": "1794840"
  },
  {
    "text": "set timeouts and stuff like this it gets hairy very very very quickly um and",
    "start": "1794840",
    "end": "1800960"
  },
  {
    "text": "almost always there's bugs in the test as well so the cool thing is that you see the",
    "start": "1800960",
    "end": "1807360"
  },
  {
    "text": "first term search Wikipedia which does a real Json request I can just do that",
    "start": "1807360",
    "end": "1814360"
  },
  {
    "text": "just make up an array um but because it's unobservable everything will just",
    "start": "1814360",
    "end": "1819960"
  },
  {
    "text": "work and still keep a synchronous there's even another thing that I didn't I didn't put on the slides which are uh",
    "start": "1819960",
    "end": "1828080"
  },
  {
    "text": "I'm not talking about it on talk because it's it's more an advanced topic but there are",
    "start": "1828080",
    "end": "1833240"
  },
  {
    "text": "schedulers so what I can do is any observable I can attach an scheduler to",
    "start": "1833240",
    "end": "1840600"
  },
  {
    "text": "it and tell it how to behave in time so even if I have a for example if I do an",
    "start": "1840600",
    "end": "1846320"
  },
  {
    "text": "observable on an array the default scheduler is the current thread so it will go instantly like we expect",
    "start": "1846320",
    "end": "1853480"
  },
  {
    "text": "synchronously but maybe I don't want this array to behave um synchronously and I can attach a Schuler that",
    "start": "1853480",
    "end": "1859240"
  },
  {
    "text": "separates the results by 200 milliseconds I just attach auler 200",
    "start": "1859240",
    "end": "1864279"
  },
  {
    "text": "milliseconds and everything will be a synchronous then we have a test Schuler that simulates asynchronicity so in that",
    "start": "1864279",
    "end": "1872639"
  },
  {
    "text": "case in this from array the second parameter I could just",
    "start": "1872639",
    "end": "1878000"
  },
  {
    "text": "attach scheduler that delays that or that introduces I don't know random",
    "start": "1878000",
    "end": "1883679"
  },
  {
    "text": "asynchronicity and we could test for asynchronicity as well so testing becomes very easy no mocking no anything",
    "start": "1883679",
    "end": "1891639"
  },
  {
    "text": "just changing to a different scheduler and you can um test",
    "start": "1891639",
    "end": "1898039"
  },
  {
    "start": "1898000",
    "end": "1933000"
  },
  {
    "text": "anything we saw from array uh from event there's more and some that I",
    "start": "1898039",
    "end": "1904679"
  },
  {
    "text": "miss uh you can create observers from callbacks from note callbacks because of course you know all this is very nice",
    "start": "1904679",
    "end": "1911200"
  },
  {
    "text": "but you will have to deal with third party libraries you might want to test it on a project you have but you don't",
    "start": "1911200",
    "end": "1916919"
  },
  {
    "text": "want to convert anything to the rxs religion so you can convert two and from",
    "start": "1916919",
    "end": "1923440"
  },
  {
    "text": "um observables from not call from event patterns you can Define your own uh",
    "start": "1923440",
    "end": "1929159"
  },
  {
    "text": "observables all kinds of stuff um I want to show another example",
    "start": "1929159",
    "end": "1934960"
  },
  {
    "start": "1933000",
    "end": "2261000"
  },
  {
    "text": "that I think is pretty cool because until now we haven't seen much UI the input one was a",
    "start": "1934960",
    "end": "1941399"
  },
  {
    "text": "bit of UI but this one is really nice so",
    "start": "1941399",
    "end": "1947440"
  },
  {
    "text": "to programming uh reactive programming you have to change a little bit the way you think you have to think in",
    "start": "1947440",
    "end": "1953960"
  },
  {
    "text": "sequences so a mouse drag and drop is a sequence there's different",
    "start": "1953960",
    "end": "1961080"
  },
  {
    "text": "sequences there's the sequence of uh Mouse down there's the sequence of mouse",
    "start": "1961080",
    "end": "1967480"
  },
  {
    "text": "up and there's the sequence of mouse move these are three different sequences that happens in time like events",
    "start": "1967480",
    "end": "1974559"
  },
  {
    "text": "happening so I can make a I can make a your code that says",
    "start": "1974559",
    "end": "1981720"
  },
  {
    "text": "um you see here I subscrib to the events is not very",
    "start": "1981720",
    "end": "1987360"
  },
  {
    "text": "interesting Mouse drag is a mouse down select many is",
    "start": "1987360",
    "end": "1993679"
  },
  {
    "text": "basically uh a concat all in an array so imagine you have an array in arrays an array of arrays and it just normalizes",
    "start": "1993679",
    "end": "2000480"
  },
  {
    "text": "it so it makes it to an array with values uh takes out all the inner arrays",
    "start": "2000480",
    "end": "2006880"
  },
  {
    "text": "um select these are coordinate uh",
    "start": "2006880",
    "end": "2012039"
  },
  {
    "text": "calculations and then I can do like return the mouse",
    "start": "2012039",
    "end": "2017679"
  },
  {
    "text": "moves but take only the mouse move until there's a mouse so what is happening here I'm",
    "start": "2017679",
    "end": "2025440"
  },
  {
    "text": "telling I'm composing stream of events I'm saying like subscribe to Mouse down",
    "start": "2025440",
    "end": "2030919"
  },
  {
    "text": "whenever a mouse down happens inside the mouse Z event um check the mouse moves",
    "start": "2030919",
    "end": "2037919"
  },
  {
    "text": "and only do all this until there's a mouse app so take until Mouse app",
    "start": "2037919",
    "end": "2044120"
  },
  {
    "text": "remember that before we use take to take values to take amount of clicks we can",
    "start": "2044120",
    "end": "2049240"
  },
  {
    "text": "also use it to take Mouse up events because both are observables so when you think of in",
    "start": "2049240",
    "end": "2056800"
  },
  {
    "text": "sequences code becomes that easy and that code what that code does is oops",
    "start": "2056800",
    "end": "2063280"
  },
  {
    "text": "the following no here let me see",
    "start": "2063280",
    "end": "2069040"
  },
  {
    "text": "yeah I have it here doesn't fit very well the code You' seen is where is my mouse here it's this",
    "start": "2069040",
    "end": "2076320"
  },
  {
    "text": "it's a bit string but uh we have the M drug defin here",
    "start": "2076320",
    "end": "2083720"
  },
  {
    "text": "Mouse move take count to Mouse app what happens is that I just I just have",
    "start": "2083720",
    "end": "2089040"
  },
  {
    "text": "normal drag cool thing is have normal drag",
    "start": "2089040",
    "end": "2095118"
  },
  {
    "text": "without where is my mouse here there is no",
    "start": "2095119",
    "end": "2100680"
  },
  {
    "text": "State there is no State outside mous dve I'm not keeping my variables",
    "start": "2100680",
    "end": "2107240"
  },
  {
    "text": "around uh outside the closures to control what when is the user clicking",
    "start": "2107240",
    "end": "2112720"
  },
  {
    "text": "when is the user um unclicking and this kind of stuff there's no State it's all",
    "start": "2112720",
    "end": "2118160"
  },
  {
    "text": "functions and functions and observables being passed I don't have to unscribe I",
    "start": "2118160",
    "end": "2123960"
  },
  {
    "text": "don't have to do anything like that I just deal with sequences rxjs does everything in the",
    "start": "2123960",
    "end": "2131880"
  },
  {
    "text": "background um one thing I get I always get asked is uh about performance",
    "start": "2132680",
    "end": "2141480"
  },
  {
    "text": "as a JavaScript developer you probably know this is the a normal array example no observables here um normal JavaScript",
    "start": "2141480",
    "end": "2147880"
  },
  {
    "text": "whenever you do that this is very easy or very nice with 10 items but what's",
    "start": "2147880",
    "end": "2153640"
  },
  {
    "text": "happening here really is that so the first filter",
    "start": "2153640",
    "end": "2158839"
  },
  {
    "text": "function uh Loops through the whole array the map function Loops again and",
    "start": "2158839",
    "end": "2166119"
  },
  {
    "text": "the final for each to print the the the item Loops again so if instead of 10",
    "start": "2166119",
    "end": "2172040"
  },
  {
    "text": "items I have 100 Millions items um that is a performance bottleneck so whenever",
    "start": "2172040",
    "end": "2178720"
  },
  {
    "text": "people see this observable stuff that everything everything everything is a sequence that we iterate on um that's",
    "start": "2178720",
    "end": "2184880"
  },
  {
    "text": "the first question like how performant is that that can be that can be good and",
    "start": "2184880",
    "end": "2190240"
  },
  {
    "text": "whenever this happens I take my slide my cat slide out this cat is pushing a",
    "start": "2190240",
    "end": "2195760"
  },
  {
    "text": "watermelon out of a lake and your argument is invalid um what happens here this this",
    "start": "2195760",
    "end": "2202400"
  },
  {
    "text": "is the observable example and as I said before if you didn't catch it we do we convert it from",
    "start": "2202400",
    "end": "2209079"
  },
  {
    "text": "the array we attach a filter function we attach a map that multiplies we attach",
    "start": "2209079",
    "end": "2215359"
  },
  {
    "text": "another map that composes a string but all this have has not executed",
    "start": "2215359",
    "end": "2222119"
  },
  {
    "text": "anything yet it's all declarative the only thing that executes is subscribed but what you have done in",
    "start": "2222119",
    "end": "2229480"
  },
  {
    "text": "this until up up until the Subscribe that rxs has done in the background is",
    "start": "2229480",
    "end": "2234839"
  },
  {
    "text": "composed internally so that there's only one Loop and this one Loop executes all",
    "start": "2234839",
    "end": "2240880"
  },
  {
    "text": "the instructions so it's very very very very very fast uh as fast as looping one",
    "start": "2240880",
    "end": "2246839"
  },
  {
    "text": "time with the overhead head of calling functions but that doesn't really count",
    "start": "2246839",
    "end": "2253200"
  },
  {
    "text": "uh so it doesn't yeah it doesn't process the items for each iterative method",
    "start": "2253200",
    "end": "2260400"
  },
  {
    "text": "um the things to take away are that reactive programming allow you to con",
    "start": "2260760",
    "end": "2269440"
  },
  {
    "start": "2261000",
    "end": "2496000"
  },
  {
    "text": "make the events into first class um give events the the the power that they",
    "start": "2269440",
    "end": "2275800"
  },
  {
    "text": "require events are nice but get messy what we want is to be able to pass stream of events around easily iterate",
    "start": "2275800",
    "end": "2283359"
  },
  {
    "text": "over them transform them um we want to compose them as well want to just filter",
    "start": "2283359",
    "end": "2289560"
  },
  {
    "text": "map do this kind of stuff over all kinds of of of event streams and encapsulate",
    "start": "2289560",
    "end": "2295000"
  },
  {
    "text": "we don't have state we want things to be on their own uh and not manipulate State",
    "start": "2295000",
    "end": "2300760"
  },
  {
    "text": "events inherently whenever you use events you're using State there's no way around it either that or you you're",
    "start": "2300760",
    "end": "2307599"
  },
  {
    "text": "doing very little with event like console logging something um you're always uh side effecting that's bad",
    "start": "2307599",
    "end": "2315560"
  },
  {
    "text": "especially in large applications now who is using that",
    "start": "2315560",
    "end": "2321960"
  },
  {
    "text": "there's uh there's a lot of buz with uh reactive programming but most of the",
    "start": "2321960",
    "end": "2327280"
  },
  {
    "text": "Frameworks that are there are pretty um new not that much used in",
    "start": "2327280",
    "end": "2334680"
  },
  {
    "text": "production and kind of experimental there's cool stuff uh there's Facebook react is kind of",
    "start": "2334680",
    "end": "2339839"
  },
  {
    "text": "reactive but um not really the same concept um there's bacon JS that's our",
    "start": "2339839",
    "end": "2345960"
  },
  {
    "text": "FRP uh framework same as the rxjs some uh differences in the philosophy it's",
    "start": "2345960",
    "end": "2352599"
  },
  {
    "text": "pretty new the cool thing about rxjs is that it's based on RX um Netflix the",
    "start": "2352599",
    "end": "2358520"
  },
  {
    "text": "whole Netflix stock now the server is running RX Java on the client is running rxjs every if you use Netflix that's a",
    "start": "2358520",
    "end": "2366400"
  },
  {
    "text": "Rex of happening uh Microsoft obviously they created it they use it on all kinds of projects SoundCloud is using it",
    "start": "2366400",
    "end": "2373000"
  },
  {
    "text": "GitHub uh uses RX Coco for their Mac app and rx.net for their Windows app so it's",
    "start": "2373000",
    "end": "2380640"
  },
  {
    "text": "very solid it's very stable real companies are using it and they are benefiting from It Well everybody's",
    "start": "2380640",
    "end": "2386359"
  },
  {
    "text": "dealing with crazy asynchronous models um and trying to tame the asynchronicity",
    "start": "2386359",
    "end": "2393680"
  },
  {
    "text": "of it all um rxs makes it much much easier",
    "start": "2393680",
    "end": "2399160"
  },
  {
    "text": "and I think that's all I've got for today so thank you very",
    "start": "2399160",
    "end": "2405640"
  },
  {
    "text": "much I don't know I don't know if there's any questions yes the question is how would uh uis or MVC for example",
    "start": "2408440",
    "end": "2415960"
  },
  {
    "text": "work with our XS um the way the way to think about stuff is uh what is reacting in the",
    "start": "2415960",
    "end": "2423920"
  },
  {
    "text": "model view controller uh the view is reacting probably the controller is more",
    "start": "2423920",
    "end": "2429839"
  },
  {
    "text": "producing values so basically the view subscribes to controller in that case um",
    "start": "2429839",
    "end": "2437400"
  },
  {
    "text": "controllers are observables whatever I don't know um the user makes makes the",
    "start": "2437400",
    "end": "2443240"
  },
  {
    "text": "model yeah the controller will the model will be an observable the controller",
    "start": "2443240",
    "end": "2449079"
  },
  {
    "text": "will be an OB will observe the model and the view will observe the controller that's how it should work then what I",
    "start": "2449079",
    "end": "2454880"
  },
  {
    "text": "didn't talk about in The Talk there's uh another kind of uh entities called",
    "start": "2454880",
    "end": "2460240"
  },
  {
    "text": "subjects which inherit from both observable and obser and observers so they can do both at the same time then",
    "start": "2460240",
    "end": "2467000"
  },
  {
    "text": "the model in that case would be one of those because it will uh the view can change the model so it could be will be",
    "start": "2467000",
    "end": "2473960"
  },
  {
    "text": "kind of a circle of listening and reacting to each other I think that's",
    "start": "2473960",
    "end": "2479520"
  },
  {
    "text": "from the top of my head um right now all right then I think that's it thank you very much",
    "start": "2479520",
    "end": "2487520"
  },
  {
    "text": "[Music]",
    "start": "2487680",
    "end": "2496059"
  }
]