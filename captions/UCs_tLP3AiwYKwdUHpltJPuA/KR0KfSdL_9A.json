[
  {
    "text": "thank you everybody for coming I know there's some really good talks in the other rooms you can tell because there's a lot of people at",
    "start": "7040",
    "end": "14040"
  },
  {
    "text": "those you'll have to go or compare notes with someone else I'll let some of you",
    "start": "14559",
    "end": "20000"
  },
  {
    "text": "know me some of you don't I have a job it's called IBM Java uh but I also do",
    "start": "20000",
    "end": "26160"
  },
  {
    "text": "JavaScript so if you if you hate Java and love JavaScript I'm Your Man and I do other things too including other run",
    "start": "26160",
    "end": "32558"
  },
  {
    "text": "times which I'll maybe talk about if I get to it I've been doing virtual machines for a long time um I'm",
    "start": "32559",
    "end": "39840"
  },
  {
    "text": "j9 and things like Eclipse but I have to confess up front I'm moving to Java talk",
    "start": "39840",
    "end": "46399"
  },
  {
    "text": "but small talk still the love of my life so there you go I didn't submit an",
    "start": "46399",
    "end": "52320"
  },
  {
    "text": "abstract I kept being harassed 87 Times by George and H and uh so last night I",
    "start": "52320",
    "end": "60039"
  },
  {
    "text": "wrote one as you can imagine actually I wrote this on Mother's Day to be honest um my mom asked me what are you doing in",
    "start": "60039",
    "end": "65280"
  },
  {
    "text": "Chicago and I said I'm talking about you she was all freaked out I said you are a virtual machine you protect me from",
    "start": "65280",
    "end": "72600"
  },
  {
    "text": "unsafe pointers and clean up after me like the garbage collector does and here's where I am sorry Mom I'm a VM",
    "start": "72600",
    "end": "80880"
  },
  {
    "text": "guy however moms don't know best always we grow up so there's some things I like to talk about that are not quite mom",
    "start": "80880",
    "end": "86720"
  },
  {
    "text": "approved all right so today we're going to talk about virtual machine and I'm going to talk about the one I'm familiar",
    "start": "86720",
    "end": "92280"
  },
  {
    "text": "with so j9 uh that sort of sets the Baseline of what I would say current generation VMS and then I was going to",
    "start": "92280",
    "end": "98840"
  },
  {
    "text": "talk about what's happening in some of the hardware things and some of the stuff we've done to address those issues",
    "start": "98840",
    "end": "103880"
  },
  {
    "text": "and where Java could go and then we can discuss the bar so if you don't who",
    "start": "103880",
    "end": "111320"
  },
  {
    "text": "knows what Jay n is who who loves j9 come on there's a lover of j9 right to",
    "start": "111320",
    "end": "118439"
  },
  {
    "text": "the front you win a prize the rest of you out uh it's a design from scratch by IBM",
    "start": "118439",
    "end": "126360"
  },
  {
    "text": "high performance High reliabil reliability everyone says those things we mean it so that's good uh it scales",
    "start": "126360",
    "end": "133239"
  },
  {
    "text": "it started as an embedded VM and it's uh super highly configurable we've got a VM called j9 you know everything that",
    "start": "133239",
    "end": "140720"
  },
  {
    "text": "modern VMS have it's it's got plus more so and I was going to talk about some of those things and show you some pictures",
    "start": "140720",
    "end": "146440"
  },
  {
    "text": "and things like that this is known as the VM is a VM a VM chart okay uh what",
    "start": "146440",
    "end": "152200"
  },
  {
    "text": "people don't know is that j9 will run all of those libraries the same VM will run for example sc6 sc7 sc5 if you like",
    "start": "152200",
    "end": "159080"
  },
  {
    "text": "plug and play we don't support all those configurations because it be Madness but a VM literally is a VM as a VM we'll run",
    "start": "159080",
    "end": "165040"
  },
  {
    "text": "midp we'll run CDC and embedded it's very configurable we can shrink it to",
    "start": "165040",
    "end": "170680"
  },
  {
    "text": "few 100K and we can also ship it in its full figured form and all of those uh are typically",
    "start": "170680",
    "end": "179280"
  },
  {
    "text": "uh tradeoff offs either speed space or some particular functionality that's not needed for embedded and things like that",
    "start": "179280",
    "end": "184400"
  },
  {
    "text": "and it's you're pretty vanilla uh I would say I call call it",
    "start": "184400",
    "end": "189560"
  },
  {
    "text": "van vanilla design because a lot of designs look like this they have pluggable components like jits they have pluggable gc's we have many I'll tell",
    "start": "189560",
    "end": "196239"
  },
  {
    "text": "you about a few of them we have pluggable tools so a lot of this stuff is composable so j9 is one of these VMS",
    "start": "196239",
    "end": "203440"
  },
  {
    "text": "that shrinks or grows depending on the need of what you need to run okay it's got a bunch of portability stuff so that",
    "start": "203440",
    "end": "209040"
  },
  {
    "text": "we can run on uh we've done pretty much every processor and platform known to man we don't support them all because we don't",
    "start": "209040",
    "end": "216200"
  },
  {
    "text": "have products on all those it's just expensive but it's a very portable very fast virtual machine and that's part for",
    "start": "216200",
    "end": "222840"
  },
  {
    "text": "the course these days it has this WOW hard to see very funny colored set of",
    "start": "222840",
    "end": "229840"
  },
  {
    "text": "things but we have a compiler called tester Roa um named after the guy with the red hair who works on it and it's I",
    "start": "229840",
    "end": "237519"
  },
  {
    "text": "would say one of the more aggressive optimizing Java compilers on the planet",
    "start": "237519",
    "end": "243360"
  },
  {
    "text": "uh it has a lot of what we call intermediate representation generators um it has a",
    "start": "243360",
    "end": "249680"
  },
  {
    "text": "ton of optimizations and depending on how big you'd like your jit to be and how much",
    "start": "249680",
    "end": "255439"
  },
  {
    "text": "performance you'd like you can mix and match Andor from our perspective take out optimizations or add more so you can",
    "start": "255439",
    "end": "262079"
  },
  {
    "text": "actually dial in the correct Target so we have uh smaller versions of tester Roa that are you know targeted at 500k",
    "start": "262079",
    "end": "268639"
  },
  {
    "text": "systems versus the full end for the high server and all the the only difference is some of the optimizations you choose",
    "start": "268639",
    "end": "275560"
  },
  {
    "text": "to include in the build which are turned on or off by Flags you just don't include them so you may not do some of",
    "start": "275560",
    "end": "281000"
  },
  {
    "text": "the expensive ones because you can't afford it on an embedded system but you certainly may certainly want to do that on a server so you can maybe read that",
    "start": "281000",
    "end": "288680"
  },
  {
    "text": "hopefully uh but it's it's a fairly aggressive just in time compiler and it",
    "start": "288680",
    "end": "294759"
  },
  {
    "text": "has these five phases um in in addition to interpretation so",
    "start": "294759",
    "end": "300400"
  },
  {
    "text": "um everyone does this right everyone in the Java world does this well maybe not five levels of optimization but so we",
    "start": "300400",
    "end": "307919"
  },
  {
    "text": "have a quite a quite an aggressive set of optimizations you start with an interpreter it does profiling it tells",
    "start": "307919",
    "end": "314440"
  },
  {
    "text": "you what's hot you may go to cold which is just fairly basic you can uh skip to",
    "start": "314440",
    "end": "322160"
  },
  {
    "text": "warm which is a higher level of optimization and then from warm you can go hot profile or scorching and so the",
    "start": "322160",
    "end": "329840"
  },
  {
    "text": "more you run the more information we have about what you're running and what we should",
    "start": "329840",
    "end": "335240"
  },
  {
    "text": "optimize and when you run it enough times we'll flip you into what we would call very aggressive compilations you",
    "start": "335240",
    "end": "341000"
  },
  {
    "text": "can actually see that over time watching an app it'll take this time and then you'll see some optimizations kick and it'll go down and go down um and then of",
    "start": "341000",
    "end": "348880"
  },
  {
    "text": "course we can decompile and recompile when we make mistakes okay so that's a",
    "start": "348880",
    "end": "355400"
  },
  {
    "text": "pretty much I would say yet again standard for Java less so for other languages that aren't quite as mature in",
    "start": "355400",
    "end": "360600"
  },
  {
    "text": "terms of their implementations um profiling is interesting because",
    "start": "360600",
    "end": "367280"
  },
  {
    "text": "today's technology it's a thread that sort of sits on the sides rummages through your stacks for a while sees",
    "start": "367280",
    "end": "372759"
  },
  {
    "text": "what's important and then feeds the jit and says uhuh you're doing it wrong flip that into a better optimization than you were doing last time okay and it's very",
    "start": "372759",
    "end": "380000"
  },
  {
    "text": "very low overhead and then scorching of course is the uh you know the highest",
    "start": "380000",
    "end": "385400"
  },
  {
    "text": "fastest so what does that actually mean um I found an old chart so I put it up",
    "start": "385400",
    "end": "390960"
  },
  {
    "text": "here no one ever publishes or shows this kind of stuff but here's some pretty not Java code it's kind of C code but Java",
    "start": "390960",
    "end": "398039"
  },
  {
    "text": "syntax I guess loops and and some some math and stuff like that but if you look at the progression through the cold",
    "start": "398039",
    "end": "403720"
  },
  {
    "text": "through scorching you'll see uh cold smallest amount of code you could tweet",
    "start": "403720",
    "end": "408800"
  },
  {
    "text": "that amount of code actually it fits within the 140 character so that's pretty cool um doesn't take very long to",
    "start": "408800",
    "end": "414520"
  },
  {
    "text": "compile but 2 milliseconds is a lot of time but you'll see that the wall time is you know",
    "start": "414520",
    "end": "419919"
  },
  {
    "text": "so that'll be like uh 6 or 7% of your overall time will be comp compilation time at cold and significantly more perc",
    "start": "419919",
    "end": "427720"
  },
  {
    "text": "of your time for compilation time at scorching so you don't want to spend a lot of time doing scorching but you want to find the right stuff and as you can",
    "start": "427720",
    "end": "434240"
  },
  {
    "text": "see you can go about five or Sixx based on on this particular example which is",
    "start": "434240",
    "end": "440840"
  },
  {
    "text": "you know remarkably not objectoriented so there's a but it's it's a simple example you can see",
    "start": "440840",
    "end": "446960"
  },
  {
    "text": "um this code will have about 30 5 or 36 bik codes generated this whole class and",
    "start": "446960",
    "end": "453919"
  },
  {
    "text": "one of them is a go-to statement so for those you at the go-to conference goto considered useful in",
    "start": "453919",
    "end": "461520"
  },
  {
    "text": "code that Java compiles frequently so don't I have a go-to considered harmful somewhere but it's not it's used all the",
    "start": "461520",
    "end": "468599"
  },
  {
    "text": "time um we have a whack of gc's gc's are good more",
    "start": "468599",
    "end": "476960"
  },
  {
    "text": "GCS are better so we have of course everyone does this now fully type accurate parallel partial concurrency at",
    "start": "476960",
    "end": "483400"
  },
  {
    "text": "a global level if Gil was here is he here he's somewhere else is matter so I",
    "start": "483400",
    "end": "488840"
  },
  {
    "text": "I told Gil I'd mentioned his name twice um there is a stop the world phase here I have to say that out loud or Gil would",
    "start": "488840",
    "end": "494599"
  },
  {
    "text": "say nasty things at the back or something but there's fairly aggressive parallelism in all modes on I'll tell",
    "start": "494599",
    "end": "501400"
  },
  {
    "text": "you a few about about some of these modes and we have a common code based across all our me and SE platforms so it's pretty nice to be able to get some",
    "start": "501400",
    "end": "508000"
  },
  {
    "text": "of these gc's in platforms you may not normally get so in embedded systems um I'm not going to talk about",
    "start": "508000",
    "end": "515560"
  },
  {
    "text": "every single one of these but if you have a particular workload we will have the GC for you that's good news so the",
    "start": "515560",
    "end": "522719"
  },
  {
    "text": "state-of-the-art says there's a lot of very high implementation high high quality high performance implementations",
    "start": "522719",
    "end": "529120"
  },
  {
    "text": "in garbage collection the bad news which you know VM implementers have to be a little bit honest here little is that",
    "start": "529120",
    "end": "535440"
  },
  {
    "text": "there's choices which make it more complex in some cases to choose how you going to to choose so you do have to",
    "start": "535440",
    "end": "540720"
  },
  {
    "text": "know how to choose and we have ways to to guide you to that so um so we have",
    "start": "540720",
    "end": "546240"
  },
  {
    "text": "the the basically stop the world get it done really quickly in parallel we have the concurrent version that says we're",
    "start": "546240",
    "end": "551279"
  },
  {
    "text": "going to do a little collection over time those are the top two we have a generational con collector which is the",
    "start": "551279",
    "end": "557040"
  },
  {
    "text": "best of a gener generational scavenger picks up all your garbage uh quickly if",
    "start": "557040",
    "end": "562480"
  },
  {
    "text": "you make a lot that's actually a really good thing um and then if your garbage or your objects live long enough",
    "start": "562480",
    "end": "569880"
  },
  {
    "text": "they end up in tenure space and that's done concurrently and then we have this temporarily Insanity called large Heap",
    "start": "569880",
    "end": "575839"
  },
  {
    "text": "multicore which has been replaced by a new larger Heap GC so subpool is dead and balanced is our new technology which",
    "start": "575839",
    "end": "582480"
  },
  {
    "text": "I am going to talk a little bit about so there's lots of gc's I tell you some technical details who wants to know",
    "start": "582480",
    "end": "588200"
  },
  {
    "text": "about garbage collection who's a garbage expert you an expert I saw I just my",
    "start": "588200",
    "end": "595880"
  },
  {
    "text": "hands my my hand goes down too slowly so we have a GC called balanced um the",
    "start": "595880",
    "end": "602680"
  },
  {
    "text": "the trend in gc's is to have region-based GCS so you can do partial collection and look at regions differently so we' designed this for our",
    "start": "602680",
    "end": "609959"
  },
  {
    "text": "next Generation VMS this is now in our current one so it's hard to say our current VM is the next gen but it's the",
    "start": "609959",
    "end": "616000"
  },
  {
    "text": "foundation for some interesting future optimizations so the first thing we can do is gather objects with common",
    "start": "616000",
    "end": "624880"
  },
  {
    "text": "properties so that's things like sibling that's two objects that don't actually point to each other but are pointed to",
    "start": "624880",
    "end": "631120"
  },
  {
    "text": "by someone else but are accessed together okay so they' be side by side uh parent child so that's two objects",
    "start": "631120",
    "end": "638160"
  },
  {
    "text": "that might get access by some pointer chasing you might put them in the same region for some reason um lifetime",
    "start": "638160",
    "end": "645920"
  },
  {
    "text": "birthplace and resting place um you might want to know where or how or when",
    "start": "645920",
    "end": "652120"
  },
  {
    "text": "an object gets born where it's going to die and probably how long it's going to live and those those kinds of things and",
    "start": "652120",
    "end": "658360"
  },
  {
    "text": "then there's this level of Readiness right is it no level of",
    "start": "658360",
    "end": "664000"
  },
  {
    "text": "Readiness as in it's pounded to heck by read writers is it partially read only like 90% of your objects are only read",
    "start": "664000",
    "end": "671880"
  },
  {
    "text": "from most of the time and were written to once or twice or maybe five times at most and that's it so mostly readon or",
    "start": "671880",
    "end": "678720"
  },
  {
    "text": "is it uh really readon and is it Hardware enforced Readiness so stuff like that so the reason you want to do",
    "start": "678720",
    "end": "686839"
  },
  {
    "text": "that placement improve your C performance if you put two objects side by side they're on the same cach line I",
    "start": "686839",
    "end": "692240"
  },
  {
    "text": "touch them both I touch one I the other one's available quickly allocation efficiency you wouldn't believe how",
    "start": "692240",
    "end": "699680"
  },
  {
    "text": "annoying it is to have an object that lives long enough to be tenured when you should have put it in the tenure space",
    "start": "699680",
    "end": "705040"
  },
  {
    "text": "initially so if you know an object is going to live a long time you'd want to do the right things and so this allow",
    "start": "705040",
    "end": "710760"
  },
  {
    "text": "this um allows us to decide where objects are and the interesting part about balance is we can actually move",
    "start": "710760",
    "end": "716600"
  },
  {
    "text": "them if we got it wrong very very quickly because we keep inter object reference across all regions pretty",
    "start": "716600",
    "end": "722800"
  },
  {
    "text": "fancy schmancy um and the other thing is the reduced working set we can actually",
    "start": "722800",
    "end": "728079"
  },
  {
    "text": "figure out that your objects aren't being used and put them in a page they'll get swapped and we can also figure out that they're being used a lot",
    "start": "728079",
    "end": "734560"
  },
  {
    "text": "and put them in a in hot hot pages and segregate those for better paging so for things like Cloud it's another useful",
    "start": "734560",
    "end": "741399"
  },
  {
    "text": "thing the other thing that this allows us to do is manage or I'm going to talk",
    "start": "741399",
    "end": "747959"
  },
  {
    "text": "too long on this one have to talk faster um is manage memory based on memory",
    "start": "747959",
    "end": "753760"
  },
  {
    "text": "characteristics so the memory could be fast or slow the memory could be uh memory mapped could be readon could be a",
    "start": "753760",
    "end": "760120"
  },
  {
    "text": "lot of different things so the memory itself will have different characteristics than the objects that you put in them and so our job there is",
    "start": "760120",
    "end": "765639"
  },
  {
    "text": "to place objects where the memory is uh the memory characteristics are best best",
    "start": "765639",
    "end": "771279"
  },
  {
    "text": "um best applicable to the way you're going to use the object so an example would be if you're going to well Numa is",
    "start": "771279",
    "end": "778440"
  },
  {
    "text": "a fine example because you'd like to access the memory from the fastest location from the processor that's accessing it so you need to know what",
    "start": "778440",
    "end": "785320"
  },
  {
    "text": "Numa regions attach to which processors and then if you do things like that you can get you know five six x x is in the",
    "start": "785320",
    "end": "792920"
  },
  {
    "text": "multiplier scalability on things like a power system because being close to your memory is super important okay and so we",
    "start": "792920",
    "end": "801440"
  },
  {
    "text": "can also in j i and optimize based on memory characteristics and things like tiered memory so you can have uh you",
    "start": "801440",
    "end": "808920"
  },
  {
    "text": "know SSD mapped into direct memory access now so you can actually put objects in there if you wanted to but",
    "start": "808920",
    "end": "814680"
  },
  {
    "text": "you better make them mostly readon because they're flash-based and it's going to cost you a lot to write to them",
    "start": "814680",
    "end": "819880"
  },
  {
    "text": "maybe not so much to read okay so things like that and like uh multi-core scale",
    "start": "819880",
    "end": "825360"
  },
  {
    "text": "and of course the region based GC is the very first use which is in production now is very large Heap GC so we are",
    "start": "825360",
    "end": "831440"
  },
  {
    "text": "productive every time we decide to pick on a region and empty it so results based GC is kind of nice to have",
    "start": "831440",
    "end": "839680"
  },
  {
    "text": "um and we have a soft real time version as well that'll actually allow you to do soft Real Time stuff so this is",
    "start": "839680",
    "end": "846160"
  },
  {
    "text": "something that I want to talk about a little bit because later you'll see some of the things we're doing and how it's",
    "start": "846160",
    "end": "852320"
  },
  {
    "text": "leveraging sort of hopefully the words will you'll remember what I said earlier okay uh we also do crazy things like",
    "start": "852320",
    "end": "858560"
  },
  {
    "text": "share code across address spaces kind of like a dll but since Java's Dynamic you",
    "start": "858560",
    "end": "863759"
  },
  {
    "text": "have to make that on the fly so Dynamic class sharing it's called the shared classes cach",
    "start": "863759",
    "end": "869560"
  },
  {
    "text": "we do two things that are interesting one we put your class code in there so you can save 50 100 megabytes per instance if you run a lot of them in the",
    "start": "869560",
    "end": "876440"
  },
  {
    "text": "cloud you're going to save memory the other thing we put in there is code so the previous guy compiled all your code",
    "start": "876440",
    "end": "882959"
  },
  {
    "text": "to start up we put it on dis next time the next Guy starts up reuses that code",
    "start": "882959",
    "end": "888560"
  },
  {
    "text": "saves 20 to 30% startup time mainly because you're not recompiling object again and again and again okay we call",
    "start": "888560",
    "end": "896759"
  },
  {
    "text": "this compile once run many Weare which is a play on the Run once right",
    "start": "896759",
    "end": "903759"
  },
  {
    "text": "once run anywhere I guess test everywhere um how does this translate I",
    "start": "903759",
    "end": "909320"
  },
  {
    "text": "don't have a lot of these so don't worry you're not going to see but every software release is been has been",
    "start": "909320",
    "end": "915600"
  },
  {
    "text": "driving 20 30 40% Improvement and uh this chart is was chosen because it",
    "start": "915600",
    "end": "920959"
  },
  {
    "text": "shows you the progression of Hardware which is the uh the lighter uh boxes and then the software",
    "start": "920959",
    "end": "927759"
  },
  {
    "text": "so directly comparable you'll see a 57% jump in Hardware performance another 40",
    "start": "927759",
    "end": "932920"
  },
  {
    "text": "by software identical on identical Hardware so we have a for for folks who",
    "start": "932920",
    "end": "938199"
  },
  {
    "text": "work in the Java world you cannot believe how crappy the old VMS were when",
    "start": "938199",
    "end": "943680"
  },
  {
    "text": "you until you see these charts you say oh yeah it's six times faster than it used to be com combined Hardware",
    "start": "943680",
    "end": "949680"
  },
  {
    "text": "software and uh you know a lot of that probably over half is the software only",
    "start": "949680",
    "end": "955199"
  },
  {
    "text": "improvements and this is true not just on system Z it's been it's been proven and true on on both x86 and power",
    "start": "955199",
    "end": "961319"
  },
  {
    "text": "continual investment in Java's done a really great job so the state-of-the-art is the best VMS on the planet are",
    "start": "961319",
    "end": "966360"
  },
  {
    "text": "currently Java VMS and ours is one of them and there's a few others that we could probably mention um but I can't",
    "start": "966360",
    "end": "971720"
  },
  {
    "text": "remember their names so I won't right George all right um tools we",
    "start": "971720",
    "end": "980279"
  },
  {
    "text": "in the Java world have an embarrassment of riches of tools the VM knows more about your application than you've ever seen in your entire life more stuff you",
    "start": "980279",
    "end": "986680"
  },
  {
    "text": "don't even want to know and so we have a Suite of tools lots of people have tools like this but Java's embarrassment of",
    "start": "986680",
    "end": "993279"
  },
  {
    "text": "riches here really great tools I think uh uh Charles was going to talk about tools for GC I guess we provide a bunch",
    "start": "993279",
    "end": "1000360"
  },
  {
    "text": "in Health Center and they're they're kind of nice what we do that's kind of unique is remember all those GC modes",
    "start": "1000360",
    "end": "1006120"
  },
  {
    "text": "how do you pick you run the tool it'll tell you so for example in this case",
    "start": "1006120",
    "end": "1011360"
  },
  {
    "text": "there's tuning recommendations uh one your your apps doing something abusive like calling system GC two your apps got",
    "start": "1011360",
    "end": "1018000"
  },
  {
    "text": "too much memory cuz we noticed your working set is Tiny three um maybe your you know some other",
    "start": "1018000",
    "end": "1024199"
  },
  {
    "text": "hints that you know you know you pick the wrong mode so if you run the tool it'll actually tell you what youc mode",
    "start": "1024199",
    "end": "1029640"
  },
  {
    "text": "might be best for you now that's convenient if you're having trouble tuning maybe uh less convenient than if",
    "start": "1029640",
    "end": "1036038"
  },
  {
    "text": "we figured it automatically and switched on the fly but that's not quite Within Reach of most GC algorithms to switch on",
    "start": "1036039",
    "end": "1041798"
  },
  {
    "text": "the fly like that so we'll have to have to work on that um some of those tools are downloaded",
    "start": "1041799",
    "end": "1048240"
  },
  {
    "text": "and run locally but guess what you're not going to be doing that anymore so IBM and you can go to the weight the",
    "start": "1048240",
    "end": "1054600"
  },
  {
    "text": "weight site weight ibm.com has cloud-based monitoring so you can actually say take this VM kick it send",
    "start": "1054600",
    "end": "1060200"
  },
  {
    "text": "all the results to weight and weight will provide these beautiful charts so you can go to the weight site now live",
    "start": "1060200",
    "end": "1066760"
  },
  {
    "text": "and uh see how it could help you but it what it does is it does uh really nice",
    "start": "1066760",
    "end": "1072080"
  },
  {
    "text": "um analysis and it'll show you what's interesting in your application and where you're spending excessive amounts",
    "start": "1072080",
    "end": "1078640"
  },
  {
    "text": "of time time so if you have a chance check that out so FS are perfect",
    "start": "1078640",
    "end": "1085360"
  },
  {
    "text": "right right all right we're done I can just",
    "start": "1085360",
    "end": "1091400"
  },
  {
    "text": "go I was hoping um not really we got a shellack load of stuff to do Cloud how",
    "start": "1091400",
    "end": "1099440"
  },
  {
    "text": "many times you heard of cloud I put it in quotes because it's not really well defined but from my perspective it's the",
    "start": "1099440",
    "end": "1105960"
  },
  {
    "text": "uh use of things like virtualization heavy virtualization which which involves a couple things um one um the",
    "start": "1105960",
    "end": "1113039"
  },
  {
    "text": "hardware is being abstracted to the point that we call it the layer of liars the the hardware is real but there's a",
    "start": "1113039",
    "end": "1120760"
  },
  {
    "text": "hypervisor in the way that says no you've got two cores sucker and no there's eight or it tells you you have",
    "start": "1120760",
    "end": "1128320"
  },
  {
    "text": "eight and there's only two so you're being lied to and then the OS takes that lie and compounds it by lying some more",
    "start": "1128320",
    "end": "1134520"
  },
  {
    "text": "and telling you have all the memory on the planet and yeah of course you have eight cores but reality is you've been sliced to a tenth of a core and all of",
    "start": "1134520",
    "end": "1140559"
  },
  {
    "text": "your algorithms assume you have them all so the layer of liars is a real problem in systems that are abusively",
    "start": "1140559",
    "end": "1147840"
  },
  {
    "text": "virtualized which is happening more and more um and that's pushing on footprint and density and and things like add and",
    "start": "1147840",
    "end": "1154320"
  },
  {
    "text": "delete virtual CPUs so if someone says oh I used to have two cores and now has four cores most VMS except ours I think",
    "start": "1154320",
    "end": "1162760"
  },
  {
    "text": "will add and adapt to that on the Fly they'll add more GC threads they'll remove GC threads they'll add or delete",
    "start": "1162760",
    "end": "1167919"
  },
  {
    "text": "memory on the Fly and adapt to whatever you've done to the VM okay so that's I",
    "start": "1167919",
    "end": "1173000"
  },
  {
    "text": "would say the Leading Edge and The New Normal for VMS okay big everyone's",
    "start": "1173000",
    "end": "1178919"
  },
  {
    "text": "attacking this problem I call it Big star. Star that's more data more threads we can talk about that in a second other one I want to talk about is",
    "start": "1178919",
    "end": "1185840"
  },
  {
    "text": "compatibility it's the least sexy thing I could talk about today so I'm gonna just to prove a point and uh you'll see",
    "start": "1185840",
    "end": "1193720"
  },
  {
    "text": "what I mean and then there's some Hardware stuff I wanted to mention and of course I can't ignore security I'm not sure I'll do all of these but we'll",
    "start": "1193720",
    "end": "1199480"
  },
  {
    "text": "see which ones come up um and so the questions is the questions for VM guys is you know we've solved all these",
    "start": "1199480",
    "end": "1206080"
  },
  {
    "text": "things we've we've we've invented some of the best optimization runtime technology possible okay so we have this",
    "start": "1206080",
    "end": "1212280"
  },
  {
    "text": "really great stuff what do we do to solve the stuff we haven't solved yet and these are some",
    "start": "1212280",
    "end": "1218360"
  },
  {
    "text": "of the problems I see if you see more problems I'd be happy to talk to you afterwards but I got a pretty good list",
    "start": "1218360",
    "end": "1224120"
  },
  {
    "text": "I'm sure that overlaps with yours so and so this ends up you know I call it the",
    "start": "1224120",
    "end": "1229600"
  },
  {
    "text": "wish list it's we got to solve all these things and then add a bunch of other stuff like uh resource control and",
    "start": "1229600",
    "end": "1236200"
  },
  {
    "text": "capabilities and and language extensions and high performance memory model and generics and true I said true lambdas",
    "start": "1236200",
    "end": "1244000"
  },
  {
    "text": "sorry um and all sort and 200 other things so I'm not going to talk about almost any of these although I will",
    "start": "1244000",
    "end": "1249960"
  },
  {
    "text": "touch on them in the following section so the first one's",
    "start": "1249960",
    "end": "1255240"
  },
  {
    "text": "Cloud so the thing that's happening in our world for cloud is is you're seeing these deployments where the machine",
    "start": "1255240",
    "end": "1261360"
  },
  {
    "text": "isn't yours and they're getting overcommitted they're getting reconfigured the",
    "start": "1261360",
    "end": "1267000"
  },
  {
    "text": "pressure on these things not in all cases some cases you just get you buy the Box you get exactly what they're",
    "start": "1267000",
    "end": "1272240"
  },
  {
    "text": "claiming but in some clouds you're actually getting less and over time you're going to see these These Things",
    "start": "1272240",
    "end": "1277799"
  },
  {
    "text": "become expensive so the first thing you want to do is fix or improve Java",
    "start": "1277799",
    "end": "1282840"
  },
  {
    "text": "density so the ability to stack or run lots and lots of jvms okay on a single",
    "start": "1282840",
    "end": "1290520"
  },
  {
    "text": "box the more the merrier to to fully use the resource that you're paying for and then the ability to potentially stack",
    "start": "1290520",
    "end": "1297320"
  },
  {
    "text": "okay so this chart's here not because it's actually not even that pretty it's here because we have a dial that goes to",
    "start": "1297320",
    "end": "1304120"
  },
  {
    "text": "11 right and that's that's the feature for you and but the Spectrum goes from",
    "start": "1304120",
    "end": "1309640"
  },
  {
    "text": "infrastructures of service like an Amazon how many VMS can you run on the hardware you've rented okay and the",
    "start": "1309640",
    "end": "1315640"
  },
  {
    "text": "technology we put in there are things like the shared classes I mentioned earlier I can run a lot more VMS because",
    "start": "1315640",
    "end": "1321240"
  },
  {
    "text": "I share which is reducing your individual advertised cost per VM they come up faster they go down faster so",
    "start": "1321240",
    "end": "1327760"
  },
  {
    "text": "you can have a much more dynamic system but you're still in the megabytes or double- digit megabyte",
    "start": "1327760",
    "end": "1333240"
  },
  {
    "text": "footprint so it's fairly big you can improve that a couple 1X 2x by yeah you",
    "start": "1333240",
    "end": "1339120"
  },
  {
    "text": "know stripping and reducing profiles in Java 8 and stuff like that you can get a little bigger but that's not a that's",
    "start": "1339120",
    "end": "1345200"
  },
  {
    "text": "not a huge savings um and that's maybe you don't care unless you start",
    "start": "1345200",
    "end": "1350520"
  },
  {
    "text": "paying by the hour who pays for cloud by the hour well everyone will and so you're going to care that you can either",
    "start": "1350520",
    "end": "1356720"
  },
  {
    "text": "use more in the hour price that you you know if you're buying a gigabyte's worth wouldn't you like to put twice as much",
    "start": "1356720",
    "end": "1361919"
  },
  {
    "text": "load on it than if you if you didn't have to pay there's middle of the ground which is a 10x to 20x Improvement that's",
    "start": "1361919",
    "end": "1368159"
  },
  {
    "text": "things like isolates which is a Java standard and that would be a form of U",
    "start": "1368159",
    "end": "1375679"
  },
  {
    "text": "multi-tenancy with a process isolation and then we have some other stuff that",
    "start": "1375679",
    "end": "1381039"
  },
  {
    "text": "we call snapshots which is being not really used by that many folks although there are VMS on certain cell phones for",
    "start": "1381039",
    "end": "1387559"
  },
  {
    "text": "example that use this exact sharing model uh and then there's Pas models which is uh you know heavy multi-tenant",
    "start": "1387559",
    "end": "1394799"
  },
  {
    "text": "super small instance models and that's 50 or 10K per process so the one I'm going to talk about a little bit is",
    "start": "1394799",
    "end": "1400640"
  },
  {
    "text": "multi-tenancy so one of the things we have and this is in our Java 71 you can just go download",
    "start": "1400640",
    "end": "1406679"
  },
  {
    "text": "it at the IBM website and try it out um but basically what we do is we allow you to virtualize within a jvm and run",
    "start": "1406679",
    "end": "1414120"
  },
  {
    "text": "multiple jvms within a jvm duh right Nob brainer and what you share there are",
    "start": "1414120",
    "end": "1419960"
  },
  {
    "text": "lots of the underlying class Library implementation the jit code is completely shared across all the",
    "start": "1419960",
    "end": "1426080"
  },
  {
    "text": "instances but we isolate so we isolate Statics so if you have a CO single class",
    "start": "1426080",
    "end": "1431480"
  },
  {
    "text": "and loaded and you got into two tenants got two copies of the Statics two different things so within a VM that's a",
    "start": "1431480",
    "end": "1438760"
  },
  {
    "text": "separate VM okay but and then of course you save a shellac load of memory and",
    "start": "1438760",
    "end": "1444039"
  },
  {
    "text": "some other things okay the other thing we do is not just keep you apart memory-wise in terms of uh Statics so",
    "start": "1444039",
    "end": "1451919"
  },
  {
    "text": "the fact is you have a static variable that I don't want yours and mind to conflict um we also have a model which",
    "start": "1451919",
    "end": "1458480"
  },
  {
    "text": "isolates resources so I would say this is in the bleeding edge of what VMS can do today and I think it's still early",
    "start": "1458480",
    "end": "1463960"
  },
  {
    "text": "days the ability to host pieces or other ations within your Java VM an example",
    "start": "1463960",
    "end": "1471440"
  },
  {
    "text": "would be untrusted you sends me sends me an app I'm not going to pick on you but you send me a a component and I don't",
    "start": "1471440",
    "end": "1478159"
  },
  {
    "text": "really trust it why can't I run it in an isolated context why can't I say uhuh",
    "start": "1478159",
    "end": "1483320"
  },
  {
    "text": "you're not allowed to create threads in your library you're not allowed to create do certain things in your library",
    "start": "1483320",
    "end": "1489200"
  },
  {
    "text": "it's not a security thing I just don't want you allocating 600 gigabytes Andor forking 32 million threads why can't I",
    "start": "1489200",
    "end": "1495960"
  },
  {
    "text": "control stuff within my own VM differently than for component reuse and",
    "start": "1495960",
    "end": "1501679"
  },
  {
    "text": "things like that right so that's a use case but you could also write an app server that does that I takes a bunch of apps loads them and completely controls",
    "start": "1501679",
    "end": "1508919"
  },
  {
    "text": "how they're allowed to be run okay so in in uh and how does this look we did an",
    "start": "1508919",
    "end": "1514240"
  },
  {
    "text": "extension that allows you to do this to Java code I'm not sure how it would look in a standard Java when when brought to",
    "start": "1514240",
    "end": "1519520"
  },
  {
    "text": "a standard um effort but initially it's you just annotate and and you uh could",
    "start": "1519520",
    "end": "1525159"
  },
  {
    "text": "say these are tenants or not tenant scope or not so in this case the default local for two different apps one's a UK",
    "start": "1525159",
    "end": "1530679"
  },
  {
    "text": "one's USA and Canada is the default you get two different apps and they get two different locals in the same address",
    "start": "1530679",
    "end": "1536720"
  },
  {
    "text": "space fancy eh and uh for multi-tenant loader which I'll show you in a second",
    "start": "1536720",
    "end": "1543200"
  },
  {
    "text": "we just make that tenant scope the default for all Statics but if you're doing fancy fancy class loader tricks",
    "start": "1543200",
    "end": "1550120"
  },
  {
    "text": "and and doing app servers you would love to have the app server be a lot smarter",
    "start": "1550120",
    "end": "1555200"
  },
  {
    "text": "and share components that are sharable things that are read only for example which would be really nice oops an",
    "start": "1555200",
    "end": "1561919"
  },
  {
    "text": "example here on uh play well with others the kindergarten model within the jvm if",
    "start": "1561919",
    "end": "1567440"
  },
  {
    "text": "I bring two apps in the same jvm I might need them to prevent them from fighting",
    "start": "1567440",
    "end": "1573000"
  },
  {
    "text": "with each other and not not starving each other right so we have the ability to to do that kind of stuff if uh if I",
    "start": "1573000",
    "end": "1580679"
  },
  {
    "text": "was able to not change my screen resolution you know you know",
    "start": "1580679",
    "end": "1586159"
  },
  {
    "text": "multi-tenant cvms also have um can I actually",
    "start": "1586159",
    "end": "1593840"
  },
  {
    "text": "see I better do this and run whatever I think I'm going to run anything look",
    "start": "1594240",
    "end": "1599720"
  },
  {
    "text": "like the word demo here oh there we go so for example the multi multi tendit VM",
    "start": "1599720",
    "end": "1604840"
  },
  {
    "text": "also has other benefits if you run it you'll see the command line here on the my left your left too I guess standard",
    "start": "1604840",
    "end": "1612080"
  },
  {
    "text": "VM runs like that multi-tenant VM actually has other benefits like extremely fast startup why cuz the VMS",
    "start": "1612080",
    "end": "1619600"
  },
  {
    "text": "are already there so you're really just stacking onto something that's already running but you can run I don't know what the number is going to be by here",
    "start": "1619600",
    "end": "1626039"
  },
  {
    "text": "but let's find out yeah 3 to 4X faster on Startup so for certain kinds of",
    "start": "1626039",
    "end": "1633480"
  },
  {
    "text": "apps you might um you might find a runand done model",
    "start": "1633480",
    "end": "1639000"
  },
  {
    "text": "finally feasible on stacked on top of a multi right okay so big what's that mean",
    "start": "1639000",
    "end": "1648640"
  },
  {
    "text": "more threads more memory more problems that's sort of good I just want to talk",
    "start": "1648640",
    "end": "1654679"
  },
  {
    "text": "about some cool stuff like Hardware transactional memory who knows what that is who wants this so badly well you'll",
    "start": "1654679",
    "end": "1662320"
  },
  {
    "text": "have to wait on Intel but you can get it on Power and on Z but you can wait a few months I guess on Intel and see what",
    "start": "1662320",
    "end": "1668320"
  },
  {
    "text": "happens um so basically this is called concurrency get lucky",
    "start": "1668320",
    "end": "1673679"
  },
  {
    "text": "concurrency it's true you don't lock you just say what's important to you between here and here don't keep out of my pool",
    "start": "1673679",
    "end": "1680120"
  },
  {
    "text": "what will happen is the hardware will detect if anyone else has messed with your memory while you're looking at it or touching it or reading it or fondling",
    "start": "1680120",
    "end": "1685480"
  },
  {
    "text": "it or whatever you do to it it will detect and it will tell you and at the end you'll go oh crap but if you but you",
    "start": "1685480",
    "end": "1692880"
  },
  {
    "text": "didn't have to lock you just said please inform me if anyone messes with my stuff and at the end it tells you someone",
    "start": "1692880",
    "end": "1698000"
  },
  {
    "text": "messed with it or it succeeded and so you get this All or Nothing the interesting part about this is you can",
    "start": "1698000",
    "end": "1703640"
  },
  {
    "text": "do all sorts of great stuff like get rid of actual locks because most of the time",
    "start": "1703640",
    "end": "1709159"
  },
  {
    "text": "the lock is way way way Overkill lock do some trivial thing unlock so things like",
    "start": "1709159",
    "end": "1716279"
  },
  {
    "text": "Java util concurrent concurrent Q um on our systems with transactional memory you'll get uh 2x",
    "start": "1716279",
    "end": "1723440"
  },
  {
    "text": "scalability right why is that because you don't end up locking you end up just telling telling the hardware to detect",
    "start": "1723440",
    "end": "1730440"
  },
  {
    "text": "if you had a conflict and if so back out right same for",
    "start": "1730440",
    "end": "1736919"
  },
  {
    "text": "readers um uh lock elision the removal of locks which is what the word elision",
    "start": "1736919",
    "end": "1742360"
  },
  {
    "text": "means is basically if anyone modifies the thing I'm reading under this",
    "start": "1742360",
    "end": "1747480"
  },
  {
    "text": "transaction back out and do it the hard way so you'll start to see all those you",
    "start": "1747480",
    "end": "1753519"
  },
  {
    "text": "know some of these scalability problems you'll see what happened to my app I used to overlock if you have a badly",
    "start": "1753519",
    "end": "1758760"
  },
  {
    "text": "written app which someone else gave you you gave me code and it's going to scale a lot better so",
    "start": "1758760",
    "end": "1765120"
  },
  {
    "text": "you're going to see a lot better scalability in in jvm so wanteded to point that out but the really interesting thing is this can get this",
    "start": "1765120",
    "end": "1772200"
  },
  {
    "text": "can be used for something called Gill removal I'm not referring to Gill who's not here I'm referring to the global",
    "start": "1772200",
    "end": "1779480"
  },
  {
    "text": "interpreter locks in crappy interpreters like Ruby and other things like that okay where you have a serialized",
    "start": "1779480",
    "end": "1785360"
  },
  {
    "text": "interpreter Loop well guess uh IBM research you can look this up did a hardware transaction memory thing um",
    "start": "1785360",
    "end": "1792080"
  },
  {
    "text": "where they get lucky concurrency used around the bite code implementations of Ruby and they got",
    "start": "1792080",
    "end": "1798760"
  },
  {
    "text": "4.4x scalability using what I would call get lucky concurrency get lucky as in",
    "start": "1798760",
    "end": "1804000"
  },
  {
    "text": "remove all locks protect with Hardware detection for the locks you didn't need in the first place and if you get a lock",
    "start": "1804000",
    "end": "1811440"
  },
  {
    "text": "if you get a problem go fix it at that point but most of the time the fact that they lock The Interpreter to run it is",
    "start": "1811440",
    "end": "1817039"
  },
  {
    "text": "excessive so all right um I'm going to skip that one because I wanted to get to",
    "start": "1817039",
    "end": "1822840"
  },
  {
    "text": "this one so this is the one I I said was what boring no you tell me I I have no",
    "start": "1822840",
    "end": "1829080"
  },
  {
    "text": "time right sex wasn't sexy yes well this is something that bothers me because uh",
    "start": "1829080",
    "end": "1835240"
  },
  {
    "text": "our our customers rely on us to give them compatibility and we love compatibility and so what we've decided",
    "start": "1835240",
    "end": "1841159"
  },
  {
    "text": "is protect them by never breaking their code but also prevents us from innovating I have code",
    "start": "1841159",
    "end": "1847799"
  },
  {
    "text": "from you know I don't know where it comes from but it's it's compiled with 10 and it has to run and they don't have",
    "start": "1847799",
    "end": "1852919"
  },
  {
    "text": "the source anymore so we've reached Cobalt level I don't have the source anymore",
    "start": "1852919",
    "end": "1857960"
  },
  {
    "text": "it's true so ridiculously old cold the word was used ludicrously this morning ludicrous some scaling that's there's",
    "start": "1857960",
    "end": "1863799"
  },
  {
    "text": "ludicrous and ridiculous now are the two words that I like today and eternal Bing compatibility is different so I want to",
    "start": "1863799",
    "end": "1870080"
  },
  {
    "text": "drive some sort of path into jvms that helps you with um both compatibility and",
    "start": "1870080",
    "end": "1878000"
  },
  {
    "text": "migration so this hasn't happened ever before until Java 8 you know this did",
    "start": "1878000",
    "end": "1883519"
  },
  {
    "text": "anyone know this compatibility was don't change your code just be very careful and hope it doesn't break all right",
    "start": "1883519",
    "end": "1890519"
  },
  {
    "text": "there you go now kudos to the extension the biggest innovation in javet you hear lambdas woo but that's just because it's",
    "start": "1890519",
    "end": "1898000"
  },
  {
    "text": "sexy this is the Innovation okay wow",
    "start": "1898000",
    "end": "1903120"
  },
  {
    "text": "there's some font funniness here um but what happened was if you want to extend",
    "start": "1903120",
    "end": "1908399"
  },
  {
    "text": "an interface today and you add a new method to it guess what happens",
    "start": "1908399",
    "end": "1914000"
  },
  {
    "text": "everybody who implements it breaks slap to the face so then what happens you're not allowed to do that you create a",
    "start": "1914000",
    "end": "1919399"
  },
  {
    "text": "whole new one interface one and interface two and somewhere in your code you will cast to determine which one",
    "start": "1919399",
    "end": "1926039"
  },
  {
    "text": "that is that's a complete idiotic disaster if you have shellac loads of code so this was the light compatibility",
    "start": "1926039",
    "end": "1935639"
  },
  {
    "text": "Bing finally so what you can do is you can say not only I'm going to make you implement this new method but if you don't have it here's a free one so in",
    "start": "1935639",
    "end": "1943080"
  },
  {
    "text": "the end what you're doing to people is maybe you would have broken them but you're giving them a a workaround or a",
    "start": "1943080",
    "end": "1949080"
  },
  {
    "text": "fixed to that breakage so they will be eternally grateful hopefully but it means that there's a path to fix uh Java",
    "start": "1949080",
    "end": "1956799"
  },
  {
    "text": "over time this is one of them where you can actually change apis and potentially",
    "start": "1956799",
    "end": "1964440"
  },
  {
    "text": "evolve the libraries evolve things in a compatible way that's predictable protect the investment move folks off of",
    "start": "1964440",
    "end": "1970840"
  },
  {
    "text": "potentially the wrong or dangerous things but still run all the code that",
    "start": "1970840",
    "end": "1975880"
  },
  {
    "text": "they know and love okay so this one here is is is nice so I want to make sure that um you understood the importance of",
    "start": "1975880",
    "end": "1982960"
  },
  {
    "text": "it CU you know sexy is Lambda but default methods valuable okay so I",
    "start": "1982960",
    "end": "1989080"
  },
  {
    "text": "wanted to talk just quickly about can I have some more please so what I wanted to talk about",
    "start": "1989080",
    "end": "1995919"
  },
  {
    "text": "was API Evolution supported by the jvm how much how much time do I have 15",
    "start": "1995919",
    "end": "2001720"
  },
  {
    "text": "oh lots of time okay good um so why doesn't the jvm give you trusted",
    "start": "2001720",
    "end": "2007080"
  },
  {
    "text": "mechanisms to do field renames or method renames I know you missed the two Gill jokes but",
    "start": "2007080",
    "end": "2013399"
  },
  {
    "text": "sorry I Gill's here so it's good um uh method rename for example clearly youve",
    "start": "2013399",
    "end": "2019039"
  },
  {
    "text": "named your methods properly the first time you wrote the code right no you want of course you want to rename stuff",
    "start": "2019039",
    "end": "2024360"
  },
  {
    "text": "all the time but you're not going to for compatibility reasons or you add a method if it's a class or something",
    "start": "2024360",
    "end": "2029440"
  },
  {
    "text": "right so what you want to do is be able to have a like a specified way to evolve",
    "start": "2029440",
    "end": "2036080"
  },
  {
    "text": "your class libraries along to sort of kind of support the kind of things that people want to do to make",
    "start": "2036080",
    "end": "2041880"
  },
  {
    "text": "their code better refactoring right now refactoring is done but it by lots of",
    "start": "2041880",
    "end": "2047159"
  },
  {
    "text": "people but they break everything when they do it how often if you refactor yourself into broken code tons of times",
    "start": "2047159",
    "end": "2053800"
  },
  {
    "text": "right you just don't have a whole worldview to do that so that's a problem so I want um for example selected",
    "start": "2053800",
    "end": "2059118"
  },
  {
    "text": "visibility of methods based on compos versions we do this now uh",
    "start": "2059119",
    "end": "2064720"
  },
  {
    "text": "CDC on a jvm can only see the CDC methods and a CC on a standard jvm which",
    "start": "2064720",
    "end": "2071280"
  },
  {
    "text": "has more implementation underneath can only see the CDC methods so in embedded we actually can run you know CC midp and",
    "start": "2071280",
    "end": "2079480"
  },
  {
    "text": "on a on a CDC VM but be compliant because you only see the methods you're allowed to see which is the platform",
    "start": "2079480",
    "end": "2084800"
  },
  {
    "text": "view versus the implementation view right so you want to so those kinds of things can help you and then I'd like",
    "start": "2084800",
    "end": "2090280"
  },
  {
    "text": "for example when I break your code and you hate me you know what I like if you got the jar and it you know eclipse or",
    "start": "2090280",
    "end": "2097720"
  },
  {
    "text": "intellig or whatever your favorite IDE is refactors for you says by the way old method new method I did this fine",
    "start": "2097720",
    "end": "2104720"
  },
  {
    "text": "refactoring so you didn't have to do anything and you were transported to the Fine future of the better apis um",
    "start": "2104720",
    "end": "2111160"
  },
  {
    "text": "serialization robustness this is based on we should do something about versioning in classes for example and if",
    "start": "2111160",
    "end": "2118400"
  },
  {
    "text": "you did that death to the bogus serial version U uid which is just this this",
    "start": "2118400",
    "end": "2125359"
  },
  {
    "text": "thing that's a hack to survive bad ization um and then you can do things uh",
    "start": "2125359",
    "end": "2131760"
  },
  {
    "text": "the bottom one is the one I want to do things like thread stop the VMS have lots of crazy stuff to make that work",
    "start": "2131760",
    "end": "2137640"
  },
  {
    "text": "and be safe it's deprecated shouldn't use it I want a way to actually enforce deprecated disappeared as opposed to",
    "start": "2137640",
    "end": "2144800"
  },
  {
    "text": "deprecated is just a more warnings like so you shouldn't use it but everyone",
    "start": "2144800",
    "end": "2150359"
  },
  {
    "text": "continues to so example that you can see I've talked about this one before is if you had versions and if you were able to",
    "start": "2150359",
    "end": "2157160"
  },
  {
    "text": "specify by something like the deprecated in V1 or something or deprecated in V1",
    "start": "2157160",
    "end": "2162240"
  },
  {
    "text": "to V2 I made the syntax up I don't want to argue but syntax what could you do with that well you could get rid of bad",
    "start": "2162240",
    "end": "2169640"
  },
  {
    "text": "field and you could between version ones and twos and version 3es if you had versioning at the",
    "start": "2169640",
    "end": "2175800"
  },
  {
    "text": "class level or it may be bolted on metadata there's lots of ways to consider this but if the Java VM could",
    "start": "2175800",
    "end": "2181520"
  },
  {
    "text": "then say you know what if a version 10 sets shows up I have a bad field for you",
    "start": "2181520",
    "end": "2186560"
  },
  {
    "text": "are I'm going to rewrite that with some Getters and Setters if version two shows up you should have known better but you're still allowed to use it at that",
    "start": "2186560",
    "end": "2192359"
  },
  {
    "text": "point but I rewrote you as well and if version three showed up the fact that I compiled against a version three with a",
    "start": "2192359",
    "end": "2198640"
  },
  {
    "text": "version three meant you couldn't have compiled that successfully in the first place so the method doesn't have to be there so some way you have a way to get",
    "start": "2198640",
    "end": "2205599"
  },
  {
    "text": "who wants to bury some bad behavior in Java code by removing one person right",
    "start": "2205599",
    "end": "2210839"
  },
  {
    "text": "imagine imagine this feature right so that's uh that's number one I also",
    "start": "2210839",
    "end": "2218480"
  },
  {
    "text": "want to get to some more charts I told you i' like oh a lot of charts oh here's",
    "start": "2218480",
    "end": "2224520"
  },
  {
    "text": "one up near and dear to my heart Hardware um who knows what a GPU is who",
    "start": "2224520",
    "end": "2230319"
  },
  {
    "text": "wants to abuse gpus in their application yeah how many of you know that Java is",
    "start": "2230319",
    "end": "2236440"
  },
  {
    "text": "in the way between you and your beloved gpus giggling Java is in the way I got",
    "start": "2236440",
    "end": "2244319"
  },
  {
    "text": "to transfer the data it's not in the right format I have to mess with it till it works kind of thing",
    "start": "2244319",
    "end": "2250440"
  },
  {
    "text": "it's awful so we wanted to do something that helps with that particular problem",
    "start": "2250440",
    "end": "2255839"
  },
  {
    "text": "and a few others so the fact is you know Java protects you my mom told me exactly",
    "start": "2255839",
    "end": "2262319"
  },
  {
    "text": "how to lay out my memory for me she didn't know about gpus so I want to fix",
    "start": "2262319",
    "end": "2269319"
  },
  {
    "text": "that and I want to fix a few other things serialization and IO I want to be able to do direct native access because guess what some of that memory is",
    "start": "2269319",
    "end": "2275839"
  },
  {
    "text": "externally on GPU or some of it's just in a database and database format why do I need to convert it into Java Heap",
    "start": "2275839",
    "end": "2282319"
  },
  {
    "text": "format to munch through it so Java does a really great job of protecting you from that doesn't do a really great job",
    "start": "2282319",
    "end": "2287720"
  },
  {
    "text": "of giving you access to that while giving you safe access so we did this thing call packed objects we've been",
    "start": "2287720",
    "end": "2293359"
  },
  {
    "text": "working with uh folks in Oracle and others in community about how to uh how",
    "start": "2293359",
    "end": "2299079"
  },
  {
    "text": "to bring packed objects into or the functionality that pack objects provides into the uh Java platform and the kind",
    "start": "2299079",
    "end": "2306079"
  },
  {
    "text": "of use cases are things like like no copying to and from the database for persistent data uh no munging on The",
    "start": "2306079",
    "end": "2312880"
  },
  {
    "text": "Wire protocol if it's coming through RDMA direct memory mapped IO and the",
    "start": "2312880",
    "end": "2318359"
  },
  {
    "text": "third one would be um no Ser you know serialization deserialization which is kind of like the no copying on the",
    "start": "2318359",
    "end": "2324359"
  },
  {
    "text": "database side okay um the other thing that we want to do is make it a lot easier to have more",
    "start": "2324359",
    "end": "2331319"
  },
  {
    "text": "compact data so packed one of the things that Java does kind of uh uh poorly is it's just got memory",
    "start": "2331319",
    "end": "2339680"
  },
  {
    "text": "blow you've got headers on objects everything's appointed to some other object so things like uh say an array of",
    "start": "2339680",
    "end": "2348160"
  },
  {
    "text": "things there's overhead ex a lot of overhead at times and the layout is not predictable it could be scattered all",
    "start": "2348160",
    "end": "2354280"
  },
  {
    "text": "over the Heap and all sorts of places so things like packed objects give you an opportunity to um take objects and for",
    "start": "2354280",
    "end": "2364280"
  },
  {
    "text": "example in this particular case a packed line is actually three points minus their headers packed into one object now",
    "start": "2364280",
    "end": "2371400"
  },
  {
    "text": "what does that get you cache efficiency great performance and size and if you're",
    "start": "2371400",
    "end": "2376680"
  },
  {
    "text": "going to send this off to a GPU it's pretty much a m copy so a lot nicer that kind of thing and so we did a",
    "start": "2376680",
    "end": "2383520"
  },
  {
    "text": "prototype and I don't expect you to learn it all here you can download it and try it it's also on the IBM website",
    "start": "2383520",
    "end": "2388880"
  },
  {
    "text": "if you like and uh give us feedback because one of the things we're trying to do is figure out how customers are",
    "start": "2388880",
    "end": "2395720"
  },
  {
    "text": "really going to use this and whether or not the things that we're seeing as Ben as to benefit us as U VM implementers",
    "start": "2395720",
    "end": "2403240"
  },
  {
    "text": "will also benefit you know folks who are really down by the metal doing GPU stuff and things like that um this is another",
    "start": "2403240",
    "end": "2408480"
  },
  {
    "text": "example of uh a reason packed objects uh exist uh direct memory access otherwise",
    "start": "2408480",
    "end": "2415640"
  },
  {
    "text": "you're reifying it or or copying into the Java Heap just to talk to it",
    "start": "2415640",
    "end": "2422200"
  },
  {
    "text": "okay and this is an example of us actually um the syntax so we the syntax",
    "start": "2422200",
    "end": "2430079"
  },
  {
    "text": "I I actually don't like to argue about syntax because it's the most trivial part but essentially the definition of a",
    "start": "2430079",
    "end": "2436119"
  },
  {
    "text": "class put some annotations on it and I can either get an on Heap one which is part of the garbage cucked heap or if I",
    "start": "2436119",
    "end": "2441280"
  },
  {
    "text": "need to I can take that exact same class and point it externally and if you look at things like bite field setting double",
    "start": "2441280",
    "end": "2447079"
  },
  {
    "text": "field and Boolean field the code is identical so you could actually have the same Java code talking to something you",
    "start": "2447079",
    "end": "2452960"
  },
  {
    "text": "got from the off disk or something you decided to have in memory and no mental",
    "start": "2452960",
    "end": "2459160"
  },
  {
    "text": "model really has to change for your how you're going to program against that and the layout is designed by you so more",
    "start": "2459160",
    "end": "2465960"
  },
  {
    "text": "safer more you okay who liked all of that stuff and wants",
    "start": "2465960",
    "end": "2472400"
  },
  {
    "text": "more bar so I want I want to talk about one more thing and then questions so I really am going to finish 50 charts in",
    "start": "2472640",
    "end": "2480319"
  },
  {
    "text": "an hour um so my job has has grown to",
    "start": "2480319",
    "end": "2485359"
  },
  {
    "text": "not just be Java I I have a JavaScript runtime that I own and and ship on IBM",
    "start": "2485359",
    "end": "2490599"
  },
  {
    "text": "cloud and in my history we've also done well Small Talk um but uh uh PHP uh",
    "start": "2490599",
    "end": "2499040"
  },
  {
    "text": "we're seeing Ruby python PHP frequently in our customer sites uh how many use",
    "start": "2499040",
    "end": "2504280"
  },
  {
    "text": "any of those languages right anger in anger or just for fun",
    "start": "2504280",
    "end": "2510280"
  },
  {
    "text": "or you right uh paths is like Cloud Foundry um used by Heroku uh IBM Blu",
    "start": "2510280",
    "end": "2516079"
  },
  {
    "text": "miix many is a polyglot platform so you're seeing a lot of these languages um for doing things like consuming",
    "start": "2516079",
    "end": "2522079"
  },
  {
    "text": "services that are available data services things like that so that's so what we're seeing in IBM is is our",
    "start": "2522079",
    "end": "2527880"
  },
  {
    "text": "customers aren't just becoming Java programmers they're becoming they're becoming Java Plus programmers Java",
    "start": "2527880",
    "end": "2534000"
  },
  {
    "text": "JavaScript which you saw earlier with Trisha's live uh Live Wire Highwire act",
    "start": "2534000",
    "end": "2539359"
  },
  {
    "text": "and um I'm not going to code for you today but uh I will show you some code in a second maybe uh and then JavaScript",
    "start": "2539359",
    "end": "2546000"
  },
  {
    "text": "is is this hugely popular language that's that's coming along so as part of this new job that I've",
    "start": "2546000",
    "end": "2553680"
  },
  {
    "text": "been doing I've noticed that these all virtual machines except the Java ones kind of suck in terms of uh modern we",
    "start": "2553680",
    "end": "2560880"
  },
  {
    "text": "call it modern implementation they're 10 20 years behind they perfectly good 1980s VMS but they're not so modern",
    "start": "2560880",
    "end": "2568599"
  },
  {
    "text": "right they don't do parallel things they don't have high-end code uh jit compilation they don't um take advantage",
    "start": "2568599",
    "end": "2575040"
  },
  {
    "text": "of modern actually modern Harbor features well it's it's they're nice to play and and and they do okay but we",
    "start": "2575040",
    "end": "2582760"
  },
  {
    "text": "know that some of the techniques we've done in Java should be appli to those so my question that I ask is why has the",
    "start": "2582760",
    "end": "2589160"
  },
  {
    "text": "universe not adopted the jvm as the one true runtime right the answer is because the",
    "start": "2589160",
    "end": "2594720"
  },
  {
    "text": "Java bik said isn't the best place to do multi language development it's not so the question is how do you get there and",
    "start": "2594720",
    "end": "2600760"
  },
  {
    "text": "how do you leverage it from from the Investments we made in Java so that's the question we've been asking and you",
    "start": "2600760",
    "end": "2605800"
  },
  {
    "text": "know when we look at our technology we see garbage collection language neutral our jits are currently used in five the",
    "start": "2605800",
    "end": "2613400"
  },
  {
    "text": "same jit that's used in Java is used in five programming languages and so we're looking at what would it take and so if",
    "start": "2613400",
    "end": "2620920"
  },
  {
    "text": "I was to say what's the next next Generation because the first stuff is the stuff you just saw the next next is",
    "start": "2620920",
    "end": "2627359"
  },
  {
    "text": "you know this because we've tried some of these things where um existing native",
    "start": "2627359",
    "end": "2633720"
  },
  {
    "text": "implementations have been augmented by technology you find in Java VMS and there's some very interesting things you can do so parallel GC under some of",
    "start": "2633720",
    "end": "2641960"
  },
  {
    "text": "these is actually quite interesting because they don't have it and they won't have it not unless we find a way",
    "start": "2641960",
    "end": "2648000"
  },
  {
    "text": "to enable those things and it's very hard for you to get that going through the Java bite code set and keeping all",
    "start": "2648000",
    "end": "2654960"
  },
  {
    "text": "the Fidelity of the language it's not that easy to get multilanguage on Java to work like you want it to if you're uh",
    "start": "2654960",
    "end": "2662559"
  },
  {
    "text": "you know if your original language is the language you're reporting it's okay for some things like Ruby's done Ruby's done a great job but it's taken them",
    "start": "2662559",
    "end": "2669280"
  },
  {
    "text": "forever to get that performance out of the thing and it should have been a lot easier than than that because of the uh",
    "start": "2669280",
    "end": "2675559"
  },
  {
    "text": "the sheer amount of investment that's gone into Java VMS so that's my uh that's my pitch for being invited next",
    "start": "2675559",
    "end": "2681920"
  },
  {
    "text": "year to talk about that and so here's the four things we're not really done finishing",
    "start": "2681920",
    "end": "2688559"
  },
  {
    "text": "on high performance jits gc's that's the that's going to continue we are we're",
    "start": "2688559",
    "end": "2693920"
  },
  {
    "text": "starting but we're not anywhere close to finishing the native layout stuff that's critical for the evolution of java I",
    "start": "2693920",
    "end": "2699480"
  },
  {
    "text": "want language compatibility as another Innovation thing even though it's not sexy it's what's going to save you know",
    "start": "2699480",
    "end": "2707319"
  },
  {
    "text": "the um ability of us to continue to push Innovation because we can change things break something but give you the gift",
    "start": "2707319",
    "end": "2715119"
  },
  {
    "text": "that fixes it so you'll take both you'll say breaking change oh it fixed it happiness and then of course uh I'd like",
    "start": "2715119",
    "end": "2722400"
  },
  {
    "text": "to speak a few more languages more fluently and that's an open question which we're looking at so when I said",
    "start": "2722400",
    "end": "2727440"
  },
  {
    "text": "next Generation Java Rich machines I actually said Java and others but this",
    "start": "2727440",
    "end": "2732800"
  },
  {
    "text": "is where I am questions I think we're at that time uh Java unsafe we're pretty",
    "start": "2732800",
    "end": "2739200"
  },
  {
    "text": "dug in on it now everybody's demanding that become safe how much on the VM side",
    "start": "2739200",
    "end": "2744760"
  },
  {
    "text": "making them do you hate us for liking unsafe and using it is that motivating some of P stuff I don't hate you",
    "start": "2744760",
    "end": "2754599"
  },
  {
    "text": "much little bit just a no the uh Java unsafe is a sort of a necessary evil to",
    "start": "2754599",
    "end": "2760640"
  },
  {
    "text": "get around some of the flaws that are in or you know the lack of the functionality that's there today so if you have native memory you want to",
    "start": "2760640",
    "end": "2767760"
  },
  {
    "text": "hammer at that's the really only way to do it without calling out to J which is another long path so foreign function",
    "start": "2767760",
    "end": "2774040"
  },
  {
    "text": "interface improvements is really critical so things like unsafe are kind of",
    "start": "2774040",
    "end": "2779359"
  },
  {
    "text": "uh I would say just a necessary evil I think the right answer for unsafe fact is unspecified they have to move into",
    "start": "2779359",
    "end": "2785920"
  },
  {
    "text": "some proper L specified um sort of package of some sort and if you were to",
    "start": "2785920",
    "end": "2793400"
  },
  {
    "text": "ask what I would do for protecting you from unsafe is I would I would be able to sign you know code that's allowed to",
    "start": "2793400",
    "end": "2800200"
  },
  {
    "text": "use unsafe and everyone else is not going to be allowed to do it so have just close the scope of who is allowed",
    "start": "2800200",
    "end": "2806119"
  },
  {
    "text": "to be unsafe and and try to narrow that aperture because it really is not it's not a great thing to do and it's a",
    "start": "2806119",
    "end": "2811839"
  },
  {
    "text": "really nasty security problem and then there's virtual machine features like even value types which could allow",
    "start": "2811839",
    "end": "2817599"
  },
  {
    "text": "unsafe to to create unforgeable pointers through the long path but then once you",
    "start": "2817599",
    "end": "2822720"
  },
  {
    "text": "use them they're really fast so they would have some sort of pointer embedded in a value type that then allows you to mun at memory and rain checks is there",
    "start": "2822720",
    "end": "2829800"
  },
  {
    "text": "and all that safe or unsafe I guess would be the story so okay next",
    "start": "2829800",
    "end": "2838440"
  },
  {
    "text": "question Oh all the way in back is that a question there",
    "start": "2839240",
    "end": "2844960"
  },
  {
    "text": "Gil you gonna ask something no okay look you got off easy not not",
    "start": "2847440",
    "end": "2856200"
  },
  {
    "text": "too many tough questions today just one so thank you everyone uh for joining us",
    "start": "2856200",
    "end": "2861680"
  },
  {
    "text": "for this just a reminder that there's a uh a final session in the Java track",
    "start": "2861680",
    "end": "2866880"
  },
  {
    "text": "after the break uh which will be Charlie hunt um talking about uh juc and",
    "start": "2866880",
    "end": "2873119"
  },
  {
    "text": "performance and all that great stuff uh and Charlie as you may know is uh the",
    "start": "2873119",
    "end": "2878760"
  },
  {
    "text": "author of the book on Java performance um you know one with Duke riding a",
    "start": "2878760",
    "end": "2884559"
  },
  {
    "text": "motorcycle so uh you'll definitely want to come and check that out and thanks everyone thanks John than",
    "start": "2884559",
    "end": "2893720"
  }
]