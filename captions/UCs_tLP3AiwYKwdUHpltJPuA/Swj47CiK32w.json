[
  {
    "start": "0",
    "end": "134000"
  },
  {
    "text": "hello all right awesome um hi welcome back to day two I'm glad you decided to",
    "start": "12040",
    "end": "17320"
  },
  {
    "text": "join me today um let's Jump Right In I'm going to talk to you guys about uh a web",
    "start": "17320",
    "end": "24119"
  },
  {
    "text": "development framework called live view and how it's beginning to and I think it will continue to drive the adoption of",
    "start": "24119",
    "end": "30920"
  },
  {
    "text": "beam programming languages beam being the earling VM as well as keeping functional programming relevant to web",
    "start": "30920",
    "end": "37000"
  },
  {
    "text": "development before I tell you a little bit about myself and before I tell you all about live view I'm just curious",
    "start": "37000",
    "end": "43640"
  },
  {
    "text": "anybody here ever used live view before three people um any Elixir",
    "start": "43640",
    "end": "49480"
  },
  {
    "text": "developers in the audience the same three people uh any beam programmers",
    "start": "49480",
    "end": "54520"
  },
  {
    "text": "anyone on the erlang VM okay the same person all right so you guys are a little bit new to live view uh which is",
    "start": "54520",
    "end": "60600"
  },
  {
    "text": "great because list talk is absolutely designed for and aimed at you lovely folks people that are curious about this",
    "start": "60600",
    "end": "66760"
  },
  {
    "text": "framework maybe want to know um what it's going to bring to the functional ecosystem we're going to look at a",
    "start": "66760",
    "end": "71960"
  },
  {
    "text": "little bit of code but I'm going to keep it high level hopefully just to sort of sell you on the benefits of the live",
    "start": "71960",
    "end": "77720"
  },
  {
    "text": "view framework um and what's so valuable about it we're not going to get too far into the",
    "start": "77720",
    "end": "83400"
  },
  {
    "text": "weeds uh okay hi I'm Sophie which you may already know because you here and you came to see me um a little bit about",
    "start": "83400",
    "end": "89680"
  },
  {
    "text": "me I'm the co-author of the programming Phoenix live view book which is out in beta from prag prag now together with",
    "start": "89680",
    "end": "95439"
  },
  {
    "text": "Bruce Tate um the co-host of the beam Radio podcast together with some very wonderful folks I'm a Staff engineer at",
    "start": "95439",
    "end": "102360"
  },
  {
    "text": "GitHub where we don't use any beam programming languages and we certainly don't work with live view um but if you",
    "start": "102360",
    "end": "108600"
  },
  {
    "text": "want to complain to someone about Azure event hubs you can come find me after this and I am the owner of this dog who",
    "start": "108600",
    "end": "114960"
  },
  {
    "text": "is very normal and he can be found doing normal things like sleeping on the arm of the couch",
    "start": "114960",
    "end": "120560"
  },
  {
    "text": "uh in a very normal shape uh and I will add by the way that if you ask a question today um and give",
    "start": "120560",
    "end": "128080"
  },
  {
    "text": "me your email I'll give you a free copy of my book because I have some to give away from the publisher so keep that in",
    "start": "128080",
    "end": "133120"
  },
  {
    "text": "mind um all right what are we going to do today why are you here we're going to",
    "start": "133120",
    "end": "138280"
  },
  {
    "start": "134000",
    "end": "211000"
  },
  {
    "text": "talk a little bit about some of the common problems that really all web developers face that all web development",
    "start": "138280",
    "end": "144920"
  },
  {
    "text": "Frameworks face I'm going to show you how live view solves those problems and like I said before we're going to take a",
    "start": "144920",
    "end": "151000"
  },
  {
    "text": "little bit of a look at some code just so that I can really drive home what I believe to be the Elegance of some of",
    "start": "151000",
    "end": "157000"
  },
  {
    "text": "these Solutions we're not going to uh require some sort of deep Elixir or deep live view knowledge to get something out",
    "start": "157000",
    "end": "163440"
  },
  {
    "text": "of this talk uh we're going to go through what live view is at a high level how it works also at a high level",
    "start": "163440",
    "end": "171159"
  },
  {
    "text": "and I'm going to hopefully explain to you very uh persuasively and",
    "start": "171159",
    "end": "176319"
  },
  {
    "text": "convincingly why it's going to drive beam adoption why we're already seeing it Drive beam adoption and as a result",
    "start": "176319",
    "end": "183319"
  },
  {
    "text": "why I think it's going to keep functional programming languages relevant to web",
    "start": "183319",
    "end": "188400"
  },
  {
    "text": "development all right something you already know if you're here in Copenhagen today um You probably like",
    "start": "188400",
    "end": "194200"
  },
  {
    "text": "functional programming that might be something that resonates with you um you",
    "start": "194200",
    "end": "199360"
  },
  {
    "text": "might already know about and love working with the beam if you're one of the three people that rise their hands at the beginning of this talk um but you",
    "start": "199360",
    "end": "206360"
  },
  {
    "text": "might not know about live view I think we've established that you probably don't know that much about it which is why you're here so we're going to take a",
    "start": "206360",
    "end": "212720"
  },
  {
    "start": "211000",
    "end": "286000"
  },
  {
    "text": "big step back before we jump in and we're going to answer this question what is live view so live view brings the",
    "start": "212720",
    "end": "219400"
  },
  {
    "text": "power of functional programming and the beam to web development it is simple it is a declarative and above all a",
    "start": "219400",
    "end": "226080"
  },
  {
    "text": "functional web development framework so how does it work uh live view is",
    "start": "226080",
    "end": "231799"
  },
  {
    "text": "basically a process even if you're not familiar with the beam and working on the beam you probably familiar with a",
    "start": "231799",
    "end": "238000"
  },
  {
    "text": "process it spins up it receives events it holds some kind of internal state it",
    "start": "238000",
    "end": "243040"
  },
  {
    "text": "updates that State uh in response to user interactions and other types of messages and then it renders that state",
    "start": "243040",
    "end": "250760"
  },
  {
    "text": "on a web page for your wonderful users so a live VI state is maintained",
    "start": "250760",
    "end": "257320"
  },
  {
    "text": "in a functional and a mutable Elixir data structure called a socket so you",
    "start": "257320",
    "end": "262560"
  },
  {
    "text": "will hear me say the phrase socket when we take a look at some code later that is where the state of the live view",
    "start": "262560",
    "end": "267600"
  },
  {
    "text": "process lives if makes client server communication simple because of its",
    "start": "267600",
    "end": "273240"
  },
  {
    "text": "functional and declarative nature because it maintains this immutable state in the socket structure uh it's",
    "start": "273240",
    "end": "279479"
  },
  {
    "text": "pretty easy to work with and it vastly simplifies what can be a very complex",
    "start": "279479",
    "end": "284520"
  },
  {
    "text": "dance between the client and the server I want to talk a little bit about the live view life cycle how this",
    "start": "284520",
    "end": "290520"
  },
  {
    "start": "286000",
    "end": "391000"
  },
  {
    "text": "process-based communication Works um phase one is very normal if you have",
    "start": "290520",
    "end": "295840"
  },
  {
    "text": "ever built a web page you are familiar with phase one a your app receives a regular HTTP get request your user sits",
    "start": "295840",
    "end": "302919"
  },
  {
    "text": "down they open up their computer they type some address for your web app into the URL browser bar they hit enter",
    "start": "302919",
    "end": "309520"
  },
  {
    "text": "that's a get request your app receives it and a web page is rendered not quite end of story because then there's phase",
    "start": "309520",
    "end": "315800"
  },
  {
    "text": "two once that web page is rendered that's really where live view takes over the live view client side code will send",
    "start": "315800",
    "end": "322039"
  },
  {
    "text": "that websocket request for you as soon as that page loads it's going to open up and maintain this persistent by",
    "start": "322039",
    "end": "327960"
  },
  {
    "text": "directional websocket connection uh and over that connection is where all of the",
    "start": "327960",
    "end": "333120"
  },
  {
    "text": "live view communication flows uh your live view process running on the back end will receive an event up from the",
    "start": "333120",
    "end": "338720"
  },
  {
    "text": "client over that connection it'll do something to update that state that it's storing in the socket in response to",
    "start": "338720",
    "end": "344639"
  },
  {
    "text": "that and anytime the socket State changes live view will automatically render the page for you very very",
    "start": "344639",
    "end": "351039"
  },
  {
    "text": "efficiently only a teeny tiny bit of that page will update depending on whatever it is that has changed in the",
    "start": "351039",
    "end": "356919"
  },
  {
    "text": "live view State as represented by the socket this is pretty much what live view looks",
    "start": "356919",
    "end": "362960"
  },
  {
    "text": "like and it really is as simple as that picture this circle as the websocket connection itself you have the client",
    "start": "362960",
    "end": "369520"
  },
  {
    "text": "JavaScript code that you didn't write this is all live view framework hanging out on the front end you've got your",
    "start": "369520",
    "end": "374639"
  },
  {
    "text": "live view process running on the back end a client sends an event up to the",
    "start": "374639",
    "end": "379800"
  },
  {
    "text": "server because the user let's say clicked a button process State updates some small diff is sent down to the",
    "start": "379800",
    "end": "386280"
  },
  {
    "text": "client again and something changes on the page and it's really just that simple um so what's so great about this",
    "start": "386280",
    "end": "393960"
  },
  {
    "start": "391000",
    "end": "604000"
  },
  {
    "text": "it sounds simple but it also feels like it could be complex if you were responsible for writing like any of the",
    "start": "393960",
    "end": "399400"
  },
  {
    "text": "code that supports this life cycle but that's the beauty of the live view framework it really handles all of those",
    "start": "399400",
    "end": "405080"
  },
  {
    "text": "details for you and you get a lot of benefits from this so it optimizes for developer productivity because you and",
    "start": "405080",
    "end": "411560"
  },
  {
    "text": "your team get to keep their brain firmly on the server side you don't have to write JavaScript code I say you don't",
    "start": "411560",
    "end": "418680"
  },
  {
    "text": "have to write not you'll never write because you can still integrate custom",
    "start": "418680",
    "end": "423800"
  },
  {
    "text": "sophisticated you know fancier little bits of JavaScript to get those really nice interactions that your users may",
    "start": "423800",
    "end": "430080"
  },
  {
    "text": "require but that sort of tedious boiler plate how does the client send a message to the server how does the server",
    "start": "430080",
    "end": "436440"
  },
  {
    "text": "respond to the client how does the client act on that response by updating the page all of that is handled by the",
    "start": "436440",
    "end": "442599"
  },
  {
    "text": "live view framework itself because it is very declarative you never have to tell live VI how to do something you'll only",
    "start": "442599",
    "end": "449400"
  },
  {
    "text": "never tell it what to do and we're going to see that in action um in the rest of this talk so that means that you get to",
    "start": "449400",
    "end": "455319"
  },
  {
    "text": "write pretty much pure backend code pure functional Elixir code on the back end",
    "start": "455319",
    "end": "460840"
  },
  {
    "text": "you don't have to do this complicated coordination between maybe your front end team and your backend team you don't",
    "start": "460840",
    "end": "467199"
  },
  {
    "text": "have anybody writing up a real quick API spec so they can get it to the front end team so that they can hopefully build a",
    "start": "467199",
    "end": "473840"
  },
  {
    "text": "bunch of react components that align with that spec you don't have to deal with complicated job JavaScript testing",
    "start": "473840",
    "end": "480199"
  },
  {
    "text": "Frameworks you don't need an onerous release cycle where you're trying to coordinate the backend changes and the",
    "start": "480199",
    "end": "485840"
  },
  {
    "text": "front end changes because you're really just writing Elixir code on the back end to get a fast interactive realtime",
    "start": "485840",
    "end": "492520"
  },
  {
    "text": "single page application you don't have to write code",
    "start": "492520",
    "end": "498400"
  },
  {
    "text": "that manages concurrency or builds resiliency because live view is written in Elixir it is running on top of the",
    "start": "498400",
    "end": "504800"
  },
  {
    "text": "beam even if you're not super familiar with the beam you're probably a little bit familiar with the con ceps of fault",
    "start": "504800",
    "end": "509879"
  },
  {
    "text": "tolerance and concurrency and these are things that are baked into the beam for free so you don't have to write code",
    "start": "509879",
    "end": "515440"
  },
  {
    "text": "that takes advantage of them your live view is resilient if it crashes it'll start right back up because your Phoenix",
    "start": "515440",
    "end": "521959"
  },
  {
    "text": "web application is supervising that live view process and it'll just kick it back up for you uh you can massively scale up",
    "start": "521959",
    "end": "528920"
  },
  {
    "text": "your web application in a huge distributed system with ease because the beam allows for that so you get all the",
    "start": "528920",
    "end": "534839"
  },
  {
    "text": "benefits of the beam um without having to actually do anything in order order to unlock those",
    "start": "534839",
    "end": "541399"
  },
  {
    "text": "benefits what else uh as I said earlier you don't have to manage the details of that client server communication the",
    "start": "541399",
    "end": "547600"
  },
  {
    "text": "framework does all of that for you and you don't have to write tedious JavaScript and I really do want to make",
    "start": "547600",
    "end": "552760"
  },
  {
    "text": "this distinction because when livey first came out a couple years ago all of us Elixir developers who tend to be very",
    "start": "552760",
    "end": "558360"
  },
  {
    "text": "backend focused were totally ecstatic because we felt like we were finally freed from front-end web development and",
    "start": "558360",
    "end": "565120"
  },
  {
    "text": "in a sense that's true we don't need these cumbersome frontend Frameworks",
    "start": "565120",
    "end": "570200"
  },
  {
    "text": "anymore in order to get these really sophisticated really interactive single page applications you don't have to",
    "start": "570200",
    "end": "576800"
  },
  {
    "text": "write that JavaScript boiler plate that sends messages to the server responds to",
    "start": "576800",
    "end": "581880"
  },
  {
    "text": "the payloads that it gets back and actually makes those changes to the page but that doesn't mean that you can't",
    "start": "581880",
    "end": "587680"
  },
  {
    "text": "integrate the sophisticated JavaScript that your users might require live view makes it easy for you to do that there's",
    "start": "587680",
    "end": "593560"
  },
  {
    "text": "a set of features that we'll take a brief look at later on in this talk so you don't have to write the boring parts",
    "start": "593560",
    "end": "598760"
  },
  {
    "text": "of JavaScript but you can still meet the demands of your users in your single page app all right so as a result of all of",
    "start": "598760",
    "end": "606120"
  },
  {
    "start": "604000",
    "end": "701000"
  },
  {
    "text": "these wonderful benefits that I've totally convinced you of live view adoption has really been encouraging um",
    "start": "606120",
    "end": "612720"
  },
  {
    "text": "I would say that it's really become the standard for web development if you're already working with Elixir if you're",
    "start": "612720",
    "end": "619240"
  },
  {
    "text": "already working with Phoenix so we've got companies that are already using these languages and this framework who",
    "start": "619240",
    "end": "624720"
  },
  {
    "text": "are reaching for live VI now as a matter of course um I have seen lots and lots of smaller consultancies that may or may",
    "start": "624720",
    "end": "631600"
  },
  {
    "text": "not already be working with Elixir beginning to reach for live view because it makes their small teams extremely",
    "start": "631600",
    "end": "637560"
  },
  {
    "text": "productive when it comes to spinning up web applications um and it's also very often used when you need to solve",
    "start": "637560",
    "end": "644440"
  },
  {
    "text": "internal or like admin tooling problems where the barrier to entry uh for live view is very low you have a problem that",
    "start": "644440",
    "end": "651160"
  },
  {
    "text": "you need to solve internally you don't necessarily need to sell your whole organization on a brand new framework",
    "start": "651160",
    "end": "656839"
  },
  {
    "text": "because it's an internal or an admin tool it's kind of an easy answer so um",
    "start": "656839",
    "end": "662160"
  },
  {
    "text": "let's see companies like dockyard almic cars.com folks that are already using Elixir are certainly using Live View",
    "start": "662160",
    "end": "669680"
  },
  {
    "text": "today and we have begun to see live view I think Drive Elixir adoption a little",
    "start": "669680",
    "end": "676160"
  },
  {
    "text": "bit uh I believe it's Spotify a couple years ago although I don't know where they're at with it these days Spotify",
    "start": "676160",
    "end": "682440"
  },
  {
    "text": "began using live view and I think that was their entry point into Elixir and into the beam ecosystem so we're",
    "start": "682440",
    "end": "689279"
  },
  {
    "text": "beginning to see a little bit of this type of adoption being driven by the compelling case that live you makes for",
    "start": "689279",
    "end": "695399"
  },
  {
    "text": "web developers um but adoption I think outside the Elixir Community is slow which you know is not surprising but I",
    "start": "695399",
    "end": "702120"
  },
  {
    "start": "701000",
    "end": "726000"
  },
  {
    "text": "want to really dig into what's standing in the way we're going to move on now we'll",
    "start": "702120",
    "end": "707800"
  },
  {
    "text": "talk a little bit about what these Common live view adoption blockers Beyond The Elixir and the beam Community",
    "start": "707800",
    "end": "713519"
  },
  {
    "text": "are I'll show you how live view knocks them down and where does that leave us next and I'll hopefully argue that it",
    "start": "713519",
    "end": "720399"
  },
  {
    "text": "leaves us poised for much wider spread Elixir and beam adoption through live",
    "start": "720399",
    "end": "725519"
  },
  {
    "text": "view all right so what are some of these common blockers um and really these are not necessarily specific to live view",
    "start": "725519",
    "end": "732839"
  },
  {
    "start": "726000",
    "end": "763000"
  },
  {
    "text": "these are the common challenges that I think any web developer any web development framework faces and live",
    "start": "732839",
    "end": "739120"
  },
  {
    "text": "view has a neat a beautiful and elegant solution for every single one of them all right going through this list and",
    "start": "739120",
    "end": "745440"
  },
  {
    "text": "then we're going to dig in in a little bit greater detail we're going to talk about security Challen Alles State Recovery uh file uploads code",
    "start": "745440",
    "end": "752760"
  },
  {
    "text": "organization integrating JavaScript and efficient data transfer and then I dare you to tell me that any framework that",
    "start": "752760",
    "end": "759040"
  },
  {
    "text": "solves for all of these is not a very compelling Choice all right so securing your live views what is the problem with",
    "start": "759040",
    "end": "765399"
  },
  {
    "start": "763000",
    "end": "1018000"
  },
  {
    "text": "security in live view and more generally so one of the reasons why live view is so great uh is because it's very fast",
    "start": "765399",
    "end": "772160"
  },
  {
    "text": "it's an extremely Snappy user experience and one of the reasons why this is true is because live view optimizes p page",
    "start": "772160",
    "end": "779079"
  },
  {
    "text": "load times with live navigation and the way it does this is by reusing the",
    "start": "779079",
    "end": "784120"
  },
  {
    "text": "websocket connection when you're navigating between different live view pages that shaves off a little bit of",
    "start": "784120",
    "end": "789399"
  },
  {
    "text": "time and users notice it um but what this means is that there is no new HTTP",
    "start": "789399",
    "end": "795040"
  },
  {
    "text": "request if you're live navigating between different live view Pages which means that the router of your",
    "start": "795040",
    "end": "800800"
  },
  {
    "text": "application could be skipped entirely when you're performing this type of live navigation um so what that means is that",
    "start": "800800",
    "end": "809279"
  },
  {
    "text": "the place where most of your o logic lives which is the router uh didn't get",
    "start": "809279",
    "end": "814680"
  },
  {
    "text": "visited when somebody navigated between two live view Pages which could be a problem certainly could be a security",
    "start": "814680",
    "end": "821360"
  },
  {
    "text": "problem but it's not just a live view problem live view encountered it very clearly because of this particular type",
    "start": "821360",
    "end": "827079"
  },
  {
    "text": "of optimization but there is absolutely a more General problem around how we secure any single page application um",
    "start": "827079",
    "end": "834720"
  },
  {
    "text": "and take advantage of the efficiency of websockets live view has a solution for it it is called live sessions the live",
    "start": "834720",
    "end": "841519"
  },
  {
    "text": "view framework provides this tool live sessions let you really easily share any type of off logic between a group of",
    "start": "841519",
    "end": "848360"
  },
  {
    "text": "live views while still allowing you to take advantage of this live navigation where you reuse that websocket",
    "start": "848360",
    "end": "854079"
  },
  {
    "text": "connection and get that really fast page navigation experience for your users we're going to take a little bit of a",
    "start": "854079",
    "end": "859600"
  },
  {
    "text": "look at some code we're not going to get too detailed I promise um so here's your Phoenix router you are grouping together",
    "start": "859600",
    "end": "865839"
  },
  {
    "text": "let's say some admin routes that are all live view routes you use this live session block and you say that on Mount",
    "start": "865839",
    "end": "873399"
  },
  {
    "text": "which is when a live view process initializes we should invoke a module called user off live and let's go look",
    "start": "873399",
    "end": "880320"
  },
  {
    "text": "at that module now this is where we can put some off logic we can look for a current user and if we find one or not",
    "start": "880320",
    "end": "886720"
  },
  {
    "text": "we can pop it into the socket which I told you guys earlier is where the state of our live view process lives um and",
    "start": "886720",
    "end": "894120"
  },
  {
    "text": "then we'll do some checks if the socket has a current user we'll return this this continue tupal and if it doesn't",
    "start": "894120",
    "end": "900839"
  },
  {
    "text": "we'll return this Halt tupal and we'll redirect in this case we're redirecting to the root path um so even if you're",
    "start": "900839",
    "end": "906160"
  },
  {
    "text": "not super familiar with Elixir this code I think reads really nicely which is by the way one of the benefits of Elixir",
    "start": "906160",
    "end": "911560"
  },
  {
    "text": "it's very uh idiomatic very eloquent another thing I want to point out here which is one of the advantages of",
    "start": "911560",
    "end": "918000"
  },
  {
    "text": "reaching for a functional language for web development is you get these really nice pipelines of code so the socket is",
    "start": "918000",
    "end": "925839"
  },
  {
    "text": "this immutable functional data structure and the assign function is the reducer",
    "start": "925839",
    "end": "931440"
  },
  {
    "text": "that you'll call again and again to annotate or update the state of that socket and we can pipe our socket",
    "start": "931440",
    "end": "938040"
  },
  {
    "text": "through chains and chains of smaller reducer functions that annotate or update that state in a little um",
    "start": "938040",
    "end": "944639"
  },
  {
    "text": "specific way and this is just one example of a pattern that you're going to see again and again if you're looking through live view code you'll see the",
    "start": "944639",
    "end": "951560"
  },
  {
    "text": "socket and the assign function being used to change the state of the socket",
    "start": "951560",
    "end": "957000"
  },
  {
    "text": "uh which is the state of the live view that's just a nice little benefit I think of working with a functional language and we get to bring that",
    "start": "957000",
    "end": "963199"
  },
  {
    "text": "Elegance we get to bring that Simplicity and that immutability into web development with live view so in any",
    "start": "963199",
    "end": "969480"
  },
  {
    "text": "case we've got a pretty straightforward module with one function in it here that contains some off logic and we've",
    "start": "969480",
    "end": "975560"
  },
  {
    "text": "provided an instruction in our router that any set of live routes grouped within this live session should always",
    "start": "975560",
    "end": "982120"
  },
  {
    "text": "have this logic invoked whenever a live view starts up whether you were live navigated to it over that shared",
    "start": "982120",
    "end": "987959"
  },
  {
    "text": "websocket or not so again we don't have to teach live view how to do the sharing",
    "start": "987959",
    "end": "993279"
  },
  {
    "text": "of that logic we didn't have to write any code that tells live VI this is where and when you invoke this shared",
    "start": "993279",
    "end": "1000560"
  },
  {
    "text": "logic all we had to do was add one line of code into our router to say this is the shared Logic for these routes and",
    "start": "1000560",
    "end": "1007759"
  },
  {
    "text": "then we had to find the home for that shared logic which is in the module that we specified that's pretty much it we",
    "start": "1007759",
    "end": "1014360"
  },
  {
    "text": "just had to tell it what to do not when to do it and not how to do it and the this again is the really declarative",
    "start": "1014360",
    "end": "1020440"
  },
  {
    "start": "1018000",
    "end": "1350000"
  },
  {
    "text": "nature of live view keeps things really simple for us the framework handles the hard Parts the tedious the repetitive",
    "start": "1020440",
    "end": "1027079"
  },
  {
    "text": "details and it exposes to us as application developers the levers that we need to pull to implement the",
    "start": "1027079",
    "end": "1033319"
  },
  {
    "text": "specific Logic for our application to solve the needs of our users in our organization all right so we've handled",
    "start": "1033319",
    "end": "1040918"
  },
  {
    "text": "security we're totally convinced it's the right solution for securing our single page application what about State",
    "start": "1040919",
    "end": "1046720"
  },
  {
    "text": "Recovery what about when connections are spotty uh what about when a user has",
    "start": "1046720",
    "end": "1052080"
  },
  {
    "text": "filled out 99 steps of your 100 page form and then their router cuts out how",
    "start": "1052080",
    "end": "1058320"
  },
  {
    "text": "absolutely tragic if they would have to go back to the beginning they would be very upset with you um so this is a",
    "start": "1058320",
    "end": "1063360"
  },
  {
    "text": "problem what happens during a deploy what happens if the live view process terminates for any reason loss of",
    "start": "1063360",
    "end": "1068440"
  },
  {
    "text": "connectivity and so on um until actually this is a little out of date until maybe",
    "start": "1068440",
    "end": "1073600"
  },
  {
    "text": "about a year ago the state of that live view would have been lost um but live view has had a several solutions for",
    "start": "1073600",
    "end": "1080240"
  },
  {
    "text": "this problem in recent years and months um we wouldn't want to see this happen we wouldn't want to see form Fields",
    "start": "1080240",
    "end": "1086240"
  },
  {
    "text": "emptied for example I personally get like so frustrated when something like that happens if you're filling out a",
    "start": "1086240",
    "end": "1092240"
  },
  {
    "text": "complicated form and again this isn't just a live view problem how do we manage persistent state in our single",
    "start": "1092240",
    "end": "1097960"
  },
  {
    "text": "page apps when a connection is lost live view has a solution for this too it actually has like five solutions for",
    "start": "1097960",
    "end": "1104240"
  },
  {
    "text": "this that you get to pick and choose from so live view has a feature called Auto recovery which guarantees that the",
    "start": "1104240",
    "end": "1110080"
  },
  {
    "text": "form state if you have a form on your page is restored if the live view disconnects or crashes or is terminated",
    "start": "1110080",
    "end": "1116120"
  },
  {
    "text": "for any reason so when a live view connects initially the live view JavaScript framework will execute any",
    "start": "1116120",
    "end": "1122960"
  },
  {
    "text": "Phoenix change events that you've embedded on your page Phoenix change events are little bits of annotation",
    "start": "1122960",
    "end": "1129000"
  },
  {
    "text": "that you can add to any HTML element like a form field for example and what those uh annotations do is it tells live",
    "start": "1129000",
    "end": "1136720"
  },
  {
    "text": "view to send a message message over the web sockit connection to the live view process running on the server and it",
    "start": "1136720",
    "end": "1142880"
  },
  {
    "text": "sends that message with whatever data may have been present in the form field these Phoenix change events are how form",
    "start": "1142880",
    "end": "1149159"
  },
  {
    "text": "data get to the server when the user is filling out the form the first time as long as that content remains in the form",
    "start": "1149159",
    "end": "1155720"
  },
  {
    "text": "field if the live view disconnects and reconnects you'll get that same behavior running for you again for free your form",
    "start": "1155720",
    "end": "1162080"
  },
  {
    "text": "state will automatically be recovered on the server so you get form recovery for free you don't have to do any you don't",
    "start": "1162080",
    "end": "1168799"
  },
  {
    "text": "have to change anything the way that you've coded your template to handle a user interacting with the form",
    "start": "1168799",
    "end": "1174679"
  },
  {
    "text": "automatically gives you form State Recovery um but you might need more than this and you can certainly have it there",
    "start": "1174679",
    "end": "1181000"
  },
  {
    "text": "is another annotation you can add to your form or a forum field or any element on your HTML page it is the",
    "start": "1181000",
    "end": "1187720"
  },
  {
    "text": "Phoenix auto recover binding and you can trigger custom events to fire when the",
    "start": "1187720",
    "end": "1193200"
  },
  {
    "text": "live view process mounts or starts up on the back end if that's not enough you have another option you could also",
    "start": "1193200",
    "end": "1199799"
  },
  {
    "text": "restore Live use date from the client you could put knock down all my Waters you could put the state from your form",
    "start": "1199799",
    "end": "1207600"
  },
  {
    "text": "into like local storage or client storage in the browser and you could use this feature to tell live view please",
    "start": "1207600",
    "end": "1213679"
  },
  {
    "text": "take the state out of the client when the live view starts send it to the live view process running on the server and",
    "start": "1213679",
    "end": "1220280"
  },
  {
    "text": "you can tell that process take that state and put it in socket assigns um so we're going to break that down so you",
    "start": "1220280",
    "end": "1226440"
  },
  {
    "text": "would put your state in local or session storage in the client in your browser you would add a little bit of code to",
    "start": "1226440",
    "end": "1232919"
  },
  {
    "text": "the only tiny bit of La view JavaScript that is exposed to you as a developer that says take the state from local",
    "start": "1232919",
    "end": "1240200"
  },
  {
    "text": "storage put it in some pams and then this is pretty much what that looks like in your appjs file that is generated for",
    "start": "1240200",
    "end": "1248200"
  },
  {
    "text": "you when you begin a new Phoenix Live View application you get this file and it has like four lines of code in it it",
    "start": "1248200",
    "end": "1254840"
  },
  {
    "text": "looks something like this you could add this key to those those pams you could say let's add a restore key we're going",
    "start": "1254840",
    "end": "1260919"
  },
  {
    "text": "to populate it with something that I pulled from session storage and we're going to say that when the live socket",
    "start": "1260919",
    "end": "1266799"
  },
  {
    "text": "initializes and that second snippet of code there let's add those params into the mix and then the very last thing you",
    "start": "1266799",
    "end": "1272679"
  },
  {
    "text": "have to do is just tell your live view process when it starts up use those params put them in the socket that's",
    "start": "1272679",
    "end": "1278400"
  },
  {
    "text": "going to look something like this your Mount function is a call back function that you implement in your live view module this is one of the very first",
    "start": "1278400",
    "end": "1284919"
  },
  {
    "text": "things that gets called when the live view starts when a user visits your web page all we're doing is pulling those uh",
    "start": "1284919",
    "end": "1290960"
  },
  {
    "text": "that data out of the prams and using it to populate the socket which becomes the state of your live view so with like",
    "start": "1290960",
    "end": "1298360"
  },
  {
    "text": "three lines of code yeah you get very",
    "start": "1298360",
    "end": "1303480"
  },
  {
    "text": "sophisticated um state recovery from the client that you have a lot of control",
    "start": "1303480",
    "end": "1308679"
  },
  {
    "text": "over so with the auto recovery that you get for free live view handles I would",
    "start": "1308679",
    "end": "1314520"
  },
  {
    "text": "say like 90% of your state recovery needs and if you need more than that you can leverage the custom recovery events",
    "start": "1314520",
    "end": "1320720"
  },
  {
    "text": "or you can use this client State restoration pattern so live view takes care of 90% of your use cases and gives",
    "start": "1320720",
    "end": "1327559"
  },
  {
    "text": "you the tools you need to solve the other 10% if your needs are a little bit more custom or a little bit more",
    "start": "1327559",
    "end": "1333080"
  },
  {
    "text": "sophisticated than that and that's a pattern that you're going to see again and again in live view the framework",
    "start": "1333080",
    "end": "1338360"
  },
  {
    "text": "handles 90% of the problems that you need to solve and it provides the means",
    "start": "1338360",
    "end": "1343400"
  },
  {
    "text": "for you to solve the other 10% if the requirements of your application require",
    "start": "1343400",
    "end": "1348720"
  },
  {
    "text": "it okay so let's move on to the next common web development problem that live view solves and it's file uploads what's",
    "start": "1348720",
    "end": "1355559"
  },
  {
    "start": "1350000",
    "end": "1654000"
  },
  {
    "text": "the problem with file uploads um they're hard and they're pretty much required by any average web app today I would be",
    "start": "1355559",
    "end": "1362120"
  },
  {
    "text": "hardpressed to find a web app where you don't at some point maybe need to upload a file you're posting a tweet and you",
    "start": "1362120",
    "end": "1369039"
  },
  {
    "text": "want a picture of this fabulous conference um you're uploading a file and so on um but like I said they're",
    "start": "1369039",
    "end": "1375440"
  },
  {
    "text": "hard there are a lot of pure Javas script code plugins let's say that you could use more complex backend Solutions",
    "start": "1375440",
    "end": "1383520"
  },
  {
    "text": "um it's an everyday problem that can sometimes require you to write a lot of",
    "start": "1383520",
    "end": "1388679"
  },
  {
    "text": "boring complicated code which live view absolutely has a solution for so again",
    "start": "1388679",
    "end": "1394000"
  },
  {
    "text": "not just a live view problem it's complicated and common and we often have to reach for these thirdparty JS",
    "start": "1394000",
    "end": "1400320"
  },
  {
    "text": "dependencies that can be kind of a pain to incorporate in our applications so live VI provides an upload API that",
    "start": "1400320",
    "end": "1406919"
  },
  {
    "text": "supports Interactive either direct to server or direct to Cloud file uploads and like everything in live view it's",
    "start": "1406919",
    "end": "1413200"
  },
  {
    "text": "very easy to work with um three steps here you're going to when your live view process starts up in that mount callback",
    "start": "1413200",
    "end": "1420400"
  },
  {
    "text": "function that we saw earlier you're going to provide a simple instruction to say we're going to upload some files",
    "start": "1420400",
    "end": "1425520"
  },
  {
    "text": "here are the spec for those files maybe they can only be jpeg maybe they need to be a certain size and so on and this is",
    "start": "1425520",
    "end": "1432000"
  },
  {
    "text": "what that looks like you use the allow upload function in this case I'm saying that I'm going to allow an upload called",
    "start": "1432000",
    "end": "1437480"
  },
  {
    "text": "cover image and it can be a JPEG you can provide more requirements or restrictions on that but this one is",
    "start": "1437480",
    "end": "1442880"
  },
  {
    "text": "pretty simple um what does this do so live you tracks uploads in the socket as",
    "start": "1442880",
    "end": "1448640"
  },
  {
    "text": "soon as you call this function it tracks them in a key in your socket State called uploads um and then live view",
    "start": "1448640",
    "end": "1455520"
  },
  {
    "text": "will automatically validate uploaded files against the spec that you provided so you're not going to have to write any",
    "start": "1455520",
    "end": "1461240"
  },
  {
    "text": "code yourself that says let me check the content of this file upload is it a JPEG is it the right side you told live view",
    "start": "1461240",
    "end": "1467919"
  },
  {
    "text": "what your spec is you don't have to tell it how to adhere to that spec it's going to do that for you um what else can we",
    "start": "1467919",
    "end": "1474039"
  },
  {
    "text": "do with uploads that are now stored in your socket State we can render errors we can render progress we can render",
    "start": "1474039",
    "end": "1479440"
  },
  {
    "text": "image previews let's take a little bit of a look at that in a moment so we tell live you what we want our users to be",
    "start": "1479440",
    "end": "1485799"
  },
  {
    "text": "able to upload then we're just going to attach the right form field to our form",
    "start": "1485799",
    "end": "1491960"
  },
  {
    "text": "look something like this we've got a for and we're using the live file input function this would be in some HTML",
    "start": "1491960",
    "end": "1497840"
  },
  {
    "text": "template and you're saying that this is going to be the file upload for that cover image upload that I told my live",
    "start": "1497840",
    "end": "1503880"
  },
  {
    "text": "view to validate that's pretty much it you could also do a drag and drop with the Phoenix drop Target attribute and",
    "start": "1503880",
    "end": "1510000"
  },
  {
    "text": "then bam you have drag and drop upload capability what else can we do as I said",
    "start": "1510000",
    "end": "1515440"
  },
  {
    "text": "you can display an image preview here's some more HTML we're going to use the live image preview function that's it",
    "start": "1515440",
    "end": "1521799"
  },
  {
    "text": "you've got an image preview um you want upload progress you got it all you need is to call entry. progress once to",
    "start": "1521799",
    "end": "1529039"
  },
  {
    "text": "iterate over the cover image uploads that might be available in your socket",
    "start": "1529039",
    "end": "1534440"
  },
  {
    "text": "uh you can also display upload errors pretty easily once again we're taking a look at all the entries in the uploads",
    "start": "1534440",
    "end": "1540200"
  },
  {
    "text": "cover image and we're displaying an error for it pretty simple pretty straightforward a handful of lines of",
    "start": "1540200",
    "end": "1546320"
  },
  {
    "text": "code we have enabled our live view to take file uploads to validate them we've",
    "start": "1546320",
    "end": "1551399"
  },
  {
    "text": "given the user the ability to click a button to attach a file or a field to drag and drop it into and with like",
    "start": "1551399",
    "end": "1557679"
  },
  {
    "text": "anywhere from one to three lines of code you can display an image preview progress and any upload errors pretty",
    "start": "1557679",
    "end": "1564399"
  },
  {
    "text": "straightforward um the very last piece of the puzzle is you have to tell your live view this is how I want you to save",
    "start": "1564399",
    "end": "1569840"
  },
  {
    "text": "the files that are uploaded that's really the only bit of complexity and that all has to do with the specific",
    "start": "1569840",
    "end": "1576039"
  },
  {
    "text": "needs of your application are you uploading them to S3 are you putting them in local storage and so on so you",
    "start": "1576039",
    "end": "1582480"
  },
  {
    "text": "would have an event handler for the save event that would get sent from the client to the server over the websocket",
    "start": "1582480",
    "end": "1588440"
  },
  {
    "text": "connection when the user submits the form and the socket is going to have all of the upload entries because you told",
    "start": "1588440",
    "end": "1594240"
  },
  {
    "text": "it to so I've got this helper function here called do consume uploaded entries",
    "start": "1594240",
    "end": "1599360"
  },
  {
    "text": "it calls consume uploaded entries which is provided to you for free by the live view framework you don't even have to do",
    "start": "1599360",
    "end": "1605720"
  },
  {
    "text": "the work of drilling down into that socket struct and pulling the uploaded file entries out of it you just call",
    "start": "1605720",
    "end": "1612360"
  },
  {
    "text": "consume uploaded entries it's going to yield each entry to you and you can put some custom logic in there I'm calling a",
    "start": "1612360",
    "end": "1619480"
  },
  {
    "text": "save upload function that's not pictured here as I said imagine you're sending them to S3 imagine you're putting them",
    "start": "1619480",
    "end": "1625159"
  },
  {
    "text": "in local storage totally up to you so again this pattern really emerges live view handles all the hard Parts you just",
    "start": "1625159",
    "end": "1632480"
  },
  {
    "text": "have to tell it what you want to upload give the user a for field the only code of any complexity that you need to write",
    "start": "1632480",
    "end": "1639080"
  },
  {
    "text": "is the code that speaks to the specific needs of your application where do you want to store file",
    "start": "1639080",
    "end": "1644840"
  },
  {
    "text": "uploads so the framework handles the hard part it's given you this really elegant API you just only need to write",
    "start": "1644840",
    "end": "1651320"
  },
  {
    "text": "the code for your own application's uploading needs uh and that's it for file uploads again handful of lines of",
    "start": "1651320",
    "end": "1657399"
  },
  {
    "start": "1654000",
    "end": "2044000"
  },
  {
    "text": "code you get a very very powerful file upload feature so what about code",
    "start": "1657399",
    "end": "1662440"
  },
  {
    "text": "organization um one of the things that always kind of stymied me the most when I was working with react which was",
    "start": "1662440",
    "end": "1667880"
  },
  {
    "text": "probably like seven years ago so maybe this experience is a little out of date but there's just so much code there's so",
    "start": "1667880",
    "end": "1675519"
  },
  {
    "text": "many nested I've seen these react files are like super super long you've probably seen them too and then they",
    "start": "1675519",
    "end": "1680799"
  },
  {
    "text": "start to form a really big Arrow going this way because you're nesting lots and lots of HTML you're nesting lots and",
    "start": "1680799",
    "end": "1687080"
  },
  {
    "text": "lots of little bits of JavaScript code that are all working together to build that single page application and that's",
    "start": "1687080",
    "end": "1694080"
  },
  {
    "text": "the problem um live view has this problem too where it can live view modules which represent those live view",
    "start": "1694080",
    "end": "1699840"
  },
  {
    "text": "processes on the back end can grow to handle lots of events if you have a lot of interaction going on on that page um",
    "start": "1699840",
    "end": "1706760"
  },
  {
    "text": "so the temp plates that go with those live view modules can encapsulate a lot of markup so there's no reason why you",
    "start": "1706760",
    "end": "1712919"
  },
  {
    "text": "couldn't get really gnarly looking live view templates and live view modules that kind of bring those same pain",
    "start": "1712919",
    "end": "1719159"
  },
  {
    "text": "points of a more traditional front-end framework um but again not just a live view problem the question really is how",
    "start": "1719159",
    "end": "1725480"
  },
  {
    "text": "can we compose uis that are clean and maintainable even when we have these",
    "start": "1725480",
    "end": "1730559"
  },
  {
    "text": "really complex single page applications that support a lot of user interaction live view has a solution for",
    "start": "1730559",
    "end": "1737399"
  },
  {
    "text": "for that um and it's components there are two types of components that you'll build into your live view applications",
    "start": "1737399",
    "end": "1743840"
  },
  {
    "text": "you'll use a live component when you need your piece of that particular page to handle some sort of interaction and",
    "start": "1743840",
    "end": "1751399"
  },
  {
    "text": "you'll use a function component when you're wrapping up reusable static",
    "start": "1751399",
    "end": "1756840"
  },
  {
    "text": "markup um then you'll use what I consider to be a very ergonomic component rendering syntax to compose",
    "start": "1756840",
    "end": "1763519"
  },
  {
    "text": "these uis together kind of like you're building um a beautiful PU uh we're going to take a look at a brief",
    "start": "1763519",
    "end": "1769600"
  },
  {
    "text": "example so here is an app that I built for the purposes of this talk and it's a",
    "start": "1769600",
    "end": "1775919"
  },
  {
    "text": "library browsing app um and there's not a lot going on on this page but it's it's not super simple we've got this",
    "start": "1775919",
    "end": "1783080"
  },
  {
    "text": "index of books we've got this kind of complex search form we're showing and hiding it we've got our header and our",
    "start": "1783080",
    "end": "1789399"
  },
  {
    "text": "little menu on the top there so could be really a lot of code that supports even a relatively simple UI um but live you",
    "start": "1789399",
    "end": "1796720"
  },
  {
    "text": "makes it easy to to keep it organized we would have our books index we would layer into there a search component and",
    "start": "1796720",
    "end": "1803640"
  },
  {
    "text": "within that we'll have a separate component for the search icon itself so we'll render the search component which",
    "start": "1803640",
    "end": "1809080"
  },
  {
    "text": "is a live component because it's going to handle the event that gets sent when that user submits the search form that's",
    "start": "1809080",
    "end": "1814600"
  },
  {
    "text": "going to end up on that index template and this is the syntax for rendering it it's kind of ergonomic I think you do",
    "start": "1814600",
    "end": "1821120"
  },
  {
    "text": "have to give it or you can give it many bits of data to do its job in this case the job of searching for books and",
    "start": "1821120",
    "end": "1828640"
  },
  {
    "text": "handling the event to search for books but simply you call live component and you give it the name of the component",
    "start": "1828640",
    "end": "1833960"
  },
  {
    "text": "you want to render and you give it some data that it may need to operate that live component is going to handle all",
    "start": "1833960",
    "end": "1840039"
  },
  {
    "text": "the search form events so we have an encapsulation for the behavior of the search form and this component's",
    "start": "1840039",
    "end": "1846080"
  },
  {
    "text": "template will render that search icon which is a function component it doesn't need to handle any Behavior it just",
    "start": "1846080",
    "end": "1851960"
  },
  {
    "text": "needs to sit there and show you a little magnifying glass and that's all that it does so you would have your index",
    "start": "1851960",
    "end": "1858080"
  },
  {
    "text": "template it would render your live component the live component would handle the behavior of the form it would",
    "start": "1858080",
    "end": "1863880"
  },
  {
    "text": "handle the events that get sent when the user actually searches for books and it would render the search icon for you",
    "start": "1863880",
    "end": "1869919"
  },
  {
    "text": "putting it all together that entire UI which was fairly complex can be summed up um with just kind of three pieces of",
    "start": "1869919",
    "end": "1876559"
  },
  {
    "text": "a diagram it's pretty simple so live view components give us the tools that we need to organize our live view and",
    "start": "1876559",
    "end": "1882880"
  },
  {
    "text": "compose these layered uis that make it easy to maintain there's a home for the behavior of the form there's a home for",
    "start": "1882880",
    "end": "1889600"
  },
  {
    "text": "the markup for the search icon and so on um we took a really brief look at a",
    "start": "1889600",
    "end": "1895960"
  },
  {
    "text": "function component I told you that the search icon itself was a function component function components are really",
    "start": "1895960",
    "end": "1901399"
  },
  {
    "text": "powerful ways to wrap up common and reusable markup in a manner that can actually be highly Dynamic um and the",
    "start": "1901399",
    "end": "1908559"
  },
  {
    "text": "reason that you can make them very Dynamic is with a pretty cool feature called component slots that we're going",
    "start": "1908559",
    "end": "1913600"
  },
  {
    "text": "to take a brief look at now another example uh what if we needed a function component for rendering a bootstrap",
    "start": "1913600",
    "end": "1920360"
  },
  {
    "text": "style card we're going to define the function component that renders some provided content into the specific Slots",
    "start": "1920360",
    "end": "1927960"
  },
  {
    "text": "of the card uh it's going to look a little bit like this we've got a module it's called card component it uses the",
    "start": "1927960",
    "end": "1933399"
  },
  {
    "text": "Phoenix component behavior and it implements a function called card that card function is the function component",
    "start": "1933399",
    "end": "1939360"
  },
  {
    "text": "itself it returns some markup represented by that sigil H the heeks",
    "start": "1939360",
    "end": "1945080"
  },
  {
    "text": "symbol that's where we'll put our HTML this is what it is going to look like when we're done we've got a bunch of",
    "start": "1945080",
    "end": "1951559"
  },
  {
    "text": "HTML markup it's using some I forget maybe Tailwind styles to make something that looks like a card and you can see",
    "start": "1951559",
    "end": "1958480"
  },
  {
    "text": "here what I want you to pay attention to is that we're using this render slot function to render some content into",
    "start": "1958480",
    "end": "1964960"
  },
  {
    "text": "this header div to render some content into this title div and to render some",
    "start": "1964960",
    "end": "1970559"
  },
  {
    "text": "content into the text div so what is that content and where did it come from I'll show you when we call on the",
    "start": "1970559",
    "end": "1976120"
  },
  {
    "text": "component so we've got our opening and closing component tags and we're passing",
    "start": "1976120",
    "end": "1981720"
  },
  {
    "text": "in I think in this case a book review it's what we're going to render in the card then we call on our header slot",
    "start": "1981720",
    "end": "1988320"
  },
  {
    "text": "everything in between the opening and closing header tags is the content that the card component will render when it",
    "start": "1988320",
    "end": "1993799"
  },
  {
    "text": "called render slot for the header content we're going to render the title in the same way we're going to render",
    "start": "1993799",
    "end": "1999840"
  },
  {
    "text": "the body in the same way and we're going to end up with this extremely beautiful card component here list of book reviews",
    "start": "1999840",
    "end": "2007399"
  },
  {
    "text": "by the characters from 30 Rock who definitely read the book so component slots allow us to",
    "start": "2007399",
    "end": "2013600"
  },
  {
    "text": "dynamically render any given piece of content into the function components markup we get these really easy to use",
    "start": "2013600",
    "end": "2021200"
  },
  {
    "text": "very reusable um pieces of code that render really beautifully and that are",
    "start": "2021200",
    "end": "2026559"
  },
  {
    "text": "really easy to use and I I think they are ergonomic right even if you don't know anything about live view so even if",
    "start": "2026559",
    "end": "2034000"
  },
  {
    "text": "you're you guys uh you can pretty much look at this and understand that inside a card we've got a header a title and a",
    "start": "2034000",
    "end": "2040480"
  },
  {
    "text": "body it reads pretty nicely it reads like English all right integrating JavaScript",
    "start": "2040480",
    "end": "2046000"
  },
  {
    "start": "2044000",
    "end": "2345000"
  },
  {
    "text": "I promised you earlier that you didn't have to write JavaScript but you get to write some JavaScript if you want to if",
    "start": "2046000",
    "end": "2052200"
  },
  {
    "text": "you need to and it's not a pain in the butt so what is the problem here integrating custom JavaScript can be",
    "start": "2052200",
    "end": "2057800"
  },
  {
    "text": "challenging and messy it can certainly be or was challenging and messy in live view when live view was a newer",
    "start": "2057800",
    "end": "2063760"
  },
  {
    "text": "framework um so that meant that earlier on in the life of live view needing a",
    "start": "2063760",
    "end": "2069280"
  },
  {
    "text": "lot of complex interactions needing a lot of JavaScript would actually drive people away from live view um so simple",
    "start": "2069280",
    "end": "2076878"
  },
  {
    "text": "UI interactions like toggling something showing and hiding a modal let's say the",
    "start": "2076879",
    "end": "2082118"
  },
  {
    "text": "easiest way to do that in live view up until like a year ago would have been to round trip to the server to update",
    "start": "2082119",
    "end": "2088200"
  },
  {
    "text": "something in that socket state that determines whether or not a particular element on the page should be shown or",
    "start": "2088200",
    "end": "2093358"
  },
  {
    "text": "hidden uh which is kind of a bummer that's kind of the benefit of java JavaScript is little things like showing",
    "start": "2093359",
    "end": "2098720"
  },
  {
    "text": "and hiding an element uh can happen purely client side you don't have to do that expensive uh websocket",
    "start": "2098720",
    "end": "2105359"
  },
  {
    "text": "communication although it's not that expensive in order to do those simple interactions but again this isn't just a",
    "start": "2105359",
    "end": "2111400"
  },
  {
    "text": "live view proc uh problem how can we get these sophisticated interactive uis that",
    "start": "2111400",
    "end": "2116680"
  },
  {
    "text": "our users really demand today without the tons of complexity that come with a",
    "start": "2116680",
    "end": "2122280"
  },
  {
    "text": "lot of modern day JavaScript Frameworks there is a solution of course like you hasn't uh there is a feature in",
    "start": "2122280",
    "end": "2129440"
  },
  {
    "text": "live VI it's called JS commands or JS bindings and it allows us to execute",
    "start": "2129440",
    "end": "2134520"
  },
  {
    "text": "these kind of quotidian everyday utility operations like showing or hiding something fully on the client you don't",
    "start": "2134520",
    "end": "2141119"
  },
  {
    "text": "have to roundt trip to the server but you also don't have to write your own JavaScript again the declarative nature",
    "start": "2141119",
    "end": "2146400"
  },
  {
    "text": "of live view is such that we are going to tell live view what JavaScript to execute and it's going to do it for us",
    "start": "2146400",
    "end": "2154160"
  },
  {
    "text": "um okay so the JS bindings provide this job script command interface for live view the declarative interface through",
    "start": "2154160",
    "end": "2160160"
  },
  {
    "text": "which we tell live view what to do not how to do it you can also integrate uh",
    "start": "2160160",
    "end": "2165680"
  },
  {
    "text": "this feature with another live view feature called JS hooks which allows you to write your own more complex",
    "start": "2165680",
    "end": "2171880"
  },
  {
    "text": "JavaScript that can fire in response to particular user interactions like clicking a button scrolling to the top",
    "start": "2171880",
    "end": "2178520"
  },
  {
    "text": "or bottom of a page so you really get the full ability to integrate any custom JavaScript that you want live you",
    "start": "2178520",
    "end": "2184920"
  },
  {
    "text": "provides the places that you would slot that code in but I want to take a look at a simple example for uh JS bindings",
    "start": "2184920",
    "end": "2191839"
  },
  {
    "text": "right now so I showed you this earlier you click the little icon and it shows a form and then you click it again and it",
    "start": "2191839",
    "end": "2198119"
  },
  {
    "text": "hides a form simple enough even easier in live view you don't have to write a line of JavaScript to make this happen",
    "start": "2198119",
    "end": "2204480"
  },
  {
    "text": "but this interaction is executed fully on the client um we do it with the JS",
    "start": "2204480",
    "end": "2209680"
  },
  {
    "text": "toggle function which toggles the display attribute of the HTML element that you add it to earlier I showed you",
    "start": "2209680",
    "end": "2216280"
  },
  {
    "text": "guys that search. icon function component that we would call in our template here is its implementation I'm",
    "start": "2216280",
    "end": "2223000"
  },
  {
    "text": "using some icon that I got from a place that I forget and I'm attaching this",
    "start": "2223000",
    "end": "2228200"
  },
  {
    "text": "Phoenix click element binding we call the JS toggle function we're saying we",
    "start": "2228200",
    "end": "2233240"
  },
  {
    "text": "are toggling the element uh that has an ID of book search form as you can imagine our search form has just that ID",
    "start": "2233240",
    "end": "2240200"
  },
  {
    "text": "so now when the user clicks this icon it tells live view add or remove the",
    "start": "2240200",
    "end": "2245880"
  },
  {
    "text": "display attri rute of the specified HTML element all of that's happening in JavaScript all of that's happening on",
    "start": "2245880",
    "end": "2251960"
  },
  {
    "text": "the client so it's fast uh and you didn't have to write any of it you didn't have to tell live you how to do",
    "start": "2251960",
    "end": "2257000"
  },
  {
    "text": "that you just had to tell it what to do the what being show or hide the thing so",
    "start": "2257000",
    "end": "2262720"
  },
  {
    "text": "there are lots more JS commands available that wrap up pretty much all of the common interactions you can think",
    "start": "2262720",
    "end": "2267839"
  },
  {
    "text": "of adding removing a class showing and hiding an element like we just did adding temporary transition elements for",
    "start": "2267839",
    "end": "2274839"
  },
  {
    "text": "animation and so on um these basic JS bindings let you handle common UI",
    "start": "2274839",
    "end": "2280839"
  },
  {
    "text": "interactions purely on the client you don't have to roundt trip to the server and you don't have to write your own JavaScript you can but you don't have to",
    "start": "2280839",
    "end": "2288599"
  },
  {
    "text": "so again live VI is wrapping up these nitty-gritty details in the framework wrapping up these kind of tedious",
    "start": "2288599",
    "end": "2293920"
  },
  {
    "text": "quotidian everyday behaviors and giving you the tools that you need to invoke those behaviors or add the custom",
    "start": "2293920",
    "end": "2300319"
  },
  {
    "text": "functionality that you might need JS commands can do a lot more than what I've showed you in that two-minute demo",
    "start": "2300319",
    "end": "2306400"
  },
  {
    "text": "uh you could push events to the server in response to certain user interactions you can dispatch events to the client",
    "start": "2306400",
    "end": "2313280"
  },
  {
    "text": "and in response to that execute even more custom JavaScript using JS hooks in live view uh you can use the JS bindings",
    "start": "2313280",
    "end": "2321560"
  },
  {
    "text": "to do things like Implement infinite scrolling which actually thanks to a new feature that we'll talk about next and",
    "start": "2321560",
    "end": "2327440"
  },
  {
    "text": "last uh is even easier than it ever was uh this really just scrapes the surface there's a great demo project out there",
    "start": "2327440",
    "end": "2333599"
  },
  {
    "text": "by Chris McCord who is the creator of live you it's called live be if you want to see all of these complex",
    "start": "2333599",
    "end": "2338960"
  },
  {
    "text": "JavaScript interactions and all of their Elegance in live view definitely do check that",
    "start": "2338960",
    "end": "2344560"
  },
  {
    "text": "out okay very last thing very last problem that live VI solves beautifully for webdev and it's transferring data",
    "start": "2344560",
    "end": "2352160"
  },
  {
    "start": "2345000",
    "end": "2585000"
  },
  {
    "text": "efficiently what is the problem so managing large data sets in live view up",
    "start": "2352160",
    "end": "2357640"
  },
  {
    "text": "until recently meant that you were either going to store a lot of data on the server and you could also take advantage of this feature called Phoenix",
    "start": "2357640",
    "end": "2364520"
  },
  {
    "text": "update append that's another Dom element binding you would add to some element on your page um these were not great",
    "start": "2364520",
    "end": "2371440"
  },
  {
    "text": "storing a lot of data serers side in your live view processes state is not cheap and this Phoenix update append",
    "start": "2371440",
    "end": "2378079"
  },
  {
    "text": "feature is a little cumbersome to work with at least in my opinion um but again this is not just a live view problem the",
    "start": "2378079",
    "end": "2384520"
  },
  {
    "text": "question is how can we efficiently manage large data sets for our users in",
    "start": "2384520",
    "end": "2389560"
  },
  {
    "text": "our interactive web applications you've got a single page app you've got a billion songs you want your users to be",
    "start": "2389560",
    "end": "2396599"
  },
  {
    "text": "able to browse um It's A Hard problem to solve but live view has a solution for it there is a new feature in live view",
    "start": "2396599",
    "end": "2403280"
  },
  {
    "text": "it is called live view streams and it lets us efficiently manage large data sets by detaching them from the server",
    "start": "2403280",
    "end": "2409720"
  },
  {
    "text": "and telling live you to store them client side so storing a lot of data",
    "start": "2409720",
    "end": "2415240"
  },
  {
    "text": "client side um sounds kind of scary and painful but again live VI does it for",
    "start": "2415240",
    "end": "2420440"
  },
  {
    "text": "you and it exposes an API that you use to tell live view what to do with your",
    "start": "2420440",
    "end": "2425760"
  },
  {
    "text": "large data set not how to do it live VI knows how to do it we're going to look at a brief example so uh we're going to",
    "start": "2425760",
    "end": "2432280"
  },
  {
    "text": "be looking at a chat application example and the first thing we want to do is uh put a bunch of messages in the socket",
    "start": "2432280",
    "end": "2439560"
  },
  {
    "text": "state so that they can be displayed in the chat room so we'll be establishing what could be a very large data set in",
    "start": "2439560",
    "end": "2445119"
  },
  {
    "text": "this live view stream when the live view starts up when the user loads the web page for the chat application we've got",
    "start": "2445119",
    "end": "2451079"
  },
  {
    "text": "our Mount function that is a call back that's invoked when the live view process starts up so a user visits the",
    "start": "2451079",
    "end": "2456520"
  },
  {
    "text": "chat room web page live view process starts calls the mount function and then we're calling the stream function we're",
    "start": "2456520",
    "end": "2461680"
  },
  {
    "text": "saying put into the socket a stream it's going to have a key of messages it's going to contain in our case the last 10",
    "start": "2461680",
    "end": "2467599"
  },
  {
    "text": "messages could be the last 100 could be the last thousand could be the last million totally up to you then all we",
    "start": "2467599",
    "end": "2473480"
  },
  {
    "text": "need to do is render the content from that stream in our template it's going to look a little bit something like this",
    "start": "2473480",
    "end": "2478599"
  },
  {
    "text": "we're going to iterate over the messages that we put in the Stream and display their content pretty simple so again",
    "start": "2478599",
    "end": "2484319"
  },
  {
    "text": "this was like three lines of code and and we are now managing data very efficiently on the client side that data",
    "start": "2484319",
    "end": "2491000"
  },
  {
    "text": "those in our case 10 messages are no longer in the socket State on the back end they are embedded in the HTML only",
    "start": "2491000",
    "end": "2499319"
  },
  {
    "text": "and live VI is going to use the Dom ID that we put on that element to manage it for us this Dom ID right here so this is",
    "start": "2499319",
    "end": "2506040"
  },
  {
    "text": "a requirement of your markup when you're working with streams but once we've done that live view takes over from here it's",
    "start": "2506040",
    "end": "2512599"
  },
  {
    "text": "going to use uh that Dom ID to handle all of the insert updating deleting",
    "start": "2512599",
    "end": "2518240"
  },
  {
    "text": "overwriting anything that you want to do with your stream data so you're going to call stream functions server side that's",
    "start": "2518240",
    "end": "2524800"
  },
  {
    "text": "going to update live view state in the socket with some instructions about what to do with the stream should I append a",
    "start": "2524800",
    "end": "2530720"
  },
  {
    "text": "message should I update an existing message should I delete one should I delete all of them uh and then live is",
    "start": "2530720",
    "end": "2536800"
  },
  {
    "text": "going to execute those instructions for you on the client you don't have to write any of that code you're always only telling live view what to do never",
    "start": "2536800",
    "end": "2544400"
  },
  {
    "text": "how uh quick look at the delete feature brief look at some codee to really drive this home so let's say we've got a",
    "start": "2544400",
    "end": "2551240"
  },
  {
    "text": "button on the page for every message there's a little delete button it's going to send a delete event when you",
    "start": "2551240",
    "end": "2557040"
  },
  {
    "text": "click it here is the event handler for the delete event we find the message we delete it and then we call stream delete",
    "start": "2557040",
    "end": "2563520"
  },
  {
    "text": "we say hey live view can you please take this message out of the stream on the page that's it that is all you have to",
    "start": "2563520",
    "end": "2569880"
  },
  {
    "text": "do this one fraction of a line of code this tells live you to render the page",
    "start": "2569880",
    "end": "2575200"
  },
  {
    "text": "minus the message with this particular ID from the list that you had rendered in your",
    "start": "2575200",
    "end": "2581040"
  },
  {
    "text": "HTML it's pretty pretty simple that's it for deleting all right I've showed you a",
    "start": "2581040",
    "end": "2586559"
  },
  {
    "start": "2585000",
    "end": "2702000"
  },
  {
    "text": "lot of things we're going to wrap up and then we'll take some questions so live you solves are some of the most common",
    "start": "2586559",
    "end": "2591960"
  },
  {
    "text": "problems in webd especially when it comes to building these single page apps that need to be really interactive that",
    "start": "2591960",
    "end": "2597800"
  },
  {
    "text": "need to support real-time functionality exactly the kind of apps that can get really complex to write when you've got",
    "start": "2597800",
    "end": "2603680"
  },
  {
    "text": "client side code versus server side code uh it solves for things like security file upload state recovery code",
    "start": "2603680",
    "end": "2610280"
  },
  {
    "text": "organization JS requirements and working with large data sets it's a long list of problems that it has a nice solution for",
    "start": "2610280",
    "end": "2617319"
  },
  {
    "text": "live you wraps up the details to these problems in the framework and exposes simple apis to you so that you can",
    "start": "2617319",
    "end": "2624280"
  },
  {
    "text": "leverage those Solutions and augment them wherever you need to the declarative nature of live view handles",
    "start": "2624280",
    "end": "2630720"
  },
  {
    "text": "the hard parts of interactive web development you write only the application code that meets the needs of",
    "start": "2630720",
    "end": "2636839"
  },
  {
    "text": "your application the details of for example where to save an uploaded file or a specific little snippet of",
    "start": "2636839",
    "end": "2643680"
  },
  {
    "text": "JavaScript that you want to execute in in response to a user interaction you never have to write code that handles",
    "start": "2643680",
    "end": "2649599"
  },
  {
    "text": "the details for example of client server communication so I think because of that it's a really compelling solution for",
    "start": "2649599",
    "end": "2655760"
  },
  {
    "text": "building these interactive realtime apps not just for folks that are already using Elixir not just for people that",
    "start": "2655760",
    "end": "2661400"
  },
  {
    "text": "are already sold on the beam but for anyone working in web development today so we are getting close to 1 in live",
    "start": "2661400",
    "end": "2668480"
  },
  {
    "text": "view um I think it's going to happen in the next few months we'll see I think we're going to see accelerated adoption",
    "start": "2668480",
    "end": "2674000"
  },
  {
    "text": "I think it's going to push beam adoption and beyond that I think it's going to continue to make functional programming",
    "start": "2674000",
    "end": "2680359"
  },
  {
    "text": "relevant to web development because I think very often people reach for object orientation when they're building their",
    "start": "2680359",
    "end": "2685839"
  },
  {
    "text": "web apps they may reach for rails I think that's kind of still up there in terms of being a popular web development",
    "start": "2685839",
    "end": "2691520"
  },
  {
    "text": "application but this really brings those of us that are already sold on functional programming into the web",
    "start": "2691520",
    "end": "2697200"
  },
  {
    "text": "development space and it brings the benefits of functional languages into web development that's",
    "start": "2697200",
    "end": "2703220"
  },
  {
    "start": "2702000",
    "end": "2719000"
  },
  {
    "text": "[Applause]",
    "start": "2703220",
    "end": "2709150"
  },
  {
    "text": "it",
    "start": "2716960",
    "end": "2719960"
  }
]