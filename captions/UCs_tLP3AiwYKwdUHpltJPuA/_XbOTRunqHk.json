[
  {
    "text": "thank you very much um I've been at Google for nine years and uh a lot of that time we were",
    "start": "4080",
    "end": "10800"
  },
  {
    "text": "working on the V8 JavaScript engine uh now I'm working on the dart project and",
    "start": "10800",
    "end": "16379"
  },
  {
    "text": "you'll be seeing more about that in a moment so this is all about building your own",
    "start": "16379",
    "end": "21539"
  },
  {
    "text": "language so I feel everyone actually wants to invent their own computer language I did one with some friends at",
    "start": "21539",
    "end": "28619"
  },
  {
    "text": "school which is luckily sunk without trees very inspired by basic yeah",
    "start": "28619",
    "end": "35100"
  },
  {
    "text": "but um so many great motivations for making your own computer language something",
    "start": "35100",
    "end": "40980"
  },
  {
    "text": "Fame in the fortune and you know this I'm sure this happens people buy your",
    "start": "40980",
    "end": "46200"
  },
  {
    "text": "drinks on the streets and the parties hasn't haven't well maybe it happens yeah also they'll think you're a mass",
    "start": "46200",
    "end": "53700"
  },
  {
    "text": "murderer I don't know has anyone seen this game on the net um computer language inventor or mass",
    "start": "53700",
    "end": "60480"
  },
  {
    "text": "murderer so you have there's 10 questions you have to it's quite diff I actually got",
    "start": "60480",
    "end": "65580"
  },
  {
    "text": "less than 50 so I was probably overthinking it a bit but um",
    "start": "65580",
    "end": "71939"
  },
  {
    "text": "what do people think can I have a show of hands uh language designer",
    "start": "71939",
    "end": "77460"
  },
  {
    "text": "mass murderer oh come on this is this is Bertrand",
    "start": "77460",
    "end": "83159"
  },
  {
    "text": "Meyer the inventor of Eiffel so what do we think",
    "start": "83159",
    "end": "88500"
  },
  {
    "text": "uh language designer yeah mass murderer",
    "start": "88500",
    "end": "94860"
  },
  {
    "text": "yeah you're actually right here he killed an entire family in Ukraine so",
    "start": "94860",
    "end": "100619"
  },
  {
    "text": "we shouldn't really in a place like this should not be picking on computer scientists I mean what about the mathematicians like",
    "start": "100619",
    "end": "107579"
  },
  {
    "text": "any guesses who knows right",
    "start": "107579",
    "end": "115880"
  },
  {
    "text": "on a dark night yeah",
    "start": "116340",
    "end": "121860"
  },
  {
    "text": "well this is trick question that actually all mathematicians they all want field prizes actually so",
    "start": "121860",
    "end": "127439"
  },
  {
    "text": "they're all really clever mathematicians okay so how can we do this",
    "start": "127439",
    "end": "133980"
  },
  {
    "text": "um this has got quite a lot easier to make your own if you're going to make your own language you probably want your own compiler and this has got a lot",
    "start": "133980",
    "end": "139379"
  },
  {
    "text": "easier recently um the lvm open source compiler framework has has become very mature",
    "start": "139379",
    "end": "146160"
  },
  {
    "text": "it's got nice apis lots of great tools it's all open source under a very",
    "start": "146160",
    "end": "151200"
  },
  {
    "text": "liberal license which allows you to do uh pretty much what you want with it",
    "start": "151200",
    "end": "156959"
  },
  {
    "text": "um it's used by Apple for everything they have a lot of developers working on it",
    "start": "156959",
    "end": "162239"
  },
  {
    "text": "Google also has a lot of developers working on it and in the last few years it's grown",
    "start": "162239",
    "end": "169019"
  },
  {
    "text": "features to handle garbage collected languages and it's also available as a in a sort",
    "start": "169019",
    "end": "175379"
  },
  {
    "text": "of just in time form so if you have like an interpreted language that just in time compiles to",
    "start": "175379",
    "end": "181379"
  },
  {
    "text": "um to machine code it actually does that too the compile time is actually pretty bad because it's designed for ahead of time",
    "start": "181379",
    "end": "187800"
  },
  {
    "text": "so depends on how long running your programs are",
    "start": "187800",
    "end": "193620"
  },
  {
    "text": "so I'm going to do a little demo project [Music] um",
    "start": "193620",
    "end": "198720"
  },
  {
    "text": "I'm going to do it in that which is the language that I'm working on it's a really nice language I like to think we",
    "start": "198720",
    "end": "204840"
  },
  {
    "text": "put a lot of effort into thinking about the user experience for the programmer the whole sort of suggestions the",
    "start": "204840",
    "end": "210840"
  },
  {
    "text": "tooling and the in the the cycle time how long does it take from you make a change to",
    "start": "210840",
    "end": "216840"
  },
  {
    "text": "um you actually have the new version of the program running we want to keep that under a second because that makes a lot",
    "start": "216840",
    "end": "222480"
  },
  {
    "text": "of difference to program a productivity um and it's I mean if you're doing",
    "start": "222480",
    "end": "227760"
  },
  {
    "text": "something uh in 2016 on the client and that includes phones you should definitely take a look there's some nice",
    "start": "227760",
    "end": "233400"
  },
  {
    "text": "videos from the recent Dart Summit on on that so um it has some nice tooling as I said",
    "start": "233400",
    "end": "240060"
  },
  {
    "text": "jet brains I think is the is the tool of choice these days uh but I'm not going",
    "start": "240060",
    "end": "245519"
  },
  {
    "text": "to use that um so I started using VI in the late 80s and it's sort of",
    "start": "245519",
    "end": "252180"
  },
  {
    "text": "bits of my brain are now dedicated to the keystrokes like actually the bits",
    "start": "252180",
    "end": "257820"
  },
  {
    "text": "that other people used to recognize faces that's all vimkey Strokes with me so if I don't know who you are later",
    "start": "257820",
    "end": "264000"
  },
  {
    "text": "yeah sorry but got some great macros um and the language we've got to have",
    "start": "264000",
    "end": "270960"
  },
  {
    "text": "some sort of little simple language that we can handle in this form so I'm actually going to",
    "start": "270960",
    "end": "276060"
  },
  {
    "text": "compile regular Expressions down to machine code for this talk um I've got a thing about regular Expressions I don't know how it happened",
    "start": "276060",
    "end": "283380"
  },
  {
    "text": "um on the V8 project we we built a just-in-time compiler for the regular expression engine because we really like",
    "start": "283380",
    "end": "290220"
  },
  {
    "text": "to win on benchmarks and we had a benchmark that everyone was comparing with where the regular",
    "start": "290220",
    "end": "295979"
  },
  {
    "text": "Expressions were taking 25 percent of the time we optimized everything else so we built one a jits compiling I think",
    "start": "295979",
    "end": "305340"
  },
  {
    "text": "it was one of the first jit compiling regular expression engines for V8 which is now actually used in Chrome",
    "start": "305340",
    "end": "313259"
  },
  {
    "text": "and node.js of course it's also used in Firefox it's also used in the dart virtual machine",
    "start": "313259",
    "end": "319860"
  },
  {
    "text": "um so it's yeah it's got quite popular it's called irregx oh this is where I switched to a terminal",
    "start": "319860",
    "end": "326460"
  },
  {
    "text": "so I don't want to reveal the conclusions just yet so the first thing we're going to need for our for our little compilers we're",
    "start": "326460",
    "end": "333539"
  },
  {
    "text": "going to need a a parser so yeah it's good start",
    "start": "333539",
    "end": "339840"
  },
  {
    "text": "oh I I said I'm good at the keystrokes the one I use most is actually the backspace key",
    "start": "339840",
    "end": "346758"
  },
  {
    "text": "so um it needs a Constructor now in in that if if all you're going to",
    "start": "347820",
    "end": "354780"
  },
  {
    "text": "do with the um arguments is just put them in some Fields then you can just write this Dot",
    "start": "354780",
    "end": "362180"
  },
  {
    "text": "and then it'll just put put it in the field so that's our part of the class",
    "start": "363660",
    "end": "369419"
  },
  {
    "text": "we're going to need to keep track of um yeah I'm not going to type the whole thing that would probably get a little",
    "start": "369419",
    "end": "375180"
  },
  {
    "text": "bit boring so I've got I've got some pre-prepared Snippets but we're going to keep track of where",
    "start": "375180",
    "end": "381600"
  },
  {
    "text": "we've got in where we've got to so we've got a a position and the way it's going to work is",
    "start": "381600",
    "end": "388620"
  },
  {
    "text": "there's Alexa the Alexa reads it reads a token so we've always got a current token that we're looking at",
    "start": "388620",
    "end": "394860"
  },
  {
    "text": "and it keeps that normally you would have some sort of enum or some sort of class for the tokens in this case I'm",
    "start": "394860",
    "end": "400740"
  },
  {
    "text": "just going to use one character strings because vehicle expressions are actually quite simple",
    "start": "400740",
    "end": "406380"
  },
  {
    "text": "so here's the get token method uh it just reads the next character the next",
    "start": "406380",
    "end": "411840"
  },
  {
    "text": "token from the input stream increments the position and we have a sort of empty string token to indicate the end",
    "start": "411840",
    "end": "418979"
  },
  {
    "text": "and then we're going to need an expect method so this is for when you know what",
    "start": "418979",
    "end": "425580"
  },
  {
    "text": "tokens should be next in the input stream it's going to throw a syntax error if it's not there and then we have",
    "start": "425580",
    "end": "432300"
  },
  {
    "text": "accept which is going to uh which is where you think you might have a token",
    "start": "432300",
    "end": "437580"
  },
  {
    "text": "in the Stream and it returns true or false depending on whether it was actually there and consumes or steps",
    "start": "437580",
    "end": "443160"
  },
  {
    "text": "forward to the next token so far so good",
    "start": "443160",
    "end": "448199"
  },
  {
    "text": "um we're probably going to need a main function that gets some sort of input",
    "start": "448199",
    "end": "454560"
  },
  {
    "text": "in this case a nice little simple regular expression here a followed by an optional B followed by a c",
    "start": "454560",
    "end": "462680"
  },
  {
    "text": "um and uh there we go that's the uh the",
    "start": "462780",
    "end": "467880"
  },
  {
    "text": "basis um the password is going to generate an abstract syntax tree so it's a tree based structure",
    "start": "467880",
    "end": "474419"
  },
  {
    "text": "um we need a um an AST class",
    "start": "474419",
    "end": "480500"
  },
  {
    "text": "doesn't really have anything in it yet if it's going to be a tree we need to be sort of built to build up structures so",
    "start": "481380",
    "end": "486479"
  },
  {
    "text": "we need um",
    "start": "486479",
    "end": "492979"
  },
  {
    "text": "a binary thing there we go that also has",
    "start": "493940",
    "end": "502819"
  },
  {
    "text": "a Constructor has a left side and a right side",
    "start": "503759",
    "end": "511400"
  },
  {
    "text": "no more construction needed there the both left side and the right side",
    "start": "511800",
    "end": "517140"
  },
  {
    "text": "are asts there we go so that's the basis so what",
    "start": "517140",
    "end": "523380"
  },
  {
    "text": "what sort of syntactic structures do we have in a regular expression let's start with the with the simplest",
    "start": "523380",
    "end": "530339"
  },
  {
    "text": "um we have uh just a one character like a letter in the regular expression that has to match a letter in the string so",
    "start": "530339",
    "end": "536040"
  },
  {
    "text": "that's like a literal so we have a little class it's just has one field which is whatever",
    "start": "536040",
    "end": "542220"
  },
  {
    "text": "character it's supposed to be recognizing then we probably want to be able to put those together into maybe in our example",
    "start": "542220",
    "end": "549000"
  },
  {
    "text": "they get we have um",
    "start": "549000",
    "end": "553339"
  },
  {
    "text": "yeah here's this this one is an alternative so um this is like one thing after another like you have two first it",
    "start": "554940",
    "end": "561720"
  },
  {
    "text": "recognizes this then it recognizes that so that's uh we can use that to build trees and another thing you have in regular",
    "start": "561720",
    "end": "568200"
  },
  {
    "text": "Expressions you have like all so it has to be one thing or the other so that's called a disjunction",
    "start": "568200",
    "end": "573360"
  },
  {
    "text": "traditionally um so we're going to keep it simple uh",
    "start": "573360",
    "end": "578519"
  },
  {
    "text": "we do we do have it we need an empty alternative so this is for if you have or nothing at all so this is like a",
    "start": "578519",
    "end": "583860"
  },
  {
    "text": "regular expression that matches nothing that pretty much always succeeds so that's nice",
    "start": "583860",
    "end": "591740"
  },
  {
    "text": "right um so we've got we've got some data structures for our abstract syntax tree",
    "start": "592140",
    "end": "598200"
  },
  {
    "text": "we need to now actually pass it up so um this is the sort of lowest level so what",
    "start": "598200",
    "end": "605220"
  },
  {
    "text": "we're doing here is basically if you if you if you think about the languages you've seen you often get this sort of Backus now syntax which describes you",
    "start": "605220",
    "end": "613080"
  },
  {
    "text": "know an atom consists of this disjunction consists of several atoms etc etc so basically our pathway is just",
    "start": "613080",
    "end": "619500"
  },
  {
    "text": "going to be a recursive descent parser that moves that now if you read a compiler book it's almost certain to",
    "start": "619500",
    "end": "625740"
  },
  {
    "text": "tell you that bars are very difficult you're going to want to need a to use a parser generator the parser generator is",
    "start": "625740",
    "end": "632279"
  },
  {
    "text": "going to take an inscrutable language and generate enormous amounts of C code which you will then have to try to",
    "start": "632279",
    "end": "638459"
  },
  {
    "text": "understand and I mean this is true for most languages we probably need",
    "start": "638459",
    "end": "644760"
  },
  {
    "text": "I've had anything I don't actually think it's true it's true but um in this case we're going to make a nice simple language since since we're",
    "start": "644760",
    "end": "650880"
  },
  {
    "text": "designing it we can make sure that it's easy to pass and so we're going to make it so it can be passed with a recursive descent parser it's actually very simple",
    "start": "650880",
    "end": "658920"
  },
  {
    "text": "um it's easy to debug it's also easy to add nice error messages and it's just basically better than using a generator",
    "start": "658920",
    "end": "664320"
  },
  {
    "text": "although it's a little bit more work in the stuff I'm not even sure that's true so this this is the path for the for the",
    "start": "664320",
    "end": "669899"
  },
  {
    "text": "atom it recognizes either uh at the moment it's very simple like X language I think a letter or something in",
    "start": "669899",
    "end": "675420"
  },
  {
    "text": "Brackets which acts like a single unit um so we've got the accept if if we spot",
    "start": "675420",
    "end": "681540"
  },
  {
    "text": "an Open Bracket then we pass another regex inside and then we expect that to end with a close bracket otherwise it's",
    "start": "681540",
    "end": "687000"
  },
  {
    "text": "essential right and then um",
    "start": "687000",
    "end": "692940"
  },
  {
    "text": "this is uh this is to pass the term a term is basically an atom maybe followed by a question mark a question mark means",
    "start": "692940",
    "end": "699060"
  },
  {
    "text": "that's optional so the way we do that is we just actually have a disjunction between",
    "start": "699060",
    "end": "704279"
  },
  {
    "text": "either what was before the question mark Or Nothing which is basically what the question mark means in in regular",
    "start": "704279",
    "end": "710339"
  },
  {
    "text": "expression syntax um this is just an alternative basically",
    "start": "710339",
    "end": "717000"
  },
  {
    "text": "uh in the in the in this syntax and alternative just means it's a sequence of things that have to match one after",
    "start": "717000",
    "end": "722279"
  },
  {
    "text": "the other it's called an alternative because it goes inside a disjunction which is",
    "start": "722279",
    "end": "727860"
  },
  {
    "text": "a series of maybe just one thing separated by all signs so this is just this mirror is",
    "start": "727860",
    "end": "734519"
  },
  {
    "text": "basically just the syntax of a very simple regular expression uh languages so",
    "start": "734519",
    "end": "742740"
  },
  {
    "text": "what we do now yeah so we've um we've got the parser",
    "start": "742740",
    "end": "751579"
  },
  {
    "text": "we need to uh we need to actually have a path method that so the way the path method works is",
    "start": "751860",
    "end": "758220"
  },
  {
    "text": "first it gets the first token um then we parse a regular expression and then we expect to be at the end of",
    "start": "758220",
    "end": "764700"
  },
  {
    "text": "the input if there was a stray close bracket we'll get a syntax over here",
    "start": "764700",
    "end": "770100"
  },
  {
    "text": "um so that's pretty simple um we better put call the passer from",
    "start": "770100",
    "end": "776279"
  },
  {
    "text": "our main function so let's see how that works",
    "start": "776279",
    "end": "784040"
  },
  {
    "text": "um I think we don't want to hold that yeah so I've called it [Music]",
    "start": "785459",
    "end": "790620"
  },
  {
    "text": "um Grit",
    "start": "790620",
    "end": "794540"
  },
  {
    "text": "um so I don't know whether this is does everyone know this why grep is called grep people talk about it people say I'm",
    "start": "796980",
    "end": "803279"
  },
  {
    "text": "just going to grab through my bag from my battery pack or something exactly so it's from VI well it's from",
    "start": "803279",
    "end": "809880"
  },
  {
    "text": "one of the predecessors to VI so it's the command line you write colon G and then the regular expression GRE and then",
    "start": "809880",
    "end": "817079"
  },
  {
    "text": "P for print and it prints out things so since I'm from Denmark this is a slight variation regular expression in Danish",
    "start": "817079",
    "end": "822959"
  },
  {
    "text": "would be something like and print his trick so",
    "start": "822959",
    "end": "828120"
  },
  {
    "text": "Global regulatory",
    "start": "828120",
    "end": "831959"
  },
  {
    "text": "okay so it runs you'll trust me here don't you no it",
    "start": "833820",
    "end": "841500"
  },
  {
    "text": "passed he built it it really did pass past that so that that's great um",
    "start": "841500",
    "end": "847079"
  },
  {
    "text": "but but maybe maybe you don't trust me that much anyway so it would be nice if we could actually see uh abstract syntax",
    "start": "847079",
    "end": "853019"
  },
  {
    "text": "tree and there's a nice tool um called graphviz which will draw graphs of everything it's you give it an",
    "start": "853019",
    "end": "859740"
  },
  {
    "text": "ASCII input and it it draws a graph so let's say we wanted to see a graph with a root and a branch and the branch",
    "start": "859740",
    "end": "866459"
  },
  {
    "text": "points are two leaves and the root point is another Leaf this is all you would need to do that then you just",
    "start": "866459",
    "end": "873839"
  },
  {
    "text": "runs a command now so I can remember the something like that and then it'll make",
    "start": "873839",
    "end": "881279"
  },
  {
    "text": "me a PNG off that oh sorry so there's a tree",
    "start": "881279",
    "end": "888180"
  },
  {
    "text": "looks like a tree um at least looks like a tree to a computer scientist",
    "start": "888180",
    "end": "894500"
  },
  {
    "text": "they think that trees have the roots at the top yeah as if maybe it's not us do you like",
    "start": "894500",
    "end": "902699"
  },
  {
    "text": "upside down jokes here or have you heard them on before yeah it's not no we won't talk about upside down trees but",
    "start": "902699",
    "end": "908820"
  },
  {
    "text": "wouldn't it be nice if we could actually visualize the tree that we've built here that would be great that would be great",
    "start": "908820",
    "end": "915720"
  },
  {
    "text": "everyone says yes so um so to do this we need to have a name for",
    "start": "915720",
    "end": "922019"
  },
  {
    "text": "each node that's what the the dot format requires so I'm going to put a counter in and the first uh the first note is",
    "start": "922019",
    "end": "928800"
  },
  {
    "text": "going to be called F0 and the next one is going to be called F1 Etc doesn't really matter what they're called and then we just basically need to be",
    "start": "928800",
    "end": "935279"
  },
  {
    "text": "able to dump all the nodes into an ASCII file so they they each get a sort of",
    "start": "935279",
    "end": "940380"
  },
  {
    "text": "um a line so I'm going to put a method on every class which is uh which is going to print out",
    "start": "940380",
    "end": "947940"
  },
  {
    "text": "the ASCII representation and so my wife's sitting here in the in the",
    "start": "947940",
    "end": "954420"
  },
  {
    "text": "front row and she she did a PhD a whole chapter of her PhD was about the visitor pattern",
    "start": "954420",
    "end": "959820"
  },
  {
    "text": "it's great stuff it really is I but um and this would be an ideal place to use the visitor pan however",
    "start": "959820",
    "end": "967880"
  },
  {
    "text": "yeah I haven't got time for that so we're just gonna add a method to every yeah",
    "start": "969839",
    "end": "975740"
  },
  {
    "text": "so yeah so um the binary St obviously it needs a line in the file for itself and then it",
    "start": "975740",
    "end": "982560"
  },
  {
    "text": "needs a couple of lines here that will do the connections to its subtrees and then it needs to recursively call",
    "start": "982560",
    "end": "990180"
  },
  {
    "text": "dump on the uh on on the things below it so that they can print out their stuff",
    "start": "990180",
    "end": "996240"
  },
  {
    "text": "then I've added a few test string Methods um basically just string representations of the regular expression that they",
    "start": "996240",
    "end": "1003380"
  },
  {
    "text": "that they represent yeah skills is a slightly bigger font than I used to have so but anyway",
    "start": "1003380",
    "end": "1009440"
  },
  {
    "text": "there's the last test string method yes um and then basically we need to in our",
    "start": "1009440",
    "end": "1016040"
  },
  {
    "text": "main program after we've passed it up we need to print out the little bit of header and a little bit of footer and the bit in the middle",
    "start": "1016040",
    "end": "1022399"
  },
  {
    "text": "so [Music] um",
    "start": "1022399",
    "end": "1027040"
  },
  {
    "text": "here's a make file I made earlier this basically just says commands just calls the",
    "start": "1027919",
    "end": "1034040"
  },
  {
    "text": "let's see so let's see how that works looks like tree so the the the the the",
    "start": "1034040",
    "end": "1040880"
  },
  {
    "text": "regular expression if you recall was a followed by an optional B followed by C so it's compiled that into",
    "start": "1040880",
    "end": "1048260"
  },
  {
    "text": "b or Nothing at All um yeah so these each of these notes contains the sort of ASCII summary of",
    "start": "1048260",
    "end": "1055280"
  },
  {
    "text": "everything that's under them which is why it gets quite big at the top there's a few extra parentheses just to make",
    "start": "1055280",
    "end": "1061039"
  },
  {
    "text": "sure that it's syntactically correct they're not they're not wrong they're just Superfluous",
    "start": "1061039",
    "end": "1066919"
  },
  {
    "text": "um but basically it's it's pasta Patrice so",
    "start": "1066919",
    "end": "1073580"
  },
  {
    "text": "so trust is restored I hope where were we yeah so oh we've now yeah",
    "start": "1073580",
    "end": "1081200"
  },
  {
    "text": "you're thinking he's got a parser but he was promising an entire language and what's happened to all the llvm stuff so",
    "start": "1081200",
    "end": "1087080"
  },
  {
    "text": "llvm has this very nice API well has this very large API it's in C plus plus it's got a million",
    "start": "1087080",
    "end": "1094160"
  },
  {
    "text": "overloaded functions um and there's no way I'm going to be able to do that",
    "start": "1094160",
    "end": "1099980"
  },
  {
    "text": "but what llvm also has is uh in the time in the time required um yes because the",
    "start": "1099980",
    "end": "1105980"
  },
  {
    "text": "regular expression thing that we did for V8 I think we were there were three of us and it took three months so",
    "start": "1105980",
    "end": "1111380"
  },
  {
    "text": "nine nine months nine man months um I've got about 20 minutes left",
    "start": "1111380",
    "end": "1117559"
  },
  {
    "text": "so what llvm also has is it has uh it has this intermediate representation bit",
    "start": "1117559",
    "end": "1123080"
  },
  {
    "text": "code which is uh if you ship an app to an Apple Watch which is this what this",
    "start": "1123080",
    "end": "1128240"
  },
  {
    "text": "isn't then um it's uh you're shipping Bitcoin and not actual machine code",
    "start": "1128240",
    "end": "1133640"
  },
  {
    "text": "um the Bitcoin representation also has an ASCII version it's two ways so it can convert the Bitcoin into ASCII in the ASCII version into Bitcoin so if we can",
    "start": "1133640",
    "end": "1140120"
  },
  {
    "text": "just we've already done a bit of printf graph drawing maybe we can do a bit of printf",
    "start": "1140120",
    "end": "1145160"
  },
  {
    "text": "code generation that would be great so we don't we don't actually need to",
    "start": "1145160",
    "end": "1151700"
  },
  {
    "text": "make file anymore so we're just going to print something out for every node that looks like the uh the llvm",
    "start": "1151700",
    "end": "1159919"
  },
  {
    "text": "Intermediate Language now that's like a complete language that you can represent anything that any llvm front end can",
    "start": "1159919",
    "end": "1166340"
  },
  {
    "text": "generate so C C plus plus all the other stuff that perhaps soon um so that's yeah we don't really want",
    "start": "1166340",
    "end": "1173539"
  },
  {
    "text": "to learn a new language so we're going to use a concept which is called the stack Overflow programming technique",
    "start": "1173539",
    "end": "1180620"
  },
  {
    "text": "which is um basically you you Google it and then you copy paste it into your program so for",
    "start": "1180620",
    "end": "1187760"
  },
  {
    "text": "example if we want to know how to do something we could write a little C program that does something similar and",
    "start": "1187760",
    "end": "1193580"
  },
  {
    "text": "then see what what code we get so for example if we want to know how do we",
    "start": "1193580",
    "end": "1199640"
  },
  {
    "text": "actually sort of take a pointer and return the content of that pointer we can have a little little program like",
    "start": "1199640",
    "end": "1205820"
  },
  {
    "text": "that and then llvm has a sister project which is clang which is the C front end to a low VM",
    "start": "1205820",
    "end": "1212840"
  },
  {
    "text": "um so if we we can call it clang with the emit llvm option",
    "start": "1212840",
    "end": "1218840"
  },
  {
    "text": "and with the S which means we want an ASCII output and then it'll it'll generate an uh",
    "start": "1218840",
    "end": "1227840"
  },
  {
    "text": "it'll generate yeah it looks a bit scary but um if I just delete the most scary bits",
    "start": "1227840",
    "end": "1234919"
  },
  {
    "text": "then it won't look quite as scary um so it's it's it's a sort of low level",
    "start": "1234919",
    "end": "1240260"
  },
  {
    "text": "type language we've got I8 star that means a pointer to an 8-bit integer a",
    "start": "1240260",
    "end": "1246140"
  },
  {
    "text": "character pointer and then we have sort of the load instruction then we have the sext instruction there's nothing",
    "start": "1246140",
    "end": "1253179"
  },
  {
    "text": "untoward about that there's a sign extension uh and that and then it just",
    "start": "1253179",
    "end": "1258380"
  },
  {
    "text": "rescinded so we can we can do that um and of course since our new language is going to be crazy Innovative we will",
    "start": "1258380",
    "end": "1264080"
  },
  {
    "text": "at some point have to learn how to write our own even if we could just translate it all from C then it wouldn't be that",
    "start": "1264080",
    "end": "1269480"
  },
  {
    "text": "exciting and the invitations to the exclusive parties would not be forthcoming",
    "start": "1269480",
    "end": "1275360"
  },
  {
    "text": "but um but that's sort of quite nice way to get started and to try out different things so we want to be um printing out",
    "start": "1275360",
    "end": "1283220"
  },
  {
    "text": "stuff so uh but what I'm going to do this is I'm",
    "start": "1283220",
    "end": "1288260"
  },
  {
    "text": "going to generate a how am I doing for time",
    "start": "1288260",
    "end": "1293740"
  },
  {
    "text": "okay um I'm going to generate actually a separate function for every single node",
    "start": "1294140",
    "end": "1300380"
  },
  {
    "text": "in the ASD tree which sounds like it's going to be crazy slow but the magic of llvm optimization will fix it all for me",
    "start": "1300380",
    "end": "1307460"
  },
  {
    "text": "afterwards which is really nice so the top level of the regular expression that node is called F0 because it's the zero",
    "start": "1307460",
    "end": "1314120"
  },
  {
    "text": "F1 um and that needs to be externally visible we're going to be exporting that",
    "start": "1314120",
    "end": "1319640"
  },
  {
    "text": "as a compiled regular expression all the others don't need to be internal so I've",
    "start": "1319640",
    "end": "1325280"
  },
  {
    "text": "put a little getter a little getter on my class which which just returns external or internal depending on",
    "start": "1325280",
    "end": "1331940"
  },
  {
    "text": "whether we want the corresponding function to be visible and then I've got a little helper thing here for some of",
    "start": "1331940",
    "end": "1338600"
  },
  {
    "text": "these St nodes the the only thing we really need to do is to just call a different SG node so this just forwards",
    "start": "1338600",
    "end": "1344900"
  },
  {
    "text": "this just forwards the core so the way it's going to work is every function that corresponds to an AST node is going",
    "start": "1344900",
    "end": "1351020"
  },
  {
    "text": "to check whether it matches whether its own stuff matches and then it'll return zero if it doesn't match if it does",
    "start": "1351020",
    "end": "1357919"
  },
  {
    "text": "match it's going to call the next thing in the reg X but check whether that so that can check whether that matches",
    "start": "1357919",
    "end": "1364640"
  },
  {
    "text": "um so each uh each each node in the St has a sort of successor which is the next thing that should be matching now",
    "start": "1364640",
    "end": "1370880"
  },
  {
    "text": "uh in the input so we're gonna We yeah oh yeah so",
    "start": "1370880",
    "end": "1378260"
  },
  {
    "text": "we're going to have a a uh a generator method it's going to be",
    "start": "1378260",
    "end": "1384679"
  },
  {
    "text": "something like that it just takes a successor string which is the name of the function to be called next",
    "start": "1384679",
    "end": "1390020"
  },
  {
    "text": "and that's a an abstract function so",
    "start": "1390020",
    "end": "1395260"
  },
  {
    "text": "better make the class abstract too and this one has to be abstract too",
    "start": "1396559",
    "end": "1404200"
  },
  {
    "text": "cool um so",
    "start": "1406159",
    "end": "1412700"
  },
  {
    "text": "yep so here's a little bit of",
    "start": "1412700",
    "end": "1418280"
  },
  {
    "text": "llvm code that we're spitting out so this is the this method you can't really see that but this method is in the literal class so this is for",
    "start": "1418280",
    "end": "1426080"
  },
  {
    "text": "for matching a single character in the input so I've put a little bit of comments in",
    "start": "1426080",
    "end": "1432260"
  },
  {
    "text": "which is like the C light code that he's supposed to be doing it starts by loading in the current character from the string that we're trying to match",
    "start": "1432260",
    "end": "1438200"
  },
  {
    "text": "with the load instruction then it does an integer comparison check whether it's the the letter that we're hoping that",
    "start": "1438200",
    "end": "1444679"
  },
  {
    "text": "it's going to be um and then we end with a sort of if",
    "start": "1444679",
    "end": "1449840"
  },
  {
    "text": "then go to elsegota so all the all the basic blocks in lvm have to end with",
    "start": "1449840",
    "end": "1455480"
  },
  {
    "text": "some sort of Branch you can't just fall through to the to the label here you have to end with a branch of some sort",
    "start": "1455480",
    "end": "1462860"
  },
  {
    "text": "um so if if the comparison succeeded then then we go to this one here and",
    "start": "1462860",
    "end": "1468559"
  },
  {
    "text": "that is going to load the address of the next character we're going to step one forward in the in the input and then",
    "start": "1468559",
    "end": "1474919"
  },
  {
    "text": "it's going to call the successor function to see whether that matches um and uh then we've got the result of",
    "start": "1474919",
    "end": "1482539"
  },
  {
    "text": "that with you know all we've got the result of the first thing that failed at that point we're going to return one or",
    "start": "1482539",
    "end": "1488659"
  },
  {
    "text": "zero to indicate whether things succeeded or not so we've got a slightly nasty thing here which is a Phi which is",
    "start": "1488659",
    "end": "1495679"
  },
  {
    "text": "um if you're writing a modern compiler these days then or even even GCC has",
    "start": "1495679",
    "end": "1501559"
  },
  {
    "text": "this now um it's uh you're going to use SSA form and",
    "start": "1501559",
    "end": "1507200"
  },
  {
    "text": "in SSA form you the the there's a there's only one definition that flows through to any use of any variable",
    "start": "1507200",
    "end": "1514159"
  },
  {
    "text": "so the variables let the variable uh like uh success results here",
    "start": "1514159",
    "end": "1521179"
  },
  {
    "text": "um yeah the variables are not allowed to come from two different branches um and and that's obviously not always",
    "start": "1521179",
    "end": "1527900"
  },
  {
    "text": "possible so you put in the sort of magic thing called a Phi which tells you which variable from which",
    "start": "1527900",
    "end": "1534620"
  },
  {
    "text": "Branch where the where the inputs are coming from so this is sort of annoying to do",
    "start": "1534620",
    "end": "1540860"
  },
  {
    "text": "and um you don't really want to do this by hand and actually the good news is you can",
    "start": "1540860",
    "end": "1546440"
  },
  {
    "text": "actually win the llvm Bitcoin you can just generate local variables you can put a variable at the top and then store",
    "start": "1546440",
    "end": "1552440"
  },
  {
    "text": "into it and then down here and you could store into it several places and down here you can just read out of it again",
    "start": "1552440",
    "end": "1557900"
  },
  {
    "text": "and um and and it would have like a variable on the stack then you run the magic Optimizer and it all turns into",
    "start": "1557900",
    "end": "1564500"
  },
  {
    "text": "this horribleness um so this wasn't actually necessary but I thought I'd scale a bit",
    "start": "1564500",
    "end": "1571240"
  },
  {
    "text": "um so this is the disjunction uh this is the what the code would generate for left or right",
    "start": "1572000",
    "end": "1579260"
  },
  {
    "text": "um so in this case um when we generate the when we generate",
    "start": "1579260",
    "end": "1585679"
  },
  {
    "text": "the two sub trees here then uh whichever one of them succeeds they need to next",
    "start": "1585679",
    "end": "1591559"
  },
  {
    "text": "check whatever came after the disjunction um and uh so basically what we're doing is",
    "start": "1591559",
    "end": "1597500"
  },
  {
    "text": "we're calling the left hand side and if the left-hand side failed um then we're going to without stepping",
    "start": "1597500",
    "end": "1602539"
  },
  {
    "text": "forward anything we're going to call the right hand side and if that failed too we're just going to return 0 and say they both failed",
    "start": "1602539",
    "end": "1609200"
  },
  {
    "text": "so the empty alternative that just well I",
    "start": "1609200",
    "end": "1614900"
  },
  {
    "text": "mean it just goes to the next thing finds out whether that matches and uh the alternative that's the one",
    "start": "1614900",
    "end": "1621799"
  },
  {
    "text": "that's like this this has to match then this has to match so in that case uh we generate the left-hand side thing if you",
    "start": "1621799",
    "end": "1628159"
  },
  {
    "text": "succeed then do the do the right hand side and then we generate the right hand side of thing",
    "start": "1628159",
    "end": "1633559"
  },
  {
    "text": "do whatever we were supposed to be doing when you've succeeded and we just need to call the function for the left hand side that's what the forward does",
    "start": "1633559",
    "end": "1641320"
  },
  {
    "text": "so we now have a program that can print a tree and we want it to also be able to print a um some code so",
    "start": "1641659",
    "end": "1649760"
  },
  {
    "text": "time for extremely Advanced command line argument processing here basically I checked whether the first argument which",
    "start": "1649760",
    "end": "1656179"
  },
  {
    "text": "should better be there or will crash whether the first argument is a DOT it's the word Dot and if it is then we put",
    "start": "1656179",
    "end": "1661640"
  },
  {
    "text": "the dot file otherwise we print a little bit of glue and",
    "start": "1661640",
    "end": "1667520"
  },
  {
    "text": "and the the llvm so what we're saying here is we're going to um we're going to generate the top level",
    "start": "1667520",
    "end": "1673279"
  },
  {
    "text": "of the of the regular expression and if the whole thing succeeds then we're going to call the match function which is",
    "start": "1673279",
    "end": "1680000"
  },
  {
    "text": "something we'll have to provide that's an external function the match function will just return one for success and",
    "start": "1680000",
    "end": "1685279"
  },
  {
    "text": "everything will be what did I do there yeah",
    "start": "1685279",
    "end": "1691340"
  },
  {
    "text": "so where were we",
    "start": "1691340",
    "end": "1696279"
  },
  {
    "text": "oh there's a park here I spotted this the last time I did it",
    "start": "1697220",
    "end": "1702320"
  },
  {
    "text": "but forgot to change the microphone yeah um I think it actually works anyway no",
    "start": "1702320",
    "end": "1707840"
  },
  {
    "text": "one looks at the return value from Maine",
    "start": "1707840",
    "end": "1711340"
  },
  {
    "text": "okay so we're going to need a little driver to actually run this the driver will will call the F0 the top level",
    "start": "1713059",
    "end": "1718400"
  },
  {
    "text": "match function and have to provide the the match function luckily",
    "start": "1718400",
    "end": "1724520"
  },
  {
    "text": "sorry I mean",
    "start": "1724520",
    "end": "1730100"
  },
  {
    "text": "why is Maine abstract yeah oh that's because I accidentally printed that's what happened when I pressed the dot button yeah",
    "start": "1730100",
    "end": "1737020"
  },
  {
    "text": "[Music] there it is yes yes that wasn't I thought if Lucky nothing happens there",
    "start": "1737020",
    "end": "1743299"
  },
  {
    "text": "I thought yeah that's better mine is an abstract",
    "start": "1743299",
    "end": "1748400"
  },
  {
    "text": "because you're very awake yeah I'm impressed yeah so",
    "start": "1748400",
    "end": "1753919"
  },
  {
    "text": "um I've got a little driver laughs regular truck",
    "start": "1753919",
    "end": "1760159"
  },
  {
    "text": "dot CC and it does sort of the obvious thing",
    "start": "1760159",
    "end": "1766159"
  },
  {
    "text": "minus the obvious error checking which we don't have time for",
    "start": "1766159",
    "end": "1771860"
  },
  {
    "text": "um it just reads the line it feeds the line to the F0 function that we generated",
    "start": "1771860",
    "end": "1777740"
  },
  {
    "text": "and um and if that returns one then it matches in that case we just put the line so",
    "start": "1777740",
    "end": "1783980"
  },
  {
    "text": "C plus plus code [Music] um",
    "start": "1783980",
    "end": "1789039"
  },
  {
    "text": "so I've got a little make file ready uh yeah their top stuff is like the PNG that you already saw the",
    "start": "1791600",
    "end": "1798020"
  },
  {
    "text": "um and uh we generate the llvm intermediate code",
    "start": "1798020",
    "end": "1803059"
  },
  {
    "text": "from the uh from the from the dart",
    "start": "1803059",
    "end": "1807880"
  },
  {
    "text": "um and then we compile that down to assembler we compile the assembler down to oh some of these steps you could",
    "start": "1808159",
    "end": "1813919"
  },
  {
    "text": "actually just um leave out I'm using clang here which is like llvm's sister project because Klang",
    "start": "1813919",
    "end": "1820760"
  },
  {
    "text": "looks at the ending of the file and just knows what to do so it's easier than calling the individual but there are actually individual Tools in lvm to do",
    "start": "1820760",
    "end": "1827539"
  },
  {
    "text": "all this and I'm putting O3 everywhere for for Mad speed",
    "start": "1827539",
    "end": "1834278"
  },
  {
    "text": "yeah so um well we still have this going yeah so make",
    "start": "1835940",
    "end": "1842679"
  },
  {
    "text": "there's a warning warnings aren't ours no one can so it's generated a grit executable",
    "start": "1845960",
    "end": "1854360"
  },
  {
    "text": "it's a great name so let's try that um",
    "start": "1854360",
    "end": "1860059"
  },
  {
    "text": "what should we give it there's actually a",
    "start": "1860059",
    "end": "1864159"
  },
  {
    "text": "what's it called user share this word there's actually a list of all the English language words on a Mac for",
    "start": "1865279",
    "end": "1873380"
  },
  {
    "text": "some reason so okay it looks like uh it's",
    "start": "1873380",
    "end": "1881299"
  },
  {
    "text": "getting the words that start with an a have an optional B or C I think that's what I said and and then have a d",
    "start": "1881299",
    "end": "1888140"
  },
  {
    "text": "so this this regular expression language we'll just we'll just call it a feature it's not a bug it doesn't waste time",
    "start": "1888140",
    "end": "1894799"
  },
  {
    "text": "looking at the later bits of the word it just looks at the beginning which is the most efficient",
    "start": "1894799",
    "end": "1900200"
  },
  {
    "text": "and uh and that's where it goes so how many words actually have that",
    "start": "1900200",
    "end": "1905360"
  },
  {
    "text": "pattern in the English language according to Apple 811.",
    "start": "1905360",
    "end": "1910460"
  },
  {
    "text": "and it only takes 31 milliseconds which is that is that good who knows you can trust me it's it's",
    "start": "1912440",
    "end": "1918679"
  },
  {
    "text": "great um maybe maybe just to be sure we should we should try the same thing with with grep",
    "start": "1918679",
    "end": "1925039"
  },
  {
    "text": "which uh some BSD programmers have have been optimizing we're better just",
    "start": "1925039",
    "end": "1931039"
  },
  {
    "text": "to be fair we'll put a hat on so it's also being super efficient so what was it a",
    "start": "1931039",
    "end": "1937220"
  },
  {
    "text": "B or C question mark D was it like that",
    "start": "1937220",
    "end": "1942980"
  },
  {
    "text": "it's the same number at least so I think that's probably what the vergex was",
    "start": "1942980",
    "end": "1950139"
  },
  {
    "text": "I'm pleasantly surprised [Applause]",
    "start": "1952399",
    "end": "1960799"
  },
  {
    "text": "how are we doing if if you're not too scared then we could just take a look at the at the assembler file",
    "start": "1960799",
    "end": "1966559"
  },
  {
    "text": "foreign",
    "start": "1966559",
    "end": "1969559"
  },
  {
    "text": "so that's the external match declaration which we provide and then you can see there's there's a little f8 F6 Etc",
    "start": "1979279",
    "end": "1986179"
  },
  {
    "text": "there's a function generated for each of those um for each of the uh nodes in the tree",
    "start": "1986179",
    "end": "1994279"
  },
  {
    "text": "um and this this will then be uh",
    "start": "1994279",
    "end": "1999799"
  },
  {
    "text": "most of them are just defined internal so they're called by each other",
    "start": "1999799",
    "end": "2004620"
  },
  {
    "text": "so this uh gets put through so you can actually get the optimized version of the LL file this is just the one that I printed I think you can get the",
    "start": "2005440",
    "end": "2011919"
  },
  {
    "text": "optimized version as well but I can't remember how yeah I know you probably if",
    "start": "2011919",
    "end": "2017200"
  },
  {
    "text": "you say",
    "start": "2017200",
    "end": "2019559"
  },
  {
    "text": "like that looks right",
    "start": "2029679",
    "end": "2034679"
  },
  {
    "text": "no that made no difference at all oh yeah it's not",
    "start": "2035320",
    "end": "2040799"
  },
  {
    "text": "it's not it doesn't know yet that it can remove the the other stuff but let's look at the F0 which is the one that",
    "start": "2041080",
    "end": "2046480"
  },
  {
    "text": "it's uh supposed to be calling at the top level here",
    "start": "2046480",
    "end": "2051358"
  },
  {
    "text": "yeah that's not that didn't work okay I don't know why that was so you're not going to get away from it you're actually going to have to look at the uh",
    "start": "2053500",
    "end": "2060280"
  },
  {
    "text": "the dot s file so uh it's defining here Global F0 it's",
    "start": "2060280",
    "end": "2067780"
  },
  {
    "text": "grown an underscore for inscrutable reasons and if I search for Global I find this",
    "start": "2067780",
    "end": "2072878"
  },
  {
    "text": "is actually the only function that's left so so llvm has actually inlined all the other seven things into F0",
    "start": "2072879",
    "end": "2080378"
  },
  {
    "text": "which is great it's just a sort of optimization that your budding language designer really doesn't want to be have",
    "start": "2080379",
    "end": "2087040"
  },
  {
    "text": "to do himself or herself so um and so if you look at the code what",
    "start": "2087040",
    "end": "2092260"
  },
  {
    "text": "it's actually doing it's it's loading uh character from the string then checking whether it's an a",
    "start": "2092260",
    "end": "2098440"
  },
  {
    "text": "then it's loading the next character with an offset of one checking whether it's a b and then there's some sort of branching in at the end it just knows",
    "start": "2098440",
    "end": "2104800"
  },
  {
    "text": "whether it's got the right answer so pretty take the code I find to think",
    "start": "2104800",
    "end": "2112560"
  },
  {
    "text": "right so um see I have some conclusion somewhere",
    "start": "2112599",
    "end": "2120119"
  },
  {
    "text": "here come with conclusions if you like printf debugging here comes",
    "start": "2122560",
    "end": "2128500"
  },
  {
    "text": "the printf compiler but there is also an API maybe good for more serious work the code quality of",
    "start": "2128500",
    "end": "2135520"
  },
  {
    "text": "lvm is actually pretty good um the and the lvm I got nice help on the",
    "start": "2135520",
    "end": "2141940"
  },
  {
    "text": "IRC channel for the projects that I've been doing with lvm so",
    "start": "2141940",
    "end": "2147720"
  },
  {
    "text": "um I wouldn't recommend the Dragon book I don't think this isn't really a conclusion because I forgot to mention it earlier but um",
    "start": "2148180",
    "end": "2155380"
  },
  {
    "text": "the Dragon book doesn't talk about the SSA form almost at all because it's too old for",
    "start": "2155380",
    "end": "2160599"
  },
  {
    "text": "that and it is the one that if you've studied compilers at the University at least if you've got my color hair and",
    "start": "2160599",
    "end": "2167619"
  },
  {
    "text": "that's probably the book that you were told to read but I don't think it's very good advice anymore",
    "start": "2167619",
    "end": "2173920"
  },
  {
    "text": "and that's all [Applause]",
    "start": "2173920",
    "end": "2182640"
  }
]