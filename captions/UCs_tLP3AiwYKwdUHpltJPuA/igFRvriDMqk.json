[
  {
    "text": "[Music]",
    "start": "2550",
    "end": "10170"
  },
  {
    "text": "yes my name is Andreas salbar I'm from a Swedish company called trusk uh if you were at the previous session you know a",
    "start": "11400",
    "end": "17920"
  },
  {
    "text": "little about about trusk my colleague Emil Kuan talked about it we are located in malma and in Stockholm in Sweden uh",
    "start": "17920",
    "end": "24720"
  },
  {
    "text": "I'm going to be talking about secure coding patterns and uh please remember to uh",
    "start": "24720",
    "end": "31199"
  },
  {
    "text": "engage through the goto application and without further Ado let's get started uh so I work at uh the",
    "start": "31199",
    "end": "39399"
  },
  {
    "text": "company trusk here's us at in South Africa on our company trip uh this year",
    "start": "39399",
    "end": "44719"
  },
  {
    "text": "actually uh I spend my time at trusk uh developing and auditing security",
    "start": "44719",
    "end": "49800"
  },
  {
    "text": "critical systems security is important right you need to discuss it not only with your kids uh but with your",
    "start": "49800",
    "end": "56840"
  },
  {
    "text": "colleagues as well and the thing with security is that it's hard to tack on security on a project",
    "start": "56840",
    "end": "63519"
  },
  {
    "text": "when it's uh nearly finished it really needs to be an integral part of development for it to be successful and",
    "start": "63519",
    "end": "70080"
  },
  {
    "text": "today I'm going to be talking about some Concepts and patterns that will help you",
    "start": "70080",
    "end": "75240"
  },
  {
    "text": "in your daily coding activities specifically I'll uh talk a",
    "start": "75240",
    "end": "81400"
  },
  {
    "text": "bit about trust to set the stage in the beginning I'm going to move on to the first pattern that's called domain",
    "start": "81400",
    "end": "87520"
  },
  {
    "text": "driven security then there's something called uh the untrusted pattern I'm going to be",
    "start": "87520",
    "end": "94720"
  },
  {
    "text": "talking about immutability and I'm also uh going to be",
    "start": "94720",
    "end": "100200"
  },
  {
    "text": "talking about something called the inverse life coach pattern so let's get started trust the",
    "start": "100200",
    "end": "107560"
  },
  {
    "text": "foundation of software security well it really is because a lot",
    "start": "107560",
    "end": "112640"
  },
  {
    "text": "of security issues boil down to a poor understanding of where we or our software is placing its trust how how do",
    "start": "112640",
    "end": "120039"
  },
  {
    "text": "we control who we trust how do we establish trusts these are really important questions if you want to make your software secure so let's take a",
    "start": "120039",
    "end": "127039"
  },
  {
    "text": "look at a typical interaction that can happen here here's a uh businessman Bob",
    "start": "127039",
    "end": "133239"
  },
  {
    "text": "he's uh at the bank he wants to transfer xur from account y to account",
    "start": "133239",
    "end": "140400"
  },
  {
    "text": "Z okay you know what could possibly go wrong this is simple typical transaction",
    "start": "140400",
    "end": "146280"
  },
  {
    "text": "that you have in different forms in your applications whatever that might be uh whatever kind your application might be",
    "start": "146280",
    "end": "152920"
  },
  {
    "text": "so let's look at the first interaction the authentication step as it's called um how can the bank be sure that",
    "start": "152920",
    "end": "160959"
  },
  {
    "text": "Bob really is Bob and how can the bank be sure sorry how can Bob be sure that the bank is indeed the bank that they're",
    "start": "160959",
    "end": "166840"
  },
  {
    "text": "talking to the correct party and if we look at the actual operation that's to be",
    "start": "166840",
    "end": "173400"
  },
  {
    "text": "performed um do we know that Bob owns account y do we know that account count y holds",
    "start": "173400",
    "end": "180640"
  },
  {
    "text": "X euros and do we even know that X is a number these are all things that our",
    "start": "180640",
    "end": "185799"
  },
  {
    "text": "application has to handle otherwise we're in trouble because you know Bob could",
    "start": "185799",
    "end": "191400"
  },
  {
    "text": "really screw us here or the bank could screw Bob you know depending on which side you're on in this uh case so uh in",
    "start": "191400",
    "end": "198480"
  },
  {
    "text": "order to visualize trust it's uh pretty useful to think of your application as a circle and there's a circle of trust in",
    "start": "198480",
    "end": "203720"
  },
  {
    "text": "your application is inside of it so you have all this stuff right that's outside",
    "start": "203720",
    "end": "209200"
  },
  {
    "text": "uh of your circle of trust that's not trusted you can't trust the user the request data database who knows what's",
    "start": "209200",
    "end": "215760"
  },
  {
    "text": "in there is your application responsible for putting everything in there maybe not third party Services etc etc so what",
    "start": "215760",
    "end": "222560"
  },
  {
    "text": "you need to understand what your application must understand is where uh the trust boundaries are in your code",
    "start": "222560",
    "end": "230319"
  },
  {
    "text": "where does trust begin where does trust end and I'm going to apologize in",
    "start": "230319",
    "end": "235879"
  },
  {
    "text": "advance for this next slide you might want to cover your eyes I just want to Hammer home this point uh about what's",
    "start": "235879",
    "end": "242360"
  },
  {
    "text": "trusted and untrusted everything inside the circle is trusted everything outside is untrusted and you'll notice a few",
    "start": "242360",
    "end": "248720"
  },
  {
    "text": "things about this uh mainly how much larger the untrusted area is than the the trusted and uh importantly that it's",
    "start": "248720",
    "end": "256320"
  },
  {
    "text": "unbounded the trusted is very bounded and specific you can enumerate all the trusted States whereas the untrusted is",
    "start": "256320",
    "end": "263639"
  },
  {
    "text": "unbounded and you know in a in a practical way it's impossible it's to",
    "start": "263639",
    "end": "268919"
  },
  {
    "text": "enumerate the state that can happen and this is why black listing doesn't work when you try to enumerate the stuff that's not allowed you have to do white",
    "start": "268919",
    "end": "275560"
  },
  {
    "text": "listing and enumerate the stuff uh that is allowed which is which you trust so well how does something from",
    "start": "275560",
    "end": "283039"
  },
  {
    "text": "the untrusted side become trusted after all we have to interact with all this stuff otherwise our application is uh",
    "start": "283039",
    "end": "288840"
  },
  {
    "text": "pretty worthless so uh through every developer's favorite activity validation",
    "start": "288840",
    "end": "295560"
  },
  {
    "text": "that's the most fun thing to do when you're developing an application right that's the first thing you start with your fired up to start with validation",
    "start": "295560",
    "end": "302120"
  },
  {
    "text": "so well hopefully after this session you'll at least think it sucks a little bit less than you did before so well two",
    "start": "302120",
    "end": "307919"
  },
  {
    "text": "things can happen of course either uh the validation passes we we trust the data or we do not trust it and we reject",
    "start": "307919",
    "end": "314800"
  },
  {
    "text": "it so we keep it outside our circle of trust and if we're talking about",
    "start": "314800",
    "end": "320039"
  },
  {
    "text": "validation uh just to Define it a little bit more uh this is the typical kind of validation that you probably uh think of",
    "start": "320039",
    "end": "327880"
  },
  {
    "text": "uh making sure that the data you get valid in your domain like is X even a number the the data that's Bob wanted to",
    "start": "327880",
    "end": "335120"
  },
  {
    "text": "transfer to the bank or whatever there's some other uh fancy names canonicalization normalization",
    "start": "335120",
    "end": "342280"
  },
  {
    "text": "stuff that must happen before validation here's a typical example of uh normalization where you get a file path",
    "start": "342280",
    "end": "348800"
  },
  {
    "text": "maybe you allow people to upload stuff to uh or download whatever from C public",
    "start": "348800",
    "end": "354039"
  },
  {
    "text": "file upload and uh if your program only validates the beginning of this un",
    "start": "354039",
    "end": "359639"
  },
  {
    "text": "normalized path then you'll say that's fine it's C public file upload but you have a path traversal attack there with",
    "start": "359639",
    "end": "365759"
  },
  {
    "text": "a dot dot slash slashes that the OS then will collapse to Secrets skis which well obviously somewhere you don't want the",
    "start": "365759",
    "end": "372680"
  },
  {
    "text": "user poking around with uploaded or downloaded files whatever so uh normalization must happen before",
    "start": "372680",
    "end": "379800"
  },
  {
    "text": "validation and you see why there uh there's something sanitization when you clean up dangerous unknown data typical",
    "start": "379800",
    "end": "386680"
  },
  {
    "text": "log injection I'm willing to bet that almost none of you is doing a",
    "start": "386680",
    "end": "392919"
  },
  {
    "text": "sanitization of your log data because it's so common when we do uh reviews",
    "start": "392919",
    "end": "397960"
  },
  {
    "text": "everything you don't you take some value and it's it doesn't fit in your domain you log the error say I received some",
    "start": "397960",
    "end": "403440"
  },
  {
    "text": "invalid data this is the one because it's good for error checking or or debugging later well then the user can",
    "start": "403440",
    "end": "409479"
  },
  {
    "text": "inject log entries into your log which could make uh like legal proceedings",
    "start": "409479",
    "end": "415080"
  },
  {
    "text": "harder later if you can uh question the log so that's something to think about if the user knows what kind of log",
    "start": "415080",
    "end": "420960"
  },
  {
    "text": "format you have you can uh inject evil log entries and confuse your uh debugging or error checking",
    "start": "420960",
    "end": "429400"
  },
  {
    "text": "later um excuse me we talked touched upon this before",
    "start": "429400",
    "end": "435280"
  },
  {
    "text": "always prefer white listing over black listing because well the red area is unbounded and the green area is bounded",
    "start": "435280",
    "end": "441479"
  },
  {
    "text": "right you cannot enumerate all the invalid stuff and another good thing about being strict with validation is",
    "start": "441479",
    "end": "448240"
  },
  {
    "text": "that it finds bugs early early right instead of you get some error like eight steps down in the code and you have to",
    "start": "448240",
    "end": "453919"
  },
  {
    "text": "spend one day you know tracking back what how did this end up down here near the database and you it turns out that",
    "start": "453919",
    "end": "459000"
  },
  {
    "text": "it's it's a A number being you know negative instead of positive up here that you could have caught really early",
    "start": "459000",
    "end": "464440"
  },
  {
    "text": "up here in the UI almost every application so it's not only for security it also saves you time and",
    "start": "464440",
    "end": "472280"
  },
  {
    "text": "headaches and you every time you do validation every time you have a parameter something you don't need to",
    "start": "472280",
    "end": "477639"
  },
  {
    "text": "validate you have to ask yourself what is the largest acceptable range and then don't accept any more than that don't",
    "start": "477639",
    "end": "484240"
  },
  {
    "text": "think well you know maybe in half a year you know people will transfer these large amounts or maybe you know they'll",
    "start": "484240",
    "end": "490400"
  },
  {
    "text": "they'll change the expired time to a few more years more on these credit cards I'll just put that in there so we don't have to do an update you know don't do",
    "start": "490400",
    "end": "497360"
  },
  {
    "text": "that just be really strict and if you have to change it update your software that's",
    "start": "497360",
    "end": "502919"
  },
  {
    "text": "better so that's trust in general it's the foundation of software security and",
    "start": "503120",
    "end": "508560"
  },
  {
    "text": "uh let's move on on to the first pattern here shall we domain driven",
    "start": "508560",
    "end": "515640"
  },
  {
    "text": "security uh how many here have heard about uh domain driven design hands up",
    "start": "515640",
    "end": "522640"
  },
  {
    "text": "please okay yeah that's good so it's not really complicated that's that you always model your domain like with",
    "start": "522640",
    "end": "529480"
  },
  {
    "text": "proper objects that interact and are created in special ways so it's not really complicated but you can uh look",
    "start": "529480",
    "end": "534720"
  },
  {
    "text": "it up uh if you want need to know more the the term or the this pattern domain",
    "start": "534720",
    "end": "540279"
  },
  {
    "text": "D in security it helps us with a trust boundary and it gives us validation everywhere um in a good way the pattern",
    "start": "540279",
    "end": "548160"
  },
  {
    "text": "was uh coined by two developers at the Swedish company Omega Point yon Vander",
    "start": "548160",
    "end": "553440"
  },
  {
    "text": "and Don Barry yunon so domain driven security is basically domain driven design plus some uh conventions for",
    "start": "553440",
    "end": "561160"
  },
  {
    "text": "input data validation that we're going to take a look at now so let's go back to our interaction with Bob and the bank",
    "start": "561160",
    "end": "567160"
  },
  {
    "text": "here's Bob again so this is new transaction the the bank uh trusts him",
    "start": "567160",
    "end": "572800"
  },
  {
    "text": "already and then forgets to validate uh and Bob wants to transfer negative 1,000",
    "start": "572800",
    "end": "579399"
  },
  {
    "text": "sure go ahead King Bob gets a almost soon to be outdated Swedish th000 croner",
    "start": "579399",
    "end": "586880"
  },
  {
    "text": "notes in his pocket there so the problem with with validation is that the same validation always has to be performed",
    "start": "586880",
    "end": "593000"
  },
  {
    "text": "over and over again and that's probably why why it's easy to forget to validate",
    "start": "593000",
    "end": "598760"
  },
  {
    "text": "somewhere because you can't really see the forest for the trees and it ends up everywhere in the",
    "start": "598760",
    "end": "605640"
  },
  {
    "text": "code if you don't manage it so it's that probably that's why it's so easy to",
    "start": "605640",
    "end": "610839"
  },
  {
    "text": "forget it because you see it everywhere and then if it's missing at one place it's hard it's easy to miss and it's uh",
    "start": "610839",
    "end": "617480"
  },
  {
    "text": "easy to forget that you also need to validate from internal sources think sources that you think cannot give you",
    "start": "617480",
    "end": "623920"
  },
  {
    "text": "bad data such as your database for example I mean surely you valid you've s",
    "start": "623920",
    "end": "629160"
  },
  {
    "text": "it I and validate everything that comes in when it comes up again count can I really trust it well there's something",
    "start": "629160",
    "end": "634839"
  },
  {
    "text": "if you haven't properly validated if if or if a the attacker is really clever they can store scripts for example",
    "start": "634839",
    "end": "641000"
  },
  {
    "text": "crossy scripting is a typical web attack where an an attacker has been able to put some script text in your database",
    "start": "641000",
    "end": "648560"
  },
  {
    "text": "and then you show it on a page maybe as a username it say it says script and then some JavaScript gets executed and",
    "start": "648560",
    "end": "654880"
  },
  {
    "text": "then uh you can uh you can attack other uses with this script",
    "start": "654880",
    "end": "660839"
  },
  {
    "text": "so if we uh go back to the circle of trust here uh we have validation of uh",
    "start": "660959",
    "end": "666040"
  },
  {
    "text": "primitive types like strings and integers you can still be secure right if you remember to do the validation everywhere but it's hard to look at a",
    "start": "666040",
    "end": "673360"
  },
  {
    "text": "variable uh in your application object to see uh if it's been if it's trusted or not if you're dealing with primitive",
    "start": "673360",
    "end": "679720"
  },
  {
    "text": "types because they look just like any other type what domain deren security uh says is that primitive types and data",
    "start": "679720",
    "end": "686839"
  },
  {
    "text": "structures are untrusted by default if you see a string an integer a bite array",
    "start": "686839",
    "end": "692440"
  },
  {
    "text": "a collection of whatever being passed into a public function or or returned by",
    "start": "692440",
    "end": "698800"
  },
  {
    "text": "a function on your object then that data is untrusted and you you shouldn't really see it there because you should",
    "start": "698800",
    "end": "703959"
  },
  {
    "text": "only see domain objects which I'll explain what that is domain objects by convention in domain d security have",
    "start": "703959",
    "end": "710240"
  },
  {
    "text": "built inv validation meaning that they cannot be instantiated without being validated internally first if the",
    "start": "710240",
    "end": "716800"
  },
  {
    "text": "validation doesn't pass an exception is thrown and the the object can even be created so uh let's see",
    "start": "716800",
    "end": "726200"
  },
  {
    "text": "here so inside our circle of trust then we'll never see strings and integers",
    "start": "726200",
    "end": "731360"
  },
  {
    "text": "being passed around we'll only have proper domain objects like the string would probably correspond to an account object an account number an integer can",
    "start": "731360",
    "end": "738760"
  },
  {
    "text": "be an amount object which is then properly validated and the good thing with domain",
    "start": "738760",
    "end": "744519"
  },
  {
    "text": "driven security is that you automatically get data validation everywhere it's not only where you think",
    "start": "744519",
    "end": "750760"
  },
  {
    "text": "that oh here's the trust boundary I'm at a web service there's a trust boundary here I remember to validate the input data no every time you try to",
    "start": "750760",
    "end": "757399"
  },
  {
    "text": "instantiate a domain object it's validated and you'll immediately catch any uh evil data or out of Val out of",
    "start": "757399",
    "end": "765279"
  },
  {
    "text": "Bounce data that come in so it's validation everywhere not in the places where you just expect the bad data to",
    "start": "765279",
    "end": "771839"
  },
  {
    "text": "appear because it's hard to understand where all the bad data will uh appear so here's a typical uh domain object then",
    "start": "771839",
    "end": "778480"
  },
  {
    "text": "an account number number which is constructed with a value and uh by convention then the uh domain object is",
    "start": "778480",
    "end": "785959"
  },
  {
    "text": "immediately validated upon creation so there's no way for us to end",
    "start": "785959",
    "end": "791880"
  },
  {
    "text": "up with an invalid domain object here and another not necessary but very useful",
    "start": "791880",
    "end": "798639"
  },
  {
    "text": "thing with with these domain objects is if they are immutable I'm I'm going to be talking more about IM immutability",
    "start": "798639",
    "end": "804600"
  },
  {
    "text": "later it's basically that they they can change the internal state of the object cannot change after they've been",
    "start": "804600",
    "end": "810880"
  },
  {
    "text": "instantiated so you see that string uh the value here is a final in this is Java the final means that it cannot be",
    "start": "810880",
    "end": "817199"
  },
  {
    "text": "set again and there's no Setter for the for the uh this value uh just a quick uh",
    "start": "817199",
    "end": "822639"
  },
  {
    "text": "hands up how many are programming in Java here all right uh",
    "start": "822639",
    "end": "828519"
  },
  {
    "text": "C okay uh and the others all right yeah okay so it's a",
    "start": "828519",
    "end": "835759"
  },
  {
    "text": "well good match then because there's going to be some Java and C samples here",
    "start": "835759",
    "end": "841920"
  },
  {
    "text": "cool uh right uh every domain object is validated upon creation there's no way",
    "start": "841920",
    "end": "847440"
  },
  {
    "text": "for us by convention to end up with an invalid domain object uh we must of course remember to do this validation in",
    "start": "847440",
    "end": "853160"
  },
  {
    "text": "every domain object but after a while it becomes second nature uh when you uh do your objects so go back to we have an",
    "start": "853160",
    "end": "860480"
  },
  {
    "text": "example we have a web service that takes some untrusted uh soap data from the outside uh we validate it we get a user",
    "start": "860480",
    "end": "867800"
  },
  {
    "text": "object an account object uh what whatever but when we get some invalid data it will just bounce off as",
    "start": "867800",
    "end": "874680"
  },
  {
    "text": "an exception and we don't have to worry we can be happy uh with this so another",
    "start": "874680",
    "end": "881920"
  },
  {
    "text": "thing with this is that these uh primitive types if you forget to do this it really pops out so here we have a",
    "start": "881920",
    "end": "887839"
  },
  {
    "text": "reticulate function that takes a spline and reticulates it a certain angle so you know what's up with angle that's an",
    "start": "887839",
    "end": "894279"
  },
  {
    "text": "integer well it's not a domain object we don't we can't trust this is is is angle",
    "start": "894279",
    "end": "901079"
  },
  {
    "text": "allowed to be negative what's the allowed range of angle maybe we can only reticulate a few angles to the you know",
    "start": "901079",
    "end": "907160"
  },
  {
    "text": "left and right whatever what is the all range in our domain now the reticulate function has",
    "start": "907160",
    "end": "913399"
  },
  {
    "text": "to remember to perform this validation so of course this is how what it should look like we should have a proper angle",
    "start": "913399",
    "end": "919720"
  },
  {
    "text": "object for our domain that is validated uh with the allowed ranges or whatever",
    "start": "919720",
    "end": "925199"
  },
  {
    "text": "for these angles and I I chose this example just to highlight that something as trivial and simple as an angle",
    "start": "925199",
    "end": "932920"
  },
  {
    "text": "deserves its own domain object and therefore validation or the other way around um and why not it's easy it's",
    "start": "932920",
    "end": "939440"
  },
  {
    "text": "cheap to create objects you don't have to worry about a cost or overhead about this and you get validation",
    "start": "939440",
    "end": "946199"
  },
  {
    "text": "everywhere so the domain driven Security Essentials the type system ensures that",
    "start": "946199",
    "end": "951360"
  },
  {
    "text": "the correct domain object must be used we're not we're not passing in integer strings whatever that could be an",
    "start": "951360",
    "end": "956759"
  },
  {
    "text": "whatever integer or string it has to be that type of object so that's using the the type system and you know by",
    "start": "956759",
    "end": "963240"
  },
  {
    "text": "convention all the main objects are valid and of course there are still business rules uh but you don't have to",
    "start": "963240",
    "end": "969360"
  },
  {
    "text": "worry about the building blocks like the foundation of your application those are still valid those are always",
    "start": "969360",
    "end": "975759"
  },
  {
    "text": "valid and the the good thing with when you do like a reviewer software you know that you forgot to validate something if",
    "start": "975759",
    "end": "981959"
  },
  {
    "text": "you see primitive types being passed around you're only supposed to see domain objects so it makes it really",
    "start": "981959",
    "end": "987560"
  },
  {
    "text": "hard to see uh sorry really easy to see where you uh forgot to do",
    "start": "987560",
    "end": "993879"
  },
  {
    "text": "validation and just one more thing that I'm like to Sho horn into this domain driven security discussion uh we're",
    "start": "995040",
    "end": "1001720"
  },
  {
    "text": "talking about domain objects uh is the the the null uh",
    "start": "1001720",
    "end": "1007399"
  },
  {
    "text": "question don't use null never never let null carry information and what do I",
    "start": "1007399",
    "end": "1012600"
  },
  {
    "text": "mean by that null is an error null is just a way we have to have to denote that something is not pointing to to",
    "start": "1012600",
    "end": "1019120"
  },
  {
    "text": "anything we need null to say that this does not has not been assigned it's like a thing we have to deal with in",
    "start": "1019120",
    "end": "1024720"
  },
  {
    "text": "object-oriented languages and you should never see null in your code except for null checks in your domain objects if",
    "start": "1024720",
    "end": "1031079"
  },
  {
    "text": "you're if you're you know paranoid with your validation so because if if like typical bad uses of null is that uh you",
    "start": "1031079",
    "end": "1038880"
  },
  {
    "text": "want to indicate that something doesn't exist oh I couldn't find this object from the database I'll just return null",
    "start": "1038880",
    "end": "1044319"
  },
  {
    "text": "don't do that because null leads to hard to- read code and null pointer exceptions where you cannot SE an error",
    "start": "1044319",
    "end": "1049559"
  },
  {
    "text": "state from a from a normal state in your application so if you want to indicate that something does not exist use",
    "start": "1049559",
    "end": "1055640"
  },
  {
    "text": "something uh like optional of tea it's in Java 8 now it's a really simple thing that you can write in C as well um",
    "start": "1055640",
    "end": "1063640"
  },
  {
    "text": "because um like passing returning null is like it's like returning a a burning",
    "start": "1063640",
    "end": "1070880"
  },
  {
    "text": "bag of dog poop okay if if the if the cod's clients manag not to get burned by",
    "start": "1070880",
    "end": "1076400"
  },
  {
    "text": "this bag they're still left with this disgusting smell object that then they have to deal with right just stump it",
    "start": "1076400",
    "end": "1082600"
  },
  {
    "text": "out or something so don't be that person that returns null the other time when",
    "start": "1082600",
    "end": "1087919"
  },
  {
    "text": "you might want feel inclined to return null is then you get this oh this shouldn't happen I'm really supposed to find this object I'll just return null",
    "start": "1087919",
    "end": "1095760"
  },
  {
    "text": "no just throw don't be a chicken if if this is an exceptional circumstance in your application well use the aptly",
    "start": "1095760",
    "end": "1102120"
  },
  {
    "text": "named exception and throw the exception you know the world is not going to uh",
    "start": "1102120",
    "end": "1107240"
  },
  {
    "text": "explode because you do that so here's just what the optional uh class would look like in uh C it's a generic you can",
    "start": "1107240",
    "end": "1113400"
  },
  {
    "text": "create uh you have to ask the uh is it present yes then get the value if you try to get the value with some for",
    "start": "1113400",
    "end": "1120159"
  },
  {
    "text": "something that's not present then you then you get an exception so and for C",
    "start": "1120159",
    "end": "1125440"
  },
  {
    "text": "folks out there you know there's something called the nullable type like you can use for primitive types uh which",
    "start": "1125440",
    "end": "1130880"
  },
  {
    "text": "is really useful if you're dealing with databases that's the use case for which it which is was intended um because",
    "start": "1130880",
    "end": "1137520"
  },
  {
    "text": "databases deal in inherently with null so they might return null and it's really nice way of doing this but it's",
    "start": "1137520",
    "end": "1144200"
  },
  {
    "text": "it's not the same as optional because here's just another horrible way of assigning null now to A Primitive type",
    "start": "1144200",
    "end": "1149840"
  },
  {
    "text": "right you can like get like null 2.0 in your application so only use this at the fringes of your application at the",
    "start": "1149840",
    "end": "1155559"
  },
  {
    "text": "database or at the UI layer it can can be useful for UI widgets like radio button onof not set kind of thing so",
    "start": "1155559",
    "end": "1163720"
  },
  {
    "text": "please don't don't put this in your application make a proper optional object instead like that",
    "start": "1163720",
    "end": "1170720"
  },
  {
    "text": "so okay uh that's it for domain driven security we talked about trust domain driven security and I'm going to talk",
    "start": "1171320",
    "end": "1178440"
  },
  {
    "text": "about uh another pattern now that focuses on the trust boundary itself because maybe it's called the untrusted",
    "start": "1178440",
    "end": "1186120"
  },
  {
    "text": "pattern where uh make trust a first class concept at trust boundaries the thing with domain driven security it's",
    "start": "1186120",
    "end": "1192080"
  },
  {
    "text": "great you should use it if you can but maybe if you're trying to introduce it into a legacy project it's major surgy",
    "start": "1192080",
    "end": "1198720"
  },
  {
    "text": "you might not even have a domain object at all right a domain model at all right uh so where domain driven security is",
    "start": "1198720",
    "end": "1205960"
  },
  {
    "text": "defense like in depth everywhere the untrusted pattern is more of a perimeter defense where you uh just want to lift",
    "start": "1205960",
    "end": "1213240"
  },
  {
    "text": "up where the trust boundary is so it clearly is visible in the code so let's take a look at this",
    "start": "1213240",
    "end": "1219200"
  },
  {
    "text": "function we're at a security boundary here uh Fu Tak some input bar bar comes",
    "start": "1219200",
    "end": "1224960"
  },
  {
    "text": "from the untrusted side of the trust boundary and the do something with function is then on the uh trusted side",
    "start": "1224960",
    "end": "1233240"
  },
  {
    "text": "and the thing you see here that you can't really see the trust boundary right it it doesn't stick out yeah we're",
    "start": "1233240",
    "end": "1239080"
  },
  {
    "text": "doing validation but so you know something is is untrusted probably but there's really no way of telling where",
    "start": "1239080",
    "end": "1245360"
  },
  {
    "text": "the trust B boundary is so one useful way if you don't want",
    "start": "1245360",
    "end": "1251679"
  },
  {
    "text": "to if you want want your code to be almost like bite code compatible is just to rename it that's it's a pretty pretty",
    "start": "1251679",
    "end": "1258919"
  },
  {
    "text": "effective trick if you're doing like slow refactorings towards finding your security boundary just rename your",
    "start": "1258919",
    "end": "1264320"
  },
  {
    "text": "variables accordingly if something is untrusted why put untrusted underscore in front of it I know this violates the",
    "start": "1264320",
    "end": "1270159"
  },
  {
    "text": "naming guidelines but hey it's pretty useful so you know just ignore that rule in your ID or whoever complaints so the",
    "start": "1270159",
    "end": "1276960"
  },
  {
    "text": "good thing now is that uh when you look at a function here you have this other",
    "start": "1276960",
    "end": "1283360"
  },
  {
    "text": "function takes some untrusted bar untrusted frob and just like in the spline angle example",
    "start": "1283360",
    "end": "1289120"
  },
  {
    "text": "you know what's up with data how come we trust it we trust it obviously because it doesn't say untrusted before it so",
    "start": "1289120",
    "end": "1295520"
  },
  {
    "text": "now it's really easy to see that we forgot to validate the data by array which is probably bad because it's a",
    "start": "1295520",
    "end": "1301480"
  },
  {
    "text": "full of buffer overflows or whatever so uh yeah you can take it one step further",
    "start": "1301480",
    "end": "1306679"
  },
  {
    "text": "have the validate method return the bars makes it a little bit neater but we can do better than this there's really",
    "start": "1306679",
    "end": "1313559"
  },
  {
    "text": "nothing that forces us to do validation here right we could just take the untrusted and just assign it to",
    "start": "1313559",
    "end": "1319279"
  },
  {
    "text": "B just pass it into to do something with function no one would be other wiser so what if we do this this is the untrusted",
    "start": "1319279",
    "end": "1326480"
  },
  {
    "text": "pattern here we can use the type system and make a generic object I'm saying generic it's the right",
    "start": "1326480",
    "end": "1332799"
  },
  {
    "text": "thing yeah yeah generics I'm thinking my templates in C but it's generics here yeah sorry so you w we wrap our value in",
    "start": "1332799",
    "end": "1340640"
  },
  {
    "text": "a untrusted container and we want to make it so that the only way to get the value out of this untrusted container is",
    "start": "1340640",
    "end": "1347400"
  },
  {
    "text": "to do validation so I'm going to show you how to do this in uh in C let's take a look at the this is what",
    "start": "1347400",
    "end": "1353799"
  },
  {
    "text": "the untrusted uh class will look like and do you see anything strange for",
    "start": "1353799",
    "end": "1359240"
  },
  {
    "text": "this anyone see any is does this class seem useful at all how do I get how do I get the value",
    "start": "1359240",
    "end": "1367320"
  },
  {
    "text": "out of this because the getter is private right so oh seems impossible we",
    "start": "1367320",
    "end": "1373520"
  },
  {
    "text": "cannot get it get the value out of this untrusted box that we've locked it into",
    "start": "1373520",
    "end": "1379360"
  },
  {
    "text": "well in in uh C there's uh something called assemblies assemblies is like a jar file it's the packaging unit in C",
    "start": "1379360",
    "end": "1386880"
  },
  {
    "text": "and there are something called assembly directives which is like the Manifest file for the jar file uh basically and",
    "start": "1386880",
    "end": "1393120"
  },
  {
    "text": "there's an assembly directive um called internals Vis internals visible to where",
    "start": "1393120",
    "end": "1399720"
  },
  {
    "text": "you can declare that all the internals the private variables of in this assembly should be visible to everyone",
    "start": "1399720",
    "end": "1407039"
  },
  {
    "text": "in this other assembly so what if we have an assembly called validation and the validation assembly has a validator",
    "start": "1407039",
    "end": "1413240"
  },
  {
    "text": "class that does validate of T and then Returns the value if it's valid otherwise throws in a a validation",
    "start": "1413240",
    "end": "1420440"
  },
  {
    "text": "exception and uh implementor of validator would then override the uh template method inter validate to do the",
    "start": "1420440",
    "end": "1426799"
  },
  {
    "text": "actual validation so here the validator can actually get the value because of",
    "start": "1426799",
    "end": "1432240"
  },
  {
    "text": "the internal visible to directive so it would look something",
    "start": "1432240",
    "end": "1437480"
  },
  {
    "text": "like this we get another un trusted of string where the account number is we have to new up an account number validator call validate and then we get",
    "start": "1437480",
    "end": "1444760"
  },
  {
    "text": "the trusted uh validated value out of it there's no other way for us to get the",
    "start": "1444760",
    "end": "1450679"
  },
  {
    "text": "uh account number out of the untrusted container so we cannot technically we cannot forget we've put a straight",
    "start": "1450679",
    "end": "1457320"
  },
  {
    "text": "jacket on ourselves and we have to do validation which is great of course we can do a uh do nothing validator that's",
    "start": "1457320",
    "end": "1464120"
  },
  {
    "text": "bound to pop up in the project sooner or later that will just return it without doing valid ation but at least you know",
    "start": "1464120",
    "end": "1470399"
  },
  {
    "text": "you you're cheating right so um the to create these untrusted objects",
    "start": "1470399",
    "end": "1476960"
  },
  {
    "text": "we need some glue mapping code right we have to new up these untrusted and then just remember to to pass them in at the",
    "start": "1476960",
    "end": "1483799"
  },
  {
    "text": "uh at the uh untrusted boundary it's not very elegant a little bit clunky it would be nice if this happened",
    "start": "1483799",
    "end": "1489960"
  },
  {
    "text": "automatically uh in far as far as I know it can't really be done in C unless you uh rely on some framework feature like",
    "start": "1489960",
    "end": "1497399"
  },
  {
    "text": "asp.net model binding you can take your values and then always like wrap them in your model binder and pass them to uh as",
    "start": "1497399",
    "end": "1504520"
  },
  {
    "text": "un trusted of which is might be semi useful because the validation is really good in asp.net MVC anyway uh but do we",
    "start": "1504520",
    "end": "1512080"
  },
  {
    "text": "have any C++ programmers here in the crow yes all right the untrusted pattern is is uh more elegant in C++ because um",
    "start": "1512080",
    "end": "1520520"
  },
  {
    "text": "C++ has something called implicit Constructors and friend classes the friend classes means that you don't have",
    "start": "1520520",
    "end": "1525640"
  },
  {
    "text": "to declare it at the package scope you can say at the at the CL class scope that uh this should this uh should be",
    "start": "1525640",
    "end": "1531320"
  },
  {
    "text": "accessible to validator uh instances and implicit Constructors means that you don't need this this glue code you can",
    "start": "1531320",
    "end": "1537919"
  },
  {
    "text": "just declare your inputs as untrusted of and then C++ the compiler will understand that there's a path through",
    "start": "1537919",
    "end": "1543760"
  },
  {
    "text": "the untrusted Constructor to your object which makes a lot of people hate implicit Constructors because it's really complicated but it's uh very",
    "start": "1543760",
    "end": "1550720"
  },
  {
    "text": "useful in this case so I'll leave it as an exercise for",
    "start": "1550720",
    "end": "1555919"
  },
  {
    "text": "the reader to implement this in C+ plus so right that's uh that's the untrusted",
    "start": "1555919",
    "end": "1562880"
  },
  {
    "text": "pattern uh again domain driven security really good uh for uh should be the preferred method I think if you can't do",
    "start": "1562880",
    "end": "1569520"
  },
  {
    "text": "it try the untrusted pattern either by renaming or just doing the pattern full out like this so I mentioned before uh",
    "start": "1569520",
    "end": "1576919"
  },
  {
    "text": "immutability which is U uh really a good thing and we've",
    "start": "1576919",
    "end": "1582960"
  },
  {
    "text": "talked a lot about trust and what that we need to validate something before we can trust it but what if something can",
    "start": "1582960",
    "end": "1589080"
  },
  {
    "text": "change after we validated it when it's inside our circle of trust how can we trust it then it's been changed we",
    "start": "1589080",
    "end": "1595559"
  },
  {
    "text": "haven't validated anymore right so no matter if we go from the outside to the",
    "start": "1595559",
    "end": "1601039"
  },
  {
    "text": "inside in the circle of trust or from the inside to the outside when we pass something out uh the objects that we",
    "start": "1601039",
    "end": "1607159"
  },
  {
    "text": "pass over the trust boundary should be immutable they shouldn't be able to change otherwise you can with clever",
    "start": "1607159",
    "end": "1613159"
  },
  {
    "text": "race conditions bypass your validation so let let's take a look at this so",
    "start": "1613159",
    "end": "1618399"
  },
  {
    "text": "maybe your application handles concurrency probably if you're doing a web application you have hundreds of",
    "start": "1618399",
    "end": "1623559"
  },
  {
    "text": "threads how does that affect your validation the thing you just validated",
    "start": "1623559",
    "end": "1628600"
  },
  {
    "text": "is it still valid that's the main question so we talk about talk to uh",
    "start": "1628600",
    "end": "1635039"
  },
  {
    "text": "time of check to time of use and you've all seen this uh maybe",
    "start": "1635039",
    "end": "1640840"
  },
  {
    "text": "without thinking about it uh here's a typical method uh Java method that transfers some some amount and first it",
    "start": "1640840",
    "end": "1647799"
  },
  {
    "text": "checks the account contains this amount and then it transfer it otherwise you get a validation exception so we have a",
    "start": "1647799",
    "end": "1654880"
  },
  {
    "text": "time of check to and a time of use tou but what if another thread modifies",
    "start": "1654880",
    "end": "1662399"
  },
  {
    "text": "amount between time of check to time of use then you know we become millionaires",
    "start": "1662399",
    "end": "1668120"
  },
  {
    "text": "here so the problem is that we can send it if the amount object is not immutable",
    "start": "1668120",
    "end": "1674080"
  },
  {
    "text": "then we can pass in an amount object that passes validation but then it's Chang changed and modified before the",
    "start": "1674080",
    "end": "1679799"
  },
  {
    "text": "actual use of it happens this can of course leave us this",
    "start": "1679799",
    "end": "1686240"
  },
  {
    "text": "vulnerable to an attack then so the solution well immutability if the amount object looks like this if we have a",
    "start": "1686240",
    "end": "1692399"
  },
  {
    "text": "final here the value cannot be changed and there's no Setter but we're good nothing can change between the time of",
    "start": "1692399",
    "end": "1698960"
  },
  {
    "text": "check to the time of use so get rid of those Setters right and use final or read only in C",
    "start": "1698960",
    "end": "1706240"
  },
  {
    "text": "immutability is great it significant reduces the talk to problems uh it plays very well with",
    "start": "1706240",
    "end": "1713000"
  },
  {
    "text": "domain driven security as I mentioned and readability parallelization event sourcing etc etc immutability should",
    "start": "1713000",
    "end": "1721399"
  },
  {
    "text": "really be the norm you should strive for it you should should be so used to it that when you see a mutable object",
    "start": "1721399",
    "end": "1726960"
  },
  {
    "text": "something that can change you should just G you should feel bad and try to contain it and move it somewhere else",
    "start": "1726960",
    "end": "1733080"
  },
  {
    "text": "let's take another uh look at a race condition here before just how many of you know what a race condition is hands",
    "start": "1733080",
    "end": "1740039"
  },
  {
    "text": "up okay cool that's everyone so so when when some output is dependent on the sequence or timing or other",
    "start": "1740039",
    "end": "1745960"
  },
  {
    "text": "uncontrollable events that's a race condition and in web software it's typically then the web request threads",
    "start": "1745960",
    "end": "1752159"
  },
  {
    "text": "right that compete race for access to a resource so apart from leading to like",
    "start": "1752159",
    "end": "1759000"
  },
  {
    "text": "super hard bugs like heisen bugs that you cannot debug you cannot get this when you're debugging use often then",
    "start": "1759000",
    "end": "1765440"
  },
  {
    "text": "it's a security problem as well uh imagine this you have a you're doing is like a shopping cart a wizard there are",
    "start": "1765440",
    "end": "1771799"
  },
  {
    "text": "three steps where the user first enters the wizard chooses a product and then checks",
    "start": "1771799",
    "end": "1777039"
  },
  {
    "text": "out here we have a static map of the data we have to assign to each user each user has a an identifier which is a GD",
    "start": "1777039",
    "end": "1784480"
  },
  {
    "text": "or uid in Java unique identifier and uh all you concurrency",
    "start": "1784480",
    "end": "1789679"
  },
  {
    "text": "aware folks in the audience you see the static keyword and you're like oh I would never put a static you know in a",
    "start": "1789679",
    "end": "1795640"
  },
  {
    "text": "web app that's you know begging for for Pro problems but uh uh this could also be a service uh if you have a dependency",
    "start": "1795640",
    "end": "1802440"
  },
  {
    "text": "injection container maybe your service is a Singleton then this would be just a regular instance variable which it would",
    "start": "1802440",
    "end": "1808240"
  },
  {
    "text": "be the same because it would be shared by everyone so it's just static for the ease of the example here so uh okay step",
    "start": "1808240",
    "end": "1814799"
  },
  {
    "text": "one the user enters the wizard gets assigned a new unique identifier gets some some data and uh gets the uh",
    "start": "1814799",
    "end": "1822279"
  },
  {
    "text": "identify returned and step two we get the the key in the query string probably",
    "start": "1822279",
    "end": "1828679"
  },
  {
    "text": "from the user and then then now the user has chosen some product so okay we update your wizard data with this",
    "start": "1828679",
    "end": "1834559"
  },
  {
    "text": "product ID and then in the third step here it's like the checkout step uh we",
    "start": "1834559",
    "end": "1841640"
  },
  {
    "text": "get the data out of the uh of our map and we check that the user has access to this uh product ID and if uh she has or",
    "start": "1841640",
    "end": "1849440"
  },
  {
    "text": "he has then we do something with it so does anyone see what we could do here",
    "start": "1849440",
    "end": "1854640"
  },
  {
    "text": "what an evil user could do what",
    "start": "1854640",
    "end": "1860840"
  },
  {
    "text": "if what if we Hammer the application with with sending step two request to it",
    "start": "1860840",
    "end": "1867760"
  },
  {
    "text": "while we're doing the checkout we understand I mean this is not far-fetched to think okay in step three",
    "start": "1867760",
    "end": "1872880"
  },
  {
    "text": "I I understand that some validation is going on because I cannot choose this secret Ida that I somehow have learned",
    "start": "1872880",
    "end": "1879519"
  },
  {
    "text": "about uh so maybe there's a talk to vulnerability here I'll just keep bombarding my application with step two",
    "start": "1879519",
    "end": "1885600"
  },
  {
    "text": "request while I do the step three maybe I'm Lu and will inject right in between here and I will actually get access to",
    "start": "1885600",
    "end": "1892600"
  },
  {
    "text": "this secret product ID so the solution of course is to make data immutable so",
    "start": "1892600",
    "end": "1899159"
  },
  {
    "text": "we have the example again looks exactly the same uh but we have something called immutable data now instead the first",
    "start": "1899159",
    "end": "1905000"
  },
  {
    "text": "step is the same the Second Step here's the difference instead of just uh assigning or changing the product ID on",
    "start": "1905000",
    "end": "1910679"
  },
  {
    "text": "our existing object we can't do that anymore we have an immutable unchangeable object we have to create a",
    "start": "1910679",
    "end": "1915880"
  },
  {
    "text": "new one so you have some convenience method meod on the immutable data object that's called clone with a new product",
    "start": "1915880",
    "end": "1921720"
  },
  {
    "text": "ID I guess it should be called so it takes all the other fields I'm sure data has a bunch of fields in it and clones",
    "start": "1921720",
    "end": "1927679"
  },
  {
    "text": "those and assigns a new product ID and then we set that into our into our map",
    "start": "1927679",
    "end": "1932880"
  },
  {
    "text": "and the third step looks exactly the same we still have the time of check to time of use we can never escape from that right but now data is immutable",
    "start": "1932880",
    "end": "1940240"
  },
  {
    "text": "doesn't matter how many step two request type bombard in the middle there I'm just going to assign a new object and",
    "start": "1940240",
    "end": "1946240"
  },
  {
    "text": "the Val validation and the the the check and the use is always going to be performed on the same",
    "start": "1946240",
    "end": "1953519"
  },
  {
    "text": "data so immutability it doesn't solve all the problems in the universe of course but",
    "start": "1953519",
    "end": "1960080"
  },
  {
    "text": "it's it's uh you can consider it as a security spray it makes your code a lot easier to understand a lot more robust",
    "start": "1960080",
    "end": "1967760"
  },
  {
    "text": "and it should like I said it should really be a good reason you should have a really good reason not to make your data immutable okay it should be the",
    "start": "1967760",
    "end": "1975320"
  },
  {
    "text": "norm mutable objects something that can change should be contained isolated and",
    "start": "1975320",
    "end": "1980480"
  },
  {
    "text": "only poked with a stick so CU a lot of time you mix it right you have object with a lot of properties and many of",
    "start": "1980480",
    "end": "1987720"
  },
  {
    "text": "them will never change well then you know factor out an immutable object out of that put the mutable State and",
    "start": "1987720",
    "end": "1993960"
  },
  {
    "text": "another object that you only touch at C certain times makes everything a lot easier and a lot more",
    "start": "1993960",
    "end": "1999600"
  },
  {
    "text": "secure should be the norm uh that's it about immutability um",
    "start": "1999600",
    "end": "2009120"
  },
  {
    "text": "let's talk about the uh final pattern here uh something called the inverse",
    "start": "2009120",
    "end": "2015760"
  },
  {
    "text": "life coach pattern and to understand the inverse",
    "start": "2015760",
    "end": "2023360"
  },
  {
    "text": "life coach pattern we first have to look at the life coach anti pattern so the",
    "start": "2023360",
    "end": "2028440"
  },
  {
    "text": "life coach anti- pattern goes something like this this is the life coach speaking you",
    "start": "2028440",
    "end": "2034840"
  },
  {
    "text": "have done nothing yet my friend but you are already a success right no matter what happens in bun of",
    "start": "2034840",
    "end": "2040799"
  },
  {
    "text": "code you will succeed right and even if you don't I'll still charge you it's",
    "start": "2040799",
    "end": "2046200"
  },
  {
    "text": "awesome being a life coach so if for some reason you erroneously exit somewhere in bunch of code and have and",
    "start": "2046200",
    "end": "2054158"
  },
  {
    "text": "have not set success to false you will return success true which is wrong right because there was not a success and this",
    "start": "2054159",
    "end": "2061480"
  },
  {
    "text": "is a large part of the goto fail bug that you might heard about that uh happened to OSX that made TLS validation",
    "start": "2061480",
    "end": "2069520"
  },
  {
    "text": "uh in OSX disappear that they added the uh the an the sorry life coach um life",
    "start": "2069520",
    "end": "2076320"
  },
  {
    "text": "coach and a pattern together with some dub duplicate goto statements so what you should do then of",
    "start": "2076320",
    "end": "2082878"
  },
  {
    "text": "course the inverse life coach while you assume failure you are not a success you have to prove yourself in bunch of code",
    "start": "2082879",
    "end": "2089839"
  },
  {
    "text": "and maybe if you're really good enough You Really Got What It Takes sure go ah ahead and return yourself that's a",
    "start": "2089839",
    "end": "2095560"
  },
  {
    "text": "success but uh we can do better this is like a c example we are are using a",
    "start": "2095560",
    "end": "2101000"
  },
  {
    "text": "object oriented language probably so typical pattern looks like this uh we",
    "start": "2101000",
    "end": "2107079"
  },
  {
    "text": "fail fast like we try uh check and assume failure and and thr exception if",
    "start": "2107079",
    "end": "2113880"
  },
  {
    "text": "we something is wrong there can be a bunch of these statement if not has ACC if if not you know account is allowed to",
    "start": "2113880",
    "end": "2120640"
  },
  {
    "text": "operate on this method if not if not if not it should be really hard to to to uh",
    "start": "2120640",
    "end": "2125680"
  },
  {
    "text": "to go through this to actually go up into bunch of code and then if we",
    "start": "2125680",
    "end": "2130839"
  },
  {
    "text": "Against All Odds uh make our way through bunch of code then sure return but we",
    "start": "2130839",
    "end": "2135960"
  },
  {
    "text": "don't return a success you know did did it work true or false no you should only",
    "start": "2135960",
    "end": "2141760"
  },
  {
    "text": "return a proper domain object the only ways of exiting this function is either to explode in an exception or to through",
    "start": "2141760",
    "end": "2150440"
  },
  {
    "text": "a really Narrow Path challenging path of success end up with a valid domain",
    "start": "2150440",
    "end": "2155560"
  },
  {
    "text": "object you should you know you should picture the function fun as the Atlantic Ocean and you are a sunburned chain",
    "start": "2155560",
    "end": "2160680"
  },
  {
    "text": "smoking Frenchman that has to wind surf across it that that narrow that's that's the path of success okay so you there's",
    "start": "2160680",
    "end": "2168640"
  },
  {
    "text": "no way of you to to exit this without having a valid",
    "start": "2168640",
    "end": "2173240"
  },
  {
    "text": "object uh we're about ready to wrap stuff up I realized I'm talking really fast but uh hey that's how it goes",
    "start": "2175599",
    "end": "2183079"
  },
  {
    "text": "sometimes um I want to uh there's there are five things that I wanted to take home with you from this session the",
    "start": "2183079",
    "end": "2189839"
  },
  {
    "text": "first one is consider your uh trust boundaries where are you placing your trust think about the circle of trust",
    "start": "2189839",
    "end": "2197240"
  },
  {
    "text": "everything outside is trusted you have this small subset inside that's trusted and validation is the only way of",
    "start": "2197240",
    "end": "2203079"
  },
  {
    "text": "knowing this where uh if your data is valid or not or trusted so really think about this where",
    "start": "2203079",
    "end": "2208920"
  },
  {
    "text": "are you putting your trust and minimize Trust of course you should really try domain driven security it's easy it's",
    "start": "2208920",
    "end": "2215640"
  },
  {
    "text": "simple and it's it might seem almost trivial you know of course yeah just put some validation in your domain objects",
    "start": "2215640",
    "end": "2221160"
  },
  {
    "text": "but couple that with immutability and if' been using it for a while it's just it's so great because you know your",
    "start": "2221160",
    "end": "2228160"
  },
  {
    "text": "objects are always valid and you catch your bugs really early and you don't have to you actually get a bit hooked on",
    "start": "2228160",
    "end": "2235560"
  },
  {
    "text": "validation you want more validation so uh and you if you see a primitive type being passed around",
    "start": "2235560",
    "end": "2241560"
  },
  {
    "text": "you're like oh what's this it's not trusted it's so easy just change it to a the main object it's uh gives a great",
    "start": "2241560",
    "end": "2247520"
  },
  {
    "text": "defense in depth and like I said a few times immutability should be the norm right",
    "start": "2247520",
    "end": "2254599"
  },
  {
    "text": "try to uh isolate your mutable state if you see something mutable you should",
    "start": "2254599",
    "end": "2261000"
  },
  {
    "text": "feel bad something with Setters right this it's horrible try to contain it and minimize its spread because maybe you",
    "start": "2261000",
    "end": "2267760"
  },
  {
    "text": "realize that you didn't even need that flexibility to have mutable State you can kill it",
    "start": "2267760",
    "end": "2272960"
  },
  {
    "text": "off uh yeah not much to say about this one now this error it's an invalid poter",
    "start": "2272960",
    "end": "2278880"
  },
  {
    "text": "do not assign any other meaning to null okay don't it's life becomes so much easier when you don't pass around null",
    "start": "2278880",
    "end": "2286280"
  },
  {
    "text": "you don't have to do null checks you don't have to see that ugly word null everywhere it's just gone you you have can forget about it you'll sleep better",
    "start": "2286280",
    "end": "2292720"
  },
  {
    "text": "at night everything is better use optional of T to indicate missing values if a missing value is an exceptional",
    "start": "2292720",
    "end": "2298920"
  },
  {
    "text": "thing why throw an exception and you know watch the world burn it's going to be great uh fire your life coach uh be a",
    "start": "2298920",
    "end": "2307000"
  },
  {
    "text": "pessimist assume failure you know narrow path of success you're wind surfing across the Atlantic you're a Suber",
    "start": "2307000",
    "end": "2312440"
  },
  {
    "text": "Frenchman blah blah blah like that that's it folks uh I hope you",
    "start": "2312440",
    "end": "2318680"
  },
  {
    "text": "enjoyed it and uh that you learned something new and you can apply these uh patterns and Concepts uh immediately",
    "start": "2318680",
    "end": "2324960"
  },
  {
    "text": "when you get back to your programming activities uh don't be shy feel free to uh contact me I have like seven tweets",
    "start": "2324960",
    "end": "2332920"
  },
  {
    "text": "there but if you tweet I get an email so then I know you you're tweeted me I just",
    "start": "2332920",
    "end": "2338079"
  },
  {
    "text": "want to plug this a little quickly here uh there's a security Day Conference in November in malma just across the water",
    "start": "2338079",
    "end": "2345160"
  },
  {
    "text": "some really interesting stuff there it's in on aab check it out and please remember to uh rate this",
    "start": "2345160",
    "end": "2352800"
  },
  {
    "text": "session and uh we have about 13 minutes for questions so don't be shy thank you",
    "start": "2352800",
    "end": "2360400"
  },
  {
    "text": "all right do we have any questions",
    "start": "2360400",
    "end": "2367960"
  },
  {
    "text": "yeah thank you uh you said you also do Rec coie uh work yeah how often do you see",
    "start": "2367960",
    "end": "2375319"
  },
  {
    "text": "those practices you just preached uh not that often no it's uh",
    "start": "2375319",
    "end": "2383000"
  },
  {
    "text": "that's why they're so useful I mean it's it's I I like to talk about it's easy to be uh like discouraged when you think",
    "start": "2383000",
    "end": "2389359"
  },
  {
    "text": "about security I guess you're thinking oh well you know it doesn't matter if I do this or not because you know if",
    "start": "2389359",
    "end": "2395079"
  },
  {
    "text": "someone wants they can still hack my application what it's not true it's not really true sure if they're like a nation state is after you the NSA or",
    "start": "2395079",
    "end": "2401839"
  },
  {
    "text": "whatever someone someone who's really skilled and determined yes they probably can hack your application and your",
    "start": "2401839",
    "end": "2407079"
  },
  {
    "text": "company or whatever but you know it's the 8020 rule with a a small amount of input like 20% you get 80% of the",
    "start": "2407079",
    "end": "2413839"
  },
  {
    "text": "success so this just doing proper validation finding your trust boundary immutability really simple things that's",
    "start": "2413839",
    "end": "2419760"
  },
  {
    "text": "going to make it a lot harder for the average you know hacker from I'm not going to say a country just some",
    "start": "2419760",
    "end": "2425680"
  },
  {
    "text": "somewhere to hack your application so yeah so do it's it's uh um you can",
    "start": "2425680",
    "end": "2432520"
  },
  {
    "text": "really do a lot with small things I think yes back how do you what need do",
    "start": "2432520",
    "end": "2440119"
  },
  {
    "text": "you see for testing and validation want you within the test",
    "start": "2440119",
    "end": "2445319"
  },
  {
    "text": "tround um I'm sorry for so once you're within the trust pound what what needs",
    "start": "2445319",
    "end": "2451720"
  },
  {
    "text": "do you see for continuously testing and validating data well there is uh if",
    "start": "2451720",
    "end": "2457359"
  },
  {
    "text": "you're inside the trust boundary you have validated your data and it's trusted right there's still business",
    "start": "2457359",
    "end": "2462800"
  },
  {
    "text": "rules that need to be validated but you do not have to validate your data again you can because it doesn't hurt but you",
    "start": "2462800",
    "end": "2469280"
  },
  {
    "text": "don't have to because you should you should trust your system right you have a method you should trust it otherwise",
    "start": "2469280",
    "end": "2474680"
  },
  {
    "text": "you'll just end up with validation a little bit scattered everywhere on the code around the code but if you do this properly then you should be fine but if",
    "start": "2474680",
    "end": "2481400"
  },
  {
    "text": "you have something super sensitive maybe you should add more layers like if you have this critical part of your application doesn't hurt to do it do the",
    "start": "2481400",
    "end": "2488319"
  },
  {
    "text": "validation again right because maybe someone changes this object out there and then you end up with bad data here",
    "start": "2488319",
    "end": "2494280"
  },
  {
    "text": "so but what I when I do this I I use domain security as much as I can and",
    "start": "2494280",
    "end": "2500160"
  },
  {
    "text": "then for for the more security critical things I add a few more layers right there like at the when you're doing your",
    "start": "2500160",
    "end": "2506920"
  },
  {
    "text": "credit card processing whatever right there just do a do a few more things just be be sure belts and",
    "start": "2506920",
    "end": "2512480"
  },
  {
    "text": "suspenders uh I think there was someone here before yeah do you ever break these rules and performance critical sections",
    "start": "2512480",
    "end": "2518280"
  },
  {
    "text": "of your code never ever never uh uh no I haven't perance",
    "start": "2518280",
    "end": "2524520"
  },
  {
    "text": "critical and there some situations where even opening a try catches performance critic opening okay okay yeah yeah but I",
    "start": "2524520",
    "end": "2533119"
  },
  {
    "text": "uh I want to stick my neck out and question that a little bit if it's really if it really is performance",
    "start": "2533119",
    "end": "2539240"
  },
  {
    "text": "critical I don't know what you work with but it could work at Facebook okay but I it's uh I'm just",
    "start": "2539240",
    "end": "2547319"
  },
  {
    "text": "want to caution against like premature optimization that you really need to measure that and it's fine if if you",
    "start": "2547319",
    "end": "2553359"
  },
  {
    "text": "know unwinding a St unwinding an exception is too expensive for you sure",
    "start": "2553359",
    "end": "2558480"
  },
  {
    "text": "but it's there used to be like talking about Java that oh exceptions are expensive you can't use them you should use return Val that's like 15 years ago",
    "start": "2558480",
    "end": "2566280"
  },
  {
    "text": "you know it doesn't apply anymore so so but make sure just make sure by by measuring that that's really the case",
    "start": "2566280",
    "end": "2572559"
  },
  {
    "text": "and then sure go ahead and do something else but uh try to use uh use these exceptions as much as possible yes you",
    "start": "2572559",
    "end": "2579920"
  },
  {
    "text": "talk a lot about immutability like a very good thing and I agree but our languages like C and Java are made for",
    "start": "2579920",
    "end": "2586920"
  },
  {
    "text": "mutability it's pretty hard to do so let's say you have some object and you have like 10 fields and you want to",
    "start": "2586920",
    "end": "2593319"
  },
  {
    "text": "change one field then you have to make a Constructor you have to copy the nine fields and the one you want to change",
    "start": "2593319",
    "end": "2598960"
  },
  {
    "text": "you understand what I mean so it's not easy at all I mean our language isn't cope for immutability so it's quite easy",
    "start": "2598960",
    "end": "2604720"
  },
  {
    "text": "to say just do it but in fact it's totally difficult H I don't think that's",
    "start": "2604720",
    "end": "2610359"
  },
  {
    "text": "it's that hard actually no but it depends maybe if you have 10 Fields maybe it's too much maybe you can",
    "start": "2610359",
    "end": "2615599"
  },
  {
    "text": "refactor into two objects uh of course it's it's um can be annoying you know",
    "start": "2615599",
    "end": "2621640"
  },
  {
    "text": "making a but you can make a use the Builder pattern instead instead of making a huge Constructor you have to call you make a builder object that you",
    "start": "2621640",
    "end": "2627760"
  },
  {
    "text": "set it's a pattern you can look it up uh but um I I think I don't think it's that",
    "start": "2627760",
    "end": "2635200"
  },
  {
    "text": "hard I don't think uh sure there built for mutability it's not like a core concept it's not a first class citizen",
    "start": "2635200",
    "end": "2642160"
  },
  {
    "text": "in in the language uh but uh I think it can be used successfully without too",
    "start": "2642160",
    "end": "2647480"
  },
  {
    "text": "much without any pain the benefits overweigh the pain there's no there there is pain yes but it's it's a good",
    "start": "2647480",
    "end": "2654520"
  },
  {
    "text": "pain right so sorry yeah yeah second",
    "start": "2654520",
    "end": "2659640"
  },
  {
    "text": "question you said like the object should validate themselves but often you have external dependencies so it's quite easy",
    "start": "2659640",
    "end": "2665520"
  },
  {
    "text": "to say okay an angle should be 0 to 90° or whatever but if you have to check",
    "start": "2665520",
    "end": "2671480"
  },
  {
    "text": "before you make an account does it exist already then you have an external dependency on the database and you can't",
    "start": "2671480",
    "end": "2676960"
  },
  {
    "text": "put that inside the entity because that would suck I mean so it's not so easy as you put it because I mean the entity",
    "start": "2676960",
    "end": "2683880"
  },
  {
    "text": "okay I have I'm a valid integer but maybe some other entity already have my",
    "start": "2683880",
    "end": "2689160"
  },
  {
    "text": "my account yes yes of course it's it's like the domain security ensures that",
    "start": "2689160",
    "end": "2694359"
  },
  {
    "text": "your basic building blocks are valid so yes of of course you have to validate that you have access to this account and",
    "start": "2694359",
    "end": "2700319"
  },
  {
    "text": "do these just regular checks before you create you even create your object yes",
    "start": "2700319",
    "end": "2705599"
  },
  {
    "text": "you should never call a service from your domain object of course not so you're right absolutely it doesn't cover everything but it sure beats the heck",
    "start": "2705599",
    "end": "2712839"
  },
  {
    "text": "out of having no validation and or having validation everywhere so yeah it's not a it's not a silver bullet but",
    "start": "2712839",
    "end": "2719200"
  },
  {
    "text": "it's really good I think well if you have no more questions I think we'll just say thank you right thank you",
    "start": "2719200",
    "end": "2728520"
  }
]