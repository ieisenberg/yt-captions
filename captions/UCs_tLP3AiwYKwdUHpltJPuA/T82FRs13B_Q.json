[
  {
    "start": "0",
    "end": "225000"
  },
  {
    "text": "howdy everyone uh has everyone had a fairly exciting morning that's good it's good because now you're stuck in a room",
    "start": "6000",
    "end": "12120"
  },
  {
    "text": "uh with a talk which I I would say the explicit goal is to be the most boring talk at Lambda",
    "start": "12120",
    "end": "17560"
  },
  {
    "text": "Jam pre lock the doors um um so let's get stuck in um mundane",
    "start": "17560",
    "end": "24599"
  },
  {
    "text": "utility is an interesting ter of phrase uh and it uh reminds me of functional",
    "start": "24599",
    "end": "30279"
  },
  {
    "text": "programming in a lot of ways um the idea that uh you can have extraordinary",
    "start": "30279",
    "end": "36800"
  },
  {
    "text": "powers but do something extremely ordinary with it uh when I hear people",
    "start": "36800",
    "end": "41879"
  },
  {
    "text": "talking about functional program they're obv they're all they're always talking about the crazy amazing things we can do with functional programming or what is",
    "start": "41879",
    "end": "49000"
  },
  {
    "text": "the magical most complicated problem I can solve to justify using functional programming uh I'm kind of interested in",
    "start": "49000",
    "end": "55600"
  },
  {
    "text": "the other side so I uh work with a team of about 15 to 20 people We're Riding High scho every day uh doing functional",
    "start": "55600",
    "end": "62680"
  },
  {
    "text": "programming every day and most of the problems we're solving are plan or programming problems um they are the",
    "start": "62680",
    "end": "68200"
  },
  {
    "text": "mundane uh we want to be able to do really well at those so the most mundane thing I could",
    "start": "68200",
    "end": "74680"
  },
  {
    "text": "think of is UNIX supposedly there is somewhere in the vicinity of one and a half to two billion Unix installs right",
    "start": "74680",
    "end": "81840"
  },
  {
    "text": "now um probably like how many people in this room there's probably two per",
    "start": "81840",
    "end": "87079"
  },
  {
    "text": "person in this room um there there is a lot who who uses or um Unix or Linux or",
    "start": "87079",
    "end": "95560"
  },
  {
    "text": "some variant um day to-day it's good that's going to make",
    "start": "95560",
    "end": "102040"
  },
  {
    "text": "this talk a little bit easier um cool so Unix has a fairly simple architecture that I'm going to even more I'm going to",
    "start": "102040",
    "end": "109079"
  },
  {
    "text": "dramatically simplify even more um just for the purpose of introducing things but Unix we have Unix kernel uh STS over",
    "start": "109079",
    "end": "116799"
  },
  {
    "text": "our Hardware provides us a bunch of services uh uh two userland programs so we can go and Implement programs that",
    "start": "116799",
    "end": "123039"
  },
  {
    "text": "can do all sorts of various things uh one of the most interesting things about unix's design which kind of set it apart",
    "start": "123039",
    "end": "129679"
  },
  {
    "text": "when it was um when operating systems were in their infancy was that the user",
    "start": "129679",
    "end": "135080"
  },
  {
    "text": "shell or the shell the interface to the actual operating system uh was separate",
    "start": "135080",
    "end": "140400"
  },
  {
    "text": "from the kernel uh it it exists in userland that means that we can replace it uh we can use a different one we can",
    "start": "140400",
    "end": "147840"
  },
  {
    "text": "even write our own so uh hands up here um who uses bash day to",
    "start": "147840",
    "end": "155120"
  },
  {
    "text": "day everyone take note of those people um um who uses Zed",
    "start": "155120",
    "end": "161360"
  },
  {
    "text": "shell yep laugh at the first people um no no it's it's okay it's okay",
    "start": "161360",
    "end": "169280"
  },
  {
    "text": "uh who uses fish oh got a couple people it's cool cool who uses something simpler a",
    "start": "169280",
    "end": "175879"
  },
  {
    "text": "traditional corn shell or something like that nobody it's all right um who uses",
    "start": "175879",
    "end": "182480"
  },
  {
    "text": "seashell one person I have to I have to yeah even bash users can",
    "start": "182480",
    "end": "188599"
  },
  {
    "text": "laugh sorry sorry um but the point is that there's a whole variety of shells",
    "start": "188599",
    "end": "194200"
  },
  {
    "text": "um providing a whole bunch of different functions providing a whole different view on uh on our operating system um",
    "start": "194200",
    "end": "200879"
  },
  {
    "text": "the purpose of this shell is to provide an interface to uh all of the utilities that we have and really provide a way to",
    "start": "200879",
    "end": "206200"
  },
  {
    "text": "compose programs and what I mean by compos programs is rather than coupling programs by writing a program that",
    "start": "206200",
    "end": "212480"
  },
  {
    "text": "references these two things um being able to compose programs just through their data um and Unix shells let us do this",
    "start": "212480",
    "end": "220640"
  },
  {
    "text": "and they are quite painful but they do let us do it so as a bit of a framework for",
    "start": "220640",
    "end": "229120"
  },
  {
    "start": "225000",
    "end": "448000"
  },
  {
    "text": "understanding uh where shells fit in uh let's talk about how we get to a shell running on a computer so we start with",
    "start": "229120",
    "end": "237079"
  },
  {
    "text": "piece of Hardware that's going to run some firmware our traditionally this would be bios uh more moden systems",
    "start": "237079",
    "end": "242720"
  },
  {
    "text": "might have UEFI or something else um that firmware will load a boot loader uh",
    "start": "242720",
    "end": "249519"
  },
  {
    "text": "this is where all of the uh get off my lawn programmers can go yeah nobody can",
    "start": "249519",
    "end": "255079"
  },
  {
    "text": "fit it in fit it in the space required anymore and why bootloaders that load bootloaders and all crazy sorts of stuff",
    "start": "255079",
    "end": "262079"
  },
  {
    "text": "um bootloaders are responsible for uh loading our kernel and our kernel is responsible for",
    "start": "262079",
    "end": "268800"
  },
  {
    "text": "starting uh setting up our system uh configuring our devices Etc but then starting one process and one process",
    "start": "268800",
    "end": "276880"
  },
  {
    "text": "only that process is generally what we refer to in it even though it comes in many many forms is the the source of",
    "start": "276880",
    "end": "283120"
  },
  {
    "text": "many wars um exactly what in it is uh in modern Linux systems we have well we",
    "start": "283120",
    "end": "289080"
  },
  {
    "text": "have CIS CIS 5 we have traditional init stuff we have U System D on FreeBSD we",
    "start": "289080",
    "end": "295479"
  },
  {
    "text": "have an RC system uh there are a whole bunch of different ways and then it is responsible for starting other",
    "start": "295479",
    "end": "302080"
  },
  {
    "text": "processes okay how does it start another process well it has to ask the colonel to do something for us the Kel doesn't",
    "start": "302080",
    "end": "308360"
  },
  {
    "text": "provide any way to say run program that's not a function that the kernel gives us instead uh we have to look out",
    "start": "308360",
    "end": "317320"
  },
  {
    "text": "for uh replicants but what we do is we ask the colonel to copy us uh through",
    "start": "317320",
    "end": "325000"
  },
  {
    "text": "the fork call so have a look at the fork call uh this is very relevant for when",
    "start": "325000",
    "end": "330520"
  },
  {
    "text": "you're implementing your own shell this afternoon hopefully people are going to come to the workshop which is kind of",
    "start": "330520",
    "end": "335639"
  },
  {
    "text": "the point um so Fort creates a new process a new process is an exact copy",
    "start": "335639",
    "end": "341440"
  },
  {
    "text": "of the calling process um that's interesting so in it going to create an exact copy of itself",
    "start": "341440",
    "end": "347759"
  },
  {
    "text": "um it's not all that useful but uh we can do that so we're going to create an",
    "start": "347759",
    "end": "354240"
  },
  {
    "text": "exact copy of ourselves and then we want to turn that copy into a different program so we get Prov with a different",
    "start": "354240",
    "end": "360240"
  },
  {
    "text": "different system call which is exec exec will take the current process image and",
    "start": "360240",
    "end": "366360"
  },
  {
    "text": "load in a new executable into that space so that's like Terminator T1000 type",
    "start": "366360",
    "end": "373400"
  },
  {
    "text": "stuff um and so we can turn our Fork process into another process using exec",
    "start": "373400",
    "end": "379080"
  },
  {
    "text": "or the exec family of functions uh this is just one example of how we could get to uh an actual shell",
    "start": "379080",
    "end": "386120"
  },
  {
    "text": "running um this is how FreeBSD Works um uh but there are many other ways there",
    "start": "386120",
    "end": "391639"
  },
  {
    "text": "can be graphical shells and a whole bunch of other things so FreeBSD in it will'll start we'll call the the Getty",
    "start": "391639",
    "end": "397319"
  },
  {
    "text": "program which will uh do a bit of housekeeping on our consoles our terminals to make sure everything's",
    "start": "397319",
    "end": "402720"
  },
  {
    "text": "right which will call the login program by fork and exac",
    "start": "402720",
    "end": "408759"
  },
  {
    "text": "again the login program will prompt us for a password once it authenticates us it will look up our shell and then",
    "start": "408759",
    "end": "415280"
  },
  {
    "text": "invoke our shell again uh using exec replacing the login program",
    "start": "415280",
    "end": "420759"
  },
  {
    "text": "we'll get a shell and then using this shell We Can Start programs we can run programs in the background we can do a",
    "start": "420759",
    "end": "426120"
  },
  {
    "text": "whole bunch of things as usual as users so I can run LS I can do a whole bunch of different things right so that's",
    "start": "426120",
    "end": "431720"
  },
  {
    "text": "where shells fit in shells are now responsible for uh starting our other programs um Etc uh on OSX there's a",
    "start": "431720",
    "end": "440879"
  },
  {
    "text": "graphical shell um but we also have command line shells when I say shell from now on I'm probably going to be referring to command line",
    "start": "440879",
    "end": "448080"
  },
  {
    "start": "448000",
    "end": "683000"
  },
  {
    "text": "shells cool so what is a shell and why would we want to implement",
    "start": "448080",
    "end": "454720"
  },
  {
    "text": "one so the why is kind of interesting um one of the reasons might be that we have",
    "start": "454720",
    "end": "461599"
  },
  {
    "text": "vulnerabilities to get their own Graphics um this is shell shock which is a bash vulnerability that allowed remote",
    "start": "461599",
    "end": "469199"
  },
  {
    "text": "code execution for a whole bunch of different things um I also put this question to my team about uh like what's",
    "start": "469199",
    "end": "476120"
  },
  {
    "text": "wrong with shell um we write lots of shell um and and hate it quite a bit but",
    "start": "476120",
    "end": "482599"
  },
  {
    "text": "uh apparently everyone on my team has either dropped a production database or",
    "start": "482599",
    "end": "488159"
  },
  {
    "text": "and if they haven't done that they've deleted all Source control ever one of the two um there are lots of",
    "start": "488159",
    "end": "496360"
  },
  {
    "text": "different RS um this this poor person who uh on the internet changed their",
    "start": "496360",
    "end": "501599"
  },
  {
    "text": "install scripts um to run RM minus rf/ user and added an accidental",
    "start": "501599",
    "end": "508199"
  },
  {
    "text": "space um you can't actually even get to the code anymore there's so many comments on it um um there there there",
    "start": "508199",
    "end": "515599"
  },
  {
    "text": "are lots of different reasons uh a more modern issue is um uh or not even a",
    "start": "515599",
    "end": "521039"
  },
  {
    "text": "modern issue it's something that's happened for ages how many people have a git prompt that uh displays the branch",
    "start": "521039",
    "end": "528080"
  },
  {
    "text": "name yeah poor people so um most implementations of",
    "start": "528080",
    "end": "535320"
  },
  {
    "text": "this call eval running arbitrary code um the default branch on a git repository",
    "start": "535320",
    "end": "541880"
  },
  {
    "text": "does not have to be Master it could be a specially crafted Branch name that when you CD into the directory will execute",
    "start": "541880",
    "end": "547519"
  },
  {
    "text": "arbitrary things on your computer just good luck with that okay um there are lots of reasons",
    "start": "547519",
    "end": "554480"
  },
  {
    "text": "for us to implement our in shells um they're aerone uh we use them a lot um",
    "start": "554480",
    "end": "560360"
  },
  {
    "text": "and they are pretty critical uh maybe we can do a better job whether it's a better job through adding better support",
    "start": "560360",
    "end": "566720"
  },
  {
    "text": "for linting or uh checking Scripts or it's actually implementing a shell that is less arror prone or provides more",
    "start": "566720",
    "end": "573320"
  },
  {
    "text": "functionality to write correct program compositions cool so building blocks of",
    "start": "573320",
    "end": "579760"
  },
  {
    "text": "a command line shell start at the bottom uh the first thing that a shell has to do is line",
    "start": "579760",
    "end": "585519"
  },
  {
    "text": "editing or some form of line editing so this is interacting with console uh and",
    "start": "585519",
    "end": "591480"
  },
  {
    "text": "uh taking user input so when you hit backspace it will send a an escape sequence turning that escape sequence",
    "start": "591480",
    "end": "597800"
  },
  {
    "text": "into actually deleting a character in your console um line editing functionality also tends to look after",
    "start": "597800",
    "end": "604200"
  },
  {
    "text": "things like history uh Auto completion or tab completion um being a to uh uh do",
    "start": "604200",
    "end": "611600"
  },
  {
    "text": "replacing on on previous commands Etc then we have command passing so that's",
    "start": "611600",
    "end": "617360"
  },
  {
    "text": "taking the string that you give your shell and turn it into a program to execute or a series of instructions",
    "start": "617360",
    "end": "623640"
  },
  {
    "text": "command expansion which is taking that paused uh paed command and doing things",
    "start": "623640",
    "end": "630640"
  },
  {
    "text": "like filling in variables running subshells uh doing globing if you're into that sort of thing uh providing a",
    "start": "630640",
    "end": "637399"
  },
  {
    "text": "series of built-ins uh if you do the workshop this afternoon you'll see why built-ins are important there are some things that can't be done sensibly via a",
    "start": "637399",
    "end": "645560"
  },
  {
    "text": "ex foring executing a program um CD is a good example um so they provide standard",
    "start": "645560",
    "end": "652360"
  },
  {
    "text": "functionality like CD uh uh setting of uh setting of environment variables like",
    "start": "652360",
    "end": "659040"
  },
  {
    "text": "um a whole bunch of other things that I'm not thinking of right now and then Process Management which is kind of the",
    "start": "659040",
    "end": "664600"
  },
  {
    "text": "Crux of the problem here uh starting and managing processes uh this is the basics of just running a program uh",
    "start": "664600",
    "end": "670880"
  },
  {
    "text": "constructing a pipeline or a list of programs to run uh and through to job",
    "start": "670880",
    "end": "675920"
  },
  {
    "text": "control so being able to start things in the background recall them uh disconnect them from your terminal that type of",
    "start": "675920",
    "end": "683240"
  },
  {
    "start": "683000",
    "end": "883000"
  },
  {
    "text": "thing cool so I'm going to explain light ending first in about uh 3 seconds by",
    "start": "683240",
    "end": "688760"
  },
  {
    "text": "saying we're going to cheat um line editing is a mundane problem but it's",
    "start": "688760",
    "end": "694320"
  },
  {
    "text": "not the mundane problem that I want to tackle today uh most shells or uh most shells do use another library or a",
    "start": "694320",
    "end": "701160"
  },
  {
    "text": "dependency to implement lightning bash uses gnu readline for example uh we're going to take a similar shortcut if in",
    "start": "701160",
    "end": "707600"
  },
  {
    "text": "the workshop you would like to implement your own line editor um it is possible using um hascol hasard dependency called",
    "start": "707600",
    "end": "713399"
  },
  {
    "text": "term info uh you can get to try to do that yourself um but I'll demonstrate",
    "start": "713399",
    "end": "718600"
  },
  {
    "text": "what we have um what do we got soorry going to use H",
    "start": "718600",
    "end": "723720"
  },
  {
    "text": "line which is a gen read line clone um that kind of get input line uh we're",
    "start": "723720",
    "end": "730480"
  },
  {
    "text": "going to pass that input line and then go and interpret it so nothing too complicated but that gives us the ability to I run that H that's a",
    "start": "730480",
    "end": "741040"
  },
  {
    "text": "test it's probably small sorry",
    "start": "746880",
    "end": "751160"
  },
  {
    "text": "uh so if I uh run that so get a prompt um things",
    "start": "753000",
    "end": "759000"
  },
  {
    "text": "aren't implemented I can't actually edit anything oh sorry it exited um but we'll",
    "start": "759000",
    "end": "765279"
  },
  {
    "text": "get there in a second so we have line editing and if I run it again we'll have",
    "start": "765279",
    "end": "771480"
  },
  {
    "text": "we'll have history once we can run uh run a command so moving on to more interesting",
    "start": "771480",
    "end": "777720"
  },
  {
    "text": "things paing here is a domain that is somewhat uh optimized for for the tools",
    "start": "777720",
    "end": "785720"
  },
  {
    "text": "that we have in functional programming um we have good data type support we have good p p support um H in particular",
    "start": "785720",
    "end": "792199"
  },
  {
    "text": "has lots of really good paing libraries but we're going to dive into this so going to present a quite simplified uh",
    "start": "792199",
    "end": "798680"
  },
  {
    "text": "grammar of a shell um that's based on born shell but without control control flow for the moment you can do a lot",
    "start": "798680",
    "end": "805040"
  },
  {
    "text": "with it so to kind of give you an idea of where we what we want to be able able to do uh so we want to be able to uh",
    "start": "805040",
    "end": "813399"
  },
  {
    "text": "this in zshell but we want to be able to do things like uh say",
    "start": "813399",
    "end": "820839"
  },
  {
    "text": "Echo so run a run a program we want to be able to pipe that program into",
    "start": "820880",
    "end": "826199"
  },
  {
    "text": "something else so maybe",
    "start": "826199",
    "end": "830079"
  },
  {
    "text": "said we want to be able to do pipes we also want to be able to",
    "start": "833639",
    "end": "839160"
  },
  {
    "text": "say we want to be able to do things conditionally um so that will fail um so I want to or",
    "start": "839160",
    "end": "848199"
  },
  {
    "text": "Echo that was bad right so I want to be able to have ores I want to be able to",
    "start": "848199",
    "end": "853920"
  },
  {
    "text": "have ends um so it's not going to Echo",
    "start": "853920",
    "end": "859519"
  },
  {
    "text": "because it's false right so ORS ands pipes and then I also want to implement",
    "start": "859519",
    "end": "865199"
  },
  {
    "text": "um multiple programs so semicolon so I can and output something else as well",
    "start": "865199",
    "end": "872000"
  },
  {
    "text": "okay so that's kind of the complet complete version of our Baseline shell and we can extend from",
    "start": "872000",
    "end": "878720"
  },
  {
    "text": "there so paing uh we're going to follow a fairly",
    "start": "880079",
    "end": "886000"
  },
  {
    "start": "883000",
    "end": "1223000"
  },
  {
    "text": "well trodden path for how to construct the paa um there are a few challenges in doing it for a grammar like this or for",
    "start": "886000",
    "end": "891959"
  },
  {
    "text": "a posix like shell um but we're basically going to follow these steps we've got some character input we're",
    "start": "891959",
    "end": "897440"
  },
  {
    "text": "going to Lex that into a series of tokens um which are our and or pipe uh",
    "start": "897440",
    "end": "903040"
  },
  {
    "text": "statement Terminator and our words which make up our program uh once we've got our token stream we'll take that run it",
    "start": "903040",
    "end": "909800"
  },
  {
    "text": "through AA to actually construct a program tree uh that we'll be able to interpret so it's quite straightforward",
    "start": "909800",
    "end": "917160"
  },
  {
    "text": "um but uh as you see working through it uh there's a few interesting problems to solve",
    "start": "917160",
    "end": "923160"
  },
  {
    "text": "here cool so let's get in and get started",
    "start": "923160",
    "end": "929519"
  },
  {
    "text": "uh make sure I'm",
    "start": "932480",
    "end": "936279"
  },
  {
    "text": "compiling cool so I've got a whole bunch of tests which are going to",
    "start": "944079",
    "end": "949759"
  },
  {
    "text": "fail we going to start with Alexa uh cool oh there not all going to fail",
    "start": "952519",
    "end": "961319"
  },
  {
    "text": "apparently um cool so I'm going to start with uh data",
    "start": "961319",
    "end": "968000"
  },
  {
    "text": "types sorry all over the place okay so as I said our token stream is going to",
    "start": "968360",
    "end": "974279"
  },
  {
    "text": "be straight fairly straightforward to implement these types of programs we need an and token an or token a",
    "start": "974279",
    "end": "979639"
  },
  {
    "text": "statement token pipe token and the most interesting one which is our word token uh to construct our",
    "start": "979639",
    "end": "986839"
  },
  {
    "text": "programs uh from here so we can go in looks fairly reasonable we can go and",
    "start": "986839",
    "end": "994120"
  },
  {
    "text": "start to implement these things bring that over so we want to be",
    "start": "994120",
    "end": "999319"
  },
  {
    "text": "able to construct tokens one at a time so how we're actually going to do this is we're going to read or consumer token",
    "start": "999319",
    "end": "1006079"
  },
  {
    "text": "and then for any space after that we're going to discard that space so that's how we'll get rid of things like",
    "start": "1006079",
    "end": "1011680"
  },
  {
    "text": "comments we'll chew up any space if there's a comment we'll chew it all up until we hit a new line or another token",
    "start": "1011680",
    "end": "1018279"
  },
  {
    "text": "so that's what space or comment's doing which I've provided won't go into too much detail so now I want to handle and",
    "start": "1018279",
    "end": "1028520"
  },
  {
    "text": "tokens start with all the easy ones or tokens uh statement",
    "start": "1028520",
    "end": "1036880"
  },
  {
    "text": "tokens uh pipe tokens so they're all the obvious ones uh starting to get less",
    "start": "1036880",
    "end": "1042678"
  },
  {
    "text": "obvious um we want to handle end of uh end of lines so going to follow a very",
    "start": "1042679",
    "end": "1049720"
  },
  {
    "text": "simplified model um people who actually write programming language don't hate on me too much but we're going to do a",
    "start": "1049720",
    "end": "1054840"
  },
  {
    "text": "pretend semicolon insertion so every time we see a new line uh that's not as part of a token we're going to insert a",
    "start": "1054840",
    "end": "1060360"
  },
  {
    "text": "semicolon to indicate that that's theend that's the end of a statement okay so that's a little bit cheating and then",
    "start": "1060360",
    "end": "1066080"
  },
  {
    "text": "we're going to do our words which I'll have to explain a little bit more",
    "start": "1066080",
    "end": "1071600"
  },
  {
    "text": "detail cool I'll get there cool so hands up if people think they understand how",
    "start": "1071600",
    "end": "1079320"
  },
  {
    "text": "uh a shell paes words or paes that paes that command",
    "start": "1079320",
    "end": "1084559"
  },
  {
    "text": "line no no one's even that game cool that's pretty good so H so I got a",
    "start": "1084559",
    "end": "1092520"
  },
  {
    "text": "simple simple test program so print F which is what works like a c or a Java or High School print f um just kind of",
    "start": "1092520",
    "end": "1099039"
  },
  {
    "text": "print one argument for each argument is just kind of printed out one at a time so we can kind of see so if I type f bar",
    "start": "1099039",
    "end": "1104360"
  },
  {
    "text": "I have two arguments F and then space is the liit of that Token Bar is our second token okay um people will be familiar",
    "start": "1104360",
    "end": "1111320"
  },
  {
    "text": "with uh soft Quotes no double quotes um we'll turn F Bar into a single token uh",
    "start": "1111320",
    "end": "1117960"
  },
  {
    "text": "we got hard quotes single token uh this is where things starts going uh a bit uh a bit",
    "start": "1117960",
    "end": "1125559"
  },
  {
    "text": "crazy so this is where people start getting confused uh so what if I want to",
    "start": "1125559",
    "end": "1130880"
  },
  {
    "text": "uh have a variable here fo equals and then I actually want to print Foo and",
    "start": "1130880",
    "end": "1137240"
  },
  {
    "text": "then I want to uh do some",
    "start": "1137240",
    "end": "1143799"
  },
  {
    "text": "else I'll actually Define f for a",
    "start": "1143799",
    "end": "1148039"
  },
  {
    "text": "second so how many actual tokens are here I've got a hard qued bit I've got an unquoted bit with a variable and some",
    "start": "1148880",
    "end": "1154880"
  },
  {
    "text": "soft qued bits anyone want to yell out how many tokens are here one good some",
    "start": "1154880",
    "end": "1160400"
  },
  {
    "text": "cool",
    "start": "1160400",
    "end": "1163120"
  },
  {
    "text": "uh doing all right now it's that's right yeah so one token right",
    "start": "1166120",
    "end": "1172600"
  },
  {
    "text": "um I can put quotes around any part I can I don't know end up with all sorts",
    "start": "1172600",
    "end": "1180880"
  },
  {
    "text": "of ways all sorts of different ways to inter leing hard quotes inter leting inter leaving soft",
    "start": "1180880",
    "end": "1187000"
  },
  {
    "text": "quotes um so hopefully that makes sense so it's quite a complex uh tokenization",
    "start": "1187000",
    "end": "1192760"
  },
  {
    "text": "problem if we go to the spec uh for the real tokenization uh which looks",
    "start": "1192760",
    "end": "1199640"
  },
  {
    "text": "um there's a wall of text followed that doesn't actually explain anything about how to actually do it um followed by the",
    "start": "1199640",
    "end": "1206760"
  },
  {
    "text": "grammar which again only shows about half of the things um and you have to read about 40 pages to actually get to",
    "start": "1206760",
    "end": "1212240"
  },
  {
    "text": "the end of it um so we're going to use data types to kind of drive out a sensible way to handle this problem so",
    "start": "1212240",
    "end": "1217840"
  },
  {
    "text": "what we're going to do is got a picture for it so hope that we're going to say that words can",
    "start": "1217840",
    "end": "1224880"
  },
  {
    "start": "1223000",
    "end": "1508000"
  },
  {
    "text": "be made up by any series of either soft hard or unquoted parts for soft qued",
    "start": "1224880",
    "end": "1230679"
  },
  {
    "text": "parts we can either have soft qued text or a soft qued variable um in a real shell you might have other things such",
    "start": "1230679",
    "end": "1237240"
  },
  {
    "text": "as uh subshells being a child under here um we can have hard qued text for",
    "start": "1237240",
    "end": "1243080"
  },
  {
    "text": "unquoted things we can have variable or text uh in a real show you might have globbing or other things in here as well",
    "start": "1243080",
    "end": "1248679"
  },
  {
    "text": "um to PA of words it's really important that we um handle this word recognition",
    "start": "1248679",
    "end": "1254280"
  },
  {
    "text": "as a part of Lexing it's very it's very difficult or impossible to do later on um when you have to do recursive",
    "start": "1254280",
    "end": "1260280"
  },
  {
    "text": "execution for things like uh have a variable and then that variable has a subshell in it and you want to execute",
    "start": "1260280",
    "end": "1266280"
  },
  {
    "text": "that and it gets quite hard cool",
    "start": "1266280",
    "end": "1272080"
  },
  {
    "text": "so cool so that should be reflected in our types so our word type is basically",
    "start": "1272240",
    "end": "1278080"
  },
  {
    "text": "a list of part that up the top maybe list of part um part can be hard qued",
    "start": "1278080",
    "end": "1284440"
  },
  {
    "text": "which is just text soft qued which is a list of fragment or quoted which is a list of fragment and then a fragment can",
    "start": "1284440",
    "end": "1290559"
  },
  {
    "text": "either be a text part or a variable part so we can go in here uh we can",
    "start": "1290559",
    "end": "1296640"
  },
  {
    "text": "start to look at",
    "start": "1296640",
    "end": "1301720"
  },
  {
    "text": "uh this",
    "start": "1307799",
    "end": "1311799"
  },
  {
    "text": "there we go so pass so I'll try to build this up",
    "start": "1339200",
    "end": "1344400"
  },
  {
    "text": "slowly so we can pause our simple program like Echo hello world uh we can add in um bring the top so can",
    "start": "1344400",
    "end": "1353200"
  },
  {
    "text": "see it add in things like other",
    "start": "1353200",
    "end": "1357360"
  },
  {
    "text": "programs um missing quote see so things even work",
    "start": "1361120",
    "end": "1366960"
  },
  {
    "text": "so we can tokenize this stream into a series of words so we have um well we've",
    "start": "1366960",
    "end": "1372480"
  },
  {
    "text": "gone a little bit further paing everything um we'll get to that in a second cool so back",
    "start": "1372480",
    "end": "1381559"
  },
  {
    "text": "here cool okay so now onto our actual paa so",
    "start": "1383960",
    "end": "1390000"
  },
  {
    "text": "look starting again at the data types we got some complex",
    "start": "1390000",
    "end": "1395960"
  },
  {
    "text": "rules so as I've kind of tried to allude to we have a simplified grammar but this",
    "start": "1398120",
    "end": "1403159"
  },
  {
    "text": "grammar is that we have a program which is a list of lists uh a list being a shell term a list being a series of",
    "start": "1403159",
    "end": "1411039"
  },
  {
    "text": "commands a list can either be a Singleton list that contains a single pipeline an and list which is two",
    "start": "1411039",
    "end": "1416760"
  },
  {
    "text": "pipelines separated by separated by our n token or an all list uh separated by",
    "start": "1416760",
    "end": "1422000"
  },
  {
    "text": "the all token uh there's a this is a quite a funny or looks a little bit odd",
    "start": "1422000",
    "end": "1427720"
  },
  {
    "text": "to be defining it like this so we have a recursive like list-like structure um that has list except instead of normally",
    "start": "1427720",
    "end": "1434960"
  },
  {
    "text": "we would say our head which would be the the pipeline and then the list which is the rest of the things to come uh these",
    "start": "1434960",
    "end": "1441640"
  },
  {
    "text": "are flipped over that is because if you look at uh normal shell uh things are Le",
    "start": "1441640",
    "end": "1447279"
  },
  {
    "text": "left associative so if I have bring up my example from before one of these examples uh the",
    "start": "1447279",
    "end": "1454039"
  },
  {
    "text": "parentheses go uh here if we were to Define this uh",
    "start": "1454039",
    "end": "1461159"
  },
  {
    "text": "with a normal data type and Pa it in a normal like a normal normal Mantic paa um things would be right associative and",
    "start": "1461159",
    "end": "1466919"
  },
  {
    "text": "we'd end up with quite odd behavior um try might end up with something like",
    "start": "1466919",
    "end": "1475480"
  },
  {
    "text": "that which is not what you want I'm not sure if that hopefully that",
    "start": "1475480",
    "end": "1480880"
  },
  {
    "text": "makes sense so we really want to make sure that everything's less left associated with paing don't have to",
    "start": "1480880",
    "end": "1486480"
  },
  {
    "text": "define the data types like this um but it definitely makes it easier so we have a list which is made",
    "start": "1486480",
    "end": "1492640"
  },
  {
    "text": "up of pipelines or ANS and ores and then a pipeline which is made up either of a single command or a command separated by",
    "start": "1492640",
    "end": "1498039"
  },
  {
    "text": "a pipes and then our commands are just a list of words",
    "start": "1498039",
    "end": "1504520"
  },
  {
    "text": "cool okay running a little bit short on time so fly through Process Management um get to the bit where we can actually",
    "start": "1504520",
    "end": "1510880"
  },
  {
    "start": "1508000",
    "end": "1628000"
  },
  {
    "text": "show something working so simple pipeline so LS sort unique it's kind of",
    "start": "1510880",
    "end": "1516279"
  },
  {
    "text": "our final problem that we're going to solve for our base base level shell there are many different ways in",
    "start": "1516279",
    "end": "1522279"
  },
  {
    "text": "which you construct the processes using forkid exact to achieve this one of the most traditional processes is that we",
    "start": "1522279",
    "end": "1529120"
  },
  {
    "text": "follow this process where we'll Fork our shell once uh to start a start the very last",
    "start": "1529120",
    "end": "1537880"
  },
  {
    "text": "thing in our Pipeline and we're actually going to wait on this process that process will Fork",
    "start": "1537880",
    "end": "1543720"
  },
  {
    "text": "itself um for the first child and exec to create LS will Fork itself exec to",
    "start": "1543720",
    "end": "1550120"
  },
  {
    "text": "create sort we'll construct a pipeline between alysis and sort and a pipe between sort and",
    "start": "1550120",
    "end": "1556159"
  },
  {
    "text": "unique uh and we'll wait for unique to return so you wait for the last thing um this is traditionally how uh a lot of",
    "start": "1556159",
    "end": "1563440"
  },
  {
    "text": "early shells do it and it's very good for resource management um actually calling fork and exacts looking after",
    "start": "1563440",
    "end": "1568760"
  },
  {
    "text": "file descripted handles is quite a challenging problem and this turns out to be a fairly nice way to do it final",
    "start": "1568760",
    "end": "1573919"
  },
  {
    "text": "exac an alternative way um that often uh a lot more uh more modern shells I think",
    "start": "1573919",
    "end": "1580399"
  },
  {
    "text": "Z shell uh this is the process uh process that Zed shell follows is that they have a much more normal process",
    "start": "1580399",
    "end": "1587240"
  },
  {
    "text": "where you Fork once which will then Fork again Fork again exec the first thing in",
    "start": "1587240",
    "end": "1594080"
  },
  {
    "text": "your pipeline exec the second thing in your pipeline exact the third thing in your pipeline wait for that result so",
    "start": "1594080",
    "end": "1601159"
  },
  {
    "text": "it's a slightly different formulation where the forks happen what resources you have to clean up we're going to do a",
    "start": "1601159",
    "end": "1608279"
  },
  {
    "text": "third version that's even simpler than that uh we're going to Fork three times",
    "start": "1608279",
    "end": "1614039"
  },
  {
    "text": "from our parent process we're going to call Fork and then exec for our first process fork and then exec for our",
    "start": "1614039",
    "end": "1619520"
  },
  {
    "text": "second process fork and then exec for our third process uh this is a little",
    "start": "1619520",
    "end": "1625399"
  },
  {
    "text": "bit heavier on resources uh but and maybe not how you really want to implement a real shell but it has some",
    "start": "1625399",
    "end": "1632080"
  },
  {
    "start": "1628000",
    "end": "1838000"
  },
  {
    "text": "nice properties one of the nice properties is that the parent shell has access to all three Childs uh so that",
    "start": "1632080",
    "end": "1639000"
  },
  {
    "text": "means you can Implement things like bash's pipe fail so if you have a pipeline you can actually detect if any",
    "start": "1639000",
    "end": "1645200"
  },
  {
    "text": "part of it exits with non- zero rather than just the last component uh which is a nice",
    "start": "1645200",
    "end": "1650440"
  },
  {
    "text": "property cool so quickly go in and implement this let make sure I'm",
    "start": "1650440",
    "end": "1658919"
  },
  {
    "text": "compiling cool Sorry run pipeline so we have uh just kind of work",
    "start": "1659799",
    "end": "1668480"
  },
  {
    "text": "down from the top I should start at the top so we have a program that we're",
    "start": "1668480",
    "end": "1675159"
  },
  {
    "text": "going to interpret so how do we actually do that let's let's start with that so we have empty program uh we just",
    "start": "1675159",
    "end": "1682840"
  },
  {
    "text": "want to return uh exit success we don't want to do anything if we have a single",
    "start": "1682840",
    "end": "1688159"
  },
  {
    "text": "list in our Pro program we're going to run list uh passing in our input our",
    "start": "1688159",
    "end": "1693399"
  },
  {
    "text": "output and our error stream uh and run that list if we have uh more than one",
    "start": "1693399",
    "end": "1700360"
  },
  {
    "text": "thing we're going to run the first one and then we're going to recursively",
    "start": "1700360",
    "end": "1705840"
  },
  {
    "text": "Loop uh with the rest",
    "start": "1705840",
    "end": "1710120"
  },
  {
    "text": "so this is very mundane program not working out for me is it oh",
    "start": "1711120",
    "end": "1716720"
  },
  {
    "text": "all right I'll get to that in a second uh but this is a case of just following the types we've constructed",
    "start": "1716720",
    "end": "1722679"
  },
  {
    "text": "our types so that it's as easy as possible to run through The Interpreter I'll Zoom through this until we get to",
    "start": "1722679",
    "end": "1728120"
  },
  {
    "text": "the interesting part so now we're going to do our lists uh for a Singleton pipeline uh we just have one pipeline we",
    "start": "1728120",
    "end": "1734080"
  },
  {
    "text": "just need to run the pipeline input output error stream and run that",
    "start": "1734080",
    "end": "1740039"
  },
  {
    "text": "pipeline uh for the and list we want to do something slightly more complicated uh so we want to do get our result from",
    "start": "1740240",
    "end": "1747240"
  },
  {
    "text": "running the pipeline uh by running our parent sorry",
    "start": "1747240",
    "end": "1753200"
  },
  {
    "text": "and then we want to check on that exit case if it's end and it's success then",
    "start": "1753200",
    "end": "1759200"
  },
  {
    "text": "we actually want to run the second one uh so we want to call run",
    "start": "1759200",
    "end": "1765200"
  },
  {
    "text": "list uh",
    "start": "1765200",
    "end": "1770039"
  },
  {
    "text": "sorry run list on the parent uh run Pipeline on",
    "start": "1770519",
    "end": "1779960"
  },
  {
    "text": "ourselves otherwise we just want to fail how we did uh very similar process for all",
    "start": "1782240",
    "end": "1790120"
  },
  {
    "text": "obviously run list on the parent",
    "start": "1790120",
    "end": "1795840"
  },
  {
    "text": "uh uh if it's this case it's if it's success then we want to stop with that exit code if it fails then we want to",
    "start": "1795840",
    "end": "1802480"
  },
  {
    "text": "run the pipeline",
    "start": "1802480",
    "end": "1806120"
  },
  {
    "text": "uh that g a little bit longer than I'd like without compiling because of this bit so I'll get to this bit Singleton",
    "start": "1807840",
    "end": "1813679"
  },
  {
    "text": "pipeline we just want to run one command uh one run command with input",
    "start": "1813679",
    "end": "1820360"
  },
  {
    "text": "output error and the command and I'll just put an error here for a second so I can explain",
    "start": "1820360",
    "end": "1826200"
  },
  {
    "text": "something hopefully that will files yep cool so we've kind of done nothing",
    "start": "1826200",
    "end": "1832360"
  },
  {
    "text": "complicated except walk through the types as simple as possible we've implemented and and all as I've been walking through this uh now we're up to",
    "start": "1832360",
    "end": "1839559"
  },
  {
    "start": "1838000",
    "end": "2123000"
  },
  {
    "text": "the compound pipeline so I just have to introduce one quick concept to implement the comp pipeline correctly uh and",
    "start": "1839559",
    "end": "1847120"
  },
  {
    "text": "that's the idea of an actual Unix pipe so a pipe creates a unidirectional um",
    "start": "1847120",
    "end": "1853760"
  },
  {
    "text": "conduit with a read side and a right side that we can use to communicate data",
    "start": "1853760",
    "end": "1859000"
  },
  {
    "text": "from one process to another okay calling the pipe function will create one of these file descript these two file",
    "start": "1859000",
    "end": "1864639"
  },
  {
    "text": "descriptors and the pipe and the interesting property of these things is that they won't return",
    "start": "1864639",
    "end": "1871679"
  },
  {
    "text": "end of file until all of their input or all of their output have all been closed",
    "start": "1871679",
    "end": "1877159"
  },
  {
    "text": "so that lets you think do things like pipe the output of cat two different cats pipe together so I'm going to see",
    "start": "1877159",
    "end": "1883200"
  },
  {
    "text": "that if I go Echo fu Echo",
    "start": "1883200",
    "end": "1889679"
  },
  {
    "text": "bar I pipe to C for if for example uh if it Echo fu is",
    "start": "1889679",
    "end": "1899519"
  },
  {
    "text": "going to return Ender file Echo bar is going to return Ender file maybe if it was cat um if cat responded to those end",
    "start": "1899519",
    "end": "1907639"
  },
  {
    "text": "files it would have just printed Echo Fu but this pipe actually doesn't return end file until all of the inputs that",
    "start": "1907639",
    "end": "1913679"
  },
  {
    "text": "have been changed all close their pipe so that's interesting that's what lets us actually Implement piping",
    "start": "1913679",
    "end": "1920440"
  },
  {
    "text": "functionality so we want to create a pipe uh so read uh",
    "start": "1920440",
    "end": "1929120"
  },
  {
    "text": "write uh create Brer uh",
    "start": "1929120",
    "end": "1935880"
  },
  {
    "text": "crate okay once we've got a read in the right side uh we're going to cheat a little bit um so I'll dive",
    "start": "1937760",
    "end": "1945919"
  },
  {
    "text": "into run command to explain why so I've chosen not to implement uh not to use",
    "start": "1945919",
    "end": "1952000"
  },
  {
    "text": "raw fork and exact commands from hll uh just for the purpose of this excises so we're going to use system. process which",
    "start": "1952000",
    "end": "1958039"
  },
  {
    "text": "internally in C implements fork and exec um the reason for this is just to simplify it um there's a challenge",
    "start": "1958039",
    "end": "1964440"
  },
  {
    "text": "exercise to go and Implement fork and exec yourself uh if you would like um but this makes it easier so what we're",
    "start": "1964440",
    "end": "1970080"
  },
  {
    "text": "going to use is control concurrent async to asynchronously execute these two processes which will make it a lot",
    "start": "1970080",
    "end": "1975240"
  },
  {
    "text": "easier so we're going to do this uh our first exit code our second exit code uh",
    "start": "1975240",
    "end": "1981440"
  },
  {
    "text": "so async do concurrently we want to uh",
    "start": "1981440",
    "end": "1987000"
  },
  {
    "text": "run uh pipeline of so get the input uh we want to",
    "start": "1987000",
    "end": "1995320"
  },
  {
    "text": "write the output side uh keep error on our parent and on the other side we want to",
    "start": "1995320",
    "end": "2002240"
  },
  {
    "text": "run command given it the read of the pipe um",
    "start": "2002240",
    "end": "2007799"
  },
  {
    "text": "going to Output uh and error on the command like so and",
    "start": "2007799",
    "end": "2015600"
  },
  {
    "text": "then I return the final steps exit code notice that I'm ignoring underscore EA",
    "start": "2015600",
    "end": "2022000"
  },
  {
    "text": "here this is where I mentioned before pipe fail you'd execute uh if you wanted to check both exit",
    "start": "2022000",
    "end": "2027760"
  },
  {
    "text": "codes uh just make sure I've typed everything correctly cool so now we",
    "start": "2027760",
    "end": "2032919"
  },
  {
    "text": "should be able to fire up an actual shell uh if I go into the right thing",
    "start": "2032919",
    "end": "2039720"
  },
  {
    "text": "cool cool so now I should be able to Echo Foo in our own shell and it's going",
    "start": "2046360",
    "end": "2051398"
  },
  {
    "text": "to work uh we could uh Echo Fu pipe grap oh P",
    "start": "2051399",
    "end": "2058040"
  },
  {
    "text": "sad so whatever we want to do and we've got pipelines and they implemented and they",
    "start": "2058040",
    "end": "2064320"
  },
  {
    "text": "work and exits um the everyone who implements is the first time might um",
    "start": "2064320",
    "end": "2069720"
  },
  {
    "text": "have that hang if you don't do it properly get ready for control c um and",
    "start": "2069720",
    "end": "2076118"
  },
  {
    "text": "uh we can also do something uh I've also constructed some scripts so just some",
    "start": "2076119",
    "end": "2081440"
  },
  {
    "text": "simple examples of pipe for example uh using our shell X shell in the envme so",
    "start": "2081440",
    "end": "2091398"
  },
  {
    "text": "uh we should be able to you know we've got enough implemented that we should be able to go and run these scripts as well as work with it interactively",
    "start": "2091399",
    "end": "2099640"
  },
  {
    "text": "maybe cool so you can see it's implemented Echo script and the pipeline script um done some work so we've",
    "start": "2107079",
    "end": "2113800"
  },
  {
    "text": "implemented a somewhat real shell cool so just to finish off uh probably way",
    "start": "2113800",
    "end": "2120839"
  },
  {
    "text": "past time but getting the bad nod um I'll just say",
    "start": "2120839",
    "end": "2126200"
  },
  {
    "start": "2123000",
    "end": "2180000"
  },
  {
    "text": "we'll talk about it more uh in the this afternoon um you get in um for beginners um I'll get you to step through the bits",
    "start": "2126200",
    "end": "2131920"
  },
  {
    "text": "I've already done um for more advanced people as a branch to Jump Ahead uh and Implement some more features I want",
    "start": "2131920",
    "end": "2137920"
  },
  {
    "text": "everyone to push the limits for me so there's a whole bunch of things that um you could do you could take it in the path that leads to creating a fish-like",
    "start": "2137920",
    "end": "2144760"
  },
  {
    "text": "more interactive shell uh maybe doing fuzzy find um you could um Implement a",
    "start": "2144760",
    "end": "2151400"
  },
  {
    "text": "whole bunch of utilities like a concurrent four or parallel four implementing like first class parallelism in a shell would be pretty",
    "start": "2151400",
    "end": "2157280"
  },
  {
    "text": "awesome um having things like race two processes Etc that would be pretty awesome um you",
    "start": "2157280",
    "end": "2163319"
  },
  {
    "text": "could Implement a linter on top of our paa uh which would be also pretty cool um or you could just keep trying to uh",
    "start": "2163319",
    "end": "2170119"
  },
  {
    "text": "get posx equivalent see if you can outdo uh bash um so everyone can put their hands down cool uh Workshop 115 thank",
    "start": "2170119",
    "end": "2178000"
  },
  {
    "text": "you",
    "start": "2178000",
    "end": "2181000"
  }
]