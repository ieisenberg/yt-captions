[
  {
    "start": "0",
    "end": "141000"
  },
  {
    "text": "[Music]",
    "start": "3520",
    "end": "7840"
  },
  {
    "text": "welcome to the afternoon sessions I hope everybody enjoyed the bar we were just talking about whether we should have had",
    "start": "14450",
    "end": "19980"
  },
  {
    "text": "some fresh metal or something to start but we don't so I I'm not going to be my",
    "start": "19980",
    "end": "27570"
  },
  {
    "text": "name he's sort of associated to continuous delivery I should've warned you ahead of time I'm not really talking about continuous delivery today so if",
    "start": "27570",
    "end": "33149"
  },
  {
    "text": "you're expecting any of that stuff that's not what talking about we're talking about reactive systems I had the",
    "start": "33149",
    "end": "38280"
  },
  {
    "text": "privilege to be involved in one of those kind of once in a career sort of projects about 12 years ago and we",
    "start": "38280",
    "end": "49230"
  },
  {
    "text": "started building what turned out to be one of the world's highest performance financial exchanges and this was a",
    "start": "49230",
    "end": "55020"
  },
  {
    "text": "difficult problem it was it was a very challenging problem which we didn't know how to solve when we started so we",
    "start": "55020",
    "end": "60660"
  },
  {
    "text": "started doing some really quite engineering kind of things and trying to figure out how to do this stuff to cut a",
    "start": "60660",
    "end": "66000"
  },
  {
    "text": "long story short what came out of this was an idea that that we started afterwards talking about as reactive",
    "start": "66000",
    "end": "72390"
  },
  {
    "text": "systems and we did some fairly innovative things in terms of architecture on that project and and",
    "start": "72390",
    "end": "79290"
  },
  {
    "text": "reactive systems is one of those ideas that I think is timely for if I'm honest it's time has not yet come it's used in",
    "start": "79290",
    "end": "86340"
  },
  {
    "text": "some niche areas but there's some I think there's some really valuable ideas in here and I want to just try and go",
    "start": "86340",
    "end": "92460"
  },
  {
    "text": "through that quite a lot of this stuff we sort of it's not theoretical this is",
    "start": "92460",
    "end": "98189"
  },
  {
    "text": "all practical and and true but I'm gonna talk about it from at the design level I'm not going to be talking about code",
    "start": "98189",
    "end": "104070"
  },
  {
    "text": "level things very much and I've also got quite a lot of territory to cover so there's quite a lot of stuff to get",
    "start": "104070",
    "end": "109710"
  },
  {
    "text": "through and I'm not gonna do my best to cover that and I'm not quite sure how much time there's gonna be for questions",
    "start": "109710",
    "end": "115140"
  },
  {
    "text": "please though do send in the questions through the app I'm gonna be here for the rest of the week so if you see me",
    "start": "115140",
    "end": "120869"
  },
  {
    "text": "and you you have any questions that come at least just come and talk to me about it I'll be here at the end of the presentation we talked about that if we",
    "start": "120869",
    "end": "127259"
  },
  {
    "text": "don't get to cover the present the questions that come in the app I'll try and put them on Twitter or",
    "start": "127259",
    "end": "133370"
  },
  {
    "text": "post or something like that and try and answer all of the questions but so please don't hold back on the questions",
    "start": "133370",
    "end": "138620"
  },
  {
    "text": "but let's let's start so I think one of the things that's evident he's he's that",
    "start": "138620",
    "end": "144860"
  },
  {
    "start": "141000",
    "end": "273000"
  },
  {
    "text": "he's that he's that our world is changing our world as technologists ten",
    "start": "144860",
    "end": "150650"
  },
  {
    "text": "or fifteen years ago a large application we you would characterize as having tens",
    "start": "150650",
    "end": "155780"
  },
  {
    "text": "of servers seconds of response times hours of line maintenance and gigabytes of data that's not big anymore that's",
    "start": "155780",
    "end": "162739"
  },
  {
    "text": "kind of almost a toy application these days we're talking about thousands of multi-core systems distributed systems",
    "start": "162739",
    "end": "170890"
  },
  {
    "text": "handheld devices milli second or faster response times 100% uptime and petabytes",
    "start": "170890",
    "end": "176840"
  },
  {
    "text": "of data has not been all of that all that unusual and so that should be",
    "start": "176840",
    "end": "182720"
  },
  {
    "text": "challenging the way that we're thinking I I am old enough and have been doing this long enough to be a baby feel",
    "start": "182720",
    "end": "189530"
  },
  {
    "text": "comfortable in being a grumpy old man and being and so and so you know the",
    "start": "189530",
    "end": "196549"
  },
  {
    "text": "industry doesn't change as quickly as we think he does but from time to time big",
    "start": "196549",
    "end": "202280"
  },
  {
    "text": "changes happen and I think there are some that are on that are on the horizon further ones that are on the horizon one",
    "start": "202280",
    "end": "208669"
  },
  {
    "text": "simple way of looking at the way that which things have changed though is just to look at kind of the density of",
    "start": "208669",
    "end": "214549"
  },
  {
    "text": "storage up here with some pictures of some different storage things in the top",
    "start": "214549",
    "end": "221480"
  },
  {
    "text": "left-hand corner the the thing the thing behind the the SD card there is a thing",
    "start": "221480",
    "end": "227449"
  },
  {
    "text": "called a ferrite core memory board I actually had one of those my wife threw",
    "start": "227449",
    "end": "233180"
  },
  {
    "text": "it out by accident before me though that's that's kind of prior to my generation so this is kind of sixties technology so this is actually the sort",
    "start": "233180",
    "end": "240410"
  },
  {
    "text": "of stuff that was in the in the space shuttle and then because because it was durable they these things didn't break",
    "start": "240410",
    "end": "246319"
  },
  {
    "text": "very much but but the low density so each one of those little magnetic rings is a bit sat on top of it is an eight",
    "start": "246319",
    "end": "255470"
  },
  {
    "text": "gigabit storage it's the this is changed just here the difference between 2005",
    "start": "255470",
    "end": "262550"
  },
  {
    "text": "technology in 2014 technology we went from a hundred twenty eight megabytes to hundred and twenty eight gigabytes on",
    "start": "262550",
    "end": "269150"
  },
  {
    "text": "those sorts of things so so the hardware is changing quite dramatically and I",
    "start": "269150",
    "end": "274490"
  },
  {
    "start": "273000",
    "end": "466000"
  },
  {
    "text": "think we don't really realize that there's an amusing quote that the biggest the biggest achievement of the",
    "start": "274490",
    "end": "283610"
  },
  {
    "text": "software industry was to slow down hardware and this kind of truth you know",
    "start": "283610",
    "end": "291050"
  },
  {
    "text": "we've got these amazing staggeringly fabulously powerful machines and we run",
    "start": "291050",
    "end": "298039"
  },
  {
    "text": "JavaScript's them on them on the server side and in the car in the kinds of environments that I worked in that sort",
    "start": "298039",
    "end": "304850"
  },
  {
    "text": "of doesn't make a lot of sense and it's hard to get your head round just has staggeringly amazing the",
    "start": "304850",
    "end": "310580"
  },
  {
    "text": "hardware that our software runs on really is and so I just wanted to go through a little exercise to try and",
    "start": "310580",
    "end": "315949"
  },
  {
    "text": "demonstrate that let's for a moment imagine that instead of three",
    "start": "315949",
    "end": "321680"
  },
  {
    "text": "nanoseconds or so a a cpu socket was one",
    "start": "321680",
    "end": "327169"
  },
  {
    "text": "second how would that play out if that's if that's what was going on so we got",
    "start": "327169",
    "end": "334220"
  },
  {
    "text": "one CPU one CPU cycle in reality it's a third of a nanosecond",
    "start": "334220",
    "end": "339250"
  },
  {
    "text": "let's imagine in our world it's were going to be one second so modern CPUs",
    "start": "339250",
    "end": "344780"
  },
  {
    "text": "that the transistors that we couldn't make them go faster but we could add more transistors so the transistors",
    "start": "344780",
    "end": "350630"
  },
  {
    "text": "densities gone up you got to do something with those transistors so we put loads of memory onto the chips so",
    "start": "350630",
    "end": "356030"
  },
  {
    "text": "the caching in modern chips is is really quite efficient that's the that's the most efficient storage in in our",
    "start": "356030",
    "end": "363050"
  },
  {
    "text": "computers the level one cache the registers in that's in the processor first of all then the level one cache is",
    "start": "363050",
    "end": "368330"
  },
  {
    "text": "the most efficient a level one cache hit takes point nine nanoseconds or in our",
    "start": "368330",
    "end": "374150"
  },
  {
    "text": "world three seconds a level two cache hit takes nine seconds a level three",
    "start": "374150",
    "end": "381530"
  },
  {
    "text": "cache it this is all still on the chips this is all still on the processor takes 43 seconds now we're getting into the",
    "start": "381530",
    "end": "388520"
  },
  {
    "text": "territory where we've got to go off the chip so if the if the stuff that we want",
    "start": "388520",
    "end": "393650"
  },
  {
    "text": "to process is not in the cache on the chip we've got to go to main memory that's going to take the equivalent of",
    "start": "393650",
    "end": "400400"
  },
  {
    "text": "six if we wanted to do computer computer say",
    "start": "400400",
    "end": "406190"
  },
  {
    "text": "over 10 meters over fiber so pretty fast that's gonna take 18 hours if we wanted",
    "start": "406190",
    "end": "415130"
  },
  {
    "text": "to access data on a solid-state disk fast right solid state disks that are",
    "start": "415130",
    "end": "420140"
  },
  {
    "text": "really efficient that would take four days if you wanted to access some",
    "start": "420140",
    "end": "426380"
  },
  {
    "text": "spinning rust on a commode conventional hard disk that's going to take six months if we wanted to send a message",
    "start": "426380",
    "end": "434840"
  },
  {
    "text": "from internet from across the internet from London to Australia that's going to take 19 years and if we wanted to reboot",
    "start": "434840",
    "end": "443780"
  },
  {
    "text": "our computer and restart windows that's going to take thirty one thousand years",
    "start": "443780",
    "end": "450580"
  },
  {
    "text": "our systems are staggeringly powerful so and yet as software it doesn't really",
    "start": "450580",
    "end": "456740"
  },
  {
    "text": "feel like it's very much faster in some senses it's probably slower than some of the software that we made back in the",
    "start": "456740",
    "end": "462830"
  },
  {
    "text": "olden days where Kempe computers were known it well know where Nia's is efficient of this when we started",
    "start": "462830",
    "end": "469340"
  },
  {
    "start": "466000",
    "end": "575000"
  },
  {
    "text": "building our exchange we had some staggeringly difficult kind of performance thresholds to meet and so we",
    "start": "469340",
    "end": "475070"
  },
  {
    "text": "started digging into this and finding out and we kind of came fairly we did lots of experimentation we did lots of",
    "start": "475070",
    "end": "481310"
  },
  {
    "text": "measurement lots of benchmarking of different convent conventional sorts of approaches we started off not just",
    "start": "481310",
    "end": "487330"
  },
  {
    "text": "assuming things so we started off well you know relational databases are not",
    "start": "487330",
    "end": "492340"
  },
  {
    "text": "easy to use could we do would it be possible to push a relation not even",
    "start": "492340",
    "end": "497750"
  },
  {
    "text": "close so so so we eat started challenging our thinking about the kind of architecture that we could build to",
    "start": "497750",
    "end": "504530"
  },
  {
    "text": "put a long story short the kind of L live L of ater pitch for reactive systems and the reactive manifesto which",
    "start": "504530",
    "end": "511040"
  },
  {
    "text": "I got involved in in in authoring some time afterwards is that 21st century",
    "start": "511040",
    "end": "516260"
  },
  {
    "text": "problems are not really best sold with 20th century software architectures and yet I think that most of us most people",
    "start": "516260",
    "end": "523789"
  },
  {
    "text": "starting most systems still to this day you know you kind of say okay so I'm gonna pick my language I'm going to pick",
    "start": "523790",
    "end": "530030"
  },
  {
    "text": "my web web technology I'm gonna pick my relational database now what's the problem again but that's that's not really what we're",
    "start": "530030",
    "end": "536330"
  },
  {
    "text": "talking about that there are more options than that the reactive manifesto to summarize sorry too quickly the",
    "start": "536330",
    "end": "545900"
  },
  {
    "text": "reactive manifesto just kind of summarized these these terms of style of systems as saying first that they are",
    "start": "545900",
    "end": "552710"
  },
  {
    "text": "responsive they're going to they're going to they're going to stay being able to be responsive to demand whatever",
    "start": "552710",
    "end": "559550"
  },
  {
    "text": "that means they're resilient in the in the under stress that means that they stay being responsive even when they're",
    "start": "559550",
    "end": "565010"
  },
  {
    "text": "being stressed they're elastic they're able to scale up and scale down and all of those ideas are kind of underpinned",
    "start": "565010",
    "end": "571760"
  },
  {
    "text": "by them being message driven so that's the sort of stuff those are the sorts of systems that we're talking about in",
    "start": "571760",
    "end": "577130"
  },
  {
    "start": "575000",
    "end": "674000"
  },
  {
    "text": "exploring and as I said we came up with some kind of we came to some fairly unusual conclusions and I still want to",
    "start": "577130",
    "end": "582320"
  },
  {
    "text": "walk you through that that discovery process a little bit as part of my talk today so reactive systems they respond",
    "start": "582320",
    "end": "589340"
  },
  {
    "text": "in a timely manner they're the cornerstone of unit that's the cornerstone of usability and it means that they're very quick to do to to",
    "start": "589340",
    "end": "596060"
  },
  {
    "text": "detect problems they're resilient in the face of failure that depends on replication containment isolation and",
    "start": "596060",
    "end": "603080"
  },
  {
    "text": "delegation but fund the resilience is kind of the core principle that we're trying to we're trying to hit with these",
    "start": "603080",
    "end": "608930"
  },
  {
    "text": "sorts of systems they're elastic they remain responsive under varying workload",
    "start": "608930",
    "end": "614030"
  },
  {
    "text": "they respond to change in the input by increasing or decreasing the resources to to keep that responsiveness and they",
    "start": "614030",
    "end": "622190"
  },
  {
    "text": "tend they are decentralized it's this is a naturally decentralized kind of architecture which means that it limits",
    "start": "622190",
    "end": "627740"
  },
  {
    "text": "the number of contention points and and removes sort of centralized bottlenecks",
    "start": "627740",
    "end": "633310"
  },
  {
    "text": "this is I kind of naturally distributed a pro kind of software architecture",
    "start": "633310",
    "end": "639340"
  },
  {
    "text": "there message driven and and and not just message driven in the sense that a",
    "start": "639340",
    "end": "644750"
  },
  {
    "text": "REST API or something like that these are asynchronous message driven systems and the asynchrony is important",
    "start": "644750",
    "end": "650570"
  },
  {
    "text": "and we're going to get into that as well they're loosely coupled isolation location transparency that gives us the",
    "start": "650570",
    "end": "656870"
  },
  {
    "text": "ability to kind of scale these things up and down and gives us an abundance also",
    "start": "656870",
    "end": "663410"
  },
  {
    "text": "that we can kind of delegate errors and that we can almost willing nearly destroyed parts of the system and",
    "start": "663410",
    "end": "669650"
  },
  {
    "text": "still make progress in other parts of the system so some here are some of the",
    "start": "669650",
    "end": "675620"
  },
  {
    "start": "674000",
    "end": "726000"
  },
  {
    "text": "properties that were that were that we that we kind of shot for in the architecture but also observed they're",
    "start": "675620",
    "end": "681740"
  },
  {
    "text": "flexible they're loosely coupled scalable arguably and I'm gonna try and",
    "start": "681740",
    "end": "687620"
  },
  {
    "text": "make the points to you they're easy easy to develop I was it's a kind of weird architects conference a couple months",
    "start": "687620",
    "end": "695060"
  },
  {
    "text": "ago and we were talking about some of this stuff and there were some people in the audience that had kind of built",
    "start": "695060",
    "end": "700610"
  },
  {
    "text": "reactive systems and one of I was on a panel and one of the guys said could you have a show of hands of people that",
    "start": "700610",
    "end": "705740"
  },
  {
    "text": "build reactive sits and hands up but those people that thought they were easy to build and everybody put that except me put their hands down so that's that's",
    "start": "705740",
    "end": "712490"
  },
  {
    "text": "questionable but I think that they are and I'll try and explain why I think that's true",
    "start": "712490",
    "end": "717560"
  },
  {
    "text": "they're more tolerant of failure for sure they respond to failure gracefully and I'm we're going to talk about that",
    "start": "717560",
    "end": "722930"
  },
  {
    "text": "as well and then retain this responsiveness to users that we're looking for when we start talking about",
    "start": "722930",
    "end": "729710"
  },
  {
    "start": "726000",
    "end": "809000"
  },
  {
    "text": "these sorts of things of asynchronous systems and message passing all this sort of stuff if you're anything like me",
    "start": "729710",
    "end": "735080"
  },
  {
    "text": "year's painting you're painting in your head he's probably so a big kind of enterprise I all things like that but",
    "start": "735080",
    "end": "741440"
  },
  {
    "text": "there's more to it than that I would kind of argue that the sorts of patterns the sorts of things that we're",
    "start": "741440",
    "end": "747710"
  },
  {
    "text": "talking about there's something kind of fundamental almost like Cott sort of fundamental physics in in our world",
    "start": "747710",
    "end": "754280"
  },
  {
    "text": "about the nature of these kinds of systems large systems are generally composed of smaller ones and and and and",
    "start": "754280",
    "end": "760850"
  },
  {
    "text": "and and the the kind of the the reactiveness of these systems kind of goes all the way down what I'm trying to",
    "start": "760850",
    "end": "765890"
  },
  {
    "text": "say is that this is kind of fractal and one way of looking at this is you can kind of look at the way that the",
    "start": "765890",
    "end": "771260"
  },
  {
    "text": "hardware works again if you look at the the architecture of a modern CPU",
    "start": "771260",
    "end": "776450"
  },
  {
    "text": "whatever the nature of the CPU if it's multi-core its asynchronous and bus based it's its message but it's based on",
    "start": "776450",
    "end": "783020"
  },
  {
    "text": "a series of message passing and well-defined protocols to maintain this thing I was in there one of the",
    "start": "783020",
    "end": "789410"
  },
  {
    "text": "presentations this morning where Ken was talking about event based systems and",
    "start": "789410",
    "end": "795620"
  },
  {
    "text": "somebody asked the question about how do you keep these what about the problem of the latency of these event based systems",
    "start": "795620",
    "end": "801110"
  },
  {
    "text": "event systems are not slower they're faster because you do less work so I'm going to go into that as well and explain what I",
    "start": "801110",
    "end": "807000"
  },
  {
    "text": "mean by that so let's start thinking about the way that some of these things",
    "start": "807000",
    "end": "813330"
  },
  {
    "start": "809000",
    "end": "909000"
  },
  {
    "text": "work so here's here's a nice little picture of component a and component B and let's imagine that we've got a",
    "start": "813330",
    "end": "819750"
  },
  {
    "text": "synchronous message joining the two so we're going to invoke some behavior on component B which is which is composed with component but component a which is",
    "start": "819750",
    "end": "826860"
  },
  {
    "text": "composed with component B so we're gonna call component B now what can what can",
    "start": "826860",
    "end": "833250"
  },
  {
    "text": "component a know if something goes wrong it can know that it's got a book of its",
    "start": "833250",
    "end": "838890"
  },
  {
    "text": "own place that might you might go wrong there it might go wrong at the point at which it's trying to connect to some remote distant service the message might",
    "start": "838890",
    "end": "847980"
  },
  {
    "text": "be lost the instruction might be lost in transit as it trans as it goes across",
    "start": "847980",
    "end": "853020"
  },
  {
    "text": "the network there might be a problem connecting to component B there might be a bug in component B and you've got the",
    "start": "853020",
    "end": "861000"
  },
  {
    "text": "mirror of all of those points of failure on the way back as well now which of those can components a know about just",
    "start": "861000",
    "end": "872490"
  },
  {
    "text": "those two all of the rest and the third one a bug a bug in its handling of the",
    "start": "872490",
    "end": "878220"
  },
  {
    "text": "response those are the only ones that component a can directly detect that means that when we build distributed",
    "start": "878220",
    "end": "884850"
  },
  {
    "text": "systems we've got this horrible explosion of complexity of all of these",
    "start": "884850",
    "end": "890040"
  },
  {
    "text": "other failure cases that can occur that we don't really have proper information about so that adds a lot of complexity",
    "start": "890040",
    "end": "898790"
  },
  {
    "text": "there's another way in which sync synchronous interactions make complexity",
    "start": "898790",
    "end": "906710"
  },
  {
    "start": "909000",
    "end": "1665000"
  },
  {
    "text": "so synchronous communications increase coupling in both Lake location and time",
    "start": "910640",
    "end": "916200"
  },
  {
    "text": "if we've got all of this stuff and we're making a call to the other thing that thing's got to be there until we get",
    "start": "916200",
    "end": "922170"
  },
  {
    "text": "until pretty much it sent the answer back if it's not there when we send it we're stalled so if we've got you've got",
    "start": "922170",
    "end": "931680"
  },
  {
    "text": "an iteration with components a and that triggers some some behavior in component a which then is going to result in us",
    "start": "931680",
    "end": "939420"
  },
  {
    "text": "deep calling on to component B like this",
    "start": "939420",
    "end": "944990"
  },
  {
    "text": "what are we going to do in component a component a has got to sit still until",
    "start": "944990",
    "end": "950720"
  },
  {
    "text": "component B is finished it's not too bad if you've got two pieces but what that",
    "start": "950720",
    "end": "956310"
  },
  {
    "text": "means is if you're building a large system your system is constrained on the slowest part always as long as it's sync",
    "start": "956310",
    "end": "963750"
  },
  {
    "text": "synchronous how do you cope with what",
    "start": "963750",
    "end": "969090"
  },
  {
    "text": "that means is that it's blocked in affected component a he's stalled until it gets an answer back from component B",
    "start": "969090",
    "end": "975330"
  },
  {
    "text": "how do you cope with that classically what we tend to do is that we said oh well we'll make it multi-threaded well",
    "start": "975330",
    "end": "981930"
  },
  {
    "text": "we'll make that component multi-threaded so we can service operations while we're waiting from the results of previous",
    "start": "981930",
    "end": "987120"
  },
  {
    "text": "operations and now we've just added one of the most complicated things in",
    "start": "987120",
    "end": "992160"
  },
  {
    "text": "computer science into the middle of our domain logic the the management of multi-threaded and can and concurrent",
    "start": "992160",
    "end": "998760"
  },
  {
    "text": "programming and they're still at this still limit so we kind of when we were",
    "start": "998760",
    "end": "1005510"
  },
  {
    "text": "building our exchange we kind of went down this with a version of this route and we were built some we built",
    "start": "1005510",
    "end": "1011030"
  },
  {
    "text": "something called a staged event driven architecture and in staged event driven architecture the idea is is that you",
    "start": "1011030",
    "end": "1016670"
  },
  {
    "text": "have kind of thread affinity every interaction with a particular resource your account or a particular marketplace",
    "start": "1016670",
    "end": "1022970"
  },
  {
    "text": "or something like that he's always serviced on the same thread and so what that means in those sorts of",
    "start": "1022970",
    "end": "1028670"
  },
  {
    "text": "architectures is that as any as a request comes in you've got to identify the nature of the request and figure out",
    "start": "1028670",
    "end": "1033890"
  },
  {
    "text": "which thread is it's supposed to supposed to be played on so some some kind of hashing algorithm or something",
    "start": "1033890",
    "end": "1039319"
  },
  {
    "text": "or other to figure out where to put it we built one of those and we measured its performance and he absolutely sucked",
    "start": "1039320",
    "end": "1045199"
  },
  {
    "text": "we'd worked out that we needed to be able to do we need to be able to do a minimum of 100,000 messages a second",
    "start": "1045200",
    "end": "1051590"
  },
  {
    "text": "with less than 1 millisecond response time we were seeing about 10,000 messages a second with 1 millisecond",
    "start": "1051590",
    "end": "1058400"
  },
  {
    "text": "response time from most of them and about 10 seconds response time for a significant tiny proportion which was",
    "start": "1058400",
    "end": "1066830"
  },
  {
    "text": "rubbish there was no good in it in our scenario so we started scratching our heads so we started profiling our system",
    "start": "1066830",
    "end": "1072980"
  },
  {
    "text": "and trying to figure out what went wrong we worked out that we were spending more than a hundred times more CPU cycles",
    "start": "1072980",
    "end": "1082400"
  },
  {
    "text": "figuring out where to do work than we were doing work so he said that's stupid",
    "start": "1082400",
    "end": "1087950"
  },
  {
    "text": "let's put all of the work on one thread and then you make no choice there's no no concurrency so you could do that you",
    "start": "1087950",
    "end": "1096410"
  },
  {
    "text": "could you could be you could be sorry there's one more step is that the as the as the system gets more complicated if",
    "start": "1096410",
    "end": "1102200"
  },
  {
    "text": "you're using synchronous calls the the complexity kind of breeds it kind of explodes so if we were to approach this",
    "start": "1102200",
    "end": "1112390"
  },
  {
    "text": "differently if we were to approach this and say wait let's do this synchronously instead I'm gonna make a call to",
    "start": "1112390",
    "end": "1118340"
  },
  {
    "text": "component say we go to core component B and as soon as that call is complete complete componenets free to to work on",
    "start": "1118340",
    "end": "1126560"
  },
  {
    "text": "something new when it gets the response back at some time in the future might be",
    "start": "1126560",
    "end": "1132470"
  },
  {
    "text": "the next microsecond might be three days we don't care it's going to respond to that to that to",
    "start": "1132470",
    "end": "1138440"
  },
  {
    "text": "that what does that give us in terms of failure modes well as before we've got",
    "start": "1138440",
    "end": "1147590"
  },
  {
    "text": "all of the same kind of points of failure we could lose messages the system might not be there and so on but",
    "start": "1147590",
    "end": "1153230"
  },
  {
    "text": "from components A's point of view the places that it can detect the local",
    "start": "1153230",
    "end": "1160310"
  },
  {
    "text": "failures are under its control and everything else it doesn't care about as long as eventually the message comes",
    "start": "1160310",
    "end": "1166850"
  },
  {
    "text": "back if I let's say the data center that component B is running it was hit by an asteroid and the message is kind of",
    "start": "1166850",
    "end": "1175210"
  },
  {
    "text": "we've sent the message we build a new data saying we populate it with servers we press the",
    "start": "1175210",
    "end": "1181740"
  },
  {
    "text": "button to deploy all of the software in the servers the message arrives is processed and it sends a response back",
    "start": "1181740",
    "end": "1187050"
  },
  {
    "text": "to components a component a doesn't care it's still gonna process the event so it gives us a way of kind of ignoring a",
    "start": "1187050",
    "end": "1194310"
  },
  {
    "text": "whole bunch of failure scenarios in the context of any particular component of the system that's quite a nice property",
    "start": "1194310",
    "end": "1202970"
  },
  {
    "text": "this starts to sound complicated though and the REIT I think partly the reason",
    "start": "1204710",
    "end": "1210000"
  },
  {
    "text": "why it sounds more complicated is because we are kind of culturally",
    "start": "1210000",
    "end": "1215670"
  },
  {
    "text": "aligned with synchronous programming I would bet that everybody in the room the first one of the first things that you",
    "start": "1215670",
    "end": "1223140"
  },
  {
    "text": "ever wrote in encode that involved a function call was a synchronous call of",
    "start": "1223140",
    "end": "1229050"
  },
  {
    "text": "some kind you made a call you waited for that call to finish before moving on in doing some more execution we that's not",
    "start": "1229050",
    "end": "1235070"
  },
  {
    "text": "really that if you think about it that's not really a very natural way to think about things if all right if I speak to",
    "start": "1235070",
    "end": "1243060"
  },
  {
    "text": "you and I ask you a question my brain doesn't freeze and stop until you answer",
    "start": "1243060",
    "end": "1250920"
  },
  {
    "text": "me you still have an answer I haven't asked you a question but if I were to you still haven't answered me I'm not",
    "start": "1250920",
    "end": "1256620"
  },
  {
    "text": "static I can carry on processing I can carry on thinking other things I can stop seeing the real world is",
    "start": "1256620",
    "end": "1262020"
  },
  {
    "text": "asynchronous the real the universe is an asynchronous thing it's not the synchronous thing synchronicity is kind",
    "start": "1262020",
    "end": "1268350"
  },
  {
    "text": "of a fake thing that we layer on top of it to try and make our lives easier and then when we get to more complicated",
    "start": "1268350",
    "end": "1275250"
  },
  {
    "text": "particularly distributed and concurrent systems it kills us because it makes it more complicated not less well one of my",
    "start": "1275250",
    "end": "1282510"
  },
  {
    "text": "friends it was involved in building the exchange Martine Thompson says that he reckons that synchronous programming is the crack-cocaine of programming it's",
    "start": "1282510",
    "end": "1289980"
  },
  {
    "text": "kind of alluring its Moorish but it's bad for you so if we were to do this",
    "start": "1289980",
    "end": "1298920"
  },
  {
    "text": "with asynchronous messages instead we could send a message to component a that sends it to components B it's done we",
    "start": "1298920",
    "end": "1306180"
  },
  {
    "text": "could send another message to come sometime later component B sends a response all is good if it fails that",
    "start": "1306180",
    "end": "1312600"
  },
  {
    "text": "okay we can kind of understand that locally in component a and we can kind of cope with it when we get a message",
    "start": "1312600",
    "end": "1319290"
  },
  {
    "text": "back in response in component B but we separate the request from the response",
    "start": "1319290",
    "end": "1324480"
  },
  {
    "text": "in the messages if we make the single threaded it makes the code that we write",
    "start": "1324480",
    "end": "1329700"
  },
  {
    "text": "in each of these pieces simple it also counter-intuitively makes it",
    "start": "1329700",
    "end": "1336260"
  },
  {
    "text": "dramatically higher performance we got involved in we ended up coming up with",
    "start": "1336260",
    "end": "1342180"
  },
  {
    "text": "an idea that was called mechanical sympathy which was which was about trying to write your code in a way that took advantage of the mechanical",
    "start": "1342180",
    "end": "1349020"
  },
  {
    "text": "properties of the physical properties of the hardware underneath you and we we ended up at our exchange was one of the",
    "start": "1349020",
    "end": "1355590"
  },
  {
    "text": "highest performance exchanges in the world as a result of this kind of line of reasoning and of measuring these",
    "start": "1355590",
    "end": "1361110"
  },
  {
    "text": "things and understanding the impact of the design choices signal thread it is not slower and the reason is is because",
    "start": "1361110",
    "end": "1367260"
  },
  {
    "text": "if you do work in parallel on two things which obviously sounds like a good idea there is no way that we know of in",
    "start": "1367260",
    "end": "1374160"
  },
  {
    "text": "computing of joining those two pieces of work together again in terms of shared state that doesn't cost orders of",
    "start": "1374160",
    "end": "1380790"
  },
  {
    "text": "magnitude more than the effort that it takes to do the work even if you do the the fastest way of doing this lots are",
    "start": "1380790",
    "end": "1387180"
  },
  {
    "text": "using the low-level concurrency features built in some modern chips compare and set and those sorts of ideas it's still",
    "start": "1387180",
    "end": "1392930"
  },
  {
    "text": "orders of magnitude slower than just doing it on one thread so you have to be",
    "start": "1392930",
    "end": "1398130"
  },
  {
    "text": "in the game of having an algorithm that is can support hundreds or thousands of",
    "start": "1398130",
    "end": "1407420"
  },
  {
    "text": "parallel processes before you get an advantage over there what you're the work that you can do on a single thread",
    "start": "1407420",
    "end": "1413510"
  },
  {
    "text": "that's kind of a weird idea that's an idea that's that that's not where we've been led to think about in in the",
    "start": "1413510",
    "end": "1421110"
  },
  {
    "text": "direction in which computer science has been evolving over the last few years as computers have got as we kind of hit the",
    "start": "1421110",
    "end": "1427980"
  },
  {
    "text": "heat limit and so gigahertz weren't weren't going up in our CPUs we've been",
    "start": "1427980",
    "end": "1433170"
  },
  {
    "text": "adding more and more cores and more and more parallel execution that's all wonderful and fine as long you never",
    "start": "1433170",
    "end": "1438240"
  },
  {
    "text": "need to join the results together mostly if we're building software in a single",
    "start": "1438240",
    "end": "1443850"
  },
  {
    "text": "system at some point we need to join the results together",
    "start": "1443850",
    "end": "1448100"
  },
  {
    "text": "so we've got these these events coming in we're going to send some events out",
    "start": "1450120",
    "end": "1455860"
  },
  {
    "text": "in response and we're going to kind of process those on a single thread and",
    "start": "1455860",
    "end": "1462400"
  },
  {
    "text": "we'd like to be able to do that as efficiently as possible certainly in high-performance systems if you follow this line with",
    "start": "1462400",
    "end": "1468130"
  },
  {
    "text": "high-performance systems the levels of performance that you can get is really quite staggering our system could",
    "start": "1468130",
    "end": "1475120"
  },
  {
    "text": "produce literally millions of transactions a second and it was it was",
    "start": "1475120",
    "end": "1481480"
  },
  {
    "text": "processing them in in in microseconds so the the edge of our network to network",
    "start": "1481480",
    "end": "1486790"
  },
  {
    "text": "hops travel you ating a match in a matching engine in the exchange to",
    "start": "1486790",
    "end": "1491860"
  },
  {
    "text": "network hops back out to the edge of a networked up with 40 microseconds that was kind of world-class at the time the",
    "start": "1491860",
    "end": "1500110"
  },
  {
    "text": "problem is is that you need to then start thinking about what the nature of the algorithm is a little bit different",
    "start": "1500110",
    "end": "1505150"
  },
  {
    "text": "so here's an example of one of the patterns that kind of the kind of cropped up for us and we use this",
    "start": "1505150",
    "end": "1511090"
  },
  {
    "text": "pattern over and over again essentially so so ok so if I'm going to just process this thing and then I'm going to send",
    "start": "1511090",
    "end": "1517210"
  },
  {
    "text": "off a message I heard do a kind of that leaves me in a weird state because I",
    "start": "1517210",
    "end": "1522790"
  },
  {
    "text": "because I haven't got a response back yet and how do I make progress from there on you can't build it as a sort of",
    "start": "1522790",
    "end": "1528730"
  },
  {
    "text": "state machine so you have these messages and state machines so he's a little example let's imagine we've got a bookstore and they're going to place an",
    "start": "1528730",
    "end": "1535270"
  },
  {
    "text": "order for a continuous delivery book if we're doing that synchronously and the bookstore is then going to call into the",
    "start": "1535270",
    "end": "1541600"
  },
  {
    "text": "warehouse or wherever check the inventory and see whether you've got a book to sell so you get a reserve",
    "start": "1541600",
    "end": "1547990"
  },
  {
    "text": "continuous delivery in the end in the inventory and the book one way of right",
    "start": "1547990",
    "end": "1553660"
  },
  {
    "text": "in the synchronous way of writing the algorithm is that at the point at which you get the order for the book you sit there and you wait until the inventory",
    "start": "1553660",
    "end": "1560290"
  },
  {
    "text": "is being checked before you respond so you can certainly build a system like",
    "start": "1560290",
    "end": "1565930"
  },
  {
    "text": "that but for all of the reasons that we just described it's a bit fragile what",
    "start": "1565930",
    "end": "1571570"
  },
  {
    "text": "we could do instead is that we could do this asynchronously asynchronously so we're going to place an asynchronous order for the book and we're going to",
    "start": "1571570",
    "end": "1579040"
  },
  {
    "text": "change this we going to cook all reserved on the inventory sometime later in the future",
    "start": "1579040",
    "end": "1584600"
  },
  {
    "text": "we're going to get a response back from the inventory saying that the book has been reserved so it's been been ordered",
    "start": "1584600",
    "end": "1590809"
  },
  {
    "text": "and then we can go back to the user and say that it's been ordered all this sounds slow and and so on I want to keep",
    "start": "1590809",
    "end": "1597200"
  },
  {
    "text": "reminding you that this isn't slower because we're doing less work we're not having to read not have to do thread",
    "start": "1597200",
    "end": "1602299"
  },
  {
    "text": "manipulation and all that kind of stuff and store threads we're doing well this is this is just running kind of natively free in each of the processes we're",
    "start": "1602299",
    "end": "1609230"
  },
  {
    "text": "using the processes efficiently but there's a problem in terms of what the models going on here so another way of",
    "start": "1609230",
    "end": "1614330"
  },
  {
    "text": "thinking about this is that each of these little services is it represents a state machine so you're going to place",
    "start": "1614330",
    "end": "1619730"
  },
  {
    "text": "the order for the book and we're going to change the state of the book in in in the the the understanding of the",
    "start": "1619730",
    "end": "1626870"
  },
  {
    "text": "bookstore to we're in reserving state and then we're going to generate the reserve the reserve event and the the",
    "start": "1626870",
    "end": "1634160"
  },
  {
    "text": "sometime later we're going to respond but we could have another order we could have an order for a different book",
    "start": "1634160",
    "end": "1640100"
  },
  {
    "text": "happening in parallel with this so maybe there's an order for a different book",
    "start": "1640100",
    "end": "1645230"
  },
  {
    "text": "and the bookstore can order it can can process this on a single thread without",
    "start": "1645230",
    "end": "1651799"
  },
  {
    "text": "having to have finished the ordering of the first book sometime later the",
    "start": "1651799",
    "end": "1657620"
  },
  {
    "text": "imagery comes back back doesn't necessarily need to be in order we can change the state of the books that were",
    "start": "1657620",
    "end": "1662929"
  },
  {
    "text": "ordered and so on so the system can make progress that would be true even if the",
    "start": "1662929",
    "end": "1669200"
  },
  {
    "start": "1665000",
    "end": "1920000"
  },
  {
    "text": "inventory was down the the the bookstore could still make process it could still process orders they would be in the",
    "start": "1669200",
    "end": "1675679"
  },
  {
    "text": "reserving State rather than in the ordered State and if we hadn't been able",
    "start": "1675679",
    "end": "1680960"
  },
  {
    "text": "to you know process those you know sometime in the future you know if it",
    "start": "1680960",
    "end": "1686570"
  },
  {
    "text": "was an hour later or something and we're worrying about those we could have a process that looked for things that were stuck in the reserving state and have",
    "start": "1686570",
    "end": "1693049"
  },
  {
    "text": "something but the programming around all of that is relatively simple and straightforward we're just talking about one event in one event out one event in",
    "start": "1693049",
    "end": "1701600"
  },
  {
    "text": "one event out all of the time the services as state machines is a really nice pattern it seems to crop up over",
    "start": "1701600",
    "end": "1709040"
  },
  {
    "text": "and over again when you start building systems like this that Lisa did for us it's very simple and the thing that's interesting is that",
    "start": "1709040",
    "end": "1716270"
  },
  {
    "text": "nearly all of the the complexity that you're interested in these kind of domain level not technical level we're",
    "start": "1716270",
    "end": "1722060"
  },
  {
    "text": "not interested in front of the wheel fail weird failure scenarios we're interested in is the book in an ordered",
    "start": "1722060",
    "end": "1727550"
  },
  {
    "text": "state or a reserved reserving state that's kind of a domain level principle so we can kind of focus on the essential",
    "start": "1727550",
    "end": "1734600"
  },
  {
    "text": "complexity of the problem rather than the accidental complexity of it running as part of a computer system it allows",
    "start": "1734600",
    "end": "1742760"
  },
  {
    "text": "us to migrate the state of a durable domain model based on these messages each time a message comes in it changes",
    "start": "1742760",
    "end": "1748820"
  },
  {
    "text": "the state of the domain model in some way generates the message on the way out and so we've got a record of this of",
    "start": "1748820",
    "end": "1754490"
  },
  {
    "text": "this going on that's quite nice particularly when you start thinking",
    "start": "1754490",
    "end": "1760310"
  },
  {
    "text": "about what you could do with that sequence of events because you could record those events and then you could",
    "start": "1760310",
    "end": "1765650"
  },
  {
    "text": "play them back and you could you could reliably get the system back into a deterministic state the sequence of the events as long",
    "start": "1765650",
    "end": "1775520"
  },
  {
    "text": "as you've got the log of events is the truth it means you need to think about",
    "start": "1775520",
    "end": "1782840"
  },
  {
    "text": "the properties of the ways in which you get the events between the services and all that sort of stuff and we'll talk a little bit about that kind of thing if",
    "start": "1782840",
    "end": "1789050"
  },
  {
    "text": "all of that's making you feel about but a bit nervous what I've just described is the way that a relational database is",
    "start": "1789050",
    "end": "1794900"
  },
  {
    "text": "implemented that's how they work inside they maintain a transactional log in a",
    "start": "1794900",
    "end": "1800870"
  },
  {
    "text": "sequence of steps this is not new new this is not a radically weird way of",
    "start": "1800870",
    "end": "1806300"
  },
  {
    "text": "doing things this is the way that serious systems do serious things we",
    "start": "1806300",
    "end": "1812480"
  },
  {
    "text": "just kind of invert it a bit and surface separate out the concerns in a slightly different way just to kind of just kind",
    "start": "1812480",
    "end": "1821960"
  },
  {
    "text": "of you elaborate on that a little bit more we've got an event coming into the bookstore order the CD book we're gonna pass it we're going to do some",
    "start": "1821960",
    "end": "1827150"
  },
  {
    "text": "processing on that of some kind change the state of the CD book to ordering delegate that to the inventory and say",
    "start": "1827150",
    "end": "1832850"
  },
  {
    "text": "reserve the book please that's going to do some processing change the state of the book to reserved send a message back",
    "start": "1832850",
    "end": "1839690"
  },
  {
    "text": "saying your books reserved that will arrive when everything is if the book stores down it will wait and it will be",
    "start": "1839690",
    "end": "1846620"
  },
  {
    "text": "delivered when the book still was back up I'm so on and so on that can do some processing so changing the state",
    "start": "1846620",
    "end": "1851790"
  },
  {
    "text": "of the CD book to ordered anything trying to push that back out again so there's nothing really very hard",
    "start": "1851790",
    "end": "1858180"
  },
  {
    "text": "going on here but it does start to ask it so if the system got if the inventory goes down and all of that stuff doesn't",
    "start": "1858180",
    "end": "1864630"
  },
  {
    "text": "work sometime later we can kind of build rebuild our data center we could list",
    "start": "1864630",
    "end": "1870480"
  },
  {
    "text": "the list the books that are in stuck in the ordering state and decide decide",
    "start": "1870480",
    "end": "1875850"
  },
  {
    "text": "some sort of business logic that's going to process them and say some messages do",
    "start": "1875850",
    "end": "1881400"
  },
  {
    "text": "some admin action or something or other or we could kind of wait until the inventory comes back off if it's quick",
    "start": "1881400",
    "end": "1888410"
  },
  {
    "text": "and really in a resubmit the message that had been sent but was stuck in transmission and change the state and",
    "start": "1888410",
    "end": "1896550"
  },
  {
    "text": "back to the same flow that we were talking about before so this is kind of",
    "start": "1896550",
    "end": "1904320"
  },
  {
    "text": "part of my argument that this is simple remember all of this is happening on a single thread now it's asking some",
    "start": "1904320",
    "end": "1909570"
  },
  {
    "text": "things of the infrastructure it's asking some things of the delivery of the messages if we want to be able to do",
    "start": "1909570",
    "end": "1915210"
  },
  {
    "text": "this kind of durable things it means we need the messaging to be to be to be fairly durable and fairly reliable we",
    "start": "1915210",
    "end": "1922770"
  },
  {
    "start": "1920000",
    "end": "1957000"
  },
  {
    "text": "need to be confident that our messaging is going to retain order it's going to",
    "start": "1922770",
    "end": "1927780"
  },
  {
    "text": "be did we need our states to be deterministic that means that each of these services can only be mutated very",
    "start": "1927780",
    "end": "1934710"
  },
  {
    "text": "message there are no back doors there's nothing else that's coming in there's nothing else that's going to change the state of our service only we the only",
    "start": "1934710",
    "end": "1941790"
  },
  {
    "text": "way that we change that state is via message and and we need these things to",
    "start": "1941790",
    "end": "1947010"
  },
  {
    "text": "be durable we need we need these these these these these properties of the communication between the services to be",
    "start": "1947010",
    "end": "1953190"
  },
  {
    "text": "in place and happening all of the time just to put I'm not suggesting that you",
    "start": "1953190",
    "end": "1960690"
  },
  {
    "start": "1957000",
    "end": "2250000"
  },
  {
    "text": "should know or care about this level of stuff in order to be able to build systems like this but just to kind of",
    "start": "1960690",
    "end": "1966600"
  },
  {
    "text": "put your mind at rest I just I just going to kind of lift the the covers on the next layer down to show you that you",
    "start": "1966600",
    "end": "1972270"
  },
  {
    "text": "could build something like this this is the messaging system that we built we use the thing called a disrupter which was based on having a large ring buffer",
    "start": "1972270",
    "end": "1979350"
  },
  {
    "text": "to buffer in messages between those things were the infrastructure was be processing messages on other threads",
    "start": "1979350",
    "end": "1986100"
  },
  {
    "text": "away from the business logic so we'd have our components a it would it would",
    "start": "1986100",
    "end": "1991800"
  },
  {
    "text": "be now ring buffer here all right it's",
    "start": "1991800",
    "end": "2001160"
  },
  {
    "text": "not working that little tiny yellow arrow up there we've got a cursor on the ring buffer that says where we're going",
    "start": "2001160",
    "end": "2006650"
  },
  {
    "text": "to place a message when components a makes a message it's going to put that and it's going to pop the message in a",
    "start": "2006650",
    "end": "2012050"
  },
  {
    "text": "slot in the ring buffer and then we're going to populate messages that way come",
    "start": "2012050",
    "end": "2019010"
  },
  {
    "text": "on click right so it's going to pop",
    "start": "2019010",
    "end": "2027440"
  },
  {
    "text": "those things and then sometime later on a different thread divorced from the",
    "start": "2027440",
    "end": "2032480"
  },
  {
    "text": "need of the the thing that's emitting the message is to coordinate when the when the communications thread wakes up",
    "start": "2032480",
    "end": "2038630"
  },
  {
    "text": "he's just going to process messages out of the ring before putting them all across the network send them across the network those messages are going to",
    "start": "2038630",
    "end": "2044270"
  },
  {
    "text": "arrive in the the the input ring buffer on the other on the other computer and that too is going to maintain a cursor",
    "start": "2044270",
    "end": "2050540"
  },
  {
    "text": "into those messages I think my pointers",
    "start": "2050540",
    "end": "2057560"
  },
  {
    "text": "one did all my computer's so we can kind",
    "start": "2057560",
    "end": "2064669"
  },
  {
    "text": "of carry on sending messages if we lose a message in transmission each of these messages has a unique ID we it knows",
    "start": "2064669",
    "end": "2071060"
  },
  {
    "text": "which slot it's supposed to go in and so if the message if we've sent message for and component B's expecting message 3",
    "start": "2071060",
    "end": "2078919"
  },
  {
    "text": "you can say no I was expecting 3 so I'm gonna I'm gonna I'm gonna nak that I'll",
    "start": "2078919",
    "end": "2084320"
  },
  {
    "text": "say I was expecting 3 and so then then the componentry sends message 3 so",
    "start": "2084320",
    "end": "2092030"
  },
  {
    "text": "that's the nak so next next time when he gets the natthew we could carry on",
    "start": "2092030",
    "end": "2097220"
  },
  {
    "text": "filling up the ring buffer that's ok because we've still got separate cursors but now we're going to resend 3 4 5 and",
    "start": "2097220",
    "end": "2103730"
  },
  {
    "text": "catch up I think in pre support I hope that you would agree that if you built something like that you'd get fairly",
    "start": "2103730",
    "end": "2110090"
  },
  {
    "text": "reliable messaging you'd be able to get the kinds of properties that I was talking about of having kind of long lasting durable",
    "start": "2110090",
    "end": "2115890"
  },
  {
    "text": "that's the thing that we built and we built we built some open-source software called the disruptors are going to manage the ring buffers and kind of keep",
    "start": "2115890",
    "end": "2122100"
  },
  {
    "text": "the speed up when you start putting all these things together what this starts",
    "start": "2122100",
    "end": "2127170"
  },
  {
    "text": "to do is it starts to decoupling the services in time and space we don't care where the other services where the",
    "start": "2127170",
    "end": "2132540"
  },
  {
    "text": "inventory is when the new one comes up it could come up on a different continent as long as we can get the message to it the behavior is going to",
    "start": "2132540",
    "end": "2138810"
  },
  {
    "text": "be the same that means that we can start doing clever things it means that we can start allocating you know doing smart",
    "start": "2138810",
    "end": "2144870"
  },
  {
    "text": "things in the what in the routing of the messages it means that we're sharing nothing we're going to aim to ensure",
    "start": "2144870",
    "end": "2152220"
  },
  {
    "text": "that each of these little services is a discrete bubble of behavior and it's not",
    "start": "2152220",
    "end": "2159000"
  },
  {
    "text": "dependent on anything else other than via the messages and the message protocols and that means that we need to",
    "start": "2159000",
    "end": "2167070"
  },
  {
    "text": "start taking seriously designing the the protocol of the the exchange of information between the messages",
    "start": "2167070",
    "end": "2173700"
  },
  {
    "text": "seriously if this is reminding you of micro services that's good because that's the similar kind of pattern in",
    "start": "2173700",
    "end": "2179880"
  },
  {
    "text": "very many ways it's not necessarily the same thing but it certainly has a lot of similarities and the best way of",
    "start": "2179880",
    "end": "2187620"
  },
  {
    "text": "bounding these kinds of services is certainly in the same way as with micro services along bounded bounded context",
    "start": "2187620",
    "end": "2194840"
  },
  {
    "text": "within the problem domain but the isolation is kind of interesting so if",
    "start": "2194840",
    "end": "2201120"
  },
  {
    "text": "we got it like micro services if we were writing to service and they're showing a database in a micro services if you're",
    "start": "2201120",
    "end": "2208080"
  },
  {
    "text": "doing that and it's not a reactive system you need you need these things to be to own their own storage so this is",
    "start": "2208080",
    "end": "2214140"
  },
  {
    "text": "not an effective pattern so each of the services is responsible for its own storage where that's appropriate so",
    "start": "2214140",
    "end": "2223410"
  },
  {
    "text": "here's a couple of services let's imagine we've got some the the the",
    "start": "2223410",
    "end": "2228600"
  },
  {
    "text": "storage it becomes part of the component",
    "start": "2228600",
    "end": "2233030"
  },
  {
    "text": "and that means that you know if we need a graph database in one service in a relational database in another service",
    "start": "2233930",
    "end": "2240360"
  },
  {
    "text": "absolutely fine but there's awesome some other options that kind of crop up which",
    "start": "2240360",
    "end": "2245370"
  },
  {
    "text": "is kind of interesting the bay the service is the boundary of the service and actually all of the",
    "start": "2245370",
    "end": "2254820"
  },
  {
    "start": "2250000",
    "end": "2311000"
  },
  {
    "text": "information that did that describes the state of the service is deterministic because we've already defined the",
    "start": "2254820",
    "end": "2261390"
  },
  {
    "text": "properties of the message exchange as being in order order preserving sequence",
    "start": "2261390",
    "end": "2266820"
  },
  {
    "text": "of Delta changes in effect that's what the mess of these asynchronous messages are so we've got if we to think about",
    "start": "2266820",
    "end": "2274020"
  },
  {
    "text": "that we've got a message coming in two components I we could let it go into",
    "start": "2274020",
    "end": "2279180"
  },
  {
    "text": "components I and allow component a to store it somewhere and then there's a message coming out but we could also do",
    "start": "2279180",
    "end": "2286140"
  },
  {
    "text": "this instead we could treat component a as a black box there's a message coming",
    "start": "2286140",
    "end": "2292560"
  },
  {
    "text": "in we're going to and there's a message going out we could treat that as a black",
    "start": "2292560",
    "end": "2300750"
  },
  {
    "text": "box we just worry about the domain logic inside that server because that's the stuff that's really important and then",
    "start": "2300750",
    "end": "2307500"
  },
  {
    "text": "as the message comes in we could divert",
    "start": "2307500",
    "end": "2313440"
  },
  {
    "start": "2311000",
    "end": "2496000"
  },
  {
    "text": "it and we could just write the log just write the message to some more persistent store if something bad",
    "start": "2313440",
    "end": "2321630"
  },
  {
    "text": "happened to the service when we start the new version copy of the service or",
    "start": "2321630",
    "end": "2328140"
  },
  {
    "text": "up we just replaying the messages from the persistent store logically from the",
    "start": "2328140",
    "end": "2334920"
  },
  {
    "text": "beginning of hip time we replay all this and the this component gets precisely back into the same state that it was",
    "start": "2334920",
    "end": "2342570"
  },
  {
    "text": "before think about what that means for real moments one of the beautiful",
    "start": "2342570",
    "end": "2348620"
  },
  {
    "text": "characteristics of the exchange that we built was that we could replay",
    "start": "2348620",
    "end": "2355640"
  },
  {
    "text": "production events in a in in a test environment and get into this system in",
    "start": "2355640",
    "end": "2362550"
  },
  {
    "text": "the testing environment into precisely identically reproducibly the same state",
    "start": "2362550",
    "end": "2367650"
  },
  {
    "text": "as it was in production and have a deep but have a break point on it so to be able to debug what was going on it means",
    "start": "2367650",
    "end": "2374910"
  },
  {
    "text": "that when you're developing these things you can make all of these stuff infrastructural this is kind of generic if you're starting working at the level",
    "start": "2374910",
    "end": "2381390"
  },
  {
    "text": "of messages they just of stuff that you can kind of write out and store and replay generically at the",
    "start": "2381390",
    "end": "2387240"
  },
  {
    "text": "level of messages that means that when you're writing one of these services the only thing that you need to think about",
    "start": "2387240",
    "end": "2394250"
  },
  {
    "text": "is the domain logic again we're in this game where we've completely separated",
    "start": "2394250",
    "end": "2400110"
  },
  {
    "text": "the essential complexity of the problem domain from the accidental complexity of all of the computer groupings that",
    "start": "2400110",
    "end": "2406860"
  },
  {
    "text": "surrounds it we can kind of move the computer gubbins that all those things into the infrastructure more now this",
    "start": "2406860",
    "end": "2413370"
  },
  {
    "text": "might sound like the return of the 1980s or 90s and enterprise service bus and",
    "start": "2413370",
    "end": "2419910"
  },
  {
    "text": "all that sort of stuff and I don't mean that kind of stuff the infrastructure is kind of fairly lightweight and fairly simple in some respects but with some",
    "start": "2419910",
    "end": "2425070"
  },
  {
    "text": "restrictions on our programming it means we can focus more on the problem domain and less on the kind of computer science",
    "start": "2425070",
    "end": "2431220"
  },
  {
    "text": "that surrounds it as long as we have that infrastructure if we want to do the same thing with clustering we can do the",
    "start": "2431220",
    "end": "2437910"
  },
  {
    "text": "same thing we can record the events we can replay them in two different places and have have a clustered system where",
    "start": "2437910",
    "end": "2444900"
  },
  {
    "text": "we've got to identify denticles stateful models of the system in in two different places we use this as part of our",
    "start": "2444900",
    "end": "2452550"
  },
  {
    "text": "failure modes the core of our system the system of record for our for our",
    "start": "2452550",
    "end": "2458540"
  },
  {
    "text": "exchange in the very high performance parts of the exchange was the in-memory state of these stateful domain models",
    "start": "2458540",
    "end": "2465680"
  },
  {
    "text": "which is kind of a really nice programming model I think as long as you kind of take some of the constraints of",
    "start": "2465680",
    "end": "2471390"
  },
  {
    "text": "the asynchronous programming model we then get on to back pressure we took in",
    "start": "2471390",
    "end": "2477180"
  },
  {
    "text": "reactive systems we talked about the resilience and all that sort of stuff and the big problem is that you can't isolate stress the system is a whole it",
    "start": "2477180",
    "end": "2484680"
  },
  {
    "text": "really needs to respond sensibly when it's only when it's under stress and this is particularly true when we start",
    "start": "2484680",
    "end": "2491220"
  },
  {
    "text": "thinking about these these sort of flows of information and messaging and data through the system so when you start",
    "start": "2491220",
    "end": "2498750"
  },
  {
    "start": "2496000",
    "end": "2632000"
  },
  {
    "text": "talking about distributed systems in general the ideas of queueing crop up",
    "start": "2498750",
    "end": "2503940"
  },
  {
    "text": "all over the place and one of the things that never occurred to me until we started working on some of this sort of stuff is that if you think about it",
    "start": "2503940",
    "end": "2510720"
  },
  {
    "text": "queues are always an unstable state they're either always fought or always empty",
    "start": "2510720",
    "end": "2516150"
  },
  {
    "text": "the idea of them being balanced is kind of this weird kind of you know anomaly that's never going to happen what do I",
    "start": "2516150",
    "end": "2522869"
  },
  {
    "text": "mean by that here's they're my two components again and let's imagine that component a is slightly slower than",
    "start": "2522869",
    "end": "2529650"
  },
  {
    "text": "component B the message q between them is always going to be empty on any kind",
    "start": "2529650",
    "end": "2536789"
  },
  {
    "text": "of statistical measure that's you know that's okay that's that's not that's not",
    "start": "2536789",
    "end": "2543299"
  },
  {
    "text": "too bad a model the other way around though let's imagine that component a",
    "start": "2543299",
    "end": "2549150"
  },
  {
    "text": "slightly faster than component B then what's going to happen is that component B is going to be processing things what",
    "start": "2549150",
    "end": "2554880"
  },
  {
    "text": "component a is going to be filling up the queue at some point the queue is going to be four and in this sort of world of the components the Q is always",
    "start": "2554880",
    "end": "2561809"
  },
  {
    "text": "going to be four we could do some stuff with a component ain't backs off and all that kind of stuff but the Q is essentially always few for this is an",
    "start": "2561809",
    "end": "2568980"
  },
  {
    "text": "unstable state the idea of the Q being kind of evenly loaded is just this kind",
    "start": "2568980",
    "end": "2574380"
  },
  {
    "text": "of weird you sort of one-off chance in a million compared to it's either always",
    "start": "2574380",
    "end": "2579809"
  },
  {
    "text": "full are always empty and this has kind of catastrophic effects what does component I do in the q s-- for usually",
    "start": "2579809",
    "end": "2587549"
  },
  {
    "text": "what we do is fall over but we keep we",
    "start": "2587549",
    "end": "2594630"
  },
  {
    "text": "the first couple of times it falls over we might start thinking about something else the usual response is to make the",
    "start": "2594630",
    "end": "2599849"
  },
  {
    "text": "cube again that doesn't work it just",
    "start": "2599849",
    "end": "2606720"
  },
  {
    "text": "defers the point that we should component a blows up and we drop messages on the floor",
    "start": "2606720",
    "end": "2612230"
  },
  {
    "text": "so never ever ever ever never ever use unbounded hues so we've got to find a",
    "start": "2620180",
    "end": "2626880"
  },
  {
    "text": "way of constraining the lengths of the cues and so the only response that we're the only logical response that we can",
    "start": "2626880",
    "end": "2632280"
  },
  {
    "start": "2632000",
    "end": "2677000"
  },
  {
    "text": "kind of follow is to start supply but back pressure so at the point at which",
    "start": "2632280",
    "end": "2637440"
  },
  {
    "text": "we starting to approach the cubing for we've got to signal we there is no way",
    "start": "2637440",
    "end": "2642480"
  },
  {
    "text": "at all that component a can do anything there's nothing that it can do that's",
    "start": "2642480",
    "end": "2650490"
  },
  {
    "text": "going to make this a survivable scenario other than throw messages away I suppose",
    "start": "2650490",
    "end": "2656100"
  },
  {
    "text": "that's one option but if you want to keep the state it can't do that so the only thing that it can do in those",
    "start": "2656100",
    "end": "2661560"
  },
  {
    "text": "circumstances is to signal upstream to say I can't keep up you've got to slow down so we've got to record back",
    "start": "2661560",
    "end": "2667920"
  },
  {
    "text": "pressure and ultimately that back pressure might need to go all the way out to the user in some way we've got to",
    "start": "2667920",
    "end": "2673110"
  },
  {
    "text": "cope with it but that's got to be part of the design response to be able to do this so one of the properties that we",
    "start": "2673110",
    "end": "2678900"
  },
  {
    "start": "2677000",
    "end": "2769000"
  },
  {
    "text": "would build into our kind of idealistic reactive systems infrastructure would be the support for back pressure to allow",
    "start": "2678900",
    "end": "2685800"
  },
  {
    "text": "the messages to kind of signal the back pressure upstream and allow that us to cope with those elastic systems need to",
    "start": "2685800",
    "end": "2694740"
  },
  {
    "text": "react to changes on demand there that means that means that when we send a message we don't necessarily know where who we're sending it to or whether the",
    "start": "2694740",
    "end": "2701970"
  },
  {
    "text": "location of where we're sending it to and and we're all doing this in distributed computing all the time and",
    "start": "2701970",
    "end": "2707940"
  },
  {
    "text": "the idea is to embrace this as soon as we are in distributed computing world we're into the realms of things like",
    "start": "2707940",
    "end": "2716130"
  },
  {
    "text": "eventual consistency and cap theorem of those sorts of problems and and it's a",
    "start": "2716130",
    "end": "2722550"
  },
  {
    "text": "genuinely hard problem this is genuinely kind of world class hard there are no",
    "start": "2722550",
    "end": "2728160"
  },
  {
    "text": "simple solutions and that it's all about trade-offs if you really really need",
    "start": "2728160",
    "end": "2733290"
  },
  {
    "text": "consistency between two ponents in an in in in a distributed system a distributed",
    "start": "2733290",
    "end": "2739890"
  },
  {
    "text": "asynchronous system there are exceedingly well thought-out proven",
    "start": "2739890",
    "end": "2745170"
  },
  {
    "text": "models that allow you to do that things like raft or the allow you to kind of design and a",
    "start": "2745170",
    "end": "2753910"
  },
  {
    "text": "protocol of exchange that allows you it's going to manage the distributed consistency protocol there's another",
    "start": "2753910",
    "end": "2760780"
  },
  {
    "text": "kind of lighter weight thing that you can do which is the thing that we did which is you can kind of take just assume that it doesn't that the eventual",
    "start": "2760780",
    "end": "2767410"
  },
  {
    "text": "consistency doesn't matter and you can kind of build that into your system the",
    "start": "2767410",
    "end": "2772869"
  },
  {
    "start": "2769000",
    "end": "2902000"
  },
  {
    "text": "other part of this though in terms of these in terms of these sorry I got ahead of myself and I'll come back to",
    "start": "2772869",
    "end": "2778540"
  },
  {
    "text": "the eventual consistency thing the the other part of the the facility of being",
    "start": "2778540",
    "end": "2784540"
  },
  {
    "text": "able to move the separate at least essential complexity from the accidental accidental complexities this idea of the",
    "start": "2784540",
    "end": "2789970"
  },
  {
    "text": "elastic scalability so let's imagine that we've got some messaging going to component say we can build our system",
    "start": "2789970",
    "end": "2796150"
  },
  {
    "text": "like this at first we've got some messaging and at some point when when component B is too slow and we'd like to",
    "start": "2796150",
    "end": "2803619"
  },
  {
    "text": "be able to scale up we could do this and we could put into our messaging something that discriminates between the",
    "start": "2803619",
    "end": "2809290"
  },
  {
    "text": "different kinds of messages in some way and filters them in different directions maybe all of the customer IDs that are",
    "start": "2809290",
    "end": "2817599"
  },
  {
    "text": "under 10,000 go go to the green one and all the ones that are over 10,000 go to",
    "start": "2817599",
    "end": "2822609"
  },
  {
    "text": "the yellow one or whatever the algorithm is something like that it can be done it can be just round-robin but we can kind",
    "start": "2822609",
    "end": "2828730"
  },
  {
    "text": "of allocate behaviors between the different the different components when",
    "start": "2828730",
    "end": "2834190"
  },
  {
    "text": "we start doing that kind of stuff we start getting we start ending up with these more complicated patterns we've got these compete Kickham components",
    "start": "2834190",
    "end": "2840550"
  },
  {
    "text": "talking to each other in a variety of different ways and so on and some of",
    "start": "2840550",
    "end": "2845890"
  },
  {
    "text": "these components might have store traditional stores where they are storing stuff in a database some of",
    "start": "2845890",
    "end": "2851440"
  },
  {
    "text": "these might be these weird kind of in-memory state kind of things that allow us to do all sorts of clever",
    "start": "2851440",
    "end": "2858220"
  },
  {
    "text": "things and they're communicating in different directions with responses and all that kind of stuff and the picture gets reasonably",
    "start": "2858220",
    "end": "2865210"
  },
  {
    "text": "complicated but I just want to remind you again if you think about what's going on inside of each of these",
    "start": "2865210",
    "end": "2870339"
  },
  {
    "text": "services its servicing the queue of messages coming in and generating an",
    "start": "2870339",
    "end": "2875710"
  },
  {
    "text": "asynchronous output and that's and modifying the local state within the bands of the service that's it",
    "start": "2875710",
    "end": "2881890"
  },
  {
    "text": "on a single thread my experience of working on the on systems like this was",
    "start": "2881890",
    "end": "2887100"
  },
  {
    "text": "was almost entirely joyful because it reminded me of the early days of learning to program when you were just",
    "start": "2887100",
    "end": "2892720"
  },
  {
    "text": "writing code for yourself and you didn't have to worry about all of the horrible things that can concurrency and complexity of distributed programming it",
    "start": "2892720",
    "end": "2899200"
  },
  {
    "text": "just simplified the worldview I haven't got that I haven't included the slide on",
    "start": "2899200",
    "end": "2905020"
  },
  {
    "start": "2902000",
    "end": "3044000"
  },
  {
    "text": "eventual consistency let me just catch up with what I was talking about with the eventual consistency the other",
    "start": "2905020",
    "end": "2910360"
  },
  {
    "text": "approach to eventual consistency rather than the kind of distributed consensus protocols is to start thinking about",
    "start": "2910360",
    "end": "2915760"
  },
  {
    "text": "your problem domain does it really matter that the order history lags a",
    "start": "2915760",
    "end": "2922210"
  },
  {
    "text": "little bit behind your current state of your orders not really if you design",
    "start": "2922210",
    "end": "2927280"
  },
  {
    "text": "your system well doesn't matter because really looking at one thing in one place and nothing in another place and whether",
    "start": "2927280",
    "end": "2932740"
  },
  {
    "text": "they catch up microseconds later doesn't really matter very much you're not going",
    "start": "2932740",
    "end": "2937990"
  },
  {
    "text": "to be doing Crossfit cross-validation things you can use your domain modeling to to to take advantage or at least not",
    "start": "2937990",
    "end": "2946090"
  },
  {
    "text": "get tripped up by eventual consistency in that manner where you do need that",
    "start": "2946090",
    "end": "2951280"
  },
  {
    "text": "you do need the the consistency then you use a protocol something like raft and",
    "start": "2951280",
    "end": "2956320"
  },
  {
    "text": "this is only the same as we would think about in a in a distributed system distributed computing is complex it's",
    "start": "2956320",
    "end": "2964750"
  },
  {
    "text": "world class complex the problems that arise from distributed computing are always hard to solve distributed",
    "start": "2964750",
    "end": "2971860"
  },
  {
    "text": "transactions don't really work but that's the that's the alternative solution you know distributed",
    "start": "2971860",
    "end": "2977980"
  },
  {
    "text": "transactions are kind of a bit of a hack and they scare the hell out of anybody that thinks about those because it's big in complicated locks everything together",
    "start": "2977980",
    "end": "2984540"
  },
  {
    "text": "raft is a mechanism of kind of doing distributed transaction or in",
    "start": "2984540",
    "end": "2990490"
  },
  {
    "text": "interaction or at least in securing the consistency between things so there are things that you can do this is a picture",
    "start": "2990490",
    "end": "2996340"
  },
  {
    "text": "of the this is a high-level kind of architects arm wavy kind of picture of the the the L map system where we built",
    "start": "2996340",
    "end": "3003210"
  },
  {
    "text": "our exchange just to try and call this out we had the core services these were the these were the weird in-memory state",
    "start": "3003210",
    "end": "3009900"
  },
  {
    "text": "kind of things we had a bunch of general services these were more traditional kind of micro service kind of thing",
    "start": "3009900",
    "end": "3015789"
  },
  {
    "text": "and we had what we called gateway services which were kind of translations it would translate every interaction",
    "start": "3015789",
    "end": "3021729"
  },
  {
    "text": "from the outside world into our native message system this system has been",
    "start": "3021729",
    "end": "3027519"
  },
  {
    "text": "going for more than 10 years 12 years in fact and he's still a nice system to",
    "start": "3027519",
    "end": "3035319"
  },
  {
    "text": "work on and he's still world-class in performance and he's still an effective code base so this is this is not as",
    "start": "3035319",
    "end": "3042909"
  },
  {
    "text": "scary as it looks now what I'd really like he's to give you so go and get",
    "start": "3042909",
    "end": "3048459"
  },
  {
    "start": "3044000",
    "end": "3214000"
  },
  {
    "text": "these products and do this stuff I don't think we're quite there yet there's some stuff that's kind of along",
    "start": "3048459",
    "end": "3053799"
  },
  {
    "text": "acha is probably the most mature things the authors of a cure were the collaborators on writing the reactive",
    "start": "3053799",
    "end": "3059559"
  },
  {
    "text": "manifesto with me and Martine Thompson who it's on the exchange that we're talking about and there's some great",
    "start": "3059559",
    "end": "3066639"
  },
  {
    "text": "stuff in in in akka these is based on actor patents if you come across those sorts of ideas so look if you want to learn more about this",
    "start": "3066639",
    "end": "3072729"
  },
  {
    "text": "stuff read about actors and look at Attica Aaron is is my friend Martin's",
    "start": "3072729",
    "end": "3078369"
  },
  {
    "text": "and Todd Montgomery's open source project for it's the highest performance messaging system in the world it's built",
    "start": "3078369",
    "end": "3085959"
  },
  {
    "text": "on the Omni on the experience that we had at L max of this kind of infrastructure and the destination for",
    "start": "3085959",
    "end": "3093249"
  },
  {
    "text": "is it for it to do all of the things that we've talked about they're adding bits of those things Aaron is fabulous",
    "start": "3093249",
    "end": "3099339"
  },
  {
    "text": "just as a message system more than 7 million small messages a second nothing else comes close to touching it but it",
    "start": "3099339",
    "end": "3106179"
  },
  {
    "text": "can also do the kind of distributed",
    "start": "3106179",
    "end": "3110189"
  },
  {
    "text": "persistence of the messages and and so on that we talked about there's some new stuff that's just come out very recently",
    "start": "3111359",
    "end": "3118119"
  },
  {
    "text": "so there's a there's a product called cloud state that looks interesting that I think I haven't I haven't used it",
    "start": "3118119",
    "end": "3125229"
  },
  {
    "text": "myself yet it's on my list of things to play with and just recently I hadn't heard people talk about this but this",
    "start": "3125229",
    "end": "3131559"
  },
  {
    "text": "has been something it's in the back of my head for a while is the idea of stateful services stateful serverless if",
    "start": "3131559",
    "end": "3138399"
  },
  {
    "text": "you think about what I've described is it quite a lot of it sounds a bit like a server love system in some ways if only",
    "start": "3138399",
    "end": "3144880"
  },
  {
    "text": "the server server system was stateful so you could build a slow version of that quite easy are you just getting the state out of s3",
    "start": "3144880",
    "end": "3151460"
  },
  {
    "text": "or whatever and responding to the messages but I think there's some really interesting work there I have a",
    "start": "3151460",
    "end": "3156860"
  },
  {
    "text": "suspicion that the as I said at the outset that we might be I think that if the state for services thing could hit",
    "start": "3156860",
    "end": "3162910"
  },
  {
    "text": "it might be one of these step changes it might give us the opportunity to build systems on a different scale of",
    "start": "3162910",
    "end": "3170420"
  },
  {
    "text": "complexity than we are used to and kind of not worry so much about all of the",
    "start": "3170420",
    "end": "3176120"
  },
  {
    "text": "kind of accidental complexity of building these things so I think this is more in the in the realm of something to",
    "start": "3176120",
    "end": "3181700"
  },
  {
    "text": "watch out for them something to immediately jump on but I would recommend it to you it's a bit easier",
    "start": "3181700",
    "end": "3186740"
  },
  {
    "text": "tera key at the moment but those organizations that I know that have practiced it would never go back to writing complex systems any other way",
    "start": "3186740",
    "end": "3192950"
  },
  {
    "text": "because this is the nicest way of doing it thanks very much for your time I have run out of time I'm very sorry I will",
    "start": "3192950",
    "end": "3198980"
  },
  {
    "text": "take any I will take questions electronically I'll be around here now during the coffee break and I'll be",
    "start": "3198980",
    "end": "3204200"
  },
  {
    "text": "around for the rest of the conference if you want to talk to me thank you very much [Applause]",
    "start": "3204200",
    "end": "3215109"
  }
]