[
  {
    "start": "0",
    "end": "48000"
  },
  {
    "text": "so welcome to web assembly in production compiler and a web page I'm Brian",
    "start": "12360",
    "end": "17880"
  },
  {
    "text": "Carol okay so let's talk about web assembly and first of all I want to get just a sense of who's here so how many",
    "start": "17880",
    "end": "24880"
  },
  {
    "text": "people have worked in web development in some way shape or form okay pretty much every",
    "start": "24880",
    "end": "30800"
  },
  {
    "text": "everybody and how many people have heard of web assembly before getting close to everybody as",
    "start": "30800",
    "end": "37160"
  },
  {
    "text": "well how many people have web assembly live in production with a real",
    "start": "37160",
    "end": "42680"
  },
  {
    "text": "app that's about four people okay so that's kind of what I expected so the reason uh so what I were're uh the for",
    "start": "42680",
    "end": "49840"
  },
  {
    "start": "48000",
    "end": "84000"
  },
  {
    "text": "anyone who hasn't heard very much about it the basics are it's a binary code format runs in the browser and so",
    "start": "49840",
    "end": "56039"
  },
  {
    "text": "JavaScript isn't the only option anymore for running code in a web page um but uh let's in this talk uh I want",
    "start": "56039",
    "end": "64198"
  },
  {
    "text": "to get beyond the basics and uh give you some idea of what it's like to go into production with a web assembly app um so",
    "start": "64199",
    "end": "70799"
  },
  {
    "text": "we're going to talk a live talk about a live production web app uh that was that comes from a large codebase and talk",
    "start": "70799",
    "end": "77520"
  },
  {
    "text": "about some of the advantages that we got from uh using web assembly and some of the challenges uh that we ran",
    "start": "77520",
    "end": "84119"
  },
  {
    "start": "84000",
    "end": "141000"
  },
  {
    "text": "into um so the context for this uh is an open source project called Rock which is",
    "start": "84119",
    "end": "89960"
  },
  {
    "text": "a new uh programming language um and it's fast friendly and functional is the",
    "start": "89960",
    "end": "95720"
  },
  {
    "text": "tagline we have so it's uh uh it aims to be faster than the garbage collected languages like go and Java and c and so",
    "start": "95720",
    "end": "103040"
  },
  {
    "text": "on but not quite as fast as C and C++ and rust um",
    "start": "103040",
    "end": "108640"
  },
  {
    "text": "so uh a language project is a huge thing and there's lots of sub projects within",
    "start": "108640",
    "end": "114360"
  },
  {
    "text": "that and we're going to talk about one of those and in particular we're going to focus on the rock reppel",
    "start": "114360",
    "end": "120600"
  },
  {
    "text": "um so a repple is a tool like this you've probably seen them before even if you didn't use that same terminology uh",
    "start": "120600",
    "end": "127479"
  },
  {
    "text": "so it's just a a little tool you type into the command line and uh it'll run",
    "start": "127479",
    "end": "132560"
  },
  {
    "text": "some code for you as you type it uh so it reads the input evaluates it prints it and then Loops back around again",
    "start": "132560",
    "end": "140360"
  },
  {
    "text": "um and the question that we asked ourselves was can we Port this to web assembly uh now why would we want to do",
    "start": "140360",
    "end": "146239"
  },
  {
    "start": "141000",
    "end": "189000"
  },
  {
    "text": "that well one of the reasons is it's really good for newcomers so somebody who's coming to check out our our new",
    "start": "146239",
    "end": "151599"
  },
  {
    "text": "language this is a really good way to do it right you don't have to install anything and it's just it's right there and you can start playing around with it",
    "start": "151599",
    "end": "159000"
  },
  {
    "text": "um another Advantage for for us is as we'll see later web assembly allowed us",
    "start": "159000",
    "end": "164840"
  },
  {
    "text": "to make a static site out of this uh no no back end um and how is that possible well",
    "start": "164840",
    "end": "171560"
  },
  {
    "text": "it's because Rock the language uh one of the things it can compile to is web assembly and the compiler itself is",
    "start": "171560",
    "end": "179200"
  },
  {
    "text": "written in cost and that also compiles to web assembly so like I said JavaScript isn't the only option anymore",
    "start": "179200",
    "end": "184640"
  },
  {
    "text": "and lots of different languages are compiling to web assembly and let's see what we can use this for okay so to give",
    "start": "184640",
    "end": "192040"
  },
  {
    "start": "189000",
    "end": "380000"
  },
  {
    "text": "you just a better feel for the kind of tools developer tools we're talking about um I'm going to just actually",
    "start": "192040",
    "end": "199440"
  },
  {
    "text": "switch over to to a couple of them here um so this is a website called repet and",
    "start": "199440",
    "end": "205319"
  },
  {
    "text": "they have various different reels on their site for different languages so I can do things like",
    "start": "205319",
    "end": "210439"
  },
  {
    "text": "x = 1 2 3 and Y = 111 and then I can go x + y and it's 2",
    "start": "210439",
    "end": "218599"
  },
  {
    "text": "three4 amazing um and so that's evaluating my code as",
    "start": "218599",
    "end": "224360"
  },
  {
    "text": "as I as I type it in and python is an interpreted language so it's taking one line at a time and executing it one line",
    "start": "224360",
    "end": "229720"
  },
  {
    "text": "at a time um there's another class of languages like compiled languages which",
    "start": "229720",
    "end": "235760"
  },
  {
    "text": "are they're not interpreted they they they're compiled and usually in a language like like that you you have a",
    "start": "235760",
    "end": "242319"
  },
  {
    "text": "different type of uh of tool on the web so um this is a website called compiler",
    "start": "242319",
    "end": "247680"
  },
  {
    "text": "Explorer and uh I'm using the example of C++ language C++ is a much more static",
    "start": "247680",
    "end": "255120"
  },
  {
    "text": "language and that means that you've got to actually give it an entire program before it will uh run anything you can't",
    "start": "255120",
    "end": "260840"
  },
  {
    "text": "just do one line at a time um and what this website is doing is there's a lot more going on on this",
    "start": "260840",
    "end": "266440"
  },
  {
    "text": "page but uh the main bit is you've got some code code in the in the middle in the upper panel here and in the bottom",
    "start": "266440",
    "end": "273759"
  },
  {
    "text": "panel it's uh printing out um the results of that program so if I change",
    "start": "273759",
    "end": "280240"
  },
  {
    "text": "this code here to uh to a different number you can see the bottom changes uh at the same time there was no meaning",
    "start": "280240",
    "end": "287280"
  },
  {
    "text": "behind that number uh and uh so it changes live as I",
    "start": "287280",
    "end": "293080"
  },
  {
    "text": "as I change the code here the answer uh updates and it's worth having a little look um at the developer tools",
    "start": "293080",
    "end": "300639"
  },
  {
    "text": "to just see what's actually happening there so um if I change that by change",
    "start": "300639",
    "end": "306199"
  },
  {
    "text": "this number again I can see HTTP request happening this is going off to some endpoint called",
    "start": "306199",
    "end": "312800"
  },
  {
    "text": "compile uh which is doing what you would expect it to be doing so if I uh if I",
    "start": "312800",
    "end": "317840"
  },
  {
    "text": "change this again and put in another digit there somewhere it goes off and compiles again so it's basically",
    "start": "317840",
    "end": "322960"
  },
  {
    "text": "grabbing this code AS text sending it off to a server somewhere and uh printing the result out again",
    "start": "322960",
    "end": "331199"
  },
  {
    "text": "um this is the rock uh Rebel uh which is what this talk is mainly about so uh",
    "start": "331199",
    "end": "337960"
  },
  {
    "text": "I'll do the same kind of thing in here uh and use my same",
    "start": "337960",
    "end": "344120"
  },
  {
    "text": "example um and it is doing uh doing the same sort of stuff so but there's a",
    "start": "344120",
    "end": "349960"
  },
  {
    "text": "difference which is where's the thing developer tools so if I keep the",
    "start": "349960",
    "end": "356600"
  },
  {
    "text": "network tab open again uh Z is 74 x +",
    "start": "356600",
    "end": "364120"
  },
  {
    "text": "z there's no requests so this is actually all in the front end and uh",
    "start": "364120",
    "end": "370160"
  },
  {
    "text": "that's something we did with web assembly uh and I've never actually seen another uh another tool like this uh use",
    "start": "370160",
    "end": "375800"
  },
  {
    "text": "that so I think this is something we've done that's uh a little bit new um so let's have a closer look at",
    "start": "375800",
    "end": "382680"
  },
  {
    "start": "380000",
    "end": "653000"
  },
  {
    "text": "how these tools work so the typical architecture you find and I'm going to use uh compiler Explorer as the example",
    "start": "382680",
    "end": "389080"
  },
  {
    "text": "um is that you uh like I was saying you you have an input panel here you type in",
    "start": "389080",
    "end": "395080"
  },
  {
    "text": "some some code sends that off to a web server which runs a compiler um and display sends that the",
    "start": "395080",
    "end": "402639"
  },
  {
    "text": "result back through the web server and displays it out here um some websites so compiler Explorer uses HTTP for that um",
    "start": "402639",
    "end": "411000"
  },
  {
    "text": "the other one that I demonstrated with python uses uh websocket um so but in our case one of the reason",
    "start": "411000",
    "end": "419759"
  },
  {
    "text": "we wanted to explore web assembly was all of this involves man managing servers and we're just an open sour",
    "start": "419759",
    "end": "425280"
  },
  {
    "text": "source project and nobody really wants to have a beeper that's going off because an open source project is",
    "start": "425280",
    "end": "430680"
  },
  {
    "text": "something you do as a hobby in your spare time and mostly that's what we have so uh we really didn't want to be",
    "start": "430680",
    "end": "437800"
  },
  {
    "text": "doing this uh and also for a language project you tend to get spikes of of traffic as as a lot of people do I guess",
    "start": "437800",
    "end": "444720"
  },
  {
    "text": "um but if there's an article on Hacker News about you or uh you know somebody shares some article",
    "start": "444720",
    "end": "450400"
  },
  {
    "text": "um or shares a go-to talk or something uh you can get a spike in your traffic",
    "start": "450400",
    "end": "455800"
  },
  {
    "text": "and then you know that's bad news now you got to think about how do I scale my back end and all that",
    "start": "455800",
    "end": "461599"
  },
  {
    "text": "stuff um so what we got out of using web assembly was we got this architecture where we just serve the website from a",
    "start": "461599",
    "end": "469080"
  },
  {
    "text": "static file server so just like a a CDN these are pretty cheap and they have",
    "start": "469080",
    "end": "474199"
  },
  {
    "text": "replication all over the world and everything you just load the the um the entire front end and it contains um HTML",
    "start": "474199",
    "end": "481680"
  },
  {
    "text": "user interface that we were looking at um it's got an input at the bottom you",
    "start": "481680",
    "end": "487639"
  },
  {
    "text": "type in your code it sends it to a compiler which is in web assembly in the same page so it doesn't have to go out",
    "start": "487639",
    "end": "492919"
  },
  {
    "text": "to a server um and the execution output then gets uh displayed on the web",
    "start": "492919",
    "end": "499479"
  },
  {
    "text": "page and so to build a reppel out of a compiler so I kind of mentioned briefly",
    "start": "499720",
    "end": "504759"
  },
  {
    "text": "earlier the difference between an interpreted and a compiled language so this type of reppel setup is a little",
    "start": "504759",
    "end": "510560"
  },
  {
    "text": "bit easier with interpreters because line by line is what an interpreter does anyway um for a compiled",
    "start": "510560",
    "end": "517719"
  },
  {
    "text": "language the the other system like like compiler Explorer where you do the full program is easier to do uh but we really",
    "start": "517719",
    "end": "524360"
  },
  {
    "text": "wanted this reppel experience because it's a bit more interactive and so how you build a reppel out of a",
    "start": "524360",
    "end": "530200"
  },
  {
    "text": "compiler um is you take all of the input lines of text that have ever been",
    "start": "530200",
    "end": "535920"
  },
  {
    "text": "entered in by the user in the current session you jam them all together you wrap them up in this main function so",
    "start": "535920",
    "end": "542560"
  },
  {
    "text": "this is this syntax is probably not too familiar but it's just indentation means that it's inside the main function um",
    "start": "542560",
    "end": "549959"
  },
  {
    "text": "and so we just grab all of those lines wrap it in a main function and return this X Plus Y which was the thing I uh",
    "start": "549959",
    "end": "556160"
  },
  {
    "text": "last line I entered in so the last line becomes the return value of that function so we're basically grabbing",
    "start": "556160",
    "end": "562279"
  },
  {
    "text": "some strings sticking them together and pretending it's a file because the compiler knows how to take a file and",
    "start": "562279",
    "end": "567320"
  },
  {
    "text": "make some code out of it so so we just do that every time you type in a new line we make a brand new file that is",
    "start": "567320",
    "end": "575200"
  },
  {
    "text": "all of that that is one line longer than the last time and uh compile it and run",
    "start": "575200",
    "end": "581000"
  },
  {
    "text": "it okay so some of the challenges with this uh one thing is the download size",
    "start": "581000",
    "end": "587160"
  },
  {
    "text": "uh so the it's a 300,000 line of code project it's quite a lot um the the",
    "start": "587160",
    "end": "594360"
  },
  {
    "text": "binary size this binary size is just from my Mac that I'm doing this on uh which isn't web assembly but it's just",
    "start": "594360",
    "end": "600600"
  },
  {
    "text": "to give you an idea you you don't want a page a web page that's 66 megabytes it's",
    "start": "600600",
    "end": "605920"
  },
  {
    "text": "it's not going to be a good time so we're going to need to figure out how we shrink that that's one of the",
    "start": "605920",
    "end": "612519"
  },
  {
    "text": "challenges and the other challenges are mainly around uh various web assembly limitations that exist so web assembly",
    "start": "612519",
    "end": "620120"
  },
  {
    "text": "is not actually able to listen for user input so that's going to be a problem because we need to type user input in um",
    "start": "620120",
    "end": "626920"
  },
  {
    "text": "it can only understand JavaScript numbers so if we want to listen for an user input with",
    "start": "626920",
    "end": "632440"
  },
  {
    "text": "JavaScript that's going to be difficult um it can't modify the web page and you",
    "start": "632440",
    "end": "638160"
  },
  {
    "text": "can't run web assembly inside web assembly so I I did say that both the language we're compiling and the",
    "start": "638160",
    "end": "643839"
  },
  {
    "text": "compiler itself are in web assembly but that's not much good if we can't run web assembly inside web assembly so these",
    "start": "643839",
    "end": "650240"
  },
  {
    "text": "are the challenges we're going to have to figure out all right so the first one download",
    "start": "650240",
    "end": "656839"
  },
  {
    "start": "653000",
    "end": "980000"
  },
  {
    "text": "size it's way too big um so let's have a look at how what is inside this uh this",
    "start": "656839",
    "end": "663959"
  },
  {
    "text": "project what how does it break down so in the we'll take the terminal reppel",
    "start": "663959",
    "end": "670240"
  },
  {
    "text": "as the as the example we saw that at the beginning and so what it needs to do is receive some input parse it uh so that",
    "start": "670240",
    "end": "677120"
  },
  {
    "text": "it understands what the text means all the different syntax type check it um",
    "start": "677120",
    "end": "682600"
  },
  {
    "text": "specialize it which is just to do with uh working with uh generic types um then",
    "start": "682600",
    "end": "687800"
  },
  {
    "text": "generate a binary and evaluate it turn it then turn the result into a string and display it um",
    "start": "687800",
    "end": "695200"
  },
  {
    "text": "and so over on the on the right hand side of this I'm showing we've got a big part of the compiler which is for",
    "start": "695200",
    "end": "701639"
  },
  {
    "text": "generating production binaries and it works with web assembly and also Intel and arm style um machine code uh that",
    "start": "701639",
    "end": "709839"
  },
  {
    "text": "uses a library called llvm which some some people might have heard of but it's basically a big chunk of code that is",
    "start": "709839",
    "end": "716720"
  },
  {
    "text": "there for optimizing and making sure that your final code code runs fast so that's a big piece of the compiler we've",
    "start": "716720",
    "end": "723160"
  },
  {
    "text": "also got these other um pieces on the on on the bottom right here for generating development binaries um and we'll talk a",
    "start": "723160",
    "end": "730200"
  },
  {
    "text": "bit about why that's different so these are um separate things that we built",
    "start": "730200",
    "end": "735279"
  },
  {
    "text": "ourselves uh which just basically generate something as fast as it",
    "start": "735279",
    "end": "741040"
  },
  {
    "text": "possibly can without worrying too much about optimizations and so the reason why we",
    "start": "741040",
    "end": "747440"
  },
  {
    "text": "structure things that way we we've actually got separate code paths entirely for generating production V binaries versus development binaries uh",
    "start": "747440",
    "end": "754959"
  },
  {
    "text": "and what I'm talking about here is um you know when you're using a compiler you've got two different scenarios that",
    "start": "754959",
    "end": "760440"
  },
  {
    "text": "you You' be commonly be in so the production scenario is where you you want to compile your program once and",
    "start": "760440",
    "end": "766480"
  },
  {
    "text": "then you want to run it lots and lots of times or maybe millions of your customers or something want to run it um",
    "start": "766480",
    "end": "772120"
  },
  {
    "text": "so in that sort of situation uh fast runtime of the final binary is really what you care about and",
    "start": "772120",
    "end": "779399"
  },
  {
    "text": "if your compile time is really long because you're doing lots of optimizations to try and get that final",
    "start": "779399",
    "end": "785399"
  },
  {
    "text": "binary to be fast that's okay you're kind of willing to pay uh a long compile",
    "start": "785399",
    "end": "790440"
  },
  {
    "text": "time because it's worth it you're going to compile it once but you're going to run it many times in the development scenario that's",
    "start": "790440",
    "end": "797240"
  },
  {
    "text": "sort of the opposite because you want to compile it lots and lots of times because every time you do you find a bug",
    "start": "797240",
    "end": "802480"
  },
  {
    "text": "and you need to fix it and need to go back and change something and then compile it again and run that and then you find another bug and you got to do",
    "start": "802480",
    "end": "808079"
  },
  {
    "text": "that again so what you care about there is the total time the compile plus run uh time and in that scenario usually",
    "start": "808079",
    "end": "815320"
  },
  {
    "text": "people like to run without optimizations um because that gets you the fastest compile times because all this",
    "start": "815320",
    "end": "820480"
  },
  {
    "text": "optimizing takes some time for the compiler to do and so what we noticed was uh that",
    "start": "820480",
    "end": "828199"
  },
  {
    "text": "this development scenario uh we we already had the compiler structured with entirely separate code paths for these",
    "start": "828199",
    "end": "834600"
  },
  {
    "text": "and what we eventually what we noticed was the the development side of this is much better for the reppel use casee",
    "start": "834600",
    "end": "840240"
  },
  {
    "text": "because you're only going to run the code uh one time because the next input line we're going to have a new program",
    "start": "840240",
    "end": "846320"
  },
  {
    "text": "we're going to compile that again so the first thing we can do then is use the",
    "start": "846320",
    "end": "853040"
  },
  {
    "text": "development uh code path for uh for the reppel um so we don't really need the",
    "start": "853040",
    "end": "859160"
  },
  {
    "text": "production side and we don't need the Intel um output and we don't need the arm",
    "start": "859160",
    "end": "864480"
  },
  {
    "text": "output so the way we went about slimming down the um the page size was to create",
    "start": "864480",
    "end": "871560"
  },
  {
    "text": "an alternative entry point into the into the compiler when I say entry point I just mean what you would usually call a main function um so for the standard",
    "start": "871560",
    "end": "879639"
  },
  {
    "text": "build of the compiler it's a command line tool so you're you know typing in the name of the file you want to compile",
    "start": "879639",
    "end": "884720"
  },
  {
    "text": "and stuff like that with some options maybe um that's made up of a lot of",
    "start": "884720",
    "end": "890800"
  },
  {
    "text": "internal packages so we have some structure inside of the compiler where it's a it it has a bunch of internal",
    "start": "890800",
    "end": "896519"
  },
  {
    "text": "packages which are rust called crates and rust um and the entry point is in the CLI",
    "start": "896519",
    "end": "902920"
  },
  {
    "text": "package so that's the one that's interpreting your command line options um and it's the one that Imports",
    "start": "902920",
    "end": "908240"
  },
  {
    "text": "everything else and sort of glues them together for the web reppel what we did",
    "start": "908240",
    "end": "913920"
  },
  {
    "text": "was just create a brand new entry point we just forget about the CLI because there's no command line interface on the",
    "start": "913920",
    "end": "919920"
  },
  {
    "text": "web anyway so there's no way there's no need to be interpreting you know what minus minus ver Bose or whatever um so",
    "start": "919920",
    "end": "927639"
  },
  {
    "text": "we just created a new entry uh completely and import only the packages or internal packages and",
    "start": "927639",
    "end": "933560"
  },
  {
    "text": "external packages that we actually need for this web repple uh scenario so there's no command line interface as I",
    "start": "933560",
    "end": "939440"
  },
  {
    "text": "said and none of this optimization stuff um no Intel output or arm output just",
    "start": "939440",
    "end": "945639"
  },
  {
    "text": "only web assembly and that um enabled us to make",
    "start": "945639",
    "end": "950720"
  },
  {
    "text": "a kind of size optimized build for this for for the web repple by removing all the code we don't need and we got down",
    "start": "950720",
    "end": "956279"
  },
  {
    "text": "all the way to 6 megabytes uh of uncompress web assembly and then we can shrink that",
    "start": "956279",
    "end": "961480"
  },
  {
    "text": "down again using uh compression uh we use brle compression which is kind of",
    "start": "961480",
    "end": "966800"
  },
  {
    "text": "like gzip but more aggressive and uh yeah we got it down to 2 megabytes which",
    "start": "966800",
    "end": "973040"
  },
  {
    "text": "is a chunky enough web page but it's acceptable uh so",
    "start": "973040",
    "end": "979240"
  },
  {
    "text": "uh yeah all right so um the next challenges uh are coming from web",
    "start": "979240",
    "end": "985920"
  },
  {
    "start": "980000",
    "end": "1125000"
  },
  {
    "text": "assembly limitations when I say wasm I mean web assembly just an abbreviation um yeah so I mentioned",
    "start": "985920",
    "end": "993519"
  },
  {
    "text": "these a little bit earlier just to remind ourselves can't listen for user input uh only only understands numbers",
    "start": "993519",
    "end": "999680"
  },
  {
    "text": "and can't modify the HTML page and so on um to understand uh this a bit uh to get",
    "start": "999680",
    "end": "1006800"
  },
  {
    "text": "a better picture for for what this restricts you from doing uh it's good to understand what or to remind ourselves",
    "start": "1006800",
    "end": "1012800"
  },
  {
    "text": "what web apis are so web apis are the JavaScript functions that are built into the browser they're part of theow are",
    "start": "1012800",
    "end": "1019279"
  },
  {
    "text": "not really part of the JavaScript language as such but they're actually what make JavaScript useful in the first",
    "start": "1019279",
    "end": "1024438"
  },
  {
    "text": "place there's about 120 of these apis and web assembly can't access any",
    "start": "1024439",
    "end": "1030678"
  },
  {
    "text": "of them and that's important um so just what do I mean by",
    "start": "1030679",
    "end": "1036240"
  },
  {
    "text": "apis well it's all of the stuff you you you've used these uh you all put up your hands as as web developers so you've",
    "start": "1036240",
    "end": "1042760"
  },
  {
    "text": "definitely use this stuff uh one of the the most famous API uh web API is the document object model the D",
    "start": "1042760",
    "end": "1049600"
  },
  {
    "text": "uh which lets you insert text into the HTML and listen for user input and stuff like that so you'll recognize get",
    "start": "1049600",
    "end": "1054679"
  },
  {
    "text": "element by ID probably um there's no equivalent to this in web",
    "start": "1054679",
    "end": "1061799"
  },
  {
    "text": "assembly and similarly for the fetch API which lets you make HTTP requests and uh",
    "start": "1061799",
    "end": "1067200"
  },
  {
    "text": "interact with the browser to do that and again there's no equivalent of that in web assembly you just can't do it and",
    "start": "1067200",
    "end": "1073960"
  },
  {
    "text": "this goes on right I just I won't go through them all but this is me scrolling through the m Mozilla",
    "start": "1073960",
    "end": "1079960"
  },
  {
    "text": "documentation for all of the apis there's tons of them and um you know",
    "start": "1079960",
    "end": "1085159"
  },
  {
    "text": "same thing for all of them there's no web assembly equivalent so the implications of",
    "start": "1085159",
    "end": "1091559"
  },
  {
    "text": "that is that although you can kind of run any language you like in the browser now it does have to be restricted to",
    "start": "1091559",
    "end": "1100000"
  },
  {
    "text": "basically just data Transformations you take data in one format and you turn it into another format and you spit it out",
    "start": "1100000",
    "end": "1106000"
  },
  {
    "text": "the other side um and if you need to do things like IO or uh using anything",
    "start": "1106000",
    "end": "1113280"
  },
  {
    "text": "that's built into the the browser you need JavaScript um so you",
    "start": "1113280",
    "end": "1119120"
  },
  {
    "text": "can have any language you want in the browser but you also need to have JavaScript working with it in order to",
    "start": "1119120",
    "end": "1125080"
  },
  {
    "start": "1125000",
    "end": "1193000"
  },
  {
    "text": "access all of this useful stuff so let's look at how we use",
    "start": "1125080",
    "end": "1131600"
  },
  {
    "text": "those um and before we do we'll see well where where do we need them for this particular project that we're uh using",
    "start": "1131600",
    "end": "1137720"
  },
  {
    "text": "as our example where do we need web apis well we need them for this is the same diagram I",
    "start": "1137720",
    "end": "1142919"
  },
  {
    "text": "showed earlier on we need them for receiving the input we don't really need",
    "start": "1142919",
    "end": "1148640"
  },
  {
    "text": "need it for parsing or type checking or specializing they're all just data Transformations or generating web",
    "start": "1148640",
    "end": "1154159"
  },
  {
    "text": "assembly um we do need it to evaluate the web assembly because all we get out",
    "start": "1154159",
    "end": "1159200"
  },
  {
    "text": "of here is just some btes and we can't we can't run those um turning that into",
    "start": "1159200",
    "end": "1164600"
  },
  {
    "text": "a string we don't need it for that but we do need it for displaying the output on the screen",
    "start": "1164600",
    "end": "1170720"
  },
  {
    "text": "okay so let's just take that I'm going to take that diagram and just rearrange it a little bit and show it kind of",
    "start": "1170880",
    "end": "1176679"
  },
  {
    "text": "flowing uh flowing downwards um I've squished a few of those boxes into one here compile because lots of them are",
    "start": "1176679",
    "end": "1183240"
  },
  {
    "text": "just data Transformations and we're not going to focus on those anymore um so we need our Dom API at both ends and we",
    "start": "1183240",
    "end": "1189240"
  },
  {
    "text": "need a web web web assembly API in the middle so yeah let's start from the",
    "start": "1189240",
    "end": "1195640"
  },
  {
    "start": "1193000",
    "end": "1287000"
  },
  {
    "text": "beginning and talk about receiving input um which web assembly can't do so if web",
    "start": "1195640",
    "end": "1202120"
  },
  {
    "text": "assembly can't do it then we need to get JavaScript to do it so we'll receive our",
    "start": "1202120",
    "end": "1207480"
  },
  {
    "text": "input string from the user remember I was typing some code into this uh web page we'll receive their input in",
    "start": "1207480",
    "end": "1214080"
  },
  {
    "text": "JavaScript and then call some web assembly functions and then we can do our compile evaluate etc",
    "start": "1214080",
    "end": "1219799"
  },
  {
    "text": "etc um I'm going to explain how all of this works using these kind of box flow",
    "start": "1219799",
    "end": "1225159"
  },
  {
    "text": "diagrams uh the ones with the yellow background are JavaScript and the ones",
    "start": "1225159",
    "end": "1230440"
  },
  {
    "text": "with the darker blue background are web assembly and uh yeah things on the left",
    "start": "1230440",
    "end": "1235520"
  },
  {
    "text": "are calling things on the right so these kind of represent functions or chunks of",
    "start": "1235520",
    "end": "1241480"
  },
  {
    "text": "code but let's look at some actual code for how that would work so this is the",
    "start": "1241640",
    "end": "1247919"
  },
  {
    "text": "uh the rock reppel that I was using earlier on um and some simple JavaScript",
    "start": "1247919",
    "end": "1253280"
  },
  {
    "text": "code to listen for changes on that would be grab the element by its ID and add an",
    "start": "1253280",
    "end": "1258960"
  },
  {
    "text": "event listener and here's our event listener function on input change and it's able to grab the text from that",
    "start": "1258960",
    "end": "1265520"
  },
  {
    "text": "input and call this thing called entrypoint from JS uh which is as the name kind of",
    "start": "1265520",
    "end": "1273240"
  },
  {
    "text": "suggests is a web assembly function uh or actually a wrapper around an a web assembly function that we're calling",
    "start": "1273240",
    "end": "1279120"
  },
  {
    "text": "from JavaScript uh there's a to-do here because we need to finish this code off",
    "start": "1279120",
    "end": "1284159"
  },
  {
    "text": "I'm hiding some some bits for later um",
    "start": "1284159",
    "end": "1290159"
  },
  {
    "start": "1287000",
    "end": "1503000"
  },
  {
    "text": "so one of the limitations that I mentioned earlier was that that web assembly can only understand JavaScript",
    "start": "1290159",
    "end": "1296480"
  },
  {
    "text": "numbers it doesn't actually understand uh JavaScript strings or objects or arrays or anything but on the",
    "start": "1296480",
    "end": "1303720"
  },
  {
    "text": "last slide I just said I was passing a string from JavaScript into web assembly so how does that",
    "start": "1303720",
    "end": "1309440"
  },
  {
    "text": "work um well first of all just to get some background the way that JavaScript and web assembly interoperate together",
    "start": "1309440",
    "end": "1317080"
  },
  {
    "text": "um is that uh they use the fact that they build on top of the fact that JavaScript engines use",
    "start": "1317080",
    "end": "1323640"
  },
  {
    "text": "just in time compilation for JavaScript and that means that hot functions which are just functions that you call a lot",
    "start": "1323640",
    "end": "1329919"
  },
  {
    "text": "maybe thousands of times um get compiled down inside the browser engine into this into an",
    "start": "1329919",
    "end": "1335960"
  },
  {
    "text": "optimized form it's just down to machine code um it takes thousands of calls for a function to be considered warmed up",
    "start": "1335960",
    "end": "1342240"
  },
  {
    "text": "enough to for this to happen but it does happen and web assembly essentially uses",
    "start": "1342240",
    "end": "1348080"
  },
  {
    "text": "that and and just bypasses all of that warm-up stuff and compiles straight into this optimized format so it looks just",
    "start": "1348080",
    "end": "1355039"
  },
  {
    "text": "like a JavaScript function that you've called thousands and thousands of times so the run time kind of sees them as the",
    "start": "1355039",
    "end": "1361320"
  },
  {
    "text": "same and that's how the two can work together um and so to do interrupt you",
    "start": "1361320",
    "end": "1368400"
  },
  {
    "text": "can do function calls both ways um but the arguments have to be numbers and uh",
    "start": "1368400",
    "end": "1374039"
  },
  {
    "text": "the return value has to be a number if you have a return value um so this is again because it's comp it's it's this",
    "start": "1374039",
    "end": "1380520"
  },
  {
    "text": "low-level um interface between the two there is some shared memory though",
    "start": "1380520",
    "end": "1386000"
  },
  {
    "text": "between the two so the JavaScript uh sorry the web assembly uh instance has a",
    "start": "1386000",
    "end": "1392400"
  },
  {
    "text": "memory and JavaScript can see that and it can write into it sees it just as an array of numbers so you can read it and write into that array of numbers and",
    "start": "1392400",
    "end": "1398880"
  },
  {
    "text": "it's web assembly's memory so that's how you pass data structures by the way that",
    "start": "1398880",
    "end": "1404760"
  },
  {
    "text": "only works one way the the the web assembly stuff can't see any JavaScript objects or can't look inside them it's",
    "start": "1404760",
    "end": "1411600"
  },
  {
    "text": "uh but JavaScript can look inside web assemblies memory so let's look at an example of",
    "start": "1411600",
    "end": "1419919"
  },
  {
    "text": "what this means for something relatively straightforward like passing a string um which is what we need to do now uh",
    "start": "1419919",
    "end": "1426320"
  },
  {
    "text": "passing a string from uh JavaScript into web assembly so I mentioned earlier this",
    "start": "1426320",
    "end": "1431480"
  },
  {
    "text": "entry point from JS and that it was a wrapper around uh a web assembly um",
    "start": "1431480",
    "end": "1437080"
  },
  {
    "text": "function and this this is uh what it looks like so we're receiving a uh",
    "start": "1437080",
    "end": "1444039"
  },
  {
    "text": "JavaScript string and we need to encode that into something that web assembly can understand so we need to uh",
    "start": "1444039",
    "end": "1449799"
  },
  {
    "text": "JavaScript has this one of the many web apis uh is text encoder you can grab a text encoder and pass a string into it",
    "start": "1449799",
    "end": "1457279"
  },
  {
    "text": "and it'll give you back the bytes that that encodes into um in utf8 then we're going to allocate some",
    "start": "1457279",
    "end": "1464360"
  },
  {
    "text": "memory space inside of the web assembly module um because it needs to make sure that we don't overwrite anything else",
    "start": "1464360",
    "end": "1471039"
  },
  {
    "text": "that's going on inside that memory um so we tell it how many bytes we want it'll tell us where to put that what index to",
    "start": "1471039",
    "end": "1477039"
  },
  {
    "text": "put it at in the array um and then we can work out um we work out the end",
    "start": "1477039",
    "end": "1482760"
  },
  {
    "text": "index start index and the end index and we set those equal to oops the bytes that we",
    "start": "1482760",
    "end": "1488240"
  },
  {
    "text": "had and then we're ready to call the real uh web assembly function so that's wm. entrypoint from JS um we can call",
    "start": "1488240",
    "end": "1496159"
  },
  {
    "text": "that with two numbers now because we've written all the bytes into memory and now we just need to say where they are",
    "start": "1496159",
    "end": "1501240"
  },
  {
    "text": "here's the start and here's how long it is okay cool so we got some input um and",
    "start": "1501240",
    "end": "1507480"
  },
  {
    "start": "1503000",
    "end": "1740000"
  },
  {
    "text": "let's look at how we do the other way it's displaying output uh now we said earlier uh web assembly can't modify the",
    "start": "1507480",
    "end": "1514279"
  },
  {
    "text": "HTML page so again we're going to need to take this display output piece and",
    "start": "1514279",
    "end": "1520039"
  },
  {
    "text": "move it from the web assembly side to the JavaScript site and this is something like how that",
    "start": "1520039",
    "end": "1528120"
  },
  {
    "text": "might look so here's the on input change function that we looked at earlier we",
    "start": "1528120",
    "end": "1533600"
  },
  {
    "text": "are again still just uh grabbing the input string the input text um from the",
    "start": "1533600",
    "end": "1539000"
  },
  {
    "text": "event calling our uh wrapped uh entry point with the text um getting some text",
    "start": "1539000",
    "end": "1545240"
  },
  {
    "text": "back and just shoving that into the inner HTML of of some output element",
    "start": "1545240",
    "end": "1550520"
  },
  {
    "text": "that we've uh that we've got on our uh display area here and so how do we return uh a string",
    "start": "1550520",
    "end": "1559159"
  },
  {
    "text": "from web assembly to JavaScript again things can only return numbers and again",
    "start": "1559159",
    "end": "1564279"
  },
  {
    "text": "we're using this shared memory so um the way that this actually works um in this",
    "start": "1564279",
    "end": "1570120"
  },
  {
    "text": "project I used a a code generation Tool uh that we'll talk about again later um wasm bind gen it's",
    "start": "1570120",
    "end": "1576600"
  },
  {
    "text": "called um and this is how how it implements that so uh the there is a",
    "start": "1576600",
    "end": "1583320"
  },
  {
    "text": "helper function in JavaScript that gets called from web assembly with a pointer",
    "start": "1583320",
    "end": "1588360"
  },
  {
    "text": "a length so I uh that's like a binary representation of a string you just got a pointer for where it is and how long",
    "start": "1588360",
    "end": "1593799"
  },
  {
    "text": "it is um we can then grab those bytes uh",
    "start": "1593799",
    "end": "1599480"
  },
  {
    "text": "based on that pointer in length and decode them so it's just the exact reverse of what we did earlier um make a",
    "start": "1599480",
    "end": "1605640"
  },
  {
    "text": "decoder call decoder decode and get a string um and the way this works from",
    "start": "1605640",
    "end": "1611799"
  },
  {
    "text": "here is so this is being called from web assembly it creates that uh JavaScript string like this and then insert inserts",
    "start": "1611799",
    "end": "1618480"
  },
  {
    "text": "it into a global array that's like actually a they actually call it a heap",
    "start": "1618480",
    "end": "1624039"
  },
  {
    "text": "um push it in there and get a an index from it because we now have to return",
    "start": "1624039",
    "end": "1629520"
  },
  {
    "text": "back into web assembly and back out to JavaScript again and we can only pass a number so it seems super complicated and",
    "start": "1629520",
    "end": "1636240"
  },
  {
    "text": "it kind of is but this is a general enough mechanism that lets you create any uh JavaScript object",
    "start": "1636240",
    "end": "1643960"
  },
  {
    "text": "um uh yeah and uh just refer to it using a number as an",
    "start": "1643960",
    "end": "1651000"
  },
  {
    "text": "index um and so our rust code calls this uh that helper before it returns back",
    "start": "1651000",
    "end": "1657120"
  },
  {
    "text": "out to JavaScript so it's um this create JavaScript string here at the at the bottom is is what's being called so this",
    "start": "1657120",
    "end": "1664559"
  },
  {
    "text": "is our entry point from JavaScript that's inside the rust module it's taking the input pointer and input",
    "start": "1664559",
    "end": "1670440"
  },
  {
    "text": "length um making a string out of that um evaluate compile and evaluate and",
    "start": "1670440",
    "end": "1676240"
  },
  {
    "text": "stringify the input so that gives us an output split that into a pointer and and",
    "start": "1676240",
    "end": "1681480"
  },
  {
    "text": "length again create the JavaScript string and uh put it into this Global array and get the index",
    "start": "1681480",
    "end": "1688679"
  },
  {
    "text": "back so it's kind of a lot um so this is what this is how it works to return a",
    "start": "1688679",
    "end": "1695600"
  },
  {
    "text": "string so we've and this is it in kind of more pictorial form so we've stringified the thing we made a",
    "start": "1695600",
    "end": "1701799"
  },
  {
    "text": "JavaScript in a Glo uh string in a global array returned the index back got it out again and displayed it okay so",
    "start": "1701799",
    "end": "1709360"
  },
  {
    "text": "that's kind of a lot of Hassle and this is why you use code generation so uh this glue code is actually generated by",
    "start": "1709360",
    "end": "1715440"
  },
  {
    "text": "this package I mentioned called wasm bingen which is a rust um specific thing other languages have similar sort of",
    "start": "1715440",
    "end": "1722519"
  },
  {
    "text": "stuff um so the handwritten rust that we actually write does just deal with strings it takes a string in and returns",
    "start": "1722519",
    "end": "1729120"
  },
  {
    "text": "a string back um there's a link there for ASM b b Jen so we can use this kind of more",
    "start": "1729120",
    "end": "1736039"
  },
  {
    "text": "simplified model um of uh just working with",
    "start": "1736039",
    "end": "1741159"
  },
  {
    "start": "1740000",
    "end": "2096000"
  },
  {
    "text": "strings okay um so the trickier part is going to be evaluating the user's",
    "start": "1741159",
    "end": "1748519"
  },
  {
    "text": "code and again we have a web assembly limitation that we need to deal with which is that we can't actually run web",
    "start": "1749159",
    "end": "1755640"
  },
  {
    "text": "assembly from inside other web assembly um but that's what we need to do we need to uh take this X Plus Y and",
    "start": "1755640",
    "end": "1763279"
  },
  {
    "text": "somehow run it so we can take our X our string and the compiler will turn it",
    "start": "1763279",
    "end": "1769120"
  },
  {
    "text": "into an array of bytes um now normally a compiler would get an array of bytes and just write",
    "start": "1769120",
    "end": "1776519"
  },
  {
    "text": "that into a file and then that's your um that's your compiled uh binary um but we",
    "start": "1776519",
    "end": "1782200"
  },
  {
    "text": "don't want to write into a file we don't have a file system we're we're in a web page so we need to evalu we just",
    "start": "1782200",
    "end": "1788720"
  },
  {
    "text": "evaluate those bytes but they're not in a format that's runable right now and so that evaluate step actually splits into",
    "start": "1788720",
    "end": "1796159"
  },
  {
    "text": "two smaller steps um one of which is called instantiate and one is run the",
    "start": "1796159",
    "end": "1801919"
  },
  {
    "text": "user code and so what instantiate means um is you take an array of bytes that's",
    "start": "1801919",
    "end": "1807799"
  },
  {
    "text": "just numbers and you turn it into an executable web assembly instance and",
    "start": "1807799",
    "end": "1813279"
  },
  {
    "text": "that does require um one of these web apis that I mentioned and then once we",
    "start": "1813279",
    "end": "1818600"
  },
  {
    "text": "have an executable instance we can actually run the user code and stringify it and display",
    "start": "1818600",
    "end": "1823919"
  },
  {
    "text": "it so instantiate um is yeah just creating an instance so we there's a",
    "start": "1823919",
    "end": "1830440"
  },
  {
    "text": "this is one of the um one of the uh functions that are built into the browser that you can call you give it",
    "start": "1830440",
    "end": "1835480"
  },
  {
    "text": "some bytes which are the web assembly binary format you give it an object with some call back functions in it so if you",
    "start": "1835480",
    "end": "1841880"
  },
  {
    "text": "want your web assembly to call back out to JavaScript you put them into the into",
    "start": "1841880",
    "end": "1847080"
  },
  {
    "text": "an object which lets you give them all names they they have like the keys are are strings and the and the values are",
    "start": "1847080",
    "end": "1853880"
  },
  {
    "text": "functions so it can call them so what happens when you do this is it takes",
    "start": "1853880",
    "end": "1858919"
  },
  {
    "text": "those bytes and loads them into the virtual machine in the browser engine um and uh yeah that makes it runnable so it",
    "start": "1858919",
    "end": "1866320"
  },
  {
    "text": "then turns it into that uh shared low-level format that we discussed and you what you get back is a web assembly",
    "start": "1866320",
    "end": "1871880"
  },
  {
    "text": "instance which uh contains web assembly functions that you can call from",
    "start": "1871880",
    "end": "1877480"
  },
  {
    "text": "JavaScript so we're now going to go a little deeper right so this this is this is as far as it goes but we have created",
    "start": "1877480",
    "end": "1884760"
  },
  {
    "text": "a JavaScript application that calls into some web assembly but that's a compiler",
    "start": "1884760",
    "end": "1890720"
  },
  {
    "text": "and it's going to need to make more web assembly so we're now going to have to call some JavaScript that makes more web",
    "start": "1890720",
    "end": "1897720"
  },
  {
    "text": "assembly and this is a more clear picture of what that looks like so uh",
    "start": "1897720",
    "end": "1903279"
  },
  {
    "text": "there's our top level JavaScript receiving the input and displaying the output calling into the compiler web",
    "start": "1903279",
    "end": "1909919"
  },
  {
    "text": "assembly which does the compiling and stringifying and within that it's going",
    "start": "1909919",
    "end": "1915679"
  },
  {
    "text": "to call down again into some Java script and that's going to instantiate and run our user code then we have to create a",
    "start": "1915679",
    "end": "1923200"
  },
  {
    "text": "new web assembly module that is the user's code run it and pass the answer all the way back okay so if you thought",
    "start": "1923200",
    "end": "1931039"
  },
  {
    "text": "that was bad we've got to go one more step this is as complicated as it gets",
    "start": "1931039",
    "end": "1936360"
  },
  {
    "text": "so just to give you an idea of the kind of things you can run into doing a project like this for real that is what",
    "start": "1936360",
    "end": "1941480"
  },
  {
    "text": "we're here to talk about so that call back I showed that as one call back on the previous",
    "start": "1941480",
    "end": "1946600"
  },
  {
    "text": "slide but actually it ended up being three callbacks and I'm going to explain why um so first of all uh we ran into a",
    "start": "1946600",
    "end": "1958039"
  },
  {
    "text": "minor issue with async so the that instantiate function that I showed",
    "start": "1958039",
    "end": "1963279"
  },
  {
    "text": "earlier on web assembly instantiate is actually async and if you've ever worked in any language that has async and a",
    "start": "1963279",
    "end": "1969639"
  },
  {
    "text": "weight uh you've probably found that one of the things that happens is once you make something async then all its colors",
    "start": "1969639",
    "end": "1976480"
  },
  {
    "text": "become async too all the way up the call stack and that's true here too so this",
    "start": "1976480",
    "end": "1982200"
  },
  {
    "text": "instantiate is async which means that the rust function that calls it to compile it is also has to be async um",
    "start": "1982200",
    "end": "1990440"
  },
  {
    "text": "and the uh receiver um what you call event listener uh at the top level has",
    "start": "1990440",
    "end": "1996799"
  },
  {
    "text": "to be async 2 now there was some code in shared code in here that we are actually sharing",
    "start": "1996799",
    "end": "2003200"
  },
  {
    "text": "between the terminal CLI reppel and the web reel",
    "start": "2003200",
    "end": "2008600"
  },
  {
    "text": "and we just didn't really want to make that async all the way up because which is what would happen if this run user",
    "start": "2008600",
    "end": "2014279"
  },
  {
    "text": "code and instantiate were stuck together then some of this would have to be async 2 um now we could have done that I it",
    "start": "2014279",
    "end": "2022880"
  },
  {
    "text": "just seemed easier to spit the function though so so that's what I did",
    "start": "2022880",
    "end": "2028840"
  },
  {
    "text": "um the and so async interaction between um rust and JavaScript uh again a lot of",
    "start": "2028840",
    "end": "2037120"
  },
  {
    "text": "that is helped by uh this uh code generation Library wasm bind gen which can tie together rust Futures and",
    "start": "2037120",
    "end": "2043000"
  },
  {
    "text": "JavaScript promises which are you know conceptually the same sort of",
    "start": "2043000",
    "end": "2048600"
  },
  {
    "text": "thing um and then the last complication was the um when we get the result of the",
    "start": "2049240",
    "end": "2054960"
  },
  {
    "text": "US running the user's code we've no way of knowing in advance what size that's going to be we don't know how many bytes",
    "start": "2054960",
    "end": "2060960"
  },
  {
    "text": "it's going to be so that means it's it's It's tricky to send it back to the compiler without doing an extra step we",
    "start": "2060960",
    "end": "2067878"
  },
  {
    "text": "need this extra call back to do that so we had to return back um run the user code return back with a a result that",
    "start": "2067879",
    "end": "2076118"
  },
  {
    "text": "says here's how big the result is um in you know a number of bytes or kilobytes or whatever um then Reserve that much",
    "start": "2076119",
    "end": "2083440"
  },
  {
    "text": "space copy the memory from the user code's web assembly module to the compiler's web assembly module so that",
    "start": "2083440",
    "end": "2089960"
  },
  {
    "text": "it can analyze it figure out how to turn it into a string and then display it and",
    "start": "2089960",
    "end": "2095440"
  },
  {
    "text": "we're done okay so uh so just to summarize what we've uh",
    "start": "2095440",
    "end": "2101240"
  },
  {
    "start": "2096000",
    "end": "2214000"
  },
  {
    "text": "what we've looked at um we got a major architecture Advantage out of using web assembly",
    "start": "2101240",
    "end": "2107800"
  },
  {
    "text": "we've got no servers to manage and that means no open source contributors getting beat in the middle of the night",
    "start": "2107800",
    "end": "2113800"
  },
  {
    "text": "uh we reduced the download size to make it fit into a web page in a reasonable sort of size um and to do that we made a",
    "start": "2113800",
    "end": "2120560"
  },
  {
    "text": "dedicated entry point that's separate from our command line one and removed the subsystems that we didn't need um",
    "start": "2120560",
    "end": "2127320"
  },
  {
    "text": "and I I think we we talked in detail about how that worked for our compiler project but I think the general point of",
    "start": "2127320",
    "end": "2133280"
  },
  {
    "text": "make a dedicated entry point and remove the subsystems you don't need I think that applies to other projects",
    "start": "2133280",
    "end": "2140000"
  },
  {
    "text": "too um we also talked about how you always need JavaScript uh you can't get away without it even if you're mainly",
    "start": "2140000",
    "end": "2146079"
  },
  {
    "text": "using another language um so for things like HTML input and display um in our",
    "start": "2146079",
    "end": "2152000"
  },
  {
    "text": "case for creating the the user codes web assembly module um but again if in your",
    "start": "2152000",
    "end": "2157720"
  },
  {
    "text": "project that might be something else because there's 118 other apis that you you might need to use uh in the",
    "start": "2157720",
    "end": "2163640"
  },
  {
    "text": "browser and we also talked about JavaScript and web assembly interrup um and how the engine treats web assembly a",
    "start": "2163640",
    "end": "2170680"
  },
  {
    "text": "little bit like optimized JavaScript functions um there's a very low-level API between JavaScript and web assembly",
    "start": "2170680",
    "end": "2177760"
  },
  {
    "text": "it's all just numbers and shared memory and so that means that code generation is your friend for things like strings",
    "start": "2177760",
    "end": "2184880"
  },
  {
    "text": "and async and lots of other stuff and yeah I think it's fairly common in a",
    "start": "2184880",
    "end": "2192240"
  },
  {
    "text": "project like this to have to reorganize um how your code is structured in order to work around the relatively limited um",
    "start": "2192240",
    "end": "2199839"
  },
  {
    "text": "interface between the two worlds and that's uh that's the talk so",
    "start": "2199839",
    "end": "2206040"
  },
  {
    "text": "uh there's some links here um which will the slides will be sent out afterwards um these are some links to the project",
    "start": "2206040",
    "end": "2212480"
  },
  {
    "text": "and uh and some of the source code and um yeah don't forget to write the session",
    "start": "2212480",
    "end": "2218240"
  },
  {
    "start": "2214000",
    "end": "2235000"
  },
  {
    "text": "thank [Applause]",
    "start": "2218240",
    "end": "2225308"
  },
  {
    "text": "you",
    "start": "2233119",
    "end": "2236119"
  }
]