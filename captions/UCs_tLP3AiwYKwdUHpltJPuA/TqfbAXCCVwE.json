[
  {
    "start": "0",
    "end": "77000"
  },
  {
    "text": "Hello, so yeah, I hope you guys have some energy left for the last breakout session.",
    "start": "17800",
    "end": "23430"
  },
  {
    "text": "My name is Monica. And for the last five years I was working at sum up which is a FinTech company based here in Berlin and",
    "start": "24130",
    "end": "31589"
  },
  {
    "text": "a lot of what I'm going to talk about today is based on my experience working there growing the company from",
    "start": "31960",
    "end": "37860"
  },
  {
    "text": "About 80 people to more than 1,500 people worldwide So we're gonna dive a little bit into what that looks like when it comes to scaling front-end architecture for a team",
    "start": "38170",
    "end": "48719"
  },
  {
    "text": "that is both distributed and growing. But before I go into that I want to ask a question and that is",
    "start": "48720",
    "end": "56309"
  },
  {
    "text": "Why do we rewrite software? I don't know about you. But there are pieces of code that I have written so many times , then I told the product manager",
    "start": "56830",
    "end": "67319"
  },
  {
    "text": "I will quit if you make me do it again. All right. I don't know maybe some of you can relate to that.",
    "start": "67320",
    "end": "72509"
  },
  {
    "text": "I think there's not just one reason why we end up rewriting software. In fact, There's a ton of different reasons and to illustrate one of these",
    "start": "72510",
    "end": "80909"
  },
  {
    "start": "77000",
    "end": "237000"
  },
  {
    "text": "I want to tell you about my first ever job in tech. I was 19 years old my job title was",
    "start": "80909",
    "end": "87449"
  },
  {
    "text": "student webmaster, which is a pretty awesome job title when you think about it because you get to be both a student and a master at",
    "start": "88240",
    "end": "96779"
  },
  {
    "text": "the same time I think it's a lot cooler than senior engineer or whatever it is. We call nineteen-year-olds these days",
    "start": "96780",
    "end": "103409"
  },
  {
    "text": "now when I was working as a student webmaster I was there to write",
    "start": "104200",
    "end": "111118"
  },
  {
    "text": "PHP and my sequel which I had been teaching myself in my childhood bedroom for the last couple of years",
    "start": "111579",
    "end": "118019"
  },
  {
    "text": "So when they asked me how much experience do you have? I thought I had four or five years of good experience",
    "start": "118020",
    "end": "123178"
  },
  {
    "text": "anyways, so I joined and I inherited the code from the previous student webmaster and",
    "start": "124119",
    "end": "129869"
  },
  {
    "text": "When I looked at this code, it was not exactly what I was expecting to find it was written in",
    "start": "130929",
    "end": "136739"
  },
  {
    "text": "object-oriented PHP But the kind of PHP that I know how to write was basically like HTML templates with a couple of sequel queries thrown in there, so",
    "start": "137620",
    "end": "146960"
  },
  {
    "text": "Yeah, I didn't really know what to do with it So like any good developer ,I decided to rewrite it.",
    "start": "147720",
    "end": "154820"
  },
  {
    "text": "Why because I didn't understand what was going on and frankly I didn't really have the maturity to figure it out spend the time and in reality",
    "start": "155160",
    "end": "163339"
  },
  {
    "text": "I think a lot of software gets rewritten for this reason comes down to inexperience You just don't want to spend the time to understand someone else's code and frankly, It's a lot of work",
    "start": "163340",
    "end": "173179"
  },
  {
    "text": "Another big reason why code just gets rewritten is because well, it's fun I mean, I don't know about you",
    "start": "174510",
    "end": "181220"
  },
  {
    "text": "But I spent every  Christmas giving my statically generated blog a new theme why not because I need it",
    "start": "181220",
    "end": "187999"
  },
  {
    "text": "But because it's fun I have the time and I think if we were honest with ourselves There is probably a good amount of product code. That is also rewritten for exactly this reason",
    "start": "188010",
    "end": "196489"
  },
  {
    "text": "Sometimes It's because we have a better solution available Especially on the web. We are often hacking our way around the platform and",
    "start": "198209",
    "end": "206239"
  },
  {
    "text": "Sometimes eventually the platform gives back and then we get to replace our homebrewed solutions with something",
    "start": "206790",
    "end": "213769"
  },
  {
    "text": "That is finally native but the reason we usually rewrite code in my experience is",
    "start": "213769",
    "end": "219860"
  },
  {
    "text": "Another reason entirely when you ask a developer who's in the middle of a big rewrite They will usually give you this reason for why their project",
    "start": "221580",
    "end": "230089"
  },
  {
    "text": "absolutely couldn't wait any longer and That's technical debt.",
    "start": "230660",
    "end": "235940"
  },
  {
    "start": "237000",
    "end": "309000"
  },
  {
    "text": "Technical debt is one of my favorite terms in software development. Why? Because you can ask every single person in this room what is technical debt and they will tell you something different.",
    "start": "237180",
    "end": "246589"
  },
  {
    "text": "Is it code I didn't write? Oftentimes sometimes you know technical debt kind of tends to boil down to that.",
    "start": "247470",
    "end": "254689"
  },
  {
    "text": "Or if you've been working at the same company for a while, It is code I wrote before I knew what I was doing. I",
    "start": "255209",
    "end": "262609"
  },
  {
    "text": "Can tell you I have got a lot of that. Is it things like old libraries? I don't know you want to upgrade in the front-end. We love upgrading things",
    "start": "263700",
    "end": "275059"
  },
  {
    "text": "and maybe those libraries are keeping you from using some new features or",
    "start": "275690",
    "end": "280309"
  },
  {
    "text": "is it features no one uses because Migration is the name of the game in front-end development",
    "start": "281010",
    "end": "286639"
  },
  {
    "text": "If you're not migrating something right now you are behind so if you have features that nobody uses you have to migrate them",
    "start": "286640",
    "end": "293239"
  },
  {
    "text": "Which is kind of terrible and yeah, you could say it makes you slower so if I were to come up with my own definition",
    "start": "293240",
    "end": "299610"
  },
  {
    "text": "It would look something like this code that negatively and repeatedly affects the speed or quality of delivery",
    "start": "299610",
    "end": "305388"
  },
  {
    "text": "can be code tools infrastructure, whatever and We know what it looks like, right? You start building something. It's super fast. You think this is amazing. It's green field",
    "start": "305700",
    "end": "315919"
  },
  {
    "text": "I'm so happy This is why I'm a developer And then over time your productivity",
    "start": "316040",
    "end": "320779"
  },
  {
    "text": "Slides right down to the bottom and you wonder how did this happen to me?",
    "start": "321180",
    "end": "326479"
  },
  {
    "text": "but what I've also seen is that sometimes this effect occurs and then the developer gets to a point where",
    "start": "327450",
    "end": "334960"
  },
  {
    "text": "  They can't take it anymore. And they tell the product manager or the tech lead or whoever it is",
    "start": "334960",
    "end": "340819"
  },
  {
    "text": "Like you're not gonna retain me if you don't let me do my refactor So you take a sprint or two and you start refactoring!",
    "start": "341910",
    "end": "350299"
  },
  {
    "text": "but unfortunately, what often happens is that you could slide right back down and why is that I",
    "start": "350970",
    "end": "358609"
  },
  {
    "text": "Like to think about this as recurring technical debt or technical debt on a subscription model",
    "start": "360030",
    "end": "366380"
  },
  {
    "text": "it's like I Can't figure out how to cancel my technical debt subscription and I'm getting charged for it on a regular basis",
    "start": "366630",
    "end": "374659"
  },
  {
    "start": "375000",
    "end": "453000"
  },
  {
    "text": "Now you've probably heard this term it's called the second system effect basically what it means is you had something you thought it was terrible",
    "start": "376230",
    "end": "383689"
  },
  {
    "text": "Then you decided to rewrite it. But thanks to the fact that you were overconfident and",
    "start": "384450",
    "end": "389509"
  },
  {
    "text": "You probably made the new system too complicated. In fact, the second system is worse than the first",
    "start": "390090",
    "end": "395810"
  },
  {
    "text": "This is also summed up in a really excellent quote by the inventor of C++.",
    "start": "396690",
    "end": "401749"
  },
  {
    "text": "he says \"legacy code\" often differs from its suggested alternative by actually working and scaling.",
    "start": "401910",
    "end": "407359"
  },
  {
    "text": "Now I don't know about you but this is like utterly depressing for me",
    "start": "408919",
    "end": "414369"
  },
  {
    "text": "When I think about my life as a software developer if this is really like a fundamental truth I have to live by.",
    "start": "414919",
    "end": "421448"
  },
  {
    "text": "What's the point ? Is this my destiny I'm just like in this endless cycle of refactor it's gonna be terrible",
    "start": "423050",
    "end": "429340"
  },
  {
    "text": "I don't know if it's gonna be terrible. Maybe it's gonna be good and you just keep going over and over again and",
    "start": "429340",
    "end": "434829"
  },
  {
    "text": "That's kind of the reality in some ways. The real cost of software is not about the initial development, but maintenance over time, because",
    "start": "435470",
    "end": "444850"
  },
  {
    "text": "requirements change you have new feature requests the business changes direction and that means our software has to. change too",
    "start": "445760",
    "end": "452829"
  },
  {
    "start": "453000",
    "end": "520000"
  },
  {
    "text": "So the question is not really why do we rewrite software? I think there are a lot of really good reasons",
    "start": "453199",
    "end": "458379"
  },
  {
    "text": "Why software needs to be rewritten sometimes but rather? How can we make our systems more resilient to that inevitable change?",
    "start": "458380",
    "end": "466689"
  },
  {
    "text": "So that instead of having something that looks like this, We can have something that looks a little bit more like that, where in fact the speed of adding new features increases over time.",
    "start": "468229",
    "end": "478299"
  },
  {
    "text": "How do we reach this promised land now. There is one answer and it is an answer that most people are very unsatisfied with.",
    "start": "480080",
    "end": "490179"
  },
  {
    "text": "Good architecture. But when you tell this to someone, you know, and they are in the middle of problems that are maybe caused by poor architecture.",
    "start": "491450",
    "end": "500769"
  },
  {
    "text": "They're gonna look at you and say Thanks for that. Like I really appreciate your endless wisdom, you know your",
    "start": "500770",
    "end": "508780"
  },
  {
    "text": "philosophizing about how I'm gonna fix my problem. It's really nice And what why is it that this is the kind of reaction elicited when you when you give someone this response?",
    "start": "510650",
    "end": "519729"
  },
  {
    "start": "520000",
    "end": "632000"
  },
  {
    "text": "Well, I think it's because to your average software developer Architecture. It's kind of like a dirty word",
    "start": "520070",
    "end": "526329"
  },
  {
    "text": "You know because on the one hand a lot of people don't necessarily know",
    "start": "526490",
    "end": "531520"
  },
  {
    "text": "What does the Software Architect at my company do all day? Really? You should try asking them. A lot of them. Don't really know they'll think okay this person maybe transcended coding",
    "start": "531560",
    "end": "542779"
  },
  {
    "text": "But what comes after that? meetings writing on a whiteboard maybe writing something in the wiki.",
    "start": "542779",
    "end": "550459"
  },
  {
    "text": "there's also the fact that software architecture doesn't really have a common definition people love to argue about what architecture really is.",
    "start": "551819",
    "end": "559730"
  },
  {
    "text": "You can imagine if in the world of front-end. We are still bickering over things like view versus react versus sass",
    "start": "559920",
    "end": "566539"
  },
  {
    "text": "CSS NGS whatever That you could never get all Of the developers from all of the programming communities to agree on a single definition of software architecture.",
    "start": "567089",
    "end": "578178"
  },
  {
    "text": "We love arguing about things as developers. So that's not gonna happen and then the last and most important thing is I think most people find",
    "start": "578370",
    "end": "587808"
  },
  {
    "text": "That this response feels pretty detached from their daily problems when I'm a software developer and I'm working in an app",
    "start": "588120",
    "end": "595009"
  },
  {
    "text": "What I have to do is I have to change the behavior of a button Right. That's my ticket",
    "start": "595379",
    "end": "601939"
  },
  {
    "text": "But for whatever reason in whatever context the previous person made that task",
    "start": "602610",
    "end": "609829"
  },
  {
    "text": "extremely difficult for me. So when someone tells me well good architecture would have fix that doesn't exactly give me a warm fuzzy feeling inside",
    "start": "610170",
    "end": "617779"
  },
  {
    "text": "so instead of trying to come up with a new definition of Architecture and telling you that now you are in this room and you have to listen and believe everything that I say. I",
    "start": "618449",
    "end": "627289"
  },
  {
    "text": "want to kind of reframe it and think about it from a different angle and that's thinking about architecture as",
    "start": "627810",
    "end": "633619"
  },
  {
    "start": "632000",
    "end": "702000"
  },
  {
    "text": "enabling constraints so Constraints that you put on the way that you use code and the way you use data and the way your structure your application",
    "start": "634019",
    "end": "642078"
  },
  {
    "text": "That ultimately it can help us to move faster and more safely over time Now if this sounds a little bit abstract it helps to start with a real-world example",
    "start": "642720",
    "end": "651109"
  },
  {
    "text": "Think about driving in a car, so I'm from the United States But when I first moved to Germany I learned about the Autobahn and I learned that there are parts of the road you can drive",
    "start": "652139",
    "end": "662359"
  },
  {
    "text": "On them and there is no speed limit at all, which sounds like a recipe for disaster",
    "start": "662360",
    "end": "667669"
  },
  {
    "text": "but somehow all these people managed to drive at absurdly ridiculous speeds and yet there are",
    "start": "668639",
    "end": "677118"
  },
  {
    "text": "Comparatively few accidents and the reason for that is that there are constraints on the way that we operate on the road",
    "start": "678300",
    "end": "685010"
  },
  {
    "text": "for instance There are physical barriers between cars driving really fast in one direction and cars driving really fast in another direction",
    "start": "685200",
    "end": "692479"
  },
  {
    "text": "You have lanes you have conventions like using your turn signal and all of these constraints that we put in place",
    "start": "692670",
    "end": "698839"
  },
  {
    "text": "Also help us to move fast and in a safe way. You can think about this pretty similarly in software development.",
    "start": "699149",
    "end": "706190"
  },
  {
    "start": "702000",
    "end": "764000"
  },
  {
    "text": "Consider what happened what kind of constraints we introduced with OOP?",
    "start": "707370",
    "end": "711500"
  },
  {
    "text": "Instead of being able to structure our programs more freely, we had to structure them in terms of classes.",
    "start": "712740",
    "end": "718040"
  },
  {
    "text": "But because of the fact that we kind of gave away some of the freedom that we might have had,",
    "start": "718200",
    "end": "722959"
  },
  {
    "text": "We could actually decouple the structure of our applications from the way that the code is organized,",
    "start": "723270",
    "end": "728179"
  },
  {
    "text": "Now, think more about functional programming, this is something that Front-end developers are much more familiar with these days and one of the core restraints that you have in functional programming is immutability.",
    "start": "729000",
    "end": "740509"
  },
  {
    "text": "Strictly speaking. You could say that mutable data is more powerful than",
    "start": "741270",
    "end": "745939"
  },
  {
    "text": "Immutable data ,because you can just do more with it Right, but because of the fact that we give away our ability to mutate data",
    "start": "746490",
    "end": "754430"
  },
  {
    "text": "We can eliminate an entire class of problems because we don't have different parts of our applications thinking that they own and can do anything",
    "start": "754560",
    "end": "761719"
  },
  {
    "text": "with shared data. similarly in front-end development there have been a lot of",
    "start": "762029",
    "end": "767118"
  },
  {
    "start": "764000",
    "end": "870000"
  },
  {
    "text": "connected progressions in the last years a super simple example. We are no longer really using \"var\" right now. We're using \"const\". and",
    "start": "768180",
    "end": "777049"
  },
  {
    "text": "while this might seem small it can give you a bit of security because you know that that variable is not going to be",
    "start": "777810",
    "end": "783169"
  },
  {
    "text": "reassigned to something totally different during the course of whatever function or whatever scope it's in. So you have more predictability in the way that your data is being used",
    "start": "783270",
    "end": "791899"
  },
  {
    "text": "now. JQuery to react we're getting to the controversial part. Okay, so",
    "start": "792959",
    "end": "798529"
  },
  {
    "text": "What I find interesting about this is that jQuery is strictly speaking gave us a lot of power right you could go into the Dom",
    "start": "799740",
    "end": "806149"
  },
  {
    "text": "you were really like operating on it and of hands-on way and React tries to get you a bit further back from that",
    "start": "806150",
    "end": "813828"
  },
  {
    "text": "you can always reach into the Dom but you would be going against some best practices and",
    "start": "813870",
    "end": "818509"
  },
  {
    "text": "Now because of the fact that we are not doing direct Dom manipulation We can have more predictable and more testable user interfaces. And now this is the real controversial one and",
    "start": "819509",
    "end": "830389"
  },
  {
    "text": "Now CSS in JS. So You know, some people don't like it. There will be a new Twitter thread every day about why it's bad",
    "start": "831360",
    "end": "839809"
  },
  {
    "text": "but one thing that I've noticed using it for about a year and a half, maybe two years by now is that",
    "start": "840240",
    "end": "847128"
  },
  {
    "text": "it really forces me not to rely on side-effects because of the fact that I have to",
    "start": "847740",
    "end": "853128"
  },
  {
    "text": "explicitly share styles between different components and Maybe you have more discipline than me. But if I didn't do that",
    "start": "853740",
    "end": "860208"
  },
  {
    "text": "you'd better believe I was would be relying on some global names and in the end this helps us to write code that is just",
    "start": "860790",
    "end": "868790"
  },
  {
    "text": "safer. so the point I want to make is we are constraining ourselves all the time and we do it on purpose and",
    "start": "869069",
    "end": "875509"
  },
  {
    "start": "870000",
    "end": "951000"
  },
  {
    "text": "We do that specifically to trade constraints for safety and for speed We're not looking for ways to be more powerful in how we exhibit our ability as software developers.",
    "start": "876120",
    "end": "887238"
  },
  {
    "text": "We're rather looking for more best practices and things not to do , so for the second half of my talk",
    "start": "887459",
    "end": "893959"
  },
  {
    "text": "I'm going to share three specific constraints that you can use not today, but maybe next week",
    "start": "893959",
    "end": "900049"
  },
  {
    "text": "for having a more resilient architecture on the front-end and Of course, I need to make a disclaimer. It's not gonna be exhaustive right? I have 15 minutes left.",
    "start": "900809",
    "end": "911089"
  },
  {
    "text": "but this will be something that I hope is really practical for you and",
    "start": "911639",
    "end": "915709"
  },
  {
    "text": "Let's dive in. so we're going to talk about three constraints and specifically what they enable as a result",
    "start": "917339",
    "end": "923419"
  },
  {
    "text": "The first thing has to do with source code dependencies what I find very interesting",
    "start": "924029",
    "end": "928549"
  },
  {
    "text": "especially in the front-end development community is there is a lot of discussion about",
    "start": "929309",
    "end": "934039"
  },
  {
    "text": "directory structure. Everyone is wondering well, how should I organize my components in my what directory structure should I use but very few people also think about",
    "start": "934920",
    "end": "946329"
  },
  {
    "text": "Actually, what parts of the application is allowed to depend on which other parts?",
    "start": "946519",
    "end": "951099"
  },
  {
    "start": "951000",
    "end": "1107000"
  },
  {
    "text": "Now there are a couple of really commonly recognized ways of organizing our internal dependencies. I'm not talking about third-party dependencies.",
    "start": "951829",
    "end": "960609"
  },
  {
    "text": "Probably the most famous one, you know is the big ball of mud. And what I like to say is that if you don't know",
    "start": "961760",
    "end": "968260"
  },
  {
    "text": "What may not depend on what in your app if you don't have any rules about this may not touch that and so on",
    "start": "968899",
    "end": "975819"
  },
  {
    "text": "there is a very high probability that you are operating in a muddy environment and",
    "start": "976040",
    "end": "980860"
  },
  {
    "text": "Yeah in innocence. That's how it goes. We also have a more layered approach So you have some rules about what may depend on what and it needs to go into a single direction",
    "start": "982160",
    "end": "992259"
  },
  {
    "text": "And you also have a modular approach I hate to break it to you, but creating new JavaScript modules does not make the code modular",
    "start": "992390",
    "end": "1000029"
  },
  {
    "text": "In fact when I talk about this, I'm more referring to things such as a micro friends approach or maybe a mono repo",
    "start": "1001089",
    "end": "1007319"
  },
  {
    "text": "things where you have Elements with a really small API service area and then those things are able to call up to other things",
    "start": "1008079",
    "end": "1014939"
  },
  {
    "text": "I'm not going to talk about modular because for the vast majority of people working in front end apps",
    "start": "1015040",
    "end": "1020250"
  },
  {
    "text": "we are working still in a single repository in a monolithic way, so",
    "start": "1020250",
    "end": "1025530"
  },
  {
    "text": "what's the big difference and Why should you care? Well, think about what happens when you introduce a change in a big ball of mud",
    "start": "1026919",
    "end": "1035278"
  },
  {
    "text": "What is the potential scope of regression when you make that change?",
    "start": "1035980",
    "end": "1040438"
  },
  {
    "text": "The answer is you have no idea, right you can make a promise to your QA engineer",
    "start": "1042220",
    "end": "1047548"
  },
  {
    "text": "Don't worry. I made this change and nothing else is going to break but you know how it goes",
    "start": "1048160",
    "end": "1053669"
  },
  {
    "text": "Once you burn that bridge there is no coming back and The reality is is that when you have a big ball of mud kind of architecture",
    "start": "1054309",
    "end": "1063480"
  },
  {
    "text": "You just don't know what's going to break when you make a change and on top of that It also can introduce this unintended side effect of creating cross team conflicts",
    "start": "1063850",
    "end": "1073049"
  },
  {
    "text": "Because nobody lines to have a ticket showing up on their board that has urgent marked everywhere",
    "start": "1073300",
    "end": "1079799"
  },
  {
    "text": "Because another team made a change and they didn't realize it was going to affect them. On the other hand with a layered approach when you change something",
    "start": "1080080",
    "end": "1087599"
  },
  {
    "text": "well, there is a certain surface area that can be affected but it's much more limited and in some way it is knowable and",
    "start": "1087970",
    "end": "1095850"
  },
  {
    "text": "Hopefully if you've organized your application similarly to the way that your teams are set up, then the chance of having cross team effects is",
    "start": "1096999",
    "end": "1105269"
  },
  {
    "text": "relatively contained so this is really the key difference between these two different approaches is",
    "start": "1105820",
    "end": "1110908"
  },
  {
    "start": "1107000",
    "end": "1188000"
  },
  {
    "text": "How the internal dependencies of the application are organized? So let's look at a slightly more specific example",
    "start": "1111429",
    "end": "1118679"
  },
  {
    "text": "So imagine you have an application that is kind of roughly set up like this You have your router which is the entry point to basically everything you have a separate API and data layer",
    "start": "1119499",
    "end": "1129119"
  },
  {
    "text": "Which is where all of the requests are going through and you probably handle some caching duplication things like that",
    "start": "1129249",
    "end": "1134819"
  },
  {
    "text": "then you have different pages or sections in your application which have UI components and",
    "start": "1135100",
    "end": "1140339"
  },
  {
    "text": "hopefully some of the business logic is also going to be separated out somewhere else for easier testing and so on now the important thing is that",
    "start": "1140980",
    "end": "1149309"
  },
  {
    "text": "these two pages need to be isolated from one another. so they should not be sharing things causing one page to have side effects when the other one changes and",
    "start": "1150070",
    "end": "1160229"
  },
  {
    "text": "An easy way to think about that is that for each page the rest of the application may as well not exist",
    "start": "1160509",
    "end": "1166319"
  },
  {
    "text": "This is not necessarily an easy thing to do It's not the most convenient but the result is that it is so much easier to isolate the impact of changes and",
    "start": "1166450",
    "end": "1175498"
  },
  {
    "text": "That's something that leads directly to having a more resilient app Now when you look at that diagram, you're probably thinking to yourself if you are in front end developer",
    "start": "1175629",
    "end": "1186209"
  },
  {
    "text": "You are definitely thinking to yourself What about the shared components?",
    "start": "1186210",
    "end": "1190980"
  },
  {
    "start": "1188000",
    "end": "1234000"
  },
  {
    "text": "Because we are developers. We love sharing things. When we write shared code. It makes us feel very good about ourselves and",
    "start": "1191529",
    "end": "1198689"
  },
  {
    "text": "I'm a little bit hardcore when it comes to how to handle shared code in a code base and",
    "start": "1199840",
    "end": "1205349"
  },
  {
    "text": "I pretty much believe that if you can take out the business logic, there is a good chance you can stick it into the design system if that's really where it belongs or",
    "start": "1206830",
    "end": "1215739"
  },
  {
    "text": "You may be better off copying and pasting that piece of code instead of introducing a dependency between those two pieces and",
    "start": "1216680",
    "end": "1225669"
  },
  {
    "text": "This brings me to my next point which is being a little bit more conservative about code reuse, then you may have traditionally been taught",
    "start": "1226130",
    "end": "1233860"
  },
  {
    "start": "1234000",
    "end": "1365000"
  },
  {
    "text": "because as developers We love dry code when you see code that you can make dry by introducing some abstraction",
    "start": "1234860",
    "end": "1242470"
  },
  {
    "text": "It's like a very unique euphoric feeling and that feeling is what keeps us in software development",
    "start": "1242690",
    "end": "1248648"
  },
  {
    "text": "Despite the fact that we have been rewriting the same thing over and over again for years",
    "start": "1248900",
    "end": "1253300"
  },
  {
    "text": "but the problem is that sometimes in the name of dryness we tend to bind together pieces of code that",
    "start": "1254240",
    "end": "1261730"
  },
  {
    "text": "Ought not to know about each other and that makes the code brittle and more prone to side-effects",
    "start": "1261920",
    "end": "1267759"
  },
  {
    "text": "So I want to give you a more concrete example think about this situation you're introducing a new page in the app that you're working in and",
    "start": "1268820",
    "end": "1278470"
  },
  {
    "text": "You see a component on another page and you think that component looks a lot like the component that I need",
    "start": "1279230",
    "end": "1285009"
  },
  {
    "text": "So what do you do? You see that component and you generalize it and you put it in the shared folder and",
    "start": "1285410",
    "end": "1291399"
  },
  {
    "text": "You think to yourself? Man, the rest of the team is gonna be so grateful to me. I",
    "start": "1291980",
    "end": "1297190"
  },
  {
    "text": "Just generalized a specific component and I put it somewhere shared other people can use it",
    "start": "1297860",
    "end": "1303639"
  },
  {
    "text": "You know, it's like they're gonna give me so many thumbs up on my PR. I'm gonna get promoted and",
    "start": "1303740",
    "end": "1308830"
  },
  {
    "text": "That makes you feel good at the end of the day but What often happens is that you have?",
    "start": "1310220",
    "end": "1317260"
  },
  {
    "text": "New feature requests new business requirements and over time that component that lives in the shared folder",
    "start": "1317810",
    "end": "1325149"
  },
  {
    "text": "Tends to want to diverge but the fact that it's in the shared folder is like a really strong magnetism that keeps it together and",
    "start": "1326270",
    "end": "1335829"
  },
  {
    "text": "you'll notice that this happens when you see signs like If statements or the component starts to have an existential crisis, like where am I and how should I render?",
    "start": "1336530",
    "end": "1348589"
  },
  {
    "text": "and you see this kind of like branching in the component and and at the end of the day the components that",
    "start": "1349110",
    "end": "1356000"
  },
  {
    "text": "Started out being so general. It could be used anywhere Can now only be used in two very specific",
    "start": "1356460",
    "end": "1363679"
  },
  {
    "text": "places so thing I would just want to remind all of us is that",
    "start": "1364200",
    "end": "1370070"
  },
  {
    "start": "1365000",
    "end": "1442000"
  },
  {
    "text": "When in doubt it is more important that code remains decoupled than it is that the code remains dry",
    "start": "1370620",
    "end": "1375799"
  },
  {
    "text": "Because code reuse is not the goal in and of itself The purpose of code reuse and the reason that we want to keep code dry is to avoid introducing bugs",
    "start": "1376080",
    "end": "1385969"
  },
  {
    "text": "unnecessarily, right because if you have less code By some standards you are less likely to have as many or more bugs",
    "start": "1386460",
    "end": "1393890"
  },
  {
    "text": "But at the end of the day if you introduce dryness in a place that binds unrelated code together",
    "start": "1394440",
    "end": "1399769"
  },
  {
    "text": "You are exactly eliminating the benefit that you made it dry in the first place to achieve",
    "start": "1400049",
    "end": "1405408"
  },
  {
    "text": "So there is this very nice tweet, which I thought summarized this sentiment It says a regular person sees either a glass half-full or half-empty",
    "start": "1406320",
    "end": "1414110"
  },
  {
    "text": "But an engineer sees them both and then learns in what context to see it half full and in what?",
    "start": "1414600",
    "end": "1419539"
  },
  {
    "text": "context to see it half empty and If you ask me, sometimes you just need two glasses",
    "start": "1419700",
    "end": "1425270"
  },
  {
    "text": "so Two people need to be able to drink water at the same time and if one person's glass slips and breaks",
    "start": "1426150",
    "end": "1434960"
  },
  {
    "text": "on the floor The other person should not look at them and immediately need to draw up their glass as well because they are a couple together",
    "start": "1435720",
    "end": "1441529"
  },
  {
    "start": "1442000",
    "end": "1554000"
  },
  {
    "text": "So the point about being more conservative about code reuse is just being critical I'm not saying that anytime you need to reuse something like please just copy-paste it like that would also not be sustainable",
    "start": "1443280",
    "end": "1455209"
  },
  {
    "text": "But think about it critically and not just as an abstraction waiting to happen And that helps us to avoid coupling together code that diverges over time",
    "start": "1455460",
    "end": "1464389"
  },
  {
    "text": "The last part I want to talk about is enforcing your boundaries, so how many of you",
    "start": "1466140",
    "end": "1472459"
  },
  {
    "text": "have been in a team or at some point you all get together and you say",
    "start": "1473430",
    "end": "1478229"
  },
  {
    "text": "Guys, it's time. We had an architecture plan You know, like things are getting a bit out of control and we need to do something about it",
    "start": "1479020",
    "end": "1488100"
  },
  {
    "text": "so the whole team gets together and You make some decisions",
    "start": "1488290",
    "end": "1493380"
  },
  {
    "text": "You document them? maybe you put them in in a wiki because documenting decisions is a very good thing and then you",
    "start": "1493510",
    "end": "1502290"
  },
  {
    "text": "Make some diagrams perhaps to help on board the next people that will join your team and you have this amazing",
    "start": "1502600",
    "end": "1509400"
  },
  {
    "text": "documentation and It starts to collect dust by the very next week and",
    "start": "1510070",
    "end": "1517679"
  },
  {
    "text": "Whenever someone creates a new feature they are not looking in the wiki to check how to do it first",
    "start": "1519940",
    "end": "1526349"
  },
  {
    "text": "unfortunately Yeah, so that's kind of awkward, right You spent all this time making this amazing documentation. And even the people who wrote it are not regularly consulting it. So",
    "start": "1527740",
    "end": "1539099"
  },
  {
    "text": "What's the point? Why should we even try to put some? architectural constraints into our apps if",
    "start": "1539860",
    "end": "1545429"
  },
  {
    "text": "at the end of the day everyone is going to ignore it and systems will just tend towards entropy and then we're gonna have to",
    "start": "1545530",
    "end": "1551099"
  },
  {
    "text": "Rewrite it all over again So let's think about a solution to this now imagine you have an application",
    "start": "1551100",
    "end": "1559979"
  },
  {
    "start": "1554000",
    "end": "1669000"
  },
  {
    "text": "That looks something like this. You have some components. There's a bunch of shared business logic",
    "start": "1560260",
    "end": "1564930"
  },
  {
    "text": "Eventually you decide to clean up your internal dependency tree and you find something that could be shared among two pages",
    "start": "1565960",
    "end": "1573480"
  },
  {
    "text": "you decide to implement a little bit of duplication and Overtime that logic begins to specialize based on the context in which it was in",
    "start": "1574690",
    "end": "1584280"
  },
  {
    "text": "But the question is this what happens when someone joins your team a new person and",
    "start": "1585670",
    "end": "1593369"
  },
  {
    "text": "They see that code they look in one place and they see this looks suspiciously similar to this code over here and",
    "start": "1594070",
    "end": "1603269"
  },
  {
    "text": "Then they have that like spidey sense like an abstraction coming on and you're thinking you",
    "start": "1603700",
    "end": "1608758"
  },
  {
    "text": "Know but they're really excited. They're probably thinking I'm gonna impress this team. It's my second day I'm so excited. And the question is, how can we stop them?",
    "start": "1609940",
    "end": "1619680"
  },
  {
    "text": "Now there's a pretty neat technique which we introduced at Summa",
    "start": "1622090",
    "end": "1626999"
  },
  {
    "text": "Which is called forbidden dependency tests now if you're not familiar with forbidden dependency tests",
    "start": "1628030",
    "end": "1634320"
  },
  {
    "text": "essentially if you think about tests as a way or application tests as the way you test the behavior of your",
    "start": "1634690",
    "end": "1641070"
  },
  {
    "text": "Application then forbidden dependency tests allow you to test the structure of your application",
    "start": "1641380",
    "end": "1646830"
  },
  {
    "text": "From a dependency standpoint. So for example if you introduce",
    "start": "1647260",
    "end": "1651870"
  },
  {
    "text": "Some kind of page or let's say I'm writing a page. I can actually write a rule that runs as part of the CI",
    "start": "1652480",
    "end": "1659490"
  },
  {
    "text": "That's gonna cause the bill to break if anybody tries to depend on my code",
    "start": "1660070",
    "end": "1664439"
  },
  {
    "text": "Which is like pretty empowering, right? So if you are working in the node and JavaScript ecosystem",
    "start": "1665320",
    "end": "1673980"
  },
  {
    "start": "1669000",
    "end": "1747000"
  },
  {
    "text": "There is one specific tool that I've found for this purpose, which is called dependency cruiser",
    "start": "1674560",
    "end": "1679799"
  },
  {
    "text": "and it has a lot of other options besides just Checking whether something can depend on something else. It can also do things like checking for circular dependencies",
    "start": "1680710",
    "end": "1690179"
  },
  {
    "text": "it's super customizable and What I can tell you is that if you don't have some kind of system that's checking these things",
    "start": "1690790",
    "end": "1698519"
  },
  {
    "text": "You can also implement it yourself if you would like to do that You really just don't know what's happening inside the application",
    "start": "1698520",
    "end": "1707340"
  },
  {
    "text": "You can think you have a very clear directory structure surely Everyone's going to be following the existing conventions, but you just don't know until you're enforcing it",
    "start": "1707740",
    "end": "1718049"
  },
  {
    "text": "so what this allows us to do is that it allows us to preserve the Architecture that we have in terms of its internal dependencies",
    "start": "1719500",
    "end": "1727470"
  },
  {
    "text": "over time in an automated way so we don't have to wait until somebody opens a pull request to",
    "start": "1727990",
    "end": "1734429"
  },
  {
    "text": "Start arguing about it. In fact, the CI is going to argue about it for us And that's more impersonal and in this case leads to less conflict. So I think that's a good thing",
    "start": "1735160",
    "end": "1743850"
  },
  {
    "text": "Yeah, so Let's recap a little bit about what we've learned. So",
    "start": "1745900",
    "end": "1750840"
  },
  {
    "start": "1747000",
    "end": "1904000"
  },
  {
    "text": "the first thing we talked about is this unfortunate truth that Software changes and that means that our code needs to change to write because we have new business",
    "start": "1751810",
    "end": "1762750"
  },
  {
    "text": "Requirements new features coming up and that means sometimes rewriting things or migrating them or whatever is just inevitable",
    "start": "1763030",
    "end": "1770310"
  },
  {
    "text": "We've also learned that Architecture can be seen in a way as applying enabling constraints",
    "start": "1772090",
    "end": "1778290"
  },
  {
    "text": "so restrictions on the way that we use code and data that actually enable us to move faster and more safely as",
    "start": "1778300",
    "end": "1785340"
  },
  {
    "text": "the time as time goes on and finally, we also learned there are some really small changes that you can make to your projects to help them evolve in a",
    "start": "1785710",
    "end": "1796530"
  },
  {
    "text": "more organized way first thing is just thinking directionally set some rules in your application about what is allowed to depend on what in",
    "start": "1796530",
    "end": "1805980"
  },
  {
    "text": "Order that you can build parts of your app that don't necessarily Find themselves bound to the other parts of the app. And this is also going to reflect positively on the team environment that you're in",
    "start": "1806170",
    "end": "1817018"
  },
  {
    "text": "Also being a little bit more conservative about code reuse, then you might have been taught",
    "start": "1818290",
    "end": "1825600"
  },
  {
    "text": "beginning in your software development career rise just thinking critically about whether it's appropriate to reuse that code and",
    "start": "1826420",
    "end": "1833700"
  },
  {
    "text": "where exactly it belongs and Finally, that's all of the good intentions in the world. Don't necessarily matter if you're not enforcing them and",
    "start": "1833890",
    "end": "1843600"
  },
  {
    "text": "One really useful way to do. This is by using automation and when such automation is forbidden dependency to us",
    "start": "1844150",
    "end": "1850739"
  },
  {
    "text": "I'm gonna leave you guys with just two last takeaways",
    "start": "1851680",
    "end": "1856049"
  },
  {
    "text": "the first thing is this anytime we build out a feature as an individual contributor even",
    "start": "1856960",
    "end": "1864360"
  },
  {
    "text": "there are still architectural decisions that need to be made so",
    "start": "1865030",
    "end": "1869399"
  },
  {
    "text": "Sometimes when you talk to people who our thinking about architecture, especially in the front end",
    "start": "1870160",
    "end": "1875920"
  },
  {
    "text": "The first thing that comes to their mind is things like Redux and flux, and I don't know whatever is the new latest thing",
    "start": "1875920",
    "end": "1883690"
  },
  {
    "text": "but oftentimes the the solution is",
    "start": "1884360",
    "end": "1888820"
  },
  {
    "text": "smaller than you might think and If we start with thinking about this on the function level or the module level then that means that also the individual contributor",
    "start": "1889400",
    "end": "1899080"
  },
  {
    "text": "individual contributors on the team are involved in those decisions, too and",
    "start": "1899720",
    "end": "1904148"
  },
  {
    "start": "1904000",
    "end": "2025000"
  },
  {
    "text": "Finally, this one is like dedicated to everybody who is like part of the the front-end development community in the room",
    "start": "1904970",
    "end": "1911799"
  },
  {
    "text": "I don't know how many of you there are out there And that's this that you don't have to derive",
    "start": "1911800",
    "end": "1918460"
  },
  {
    "text": "Architecture from first principles. What do I mean by that? so what really commonly happens when people have",
    "start": "1919100",
    "end": "1926650"
  },
  {
    "text": "problems in their web applications is they go to Google and they search for something like",
    "start": "1926990",
    "end": "1932020"
  },
  {
    "text": "react Architecture or view architecture or whatever it is. They're looking for framework specific",
    "start": "1933410",
    "end": "1939910"
  },
  {
    "text": "Architecture solutions, but so often the problems that they're actually encountering are not really specific",
    "start": "1940430",
    "end": "1946539"
  },
  {
    "text": "not only to the framework they're using but even to the web it's just software at the end of the day and",
    "start": "1947180",
    "end": "1952840"
  },
  {
    "text": "sometimes What I have found is that people who are working on the web myself or past self included are",
    "start": "1953720",
    "end": "1961450"
  },
  {
    "text": "Reluctant to learn and be open to the input from other",
    "start": "1962240",
    "end": "1967330"
  },
  {
    "text": "Communities of other programming languages or paradigms. It's really common to hear someone say something like",
    "start": "1967700",
    "end": "1973689"
  },
  {
    "text": "you know, that's like OOP and like I thought we don't do that anymore or Well, the examples are in C++",
    "start": "1974360",
    "end": "1981669"
  },
  {
    "text": "So, of course, I'm not going to read that book but the reality is there is there are so many communities of",
    "start": "1981680",
    "end": "1989530"
  },
  {
    "text": "Programming languages and paradigms that have been building huge apps for way longer than we have been on the front end",
    "start": "1989840",
    "end": "1996100"
  },
  {
    "text": "So I just want to encourage anybody from the front-end community who is in this room and thinking about it",
    "start": "1996230",
    "end": "2001830"
  },
  {
    "text": "To you know, just be open minded and open to learning from others So that's about it. I will tweet the slides later if you're interested",
    "start": "2002350",
    "end": "2011258"
  },
  {
    "text": "I saw some people taking photos and then I change too soon. So sorry about that I'll tweet them out and yeah, thanks so much for being here",
    "start": "2011540",
    "end": "2018819"
  }
]