[
  {
    "text": "so um good afternoon and um welcome to my talk about",
    "start": "4359",
    "end": "9880"
  },
  {
    "text": "anko so given the fact that we had a cotlin session yesterday morning already",
    "start": "9880",
    "end": "17520"
  },
  {
    "text": "I kind of assume that a lot of you have been to this talk so we're not going to",
    "start": "17520",
    "end": "24279"
  },
  {
    "text": "reintroduce cotlin from scratch because we had you know really good presentation on that yesterday I've got a few slides",
    "start": "24279",
    "end": "31240"
  },
  {
    "text": "in here that will briefly talk about cotland Anor and the relationship between the two of them but you know I",
    "start": "31240",
    "end": "38480"
  },
  {
    "text": "might actually go through those quite quickly so the agenda for today is at",
    "start": "38480",
    "end": "43760"
  },
  {
    "text": "cotlin and enko and what they are and why they exist in the first place then we'll look at Anor related idioms and",
    "start": "43760",
    "end": "51600"
  },
  {
    "text": "language Concepts so there are certain things in the codin language that make",
    "start": "51600",
    "end": "56719"
  },
  {
    "text": "anko possible in the first place and we'll get to that in a few minutes and then we'll talk about the enko layout",
    "start": "56719",
    "end": "62440"
  },
  {
    "text": "DSL and that's probably what most people have seen of enko you know like you go",
    "start": "62440",
    "end": "68680"
  },
  {
    "text": "away from XML layouts and Android and you do some cool DSL based programmatic",
    "start": "68680",
    "end": "74040"
  },
  {
    "text": "layout but there's way more to enco um so I call that the hidden parts of enko",
    "start": "74040",
    "end": "79400"
  },
  {
    "text": "which is usually other features in the framework that people don't talk about",
    "start": "79400",
    "end": "84920"
  },
  {
    "text": "that often because they either don't know it or they are just happy to use the the enode DS L for",
    "start": "84920",
    "end": "91079"
  },
  {
    "text": "layouts and finally um we'll look at other alternatives to enko um because",
    "start": "91079",
    "end": "97960"
  },
  {
    "text": "there are a whole bunch of Android cotland Frameworks and there are you know maybe more specialized Frameworks",
    "start": "97960",
    "end": "104880"
  },
  {
    "text": "out there for certain things that enko can deliver but it always comes with a",
    "start": "104880",
    "end": "111119"
  },
  {
    "text": "with pros and cons and a trade-off obviously all right so let's start with",
    "start": "111119",
    "end": "116640"
  },
  {
    "text": "cot Len and anko um have a think about who that person is by the way maybe you",
    "start": "116640",
    "end": "122560"
  },
  {
    "text": "you get it if you're kind of into Japanese manga culture a little bit um",
    "start": "122560",
    "end": "127600"
  },
  {
    "text": "I'll um explain that in a few slides when we talk specifically about cotland",
    "start": "127600",
    "end": "133000"
  },
  {
    "text": "uh about anchor cotland fundamentals so basically it's aesthetically type programming language for the jvm and",
    "start": "133000",
    "end": "139879"
  },
  {
    "text": "therefore for Android there is actually a JS Target for for cotlin as well um",
    "start": "139879",
    "end": "145680"
  },
  {
    "text": "that is rather experimental at this stage from my point of view I would not recommend doing that but",
    "start": "145680",
    "end": "152519"
  },
  {
    "text": "cotlin for jvm and Android is really stable and you know ready for",
    "start": "152519",
    "end": "158200"
  },
  {
    "text": "production it was started internally at jet brains the guys behind Android studio and intellig and they use that",
    "start": "158200",
    "end": "165360"
  },
  {
    "text": "quite heavily in their own development work actually for their own products the",
    "start": "165360",
    "end": "170879"
  },
  {
    "text": "language and the tooling is open source aache license so you can just go use it do whatever you like with it essentially",
    "start": "170879",
    "end": "177879"
  },
  {
    "text": "and from a tooling point of view what you're getting is an SDK command line tools and nice plug-in support for",
    "start": "177879",
    "end": "185120"
  },
  {
    "text": "intellig and Android studio and for whatever reason if you have to use Eclipse there is apparently a plugin for",
    "start": "185120",
    "end": "192400"
  },
  {
    "text": "Eclipse which I have never given and in case you didn't know cotland is named after this island there",
    "start": "192400",
    "end": "200120"
  },
  {
    "text": "which is a little island in the Gulf of Finland um and the city is actually St Petersburg so jet brains is kind of",
    "start": "200120",
    "end": "207799"
  },
  {
    "text": "headquartered in St Petersburg and that's the naming of the the language came to came together codin motivation",
    "start": "207799",
    "end": "214799"
  },
  {
    "text": "is basically it wants to be a better Java it wants to solve problems pretty",
    "start": "214799",
    "end": "221040"
  },
  {
    "text": "much everyone has with ja with Java it's tied to backwards compatibility we have",
    "start": "221040",
    "end": "227200"
  },
  {
    "text": "lots of Legacy issues to deal with in Java it's a very verbose language and it produces lots of loaded code and we have",
    "start": "227200",
    "end": "235319"
  },
  {
    "text": "to write a lot of boilerplate code in Java you know think about gets and sets for for classes for example and there's",
    "start": "235319",
    "end": "242319"
  },
  {
    "text": "even worse amounts of boiler plate code when you look at Android development the type system has a whole",
    "start": "242319",
    "end": "249439"
  },
  {
    "text": "bunch of flaws in the Java world and cotlin aims to fix all those things um",
    "start": "249439",
    "end": "256560"
  },
  {
    "text": "in particular because cotlin allows you currently to combine or to run your your code on Java 6 which makes it a very",
    "start": "256560",
    "end": "264440"
  },
  {
    "text": "very interesting platform for Android development obviously I'll show you a simple code",
    "start": "264440",
    "end": "271039"
  },
  {
    "text": "conversion between Java and cotland and you know you're not supposed to read all that I just want to give you an idea how",
    "start": "271039",
    "end": "276440"
  },
  {
    "text": "it looks like so this is some Java code to convert a um collection of integers",
    "start": "276440",
    "end": "283320"
  },
  {
    "text": "into a comma separated list it has like string Builder iterator a while loop yada yada y common stuff if you actually",
    "start": "283320",
    "end": "291120"
  },
  {
    "text": "use the most simple way to convert your Java code into cotlin which is basically",
    "start": "291120",
    "end": "297360"
  },
  {
    "text": "a right click on your code in Android Studio in T and using the um shortcut to",
    "start": "297360",
    "end": "303160"
  },
  {
    "text": "convert Java to codlin you end up with something like that so you'll see it's from a syntax point of view different",
    "start": "303160",
    "end": "310639"
  },
  {
    "text": "but still actually quite Rose you know you haven't gained that much but if you start using cotlin features as a",
    "start": "310639",
    "end": "318360"
  },
  {
    "text": "language you end up with something like that which is a very very concise and",
    "start": "318360",
    "end": "324319"
  },
  {
    "text": "nice little piece of code where you say hey I have my collection and I use joint to string and end up with um with a",
    "start": "324319",
    "end": "332240"
  },
  {
    "text": "comma separated list of my integers and that's the things that make cotlin very very powerful basically those abilities",
    "start": "332240",
    "end": "339919"
  },
  {
    "text": "to write very Compact and very um concise",
    "start": "339919",
    "end": "345080"
  },
  {
    "text": "code so enko is a library built on top of cotlin to make Android development",
    "start": "345080",
    "end": "352840"
  },
  {
    "text": "with cotland faster and easier keeping in mind that cotlin is like a general purpose language it's not specifically",
    "start": "352840",
    "end": "359639"
  },
  {
    "text": "used for Android only came from jet brains so they basically realized at some point that",
    "start": "359639",
    "end": "367319"
  },
  {
    "text": "hey lots of people actually use our language for Android development let's",
    "start": "367319",
    "end": "372400"
  },
  {
    "text": "give them stuff that makes it even easier and better best known feature as I mentioned earlier is the layout DSL um",
    "start": "372400",
    "end": "380520"
  },
  {
    "text": "there is a whole bunch of other functionality for example things like intent and service reppers and the idea",
    "start": "380520",
    "end": "386560"
  },
  {
    "text": "of those is basically to give you easier access to dealing with system services",
    "start": "386560",
    "end": "391919"
  },
  {
    "text": "in Android um and to make it really easy to express new",
    "start": "391919",
    "end": "398080"
  },
  {
    "text": "intents it has a sub library for the handling of asynchronous calls and",
    "start": "398080",
    "end": "404680"
  },
  {
    "text": "that's very interesting because you know whoever has had to write asynchronous tasks in Java for Android knows how fun",
    "start": "404680",
    "end": "412639"
  },
  {
    "text": "that is or how fun that can be and aung and enko makes that really smooth and",
    "start": "412639",
    "end": "418160"
  },
  {
    "text": "easy and it also has a really good library for SQL light um believe it or",
    "start": "418160",
    "end": "423919"
  },
  {
    "text": "not and again SQL light in Android or SQL light in general is a bit of a pain",
    "start": "423919",
    "end": "430319"
  },
  {
    "text": "in the neck to work with um you end up you know dealing with a lot of Nesta TR",
    "start": "430319",
    "end": "436080"
  },
  {
    "text": "catch scenarios looking into certain errors thinking about concurrency of accessing your database file and it's",
    "start": "436080",
    "end": "443160"
  },
  {
    "text": "not really pleasurable and enko gives you a way to do that much much nicer all right next we'll look at some",
    "start": "443160",
    "end": "451280"
  },
  {
    "text": "anko specific things in the language normally you know if I was",
    "start": "451280",
    "end": "457759"
  },
  {
    "text": "giving a general cotland talk here we would talk about all sorts of things and",
    "start": "457759",
    "end": "463280"
  },
  {
    "text": "those are all language features but a there has been a cotland",
    "start": "463280",
    "end": "469400"
  },
  {
    "text": "talk already where a lot of those things have been explained and B I think if we",
    "start": "469400",
    "end": "475800"
  },
  {
    "text": "look at ankko specifically there are certain features that are more",
    "start": "475800",
    "end": "480879"
  },
  {
    "text": "interesting than just talking about all the language elements of cotland and those are properties Fields data classes",
    "start": "480879",
    "end": "488479"
  },
  {
    "text": "and then particularly extension functions and what's called type safe Builders let's start with data classes",
    "start": "488479",
    "end": "496599"
  },
  {
    "text": "um they are really nice and simple things they are basically kind of the",
    "start": "496599",
    "end": "501720"
  },
  {
    "text": "pojos or the beans in other languages and if you think about Java for instance because that's what most",
    "start": "501720",
    "end": "508080"
  },
  {
    "text": "people know if you write a pojo you have to do stuff like get us and set us and you have to deal with like a copy",
    "start": "508080",
    "end": "514599"
  },
  {
    "text": "function or a hash code function or an equals and all sorts of things that you would want to implement for those kind",
    "start": "514599",
    "end": "520518"
  },
  {
    "text": "of objects in cotland it's really simple it's basically a normal class you have",
    "start": "520519",
    "end": "526240"
  },
  {
    "text": "in this case a v which is a value um the option the other option would be a VAR",
    "start": "526240",
    "end": "531839"
  },
  {
    "text": "like a variable that can be um red endet this is just like um basically a",
    "start": "531839",
    "end": "537080"
  },
  {
    "text": "property that cannot be written and the thing that creates or that makes it a",
    "start": "537080",
    "end": "542200"
  },
  {
    "text": "data class is the data keyword in front of it so what you get is basically",
    "start": "542200",
    "end": "547399"
  },
  {
    "text": "automatically get us and SS and because I've specified all those fields as Wells it essentially means um",
    "start": "547399",
    "end": "556200"
  },
  {
    "text": "I'm only getting Getters for those I get like proper and useful",
    "start": "556200",
    "end": "561600"
  },
  {
    "text": "implementations for equals hash code to string and copy and those implementations actually work if you",
    "start": "561600",
    "end": "568160"
  },
  {
    "text": "don't like them that's fine you just write your own and overwrite the function not a problem at all but um",
    "start": "568160",
    "end": "574040"
  },
  {
    "text": "cotlin gives you sensible defaults for those kind of um for those kind of",
    "start": "574040",
    "end": "580200"
  },
  {
    "text": "functionality and copy can be used um to alter a copy that's kind of a bit of a",
    "start": "580200",
    "end": "586120"
  },
  {
    "text": "special thing in cotland that comes from the idea of being or trying to be a",
    "start": "586120",
    "end": "591959"
  },
  {
    "text": "functional and non-mutable language so instead of you know like basically copying a whole object you would",
    "start": "591959",
    "end": "598200"
  },
  {
    "text": "actually alter that copy potentially properties and Fields um we",
    "start": "598200",
    "end": "604079"
  },
  {
    "text": "talked about V and well briefly and couling classes have essentially mutable or immutable",
    "start": "604079",
    "end": "609399"
  },
  {
    "text": "properties um the example here shows a variable",
    "start": "609399",
    "end": "616800"
  },
  {
    "text": "counter um that's a mutable property because it's a variable and what you see",
    "start": "616800",
    "end": "623000"
  },
  {
    "text": "below that set value and then if value is larger than zero blah blah blah that's actually um kind of of a custom",
    "start": "623000",
    "end": "631200"
  },
  {
    "text": "functionality for the setter that I add to that property so you can still do",
    "start": "631200",
    "end": "636399"
  },
  {
    "text": "those kind of things having custom functionalities or using um backing",
    "start": "636399",
    "end": "641800"
  },
  {
    "text": "fields which are generated by the compiler automatically if",
    "start": "641800",
    "end": "647279"
  },
  {
    "text": "necessary more interesting for anko is a feature called extension",
    "start": "647800",
    "end": "652959"
  },
  {
    "text": "functions so what they basically do is they allow you to add new functionality",
    "start": "652959",
    "end": "658440"
  },
  {
    "text": "to classes without having to write um decorators or without",
    "start": "658440",
    "end": "663519"
  },
  {
    "text": "inheritance and that's actually a thing that is quite common in certain doet languages in C for",
    "start": "663519",
    "end": "670680"
  },
  {
    "text": "example there are like from my experience two camps of people some people like it some people hate that",
    "start": "670680",
    "end": "677200"
  },
  {
    "text": "because it kind of Alters the perception of a class but it can be incredibly powerful we've got two simple examples",
    "start": "677200",
    "end": "684440"
  },
  {
    "text": "here um on the top it shows basically an extension function sum for the type int",
    "start": "684440",
    "end": "692560"
  },
  {
    "text": "where you can just like pass another int of type in in and it adds it to whatever",
    "start": "692560",
    "end": "699959"
  },
  {
    "text": "the function is extended to so I can then say 3. sum 7 and it will basically",
    "start": "699959",
    "end": "706839"
  },
  {
    "text": "return me 10 the other example is more Android related um I can for example add a toast function to the activity",
    "start": "706839",
    "end": "714399"
  },
  {
    "text": "class and then I can you know do something like just call toast in an on create of Android",
    "start": "714399",
    "end": "721120"
  },
  {
    "text": "activity the interesting thing is those functions are resolved",
    "start": "721120",
    "end": "727880"
  },
  {
    "text": "aesthetically but they don't actually become part of the class so you know",
    "start": "727880",
    "end": "733440"
  },
  {
    "text": "there's no fancy bite code modification happening here it's it's the the class",
    "start": "733440",
    "end": "739480"
  },
  {
    "text": "it still stays the class the link that is in here shows a very lengthy and um",
    "start": "739480",
    "end": "747320"
  },
  {
    "text": "but excellent article why internally they handle it that way in the language and I can you know whoever",
    "start": "747320",
    "end": "754320"
  },
  {
    "text": "is interested in learning more about extension functions that is kind of a really good starting point to look",
    "start": "754320",
    "end": "760880"
  },
  {
    "text": "into the other thing that is really important for for anko are type save",
    "start": "760880",
    "end": "766000"
  },
  {
    "text": "Builders so I don't know who's done some groovy code in the past maybe but you",
    "start": "766000",
    "end": "771399"
  },
  {
    "text": "know you might have come across Builders and the idea behind Builders and Ruby because they are very popular in that",
    "start": "771399",
    "end": "777680"
  },
  {
    "text": "language or in general in Dynamic languages from my experience and the idea behind the",
    "start": "777680",
    "end": "783760"
  },
  {
    "text": "Builder is you can Define data in a declarative way so this is some groovy",
    "start": "783760",
    "end": "788959"
  },
  {
    "text": "code here where we have ajacent Builder and then I can just throw in some stuff",
    "start": "788959",
    "end": "794399"
  },
  {
    "text": "like a car object with name make year and Country and that magically in that",
    "start": "794399",
    "end": "800800"
  },
  {
    "text": "Builder creates ajacent object and I can pretty print that and you know do other stuff with adjacent",
    "start": "800800",
    "end": "805880"
  },
  {
    "text": "object so what you'll see there is like you're defin finding data but declaratively not necessarily",
    "start": "805880",
    "end": "814839"
  },
  {
    "text": "programmatically quite often in groovy or in other languages used to generate XML or",
    "start": "815120",
    "end": "821040"
  },
  {
    "text": "Json or UI layout very um nice for swing components if you have to do stuff like",
    "start": "821040",
    "end": "827519"
  },
  {
    "text": "that in some um environments and in",
    "start": "827519",
    "end": "833279"
  },
  {
    "text": "cotlin the cool thing is we can actually do type checking for Builders so our",
    "start": "833279",
    "end": "839320"
  },
  {
    "text": "Builders basically provide compile time errors if we use the language provided",
    "start": "839320",
    "end": "845000"
  },
  {
    "text": "by them wrongly and that's something that you can't do easily in gr with let's have a look at this example",
    "start": "845000",
    "end": "851959"
  },
  {
    "text": "here so this is a cotland function um I pass in an array of",
    "start": "851959",
    "end": "857639"
  },
  {
    "text": "strings and what this looks like is a declarative description of some HTML",
    "start": "857639",
    "end": "865720"
  },
  {
    "text": "HTML then a nested header with a title and a nested body and then we close the whole thing",
    "start": "865720",
    "end": "871560"
  },
  {
    "text": "again this is perfectly valid cotland code even though it might not look like it",
    "start": "871560",
    "end": "877880"
  },
  {
    "text": "initially the reason why this is inv valid cotlin code is because HTML is a",
    "start": "877880",
    "end": "883440"
  },
  {
    "text": "function that takes a Lambda as an argument and that function would look",
    "start": "883440",
    "end": "890079"
  },
  {
    "text": "roughly like that so we've got a function HTML with an inet Lambda being passed in and what that function then",
    "start": "890079",
    "end": "897880"
  },
  {
    "text": "will do is it will actually create an HTML object run the Lambda being passed in on",
    "start": "897880",
    "end": "904440"
  },
  {
    "text": "that object and return the built HTML that's the typical pattern of a builder",
    "start": "904440",
    "end": "910519"
  },
  {
    "text": "a builder scenario basically the type of that init function",
    "start": "910519",
    "end": "917000"
  },
  {
    "text": "that we pass in is a function type with what's called a receiver and that's",
    "start": "917000",
    "end": "923720"
  },
  {
    "text": "allow that allows you to pass that receiver that is HTML or of type HTML to the function",
    "start": "923720",
    "end": "929600"
  },
  {
    "text": "and it allows you to call members of that instance inside the function and that will become clear right here if we",
    "start": "929600",
    "end": "936759"
  },
  {
    "text": "look at that next bit of code that's the HTML class and that HTML class has two",
    "start": "936759",
    "end": "943759"
  },
  {
    "text": "functions itself one function for head and one function for body and you can",
    "start": "943759",
    "end": "948920"
  },
  {
    "text": "see how each of those functions then call or create instances of a head class",
    "start": "948920",
    "end": "956240"
  },
  {
    "text": "or a body class and use the past in Lambda themselves to build",
    "start": "956240",
    "end": "963880"
  },
  {
    "text": "those sub elements of the markup so essentially when we go oops when we go",
    "start": "963880",
    "end": "970040"
  },
  {
    "text": "back to oops sorry want to do that to that HTML snippet that we saw",
    "start": "970040",
    "end": "981199"
  },
  {
    "text": "here this declarative block of HTML head",
    "start": "981199",
    "end": "986600"
  },
  {
    "text": "title body is nothing else NS but Lumas really it's function calls that pass",
    "start": "986600",
    "end": "994519"
  },
  {
    "text": "functions into themselves and cotlin because of the type save Builder feature the extension",
    "start": "994519",
    "end": "1001720"
  },
  {
    "text": "function feature and the Lambda feature allows you to do that kind of thing but what we've seen is you have to write",
    "start": "1001720",
    "end": "1008279"
  },
  {
    "text": "quite a bit of code to even create a simple example like that like an HTML class a head class and body class lots",
    "start": "1008279",
    "end": "1015160"
  },
  {
    "text": "of functions yada yada yada and that's aot of work to create kind of a",
    "start": "1015160",
    "end": "1023039"
  },
  {
    "text": "DSL the good thing is enko takes away all that work of writing code yourself",
    "start": "1023039",
    "end": "1029480"
  },
  {
    "text": "we'll see that in a second if you want to get a play with that HTML Builder",
    "start": "1029480",
    "end": "1035520"
  },
  {
    "text": "there is a complete example for that um provided by the jetbrain guys and that's",
    "start": "1035520",
    "end": "1041319"
  },
  {
    "text": "really interesting to look at because it it has way more elements in the HTML",
    "start": "1041319",
    "end": "1046880"
  },
  {
    "text": "language than what I showed here because I just grabbed like HTML header and body",
    "start": "1046880",
    "end": "1053080"
  },
  {
    "text": "what of that all right so we talked about of some a few of those language Concepts",
    "start": "1053080",
    "end": "1059000"
  },
  {
    "text": "that are relevant for anko let's talk about anko itself has anyone figured out who that",
    "start": "1059000",
    "end": "1066160"
  },
  {
    "text": "is or why that picture is kind of relevant for anko no so that's actually",
    "start": "1066160",
    "end": "1073320"
  },
  {
    "text": "a character from a um from a manga SL enemy serious um called",
    "start": "1073320",
    "end": "1081159"
  },
  {
    "text": "Naruto then very popular in Japan um and that character's name is anko mitarashi",
    "start": "1081159",
    "end": "1088440"
  },
  {
    "text": "and she's what's called a special High ninja in that series and that's how I ended up with the title for that talk um",
    "start": "1088440",
    "end": "1096080"
  },
  {
    "text": "because I was just randomly randomly Googling for anko in Google image search",
    "start": "1096080",
    "end": "1101200"
  },
  {
    "text": "and that popped up it's like oh yeah that fits really really nicely so the layout DSL um briefly",
    "start": "1101200",
    "end": "1109159"
  },
  {
    "text": "what's the DSL DSL is short for domain specific language and essentially that's a",
    "start": "1109159",
    "end": "1114679"
  },
  {
    "text": "computer programming language that is particularly not a general purpose",
    "start": "1114679",
    "end": "1119919"
  },
  {
    "text": "language right so with the DSL you're usually not going to invent the next you",
    "start": "1119919",
    "end": "1126480"
  },
  {
    "text": "know Master super program that can do everything they are very limited to",
    "start": "1126480",
    "end": "1132320"
  },
  {
    "text": "specific use cases strongly focused on a particular domain and usually of limited",
    "start": "1132320",
    "end": "1138039"
  },
  {
    "text": "Express in general but really good on that particular domain some examples for dsls",
    "start": "1138039",
    "end": "1146360"
  },
  {
    "text": "SQL and XML xslt gradal all kinds of",
    "start": "1146360",
    "end": "1151679"
  },
  {
    "text": "domain specific languages that um are very very strong in a certain thing but",
    "start": "1151679",
    "end": "1158000"
  },
  {
    "text": "not General programming languages when you talk about",
    "start": "1158000",
    "end": "1163559"
  },
  {
    "text": "dsls the reason why you use them is usually you want an increase level of",
    "start": "1163559",
    "end": "1170080"
  },
  {
    "text": "abstraction and you want to get away from that discussion what versus how you",
    "start": "1170080",
    "end": "1177120"
  },
  {
    "text": "want to say I use this language because it's efficient it can exactly do what I want and I don't need to you know use a",
    "start": "1177120",
    "end": "1184960"
  },
  {
    "text": "very generic I can do everything with that language quite common you end up",
    "start": "1184960",
    "end": "1190360"
  },
  {
    "text": "with discussions like is a DSL actually code or data and there's no really good",
    "start": "1190360",
    "end": "1196559"
  },
  {
    "text": "answer for that because it depends on your personal use case and your scenario",
    "start": "1196559",
    "end": "1202080"
  },
  {
    "text": "um and there are different ways to deal with DSL you can interpret dsls at runtime you can use them to generate",
    "start": "1202080",
    "end": "1209120"
  },
  {
    "text": "other code there are ways to compile them so there is like you know tons of",
    "start": "1209120",
    "end": "1214320"
  },
  {
    "text": "options how to deal with dsls but if we look at the ano",
    "start": "1214320",
    "end": "1219880"
  },
  {
    "text": "DSL it's basically the most commonly known thing",
    "start": "1219880",
    "end": "1225480"
  },
  {
    "text": "in anchor and the idea is we want to replace EX ml in Android by cotland code",
    "start": "1225480",
    "end": "1232799"
  },
  {
    "text": "why do we want to do that because those XML layout definitions have a variety of issues",
    "start": "1232799",
    "end": "1239400"
  },
  {
    "text": "they are not typ safe they are reasonably expensive to compile into um",
    "start": "1239400",
    "end": "1246559"
  },
  {
    "text": "actual layout and the question is can we not do that",
    "start": "1246559",
    "end": "1252039"
  },
  {
    "text": "better so if we look at some example here",
    "start": "1252039",
    "end": "1259400"
  },
  {
    "text": "typical simple layout XML we've got a linear layout with an edit text and a button and then we close the linear",
    "start": "1259400",
    "end": "1265640"
  },
  {
    "text": "layout again I could try to do that in",
    "start": "1265640",
    "end": "1271240"
  },
  {
    "text": "Java programmatically I don't want to do that in Java programmatically for a lot of",
    "start": "1271240",
    "end": "1277000"
  },
  {
    "text": "reasons right so let's have a look how that would look like in cotland",
    "start": "1277000",
    "end": "1282039"
  },
  {
    "text": "programmatically and you'll see it's reasonably simple we'll start with you know getting some reference to the",
    "start": "1282039",
    "end": "1287919"
  },
  {
    "text": "activity create a linear layout set the orientation then we create the edit text",
    "start": "1287919",
    "end": "1293799"
  },
  {
    "text": "in the Buckle and put it all together basically by adding them to the layout",
    "start": "1293799",
    "end": "1298960"
  },
  {
    "text": "and you know while we are doing that we'll also create a quick um onclick listener so that's kind of",
    "start": "1298960",
    "end": "1308799"
  },
  {
    "text": "okay if we do that same thing in enko it will look like",
    "start": "1308799",
    "end": "1315720"
  },
  {
    "text": "that essentially it provides us with a DSL and we'll start with a vertical",
    "start": "1315720",
    "end": "1322520"
  },
  {
    "text": "layout which is automatically a linear layout in vertical orientation we create like our edit text",
    "start": "1322520",
    "end": "1330400"
  },
  {
    "text": "we give it a reference and we create a button that's actually in this case anonymously created and it has an on",
    "start": "1330400",
    "end": "1336159"
  },
  {
    "text": "click listener and that basically takes a Lambda so that",
    "start": "1336159",
    "end": "1342440"
  },
  {
    "text": "is reasonably nice compare this",
    "start": "1342440",
    "end": "1349440"
  },
  {
    "text": "to that so Anor DSL just from the amount",
    "start": "1349440",
    "end": "1354679"
  },
  {
    "text": "of code that you need to write seems to be very appealing and it is very appealing",
    "start": "1354679",
    "end": "1362400"
  },
  {
    "text": "um it looks very similar to the HTML Builder example that we had looked at a",
    "start": "1362400",
    "end": "1368679"
  },
  {
    "text": "few earlier few slides back the problem I mentioned then",
    "start": "1368679",
    "end": "1374919"
  },
  {
    "text": "was it is a lot of work to create all those classes and functions that we",
    "start": "1374919",
    "end": "1380799"
  },
  {
    "text": "needed to use for that HTML example the good thing is anko is taking all that",
    "start": "1380799",
    "end": "1386320"
  },
  {
    "text": "work for us so it uses extension functions and it arranges them in typ",
    "start": "1386320",
    "end": "1391880"
  },
  {
    "text": "save Builders and uses lambas to do all that stuff but the good thing is you don't have to write them by hand enko",
    "start": "1391880",
    "end": "1398919"
  },
  {
    "text": "generates them based on the Android's um Android jar file so it's all there for",
    "start": "1398919",
    "end": "1407240"
  },
  {
    "text": "all the layout comp components you would use if you want to get started it is",
    "start": "1407240",
    "end": "1412760"
  },
  {
    "text": "really simple you add a dependency to your Gradle build and what you'll see there in the",
    "start": "1412760",
    "end": "1419120"
  },
  {
    "text": "coli braces is basically a requirement to tell ano what",
    "start": "1419120",
    "end": "1426200"
  },
  {
    "text": "your minimal or minimum SDK version is if you're using stuff from the",
    "start": "1426200",
    "end": "1433720"
  },
  {
    "text": "Android support Library um you potentially have to add a few other Imports because enko has its",
    "start": "1433720",
    "end": "1440640"
  },
  {
    "text": "own library for example for the recycler View and if you have done that next step",
    "start": "1440640",
    "end": "1449840"
  },
  {
    "text": "is something really simple because enko creates automatically any available DSL",
    "start": "1449840",
    "end": "1459000"
  },
  {
    "text": "code and instantiates it for you so in oncreate of your activity you literally",
    "start": "1459000",
    "end": "1466000"
  },
  {
    "text": "dump your DSL and will automatically be dealt with nothing more to do important though this",
    "start": "1466000",
    "end": "1473960"
  },
  {
    "text": "only is valid for activities so in this case we end up",
    "start": "1473960",
    "end": "1479279"
  },
  {
    "text": "here getting a vertical layout with two edit text and a button and it will automatically be created there's no need",
    "start": "1479279",
    "end": "1486360"
  },
  {
    "text": "to do things like set content view for example um it does all that stuff",
    "start": "1486360",
    "end": "1492679"
  },
  {
    "text": "automatically for you you can use enko in fragments",
    "start": "1492679",
    "end": "1499120"
  },
  {
    "text": "and given that we have just you know heard a lot of interesting things about fragments I wonder how interested people",
    "start": "1499120",
    "end": "1505520"
  },
  {
    "text": "still are in doing that but if you use it in fragments you use essentially on create",
    "start": "1505520",
    "end": "1511480"
  },
  {
    "text": "View and the syntax I use here for the ano",
    "start": "1511480",
    "end": "1516760"
  },
  {
    "text": "DSL is slightly different so I return a UI top element respectively the",
    "start": "1516760",
    "end": "1522640"
  },
  {
    "text": "property. view of that UI element um that uui",
    "start": "1522640",
    "end": "1528480"
  },
  {
    "text": "construct used to be required in ankko before 0.8 um it's not required anymore but in",
    "start": "1528480",
    "end": "1536279"
  },
  {
    "text": "fragments it still works really well because you want to return that View Property out to the um to the life",
    "start": "1536279",
    "end": "1544120"
  },
  {
    "text": "cycle one interesting thing is in here you'll see in the onclick the Lambda is",
    "start": "1544120",
    "end": "1550480"
  },
  {
    "text": "calling function create to do that function would actually be in the fragment currently and we'll come back",
    "start": "1550480",
    "end": "1557919"
  },
  {
    "text": "to that on the next slide cre to do was a private function",
    "start": "1557919",
    "end": "1564799"
  },
  {
    "text": "to the fragment if you deal with a lot of Anor",
    "start": "1564799",
    "end": "1570399"
  },
  {
    "text": "DSL code though it is kind of nicer to have that UI code separated from",
    "start": "1570399",
    "end": "1576360"
  },
  {
    "text": "oncreate or oncreate view or other life cycle methods and there's a concept called ankle component that allows you",
    "start": "1576360",
    "end": "1582799"
  },
  {
    "text": "to do that so you can essentially put your UI codee in their own flosses and this is how that looks like",
    "start": "1582799",
    "end": "1589679"
  },
  {
    "text": "so we basically have an edit fragment UI that is now of type anchor component for edit fragment and it overwrites create",
    "start": "1589679",
    "end": "1598000"
  },
  {
    "text": "view our DSL layout is in that view and now because we're in a separate class we",
    "start": "1598000",
    "end": "1605640"
  },
  {
    "text": "can't call create to do from anymore we have to actually refer to it by ui. now",
    "start": "1605640",
    "end": "1610919"
  },
  {
    "text": "so we just basically talk back to who owns that piece of UI which is the",
    "start": "1610919",
    "end": "1617360"
  },
  {
    "text": "fragment so that also is a requirement for the gr to do from function to",
    "start": "1617360",
    "end": "1623679"
  },
  {
    "text": "potentially change its visibility and the easiest way to do that is to make it",
    "start": "1623679",
    "end": "1628720"
  },
  {
    "text": "internal and then treat it as kind of being in the same module which is a good",
    "start": "1628720",
    "end": "1634760"
  },
  {
    "text": "idea for cotl in that in that particular use case anyway and the way how this fragment",
    "start": "1634760",
    "end": "1641039"
  },
  {
    "text": "edit fragment UI would be used as in the fragment in your uncreate view you now",
    "start": "1641039",
    "end": "1647360"
  },
  {
    "text": "just call Ed UI create view pass your Eno context in and that renders all the",
    "start": "1647360",
    "end": "1653640"
  },
  {
    "text": "view but now your UI is separated from the actual",
    "start": "1653640",
    "end": "1659120"
  },
  {
    "text": "fragment in intellig Android Studio there is also a plugin for ano",
    "start": "1659120",
    "end": "1665880"
  },
  {
    "text": "components that would look like that so you can essentially highlight your component file or you know like work in",
    "start": "1665880",
    "end": "1673000"
  },
  {
    "text": "the component file and it shows you how that ankle component object would look like",
    "start": "1673000",
    "end": "1679480"
  },
  {
    "text": "the issue though is that's the last Point here it can be very very fitly to",
    "start": "1679480",
    "end": "1684720"
  },
  {
    "text": "get actually working and currently mine is broken for example because I upgraded my cotlin to",
    "start": "1684720",
    "end": "1691039"
  },
  {
    "text": "1.04 enko to 0.9 and all of a sudden it all died in a big explosion and I'm",
    "start": "1691039",
    "end": "1696720"
  },
  {
    "text": "getting crazy null pointer exceptions when I want to run that plugin so you know keep in mind that enko and cotlin",
    "start": "1696720",
    "end": "1703159"
  },
  {
    "text": "are both kind of fluid you know they are not settled in a way that nothing",
    "start": "1703159",
    "end": "1709960"
  },
  {
    "text": "changes for month or years and if you want to be on the latest versions you sometimes run into those ISS or those",
    "start": "1709960",
    "end": "1716240"
  },
  {
    "text": "kind of issues with it you can also extend enco USL and there are multiple",
    "start": "1716240",
    "end": "1721480"
  },
  {
    "text": "ways to do that the simplest thing you could do is you can just include an XML layout into an anko DSL declaration",
    "start": "1721480",
    "end": "1729120"
  },
  {
    "text": "because it has an include um function for that that's not really awesome you",
    "start": "1729120",
    "end": "1734720"
  },
  {
    "text": "know extending anod DSL THM so if you had a proper custom component what you",
    "start": "1734720",
    "end": "1740840"
  },
  {
    "text": "essentially need to do is you need to um have two functions in your component",
    "start": "1740840",
    "end": "1747720"
  },
  {
    "text": "which are basically adding your custom component to ankko view manager so that",
    "start": "1747720",
    "end": "1753120"
  },
  {
    "text": "you can use that if you want to use them on a on the top level basically in in an",
    "start": "1753120",
    "end": "1759320"
  },
  {
    "text": "activity you have to also add those two functions here that add those two custom",
    "start": "1759320",
    "end": "1765080"
  },
  {
    "text": "views or that add your component to the activity in enko um but that's usually",
    "start": "1765080",
    "end": "1771760"
  },
  {
    "text": "all you need to add your custom component into the DSL language and then you can just go and use it with um",
    "start": "1771760",
    "end": "1779399"
  },
  {
    "text": "whatever the class name is the problem though is if you have",
    "start": "1779399",
    "end": "1785000"
  },
  {
    "text": "custom view groups that is going to be really painful currently and I don't",
    "start": "1785000",
    "end": "1790360"
  },
  {
    "text": "want to go into all the details but it comes down to a thing called L params",
    "start": "1790360",
    "end": "1795440"
  },
  {
    "text": "Eno which are the layout params not being accessible right away when we deal",
    "start": "1795440",
    "end": "1800919"
  },
  {
    "text": "with custom view groups and that's kind of an you can do it but it requires a",
    "start": "1800919",
    "end": "1806600"
  },
  {
    "text": "lot of pain to get to that point the good thing is that issue is known and there are like um two links",
    "start": "1806600",
    "end": "1813880"
  },
  {
    "text": "here one is a stack Overflow a lengthy stack Overflow discussion about that problem and the other one is a ticket",
    "start": "1813880",
    "end": "1820640"
  },
  {
    "text": "that is raised against the ankko library and a fix for that problem with the view groups is targeted for ankko 9.0 0.9 one",
    "start": "1820640",
    "end": "1829159"
  },
  {
    "text": "which should hopefully be out in a few weeks and then that problem goes away so there are a few more hidden",
    "start": "1829159",
    "end": "1834880"
  },
  {
    "text": "parts of enko let's talk about those um the first thing intent reckel",
    "start": "1834880",
    "end": "1840760"
  },
  {
    "text": "so you can do cool things like send SMS or intent Builders we'll get to that",
    "start": "1840760",
    "end": "1845919"
  },
  {
    "text": "in a second service shortcuts configuration qualifiers which are really really cool um ASN tasks and SQL",
    "start": "1845919",
    "end": "1854039"
  },
  {
    "text": "light so the intent rappers in the service shortcuts they're not really",
    "start": "1854039",
    "end": "1860279"
  },
  {
    "text": "extremely difficult and hard to explain or difficult to use it just gives you a whole bunch of functions like make call",
    "start": "1860279",
    "end": "1866960"
  },
  {
    "text": "send SMS browse if you want to browse to a certain URL and you can just go and use them and in the same way you've got",
    "start": "1866960",
    "end": "1874000"
  },
  {
    "text": "shortcuts to Android services for notification manager display manager sensor manager all kind of",
    "start": "1874000",
    "end": "1880480"
  },
  {
    "text": "things they're useful but they are not really what you would consider like the core selling point of skco really the",
    "start": "1880480",
    "end": "1888000"
  },
  {
    "text": "core selling point is the layout DSL and some of the other stuff that you're going to see in a minute or so one of",
    "start": "1888000",
    "end": "1895320"
  },
  {
    "text": "them is are the intent Builders and what is nice about them is they are syntactic sugar that basically just makes your",
    "start": "1895320",
    "end": "1902760"
  },
  {
    "text": "code look nicer and easier to write um so if you look at the top example here",
    "start": "1902760",
    "end": "1909679"
  },
  {
    "text": "this is typically what you would do to start a new activity in cotland so we create an intent pass in what we want to",
    "start": "1909679",
    "end": "1915559"
  },
  {
    "text": "start maybe add some extras to it and then we start the",
    "start": "1915559",
    "end": "1921360"
  },
  {
    "text": "activity basically what you can do is make that easier already without any",
    "start": "1921480",
    "end": "1929399"
  },
  {
    "text": "ankko thing um by just chaining up the put extras but anko gives you essentially",
    "start": "1929399",
    "end": "1935639"
  },
  {
    "text": "this way to start an activity you just say start activity pass in what activity you want and then in the um arguments",
    "start": "1935639",
    "end": "1943519"
  },
  {
    "text": "list you basically tell enko in a nice kind of natural way um what you what",
    "start": "1943519",
    "end": "1949919"
  },
  {
    "text": "data you want to pass into which fields in the extra so that is a very very nice way of um making your covero a bit",
    "start": "1949919",
    "end": "1959279"
  },
  {
    "text": "smoother and simpler to look and simpler to read the configuration qualifiers are",
    "start": "1959279",
    "end": "1964559"
  },
  {
    "text": "kind of like media queries for Android so if you're doing web stuff and you use CSS you kind of know what media queries",
    "start": "1964559",
    "end": "1971039"
  },
  {
    "text": "are it's essentially like to make sure that your CSS is appropriate for",
    "start": "1971039",
    "end": "1977120"
  },
  {
    "text": "whatever um you know state or orientation or features your device have",
    "start": "1977120",
    "end": "1985279"
  },
  {
    "text": "and what the configuration qualifiers allow you to do is run code",
    "start": "1985279",
    "end": "1991200"
  },
  {
    "text": "conditionally based on is your device in landscape mode is your device in uh in a",
    "start": "1991200",
    "end": "1998840"
  },
  {
    "text": "does it have a large screen or which UI mode are you in are you in a car maybe",
    "start": "1998840",
    "end": "2004120"
  },
  {
    "text": "are you on a watch Etc so it comes with a whole bunch of things you can use",
    "start": "2004120",
    "end": "2010200"
  },
  {
    "text": "screen features like screen size density orientation night mode RTL or smallest",
    "start": "2010200",
    "end": "2016480"
  },
  {
    "text": "width of the screen uh you can check against SDK versions from SDK and your",
    "start": "2016480",
    "end": "2021679"
  },
  {
    "text": "target SDK and you can do language so you can run code conditionally on is it",
    "start": "2021679",
    "end": "2027279"
  },
  {
    "text": "is it English Au or is it English NZ or English us for example or UI mode which",
    "start": "2027279",
    "end": "2032320"
  },
  {
    "text": "is kind of car or you know wearable stuff like that the ASN DSS is probably another big",
    "start": "2032320",
    "end": "2039559"
  },
  {
    "text": "selling code so no one enjoys working with as C but if you look at",
    "start": "2039559",
    "end": "2045559"
  },
  {
    "text": "that it all of a sudden becomes kind of even nice to look at so what happens",
    "start": "2045559",
    "end": "2051358"
  },
  {
    "text": "here is we're basically saying we'll start an asron call we want to get some result from a pet find command that's",
    "start": "2051359",
    "end": "2058280"
  },
  {
    "text": "runs against the petfinder.com API to look for cats in Beverly Hills and then basically what I want to",
    "start": "2058280",
    "end": "2065118"
  },
  {
    "text": "do is on the UI thread I want to when my data comes back bind it against some animal list and I've got some um item",
    "start": "2065119",
    "end": "2072638"
  },
  {
    "text": "click listener because that thing lives in a recycler View and that's all you need to do really that's your",
    "start": "2072639",
    "end": "2079158"
  },
  {
    "text": "asynchronous call no crazy working around all sorts of issues um with",
    "start": "2079159",
    "end": "2086679"
  },
  {
    "text": "managing different functions managing inner classes in ASM tasks it's really",
    "start": "2086679",
    "end": "2092280"
  },
  {
    "text": "as simple as that enko has two functions for that Asun and as result and they",
    "start": "2092280",
    "end": "2100119"
  },
  {
    "text": "return usually a future respectively a future with a result attached to that",
    "start": "2100119",
    "end": "2105160"
  },
  {
    "text": "the syntax of Asun has recently changed a little bit it's called do Asun now um",
    "start": "2105160",
    "end": "2111000"
  },
  {
    "text": "in the latest version of enko but the um intellig or Android Studio toolkit will",
    "start": "2111000",
    "end": "2116839"
  },
  {
    "text": "tell you that quite easily right away and then we've got SQL light um so",
    "start": "2116839",
    "end": "2124480"
  },
  {
    "text": "SQL light is usually one of those things where you have to write a lot of boil up PL code and that can be kind of ugly",
    "start": "2124480",
    "end": "2130240"
  },
  {
    "text": "with tri catch and dealing with concurrency dealing with with CED code or C references it's kind of unpleasant",
    "start": "2130240",
    "end": "2138440"
  },
  {
    "text": "enko tries to make that easier you need to use one dependency for that there's an enko SQL light dependency that gives",
    "start": "2138440",
    "end": "2146200"
  },
  {
    "text": "you a whole bunch of classes around SQL light handling and all you need to do",
    "start": "2146200",
    "end": "2152119"
  },
  {
    "text": "literally is you need to set up a class that extends from manage SQL light open",
    "start": "2152119",
    "end": "2159079"
  },
  {
    "text": "Helper and that class will basically then provide you your reference to your database what you can do then is stuff",
    "start": "2159079",
    "end": "2166480"
  },
  {
    "text": "like that you can say database. use create table here you go run my SQL and",
    "start": "2166480",
    "end": "2172400"
  },
  {
    "text": "it is that simple um if you compare that to the whole set of chain try catch",
    "start": "2172400",
    "end": "2178960"
  },
  {
    "text": "final Le you need to use if you otherwise deal with SQL light this is",
    "start": "2178960",
    "end": "2184160"
  },
  {
    "text": "really beautiful nearly what it does does is it ensures that your database is",
    "start": "2184160",
    "end": "2189680"
  },
  {
    "text": "opened and closed properly it also allows you to use the",
    "start": "2189680",
    "end": "2194960"
  },
  {
    "text": "database asynchronously if you choose to do that so you um just use ankos Asing",
    "start": "2194960",
    "end": "2200839"
  },
  {
    "text": "DSL for that the important thing though is if your SQL in your database.",
    "start": "2200839",
    "end": "2208040"
  },
  {
    "text": "statement is broken because you made a mistake in the SQL code that still needs",
    "start": "2208040",
    "end": "2213520"
  },
  {
    "text": "to be handled by you right so you will still get SE light exceptions when you",
    "start": "2213520",
    "end": "2219440"
  },
  {
    "text": "SQL breaks it doesn't abstract that way because that would be kind of the wrong",
    "start": "2219440",
    "end": "2224599"
  },
  {
    "text": "thing it abstracts the whole infrastructure away and the last thing it does it",
    "start": "2224599",
    "end": "2230520"
  },
  {
    "text": "allows you to handle cursors and passing the SQL results in a really nice and",
    "start": "2230520",
    "end": "2236640"
  },
  {
    "text": "easy way with Lambda functions um and that's something you would otherwise have to do manually as well so very",
    "start": "2236640",
    "end": "2243839"
  },
  {
    "text": "briefly before we finish let's have a quick look at enko and the other stuff that is out there so I want to mention",
    "start": "2243839",
    "end": "2250960"
  },
  {
    "text": "two libraries particularly um K Android and Covenant K Android is an extension",
    "start": "2250960",
    "end": "2258560"
  },
  {
    "text": "library for cotlin and Android specifically as the name kind of indicates and what it basically does it",
    "start": "2258560",
    "end": "2265440"
  },
  {
    "text": "gives you a set of extension functions for various",
    "start": "2265440",
    "end": "2271079"
  },
  {
    "text": "things um and I don't mean that negative it's basically a collection of all sorts",
    "start": "2271079",
    "end": "2276440"
  },
  {
    "text": "of interesting little things that can be useful for you um and the common theme behind that is let's get rid of",
    "start": "2276440",
    "end": "2282920"
  },
  {
    "text": "boilerplate code and some of the things K Android has would not exist in enko so",
    "start": "2282920",
    "end": "2288599"
  },
  {
    "text": "it's worthwhile looking at that comes with an Apache license so it can be used for anything you like those are some of",
    "start": "2288599",
    "end": "2295359"
  },
  {
    "text": "the features croid has um so view bindings text Watchers an extension for",
    "start": "2295359",
    "end": "2301520"
  },
  {
    "text": "the sear SDK version Checkers which we have in Android for in anko for example",
    "start": "2301520",
    "end": "2308079"
  },
  {
    "text": "um threat management it also has shortcuts to system services so some of the things overlap some are very",
    "start": "2308079",
    "end": "2315200"
  },
  {
    "text": "different um three quick examples the first one here in K Android is",
    "start": "2315200",
    "end": "2322280"
  },
  {
    "text": "basically just running something delayed with like which in Java would be something like Handler post",
    "start": "2322280",
    "end": "2329280"
  },
  {
    "text": "delayed and passing in a runnable or something like that second one run delayed on UI thread for example and the",
    "start": "2329280",
    "end": "2335760"
  },
  {
    "text": "third one can be used to um make sure that certain code only runs in certain",
    "start": "2335760",
    "end": "2341839"
  },
  {
    "text": "API versions or SDK versions rather so that kind of stuff is possible with K",
    "start": "2341839",
    "end": "2347319"
  },
  {
    "text": "Android as well cant in a nutshell is basically a",
    "start": "2347319",
    "end": "2352440"
  },
  {
    "text": "library to do promises with cotan and the nice thing about that is",
    "start": "2352440",
    "end": "2357920"
  },
  {
    "text": "it's extremely modular build so you have a whole bunch of packages and you can",
    "start": "2357920",
    "end": "2364359"
  },
  {
    "text": "pick and choose what you want to what you know what what you want to use in your app cant is particularly not",
    "start": "2364359",
    "end": "2369760"
  },
  {
    "text": "Android specific so you have to kind of look into what you want to do so for",
    "start": "2369760",
    "end": "2374880"
  },
  {
    "text": "example for Android a good starting point are those five libraries core Android combine jvm and functional but",
    "start": "2374880",
    "end": "2381319"
  },
  {
    "text": "there is a whole bunch of other stuff you can do with it um that comes with an MIT license which is also very friendly",
    "start": "2381319",
    "end": "2388040"
  },
  {
    "text": "to any type of code any type of work so Covenant",
    "start": "2388040",
    "end": "2393359"
  },
  {
    "text": "features are all around functional promises and doing things um along those",
    "start": "2393359",
    "end": "2401680"
  },
  {
    "text": "lines and Covenant is way more powerful than Asun in enko so if you want to go",
    "start": "2401680",
    "end": "2410880"
  },
  {
    "text": "full way you know using promises chaining promises having um stuff like",
    "start": "2410880",
    "end": "2416240"
  },
  {
    "text": "canceling some of those cords or combining them into um",
    "start": "2416240",
    "end": "2421720"
  },
  {
    "text": "into into groups of promises then Covenant is the better way to to go an",
    "start": "2421720",
    "end": "2428280"
  },
  {
    "text": "example is basically something like that we've got a task and then we can check for Success fail or something that",
    "start": "2428280",
    "end": "2435160"
  },
  {
    "text": "always will happen that's a simple use case um and Covenant provides support",
    "start": "2435160",
    "end": "2441040"
  },
  {
    "text": "for way more complex things here or alternatively we can have a promise on the UI thread we do some UI preparation",
    "start": "2441040",
    "end": "2448000"
  },
  {
    "text": "then we have a then which is the actual work and we have a success UI to update our UI so if you want to do that kind of",
    "start": "2448000",
    "end": "2454960"
  },
  {
    "text": "thing Covenant is preferable for anchor so where does it leave us some",
    "start": "2454960",
    "end": "2461119"
  },
  {
    "text": "final thoughts in terms of maturity and future cotlin one is really a big step",
    "start": "2461119",
    "end": "2467400"
  },
  {
    "text": "for the language that came out in February and we're really stable and it's really nice to um work with it's",
    "start": "2467400",
    "end": "2473960"
  },
  {
    "text": "very mature for a 1.0 release that's partly because it was 5 years or more than five years in the making um and the",
    "start": "2473960",
    "end": "2482480"
  },
  {
    "text": "feeling that kind of everyone in the cotland community seems to have is it's getting better with every release it's",
    "start": "2482480",
    "end": "2487800"
  },
  {
    "text": "really improving um they're adding new features that make sense and not",
    "start": "2487800",
    "end": "2493960"
  },
  {
    "text": "features that are just there to create like more stupid boilerplate code anko is very stable when you use it",
    "start": "2493960",
    "end": "2501359"
  },
  {
    "text": "particularly given that it's still a zero dox release but 0.9 is reasonably close to being released at some point um",
    "start": "2501359",
    "end": "2508920"
  },
  {
    "text": "it sometimes if it goes if you go from version to version might change stuff",
    "start": "2508920",
    "end": "2514440"
  },
  {
    "text": "like for example recently the Asun versus do as um it's not a major deal breaker because",
    "start": "2514440",
    "end": "2520960"
  },
  {
    "text": "at runtime it seems to be very very stable to me in every project where I used it and I started using it with like",
    "start": "2520960",
    "end": "2528040"
  },
  {
    "text": "0.5 0.6 which was like quite a while ago um anox UI declaration actually really",
    "start": "2528040",
    "end": "2534599"
  },
  {
    "text": "nice and pleasurable has more as we've seen than the layout DSL but keep in",
    "start": "2534599",
    "end": "2539880"
  },
  {
    "text": "mind that there are other Frameworks like K Android and Covenant that do that",
    "start": "2539880",
    "end": "2545599"
  },
  {
    "text": "similar kind of stuff all right so looking back what did we cover we figured out what cck and enko",
    "start": "2545599",
    "end": "2553480"
  },
  {
    "text": "are and how they related we looked at some of the related idioms and language",
    "start": "2553480",
    "end": "2558960"
  },
  {
    "text": "Concepts that are important for enko and keep in mind those are mainly extension functions and the typ safe Builders and",
    "start": "2558960",
    "end": "2566880"
  },
  {
    "text": "to some extent lambdas um because they are part of the type saafe Builders automatically we looked at the Eno DSL",
    "start": "2566880",
    "end": "2574319"
  },
  {
    "text": "and I hope it gave you at least an idea of how simple Eno DSL is when you start using",
    "start": "2574319",
    "end": "2582200"
  },
  {
    "text": "it we looked at some other parts in enko like SQL light the asyn handling and",
    "start": "2582200",
    "end": "2588400"
  },
  {
    "text": "some of the service shortcuts or manager shortcuts and I briefly introduced you",
    "start": "2588400",
    "end": "2594720"
  },
  {
    "text": "to K Android and um Covenant so that is really the overview",
    "start": "2594720",
    "end": "2602319"
  },
  {
    "text": "of cotlin at this stage I think we have about a minute left and I'm happy to",
    "start": "2602319",
    "end": "2607960"
  },
  {
    "text": "take a question I think um if anyone has a question yep",
    "start": "2607960",
    "end": "2615280"
  }
]