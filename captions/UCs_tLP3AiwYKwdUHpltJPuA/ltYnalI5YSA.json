[
  {
    "text": "[Music]",
    "start": "6990",
    "end": "10108"
  },
  {
    "text": "so who in the room is a Java developer okay this is 100% in this",
    "start": "12120",
    "end": "18080"
  },
  {
    "text": "group okay is calibrating myself so uh who H that was not everybody interesting",
    "start": "18080",
    "end": "25760"
  },
  {
    "text": "so um who has ever done any kind of hll Miranda oaml ml",
    "start": "25760",
    "end": "34120"
  },
  {
    "text": "cesil Opel something so this like okay half of",
    "start": "34120",
    "end": "40480"
  },
  {
    "text": "the audience which is interesting because um I assume if you dislike this",
    "start": "40480",
    "end": "47559"
  },
  {
    "text": "kind of langu language uh with a passion you would not be here so I assume that",
    "start": "47559",
    "end": "53160"
  },
  {
    "text": "you like it which is good and you I assume you want to see how it would work on the jvm how it can possibly work on",
    "start": "53160",
    "end": "59399"
  },
  {
    "text": "the jvm maybe and um when I started my Endeavor",
    "start": "59399",
    "end": "65600"
  },
  {
    "text": "when I when I looked into hcll my impression was that I'm the only one of the pl on the planet that is Java",
    "start": "65600",
    "end": "73040"
  },
  {
    "text": "and hll at the same time and I'm really I'm surprised and I'm pleasantly",
    "start": "73040",
    "end": "78720"
  },
  {
    "text": "surprised to see that there's an overlap that of course we are addressing",
    "start": "78720",
    "end": "84920"
  },
  {
    "text": "with FR we are uh but also we addressing the second group so so people that have not",
    "start": "84920",
    "end": "91840"
  },
  {
    "text": "yet seen these languages and would and are kind of curious on what is different",
    "start": "91840",
    "end": "97079"
  },
  {
    "text": "we will focus also on in the first half of the talk on what is different that's me de Kik I work for",
    "start": "97079",
    "end": "104000"
  },
  {
    "text": "canoe in Basel Switzerland to begin with and",
    "start": "104000",
    "end": "111159"
  },
  {
    "text": "particularly for the second group that has mainly done imperative programming in the",
    "start": "111159",
    "end": "117759"
  },
  {
    "text": "past I'd like to read read you a program and I'll ask you what that program",
    "start": "117759",
    "end": "125079"
  },
  {
    "text": "does okay that's kind of a challenge in the afternoon little bit five lines of",
    "start": "125079",
    "end": "130119"
  },
  {
    "text": "code contains three variables a b and c and when I say A equals 1 that has value",
    "start": "130119",
    "end": "136560"
  },
  {
    "text": "semantics meaning that the value one gets assigned to the variable a a equals",
    "start": "136560",
    "end": "141599"
  },
  {
    "text": "one like like written you know okay is that okay for everybody so here's the challenge five lines of code",
    "start": "141599",
    "end": "150920"
  },
  {
    "text": "a equal 1 got it b equal",
    "start": "151160",
    "end": "159680"
  },
  {
    "text": "2 C equals",
    "start": "159680",
    "end": "164560"
  },
  {
    "text": "b b equals a a equal",
    "start": "165680",
    "end": "174599"
  },
  {
    "text": "C what is that code doing somehow some I guess",
    "start": "176800",
    "end": "183200"
  },
  {
    "text": "my my where is that the other",
    "start": "183200",
    "end": "189080"
  },
  {
    "text": "side it's getting worse you know when you try to optimize get gets",
    "start": "194200",
    "end": "200799"
  },
  {
    "text": "worse does anybody have a shaver with them so anyway so um ideas what the what",
    "start": "200799",
    "end": "207560"
  },
  {
    "text": "the program was doing flipping to values very good there was",
    "start": "207560",
    "end": "213360"
  },
  {
    "text": "somebody in the audience so um I'll now give you a mind read of uh what your",
    "start": "213360",
    "end": "219159"
  },
  {
    "text": "mind was doing when trying to follow this program so now comes to the",
    "start": "219159",
    "end": "224920"
  },
  {
    "text": "engineering part I going to need this for the live",
    "start": "224920",
    "end": "232159"
  },
  {
    "text": "coding anyway so you have to cope with that I feel good so um",
    "start": "232159",
    "end": "240560"
  },
  {
    "text": "a equals 1 so there's a memory location for the variable a which now contains one b equals",
    "start": "240560",
    "end": "247959"
  },
  {
    "text": "2 here you go C equals B okay A and B stay the same but then",
    "start": "247959",
    "end": "256639"
  },
  {
    "text": "the value from b gets copied over to the location C",
    "start": "256639",
    "end": "262530"
  },
  {
    "text": "[Music] mhm b equals a so A and C stay the same",
    "start": "262530",
    "end": "268240"
  },
  {
    "text": "but then the value in the location of a gets copied",
    "start": "268240",
    "end": "273880"
  },
  {
    "text": "over mhm a equal C so B and C say stay the same but what was once copied over",
    "start": "273880",
    "end": "281840"
  },
  {
    "text": "which was initially the value of B now gets copied over to",
    "start": "281840",
    "end": "287160"
  },
  {
    "text": "a h so this is um the steps that we have to follow the",
    "start": "287160",
    "end": "294600"
  },
  {
    "text": "we follow in our head we follow these operations and as engineers on the Java",
    "start": "294600",
    "end": "300479"
  },
  {
    "text": "platform mainly using imperative code this is the kind of reasoning that we",
    "start": "300479",
    "end": "305600"
  },
  {
    "text": "apply every day we are also a self- selected group you know people that have",
    "start": "305600",
    "end": "311600"
  },
  {
    "text": "immense difficulties doing this kind of mental juggling they don't stay in programming",
    "start": "311600",
    "end": "317759"
  },
  {
    "text": "very long it's too frustrating for them uh but I guess you also agree that",
    "start": "317759",
    "end": "325919"
  },
  {
    "text": "um for this rather primitive operation of flipping or swapping to value use",
    "start": "325919",
    "end": "331280"
  },
  {
    "text": "the the number of steps and the amount of considerations that we have to do is",
    "start": "331280",
    "end": "336880"
  },
  {
    "text": "rather High the price is rather high for a little outcome and this is because not only do",
    "start": "336880",
    "end": "344120"
  },
  {
    "text": "we have to care about three different places our brain is rather good in caring about places but the brain is not",
    "start": "344120",
    "end": "350759"
  },
  {
    "text": "very good in caring about these places at various points in",
    "start": "350759",
    "end": "356919"
  },
  {
    "text": "time and why do we have time at all in this thing this is because of",
    "start": "358000",
    "end": "365680"
  },
  {
    "text": "assignments assignments introduce the notion of time in code everything that",
    "start": "365680",
    "end": "370960"
  },
  {
    "text": "happened before the assignment and everything be that happened behind uh after the assignment this is where you",
    "start": "370960",
    "end": "377360"
  },
  {
    "text": "get the time into the equation here and that means that even for this",
    "start": "377360",
    "end": "382440"
  },
  {
    "text": "primitive operation we have to care about nine different states as you see here the initial ones over here is just",
    "start": "382440",
    "end": "389759"
  },
  {
    "text": "a definition but then we have nine different states the shortterm memory of the",
    "start": "389759",
    "end": "395840"
  },
  {
    "text": "average human and I'm pretty sure you're above that number is uh nine you can",
    "start": "395840",
    "end": "402400"
  },
  {
    "text": "manage nine places the average is S Plus - 2 Min is",
    "start": "402400",
    "end": "409080"
  },
  {
    "text": "five and if you try to remember what happened to you when following my lines",
    "start": "409080",
    "end": "415639"
  },
  {
    "text": "of code I assume that some somewhere here",
    "start": "415639",
    "end": "420960"
  },
  {
    "text": "or here your mind gave up this is how you can judge you you can",
    "start": "420960",
    "end": "426840"
  },
  {
    "text": "estimate how big your your soter memory is because that's rather difficult for the brain and only a few brave ones have",
    "start": "426840",
    "end": "434000"
  },
  {
    "text": "followed through so thumbs up to you you you just",
    "start": "434000",
    "end": "440160"
  },
  {
    "text": "guessed that was also fine good guess so this is and because we have to follow",
    "start": "440160",
    "end": "445400"
  },
  {
    "text": "these operations to reason about the code this is called operation",
    "start": "445400",
    "end": "451520"
  },
  {
    "text": "reasoning H now if this small thing is already",
    "start": "451800",
    "end": "457960"
  },
  {
    "text": "rather difficult so difficult that most of us cannot do it in the head uh we need some tooling support for this you",
    "start": "457960",
    "end": "464680"
  },
  {
    "text": "know we need tooling support that gives us information at what point in time our",
    "start": "464680",
    "end": "470879"
  },
  {
    "text": "memory locations had what value and this is called the",
    "start": "470879",
    "end": "476639"
  },
  {
    "text": "debugger the main reason by a far margin the most important reason for a debugger",
    "start": "476639",
    "end": "483639"
  },
  {
    "text": "is this the notion of time location based programming and the notion of time",
    "start": "483639",
    "end": "492280"
  },
  {
    "text": "combined if you don't have that there's dramatically less to do for a",
    "start": "492280",
    "end": "498759"
  },
  {
    "text": "debugger and I guess you already been there so you you make a watch variable",
    "start": "498759",
    "end": "504000"
  },
  {
    "text": "on one of those and then you single step through it to see what unfolds in the operation",
    "start": "504000",
    "end": "510879"
  },
  {
    "text": "good I have recently explained this to my parents my mom is 75 years old my father",
    "start": "510879",
    "end": "518159"
  },
  {
    "text": "is 80 years old and they have no Technical Training whatsoever and they asked me boy what are you",
    "start": "518159",
    "end": "524600"
  },
  {
    "text": "doing and I said well you know what um this coffee cup over here is an A and",
    "start": "524600",
    "end": "530360"
  },
  {
    "text": "this glass of water is a b and then we we want to swap that over the I cannot",
    "start": "530360",
    "end": "535800"
  },
  {
    "text": "just put that in that no that also doesn't work so my father you have to have temporary storage over there I said",
    "start": "535800",
    "end": "543560"
  },
  {
    "text": "that's just like a programmer yeah and move that over and this over here and then struggled that around and and we do",
    "start": "543560",
    "end": "549640"
  },
  {
    "text": "this in our head I said and my parents had this face of oh poor boy this",
    "start": "549640",
    "end": "555600"
  },
  {
    "text": "explains something and U but but yeah we we figured something out I'm currently with",
    "start": "555600",
    "end": "561800"
  },
  {
    "text": "this new thing we have a new idea we call it functions and it works like so",
    "start": "561800",
    "end": "567880"
  },
  {
    "text": "we put this C cup over here and we have this glass of water over",
    "start": "567880",
    "end": "574000"
  },
  {
    "text": "here and then we leave it like so and never change it again and whoever",
    "start": "574000",
    "end": "581440"
  },
  {
    "text": "looks at this thing um always sees a consistent",
    "start": "581440",
    "end": "587440"
  },
  {
    "text": "State done Case Closed you know by",
    "start": "587920",
    "end": "593200"
  },
  {
    "text": "definition and then my father said yeah but boy you said you want to see it swapped over right so he said yes seeing",
    "start": "593200",
    "end": "600720"
  },
  {
    "text": "it swapped over is easy I took his glasses and said just imagine you these have these prism",
    "start": "600720",
    "end": "607000"
  },
  {
    "text": "glasses where you know see the left to the right and so right there those glasses on the internet if you want to",
    "start": "607000",
    "end": "614480"
  },
  {
    "text": "and then you see it like so but this interferes with nobody you can have thousand people looking at this",
    "start": "614480",
    "end": "619560"
  },
  {
    "text": "information and everybody has different glasses one is only looking at the first value and the second value and one has",
    "start": "619560",
    "end": "625640"
  },
  {
    "text": "only plus one filter on and nobody interferes with anything else with",
    "start": "625640",
    "end": "631000"
  },
  {
    "text": "anybody else and there's always a consistent State that's much easier if I would have",
    "start": "631000",
    "end": "636959"
  },
  {
    "text": "told you in the beginning uh a comma b equals B comma a you would have guessed",
    "start": "636959",
    "end": "643959"
  },
  {
    "text": "quicker what the Cod is doing pretty sure about",
    "start": "643959",
    "end": "648720"
  },
  {
    "text": "that so we have a new idea the new idea is we just get rid of these assignments",
    "start": "649440",
    "end": "656040"
  },
  {
    "text": "they seem to be dangerous and assignments are just a",
    "start": "656040",
    "end": "661399"
  },
  {
    "text": "special incarnation of statements so we just in one go statement also ruled",
    "start": "661399",
    "end": "667680"
  },
  {
    "text": "out now if you don't have statements in a programming language uh you also don't",
    "start": "667680",
    "end": "672800"
  },
  {
    "text": "need control structures anymore because control structure control the flow of",
    "start": "672800",
    "end": "677880"
  },
  {
    "text": "operations and you don't have operations anymore no statements so you don't need",
    "start": "677880",
    "end": "683800"
  },
  {
    "text": "control structures so from tomorrow morning on we do programming differently",
    "start": "683800",
    "end": "689399"
  },
  {
    "text": "no assignments no statements no control structures how would that be this would kind of it would be",
    "start": "689399",
    "end": "698360"
  },
  {
    "text": "different you know question is is that practical can we really do",
    "start": "698360",
    "end": "704880"
  },
  {
    "text": "it and there's actually two ways of doing it the blue pill and the red pill the",
    "start": "704880",
    "end": "713800"
  },
  {
    "text": "blue pill is everything that I like this track very much in the conference was a very good track interesting content lots",
    "start": "713800",
    "end": "721519"
  },
  {
    "text": "of insight about programming most of it functional programming these days but the blue pill it was the blue",
    "start": "721519",
    "end": "729000"
  },
  {
    "text": "pill that we have seen so far imposing development discipline who has been in the first",
    "start": "729000",
    "end": "735199"
  },
  {
    "text": "talk this morning in in this track some yeah okay Ching will the the ongoing the",
    "start": "735199",
    "end": "742120"
  },
  {
    "text": "repeating statement was and then we settled on a Convention of only doing",
    "start": "742120",
    "end": "747800"
  },
  {
    "text": "this you know and then we settled on the convention of never doing that so and",
    "start": "747800",
    "end": "753320"
  },
  {
    "text": "this kept us on track for functional programming you know you have to impose the discipline one way or the other",
    "start": "753320",
    "end": "759160"
  },
  {
    "text": "maybe tool supported or to some extent language supported in other languages",
    "start": "759160",
    "end": "766000"
  },
  {
    "text": "but the only language that gives you the red pill where you get rid of the old metrics thing and you enter the new",
    "start": "766000",
    "end": "772560"
  },
  {
    "text": "world of reality is using a purely functional language that doesn't even",
    "start": "772560",
    "end": "778360"
  },
  {
    "text": "have notation for assignment there is nothing there is no Syntax for",
    "start": "778360",
    "end": "784000"
  },
  {
    "text": "assignment you cannot do assignment because there's no Syntax for it there's no Syntax for statements",
    "start": "784000",
    "end": "792000"
  },
  {
    "text": "there are no control structures in the language so this kind of forces you into",
    "start": "792000",
    "end": "798839"
  },
  {
    "text": "a new way of thinking and using a new programming language or an alternative",
    "start": "798839",
    "end": "804800"
  },
  {
    "text": "programming language only makes sense if it forces you to think differently about",
    "start": "804800",
    "end": "810920"
  },
  {
    "text": "your Solutions it's not about superficial syntactical",
    "start": "810920",
    "end": "817639"
  },
  {
    "text": "differences The Superficial syntactical differences that we'll see today are only there to remind you of the",
    "start": "817639",
    "end": "824120"
  },
  {
    "text": "fundamental underlying differences and here is the our idea for",
    "start": "824120",
    "end": "831079"
  },
  {
    "text": "purely functional language I'm going to show you some code if you want you can follow the code",
    "start": "831079",
    "end": "837920"
  },
  {
    "text": "samples in uh online there's an online reppel read eval print Loop where you",
    "start": "837920",
    "end": "843639"
  },
  {
    "text": "can um try that code I'll do show a little bit of code",
    "start": "843639",
    "end": "849040"
  },
  {
    "text": "here um later I'll do a little bit of Life coding to give you the joy of",
    "start": "849040",
    "end": "854360"
  },
  {
    "text": "seeing me failing and so good so um and by the way for",
    "start": "854360",
    "end": "860600"
  },
  {
    "text": "the non-german native speakers uh the word f is a bit different difficult to",
    "start": "860600",
    "end": "866839"
  },
  {
    "text": "pronounce so you're entitled to call that free key if you want to so here it comes um we are working",
    "start": "866839",
    "end": "875759"
  },
  {
    "text": "with functions all our code is built from functions the whole language is built",
    "start": "875759",
    "end": "881120"
  },
  {
    "text": "from functions uh no surprise there's lots of language support for",
    "start": "881120",
    "end": "887160"
  },
  {
    "text": "functions because it's all it does and here's how you define one so in",
    "start": "887160",
    "end": "893000"
  },
  {
    "text": "the in the reppel let's say we Define a function called times it takes two parameters a and B",
    "start": "893000",
    "end": "900320"
  },
  {
    "text": "and returns a * B this is how you define a function uh",
    "start": "900320",
    "end": "906040"
  },
  {
    "text": "it looks somewhat unfamiliar uh first from from java",
    "start": "906040",
    "end": "911279"
  },
  {
    "text": "perspective first we don't see any types that's kind of untyped or dynamically typed what is it kind of javascrip thing",
    "start": "911279",
    "end": "919800"
  },
  {
    "text": "uh no as we will see how do we apply a function well we",
    "start": "919800",
    "end": "925240"
  },
  {
    "text": "can just",
    "start": "925240",
    "end": "928639"
  },
  {
    "text": "give the parameters like so in the most silent fashion that you can think of the",
    "start": "930560",
    "end": "936040"
  },
  {
    "text": "operator for function application is",
    "start": "936040",
    "end": "941440"
  },
  {
    "text": "space and this is actually the theme of this conference is going to new spaces",
    "start": "942279",
    "end": "948920"
  },
  {
    "text": "or something so that is um we're using space here going going to",
    "start": "948920",
    "end": "956199"
  },
  {
    "text": "space um I I like the keynote so much best keynote that I've ever seen so uh",
    "start": "956199",
    "end": "962680"
  },
  {
    "text": "we are using space here so this space over here is actually um an",
    "start": "962680",
    "end": "968399"
  },
  {
    "text": "operator that um takes this function and applies it to this",
    "start": "968399",
    "end": "974040"
  },
  {
    "text": "argument and then to the next argument we'll see how that looks like in a",
    "start": "974040",
    "end": "979319"
  },
  {
    "text": "second so uh no surprise it returns six um and we can ask the reppel for the",
    "start": "979319",
    "end": "985600"
  },
  {
    "text": "type of times as I said there is some type it's not untyped and the type looks",
    "start": "985600",
    "end": "993040"
  },
  {
    "text": "somewhat crazy we'll see what that means in a",
    "start": "993040",
    "end": "999199"
  },
  {
    "text": "second let's get some help so we had no times declared the times types are",
    "start": "999759",
    "end": "1005600"
  },
  {
    "text": "inferred we did not even declare the types of the",
    "start": "1005600",
    "end": "1010720"
  },
  {
    "text": "parameters fer and hll have Global type inference meaning if you don't want to you almost never have to write any type",
    "start": "1010720",
    "end": "1018440"
  },
  {
    "text": "and by but no matter how small or big the expression in your language is it",
    "start": "1018440",
    "end": "1023639"
  },
  {
    "text": "will always be fully type Inver so I said that",
    "start": "1023639",
    "end": "1030520"
  },
  {
    "text": "this space over here of the blank character is denoting the function",
    "start": "1030520",
    "end": "1035880"
  },
  {
    "text": "application operator well it would be a little bit more correct saying that it is the J",
    "start": "1035880",
    "end": "1042438"
  },
  {
    "text": "deposition of these two you you put them beside each each other that would be",
    "start": "1042439",
    "end": "1047480"
  },
  {
    "text": "more correct to say so but you can also you can already infer everything else",
    "start": "1047480",
    "end": "1053400"
  },
  {
    "text": "that I'm going to tell in the tell in the next five minutes from that information and that means if that is",
    "start": "1053400",
    "end": "1059000"
  },
  {
    "text": "true this means that this expression here and by the way the function",
    "start": "1059000",
    "end": "1065080"
  },
  {
    "text": "application is left associative as an operator so there is implicitly like a",
    "start": "1065080",
    "end": "1071320"
  },
  {
    "text": "parentheses here so that means that times is a function it is which is",
    "start": "1071320",
    "end": "1077600"
  },
  {
    "text": "applied to the number two what is this expression evaluating to",
    "start": "1077600",
    "end": "1084120"
  },
  {
    "text": "well since it is just opposed to the three it must evaluate to",
    "start": "1084120",
    "end": "1090960"
  },
  {
    "text": "a function okay so this must be a function that we later apply to",
    "start": "1090960",
    "end": "1098200"
  },
  {
    "text": "three hey your hcal all cool freak is so",
    "start": "1098200",
    "end": "1103240"
  },
  {
    "text": "if we ask the times it actually tells us this it says these arrow means we have a",
    "start": "1103240",
    "end": "1108440"
  },
  {
    "text": "function from here to here and functions always have only one argument and exactly one",
    "start": "1108440",
    "end": "1115480"
  },
  {
    "text": "argument it says well times two times sorry times here is a function that",
    "start": "1115480",
    "end": "1122919"
  },
  {
    "text": "takes an argument this one and returns as we have seen it returns a",
    "start": "1122919",
    "end": "1132240"
  },
  {
    "text": "function which takes another a which is number three and returns six",
    "start": "1132240",
    "end": "1139840"
  },
  {
    "text": "so this is how you read it and on the left hand side this is called a constraint you can read this as a Java",
    "start": "1139840",
    "end": "1146320"
  },
  {
    "text": "interface that that since we use times over here that only works for numerical",
    "start": "1146320",
    "end": "1152039"
  },
  {
    "text": "values So-Cal type class over here but I skip a little bit over that one",
    "start": "1152039",
    "end": "1160400"
  },
  {
    "text": "so if we look into these times to since we already know that this expression",
    "start": "1160400",
    "end": "1166559"
  },
  {
    "text": "denotes a function thank",
    "start": "1166559",
    "end": "1171720"
  },
  {
    "text": "you we can reference it um we can use TS",
    "start": "1171720",
    "end": "1176799"
  },
  {
    "text": "to and give it a name mhm now what can we do with that",
    "start": "1176799",
    "end": "1181960"
  },
  {
    "text": "name well we can apply it to some number giving us",
    "start": "1181960",
    "end": "1187919"
  },
  {
    "text": "six H if we ask for the type of two times what will that",
    "start": "1187919",
    "end": "1194400"
  },
  {
    "text": "be mhm um there's a number of options what could happen it takes int to int",
    "start": "1196520",
    "end": "1202679"
  },
  {
    "text": "it's a function from integer to integer why why not num to num or something",
    "start": "1202679",
    "end": "1207880"
  },
  {
    "text": "because we have already specialized it to an integer right no longer can three",
    "start": "1207880",
    "end": "1213799"
  },
  {
    "text": "be a double or a float or anything because we have already specialized it and these types must be the exact same",
    "start": "1213799",
    "end": "1223200"
  },
  {
    "text": "types they were both both of type Alpha right therefore now",
    "start": "1223400",
    "end": "1230000"
  },
  {
    "text": "you may notice this space over here and this space is there for a reason if you",
    "start": "1230000",
    "end": "1236120"
  },
  {
    "text": "think in Java terms from a Java perspective um if and you compare this",
    "start": "1236120",
    "end": "1241280"
  },
  {
    "text": "to a way that you do methods in Java you would expect there to be a formal parameter that you call right for this",
    "start": "1241280",
    "end": "1248960"
  },
  {
    "text": "argument you would like to see a formal parameter in the in your",
    "start": "1248960",
    "end": "1255480"
  },
  {
    "text": "um in your type right hm you can actually think of such a",
    "start": "1255679",
    "end": "1261760"
  },
  {
    "text": "parameter you can imagine such a parameter if you want to let's say there would be an X then for quing times two",
    "start": "1261760",
    "end": "1269240"
  },
  {
    "text": "we would also need to supply the X right is that okay this is actually like in",
    "start": "1269240",
    "end": "1276559"
  },
  {
    "text": "mathematics you can this is like an equation in mathematics you can extend",
    "start": "1276559",
    "end": "1281880"
  },
  {
    "text": "an equation but you also can cancel out terms of an equation",
    "start": "1281880",
    "end": "1289600"
  },
  {
    "text": "so if you like in Germany you say kurson right you can cancel out the ex if you",
    "start": "1289600",
    "end": "1295880"
  },
  {
    "text": "this is valid hcal including the gray ones but you can cancel out the X you can divide through",
    "start": "1295880",
    "end": "1302480"
  },
  {
    "text": "X if you that that is the analogy right actually multiplication is applying a",
    "start": "1302480",
    "end": "1310000"
  },
  {
    "text": "linear function in mathematics so that's that that is the analogy where that comes from you can cancel out the X",
    "start": "1310000",
    "end": "1315559"
  },
  {
    "text": "that's the kind of operation that you can do on",
    "start": "1315559",
    "end": "1321200"
  },
  {
    "text": "equations in all your H code your H code becomes H FR code becomes a serious of",
    "start": "1321200",
    "end": "1327039"
  },
  {
    "text": "equations that you solve and you can work with it like an",
    "start": "1327039",
    "end": "1334760"
  },
  {
    "text": "algebra which is of course not possible in any language that has statements or assignments or",
    "start": "1335480",
    "end": "1343080"
  },
  {
    "text": "time so this this canceling out of these um",
    "start": "1344000",
    "end": "1349039"
  },
  {
    "text": "terms I'd say is sometimes called curring for good reasons sometimes shling from Moses shinkle you did the",
    "start": "1349039",
    "end": "1356600"
  },
  {
    "text": "theoretical work on this but actually this kind of concept of having functions",
    "start": "1356600",
    "end": "1361640"
  },
  {
    "text": "that are used as arguments to other functions or being functions that are returned from functions is first",
    "start": "1361640",
    "end": "1368679"
  },
  {
    "text": "described by godl fer 1891 in um what was that on on he he did",
    "start": "1368679",
    "end": "1378279"
  },
  {
    "text": "so many Publications cannot say the right one the correct one on on concept of numbers or",
    "start": "1378279",
    "end": "1386159"
  },
  {
    "text": "something um it was not in the concept notation I have to look that up I forgot that anyway maybe not so important so",
    "start": "1386159",
    "end": "1393600"
  },
  {
    "text": "iner times are more specific and then we can also do function composition so we have defining a function using a",
    "start": "1393600",
    "end": "1400159"
  },
  {
    "text": "function applying a function using parts of a function and now combining",
    "start": "1400159",
    "end": "1406240"
  },
  {
    "text": "functions so let's say we do something like two times of 3 * 2 well as a Java",
    "start": "1406240",
    "end": "1415039"
  },
  {
    "text": "programmer I would assume that this now does the following it would apply three",
    "start": "1415039",
    "end": "1421279"
  },
  {
    "text": "would would evaluate 3 * 2 giving six and then applying two * to six that's",
    "start": "1421279",
    "end": "1427320"
  },
  {
    "text": "like the Java way of doing things that is called strict evaluation you always",
    "start": "1427320",
    "end": "1434279"
  },
  {
    "text": "first evaluate your parameters in a certain order mostly left to right in most languages and then you apply it",
    "start": "1434279",
    "end": "1441279"
  },
  {
    "text": "this is not the case in frean hcll because at frean HC they work",
    "start": "1441279",
    "end": "1446799"
  },
  {
    "text": "lazily they only evaluate this if needed and uh there's a good reason for",
    "start": "1446799",
    "end": "1452720"
  },
  {
    "text": "that as well so but anyway uh this returns 12 as we",
    "start": "1452720",
    "end": "1458440"
  },
  {
    "text": "expect but we can write this in a different way as well so the two times and three times",
    "start": "1458440",
    "end": "1466559"
  },
  {
    "text": "are functions and we can compose these functions into a six times H with this dot in the middle and",
    "start": "1466559",
    "end": "1475200"
  },
  {
    "text": "this dot is let's let's get some help for this and 6 * 2 we can apply this and",
    "start": "1475200",
    "end": "1481279"
  },
  {
    "text": "get the type of six * which is into in of course let's get some help for this",
    "start": "1481279",
    "end": "1486360"
  },
  {
    "text": "uh this over here is like a function f applied to the result of a function G",
    "start": "1486360",
    "end": "1493799"
  },
  {
    "text": "applied to some X right the mathematical notation you may remember this from high",
    "start": "1493799",
    "end": "1500120"
  },
  {
    "text": "school and your high school teacher may have mentioned that you can write this as the",
    "start": "1500120",
    "end": "1507399"
  },
  {
    "text": "F composed G is that correct yes correct and appli",
    "start": "1507399",
    "end": "1513919"
  },
  {
    "text": "to X so this is this term here is a new function this is our six times",
    "start": "1513919",
    "end": "1519559"
  },
  {
    "text": "right you can actually do the same trick that we did before you can put the X in again you can put the X over here 6 * x",
    "start": "1519559",
    "end": "1527440"
  },
  {
    "text": "2 * in three three times put in parentheses in the six over here it's still the same code would still",
    "start": "1527440",
    "end": "1533000"
  },
  {
    "text": "work but we already canceled it out so you can compose functions because",
    "start": "1533000",
    "end": "1539200"
  },
  {
    "text": "they're first class citizens in your language clear so far question so",
    "start": "1539200",
    "end": "1548279"
  },
  {
    "text": "far good so all this works only because we have",
    "start": "1548279",
    "end": "1555919"
  },
  {
    "text": "pure functions and since we have a lot of hcas in the",
    "start": "1555919",
    "end": "1561200"
  },
  {
    "text": "room um you know we like uh two months ago we",
    "start": "1561200",
    "end": "1567880"
  },
  {
    "text": "had the FR day at Cano in Basel and we did a lot of interviews and every",
    "start": "1567880",
    "end": "1573600"
  },
  {
    "text": "interview at some point especially when they asked why why are you here what is special and they said at some point they",
    "start": "1573600",
    "end": "1580159"
  },
  {
    "text": "said you know what it's it's pure and you feel you could feel the sh",
    "start": "1580159",
    "end": "1587120"
  },
  {
    "text": "of endorphin going through their body when they say pure and as a hulara I would say um it's",
    "start": "1587120",
    "end": "1594840"
  },
  {
    "text": "not endopin it's they have a sh of endomorphisms",
    "start": "1594840",
    "end": "1599760"
  },
  {
    "text": "so good so the why do we care about purity well if we have a Java method",
    "start": "1600039",
    "end": "1607480"
  },
  {
    "text": "under any name and we see the type signature and no implementation and we don't trust the",
    "start": "1607480",
    "end": "1615120"
  },
  {
    "text": "commments what could we tell about any any method from its type signature well",
    "start": "1615120",
    "end": "1621279"
  },
  {
    "text": "let's say type signature says I take a pair of T and U and I return something of type T what is that doing well most",
    "start": "1621279",
    "end": "1628120"
  },
  {
    "text": "likely it Returns the first element of the pair could it return null yes of course",
    "start": "1628120",
    "end": "1635799"
  },
  {
    "text": "could it throw nooter exception yes of course could it print to standard out yes of course could it lock yes of",
    "start": "1635799",
    "end": "1641320"
  },
  {
    "text": "course could it go to the database yes of course could it read from the database yes maybe um could it start the",
    "start": "1641320",
    "end": "1648640"
  },
  {
    "text": "and start third world war of course right who cares",
    "start": "1648640",
    "end": "1654799"
  },
  {
    "text": "H in fre hll if you have this kind of type signature saying I take a pair of",
    "start": "1654799",
    "end": "1660600"
  },
  {
    "text": "Alpha Beta I return Alpha for every computation that finally hals that",
    "start": "1660600",
    "end": "1668279"
  },
  {
    "text": "finally returns the only possible implementation of that is returning the",
    "start": "1668279",
    "end": "1674720"
  },
  {
    "text": "alpha nothing else can possibly happen first there is no null which means there's also no null pointer",
    "start": "1674720",
    "end": "1681240"
  },
  {
    "text": "exceptions um if there would be any kind of side effect like Reading Writing stuff so it",
    "start": "1681240",
    "end": "1688200"
  },
  {
    "text": "would be visible in the typ so long story short everything can happen here",
    "start": "1688200",
    "end": "1694919"
  },
  {
    "text": "you know exactly what happens here this is a kind of type signature where actually a tool can infer the one",
    "start": "1694919",
    "end": "1702480"
  },
  {
    "text": "possible implementation of the method there's actually tools that do it",
    "start": "1702480",
    "end": "1707600"
  },
  {
    "text": "if you want it does it's not possible for every function to do that",
    "start": "1707600",
    "end": "1715559"
  },
  {
    "text": "okay with a pure function once once we have convinced ourself that we have a",
    "start": "1715559",
    "end": "1720799"
  },
  {
    "text": "pure function and it is of course possible to write pure functions in every language you can do it in",
    "start": "1720799",
    "end": "1726279"
  },
  {
    "text": "assembler if you want right it's your developer discipline of doing it in fro H we have the type system of",
    "start": "1726279",
    "end": "1733519"
  },
  {
    "text": "telling us whether it's pure or not and because the type system reveals that information",
    "start": "1733519",
    "end": "1739360"
  },
  {
    "text": "any tool especially the compiler can use that information if we call the cosine",
    "start": "1739360",
    "end": "1747200"
  },
  {
    "text": "function with 1.0 it",
    "start": "1747200",
    "end": "1753278"
  },
  {
    "text": "returns H zero I don't know something okay if we call it again with the same",
    "start": "1753519",
    "end": "1760039"
  },
  {
    "text": "value it will return the same value you know you can memorize this you can cach",
    "start": "1760039",
    "end": "1765720"
  },
  {
    "text": "it you can since there is no notion of time anyway in a pure function you can evaluate that at any time before it's",
    "start": "1765720",
    "end": "1772679"
  },
  {
    "text": "used you can do it lazily you can do it in advance speculatively when the computers idle",
    "start": "1772679",
    "end": "1779519"
  },
  {
    "text": "anyway well let let's evaluate some Expressions you can do it concurrently",
    "start": "1779519",
    "end": "1785000"
  },
  {
    "text": "which is the big thing about concurrent programming and parallel programming without any fear of dead logs and race",
    "start": "1785000",
    "end": "1792279"
  },
  {
    "text": "conditions and whatever if you have code like time 2 three * 2 3 * to three * to three the",
    "start": "1792279",
    "end": "1802159"
  },
  {
    "text": "compiler maybe your IDE can say well let's let remove it and refactor it in",
    "start": "1802159",
    "end": "1807679"
  },
  {
    "text": "one term that we have in the beginning this is what you can only do with pure functions if you had an inure function",
    "start": "1807679",
    "end": "1814559"
  },
  {
    "text": "with a side effect let's say system current time mes here here here here here you",
    "start": "1814559",
    "end": "1822000"
  },
  {
    "text": "wouldn't want to refactor that out right certainly for a reason that you get the time at at a certain evaluation point",
    "start": "1822000",
    "end": "1829640"
  },
  {
    "text": "so you can eliminate common sub expressions and all this is an",
    "start": "1829640",
    "end": "1835880"
  },
  {
    "text": "optimization issue H and actually this opens in a huge",
    "start": "1835880",
    "end": "1844480"
  },
  {
    "text": "range of possible refactorings that the idees could now apply",
    "start": "1844480",
    "end": "1850519"
  },
  {
    "text": "safely most refactorings from the ID that you get from your Ide at the moment as a",
    "start": "1850519",
    "end": "1857240"
  },
  {
    "text": "developer are not really safe that's more like a proposal we suggest you could refactor this out into an extract",
    "start": "1857240",
    "end": "1864240"
  },
  {
    "text": "method or something you know it's not really safe as long as you cannot ensure",
    "start": "1864240",
    "end": "1869600"
  },
  {
    "text": "Purity but now it could be safe it could be marked as here's a safe one for",
    "start": "1869600",
    "end": "1875679"
  },
  {
    "text": "you please ask your IDE vendor for supporting this um this is optimization that the",
    "start": "1875679",
    "end": "1883840"
  },
  {
    "text": "the tools can do but also that the developer can do now",
    "start": "1883840",
    "end": "1889919"
  },
  {
    "text": "you may have found yourself in this position where you you have some method",
    "start": "1890880",
    "end": "1897840"
  },
  {
    "text": "it may contain a bug and you're not quite sure where the bug comes from from some State change it shouldn't be there",
    "start": "1897840",
    "end": "1903480"
  },
  {
    "text": "or you consider where's that stage actually changed or can I refector it or",
    "start": "1903480",
    "end": "1908639"
  },
  {
    "text": "can I call it is the threat safe can I call it in parallel and you don't you just don't",
    "start": "1908639",
    "end": "1914480"
  },
  {
    "text": "know so what do you do you look in to the implementation and the implementation",
    "start": "1914480",
    "end": "1920799"
  },
  {
    "text": "says well it calls A and B and C and then you go into the implementation of a and then inspect this and then into B",
    "start": "1920799",
    "end": "1926559"
  },
  {
    "text": "and B calls a b CB DB and finally you end up like",
    "start": "1926559",
    "end": "1932000"
  },
  {
    "text": "so this is from an actual project so you have to inspect a r and",
    "start": "1932000",
    "end": "1937960"
  },
  {
    "text": "this is only one branch of the tree it's actually worse in reality so uh and",
    "start": "1937960",
    "end": "1945360"
  },
  {
    "text": "after a week of inspecting the code you have yourself you know that's safe I can call it",
    "start": "1945360",
    "end": "1951919"
  },
  {
    "text": "parall and you do it and then the next day some programmer of your team comes and changes let's say",
    "start": "1951919",
    "end": "1959480"
  },
  {
    "text": "here and does system out friendin because he needs",
    "start": "1959480",
    "end": "1964639"
  },
  {
    "text": "it which by the way totally undermines all your parallelism because that synchronizes on the out stream and so on",
    "start": "1964639",
    "end": "1972000"
  },
  {
    "text": "right so uh what whatever the effect of that may be maybe only perform",
    "start": "1972000",
    "end": "1977840"
  },
  {
    "text": "performance drop or whatever he has no chance of knowing that you made this silent",
    "start": "1977840",
    "end": "1984519"
  },
  {
    "text": "assumption you have no chance of knowing that he has broken your silent assumption it's all full of Silent",
    "start": "1984519",
    "end": "1991519"
  },
  {
    "text": "assumptions and this is the cause of bugs how to get around this manual",
    "start": "1991519",
    "end": "1997760"
  },
  {
    "text": "inspection doesn't work so the only thing is we can ask the typ system if the type system tells us and keeps it in",
    "start": "1997760",
    "end": "2005440"
  },
  {
    "text": "place that all this is pure then we don't have to inspect it",
    "start": "2005440",
    "end": "2010840"
  },
  {
    "text": "anymore we can ask the type",
    "start": "2010840",
    "end": "2014880"
  },
  {
    "text": "system well I have to go one back and type system now pretty much every",
    "start": "2016480",
    "end": "2023080"
  },
  {
    "text": "language on the J Here Comes now the next five minutes comes the big",
    "start": "2023080",
    "end": "2028679"
  },
  {
    "text": "difference of FR between all other JV languages and unique point of V that",
    "start": "2028679",
    "end": "2035200"
  },
  {
    "text": "I've not seen in any other language so far and it comes from this point here uh",
    "start": "2035200",
    "end": "2040880"
  },
  {
    "text": "let's say I have a super duper language it ensures Purity through the type",
    "start": "2040880",
    "end": "2046320"
  },
  {
    "text": "system here in this in this code while with the type system but down here or",
    "start": "2046320",
    "end": "2052638"
  },
  {
    "text": "somewhere I mean somewhere more up the the call chain is a call into Java I",
    "start": "2052639",
    "end": "2058839"
  },
  {
    "text": "call into Java oh system of print L current time Millies whatever some Java",
    "start": "2058839",
    "end": "2066200"
  },
  {
    "text": "method hm pretty much every jvm language goes to the root of saying well as soon as you",
    "start": "2066200",
    "end": "2072358"
  },
  {
    "text": "call into Java all bets are off right your",
    "start": "2072359",
    "end": "2078520"
  },
  {
    "text": "fault well it doesn't help so much right FR goes a different route FR says well",
    "start": "2078520",
    "end": "2084878"
  },
  {
    "text": "we we we do not combine on that level we make a very clear distinction between",
    "start": "2084879",
    "end": "2090599"
  },
  {
    "text": "our purely functional world and the",
    "start": "2090599",
    "end": "2095800"
  },
  {
    "text": "objectoriented well is estblished imperative Java V we make an extremely",
    "start": "2095919",
    "end": "2101720"
  },
  {
    "text": "clear distinction we can call both ways but we do not mix we do not mix the two",
    "start": "2101720",
    "end": "2108920"
  },
  {
    "text": "paradigms we keep our side clean if you want to call from fra into",
    "start": "2108920",
    "end": "2116240"
  },
  {
    "text": "sorry from java into frga that's the easy part because frga compiles to Java",
    "start": "2116240",
    "end": "2121680"
  },
  {
    "text": "source code it generates Java source code and then uses Java C to compile it to bite code so you have Java sour code",
    "start": "2121680",
    "end": "2128320"
  },
  {
    "text": "laying around well this you can call from any Java module anyway so that's",
    "start": "2128320",
    "end": "2134560"
  },
  {
    "text": "Java to Java actually fine if you want to see what kind of",
    "start": "2134560",
    "end": "2139960"
  },
  {
    "text": "java code generates you can even ask the reppel for give me the Java version of this frer",
    "start": "2139960",
    "end": "2147280"
  },
  {
    "text": "code from frga to Java is the interesting part well now we have to",
    "start": "2147280",
    "end": "2153280"
  },
  {
    "text": "distinguish we have to declare and we have to it's not optional we have to",
    "start": "2153280",
    "end": "2158839"
  },
  {
    "text": "declare our silent assumptions about what the Java code is doing that may be",
    "start": "2158839",
    "end": "2165400"
  },
  {
    "text": "hidden in the implementation or maybe in the API dog whatever our assumptions become",
    "start": "2165400",
    "end": "2171599"
  },
  {
    "text": "explicit we have to declare explicitly what we think the type of the Java method would",
    "start": "2171599",
    "end": "2179880"
  },
  {
    "text": "be in Fr terms so for example Javan net URL",
    "start": "2179880",
    "end": "2185480"
  },
  {
    "text": "encoder encode is a static function you may know that and it is string to",
    "start": "2185480",
    "end": "2191839"
  },
  {
    "text": "string you give it a string it returns a string string is immutable it does no side effects only works on the",
    "start": "2191839",
    "end": "2198400"
  },
  {
    "text": "parameters it is pure I can call it now from frga as en",
    "start": "2198400",
    "end": "2205000"
  },
  {
    "text": "code this is the method that I assigned to it say deic and then it replaces blank with I don't know per 20 or",
    "start": "2205000",
    "end": "2213040"
  },
  {
    "text": "something fine all nice and tidy right everything is still",
    "start": "2213040",
    "end": "2218280"
  },
  {
    "text": "pure when I use this method when I use this function my code is still",
    "start": "2218280",
    "end": "2223599"
  },
  {
    "text": "pure we have other methods and actually most methods are impure let's say poster",
    "start": "2223599",
    "end": "2230280"
  },
  {
    "text": "child is current time mes it takes just like a damage parameter if you want and",
    "start": "2230280",
    "end": "2236319"
  },
  {
    "text": "returns well this is a long in Java but we say well it's not only a long it's an",
    "start": "2236319",
    "end": "2242920"
  },
  {
    "text": "IO long and this because now the the long is somehow tainted you know it's it's",
    "start": "2242920",
    "end": "2250000"
  },
  {
    "text": "dirty you know if you the type system now knows that this is a dirty one and",
    "start": "2250000",
    "end": "2255880"
  },
  {
    "text": "iol long is actually more like an an action it's not the long itself it's the action that you would give you the",
    "start": "2255880",
    "end": "2262400"
  },
  {
    "text": "long and I can call the milles but just giving it the unit but if I would like",
    "start": "2262400",
    "end": "2267760"
  },
  {
    "text": "to if I want to call it I must be it makes myself dirty but especially if I",
    "start": "2267760",
    "end": "2273680"
  },
  {
    "text": "want to kind of um do arithmetic with it this does not compile it says when mise",
    "start": "2273680",
    "end": "2280560"
  },
  {
    "text": "is not a long you cannot calculate with an iio long first you yourself have to",
    "start": "2280560",
    "end": "2286760"
  },
  {
    "text": "become dirty you have to tend yourself with IO and then I would give you the long",
    "start": "2286760",
    "end": "2292960"
  },
  {
    "text": "and then you can do whatever you want to do but it will make you dirty so the caller gets dirty and everybody who",
    "start": "2292960",
    "end": "2300319"
  },
  {
    "text": "calls me will also get dirty and him and him and him until Maine Maine is of course dirty it does something yeah it's",
    "start": "2300319",
    "end": "2308720"
  },
  {
    "text": "not heating up the CPU it's it's doing something so that is the key distinction",
    "start": "2308720",
    "end": "2316000"
  },
  {
    "text": "between all to to all other languages on the jbm actually the that was the point that",
    "start": "2316000",
    "end": "2323599"
  },
  {
    "text": "sold me on the project when I saw this I thought like you know there's somebody who knows what he's",
    "start": "2323599",
    "end": "2331520"
  },
  {
    "text": "doing so long story short you can from F call into Java bit",
    "start": "2331920",
    "end": "2338200"
  },
  {
    "text": "it's kind of an intimate thing don't do it unprotected so so second second thing",
    "start": "2338200",
    "end": "2344280"
  },
  {
    "text": "that you now get is that you have a global type",
    "start": "2344280",
    "end": "2349520"
  },
  {
    "text": "inference since you have no statements and no assignments and no control structures from",
    "start": "2349520",
    "end": "2356760"
  },
  {
    "text": "this and this is difficult to reveal in these 50 minutes from this you get an",
    "start": "2356760",
    "end": "2362640"
  },
  {
    "text": "amount of structural safety about your code the code is actually like it was",
    "start": "2362640",
    "end": "2368560"
  },
  {
    "text": "knowing what you're doing and don't let you break out and re and use things in",
    "start": "2368560",
    "end": "2373800"
  },
  {
    "text": "uncertain context and so on so it knows structurally very well what you're doing",
    "start": "2373800",
    "end": "2380319"
  },
  {
    "text": "and guides you to correct Solutions so we have much more safety and for very",
    "start": "2380319",
    "end": "2388520"
  },
  {
    "text": "little for very small price so if you don't want to pay any price at all you just don't do anything in the type",
    "start": "2388520",
    "end": "2395240"
  },
  {
    "text": "system right you still get the type safety and here is um how you going to",
    "start": "2395240",
    "end": "2402319"
  },
  {
    "text": "use it it is all your pure computations are like Islands in a sea of imperative",
    "start": "2402319",
    "end": "2408160"
  },
  {
    "text": "code in a sea of dirty code you have things that are mutable in your maybe",
    "start": "2408160",
    "end": "2414920"
  },
  {
    "text": "Java even Java based um application and that does IO and mutable IO and",
    "start": "2414920",
    "end": "2420359"
  },
  {
    "text": "databases and whatnot but inside you have islands of pure computations that way can reason",
    "start": "2420359",
    "end": "2428079"
  },
  {
    "text": "about equationally that's the idea and the type system ensures that once that",
    "start": "2428079",
    "end": "2436280"
  },
  {
    "text": "somebody is dirty he cannot Escape anymore it is like a context that you cannot",
    "start": "2436280",
    "end": "2441319"
  },
  {
    "text": "escape and in the first part those are threat safe by",
    "start": "2441319",
    "end": "2447079"
  },
  {
    "text": "construction and if you have any error in your in your um multi threading or",
    "start": "2447079",
    "end": "2452760"
  },
  {
    "text": "parallel whatever solution you can exclude a huge number of possible errors you don't have to look inside",
    "start": "2452760",
    "end": "2460280"
  },
  {
    "text": "those because they cannot fail and then like technically these things over here are called monets",
    "start": "2460280",
    "end": "2466640"
  },
  {
    "text": "however get over it it's just a name and I'm going to show you um some",
    "start": "2466640",
    "end": "2473880"
  },
  {
    "text": "life coding I guess we we will maybe do a little uh I made a few minutes more than",
    "start": "2473880",
    "end": "2482359"
  },
  {
    "text": "than 50 um and this is the fbas problem who has ever heard about fiz buz or almost",
    "start": "2482359",
    "end": "2489960"
  },
  {
    "text": "everybody so you count numbers and for every third number you say Fizz and for every fifth number you say",
    "start": "2489960",
    "end": "2495560"
  },
  {
    "text": "buzz and then you're counting from one to 100 like this it's uh it's very often",
    "start": "2495560",
    "end": "2500839"
  },
  {
    "text": "an interview question and job interviews some people say it's a children's game some people use it as a drinking game",
    "start": "2500839",
    "end": "2508839"
  },
  {
    "text": "anyway and if you ask on the um on the internet for possible implementations of",
    "start": "2508839",
    "end": "2514240"
  },
  {
    "text": "that here is hit number one this happens to be an imperative code",
    "start": "2514240",
    "end": "2520079"
  },
  {
    "text": "and it's actually it's Java but it's the point is not that this is Java there's much better Solutions in Java as well",
    "start": "2520079",
    "end": "2526680"
  },
  {
    "text": "but this is kind of the conventional way of writing it in Java and the point is that this is",
    "start": "2526680",
    "end": "2532560"
  },
  {
    "text": "typical imperative you can write this in C A C solution would also be like so you have a for Loop and lots of changing",
    "start": "2532560",
    "end": "2540520"
  },
  {
    "text": "State and then you have to think about you know the the point where three and five comes together this is as at uh 15",
    "start": "2540520",
    "end": "2548280"
  },
  {
    "text": "and we have to cover this case first and then comes the other two other cases special cases and then comes the general",
    "start": "2548280",
    "end": "2554359"
  },
  {
    "text": "case and yeah okay that's kind of typical code who would have written this",
    "start": "2554359",
    "end": "2559559"
  },
  {
    "text": "kind of code to solve the problem Oh at least two or three very good last time I",
    "start": "2559559",
    "end": "2565760"
  },
  {
    "text": "asked that devox nobody was and that was a lie of course okay",
    "start": "2565760",
    "end": "2572280"
  },
  {
    "text": "so that that is kind of the conventional way and as as I thought the idea about a",
    "start": "2572280",
    "end": "2577680"
  },
  {
    "text": "new language is it should make you think",
    "start": "2577680",
    "end": "2582640"
  },
  {
    "text": "differently about the problem and a possible solution so let's",
    "start": "2584000",
    "end": "2590079"
  },
  {
    "text": "say if we call the frle that's this is Java fix make this a little bit bigger",
    "start": "2590079",
    "end": "2597319"
  },
  {
    "text": "command B this is written in frer it is using Java effic um G",
    "start": "2597319",
    "end": "2603800"
  },
  {
    "text": "components anyway so the first first thing is",
    "start": "2603800",
    "end": "2609040"
  },
  {
    "text": "um we have no for Loop yuck okay we cannot do this go",
    "start": "2609040",
    "end": "2618040"
  },
  {
    "text": "home uh okay we can what we can do is we can use like like of an a stream an",
    "start": "2618040",
    "end": "2623400"
  },
  {
    "text": "infinite sequence of numbers this is something that we have available and it",
    "start": "2623400",
    "end": "2629000"
  },
  {
    "text": "is denoted like so one dot dot and if we evaluate this",
    "start": "2629000",
    "end": "2636160"
  },
  {
    "text": "it gives us all natural numbers whereas the repple is",
    "start": "2636160",
    "end": "2641599"
  },
  {
    "text": "intelligent enough of not giving us all natural numbers but because of lazy evaluation",
    "start": "2641599",
    "end": "2649079"
  },
  {
    "text": "we can actually limit this okay anyway this automatic well we need those since we want to print it not as the number",
    "start": "2649079",
    "end": "2656720"
  },
  {
    "text": "but as the string so we are we taking this and we",
    "start": "2656720",
    "end": "2661760"
  },
  {
    "text": "are mapping every single element in its two string representation",
    "start": "2661760",
    "end": "2667240"
  },
  {
    "text": "mapping this and then on fer and hll it's called show instead of two string",
    "start": "2667240",
    "end": "2673720"
  },
  {
    "text": "and we're taking this one dip dip we see this as strings is it visible",
    "start": "2673720",
    "end": "2681000"
  },
  {
    "text": "from the back is that yeah okay so um and we give it a name this is",
    "start": "2681000",
    "end": "2687599"
  },
  {
    "text": "the numbers okay let's let's again check numbers is a list of strings good",
    "start": "2687599",
    "end": "2695520"
  },
  {
    "text": "numbers is this now we need some kind of notion",
    "start": "2695520",
    "end": "2701119"
  },
  {
    "text": "where we say every third is a Fizz okay how how can we do this",
    "start": "2701119",
    "end": "2709640"
  },
  {
    "text": "well we have a list it is an empty string and an empty",
    "start": "2711119",
    "end": "2716440"
  },
  {
    "text": "string and a Fizz okay and that if we want to have an",
    "start": "2716440",
    "end": "2723680"
  },
  {
    "text": "endless repetition an infinite repetition of that we can say well please cycle over",
    "start": "2723680",
    "end": "2730160"
  },
  {
    "text": "it give this did F did F did F endless",
    "start": "2730160",
    "end": "2735200"
  },
  {
    "text": "Rhythm cool let's give it a name the",
    "start": "2735200",
    "end": "2740838"
  },
  {
    "text": "fizzes that hm how about buzzes well you",
    "start": "2741119",
    "end": "2746920"
  },
  {
    "text": "already know the trick we make the same for buzzes",
    "start": "2746920",
    "end": "2754079"
  },
  {
    "text": "this I could use the repeat here but anyway make this bit easier",
    "start": "2754960",
    "end": "2762280"
  },
  {
    "text": "buzzes so what are the buzzes buzzz",
    "start": "2762280",
    "end": "2769880"
  },
  {
    "text": "Buzz well but the requirements say we have to kind of combine fizzes and",
    "start": "2769880",
    "end": "2775359"
  },
  {
    "text": "buzzes this this is business rules right and if they come together the fizzes",
    "start": "2775359",
    "end": "2780640"
  },
  {
    "text": "must come first and then the buzzes s if if there's some kind of overlap so we",
    "start": "2780640",
    "end": "2786119"
  },
  {
    "text": "make ourselves a pattern from this from we have two infinite Productions of",
    "start": "2786119",
    "end": "2792040"
  },
  {
    "text": "strings and we combine them element Vice Zip Zip Zip Zip Zip and it's called zip",
    "start": "2792040",
    "end": "2799040"
  },
  {
    "text": "like a zipper on your pants right so this is our pattern equals it's called zip and we",
    "start": "2799040",
    "end": "2807240"
  },
  {
    "text": "zipping it with a function they all zip withth and the function that we use is string",
    "start": "2807240",
    "end": "2812920"
  },
  {
    "text": "concatenation which looks like which is denoted by Plus+ and we're using the",
    "start": "2812920",
    "end": "2819720"
  },
  {
    "text": "fizzes and the buzzes to do that so what is the",
    "start": "2819720",
    "end": "2826599"
  },
  {
    "text": "pattern fiz Buzz F buzz and number 15 is",
    "start": "2826800",
    "end": "2835680"
  },
  {
    "text": "fisas so far so good but not now about the numbers we have to bring the numbers",
    "start": "2835680",
    "end": "2841559"
  },
  {
    "text": "in and okay we can also zip the numbers but what is the function that we can zip",
    "start": "2841559",
    "end": "2848400"
  },
  {
    "text": "the numbers with well here comes a little trick that I did not do in the initial version of",
    "start": "2848400",
    "end": "2854240"
  },
  {
    "text": "this but which was contributed by kathlyn hen and it has a nice observation and it",
    "start": "2854240",
    "end": "2861000"
  },
  {
    "text": "is strings have an ordering and the empty string is always considered the",
    "start": "2861000",
    "end": "2866200"
  },
  {
    "text": "smallest and then come strings that only are composed of digits and if you have",
    "start": "2866200",
    "end": "2872480"
  },
  {
    "text": "any string that starts with a non digited alpha numeric character",
    "start": "2872480",
    "end": "2877599"
  },
  {
    "text": "this is considered higher than those right so you can use the maximum function this kind of interesting so the",
    "start": "2877599",
    "end": "2886319"
  },
  {
    "text": "actual fbz is the zip",
    "start": "2886319",
    "end": "2893040"
  },
  {
    "text": "width the maximum function of the",
    "start": "2893040",
    "end": "2899000"
  },
  {
    "text": "numbers and the pattern got",
    "start": "2899000",
    "end": "2904160"
  },
  {
    "text": "it that looks like you know business process something business process",
    "start": "2904160",
    "end": "2911760"
  },
  {
    "text": "modeling also okay so what is",
    "start": "2911760",
    "end": "2917200"
  },
  {
    "text": "fbus here we have the first so many right but since the the original",
    "start": "2917359",
    "end": "2924000"
  },
  {
    "text": "statement was we have to print the numbers so but what we have here it",
    "start": "2924000",
    "end": "2929319"
  },
  {
    "text": "looks like an infinite list but of course there is no infinite list there's nothing that occupies all",
    "start": "2929319",
    "end": "2936079"
  },
  {
    "text": "our memory or that's not the case it is actually more like an iterator like a lazy sequence like a",
    "start": "2936079",
    "end": "2942720"
  },
  {
    "text": "stream all those things are the same in lazy languages so what we can do we can",
    "start": "2942720",
    "end": "2949760"
  },
  {
    "text": "actually iterate over that long stream and now what is the function name that",
    "start": "2949760",
    "end": "2958400"
  },
  {
    "text": "takes an infinite production of things an iteration over things and applies",
    "start": "2958400",
    "end": "2964200"
  },
  {
    "text": "some logic to it how's that functioning",
    "start": "2964200",
    "end": "2968720"
  },
  {
    "text": "name map would apply e element wise and I want to produce an effect right print",
    "start": "2969240",
    "end": "2975880"
  },
  {
    "text": "L I want I want to print something out apply could be one",
    "start": "2975880",
    "end": "2981920"
  },
  {
    "text": "for because it's actually the same thing as a for Loop",
    "start": "2981920",
    "end": "2988319"
  },
  {
    "text": "for FSB print",
    "start": "2988319",
    "end": "2993839"
  },
  {
    "text": "Lin can you see yeah I get goosebumps when I write",
    "start": "2994440",
    "end": "2999640"
  },
  {
    "text": "this how nice is that so actually so fiz buz would be nice but this would be an",
    "start": "2999640",
    "end": "3006280"
  },
  {
    "text": "endless production of print lens we have to limit this right so we have to limit",
    "start": "3006280",
    "end": "3011640"
  },
  {
    "text": "it we say we only take the first um sorry take 100 of",
    "start": "3011640",
    "end": "3018880"
  },
  {
    "text": "those fisers and entries",
    "start": "3018880",
    "end": "3023960"
  },
  {
    "text": "keep calm keep calm we actually be running out of time",
    "start": "3027720",
    "end": "3034480"
  },
  {
    "text": "so I'm I take some Liberty and since the organizer granted me in additional 10",
    "start": "3034480",
    "end": "3041920"
  },
  {
    "text": "minutes I I'll do that okay as long as nobody's leaving early",
    "start": "3041920",
    "end": "3049400"
  },
  {
    "text": "so I'll I'd like to interpret this uh result a little so you'll find that in",
    "start": "3049400",
    "end": "3055319"
  },
  {
    "text": "the um in the download as well it's in the",
    "start": "3055319",
    "end": "3060640"
  },
  {
    "text": "slide deck so but if we look into this uh um two operations you will see that",
    "start": "3060640",
    "end": "3067400"
  },
  {
    "text": "the imperative Solutions has four conditionals four conditionals that we",
    "start": "3067400",
    "end": "3074160"
  },
  {
    "text": "have to think through whereas The Logical one has zero conditionals where",
    "start": "3074160",
    "end": "3079960"
  },
  {
    "text": "do bugs creep in in conditionals particularly in nested conditionals and",
    "start": "3079960",
    "end": "3086440"
  },
  {
    "text": "uh the nesting level is if you do the if else and four cyclomatic complexity is",
    "start": "3086440",
    "end": "3092240"
  },
  {
    "text": "three and here it is zero the number of operators is seven",
    "start": "3092240",
    "end": "3098200"
  },
  {
    "text": "and most implementations actually have a little bit more because they do not use the 15 but they do three and five and so",
    "start": "3098200",
    "end": "3104599"
  },
  {
    "text": "on so there actually more and here we have the plus plus on strings um which",
    "start": "3104599",
    "end": "3112520"
  },
  {
    "text": "we actually use as a function and not as an operator but I give you that one okay",
    "start": "3112520",
    "end": "3118599"
  },
  {
    "text": "wouldn't want to argue over that this the sequencing here is is",
    "start": "3118599",
    "end": "3124720"
  },
  {
    "text": "extremely sensitive to reorderings almost any reordering of these lines will make a wrong solution",
    "start": "3124720",
    "end": "3132520"
  },
  {
    "text": "right you can change the three for the five over here but this is the only change that you can do every other",
    "start": "3132520",
    "end": "3138960"
  },
  {
    "text": "reordering is wrong here you can every permutation of these lines is correct",
    "start": "3138960",
    "end": "3147318"
  },
  {
    "text": "and by the way have you seen the following and when we when we worked in the repple at no point in time did I go",
    "start": "3149119",
    "end": "3157040"
  },
  {
    "text": "back and change anything that I had written before at no point in time do I",
    "start": "3157040",
    "end": "3162160"
  },
  {
    "text": "even have to recompile what I have written before that",
    "start": "3162160",
    "end": "3167720"
  },
  {
    "text": "is incremental programming",
    "start": "3167720",
    "end": "3173359"
  },
  {
    "text": "right if you're not changing what you have written before and you don't even recompile what you have written before",
    "start": "3173799",
    "end": "3180440"
  },
  {
    "text": "what can you break in the old code nothing that is big how do we write code",
    "start": "3180440",
    "end": "3187839"
  },
  {
    "text": "one line at a time incrementally and we only have to check that this line is correct how cool is",
    "start": "3187839",
    "end": "3196400"
  },
  {
    "text": "that in the other case every single change every single increment that we",
    "start": "3196400",
    "end": "3202720"
  },
  {
    "text": "want to do we cannot do this non-intrusive we have to do it intrusively we have to change the old",
    "start": "3202720",
    "end": "3210520"
  },
  {
    "text": "code we may possibly break something and this is not a thing that I",
    "start": "3210520",
    "end": "3215799"
  },
  {
    "text": "kind of made up because I kind of choose exactly this example it was like it came by total accident but what I've shown",
    "start": "3215799",
    "end": "3223160"
  },
  {
    "text": "you interactively was exactly the steps that I went through when I did it the first time it's just the natural thing",
    "start": "3223160",
    "end": "3229720"
  },
  {
    "text": "to do and it turns out to be have all these nice",
    "start": "3229720",
    "end": "3235440"
  },
  {
    "text": "characteristics and now comes maintainability so customer comes I see",
    "start": "3235440",
    "end": "3243079"
  },
  {
    "text": "Stefan roog over there so he's he is the expert on that one so customer comes and says well you know what every seventh",
    "start": "3243079",
    "end": "3250920"
  },
  {
    "text": "number should be go to",
    "start": "3250920",
    "end": "3256160"
  },
  {
    "text": "conference oh God now I have to care for the multiples",
    "start": "3256720",
    "end": "3263079"
  },
  {
    "text": "of three and the multiples of five and the multiples of seven and the multiples of three and five and",
    "start": "3263079",
    "end": "3269920"
  },
  {
    "text": "seven and the multiples of three and five in the correct",
    "start": "3269920",
    "end": "3275480"
  },
  {
    "text": "order oh no I forgot the multiples of five and seven because it was too",
    "start": "3275480",
    "end": "3282040"
  },
  {
    "text": "complicated try to get this right right it's extremely difficult and you have to touch everything that you did",
    "start": "3282040",
    "end": "3289480"
  },
  {
    "text": "before what do I do here there is um goto conference business rule",
    "start": "3289480",
    "end": "3296839"
  },
  {
    "text": "that I also zip in done right that's it so",
    "start": "3296839",
    "end": "3305880"
  },
  {
    "text": "maintainability is really bad in the imperative code and can natural easy in",
    "start": "3305880",
    "end": "3311920"
  },
  {
    "text": "The Logical code so the the uh kind of to sum to sum",
    "start": "3311920",
    "end": "3318720"
  },
  {
    "text": "up the the long talk what we get when we don't have assignments no statements no control structures only expressions",
    "start": "3318720",
    "end": "3328039"
  },
  {
    "text": "we get and this is only possible in a purely functional language or it makes a",
    "start": "3328039",
    "end": "3334119"
  },
  {
    "text": "purely functional language then we get Global type inference we can detect Purity and use",
    "start": "3334119",
    "end": "3340000"
  },
  {
    "text": "it to our advantage we can use laziness which is not possibly before and all the",
    "start": "3340000",
    "end": "3345480"
  },
  {
    "text": "kind of separation of generating the infinite stream and using the infinite stream is only possible because of",
    "start": "3345480",
    "end": "3351839"
  },
  {
    "text": "laziness otherwise this kind of solution approach wouldn't work",
    "start": "3351839",
    "end": "3357119"
  },
  {
    "text": "and we are the guarantees that we have even extend into Java calls",
    "start": "3357119",
    "end": "3362799"
  },
  {
    "text": "right we are not giving up our language guarantees that makes us robust under",
    "start": "3362799",
    "end": "3371119"
  },
  {
    "text": "parallel execution robust under composition robust under increments",
    "start": "3371119",
    "end": "3376359"
  },
  {
    "text": "robust under refactoring and it is the best way of learning",
    "start": "3376359",
    "end": "3381599"
  },
  {
    "text": "functional programming you know if you want to learn English go to England",
    "start": "3381599",
    "end": "3386760"
  },
  {
    "text": "speak English from D Dusk to Dawn the whole day long",
    "start": "3386760",
    "end": "3393079"
  },
  {
    "text": "and don't go to the native language anymore you know for some time at least that's the B best way of learning",
    "start": "3393079",
    "end": "3400119"
  },
  {
    "text": "it it forces you into a new way of thinking you will learn much",
    "start": "3400119",
    "end": "3406880"
  },
  {
    "text": "more and then it's just a pleasure to work with I know everybody says this about",
    "start": "3407839",
    "end": "3414280"
  },
  {
    "text": "his language you know but here's",
    "start": "3414280",
    "end": "3418799"
  },
  {
    "text": "true if you want to learn it you can just pick up any hairc resource there's",
    "start": "3419520",
    "end": "3425480"
  },
  {
    "text": "thousands of tutorials and what have you uh videos in in all possible forms um",
    "start": "3425480",
    "end": "3433799"
  },
  {
    "text": "you can pick those up or and then there's also any books or whatever um",
    "start": "3433799",
    "end": "3438839"
  },
  {
    "text": "there's also special free ebook for the specifics of fra that you can check out",
    "start": "3438839",
    "end": "3445200"
  },
  {
    "text": "um there's currently an massive open online course running by Eric Meyer uh",
    "start": "3445200",
    "end": "3452240"
  },
  {
    "text": "for functional programming 101 I guess it's a little bit too late to to jump on the train but maybe then next year it's",
    "start": "3452240",
    "end": "3459640"
  },
  {
    "text": "a very good um open online course it's not easy but it teaches you functional",
    "start": "3459640",
    "end": "3467200"
  },
  {
    "text": "programming that it is from my side I'm very happy to take additional questions",
    "start": "3468280",
    "end": "3477558"
  },
  {
    "text": "and we have some as I see what happens when we strong when we",
    "start": "3477680",
    "end": "3484920"
  },
  {
    "text": "wrongly annotate a Java method as pure who",
    "start": "3484920",
    "end": "3491480"
  },
  {
    "text": "decides Pure or pure native okay who who decides um who decides whether it's pure",
    "start": "3491480",
    "end": "3496799"
  },
  {
    "text": "or pure native uh you as a developer decide but um the frga type Checker will",
    "start": "3496799",
    "end": "3504440"
  },
  {
    "text": "do some plausibility checks on what you say so if you annotate something as pure",
    "start": "3504440",
    "end": "3510839"
  },
  {
    "text": "but it doesn't take any arguments no matter what it really does in the end whether it has a return value",
    "start": "3510839",
    "end": "3516960"
  },
  {
    "text": "or not if it doesn't take any arguments it's very unlikely to be pure",
    "start": "3516960",
    "end": "3522240"
  },
  {
    "text": "right if it doesn't return anything it is obviously not pure it will not allow",
    "start": "3522240",
    "end": "3528559"
  },
  {
    "text": "that one it will give you warnings and errors in these cases um if you say I'm",
    "start": "3528559",
    "end": "3535280"
  },
  {
    "text": "using Java Ule time and I'm not annotating this as so",
    "start": "3535280",
    "end": "3541799"
  },
  {
    "text": "crazy as it is typewise you know it's you can change the time and so on you can say first of October is no second of",
    "start": "3541799",
    "end": "3549280"
  },
  {
    "text": "October whatever in Java UT time if you do not annotate this correctly but",
    "start": "3549280",
    "end": "3555920"
  },
  {
    "text": "wrongly um and it happens that somebody actually changes the value you may see",
    "start": "3555920",
    "end": "3562160"
  },
  {
    "text": "an outdated value then you know somebody changes the value but FR has cached it",
    "start": "3562160",
    "end": "3567599"
  },
  {
    "text": "so you not see the updated value that will be the the effect",
    "start": "3567599",
    "end": "3574839"
  }
]