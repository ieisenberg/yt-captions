[
  {
    "text": "hi everyone uh thanks very much for coming to this session right at the end of the day um my name's Tom I live in",
    "start": "6319",
    "end": "13679"
  },
  {
    "text": "London um I'm a computer scientist and a a programmer um a lot of the talks today",
    "start": "13679",
    "end": "20680"
  },
  {
    "text": "have been very practical and Hands-On and this talk is going to be a little bit more abstract and a little bit more",
    "start": "20680",
    "end": "26640"
  },
  {
    "text": "computer sciency um I think that computer science is is fascinating for",
    "start": "26640",
    "end": "31960"
  },
  {
    "text": "its own sake really I mean aside from whatever the Practical applications of computer science might be I think it's",
    "start": "31960",
    "end": "37640"
  },
  {
    "text": "super worthwhile to understand something about what's going on inside the",
    "start": "37640",
    "end": "42920"
  },
  {
    "text": "computer like what is this magic box that we're working with every day and what are these spells that we're casting",
    "start": "42920",
    "end": "50199"
  },
  {
    "text": "on it and sometimes thinking about that stuff helps me to when I'm having a bad",
    "start": "50199",
    "end": "55760"
  },
  {
    "text": "day at work and you know my tests are failing or you know the asset pipeline isn't working or whatever it is I can",
    "start": "55760",
    "end": "61719"
  },
  {
    "text": "kind of I can float off into this slightly more abstract separate world of",
    "start": "61719",
    "end": "66920"
  },
  {
    "text": "thinking about computer science and it just kind of helps to keep my mind engaged and keep my work fun um even",
    "start": "66920",
    "end": "73400"
  },
  {
    "text": "when everything's going wrong like that so on that note I want to talk today a",
    "start": "73400",
    "end": "80159"
  },
  {
    "text": "little bit about developing an intuition about what it's possible to do with computers what we can do with computers",
    "start": "80159",
    "end": "86720"
  },
  {
    "text": "and and more particularly what we can't do what it's impossible possible to do just like if you're an engineer it's",
    "start": "86720",
    "end": "94000"
  },
  {
    "text": "important to learn about the laws of thermodynamics so that you don't spend your whole career trying to build a",
    "start": "94000",
    "end": "99720"
  },
  {
    "text": "perpetual motion machine um if you're a computer program I think it's important to know the limitations of what",
    "start": "99720",
    "end": "106360"
  },
  {
    "text": "computers can do so that you don't spend your whole life trying to get them to do things that they just",
    "start": "106360",
    "end": "113040"
  },
  {
    "text": "can't a friend of mine recently explained to me what it is that he",
    "start": "113040",
    "end": "118119"
  },
  {
    "text": "thinks is so good about J Bond movies and he said the best thing about Bond movies is that in the first 3 minutes",
    "start": "118119",
    "end": "126360"
  },
  {
    "text": "before the opening credits there's like a mini Bond movie um so there's like the",
    "start": "126360",
    "end": "132680"
  },
  {
    "text": "cold open and then you get to see James Bond and he's kind of infiltrating an enemy facility and he shoots a bad guy",
    "start": "132680",
    "end": "139879"
  },
  {
    "text": "and steals a microfilm and kisses someone and then he skis down a mountain in and then there's the opening credits",
    "start": "139879",
    "end": "147040"
  },
  {
    "text": "and if you really like Bon movies then that little three minute mini Bond film uh gets you really excited to watch the",
    "start": "147040",
    "end": "153920"
  },
  {
    "text": "whole like rest of the film that's about to happen and if you don't like Bond movies then in those first three minutes",
    "start": "153920",
    "end": "160480"
  },
  {
    "text": "you basically just like get the idea you get all of the good stuff in a bon movie really quickly and then you can just",
    "start": "160480",
    "end": "165959"
  },
  {
    "text": "kind of zone out for the whole rest of the movie and not really pay attention and then at the end when the person you",
    "start": "165959",
    "end": "171000"
  },
  {
    "text": "went with asks you like if you enjoyed it you can say yeah it was great I really like that bit where he skied down the mountain so I'm going to try and",
    "start": "171000",
    "end": "177800"
  },
  {
    "text": "make this talk a little bit like that I'm going to have a little pre-edit sequence to just give you the whole message of the talk in one slide and",
    "start": "177800",
    "end": "184200"
  },
  {
    "text": "then you can just zone out if you're if you're not interested after that so this is my kind of mini mini talk right",
    "start": "184200",
    "end": "191000"
  },
  {
    "text": "before the opening credits so if you're only paying attention to one slide please pay attention to this one",
    "start": "191000",
    "end": "198280"
  },
  {
    "text": "um it's tempting to think that we can solve anything with technology and and",
    "start": "198280",
    "end": "203920"
  },
  {
    "text": "with computers just by applying enough effort and enough Ingenuity but that is",
    "start": "203920",
    "end": "209439"
  },
  {
    "text": "not the case there are some tasks that programs can't perform and some of those",
    "start": "209439",
    "end": "215239"
  },
  {
    "text": "tasks that programs can't perform are very esoteric um and they're not things that you would directly care about but",
    "start": "215239",
    "end": "221640"
  },
  {
    "text": "there are other things that programs can't do as a consequence of the esoteric things and those other things",
    "start": "221640",
    "end": "227720"
  },
  {
    "text": "are very practical and relevant to the stuff that you and I do in our everyday",
    "start": "227720",
    "end": "233079"
  },
  {
    "text": "work so that it really programs can't do everything there is such a thing as an",
    "start": "233079",
    "end": "239120"
  },
  {
    "text": "impossible program and then if this was a bond moveie it'd be like you know the title sequence now that's sort of the",
    "start": "239120",
    "end": "244760"
  },
  {
    "text": "end of the talk so if that's all you're interested in then now you can just zone out and look at yeah thank you uh you",
    "start": "244760",
    "end": "250720"
  },
  {
    "text": "can just retweet um rate me you know High rating it's very concise talk um",
    "start": "250720",
    "end": "256079"
  },
  {
    "text": "straight to the point um if you are interested and you want to know more of",
    "start": "256079",
    "end": "262360"
  },
  {
    "text": "in a bit more detail then keep listening and I'm going to unpack that simple idea a little bit and show you some examples",
    "start": "262360",
    "end": "268199"
  },
  {
    "text": "of exactly what I'm talking about so to start showing you what I mean here",
    "start": "268199",
    "end": "274800"
  },
  {
    "text": "I'd like to walk you through how a program can be impossible and I'm going",
    "start": "274800",
    "end": "280080"
  },
  {
    "text": "to explain that by reminding you of two Facts of Life two things about the world",
    "start": "280080",
    "end": "285880"
  },
  {
    "text": "that we live in that you just can't change the first fact of life is that we",
    "start": "285880",
    "end": "292520"
  },
  {
    "text": "collectively demand Universal systems now what do I mean by a universal system",
    "start": "292520",
    "end": "298600"
  },
  {
    "text": "well I'll try and explain that by comparing two programming languages so",
    "start": "298600",
    "end": "303919"
  },
  {
    "text": "for this example I'm going to compare say Python and Ruby and by the way I",
    "start": "303919",
    "end": "309639"
  },
  {
    "text": "personally like Ruby and that's what I use and in this talk I'll be using it as a kind of executable pseudo code to",
    "start": "309639",
    "end": "316520"
  },
  {
    "text": "explain the ideas but the specific programming language doesn't matter and you have my permission to like mentally",
    "start": "316520",
    "end": "323280"
  },
  {
    "text": "translate the code on my slides into JavaScript or Java or C or whatever else you're most comfortable with",
    "start": "323280",
    "end": "331240"
  },
  {
    "text": "so it should hopefully be obvious to you that we can take any program written in",
    "start": "331240",
    "end": "336440"
  },
  {
    "text": "say Python and translate it into Ruby that's actually pretty straightforward we can go through a Python program kind",
    "start": "336440",
    "end": "343039"
  },
  {
    "text": "of one expression or statement at a time and replace each little piece of python",
    "start": "343039",
    "end": "348120"
  },
  {
    "text": "syntax with the equivalent piece of Ruby syntax and when we're done with that we",
    "start": "348120",
    "end": "353160"
  },
  {
    "text": "have the original program converted from python into Ruby and we can go in the other",
    "start": "353160",
    "end": "359280"
  },
  {
    "text": "direction as well we can take a ruby program replace every piece of it with a piece of python and then we end up with",
    "start": "359280",
    "end": "364720"
  },
  {
    "text": "an equivalent Python program so in some sense Python and Ruby are sort of",
    "start": "364720",
    "end": "370840"
  },
  {
    "text": "exactly as powerful as each other right you can just take a program written in one of them and just mechanically",
    "start": "370840",
    "end": "376680"
  },
  {
    "text": "translate it into the other one and you end up with a program written in a different language that does exactly the same thing so anything Ruby can do",
    "start": "376680",
    "end": "382319"
  },
  {
    "text": "python can do and vice versa and that's cool but there's",
    "start": "382319",
    "end": "387360"
  },
  {
    "text": "something a little bit more powerful as well which is that it's possible to write instead of just translating",
    "start": "387360",
    "end": "392759"
  },
  {
    "text": "individual python programs into Ruby we can write one special Ruby program that",
    "start": "392759",
    "end": "398400"
  },
  {
    "text": "can do what any Python program can do and what I mean by that is that we could write a python interpreter in",
    "start": "398400",
    "end": "404560"
  },
  {
    "text": "Ruby so that means that if you've got a Python program and you want to run it on my you know my Ruby virtual machine or",
    "start": "404560",
    "end": "411560"
  },
  {
    "text": "whatever then I don't need to translate it individually into a Ruby Ruby program I've already written a ruby program that",
    "start": "411560",
    "end": "417840"
  },
  {
    "text": "will do what that Python program does you provide it as input to my Ruby implementation of a python interpreter",
    "start": "417840",
    "end": "423879"
  },
  {
    "text": "and then my Ruby program that I wrote is going to do whatever that Python program says to",
    "start": "423879",
    "end": "429479"
  },
  {
    "text": "do and again we can do it the other way around as well so in both of those cases we're able to write just this one",
    "start": "429479",
    "end": "436680"
  },
  {
    "text": "magical program that is sort of sufficiently general purpose that you can feed it a program written in another",
    "start": "436680",
    "end": "442440"
  },
  {
    "text": "language and it'll just do what that program says to do and again there's nothing special about the pairing of",
    "start": "442440",
    "end": "448120"
  },
  {
    "text": "Ruby and python here I mean those two languages are quite similar but you could just as well you know write a",
    "start": "448120",
    "end": "453199"
  },
  {
    "text": "python interpreter in JavaScript or you could write a JavaScript interpreter in Python",
    "start": "453199",
    "end": "459400"
  },
  {
    "text": "right so all of these languages have got some kind of relationship with each other which is that you can Implement",
    "start": "459400",
    "end": "465120"
  },
  {
    "text": "interpreters for each for for one of them in any one of the other ones and actually there's a whole constellation",
    "start": "465120",
    "end": "470479"
  },
  {
    "text": "of systems that have this property that if you pick any one of these systems you can Implement another system in it um so",
    "start": "470479",
    "end": "477919"
  },
  {
    "text": "I could Implement a JavaScript interpreter in hascal or I could uh Implement a a ruby interpreter in the",
    "start": "477919",
    "end": "485240"
  },
  {
    "text": "Lambda calculus I don't recommend you try and do that but you know the all of these systems are sort of implementable",
    "start": "485240",
    "end": "491159"
  },
  {
    "text": "in each other and this is that sort of this is what I meant by Universal systems the property of these systems is",
    "start": "491159",
    "end": "497919"
  },
  {
    "text": "usually called universality or also called churing completeness so there's a large number",
    "start": "497919",
    "end": "504440"
  },
  {
    "text": "of these systems and they all share this property of universality and that's something that we want because Universal",
    "start": "504440",
    "end": "512599"
  },
  {
    "text": "systems are able to run software that's kind of their defining characteristic and in general we don't",
    "start": "512599",
    "end": "519959"
  },
  {
    "text": "want this situation where we have to make individual programs to do individual jobs or individual machines",
    "start": "519959",
    "end": "526560"
  },
  {
    "text": "to do individual jobs we want general purpose machines and programs we don't",
    "start": "526560",
    "end": "532200"
  },
  {
    "text": "want to every time we want to do something different go to the shop and buy a different box that does it we want",
    "start": "532200",
    "end": "538399"
  },
  {
    "text": "to be able to buy a box that can do anything depending on what input we feed to it and that's really what's captured",
    "start": "538399",
    "end": "544079"
  },
  {
    "text": "by this idea of universal systems right we can feed them programs and they can do arbitrary",
    "start": "544079",
    "end": "550560"
  },
  {
    "text": "things the second fact of life is that these programs that I was talking about",
    "start": "551079",
    "end": "556440"
  },
  {
    "text": "these inputs that we can put into Universal systems to get them to do anything these programs are themselves",
    "start": "556440",
    "end": "563680"
  },
  {
    "text": "data now that will be a fairly obvious statement to anyone who's a computer programmer and maybe I don't really need",
    "start": "563680",
    "end": "569560"
  },
  {
    "text": "to unpack it but I'm going to unpack it a little bit in order to make my point",
    "start": "569560",
    "end": "575320"
  },
  {
    "text": "and again I'll be using Ruby as my example language here but any other language will do there's nothing special about",
    "start": "575320",
    "end": "581720"
  },
  {
    "text": "Ruby so here's a very simple Ruby program this is me at the Ruby Redal",
    "start": "581720",
    "end": "586920"
  },
  {
    "text": "print Loop just kind of typing in a program I type puts hello world and it runs and it prints out hello world and",
    "start": "586920",
    "end": "592880"
  },
  {
    "text": "that is a program um but another way of thinking about that program is as some",
    "start": "592880",
    "end": "599680"
  },
  {
    "text": "data I mean what I've done is Type in a series of characters and so actually I can TP take that series of characters",
    "start": "599680",
    "end": "604839"
  },
  {
    "text": "that I typed in and I can put that just in a string and so now I've written a",
    "start": "604839",
    "end": "610440"
  },
  {
    "text": "different program that sort of got my original program inside it as data and I don't want to egg this I mean",
    "start": "610440",
    "end": "618600"
  },
  {
    "text": "it's quite an obvious thing that a program is just a a series of characters but the fact that you can take one",
    "start": "618600",
    "end": "624360"
  },
  {
    "text": "program and put it inside another one as a piece of data might be OB obvious to us but its",
    "start": "624360",
    "end": "630600"
  },
  {
    "text": "implications are quite profound it turns out if you look at this um you can see",
    "start": "630600",
    "end": "638519"
  },
  {
    "text": "that the the hello world program is really just a sequence of characters a sequence of of bites really um and",
    "start": "638519",
    "end": "646120"
  },
  {
    "text": "inside my programming language I can investigate that a little bit I could literally unpack that hello world",
    "start": "646120",
    "end": "651920"
  },
  {
    "text": "program into a series of bites that make up all of the characters in that program and as you look at that sequence of",
    "start": "651920",
    "end": "657880"
  },
  {
    "text": "bites it starts to resemble just one very large binary",
    "start": "657880",
    "end": "662959"
  },
  {
    "text": "number which is what it is really uh when a program is written onto the dis it really is just a long sequence of",
    "start": "662959",
    "end": "668279"
  },
  {
    "text": "ones and zeros and here you can see all of those ones and zeros and actually if I concatenate all of those strings",
    "start": "668279",
    "end": "673440"
  },
  {
    "text": "together and convert them into a decimal number then you can see the decimal number that represents this",
    "start": "673440",
    "end": "679760"
  },
  {
    "text": "program and this isn't a reduction of the original program it is that original hello world program I'm just showing it",
    "start": "679760",
    "end": "686200"
  },
  {
    "text": "to you in a slightly different way so in some sense hello world is Ruby program",
    "start": "686200",
    "end": "691639"
  },
  {
    "text": "number 9796 and so on now if I gave you that number then",
    "start": "691639",
    "end": "699680"
  },
  {
    "text": "I've given you the original program it's got all the same information as the program I started out with I could give",
    "start": "699680",
    "end": "705279"
  },
  {
    "text": "you that big long number um and then you could unpack that number into its component bytes and then you could turn",
    "start": "705279",
    "end": "712320"
  },
  {
    "text": "each of those bites into a character and turn them into a string and then you could you know evaluate that string and",
    "start": "712320",
    "end": "719079"
  },
  {
    "text": "you you've run the original program that I started out with now some of you might have used",
    "start": "719079",
    "end": "725120"
  },
  {
    "text": "these um sort of so-called homo iconic languages like some of the Lis languages",
    "start": "725120",
    "end": "730480"
  },
  {
    "text": "um that have these sort of fancy features that allow you to represent the",
    "start": "730480",
    "end": "736600"
  },
  {
    "text": "uh syntax of programs in the language as kind of first class data structures inside the language and they have first",
    "start": "736600",
    "end": "741680"
  },
  {
    "text": "class operations in the language that allow you to manipulate them and that's a really cool feature but to a greater",
    "start": "741680",
    "end": "747240"
  },
  {
    "text": "or lesser extent every programming langu has this feature every program is ultimately just some data a big number",
    "start": "747240",
    "end": "753240"
  },
  {
    "text": "and every programming language is able to manipulate those things so H the the",
    "start": "753240",
    "end": "758279"
  },
  {
    "text": "homo iconic languages are just the ones that make this manipulation of programs particularly easy with sort of native",
    "start": "758279",
    "end": "764519"
  },
  {
    "text": "features that support doing that but in any language you can manipulate programs because they're just",
    "start": "764519",
    "end": "770240"
  },
  {
    "text": "numbers and incidentally the fact that programs are just numbers means that you can in principle enumerate them like",
    "start": "770240",
    "end": "776440"
  },
  {
    "text": "this is Ruby program number 979 and so but you could start out by just generating you know Ruby program number",
    "start": "776440",
    "end": "783480"
  },
  {
    "text": "one and then generate Ruby program number two and then generate Ruby program number three if you kept going",
    "start": "783480",
    "end": "789360"
  },
  {
    "text": "like that you know you'd eventually generate the next hot asynchronous web development framework and you'd be able",
    "start": "789360",
    "end": "795519"
  },
  {
    "text": "to buy your own Island it would be brilliant so those two Facts of Life are",
    "start": "795519",
    "end": "803440"
  },
  {
    "text": "firstly we demand these sort of programmable general purpose Universal systems they're really use useful and",
    "start": "803440",
    "end": "810199"
  },
  {
    "text": "the other fact of life is that the programs that we feed into these things are just data like any other data and",
    "start": "810199",
    "end": "817519"
  },
  {
    "text": "those two Facts of Life have got an Ines inescapable consequence which is infinite loops and I'm not sure that",
    "start": "817519",
    "end": "825639"
  },
  {
    "text": "it's obvious how the existence of infinite Loops necessarily follows from those two premises so I'm going to show",
    "start": "825639",
    "end": "832240"
  },
  {
    "text": "you how it follows so just to recap what I just",
    "start": "832240",
    "end": "837440"
  },
  {
    "text": "said every un ival system can simulate every other Universal system so python",
    "start": "837440",
    "end": "843040"
  },
  {
    "text": "can simulate Ruby and vice versa and the fact that there's this sort of equivalence class of universal systems",
    "start": "843040",
    "end": "849480"
  },
  {
    "text": "that can all simulate each other means that each of those systems can actually simulate itself that's just a special",
    "start": "849480",
    "end": "856120"
  },
  {
    "text": "case of any universal system can simulate any other one and more specifically every Universal programming",
    "start": "856120",
    "end": "862759"
  },
  {
    "text": "language can Implement its own interpreter that's essentially what universality means",
    "start": "862759",
    "end": "869320"
  },
  {
    "text": "so if all we know about Ruby is that it's one of these Universal systems if we didn't know anything about its syntax",
    "start": "869320",
    "end": "875720"
  },
  {
    "text": "or its semantics we were just told that it was Universal that it was T in complete then that means it must be",
    "start": "875720",
    "end": "881880"
  },
  {
    "text": "possible to write some method or function or whatever you want to call it in Ruby that implements an evaluator for",
    "start": "881880",
    "end": "889120"
  },
  {
    "text": "Ruby programs so here I'm imagining that this evaluator gets two arguments it gets the source code of a program and",
    "start": "889120",
    "end": "895279"
  },
  {
    "text": "then it gets some input that that program is going to read on standard input say",
    "start": "895279",
    "end": "900600"
  },
  {
    "text": "and I don't have time to show you the full implementation of what this evaluate method would entail but briefly",
    "start": "900600",
    "end": "906320"
  },
  {
    "text": "it would pause the program so it would take that big string and it would break it down into its component pieces and",
    "start": "906320",
    "end": "912399"
  },
  {
    "text": "figure out what the structure of the program was and generate some kind of intermediate data structure probably an abstract syntax tree and then it would",
    "start": "912399",
    "end": "919920"
  },
  {
    "text": "evaluate that program and sort of buffer up the output of that program and it would evaluate it probably by walking",
    "start": "919920",
    "end": "926920"
  },
  {
    "text": "over that abstract syntax tree and every time it finds a node that represents some particular operation or instruction",
    "start": "926920",
    "end": "932600"
  },
  {
    "text": "it would actually do that operation or instruction and it would keep walking over the tree and then going around in",
    "start": "932600",
    "end": "937680"
  },
  {
    "text": "loops and doing stuff until it was done and then it would just return the output that had been sort of buffered up as it",
    "start": "937680",
    "end": "943720"
  },
  {
    "text": "was executing all of those instructions right now this is actually quite easy to implement in a dynamic language like",
    "start": "943720",
    "end": "950199"
  },
  {
    "text": "Ruby because Ruby has got an eval method that lets you just evaluate a string and and you know you can use the platform",
    "start": "950199",
    "end": "956880"
  },
  {
    "text": "that you're sitting on to do the the paing and the evaluation of a ruby program but even if Ruby didn't have",
    "start": "956880",
    "end": "963160"
  },
  {
    "text": "that eval function you could still do this yourself right even you know the Ruby is itself running on a computer",
    "start": "963160",
    "end": "971360"
  },
  {
    "text": "program written probably in C and you could just take all of the logic from that computer program and reimplement it",
    "start": "971360",
    "end": "976519"
  },
  {
    "text": "in the host language so for languages that don't have eval built into them you could always go to the effort to",
    "start": "976519",
    "end": "982759"
  },
  {
    "text": "implement that yourself so once we have this evaluate",
    "start": "982759",
    "end": "988440"
  },
  {
    "text": "method we can can use it to essentially ask questions about programs and the question we're asking is like what would",
    "start": "988440",
    "end": "993720"
  },
  {
    "text": "the result of this program be so I can say what would the result of",
    "start": "993720",
    "end": "999319"
  },
  {
    "text": "this program which reads A String from standard input and reverses it and prints it out be if I fed it the string",
    "start": "999319",
    "end": "1005920"
  },
  {
    "text": "hello world and evaluator is going to answer that and say the result would be hello world",
    "start": "1005920",
    "end": "1012680"
  },
  {
    "text": "backwards now if we were able to write this evaluate method which presumably we",
    "start": "1013279",
    "end": "1019600"
  },
  {
    "text": "can because this is what it means for a language to be Universal then we can write another method called evaluate on",
    "start": "1019600",
    "end": "1025839"
  },
  {
    "text": "itself and this isn't anything special this is just instead of being a two argument function like evaluate is it",
    "start": "1025839",
    "end": "1031720"
  },
  {
    "text": "just takes one argument and it calls evaluate with that argument twice so this means what this is asking the",
    "start": "1031720",
    "end": "1038520"
  },
  {
    "text": "question what do I get if I run this program with its own source code AS input because programs are just data",
    "start": "1038520",
    "end": "1044600"
  },
  {
    "text": "right it's you can always do that so I can ask the question what do I",
    "start": "1044600",
    "end": "1050600"
  },
  {
    "text": "get as output if I evaluate this program with itself as input and what I get back is well in this case the source code of",
    "start": "1050600",
    "end": "1057280"
  },
  {
    "text": "that program reversed because what this program does is reverse its input and if I'm able to write this then",
    "start": "1057280",
    "end": "1064160"
  },
  {
    "text": "I can write this larger program which reads a string in uh a program in from",
    "start": "1064160",
    "end": "1070120"
  },
  {
    "text": "standard input and then it evaluates on itself and looks at what its output is",
    "start": "1070120",
    "end": "1075640"
  },
  {
    "text": "and if the output of that program is the literal string no the then this program prints yes otherwise it prints no so you",
    "start": "1075640",
    "end": "1083039"
  },
  {
    "text": "have to focus a little bit here to keep track of what's going on but I'm going to call this program does it say no. RB",
    "start": "1083039",
    "end": "1088840"
  },
  {
    "text": "and this is really asking the question of when I run when I run some program with itself as input does it output no",
    "start": "1088840",
    "end": "1096080"
  },
  {
    "text": "or not so for example I can say I can I can Echo into it this program and say when I",
    "start": "1096080",
    "end": "1102520"
  },
  {
    "text": "run this program on its own source code does it say no and in this case the answer is no it doesn't doesn't say no",
    "start": "1102520",
    "end": "1109360"
  },
  {
    "text": "it just says its own source code reversed we just saw that whereas if I give it this program that prints know if",
    "start": "1109360",
    "end": "1115280"
  },
  {
    "text": "its standard input includes the literal string no if I feed that its own source code is input then it will see that its",
    "start": "1115280",
    "end": "1121120"
  },
  {
    "text": "own source code contains the string no and it will print no so the answer to does it say no is",
    "start": "1121120",
    "end": "1128799"
  },
  {
    "text": "yes so nothing I've shown you so far is particularly dodgy but the dodginess",
    "start": "1128799",
    "end": "1136600"
  },
  {
    "text": "arises when we ask um what happens if we feed this program into itself it's it's not actually very",
    "start": "1136600",
    "end": "1144520"
  },
  {
    "text": "obvious what happens if you feed this program into itself so let's let's walk through it so I've got my does it say no. RB and",
    "start": "1144520",
    "end": "1153960"
  },
  {
    "text": "then I feed a copy of it into itself and then there are some possible outcomes that could happen I mean the the two",
    "start": "1153960",
    "end": "1159960"
  },
  {
    "text": "obvious ones are that it could say yes or it could say no now if it outputs yes then that means",
    "start": "1159960",
    "end": "1168080"
  },
  {
    "text": "that the answer to to the question of does this program say no when you feed it its own source code AS input is no it",
    "start": "1168080",
    "end": "1174280"
  },
  {
    "text": "doesn't say no it says yes so the answer yes is incorrect here the answer we were",
    "start": "1174280",
    "end": "1179919"
  },
  {
    "text": "looking for was no but it said yes that's not right so if it if that output",
    "start": "1179919",
    "end": "1185600"
  },
  {
    "text": "comes out then that means our program isn't doing what it's supposed to do but exactly the same logic applies the other",
    "start": "1185600",
    "end": "1191240"
  },
  {
    "text": "way around if when we feed this program to itself the output is no then the",
    "start": "1191240",
    "end": "1196880"
  },
  {
    "text": "answer to does it say no is yes it should have said yes it shouldn't have said no so that's wrong as well so",
    "start": "1196880",
    "end": "1202320"
  },
  {
    "text": "assuming that our program is correct which judging from what we saw on the previous slide it seemed to all be",
    "start": "1202320",
    "end": "1208159"
  },
  {
    "text": "correct neither of those outputs is acceptable because either one of them is giving the wrong",
    "start": "1208159",
    "end": "1214280"
  },
  {
    "text": "answer so what else could happen well there could be some other output like it",
    "start": "1214280",
    "end": "1219840"
  },
  {
    "text": "could output the string maybe but just by looking at the source code of the",
    "start": "1219840",
    "end": "1224960"
  },
  {
    "text": "program we can see that that's not possible there are only two things that it could possibly output and maybe isn't one of them so that's not right",
    "start": "1224960",
    "end": "1231919"
  },
  {
    "text": "either so the only other option here is that this program never finishes it never gives you an answer either a",
    "start": "1231919",
    "end": "1238360"
  },
  {
    "text": "correct or an incorrect answer because it just runs forever with no output ever coming out of",
    "start": "1238360",
    "end": "1243440"
  },
  {
    "text": "it and in reality that is what actually happens although what actually actually",
    "start": "1243440",
    "end": "1250200"
  },
  {
    "text": "happens is that it will keep allocating more and more stack space until your",
    "start": "1250200",
    "end": "1255400"
  },
  {
    "text": "computer runs out of memory and then everything crashes and it and it's stops right but that's not the program's fault",
    "start": "1255400",
    "end": "1261400"
  },
  {
    "text": "that's the computer's fault and in principle we could keep adding more and more RAM to the computer and this",
    "start": "1261400",
    "end": "1267760"
  },
  {
    "text": "program would keep running and running and it would be able to exhaust as much as many resources as much RAM and time",
    "start": "1267760",
    "end": "1275400"
  },
  {
    "text": "as we were able to provide to it it could exhaust them and still bust through the amount we'd allocated to it",
    "start": "1275400",
    "end": "1280440"
  },
  {
    "text": "and that's really what it means for a program to run forever that it can exhaust all of the resources that you provide to it",
    "start": "1280440",
    "end": "1288480"
  },
  {
    "text": "so the argument I've just shown you goes like this Ruby is a universal language",
    "start": "1289440",
    "end": "1295400"
  },
  {
    "text": "so we must be able to write this method or function called evaluate in it but if",
    "start": "1295400",
    "end": "1300480"
  },
  {
    "text": "we can write that evaluate method then we can construct a special program that has to Loop forever that does it say no.",
    "start": "1300480",
    "end": "1307880"
  },
  {
    "text": "RB is built so that when you feed it into itself it can just keep looping",
    "start": "1307880",
    "end": "1313000"
  },
  {
    "text": "there's no other thing that it can do that would be correct and this argument",
    "start": "1313000",
    "end": "1318640"
  },
  {
    "text": "doesn't depend on any knowledge of Ruby or python or JavaScript or whatever language you're thinking of you don't",
    "start": "1318640",
    "end": "1324559"
  },
  {
    "text": "need to know the syntax or the semantics of the language because obviously if you know the syntax of say Ruby you can say",
    "start": "1324559",
    "end": "1330120"
  },
  {
    "text": "well I could have demonstrated This Much More straightforwardly by just saying you know while true do end or whatever",
    "start": "1330120",
    "end": "1336559"
  },
  {
    "text": "that's an infinite Loop but you can only write that if you know what the features of the language are whereas I mean I I",
    "start": "1336559",
    "end": "1343559"
  },
  {
    "text": "Illustrated it with a concrete program but the underlying argument here is that if you have this self- interpreter this",
    "start": "1343559",
    "end": "1349760"
  },
  {
    "text": "evaluate function there's always a way of building this special program that Loops",
    "start": "1349760",
    "end": "1355480"
  },
  {
    "text": "forever so that directly gives us gives us a way to to come up with an",
    "start": "1355880",
    "end": "1361760"
  },
  {
    "text": "impossible program and I'll show that to you now so these infinite Loops that I'm",
    "start": "1361760",
    "end": "1367880"
  },
  {
    "text": "talking about that are an inevitable consequence of of universal programming languages are bad like infinite Loops in",
    "start": "1367880",
    "end": "1375559"
  },
  {
    "text": "the in the normal code that we write dayto day usually indicate that we've made some kind of mistake I mean that's",
    "start": "1375559",
    "end": "1380840"
  },
  {
    "text": "not the case if you're writing a long running system like a like a web server whose whole job is to sit there in an",
    "start": "1380840",
    "end": "1386600"
  },
  {
    "text": "infinite Loop serving individual requests but the code that we write day-to-day tends to not be those kind of",
    "start": "1386600",
    "end": "1392159"
  },
  {
    "text": "long running systems so much as if they we tend to write small algorithmic pieces inside those systems like an HTTP",
    "start": "1392159",
    "end": "1399559"
  },
  {
    "text": "request Handler and you don't want your actual request Handler to go off into Infinite Loop because that means that",
    "start": "1399559",
    "end": "1405120"
  },
  {
    "text": "the client is never going to be served so if we don't want these infinite Loops to happen when we don't intend them then",
    "start": "1405120",
    "end": "1412760"
  },
  {
    "text": "we could try removing features from a programming language until there's no way to cause an infinite Loop in that",
    "start": "1412760",
    "end": "1418799"
  },
  {
    "text": "language and this is totally doable this is just an engineering problem there's nothing to stop us doing this so you",
    "start": "1418799",
    "end": "1425000"
  },
  {
    "text": "could take your favorite language and just start Crossing out features from it until you've eliminated the possibility",
    "start": "1425000",
    "end": "1430760"
  },
  {
    "text": "of having infinite loops and just very briefly that you know you could do that by doing things like removing unlimited",
    "start": "1430760",
    "end": "1436559"
  },
  {
    "text": "iteration so you could allow you know you remove things like while Loops that just have a a sort of a dynamic",
    "start": "1436559",
    "end": "1443159"
  },
  {
    "text": "condition that you're hoping will eventually become false so you can say we're going to allow finite iteration over of you know bounded data structures",
    "start": "1443159",
    "end": "1450240"
  },
  {
    "text": "and things like that or between you know ends of a bounded range but we're not going to let you just sit in a loop",
    "start": "1450240",
    "end": "1455600"
  },
  {
    "text": "arbitrarily long because you might never stop um you would have to remove the ability to make whatever your",
    "start": "1455600",
    "end": "1461600"
  },
  {
    "text": "programming language caus lambdas or closures or or functions or or whatever those are um to prevent things like this",
    "start": "1461600",
    "end": "1469399"
  },
  {
    "text": "is the the Omega combinator in the Lambda calculus so however you would implement this in your programming language that's a that's a Lambda",
    "start": "1469399",
    "end": "1475679"
  },
  {
    "text": "calculus term that when you evaluate it it just runs forever it never it never stops so we'd have to rule that out and",
    "start": "1475679",
    "end": "1481480"
  },
  {
    "text": "that's actually a special case of a more General thing which is that we don't want to allow recursive function cause",
    "start": "1481480",
    "end": "1487480"
  },
  {
    "text": "and one way of preventing that a simple-minded way of preventing it might be to only allow a function to call",
    "start": "1487480",
    "end": "1494919"
  },
  {
    "text": "another function whose name comes later in the alphabet so if you have a fun fun called a it can call a function called B",
    "start": "1494919",
    "end": "1500480"
  },
  {
    "text": "and then that can call a function called C but then eventually you run out of functions so the maximum stack stack",
    "start": "1500480",
    "end": "1505840"
  },
  {
    "text": "depth of your program is bounded by the number of functions in your original program and that's going to mean that",
    "start": "1505840",
    "end": "1511000"
  },
  {
    "text": "you also want to Outlaw you know uh meta programming and dynamic function",
    "start": "1511000",
    "end": "1516440"
  },
  {
    "text": "definition and stuff like that but that's fine we can take all of those features out um we don't want to allow blocking IO because we don't want to be",
    "start": "1516440",
    "end": "1523000"
  },
  {
    "text": "waiting for a bite on a network socket that never arrives and so on there are a million other things that we need to",
    "start": "1523000",
    "end": "1528600"
  },
  {
    "text": "take out but you can definitely do this so we took all this stuff out of your favorite programming language we'd end",
    "start": "1528600",
    "end": "1534320"
  },
  {
    "text": "up with something called a total programming language so this is a language where every program is guaranteed to finish executing because",
    "start": "1534320",
    "end": "1541080"
  },
  {
    "text": "you've taken out all of the language features that allow it to sit in an infinite Loop forever now if you've got",
    "start": "1541080",
    "end": "1546159"
  },
  {
    "text": "a total programming language like that let's call that language T then it must be impossible to write an interpreter",
    "start": "1546159",
    "end": "1553520"
  },
  {
    "text": "for T in the language t",
    "start": "1553520",
    "end": "1558960"
  },
  {
    "text": "now why is that well I've showed you why it is because if we could write an",
    "start": "1558960",
    "end": "1564559"
  },
  {
    "text": "interpreter for T in itself then we could use that sort of self- interpreter to construct a special program that",
    "start": "1564559",
    "end": "1571720"
  },
  {
    "text": "Loops forever but this total language that we've built doesn't allow you to write programs that can Loop forever so",
    "start": "1571720",
    "end": "1578600"
  },
  {
    "text": "it must be impossible to write this self interpreter in this new language that we've come up",
    "start": "1578600",
    "end": "1584760"
  },
  {
    "text": "with and that's actually really counter intuitive because an interpreter for a",
    "start": "1584760",
    "end": "1591440"
  },
  {
    "text": "total language is a program that is guaranteed to finish in you know evaluating a program in a total language",
    "start": "1591440",
    "end": "1598000"
  },
  {
    "text": "is something that always stops eventually so that feels exactly like the kind of thing we should be able to write in one of these total programming",
    "start": "1598000",
    "end": "1604679"
  },
  {
    "text": "languages but we can't so although a total programming language can express",
    "start": "1604679",
    "end": "1610320"
  },
  {
    "text": "some programs that always finish it can't express all programs that always",
    "start": "1610320",
    "end": "1615399"
  },
  {
    "text": "finish and I've showed you at least one that it can't express which is its own",
    "start": "1615399",
    "end": "1621159"
  },
  {
    "text": "interpreter now that's not to say that we can't write an interpreter for that total language in some other in some",
    "start": "1621159",
    "end": "1627480"
  },
  {
    "text": "other language we could we could write it in a universal language like Ruby or python or JavaScript that would be fine",
    "start": "1627480",
    "end": "1632919"
  },
  {
    "text": "we could also write it in some other total language because then you've got you know if we had some other language",
    "start": "1632919",
    "end": "1639320"
  },
  {
    "text": "called you then we could write an interpreter for Te in you and even if use a total language there's no reason",
    "start": "1639320",
    "end": "1645520"
  },
  {
    "text": "why we couldn't write The Interpreter in it because it's a program that's guaranteed to finish but we just can't",
    "start": "1645520",
    "end": "1650559"
  },
  {
    "text": "write that language that program in the language itself so all of that stuff is to be",
    "start": "1650559",
    "end": "1659240"
  },
  {
    "text": "charitable kind of mildly interesting but the question that immediately",
    "start": "1659240",
    "end": "1664360"
  },
  {
    "text": "presents itself is like how does this connect to reality because that total",
    "start": "1664360",
    "end": "1669720"
  },
  {
    "text": "programming language that's had loads and loads of Juicy features taken out of it doesn't really sound very much like",
    "start": "1669720",
    "end": "1675279"
  },
  {
    "text": "the kind of programming languages that we actually use",
    "start": "1675279",
    "end": "1680120"
  },
  {
    "text": "so that evaluate function the sort of self interpreter program is impossible for any total language so there is no",
    "start": "1680880",
    "end": "1688159"
  },
  {
    "text": "total language that's Universal these are sort of disjointed classes of programming languages but just like",
    "start": "1688159",
    "end": "1694799"
  },
  {
    "text": "total programming languages have this uh interpreter program that's impossible for for them um Universal systems",
    "start": "1694799",
    "end": "1702760"
  },
  {
    "text": "Universal T incomplete programming languages also have impossible programs",
    "start": "1702760",
    "end": "1708120"
  },
  {
    "text": "it's just that they're a little bit more difficult to see than that uh that interpreter so let's have a look at some",
    "start": "1708120",
    "end": "1715080"
  },
  {
    "text": "examples of some programs in in a universal programming language here's a simple program in Ruby um this just",
    "start": "1715080",
    "end": "1723000"
  },
  {
    "text": "reads in a string from standard input and then it prints that string out now just by looking at this it",
    "start": "1723000",
    "end": "1729600"
  },
  {
    "text": "should be obvious that this program always finishes I've got a little asterisk there and it says assuming that",
    "start": "1729600",
    "end": "1735600"
  },
  {
    "text": "standard input is finite and non-blocking so I'm I'm not really interested in the program's interactions with the rest of the system here I'm",
    "start": "1735600",
    "end": "1742159"
  },
  {
    "text": "just interested in the behavior of the program itself so assuming that it's always going to be able to read that string from standard input then this",
    "start": "1742159",
    "end": "1748519"
  },
  {
    "text": "program always finishes let's look at another example program uh this one reads a string in",
    "start": "1748519",
    "end": "1754559"
  },
  {
    "text": "from standard input and then it tries to print it out but before it prints it out it does this while true do nothing and",
    "start": "1754559",
    "end": "1761720"
  },
  {
    "text": "just by looking at that it should be obvious that that program always Loops forever right it's just going to hit that Loop in the middle and then just",
    "start": "1761720",
    "end": "1767679"
  },
  {
    "text": "sit there indefinitely so these are specific examples of programs in in this case",
    "start": "1767679",
    "end": "1773519"
  },
  {
    "text": "Ruby and just by looking at them we can tell whether this program is ever going to finish or not just you know just by",
    "start": "1773519",
    "end": "1779279"
  },
  {
    "text": "looking at it but the question is can we write a program that can decide this in general for for any program so that",
    "start": "1779279",
    "end": "1786120"
  },
  {
    "text": "means given the source of a program and its input can we decide whether that program is going to Loop forever or",
    "start": "1786120",
    "end": "1793240"
  },
  {
    "text": "not and that question is called the halting problem the question of you know does a program never",
    "start": "1793240",
    "end": "1799440"
  },
  {
    "text": "finish so let's look at some examples to see if",
    "start": "1799440",
    "end": "1805200"
  },
  {
    "text": "we can develop an intuition about how difficult this problem is like is this a super easy thing I mean it seemed simple",
    "start": "1805200",
    "end": "1811799"
  },
  {
    "text": "for the two examples we just saw is it quite hard like where on the spectrum of difficulty does this problem",
    "start": "1811799",
    "end": "1818600"
  },
  {
    "text": "sit so here's another example um does this program always finish well this",
    "start": "1818600",
    "end": "1824640"
  },
  {
    "text": "reads in a string from standard input and then it initializes a variable n to",
    "start": "1824640",
    "end": "1829679"
  },
  {
    "text": "the length of that string and then it sits in a loop uh concatenating asterisks onto some output string and",
    "start": "1829679",
    "end": "1836360"
  },
  {
    "text": "decrementing the counter and then when uh n. 0 returns true it's going to print",
    "start": "1836360",
    "end": "1841640"
  },
  {
    "text": "out the output so this is a program that essentially takes a string and just replaces all of its characters with",
    "start": "1841640",
    "end": "1848320"
  },
  {
    "text": "asterisks so just by looking at that for a minute you should be able to convince yourself that that program always",
    "start": "1848440",
    "end": "1854480"
  },
  {
    "text": "finishes um but the reason why it always finishes is quite subtle like it the",
    "start": "1854480",
    "end": "1860000"
  },
  {
    "text": "reason this always finishes is that when you call read on standard input you always get a string object back and when",
    "start": "1860000",
    "end": "1867159"
  },
  {
    "text": "you call length on a string object you always get a non- negative integer back and then when you call minus one on a",
    "start": "1867159",
    "end": "1875000"
  },
  {
    "text": "non- negative integer you always get another non- negative integer back and if you do that enough times you will",
    "start": "1875000",
    "end": "1880240"
  },
  {
    "text": "eventually get a special non- negative integer which when you call the zero method on it is going to return true so",
    "start": "1880240",
    "end": "1886360"
  },
  {
    "text": "that Loop will always terminate and then you you can print it out so being able to answer yes in this case involves",
    "start": "1886360",
    "end": "1892200"
  },
  {
    "text": "quite detailed knowledge of the semantics of all of these methods in Ruby so it's not as simple as just",
    "start": "1892200",
    "end": "1898320"
  },
  {
    "text": "glancing at the program you need to understand what all of these things mean and how they all interrelate and and to",
    "start": "1898320",
    "end": "1904200"
  },
  {
    "text": "come up with an argument about why this program always finishes involves lots of knowledge so it's clearly not a trivial",
    "start": "1904200",
    "end": "1910399"
  },
  {
    "text": "problem because it it involves understanding all of these specific features of the programming",
    "start": "1910399",
    "end": "1916080"
  },
  {
    "text": "language so let's look at another example so without focusing on the",
    "start": "1916080",
    "end": "1922760"
  },
  {
    "text": "detail here this is a program that initializes a variable called n to the number four and then it sits inside a",
    "start": "1922760",
    "end": "1929519"
  },
  {
    "text": "loop where it checks to see whether n is the sum of two prime numbers or not and if n is the sum of two prime numbers it",
    "start": "1929519",
    "end": "1936399"
  },
  {
    "text": "increments it by two and then keeps going so this program is going to check whether successively larger even numbers",
    "start": "1936399",
    "end": "1943320"
  },
  {
    "text": "are the sum of two primes or not so it's going to check you know four is 2 + 2 and then six is 3 + 3 and then 8 is 5 +",
    "start": "1943320",
    "end": "1950639"
  },
  {
    "text": "3 and 10 is 5 + 5 and 12 is 7 + 5 and so on it's going to keep going until it",
    "start": "1950639",
    "end": "1956120"
  },
  {
    "text": "finds an even number that isn't the sum of two prime numbers and then it's going to stop and print that even number out",
    "start": "1956120",
    "end": "1962960"
  },
  {
    "text": "and so the question is does this program ever finish and the answer is we don't",
    "start": "1962960",
    "end": "1968000"
  },
  {
    "text": "know so this program is checking the goldback conjecture which is one of the",
    "start": "1968000",
    "end": "1973080"
  },
  {
    "text": "sort of oldest and most famous unsolved problems in number Theory um this was",
    "start": "1973080",
    "end": "1978360"
  },
  {
    "text": "first conjectured in the year 1742 that that all of the even numbers are the sum",
    "start": "1978360",
    "end": "1984000"
  },
  {
    "text": "of of two primes now this has been checked empirically on a computer for",
    "start": "1984000",
    "end": "1989440"
  },
  {
    "text": "all the even numbers between four and four quintilian and they all are the sum of two prime numbers so it looks",
    "start": "1989440",
    "end": "1995360"
  },
  {
    "text": "empirically quite likely that this is true but we don't have a proof of it and",
    "start": "1995360",
    "end": "2000679"
  },
  {
    "text": "that means that it's possible that if you left this program running for long enough it would eventually find an even number that wasn't the sum of two primes",
    "start": "2000679",
    "end": "2007000"
  },
  {
    "text": "and print it out so mathematicians have been trying to",
    "start": "2007000",
    "end": "2012320"
  },
  {
    "text": "decide this question one way or the other for over 250 years um if you could write a program that could read this in",
    "start": "2012320",
    "end": "2018799"
  },
  {
    "text": "and tell me whether it was going to finish or not then I'd be quite impressed so and that's not to say that",
    "start": "2018799",
    "end": "2024639"
  },
  {
    "text": "you can't do it it it it just because it's difficult doesn't mean it can't be done but now we're venturing into the",
    "start": "2024639",
    "end": "2031159"
  },
  {
    "text": "territory of of being really quite astronomically difficult you would have to write a program that contained all of",
    "start": "2031159",
    "end": "2037279"
  },
  {
    "text": "modern mathematical theorems and knowledge and it would also have to have the ability to synthesize new",
    "start": "2037279",
    "end": "2042919"
  },
  {
    "text": "mathematical theorems and knowledge from those existing theorems and keep generating more and more theorems until",
    "start": "2042919",
    "end": "2047960"
  },
  {
    "text": "it found a proof of one way or the other of this and that is really getting into the territory of of being very very",
    "start": "2047960",
    "end": "2054480"
  },
  {
    "text": "difficult to do and you know you're going to win you're going to win the Nobel Prize if you manage to figure that out so this is now starting to look like",
    "start": "2054480",
    "end": "2060599"
  },
  {
    "text": "a very hard problem indeed but maybe it can be done let's",
    "start": "2060599",
    "end": "2066440"
  },
  {
    "text": "assume that it can be done then that means that you can write a program like this or a method like this",
    "start": "2066440",
    "end": "2072240"
  },
  {
    "text": "and again this is just the outline of it but roughly what this is going to do it's it's like evaluate but this one is",
    "start": "2072240",
    "end": "2078760"
  },
  {
    "text": "just going to instead of returning a string it's just just going to return true or false and tell you whether a particular program that you pass into it",
    "start": "2078760",
    "end": "2086040"
  },
  {
    "text": "is going to finish or not if it was run on some input and in particular we can't just run the program because this halz",
    "start": "2086040",
    "end": "2093200"
  },
  {
    "text": "method has to return true or false it can't sit there forever part of the speci ification of this of this thing is",
    "start": "2093200",
    "end": "2099560"
  },
  {
    "text": "that it always gives you an answer so this is going to do something a little bit like evaluating it it's going to",
    "start": "2099560",
    "end": "2105000"
  },
  {
    "text": "pause the program into an abstract syntax tree but then rather than running the program it's just going to do it's just going to do some analysis on the",
    "start": "2105000",
    "end": "2111599"
  },
  {
    "text": "program and figure out whether it will eventually finish or not and then it's just going to return true or false to",
    "start": "2111599",
    "end": "2116760"
  },
  {
    "text": "tell you and again this is you know quite reasonable you can say you know does",
    "start": "2116760",
    "end": "2122680"
  },
  {
    "text": "this program eventually finish this print standard in. read and then you just come back and say yeah sure it does",
    "start": "2122680",
    "end": "2128680"
  },
  {
    "text": "or you could say does this program eventually finish while true do end and it could come back and say no it won't",
    "start": "2128680",
    "end": "2134880"
  },
  {
    "text": "and you could easily write an implementation of this HZ method that gets these two cases right I mean you",
    "start": "2134880",
    "end": "2140040"
  },
  {
    "text": "can write an implementation that answers correctly for any finite set of programs because you can just build them into the",
    "start": "2140040",
    "end": "2145920"
  },
  {
    "text": "source code of uh of Holts and look them up in a in a hash table or whatever assuming you know what the answer is um",
    "start": "2145920",
    "end": "2153560"
  },
  {
    "text": "but if we could do this in general then we'd be able to take this method and we're going to do essentially",
    "start": "2153560",
    "end": "2160280"
  },
  {
    "text": "the same trick as we did with that does it say no program we could write a new method called HTS on itself which tells",
    "start": "2160280",
    "end": "2167319"
  },
  {
    "text": "you if a program ever finishes or not when it's given its own source code AS input and then we can write this longer",
    "start": "2167319",
    "end": "2174480"
  },
  {
    "text": "program which reads in a program from standard input it finds it uses this",
    "start": "2174480",
    "end": "2181079"
  },
  {
    "text": "halts method to check whether this program ever finishes when you run it on its own source code and then it just",
    "start": "2181079",
    "end": "2186200"
  },
  {
    "text": "does the opposite so if PS on itself returns true and says yes this program does eventually finish then this one is",
    "start": "2186200",
    "end": "2192520"
  },
  {
    "text": "going to Loop forever and if it returns false and says no that program never halts then this one is going to fall",
    "start": "2192520",
    "end": "2198880"
  },
  {
    "text": "through and event and immediately halt so I'm going to call this program do the opposite.",
    "start": "2198880",
    "end": "2204079"
  },
  {
    "text": "RB and as before the important question is what does this program do when we run",
    "start": "2204079",
    "end": "2209599"
  },
  {
    "text": "it on its own source code now before we looked at a program that produced output",
    "start": "2209599",
    "end": "2214920"
  },
  {
    "text": "but this program doesn't produce any output it's just going to have one of two behaviors if we take its own source",
    "start": "2214920",
    "end": "2220599"
  },
  {
    "text": "code and feed it into itself there there are only two things that can happen it can either eventually finish or it can",
    "start": "2220599",
    "end": "2227480"
  },
  {
    "text": "Loop forever but this is we're in the same situation as we were with does it say",
    "start": "2227480",
    "end": "2233280"
  },
  {
    "text": "no. RB if this program eventually finishes then that means that the answer",
    "start": "2233280",
    "end": "2239079"
  },
  {
    "text": "to the question of what does this program do when you feed it to itself is that it eventually finishes so what it",
    "start": "2239079",
    "end": "2245599"
  },
  {
    "text": "should have done is the opposite it should have looped forever because this program is supposed to be doing the opposite so that's not the right outcome",
    "start": "2245599",
    "end": "2252640"
  },
  {
    "text": "and the same argument applies the other way as well if it Loops forever then it should have done the opposite it should",
    "start": "2252640",
    "end": "2259000"
  },
  {
    "text": "have eventually finished so that's the wrong answer as well and what's going on here is that",
    "start": "2259000",
    "end": "2265599"
  },
  {
    "text": "we've designed a particular program a special program where neither of the",
    "start": "2265599",
    "end": "2270960"
  },
  {
    "text": "things that it can do is correct Behavior because it's inherently self-contradictory",
    "start": "2270960",
    "end": "2278560"
  },
  {
    "text": "now every program that we write has to either Loop forever or eventually finish",
    "start": "2279560",
    "end": "2285880"
  },
  {
    "text": "But whichever one of those happens in this case that means that that Holtz method was wrong about what was going to",
    "start": "2285880",
    "end": "2292480"
  },
  {
    "text": "happen so by construction of that that program that we wrote We forced that the",
    "start": "2292480",
    "end": "2298160"
  },
  {
    "text": "answer that comes out of that Holz method to be wrong because we're just subverting it what when it returns true",
    "start": "2298160",
    "end": "2306079"
  },
  {
    "text": "to say that the program eventually hals we just keep looping and vice versa so because of this sort of self-referentiality we're able to write",
    "start": "2306079",
    "end": "2312880"
  },
  {
    "text": "a program that does the opposite of whatever this halting Checker says it's going to do so we've sort of caught it",
    "start": "2312880",
    "end": "2319079"
  },
  {
    "text": "in a trap by writing a program that makes it impossible to be right and this is what the argument",
    "start": "2319079",
    "end": "2325400"
  },
  {
    "text": "looks like it says if we could write that haltz method then we could use it",
    "start": "2325400",
    "end": "2330680"
  },
  {
    "text": "to construct one of these special programs that forces that HZ method to give the wrong answer in at least one",
    "start": "2330680",
    "end": "2336760"
  },
  {
    "text": "case but if that htz method gives the wrong answer in at least one case then",
    "start": "2336760",
    "end": "2341960"
  },
  {
    "text": "it's not a correct implementation of HZ because a correct one would always give us the right answer so it must be",
    "start": "2341960",
    "end": "2348200"
  },
  {
    "text": "impossible to write that HZ method so depending on how much of that",
    "start": "2348200",
    "end": "2355359"
  },
  {
    "text": "uh made sense to you it might be slightly mindblowing or it might be completely uninteresting but either way",
    "start": "2355359",
    "end": "2361119"
  },
  {
    "text": "it does leave you with the question of like who cares you know this isn't the kind of",
    "start": "2361119",
    "end": "2366800"
  },
  {
    "text": "thing that actually affects us in our day-to-day life it doesn't seem like like we never actually want to ask a",
    "start": "2366800",
    "end": "2373839"
  },
  {
    "text": "computer to write a program that will Loop forever I can't remember the last time someone asked me to do",
    "start": "2373839",
    "end": "2379400"
  },
  {
    "text": "that but we do often want to ask computers other questions about programs",
    "start": "2379400",
    "end": "2386400"
  },
  {
    "text": "you know like when we when we're writing tests that's really us teaching the computer to answer questions about",
    "start": "2386400",
    "end": "2393920"
  },
  {
    "text": "programs and we want that to work so let's say that uh I've just started",
    "start": "2393920",
    "end": "2402760"
  },
  {
    "text": "working for a new VC funded startup in the valley uh my boss has come to me and",
    "start": "2402760",
    "end": "2410119"
  },
  {
    "text": "said that he wants me to write a program that prints Hello World um I've got a month to do it um I'm going to do it in",
    "start": "2410119",
    "end": "2418680"
  },
  {
    "text": "you know we do scrum and that so I'm going to you know do some iterations and things um and because I'm",
    "start": "2418680",
    "end": "2426319"
  },
  {
    "text": "a software Craftsman uh responsible programmer um I'm not just going to sit",
    "start": "2426319",
    "end": "2432480"
  },
  {
    "text": "down and Bash out this program that would be ludicrous um first I'm going to write some tests and then once I've",
    "start": "2432480",
    "end": "2437960"
  },
  {
    "text": "written my tests I'm going to write my implementation and the tests will tell me whether my implementation is",
    "start": "2437960",
    "end": "2444040"
  },
  {
    "text": "correct so let's say that for my tests I'm going to I'm going to write some method like this this is a this is a a",
    "start": "2444040",
    "end": "2450680"
  },
  {
    "text": "prince hello world Checker and I can feed a program into this and it's going to analyze it and tell me whether that",
    "start": "2450680",
    "end": "2456680"
  },
  {
    "text": "program print hello world and I don't know about you but this seems eminently reasonable this seems like the kind of",
    "start": "2456680",
    "end": "2463119"
  },
  {
    "text": "thing that it's quite sensible to be able to ask about a program so if I implemented this I'd be able to say does",
    "start": "2463119",
    "end": "2469000"
  },
  {
    "text": "this program print hello world this program that reverses its input if I feed it that string as input does it",
    "start": "2469000",
    "end": "2474400"
  },
  {
    "text": "print hello world and it would say yes it does your tests are passing whereas if I feed it this program that just UPC",
    "start": "2474400",
    "end": "2480920"
  },
  {
    "text": "cases its input and I feed it the same input it will return false no your tests are broken",
    "start": "2480920",
    "end": "2487920"
  },
  {
    "text": "so that all seems like something we should be able to do in a fair world but unfortunately if it was possible to",
    "start": "2487920",
    "end": "2493240"
  },
  {
    "text": "write this prce hello world method it would also be possible to write this halolz method and I apologize for the",
    "start": "2493240",
    "end": "2500560"
  },
  {
    "text": "Ruby syntax here if you're not familiar with it but essentially what's going on here is that this HZ method builds a",
    "start": "2500560",
    "end": "2506920"
  },
  {
    "text": "slightly larger program from the one that you give it um you pass in a program that you want to know whether",
    "start": "2506920",
    "end": "2513160"
  },
  {
    "text": "that program eventually finishes or not and then we just build a slightly larger program program that will read in that",
    "start": "2513160",
    "end": "2519760"
  },
  {
    "text": "program from standard input and then evaluate that program and then after the program is evaluated it prints hello",
    "start": "2519760",
    "end": "2526480"
  },
  {
    "text": "world and in particular evaluate here is just throwing away any output of that program the only thing that this hello",
    "start": "2526480",
    "end": "2532960"
  },
  {
    "text": "world program can do is print hello world but only after the evaluation of",
    "start": "2532960",
    "end": "2538440"
  },
  {
    "text": "that program has finished and so once we've built this larger program we pass it into that hello world Checker and",
    "start": "2538440",
    "end": "2546200"
  },
  {
    "text": "then that will tell us whether that original program finished or not because when the original program finishes then",
    "start": "2546200",
    "end": "2551800"
  },
  {
    "text": "this larger program prints hello world and if the original program sits in an infinite Loop forever then this one",
    "start": "2551800",
    "end": "2557160"
  },
  {
    "text": "never prints hello world and this is called a touring reduction we've reduced",
    "start": "2557160",
    "end": "2563440"
  },
  {
    "text": "the halting problem to the problem of checking whether a program prints hello world and that's a bit suspicious",
    "start": "2563440",
    "end": "2570319"
  },
  {
    "text": "because that tells us that um the the prince hello world problem can't be any",
    "start": "2570319",
    "end": "2576520"
  },
  {
    "text": "easier than the halting problem because you can use it to solve you know the halting problem so the argument says if",
    "start": "2576520",
    "end": "2584240"
  },
  {
    "text": "we could write this prce hello world method then we could use it to construct a correct implementation of that Holz",
    "start": "2584240",
    "end": "2590559"
  },
  {
    "text": "method but we've already seen that it's impossible to correctly Implement that HZ method so it must be impossible to",
    "start": "2590559",
    "end": "2596760"
  },
  {
    "text": "write that Prince Hello World Checker as well and the source of the difficulty",
    "start": "2596760",
    "end": "2602319"
  },
  {
    "text": "here is that even if a program does contain the command print hello world you to write this Checker you do need to",
    "start": "2602319",
    "end": "2609680"
  },
  {
    "text": "be able to tell whether the execution of that program is ever going to reach that command which involves deciding whether",
    "start": "2609680",
    "end": "2616440"
  },
  {
    "text": "the part of the program before that command will ever finish and that's where the halting problem",
    "start": "2616440",
    "end": "2622119"
  },
  {
    "text": "lives so this is bad news it means that not only are we not able to ask that",
    "start": "2622119",
    "end": "2627559"
  },
  {
    "text": "very specific program does this program ever finish we also can't ask does this",
    "start": "2627559",
    "end": "2632839"
  },
  {
    "text": "program even do what I want it to do so you can't ask in general whether a",
    "start": "2632839",
    "end": "2638680"
  },
  {
    "text": "program meets its specification or you know does this program not contain any",
    "start": "2638680",
    "end": "2643839"
  },
  {
    "text": "bugs this is a problem that Apple has they would love to be able to take all of the submissions to the App Store and",
    "start": "2643839",
    "end": "2650000"
  },
  {
    "text": "feed them into some magical machine that tells them for sure whether those submissions are calling any private apis",
    "start": "2650000",
    "end": "2656319"
  },
  {
    "text": "or whether they have any malware in them or or anything like that but in general that kind of that kind of operation is",
    "start": "2656319",
    "end": "2663240"
  },
  {
    "text": "not possible to do correctly and this observation is called right theorem",
    "start": "2663240",
    "end": "2668359"
  },
  {
    "text": "which roughly says any interesting property of program behavior is",
    "start": "2668359",
    "end": "2673440"
  },
  {
    "text": "undecidable and just to tell you the meaning of those words the word interesting means that any given program",
    "start": "2673440",
    "end": "2679559"
  },
  {
    "text": "may or may not have that property so it's something that's worth checking for um Behavior quite specifically means",
    "start": "2679559",
    "end": "2686200"
  },
  {
    "text": "something about the function that's computed by a program and that's a bit vague but it doesn't mean things like",
    "start": "2686200",
    "end": "2691559"
  },
  {
    "text": "syntactic properties of the program obviously you can decide whether a program whether the source carde of a",
    "start": "2691559",
    "end": "2697160"
  },
  {
    "text": "program contains the literal string Fu just by looking at it but these",
    "start": "2697160",
    "end": "2702200"
  },
  {
    "text": "properties of program Behavior are about what happens when the program runs and undecidable means that you can't write a",
    "start": "2702200",
    "end": "2708800"
  },
  {
    "text": "program to decide it in general so this risis theorem is a massive",
    "start": "2708800",
    "end": "2716760"
  },
  {
    "text": "Downer like this is why being a programmer is so annoying you can't get",
    "start": "2716760",
    "end": "2722359"
  },
  {
    "text": "the computer to tell you things about programs even though it would be really useful for the computer to be able to",
    "start": "2722359",
    "end": "2727720"
  },
  {
    "text": "tell you things about programs so briefly why does this happen",
    "start": "2727720",
    "end": "2734599"
  },
  {
    "text": "why are we in this situation and roughly it's because you can't look into the future and predict",
    "start": "2734599",
    "end": "2741280"
  },
  {
    "text": "what a program is going to do in general the only way to find out for sure what a program is going to do is to run it and",
    "start": "2741280",
    "end": "2749400"
  },
  {
    "text": "Steven Wolfram calls this computational irreducibility the problem is when you",
    "start": "2749400",
    "end": "2755280"
  },
  {
    "text": "run a program you don't know in advance how long you have to wait for it to finish and some programs never will",
    "start": "2755280",
    "end": "2764000"
  },
  {
    "text": "finish so any system that's got enough power to be self-referential like these",
    "start": "2764000",
    "end": "2769599"
  },
  {
    "text": "Universal systems can't correctly answer every question about itself that's the essential content of girdle's first",
    "start": "2769599",
    "end": "2776240"
  },
  {
    "text": "incompleteness theorem and you know we didn't this was only discovered in 1936",
    "start": "2776240",
    "end": "2781720"
  },
  {
    "text": "and it was a a massive bombshell um in mathematics and it's continues to be a",
    "start": "2781720",
    "end": "2787640"
  },
  {
    "text": "massive bombshell today in computer science that like we can't we can't build this system these systems that are",
    "start": "2787640",
    "end": "2793760"
  },
  {
    "text": "able to answer every sensible question in order to answer questions about self-referential systems we have",
    "start": "2793760",
    "end": "2800040"
  },
  {
    "text": "to be able to step outside of them and use a different more powerful system to answer questions about the",
    "start": "2800040",
    "end": "2805680"
  },
  {
    "text": "self-referential system and that was fine in the case of these total programming languages because we could",
    "start": "2805680",
    "end": "2810880"
  },
  {
    "text": "just say oh we'll just step out of it and use a more powerful programming language to to answer that question but",
    "start": "2810880",
    "end": "2816200"
  },
  {
    "text": "the problem here is that when we're talking about Universal systems there is no more powerful system for us to upgrade to these T incomplete systems",
    "start": "2816200",
    "end": "2823480"
  },
  {
    "text": "are the most powerful computational systems that we know how to build so we can't do this step outside to answer the",
    "start": "2823480",
    "end": "2829520"
  },
  {
    "text": "questions we've hit a kind of a ceiling of of capability so I'm nearly out of time I'm",
    "start": "2829520",
    "end": "2835640"
  },
  {
    "text": "just going to very briefly try and leave you with information about how we can cope um how do we live in this this",
    "start": "2835640",
    "end": "2842640"
  },
  {
    "text": "difficult world we can cope by asking undecidable questions but then",
    "start": "2842640",
    "end": "2850040"
  },
  {
    "text": "giving up if we can't find an answer in a reasonable time so if we want to make a Hello World Checker we could just run",
    "start": "2850040",
    "end": "2855680"
  },
  {
    "text": "a program for 10 seconds and if it hasn't printed hello world within 10 seconds we can just give up and say oh",
    "start": "2855680",
    "end": "2861720"
  },
  {
    "text": "well if it hasn't printed hello world then we'll just put it in the no bin but sometimes that's going to be wrong",
    "start": "2861720",
    "end": "2867079"
  },
  {
    "text": "because if you just waited another second maybe it would have printed it out it might have been one of those",
    "start": "2867079",
    "end": "2872319"
  },
  {
    "text": "programs that prints hello world after 11 seconds but if you're going to wait around for those ones then why not wait",
    "start": "2872319",
    "end": "2877520"
  },
  {
    "text": "12 seconds or 13 seconds or so on So eventually you're going to have to accept that you're going to make",
    "start": "2877520",
    "end": "2884200"
  },
  {
    "text": "mistakes you could ask lots of small questions that collectively provide evidence for the big question that you",
    "start": "2884200",
    "end": "2890040"
  },
  {
    "text": "want and this is really like writing acceptance tests you know you're not trying to prove that a system meets its",
    "start": "2890040",
    "end": "2897119"
  },
  {
    "text": "specification but you just take a bunch of samples that give you collectively confidence that it does what it's",
    "start": "2897119",
    "end": "2902599"
  },
  {
    "text": "supposed to do you could ask decidable questions by being conservative and this is something",
    "start": "2902599",
    "end": "2908119"
  },
  {
    "text": "the optimizing compilers do they do an analysis called uh unreachable code elimination and in order to decide which",
    "start": "2908119",
    "end": "2915040"
  },
  {
    "text": "parts of a program are unreachable which is an undecidable property by Rice's theorem they just overestimate which",
    "start": "2915040",
    "end": "2921400"
  },
  {
    "text": "bits of the program are reachable so by overestimating reachability sometimes",
    "start": "2921400",
    "end": "2927079"
  },
  {
    "text": "they fail to remove pieces of code from your program that are actually never reached in practice but that's for",
    "start": "2927079",
    "end": "2933400"
  },
  {
    "text": "safety that's a reasonable tradeoff and Fin finally you might decide to approximate a program by",
    "start": "2933400",
    "end": "2940520"
  },
  {
    "text": "turning it into something simpler and then ask questions about that simpler approximation hopefully decidable",
    "start": "2940520",
    "end": "2946200"
  },
  {
    "text": "questions and static type systems are quite a good example of this if you have a program that talks about values you",
    "start": "2946200",
    "end": "2951799"
  },
  {
    "text": "know x equals 1 Y = X + 2 you could turn that into a much vager program about",
    "start": "2951799",
    "end": "2957359"
  },
  {
    "text": "types you could say x equals some integer Y equals X plus some integer and",
    "start": "2957359",
    "end": "2962960"
  },
  {
    "text": "by making it more vague you've made it quite likely that the questions you wanted to ask about it are now decidable",
    "start": "2962960",
    "end": "2968400"
  },
  {
    "text": "in the realm of these kind of vague types and hopefully if you've designed your types correctly that tells you something interesting about the original",
    "start": "2968400",
    "end": "2974839"
  },
  {
    "text": "program so there is some hope all right I'm out of time um if you're interested in this stuff I've written a book about",
    "start": "2974839",
    "end": "2981640"
  },
  {
    "text": "this stuff I don't have time to tell you about it but I go through all of this kind of cool crazy computation Theory",
    "start": "2981640",
    "end": "2987520"
  },
  {
    "text": "stuff so if you're interested um you should take a look at that you know I'm not going to say anything um that's on",
    "start": "2987520",
    "end": "2993920"
  },
  {
    "text": "computation book.com there's a free chapter if if this has piqued your curiosity um thank you very much",
    "start": "2993920",
    "end": "3000640"
  },
  {
    "text": "[Applause]",
    "start": "3000640",
    "end": "3007940"
  }
]