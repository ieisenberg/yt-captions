[
  {
    "start": "0",
    "end": "77000"
  },
  {
    "text": "thank you",
    "start": "6180",
    "end": "8839"
  },
  {
    "text": "my name is I works on way too many projects at the same time right now I'm working on Cotton X which is a way to",
    "start": "11760",
    "end": "19320"
  },
  {
    "text": "share renewable electricity with your neighbors efficiently and using mathematics to do that and I've been",
    "start": "19320",
    "end": "24420"
  },
  {
    "text": "working for a few years now on which is a version the version control system based also on mathematics that I'm going",
    "start": "24420",
    "end": "31740"
  },
  {
    "text": "to talk about today so I have way too many things to tell you I'll start with talking about what",
    "start": "31740",
    "end": "39239"
  },
  {
    "text": "version control is and do a brief recap on uh like where it comes from how it",
    "start": "39239",
    "end": "45059"
  },
  {
    "text": "started where we're at now then I'll talk about our solution and the principles behind it and then",
    "start": "45059",
    "end": "52860"
  },
  {
    "text": "I'll talk about implementation of of that Version Control System including one of the fastest database backends uh",
    "start": "52860",
    "end": "61920"
  },
  {
    "text": "in the world that I've been forced to write in order to implement payroll correctly and then finally I'll have a some some",
    "start": "61920",
    "end": "69960"
  },
  {
    "text": "announcements some surprise announcements to make about the hosting platform to host uh repositories",
    "start": "69960",
    "end": "77939"
  },
  {
    "text": "so first version control is actually very simple and it's not it's not",
    "start": "77939",
    "end": "83159"
  },
  {
    "text": "specific to to uh to uh coders it's when one or more co-authors edit three of",
    "start": "83159",
    "end": "89640"
  },
  {
    "text": "documents concurrently and one key feature a Version Control compared to things like Google docs for example is",
    "start": "89640",
    "end": "95640"
  },
  {
    "text": "the ability to do asynchronous edits so this sounds like it's it should be uh",
    "start": "95640",
    "end": "101100"
  },
  {
    "text": "easier uh when when you're doing when you're going asynchronous because you're giving more flexibility your users it's",
    "start": "101100",
    "end": "107460"
  },
  {
    "text": "actually the opposite so when you allow co-authors to choose when they want to sync or merge there are there are",
    "start": "107460",
    "end": "114659"
  },
  {
    "text": "changes or their their work then uh Things become much more complicated uh",
    "start": "114659",
    "end": "120240"
  },
  {
    "text": "the main reason is because edits May conflicts and and that their like conflicts happen in in uh in human work",
    "start": "120240",
    "end": "127560"
  },
  {
    "text": "like when I don't have I'm not claiming here to have a universal solution to all",
    "start": "127560",
    "end": "132840"
  },
  {
    "text": "conflicts human humans may have um but I'm merely trying to uh help them",
    "start": "132840",
    "end": "138599"
  },
  {
    "text": "model their conflicts in a proper way then finally another like not finally but yet another feature Version Control",
    "start": "138599",
    "end": "145319"
  },
  {
    "text": "that we might like is to be able to review a Project's history to tell when a feature or when a bug was introduced",
    "start": "145319",
    "end": "152220"
  },
  {
    "text": "who introduced it and uh sometimes it gives indication on how to fix it",
    "start": "152220",
    "end": "157860"
  },
  {
    "start": "157000",
    "end": "328000"
  },
  {
    "text": "so many of you here or many people I talk to about this project think uh that version control is a sold problem uh",
    "start": "157860",
    "end": "164040"
  },
  {
    "text": "because our tools like gets Mercurial SVN CVS uh people sometimes mention fossil per force like we have a huge",
    "start": "164040",
    "end": "170519"
  },
  {
    "text": "collection of tools but the our tools like we're they're",
    "start": "170519",
    "end": "175920"
  },
  {
    "text": "probably considered one of the greatest achievements of our of our industry and yet there are nobody outside of us uses",
    "start": "175920",
    "end": "181739"
  },
  {
    "text": "them so these days we have silverware provided by uh NASA with materials that",
    "start": "181739",
    "end": "187379"
  },
  {
    "text": "can go on Mars but our greatest achievements cannot be used even by uh",
    "start": "187379",
    "end": "192840"
  },
  {
    "text": "editors of legal documents or parliaments or any and even even the video game industry doesn't use them",
    "start": "192840",
    "end": "199620"
  },
  {
    "text": "so it's not because they're they're too young uh they've been around for quite quite a number of decades now",
    "start": "199620",
    "end": "207540"
  },
  {
    "text": "um lately there's been a trend of doing distributed version controls that's cool there's no no Central Central server",
    "start": "207540",
    "end": "214260"
  },
  {
    "text": "except that the tools are unusable if you don't use a central server and even actually worse or well sorry uh worse",
    "start": "214260",
    "end": "222480"
  },
  {
    "text": "than the central server a global Central server Universal to all projects and uh our current tools require strong",
    "start": "222480",
    "end": "230819"
  },
  {
    "text": "work discipline and planning you have to plan your your uh things in advance so the picture on the right is a simple",
    "start": "230819",
    "end": "237420"
  },
  {
    "text": "example of a workflow considered useful and I personally don't understand it",
    "start": "237420",
    "end": "243060"
  },
  {
    "text": "um well I actually do both um but but yeah onboarding people and",
    "start": "243060",
    "end": "248940"
  },
  {
    "text": "letting like diverse people uh from outside of like without for example a",
    "start": "248940",
    "end": "254760"
  },
  {
    "text": "formal training in computer science uh know about uh about this tool they'd be like uh are you crazy or whatever and",
    "start": "254760",
    "end": "261359"
  },
  {
    "text": "that's just a small part of what I'm I'm about to say because there's flows that",
    "start": "261359",
    "end": "266940"
  },
  {
    "text": "any other any engineer in any other industry in the world would just laugh at us if they knew about that and so my",
    "start": "266940",
    "end": "273000"
  },
  {
    "text": "claim is that by using these tools we are wasting significant human work time at a global scale I don't know how many",
    "start": "273000",
    "end": "278880"
  },
  {
    "text": "millions of engineer hours are wasted every year into fixing that rebase that didn't work or refixing that conflict",
    "start": "278880",
    "end": "284940"
  },
  {
    "text": "again or wait wait re-refixing it or I don't know a re-refixing it there's actually a command in git called rear",
    "start": "284940",
    "end": "293100"
  },
  {
    "text": "um uh some improvements have been proposed using uh using mathematics physics like",
    "start": "293100",
    "end": "300060"
  },
  {
    "text": "darks for example but unfortunately They Don't Really scale uh well just a note before I go any further it's like",
    "start": "300060",
    "end": "306000"
  },
  {
    "text": "puregold is open source and I I'm not considering uh non-open version short systems because get git is good enough",
    "start": "306000",
    "end": "312960"
  },
  {
    "text": "uh it's it's an okay system it's it's phenomenal in some ways but uh well if",
    "start": "312960",
    "end": "319680"
  },
  {
    "text": "you if you're going for a commercial system uh then you'd better be like at least as good as that so and I don't",
    "start": "319680",
    "end": "325860"
  },
  {
    "text": "know any system that achieved out anyway so our demands for a version control",
    "start": "325860",
    "end": "331919"
  },
  {
    "start": "328000",
    "end": "394000"
  },
  {
    "text": "system so we want associative merges so we want like what what that means in so",
    "start": "331919",
    "end": "338300"
  },
  {
    "text": "associativity is a mathematical term and it means that when you take changes A",
    "start": "338300",
    "end": "343500"
  },
  {
    "text": "and B together they should be the same as a followed by B so that sounds like something",
    "start": "343500",
    "end": "349139"
  },
  {
    "text": "absolutely trivial and I'll give you a picture in a minute you'll uh that'll make it even clearer next we want",
    "start": "349139",
    "end": "355560"
  },
  {
    "text": "commutative mergers so we want the property that if A and B can be produced independently there are ordered the",
    "start": "355560",
    "end": "361800"
  },
  {
    "text": "order in which you apply them doesn't matter you have Alice and Bob working together if Alice pools Bob's changes it",
    "start": "361800",
    "end": "368100"
  },
  {
    "text": "should result in the same thing as if Bob pulls Alice's changes then we want branches well or maybe not",
    "start": "368100",
    "end": "376340"
  },
  {
    "text": "we have branches in pihood but they are less fundamental than in in gits to in",
    "start": "376340",
    "end": "381900"
  },
  {
    "text": "order not to uh do the same kind of workflows considered useful that I showed in previous slide",
    "start": "381900",
    "end": "387600"
  },
  {
    "text": "and obviously we're going to label algorithmic complexity an ideally fast implementations and actually here we",
    "start": "387600",
    "end": "393419"
  },
  {
    "text": "have both so more about uh like the two properties starting with associative merges so this",
    "start": "393419",
    "end": "400560"
  },
  {
    "start": "394000",
    "end": "579000"
  },
  {
    "text": "is really easy so this is like you have Alice producing a comments a and Bob",
    "start": "400560",
    "end": "406020"
  },
  {
    "text": "producing your comets B in parallel and Alice wants to First review Bob's",
    "start": "406020",
    "end": "412620"
  },
  {
    "text": "first comments merges and then review Bob's second comments and merge it and this should do the same as if she uh had",
    "start": "412620",
    "end": "419280"
  },
  {
    "text": "merged both comments at the same like at once I'm not reordering comments here I'm just merging and actually in git or",
    "start": "419280",
    "end": "426479"
  },
  {
    "text": "SVN or Mercury or CBS or RCS or like any system based on freeware Merch this is not the case",
    "start": "426479",
    "end": "432180"
  },
  {
    "text": "such a simple property isn't even um isn't even Satisfied by by three-way",
    "start": "432180",
    "end": "438000"
  },
  {
    "text": "merge so here's an example of why it's a counter example of the assistant you've get so you start with a documents with",
    "start": "438000",
    "end": "445860"
  },
  {
    "text": "only two lines in the um Alice this she's following the top path she will start by introducing a g",
    "start": "445860",
    "end": "453240"
  },
  {
    "text": "and then she will later add another comment with two new lines above that G A and B and",
    "start": "453240",
    "end": "460319"
  },
  {
    "text": "Bob in parallel to that we'll just add an X between the original A and B and if you try that if you tried that scenario",
    "start": "460319",
    "end": "467039"
  },
  {
    "text": "on git today you will see that Bob's new line is like gets merged into Alice's",
    "start": "467039",
    "end": "472800"
  },
  {
    "text": "new lines so that's a giant line reshuffling happening and git that just",
    "start": "472800",
    "end": "478020"
  },
  {
    "text": "does that silently uh so this is this isn't even a conflict the reason for that is that it's trying to run a hack",
    "start": "478020",
    "end": "484500"
  },
  {
    "text": "to optimize some Metric and uh it turns out there may be several uh Solutions sometimes and it just doesn't know about",
    "start": "484500",
    "end": "491699"
  },
  {
    "text": "them it just picks one and said ah okay done so I don't know about you but if I were",
    "start": "491699",
    "end": "498000"
  },
  {
    "text": "running high security applications and if I were writing code related security this was absolutely terrify me so the",
    "start": "498000",
    "end": "505199"
  },
  {
    "text": "fact that your tool can just silently reshuffle your lines even if it doesn't happen often uh it's just super scary it",
    "start": "505199",
    "end": "513180"
  },
  {
    "text": "also means that the code your review is not the code that gets merged so you should review your your tool request",
    "start": "513180",
    "end": "518880"
  },
  {
    "text": "before merge and after merge so that's double the work well you should test them after merge",
    "start": "518880",
    "end": "524520"
  },
  {
    "text": "anyway but you shouldn't be as careful in your review and tests don't catch all bugs",
    "start": "524520",
    "end": "530040"
  },
  {
    "text": "now the community emerges that's a slightly less trivial thing because all our all the tools other than darks and",
    "start": "530040",
    "end": "536880"
  },
  {
    "text": "people um explicitly prevent that so community of merges means exactly",
    "start": "536880",
    "end": "542160"
  },
  {
    "text": "what's in this diagram you have Alice producing your comments a bob producing your comments or a change B and then",
    "start": "542160",
    "end": "547860"
  },
  {
    "text": "they want to be able to pool each other's changes and they should just happen transparently uh and without",
    "start": "547860",
    "end": "554060"
  },
  {
    "text": "without anything special happening and they should like the order should the order is important because they",
    "start": "554060",
    "end": "559440"
  },
  {
    "text": "obviously your local local repository history is something super important but it shouldn't matter in the sense that",
    "start": "559440",
    "end": "567300"
  },
  {
    "text": "um like there should there there is no Global way to order things that happen in parallel so uh so that's this should",
    "start": "567300",
    "end": "575040"
  },
  {
    "text": "be reflected in in how the tool handles uh parallelism all right so why do we why would we even",
    "start": "575040",
    "end": "581940"
  },
  {
    "start": "579000",
    "end": "687000"
  },
  {
    "text": "want that uh Beyond just academic curiosity because our the tools we are",
    "start": "581940",
    "end": "587880"
  },
  {
    "text": "currently using right now are never Community even they explicitly prevent that so why would you we won't want this",
    "start": "587880",
    "end": "593940"
  },
  {
    "text": "well one reason would be that you might want to unapply all changes for example",
    "start": "593940",
    "end": "599100"
  },
  {
    "text": "you pull the change and then went on like you you or you push the change into into production",
    "start": "599100",
    "end": "606180"
  },
  {
    "text": "um because you've you tested it thoroughly and it seemed to work then you push more changes",
    "start": "606180",
    "end": "611640"
  },
  {
    "text": "and then after a while you realize that your initial change was wrong and you want to unprove it quickly uh without",
    "start": "611640",
    "end": "617880"
  },
  {
    "text": "having to change the entire uh the entire sequence of patches that came afterwards so you might be able to to",
    "start": "617880",
    "end": "623820"
  },
  {
    "text": "you might you want you might want to be able to do that and uh well if you if",
    "start": "623820",
    "end": "628860"
  },
  {
    "text": "you disallow uh commutation you can't and here uh Community allows you to like",
    "start": "628860",
    "end": "634860"
  },
  {
    "text": "change that like move that change that buggy change to uh",
    "start": "634860",
    "end": "640200"
  },
  {
    "text": "the uh latest uh like to the top of the uh to the top of the list and and then",
    "start": "640200",
    "end": "645839"
  },
  {
    "text": "and apply it simply then you might want to do uh cherry picking so cherry picking is like oh my colleague produced",
    "start": "645839",
    "end": "652019"
  },
  {
    "text": "a nice a nice bug fix while working in feature I want that bug fix but the feature is not quite ready so how do I",
    "start": "652019",
    "end": "658079"
  },
  {
    "text": "do that without changing the entire identity uh and solving conflicts and resolving them and re-resolving them and",
    "start": "658079",
    "end": "664680"
  },
  {
    "text": "re-re-resolving them so another reason I might want that is because I want",
    "start": "664680",
    "end": "670019"
  },
  {
    "text": "partial clones so I have a giant mono Ripple and I want to pull just dispatches related to Tiny sub-projects",
    "start": "670019",
    "end": "676920"
  },
  {
    "text": "and so that's the way we handle mono repos in people and you don't need sub modules you don't need hacks you don't",
    "start": "676920",
    "end": "682680"
  },
  {
    "text": "need lfs you don't need any of that it just it just works and it's just a standard situation",
    "start": "682680",
    "end": "688320"
  },
  {
    "start": "687000",
    "end": "765000"
  },
  {
    "text": "okay so how do we do that um well first we have to change",
    "start": "688320",
    "end": "694680"
  },
  {
    "text": "perspective and take some uh like on on Zoom uh the the the the the space and",
    "start": "694680",
    "end": "701700"
  },
  {
    "text": "and and try to look at what we're doing fundamentally uh what What's what is it that we're doing when we work",
    "start": "701700",
    "end": "708360"
  },
  {
    "text": "um so we'll start talking about States or snapshots and changes also called",
    "start": "708360",
    "end": "713700"
  },
  {
    "text": "patches sometimes so all our tools today are storing States snapshots and they",
    "start": "713700",
    "end": "719880"
  },
  {
    "text": "only compute changes when needed like for example in three-way merge computes changes and changes between the lists of",
    "start": "719880",
    "end": "725040"
  },
  {
    "text": "changes but now what if we did the opposite what is if we change perspective and started",
    "start": "725040",
    "end": "730740"
  },
  {
    "text": "considering uh changes as the as first class citizens why would we want to do that well because my claim is and it's",
    "start": "730740",
    "end": "737640"
  },
  {
    "text": "not backed by anything but my claim is that when we work what we're fundamentally producing is not a new",
    "start": "737640",
    "end": "743339"
  },
  {
    "text": "version of the world what or a new version of a project when we work what we're producing is changes to a project",
    "start": "743339",
    "end": "750420"
  },
  {
    "text": "and so this seems to match the way we work or the way we think about work",
    "start": "750420",
    "end": "755820"
  },
  {
    "text": "closer and so it probably will be able to get some benefits out of that and so now what if we did a hybrid system where",
    "start": "755820",
    "end": "761880"
  },
  {
    "text": "we stored both it actually that's actually what we do all right so this has been looked at",
    "start": "761880",
    "end": "767820"
  },
  {
    "start": "765000",
    "end": "910000"
  },
  {
    "text": "before um I'll just give you two examples of of ideas in the in that space that some of",
    "start": "767820",
    "end": "773279"
  },
  {
    "text": "you may already know about so the first one is operational transforms it's the idea behind the Google docs for example",
    "start": "773279",
    "end": "779579"
  },
  {
    "text": "so in Google doc like this is this is an example so in operational transforms you",
    "start": "779579",
    "end": "784920"
  },
  {
    "text": "have transforms and or or changes on on an initial State here a document with",
    "start": "784920",
    "end": "791700"
  },
  {
    "text": "three letters ABC and then what you do in operational transforms is that when you have two changes two two",
    "start": "791700",
    "end": "798779"
  },
  {
    "text": "transforms coming in constantly um you change they might change each",
    "start": "798779",
    "end": "804180"
  },
  {
    "text": "other in order to be to be able to apply them in a sequence so for example here um on the path down downwards we're",
    "start": "804180",
    "end": "811800"
  },
  {
    "text": "we're we're inserting an X at the very beginning of the file so that's change T1 and on the path to the right we're",
    "start": "811800",
    "end": "819300"
  },
  {
    "text": "doing T2 which deletes the letter c and what happens when you combine these two changes well if you follow the path",
    "start": "819300",
    "end": "825839"
  },
  {
    "text": "on the top you're you're first deleting the C and then while T1 was at the beginning of the file so you don't need to do anything because your previous",
    "start": "825839",
    "end": "832320"
  },
  {
    "text": "change uh the deviation changed the the end of five so that's okay nothing",
    "start": "832320",
    "end": "837420"
  },
  {
    "text": "nothing special going on there on the other path uh going first downwards and then to the right",
    "start": "837420",
    "end": "843240"
  },
  {
    "text": "you have to uh well you you're first inserting something and then that so that shifts shifts the index of your",
    "start": "843240",
    "end": "850139"
  },
  {
    "text": "deletion so now you're instead of deleting the character that was at uh position R2 you're deleting the",
    "start": "850139",
    "end": "856260"
  },
  {
    "text": "character that's at position three so darks for example does this uh it",
    "start": "856260",
    "end": "861779"
  },
  {
    "text": "changes uh it changes it's edit like it changes uh uh patches as as it as it",
    "start": "861779",
    "end": "867899"
  },
  {
    "text": "goes and it actually does does something really clever to detect conflicts they don't have time to uh get into the",
    "start": "867899",
    "end": "873779"
  },
  {
    "text": "details but that's what what they're doing there is really cool um unfortunately",
    "start": "873779",
    "end": "878940"
  },
  {
    "text": "this technique leads to uh quadratic explosion of cases because for if you have like n different types of changes",
    "start": "878940",
    "end": "884880"
  },
  {
    "text": "you have n times n minus one over two uh different cases to consider and when",
    "start": "884880",
    "end": "890459"
  },
  {
    "text": "you're just doing insertions and deletions that's easy when you're doing anything uh worse than that or more",
    "start": "890459",
    "end": "895980"
  },
  {
    "text": "complicated that's that becomes a nightmare to implements and I'm actually here I'm I'm quoting uh like saying a",
    "start": "895980",
    "end": "902339"
  },
  {
    "text": "nightmare I should implements actually a quote by Google Engineers who try to implement that for for uh Google Docs so",
    "start": "902339",
    "end": "908339"
  },
  {
    "text": "so it actually is a nightmare um all right uh another approach that uh",
    "start": "908339",
    "end": "914579"
  },
  {
    "start": "910000",
    "end": "1006000"
  },
  {
    "text": "some of you may have heard about is crdts or config-free replicated data types the general principle is to design",
    "start": "914579",
    "end": "921060"
  },
  {
    "text": "a structure and operations at the same time together so that all operations have the properties we want so they are",
    "start": "921060",
    "end": "926880"
  },
  {
    "text": "associative commutative natural examples and the the easiest examples uh that you might come across",
    "start": "926880",
    "end": "932880"
  },
  {
    "text": "when you're learning about trdts are increment only counters where the only operation on the counter is just to",
    "start": "932880",
    "end": "938459"
  },
  {
    "text": "increment it and in certainly sets or append only sets so these are easy now",
    "start": "938459",
    "end": "944699"
  },
  {
    "text": "what happens when you want to do deletions then you get into the more subtle examples of crdts then you start",
    "start": "944699",
    "end": "950339"
  },
  {
    "text": "needing uh tomestones and Lamport clocks and all these things from distributed",
    "start": "950339",
    "end": "957620"
  },
  {
    "text": "programming and so I've done the natural the subtle now let's move on to the",
    "start": "957620",
    "end": "962699"
  },
  {
    "text": "useless if you consider a full git repository that's a crdt so what are we even doing here",
    "start": "962699",
    "end": "969360"
  },
  {
    "text": "um well the thing is why my claim is why I claim this is useless is because",
    "start": "969360",
    "end": "974480"
  },
  {
    "text": "saying git repository the crdt just means that you can clone it and you can design a protocol to clone it and and",
    "start": "974480",
    "end": "981060"
  },
  {
    "text": "that's just it um now if you just if you consider a head which is the thing we're interested",
    "start": "981060",
    "end": "987120"
  },
  {
    "text": "in which is the current state of your repository then that's not a serology that's like absolutely not one uh simply",
    "start": "987120",
    "end": "993540"
  },
  {
    "text": "because as I said uh concurrent changes don't compute so that was like a really brief regard of",
    "start": "993540",
    "end": "1000740"
  },
  {
    "text": "the literature on that thing now let's move on to uh our our solution or people",
    "start": "1000740",
    "end": "1007699"
  },
  {
    "start": "1006000",
    "end": "1090000"
  },
  {
    "text": "so this all started because we were looking at conflicts and because they",
    "start": "1007699",
    "end": "1013160"
  },
  {
    "text": "easy cases the cases where you can just merge in everything uh goes goes right then that's not super interesting so",
    "start": "1013160",
    "end": "1020600"
  },
  {
    "text": "what happens when you look at conflicts where that's where we need a good tool the most because conflicts are confusing and you want to be able to just talk",
    "start": "1020600",
    "end": "1028339"
  },
  {
    "text": "about the fundamental things behind the conflict like we disagree on something and and not about how your tools result",
    "start": "1028339",
    "end": "1034760"
  },
  {
    "text": "like model the conflicts so the exact definition depends on the tool different tools have different definitions of what",
    "start": "1034760",
    "end": "1041000"
  },
  {
    "text": "what a conflict is so for example one commonly accepted definition is that when Alice and Bob write the same file",
    "start": "1041000",
    "end": "1047600"
  },
  {
    "text": "at the same place so that's obviously conflict there's no way to order their uh there are there are changes",
    "start": "1047600",
    "end": "1053600"
  },
  {
    "text": "another example is when Alice renames a file from F to G and Bob in parallel renames it to H so that's also a",
    "start": "1053600",
    "end": "1061160"
  },
  {
    "text": "conflict again that depends on the tool another example which actually very few systems handle and people doesn't handle",
    "start": "1061160",
    "end": "1068299"
  },
  {
    "text": "this uh that's when Alice renames the function f while bobco adds a call to",
    "start": "1068299",
    "end": "1073340"
  },
  {
    "text": "ALF so that's extremely tricky uh darks tries to do that unfortunately uh it's",
    "start": "1073340",
    "end": "1078980"
  },
  {
    "text": "undecidable to tell whether Bob actually added a call to F or I did something else so that's one of the reasons we",
    "start": "1078980",
    "end": "1085220"
  },
  {
    "text": "don't handle this uh there's also many other reasons but that's good enough reason for me okay so how do we how do we do that so",
    "start": "1085220",
    "end": "1093740"
  },
  {
    "start": "1090000",
    "end": "1190000"
  },
  {
    "text": "why are reflection and conflicts helped us shape a new tool",
    "start": "1093740",
    "end": "1098960"
  },
  {
    "text": "because we were inspired by a paper by Samuel and mimraim and Cynthia di Gusto",
    "start": "1098960",
    "end": "1104059"
  },
  {
    "text": "about uh using category to solve that problem so category theory is a very",
    "start": "1104059",
    "end": "1109160"
  },
  {
    "text": "general theory in mathematics that allows you to model many different kinds of proofs in this particular 2D",
    "start": "1109160",
    "end": "1116360"
  },
  {
    "text": "framework with points and arrows between between the points that's that's most of",
    "start": "1116360",
    "end": "1121460"
  },
  {
    "text": "what we have in category Theory it's a very it's it's very uh very simple and very abstract at the same time",
    "start": "1121460",
    "end": "1128539"
  },
  {
    "text": "so what we want is that for any two patches f and g produced from an initial",
    "start": "1128539",
    "end": "1134240"
  },
  {
    "text": "State X so F leads to Y and G leads to Z we want the states p and we want a",
    "start": "1134240",
    "end": "1141500"
  },
  {
    "text": "unique State P such that anything we do in the future so for any state q that we",
    "start": "1141500",
    "end": "1147260"
  },
  {
    "text": "can reach after both f and g so for anything at least and Bob could",
    "start": "1147260",
    "end": "1152299"
  },
  {
    "text": "do to reach a common state in the future they could start by uh merging now reaching a minimal common state uh p and",
    "start": "1152299",
    "end": "1160820"
  },
  {
    "text": "then and then they can reach Q so we we what we want is that for any two patches you can start by finding a minimum",
    "start": "1160820",
    "end": "1167360"
  },
  {
    "text": "common state and and then and then doing something to reach any other future common States",
    "start": "1167360",
    "end": "1172580"
  },
  {
    "text": "so I realize I'm going a bit fast on this slide but a category theorists have",
    "start": "1172580",
    "end": "1178160"
  },
  {
    "text": "the tool to handle that uh they they say that if P exists which implies its",
    "start": "1178160",
    "end": "1183440"
  },
  {
    "text": "uniqueness we call P the push out of FNG so why is why is this important well",
    "start": "1183440",
    "end": "1189559"
  },
  {
    "text": "because as you can imagine push outs like it's not that simple so push outs don't",
    "start": "1189559",
    "end": "1195380"
  },
  {
    "start": "1190000",
    "end": "1395000"
  },
  {
    "text": "always exist and this is this is strictly equivalent to saying that sometimes uh there are conflicts in in between our edits so how",
    "start": "1195380",
    "end": "1202520"
  },
  {
    "text": "do we how do we uh deal with that then well category Theory tells you that",
    "start": "1202520",
    "end": "1208640"
  },
  {
    "text": "the quest that gives you a new question to Lucas so now the question becomes how to generalize the representation of",
    "start": "1208640",
    "end": "1214220"
  },
  {
    "text": "States so states are like X Y uh z p or Q so that all pairs of changes like f",
    "start": "1214220",
    "end": "1220039"
  },
  {
    "text": "and g uh have a push out well the solution is that uh your the",
    "start": "1220039",
    "end": "1226760"
  },
  {
    "text": "minimal like the the minimal uh extension of files that can tolerate",
    "start": "1226760",
    "end": "1232160"
  },
  {
    "text": "conflict so that's what we're actually looking at so the minimal extension of files that can model conflicts is",
    "start": "1232160",
    "end": "1237679"
  },
  {
    "text": "um uh directed graphs where vertices are bytes or byte intervals and edges",
    "start": "1237679",
    "end": "1243799"
  },
  {
    "text": "represent the union of all known order between bytes so I know that so probably sounds a little abstract but I'll give",
    "start": "1243799",
    "end": "1250220"
  },
  {
    "text": "you a few examples so for example let's let's see how we uh how we deal with uh bytes with insertions like let's",
    "start": "1250220",
    "end": "1257360"
  },
  {
    "text": "add some bytes to an existing file so um well first some details so vertices",
    "start": "1257360",
    "end": "1263000"
  },
  {
    "text": "in people are labeled by change number uh that's the the change that introduced",
    "start": "1263000",
    "end": "1268340"
  },
  {
    "text": "the introduced the the vertex and then the interval within that change and the",
    "start": "1268340",
    "end": "1273559"
  },
  {
    "text": "edges are labeled by the chains that introduce them so for example here we're starting with just one vertex uh C 0 0 n",
    "start": "1273559",
    "end": "1282140"
  },
  {
    "text": "so that's the first n byte in change G zero and we're turn we're trying to insert uh",
    "start": "1282140",
    "end": "1289340"
  },
  {
    "text": "M bytes between positions I minus 1 and I of that vertex so what we do is we start by splitting the vertex in so we",
    "start": "1289340",
    "end": "1295940"
  },
  {
    "text": "get two vertices C 0 0 I and C 0 i n and now we're inserting a new vertex uh",
    "start": "1295940",
    "end": "1301820"
  },
  {
    "text": "between these two halves of the split so that's super easy and now we can we can",
    "start": "1301820",
    "end": "1307460"
  },
  {
    "text": "we can tell from that graph that our file has three blocks so one is the",
    "start": "1307460",
    "end": "1313220"
  },
  {
    "text": "first I bytes of c0 followed by the first M bytes of C1 and then uh some",
    "start": "1313220",
    "end": "1318559"
  },
  {
    "text": "bytes in in c0 so bytes I I to n",
    "start": "1318559",
    "end": "1323600"
  },
  {
    "text": "okay so uh that was easy enough so now how do we delete bytes well a good thing",
    "start": "1323600",
    "end": "1329840"
  },
  {
    "text": "about Version Control is that we need to uh keep the history of the entire repository anyway so it doesn't cost",
    "start": "1329840",
    "end": "1337100"
  },
  {
    "text": "cost more to uh to just uh keep the keep the deleted parts so that's what we do",
    "start": "1337100",
    "end": "1342200"
  },
  {
    "text": "here so starting from the the graph we obtained in the last slide what I'm",
    "start": "1342200",
    "end": "1347480"
  },
  {
    "text": "doing is uh I'm I'm now deleting bytes like a contiguous interval uh by its",
    "start": "1347480",
    "end": "1353780"
  },
  {
    "text": "first j2i from c0 and then 0 to K from C1 so that's by it's starting from uh J",
    "start": "1353780",
    "end": "1360440"
  },
  {
    "text": "and then uh I minus J plus K I'm deleting I minus J plus K bytes from",
    "start": "1360440",
    "end": "1366260"
  },
  {
    "text": "that from there so the way I do I do it is exactly the same thing the same way as as for insertions",
    "start": "1366260",
    "end": "1372980"
  },
  {
    "text": "I start by splitting my vertices splitting the relevant vertices at the relevant positions and and then the way",
    "start": "1372980",
    "end": "1379820"
  },
  {
    "text": "to mark them as deleted is just um is just modifying the the label of",
    "start": "1379820",
    "end": "1385460"
  },
  {
    "text": "the edges so here I'm marking my edges as deleted by uh turning them into Dash",
    "start": "1385460",
    "end": "1391580"
  },
  {
    "text": "dashed lines and and that's all we need that's that's it so that payroll is not more",
    "start": "1391580",
    "end": "1397880"
  },
  {
    "start": "1395000",
    "end": "1492000"
  },
  {
    "text": "complicated it's a bit more complicated than that but that's fundamentally the these are the two constructs we uh we",
    "start": "1397880",
    "end": "1403700"
  },
  {
    "text": "need and then there's a lot of stuff above above that but that's a like at the very base the very basic it's just",
    "start": "1403700",
    "end": "1409280"
  },
  {
    "text": "just that so other vertex in the context the context of parents and children of the vertex then change the night and",
    "start": "1409280",
    "end": "1415100"
  },
  {
    "text": "edges label so um how does that handle conflict I won't",
    "start": "1415100",
    "end": "1421280"
  },
  {
    "text": "dive into that too uh too too deep uh for uh regions of time but I'll just",
    "start": "1421280",
    "end": "1427940"
  },
  {
    "text": "State the definition of conflicts and I'll stop there so um they like first between getting into",
    "start": "1427940",
    "end": "1433940"
  },
  {
    "text": "before getting into conflicts first live vertices I call the live vertices that's the definition uh there are vertices",
    "start": "1433940",
    "end": "1440000"
  },
  {
    "text": "with incoming edges are all alive and dead vertices are vertices with incoming edges are all that and all the other",
    "start": "1440000",
    "end": "1445940"
  },
  {
    "text": "vertices so verses that have both alive and dead uh Edge is pointing to them",
    "start": "1445940",
    "end": "1451400"
  },
  {
    "text": "they're called zombies and now I'm ready to State my definition of complex so a",
    "start": "1451400",
    "end": "1456559"
  },
  {
    "text": "graph has no conflicts if and only if it has no zombie and all its alive vertices",
    "start": "1456559",
    "end": "1462380"
  },
  {
    "text": "are totally ordered so that's that's my definition of conflict and actually it actually matches what you expect so",
    "start": "1462380",
    "end": "1467900"
  },
  {
    "text": "that's just a a sequence of bytes that's that can be ordered unambiguously and uh",
    "start": "1467900",
    "end": "1474440"
  },
  {
    "text": "it can be you can tell for each byte that it is either alive or dead but done both at the same time",
    "start": "1474440",
    "end": "1480380"
  },
  {
    "text": "and well there's an extension to that an extension of that to uh files and",
    "start": "1480380",
    "end": "1485539"
  },
  {
    "text": "directories and so on but that's uh that's a significant significantly more involved so I won't talk about that",
    "start": "1485539",
    "end": "1491659"
  },
  {
    "text": "okay so um just some concluding remarks on that",
    "start": "1491659",
    "end": "1496820"
  },
  {
    "start": "1492000",
    "end": "1701000"
  },
  {
    "text": "part uh changes are so I said I I wanted them to be commutative so I I can get",
    "start": "1496820",
    "end": "1503360"
  },
  {
    "text": "that uh using using this uh this framework uh they're not completely commutative in",
    "start": "1503360",
    "end": "1509120"
  },
  {
    "text": "the sense that changes are partially ordered by their dependencies on other changes so each change has",
    "start": "1509120",
    "end": "1515780"
  },
  {
    "text": "um encodes explicitly a number of uh dependency dependencies that are",
    "start": "1515780",
    "end": "1521600"
  },
  {
    "text": "required in order to apply the change like for example you can you cannot write to a file before introducing that",
    "start": "1521600",
    "end": "1528500"
  },
  {
    "text": "file or you cannot delete a line that doesn't exist yet so that's like basic dependencies",
    "start": "1528500",
    "end": "1533900"
  },
  {
    "text": "so now cherry picking well there's no there's there there isn't even a cherry pick command in people because chirping",
    "start": "1533900",
    "end": "1539419"
  },
  {
    "text": "is the same as applying a patch we don't need to do anything special there's no git driver so git rather is",
    "start": "1539419",
    "end": "1546380"
  },
  {
    "text": "about uh solving a conflict like having to solve the conflict several times I don't know if many of you have used that",
    "start": "1546380",
    "end": "1552140"
  },
  {
    "text": "commands but uh the goal of I think it's somewhat automated now but the goal is",
    "start": "1552140",
    "end": "1557360"
  },
  {
    "text": "like once you've solved the conflict you record the conflict resolution and then try maybe if git allows to maybe replay",
    "start": "1557360",
    "end": "1563659"
  },
  {
    "text": "it sometime in sometimes in the future if it works and it doesn't always work so now conflicts are just like the",
    "start": "1563659",
    "end": "1570080"
  },
  {
    "text": "normal case and they're sold by changes and changes can be Cherry Picked so if",
    "start": "1570080",
    "end": "1575419"
  },
  {
    "text": "you've solved the conflict in one context you don't need to solve it again in another context",
    "start": "1575419",
    "end": "1580778"
  },
  {
    "text": "um for partial clones and monoreepos so I already mentioned that but there's a they're easy to implement as long as",
    "start": "1580820",
    "end": "1586220"
  },
  {
    "text": "white patches are disallowed so for example if you do Global reformatting like a patch a patch that reformats all",
    "start": "1586220",
    "end": "1592580"
  },
  {
    "text": "um all of your repository at once well I don't know we want to do that but if you do that obviously then you introduce",
    "start": "1592580",
    "end": "1598340"
  },
  {
    "text": "dependencies like unwanted dependencies between changes so if you want to do this Global reformatting one thing you",
    "start": "1598340",
    "end": "1603919"
  },
  {
    "text": "can do is just just make like one patch by uh one reformatting patch by uh by a",
    "start": "1603919",
    "end": "1609500"
  },
  {
    "text": "sub project and then you can keep going for large files",
    "start": "1609500",
    "end": "1615559"
  },
  {
    "text": "um well one thing I haven't meant like I haven't really talked about uh in detail is the way we handle large files is that",
    "start": "1615559",
    "end": "1624440"
  },
  {
    "text": "like patches patches are actually have two parts one part is the description of what they",
    "start": "1624440",
    "end": "1632419"
  },
  {
    "text": "do so insert inserting some bytes deleting some bytes and the other thing is uh the actual bytes that are inserted",
    "start": "1632419",
    "end": "1639620"
  },
  {
    "text": "or deleted and the way we handle large files is by splitting patches into the description",
    "start": "1639620",
    "end": "1646820"
  },
  {
    "text": "of what they do and that's like the operational parts and the and the the actual contents and the",
    "start": "1646820",
    "end": "1653600"
  },
  {
    "text": "operational part can be exponentially smaller than the actual content so for example if one of you are if you work at",
    "start": "1653600",
    "end": "1659840"
  },
  {
    "text": "a video game company and uh one of your artists has produced 10 version of two gigabyte assets during the day you don't",
    "start": "1659840",
    "end": "1667100"
  },
  {
    "text": "know you don't need to download all all 20 or all 10 versions you only need to download the bytes that end up being",
    "start": "1667100",
    "end": "1674179"
  },
  {
    "text": "still alive at the end of the day so that allows you to just handle large files easily while you still need to",
    "start": "1674179",
    "end": "1680900"
  },
  {
    "text": "download some some contents but much less content than deleting all the versions all right so let's move on to uh some",
    "start": "1680900",
    "end": "1688640"
  },
  {
    "text": "implementation tricks and some like cool like some things I like like there's a lot there's a lot to say about",
    "start": "1688640",
    "end": "1694220"
  },
  {
    "text": "implementation but I'm just going to tell you about some things I I like and some things I'm proud of and and the",
    "start": "1694220",
    "end": "1700400"
  },
  {
    "text": "implementation of this system um the main the main challenge was working with large graphs on disk so",
    "start": "1700400",
    "end": "1706279"
  },
  {
    "start": "1701000",
    "end": "1807000"
  },
  {
    "text": "obviously when you're doing any uh kind of like more complicated data structure",
    "start": "1706279",
    "end": "1711679"
  },
  {
    "text": "than just files the question arised of of how you should store them on disk so you don't have to",
    "start": "1711679",
    "end": "1719000"
  },
  {
    "text": "load the entire thing each time because that would be like the the cost would be proportional to the size of history and",
    "start": "1719000",
    "end": "1725539"
  },
  {
    "text": "that's just an acceptable so we want it to be actually logarithmic in the size of history and that's what",
    "start": "1725539",
    "end": "1730760"
  },
  {
    "text": "we achieve so we can we can upload the entire graph each time so we have to keep it on disk and and manipulate it",
    "start": "1730760",
    "end": "1737659"
  },
  {
    "text": "from there so the trick is to store edges in a key value store so vertices and edges vertices mapping to uh their",
    "start": "1737659",
    "end": "1745220"
  },
  {
    "text": "uh edges to their surrounding edges another thing we absolutely want is",
    "start": "1745220",
    "end": "1751460"
  },
  {
    "text": "transactions we want passive crash safety uh if like the goal with pihul is",
    "start": "1751460",
    "end": "1756679"
  },
  {
    "text": "to be much more intuitive than anything else than all the existing tools my goal is to introduce it to lawyers artists",
    "start": "1756679",
    "end": "1764440"
  },
  {
    "text": "maybe Lego builders or sonic Pi composers or the these kinds of people",
    "start": "1764440",
    "end": "1770360"
  },
  {
    "text": "and uh these people cannot tolerate uh non-p",
    "start": "1770360",
    "end": "1776059"
  },
  {
    "text": "like active crash safety they don't they cannot possibly uh they cannot possibly tolerate like some operation on the log",
    "start": "1776059",
    "end": "1783380"
  },
  {
    "text": "that should be done after you've unplugged the machine for example or after a crash happens so we absolutely",
    "start": "1783380",
    "end": "1788600"
  },
  {
    "text": "want that and next another feature is that we want uh branches so they're not as useful as",
    "start": "1788600",
    "end": "1795860"
  },
  {
    "text": "in gits but we still want them and so we want an efficiently forkable store so we",
    "start": "1795860",
    "end": "1801260"
  },
  {
    "text": "want to be able to take a database and then just clone it without copying a single byte",
    "start": "1801260",
    "end": "1806779"
  },
  {
    "text": "and so in order to solve these problems I've written a library called Santa claria so there's a Finnish word uh",
    "start": "1806779",
    "end": "1813980"
  },
  {
    "start": "1807000",
    "end": "1941000"
  },
  {
    "text": "meaning dictionary and it's an on this transactional key value store but it's not just that actually it's a more like",
    "start": "1813980",
    "end": "1820279"
  },
  {
    "text": "a general purpose file block allocator so it's um it allocates blocks in the file in a",
    "start": "1820279",
    "end": "1828620"
  },
  {
    "text": "transactional way so if you unplug the machine at any time but I really do mean anytime",
    "start": "1828620",
    "end": "1834380"
  },
  {
    "text": "um your your all your equations will go away and memory will be automatically freed and so it uses crash safety using",
    "start": "1834380",
    "end": "1842179"
  },
  {
    "text": "referential transparency and copy and write tricks so it never modifies the previous version it just creates a new",
    "start": "1842179",
    "end": "1847880"
  },
  {
    "text": "version and with that comes at a no cost because you don't",
    "start": "1847880",
    "end": "1853220"
  },
  {
    "text": "because you you already like you already need to so when you're working with disk",
    "start": "1853220",
    "end": "1858860"
  },
  {
    "text": "uh with this files you you already need to read them and so this is such an",
    "start": "1858860",
    "end": "1864200"
  },
  {
    "text": "expensive operation that just a few copies even like one I do only one copy",
    "start": "1864200",
    "end": "1869539"
  },
  {
    "text": "at most but just a few copies each time you read a block from a file don't cost anything more than uh just like don't",
    "start": "1869539",
    "end": "1876440"
  },
  {
    "text": "cut don't cost like the the cost of that is just negligible compared to the cost of reading reading a block",
    "start": "1876440",
    "end": "1884120"
  },
  {
    "text": "um it's workable in bigoof login but login is like an approximation it's an absolute worst case is logarithmic in",
    "start": "1884120",
    "end": "1890539"
  },
  {
    "text": "the size in the total number of keys and values and it's written in Rust which",
    "start": "1890539",
    "end": "1896059"
  },
  {
    "text": "might make some of you feel that it's probably safe to use and so on but it actually it's actually it actually uses",
    "start": "1896059",
    "end": "1901279"
  },
  {
    "text": "a super tricky API because it's way too generic and it's actually super hard to use and anyone anyone wants to uh use",
    "start": "1901279",
    "end": "1909440"
  },
  {
    "text": "sanakedia often has to write a layer on top of it in order to just provide the",
    "start": "1909440",
    "end": "1915559"
  },
  {
    "text": "normal safety guarantees that we might want from a rust library and it uses a",
    "start": "1915559",
    "end": "1920779"
  },
  {
    "text": "generic underlying storage layer so I can store stuff in an M map file but I",
    "start": "1920779",
    "end": "1926299"
  },
  {
    "text": "can also do my read and write independently individually and manually or I can I can use a IOU ring like the",
    "start": "1926299",
    "end": "1933799"
  },
  {
    "text": "new fancy uh i o system in Linux or I can do well other thing I'll talk about",
    "start": "1933799",
    "end": "1938840"
  },
  {
    "text": "in the rest of this talk so now just a really brief",
    "start": "1938840",
    "end": "1946539"
  },
  {
    "start": "1941000",
    "end": "2086000"
  },
  {
    "text": "like a really brief description of how I like how like I I won't okay just a",
    "start": "1946539",
    "end": "1954080"
  },
  {
    "text": "re-brief description of how I how I manage crash safety using uh using this",
    "start": "1954080",
    "end": "1959720"
  },
  {
    "text": "system and using multiple beat trees and roots so B trees are these magical data",
    "start": "1959720",
    "end": "1967159"
  },
  {
    "text": "structure that always stay balanced without having to do anything special uh",
    "start": "1967159",
    "end": "1973520"
  },
  {
    "text": "the reason is that in a b tree insertions so they're a search tree with more than just one element in each in",
    "start": "1973520",
    "end": "1981320"
  },
  {
    "text": "each node so there can be usually there's like my nodes for example in Santa claria are limited to their to the",
    "start": "1981320",
    "end": "1987980"
  },
  {
    "text": "size of one memory page or one disk sector so four kilobytes",
    "start": "1987980",
    "end": "1994039"
  },
  {
    "text": "and I store as many keys and values as I can in these blocks so here for the sake of this example I've just limited my uh",
    "start": "1994039",
    "end": "2001539"
  },
  {
    "text": "block size to just two elements to to keep the to keep the picture simple so for example let's say I want",
    "start": "2001539",
    "end": "2007899"
  },
  {
    "text": "to insert a five uh so I first I I first start by uh deciding where I want to",
    "start": "2007899",
    "end": "2014140"
  },
  {
    "text": "insert it so routing from the top like I know I need to insert it between",
    "start": "2014140",
    "end": "2020260"
  },
  {
    "text": "between three and seven because five is between between three and seven uh so I go down to this children to this child",
    "start": "2020260",
    "end": "2026620"
  },
  {
    "text": "and now I know that I need to insert the five between the four and six so this node is already full because I told you",
    "start": "2026620",
    "end": "2033460"
  },
  {
    "text": "the limit is two elements so this causes a split in this node so now I get two uh",
    "start": "2033460",
    "end": "2039159"
  },
  {
    "text": "blocks two uh two leaves 4 and 6 and I",
    "start": "2039159",
    "end": "2044260"
  },
  {
    "text": "wasn't able to insert the 5 in any of them so this means that I have to insert",
    "start": "2044260",
    "end": "2049419"
  },
  {
    "text": "it uh in the parents so between the three and seven but then again that node is full it's it's already at maximum",
    "start": "2049419",
    "end": "2055839"
  },
  {
    "text": "capacity so I need to split it and now this is what I get and so this this is",
    "start": "2055839",
    "end": "2061599"
  },
  {
    "text": "magical and because it's super it's a super simple way of doing insertions that keep the tree balanced",
    "start": "2061599",
    "end": "2068500"
  },
  {
    "text": "because the only way the depth can increase is by splitting the roots and this gives you automatically the",
    "start": "2068500",
    "end": "2074919"
  },
  {
    "text": "guarantee that all paths will have the same length so I really love that idea",
    "start": "2074919",
    "end": "2080500"
  },
  {
    "text": "it's one of the oldest data structures uh but it's still really cool and it's very suitable for storing stuff on disk",
    "start": "2080500",
    "end": "2087220"
  },
  {
    "text": "uh so now just a bit about uh crash 15 how how we do how we use that uh to uh",
    "start": "2087220",
    "end": "2094300"
  },
  {
    "text": "to uh keep our data safe the way we do it is by having a number",
    "start": "2094300",
    "end": "2101260"
  },
  {
    "text": "of sectors at the beginning of the file pointing each to one copy of the entire",
    "start": "2101260",
    "end": "2106599"
  },
  {
    "text": "database so for example here in the first page I'm pointing to the old",
    "start": "2106599",
    "end": "2112300"
  },
  {
    "text": "version of my my B tree which is this version here and on the next one I'm building the new",
    "start": "2112300",
    "end": "2119020"
  },
  {
    "text": "version by modifying some stuff and and um the new version well I don't have to",
    "start": "2119020",
    "end": "2126040"
  },
  {
    "text": "to just to copy everything I can just I can just copy just the bits I edits",
    "start": "2126040",
    "end": "2132339"
  },
  {
    "text": "and the old uh it will share uh most of it's like everything that hasn't been",
    "start": "2132339",
    "end": "2137680"
  },
  {
    "text": "modified will be shared with the previous version so that's that's all we do and so what",
    "start": "2137680",
    "end": "2142900"
  },
  {
    "text": "happens when you unplug the machine at any time really uh well that part will not get written like the the the pages",
    "start": "2142900",
    "end": "2150400"
  },
  {
    "text": "at the beginning of the file would not get written and so nothing will happen the the allocations will get back to",
    "start": "2150400",
    "end": "2157720"
  },
  {
    "text": "what they were before you start the transaction and the the Comets of a transaction",
    "start": "2157720",
    "end": "2162940"
  },
  {
    "text": "actually happens when we're uh changing the first eight bytes of the file so uh",
    "start": "2162940",
    "end": "2167980"
  },
  {
    "text": "hard drives usually guarantee that you can write a full sector they have a little battery inside that keeps going",
    "start": "2167980",
    "end": "2175720"
  },
  {
    "text": "to write at least like one full sector would often they tell you well it's best efforts so there's no actual guarantee",
    "start": "2175720",
    "end": "2182140"
  },
  {
    "text": "that they do that so they guarantee it but with no actual guarantee I don't really know what that means but what I",
    "start": "2182140",
    "end": "2187240"
  },
  {
    "text": "know is that um writing eight bytes should be okay so",
    "start": "2187240",
    "end": "2192400"
  },
  {
    "text": "if they try to do best effort for uh four thousand and Ninety Six bytes then probably there's eight bytes they they",
    "start": "2192400",
    "end": "2198760"
  },
  {
    "text": "can they can certainly do it with high probability another feature of this system is that Riders don't block",
    "start": "2198760",
    "end": "2204579"
  },
  {
    "text": "readers because the old versions are still available so if you start a transaction while a read-only",
    "start": "2204579",
    "end": "2210099"
  },
  {
    "text": "transaction while you're writing uh writing writing something you can still",
    "start": "2210099",
    "end": "2215140"
  },
  {
    "text": "read the old version and so that's that's really cool as well it's not super useful in Imperial well unless you",
    "start": "2215140",
    "end": "2221380"
  },
  {
    "text": "start running people in the cloud as I'll share in a minute and while this sounds like something",
    "start": "2221380",
    "end": "2227380"
  },
  {
    "start": "2224000",
    "end": "2400000"
  },
  {
    "text": "super uh fancy and with lots of like redundancy crash safety copy and write",
    "start": "2227380",
    "end": "2233500"
  },
  {
    "text": "and should be super expensive but actually it's the fastest key Value Store I've tested",
    "start": "2233500",
    "end": "2239020"
  },
  {
    "text": "so this these are two curves um showing how long it takes to retrieve",
    "start": "2239020",
    "end": "2244900"
  },
  {
    "text": "things so get and insert things into my B trees this is not specific to people",
    "start": "2244900",
    "end": "2250060"
  },
  {
    "text": "it's not particularly optimized for people the only thing that's related to people is that I not implementing long",
    "start": "2250060",
    "end": "2255880"
  },
  {
    "text": "values yet just because I have I've never needed to do that but so here I'm comparing four systems so four different",
    "start": "2255880",
    "end": "2262240"
  },
  {
    "text": "implementations of key values um the the most like the slowest one is",
    "start": "2262240",
    "end": "2268480"
  },
  {
    "text": "a rust driver equals sled so sled is super slow but it's it's also really",
    "start": "2268480",
    "end": "2273880"
  },
  {
    "text": "really cool it's using state-of-the-art technology to um to to do Lock Free",
    "start": "2273880",
    "end": "2279300"
  },
  {
    "text": "transactions on the database so you can have a giant computer with thousands of uh of course or maybe hundreds of course",
    "start": "2279300",
    "end": "2286240"
  },
  {
    "text": "more realistically and your transactions won't block each other and there will still be uh have acid guarantees so this",
    "start": "2286240",
    "end": "2293440"
  },
  {
    "text": "is super cool but unfortunately it's still a research prototype and so for the kind of stuff I'm doing in a single core uh it's not super relevant so the",
    "start": "2293440",
    "end": "2301540"
  },
  {
    "text": "green line is the fastest uh C library um lmdb it's battle tested and all that",
    "start": "2301540",
    "end": "2308619"
  },
  {
    "text": "and uh it's claimed to be the like the fastest possible um in many places",
    "start": "2308619",
    "end": "2313859"
  },
  {
    "text": "and now this is uh Santa claria the system I've just introduced and this is",
    "start": "2313859",
    "end": "2319599"
  },
  {
    "text": "like the orange line is a benchmark of something that cannot be achieved so",
    "start": "2319599",
    "end": "2325119"
  },
  {
    "text": "this is the standard Library the implementation of B trees in the standard library of rust and so it",
    "start": "2325119",
    "end": "2330760"
  },
  {
    "text": "doesn't store anything on disk so if you're storing stuff on disk I will obviously obviously take more time so",
    "start": "2330760",
    "end": "2336280"
  },
  {
    "text": "this is just like the reason I've I've added it I added it there is to just uh",
    "start": "2336280",
    "end": "2342040"
  },
  {
    "text": "see how close we are to uh doing that so we are not paying a lot you know to stores well this is an SSD drive",
    "start": "2342040",
    "end": "2347440"
  },
  {
    "text": "obviously but we're not paying a lot because we're not we're minimizing the number of times we're writing and reading uh to the disk so so that's it",
    "start": "2347440",
    "end": "2354940"
  },
  {
    "text": "while the puts thing has a similar uh performance removing sleds we can see it more",
    "start": "2354940",
    "end": "2361960"
  },
  {
    "text": "clearly so this is about twice as fast as the fastest uh C equivalence",
    "start": "2361960",
    "end": "2367420"
  },
  {
    "text": "okay so and this was actually no unexpected like performance was never the goal uh",
    "start": "2367420",
    "end": "2373060"
  },
  {
    "text": "the goal was to just to be able to Fork um and initially I contacted the author of lmdb to get him to introduce a fork",
    "start": "2373060",
    "end": "2380680"
  },
  {
    "text": "primitive but uh it wasn't it was apparently Impossible on the design so I had to write my own",
    "start": "2380680",
    "end": "2386980"
  },
  {
    "text": "um all right so now some announcements so a hosting platform so we we all like",
    "start": "2386980",
    "end": "2393640"
  },
  {
    "text": "working together but we don't like setting up servers so how do we uh collaborate and share repositories uh",
    "start": "2393640",
    "end": "2399820"
  },
  {
    "text": "one one way to do it in bihull and that's been the case since the beginning is to use",
    "start": "2399820",
    "end": "2405579"
  },
  {
    "start": "2400000",
    "end": "2688000"
  },
  {
    "text": "um self-hosted repositories using SSH but uh it's not often convenient you",
    "start": "2405579",
    "end": "2411099"
  },
  {
    "text": "have to set up a machine in order to work together so I've wanted to build a hosting platform and I actually built it",
    "start": "2411099",
    "end": "2418240"
  },
  {
    "text": "the first version was released quite a while ago in 2016. it's using uh it's",
    "start": "2418240",
    "end": "2424240"
  },
  {
    "text": "written entirely in Rust just like bihull and uh and postgresql to deal",
    "start": "2424240",
    "end": "2430480"
  },
  {
    "text": "with all the user accounts and uh discussions and text and so on uh there was running for a while and",
    "start": "2430480",
    "end": "2437380"
  },
  {
    "text": "seeing on a single machine it went through all the iterations of the rust uh asynchronous ecosystem so that's a",
    "start": "2437380",
    "end": "2444820"
  },
  {
    "text": "lot of refactoring and rewrite and so on and it's never been really stable really uh but the worst time for stability was",
    "start": "2444820",
    "end": "2453040"
  },
  {
    "text": "definitely ovh to Strasbourg data center fire in March March 2021 where my",
    "start": "2453040",
    "end": "2459280"
  },
  {
    "text": "machines so I've seen a slide yesterday in one of the talks where someone talked about your server being on fire but I",
    "start": "2459280",
    "end": "2465640"
  },
  {
    "text": "don't think they really mean it like here I do really mean it uh like there is an actual fire in the actual data",
    "start": "2465640",
    "end": "2471820"
  },
  {
    "text": "center and so the machines were down for uh two weeks and because it was an experimental prototype uh he had no uh",
    "start": "2471820",
    "end": "2478599"
  },
  {
    "text": "real backups replications or anything of the kind in place so during these two weeks I took advantage of that little",
    "start": "2478599",
    "end": "2484660"
  },
  {
    "text": "break in my work to uh to rebuild something to rebuild a",
    "start": "2484660",
    "end": "2490000"
  },
  {
    "text": "replicated setup using well the fact that people is a crdt itself so it's easy to replicate and then I've used",
    "start": "2490000",
    "end": "2496420"
  },
  {
    "text": "raft the raft protocol to replicate postgres and at the time it was also",
    "start": "2496420",
    "end": "2501940"
  },
  {
    "text": "convenience because my two largest contributors like the two largest contributors to people who were using",
    "start": "2501940",
    "end": "2507220"
  },
  {
    "text": "the South and cross cable if you guys know what that means so they were they were communicating with the server in",
    "start": "2507220",
    "end": "2513520"
  },
  {
    "text": "strasbour by first going from New Zealand and Australia to uh San Francisco and then across the us across",
    "start": "2513520",
    "end": "2520359"
  },
  {
    "text": "the Atlantic Ocean uh to uh uh start in across France to to Salisbury so they",
    "start": "2520359",
    "end": "2526300"
  },
  {
    "text": "had absolutely unbearable latencies and so I was able to give them so this",
    "start": "2526300",
    "end": "2532900"
  },
  {
    "text": "was cool and convenient because it was I was finally able to give them a proper server with short uh short latencies",
    "start": "2532900",
    "end": "2539680"
  },
  {
    "text": "short response times but it's been working okay for two years now a little",
    "start": "2539680",
    "end": "2545260"
  },
  {
    "text": "bit over two years but the problem is that this is a at the moment it's a personal project it's totally",
    "start": "2545260",
    "end": "2550540"
  },
  {
    "text": "yarn-funded so the machines are really small and I'm using postgres in like ways that aren't really intended because",
    "start": "2550540",
    "end": "2557380"
  },
  {
    "text": "my like the core of my database is actually Santa Clara and pihul it's not it's not installed in in Plus in uh",
    "start": "2557380",
    "end": "2564099"
  },
  {
    "text": "postgres so I need to communicate between these two databases and so I need the databases to be located close",
    "start": "2564099",
    "end": "2570099"
  },
  {
    "text": "to um they're not like the replica are not just backups they're they're backups and caches at the same time so the",
    "start": "2570099",
    "end": "2577240"
  },
  {
    "text": "consequence of that is that when the machines are under a high at like too high a load it causes a failure of",
    "start": "2577240",
    "end": "2582760"
  },
  {
    "text": "postgres so postgres takes a little more time to answer and and so the raft uh thing understands",
    "start": "2582760",
    "end": "2590140"
  },
  {
    "text": "that as a total failure and triggers a switchover of the main uh like the",
    "start": "2590140",
    "end": "2595780"
  },
  {
    "text": "leader of the cluster and that would be okay uh just having some down time right",
    "start": "2595780",
    "end": "2601660"
  },
  {
    "text": "but actually the consequence of that is way worse than downtime is data loss so having small smaller machines is fine I",
    "start": "2601660",
    "end": "2609280"
  },
  {
    "text": "don't mind uh if some of my users are using my experimental system and it just crashes sometimes or is down for a",
    "start": "2609280",
    "end": "2615940"
  },
  {
    "text": "little while that it doesn't really matter but when they're starting to lose data that's that's a problem so I've",
    "start": "2615940",
    "end": "2621760"
  },
  {
    "text": "decided to uh rewrite it uh and because I were working on with cloudflare workers and function as a service and in",
    "start": "2621760",
    "end": "2627760"
  },
  {
    "text": "other projects and my renewable energy projects I started thinking about how we could use people uh to do that so the",
    "start": "2627760",
    "end": "2634480"
  },
  {
    "text": "like really quickly function as a service is uh different from traditional architecture where you have a big",
    "start": "2634480",
    "end": "2640839"
  },
  {
    "text": "process overhead or a virtual machine overhead for each uh for for like each",
    "start": "2640839",
    "end": "2646780"
  },
  {
    "text": "little piece of server you're running instead of doing that you're just sharing the machine and sharing just a",
    "start": "2646780",
    "end": "2652780"
  },
  {
    "text": "single giant JavaScript runtime with lots of different uh processes or",
    "start": "2652780",
    "end": "2658240"
  },
  {
    "text": "functions and even but even from other users so cloudflare uses on like each machine uh this giant runtime shared by",
    "start": "2658240",
    "end": "2665800"
  },
  {
    "text": "all its customers so that's really cool because uh you can answer from all of like cloudflare's 250",
    "start": "2665800",
    "end": "2672400"
  },
  {
    "text": "data centers and it gives you optimal latency it's also very easy to write",
    "start": "2672400",
    "end": "2678339"
  },
  {
    "text": "so that's uh the the minimal example taken from their documentation where you're just answering a hello worker",
    "start": "2678339",
    "end": "2684579"
  },
  {
    "text": "from like you're responding now to a request and now the question becomes like can we",
    "start": "2684579",
    "end": "2691060"
  },
  {
    "text": "run or at least simulate people repository in a pure functional service framework like the storage options are",
    "start": "2691060",
    "end": "2696400"
  },
  {
    "text": "fairly Limited in function as a service you don't have access to to a hard drive you don't even have an actual machine so",
    "start": "2696400",
    "end": "2702579"
  },
  {
    "text": "how do you do that or at least how do you pretend to be a full-fledged behold repository where in fact you're just a",
    "start": "2702579",
    "end": "2708099"
  },
  {
    "text": "like some key Value Store some replicated eventually consistent key value store in",
    "start": "2708099",
    "end": "2713920"
  },
  {
    "text": "the cloud so that's the main challenge it's completely unlike everything I had been like completely at odds with my",
    "start": "2713920",
    "end": "2720339"
  },
  {
    "text": "hypothesis when I first wrote Santa Clara and NP hole has not no hard drive at all",
    "start": "2720339",
    "end": "2725800"
  },
  {
    "text": "so the solution is to compile Santa claria to wasm because you can run one of them on on cloudflare workers",
    "start": "2725800",
    "end": "2733300"
  },
  {
    "text": "um and you are storing sudo memory pages and storage engine so instead of instead of using uh these sectors I'm using key",
    "start": "2733300",
    "end": "2740319"
  },
  {
    "text": "keys and values in the in their storage engine the main the main problem now becomes uh the",
    "start": "2740319",
    "end": "2747579"
  },
  {
    "text": "eventually the eventual consistency I'm solving that problem by using the multiple heads I talked about earlier",
    "start": "2747579",
    "end": "2753700"
  },
  {
    "text": "like the multiple routes so I keep the older Roots because I know that maybe like the changes I'm making to uh to my",
    "start": "2753700",
    "end": "2761380"
  },
  {
    "text": "key value store I haven't propagated to all of data centers so I keep the old routes while they haven't propagated so",
    "start": "2761380",
    "end": "2767980"
  },
  {
    "text": "cloudflare guarantees for example a one minute propagation time so that's what I use to keep to keep my older older",
    "start": "2767980",
    "end": "2774640"
  },
  {
    "text": "branches in order to avoid like stepping on each other's Foods",
    "start": "2774640",
    "end": "2779800"
  },
  {
    "text": "so and we don't need a full period like checking dependencies and maintaining maintaining a list of fetches is enough",
    "start": "2779800",
    "end": "2787000"
  },
  {
    "start": "2786000",
    "end": "3010000"
  },
  {
    "text": "okay so some technical details to as like almost my conclusion um so this",
    "start": "2787000",
    "end": "2792940"
  },
  {
    "text": "this service is using typescript for web Parts um as well for the UI and then Rustin",
    "start": "2792940",
    "end": "2799060"
  },
  {
    "text": "wasm for the people parrots um it can be self-hosted although I've never tested that yes uh using cloudflare's workers",
    "start": "2799060",
    "end": "2805960"
  },
  {
    "text": "so they've released their runtime uh in like as an open source projects it's open source uh agpl license and it will",
    "start": "2805960",
    "end": "2814180"
  },
  {
    "text": "be released progressively because there's a lot a lot of stuff to release that's currently just experimental in prototypal and it's starting today so",
    "start": "2814180",
    "end": "2821260"
  },
  {
    "text": "I've just opened it just before the beginning of this talk uh so now you guys can connect to a nest.phool.org and",
    "start": "2821260",
    "end": "2827020"
  },
  {
    "text": "start black creating an accounts and like there's no documentation uh things may crash there's probably lots of bugs",
    "start": "2827020",
    "end": "2833619"
  },
  {
    "text": "but this will come in the next few days or weeks uh okay so as a conclusion uh this is a",
    "start": "2833619",
    "end": "2841300"
  },
  {
    "text": "new open source version control system based in proper algorithms rather than collections of hacks like uh we we've",
    "start": "2841300",
    "end": "2847180"
  },
  {
    "text": "had uh for some time uh it's scalable to Mono repos and large files it's potentially usable by non-coders the",
    "start": "2847180",
    "end": "2854920"
  },
  {
    "text": "like the craziest like the the farthest stretch I I've seen uh in discussions in",
    "start": "2854920",
    "end": "2861339"
  },
  {
    "text": "that project is using it uh as uh as a tool to help parliaments do their jobs so parliaments are giants Version",
    "start": "2861339",
    "end": "2868720"
  },
  {
    "text": "Control Systems operated manually by uh highly qualified and highly paid lawyers",
    "start": "2868720",
    "end": "2874240"
  },
  {
    "text": "who are paid to like check the consistency of The Logical consistency",
    "start": "2874240",
    "end": "2879280"
  },
  {
    "text": "of the of the law but actually spend a significant share of their time actually editing Word documents to apply changes",
    "start": "2879280",
    "end": "2885819"
  },
  {
    "text": "that have been voted voted by a member of parliaments so they're doing manual Version Control and they're wasting lots",
    "start": "2885819",
    "end": "2891339"
  },
  {
    "text": "of time on that and I've collaborated with the French parliaments uh which would have been a good test case because",
    "start": "2891339",
    "end": "2896560"
  },
  {
    "text": "we're not actually using our Parliament at the time like the cabinet passes their bills as they wish",
    "start": "2896560",
    "end": "2901740"
  },
  {
    "text": "so it's like the test mode of uh of an API",
    "start": "2901740",
    "end": "2907000"
  },
  {
    "text": "uh it can be usable by artists by uh I've talked to lawyers as well",
    "start": "2907000",
    "end": "2913180"
  },
  {
    "text": "um by maybe Sonic pie composers we had a really cool discussions last night about that and maybe why not buy uh Lego",
    "start": "2913180",
    "end": "2920740"
  },
  {
    "text": "builders wanting to build larger projects the hosting service is available since",
    "start": "2920740",
    "end": "2926500"
  },
  {
    "text": "today I've said that and another conclusion uh is is a",
    "start": "2926500",
    "end": "2932680"
  },
  {
    "text": "personal conclusion of mine so I have a tendency to do work and way too many things at the same time but uh and and",
    "start": "2932680",
    "end": "2938800"
  },
  {
    "text": "it never works well until it does like for example here working on uh electricity sharing at the same time as",
    "start": "2938800",
    "end": "2945880"
  },
  {
    "text": "um as a Version Control help me see how these would fit together and share ideas",
    "start": "2945880",
    "end": "2951520"
  },
  {
    "text": "across across projects so to conclude I would like to acknowledge uh some some",
    "start": "2951520",
    "end": "2957160"
  },
  {
    "text": "of my co-authors and contributors of Florence Baker for all the uh discussions Inspirations and early",
    "start": "2957160",
    "end": "2962680"
  },
  {
    "text": "contributions so tank feeder so that's the most patient tester I've ever seen",
    "start": "2962680",
    "end": "2969220"
  },
  {
    "text": "um he's still there after many years uh passion patiently checking all my bags so a huge thanks to him Rohan Hart and",
    "start": "2969220",
    "end": "2977020"
  },
  {
    "text": "uh Chris Bailey uh though Hart and Angus Finch are actually the two folks using",
    "start": "2977020",
    "end": "2983500"
  },
  {
    "text": "the Southern Cross cable and they've contributed like really cool stuff to people who increase uh Bailey who have",
    "start": "2983500",
    "end": "2989920"
  },
  {
    "text": "bridged the gap between lawyers and legal people and and uh what what I'm doing all right so thanks for your",
    "start": "2989920",
    "end": "2997000"
  },
  {
    "text": "attention",
    "start": "2997000",
    "end": "2999300"
  }
]