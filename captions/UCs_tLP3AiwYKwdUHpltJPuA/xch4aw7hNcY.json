[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "[Music]",
    "start": "970",
    "end": "7838"
  },
  {
    "text": "hi my name is Ryan Pierce today I'll be",
    "start": "13240",
    "end": "15980"
  },
  {
    "text": "presenting Kotlin flows and channels for",
    "start": "15980",
    "end": "18230"
  },
  {
    "text": "Android flows and channels were features",
    "start": "18230",
    "end": "20539"
  },
  {
    "text": "within the Kotlin co-routines library",
    "start": "20539",
    "end": "22460"
  },
  {
    "text": "i'll be discussing them as well as how",
    "start": "22460",
    "end": "24710"
  },
  {
    "text": "you can apply them to your android",
    "start": "24710",
    "end": "26120"
  },
  {
    "text": "development again my name is Ryan Pierce",
    "start": "26120",
    "end": "29090"
  },
  {
    "text": "I'm a mobile app developer I'm currently",
    "start": "29090",
    "end": "31550"
  },
  {
    "text": "an Android developer at Capital One and",
    "start": "31550",
    "end": "33469"
  },
  {
    "text": "a fun fact is that I'm also an aerospace",
    "start": "33469",
    "end": "35390"
  },
  {
    "text": "engineer so instead of starting off by",
    "start": "35390",
    "end": "38870"
  },
  {
    "start": "37000",
    "end": "143000"
  },
  {
    "text": "explaining what flows and channels are I",
    "start": "38870",
    "end": "40640"
  },
  {
    "text": "think it might be more meaningful to go",
    "start": "40640",
    "end": "42890"
  },
  {
    "text": "into what challenges we face in Android",
    "start": "42890",
    "end": "44749"
  },
  {
    "text": "development and how flows and channels",
    "start": "44749",
    "end": "46609"
  },
  {
    "text": "can help us approach these challenges",
    "start": "46609",
    "end": "48820"
  },
  {
    "text": "one of the biggest aspects of Android",
    "start": "48820",
    "end": "51260"
  },
  {
    "text": "development",
    "start": "51260",
    "end": "51739"
  },
  {
    "text": "is dealing with asynchrony whether it be",
    "start": "51739",
    "end": "53659"
  },
  {
    "text": "network calls or database reads dealing",
    "start": "53659",
    "end": "56329"
  },
  {
    "text": "with asynchrony we encounter many issues",
    "start": "56329",
    "end": "58510"
  },
  {
    "text": "one of them is race conditions probably",
    "start": "58510",
    "end": "61670"
  },
  {
    "text": "one of the most common issues back",
    "start": "61670",
    "end": "63620"
  },
  {
    "text": "pressure if we're dealing with a",
    "start": "63620",
    "end": "65180"
  },
  {
    "text": "streaming application leaked resources",
    "start": "65180",
    "end": "67670"
  },
  {
    "text": "and if we're using threads we may find",
    "start": "67670",
    "end": "70070"
  },
  {
    "text": "that they're very expensive they can",
    "start": "70070",
    "end": "71600"
  },
  {
    "text": "starve each other",
    "start": "71600",
    "end": "72469"
  },
  {
    "text": "deadlocks can occur between them and",
    "start": "72469",
    "end": "74479"
  },
  {
    "text": "several other challenges that come with",
    "start": "74479",
    "end": "76310"
  },
  {
    "text": "asynchrony now one of the underlying",
    "start": "76310",
    "end": "79130"
  },
  {
    "text": "issue is that can cause these problems",
    "start": "79130",
    "end": "80990"
  },
  {
    "text": "as this thing called shared mutable",
    "start": "80990",
    "end": "82460"
  },
  {
    "text": "state and I'll describe it in the words",
    "start": "82460",
    "end": "84649"
  },
  {
    "text": "of a famous computer scientist named",
    "start": "84649",
    "end": "86810"
  },
  {
    "text": "Tony Hoare Tony Hoare actually came up",
    "start": "86810",
    "end": "89450"
  },
  {
    "text": "with one of the more popular",
    "start": "89450",
    "end": "90409"
  },
  {
    "text": "implementations of quicksort but in his",
    "start": "90409",
    "end": "93530"
  },
  {
    "text": "paper communicating sequential processes",
    "start": "93530",
    "end": "95509"
  },
  {
    "text": "from 1978 he stated a widely adopted",
    "start": "95509",
    "end": "100130"
  },
  {
    "text": "method of communication is by inspection",
    "start": "100130",
    "end": "102649"
  },
  {
    "text": "and updating of a common store so this",
    "start": "102649",
    "end": "105259"
  },
  {
    "text": "common store might be a list in memory",
    "start": "105259",
    "end": "107270"
  },
  {
    "text": "or a file on disk however this can",
    "start": "107270",
    "end": "110750"
  },
  {
    "text": "create severe problems in the",
    "start": "110750",
    "end": "112369"
  },
  {
    "text": "construction of correct programs and it",
    "start": "112369",
    "end": "114710"
  },
  {
    "text": "may lead to expense and unreliability",
    "start": "114710",
    "end": "116570"
  },
  {
    "text": "like glitches so what he's describing is",
    "start": "116570",
    "end": "120229"
  },
  {
    "text": "basically the issues that we discussed",
    "start": "120229",
    "end": "122240"
  },
  {
    "text": "in the last slide but to solve this",
    "start": "122240",
    "end": "124850"
  },
  {
    "text": "while his paper goes into the solution",
    "start": "124850",
    "end": "127210"
  },
  {
    "text": "the engineers behind the goal language",
    "start": "127210",
    "end": "130220"
  },
  {
    "text": "created a proverb to describe the",
    "start": "130220",
    "end": "132440"
  },
  {
    "text": "solution do not communicate by sharing",
    "start": "132440",
    "end": "135530"
  },
  {
    "text": "memory instead share memory by",
    "start": "135530",
    "end": "138319"
  },
  {
    "text": "communicating so the",
    "start": "138319",
    "end": "140490"
  },
  {
    "text": "this was implemented in Kotlin was",
    "start": "140490",
    "end": "142290"
  },
  {
    "text": "through the cortines library with",
    "start": "142290",
    "end": "144510"
  },
  {
    "start": "143000",
    "end": "310000"
  },
  {
    "text": "curtains and channels now co-routines",
    "start": "144510",
    "end": "146970"
  },
  {
    "text": "are the backbone behind how you use",
    "start": "146970",
    "end": "149640"
  },
  {
    "text": "channels and how flows are built so it's",
    "start": "149640",
    "end": "151950"
  },
  {
    "text": "really important that we understand the",
    "start": "151950",
    "end": "153870"
  },
  {
    "text": "fundamentals of how they work I'm sure",
    "start": "153870",
    "end": "155790"
  },
  {
    "text": "many of you have probably used them and",
    "start": "155790",
    "end": "157620"
  },
  {
    "text": "understand them pretty deeply but I want",
    "start": "157620",
    "end": "160050"
  },
  {
    "text": "to go into why co-routines are so",
    "start": "160050",
    "end": "162030"
  },
  {
    "text": "incredibly powerful normally people will",
    "start": "162030",
    "end": "165540"
  },
  {
    "text": "describe co-routines as a prettier",
    "start": "165540",
    "end": "167640"
  },
  {
    "text": "callback so a typical callback might be",
    "start": "167640",
    "end": "171060"
  },
  {
    "text": "a function where we pass a functional",
    "start": "171060",
    "end": "173550"
  },
  {
    "text": "type like on completion so that when we",
    "start": "173550",
    "end": "176070"
  },
  {
    "text": "asynchronously retrieve values since we",
    "start": "176070",
    "end": "178590"
  },
  {
    "text": "can't return a value we can at least do",
    "start": "178590",
    "end": "181020"
  },
  {
    "text": "something with it",
    "start": "181020",
    "end": "181800"
  },
  {
    "text": "specifically pass it to the functional",
    "start": "181800",
    "end": "183780"
  },
  {
    "text": "type like on completion so that it can",
    "start": "183780",
    "end": "186030"
  },
  {
    "text": "go and do something when we call in the",
    "start": "186030",
    "end": "188100"
  },
  {
    "text": "UI we have to pass a trailing lambda",
    "start": "188100",
    "end": "190860"
  },
  {
    "text": "with that on completion implementation",
    "start": "190860",
    "end": "193380"
  },
  {
    "text": "in this case print so we can do",
    "start": "193380",
    "end": "195420"
  },
  {
    "text": "something with that result but with",
    "start": "195420",
    "end": "198300"
  },
  {
    "text": "co-routines we use suspending functions",
    "start": "198300",
    "end": "200430"
  },
  {
    "text": "and because of how they're implemented",
    "start": "200430",
    "end": "203250"
  },
  {
    "text": "suspending functions can return their",
    "start": "203250",
    "end": "205980"
  },
  {
    "text": "return types despite the fact that they",
    "start": "205980",
    "end": "208530"
  },
  {
    "text": "can perform asynchronous operations and",
    "start": "208530",
    "end": "210570"
  },
  {
    "text": "that's one of their real superpowers so",
    "start": "210570",
    "end": "213000"
  },
  {
    "text": "we can to use them launch a KO routine",
    "start": "213000",
    "end": "216060"
  },
  {
    "text": "call get value which is a suspending",
    "start": "216060",
    "end": "218820"
  },
  {
    "text": "function get a result and do something",
    "start": "218820",
    "end": "221490"
  },
  {
    "text": "with that result we can even pass that",
    "start": "221490",
    "end": "224820"
  },
  {
    "text": "result to another suspending function so",
    "start": "224820",
    "end": "227070"
  },
  {
    "text": "we can use it and print the second",
    "start": "227070",
    "end": "228690"
  },
  {
    "text": "result instead so we create these very",
    "start": "228690",
    "end": "231270"
  },
  {
    "text": "sequential asynchronous processes that",
    "start": "231270",
    "end": "234150"
  },
  {
    "text": "look very nice and that's where you get",
    "start": "234150",
    "end": "235440"
  },
  {
    "text": "the prettier callback however if I were",
    "start": "235440",
    "end": "238530"
  },
  {
    "text": "to just say that call routines were",
    "start": "238530",
    "end": "240150"
  },
  {
    "text": "prettier callbacks I'd be doing them a",
    "start": "240150",
    "end": "241830"
  },
  {
    "text": "massive injustice co-routines actually",
    "start": "241830",
    "end": "244320"
  },
  {
    "text": "have this superpower and it's called",
    "start": "244320",
    "end": "246060"
  },
  {
    "text": "suspension basically the Cortines can",
    "start": "246060",
    "end": "249210"
  },
  {
    "text": "suspend now when I first heard this I",
    "start": "249210",
    "end": "250950"
  },
  {
    "text": "didn't really understand what it means",
    "start": "250950",
    "end": "252440"
  },
  {
    "text": "another way to think about this is that",
    "start": "252440",
    "end": "254790"
  },
  {
    "text": "call routines can pause like hitting the",
    "start": "254790",
    "end": "257670"
  },
  {
    "text": "pause button when co-routines are being",
    "start": "257670",
    "end": "259859"
  },
  {
    "text": "run by a thread they have the ability to",
    "start": "259859",
    "end": "262410"
  },
  {
    "text": "stop and resume later so that the thread",
    "start": "262410",
    "end": "264840"
  },
  {
    "text": "can operate on some other asynchronous",
    "start": "264840",
    "end": "266760"
  },
  {
    "text": "process specifically another car routine",
    "start": "266760",
    "end": "269010"
  },
  {
    "text": "and it does so by choosing to suspend a",
    "start": "269010",
    "end": "271890"
  },
  {
    "text": "various suspension points",
    "start": "271890",
    "end": "273669"
  },
  {
    "text": "within a core team so the way that this",
    "start": "273669",
    "end": "276129"
  },
  {
    "text": "looks is we might have two core teens",
    "start": "276129",
    "end": "279340"
  },
  {
    "text": "running concurrently but what will",
    "start": "279340",
    "end": "282580"
  },
  {
    "text": "happen is we might be able to see one",
    "start": "282580",
    "end": "285699"
  },
  {
    "text": "coroutine suspend allowing another",
    "start": "285699",
    "end": "287919"
  },
  {
    "text": "co-routine to resume and that way the",
    "start": "287919",
    "end": "289870"
  },
  {
    "text": "thread can switch between the two",
    "start": "289870",
    "end": "291069"
  },
  {
    "text": "allowing the suspending functions of",
    "start": "291069",
    "end": "293199"
  },
  {
    "text": "each cohort teen to sort of interweave",
    "start": "293199",
    "end": "295439"
  },
  {
    "text": "now what if we want to use state in",
    "start": "295439",
    "end": "297669"
  },
  {
    "text": "between cover teens we want co-routines",
    "start": "297669",
    "end": "299919"
  },
  {
    "text": "to operate on some sort of changing",
    "start": "299919",
    "end": "301810"
  },
  {
    "text": "state again we want to avoid shared",
    "start": "301810",
    "end": "304330"
  },
  {
    "text": "mutable state and one of the ways we can",
    "start": "304330",
    "end": "306189"
  },
  {
    "text": "do that is to communicate between core",
    "start": "306189",
    "end": "308050"
  },
  {
    "text": "teens using these things called channels",
    "start": "308050",
    "end": "310409"
  },
  {
    "start": "310000",
    "end": "533000"
  },
  {
    "text": "channels are like a pipe you can send",
    "start": "310409",
    "end": "313270"
  },
  {
    "text": "information in to them and receive",
    "start": "313270",
    "end": "315310"
  },
  {
    "text": "information from them they're like",
    "start": "315310",
    "end": "317590"
  },
  {
    "text": "synchronization primitives taking",
    "start": "317590",
    "end": "319629"
  },
  {
    "text": "information in and spitting them out",
    "start": "319629",
    "end": "322139"
  },
  {
    "text": "specifically channels are like",
    "start": "322139",
    "end": "323919"
  },
  {
    "text": "non-blocking cues they have suspending",
    "start": "323919",
    "end": "326949"
  },
  {
    "text": "functions to send information into the",
    "start": "326949",
    "end": "329259"
  },
  {
    "text": "channel and suspending functions to",
    "start": "329259",
    "end": "331360"
  },
  {
    "text": "receive information from the channel so",
    "start": "331360",
    "end": "334270"
  },
  {
    "text": "let's look at a very basic example of",
    "start": "334270",
    "end": "336099"
  },
  {
    "text": "how channels work first let's create a",
    "start": "336099",
    "end": "338949"
  },
  {
    "text": "channel of integers or pretended by a",
    "start": "338949",
    "end": "341379"
  },
  {
    "text": "green pipe on the right then we'll",
    "start": "341379",
    "end": "344560"
  },
  {
    "text": "launch a curtain curve to number one and",
    "start": "344560",
    "end": "346479"
  },
  {
    "text": "this car team will receive values from",
    "start": "346479",
    "end": "349330"
  },
  {
    "text": "the channel and it will do so using a",
    "start": "349330",
    "end": "351639"
  },
  {
    "text": "for loop then we'll create curtain",
    "start": "351639",
    "end": "354969"
  },
  {
    "text": "number two and this co-routine is",
    "start": "354969",
    "end": "356469"
  },
  {
    "text": "identical to cover two number one it",
    "start": "356469",
    "end": "358750"
  },
  {
    "text": "will receive values from the channel",
    "start": "358750",
    "end": "360610"
  },
  {
    "text": "using a for loop",
    "start": "360610",
    "end": "362250"
  },
  {
    "text": "lastly we'll launch a third and final",
    "start": "362250",
    "end": "364899"
  },
  {
    "text": "cover team and this car routine is",
    "start": "364899",
    "end": "366759"
  },
  {
    "text": "responsible for producing values that",
    "start": "366759",
    "end": "369279"
  },
  {
    "text": "will be sent into the channel",
    "start": "369279",
    "end": "371189"
  },
  {
    "text": "specifically we'll take a list of one",
    "start": "371189",
    "end": "373599"
  },
  {
    "text": "two three and four and for each value we",
    "start": "373599",
    "end": "377469"
  },
  {
    "text": "will send it into the channel so this is",
    "start": "377469",
    "end": "381189"
  },
  {
    "text": "how it's going to work as the producing",
    "start": "381189",
    "end": "383740"
  },
  {
    "text": "color team sends the first value into",
    "start": "383740",
    "end": "386500"
  },
  {
    "text": "the channel specifically value number",
    "start": "386500",
    "end": "388930"
  },
  {
    "text": "one as coroutine number one and two are",
    "start": "388930",
    "end": "393099"
  },
  {
    "text": "available one of them will receive that",
    "start": "393099",
    "end": "395919"
  },
  {
    "text": "first value in this case it'll be color",
    "start": "395919",
    "end": "398469"
  },
  {
    "text": "to number one using the for loop",
    "start": "398469",
    "end": "401099"
  },
  {
    "text": "iterating over the channel",
    "start": "401099",
    "end": "404110"
  },
  {
    "text": "if another co-routine is available like",
    "start": "404110",
    "end": "406240"
  },
  {
    "text": "co-routine number two it will also",
    "start": "406240",
    "end": "408189"
  },
  {
    "text": "receive the next value specifically",
    "start": "408189",
    "end": "410620"
  },
  {
    "text": "value number two as co-routine one and",
    "start": "410620",
    "end": "414159"
  },
  {
    "text": "two are processing their first values",
    "start": "414159",
    "end": "418319"
  },
  {
    "text": "the way that this reacts is coyote",
    "start": "418319",
    "end": "421599"
  },
  {
    "text": "number three will suspend",
    "start": "421599",
    "end": "423840"
  },
  {
    "text": "once co-routines number one or two are",
    "start": "423840",
    "end": "426759"
  },
  {
    "text": "available co-routine three the producing",
    "start": "426759",
    "end": "429189"
  },
  {
    "text": "core team can continue to send values",
    "start": "429189",
    "end": "431860"
  },
  {
    "text": "into the channel until it has finished",
    "start": "431860",
    "end": "433810"
  },
  {
    "text": "iterating over the list once it has",
    "start": "433810",
    "end": "436599"
  },
  {
    "text": "finished iterating it can close the",
    "start": "436599",
    "end": "438699"
  },
  {
    "text": "channel another way that we can write",
    "start": "438699",
    "end": "441460"
  },
  {
    "text": "this is using the produce builder except",
    "start": "441460",
    "end": "443919"
  },
  {
    "text": "that we don't have to reference the",
    "start": "443919",
    "end": "445330"
  },
  {
    "text": "channel inside the builder and we don't",
    "start": "445330",
    "end": "448120"
  },
  {
    "text": "have to explicitly close the channel but",
    "start": "448120",
    "end": "450969"
  },
  {
    "text": "the takeaway here is that in our",
    "start": "450969",
    "end": "452949"
  },
  {
    "text": "producing Co routine we have this list",
    "start": "452949",
    "end": "455740"
  },
  {
    "text": "of numbers that we want to send to some",
    "start": "455740",
    "end": "458500"
  },
  {
    "text": "other part of our application and it's",
    "start": "458500",
    "end": "462400"
  },
  {
    "text": "only contained within our core routine",
    "start": "462400",
    "end": "464050"
  },
  {
    "text": "number three so it isn't shared between",
    "start": "464050",
    "end": "465669"
  },
  {
    "text": "any other resources when we want to",
    "start": "465669",
    "end": "468340"
  },
  {
    "text": "share that information we do so by",
    "start": "468340",
    "end": "471069"
  },
  {
    "text": "communicating and we use the channel to",
    "start": "471069",
    "end": "472930"
  },
  {
    "text": "do that channels behave like non",
    "start": "472930",
    "end": "475509"
  },
  {
    "text": "blocking queues their synchronization",
    "start": "475509",
    "end": "478060"
  },
  {
    "text": "primitives that allow us to safely send",
    "start": "478060",
    "end": "480490"
  },
  {
    "text": "values across our application now",
    "start": "480490",
    "end": "483330"
  },
  {
    "text": "sometimes channels are used as streaming",
    "start": "483330",
    "end": "486279"
  },
  {
    "text": "mechanisms and while depending on the",
    "start": "486279",
    "end": "488560"
  },
  {
    "text": "implementation they can work that way",
    "start": "488560",
    "end": "490690"
  },
  {
    "text": "they may not be as safe as performance",
    "start": "490690",
    "end": "494319"
  },
  {
    "text": "or even as organic as other streaming",
    "start": "494319",
    "end": "496870"
  },
  {
    "text": "tools that we might be able to use this",
    "start": "496870",
    "end": "499960"
  },
  {
    "text": "brings us to github issue number 254 in",
    "start": "499960",
    "end": "502900"
  },
  {
    "text": "the Kotlin co-routines library channels",
    "start": "502900",
    "end": "506139"
  },
  {
    "text": "are hot they consume resources before",
    "start": "506139",
    "end": "508839"
  },
  {
    "text": "anything has received the first value",
    "start": "508839",
    "end": "511210"
  },
  {
    "text": "from that channel so they're somewhat",
    "start": "511210",
    "end": "513909"
  },
  {
    "text": "inefficient",
    "start": "513909",
    "end": "514690"
  },
  {
    "text": "they're also not as safe or as easy to",
    "start": "514690",
    "end": "517539"
  },
  {
    "text": "use as other types of tools so the",
    "start": "517539",
    "end": "520690"
  },
  {
    "text": "engineers needed an abstraction for cold",
    "start": "520690",
    "end": "522820"
  },
  {
    "text": "streams that was lazy and computed data",
    "start": "522820",
    "end": "525550"
  },
  {
    "text": "in a push mode they wanted something",
    "start": "525550",
    "end": "528100"
  },
  {
    "text": "that was safer and easier for processing",
    "start": "528100",
    "end": "530620"
  },
  {
    "text": "streams that very github issue inspired",
    "start": "530620",
    "end": "534040"
  },
  {
    "start": "533000",
    "end": "771000"
  },
  {
    "text": "the idea of creating a tool called flow",
    "start": "534040",
    "end": "536440"
  },
  {
    "text": "now flow is",
    "start": "536440",
    "end": "537980"
  },
  {
    "text": "depicted with a faucet of running water",
    "start": "537980",
    "end": "540320"
  },
  {
    "text": "or a waterfall but I like to depict it",
    "start": "540320",
    "end": "543200"
  },
  {
    "text": "with someone in disguise and the reason",
    "start": "543200",
    "end": "546020"
  },
  {
    "text": "why is you will see how versatile flow",
    "start": "546020",
    "end": "547940"
  },
  {
    "text": "is sometimes flow is described as a",
    "start": "547940",
    "end": "550280"
  },
  {
    "text": "factory function or an abstraction for",
    "start": "550280",
    "end": "553220"
  },
  {
    "text": "different streaming tools and that's",
    "start": "553220",
    "end": "555200"
  },
  {
    "text": "really one I want to drill into how",
    "start": "555200",
    "end": "557060"
  },
  {
    "text": "versatile and flexible flow is for",
    "start": "557060",
    "end": "559160"
  },
  {
    "text": "handling different types of streams so",
    "start": "559160",
    "end": "561740"
  },
  {
    "text": "let's go through a very basic example of",
    "start": "561740",
    "end": "563480"
  },
  {
    "text": "how flows work so we'll start with the",
    "start": "563480",
    "end": "565700"
  },
  {
    "text": "flow of numbers we're going to use a",
    "start": "565700",
    "end": "567920"
  },
  {
    "text": "flow builder to create that flow of",
    "start": "567920",
    "end": "569690"
  },
  {
    "text": "numbers and this square tube is going to",
    "start": "569690",
    "end": "572840"
  },
  {
    "text": "represent our flow we're going to use a",
    "start": "572840",
    "end": "575120"
  },
  {
    "text": "list of 1 2 3 and iterate through that",
    "start": "575120",
    "end": "577310"
  },
  {
    "text": "list of numbers and omit each number now",
    "start": "577310",
    "end": "581570"
  },
  {
    "text": "as you notice from this square tube it",
    "start": "581570",
    "end": "583940"
  },
  {
    "text": "is light gray and sort of transparent",
    "start": "583940",
    "end": "587390"
  },
  {
    "text": "and what that represents is this flow is",
    "start": "587390",
    "end": "589460"
  },
  {
    "text": "inactive it only exists right now as a",
    "start": "589460",
    "end": "592160"
  },
  {
    "text": "variable it is not consuming any",
    "start": "592160",
    "end": "594020"
  },
  {
    "text": "resources while it just sits there",
    "start": "594020",
    "end": "596780"
  },
  {
    "text": "declared as a flow now let's continue",
    "start": "596780",
    "end": "599480"
  },
  {
    "text": "will launch a core routine will",
    "start": "599480",
    "end": "601760"
  },
  {
    "text": "reference the flow numbers and will call",
    "start": "601760",
    "end": "604940"
  },
  {
    "text": "collect as you can see on the right our",
    "start": "604940",
    "end": "607460"
  },
  {
    "text": "square tube turned bright blue",
    "start": "607460",
    "end": "609770"
  },
  {
    "text": "representing it turning on and the",
    "start": "609770",
    "end": "612290"
  },
  {
    "text": "reason why is because we called this",
    "start": "612290",
    "end": "613850"
  },
  {
    "text": "thing called collect which is a terminal",
    "start": "613850",
    "end": "615680"
  },
  {
    "text": "operator and what that means is flows",
    "start": "615680",
    "end": "618200"
  },
  {
    "text": "actually don't start or start consuming",
    "start": "618200",
    "end": "620390"
  },
  {
    "text": "resources until you've called a terminal",
    "start": "620390",
    "end": "622550"
  },
  {
    "text": "operator below our square tube that we",
    "start": "622550",
    "end": "625730"
  },
  {
    "text": "initially had is another one to",
    "start": "625730",
    "end": "627710"
  },
  {
    "text": "represent the flow collector and they",
    "start": "627710",
    "end": "630020"
  },
  {
    "text": "act in tandem to have a flow produce and",
    "start": "630020",
    "end": "632810"
  },
  {
    "text": "collect values as the flow is streaming",
    "start": "632810",
    "end": "636850"
  },
  {
    "text": "so we have a flow of numbers now that",
    "start": "636850",
    "end": "639440"
  },
  {
    "text": "we're collecting and we're going to use",
    "start": "639440",
    "end": "640670"
  },
  {
    "text": "it to update a UI so below at the bottom",
    "start": "640670",
    "end": "643820"
  },
  {
    "text": "is our UI and our numbers are 1 2 & 3",
    "start": "643820",
    "end": "646640"
  },
  {
    "text": "above the flow and let's watch them as",
    "start": "646640",
    "end": "648860"
  },
  {
    "text": "they stream through our flow into the UI",
    "start": "648860",
    "end": "650860"
  },
  {
    "text": "the flow builder first emits its first",
    "start": "650860",
    "end": "653630"
  },
  {
    "text": "value this goes into the flow collector",
    "start": "653630",
    "end": "656570"
  },
  {
    "text": "and the flow collector updates the UI",
    "start": "656570",
    "end": "659050"
  },
  {
    "text": "the second value comes through and again",
    "start": "659050",
    "end": "661520"
  },
  {
    "text": "goes to the flow collector into the UI",
    "start": "661520",
    "end": "663740"
  },
  {
    "text": "and all values stream until eventually",
    "start": "663740",
    "end": "666290"
  },
  {
    "text": "the flow closes and the co-routine ends",
    "start": "666290",
    "end": "670260"
  },
  {
    "text": "this all happened in one quarantine in",
    "start": "670260",
    "end": "673410"
  },
  {
    "text": "fact this is why the coroutine was",
    "start": "673410",
    "end": "676230"
  },
  {
    "text": "really under the disguise of flow it was",
    "start": "676230",
    "end": "679950"
  },
  {
    "text": "one resource and once it was done",
    "start": "679950",
    "end": "682920"
  },
  {
    "text": "operating through the list with it for",
    "start": "682920",
    "end": "685170"
  },
  {
    "text": "each loop the flow closed it's very",
    "start": "685170",
    "end": "688320"
  },
  {
    "text": "efficient it's very safe it's very easy",
    "start": "688320",
    "end": "690990"
  },
  {
    "text": "to use but flow actually comes in many",
    "start": "690990",
    "end": "693930"
  },
  {
    "text": "more forms for example let's say we",
    "start": "693930",
    "end": "696510"
  },
  {
    "text": "wanted a buffered flow which is when a",
    "start": "696510",
    "end": "698550"
  },
  {
    "text": "flow can hold on to values before the",
    "start": "698550",
    "end": "701220"
  },
  {
    "text": "collector actually receives those values",
    "start": "701220",
    "end": "702990"
  },
  {
    "text": "we can do this simply by referencing our",
    "start": "702990",
    "end": "705900"
  },
  {
    "text": "numbers in our core teen and appending a",
    "start": "705900",
    "end": "708330"
  },
  {
    "text": "buffer in between numbers and the",
    "start": "708330",
    "end": "710520"
  },
  {
    "text": "collect operator and what this does is",
    "start": "710520",
    "end": "713040"
  },
  {
    "text": "it actually inserts a channel in between",
    "start": "713040",
    "end": "716130"
  },
  {
    "text": "two coroutines with one color team being",
    "start": "716130",
    "end": "718770"
  },
  {
    "text": "the original collect co-routine but the",
    "start": "718770",
    "end": "721920"
  },
  {
    "text": "flow builder being a new separate color",
    "start": "721920",
    "end": "724110"
  },
  {
    "text": "team by doing this the buffer channel",
    "start": "724110",
    "end": "727140"
  },
  {
    "text": "allows the flow to be buffered and",
    "start": "727140",
    "end": "729030"
  },
  {
    "text": "behaved just like our old flow except",
    "start": "729030",
    "end": "731580"
  },
  {
    "text": "with a buffer in the middle so we've",
    "start": "731580",
    "end": "734130"
  },
  {
    "text": "seen now flows as a buffer channel well",
    "start": "734130",
    "end": "738480"
  },
  {
    "text": "let's look at that list again we can",
    "start": "738480",
    "end": "741870"
  },
  {
    "text": "actually write this more simply as lists",
    "start": "741870",
    "end": "743460"
  },
  {
    "text": "of 1 2 3 as flow we could call it the",
    "start": "743460",
    "end": "747420"
  },
  {
    "text": "same way that we did before with numbers",
    "start": "747420",
    "end": "749070"
  },
  {
    "text": "to collect and it operates the exact",
    "start": "749070",
    "end": "750870"
  },
  {
    "text": "same way we can go even simpler and say",
    "start": "750870",
    "end": "753360"
  },
  {
    "text": "flow of 1 2 3 we could even make",
    "start": "753360",
    "end": "756840"
  },
  {
    "text": "something like a functional type a flow",
    "start": "756840",
    "end": "758820"
  },
  {
    "text": "we can make a suspending functional type",
    "start": "758820",
    "end": "761010"
  },
  {
    "text": "of flow we can even make a live data",
    "start": "761010",
    "end": "763770"
  },
  {
    "text": "object as a flow",
    "start": "763770",
    "end": "765440"
  },
  {
    "text": "anything can be flow so let's put this",
    "start": "765440",
    "end": "769350"
  },
  {
    "text": "all together with an Android app",
    "start": "769350",
    "end": "771200"
  },
  {
    "start": "771000",
    "end": "1123000"
  },
  {
    "text": "demonstration so first we'll go over the",
    "start": "771200",
    "end": "775170"
  },
  {
    "text": "recommended architecture I want to make",
    "start": "775170",
    "end": "777210"
  },
  {
    "text": "sure that when I demonstrate how to use",
    "start": "777210",
    "end": "778890"
  },
  {
    "text": "flow in an application that it's in a",
    "start": "778890",
    "end": "781050"
  },
  {
    "text": "modern application with some of the",
    "start": "781050",
    "end": "782580"
  },
  {
    "text": "architecture components that you'll see",
    "start": "782580",
    "end": "784230"
  },
  {
    "text": "in most apps nowadays so first we have",
    "start": "784230",
    "end": "788190"
  },
  {
    "text": "the view this represents the activity or",
    "start": "788190",
    "end": "790050"
  },
  {
    "text": "fragment and we have the view model so",
    "start": "790050",
    "end": "793620"
  },
  {
    "text": "these two share data specifically the",
    "start": "793620",
    "end": "796140"
  },
  {
    "text": "view observes the live data within the",
    "start": "796140",
    "end": "798210"
  },
  {
    "text": "view model on the other side of our",
    "start": "798210",
    "end": "800130"
  },
  {
    "text": "architecture we have a data source in",
    "start": "800130",
    "end": "802080"
  },
  {
    "text": "repository the",
    "start": "802080",
    "end": "803590"
  },
  {
    "text": "a source represents things like Network",
    "start": "803590",
    "end": "805480"
  },
  {
    "text": "calls and database reads these are all",
    "start": "805480",
    "end": "808150"
  },
  {
    "text": "captured in the data source whereas the",
    "start": "808150",
    "end": "810070"
  },
  {
    "text": "repository performs common operations on",
    "start": "810070",
    "end": "812770"
  },
  {
    "text": "the data source both of these use a flow",
    "start": "812770",
    "end": "815440"
  },
  {
    "text": "to represent the stream of data that",
    "start": "815440",
    "end": "818050"
  },
  {
    "text": "comes out of them now often applications",
    "start": "818050",
    "end": "820660"
  },
  {
    "text": "will actually connect to the view model",
    "start": "820660",
    "end": "822580"
  },
  {
    "text": "directly to the repository but to break",
    "start": "822580",
    "end": "824950"
  },
  {
    "text": "out the business logic we can use a use",
    "start": "824950",
    "end": "826930"
  },
  {
    "text": "case to connect a view model to the",
    "start": "826930",
    "end": "829120"
  },
  {
    "text": "repository between live data and flow",
    "start": "829120",
    "end": "831460"
  },
  {
    "text": "using another flow so here's an example",
    "start": "831460",
    "end": "834370"
  },
  {
    "text": "app we have a stream of users populating",
    "start": "834370",
    "end": "838090"
  },
  {
    "text": "a ListView",
    "start": "838090",
    "end": "838930"
  },
  {
    "text": "so let's go into how I built this first",
    "start": "838930",
    "end": "842410"
  },
  {
    "text": "let's go into the models there's a user",
    "start": "842410",
    "end": "843910"
  },
  {
    "text": "which you can see a list of on the left",
    "start": "843910",
    "end": "846280"
  },
  {
    "text": "a user has a name and a photo and a",
    "start": "846280",
    "end": "849460"
  },
  {
    "text": "photo is something I created it simply",
    "start": "849460",
    "end": "851050"
  },
  {
    "text": "just has a name in a drawable image and",
    "start": "851050",
    "end": "854260"
  },
  {
    "text": "the idea here is that users and photos",
    "start": "854260",
    "end": "857290"
  },
  {
    "text": "are associated by name now normally you",
    "start": "857290",
    "end": "859930"
  },
  {
    "text": "might do this with a UUID or a gooood",
    "start": "859930",
    "end": "861970"
  },
  {
    "text": "but in this case I wanted to keep it",
    "start": "861970",
    "end": "863620"
  },
  {
    "text": "simple users and photos share the same",
    "start": "863620",
    "end": "865870"
  },
  {
    "text": "name so let's look at the data source",
    "start": "865870",
    "end": "868540"
  },
  {
    "text": "the data source is powered by a flow and",
    "start": "868540",
    "end": "870930"
  },
  {
    "text": "we normally represent this with room or",
    "start": "870930",
    "end": "873820"
  },
  {
    "text": "retrofit if we want to do database calls",
    "start": "873820",
    "end": "876340"
  },
  {
    "text": "with room and retrofit for Network calls",
    "start": "876340",
    "end": "878140"
  },
  {
    "text": "but I wanted to keep it really simple so",
    "start": "878140",
    "end": "881320"
  },
  {
    "text": "let's look at an in-memory database",
    "start": "881320",
    "end": "883150"
  },
  {
    "text": "called names it's a flow generated from",
    "start": "883150",
    "end": "887140"
  },
  {
    "text": "a list of Sarah Nathan Emily and Alex",
    "start": "887140",
    "end": "889090"
  },
  {
    "text": "and the way we make that flow is using",
    "start": "889090",
    "end": "891370"
  },
  {
    "text": "the s flow operator so for example room",
    "start": "891370",
    "end": "896080"
  },
  {
    "text": "actually has support for flow so you can",
    "start": "896080",
    "end": "899170"
  },
  {
    "text": "actually make your data sources produce",
    "start": "899170",
    "end": "900730"
  },
  {
    "text": "flows pretty easily with little work but",
    "start": "900730",
    "end": "902710"
  },
  {
    "text": "in this case I wanted just to show a",
    "start": "902710",
    "end": "904420"
  },
  {
    "text": "simple example of a source of data these",
    "start": "904420",
    "end": "907150"
  },
  {
    "text": "names in our repository we will work",
    "start": "907150",
    "end": "911500"
  },
  {
    "text": "with that flow so this is where we have",
    "start": "911500",
    "end": "913720"
  },
  {
    "text": "our common operations and right now",
    "start": "913720",
    "end": "915760"
  },
  {
    "text": "we'll make a photo repository using the",
    "start": "915760",
    "end": "917830"
  },
  {
    "text": "names we had from our data source let's",
    "start": "917830",
    "end": "920440"
  },
  {
    "text": "create a flow of photos first we'll get",
    "start": "920440",
    "end": "922930"
  },
  {
    "text": "names from our data source and we will",
    "start": "922930",
    "end": "926590"
  },
  {
    "text": "get each photo from that flow of names",
    "start": "926590",
    "end": "928360"
  },
  {
    "text": "using the map operator now in the demo",
    "start": "928360",
    "end": "931660"
  },
  {
    "text": "you did see me use this function but it",
    "start": "931660",
    "end": "933490"
  },
  {
    "text": "operated very quickly so I wanted to",
    "start": "933490",
    "end": "935440"
  },
  {
    "text": "slow it down so you could see the stream",
    "start": "935440",
    "end": "936970"
  },
  {
    "text": "of value",
    "start": "936970",
    "end": "937360"
  },
  {
    "text": "come in another operator we can use to",
    "start": "937360",
    "end": "939730"
  },
  {
    "text": "do that is the on each operator I used",
    "start": "939730",
    "end": "942850"
  },
  {
    "text": "on each to delay the emission of users",
    "start": "942850",
    "end": "944860"
  },
  {
    "text": "but let's say you don't want your flow",
    "start": "944860",
    "end": "947050"
  },
  {
    "text": "to run in the main thread you can use",
    "start": "947050",
    "end": "949360"
  },
  {
    "text": "the flow on operator to run your flow in",
    "start": "949360",
    "end": "951970"
  },
  {
    "text": "a different set of threads such as the",
    "start": "951970",
    "end": "954339"
  },
  {
    "text": "default dispatcher set of CPU optimize",
    "start": "954339",
    "end": "957190"
  },
  {
    "text": "threads so let's keep going up let's go",
    "start": "957190",
    "end": "959380"
  },
  {
    "text": "into the use case I have a flow of",
    "start": "959380",
    "end": "961300"
  },
  {
    "text": "photos and a flow of names now but I",
    "start": "961300",
    "end": "963250"
  },
  {
    "text": "want a flow of users from that and the",
    "start": "963250",
    "end": "965500"
  },
  {
    "text": "way you can do that to implement that",
    "start": "965500",
    "end": "967450"
  },
  {
    "text": "business logic is to first get names and",
    "start": "967450",
    "end": "970470"
  },
  {
    "text": "bring this together with the photos that",
    "start": "970470",
    "end": "973029"
  },
  {
    "text": "we had from the photo flow we can use",
    "start": "973029",
    "end": "975970"
  },
  {
    "text": "the zip operator for this specifically",
    "start": "975970",
    "end": "979240"
  },
  {
    "text": "we'll zip names and the flow of photos",
    "start": "979240",
    "end": "981930"
  },
  {
    "text": "bringing a flow of names and photos that",
    "start": "981930",
    "end": "984730"
  },
  {
    "text": "we can then use to create a flow of",
    "start": "984730",
    "end": "987430"
  },
  {
    "text": "users by constructing a user in the zip",
    "start": "987430",
    "end": "989560"
  },
  {
    "text": "operator and now we have a use case with",
    "start": "989560",
    "end": "993220"
  },
  {
    "text": "repository and names where we get a user",
    "start": "993220",
    "end": "996160"
  },
  {
    "text": "flow so now let's work our way up to the",
    "start": "996160",
    "end": "998920"
  },
  {
    "text": "view model now we have live data we need",
    "start": "998920",
    "end": "1000839"
  },
  {
    "text": "to convert that flow into a live data",
    "start": "1000839",
    "end": "1003269"
  },
  {
    "text": "object and fortunately when we have the",
    "start": "1003269",
    "end": "1005579"
  },
  {
    "text": "use case that's actually very simple to",
    "start": "1005579",
    "end": "1008010"
  },
  {
    "text": "make that live data object of users all",
    "start": "1008010",
    "end": "1010140"
  },
  {
    "text": "we have to do is get the user flow from",
    "start": "1010140",
    "end": "1012060"
  },
  {
    "text": "the use case and call as live data and",
    "start": "1012060",
    "end": "1015089"
  },
  {
    "text": "that's it you're done you have a live",
    "start": "1015089",
    "end": "1017010"
  },
  {
    "text": "data object based on your flow finally",
    "start": "1017010",
    "end": "1019949"
  },
  {
    "text": "we'll work up to the view now our job in",
    "start": "1019949",
    "end": "1023610"
  },
  {
    "text": "the view is to observe the live data so",
    "start": "1023610",
    "end": "1026548"
  },
  {
    "text": "in in whatever your creation method is",
    "start": "1026549",
    "end": "1028410"
  },
  {
    "text": "in this case we probably have an",
    "start": "1028410",
    "end": "1029668"
  },
  {
    "text": "activity so in oncreate we'll create a",
    "start": "1029669",
    "end": "1032040"
  },
  {
    "text": "repository use case view model all of",
    "start": "1032040",
    "end": "1034079"
  },
  {
    "text": "the things that we need to create a list",
    "start": "1034079",
    "end": "1035790"
  },
  {
    "text": "view and then we'll reference our user",
    "start": "1035790",
    "end": "1039058"
  },
  {
    "text": "live data and observe all the users that",
    "start": "1039059",
    "end": "1042030"
  },
  {
    "text": "come through that stream and whenever we",
    "start": "1042030",
    "end": "1044610"
  },
  {
    "text": "get a user we simply add that user to",
    "start": "1044610",
    "end": "1047040"
  },
  {
    "text": "our list adapter and that's it that's",
    "start": "1047040",
    "end": "1049679"
  },
  {
    "text": "all you need to create that application",
    "start": "1049679",
    "end": "1051510"
  },
  {
    "text": "but you can actually build that with",
    "start": "1051510",
    "end": "1054179"
  },
  {
    "text": "flow going all the way from the data",
    "start": "1054179",
    "end": "1055799"
  },
  {
    "text": "source up to the view we don't have to",
    "start": "1055799",
    "end": "1058020"
  },
  {
    "text": "even use live data for example we could",
    "start": "1058020",
    "end": "1061500"
  },
  {
    "text": "use the lifecycle scope with a custom",
    "start": "1061500",
    "end": "1064410"
  },
  {
    "text": "co-routine builder called launch when",
    "start": "1064410",
    "end": "1066270"
  },
  {
    "text": "created and used that to collect the",
    "start": "1066270",
    "end": "1069090"
  },
  {
    "text": "users from our user flow",
    "start": "1069090",
    "end": "1071440"
  },
  {
    "text": "and as each user is collected it can be",
    "start": "1071440",
    "end": "1074049"
  },
  {
    "text": "added to the adapter just like we saw",
    "start": "1074049",
    "end": "1076389"
  },
  {
    "text": "with the live data object now the reason",
    "start": "1076389",
    "end": "1079299"
  },
  {
    "text": "this is possible is because flow is",
    "start": "1079299",
    "end": "1080919"
  },
  {
    "text": "actually reactive as the collect",
    "start": "1080919",
    "end": "1083200"
  },
  {
    "text": "operator is running it will suspend when",
    "start": "1083200",
    "end": "1085899"
  },
  {
    "text": "there are no values and resume when",
    "start": "1085899",
    "end": "1087669"
  },
  {
    "text": "there are new values we can even use",
    "start": "1087669",
    "end": "1090549"
  },
  {
    "text": "flow to write this even more cleanly for",
    "start": "1090549",
    "end": "1093610"
  },
  {
    "text": "example we can use the launch and",
    "start": "1093610",
    "end": "1094809"
  },
  {
    "text": "operator to remove a nesting level from",
    "start": "1094809",
    "end": "1097179"
  },
  {
    "text": "this code we can add on each to our user",
    "start": "1097179",
    "end": "1100990"
  },
  {
    "text": "flow describe what we'll do specifically",
    "start": "1100990",
    "end": "1103600"
  },
  {
    "text": "add the user it in this case and then",
    "start": "1103600",
    "end": "1106600"
  },
  {
    "text": "launch in the lifecycle scope and that's",
    "start": "1106600",
    "end": "1109210"
  },
  {
    "text": "it we have three ways to use flow in our",
    "start": "1109210",
    "end": "1111610"
  },
  {
    "text": "flow of users application so thank you",
    "start": "1111610",
    "end": "1115179"
  },
  {
    "text": "for listening I hope this was insightful",
    "start": "1115179",
    "end": "1119158"
  }
]