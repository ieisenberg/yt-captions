[
  {
    "start": "0",
    "end": "117000"
  },
  {
    "text": "[Music]",
    "start": "4370",
    "end": "8889"
  },
  {
    "text": "foreign",
    "start": "12599",
    "end": "15599"
  },
  {
    "text": "and welcome to Practical Magic the resilience potion and security chaos",
    "start": "19640",
    "end": "24900"
  },
  {
    "text": "engineering everything in software like and life is",
    "start": "24900",
    "end": "29939"
  },
  {
    "text": "a system in transition I think we all know our requirements will will evolve and our context will",
    "start": "29939",
    "end": "36000"
  },
  {
    "text": "change and in fact they're changing all the time but not all software Engineers actually",
    "start": "36000",
    "end": "42000"
  },
  {
    "text": "design for change they don't design for an evolving context I would argue poor",
    "start": "42000",
    "end": "47520"
  },
  {
    "text": "Engineers design for other engineers mediocre Engineers designed for the",
    "start": "47520",
    "end": "53160"
  },
  {
    "text": "future that they imagine but good Engineers design for change",
    "start": "53160",
    "end": "58860"
  },
  {
    "text": "this means good Engineers want to sustain resilience in their software and systems because that gives them the",
    "start": "58860",
    "end": "64619"
  },
  {
    "text": "ability to adapt to those evolving conditions and contexts we pursue resilience if we're designing",
    "start": "64619",
    "end": "71700"
  },
  {
    "text": "and developing for change we can improve software quality actually at the same time as security too one thing I would",
    "start": "71700",
    "end": "77700"
  },
  {
    "text": "love for you all to take away is that security is a subset of software quality so there's a lot you can do as",
    "start": "77700",
    "end": "83640"
  },
  {
    "text": "developers to help nurture this of course the natural question is like",
    "start": "83640",
    "end": "88799"
  },
  {
    "text": "how do we do this right what are the principles and practices and tools that can help us sustain software what can we",
    "start": "88799",
    "end": "94560"
  },
  {
    "text": "adopt to help us nurture resilience in our systems that's what we're going to talk about today and specifically by",
    "start": "94560",
    "end": "100619"
  },
  {
    "text": "imbibing what I call the resilience potion which is a metaphor for the traits that we seek to sustain",
    "start": "100619",
    "end": "106079"
  },
  {
    "text": "resilience in our software and that's going to guide our exploration today so we'll go through each ingredient there",
    "start": "106079",
    "end": "111479"
  },
  {
    "text": "are five of them and explore a few opportunities for how we can cultivate it when we're developing and delivering",
    "start": "111479",
    "end": "118259"
  },
  {
    "start": "117000",
    "end": "377000"
  },
  {
    "text": "first what is resilience how many of you are familiar with like software resilience yeah they're also like a ton",
    "start": "118259",
    "end": "124740"
  },
  {
    "text": "of buzzwords around the topic so I always like to clarify what it really means we can start with very casually the",
    "start": "124740",
    "end": "130739"
  },
  {
    "text": "nature of reality which is that failure is inevitable and failure is just a part of a natural part of complex systems as",
    "start": "130739",
    "end": "136920"
  },
  {
    "text": "they operate our software is also a complex system but our beliefs about it don't always",
    "start": "136920",
    "end": "143520"
  },
  {
    "text": "align with reality the software we design build and operate reflects our mental models mental models",
    "start": "143520",
    "end": "150660"
  },
  {
    "text": "are formerly designed defined as our cognitive representations of external reality so basically it means we hold in",
    "start": "150660",
    "end": "156780"
  },
  {
    "text": "our heads like this little otter like a smaller scale representation of how we think the world works and software we",
    "start": "156780",
    "end": "162420"
  },
  {
    "text": "Implement a design and then that reflects a mental model and then we create a subsequent mental model of how",
    "start": "162420",
    "end": "168540"
  },
  {
    "text": "our implementation works we've got like nested mental models here every time you encounter a bug for",
    "start": "168540",
    "end": "174480"
  },
  {
    "text": "instance that's the difference between your mental model and reality it's how you expect the world to work which is",
    "start": "174480",
    "end": "180420"
  },
  {
    "text": "how it actually works mental models though are dynamic they change as a system changes they change",
    "start": "180420",
    "end": "186900"
  },
  {
    "text": "as context changes and that makes them highly dependent obviously on that context",
    "start": "186900",
    "end": "192540"
  },
  {
    "text": "understanding your system's context is no small feat like it's pretty easy like to understand the first iteration in",
    "start": "192540",
    "end": "198180"
  },
  {
    "text": "your software but I like to think of software especially distributed systems this is kind of like fractalizing Dragon",
    "start": "198180",
    "end": "203700"
  },
  {
    "text": "spiral it's just impossible to really mentally model and understand systems the result of years of iteration I'm",
    "start": "203700",
    "end": "210060"
  },
  {
    "text": "sure a lot of you all have been there you enter a new company you encounter software that's been built over a decade",
    "start": "210060",
    "end": "215159"
  },
  {
    "text": "you're like oh my God how does this even work it feels impossible to understand",
    "start": "215159",
    "end": "220500"
  },
  {
    "text": "this is why surprises things like bugs feel especially fraught in or expect exceptionally complex software systems",
    "start": "220500",
    "end": "227459"
  },
  {
    "text": "so I love this quote by evolutionary biologist Lynn bardulis who eloquently described the element of surprise as the",
    "start": "227459",
    "end": "234540"
  },
  {
    "text": "Revelation that a given phenomenon in the environment was until this moment misinterpreted in essence a surprise is",
    "start": "234540",
    "end": "240840"
  },
  {
    "text": "an open challenge to our mental models of our software this means as Dr David Woods very pivily",
    "start": "240840",
    "end": "247140"
  },
  {
    "text": "puts it we must prepare to be surprised you have to prepare to be surprised this",
    "start": "247140",
    "end": "252360"
  },
  {
    "text": "preparation involves adaptation so what is adaptation well what we see",
    "start": "252360",
    "end": "258000"
  },
  {
    "text": "across all sorts of complex systems whether that's like in nature ecology economics uh our brains even is that",
    "start": "258000",
    "end": "266060"
  },
  {
    "text": "successful complex systems are adaptive they change and evolve over time and",
    "start": "266060",
    "end": "271500"
  },
  {
    "text": "space especially in response to their changes in their external environment",
    "start": "271500",
    "end": "276900"
  },
  {
    "text": "preparing to be surprised is really about adaptive capacity and adaptive capacity reflects how readier poised a",
    "start": "276900",
    "end": "283979"
  },
  {
    "text": "system is to change how it works its behaviors its models its plans processes",
    "start": "283979",
    "end": "289020"
  },
  {
    "text": "procedures to change all of those things so it can continue to operate in a world featuring surprises and other invagaries",
    "start": "289020",
    "end": "297360"
  },
  {
    "text": "and resilience reflects this need for sustained adaptation that we have to",
    "start": "297360",
    "end": "302460"
  },
  {
    "text": "prepare for failures and opportunities alike to thrive more formally because I like again",
    "start": "302460",
    "end": "308460"
  },
  {
    "text": "getting everyone on the same page definition wise resilience is defined as the ability to prepare for prepare and",
    "start": "308460",
    "end": "314340"
  },
  {
    "text": "plan for absorb recover from and more successfully adapt to Adverse Events",
    "start": "314340",
    "end": "319759"
  },
  {
    "text": "okay so now we're at a security cast engineering fit in honestly if I had my druthers I would just call it like",
    "start": "319759",
    "end": "325800"
  },
  {
    "text": "resilience engineering or software resilience engineering but I don't have a time machine so it's called security",
    "start": "325800",
    "end": "331259"
  },
  {
    "text": "chaos engineering and the way I Define security chaos engineering which I have the luxury to do so because I wrote the",
    "start": "331259",
    "end": "337080"
  },
  {
    "text": "book on it is a socio-technical transformation that enables the organizational ability to gracefully",
    "start": "337080",
    "end": "342600"
  },
  {
    "text": "respond to failure and adapt to evolving conditions security cast engineering really",
    "start": "342600",
    "end": "348419"
  },
  {
    "text": "recognizes that we have to make sure our mental model is clear and then observe reality to refine that mental model want",
    "start": "348419",
    "end": "355020"
  },
  {
    "text": "to align them as much as possible also this means we can design for change we can be good Engineers that understand",
    "start": "355020",
    "end": "361380"
  },
  {
    "text": "that all of our software success depends on context",
    "start": "361380",
    "end": "366660"
  },
  {
    "text": "it's as part of the security chaos engineering transformation which is again really a transformation towards resilience we can imbibe the resilience",
    "start": "366660",
    "end": "373680"
  },
  {
    "text": "potion to help us on our journey so what is the resilience potion by the",
    "start": "373680",
    "end": "378960"
  },
  {
    "start": "377000",
    "end": "543000"
  },
  {
    "text": "way that is chaos Kitty you haven't met chaos kitty it's going to help you on your journey to resilience and yes I have stickers that will be at the book",
    "start": "378960",
    "end": "385139"
  },
  {
    "text": "signing upstairs after this so come get them so resilience potion what is it",
    "start": "385139",
    "end": "390479"
  },
  {
    "text": "there are five common features that Define resilience which we can frame as five ingredients in a resilience potion",
    "start": "390479",
    "end": "396539"
  },
  {
    "text": "recipe for fun makes it a little more memorable we can Brew this Elixir to Foster resilience in our systems and",
    "start": "396539",
    "end": "402240"
  },
  {
    "text": "guide our security chaos engineering transformation I like to think computers think of crystals inside crystals that",
    "start": "402240",
    "end": "408120"
  },
  {
    "text": "are literally like vibing out so of course we need to have a little like magical feeling to our work",
    "start": "408120",
    "end": "414600"
  },
  {
    "text": "first ingredient in our resilience potion is this defining the system's critical functionality",
    "start": "414600",
    "end": "420060"
  },
  {
    "text": "this is the system's reason for existence what we care about is how the system performs its core operations when",
    "start": "420060",
    "end": "427080"
  },
  {
    "text": "undergoing some sort of stress or adverse conditions this is represented by milk in the",
    "start": "427080",
    "end": "432780"
  },
  {
    "text": "resilience potion obviously you don't spill it everywhere it doesn't have to be cow-based milk I saw there's lovely plant milks you choose second ingredient",
    "start": "432780",
    "end": "439919"
  },
  {
    "text": "is defining the system's boundaries of safe operation these are the thresholds",
    "start": "439919",
    "end": "445620"
  },
  {
    "text": "Beyond which the system is no longer resilient to adverse conditions the system can only absorb changes up to a",
    "start": "445620",
    "end": "452280"
  },
  {
    "text": "certain point and stay within its healthy state of existence this is represented by dried hibiscus in the",
    "start": "452280",
    "end": "457740"
  },
  {
    "text": "potion the third ingredient is observing the system's interactions across space-time",
    "start": "457740",
    "end": "462960"
  },
  {
    "text": "because complex systems involve many components interacting with each other the resilience can only be understood",
    "start": "462960",
    "end": "468720"
  },
  {
    "text": "through System Dynamics across space and time different behaviors will unfold",
    "start": "468720",
    "end": "474479"
  },
  {
    "text": "over time and across the topology of the system this is represented by cacao beans in the potion which if you didn't",
    "start": "474479",
    "end": "480240"
  },
  {
    "text": "know you have to ferment them fourth ingredient is fostering feedback loops and a learning culture",
    "start": "480240",
    "end": "486599"
  },
  {
    "text": "resilience depends on remembering failure and learning from it feedback loops in which outputs from the system",
    "start": "486599",
    "end": "492539"
  },
  {
    "text": "are fed back in as inputs and future operations are essential for systems resilience this is represented by Chili",
    "start": "492539",
    "end": "499500"
  },
  {
    "text": "Peppers in the potion the final ingredient is flexibility and willingness to change this is that",
    "start": "499500",
    "end": "505800"
  },
  {
    "text": "adaptive capacity we talked about earlier we also need to sustain this flexibility over time to keeping this as some",
    "start": "505800",
    "end": "512940"
  },
  {
    "text": "flexible enough to change in response to changes in operating conditions this ingredient is represented by squishy",
    "start": "512940",
    "end": "519360"
  },
  {
    "text": "flexible marshmallows in our potion you can piece it together the end result is a very tasty spicy quite redolent hot",
    "start": "519360",
    "end": "526440"
  },
  {
    "text": "chocolate not quite the time of year for hot chocolate but it's still worth trying out so how can we Brew this potion when we",
    "start": "526440",
    "end": "533519"
  },
  {
    "text": "develop and deliver software there are lots of opportunities we'll talk about a selection of the of them today the rest",
    "start": "533519",
    "end": "539760"
  },
  {
    "text": "are in my book that's precisely on this topic of resilience so how do we harvest the first",
    "start": "539760",
    "end": "545700"
  },
  {
    "start": "543000",
    "end": "1020000"
  },
  {
    "text": "ingredient of our resilience potion understanding the system's critical functionality when we're writing code",
    "start": "545700",
    "end": "551640"
  },
  {
    "text": "when we're implementing critical functionality by developing code our aim is Simplicity and understandability of",
    "start": "551640",
    "end": "557459"
  },
  {
    "text": "critical functions so let's explore a few opportunities to realize the same one practice is what I call the airlock",
    "start": "557459",
    "end": "564480"
  },
  {
    "text": "approach so whenever we're building and delivering software we need to Define what we can throw out of the airlock so",
    "start": "564480",
    "end": "571800"
  },
  {
    "text": "the question to ask is like what functionality components can you neglect temporarily and still have the system perform its critical functions",
    "start": "571800",
    "end": "579300"
  },
  {
    "text": "another way of thinking about it is what would you like to be able to neglect during an incident whatever you answer",
    "start": "579300",
    "end": "584700"
  },
  {
    "text": "make sure to build the software in a way that you can indeed neglect whatever those functions are as necessary",
    "start": "584700",
    "end": "592279"
  },
  {
    "text": "by the way it turns out this is slanted so I don't want to have like a you know we're trying to be resilient here so",
    "start": "592279",
    "end": "598200"
  },
  {
    "text": "this applies equally by the way to Performance incidents and security incidents so if one component is",
    "start": "598200",
    "end": "604200"
  },
  {
    "text": "compromised the erlock approach means you can shut it off if it's non-critical and contain that Contagion",
    "start": "604200",
    "end": "610260"
  },
  {
    "text": "for example if processing transactions is actually your system's critical functionality and maybe reporting isn't",
    "start": "610260",
    "end": "615959"
  },
  {
    "text": "you could should build the system so you can throw reporting out of the airlock and preserve resources for your core",
    "start": "615959",
    "end": "621899"
  },
  {
    "text": "function which is processing transactions it's actually possible that maybe reporting is your most lucrative",
    "start": "621899",
    "end": "627420"
  },
  {
    "text": "function it's your money printer going like but because timeliness of reporting matters much less than processing",
    "start": "627420",
    "end": "633779"
  },
  {
    "text": "transactions that's still the thing you want to throw out of the airlock you can still sacrifice it",
    "start": "633779",
    "end": "639600"
  },
  {
    "text": "thank you second opportunity we'll discuss in terms of critical functions is choosing boring technology",
    "start": "639600",
    "end": "646380"
  },
  {
    "text": "so how many of you read the post by Dan McKinley choose boring okay a few of you great I'm excited to",
    "start": "646380",
    "end": "652740"
  },
  {
    "text": "teach you something new so highly recommend reading it but what Dan says is boring is not inherently bad we think",
    "start": "652740",
    "end": "658860"
  },
  {
    "text": "of boring as a bad thing but it's not actually boring likely indicates well understood capabilities which is what we want that",
    "start": "658860",
    "end": "666180"
  },
  {
    "text": "helps us Wrangle complexity and reduce the preponderance of what I call baffling interactions in our systems and",
    "start": "666180",
    "end": "671399"
  },
  {
    "text": "things where we go oh my God that can even happen in our software so this means both our systems and our",
    "start": "671399",
    "end": "677160"
  },
  {
    "text": "mental models of the systems are easier to grasp if we choose boring software Engineers really should be",
    "start": "677160",
    "end": "682800"
  },
  {
    "text": "making choices whether languages Frameworks or tooling that solve best",
    "start": "682800",
    "end": "688620"
  },
  {
    "text": "solve specific business problems like the end user really doesn't care that you use the latest and greatest tool",
    "start": "688620",
    "end": "694380"
  },
  {
    "text": "hyped up on Hacker News or that's going to get you like a lot of points with other engineers the end user wants to use your service",
    "start": "694380",
    "end": "700680"
  },
  {
    "text": "whenever they want as quickly as they want and with the functionality they want that's it that's all the user cares",
    "start": "700680",
    "end": "706560"
  },
  {
    "text": "about sometimes solving those business problems will require you fancy technology if it grants you some sort of",
    "start": "706560",
    "end": "712500"
  },
  {
    "text": "competitive advantage or like a market moats or otherwise fulfills your organization's Mission if you're not a",
    "start": "712500",
    "end": "718260"
  },
  {
    "text": "for-profit company even so I'd like to say be cautious about how often you pursue non-boring",
    "start": "718260",
    "end": "723899"
  },
  {
    "text": "technology because if you're living at the bleeding edge guess what that takes a lot of blood sacrifices to maintain",
    "start": "723899",
    "end": "731160"
  },
  {
    "text": "so you're probably thinking like okay but Kelly you really don't understand what if this new shiny technology is",
    "start": "731160",
    "end": "736260"
  },
  {
    "text": "like really really really cool so you know who else loves shiny new software attackers they love when developers",
    "start": "736260",
    "end": "743220"
  },
  {
    "text": "adopt new tools that aren't well understood yet because that creates lots of opportunities to take advantage of",
    "start": "743220",
    "end": "748320"
  },
  {
    "text": "mistakes misconfigurations sometimes even intended functionality if it hasn't been sufficiently vetted against abuse",
    "start": "748320",
    "end": "756500"
  },
  {
    "text": "the point is if you optimize for the least worst tools you can for as many of your non-differentiator problems then",
    "start": "756779",
    "end": "763079"
  },
  {
    "text": "it'll be easier to maintain and operate software that's safe and resilient",
    "start": "763079",
    "end": "769560"
  },
  {
    "text": "last opportunity we'll discuss today in the realm of critical functions is standardizing raw materials",
    "start": "769560",
    "end": "776519"
  },
  {
    "text": "so we can think of raw materials and software systems as languages libraries and tooling they may not be tangible we",
    "start": "776519",
    "end": "782639"
  },
  {
    "text": "can't touch them but their materials nevertheless we can really think of these materials",
    "start": "782639",
    "end": "787680"
  },
  {
    "text": "as elements that are woven into the software that need to be resilient and safe to ensure the system overall is",
    "start": "787680",
    "end": "793019"
  },
  {
    "text": "resilient so yeah we're going to talk about memory safety which I feel like is the hottest trend on you know the spring summer 2023",
    "start": "793019",
    "end": "800220"
  },
  {
    "text": "software quality runways I feel like every conference is talking about it like even uh what is it the consumer",
    "start": "800220",
    "end": "806579"
  },
  {
    "text": "Bureau I forget the name of it like they've been talking about memory safety everyone is anyone here a big fan of memory safety",
    "start": "806579",
    "end": "814860"
  },
  {
    "text": "no one here is a fan of okay a few people okay well hopefully I'll get you to become evangelist so uh if you aren't",
    "start": "814860",
    "end": "821940"
  },
  {
    "text": "familiar memory safety protects mistakes and memory management and one part of the program from affecting the rest of",
    "start": "821940",
    "end": "827459"
  },
  {
    "text": "the program so it makes it so matters of memory Resource Management are handled by the language and runtime itself frees",
    "start": "827459",
    "end": "833940"
  },
  {
    "text": "up cognitive load if you're a developer I think it's not really a keynote without some hot take so I'm going to",
    "start": "833940",
    "end": "840240"
  },
  {
    "text": "give you some which is that you can actually think of C code like lead it was really convenient for a lot of uses",
    "start": "840240",
    "end": "846720"
  },
  {
    "text": "but it's poisoning us over time especially as more of it accumulates and memory unsafety is actually might be",
    "start": "846720",
    "end": "853560"
  },
  {
    "text": "unpopular in most programming languages so we actually have a lot of opportunities if we want to refactor",
    "start": "853560",
    "end": "858779"
  },
  {
    "text": "when we're writing new code so think go Java Ruby rust c-sharp and",
    "start": "858779",
    "end": "863880"
  },
  {
    "text": "Swift just as a starting point dependencies can also be hazardous raw",
    "start": "863880",
    "end": "869040"
  },
  {
    "text": "materials it's an important tenant is that you own your dependencies which we can acronymize to yoid because I like to",
    "start": "869040",
    "end": "874680"
  },
  {
    "text": "copy Gartner who makes acronyms out of everything so we yoyed therefore we eat",
    "start": "874680",
    "end": "880019"
  },
  {
    "text": "I can remember that right so we need to ensure our dependencies don't constitute some sort of hazardous raw material and",
    "start": "880019",
    "end": "886079"
  },
  {
    "text": "then we eat them out if they do we don't want them in there if they're a hazardous material so think about how many of you were",
    "start": "886079",
    "end": "893100"
  },
  {
    "text": "familiar with the code Cub compromise 2021 okay like one person you all were very",
    "start": "893100",
    "end": "900180"
  },
  {
    "text": "lucky um so this is when attackers modified Coco's bash uploader script and caused a supply chain nightmare a lot of people",
    "start": "900180",
    "end": "906360"
  },
  {
    "text": "had to work overnight in order to make sure that everything was safe so it was especially dad because uh bad",
    "start": "906360",
    "end": "912180"
  },
  {
    "text": "because devs had to add this like horrible bash script into the build pipelines like codecov could have chosen",
    "start": "912180",
    "end": "917579"
  },
  {
    "text": "not to do this and they didn't but also true is that developers could have chosen uh to not use kokov or they could",
    "start": "917579",
    "end": "924240"
  },
  {
    "text": "have actually fully vetted the installation process the design or thinking through the n-word effects of",
    "start": "924240",
    "end": "930000"
  },
  {
    "text": "what might happen when you have to add this into your build pipelines it's like to me you can feel the radioactive heat",
    "start": "930000",
    "end": "935820"
  },
  {
    "text": "from here we don't want it so as a general principle you want to consider those end order effects what",
    "start": "935820",
    "end": "941339"
  },
  {
    "text": "are the kind of like second and third order effects that happen from your raw materials when you're developing",
    "start": "941339",
    "end": "946440"
  },
  {
    "text": "delivery so remember attackers will have to vet these designs for you",
    "start": "946440",
    "end": "952500"
  },
  {
    "text": "um and they're going to surprise you with their findings and they don't want to be surprised in this way so it's a better to adopt that yoyed mindset that",
    "start": "952500",
    "end": "959519"
  },
  {
    "text": "you own your dependencies mindset and vet what you insert into your systems first including your again language",
    "start": "959519",
    "end": "965220"
  },
  {
    "text": "library and tooling choices then of course you want to meet out the ones that are insufficient and find",
    "start": "965220",
    "end": "971220"
  },
  {
    "text": "Superior alternatives finally sensitive data can also be thought of as a hazardous raw material",
    "start": "971220",
    "end": "977959"
  },
  {
    "text": "at least you know when there's a breach of like customers payment data that's generally not advisable and causes",
    "start": "977959",
    "end": "984480"
  },
  {
    "text": "so rather than requiring like a billion hours of security training I have to take it too I don't think anyone likes",
    "start": "984480",
    "end": "990300"
  },
  {
    "text": "that kind of security training instead we can propose breaking apart a system or an application to smaller services",
    "start": "990300",
    "end": "996120"
  },
  {
    "text": "that have isolated access to that sensitive data so the billing service maybe we'll still",
    "start": "996120",
    "end": "1001399"
  },
  {
    "text": "have access to payment data because it has to to perform its function but now the rest of the application all of the",
    "start": "1001399",
    "end": "1007279"
  },
  {
    "text": "other services that make up its functionality those aren't going to have access to that data you can even just",
    "start": "1007279",
    "end": "1012860"
  },
  {
    "text": "Outsource payment handling to a third party that's actually one way of kind of infusing isolation in your system",
    "start": "1012860",
    "end": "1020560"
  },
  {
    "start": "1020000",
    "end": "1528000"
  },
  {
    "text": "now that we understand a few ways to support critical functionality during Devon delivery we can go to our second",
    "start": "1021079",
    "end": "1026178"
  },
  {
    "text": "ingredient so the second ingredient in our resilience potion is understanding the",
    "start": "1026179",
    "end": "1031640"
  },
  {
    "text": "system's safety boundaries so thresholds Beyond which it slips into failure but we can also help expand those boundaries",
    "start": "1031640",
    "end": "1038240"
  },
  {
    "text": "when we're writing code we can expand our system's figurative window of tolerance to adverse",
    "start": "1038240",
    "end": "1043819"
  },
  {
    "text": "conditions so rather than relying on everything being perfect ahead of deployment which",
    "start": "1043819",
    "end": "1049100"
  },
  {
    "text": "is impossible remember nature of reality failure is inevitable we want to be able to cope well with mistakes and failures",
    "start": "1049100",
    "end": "1055100"
  },
  {
    "text": "because fixing them is a swift straightforward repeatable process weaving this kind of sustainability into",
    "start": "1055100",
    "end": "1062539"
  },
  {
    "text": "our build and delivery pipelines helps us expand our system's safety boundaries and gain more grace in the face of",
    "start": "1062539",
    "end": "1068960"
  },
  {
    "text": "adverse scenarios the good news also is a lot of getting security right is just solid engineering",
    "start": "1068960",
    "end": "1075919"
  },
  {
    "text": "they're things that you want for reliability resilience to things other than attacks as well",
    "start": "1075919",
    "end": "1080960"
  },
  {
    "text": "so the security chaos engineering World security is just a subset it's a facet of software quality so security is a",
    "start": "1080960",
    "end": "1088100"
  },
  {
    "text": "facet of software quality a key question that then emerges is given your constraints we all have",
    "start": "1088100",
    "end": "1093980"
  },
  {
    "text": "constraints we have finite brain powered resources and everything else how can you write high quality software that",
    "start": "1093980",
    "end": "1099860"
  },
  {
    "text": "achieves your goals the practices we're going to explore again very briefly for expanding our",
    "start": "1099860",
    "end": "1105320"
  },
  {
    "text": "safety boundaries actually begets higher quality and more resilient and secure software",
    "start": "1105320",
    "end": "1111200"
  },
  {
    "text": "so we can start with anticipating scale and how it relates to safety boundaries when we're building resilient software",
    "start": "1111200",
    "end": "1118520"
  },
  {
    "text": "systems we want to consider how operating conditions might evolve in the future again everything's dependent on",
    "start": "1118520",
    "end": "1124580"
  },
  {
    "text": "context we want to think about where the system's safety boundaries lie today and how they might change in the future",
    "start": "1124580",
    "end": "1131539"
  },
  {
    "text": "despite our best intentions I think we all know as software Engineers we sometimes make architecture or",
    "start": "1131539",
    "end": "1136700"
  },
  {
    "text": "implementation decisions that induce either reliability or scalability bottlenecks",
    "start": "1136700",
    "end": "1142280"
  },
  {
    "text": "I think anticipating skills one of our ways to challenge art this will always be true assumptions I'm going to drop",
    "start": "1142280",
    "end": "1148400"
  },
  {
    "text": "another like super elegant acronym which is twopped assumptions uh so this will",
    "start": "1148400",
    "end": "1153980"
  },
  {
    "text": "always be true these are the things that we assume to be in variants considering e-commerce service right we",
    "start": "1153980",
    "end": "1160940"
  },
  {
    "text": "might think on every incoming request we first need to correlate that request with the user's prior shopping cart which means making a query to this other",
    "start": "1160940",
    "end": "1167600"
  },
  {
    "text": "thing there's this will always be true assumption baked in I don't know anyone catch it which is that this other thing",
    "start": "1167600",
    "end": "1175039"
  },
  {
    "text": "will always be there if we're thoughtful then we have to challenge with okay but what if this other thing isn't here what",
    "start": "1175039",
    "end": "1181220"
  },
  {
    "text": "if it's slow to load or it's unavailable this can refine how we build something",
    "start": "1181220",
    "end": "1187520"
  },
  {
    "text": "when we're building components especially that will run as part of a big distributed systems part of scale is",
    "start": "1187520",
    "end": "1192679"
  },
  {
    "text": "anticipating what operators will need during incidents if it takes an on-call engineer hours to figure out that the",
    "start": "1192679",
    "end": "1199220"
  },
  {
    "text": "reason for Sudden Service slowness is like a sqlite database that nobody knew about it's going to hurt your",
    "start": "1199220",
    "end": "1204320"
  },
  {
    "text": "performance objectives anticipating scale also matters a lot for resilience against attacks because",
    "start": "1204320",
    "end": "1210679"
  },
  {
    "text": "attackers love to challenge or Target or this will always be true assumptions those twopped assumptions these",
    "start": "1210679",
    "end": "1216620"
  },
  {
    "text": "assumptions can manifest in every part of your stack at every level like parsing the string will always be",
    "start": "1216620",
    "end": "1222860"
  },
  {
    "text": "fast or messages that show up in this part of this port will always be post Authentication",
    "start": "1222860",
    "end": "1229280"
  },
  {
    "text": "or an alert will always fire if a malicious executable appears and so on I'm sure a",
    "start": "1229280",
    "end": "1235520"
  },
  {
    "text": "lot of you are now thinking about some of your this will always be true assumptions that you've maybe taken for granted",
    "start": "1235520",
    "end": "1241039"
  },
  {
    "text": "second opportunity we'll discuss regarding safety boundaries is standardizing patterns and tools",
    "start": "1241039",
    "end": "1248900"
  },
  {
    "text": "standardization can be summarized as ensuring work produced is consistent with some sort of preset guideline and",
    "start": "1248900",
    "end": "1255260"
  },
  {
    "text": "standardization helps reduce the opportunity for humans to make mistakes by ensuring a task is performed the same",
    "start": "1255260",
    "end": "1260660"
  },
  {
    "text": "way each time human brains aren't designed to do that at all so in the context of standardized",
    "start": "1260660",
    "end": "1266720"
  },
  {
    "text": "patterns and tools during development delivery we need consistency in what developers use for effective interaction",
    "start": "1266720",
    "end": "1273140"
  },
  {
    "text": "with the ongoing development of the system simplist tactic prioritize patterns and",
    "start": "1273140",
    "end": "1280039"
  },
  {
    "text": "in parts of the system with the most meaningful implications of something goes wrong like where would there be the biggest impact",
    "start": "1280039",
    "end": "1285799"
  },
  {
    "text": "things like authentication or encryption right we can think of these as hazardous methods to go along with our hazardous",
    "start": "1285799",
    "end": "1292280"
  },
  {
    "text": "materials from earlier so how do hazardous methods look how",
    "start": "1292280",
    "end": "1298700"
  },
  {
    "text": "many of you have heard the folk advice don't roll your own crypto okay okay lots of people so actually we",
    "start": "1298700",
    "end": "1305600"
  },
  {
    "text": "can generalize this advice pretty well like you should enroll your own database shouldn't roll your own logging pipelines observability and so forth",
    "start": "1305600",
    "end": "1312260"
  },
  {
    "text": "either and hazardous methods can manifest as injection from an attack perspective",
    "start": "1312260",
    "end": "1317600"
  },
  {
    "text": "like C coli injection SQL injection can be characterized as the result of",
    "start": "1317600",
    "end": "1322700"
  },
  {
    "text": "rolling your own database query Builder it's an interesting way to think about it",
    "start": "1322700",
    "end": "1327740"
  },
  {
    "text": "the favorite warning box in my book is this like little scorpion boy he's all Angry saying don't DIY middleware",
    "start": "1327740",
    "end": "1334940"
  },
  {
    "text": "and you might be tempted to roll your own again authentication or cross-site request forgery xsrf protection but",
    "start": "1334940",
    "end": "1341480"
  },
  {
    "text": "outside of edge cases it makes far more sense to standardize on some sort of middleware for those cases that way",
    "start": "1341480",
    "end": "1347419"
  },
  {
    "text": "you're leveraging the provider's expertise in this exotic area it's kind of back to that choose boring Principle",
    "start": "1347419",
    "end": "1352700"
  },
  {
    "text": "as well we want to choose libraries that fit best with our architectural choices",
    "start": "1352700",
    "end": "1359059"
  },
  {
    "text": "and if it's going to be difficult for your team to like build out these standardized patterns and tools and so forth you don't have all the resources",
    "start": "1359059",
    "end": "1365059"
  },
  {
    "text": "you can also just identify standard libraries or standard providers that you can then provide as a list in some sort",
    "start": "1365059",
    "end": "1371419"
  },
  {
    "text": "of accessible documentation that way teams know that there are these well-vetted libraries and providers that",
    "start": "1371419",
    "end": "1376700"
  },
  {
    "text": "they should consult and choose from when they're trying to implement specific functionality your libraries also means fewer",
    "start": "1376700",
    "end": "1383000"
  },
  {
    "text": "components to update which is nice in general this brings us to the necessity of paved",
    "start": "1383000",
    "end": "1388340"
  },
  {
    "text": "roads so paved roads common in platform engineering Netflix has talked about them a lot not so common in security or",
    "start": "1388340",
    "end": "1395240"
  },
  {
    "text": "resilience but they should be so paved roads are well integrated supported solutions to common problems that allow",
    "start": "1395240",
    "end": "1401419"
  },
  {
    "text": "humans to focus on their unique value creation for a lot of you all your unique value creation is creating",
    "start": "1401419",
    "end": "1407000"
  },
  {
    "text": "differentiated business Logic for an application through your code making it easy for you all for",
    "start": "1407000",
    "end": "1413179"
  },
  {
    "text": "developers to add authentication to your product that's a paved road so is making",
    "start": "1413179",
    "end": "1418640"
  },
  {
    "text": "it easy for developers to add blogging or DDOS prevention or security header validation all of that makes for a great",
    "start": "1418640",
    "end": "1425059"
  },
  {
    "text": "paved Road",
    "start": "1425059",
    "end": "1427779"
  },
  {
    "text": "final opportunity we'll cover today for understanding safety boundaries at least in part is understanding our",
    "start": "1431539",
    "end": "1436700"
  },
  {
    "text": "dependencies so dependency analysis especially in the context of uncovering bugs including",
    "start": "1436700",
    "end": "1442820"
  },
  {
    "text": "security vulnerabilities helps us understand the faults and failures in our tools that way we can fix or",
    "start": "1442820",
    "end": "1449120"
  },
  {
    "text": "mitigate them and stay within the system's safety boundaries or even consider better tools that help expand them",
    "start": "1449120",
    "end": "1454820"
  },
  {
    "text": "we can treat this practice as a kind of hedge against potential stressors and surprises and allows us to invest our",
    "start": "1454820",
    "end": "1461539"
  },
  {
    "text": "effort elsewhere and expand our safety boundaries because this is a keynote it means I",
    "start": "1461539",
    "end": "1467539"
  },
  {
    "text": "already have a soapbox I have a captive audience so I'm going to dispel some infosec uh BS that they try to inflict",
    "start": "1467539",
    "end": "1474740"
  },
  {
    "text": "on you as developers so when should you care about a vulnerability let's say a new vault is being hyped on social media",
    "start": "1474740",
    "end": "1480559"
  },
  {
    "text": "do you drop everything and fix it and is it the most important thing in the world probably not honestly so whether you",
    "start": "1480559",
    "end": "1486679"
  },
  {
    "text": "care should care about a vulnerability depends on two factors just two first how easy is it to scale and",
    "start": "1486679",
    "end": "1493460"
  },
  {
    "text": "automate the attack for a lot of vulnerability researchers no matter what they're hyping it is not easy to scale the attack and it's not",
    "start": "1493460",
    "end": "1500059"
  },
  {
    "text": "easy to automate second thing how many steps is the attack from the attacker's",
    "start": "1500059",
    "end": "1505520"
  },
  {
    "text": "goal outcome like if the attacker has to like ride dolphins to jump through Rings zero and like Traverse the memory",
    "start": "1505520",
    "end": "1512240"
  },
  {
    "text": "Landscapes of Mordor that's not easy there are many many steps away from their goal so take away for you thinking about",
    "start": "1512240",
    "end": "1519740"
  },
  {
    "text": "attacks is that attackers rely on their ability to take advantage of interactions and interconnections in",
    "start": "1519740",
    "end": "1526039"
  },
  {
    "text": "your software that brings us to the third ingredient which is observing system interactions",
    "start": "1526039",
    "end": "1531200"
  },
  {
    "start": "1528000",
    "end": "2006000"
  },
  {
    "text": "across space-time when we're developing and delivering systems we can support this observation",
    "start": "1531200",
    "end": "1536900"
  },
  {
    "text": "and also for more accurate mental models as our systems behaviors unfold over time and across the topology of the",
    "start": "1536900",
    "end": "1543440"
  },
  {
    "text": "system looking at a single component at a single point in time tells us very very",
    "start": "1543440",
    "end": "1548600"
  },
  {
    "text": "little from a resilience perspective we can also make interactions more",
    "start": "1548600",
    "end": "1554000"
  },
  {
    "text": "linear that curtails the number of baffling interactions those surprises that happen there are practices and",
    "start": "1554000",
    "end": "1560000"
  },
  {
    "text": "patterns we can adopt or avoid that help us make those interactions more linear I discussed linearity at length in the",
    "start": "1560000",
    "end": "1566120"
  },
  {
    "text": "book but let's dig into a very small selection of opportunities today so we can start with testing and how to",
    "start": "1566120",
    "end": "1571760"
  },
  {
    "text": "be thoughtful about it so uh not sure if anyone is already",
    "start": "1571760",
    "end": "1577279"
  },
  {
    "text": "familiar with me I ask a lot of spicy questions I can't help myself so one today if you want to sound smart at like",
    "start": "1577279",
    "end": "1583279"
  },
  {
    "text": "a cocktail party you can borrow this question it's like as a discipline are we testing for quality or resilience",
    "start": "1583279",
    "end": "1588559"
  },
  {
    "text": "over time are we testing just to say that we did testing are we just checking a box the latter is like not based at all as",
    "start": "1588559",
    "end": "1595880"
  },
  {
    "text": "the kids say but I think it happens a lot more often than we'd like to admit the tests we write are an artifact of",
    "start": "1595880",
    "end": "1603020"
  },
  {
    "text": "our mental models at a single point in time but because reality evolves including the systems and workloads",
    "start": "1603020",
    "end": "1608659"
  },
  {
    "text": "within it tests obsolesce so the insights we can learn from chaos experiments which we'll talk about next",
    "start": "1608659",
    "end": "1614960"
  },
  {
    "text": "as well as real incidents and even the system's healthy operation those have to be fed back into our testing Suites to",
    "start": "1614960",
    "end": "1621860"
  },
  {
    "text": "ensure they're reflective of production reality we need to prioritize tests that help us refine our mental models of our systems",
    "start": "1621860",
    "end": "1628580"
  },
  {
    "text": "especially as their context evolves how many of you have integration tests",
    "start": "1628580",
    "end": "1634279"
  },
  {
    "text": "in your day job okay that's honestly that's better than I was expecting sometimes it's pretty",
    "start": "1634279",
    "end": "1640279"
  },
  {
    "text": "low I think integration tests are underrated I don't know about you all integration tests obviously observe how",
    "start": "1640279",
    "end": "1646279"
  },
  {
    "text": "different components in the system work together usually with the goal of uncovering those kind of baffling interactions right verifying that",
    "start": "1646279",
    "end": "1653000"
  },
  {
    "text": "they're working and interacting as expected this actually makes integration tests again a valuable first pass at",
    "start": "1653000",
    "end": "1659059"
  },
  {
    "text": "uncovering those surprising interactions attach me vulnerability guessing not",
    "start": "1659059",
    "end": "1664760"
  },
  {
    "text": "many of you familiar with that which that was a cloud isolation vulnerability and oracle's Cloud infrastructure that's",
    "start": "1664760",
    "end": "1670220"
  },
  {
    "text": "an example of what we hope to uncover with an integration test and also an example of how hazardous it is it",
    "start": "1670220",
    "end": "1675380"
  },
  {
    "text": "hazardous it is to only focus on Happy paths when we're testing and developing in general",
    "start": "1675380",
    "end": "1680720"
  },
  {
    "text": "so the bug allowed users to attach disk volumes to which they lacked permissions onto virtual machines that they control",
    "start": "1680720",
    "end": "1686659"
  },
  {
    "text": "in order to access another tenant's data so if the attacker tried this they could initiate a compute instance attach the",
    "start": "1686659",
    "end": "1693260"
  },
  {
    "text": "target volume to the compute instance under their control and gain read write privileges over the target volume so",
    "start": "1693260",
    "end": "1698840"
  },
  {
    "text": "then they could steal Secrets expand access or potentially even gain control over the target environment",
    "start": "1698840",
    "end": "1704539"
  },
  {
    "text": "so aside from this attack scenario this is just like something we don't want to happen in our multi-tenant environments",
    "start": "1704539",
    "end": "1709820"
  },
  {
    "text": "for reliability reasons too to address this we could actually develop a few different integration",
    "start": "1709820",
    "end": "1715640"
  },
  {
    "text": "tests describing a variety of activities in a multi-tenant environment like attaching a disk to a VM in another",
    "start": "1715640",
    "end": "1720980"
  },
  {
    "text": "account multiple tenants performing the same action simultaneously on a database or spikes in resource consumption in one",
    "start": "1720980",
    "end": "1728360"
  },
  {
    "text": "tenant as a general principle we want to conduct integration tests that allow us to observe the system interactions",
    "start": "1728360",
    "end": "1734720"
  },
  {
    "text": "across space-time this is far more useful to Foster resilience than testing individual properties of individual",
    "start": "1734720",
    "end": "1741200"
  },
  {
    "text": "components like a unit test I am totally a hater of unit tests I think they're very much that like checkbox testing",
    "start": "1741200",
    "end": "1746840"
  },
  {
    "text": "because a single component a single input in a single component that's",
    "start": "1746840",
    "end": "1752120"
  },
  {
    "text": "simply is just insufficient for reproducing system failures and tests especially catastrophic failures",
    "start": "1752120",
    "end": "1758720"
  },
  {
    "text": "so how can we test even better with chaos experimentation how many of you familiar with this yes experiments okay",
    "start": "1758720",
    "end": "1765200"
  },
  {
    "text": "a decent amount that's good so our goal is done covering again those baffling interactions all those",
    "start": "1765200",
    "end": "1770360"
  },
  {
    "text": "surprises that happen in our systems by revealing the way the world actually works and how it differs from how we",
    "start": "1770360",
    "end": "1775700"
  },
  {
    "text": "expect it to exist we can do so through chaos experiments which are just resilient stress tests",
    "start": "1775700",
    "end": "1781399"
  },
  {
    "text": "for software systems so chaos experiments stimulate adverse scenarios to see how a socio-technical system",
    "start": "1781399",
    "end": "1786799"
  },
  {
    "text": "behaves end-to-end in response to those scenarios and those adverse conditions so it can be technical it can be",
    "start": "1786799",
    "end": "1792679"
  },
  {
    "text": "something like the adverse scenario of machines dying or it can be Associated like an incident run book not being",
    "start": "1792679",
    "end": "1797840"
  },
  {
    "text": "available it's going to be again good Engineers designing for evolving contexts good",
    "start": "1797840",
    "end": "1803840"
  },
  {
    "text": "Engineers designing for change we need to continuously learn about that system context",
    "start": "1803840",
    "end": "1809059"
  },
  {
    "text": "and adopting that experimental capability allows us to do so it's actually a really important way we can keep up with our ever-evolving systems",
    "start": "1809059",
    "end": "1817179"
  },
  {
    "text": "so as an example to make this a bit more concrete we could start with a user story like ensuring authentication is",
    "start": "1817179",
    "end": "1823340"
  },
  {
    "text": "consistent as hard for my engineering teams but for our critical Services fail to authenticate incoming traffic we",
    "start": "1823340",
    "end": "1829279"
  },
  {
    "text": "might experience service disruption or Worse downtime and violate customer Trust maybe there is even an incident",
    "start": "1829279",
    "end": "1835399"
  },
  {
    "text": "where an important service failed to authenticate incoming traffic or requests properly and then Leach some",
    "start": "1835399",
    "end": "1841100"
  },
  {
    "text": "sort of unauthenticated data that can make it even more imperative to solve this kind of problem",
    "start": "1841100",
    "end": "1847100"
  },
  {
    "text": "so we can create an experiment that shows us which Services automatically require authentication versus the",
    "start": "1847100",
    "end": "1852740"
  },
  {
    "text": "services we think require it again reality versus our mental bottle by conducting an experiment we can expose",
    "start": "1852740",
    "end": "1858919"
  },
  {
    "text": "all those inaccuracies that are lurking in our mental models we can formulate a hypothesis of what",
    "start": "1858919",
    "end": "1865039"
  },
  {
    "text": "could and should happen during the experiment so in our example it's in the event of an unauthenticated traffic we",
    "start": "1865039",
    "end": "1870620"
  },
  {
    "text": "expect our service endpoints will respond with an authentication challenge they don't that we alert on it",
    "start": "1870620",
    "end": "1876080"
  },
  {
    "text": "so we'll collect all this evidence of how activity in our authentication endpoints manifest in our logging and",
    "start": "1876080",
    "end": "1881600"
  },
  {
    "text": "logging and monitoring Pipelines so the big question we want to ask is is our organization's middleware present in",
    "start": "1881600",
    "end": "1888320"
  },
  {
    "text": "everything we deploy if not we want to see what happens maybe sometimes the middleware is misconfigured",
    "start": "1888320",
    "end": "1894200"
  },
  {
    "text": "a chaos experiment really isn't about this like true or false answer again we're trying to generate evidence of",
    "start": "1894200",
    "end": "1899840"
  },
  {
    "text": "behavior across the system to help us learn and also to inform change",
    "start": "1899840",
    "end": "1904880"
  },
  {
    "text": "let's say our hypothesis was proven incorrect not all services are validating Authentication and also we're not generating alerts",
    "start": "1904880",
    "end": "1911779"
  },
  {
    "text": "about it either that's a problem maybe it shows up in the logs but the associate part of the system maybe you all have been there so inundated with",
    "start": "1911779",
    "end": "1918440"
  },
  {
    "text": "alerts like they didn't realize it again could inform a few design changes so we could have an opportunity to",
    "start": "1918440",
    "end": "1925940"
  },
  {
    "text": "redesign whatever the middleware is to make it a little easier to use or we could update our observability pipelines",
    "start": "1925940",
    "end": "1931940"
  },
  {
    "text": "if the data isn't driving recovery we also want to analyze the data with regards to the hypothesis again do all",
    "start": "1931940",
    "end": "1938419"
  },
  {
    "text": "endpoints validate authentication properly for those that don't what information are we collecting about that",
    "start": "1938419",
    "end": "1943820"
  },
  {
    "text": "traffic were there other failures associated with the scenario did we receive alerts elsewhere can we",
    "start": "1943820",
    "end": "1948919"
  },
  {
    "text": "distinguish unauthenticated traffic from properly authenticated traffic in our observability tools did anyone report",
    "start": "1948919",
    "end": "1954740"
  },
  {
    "text": "any support issues like through customer support so there are a bunch of chaos",
    "start": "1954740",
    "end": "1959840"
  },
  {
    "text": "experiments we can also consider I like to think I have almost like Pinterest Sports of chaos experiments in the book",
    "start": "1959840",
    "end": "1965419"
  },
  {
    "text": "chapter 8 pages and pages but we can think about things like disabling non-critical roles and functions in an",
    "start": "1965419",
    "end": "1971600"
  },
  {
    "text": "API the same like resource limits generating large loads on specific availability zones or data centers",
    "start": "1971600",
    "end": "1977960"
  },
  {
    "text": "turning off API authorization injecting Canary credentials or Keys into code scripts and fogs injecting",
    "start": "1977960",
    "end": "1984740"
  },
  {
    "text": "inspired oauth tokens into builds overriding build logs deleting log files",
    "start": "1984740",
    "end": "1990399"
  },
  {
    "text": "disabling access to DNS or exfiltrating large volumes of data like data egress",
    "start": "1990399",
    "end": "1995480"
  },
  {
    "text": "creating and scheduling new jobs via the automation service script console then my favorite time traveling on a host",
    "start": "1995480",
    "end": "2002080"
  },
  {
    "text": "changing the host time forwards or backwards that one's a lot of fun",
    "start": "2002080",
    "end": "2007299"
  },
  {
    "start": "2006000",
    "end": "2322000"
  },
  {
    "text": "now chaos experimentation facilitates learning and that's precisely the fourth ingredient in our resilience potion",
    "start": "2007299",
    "end": "2013299"
  },
  {
    "text": "feedback loops and learning when we remember system behavior in response to stressors and surprises we",
    "start": "2013299",
    "end": "2019600"
  },
  {
    "text": "can learn from it and use it to inform changes to improve system resilience to those events in the future",
    "start": "2019600",
    "end": "2025600"
  },
  {
    "text": "we need ways to summon and preserve and learn from these memories to create a feedback loop when we're developing and",
    "start": "2025600",
    "end": "2030940"
  },
  {
    "text": "delivering so the main opportunity we're going to talk about today is distributed tracing",
    "start": "2030940",
    "end": "2038080"
  },
  {
    "text": "so it's really difficult as humans to look at the little breadcrumbs left by the system when they aren't brought",
    "start": "2038080",
    "end": "2043240"
  },
  {
    "text": "together in a narrative humans very much think in terms of stories so whether you're triaging in incidents",
    "start": "2043240",
    "end": "2049658"
  },
  {
    "text": "or refining your mental model to inform improvements observing interaction over time is essential you can't form a",
    "start": "2049659",
    "end": "2055658"
  },
  {
    "text": "feedback loop without being able to see what's going on like it's just a loop it's not a feedback loop right",
    "start": "2055659",
    "end": "2061419"
  },
  {
    "text": "so we should plan for and build this feedback into our services through tracing and logging",
    "start": "2061419",
    "end": "2067300"
  },
  {
    "text": "neither one though is something you can bolt on after you've delivered your software you can't apply it",
    "start": "2067300",
    "end": "2072520"
  },
  {
    "text": "automatically to all the services you operate this needs to be defined when you're writing the code before it's delivered",
    "start": "2072520",
    "end": "2078580"
  },
  {
    "text": "into production so how many of y'all are familiar with distributed tracing have interacted with",
    "start": "2078580",
    "end": "2083618"
  },
  {
    "text": "it okay quite a few of you that's good um so for those of you unfamiliar",
    "start": "2083619",
    "end": "2088780"
  },
  {
    "text": "excited to teach you so distributed tracing is a very specific slice of observability and it's a really powerful",
    "start": "2088780",
    "end": "2094480"
  },
  {
    "text": "way to observe the flow of data as it moves through a distributed system so distributed tracing really lets you",
    "start": "2094480",
    "end": "2100119"
  },
  {
    "text": "like Stitch individual operations back to the original event we can assign a trace ID at the point of traffic Ingress",
    "start": "2100119",
    "end": "2106359"
  },
  {
    "text": "that Trace ID follows the event as it flows through the system",
    "start": "2106359",
    "end": "2111420"
  },
  {
    "text": "so as an example let's consider a case where an attacker is exfiltrating data from a Hospital's patient portal we",
    "start": "2111520",
    "end": "2117280"
  },
  {
    "text": "often don't think about distributed tracing in the context of security but it's really useful here so we can see data is being exfiltrated",
    "start": "2117280",
    "end": "2123700"
  },
  {
    "text": "but how is it happening so let's say there's a front-end service that's responsible for displaying the",
    "start": "2123700",
    "end": "2128800"
  },
  {
    "text": "dashboard the patient sees when they log in probably you all have all logged into your Hospital's uh patient portal",
    "start": "2128800",
    "end": "2134260"
  },
  {
    "text": "sometimes they're a little Jank but this patient portal servers service needs to request data from Services maintained by",
    "start": "2134260",
    "end": "2140020"
  },
  {
    "text": "other teams like the token service to log in the lab service to display lab reports maybe also this like schedule",
    "start": "2140020",
    "end": "2146440"
  },
  {
    "text": "service to play display display upcoming appointments right so the front end service makes a single",
    "start": "2146440",
    "end": "2151540"
  },
  {
    "text": "request to the patient portal service the patient portal service makes their quest to all the other services",
    "start": "2151540",
    "end": "2156940"
  },
  {
    "text": "but maybe the lab service is mixed between in-house lab reports and some sort of third-party lab reports or",
    "start": "2156940",
    "end": "2162339"
  },
  {
    "text": "partnered outsourced lab work so the in-house lab service can maybe read from the internal database and properly check",
    "start": "2162339",
    "end": "2168579"
  },
  {
    "text": "user IDs but to get the partner lab reports you have to use this integration service because you can see like we're",
    "start": "2168579",
    "end": "2174099"
  },
  {
    "text": "already three Services Deep even if in this simple example so let's say the team associated with",
    "start": "2174099",
    "end": "2180160"
  },
  {
    "text": "the partner lab service discovered they made a mistake they accidentally introduced a vulner now an attacker's exfiltrating data",
    "start": "2180160",
    "end": "2186280"
  },
  {
    "text": "they might be able to say what data is being sent out they won't be able to trace it back to that original event they need to somehow follow it through",
    "start": "2186280",
    "end": "2193240"
  },
  {
    "text": "all of the requests and that's going to be a nightmare because it's unclear which operations or events might even",
    "start": "2193240",
    "end": "2198400"
  },
  {
    "text": "make the requests to the partner lab service let alone like which ones are from a legitimate user versus an",
    "start": "2198400",
    "end": "2203680"
  },
  {
    "text": "attacker all of that traffic that's associated that's coming to the services associated",
    "start": "2203680",
    "end": "2209020"
  },
  {
    "text": "with internal teams from peer teams but that traffic is associated with some sort of user operation that's external",
    "start": "2209020",
    "end": "2215320"
  },
  {
    "text": "to the company like again a patient clicking on the dashboard distributed tracing though can dissipate",
    "start": "2215320",
    "end": "2220780"
  },
  {
    "text": "this nightmare because it assigns the trace ID at the point of traffic in grass and that Trace ID follows the",
    "start": "2220780",
    "end": "2226000"
  },
  {
    "text": "event as it flows through the system that way the partner Labs results are because you just look at where the trace",
    "start": "2226000",
    "end": "2231160"
  },
  {
    "text": "ID appears in their logs and they can coordinate across the other services to determine where that event route was",
    "start": "2231160",
    "end": "2237339"
  },
  {
    "text": "throughout the system so again distributed tracing not only helps us observe system interaction",
    "start": "2237339",
    "end": "2243460"
  },
  {
    "text": "interactions across the space-time the third ingredient but it helps us refine the system design and design new",
    "start": "2243460",
    "end": "2248560"
  },
  {
    "text": "versions gives us that really elegant feedback loop the Enterprise scale you just don't have complete visibility into",
    "start": "2248560",
    "end": "2254859"
  },
  {
    "text": "how all these other teams are using your service or accessing your service their incidents can easily become your",
    "start": "2254859",
    "end": "2260980"
  },
  {
    "text": "incidents so when you're finding the design of your system you want to understand the",
    "start": "2260980",
    "end": "2266020"
  },
  {
    "text": "impact it has on those tree of consumers the more partners and consumers you have in the chains the more difficult it is",
    "start": "2266020",
    "end": "2271780"
  },
  {
    "text": "to understand the chain and this is why our software systems are messy they're really complex so you have a mental model of how events",
    "start": "2271780",
    "end": "2278859"
  },
  {
    "text": "flow through the system and how your specific part of the system interacts with all the other parts how accurate is your mental model",
    "start": "2278859",
    "end": "2286240"
  },
  {
    "text": "distributed tracing helps you refine that mental model by learning about real interactions in your system and between",
    "start": "2286240",
    "end": "2291760"
  },
  {
    "text": "its services so we can use distributed tracing to plan for capacity to fix bugs inform consumers of downtime or API",
    "start": "2291760",
    "end": "2298599"
  },
  {
    "text": "changes and a lot more distributed tracing though again I want to emphasize in essence is making the",
    "start": "2298599",
    "end": "2304839"
  },
  {
    "text": "statement that you want to be able to correlate data across systems that you want that Trace ID",
    "start": "2304839",
    "end": "2310240"
  },
  {
    "text": "but it's during Dev that you have to make the decision to integrate this right you can't bolt it on afterwards so",
    "start": "2310240",
    "end": "2316000"
  },
  {
    "text": "in a way it's kind of ensuring you have the flexibility for Recovery in the future that brings us to our final ingredient",
    "start": "2316000",
    "end": "2322780"
  },
  {
    "start": "2322000",
    "end": "3037000"
  },
  {
    "text": "which again squishy marshmallow which is flexibility and willingness to change",
    "start": "2322780",
    "end": "2328060"
  },
  {
    "text": "for last ingredient we want to remain flexible in the face of failures and evolving conditions that would otherwise",
    "start": "2328060",
    "end": "2333760"
  },
  {
    "text": "disrupt our success so Martin klepman if you haven't read his book highly recommend it he puts it",
    "start": "2333760",
    "end": "2339040"
  },
  {
    "text": "best in saying agility and product and process means you also need the freedom to change your mind about the structure",
    "start": "2339040",
    "end": "2344740"
  },
  {
    "text": "of your code and your data that fits perfectly with this last ingredient now nature is a very patient architect",
    "start": "2344740",
    "end": "2351579"
  },
  {
    "text": "it allows it allows Evolution to bloom over generational cycles and it means we",
    "start": "2351579",
    "end": "2357040"
  },
  {
    "text": "need to be patient too we need to have carefully architected Evolution as well",
    "start": "2357040",
    "end": "2362200"
  },
  {
    "text": "we need strategies that encourage this Evolution and also interweave this willingness to change by Design we need",
    "start": "2362200",
    "end": "2368440"
  },
  {
    "text": "to promote the speed on which that adaptability that adaptive capacity we talked about at the beginning we have to",
    "start": "2368440",
    "end": "2373839"
  },
  {
    "text": "promote speed because it depends on speed you can start with preserving possibilities for the refactor",
    "start": "2373839",
    "end": "2381880"
  },
  {
    "text": "I at least think and I've done this myself when writing code like we usually swept up in the electrifying anticipation of the release we're not",
    "start": "2381880",
    "end": "2388119"
  },
  {
    "text": "peering out to the hazy Horizon of like oh this is going to need to be refactored right it's much like movie Crews aren't contemplating the original",
    "start": "2388119",
    "end": "2394660"
  },
  {
    "text": "when or contemplating that we make when they're filming the original right it's kind of like demoralizing to think about",
    "start": "2394660",
    "end": "2401020"
  },
  {
    "text": "except our software unlike in movies it's not a one and done thing we don't have like our big like film Premiere and",
    "start": "2401020",
    "end": "2406900"
  },
  {
    "text": "then like right off into the sunset we really need to anticipate that the code will change and we have to make",
    "start": "2406900",
    "end": "2412300"
  },
  {
    "text": "decisions that support the flexibility to do so in the future okay how does this look in practice so",
    "start": "2412300",
    "end": "2418359"
  },
  {
    "text": "at a high level we need an easy path to safely restructure abstractions data models and approaches to our problem",
    "start": "2418359",
    "end": "2424780"
  },
  {
    "text": "domain and type systems of all things can actually help us the traditional view of",
    "start": "2424780",
    "end": "2430420"
  },
  {
    "text": "type systems is that they're a way to resist change but type systems can actually facilitate change by showing",
    "start": "2430420",
    "end": "2435940"
  },
  {
    "text": "you what parts of the system are affected by the ripples of your changes this is very much like a second or third",
    "start": "2435940",
    "end": "2441160"
  },
  {
    "text": "order effective type systems that's often overlooked so type declarations are a tool we can",
    "start": "2441160",
    "end": "2447400"
  },
  {
    "text": "wield to preserve possibilities though I certainly acknowledge the subject is content contentious so how many of",
    "start": "2447400",
    "end": "2454180"
  },
  {
    "text": "you are familiar with the nerd fight in type systems land oh someone's got two hands up they know",
    "start": "2454180",
    "end": "2461260"
  },
  {
    "text": "okay so I'm not gonna go into the nerdfight um entirely um but if you're uninitiated uh you can",
    "start": "2461260",
    "end": "2467740"
  },
  {
    "text": "go check out probably through some very salty email lists but you might be wondering what type declarations and",
    "start": "2467740",
    "end": "2472839"
  },
  {
    "text": "type systems are at all it's a fair question I'm not going to go into the rabbit hole today I'm just going to give you the",
    "start": "2472839",
    "end": "2478180"
  },
  {
    "text": "tldr to understand how it can help change so type systems are meant to prevent the occurrence of execution errors during",
    "start": "2478180",
    "end": "2484300"
  },
  {
    "text": "the running of a program type it as a set of requirements to clearing what operations can be",
    "start": "2484300",
    "end": "2489579"
  },
  {
    "text": "performed on values that are deemed to be to conform to the type so types can be concrete they can describe a",
    "start": "2489579",
    "end": "2495760"
  },
  {
    "text": "particular representation of values that are permitted or they can be abstract which describes a set of behaviors that",
    "start": "2495760",
    "end": "2502119"
  },
  {
    "text": "can be performed on them with no restriction or representation static typing can make it easier to",
    "start": "2502119",
    "end": "2508060"
  },
  {
    "text": "refactor software since type errors can guide the migration the more we can encode into the system",
    "start": "2508060",
    "end": "2513780"
  },
  {
    "text": "into the type system to help the tools assist us in building safe and correct systems the easier we can actually",
    "start": "2513780",
    "end": "2520000"
  },
  {
    "text": "refactor and change our code for instance if we pass around like n64s",
    "start": "2520000",
    "end": "2525160"
  },
  {
    "text": "everywhere to represent a timestamp we could just call them time stamps right that's a lot clearer that way we avoid",
    "start": "2525160",
    "end": "2532180"
  },
  {
    "text": "accidentally comparing them to or mistaking them to like a loop index or for a day of the month",
    "start": "2532180",
    "end": "2537700"
  },
  {
    "text": "but in general the more clarity we can crystallize around the system's functions whatever that first ingredients on critical functions we can",
    "start": "2537700",
    "end": "2544540"
  },
  {
    "text": "crystallize that down to the individual components the better ability to adapt the system is necessary",
    "start": "2544540",
    "end": "2550480"
  },
  {
    "text": "so refactoring code to add useful type declarations can ensure our mental models developers mental models of our",
    "start": "2550480",
    "end": "2556480"
  },
  {
    "text": "code are more aligned to reality second opportunity we'll discuss for",
    "start": "2556480",
    "end": "2562200"
  },
  {
    "text": "nurturing flexibility and willingness to change is modularity I have another hot take for Gippy",
    "start": "2562200",
    "end": "2569520"
  },
  {
    "text": "software Engineers fundamentally misunderstand modularity with respect to software quality and resilience",
    "start": "2569520",
    "end": "2575740"
  },
  {
    "text": "I think we're not thinking about modularity in a sufficiently complete fashion there's a tendency to mistake the",
    "start": "2575740",
    "end": "2581319"
  },
  {
    "text": "architectural boundaries of your system for physical boundaries so you have two Services where one sends",
    "start": "2581319",
    "end": "2586839"
  },
  {
    "text": "data to the other the naive way to look at that is say like okay the service that's sending the data can be down it",
    "start": "2586839",
    "end": "2592060"
  },
  {
    "text": "can be unavailable that second service isn't going to be affected that's not true because one service can flood the",
    "start": "2592060",
    "end": "2598180"
  },
  {
    "text": "other service with data there are actually so many interactions that can subvert that boundary in any sort of",
    "start": "2598180",
    "end": "2603940"
  },
  {
    "text": "boundary so what's the right way to think about modularity so according to yes the U.S",
    "start": "2603940",
    "end": "2609579"
  },
  {
    "text": "national Park service modularity and complex systems allow structurally or functionally distinct parts to retain",
    "start": "2609579",
    "end": "2615520"
  },
  {
    "text": "autonomy during a period of stress and allows for easier recovery from loss I",
    "start": "2615520",
    "end": "2620680"
  },
  {
    "text": "know it's the park system but this is actually a pretty fabulous definition of what we want to achieve in our software",
    "start": "2620680",
    "end": "2626740"
  },
  {
    "text": "so modularity is a system property reflecting the degree to which system components which is usually densely",
    "start": "2626740",
    "end": "2631900"
  },
  {
    "text": "connected in the network can be decoupled into separate clusters which are sometimes referred to as communities",
    "start": "2631900",
    "end": "2638740"
  },
  {
    "text": "we may only think of modules in terms of software but humans have actually intuitively grasped how useful",
    "start": "2638740",
    "end": "2644140"
  },
  {
    "text": "modularity is for socio-technical systems resilience for literally thousands of years so just one example",
    "start": "2644140",
    "end": "2649780"
  },
  {
    "text": "an ancient Palestine modular Stone Terraces grew olive trees grapevines and",
    "start": "2649780",
    "end": "2654819"
  },
  {
    "text": "other produce it's a very natural part of like how we operate in the world during a disturbance a modular unit or",
    "start": "2654819",
    "end": "2661599"
  },
  {
    "text": "feature can persist or function independently of all of the rest of the modular features and units so it really",
    "start": "2661599",
    "end": "2667420"
  },
  {
    "text": "Crawford's looser coupling between modules it grants more Independence between them which quells the contagion",
    "start": "2667420",
    "end": "2673480"
  },
  {
    "text": "effect brief example John Muir historic site there are multiple blocks of",
    "start": "2673480",
    "end": "2678640"
  },
  {
    "text": "multi-species multi-variety of trees that Foster resilience to frost this is a very clever architecture it's very",
    "start": "2678640",
    "end": "2684640"
  },
  {
    "text": "clever design ensures that if Frost damages some of the trees there can still be some fruit yield like there's",
    "start": "2684640",
    "end": "2691720"
  },
  {
    "text": "not going to be a total loss so resilience actually doesn't come at the expense of efficiency it enhances it",
    "start": "2691720",
    "end": "2698079"
  },
  {
    "text": "so whether we're talking about cultural landscapes or software landscape when there's low modularity failure Cascades",
    "start": "2698079",
    "end": "2703300"
  },
  {
    "text": "will pervade low modularity enables those contagion effects where a stressor is surprise in one component can lead to",
    "start": "2703300",
    "end": "2710140"
  },
  {
    "text": "failure in most or all of the system so we often see performance contagion whereas stalling service can Cascade",
    "start": "2710140",
    "end": "2716319"
  },
  {
    "text": "performance problems onto other components in the system but security instances are also worse when there's",
    "start": "2716319",
    "end": "2721720"
  },
  {
    "text": "low modularity like ransomware relies on low modularity attackers want minimal boundaries",
    "start": "2721720",
    "end": "2727780"
  },
  {
    "text": "between things they would really love to be able to access one component in the system and gain access to all of the",
    "start": "2727780",
    "end": "2733180"
  },
  {
    "text": "things that's like a dream for them so a system with high modularity however",
    "start": "2733180",
    "end": "2738579"
  },
  {
    "text": "can buffer or contain those stressors and surprises so they don't spread from one component to others this idea of",
    "start": "2738579",
    "end": "2744400"
  },
  {
    "text": "containment is really the key to modularity so modules allow for basic encapsulation",
    "start": "2744400",
    "end": "2749920"
  },
  {
    "text": "and isolation of concerns they create a local boundary upon which we can introduce this isolation",
    "start": "2749920",
    "end": "2756819"
  },
  {
    "text": "so we're going into a Little Love Letter to isolation briefly so isolation is a very core property that helps us sustain",
    "start": "2756819",
    "end": "2763000"
  },
  {
    "text": "resilience in our software it's an important way we can be good Engineers designing for change",
    "start": "2763000",
    "end": "2769359"
  },
  {
    "text": "it's also a really great example frankly of how lucky we are to work with software systems like we can isolate",
    "start": "2769359",
    "end": "2774400"
  },
  {
    "text": "failure to handle unexpected interactions most other complex systems domains can't like you can't introduce",
    "start": "2774400",
    "end": "2780280"
  },
  {
    "text": "physical isolation in like an airplane nuclear reactor or petrochemical plant is just not possible so really we should",
    "start": "2780280",
    "end": "2786579"
  },
  {
    "text": "leverage this blessing to its greatest effect isolation doesn't require like super Elite Feats of engineering I'm not",
    "start": "2786579",
    "end": "2793119"
  },
  {
    "text": "expecting you to be like Wizards right sandboxing is actually pretty well established at this point I would argue",
    "start": "2793119",
    "end": "2799300"
  },
  {
    "text": "it's an example of boring technology it's pretty well understood you can start with things like AWS or",
    "start": "2799300",
    "end": "2805720"
  },
  {
    "text": "gcp security groups or use things like serverless functions containers and VMS for the things you can",
    "start": "2805720",
    "end": "2812260"
  },
  {
    "text": "more on the Obscure side of isolation if you want a little inspo an emerging approach is to traps C code in a web",
    "start": "2812260",
    "end": "2819040"
  },
  {
    "text": "assembly sandbox to isolate isolate hazardous subcomponents so the foreign function interface wrappers are",
    "start": "2819040",
    "end": "2824800"
  },
  {
    "text": "generated automatically so it's like a pretty slick DX might even be useful for applications that are entirely written in C so you",
    "start": "2824800",
    "end": "2831880"
  },
  {
    "text": "can trap all of the Hazardous Parts things like format parsing in a sandbox too",
    "start": "2831880",
    "end": "2837460"
  },
  {
    "text": "so if the vulnerable component is in a sandbox the attacker has to surmount another challenge before they reach",
    "start": "2837460",
    "end": "2842800"
  },
  {
    "text": "their goal most attackers really don't want to do something like a double sandbox Escape if it sounds hard it is",
    "start": "2842800",
    "end": "2849099"
  },
  {
    "text": "and attackers really like reducing the amount of effort they have and at a more localized level we have",
    "start": "2849099",
    "end": "2855280"
  },
  {
    "text": "modularity for organizational purposes which makes navigating and updating the system easier it also provides a level",
    "start": "2855280",
    "end": "2861160"
  },
  {
    "text": "of logical linearization where data Flows In One Direction but pressure and false disruptful linearity that's even",
    "start": "2861160",
    "end": "2868180"
  },
  {
    "text": "if the modules aren't isolated also a case where our chaos experiments and resilience stress tests can show you",
    "start": "2868180",
    "end": "2875079"
  },
  {
    "text": "to what extent your modular boundaries are working as you expect we may have modularity in though we can evolve parts",
    "start": "2875079",
    "end": "2881560"
  },
  {
    "text": "of the system independently since but not in the the operation of these components is independent sense",
    "start": "2881560",
    "end": "2887560"
  },
  {
    "text": "it's really easy to confuse the two especially when we spend all of our time building the system and not really babysitting it by the way we shouldn't",
    "start": "2887560",
    "end": "2894040"
  },
  {
    "text": "babysit it but it does mean we have bias finally we can employ the Strangler fig",
    "start": "2894040",
    "end": "2899980"
  },
  {
    "text": "pattern for change sometimes we may be willing and eager to change the system hopefully I've",
    "start": "2899980",
    "end": "2905140"
  },
  {
    "text": "convinced you of how great being able to be flexible is but we don't know how to do so without potentially contaminating",
    "start": "2905140",
    "end": "2911500"
  },
  {
    "text": "our critical functionality so the Strangler fig pattern can support our capacity to change even for the most",
    "start": "2911500",
    "end": "2917619"
  },
  {
    "text": "conservative of organizations which helps us maintain that flexibility it also allows us to gradually replace",
    "start": "2917619",
    "end": "2923859"
  },
  {
    "text": "parts of the system with new software components rather than attempting like the big bang rewrite which is as",
    "start": "2923859",
    "end": "2929800"
  },
  {
    "text": "destructive as it sounds normally in practice so adopting this pattern really allows us to keep our options open and we can",
    "start": "2929800",
    "end": "2936520"
  },
  {
    "text": "understand evolving context and we can feel prepared to evolve our systems accordingly so in a browser delivered service for",
    "start": "2936520",
    "end": "2942880"
  },
  {
    "text": "instance you could replace one page at a time starting with your least critical Pages you can collect evidence once the",
    "start": "2942880",
    "end": "2949420"
  },
  {
    "text": "redesigned component is deployed then you can deploy the rest and the same goes for writing those like beastly",
    "start": "2949420",
    "end": "2954579"
  },
  {
    "text": "on-prem monolithic Mainframe applications as well right especially if they're written in a hazardous component",
    "start": "2954579",
    "end": "2960040"
  },
  {
    "text": "like C the Strangler fig pattern allows us to pull out one function and rewrite it in a memory safe language like go",
    "start": "2960040",
    "end": "2967300"
  },
  {
    "text": "it's in effect again the conservative approach but often the faster one again the Big Bang models often all break",
    "start": "2967300",
    "end": "2972819"
  },
  {
    "text": "things without the moves fast since tightly coupled systems are really difficult to change",
    "start": "2972819",
    "end": "2979300"
  },
  {
    "text": "but technology is only one part of changing right it's only one part of the transformation with the Strangler fig",
    "start": "2979300",
    "end": "2984880"
  },
  {
    "text": "pattern you can adopt new tooling and you can move functionality to a new environment you know fancy serverless",
    "start": "2984880",
    "end": "2989920"
  },
  {
    "text": "stuff but the old ways of humans interacting with the technical part of the system likely won't change overnight",
    "start": "2989920",
    "end": "2995140"
  },
  {
    "text": "mental models are often really really sticky so whoever owns the new process sees it",
    "start": "2995140",
    "end": "3001140"
  },
  {
    "text": "through the lens of their old process you can think of it as one ritual is being traded for another",
    "start": "3001140",
    "end": "3006420"
  },
  {
    "text": "so the new principles that we adopt when we're changing our system those need incremental iteration too",
    "start": "3006420",
    "end": "3012359"
  },
  {
    "text": "at the core of our principles again has to be that willingness to change oops",
    "start": "3012359",
    "end": "3018300"
  },
  {
    "text": "wishing it speaking again of adaptability here we go so again willingness to change that",
    "start": "3018300",
    "end": "3024359"
  },
  {
    "text": "has to be at our core we have to provide the socio part of the system with the psychological safety to make mistakes",
    "start": "3024359",
    "end": "3030060"
  },
  {
    "text": "and try again we have to feel safe enough as humans to be iterating our own approaches",
    "start": "3030060",
    "end": "3036599"
  },
  {
    "text": "so we can save our potion we've concluded our journey through the ingredients in this very select sampling",
    "start": "3036599",
    "end": "3042839"
  },
  {
    "start": "3037000",
    "end": "3099000"
  },
  {
    "text": "of opportunities what do we need to remember from here onward to brew our potion",
    "start": "3042839",
    "end": "3048900"
  },
  {
    "text": "so resilience means organizations respond to failure and adapt to evolving conditions to evolving context remember",
    "start": "3048900",
    "end": "3056040"
  },
  {
    "text": "good Engineers design for change we can foster the five key ingredients",
    "start": "3056040",
    "end": "3061680"
  },
  {
    "text": "we need to brew the resilience potion during development when we're writing code Define our critical functions and",
    "start": "3061680",
    "end": "3068460"
  },
  {
    "text": "prioritize preserving them in adverse conditions we can understand and expand our systems",
    "start": "3068460",
    "end": "3074880"
  },
  {
    "text": "boundaries of safe operation we can observe system interactions across space-time we can also make them",
    "start": "3074880",
    "end": "3081540"
  },
  {
    "text": "more understandable we can foster feedback loops ensuring that we learn about our systems quickly",
    "start": "3081540",
    "end": "3087240"
  },
  {
    "text": "to inform change and finally we can remain flexible in the face of failures and evolving",
    "start": "3087240",
    "end": "3093300"
  },
  {
    "text": "conditions we can remain ever poised to change be good engineers",
    "start": "3093300",
    "end": "3099240"
  },
  {
    "start": "3099000",
    "end": "3136000"
  },
  {
    "text": "so again these were only selection of opportunities I discussed in the book so if you enjoyed this you'll love my new book with a very long title really the",
    "start": "3099240",
    "end": "3105780"
  },
  {
    "text": "second part of the book the second part of the title is more indicative just came out I'm dying for you to read it you can actually get a copy upstairs",
    "start": "3105780",
    "end": "3112200"
  },
  {
    "text": "right after this along with the chaos Kitty stickers with that thank you very much for your",
    "start": "3112200",
    "end": "3118020"
  },
  {
    "text": "time and attention [Applause]",
    "start": "3118020",
    "end": "3124019"
  }
]