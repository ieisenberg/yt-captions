[
  {
    "start": "0",
    "end": "111000"
  },
  {
    "text": "I hope this will be interesting for you my name is brah fber I work at Blue code",
    "start": "11880",
    "end": "16920"
  },
  {
    "text": "we write most of our backand systems in Elixir which is a language on the airline virtual machine and my day job",
    "start": "16920",
    "end": "24840"
  },
  {
    "text": "is basically making sure primarily making sure that our application code",
    "start": "24840",
    "end": "30039"
  },
  {
    "text": "what we write inhouse is is secure so normally I work at that like",
    "start": "30039",
    "end": "36160"
  },
  {
    "text": "intersection of security and and aong and so I go to conferences of airong",
    "start": "36160",
    "end": "42000"
  },
  {
    "text": "users and I talk to them about security or I go to a security conference and talk about airl now I suppose in this",
    "start": "42000",
    "end": "49320"
  },
  {
    "text": "audience most of you don't fit into either category necessarily so I try to make something a bit more I conceptual",
    "start": "49320",
    "end": "56520"
  },
  {
    "text": "high level and so I I'm I am coming to this still with my own airong background",
    "start": "56520",
    "end": "63000"
  },
  {
    "text": "I am very much biased I'm going to say a lot of good things about airong mostly because they're just true um but um I'm",
    "start": "63000",
    "end": "71840"
  },
  {
    "text": "also going to compare to other languages and I might completely misrepresent your favorite language and I'd be happy to",
    "start": "71840",
    "end": "78240"
  },
  {
    "text": "hear that you know things have moved on also in other languages and maybe some of the features that I claim are missing",
    "start": "78240",
    "end": "85159"
  },
  {
    "text": "are actually available talk to me I'd love to I'd love to hear really um",
    "start": "85159",
    "end": "91040"
  },
  {
    "text": "but again the this talk is not primarily about convincing you to use airong it is",
    "start": "91040",
    "end": "97880"
  },
  {
    "text": "about exploring the idea that concurrency abstractions such as those",
    "start": "97880",
    "end": "103360"
  },
  {
    "text": "provided by airong can help us make more secure",
    "start": "103360",
    "end": "109960"
  },
  {
    "text": "software okay so as an outline for this talk I want to talk a little bit about",
    "start": "110000",
    "end": "115320"
  },
  {
    "start": "111000",
    "end": "172000"
  },
  {
    "text": "how we used to do me memory management and what has changed since those early days",
    "start": "115320",
    "end": "120920"
  },
  {
    "text": "then I want to introduce like some basic concurrency Concepts and I want to",
    "start": "120920",
    "end": "126320"
  },
  {
    "text": "describe to you what I mean when I talk about SEC uh concurrency abstractions um then I want to talk",
    "start": "126320",
    "end": "134400"
  },
  {
    "text": "about the security potential and I'm carefully using the word potential here because not all of this has been fully",
    "start": "134400",
    "end": "140800"
  },
  {
    "text": "realized these are ideas um there's room for improvement in",
    "start": "140800",
    "end": "146560"
  },
  {
    "text": "Aang in in other languages too and I I'll look a little bit about at at",
    "start": "146560",
    "end": "152360"
  },
  {
    "text": "some uh languages that in Implement concurrency",
    "start": "152360",
    "end": "157879"
  },
  {
    "text": "abstractions and I'll finish up with some challenges and and future work what needs to be done to maybe realize some",
    "start": "157879",
    "end": "166040"
  },
  {
    "text": "of these uh potential",
    "start": "166040",
    "end": "169799"
  },
  {
    "text": "benefits okay so let's talk a little bit about memory management I'm sure some of you are old enough to remember",
    "start": "171440",
    "end": "178760"
  },
  {
    "start": "172000",
    "end": "361000"
  },
  {
    "text": "um the the slides are not showing the graphic okay there's some graphics in",
    "start": "178760",
    "end": "184400"
  },
  {
    "text": "the background that are hard to see on the slide doesn't matter they're not important um so we used to explicitly",
    "start": "184400",
    "end": "191360"
  },
  {
    "text": "allocate memory on the Heap right um if you're coding a c or Pascal or languages",
    "start": "191360",
    "end": "196879"
  },
  {
    "text": "like that way back when as an application developer you had to",
    "start": "196879",
    "end": "202440"
  },
  {
    "text": "allocate them M uh memory structures and remember to deallocate them also you had",
    "start": "202440",
    "end": "208920"
  },
  {
    "text": "to do pointer arithmetic to Traverse data structure so you have to calculate",
    "start": "208920",
    "end": "214640"
  },
  {
    "text": "you know the start of the data structure of the list or whatever data structure you were processing calculate where in",
    "start": "214640",
    "end": "221840"
  },
  {
    "text": "that buffer you need to be and make sure not to make mistakes in your arithmetic",
    "start": "221840",
    "end": "227360"
  },
  {
    "text": "which of course you did have bugs and that led to all sort of vulnerabilities",
    "start": "227360",
    "end": "234760"
  },
  {
    "text": "um memory leak is the the is relatively benign I mean your application might might might crash but some of these",
    "start": "234760",
    "end": "243239"
  },
  {
    "text": "vulnerabilities or some of these bugs can lead to very serious vulnerabilities",
    "start": "243239",
    "end": "248519"
  },
  {
    "text": "um as we as we all know right [Music] um so there were some languages at the",
    "start": "248519",
    "end": "255000"
  },
  {
    "text": "time that didn't do Heap allocation at all but that prevented some of those vulnerabilities but there were also",
    "start": "255000",
    "end": "261560"
  },
  {
    "text": "languages that were doing automatic memory management already um many many years ago um so memory being implicitly",
    "start": "261560",
    "end": "270919"
  },
  {
    "text": "allocated when you create a data structure and all this pointer",
    "start": "270919",
    "end": "276960"
  },
  {
    "text": "arithmetic being taken care of by the compiler and the runtime",
    "start": "276960",
    "end": "282000"
  },
  {
    "text": "so for that you need of course garbage collection um either tracing garbage",
    "start": "282000",
    "end": "287120"
  },
  {
    "text": "collector or reference counting and this pushes the",
    "start": "287120",
    "end": "292440"
  },
  {
    "text": "responsibility of memory management into the runtime so you need a runtime unlike",
    "start": "292440",
    "end": "297600"
  },
  {
    "text": "with C where the standard library is kind of of passive it's something you call when you need some higher level",
    "start": "297600",
    "end": "303360"
  },
  {
    "text": "function these languages require some sort of runtime some sort of thing that",
    "start": "303360",
    "end": "309080"
  },
  {
    "text": "runs alongside your code and does something and takes that responsibility",
    "start": "309080",
    "end": "314880"
  },
  {
    "text": "away from you so the the the benefits are that you get a proven",
    "start": "314880",
    "end": "321440"
  },
  {
    "text": "tested scrutinized runtime taking care of these things instead of you having to do those things over and over again in",
    "start": "321440",
    "end": "328440"
  },
  {
    "text": "your application code right the memory management at the lowest level is still the same you still",
    "start": "328440",
    "end": "334639"
  },
  {
    "text": "call the same operating s system calls to allocate memory it's just that",
    "start": "334639",
    "end": "340199"
  },
  {
    "text": "someone else does it for you and that someone else is being used by so many other people that you can have",
    "start": "340199",
    "end": "347479"
  },
  {
    "text": "reasonable I know assurances that it's correct and it doesn't introduce the kind of",
    "start": "347479",
    "end": "353919"
  },
  {
    "text": "vulnerabilities that I mentioned in the previous slide so now I want to talk about",
    "start": "353919",
    "end": "363319"
  },
  {
    "start": "361000",
    "end": "545000"
  },
  {
    "text": "concurrency so concurrency is not just about scaling across cores or processors",
    "start": "365000",
    "end": "370479"
  },
  {
    "text": "or servers okay that's parallelism right you want to be able in your application",
    "start": "370479",
    "end": "376120"
  },
  {
    "text": "to take advantage of the resources available on a single server or across multiple servers um so concurrency is",
    "start": "376120",
    "end": "384199"
  },
  {
    "text": "also about dealing with the asynchronous nature of the world in which your application operates",
    "start": "384199",
    "end": "390639"
  },
  {
    "text": "um HTTP requests other kind of network interactions other kind of",
    "start": "390639",
    "end": "396599"
  },
  {
    "text": "IO um so when you're designing an application you need to think about the",
    "start": "396599",
    "end": "402400"
  },
  {
    "text": "parallelism the utilizing the the available cores but you also need to",
    "start": "402400",
    "end": "408120"
  },
  {
    "text": "think about how you're going to handle the the fact that you're dealing with lots of interactions at at once um now",
    "start": "408120",
    "end": "416560"
  },
  {
    "text": "you need to kind of choose a unit of concurrency um OS processes or Os threads or green",
    "start": "416560",
    "end": "423520"
  },
  {
    "text": "threads lightweight threads that are managed by your your language runtime now unfortunately in some languages you",
    "start": "423520",
    "end": "431080"
  },
  {
    "text": "basically choose twice once you choose for for parallelism you might choose",
    "start": "431080",
    "end": "436160"
  },
  {
    "text": "operating system processes and just run as many copies of your application as you have uh CPU cores and then within",
    "start": "436160",
    "end": "444080"
  },
  {
    "text": "the application you use maybe uh promises Futures I don't know what these things are called these days um to deal",
    "start": "444080",
    "end": "450560"
  },
  {
    "text": "with the asynchronous nature of your application and the fact that you have all these various requests going",
    "start": "450560",
    "end": "456360"
  },
  {
    "text": "on um what else do you need to do you need to Define you need to choose a way of communicating internally within your",
    "start": "456360",
    "end": "463440"
  },
  {
    "text": "application so you can use shared memory if you're on the same CPU um you may have to go through some",
    "start": "463440",
    "end": "470159"
  },
  {
    "text": "external system maybe it's the database maybe it's redis maybe it's Kafka I",
    "start": "470159",
    "end": "476080"
  },
  {
    "text": "don't know um which has the ADV Vantage that it works regardless of whether the",
    "start": "476080",
    "end": "483000"
  },
  {
    "text": "other process that you're talking to is running on the same machine or even on a different machine or you can use message passing",
    "start": "483000",
    "end": "490400"
  },
  {
    "text": "which I will Define in more detail in the next",
    "start": "490400",
    "end": "495720"
  },
  {
    "text": "slide um and you need to worry about like Process Management so monitoring",
    "start": "495720",
    "end": "500840"
  },
  {
    "text": "fault tolerance recovery you want to know what's going on inside your application you may need to ensure that",
    "start": "500840",
    "end": "508639"
  },
  {
    "text": "there is always exactly one copy of a certain process running across the cluster of of of machines that that host",
    "start": "508639",
    "end": "516320"
  },
  {
    "text": "your application you may need statistics I don't know so all these things are kind of",
    "start": "516320",
    "end": "523120"
  },
  {
    "text": "decisions that need to be made when you're writing a concurrent application and if you as an application",
    "start": "523120",
    "end": "530120"
  },
  {
    "text": "developer have to make these kind of decisions and then Implement them yourself then there's a potential for",
    "start": "530120",
    "end": "537760"
  },
  {
    "text": "mistakes and as we know bugs can lead to vulnerabilities",
    "start": "537760",
    "end": "545200"
  },
  {
    "start": "545000",
    "end": "860000"
  },
  {
    "text": "so what do I mean when I when I say automatic concurrency management so just",
    "start": "545720",
    "end": "551360"
  },
  {
    "text": "like we talked previously about automatic memory management what if we",
    "start": "551360",
    "end": "556519"
  },
  {
    "text": "could push these some of these um responsibilities down into the",
    "start": "556519",
    "end": "563360"
  },
  {
    "text": "runtime and have I don't know the language designer or the the the the the",
    "start": "563360",
    "end": "570240"
  },
  {
    "text": "stack that we're using make some of those decisions for us and give us abstractions to work with Okay so",
    "start": "570240",
    "end": "577240"
  },
  {
    "text": "something that's built into the language and the language",
    "start": "577240",
    "end": "582600"
  },
  {
    "text": "part purely in terms of syntax may not be very big it's it's things like",
    "start": "582600",
    "end": "590240"
  },
  {
    "text": "message sending and receiving which often comes with a notion of pattern matching because that's very useful for",
    "start": "590240",
    "end": "597200"
  },
  {
    "text": "when you're processing messages to be able to pattern match on the incoming messages and ignore messages that are",
    "start": "597200",
    "end": "602959"
  },
  {
    "text": "maybe arriving out of out of sequence um often you will find a a functional",
    "start": "602959",
    "end": "611200"
  },
  {
    "text": "Paradigm functional programming uh languages that Implement such features and in",
    "start": "611200",
    "end": "618800"
  },
  {
    "text": "functional programming you often find immutable data so variables that don't",
    "start": "618800",
    "end": "625320"
  },
  {
    "text": "get changed under the under the nose of your of your code like for example if you uppercase a",
    "start": "625320",
    "end": "631760"
  },
  {
    "text": "string you get a new string which has been uppercased if some other part of your code was referring to that same",
    "start": "631760",
    "end": "638200"
  },
  {
    "text": "variable it is still pointing to the string before it was uppercased these things don't kind of magically happen",
    "start": "638200",
    "end": "645279"
  },
  {
    "text": "under the codes you won't have these kind of surprises that suddenly someone else modified the",
    "start": "645279",
    "end": "652440"
  },
  {
    "text": "data okay you besides the language impact you need",
    "start": "653320",
    "end": "659279"
  },
  {
    "text": "something in the runtime environment you need runtime support for this uh these",
    "start": "659279",
    "end": "664320"
  },
  {
    "text": "concurrency abstractions so this is where the green threads are typically uh defined so",
    "start": "664320",
    "end": "672040"
  },
  {
    "text": "usually you have a scheduler that schedules these many processes that run",
    "start": "672040",
    "end": "677360"
  },
  {
    "text": "your application um these processes are isolated from one another they don't",
    "start": "677360",
    "end": "683279"
  },
  {
    "text": "have shared State um they there is a process monitoring uh capability so that if some",
    "start": "683279",
    "end": "691360"
  },
  {
    "text": "process dies you know about it and you can try and recover from it so that helps you implement fault",
    "start": "691360",
    "end": "698839"
  },
  {
    "text": "tolerance okay now I as I said at the start I'm coming to this from the airline world and you see that I'm very",
    "start": "698839",
    "end": "704880"
  },
  {
    "text": "opinionated about what I think automatic concurrency management should look like",
    "start": "704880",
    "end": "710120"
  },
  {
    "text": "if someone comes up with a different set of features um fair enough we can we can",
    "start": "710120",
    "end": "715519"
  },
  {
    "text": "talk about that what I'm saying is if a langu anguage and a runtime Implement",
    "start": "715519",
    "end": "721200"
  },
  {
    "text": "some of these features and take away responsibilities from application developers to think about such things we",
    "start": "721200",
    "end": "728000"
  },
  {
    "text": "might we might get cleaner code fewer bugs fewer",
    "start": "728000",
    "end": "734279"
  },
  {
    "text": "vulnerabilities um you may need some there are some trade-offs sometimes like some of the things you see here you",
    "start": "734279",
    "end": "740240"
  },
  {
    "text": "might think well that's not going to be efficient is it like immutable data now I have two copies of that string it's",
    "start": "740240",
    "end": "746399"
  },
  {
    "text": "more efficient to transform a string to Upper rather than copying it and creating a",
    "start": "746399",
    "end": "752120"
  },
  {
    "text": "new one right in fact in practice the runtime",
    "start": "752120",
    "end": "757240"
  },
  {
    "text": "can take all sorts of shortcuts do all sort of optimizations as long as the",
    "start": "757240",
    "end": "762440"
  },
  {
    "text": "guarantees are not violated so you can um take a shortcut if you know that",
    "start": "762440",
    "end": "770199"
  },
  {
    "text": "this this particular uh memory is not referenced anywhere else you could for example uppercase it in place and and",
    "start": "770199",
    "end": "777839"
  },
  {
    "text": "know that no other variable is is still pointing to that memory location um",
    "start": "777839",
    "end": "784440"
  },
  {
    "text": "another kind of side effect of this kind of Architecture is that garbage collection becomes very simple you don't",
    "start": "784440",
    "end": "790639"
  },
  {
    "text": "need to stop the world garbage collector because every process only has its own view of the memory and therefore you can",
    "start": "790639",
    "end": "797800"
  },
  {
    "text": "do garbage collection within a process and often it's not even",
    "start": "797800",
    "end": "803000"
  },
  {
    "text": "necessary because if you're if you're handling an HTTP request if the HTTP request",
    "start": "803000",
    "end": "809360"
  },
  {
    "text": "finishes before your garbage collector kicks in you can just deallocate all the memory for that process and be done with",
    "start": "809360",
    "end": "815959"
  },
  {
    "text": "it so that actually leads to to optimization so there will be trade-offs",
    "start": "815959",
    "end": "821399"
  },
  {
    "text": "if you're going to go for raw processing power this is not going to give you the the the highest",
    "start": "821399",
    "end": "827519"
  },
  {
    "text": "throughput but um we're we're aiming for benefits",
    "start": "827519",
    "end": "833079"
  },
  {
    "text": "here just like with the automatic memory management which is not the most efficient way of memory managing memory",
    "start": "833079",
    "end": "839079"
  },
  {
    "text": "but nowadays memory is cheap CPU is cheap we can accommodate a little bit of",
    "start": "839079",
    "end": "844800"
  },
  {
    "text": "a performance impact if if it gives us solid benefits so what I'm saying is can",
    "start": "844800",
    "end": "852639"
  },
  {
    "text": "we stop the application developer from worrying about concurrency features so let's look look at that so",
    "start": "852639",
    "end": "859880"
  },
  {
    "text": "what are your security benefits um so I mentioned immutable data",
    "start": "859880",
    "end": "865920"
  },
  {
    "start": "860000",
    "end": "1920000"
  },
  {
    "text": "structures I mentioned isolated processes and I mentioned",
    "start": "865920",
    "end": "874399"
  },
  {
    "text": "resilience F tolerance okay these words do they remind you of something in",
    "start": "874399",
    "end": "882199"
  },
  {
    "text": "security the a very some very important security principles are often called the",
    "start": "882199",
    "end": "887279"
  },
  {
    "text": "CIA Triad that's",
    "start": "887279",
    "end": "893040"
  },
  {
    "text": "Integrity confidentiality and availability and",
    "start": "893040",
    "end": "899360"
  },
  {
    "text": "those features I I mentioned near the top are map pretty easily into those",
    "start": "899360",
    "end": "904480"
  },
  {
    "text": "those Concepts immutability and isolation can help ensure Integrity",
    "start": "904480",
    "end": "910680"
  },
  {
    "text": "isolation can help Implement confidentiality and resilience can",
    "start": "910680",
    "end": "916560"
  },
  {
    "text": "provide availability so let's look at each of these in a bit more",
    "start": "916560",
    "end": "923360"
  },
  {
    "text": "detail starting with Integrity so the the process model I",
    "start": "923360",
    "end": "930800"
  },
  {
    "text": "described earlier lightweight green threads with no shared State it's often",
    "start": "930800",
    "end": "938639"
  },
  {
    "text": "called the actor model in the actor model lightweight processes are fully isolated from each",
    "start": "938639",
    "end": "945399"
  },
  {
    "text": "other and they communicate with each other using message",
    "start": "945399",
    "end": "951880"
  },
  {
    "text": "passing and that makes these actors",
    "start": "951880",
    "end": "957600"
  },
  {
    "text": "um the the state changes in these actors in these processes are very explicit",
    "start": "957600",
    "end": "963040"
  },
  {
    "text": "they are transactional and and they are serialized so it's a bit like I know",
    "start": "963040",
    "end": "968199"
  },
  {
    "text": "software transactional memory right the only way to modify the the the state of",
    "start": "968199",
    "end": "974680"
  },
  {
    "text": "a process is by sending messages to it and getting replies from that process",
    "start": "974680",
    "end": "980120"
  },
  {
    "text": "there's no way to reach in and change something so if multiple things are",
    "start": "980120",
    "end": "985440"
  },
  {
    "text": "accessing that same actor they will have to wait for each other and that gives you um Integrity guarantees about the",
    "start": "985440",
    "end": "993440"
  },
  {
    "text": "state of that process okay and all this happens without the application developer having",
    "start": "993440",
    "end": "999199"
  },
  {
    "text": "to think in terms of locks semaphor mutexes all the tooling that you",
    "start": "999199",
    "end": "1004959"
  },
  {
    "text": "traditionally think of for ensuring the Integrity of your",
    "start": "1004959",
    "end": "1011440"
  },
  {
    "text": "data okay so this can help prevent certain race conditions um",
    "start": "1013240",
    "end": "1020079"
  },
  {
    "text": "there was a a vulnerability in GitHub some time ago where they were several processes several HTP",
    "start": "1020079",
    "end": "1028079"
  },
  {
    "text": "request handlers were basically writing to and reading from the same cookie store same cookie jar and under very",
    "start": "1028079",
    "end": "1036280"
  },
  {
    "text": "specific circumstances the cookie from one user was actually sent to another user and",
    "start": "1036280",
    "end": "1041640"
  },
  {
    "text": "they that user ended up getting access to resources that they shouldn't have access to okay that should should not be",
    "start": "1041640",
    "end": "1048640"
  },
  {
    "text": "possible right in your application but if you have to think about all these",
    "start": "1048640",
    "end": "1053760"
  },
  {
    "text": "interactions yourself as an application developer it's difficult to be sure that there isn't",
    "start": "1053760",
    "end": "1059840"
  },
  {
    "text": "some very specific sequence of events that might lead to the wrong information",
    "start": "1059840",
    "end": "1066120"
  },
  {
    "text": "being written or read and leading to these kind of",
    "start": "1066120",
    "end": "1072960"
  },
  {
    "text": "vulnerabilities okay let's talk about confidentiality so confidentiality is",
    "start": "1076000",
    "end": "1082360"
  },
  {
    "text": "about making sure information doesn't fall into the wrong hands right um",
    "start": "1082360",
    "end": "1091720"
  },
  {
    "text": "now if your if if your application logic",
    "start": "1092240",
    "end": "1099200"
  },
  {
    "text": "implements shortlived processes with a a dedicated scope with a very dedicated um uh",
    "start": "1099200",
    "end": "1107000"
  },
  {
    "text": "responsibility then and and that process only really has access to the data that is immediately available to it in inside",
    "start": "1107000",
    "end": "1114320"
  },
  {
    "text": "its its state you can make sure that information isn't even available there",
    "start": "1114320",
    "end": "1119960"
  },
  {
    "text": "to be leaked so I'll give you an example um handling HTTP requests from different",
    "start": "1119960",
    "end": "1127480"
  },
  {
    "text": "users either concurrently or sequentially so one of the things you do",
    "start": "1127480",
    "end": "1133720"
  },
  {
    "text": "at the start of an HTTP request is authenticate the user right you go into the database you compare their password",
    "start": "1133720",
    "end": "1139799"
  },
  {
    "text": "or you check their session cookie and then you set up the process with information about the user and you start",
    "start": "1139799",
    "end": "1147360"
  },
  {
    "text": "doing your business logic if the",
    "start": "1147360",
    "end": "1154480"
  },
  {
    "text": "process that is handling this request is later recycled to handle another user's",
    "start": "1154480",
    "end": "1160679"
  },
  {
    "text": "request you have to be very sure to clean up what you've done so that you don't end up leaking information to to",
    "start": "1160679",
    "end": "1167640"
  },
  {
    "text": "the wrong user if your process is shortlived and",
    "start": "1167640",
    "end": "1173240"
  },
  {
    "text": "isolated the the information from the previous user is just not accessible to",
    "start": "1173240",
    "end": "1178360"
  },
  {
    "text": "that other process right the process dies the garbage collection doesn't even happen",
    "start": "1178360",
    "end": "1184600"
  },
  {
    "text": "all the memory associated with that process is gone and for the next user you spin up a new process everything is",
    "start": "1184600",
    "end": "1192000"
  },
  {
    "text": "blank and you start over again a s another example so segregation of",
    "start": "1192000",
    "end": "1200120"
  },
  {
    "text": "application code with lower level um aspects of your",
    "start": "1200120",
    "end": "1208400"
  },
  {
    "text": "application so if you were to I mean let's let's",
    "start": "1208400",
    "end": "1214200"
  },
  {
    "text": "talk hypothetically you're you're serving https from within your application I know that in practice you",
    "start": "1214200",
    "end": "1219559"
  },
  {
    "text": "put a load balancer in front of your application but let's say you you handle https request you need to terminate the",
    "start": "1219559",
    "end": "1227000"
  },
  {
    "text": "TLs handshake before you can start processing the HTTP request if you do that in a single",
    "start": "1227000",
    "end": "1235120"
  },
  {
    "text": "process then it means that process that is handling your HTTP request that is doing your business logic has access to",
    "start": "1235120",
    "end": "1242559"
  },
  {
    "text": "the private key of your TLS server right now hopefully there is no input",
    "start": "1242559",
    "end": "1251000"
  },
  {
    "text": "parameters in your HP request that could cause that to leak but you know bugs",
    "start": "1251000",
    "end": "1256880"
  },
  {
    "text": "happen um this is what heart bleeded was about right the the SSL vulnerability heart",
    "start": "1256880",
    "end": "1263440"
  },
  {
    "text": "bleed basically allowed an attacker to read the private key simply because the",
    "start": "1263440",
    "end": "1269840"
  },
  {
    "text": "memory it it lived in the same memory that was handling the request is it's",
    "start": "1269840",
    "end": "1275799"
  },
  {
    "text": "maybe bad example because heart bleed was a vulnerability in the TLs",
    "start": "1275799",
    "end": "1281360"
  },
  {
    "text": "implementation itself but wouldn't it be cool if you could like fully segregate",
    "start": "1281360",
    "end": "1290039"
  },
  {
    "text": "the TLs protocol stack from your HTP request Handler in a way that they don't",
    "start": "1290159",
    "end": "1296840"
  },
  {
    "text": "share the memory space they don't have access to the private key at",
    "start": "1296840",
    "end": "1303600"
  },
  {
    "text": "all okay and lastly let's talk about",
    "start": "1306080",
    "end": "1312240"
  },
  {
    "text": "availability so in terms of in availability one of the",
    "start": "1313279",
    "end": "1318960"
  },
  {
    "text": "things we can do is we can try to minimize the blast radius so things will go wrong right some someone will send",
    "start": "1318960",
    "end": "1326240"
  },
  {
    "text": "the bad request with some weird encoding of query parameters and your application",
    "start": "1326240",
    "end": "1331600"
  },
  {
    "text": "wasn't prepared to handle that boom it blows up you get a 500 server error what else fails at that moment how do you",
    "start": "1331600",
    "end": "1338440"
  },
  {
    "text": "know that such an error doesn't propagate into the rest of your application and starts to affect other",
    "start": "1338440",
    "end": "1347279"
  },
  {
    "text": "users okay another part of it",
    "start": "1347279",
    "end": "1355440"
  },
  {
    "text": "is getting your application back in a non good State because if an HTTP",
    "start": "1355440",
    "end": "1361080"
  },
  {
    "text": "request fails it's pretty easy right you just aborts that request it goes away",
    "start": "1361080",
    "end": "1367120"
  },
  {
    "text": "one user is affected no harm done but if some background process is affected maybe some process",
    "start": "1367120",
    "end": "1375320"
  },
  {
    "text": "that is doing some important uh coordination within your application what if it",
    "start": "1375320",
    "end": "1382000"
  },
  {
    "text": "crashes how do you get your application back well we all know how to do that",
    "start": "1382000",
    "end": "1387080"
  },
  {
    "text": "right um have you tried switching it off and on again so what if we could do that",
    "start": "1387080",
    "end": "1393200"
  },
  {
    "text": "at the process level and say if this process die this process is",
    "start": "1393200",
    "end": "1398880"
  },
  {
    "text": "is critical to my application if it dies restart it if that doesn't help go",
    "start": "1398880",
    "end": "1405840"
  },
  {
    "text": "up one level and try and reset the part of the application that is is is that this",
    "start": "1405840",
    "end": "1413960"
  },
  {
    "text": "process is part of and you go up the tree until you manage to get your application back into a non- good state",
    "start": "1413960",
    "end": "1422120"
  },
  {
    "text": "so in airong you you define a supervision supervision tree for your",
    "start": "1422120",
    "end": "1428520"
  },
  {
    "text": "application that basically prescribes this known good state of your application and the interdependencies",
    "start": "1428520",
    "end": "1434960"
  },
  {
    "text": "between the processes that make up your application and the system then makes sure that the",
    "start": "1434960",
    "end": "1441640"
  },
  {
    "text": "application is always in this known good State anything that happens it will start to get to work to fix things and",
    "start": "1441640",
    "end": "1448039"
  },
  {
    "text": "that might mean killing other processes that are dependent on this this process",
    "start": "1448039",
    "end": "1453480"
  },
  {
    "text": "that died or starting them in a certain order like stopping all the processes",
    "start": "1453480",
    "end": "1459640"
  },
  {
    "text": "that were started after this process and then starting again from there um so",
    "start": "1459640",
    "end": "1465200"
  },
  {
    "text": "this helps you keep your application in a in a working state so this is",
    "start": "1465200",
    "end": "1471960"
  },
  {
    "text": "self-healing of the application now we talked about the the",
    "start": "1471960",
    "end": "1479480"
  },
  {
    "text": "the CIA Triad but I think there's one more aspect that we need to talk about",
    "start": "1479480",
    "end": "1484840"
  },
  {
    "text": "and I decided to call that",
    "start": "1484840",
    "end": "1488760"
  },
  {
    "text": "Clarity okay Clarity is basically the expressiveness of your",
    "start": "1490039",
    "end": "1496360"
  },
  {
    "text": "code so if if you can express your business logic as linear code without worrying",
    "start": "1496760",
    "end": "1504159"
  },
  {
    "text": "about asynchronous interactions with other parts of your application with other systems that your application",
    "start": "1504159",
    "end": "1510120"
  },
  {
    "text": "depends on such as a database or some external API if you can",
    "start": "1510120",
    "end": "1515440"
  },
  {
    "text": "express State machines using explicit tra uh",
    "start": "1515440",
    "end": "1523080"
  },
  {
    "text": "stat uh transitions you end up with cleaner",
    "start": "1523080",
    "end": "1529080"
  },
  {
    "text": "code if you can ignore some of the um",
    "start": "1529080",
    "end": "1534480"
  },
  {
    "text": "potential errors that could cause a process to die if you can focus on the happy path and just let the fault",
    "start": "1534480",
    "end": "1542960"
  },
  {
    "text": "tolerance the selfhealing features of the application deal with things that",
    "start": "1542960",
    "end": "1548480"
  },
  {
    "text": "shouldn't really happen right when you still need a a case statement that",
    "start": "1548480",
    "end": "1554159"
  },
  {
    "text": "handles the unauthenticated user and returns a 401 that is is something that's expected you know that this is",
    "start": "1554159",
    "end": "1560640"
  },
  {
    "text": "going to happen and the product manager whoever defined the requirements of your API will tell you here you need to",
    "start": "1560640",
    "end": "1566880"
  },
  {
    "text": "return a 401 and that code path needs to be needs to exist in your code but there",
    "start": "1566880",
    "end": "1572600"
  },
  {
    "text": "is also things that should never happen Okay this this environment",
    "start": "1572600",
    "end": "1578039"
  },
  {
    "text": "variable is not set well that's a problem for the devops team right they they it shouldn't this application",
    "start": "1578039",
    "end": "1583559"
  },
  {
    "text": "shouldn't have been deployed like this in the first place there's nothing I can do to recover from it I shouldn't have to have code that tries",
    "start": "1583559",
    "end": "1590760"
  },
  {
    "text": "to deal with this error that should never really happen Okay let it crash is the airong",
    "start": "1590760",
    "end": "1596720"
  },
  {
    "text": "strategy there and hopefully the sub the the self-healing um mechanisms will kick",
    "start": "1596720",
    "end": "1602760"
  },
  {
    "text": "in and get the application back in a working stage but if that environment variable is critical for the application to work then the application might as",
    "start": "1602760",
    "end": "1609679"
  },
  {
    "text": "well crash okay but that keeps your code focused on the happy path rather than",
    "start": "1609679",
    "end": "1616240"
  },
  {
    "text": "having all sorts of EX ex ra code for dealing with things that shouldn't really happen um another thing that can help",
    "start": "1616240",
    "end": "1624159"
  },
  {
    "text": "with the clarity of your code is having few fewer moving parts so I explained",
    "start": "1624159",
    "end": "1629640"
  },
  {
    "text": "earlier how concurrency is not the same as parallelism and if you have to implement those using different",
    "start": "1629640",
    "end": "1634919"
  },
  {
    "text": "mechanisms you're using OS processes to do parallelism and uh",
    "start": "1634919",
    "end": "1642760"
  },
  {
    "text": "promises or other callback mechanisms to deal with concurrency now you have like",
    "start": "1642760",
    "end": "1647880"
  },
  {
    "text": "two mechanisms and you need to figure out okay if this happens in this context then I can use shared memory to talk to",
    "start": "1647880",
    "end": "1654279"
  },
  {
    "text": "this other process because it lives in the same process but if this process is another process on the same machine or a",
    "start": "1654279",
    "end": "1660200"
  },
  {
    "text": "different machine now I need to have a separate mechanism for doing this communication if everything is just",
    "start": "1660200",
    "end": "1667760"
  },
  {
    "text": "processes lightweight processes all the way on the same machine on a different machine and you can just",
    "start": "1667760",
    "end": "1674320"
  },
  {
    "text": "transparently talk to between them if you have to it becomes you have fewer moving Parts you",
    "start": "1674320",
    "end": "1681279"
  },
  {
    "text": "have fewer Concepts that you have to mentally juggle and it be your your code becomes",
    "start": "1681279",
    "end": "1688640"
  },
  {
    "text": "clearer um complexity is a liability the more complex your application becomes",
    "start": "1688640",
    "end": "1694399"
  },
  {
    "text": "the more risk there is of of bugs the harder it is for future developers to",
    "start": "1694399",
    "end": "1699919"
  },
  {
    "text": "come along and make make changes so Simplicity can be a real",
    "start": "1699919",
    "end": "1706559"
  },
  {
    "text": "security benefit okay",
    "start": "1706559",
    "end": "1711960"
  },
  {
    "text": "now having said all that some of this maybe you can Implement without support",
    "start": "1711960",
    "end": "1717760"
  },
  {
    "text": "by The Language by the runtime maybe you can just apply some principles to your own",
    "start": "1717760",
    "end": "1724840"
  },
  {
    "text": "codebase regardless of which language is written in and what features the this language provides okay um as an",
    "start": "1724840",
    "end": "1733480"
  },
  {
    "text": "example proponents of functional programming always say that functional code is easier to test because",
    "start": "1733480",
    "end": "1739320"
  },
  {
    "text": "functional code pure functional code takes functions take arguments and",
    "start": "1739320",
    "end": "1744919"
  },
  {
    "text": "return a return value and that's it nothing else happens nothing else can affect the return of that",
    "start": "1744919",
    "end": "1752240"
  },
  {
    "text": "function and that makes it very easy to test you just need to figure out which input values you need to try and what",
    "start": "1752240",
    "end": "1758519"
  },
  {
    "text": "return values You're Expecting the part of your application that actually has to deal with the outside world what",
    "start": "1758519",
    "end": "1764200"
  },
  {
    "text": "functional programmers call effects can be very small and and and concentrated",
    "start": "1764200",
    "end": "1770720"
  },
  {
    "text": "all the complexity of your business logic can live in those functions that can be very thoroughly tested because",
    "start": "1770720",
    "end": "1776080"
  },
  {
    "text": "they are purely functional they don't have side effects okay so you can apply that in any language you can do that in",
    "start": "1776080",
    "end": "1783640"
  },
  {
    "text": "in Java too this just requires a bit of um I don't know defining some rules for",
    "start": "1783640",
    "end": "1791480"
  },
  {
    "text": "yourself and sticking with them so that brings me to the the next question like do we really need",
    "start": "1791480",
    "end": "1798480"
  },
  {
    "text": "a separate runtime a separate language that's that can support these",
    "start": "1798480",
    "end": "1804720"
  },
  {
    "text": "features um so can we do concurrency abstractions as a library",
    "start": "1804720",
    "end": "1811720"
  },
  {
    "text": "now I I think if you want the full benefits you're going to need at least green threads right if you're going to",
    "start": "1811720",
    "end": "1818320"
  },
  {
    "text": "do this use if you're going to write linear code in a language that doesn't",
    "start": "1818320",
    "end": "1823600"
  },
  {
    "text": "have green threads then you're going to have to use operating system threads because that is the Next Level Up",
    "start": "1823600",
    "end": "1828919"
  },
  {
    "text": "concurrency primitive that's available and that's not going to scale in most type of",
    "start": "1828919",
    "end": "1835398"
  },
  {
    "text": "applications but it's not just green threads you're going to need if you want to do this properly if you want to have",
    "start": "1835720",
    "end": "1842519"
  },
  {
    "text": "for example the selfhealing features of the supervision tree you're going to need some sort of",
    "start": "1842519",
    "end": "1848919"
  },
  {
    "text": "process monitoring if one of your green threads dies others may have to know about",
    "start": "1848919",
    "end": "1856240"
  },
  {
    "text": "that and this is often often missing in in runtimes that do have green",
    "start": "1856240",
    "end": "1861960"
  },
  {
    "text": "threads and who prevents shared mutable State like of course you would have to",
    "start": "1861960",
    "end": "1868120"
  },
  {
    "text": "become respons you have to be responsible for making sure that processes don't Access Data outside of",
    "start": "1868120",
    "end": "1875440"
  },
  {
    "text": "their own scope because the runtime doesn't guarantee",
    "start": "1875440",
    "end": "1880278"
  },
  {
    "text": "this and then finally there is an impedance mismatch at the boundary",
    "start": "1880840",
    "end": "1885919"
  },
  {
    "text": "because you're still calling into libraries um that that were not written",
    "start": "1885919",
    "end": "1891919"
  },
  {
    "text": "with these principles in mind right it's a bit like doing static typing on a language that doesn't really",
    "start": "1891919",
    "end": "1898600"
  },
  {
    "text": "do static types you the compiler can enforce for your code that all your type information is correct all your all your",
    "start": "1898600",
    "end": "1905320"
  },
  {
    "text": "function calls are safe but at some point you're going to have to interact with some other library that was not written with static",
    "start": "1905320",
    "end": "1912320"
  },
  {
    "text": "typing and at the boundary who knows what will happen",
    "start": "1912320",
    "end": "1919158"
  },
  {
    "start": "1920000",
    "end": "2356000"
  },
  {
    "text": "okay so let's have a look at some examples and of course my first example is airong told you I'm biased so airong",
    "start": "1920559",
    "end": "1928720"
  },
  {
    "text": "takes a lot of the boxes um and I I say airong I actually",
    "start": "1928720",
    "end": "1934000"
  },
  {
    "text": "mean like the airong ecosystem because other languages like elixir LF gleam",
    "start": "1934000",
    "end": "1939639"
  },
  {
    "text": "they all benefit from the from the same runtime from the same functionality that it provides so it implements the actor",
    "start": "1939639",
    "end": "1946679"
  },
  {
    "text": "model that's good that means lightweight threads and message passing um all the",
    "start": "1946679",
    "end": "1953039"
  },
  {
    "text": "io by default is non-blocking so whenever you interact with a file system with a network it is",
    "start": "1953039",
    "end": "1959039"
  },
  {
    "text": "asynchronous if you want synchronous interactions you can just Implement that on top of this the the the non-blocking",
    "start": "1959039",
    "end": "1966639"
  },
  {
    "text": "io because you are in a lightweight process it doesn't matter if you block right you can try and read a file and",
    "start": "1966639",
    "end": "1972039"
  },
  {
    "text": "just sit and wait for the data to come back the Schuler will in the meantime give someone else",
    "start": "1972039",
    "end": "1978519"
  },
  {
    "text": "CPU time to do whatever they want to do um so the OTP principle airong comes",
    "start": "1978519",
    "end": "1987880"
  },
  {
    "text": "with a extended standard Library called OTP which implements a lot of principles",
    "start": "1987880",
    "end": "1994000"
  },
  {
    "text": "for application design including those supervision trees that I mentioned which uh provide the",
    "start": "1994000",
    "end": "1999960"
  },
  {
    "text": "self-healing capabilities and it has support for",
    "start": "1999960",
    "end": "2006240"
  },
  {
    "text": "multinode cluster with location transparency what that means is that processes can talk to each other no",
    "start": "2006240",
    "end": "2011679"
  },
  {
    "text": "matter where they are and you don't even notice the difference other than of course the failure mode failure mode",
    "start": "2011679",
    "end": "2018200"
  },
  {
    "text": "like things things can fail in different ways if a process that you're talking to lives on another server then there might",
    "start": "2018200",
    "end": "2023840"
  },
  {
    "text": "be a split brain situation you might still have to implement some sort of leader election",
    "start": "2023840",
    "end": "2029679"
  },
  {
    "text": "um if you want to have a single process responsible across a cluster of of servers but as a as a starting point",
    "start": "2029679",
    "end": "2036799"
  },
  {
    "text": "this this gives you a lot of of of power now it's not all",
    "start": "2036799",
    "end": "2042240"
  },
  {
    "text": "um peaches and cream I don't know what is the expression",
    "start": "2042240",
    "end": "2047839"
  },
  {
    "text": "um while while it takes a lot of the boxes the the process isolation and also",
    "start": "2047839",
    "end": "2053919"
  },
  {
    "text": "the node isolation was not they were not originally designed with security in mind so if I write some code that runs",
    "start": "2053919",
    "end": "2062839"
  },
  {
    "text": "within a process there are standard Library functions that lets me do bad",
    "start": "2062839",
    "end": "2068560"
  },
  {
    "text": "things to other processes um so the isol and and and similarly",
    "start": "2068560",
    "end": "2075720"
  },
  {
    "text": "between nodes if I if I'm On One node on one server if I can take control of that",
    "start": "2075720",
    "end": "2081919"
  },
  {
    "text": "instance of the application I can basically do arbitrary things on other nodes in the cluster so ideally if you",
    "start": "2081919",
    "end": "2089398"
  },
  {
    "text": "are saying okay these are security features the isolation is a security feature you're going to need additional",
    "start": "2089399",
    "end": "2096440"
  },
  {
    "text": "um capabilities for example you might want to have some sort of access controls on your process and saying this",
    "start": "2096440",
    "end": "2102680"
  },
  {
    "text": "is this is a privileged process it can do whatever it wants but this is an HTTP request Handler it shouldn't have the",
    "start": "2102680",
    "end": "2109920"
  },
  {
    "text": "the ability to for example spawn an operating system process or talk to the database there",
    "start": "2109920",
    "end": "2116760"
  },
  {
    "text": "are other processes that have that capabilities and Mya HTTP request Handler can only interact with those",
    "start": "2116760",
    "end": "2122560"
  },
  {
    "text": "processes but it can never do those things directly so that those would be nice things to have code signing would",
    "start": "2122560",
    "end": "2129040"
  },
  {
    "text": "be nice to have there is no code signing currently when you're talking about integrity it's not just about the Integrity of the data that the process",
    "start": "2129040",
    "end": "2137320"
  },
  {
    "text": "holds at the end of the day it matters that the code is",
    "start": "2137320",
    "end": "2143240"
  },
  {
    "text": "also um you you ensure the Integrity of the code that's operating on that state because if arbitrary code could get",
    "start": "2143240",
    "end": "2150640"
  },
  {
    "text": "loaded then all bets are off right for integrity and confidentiality",
    "start": "2150640",
    "end": "2158280"
  },
  {
    "text": "and static typing so that's another thing that a lot of people are talking about how static types can prevent",
    "start": "2158280",
    "end": "2165079"
  },
  {
    "text": "runtime bugs and runtime bugs can lead to uh security vulnerability so static",
    "start": "2165079",
    "end": "2170440"
  },
  {
    "text": "types would definitely help it's a bit hard do to do static typing when you're doing message passing uh between actors",
    "start": "2170440",
    "end": "2177640"
  },
  {
    "text": "because now you need like typed messages and then you get to",
    "start": "2177640",
    "end": "2183200"
  },
  {
    "text": "something like uh channels in go which are typed but that limits you in how you",
    "start": "2183200",
    "end": "2189240"
  },
  {
    "text": "interact between between actors so this is a like an ongoing uh research topic",
    "start": "2189240",
    "end": "2195960"
  },
  {
    "text": "in airong okay so this is airong I I use airong every day I love it uh but",
    "start": "2195960",
    "end": "2201440"
  },
  {
    "text": "doesn't mean I don't look at other options that are out there if I can find something better I'll be happy to go and",
    "start": "2201440",
    "end": "2208119"
  },
  {
    "text": "start using those other things so I've looked at some other things um so I mentioned go so go has go routines and",
    "start": "2208119",
    "end": "2215680"
  },
  {
    "text": "channels but this only ticks like a few of the boxes right it's it has lightweight",
    "start": "2215680",
    "end": "2222319"
  },
  {
    "text": "concurrency it has like some fundamental idea of of of the actor model where",
    "start": "2222319",
    "end": "2228200"
  },
  {
    "text": "processes can talk to each other through a channel but it doesn't have the",
    "start": "2228200",
    "end": "2233359"
  },
  {
    "text": "resilience features of like uh monitoring other processes and responding to to failures that might",
    "start": "2233359",
    "end": "2240160"
  },
  {
    "text": "happen in in them and it still has all the shared mut mutable States unless you",
    "start": "2240160",
    "end": "2246040"
  },
  {
    "text": "as an application developer choose to uh ensure this isolation",
    "start": "2246040",
    "end": "2253200"
  },
  {
    "text": "yourself now Java Scala is a bit more interesting because they've got AKA so AKA is essentially an implementation of",
    "start": "2253200",
    "end": "2260640"
  },
  {
    "text": "some of the ideas of OTP which comes with airong um on top of",
    "start": "2260640",
    "end": "2267040"
  },
  {
    "text": "the jvm now it's it's it's very interesting it's a it's U but it turns",
    "start": "2267040",
    "end": "2272480"
  },
  {
    "text": "out to be quite difficult first of all because jvm doesn't really have green thread friends right am I",
    "start": "2272480",
    "end": "2279359"
  },
  {
    "text": "wrong I'm not sure I'm I think I I'm pretty sure it doesn't have a schedular",
    "start": "2279359",
    "end": "2284560"
  },
  {
    "text": "for lightweight processes um and at at the end of the day if you're on the Java",
    "start": "2284560",
    "end": "2290119"
  },
  {
    "text": "virtual machine you probably are in that ecosystem because you want to leverage other libraries other",
    "start": "2290119",
    "end": "2298040"
  },
  {
    "text": "applications that are available in that ecosystem but those do not necessarily play by aka's rules and therefore your",
    "start": "2298040",
    "end": "2305040"
  },
  {
    "text": "the benefits that you're getting are only go as deep as your application",
    "start": "2305040",
    "end": "2312000"
  },
  {
    "text": "building on top of AKA but it doesn't provide guarantees beyond that right this is the impedance",
    "start": "2312000",
    "end": "2317760"
  },
  {
    "text": "mismatch I mentioned earlier um so there are other languages",
    "start": "2317760",
    "end": "2324960"
  },
  {
    "text": "okl um also has lightweight threads concurrency features um but It suffers",
    "start": "2324960",
    "end": "2334640"
  },
  {
    "text": "from similar issues as as go that it's it doesn't have it doesn't Implement for example process monitoring the same",
    "start": "2334640",
    "end": "2340319"
  },
  {
    "text": "thing with uh rust uh what's it called Tokyo um very powerful very good for",
    "start": "2340319",
    "end": "2347000"
  },
  {
    "text": "lightweight concurrency but again that's where it stops it doesn't go all the",
    "start": "2347000",
    "end": "2353279"
  },
  {
    "text": "way okay so just to wrap things up um where are",
    "start": "2355520",
    "end": "2362079"
  },
  {
    "start": "2356000",
    "end": "2530000"
  },
  {
    "text": "we where do we want to be and how do we get there right",
    "start": "2362079",
    "end": "2367520"
  },
  {
    "text": "so there I told you there's work being done for static Types on airl and elixir so maybe that will keep me on the airl",
    "start": "2367520",
    "end": "2374720"
  },
  {
    "text": "virtual machine because you know more and more of the problems or more and more of the downsides are addressed and",
    "start": "2374720",
    "end": "2381480"
  },
  {
    "text": "I may not need anywhere else to go right but maybe other languages will catch up",
    "start": "2381480",
    "end": "2388599"
  },
  {
    "text": "and give me an alternative that offers these benefits so we see green threads are are getting pretty common in other",
    "start": "2388599",
    "end": "2394800"
  },
  {
    "text": "languages and other run times um I've seen the actor model advertised in in",
    "start": "2394800",
    "end": "2401560"
  },
  {
    "text": "other languages to to what extent they fully implemented I I'm not",
    "start": "2401560",
    "end": "2407640"
  },
  {
    "text": "sure and then the the the the missing feature you usually is the supervision",
    "start": "2407640",
    "end": "2413240"
  },
  {
    "text": "idea which is necessary for availability now availability is maybe",
    "start": "2413240",
    "end": "2419280"
  },
  {
    "text": "not the most critical security feature for most people right I mean we all know",
    "start": "2419280",
    "end": "2425240"
  },
  {
    "text": "that the denial service ATT Tech can probably bring down our applications",
    "start": "2425240",
    "end": "2430480"
  },
  {
    "text": "but it at the end it it is still one of our responsibilities to",
    "start": "2430480",
    "end": "2436079"
  },
  {
    "text": "keep the application up and running as much as possible and the supervision the",
    "start": "2436079",
    "end": "2441560"
  },
  {
    "text": "supervision idea can really really help there um",
    "start": "2441560",
    "end": "2449200"
  },
  {
    "text": "now I I'm really hoping to to find that someone will come to me after this talk and say hey look I'm using this language",
    "start": "2451000",
    "end": "2457680"
  },
  {
    "text": "I'm using this these features and it gives me many of these same capabilities",
    "start": "2457680",
    "end": "2463560"
  },
  {
    "text": "because I love to learn like what else is out there until now I have not like",
    "start": "2463560",
    "end": "2469760"
  },
  {
    "text": "every time I try something else I find myself missing the features that I'm described we long um but awareness is",
    "start": "2469760",
    "end": "2478319"
  },
  {
    "text": "growing I think and that's one of reasons why I'm here to tell you about this maybe it will you know tickle",
    "start": "2478319",
    "end": "2484480"
  },
  {
    "text": "something in your brain maybe you will go and and uh talk to the language designers of your favorite language and",
    "start": "2484480",
    "end": "2490800"
  },
  {
    "text": "get them to adopt some of these features maybe you'll come to me and tell me that it already exists um and hopefully we",
    "start": "2490800",
    "end": "2496760"
  },
  {
    "text": "can all benefit because I do think that after automatic memory management and",
    "start": "2496760",
    "end": "2502280"
  },
  {
    "text": "eliminating all the buffer overflows and similar bugs I think",
    "start": "2502280",
    "end": "2507720"
  },
  {
    "text": "concurrency is another area in which there's a lot to be gained from taking some of the",
    "start": "2507720",
    "end": "2515520"
  },
  {
    "text": "responsibility out of the application developers hand everyone implementing their own thing and making sure that",
    "start": "2515520",
    "end": "2521359"
  },
  {
    "text": "these things are done properly um by a by a",
    "start": "2521359",
    "end": "2527559"
  },
  {
    "text": "runtime okay now before I go I just want to thank my employer for uh making it",
    "start": "2528680",
    "end": "2534839"
  },
  {
    "start": "2530000",
    "end": "2559000"
  },
  {
    "text": "possible to contribute to the community in general and in particular being here and talking to you today um and that was",
    "start": "2534839",
    "end": "2542119"
  },
  {
    "text": "my talk thank you",
    "start": "2542119",
    "end": "2548160"
  }
]