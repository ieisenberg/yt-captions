[
  {
    "text": "test this beautiful everything looks",
    "start": "4860",
    "end": "7140"
  },
  {
    "text": "cool hi uh thank you very much for",
    "start": "7140",
    "end": "9240"
  },
  {
    "text": "coming so the talk that I'm going to go",
    "start": "9240",
    "end": "12000"
  },
  {
    "text": "through today is how to accomplish",
    "start": "12000",
    "end": "14099"
  },
  {
    "text": "functional programming in kotlin",
    "start": "14099",
    "end": "17160"
  },
  {
    "text": "um kotlin is a language that has some",
    "start": "17160",
    "end": "19859"
  },
  {
    "text": "niceties around functional programming",
    "start": "19859",
    "end": "21900"
  },
  {
    "text": "but obviously it doesn't ship things",
    "start": "21900",
    "end": "23039"
  },
  {
    "text": "like type classes and a whole bunch of",
    "start": "23039",
    "end": "25140"
  },
  {
    "text": "other abstractions that are quite nice",
    "start": "25140",
    "end": "27480"
  },
  {
    "text": "I'm not going to go too deep into",
    "start": "27480",
    "end": "28859"
  },
  {
    "text": "actually writing applications in this",
    "start": "28859",
    "end": "31019"
  },
  {
    "text": "talk there's a workshop afterwards that",
    "start": "31019",
    "end": "32640"
  },
  {
    "text": "I'd love everyone to come to that goes",
    "start": "32640",
    "end": "34140"
  },
  {
    "text": "through how to actually apply these",
    "start": "34140",
    "end": "35340"
  },
  {
    "text": "things to a product but what we will go",
    "start": "35340",
    "end": "37440"
  },
  {
    "text": "through is how the tricks that make",
    "start": "37440",
    "end": "39960"
  },
  {
    "text": "these things available to us are",
    "start": "39960",
    "end": "41460"
  },
  {
    "text": "actually built under the hood",
    "start": "41460",
    "end": "43379"
  },
  {
    "text": "so this is kind of what I looked like",
    "start": "43379",
    "end": "45120"
  },
  {
    "text": "two weeks ago it's what I look like now",
    "start": "45120",
    "end": "47399"
  },
  {
    "text": "pulled all of my hair out in nervous",
    "start": "47399",
    "end": "49379"
  },
  {
    "text": "anticipation of this talk",
    "start": "49379",
    "end": "51960"
  },
  {
    "text": "because it's quite daunting to get on",
    "start": "51960",
    "end": "53640"
  },
  {
    "text": "stage at a pretty Pro functional",
    "start": "53640",
    "end": "55440"
  },
  {
    "text": "programming conference like this and",
    "start": "55440",
    "end": "56879"
  },
  {
    "text": "talk about Java the good parts",
    "start": "56879",
    "end": "60320"
  },
  {
    "text": "but of the people here how many are",
    "start": "62940",
    "end": "64860"
  },
  {
    "text": "using Haskell professionally in",
    "start": "64860",
    "end": "66780"
  },
  {
    "text": "production",
    "start": "66780",
    "end": "68220"
  },
  {
    "text": "quite a lot how many are using Scala",
    "start": "68220",
    "end": "71820"
  },
  {
    "text": "a resounding show of hands this is the",
    "start": "71820",
    "end": "74580"
  },
  {
    "text": "wrong crowd to start asking about Java",
    "start": "74580",
    "end": "76200"
  },
  {
    "text": "and JavaScript and things like that",
    "start": "76200",
    "end": "77460"
  },
  {
    "text": "right",
    "start": "77460",
    "end": "79260"
  },
  {
    "text": "but",
    "start": "79260",
    "end": "80460"
  },
  {
    "text": "in today's software landscape landscape",
    "start": "80460",
    "end": "82920"
  },
  {
    "text": "it can be really tough finding a job",
    "start": "82920",
    "end": "84659"
  },
  {
    "text": "using the languages that we actually",
    "start": "84659",
    "end": "85860"
  },
  {
    "text": "love",
    "start": "85860",
    "end": "87420"
  },
  {
    "text": "um you know try and find a job using",
    "start": "87420",
    "end": "89159"
  },
  {
    "text": "Idris forget about it",
    "start": "89159",
    "end": "91320"
  },
  {
    "text": "agder TLA plus anything that has",
    "start": "91320",
    "end": "94259"
  },
  {
    "text": "any kind of uh you know formal",
    "start": "94259",
    "end": "96900"
  },
  {
    "text": "application to it it's very hard to find",
    "start": "96900",
    "end": "98700"
  },
  {
    "text": "work",
    "start": "98700",
    "end": "99780"
  },
  {
    "text": "and while high school and Scholar are",
    "start": "99780",
    "end": "101820"
  },
  {
    "text": "growing communities and are growing",
    "start": "101820",
    "end": "103020"
  },
  {
    "text": "ecosystems even that can be quite tricky",
    "start": "103020",
    "end": "105900"
  },
  {
    "text": "to find",
    "start": "105900",
    "end": "106799"
  },
  {
    "text": "mostly the landscape is Java C shop and",
    "start": "106799",
    "end": "108780"
  },
  {
    "text": "JavaScript and these are the languages",
    "start": "108780",
    "end": "109799"
  },
  {
    "text": "that we work in day in day out to uh you",
    "start": "109799",
    "end": "113100"
  },
  {
    "text": "know to pay the bills and then on nights",
    "start": "113100",
    "end": "114780"
  },
  {
    "text": "and weekends we go home and we use",
    "start": "114780",
    "end": "115920"
  },
  {
    "text": "languages that we actually really enjoy",
    "start": "115920",
    "end": "118740"
  },
  {
    "text": "so",
    "start": "118740",
    "end": "120180"
  },
  {
    "text": "nope what's that",
    "start": "120180",
    "end": "122159"
  },
  {
    "text": "yep so you might know someone in this",
    "start": "122159",
    "end": "124020"
  },
  {
    "text": "situation",
    "start": "124020",
    "end": "125100"
  },
  {
    "text": "you might be in this situation",
    "start": "125100",
    "end": "127920"
  },
  {
    "text": "and if you are in this situation you",
    "start": "127920",
    "end": "129840"
  },
  {
    "text": "should know that it's not all or nothing",
    "start": "129840",
    "end": "131039"
  },
  {
    "text": "it's not on the one hand Haskell and all",
    "start": "131039",
    "end": "133800"
  },
  {
    "text": "of the nice abstractions that come with",
    "start": "133800",
    "end": "135180"
  },
  {
    "text": "it and then on the other hand JavaScript",
    "start": "135180",
    "end": "136620"
  },
  {
    "text": "day in day out there are middle grounds",
    "start": "136620",
    "end": "138959"
  },
  {
    "text": "there are things that we can do to make",
    "start": "138959",
    "end": "140580"
  },
  {
    "text": "some of the tools and abstractions from",
    "start": "140580",
    "end": "142800"
  },
  {
    "text": "a proper functional programming language",
    "start": "142800",
    "end": "144480"
  },
  {
    "text": "available to us in whatever we happen to",
    "start": "144480",
    "end": "146580"
  },
  {
    "text": "be using at the time so the company that",
    "start": "146580",
    "end": "149580"
  },
  {
    "text": "I work for automentum uh kind of made a",
    "start": "149580",
    "end": "151620"
  },
  {
    "text": "switch a couple of months ago we were a",
    "start": "151620",
    "end": "154379"
  },
  {
    "text": "node.js company with all of the",
    "start": "154379",
    "end": "157739"
  },
  {
    "text": "pleasures and pains that that comes with",
    "start": "157739",
    "end": "160680"
  },
  {
    "text": "um and a couple of months ago we made a",
    "start": "160680",
    "end": "162480"
  },
  {
    "text": "decision to switch away from that the",
    "start": "162480",
    "end": "163680"
  },
  {
    "text": "language that we chose that we ended up",
    "start": "163680",
    "end": "164940"
  },
  {
    "text": "with was kotlin I had a whole big",
    "start": "164940",
    "end": "166680"
  },
  {
    "text": "spreadsheet of probably five or six",
    "start": "166680",
    "end": "168840"
  },
  {
    "text": "dimensions of language choices between",
    "start": "168840",
    "end": "170580"
  },
  {
    "text": "Haskell Scala F sharp everything oh",
    "start": "170580",
    "end": "172980"
  },
  {
    "text": "camel reason the whole shebang kotlin",
    "start": "172980",
    "end": "175920"
  },
  {
    "text": "won out from an ease of building a team",
    "start": "175920",
    "end": "178080"
  },
  {
    "text": "you can get a Java developer like",
    "start": "178080",
    "end": "180180"
  },
  {
    "text": "productive in in kotlin in a couple of",
    "start": "180180",
    "end": "182519"
  },
  {
    "text": "days it's a great power to weight ratio",
    "start": "182519",
    "end": "184920"
  },
  {
    "text": "it's very easy to roll out but it's",
    "start": "184920",
    "end": "186420"
  },
  {
    "text": "missing a bunch of things that I really",
    "start": "186420",
    "end": "187560"
  },
  {
    "text": "look for in a programming language",
    "start": "187560",
    "end": "189480"
  },
  {
    "text": "so we might not always be lucky enough",
    "start": "189480",
    "end": "192000"
  },
  {
    "text": "to be using Haskell but as they say in",
    "start": "192000",
    "end": "194340"
  },
  {
    "text": "the classics you can't always get what",
    "start": "194340",
    "end": "195599"
  },
  {
    "text": "you want but if you try hard enough",
    "start": "195599",
    "end": "197040"
  },
  {
    "text": "sometimes you can get what you need and",
    "start": "197040",
    "end": "199080"
  },
  {
    "text": "this talk is basically how to do that so",
    "start": "199080",
    "end": "201180"
  },
  {
    "text": "I'm going to run through some syntax",
    "start": "201180",
    "end": "202260"
  },
  {
    "text": "stuff with kotlin very quickly just",
    "start": "202260",
    "end": "203580"
  },
  {
    "text": "enough so that with the examples that",
    "start": "203580",
    "end": "204900"
  },
  {
    "text": "I'll show later on are a bit more",
    "start": "204900",
    "end": "206760"
  },
  {
    "text": "obvious",
    "start": "206760",
    "end": "208019"
  },
  {
    "text": "like I say this is not going to be a",
    "start": "208019",
    "end": "209400"
  },
  {
    "text": "talk on how to solve problems in kotlin",
    "start": "209400",
    "end": "211319"
  },
  {
    "text": "this is going to be a talk on how to",
    "start": "211319",
    "end": "212459"
  },
  {
    "text": "solve problems with kotlin I.E problems",
    "start": "212459",
    "end": "214980"
  },
  {
    "text": "that the language has it's going to be",
    "start": "214980",
    "end": "217620"
  },
  {
    "text": "how to do that at the value level rather",
    "start": "217620",
    "end": "219000"
  },
  {
    "text": "than at the compiler level to improve",
    "start": "219000",
    "end": "221040"
  },
  {
    "text": "the abstractions available but there is",
    "start": "221040",
    "end": "223080"
  },
  {
    "text": "so much syntax sugar it's very",
    "start": "223080",
    "end": "224640"
  },
  {
    "text": "calorically dense",
    "start": "224640",
    "end": "226260"
  },
  {
    "text": "so kotlin as a language ships two ways",
    "start": "226260",
    "end": "228900"
  },
  {
    "text": "to bind variables we have Val and VAR",
    "start": "228900",
    "end": "230700"
  },
  {
    "text": "Val is immutably bound by default the",
    "start": "230700",
    "end": "232620"
  },
  {
    "text": "VAR is mutably bound by default",
    "start": "232620",
    "end": "235080"
  },
  {
    "text": "um it ships some immutable data",
    "start": "235080",
    "end": "236459"
  },
  {
    "text": "structures it also ships a bunch of",
    "start": "236459",
    "end": "237599"
  },
  {
    "text": "mutable data structures nulls are",
    "start": "237599",
    "end": "240060"
  },
  {
    "text": "explicitly handled in the language this",
    "start": "240060",
    "end": "241560"
  },
  {
    "text": "is actually a really nice feature of it",
    "start": "241560",
    "end": "243000"
  },
  {
    "text": "so unlike Java which has null pointer",
    "start": "243000",
    "end": "245700"
  },
  {
    "text": "exceptions everywhere kotlin will give",
    "start": "245700",
    "end": "247560"
  },
  {
    "text": "you null safety of a kind",
    "start": "247560",
    "end": "250159"
  },
  {
    "text": "the functions themselves are first class",
    "start": "250159",
    "end": "252239"
  },
  {
    "text": "functions they're available in classes",
    "start": "252239",
    "end": "254040"
  },
  {
    "text": "and objects as well as by themselves so",
    "start": "254040",
    "end": "256859"
  },
  {
    "text": "functions can be declared as either",
    "start": "256859",
    "end": "258120"
  },
  {
    "text": "statements or Expressions if declared as",
    "start": "258120",
    "end": "260220"
  },
  {
    "text": "a statement you use the fun keyword if",
    "start": "260220",
    "end": "262620"
  },
  {
    "text": "declared is an expression you use Valor",
    "start": "262620",
    "end": "264300"
  },
  {
    "text": "VAR and declare it as a Lambda they can",
    "start": "264300",
    "end": "266940"
  },
  {
    "text": "be generic they can be passed around by",
    "start": "266940",
    "end": "268919"
  },
  {
    "text": "either construction or reference so in",
    "start": "268919",
    "end": "270780"
  },
  {
    "text": "this slide we have the the function not",
    "start": "270780",
    "end": "272759"
  },
  {
    "text": "which is generic in a takes a function",
    "start": "272759",
    "end": "274800"
  },
  {
    "text": "and calls it we then provide uh not odd",
    "start": "274800",
    "end": "277919"
  },
  {
    "text": "not underscore not odd double underscore",
    "start": "277919",
    "end": "279780"
  },
  {
    "text": "as three ways of showing how you can",
    "start": "279780",
    "end": "281400"
  },
  {
    "text": "pass functions around the first one we",
    "start": "281400",
    "end": "283139"
  },
  {
    "text": "pass a function by construction we",
    "start": "283139",
    "end": "284580"
  },
  {
    "text": "construct a function as a Lambda in the",
    "start": "284580",
    "end": "286860"
  },
  {
    "text": "function call second one we use a syntax",
    "start": "286860",
    "end": "289560"
  },
  {
    "text": "sugar where if you have a function that",
    "start": "289560",
    "end": "291600"
  },
  {
    "text": "has a single parameter kotlin will",
    "start": "291600",
    "end": "293520"
  },
  {
    "text": "autobind that parameter as it inside the",
    "start": "293520",
    "end": "296040"
  },
  {
    "text": "scope of the function so you have a",
    "start": "296040",
    "end": "297240"
  },
  {
    "text": "couple of really nice things like that",
    "start": "297240",
    "end": "298320"
  },
  {
    "text": "and then finally you can actually just",
    "start": "298320",
    "end": "299639"
  },
  {
    "text": "pass functions as first class citizens",
    "start": "299639",
    "end": "302880"
  },
  {
    "text": "um classes the same as Java we get rid",
    "start": "302880",
    "end": "305639"
  },
  {
    "text": "of Getters and Setters and instead use",
    "start": "305639",
    "end": "307320"
  },
  {
    "text": "Val and VAR as bound parameters to",
    "start": "307320",
    "end": "310080"
  },
  {
    "text": "determine whether or not it should",
    "start": "310080",
    "end": "311400"
  },
  {
    "text": "generate a getter and Setter or just a",
    "start": "311400",
    "end": "313259"
  },
  {
    "text": "getter we Allied the new keyword and",
    "start": "313259",
    "end": "316380"
  },
  {
    "text": "default visibility is that all uh all",
    "start": "316380",
    "end": "318840"
  },
  {
    "text": "parameters are public by default unless",
    "start": "318840",
    "end": "320520"
  },
  {
    "text": "you make them private all classes are",
    "start": "320520",
    "end": "322560"
  },
  {
    "text": "final by default unless you make them",
    "start": "322560",
    "end": "323940"
  },
  {
    "text": "open so it's quite a nice quite a nice",
    "start": "323940",
    "end": "326160"
  },
  {
    "text": "set of defaults data classes are a",
    "start": "326160",
    "end": "328139"
  },
  {
    "text": "special case they automatically derive a",
    "start": "328139",
    "end": "329880"
  },
  {
    "text": "couple of helper methods around a",
    "start": "329880",
    "end": "331259"
  },
  {
    "text": "quality and serialization",
    "start": "331259",
    "end": "334199"
  },
  {
    "text": "um sealed classes are what we're going",
    "start": "334199",
    "end": "335699"
  },
  {
    "text": "to see a lot of today they're",
    "start": "335699",
    "end": "336780"
  },
  {
    "text": "effectively the language's approach to",
    "start": "336780",
    "end": "338039"
  },
  {
    "text": "algebraic data types kind of",
    "start": "338039",
    "end": "340220"
  },
  {
    "text": "sealed classes are similar to Scala I",
    "start": "340220",
    "end": "343320"
  },
  {
    "text": "understand they can't be inherited",
    "start": "343320",
    "end": "344759"
  },
  {
    "text": "outside of the the file scope so",
    "start": "344759",
    "end": "347039"
  },
  {
    "text": "effectively the compiler can tell based",
    "start": "347039",
    "end": "349320"
  },
  {
    "text": "on where the sealed class is defined all",
    "start": "349320",
    "end": "351479"
  },
  {
    "text": "of the constructors that can actually",
    "start": "351479",
    "end": "352680"
  },
  {
    "text": "build something of this type which means",
    "start": "352680",
    "end": "354900"
  },
  {
    "text": "later when you're doing pattern matching",
    "start": "354900",
    "end": "356100"
  },
  {
    "text": "it can infer exhaustiveness at the call",
    "start": "356100",
    "end": "358080"
  },
  {
    "text": "site it's quite cool",
    "start": "358080",
    "end": "359759"
  },
  {
    "text": "interfaces are just like Javas there's",
    "start": "359759",
    "end": "361560"
  },
  {
    "text": "nothing nothing interesting there",
    "start": "361560",
    "end": "363600"
  },
  {
    "text": "as nice as the language is to kind of",
    "start": "363600",
    "end": "366000"
  },
  {
    "text": "come to wouldn't it be nice if we could",
    "start": "366000",
    "end": "367020"
  },
  {
    "text": "do something like this",
    "start": "367020",
    "end": "368520"
  },
  {
    "text": "um you know as nice as all the sugar and",
    "start": "368520",
    "end": "370020"
  },
  {
    "text": "everything is it'd be nice to be able to",
    "start": "370020",
    "end": "371699"
  },
  {
    "text": "say I take a generic F and F is generic",
    "start": "371699",
    "end": "373979"
  },
  {
    "text": "in another type you can't do this in",
    "start": "373979",
    "end": "375660"
  },
  {
    "text": "Java you can't do this in kotlin the",
    "start": "375660",
    "end": "377820"
  },
  {
    "text": "compiler will say you cannot apply a",
    "start": "377820",
    "end": "379259"
  },
  {
    "text": "type parameter to a type parameter F of",
    "start": "379259",
    "end": "381000"
  },
  {
    "text": "a is illegal",
    "start": "381000",
    "end": "382680"
  },
  {
    "text": "foreign",
    "start": "382680",
    "end": "384860"
  },
  {
    "text": "not really so there's an excellent paper",
    "start": "385759",
    "end": "388139"
  },
  {
    "text": "uh by Yelp and white I think from 2014",
    "start": "388139",
    "end": "391919"
  },
  {
    "text": "the title is lightweighted high",
    "start": "391919",
    "end": "394560"
  },
  {
    "text": "lightweight higher kinded types and it's",
    "start": "394560",
    "end": "397199"
  },
  {
    "text": "a very high school and accountable",
    "start": "397199",
    "end": "398280"
  },
  {
    "text": "Centric paper but effectively it centers",
    "start": "398280",
    "end": "399960"
  },
  {
    "text": "around an idea called the",
    "start": "399960",
    "end": "401580"
  },
  {
    "text": "functionalization and the idea is that",
    "start": "401580",
    "end": "403680"
  },
  {
    "text": "you can actually apply higher kind of",
    "start": "403680",
    "end": "405960"
  },
  {
    "text": "types to a language that has no idea",
    "start": "405960",
    "end": "407580"
  },
  {
    "text": "what that means as long as you're happy",
    "start": "407580",
    "end": "409380"
  },
  {
    "text": "to pay two depending on how you feel",
    "start": "409380",
    "end": "412139"
  },
  {
    "text": "about your code base small to medium",
    "start": "412139",
    "end": "413580"
  },
  {
    "text": "prices and the idea is that you can make",
    "start": "413580",
    "end": "415560"
  },
  {
    "text": "ad hoc polymorphism available post hoc",
    "start": "415560",
    "end": "417780"
  },
  {
    "text": "which is a pretty cool idea so we call",
    "start": "417780",
    "end": "419639"
  },
  {
    "text": "this typed de-functionalization",
    "start": "419639",
    "end": "422160"
  },
  {
    "text": "the functionalization is old 1972 I",
    "start": "422160",
    "end": "425280"
  },
  {
    "text": "think John c Reynolds was the first",
    "start": "425280",
    "end": "426539"
  },
  {
    "text": "person to talk about it but the idea is",
    "start": "426539",
    "end": "428280"
  },
  {
    "text": "it was it was created at a time where",
    "start": "428280",
    "end": "429720"
  },
  {
    "text": "functional programming languages were",
    "start": "429720",
    "end": "430979"
  },
  {
    "text": "very popular but the interpreters that",
    "start": "430979",
    "end": "432479"
  },
  {
    "text": "you mostly ran these things on were very",
    "start": "432479",
    "end": "433919"
  },
  {
    "text": "slow",
    "start": "433919",
    "end": "434699"
  },
  {
    "text": "and one of the one of the slow bits was",
    "start": "434699",
    "end": "436860"
  },
  {
    "text": "taking a higher order function finding",
    "start": "436860",
    "end": "438720"
  },
  {
    "text": "the core side of the function figuring",
    "start": "438720",
    "end": "439860"
  },
  {
    "text": "out what to do with it it was a slow",
    "start": "439860",
    "end": "441240"
  },
  {
    "text": "transform so we come up with this with",
    "start": "441240",
    "end": "442979"
  },
  {
    "text": "this compiler optimization where you",
    "start": "442979",
    "end": "445680"
  },
  {
    "text": "read a program that is written as a",
    "start": "445680",
    "end": "448020"
  },
  {
    "text": "higher order function as a higher order",
    "start": "448020",
    "end": "449160"
  },
  {
    "text": "program and then build this whole set of",
    "start": "449160",
    "end": "451860"
  },
  {
    "text": "transforms that turn it into a single",
    "start": "451860",
    "end": "453240"
  },
  {
    "text": "order program and it's a compile time",
    "start": "453240",
    "end": "455160"
  },
  {
    "text": "technique so it's intended not intended",
    "start": "455160",
    "end": "456720"
  },
  {
    "text": "for readability it's intended for",
    "start": "456720",
    "end": "458539"
  },
  {
    "text": "optimization of performance later on",
    "start": "458539",
    "end": "462000"
  },
  {
    "text": "so I'm using a quasi or camel syntax of",
    "start": "462000",
    "end": "465180"
  },
  {
    "text": "this because you need uh gadts and",
    "start": "465180",
    "end": "467340"
  },
  {
    "text": "kotlin doesn't have them so don't worry",
    "start": "467340",
    "end": "468960"
  },
  {
    "text": "too much about the syntax of this this",
    "start": "468960",
    "end": "470280"
  },
  {
    "text": "is just to show the idea of",
    "start": "470280",
    "end": "471900"
  },
  {
    "text": "defunctionalization we can define a",
    "start": "471900",
    "end": "473940"
  },
  {
    "text": "method fold fold as a recursive function",
    "start": "473940",
    "end": "475860"
  },
  {
    "text": "it takes a function from A to B and",
    "start": "475860",
    "end": "478979"
  },
  {
    "text": "returns a b it takes a b and it takes a",
    "start": "478979",
    "end": "480900"
  },
  {
    "text": "list of a so it does the classic fold",
    "start": "480900",
    "end": "483060"
  },
  {
    "text": "reduce whatever you want to call it",
    "start": "483060",
    "end": "485300"
  },
  {
    "text": "now using this base functional fold we",
    "start": "485300",
    "end": "488099"
  },
  {
    "text": "can Define things like sum or add that",
    "start": "488099",
    "end": "489960"
  },
  {
    "text": "have these operations on list this is",
    "start": "489960",
    "end": "492720"
  },
  {
    "text": "you know the the standard functional",
    "start": "492720",
    "end": "494759"
  },
  {
    "text": "programming pass a function to a",
    "start": "494759",
    "end": "496259"
  },
  {
    "text": "function and do a whole bunch of stuff",
    "start": "496259",
    "end": "497280"
  },
  {
    "text": "with it",
    "start": "497280",
    "end": "498360"
  },
  {
    "text": "but if we're working on an interpreter",
    "start": "498360",
    "end": "499979"
  },
  {
    "text": "where that can't be done we need some",
    "start": "499979",
    "end": "501780"
  },
  {
    "text": "way of of expressing this so we start by",
    "start": "501780",
    "end": "504180"
  },
  {
    "text": "defining a type called Arrow arrow is a",
    "start": "504180",
    "end": "506520"
  },
  {
    "text": "gadt on the left hand side of the gadt",
    "start": "506520",
    "end": "509039"
  },
  {
    "text": "we Define things called Brands brands",
    "start": "509039",
    "end": "511139"
  },
  {
    "text": "are just the constructors for the for",
    "start": "511139",
    "end": "512580"
  },
  {
    "text": "the data type they'll be used later by a",
    "start": "512580",
    "end": "515039"
  },
  {
    "text": "function to determine what operation to",
    "start": "515039",
    "end": "516659"
  },
  {
    "text": "run on the right hand side of the gadt",
    "start": "516659",
    "end": "519060"
  },
  {
    "text": "we have a the type arrow and we say that",
    "start": "519060",
    "end": "522060"
  },
  {
    "text": "the types of the gdt are a tuple and",
    "start": "522060",
    "end": "525540"
  },
  {
    "text": "then a value and the Tuple is",
    "start": "525540",
    "end": "527880"
  },
  {
    "text": "effectively the pair of values from",
    "start": "527880",
    "end": "529980"
  },
  {
    "text": "input to Output that the function will",
    "start": "529980",
    "end": "531540"
  },
  {
    "text": "have to implement so we enforce what the",
    "start": "531540",
    "end": "533700"
  },
  {
    "text": "function that is going to be used and",
    "start": "533700",
    "end": "535380"
  },
  {
    "text": "created by these brands are at the time",
    "start": "535380",
    "end": "537839"
  },
  {
    "text": "of construction of the brand itself",
    "start": "537839",
    "end": "540240"
  },
  {
    "text": "now that we have this big list of things",
    "start": "540240",
    "end": "542459"
  },
  {
    "text": "that we say everywhere in our program we",
    "start": "542459",
    "end": "544260"
  },
  {
    "text": "have a function that does adding we have",
    "start": "544260",
    "end": "545880"
  },
  {
    "text": "a function that does plusing we have all",
    "start": "545880",
    "end": "547200"
  },
  {
    "text": "of these high order functions around",
    "start": "547200",
    "end": "549660"
  },
  {
    "text": "um we now Define a type called a method",
    "start": "549660",
    "end": "551820"
  },
  {
    "text": "called apply and what apply does is it",
    "start": "551820",
    "end": "554339"
  },
  {
    "text": "effectively pattern matches over all of",
    "start": "554339",
    "end": "556260"
  },
  {
    "text": "the potential Constructors of the arrow",
    "start": "556260",
    "end": "557880"
  },
  {
    "text": "type and it takes the higher order",
    "start": "557880",
    "end": "559980"
  },
  {
    "text": "functions that were defined in place",
    "start": "559980",
    "end": "561420"
  },
  {
    "text": "replaces them with the brand that says",
    "start": "561420",
    "end": "564300"
  },
  {
    "text": "what type they were and an invocation to",
    "start": "564300",
    "end": "566399"
  },
  {
    "text": "apply and then apply does a lookup",
    "start": "566399",
    "end": "568200"
  },
  {
    "text": "basically in this big dictionary of ah",
    "start": "568200",
    "end": "570240"
  },
  {
    "text": "that was a plus okay let me go find the",
    "start": "570240",
    "end": "571620"
  },
  {
    "text": "function for a higher order plus that",
    "start": "571620",
    "end": "572880"
  },
  {
    "text": "was a cons let me go find the function",
    "start": "572880",
    "end": "574019"
  },
  {
    "text": "for the higher order columns so we can",
    "start": "574019",
    "end": "576000"
  },
  {
    "text": "now replace any the compiler will",
    "start": "576000",
    "end": "578279"
  },
  {
    "text": "replace at compile time any reference to",
    "start": "578279",
    "end": "580440"
  },
  {
    "text": "a higher order function with an",
    "start": "580440",
    "end": "581700"
  },
  {
    "text": "invocation to apply with the brand and",
    "start": "581700",
    "end": "584640"
  },
  {
    "text": "the arguments so now we can replace our",
    "start": "584640",
    "end": "587760"
  },
  {
    "text": "recursive fold function with something",
    "start": "587760",
    "end": "589860"
  },
  {
    "text": "that is not a higher order function this",
    "start": "589860",
    "end": "591600"
  },
  {
    "text": "is an ordinary function it takes a brand",
    "start": "591600",
    "end": "594480"
  },
  {
    "text": "you type Arrow a b it takes a b and a",
    "start": "594480",
    "end": "597180"
  },
  {
    "text": "list of a and it returns a b",
    "start": "597180",
    "end": "599160"
  },
  {
    "text": "now we see here when we get into the",
    "start": "599160",
    "end": "601260"
  },
  {
    "text": "recursive portion where we actually",
    "start": "601260",
    "end": "602459"
  },
  {
    "text": "iterate over the list we call apply we",
    "start": "602459",
    "end": "605399"
  },
  {
    "text": "don't call the function that we've been",
    "start": "605399",
    "end": "607080"
  },
  {
    "text": "provided in the first position we pass",
    "start": "607080",
    "end": "609000"
  },
  {
    "text": "apply the brand and then we apply",
    "start": "609000",
    "end": "610500"
  },
  {
    "text": "whatever it is that we need to do",
    "start": "610500",
    "end": "613080"
  },
  {
    "text": "um and you can see that here now when we",
    "start": "613080",
    "end": "615540"
  },
  {
    "text": "invoke sum or we invoke plus we invoke",
    "start": "615540",
    "end": "617399"
  },
  {
    "text": "it with the brand of the operation that",
    "start": "617399",
    "end": "619620"
  },
  {
    "text": "it should be using so previously where",
    "start": "619620",
    "end": "621360"
  },
  {
    "text": "some would add numbers this time it just",
    "start": "621360",
    "end": "622920"
  },
  {
    "text": "makes a call to FN plus applied as a",
    "start": "622920",
    "end": "624779"
  },
  {
    "text": "lookup on FN plus finds the function",
    "start": "624779",
    "end": "626279"
  },
  {
    "text": "that adds two numbers",
    "start": "626279",
    "end": "628260"
  },
  {
    "text": "figures out how to tie it all together",
    "start": "628260",
    "end": "629700"
  },
  {
    "text": "compile time operation",
    "start": "629700",
    "end": "632459"
  },
  {
    "text": "but we're not here to talk about high",
    "start": "632459",
    "end": "634440"
  },
  {
    "text": "order functions that's a problem that's",
    "start": "634440",
    "end": "635640"
  },
  {
    "text": "been solved for quite a while so instead",
    "start": "635640",
    "end": "639060"
  },
  {
    "text": "how do we apply this to to types",
    "start": "639060",
    "end": "640980"
  },
  {
    "text": "themselves well the implications become",
    "start": "640980",
    "end": "643740"
  },
  {
    "text": "a bit more apparent when you think about",
    "start": "643740",
    "end": "645120"
  },
  {
    "text": "what a functor as an interface on the",
    "start": "645120",
    "end": "647579"
  },
  {
    "text": "jvm kind of looks like we want to be",
    "start": "647579",
    "end": "649500"
  },
  {
    "text": "able to say here is a functor it's",
    "start": "649500",
    "end": "651360"
  },
  {
    "text": "generic in some type f f is generic in",
    "start": "651360",
    "end": "653760"
  },
  {
    "text": "some type A and B and whatever else that",
    "start": "653760",
    "end": "655560"
  },
  {
    "text": "we're going to do with it it doesn't",
    "start": "655560",
    "end": "656399"
  },
  {
    "text": "care about the container and this is an",
    "start": "656399",
    "end": "658320"
  },
  {
    "text": "operation that applies to things of that",
    "start": "658320",
    "end": "660180"
  },
  {
    "text": "type",
    "start": "660180",
    "end": "661200"
  },
  {
    "text": "we'd like to be able to Define ID as",
    "start": "661200",
    "end": "662880"
  },
  {
    "text": "something that implements this and here",
    "start": "662880",
    "end": "665220"
  },
  {
    "text": "is its implementation of it",
    "start": "665220",
    "end": "666959"
  },
  {
    "text": "now kotlin doesn't support this at all",
    "start": "666959",
    "end": "669360"
  },
  {
    "text": "there's no way to write this this will",
    "start": "669360",
    "end": "670500"
  },
  {
    "text": "not compile you can't do anything to",
    "start": "670500",
    "end": "671760"
  },
  {
    "text": "make it compile Dreadful right so the",
    "start": "671760",
    "end": "674880"
  },
  {
    "text": "thing that a lot of people do you see",
    "start": "674880",
    "end": "676620"
  },
  {
    "text": "this a lot in a camel with the module",
    "start": "676620",
    "end": "678240"
  },
  {
    "text": "functors you see this a lot in Java and",
    "start": "678240",
    "end": "679920"
  },
  {
    "text": "kotlin and everything is we monomorphize",
    "start": "679920",
    "end": "681480"
  },
  {
    "text": "by hand so we write an INT functor and a",
    "start": "681480",
    "end": "684360"
  },
  {
    "text": "string functor and whatever else and",
    "start": "684360",
    "end": "686220"
  },
  {
    "text": "then it's our job to pass them around by",
    "start": "686220",
    "end": "687720"
  },
  {
    "text": "hand to whatever parts of the program",
    "start": "687720",
    "end": "688800"
  },
  {
    "text": "we're using that gets really old really",
    "start": "688800",
    "end": "690839"
  },
  {
    "text": "really quickly we write code gen but now",
    "start": "690839",
    "end": "693600"
  },
  {
    "text": "we're just writing compilers ourselves",
    "start": "693600",
    "end": "694860"
  },
  {
    "text": "for the sake of using compilers",
    "start": "694860",
    "end": "696300"
  },
  {
    "text": "ourselves we give up and we go and use",
    "start": "696300",
    "end": "698100"
  },
  {
    "text": "another language that supports the",
    "start": "698100",
    "end": "699360"
  },
  {
    "text": "things we want to use",
    "start": "699360",
    "end": "700860"
  },
  {
    "text": "we don't have to give up though",
    "start": "700860",
    "end": "702899"
  },
  {
    "text": "so the paper uh lightweight higher",
    "start": "702899",
    "end": "705240"
  },
  {
    "text": "kinded polymorphism",
    "start": "705240",
    "end": "707339"
  },
  {
    "text": "um shows us a way that we can actually",
    "start": "707339",
    "end": "709200"
  },
  {
    "text": "Express this take the generic F of a and",
    "start": "709200",
    "end": "712740"
  },
  {
    "text": "lift it up once into another interface",
    "start": "712740",
    "end": "714180"
  },
  {
    "text": "so we Define an interface kind and kind",
    "start": "714180",
    "end": "716279"
  },
  {
    "text": "is said to be generic in F and a and",
    "start": "716279",
    "end": "718980"
  },
  {
    "text": "effectively all kind is is like a single",
    "start": "718980",
    "end": "721140"
  },
  {
    "text": "value map between the wrapping container",
    "start": "721140",
    "end": "724500"
  },
  {
    "text": "type and the inner type so we have F of",
    "start": "724500",
    "end": "726540"
  },
  {
    "text": "a represented by kind F of a",
    "start": "726540",
    "end": "729240"
  },
  {
    "text": "we create a private Constructor for ID",
    "start": "729240",
    "end": "731459"
  },
  {
    "text": "and effectively all this is is a Brand",
    "start": "731459",
    "end": "734160"
  },
  {
    "text": "This Is How we'll do a lookup later to",
    "start": "734160",
    "end": "736200"
  },
  {
    "text": "tell should I be able to execute this",
    "start": "736200",
    "end": "737880"
  },
  {
    "text": "function in this context",
    "start": "737880",
    "end": "739640"
  },
  {
    "text": "the brand is constructed privately which",
    "start": "739640",
    "end": "742860"
  },
  {
    "text": "means nothing in the program can",
    "start": "742860",
    "end": "744120"
  },
  {
    "text": "actually construct one",
    "start": "744120",
    "end": "746100"
  },
  {
    "text": "um and so the only way that you can",
    "start": "746100",
    "end": "747899"
  },
  {
    "text": "possibly have a value of this brand is",
    "start": "747899",
    "end": "749519"
  },
  {
    "text": "from a function in this file",
    "start": "749519",
    "end": "751740"
  },
  {
    "text": "we then Define a type Alias this type",
    "start": "751740",
    "end": "753600"
  },
  {
    "text": "Alias is just so that we don't have to",
    "start": "753600",
    "end": "755040"
  },
  {
    "text": "type kind F A everywhere the type Alias",
    "start": "755040",
    "end": "757380"
  },
  {
    "text": "gives us a value ID of and generic in a",
    "start": "757380",
    "end": "760860"
  },
  {
    "text": "and that Maps over directly to kind for",
    "start": "760860",
    "end": "763380"
  },
  {
    "text": "idea so it's just sugar kotlin loves",
    "start": "763380",
    "end": "766260"
  },
  {
    "text": "sugar",
    "start": "766260",
    "end": "767459"
  },
  {
    "text": "um",
    "start": "767459",
    "end": "768120"
  },
  {
    "text": "and then finally we Define a method fix",
    "start": "768120",
    "end": "769920"
  },
  {
    "text": "and this is the part one of the prices",
    "start": "769920",
    "end": "771120"
  },
  {
    "text": "that I was saying you have to pay there",
    "start": "771120",
    "end": "773279"
  },
  {
    "text": "is no good way to go from a kind of 4 ID",
    "start": "773279",
    "end": "777000"
  },
  {
    "text": "and a into an ID of a there's no",
    "start": "777000",
    "end": "779579"
  },
  {
    "text": "transform you can write that will the",
    "start": "779579",
    "end": "781139"
  },
  {
    "text": "type system will recognize because if we",
    "start": "781139",
    "end": "782519"
  },
  {
    "text": "could do that we just have type classes",
    "start": "782519",
    "end": "783779"
  },
  {
    "text": "we don't need any of this so we'll use",
    "start": "783779",
    "end": "785519"
  },
  {
    "text": "an unchecked cost",
    "start": "785519",
    "end": "788220"
  },
  {
    "text": "yeah a lot of winters a lot of like oh I",
    "start": "788220",
    "end": "790740"
  },
  {
    "text": "I know but this is the only price you",
    "start": "790740",
    "end": "792779"
  },
  {
    "text": "pay to have this everywhere else in the",
    "start": "792779",
    "end": "794220"
  },
  {
    "text": "program now obviously what this opens up",
    "start": "794220",
    "end": "795779"
  },
  {
    "text": "is that pretty much anything your",
    "start": "795779",
    "end": "797160"
  },
  {
    "text": "program can say hey by the way I'm a",
    "start": "797160",
    "end": "798720"
  },
  {
    "text": "functor I promised I'm an ID it's all",
    "start": "798720",
    "end": "800700"
  },
  {
    "text": "fine but you have this already this is",
    "start": "800700",
    "end": "802740"
  },
  {
    "text": "already a price you pay with with",
    "start": "802740",
    "end": "804180"
  },
  {
    "text": "whatever language you're using the value",
    "start": "804180",
    "end": "805980"
  },
  {
    "text": "of this is that as long as you are not a",
    "start": "805980",
    "end": "808920"
  },
  {
    "text": "malicious actor nothing in your program",
    "start": "808920",
    "end": "811019"
  },
  {
    "text": "can be cast from a kind to an ID unless",
    "start": "811019",
    "end": "814200"
  },
  {
    "text": "you use the method that is defined",
    "start": "814200",
    "end": "815880"
  },
  {
    "text": "specifically for this case",
    "start": "815880",
    "end": "817500"
  },
  {
    "text": "finally we Define our class ID and we",
    "start": "817500",
    "end": "820200"
  },
  {
    "text": "say that ID implements ID of that is",
    "start": "820200",
    "end": "822060"
  },
  {
    "text": "that ID can be cast into kind f f of a",
    "start": "822060",
    "end": "825720"
  },
  {
    "text": "where f is 4 ID",
    "start": "825720",
    "end": "827820"
  },
  {
    "text": "so we have a new type class now we have",
    "start": "827820",
    "end": "829860"
  },
  {
    "text": "a type class function function is",
    "start": "829860",
    "end": "831660"
  },
  {
    "text": "generic in F and we've replaced where we",
    "start": "831660",
    "end": "834180"
  },
  {
    "text": "would normally say and F of a DOT map is",
    "start": "834180",
    "end": "837000"
  },
  {
    "text": "a function we replace that with saying",
    "start": "837000",
    "end": "838560"
  },
  {
    "text": "kind F of a DOT map and what that does",
    "start": "838560",
    "end": "842100"
  },
  {
    "text": "is effectively allows us to say if",
    "start": "842100",
    "end": "844740"
  },
  {
    "text": "something says that it implements",
    "start": "844740",
    "end": "846300"
  },
  {
    "text": "functor",
    "start": "846300",
    "end": "847860"
  },
  {
    "text": "Define a method on a value that says",
    "start": "847860",
    "end": "850380"
  },
  {
    "text": "that it is of kind F of a called map and",
    "start": "850380",
    "end": "853980"
  },
  {
    "text": "this is how it operates so we've defined",
    "start": "853980",
    "end": "855839"
  },
  {
    "text": "our our map for functor RF map depending",
    "start": "855839",
    "end": "857820"
  },
  {
    "text": "on which language you you happen to be",
    "start": "857820",
    "end": "859320"
  },
  {
    "text": "using at the time we then Define our",
    "start": "859320",
    "end": "861360"
  },
  {
    "text": "class so we say our class ID implements",
    "start": "861360",
    "end": "863579"
  },
  {
    "text": "ID off",
    "start": "863579",
    "end": "864959"
  },
  {
    "text": "and we Define a companion object and we",
    "start": "864959",
    "end": "867600"
  },
  {
    "text": "Define a concrete implementation of the",
    "start": "867600",
    "end": "869339"
  },
  {
    "text": "map",
    "start": "869339",
    "end": "870180"
  },
  {
    "text": "so we have in our ID function we have a",
    "start": "870180",
    "end": "872459"
  },
  {
    "text": "concrete implementation of map",
    "start": "872459",
    "end": "874220"
  },
  {
    "text": "the the value the class is of Ida we",
    "start": "874220",
    "end": "877860"
  },
  {
    "text": "Define a method from A to B we",
    "start": "877860",
    "end": "879779"
  },
  {
    "text": "destructure the ID and take out the",
    "start": "879779",
    "end": "881279"
  },
  {
    "text": "value we apply it to the function we",
    "start": "881279",
    "end": "882600"
  },
  {
    "text": "rewrap it in ID and now we have an idb",
    "start": "882600",
    "end": "885620"
  },
  {
    "text": "the next step is we Define an interface",
    "start": "885620",
    "end": "888240"
  },
  {
    "text": "for the particular ID functor instance",
    "start": "888240",
    "end": "891360"
  },
  {
    "text": "that implements functor",
    "start": "891360",
    "end": "893040"
  },
  {
    "text": "and we make a reference inside that to",
    "start": "893040",
    "end": "895260"
  },
  {
    "text": "say this ID functor instance uses the ID",
    "start": "895260",
    "end": "898380"
  },
  {
    "text": "class and uses the map method on that",
    "start": "898380",
    "end": "900600"
  },
  {
    "text": "and the way that we can see that is",
    "start": "900600",
    "end": "901800"
  },
  {
    "text": "inside the functor instance we call fix",
    "start": "901800",
    "end": "903959"
  },
  {
    "text": "right remembering that fix is that",
    "start": "903959",
    "end": "905880"
  },
  {
    "text": "method that takes us from a kind F of a",
    "start": "905880",
    "end": "907920"
  },
  {
    "text": "to a concrete implementation of whatever",
    "start": "907920",
    "end": "909480"
  },
  {
    "text": "that class is",
    "start": "909480",
    "end": "910800"
  },
  {
    "text": "the functor instance and the plumbing",
    "start": "910800",
    "end": "913139"
  },
  {
    "text": "that happens to make this all tie",
    "start": "913139",
    "end": "914639"
  },
  {
    "text": "together is how it does dynamic dispatch",
    "start": "914639",
    "end": "916860"
  },
  {
    "text": "to find where the right fixed function",
    "start": "916860",
    "end": "918779"
  },
  {
    "text": "is if it can't it does it can't find",
    "start": "918779",
    "end": "921420"
  },
  {
    "text": "accidentally the wrong fixed function if",
    "start": "921420",
    "end": "923459"
  },
  {
    "text": "it can't find a fix function it will",
    "start": "923459",
    "end": "925380"
  },
  {
    "text": "fail to compile so you actually have",
    "start": "925380",
    "end": "926880"
  },
  {
    "text": "compile time safety of I have written",
    "start": "926880",
    "end": "928680"
  },
  {
    "text": "all of the instances that I need to",
    "start": "928680",
    "end": "931139"
  },
  {
    "text": "um and then finally we Define a",
    "start": "931139",
    "end": "932760"
  },
  {
    "text": "companion object a companion object is",
    "start": "932760",
    "end": "934920"
  },
  {
    "text": "kind of like static in Java defines",
    "start": "934920",
    "end": "937139"
  },
  {
    "text": "something that we can say this is a",
    "start": "937139",
    "end": "938880"
  },
  {
    "text": "context that will give us a functor",
    "start": "938880",
    "end": "941100"
  },
  {
    "text": "interface",
    "start": "941100",
    "end": "942240"
  },
  {
    "text": "and the way that that's useful",
    "start": "942240",
    "end": "944160"
  },
  {
    "text": "um is in the next slide so in order to",
    "start": "944160",
    "end": "946560"
  },
  {
    "text": "use these things ad hoc polymorphically",
    "start": "946560",
    "end": "948480"
  },
  {
    "text": "we actually need something called a",
    "start": "948480",
    "end": "949740"
  },
  {
    "text": "witness this is the second price you",
    "start": "949740",
    "end": "951540"
  },
  {
    "text": "have to pay at the moment although",
    "start": "951540",
    "end": "953220"
  },
  {
    "text": "hopefully not for much longer",
    "start": "953220",
    "end": "955079"
  },
  {
    "text": "um because we didn't Define the the",
    "start": "955079",
    "end": "958380"
  },
  {
    "text": "method in this slide we didn't Define",
    "start": "958380",
    "end": "960360"
  },
  {
    "text": "map on Ida from the function perspective",
    "start": "960360",
    "end": "963899"
  },
  {
    "text": "we defined it on kind f a which means",
    "start": "963899",
    "end": "966480"
  },
  {
    "text": "there's no way to have an ID and say hey",
    "start": "966480",
    "end": "968399"
  },
  {
    "text": "by the way ID is a function ID has.map",
    "start": "968399",
    "end": "970440"
  },
  {
    "text": "because then we have type classes so",
    "start": "970440",
    "end": "972600"
  },
  {
    "text": "what we end up needing to do is to say",
    "start": "972600",
    "end": "975300"
  },
  {
    "text": "here is something that gives ID all the",
    "start": "975300",
    "end": "978779"
  },
  {
    "text": "methods that a functor needs",
    "start": "978779",
    "end": "981300"
  },
  {
    "text": "and here is something that if you here",
    "start": "981300",
    "end": "984060"
  },
  {
    "text": "is an ID instance that can take those",
    "start": "984060",
    "end": "986339"
  },
  {
    "text": "methods extend itself and use those",
    "start": "986339",
    "end": "988980"
  },
  {
    "text": "methods so a witness or evidence or",
    "start": "988980",
    "end": "991199"
  },
  {
    "text": "whatever you want to call it is",
    "start": "991199",
    "end": "992160"
  },
  {
    "text": "effectively a function that contains",
    "start": "992160",
    "end": "993959"
  },
  {
    "text": "some way of decorating",
    "start": "993959",
    "end": "995940"
  },
  {
    "text": "the value to say give this thing the",
    "start": "995940",
    "end": "999240"
  },
  {
    "text": "methods that it needs and I'll go",
    "start": "999240",
    "end": "1001459"
  },
  {
    "text": "through what the process for that is in",
    "start": "1001459",
    "end": "1002839"
  },
  {
    "text": "a second but effectively we now have a",
    "start": "1002839",
    "end": "1004399"
  },
  {
    "text": "way to tie ID functor to ID which means",
    "start": "1004399",
    "end": "1007339"
  },
  {
    "text": "that we can at any function pass in",
    "start": "1007339",
    "end": "1009980"
  },
  {
    "text": "something that says",
    "start": "1009980",
    "end": "1011620"
  },
  {
    "text": "and use map on it",
    "start": "1011620",
    "end": "1014120"
  },
  {
    "text": "so to understand this you have to",
    "start": "1014120",
    "end": "1016459"
  },
  {
    "text": "understand something called extension",
    "start": "1016459",
    "end": "1017600"
  },
  {
    "text": "functions",
    "start": "1017600",
    "end": "1018860"
  },
  {
    "text": "um this is I don't know the other",
    "start": "1018860",
    "end": "1021920"
  },
  {
    "text": "languages that might implement this but",
    "start": "1021920",
    "end": "1023060"
  },
  {
    "text": "the way that kotlin does it is quite",
    "start": "1023060",
    "end": "1024260"
  },
  {
    "text": "nice inside an interface you can say",
    "start": "1024260",
    "end": "1026660"
  },
  {
    "text": "anything that implements this interface",
    "start": "1026660",
    "end": "1028100"
  },
  {
    "text": "actually builds these functions for",
    "start": "1028100",
    "end": "1030199"
  },
  {
    "text": "these totally unrelated types",
    "start": "1030199",
    "end": "1032600"
  },
  {
    "text": "that sounds kind of scary it sounds like",
    "start": "1032600",
    "end": "1033918"
  },
  {
    "text": "monkey patching right but this is monkey",
    "start": "1033919",
    "end": "1036020"
  },
  {
    "text": "patching where the monkey has to opt",
    "start": "1036020",
    "end": "1037760"
  },
  {
    "text": "into holding the banana so",
    "start": "1037760",
    "end": "1040459"
  },
  {
    "text": "you can't affect something else's scope",
    "start": "1040459",
    "end": "1043100"
  },
  {
    "text": "like whatever you want however you want",
    "start": "1043100",
    "end": "1045380"
  },
  {
    "text": "to do it you give it the option of",
    "start": "1045380",
    "end": "1049160"
  },
  {
    "text": "affecting its own scope and this is",
    "start": "1049160",
    "end": "1051200"
  },
  {
    "text": "controlled by importing these functions",
    "start": "1051200",
    "end": "1053179"
  },
  {
    "text": "into the namespace where you use them so",
    "start": "1053179",
    "end": "1055340"
  },
  {
    "text": "I've defined a method here on ID of",
    "start": "1055340",
    "end": "1058400"
  },
  {
    "text": "which we remember is just kind for idea",
    "start": "1058400",
    "end": "1060679"
  },
  {
    "text": "so I'm saying for any ID kind there is a",
    "start": "1060679",
    "end": "1064340"
  },
  {
    "text": "method map",
    "start": "1064340",
    "end": "1065419"
  },
  {
    "text": "now unless I explicitly then say hi I'm",
    "start": "1065419",
    "end": "1068480"
  },
  {
    "text": "an ID function and I really want that",
    "start": "1068480",
    "end": "1070160"
  },
  {
    "text": "method map it won't be available to me",
    "start": "1070160",
    "end": "1073100"
  },
  {
    "text": "that's where this witness comes in so",
    "start": "1073100",
    "end": "1074600"
  },
  {
    "text": "the witness is something where we",
    "start": "1074600",
    "end": "1076340"
  },
  {
    "text": "basically say",
    "start": "1076340",
    "end": "1077660"
  },
  {
    "text": "run all computations inside the scope of",
    "start": "1077660",
    "end": "1080660"
  },
  {
    "text": "this thing",
    "start": "1080660",
    "end": "1082160"
  },
  {
    "text": "and any anything that is of a particular",
    "start": "1082160",
    "end": "1085400"
  },
  {
    "text": "type that I know about decorated in this",
    "start": "1085400",
    "end": "1087380"
  },
  {
    "text": "way",
    "start": "1087380",
    "end": "1088100"
  },
  {
    "text": "so the witness will basically say",
    "start": "1088100",
    "end": "1090320"
  },
  {
    "text": "all kind for Ida actually do Define a",
    "start": "1090320",
    "end": "1093380"
  },
  {
    "text": "map they can be used as functions this",
    "start": "1093380",
    "end": "1094880"
  },
  {
    "text": "is great",
    "start": "1094880",
    "end": "1096919"
  },
  {
    "text": "so how can this help what are we",
    "start": "1096919",
    "end": "1098299"
  },
  {
    "text": "actually going to do you know so far",
    "start": "1098299",
    "end": "1099440"
  },
  {
    "text": "we've had a bunch of what look like kind",
    "start": "1099440",
    "end": "1101419"
  },
  {
    "text": "of weird compile time changes that",
    "start": "1101419",
    "end": "1103280"
  },
  {
    "text": "change the lookup table of where we",
    "start": "1103280",
    "end": "1105320"
  },
  {
    "text": "Define functions",
    "start": "1105320",
    "end": "1107059"
  },
  {
    "text": "um arrow is the library that I'm",
    "start": "1107059",
    "end": "1108679"
  },
  {
    "text": "discussing here arrow is brilliant it's",
    "start": "1108679",
    "end": "1110360"
  },
  {
    "text": "really cool it's an implementation of",
    "start": "1110360",
    "end": "1111980"
  },
  {
    "text": "this idea with a whole bunch of",
    "start": "1111980",
    "end": "1113419"
  },
  {
    "text": "syntactical ethnicity",
    "start": "1113419",
    "end": "1115280"
  },
  {
    "text": "um the things that I really like about",
    "start": "1115280",
    "end": "1116179"
  },
  {
    "text": "it it provides a whole bunch of building",
    "start": "1116179",
    "end": "1117380"
  },
  {
    "text": "blocks for functional programming that",
    "start": "1117380",
    "end": "1118820"
  },
  {
    "text": "aren't really available in kotlin things",
    "start": "1118820",
    "end": "1120799"
  },
  {
    "text": "like carrying partial application a",
    "start": "1120799",
    "end": "1123080"
  },
  {
    "text": "bunch of lightweight higher kind of",
    "start": "1123080",
    "end": "1124400"
  },
  {
    "text": "types A whole bunch of really really",
    "start": "1124400",
    "end": "1125539"
  },
  {
    "text": "cool things it ships a whole bunch of",
    "start": "1125539",
    "end": "1127820"
  },
  {
    "text": "standard containers that obey the spec",
    "start": "1127820",
    "end": "1130100"
  },
  {
    "text": "that it builds up in terms of the the",
    "start": "1130100",
    "end": "1131960"
  },
  {
    "text": "type class or pedia that it provides so",
    "start": "1131960",
    "end": "1133880"
  },
  {
    "text": "it builds options IO uh you know all",
    "start": "1133880",
    "end": "1137360"
  },
  {
    "text": "that kind of stuff that you get from the",
    "start": "1137360",
    "end": "1139220"
  },
  {
    "text": "Haskell standard library or any of the",
    "start": "1139220",
    "end": "1140660"
  },
  {
    "text": "alternative standard libraries it has an",
    "start": "1140660",
    "end": "1142340"
  },
  {
    "text": "option for that it has a very very rich",
    "start": "1142340",
    "end": "1144380"
  },
  {
    "text": "lens and Optics Library it does a ton of",
    "start": "1144380",
    "end": "1146419"
  },
  {
    "text": "work around I O and effects and async",
    "start": "1146419",
    "end": "1148520"
  },
  {
    "text": "and all that kind of stuff so it's got a",
    "start": "1148520",
    "end": "1149960"
  },
  {
    "text": "very very rich standard library and the",
    "start": "1149960",
    "end": "1151940"
  },
  {
    "text": "thing that it does that's really nice is",
    "start": "1151940",
    "end": "1153200"
  },
  {
    "text": "it has a very rich type class of pedia",
    "start": "1153200",
    "end": "1154940"
  },
  {
    "text": "so if you are working on something and",
    "start": "1154940",
    "end": "1157640"
  },
  {
    "text": "you think oh man it'd be really nice if",
    "start": "1157640",
    "end": "1158840"
  },
  {
    "text": "I could Define applicative for this you",
    "start": "1158840",
    "end": "1160460"
  },
  {
    "text": "can and it tells you what the shape of",
    "start": "1160460",
    "end": "1162200"
  },
  {
    "text": "applicative should be and the nice thing",
    "start": "1162200",
    "end": "1163940"
  },
  {
    "text": "with that is this is pretty much the",
    "start": "1163940",
    "end": "1165860"
  },
  {
    "text": "standard FP library in kotlin it",
    "start": "1165860",
    "end": "1168200"
  },
  {
    "text": "actually used to be three different",
    "start": "1168200",
    "end": "1169280"
  },
  {
    "text": "libraries and they all merged which",
    "start": "1169280",
    "end": "1171020"
  },
  {
    "text": "means that you have a very good chance",
    "start": "1171020",
    "end": "1172520"
  },
  {
    "text": "of using someone else's library that",
    "start": "1172520",
    "end": "1174740"
  },
  {
    "text": "actually obeys this spec so that from",
    "start": "1174740",
    "end": "1177200"
  },
  {
    "text": "that point of view it's really nice and",
    "start": "1177200",
    "end": "1178460"
  },
  {
    "text": "the ergonomics of creating these type",
    "start": "1178460",
    "end": "1179840"
  },
  {
    "text": "classes is quite smooth",
    "start": "1179840",
    "end": "1181580"
  },
  {
    "text": "So speaking of async very quickly just",
    "start": "1181580",
    "end": "1183380"
  },
  {
    "text": "an example of why this library is so",
    "start": "1183380",
    "end": "1185000"
  },
  {
    "text": "useful",
    "start": "1185000",
    "end": "1185840"
  },
  {
    "text": "kotlin shipped something called",
    "start": "1185840",
    "end": "1186919"
  },
  {
    "text": "co-routines natively and effectively",
    "start": "1186919",
    "end": "1189500"
  },
  {
    "text": "that means that it has the ability to",
    "start": "1189500",
    "end": "1191179"
  },
  {
    "text": "have deferred computation on a number of",
    "start": "1191179",
    "end": "1192980"
  },
  {
    "text": "threads in the background behind the the",
    "start": "1192980",
    "end": "1195400"
  },
  {
    "text": "developers necessary you know setting up",
    "start": "1195400",
    "end": "1199400"
  },
  {
    "text": "these things you just say hey this is an",
    "start": "1199400",
    "end": "1200720"
  },
  {
    "text": "async function you deal with it come",
    "start": "1200720",
    "end": "1201860"
  },
  {
    "text": "back when it's ready",
    "start": "1201860",
    "end": "1203660"
  },
  {
    "text": "um performs operations in parallel but",
    "start": "1203660",
    "end": "1206179"
  },
  {
    "text": "because it doesn't have the ability to",
    "start": "1206179",
    "end": "1207980"
  },
  {
    "text": "express a type like an either",
    "start": "1207980",
    "end": "1210020"
  },
  {
    "text": "if something happens in a particular",
    "start": "1210020",
    "end": "1212299"
  },
  {
    "text": "routine goes wrong your entire thread",
    "start": "1212299",
    "end": "1214220"
  },
  {
    "text": "blows and it's up to you to try to catch",
    "start": "1214220",
    "end": "1216200"
  },
  {
    "text": "that right this sucks I hate having to",
    "start": "1216200",
    "end": "1218299"
  },
  {
    "text": "remember hey by the way this thing might",
    "start": "1218299",
    "end": "1220100"
  },
  {
    "text": "throw somewhere now you have to deal",
    "start": "1220100",
    "end": "1221720"
  },
  {
    "text": "with it everywhere you call it or you",
    "start": "1221720",
    "end": "1223220"
  },
  {
    "text": "deal with it once at the top and you",
    "start": "1223220",
    "end": "1224240"
  },
  {
    "text": "have to remember your benefits of",
    "start": "1224240",
    "end": "1225140"
  },
  {
    "text": "nightmare so instead",
    "start": "1225140",
    "end": "1228740"
  },
  {
    "text": "um we use arrows built in asynchronous",
    "start": "1228740",
    "end": "1232960"
  },
  {
    "text": "and effectively the way that it works is",
    "start": "1232960",
    "end": "1235100"
  },
  {
    "text": "it just decorates things that it knows",
    "start": "1235100",
    "end": "1236720"
  },
  {
    "text": "are asynchronous with a particular",
    "start": "1236720",
    "end": "1238400"
  },
  {
    "text": "shared interface so the other thing",
    "start": "1238400",
    "end": "1241280"
  },
  {
    "text": "that's unfortunate is in the kotlin and",
    "start": "1241280",
    "end": "1242960"
  },
  {
    "text": "in the Java ecosystem there are probably",
    "start": "1242960",
    "end": "1244580"
  },
  {
    "text": "four ways to do deferred computation",
    "start": "1244580",
    "end": "1246799"
  },
  {
    "text": "there's you know RX Java there's core",
    "start": "1246799",
    "end": "1249320"
  },
  {
    "text": "routines there's a whole bunch of these",
    "start": "1249320",
    "end": "1250340"
  },
  {
    "text": "things and so if you want to use a code",
    "start": "1250340",
    "end": "1252140"
  },
  {
    "text": "base that has a couple of those in it",
    "start": "1252140",
    "end": "1253340"
  },
  {
    "text": "you find yourself writing the same",
    "start": "1253340",
    "end": "1254360"
  },
  {
    "text": "function over and over and over and over",
    "start": "1254360",
    "end": "1256220"
  },
  {
    "text": "again manually monomorphizing Arrow has",
    "start": "1256220",
    "end": "1259400"
  },
  {
    "text": "written a couple of type classes that",
    "start": "1259400",
    "end": "1262220"
  },
  {
    "text": "abstract over these things one of which",
    "start": "1262220",
    "end": "1263660"
  },
  {
    "text": "is monad defer",
    "start": "1263660",
    "end": "1265220"
  },
  {
    "text": "and effectively we have an instance of",
    "start": "1265220",
    "end": "1268400"
  },
  {
    "text": "monad defer for a bunch of these",
    "start": "1268400",
    "end": "1270799"
  },
  {
    "text": "libraries which means that you can write",
    "start": "1270799",
    "end": "1272120"
  },
  {
    "text": "a function that says I'll get a thing",
    "start": "1272120",
    "end": "1273620"
  },
  {
    "text": "that defers I'll do a bunch of stuff",
    "start": "1273620",
    "end": "1274940"
  },
  {
    "text": "with it I'll return it and then as long",
    "start": "1274940",
    "end": "1276740"
  },
  {
    "text": "as you can have a witness that says hey",
    "start": "1276740",
    "end": "1278720"
  },
  {
    "text": "this thing is totally a monar defer hey",
    "start": "1278720",
    "end": "1280880"
  },
  {
    "text": "this is the thing that is a monitor pass",
    "start": "1280880",
    "end": "1282860"
  },
  {
    "text": "it into this function you get all of",
    "start": "1282860",
    "end": "1284480"
  },
  {
    "text": "that for free",
    "start": "1284480",
    "end": "1286280"
  },
  {
    "text": "um and because we're being explicit",
    "start": "1286280",
    "end": "1288200"
  },
  {
    "text": "about failures or explicit about types",
    "start": "1288200",
    "end": "1289820"
  },
  {
    "text": "we actually deal with these failures in",
    "start": "1289820",
    "end": "1292580"
  },
  {
    "text": "line when we when we encounter them so",
    "start": "1292580",
    "end": "1295100"
  },
  {
    "text": "there's a function called unsafe attempt",
    "start": "1295100",
    "end": "1296659"
  },
  {
    "text": "async and these things are basically",
    "start": "1296659",
    "end": "1297919"
  },
  {
    "text": "just a way of saying hey I force a thing",
    "start": "1297919",
    "end": "1299539"
  },
  {
    "text": "to happen it returns a type class called",
    "start": "1299539",
    "end": "1301700"
  },
  {
    "text": "a try which is like an either where it's",
    "start": "1301700",
    "end": "1303679"
  },
  {
    "text": "explicit but a throwable is the left",
    "start": "1303679",
    "end": "1305360"
  },
  {
    "text": "branch and the idea there is that you",
    "start": "1305360",
    "end": "1307880"
  },
  {
    "text": "have to deal with that you can't get the",
    "start": "1307880",
    "end": "1309260"
  },
  {
    "text": "value out unless you acknowledge this is",
    "start": "1309260",
    "end": "1311720"
  },
  {
    "text": "an either I have to say you know fmap to",
    "start": "1311720",
    "end": "1314780"
  },
  {
    "text": "get the value or I have to do something",
    "start": "1314780",
    "end": "1315919"
  },
  {
    "text": "to do with the left Branch or whatever",
    "start": "1315919",
    "end": "1317240"
  },
  {
    "text": "it is I'm going to do",
    "start": "1317240",
    "end": "1319760"
  },
  {
    "text": "um the really nice thing and this is the",
    "start": "1319760",
    "end": "1321740"
  },
  {
    "text": "the kind of the sugary part is it also",
    "start": "1321740",
    "end": "1323539"
  },
  {
    "text": "ships something that's analogous to do",
    "start": "1323539",
    "end": "1325039"
  },
  {
    "text": "notation so we have something called a",
    "start": "1325039",
    "end": "1326780"
  },
  {
    "text": "comprehension and effectively a",
    "start": "1326780",
    "end": "1328220"
  },
  {
    "text": "comprehension is a way of saying execute",
    "start": "1328220",
    "end": "1329840"
  },
  {
    "text": "these steps without actually executing",
    "start": "1329840",
    "end": "1332120"
  },
  {
    "text": "the steps so it will run through all of",
    "start": "1332120",
    "end": "1334940"
  },
  {
    "text": "those things it'll push them into a task",
    "start": "1334940",
    "end": "1336799"
  },
  {
    "text": "queue to operate in some way comes back",
    "start": "1336799",
    "end": "1338659"
  },
  {
    "text": "to it later you don't worry about it",
    "start": "1338659",
    "end": "1339980"
  },
  {
    "text": "until you force the function to evaluate",
    "start": "1339980",
    "end": "1341659"
  },
  {
    "text": "and the idea there is that if you have",
    "start": "1341659",
    "end": "1343520"
  },
  {
    "text": "multiple asynchronous things that you're",
    "start": "1343520",
    "end": "1345440"
  },
  {
    "text": "dealing with rather than dealing with",
    "start": "1345440",
    "end": "1346940"
  },
  {
    "text": "them one at a time try catching around",
    "start": "1346940",
    "end": "1348559"
  },
  {
    "text": "each of them dealing with all of this",
    "start": "1348559",
    "end": "1349820"
  },
  {
    "text": "Plumbing yourself instead you can just",
    "start": "1349820",
    "end": "1352039"
  },
  {
    "text": "use the Deferred operator you can use",
    "start": "1352039",
    "end": "1354200"
  },
  {
    "text": "the monad error instance you can put up",
    "start": "1354200",
    "end": "1355760"
  },
  {
    "text": "a binding catch comprehension if",
    "start": "1355760",
    "end": "1357799"
  },
  {
    "text": "anything in that pipeline of operations",
    "start": "1357799",
    "end": "1359299"
  },
  {
    "text": "throws The Binding catch will catch it",
    "start": "1359299",
    "end": "1361100"
  },
  {
    "text": "store it as a throwable for that",
    "start": "1361100",
    "end": "1362360"
  },
  {
    "text": "operation and then it's up to you how",
    "start": "1362360",
    "end": "1363799"
  },
  {
    "text": "you want to deal with that you can",
    "start": "1363799",
    "end": "1365179"
  },
  {
    "text": "sequence and say by the way if one thing",
    "start": "1365179",
    "end": "1366919"
  },
  {
    "text": "fails everything is wrong you can just",
    "start": "1366919",
    "end": "1368960"
  },
  {
    "text": "handle that one in a particular way with",
    "start": "1368960",
    "end": "1370340"
  },
  {
    "text": "the default everything kind of runs",
    "start": "1370340",
    "end": "1371659"
  },
  {
    "text": "smoothly",
    "start": "1371659",
    "end": "1372980"
  },
  {
    "text": "so let's move on to writing your own",
    "start": "1372980",
    "end": "1374419"
  },
  {
    "text": "this is kind of the meat and the",
    "start": "1374419",
    "end": "1375440"
  },
  {
    "text": "potatoes",
    "start": "1375440",
    "end": "1376940"
  },
  {
    "text": "um you know it looks cool but it also",
    "start": "1376940",
    "end": "1378620"
  },
  {
    "text": "looks like it probably takes a lot of",
    "start": "1378620",
    "end": "1379760"
  },
  {
    "text": "code to kind of deal with right",
    "start": "1379760",
    "end": "1381500"
  },
  {
    "text": "so as before we Define a type class as",
    "start": "1381500",
    "end": "1384679"
  },
  {
    "text": "an interface with generic in some",
    "start": "1384679",
    "end": "1386240"
  },
  {
    "text": "parameter and we Define abstract methods",
    "start": "1386240",
    "end": "1389360"
  },
  {
    "text": "on this interface or we Define concrete",
    "start": "1389360",
    "end": "1391100"
  },
  {
    "text": "methods on this interface that take",
    "start": "1391100",
    "end": "1392299"
  },
  {
    "text": "advantage of other methods that are in",
    "start": "1392299",
    "end": "1393679"
  },
  {
    "text": "scope but we can so we can Define",
    "start": "1393679",
    "end": "1396080"
  },
  {
    "text": "default implementations based on",
    "start": "1396080",
    "end": "1397760"
  },
  {
    "text": "whatever abstract implementations are",
    "start": "1397760",
    "end": "1399860"
  },
  {
    "text": "needed",
    "start": "1399860",
    "end": "1401179"
  },
  {
    "text": "now instead of us needing to do all of",
    "start": "1401179",
    "end": "1403159"
  },
  {
    "text": "the plumbing before of defining four ID",
    "start": "1403159",
    "end": "1404840"
  },
  {
    "text": "and ID of and the kinds and all that",
    "start": "1404840",
    "end": "1406460"
  },
  {
    "text": "kind of stuff Arrow ships are higher",
    "start": "1406460",
    "end": "1408380"
  },
  {
    "text": "kind decorator that takes care of all of",
    "start": "1408380",
    "end": "1410120"
  },
  {
    "text": "that code gen for you so it creates the",
    "start": "1410120",
    "end": "1412760"
  },
  {
    "text": "kind it creates the brand it creates the",
    "start": "1412760",
    "end": "1414919"
  },
  {
    "text": "plumbing it does all of that stuff that",
    "start": "1414919",
    "end": "1416419"
  },
  {
    "text": "ties everything together",
    "start": "1416419",
    "end": "1418520"
  },
  {
    "text": "so we take the class that we've defined",
    "start": "1418520",
    "end": "1420380"
  },
  {
    "text": "in this step we've said we have a class",
    "start": "1420380",
    "end": "1422539"
  },
  {
    "text": "id id is generic in t it belongs to ID",
    "start": "1422539",
    "end": "1425240"
  },
  {
    "text": "of and it has a companion object and it",
    "start": "1425240",
    "end": "1427520"
  },
  {
    "text": "generates out for ID the private",
    "start": "1427520",
    "end": "1429140"
  },
  {
    "text": "Constructor it generates out ID of it",
    "start": "1429140",
    "end": "1430820"
  },
  {
    "text": "generates out the fixed function",
    "start": "1430820",
    "end": "1432620"
  },
  {
    "text": "so now we can use this with the type",
    "start": "1432620",
    "end": "1434840"
  },
  {
    "text": "class that we've defined we take the",
    "start": "1434840",
    "end": "1436640"
  },
  {
    "text": "type class that we have we Define the",
    "start": "1436640",
    "end": "1438799"
  },
  {
    "text": "methods that it that need to be",
    "start": "1438799",
    "end": "1440720"
  },
  {
    "text": "implemented on the ID instance and then",
    "start": "1440720",
    "end": "1443600"
  },
  {
    "text": "we build an instance so we have the",
    "start": "1443600",
    "end": "1445280"
  },
  {
    "text": "instance decorator that says take the ID",
    "start": "1445280",
    "end": "1446780"
  },
  {
    "text": "class and build the the companion object",
    "start": "1446780",
    "end": "1449960"
  },
  {
    "text": "that is the witness and build all the",
    "start": "1449960",
    "end": "1452120"
  },
  {
    "text": "plumbing that says by the way these two",
    "start": "1452120",
    "end": "1453440"
  },
  {
    "text": "things are the same thing gives us all",
    "start": "1453440",
    "end": "1455299"
  },
  {
    "text": "of that for free",
    "start": "1455299",
    "end": "1457460"
  },
  {
    "text": "and there are even laws to abide so this",
    "start": "1457460",
    "end": "1459679"
  },
  {
    "text": "is always a nice thing to see in a",
    "start": "1459679",
    "end": "1460820"
  },
  {
    "text": "functional programming uh library is not",
    "start": "1460820",
    "end": "1463039"
  },
  {
    "text": "just oh by the way it obeys whatever the",
    "start": "1463039",
    "end": "1464480"
  },
  {
    "text": "interface we said was but it actually",
    "start": "1464480",
    "end": "1465679"
  },
  {
    "text": "obeys the laws behind the the object",
    "start": "1465679",
    "end": "1467600"
  },
  {
    "text": "itself",
    "start": "1467600",
    "end": "1468559"
  },
  {
    "text": "so the first law is the covariant",
    "start": "1468559",
    "end": "1470000"
  },
  {
    "text": "identity that you know if we call F map",
    "start": "1470000",
    "end": "1472220"
  },
  {
    "text": "with the identity function we get back",
    "start": "1472220",
    "end": "1473720"
  },
  {
    "text": "the same thing that we started with",
    "start": "1473720",
    "end": "1476059"
  },
  {
    "text": "the second law is the uh the um sorry",
    "start": "1476059",
    "end": "1479240"
  },
  {
    "text": "composition law and effectively that is",
    "start": "1479240",
    "end": "1481039"
  },
  {
    "text": "that if we call uh F if we call F map on",
    "start": "1481039",
    "end": "1483620"
  },
  {
    "text": "the first thing with a function and then",
    "start": "1483620",
    "end": "1484880"
  },
  {
    "text": "call fmap on the set on the result of",
    "start": "1484880",
    "end": "1486500"
  },
  {
    "text": "that with a function that's the same as",
    "start": "1486500",
    "end": "1488059"
  },
  {
    "text": "calling fmap with the composition of",
    "start": "1488059",
    "end": "1489799"
  },
  {
    "text": "those two functions how cool is",
    "start": "1489799",
    "end": "1491600"
  },
  {
    "text": "property-based testing it's a really",
    "start": "1491600",
    "end": "1493220"
  },
  {
    "text": "nice process",
    "start": "1493220",
    "end": "1494919"
  },
  {
    "text": "and then to use these laws we basically",
    "start": "1494919",
    "end": "1497659"
  },
  {
    "text": "ship in Arrow tests it ships a helper to",
    "start": "1497659",
    "end": "1500480"
  },
  {
    "text": "test laws takes a list of things that",
    "start": "1500480",
    "end": "1502340"
  },
  {
    "text": "are defined as law laws are defined to",
    "start": "1502340",
    "end": "1504799"
  },
  {
    "text": "give the property-based testing into the",
    "start": "1504799",
    "end": "1506299"
  },
  {
    "text": "actual thing itself and you can call",
    "start": "1506299",
    "end": "1507980"
  },
  {
    "text": "each of these as you go um so enforcing",
    "start": "1507980",
    "end": "1510140"
  },
  {
    "text": "it's good practice as you build up your",
    "start": "1510140",
    "end": "1511580"
  },
  {
    "text": "own instances of these type classes to",
    "start": "1511580",
    "end": "1514039"
  },
  {
    "text": "test them against the laws that",
    "start": "1514039",
    "end": "1515240"
  },
  {
    "text": "Implement them",
    "start": "1515240",
    "end": "1517700"
  },
  {
    "text": "um so just revisiting invoking via",
    "start": "1517700",
    "end": "1519559"
  },
  {
    "text": "witness so we have to pass a witness in",
    "start": "1519559",
    "end": "1522020"
  },
  {
    "text": "um we've seen that before if we actually",
    "start": "1522020",
    "end": "1523700"
  },
  {
    "text": "Define the method on the function on the",
    "start": "1523700",
    "end": "1525559"
  },
  {
    "text": "uh the type class itself then the",
    "start": "1525559",
    "end": "1527539"
  },
  {
    "text": "witness is implicit we say by the way",
    "start": "1527539",
    "end": "1529159"
  },
  {
    "text": "this is of applicative f so you don't",
    "start": "1529159",
    "end": "1530779"
  },
  {
    "text": "need to tell me how you get an",
    "start": "1530779",
    "end": "1532100"
  },
  {
    "text": "applicative f and it handles all of the",
    "start": "1532100",
    "end": "1534260"
  },
  {
    "text": "plumbing itself that way which is quite",
    "start": "1534260",
    "end": "1535700"
  },
  {
    "text": "nice makes a lot of sense for for",
    "start": "1535700",
    "end": "1537320"
  },
  {
    "text": "Library functions like lift A2 maybe not",
    "start": "1537320",
    "end": "1539419"
  },
  {
    "text": "so much for your specific database",
    "start": "1539419",
    "end": "1540919"
  },
  {
    "text": "access",
    "start": "1540919",
    "end": "1542659"
  },
  {
    "text": "um if that's still too much typing you",
    "start": "1542659",
    "end": "1543919"
  },
  {
    "text": "can derive these so as long as you have",
    "start": "1543919",
    "end": "1545419"
  },
  {
    "text": "access to where the data where the class",
    "start": "1545419",
    "end": "1547100"
  },
  {
    "text": "is being uh declared as long as you",
    "start": "1547100",
    "end": "1549919"
  },
  {
    "text": "define all of the methods that are",
    "start": "1549919",
    "end": "1551600"
  },
  {
    "text": "needed in order to derive the class you",
    "start": "1551600",
    "end": "1553460"
  },
  {
    "text": "can just call at deriving The Decorator",
    "start": "1553460",
    "end": "1555500"
  },
  {
    "text": "and what class you want to derive it'll",
    "start": "1555500",
    "end": "1557360"
  },
  {
    "text": "take care of building all of that",
    "start": "1557360",
    "end": "1558380"
  },
  {
    "text": "plumbing for you as well so we have a",
    "start": "1558380",
    "end": "1560600"
  },
  {
    "text": "much much simpler process to find a data",
    "start": "1560600",
    "end": "1562940"
  },
  {
    "text": "type write its methods derive its",
    "start": "1562940",
    "end": "1564980"
  },
  {
    "text": "instances away we go",
    "start": "1564980",
    "end": "1568159"
  },
  {
    "text": "um just a quick call back to something",
    "start": "1568159",
    "end": "1569360"
  },
  {
    "text": "that I think is actually the really",
    "start": "1569360",
    "end": "1570559"
  },
  {
    "text": "really nice aspect out of this",
    "start": "1570559",
    "end": "1572480"
  },
  {
    "text": "effectively",
    "start": "1572480",
    "end": "1574340"
  },
  {
    "text": "we have ad hoc polymorphism defined",
    "start": "1574340",
    "end": "1577539"
  },
  {
    "text": "post-hoc to the language which is really",
    "start": "1577539",
    "end": "1579799"
  },
  {
    "text": "cool but alongside that the language",
    "start": "1579799",
    "end": "1581720"
  },
  {
    "text": "itself defines a way for you to extend",
    "start": "1581720",
    "end": "1584480"
  },
  {
    "text": "classes without having access to the",
    "start": "1584480",
    "end": "1586520"
  },
  {
    "text": "class itself and that's a really nice",
    "start": "1586520",
    "end": "1588380"
  },
  {
    "text": "idea without it being monkey patching",
    "start": "1588380",
    "end": "1590419"
  },
  {
    "text": "where everything kind of breaks because",
    "start": "1590419",
    "end": "1591500"
  },
  {
    "text": "you both Define array.reduce and now",
    "start": "1591500",
    "end": "1593299"
  },
  {
    "text": "everything explodes",
    "start": "1593299",
    "end": "1594580"
  },
  {
    "text": "but it's a way of actually saying this",
    "start": "1594580",
    "end": "1597860"
  },
  {
    "text": "should have this because I've now",
    "start": "1597860",
    "end": "1599960"
  },
  {
    "text": "defined a new function that would be",
    "start": "1599960",
    "end": "1601520"
  },
  {
    "text": "useful for a list to have so I've",
    "start": "1601520",
    "end": "1602960"
  },
  {
    "text": "defined sequence it would be great if it",
    "start": "1602960",
    "end": "1604279"
  },
  {
    "text": "lists had sequences",
    "start": "1604279",
    "end": "1605779"
  },
  {
    "text": "by the way here's how they could and",
    "start": "1605779",
    "end": "1607700"
  },
  {
    "text": "then it's up to you at any place that",
    "start": "1607700",
    "end": "1609020"
  },
  {
    "text": "you use a list to say also I'd really",
    "start": "1609020",
    "end": "1611000"
  },
  {
    "text": "like that sequence thing that I built",
    "start": "1611000",
    "end": "1612380"
  },
  {
    "text": "earlier please use that here",
    "start": "1612380",
    "end": "1614600"
  },
  {
    "text": "um which is very useful",
    "start": "1614600",
    "end": "1616279"
  },
  {
    "text": "so in closing why uh",
    "start": "1616279",
    "end": "1619880"
  },
  {
    "text": "obviously",
    "start": "1619880",
    "end": "1621679"
  },
  {
    "text": "um Haskell scholar although all of these",
    "start": "1621679",
    "end": "1623600"
  },
  {
    "text": "things exist and for a lot of us uh for",
    "start": "1623600",
    "end": "1626419"
  },
  {
    "text": "a lot of you they might be very viable",
    "start": "1626419",
    "end": "1628400"
  },
  {
    "text": "choices",
    "start": "1628400",
    "end": "1630020"
  },
  {
    "text": "um but while this doesn't have the",
    "start": "1630020",
    "end": "1632900"
  },
  {
    "text": "ergonomics or the safety necessarily of",
    "start": "1632900",
    "end": "1635480"
  },
  {
    "text": "Haskell and it doesn't have the",
    "start": "1635480",
    "end": "1637580"
  },
  {
    "text": "established ecosystem of Scala yet it's",
    "start": "1637580",
    "end": "1640100"
  },
  {
    "text": "a much smaller language and a much",
    "start": "1640100",
    "end": "1641720"
  },
  {
    "text": "smaller approach and that means that",
    "start": "1641720",
    "end": "1643220"
  },
  {
    "text": "it's small enough to eat one bite at a",
    "start": "1643220",
    "end": "1644720"
  },
  {
    "text": "time if you're working in a company or",
    "start": "1644720",
    "end": "1646520"
  },
  {
    "text": "with a team that maybe isn't quite ready",
    "start": "1646520",
    "end": "1648080"
  },
  {
    "text": "for uh you know functional programming",
    "start": "1648080",
    "end": "1650720"
  },
  {
    "text": "with lenses bananas and barbed wire you",
    "start": "1650720",
    "end": "1653659"
  },
  {
    "text": "might have a team that's ready for fmap",
    "start": "1653659",
    "end": "1655820"
  },
  {
    "text": "you might have a team that's ready for",
    "start": "1655820",
    "end": "1657140"
  },
  {
    "text": "functor or either",
    "start": "1657140",
    "end": "1658840"
  },
  {
    "text": "and with these things you can actually",
    "start": "1658840",
    "end": "1660740"
  },
  {
    "text": "sprinkle them over your code base very",
    "start": "1660740",
    "end": "1662539"
  },
  {
    "text": "easily without needing to take the",
    "start": "1662539",
    "end": "1665480"
  },
  {
    "text": "entire operation with you kotlin allows",
    "start": "1665480",
    "end": "1668960"
  },
  {
    "text": "you to take smaller mouthfuls when you",
    "start": "1668960",
    "end": "1670279"
  },
  {
    "text": "onboard people into these processes",
    "start": "1670279",
    "end": "1673400"
  },
  {
    "text": "um",
    "start": "1673400",
    "end": "1674059"
  },
  {
    "text": "from a completely scientific survey and",
    "start": "1674059",
    "end": "1676159"
  },
  {
    "text": "totally not just the stack Overflow",
    "start": "1676159",
    "end": "1677720"
  },
  {
    "text": "developer survey numbers",
    "start": "1677720",
    "end": "1680360"
  },
  {
    "text": "um Java looks to be at least 40 times",
    "start": "1680360",
    "end": "1682460"
  },
  {
    "text": "more prevalent in Industry than high",
    "start": "1682460",
    "end": "1683840"
  },
  {
    "text": "school probably way more High School",
    "start": "1683840",
    "end": "1685159"
  },
  {
    "text": "didn't even make it onto the most used",
    "start": "1685159",
    "end": "1686539"
  },
  {
    "text": "list so this is just a guess at the",
    "start": "1686539",
    "end": "1688220"
  },
  {
    "text": "numbers every Java code base has",
    "start": "1688220",
    "end": "1690320"
  },
  {
    "text": "problems that were solved decades ago so",
    "start": "1690320",
    "end": "1692960"
  },
  {
    "text": "the number of null pointer exceptions on",
    "start": "1692960",
    "end": "1694580"
  },
  {
    "text": "GitHub",
    "start": "1694580",
    "end": "1695900"
  },
  {
    "text": "is a huge number there's no reason for",
    "start": "1695900",
    "end": "1697820"
  },
  {
    "text": "us to be writing code like that",
    "start": "1697820",
    "end": "1699919"
  },
  {
    "text": "um the languages that we can get hired",
    "start": "1699919",
    "end": "1701960"
  },
  {
    "text": "for easily or that we can't hire for",
    "start": "1701960",
    "end": "1703460"
  },
  {
    "text": "easily or that we can convince companies",
    "start": "1703460",
    "end": "1704960"
  },
  {
    "text": "to adopt easily",
    "start": "1704960",
    "end": "1707120"
  },
  {
    "text": "um aren't necessarily the ones that are",
    "start": "1707120",
    "end": "1708620"
  },
  {
    "text": "fun or safe or correct",
    "start": "1708620",
    "end": "1710600"
  },
  {
    "text": "kotlin through arrow through this",
    "start": "1710600",
    "end": "1712820"
  },
  {
    "text": "Library makes a lot of these things",
    "start": "1712820",
    "end": "1714140"
  },
  {
    "text": "available to us in a language that is",
    "start": "1714140",
    "end": "1716659"
  },
  {
    "text": "sellable to business sellable to",
    "start": "1716659",
    "end": "1718880"
  },
  {
    "text": "developers who aren't necessarily ready",
    "start": "1718880",
    "end": "1720980"
  },
  {
    "text": "for some of the abstractions that we're",
    "start": "1720980",
    "end": "1722480"
  },
  {
    "text": "used to and allows us to to pass these",
    "start": "1722480",
    "end": "1725900"
  },
  {
    "text": "things on one piece at a time",
    "start": "1725900",
    "end": "1728059"
  },
  {
    "text": "so yeah check out Arrow the library if",
    "start": "1728059",
    "end": "1731299"
  },
  {
    "text": "anyone's coming to the workshop after",
    "start": "1731299",
    "end": "1732919"
  },
  {
    "text": "lunch please make sure clone that",
    "start": "1732919",
    "end": "1734659"
  },
  {
    "text": "repository and get started I think the",
    "start": "1734659",
    "end": "1736520"
  },
  {
    "text": "only dependency is the jdk other than",
    "start": "1736520",
    "end": "1738620"
  },
  {
    "text": "that it's just a Gradle wrapper project",
    "start": "1738620",
    "end": "1740419"
  },
  {
    "text": "so you should be good to go on any",
    "start": "1740419",
    "end": "1741980"
  },
  {
    "text": "operating system and I think it's in",
    "start": "1741980",
    "end": "1743960"
  },
  {
    "text": "here",
    "start": "1743960",
    "end": "1746140"
  },
  {
    "text": "oh in the blue room so it's downstairs",
    "start": "1746539",
    "end": "1747860"
  },
  {
    "text": "cool so yeah hope to see you all there",
    "start": "1747860",
    "end": "1750740"
  },
  {
    "text": "and yeah please come say hi",
    "start": "1750740",
    "end": "1753220"
  },
  {
    "text": "[Applause]",
    "start": "1753220",
    "end": "1759369"
  }
]