[
  {
    "text": "good morning everyone I have the dubious distinction of coming right after the keynote that makes everybody cry",
    "start": "6910",
    "end": "12820"
  },
  {
    "text": "so and I have to say that you may cry but it's for a different reason because of your JavaScript coding but",
    "start": "12820",
    "end": "20920"
  },
  {
    "text": "we're going to jump in today and discuss linting rules for JavaScript and of",
    "start": "20920",
    "end": "26710"
  },
  {
    "text": "course this is kind of a a a deeper level talk because I'm gonna show code",
    "start": "26710",
    "end": "34390"
  },
  {
    "text": "and I'm gonna expect that you can follow along quickly it's gonna be quite a bit of code I'm not actually doing any live coding but I'm going to show you code",
    "start": "34390",
    "end": "40630"
  },
  {
    "text": "and show you things from my experience so we're we're gonna start with is this linting tool that I wrote to basically",
    "start": "40630",
    "end": "49330"
  },
  {
    "text": "give a set of opinions about code so we're gonna actually spend our time today on the command line using this",
    "start": "49330",
    "end": "54970"
  },
  {
    "text": "linting tool and if you'll notice closely this lending to all I wrote way back in 1995 when JavaScript first came",
    "start": "54970",
    "end": "60970"
  },
  {
    "text": "out that's obviously a joke because that wasn't true but I did write that this linter to try to help us understand",
    "start": "60970",
    "end": "67750"
  },
  {
    "text": "JavaScript because that's what I spend my time focusing on so just real briefly I can give you some information about",
    "start": "67750",
    "end": "75220"
  },
  {
    "text": "myself if you don't know who I am Kyle Simpson that's that you can't read but",
    "start": "75220",
    "end": "80470"
  },
  {
    "text": "I'm Kyle Simpson getify online if you're into the online stalking thing you can check out getify dot me and it has links",
    "start": "80470",
    "end": "86590"
  },
  {
    "text": "to everything that you need to know about me and I do appreciate feedback both positive and negative I get people",
    "start": "86590",
    "end": "91990"
  },
  {
    "text": "that tell me you're full of crap and I love getting that sort of feedback as well so do feel free to reach out and",
    "start": "91990",
    "end": "97270"
  },
  {
    "text": "give feedback definitely also make sure to do the voting so that we as speakers can get better at what we do I am an",
    "start": "97270",
    "end": "103630"
  },
  {
    "text": "open web evangelist I'm based in Austin Texas over in the States but I basically visit there these days because I spend",
    "start": "103630",
    "end": "110860"
  },
  {
    "text": "my time on the road I speak about JavaScript and I teach JavaScript so as a tiny little plug if your company is",
    "start": "110860",
    "end": "117040"
  },
  {
    "text": "interested in having someone come and teach about JavaScript please let me know because I'd love to do that alright",
    "start": "117040",
    "end": "122830"
  },
  {
    "text": "so a kind of a setup here that we need to understand about why this talk is",
    "start": "122830",
    "end": "131709"
  },
  {
    "text": "this way I think our industry has benefited tremendously from books like JavaScript",
    "start": "131709",
    "end": "137500"
  },
  {
    "text": "the good parts but it's also hampered us as an industry because I believe it's taught us to sort of run away from the",
    "start": "137500",
    "end": "143799"
  },
  {
    "text": "difficult parts the tough parts the books that I speak about and the",
    "start": "143799",
    "end": "149630"
  },
  {
    "text": "books that I ride and the things that I'm speaking about today in fact all the teaching that I do it's really designed to take the alternate approach to things",
    "start": "149630",
    "end": "155930"
  },
  {
    "text": "which instead of saying let's relegate ourselves to a small subset of the language it's JavaScript all the parts",
    "start": "155930",
    "end": "161960"
  },
  {
    "text": "so I'm sort of the anti the good parts but that doesn't mean the bad parts it just means that we're gonna go after all",
    "start": "161960",
    "end": "167090"
  },
  {
    "text": "of the parts of JavaScript we're gonna jump right in in just a moment talking about types and then about coercion and",
    "start": "167090",
    "end": "173030"
  },
  {
    "text": "the those are the sorts of topics that most people say oh I don't need to learn I should avoid because we've been told",
    "start": "173030",
    "end": "178280"
  },
  {
    "text": "that they're just bad and I'm going to take the opposite approach to that so",
    "start": "178280",
    "end": "184090"
  },
  {
    "text": "since I mentioned the books I should just go ahead and do a quick plug of these books this is the you don't know",
    "start": "185140",
    "end": "191420"
  },
  {
    "text": "Jas book series and I have some of these I have three copies so it's not a lot",
    "start": "191420",
    "end": "196640"
  },
  {
    "text": "but the first three people that want to come up and grab a copy they're also for sale out there I think they're giving 20% off but you can read the books for",
    "start": "196640",
    "end": "202910"
  },
  {
    "text": "free up on you don't you don't know Jas calm so it's a series of books I've written three I'm working on the fourth",
    "start": "202910",
    "end": "208190"
  },
  {
    "text": "title right now there'll be a total of five and I also free stickers if you're interested so enough of that",
    "start": "208190",
    "end": "213200"
  },
  {
    "text": "self-promotion junk let's jump in so the",
    "start": "213200",
    "end": "219049"
  },
  {
    "text": "stuff that I'm going to talk about today how many of you by the way how many of you use a linter on your own coding so",
    "start": "219049",
    "end": "224720"
  },
  {
    "text": "Jas Lynn Jas and things like that okay good those of you that are not I highly encourage you to do so but we need to",
    "start": "224720",
    "end": "230660"
  },
  {
    "text": "make sure that we understand something about lenders that I think is commonly confused many people think that linters",
    "start": "230660",
    "end": "235940"
  },
  {
    "text": "are about checking program correctness and that is not that is not true whatsoever your program correctness is",
    "start": "235940",
    "end": "243200"
  },
  {
    "text": "validated by your unit tests and also by running your programs in production that's how you know if your program is",
    "start": "243200",
    "end": "249230"
  },
  {
    "text": "correctly doing what it's supposed to do it's also not checking validity your program validity is checked by your",
    "start": "249230",
    "end": "254450"
  },
  {
    "text": "compiler by parsing the code and checking to make sure that the grammar rules are correct that you're not doing illegal things those are all things that",
    "start": "254450",
    "end": "261049"
  },
  {
    "text": "existing other tools do so then what is the lender for if it's not for correctness or validity the linter is a",
    "start": "261049",
    "end": "268100"
  },
  {
    "text": "set of opinions you probably have seen jeaious lent that statement about that",
    "start": "268100",
    "end": "273560"
  },
  {
    "text": "the linter will hurt your feelings so today's talk is a winter and I might hurt your feelings quota",
    "start": "273560",
    "end": "279660"
  },
  {
    "text": "quote by suggesting to you things that I think you're doing that I think are dumb in code but they all come from the same",
    "start": "279660",
    "end": "285210"
  },
  {
    "text": "mistakes that I've made so I'm really speaking mostly to my my past self as well as to the rest of us so but in the",
    "start": "285210",
    "end": "292110"
  },
  {
    "text": "same way that when we use linters that are a set of opinions about how our code should be formatted and styled and and",
    "start": "292110",
    "end": "298710"
  },
  {
    "text": "the idioms that we should use in the same way that we use linters to do that I want you to take this that I say to",
    "start": "298710",
    "end": "304020"
  },
  {
    "text": "you today with a grain of salt understanding that these are just my opinions and you can choose to use those",
    "start": "304020",
    "end": "309600"
  },
  {
    "text": "hopefully this piques your interest and it gets you to ask difficult questions about your code discuss it with your",
    "start": "309600",
    "end": "315030"
  },
  {
    "text": "team but you're free to pick and choose so when we call it a rule it's just a set of opinions okay",
    "start": "315030",
    "end": "320670"
  },
  {
    "text": "so without any further ado let's go ahead and jump in the first thing that we're going to jump into is a discussion",
    "start": "320670",
    "end": "325770"
  },
  {
    "text": "about types I'm sure many of you have probably heard the statement before the JavaScript has no types because it's a",
    "start": "325770",
    "end": "334350"
  },
  {
    "text": "dynamic language and that's the first myth that I'd like to bust for you to",
    "start": "334350",
    "end": "340140"
  },
  {
    "text": "suggest that JavaScript has no types is to not understand the mechanism whatsoever now the word type of course is very",
    "start": "340140",
    "end": "347540"
  },
  {
    "text": "controversial depending on which language background you come from if you come from a static typing background",
    "start": "347540",
    "end": "352740"
  },
  {
    "text": "something like Haskell or something like that you're gonna vehemently disagree with me using the word type and you're gonna",
    "start": "352740",
    "end": "357960"
  },
  {
    "text": "suggest to me that I'm completely abusing that word and using it incorrectly so what I will fall back on is that I didn't make up the word type I",
    "start": "357960",
    "end": "364830"
  },
  {
    "text": "came along a lot later after and it's actually the people that wrote the specification this is a snippet from the",
    "start": "364830",
    "end": "372690"
  },
  {
    "text": "specification of JavaScript that uses the word types to describe and I'll give you a loose working definition for what",
    "start": "372690",
    "end": "378600"
  },
  {
    "text": "we talk about here a set of intrinsic behavior that is associated with a particular value for example the number",
    "start": "378600",
    "end": "385320"
  },
  {
    "text": "42 we know beyond it being the meaning life we know that the number 42 being a",
    "start": "385320",
    "end": "390480"
  },
  {
    "text": "numeric type is something we can do math with we can add and subtract and multiply and divide those numbers the",
    "start": "390480",
    "end": "396390"
  },
  {
    "text": "string 42 quote 42 is a different type of value of course it might be outputted",
    "start": "396390",
    "end": "401970"
  },
  {
    "text": "the same but we use strings differently we can catenate them we split them we upper and lower case them we do things",
    "start": "401970",
    "end": "407310"
  },
  {
    "text": "differently with these different types and in fact the specification as you see right here it says an equi script",
    "start": "407310",
    "end": "412680"
  },
  {
    "text": "language type sponsor the values that are directly manipulated by the programmer I think",
    "start": "412680",
    "end": "417870"
  },
  {
    "text": "that's really important to illustrate my working definition for types is that it's based on the aesthetics or the",
    "start": "417870",
    "end": "423780"
  },
  {
    "text": "ergonomics of what we do in our code we reason about the number 42 value differently than we reason about the",
    "start": "423780",
    "end": "430740"
  },
  {
    "text": "string 42 so these are types so let's come back to start linting some code I'm",
    "start": "430740",
    "end": "438000"
  },
  {
    "text": "gonna check a file that I've got called type CS and we're gonna see what the linter has to say about some of these",
    "start": "438000",
    "end": "443669"
  },
  {
    "text": "types all right so we see right off the bat type of operator and type of null at",
    "start": "443669",
    "end": "449159"
  },
  {
    "text": "the very top everybody's favorite bug in JavaScript the typeof null returns object it's just plain old simple it's a",
    "start": "449159",
    "end": "454979"
  },
  {
    "text": "bug that ought to have returned the string null but let's look at some of the other ones they're more well behaving type of undefined returns",
    "start": "454979",
    "end": "461310"
  },
  {
    "text": "undefined typeof true returns boolean string number object and then down at",
    "start": "461310",
    "end": "466319"
  },
  {
    "text": "the bottom you see function now you would be forgiven as I was for many many years if you thought that function was",
    "start": "466319",
    "end": "472020"
  },
  {
    "text": "an actual type in fact if we go back to the specification functions aren't really a type they're really sort of",
    "start": "472020",
    "end": "478590"
  },
  {
    "text": "like a subtype a subtype of the object type and we know that all functions are",
    "start": "478590",
    "end": "483629"
  },
  {
    "text": "objects I'm sure you've heard that before but as a subtype of objects it's probably more appropriate to think about",
    "start": "483629",
    "end": "489240"
  },
  {
    "text": "functions as callable objects there are objects that have this special capability that they can be called but",
    "start": "489240",
    "end": "494940"
  },
  {
    "text": "again from the ergonomics of the language we see that type of function returns the string function so we reason",
    "start": "494940",
    "end": "501120"
  },
  {
    "text": "about functions very differently than we do about general objects so I think it's appropriate at least from the ergonomics",
    "start": "501120",
    "end": "506310"
  },
  {
    "text": "to think of that as a type or rather perhaps is a subtype okay so the typeof",
    "start": "506310",
    "end": "512039"
  },
  {
    "text": "operator returns one of these six strings this is es five and below there's a new one that's being added as",
    "start": "512039",
    "end": "517140"
  },
  {
    "text": "of es6 but we won't dive in that today so one of six possible strings can be returned and they correspond directly",
    "start": "517140",
    "end": "523768"
  },
  {
    "text": "with the types that the spec calls out that's my case for why these are types",
    "start": "523769",
    "end": "528779"
  },
  {
    "text": "so if you're going to argue and say well it ought to have been called tags or something like that take it up with the",
    "start": "528779",
    "end": "534060"
  },
  {
    "text": "spec authors as far as I'm concerned the way I write my code I reason about the number 42 and the string 42 differently",
    "start": "534060",
    "end": "539880"
  },
  {
    "text": "okay so let's see if the linter had anything to tell us when it was checking these things it's it gave us a couple of",
    "start": "539880",
    "end": "545819"
  },
  {
    "text": "warnings for sure the warning about typeof null being buggy and also it gives us a warning that even though",
    "start": "545819",
    "end": "551790"
  },
  {
    "text": "the type of function returns that object subtype we should be careful that's a should be careful about these type",
    "start": "551790",
    "end": "556950"
  },
  {
    "text": "nuances another thing to point out by the way if it wasn't obvious to you that in JavaScript when we have dynamic",
    "start": "556950",
    "end": "562560"
  },
  {
    "text": "typing or non type enforcement in our language we have types but they're not enforced what that really means is that",
    "start": "562560",
    "end": "569040"
  },
  {
    "text": "in JavaScript variables do not have types values have types the value 42 has",
    "start": "569040",
    "end": "576510"
  },
  {
    "text": "an intrinsic behavior associated with it that it's mathematical that it's numeric so the value 42 has the type of number",
    "start": "576510",
    "end": "583950"
  },
  {
    "text": "but the variable that's currently holding 42 it has no type whatsoever it's just a general container that can",
    "start": "583950",
    "end": "590010"
  },
  {
    "text": "hold any value of any type so it's important to keep that in mind because that's different from other languages with type enforcement where it's not the",
    "start": "590010",
    "end": "596880"
  },
  {
    "text": "value that we reason about the time but it's the container we declare a container that can hold integers we",
    "start": "596880",
    "end": "602100"
  },
  {
    "text": "declare a container that can hold arrays two strings and so forth array pointers to strings okay so now that we",
    "start": "602100",
    "end": "609450"
  },
  {
    "text": "understand that there really are types the next thing that we're gonna want to deal with let me pull up the man page",
    "start": "609450",
    "end": "614700"
  },
  {
    "text": "for everybody's favorite thing to hate which is coercion the double equals",
    "start": "614700",
    "end": "620220"
  },
  {
    "text": "operator many people have heard about in JavaScript and many people have heard that it's evil that we shouldn't be",
    "start": "620220",
    "end": "625830"
  },
  {
    "text": "using that a double equals but I would push back and I'd say that double equals in coercion can actually be quite helpful and I would caution you to be",
    "start": "625830",
    "end": "632490"
  },
  {
    "text": "aware of all of that negative hype that you've heard in fact we're gonna push on some of that and see that some of those",
    "start": "632490",
    "end": "637740"
  },
  {
    "text": "assumptions have really just been fun so let's pull up the man page for the double equals how many of you have heard",
    "start": "637740",
    "end": "647280"
  },
  {
    "text": "this before the double equals checks the value and triple equals checks the value and type unfortunately that's not true",
    "start": "647280",
    "end": "653580"
  },
  {
    "text": "actually what happens is the double equals allows coercion and triple equals disallows coercion now why does that",
    "start": "653580",
    "end": "661050"
  },
  {
    "text": "matter am i just you know parsing nuance in academic speak it actually it does really matter it matters from a",
    "start": "661050",
    "end": "666900"
  },
  {
    "text": "correctness perspective but also matters from the way that we reason about these things if you look at the first set of descriptions which one of the two of",
    "start": "666900",
    "end": "673800"
  },
  {
    "text": "those appears to do more work and clearly the triple equals appears to do",
    "start": "673800",
    "end": "679560"
  },
  {
    "text": "more work because it's checking both value in the type but if we look at how it actually works if we look at what the spec says about how it works double",
    "start": "679560",
    "end": "686259"
  },
  {
    "text": "equals allows coercion and triple equals disallows coercion therefore double equals appears to be",
    "start": "686259",
    "end": "691959"
  },
  {
    "text": "doing more work and in fact this bears out fewer to do performance tests with veil values of different types and you",
    "start": "691959",
    "end": "697419"
  },
  {
    "text": "were to compare using double equals versus triple equals the coercion rules that go through do actually take a",
    "start": "697419",
    "end": "703869"
  },
  {
    "text": "little bit of time not a lot we're talking about a couple of microseconds difference so you're not gonna see any",
    "start": "703869",
    "end": "710169"
  },
  {
    "text": "differences whatsoever if you've heard people say always use triple equals because it's faster that's just fun because nobody here is going to be",
    "start": "710169",
    "end": "716829"
  },
  {
    "text": "writing programs where you're gonna be doing tens of millions of comparisons all right together in one particular",
    "start": "716829",
    "end": "723189"
  },
  {
    "text": "thing to even come close to noticing four or five microseconds difference between the two so it really reframes",
    "start": "723189",
    "end": "729609"
  },
  {
    "text": "things now I'm gonna have to question a little bit of authority here because many of you are gonna say but I've read",
    "start": "729609",
    "end": "735100"
  },
  {
    "text": "the the good parts Doug Crockford he's a smart guy he knows what he's talking about and he says that we should always",
    "start": "735100",
    "end": "740889"
  },
  {
    "text": "avoid the double equals well actually that's not entirely true because if you go to his book which I will use a quote",
    "start": "740889",
    "end": "748209"
  },
  {
    "text": "from if you go and look at his book he says blah blah blah when comparing any of these falling values always use the",
    "start": "748209",
    "end": "754509"
  },
  {
    "text": "triple equals right but it's that part that I've highlighted there if you want the type coercion then use the short",
    "start": "754509",
    "end": "759669"
  },
  {
    "text": "form right there in the Bible for JavaScript that everybody has taken is their religion for how to understand",
    "start": "759669",
    "end": "765669"
  },
  {
    "text": "what javascript does Doug Crockford himself endorses the idea that if you want type coercion then the double",
    "start": "765669",
    "end": "771369"
  },
  {
    "text": "equals form of that operator the the shortened form of those operators is the appropriate mechanism to use which",
    "start": "771369",
    "end": "777759"
  },
  {
    "text": "actually reframes this debate it's not about whether Doug Crockford likes it or not it's actually about do you want type",
    "start": "777759",
    "end": "784149"
  },
  {
    "text": "coercion or not and then you're gonna say absolutely I don't because it seems like black magic and I'm gonna try to",
    "start": "784149",
    "end": "789189"
  },
  {
    "text": "prove to you in just a moment that it's not but I really want to reframe this debate it's not that it's evil or bad or",
    "start": "789189",
    "end": "794470"
  },
  {
    "text": "buggy or magical or any of those sorts of things it is simply a question of choosing as a responsible developer is",
    "start": "794470",
    "end": "801910"
  },
  {
    "text": "this a mechanism you want to use is that a tool you want to use or not so let's",
    "start": "801910",
    "end": "807399"
  },
  {
    "text": "pull up or let's lint ourselves another file I'm gonna look at a set of coercion",
    "start": "807399",
    "end": "813429"
  },
  {
    "text": "zand what I've tried to do in this file is come up with the worst of the worst I could give you literally an",
    "start": "813429",
    "end": "820010"
  },
  {
    "text": "infinite list of cases where coercion works exactly the way we would expect there's lots and lots of places where",
    "start": "820010",
    "end": "826010"
  },
  {
    "text": "coercion is totally sensible but let me give you an example of a list of sort of the worst possible offenders here I",
    "start": "826010",
    "end": "832940"
  },
  {
    "text": "picked out 24 sort of corner cases the worst possible offenders that we could",
    "start": "832940",
    "end": "838700"
  },
  {
    "text": "come up with in coercion these falsey values that tend to create some weirdness and you'll notice that out of",
    "start": "838700",
    "end": "844310"
  },
  {
    "text": "the 24 of them I've marked 7 of them as us this is oops this is some gotchas but",
    "start": "844310",
    "end": "851300"
  },
  {
    "text": "out of 24 there are 7 of them that definitely bears some further examination and then there are 17 of",
    "start": "851300",
    "end": "858410"
  },
  {
    "text": "them which are completely sane and reasonable and that probably doesn't fit with what you've heard which which is",
    "start": "858410",
    "end": "864740"
  },
  {
    "text": "that most people suggest that coercion is all evil or it's mostly evil and in fact the the comparison visually here is",
    "start": "864740",
    "end": "872420"
  },
  {
    "text": "that most of coercion is actually quite sensible and reasonable and there's a few small cases that we should avoid and",
    "start": "872420",
    "end": "879350"
  },
  {
    "text": "we'll look at what those cases are I'm going to try to give you some practical takeaways to avoid those 7 owes and it's",
    "start": "879350",
    "end": "885260"
  },
  {
    "text": "not going to be as difficult as you think but if you were to try to make this list it's an infinite list of",
    "start": "885260",
    "end": "890510"
  },
  {
    "text": "really good coercion stuff that's useful if you'd like to use it in your program and 7 gotchas that if you could come up",
    "start": "890510",
    "end": "896600"
  },
  {
    "text": "with a simple set of rules like the two that I'm about to share with you then you could avoid those 7 pitfalls and use",
    "start": "896600",
    "end": "902990"
  },
  {
    "text": "this mechanism to make better shorter cleaner more concise code so let's go",
    "start": "902990",
    "end": "908540"
  },
  {
    "text": "back and see what the linter might have had to say about this you notice that it calls out those 7 it gives us some",
    "start": "908540",
    "end": "914060"
  },
  {
    "text": "warning so for example warning quote zero equal equal false uses an unsafe",
    "start": "914060",
    "end": "919400"
  },
  {
    "text": "equal equals coercion so it's telling us these things are unsafe you shouldn't do that so seven warning 17 out of the 24",
    "start": "919400",
    "end": "926300"
  },
  {
    "text": "coercion tests were perfectly a fault fine and we should avoid the few unsafe ones now if you have trouble with some",
    "start": "926300",
    "end": "933350"
  },
  {
    "text": "of these corner cases and the rules in fact if the rules give you issues I have",
    "start": "933350",
    "end": "938690"
  },
  {
    "text": "lots of bugs in my code but types are almost never the thing that causes bugs in my code but if you do struggle with",
    "start": "938690",
    "end": "944180"
  },
  {
    "text": "that there are tools that can actually help so let me give you just one tool that I like it's restrict mode and if you look at",
    "start": "944180",
    "end": "951170"
  },
  {
    "text": "restrict mode org you can see that they have a build tool this does not",
    "start": "951170",
    "end": "956960"
  },
  {
    "text": "transform your code for production but it's a development side build tool that will transform your code it will go",
    "start": "956960",
    "end": "962480"
  },
  {
    "text": "through all the places that you're doing these quote-unquote unsafe coercion and it will put checks around them and then you can run that",
    "start": "962480",
    "end": "968870"
  },
  {
    "text": "code with real input and it will spit out warnings if you're doing stupid stuff like for instance comparing",
    "start": "968870",
    "end": "975260"
  },
  {
    "text": "strings to arrays that's an unsafe comparison but if you're doing safe things like string a number which in",
    "start": "975260",
    "end": "980690"
  },
  {
    "text": "almost all cases are totally rational insane if you're doing those it doesn't spit down any warnings so if you're",
    "start": "980690",
    "end": "986720"
  },
  {
    "text": "struggling with this and you're saying it's just too difficult for me to reason about just six tiny little types then",
    "start": "986720",
    "end": "993200"
  },
  {
    "text": "there are tools that can help you with that it's not a well I have to avoid all types entirely and all this nonsense",
    "start": "993200",
    "end": "999260"
  },
  {
    "text": "about things in fact most of that noise that's made in our industry where people say coercion is bad and it's evil and we",
    "start": "999260",
    "end": "1005890"
  },
  {
    "text": "shouldn't do it if you go and look at the code of the people that are saying that they use coercion all over the place yes including Doug Crockford you",
    "start": "1005890",
    "end": "1013360"
  },
  {
    "text": "can open up his code and he uses coercion both implicit and explicit all over the place because it's a reality that that's what's important so that's",
    "start": "1013360",
    "end": "1020110"
  },
  {
    "text": "really more one more one of those cases where he's saying do as I say not as I do which is ridiculous right see there's",
    "start": "1020110",
    "end": "1026829"
  },
  {
    "text": "something deeper here we need to be more responsible with our code so restrict",
    "start": "1026830",
    "end": "1032140"
  },
  {
    "text": "mode org is a nice useful tool and there are other tools out there I think Facebook is coming out with a tool",
    "start": "1032140",
    "end": "1037540"
  },
  {
    "text": "called flow that seems to be doing something very similar so there are tools that that can be made and you can make your own tools to do your own",
    "start": "1037540",
    "end": "1044079"
  },
  {
    "text": "checking so let's actually go back to checking some more code because I mentioned oops",
    "start": "1044080",
    "end": "1049870"
  },
  {
    "text": "I mentioned that there are the seven bad cases so let's actually dig specifically into those bad cases for just a moment",
    "start": "1049870",
    "end": "1058110"
  },
  {
    "text": "remember these seven bad cases these are the ups these are the O's okay so I've",
    "start": "1058110",
    "end": "1063430"
  },
  {
    "text": "partitioned them off the four on the top and the three on the bottom the first rule that I want to give you as a",
    "start": "1063430",
    "end": "1068590"
  },
  {
    "text": "takeaway is that you should never ever under any circumstances with zero exceptions ever make a comparison with",
    "start": "1068590",
    "end": "1074770"
  },
  {
    "text": "double equals false or double equals true if you're doing that you are doing it wrong plain and simple end of story",
    "start": "1074770",
    "end": "1080710"
  },
  {
    "text": "double equals true and double equal faul should always be avoided so what we see here is the first four of our seven",
    "start": "1080710",
    "end": "1086590"
  },
  {
    "text": "are using the double equals false comparison now I could dig into the real reasons why that is but generally",
    "start": "1086590",
    "end": "1092649"
  },
  {
    "text": "speaking the reason why those should be avoided is because it tricks our developer brains that the way that it",
    "start": "1092649",
    "end": "1098200"
  },
  {
    "text": "explicitly has a boolean on one side it tricks our developer brains into thinking that it should take the other",
    "start": "1098200",
    "end": "1103870"
  },
  {
    "text": "side the thing that's not boolean and make it boolean but that's not what the algorithm says you can open up the spec",
    "start": "1103870",
    "end": "1109990"
  },
  {
    "text": "and is a very simple ten or fifteen lines in the spec that says exactly what to do it's not magic or random or",
    "start": "1109990",
    "end": "1116049"
  },
  {
    "text": "anything like that but the spec does not say if boolean is on one side make the other thing truth your fall see the",
    "start": "1116049",
    "end": "1122409"
  },
  {
    "text": "operator tries to trick us when we use it like that into thinking that's what should happen but that's when we get these weird things like for instance",
    "start": "1122409",
    "end": "1129010"
  },
  {
    "text": "that false is equal to empty string we would think that it should take that and make it equal to a false and so it's",
    "start": "1129010",
    "end": "1135519"
  },
  {
    "text": "just sort of an happy accident that this ends up being true but that's not really what's happening at all in fact most of",
    "start": "1135519",
    "end": "1141490"
  },
  {
    "text": "these coercion 's depending on the way you go through the steps most of them end up converting to numbers and doing comparison of numbers so avoid double",
    "start": "1141490",
    "end": "1149019"
  },
  {
    "text": "equals true and avoid double equals false and we've immediately taken that list of seven bad offenders and paired it down",
    "start": "1149019",
    "end": "1154210"
  },
  {
    "text": "to three the three that I show they're on the bottom and I won't belabor any more specifically you know if you dig",
    "start": "1154210",
    "end": "1160210"
  },
  {
    "text": "into these things there's there's actually reasons why line seven and eight you almost never would actually",
    "start": "1160210",
    "end": "1165399"
  },
  {
    "text": "compare anything directly to an empty array that's kind of ridiculous when you actually try to examine the way that",
    "start": "1165399",
    "end": "1170830"
  },
  {
    "text": "that would happen in a real code because we know arrays are held by reference so you would already have some other variable on some other side that had to",
    "start": "1170830",
    "end": "1176529"
  },
  {
    "text": "have some reference in it that's not common that these sorts of things happen and that's really the theme that I'm trying to get across here",
    "start": "1176529",
    "end": "1182500"
  },
  {
    "text": "is that you've been told and you've been believing that coercion is a real pitfall that it's going to just break",
    "start": "1182500",
    "end": "1188139"
  },
  {
    "text": "every single program out there and in reality there's not a lot of problems that actually crop up if you want to read more about that by the way this",
    "start": "1188139",
    "end": "1194080"
  },
  {
    "text": "third title of the book serious types and grammar it has a whole like nearly seventy page chapter on coercion x' and",
    "start": "1194080",
    "end": "1200860"
  },
  {
    "text": "i deal with specifically all of these cases so basically if you don't follow the rules you get what you deserve don't",
    "start": "1200860",
    "end": "1207159"
  },
  {
    "text": "be dumb the rules are rule number one never use double equals true or double equals false and rule",
    "start": "1207159",
    "end": "1214270"
  },
  {
    "text": "number two if the values can be empty during zero or array you should be careful you should perhaps probably",
    "start": "1214270",
    "end": "1219820"
  },
  {
    "text": "avoid using the double equals so reason about your code and decide is it possible for the values in my",
    "start": "1219820",
    "end": "1226389"
  },
  {
    "text": "comparisons to ever be empty string 0 or are empty alright and if so just out of an abundance of caution avoid it but in",
    "start": "1226389",
    "end": "1233080"
  },
  {
    "text": "all other cases besides these two this is literally the only rules and I believe you can use all the rest of",
    "start": "1233080",
    "end": "1239049"
  },
  {
    "text": "coercion to make your code simpler and more straightforward instead of having these double equals on true and double",
    "start": "1239049",
    "end": "1245139"
  },
  {
    "text": "equals undefined and things like that I think it's much better to use the sort of terse form I have this kind of theory",
    "start": "1245139",
    "end": "1251679"
  },
  {
    "text": "about coding I don't know if it applies to anyone else but I have this theory of coding that the more things that I write",
    "start": "1251679",
    "end": "1256779"
  },
  {
    "text": "the more chances there are for me to screw something up so I prefer to write less code when it can be terse and still",
    "start": "1256779",
    "end": "1262840"
  },
  {
    "text": "be correct another example where coercion for example why coercion can be useful is null and undefined if we open",
    "start": "1262840",
    "end": "1269799"
  },
  {
    "text": "up the Specht and the spec says that no one and defined coerce to each other and to no other values in the language which",
    "start": "1269799",
    "end": "1275200"
  },
  {
    "text": "is actually very useful we can treat them as indistinguishable so I have this a and B and we notice that a and B are",
    "start": "1275200",
    "end": "1280870"
  },
  {
    "text": "equal to each other but neither a nor B is equal to any of those other troublesome false key values because",
    "start": "1280870",
    "end": "1287320"
  },
  {
    "text": "they coerce to each other and to no other values so your choice is line four which i think is much more straightforward or things like line 15",
    "start": "1287320",
    "end": "1294639"
  },
  {
    "text": "were you having to do things very explicitly with the triple equals and when people tell you well it's better to",
    "start": "1294639",
    "end": "1300940"
  },
  {
    "text": "be more explicit they never they always gloss over the fact that you actually have to do two comparisons now rather than one so even if it was tiny up even",
    "start": "1300940",
    "end": "1308230"
  },
  {
    "text": "if triple equals was a tiny couple of microseconds faster when you only do it once when you do it twice it ends up",
    "start": "1308230",
    "end": "1314289"
  },
  {
    "text": "actually being slower so the reality is that there's a lot of fun that I think we should let go of we should start",
    "start": "1314289",
    "end": "1319480"
  },
  {
    "text": "using coercion to our benefit in our code so let me boil this down for you because everybody likes tweetable",
    "start": "1319480",
    "end": "1325840"
  },
  {
    "text": "protips use coercion where it's safe and convenient and don't use coercion where",
    "start": "1325840",
    "end": "1331929"
  },
  {
    "text": "it's unsafe plain and simple be a responsible developer don't just listen",
    "start": "1331929",
    "end": "1337720"
  },
  {
    "text": "to the hype that somebody said along the way or you had some bug and it was because you ran across some corner case",
    "start": "1337720",
    "end": "1343149"
  },
  {
    "text": "that's not a sufficient reason for throwing out an entire important part of our language rather than running",
    "start": "1343149",
    "end": "1349720"
  },
  {
    "text": "from the things that are a little bit difficult maybe we ought to run towards those things and learn them and I've just given you two simple rules which",
    "start": "1349720",
    "end": "1355360"
  },
  {
    "text": "should help with that okay the next thing that we're gonna talk about I'm gonna pull up the main page for",
    "start": "1355360",
    "end": "1361270"
  },
  {
    "text": "anonymous not the hacker group anonymous functions are always a bad idea I'm",
    "start": "1361270",
    "end": "1368080"
  },
  {
    "text": "gonna give you three simple reasons why I think you should never ever under any circumstances with zero exceptions use",
    "start": "1368080",
    "end": "1373630"
  },
  {
    "text": "anonymous function expressions in your code they yield confusing stack traces and they make your code harder to read I",
    "start": "1373630",
    "end": "1379720"
  },
  {
    "text": "think you should avoid them so let's pull up I will check a non-functioning",
    "start": "1379720",
    "end": "1389620"
  },
  {
    "text": "you recognize code like this anybody have a written code where you've got click handlers and then Ajax calls and",
    "start": "1389620",
    "end": "1395380"
  },
  {
    "text": "timeouts inside of those things and we nest these things together alright so I have three functions here you'll notice that on lines one on lines three and on",
    "start": "1395380",
    "end": "1403390"
  },
  {
    "text": "lines five I have these anonymous functions now at the moment I'm not actually talking about whether it's in",
    "start": "1403390",
    "end": "1408610"
  },
  {
    "text": "line or not I'm simply talking about whether it is an anonymous function because it has for example function open",
    "start": "1408610",
    "end": "1414670"
  },
  {
    "text": "closed parenthesis it has no name there this is of course the most common idiom that you see and it's encouraged this",
    "start": "1414670",
    "end": "1420850"
  },
  {
    "text": "sort of anonymous lambda style is encouraged by people that do coding and all these other languages I mean and all",
    "start": "1420850",
    "end": "1426580"
  },
  {
    "text": "these frameworks things like jQuery and so forth this is incredibly easy and simple to sort of write that kind of code but I",
    "start": "1426580",
    "end": "1433180"
  },
  {
    "text": "would suggest to you that you're making bad code decisions by using anonymous functions you should always put a name",
    "start": "1433180",
    "end": "1438400"
  },
  {
    "text": "there let's see if the linter had anything to say yeah all three of those that said the func should not have a name anonymous functions make your code",
    "start": "1438400",
    "end": "1445210"
  },
  {
    "text": "sad what is the alternative then if I were to fix it in a non funk stew",
    "start": "1445210",
    "end": "1451350"
  },
  {
    "text": "the alternative is to simply insert names so I now have names like handler",
    "start": "1451350",
    "end": "1457450"
  },
  {
    "text": "request and response none of the rest of my code has changed but instead of doing",
    "start": "1457450",
    "end": "1462520"
  },
  {
    "text": "ridiculous things like using arguments Akali or other weird ways you know of doing self reference you'll notice that",
    "start": "1462520",
    "end": "1468610"
  },
  {
    "text": "I have nice convenient lexical variable names like handler and request to refer to these functions so I promised you",
    "start": "1468610",
    "end": "1475480"
  },
  {
    "text": "three reasons why the first one is that when you name a function expression it gives you a simple self reference inside",
    "start": "1475480",
    "end": "1481660"
  },
  {
    "text": "of that function no it's not the this keyword we're gonna get to this confusion here in just a moment but this keyword is not how you",
    "start": "1481660",
    "end": "1488370"
  },
  {
    "text": "self-reference if you give a function a name a function expression a name then you get a self reference so it makes it",
    "start": "1488370",
    "end": "1495210"
  },
  {
    "text": "easier for recursion for event unbinding things like that always give it a name and by the way give it a good name don't",
    "start": "1495210",
    "end": "1501690"
  },
  {
    "text": "use fubar give it a reasonable useful name like I've done here with handle and request and response so that's the first",
    "start": "1501690",
    "end": "1507030"
  },
  {
    "text": "reason the second reason why it's better and I think this alone stands on its own as a sufficient reason is that how many",
    "start": "1507030",
    "end": "1513750"
  },
  {
    "text": "of you have ever had stack traces where it said anonymous function and honest function you know a thousand times it's ridiculous and difficult to debug guess",
    "start": "1513750",
    "end": "1520740"
  },
  {
    "text": "what if you put a name on your function expressions it uses the name and your stack traces so it makes your code",
    "start": "1520740",
    "end": "1526710"
  },
  {
    "text": "easier to debug especially if you use a reasonable name and especially it's true",
    "start": "1526710",
    "end": "1532110"
  },
  {
    "text": "if you've got this code like it's all minified on to one line and it's like line one character thirty-two thousand",
    "start": "1532110",
    "end": "1537660"
  },
  {
    "text": "seven hundred twelve nobody knows what that is but if you've given it a useful and reasonable name you have a better chance of understanding and debugging",
    "start": "1537660",
    "end": "1543900"
  },
  {
    "text": "your code and the third and final reason is that it actually can't make I think it's stylistically it makes code more",
    "start": "1543900",
    "end": "1549900"
  },
  {
    "text": "readable I do not have to look at the surrounding context of the function header for the word respond for the",
    "start": "1549900",
    "end": "1556380"
  },
  {
    "text": "function response there on line 3 as we show I don't have to look at the surrounding code to understand what that",
    "start": "1556380",
    "end": "1562410"
  },
  {
    "text": "function is doing the the name that I give it is sort of self documenting if I had the anonymous functions like I did",
    "start": "1562410",
    "end": "1568740"
  },
  {
    "text": "in the previous code snippet in the anonymous functions here I actually have",
    "start": "1568740",
    "end": "1573810"
  },
  {
    "text": "to look at the context I have to go and look for what is it doing and that's not that's not useful to anyone that's",
    "start": "1573810",
    "end": "1578820"
  },
  {
    "text": "that's going to create more confusion for your code so simply giving them names those are the three reasons self",
    "start": "1578820",
    "end": "1584490"
  },
  {
    "text": "reference better debuggable and better code maintainability okay so there are",
    "start": "1584490",
    "end": "1591540"
  },
  {
    "text": "other problems and this one is saying that in this particular case there's not really any value in using the inline",
    "start": "1591540",
    "end": "1596820"
  },
  {
    "text": "nested functions now this is where I am actually suggesting that perhaps you shouldn't even use function expressions",
    "start": "1596820",
    "end": "1603480"
  },
  {
    "text": "maybe you should pull things out as function declarations as I've done here because with function declarations",
    "start": "1603480",
    "end": "1608520"
  },
  {
    "text": "actually things get an awful lot more readable instead of nesting things together the way people have always told you I didn't",
    "start": "1608520",
    "end": "1614610"
  },
  {
    "text": "change any of the functionality of my code but I used function declaration with those same names and now things are a lot more reasonable because I can look",
    "start": "1614610",
    "end": "1620940"
  },
  {
    "text": "just at the handler function and understand that after a timeout it calls the request and then I can look just at",
    "start": "1620940",
    "end": "1626610"
  },
  {
    "text": "the request function and understand that after an AJAX comes back it calls just the response and then I can look at",
    "start": "1626610",
    "end": "1631620"
  },
  {
    "text": "response and see what other functions it calls and I can reason about these things independently which makes code much more readable and maintainable so",
    "start": "1631620",
    "end": "1638700"
  },
  {
    "text": "in many cases you've been told you use these inline functions because you need to do closures or things like that all",
    "start": "1638700",
    "end": "1643770"
  },
  {
    "text": "that's nonsense there's many cases where function declarations pulled out can actually make more readable code okay",
    "start": "1643770",
    "end": "1649890"
  },
  {
    "text": "moving on oh there's a problem with that code you'll notice that I subtly introduced an iffy and anonymous if he",
    "start": "1649890",
    "end": "1655950"
  },
  {
    "text": "here right up here at the top anonymous if he's shouldn't exist either no anonymous functions period no",
    "start": "1655950",
    "end": "1661770"
  },
  {
    "text": "exceptions so we should simply insert a name like for instance saying I IFE or give it some other name that",
    "start": "1661770",
    "end": "1667650"
  },
  {
    "text": "represents what that file is doing or something like that give it a useful name but don't use anonymous functions",
    "start": "1667650",
    "end": "1672750"
  },
  {
    "text": "okay so that's it for my talk for my discussion on that let's jump to a very",
    "start": "1672750",
    "end": "1679470"
  },
  {
    "text": "related topic which is scope so let's pull up the main page for scope and I want to go quickly through this but I",
    "start": "1679470",
    "end": "1684690"
  },
  {
    "text": "just want to point out that var the var keyword can sometimes confuse and even abuse your function scope and there's",
    "start": "1684690",
    "end": "1691080"
  },
  {
    "text": "this thing called block scoping which is coming new to the language we're going to talk about why that's useful because block scoping can actually help",
    "start": "1691080",
    "end": "1697710"
  },
  {
    "text": "I'm not saying to replace all of your code with that but it is very useful to do block scoping where it's possible so",
    "start": "1697710",
    "end": "1703290"
  },
  {
    "text": "let's look at a particularly ugly piece of code I just made this code up but in this ugly piece of code what you notice",
    "start": "1703290",
    "end": "1708990"
  },
  {
    "text": "is that we have these VAR keywords strewn all the way throughout this code and how many of you have ever heard that",
    "start": "1708990",
    "end": "1714210"
  },
  {
    "text": "old adage that says you should manually hoist all your VARs to the top of your functions anybody have just one big long",
    "start": "1714210",
    "end": "1720030"
  },
  {
    "text": "bar I've done that plenty of times so in unfortunately that doesn't actually end up creating a panacea in",
    "start": "1720030",
    "end": "1726030"
  },
  {
    "text": "this case we have these VARs that are nested inside of these inline blocks and it's confusing whether or not they're",
    "start": "1726030",
    "end": "1731250"
  },
  {
    "text": "intended to be used only for the block or whether we're implicitly relying upon Hawaii sting or we don't even know so",
    "start": "1731250",
    "end": "1736740"
  },
  {
    "text": "when you look at somebody's code that's doing that that's putting VARs inside of blocks like that you don't know if they intended it that way or if they're just",
    "start": "1736740",
    "end": "1743070"
  },
  {
    "text": "being an idiot and that's kind of the problem so one of the reasons why manually hoisted into the top is that",
    "start": "1743070",
    "end": "1748770"
  },
  {
    "text": "there's no confusion so far strewn about the can create issues so it's very common for people to then do manual hoisting",
    "start": "1748770",
    "end": "1755250"
  },
  {
    "text": "like we'll see here in scope to in scope to Jas I've manually hoisted all my variables to the top so I have no more",
    "start": "1755250",
    "end": "1762540"
  },
  {
    "text": "var stirring throughout now if you have a short function not such a big deal but if you have long functions as many",
    "start": "1762540",
    "end": "1767940"
  },
  {
    "text": "people tend to do then you start to run into very similar problems where now the",
    "start": "1767940",
    "end": "1773520"
  },
  {
    "text": "code is confusing because if I'm way down deep here and I'm like wait where is I coming from and G and that sort of",
    "start": "1773520",
    "end": "1779010"
  },
  {
    "text": "thing was at a parameter was at a local variable you have to scroll all the way top to find a function with the variable",
    "start": "1779010",
    "end": "1784380"
  },
  {
    "text": "declaration and that can become difficult and I think the linter actually has something to say about the lunches all the VARs at the top can also",
    "start": "1784380",
    "end": "1790770"
  },
  {
    "text": "be confusing the point is straining your VARs across the code is confusing and",
    "start": "1790770",
    "end": "1795780"
  },
  {
    "text": "putting them all at the top is confusing so there has to be somewhere in the middle and it is that block scoping that",
    "start": "1795780",
    "end": "1800820"
  },
  {
    "text": "is in the middle so let's take a look at the man page for block scoping block",
    "start": "1800820",
    "end": "1810299"
  },
  {
    "text": "scope declares variables as close to their intended usage as possible and scopes them only to an enclosing block",
    "start": "1810299",
    "end": "1816059"
  },
  {
    "text": "not the whole function if you have experience from other languages you already understand that it's the principle least privilege or the",
    "start": "1816059",
    "end": "1821610"
  },
  {
    "text": "principle of least exposure make the variables only used where we need them for example for loops when you do for",
    "start": "1821610",
    "end": "1827669"
  },
  {
    "text": "VAR i equals you're declaring stylistically that the i is only supposed to be used for the for loop so",
    "start": "1827669",
    "end": "1834000"
  },
  {
    "text": "you're doing exactly that you're in a sense stylistically block scoping your i but it's not enforced yet in javascript",
    "start": "1834000",
    "end": "1839850"
  },
  {
    "text": "which is actually why it's very cool that javascript is adding direct support as of es6 for block scoping so if we go",
    "start": "1839850",
    "end": "1847500"
  },
  {
    "text": "into scope 3 jas you'll notice here that I'm doing something interesting I'm actually doing manual blocks I'm",
    "start": "1847500",
    "end": "1854490"
  },
  {
    "text": "creating explicit blocks like I do here on line 12 I have what is called the let statement form of this keyword the new",
    "start": "1854490",
    "end": "1860610"
  },
  {
    "text": "let keyword that's coming in in es6 and I'm creating a manual block for that scoping of G and I'm saying only in this",
    "start": "1860610",
    "end": "1867090"
  },
  {
    "text": "block does G exist and don't use it outside now Java scripts actually going to enforce that if you tried to use G",
    "start": "1867090",
    "end": "1872429"
  },
  {
    "text": "outside of that block you're actually getting into error back which is a good thing for us but you'd also notice that",
    "start": "1872429",
    "end": "1877740"
  },
  {
    "text": "I can use let I instead of my for headers and I can even do let declarations like let F equal C and so",
    "start": "1877740",
    "end": "1883620"
  },
  {
    "text": "forth so I about to let blah form which I'm a bigger fan of and I'll explain that more in a moment or this",
    "start": "1883620",
    "end": "1888660"
  },
  {
    "text": "sort of implicit luck declaration syntax in either case these variables end up belonging only to the blocks that they",
    "start": "1888660",
    "end": "1894600"
  },
  {
    "text": "exist for and nowhere else so am i saying only do let's there are people on",
    "start": "1894600",
    "end": "1900090"
  },
  {
    "text": "the tc39 committee that are on record is saying let is the new var just do a global find and replace of all your VARs",
    "start": "1900090",
    "end": "1906150"
  },
  {
    "text": "and make them too let's I think that's absolutely patently absurd and ridiculous I plan to use both so in this case in my",
    "start": "1906150",
    "end": "1913530"
  },
  {
    "text": "stupid example I have some VARs because these are variables that I'm going to use across the entire function and then",
    "start": "1913530",
    "end": "1919050"
  },
  {
    "text": "I have some lets in places where I have localized variables that are only gonna be used in small places and to me that's useful to have both keywords in play",
    "start": "1919050",
    "end": "1926190"
  },
  {
    "text": "because it's a stylistic signal to me when I see var that means used everywhere and when I see let it means",
    "start": "1926190",
    "end": "1931590"
  },
  {
    "text": "used only in this block and I've chosen to to apply that style to my code and",
    "start": "1931590",
    "end": "1937110"
  },
  {
    "text": "it's made my code a lot easier to understand for me so there is this whole thing with the let blocks that we want",
    "start": "1937110",
    "end": "1942660"
  },
  {
    "text": "to address let's just go back here and see the the let keyword isn't valid until es6 so that's kind of a bummer but",
    "start": "1942660",
    "end": "1948930"
  },
  {
    "text": "there are ways to get around that there are tools but notice this third warning",
    "start": "1948930",
    "end": "1954000"
  },
  {
    "text": "that it gives us it says it's confusing that let is implicitly hijacking a block scope and I agree with the linter here",
    "start": "1954000",
    "end": "1960240"
  },
  {
    "text": "because I wrote the linter that it is confusing it's an implicit mechanism I",
    "start": "1960240",
    "end": "1965310"
  },
  {
    "text": "have an if statement that becomes also a block of scope if there's a declaration",
    "start": "1965310",
    "end": "1970380"
  },
  {
    "text": "inside of it which means you don't just look for functions now now you have to go start going looking for every matching curly brace and then scanning",
    "start": "1970380",
    "end": "1976950"
  },
  {
    "text": "the entire contents of that curly brace pair to see if there are any let's true anywhere throughout because you can put them wherever you want and there's",
    "start": "1976950",
    "end": "1983360"
  },
  {
    "text": "hazards with hoisting and all sorts of things so it's an implicit mechanism and I'm not a fan of that but the the syntax",
    "start": "1983360",
    "end": "1990090"
  },
  {
    "text": "of let blocks unfortunately we see here the next one it's actually flat-out wrong because that's not even valid JavaScript which sucks es6 decided to",
    "start": "1990090",
    "end": "1998550"
  },
  {
    "text": "reject the let block syntax the one I think that is superior and they chose to keep that inferior implicit mechanism so",
    "start": "1998550",
    "end": "2006140"
  },
  {
    "text": "it sucks that we would prefer to do these explicit blocks but that particular form even though it you know I didn't make it up it's something that",
    "start": "2006140",
    "end": "2012710"
  },
  {
    "text": "Firefox had for a long time but they've rejected it at least for now out of JavaScript which means that we can use",
    "start": "2012710",
    "end": "2017990"
  },
  {
    "text": "tools so I wrote a tool called letter and this tool is designed to solve that problem",
    "start": "2017990",
    "end": "2023900"
  },
  {
    "text": "okay and what letter does is it transforms non-standard let blocks into standard JavaScript block scoping so you",
    "start": "2023900",
    "end": "2031340"
  },
  {
    "text": "can use this as a pre-processing tool just like you use other build tools and things like that it's just another step",
    "start": "2031340",
    "end": "2036980"
  },
  {
    "text": "in the process and you can start writing with explicit block scoping and just simply transform your code so very",
    "start": "2036980",
    "end": "2042170"
  },
  {
    "text": "quickly what does it do if we don't look at scope for Dante it's gonna illustrate for us what the letter tool does by",
    "start": "2042170",
    "end": "2049878"
  },
  {
    "text": "default by default it's gonna say well you want to transpile all the way back to es 3 so you can use it in all today's",
    "start": "2049879",
    "end": "2057050"
  },
  {
    "text": "browsers so we can start out with a block like this and when you use letter it creates this ugly crap which actually",
    "start": "2057050",
    "end": "2062179"
  },
  {
    "text": "takes advantage of the fact that catch blocks or block scope that's a little-known fact nobody wants that kind",
    "start": "2062179",
    "end": "2067220"
  },
  {
    "text": "of stuff but those are the hacks that we have to sometimes deal with in tools and in fact many other tools use this there",
    "start": "2067220",
    "end": "2072470"
  },
  {
    "text": "are other hacky tricks like there are things where you can stick if he's in there or you can do this thing called",
    "start": "2072470",
    "end": "2078470"
  },
  {
    "text": "hygienic variable renaming there's various other hacks this just happens to be the one that letter uses but it means",
    "start": "2078470",
    "end": "2084260"
  },
  {
    "text": "it works it actually enforces it if we try to reference any outside of the block it was in fact truly incorrectly",
    "start": "2084260",
    "end": "2090378"
  },
  {
    "text": "block scoped only to the block but it turns out that we've got a much better way of doing it because when we don't",
    "start": "2090379",
    "end": "2095690"
  },
  {
    "text": "want that ugly thing when we're already going to be using tools to bridge into es6 we can even just switch on the es6",
    "start": "2095690",
    "end": "2102619"
  },
  {
    "text": "flag in this letter tool and it will take that same block and instead of writing that crappy ugly stuff it will",
    "start": "2102619",
    "end": "2108050"
  },
  {
    "text": "write something that is valid es6 you notice I just have an empty naked curly brace pair there that's very idiomatic",
    "start": "2108050",
    "end": "2115100"
  },
  {
    "text": "in other languages but it's very caught uncommon for people to do that in JavaScript but it's still totally useful so we can create these explicit blocks",
    "start": "2115100",
    "end": "2121790"
  },
  {
    "text": "exactly like I'm doing here on our own or we can use the the syntax that I was suggesting that Firefox has had for a",
    "start": "2121790",
    "end": "2128119"
  },
  {
    "text": "while and then use a tool but I still think this is a much better form of block scoping create your explicit naked",
    "start": "2128119",
    "end": "2133850"
  },
  {
    "text": "blocks for this and then use the the letter key where the let keyword at the top of those and so you'll notice the",
    "start": "2133850",
    "end": "2140359"
  },
  {
    "text": "transformation between line 1 and 2 and line 10 and 11 it's a very subtle transformation they still are going to",
    "start": "2140359",
    "end": "2146300"
  },
  {
    "text": "behave exactly the same I think line 1 and 2 is slightly better and that's why the tool might be useful to you but in",
    "start": "2146300",
    "end": "2152030"
  },
  {
    "text": "either case you should use Blissett block scoping in my opinion rather than implicit okay one last thing",
    "start": "2152030",
    "end": "2157520"
  },
  {
    "text": "on scoping is loops loops actually benefit hugely from block scoping loops",
    "start": "2157520",
    "end": "2164960"
  },
  {
    "text": "and block scoping solve pesky issues with closures and when I show you this code you might this might look familiar to you if you've ever written loops with",
    "start": "2164960",
    "end": "2171710"
  },
  {
    "text": "functions inside of them and had problems like for your check boxes or your things I'm gonna show it with time",
    "start": "2171710",
    "end": "2177170"
  },
  {
    "text": "outs here but in going back to that previous code sample here's I've pulled out a version or a snippet of it and",
    "start": "2177170",
    "end": "2183860"
  },
  {
    "text": "you'll notice here that I have this set timeout that's referencing an eye in the previous code when I was using just regular VARs this code would break",
    "start": "2183860",
    "end": "2190070"
  },
  {
    "text": "because it's not closing over a different eye for each iteration but it turns out with the let keyword this let",
    "start": "2190070",
    "end": "2197000"
  },
  {
    "text": "I the eye doesn't just belong to the for loop it's actually specified to belong to each iteration under the coverage",
    "start": "2197000",
    "end": "2203600"
  },
  {
    "text": "JavaScript creating a whole new eye for every single iteration which means you automatically close over a different eye",
    "start": "2203600",
    "end": "2209570"
  },
  {
    "text": "for each iteration and closure to start magically working with all I let crappy if if he hacks that we've all done for",
    "start": "2209570",
    "end": "2215630"
  },
  {
    "text": "years let block with I mean let's coping with four loops is actually a huge win it solves a lot of those issues with",
    "start": "2215630",
    "end": "2222140"
  },
  {
    "text": "closure so I'm a big fan of block scoping I think you should use it in your code I think you should start using it now okay let's move on the next thing",
    "start": "2222140",
    "end": "2229820"
  },
  {
    "text": "we're gonna talk about the this keyword how many of you have ever had struggles with this keyword it's one of the most",
    "start": "2229820",
    "end": "2234980"
  },
  {
    "text": "commonly misunderstood and all and I'm showing some tweets here from people that have done crazy things like this",
    "start": "2234980",
    "end": "2241310"
  },
  {
    "text": "stop method call this which is absolutely insanity I love this one new",
    "start": "2241310",
    "end": "2246980"
  },
  {
    "text": "this dot constructor passing in this what on earth of these people thinking the plain and simple fact is that nobody",
    "start": "2246980",
    "end": "2254150"
  },
  {
    "text": "has any idea what they're doing with of this keyword I hear it all over the world all the time people suggest that",
    "start": "2254150",
    "end": "2260000"
  },
  {
    "text": "you know that this keyword is doing something almost every post on Stack Overflow it's all suggesting just it's",
    "start": "2260000",
    "end": "2265160"
  },
  {
    "text": "total crap it's totally not how it actually works so I actually want to talk to you very quickly about four simple rules of how it actually does",
    "start": "2265160",
    "end": "2271700"
  },
  {
    "text": "work it's not nearly as confusing as you think there are four rules and I'll very quickly go through them the first rule",
    "start": "2271700",
    "end": "2277190"
  },
  {
    "text": "is if you put a new keyword in front of a function call like I'm doing here on line 13 you'll see that new something I",
    "start": "2277190",
    "end": "2283370"
  },
  {
    "text": "put the new keyword in front of a function call the new keyword is going to create a new this binding and use that this binding",
    "start": "2283370",
    "end": "2288900"
  },
  {
    "text": "for the function call don't be confused that the new keyword has anything at all to do with instantiate in classes or any",
    "start": "2288900",
    "end": "2295019"
  },
  {
    "text": "of that nonsense there is no such thing as classes in JavaScript I don't care what you've been told or what you've read it's all nonsense",
    "start": "2295019",
    "end": "2301859"
  },
  {
    "text": "there aren't classes and these aren't constructors this is putting the new keyword in front of a function to create",
    "start": "2301859",
    "end": "2307079"
  },
  {
    "text": "an object and bind it to the this keyword so that's the first rule check if the call site go look for the",
    "start": "2307079",
    "end": "2313019"
  },
  {
    "text": "function we wanted to understand inside of the something function here what is this this keyword gonna point to the first thing is does it have a new",
    "start": "2313019",
    "end": "2319829"
  },
  {
    "text": "keyword in front of it that's your first rule okay let's look at the next rule I'll look up this to jeaious and in the",
    "start": "2319829",
    "end": "2326789"
  },
  {
    "text": "next rule will see very straightforwardly that the second rule rule number two is if you put a dot call",
    "start": "2326789",
    "end": "2333839"
  },
  {
    "text": "or dot apply at the call site then you're manually saying I want to use obj one as the this binding for that",
    "start": "2333839",
    "end": "2339930"
  },
  {
    "text": "function call so the first rule does it have a new keyword in front of it if not go to the second rule doesn't have a dot",
    "start": "2339930",
    "end": "2346499"
  },
  {
    "text": "caller apply and if so that's gonna be the object to use very straightforward that's just two of our four rules",
    "start": "2346499",
    "end": "2351869"
  },
  {
    "text": "already if you want to write these rules down on a post-it note stick it on your monitor next to the post-it note with",
    "start": "2351869",
    "end": "2357989"
  },
  {
    "text": "your passwords and you'll never be confused again nobody gets that joke it's always too early in the morning it's it you'll never be confused about",
    "start": "2357989",
    "end": "2365519"
  },
  {
    "text": "this keyword ever again okay let's look at the third rule this",
    "start": "2365519",
    "end": "2371130"
  },
  {
    "text": "three jas oops this three jas we pull",
    "start": "2371130",
    "end": "2377999"
  },
  {
    "text": "this up and it says okay here's my function something it's still got the same this rule three does the call site",
    "start": "2377999",
    "end": "2384119"
  },
  {
    "text": "have an implicit context object out the call site you've probably seen that that's probably one of the most common",
    "start": "2384119",
    "end": "2389759"
  },
  {
    "text": "ways that people invoke methods as they're called in JavaScript functions that exist on as references on objects",
    "start": "2389759",
    "end": "2395519"
  },
  {
    "text": "obj one dot something says if none of the other two rules have applied which they don't here then the third rule says",
    "start": "2395519",
    "end": "2401519"
  },
  {
    "text": "use the implicit context object at the call site in other words use obj one as of this binding and in fact that is",
    "start": "2401519",
    "end": "2408119"
  },
  {
    "text": "perhaps even though it's the third of the rules aren't perhaps the most commonly used rule in our programs whether you realize that or not the",
    "start": "2408119",
    "end": "2414269"
  },
  {
    "text": "implicit binding rule is used all over the place so that's three of the four rules and that's pretty simple",
    "start": "2414269",
    "end": "2419400"
  },
  {
    "text": "and finally the fourth and final rule to look at if none of those other rules apply this for Jas",
    "start": "2419400",
    "end": "2426870"
  },
  {
    "text": "is the default binding rule we have a plain old normal undecorated simple",
    "start": "2426870",
    "end": "2432480"
  },
  {
    "text": "naked function call there's nothing to it just a regular function call none of the other rules apply the three rules that",
    "start": "2432480",
    "end": "2438450"
  },
  {
    "text": "you asked in that order do not apply so the fourth and final rule says in non strict mode that this keyword is going",
    "start": "2438450",
    "end": "2444420"
  },
  {
    "text": "to point at the window object the global object and in strict mode it's going to be undefined by the way you should",
    "start": "2444420",
    "end": "2450690"
  },
  {
    "text": "always be using strict mode if you're not you're way late to the game start using strict mode period end of story all code should be strict so in this",
    "start": "2450690",
    "end": "2458010"
  },
  {
    "text": "case if you had strict mode turned on you would get early errors because you'd be trying to access a property off of",
    "start": "2458010",
    "end": "2464490"
  },
  {
    "text": "something instead of getting it accidentally off the global object you beginning the this off of an undefined",
    "start": "2464490",
    "end": "2469560"
  },
  {
    "text": "which would be throwing you errors so you definitely want to avoid non strict",
    "start": "2469560",
    "end": "2474720"
  },
  {
    "text": "mode and the default rule that the whole thing where can be the global object is a terrible idea four simple rules does",
    "start": "2474720",
    "end": "2482250"
  },
  {
    "text": "the new keyword appear in front of it does call a reply appear in front of it there's an obj one appear at the call",
    "start": "2482250",
    "end": "2488070"
  },
  {
    "text": "site you know and a context object appear at the call site and finally the default rule strict mode undefined non",
    "start": "2488070",
    "end": "2494160"
  },
  {
    "text": "strict mode global object that's it there's literally no other complexity I've taken all the complexities back and",
    "start": "2494160",
    "end": "2500100"
  },
  {
    "text": "boiled it down to that simple four rules you too can also be a master of the this keyword one last statement that I'll",
    "start": "2500100",
    "end": "2505770"
  },
  {
    "text": "make on the this keyword and then we'll move on to our last topic is that JavaScript es6 is adding a new mechanism",
    "start": "2505770",
    "end": "2512700"
  },
  {
    "text": "called the arrow function and this arrow function is totally being misrepresented by most of the people that are talking",
    "start": "2512700",
    "end": "2518850"
  },
  {
    "text": "about it because they're saying well it's all about not having to write the function keyword it's actually about being able to use this mechanism called",
    "start": "2518850",
    "end": "2525840"
  },
  {
    "text": "lexical this and I'm not sure whether that's a good idea but I love this idea I love this tweet from Angus Crawley's",
    "start": "2525840",
    "end": "2531420"
  },
  {
    "text": "brilliant guy and he said there's actually a lot of beauty to the dynamic binding of this and people never",
    "start": "2531420",
    "end": "2537600"
  },
  {
    "text": "understood it so they created a whole new mechanism so that they didn't have to understand it which is kind of ridiculous how many of you have ever",
    "start": "2537600",
    "end": "2543750"
  },
  {
    "text": "done VAR self equals this in your code anybody anytime I see somebody doing VAR self equals this it's almost certainly a",
    "start": "2543750",
    "end": "2550550"
  },
  {
    "text": "a statement that that person doesn't understand this mechanism actually works because",
    "start": "2550550",
    "end": "2557070"
  },
  {
    "text": "that's mixing the two it's taking the this mechanism which you have to go to extra work to use and doing it the wrong way and falling back and when you can't",
    "start": "2557070",
    "end": "2563880"
  },
  {
    "text": "figure it out then you fall back to lexical rules which we're all more naturally inclined to you shouldn't be mixing that you should never do VAR self",
    "start": "2563880",
    "end": "2570420"
  },
  {
    "text": "equals this that's ridiculous coding and the same thing is true of the arrow function if you need lexical this binding you're doing it wrong you don't",
    "start": "2570420",
    "end": "2577260"
  },
  {
    "text": "need the arrow function for that you don't need VAR self equals this pick one of the two styles for any given unit of",
    "start": "2577260",
    "end": "2582840"
  },
  {
    "text": "code for each logical you know pick one or the other when you mix the two you get frankenstein code and it's just ridiculous so our last final topic that",
    "start": "2582840",
    "end": "2590700"
  },
  {
    "text": "we'll jump into is object oriented everybody loves object oriented I love",
    "start": "2590700",
    "end": "2596730"
  },
  {
    "text": "this t-shirt I wish I'd gotten a chance to buy it while it was still available because in fact as I said earlier Java Script is classless there is no such",
    "start": "2596730",
    "end": "2603180"
  },
  {
    "text": "thing as classes in JavaScript you've been taught that there is you've seen people create libraries to try to fake",
    "start": "2603180",
    "end": "2608400"
  },
  {
    "text": "it I'm gonna very quickly derive for you why I think that's total nonsense there isn't any such thing as classes and even",
    "start": "2608400",
    "end": "2614070"
  },
  {
    "text": "when they are adding a close even though they're adding a class keyword you're still not gonna be classes in JavaScript so the first thing is that all this",
    "start": "2614070",
    "end": "2621990"
  },
  {
    "text": "confusing terminology class and inheritance and instructor and instance and all that that's all junk that comes",
    "start": "2621990",
    "end": "2627869"
  },
  {
    "text": "to us from other object-oriented languages class oriented languages none of that stuff exists in JavaScript it's",
    "start": "2627869",
    "end": "2633270"
  },
  {
    "text": "nonsensical it's misdirection we've wanted to do that because we didn't ever think about looking at the way the",
    "start": "2633270",
    "end": "2639300"
  },
  {
    "text": "mechanism really works my favorite worst part of this is when people put the word prototypal in front",
    "start": "2639300",
    "end": "2645359"
  },
  {
    "text": "of the word inheritance which is ridiculous javascript does have a mechanism called prototype but it's",
    "start": "2645359",
    "end": "2651240"
  },
  {
    "text": "absolutely nothing to do with classes so let's look at this whole idea lint man",
    "start": "2651240",
    "end": "2656760"
  },
  {
    "text": "prototype well let's look at this old idea of putting the word prototype in front of inheritance I don't have a lot",
    "start": "2656760",
    "end": "2662880"
  },
  {
    "text": "of time to get into this but the word inheritance implies copy mechanisms both genetically speaking you copy your DNA",
    "start": "2662880",
    "end": "2669800"
  },
  {
    "text": "metaphorically the blueprint in the house that's being built on all those ways inheritance is about copying of",
    "start": "2669800",
    "end": "2676109"
  },
  {
    "text": "behaviors and JavaScript by default doesn't do any copying so it's not appropriate to use the word inheritance",
    "start": "2676109",
    "end": "2681570"
  },
  {
    "text": "to describe JavaScript's mechanism but people like to put the word prototypal in front of it and say no no this is our",
    "start": "2681570",
    "end": "2686790"
  },
  {
    "text": "special form of it of inheritance in JavaScript we just call it prototypal inheritance as if that's somehow supposed to make it not",
    "start": "2686790",
    "end": "2693660"
  },
  {
    "text": "confusing which actually just makes it worse I like inputting prototypal in front of",
    "start": "2693660",
    "end": "2698789"
  },
  {
    "text": "the inheritance and pretending that it reverses to like me holding an apple in one hand and an orange in the other and",
    "start": "2698789",
    "end": "2703920"
  },
  {
    "text": "then suggesting to you no no that's not an apple it's just a red orange it's absolutely ludicrous you'd look at me",
    "start": "2703920",
    "end": "2709739"
  },
  {
    "text": "like I was crazy it doesn't matter what word I put in front of it it doesn't change the intrinsic nature that that",
    "start": "2709739",
    "end": "2714989"
  },
  {
    "text": "thing is an apple so you can't put prototypal in front of it and then get to pretend that that doesn't mislead",
    "start": "2714989",
    "end": "2720150"
  },
  {
    "text": "people into thinking something that's not actually true so what's really wrong is it's a it's a we've been from the",
    "start": "2720150",
    "end": "2725549"
  },
  {
    "text": "very beginning we've been using the wrong terms for these things so I want to set up a comparison between the more",
    "start": "2725549",
    "end": "2731219"
  },
  {
    "text": "common term that everybody knows Oh Oh object-oriented really object-oriented means class oriented oo versus another",
    "start": "2731219",
    "end": "2737279"
  },
  {
    "text": "term that I've come up with called Oulu objects linked to other objects in fact this is really a comparison between",
    "start": "2737279",
    "end": "2742529"
  },
  {
    "text": "class oriented and between what I think JavaScript should have been called all along which is behavior delegation okay",
    "start": "2742529",
    "end": "2749130"
  },
  {
    "text": "and I want to show you a couple of pieces of code to illustrate this difference or what I call Oulu style coding so we start out with the",
    "start": "2749130",
    "end": "2756269"
  },
  {
    "text": "traditional way that people do things that they call classes in JavaScript diagrammatically classes in traditional",
    "start": "2756269",
    "end": "2763559"
  },
  {
    "text": "class oriented languages start with these copies the arrows go from left to right and from top to bottom because the",
    "start": "2763559",
    "end": "2768660"
  },
  {
    "text": "properties are copied into instances and a child end into child classes so we see in JavaScript that when people try to do",
    "start": "2768660",
    "end": "2775019"
  },
  {
    "text": "that it doesn't work that although the same way which is why everybody uses these crazy frameworks on top of it so",
    "start": "2775019",
    "end": "2780900"
  },
  {
    "text": "let's look at class J s this is how",
    "start": "2780900",
    "end": "2786539"
  },
  {
    "text": "people do or how it suggests it sort of natively to do class oriented coding in JavaScript all this nonsense with",
    "start": "2786539",
    "end": "2793019"
  },
  {
    "text": "function constructors and dot prototype and the new keyword and all this other junk this is just crazy confusing code",
    "start": "2793019",
    "end": "2799349"
  },
  {
    "text": "there's an untold amount of gotchas that are here which is why nobody actually writes code like this because it's so",
    "start": "2799349",
    "end": "2805589"
  },
  {
    "text": "difficult to do class oriented coding in JavaScript we're swimming so far against the stream everybody's just these crazy",
    "start": "2805589",
    "end": "2811079"
  },
  {
    "text": "big complex libraries to do class or into coding for them which is I think ridiculous if you can't use a mechanism",
    "start": "2811079",
    "end": "2818099"
  },
  {
    "text": "the way it was designed to be used then you're doing it wrong you don't need another library you just",
    "start": "2818099",
    "end": "2823109"
  },
  {
    "text": "need to figure out how to use the mechanism better so this whole prototype thing in this new keywording thing this is all nonsense I don't think we should",
    "start": "2823109",
    "end": "2829109"
  },
  {
    "text": "be doing it and you'll notice here the linter just has all kinds of warnings I'm not even gonna belabor the point there's all kinds of warnings about",
    "start": "2829109",
    "end": "2834480"
  },
  {
    "text": "being careful about these things and just arbitrary dot prototype references that are writable and that can create",
    "start": "2834480",
    "end": "2839489"
  },
  {
    "text": "confusion here's the real problem there's too much complexity to the",
    "start": "2839489",
    "end": "2845099"
  },
  {
    "text": "mental model to be able to actually juggle all those problems here's one diagram that I'll give you let me give",
    "start": "2845099",
    "end": "2851099"
  },
  {
    "text": "you a simple version of it here's one diagram it's a little hard to read here but these squares are objects and the circles are functions and you notice",
    "start": "2851099",
    "end": "2857369"
  },
  {
    "text": "these relationships these are the prototype linkages this is the diagram that exists from that previous code and",
    "start": "2857369",
    "end": "2863069"
  },
  {
    "text": "actually this is the real diagram with all the extra stuff involved and there's two takeaways both an optimistic and a",
    "start": "2863069",
    "end": "2869069"
  },
  {
    "text": "pessimistic takeaway optimistically the takeaway here is that there's a lot of internal consistency in JavaScript but",
    "start": "2869069",
    "end": "2875940"
  },
  {
    "text": "pessimistically this stuff is just too damn difficult nobody can keep this stuff in their head I've been doing it a long time and I can't keep it in my head",
    "start": "2875940",
    "end": "2882029"
  },
  {
    "text": "so we just that's the problem is that it's just not possible but if we embrace instead how JavaScript actually works if",
    "start": "2882029",
    "end": "2888720"
  },
  {
    "text": "we look at it is delegation using that terminology you notice the arrows now go from right to left and bottom to top",
    "start": "2888720",
    "end": "2894630"
  },
  {
    "text": "because in this particular scenario now the relationship is how it actually works in JavaScript these are live",
    "start": "2894630",
    "end": "2901140"
  },
  {
    "text": "linkages on the prototype chain rather than copies of properties down the chain and that's what javascript actually does",
    "start": "2901140",
    "end": "2906960"
  },
  {
    "text": "so I'm gonna give you very quickly to finish things up I'm going to give you what I call Oulu style coding does",
    "start": "2906960",
    "end": "2912869"
  },
  {
    "text": "exactly the same thing as the previous confusing snippet of code but now it uses and embraces this idea oops didn't",
    "start": "2912869",
    "end": "2920069"
  },
  {
    "text": "open up my file it embraces and this idea of Oulu so you notice I still have capital F foo and capital B bar but",
    "start": "2920069",
    "end": "2926730"
  },
  {
    "text": "they're not functions anymore they're just objects and now I'm putting properties directly on the objects you'll notice this code snippet is",
    "start": "2926730",
    "end": "2932999"
  },
  {
    "text": "completely devoid of any dot prototype references or constructors there's no neat new keyword there's none of that",
    "start": "2932999",
    "end": "2939329"
  },
  {
    "text": "confusing crap the only thing that actually the magic that makes it happen is this object create utility which is added natively",
    "start": "2939329",
    "end": "2946259"
  },
  {
    "text": "in language it's a very simple polyfill for an object create just simply creates objects and links them and doesn't go",
    "start": "2946259",
    "end": "2952650"
  },
  {
    "text": "through all the fanfare of trying to pretend to be class oriented to do I've got a lot of writing about this",
    "start": "2952650",
    "end": "2958290"
  },
  {
    "text": "it's too quick for you to understand all of the code but it's actually very straightforward in the second of these books this this this and object",
    "start": "2958290",
    "end": "2964170"
  },
  {
    "text": "prototypes it goes through all of this topic and explains exactly how only works and why it creates simpler code",
    "start": "2964170",
    "end": "2969810"
  },
  {
    "text": "and in fact not only simpler code but here's the big payoff it creates simpler mental models as well",
    "start": "2969810",
    "end": "2978290"
  },
  {
    "text": "here's the new model it's just objects linked to other objects we don't need any of that other confusing crap so I",
    "start": "2986410",
    "end": "2995550"
  },
  {
    "text": "apologize if I've offended anyone because there are a whole bunch of opinions here and you know opinions are",
    "start": "2995550",
    "end": "3002880"
  },
  {
    "text": "just to be taken these are just opinions and you can ignore the linter if you want so hopefully there's no heart",
    "start": "3002880",
    "end": "3007950"
  },
  {
    "text": "feelings we are on a break here so I will not take questions in our session but if you want to come up and ask questions of me",
    "start": "3007950",
    "end": "3015510"
  },
  {
    "text": "you know during our break that's great but I just want to remind you that you can reach out and give feedback on",
    "start": "3015510",
    "end": "3021180"
  },
  {
    "text": "Twitter also please definitely make sure to vote on the app so that we get good feedback and reach out to me in all the",
    "start": "3021180",
    "end": "3027570"
  },
  {
    "text": "various ways and tell me if I'm wrong or something don't forget first three people that want to grab a copy of the books free and there's free stickers and",
    "start": "3027570",
    "end": "3033480"
  },
  {
    "text": "have a great rest of the conference day thank you",
    "start": "3033480",
    "end": "3037760"
  }
]