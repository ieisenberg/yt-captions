[
  {
    "text": "all right thank you uh can everybody hear me",
    "start": "5160",
    "end": "11280"
  },
  {
    "text": "well so",
    "start": "11480",
    "end": "14879"
  },
  {
    "text": "uh a standard Oracle disclaimer slide saying that whatever I say here please",
    "start": "19720",
    "end": "26439"
  },
  {
    "text": "don't trust me if you ever make a product coing decision so this is my wild card card saying I",
    "start": "26439",
    "end": "32480"
  },
  {
    "text": "can lie whatever I want really convenient so um talking about Nason I",
    "start": "32480",
    "end": "39960"
  },
  {
    "text": "think by now most people know what Nason is it's an basically an EOS to 51 runtime that's built on top of the JDM",
    "start": "39960",
    "end": "47399"
  },
  {
    "text": "but there's a lot of great things about it uh among those is that it's um it's",
    "start": "47399",
    "end": "52879"
  },
  {
    "text": "completely open source right now so all of the development is done in the open jdk so all of the codes out there the",
    "start": "52879",
    "end": "60079"
  },
  {
    "text": "open jdk repo it does ship a standard part of oracles Java standard edition",
    "start": "60079",
    "end": "65880"
  },
  {
    "text": "starting with the version 8 uh and it is accessible through standard Java excript",
    "start": "65880",
    "end": "72280"
  },
  {
    "text": "apis it doesn't really you don't really have to learn an API to use it uh the the script apis that are in Java since",
    "start": "72280",
    "end": "79840"
  },
  {
    "text": "Java 6 um are used to to access it it doesn't have its own package uh if you",
    "start": "79840",
    "end": "85720"
  },
  {
    "text": "want to tailor uh some aspects of the usage you can use that we will actually do that in in in my today's",
    "start": "85720",
    "end": "92720"
  },
  {
    "text": "presentation uh you can run it from a command line there is a JJs command which is a pred deating there is a lot",
    "start": "92720",
    "end": "99200"
  },
  {
    "text": "of Utilities in Java that start with J so you have JPS which is the PS for all",
    "start": "99200",
    "end": "104759"
  },
  {
    "text": "the Java processes and then obviously the JavaScript launcher that uses Java",
    "start": "104759",
    "end": "111040"
  },
  {
    "text": "is therefore named JJs another interesting tidbit that will",
    "start": "111040",
    "end": "116880"
  },
  {
    "text": "also be emphasized during this talk is that Mas doesn't don't have an interpreter it is complet code is always",
    "start": "116880",
    "end": "124960"
  },
  {
    "text": "compiled to bite code so what we end up running is always Java classes that are dynamically compiled and loaded into the",
    "start": "124960",
    "end": "130959"
  },
  {
    "text": "JDM as the as the code executes why would we even want to uh",
    "start": "130959",
    "end": "138080"
  },
  {
    "text": "create nasorn well it is we wanted something that has full",
    "start": "138080",
    "end": "143760"
  },
  {
    "text": "equiscript five compliance so mod modern JavaScript uh with modern code base we",
    "start": "143760",
    "end": "148840"
  },
  {
    "text": "had Rhino before but it it was showing its age and one thing that it's not",
    "start": "148840",
    "end": "153879"
  },
  {
    "text": "really quite often brought up is that it's also security-minded we used to integrate Rhino before and Rhino was",
    "start": "153879",
    "end": "161080"
  },
  {
    "text": "created before the Java 2 security model actually came in place and uh with nas",
    "start": "161080",
    "end": "169959"
  },
  {
    "text": "for since we ship it as integrated part of the jdk it has to be secure it has to the the the internal architecture has to",
    "start": "169959",
    "end": "176440"
  },
  {
    "text": "pay a lot of attention to to to actually um to well all the all the incases of",
    "start": "176440",
    "end": "182159"
  },
  {
    "text": "the Java security model we also use it as a Proving Ground for book Dynamic and",
    "start": "182159",
    "end": "187680"
  },
  {
    "text": "we are also using it to flesh out the requirements for General General Dynamic",
    "start": "187680",
    "end": "192720"
  },
  {
    "text": "languages uh support on the Java platform which is which is pretty much my long-term goal with all of",
    "start": "192720",
    "end": "199480"
  },
  {
    "text": "this we do a lot of uh performance work uh JavaScript is a wonderful target",
    "start": "199480",
    "end": "206480"
  },
  {
    "text": "language if you enjoy doing compiler optimizations as I do because uh it is super easy to write a very slow language",
    "start": "206480",
    "end": "213200"
  },
  {
    "text": "run time and just do an as interpreter and box everything as objects and hey it",
    "start": "213200",
    "end": "218599"
  },
  {
    "text": "runs it does look slow but it runs um you can spend a lifetime writing optimizations in your runtime and the",
    "start": "218599",
    "end": "225760"
  },
  {
    "text": "more Dynamic the language is the less is explicitly given statically uh the more",
    "start": "225760",
    "end": "234360"
  },
  {
    "text": "work your optimizing compiler has to do to actually uh provide you with acceptable performance so you know I'm I",
    "start": "234360",
    "end": "243000"
  },
  {
    "text": "think I had the job security pinned down pretty well with this however not all optimizations apply equally well so I",
    "start": "243000",
    "end": "249879"
  },
  {
    "text": "actually want to show you some good practices for integrating Nason that will make you um make sure that when you",
    "start": "249879",
    "end": "256479"
  },
  {
    "text": "use it it is actually fast now when when I accepted to give this talk uh this is",
    "start": "256479",
    "end": "263320"
  },
  {
    "text": "the first time I'm giving this St and um um I realized that by",
    "start": "263320",
    "end": "270000"
  },
  {
    "text": "by giving that talk about how do you need to use Nason in order to make things faster I sort of paintting myself",
    "start": "270000",
    "end": "276759"
  },
  {
    "text": "in a corner really so I set up myself a trap because I mean I develop this runtime so why don't I just make it so",
    "start": "276759",
    "end": "285520"
  },
  {
    "text": "that it's fast without any intervention on your part right so basically by saying that hey I don't well not I I'm",
    "start": "285520",
    "end": "294120"
  },
  {
    "text": "part of a team but we drove this one time and here's what you do need to do",
    "start": "294120",
    "end": "299280"
  },
  {
    "text": "in order to for it to perform really well I might as well admit incompetence saying I have no idea what the hell I'm",
    "start": "299280",
    "end": "305199"
  },
  {
    "text": "doing because why don't I just make it so that you don't me to do anything",
    "start": "305199",
    "end": "310360"
  },
  {
    "text": "so as as a somewhat experienced speaker I realized that there was really one way",
    "start": "310360",
    "end": "317440"
  },
  {
    "text": "to uh go about it which is uh emphasize everything with it well and of course",
    "start": "317440",
    "end": "324840"
  },
  {
    "text": "shift the blame for everything that isn't so I will be trying to do that in",
    "start": "324840",
    "end": "330080"
  },
  {
    "text": "the next two slides so if it works well we did it if it doesn't work well it's",
    "start": "330080",
    "end": "335160"
  },
  {
    "text": "your fault um I will show you the nice things",
    "start": "335160",
    "end": "340680"
  },
  {
    "text": "first so NASA's internals are pretty smart by now we did actually a lot",
    "start": "340680",
    "end": "346199"
  },
  {
    "text": "of of uh fairly crazy stuff with a small team in a relatively small amount of",
    "start": "346199",
    "end": "352600"
  },
  {
    "text": "time and Java 18 came out none of this actually",
    "start": "352600",
    "end": "358280"
  },
  {
    "text": "shipped uh most of this these three things that you see here actually shed with jav 18 update 40 um we do",
    "start": "358280",
    "end": "367240"
  },
  {
    "text": "specialized compilation of functions so if you invoke a function with int parameters we will compile a special",
    "start": "367240",
    "end": "373960"
  },
  {
    "text": "version of that function that takes advantage of the fact that the parameters pass in were ins or doubles",
    "start": "373960",
    "end": "379880"
  },
  {
    "text": "but not generic objects once we start generating code we",
    "start": "379880",
    "end": "385400"
  },
  {
    "text": "actually do static type inference on local variables so so that as far as",
    "start": "385400",
    "end": "390919"
  },
  {
    "text": "possible we will try to keep everything Nar narrow and primitive and for those",
    "start": "390919",
    "end": "395960"
  },
  {
    "text": "things that we cannot figure out how to uh we cannot prove statically uh at compiled time that uh this particular",
    "start": "395960",
    "end": "403360"
  },
  {
    "text": "variable is an INT and in JavaScript it's really easy to get at to a point where you can prove anything about a",
    "start": "403360",
    "end": "410199"
  },
  {
    "text": "expression a think such easy as well easy simple as retrieving a property",
    "start": "410199",
    "end": "416560"
  },
  {
    "text": "from an object retrieving an element from an array invoking a function what will the return type of all of these be",
    "start": "416560",
    "end": "422800"
  },
  {
    "text": "you have no idea generally have no idea so what we did is that we also built a framework where you can we do optimistic",
    "start": "422800",
    "end": "430680"
  },
  {
    "text": "assumptions about these types an OP what's an optimistic assumption basically the optimistic assumption is",
    "start": "430680",
    "end": "436520"
  },
  {
    "text": "hey let's presume it will be a 32bit signed integer why not because Jen",
    "start": "436520",
    "end": "442440"
  },
  {
    "text": "handles those well and when those are invalidated we need to do something we'll see what the something is but",
    "start": "442440",
    "end": "449759"
  },
  {
    "text": "where the nas can blame you where I need to shift the blame to somewhere else is how do you integrate it into a javab",
    "start": "449759",
    "end": "455680"
  },
  {
    "text": "base system and whether you are structuring your code in a ways that are",
    "start": "455680",
    "end": "461280"
  },
  {
    "text": "too hard for the runtime to actually reason about",
    "start": "461280",
    "end": "467319"
  },
  {
    "text": "so I want to show you how the parameter type specialized compulation Works what we have here is that if you define one",
    "start": "467319",
    "end": "474080"
  },
  {
    "text": "single function which squares whatever is passed into it and then you invoke it",
    "start": "474080",
    "end": "479120"
  },
  {
    "text": "twice once with an INT and once with something that's not an INT it will actually generate two versions of the",
    "start": "479120",
    "end": "485800"
  },
  {
    "text": "code first version of the code will take an INT and hope that it can return an",
    "start": "485800",
    "end": "491319"
  },
  {
    "text": "INT and as you can see it's a very simple JM code it LS the two arguments",
    "start": "491319",
    "end": "497560"
  },
  {
    "text": "invokes a multiplication function it doesn't doesn't do imal which is just a",
    "start": "497560",
    "end": "502599"
  },
  {
    "text": "built-in B code and there's a reason for that and the reason it needs to handle overflow because numbers in Javas don't",
    "start": "502599",
    "end": "509840"
  },
  {
    "text": "overflow because JavaScript inherent specification level it only knows about",
    "start": "509840",
    "end": "514880"
  },
  {
    "text": "64bit floating Point numbers so we cannot just overflow a multiplication we",
    "start": "514880",
    "end": "520479"
  },
  {
    "text": "must smartly then expand the type into double and if you later on invite it",
    "start": "520479",
    "end": "526000"
  },
  {
    "text": "with invoke it with a with a double parameter it will generate another another version of the function",
    "start": "526000",
    "end": "534560"
  },
  {
    "text": "and let me show you this",
    "start": "535040",
    "end": "539720"
  },
  {
    "text": "still get used to so",
    "start": "545839",
    "end": "550200"
  },
  {
    "text": "um Square function here it is same code AS on the slide and if we now run this",
    "start": "551480",
    "end": "559160"
  },
  {
    "text": "code with Dash print",
    "start": "559160",
    "end": "563800"
  },
  {
    "text": "code a lot of things happen and I will just start to try to find",
    "start": "565920",
    "end": "572560"
  },
  {
    "text": "B so first time it's invoked as you can see we will generate a version that",
    "start": "572560",
    "end": "578360"
  },
  {
    "text": "takes an INT returns an INT and it does what I said loads the arguments does the impli does the multiplication returns",
    "start": "578360",
    "end": "586399"
  },
  {
    "text": "and somewhere later on here you can actually see the output it did print the",
    "start": "586399",
    "end": "592000"
  },
  {
    "text": "print the result saying 500 s",
    "start": "592000",
    "end": "597600"
  },
  {
    "text": "2,000 afterwards it will generate the second version of the code as you can see all code is",
    "start": "597600",
    "end": "604120"
  },
  {
    "text": "lazily generated Nas is so lazy in code generation that it does not even compile",
    "start": "604120",
    "end": "611120"
  },
  {
    "text": "the top level program until you actually invoke it so when you compile a script we will do some parsing we will do some",
    "start": "611120",
    "end": "617800"
  },
  {
    "text": "preparations we will store some metadata that's needed for efficient code generation later on but we W even",
    "start": "617800",
    "end": "623120"
  },
  {
    "text": "generate the program because then it would be a special case and we didn't want to do a special case so if a",
    "start": "623120",
    "end": "629000"
  },
  {
    "text": "particular variant of function is not yet generated we will only generate it as part of invocation so it's the it's",
    "start": "629000",
    "end": "635440"
  },
  {
    "text": "when you invoke the function if it's not linked yet then if the code is not ready",
    "start": "635440",
    "end": "641639"
  },
  {
    "text": "then the compiler kicks in compiles the function links it and goes on so as you",
    "start": "641639",
    "end": "646720"
  },
  {
    "text": "can see the double version of the function is only generated after we printed the result of the invoking the",
    "start": "646720",
    "end": "651760"
  },
  {
    "text": "in version of the function and at the end of it because there's a lot of other things going on",
    "start": "651760",
    "end": "658240"
  },
  {
    "text": "you have the the actual for that one so if you if you just run the same code",
    "start": "658240",
    "end": "663720"
  },
  {
    "text": "without without print code then obviously you just get the get the",
    "start": "663720",
    "end": "668920"
  },
  {
    "text": "expected Al without any without any code generation Frills so that's parameter type specializ compulation helps a lot",
    "start": "668920",
    "end": "676800"
  },
  {
    "text": "sta type inference so I will I will be using the uh octane crypto Benchmark uh",
    "start": "676800",
    "end": "683120"
  },
  {
    "text": "later on to demonstrate things and um here's a little hot function from uh",
    "start": "683120",
    "end": "691040"
  },
  {
    "text": "from the crypto Benchmark this this one is uh the core of the Benchmark it's doing a lot of uh calculations so you",
    "start": "691040",
    "end": "697959"
  },
  {
    "text": "can see there's a lot of uh inter arithmetic uh bitwise ends shifts uh",
    "start": "697959",
    "end": "704360"
  },
  {
    "text": "retrieval from arrays multiplications uh additions etc etc so a lot of everything",
    "start": "704360",
    "end": "710320"
  },
  {
    "text": "going WR so last one if you do not use optimistic typing this kind of typing",
    "start": "710320",
    "end": "717200"
  },
  {
    "text": "way you presume everything is an n um optim is actually not on by default we",
    "start": "717200",
    "end": "723800"
  },
  {
    "text": "we have it shipped with Java 840 but it's off by default then you will get to",
    "start": "723800",
    "end": "728880"
  },
  {
    "text": "type something like this but it's certainly not so bad if you um do I have a laser pointer",
    "start": "728880",
    "end": "736160"
  },
  {
    "text": "here excellent so too much",
    "start": "738880",
    "end": "744720"
  },
  {
    "text": "caffeine even wor so as you can see these will be ins and this these will be inss but that pretty much the story",
    "start": "744720",
    "end": "752240"
  },
  {
    "text": "stops here the parameters are weird because some of those are objects even though they don't necessarily have to be",
    "start": "752240",
    "end": "758120"
  },
  {
    "text": "and some of those are doubles it again depends on what could we infer at the caller site and then generate a",
    "start": "758120",
    "end": "765320"
  },
  {
    "text": "particular signature um but as you can see problem spots uh decrement operator ends are",
    "start": "765320",
    "end": "773480"
  },
  {
    "text": "promoting it's its operate to double and here since we have multiplications they",
    "start": "773480",
    "end": "778839"
  },
  {
    "text": "might flow the in they would be doubles and oh my God this guy here H it became",
    "start": "778839",
    "end": "783959"
  },
  {
    "text": "an object why well because in a non-optimistic world there's an array",
    "start": "783959",
    "end": "790959"
  },
  {
    "text": "read here and you can't know what will you get back from that array so what if it's a string and if it's a string then",
    "start": "790959",
    "end": "798000"
  },
  {
    "text": "JavaScript being wonderful language that it is this plus operators must uh act as",
    "start": "798000",
    "end": "804920"
  },
  {
    "text": "concatenation operators right so it has to presume but this poor L even though",
    "start": "804920",
    "end": "810800"
  },
  {
    "text": "we actually know this will be an INT it it conservatively has to assume an object and C becomes a double because of",
    "start": "810800",
    "end": "817360"
  },
  {
    "text": "the this multiplication here and then since the C is return then the return type of the function itself is a double",
    "start": "817360",
    "end": "824279"
  },
  {
    "text": "so not so bad but you know nothing to write home about either with optimistic",
    "start": "824279",
    "end": "829760"
  },
  {
    "text": "typing if you turn on optimistic typing then as you can see we will already the Coler sites will make a lot of",
    "start": "829760",
    "end": "836160"
  },
  {
    "text": "assumptions that uh that the parameters are and all the trouble spots are gone",
    "start": "836160",
    "end": "842800"
  },
  {
    "text": "because we will presume that decrement never overflows we we could sort of figure it out because if we knew that",
    "start": "842800",
    "end": "849399"
  },
  {
    "text": "but but we can know that we get an an positive number in the first place unfortunately so we will presume this",
    "start": "849399",
    "end": "857000"
  },
  {
    "text": "doesn't overflow we will presume these multiplications don't overflow and the addition doesn't overflow either so this",
    "start": "857000",
    "end": "863519"
  },
  {
    "text": "might stay in and if we also presume that all of these guys are inss then this might remain an in as well um we",
    "start": "863519",
    "end": "871720"
  },
  {
    "text": "will eventually figure out that these two expressions are not ins but that's all so this is great if you when we",
    "start": "871720",
    "end": "879000"
  },
  {
    "text": "compile this we get code that's as efficient as if you just uh wrote that",
    "start": "879000",
    "end": "885720"
  },
  {
    "text": "same code with types in Java again",
    "start": "885720",
    "end": "894440"
  },
  {
    "text": "I can R run one round of it and an awful lot of code gets generated so we'll have",
    "start": "900880",
    "end": "906440"
  },
  {
    "text": "to find the one that we are interested in the am3 one",
    "start": "906440",
    "end": "914000"
  },
  {
    "text": "and I think this is this is the last version probably so as you can see um I",
    "start": "917000",
    "end": "924160"
  },
  {
    "text": "mean I don't really need you to look very deeply into this but as you can see it's all in operations all the way",
    "start": "924160",
    "end": "931000"
  },
  {
    "text": "there's nothing else it's just that at various places when we do invoke Dynamic and trying to",
    "start": "931000",
    "end": "938000"
  },
  {
    "text": "retrieve an element from an array we will just make assumption that it's all an in and if we scroll down all the way",
    "start": "938000",
    "end": "945480"
  },
  {
    "text": "to hopefully finding the local variable table you can see that this is an object",
    "start": "945480",
    "end": "951720"
  },
  {
    "text": "W is an object but is an object it really this and W are objects and everything else is INS which is great",
    "start": "951720",
    "end": "960920"
  },
  {
    "text": "so Synergy that's that that's that's a great word that's been hijacked by by",
    "start": "965800",
    "end": "971920"
  },
  {
    "text": "marketing but it really means that multiple agents are collaborating to achieve",
    "start": "971920",
    "end": "978600"
  },
  {
    "text": "something that's more than some of its parts and in this case we really can do that because look at this this is twice",
    "start": "978600",
    "end": "984759"
  },
  {
    "text": "as a high order function it's a function that takes another function applies it twice to operator to an operator sorry",
    "start": "984759",
    "end": "992399"
  },
  {
    "text": "um so what will the types of this actually be so if we invoke twice with",
    "start": "992399",
    "end": "998880"
  },
  {
    "text": "with we have an increment function with passive five what types we will end up",
    "start": "998880",
    "end": "1005160"
  },
  {
    "text": "with and then we invoke it with 5.1 again what do we end up with so what's nice is that if",
    "start": "1005160",
    "end": "1012759"
  },
  {
    "text": "you just step back for a moment if you do this",
    "start": "1012759",
    "end": "1020839"
  },
  {
    "text": "not this one yeah here it is so what happens if we run this",
    "start": "1028880",
    "end": "1037798"
  },
  {
    "text": "is we will have one version of twice generated which gets an in operant and",
    "start": "1042919",
    "end": "1049799"
  },
  {
    "text": "hopes that it can return an in result and then what it will do is it will it will be loading its uh it will be",
    "start": "1049799",
    "end": "1057000"
  },
  {
    "text": "loading its uh function op and trying to invoke them",
    "start": "1057000",
    "end": "1062120"
  },
  {
    "text": "and hope that they two will be an in and in that case will return in in that case itself it can return an in and then",
    "start": "1062120",
    "end": "1068400"
  },
  {
    "text": "sometime later after we generated this we will immediately generate the first",
    "start": "1068400",
    "end": "1073600"
  },
  {
    "text": "version of the increment function which also takes an INT and returns an in I mean really does statically we can infer",
    "start": "1073600",
    "end": "1079400"
  },
  {
    "text": "that uh we load it we add one to it and we will return an in hoping there will",
    "start": "1079400",
    "end": "1085000"
  },
  {
    "text": "be no overflow and then sometime later when we do we will do a version that takes a",
    "start": "1085000",
    "end": "1093480"
  },
  {
    "text": "double but we will still be hoping it actually will be able to return an in we don't know whether the functions",
    "start": "1093480",
    "end": "1100039"
  },
  {
    "text": "supplied will be returning a double so this guy starts running and first thing",
    "start": "1100039",
    "end": "1106159"
  },
  {
    "text": "it does it vs F so we we will need to F is now again the increment but we need",
    "start": "1106159",
    "end": "1111480"
  },
  {
    "text": "to generate a new version that takes a double and statically we will know that it returns a double because static analysis actually figures this out so",
    "start": "1111480",
    "end": "1118799"
  },
  {
    "text": "we'll have a double double version and now the execution goes back and what",
    "start": "1118799",
    "end": "1124559"
  },
  {
    "text": "happens is that we actually create a new code for double where this first",
    "start": "1124559",
    "end": "1131200"
  },
  {
    "text": "invocation already realized that hey I this first invocation will return a double but maybe the second one will",
    "start": "1131200",
    "end": "1137159"
  },
  {
    "text": "still return an end so I might still be able to overall have an in",
    "start": "1137159",
    "end": "1143039"
  },
  {
    "text": "result and then this will prove to be false as well so we will be generating",
    "start": "1143039",
    "end": "1148919"
  },
  {
    "text": "yet another version of the function this time twice takes a double returns a double it will invoke twice the function",
    "start": "1148919",
    "end": "1155720"
  },
  {
    "text": "and both of these times it now knows that they will return double so its own type will also be a double so what",
    "start": "1155720",
    "end": "1162880"
  },
  {
    "text": "happened here is and I can show you the same thing in a nicer way first you have",
    "start": "1162880",
    "end": "1168760"
  },
  {
    "text": "have the print which kicks off the whole thing it hops that it might be getting back an in and as you can see those are",
    "start": "1168760",
    "end": "1175159"
  },
  {
    "text": "the the types that I show in the little square brackets so we know already that",
    "start": "1175159",
    "end": "1183720"
  },
  {
    "text": "the increment will be uh will be returning double but the function itself it hopes that even if it passes a double",
    "start": "1183720",
    "end": "1189600"
  },
  {
    "text": "into f it may be getting back an in so that's the that's this part and then it",
    "start": "1189600",
    "end": "1195679"
  },
  {
    "text": "hopes that if it passes that int to F again it will get an so it can return them in but then this will actually",
    "start": "1195679",
    "end": "1201520"
  },
  {
    "text": "prove to be false the function returned a double but it still hopes that if it passes it into another implication might",
    "start": "1201520",
    "end": "1207760"
  },
  {
    "text": "still get back in in it doesn't and in that case already these are propagated outwards so there's a lot of cod",
    "start": "1207760",
    "end": "1213640"
  },
  {
    "text": "generation going on on the other hand the in version Still Remains in memory we keep them so",
    "start": "1213640",
    "end": "1220280"
  },
  {
    "text": "type specialization means that uh one function has will have multiple type",
    "start": "1220280",
    "end": "1226039"
  },
  {
    "text": "specialization live Ty special ation based parameters live so if you later on",
    "start": "1226039",
    "end": "1231360"
  },
  {
    "text": "again invoke it with an INT you don't pay the penalty of running the double version because it will actually go to",
    "start": "1231360",
    "end": "1237240"
  },
  {
    "text": "the inter verion that we call the interv verion of the of the increment so basically what happens here is that lazy",
    "start": "1237240",
    "end": "1245799"
  },
  {
    "text": "compilation parameter type specialization uh static type inference and optimistic typing work hand in hand",
    "start": "1245799",
    "end": "1253039"
  },
  {
    "text": "to make sure that you always generate we always generate uh the tightest version of the code that can run with the data",
    "start": "1253039",
    "end": "1260960"
  },
  {
    "text": "that is thrown at it so that you don't widen two doubles or two objects anytime",
    "start": "1260960",
    "end": "1266000"
  },
  {
    "text": "you don't have to so how about be the optimize running code by the way because",
    "start": "1266000",
    "end": "1271520"
  },
  {
    "text": "everything I shown you right so we need to replace the code while it's running so the twice function when it calls ink",
    "start": "1271520",
    "end": "1278360"
  },
  {
    "text": "and gets back a double instead of an INT it just cannot run with a in version anymore so what it has to do this point",
    "start": "1278360",
    "end": "1286000"
  },
  {
    "text": "you do actually have an elaborate system of ception handlers there that make it so that it jumps out into the caller the",
    "start": "1286000",
    "end": "1294080"
  },
  {
    "text": "caller is linked so that it catches the exception derails it to the compiler compiles the new version of the code",
    "start": "1294080",
    "end": "1300600"
  },
  {
    "text": "then it compiles a onetime continuation because we need to resume the computation from that point on and jumps",
    "start": "1300600",
    "end": "1307600"
  },
  {
    "text": "back into the uh the continuation uh what's nice is that we actually managed to do all of this without any jvn level",
    "start": "1307600",
    "end": "1314080"
  },
  {
    "text": "tricks so it's a pure white code solution so if even if you took something that's not an oracle jbm Nas",
    "start": "1314080",
    "end": "1321000"
  },
  {
    "text": "would would be able to work all of its magic all right so P some Integrations",
    "start": "1321000",
    "end": "1327799"
  },
  {
    "text": "now uh let's write a small web application there is a ton of very",
    "start": "1327799",
    "end": "1334559"
  },
  {
    "text": "exciting uh web Frameworks out there these days vertx is using JavaScript and",
    "start": "1334559",
    "end": "1341640"
  },
  {
    "text": "Nason as one of its implementations there are Java ports of njs etc etc they all have have a huge",
    "start": "1341640",
    "end": "1349159"
  },
  {
    "text": "drawback which is that I never actually found the time to learn any of them so I",
    "start": "1349159",
    "end": "1355320"
  },
  {
    "text": "will just use the plain old Ser API shows my age I guess um I just used",
    "start": "1355320",
    "end": "1362240"
  },
  {
    "text": "Jetty as an embedded server so I also I mean you have to you have to forgive me",
    "start": "1362240",
    "end": "1367720"
  },
  {
    "text": "for I'm spending most of my time in the compiler landens so I don't really do web applications a lot so it will be",
    "start": "1367720",
    "end": "1373960"
  },
  {
    "text": "ugly and the example itself is somewhat contrived but bear with me so what I do is I'm taking this Google",
    "start": "1373960",
    "end": "1380679"
  },
  {
    "text": "octane Benchmark uh crypto which is doing an RSA encryption decryption and",
    "start": "1380679",
    "end": "1386520"
  },
  {
    "text": "the logic is entirely written in JavaScript it is a reasonably complex computation it doesn't do any IO um I'm",
    "start": "1386520",
    "end": "1394159"
  },
  {
    "text": "not sh you anything that does IO because JavaScript doesn't have built-in IO libraries and so you would just end up",
    "start": "1394159",
    "end": "1401240"
  },
  {
    "text": "using Java's IO facilities and there is really no JavaScript performance story in that so um it performs just as well",
    "start": "1401240",
    "end": "1409080"
  },
  {
    "text": "as if you involed from jav right so it doesn't do a lot the web",
    "start": "1409080",
    "end": "1414840"
  },
  {
    "text": "application it shows you a text and then U shows you a text field and then it uh",
    "start": "1414840",
    "end": "1422600"
  },
  {
    "text": "encrypts it shows the encrypted version and then for verific verification it shows you the decrypted code uh sorry",
    "start": "1422600",
    "end": "1430240"
  },
  {
    "text": "the decrypted text which should match the original PL text so how would you go about this and why we need to talk about",
    "start": "1430240",
    "end": "1437440"
  },
  {
    "text": "this is that um JavaScript language and a lot of dynamic languages don't give you any",
    "start": "1437440",
    "end": "1445159"
  },
  {
    "text": "kind of uh specification for compile time run time",
    "start": "1445159",
    "end": "1452760"
  },
  {
    "text": "Etc I mean JavaScript execution specification is pretty much here's some",
    "start": "1452760",
    "end": "1459520"
  },
  {
    "text": "source code here's how you run it it doesn't tell you anything about data",
    "start": "1459520",
    "end": "1465840"
  },
  {
    "text": "sharing it doesn't tell it doesn't helpage story it doesn't tell you you need to compile it it doesn't even tell",
    "start": "1465840",
    "end": "1472279"
  },
  {
    "text": "you you need to parse it for I mean sort of does because there are early errors",
    "start": "1472279",
    "end": "1478440"
  },
  {
    "text": "that are syntactic errors that need to be called before you start running but that's pretty much it it doesn't even",
    "start": "1478440",
    "end": "1485279"
  },
  {
    "text": "tell you that you need to parse it it doesn't tell you parse compile run it",
    "start": "1485279",
    "end": "1490320"
  },
  {
    "text": "tells you here's some source code here's how you run it and when you integrate",
    "start": "1490320",
    "end": "1496000"
  },
  {
    "text": "you need to yourself figure out a sweet spot between the source code and running",
    "start": "1496000",
    "end": "1501919"
  },
  {
    "text": "the code that fits your expectations so one thing that you can",
    "start": "1501919",
    "end": "1507799"
  },
  {
    "text": "do is that on every server's request you can just instantiate the brand new script engine and just evaluate the",
    "start": "1507799",
    "end": "1514120"
  },
  {
    "text": "JavaScript code in it because you know it FS the specification that's the most naive approach that you can take just uh",
    "start": "1514120",
    "end": "1520799"
  },
  {
    "text": "I have a server I will show you to a moment so when you go into the evaluate function which is involved on every HTT",
    "start": "1520799",
    "end": "1526640"
  },
  {
    "text": "request you can just ask script engine manager to get you a Mason engine you evaluate the script into it that comes",
    "start": "1526640",
    "end": "1533360"
  },
  {
    "text": "from an internal URL and then you can just uh throw your variables into it and",
    "start": "1533360",
    "end": "1540000"
  },
  {
    "text": "evaluate the encryption and decryption functions and return that you can do it",
    "start": "1540000",
    "end": "1545399"
  },
  {
    "text": "um it will work uh",
    "start": "1545399",
    "end": "1551480"
  },
  {
    "text": "so named all my classes with a number in them so I can just m get confused which",
    "start": "1553760",
    "end": "1559399"
  },
  {
    "text": "one is the next one that needs to be demonstrated so here's the most naive one it's uh doing pretty much well I",
    "start": "1559399",
    "end": "1565799"
  },
  {
    "text": "just show you show show you on the slide um if you R this",
    "start": "1565799",
    "end": "1572039"
  },
  {
    "text": "guy and I have an Apache bench uh command",
    "start": "1573000",
    "end": "1580279"
  },
  {
    "text": "line here that does what it will do on the UI but we can of course try the UI",
    "start": "1580279",
    "end": "1586919"
  },
  {
    "text": "as well so if we do this and hit submit",
    "start": "1586919",
    "end": "1591960"
  },
  {
    "text": "we will wait for a bit oh it's not so bad actually it's like seconds it's horrible",
    "start": "1591960",
    "end": "1597720"
  },
  {
    "text": "but so if you now do a test and we test for you know thousand",
    "start": "1597720",
    "end": "1605200"
  },
  {
    "text": "requests come on it should print 100 any time now maybe",
    "start": "1605200",
    "end": "1611640"
  },
  {
    "text": "not I'm kidding you I I was thinking you know I could really cut down on the",
    "start": "1611640",
    "end": "1617960"
  },
  {
    "text": "slide Ides if I just had my audience stare at the blank screen waiting for some to show up live benchmarking super",
    "start": "1617960",
    "end": "1625720"
  },
  {
    "text": "exciting except if you I mean if you ask snail races then it might be uh no we",
    "start": "1625720",
    "end": "1631679"
  },
  {
    "text": "won't we won't be doing this and it's horrible so for those few requests those",
    "start": "1631679",
    "end": "1637679"
  },
  {
    "text": "27 requests managed to do in this time as you can see the the percentages is",
    "start": "1637679",
    "end": "1642760"
  },
  {
    "text": "horrible so so what's happening here uh as you can see the most approach",
    "start": "1642760",
    "end": "1648399"
  },
  {
    "text": "is not terribly efficient uh how does it performs not really well so these are recorded stats when I Rite it at home",
    "start": "1648399",
    "end": "1655320"
  },
  {
    "text": "and that I W subjective to full run now um what's it's doing is that if you if you try to visualize J visual V and",
    "start": "1655320",
    "end": "1662440"
  },
  {
    "text": "what's happening then I mean this is artificial this is jet is blocking the AQ pole but then you have something like",
    "start": "1662440",
    "end": "1668960"
  },
  {
    "text": "dink call site link internal call site initialize uh code installer run install",
    "start": "1668960",
    "end": "1677600"
  },
  {
    "text": "class create through link so what's happening here classes are being generated bootstrap and Link each and every time",
    "start": "1677600",
    "end": "1685640"
  },
  {
    "text": "you started from scratch because you're creating a new engine you don't have any",
    "start": "1685640",
    "end": "1690919"
  },
  {
    "text": "context it doesn't know that there was a previous engine that already compile this code the code is loaded par",
    "start": "1690919",
    "end": "1696600"
  },
  {
    "text": "compiled linked every single time so you can do",
    "start": "1696600",
    "end": "1702799"
  },
  {
    "text": "this probably won't be happy so what's the solution let's try using a single engine instance so the the significant",
    "start": "1702960",
    "end": "1710200"
  },
  {
    "text": "difference here is that just we just have a static engine instance in server",
    "start": "1710200",
    "end": "1715360"
  },
  {
    "text": "through world you would use a static you would use something that is bound in the Ser context but then want to uh be too",
    "start": "1715360",
    "end": "1722640"
  },
  {
    "text": "pent about it and lose the actual point that I'm trying to demonstrate and then you can just take this engine create new",
    "start": "1722640",
    "end": "1730799"
  },
  {
    "text": "bindings this is interesting thing and then evaluate your script into it uh and",
    "start": "1730799",
    "end": "1738279"
  },
  {
    "text": "then invoke encryption and decryption by retrieving the functions which are first class objects by name pass null let",
    "start": "1738279",
    "end": "1744960"
  },
  {
    "text": "there this pass the actual arguments and then create the result so this guy",
    "start": "1744960",
    "end": "1751760"
  },
  {
    "text": "actually performs much better so if I were to run this",
    "start": "1751760",
    "end": "1758600"
  },
  {
    "text": "and I won't if if for whatever reason I finish",
    "start": "1758600",
    "end": "1763720"
  },
  {
    "text": "this talk early and you don't feel like rushing out for Lun light having fun with running these but",
    "start": "1763720",
    "end": "1769799"
  },
  {
    "text": "otherwise I'll just show slides and ask you to believe me you do remember the first slide and I was I told you that H",
    "start": "1769799",
    "end": "1776080"
  },
  {
    "text": "black Che to also lie right so uh this looks much better right so it goes 50 50",
    "start": "1776080",
    "end": "1783440"
  },
  {
    "text": "percentile is 200ish milliseconds 99th is not so bad but 95th is or yeah it's",
    "start": "1783440",
    "end": "1791120"
  },
  {
    "text": "not what happy m is but uh it's it's already much better however the 100",
    "start": "1791120",
    "end": "1797080"
  },
  {
    "text": "percentile is 3 seconds and that's the first time you invoke the engine that's when it actually needs to parse the well",
    "start": "1797080",
    "end": "1804279"
  },
  {
    "text": "load the script classes itself the engine itself needs to be loaded and then it needs to uh to uh to rear",
    "start": "1804279",
    "end": "1813320"
  },
  {
    "text": "compile and and bootstrap the Nas One itself because it wasn't Clen before so",
    "start": "1813320",
    "end": "1819120"
  },
  {
    "text": "um there is actually code caching with a single engine inst that's a really good reason to use a single engine",
    "start": "1819120",
    "end": "1825000"
  },
  {
    "text": "instance um Nas one is also smart enough that if you pass a URL reader to Apple",
    "start": "1825000",
    "end": "1831919"
  },
  {
    "text": "then it will it actually checks whether the reader that you passed in as a URL",
    "start": "1831919",
    "end": "1837159"
  },
  {
    "text": "reader and if it is it extracts the URL sees whether it already has code",
    "start": "1837159",
    "end": "1843039"
  },
  {
    "text": "compiled for a script coming from that URL and it will just use the already cached class for it uh so it's much",
    "start": "1843039",
    "end": "1850640"
  },
  {
    "text": "better uh so it's much better in this regard so even though here you see new",
    "start": "1850640",
    "end": "1856679"
  },
  {
    "text": "URL reader so opening a reader and you're passing to EV it will actually not even read the file it you look at",
    "start": "1856679",
    "end": "1862399"
  },
  {
    "text": "the URL and said well yeah seen this already so it will just use the cach version still it's not too good practice",
    "start": "1862399",
    "end": "1870760"
  },
  {
    "text": "to just be opening readers because it's iio at the at the end something might",
    "start": "1870760",
    "end": "1876159"
  },
  {
    "text": "end up being pre-buffering script why would you open a reader so another thing that you can",
    "start": "1876159",
    "end": "1882200"
  },
  {
    "text": "do is you can use the compilable interface and the compile script which",
    "start": "1882200",
    "end": "1887480"
  },
  {
    "text": "is basically the script engine can be cast to something that's called compilable",
    "start": "1887480",
    "end": "1894279"
  },
  {
    "text": "and uh this is this is also part of the Java excript API and then you can compile the script and obtain an well",
    "start": "1894279",
    "end": "1902799"
  },
  {
    "text": "hopefully optimized version a pre-compiled version and then later what you can do is you just evaluate it you",
    "start": "1902799",
    "end": "1909279"
  },
  {
    "text": "evaluate the script into a script context which is a brand new space re",
    "start": "1909279",
    "end": "1915320"
  },
  {
    "text": "Global variables and if we do this",
    "start": "1915320",
    "end": "1920240"
  },
  {
    "text": "now it gets better so as you can see surprisingly even just opening a reader",
    "start": "1920600",
    "end": "1926279"
  },
  {
    "text": "it it does shave off time so it gets gets better again still not like super",
    "start": "1926279",
    "end": "1931639"
  },
  {
    "text": "good but it's it's it's it's still better um this got slightly higher but it doesn't really matter but if you look",
    "start": "1931639",
    "end": "1937320"
  },
  {
    "text": "at the 50 perti actually don't matter so",
    "start": "1937320",
    "end": "1943639"
  },
  {
    "text": "yeah are we re re-evaluating everything so even though the script is compiled we",
    "start": "1943639",
    "end": "1949559"
  },
  {
    "text": "are still doing an EV into an variable space so no we are not really",
    "start": "1949559",
    "end": "1955880"
  },
  {
    "text": "re-evaluating everything because this crypto test is",
    "start": "1955880",
    "end": "1962039"
  },
  {
    "text": "actually most of what it does is it defines functions so what happens is",
    "start": "1962039",
    "end": "1968279"
  },
  {
    "text": "that in that binding space it will just populate a bunch of functions into function objects so it will say that A4",
    "start": "1968279",
    "end": "1976240"
  },
  {
    "text": "will be variable four will be bound to a function object",
    "start": "1976240",
    "end": "1981639"
  },
  {
    "text": "and few things but nothing really terribly expensive happens so a function",
    "start": "1981639",
    "end": "1989799"
  },
  {
    "text": "object is just a tuple in nasor or in JavaScript in general of its lexical",
    "start": "1989799",
    "end": "1995320"
  },
  {
    "text": "scope and code it's cheap to construct because code is only created once and the lexical scope is created pretty much",
    "start": "1995320",
    "end": "2002360"
  },
  {
    "text": "just the well once evaluation and then you are just basically creating those Tob functions are actually cheap once",
    "start": "2002360",
    "end": "2009480"
  },
  {
    "text": "they are compiled so we have this flexible separation of compil and Val I was",
    "start": "2009480",
    "end": "2016440"
  },
  {
    "text": "telling you about is that you have a discrete set of choices how do you want to split the tasks going from here's my",
    "start": "2016440",
    "end": "2022519"
  },
  {
    "text": "source code here's something running so if you if you use compiled script in between you are you're hitting a pretty",
    "start": "2022519",
    "end": "2028960"
  },
  {
    "text": "good sweet spot of course there's further time in detail prr glob VAR spaces",
    "start": "2028960",
    "end": "2035679"
  },
  {
    "text": "so what if we just use the bindings object so we are defining those",
    "start": "2035679",
    "end": "2040880"
  },
  {
    "text": "functions we we're creating a new Global scope for JavaScript program because that's what JavaScript semantics is",
    "start": "2040880",
    "end": "2047359"
  },
  {
    "text": "about and we are just on each evaluation we'll populate it with the functions and",
    "start": "2047359",
    "end": "2052919"
  },
  {
    "text": "then we will invoke two of those functions which will REM the rest of them so what if you did save ourselves a",
    "start": "2052919",
    "end": "2058358"
  },
  {
    "text": "little bit of time and space and just use you know single bindings because the",
    "start": "2058359",
    "end": "2063960"
  },
  {
    "text": "engine itself actually has has bindings built in so if",
    "start": "2063960",
    "end": "2070358"
  },
  {
    "text": "you just as part of the static initialization you just do evaluate reader into the engine which has a",
    "start": "2070359",
    "end": "2077000"
  },
  {
    "text": "built-in bindings already binding is just a global scope space Global variable space cler and then we",
    "start": "2077000",
    "end": "2082960"
  },
  {
    "text": "statically extract two functions which just stess right and then we just call",
    "start": "2082960",
    "end": "2089040"
  },
  {
    "text": "them we just call those past the plain text the Cy text and see what we get",
    "start": "2089040",
    "end": "2094320"
  },
  {
    "text": "back so how far does this perform wow look at that we went down from 150 and",
    "start": "2094320",
    "end": "2101480"
  },
  {
    "text": "like 95% it was 500 milliseconds we actually went down to something really decent like 35 to 60 uh the worst case",
    "start": "2101480",
    "end": "2109160"
  },
  {
    "text": "is still the worst case it it won't improve but the rest of them you know this this actually looks okay looks um",
    "start": "2109160",
    "end": "2116800"
  },
  {
    "text": "this I think uh I might even go to the trouble and just take this particular",
    "start": "2116800",
    "end": "2123320"
  },
  {
    "text": "version and run it",
    "start": "2123320",
    "end": "2129920"
  },
  {
    "text": "single where do I have it one two new bindings three single bindings yeah",
    "start": "2129920",
    "end": "2135079"
  },
  {
    "text": "single bindings version this is the code version this is the code version that does that as you can see I evaluate in a",
    "start": "2135079",
    "end": "2141680"
  },
  {
    "text": "static block I evaluate the reader and extract the functions and then in the",
    "start": "2141680",
    "end": "2147960"
  },
  {
    "text": "actual evaluation I just invoke them so if we now run our little B application",
    "start": "2147960",
    "end": "2154680"
  },
  {
    "text": "with this",
    "start": "2154680",
    "end": "2158078"
  },
  {
    "text": "this might be actually something that you might spend half a minute on or maybe not we'll see how fast this come",
    "start": "2162240",
    "end": "2168640"
  },
  {
    "text": "up but yeah so the first time the request will be slower because the first one",
    "start": "2168640",
    "end": "2174280"
  },
  {
    "text": "takes 3 seconds but as you can see it uh it improves so this is already much",
    "start": "2174280",
    "end": "2180160"
  },
  {
    "text": "better so this is something that we can we can actually afford to uh look at as part",
    "start": "2180160",
    "end": "2187319"
  },
  {
    "text": "so even better of course there is a little",
    "start": "2191000",
    "end": "2197440"
  },
  {
    "text": "foreshadowing here but we'll get back to that and finally what if it turn on on the",
    "start": "2197440",
    "end": "2203920"
  },
  {
    "text": "optimistic typing to do that we need to do a different kind of usage which is",
    "start": "2203920",
    "end": "2211240"
  },
  {
    "text": "you need to use the Nason API some of the JavaScript API so you actually need",
    "start": "2211240",
    "end": "2216880"
  },
  {
    "text": "to obtain an explicit Nas scpt engine Factory and pass it a common line argument you can do this to actually",
    "start": "2216880",
    "end": "2223480"
  },
  {
    "text": "obtain engines with with customized Comm line Arguments for Nas in general if you",
    "start": "2223480",
    "end": "2228960"
  },
  {
    "text": "do this what you get is it goes down from like the the 50% goes from 35 to 12",
    "start": "2228960",
    "end": "2235400"
  },
  {
    "text": "minut seconds two to three times faster actually so that's great uh this is this",
    "start": "2235400",
    "end": "2242440"
  },
  {
    "text": "is the fastest we can do however it's lower to start up you can see that the initialization went from from 3 seconds",
    "start": "2242440",
    "end": "2249440"
  },
  {
    "text": "to 4.7 and that's not bad that's a good optimistic is slower to start because",
    "start": "2249440",
    "end": "2254760"
  },
  {
    "text": "when a type canot proven statically then we will have to presume it's an in and when the Assumption fails we recompile",
    "start": "2254760",
    "end": "2260720"
  },
  {
    "text": "the code uh I time I measured it crypto Benchmark has 35 functions that have",
    "start": "2260720",
    "end": "2267359"
  },
  {
    "text": "recompiled 67 times total and that's part of the startup C optimistic is slower to start because",
    "start": "2267359",
    "end": "2274280"
  },
  {
    "text": "in this example I took a random read compiled function uh like this do array",
    "start": "2274280",
    "end": "2280800"
  },
  {
    "text": "turns out to be an object so it has to be recompiled for that the ABS uh invocations uh are not ins the Y do",
    "start": "2280800",
    "end": "2289400"
  },
  {
    "text": "array is not an in so this function is recompiled one 2 3 four times before it can run however R do",
    "start": "2289400",
    "end": "2296640"
  },
  {
    "text": "array is actually actually ended up not being recompiled and that's a great benefit of not having a separation",
    "start": "2296640",
    "end": "2302160"
  },
  {
    "text": "between compile time and run time the one clever thing we can do is that compiler when it kicks in Rec F function",
    "start": "2302160",
    "end": "2308880"
  },
  {
    "text": "we can actually um we can actually make it so that uh it Peaks at side effect",
    "start": "2308880",
    "end": "2316040"
  },
  {
    "text": "free expressions and proactively evaluat them to see whether it's an object and if it is then it will de optimize it in",
    "start": "2316040",
    "end": "2322760"
  },
  {
    "text": "one go so we do like badge the optimizations for for side effect free uh",
    "start": "2322760",
    "end": "2328359"
  },
  {
    "text": "Expressions um I would go with a car analogy for this but U I'll skip it",
    "start": "2328359",
    "end": "2334680"
  },
  {
    "text": "because I think we will be out of time soon um",
    "start": "2334680",
    "end": "2342640"
  },
  {
    "text": "unfortunately Mas has a type in for cash and this is probably the last thing I will tell you about if you want to",
    "start": "2342960",
    "end": "2348599"
  },
  {
    "text": "improve your performance for optimistic what you can do is you can use a system",
    "start": "2348599",
    "end": "2354280"
  },
  {
    "text": "property and tell it how many files do you want to have in the cach it's all by default because we don't want Nas to",
    "start": "2354280",
    "end": "2359920"
  },
  {
    "text": "beend on writing anything to this but all these decisions of what types were encountered during the execution can be",
    "start": "2359920",
    "end": "2366520"
  },
  {
    "text": "persisted into local cache which is in your system cash directory so you can UK it if you don't need it and then next",
    "start": "2366520",
    "end": "2372280"
  },
  {
    "text": "time you start up your system it will actually remember those decisions so one good thing that we can do is that non",
    "start": "2372280",
    "end": "2378359"
  },
  {
    "text": "optimistic remember the worst startup was like 3 seconds for this example in optimistic it was 4.7 and with the typ",
    "start": "2378359",
    "end": "2384800"
  },
  {
    "text": "cache I actually got it down to 3.5 so this is still tradeoff but we will need to live with this uh from now on there's",
    "start": "2384800",
    "end": "2391040"
  },
  {
    "text": "not much we can do about it so um okay I have more material if",
    "start": "2391040",
    "end": "2397480"
  },
  {
    "text": "you uh feel like You' like to uh talk about it then uh I will be happy to catch up with you um later on but I",
    "start": "2397480",
    "end": "2405440"
  },
  {
    "text": "think this is probably all I could do in this time frame",
    "start": "2405440",
    "end": "2410880"
  },
  {
    "text": "so there is a I have a few more slides on I'm making it",
    "start": "2410880",
    "end": "2416720"
  },
  {
    "text": "uh I'm checking out the stateful execution and uh uh you know what catch me a fine if",
    "start": "2416720",
    "end": "2423800"
  },
  {
    "text": "you're interested cuz uh I think everybody is eager to uh get lunch and uh unfortunately because of scheduling I",
    "start": "2423800",
    "end": "2430200"
  },
  {
    "text": "actually had to stop a little bit late so I will I will I will have to I will have to leave you with with a few parts",
    "start": "2430200",
    "end": "2436920"
  },
  {
    "text": "of the to that not presented sorry about that thank you",
    "start": "2436920",
    "end": "2442780"
  },
  {
    "text": "[Applause]",
    "start": "2442780",
    "end": "2445229"
  }
]