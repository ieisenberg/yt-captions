[
  {
    "text": "(instrumental keyboard music)",
    "start": "827",
    "end": "5263"
  },
  {
    "text": "- I wanted to talk about, kind of, it's a bit of a\nretrospective that I want to take about using reactive programming",
    "start": "11165",
    "end": "18062"
  },
  {
    "text": "and specifically RxJava on Android for a number of years now in\nour production application.",
    "start": "18062",
    "end": "23704"
  },
  {
    "text": "I've talked about RxJava before, and there's plenty of\nmaterial now on the web as well",
    "start": "24914",
    "end": "30367"
  },
  {
    "text": "that you can look at if you are\nunfamiliar with the library. I kind of want to, well,\nthis is about RxJava,",
    "start": "30367",
    "end": "37194"
  },
  {
    "text": "I want to focus a little bit\nless on the library itself and what gaps it closes on\nthe Android framework for us",
    "start": "37194",
    "end": "43880"
  },
  {
    "text": "and focus a bit more about how\nwe use it in our application, and how it has impacted\nthe way we write software",
    "start": "43881",
    "end": "52449"
  },
  {
    "text": "for Android applications, and the patterns that emerge, as well, the problems that we ran into,",
    "start": "52449",
    "end": "58834"
  },
  {
    "text": "and hopefully give you some insight into how we solved these problems.",
    "start": "58834",
    "end": "63848"
  },
  {
    "text": "It's going to be a bit opinionated of course, but I hope it's going to still be valuable, even if you haven't used RxJava before,",
    "start": "63848",
    "end": "69608"
  },
  {
    "text": "just as kind of a motivation. So, that said, I actually\nhad to remind myself",
    "start": "69608",
    "end": "75411"
  },
  {
    "text": "how long we had been using RxJava for, so, I dug a little bit\nthrough the archives",
    "start": "75411",
    "end": "82239"
  },
  {
    "text": "and I found this commit\nwhich is from 2013, March.",
    "start": "82239",
    "end": "87989"
  },
  {
    "text": "So, we've been using it for\nabout two and a half years now, and as you can see we started using",
    "start": "87989",
    "end": "93281"
  },
  {
    "text": "a pre-released version of RxJava. So it has been a bit of\na wild ride since then, and you know, it was before API stability,",
    "start": "93281",
    "end": "101268"
  },
  {
    "text": "and before the main release was out, long before the main release was out. So, of course we bumped into a few issues",
    "start": "101268",
    "end": "110220"
  },
  {
    "text": "in the beginning with RxJava, but in hindsight it has been, it has a massive impact on our application",
    "start": "110220",
    "end": "115876"
  },
  {
    "text": "and I think everyone was super happy with the choice. So, that said, what I want\nto present going forward,",
    "start": "115876",
    "end": "122899"
  },
  {
    "text": "is a little bit like\nwalking down the stack in our application and\nhighlight a few things",
    "start": "122899",
    "end": "129110"
  },
  {
    "text": "that I thought were interesting,\ntalking about in terms of how we split up our code, for instance.",
    "start": "129110",
    "end": "134428"
  },
  {
    "text": "Let's start with looking a little bit how we compose our application,",
    "start": "134428",
    "end": "140534"
  },
  {
    "text": "so in terms of layers, for instance, and what constitutes\nto a particular layer.",
    "start": "140534",
    "end": "145247"
  },
  {
    "text": "This is, looking again at 2013, so about two years ago,\ntwo and a half years ago,",
    "start": "147347",
    "end": "155000"
  },
  {
    "text": "we were following a pretty\nstandard, run-of-the-mill, layered approach to our\napplication architecture.",
    "start": "155001",
    "end": "161132"
  },
  {
    "text": "So you would have, at the very top, you would have your\npresentation objects like views, and you know, your Android\nfragments and whatnot.",
    "start": "161132",
    "end": "168514"
  },
  {
    "text": "You would have your business objects somewhere in the middle\nacting as mediators into kind of delivering\ndata from the data layer",
    "start": "168514",
    "end": "176153"
  },
  {
    "text": "up into the presentation layer. And at the very bottom we would have our data objects which would\ntalk to the service API,",
    "start": "176154",
    "end": "183399"
  },
  {
    "text": "talk to local storage, and so forth. Nothing terribly interesting there.",
    "start": "183399",
    "end": "189181"
  },
  {
    "text": "What did happen later that year though, was that, and this mostly happened",
    "start": "189181",
    "end": "195055"
  },
  {
    "text": "in the back end at SoundCloud, was that we came to realize this kind of",
    "start": "195055",
    "end": "200976"
  },
  {
    "text": "platform-driven approach\nthat we were taking didn't work very well anymore. We were pretty much all\nfocused around technology.",
    "start": "200976",
    "end": "208143"
  },
  {
    "text": "We had Android teams. We had an Android team,\nwe had an iOS team, we had a web team looking after\nthe platform as well,",
    "start": "208143",
    "end": "213817"
  },
  {
    "text": "and this didn't align\nwell with the emphasis we wanted to put on particular features that drive business value.",
    "start": "213817",
    "end": "220203"
  },
  {
    "text": "We actually moved to\na model where we would split up our organization around features",
    "start": "220203",
    "end": "225984"
  },
  {
    "text": "rather than around technology. This is really to then\ndrive the technology",
    "start": "225984",
    "end": "231580"
  },
  {
    "text": "and our software that we\nwrite into a direction that would more accurately\nresemble what we want",
    "start": "231580",
    "end": "236803"
  },
  {
    "text": "to deliver in terms of value. We had started doing this\nin the back end already. It is a transition, so it took\nawhile for us to go through this.",
    "start": "236803",
    "end": "245442"
  },
  {
    "text": "Mobile was last in this transition, so we were still a platform\nteam until a few months ago.",
    "start": "245442",
    "end": "251247"
  },
  {
    "text": "But we did see this coming. What we realized what we\nwould have to do going forward",
    "start": "251247",
    "end": "257167"
  },
  {
    "text": "was to work more towards a model that looks a little more like this. It's kind of a matrix organization,",
    "start": "257167",
    "end": "264341"
  },
  {
    "text": "where you still want\nto have the separation between your layers, you want to still have your presentation objects\nseparate from data, of course.",
    "start": "264341",
    "end": "270956"
  },
  {
    "text": "But also we wanted to have a little bit cleaner vertical lines in the application,",
    "start": "271676",
    "end": "277887"
  },
  {
    "text": "which means if you would\nthink about such things as our discovery features,\nlike exploring new content,",
    "start": "277887",
    "end": "283715"
  },
  {
    "text": "or a search, in contrast to things\nlike our timeline features which are more like on\nTwitter if you're unfamiliar",
    "start": "283715",
    "end": "290239"
  },
  {
    "text": "with our product, where you discover new\ncontent by following people and it kind of is this\nendless stream of tracks",
    "start": "290239",
    "end": "297250"
  },
  {
    "text": "and playlists that you can look at. We wanted to separate our code\nalong those lines as well.",
    "start": "297250",
    "end": "303728"
  },
  {
    "text": "And then an interesting\nquestion that comes up is, how do you communicate?\nA, between the layers,",
    "start": "304778",
    "end": "310757"
  },
  {
    "text": "in this vertical direction? How do you transport\ndata from the data layer through your business logic into the UI",
    "start": "310757",
    "end": "317351"
  },
  {
    "text": "at the end of the day? And also now that we have this other axis",
    "start": "317351",
    "end": "323017"
  },
  {
    "text": "that we've introduced, how do you communicate between features? Right? So without\ncompromising on things like,",
    "start": "323017",
    "end": "329425"
  },
  {
    "text": "you want a particular\npiece, a particular element of the feature matrix you\nwant it to be still cohesive",
    "start": "329425",
    "end": "335485"
  },
  {
    "text": "and kind of decoupled from\nthe rest of the system, so that you don't end up\nwith a \"big ball of mud\" as it's sometimes called,\nwhere everything knows",
    "start": "335485",
    "end": "342637"
  },
  {
    "text": "about everything else. I mention this because I\nthink this is where RxJava really helped us a lot.",
    "start": "342637",
    "end": "349649"
  },
  {
    "text": "Android kind of leaves\nyou alone a little bit. There are a number of mechanisms in Android",
    "start": "349649",
    "end": "356721"
  },
  {
    "text": "to have components communicate\nin your application. Think of intents, for instance,",
    "start": "356721",
    "end": "361829"
  },
  {
    "text": "intents are a very\ncommon way to communicate or handler message for instance, often it's just like callbacks between",
    "start": "361829",
    "end": "368121"
  },
  {
    "text": "objects that you have, but it's a bit of a mess and\nit's difficult to get right, especially if you think\nabout that these edges,",
    "start": "368121",
    "end": "375227"
  },
  {
    "text": "like where we transition between features, or where we transition between layers, they often involve concurrency, right?",
    "start": "375227",
    "end": "381659"
  },
  {
    "text": "So we have to jump off the main UI thread to do something expensive like fetching a JSON response for instance.",
    "start": "381659",
    "end": "387509"
  },
  {
    "text": "Then the question comes up, what is a good approach\nto handle with these",
    "start": "387509",
    "end": "393035"
  },
  {
    "text": "without solving the same\nproblem over and over again?",
    "start": "393036",
    "end": "396449"
  },
  {
    "text": "What I want to do going\nforward is I want to take one of these vertical slices as kind of like a guide for\nmost of the presentation",
    "start": "398239",
    "end": "405938"
  },
  {
    "text": "and show you for a particular feature how we've done this, particularly using RxJava.",
    "start": "405938",
    "end": "413623"
  },
  {
    "text": "The feature I picked is the Sound Stream. I already mentioned it.",
    "start": "413623",
    "end": "418662"
  },
  {
    "text": "Why did I do this? Well, because A, right now\nit's our landing screen so it's one of the most prominent screens",
    "start": "418662",
    "end": "425255"
  },
  {
    "text": "in the application. You see it when you first open it, and I think it's like, for me,",
    "start": "425256",
    "end": "431060"
  },
  {
    "text": "this is such a typical screen to implement because at the end of the day,",
    "start": "431060",
    "end": "436238"
  },
  {
    "text": "it's just a list of stuff\nand if you have been writing mobile applications,\nI'm pretty sure you've written screens like this before,",
    "start": "436239",
    "end": "443320"
  },
  {
    "text": "which are lists of stuff, right? Whether it's cards or\ngrids of things, whatever, you're going to, it's the same problem.",
    "start": "443320",
    "end": "451005"
  },
  {
    "text": "Another interesting thing about this is, it looks simple, right? It's just a list of things,",
    "start": "451005",
    "end": "456393"
  },
  {
    "text": "but there's actually a fair\namount of complexity in here if you think about things such as, this is an endless stream of items, right?",
    "start": "456393",
    "end": "462995"
  },
  {
    "text": "If you follow people,\nthere will be new content on a minute basis, or hourly basis,",
    "start": "462995",
    "end": "468003"
  },
  {
    "text": "so it's like a stream of items. This could grow very long, so you need to start thinking\nabout lazy data deliveries,",
    "start": "468003",
    "end": "475793"
  },
  {
    "text": "such as paging, right? So you scroll to the bottom of the page and then you want to\nlazily fetch new content in. There are things such as pull-to-refresh,",
    "start": "475793",
    "end": "483247"
  },
  {
    "text": "you might be looking at an\noutdated version of the screen and pull-to-refresh is\na very common paradigm",
    "start": "483247",
    "end": "488656"
  },
  {
    "text": "for a user to refresh content,\nso you have pull-to-refresh. There are things such as error states,",
    "start": "488657",
    "end": "494299"
  },
  {
    "text": "so what if it goes wrong? If you fail loading the next page, you have to think about\nall these error views that you need to manage now.",
    "start": "494299",
    "end": "501405"
  },
  {
    "text": "There might be retry logic, if you want to retry fetching a page",
    "start": "501405",
    "end": "506676"
  },
  {
    "text": "because maybe it failed loading, you have to deal with this as well. What I'm saying is that\nwhile it looks simple",
    "start": "506676",
    "end": "512620"
  },
  {
    "text": "there's actually a fair\namount of complexity and I'm pretty sure I'm not the only one who has written pretty\nnasty code in the past making all this stuff come together.",
    "start": "512620",
    "end": "519562"
  },
  {
    "text": "I just think that RxJava\nwas really helpful in making this a little shinier.",
    "start": "519562",
    "end": "525281"
  },
  {
    "text": "If we take a closer\nlook at what constitutes this vertical slice,",
    "start": "526711",
    "end": "532048"
  },
  {
    "text": "there are certain types\nof objects that we found at each level, of course.",
    "start": "532048",
    "end": "537272"
  },
  {
    "text": "At the very top, which is, and by the way you might\nhave already noticed",
    "start": "537273",
    "end": "543023"
  },
  {
    "text": "that I'm using this color scheme, where a green is presentation, orange is our business logic,",
    "start": "543023",
    "end": "548992"
  },
  {
    "text": "and purple at the bottom\nof the stack is data. So whenever I show code\nsamples going forward maybe keep that in mind,\nso it's trying to guide",
    "start": "548992",
    "end": "555655"
  },
  {
    "text": "you guys a little bit\nthrough these layers. So at the very top we have\nour presentation objects",
    "start": "555655",
    "end": "561368"
  },
  {
    "text": "and well, the first thing\nto mention there are Android views and fragments. We use MVP in our application",
    "start": "561368",
    "end": "567330"
  },
  {
    "text": "so our view is actually very lightweight. I'm going to show some code in a minute. So most prominently what we do",
    "start": "567330",
    "end": "574898"
  },
  {
    "text": "is we have a screen\npresenter at the very top which is responsible for\nsteering the presentation logic",
    "start": "574898",
    "end": "582352"
  },
  {
    "text": "and talking to our business logic as well. And it will do such things\nas listening for Android",
    "start": "582352",
    "end": "589992"
  },
  {
    "text": "`LifeCycle` events for\ninstance and just fetch them further down the stack as well. Next we have what we call\nour feature operations.",
    "start": "589992",
    "end": "597676"
  },
  {
    "text": "If you're familiar with a\nclean architecture model, these are our use case classes, sometimes they're called interactors,",
    "start": "597676",
    "end": "603720"
  },
  {
    "text": "and they contain all the business logic. They are basically\nresponsible for wiring up multiple data sources,",
    "start": "603720",
    "end": "610245"
  },
  {
    "text": "and looking after things\nsuch as scheduling as well. I mentioned already like\ntypically you want to jump off",
    "start": "610245",
    "end": "615864"
  },
  {
    "text": "the main UI thread if you\nwant to do anything expensive, so I don't think the presentation\nlayer should be concerned",
    "start": "615864",
    "end": "621158"
  },
  {
    "text": "with such things so we\ndo this on this layer, and whatever business rules you might have",
    "start": "621158",
    "end": "626311"
  },
  {
    "text": "for validation of models, or some such. And so the link between this\nwe establish through RxJava",
    "start": "626311",
    "end": "633882"
  },
  {
    "text": "and to some degree also RxAndroid, although I have to say that we use",
    "start": "633882",
    "end": "639176"
  },
  {
    "text": "very little of the RxAndroid library. Mostly we use the handler thread scheduler",
    "start": "639176",
    "end": "646561"
  },
  {
    "text": "which allows us to\nactually dispatch callbacks on the Android main thread.",
    "start": "646561",
    "end": "652807"
  },
  {
    "text": "So we mostly use it downstream where data propagates from the server,",
    "start": "652807",
    "end": "658936"
  },
  {
    "text": "or the data source in general to the presentation layer. Underneath would be our data layer,",
    "start": "658936",
    "end": "666065"
  },
  {
    "text": "which contains all the\ndata that's relevant for a particular feature. This could be, for\nSound Stream in particular,",
    "start": "666065",
    "end": "672636"
  },
  {
    "text": "this would be like a\nlocal database into which we sync content regularly, and of course the service API",
    "start": "672636",
    "end": "679686"
  },
  {
    "text": "from which we originally fetch this data. So, pretty straight forward. Yeah, so there can be multiple of those",
    "start": "679687",
    "end": "686165"
  },
  {
    "text": "involved to backup a certain feature. I think one thing I want\nto highlight here is there is a single edge\nfrom the business logic",
    "start": "686165",
    "end": "693572"
  },
  {
    "text": "into the UI. I think this is really\nimportant because what we want is the UI should be really dumb, right?",
    "start": "693572",
    "end": "700654"
  },
  {
    "text": "It should not really have\nto juggle a lot of different objects to pull for some\ndata from over here,",
    "start": "700654",
    "end": "708511"
  },
  {
    "text": "pull for some data over there, and then maybe execute a logic in between. This makes our views very complicated",
    "start": "708512",
    "end": "715037"
  },
  {
    "text": "and views are difficult to test, most of you probably already know that. I think this dumb view\napproach is a healthy one,",
    "start": "715037",
    "end": "722141"
  },
  {
    "text": "because you can push the\nlogic further down the stack where it's easier to test.",
    "start": "722141",
    "end": "727529"
  },
  {
    "text": "So if we look at how a view looks like, I picked out, we treat\nfragments as views by the way,",
    "start": "727529",
    "end": "733310"
  },
  {
    "text": "so they don't really have\na controller aspect to it. I know some people prefer, like, MVC",
    "start": "733310",
    "end": "739045"
  },
  {
    "text": "and so they would look at\nactivities or fragments as controllers but for us they\nare just basically vehicles",
    "start": "739045",
    "end": "744641"
  },
  {
    "text": "to kind of like, the glue\nbetween the framework and the pieces of code\nthat make up our app,",
    "start": "744641",
    "end": "751374"
  },
  {
    "text": "so we try to separate everything out so this is of course like a\ndistilled fragment of code",
    "start": "751374",
    "end": "758410"
  },
  {
    "text": "but actually for this\nparticular screen I was showing the fragment is about 50 lines of code,",
    "start": "758410",
    "end": "763425"
  },
  {
    "text": "so this is how lean our fragments are. There's almost nothing in\nthere, it's just wiring. One thing I want to highlight\nhere is this piece here.",
    "start": "763426",
    "end": "772460"
  },
  {
    "text": "When we inject a presenter\nwho's responsible for steering these views and\ntalking to the business logic",
    "start": "772460",
    "end": "778638"
  },
  {
    "text": "what we do is use a\nlibrary called LightCycle, which is something we build in-house,",
    "start": "778638",
    "end": "784001"
  },
  {
    "text": "and basically what it does is, it's actually not built on RxJava, like it's one of those\nplaces where we used",
    "start": "784001",
    "end": "789944"
  },
  {
    "text": "a different technology\nto address a problem, but what it does is it\nbasically dispatches",
    "start": "789944",
    "end": "795239"
  },
  {
    "text": "`LifeCycle` events that we get from Android to any number of\ncollaborators in the fragment. So this could be a presenter,",
    "start": "795239",
    "end": "801044"
  },
  {
    "text": "it could be multiple presenters, you can also nest LightCycles, it could do things like view tracking",
    "start": "801044",
    "end": "807243"
  },
  {
    "text": "if you want to do something like this. It could really be anything. We use, we retain our fragments so",
    "start": "807243",
    "end": "813838"
  },
  {
    "text": "they maintain a state that we inject, which is a cheap way to make sure",
    "start": "813838",
    "end": "820222"
  },
  {
    "text": "that you don't lose out\non any data that you might be fetching in the\nbackground while the screen goes through a rotation\nchange or something like that.",
    "start": "820222",
    "end": "828164"
  },
  {
    "text": "So if we look at a LightCycle\na little bit closer, the way it works is you\nwould have a companion object",
    "start": "828164",
    "end": "835618"
  },
  {
    "text": "called a dispatcher in your fragment. The fragment can be the\ndispatcher itself as well",
    "start": "835618",
    "end": "840784"
  },
  {
    "text": "if you choose to do it that way. And what would happen is\nif the fragment receives",
    "start": "840784",
    "end": "846147"
  },
  {
    "text": "a callback from the\nsystem such as onCreate, it would simply listen for\nthis event and automatically",
    "start": "846148",
    "end": "853428"
  },
  {
    "text": "forward it to any other\nLightCycles that you inject. So the nice thing about\nthis is if you have,",
    "start": "853428",
    "end": "860672"
  },
  {
    "text": "like in this example you\nhave three LightCycles injected into a fragment,",
    "start": "860672",
    "end": "865919"
  },
  {
    "text": "they don't know each\nother so it's very nice to have a cohesive bit of functionality,",
    "start": "865919",
    "end": "872188"
  },
  {
    "text": "put it in a single class, but it will expose the same\nAPI as a fragment, right?",
    "start": "872188",
    "end": "877204"
  },
  {
    "text": "It works for activities\nas well, by the way. And so it's quite nice so we\ncan test them in isolation",
    "start": "877204",
    "end": "883288"
  },
  {
    "text": "so any of these things can\nhave their own unit tests and we just rely on LightCycle\nas kind of the mediator",
    "start": "883288",
    "end": "889928"
  },
  {
    "text": "between the framework and our classes to do the wiring and we\njust assume it works. So we don't write unit\ntests for fragments at all.",
    "start": "889928",
    "end": "896266"
  },
  {
    "text": "We only write unit tests for LightCycles and any of the logic underneath.",
    "start": "896266",
    "end": "901467"
  },
  {
    "text": "Let's look a little bit\ncloser at presenters. This is the screen presenter that we use",
    "start": "903728",
    "end": "909566"
  },
  {
    "text": "to render the Sound Stream. I think in total it's about\nlike 200 lines of code,",
    "start": "909566",
    "end": "915347"
  },
  {
    "text": "so it's not tiny but\nit's also not massive. Essentially what all these screens do",
    "start": "915347",
    "end": "922900"
  },
  {
    "text": "if they render a list of things, is we go through a binding step. This is not quite your\ndata binding what you've,",
    "start": "922900",
    "end": "929842"
  },
  {
    "text": "from MVVM and you know, Android has the data\nbinding library now as well. This is something we did well before then.",
    "start": "929843",
    "end": "935763"
  },
  {
    "text": "Binding is essentially\nthe step that connects observable sequence that\nwe build with RxJava",
    "start": "935763",
    "end": "943069"
  },
  {
    "text": "to the UI and it's kind of like reusable infrastructure code.",
    "start": "943069",
    "end": "949500"
  },
  {
    "text": "We do this on many\nscreens, not just this one. The thing that sticks out out here is",
    "start": "949500",
    "end": "955165"
  },
  {
    "text": "this CollectionBinding that if we create, and the way it works is\nLightCycle would dispatch",
    "start": "955165",
    "end": "960947"
  },
  {
    "text": "a callback to our presenter such as, \"Oh, this view has just been created, \"please go and fetch data for this view.\"",
    "start": "960947",
    "end": "968097"
  },
  {
    "text": "It does so by talking\nto the stream operations which is the use case\nclass for this presenter",
    "start": "968098",
    "end": "975621"
  },
  {
    "text": "which exposes an observable sequence which in this case is\nour Sound Stream items. And then we can tell it, \n\"Load this into this adapter",
    "start": "975621",
    "end": "983097"
  },
  {
    "text": "using this builder syntax,\" and\nwe can also do such things as here is also paging function\nwhich is an Rx function",
    "start": "983097",
    "end": "989483"
  },
  {
    "text": "and I'm going to talk\nabout this in more detail on the next slide actually, to perform paging logic.",
    "start": "989483",
    "end": "995822"
  },
  {
    "text": "So that's really all they do. Of course, the other\ndirection works as well.",
    "start": "995822",
    "end": "1001186"
  },
  {
    "text": "So the presenter would listen for things such as click events.",
    "start": "1001186",
    "end": "1006387"
  },
  {
    "text": "So if we have a button\nin your views it could attach itself or an internal\nsubscriber to a click event",
    "start": "1006387",
    "end": "1014421"
  },
  {
    "text": "and then talk to the business logic to do whatever it's supposed to do.",
    "start": "1014421",
    "end": "1019599"
  },
  {
    "text": "So, paging. I already mentioned-- Who here has built this before,",
    "start": "1019599",
    "end": "1025069"
  },
  {
    "text": "maybe a quick show of hands? Yeah, I mean it's such\na common thing to do. Everyone has to deal with this problem. I went through a few implementations\nof this in the past",
    "start": "1025069",
    "end": "1034292"
  },
  {
    "text": "and I thought they were a\nbit difficult, a struggle, because if you think about this, it's very much like one of these problems",
    "start": "1034292",
    "end": "1041401"
  },
  {
    "text": "that sits between the layers, I would say. There's a lot of view-specific\nlogic involved of course, because it has to do with scroll events,",
    "start": "1041401",
    "end": "1048484"
  },
  {
    "text": "updating the UI, but there's also logic involved that needs to make a decision from how,",
    "start": "1048484",
    "end": "1055124"
  },
  {
    "text": "given a particular page, how do I arrive at the next page, right? So this could be something like traversing",
    "start": "1055124",
    "end": "1061630"
  },
  {
    "text": "an HTTP link to the next page of JSON elements that you fetch from the network, for instance.",
    "start": "1061630",
    "end": "1067408"
  },
  {
    "text": "It could go to the database, as well, you know, who knows? We actually do both in our application. So these are things you don't want",
    "start": "1067408",
    "end": "1072979"
  },
  {
    "text": "to have in your views, right? You don't want your views\nknow about how to construct queries to fetch to move a database cursor",
    "start": "1072979",
    "end": "1079875"
  },
  {
    "text": "around to the next page\nof items or something. So we were really keen on having something that was, well, A,",
    "start": "1079875",
    "end": "1086714"
  },
  {
    "text": "does not create information leaks into the views about\nhow we obtain this data, and also that it's reusable,",
    "start": "1086714",
    "end": "1093749"
  },
  {
    "text": "because clearly the Sound Stream is not the only screen that we want to page.",
    "start": "1093749",
    "end": "1098624"
  },
  {
    "text": "The way it works is, we've built it with Rx of course, we created a pager class,",
    "start": "1099984",
    "end": "1106317"
  },
  {
    "text": "which is like a slight abstraction over an Rx published subject, which is basically, you can just think of",
    "start": "1106317",
    "end": "1113961"
  },
  {
    "text": "as like a channel, like an event channel so you can stick events in one end and you can subscribe other\nlisteners at the other end,",
    "start": "1113961",
    "end": "1121509"
  },
  {
    "text": "and so, yeah, so that you can communicate in a decoupled way. The way it works is the\nfragment would subscribe itself",
    "start": "1121509",
    "end": "1129034"
  },
  {
    "text": "to the pager, and if there\nis already a page available, it would emit right away,",
    "start": "1129034",
    "end": "1134351"
  },
  {
    "text": "and just deliver this page\nback into the subscriber through an Rx `onNext` call. The second piece of\nlogic that comes in here",
    "start": "1134351",
    "end": "1142223"
  },
  {
    "text": "is if you scroll to the bottom\nof the page it will detect, \"Oh, it's time to load the next page.\"",
    "start": "1142223",
    "end": "1148028"
  },
  {
    "text": "So it will issue we have\na reusable scroll listener which will issue a signal\nto the pager called `next`,",
    "start": "1148028",
    "end": "1154878"
  },
  {
    "text": "which will instruct it\nto emit the next page. So now the question is, how does it know to load the next page?",
    "start": "1154878",
    "end": "1161867"
  },
  {
    "text": "Here comes the interesting\npiece into place, which is an operator in\nRx called `switchOnNext`.",
    "start": "1161867",
    "end": "1169459"
  },
  {
    "text": "What `switchOnNext`\nbasically does is it can, given an existing stream of items,",
    "start": "1169459",
    "end": "1175865"
  },
  {
    "text": "you can switch over multiple streams. So basically what we do is, given an initial stream of items,",
    "start": "1175865",
    "end": "1182551"
  },
  {
    "text": "using `switchOnNext` we can switch to the next page, but from the perspective of the caller",
    "start": "1182551",
    "end": "1189912"
  },
  {
    "text": "that actually listens to the sequence, it looks like a single stream of items. If you want to think about this",
    "start": "1189912",
    "end": "1195062"
  },
  {
    "text": "in more procedural ways or terms, it's basically moving\naround pointers I would say, moving around pointers to lists, right?",
    "start": "1195062",
    "end": "1201446"
  },
  {
    "text": "So that's kind of internally what happens. The pager would have a reference to what is the current stream of items,",
    "start": "1201446",
    "end": "1207043"
  },
  {
    "text": "and a reference to what the\nnext stream of items is, and using `switchOnNext` we can make sure, we have a very easy\nwithout having to juggle",
    "start": "1207043",
    "end": "1213892"
  },
  {
    "text": "any of the state ourselves, RxJava does all the heavy\nlifting for us here, to emit pages of items into a subscriber.",
    "start": "1213892",
    "end": "1221114"
  },
  {
    "text": "And in order to determine how to obtain the next page,",
    "start": "1221114",
    "end": "1226382"
  },
  {
    "text": "it will ask a paging function. If you remember from the example,",
    "start": "1226383",
    "end": "1231655"
  },
  {
    "text": "the code sample of the presenter, where it asks for this paging function, it asks the business logic,",
    "start": "1231655",
    "end": "1237460"
  },
  {
    "text": "give me a paging function that tells me, given a certain page of items, how do I arrive at the next one?",
    "start": "1237460",
    "end": "1242567"
  },
  {
    "text": "And in the case of the Sound Stream it would be a database call, because we sync in the\ndata in the background.",
    "start": "1242567",
    "end": "1248466"
  },
  {
    "text": "Yeah, so this is totally reusable. Basically the only piece\nof information we need to provide to the pager\nis the paging function,",
    "start": "1248466",
    "end": "1255431"
  },
  {
    "text": "then we can just plug in this object in every single screen\nwe need paging on then, and it just works.",
    "start": "1255431",
    "end": "1261096"
  },
  {
    "text": "Moving down the stacks a little bit, this is an orange-colored slice of code,",
    "start": "1263706",
    "end": "1269739"
  },
  {
    "text": "so this would be in our use case classes. Particularly this is the\nclass that is responsible",
    "start": "1269739",
    "end": "1275312"
  },
  {
    "text": "for making sure, yeah, the\ndata delivery into the UI. So what we wanted to do is,",
    "start": "1275312",
    "end": "1282046"
  },
  {
    "text": "we needed a page like I already mentioned, which is just a list basically, right, a list of streamed items.",
    "start": "1282046",
    "end": "1287920"
  },
  {
    "text": "I think maybe what stands out here, what is interesting to see is, it's the point where things\ncome together, right?",
    "start": "1287920",
    "end": "1295419"
  },
  {
    "text": "So if you remember the\nvertical and horizontal communication here, so first we have vertical communication,",
    "start": "1295419",
    "end": "1301481"
  },
  {
    "text": "as you can see we return an\nobservable sequence again, so it's really just\nlike a lazy description",
    "start": "1301481",
    "end": "1308470"
  },
  {
    "text": "for the UI to subscribe to and\neventually get data delivered but it's also horizontal communication",
    "start": "1308470",
    "end": "1314832"
  },
  {
    "text": "because, as you can see, we use\nthis `zipWith` operator here to reach out to a\ntotally unrelated feature",
    "start": "1314832",
    "end": "1322725"
  },
  {
    "text": "that we compose into this screen, which is a `facebookInvites` element. This is basically something\nthat we load on top,",
    "start": "1322725",
    "end": "1329621"
  },
  {
    "text": "if you're a new user of the application, which invites you, which\nis a call-to-action to invite your friends to the platform.",
    "start": "1329621",
    "end": "1336008"
  },
  {
    "text": "And the nice thing here about this is this particular class does\nnot have to know anything about how this works, like where this data comes from,",
    "start": "1336008",
    "end": "1342230"
  },
  {
    "text": "or maybe what the conditions might be for when this is supposed to show up, because this call-to-action\nactually only shows up",
    "start": "1342230",
    "end": "1349963"
  },
  {
    "text": "I believe only the fifth time you enter the screen, not always, and then never again.",
    "start": "1349963",
    "end": "1356464"
  },
  {
    "text": "But none of this information\nis here, which is good, because this is the Sound Stream, it shouldn't know about this,\nit's like a separate feature.",
    "start": "1356464",
    "end": "1363436"
  },
  {
    "text": "This is just I think very symptomatic for a clean Rx architecture where, you have a single stream that you compose",
    "start": "1363443",
    "end": "1369576"
  },
  {
    "text": "into somewhere else and all the complexity is hidden beneath it. And scheduling, of course,\nwe call `subscribeOn` here,",
    "start": "1369577",
    "end": "1375453"
  },
  {
    "text": "which basically means\nthat we have a scheduler that we inject which tells the sequence",
    "start": "1375453",
    "end": "1380561"
  },
  {
    "text": "where it should execute. So, of course, this is still\nnot the end of the story,",
    "start": "1380561",
    "end": "1388854"
  },
  {
    "text": "because we need to\nobtain our data somehow. So again, this use case\nclass needs to reach out",
    "start": "1388854",
    "end": "1394450"
  },
  {
    "text": "to some collaborator and ask it for data. I already mentioned we\nuse, we heavily sync data",
    "start": "1394450",
    "end": "1401191"
  },
  {
    "text": "for the user that is locked\ninto the application, so that we can make\nfunctionality available",
    "start": "1401191",
    "end": "1407204"
  },
  {
    "text": "to the user as quickly\nas possible so they don't have to look at spinners all the time. For the Sound Stream then this means then",
    "start": "1407204",
    "end": "1414588"
  },
  {
    "text": "that in order to load a page of items, we go to the database. What we've done here is,",
    "start": "1414588",
    "end": "1421554"
  },
  {
    "text": "we would have a collaborator which we just refer to as a storage class, which abstracts away the way we talk",
    "start": "1421554",
    "end": "1428868"
  },
  {
    "text": "to the database basically. Again, it's just an observable sequence. From the perspective of the caller,",
    "start": "1428868",
    "end": "1434974"
  },
  {
    "text": "they have no idea\nactually where it goes to, and also we do not expose\ncursor objects or anything,",
    "start": "1434974",
    "end": "1440222"
  },
  {
    "text": "so no database information\nleaks into a layer above. What we employ here internally is we have",
    "start": "1440222",
    "end": "1446886"
  },
  {
    "text": "a library called Propeller\nwhich is basically, it's a light abstraction\non top of an Android SQLite database,",
    "start": "1446886",
    "end": "1453480"
  },
  {
    "text": "and which lends itself a bit\nbetter to reactive programming because it basically looks at tables as,",
    "start": "1453480",
    "end": "1460469"
  },
  {
    "text": "basically collections and iterables, so it exposes iterable\ncursors basically so that",
    "start": "1460469",
    "end": "1467039"
  },
  {
    "text": "you can use things like Guava or like any kind of standard\nJava collection mechanisms",
    "start": "1467039",
    "end": "1472567"
  },
  {
    "text": "to deal with your data from local storage, and because of the\nduality principle between",
    "start": "1472567",
    "end": "1478115"
  },
  {
    "text": "RxJava and iterators, or observables and iterators, it's very easy to turn them\ninto Rx observable sequences.",
    "start": "1478115",
    "end": "1485026"
  },
  {
    "text": "So we have this Rx companion objects in Propeller which can\ntake a query that we write",
    "start": "1485026",
    "end": "1492755"
  },
  {
    "text": "and it turns it into\na observable sequence. In this case it would emit\na cursor and then we map",
    "start": "1492755",
    "end": "1499141"
  },
  {
    "text": "this cursor or this row, basically, of the table to a particular\nitem that we want to emit.",
    "start": "1499141",
    "end": "1505565"
  },
  {
    "text": "Okay, so this basically\nconcludes the vertical way of how we do things,",
    "start": "1508015",
    "end": "1514074"
  },
  {
    "text": "that covers all the layers, but we still quite haven't answered what we do horizontally, right? If we want to truly talk between",
    "start": "1514074",
    "end": "1520668"
  },
  {
    "text": "features that maybe should not even know of each other at all.",
    "start": "1520668",
    "end": "1526334"
  },
  {
    "text": "This is, again, like a really common case I'm pretty sure most of\nyou in the audience have had to deal with,\nwhich is this example.",
    "start": "1528704",
    "end": "1535576"
  },
  {
    "text": "So we are in the Sound Stream again, it's the mixed list of\ntracks and playlists",
    "start": "1535576",
    "end": "1540916"
  },
  {
    "text": "that other people post or repost. What I can do is I can\ninteract with these, right?",
    "start": "1540916",
    "end": "1546279"
  },
  {
    "text": "So if I click on a playlist\nhere on the middle of the screen it launches me into a\ntotally different experience",
    "start": "1546280",
    "end": "1552596"
  },
  {
    "text": "and I can do stuff there,\nI can engage with it. So I click the Like button\nthat increments the counter, and then I press the Back button",
    "start": "1552596",
    "end": "1558679"
  },
  {
    "text": "and I go back to the previous screen. So then the question that comes up is, you might have noticed that there's these little stats what we keep around,",
    "start": "1558679",
    "end": "1565760"
  },
  {
    "text": "and so the little heart\nsymbol in the counter has increased like immediately, right? So it picked up the fact that I engaged",
    "start": "1565760",
    "end": "1573500"
  },
  {
    "text": "with this object on a different screen. I think the important\ntakeaway here is that",
    "start": "1573500",
    "end": "1578910"
  },
  {
    "text": "the Sound Stream is built\nby a different team, this is not just a\ntechnological issue, right?",
    "start": "1578910",
    "end": "1584133"
  },
  {
    "text": "If you move to a feature team organization the Sound Stream is built\nby a different team",
    "start": "1584134",
    "end": "1590244"
  },
  {
    "text": "than the screen that renders a playlist and we interact with a playlist.",
    "start": "1590244",
    "end": "1595747"
  },
  {
    "text": "So then it's very important\nthat you need to make sure that you do not couple these things too closely to each other.",
    "start": "1595748",
    "end": "1602584"
  },
  {
    "text": "The problem basically becomes if we look at these two\nscreens side-by-side",
    "start": "1604744",
    "end": "1610397"
  },
  {
    "text": "how do we establish a\ncommunication channel between them? Without these screens actually\nknowing about each other,",
    "start": "1610397",
    "end": "1615970"
  },
  {
    "text": "we can pass around data in an easy and efficient way. Again, Android sort of\nhas ways to do that,",
    "start": "1615970",
    "end": "1623726"
  },
  {
    "text": "you know, intents are clearly\none way of doing this, but I always thought that\nintents are terrible to work with",
    "start": "1623726",
    "end": "1629762"
  },
  {
    "text": "because they force a couple of very odd complications on you as a developer",
    "start": "1629762",
    "end": "1635893"
  },
  {
    "text": "such as parcelables, right? So if you put, the only way you can pass around data in an intent is\nby putting things in a bundle,",
    "start": "1635893",
    "end": "1642394"
  },
  {
    "text": "which again needs to, is\nrestricted by this parcelable API so you need to be able\nto marshall this data",
    "start": "1642394",
    "end": "1649569"
  },
  {
    "text": "even if no inter-process\ncommunication is involved. So it's super weird because\nmore often than not,",
    "start": "1649569",
    "end": "1654863"
  },
  {
    "text": "you do not have\ninter-process communication, you just go from one screen to another, but you use the same\nvehicle which is intents",
    "start": "1654863",
    "end": "1661272"
  },
  {
    "text": "to communicate this\nfact which I think is a very awkward design decision in Android.",
    "start": "1661272",
    "end": "1666518"
  },
  {
    "text": "I guess they made it\nbecause they want to have a single concept to model\nthis kind of messaging,",
    "start": "1666518",
    "end": "1672556"
  },
  {
    "text": "but it makes things very complicated or unnecessarily complicated. The way we solve it is\nby using Rx subjects.",
    "start": "1672556",
    "end": "1680335"
  },
  {
    "text": "And of course we still send an\nintent to open the activity, there's no way around this,",
    "start": "1680335",
    "end": "1685838"
  },
  {
    "text": "but we do not actually\ncommunicate via intents in terms of data passing\non, message passing.",
    "start": "1685838",
    "end": "1691572"
  },
  {
    "text": "I already briefly mentioned\nwhat a subject is, it's basically, if you\nknow what an `EventBus` is,",
    "start": "1691572",
    "end": "1697237"
  },
  {
    "text": "you know the `EventBus`, a\npattern, it's basically that, so it's just like a single event queue and you can post things on the queue",
    "start": "1697237",
    "end": "1704947"
  },
  {
    "text": "and either there are subscribers or there are no subscribers. If there are subscribers\nthey will get the message, if there are no subscribers\nthey won't get the message.",
    "start": "1704947",
    "end": "1711913"
  },
  {
    "text": "This is what we did, basically. Here's the use case class\nfor this particular screen",
    "start": "1711913",
    "end": "1718715"
  },
  {
    "text": "or specifically the engagement bar that we have there for to trigger a Like.",
    "start": "1718715",
    "end": "1724311"
  },
  {
    "text": "In order to target a\nLike what we need to do is persist the stack to the database, so we use commands, command classes,",
    "start": "1724311",
    "end": "1731487"
  },
  {
    "text": "that know how to persist\na certain change set to the database.",
    "start": "1731487",
    "end": "1736849"
  },
  {
    "text": "And again, we turn this\ninto an Rx observable sequence, and what we then do is,\nif this is successful,",
    "start": "1736849",
    "end": "1743159"
  },
  {
    "text": "is we use the `map` operator\nto turn this into something that we can publish\nthroughout the application.",
    "start": "1743159",
    "end": "1749242"
  },
  {
    "text": "So we can say, \"Oh hey,\nthis worked, okay, good.\" So now we want other screens who might be interested in this\nfact to know about it.",
    "start": "1749243",
    "end": "1756720"
  },
  {
    "text": "So we use the map operator to turn this into a change set and then\nwe publish this change set",
    "start": "1756720",
    "end": "1762597"
  },
  {
    "text": "to the application. Well, how does publishing work? It's basically simply an Rx action",
    "start": "1762597",
    "end": "1768179"
  },
  {
    "text": "that gets the data passed in, and you can see here, we use this `eventBus` to publish called,",
    "start": "1768179",
    "end": "1776562"
  },
  {
    "text": "it's really just an Rx\nsubject in disguise, it's nothing fancy so if\nyou remove all the fluff",
    "start": "1776562",
    "end": "1782622"
  },
  {
    "text": "you would have an Rx subject\nbut we found it a bit easier to work with, instead of working with,",
    "start": "1782623",
    "end": "1788032"
  },
  {
    "text": "like a dozen different\nsubjects that we inject in all these different screens,",
    "start": "1788032",
    "end": "1793211"
  },
  {
    "text": "we found it a bit easier\nto have a light abstraction around it and that we called\nby a common name, `EventBus`,",
    "start": "1793211",
    "end": "1799758"
  },
  {
    "text": "and that we inject as a singleton\nthroughout the application and we have a testable for this as well,",
    "start": "1799758",
    "end": "1805075"
  },
  {
    "text": "so it's actually really\neasy to write unit tests for these things, because\nwe can fake events on the `EventBus` and make\nsure that other components",
    "start": "1805075",
    "end": "1812319"
  },
  {
    "text": "in the application\nreceive the right events, or subscribe themselves\nor unsubscribe themselves from the event bus.",
    "start": "1812319",
    "end": "1819237"
  },
  {
    "text": "Don't worry too much\nabout `PropertySet` here, it's kind of like a common\ndata format that we use",
    "start": "1819238",
    "end": "1824648"
  },
  {
    "text": "to pass around change\nsets in the application. It's basically just a data bag.",
    "start": "1824649",
    "end": "1829967"
  },
  {
    "text": "It's similar to a map, but\nit's typesafe over its keys so it's a nice way for us",
    "start": "1829967",
    "end": "1835203"
  },
  {
    "text": "to stuff all sorts of data in there, turn it into a value object that we can",
    "start": "1835203",
    "end": "1840849"
  },
  {
    "text": "create events on, for instance, and move it through the application",
    "start": "1840849",
    "end": "1846859"
  },
  {
    "text": "using Rx observables. On the receiving side,\nthat was the sending side,",
    "start": "1846859",
    "end": "1853861"
  },
  {
    "text": "on the receiving side, so here we are in the view layer again. We need to pick this up, right? We need to make sure we\nreceive this event and then",
    "start": "1853861",
    "end": "1860757"
  },
  {
    "text": "so that the views can update\nthemselves accordingly. Here we receive, uh,",
    "start": "1860757",
    "end": "1866376"
  },
  {
    "text": "we simply subscribe to\nthe same event queue, and simply update the adapter. So if we get this change\nset, it's simple as",
    "start": "1866376",
    "end": "1873412"
  },
  {
    "text": "updating the specific item in the list and rendering the list. So that's all we need\nto do and we're done.",
    "start": "1873412",
    "end": "1880517"
  },
  {
    "text": "Yeah, this concludes\nkind of my walkthrough how we implement a particular feature,",
    "start": "1880517",
    "end": "1888852"
  },
  {
    "text": "but of course there were\ncertain things that came up over and over again that\nwe wanted to look at again. I think it's just like,\nmaybe general advice",
    "start": "1888852",
    "end": "1897466"
  },
  {
    "text": "about how we do certain\nthings in our application. So one thing that comes\nup over and over again is",
    "start": "1897467",
    "end": "1904387"
  },
  {
    "text": "how do you deal with connecting observable sequences to views,",
    "start": "1904387",
    "end": "1909633"
  },
  {
    "text": "specifically of fragments and activities? We chose the most simple way, which is to just bind subscriptions",
    "start": "1909633",
    "end": "1915927"
  },
  {
    "text": "to `LifeCycle` callbacks\nwe get from Android. So we would have something\nlike subscriptions",
    "start": "1915927",
    "end": "1922893"
  },
  {
    "text": "that follow the `viewLifeCycle`\nby subscribing sequences in a call to `onViewCreated` and",
    "start": "1922893",
    "end": "1929493"
  },
  {
    "text": "unsubscribing when we get\nthe `onDestroyView` callback. This leads to a bit more\nboilerplate than other solutions.",
    "start": "1929493",
    "end": "1934825"
  },
  {
    "text": "There's more clever solutions out there that go all-in in terms\nof Rx and then they model,",
    "start": "1934825",
    "end": "1940281"
  },
  {
    "text": "they basically emit every\ncallback you get from Android as a separate Rx event to an observable.",
    "start": "1940281",
    "end": "1947224"
  },
  {
    "text": "I found this gets very complicated, a bit difficult to understand. I think this is a very\nstraight-forward way of doing it.",
    "start": "1947224",
    "end": "1953028"
  },
  {
    "text": "So this is something you would find a lot of in our code base.",
    "start": "1953028",
    "end": "1958416"
  },
  {
    "text": "Another thing that comes\nup over and over again is what I call Fast Path or Lazy Update, which is concat first.",
    "start": "1958416",
    "end": "1965461"
  },
  {
    "text": "So what you often want\nto do is something like, oh, if I have a value cached already,",
    "start": "1965461",
    "end": "1972420"
  },
  {
    "text": "I want to emit it as quickly\nas possible, right, to the UI, so that my UI is\nresponsive and everything, but maybe I don't.",
    "start": "1972420",
    "end": "1979386"
  },
  {
    "text": "So maybe I need to go\nto the network after all and fetch it, because\nmaybe it isn't cached. This is, here you can use\nthe concat first approach,",
    "start": "1979386",
    "end": "1987676"
  },
  {
    "text": "which is basically using\nthe concatenate operator in RX which just, yeah, appends\ntwo sequences to each other.",
    "start": "1987676",
    "end": "1994734"
  },
  {
    "text": "The way it works is, either\nthe first one completes right away and doesn't emit anything",
    "start": "1994734",
    "end": "2001212"
  },
  {
    "text": "and it proceeds to the next sequence, which would be fetching it\nfrom the API for instance, or because of `first`\nthat we add at the end",
    "start": "2001212",
    "end": "2008084"
  },
  {
    "text": "if it does emit, so it did\nemit a value from the cache, then first we'll simply\ntake this singular item",
    "start": "2008084",
    "end": "2014831"
  },
  {
    "text": "and unsubscribe so it would never even get to the remote call. So this is a really common\npattern that you can use",
    "start": "2014831",
    "end": "2020222"
  },
  {
    "text": "to implement this kind of, like, cache event fetch approach. You can also emit first,",
    "start": "2020222",
    "end": "2026352"
  },
  {
    "text": "then you have kind of like a lazy update, which means you emit\nsomething from your cache so the views immediately get the item,",
    "start": "2026352",
    "end": "2032854"
  },
  {
    "text": "but it will then also fetch\nan updated version of it and emit it again so then\nyou would see a number pop in,",
    "start": "2032854",
    "end": "2039184"
  },
  {
    "text": "maybe with a second delay\nor so which updates itself, so it's very simple and a very nice way. It's kind of the reactive\nversion of `getOrElse`, right?",
    "start": "2039185",
    "end": "2046554"
  },
  {
    "text": "Observable transformers are\na super nice thing as well. They use the `compose`\noperator and basically what",
    "start": "2048724",
    "end": "2055244"
  },
  {
    "text": "they allow you to do is take any number of composition steps in\na sequence and turn them into a single one.",
    "start": "2055245",
    "end": "2061188"
  },
  {
    "text": "To make this more concrete, what you could do is\ninstead of always saying `subscribeOn` this background thread",
    "start": "2061188",
    "end": "2067992"
  },
  {
    "text": "and `observeOn` the Android main thread, you could take these two calls and declare a transformer that\nalways performs them for you.",
    "start": "2067992",
    "end": "2076281"
  },
  {
    "text": "And then you can compose\ninstances of this transformer for instance, like a\nhigh-priority UI task, whatever, if that's\nthe thing you want to do,",
    "start": "2076281",
    "end": "2084221"
  },
  {
    "text": "compose into your observables. A nice thing about this\nis it's great for testing because if you unit test\nthis scheduled model",
    "start": "2084222",
    "end": "2091139"
  },
  {
    "text": "sequence there that you expose, you can just swap this out in a unit test and you can run it synchronously\non the current thread.",
    "start": "2091140",
    "end": "2098965"
  },
  {
    "text": "So you remove all\nconcurrency in your unit test which makes it super easy to\ndeal with threading concerns.",
    "start": "2098965",
    "end": "2104846"
  },
  {
    "text": "We also have deferred execution\nthat we use quite a bit, especially in Propeller,\nlike the data layer.",
    "start": "2106286",
    "end": "2111316"
  },
  {
    "text": "Something you would maybe want to do, it's just like an imaginary\nsequence of integers,",
    "start": "2111316",
    "end": "2117306"
  },
  {
    "text": "it's just like an example\nto explain the point. Let's say you have a\nfunction that computes",
    "start": "2117306",
    "end": "2123505"
  },
  {
    "text": "a list of integers and it's expensive, so you want to put it on\na background thread. So, essentially you want to delay this call",
    "start": "2123506",
    "end": "2129658"
  },
  {
    "text": "until someone actually\nsubscribes to look at this data. And it's an iterable because it's a list, so commonly what you would do is you would",
    "start": "2129658",
    "end": "2136161"
  },
  {
    "text": "create your observable and\nthen walk over the results of this computation and emit the results into your subscriber.",
    "start": "2136161",
    "end": "2141641"
  },
  {
    "text": "However, there's a number\nof problems with this code. First of all, it doesn't\nhandle errors very well,",
    "start": "2141641",
    "end": "2148304"
  },
  {
    "text": "so you know it might throw,\nthe computation might throw, so you might want to catch errors and forward them to the subscriber.",
    "start": "2148304",
    "end": "2154411"
  },
  {
    "text": "It also doesn't deal with backpressure, and I'm going to talk about\nbackpressure briefly. So what I recommend doing\ninstead is just reuse",
    "start": "2154411",
    "end": "2161598"
  },
  {
    "text": "RxJava operators to do all\nthis heavy lifting for you. There's an operator called `defer`,",
    "start": "2161598",
    "end": "2167471"
  },
  {
    "text": "which basically allows\nyou to pass a lambda which is an observable factory, so it's only executed\nwhen someone subscribes",
    "start": "2167471",
    "end": "2174484"
  },
  {
    "text": "to the sequence, not before. So if someone comes and subscribes, you can actually pass this result",
    "start": "2174484",
    "end": "2181195"
  },
  {
    "text": "of your computation directly\ninto a factory method called `from` which turns\nany Java collection",
    "start": "2181195",
    "end": "2188324"
  },
  {
    "text": "into a observable sequence. So it's a single line, and it's more resilient because you reuse",
    "start": "2188324",
    "end": "2193988"
  },
  {
    "text": "all the infrastructure\nthat RxJava gives you to deal with things like backpressure.",
    "start": "2193988",
    "end": "2198127"
  },
  {
    "text": "A few common pitfalls I\nwanted to talk about as well that kind of struck us a few times and yeah, if you use\nRxJava, maybe this might",
    "start": "2200457",
    "end": "2208040"
  },
  {
    "text": "be interesting for you as well. First of all there's a\nreally tempting overload",
    "start": "2208040",
    "end": "2213125"
  },
  {
    "text": "of the `subscribe` call on our sequence which takes no arguments. I do not use this because",
    "start": "2213125",
    "end": "2218965"
  },
  {
    "text": "it has following the problem that you might not be aware of.",
    "start": "2218965",
    "end": "2224879"
  },
  {
    "text": "It relies on the fact that you, basically that you would\nnever receive an error, because since you do not provide this call",
    "start": "2224879",
    "end": "2232031"
  },
  {
    "text": "with an error handler, what it\nwill do if you get an error it will re-throw a fatal\nexception basically and crash your application.",
    "start": "2232031",
    "end": "2238857"
  },
  {
    "text": "So even if you want to do like\na fire-and-forget style call and you're not actually\ninterested in a result,",
    "start": "2238857",
    "end": "2243918"
  },
  {
    "text": "make sure you always\nsubscribe to sequences and have error handling logic present. Otherwise this might\nbite you in production",
    "start": "2243918",
    "end": "2250791"
  },
  {
    "text": "and suddenly crash the application. Another thing that is specific\nto the `observeOn` operator",
    "start": "2250791",
    "end": "2257271"
  },
  {
    "text": "to receive notifications\non a different thread, is this particular interesting case.",
    "start": "2257271",
    "end": "2264074"
  },
  {
    "text": "So, we have a subscriber\nhere, or an observable, and we immediately emit the value,",
    "start": "2264074",
    "end": "2269227"
  },
  {
    "text": "it doesn't matter what it is, and we fail. So we call\n`onError` with an exception, so what you would suspect\nis that the subscriber",
    "start": "2269227",
    "end": "2275822"
  },
  {
    "text": "on the main thread would\nget the value first and then the error, but this\nis actually not what happens.",
    "start": "2275822",
    "end": "2282276"
  },
  {
    "text": "The reason is that `onNext`\ngets actually gets dropped, because `onError` always\ncuts ahead of `onNext`,",
    "start": "2282277",
    "end": "2288338"
  },
  {
    "text": "so if `observeOn` recognizes\nthat your sequence has failed it doesn't even bother emitting\nany other items anymore",
    "start": "2288338",
    "end": "2295094"
  },
  {
    "text": "because it wants subscribers\nto know as soon as possible that something went wrong, so that they can detach themselves, for instance.",
    "start": "2295094",
    "end": "2301548"
  },
  {
    "text": "So, yeah, so this can lead\nto surprising behavior if you debug something and\ndon't get your values emitted,",
    "start": "2301549",
    "end": "2308004"
  },
  {
    "text": "so something to be aware of. Backpressure is a big topic\nso I'm not going to get",
    "start": "2308004",
    "end": "2314714"
  },
  {
    "text": "into too much detail, but, so maybe I'll just mention it here, that it can cause problems.",
    "start": "2314714",
    "end": "2320519"
  },
  {
    "text": "Basically, and this might be surprising, this is some code I took, you don't have to read or understand it,",
    "start": "2320519",
    "end": "2326138"
  },
  {
    "text": "this is code from the\n`observeOn` operator as well, and the one thing I want to highlight here",
    "start": "2326138",
    "end": "2332594"
  },
  {
    "text": "is this `request` call,\nbecause basically RxJava internally isn't actually\nbased on a push model.",
    "start": "2332594",
    "end": "2341537"
  },
  {
    "text": "It's based on what they\ncall reactive pull, which basically tries to address the case",
    "start": "2341538",
    "end": "2347209"
  },
  {
    "text": "where a subscriber is too slow to process all of the notifications\nthat a very fast observable",
    "start": "2347209",
    "end": "2352317"
  },
  {
    "text": "emits into the subscriber. And so basically what happens\ninstead is internally,",
    "start": "2352317",
    "end": "2357866"
  },
  {
    "text": "and you don't see this from the outside, it requests a specific amount of items, but if the observer,",
    "start": "2357866",
    "end": "2364833"
  },
  {
    "text": "the consumer basically, doesn't process them fast enough, and doesn't ask for the next\nbatch of items fast enough,",
    "start": "2364833",
    "end": "2371450"
  },
  {
    "text": "what happens is that it will\nfail at putting the new items that are produced into the queue.",
    "start": "2371450",
    "end": "2379601"
  },
  {
    "text": "And the surprising thing\nmaybe is on Android, heads up, this is 16.",
    "start": "2379601",
    "end": "2384941"
  },
  {
    "text": "So this is the internal buffer size, and clearly you can quickly run out",
    "start": "2384941",
    "end": "2390582"
  },
  {
    "text": "of 16 items that are cached internally for a subscriber is a bit slow. And basically it will throw\na missing backpressure",
    "start": "2390582",
    "end": "2397305"
  },
  {
    "text": "exception that will\ncrash your application. So, yeah, something to be aware of. To deal with this, a pretty obvious way is",
    "start": "2397305",
    "end": "2404672"
  },
  {
    "text": "you can simply take load\noff your target thread and make sure that you don't overload, especially the Main Looper on Android.",
    "start": "2404673",
    "end": "2411359"
  },
  {
    "text": "All the draw calls on Android go through the Main Looper, so we\ndid the mistake that we were a bit defensive\nand all of our callbacks",
    "start": "2411360",
    "end": "2417953"
  },
  {
    "text": "we would schedule whatever\nit was on the main thread. You know, it's very easy,\n`observeOn` main thread, and then you're done,\nbecause you don't have",
    "start": "2417954",
    "end": "2424632"
  },
  {
    "text": "to deal with concurrency anymore. But of course this comes at a cost, because then if you overload the main\nthread and the Main Looper",
    "start": "2424633",
    "end": "2431420"
  },
  {
    "text": "too much, then at some point your sources will emit faster than Android",
    "start": "2431420",
    "end": "2436738"
  },
  {
    "text": "is able to catch up\nprocessing all these messages and then you run into these issues. Of course you can also\nbuffer your sequences",
    "start": "2436738",
    "end": "2443053"
  },
  {
    "text": "using things like `toList`,\nor the `buffer` operator so they can catch them and emit them in bigger chunks.",
    "start": "2443053",
    "end": "2450848"
  },
  {
    "text": "There's built in backpressure operators, which I'm not going to get into, but you can just look at\nthe documentation, they're there.",
    "start": "2450848",
    "end": "2457789"
  },
  {
    "text": "And there's also system property, which is a bit the hackier approach that you can actually\noverride this value of 16",
    "start": "2457789",
    "end": "2463524"
  },
  {
    "text": "if this is something you want to do, if you think maybe 64\nor whatever magic number is a better choice for your application,",
    "start": "2463524",
    "end": "2470421"
  },
  {
    "text": "you can bump up those\ninternal buffer size. Okay, I'm almost done.",
    "start": "2470421",
    "end": "2475599"
  },
  {
    "text": "I want to super briefly cover\nthe topic of debugging. I suppose there's\nsomething to be said about,",
    "start": "2475599",
    "end": "2481797"
  },
  {
    "text": "you know, what does all this mean, is it super difficult to\nunderstand if something goes wrong?",
    "start": "2481798",
    "end": "2486977"
  },
  {
    "text": "The good news is there's only\nlike a certain class of issues that I've found that I\nusually end up debugging,",
    "start": "2486977",
    "end": "2494616"
  },
  {
    "text": "which is something like, messages not arriving in\nsubscribers or something. Our servers are like,\nit's very, very solid,",
    "start": "2494616",
    "end": "2502070"
  },
  {
    "text": "so it was a while until I\nreally found a bug in RxJava. If we take this little\nexample sequence where we just",
    "start": "2502070",
    "end": "2510916"
  },
  {
    "text": "emit a bunch of numbers\nand turn them into strings, so there's a mapping step involved,",
    "start": "2510916",
    "end": "2516488"
  },
  {
    "text": "and then there's `observeOn`, you know, how can we debug this? How can we possibly log this?",
    "start": "2516488",
    "end": "2522270"
  },
  {
    "text": "Well, you can use the debugger, of course. That might be, you know\nwith all this backpressure",
    "start": "2522270",
    "end": "2527286"
  },
  {
    "text": "stuff internally if you look\nat `observeOn`, it gets a bit difficult to understand, so we wanted to make this\na bit easier to work with.",
    "start": "2527286",
    "end": "2534879"
  },
  {
    "text": "So what we ended up doing is we wrote a small library called Gandalf,",
    "start": "2534879",
    "end": "2539894"
  },
  {
    "text": "which is basically an annotation\ndrived byte code injector. So it's based actually on\na project by Jake Wharton",
    "start": "2539894",
    "end": "2548403"
  },
  {
    "text": "called \"Hugo\" which initially was meant to only inject logging\ninto your application,",
    "start": "2548403",
    "end": "2553463"
  },
  {
    "text": "but I think we just took it\nto its logical conclusions and added all sorts of annotations for it, debugging and tracing,",
    "start": "2553464",
    "end": "2559222"
  },
  {
    "text": "so we don't only use it for logging, but we use it as well to inject all sorts",
    "start": "2559222",
    "end": "2564353"
  },
  {
    "text": "of other instrumentation\ninto the application. It does this with AspectJ if\nyou're familiar with this.",
    "start": "2564353",
    "end": "2570043"
  },
  {
    "text": "It is a byte code injector, for cross-cutting concerns,",
    "start": "2570043",
    "end": "2576112"
  },
  {
    "text": "so it can generate byte code\nfor you and inject it into all kind of different\npoints in your application. Then we would have two\nannotations that we can use",
    "start": "2576112",
    "end": "2583540"
  },
  {
    "text": "to output logging. It looks a little like this. I have an observable factory,",
    "start": "2583541",
    "end": "2590043"
  },
  {
    "text": "this is the example I was showing earlier. The only thing we have to do is apply the Gandalf plug-in to\nour gradeable scripts",
    "start": "2590043",
    "end": "2595779"
  },
  {
    "text": "and then add this annotation,\n`@RxLogObservable`. We can do the same\nthing with a subscriber, but I'm just going to show\nit to you for the observable.",
    "start": "2595779",
    "end": "2602920"
  },
  {
    "text": "What you will get it this. It will simply print\nthe sequence it observed to the command line.",
    "start": "2602920",
    "end": "2609120"
  },
  {
    "text": "So here you can see, in\nthis particular class, which is `MainActivity` (this is not from our application,",
    "start": "2609120",
    "end": "2614413"
  },
  {
    "text": "it's just a dummy application), and this particular method\ncalled `createObservable` we subscribed on the main thread",
    "start": "2614413",
    "end": "2620869"
  },
  {
    "text": "and then first we received the value one, then two, then three, and so forth, then we completed and terminated",
    "start": "2620869",
    "end": "2626930"
  },
  {
    "text": "and it took such and such amount of time, and then you can see\nthere's an `unsubscribe` call at the end as well.",
    "start": "2626930",
    "end": "2632107"
  },
  {
    "text": "This can be useful, as\nI mentioned earlier, when you want to debug a sequence",
    "start": "2632107",
    "end": "2637121"
  },
  {
    "text": "where somewhere along the\nline it dropped the message and you're not really\nsure where it happened, it's kind of nice to see,",
    "start": "2637122",
    "end": "2642661"
  },
  {
    "text": "\"Oh, it unsubscribed\nafter this and this step,\" and it's kind of a lead into where you can start looking for problems.",
    "start": "2642662",
    "end": "2650911"
  },
  {
    "text": "Maybe I should briefly mention there is an \"official\" component as\nwell, called RxJava Debug,",
    "start": "2650911",
    "end": "2656530"
  },
  {
    "text": "written by Netflix for the\npre-release version of RxJava. It doesn't look to be maintained though,",
    "start": "2656530",
    "end": "2663751"
  },
  {
    "text": "and it's actually based\non a pre-release version of RxJava-core, so I\ndon't know what happened",
    "start": "2663751",
    "end": "2669671"
  },
  {
    "text": "to that project, but it\nworks in a different way. It uses the plug-in API of RxJava.",
    "start": "2669671",
    "end": "2675940"
  },
  {
    "text": "It has very noisy output. So we decided to write our own thing, yeah, going forward.",
    "start": "2675940",
    "end": "2682674"
  },
  {
    "text": "This pretty much concludes my talk, so if you want to stay in touch, this is",
    "start": "2682674",
    "end": "2687713"
  },
  {
    "text": "my Twitter handle. Before we go into the questions, just a reminder again,\nplease rate the session,",
    "start": "2687713",
    "end": "2693170"
  },
  {
    "text": "and slip in any last-minute\nquestions, I guess. Thank you. (applause)",
    "start": "2693170",
    "end": "2702474"
  },
  {
    "text": "- Okay, yep, now it's unmuted. Thank you very much, Matthias. There's a couple of questions for you.",
    "start": "2702475",
    "end": "2708515"
  },
  {
    "text": "One is about the Rx Propeller, - Oh, yeah. - Could you compare that\nto the SQL Brite by Square?",
    "start": "2708515",
    "end": "2715019"
  },
  {
    "text": "- Yes, great question. I should say, we're working on open-sourcing\nthis project by the way,",
    "start": "2715019",
    "end": "2720901"
  },
  {
    "text": "but it fell a little bit behind schedule. We've been using it in production\nfor about two years now, so it's actually not a new project,",
    "start": "2720902",
    "end": "2727659"
  },
  {
    "text": "and it started out as a\nsimple abstraction layer on top of Android SQLite, but we added, as our\napplication grew with RxJava",
    "start": "2727659",
    "end": "2734254"
  },
  {
    "text": "as well we added this\nreactive functionality to it. It differs from SQL\nBrite in the sense that",
    "start": "2734254",
    "end": "2740059"
  },
  {
    "text": "I actually think it's a bit more, it's a bit more powerful\nand a bit more complete as fully-functional query builder,",
    "start": "2740059",
    "end": "2748181"
  },
  {
    "text": "so I think we covered pretty much all the cases that there are. What we do not do that\nSQL Brite does is",
    "start": "2748181",
    "end": "2756076"
  },
  {
    "text": "SQL Brite basically you\ncan register a query with an observable",
    "start": "2756076",
    "end": "2761532"
  },
  {
    "text": "and it's basically like\na table observable, so whenever then the table changes, it will re-execute this query",
    "start": "2761532",
    "end": "2766849"
  },
  {
    "text": "and communicate the result back to you. This is something that\nwe don't actually support right now but we're\nbuilding, working on this.",
    "start": "2766849",
    "end": "2773189"
  },
  {
    "text": "But, yeah, other than that, it's a really like\ntotally unrelated effort",
    "start": "2773189",
    "end": "2779362"
  },
  {
    "text": "we started working on awhile ago. If you're familiar with,\nYahoo! actually put out,",
    "start": "2779362",
    "end": "2784526"
  },
  {
    "text": "and I actually forgot what it's called, but Yahoo! put out a library as well for dealing with SQLite\ndatabases on Android.",
    "start": "2784527",
    "end": "2791005"
  },
  {
    "text": "I think Propeller\ncompares a little bit more to Yahoo!'s library. Just Google it. I don't know what the name was, but, yeah.",
    "start": "2791005",
    "end": "2797553"
  },
  {
    "text": "- [Voicover] Thank you,\nand one final question. You probably saw this coming: LightCycle? - Yeah",
    "start": "2797553",
    "end": "2803311"
  },
  {
    "text": "- [Voiceover] Open-sourcing, yeah? - Yes, we're working on it. (laughter) It's like, it's a very\nsimple library as well.",
    "start": "2803311",
    "end": "2808705"
  },
  {
    "text": "It's an annotation\nprocessor that basically through a single binding step,",
    "start": "2808705",
    "end": "2814324"
  },
  {
    "text": "allows you to hook in all\nthese different classes. It's really not much.",
    "start": "2814324",
    "end": "2819479"
  },
  {
    "text": "It works similar to Dagger in the sense that it generates source code, which is the binding companion basically",
    "start": "2819479",
    "end": "2826956"
  },
  {
    "text": "to LightCycle, which is then instrumented through this binding step. Yeah, again,",
    "start": "2826956",
    "end": "2834270"
  },
  {
    "text": "we definitely want to open source this. It's just right now\nit's a question of time and priorities and stuff.",
    "start": "2834270",
    "end": "2840400"
  },
  {
    "text": "But I hope we get to this,\nlike maybe this year still. - [Voiceover] Okay, so--",
    "start": "2840400",
    "end": "2845671"
  },
  {
    "text": "- Otherwise, you can also come to me and I can show you a\nlittle bit how it works. - [Voiceover] Okay, but\nthank you very much,",
    "start": "2845671",
    "end": "2850965"
  },
  {
    "text": "and please give him a hand. (applause)",
    "start": "2850965",
    "end": "2855000"
  }
]