[
  {
    "text": "so how's everyone doing this afternoon okay I'll caffeinate it up and uh sugared up hopefully okay uh so what",
    "start": "4400",
    "end": "12040"
  },
  {
    "text": "we're going to talk about today is uh something that might be a little old for some of us um you know how many of you",
    "start": "12040",
    "end": "19720"
  },
  {
    "text": "have in the past not currently uh you know use C++ as a language oh good great how many of you",
    "start": "19720",
    "end": "27240"
  },
  {
    "text": "currently use C++ as a language okay that's usually what you know is the",
    "start": "27240",
    "end": "33120"
  },
  {
    "text": "experience um it is kind of older uh it but like everything it's it's been",
    "start": "33120",
    "end": "39680"
  },
  {
    "text": "around a long time and languages are really tools so if you're not uh currently using C++ and you haven't in",
    "start": "39680",
    "end": "46600"
  },
  {
    "text": "the past but you might be wondering you know why would you want to learn it languages are tools so learning a",
    "start": "46600",
    "end": "52920"
  },
  {
    "text": "language new languages is actually a good way of you know sort of expanding your toolbox so I hope through this to",
    "start": "52920",
    "end": "60719"
  },
  {
    "text": "sort of give you an idea of not just you know here's the language but here's kind of what the language has evolved into",
    "start": "60719",
    "end": "66360"
  },
  {
    "text": "recently here's applying it to some non-trivial kinds of projects that are still ongoing and here's some of the the",
    "start": "66360",
    "end": "72680"
  },
  {
    "text": "rough edges here's some of the good things here's some of the bad things about it and no talk on C++ is complete",
    "start": "72680",
    "end": "79479"
  },
  {
    "text": "without at least one and hopefully more uh Bjorn stra quotes uh here's one uh",
    "start": "79479",
    "end": "85479"
  },
  {
    "text": "the only two you know the only two kinds of languages the ones people complain about the ones nobody uses",
    "start": "85479",
    "end": "90520"
  },
  {
    "text": "that's pretty much true um if you think about any language can you name anyone who uses it and can you name anyone who",
    "start": "90520",
    "end": "97240"
  },
  {
    "text": "has complained about it recently in the last 24 hours so think about that nothing's quite",
    "start": "97240",
    "end": "103439"
  },
  {
    "text": "perfect oh and we're going to see that C++ is no by no means perfect So within",
    "start": "103439",
    "end": "108920"
  },
  {
    "text": "the last couple years uh there's been two projects that I've been fortunate enough to be involved with that have had",
    "start": "108920",
    "end": "114200"
  },
  {
    "text": "C++ aspects to them the first is Aaron uh and the second is reactive socket and",
    "start": "114200",
    "end": "120000"
  },
  {
    "text": "they have both used modern C++ techniques they've used C++ 11 which is",
    "start": "120000",
    "end": "125200"
  },
  {
    "text": "2011 standard and C++ uh 14 2014 standards so these are new features of",
    "start": "125200",
    "end": "131520"
  },
  {
    "text": "languages and we want to talk about what these are sort of give you an idea of where they fit uh what constitutes those",
    "start": "131520",
    "end": "138920"
  },
  {
    "text": "aspects of the language and sort of what lessons we've learned and how things have turned out and how they're how",
    "start": "138920",
    "end": "144319"
  },
  {
    "text": "they're going so the first thing is Aaron and C++ so Aaron is a truly modern",
    "start": "144319",
    "end": "149920"
  },
  {
    "text": "messaging transport my background is I am a network Pro protocol designer by",
    "start": "149920",
    "end": "155480"
  },
  {
    "text": "trade uh I've done and designed uh many different messaging transports uh and",
    "start": "155480",
    "end": "161120"
  },
  {
    "text": "protocols uh going back all the way back to the very early 90s um and so what",
    "start": "161120",
    "end": "167280"
  },
  {
    "text": "Aaron tries to do is try to try to break the cycle of most messaging systems",
    "start": "167280",
    "end": "172760"
  },
  {
    "text": "being feature bloated and complicated and try to trim it down to just a",
    "start": "172760",
    "end": "178519"
  },
  {
    "text": "transport you know that is faster than what is out there most that right now are not fast enough especially for",
    "start": "178519",
    "end": "185599"
  },
  {
    "text": "trading systems and what you want is low and predictable latency but at high",
    "start": "185599",
    "end": "190840"
  },
  {
    "text": "throughput so it is absolutely key that is predictable and we're in a new world",
    "start": "190840",
    "end": "196680"
  },
  {
    "text": "most of the messaging systems were designed in the you know later 90s if you're lucky some were even designed in",
    "start": "196680",
    "end": "202879"
  },
  {
    "text": "the later 80s and sort of things like multicore multi-socket and Cloud these are foreign to the most of these uh the",
    "start": "202879",
    "end": "210319"
  },
  {
    "text": "architectures um you're also looking at a lot of different media that has changed over the years uh the idea of",
    "start": "210319",
    "end": "217000"
  },
  {
    "text": "using IPC or shared memory as a media is somewhat new as well so Aon is trying a new approach",
    "start": "217000",
    "end": "225680"
  },
  {
    "text": "here's the team uh Martin Thompson who talked about who talked earlier Richard War Burton and myself uh we're not the",
    "start": "225680",
    "end": "231959"
  },
  {
    "text": "best looking group but you know hopefully we're not too dumb uh so what messaging tries to do do is",
    "start": "231959",
    "end": "240280"
  },
  {
    "text": "to connect Publishers to subscribers and Aaron uses the terms Channel and within",
    "start": "240280",
    "end": "246120"
  },
  {
    "text": "a channel different streams as sort of an abstraction uh to connect them to you know to one another and they happen in",
    "start": "246120",
    "end": "253000"
  },
  {
    "text": "various numbers of subscribers numbers of Publishers as well and it's a library",
    "start": "253000",
    "end": "259000"
  },
  {
    "text": "not a framework so in other words most messaging systems if you think of something like how many of you are uh",
    "start": "259000",
    "end": "264360"
  },
  {
    "text": "inflicted with a disease I call JMS okay that is a framework that's a",
    "start": "264360",
    "end": "269840"
  },
  {
    "text": "heavyweight thing that you fit yourself into that's not really what you most people want to do it's just how you know",
    "start": "269840",
    "end": "276479"
  },
  {
    "text": "things like Java messaging system has you know sort of evolved you want to be able to do have a composable design",
    "start": "276479",
    "end": "282320"
  },
  {
    "text": "where different pieces can be fitted in you know fit for purpose and if you're thinking about you",
    "start": "282320",
    "end": "288720"
  },
  {
    "text": "know a messaging transport or any type of protocol it's got to fit somewhere so this fits in the OSI layer for transport",
    "start": "288720",
    "end": "294639"
  },
  {
    "text": "for message Oran streams which means it has a certain set of criteria um it's",
    "start": "294639",
    "end": "300039"
  },
  {
    "text": "connection oriented it does provide reliability uh you know best effort reliability there is built-in flow",
    "start": "300039",
    "end": "305240"
  },
  {
    "text": "control which is one thing that is different than other protocols in this area uh there is a place for congestion",
    "start": "305240",
    "end": "310360"
  },
  {
    "text": "avoidance and control and allows uh multiplexing the architecture is",
    "start": "310360",
    "end": "316160"
  },
  {
    "text": "important especially is important to understanding s some of the C++ challenges that are involved with Aaron",
    "start": "316160",
    "end": "322160"
  },
  {
    "text": "so for example a publisher is appending to a replicated log that is being read",
    "start": "322160",
    "end": "329360"
  },
  {
    "text": "by a subscriber and this can happen in both directions and there is some sort of",
    "start": "329360",
    "end": "335319"
  },
  {
    "text": "sender which is replicating it onto a receiver and these the pieces on the",
    "start": "335319",
    "end": "340440"
  },
  {
    "text": "sides there are the actual logs themselves we have a special structure that is a shared uh memory structure",
    "start": "340440",
    "end": "347440"
  },
  {
    "text": "called a log buffer that has certain characteristics about it and there are",
    "start": "347440",
    "end": "352840"
  },
  {
    "text": "different pieces conductors for doing different Administration things and how",
    "start": "352840",
    "end": "357960"
  },
  {
    "text": "applications fit into this there is something called a media driver that sort of allows us to sort of",
    "start": "357960",
    "end": "364520"
  },
  {
    "text": "separate uh the the senders and receivers as well and to sort of give them a nice place of you know sort of",
    "start": "364520",
    "end": "372280"
  },
  {
    "text": "Separation uh you'll notice in the design if you ever look at Aon on GitHub you'll see these actual terms conductor",
    "start": "372280",
    "end": "378639"
  },
  {
    "text": "res sender receiver we believe in I actually looking at the architecture and reflecting it in the code AS directly as",
    "start": "378639",
    "end": "384560"
  },
  {
    "text": "possible and so sort of why does where does C++ fit into this well one way to",
    "start": "384560",
    "end": "390400"
  },
  {
    "text": "think about this is that those edges where the client lives are the application apis so these were all the",
    "start": "390400",
    "end": "397240"
  },
  {
    "text": "different languages kind of come together Java C C++ C uh we have go as",
    "start": "397240",
    "end": "404720"
  },
  {
    "text": "well and they all fit within that but they have some you know significant challenges and we'll get into that but",
    "start": "404720",
    "end": "411400"
  },
  {
    "text": "sort of you can sort of look at the fact that there are shared memory data structures which are actually being",
    "start": "411400",
    "end": "416479"
  },
  {
    "text": "shared between these languages IM driver is one but there",
    "start": "416479",
    "end": "421960"
  },
  {
    "text": "actually is other languages as well so the media driver currently we designed",
    "start": "421960",
    "end": "427440"
  },
  {
    "text": "it in Java initially but I say currently let's hold on to that um so that's one",
    "start": "427440",
    "end": "433720"
  },
  {
    "text": "project Aaron is a low and predictable latency High throughput messaging transport you know primarily designed",
    "start": "433720",
    "end": "441039"
  },
  {
    "text": "with financial services in mind it was sponsored by a very large US exchange",
    "start": "441039",
    "end": "446599"
  },
  {
    "text": "for Martin Thompson and I and Richard wton to produce and to put out under an Apache License um it has a C++ side to",
    "start": "446599",
    "end": "455199"
  },
  {
    "text": "it it also has other language aspects to it another project that I'm involved",
    "start": "455199",
    "end": "460639"
  },
  {
    "text": "with is called something called reactive socket now reactive socket is a protocol but let's think",
    "start": "460639",
    "end": "467520"
  },
  {
    "text": "about the application for a moment today asynchronous is the norm you know if you",
    "start": "467520",
    "end": "473120"
  },
  {
    "text": "think of node it's asynchronous you think of a lot of other uh Frameworks",
    "start": "473120",
    "end": "479000"
  },
  {
    "text": "that are out there there most of them are asynchronous if you think of messaging you know going back years and",
    "start": "479000",
    "end": "484159"
  },
  {
    "text": "years and years it's all asynchronous so it actually is today that the idea of asynchrony is the norm when you have",
    "start": "484159",
    "end": "490960"
  },
  {
    "text": "synchronous kind of calls and blocking you are restricted to the round trip time of your media whether that be",
    "start": "490960",
    "end": "498800"
  },
  {
    "text": "memory or you know Network or whatever media you're going over top of communicating with so asynchrony is a",
    "start": "498800",
    "end": "506240"
  },
  {
    "text": "mechanism and you've heard it today with a couple other talks of breaking that where you can now SE do two separations",
    "start": "506240",
    "end": "512399"
  },
  {
    "text": "you can do latency and throughput can now be separated and you can do things",
    "start": "512399",
    "end": "517560"
  },
  {
    "text": "uh at a certain latency which doesn't grow as fast as throughput if we look at how Technology's",
    "start": "517560",
    "end": "523360"
  },
  {
    "text": "gone but it's complicated so if you look at things like node it is very",
    "start": "523360",
    "end": "529680"
  },
  {
    "text": "complicated to do things like retries and errors and exceptions and everything else within that flow uh some would look",
    "start": "529680",
    "end": "537000"
  },
  {
    "text": "at it as you know call back hell and it's really it's the need for Simplicity but the tools aren't there and so what",
    "start": "537000",
    "end": "544040"
  },
  {
    "text": "you get is this lure of complexity you get this lore of I have to do this operation but I have to do it outside of",
    "start": "544040",
    "end": "549760"
  },
  {
    "text": "the thread that it would be initiated on and so you get very complicated structures that kind of start to how do",
    "start": "549760",
    "end": "557880"
  },
  {
    "text": "I handle a lot of different cases and we also think that you know so",
    "start": "557880",
    "end": "563200"
  },
  {
    "text": "that it's it's really thought of as asynchronous kind of platforms are hard to do well actually all that happens in",
    "start": "563200",
    "end": "570640"
  },
  {
    "text": "that is that they're bringing forward all the problems that you would normally have with a synchronous communication but you never solve with asynchronous",
    "start": "570640",
    "end": "576959"
  },
  {
    "text": "communication you usually just punt say I don't know how to handle that error so it's this lure of complexity but it's",
    "start": "576959",
    "end": "583279"
  },
  {
    "text": "the need for Simplicity that is Arisen well what happens is composition of",
    "start": "583279",
    "end": "589320"
  },
  {
    "text": "these things is very difficult so it's easy when you just have a you know one message coming in but now if you have a",
    "start": "589320",
    "end": "595160"
  },
  {
    "text": "message coming in followed by a potential airor condition followed by another message it can come in that that has a dependency on that that's how",
    "start": "595160",
    "end": "602120"
  },
  {
    "text": "thing in composition gets to be very difficult we do have couple different",
    "start": "602120",
    "end": "608120"
  },
  {
    "text": "ideas about how to make that easier reactive extensions is something which has come about to combat that",
    "start": "608120",
    "end": "615640"
  },
  {
    "text": "composition problem and to get rid of callback hell now it some consider that",
    "start": "615640",
    "end": "621160"
  },
  {
    "text": "it's actually trading one kind of hell for another that might be true but what it does do is it does simplify some of",
    "start": "621160",
    "end": "627519"
  },
  {
    "text": "the more common patterns into two things which can be more composable and can be",
    "start": "627519",
    "end": "632800"
  },
  {
    "text": "reused across different you know different applications there are many different languages for reactive",
    "start": "632800",
    "end": "638839"
  },
  {
    "text": "extensions started out in C in C sh but it has sort of evolved around uh you",
    "start": "638839",
    "end": "644800"
  },
  {
    "text": "know into into Java it's used throughout and there are C++ sides to this as",
    "start": "644800",
    "end": "650600"
  },
  {
    "text": "well and it all fits around the idea of the observable pattern so an observable",
    "start": "650600",
    "end": "656800"
  },
  {
    "text": "and then you have a subscription on it then you have events that come in there are challenges though reactive",
    "start": "656800",
    "end": "663839"
  },
  {
    "text": "extensions is really sort of in the area where back pressure is not something",
    "start": "663839",
    "end": "669639"
  },
  {
    "text": "which is taken care of in the normal model for reactive extensions it's just assumed to be blocking so every time an",
    "start": "669639",
    "end": "676279"
  },
  {
    "text": "event comes in it's blocking another event behind it that cannot be you know that is",
    "start": "676279",
    "end": "683800"
  },
  {
    "text": "somewhat limitating in terms of scaling up so I the idea how to do this from an",
    "start": "683800",
    "end": "689519"
  },
  {
    "text": "asynchronous perspective and push back pressure through systems um you know in a non-blocking way has to be handled the",
    "start": "689519",
    "end": "697279"
  },
  {
    "text": "other thing is is that when you have something like reactive extensions how do you actually handle the situation of",
    "start": "697279",
    "end": "702440"
  },
  {
    "text": "heterogeneous connectivity between different languages well that first problem",
    "start": "702440",
    "end": "708200"
  },
  {
    "text": "dealing with back pressure is really where reactive streams has come on and reactive streams is part of our X Java",
    "start": "708200",
    "end": "714639"
  },
  {
    "text": "20 it's it's been done in AA streams it's actually in GP 26 66 for Java under",
    "start": "714639",
    "end": "720519"
  },
  {
    "text": "Java util concurrent flow it's an interface and it adds the concept of requesting more data and being able to",
    "start": "720519",
    "end": "727279"
  },
  {
    "text": "cancel and other asynchronous things which are done within a flow so it it has actually you know quite quite a bit",
    "start": "727279",
    "end": "735040"
  },
  {
    "text": "to sort of address that now it's not perfect in fact I would change some things about reactive stream if I could",
    "start": "735040",
    "end": "742040"
  },
  {
    "text": "uh but it it is uh you know it is better than the alternative of only having blocking back pressure but it doesn't",
    "start": "742040",
    "end": "749320"
  },
  {
    "text": "solve everything because what it does do is it introduces asynchronous Concepts",
    "start": "749320",
    "end": "754639"
  },
  {
    "text": "to something which is basically blocking by nature and it sort of limit it into one address space when you break it",
    "start": "754639",
    "end": "760600"
  },
  {
    "text": "apart and now you have the ability to essentially have an asynchronous communication you can actually then",
    "start": "760600",
    "end": "766199"
  },
  {
    "text": "format that in a wire you can send it between two different systems one system can be in Java another system could be",
    "start": "766199",
    "end": "771320"
  },
  {
    "text": "in C++ this is heterogeneous connectivity so that means that you have to have",
    "start": "771320",
    "end": "777320"
  },
  {
    "text": "something which handles it and that's what react sockets is is a protocol to actually allow these systems to talk to",
    "start": "777320",
    "end": "783000"
  },
  {
    "text": "one another the reactive systems API is what is assumed there but there are",
    "start": "783000",
    "end": "788279"
  },
  {
    "text": "different implementations there's Java there's JavaScript there's C++ which is uh one thing I'll talk about there's",
    "start": "788279",
    "end": "795440"
  },
  {
    "text": "go and these actually these systems are in production Java is used at Netflix",
    "start": "795440",
    "end": "803279"
  },
  {
    "text": "you know reactive socket is used on the edge part of the Netflix API go is used",
    "start": "803279",
    "end": "809480"
  },
  {
    "text": "at a few other places uh C++ this project is going to be used by a very",
    "start": "809480",
    "end": "815120"
  },
  {
    "text": "large uh you know user of this technology so these are systems which are already being used uh and and using",
    "start": "815120",
    "end": "822600"
  },
  {
    "text": "things like reactive socket here's a question if you have a protocol like this and but it's only limited to one",
    "start": "822600",
    "end": "830519"
  },
  {
    "text": "language what would you call that can you think of any protocols that do",
    "start": "830519",
    "end": "836800"
  },
  {
    "text": "that Java serialization is one right it doesn't have to really interoperate it",
    "start": "838040",
    "end": "843839"
  },
  {
    "text": "could it but it doesn't really need under most cases right think about that is there a reason if you just have one",
    "start": "843839",
    "end": "850560"
  },
  {
    "text": "language for you to actually go through the trouble of standardizing a protocol think about that keep it in the",
    "start": "850560",
    "end": "857279"
  },
  {
    "text": "back of your mind for a little bit we'll we'll come back to it so those are the two projects and you know that the they",
    "start": "857279",
    "end": "865320"
  },
  {
    "text": "have a little bit of relation to one another there's protocols involved there's there's a few other things involved and they all both have C++",
    "start": "865320",
    "end": "873360"
  },
  {
    "text": "attached to them so what really constitutes modern C++ because that's what's in the title so if we look Scott",
    "start": "873360",
    "end": "880759"
  },
  {
    "text": "Meyers has uh you know sort of coined this term for a long time it's kind of been a moving Target okay it used to be",
    "start": "880759",
    "end": "887000"
  },
  {
    "text": "that modern C++ was C++ 98 that was Modern you know well and then it was C++",
    "start": "887000",
    "end": "893160"
  },
  {
    "text": "03 and then it was you know C++ 11 and it's C++ 14 and there's also C Plus+ 17",
    "start": "893160",
    "end": "900600"
  },
  {
    "text": "so it's kind of a moving Target whatever is you know the latest C++ is really what we consider to be modern but for",
    "start": "900600",
    "end": "907560"
  },
  {
    "text": "purposes of what we're going to talk about we're going to sort of start with C++ 11 and move you know",
    "start": "907560",
    "end": "914240"
  },
  {
    "text": "forward and think of it this way um you know another quote from bejor drrp is",
    "start": "914800",
    "end": "920600"
  },
  {
    "text": "within C+ plus is a much simpler and cleaner language struggling to get out I'd like to think that there is also",
    "start": "920600",
    "end": "926680"
  },
  {
    "text": "within Java a much simpler and more performant language that is trying to get out I'd like to think that within go",
    "start": "926680",
    "end": "933839"
  },
  {
    "text": "there's a much better language trying to get out um we can think of this for every",
    "start": "933839",
    "end": "939240"
  },
  {
    "text": "language we would that this is what we want we want actually the language designers to be struggling with making",
    "start": "939240",
    "end": "945240"
  },
  {
    "text": "things simpler with making them cleaner and C++ 11 actually does do",
    "start": "945240",
    "end": "952920"
  },
  {
    "text": "this so what is a main concept let's just take C++ 11 and go forward what",
    "start": "952920",
    "end": "959040"
  },
  {
    "text": "makes it different than a lot of the other than uh other languages before",
    "start": "959040",
    "end": "964880"
  },
  {
    "text": "it I would say and this is me but I there are others who agree that the core",
    "start": "964880",
    "end": "971040"
  },
  {
    "text": "thing here is resource ownership and lifetime now when you're thinking about",
    "start": "971040",
    "end": "977800"
  },
  {
    "text": "uh you know a systems language a native language um one thing you're thinking about a lot",
    "start": "977800",
    "end": "984240"
  },
  {
    "text": "of times is managing resources whether that be uh you know file handles um or",
    "start": "984240",
    "end": "992040"
  },
  {
    "text": "you know if you're thinking gaming you're also thinking about textures and all kinds of other things which are resources uh you may be thinking also",
    "start": "992040",
    "end": "998720"
  },
  {
    "text": "about memory that's true most most languages you know that are you know garbage collected they sort of think of",
    "start": "998720",
    "end": "1005480"
  },
  {
    "text": "memory as something you don't need to worry about until you actually realize that you actually do because you have to",
    "start": "1005480",
    "end": "1012000"
  },
  {
    "text": "release what you're using at least enough so that a cycle can be detected it isn't referenced by anything outside",
    "start": "1012000",
    "end": "1018160"
  },
  {
    "text": "of it well hold on to that for a minute so resource ownership and lifetime is one thing that C++ 11 attempts to put in",
    "start": "1018160",
    "end": "1027480"
  },
  {
    "text": "the Forefront and when that happens when the idea of a resource ownership the",
    "start": "1027480",
    "end": "1032798"
  },
  {
    "text": "lifetime of it is you know sort of given into a feature of the language then the",
    "start": "1032799",
    "end": "1038160"
  },
  {
    "text": "ideas of scope decoupling and dependency start to come into play what is the scope of an object or a resource what",
    "start": "1038160",
    "end": "1045520"
  },
  {
    "text": "coupling is related to that what other resources dependencies that come",
    "start": "1045520",
    "end": "1051000"
  },
  {
    "text": "along modern C++ has idioms uh there are a few the most prevalent is resource",
    "start": "1051000",
    "end": "1058320"
  },
  {
    "text": "acquisition is initialization r r Ai and now it permeates the whole language and",
    "start": "1058320",
    "end": "1063520"
  },
  {
    "text": "the standard Library lock guard is an example you take the lock when you enter the scope you release it when you go out",
    "start": "1063520",
    "end": "1069880"
  },
  {
    "text": "of scope unique pointer and shared pointer which are part of that resource ownership and lifetime they work the",
    "start": "1069880",
    "end": "1075960"
  },
  {
    "text": "same way when they're created you create the object when all the references to it go away it goes away that is a core",
    "start": "1075960",
    "end": "1084120"
  },
  {
    "text": "concept which has been in C++ for quite some time it's now been more codified",
    "start": "1084120",
    "end": "1090080"
  },
  {
    "text": "into the language through the standard library but by no means is it the only idiom uh pmle or private implementation",
    "start": "1090080",
    "end": "1097360"
  },
  {
    "text": "or uh pointer implementation curiously recurring template pattern erase remove",
    "start": "1097360",
    "end": "1102799"
  },
  {
    "text": "idiom um you know substitution failure is not an error uh you know if you're familiar with metaprogramming that's one",
    "start": "1102799",
    "end": "1109320"
  },
  {
    "text": "that's kind of a fairly important one um and there's there's a few more so every",
    "start": "1109320",
    "end": "1114520"
  },
  {
    "text": "language has idioms whether we use them or not Java has a whole set of idioms llang has a lot of idioms um you know",
    "start": "1114520",
    "end": "1121039"
  },
  {
    "text": "for example so but to the to the level of how an idiom has influenced a",
    "start": "1121039",
    "end": "1127679"
  },
  {
    "text": "language I don't think that something like REI can really be compared uh except there are certain things within",
    "start": "1127679",
    "end": "1133760"
  },
  {
    "text": "irang that are very close to it with that idea of those idioms the",
    "start": "1133760",
    "end": "1139200"
  },
  {
    "text": "idea of smart pointers you know has has come along these are you know there are three different types of smart pointers",
    "start": "1139200",
    "end": "1145080"
  },
  {
    "text": "the first is shared pointer which means shared ownership unique pointer which means unique ownership and weak pointer",
    "start": "1145080",
    "end": "1150440"
  },
  {
    "text": "meaning no ownership but a reference this is all you",
    "start": "1150440",
    "end": "1156679"
  },
  {
    "text": "have so everything has to fit into that into those three",
    "start": "1156760",
    "end": "1161919"
  },
  {
    "text": "things and if you're thinking about it and you know other languages you may be thinking of things like you know oh well",
    "start": "1161919",
    "end": "1169960"
  },
  {
    "text": "lambdas and function objects as well uh is another feature of modern C++ uh that was added because and this",
    "start": "1169960",
    "end": "1177559"
  },
  {
    "text": "was added actually before Java uh had lambdas um function objects have been around for quite some time uh atomics",
    "start": "1177559",
    "end": "1184320"
  },
  {
    "text": "are another uh I part of C++ 11 very important part because it introduced a",
    "start": "1184320",
    "end": "1190200"
  },
  {
    "text": "memory model to uh to C++ and these are were added as a set of",
    "start": "1190200",
    "end": "1195960"
  },
  {
    "text": "templates which are around a different set of types and some other things that were added we'll come back to these for",
    "start": "1195960",
    "end": "1201039"
  },
  {
    "text": "a moment because they'll be very important to us thread support so actually having standardized across",
    "start": "1201039",
    "end": "1206400"
  },
  {
    "text": "different uh you know across different platforms threads mutex asynchronous calls for task based parallelization uh",
    "start": "1206400",
    "end": "1212880"
  },
  {
    "text": "promises and Futures uh these were these were added the big money feature of C++",
    "start": "1212880",
    "end": "1219440"
  },
  {
    "text": "11 though was something called move construction and assignment when you actually have to",
    "start": "1219440",
    "end": "1225720"
  },
  {
    "text": "take one object pass it around the idea of pass passing ownership or passing",
    "start": "1225720",
    "end": "1230919"
  },
  {
    "text": "reference or copying those different types of things kind of bubbled up to the surface this was the performance win",
    "start": "1230919",
    "end": "1238679"
  },
  {
    "text": "or at least it was thought to be the performance win turned out that it is important but there are some",
    "start": "1238679",
    "end": "1244880"
  },
  {
    "text": "caveats when you think about moving uh you know the the idea of",
    "start": "1244880",
    "end": "1249919"
  },
  {
    "text": "moving an object versus copying it moving may not be the right term if",
    "start": "1249919",
    "end": "1257120"
  },
  {
    "text": "you're thinking about ownership give giving and taking ownership make much more sense right but the concept of",
    "start": "1257120",
    "end": "1263720"
  },
  {
    "text": "moving is really what is being done physically you're moving it from one container to another um and it really",
    "start": "1263720",
    "end": "1271480"
  },
  {
    "text": "has to do with ownership and how these things interact with copying has actually been codified very very well in",
    "start": "1271480",
    "end": "1277640"
  },
  {
    "text": "something called the rule of three originally it's now called the rule of five and then there's also the rule of",
    "start": "1277640",
    "end": "1284360"
  },
  {
    "text": "zero um and they really talk about more like ownership and how these things interact with one another they're very",
    "start": "1284360",
    "end": "1291600"
  },
  {
    "text": "well codified and you know the tool chain for c for CN C++ has changed over the years",
    "start": "1291600",
    "end": "1298720"
  },
  {
    "text": "uh we actually have quite a few nice tools like cmake uh which is used for very large projects and and a lot of",
    "start": "1298720",
    "end": "1305480"
  },
  {
    "text": "small ones we have a whole set of Google uh pieces that are very good Google task Google mock Google Benchmark um there's",
    "start": "1305480",
    "end": "1313039"
  },
  {
    "text": "also things like that have been around for a while like boost Facebook has folly which is a set of Boost Plus you",
    "start": "1313039",
    "end": "1318760"
  },
  {
    "text": "know a lot of other features um and a lot of actually pretty good pretty good pieces uh quite a plethora of different",
    "start": "1318760",
    "end": "1326360"
  },
  {
    "text": "things which are used uh within the tool chain and are fairly useful so that kind of gives the idea of",
    "start": "1326360",
    "end": "1334279"
  },
  {
    "text": "mostly you know sort of here's the set of you know C the modern C++ pieces",
    "start": "1334279",
    "end": "1339880"
  },
  {
    "text": "let's now think about what kind of lessons we're learn from both things like reactive socket and air now I'll",
    "start": "1339880",
    "end": "1345679"
  },
  {
    "text": "say up front that there's only one thing which is any specific to one to one",
    "start": "1345679",
    "end": "1350919"
  },
  {
    "text": "actual project when we get to atomics that was specific to Aaron all the other",
    "start": "1350919",
    "end": "1356600"
  },
  {
    "text": "things are things that have been encountered by both projects and I'll I'll sort of point out you know why why",
    "start": "1356600",
    "end": "1362400"
  },
  {
    "text": "some of these are a little bit harder so given this list what things do you think stand out the most to you if you're",
    "start": "1362400",
    "end": "1370120"
  },
  {
    "text": "thinking about you know a project that you would just start from scratch and then you wanted to use some of these",
    "start": "1370120",
    "end": "1376200"
  },
  {
    "text": "features what do you think would be the most problematic",
    "start": "1376200",
    "end": "1380440"
  },
  {
    "text": "whenever you have new new kind of paradigms or new ways of interaction that's always something that you know is",
    "start": "1382120",
    "end": "1387600"
  },
  {
    "text": "is is going to stand out as a as a red flag so something like some of the idiom smart pointers might be there stack",
    "start": "1387600",
    "end": "1394880"
  },
  {
    "text": "allocation has been around a long time so there shouldn't be anything there uh lambdas and function objects probably a",
    "start": "1394880",
    "end": "1400279"
  },
  {
    "text": "lot of things around that because those are all syntactically different have different kinds of tradeoffs especially",
    "start": "1400279",
    "end": "1406120"
  },
  {
    "text": "something that's supposed to be um you know fairly performance uh sensitive",
    "start": "1406120",
    "end": "1411320"
  },
  {
    "text": "atomics probably has something thread support oh yeah anytime you add a new standardized API you're probably going",
    "start": "1411320",
    "end": "1417480"
  },
  {
    "text": "to have it move construction and assignment maybe tool chain probably not",
    "start": "1417480",
    "end": "1422960"
  },
  {
    "text": "your tool chain you're dealing with new tools or tools that have evolved um so",
    "start": "1422960",
    "end": "1428159"
  },
  {
    "text": "they may or may not be issues I'll tell you that mostly tool chains are not issues they're kind of known quantities",
    "start": "1428159",
    "end": "1434120"
  },
  {
    "text": "once you use them you adapt how many of you use Maven on a regular basis",
    "start": "1434120",
    "end": "1440159"
  },
  {
    "text": "anyone like Maven what's the first rule of Maven you don't understand Maven that's",
    "start": "1440159",
    "end": "1447440"
  },
  {
    "text": "how you deal with Maven you deal with Maven by first first realizing that you'll never understand it and you'll",
    "start": "1447440",
    "end": "1452720"
  },
  {
    "text": "never agree with it once you once you realize that you can just be blissfully ignorant and do whatever you need to do",
    "start": "1452720",
    "end": "1459240"
  },
  {
    "text": "because always you realize that you're never going to know what it's going to do and you're never going to agree with it you just have to understand what it's",
    "start": "1459240",
    "end": "1464320"
  },
  {
    "text": "trying to do that's most most tool chains",
    "start": "1464320",
    "end": "1469760"
  },
  {
    "text": "so let's take some of these lessons we're going to specifically look at raai and smart pointers my best",
    "start": "1469760",
    "end": "1478159"
  },
  {
    "text": "advice for dealing with this is basically give in to Smart pointers",
    "start": "1478159",
    "end": "1485399"
  },
  {
    "text": "don't try to fight it you have three different types fit everything into it",
    "start": "1485399",
    "end": "1490840"
  },
  {
    "text": "try to avoid using any raw pointers you'll find that you know the",
    "start": "1490840",
    "end": "1496120"
  },
  {
    "text": "dark side ain't so bad but it does because it does a couple",
    "start": "1496120",
    "end": "1501919"
  },
  {
    "text": "different things that I don't think we intentional but are good okay well let's go back for a",
    "start": "1501919",
    "end": "1508720"
  },
  {
    "text": "moment we talked about there being three different things shared ownership unique ownership and",
    "start": "1508720",
    "end": "1515080"
  },
  {
    "text": "reference how do we deal with Cycles how many of you have have dealt with Cycles",
    "start": "1515080",
    "end": "1520520"
  },
  {
    "text": "in other C++ or C applications before where you have to figure out some way of handling Cycles within them it's a",
    "start": "1520520",
    "end": "1527480"
  },
  {
    "text": "little tricky right it may or may not be easy to do and you may end up doing it here's some of the",
    "start": "1527480",
    "end": "1533120"
  },
  {
    "text": "ways that you can deal with it one weak pointer is a reference but you can use",
    "start": "1533120",
    "end": "1538200"
  },
  {
    "text": "it to validate if it's still a valid reference or not there's something called enable",
    "start": "1538200",
    "end": "1543520"
  },
  {
    "text": "shared from this which for certain types of Cycles are is a very easy way to deal with it in other words you can say the",
    "start": "1543520",
    "end": "1549760"
  },
  {
    "text": "ownership is the actual object itself and that can be then shared for a particular period of time or uh until it",
    "start": "1549760",
    "end": "1557520"
  },
  {
    "text": "gets to a certain certain maturity or its lifetime that can solve certain types of Cycles you can design them",
    "start": "1557520",
    "end": "1565480"
  },
  {
    "text": "out most gaming engines have tremendous Cycles how do they deal with it some",
    "start": "1565480",
    "end": "1572840"
  },
  {
    "text": "design it out some use different techniques in IND Direction hiding objects and references to textures",
    "start": "1572840",
    "end": "1580039"
  },
  {
    "text": "behind a lookup table common technique certain large gaming engines do this",
    "start": "1580039",
    "end": "1586240"
  },
  {
    "text": "others you know just they use other ways to get rid of the",
    "start": "1586240",
    "end": "1592320"
  },
  {
    "text": "cycle RCU recopy update quesence State based Reclamation or other techniques",
    "start": "1592320",
    "end": "1599039"
  },
  {
    "text": "RCU used in a Linux kernel a lot of the thing reasons why you come up with",
    "start": "1599039",
    "end": "1604679"
  },
  {
    "text": "Cycles is because of the relationships and dependencies that are there some of",
    "start": "1604679",
    "end": "1609720"
  },
  {
    "text": "those are not truly your responsibility deferred destruction is a",
    "start": "1609720",
    "end": "1617039"
  },
  {
    "text": "way of handling that that it is garbage collection it is a form of garbage collection so you can deal with Cycles",
    "start": "1617039",
    "end": "1624559"
  },
  {
    "text": "now the last one there deferred to unorder destruction is Herb suter's sort of experiment of providing a GC like",
    "start": "1624559",
    "end": "1632480"
  },
  {
    "text": "ability within the runtime and it is being looked at for",
    "start": "1632480",
    "end": "1637520"
  },
  {
    "text": "things like C++ 17 and greater so there are many different ways",
    "start": "1637520",
    "end": "1642840"
  },
  {
    "text": "to deal with Cycles this is not unique to you know to Modern C++",
    "start": "1642840",
    "end": "1650159"
  },
  {
    "text": "what so Cycles aside having just those three types of",
    "start": "1650720",
    "end": "1656000"
  },
  {
    "text": "sort of ownership models makes coupling explicit because that's the only ways",
    "start": "1656000",
    "end": "1662360"
  },
  {
    "text": "that you have to look at each to look at other objects that are coupled the scoping becomes extremely explicit",
    "start": "1662360",
    "end": "1669039"
  },
  {
    "text": "because now it is the lifetime of that shared pointer that unique pointer um",
    "start": "1669039",
    "end": "1674200"
  },
  {
    "text": "and all the others that are pointing to it you have explicit dependencies as well that start coming out the reason",
    "start": "1674200",
    "end": "1681600"
  },
  {
    "text": "that it sort of becomes extremely explicit is you have to think about",
    "start": "1681600",
    "end": "1686760"
  },
  {
    "text": "using them it's not simply something that just kind of gets generated for you what's the difference between unique",
    "start": "1686760",
    "end": "1693720"
  },
  {
    "text": "pointer and Shar pointer unique ownership versus shared when do I use one versus the other why would I use a a",
    "start": "1693720",
    "end": "1701039"
  },
  {
    "text": "weak pointer to it and I have to validate it every time I have it used and then inflate it to a shared",
    "start": "1701039",
    "end": "1706440"
  },
  {
    "text": "pointer it makes all these relationships a lot more concrete and a lot more",
    "start": "1706440",
    "end": "1713279"
  },
  {
    "text": "explicit and sort of as the Journey of this because originally you start this out and you're like ah okay you start",
    "start": "1713279",
    "end": "1720440"
  },
  {
    "text": "thinking about things that you didn't think about before the ownership in lifetime um is something that you might",
    "start": "1720440",
    "end": "1726799"
  },
  {
    "text": "have thought of before but now you can't hide from it so if you come from other languages",
    "start": "1726799",
    "end": "1734000"
  },
  {
    "text": "this seems like a burden because you might have garbage collection to sort of handle that for you or to hide it but",
    "start": "1734000",
    "end": "1743120"
  },
  {
    "text": "hiding complexity is not really dealing with complexity it's basically just putting it off until something else",
    "start": "1743120",
    "end": "1748240"
  },
  {
    "text": "happens in certain cases that's the right way to handle it but not in",
    "start": "1748240",
    "end": "1753279"
  },
  {
    "text": "everyone re has that other part of it which is when that resource is given up",
    "start": "1753279",
    "end": "1758640"
  },
  {
    "text": "it is given up as quickly as possible it doesn't just linger around",
    "start": "1758640",
    "end": "1764039"
  },
  {
    "text": "until someone needs it there are actually within Aaron instances where",
    "start": "1764039",
    "end": "1769720"
  },
  {
    "text": "the Java side cannot rely on GC to just decide that it wants to kick in so we've",
    "start": "1769720",
    "end": "1777440"
  },
  {
    "text": "had to go in with reflection grab a function and then explicitly call it because we can't wait for that to be",
    "start": "1777440",
    "end": "1784880"
  },
  {
    "text": "done by the by the garbage collector really when you think about",
    "start": "1784880",
    "end": "1790080"
  },
  {
    "text": "coupling scope and dependency and you look at the structure of any project it speaks to the quality of it if you see a",
    "start": "1790080",
    "end": "1797399"
  },
  {
    "text": "lot of you know just shared pointer used everywhere and things that are you know definitely circular but they're using",
    "start": "1797399",
    "end": "1803760"
  },
  {
    "text": "shared pointer between them that's probably a big red flag that speaks to the quality of it but you got to build",
    "start": "1803760",
    "end": "1810440"
  },
  {
    "text": "quality in and it where does quality start quality starts with",
    "start": "1810440",
    "end": "1815720"
  },
  {
    "text": "requirements originally my career started by being a researcher for NASA on software quality and I can tell you",
    "start": "1815720",
    "end": "1822960"
  },
  {
    "text": "that any problem that you find in requirements the sooner you address it the less work you have later on so you",
    "start": "1822960",
    "end": "1830480"
  },
  {
    "text": "build quality in at the start so looking at object relationships and entity relationships and looking at explicitly",
    "start": "1830480",
    "end": "1836960"
  },
  {
    "text": "making coupling in the scope and the dependencies right there in front of you",
    "start": "1836960",
    "end": "1842200"
  },
  {
    "text": "has a tremendous benefit to you in fact it has such a benefit that",
    "start": "1842200",
    "end": "1847279"
  },
  {
    "text": "we actually have things now that their main advantage is the fact that they enforce decoupling and isolation what",
    "start": "1847279",
    "end": "1854120"
  },
  {
    "text": "does this it's the best thing about micr Services we have that enforced",
    "start": "1854120",
    "end": "1861559"
  },
  {
    "text": "decoupling of the of different components and that asynchronous binary boundary between those components is",
    "start": "1861559",
    "end": "1868600"
  },
  {
    "text": "actually one of the best things about microservices it forces us as designers as Architects to think about those",
    "start": "1868600",
    "end": "1874399"
  },
  {
    "text": "systems and to we can't make them tightly coupled in the traditional way",
    "start": "1874399",
    "end": "1880120"
  },
  {
    "text": "can we still couple them yes we can still make them very dependent but it's now much more explicit the same kind of",
    "start": "1880120",
    "end": "1886919"
  },
  {
    "text": "thing if you think about step back about this for a moment what what is more important",
    "start": "1886919",
    "end": "1893840"
  },
  {
    "text": "what a language provides or what a language takes away what have we seen with things like",
    "start": "1893840",
    "end": "1899919"
  },
  {
    "text": "going rust have they added a lot of new things",
    "start": "1899919",
    "end": "1905799"
  },
  {
    "text": "or have they restricted what we can do in a lot of cases they have added nice",
    "start": "1905799",
    "end": "1911240"
  },
  {
    "text": "features things that we want to them they've also you know rust especially as",
    "start": "1911240",
    "end": "1916559"
  },
  {
    "text": "an example where it has said no no you can't share between threads no no no you can't do that it's provided isolation so",
    "start": "1916559",
    "end": "1925000"
  },
  {
    "text": "what languages take away sometimes can be just as important or maybe even more important than what they",
    "start": "1925000",
    "end": "1931720"
  },
  {
    "text": "provide so here's here's some you know when thinking about the sort of scope",
    "start": "1931720",
    "end": "1937600"
  },
  {
    "text": "and dependency and coupling the idea that you're restricted to just those three types of ownership models and how",
    "start": "1937600",
    "end": "1943159"
  },
  {
    "text": "they interact deal with it upfront it pays off massively later and basically it looks sort of like this initially it",
    "start": "1943159",
    "end": "1950480"
  },
  {
    "text": "hurts and it trying to wrap your head around exactly how they should be but what happens in the end is you get",
    "start": "1950480",
    "end": "1958360"
  },
  {
    "text": "better at it with Aaron which was the first project it was a little twisty it",
    "start": "1958360",
    "end": "1965360"
  },
  {
    "text": "was not quite what we wanted it wasn't right and then we kind of gave in and we",
    "start": "1965360",
    "end": "1971639"
  },
  {
    "text": "saw oh okay this looks better with reactive socket it was do an inter ation",
    "start": "1971639",
    "end": "1978200"
  },
  {
    "text": "that doesn't look right do an iteration that doesn't really look right do a little iteration well that's better but that's not you know good and after few",
    "start": "1978200",
    "end": "1985519"
  },
  {
    "text": "more iterations it's gotten better is it where we would want it no but it's much better than it was so it's that",
    "start": "1985519",
    "end": "1992919"
  },
  {
    "text": "iterative making it better each time and you notice different relations that you didn't",
    "start": "1992919",
    "end": "1999919"
  },
  {
    "text": "previously so smart pointers are the thing that is for a lot of projects something that",
    "start": "2000320",
    "end": "2007279"
  },
  {
    "text": "is initially struggled with the sooner you give in and you say this is what I have to deal with and this is sort of",
    "start": "2007279",
    "end": "2013760"
  },
  {
    "text": "how I have to think about it and you look at it explicitly things get a little bit better stack allocation's",
    "start": "2013760",
    "end": "2019240"
  },
  {
    "text": "been around you know forever and it's and it is a part of our AI um and sort",
    "start": "2019240",
    "end": "2026720"
  },
  {
    "text": "of whenever I talk to uh people who in the Java community and I do a lot of I",
    "start": "2026720",
    "end": "2034279"
  },
  {
    "text": "do a lot of java um usually when I point out the stack ication is great why",
    "start": "2034279",
    "end": "2039399"
  },
  {
    "text": "doesn't Java let us control the stack explicitly and the the answer usually",
    "start": "2039399",
    "end": "2044519"
  },
  {
    "text": "starts like this it's not needed because have Escape analysis have value",
    "start": "2044519",
    "end": "2051240"
  },
  {
    "text": "types input whatever kind of other thing here and the the argument usually goes",
    "start": "2051240",
    "end": "2056720"
  },
  {
    "text": "well Escape analysis you know what the answer to escape analysis is almost every time it escaped it'd be the worst",
    "start": "2056720",
    "end": "2063079"
  },
  {
    "text": "prison in the world because everything escapes analysis the default answer is it",
    "start": "2063079",
    "end": "2068440"
  },
  {
    "text": "escapes so you can't really get what you would want from it value types that's",
    "start": "2068440",
    "end": "2074560"
  },
  {
    "text": "one small use of uh you know of of Stack allocation and it's not even a really",
    "start": "2074560",
    "end": "2079839"
  },
  {
    "text": "good use of Stack allocation value types have other advantages but trying to say that you",
    "start": "2079839",
    "end": "2085599"
  },
  {
    "text": "don't need stack allocation because you have value types is kind of like this and then you keep going and and I I",
    "start": "2085599",
    "end": "2093560"
  },
  {
    "text": "feel a little bit more like that you know it's like and really what this rils down is stack allocation is a mechanism",
    "start": "2093560",
    "end": "2099720"
  },
  {
    "text": "it's not a set of features right you're not going to say that you don't need stack allocation because you have you",
    "start": "2099720",
    "end": "2105880"
  },
  {
    "text": "know garbage collection that doesn't that is one",
    "start": "2105880",
    "end": "2111320"
  },
  {
    "text": "feature but it's not the mechanism the mechanism is important here's a use of Stack",
    "start": "2111320",
    "end": "2117920"
  },
  {
    "text": "allocation that has nothing to do with uh any of the things that were mentioned previously it's basically making a",
    "start": "2117920",
    "end": "2124800"
  },
  {
    "text": "function object storing the state of on the stack and then passing it into another",
    "start": "2124800",
    "end": "2130920"
  },
  {
    "text": "function this can be very very low cost deferred or conditional execution based",
    "start": "2130920",
    "end": "2136400"
  },
  {
    "text": "on that function you can do this before you could do you know you could do this back",
    "start": "2136400",
    "end": "2141920"
  },
  {
    "text": "in 9596 and it's a nice simple thing to do",
    "start": "2141920",
    "end": "2147960"
  },
  {
    "text": "it also is very efficient can you replicate this in Java not if it's capturing which it's going to capture if",
    "start": "2147960",
    "end": "2155440"
  },
  {
    "text": "I'm calling this 100 million times it's going to allocate it's going to then run the GC so you can't quite get it it sort",
    "start": "2155440",
    "end": "2163280"
  },
  {
    "text": "of loses its main reason to exist move construction and",
    "start": "2163280",
    "end": "2169800"
  },
  {
    "text": "assignment so this was the big money feature of C++ 11 you would think",
    "start": "2169800",
    "end": "2175280"
  },
  {
    "text": "everything now uses move construction when it when it's appropriate and here's the best",
    "start": "2175280",
    "end": "2182640"
  },
  {
    "text": "advice move construction and assignment is much more than you think um moving an object transferring",
    "start": "2185400",
    "end": "2192720"
  },
  {
    "text": "ownership Works in a lot of situations so yes using it when it is appropriate",
    "start": "2192720",
    "end": "2198160"
  },
  {
    "text": "is great but sometimes it's even better to copy the idea that you transfer",
    "start": "2198160",
    "end": "2204720"
  },
  {
    "text": "ownership does require that there is a little bit of synchronization and when you're just doing something like moving",
    "start": "2204720",
    "end": "2210000"
  },
  {
    "text": "it from one thread to another a move is not the right one you would rather have something which is copied and it's do",
    "start": "2210000",
    "end": "2216800"
  },
  {
    "text": "you actually even have to transfer ownership that's another question here's another way that things are really kind",
    "start": "2216800",
    "end": "2222800"
  },
  {
    "text": "of interesting is optimation interactions SSO is short string optimization it turns out that strings",
    "start": "2222800",
    "end": "2230280"
  },
  {
    "text": "that are short have a lot of optimizations around them in fact 24 bytes of a string is dedicated for just",
    "start": "2230280",
    "end": "2237480"
  },
  {
    "text": "short strings so you don't have to allocate anymore you just allocate the string boom you do something with it as long as it's less than 24 characters",
    "start": "2237480",
    "end": "2243280"
  },
  {
    "text": "you're great why why in the world they they pick 24 I do not know but 24 turns",
    "start": "2243280",
    "end": "2248560"
  },
  {
    "text": "out to be a great number how do you move a statically allocated 24 bytes of memory the answer",
    "start": "2248560",
    "end": "2256200"
  },
  {
    "text": "is you don't you copy it so that move looks exactly like a copy so how do you get the optimizations",
    "start": "2256200",
    "end": "2263119"
  },
  {
    "text": "that you would want from the move you",
    "start": "2263119",
    "end": "2267760"
  },
  {
    "text": "don't so and there are other optimizations like copy allion where it's not where it looks like a copy but",
    "start": "2268880",
    "end": "2275400"
  },
  {
    "text": "the actual optimizers looked at it and said nope don't need a copy and so you'd",
    "start": "2275400",
    "end": "2281160"
  },
  {
    "text": "lose out on some of that because move has not been optimized as much as copy has and the other question is when you",
    "start": "2281160",
    "end": "2287400"
  },
  {
    "text": "have to do it why why are you transferring ownership a lot of times you may not",
    "start": "2287400",
    "end": "2292839"
  },
  {
    "text": "actually you know need to transfer the ownership the next one is",
    "start": "2292839",
    "end": "2299599"
  },
  {
    "text": "atomics and if any of you have seen the movie Dune this may make sense if you haven't it's probably Patrick Stewart in",
    "start": "2299599",
    "end": "2305240"
  },
  {
    "text": "some sort of uniform let's go back to Aaron for a moment so",
    "start": "2305240",
    "end": "2310359"
  },
  {
    "text": "Aaron with the C++ pieces uh sort of lives around the clients but all those",
    "start": "2310359",
    "end": "2317079"
  },
  {
    "text": "different uh different interactions like with the log buffer the ring buffer and the broadcast buffers those are all",
    "start": "2317079",
    "end": "2322560"
  },
  {
    "text": "shared memory Atomic operations which have ordering requirements what aarin does at its",
    "start": "2322560",
    "end": "2329000"
  },
  {
    "text": "heart is is replicating a persistent lock of messages it has a file and it has",
    "start": "2329000",
    "end": "2334560"
  },
  {
    "text": "ordered and atomic operations which are done in memory on those items the",
    "start": "2334560",
    "end": "2339880"
  },
  {
    "text": "different terms and the log metadata I don't expect you to real realize what a",
    "start": "2339880",
    "end": "2345119"
  },
  {
    "text": "term is or what the log metadata is just realize that within this file which is mapped into memory there are ordered an",
    "start": "2345119",
    "end": "2351520"
  },
  {
    "text": "atomic operations which are done all over it but that's not the only thing the concept of a position within that",
    "start": "2351520",
    "end": "2358359"
  },
  {
    "text": "log is a unique identification of the bik Publishers senders subscribers uh",
    "start": "2358359",
    "end": "2364599"
  },
  {
    "text": "and receivers all keep position counters these are key to flow control and",
    "start": "2364599",
    "end": "2370599"
  },
  {
    "text": "monitoring they have you know St statistics and position counters accessible and Shar memory which means",
    "start": "2370599",
    "end": "2376000"
  },
  {
    "text": "that accessing them updating them reading them has Atomic and ordered operations associated with them so if",
    "start": "2376000",
    "end": "2383880"
  },
  {
    "text": "you're going to have you know uh something like a media driver or different applications interacting with one another they have to have the same",
    "start": "2383880",
    "end": "2391920"
  },
  {
    "text": "sort of ordering semantics and everything else these are challenges",
    "start": "2391920",
    "end": "2398720"
  },
  {
    "text": "here's the challenges in using St atomic size and layout and the memory",
    "start": "2398720",
    "end": "2406440"
  },
  {
    "text": "model C++ 11 to Java these are two very big challenges the first is Size",
    "start": "2406440",
    "end": "2412880"
  },
  {
    "text": "Matters Size Matters an awful lot if your integer has padded zeros in the",
    "start": "2413880",
    "end": "2419720"
  },
  {
    "text": "front of it and on one side and the other side doesn't understand that there's padding there is that a problem yep it's not the",
    "start": "2419720",
    "end": "2428319"
  },
  {
    "text": "same size um what is your integer 32bit sign 32-bit",
    "start": "2428319",
    "end": "2436680"
  },
  {
    "text": "unsign it turns out that atomics within C++ 11 were not designed for arbitrary memory access they were actually",
    "start": "2436680",
    "end": "2443119"
  },
  {
    "text": "designed for members of a class that could control their own layout and everything else and they don't have to",
    "start": "2443119",
    "end": "2450720"
  },
  {
    "text": "be the same size is the type so your int on some systems is 32 on others might be",
    "start": "2450720",
    "end": "2456319"
  },
  {
    "text": "64 so it's only really concerned with the",
    "start": "2456319",
    "end": "2461599"
  },
  {
    "text": "order of operations it's not concerned with the size so interoperability with the the",
    "start": "2461599",
    "end": "2468680"
  },
  {
    "text": "Java memory model is hard from a size per performance but it's also different",
    "start": "2468680",
    "end": "2473960"
  },
  {
    "text": "from a memory order memory order is fit for purpose in other words um the memory order that you",
    "start": "2473960",
    "end": "2482440"
  },
  {
    "text": "use within C++ 11 infers a particular type of semantic",
    "start": "2482440",
    "end": "2487880"
  },
  {
    "text": "that semantic is just ever so slightly different from java just enough that",
    "start": "2487880",
    "end": "2493800"
  },
  {
    "text": "there are is less control that you can enforce you can't you can make it kind",
    "start": "2493800",
    "end": "2499640"
  },
  {
    "text": "of work if the size would work but memory order is sort of a little bit",
    "start": "2499640",
    "end": "2505480"
  },
  {
    "text": "tricky to do when you're interacting with other things which has just slightly different semantics so what",
    "start": "2505480",
    "end": "2510839"
  },
  {
    "text": "would we do well luckily we had a contributor that took the initiative",
    "start": "2510839",
    "end": "2516359"
  },
  {
    "text": "went through the Jud the jvm code looked at the actual instructions which are emitted and how they are basically then",
    "start": "2516359",
    "end": "2523040"
  },
  {
    "text": "kept from being reordered and basically allowed us to use that as a set um of",
    "start": "2523040",
    "end": "2528800"
  },
  {
    "text": "atomic in you know Atomic operations that are sort of compatible so it looks",
    "start": "2528800",
    "end": "2534319"
  },
  {
    "text": "like the same you know code the same assembly so it has the same uh",
    "start": "2534319",
    "end": "2540640"
  },
  {
    "text": "additionally it has also the same compiler restrictions of moving certain code in certain directions as well and",
    "start": "2540640",
    "end": "2547880"
  },
  {
    "text": "then I took that and then sort of went with it and refined it and still refining it there's one there's one type",
    "start": "2547880",
    "end": "2554920"
  },
  {
    "text": "that's still not right volatile oh it's put volatile still not right um that's a",
    "start": "2554920",
    "end": "2562640"
  },
  {
    "text": "challenge looking at it up front we kind of identified that this was a potential area and how to deal with it we went",
    "start": "2562640",
    "end": "2568599"
  },
  {
    "text": "through various uh different iterations to make it to make it work so wrapping up sort of covered",
    "start": "2568599",
    "end": "2576400"
  },
  {
    "text": "different things the things that you would normally think of that were on that list that weren't problems things like thread functions not problems at",
    "start": "2576400",
    "end": "2582640"
  },
  {
    "text": "all tool chains not problems at all um stack allocation wasn't really a",
    "start": "2582640",
    "end": "2588319"
  },
  {
    "text": "problem it was just something which was leveraged it it really isn't that that that different but it is something which",
    "start": "2588319",
    "end": "2594800"
  },
  {
    "text": "does change you know sort of the way that you think about apis and object ownership because it does have an",
    "start": "2594800",
    "end": "2601480"
  },
  {
    "text": "effect but wrapping up think of languages always think of them as tools",
    "start": "2601480",
    "end": "2607920"
  },
  {
    "text": "think about fit for purpose and I'm not here to sort of say that you should be using C++ you know",
    "start": "2607920",
    "end": "2614559"
  },
  {
    "text": "what you need to do you should realize if C++ is the right tool for it or not",
    "start": "2614559",
    "end": "2620280"
  },
  {
    "text": "and figure out you know if that is going to be you know sort of go into that with your eyes open does it work for what",
    "start": "2620280",
    "end": "2626640"
  },
  {
    "text": "you're trying to do is it fit for that purpose and add that to your toolbox you should always be thinking about a",
    "start": "2626640",
    "end": "2632559"
  },
  {
    "text": "language as something which is a tool if if it has",
    "start": "2632559",
    "end": "2637760"
  },
  {
    "text": "it's just so happens that languages are tools that can be used in a lot of different ways so think of it that way",
    "start": "2637760",
    "end": "2643760"
  },
  {
    "text": "and the other thing is you know don't think too much about a",
    "start": "2643760",
    "end": "2649319"
  },
  {
    "text": "language and categorize it as just one thing because there's a lot of systems",
    "start": "2649319",
    "end": "2654599"
  },
  {
    "text": "out there that you know basically are been put in some awful languages um you",
    "start": "2654599",
    "end": "2660200"
  },
  {
    "text": "know and and there's a lot of other beautiful languages that simply just haven't been exercised within within in",
    "start": "2660200",
    "end": "2667520"
  },
  {
    "text": "really complicated domains so don't really think about the language so much as you know does it meet what you're",
    "start": "2667520",
    "end": "2674599"
  },
  {
    "text": "trying to do and do this",
    "start": "2674599",
    "end": "2679559"
  },
  {
    "text": "too so Aaron is an example of this um taking on a new idea when you've done it",
    "start": "2679800",
    "end": "2686760"
  },
  {
    "text": "several times both Martin and I have done messaging systems several times so doing it in a different way we didn't",
    "start": "2686760",
    "end": "2693160"
  },
  {
    "text": "know if it was going to succeed or not luckily it has but you know we went into into it thinking this would be",
    "start": "2693160",
    "end": "2699079"
  },
  {
    "text": "interesting uh reactive socket is this would be interesting if this works then",
    "start": "2699079",
    "end": "2704440"
  },
  {
    "text": "it provides something which is sorely needed to simplify you know logic",
    "start": "2704440",
    "end": "2709520"
  },
  {
    "text": "composition and do that across languages that's pretty cool so don't and then say",
    "start": "2709520",
    "end": "2715839"
  },
  {
    "text": "okay well we'll do this in C++ too okay all right what does that mean so don't",
    "start": "2715839",
    "end": "2721760"
  },
  {
    "text": "be afraid to try the try new things and look at look at things from that perspective here's a couple links where",
    "start": "2721760",
    "end": "2727359"
  },
  {
    "text": "you can you can look at both of these um I would say that terms of maturity",
    "start": "2727359",
    "end": "2733160"
  },
  {
    "text": "Aaron's C++ side is much more mature than the reactive socket side reactive socket side is newer by quite a quite",
    "start": "2733160",
    "end": "2740720"
  },
  {
    "text": "quite a while probably a year or more and it is still undergoing some massive",
    "start": "2740720",
    "end": "2746040"
  },
  {
    "text": "changes but freely would love to have feedback and things like that and but it's not too far from being you know",
    "start": "2746040",
    "end": "2752280"
  },
  {
    "text": "from being actually in production and with that do you have any questions question",
    "start": "2752280",
    "end": "2759160"
  },
  {
    "text": "s",
    "start": "2763040",
    "end": "2766040"
  }
]