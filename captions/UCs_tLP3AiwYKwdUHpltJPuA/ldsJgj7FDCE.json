[
  {
    "start": "0",
    "end": "152000"
  },
  {
    "text": "hello everyone I'm ningin I am a",
    "start": "659",
    "end": "3899"
  },
  {
    "text": "research associate from the University",
    "start": "3899",
    "end": "5520"
  },
  {
    "text": "of Cambridge today I'm going to present",
    "start": "5520",
    "end": "8340"
  },
  {
    "text": "staging with class A specification of",
    "start": "8340",
    "end": "10860"
  },
  {
    "text": "typed template task",
    "start": "10860",
    "end": "13860"
  },
  {
    "text": "computer development has come a long way",
    "start": "13860",
    "end": "17220"
  },
  {
    "text": "nowadays it is way easier than six years",
    "start": "17220",
    "end": "20699"
  },
  {
    "text": "ago to build a program",
    "start": "20699",
    "end": "22740"
  },
  {
    "text": "the advances on programming language",
    "start": "22740",
    "end": "24900"
  },
  {
    "text": "design and implementations also allow us",
    "start": "24900",
    "end": "27840"
  },
  {
    "text": "to write high-level programs easily like",
    "start": "27840",
    "end": "30539"
  },
  {
    "text": "web development machine learning",
    "start": "30539",
    "end": "32758"
  },
  {
    "text": "programs in the leader",
    "start": "32759",
    "end": "36140"
  },
  {
    "text": "while writing those high-level programs",
    "start": "36239",
    "end": "39239"
  },
  {
    "text": "we often rely on compilers to generate",
    "start": "39239",
    "end": "42600"
  },
  {
    "text": "efficient low-level code for us",
    "start": "42600",
    "end": "45059"
  },
  {
    "text": "however the implementation of compilers",
    "start": "45059",
    "end": "48660"
  },
  {
    "text": "is usually a black box",
    "start": "48660",
    "end": "50940"
  },
  {
    "text": "many compiler optimization relies on",
    "start": "50940",
    "end": "53640"
  },
  {
    "text": "heuristics and it is almost impossible",
    "start": "53640",
    "end": "56460"
  },
  {
    "text": "to tell by inspection how a program will",
    "start": "56460",
    "end": "58920"
  },
  {
    "text": "be optimized",
    "start": "58920",
    "end": "60420"
  },
  {
    "text": "tuning program performance requires lots",
    "start": "60420",
    "end": "63480"
  },
  {
    "text": "of expertise efforts as well as time",
    "start": "63480",
    "end": "67979"
  },
  {
    "text": "so the question we ask here is how can",
    "start": "67979",
    "end": "71880"
  },
  {
    "text": "we write high level programs with",
    "start": "71880",
    "end": "73740"
  },
  {
    "text": "predictable low-level efficiency",
    "start": "73740",
    "end": "77340"
  },
  {
    "text": "we answer this question by multi-stage",
    "start": "77340",
    "end": "79799"
  },
  {
    "text": "programming",
    "start": "79799",
    "end": "81240"
  },
  {
    "text": "multi-stage programming is an",
    "start": "81240",
    "end": "83460"
  },
  {
    "text": "established technique for generating",
    "start": "83460",
    "end": "85259"
  },
  {
    "text": "efficient code with predictable",
    "start": "85259",
    "end": "87119"
  },
  {
    "text": "performance",
    "start": "87119",
    "end": "88259"
  },
  {
    "text": "essentially while normal program takes",
    "start": "88259",
    "end": "91200"
  },
  {
    "text": "some input and produces some output",
    "start": "91200",
    "end": "93920"
  },
  {
    "text": "multi-stage programming device",
    "start": "93920",
    "end": "96000"
  },
  {
    "text": "compilation into multiple stages",
    "start": "96000",
    "end": "98520"
  },
  {
    "text": "in each stage the program is given some",
    "start": "98520",
    "end": "101460"
  },
  {
    "text": "input of that specific stage and is",
    "start": "101460",
    "end": "104460"
  },
  {
    "text": "partially evaluated according to the",
    "start": "104460",
    "end": "106619"
  },
  {
    "text": "input to generate efficient code for",
    "start": "106619",
    "end": "108900"
  },
  {
    "text": "later stages",
    "start": "108900",
    "end": "111560"
  },
  {
    "text": "multi-stage programming has been",
    "start": "112380",
    "end": "114540"
  },
  {
    "text": "pioneered by Nielsen and Nielsen with",
    "start": "114540",
    "end": "116939"
  },
  {
    "text": "their work on two level functional",
    "start": "116939",
    "end": "118619"
  },
  {
    "text": "languages",
    "start": "118619",
    "end": "119820"
  },
  {
    "text": "since then we have seen support for",
    "start": "119820",
    "end": "122280"
  },
  {
    "text": "multiple multi-stage programming in many",
    "start": "122280",
    "end": "124380"
  },
  {
    "text": "languages including metaml template",
    "start": "124380",
    "end": "127740"
  },
  {
    "text": "Haskell made out of camel and libraries",
    "start": "127740",
    "end": "130860"
  },
  {
    "text": "Frameworks and implementations in Scala",
    "start": "130860",
    "end": "133500"
  },
  {
    "text": "as well as today's folks typed template",
    "start": "133500",
    "end": "136319"
  },
  {
    "text": "High School",
    "start": "136319",
    "end": "137780"
  },
  {
    "text": "there is also lots of work demonstrating",
    "start": "137780",
    "end": "140819"
  },
  {
    "text": "the significant performance Improvement",
    "start": "140819",
    "end": "143000"
  },
  {
    "text": "using multi-stage programming for",
    "start": "143000",
    "end": "145800"
  },
  {
    "text": "example in passing generic programming",
    "start": "145800",
    "end": "148440"
  },
  {
    "text": "as well as in database",
    "start": "148440",
    "end": "152000"
  },
  {
    "start": "152000",
    "end": "204000"
  },
  {
    "text": "the key idea in multi-stage programming",
    "start": "152760",
    "end": "155879"
  },
  {
    "text": "is that it provides a type of code that",
    "start": "155879",
    "end": "159239"
  },
  {
    "text": "represents information available in",
    "start": "159239",
    "end": "161400"
  },
  {
    "text": "later stage",
    "start": "161400",
    "end": "162599"
  },
  {
    "text": "and there are two standard stage",
    "start": "162599",
    "end": "164640"
  },
  {
    "text": "annotations that allow construction and",
    "start": "164640",
    "end": "167099"
  },
  {
    "text": "combination of program fragment",
    "start": "167099",
    "end": "169860"
  },
  {
    "text": "a quotation expression is a",
    "start": "169860",
    "end": "172440"
  },
  {
    "text": "representation of the expression e as",
    "start": "172440",
    "end": "174959"
  },
  {
    "text": "program a fragment in a future stage",
    "start": "174959",
    "end": "178500"
  },
  {
    "text": "so if e is of type int then the",
    "start": "178500",
    "end": "181140"
  },
  {
    "text": "quotation of e is of type coding",
    "start": "181140",
    "end": "184440"
  },
  {
    "text": "and a splice expression extracts the",
    "start": "184440",
    "end": "187379"
  },
  {
    "text": "expression from its representation so if",
    "start": "187379",
    "end": "190200"
  },
  {
    "text": "e is of type coding then the splice of a",
    "start": "190200",
    "end": "192659"
  },
  {
    "text": "is of tab Inked",
    "start": "192659",
    "end": "194580"
  },
  {
    "text": "by specializing Expressions inside",
    "start": "194580",
    "end": "196800"
  },
  {
    "text": "quotations we can construct the larger",
    "start": "196800",
    "end": "199319"
  },
  {
    "text": "quotations from smaller ones",
    "start": "199319",
    "end": "203060"
  },
  {
    "start": "204000",
    "end": "320000"
  },
  {
    "text": "let's see an example",
    "start": "204239",
    "end": "206459"
  },
  {
    "text": "the hello world example of multi-stage",
    "start": "206459",
    "end": "209099"
  },
  {
    "text": "programming is the power function where",
    "start": "209099",
    "end": "211739"
  },
  {
    "text": "we would like to calculate n to the",
    "start": "211739",
    "end": "213720"
  },
  {
    "text": "power of K",
    "start": "213720",
    "end": "215700"
  },
  {
    "text": "the power function pattern matches on K",
    "start": "215700",
    "end": "218879"
  },
  {
    "text": "if K is zero the function returns 1 or",
    "start": "218879",
    "end": "222360"
  },
  {
    "text": "otherwise it recursively causes itself",
    "start": "222360",
    "end": "224580"
  },
  {
    "text": "with K minus 1. and we can also Define a",
    "start": "224580",
    "end": "228180"
  },
  {
    "text": "function power 5 that fixes the exponent",
    "start": "228180",
    "end": "230879"
  },
  {
    "text": "to 5.",
    "start": "230879",
    "end": "232920"
  },
  {
    "text": "in this case since this exponent 5 is",
    "start": "232920",
    "end": "236159"
  },
  {
    "text": "fixed statically we can consider 5 is",
    "start": "236159",
    "end": "239220"
  },
  {
    "text": "provided at an earlier stage than a and",
    "start": "239220",
    "end": "242640"
  },
  {
    "text": "we can use multi-stage to generate",
    "start": "242640",
    "end": "244680"
  },
  {
    "text": "efficient code for power file",
    "start": "244680",
    "end": "247379"
  },
  {
    "text": "specifically we distinguish between",
    "start": "247379",
    "end": "249900"
  },
  {
    "text": "Inked encodingt",
    "start": "249900",
    "end": "252239"
  },
  {
    "text": "and when K is zero I will use the",
    "start": "252239",
    "end": "255000"
  },
  {
    "text": "bracket operation to code an INT into a",
    "start": "255000",
    "end": "257820"
  },
  {
    "text": "coding",
    "start": "257820",
    "end": "258959"
  },
  {
    "text": "or otherwise",
    "start": "258959",
    "end": "261060"
  },
  {
    "text": "we use the bracket operation to build a",
    "start": "261060",
    "end": "264060"
  },
  {
    "text": "larger expression within which we use",
    "start": "264060",
    "end": "266820"
  },
  {
    "text": "this dollar operation to splice code",
    "start": "266820",
    "end": "268979"
  },
  {
    "text": "into it",
    "start": "268979",
    "end": "270560"
  },
  {
    "text": "and the Q Power file function simply cos",
    "start": "270560",
    "end": "274440"
  },
  {
    "text": "Q Power with the static five and the",
    "start": "274440",
    "end": "277199"
  },
  {
    "text": "quotation of n and use a top level",
    "start": "277199",
    "end": "280020"
  },
  {
    "text": "splice to enforce the code generation",
    "start": "280020",
    "end": "283800"
  },
  {
    "text": "in this case we will generate this",
    "start": "283800",
    "end": "286440"
  },
  {
    "text": "definition of q power file like this",
    "start": "286440",
    "end": "288960"
  },
  {
    "text": "where the function call and all required",
    "start": "288960",
    "end": "291840"
  },
  {
    "text": "multiplications have been unrolled and",
    "start": "291840",
    "end": "294060"
  },
  {
    "text": "inlined that is we successfully",
    "start": "294060",
    "end": "297060"
  },
  {
    "text": "eliminate the abstract overhead in power",
    "start": "297060",
    "end": "300000"
  },
  {
    "text": "file this is very exciting because we",
    "start": "300000",
    "end": "303060"
  },
  {
    "text": "are writing Q power as a high level",
    "start": "303060",
    "end": "304979"
  },
  {
    "text": "abstraction but we can generate",
    "start": "304979",
    "end": "306720"
  },
  {
    "text": "efficient and low level code for power",
    "start": "306720",
    "end": "308699"
  },
  {
    "text": "file and we are able to use the same",
    "start": "308699",
    "end": "311639"
  },
  {
    "text": "mechanism to generate power 4 power 6",
    "start": "311639",
    "end": "314400"
  },
  {
    "text": "and many other powers using the same",
    "start": "314400",
    "end": "316500"
  },
  {
    "text": "abstract power function",
    "start": "316500",
    "end": "319880"
  },
  {
    "start": "320000",
    "end": "510000"
  },
  {
    "text": "but how does it actually generate this",
    "start": "320699",
    "end": "323880"
  },
  {
    "text": "efficient implementation of power file",
    "start": "323880",
    "end": "326639"
  },
  {
    "text": "let's dive into the evaluation process",
    "start": "326639",
    "end": "329160"
  },
  {
    "text": "step by step",
    "start": "329160",
    "end": "331199"
  },
  {
    "text": "first the definition of q power 5 has a",
    "start": "331199",
    "end": "334800"
  },
  {
    "text": "top level splice which tries to extract",
    "start": "334800",
    "end": "338820"
  },
  {
    "text": "the expression from its representation",
    "start": "338820",
    "end": "340680"
  },
  {
    "text": "so it enforces evaluation of this",
    "start": "340680",
    "end": "343380"
  },
  {
    "text": "expression",
    "start": "343380",
    "end": "344940"
  },
  {
    "text": "so we essentially unfold this definition",
    "start": "344940",
    "end": "347580"
  },
  {
    "text": "of q power with argument of 5 and the",
    "start": "347580",
    "end": "350820"
  },
  {
    "text": "quotation of n",
    "start": "350820",
    "end": "353039"
  },
  {
    "text": "now on this top level we have one splice",
    "start": "353039",
    "end": "356580"
  },
  {
    "text": "and one quotation and we can consider",
    "start": "356580",
    "end": "359280"
  },
  {
    "text": "that these two cancel each other out",
    "start": "359280",
    "end": "361080"
  },
  {
    "text": "which leaves us this",
    "start": "361080",
    "end": "363479"
  },
  {
    "text": "then the splice and quotation cancel",
    "start": "363479",
    "end": "365880"
  },
  {
    "text": "each other again for n",
    "start": "365880",
    "end": "369259"
  },
  {
    "text": "and the top level splice unq power",
    "start": "370020",
    "end": "373080"
  },
  {
    "text": "forces the evaluation of 5 minus 1 which",
    "start": "373080",
    "end": "376440"
  },
  {
    "text": "reduces to 4.",
    "start": "376440",
    "end": "378720"
  },
  {
    "text": "at this point if we compare this",
    "start": "378720",
    "end": "381840"
  },
  {
    "text": "function with what we started you can",
    "start": "381840",
    "end": "384900"
  },
  {
    "text": "observe that we have the same expression",
    "start": "384900",
    "end": "387240"
  },
  {
    "text": "except that instead of 5 we have four",
    "start": "387240",
    "end": "390180"
  },
  {
    "text": "instead",
    "start": "390180",
    "end": "391800"
  },
  {
    "text": "so if we keep evaluating this expression",
    "start": "391800",
    "end": "394560"
  },
  {
    "text": "we will be able to get n times n times n",
    "start": "394560",
    "end": "397259"
  },
  {
    "text": "times n times n until this K is",
    "start": "397259",
    "end": "400259"
  },
  {
    "text": "equivalent to 0 in which case we get 1.",
    "start": "400259",
    "end": "402900"
  },
  {
    "text": "so this is the this is the overall",
    "start": "402900",
    "end": "404759"
  },
  {
    "text": "result we got okay",
    "start": "404759",
    "end": "408440"
  },
  {
    "text": "looks like multi-stage programming works",
    "start": "410940",
    "end": "413460"
  },
  {
    "text": "very well",
    "start": "413460",
    "end": "414600"
  },
  {
    "text": "however there is one thing that we are",
    "start": "414600",
    "end": "417180"
  },
  {
    "text": "not very satisfied with in this example",
    "start": "417180",
    "end": "420300"
  },
  {
    "text": "that is in this example we restrict the",
    "start": "420300",
    "end": "424080"
  },
  {
    "text": "second argument to be an integer",
    "start": "424080",
    "end": "426960"
  },
  {
    "text": "but Power works for any real numbers",
    "start": "426960",
    "end": "429660"
  },
  {
    "text": "rather than just the integers",
    "start": "429660",
    "end": "432120"
  },
  {
    "text": "and can we generalize this function to",
    "start": "432120",
    "end": "434699"
  },
  {
    "text": "take any real numbers instead of just",
    "start": "434699",
    "end": "437039"
  },
  {
    "text": "integers",
    "start": "437039",
    "end": "438660"
  },
  {
    "text": "I as a very proud Haskell programmer",
    "start": "438660",
    "end": "441780"
  },
  {
    "text": "know that I would be able to do that",
    "start": "441780",
    "end": "444060"
  },
  {
    "text": "using type classes",
    "start": "444060",
    "end": "446580"
  },
  {
    "text": "type classes were first introduced in",
    "start": "446580",
    "end": "449220"
  },
  {
    "text": "the seminal work by how to make ad hoc",
    "start": "449220",
    "end": "452099"
  },
  {
    "text": "problem of them Less ad hoc",
    "start": "452099",
    "end": "454500"
  },
  {
    "text": "and have been implemented in languages",
    "start": "454500",
    "end": "456840"
  },
  {
    "text": "including Haskell and many others like",
    "start": "456840",
    "end": "459120"
  },
  {
    "text": "professors and calc and ending",
    "start": "459120",
    "end": "461880"
  },
  {
    "text": "specifically with type classes we can",
    "start": "461880",
    "end": "465180"
  },
  {
    "text": "first declare a type class definition",
    "start": "465180",
    "end": "467160"
  },
  {
    "text": "for example show of some type A with a",
    "start": "467160",
    "end": "471000"
  },
  {
    "text": "single function show that takes an A and",
    "start": "471000",
    "end": "473340"
  },
  {
    "text": "returns a string",
    "start": "473340",
    "end": "475319"
  },
  {
    "text": "then we can declare instances offshore",
    "start": "475319",
    "end": "478380"
  },
  {
    "text": "for many different types including int",
    "start": "478380",
    "end": "480780"
  },
  {
    "text": "and book",
    "start": "480780",
    "end": "481800"
  },
  {
    "text": "where we provide the implementation of",
    "start": "481800",
    "end": "484380"
  },
  {
    "text": "the tab class methods and here we assume",
    "start": "484380",
    "end": "487080"
  },
  {
    "text": "we have primitive support for converting",
    "start": "487080",
    "end": "489360"
  },
  {
    "text": "into and ball to string",
    "start": "489360",
    "end": "491639"
  },
  {
    "text": "and with step classes we can declare a",
    "start": "491639",
    "end": "494580"
  },
  {
    "text": "generic function print that can take an",
    "start": "494580",
    "end": "497039"
  },
  {
    "text": "arbitrary as long as a is an instance of",
    "start": "497039",
    "end": "500759"
  },
  {
    "text": "show",
    "start": "500759",
    "end": "501840"
  },
  {
    "text": "we can then use this show inside the",
    "start": "501840",
    "end": "504840"
  },
  {
    "text": "function body",
    "start": "504840",
    "end": "506160"
  },
  {
    "text": "does this make sense to you",
    "start": "506160",
    "end": "509639"
  },
  {
    "text": "all right",
    "start": "509639",
    "end": "511259"
  },
  {
    "start": "510000",
    "end": "653000"
  },
  {
    "text": "now I will step classes we can",
    "start": "511259",
    "end": "514260"
  },
  {
    "text": "generalize the type of this function to",
    "start": "514260",
    "end": "517080"
  },
  {
    "text": "take a type class constraint number a",
    "start": "517080",
    "end": "520080"
  },
  {
    "text": "and the number eight includes all types",
    "start": "520080",
    "end": "522360"
  },
  {
    "text": "which are regarded as members in Haskell",
    "start": "522360",
    "end": "525480"
  },
  {
    "text": "so now this function can be applied to",
    "start": "525480",
    "end": "528360"
  },
  {
    "text": "any instance of number",
    "start": "528360",
    "end": "530640"
  },
  {
    "text": "and we would expect that this program",
    "start": "530640",
    "end": "532920"
  },
  {
    "text": "continues to work",
    "start": "532920",
    "end": "535380"
  },
  {
    "text": "it is somewhat surprising then that this",
    "start": "535380",
    "end": "538200"
  },
  {
    "text": "function actually fails to compile in",
    "start": "538200",
    "end": "540839"
  },
  {
    "text": "the latest implementation of type the",
    "start": "540839",
    "end": "542940"
  },
  {
    "text": "tablet Tasker in ghd9 the state of that",
    "start": "542940",
    "end": "546060"
  },
  {
    "text": "hasco compiled",
    "start": "546060",
    "end": "547800"
  },
  {
    "text": "and the error message is also mysterious",
    "start": "547800",
    "end": "551580"
  },
  {
    "text": "the compiler complains that it cannot",
    "start": "551580",
    "end": "554940"
  },
  {
    "text": "find the instance for number a while we",
    "start": "554940",
    "end": "557880"
  },
  {
    "text": "have this instance right there in this",
    "start": "557880",
    "end": "560100"
  },
  {
    "text": "program",
    "start": "560100",
    "end": "561180"
  },
  {
    "text": "so what's going on here",
    "start": "561180",
    "end": "564000"
  },
  {
    "text": "this problem is interesting as it is not",
    "start": "564000",
    "end": "567180"
  },
  {
    "text": "specific to Haskell",
    "start": "567180",
    "end": "569160"
  },
  {
    "text": "in particular features similar to type",
    "start": "569160",
    "end": "571980"
  },
  {
    "text": "classes for example implicitous in Scala",
    "start": "571980",
    "end": "574860"
  },
  {
    "text": "you can also have the subtle interaction",
    "start": "574860",
    "end": "576899"
  },
  {
    "text": "with multi-stage programming and ocamo",
    "start": "576899",
    "end": "580440"
  },
  {
    "text": "is also developing supports for implicit",
    "start": "580440",
    "end": "582600"
  },
  {
    "text": "and staging and we expect a similar",
    "start": "582600",
    "end": "584940"
  },
  {
    "text": "problem to happen for a camera",
    "start": "584940",
    "end": "588560"
  },
  {
    "text": "in this talk I'm going to argue that the",
    "start": "589200",
    "end": "592860"
  },
  {
    "text": "current implementation of type the",
    "start": "592860",
    "end": "594779"
  },
  {
    "text": "template Haskell is answered",
    "start": "594779",
    "end": "597240"
  },
  {
    "text": "in the sense that stabilizing a",
    "start": "597240",
    "end": "599580"
  },
  {
    "text": "well-typed code block can raise a tab",
    "start": "599580",
    "end": "601860"
  },
  {
    "text": "error",
    "start": "601860",
    "end": "603300"
  },
  {
    "text": "inspired",
    "start": "603300",
    "end": "605580"
  },
  {
    "text": "we formalize a source calculus Which",
    "start": "605580",
    "end": "608160"
  },
  {
    "text": "models type classes and multi-stage",
    "start": "608160",
    "end": "610380"
  },
  {
    "text": "programming and includes a novel",
    "start": "610380",
    "end": "613019"
  },
  {
    "text": "construct staged pep class condition",
    "start": "613019",
    "end": "615180"
  },
  {
    "text": "that resolves the standard interaction",
    "start": "615180",
    "end": "617700"
  },
  {
    "text": "between the two",
    "start": "617700",
    "end": "619440"
  },
  {
    "text": "The Source calculus then elaborate to a",
    "start": "619440",
    "end": "622380"
  },
  {
    "text": "polymorphic Lambda calculus extended",
    "start": "622380",
    "end": "624600"
  },
  {
    "text": "with quotations which includes a key",
    "start": "624600",
    "end": "627480"
  },
  {
    "text": "Innovation splice environment that gives",
    "start": "627480",
    "end": "630120"
  },
  {
    "text": "more implementation for even about",
    "start": "630120",
    "end": "632040"
  },
  {
    "text": "quotations",
    "start": "632040",
    "end": "634579"
  },
  {
    "text": "provides a solid theoretical foundation",
    "start": "635120",
    "end": "637800"
  },
  {
    "text": "for integrity type clusters into",
    "start": "637800",
    "end": "639899"
  },
  {
    "text": "multi-stage programs and it is also easy",
    "start": "639899",
    "end": "642839"
  },
  {
    "text": "to implement and stay close to existing",
    "start": "642839",
    "end": "645300"
  },
  {
    "text": "implementations",
    "start": "645300",
    "end": "648019"
  },
  {
    "text": "we will start with our source calculus",
    "start": "649079",
    "end": "653779"
  },
  {
    "start": "653000",
    "end": "776000"
  },
  {
    "text": "in order to solve that problem we see we",
    "start": "654480",
    "end": "658079"
  },
  {
    "text": "needed to First understand that program",
    "start": "658079",
    "end": "660839"
  },
  {
    "text": "and let's go back to the basics of",
    "start": "660839",
    "end": "663300"
  },
  {
    "text": "multi-stage programming",
    "start": "663300",
    "end": "665459"
  },
  {
    "text": "we talked before that there are two",
    "start": "665459",
    "end": "667620"
  },
  {
    "text": "constructs quotations and splice which",
    "start": "667620",
    "end": "670800"
  },
  {
    "text": "transfers the type between code int and",
    "start": "670800",
    "end": "673200"
  },
  {
    "text": "it",
    "start": "673200",
    "end": "674100"
  },
  {
    "text": "now let's be a little bit more formal",
    "start": "674100",
    "end": "676740"
  },
  {
    "text": "and we will write this derivation with a",
    "start": "676740",
    "end": "679560"
  },
  {
    "text": "typing judgment",
    "start": "679560",
    "end": "681300"
  },
  {
    "text": "here the Judgment basically says that",
    "start": "681300",
    "end": "683700"
  },
  {
    "text": "under some topic context which stores",
    "start": "683700",
    "end": "686040"
  },
  {
    "text": "types for variables",
    "start": "686040",
    "end": "688260"
  },
  {
    "text": "expression e has some type child with",
    "start": "688260",
    "end": "691079"
  },
  {
    "text": "tall range over types like integers or",
    "start": "691079",
    "end": "693240"
  },
  {
    "text": "functions",
    "start": "693240",
    "end": "694740"
  },
  {
    "text": "with this judgment we can write down",
    "start": "694740",
    "end": "697620"
  },
  {
    "text": "formally the typing rule for quotations",
    "start": "697620",
    "end": "699899"
  },
  {
    "text": "and slice",
    "start": "699899",
    "end": "701579"
  },
  {
    "text": "for quotations if r e is of some type of",
    "start": "701579",
    "end": "705000"
  },
  {
    "text": "Tau then we have the quotation of e is",
    "start": "705000",
    "end": "707040"
  },
  {
    "text": "of type code Tau and for splice if e is",
    "start": "707040",
    "end": "710040"
  },
  {
    "text": "of type quarter Tau then the splice of e",
    "start": "710040",
    "end": "712140"
  },
  {
    "text": "is of capital",
    "start": "712140",
    "end": "713880"
  },
  {
    "text": "given these definitions it may seem like",
    "start": "713880",
    "end": "718019"
  },
  {
    "text": "quotations and splices can be used",
    "start": "718019",
    "end": "720540"
  },
  {
    "text": "freely as long as the types align",
    "start": "720540",
    "end": "723980"
  },
  {
    "text": "however in multi-stage programming we",
    "start": "723980",
    "end": "727740"
  },
  {
    "text": "also have separate stages",
    "start": "727740",
    "end": "730560"
  },
  {
    "text": "if we write a program like power n",
    "start": "730560",
    "end": "734279"
  },
  {
    "text": "that we would like to evaluate at an",
    "start": "734279",
    "end": "737220"
  },
  {
    "text": "earlier stage as indicated by these top",
    "start": "737220",
    "end": "739800"
  },
  {
    "text": "level splice but the results are some",
    "start": "739800",
    "end": "742500"
  },
  {
    "text": "input that is only available in a later",
    "start": "742500",
    "end": "744899"
  },
  {
    "text": "stage in this case n as the first",
    "start": "744899",
    "end": "747360"
  },
  {
    "text": "argument then this evaluation will get",
    "start": "747360",
    "end": "750540"
  },
  {
    "text": "stuck as we have no no way to evaluate",
    "start": "750540",
    "end": "754019"
  },
  {
    "text": "this n minus one without knowing what n",
    "start": "754019",
    "end": "756420"
  },
  {
    "text": "is",
    "start": "756420",
    "end": "758120"
  },
  {
    "text": "that means Beyond What happiness we",
    "start": "758120",
    "end": "761820"
  },
  {
    "text": "would also like to ensure a form of real",
    "start": "761820",
    "end": "764639"
  },
  {
    "text": "stagginess that can correctly reject",
    "start": "764639",
    "end": "767339"
  },
  {
    "text": "this program",
    "start": "767339",
    "end": "769940"
  },
  {
    "text": "in multi-stage programming where",
    "start": "770459",
    "end": "772920"
  },
  {
    "text": "stagness is expressed using the notion",
    "start": "772920",
    "end": "775860"
  },
  {
    "text": "of the level",
    "start": "775860",
    "end": "778260"
  },
  {
    "start": "776000",
    "end": "842000"
  },
  {
    "text": "that is in this typing judgment we were",
    "start": "778260",
    "end": "781680"
  },
  {
    "text": "attached to the Judgment a natural",
    "start": "781680",
    "end": "783480"
  },
  {
    "text": "number n that indicates evaluation order",
    "start": "783480",
    "end": "786839"
  },
  {
    "text": "of expressions",
    "start": "786839",
    "end": "789260"
  },
  {
    "text": "intuitively speaking programs of",
    "start": "789260",
    "end": "791820"
  },
  {
    "text": "negative levels are evaluated at compare",
    "start": "791820",
    "end": "794339"
  },
  {
    "text": "time programs of level zero are",
    "start": "794339",
    "end": "796680"
  },
  {
    "text": "evaluated on runtime and programs of",
    "start": "796680",
    "end": "799079"
  },
  {
    "text": "positive levels are evaluated at Future",
    "start": "799079",
    "end": "801480"
  },
  {
    "text": "stages",
    "start": "801480",
    "end": "803399"
  },
  {
    "text": "and for quotations and splices as",
    "start": "803399",
    "end": "807060"
  },
  {
    "text": "quotations means the value of the",
    "start": "807060",
    "end": "809519"
  },
  {
    "text": "expression is needed in a future stage",
    "start": "809519",
    "end": "811740"
  },
  {
    "text": "so it increases the level of Expressions",
    "start": "811740",
    "end": "814740"
  },
  {
    "text": "instead",
    "start": "814740",
    "end": "816060"
  },
  {
    "text": "whilst blessed are decreases the level",
    "start": "816060",
    "end": "818760"
  },
  {
    "text": "of the expression inside and it enforces",
    "start": "818760",
    "end": "821459"
  },
  {
    "text": "evaluation of the expression at an",
    "start": "821459",
    "end": "823560"
  },
  {
    "text": "earlier stage",
    "start": "823560",
    "end": "826139"
  },
  {
    "text": "moreover since the typing is labeled the",
    "start": "826139",
    "end": "829260"
  },
  {
    "text": "typing context will also be labeled in",
    "start": "829260",
    "end": "832260"
  },
  {
    "text": "the sense that when we type check a",
    "start": "832260",
    "end": "834600"
  },
  {
    "text": "function the local variable introduced",
    "start": "834600",
    "end": "837180"
  },
  {
    "text": "by the function is also bound at a",
    "start": "837180",
    "end": "839639"
  },
  {
    "text": "particular level",
    "start": "839639",
    "end": "841980"
  },
  {
    "text": "and importantly real stages is enforced",
    "start": "841980",
    "end": "846000"
  },
  {
    "start": "842000",
    "end": "950000"
  },
  {
    "text": "by the level restriction where each",
    "start": "846000",
    "end": "848339"
  },
  {
    "text": "variable is used only at the level in",
    "start": "848339",
    "end": "851160"
  },
  {
    "text": "which it is packed",
    "start": "851160",
    "end": "854160"
  },
  {
    "text": "to understand this restriction let's",
    "start": "854160",
    "end": "856680"
  },
  {
    "text": "look at some examples",
    "start": "856680",
    "end": "859680"
  },
  {
    "text": "we give three examples and we discuss",
    "start": "859680",
    "end": "862200"
  },
  {
    "text": "whether each one is real typed and well",
    "start": "862200",
    "end": "864660"
  },
  {
    "text": "staged",
    "start": "864660",
    "end": "866160"
  },
  {
    "text": "for the first one this slash Y and this",
    "start": "866160",
    "end": "869940"
  },
  {
    "text": "Arrow notion introduces a new local",
    "start": "869940",
    "end": "872279"
  },
  {
    "text": "variable",
    "start": "872279",
    "end": "873420"
  },
  {
    "text": "when type checking Expressions we start",
    "start": "873420",
    "end": "876000"
  },
  {
    "text": "with level zero so in this case the",
    "start": "876000",
    "end": "879000"
  },
  {
    "text": "variable y of type coding is introduced",
    "start": "879000",
    "end": "881760"
  },
  {
    "text": "at the level zero and we splice it in",
    "start": "881760",
    "end": "884579"
  },
  {
    "text": "the Lambda body to get an integer",
    "start": "884579",
    "end": "887160"
  },
  {
    "text": "here the type works fine",
    "start": "887160",
    "end": "889740"
  },
  {
    "text": "however since this variable is used",
    "start": "889740",
    "end": "892800"
  },
  {
    "text": "inside the splice which decreases the",
    "start": "892800",
    "end": "895500"
  },
  {
    "text": "level to be -1 which is not the level in",
    "start": "895500",
    "end": "899040"
  },
  {
    "text": "which Y is bound so this program is 0",
    "start": "899040",
    "end": "901620"
  },
  {
    "text": "stitched",
    "start": "901620",
    "end": "903420"
  },
  {
    "text": "similarly in this second example we",
    "start": "903420",
    "end": "906300"
  },
  {
    "text": "introduce Z of type integer at level 0",
    "start": "906300",
    "end": "909300"
  },
  {
    "text": "and we call it to make an expression of",
    "start": "909300",
    "end": "912300"
  },
  {
    "text": "level coding",
    "start": "912300",
    "end": "914040"
  },
  {
    "text": "so it is well typed",
    "start": "914040",
    "end": "916380"
  },
  {
    "text": "but again since this D is introduced at",
    "start": "916380",
    "end": "919560"
  },
  {
    "text": "the level zero but is then used at level",
    "start": "919560",
    "end": "922500"
  },
  {
    "text": "one uh so it is either staged",
    "start": "922500",
    "end": "926519"
  },
  {
    "text": "in the final example I will introduce",
    "start": "926519",
    "end": "929100"
  },
  {
    "text": "and use x at level R1 so this example is",
    "start": "929100",
    "end": "933000"
  },
  {
    "text": "well typed and well staged",
    "start": "933000",
    "end": "935880"
  },
  {
    "text": "this data Temple showed that a",
    "start": "935880",
    "end": "938100"
  },
  {
    "text": "world-typed program may not be well",
    "start": "938100",
    "end": "940199"
  },
  {
    "text": "staged in particular all those three",
    "start": "940199",
    "end": "943079"
  },
  {
    "text": "examples are well typed but only the",
    "start": "943079",
    "end": "945540"
  },
  {
    "text": "last one timely is were staged",
    "start": "945540",
    "end": "949639"
  },
  {
    "start": "950000",
    "end": "1070000"
  },
  {
    "text": "now that we have described the level",
    "start": "950220",
    "end": "952680"
  },
  {
    "text": "restriction we go back to our",
    "start": "952680",
    "end": "954959"
  },
  {
    "text": "problematic example and let's take a",
    "start": "954959",
    "end": "957899"
  },
  {
    "text": "closer look at whether this definition",
    "start": "957899",
    "end": "959699"
  },
  {
    "text": "is well typed at well staged",
    "start": "959699",
    "end": "962579"
  },
  {
    "text": "first for sure that we have used the",
    "start": "962579",
    "end": "965579"
  },
  {
    "text": "civilizes and quotations to make the",
    "start": "965579",
    "end": "967980"
  },
  {
    "text": "program will attack",
    "start": "967980",
    "end": "969839"
  },
  {
    "text": "now if the program will staged again",
    "start": "969839",
    "end": "973260"
  },
  {
    "text": "it appears so since all local variables",
    "start": "973260",
    "end": "976199"
  },
  {
    "text": "K and N are introduced at level zero and",
    "start": "976199",
    "end": "979920"
  },
  {
    "text": "are both used only at level zero",
    "start": "979920",
    "end": "982800"
  },
  {
    "text": "moreover we can see the true power as",
    "start": "982800",
    "end": "985199"
  },
  {
    "text": "the top level identifier so Q Power",
    "start": "985199",
    "end": "987120"
  },
  {
    "text": "itself can be used at the arbitrary",
    "start": "987120",
    "end": "989279"
  },
  {
    "text": "level",
    "start": "989279",
    "end": "990959"
  },
  {
    "text": "so that concludes that these post",
    "start": "990959",
    "end": "994260"
  },
  {
    "text": "definitions are well staged",
    "start": "994260",
    "end": "997199"
  },
  {
    "text": "or are they",
    "start": "997199",
    "end": "999120"
  },
  {
    "text": "maybe this program is like an expert and",
    "start": "999120",
    "end": "1002660"
  },
  {
    "text": "we are only looking at the tip of it and",
    "start": "1002660",
    "end": "1005420"
  },
  {
    "text": "the problem comes from the unobserved",
    "start": "1005420",
    "end": "1008000"
  },
  {
    "text": "part of this program which in this case",
    "start": "1008000",
    "end": "1010459"
  },
  {
    "text": "is tab classes",
    "start": "1010459",
    "end": "1013720"
  },
  {
    "text": "I briefly introduced the tab classes to",
    "start": "1014300",
    "end": "1017060"
  },
  {
    "text": "you before but what I didn't tell you is",
    "start": "1017060",
    "end": "1020600"
  },
  {
    "text": "that type classes don't have a direct",
    "start": "1020600",
    "end": "1023120"
  },
  {
    "text": "operational schematics",
    "start": "1023120",
    "end": "1025459"
  },
  {
    "text": "rather they are implemented by",
    "start": "1025459",
    "end": "1027980"
  },
  {
    "text": "dictionary passing elaboration into a",
    "start": "1027980",
    "end": "1030380"
  },
  {
    "text": "simpler language without step classes",
    "start": "1030380",
    "end": "1033319"
  },
  {
    "text": "after elaboration a type class",
    "start": "1033319",
    "end": "1035780"
  },
  {
    "text": "definition becomes a data type",
    "start": "1035780",
    "end": "1037819"
  },
  {
    "text": "declaration which is called the",
    "start": "1037819",
    "end": "1039620"
  },
  {
    "text": "dictionary with a field for each class",
    "start": "1039620",
    "end": "1042918"
  },
  {
    "text": "method",
    "start": "1042919",
    "end": "1044360"
  },
  {
    "text": "and every instance of the type class",
    "start": "1044360",
    "end": "1046938"
  },
  {
    "text": "corresponds to an instance of the data",
    "start": "1046939",
    "end": "1049340"
  },
  {
    "text": "type",
    "start": "1049340",
    "end": "1050960"
  },
  {
    "text": "finally a function with a tab class",
    "start": "1050960",
    "end": "1052880"
  },
  {
    "text": "constraint elaborates to a function that",
    "start": "1052880",
    "end": "1055160"
  },
  {
    "text": "takes an extra argument for this",
    "start": "1055160",
    "end": "1057740"
  },
  {
    "text": "dictionary of this constraint and we",
    "start": "1057740",
    "end": "1060799"
  },
  {
    "text": "explicitly pass the dictionary around to",
    "start": "1060799",
    "end": "1063799"
  },
  {
    "text": "resolve tab class constraints are raised",
    "start": "1063799",
    "end": "1065900"
  },
  {
    "text": "by for example using the show function",
    "start": "1065900",
    "end": "1069820"
  },
  {
    "start": "1070000",
    "end": "1125000"
  },
  {
    "text": "how do you think dictionary passing",
    "start": "1070400",
    "end": "1072500"
  },
  {
    "text": "elaboration now we can observe what's",
    "start": "1072500",
    "end": "1075080"
  },
  {
    "text": "hidden in the iceberg for this program",
    "start": "1075080",
    "end": "1078919"
  },
  {
    "text": "after elaboration are the number eight",
    "start": "1078919",
    "end": "1081559"
  },
  {
    "text": "type class question corresponds to an",
    "start": "1081559",
    "end": "1083900"
  },
  {
    "text": "extra parameter for the corresponding",
    "start": "1083900",
    "end": "1086059"
  },
  {
    "text": "dictionary",
    "start": "1086059",
    "end": "1087140"
  },
  {
    "text": "and the dictionary is explicitly passed",
    "start": "1087140",
    "end": "1090380"
  },
  {
    "text": "around to a satisfy other type class",
    "start": "1090380",
    "end": "1092900"
  },
  {
    "text": "constraints",
    "start": "1092900",
    "end": "1094940"
  },
  {
    "text": "now we can observe this problem",
    "start": "1094940",
    "end": "1098419"
  },
  {
    "text": "power the dictionary is introduced at a",
    "start": "1098419",
    "end": "1101480"
  },
  {
    "text": "level zero but it is used inside the",
    "start": "1101480",
    "end": "1104299"
  },
  {
    "text": "quotation at level one similarly in Q",
    "start": "1104299",
    "end": "1107419"
  },
  {
    "text": "Power 5 the dictionary is introduced at",
    "start": "1107419",
    "end": "1110480"
  },
  {
    "text": "the level zero but is used at level",
    "start": "1110480",
    "end": "1112640"
  },
  {
    "text": "minus one so the above your stitched",
    "start": "1112640",
    "end": "1116960"
  },
  {
    "text": "but then",
    "start": "1116960",
    "end": "1118340"
  },
  {
    "text": "and we write a well-typed and real stage",
    "start": "1118340",
    "end": "1120740"
  },
  {
    "text": "program for this generalized Q power",
    "start": "1120740",
    "end": "1123020"
  },
  {
    "text": "function",
    "start": "1123020",
    "end": "1124940"
  },
  {
    "text": "we resolve the issue in our calculus",
    "start": "1124940",
    "end": "1127760"
  },
  {
    "start": "1125000",
    "end": "1264000"
  },
  {
    "text": "where we propose stage type class",
    "start": "1127760",
    "end": "1130220"
  },
  {
    "text": "constraints",
    "start": "1130220",
    "end": "1131539"
  },
  {
    "text": "and the key idea is that while we use",
    "start": "1131539",
    "end": "1134660"
  },
  {
    "text": "coding it to indicate that an integer",
    "start": "1134660",
    "end": "1137000"
  },
  {
    "text": "has been staged we use the stage the",
    "start": "1137000",
    "end": "1139400"
  },
  {
    "text": "type class constraint a new constraint",
    "start": "1139400",
    "end": "1141440"
  },
  {
    "text": "from code C to indicate that a tab class",
    "start": "1141440",
    "end": "1144140"
  },
  {
    "text": "constraint has been staged",
    "start": "1144140",
    "end": "1146660"
  },
  {
    "text": "during stage the type class constraint",
    "start": "1146660",
    "end": "1149059"
  },
  {
    "text": "we can rewrite the definition of q power",
    "start": "1149059",
    "end": "1151840"
  },
  {
    "text": "where we can use this code C to Stage",
    "start": "1151840",
    "end": "1154940"
  },
  {
    "text": "the number eight have class question",
    "start": "1154940",
    "end": "1158059"
  },
  {
    "text": "after elaboration since the type class",
    "start": "1158059",
    "end": "1160700"
  },
  {
    "text": "question",
    "start": "1160700",
    "end": "1162080"
  },
  {
    "text": "becomes an extra parameter we can model",
    "start": "1162080",
    "end": "1165440"
  },
  {
    "text": "it as a staged dictionary using Code so",
    "start": "1165440",
    "end": "1168620"
  },
  {
    "text": "no extra tab Constructor is needed after",
    "start": "1168620",
    "end": "1171380"
  },
  {
    "text": "elaboration",
    "start": "1171380",
    "end": "1173299"
  },
  {
    "text": "and inside this function definition we",
    "start": "1173299",
    "end": "1176960"
  },
  {
    "text": "will use quotations and splices to",
    "start": "1176960",
    "end": "1179419"
  },
  {
    "text": "adjust the dictionary to make sure it is",
    "start": "1179419",
    "end": "1182120"
  },
  {
    "text": "well typed and well staged",
    "start": "1182120",
    "end": "1185799"
  },
  {
    "text": "now the question is how do we",
    "start": "1187640",
    "end": "1190100"
  },
  {
    "text": "automatically insert the splice and",
    "start": "1190100",
    "end": "1192380"
  },
  {
    "text": "quotations to adjust the dictionaries",
    "start": "1192380",
    "end": "1194960"
  },
  {
    "text": "during elaboration",
    "start": "1194960",
    "end": "1196940"
  },
  {
    "text": "this is done in a process called",
    "start": "1196940",
    "end": "1199520"
  },
  {
    "text": "constant resolution",
    "start": "1199520",
    "end": "1201740"
  },
  {
    "text": "let's first see how constraint",
    "start": "1201740",
    "end": "1203720"
  },
  {
    "text": "resolution works for normal type classes",
    "start": "1203720",
    "end": "1207140"
  },
  {
    "text": "we said that a print function in this",
    "start": "1207140",
    "end": "1210020"
  },
  {
    "text": "Source level after dictionary passing",
    "start": "1210020",
    "end": "1212419"
  },
  {
    "text": "elaborates uh to this definition in this",
    "start": "1212419",
    "end": "1215960"
  },
  {
    "text": "paper box",
    "start": "1215960",
    "end": "1217460"
  },
  {
    "text": "and what happened here is that this",
    "start": "1217460",
    "end": "1220160"
  },
  {
    "text": "print is given a dictionary for show a",
    "start": "1220160",
    "end": "1223100"
  },
  {
    "text": "as an extra parameter and when",
    "start": "1223100",
    "end": "1225380"
  },
  {
    "text": "elaborating the body of this function",
    "start": "1225380",
    "end": "1227480"
  },
  {
    "text": "the show function requires a dictionary",
    "start": "1227480",
    "end": "1230000"
  },
  {
    "text": "for show a which we insert through the",
    "start": "1230000",
    "end": "1232580"
  },
  {
    "text": "constraint resolution process",
    "start": "1232580",
    "end": "1235100"
  },
  {
    "text": "which says that under this type context",
    "start": "1235100",
    "end": "1237919"
  },
  {
    "text": "we can resolve this construency by",
    "start": "1237919",
    "end": "1240799"
  },
  {
    "text": "inserting a dictionary e",
    "start": "1240799",
    "end": "1243440"
  },
  {
    "text": "here I'm showing the very basic form of",
    "start": "1243440",
    "end": "1246380"
  },
  {
    "text": "constant resolution where we simply",
    "start": "1246380",
    "end": "1248840"
  },
  {
    "text": "check whether a dictionary is available",
    "start": "1248840",
    "end": "1250880"
  },
  {
    "text": "in the context and if so we will insert",
    "start": "1250880",
    "end": "1253460"
  },
  {
    "text": "the dictionary in the right place and",
    "start": "1253460",
    "end": "1256039"
  },
  {
    "text": "this thing this is exactly how we insert",
    "start": "1256039",
    "end": "1259039"
  },
  {
    "text": "this visual function input",
    "start": "1259039",
    "end": "1262899"
  },
  {
    "start": "1264000",
    "end": "1352000"
  },
  {
    "text": "with the stage and type class",
    "start": "1264260",
    "end": "1266120"
  },
  {
    "text": "constraints now the construction",
    "start": "1266120",
    "end": "1267980"
  },
  {
    "text": "resolution just like typing is also",
    "start": "1267980",
    "end": "1270559"
  },
  {
    "text": "leveled",
    "start": "1270559",
    "end": "1271940"
  },
  {
    "text": "each dictionary is introduced at a",
    "start": "1271940",
    "end": "1274940"
  },
  {
    "text": "specific level and there can only be",
    "start": "1274940",
    "end": "1277460"
  },
  {
    "text": "used at that level",
    "start": "1277460",
    "end": "1279620"
  },
  {
    "text": "and with standard type class constraint",
    "start": "1279620",
    "end": "1281960"
  },
  {
    "text": "we can resolve this code C constraint at",
    "start": "1281960",
    "end": "1284900"
  },
  {
    "text": "the level n by looking up a dictionary",
    "start": "1284900",
    "end": "1287240"
  },
  {
    "text": "for C at the level n plus one and the",
    "start": "1287240",
    "end": "1290120"
  },
  {
    "text": "resolution result is simply the",
    "start": "1290120",
    "end": "1291980"
  },
  {
    "text": "quotation of the resolution result for C",
    "start": "1291980",
    "end": "1295760"
  },
  {
    "text": "and we can also resolve a c constraint",
    "start": "1295760",
    "end": "1298520"
  },
  {
    "text": "by looking up a dictionary for codecity",
    "start": "1298520",
    "end": "1300980"
  },
  {
    "text": "in level n minus one and the elaboration",
    "start": "1300980",
    "end": "1303740"
  },
  {
    "text": "result becomes S Voice",
    "start": "1303740",
    "end": "1305900"
  },
  {
    "text": "and this is like the specification of",
    "start": "1305900",
    "end": "1308360"
  },
  {
    "text": "level indexed constraint resolution so",
    "start": "1308360",
    "end": "1310760"
  },
  {
    "text": "you might just observe that these two",
    "start": "1310760",
    "end": "1312679"
  },
  {
    "text": "rules are cyclic but in practice we can",
    "start": "1312679",
    "end": "1315500"
  },
  {
    "text": "break the cycle by early storing C",
    "start": "1315500",
    "end": "1317720"
  },
  {
    "text": "constraint in the context so there you",
    "start": "1317720",
    "end": "1320240"
  },
  {
    "text": "only need to knit the first and the",
    "start": "1320240",
    "end": "1322340"
  },
  {
    "text": "second row but not the third one",
    "start": "1322340",
    "end": "1326080"
  },
  {
    "text": "as a summary of The Talk sofa we have",
    "start": "1326419",
    "end": "1329840"
  },
  {
    "text": "shown the exogenous issue in high school",
    "start": "1329840",
    "end": "1332120"
  },
  {
    "text": "and proposed a stage the type class",
    "start": "1332120",
    "end": "1334520"
  },
  {
    "text": "constraint as the approach to resolve",
    "start": "1334520",
    "end": "1336679"
  },
  {
    "text": "the cyto interaction between lab classes",
    "start": "1336679",
    "end": "1339080"
  },
  {
    "text": "and multi-stage programming",
    "start": "1339080",
    "end": "1341659"
  },
  {
    "text": "Now we move to the next part of the talk",
    "start": "1341659",
    "end": "1344419"
  },
  {
    "text": "where we introduce our core calculus and",
    "start": "1344419",
    "end": "1347240"
  },
  {
    "text": "the definition of splice environments",
    "start": "1347240",
    "end": "1351220"
  },
  {
    "text": "we start with this question",
    "start": "1351559",
    "end": "1354260"
  },
  {
    "start": "1352000",
    "end": "1407000"
  },
  {
    "text": "to evaluate the stage of the program",
    "start": "1354260",
    "end": "1357200"
  },
  {
    "text": "for example given this expression",
    "start": "1357200",
    "end": "1359900"
  },
  {
    "text": "suppose it's well typed and there is no",
    "start": "1359900",
    "end": "1362419"
  },
  {
    "text": "other splices and quotations inside the",
    "start": "1362419",
    "end": "1364880"
  },
  {
    "text": "expression how do we perform evaluation",
    "start": "1364880",
    "end": "1368720"
  },
  {
    "text": "one feasible approach is to follow the",
    "start": "1368720",
    "end": "1371539"
  },
  {
    "text": "levels in particular we start with level",
    "start": "1371539",
    "end": "1374840"
  },
  {
    "text": "zero so E1 is of level zero and since",
    "start": "1374840",
    "end": "1378200"
  },
  {
    "text": "the quotation increases the level we",
    "start": "1378200",
    "end": "1380539"
  },
  {
    "text": "have E2 at level 1 and this is the",
    "start": "1380539",
    "end": "1382880"
  },
  {
    "text": "supply is decreases the level so E3 is",
    "start": "1382880",
    "end": "1385520"
  },
  {
    "text": "of level zero",
    "start": "1385520",
    "end": "1387679"
  },
  {
    "text": "now if we wanted to evaluate this",
    "start": "1387679",
    "end": "1390080"
  },
  {
    "text": "expression under level zero we would",
    "start": "1390080",
    "end": "1392299"
  },
  {
    "text": "know that we should evaluate E1 and E3",
    "start": "1392299",
    "end": "1395299"
  },
  {
    "text": "but not E2 so it reduces to something",
    "start": "1395299",
    "end": "1398539"
  },
  {
    "text": "like this where E1 and E3 reduce two",
    "start": "1398539",
    "end": "1401480"
  },
  {
    "text": "values V1 and V3 respectively",
    "start": "1401480",
    "end": "1405880"
  },
  {
    "text": "when performing evaluation this way we",
    "start": "1406220",
    "end": "1409460"
  },
  {
    "start": "1407000",
    "end": "1461000"
  },
  {
    "text": "are actually considering level indexed",
    "start": "1409460",
    "end": "1411740"
  },
  {
    "text": "evaluation",
    "start": "1411740",
    "end": "1413299"
  },
  {
    "text": "in particular this reduction corresponds",
    "start": "1413299",
    "end": "1416120"
  },
  {
    "text": "to this derivation will we evaluate",
    "start": "1416120",
    "end": "1418880"
  },
  {
    "text": "evaluate from Level zero and modify the",
    "start": "1418880",
    "end": "1422240"
  },
  {
    "text": "level accordingly at one quotation of",
    "start": "1422240",
    "end": "1424580"
  },
  {
    "text": "splices are encountered and looking for",
    "start": "1424580",
    "end": "1427159"
  },
  {
    "text": "expressions of level zero to evaluate",
    "start": "1427159",
    "end": "1431120"
  },
  {
    "text": "however this approach requires checking",
    "start": "1431120",
    "end": "1434840"
  },
  {
    "text": "a levels during runtime adding",
    "start": "1434840",
    "end": "1437120"
  },
  {
    "text": "complexity to implementations",
    "start": "1437120",
    "end": "1439960"
  },
  {
    "text": "furthermore at this example illustrates",
    "start": "1439960",
    "end": "1442880"
  },
  {
    "text": "it requires expecting and evaluating",
    "start": "1442880",
    "end": "1445760"
  },
  {
    "text": "inside quotations but in realistic",
    "start": "1445760",
    "end": "1448760"
  },
  {
    "text": "implementations quotations can are",
    "start": "1448760",
    "end": "1451400"
  },
  {
    "text": "compiled to a representation form for",
    "start": "1451400",
    "end": "1453919"
  },
  {
    "text": "which implementing evaluation in",
    "start": "1453919",
    "end": "1455900"
  },
  {
    "text": "particular substitution can be difficult",
    "start": "1455900",
    "end": "1460120"
  },
  {
    "text": "we present a formalism that is easy",
    "start": "1460520",
    "end": "1464980"
  },
  {
    "start": "1461000",
    "end": "1617000"
  },
  {
    "text": "introducing quotations with splice",
    "start": "1465559",
    "end": "1467900"
  },
  {
    "text": "environments in our core calculus",
    "start": "1467900",
    "end": "1470679"
  },
  {
    "text": "essentially I will elaborate the",
    "start": "1470679",
    "end": "1473299"
  },
  {
    "text": "expression in the source level to a core",
    "start": "1473299",
    "end": "1476480"
  },
  {
    "text": "expression with the splice environments",
    "start": "1476480",
    "end": "1479120"
  },
  {
    "text": "where Iris flies is replaced by a fresh",
    "start": "1479120",
    "end": "1482480"
  },
  {
    "text": "Splash variable bond in the splash",
    "start": "1482480",
    "end": "1485120"
  },
  {
    "text": "environment of the quotation",
    "start": "1485120",
    "end": "1487580"
  },
  {
    "text": "here the simplest variable s captures",
    "start": "1487580",
    "end": "1489980"
  },
  {
    "text": "four elements the splice expression is",
    "start": "1489980",
    "end": "1492799"
  },
  {
    "text": "three generally if E3 itself contains",
    "start": "1492799",
    "end": "1496400"
  },
  {
    "text": "quotations and splices they will become",
    "start": "1496400",
    "end": "1498740"
  },
  {
    "text": "nested as environments",
    "start": "1498740",
    "end": "1501080"
  },
  {
    "text": "and the type of s",
    "start": "1501080",
    "end": "1502940"
  },
  {
    "text": "suppose it is taller than the type of",
    "start": "1502940",
    "end": "1505100"
  },
  {
    "text": "history is called and the level of e3 so",
    "start": "1505100",
    "end": "1509000"
  },
  {
    "text": "the level of s is the level of History",
    "start": "1509000",
    "end": "1510860"
  },
  {
    "text": "plus one and finally the tab context",
    "start": "1510860",
    "end": "1513620"
  },
  {
    "text": "here type context is empty even in",
    "start": "1513620",
    "end": "1516860"
  },
  {
    "text": "general this expression may contain",
    "start": "1516860",
    "end": "1518600"
  },
  {
    "text": "three variables which the type context",
    "start": "1518600",
    "end": "1520700"
  },
  {
    "text": "checks",
    "start": "1520700",
    "end": "1522620"
  },
  {
    "text": "and importantly the level here is also",
    "start": "1522620",
    "end": "1526340"
  },
  {
    "text": "the level of the quotation to which this",
    "start": "1526340",
    "end": "1528740"
  },
  {
    "text": "blessed variable is about",
    "start": "1528740",
    "end": "1530720"
  },
  {
    "text": "that is we buying these blessed",
    "start": "1530720",
    "end": "1533120"
  },
  {
    "text": "variables to the innermost surrounding",
    "start": "1533120",
    "end": "1535159"
  },
  {
    "text": "quotation at the same level",
    "start": "1535159",
    "end": "1537380"
  },
  {
    "text": "now what's the advantages of splashing",
    "start": "1537380",
    "end": "1540140"
  },
  {
    "text": "reference",
    "start": "1540140",
    "end": "1541400"
  },
  {
    "text": "first evaluation can be described",
    "start": "1541400",
    "end": "1543740"
  },
  {
    "text": "straightforwardly without the need to",
    "start": "1543740",
    "end": "1546380"
  },
  {
    "text": "check levels or inspect quotations",
    "start": "1546380",
    "end": "1549460"
  },
  {
    "text": "evaluation initially precedes as if",
    "start": "1549460",
    "end": "1552320"
  },
  {
    "text": "there is no staging and when it",
    "start": "1552320",
    "end": "1554480"
  },
  {
    "text": "encounters a quotation rather than",
    "start": "1554480",
    "end": "1556880"
  },
  {
    "text": "expecting e that evaluates its black",
    "start": "1556880",
    "end": "1559580"
  },
  {
    "text": "environments what which are exactly",
    "start": "1559580",
    "end": "1561799"
  },
  {
    "text": "those places inside quotations that",
    "start": "1561799",
    "end": "1564020"
  },
  {
    "text": "should be evaluated in the current stage",
    "start": "1564020",
    "end": "1566179"
  },
  {
    "text": "in this case E3",
    "start": "1566179",
    "end": "1568400"
  },
  {
    "text": "and this also allows this quotation to",
    "start": "1568400",
    "end": "1571760"
  },
  {
    "text": "be treated in an opaque manner that",
    "start": "1571760",
    "end": "1574220"
  },
  {
    "text": "gives more implementation freedom of",
    "start": "1574220",
    "end": "1576440"
  },
  {
    "text": "their representations",
    "start": "1576440",
    "end": "1579399"
  },
  {
    "text": "and here is one more Saturday as we have",
    "start": "1579440",
    "end": "1583220"
  },
  {
    "text": "said a splice is bound to the innermost",
    "start": "1583220",
    "end": "1586039"
  },
  {
    "text": "surrounding quotations at the same level",
    "start": "1586039",
    "end": "1588320"
  },
  {
    "text": "but this scheme does not account for the",
    "start": "1588320",
    "end": "1591320"
  },
  {
    "text": "case of splices with no such in closing",
    "start": "1591320",
    "end": "1594020"
  },
  {
    "text": "quotations",
    "start": "1594020",
    "end": "1595580"
  },
  {
    "text": "uh but we can show that those services",
    "start": "1595580",
    "end": "1597919"
  },
  {
    "text": "are exactly those places of negative",
    "start": "1597919",
    "end": "1600860"
  },
  {
    "text": "levels that should be evaluated at the",
    "start": "1600860",
    "end": "1603740"
  },
  {
    "text": "compare time and so for negatively",
    "start": "1603740",
    "end": "1605960"
  },
  {
    "text": "levels plus variables we will lift them",
    "start": "1605960",
    "end": "1608539"
  },
  {
    "text": "as top level definitions",
    "start": "1608539",
    "end": "1611000"
  },
  {
    "text": "and we will evaluate it before the rest",
    "start": "1611000",
    "end": "1613340"
  },
  {
    "text": "of the program",
    "start": "1613340",
    "end": "1616000"
  },
  {
    "text": "now we can formalize how Splash",
    "start": "1616460",
    "end": "1618679"
  },
  {
    "start": "1617000",
    "end": "1673000"
  },
  {
    "text": "environments and definitions are",
    "start": "1618679",
    "end": "1620779"
  },
  {
    "text": "introduced in the tab directed",
    "start": "1620779",
    "end": "1622700"
  },
  {
    "text": "elaboration process we are under some",
    "start": "1622700",
    "end": "1625340"
  },
  {
    "text": "type context we are going to elaborate",
    "start": "1625340",
    "end": "1627679"
  },
  {
    "text": "an expression from The Source level to",
    "start": "1627679",
    "end": "1630440"
  },
  {
    "text": "an expression in the core level and",
    "start": "1630440",
    "end": "1632240"
  },
  {
    "text": "produces as the best environment that",
    "start": "1632240",
    "end": "1634580"
  },
  {
    "text": "checks some Splash variables I'm going",
    "start": "1634580",
    "end": "1636919"
  },
  {
    "text": "to skip the details but interested the",
    "start": "1636919",
    "end": "1639200"
  },
  {
    "text": "audience can avoid our paper for more",
    "start": "1639200",
    "end": "1641419"
  },
  {
    "text": "details",
    "start": "1641419",
    "end": "1643400"
  },
  {
    "text": "far we have introduced our source",
    "start": "1643400",
    "end": "1645620"
  },
  {
    "text": "calculus and we have also introduced our",
    "start": "1645620",
    "end": "1648140"
  },
  {
    "text": "core calculus with input with Splash",
    "start": "1648140",
    "end": "1650419"
  },
  {
    "text": "environments which gives us more",
    "start": "1650419",
    "end": "1652340"
  },
  {
    "text": "implementation freedom for quotations",
    "start": "1652340",
    "end": "1655520"
  },
  {
    "text": "and we can also prove that our calculus",
    "start": "1655520",
    "end": "1659720"
  },
  {
    "text": "is a type sound in the sense that a",
    "start": "1659720",
    "end": "1662059"
  },
  {
    "text": "wheel type the source expression",
    "start": "1662059",
    "end": "1663679"
  },
  {
    "text": "elaborates to a well-typed core",
    "start": "1663679",
    "end": "1665539"
  },
  {
    "text": "expression",
    "start": "1665539",
    "end": "1667640"
  },
  {
    "text": "and this concludes our introduction of",
    "start": "1667640",
    "end": "1670220"
  },
  {
    "text": "staging with classes",
    "start": "1670220",
    "end": "1673480"
  },
  {
    "start": "1673000",
    "end": "1781000"
  },
  {
    "text": "this is still undergoing",
    "start": "1677779",
    "end": "1680179"
  },
  {
    "text": "here we briefly touch on possible",
    "start": "1680179",
    "end": "1682279"
  },
  {
    "text": "interactions of this work with features",
    "start": "1682279",
    "end": "1684320"
  },
  {
    "text": "in GHC first tap inference",
    "start": "1684320",
    "end": "1687200"
  },
  {
    "text": "so type inference for stage the",
    "start": "1687200",
    "end": "1689059"
  },
  {
    "text": "constraint will be straightforward and",
    "start": "1689059",
    "end": "1690919"
  },
  {
    "text": "the modification will be to check the",
    "start": "1690919",
    "end": "1693260"
  },
  {
    "text": "levels of constraints and early solve",
    "start": "1693260",
    "end": "1695360"
  },
  {
    "text": "goes with evidence at the red level",
    "start": "1695360",
    "end": "1698659"
  },
  {
    "text": "and the local constraints can be",
    "start": "1698659",
    "end": "1700460"
  },
  {
    "text": "introduced by for example pattern",
    "start": "1700460",
    "end": "1702200"
  },
  {
    "text": "matches rgdts and we should be able to",
    "start": "1702200",
    "end": "1704960"
  },
  {
    "text": "treat them similarly to type class",
    "start": "1704960",
    "end": "1706880"
  },
  {
    "text": "constraints namely we want you to keep",
    "start": "1706880",
    "end": "1708980"
  },
  {
    "text": "check of the level at which a customer",
    "start": "1708980",
    "end": "1710779"
  },
  {
    "text": "is introduced and used",
    "start": "1710779",
    "end": "1712940"
  },
  {
    "text": "and Quantified constraints are more",
    "start": "1712940",
    "end": "1715400"
  },
  {
    "text": "elaborate form of type class constraints",
    "start": "1715400",
    "end": "1717559"
  },
  {
    "text": "which is not modeled in this work and",
    "start": "1717559",
    "end": "1720559"
  },
  {
    "text": "the future work is needed to study more",
    "start": "1720559",
    "end": "1722720"
  },
  {
    "text": "formally such interaction but we can",
    "start": "1722720",
    "end": "1724760"
  },
  {
    "text": "imagine one extra constraint resolution",
    "start": "1724760",
    "end": "1727159"
  },
  {
    "text": "rule should be like a constraint of a",
    "start": "1727159",
    "end": "1729559"
  },
  {
    "text": "code C C12 C2 introduces code CC1 to",
    "start": "1729559",
    "end": "1734000"
  },
  {
    "text": "colon cc2",
    "start": "1734000",
    "end": "1735679"
  },
  {
    "text": "and finally in today's GHC",
    "start": "1735679",
    "end": "1737480"
  },
  {
    "text": "implementation I'll type the code",
    "start": "1737480",
    "end": "1738980"
  },
  {
    "text": "representations are only tab checked at",
    "start": "1738980",
    "end": "1741799"
  },
  {
    "text": "Splash States",
    "start": "1741799",
    "end": "1743120"
  },
  {
    "text": "but with our formalization here code",
    "start": "1743120",
    "end": "1745760"
  },
  {
    "text": "representation will need to content type",
    "start": "1745760",
    "end": "1747980"
  },
  {
    "text": "information especially dictionaries so",
    "start": "1747980",
    "end": "1750860"
  },
  {
    "text": "one option is GHC core terms which is",
    "start": "1750860",
    "end": "1753440"
  },
  {
    "text": "the simplest representation that",
    "start": "1753440",
    "end": "1755539"
  },
  {
    "text": "contains type information",
    "start": "1755539",
    "end": "1758799"
  },
  {
    "text": "if you are interested in this talk I",
    "start": "1759260",
    "end": "1761539"
  },
  {
    "text": "encourage you to read our paper for full",
    "start": "1761539",
    "end": "1764120"
  },
  {
    "text": "detail regarding the phone wisdom and",
    "start": "1764120",
    "end": "1766039"
  },
  {
    "text": "system it has Theory and this work would",
    "start": "1766039",
    "end": "1768620"
  },
  {
    "text": "have been impossible without my amazing",
    "start": "1768620",
    "end": "1770840"
  },
  {
    "text": "collaborators",
    "start": "1770840",
    "end": "1772460"
  },
  {
    "text": "with that I just want to thank all of",
    "start": "1772460",
    "end": "1774980"
  },
  {
    "text": "you for your attention and I will leave",
    "start": "1774980",
    "end": "1776840"
  },
  {
    "text": "the rest of our time for questions",
    "start": "1776840",
    "end": "1780460"
  }
]