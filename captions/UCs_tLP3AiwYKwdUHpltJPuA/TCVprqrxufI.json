[
  {
    "start": "0",
    "end": "123000"
  },
  {
    "text": "[Music] it's great to be here again today this",
    "start": "6990",
    "end": "12200"
  },
  {
    "text": "has been a really awesome conference my name is Chris Muntz currently I am a senior developer",
    "start": "12200",
    "end": "17930"
  },
  {
    "text": "advocate for server list from Amazon Web Services based in our New York City office basically what I do is focus on",
    "start": "17930",
    "end": "24410"
  },
  {
    "text": "interfacing with folks like all of you here in the room so my my main focus is to work with AWS is developer customers",
    "start": "24410",
    "end": "31550"
  },
  {
    "text": "on understanding what service can mean for them how they think about service I think about service architectures now",
    "start": "31550",
    "end": "37340"
  },
  {
    "text": "it's interesting is that I myself or whose iPhone is kind of trusting I myself am NOT a developer I actually come from much more of a traditional",
    "start": "37340",
    "end": "43310"
  },
  {
    "text": "infrastructure and operations background I spent plenty of time and data centers managing large Linux farms of servers",
    "start": "43310",
    "end": "50150"
  },
  {
    "text": "and doing things like configuration management and all sorts of stuff like that but a couple years ago kind of",
    "start": "50150",
    "end": "57050"
  },
  {
    "text": "right after AWS launched a product called lambda which I'll be talking about today I really have come to see",
    "start": "57050",
    "end": "62149"
  },
  {
    "text": "that this this concept of star bliss is the future and so I am very privileged and lucky enough to spend all my time",
    "start": "62149",
    "end": "68750"
  },
  {
    "text": "basically focused on this so why are we here today in this talk so there's been a number of talks so far this week",
    "start": "68750",
    "end": "74929"
  },
  {
    "text": "already on server lists on what it maybe does mean and maybe doesn't mean it's definitely a term in a buzz word that's",
    "start": "74929",
    "end": "80960"
  },
  {
    "text": "grown to mean a lot of things in the industry one quick you know thing that I always like to address is that yes we",
    "start": "80960",
    "end": "87979"
  },
  {
    "text": "understand that there are servers behind the scenes of server lists but at the end of the day one of the key aspects of",
    "start": "87979",
    "end": "93679"
  },
  {
    "text": "it is that you don't deal with them at all and however though this is not the point well we see service meeting is",
    "start": "93679",
    "end": "99799"
  },
  {
    "text": "actually I think kind of the next evolution in how people are thinking about building applications and",
    "start": "99799",
    "end": "106369"
  },
  {
    "text": "architectures and so we've kind of transitioned from mainframes up to server client up to the web and even",
    "start": "106369",
    "end": "112429"
  },
  {
    "text": "into things like micro services but what service represents is really the whole next life cycle of how I think",
    "start": "112429",
    "end": "117859"
  },
  {
    "text": "developers are going to think about building applications so what does serverless mean to us here at AWS really",
    "start": "117859",
    "end": "125179"
  },
  {
    "start": "123000",
    "end": "217000"
  },
  {
    "text": "comes down to kind of four guiding principles that we use when we basically will or will not label a product as a",
    "start": "125179",
    "end": "131090"
  },
  {
    "text": "service product so obviously the concept of there being no servers to provision",
    "start": "131090",
    "end": "136430"
  },
  {
    "text": "or manage and this even means things like containers so a product for us to be server lists",
    "start": "136430",
    "end": "141620"
  },
  {
    "text": "you never think about the operating system there's no patch management there's no RDP or SSH there's nothing",
    "start": "141620",
    "end": "147950"
  },
  {
    "text": "like an operating system license that you want to think about and realistically you have no concept of those underlying physical servers or",
    "start": "147950",
    "end": "155180"
  },
  {
    "text": "virtual servers or containers that might be existing in that platform it should scale with usage so as traffic or",
    "start": "155180",
    "end": "161629"
  },
  {
    "text": "requests or data points come in the the service product or platform should automatically scale to meet that what",
    "start": "161629",
    "end": "168019"
  },
  {
    "text": "that means is that you never have to think about things like capacity planning so you never have to pay for idle realistically thinking about",
    "start": "168019",
    "end": "174680"
  },
  {
    "text": "capacity planning is kind of a business decision on how much idle do we want to pay for in hopes that at some point we",
    "start": "174680",
    "end": "180709"
  },
  {
    "text": "have a customer workload that will come and consume some larger percentage of that capacity over time the lastly",
    "start": "180709",
    "end": "186950"
  },
  {
    "text": "things like high availability and fault tolerance are built in and so that's very key today when developers are thinking about how they structure their",
    "start": "186950",
    "end": "193549"
  },
  {
    "text": "architectures we're in physical worlds or even the virtual machine world even",
    "start": "193549",
    "end": "198650"
  },
  {
    "text": "the container worlds these are things that you still are typically spending a considerable amount of time thinking about and architecting for so kind of",
    "start": "198650",
    "end": "205639"
  },
  {
    "text": "for overall again guiding principles in terms of what we feel service means and I think it aligns pretty well with how",
    "start": "205639",
    "end": "211730"
  },
  {
    "text": "most of the industry is talking about it today now we're service kind of starter for us",
    "start": "211730",
    "end": "216739"
  },
  {
    "text": "here at AWS is around his products symbols right kind of in the middle here of lambda and so lambda is a compute",
    "start": "216739",
    "end": "223730"
  },
  {
    "start": "217000",
    "end": "272000"
  },
  {
    "text": "product that we have here at AWS today many of you I think maybe are familiar with it but if not I'm sort some time",
    "start": "223730",
    "end": "229760"
  },
  {
    "text": "talking a little bit further about it and when we talk about lambda we talk about it in the sense of being in the middle of what we'd call a service",
    "start": "229760",
    "end": "235489"
  },
  {
    "text": "architecture and so with lambda you have a concept of an event source some sort of triggering mechanism that is going to",
    "start": "235489",
    "end": "241519"
  },
  {
    "text": "cause a lambda function to be invoked and then that lambda function can do basically whatever it is that you wanted",
    "start": "241519",
    "end": "246829"
  },
  {
    "text": "to do talk to other databases other api's hughes caches data stores",
    "start": "246829",
    "end": "252079"
  },
  {
    "text": "what-have-you based on what it is that your application needs to do and so a service architecture again is pretty",
    "start": "252079",
    "end": "257599"
  },
  {
    "text": "much well we'll always have some sort of event source will always have lambda at some point during compute and then may",
    "start": "257599",
    "end": "263630"
  },
  {
    "text": "or may not have other services that you might be talking to so you could potentially have all of your business logic exists just in lambda and when it",
    "start": "263630",
    "end": "272060"
  },
  {
    "start": "272000",
    "end": "494000"
  },
  {
    "text": "comes to kind of the architecture or the use cases that we see for survival it's actually a number of things so web",
    "start": "272060",
    "end": "278210"
  },
  {
    "text": "applications basically the ability to power things like static websites or things like single page apps that's very",
    "start": "278210",
    "end": "284119"
  },
  {
    "text": "common and something that we see growing especially when we see people moving more towards the single webpage",
    "start": "284119",
    "end": "290300"
  },
  {
    "text": "applications with things like react and other JavaScript frameworks that behave similarly backends so things like",
    "start": "290300",
    "end": "297169"
  },
  {
    "text": "micro-services which has been a big topic this week here at the conference see people building that using lambda",
    "start": "297169",
    "end": "303050"
  },
  {
    "text": "and server lists data processing so real-time stream analytics ingest of things like user clicks data points from",
    "start": "303050",
    "end": "310759"
  },
  {
    "text": "IOT related workloads all sorts of things like log analysis and other kind",
    "start": "310759",
    "end": "315919"
  },
  {
    "text": "of things where you get massive quantities of data and typically organizations would do things like batch",
    "start": "315919",
    "end": "321680"
  },
  {
    "text": "process them and some sort of semi regular interval well people want that that information processed almost",
    "start": "321680",
    "end": "327499"
  },
  {
    "text": "immediately these days and so we could potentially talk about how real real time needs to be but in the case of",
    "start": "327499",
    "end": "333289"
  },
  {
    "text": "streaming workloads it usually means very rapid ingest typically in the order of seconds and this is actually kind of",
    "start": "333289",
    "end": "339619"
  },
  {
    "text": "today basically dollar-for-dollar one of the biggest use cases that we see for lambda and serverless today things like",
    "start": "339619",
    "end": "347389"
  },
  {
    "text": "chat BOTS so how you interface with your customers or maybe internally inside your organization also rapidly changing",
    "start": "347389",
    "end": "353259"
  },
  {
    "text": "I've seen things like internal Enterprise chat BOTS that they use for you know kind of disseminating",
    "start": "353259",
    "end": "359839"
  },
  {
    "text": "information that normally would have existed maybe in a wiki or a SharePoint somewhere but then we also see people putting them publicly on our web sites",
    "start": "359839",
    "end": "366229"
  },
  {
    "text": "to act as kind of like sales type of enablement bots or even customer support bots and that continues to grow in in",
    "start": "366229",
    "end": "372740"
  },
  {
    "text": "use Alexa something that I talked about yesterday actually we attempted to build",
    "start": "372740",
    "end": "378619"
  },
  {
    "text": "an Alexa skill on stage live or any of you in that talk at all yesterday a couple of you so it was kind of a race",
    "start": "378619",
    "end": "384889"
  },
  {
    "text": "against the clock and we got to see some interesting aspects about Alexa and the Alexa voice service and you know it's",
    "start": "384889",
    "end": "392240"
  },
  {
    "text": "understanding of my New York drawl as it were so that was kind of interesting session but Alexa are really growing in",
    "start": "392240",
    "end": "398809"
  },
  {
    "text": "terms of power and capability there's something like over 17,000 Alexa skills today and you can think of an Alexis",
    "start": "398809",
    "end": "405379"
  },
  {
    "text": "skill as kind of a micro voice controlled applique that lives inside of a device that's",
    "start": "405379",
    "end": "411590"
  },
  {
    "text": "powered by a LexA so you could say things like Alexa turned my lights on or turned my lights off or tell me the",
    "start": "411590",
    "end": "417590"
  },
  {
    "text": "weather or tell me my my current you know bank account number or get me a",
    "start": "417590",
    "end": "422930"
  },
  {
    "text": "pizza there's all sorts of things that you can do with Alexa and then lastly I to automation which is actually where I",
    "start": "422930",
    "end": "428270"
  },
  {
    "text": "think a lot of people start with lambda is using it inside of AWS to do things like glue together various services and",
    "start": "428270",
    "end": "434990"
  },
  {
    "text": "components inside of your infrastructure and I should say actually using this in other places I actually have one customer that uses lambda as part of a",
    "start": "434990",
    "end": "442669"
  },
  {
    "text": "framework for managing physical network gear inside of their data center so they built a management API in front of",
    "start": "442669",
    "end": "448540"
  },
  {
    "text": "Juniper devices actually and have been successful in building this kind of really cool interface in front of",
    "start": "448540",
    "end": "453980"
  },
  {
    "text": "physical hardware and physical data centers so again number of really kind of common use cases here today I'm gonna",
    "start": "453980",
    "end": "461270"
  },
  {
    "text": "focus a little bit more on the web application aspect but happy to potentially talk about the rest of these",
    "start": "461270",
    "end": "466340"
  },
  {
    "text": "outside of this so for those of you that are new where do you start so this is really a whole new world again in terms",
    "start": "466340",
    "end": "472820"
  },
  {
    "text": "of how you think about applications and for a number of folks that I've talked to it can be a little daunting to go",
    "start": "472820",
    "end": "478070"
  },
  {
    "text": "from the model of I have a server and typically that contains everything about my application or even a multi tier",
    "start": "478070",
    "end": "483590"
  },
  {
    "text": "architecture to this thing where servers no longer exists and so kind of the foundational construct that you've used",
    "start": "483590",
    "end": "489320"
  },
  {
    "text": "from a development paradigm is no longer around so my first tip is actually to start with a framework so there are a",
    "start": "489320",
    "end": "496610"
  },
  {
    "start": "494000",
    "end": "606000"
  },
  {
    "text": "number of frameworks that exist out there and what these are gonna do is kind of greatly simplify what is involved in you building a service",
    "start": "496610",
    "end": "503330"
  },
  {
    "text": "application there's actually many more than the ones that are up here these are some of the most popular ones that I've",
    "start": "503330",
    "end": "508550"
  },
  {
    "text": "seen and I know the creator of clutter JS spoke yesterday and really what kind",
    "start": "508550",
    "end": "515210"
  },
  {
    "text": "of differentiates some of these is the languages that they're supporting or capabilities like multi cloud",
    "start": "515210",
    "end": "521300"
  },
  {
    "text": "capabilities or other types of aspects or nuances around like the languages",
    "start": "521300",
    "end": "526339"
  },
  {
    "text": "that they support so Claudia with just an example here is a JavaScript",
    "start": "526339",
    "end": "531350"
  },
  {
    "text": "framework hence the Jas in its name and with Claudia they have a really really really easy model for building API backends so",
    "start": "531350",
    "end": "539330"
  },
  {
    "text": "you can see here in what is roughly - the fact that it kind of squished on the slide roughly about five lines of code with these five",
    "start": "539330",
    "end": "546890"
  },
  {
    "text": "lines of code and the command that's right here at the bottom of the slide I get a lambda function and an API gateway",
    "start": "546890",
    "end": "553190"
  },
  {
    "text": "and all the integrator together and effectively I have an API back-end and obviously hello world is not a lot of",
    "start": "553190",
    "end": "559880"
  },
  {
    "text": "complicated business logic but again this is the scaffolding needed for a very basic API that could grow to become",
    "start": "559880",
    "end": "566420"
  },
  {
    "text": "very powerful over time a chalice is actually a framework that came out of us",
    "start": "566420",
    "end": "571940"
  },
  {
    "text": "here at AWS what's interesting is this didn't come from any of the service product teams it actually came from our",
    "start": "571940",
    "end": "577790"
  },
  {
    "text": "SDK team they had an itch to scratch around building a framework to help them out and they ended up building this",
    "start": "577790",
    "end": "583700"
  },
  {
    "text": "product chalice kind of on the side and so it's an open-source product that you can go and contribute to and read about",
    "start": "583700",
    "end": "588740"
  },
  {
    "text": "and so this is Python based similar kind of thing to claudia about five lines and I get an API right so this is compute",
    "start": "588740",
    "end": "595490"
  },
  {
    "text": "capability API gateway acting as the front-end we can actually do quite a lot of really really kind of advanced things",
    "start": "595490",
    "end": "602270"
  },
  {
    "text": "with this much like most the other frameworks so let me just dive just a little bit deeper briefly here into",
    "start": "602270",
    "end": "608480"
  },
  {
    "start": "606000",
    "end": "686000"
  },
  {
    "text": "chalice and why I won't expect you to read everything that's on this slide it's roughly about 30 ish or so lines of",
    "start": "608480",
    "end": "614630"
  },
  {
    "text": "code what is inside of this though is actually for API endpoints in terms of",
    "start": "614630",
    "end": "620630"
  },
  {
    "text": "what we would call an application route so the type of thing that ends at the kind of the first part of a URI on the",
    "start": "620630",
    "end": "626960"
  },
  {
    "text": "URL for an API gateway and then as part of that there's things like built-in error handling and various HTTP methods",
    "start": "626960",
    "end": "632840"
  },
  {
    "text": "support there's also integrated support for different authentication authorization capabilities and again I'm getting all",
    "start": "632840",
    "end": "638600"
  },
  {
    "text": "of this in about 30 lines of code so when you're starting off when you're starting out new in this space I",
    "start": "638600",
    "end": "644030"
  },
  {
    "text": "definitely recommend you take a look at a framework and try to work off of that now let's say that you had an existing",
    "start": "644030",
    "end": "650240"
  },
  {
    "text": "application and or maybe you have a language of choice that there isn't a",
    "start": "650240",
    "end": "655250"
  },
  {
    "text": "framework that you like it so what we have at AWS now is a tool of ours called Sam",
    "start": "655250",
    "end": "660500"
  },
  {
    "text": "you'll also notice Sam which is our little mascot for server lists over in the expo hall we've got a lot of",
    "start": "660500",
    "end": "665900"
  },
  {
    "text": "stickers for Sam we're really trying to put Sam into all sorts of things but what Sam is is actually a template",
    "start": "665900",
    "end": "671870"
  },
  {
    "text": "driven model for defining serverless applications to really kind of simplify what it takes to build and deploy them",
    "start": "671870",
    "end": "678410"
  },
  {
    "text": "and it's completely unattended from the language standpoint it basically is just used as an infrastructure management",
    "start": "678410",
    "end": "684470"
  },
  {
    "text": "tool so an example of a SAM template here what we've got is about roughly 20",
    "start": "684470",
    "end": "689750"
  },
  {
    "start": "686000",
    "end": "1099000"
  },
  {
    "text": "or so lines of code and what this actually represents is the very top we have some headers that kind of tell the",
    "start": "689750",
    "end": "696380"
  },
  {
    "text": "service what this templates going to do and then we have two resources the first is a service function the second is",
    "start": "696380",
    "end": "703220"
  },
  {
    "text": "what's called a simple table a simple table I'll cover real quick this is actually gonna create for you a dynamodb",
    "start": "703220",
    "end": "708860"
  },
  {
    "text": "table and all you need is essentially this one line of code and then a name for it and a couple months ago we",
    "start": "708860",
    "end": "714470"
  },
  {
    "text": "launched auto-scaling for DynamoDB so we do consider it now a server list no sequel database product but up above",
    "start": "714470",
    "end": "721430"
  },
  {
    "text": "here this server list function type what you see is kind of a number of things that would be used to categorize lambda",
    "start": "721430",
    "end": "727399"
  },
  {
    "text": "function so where my code lives where the handler for that code lives and I'll talk about this here in a moment the",
    "start": "727399",
    "end": "733490"
  },
  {
    "text": "language that I'm using permissions that I want to give my lambda function and then down below here there's a concept",
    "start": "733490",
    "end": "739130"
  },
  {
    "text": "of an event and so I have an event that is of type API and then you see some API properties that are defined below and so",
    "start": "739130",
    "end": "746540"
  },
  {
    "text": "what will come from this is a lambda function an API gateway a dynamodb table and then all of the related kind of glue",
    "start": "746540",
    "end": "753560"
  },
  {
    "text": "components to combine all of these now if you were to do this in the console this would be quite a number of clicks",
    "start": "753560",
    "end": "758740"
  },
  {
    "text": "so you know try to think about avoiding those and instead use again one of these frameworks just to give kind of a",
    "start": "758740",
    "end": "764839"
  },
  {
    "text": "slightly better visualization this is from an example that I'll show here in just a little while what I have is from",
    "start": "764839",
    "end": "770329"
  },
  {
    "text": "roughly lines 9 through 25 all of kind of the meat of this Sam template that I",
    "start": "770329",
    "end": "775490"
  },
  {
    "text": "have of what gets created from it is roughly the six resources that you see here so again really really easy to get",
    "start": "775490",
    "end": "782000"
  },
  {
    "text": "started from this when you're just trying to figure out what the servlet space looks like in a lot of power 2",
    "start": "782000",
    "end": "787130"
  },
  {
    "text": "frameworks as well as things like Sam and then just a couple of about a month",
    "start": "787130",
    "end": "793699"
  },
  {
    "text": "and a half or so ago we actually launched a tool for local testing of service applications so you can actually",
    "start": "793699",
    "end": "798980"
  },
  {
    "text": "now do local kind of debugging tests of both API workloads and then things that would connect to a",
    "start": "798980",
    "end": "805640"
  },
  {
    "text": "lambda function via say like a streaming invocation or some sort of other event and so this again kind of simplifies the",
    "start": "805640",
    "end": "811670"
  },
  {
    "text": "developer lifecycle which is pretty key when you're just starting out so let's get hands-on with some of this let me",
    "start": "811670",
    "end": "817610"
  },
  {
    "text": "show you actually an example of a lambda function and I'm actually going to show you some Sam and Sam local as well so",
    "start": "817610",
    "end": "830899"
  },
  {
    "text": "the example that I'm going to pull from them is actually something that you could go and find yourself and play with and if your AWS account still is covered",
    "start": "830899",
    "end": "839149"
  },
  {
    "text": "by the free tier you could play with this with absolutely no cost if it isn't the free tier you could basically run",
    "start": "839149",
    "end": "844580"
  },
  {
    "text": "this demo for pennies for probably some number of weeks of time and it's actually pretty straightforward what it",
    "start": "844580",
    "end": "850640"
  },
  {
    "text": "does is it has you launched a website and I'll show you this here in motion where our friend Sam kind of bounces",
    "start": "850640",
    "end": "857480"
  },
  {
    "text": "around the screen and it includes all of this front-end code in s3 then you have",
    "start": "857480",
    "end": "864290"
  },
  {
    "text": "an api gateway and a lambda function that glues it all together so this is my",
    "start": "864290",
    "end": "869480"
  },
  {
    "text": "example here of the sam farm so as we see I have my wonderful friend Sam here bouncing around there's some collision",
    "start": "869480",
    "end": "875600"
  },
  {
    "text": "detection so that they don't overlap and essentially what we do is we have a single lambda function and all the dis",
    "start": "875600",
    "end": "883160"
  },
  {
    "text": "lambda function really does is spit back out to me a Sam count so a sam count is",
    "start": "883160",
    "end": "889790"
  },
  {
    "text": "the combination of it's just a little bigger combination of variable called",
    "start": "889790",
    "end": "896720"
  },
  {
    "text": "var Sam count and then about two lines down there is a multiplier which I can",
    "start": "896720",
    "end": "902270"
  },
  {
    "text": "either pull in from an environment variable or have it statically set and then basically it gives me the total",
    "start": "902270",
    "end": "908300"
  },
  {
    "text": "count of Sam's and so the API is super super super basic so I have this running",
    "start": "908300",
    "end": "913670"
  },
  {
    "text": "here locally on my my laptop I've also now gone and actually fired up just",
    "start": "913670",
    "end": "920209"
  },
  {
    "text": "right before we started here the Sam local and actually let me show you real",
    "start": "920209",
    "end": "926360"
  },
  {
    "text": "quick here so this is the Sam templates it's the whole thing this is the same",
    "start": "926360",
    "end": "932240"
  },
  {
    "text": "template for this demo so again roughly from lines 9 through 26 it's kind of the",
    "start": "932240",
    "end": "937610"
  },
  {
    "text": "whole meat of what I'm going to do so this is a node.js 4.3 runtime index that",
    "start": "937610",
    "end": "943940"
  },
  {
    "text": "handle my handler the code URI which has a dot in a slash I'll talk about here a little bit later and we see some environment",
    "start": "943940",
    "end": "950780"
  },
  {
    "text": "variables and then we see the event mapping down below so when I actually",
    "start": "950780",
    "end": "955790"
  },
  {
    "text": "have this template here and I'm running against Sam local what I have done is",
    "start": "955790",
    "end": "961340"
  },
  {
    "text": "just basically gone and executed it so Sam local start API and reference the",
    "start": "961340",
    "end": "966500"
  },
  {
    "text": "Sam template and then what that does is take my code bundle it into a docker",
    "start": "966500",
    "end": "971990"
  },
  {
    "text": "container running locally on my laptop such that I can go to the interface that it gives me here on localhost and be",
    "start": "971990",
    "end": "978740"
  },
  {
    "text": "able to call my API now I just have a single API endpoint but if I had multiples it would show me kind of the",
    "start": "978740",
    "end": "983960"
  },
  {
    "text": "full mapping for all of them so the basic here",
    "start": "983960",
    "end": "996130"
  },
  {
    "text": "okay great so this is the the number returned by my API right now and this is",
    "start": "998480",
    "end": "1005259"
  },
  {
    "text": "a factor of that currently in here I have the number 10 and a multiplier of 1",
    "start": "1005259",
    "end": "1010919"
  },
  {
    "text": "then I can actually go back to the same local window here and what I get is the same output that I would get from this",
    "start": "1010919",
    "end": "1016869"
  },
  {
    "text": "lambda function if it was running in the lambda service so if you're familiar with lambda at all you'll see here the same kind of output and error lines or",
    "start": "1016869",
    "end": "1025240"
  },
  {
    "text": "not Airlines in this case but the output lines from this function are put out right here down below I have the",
    "start": "1025240",
    "end": "1030730"
  },
  {
    "text": "duration that it took that builds duration and the amount of memory used so a pretty cool really easy kind of",
    "start": "1030730",
    "end": "1037510"
  },
  {
    "text": "straightforward thing for me to do local testing with and there's a lot more capabilities of this so one one quick",
    "start": "1037510",
    "end": "1043990"
  },
  {
    "text": "thing that I'll show so let's say that I goof up here and I turn Sam cow into cat",
    "start": "1043990",
    "end": "1049960"
  },
  {
    "text": "now cat is not a valid number as most of you are probably well aware so if I go",
    "start": "1049960",
    "end": "1055899"
  },
  {
    "text": "and refresh this and I get an error message more importantly than that I could see from my local test tool that",
    "start": "1055899",
    "end": "1062799"
  },
  {
    "text": "it told me that guess what cat is not defined and so that is a problem and",
    "start": "1062799",
    "end": "1067830"
  },
  {
    "text": "tells you where that line is that's broken and so it makes it really easy for me to go back in and fix that so",
    "start": "1067830",
    "end": "1075760"
  },
  {
    "text": "again in terms of starting out you definitely want to think about a framework if you really are averse to",
    "start": "1075760",
    "end": "1081279"
  },
  {
    "text": "your framework definitely use a tool like Sam and Sam local because it's gonna make your development lifecycle",
    "start": "1081279",
    "end": "1086380"
  },
  {
    "text": "just that much more rapid so let's get up just a little bit deeper into lambda",
    "start": "1086380",
    "end": "1091419"
  },
  {
    "text": "for those of you who aren't that familiar with it and kind of talk a little bit more about what happens behind the scenes at lambda and what you",
    "start": "1091419",
    "end": "1096760"
  },
  {
    "text": "can do to kind of play with and configure lambda so with lambda I mentioned that basically a service",
    "start": "1096760",
    "end": "1103120"
  },
  {
    "start": "1099000",
    "end": "1281000"
  },
  {
    "text": "architecture has some sort of invocation model or method then you have your function and whatever that function does",
    "start": "1103120",
    "end": "1108130"
  },
  {
    "text": "today there's basically three different types of invocation models that exist for lambda so we have synchronous",
    "start": "1108130",
    "end": "1113679"
  },
  {
    "text": "effectively a push we have a synchronous which more of kind of an event and then we have stream",
    "start": "1113679",
    "end": "1118840"
  },
  {
    "text": "based and so the use cases across them really kind of vary across what integration product you method for",
    "start": "1118840",
    "end": "1124480"
  },
  {
    "text": "integration you want to put it so we see here an example of an API gateway where I'm gonna make an API call and I'm gonna",
    "start": "1124480",
    "end": "1129760"
  },
  {
    "text": "expect that my API call is immediately returned and so that's kind of a very traditional kind of synchronous push model for using",
    "start": "1129760",
    "end": "1136150"
  },
  {
    "text": "something like the API endpoint and something like lambda there are also things like the asynchronous",
    "start": "1136150",
    "end": "1141670"
  },
  {
    "text": "event-driven so this is stuff like I have let's say you have customer data that comes to you whether it be an image",
    "start": "1141670",
    "end": "1148510"
  },
  {
    "text": "file an audio or video file or maybe even things like a document and you want",
    "start": "1148510",
    "end": "1153850"
  },
  {
    "text": "to go through and do text processing on that if you want to generate metadata from that maybe you want to take an",
    "start": "1153850",
    "end": "1159400"
  },
  {
    "text": "image and resize it or convert it into a different format and so this is a model where you're typically not looking for a",
    "start": "1159400",
    "end": "1164440"
  },
  {
    "text": "response right away but you want to do something out-of-band and so that's where the asynchronous event-driven",
    "start": "1164440",
    "end": "1169630"
  },
  {
    "text": "models fit in really well and again that's something that's kind of the the bread and butter of what people use lambda for these days really kind of",
    "start": "1169630",
    "end": "1175750"
  },
  {
    "text": "straightforward use case but really powerful and easily scales the lastly stream based this is where you would",
    "start": "1175750",
    "end": "1181810"
  },
  {
    "text": "basically connect it up with something like DynamoDB or Kinesis today where as requests come in so in the case of",
    "start": "1181810",
    "end": "1188230"
  },
  {
    "text": "dynamodb people are writing updating or deleting records in your database it will actually stream those changes back",
    "start": "1188230",
    "end": "1194830"
  },
  {
    "text": "and cause a lambda invocation or if you're ingesting data with something like Kinesis which if you're not",
    "start": "1194830",
    "end": "1200830"
  },
  {
    "text": "familiar with it it's it's kind of a mass-scale ingest service so very similar to a",
    "start": "1200830",
    "end": "1207460"
  },
  {
    "text": "Kafka a number of other things but basically you can just kind of toss records into Kinesis and eventually it",
    "start": "1207460",
    "end": "1213550"
  },
  {
    "text": "could be processed by a lambda function and again this is really useful for things like IOT workloads and extreme",
    "start": "1213550",
    "end": "1219220"
  },
  {
    "text": "analysis and log analysis and things like that so three different kind of",
    "start": "1219220",
    "end": "1224290"
  },
  {
    "text": "main execution or invocation models that we have and then what exists today is a little over 20 or so services that are",
    "start": "1224290",
    "end": "1231730"
  },
  {
    "text": "integrated today from the ada vs side of things so just kind of a brief example of what is possible if those things like",
    "start": "1231730",
    "end": "1237220"
  },
  {
    "text": "data stores things like development management tools this is effectively the infrastructure glue use case that I was",
    "start": "1237220",
    "end": "1243610"
  },
  {
    "text": "talking about before things like endpoints so API gateway AWS is IOT platform step functions which",
    "start": "1243610",
    "end": "1250570"
  },
  {
    "text": "we'll talk about here briefly things like Alexa again so Alexa can directly invoke a lambda function as part of you",
    "start": "1250570",
    "end": "1256960"
  },
  {
    "text": "conversing with it and then lastly we have things like message services whether it actually be things like SES",
    "start": "1256960",
    "end": "1263830"
  },
  {
    "text": "or SNS or also the ability to Cronje as someone who spent a lot of time managing servers managing cron jobs is",
    "start": "1263830",
    "end": "1270220"
  },
  {
    "text": "always such a pain in the ass and so you can have a completely kind of managed abstracted away for you system for doing",
    "start": "1270220",
    "end": "1276639"
  },
  {
    "text": "cron jobs and it's actually really really pretty cool so just talking a",
    "start": "1276639",
    "end": "1282340"
  },
  {
    "start": "1281000",
    "end": "1369000"
  },
  {
    "text": "little bit deeper about two of the products that are like really tightly aligned with lambda so API gateway is an",
    "start": "1282340",
    "end": "1288009"
  },
  {
    "text": "API gateway we weren't the first people to come up with this product as the concept but what Amazon's API gateway",
    "start": "1288009",
    "end": "1294309"
  },
  {
    "text": "does is give you things like caching both in the gateway and at the edge the",
    "start": "1294309",
    "end": "1299379"
  },
  {
    "text": "ability to get logs and metrics from it you can actually put API gateway in front of another lambda but pretty much",
    "start": "1299379",
    "end": "1305139"
  },
  {
    "text": "any sort of HTTP or HTTPS endpoint that you have so we have customers that will put a peg gateway in front of things",
    "start": "1305139",
    "end": "1311139"
  },
  {
    "text": "like on-prem resources or obviously things like ec2 and API gateway comes",
    "start": "1311139",
    "end": "1318039"
  },
  {
    "text": "with a lot of kind of really cool capabilities to for you so obviously it's gonna give the ability to build an API front-end but it also",
    "start": "1318039",
    "end": "1323950"
  },
  {
    "text": "has built into it things like DDoS protection throttling authentication and authorization mechanisms the ability to",
    "start": "1323950",
    "end": "1330970"
  },
  {
    "text": "do things like metering or to do usage tiers which are all really awesome things if you're ever building a",
    "start": "1330970",
    "end": "1337059"
  },
  {
    "text": "consumed API by say external developers it's also the kind of thing that there's really no reason for you to write your",
    "start": "1337059",
    "end": "1343090"
  },
  {
    "text": "own today so there exists kind of many different API gateway products on the market I would say if you're building",
    "start": "1343090",
    "end": "1348460"
  },
  {
    "text": "something that is an API you should always have some sort of API gateway that you're using and so with Amazon API",
    "start": "1348460",
    "end": "1354730"
  },
  {
    "text": "gateway we considered a service product there's no service to manage there's no scale to think about and again it can",
    "start": "1354730",
    "end": "1361269"
  },
  {
    "text": "alleviate things like authentication and authorization concerns which developers spend typically a lot of time on the",
    "start": "1361269",
    "end": "1369129"
  },
  {
    "start": "1369000",
    "end": "1448000"
  },
  {
    "text": "next another kind of product in the suite is AWS step functions so one",
    "start": "1369129",
    "end": "1374169"
  },
  {
    "text": "common thing when you have lambda functions is you know they're these small little kind of bite-sized amounts",
    "start": "1374169",
    "end": "1379690"
  },
  {
    "text": "of compute well rarely do we ever just need just a small little bite-sized amount of compute and so we often have",
    "start": "1379690",
    "end": "1385509"
  },
  {
    "text": "to do things like chain them together or have them invoked in reaction to each other then you want to handle things",
    "start": "1385509",
    "end": "1391059"
  },
  {
    "text": "like retries and failures and there's all sorts of logic that you want to put around there now you can put that logic",
    "start": "1391059",
    "end": "1396249"
  },
  {
    "text": "directly into your code but you end up running into issues with like the fact that a lambda function can",
    "start": "1396249",
    "end": "1401790"
  },
  {
    "text": "only run for up to five minutes today so if you have a lambda function calling another lambda function calling another lambda function if that first one times",
    "start": "1401790",
    "end": "1408870"
  },
  {
    "text": "out you lose basically the chain of everything below it and so step functions allows you to basically abstract all of that workflow knowledge",
    "start": "1408870",
    "end": "1416910"
  },
  {
    "text": "into the service itself and can do things like as you see above here are decision trees ability to capture",
    "start": "1416910",
    "end": "1423240"
  },
  {
    "text": "failure is ability to do parallel tasks to do certain sequential tasks path based on that you could actually also",
    "start": "1423240",
    "end": "1428940"
  },
  {
    "text": "handle things like custom error logic and so if you have kind of a multi-step workflow inside of an application this",
    "start": "1428940",
    "end": "1435300"
  },
  {
    "text": "also kind of again will alleviate the ability or the need for you to have to write the logic that exists between there so definitely take a look at step",
    "start": "1435300",
    "end": "1441870"
  },
  {
    "text": "functions again if you have those types of workloads let's get a little bit back to lambda so with lambda we've really I",
    "start": "1441870",
    "end": "1449010"
  },
  {
    "start": "1448000",
    "end": "1573000"
  },
  {
    "text": "think made it as almost as simple as possible as it can be from a compute product to think about how you you scale",
    "start": "1449010",
    "end": "1455190"
  },
  {
    "text": "it realistically there's kind of a single knob that you could turn with lambda and it's the amount of memory",
    "start": "1455190",
    "end": "1460350"
  },
  {
    "text": "that you want your function to be able to potentially ever consume what comes with that is a proportional amount of CPU and networking resources so you're",
    "start": "1460350",
    "end": "1467640"
  },
  {
    "text": "never gonna say I want to lambda function that has a 2.3 gigahertz you",
    "start": "1467640",
    "end": "1473640"
  },
  {
    "text": "know Xeon processor it's not the kind of thing that you're gonna care about when you're gonna say is I want to lambda function that has access to 512",
    "start": "1473640",
    "end": "1480060"
  },
  {
    "text": "megabytes of ram and then we're again going to align proportionately some percentage of a CPU core to that and so",
    "start": "1480060",
    "end": "1485910"
  },
  {
    "text": "if you do have a workload that is more compute intensive you're gonna crank up the memory because typically we find",
    "start": "1485910",
    "end": "1491010"
  },
  {
    "text": "that those are very well aligned and so this is again kind of the only knob that",
    "start": "1491010",
    "end": "1496530"
  },
  {
    "text": "you get but there is one caveat about this it's not always better for you to crank that knob all the way up and so we",
    "start": "1496530",
    "end": "1504270"
  },
  {
    "text": "have here as an example of calculating a thousand times all of the prime numbers less than a million and what you can see",
    "start": "1504270",
    "end": "1511530"
  },
  {
    "text": "here on the chart is so today lamda supports up to a gig and a half of memory this actually just compares from",
    "start": "1511530",
    "end": "1516990"
  },
  {
    "text": "a hundred 28 Meg's to just one gig if you look at the timing obviously the more amount of memory that we have the",
    "start": "1516990",
    "end": "1522600"
  },
  {
    "text": "faster that our function gets processed but from a cost perspective it's not necessarily the most cost efficient is",
    "start": "1522600",
    "end": "1530130"
  },
  {
    "text": "always the fastest and so you can see here that roughly if we were to compare cost the",
    "start": "1530130",
    "end": "1535800"
  },
  {
    "text": "first or 128 Meg's cost just about almost the same as a gig but if we were",
    "start": "1535800",
    "end": "1541980"
  },
  {
    "text": "really looking for maybe an optimal time versus cost model the 512 megabytes",
    "start": "1541980",
    "end": "1547680"
  },
  {
    "text": "might have actually been a better fit and so you want to think about kind of in your workload do I care about speed",
    "start": "1547680",
    "end": "1552840"
  },
  {
    "text": "or do I care about cost so in things like API calls you probably care a little bit more about speed but",
    "start": "1552840",
    "end": "1558270"
  },
  {
    "text": "in things like batch processing of doing things like stream analysis or event",
    "start": "1558270",
    "end": "1563400"
  },
  {
    "text": "sourcing you might actually care a little bit more about cost and so this knob gives you quite a lot of power but",
    "start": "1563400",
    "end": "1568770"
  },
  {
    "text": "there is a little bit of thinking that you want to do as part of that another thing that you want to think about is",
    "start": "1568770",
    "end": "1575150"
  },
  {
    "start": "1573000",
    "end": "1631000"
  },
  {
    "text": "lambda runtimes so today we support four different languages inside of lambda no",
    "start": "1575150",
    "end": "1581190"
  },
  {
    "text": "J ass Python Java and c-sharp and there's a couple different aspects to",
    "start": "1581190",
    "end": "1586560"
  },
  {
    "text": "why you would pick one of those or when and where but things that you want also think about is always kind of separating",
    "start": "1586560",
    "end": "1592830"
  },
  {
    "text": "the business logic from the the function signature as we'll call it things like",
    "start": "1592830",
    "end": "1597870"
  },
  {
    "text": "dependencies you want to be really smart about what dependencies that you include and then in terms of the overall runtimes they interpreted languages so",
    "start": "1597870",
    "end": "1605250"
  },
  {
    "text": "nodejs and Python are significantly faster to start than Java and c-sharp but that's just during the start time we",
    "start": "1605250",
    "end": "1612840"
  },
  {
    "text": "still find that often for a number of customers that the compiled languages might be much faster at things like",
    "start": "1612840",
    "end": "1619430"
  },
  {
    "text": "mathematical calculations or even things like transformation of an image for",
    "start": "1619430",
    "end": "1625110"
  },
  {
    "text": "example there are some tools in Java that make that a lot faster than in Python or a nodejs so when it comes to thinking about how",
    "start": "1625110",
    "end": "1631980"
  },
  {
    "start": "1631000",
    "end": "1772000"
  },
  {
    "text": "you separate so we've got to go through these three areas here so separating your business logic from effectively the",
    "start": "1631980",
    "end": "1637890"
  },
  {
    "text": "signature so what we see here is that I've got kind of a map a mocked up function here called app to do and then",
    "start": "1637890",
    "end": "1645420"
  },
  {
    "text": "what I have is my handler so the handler is what lambda is going to look to invoke when you have a request that",
    "start": "1645420",
    "end": "1651090"
  },
  {
    "text": "comes in this is basically the entry point into your your codes execution and we'll talk a little bit here in a moment",
    "start": "1651090",
    "end": "1658020"
  },
  {
    "text": "about something called effectively container reuse but when a container reuse happens it's going to execute what",
    "start": "1658020",
    "end": "1664770"
  },
  {
    "text": "logic exists inside of this lambda handle you actually want to keep your lamda handler kind of as clean as possible and",
    "start": "1664770",
    "end": "1670710"
  },
  {
    "text": "think about taking any sort of extra application functionality and either moving it elsewhere in this file or",
    "start": "1670710",
    "end": "1676830"
  },
  {
    "text": "potentially think about module izing that out and to say like a package that you include and we'll talk a little bit about best practices for that as well in",
    "start": "1676830",
    "end": "1683190"
  },
  {
    "text": "a bit so when it comes to container use something that a kind of explain real",
    "start": "1683190",
    "end": "1688769"
  },
  {
    "text": "quick so know lambda does not run on top of docker does it run on anything that looks exactly like docker we use",
    "start": "1688769",
    "end": "1694260"
  },
  {
    "text": "container in kind of the lowest sense to refer to effectively something that lives inside of the kernel space of the",
    "start": "1694260",
    "end": "1700710"
  },
  {
    "text": "host that is running lambda for you so we'll talk here about the lifecycle but",
    "start": "1700710",
    "end": "1706139"
  },
  {
    "text": "basically what happens is when you have a lambda invocation we fire up what's",
    "start": "1706139",
    "end": "1712440"
  },
  {
    "text": "considered a container on a host that we manage we pull your code into it we execute your code and then your code",
    "start": "1712440",
    "end": "1719490"
  },
  {
    "text": "finishes executing now you only pay for the duration of your code execution based on the hundreds of milliseconds of",
    "start": "1719490",
    "end": "1724799"
  },
  {
    "text": "time but what we will do for performance reasons is keep that host around and so from that point you have what's called a",
    "start": "1724799",
    "end": "1730679"
  },
  {
    "text": "warm start and I'll visualize this here in a second so there are things that you could do inside of your function to",
    "start": "1730679",
    "end": "1735779"
  },
  {
    "text": "actually speed up the the warm started execution such as moving certain logic",
    "start": "1735779",
    "end": "1741380"
  },
  {
    "text": "or defining things like certain variables into the global scope this can actually speed up your function quite a",
    "start": "1741380",
    "end": "1747929"
  },
  {
    "text": "bit depending on what it is that you do let's say for example that you needed to reach out to a key value store to pull",
    "start": "1747929",
    "end": "1754889"
  },
  {
    "text": "in a certificate that's the kind of thing you would want to do outside of the handler in the kind of early lines",
    "start": "1754889",
    "end": "1761010"
  },
  {
    "text": "of your code before your handlers executed so that you don't have to do that every time because typically that",
    "start": "1761010",
    "end": "1766470"
  },
  {
    "text": "type of thing is not going to change that often so let's look at kind of a better way to visualize this so when a",
    "start": "1766470",
    "end": "1772860"
  },
  {
    "start": "1772000",
    "end": "2183000"
  },
  {
    "text": "lambda function is executed again what we do is we have to download your code start a new container for it which strap",
    "start": "1772860",
    "end": "1780240"
  },
  {
    "text": "the runtime so this goes basically go through anything like and include or require inside of your code and then",
    "start": "1780240",
    "end": "1785519"
  },
  {
    "text": "start your code and execute it and so when we talk about where this kind of",
    "start": "1785519",
    "end": "1790769"
  },
  {
    "text": "lies in terms of what you think about optimizing versus what we think about optimizing so a full cold start is where",
    "start": "1790769",
    "end": "1796379"
  },
  {
    "text": "we don't have a host that has your code on it or for some reason we do disk we have to create a new host and pull",
    "start": "1796379",
    "end": "1802409"
  },
  {
    "text": "your code onto it and then on your side a partial cold start is we have a host",
    "start": "1802409",
    "end": "1808350"
  },
  {
    "text": "it has your code but it doesn't have a container that has your code in it and then warm start is we have a host it has",
    "start": "1808350",
    "end": "1814350"
  },
  {
    "text": "a container that has your code and an invocation has come in and so we're going to execute it right then and so",
    "start": "1814350",
    "end": "1820230"
  },
  {
    "text": "again what you really want to be thinking about is from the bootstrap of your runtime and this is where things",
    "start": "1820230",
    "end": "1825749"
  },
  {
    "text": "like interpreter languages verse non interpreted languages becomes important as well as what is that exists inside of",
    "start": "1825749",
    "end": "1832019"
  },
  {
    "text": "your handler that is going to be key to the performance of your function now",
    "start": "1832019",
    "end": "1837059"
  },
  {
    "text": "this is a bit different than if you're thinking about in a traditional application environment where you have kind of a you know all of your like a",
    "start": "1837059",
    "end": "1845399"
  },
  {
    "text": "warm application server this is a bit different of a model because effectively we're invoking that every time behind",
    "start": "1845399",
    "end": "1850919"
  },
  {
    "text": "the scenes for you and so what ends up happening behind is if you run inside of",
    "start": "1850919",
    "end": "1857369"
  },
  {
    "text": "a V PC this is another thing that customers have found well you actually also have to deal with is the fact that we have to put a elastic network",
    "start": "1857369",
    "end": "1864419"
  },
  {
    "text": "interface on your function in your V PC so one thing that we'll always recommend is don't use V PC unless you have to so",
    "start": "1864419",
    "end": "1870869"
  },
  {
    "text": "unless you have to talk to a resource inside of your V PC because it does add to be both well it does that to the cold",
    "start": "1870869",
    "end": "1877710"
  },
  {
    "text": "start time for your function so important to think about this from the perspective of how you think about what",
    "start": "1877710",
    "end": "1885539"
  },
  {
    "text": "you include inside of your event handler how you think about what you include in your code this is also why it's really important to not include extra modules",
    "start": "1885539",
    "end": "1892980"
  },
  {
    "text": "in your code this could be something that's very common today in both Python and nodejs is hey we're gonna clean all",
    "start": "1892980",
    "end": "1898769"
  },
  {
    "text": "these modules that do all this cool stuff but maybe you only need a small bit of functionality you're actually",
    "start": "1898769",
    "end": "1904169"
  },
  {
    "text": "better kind of going with building that functionality yourself or stripping it out of that third party package so on",
    "start": "1904169",
    "end": "1909809"
  },
  {
    "text": "demo some of the ways that this is kind of key",
    "start": "1909809",
    "end": "1914539"
  },
  {
    "text": "so if I go over to the laminate console here let's see if it's gonna still be",
    "start": "1918930",
    "end": "1925690"
  },
  {
    "text": "warmed for me okay so this is actually",
    "start": "1925690",
    "end": "1931450"
  },
  {
    "text": "the lambda function that was behind the API gateway endpoint that this interface",
    "start": "1931450",
    "end": "1938140"
  },
  {
    "text": "here is built upon and what I have here is the ability to test this lambda function so let's see how fast of it",
    "start": "1938140",
    "end": "1946950"
  },
  {
    "text": "okay so in this case it was executed in 14 milliseconds let me find one that is",
    "start": "1946950",
    "end": "1953740"
  },
  {
    "text": "going to be cold that I can really easily so I'm just gonna create a very",
    "start": "1953740",
    "end": "1974320"
  },
  {
    "text": "basic tests open those function source",
    "start": "1974320",
    "end": "1981149"
  },
  {
    "text": "so this is a function actually written in turnover that's why what I'm hoping",
    "start": "1983630",
    "end": "1996289"
  },
  {
    "text": "to highlight here is a cold function that I can use to show examples to quick",
    "start": "1996289",
    "end": "2010870"
  },
  {
    "text": "anyway well you'll typically see when you're building and testing a function if it is a cold function that has not",
    "start": "2010870",
    "end": "2016210"
  },
  {
    "text": "been executed the initial time that you go and execute or the first time you go and execute that function the duration",
    "start": "2016210",
    "end": "2021880"
  },
  {
    "text": "is going to be much longer because we have to go through that full cold start of getting a container pulling down your code executing your code or returning",
    "start": "2021880",
    "end": "2029409"
  },
  {
    "text": "the result however what you'll see is if you do these tests and semi rapid succession you'll find that duration",
    "start": "2029409",
    "end": "2035980"
  },
  {
    "text": "stays effectively very very small and so this is why sometimes people think that the first time that they run lambda that",
    "start": "2035980",
    "end": "2042039"
  },
  {
    "text": "it is slow you know what you're seeing there is that first initial penalty of the cold start that causes you to think",
    "start": "2042039",
    "end": "2047919"
  },
  {
    "text": "that that's what's happening but realistically what we find for almost all of our customers that are running in",
    "start": "2047919",
    "end": "2053350"
  },
  {
    "text": "production cold starts are not something that they have to really worry about typically most applications are gonna be",
    "start": "2053350",
    "end": "2059378"
  },
  {
    "text": "accessed somewhat frequently so you know periodically every couple of minutes and so things like cold starts really kind",
    "start": "2059379",
    "end": "2066010"
  },
  {
    "text": "of trail out to the very far end of say like your TP 99 in terms of performance pain points my apologies for not having",
    "start": "2066010",
    "end": "2072850"
  },
  {
    "text": "my example working to show you this of course right before I came in I was",
    "start": "2072850",
    "end": "2078070"
  },
  {
    "text": "doing the Sam function one and but it's because I hadn't tested it from the web",
    "start": "2078070",
    "end": "2083138"
  },
  {
    "text": "interface so now it's unfortunately a warm function so it's not a good example of what happens when a function is",
    "start": "2083139",
    "end": "2089320"
  },
  {
    "text": "called yeah it's gonna return really quickly moving on",
    "start": "2089320",
    "end": "2097138"
  },
  {
    "text": "so again cold starts that can look bad in development but you have to understand that an application under",
    "start": "2101440",
    "end": "2107359"
  },
  {
    "text": "load is not going to see that same kind of performance problem we actually have wonderful stats and charge and data",
    "start": "2107359",
    "end": "2113569"
  },
  {
    "text": "points that show this for our customers and we've had you know customers under load show it as well more memory is not",
    "start": "2113569",
    "end": "2120769"
  },
  {
    "text": "always more expensive but it's not always the best thing to do so you do want to kind of tweak your function and tune it for how much time it's going to",
    "start": "2120769",
    "end": "2127519"
  },
  {
    "text": "run for based on how much memory and CPU you might need and remember we give you just a single knob that's aligned with",
    "start": "2127519",
    "end": "2133760"
  },
  {
    "text": "memory but you do get more CPU with that and so that's kind of one other kind of key thing when people talk about performance and lastly you necessarily",
    "start": "2133760",
    "end": "2142130"
  },
  {
    "text": "don't want to think too much about over optimizing your code so I've had customers come to me and say hey we're doing this in Python should we be doing",
    "start": "2142130",
    "end": "2148460"
  },
  {
    "text": "it in Java or vice-versa you do want to really think about benchmarking your functions to understand how much time",
    "start": "2148460",
    "end": "2155089"
  },
  {
    "text": "you're spending during that kind of cold start or initial bootstrap verse when it is warm",
    "start": "2155089",
    "end": "2160190"
  },
  {
    "text": "so again if you're testing this and something like the console it's gonna look much slower with something like Java then python but that doesn't mean",
    "start": "2160190",
    "end": "2166670"
  },
  {
    "text": "that under load your application is going to perform equally compared to you doing kind of one-off click tests in the",
    "start": "2166670",
    "end": "2172490"
  },
  {
    "text": "console let's move on to talk about a couple of other things here so talk",
    "start": "2172490",
    "end": "2178789"
  },
  {
    "text": "about how you really can't move fast if you're not measuring what's going on so lambda has built into it number of",
    "start": "2178789",
    "end": "2184940"
  },
  {
    "start": "2183000",
    "end": "2356000"
  },
  {
    "text": "capabilities so has built into it cloud watch metrics so the ability for you to understand things like invocation count",
    "start": "2184940",
    "end": "2190789"
  },
  {
    "text": "location duration invocation errors if you're being throttled by the backend so today the concurrency limit that we",
    "start": "2190789",
    "end": "2196940"
  },
  {
    "text": "set is a thousand concurrent requests note this does not mean a thousand concurrent requests per second it means",
    "start": "2196940",
    "end": "2203630"
  },
  {
    "text": "concurrent within basically a time frame smaller than that so because we build functions in the hundreds of",
    "start": "2203630",
    "end": "2208940"
  },
  {
    "text": "milliseconds basically you're looking at a concurrency of just completely at",
    "start": "2208940",
    "end": "2214549"
  },
  {
    "text": "execution time this could be something that can throw people off because it means that you can actually invoke more than a thousand functions in a second",
    "start": "2214549",
    "end": "2221619"
  },
  {
    "text": "but you couldn't invoke more than a thousand functions and say more than a millisecond for API gateway same kind of",
    "start": "2221619",
    "end": "2229369"
  },
  {
    "text": "thing so we capture a whole lot of data for you def they want to pay attention to those things and look at those graphs and",
    "start": "2229369",
    "end": "2234619"
  },
  {
    "text": "understand how to use them for troubleshooting and understanding what's going on is performance wise we also in",
    "start": "2234619",
    "end": "2241160"
  },
  {
    "text": "terms of logging capture a whole lot of logging for you so with cloud watch logs which is another AWS product with API",
    "start": "2241160",
    "end": "2248180"
  },
  {
    "text": "gateway and with lambda we capture a number of things by default with lambda you can basically put information into",
    "start": "2248180",
    "end": "2254900"
  },
  {
    "text": "your log just by outputting it so just kind of doing a standard kind of council dot log or whatever the equivalent might",
    "start": "2254900",
    "end": "2261559"
  },
  {
    "text": "be in language that you're using that's all gonna get captured and made available to you inside a cloud watch cloud watch has abilities for things",
    "start": "2261559",
    "end": "2268489"
  },
  {
    "text": "what are called log pivots so this is actually the ability for you to generate metrics based on logs so this is one",
    "start": "2268489",
    "end": "2274160"
  },
  {
    "text": "quick way actually to create data points from your function and then use that to",
    "start": "2274160",
    "end": "2279469"
  },
  {
    "text": "generate kind of like a visual graph and then really so people will I think",
    "start": "2279469",
    "end": "2284989"
  },
  {
    "text": "somewhat rightfully complain about the cloud watch logs interface it's not the be-all end-all of log processing",
    "start": "2284989",
    "end": "2290749"
  },
  {
    "text": "interfaces but really what we courage you to do is think about taking that data exporting it out to a tool that you",
    "start": "2290749",
    "end": "2296509"
  },
  {
    "text": "like so there's tools like Splunk and log lee and the elk stack and a number",
    "start": "2296509",
    "end": "2301519"
  },
  {
    "text": "of other things that are really deeply powerful log viewing tools you're gonna want to pull that data into one of those",
    "start": "2301519",
    "end": "2308180"
  },
  {
    "text": "most likely something that we had integrated with lambda a little earlier",
    "start": "2308180",
    "end": "2313249"
  },
  {
    "text": "this year is a product called x-ray so x-ray is not an application performance",
    "start": "2313249",
    "end": "2318259"
  },
  {
    "text": "tool so it is not meant to replace a data dog or a new relic or an app dynamics in fact those products are",
    "start": "2318259",
    "end": "2325160"
  },
  {
    "text": "actually mostly building integration with x-ray what x-ray provides for you is profiling and ability to troubleshoot",
    "start": "2325160",
    "end": "2331039"
  },
  {
    "text": "your functions and so it captures what are called traces which then get built",
    "start": "2331039",
    "end": "2336739"
  },
  {
    "text": "into a service map and can kind of give you a view of when you have a function that has been called by an API that",
    "start": "2336739",
    "end": "2342859"
  },
  {
    "text": "talks to many other services effectively what the latencies are that were involved on that what the successes are",
    "start": "2342859",
    "end": "2348289"
  },
  {
    "text": "potentially failures or issues and it makes it really easy for you to debug kind of distributed systems which is a",
    "start": "2348289",
    "end": "2354469"
  },
  {
    "text": "challenge otherwise so here's kind of an example of using x-ray there's really kind of just two lines that I've had to",
    "start": "2354469",
    "end": "2360979"
  },
  {
    "start": "2356000",
    "end": "2491000"
  },
  {
    "text": "change in this code the first one is to include the SDK",
    "start": "2360979",
    "end": "2366050"
  },
  {
    "text": "and then the next is to basically create my AWS SDK client with the X ray capture",
    "start": "2366050",
    "end": "2373640"
  },
  {
    "text": "AWS put in front of it that's basically all that I have to do to tool my code to be able to gather information from X ray",
    "start": "2373640",
    "end": "2380210"
  },
  {
    "text": "I can actually do much more I can actually get like into functions and create my own capture but this is going",
    "start": "2380210",
    "end": "2386750"
  },
  {
    "text": "to give you kind of the basic functionality so this is code wrapped around calling something in s3 so I have",
    "start": "2386750",
    "end": "2393050"
  },
  {
    "text": "a bucket I have a key and I have a body that I'm gonna put into this s3 object what I get from this",
    "start": "2393050",
    "end": "2399110"
  },
  {
    "text": "is a service graph so I see that X ray there I see that lambda has an",
    "start": "2399110",
    "end": "2404810"
  },
  {
    "text": "invocation that's the first thing that you see AWS lambda then the lambda function itself executing and then it",
    "start": "2404810",
    "end": "2410750"
  },
  {
    "text": "putting its data into s3 now this is a really really really simplistic example typically you'd have a lambda function",
    "start": "2410750",
    "end": "2416990"
  },
  {
    "text": "that maybe is talking to s3 and a database and some sort of other service and it's going to map out that full map",
    "start": "2416990",
    "end": "2423380"
  },
  {
    "text": "for you the other thing that it does is give you kind of a waterfall view into",
    "start": "2423380",
    "end": "2428420"
  },
  {
    "text": "your code or into your application flow so we actually see all the on the far end here response codes if it was an",
    "start": "2428420",
    "end": "2435020"
  },
  {
    "text": "HTTP call we see the duration and then you can kind of see a visualization the duration so this is another thing that's",
    "start": "2435020",
    "end": "2440960"
  },
  {
    "text": "really kind of key and understanding the performance of a service application",
    "start": "2440960",
    "end": "2447310"
  },
  {
    "text": "cool so that's kind of metrics logging and profiling so next going to just talk",
    "start": "2449560",
    "end": "2456410"
  },
  {
    "text": "about build and test of your application this case actually build and deploy your",
    "start": "2456410",
    "end": "2462200"
  },
  {
    "text": "application a couple products here I'll talk about really quickly that can help you with this so code build is a managed CI",
    "start": "2462200",
    "end": "2468500"
  },
  {
    "text": "service this is useful for compiling code for including code dependencies for",
    "start": "2468500",
    "end": "2474290"
  },
  {
    "text": "testing your code at the code level so doing things like unit tests linting syntax checkers that's pretty much",
    "start": "2474290",
    "end": "2481400"
  },
  {
    "text": "exactly what code build exists for and so this is a managed service for you so that you don't have to run say a Jenkins",
    "start": "2481400",
    "end": "2487040"
  },
  {
    "text": "or a team city or something like that yourself so it has a command file basically that",
    "start": "2487040",
    "end": "2494150"
  },
  {
    "start": "2491000",
    "end": "2582000"
  },
  {
    "text": "you put in your code base called a build spec file and our build spec damo file in this case and so",
    "start": "2494150",
    "end": "2499730"
  },
  {
    "text": "we see here is just kind of like basic sections to it the first our environment variables then we have phases which",
    "start": "2499730",
    "end": "2506060"
  },
  {
    "text": "there are four of today and so you can see that this would be for a note J s lambda function so I'm doing an NPM",
    "start": "2506060",
    "end": "2513080"
  },
  {
    "text": "install I'm gonna run yes lint to make sure that my code is clean could be doing NPM tests for unit",
    "start": "2513080",
    "end": "2519050"
  },
  {
    "text": "tests and then I'm gonna actually packet it up so the AWS CloudFormation package command is part of what Sam needs in",
    "start": "2519050",
    "end": "2525980"
  },
  {
    "text": "order to build and deploy your application and then I can tell it exactly what I want to put into that",
    "start": "2525980",
    "end": "2531050"
  },
  {
    "text": "application that I care about typically you're gonna plug is something like code",
    "start": "2531050",
    "end": "2537170"
  },
  {
    "text": "builds into some sort of pipelining system so some sort of a continuous delivery system and so we have a product",
    "start": "2537170",
    "end": "2542810"
  },
  {
    "text": "called code pipeline that does exactly that this allows you to kind of model out from code to build to test to deploy",
    "start": "2542810",
    "end": "2549830"
  },
  {
    "text": "across many different stages potentially so typically a developer's pipeline will",
    "start": "2549830",
    "end": "2555770"
  },
  {
    "text": "look something well this is just kind of a snippet of part of one but you commit your code your code repository then",
    "start": "2555770",
    "end": "2562460"
  },
  {
    "text": "that's going to be packaged and tested and code builds and then you're gonna use something like CloudFormation to deploy it so if you're using Sam you use",
    "start": "2562460",
    "end": "2568580"
  },
  {
    "text": "CloudFormation or if you were using one of the other framework tools you could basically actually have a lambda",
    "start": "2568580",
    "end": "2575270"
  },
  {
    "text": "function that calls one of those so it's kind of fun you can use use lambda to deploy your lambda so the most minimis",
    "start": "2575270",
    "end": "2582170"
  },
  {
    "start": "2582000",
    "end": "2648000"
  },
  {
    "text": "kind of developers pipeline that you would see looks something like this so I have my application source then I have",
    "start": "2582170",
    "end": "2588470"
  },
  {
    "text": "my build stage and then I have a stage down below here which uses CloudFormation to basically deploy my",
    "start": "2588470",
    "end": "2594440"
  },
  {
    "text": "function and then I could do some testing against it so depending on what it is that I'm using I could be using",
    "start": "2594440",
    "end": "2601430"
  },
  {
    "text": "something like Sam local actually to invoke request to a lambda function I could use the lambda API to test",
    "start": "2601430",
    "end": "2607790"
  },
  {
    "text": "something or I could use a third-party tool to say test an API and creating",
    "start": "2607790",
    "end": "2613850"
  },
  {
    "text": "this is actually really really easy with something called code star so code star is kind of a an interface that sits on",
    "start": "2613850",
    "end": "2621109"
  },
  {
    "text": "top of a lot of these products has the ability for you to create what we call projects that are based around various",
    "start": "2621109",
    "end": "2627200"
  },
  {
    "text": "different technologies and so this is probably the easiest way to go and create what you see here in this slide",
    "start": "2627200",
    "end": "2633080"
  },
  {
    "text": "and of this deployment pipeline so if you're starting out with serverless and you're starting out with lamda this is definitely a good place to start with",
    "start": "2633080",
    "end": "2640070"
  },
  {
    "text": "looking at all of that so we kind of wrap up here with some best practices",
    "start": "2640070",
    "end": "2645290"
  },
  {
    "text": "running a little long on time my apologies so common things that I see I see people creating what I call lambda",
    "start": "2645290",
    "end": "2651620"
  },
  {
    "start": "2648000",
    "end": "2825000"
  },
  {
    "text": "monoliths this is the idea that you're going to put all of your functionality for say an API or for some sort of a",
    "start": "2651620",
    "end": "2658460"
  },
  {
    "text": "service inside of a single function this is not a good thing to do typically so",
    "start": "2658460",
    "end": "2664070"
  },
  {
    "text": "again I had mentioned the the more code that lives inside of your deployable artifact kind of effectively the slower",
    "start": "2664070",
    "end": "2670070"
  },
  {
    "text": "the lambda is going to be for a cold start also potentially complicates a warm start but it also doesn't help you",
    "start": "2670070",
    "end": "2675740"
  },
  {
    "text": "in thinking about how you should build lambda functions and so realistic who you want to think about is lambda is",
    "start": "2675740",
    "end": "2681770"
  },
  {
    "text": "kind of what I'd like to call nano services so even smaller than a micro service so you can think of kind of",
    "start": "2681770",
    "end": "2687290"
  },
  {
    "text": "every HTTP endpoint and in call that we would make as its own lambda function so",
    "start": "2687290",
    "end": "2694730"
  },
  {
    "text": "every HTTP method correlating to its own lambda function and again this is where tools like Sam and the various different",
    "start": "2694730",
    "end": "2701300"
  },
  {
    "text": "frameworks that exist make this really easy to do but it's something that people are very much not familiar with",
    "start": "2701300",
    "end": "2706580"
  },
  {
    "text": "thinking about like really decomposing their application as small as possible so unless your code basically your",
    "start": "2706580",
    "end": "2716390"
  },
  {
    "text": "function handlers share an invocation source you want to split them up into their own independent lambda functions",
    "start": "2716390",
    "end": "2723200"
  },
  {
    "text": "or binaries if you're using say Java or C sharp and again it's kind of a best",
    "start": "2723200",
    "end": "2728720"
  },
  {
    "text": "practice that you really want to follow another thing that you might want to think about is bundling your code into",
    "start": "2728720",
    "end": "2734240"
  },
  {
    "text": "your own packaging so people will say okay well I'm gonna decompose my my lambda monolith into individual lambdas",
    "start": "2734240",
    "end": "2740270"
  },
  {
    "text": "but I have a lot of code duplication any place that you see code duplication think about using kind of a language",
    "start": "2740270",
    "end": "2746120"
  },
  {
    "text": "based module in NPM a pip package maven package etc unless your lambda functions",
    "start": "2746120",
    "end": "2753380"
  },
  {
    "text": "I share the same type of event type so if you have lambda functions that some",
    "start": "2753380",
    "end": "2759590"
  },
  {
    "text": "are being invoked by an API gateway some being invoked by say oh can you stream those should be completely separate",
    "start": "2759590",
    "end": "2765410"
  },
  {
    "text": "projects completely separate Sam lathes completely separate code bases so again if you're sharing a handler you",
    "start": "2765410",
    "end": "2774020"
  },
  {
    "text": "still want to think about splitting them into files in the same repository if you're using completely different handlers than completely different",
    "start": "2774020",
    "end": "2779660"
  },
  {
    "text": "repositories that are completely different applications again lean on code reuse via packaging modules and",
    "start": "2779660",
    "end": "2785750"
  },
  {
    "text": "then from a testing perspective for Sam templates at least always validate them locally before you upload them so when",
    "start": "2785750",
    "end": "2792560"
  },
  {
    "text": "you upload a Sam template to CloudFormation it does take time for it to process in and it's actually a very it's perceived",
    "start": "2792560",
    "end": "2799940"
  },
  {
    "text": "as slow but it's doing a lot behind the scenes to update your resources in a very controlled methodology and so",
    "start": "2799940",
    "end": "2805460"
  },
  {
    "text": "sometimes if you you know fat-finger something inside of a template file you",
    "start": "2805460",
    "end": "2810950"
  },
  {
    "text": "can find that it takes a couple of minutes before you get the results on that and then lastly inside your CIN CD",
    "start": "2810950",
    "end": "2816350"
  },
  {
    "text": "process always validate them as part of that so again going back to the build spec that I had I would be inspecting my",
    "start": "2816350",
    "end": "2822770"
  },
  {
    "text": "files inside of their lambda and API gateway just talked about here in a",
    "start": "2822770",
    "end": "2828500"
  },
  {
    "start": "2825000",
    "end": "2881000"
  },
  {
    "text": "second supports something called environment variables pretty straightforward the ability for you have essentially a key value pair that allows",
    "start": "2828500",
    "end": "2834680"
  },
  {
    "text": "you to add effectively dynamic Ness to your function execution and to what",
    "start": "2834680",
    "end": "2840620"
  },
  {
    "text": "you're trying to do so like it's like two minutes three minutes right okay so",
    "start": "2840620",
    "end": "2846950"
  },
  {
    "text": "this is really useful for again adding dynamic nough stew your environment so we can see here an example of a Sam",
    "start": "2846950",
    "end": "2853670"
  },
  {
    "text": "template where I'm capturing two parameters from the user so I have something called special feature one",
    "start": "2853670",
    "end": "2859100"
  },
  {
    "text": "another one called my environment passing them into the references for my",
    "start": "2859100",
    "end": "2864470"
  },
  {
    "text": "actual code and then your lambda function can consume this so maybe you have some capability that you only want",
    "start": "2864470",
    "end": "2870950"
  },
  {
    "text": "to test in staging or dev verse things that you have in prod or you want to pass in keys in one place and not",
    "start": "2870950",
    "end": "2876830"
  },
  {
    "text": "another this kind of gives you that capability built in another option that you have is something called parameter",
    "start": "2876830",
    "end": "2883070"
  },
  {
    "start": "2881000",
    "end": "2930000"
  },
  {
    "text": "store so a parameter store is kind of a centralized place for keeping data like",
    "start": "2883070",
    "end": "2888770"
  },
  {
    "text": "key value pairs so API keys database credentials configuration environment",
    "start": "2888770",
    "end": "2895310"
  },
  {
    "text": "variables well you can see here is actually a snippet of lambda code where I'm calling out to",
    "start": "2895310",
    "end": "2900800"
  },
  {
    "text": "with the parameter store service I'm pulling these in and then executing upon them and so it's great about this is",
    "start": "2900800",
    "end": "2906920"
  },
  {
    "text": "there's concepts of hierarchies there's I am permissioning that goes around it so let's say that you have more of kind",
    "start": "2906920",
    "end": "2912230"
  },
  {
    "text": "of a controlled enterprise environment you can give developers access to the certain parameter store stored data for",
    "start": "2912230",
    "end": "2920330"
  },
  {
    "text": "developers and then you can control for production but you can have the codebase consuming them exactly the same so one",
    "start": "2920330",
    "end": "2926450"
  },
  {
    "text": "code base that can run in any environment without any sort of change and so this kind of aligns back to again",
    "start": "2926450",
    "end": "2933530"
  },
  {
    "start": "2930000",
    "end": "3067000"
  },
  {
    "text": "some of the best practices of you know always use parameters and as much as you can environment variables especially you",
    "start": "2933530",
    "end": "2939020"
  },
  {
    "text": "can create a single Sam template that can be used in multiple places this actually extends up the other managed",
    "start": "2939020",
    "end": "2944510"
  },
  {
    "text": "frameworks as well you want to think about reuse of those as much as possible so that dev always looks like staging",
    "start": "2944510",
    "end": "2950900"
  },
  {
    "text": "staging always looks like prod and therefore you have kind of the different environments that you want to have just",
    "start": "2950900",
    "end": "2957880"
  },
  {
    "text": "a little bit so all my slides will be posted and so we'll be able to catch up",
    "start": "2958330",
    "end": "2963410"
  },
  {
    "text": "so just kind of wrapping up here so now I'm at a time I so sounds easy right",
    "start": "2963410",
    "end": "2969550"
  },
  {
    "text": "there's a lot of different aspects here a lot of different things that we talked about again you know there's the the",
    "start": "2969550",
    "end": "2977570"
  },
  {
    "text": "service space is really exciting I find that it's really changed the way that companies think about building their applications we kind of walk through a",
    "start": "2977570",
    "end": "2983660"
  },
  {
    "text": "number of different aspects today of where you start where you kind of grow through in terms of monitoring and",
    "start": "2983660",
    "end": "2989030"
  },
  {
    "text": "logging how you think about building that kind of a more of a professional development workflow with building and",
    "start": "2989030",
    "end": "2994310"
  },
  {
    "text": "testing tools I again start with",
    "start": "2994310",
    "end": "2999350"
  },
  {
    "text": "frameworks and kind of look at some of the things like code start to help heed your easier path through this service application",
    "start": "2999350",
    "end": "3006400"
  },
  {
    "text": "once again basically things built around lambda so we really see things like functions as a service as the future of",
    "start": "3006400",
    "end": "3012550"
  },
  {
    "text": "application development especially in an event-driven model there's lots of different things that you could think of",
    "start": "3012550",
    "end": "3018280"
  },
  {
    "text": "that make an application event-driven closing down pretty much everything I",
    "start": "3018280",
    "end": "3023770"
  },
  {
    "text": "talked about today can be found on this website so AWS at amazon.com slash server lists all of the tools that I",
    "start": "3023770",
    "end": "3030460"
  },
  {
    "text": "talked about including the third-party frameworks can be found on a page linked off of this at AWS amazon.com / serverless /",
    "start": "3030460",
    "end": "3037870"
  },
  {
    "text": "developer tools again with that my name is Chris Mundy Vela / advocate for server lists at AWS you could find me at",
    "start": "3037870",
    "end": "3045850"
  },
  {
    "text": "Christmas on Twitter month on amazon.com always happy to answer questions about whatever I can and in terms of today",
    "start": "3045850",
    "end": "3053020"
  },
  {
    "text": "I'll take questions outside so the next speaker can set up but really appreciate you coming to this session hopefully you",
    "start": "3053020",
    "end": "3058030"
  },
  {
    "text": "learned a little bit more about lambda and server lists and thanks again",
    "start": "3058030",
    "end": "3063720"
  }
]