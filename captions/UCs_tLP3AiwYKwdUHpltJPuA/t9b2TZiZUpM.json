[
  {
    "start": "0",
    "end": "94000"
  },
  {
    "text": "[Music]",
    "start": "3520",
    "end": "7840"
  },
  {
    "text": "okay so hello everyone i'm super excited to be here my name is denis",
    "start": "13360",
    "end": "19279"
  },
  {
    "text": "i am a developer advocate at couchbase and today we",
    "start": "19279",
    "end": "24400"
  },
  {
    "text": "are going to talk about the hidden costs of poor database access for those who never heard about",
    "start": "24400",
    "end": "30160"
  },
  {
    "text": "couchbase before couchbase is a nosql database fairly similar to mongodb and redis",
    "start": "30160",
    "end": "38000"
  },
  {
    "text": "but cashbase is more like is designed for more critical scenarios when you need high scalability that's where people",
    "start": "38000",
    "end": "44559"
  },
  {
    "text": "usually go to couch base because the kitten couch base is actually",
    "start": "44559",
    "end": "50320"
  },
  {
    "text": "performs at scale but today we are going to talk a little bit about databases in general and some of",
    "start": "50399",
    "end": "57039"
  },
  {
    "text": "the issues with it but i would like to start with a small disclaimer here",
    "start": "57039",
    "end": "63120"
  },
  {
    "text": "i think as software developers",
    "start": "63120",
    "end": "67600"
  },
  {
    "text": "i think as software developers we are getting paid to build good enough software",
    "start": "68159",
    "end": "74080"
  },
  {
    "text": "what i mean by that is uh well our stack holders uh they are interested in in a feature",
    "start": "74080",
    "end": "81280"
  },
  {
    "text": "that is good enough for a short or midterm so you don't need to make",
    "start": "81280",
    "end": "86720"
  },
  {
    "text": "the best feature ever or the most performed feature ever and it's okay",
    "start": "86720",
    "end": "93200"
  },
  {
    "text": "to trade off some performance if you get productivity back right and",
    "start": "93200",
    "end": "98240"
  },
  {
    "start": "94000",
    "end": "186000"
  },
  {
    "text": "you don't have to feel guilty i know quite often when you are building a software uh we know that okay if i build",
    "start": "98240",
    "end": "104720"
  },
  {
    "text": "a new method this this will be faster but i don't have time or it will take a few hours so let's just reuse some that",
    "start": "104720",
    "end": "111040"
  },
  {
    "text": "already exist and it's totally fine you get productivity you you are uh you are uh",
    "start": "111040",
    "end": "117040"
  },
  {
    "text": "you gave up on some performance but we are getting productivity back what is really makes me sad is when we",
    "start": "117040",
    "end": "124880"
  },
  {
    "text": "actually trade off performance for nothing and that's really a little bit about what this talk is about",
    "start": "124880",
    "end": "133760"
  },
  {
    "text": "from 10 000 feet we can basically say that our application has three main",
    "start": "135120",
    "end": "141520"
  },
  {
    "text": "components uh of course the front and back end and the the database",
    "start": "141520",
    "end": "147040"
  },
  {
    "text": "and i personally i always wanted to be the the performance guy so whenever everything is on fire everything is",
    "start": "147040",
    "end": "154640"
  },
  {
    "text": "everything super slow the company could call me and say hey dennis could you please help us and make this everything",
    "start": "154640",
    "end": "160319"
  },
  {
    "text": "run faster and i could come over and say oh yeah let's change some",
    "start": "160319",
    "end": "165519"
  },
  {
    "text": "jvm parameters here and boom everything will run faster but in reality what happened with me was",
    "start": "165519",
    "end": "172239"
  },
  {
    "text": "i was expecting most of the time in the database basically creating indexes and trying to",
    "start": "172239",
    "end": "178400"
  },
  {
    "text": "understand okay what's going on what can we do to improve here and yeah i i guarded the databases are",
    "start": "178400",
    "end": "186239"
  },
  {
    "start": "186000",
    "end": "451000"
  },
  {
    "text": "in fact the bottleneck of most the most applications that's totally fine",
    "start": "186239",
    "end": "193040"
  },
  {
    "text": "but what you can do is very limited uh if you have a lot of bad practice in",
    "start": "193599",
    "end": "199599"
  },
  {
    "text": "your code so if you build a whole application with a lot of bad process there's nothing much",
    "start": "199599",
    "end": "204720"
  },
  {
    "text": "else you can do in the database itself",
    "start": "204720",
    "end": "209200"
  },
  {
    "text": "and right now things are getting even more complicated because we already have a lot of good materials out there saying",
    "start": "209840",
    "end": "216080"
  },
  {
    "text": "hey here's some good practice don't do this don't do that so when you go to a company and say okay what's going on why",
    "start": "216080",
    "end": "222640"
  },
  {
    "text": "your application is low you never find something like okay uh some method that load ten",
    "start": "222640",
    "end": "228000"
  },
  {
    "text": "thousand objects to memory and then use three of them it is in fact uh",
    "start": "228000",
    "end": "233040"
  },
  {
    "text": "uh the reason why the application is low is a series of small uh small problems that at some point",
    "start": "233040",
    "end": "240480"
  },
  {
    "text": "they add up and make everything run slow uh let's give a simple simple example",
    "start": "240480",
    "end": "246239"
  },
  {
    "text": "here so let's say you have your rest your rest api and you have here your",
    "start": "246239",
    "end": "254799"
  },
  {
    "text": "you have your username and you you and you have your username in the path of course and then you have your mappings i'm a",
    "start": "254799",
    "end": "261040"
  },
  {
    "text": "java guy so i most of example will be in java but i try to make this more as generic as possible",
    "start": "261040",
    "end": "267280"
  },
  {
    "text": "but here you have a auto generated id and and we have the username and we",
    "start": "267280",
    "end": "273840"
  },
  {
    "text": "basically query the username because that's what we get from the from the path for the url",
    "start": "273840",
    "end": "281280"
  },
  {
    "text": "to be honest nothing really wrong here however yeah in most databases this will",
    "start": "281280",
    "end": "287440"
  },
  {
    "text": "take like around three milliseconds to run i would say in an average database with an average uh",
    "start": "287440",
    "end": "293680"
  },
  {
    "text": "with a reasonable number of rows and that's totally okay but",
    "start": "293680",
    "end": "299040"
  },
  {
    "text": "well there is nothing faster and cheaper than loading data by the id",
    "start": "299040",
    "end": "304240"
  },
  {
    "text": "so why not make the the username the id of the of your",
    "start": "304240",
    "end": "309600"
  },
  {
    "text": "table the reason why there's such a big big difference is because when you're querying the data by the id you skip a",
    "start": "309600",
    "end": "316639"
  },
  {
    "text": "lot of steps internally in the database you're basically using a key the database is a key value store and any",
    "start": "316639",
    "end": "323680"
  },
  {
    "text": "key value store will pretty much have this the same performance it will be super fast",
    "start": "323680",
    "end": "329680"
  },
  {
    "text": "and instead of getting the data the user in in milliseconds you can get the same",
    "start": "329680",
    "end": "335520"
  },
  {
    "text": "data in microseconds now however you can say okay no in my in my",
    "start": "335520",
    "end": "342960"
  },
  {
    "text": "oops in my in my use case i want to allow user to",
    "start": "342960",
    "end": "348800"
  },
  {
    "text": "change the username right and that's why i can make my uh my username my",
    "start": "348800",
    "end": "354560"
  },
  {
    "text": "my uh the username the id that's fine but what about other",
    "start": "354560",
    "end": "359919"
  },
  {
    "text": "entities then what about like let's say address if you can only have one address in your pl in your uh",
    "start": "359919",
    "end": "366560"
  },
  {
    "text": "in your application why not make the idea of the address uh the idea of the",
    "start": "366560",
    "end": "372319"
  },
  {
    "text": "user plus something so whenever you need to get back the user the address of the user you don't",
    "start": "372319",
    "end": "378160"
  },
  {
    "text": "need to query the database you can go there and get straight the id and this again this will make the",
    "start": "378160",
    "end": "384240"
  },
  {
    "text": "application much faster uh and of course like the user you are gonna load the user thousands of times",
    "start": "384240",
    "end": "392560"
  },
  {
    "text": "pretty much in every single request i mean a few times a few a few a few times every single request and",
    "start": "392560",
    "end": "399280"
  },
  {
    "text": "that's important to you you have to make this getting this data back as fast as possible",
    "start": "399280",
    "end": "405120"
  },
  {
    "text": "so this is just an example if you are familiar with any key value store that's pretty much how you use kevin stores you",
    "start": "405120",
    "end": "411039"
  },
  {
    "text": "basically concatenate ids and and you go there because in keyword source you can you can't query the database or the",
    "start": "411039",
    "end": "417199"
  },
  {
    "text": "query is super difficult so you basically use this strategy of guessable",
    "start": "417199",
    "end": "422400"
  },
  {
    "text": "ideas to get the data back of course this could be considered a security flaw",
    "start": "422400",
    "end": "428639"
  },
  {
    "text": "or asp for instance say okay you should not have guessable",
    "start": "428639",
    "end": "433680"
  },
  {
    "text": "ids but in some cases this is totally fine",
    "start": "433680",
    "end": "438800"
  },
  {
    "text": "if you have the the proper security layer in your system making this this kind of change is",
    "start": "438800",
    "end": "446400"
  },
  {
    "text": "something that will give you a lot of performance another common issue is",
    "start": "446400",
    "end": "452800"
  },
  {
    "start": "451000",
    "end": "532000"
  },
  {
    "text": "select star what's wrong with select start essentially nothing right it's alright",
    "start": "452800",
    "end": "458240"
  },
  {
    "text": "to use select star however when you select star you you are basically not getting the",
    "start": "458240",
    "end": "465440"
  },
  {
    "text": "most out of your indexes because uh there's not any space left for the database to optimize uh in database we",
    "start": "465440",
    "end": "472720"
  },
  {
    "text": "have something some database has something called cover and partial indexes so cover",
    "start": "472720",
    "end": "478560"
  },
  {
    "text": "indexes is basically when you can say okay i want to create this index here and i want to store the username the",
    "start": "478560",
    "end": "484400"
  },
  {
    "text": "name and the language in the index so when you write a query that is creating the same username name and",
    "start": "484400",
    "end": "491360"
  },
  {
    "text": "language the database can get the data out from the index and return that to you",
    "start": "491360",
    "end": "496960"
  },
  {
    "text": "if you have select star the database has to go to the index get the data there and fetch more data from the table and",
    "start": "496960",
    "end": "503360"
  },
  {
    "text": "this this might not make a big big difference when you are uh in a small scale but on a large on a large volume",
    "start": "503360",
    "end": "510639"
  },
  {
    "text": "of data that makes a lot of a big difference and we also have partial indexes which",
    "start": "510639",
    "end": "517039"
  },
  {
    "text": "is okay i only interested in active users and you can make this if you have a lot",
    "start": "517039",
    "end": "522479"
  },
  {
    "text": "of inactive users you can make your your your indexes much",
    "start": "522479",
    "end": "527680"
  },
  {
    "text": "smaller and consequently much faster",
    "start": "527680",
    "end": "532920"
  },
  {
    "start": "532000",
    "end": "697000"
  },
  {
    "text": "that's fine because no good question so in this case here the subset of active users is bigger than",
    "start": "542800",
    "end": "550240"
  },
  {
    "text": "the subset of pro users so the database is smart enough to say okay this is this uh this uh this example here the index",
    "start": "550240",
    "end": "558160"
  },
  {
    "text": "is um the index i have is bigger than the this subset here and the",
    "start": "558160",
    "end": "565040"
  },
  {
    "text": "that's why you don't need to have the exact index for each query the database is good enough to say okay i can still",
    "start": "565040",
    "end": "570959"
  },
  {
    "text": "use this this index here but uh we can we can talk more afterwards",
    "start": "570959",
    "end": "577839"
  },
  {
    "text": "uh preparedness statements so prepared statements is something quite important also because",
    "start": "578080",
    "end": "585920"
  },
  {
    "text": "i don't know if you ever thought i don't know if you guys ever stop to think about this but",
    "start": "585920",
    "end": "591360"
  },
  {
    "text": "whenever you execute a query in the database the database has to execute create a",
    "start": "591360",
    "end": "596399"
  },
  {
    "text": "query plan and this query plan is something basically is how the",
    "start": "596399",
    "end": "602079"
  },
  {
    "text": "database is going to execute the query internally uh here is an example of course in couchbase but pretty much if",
    "start": "602079",
    "end": "607839"
  },
  {
    "text": "you execute your query with this explained keyword in my sequel post agrees or whatever",
    "start": "607839",
    "end": "613440"
  },
  {
    "text": "you get the whole uh the whole um query plan and how how the database will",
    "start": "613440",
    "end": "620160"
  },
  {
    "text": "they could this query in this case here for instance you can even notice some some problems with your",
    "start": "620160",
    "end": "626640"
  },
  {
    "text": "with a query in this case you can see how the query is is being executed and we are not using any indexes and that's",
    "start": "626640",
    "end": "633440"
  },
  {
    "text": "why the query is running slow uh however the problem with query plans is",
    "start": "633440",
    "end": "639279"
  },
  {
    "text": "as you have to generate a query plan for every single request and this takes a little a few microseconds but you're",
    "start": "639279",
    "end": "645519"
  },
  {
    "text": "executing millions of quad queries in the database",
    "start": "645519",
    "end": "650560"
  },
  {
    "text": "that consumes some cpu in the database and cpu in the database is definitely something they want to save",
    "start": "650560",
    "end": "658079"
  },
  {
    "text": "so what we can do in a code is use this thing called preparment statements so what performance terms do is basically",
    "start": "658079",
    "end": "664560"
  },
  {
    "text": "say to the is say to the database hey database i'm going to execute this query quite often",
    "start": "664560",
    "end": "671440"
  },
  {
    "text": "so please you can cache the query plan somewhere and whenever you see this query you can",
    "start": "671440",
    "end": "677760"
  },
  {
    "text": "just reuse the same query plan and this will allow you to also um",
    "start": "677760",
    "end": "683760"
  },
  {
    "text": "save some cpu in in the database and makes everything be executed faster because you are",
    "start": "683760",
    "end": "689839"
  },
  {
    "text": "skipping some steps internally in the database",
    "start": "689839",
    "end": "694560"
  },
  {
    "text": "well next blocking versus no blocking api calls",
    "start": "695360",
    "end": "702160"
  },
  {
    "start": "697000",
    "end": "914000"
  },
  {
    "text": "how many of you are familiar with reactive programming ah that's awesome",
    "start": "702160",
    "end": "708800"
  },
  {
    "text": "so for those who never heard about about it before in a traditional",
    "start": "708800",
    "end": "715360"
  },
  {
    "text": "database access we have our application and our application makes some some call to the database",
    "start": "715360",
    "end": "722800"
  },
  {
    "text": "and what we do is basically application or back-end weights for",
    "start": "722800",
    "end": "728720"
  },
  {
    "text": "like a few million seconds or 30 seconds whatever and at some point",
    "start": "728720",
    "end": "735440"
  },
  {
    "text": "we received the response back from the database the problem here is",
    "start": "735440",
    "end": "741519"
  },
  {
    "text": "while we were waiting for the response from the database your application your this thread was",
    "start": "741519",
    "end": "748560"
  },
  {
    "text": "consuming cpu memory energy and doing nothing other than waiting the response",
    "start": "748560",
    "end": "754079"
  },
  {
    "text": "from the database and that's a pure pure uh",
    "start": "754079",
    "end": "759279"
  },
  {
    "text": "waste of resources right so that's how we used to do a lot of the past",
    "start": "759279",
    "end": "765120"
  },
  {
    "text": "and now uh reactive programming is nothing is nothing new but",
    "start": "765120",
    "end": "770560"
  },
  {
    "text": "a lot of frameworks uh got popularity get popular in the in the last two years",
    "start": "770560",
    "end": "776320"
  },
  {
    "text": "i would say and put it simply in a reactive approach you basically",
    "start": "776320",
    "end": "781760"
  },
  {
    "text": "make a request to the database for instance uh your application gets suspended and",
    "start": "781760",
    "end": "787760"
  },
  {
    "text": "you release all the memory cpu and other stuff and other things can get processed",
    "start": "787760",
    "end": "793120"
  },
  {
    "text": "in the meantime and once you get the response back your code is called is called again and",
    "start": "793120",
    "end": "799519"
  },
  {
    "text": "then you continue executing whatever you are doing so in this in this kind of approach you",
    "start": "799519",
    "end": "805279"
  },
  {
    "text": "can release whenever you have to wait for something you can release all the resources something else has a chance to be",
    "start": "805279",
    "end": "811600"
  },
  {
    "text": "executed and then once you have the resource back everything is your code continues executing",
    "start": "811600",
    "end": "818160"
  },
  {
    "text": "and when you compare this approach to the standard blocking one",
    "start": "818160",
    "end": "824959"
  },
  {
    "text": "the difference is is quite impressive you can literally like",
    "start": "824959",
    "end": "830560"
  },
  {
    "text": "the bigger is the delay the better is to use the reactive approach here so this is something that you can even",
    "start": "830560",
    "end": "839519"
  },
  {
    "text": "run less servers with it so for instance if you have like if you're running on 10 servers with reactive programming you",
    "start": "839600",
    "end": "845440"
  },
  {
    "text": "can even like use three servers in your application because that's such such a big improvement right now and i",
    "start": "845440",
    "end": "852000"
  },
  {
    "text": "think this is uh some one of the things that will get super popular in the next two years for potentially",
    "start": "852000",
    "end": "859519"
  },
  {
    "text": "uh it's hard to find a benchmark of the performance before and after but there is a super cool talk from the zul's",
    "start": "859519",
    "end": "866959"
  },
  {
    "text": "journey to non-blocking um uh to know",
    "start": "866959",
    "end": "872160"
  },
  {
    "text": "that's basically the the topic of the the talk it is already like two years old",
    "start": "872160",
    "end": "877279"
  },
  {
    "text": "but basically zul's so in this framework zoo is an api great",
    "start": "877279",
    "end": "882320"
  },
  {
    "text": "gateway for netflix uh they basically make a comparison of",
    "start": "882320",
    "end": "887680"
  },
  {
    "text": "what the difference was what's the performance difference before and after implementing everything to be reactive",
    "start": "887680",
    "end": "893680"
  },
  {
    "text": "and then they didn't even had a lot of uh database activity because they are just a proxy right and then still got like 20",
    "start": "893680",
    "end": "900480"
  },
  {
    "text": "percent of increase in performance and that's a lot that's just a few things in the you can do in your code to",
    "start": "900480",
    "end": "907120"
  },
  {
    "text": "get to 20 of increase",
    "start": "907120",
    "end": "911399"
  },
  {
    "start": "914000",
    "end": "1075000"
  },
  {
    "text": "um we also need to talk a little bit about joints right this is uh whenever we talk about joints in data in",
    "start": "914000",
    "end": "920880"
  },
  {
    "text": "databases this is where people get like you get a lot of discussions",
    "start": "920880",
    "end": "928160"
  },
  {
    "text": "essentially databases were designed to rely on joists and and joints and they have been",
    "start": "928160",
    "end": "935040"
  },
  {
    "text": "doing this quite well to be honest of course if you if you don't have your",
    "start": "935040",
    "end": "940079"
  },
  {
    "text": "proper indexes um on a dbm for large",
    "start": "940079",
    "end": "945759"
  },
  {
    "text": "with one million rows each column uh a join will cost you something around",
    "start": "945759",
    "end": "951839"
  },
  {
    "text": "like 97 milliseconds however if you have the proper indexes",
    "start": "951839",
    "end": "957199"
  },
  {
    "text": "it will cost you less than a millisecond so it will be super fast",
    "start": "957199",
    "end": "963839"
  },
  {
    "text": "of course if you're bringing a lot of data from the let's say you're bringing your user base user um",
    "start": "963839",
    "end": "970480"
  },
  {
    "text": "like you were loading let's say 50 users from from the database with all the related entities",
    "start": "970480",
    "end": "978000"
  },
  {
    "text": "this will add up and have some impact but it's still not that bad",
    "start": "978000",
    "end": "984800"
  },
  {
    "text": "um and i would say that because of this joins a properly set up environment with",
    "start": "984800",
    "end": "991440"
  },
  {
    "text": "joints is is good enough that you is is super is super fast",
    "start": "991440",
    "end": "998079"
  },
  {
    "text": "and that's one of the reasons why the normalization in relation to the basis doesn't work that much so if i have a",
    "start": "998079",
    "end": "1003920"
  },
  {
    "text": "shopping cart and a shopping cart item uh does does it really work to store the name of the item in the shopping cart",
    "start": "1003920",
    "end": "1010720"
  },
  {
    "text": "item yeah if if for each product i mean i",
    "start": "1010720",
    "end": "1016079"
  },
  {
    "text": "if to join with with a table product i'm spending just under",
    "start": "1016079",
    "end": "1021360"
  },
  {
    "text": "less than a millisecond well it's easier to just get the product back join with the product table and and",
    "start": "1021360",
    "end": "1027280"
  },
  {
    "text": "get get the data back so the normalization uh apart from a few scenarios doesn't work",
    "start": "1027280",
    "end": "1034319"
  },
  {
    "text": "that much because joints are faster uh for me the real problem with joints",
    "start": "1034319",
    "end": "1039839"
  },
  {
    "text": "is they are super annoying so if you are old enough you probably remember",
    "start": "1039839",
    "end": "1046000"
  },
  {
    "text": "how our dow classes in the past use used to have like 13 000 lines because we had",
    "start": "1046000",
    "end": "1051760"
  },
  {
    "text": "to like just to bring the user back you have to join the user with the",
    "start": "1051760",
    "end": "1057840"
  },
  {
    "text": "table of security rules the table of preference the table of address and all the stuff and you have to make these",
    "start": "1057840",
    "end": "1063679"
  },
  {
    "text": "huge classes that are just parsing from relational",
    "start": "1063679",
    "end": "1069360"
  },
  {
    "text": "to to object and from object relation and that's terrible right because again",
    "start": "1069360",
    "end": "1076639"
  },
  {
    "start": "1075000",
    "end": "1272000"
  },
  {
    "text": "we can gave up some performance if you get productivity back",
    "start": "1076880",
    "end": "1083280"
  },
  {
    "text": "and that's when a lot of this rm solutions um appeared",
    "start": "1083280",
    "end": "1088880"
  },
  {
    "text": "right and they are really great uh because you you can get a lot of productivity you don't need",
    "start": "1088880",
    "end": "1095440"
  },
  {
    "text": "to write every single query you have this abstraction card language that is uh automatically convert everything to",
    "start": "1095440",
    "end": "1101200"
  },
  {
    "text": "sql and but there is some overhead of course of using orms because now we have one",
    "start": "1101200",
    "end": "1108720"
  },
  {
    "text": "extra layer um we also have to map relationships and usually",
    "start": "1108720",
    "end": "1114720"
  },
  {
    "text": "you there is a lot of tricks there so and traps",
    "start": "1114720",
    "end": "1120320"
  },
  {
    "text": "because for instance in in java you if you if you create like a one one uh",
    "start": "1120320",
    "end": "1127600"
  },
  {
    "text": "one-to-many relationship if you're wrong if mapping it wrongly it will generate uh",
    "start": "1127600",
    "end": "1133600"
  },
  {
    "text": "unnecessary junction tables for instance here we have a post post post comment and post comment this table in the",
    "start": "1133600",
    "end": "1140080"
  },
  {
    "text": "middle is not necessary and the reason why this is was generated",
    "start": "1140080",
    "end": "1145280"
  },
  {
    "text": "was because we did the wrong mapping in the code and and quite often you see like the first",
    "start": "1145280",
    "end": "1150799"
  },
  {
    "text": "the first the first answer on sakura flow is the wrong answer so you really have to",
    "start": "1150799",
    "end": "1156320"
  },
  {
    "text": "to check what's going on what's happening in the database itself and of course because you don't know that this",
    "start": "1156320",
    "end": "1161440"
  },
  {
    "text": "database be this table has been generated um quite often you don't create the proper",
    "start": "1161440",
    "end": "1167039"
  },
  {
    "text": "indexes and that's when everything gets start getting slow and of course uh",
    "start": "1167039",
    "end": "1173120"
  },
  {
    "text": "one of the problems also with this kind of approach is we quite often over fetch data right because you map relationships",
    "start": "1173120",
    "end": "1179280"
  },
  {
    "text": "to be eager and then you uh when you get to user back you",
    "start": "1179280",
    "end": "1184320"
  },
  {
    "text": "probably get much more data than you need so rms are good",
    "start": "1184320",
    "end": "1190559"
  },
  {
    "text": "but we as developers we have been trying to make the database as generic as possible",
    "start": "1190559",
    "end": "1197280"
  },
  {
    "text": "and we never double check what's what are the actual queries being generated in the database",
    "start": "1197280",
    "end": "1202880"
  },
  {
    "text": "and that's one of the issues why we one of the reasons why we have so many issues with rms in general",
    "start": "1202880",
    "end": "1209360"
  },
  {
    "text": "okay and maybe maybe you can say okay now this is the eager right what if i change",
    "start": "1209360",
    "end": "1214960"
  },
  {
    "text": "everything to be lazy then i can change my relationships to be lazy and in this case here i have a building",
    "start": "1214960",
    "end": "1221440"
  },
  {
    "text": "and i have companies and if i want to if i require other buildings and i want to integrate to the companies",
    "start": "1221440",
    "end": "1228000"
  },
  {
    "text": "what will happen is we will have this first query being executed in the database which are to",
    "start": "1228000",
    "end": "1234720"
  },
  {
    "text": "bring all the buildings but every time i call in my code get companies hibernate",
    "start": "1234720",
    "end": "1239760"
  },
  {
    "text": "under the hood will execute a new query and that's again because instead of",
    "start": "1239760",
    "end": "1245360"
  },
  {
    "text": "bringing all together this will be super slow again because in every time you are interested in you",
    "start": "1245360",
    "end": "1251440"
  },
  {
    "text": "call get companies you are basically executing new query there there is a if a java guy there is a",
    "start": "1251440",
    "end": "1257600"
  },
  {
    "text": "super good book that talks a lot about those issues",
    "start": "1257600",
    "end": "1263280"
  },
  {
    "text": "called high performance java persistence this is the guy who is basically responsible for the hybrid framework",
    "start": "1263280",
    "end": "1270880"
  },
  {
    "text": "but the problem for me is okay in a relational if a as you could pure",
    "start": "1271280",
    "end": "1278080"
  },
  {
    "start": "1272000",
    "end": "1392000"
  },
  {
    "text": "sequel i can make i can in theory get more performance but like i will be less productive",
    "start": "1278080",
    "end": "1286000"
  },
  {
    "text": "i will have more uh less productivity but if i use an rm",
    "start": "1286000",
    "end": "1291760"
  },
  {
    "text": "i can get more productivity and but less performance in general",
    "start": "1291760",
    "end": "1297280"
  },
  {
    "text": "and the issue is why why do i have to choose why can i have both",
    "start": "1297280",
    "end": "1303440"
  },
  {
    "text": "and the root cause of this issue is something much bigger the problem is something called",
    "start": "1303440",
    "end": "1310320"
  },
  {
    "text": "impedance mismatch so if you think about it the way we deal with code",
    "start": "1310320",
    "end": "1316159"
  },
  {
    "text": "with data in the code it's completely different than the way we store data in the database",
    "start": "1316159",
    "end": "1322159"
  },
  {
    "text": "um basically when the database were created in the 70s yeah that makes a lot of",
    "start": "1322159",
    "end": "1328080"
  },
  {
    "text": "sense to start everything in in tables and rows right however that has been the same for the past 30",
    "start": "1328080",
    "end": "1335360"
  },
  {
    "text": "35 40 years and in the fleet in the other side in our application we completely change the",
    "start": "1335360",
    "end": "1341440"
  },
  {
    "text": "way we code but we are still trying to store data in tables",
    "start": "1341440",
    "end": "1347280"
  },
  {
    "text": "and that doesn't make sense what their rms uh frameworks are trying to do is",
    "start": "1347280",
    "end": "1353039"
  },
  {
    "text": "basically okay it's a small breach that try to make this this friction uh less",
    "start": "1353039",
    "end": "1360799"
  },
  {
    "text": "less apparently so that's what that's the biggest issue here is we are",
    "start": "1360799",
    "end": "1366799"
  },
  {
    "text": "we store data in a way in in we deal with data in a code in the different way that we store in the",
    "start": "1366799",
    "end": "1372640"
  },
  {
    "text": "database uh this criticism in sql is nothing something new here's a",
    "start": "1372640",
    "end": "1379600"
  },
  {
    "text": "blog post in 2000 from 2004 already saying hey we need to evolve this table",
    "start": "1379600",
    "end": "1386240"
  },
  {
    "text": "this relational model and and that's why when you go to",
    "start": "1386240",
    "end": "1392799"
  },
  {
    "start": "1392000",
    "end": "1660000"
  },
  {
    "text": "let's say nosql databases quite often they use different formats this",
    "start": "1392799",
    "end": "1398559"
  },
  {
    "text": "doesn't matter you can use json you can use xml you can use yamo but the structure is usually some some kind",
    "start": "1398559",
    "end": "1405840"
  },
  {
    "text": "of hierarchical data so you can have nested entities or arrays and all this kind of stuff because",
    "start": "1405840",
    "end": "1412159"
  },
  {
    "text": "this is exactly the same way we deal with data in your code and translating from an object to a json is",
    "start": "1412159",
    "end": "1419200"
  },
  {
    "text": "a super simple operation right but let's step back uh",
    "start": "1419200",
    "end": "1425360"
  },
  {
    "text": "a little bit and talk about scaling a database a relational database if a",
    "start": "1425360",
    "end": "1430640"
  },
  {
    "text": "relational database is fine for you you're not having any issue issues with performance you are",
    "start": "1430640",
    "end": "1436240"
  },
  {
    "text": "totally fine that live your life and be happy however at some point",
    "start": "1436240",
    "end": "1442799"
  },
  {
    "text": "what happened with databases is okay i need to scale my database and what you do",
    "start": "1442799",
    "end": "1447840"
  },
  {
    "text": "you add more memory add more cpu and that's it and then if your company continues",
    "start": "1447840",
    "end": "1453760"
  },
  {
    "text": "growing you get more user things get started getting slow again and what you do boom",
    "start": "1453760",
    "end": "1460000"
  },
  {
    "text": "you basically buy an even bigger machine and the problem is",
    "start": "1460000",
    "end": "1465600"
  },
  {
    "text": "we are living in an area in an era where we are trying trying to build",
    "start": "1465600",
    "end": "1471760"
  },
  {
    "text": "distributed systems that's why micro service is getting so popular uh and we'll say okay we didn't need to",
    "start": "1471760",
    "end": "1478000"
  },
  {
    "text": "break the multi-leaf and and create smaller applications but the database is",
    "start": "1478000",
    "end": "1483120"
  },
  {
    "text": "pretty much the same thing we are only scaling up and there there is many reasons why but",
    "start": "1483120",
    "end": "1489200"
  },
  {
    "text": "let's just pick in one example in a in a relational model your user",
    "start": "1489200",
    "end": "1494799"
  },
  {
    "text": "data is distributed between multiple tables so you have the user a table with preference a table with your user a",
    "start": "1494799",
    "end": "1500720"
  },
  {
    "text": "table with roles and when you have this running multiple servers",
    "start": "1500720",
    "end": "1506080"
  },
  {
    "text": "uh there is a big chance that you have when you need to load the user back",
    "start": "1506080",
    "end": "1511200"
  },
  {
    "text": "you have a cross node joins and that will be super slow and that's why most of the relational",
    "start": "1511200",
    "end": "1517120"
  },
  {
    "text": "database the design of the relational database itself uh is was created",
    "start": "1517120",
    "end": "1523039"
  },
  {
    "text": "with a rule that okay this will run in a single machine and if i want to scale out i",
    "start": "1523039",
    "end": "1528960"
  },
  {
    "text": "have to use a totally different approach and that's why even though relation database have been there for like 20",
    "start": "1528960",
    "end": "1535440"
  },
  {
    "text": "years they the the way you scale a database relational database is pretty much the same you just make the machine",
    "start": "1535440",
    "end": "1542799"
  },
  {
    "text": "bigger and the problem is if in the past let's say in 2006 2008 just google and amazon",
    "start": "1542799",
    "end": "1551440"
  },
  {
    "text": "had problems with scalability now we even have uh startups having",
    "start": "1551440",
    "end": "1557679"
  },
  {
    "text": "those issues right because data is growing much faster than our",
    "start": "1557679",
    "end": "1562880"
  },
  {
    "text": "hardware capacity think about pokemon go for instance which is already like four or five years old",
    "start": "1562880",
    "end": "1568480"
  },
  {
    "text": "uh they basically went from zero to almost 300 million users in a month and a half and that's",
    "start": "1568480",
    "end": "1574720"
  },
  {
    "text": "some of the use cases like gaming for instance is something is a field where",
    "start": "1574720",
    "end": "1580480"
  },
  {
    "text": "scaling is super important because you have this bus and you have like a really short period of time where you can get",
    "start": "1580480",
    "end": "1587039"
  },
  {
    "text": "all your revenue from from this game and then people stopping playing or the another new game is launched and you",
    "start": "1587039",
    "end": "1592960"
  },
  {
    "text": "lose the traffic so scaling out in gaming for instance is something super important",
    "start": "1592960",
    "end": "1599799"
  },
  {
    "text": "cool so in general if you say okay this is how",
    "start": "1600480",
    "end": "1607200"
  },
  {
    "text": "data in json looks like so this is an example for root so from chicago to",
    "start": "1609760",
    "end": "1616559"
  },
  {
    "text": "columbus for instance and you see here yes i still have the airline id so i can",
    "start": "1616559",
    "end": "1623919"
  },
  {
    "text": "have foreign keys i can do joints uh and and here i also have the schedule because the scada only makes sense to",
    "start": "1623919",
    "end": "1630480"
  },
  {
    "text": "exist inside a route right like i can have like doesn't make sense to have a schedule in another document because the",
    "start": "1630480",
    "end": "1638480"
  },
  {
    "text": "context only makes sense when it is inside a json cool so yeah",
    "start": "1638480",
    "end": "1645039"
  },
  {
    "text": "having this kind of hierarchical data is something available we could have also some kind",
    "start": "1645039",
    "end": "1650720"
  },
  {
    "text": "of hierarchical data in the relational database",
    "start": "1650720",
    "end": "1655840"
  },
  {
    "text": "but then we have another problem which is how do we query this data right because",
    "start": "1656080",
    "end": "1662480"
  },
  {
    "start": "1660000",
    "end": "1961000"
  },
  {
    "text": "now it's not it's not it's not a flat date anymore so sql doesn't work",
    "start": "1662480",
    "end": "1669520"
  },
  {
    "text": "and what happened in the past is a lot of super smart people create new new languages",
    "start": "1669520",
    "end": "1674799"
  },
  {
    "text": "and to be honest some of them are mind-blowing but we all like sql and it's not just",
    "start": "1674799",
    "end": "1682799"
  },
  {
    "text": "developers like even an academy people still like sql and they whenever you see a totally",
    "start": "1682799",
    "end": "1688480"
  },
  {
    "text": "different language say okay i don't like this that much i want to i want to stay with this",
    "start": "1688480",
    "end": "1694880"
  },
  {
    "text": "uh so some folks from the university of san diego um",
    "start": "1694880",
    "end": "1700159"
  },
  {
    "text": "they saw this and say hey okay so we need to improve",
    "start": "1700159",
    "end": "1706159"
  },
  {
    "text": "uh this this relation model we need to store hierarchical data and databases in",
    "start": "1706159",
    "end": "1711440"
  },
  {
    "text": "order to be able to scale but",
    "start": "1711440",
    "end": "1717440"
  },
  {
    "text": "people like sql so what are the minimal changes we can do in sql to make it work with uh",
    "start": "1717440",
    "end": "1725520"
  },
  {
    "text": "relational with hierarchical data and they they create in 2015 they",
    "start": "1725520",
    "end": "1731520"
  },
  {
    "text": "created published a paper called sql plus plus the query language",
    "start": "1731520",
    "end": "1737279"
  },
  {
    "text": "uh which was basically a set of uh some extension of sql to say okay if we add",
    "start": "1737279",
    "end": "1742720"
  },
  {
    "text": "those keywords in sql this will be good enough to work with hierarchical data",
    "start": "1742720",
    "end": "1748799"
  },
  {
    "text": "and then some other universities actually joined the game and they started working with sql",
    "start": "1748799",
    "end": "1754960"
  },
  {
    "text": "and even the father of sequel itself don chumberlin the guy who created sql",
    "start": "1754960",
    "end": "1760320"
  },
  {
    "text": "so okay huh this is interesting and he creates a book called sql plus plus for sql users",
    "start": "1760320",
    "end": "1765679"
  },
  {
    "text": "and back then couchbase saw this and say okay we were just a key value store",
    "start": "1765679",
    "end": "1770880"
  },
  {
    "text": "and we were like okay this is interesting for you because we saw we already stored data as json and we want",
    "start": "1770880",
    "end": "1776559"
  },
  {
    "text": "to give the chan the chance for for users to acquire this data so",
    "start": "1776559",
    "end": "1782080"
  },
  {
    "text": "uh we implemented this specification and we came up with something called",
    "start": "1782080",
    "end": "1787440"
  },
  {
    "text": "anyone ql or nicole and",
    "start": "1787440",
    "end": "1792480"
  },
  {
    "text": "this has been like four years since we played the nico and is working really great for us",
    "start": "1792480",
    "end": "1798399"
  },
  {
    "text": "but let's show you a few examples here so this is an example of sql right so you",
    "start": "1798399",
    "end": "1805039"
  },
  {
    "text": "have select star select a full bar from my table",
    "start": "1805039",
    "end": "1810320"
  },
  {
    "text": "and this is an example in sql plus plus is pretty much the same",
    "start": "1810320",
    "end": "1816000"
  },
  {
    "text": "thing in fact the only difference here is that we are acquiring adjacent data",
    "start": "1816000",
    "end": "1822640"
  },
  {
    "text": "and if we quit if if you use queens really hard in this part here you actually see a table here",
    "start": "1822640",
    "end": "1829200"
  },
  {
    "text": "like multiple as a symbol table however",
    "start": "1829200",
    "end": "1834840"
  },
  {
    "text": "um sql plus plus plus has some extra powers i would say so for instance let's say i want to",
    "start": "1834840",
    "end": "1841679"
  },
  {
    "text": "select the city of the user here right i have a json structure and i want to select the",
    "start": "1841679",
    "end": "1848720"
  },
  {
    "text": "the city of the user what i can do is just use select address dot city and then i'm",
    "start": "1848720",
    "end": "1855039"
  },
  {
    "text": "getting the the the city of the user and okay i know what you guys are",
    "start": "1855039",
    "end": "1861600"
  },
  {
    "text": "thinking right this is kind of old news because we have been doing this for ages in the",
    "start": "1861600",
    "end": "1867279"
  },
  {
    "text": "in in those in javascript and the query language and some other organic query language",
    "start": "1867279",
    "end": "1872720"
  },
  {
    "text": "that's true but now you are doing this native native it is natively supported by the database",
    "start": "1872720",
    "end": "1881120"
  },
  {
    "text": "uh similar example let's say i want to select the second favorite this",
    "start": "1881519",
    "end": "1886720"
  },
  {
    "text": "second favorite food of each user i can do something like favorite foods and pass the index",
    "start": "1886720",
    "end": "1892880"
  },
  {
    "text": "right super simple what if i want to select all the users that have pizza as a",
    "start": "1892880",
    "end": "1899919"
  },
  {
    "text": "favorite food and i can do some something like okay select where any favorite food satisfies f equals to",
    "start": "1899919",
    "end": "1906480"
  },
  {
    "text": "pizza simple as that pre i mean even sound obvious right like",
    "start": "1906480",
    "end": "1911840"
  },
  {
    "text": "makes a lot of sense you guys had no experience with single pulse plus in the past and you can clearly understand what's going on",
    "start": "1911840",
    "end": "1918840"
  },
  {
    "text": "here we have some other stuff here let's say i want to um",
    "start": "1918840",
    "end": "1925200"
  },
  {
    "text": "let's say i want to promote favorite foods so favorite foods is a nested entity i want to unless this enters you",
    "start": "1925200",
    "end": "1930960"
  },
  {
    "text": "i want to uh bring this uh anti uh a layer um",
    "start": "1930960",
    "end": "1937120"
  },
  {
    "text": "layerable so what i can do is actually use the word a nest and i can if i use this",
    "start": "1937120",
    "end": "1943600"
  },
  {
    "text": "query i can get like matte pizza matte cheesecake macd and dennis matt so this is pretty much like a",
    "start": "1943600",
    "end": "1950320"
  },
  {
    "text": "self join i would say it's like a drawing with is a joint with the document with document itself but you are promoting",
    "start": "1950320",
    "end": "1956880"
  },
  {
    "text": "this alert above and guess what this is also",
    "start": "1956880",
    "end": "1962640"
  },
  {
    "start": "1961000",
    "end": "2092000"
  },
  {
    "text": "backwards compatible so i can do joins i can do otherwise i can do groups i can do average i can do maximum whatever",
    "start": "1962640",
    "end": "1968720"
  },
  {
    "text": "whatever you are used to in sql you can do here but with some extra power",
    "start": "1968720",
    "end": "1974159"
  },
  {
    "text": "and of course our our implementation for instance",
    "start": "1974159",
    "end": "1978799"
  },
  {
    "text": "has been uh we have thousands of uh i mean not thousands but a few dozens of keywords already",
    "start": "1980159",
    "end": "1988159"
  },
  {
    "text": "and it's really i mean we would need a whole uh [Music] a session just to go over them",
    "start": "1988159",
    "end": "1995919"
  },
  {
    "text": "and but the good thing is we are not the only ones around uh asterix db apache drew",
    "start": "1995919",
    "end": "2003279"
  },
  {
    "text": "particular which is a aws data a new the aws database they're all already",
    "start": "2003279",
    "end": "2009760"
  },
  {
    "text": "following this pattern which is super cool this is one thing that",
    "start": "2009760",
    "end": "2014880"
  },
  {
    "text": "we really want to push because the relational model has to evolve we we",
    "start": "2014880",
    "end": "2020559"
  },
  {
    "text": "have to okay tables are fine at a small scale but",
    "start": "2020559",
    "end": "2026399"
  },
  {
    "text": "uh this model doesn't work when you have to distribute the systems uh think even about like",
    "start": "2026399",
    "end": "2033039"
  },
  {
    "text": "uh transactions right let's say i want to insert a new user",
    "start": "2033039",
    "end": "2038480"
  },
  {
    "text": "and to insert a new user i have to insert in maybe data in",
    "start": "2038480",
    "end": "2043919"
  },
  {
    "text": "six seven different tables so in a relational database i have to when i insert a user i have to",
    "start": "2043919",
    "end": "2050638"
  },
  {
    "text": "insert start transaction insert data in all those six seven tables and then commit a",
    "start": "2050639",
    "end": "2056320"
  },
  {
    "text": "transaction when you have data as json for instance which is a hierarchy data and everything",
    "start": "2056320",
    "end": "2062240"
  },
  {
    "text": "is not single document i don't even need a transaction because the the update the insert is atomic so it's our nothing so",
    "start": "2062240",
    "end": "2068638"
  },
  {
    "text": "i can just insert data and if something fails i will get back an exception so i don't need to start",
    "start": "2068639",
    "end": "2074720"
  },
  {
    "text": "some transaction and this uh helps you to get to get rid of all the overhead of a",
    "start": "2074720",
    "end": "2081520"
  },
  {
    "text": "transaction and without the transactions everything can can make can can",
    "start": "2081520",
    "end": "2087520"
  },
  {
    "text": "your insert can be much faster so",
    "start": "2087520",
    "end": "2093599"
  },
  {
    "start": "2092000",
    "end": "2258000"
  },
  {
    "text": "yeah if you are aware if you're a sql guy you probably remember that sequel 2016",
    "start": "2093599",
    "end": "2098720"
  },
  {
    "text": "uh 2016 yeah they introduced support for json",
    "start": "2098720",
    "end": "2105520"
  },
  {
    "text": "we see some support on postgres on mysql as some other database",
    "start": "2106160",
    "end": "2112160"
  },
  {
    "text": "for json but that is a totally different scenario",
    "start": "2112320",
    "end": "2117920"
  },
  {
    "text": "they are just to say okay you are using a relational database and you need to start some json you need to query some",
    "start": "2117920",
    "end": "2123280"
  },
  {
    "text": "stuff this is something you could use but this is a this is just okay i implement this extra",
    "start": "2123280",
    "end": "2130560"
  },
  {
    "text": "use case here it's not sql plus plus is a whole different approach and in fact if you see how",
    "start": "2130560",
    "end": "2137119"
  },
  {
    "text": "difficult it is to query data in in those uh databases when when i mean",
    "start": "2137119",
    "end": "2143280"
  },
  {
    "text": "acquiring json data in this database you say okay circle plus is something far better",
    "start": "2143280",
    "end": "2148720"
  },
  {
    "text": "even uh don chumberlin again the father of sql he posted an article comparing uh single",
    "start": "2148720",
    "end": "2156400"
  },
  {
    "text": "plus plus with sql 2016 and the conclusion is basically okay this is different",
    "start": "2156400",
    "end": "2162240"
  },
  {
    "text": "scenarios they are totally different scenarios sql sql 2016 is just okay i have some",
    "start": "2162240",
    "end": "2167440"
  },
  {
    "text": "basic json data i need to store i need to make some basic queries and sql plus",
    "start": "2167440",
    "end": "2173040"
  },
  {
    "text": "plus is a whole different approach where we are evolving the model of the database itself",
    "start": "2173040",
    "end": "2180000"
  },
  {
    "text": "uh well the the reason why i talked about",
    "start": "2180000",
    "end": "2186160"
  },
  {
    "text": "hierarchical data and and sql plus plus is because",
    "start": "2186160",
    "end": "2192320"
  },
  {
    "text": "when we have this implemented in all databases we can actually get rid of the",
    "start": "2192320",
    "end": "2197359"
  },
  {
    "text": "other orms because we don't have object relation mapping anymore so the orams will become something else",
    "start": "2197359",
    "end": "2204400"
  },
  {
    "text": "like maybe we can call persistence abstraction layer or something else which is just okay",
    "start": "2204400",
    "end": "2209920"
  },
  {
    "text": "making my code less verbose but you can write sql plus queries and they will look",
    "start": "2209920",
    "end": "2216480"
  },
  {
    "text": "very similar to what we already do with rm today so we can get rid of this work around called orms and we can go",
    "start": "2216480",
    "end": "2224160"
  },
  {
    "text": "back and and write directly to the database again and have nearly the same productivity",
    "start": "2224160",
    "end": "2230560"
  },
  {
    "text": "but this time we know exactly what's going on right we don't have any any traps in the",
    "start": "2230560",
    "end": "2236720"
  },
  {
    "text": "middle because we don't know how the rm was implemented or how this uh annotation will affect",
    "start": "2236720",
    "end": "2244400"
  },
  {
    "text": "the will affect the the performance application",
    "start": "2244400",
    "end": "2250160"
  },
  {
    "text": "so i do think that this is something that we have to fix in the next few years",
    "start": "2250160",
    "end": "2255440"
  },
  {
    "text": "i am almost done here so some key takeaways for you guys",
    "start": "2255440",
    "end": "2262000"
  },
  {
    "start": "2258000",
    "end": "2362000"
  },
  {
    "text": "first it's okay to trade off performance to productivity",
    "start": "2262000",
    "end": "2267599"
  },
  {
    "text": "as long as you are getting productivity back it's a way to give up in some performance",
    "start": "2267599",
    "end": "2273920"
  },
  {
    "text": "uh orms they are awesome yes they i mean we couldn't",
    "start": "2273920",
    "end": "2279599"
  },
  {
    "text": "i it's hard to think any application nowadays that doesn't use an nrm but",
    "start": "2279599",
    "end": "2285040"
  },
  {
    "text": "as developers we still have to double check everything that's been generated because quite often the reason why they",
    "start": "2285040",
    "end": "2291839"
  },
  {
    "text": "are slow is because you are not aware of what's going on under the hood and then",
    "start": "2291839",
    "end": "2296880"
  },
  {
    "text": "you get some unexpected behavior and everything gets super slow and the last thing is",
    "start": "2296880",
    "end": "2302880"
  },
  {
    "text": "okay uh we knew for quite a long time that the relational model wasn't good enough well",
    "start": "2302880",
    "end": "2309359"
  },
  {
    "text": "we didn't have any options right it takes a long time usually to build a database i would say that database are",
    "start": "2309359",
    "end": "2315280"
  },
  {
    "text": "pretty much like airplane engines it takes like 10 years",
    "start": "2315280",
    "end": "2320720"
  },
  {
    "text": "to create a reliable database with all the basic features you need and now we are",
    "start": "2320720",
    "end": "2326400"
  },
  {
    "text": "we already have some options there we we have some implementations and even though you don't want if even if you",
    "start": "2326400",
    "end": "2333280"
  },
  {
    "text": "don't want to use those databases it's really fine but it's important for you to know that",
    "start": "2333280",
    "end": "2338800"
  },
  {
    "text": "this the language the model has to change has to evolve and guess",
    "start": "2338800",
    "end": "2344560"
  },
  {
    "text": "what we are we developers are the ones driving um the change in the software",
    "start": "2344560",
    "end": "2350960"
  },
  {
    "text": "industry and if you press your databases they will eventually implement hierarchical structures they will",
    "start": "2350960",
    "end": "2356400"
  },
  {
    "text": "support this kind of thing and you can get rid of extra overhead in your application",
    "start": "2356400",
    "end": "2362079"
  },
  {
    "start": "2362000",
    "end": "2388000"
  },
  {
    "text": "so this is pretty much what i have if you like this talk please don't",
    "start": "2362079",
    "end": "2369119"
  },
  {
    "text": "please uh um don't forget to [Music] rate this session",
    "start": "2369119",
    "end": "2375680"
  },
  {
    "text": "and yeah if you have any questions i will gladly happy to answer",
    "start": "2375680",
    "end": "2381460"
  },
  {
    "text": "[Applause]",
    "start": "2381460",
    "end": "2386880"
  },
  {
    "text": "you",
    "start": "2386880",
    "end": "2388960"
  }
]