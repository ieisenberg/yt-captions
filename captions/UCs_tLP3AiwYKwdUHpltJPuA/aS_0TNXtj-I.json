[
  {
    "text": "so I'm the I'm the team lead at a type-safe or I lead the the Skog team",
    "start": "5460",
    "end": "10719"
  },
  {
    "text": "there before i was at epfl where scala was born but almost ten years of working",
    "start": "10719",
    "end": "19779"
  },
  {
    "text": "on scala you can blame me for some of the complexity impaired the type constructors stuff the higher kind of",
    "start": "19779",
    "end": "25810"
  },
  {
    "text": "stuff and implicit search dependent method types we wrote the pattern matcher and then I came to the dark side",
    "start": "25810",
    "end": "32168"
  },
  {
    "text": "or two blue the dark blue side a type-safe so well maybe I'll say just",
    "start": "32169",
    "end": "41290"
  },
  {
    "text": "one more thing about about type save everything we do is written in Scala and",
    "start": "41290",
    "end": "47140"
  },
  {
    "text": "so Scala is very important to us both emotionally and under from a business",
    "start": "47140",
    "end": "52390"
  },
  {
    "text": "perspective we see ourselves discala stewards as you know the benign scala",
    "start": "52390",
    "end": "58690"
  },
  {
    "text": "stewards we definitely are trying to open up and work with everybody who wants to contribute wants to know what's",
    "start": "58690",
    "end": "64210"
  },
  {
    "text": "going on so that's why I'm telling you about all our secret plans and this talk and with that said everything all our",
    "start": "64210",
    "end": "73060"
  },
  {
    "text": "other products are designed so that they work well with Java and that's a big focus also for Scala 212 is that we want",
    "start": "73060",
    "end": "79420"
  },
  {
    "text": "to be a great citizen in the Java platform especially not on Java 8 you",
    "start": "79420",
    "end": "86110"
  },
  {
    "text": "know we can do functional stuff a bit better and speaking of openness we can't",
    "start": "86110",
    "end": "93130"
  },
  {
    "text": "do this alone were four people typesafe a lot more contributors out there than",
    "start": "93130",
    "end": "98350"
  },
  {
    "text": "the four of us easily get overwhelmed trying to review everything that that's",
    "start": "98350",
    "end": "103750"
  },
  {
    "text": "going on so that's that's that's been very encouraging to see and Weavin been investing from our end to make it easier",
    "start": "103750",
    "end": "110650"
  },
  {
    "text": "to contribute so simplifying the process investing in infrastructure running our denk ins on ec2 all that boring stuff",
    "start": "110650",
    "end": "117580"
  },
  {
    "text": "that i get to do and also things like modularizing so spinning out more stuff",
    "start": "117580",
    "end": "123130"
  },
  {
    "text": "that used to be in our monolithic standard library that is now being maintained by people from the community",
    "start": "123130",
    "end": "128340"
  },
  {
    "text": "they cut releases they merge pull requests they decide the direction and",
    "start": "128340",
    "end": "134200"
  },
  {
    "text": "that's something that that's worked out well in 211 that was the fur the first time that we really did that and we intend to continue doing that so",
    "start": "134200",
    "end": "144840"
  },
  {
    "text": "to give you an idea of how the how to commit pi is split up about a fourth it",
    "start": "144840",
    "end": "150250"
  },
  {
    "text": "comes from people not at epfl or a type-safe that's a three-fold increase over to 10 so i think our efforts are",
    "start": "150250",
    "end": "157980"
  },
  {
    "text": "rewarded there and we're very happy to see that that growth epfl does a lot of",
    "start": "157980",
    "end": "164470"
  },
  {
    "text": "research sews college as for example is is an EPFL project we contribute to it",
    "start": "164470",
    "end": "170620"
  },
  {
    "text": "but we don't we don't own it we love it we think it's very exciting but most of",
    "start": "170620",
    "end": "175900"
  },
  {
    "text": "the work is being done at epfl for example so that's why they're slice it up I is a bit smaller for Scala too",
    "start": "175900",
    "end": "181359"
  },
  {
    "text": "they're also working on dotty and so on and so the other half is is it the type",
    "start": "181359",
    "end": "187060"
  },
  {
    "text": "save team we merge about 50 pull requests per month up from about 40 or",
    "start": "187060",
    "end": "194470"
  },
  {
    "text": "42 depending on how you like to round things into 10 so that's all very",
    "start": "194470",
    "end": "201340"
  },
  {
    "text": "encouraging and here's the top 10 list of contributors according to get short",
    "start": "201340",
    "end": "207160"
  },
  {
    "text": "log and you know their commit stats so we're very happy happy to see that and",
    "start": "207160",
    "end": "214060"
  },
  {
    "text": "thank you I don't actually know everybody I would not sure we recognize",
    "start": "214060",
    "end": "219910"
  },
  {
    "text": "all of you so if you're in the room or in the conference please please come up and I will buy you an appropriate",
    "start": "219910",
    "end": "226329"
  },
  {
    "text": "beverage most of all you know I hope you have fun programming in Scala first and",
    "start": "226329",
    "end": "231669"
  },
  {
    "text": "for all and contributing to it as well and let me know my twitter handle will be on here some point how we can make",
    "start": "231669",
    "end": "238299"
  },
  {
    "text": "that easier so there's definitely something that we think about a lot so",
    "start": "238299",
    "end": "243849"
  },
  {
    "text": "but today I'll be talking more about the roadmap and how your contributions could fit in there man so let me give you a",
    "start": "243849",
    "end": "249430"
  },
  {
    "text": "quick overview of the the next couple of releases they're coming up so one of the",
    "start": "249430",
    "end": "254440"
  },
  {
    "text": "the themes for us since we're we we want to find the balance between moving",
    "start": "254440",
    "end": "259870"
  },
  {
    "text": "quickly enough that we can add exciting features and fix bugs and also not break break people's code all the time like",
    "start": "259870",
    "end": "266440"
  },
  {
    "text": "before i joined type safe and at epfl we thought that was kind of fun",
    "start": "266440",
    "end": "272220"
  },
  {
    "text": "we've decided to alternate compiler and library releases so into 12 we're not",
    "start": "272220",
    "end": "277360"
  },
  {
    "text": "changing much about the library we're adding deprecation and so on so that the scene is set for the next release to",
    "start": "277360",
    "end": "282639"
  },
  {
    "text": "remove things but between those two 11 and 2 12 migrations it'll mostly be fixing the compiler changing the back",
    "start": "282639",
    "end": "289569"
  },
  {
    "text": "end in this case and so you shouldn't have to worry too much about changing your programs except that you were",
    "start": "289569",
    "end": "295389"
  },
  {
    "text": "exploiting some weird bug and implicit search or something like that so for 2 12 most of the stuff is happening in the",
    "start": "295389",
    "end": "302650"
  },
  {
    "text": "back end some of the Java 8 interop has to happen at the type checker and that's what I've been working on but I'll go",
    "start": "302650",
    "end": "308710"
  },
  {
    "text": "into a lot more detail that during this talk we also finally are emerging miguela Garcia's work we're cleaning it",
    "start": "308710",
    "end": "316419"
  },
  {
    "text": "up and Lucas Ritz is doing that work making a production-ready so that we're basically replacing the old optimizer",
    "start": "316419",
    "end": "323020"
  },
  {
    "text": "entirely by a new one that's based on ASM and we'll have a much more",
    "start": "323020",
    "end": "328120"
  },
  {
    "text": "predictable in liner which is great one of the projects I would like to work on time permitting is abide that that's our",
    "start": "328120",
    "end": "335199"
  },
  {
    "text": "lint tool that would plug into the compiler and knows semantically exactly",
    "start": "335199",
    "end": "342009"
  },
  {
    "text": "what's going on and can you give you very precise warnings kind of like what Matt's was talking about earlier although I just not a shiny that's",
    "start": "342009",
    "end": "350620"
  },
  {
    "text": "that's something that we'd really like to do and so as I said prepare for the next release so that is too far into the",
    "start": "350620",
    "end": "358810"
  },
  {
    "text": "future to to really give a date or even a version number although if you're good at math you probably guess it's going to",
    "start": "358810",
    "end": "364060"
  },
  {
    "text": "be 2 13 mostly that will be about cleaning up the standard library we've",
    "start": "364060",
    "end": "370870"
  },
  {
    "text": "accumulated a lot of stuff Skiles over 10 years old now we want to invite more people from the community to have their",
    "start": "370870",
    "end": "376990"
  },
  {
    "text": "modules as part of the official distribution spin out some stuff that hasn't worked out really well we write",
    "start": "376990",
    "end": "384219"
  },
  {
    "text": "the collection library and so on so since we're roughly on an 18-month cycle and it takes us about six months to to",
    "start": "384219",
    "end": "390969"
  },
  {
    "text": "get through like the first couple that releases of a new release expect us about a year after 2 12 30 yeah and",
    "start": "390969",
    "end": "397509"
  },
  {
    "text": "anybody using macros and Scala just wondering wow you're my favorite",
    "start": "397509",
    "end": "402789"
  },
  {
    "text": "audience ever yeah don't use macros they're going to change a lot that's all I have to say",
    "start": "402789",
    "end": "411850"
  },
  {
    "text": "about macros after that we're going to have another major release that I",
    "start": "411850",
    "end": "417400"
  },
  {
    "text": "predict will be split up into acts one will be again a careful refactoring and",
    "start": "417400",
    "end": "425200"
  },
  {
    "text": "probably a big replacement of the back end based on on the the research that is being done a DPF LA right now ready to",
    "start": "425200",
    "end": "431710"
  },
  {
    "text": "have a couple of interesting ideas about making it back end a lot faster maintainable and in the first phase we",
    "start": "431710",
    "end": "439600"
  },
  {
    "text": "would keep the front end so that you can still compile the same code we just use apply a different back into it we can compare to bytecode I mean we compile up",
    "start": "439600",
    "end": "446860"
  },
  {
    "text": "over a million lines of code every night from the community to make sure we don't regress and when we move to a new",
    "start": "446860",
    "end": "453580"
  },
  {
    "text": "architecture like that for sure we will be looking at the bytecode and we're looking for all kinds of engineering",
    "start": "453580",
    "end": "459639"
  },
  {
    "text": "mechanisms to make sure that this kind of transition will be a smooth one so that also goes into abide and",
    "start": "459639",
    "end": "465490"
  },
  {
    "text": "refactoring tools that can help you get rid of some of the deprecated syntax that you might be using all this to say",
    "start": "465490",
    "end": "474039"
  },
  {
    "text": "we're not going to pull up by three so don giovanni act 2 will be a front-end",
    "start": "474039",
    "end": "480729"
  },
  {
    "text": "rework that's where the most excitement is right now around dotty i would say where a lot of the crafty syntax is",
    "start": "480729",
    "end": "487240"
  },
  {
    "text": "going away simpler foundations at the type level and andrew and nirman are",
    "start": "487240",
    "end": "493120"
  },
  {
    "text": "going to be out of business with their puzzler books sorry about that or at least that's our goal so that's kind of",
    "start": "493120",
    "end": "500139"
  },
  {
    "text": "the overview for the next five years I guess roughly or the next 40 minutes",
    "start": "500139",
    "end": "506130"
  },
  {
    "text": "depending on your perspective so what",
    "start": "506130",
    "end": "511210"
  },
  {
    "text": "we've been working on quite intensely already although not a lot of code has landed in 212 is Java 8 support and I'll",
    "start": "511210",
    "end": "520150"
  },
  {
    "text": "tell you why it hasn't landed in 212 in a second I mean there's a we wrote a blog post with with all the details but",
    "start": "520150",
    "end": "525640"
  },
  {
    "text": "I'll tell you some more now and because that's why you're here I guess so regarding the timeline we're getting",
    "start": "525640",
    "end": "532630"
  },
  {
    "text": "close so I'm getting a little stressed out and 211 and 212 will be very closely",
    "start": "532630",
    "end": "538420"
  },
  {
    "text": "aligned again because we care a lot about people upgrading quickly from to",
    "start": "538420",
    "end": "543430"
  },
  {
    "text": "10 22 11 to 12 definitely seeing that trend improving I don't know if anyone",
    "start": "543430",
    "end": "549010"
  },
  {
    "text": "ever upgraded their 28 to 29 code base or to 9 22 10 code bases that was a lot of pain and that's never going to happen",
    "start": "549010",
    "end": "555520"
  },
  {
    "text": "again most people have reported like 211 was not an issue as a for an upgrade and",
    "start": "555520",
    "end": "562300"
  },
  {
    "text": "we hope and four to twelve that will be the same thing especially because if you're stuck on java 6 you'll be stuck",
    "start": "562300",
    "end": "568810"
  },
  {
    "text": "on 211 which means we'll be stuck maintaining 211 a little bit longer so we want to get all the good stuff that's",
    "start": "568810",
    "end": "575050"
  },
  {
    "text": "going into to 12 when possible also to into 211 and I guess that the logical",
    "start": "575050",
    "end": "581440"
  },
  {
    "text": "consequence for that is that a lot of the work that we've been doing on using invoke dynamic to compile lambdas has",
    "start": "581440",
    "end": "587740"
  },
  {
    "text": "already gone into 11 under a flag and the same code will be run by default in",
    "start": "587740",
    "end": "593580"
  },
  {
    "text": "212 and that probably that flag will be flipped in m2 when we require Java 8 for",
    "start": "593580",
    "end": "600940"
  },
  {
    "text": "the 212 development branch and this has always been our philosophy and I think",
    "start": "600940",
    "end": "607960"
  },
  {
    "text": "it's worked out really well for Scylla is that whenever you know Java Sea does something comparable to what we want to",
    "start": "607960",
    "end": "614530"
  },
  {
    "text": "do why don't we just omit the same bytecode and ride the jet performance wave and yeah obviously lots of profit",
    "start": "614530",
    "end": "623350"
  },
  {
    "text": "for typesafe then default methods are another great great addition to Java 8",
    "start": "623350",
    "end": "629560"
  },
  {
    "text": "for us and so will we're working on that right now prototyping that so that you",
    "start": "629560",
    "end": "637900"
  },
  {
    "text": "can actually use a scala function end which wasn't designed to be compatible with what java 8 now requires of these",
    "start": "637900",
    "end": "645220"
  },
  {
    "text": "things to rework those so that a bytecode they look exactly the same and",
    "start": "645220",
    "end": "650880"
  },
  {
    "text": "that's one of the big goals commercially for type-safe is that even though every program in Scala we need to have",
    "start": "650880",
    "end": "658870"
  },
  {
    "text": "excellent Java 8 api's and I think we do and this is one way we'll make that",
    "start": "658870",
    "end": "664810"
  },
  {
    "text": "easier for everybody so also for binary compatibility obviously that was one of the reasons",
    "start": "664810",
    "end": "670120"
  },
  {
    "text": "why default methods were added to interfaces the Java side will try to enjoy some of those benefits by",
    "start": "670120",
    "end": "677350"
  },
  {
    "text": "compiling our traits to interfaces where possible not always possible so it'd",
    "start": "677350",
    "end": "682720"
  },
  {
    "text": "probably be an opt-in kind of thing we're still sketching out the design for this so the other side of the coin for",
    "start": "682720",
    "end": "693940"
  },
  {
    "text": "interrupt interoperating well with java and and enjoying their their functional",
    "start": "693940",
    "end": "700450"
  },
  {
    "text": "Renaissance is to let you call java api",
    "start": "700450",
    "end": "705730"
  },
  {
    "text": "is easily from scala and i'll show you how how that's possible from the repple in a second not brave enough to run",
    "start": "705730",
    "end": "711490"
  },
  {
    "text": "these things live so I'm just gonna I'm just going to show you a couple transcripts but yeah that works out",
    "start": "711490",
    "end": "720010"
  },
  {
    "text": "really well and it's mostly a type checker thing I'll rent a little bit later about why it's more complicated",
    "start": "720010",
    "end": "726490"
  },
  {
    "text": "than it should be and I'm sure Matt's won't take it personally when I complain about wild cards sorry yeah so that's so",
    "start": "726490",
    "end": "735220"
  },
  {
    "text": "emotional I get about that stuff oh yeah and we might eventually also compile",
    "start": "735220",
    "end": "740589"
  },
  {
    "text": "calls to single abstract method types to invoke dynamics so I'll show you some",
    "start": "740589",
    "end": "745899"
  },
  {
    "text": "code and and how it compiles down too in case you're not familiar with these things where you learned at the talks",
    "start": "745899",
    "end": "751540"
  },
  {
    "text": "that introduced these things this morning so Java 8 know has java.util",
    "start": "751540",
    "end": "757089"
  },
  {
    "text": "stream and you can relatively easily",
    "start": "757089",
    "end": "762430"
  },
  {
    "text": "construct an array and turn it into a stream so the comments here is what",
    "start": "762430",
    "end": "767529"
  },
  {
    "text": "you'd write in Java 8 and that's what i wrote into scala rapel and you know it's",
    "start": "767529",
    "end": "774190"
  },
  {
    "text": "basically the same thing we have slightly nicer syntax for the very common pattern where you where you",
    "start": "774190",
    "end": "780430"
  },
  {
    "text": "introduce a lambda binder only to immediately discharged it so we just use",
    "start": "780430",
    "end": "786490"
  },
  {
    "text": "our magic underscore for that it works",
    "start": "786490",
    "end": "791709"
  },
  {
    "text": "out well in simple cases like this I wouldn't in generally recommend using underscore everywhere you potentially",
    "start": "791709",
    "end": "797410"
  },
  {
    "text": "could but I think in this case it reads a little more nicely which it also means we don't need to",
    "start": "797410",
    "end": "802660"
  },
  {
    "text": "just like the colon colon syntax that the Java 8 added looks more like C++",
    "start": "802660",
    "end": "808990"
  },
  {
    "text": "every day so otherwise you know it's I",
    "start": "808990",
    "end": "814779"
  },
  {
    "text": "just I just have to slide to give you a high-level idea that whether you're writing Java 8 or Scala you can you can",
    "start": "814779",
    "end": "822399"
  },
  {
    "text": "interface with their epi is in exactly the same way there are a couple of snags still that I need to figure out because",
    "start": "822399",
    "end": "827920"
  },
  {
    "text": "wildcards type inference works very differently in Java and Scala and I'll",
    "start": "827920",
    "end": "835449"
  },
  {
    "text": "talk a little bit about that later but yeah I mean here right now I just want",
    "start": "835449",
    "end": "840819"
  },
  {
    "text": "to give you the idea that we have a rapel right now java 9 will have one probably and whatever code you can write",
    "start": "840819",
    "end": "847000"
  },
  {
    "text": "in Java 8 22 consume Java 8 api's it it's completely straightforward to carry",
    "start": "847000",
    "end": "852579"
  },
  {
    "text": "it over even more complicated ones so that's that's one side of the interop",
    "start": "852579",
    "end": "858310"
  },
  {
    "text": "and so in case you're wondering how that works this is what the what the Java C compiler does and this is now what we",
    "start": "858310",
    "end": "864459"
  },
  {
    "text": "also do so if you write this this call",
    "start": "864459",
    "end": "870310"
  },
  {
    "text": "above here where you say stream of and a bunch arguments dot filter and then you",
    "start": "870310",
    "end": "876009"
  },
  {
    "text": "pass in that closure here what it really compiles down to is well this filter",
    "start": "876009",
    "end": "881259"
  },
  {
    "text": "call needs a predicate that's what the compiler can easily look up by by finding the signature for fir filter and",
    "start": "881259",
    "end": "887529"
  },
  {
    "text": "it knows that this predicate type has one abstract method says but I need a predicate with and all I have is a",
    "start": "887529",
    "end": "894699"
  },
  {
    "text": "function one well I can easily make a new predicate and I can implement its",
    "start": "894699",
    "end": "900550"
  },
  {
    "text": "only abstract method called test by invoking that closure that I've",
    "start": "900550",
    "end": "906459"
  },
  {
    "text": "conveniently lifted out to a separate method so I assume the those thing off",
    "start": "906459",
    "end": "916209"
  },
  {
    "text": "means that it's too simple or is it is it too complicated can you like maybe like open your eyes really wide if it's",
    "start": "916209",
    "end": "922990"
  },
  {
    "text": "not clear I can see everybody almost at the back everybody is regular sized",
    "start": "922990",
    "end": "928089"
  },
  {
    "text": "pupils okay great so it's a pretty simple transform its tricky actually",
    "start": "928089",
    "end": "934029"
  },
  {
    "text": "behind the scenes to figure out all the type in for it's overloading resolution and kind of do it the same way as Java does but our",
    "start": "934029",
    "end": "940870"
  },
  {
    "text": "goal is to basically provide the same experience that you have in Java and",
    "start": "940870",
    "end": "946019"
  },
  {
    "text": "that's that's kind of a general thing for first scala when java did it right already why why why we do it and so a",
    "start": "946019",
    "end": "955240"
  },
  {
    "text": "lot of people compare Java 8 to scala and say aren't you like you know afraid",
    "start": "955240",
    "end": "961120"
  },
  {
    "text": "that everybody's gonna kind of run for the for the hills or i don't know what the right metaphor for for java is but I",
    "start": "961120",
    "end": "968829"
  },
  {
    "text": "like to think of scholars des Alpes and those are the most awesome mountains so whatever Hill you got we got the Alps",
    "start": "968829",
    "end": "975790"
  },
  {
    "text": "that's where you know Scala was was was designed you can see the alps from the",
    "start": "975790",
    "end": "981790"
  },
  {
    "text": "office i still don't know how people get work done there such a beautiful view anyway um before I rent they should",
    "start": "981790",
    "end": "988779"
  },
  {
    "text": "probably just like stop talking about random things let's talk a little bit",
    "start": "988779",
    "end": "995649"
  },
  {
    "text": "about what to me functional programming is in Scala I mean there's lots of different interpretations of functional",
    "start": "995649",
    "end": "1000750"
  },
  {
    "text": "programming we're a very pragmatic bunch but i will say that functional",
    "start": "1000750",
    "end": "1006930"
  },
  {
    "text": "programming isn't just slapping all lambdas on a language that's a great start it's awesome for us to have that",
    "start": "1006930",
    "end": "1013949"
  },
  {
    "text": "support in the vm i think it's great for API design but it's it's a small",
    "start": "1013949",
    "end": "1020100"
  },
  {
    "text": "percentage of what actually it means to program functionally and I don't claim that I know that i have like that wisdom",
    "start": "1020100",
    "end": "1027298"
  },
  {
    "text": "to say exactly functional programming isn't probably means a lot of different things to a lot of different people but",
    "start": "1027299",
    "end": "1032370"
  },
  {
    "text": "i can tell you what it means to me personally and i'm somewhat aligned with what what we do in scala so you can take",
    "start": "1032370",
    "end": "1037530"
  },
  {
    "text": "that as you will so to me it's about defining composing and understanding",
    "start": "1037530",
    "end": "1042538"
  },
  {
    "text": "small units of abstraction over known sets of types so and just a side tangent",
    "start": "1042539",
    "end": "1049320"
  },
  {
    "text": "here like the whole reactive manifesto thing is about this kind of stuff like",
    "start": "1049320",
    "end": "1054330"
  },
  {
    "text": "you have events you have small pieces of behavior that you want to scale out and",
    "start": "1054330",
    "end": "1059490"
  },
  {
    "text": "so on and functions are a great match for that and in a sense it's always compliments and i think that's that's",
    "start": "1059490",
    "end": "1065760"
  },
  {
    "text": "one of the key things that scale says you need both if you want to make big abstractions you expect",
    "start": "1065760",
    "end": "1071950"
  },
  {
    "text": "to add new behavior sorry expect to add new types then oh is a great solution if",
    "start": "1071950",
    "end": "1078760"
  },
  {
    "text": "you want to structure your application you want to talk about design that's where 0 is great when you want to talk",
    "start": "1078760",
    "end": "1085000"
  },
  {
    "text": "about small things and you want a really reason about them that's where functional programming comes in and i",
    "start": "1085000",
    "end": "1091450"
  },
  {
    "text": "just made a quick ranti list of bullets and to me like immutable first has a lot",
    "start": "1091450",
    "end": "1097150"
  },
  {
    "text": "of consequences like in Scala you write a valve by Nature you don't you never write a far I mean I de will pick like",
    "start": "1097150",
    "end": "1104679"
  },
  {
    "text": "the most ugly contrasting color with your background so that you can either not see it depending on how its feeling",
    "start": "1104679",
    "end": "1110650"
  },
  {
    "text": "or it looks really horrible and so you just don't write them but it goes much",
    "start": "1110650",
    "end": "1115809"
  },
  {
    "text": "farther than that because you can do that in Java of course you can just slap some more keywords on and it'll be a",
    "start": "1115809",
    "end": "1121120"
  },
  {
    "text": "vile but you have to slap more keywords on you have to think about it expressions versus statements is another",
    "start": "1121120",
    "end": "1126820"
  },
  {
    "text": "important distinction everything is an expression everything is the value having a statement encourage you to",
    "start": "1126820",
    "end": "1132429"
  },
  {
    "text": "mutate things or cause other side effects so having that by design that everything is an expression is pretty",
    "start": "1132429",
    "end": "1140140"
  },
  {
    "text": "fundamental thing to letting people think immutable first and recursion is similar because when you write a",
    "start": "1140140",
    "end": "1146500"
  },
  {
    "text": "do-while loop how would you figure out when you need to stop and it's kind of you know this is where were you where",
    "start": "1146500",
    "end": "1152470"
  },
  {
    "text": "you go to the bar and debate because with recursion you're just mutating stack frames but that's kind of where you start talking about while persistent",
    "start": "1152470",
    "end": "1158140"
  },
  {
    "text": "data structures versus you know array updates and and to me it really comes",
    "start": "1158140",
    "end": "1163630"
  },
  {
    "text": "down to the middle word in the title understanding your code like knowing what it does and as a nice side effect",
    "start": "1163630",
    "end": "1169299"
  },
  {
    "text": "it also scales better it's it's often more performant and since we assume for",
    "start": "1169299",
    "end": "1175360"
  },
  {
    "text": "the kind of problems that we apply fp2 that we know what the different types",
    "start": "1175360",
    "end": "1180520"
  },
  {
    "text": "are that we need to reason about pattern matching is something that comes up naturally as well after you've constructed it you need to deconstruct",
    "start": "1180520",
    "end": "1185679"
  },
  {
    "text": "it and yeah it helps you understand it",
    "start": "1185679",
    "end": "1192549"
  },
  {
    "text": "helps you predict the output of a function based on case analysis of the input which is really how we very often",
    "start": "1192549",
    "end": "1198250"
  },
  {
    "text": "think both in maths and in real life you kind of think by examples and you see those cases you know what the what",
    "start": "1198250",
    "end": "1204460"
  },
  {
    "text": "the output is going to be local methods is another small thing but actually really helps refactor your code like",
    "start": "1204460",
    "end": "1211360"
  },
  {
    "text": "once you start thinking oh everything is an expression you start writing expressions that you know you need three",
    "start": "1211360",
    "end": "1216610"
  },
  {
    "text": "screens to read and then someone says well I can't review this I can't understand this well you just you just",
    "start": "1216610",
    "end": "1222789"
  },
  {
    "text": "introduced a couple of local methods if you don't have those you need to like introduce some private methods and they might like actually be moved around",
    "start": "1222789",
    "end": "1228760"
  },
  {
    "text": "somewhere else again so all these things really fit together and you can't just",
    "start": "1228760",
    "end": "1234370"
  },
  {
    "text": "have just lambdas and and expect to magically be programming functionally",
    "start": "1234370",
    "end": "1241500"
  },
  {
    "text": "probably since I started a minute late I shouldn't run too much more but i think",
    "start": "1241500",
    "end": "1247240"
  },
  {
    "text": "the other points kind of speak for themselves types are very important part",
    "start": "1247240",
    "end": "1252789"
  },
  {
    "text": "but you want them out of the way you don't if you could have your IDE infer your types for them and put them in the",
    "start": "1252789",
    "end": "1258429"
  },
  {
    "text": "code but then when you refactor you need to take him back out and Riaan further it just doesn't scale that way you have",
    "start": "1258429",
    "end": "1264640"
  },
  {
    "text": "to have good and good inference so to give you one example of why I think wild",
    "start": "1264640",
    "end": "1272440"
  },
  {
    "text": "cards are horrible and why it's been redeemed and net is that the natural",
    "start": "1272440",
    "end": "1278830"
  },
  {
    "text": "thing that you want to be true for your function abstraction is that when you have a stream of strings and you have",
    "start": "1278830",
    "end": "1286330"
  },
  {
    "text": "this function that can take anything I want to be able to pass it to something that transforms that stream but unless I",
    "start": "1286330",
    "end": "1292510"
  },
  {
    "text": "tell Java Java type system that actually that's how my function behaves in this case for map you can't do it and you",
    "start": "1292510",
    "end": "1299950"
  },
  {
    "text": "need to do it for every time you use function because it's you side variance even though this is a property that",
    "start": "1299950",
    "end": "1306039"
  },
  {
    "text": "defines what a function is a function abstraction is something that well if I require this but actually I have",
    "start": "1306039",
    "end": "1312190"
  },
  {
    "text": "something that poses less restriction on the argument type that's a contravariant thing then it's fine so that's what",
    "start": "1312190",
    "end": "1319870"
  },
  {
    "text": "scala and an c sharp and and other sane languages do and and the type signature",
    "start": "1319870",
    "end": "1326220"
  },
  {
    "text": "you know becomes a lot nicer you can go",
    "start": "1326220",
    "end": "1331720"
  },
  {
    "text": "into the theory and and and and kind of rewrite this you can we can it's one of the things with Scala is",
    "start": "1331720",
    "end": "1337630"
  },
  {
    "text": "that you can write you cite variants you can express it but why would you and",
    "start": "1337630",
    "end": "1342640"
  },
  {
    "text": "that's definitely one of the challenges while you're learning scale is when do I use variance when do you use existential",
    "start": "1342640",
    "end": "1348700"
  },
  {
    "text": "and granted that that's a challenge but I think that goes back to to David's talk as well is that you know simplicity",
    "start": "1348700",
    "end": "1355299"
  },
  {
    "text": "doesn't necessarily mean it's easy it means you have to figure out what which bricklaying technique is the right one",
    "start": "1355299",
    "end": "1361120"
  },
  {
    "text": "for this for this architectural challenge and scala offers you all of them and we could give you more guidance",
    "start": "1361120",
    "end": "1367780"
  },
  {
    "text": "but you know you can always hire us first for advice if you want i won't go",
    "start": "1367780",
    "end": "1374230"
  },
  {
    "text": "into the theory but basically you know all the work you have to go through to make sure that wherever use function it",
    "start": "1374230",
    "end": "1380500"
  },
  {
    "text": "behaves like a like would expect a function to behave it's much more",
    "start": "1380500",
    "end": "1385470"
  },
  {
    "text": "verbose in java and so that's just one example of where i think the design of",
    "start": "1386549",
    "end": "1391570"
  },
  {
    "text": "the language needs to come up from bottom up needs to be functional from bottom up and not just like oh yeah we",
    "start": "1391570",
    "end": "1396580"
  },
  {
    "text": "have this now it's great so whereas I think Java is great I'm confident that",
    "start": "1396580",
    "end": "1403919"
  },
  {
    "text": "people will come to languages like C sharp F sharp Scala when they want real",
    "start": "1403919",
    "end": "1411220"
  },
  {
    "text": "functional programming so a little bit further down the line we're going to go",
    "start": "1411220",
    "end": "1417669"
  },
  {
    "text": "into opera land and this talk was kind",
    "start": "1417669",
    "end": "1423970"
  },
  {
    "text": "of written for people who would interrupt me so i think i'm kind of like ahead of time and since you've all been so polite I maybe have stacked up a",
    "start": "1423970",
    "end": "1430990"
  },
  {
    "text": "bunch of questions so getting to the end here Ida is going to be our library",
    "start": "1430990",
    "end": "1436780"
  },
  {
    "text": "release and we're going to focus on on reworking the collection library which is one of the main things that we take a",
    "start": "1436780",
    "end": "1443350"
  },
  {
    "text": "lot of flack for we have can build from in there the hierarchy is is really",
    "start": "1443350",
    "end": "1449620"
  },
  {
    "text": "nicely designed there are a couple of warts on there but it's really designed from implementers point of view to avoid",
    "start": "1449620",
    "end": "1457690"
  },
  {
    "text": "code reuse it's not really easily extended if you if you weren't in the room when it was designed and that's bad",
    "start": "1457690",
    "end": "1465640"
  },
  {
    "text": "I mean that's bad and that's something that we work on and and we want to basically",
    "start": "1465640",
    "end": "1470740"
  },
  {
    "text": "we've already been finalizing a lot of the classes so that you just can't extend them because even if you could it would be pretty frustrating so we're",
    "start": "1470740",
    "end": "1478930"
  },
  {
    "text": "coming to terms with saying well maybe we should compose these things a bit more than just using inheritance everywhere and one of the reasons why",
    "start": "1478930",
    "end": "1486190"
  },
  {
    "text": "hierarchies overloaded is that we try to slot in parallel and sequential collections into the same thing even",
    "start": "1486190",
    "end": "1492100"
  },
  {
    "text": "though they're fundamentally different so we're just going to pull that out and",
    "start": "1492100",
    "end": "1498840"
  },
  {
    "text": "the same thing for laziness for views so most people won't really experienced",
    "start": "1498840",
    "end": "1506950"
  },
  {
    "text": "this and accept if they've managed to implement their own extensions of the of",
    "start": "1506950",
    "end": "1512530"
  },
  {
    "text": "the core collection abstractions but I think it's important that we fix this so",
    "start": "1512530",
    "end": "1519460"
  },
  {
    "text": "as I said those are a couple of the modules that are that are coming up we also see a lot of people going to scalzi",
    "start": "1519460",
    "end": "1525340"
  },
  {
    "text": "or cat or skull actix library mostly for",
    "start": "1525340",
    "end": "1531730"
  },
  {
    "text": "validation and it's kind of like a library solution to the ? for a null",
    "start": "1531730",
    "end": "1536980"
  },
  {
    "text": "ability you want to compose a bunch of accesses to something that you don't know whether it'll be there or not but",
    "start": "1536980",
    "end": "1543700"
  },
  {
    "text": "actually when it's not there it's important to know that and you want to reify that and you want to present a",
    "start": "1543700",
    "end": "1550480"
  },
  {
    "text": "nice error message to your to your to your user later so a validation kind of takes that idea that's also president",
    "start": "1550480",
    "end": "1557170"
  },
  {
    "text": "for comprehensions and so on and lets you go into a tree with with potentially",
    "start": "1557170",
    "end": "1563650"
  },
  {
    "text": "holes and and and collect the errors or collect your successful result and so that's something that's naturally done",
    "start": "1563650",
    "end": "1570100"
  },
  {
    "text": "and stuff like Scala said but then you have to use Scala said so probably will",
    "start": "1570100",
    "end": "1575170"
  },
  {
    "text": "come up with a nicer module for that I said I wasn't going to talk about macros anymore allied I'm just going to say it",
    "start": "1575170",
    "end": "1581770"
  },
  {
    "text": "one more time don't use them I mean they're really great I mean if you if you're willing to pay the price it's",
    "start": "1581770",
    "end": "1588700"
  },
  {
    "text": "really fun it's basically a nicer mechanism to deliver compiler plugins to your users but that's really the way you",
    "start": "1588700",
    "end": "1595210"
  },
  {
    "text": "should think about them there is some implications that there's an API for",
    "start": "1595210",
    "end": "1600220"
  },
  {
    "text": "macros really it's just the compilers you're talking directly to the compiler",
    "start": "1600220",
    "end": "1606179"
  },
  {
    "text": "it just wasn't recorded i would tell you more about it but how it came to be",
    "start": "1606179",
    "end": "1612220"
  },
  {
    "text": "asked me at the bar so it's going to change completely and i think for the",
    "start": "1612220",
    "end": "1619600"
  },
  {
    "text": "better so if you're using Kwazii quotes and wide box macros but no no bun was so don't worry about it but if you were",
    "start": "1619600",
    "end": "1624730"
  },
  {
    "text": "using Kwazii quotes and white box macros I think you'll be happy in the future if you're not you're going to be rewriting",
    "start": "1624730",
    "end": "1630850"
  },
  {
    "text": "your macros okay so don giovanni is is",
    "start": "1630850",
    "end": "1636240"
  },
  {
    "text": "not coincidentally do for dotty or at least i didn't come up with the name but",
    "start": "1636240",
    "end": "1641320"
  },
  {
    "text": "I I was imagined it was because of that as I said it's going to be a big",
    "start": "1641320",
    "end": "1647110"
  },
  {
    "text": "refracting of the compiler the code base is about 10 years old we feel like a lot",
    "start": "1647110",
    "end": "1652899"
  },
  {
    "text": "of engineering wisdom and battle testing has gone into it so we're not going to lightly just throw it all out and",
    "start": "1652899",
    "end": "1658389"
  },
  {
    "text": "replace it but at some point you have to take some components out to the backyard and you know replace them and so that's",
    "start": "1658389",
    "end": "1668440"
  },
  {
    "text": "what we're going to do but you know we're in five year out territory now so",
    "start": "1668440",
    "end": "1674730"
  },
  {
    "text": "one of our main obsessions with this whole migration is that we're terrified looking at what happened to python and I",
    "start": "1674730",
    "end": "1681850"
  },
  {
    "text": "think we have a lot of good properties and Scala that we wouldn't easily get into that kind of territory but whenever",
    "start": "1681850",
    "end": "1689590"
  },
  {
    "text": "something will change it will be for a good reason for the user not just because we have a nicer implementation",
    "start": "1689590",
    "end": "1695769"
  },
  {
    "text": "for it it will be because it'll be simpler to understand or your code will be nicer for it or maybe it'll just",
    "start": "1695769",
    "end": "1701590"
  },
  {
    "text": "compile faster but that's kind of where as far as I would stretch it just a nicer theory or a nicer implementation",
    "start": "1701590",
    "end": "1708759"
  },
  {
    "text": "it's not something that would cut muster for me saying well we're going to change",
    "start": "1708759",
    "end": "1713950"
  },
  {
    "text": "this in the language a lot of people are pretty deeply invested in Scala and we",
    "start": "1713950",
    "end": "1719950"
  },
  {
    "text": "certainly wouldn't want to cause any headaches there so one of the things though that we all kind of universally",
    "start": "1719950",
    "end": "1726639"
  },
  {
    "text": "hate in the team although people don't necessarily agree with us is that procedure syntax is kind of an",
    "start": "1726639",
    "end": "1732279"
  },
  {
    "text": "abomination a lot about Scotland X is that it's extremely regular it always introduces a definition with a",
    "start": "1732279",
    "end": "1737679"
  },
  {
    "text": "keyboard a keyword name a signature and that optionally a body if it's a concrete definition procedure sin tax",
    "start": "1737679",
    "end": "1744789"
  },
  {
    "text": "breaks that and so it has to go that little kind of little bit of convenience",
    "start": "1744789",
    "end": "1750249"
  },
  {
    "text": "is very confusing because it looks a lot like a type refinement and so if you accidentally type well I'm not going to",
    "start": "1750249",
    "end": "1756429"
  },
  {
    "text": "tell you why you should type but if you type certain things in there you'll be very surprised by the results and with",
    "start": "1756429",
    "end": "1762789"
  },
  {
    "text": "the regular syntax that would never happen like somehow literals were a",
    "start": "1762789",
    "end": "1768129"
  },
  {
    "text": "great way to get research money back in the day not so hot anymore maybe we'll introduce Jason literals or something I",
    "start": "1768129",
    "end": "1774220"
  },
  {
    "text": "don't know whatever i'm not so hip so i don't know what what gets money these days for grants i think someone can tell",
    "start": "1774220",
    "end": "1781090"
  },
  {
    "text": "me afterwards early definitions were another thing that we needed in the compiler i hope no one was using them",
    "start": "1781090",
    "end": "1788320"
  },
  {
    "text": "they're going away instead we'll have a much nicer generalization of adding",
    "start": "1788320",
    "end": "1793899"
  },
  {
    "text": "parameters to traits which a lot of people ask about why can't you write the same thing that you can in a class well",
    "start": "1793899",
    "end": "1800409"
  },
  {
    "text": "it's actually tricky to implement but well we'll figure it out i mean i think we're getting close and this is kind of",
    "start": "1800409",
    "end": "1808749"
  },
  {
    "text": "what i did for a long time when I was in academics is is the whole the whole type system is getting a nice unification",
    "start": "1808749",
    "end": "1815799"
  },
  {
    "text": "where type parameters and tech members used to be treated separately even though they're really the same thing and",
    "start": "1815799",
    "end": "1821499"
  },
  {
    "text": "they can model type constructors and abstraction over type constructors they can model so that was universal",
    "start": "1821499",
    "end": "1828249"
  },
  {
    "text": "quantification they can also model existential quantification it kind of blows your mind that type members can",
    "start": "1828249",
    "end": "1834519"
  },
  {
    "text": "both be universally and essentially quantified I still haven't really come to terms with that but they can and so",
    "start": "1834519",
    "end": "1840399"
  },
  {
    "text": "internally there won't be any type parameters and upcoming versions of Scala I mean you'll have them in the surface syntax they'll just do sugar to",
    "start": "1840399",
    "end": "1847240"
  },
  {
    "text": "type members and it won't really change that much it'll change a little bit",
    "start": "1847240",
    "end": "1852360"
  },
  {
    "text": "exists at certain kinds of existential can't be expressed but most of it can I",
    "start": "1852360",
    "end": "1858450"
  },
  {
    "text": "will also introduce Union types and they're not the union types that you would expect if you've programmed NM",
    "start": "1858450",
    "end": "1864070"
  },
  {
    "text": "hours or see or something like that it's think of it more as a lazy lub and you know you'll have to do some case",
    "start": "1864070",
    "end": "1871260"
  },
  {
    "text": "the sting shouldn't at runtime on them but they're going to be very limited and",
    "start": "1871260",
    "end": "1876570"
  },
  {
    "text": "kind of expressed in terms of sets of members and so on I'm a little wary of",
    "start": "1876570",
    "end": "1882390"
  },
  {
    "text": "how that's going to turn out in the bytecode but we'll see this is all in doggy already and it seems to be working",
    "start": "1882390",
    "end": "1888360"
  },
  {
    "text": "so i will see a lot of i mean if you were in Amanda's talk she gave an",
    "start": "1888360",
    "end": "1893760"
  },
  {
    "text": "example of h lists i mean those things just give me nightmares to be artists",
    "start": "1893760",
    "end": "1900510"
  },
  {
    "text": "from an implementation perspective because implicit search and I mean so I",
    "start": "1900510",
    "end": "1906210"
  },
  {
    "text": "was one who said man when she asked what you thought about about H list so",
    "start": "1906210",
    "end": "1912600"
  },
  {
    "text": "originally we had type inference and we had implicit search and then we were writing a paper and we thought it would",
    "start": "1912600",
    "end": "1918630"
  },
  {
    "text": "be great idea to combine them because it lets you write your collection library much more neatly and so I did a lot of",
    "start": "1918630",
    "end": "1924240"
  },
  {
    "text": "that work and people went crazy with it and now like and put the search is",
    "start": "1924240",
    "end": "1929789"
  },
  {
    "text": "basically prologue is it like a prologue resolution engine that is not really SPECT and and we can't optimize it and",
    "start": "1929789",
    "end": "1937169"
  },
  {
    "text": "it interfaces with type inference in very interesting ways and this is how people do type global programming in",
    "start": "1937169",
    "end": "1944090"
  },
  {
    "text": "Scala these days and like honestly I I wish we had an added it or we wouldn't",
    "start": "1944090",
    "end": "1951480"
  },
  {
    "text": "allow it because I think what a man is that was spot on I mean we really want type level programming to look just like",
    "start": "1951480",
    "end": "1957720"
  },
  {
    "text": "object level programming if we have functions at the object level why don't",
    "start": "1957720",
    "end": "1963149"
  },
  {
    "text": "we have functions of the type level I mean most of the stuff and I've been looking at how we use in I've been looking at our corpus of code and usage",
    "start": "1963149",
    "end": "1970679"
  },
  {
    "text": "of implicit and they're basically all functions if T is int then bit sets if T is not into then set of tea why do you",
    "start": "1970679",
    "end": "1978630"
  },
  {
    "text": "have to write a little prologue program for that that the compiler has to search a humongous search pays for that for",
    "start": "1978630",
    "end": "1984840"
  },
  {
    "text": "every context that you go in is basically invalidated and we've gone to a point where we have to put in so many caches that people are actually relying",
    "start": "1984840",
    "end": "1991919"
  },
  {
    "text": "on implementation artifact of I warmed up the cash on one end of my program now",
    "start": "1991919",
    "end": "1997289"
  },
  {
    "text": "this implicit is going to come first and well that way that I",
    "start": "1997289",
    "end": "2002300"
  },
  {
    "text": "other side of my program type ticks so that's not the kind of semantics you want at the type level which is why",
    "start": "2002300",
    "end": "2007640"
  },
  {
    "text": "stuff like H less scares me and which why I mean it's a sense it's frustrating",
    "start": "2007640",
    "end": "2013730"
  },
  {
    "text": "that Scala gets a reputation for this kind of stuff because I don't think you need this I don't think a lot of people",
    "start": "2013730",
    "end": "2019430"
  },
  {
    "text": "actually write this kind of code and if it turns out that a lot of people needed we'll add language support for it that",
    "start": "2019430",
    "end": "2026540"
  },
  {
    "text": "can give you nice error messages and you know that that don't make for great hate",
    "start": "2026540",
    "end": "2032840"
  },
  {
    "text": "tweets anyway enough about that I talked",
    "start": "2032840",
    "end": "2038960"
  },
  {
    "text": "a little bit about how we would have how we change the front end and the back end individually and one of the key things",
    "start": "2038960",
    "end": "2044510"
  },
  {
    "text": "is is tasty which you may have heard about is our tape typed asds which are",
    "start": "2044510",
    "end": "2050480"
  },
  {
    "text": "also great for binary compatibility but basically it's an intermediate language for Scala that captures all the",
    "start": "2050480",
    "end": "2056060"
  },
  {
    "text": "information that we have after type checking so we're no longer tied to the",
    "start": "2056060",
    "end": "2061820"
  },
  {
    "text": "Java platforms interpretation of member resolution and you have a much higher",
    "start": "2061820",
    "end": "2068960"
  },
  {
    "text": "level view of lazy valves and traits and methods and and our way of overloading so that if the platform changes excuse",
    "start": "2068960",
    "end": "2076550"
  },
  {
    "text": "me we we can just recompile based on that typed ast and we know that the semantics won't change so think of it as",
    "start": "2076550",
    "end": "2082250"
  },
  {
    "text": "a richer bytecode that you can on the fly recompile as your as your API is",
    "start": "2082250",
    "end": "2087740"
  },
  {
    "text": "change in source compatible ways that turn out not to be binary compatible on the JVM martin has given multiple talks",
    "start": "2087740",
    "end": "2095690"
  },
  {
    "text": "about that explaining it much better than I just did but it's pretty interesting so I encourage you to have a",
    "start": "2095690",
    "end": "2102050"
  },
  {
    "text": "look at that or ask me about it during the questions thanks very much for your attention I know it's been a long day",
    "start": "2102050",
    "end": "2108490"
  },
  {
    "text": "but if you've any questions happy to take them now or later thank",
    "start": "2108490",
    "end": "2115120"
  }
]