[
  {
    "text": "but I do need to show that we can try to",
    "start": "4880",
    "end": "8340"
  },
  {
    "text": "decompose threshold rates for more",
    "start": "8340",
    "end": "10260"
  },
  {
    "text": "complicated thresholds uh into simpler",
    "start": "10260",
    "end": "12780"
  },
  {
    "text": "ones so let's try that",
    "start": "12780",
    "end": "15599"
  },
  {
    "text": "so here what I have is the example that",
    "start": "15599",
    "end": "17760"
  },
  {
    "text": "I had for doing and the very simple",
    "start": "17760",
    "end": "19740"
  },
  {
    "text": "threshold read that we we talked about",
    "start": "19740",
    "end": "21359"
  },
  {
    "text": "and I'm going to try and turn it into",
    "start": "21359",
    "end": "23220"
  },
  {
    "text": "very simpler still threshold reads",
    "start": "23220",
    "end": "25500"
  },
  {
    "text": "against",
    "start": "25500",
    "end": "26699"
  },
  {
    "text": "basic promises",
    "start": "26699",
    "end": "28560"
  },
  {
    "text": "so I have I want three Boolean promises",
    "start": "28560",
    "end": "33900"
  },
  {
    "text": "um and what I'm going to do is to model",
    "start": "35880",
    "end": "38040"
  },
  {
    "text": "this I'm going to model it by spinning",
    "start": "38040",
    "end": "40140"
  },
  {
    "text": "up three threads",
    "start": "40140",
    "end": "42840"
  },
  {
    "text": "so I'll have par Fork off",
    "start": "42840",
    "end": "45360"
  },
  {
    "text": "a couple of background threads and then",
    "start": "45360",
    "end": "46680"
  },
  {
    "text": "whatever whatever it's doing in the",
    "start": "46680",
    "end": "47760"
  },
  {
    "text": "foreground and it will say",
    "start": "47760",
    "end": "51559"
  },
  {
    "text": "um the first thread will try to do a",
    "start": "51719",
    "end": "54239"
  },
  {
    "text": "threshold read on this variable",
    "start": "54239",
    "end": "57120"
  },
  {
    "text": "and whatever it triggers true",
    "start": "57120",
    "end": "58800"
  },
  {
    "text": "it'll come over here do a threshold rate",
    "start": "58800",
    "end": "60360"
  },
  {
    "text": "if this triggers true it'll scribble on",
    "start": "60360",
    "end": "62160"
  },
  {
    "text": "true",
    "start": "62160",
    "end": "63000"
  },
  {
    "text": "the second thread will do a threshold",
    "start": "63000",
    "end": "65220"
  },
  {
    "text": "read here and if this triggers is false",
    "start": "65220",
    "end": "67140"
  },
  {
    "text": "scribble false directly",
    "start": "67140",
    "end": "69780"
  },
  {
    "text": "and the third thread will say do a",
    "start": "69780",
    "end": "71580"
  },
  {
    "text": "threshold read here this triggers false",
    "start": "71580",
    "end": "73439"
  },
  {
    "text": "scribble false",
    "start": "73439",
    "end": "75000"
  },
  {
    "text": "right these things will be woken up",
    "start": "75000",
    "end": "78360"
  },
  {
    "text": "only one of these will be woken up",
    "start": "78360",
    "end": "81420"
  },
  {
    "text": "or we'll blow up the world because we",
    "start": "81420",
    "end": "83220"
  },
  {
    "text": "found a contradiction",
    "start": "83220",
    "end": "85860"
  },
  {
    "text": "and what we now have is sort of the",
    "start": "85860",
    "end": "89520"
  },
  {
    "text": "um a simple par Network",
    "start": "89520",
    "end": "92820"
  },
  {
    "text": "of threshold reads that will emulate",
    "start": "92820",
    "end": "95939"
  },
  {
    "text": "this sort of hybrid more complicated",
    "start": "95939",
    "end": "98040"
  },
  {
    "text": "threshold read but now as I'm moving up",
    "start": "98040",
    "end": "100140"
  },
  {
    "text": "here the thing that was blocking on the",
    "start": "100140",
    "end": "101880"
  },
  {
    "text": "true side of the of the equation isn't",
    "start": "101880",
    "end": "104759"
  },
  {
    "text": "um",
    "start": "104759",
    "end": "105659"
  },
  {
    "text": "uh isn't waking up constantly so we",
    "start": "105659",
    "end": "108240"
  },
  {
    "text": "actually do less waking because we're",
    "start": "108240",
    "end": "110220"
  },
  {
    "text": "dealing with simpler reads",
    "start": "110220",
    "end": "112200"
  },
  {
    "text": "and similarly if I was trying to model",
    "start": "112200",
    "end": "114060"
  },
  {
    "text": "like a set where I can add members to",
    "start": "114060",
    "end": "116399"
  },
  {
    "text": "the set",
    "start": "116399",
    "end": "117299"
  },
  {
    "text": "and I Union sets to move up in the",
    "start": "117299",
    "end": "119280"
  },
  {
    "text": "lattice",
    "start": "119280",
    "end": "120180"
  },
  {
    "text": "or I intersect to move down and to move",
    "start": "120180",
    "end": "122640"
  },
  {
    "text": "up in a different lattice you can have",
    "start": "122640",
    "end": "124140"
  },
  {
    "text": "addition sets or subtraction sets",
    "start": "124140",
    "end": "127439"
  },
  {
    "text": "um",
    "start": "127439",
    "end": "128819"
  },
  {
    "text": "then I can have a I could I could view",
    "start": "128819",
    "end": "131580"
  },
  {
    "text": "that as build that out of a map",
    "start": "131580",
    "end": "133800"
  },
  {
    "text": "where I I put I'm looking for when Bob",
    "start": "133800",
    "end": "136200"
  },
  {
    "text": "gets put in this set I'm not looking for",
    "start": "136200",
    "end": "137879"
  },
  {
    "text": "every introduction to the every member",
    "start": "137879",
    "end": "139739"
  },
  {
    "text": "edition of a member to the set and then",
    "start": "139739",
    "end": "141780"
  },
  {
    "text": "hoping that it's Bob",
    "start": "141780",
    "end": "143640"
  },
  {
    "text": "it's just trying to to make the",
    "start": "143640",
    "end": "145620"
  },
  {
    "text": "construction less coarse grained",
    "start": "145620",
    "end": "149060"
  },
  {
    "text": "and out of everything that I've done",
    "start": "149459",
    "end": "152040"
  },
  {
    "text": "here I think this makes the biggest",
    "start": "152040",
    "end": "153599"
  },
  {
    "text": "difference in how well things perform is",
    "start": "153599",
    "end": "156180"
  },
  {
    "text": "just it if we say that lvars are a good",
    "start": "156180",
    "end": "158400"
  },
  {
    "text": "unifying abstraction the trick is",
    "start": "158400",
    "end": "159840"
  },
  {
    "text": "picking the right grain size for those",
    "start": "159840",
    "end": "161280"
  },
  {
    "text": "elvars making them really making them as",
    "start": "161280",
    "end": "163560"
  },
  {
    "text": "fine-grained as possible",
    "start": "163560",
    "end": "166519"
  },
  {
    "text": "so now that I have this and I've spent",
    "start": "166860",
    "end": "168720"
  },
  {
    "text": "all this time talking about how to",
    "start": "168720",
    "end": "169800"
  },
  {
    "text": "implement something I should actually",
    "start": "169800",
    "end": "170760"
  },
  {
    "text": "talk about why we care",
    "start": "170760",
    "end": "173160"
  },
  {
    "text": "um so I have a few application domains",
    "start": "173160",
    "end": "175200"
  },
  {
    "text": "that have come across",
    "start": "175200",
    "end": "177540"
  },
  {
    "text": "um my desk over the last several years",
    "start": "177540",
    "end": "179280"
  },
  {
    "text": "that I've tried working on",
    "start": "179280",
    "end": "181800"
  },
  {
    "text": "um that all fit into this space we've",
    "start": "181800",
    "end": "185340"
  },
  {
    "text": "talked about promises",
    "start": "185340",
    "end": "186959"
  },
  {
    "text": "uh sap solving so trying to figure out",
    "start": "186959",
    "end": "190080"
  },
  {
    "text": "give me a Boolean assignment to some",
    "start": "190080",
    "end": "192480"
  },
  {
    "text": "formula that actually makes it pass data",
    "start": "192480",
    "end": "195480"
  },
  {
    "text": "log which is how to do",
    "start": "195480",
    "end": "198239"
  },
  {
    "text": "um",
    "start": "198239",
    "end": "198840"
  },
  {
    "text": "table stuff in a way that doesn't suck",
    "start": "198840",
    "end": "200879"
  },
  {
    "text": "convergent replicated data types for",
    "start": "200879",
    "end": "203159"
  },
  {
    "text": "distributed programming pop-up",
    "start": "203159",
    "end": "204860"
  },
  {
    "text": "constraint programming you know X is",
    "start": "204860",
    "end": "207480"
  },
  {
    "text": "less than x is in a Range Y is in a",
    "start": "207480",
    "end": "209280"
  },
  {
    "text": "range X is less than five find me a set",
    "start": "209280",
    "end": "210900"
  },
  {
    "text": "of assignments that you know can solve",
    "start": "210900",
    "end": "212459"
  },
  {
    "text": "this Sudoku problem or whatever",
    "start": "212459",
    "end": "214280"
  },
  {
    "text": "unification is a lattice",
    "start": "214280",
    "end": "217260"
  },
  {
    "text": "we can actually view information about",
    "start": "217260",
    "end": "221280"
  },
  {
    "text": "type variables propagate as propagators",
    "start": "221280",
    "end": "224060"
  },
  {
    "text": "interval arithmetic",
    "start": "224060",
    "end": "226379"
  },
  {
    "text": "we can say that we start with the",
    "start": "226379",
    "end": "228420"
  },
  {
    "text": "interval from minus infinity to Infinity",
    "start": "228420",
    "end": "230040"
  },
  {
    "text": "that's my bottom I don't know anything",
    "start": "230040",
    "end": "231480"
  },
  {
    "text": "about the value the top is the empty the",
    "start": "231480",
    "end": "233580"
  },
  {
    "text": "empty interval",
    "start": "233580",
    "end": "235440"
  },
  {
    "text": "right the things covered by top are the",
    "start": "235440",
    "end": "237540"
  },
  {
    "text": "points",
    "start": "237540",
    "end": "239000"
  },
  {
    "text": "you can't really draw the Haas diagram",
    "start": "239000",
    "end": "241200"
  },
  {
    "text": "because there's nothing you can't put",
    "start": "241200",
    "end": "242280"
  },
  {
    "text": "two real numbers next to each other but",
    "start": "242280",
    "end": "245280"
  },
  {
    "text": "it does form a lattice it does have an",
    "start": "245280",
    "end": "248040"
  },
  {
    "text": "ascending chain condition this means",
    "start": "248040",
    "end": "249900"
  },
  {
    "text": "that if you have a cycle in a graph that",
    "start": "249900",
    "end": "252780"
  },
  {
    "text": "involves real number computations and",
    "start": "252780",
    "end": "256260"
  },
  {
    "text": "intervals",
    "start": "256260",
    "end": "257940"
  },
  {
    "text": "um you can have something like let me",
    "start": "257940",
    "end": "260040"
  },
  {
    "text": "compute a newton-raphson approximation",
    "start": "260040",
    "end": "262079"
  },
  {
    "text": "to a function and it will iterate over",
    "start": "262079",
    "end": "264240"
  },
  {
    "text": "and over and over again and get closer",
    "start": "264240",
    "end": "266280"
  },
  {
    "text": "and closer and closer to an answer",
    "start": "266280",
    "end": "267960"
  },
  {
    "text": "so",
    "start": "267960",
    "end": "269280"
  },
  {
    "text": "we have no reason to believe that this",
    "start": "269280",
    "end": "270840"
  },
  {
    "text": "will terminate",
    "start": "270840",
    "end": "273060"
  },
  {
    "text": "um if you're using doubles now you",
    "start": "273060",
    "end": "275880"
  },
  {
    "text": "actually do have a reason to believe but",
    "start": "275880",
    "end": "277500"
  },
  {
    "text": "if you're using reels you're not or",
    "start": "277500",
    "end": "279120"
  },
  {
    "text": "rationals you're not integer linear",
    "start": "279120",
    "end": "281340"
  },
  {
    "text": "programming so we can do linear",
    "start": "281340",
    "end": "282479"
  },
  {
    "text": "programming turns out to form a lattice",
    "start": "282479",
    "end": "284040"
  },
  {
    "text": "but when we get done phrasing it",
    "start": "284040",
    "end": "285300"
  },
  {
    "text": "correctly we can actually do integer",
    "start": "285300",
    "end": "286560"
  },
  {
    "text": "linear programming with a a par based",
    "start": "286560",
    "end": "288540"
  },
  {
    "text": "driver we can generalize that to Cone",
    "start": "288540",
    "end": "290639"
  },
  {
    "text": "programming which lets us work in all",
    "start": "290639",
    "end": "291780"
  },
  {
    "text": "sorts of crazy spaces",
    "start": "291780",
    "end": "293940"
  },
  {
    "text": "um this stuff works with both constraint",
    "start": "293940",
    "end": "296520"
  },
  {
    "text": "programming and all the integer linear",
    "start": "296520",
    "end": "298199"
  },
  {
    "text": "programming stuff sharing variables",
    "start": "298199",
    "end": "300360"
  },
  {
    "text": "they're convex theories",
    "start": "300360",
    "end": "302280"
  },
  {
    "text": "so you can actually use all of these",
    "start": "302280",
    "end": "303900"
  },
  {
    "text": "features actually can live in the same",
    "start": "303900",
    "end": "305639"
  },
  {
    "text": "space working on the same problem at the",
    "start": "305639",
    "end": "307620"
  },
  {
    "text": "same time",
    "start": "307620",
    "end": "308639"
  },
  {
    "text": "right they're all just different",
    "start": "308639",
    "end": "309660"
  },
  {
    "text": "lattices and different kinds of",
    "start": "309660",
    "end": "310800"
  },
  {
    "text": "propagators between them",
    "start": "310800",
    "end": "313560"
  },
  {
    "text": "functional reactive programming actually",
    "start": "313560",
    "end": "315540"
  },
  {
    "text": "makes a it rears its head in the",
    "start": "315540",
    "end": "318740"
  },
  {
    "text": "original paper on this topic actually",
    "start": "318740",
    "end": "322020"
  },
  {
    "text": "and it has a nice spin on FRP which is",
    "start": "322020",
    "end": "325919"
  },
  {
    "text": "that my normal complaint about FRP is",
    "start": "325919",
    "end": "328080"
  },
  {
    "text": "that it's causal that if I say that x",
    "start": "328080",
    "end": "329880"
  },
  {
    "text": "equals y plus Z that's not a symmetric",
    "start": "329880",
    "end": "332160"
  },
  {
    "text": "sort of relationship it's telling me",
    "start": "332160",
    "end": "333900"
  },
  {
    "text": "which one tells me which",
    "start": "333900",
    "end": "337220"
  },
  {
    "text": "um and we can write",
    "start": "337320",
    "end": "339479"
  },
  {
    "text": "equational propagators that say addition",
    "start": "339479",
    "end": "342419"
  },
  {
    "text": "is a monotone function",
    "start": "342419",
    "end": "344940"
  },
  {
    "text": "if my inputs are both defined my output",
    "start": "344940",
    "end": "347639"
  },
  {
    "text": "is defined",
    "start": "347639",
    "end": "350180"
  },
  {
    "text": "um and I can lift arbitrary functions",
    "start": "350400",
    "end": "353220"
  },
  {
    "text": "that same way",
    "start": "353220",
    "end": "354900"
  },
  {
    "text": "so",
    "start": "354900",
    "end": "356220"
  },
  {
    "text": "we can",
    "start": "356220",
    "end": "357840"
  },
  {
    "text": "also say that well given the output and",
    "start": "357840",
    "end": "360720"
  },
  {
    "text": "one of the inputs I can tell you the",
    "start": "360720",
    "end": "361919"
  },
  {
    "text": "other input so we can run addition",
    "start": "361919",
    "end": "363720"
  },
  {
    "text": "backwards as a propagator Network it's",
    "start": "363720",
    "end": "365759"
  },
  {
    "text": "not unfortunately well the answer that",
    "start": "365759",
    "end": "368160"
  },
  {
    "text": "we can give you especially if you start",
    "start": "368160",
    "end": "369479"
  },
  {
    "text": "doing intervals with it we'll",
    "start": "369479",
    "end": "372120"
  },
  {
    "text": "um B sound it'll give you an interval",
    "start": "372120",
    "end": "374820"
  },
  {
    "text": "that contains the answer it won't",
    "start": "374820",
    "end": "375840"
  },
  {
    "text": "necessarily give you the title such",
    "start": "375840",
    "end": "377039"
  },
  {
    "text": "interval because",
    "start": "377039",
    "end": "379740"
  },
  {
    "text": "you can actually show that like if",
    "start": "379740",
    "end": "381060"
  },
  {
    "text": "you're going to compute X Plus X you'll",
    "start": "381060",
    "end": "382680"
  },
  {
    "text": "believe that you have two unknowns and",
    "start": "382680",
    "end": "384960"
  },
  {
    "text": "yeah it gets messy",
    "start": "384960",
    "end": "387300"
  },
  {
    "text": "um",
    "start": "387300",
    "end": "387960"
  },
  {
    "text": "uh probabilistic programming is tackled",
    "start": "387960",
    "end": "389819"
  },
  {
    "text": "in the original paper provenance",
    "start": "389819",
    "end": "391199"
  },
  {
    "text": "tracking is tackled in the original",
    "start": "391199",
    "end": "392580"
  },
  {
    "text": "paper but in a way that",
    "start": "392580",
    "end": "394740"
  },
  {
    "text": "um turns something that should be exp",
    "start": "394740",
    "end": "396300"
  },
  {
    "text": "time into exp space",
    "start": "396300",
    "end": "398639"
  },
  {
    "text": "um I gave a talk at Boston Haskell that",
    "start": "398639",
    "end": "401520"
  },
  {
    "text": "went deeper into that particular side of",
    "start": "401520",
    "end": "403319"
  },
  {
    "text": "the of the of the space about how to fix",
    "start": "403319",
    "end": "405060"
  },
  {
    "text": "that",
    "start": "405060",
    "end": "406440"
  },
  {
    "text": "um incremental programming there's uh",
    "start": "406440",
    "end": "408539"
  },
  {
    "text": "nominal adapt on you can steal all the",
    "start": "408539",
    "end": "410819"
  },
  {
    "text": "Machinery that makes that go to actually",
    "start": "410819",
    "end": "412199"
  },
  {
    "text": "make it so you can name the propagators",
    "start": "412199",
    "end": "413819"
  },
  {
    "text": "the cells that you're adding",
    "start": "413819",
    "end": "415740"
  },
  {
    "text": "um Connell Elliott has something called",
    "start": "415740",
    "end": "417120"
  },
  {
    "text": "UNAM which is sort of how to write",
    "start": "417120",
    "end": "419639"
  },
  {
    "text": "lazier functions like I want to do an",
    "start": "419639",
    "end": "422520"
  },
  {
    "text": "and that's lazy in both arguments well",
    "start": "422520",
    "end": "424860"
  },
  {
    "text": "as soon as I can run that par",
    "start": "424860",
    "end": "426419"
  },
  {
    "text": "computation",
    "start": "426419",
    "end": "427680"
  },
  {
    "text": "as a you know par for all s par s a",
    "start": "427680",
    "end": "430680"
  },
  {
    "text": "arrow a",
    "start": "430680",
    "end": "432600"
  },
  {
    "text": "and I have the ability to",
    "start": "432600",
    "end": "436139"
  },
  {
    "text": "um read from a",
    "start": "436139",
    "end": "439139"
  },
  {
    "text": "um an Ivar as a pure computation we now",
    "start": "439139",
    "end": "441840"
  },
  {
    "text": "have the ability to write lazier",
    "start": "441840",
    "end": "443099"
  },
  {
    "text": "functions",
    "start": "443099",
    "end": "445580"
  },
  {
    "text": "so what I want to do now",
    "start": "446340",
    "end": "448680"
  },
  {
    "text": "with whatever time I have left is talk",
    "start": "448680",
    "end": "452099"
  },
  {
    "text": "about how to transfer results from those",
    "start": "452099",
    "end": "453720"
  },
  {
    "text": "different domains to each other so I",
    "start": "453720",
    "end": "455639"
  },
  {
    "text": "want to take the things that made sat",
    "start": "455639",
    "end": "457319"
  },
  {
    "text": "solving fast for instance",
    "start": "457319",
    "end": "459660"
  },
  {
    "text": "and use it to make all of my other",
    "start": "459660",
    "end": "462300"
  },
  {
    "text": "problem domains fast",
    "start": "462300",
    "end": "465680"
  },
  {
    "text": "and back around 2001 uh like chaff I",
    "start": "466139",
    "end": "470340"
  },
  {
    "text": "think was the the first real modern stat",
    "start": "470340",
    "end": "472740"
  },
  {
    "text": "solver that came around does anybody",
    "start": "472740",
    "end": "474479"
  },
  {
    "text": "here know much about facet solvers okay",
    "start": "474479",
    "end": "476580"
  },
  {
    "text": "nobody crickets okay one two people",
    "start": "476580",
    "end": "479940"
  },
  {
    "text": "um",
    "start": "479940",
    "end": "480720"
  },
  {
    "text": "so the two things that made sat solvers",
    "start": "480720",
    "end": "482880"
  },
  {
    "text": "go fast were that we learned that we can",
    "start": "482880",
    "end": "485280"
  },
  {
    "text": "do conflict directed Clause learning",
    "start": "485280",
    "end": "486720"
  },
  {
    "text": "which is to say we found a problem let's",
    "start": "486720",
    "end": "489120"
  },
  {
    "text": "add more things to my problem",
    "start": "489120",
    "end": "491759"
  },
  {
    "text": "uh let's so like we said that oh",
    "start": "491759",
    "end": "494580"
  },
  {
    "text": "um as I was going through trying to find",
    "start": "494580",
    "end": "496740"
  },
  {
    "text": "a satisfying assignment of variables",
    "start": "496740",
    "end": "499199"
  },
  {
    "text": "um I needed to learn something new and",
    "start": "499199",
    "end": "501180"
  },
  {
    "text": "there's something I'll call a two watch",
    "start": "501180",
    "end": "502259"
  },
  {
    "text": "literal scheme so a SAT problem is going",
    "start": "502259",
    "end": "505680"
  },
  {
    "text": "to be basically I need this and this and",
    "start": "505680",
    "end": "508440"
  },
  {
    "text": "this to be true",
    "start": "508440",
    "end": "509699"
  },
  {
    "text": "and I need to pick assignments to the",
    "start": "509699",
    "end": "511740"
  },
  {
    "text": "variables X Y and Z and W here that",
    "start": "511740",
    "end": "514740"
  },
  {
    "text": "would make this",
    "start": "514740",
    "end": "517680"
  },
  {
    "text": "um",
    "start": "517680",
    "end": "518520"
  },
  {
    "text": "Clause tell me true so find me a",
    "start": "518520",
    "end": "521520"
  },
  {
    "text": "satisfying assignment",
    "start": "521520",
    "end": "524039"
  },
  {
    "text": "or prove to me that it can't exist",
    "start": "524039",
    "end": "526200"
  },
  {
    "text": "okay and the way that you typically do",
    "start": "526200",
    "end": "528120"
  },
  {
    "text": "this is if it's a form of propagation we",
    "start": "528120",
    "end": "530519"
  },
  {
    "text": "would do something like if I only have",
    "start": "530519",
    "end": "532440"
  },
  {
    "text": "one element in one literal in the Clause",
    "start": "532440",
    "end": "535080"
  },
  {
    "text": "then I can tell you what its answer must",
    "start": "535080",
    "end": "537000"
  },
  {
    "text": "be I can just read it off",
    "start": "537000",
    "end": "538620"
  },
  {
    "text": "right if every one of these things must",
    "start": "538620",
    "end": "540540"
  },
  {
    "text": "be true and one of them only has X then",
    "start": "540540",
    "end": "542820"
  },
  {
    "text": "I can do X must be true",
    "start": "542820",
    "end": "544800"
  },
  {
    "text": "if one of them had not X and I can tell",
    "start": "544800",
    "end": "546480"
  },
  {
    "text": "you X must be false",
    "start": "546480",
    "end": "548580"
  },
  {
    "text": "if the Clause is empty it's not",
    "start": "548580",
    "end": "550440"
  },
  {
    "text": "satisfiable and I have to backtrack",
    "start": "550440",
    "end": "553680"
  },
  {
    "text": "otherwise I guess I pick one of the",
    "start": "553680",
    "end": "556260"
  },
  {
    "text": "variables in one of my clauses I say hey",
    "start": "556260",
    "end": "557519"
  },
  {
    "text": "X is true",
    "start": "557519",
    "end": "558839"
  },
  {
    "text": "and then take every Clause that had X",
    "start": "558839",
    "end": "561180"
  },
  {
    "text": "occurring positively and just say that",
    "start": "561180",
    "end": "563700"
  },
  {
    "text": "Clause is solved",
    "start": "563700",
    "end": "565320"
  },
  {
    "text": "X is true or something else and I don't",
    "start": "565320",
    "end": "567360"
  },
  {
    "text": "care what else this is done",
    "start": "567360",
    "end": "569220"
  },
  {
    "text": "and the thing that I had not X in I have",
    "start": "569220",
    "end": "571080"
  },
  {
    "text": "to go through and kind of cover it up",
    "start": "571080",
    "end": "572100"
  },
  {
    "text": "it's not that thing",
    "start": "572100",
    "end": "573420"
  },
  {
    "text": "and then hopefully covering That Thing",
    "start": "573420",
    "end": "575160"
  },
  {
    "text": "Up gets me down to either a unit clause",
    "start": "575160",
    "end": "577560"
  },
  {
    "text": "or it causes me to backtrack",
    "start": "577560",
    "end": "580140"
  },
  {
    "text": "when we backtrack we figure out a small",
    "start": "580140",
    "end": "583740"
  },
  {
    "text": "Clause that we can add to our",
    "start": "583740",
    "end": "585300"
  },
  {
    "text": "environment that will make sure that we",
    "start": "585300",
    "end": "586380"
  },
  {
    "text": "never fall into the same trap again",
    "start": "586380",
    "end": "588540"
  },
  {
    "text": "this is sort of the exact the the core",
    "start": "588540",
    "end": "591600"
  },
  {
    "text": "execution strategy of a SAT solver",
    "start": "591600",
    "end": "595440"
  },
  {
    "text": "the problem is is that when one of these",
    "start": "595440",
    "end": "597240"
  },
  {
    "text": "Clauses has like 500 elements",
    "start": "597240",
    "end": "599880"
  },
  {
    "text": "every time I change one of the variables",
    "start": "599880",
    "end": "602700"
  },
  {
    "text": "that just happens to lie in there I'm",
    "start": "602700",
    "end": "604320"
  },
  {
    "text": "looking at this",
    "start": "604320",
    "end": "606120"
  },
  {
    "text": "sell again and I'm firing I'm trying to",
    "start": "606120",
    "end": "608880"
  },
  {
    "text": "propagate information out of it",
    "start": "608880",
    "end": "610920"
  },
  {
    "text": "and it's not going to do unit",
    "start": "610920",
    "end": "613019"
  },
  {
    "text": "propagation until we're down to exactly",
    "start": "613019",
    "end": "615600"
  },
  {
    "text": "one thing left",
    "start": "615600",
    "end": "617820"
  },
  {
    "text": "but we're waking up on any one of 500",
    "start": "617820",
    "end": "619920"
  },
  {
    "text": "things being updated so we're waking up",
    "start": "619920",
    "end": "621899"
  },
  {
    "text": "too often",
    "start": "621899",
    "end": "623279"
  },
  {
    "text": "which is a fairly Universal problem in",
    "start": "623279",
    "end": "625380"
  },
  {
    "text": "our propagator world if we had a",
    "start": "625380",
    "end": "626459"
  },
  {
    "text": "propagator that had 500 inputs whenever",
    "start": "626459",
    "end": "628440"
  },
  {
    "text": "any one of those inputs moved up even if",
    "start": "628440",
    "end": "630300"
  },
  {
    "text": "that can't affect the output",
    "start": "630300",
    "end": "632880"
  },
  {
    "text": "we're going to wake up and try and scan",
    "start": "632880",
    "end": "634860"
  },
  {
    "text": "all 500 of our input and then we're",
    "start": "634860",
    "end": "636180"
  },
  {
    "text": "going to go back to sleep",
    "start": "636180",
    "end": "638779"
  },
  {
    "text": "so what I want to do",
    "start": "639019",
    "end": "641959"
  },
  {
    "text": "is work smarter",
    "start": "641959",
    "end": "644579"
  },
  {
    "text": "and here we have the condition that the",
    "start": "644579",
    "end": "648480"
  },
  {
    "text": "only time we ever propagate is when",
    "start": "648480",
    "end": "650040"
  },
  {
    "text": "there's exactly one element left",
    "start": "650040",
    "end": "653240"
  },
  {
    "text": "and so what we're going to do is we're",
    "start": "653760",
    "end": "655019"
  },
  {
    "text": "going to watch two elements any two",
    "start": "655019",
    "end": "656640"
  },
  {
    "text": "elements that do not have a valid have",
    "start": "656640",
    "end": "658620"
  },
  {
    "text": "not had a value assigned to them I don't",
    "start": "658620",
    "end": "660000"
  },
  {
    "text": "know if it's true or false it's",
    "start": "660000",
    "end": "660959"
  },
  {
    "text": "currently bottom",
    "start": "660959",
    "end": "663660"
  },
  {
    "text": "so if I watch any two elements then and",
    "start": "663660",
    "end": "666720"
  },
  {
    "text": "I only wake up to remove something from",
    "start": "666720",
    "end": "669000"
  },
  {
    "text": "the set effectively to check to see if",
    "start": "669000",
    "end": "671700"
  },
  {
    "text": "we're in doing unit propagation When We",
    "start": "671700",
    "end": "673920"
  },
  {
    "text": "Touch one of those two",
    "start": "673920",
    "end": "675779"
  },
  {
    "text": "I skimmed through looking for am I down",
    "start": "675779",
    "end": "678420"
  },
  {
    "text": "to one element or I find a counter",
    "start": "678420",
    "end": "680339"
  },
  {
    "text": "example and then I just start watching",
    "start": "680339",
    "end": "681779"
  },
  {
    "text": "that one instead",
    "start": "681779",
    "end": "683519"
  },
  {
    "text": "and when I backtrack and say oh well",
    "start": "683519",
    "end": "685740"
  },
  {
    "text": "actually X is false it didn't work let's",
    "start": "685740",
    "end": "688079"
  },
  {
    "text": "try and do a different Clause then I",
    "start": "688079",
    "end": "690240"
  },
  {
    "text": "don't have to rejigger this because in a",
    "start": "690240",
    "end": "692399"
  },
  {
    "text": "world where less fewer things are",
    "start": "692399",
    "end": "693720"
  },
  {
    "text": "defined they're still in a legal",
    "start": "693720",
    "end": "694980"
  },
  {
    "text": "position",
    "start": "694980",
    "end": "696060"
  },
  {
    "text": "so this is like discovered of almost all",
    "start": "696060",
    "end": "697680"
  },
  {
    "text": "the backtracking inside of a SAT solver",
    "start": "697680",
    "end": "701839"
  },
  {
    "text": "okay",
    "start": "702720",
    "end": "704820"
  },
  {
    "text": "so now what I'm interested in is that",
    "start": "704820",
    "end": "708300"
  },
  {
    "text": "many of my propagators have this",
    "start": "708300",
    "end": "709680"
  },
  {
    "text": "property that if any of their inputs are",
    "start": "709680",
    "end": "711240"
  },
  {
    "text": "bottom",
    "start": "711240",
    "end": "712380"
  },
  {
    "text": "then the output is bottom if I have a",
    "start": "712380",
    "end": "714779"
  },
  {
    "text": "monotone function I'm adding",
    "start": "714779",
    "end": "717000"
  },
  {
    "text": "intervals",
    "start": "717000",
    "end": "718440"
  },
  {
    "text": "right and one of the intervals is minus",
    "start": "718440",
    "end": "720240"
  },
  {
    "text": "infinity to Infinity I'm adding it to",
    "start": "720240",
    "end": "721620"
  },
  {
    "text": "another interval I don't care what the",
    "start": "721620",
    "end": "722700"
  },
  {
    "text": "other interval is I know that the output",
    "start": "722700",
    "end": "724079"
  },
  {
    "text": "range is going to be minus infinity to",
    "start": "724079",
    "end": "725339"
  },
  {
    "text": "Infinity I didn't narrow myself at all",
    "start": "725339",
    "end": "729740"
  },
  {
    "text": "um",
    "start": "730560",
    "end": "731940"
  },
  {
    "text": "so what I want to do is use the same to",
    "start": "731940",
    "end": "735420"
  },
  {
    "text": "watch literal scheme to say watch two",
    "start": "735420",
    "end": "737640"
  },
  {
    "text": "litter two things that I happen to know",
    "start": "737640",
    "end": "739260"
  },
  {
    "text": "are currently bottom and when either one",
    "start": "739260",
    "end": "741420"
  },
  {
    "text": "of those move up then we scan through",
    "start": "741420",
    "end": "743820"
  },
  {
    "text": "the inputs looking for something that's",
    "start": "743820",
    "end": "745380"
  },
  {
    "text": "not bottom",
    "start": "745380",
    "end": "747980"
  },
  {
    "text": "Etc so we we adapt the exact same thing",
    "start": "748380",
    "end": "750779"
  },
  {
    "text": "that made sat solvers fast to do fewer",
    "start": "750779",
    "end": "753180"
  },
  {
    "text": "wake-ups to start up my propagator",
    "start": "753180",
    "end": "756860"
  },
  {
    "text": "and then the second thing we need to do",
    "start": "758459",
    "end": "760459"
  },
  {
    "text": "is to figure out how to remove a",
    "start": "760459",
    "end": "762779"
  },
  {
    "text": "propagator from the network",
    "start": "762779",
    "end": "764339"
  },
  {
    "text": "right it's it would be nice to be able",
    "start": "764339",
    "end": "766139"
  },
  {
    "text": "to garbage collect these things",
    "start": "766139",
    "end": "768420"
  },
  {
    "text": "um Lindsay has a paper where she talks",
    "start": "768420",
    "end": "769920"
  },
  {
    "text": "about freezing making sure that nothing",
    "start": "769920",
    "end": "771480"
  },
  {
    "text": "can actually no power computation can",
    "start": "771480",
    "end": "773279"
  },
  {
    "text": "actually affect the value and then you",
    "start": "773279",
    "end": "774420"
  },
  {
    "text": "can let it go to sleep",
    "start": "774420",
    "end": "775980"
  },
  {
    "text": "and then you can actually see the actual",
    "start": "775980",
    "end": "777899"
  },
  {
    "text": "value",
    "start": "777899",
    "end": "779639"
  },
  {
    "text": "um here what I'm going to do is this if",
    "start": "779639",
    "end": "781680"
  },
  {
    "text": "every value is just below the top",
    "start": "781680",
    "end": "784139"
  },
  {
    "text": "element where if I were to cause this",
    "start": "784139",
    "end": "786180"
  },
  {
    "text": "value to go up I'm going to blow up the",
    "start": "786180",
    "end": "787500"
  },
  {
    "text": "world not do something",
    "start": "787500",
    "end": "789720"
  },
  {
    "text": "right then this propagator can never",
    "start": "789720",
    "end": "792300"
  },
  {
    "text": "fire again",
    "start": "792300",
    "end": "794220"
  },
  {
    "text": "so remember this covered by is that",
    "start": "794220",
    "end": "795959"
  },
  {
    "text": "there's nothing between me and the top",
    "start": "795959",
    "end": "798300"
  },
  {
    "text": "in this case",
    "start": "798300",
    "end": "800220"
  },
  {
    "text": "so if every input to my propagator can't",
    "start": "800220",
    "end": "802200"
  },
  {
    "text": "go up without causing horrible",
    "start": "802200",
    "end": "804120"
  },
  {
    "text": "catastrophe",
    "start": "804120",
    "end": "805560"
  },
  {
    "text": "then this propagator can never fire",
    "start": "805560",
    "end": "807959"
  },
  {
    "text": "so now if we go back to sat we started",
    "start": "807959",
    "end": "812820"
  },
  {
    "text": "with I don't know anything about the",
    "start": "812820",
    "end": "814139"
  },
  {
    "text": "variable oh it's true well when it's",
    "start": "814139",
    "end": "816300"
  },
  {
    "text": "true it's covered by top",
    "start": "816300",
    "end": "818700"
  },
  {
    "text": "so that's why sat doesn't have to stay",
    "start": "818700",
    "end": "820980"
  },
  {
    "text": "awake after it's made a variable",
    "start": "820980",
    "end": "823079"
  },
  {
    "text": "assignment",
    "start": "823079",
    "end": "825560"
  },
  {
    "text": "so the combination of these two things",
    "start": "826440",
    "end": "828420"
  },
  {
    "text": "is why sat works",
    "start": "828420",
    "end": "830399"
  },
  {
    "text": "and by stealing them independently I can",
    "start": "830399",
    "end": "832440"
  },
  {
    "text": "use them in a more general setting",
    "start": "832440",
    "end": "835220"
  },
  {
    "text": "another example really quickly is this",
    "start": "835220",
    "end": "838860"
  },
  {
    "text": "notion of constraint programming and in",
    "start": "838860",
    "end": "840660"
  },
  {
    "text": "constraint programming what we're going",
    "start": "840660",
    "end": "841860"
  },
  {
    "text": "to do is we're going to say something",
    "start": "841860",
    "end": "842820"
  },
  {
    "text": "like I have X is a number between 1 and",
    "start": "842820",
    "end": "845100"
  },
  {
    "text": "5 and they're integers and Y is a number",
    "start": "845100",
    "end": "846720"
  },
  {
    "text": "between one and five and then I can",
    "start": "846720",
    "end": "848279"
  },
  {
    "text": "build a propagator here",
    "start": "848279",
    "end": "850200"
  },
  {
    "text": "that is X is less than or equal to Y and",
    "start": "850200",
    "end": "852720"
  },
  {
    "text": "this is a propaganda that reads from",
    "start": "852720",
    "end": "853860"
  },
  {
    "text": "both X and Y and writes to both X and Y",
    "start": "853860",
    "end": "857040"
  },
  {
    "text": "so we can build it as a propaganda that",
    "start": "857040",
    "end": "858480"
  },
  {
    "text": "says reads from X and Y and write to y",
    "start": "858480",
    "end": "861240"
  },
  {
    "text": "and read from X and Y and write to X or",
    "start": "861240",
    "end": "863880"
  },
  {
    "text": "really only have to need from read from",
    "start": "863880",
    "end": "865320"
  },
  {
    "text": "X and write to Y and read from y write",
    "start": "865320",
    "end": "866820"
  },
  {
    "text": "text but what we're going to do is here",
    "start": "866820",
    "end": "868560"
  },
  {
    "text": "we'll first establish our consistent I'm",
    "start": "868560",
    "end": "871079"
  },
  {
    "text": "sorry let's do X is less than y",
    "start": "871079",
    "end": "873480"
  },
  {
    "text": "if x is less than y then now we can tell",
    "start": "873480",
    "end": "876180"
  },
  {
    "text": "you that X cannot be 5 and Y cannot be",
    "start": "876180",
    "end": "879060"
  },
  {
    "text": "2. that's our kind of initial starting",
    "start": "879060",
    "end": "881279"
  },
  {
    "text": "point and then we can keep refining from",
    "start": "881279",
    "end": "882720"
  },
  {
    "text": "there whenever I gain information about",
    "start": "882720",
    "end": "884459"
  },
  {
    "text": "X I'll be able to propagate that to gain",
    "start": "884459",
    "end": "887100"
  },
  {
    "text": "information about why",
    "start": "887100",
    "end": "888540"
  },
  {
    "text": "and what we'll do is we'll proceed the",
    "start": "888540",
    "end": "889980"
  },
  {
    "text": "same way that we proceeded with sat",
    "start": "889980",
    "end": "891120"
  },
  {
    "text": "we'll propagate all the things that we",
    "start": "891120",
    "end": "893220"
  },
  {
    "text": "can do to make sure that all the",
    "start": "893220",
    "end": "894240"
  },
  {
    "text": "individual constraints are satisfied at",
    "start": "894240",
    "end": "896220"
  },
  {
    "text": "least individually and then we'll start",
    "start": "896220",
    "end": "898199"
  },
  {
    "text": "guessing",
    "start": "898199",
    "end": "899220"
  },
  {
    "text": "and backtrack as needed",
    "start": "899220",
    "end": "901560"
  },
  {
    "text": "okay so it's the exact same algorithm as",
    "start": "901560",
    "end": "903300"
  },
  {
    "text": "for sat just",
    "start": "903300",
    "end": "905519"
  },
  {
    "text": "um we're using the sort of Arc",
    "start": "905519",
    "end": "907560"
  },
  {
    "text": "consistency thing and there's a classic",
    "start": "907560",
    "end": "909899"
  },
  {
    "text": "algorithm called AC3 from the 70s which",
    "start": "909899",
    "end": "912660"
  },
  {
    "text": "is the thing that's usually taught for",
    "start": "912660",
    "end": "914279"
  },
  {
    "text": "constraint programming and if you work",
    "start": "914279",
    "end": "915959"
  },
  {
    "text": "it out is exactly the propagator",
    "start": "915959",
    "end": "918480"
  },
  {
    "text": "solution we have a queue of what we're",
    "start": "918480",
    "end": "919980"
  },
  {
    "text": "going to what of what propagators we're",
    "start": "919980",
    "end": "921540"
  },
  {
    "text": "working with",
    "start": "921540",
    "end": "922800"
  },
  {
    "text": "we set up our initial conditions",
    "start": "922800",
    "end": "925019"
  },
  {
    "text": "for all the unary relations and then we",
    "start": "925019",
    "end": "927120"
  },
  {
    "text": "just pump the propagator queue",
    "start": "927120",
    "end": "929760"
  },
  {
    "text": "so you can read the propagator algorithm",
    "start": "929760",
    "end": "932820"
  },
  {
    "text": "from the 70s",
    "start": "932820",
    "end": "935660"
  },
  {
    "text": "um",
    "start": "936959",
    "end": "937980"
  },
  {
    "text": "and again unit propagation was a special",
    "start": "937980",
    "end": "940079"
  },
  {
    "text": "case another example that kind of leaps",
    "start": "940079",
    "end": "942839"
  },
  {
    "text": "out at me is data log so in data log",
    "start": "942839",
    "end": "946019"
  },
  {
    "text": "data log is like bottom-up prologue",
    "start": "946019",
    "end": "948600"
  },
  {
    "text": "where my little atoms or whatever are",
    "start": "948600",
    "end": "951899"
  },
  {
    "text": "going to be",
    "start": "951899",
    "end": "953180"
  },
  {
    "text": "tables basically I have a parent table",
    "start": "953180",
    "end": "955260"
  },
  {
    "text": "and an ancestor table here and I'm",
    "start": "955260",
    "end": "957420"
  },
  {
    "text": "saying if x is a parent of Y then X is",
    "start": "957420",
    "end": "960480"
  },
  {
    "text": "an ancestor of Y",
    "start": "960480",
    "end": "962100"
  },
  {
    "text": "and I'm saying if x is an ancestor of Y",
    "start": "962100",
    "end": "964260"
  },
  {
    "text": "and um Y is apparent ancestor of Z oops",
    "start": "964260",
    "end": "968100"
  },
  {
    "text": "um then X is an ancestor of Z",
    "start": "968100",
    "end": "970380"
  },
  {
    "text": "right",
    "start": "970380",
    "end": "971519"
  },
  {
    "text": "and so",
    "start": "971519",
    "end": "973079"
  },
  {
    "text": "I might have a bunch of like starting",
    "start": "973079",
    "end": "974760"
  },
  {
    "text": "facts and then this thing gives me a",
    "start": "974760",
    "end": "977160"
  },
  {
    "text": "bunch of rules that I can iterate on",
    "start": "977160",
    "end": "978360"
  },
  {
    "text": "until it reaches a fixed point so now my",
    "start": "978360",
    "end": "981420"
  },
  {
    "text": "data log",
    "start": "981420",
    "end": "982560"
  },
  {
    "text": "statements here",
    "start": "982560",
    "end": "984899"
  },
  {
    "text": "these rules",
    "start": "984899",
    "end": "986279"
  },
  {
    "text": "are my propagators",
    "start": "986279",
    "end": "988680"
  },
  {
    "text": "and these tables",
    "start": "988680",
    "end": "991199"
  },
  {
    "text": "are my cells",
    "start": "991199",
    "end": "993300"
  },
  {
    "text": "and I gain information by adding rows to",
    "start": "993300",
    "end": "995880"
  },
  {
    "text": "tables",
    "start": "995880",
    "end": "997259"
  },
  {
    "text": "right which is unioning two tables",
    "start": "997259",
    "end": "1000940"
  },
  {
    "text": "so",
    "start": "1001579",
    "end": "1003380"
  },
  {
    "text": "data log is not executed by that",
    "start": "1003380",
    "end": "1005720"
  },
  {
    "text": "horrible horrible scheme that I just",
    "start": "1005720",
    "end": "1007100"
  },
  {
    "text": "described at the very least we move up",
    "start": "1007100",
    "end": "1009620"
  },
  {
    "text": "from naive evaluation to data log which",
    "start": "1009620",
    "end": "1011180"
  },
  {
    "text": "is doing join after join after join",
    "start": "1011180",
    "end": "1012620"
  },
  {
    "text": "after join to doing slightly smaller",
    "start": "1012620",
    "end": "1014899"
  },
  {
    "text": "joins",
    "start": "1014899",
    "end": "1016519"
  },
  {
    "text": "and one of the things that we can do is",
    "start": "1016519",
    "end": "1018019"
  },
  {
    "text": "we can sit here and if we number our",
    "start": "1018019",
    "end": "1020720"
  },
  {
    "text": "rules",
    "start": "1020720",
    "end": "1021980"
  },
  {
    "text": "we can build a graph that says hey look",
    "start": "1021980",
    "end": "1023360"
  },
  {
    "text": "the parent table feeds into this Rule",
    "start": "1023360",
    "end": "1025160"
  },
  {
    "text": "and then we feed out into the ancestor",
    "start": "1025160",
    "end": "1027079"
  },
  {
    "text": "table",
    "start": "1027079",
    "end": "1028400"
  },
  {
    "text": "and then the parent and the ancestors",
    "start": "1028400",
    "end": "1030380"
  },
  {
    "text": "feed into rule two and then they feed",
    "start": "1030380",
    "end": "1032480"
  },
  {
    "text": "out into the ancestor table",
    "start": "1032480",
    "end": "1034640"
  },
  {
    "text": "and if we topologically sort this graph",
    "start": "1034640",
    "end": "1037220"
  },
  {
    "text": "it will tell me that I should feed all",
    "start": "1037220",
    "end": "1039319"
  },
  {
    "text": "the parents into the ancestor table",
    "start": "1039319",
    "end": "1041540"
  },
  {
    "text": "and then I should run this strongly",
    "start": "1041540",
    "end": "1042918"
  },
  {
    "text": "connected component until it stops",
    "start": "1042919",
    "end": "1045620"
  },
  {
    "text": "so what that's saying is dump this into",
    "start": "1045620",
    "end": "1047839"
  },
  {
    "text": "there and then cycle this over and over",
    "start": "1047839",
    "end": "1050600"
  },
  {
    "text": "again",
    "start": "1050600",
    "end": "1052400"
  },
  {
    "text": "and then we can try and work even",
    "start": "1052400",
    "end": "1053780"
  },
  {
    "text": "smarter",
    "start": "1053780",
    "end": "1055280"
  },
  {
    "text": "we can say",
    "start": "1055280",
    "end": "1058059"
  },
  {
    "text": "um let me just look at the Deltas the",
    "start": "1058100",
    "end": "1059720"
  },
  {
    "text": "new ancestors because those are the only",
    "start": "1059720",
    "end": "1061520"
  },
  {
    "text": "things that we actually have to join",
    "start": "1061520",
    "end": "1062840"
  },
  {
    "text": "against the parent table the old",
    "start": "1062840",
    "end": "1064700"
  },
  {
    "text": "ancestors we already joined and merged",
    "start": "1064700",
    "end": "1066980"
  },
  {
    "text": "so the Delta the new Delta and plus one",
    "start": "1066980",
    "end": "1070039"
  },
  {
    "text": "actually is driven by the old Delta",
    "start": "1070039",
    "end": "1073880"
  },
  {
    "text": "joined with the parent table",
    "start": "1073880",
    "end": "1075799"
  },
  {
    "text": "so now if this is only four new entries",
    "start": "1075799",
    "end": "1077660"
  },
  {
    "text": "and this is a million items we're not",
    "start": "1077660",
    "end": "1079880"
  },
  {
    "text": "joining a five million item table",
    "start": "1079880",
    "end": "1081919"
  },
  {
    "text": "against a one million item table to",
    "start": "1081919",
    "end": "1084559"
  },
  {
    "text": "find five more things to do the next",
    "start": "1084559",
    "end": "1086539"
  },
  {
    "text": "round",
    "start": "1086539",
    "end": "1088720"
  },
  {
    "text": "um and this notion of building these",
    "start": "1089059",
    "end": "1091160"
  },
  {
    "text": "Deltas is actually something that we can",
    "start": "1091160",
    "end": "1093320"
  },
  {
    "text": "do in general and I'm going to skip",
    "start": "1093320",
    "end": "1095000"
  },
  {
    "text": "through this because",
    "start": "1095000",
    "end": "1096500"
  },
  {
    "text": "it's now been shown on slides",
    "start": "1096500",
    "end": "1099160"
  },
  {
    "text": "and people can catch it in on the",
    "start": "1099160",
    "end": "1101780"
  },
  {
    "text": "backswing",
    "start": "1101780",
    "end": "1102980"
  },
  {
    "text": "um",
    "start": "1102980",
    "end": "1103820"
  },
  {
    "text": "and that notion of topological ordering",
    "start": "1103820",
    "end": "1105799"
  },
  {
    "text": "of the graph can actually be used as",
    "start": "1105799",
    "end": "1107720"
  },
  {
    "text": "well so executing my propagator Network",
    "start": "1107720",
    "end": "1110000"
  },
  {
    "text": "in whatever the current known",
    "start": "1110000",
    "end": "1111380"
  },
  {
    "text": "topological ordering is actually a very",
    "start": "1111380",
    "end": "1113600"
  },
  {
    "text": "good thing but adding when we had",
    "start": "1113600",
    "end": "1115220"
  },
  {
    "text": "conflict directed Clause learning we",
    "start": "1115220",
    "end": "1116960"
  },
  {
    "text": "were adding new nodes to our propagator",
    "start": "1116960",
    "end": "1119360"
  },
  {
    "text": "Network our propagator network was",
    "start": "1119360",
    "end": "1120919"
  },
  {
    "text": "dynamically growing itself",
    "start": "1120919",
    "end": "1123679"
  },
  {
    "text": "so this now means that this topological",
    "start": "1123679",
    "end": "1125960"
  },
  {
    "text": "ordering that we just stole",
    "start": "1125960",
    "end": "1127700"
  },
  {
    "text": "now needs to be dynamic and that",
    "start": "1127700",
    "end": "1129919"
  },
  {
    "text": "actually has some pretty terrible time",
    "start": "1129919",
    "end": "1131419"
  },
  {
    "text": "bounds",
    "start": "1131419",
    "end": "1133220"
  },
  {
    "text": "um and I've been working on finding I",
    "start": "1133220",
    "end": "1135740"
  },
  {
    "text": "don't need to build a perfect",
    "start": "1135740",
    "end": "1136900"
  },
  {
    "text": "topological ordering I only need one",
    "start": "1136900",
    "end": "1138799"
  },
  {
    "text": "that's pretty good and I do believe at",
    "start": "1138799",
    "end": "1140840"
  },
  {
    "text": "this point in time that there's some",
    "start": "1140840",
    "end": "1141919"
  },
  {
    "text": "kind of small k k optimal solution which",
    "start": "1141919",
    "end": "1144679"
  },
  {
    "text": "uses some like 2x multiple of the",
    "start": "1144679",
    "end": "1147620"
  },
  {
    "text": "optimal number of steps I don't have a",
    "start": "1147620",
    "end": "1150500"
  },
  {
    "text": "proof for that one yet",
    "start": "1150500",
    "end": "1152539"
  },
  {
    "text": "um but there's other things that we",
    "start": "1152539",
    "end": "1154100"
  },
  {
    "text": "steal in data log datalog has this",
    "start": "1154100",
    "end": "1155840"
  },
  {
    "text": "ability to say and there's not something",
    "start": "1155840",
    "end": "1158240"
  },
  {
    "text": "and there is no ancestor of this or",
    "start": "1158240",
    "end": "1161480"
  },
  {
    "text": "there's not this in this table",
    "start": "1161480",
    "end": "1164660"
  },
  {
    "text": "and these edges in data log are special",
    "start": "1164660",
    "end": "1166700"
  },
  {
    "text": "they're not allowed to participate in",
    "start": "1166700",
    "end": "1167840"
  },
  {
    "text": "any Cycles",
    "start": "1167840",
    "end": "1169340"
  },
  {
    "text": "but in the propagator Network we could",
    "start": "1169340",
    "end": "1171740"
  },
  {
    "text": "say that we could add these sort of",
    "start": "1171740",
    "end": "1173240"
  },
  {
    "text": "special kind of propagator edges and",
    "start": "1173240",
    "end": "1175520"
  },
  {
    "text": "they can be non-monotone functions",
    "start": "1175520",
    "end": "1178880"
  },
  {
    "text": "they're just not allowed to participate",
    "start": "1178880",
    "end": "1180200"
  },
  {
    "text": "in any Cycles the monotonicity was what",
    "start": "1180200",
    "end": "1182960"
  },
  {
    "text": "what enabled us to participate in Cycles",
    "start": "1182960",
    "end": "1185780"
  },
  {
    "text": "to have our propagator networks feed",
    "start": "1185780",
    "end": "1187220"
  },
  {
    "text": "forward and backwards and have nothing",
    "start": "1187220",
    "end": "1188960"
  },
  {
    "text": "ever go wrong",
    "start": "1188960",
    "end": "1191120"
  },
  {
    "text": "so if we start relaxing this we can get",
    "start": "1191120",
    "end": "1193039"
  },
  {
    "text": "some interesting pieces",
    "start": "1193039",
    "end": "1195320"
  },
  {
    "text": "but for me I think the most telling",
    "start": "1195320",
    "end": "1197600"
  },
  {
    "text": "reason why data log is an interesting",
    "start": "1197600",
    "end": "1199220"
  },
  {
    "text": "problem domain",
    "start": "1199220",
    "end": "1200419"
  },
  {
    "text": "is that the um Joe hellerstein who is",
    "start": "1200419",
    "end": "1202880"
  },
  {
    "text": "the guy one of the one of the people who",
    "start": "1202880",
    "end": "1205340"
  },
  {
    "text": "um helped build up postgresql and he's",
    "start": "1205340",
    "end": "1208700"
  },
  {
    "text": "been a big data log Advocate ever since",
    "start": "1208700",
    "end": "1211220"
  },
  {
    "text": "um stated this something he called the",
    "start": "1211220",
    "end": "1213080"
  },
  {
    "text": "calm conjecture as part of the Berkeley",
    "start": "1213080",
    "end": "1215179"
  },
  {
    "text": "orders of magnitude project and in it",
    "start": "1215179",
    "end": "1217580"
  },
  {
    "text": "basically what he said is that a program",
    "start": "1217580",
    "end": "1218900"
  },
  {
    "text": "that has an eventually consistent",
    "start": "1218900",
    "end": "1220820"
  },
  {
    "text": "coordination free execution strategy it",
    "start": "1220820",
    "end": "1223580"
  },
  {
    "text": "can only have that if it's expressible",
    "start": "1223580",
    "end": "1226179"
  },
  {
    "text": "in data lock in proper monotonic data",
    "start": "1226179",
    "end": "1229760"
  },
  {
    "text": "log",
    "start": "1229760",
    "end": "1230480"
  },
  {
    "text": "okay so what that means is",
    "start": "1230480",
    "end": "1233360"
  },
  {
    "text": "that the only algorithms if this",
    "start": "1233360",
    "end": "1236299"
  },
  {
    "text": "conjecture is true which it has some",
    "start": "1236299",
    "end": "1237919"
  },
  {
    "text": "pretty strong evidence for",
    "start": "1237919",
    "end": "1239600"
  },
  {
    "text": "um",
    "start": "1239600",
    "end": "1240140"
  },
  {
    "text": "the only algorithms that we can",
    "start": "1240140",
    "end": "1241820"
  },
  {
    "text": "Implement that are eventually consistent",
    "start": "1241820",
    "end": "1243559"
  },
  {
    "text": "and don't require some sort of paxo",
    "start": "1243559",
    "end": "1246080"
  },
  {
    "text": "serve Vector clock organization scheme",
    "start": "1246080",
    "end": "1248600"
  },
  {
    "text": "to try and make them go",
    "start": "1248600",
    "end": "1250640"
  },
  {
    "text": "are precisely the ones that we can",
    "start": "1250640",
    "end": "1252140"
  },
  {
    "text": "express in data log and we've already",
    "start": "1252140",
    "end": "1253520"
  },
  {
    "text": "established that we can express all my",
    "start": "1253520",
    "end": "1254600"
  },
  {
    "text": "data log problems in my propagator",
    "start": "1254600",
    "end": "1256220"
  },
  {
    "text": "Network so if I'm looking for an",
    "start": "1256220",
    "end": "1258080"
  },
  {
    "text": "argument for why this is a good",
    "start": "1258080",
    "end": "1259880"
  },
  {
    "text": "Universal construction for eventual",
    "start": "1259880",
    "end": "1262760"
  },
  {
    "text": "consistent programs that don't have",
    "start": "1262760",
    "end": "1264559"
  },
  {
    "text": "crazy coordination schemes",
    "start": "1264559",
    "end": "1268039"
  },
  {
    "text": "um that conjecture from hellerstein goes",
    "start": "1268039",
    "end": "1270260"
  },
  {
    "text": "a really long way",
    "start": "1270260",
    "end": "1271580"
  },
  {
    "text": "towards arguing",
    "start": "1271580",
    "end": "1273260"
  },
  {
    "text": "um that we should care",
    "start": "1273260",
    "end": "1276260"
  },
  {
    "text": "so we learned a bunch of things from",
    "start": "1276260",
    "end": "1277940"
  },
  {
    "text": "datalog",
    "start": "1277940",
    "end": "1279020"
  },
  {
    "text": "um and I'm pretty sure I'm basically out",
    "start": "1279020",
    "end": "1281419"
  },
  {
    "text": "of time here so I have just one or two",
    "start": "1281419",
    "end": "1284120"
  },
  {
    "text": "more slides",
    "start": "1284120",
    "end": "1286600"
  },
  {
    "text": "um which is that uh these convergent",
    "start": "1287000",
    "end": "1289820"
  },
  {
    "text": "replicated data types",
    "start": "1289820",
    "end": "1291380"
  },
  {
    "text": "fit into this model commutative",
    "start": "1291380",
    "end": "1292700"
  },
  {
    "text": "replicated data types can be made to fit",
    "start": "1292700",
    "end": "1294260"
  },
  {
    "text": "into it with those relaxations I talked",
    "start": "1294260",
    "end": "1296480"
  },
  {
    "text": "about earlier",
    "start": "1296480",
    "end": "1298580"
  },
  {
    "text": "um using those threshold reads let us",
    "start": "1298580",
    "end": "1301039"
  },
  {
    "text": "rederive all the work that happened on",
    "start": "1301039",
    "end": "1302419"
  },
  {
    "text": "UNAM and that makes it so that every one",
    "start": "1302419",
    "end": "1304100"
  },
  {
    "text": "of these propagator solutions that we",
    "start": "1304100",
    "end": "1306200"
  },
  {
    "text": "can build up don't get buried in a",
    "start": "1306200",
    "end": "1307700"
  },
  {
    "text": "parmonad but they can just look like",
    "start": "1307700",
    "end": "1309140"
  },
  {
    "text": "more pure functions they let us write",
    "start": "1309140",
    "end": "1311360"
  },
  {
    "text": "every function in Haskell is monotone",
    "start": "1311360",
    "end": "1313840"
  },
  {
    "text": "but they let us write more of those",
    "start": "1313840",
    "end": "1316100"
  },
  {
    "text": "monotone functions that are not",
    "start": "1316100",
    "end": "1317240"
  },
  {
    "text": "expressible they let us write things",
    "start": "1317240",
    "end": "1318980"
  },
  {
    "text": "that are admissible under that",
    "start": "1318980",
    "end": "1320720"
  },
  {
    "text": "requirement but that are not directly",
    "start": "1320720",
    "end": "1322700"
  },
  {
    "text": "expressible under the language that we",
    "start": "1322700",
    "end": "1323900"
  },
  {
    "text": "have",
    "start": "1323900",
    "end": "1326020"
  },
  {
    "text": "so that is what I have thank you",
    "start": "1326299",
    "end": "1330919"
  },
  {
    "text": "foreign",
    "start": "1330919",
    "end": "1332410"
  },
  {
    "text": "[Applause]",
    "start": "1332410",
    "end": "1339089"
  }
]