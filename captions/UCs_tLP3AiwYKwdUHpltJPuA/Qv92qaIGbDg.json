[
  {
    "start": "0",
    "end": "53000"
  },
  {
    "text": "Hi, we're here at GOTO Copenhagen today. My name \nis Hannes, and I'm here with Dave and Simon.  ",
    "start": "13840",
    "end": "19360"
  },
  {
    "text": "Maybe you guys can introduce \nyourselves for a little bit?  I'm Simon Brown. I'm an independent consultant \nspecializing in software architecture.  ",
    "start": "20480",
    "end": "27840"
  },
  {
    "text": "I like to talk about software architecture \nand how software architecture fits into   the modern agile ways we work, especially \ndiagramming. That's one of my big things. ",
    "start": "29040",
    "end": "36320"
  },
  {
    "text": "Hi, I'm Dave Farley. I'm also interested \nin software architecture, and software  ",
    "start": "37680",
    "end": "43120"
  },
  {
    "text": "development in general. My big thing at the moment \nis thinking in terms of software engineering. What   does it take to build better software? But some \npart of that is certainly software architecture.",
    "start": "43120",
    "end": "52480"
  },
  {
    "text": "All right. Maybe a quick one to start with. \nWhat do you think the most positive evolutions  ",
    "start": "52480",
    "end": "58000"
  },
  {
    "start": "53000",
    "end": "376000"
  },
  {
    "text": "have been in the last maybe decade in terms of \nsoftware architecture? What has enabled you to do  ",
    "start": "58000",
    "end": "64800"
  },
  {
    "text": "better things? What are the \nbig parts that have changed? I'm gonna say DevOps and pass it over to you  ",
    "start": "65680",
    "end": "72640"
  },
  {
    "text": "immediately because I think \nthat's a huge one for me. Well, I think without being immodest, I'm \nconnected with continuous delivery and DevOps to  ",
    "start": "72640",
    "end": "81040"
  },
  {
    "text": "some extent. I think that is one of the things. \nIn part because of the stuff that I touched on  ",
    "start": "81040",
    "end": "87120"
  },
  {
    "text": "in my introduction, which is that I \nthink it's real engineering for software.   And if it were really engineering it would \nallow us to build better software faster,  ",
    "start": "88000",
    "end": "96960"
  },
  {
    "text": "and it does. That's what the data \nsays. So we can do more sophisticated   things, I think, using those kinds of approaches, \nthose kinds of tools, that kind of thinking.  ",
    "start": "96960",
    "end": "105280"
  },
  {
    "text": "So I would agree with that, although it \nsounds rather self-serving coming from me. No, I'd definitely echo the same thing. \nIf you look back 10 or 20 years ago,  ",
    "start": "106080",
    "end": "115920"
  },
  {
    "text": "teams were really struggling just to get \nsoftware into production and there were lots   of manual steps. With continuous regression, \ncontinuous delivery, and all the DevOps stuff,  ",
    "start": "115920",
    "end": "124960"
  },
  {
    "text": "that's optimized and automated a whole ton of \nstuff. I think that's one of the biggest things   you can point to over the past couple of decades \nthat's really allowed teams to move faster.  ",
    "start": "124960",
    "end": "132879"
  },
  {
    "text": "And with more of an engineering discipline, \nyou're actually doing things that are a   little bit more formalized and structured than \nthey perhaps were at the start of the 2000s.",
    "start": "133520",
    "end": "143920"
  },
  {
    "text": "I think that's true. I think in part, one of \nthe ways that I think about this is in no doubt,  ",
    "start": "144480",
    "end": "153840"
  },
  {
    "text": "agile was a step forward. It also allowed us to \nmake some missteps, but I think bringing it in...",
    "start": "153840",
    "end": "159676"
  },
  {
    "text": "Are you talking about SAFe? Not only SAFe, but certainly SAFe is a culprit. \nBut I think some of the missteps, I think  ",
    "start": "159676",
    "end": "170960"
  },
  {
    "text": "Simon would agree with this, is that it made \neverybody think that you gotta throw your brain   out and just start from scratch with everything. \nIt doesn't stop us designing. It shouldn't stop  ",
    "start": "170960",
    "end": "180480"
  },
  {
    "text": "us designing. It shouldn't stop us thinking \ndeeply about the systems that we're gonna build.  So you see lots of developers that \nthink, \"We don't need an upfront design  ",
    "start": "180480",
    "end": "188080"
  },
  {
    "text": "or architecture anymore. Because we're \nworking agile we can push features out.\"  There's a very big difference between the \nfailure of big, upfront design, which agile  ",
    "start": "188080",
    "end": "197760"
  },
  {
    "text": "countered, and design. To my impression, \nagile is about doing lots more design  ",
    "start": "197760",
    "end": "208000"
  },
  {
    "text": "and taking design more seriously, not less. \nI don't think you build a complex system  ",
    "start": "208000",
    "end": "214080"
  },
  {
    "text": "in one giant leap springing from your brain. It's \nan iterative, incremental approach to evolving  ",
    "start": "214640",
    "end": "221520"
  },
  {
    "text": "complexity and systems over time. And part of \nDevOps and continuous delivery is to allow for  ",
    "start": "222240",
    "end": "228000"
  },
  {
    "text": "that evolution safely and in a controlled manner.\nYeah. Is supporting this iterative approach,  ",
    "start": "228000",
    "end": "238240"
  },
  {
    "text": "the quicker delivery of new stuff to \nproduction what good architecture does,  ",
    "start": "240160",
    "end": "245360"
  },
  {
    "text": "or is there more to it than that for you?\nEssentially, that's exactly what good architecture   does. People say that the Agile Manifesto \ndoesn't talk about design, and therefore,  ",
    "start": "245360",
    "end": "254400"
  },
  {
    "text": "you should not do upfront design, to kind of \necho the same thoughts. And I've seen teams go   from big, upfront design to basically nothing, \nand I've realized that's now also a bad idea.  ",
    "start": "254400",
    "end": "262080"
  },
  {
    "text": "And in order to move fast, in order to embrace \nchange and deliver stuff quickly and use all of  ",
    "start": "262720",
    "end": "268320"
  },
  {
    "text": "the DevOps tools and CI/CD tools to move faster \nand deliver stuff properly in a structured, more  ",
    "start": "268320",
    "end": "273440"
  },
  {
    "text": "engineering-based way, you need a good design.\nOne of the principles in the Agile Manifesto   actually says, \"A continuous approach \nto good design enhances agility.\"  ",
    "start": "273440",
    "end": "282800"
  },
  {
    "text": "You don't get a good design just by hacking \ncode for free. You have to put some thought   into it. And although I completely agree that \nwe need to think about stuff in an evolutionary  ",
    "start": "282800",
    "end": "292560"
  },
  {
    "text": "way because we're gonna get changes and \nwe need to pivot and change direction,   I think you still need a starting point, \nnot all of the starting point, but  ",
    "start": "292560",
    "end": "299040"
  },
  {
    "text": "a starting point with some principles in place. \nSo that allows you to create that good structure,  ",
    "start": "299040",
    "end": "304880"
  },
  {
    "text": "higher degrees of modularity so you can move \nfast. So yeah, it's a blended approach for me.  I feel that you're saying that your design \nshould evolve with your product and with  ",
    "start": "305600",
    "end": "315440"
  },
  {
    "text": "the things that you learn from pushing stuff \nout. But you mentioned you want to get some   stuff in place in the beginning already.\nHold on, he didn't quite say that.  ",
    "start": "315440",
    "end": "326367"
  },
  {
    "text": "Forgive me if I'm putting words in \nyour mouth. What he said is that   you start off with a model, with an idea of what \nyour design might be. I would counter that from an  ",
    "start": "326368",
    "end": "339120"
  },
  {
    "text": "engineering principle is that you start off with \na model like that and assume that it's wrong.  ",
    "start": "339120",
    "end": "343600"
  },
  {
    "text": "That's the step to engineering for me. \nSo you assume that it's wrong and then   you work in a way so that when you find \nout where it's wrong you can correct it. ",
    "start": "344720",
    "end": "354000"
  },
  {
    "text": "Yeah, right. And that's very different to big \ndesign up front, because when people did big   design upfront all those years ago they assumed \nthey were right, and they assumed that a blueprint  ",
    "start": "354000",
    "end": "362320"
  },
  {
    "text": "to come up with was the thing they should \nalways aim for. So I think we're saying,   have a starting point and be prepared for that \nto change, and of course, DevOps and CI and CD  ",
    "start": "362320",
    "end": "371280"
  },
  {
    "text": "give us the tools to make those changes easier \nif you have good architecture in the first place. Okay, so what are the stuff that you would focus \non first? If you know where you wanna go in the  ",
    "start": "371280",
    "end": "382720"
  },
  {
    "start": "376000",
    "end": "862000"
  },
  {
    "text": "long term and what kind of architecture you \nwouldn't need, what kind of design you wouldn't   need to support the final product, but you're \nnot gonna build all of it at once, right? What  ",
    "start": "382720",
    "end": "392800"
  },
  {
    "text": "are the non-negotiables? What's the stuff that you \nalways need, even if you start out with your first  ",
    "start": "392800",
    "end": "399759"
  },
  {
    "text": "version that you're pushing out?\nDo you mind if I take that first? Because   I think I can set you up for fleshing more detail.\nYeah, that's fine. Go for it. ",
    "start": "399760",
    "end": "407715"
  },
  {
    "text": "So from an engineering point of view, the \nthings that I would describe are all about   managing complexity. I would start to try and \nidentify ways of compartmentalizing the system so  ",
    "start": "407715",
    "end": "419680"
  },
  {
    "text": "that I'm able to understand the pieces and change \nthem without affecting other parts of the system.  ",
    "start": "419680",
    "end": "425919"
  },
  {
    "text": "I would say that's a deeply profound and \nimportant aspect of architecture and design.  ",
    "start": "425920",
    "end": "432000"
  },
  {
    "text": "And then, if you're able to do that, so if you're \nable to build systems that are more modular,  ",
    "start": "432560",
    "end": "437680"
  },
  {
    "text": "more cohesive, good separation of concerns, good \nlines of abstraction, tending towards being more  ",
    "start": "438320",
    "end": "444480"
  },
  {
    "text": "loosely coupled between those piecess, that's the \nkind of defense that you then have to allow you to  ",
    "start": "444480",
    "end": "452400"
  },
  {
    "text": "find out you screwed up and made \na mistake and change things, and   manage, make the code a habitable space that \nyou can change. And I think Simon's stuff, as  ",
    "start": "453360",
    "end": "463200"
  },
  {
    "text": "I understand it, takes that, and gives you tools \nthat allow you to achieve those kinds of ends. ",
    "start": "463200",
    "end": "468240"
  },
  {
    "text": "Yeah, I was gonna say, it's literally the same \nthing. So Grady Booch has a great definition   of software architecture where he says, \"Software \narchitecture is about the significant decisions”.  ",
    "start": "468240",
    "end": "476080"
  },
  {
    "text": "All of that stuff is significant decisions. \nIt's your overriding modularity strategy,  ",
    "start": "476720",
    "end": "483920"
  },
  {
    "text": "whether you're building a monolith or \nsome microservices, something in between.   And again, it's, how do we make this thing so \nthat we can change it in the future without  ",
    "start": "483920",
    "end": "491680"
  },
  {
    "text": "having this whole blast radius effect that \nyou might change it and everything blows up?  And I'd argue to some degree that architecture is \nnearly all about that management of complexity.  ",
    "start": "491680",
    "end": "503039"
  },
  {
    "text": "It allows us to build systems that are beyond \nthe scale that we can hold in our heads. ",
    "start": "503040",
    "end": "507040"
  },
  {
    "text": "Or at least a part of it of the system \nthat you can hold in your head, right?  Yeah, you compartmentalize it so \nthat each piece fits in your head. ",
    "start": "508240",
    "end": "515360"
  },
  {
    "text": "Yeah, okay. We've seen a lot of the \npractices from the big players that   have moved into the common domain. If we look \nat technologies like containers, orchestration,  ",
    "start": "515360",
    "end": "526720"
  },
  {
    "text": "more than ever the ways that we can \ndo pipelines, has been commoditized.   You can do that on so many platforms now. With \ngreat power also comes great responsibility.  ",
    "start": "529120",
    "end": "540400"
  },
  {
    "text": "Do you think that people are hurting \nthemselves with these technologies as well? ",
    "start": "542400",
    "end": "548240"
  },
  {
    "text": "I do.\nYeah, I do, too. And there's an elephant in   the room, so let's name the elephant. I think that \npeople get microservices wrong all of the time.  ",
    "start": "548240",
    "end": "557920"
  },
  {
    "text": "Like Simon, I'm an independent consultant, \nand most of the teams that I see,   that claim to be adopting microservices, aren't \nby the definition of microservices doing so.  ",
    "start": "564880",
    "end": "573360"
  },
  {
    "text": "If they're starting something new they start by \nassuming that they understand, what the services  ",
    "start": "576400",
    "end": "581840"
  },
  {
    "text": "are, creating a separate repo, and then \nstart working on each of those things.  What they've just done is build latency at the \npoint at which they want to iterate quickly in  ",
    "start": "582640",
    "end": "593280"
  },
  {
    "text": "order to be able to learn. So the other aspect of \nengineering is to optimize for learning. So you   want really fast, clear feedback. If my service \nis in one repository and Simon's is in another,  ",
    "start": "593280",
    "end": "604240"
  },
  {
    "text": "every time the conversation between those \nservices changes to the smallest degree... You're changing them in two places.\n...either I've gotta go and dip in his,  ",
    "start": "604240",
    "end": "610800"
  },
  {
    "text": "or he's gotta dip in mine, and it's a \nnightmare. If we put more than one big repo   we still have nice, service-oriented designs. \nBut probably 90% of the time, my idea, he will  ",
    "start": "610800",
    "end": "620480"
  },
  {
    "text": "tell me that I've screwed up his service.\nCan you do that, can you take that a step   further? And when you're starting out, the team is \nstill small, the company is still small, not just  ",
    "start": "620480",
    "end": "629680"
  },
  {
    "text": "put it all in one repo, like host it all in one \nprocess, or do you think that's a horrible idea? ",
    "start": "629680",
    "end": "635279"
  },
  {
    "text": "No, that would be my recommended starting \npoint for 95% plus of teams out there. I  ",
    "start": "635280",
    "end": "640560"
  },
  {
    "text": "did a talk at a GOTO conference a few years \nago called \"Modular Monolith,\" same thing.",
    "start": "640560",
    "end": "645840"
  },
  {
    "text": "I have a very similar talk.\nI think there are a few people   now with talks. They're finally becoming \nfashionable again. I was seeing the same  ",
    "start": "645840",
    "end": "652880"
  },
  {
    "text": "thing, a whole bunch of people have got \nthis, like, 10, 15-year-old Java legacy   application. It's a horrible mess, it's brittle, \nthey can't change it. And they say, \"We're gonna  ",
    "start": "652880",
    "end": "661440"
  },
  {
    "text": "convert to microservices.\" And what they do \nis they take their existing design thinking,   their approach to modularity, which is not \nvery good because that's what governs the mess,  ",
    "start": "661440",
    "end": "669520"
  },
  {
    "text": "and they're basically sticking JSON over HTTPS \nnetwork links between things in their monolith. ",
    "start": "669520",
    "end": "675440"
  },
  {
    "text": "That could have been in-process costs.\nYeah, right. And now the boundaries are wrong.   The boundaries are hard to change and you've got \nsomething which is lock-step deployable, brittle,  ",
    "start": "675440",
    "end": "683360"
  },
  {
    "text": "fragile, and slow. And they just don't get that \nthere's a very different mindset shift there. ",
    "start": "683360",
    "end": "688320"
  },
  {
    "text": "Don't get me wrong at a certain scale \nyou're gonna want separate services. ",
    "start": "688880",
    "end": "693440"
  },
  {
    "text": "Maybe. I mean, Facebook, Shopify, there are some \nbig modular monoliths out there. Shopify has got a   huge, big thing on their engineering blog over \nthe past few years about how they've changed  ",
    "start": "694480",
    "end": "703440"
  },
  {
    "text": "their Ruby on Rails monolith to become much more \nmodular because they were running into issues.  I'd argue that modularity is always good \nbut you don't necessarily need inter-process  ",
    "start": "703440",
    "end": "714720"
  },
  {
    "text": "communications all over the place, and often you \ndon't need multi-threading in lots of places where  ",
    "start": "714720",
    "end": "719920"
  },
  {
    "text": "people put it. Both of those things amp up the \ncomplexity by an order of magnitude at least. ",
    "start": "719920",
    "end": "728880"
  },
  {
    "text": "Not just the complexity, also how hard it will \nbe to debug, how hard it will be to trace. ",
    "start": "728880",
    "end": "735680"
  },
  {
    "text": "And even just deploy. \nYeah.  Just to figure out, what is my software doing in \nproduction, that becomes extremely hard. Is that  ",
    "start": "736800",
    "end": "744240"
  },
  {
    "text": "something that you take on from the get-go, \nlike, visibility of your systems? To me,  ",
    "start": "745120",
    "end": "751360"
  },
  {
    "text": "that always felt like one of the most important \nissues that a lot of people seem to be forgetting.  This is why some big organizations who are \nvery microservice focused give their teams  ",
    "start": "751360",
    "end": "763520"
  },
  {
    "text": "autonomy but they have internal engineering \nand platform teams that bootstrap the product   teams and service teams. So literally you can \npull something out of their internal repo,  ",
    "start": "763520",
    "end": "770480"
  },
  {
    "text": "bootstrap your service, and you get observability \nand monitoring and deployability for free into the  ",
    "start": "771040",
    "end": "777120"
  },
  {
    "text": "production GCP environment. And \nall of that stuff is taken care of   in a standardized way, and that's fabulous.\nThe other thing that microservices give you if you  ",
    "start": "777120",
    "end": "787440"
  },
  {
    "text": "do it well and at scale is it's the most scalable \nway of building big systems. Because you trade off  ",
    "start": "787440",
    "end": "796000"
  },
  {
    "text": "consistency for independence. So this is the \nmost distributed approach to development,  ",
    "start": "798080",
    "end": "804160"
  },
  {
    "text": "but it means that if I'm writing a microservice \nand Simon's writing a microservice, I can deploy  ",
    "start": "804160",
    "end": "810319"
  },
  {
    "text": "mine without testing it against his. That's how \ngood the abstraction is between them, and that's  ",
    "start": "810320",
    "end": "815600"
  },
  {
    "text": "kind of table stakes. You can't really count it as \nmicroservices if you can't do that, because that's   the decoupling step. That’s the point at which we \nno longer care about the details. That means the  ",
    "start": "815600",
    "end": "827520"
  },
  {
    "text": "protocol has gotta be stable between it. So you've \ngot to be fairly sophisticated in design terms to   be able to get to those stable protocols.\nBut that requires some really competent  ",
    "start": "827520",
    "end": "836639"
  },
  {
    "text": "architects because that requires both the business \nknowledge and technical knowledge to define those  ",
    "start": "836640",
    "end": "843120"
  },
  {
    "text": "boundaries in the right places. Because otherwise, \nit will be working against you, am I right? ",
    "start": "843760",
    "end": "849200"
  },
  {
    "text": "Yes.\nAnd that's why most teams should   not do this because it's hard.\nYes.  Exactly. Are there any tips that you can \ngive people who are starting out in this? ",
    "start": "849200",
    "end": "857200"
  },
  {
    "text": "I'd go talk to Sam Newman. He's got a \nton of tips out there, a couple of books. I'd talk about a few things. As well as \nindependently deployable, the other defining  ",
    "start": "858000",
    "end": "870880"
  },
  {
    "start": "862000",
    "end": "1320000"
  },
  {
    "text": "characteristic of microservices is that they're \naligned with the Bounded context, and there's a   good reason for that. So Bounded context is \nan idea from Domain-Driven Design, in which  ",
    "start": "870880",
    "end": "879120"
  },
  {
    "text": "there's an area of the problem in which a concept \nis distinct. You might understand, let's imagine  ",
    "start": "880160",
    "end": "886560"
  },
  {
    "text": "we're buying books. The shopping cart is gonna \nhave the notion of a book and the inventory  ",
    "start": "886560",
    "end": "893040"
  },
  {
    "text": "control is gonna have a notion of the delivery.\nYeah, but it's a different book for everyone.  It's different.\nIt has different traits. ",
    "start": "893040",
    "end": "898958"
  },
  {
    "text": "The delivery probably needs \nto know the weight of it.   The shopping cart probably wants to have \nthe picture of it or the detail of the  ",
    "start": "898958",
    "end": "904560"
  },
  {
    "text": "author or something. They're different but \nthey're talking about the same thing. So   that's the difference between two different \nBounded contexts. If you align your services  ",
    "start": "904560",
    "end": "915360"
  },
  {
    "text": "with a Bounded context, those are naturally \nmore decoupled points in the architecture of   the system. It's not 100% but it's a good starting \npoint. You're likely to get away with it more if  ",
    "start": "916160",
    "end": "926640"
  },
  {
    "text": "each of these services is aligned with these \nBounded contexts rather than not, I would   argue. And then you need to still go back to what \nwe were saying earlier. You need to iterate fast  ",
    "start": "927360",
    "end": "937840"
  },
  {
    "text": "to find out all the ways where you screwed \nup and you got it wrong and you got your   communications too tightly coupled until \nit's stable, and then you can break them out.",
    "start": "937840",
    "end": "945519"
  },
  {
    "text": "Is that something you look for in your \narchitecture as well, because you brought up DDD,  ",
    "start": "947760",
    "end": "952960"
  },
  {
    "text": "this alignment between what the business domain \nis and what you actually see represented in code? ",
    "start": "952960",
    "end": "958320"
  },
  {
    "text": "Sometimes. So I'm the creator of the C4 \nmodel, which is a hierarchical way to draw   architecture diagrams, and one of the questions \nI always get is, is there a one-to-one mapping  ",
    "start": "963280",
    "end": "972160"
  },
  {
    "text": "between things like a Bounded context on two \nthings on the software architecture diagram?   And sometimes there is. Sometimes those concepts, \nas you say, do map really nicely, and other  ",
    "start": "972160",
    "end": "980720"
  },
  {
    "text": "times you'll often find a Bounded context spans \nmultiple software systems, or perhaps multiple   C4 model containers, like different services.\nSo that whole mapping between the domain world and  ",
    "start": "980720",
    "end": "992320"
  },
  {
    "text": "the architecture world, the technical aspects of \nthe architecture world don't often line up, and I  ",
    "start": "992320",
    "end": "998480"
  },
  {
    "text": "think that's okay. But I think people perhaps need \nto appreciate that that's not always the case, and  ",
    "start": "998480",
    "end": "1004480"
  },
  {
    "text": "there are too many people saying, \"I must \nhave a complete one-to-one mapping between   stuff in DDD and stuff in my architecture”.\nWell, it's a nice utopian image but I've  ",
    "start": "1004480",
    "end": "1013440"
  },
  {
    "text": "never seen it in reality.\nIt is. No, me neither.  I think there's another aspect to this. I think \na lot in terms of the separation of accidental  ",
    "start": "1013440",
    "end": "1025920"
  },
  {
    "text": "and essential complexity in architecture, and \nin my ideal architecture, I'm going to have  ",
    "start": "1025920",
    "end": "1032800"
  },
  {
    "text": "little bubbles of domain logic that know nothing \nabout the accidental complexity of the system.  ",
    "start": "1032800",
    "end": "1038319"
  },
  {
    "text": "And then I'm gonna build the accidental \ncomplexity, persistence clustering, durability  ",
    "start": "1038320",
    "end": "1044959"
  },
  {
    "text": "of messaging, all those sorts of things into the \ninfrastructure that support those services, and  ",
    "start": "1044960",
    "end": "1051600"
  },
  {
    "text": "therefore, they're isolated from it. If you can \nget to that, that gives you a fantastic degree of  ",
    "start": "1051600",
    "end": "1058320"
  },
  {
    "text": "flexibility and freedom because you're simulating \nthe problem domain in your domain logic. ",
    "start": "1058320",
    "end": "1062720"
  },
  {
    "text": "I was involved in writing something called \"The \nReactive Manifesto\" describing reactive systems,  ",
    "start": "1066000",
    "end": "1070880"
  },
  {
    "text": "and I was involved in building a financial \nexchange on the model I just described. And it was  ",
    "start": "1071840",
    "end": "1077200"
  },
  {
    "text": "the most beautiful big system to work on that I've \never seen. Because each of these little bubbles  ",
    "start": "1077200",
    "end": "1084080"
  },
  {
    "text": "of domain logic was single-threaded so they were \ndead simple. They were stateful. You didn't have   to worry about anything, and everything else was \npersistence clustering, scalability, resilience,  ",
    "start": "1084080",
    "end": "1093520"
  },
  {
    "text": "all of those things, were outside.\nWe're out of the codebase?  They were not out of the code base, \nout of the domain part of the codebase.",
    "start": "1093520",
    "end": "1101039"
  },
  {
    "text": "Oh, the domain part. Okay. One of the things \nI've been playing with is the Distributed  ",
    "start": "1101040",
    "end": "1106560"
  },
  {
    "text": "Application Runtime, DAPr. I don't \nknow if you've looked at that?  I haven't looked at that. No.\nI haven't, no. ",
    "start": "1107120",
    "end": "1114800"
  },
  {
    "text": "The closest commercially available \nstuff to it that I've seen   are actor-based systems of one form \nor another, Erlang, Akka, Oracle,  ",
    "start": "1114800",
    "end": "1124000"
  },
  {
    "text": "those kinds of things.\nI just did a talk about Akka.  Yeah.\nThe cool thing they do in the DAPrs,  ",
    "start": "1124000",
    "end": "1130400"
  },
  {
    "text": "you're right, your services against a package \nthat has a couple of abstractions. You have  ",
    "start": "1130400",
    "end": "1135840"
  },
  {
    "text": "abstracted key value storage, you have abstracted \nmessaging based on logical endpoints. But all  ",
    "start": "1136400",
    "end": "1143760"
  },
  {
    "text": "of it in your code is abstracted, and in your \ndevelopment machine, you could run the services.   It works on Kubernetes with sidecar containers, so \nyou always talk to the sidecar container and that  ",
    "start": "1143760",
    "end": "1153520"
  },
  {
    "text": "talks to the other services through gRPC.\nI think what I'm describing is a step  ",
    "start": "1153520",
    "end": "1158880"
  },
  {
    "text": "further in abstraction than that.\nEven further than that?  Yeah.\nOkay.  So for example, I could have an account \nservice that took a message that said,  ",
    "start": "1160160",
    "end": "1171280"
  },
  {
    "text": "\"Create an account,\" and it would create an \naccount in the internal state of the actor.   And it would send out a message maybe saying, \n\"Account created,\" or something like that.  ",
    "start": "1171280",
    "end": "1178879"
  },
  {
    "text": "No storage, no persistence anywhere else, but no \nnotion of a database. But it was in the messaging,  ",
    "start": "1180080",
    "end": "1189039"
  },
  {
    "text": "so I could just record the message \nand then replay the message, and   that kind of thing to get back to the same state. \nOkay, so thinking about things in an event-sourced  ",
    "start": "1189040",
    "end": "1198640"
  },
  {
    "text": "way, and the state as a result of events.\nYeah, that's part of the persistence of state.  ",
    "start": "1198640",
    "end": "1204880"
  },
  {
    "text": "It's part of the accidental complexity. It's \nnot the only architecture, of course. That'd  ",
    "start": "1204880",
    "end": "1210560"
  },
  {
    "text": "be a ridiculous thing to say, but it's a very nice \none. I've just made a video on my YouTube Channel  ",
    "start": "1210560",
    "end": "1217760"
  },
  {
    "text": "about this, but I think it's an interesting \nidea in terms of further abstracting the cloud.  ",
    "start": "1217760",
    "end": "1229520"
  },
  {
    "text": "There's moves towards stateful things of just \nstateful serverless. And they're not doing it   very well yet in my impression, but I think \nif you could imagine something like that you  ",
    "start": "1231920",
    "end": "1240000"
  },
  {
    "text": "could imagine offloading a lot of the accidental \ncomplexity to the cloud services, sort of, further  ",
    "start": "1240000",
    "end": "1247280"
  },
  {
    "text": "raising the bar. Because not everybody is an \nexpert architect, and not everybody needs to think  ",
    "start": "1247280",
    "end": "1252560"
  },
  {
    "text": "about all of those things at the level of detail \nthat we do at the moment potentially, I think.",
    "start": "1252560",
    "end": "1257200"
  },
  {
    "text": "But perhaps they should do. I'm gonna rein this \nconversation back in a second because although I'm   a big fan of abstraction, and particularly \nabstractions leading to high modularity,  ",
    "start": "1258000",
    "end": "1267200"
  },
  {
    "text": "do you remember how enterprise Java has been \nsome all those years ago? So we had remotable   enterprise Java beans, and then somebody \nsaid, \"Well, we could put that same thing  ",
    "start": "1267840",
    "end": "1275840"
  },
  {
    "text": "locally and you could use the same interface, \nand you could have a local and a remote call.\"   And that abstraction was fantastic but \nmany people tend to forget that actually  ",
    "start": "1275840",
    "end": "1285520"
  },
  {
    "text": "there could be a network call here at runtime \nwhich would have massive performance impact.  So I think abstractions are great but \ndevelopment teams do need to understand what  ",
    "start": "1285520",
    "end": "1293840"
  },
  {
    "text": "those abstractions are, and what the tradeoffs of \nthose abstractions are. And to come full cycle,   back to the earlier conversation, \nthat's exactly what your architecture  ",
    "start": "1293840",
    "end": "1302240"
  },
  {
    "text": "is about up front. It's like, where do we want \nthese networks to be, and what are the tradeoffs?  Absolutely. I wouldn't disagree with that at all.\nI would've done the same thing but in WCF and  ",
    "start": "1302240",
    "end": "1313920"
  },
  {
    "text": "not enterprise.\nWCF, same thing.  It's the same story. I'm a C# kind of \nguy. In the recent projects that you've  ",
    "start": "1313920",
    "end": "1323279"
  },
  {
    "start": "1320000",
    "end": "1500000"
  },
  {
    "text": "done, what are some takeaways that we could \nget, above all, to check that you don't do this?  ",
    "start": "1323280",
    "end": "1331120"
  },
  {
    "text": "What was the single move that you see a lot that \nends up hurting people, apart from microservices?",
    "start": "1331120",
    "end": "1339440"
  },
  {
    "text": "From my perspective it's people just jumping on \nthe first solution they come to and not really   considering the tradeoffs. So that's why I'm a big \nfan of doing some design up front and also having  ",
    "start": "1340800",
    "end": "1349680"
  },
  {
    "text": "a good, simple way to visualize your potential \nstarting point in that potential architecture.  ",
    "start": "1349680",
    "end": "1355280"
  },
  {
    "text": "Because then you can evaluate it, dry run it, \nreview it without writing lots of code. So yeah,   just make sure you have a clearer idea of your \nstarting point before writing tons of code. ",
    "start": "1355280",
    "end": "1364159"
  },
  {
    "text": "I think I've got two. The first one is, I \nthink, echoing what you've just said, Simon.  ",
    "start": "1365120",
    "end": "1370640"
  },
  {
    "text": "My perception of most software systems that \nI see is not that they're badly designed,   it's that there is no design. They're just, \nkind of, big balls of stuff. There's no obvious  ",
    "start": "1372800",
    "end": "1382720"
  },
  {
    "text": "organizing principles that you can discern.\nFile, New Project, and let's start hacking away.  Yeah, and that's problematic. There's no \nmanagement complexity. You've just got a  ",
    "start": "1382720",
    "end": "1390640"
  },
  {
    "text": "big ball of mud. And so I think as an industry \nwe don't talk about design enough. We don't do  ",
    "start": "1390640",
    "end": "1397600"
  },
  {
    "text": "enough design. We don't think about it. We argue \nall the time about whether it's C#, or Java,   or whatever else. That doesn't matter as much \nas good design versus no design, or bad design. ",
    "start": "1397600",
    "end": "1408800"
  },
  {
    "text": "Is there maybe a problem in our industry then?\nNot one.  Yeah. I agree, but let me finish \nthe question. It's about the way we  ",
    "start": "1409680",
    "end": "1422480"
  },
  {
    "text": "communicate about things.\nYes.  You see lots of conferences where we \ntalk about latest version of 2x, or  ",
    "start": "1422480",
    "end": "1430799"
  },
  {
    "text": "this small building block as one. And \nthen you have the very high-level stuff,   where on a very big scale we want to be doing \nthis. In the lifetime of a developer, from when  ",
    "start": "1431360",
    "end": "1443679"
  },
  {
    "text": "he graduates college until the point where \nyou guys are at, like, expert architects,  ",
    "start": "1443680",
    "end": "1448960"
  },
  {
    "text": "there are so many steps to take and there are \nskills that you need to learn. But I feel like   the path to there is not something that is \noften communicated. And a lot of the blocks  ",
    "start": "1448960",
    "end": "1460879"
  },
  {
    "text": "in the middle, like the run-of-the-mill solution \narchitecture for small-to-medium enterprises is  ",
    "start": "1460880",
    "end": "1468800"
  },
  {
    "text": "something a lot of people have to learn on their \nown because there's not a lot of communication   about it. Because those are not sexy subjects \nto give conference talks about, for instance. ",
    "start": "1468800",
    "end": "1478400"
  },
  {
    "text": "Yes, that's why we have so much work. There's \na complete lack of any fundamental teaching,  ",
    "start": "1478400",
    "end": "1484560"
  },
  {
    "text": "and training, and skills in most organizations. \nAnd you're right, when you come to conferences,   all the new hyped trendy stuff sells. Our \nstuff, it's not boring, but it's kind of the  ",
    "start": "1484560",
    "end": "1494960"
  },
  {
    "text": "essential fundamentals that people really need \nto know, but it doesn't sell seats in cinemas. If you'll forgive me mentioning one of \nyour competitors, I won't name them.  ",
    "start": "1494960",
    "end": "1502960"
  },
  {
    "start": "1500000",
    "end": "1736000"
  },
  {
    "text": "One of your competitors in organizing conferences.  I don't work for Trifork.\nNo, he does over there.  ",
    "start": "1502960",
    "end": "1508960"
  },
  {
    "text": "One of your competitors had an adoption graph I \nsaw a few years ago and it was talking about all  ",
    "start": "1511200",
    "end": "1519120"
  },
  {
    "text": "of these new, sexy technologies, and all this kind \nof stuff, and early adopters doing these sorts of  ",
    "start": "1519120",
    "end": "1524400"
  },
  {
    "text": "things. And the late majority was where continuous \ndelivery was, and I just kind of fell on the floor  ",
    "start": "1524400",
    "end": "1529600"
  },
  {
    "text": "laughing because I was just saying, \"Really? You \nthink that's what's the state of the industry is,  ",
    "start": "1529600",
    "end": "1536880"
  },
  {
    "text": "that continuous delivery is normal?\" It's not.\nIt's not.  No.\nAnd so what most organizations   talk about in terms of these engineering \ndisciplines in continuous delivery is that... ",
    "start": "1536880",
    "end": "1544000"
  },
  {
    "text": "What do they say then, because \nthey have a pipeline to deploy   their stuff they're doing continuous delivery?\nYes. If you're in Jenkins you're doing continuous  ",
    "start": "1544000",
    "end": "1551360"
  },
  {
    "text": "delivery and you're not. Continuous delivery is \nworking so your software is in a releasable state  ",
    "start": "1551360",
    "end": "1557600"
  },
  {
    "text": "all of the time, that's it. And if you adopt that \ndiscipline it drives you in this direction for  ",
    "start": "1558480",
    "end": "1566799"
  },
  {
    "text": "being much more disciplined, caring much more \nabout design, and architecture, and all those   sorts of things. Because you can't do it if you \ndon't do those things. It's just not feasible.  ",
    "start": "1566800",
    "end": "1576080"
  },
  {
    "text": "And we don't have many things like that. If we \ncame up with something that genuinely counted  ",
    "start": "1576080",
    "end": "1583760"
  },
  {
    "text": "as software engineering it would make us build \nbetter software faster. Because if it didn't,   we wouldn't count as engineering. Continuous \ndelivery does that. That's what the data says. ",
    "start": "1583760",
    "end": "1593040"
  },
  {
    "text": "But you can't do continuous delivery \nwithout having your team involved in  ",
    "start": "1593840",
    "end": "1599360"
  },
  {
    "text": "running the system in production.\nWell, you can do that  ",
    "start": "1600640",
    "end": "1606000"
  },
  {
    "text": "but it's not optimal. It's better. What you need \nto do is you need to close the feedback loop, so  ",
    "start": "1606720",
    "end": "1614400"
  },
  {
    "text": "you need the team to be monitoring, understanding \nwhat's happening in production, even if there are   other people that are looking after it.\nYeah, they don't have to set everything  ",
    "start": "1614400",
    "end": "1620240"
  },
  {
    "text": "up but at least they have to not, like in \nthe old days, develop a system, throw it   over the wall and it's ops' problem now.\nSo my advice, I'm steering us  ",
    "start": "1620240",
    "end": "1631039"
  },
  {
    "text": "off topic, which I apologize for, but my advice \nfor continuous delivery is that you aim to get   to a releasable state once every hour. You can't \ndo that if you don't have a great architecture.  ",
    "start": "1631920",
    "end": "1642640"
  },
  {
    "text": "And you can't do that if there's waste in the \nprocess. You've got to remove waste out of the   process. So every time there's a hand over between \ndifferent groups of people and stuff like that,  ",
    "start": "1643200",
    "end": "1650320"
  },
  {
    "text": "that's waste. So you have to get down to these \nsmall, focused teams to be able to do this,   and they need to know a lot of stuff. Trying \nto drag this back to architecture for a minute,  ",
    "start": "1650320",
    "end": "1660159"
  },
  {
    "text": "I think that one of the problems in our \nindustry is that we get so blind-sided   by sexy technology that we lose our focus.\nI saw some speakers call it, and it's a term  ",
    "start": "1661680",
    "end": "1673440"
  },
  {
    "text": "I've always used as well, magpie development.\nYes.  Shiny things.\nYeah, like the shiny thing. \"Oh,  ",
    "start": "1673440",
    "end": "1680240"
  },
  {
    "text": "shiny, I wanna have that. I'm gonna use it \nwhether it's appropriate for my problem or not.\"",
    "start": "1680240",
    "end": "1685520"
  },
  {
    "text": "I did a little exercise recently for a book that I \njust finished writing where I wrote a simple CRUD  ",
    "start": "1685520",
    "end": "1692480"
  },
  {
    "text": "application in the latest sexy web technologies, \nand I wrote one in the technologies of 1995.  ",
    "start": "1692480",
    "end": "1699600"
  },
  {
    "text": "And in the code that I wrote and needed to \ndo the same job, there was about a quarter  ",
    "start": "1700560",
    "end": "1706560"
  },
  {
    "text": "of the code in the technology of 1995 \nas it was in Angular and that tool set.  ",
    "start": "1706560",
    "end": "1713120"
  },
  {
    "text": "Now the Angular stuff gave me stuff that I \ndidn't have in the 1995 version. It gave me   more browser indepentence and all those sorts of \nthings. There were some benefits. I'm not saying  ",
    "start": "1713120",
    "end": "1722000"
  },
  {
    "text": "there's no progress, but there's nowhere near \nthe progress that we assume there is because   we're too close to the hardware. And they've \ngot this exponential progress, we don't.  ",
    "start": "1722000",
    "end": "1729520"
  },
  {
    "text": "Software development doesn't move at that \npace, and there are fundamentals that matter.",
    "start": "1730720",
    "end": "1735039"
  },
  {
    "start": "1736000",
    "end": "1907000"
  },
  {
    "text": "Something that has bothered me when we're \ndoing consulting business in Belgium and DevOps  ",
    "start": "1737600",
    "end": "1746720"
  },
  {
    "text": "has become a job title or a function description \nfor someone. I mean, \"We need a DevOps guy.\"  ",
    "start": "1746720",
    "end": "1757760"
  },
  {
    "text": "What's your take on that?\nOh, it's the same old story in IT. Something  ",
    "start": "1760880",
    "end": "1766480"
  },
  {
    "text": "comes along and there's a lot of good stuff \nbehind it. The masses get ahold of it and don't   really understand it and just copy what they \nthink it means. We've seen this with agile.  ",
    "start": "1766480",
    "end": "1774480"
  },
  {
    "text": "We've seen it with everything haven’t we?\nFunnily enough, if you forgive me touting   my YouTube Channel, I'm publishing a video on \nthat topic this evening on my YouTube Channel,  ",
    "start": "1774480",
    "end": "1784080"
  },
  {
    "text": "7pm UK time. But one of the things that I say \nin that is I've been fortunate in my career  ",
    "start": "1784080",
    "end": "1794880"
  },
  {
    "text": "to be close to the birth of some reasonably \nsignificant ideas. I was involved with the  ",
    "start": "1794880",
    "end": "1800240"
  },
  {
    "text": "people that invented DDD, and DevOps, and a \nwhole bunch of things. And my biggest takeaway  ",
    "start": "1800240",
    "end": "1809040"
  },
  {
    "text": "from what's going through those inventors' heads, \nthose creators' heads is we didn't mean that.  ",
    "start": "1811680",
    "end": "1816720"
  },
  {
    "text": "There's this, kind of, dilution effect. \nAs ideas become more popular, everybody   just reads the words and assumes \nthey know what it's talking about. ",
    "start": "1817600",
    "end": "1824000"
  },
  {
    "text": "Everybody thinks that continuous delivery is about \ndeploying stuff into production all of the time,   frequently. It's not. It's working so your \nsoftware is always in a releasable state.  ",
    "start": "1824000",
    "end": "1830880"
  },
  {
    "text": "Yeah, and getting the whole \nteam to care about that.  Everybody thinks that microservices is \nabout having little things talking REST  ",
    "start": "1830880",
    "end": "1838640"
  },
  {
    "text": "APIs in a separate repo, and it's not. \nIt's nothing to do with those things,   and they're all like that. And I think we fall \ndown. I dislike the DevOp. I'm sometimes referred  ",
    "start": "1838640",
    "end": "1852480"
  },
  {
    "text": "to as one of the people that helped popularize \nand create DevOps, and I do dislike the DevOps   term because it's so easily misunderstood. \nBut the idea is absolutely spot on. The  ",
    "start": "1852480",
    "end": "1862480"
  },
  {
    "text": "practices are extremely good. DevOps evolved, \ncontinuous delivery started a little bit sooner,  ",
    "start": "1862480",
    "end": "1870480"
  },
  {
    "text": "earlier than DevOps, but they co-evolved from \ndifferent angles. DevOps could be from operations,  ",
    "start": "1870480",
    "end": "1876080"
  },
  {
    "text": "continuous delivery coming from development. \nAnd in the middle they're talking about exactly   the same ideas to a large degree.\nI think they only meet in the middle  ",
    "start": "1876080",
    "end": "1884080"
  },
  {
    "text": "if you understand both sides of the problem.\nWhich was what the whole thing was about in  ",
    "start": "1884080",
    "end": "1890320"
  },
  {
    "text": "the first place.\nIt was.  Exactly. It's like bringing \nthe two sides together.  Climb over across the wall. That's \nexactly what it's designed to stop.  Yeah, like, break down the wall, make \nit one team. That's what it's about,  ",
    "start": "1890320",
    "end": "1897360"
  },
  {
    "text": "not about, like, we need to hire a guy \nthat knows about Puppet and Kubernetes.  No, no, it's not that.\nWhich is what this has turned into in any case.",
    "start": "1897360",
    "end": "1903760"
  },
  {
    "text": "This is what it has turned into, sadly, sadly so. \nSo in Alan Kay's opening keynote he was speaking  ",
    "start": "1903760",
    "end": "1912160"
  },
  {
    "start": "1907000",
    "end": "2363000"
  },
  {
    "text": "about and drawing some similarities between \nthe software world and the world where they  ",
    "start": "1912160",
    "end": "1917280"
  },
  {
    "text": "build big structures. You have an architect \nthat designs the whole thing up front, but  ",
    "start": "1917280",
    "end": "1922640"
  },
  {
    "text": "then you have the engineering teams that have to \ncome in and actually execute on the architecture  ",
    "start": "1922640",
    "end": "1928480"
  },
  {
    "text": "and make it so that the bridge doesn't collapse \nwhen you're driving your car across it.  ",
    "start": "1929680",
    "end": "1933840"
  },
  {
    "text": "In that world, those things go really well most \nof the time, and in software we seem to be doing a  ",
    "start": "1934960",
    "end": "1940399"
  },
  {
    "text": "terrible job. Are there any engineering takeaways \nfrom an architecture standpoint that we can  ",
    "start": "1940400",
    "end": "1946320"
  },
  {
    "text": "give the audience to incorporate \nin their software systems? I think that there are. That is the theme in \none of my talks at the conference, to be honest,  ",
    "start": "1948560",
    "end": "1960000"
  },
  {
    "text": "so I'm touting my own wares. But I think \nthat as a discipline of discovery learning,  ",
    "start": "1960000",
    "end": "1967760"
  },
  {
    "text": "we should be optimizing to be experts at that, \nand as a discipline of managing complexity, we  ",
    "start": "1967760",
    "end": "1973600"
  },
  {
    "text": "should optimize for that. Good architecture plays \nits part significantly in both of those things.  ",
    "start": "1973600",
    "end": "1982320"
  },
  {
    "text": "We need to be able to get fast, efficient feedback \non the quality of our work. We need to work  ",
    "start": "1983200",
    "end": "1989360"
  },
  {
    "text": "so that we can make progress incrementally and \niteratively. And we need to build modular systems  ",
    "start": "1989360",
    "end": "1995040"
  },
  {
    "text": "so they can work on one part of the system without \nbreaking other parts of the system, and so on. ",
    "start": "1995040",
    "end": "1999520"
  },
  {
    "text": "Part of Alan Kay's definition \nof software engineering is that   engineering, in general, was about making \nthings and repairing things in principled ways.  ",
    "start": "2004720",
    "end": "2013920"
  },
  {
    "text": "And I quite liked that as a takeaway. And I think \nthat the things that I'm talking about in these  ",
    "start": "2013920",
    "end": "2020400"
  },
  {
    "text": "optimizing for learning, optimizing for \nmanaging complexity are principles on which   we could start to build a genuine discipline \nfor software engineering in our profession,  ",
    "start": "2020400",
    "end": "2028880"
  },
  {
    "text": "and I think we need it.\nFrom my perspective, it's really tempting  ",
    "start": "2028880",
    "end": "2036000"
  },
  {
    "text": "to apply that same technique to software where we \ndo all the design and we have a very predictable  ",
    "start": "2037600",
    "end": "2042960"
  },
  {
    "text": "way to build the thing that we want to build. And \nyou're right, that's how many building projects   work. There's a great talk, again, I think at a \nGOTO conference actually by Mary Shaw, and Mary  ",
    "start": "2042960",
    "end": "2051760"
  },
  {
    "text": "works for the Software Engineering Institute. And \nshe does this whole interesting comparison between   the building world and the software world, and she \nbasically says, \"Software is not engineering yet,\"  ",
    "start": "2051760",
    "end": "2060480"
  },
  {
    "text": "cue all your stuff. And she says, \"We're still \nin the early craft and artisanal phases.\"  ",
    "start": "2061040",
    "end": "2066080"
  },
  {
    "text": "And again, a lot of that is because \nit's a very immature industry.  We are learning a lot as we go along. Technologies \nare changing and I don't think we've found some of  ",
    "start": "2066080",
    "end": "2073760"
  },
  {
    "text": "those underlying fundamentals and principles \nyet that are broadly applicable regardless  ",
    "start": "2073760",
    "end": "2079040"
  },
  {
    "text": "of the technologies and the techniques \nthat we're using to build our systems.I'm  ",
    "start": "2079040",
    "end": "2082320"
  },
  {
    "text": "not a building architect or a structural engineer \nso I might have this completely wrong, but  ",
    "start": "2100400",
    "end": "2103680"
  },
  {
    "text": "my idea is that when you design a structure \nyou have to do the modeling on the structure  ",
    "start": "2105520",
    "end": "2110960"
  },
  {
    "text": "around stresses, and strains, and load \nweights, and all that sort of stuff to   make sure it doesn't fall down. \nI think what's interesting is,   once you start to factor in things like \ncontinuous integration, continuous delivery,   DevOps, things like continuous testing, this whole \nconcept of fitness functions in the \"Building   Evolutionary Architectures\" book, and that's \nthe same thing. And for me, fitness functions  ",
    "start": "2110960",
    "end": "2117040"
  },
  {
    "text": "are a way to start doing some of that. So if you \nwant to build something that's very low latency   you build yourself a bunch of fitness functions \nthat assert whether you can hit those latency  ",
    "start": "2117040",
    "end": "2126560"
  },
  {
    "text": "targets, for example. So yeah, I'd like \nto see more teams doing stuff like that.  ",
    "start": "2126560",
    "end": "2130560"
  },
  {
    "text": "The downside of it is it's hard, and it \ntakes effort, and it costs money, and you   have to get some benefits of doing it, I guess.\nI think we in our industry have a dramatically  ",
    "start": "2132000",
    "end": "2142880"
  },
  {
    "text": "significant advantage that if you are \nbuilding a bridge or something like that  ",
    "start": "2142880",
    "end": "2150079"
  },
  {
    "text": "you probably computer model it to do all that \nstress calculation, all that sort of stuff.   And you'd test the model and all that kind of \nstuff. Our model is the real thing, so there's  ",
    "start": "2150080",
    "end": "2161520"
  },
  {
    "text": "no empirical discovery that's required after that. \nThe other significant, magnificent advantage that   we have is that production for us is free. So once \nyou've done all of that discovery, and learning,  ",
    "start": "2161520",
    "end": "2172000"
  },
  {
    "text": "and design, and you've got your sequence of \nbytes that represent your system, however big,  ",
    "start": "2172000",
    "end": "2178240"
  },
  {
    "text": "or complicated, or distributed it is, you press \na button and you clone those sequence of bytes   for essentially free. And I think that's \na dramatic advantage that we have. And so  ",
    "start": "2178240",
    "end": "2187760"
  },
  {
    "text": "I agree with Simon that software development in \ngeneral is not yet in our engineering practice,  ",
    "start": "2188640",
    "end": "2194079"
  },
  {
    "text": "but I think that we do know some of those \nprinciples. We just haven't pulled them together. I think if you go back a number of years, people \ntried to create a model, so not the real code.  ",
    "start": "2194080",
    "end": "2204320"
  },
  {
    "text": "They created a model of the system they wanted \nto build and they tried to run simulations on it.   When I went to Dubai a number of years ago, the \nBurj Khalifa, big, tall building, there's a bunch  ",
    "start": "2204320",
    "end": "2214320"
  },
  {
    "text": "of models in the basement that show you how they \nmodeled things like wind flow around the various  ",
    "start": "2214320",
    "end": "2219360"
  },
  {
    "text": "sides of the building. You need to do this stuff \nwith buildings, because you can't stick up the   Burj Khalifa and then stick it in a wind tunnel. \nIt's too expensive. I mean, you could do it but  ",
    "start": "2220640",
    "end": "2230000"
  },
  {
    "text": "it's not worth doing. And I think 20 years \nago we tried to apply that same technique,   let's model the software without building it.\nThat's the wrong way around. ",
    "start": "2230000",
    "end": "2236795"
  },
  {
    "text": "And simulate it, and you're right, \nproduction is free. We can just test stuff.  Because that's the biggest difference between \nthe two worlds, right? If your building fails,  ",
    "start": "2236795",
    "end": "2246720"
  },
  {
    "text": "you're looking at the cost of constructing a new \none, whereas in software, you can make changes to  ",
    "start": "2246720",
    "end": "2252400"
  },
  {
    "text": "something you already built without sinking \nthe whole cost again into the same project. ",
    "start": "2252400",
    "end": "2258559"
  },
  {
    "text": "Hopefully.\nHopefully. Well, most of the time. ",
    "start": "2258560",
    "end": "2261440"
  },
  {
    "text": "That's the other key difference, to my mind, \nbetween software engineering and development.   Software engineers are usually starting off \nand go, \"Oh, shit, this is gonna go wrong.\"  ",
    "start": "2264320",
    "end": "2271920"
  },
  {
    "text": "Sorry, I shouldn't have sworn.\nIt's usually going wrong.  “Oh, damn, this is gonna go wrong, because \nit usually is”. And so starting off trying  ",
    "start": "2273280",
    "end": "2280319"
  },
  {
    "text": "to think about the ways in which our system \ncan go wrong, I think, is really important   because that's how you do a good job.\nI think that's the best tip anyone has ever  ",
    "start": "2280320",
    "end": "2289119"
  },
  {
    "text": "given me. Whenever there is a fire in production \nstep up and be part of the team that investigates  ",
    "start": "2289120",
    "end": "2296640"
  },
  {
    "text": "because those are the days that you learn so \nmuch about what you shouldn't have been doing. ",
    "start": "2296640",
    "end": "2301920"
  },
  {
    "text": "I did some consultancy for a bank a few \nyears ago and they asked me to advise them on  ",
    "start": "2303120",
    "end": "2307520"
  },
  {
    "text": "building resilient systems, and we walked into \nthis room and all sat there. We hadn't met before,  ",
    "start": "2308160",
    "end": "2313440"
  },
  {
    "text": "this roomful of people, and everybody was a bit \nreticent to start talking. So I just said, \"Well,  ",
    "start": "2313440",
    "end": "2318560"
  },
  {
    "text": "if we're building resilient systems we're \ngonna assume that everything is gonna go   wrong from the start.\" And they said, \"What? We \nassumed we had to make sure it didn't go wrong.\"  ",
    "start": "2319280",
    "end": "2325839"
  },
  {
    "text": "I think engineering is about assuming stuff \nwill go wrong and then you learn from that,  ",
    "start": "2327360",
    "end": "2330960"
  },
  {
    "text": "and predict where it is that it might go wrong \nand defend against that, another callback to Alan  ",
    "start": "2332560",
    "end": "2339760"
  },
  {
    "text": "Kay's presentation where he talked about Facebook \nand their outage, and the kind of things that they   should've been doing to avoid that kind of outage.\nWell, as with any outage, you only learn what  ",
    "start": "2339760",
    "end": "2351039"
  },
  {
    "text": "you should've been doing when it goes wrong. And \nluckily, most of the time it's fixable, just not  ",
    "start": "2351040",
    "end": "2358960"
  },
  {
    "text": "always behind the scenes so that nobody notices. \nAll right, I think we can wrap up here. Thank  ",
    "start": "2358960",
    "end": "2367920"
  },
  {
    "start": "2363000",
    "end": "2391000"
  },
  {
    "text": "you so much for joining us today and for \nthe interesting takes on a lot of things,  ",
    "start": "2367920",
    "end": "2373040"
  },
  {
    "text": "and enjoy the rest of your conference.\nThank you. Pleasure. Thank you very much.",
    "start": "2373040",
    "end": "2381840"
  }
]