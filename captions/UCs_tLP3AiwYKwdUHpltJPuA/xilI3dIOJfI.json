[
  {
    "start": "0",
    "end": "75000"
  },
  {
    "text": "[Music]",
    "start": "990",
    "end": "7859"
  },
  {
    "text": "hi I'm Shaun McClelland I'm a developer advocate for Android and I'm here to talk to you about Kotlin multi-platform",
    "start": "12820",
    "end": "19640"
  },
  {
    "text": "and how this might be an interesting technology for developing multi-platform applications for iOS and Android before",
    "start": "19640",
    "end": "28070"
  },
  {
    "text": "we get started I kinda want to get to know the audience a little bit better so I know this is kind of a general conference where lots of people come",
    "start": "28070",
    "end": "33380"
  },
  {
    "text": "from different technologies who here uses Kotlin is their primary programming language so we have maybe like 20% of",
    "start": "33380",
    "end": "41450"
  },
  {
    "text": "you okay and who here's using the java programming language is that",
    "start": "41450",
    "end": "46730"
  },
  {
    "text": "I work at Google it's the Java programming language so so that was about the other half are the rest of you",
    "start": "46730",
    "end": "53180"
  },
  {
    "text": "is everyone else a developer or is anyone that's in non-development rolling in the crowd here I guess everyone's a",
    "start": "53180",
    "end": "59510"
  },
  {
    "text": "developer cool I'm gonna have some technical sections and then one final question who here writes the column programming language all right so we",
    "start": "59510",
    "end": "69590"
  },
  {
    "text": "have an author in the room hopefully I get things right well we'll jump in right now okay so I",
    "start": "69590",
    "end": "74930"
  },
  {
    "text": "want to just talk about multi-platform so let's dive in and what I'm gonna talk about today is kind of we break it into",
    "start": "74930",
    "end": "80870"
  },
  {
    "start": "75000",
    "end": "276000"
  },
  {
    "text": "three parts I'm going to talk about the code structure that you can kind of build with a multi-platform solution and",
    "start": "80870",
    "end": "87680"
  },
  {
    "text": "what sort of things you can make run on both platform so what sort of things maybe don't make sense to make multi-platform today with the libraries",
    "start": "87680",
    "end": "93890"
  },
  {
    "text": "that exist and then we'll talk a little bit about the language status like where things are and that's just gonna be",
    "start": "93890",
    "end": "99650"
  },
  {
    "text": "heavily my opinion you know because I keep track of everything that's going on and then I'm gonna talk about some of the new ideas that are in pulped Kotlin",
    "start": "99650",
    "end": "106909"
  },
  {
    "text": "multi-platform some of which you're gonna have to kind of embrace and kind of figure out how they work in order to",
    "start": "106909",
    "end": "112130"
  },
  {
    "text": "write code with column multi-platform so let's go ahead and dive in so right now",
    "start": "112130",
    "end": "119650"
  },
  {
    "text": "today if you make mobile apps in your company your code structure probably looks something like this",
    "start": "119650",
    "end": "125150"
  },
  {
    "text": "you have an Android team and they're right in Kotlin or the java programming language and they make a UI layer and",
    "start": "125150",
    "end": "130909"
  },
  {
    "text": "then below that they have some sort of logic layer and then below that they have some sort of data layer these are",
    "start": "130909",
    "end": "136520"
  },
  {
    "text": "like MVC mvvm MVP you can put a bunch of different acronyms on the but they all come out the same there's",
    "start": "136520",
    "end": "142490"
  },
  {
    "text": "always these three boxes and they all kind of you know do exactly what they say they do it's something",
    "start": "142490",
    "end": "148580"
  },
  {
    "text": "simultaneously you have another team that makes your Swift application for iOS and they make the exact same three",
    "start": "148580",
    "end": "155870"
  },
  {
    "text": "boxes with different names attached to them in different acronyms and they do the same thing right they make very very",
    "start": "155870",
    "end": "161150"
  },
  {
    "text": "similar but slightly different UI they perform hopefully the same logic sometimes different logic and they",
    "start": "161150",
    "end": "167240"
  },
  {
    "text": "typically interact with the exact same data especially if you have a back-end system that they're both talking to so",
    "start": "167240",
    "end": "173240"
  },
  {
    "text": "if we look at these there's some like things that are similar and there's some things that are dissimilar so the UI",
    "start": "173240",
    "end": "179660"
  },
  {
    "text": "layer is not really equivalent so the UI framework from Android and the UI framework from iOS are very different",
    "start": "179660",
    "end": "186800"
  },
  {
    "text": "the way that they want to make views and also the UI is that you end up making for both of these platforms are",
    "start": "186800",
    "end": "192500"
  },
  {
    "text": "different so these things I mean you can kind of go down the path of trying to make these run the same code to make you",
    "start": "192500",
    "end": "198350"
  },
  {
    "text": "why you're gonna end up with a lot of Forks in the way saying on Android draw it this way on iOS draw it this way the",
    "start": "198350",
    "end": "205790"
  },
  {
    "text": "logic layer is very very typically almost identical between these platforms",
    "start": "205790",
    "end": "210920"
  },
  {
    "text": "with the exception of the way that it talks to you I layer and then the data layer especially if you have a back-end",
    "start": "210920",
    "end": "216980"
  },
  {
    "text": "is almost always exactly the same right so it's making the same request to the backend it's saving it into an offline",
    "start": "216980",
    "end": "223670"
  },
  {
    "text": "cache which is stored on the local filesystem the difference is there really are the way that it's stored in",
    "start": "223670",
    "end": "229340"
  },
  {
    "text": "the local file system right so on Android we use something like room and iOS it's popular T's realm or one of the",
    "start": "229340",
    "end": "236870"
  },
  {
    "text": "other libraries to actually store the data in the file system so this is kind",
    "start": "236870",
    "end": "241970"
  },
  {
    "text": "of the the world that we're in today and what column multi-platform gives us is",
    "start": "241970",
    "end": "247760"
  },
  {
    "text": "the potential on mobile to kind of change this picture so it looks a little bit more like this so we still have the",
    "start": "247760",
    "end": "254240"
  },
  {
    "text": "UI layers in Kotlin and Swift but then down at the lower levels in the logic",
    "start": "254240",
    "end": "259670"
  },
  {
    "text": "layer we can move some or all of that code into code that can run on both platforms similarly with the data layer",
    "start": "259670",
    "end": "266240"
  },
  {
    "text": "especially the data layer which should you know be the same back-end request in the same offline caching we have the",
    "start": "266240",
    "end": "271490"
  },
  {
    "text": "ability to move a lot of that code into common code that can run in both platforms so the real key idea to a",
    "start": "271490",
    "end": "278500"
  },
  {
    "start": "276000",
    "end": "530000"
  },
  {
    "text": "column multi platform as it is today is that you can share app logic but probably not the UI there's not",
    "start": "278500",
    "end": "284500"
  },
  {
    "text": "currently a cross-platform UI toolkit built in Kotlin multi platform so it",
    "start": "284500",
    "end": "289930"
  },
  {
    "text": "would be hard to show UI without a framework to call so let's dive into a",
    "start": "289930",
    "end": "295330"
  },
  {
    "text": "quick example of what we can do with Kotlin multi platform so this is a little demo app that one of my",
    "start": "295330",
    "end": "301600"
  },
  {
    "text": "co-workers Wojtek put together that's Sudoku playground so basically it",
    "start": "301600",
    "end": "306790"
  },
  {
    "text": "lets you solve Sudoku puzzles and he made a version for iOS and he made a version for Android and then he",
    "start": "306790",
    "end": "314110"
  },
  {
    "text": "experimented with using Kotlin multi platform to try to share some of the common code alright there's only one way",
    "start": "314110",
    "end": "319840"
  },
  {
    "text": "to actually solve a Sudoku puzzle it's not different on iOS versus Android so we can share that code and let's see how",
    "start": "319840",
    "end": "326080"
  },
  {
    "text": "that looks so on each platform we kind of have like our standard implementation",
    "start": "326080",
    "end": "332740"
  },
  {
    "text": "right so on Android we have an activity and then we call it a view model we have mvvm on Android then we have some",
    "start": "332740",
    "end": "339610"
  },
  {
    "text": "persistence layer that stores kind of the state of your current Sudoku board and then we have a solver that",
    "start": "339610",
    "end": "344650"
  },
  {
    "text": "implements the actual Sudoku algorithm and then of course over on iOS we have a view which is called the view and not an",
    "start": "344650",
    "end": "351250"
  },
  {
    "text": "activity and then on iOS things are called a view controller instead of a view model but they kind of perform the",
    "start": "351250",
    "end": "356740"
  },
  {
    "text": "same role then there's still a persistence layer but it uses a slightly different database to get there and then",
    "start": "356740",
    "end": "362919"
  },
  {
    "text": "there's also a solver which actually that one is pretty much identical it's just written in a different programming language so the first thing to look at",
    "start": "362919",
    "end": "370570"
  },
  {
    "text": "here is I have two implementations of the solver that are both trying to solve Sudoku it's the exact same algorithm two",
    "start": "370570",
    "end": "376690"
  },
  {
    "text": "different programming languages so what I could do is I could come up with a way to kind of share the code between those",
    "start": "376690",
    "end": "382930"
  },
  {
    "text": "two different code bases and Kotlin multi-platform gives us the ability to do this right so I can make a Kotlin",
    "start": "382930",
    "end": "389500"
  },
  {
    "text": "multi-platform library called cult in common and then over on the Android side I can call into that using Kotlin JVM",
    "start": "389500",
    "end": "397000"
  },
  {
    "text": "and that's going to let me make calls straight from my Android code and then over on the iOS side I can use Kotlin",
    "start": "397000",
    "end": "403300"
  },
  {
    "text": "native in order to make a library that iOS can interact so let's jump into that solver so on",
    "start": "403300",
    "end": "411120"
  },
  {
    "text": "Android we're gonna go ahead and use JVM which is gonna spit out bytecode this is",
    "start": "411120",
    "end": "416850"
  },
  {
    "text": "the same stuff that we've been doing for Android in order to make Android apps and then over on the iOS side Kotlin",
    "start": "416850",
    "end": "423590"
  },
  {
    "text": "multi-platforms actually going to use LLVM to spit out what's called bit code to be different than bytecode I guess",
    "start": "423590",
    "end": "430410"
  },
  {
    "text": "what's called bit code for LLVM that can run on an iOS device there's actually",
    "start": "430410",
    "end": "438660"
  },
  {
    "text": "one more target you can make for Kotlin multi-platform which I'm not going to talk too much about today but it's kind",
    "start": "438660",
    "end": "443820"
  },
  {
    "text": "of interesting you can also spit out stuff that can be used from JavaScript right so you can have Kotlin code and then you can take",
    "start": "443820",
    "end": "450810"
  },
  {
    "text": "your bindings and spit them out such as they can be used by javascript so going back down to the solver if we take a",
    "start": "450810",
    "end": "457470"
  },
  {
    "text": "look at this we're already kind of in a good place we've moved a little bit of logic we put it into a core library and",
    "start": "457470",
    "end": "464220"
  },
  {
    "text": "we kind of made it so that if we fix the bug in there it gets fixed on both platforms that's pretty nice we can",
    "start": "464220",
    "end": "470130"
  },
  {
    "text": "actually go a little bit further this persistence layer there are differences between the platforms but the core of it",
    "start": "470130",
    "end": "475860"
  },
  {
    "text": "is I'm just going to be storing a key and a value and then later I'm going to fetch that key and expect the value to",
    "start": "475860",
    "end": "481950"
  },
  {
    "text": "come back out so I can define an interface for my persistence layer that is kind of general to both platforms so",
    "start": "481950",
    "end": "488130"
  },
  {
    "text": "I do that I can just kind of merge those together and now I've kind of set up a world where my all of my UI stuff my",
    "start": "488130",
    "end": "495510"
  },
  {
    "text": "activity my view model my view and view controller are still developed natively on the platforms but all of the",
    "start": "495510",
    "end": "501540"
  },
  {
    "text": "low-level stuff the common logic between the two platforms can move into this common multi platform and it's kind of",
    "start": "501540",
    "end": "507360"
  },
  {
    "text": "like this is probably the the normal cut layer for where a column of the platform makes sense you might take it a little",
    "start": "507360",
    "end": "513210"
  },
  {
    "text": "bit higher you might move the view models up but that gets a little bit more tricky because the view models tend to be tightly coupled with how the UI",
    "start": "513210",
    "end": "519120"
  },
  {
    "text": "actually works and that's a little bit different on both platforms so that's kind of like the core thing that we're",
    "start": "519120",
    "end": "525120"
  },
  {
    "text": "trying to do with multi-level we're trying to share app logic and not the UI",
    "start": "525120",
    "end": "530270"
  },
  {
    "start": "530000",
    "end": "759000"
  },
  {
    "text": "so there was only about 20% of you that use Kotlin already so one thing I want",
    "start": "530570",
    "end": "537150"
  },
  {
    "text": "to talk about is like why is Kotlin kind of interesting language to consider as a",
    "start": "537150",
    "end": "543029"
  },
  {
    "text": "multi-platform solution so there are companies today there's Android and iOS apps today that do kind of this common",
    "start": "543029",
    "end": "549660"
  },
  {
    "text": "scaffolding on the bottom and they typically do that in C++ today so that's actually like already there's Production",
    "start": "549660",
    "end": "555779"
  },
  {
    "text": "apps probably on everyone in this room's phone that are using C++ to do the networking in to do to view the data",
    "start": "555779",
    "end": "561839"
  },
  {
    "text": "layer so one of the cool things about Kotlin is we move up about two decades",
    "start": "561839",
    "end": "567839"
  },
  {
    "text": "from C++ so I would call Kotlin a modern language so it's pretty much equivalent",
    "start": "567839",
    "end": "573209"
  },
  {
    "text": "to Swift in a lot of ways and sort of the features that it provides you so it has type inference it has first-class",
    "start": "573209",
    "end": "579060"
  },
  {
    "text": "functions and if you just went to the talk before this one you saw all of the cool features that Colin has and it also",
    "start": "579060",
    "end": "584399"
  },
  {
    "text": "lets you build really really really expressive abstractions I'm using all of",
    "start": "584399",
    "end": "589410"
  },
  {
    "text": "these and other language features and it kind of has a lot of the stuff that you expect in a new language that you're",
    "start": "589410",
    "end": "595649"
  },
  {
    "text": "adopting today in 2019 if you kind of a survey the the state of the art of programming languages Kotlin is appear",
    "start": "595649",
    "end": "601829"
  },
  {
    "text": "with all of the modern programming languages the other thing that's really really interesting about Colin is it is",
    "start": "601829",
    "end": "609120"
  },
  {
    "text": "very much an industrial language and what do I mean by that I mean a couple different things a one Colin is really",
    "start": "609120",
    "end": "615930"
  },
  {
    "text": "really good at creating performant code it's very easy and natural to write Colin code that performs on the JVM or",
    "start": "615930",
    "end": "623459"
  },
  {
    "text": "on Android equivalent lead to the byte code that you would generate from the Java programming language and on LLVM",
    "start": "623459",
    "end": "630269"
  },
  {
    "text": "it's gonna perform a similar to code that you've written and actually don't have an example but it's gonna perform",
    "start": "630269",
    "end": "636839"
  },
  {
    "text": "pretty well the other thing that Kotlin has is it has just enough boilerplate so",
    "start": "636839",
    "end": "643410"
  },
  {
    "text": "one of the things about Colin is it's very very very concise as a programming language but it has just enough",
    "start": "643410",
    "end": "648420"
  },
  {
    "text": "boilerplate that when you look at a line of code you can always figure out what that line of code does there's no kind",
    "start": "648420",
    "end": "653699"
  },
  {
    "text": "of like spooky action at a distance or something a couple thousand lines of code away is affecting the way that this",
    "start": "653699",
    "end": "659160"
  },
  {
    "text": "code is running and you can always just kind of like click your way through in the IDE if you can't figure out what",
    "start": "659160",
    "end": "665430"
  },
  {
    "text": "some like symbol that you're looking at comes from and it's always gonna take you to the declaration there's no kind",
    "start": "665430",
    "end": "671250"
  },
  {
    "text": "of long-distance action going on and the other thing that's going on is Kotlin is a very tool heavy language it",
    "start": "671250",
    "end": "677720"
  },
  {
    "text": "comes from JetBrains JetBrains is one of the leading ide creators and they built the language and the ide together to",
    "start": "677720",
    "end": "684560"
  },
  {
    "text": "work extremely extremely well together so that's a huge win as you start getting into larger code bases where you",
    "start": "684560",
    "end": "690470"
  },
  {
    "text": "kind of need this tooling in order to handle hundreds of thousands of lines of code and the other thing that's really",
    "start": "690470",
    "end": "696080"
  },
  {
    "text": "cool about Colin is it has an extremely strong inner operability story so if you",
    "start": "696080",
    "end": "702050"
  },
  {
    "text": "have a whole bunch of legacy code in the Java programming language on mobile or anything on the backend the",
    "start": "702050",
    "end": "707500"
  },
  {
    "text": "interoperability story is really bi-directional you can call Kotlin from the Java programming language and you",
    "start": "707500",
    "end": "713120"
  },
  {
    "text": "can call Java from Collin learning Kotlin is pretty easy honestly if you",
    "start": "713120",
    "end": "719480"
  },
  {
    "text": "are coming at it from the Java programming language and you're kind of an expert at that language it should",
    "start": "719480",
    "end": "724550"
  },
  {
    "text": "take you about a day to get to the point you can start writing in Kotlin and then like a lifetime to master it if you're",
    "start": "724550",
    "end": "729950"
  },
  {
    "text": "coming from Swift again the feature parity is very strong between these languages so like the ability of a swift",
    "start": "729950",
    "end": "735590"
  },
  {
    "text": "developer to kind of pick up Kotlin and start like figuring out reading the code and maybe making contributions it's",
    "start": "735590",
    "end": "741020"
  },
  {
    "text": "gonna be relatively easy and there's very few surprises there's a lot of new cool expressive syntax features but the",
    "start": "741020",
    "end": "748970"
  },
  {
    "text": "core of the language is not very surprising it's still based on objects and types and functions and all the things that we're used to from like the",
    "start": "748970",
    "end": "756110"
  },
  {
    "text": "last 20 years of programming languages so that's a bit about Kotlin one thing",
    "start": "756110",
    "end": "762650"
  },
  {
    "start": "759000",
    "end": "978000"
  },
  {
    "text": "that's really really interesting to me if I think about a multi-platform future if I think about building a",
    "start": "762650",
    "end": "768260"
  },
  {
    "text": "multi-platform app Codes cool and I can write some code and I can figure out how to do that but the thing is every time",
    "start": "768260",
    "end": "775610"
  },
  {
    "text": "I've worked at a company it's not about code it's about people what's really really important when you think about",
    "start": "775610",
    "end": "780650"
  },
  {
    "text": "how you're gonna build something like this is to think about like what would the team structure look like and what",
    "start": "780650",
    "end": "786140"
  },
  {
    "text": "would each of the people involved be responsible for delivering like how would this actually come together into a",
    "start": "786140",
    "end": "791990"
  },
  {
    "text": "working application that you could ship reliably so I'm taking inspiration for these slides I'm there's not many",
    "start": "791990",
    "end": "798470"
  },
  {
    "text": "production apps today that are using call ton multi-platform so I'm taking inspiration from the teams that are using C++ as a substrate to see like how",
    "start": "798470",
    "end": "805880"
  },
  {
    "text": "do they structure their teams kind of share that to give you some inspiration on how this might work so if",
    "start": "805880",
    "end": "811010"
  },
  {
    "text": "you look at those teams they very typically still have an iOS front-end team and their responsibility is really",
    "start": "811010",
    "end": "816410"
  },
  {
    "text": "to create all of the views that show up on iOS similarly there's an Android front of team whose responsibility is to",
    "start": "816410",
    "end": "822920"
  },
  {
    "text": "create all of the views that show up on Android and then there's kind of this new team that doesn't currently exist",
    "start": "822920",
    "end": "829029"
  },
  {
    "text": "for a lot of companies it's the mobile backend team and that's the team that handles kind of that substrate later",
    "start": "829029",
    "end": "835519"
  },
  {
    "text": "handles the data layer and it handles interacting with that libraries that you're going to share between the platforms so if we dive into these you",
    "start": "835519",
    "end": "843350"
  },
  {
    "text": "can see that the mobile backend team is kind of this team that has to think about themselves as library authors",
    "start": "843350",
    "end": "849230"
  },
  {
    "text": "right so they're not just writing code that they're gonna later like use that same code and write a mobile application",
    "start": "849230",
    "end": "855529"
  },
  {
    "text": "for two different things they're gonna be producing api's they're gonna be consumed by other people inside",
    "start": "855529",
    "end": "861920"
  },
  {
    "text": "of the company and there's kind of like a different like level of polish that",
    "start": "861920",
    "end": "868190"
  },
  {
    "text": "you need to provide when you're making an API that other people are gonna use versus code that you intend to call",
    "start": "868190",
    "end": "873350"
  },
  {
    "text": "yourself so the mobile backend team needs to provide extremely good",
    "start": "873350",
    "end": "878630"
  },
  {
    "text": "documentation right because the people who are gonna be using their code and figuring out how to call their call the",
    "start": "878630",
    "end": "884779"
  },
  {
    "text": "api's they produce are not the people who are on their team it's the people on the iOS front as iam the Android front-end team so they need to be able",
    "start": "884779",
    "end": "890990"
  },
  {
    "text": "to help a new intern on the iOS front-end team get up to speed with how the data layer works they also need very",
    "start": "890990",
    "end": "897740"
  },
  {
    "text": "very good tests like this thing can't have bugs or you just introduce bugs into both platforms this absolutely has",
    "start": "897740",
    "end": "903620"
  },
  {
    "text": "to be kind of a stable part of your system and then the other part of making api's is making clean API this is kind",
    "start": "903620",
    "end": "910519"
  },
  {
    "text": "of hard I've experimented with it recently but it's a it's a skill that you would kind of have to work on fairly",
    "start": "910519",
    "end": "915709"
  },
  {
    "text": "heavily if you're going to be producing a library that other people are going to be using inside of your company so then",
    "start": "915709",
    "end": "922430"
  },
  {
    "text": "yeah they're good basically to be responsible for all the common logic between these two platforms which of course must be reliable and then after",
    "start": "922430",
    "end": "929180"
  },
  {
    "text": "they do all of that what they're gonna do is they're gonna create a bunch of Kotlin code and then that's gonna go",
    "start": "929180",
    "end": "934220"
  },
  {
    "text": "into the sim CI system and it's can produce a library that can be consumed by the other two teams",
    "start": "934220",
    "end": "940779"
  },
  {
    "text": "then we go over to the mobile front-end team so we have the Android team in the iOS team they're going to depend upon",
    "start": "940900",
    "end": "947660"
  },
  {
    "text": "that library so every time they want to make any sort of interaction with the data layer they're going to use that",
    "start": "947660",
    "end": "953450"
  },
  {
    "text": "library to get the result that they're looking for they're gonna rely very very heavily on that library being something",
    "start": "953450",
    "end": "959030"
  },
  {
    "text": "that has an API that works for the use case that they that they want and then they're gonna be responsible for making",
    "start": "959030",
    "end": "964580"
  },
  {
    "text": "all the platform UI code they're gonna be the ones who actually figure out how to put views on the screen and transform the data in just something a user can",
    "start": "964580",
    "end": "971300"
  },
  {
    "text": "use and make you know and absolutely polished experience that you know improves engagement and all the other things do we work on so that's kind of",
    "start": "971300",
    "end": "979880"
  },
  {
    "start": "978000",
    "end": "1136000"
  },
  {
    "text": "it that's the code structure and that's like my idea and that's inspired by existing teams of how a team might be",
    "start": "979880",
    "end": "985340"
  },
  {
    "text": "structured around Kotlin multi-platform what I want to talk about next is the language status of Kotlin multi-platform",
    "start": "985340",
    "end": "992030"
  },
  {
    "text": "I'm kind of like selling this this idea that cutland multi-platform might help you know combine between the two",
    "start": "992030",
    "end": "999080"
  },
  {
    "text": "different teams that we have some of the common logic so is it ready to use today and I would say that column at the",
    "start": "999080",
    "end": "1006700"
  },
  {
    "text": "platform is very beta right now I think that's like a very fair assessment there's concerns around",
    "start": "1006700",
    "end": "1013120"
  },
  {
    "text": "well not concerns there's current active work going on about how the threading model is going to work you know these",
    "start": "1013120",
    "end": "1019600"
  },
  {
    "text": "sort of things are very very core so if you build large amounts of code using Cotham multiple forms a day you're going",
    "start": "1019600",
    "end": "1025600"
  },
  {
    "text": "to have to update that so if you look at kind of this adoption curve I think",
    "start": "1025600",
    "end": "1031720"
  },
  {
    "text": "we're probably all familiar with the idea there's like early adopters and then you know legacy adopters over and",
    "start": "1031720",
    "end": "1037030"
  },
  {
    "text": "the other end of the bell curve I would say right now Kotlin multi-platform is really really over here right now so if",
    "start": "1037030",
    "end": "1044410"
  },
  {
    "text": "you love brand new technologies and you want to be involved in the creation of a new technology this is the time to get",
    "start": "1044410",
    "end": "1050260"
  },
  {
    "text": "you know into this if you're a little bit more pragmatic and you were looking at okay I have two mobile applications",
    "start": "1050260",
    "end": "1056530"
  },
  {
    "text": "and I want to do a pilot program and check this thing out and see when it's see what it's like I would say q1 next",
    "start": "1056530",
    "end": "1063370"
  },
  {
    "text": "year is probably a good time to take a look at that and then if you were very pragmatic I would say q1 21 would",
    "start": "1063370",
    "end": "1071530"
  },
  {
    "text": "probably be a very pragmatic time there's a lot of work going on today right there's new libraries being",
    "start": "1071530",
    "end": "1077410"
  },
  {
    "text": "created right now like probably literally right now because people are doing their full-time job making these libraries to make Kotlin multi-platform",
    "start": "1077410",
    "end": "1085120"
  },
  {
    "text": "have a great story around networking to have helped them out to form have a great story around databases right now",
    "start": "1085120",
    "end": "1090940"
  },
  {
    "text": "there are some libraries but all of the leading libraries on Android and leading libraries and iOS are currently not",
    "start": "1090940",
    "end": "1096700"
  },
  {
    "text": "supported there's there's a database solution there is a networking solution but you can't use retrofit and you can't",
    "start": "1096700",
    "end": "1102040"
  },
  {
    "text": "use a broom for example so we already talked a little bit about this the",
    "start": "1102040",
    "end": "1107620"
  },
  {
    "text": "threading model I would consider it unstable because they're still active work going on with it the Kotlin JB interrupt story is",
    "start": "1107620",
    "end": "1114820"
  },
  {
    "text": "fantastic so callin multiple @ form to Colin JVM is really really easy it",
    "start": "1114820",
    "end": "1120250"
  },
  {
    "text": "Scotland all the way down so that's not too much of an interrupt story and the swift interrupt story is is rapidly",
    "start": "1120250",
    "end": "1127180"
  },
  {
    "text": "improving so it's pretty good but there's some notable exceptions like generics for example so that's something",
    "start": "1127180",
    "end": "1133630"
  },
  {
    "text": "that's being worked on right now so so far I've talked about like the code and",
    "start": "1133630",
    "end": "1140050"
  },
  {
    "start": "1136000",
    "end": "1312000"
  },
  {
    "text": "then I talked a little bit about the language status let's go like dive all the way in we're gonna go into the code",
    "start": "1140050",
    "end": "1145090"
  },
  {
    "text": "section of this talk and let's take a look at what are the new ideas that you're gonna have to embrace in order to",
    "start": "1145090",
    "end": "1150280"
  },
  {
    "text": "be a successful Kotlin multi-platform developer so there's basically three",
    "start": "1150280",
    "end": "1157090"
  },
  {
    "text": "things that are new in Kotlin multi-platform is this concept it expect an actual there's this concept of safe",
    "start": "1157090",
    "end": "1164020"
  },
  {
    "text": "threading oh sorry there's two things there used to be three things and I changed my sled right before I got on stage and there's this concept of safe",
    "start": "1164020",
    "end": "1170620"
  },
  {
    "text": "threading so let's go ahead and jump into expect in actual so I talked",
    "start": "1170620",
    "end": "1176890"
  },
  {
    "text": "earlier about how we're gonna have this storage class that we're gonna share between the two platforms but on each platform we use a completely different",
    "start": "1176890",
    "end": "1183100"
  },
  {
    "text": "solution to actually save data even getting a file on the two platforms is",
    "start": "1183100",
    "end": "1188380"
  },
  {
    "text": "actually you're gonna use different api's to get that so what I can do is I can make a common class called multi",
    "start": "1188380",
    "end": "1194800"
  },
  {
    "text": "storage which is an expect class and what an expect class says basically is I",
    "start": "1194800",
    "end": "1200470"
  },
  {
    "text": "want to define an interface that someone else is going to have to implement and this is the interface that they're going",
    "start": "1200470",
    "end": "1206440"
  },
  {
    "text": "to have to and this is the common mane and this is what a color can call into then over on",
    "start": "1206440",
    "end": "1212530"
  },
  {
    "text": "the Android files in Android main I can make an actual class and the actual",
    "start": "1212530",
    "end": "1217690"
  },
  {
    "text": "class has to say the word actual a bunch of times because it's it's it's really the implementation that on Android",
    "start": "1217690",
    "end": "1224290"
  },
  {
    "text": "you're going to instantiate when you make one of these things the other ones really just the interface this is the actual implementation and then in that",
    "start": "1224290",
    "end": "1232660"
  },
  {
    "text": "I'm gonna go ahead and implement get string I might do that with shared prefs on Android and I'm gonna implement put",
    "start": "1232660",
    "end": "1238840"
  },
  {
    "text": "string alright so this is where I put the actual code that goes on Android and then flipping the script over on iOS I",
    "start": "1238840",
    "end": "1246130"
  },
  {
    "text": "write the exact same thing I write my actual implementation on iOS and it's gonna provide the exact same interface",
    "start": "1246130",
    "end": "1251440"
  },
  {
    "text": "but using completely different api's so this is something that allows you to kind of deal with the fact that the",
    "start": "1251440",
    "end": "1258040"
  },
  {
    "text": "platforms aren't always the same but you kind of want to provide the same interface for a caller on either platform so it gives you a way to",
    "start": "1258040",
    "end": "1266170"
  },
  {
    "text": "provide platform specific code like files or networking or or Bluetooth if",
    "start": "1266170",
    "end": "1274090"
  },
  {
    "text": "you really want to try to wreck it class cross platform bluetooth library you will be my hero and you can really think",
    "start": "1274090",
    "end": "1281410"
  },
  {
    "text": "of this if you used other languages like C++ and written like multi-platform code in that you can think of this is like if",
    "start": "1281410",
    "end": "1287320"
  },
  {
    "text": "def but a lot safer and a lot easier to use it's kind of interfaces and and actual implementations the other really",
    "start": "1287320",
    "end": "1295210"
  },
  {
    "text": "really big idea and this one's so big it's actually the majority of my talk is safe threading so this is something that",
    "start": "1295210",
    "end": "1301810"
  },
  {
    "text": "really comes in a it's coming into vogue right now in programming languages we",
    "start": "1301810",
    "end": "1308140"
  },
  {
    "text": "see it in a couple languages and Kotla multi-platform is embracing this so let's go ahead and dive into what does",
    "start": "1308140",
    "end": "1314920"
  },
  {
    "start": "1312000",
    "end": "1648000"
  },
  {
    "text": "safe threading mean I'm gonna make an assertion everyone in this room probably has threading bugs in their code and",
    "start": "1314920",
    "end": "1320230"
  },
  {
    "text": "let's find out why so there's kind of this war going on when you write multi-threaded code between the CPU and",
    "start": "1320230",
    "end": "1326800"
  },
  {
    "text": "main memory and let's kind of like dive in really quickly and see how this goes",
    "start": "1326800",
    "end": "1333450"
  },
  {
    "text": "so on a you know a modern CPU made after like 1950 there's a CPU and the C",
    "start": "1333450",
    "end": "1340429"
  },
  {
    "text": "you has a cache that's very very close to the CPU it's very very fast memory and it's a very small amount of memory",
    "start": "1340429",
    "end": "1346039"
  },
  {
    "text": "and then a very very very far away there's a main memory the the difference",
    "start": "1346039",
    "end": "1351889"
  },
  {
    "text": "in speed between writing to the cache and writing into main memory is huge so much so that CPU doesn't always do that",
    "start": "1351889",
    "end": "1358879"
  },
  {
    "text": "really really expensive thing and send the result off to main memory so let's put a variable in main memory let's put",
    "start": "1358879",
    "end": "1365840"
  },
  {
    "text": "this variable x equals 1 this is like the classic example that we always cover in my computer science classes I'm gonna",
    "start": "1365840",
    "end": "1371210"
  },
  {
    "text": "set X equal to 1 and then I'm gonna go ahead and try to increment it so in order to do that I'm gonna copy X to the",
    "start": "1371210",
    "end": "1377269"
  },
  {
    "text": "cache then I'm gonna copy X over to the CPU I'm gonna actually put it on the CPU",
    "start": "1377269",
    "end": "1383330"
  },
  {
    "text": "so I can perform an operation on it and then I'm gonna update it and now X is 2 this is all looking pretty good but",
    "start": "1383330",
    "end": "1389450"
  },
  {
    "text": "there's like still 2x equals ones out there and if I'm only running one of these threads things are awesome I'm",
    "start": "1389450",
    "end": "1396230"
  },
  {
    "text": "just gonna go ahead and write that out to the cache and then I'm gonna write that out to memory and now everything's all updated so here's what we're gonna",
    "start": "1396230",
    "end": "1403759"
  },
  {
    "text": "get into threading so imagine I kept",
    "start": "1403759",
    "end": "1410269"
  },
  {
    "text": "iterating this and I got up to X equals 4 and I'm kind of about this state right here where I've incremented X 2 more times",
    "start": "1410269",
    "end": "1417169"
  },
  {
    "text": "and I've done x equals 4 and now a new thread tries to increment X so it's going to go ahead and on the other core",
    "start": "1417169",
    "end": "1424369"
  },
  {
    "text": "it's going to go ahead and copy that main memory out to the other cores cache there's actually a separate cache for",
    "start": "1424369",
    "end": "1430190"
  },
  {
    "text": "each core then it's going to copy x equals 2 over to the CPU and you could",
    "start": "1430190",
    "end": "1436610"
  },
  {
    "text": "pry see where this is going it's gonna increment X 2 3 so now I have 2 different CPU cores both of them have a",
    "start": "1436610",
    "end": "1442460"
  },
  {
    "text": "value for X and those values for X are different so what happens next",
    "start": "1442460",
    "end": "1447590"
  },
  {
    "text": "I go ahead and copy those values out to the cache imagine they both do this",
    "start": "1447590",
    "end": "1454549"
  },
  {
    "text": "concurrently and in parallel and then we do something very interesting now in my cache I have x equals 4 and x equals 3",
    "start": "1454549",
    "end": "1461480"
  },
  {
    "text": "so before we move on who thinks that the final value of x is 3 ok who thinks it's",
    "start": "1461480",
    "end": "1469129"
  },
  {
    "text": "for one person yes all right so actually what ends up happening is something like that the",
    "start": "1469129",
    "end": "1476330"
  },
  {
    "text": "final value of x is 3/4 I don't know one",
    "start": "1476330",
    "end": "1481430"
  },
  {
    "text": "of those is gonna win and literally we don't know which one it could be 4 it could be 3 literally don't know and so",
    "start": "1481430",
    "end": "1489500"
  },
  {
    "text": "this leads to like obviously like this is a serious problem if you want reliable program execution it sleeps 2",
    "start": "1489500",
    "end": "1495230"
  },
  {
    "text": "heisenbugs X is 3 X is 4 don't know what it is this is very very confusing very hard to reason about it's it's it's a",
    "start": "1495230",
    "end": "1502610"
  },
  {
    "text": "very unsafe operation that we've just performed so you might be thinking Shawn",
    "start": "1502610",
    "end": "1509240"
  },
  {
    "text": "you just incremented a bunch of integers what does this matter to me this never happens in real code so let's go ahead",
    "start": "1509240",
    "end": "1515600"
  },
  {
    "text": "and make a should be singleton so I've tried to implement the singleton pattern from where's the single that matter from",
    "start": "1515600",
    "end": "1522110"
  },
  {
    "text": "is that from the Gang of Four book yeah okay it's from the early 2000s so I tried to",
    "start": "1522110",
    "end": "1528470"
  },
  {
    "text": "implement a singleton pattern it should be singleton so I made up a companion object and I made a private instance",
    "start": "1528470",
    "end": "1534290"
  },
  {
    "text": "variable and then inside the get instance I'm gonna go ahead and check if",
    "start": "1534290",
    "end": "1539930"
  },
  {
    "text": "instance is no and then I'm gonna go ahead and Stan she ate a new one of these Singleton's so this code right",
    "start": "1539930",
    "end": "1546320"
  },
  {
    "text": "here let's go ahead and execute that and kind of the same abstract model that I had for the for the integers so in",
    "start": "1546320",
    "end": "1552080"
  },
  {
    "text": "memory we have instance equals null and we're gonna go ahead and copy that over to the cache and then we're gonna copy",
    "start": "1552080",
    "end": "1557570"
  },
  {
    "text": "that over to the CPU and then we'll go ahead and make a new singleton and we'll just imagine that's this fast and a",
    "start": "1557570",
    "end": "1563270"
  },
  {
    "text": "single CPU operation because it's a nice slide then another thread comes in and",
    "start": "1563270",
    "end": "1568400"
  },
  {
    "text": "calls get instance as well well but first we push that out to the cache but we don't quite complete the memory right",
    "start": "1568400",
    "end": "1575530"
  },
  {
    "text": "another thread comes in and calls get instance as well so it's going to go ahead and copy the main memory over to",
    "start": "1575530",
    "end": "1581750"
  },
  {
    "text": "the cache and the cache over to the CPU and then it instantiates a second",
    "start": "1581750",
    "end": "1587060"
  },
  {
    "text": "singleton and you can kind of see where this ends up going right so now we were trying to guard against creating two of these objects and we've just constructed",
    "start": "1587060",
    "end": "1593420"
  },
  {
    "text": "two of them if there was like a really good reason this was a singleton this may be like allocated a file you know",
    "start": "1593420",
    "end": "1600140"
  },
  {
    "text": "now I need to do some cleanup work and I don't even know this half this happened below the operational",
    "start": "1600140",
    "end": "1605630"
  },
  {
    "text": "semantics of my programming language and so this is kind of a serious problem that kind of comes up all of the time in",
    "start": "1605630",
    "end": "1611690"
  },
  {
    "text": "all sorts of different cases and there's solutions to this in the java programming language and Kotlin in C++ and they're all okay they get the job",
    "start": "1611690",
    "end": "1619159"
  },
  {
    "text": "done you could totally make this safe you can make this work slap a synchronized block on it things are good but the problem is that simple code I",
    "start": "1619159",
    "end": "1626149"
  },
  {
    "text": "wrote before was wrong and it wasn't wrong in any way that was obvious when I",
    "start": "1626149",
    "end": "1632000"
  },
  {
    "text": "read the code and it was only wrong if I basically if I have a computer science degree and I'm really really familiar",
    "start": "1632000",
    "end": "1637639"
  },
  {
    "text": "with how programming language is executed on CPUs and that's like a really high bar to writing correct code",
    "start": "1637639",
    "end": "1644210"
  },
  {
    "text": "and that's not that's not really like what we're going for so there's this kind of idea that Collin's try and",
    "start": "1644210",
    "end": "1650090"
  },
  {
    "start": "1648000",
    "end": "1799000"
  },
  {
    "text": "introduce of safe threading so there's three different api's that accomplish",
    "start": "1650090",
    "end": "1656210"
  },
  {
    "text": "those three different main semantic ways this is done the first one is atomic references the",
    "start": "1656210",
    "end": "1662870"
  },
  {
    "text": "second one is co-routines and the third one is frozen which is a new programming",
    "start": "1662870",
    "end": "1668419"
  },
  {
    "text": "construct and not the movie so let's go ahead and update should be singleton to use an atomic reference and we're kind",
    "start": "1668419",
    "end": "1675529"
  },
  {
    "text": "of like dive in to see how this helps us deal with kind of surfacing the fact that the CPU may do this crazy thing",
    "start": "1675529",
    "end": "1682039"
  },
  {
    "text": "underneath us to us as application programmers so first I have that",
    "start": "1682039",
    "end": "1688340"
  },
  {
    "text": "instance variable I'm going to need to update that instead of should be singleton this now has to be an atomic",
    "start": "1688340",
    "end": "1693380"
  },
  {
    "text": "reference of it should be a singleton and in fact if I tried to kind of in a multi-threaded way modify that instance",
    "start": "1693380",
    "end": "1699740"
  },
  {
    "text": "variable column would actually throw a compiler error at me it requires that I do this then inside of get instance now",
    "start": "1699740",
    "end": "1708620"
  },
  {
    "text": "I have to go ahead and grab the value from that instance so the atomic ref has a value property you can call that you",
    "start": "1708620",
    "end": "1715700"
  },
  {
    "text": "can get the value and it works the way that you were expecting and then we get to the fun part this is where kind of",
    "start": "1715700",
    "end": "1721549"
  },
  {
    "text": "the safety comes from so instead of kind of assigning instance to should be singleton we're gonna do what's called a",
    "start": "1721549",
    "end": "1727730"
  },
  {
    "text": "compare and set operator so I have an instanced atomic breath and I'm gonna",
    "start": "1727730",
    "end": "1733100"
  },
  {
    "text": "say compare it to null and if it's still no when it's about to do that",
    "start": "1733100",
    "end": "1739520"
  },
  {
    "text": "atomically then go ahead and assign it to this singleton right here so you kind",
    "start": "1739520",
    "end": "1745940"
  },
  {
    "text": "of like get this situation where you know now I'm literally at the memory",
    "start": "1745940",
    "end": "1750980"
  },
  {
    "text": "write operation checking was this memory still null right before I write the second value so there's no possibility",
    "start": "1750980",
    "end": "1757640"
  },
  {
    "text": "that I accidentally and Nan and like super opaquely right to values to the same memory",
    "start": "1757640",
    "end": "1762860"
  },
  {
    "text": "address so this is really helpful to us as application programmers I chose this",
    "start": "1762860",
    "end": "1769010"
  },
  {
    "text": "one because it's a little bit shorter code there's a comparing set returns bool right so it returns true or false",
    "start": "1769010",
    "end": "1774860"
  },
  {
    "text": "based on whether it actually did the set operation there's a version that throws",
    "start": "1774860",
    "end": "1780260"
  },
  {
    "text": "an exception if I read the docs correctly that you can also use and then the other thing that's going on here and",
    "start": "1780260",
    "end": "1786440"
  },
  {
    "text": "we'll talk about this in a second is the thing that I'm going to share must be frozen and now that I've done that I",
    "start": "1786440",
    "end": "1794360"
  },
  {
    "text": "need to actually turn instant value and imagine there was a slide that said that okay so that's atomic references next up",
    "start": "1794360",
    "end": "1802429"
  },
  {
    "start": "1799000",
    "end": "2258000"
  },
  {
    "text": "let's talk about co-routines so dealing with atomic references that's",
    "start": "1802429",
    "end": "1807740"
  },
  {
    "text": "a fantastic like API for interacting with like a single memory address but it's kind of like a very low-level API",
    "start": "1807740",
    "end": "1814640"
  },
  {
    "text": "for building like large concurrent applications there's a lot of things we just need to do we just need to make a network request and we need that to run",
    "start": "1814640",
    "end": "1821299"
  },
  {
    "text": "on some other thread and we need to get a result back in our thread and if we had to do like compare and set",
    "start": "1821299",
    "end": "1826460"
  },
  {
    "text": "operations every single time we had to do that that API would be unwieldy and it would be really really hard to",
    "start": "1826460",
    "end": "1831590"
  },
  {
    "text": "interact with that so colin has this idea of care routines and what I want to",
    "start": "1831590",
    "end": "1838940"
  },
  {
    "text": "talk about for the next couple minutes is how Co routines work and what problem they're useful for solving in a",
    "start": "1838940",
    "end": "1844039"
  },
  {
    "text": "multi-platform world co-routines kind of solved this problem of blocking",
    "start": "1844039",
    "end": "1849529"
  },
  {
    "text": "api calls so if you're familiar plucking api calls when you execute them they're just gonna block the thread that they",
    "start": "1849529",
    "end": "1856250"
  },
  {
    "text": "were called from so on mobile devices typically that thread that they were called from is the thread that the user",
    "start": "1856250",
    "end": "1862340"
  },
  {
    "text": "pressed a button on which is the main thread which is also the thread that has to update the screen so if you block",
    "start": "1862340",
    "end": "1868460"
  },
  {
    "text": "that thread the screen doesn't get updated new user presses don't get handled and and things aren't very good during this",
    "start": "1868460",
    "end": "1874490"
  },
  {
    "text": "network request operation the behavior actually between for what happens when you block the main thread is different",
    "start": "1874490",
    "end": "1880070"
  },
  {
    "text": "between Android and iOS and Android it's it's very frowned upon in iOS it's it's okay to fix this to make your your",
    "start": "1880070",
    "end": "1887870"
  },
  {
    "text": "blocking call turn into something that's async it's common to use something called callbacks right so this is a very",
    "start": "1887870",
    "end": "1894800"
  },
  {
    "text": "general pattern that that really kind of fixes the problem of blocking network requests so now when I call fetch user",
    "start": "1894800",
    "end": "1901309"
  },
  {
    "text": "the thread that I was on is unblocked immediately and I'm able to like handle",
    "start": "1901309",
    "end": "1907280"
  },
  {
    "text": "other things on Android I'm gonna want to handle some on draw events in order to keep repainting the screen and then",
    "start": "1907280",
    "end": "1912710"
  },
  {
    "text": "the networking library is responsible for finding a network thread somewhere and running that now for requests and",
    "start": "1912710",
    "end": "1919040"
  },
  {
    "text": "then passing it back to the thread that I want the result on so you can kind of think of the callback is like a handle",
    "start": "1919040",
    "end": "1925190"
  },
  {
    "text": "that you pass the networking library that says here's how you return a value to me",
    "start": "1925190",
    "end": "1930410"
  },
  {
    "text": "Kove routines look exactly like that first code as the callbacks have like a couple of problems there they tend to",
    "start": "1930410",
    "end": "1937970"
  },
  {
    "text": "like complicate code especially when you start putting lots of callbacks in there if anyone did nodejs when they really heavily into callbacks",
    "start": "1937970",
    "end": "1943670"
  },
  {
    "text": "before they added every teens and promises even if it's like these eight level deep callbacks that it's very it's",
    "start": "1943670",
    "end": "1950179"
  },
  {
    "text": "very complicated as you start using them too much co-routines kind of help you solve those problems by replacing that",
    "start": "1950179",
    "end": "1956030"
  },
  {
    "text": "callback call with this suspend call instead so what a suspend call does is",
    "start": "1956030",
    "end": "1961059"
  },
  {
    "text": "when you call it you're gonna go ahead and call fetch user and then the main thread gets unblocked right away or",
    "start": "1961059",
    "end": "1967250"
  },
  {
    "text": "whatever thread you called this on it's unblocked right away and then just like a callback the networking library is",
    "start": "1967250",
    "end": "1973040"
  },
  {
    "text": "still responsible for figuring out some way to actually run that network request but then when it's done it's gonna go",
    "start": "1973040",
    "end": "1979700"
  },
  {
    "text": "ahead and pass the result back to you using an operation called resume all right so this code looks exactly like",
    "start": "1979700",
    "end": "1985700"
  },
  {
    "text": "the blocking call that I had at the beginning it also looks exactly like the Cawley's too right when I was like in cs2 which",
    "start": "1985700",
    "end": "1992059"
  },
  {
    "text": "is awesome like this code is like pretty easy to do it's pretty easy to reason about you know at this level but now",
    "start": "1992059",
    "end": "1997940"
  },
  {
    "text": "let's let's dive in a little bit more and see what's happening in this suspend and resume operation",
    "start": "1997940",
    "end": "2004660"
  },
  {
    "text": "so one way to kind of think about what Qura teens are doing is whenever you call one of these suspend points the the",
    "start": "2004660",
    "end": "2010510"
  },
  {
    "text": "fetch user when I whenever I suspend my covered team it effectively just makes a call back out of the rest of my function",
    "start": "2010510",
    "end": "2017650"
  },
  {
    "text": "so it's going to keep all of my local variables around using one of those closures that we talked about in the",
    "start": "2017650",
    "end": "2023050"
  },
  {
    "text": "last talk but it's basically going to like kind of keep the state and give me a call back of the rest of the function",
    "start": "2023050",
    "end": "2028500"
  },
  {
    "text": "and you can kind of think about this the sane suspend and resume replace callbacks and we can visualize that",
    "start": "2028500",
    "end": "2034240"
  },
  {
    "text": "these two things execute very very similarly let's go back to cut routines",
    "start": "2034240",
    "end": "2039370"
  },
  {
    "text": "and talk a little bit about what fetch user might look like so fetch user is",
    "start": "2039370",
    "end": "2045970"
  },
  {
    "text": "also a suspend function and this is Cotton's kind of way of saying this function works with carotenes and you'll",
    "start": "2045970",
    "end": "2052120"
  },
  {
    "text": "see why that's really really important in a second and then in multi-platform the solution to how to get a network",
    "start": "2052120",
    "end": "2058389"
  },
  {
    "text": "thread and get a result from it is use a non-blocking networking library the the",
    "start": "2058390",
    "end": "2063820"
  },
  {
    "text": "actual code that you would have to write to do this is is relatively hard in Kotlin multi-platform compared to",
    "start": "2063820",
    "end": "2069909"
  },
  {
    "text": "pulling a multi-platform a non-blocking networking library off the shelf and if you've ever done like development in",
    "start": "2069910",
    "end": "2076169"
  },
  {
    "text": "nodejs or maybe like g event and in python or something like that this is pretty familiar where the actual",
    "start": "2076169",
    "end": "2083230"
  },
  {
    "text": "implementation of non-blocking ap is that make new threads is kind of hard but the API to use it is pretty easy so",
    "start": "2083230",
    "end": "2092080"
  },
  {
    "text": "this is pretty awesome on Android we call this main safe that means this function is safe to be",
    "start": "2092080",
    "end": "2097120"
  },
  {
    "text": "called from the main thread because we used a non-blocking api at our networking library so that's",
    "start": "2097120",
    "end": "2104080"
  },
  {
    "text": "kind of the two things that you get where they replace callbacks and they implement main safety so let's talk a",
    "start": "2104080",
    "end": "2109690"
  },
  {
    "text": "little bit I don't want to like leave you with callbacks or co-routines our magic let's like a little bit about how",
    "start": "2109690",
    "end": "2114790"
  },
  {
    "text": "Kotlin implements care routines how does this suspend and resume thing work so when you call into this suspend function",
    "start": "2114790",
    "end": "2122910"
  },
  {
    "text": "you have to kind of note on this call stack so I'm representing the call stack",
    "start": "2122910",
    "end": "2128380"
  },
  {
    "text": "with the keeps track of which functions executing down there on the bottom you have to note that you're in a suspension",
    "start": "2128380",
    "end": "2134250"
  },
  {
    "text": "somehow and every language that implements cover Keane's does this was something I'm gonna call it a suspend marker to keep",
    "start": "2134250",
    "end": "2140350"
  },
  {
    "text": "it general which I believe is not a term that anyone's ever used before so we'll",
    "start": "2140350",
    "end": "2145720"
  },
  {
    "text": "see why that's important in a second then we're going to go ahead and call load user which is going to go ahead and",
    "start": "2145720",
    "end": "2151080"
  },
  {
    "text": "kind of execute like a normal function right now right so it's gonna add a stack frame that's the thing that keeps",
    "start": "2151080",
    "end": "2156280"
  },
  {
    "text": "track of all the local variables on the stack to the stack for a load user and then it's gonna try to call this API",
    "start": "2156280",
    "end": "2162310"
  },
  {
    "text": "fetch user at this point colin has to implement suspend so the way that it",
    "start": "2162310",
    "end": "2167350"
  },
  {
    "text": "does that it's perhaps a little surprising but it's it's kind of easy once you get the hang of it is it just",
    "start": "2167350",
    "end": "2173050"
  },
  {
    "text": "copies the stack frame so you have all of the state of the currently running function on the stack right now you just",
    "start": "2173050",
    "end": "2179290"
  },
  {
    "text": "copy that over and keep any kind of this unstructured area of suspended co-routines then it's gonna go ahead and call API",
    "start": "2179290",
    "end": "2185860"
  },
  {
    "text": "fetch user and copy that stuck frame as well and then at this point all of the",
    "start": "2185860",
    "end": "2191530"
  },
  {
    "text": "Karoo teens on this thread have been suspended so this thread is completely free to actually go ahead and do other",
    "start": "2191530",
    "end": "2197740"
  },
  {
    "text": "things at this point and this is kind of like a key concept of cover teens that even though I'm doing lots and lots and lots and lots of working concurrently",
    "start": "2197740",
    "end": "2204480"
  },
  {
    "text": "I'm able to like as long as I keep each little bit of work as short I'm able to run lots of these on a single thread",
    "start": "2204480",
    "end": "2211770"
  },
  {
    "text": "then that networking library is going to go ahead and run that network request on the background thread using the more",
    "start": "2211770",
    "end": "2217570"
  },
  {
    "text": "complex mechanisms and then it's gonna give me that result via resume so to",
    "start": "2217570",
    "end": "2223120"
  },
  {
    "text": "resume you just take that stack frame that you saved earlier and you copy it back onto the call stack and just resume",
    "start": "2223120",
    "end": "2228580"
  },
  {
    "text": "execution where you left off the finish that one and then we end up back in API",
    "start": "2228580",
    "end": "2233590"
  },
  {
    "text": "fetch user with a duplicate animation there we go and so so then we just kind of head and",
    "start": "2233590",
    "end": "2241420"
  },
  {
    "text": "continue executing this code exactly the same way you execute a normal function",
    "start": "2241420",
    "end": "2246520"
  },
  {
    "text": "right so all we added was when we called that suspend function we had to do this suspend in resume operation but",
    "start": "2246520",
    "end": "2253630"
  },
  {
    "text": "everything else works the way they do used to so we've talked about atomic",
    "start": "2253630",
    "end": "2259900"
  },
  {
    "start": "2258000",
    "end": "2505000"
  },
  {
    "text": "press we talked about co-routines and then finally it's time to talk about frozen this is a really big concept and",
    "start": "2259900",
    "end": "2266110"
  },
  {
    "text": "it affects a lot of API design so earlier I had this singleton pattern which I",
    "start": "2266110",
    "end": "2272470"
  },
  {
    "text": "implemented with atomic breasts and I called freeze and I promised you I was going to talk about it later",
    "start": "2272470",
    "end": "2277690"
  },
  {
    "text": "freeze is actually really really easy to explain it just takes an object and",
    "start": "2277690",
    "end": "2284020"
  },
  {
    "text": "recursively every object that it touches and makes it immutable and that's the",
    "start": "2284020",
    "end": "2289720"
  },
  {
    "text": "end of it it just makes it immutable you can never edit this object again you can never edit anything this object touches ever again do you try to it's gonna",
    "start": "2289720",
    "end": "2296859"
  },
  {
    "text": "throw an exception at you so this is awesome so you remember all of the bugs I was showing around concurrent",
    "start": "2296859",
    "end": "2301960"
  },
  {
    "text": "modifications on multiple cores we're effectively around loading something modifying it and storing it like that's",
    "start": "2301960",
    "end": "2308380"
  },
  {
    "text": "effectively like the problem that's the thing that goes wrong between the way our CPUs work and the way that our",
    "start": "2308380",
    "end": "2313480"
  },
  {
    "text": "programming languages work so calling multi-platform moves this over to all of",
    "start": "2313480",
    "end": "2319660"
  },
  {
    "text": "the shared data must be frozen and since you can no longer edit the shared data it doesn't matter if every core has a",
    "start": "2319660",
    "end": "2325569"
  },
  {
    "text": "different copy of the same data because it's never going to change so there's no possibility you're gonna create problems here so when we go back here you can",
    "start": "2325569",
    "end": "2334300"
  },
  {
    "text": "just never end up in this state this just can't happen at all those integers were frozen there was no way to edit",
    "start": "2334300",
    "end": "2340150"
  },
  {
    "text": "them if they were shared on multiple threads and then the final I promised",
    "start": "2340150",
    "end": "2346030"
  },
  {
    "text": "there is a way to actually do work on other threads in Kotlin multi-platform it's relatively it's relatively",
    "start": "2346030",
    "end": "2352240"
  },
  {
    "text": "complicated compared to the care routine interface so typically when you're writing application code you're probably gonna hang out in the",
    "start": "2352240",
    "end": "2358270"
  },
  {
    "text": "correct enum interface most of the time that's like definitely like the API that you'll want and it'll use go routines in",
    "start": "2358270",
    "end": "2364420"
  },
  {
    "text": "kind of a single threaded way you'll say okay I'm on the main thread and I called an asynchronous Network call and then",
    "start": "2364420",
    "end": "2371020"
  },
  {
    "text": "later it's gonna resume me and sometimes you know you need to go write those network calls so there's the way to do",
    "start": "2371020",
    "end": "2376270"
  },
  {
    "text": "that so there's this worker concept in Kotlin multi-platform so at the top",
    "start": "2376270",
    "end": "2381880"
  },
  {
    "text": "there I'm allowed to pass a parameter to the worker and that parameter must be frozen right because I'm going to be passing things between threads Here I am",
    "start": "2381880",
    "end": "2388780"
  },
  {
    "text": "in one thread right now say I'm in the main thread and I'm starting a worker it's gonna be a different thread that",
    "start": "2388780",
    "end": "2394089"
  },
  {
    "text": "parameter must be something that is frozen and cannot be edited Colin very",
    "start": "2394089",
    "end": "2399250"
  },
  {
    "text": "helpfully makes integers something that automatically frees themselves which is awesome so I keys go ahead and pass",
    "start": "2399250",
    "end": "2404380"
  },
  {
    "text": "- juice I don't have to do any extra work and then I'm in the second lambda here I pass it the actual work that's",
    "start": "2404380",
    "end": "2410829"
  },
  {
    "text": "gonna be done and since I'm talking about abstract work of course just implement in Fibonacci that's like the",
    "start": "2410829",
    "end": "2415839"
  },
  {
    "text": "classic example I don't know there might be a bug I just wrote the code on the slide but at the end I can go ahead and",
    "start": "2415839",
    "end": "2422739"
  },
  {
    "text": "return a value from this work that itself must also be frozen so actually",
    "start": "2422739",
    "end": "2428589"
  },
  {
    "text": "this is going to be a compiler right here because I'm passing back a bar I think I check a lot but the the whole",
    "start": "2428589",
    "end": "2435309"
  },
  {
    "text": "the whole concept here is like by adding these these kind of hoops that you have to jump through in order to share state",
    "start": "2435309",
    "end": "2441609"
  },
  {
    "text": "between threads what you end up getting is this really nice safe environment",
    "start": "2441609",
    "end": "2447599"
  },
  {
    "text": "where you don't accidentally have heisenbugs you have to kind of like build them very intentionally by typing",
    "start": "2447599",
    "end": "2453369"
  },
  {
    "text": "a bunch of complicated api's as opposed to like that's just the way integers work every time you've ever touched them",
    "start": "2453369",
    "end": "2458559"
  },
  {
    "text": "and everyone in this room probably has a threading bug in their application like it really kind of lifts the game that's",
    "start": "2458559",
    "end": "2464079"
  },
  {
    "text": "going on with multi-threading so the core concepts of Kotlin multi-platform it allows you to share app logic and not",
    "start": "2464079",
    "end": "2471249"
  },
  {
    "text": "UI it's currently very beta let's check it out keep on next year unless you want to get involved very early",
    "start": "2471249",
    "end": "2477219"
  },
  {
    "text": "it helps us fix heisenbugs with safe threading and then if you want to take a look at that Sudoku application that's a",
    "start": "2477219",
    "end": "2484660"
  },
  {
    "text": "real sampling project you can look at my coworker Wojtek put together and it shows what a cross-platform ios and",
    "start": "2484660",
    "end": "2491559"
  },
  {
    "text": "android project might look like so thank you so much for your time and I'll be around after if you have any questions",
    "start": "2491559",
    "end": "2499430"
  },
  {
    "text": "[Applause]",
    "start": "2499430",
    "end": "2502920"
  }
]