[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "[Applause]",
    "start": "5780",
    "end": "12240"
  },
  {
    "text": "cool thanks uh hope everyone's been enjoying the conference so far um I'm going to be spending a bit of time",
    "start": "12240",
    "end": "17720"
  },
  {
    "text": "exploring reliable systems today um something I really enjoy talking about something I really enjoy working on and",
    "start": "17720",
    "end": "23400"
  },
  {
    "start": "20000",
    "end": "227000"
  },
  {
    "text": "the reason for that is simple it kind of matters it actually matters to people that software Works which is kind of",
    "start": "23400",
    "end": "29240"
  },
  {
    "text": "surprising sometimes um so can I get a show of hands if today",
    "start": "29240",
    "end": "34800"
  },
  {
    "text": "will somebody have a bad day or not be able to do their job or just get frustrated if the software that you",
    "start": "34800",
    "end": "40680"
  },
  {
    "text": "worked on stopped working right now okay most people um the the thing",
    "start": "40680",
    "end": "46520"
  },
  {
    "text": "about most software is that it does actually affect somebody um doesn't matter if it's uh a big piece of",
    "start": "46520",
    "end": "53359"
  },
  {
    "text": "software a little piece of software um for millions of users for a couple of users it tends to actually matter",
    "start": "53359",
    "end": "60760"
  },
  {
    "text": "so I I think that this is tremendously motivating it's motivating because it lets us talk about architecture and",
    "start": "60760",
    "end": "67200"
  },
  {
    "text": "techniques and reliability in a in a context of outcomes it actually matters that our software",
    "start": "67200",
    "end": "73600"
  },
  {
    "text": "works it's not talking about techniques for techniques sake or techniques because somebody else is doing it gives",
    "start": "73600",
    "end": "79119"
  },
  {
    "text": "us the context to actually make tradeoffs and actually have reasonable conversations about what we want to",
    "start": "79119",
    "end": "85280"
  },
  {
    "text": "do so let's start by talking about reliability",
    "start": "85280",
    "end": "91159"
  },
  {
    "text": "the most common definition is this idea of consistently performing well when we talk about an extreme case",
    "start": "91159",
    "end": "98079"
  },
  {
    "text": "like airline travel this is a pretty obvious property to understand performing reliably performing",
    "start": "98079",
    "end": "103600"
  },
  {
    "text": "consistently well is it would be getting a safely to our",
    "start": "103600",
    "end": "108560"
  },
  {
    "text": "destination so as a quick test let's have a re let's have a discussion about a real world",
    "start": "109799",
    "end": "115119"
  },
  {
    "text": "tradeoff we want to design a new jet and we have a choice that can have four",
    "start": "115119",
    "end": "120600"
  },
  {
    "text": "engines or it can have two engines these engines have gone through lots of Trials lots of testing lots of certifications",
    "start": "120600",
    "end": "126799"
  },
  {
    "text": "so they're really reliable engines and our plane actually only needs one engine to like kind of maintain altitude and",
    "start": "126799",
    "end": "133560"
  },
  {
    "text": "have enough thrust to keep going so can I get a show of hands for people who think we should put four engines on our",
    "start": "133560",
    "end": "140200"
  },
  {
    "text": "plane people who think we should put two engines on our plane pretty pretty surprising did I",
    "start": "140200",
    "end": "147160"
  },
  {
    "text": "hear all one living on the edge um so somewhat counter intuitively",
    "start": "147160",
    "end": "156319"
  },
  {
    "text": "or maybe not uh there are many reasons why two engines may be safer than four",
    "start": "156319",
    "end": "161480"
  },
  {
    "text": "these engines are so reliable that the chances of having two failures on the one flight is actually so small that",
    "start": "161480",
    "end": "167519"
  },
  {
    "text": "it's less of a concern than having one failure and by doubling the number of engines from four uh from two to four",
    "start": "167519",
    "end": "174000"
  },
  {
    "text": "we've actually doubled our chance of having a single failure and this single failure can have knock on consequences",
    "start": "174000",
    "end": "180480"
  },
  {
    "text": "a an engine failure could affect could damage a wing or by having four engines we have to put the engines closer to the",
    "start": "180480",
    "end": "186239"
  },
  {
    "text": "cabin and we could damage the cabin so the consequences of this failure are far more significant than",
    "start": "186239",
    "end": "191959"
  },
  {
    "text": "the chance of having multiple failures failure and reliability are",
    "start": "191959",
    "end": "198440"
  },
  {
    "text": "complicated topics we're dealing with these tradeoffs all of the time so some early takeaways we can",
    "start": "198440",
    "end": "206480"
  },
  {
    "text": "avoid failure through more Reliable Parts but that's not the whole answer because Reliable Parts can be hard",
    "start": "206480",
    "end": "213319"
  },
  {
    "text": "expensive and software rarely has this this weight of testing and certification like an airline engine we need to be",
    "start": "213319",
    "end": "220439"
  },
  {
    "text": "resilient to failure by controlling the scope and consequences of our failure we need to be able to make these trade-offs",
    "start": "220439",
    "end": "225560"
  },
  {
    "text": "all the time let's continue this idea by having a look at the statistics of failure this",
    "start": "225560",
    "end": "232560"
  },
  {
    "start": "227000",
    "end": "477000"
  },
  {
    "text": "is an exercise I find really useful to work through with people sometimes as software practitioners our statistics",
    "start": "232560",
    "end": "237680"
  },
  {
    "text": "are a bit Rusty or uh in building software we kind of just lose touch of our intuition for numbers and our",
    "start": "237680",
    "end": "244159"
  },
  {
    "text": "relationship to reliability of software so if I get have a service any service doesn't matter what service is",
    "start": "244159",
    "end": "250560"
  },
  {
    "text": "and I just arbitrarily say that it has a 10% chance of failure um today okay but",
    "start": "250560",
    "end": "256959"
  },
  {
    "text": "I really don't want to be interrupted while I'm giving my talk so let's deploy some replicas got some redundancy I'm",
    "start": "256959",
    "end": "262560"
  },
  {
    "text": "going to deploy 10 of these services so if the probability of one failure is 10% then the prob ility of a",
    "start": "262560",
    "end": "270199"
  },
  {
    "text": "system fa is .1 10 to get our availability we subtract",
    "start": "270199",
    "end": "275720"
  },
  {
    "text": "that from one we end up with 10 nines better than Google and Amazon just by deploying 10 awesome",
    "start": "275720",
    "end": "283199"
  },
  {
    "text": "winning we have to ask the question are these F really independent of each other because that's what our statistics are",
    "start": "283199",
    "end": "289680"
  },
  {
    "text": "assuming that each of these failes is independent let's have a look at what",
    "start": "289680",
    "end": "295919"
  },
  {
    "text": "happens if they're not independent the probability of failure is 10% means the probability of success or not burning to",
    "start": "295919",
    "end": "303000"
  },
  {
    "text": "the ground is 90% means the probability of all successes is 0.9 to",
    "start": "303000",
    "end": "309120"
  },
  {
    "text": "10 so that means the chance of us actually having one failure when we deploy 10 is actually 65% which is quite",
    "start": "309120",
    "end": "318120"
  },
  {
    "text": "significant and if our services have some sort of mutually assur destruction pack where if one Burns they all",
    "start": "318120",
    "end": "325080"
  },
  {
    "text": "burn then the probability of at least one fire is 65% but if one go they all",
    "start": "325080",
    "end": "330319"
  },
  {
    "text": "go so the probability of our system failure has actually risen from 10% to 65% by deploying",
    "start": "330319",
    "end": "337319"
  },
  {
    "text": "10 so without Independence having redundancy is",
    "start": "337319",
    "end": "343000"
  },
  {
    "text": "actually a liability we need to maintain this property of Independence through our whole software development life",
    "start": "343000",
    "end": "349880"
  },
  {
    "text": "cycle we have to understand that service redundancy means embracing more chance",
    "start": "349880",
    "end": "355160"
  },
  {
    "text": "of failure but it does give us an opportunity to handle those failures in more Anders",
    "start": "355160",
    "end": "361160"
  },
  {
    "text": "ways that opportunity is entirely predicated on Independence so what about more complex",
    "start": "361160",
    "end": "368160"
  },
  {
    "text": "systems again I'm going to keep saying this word independence if the worst case if we",
    "start": "368160",
    "end": "374160"
  },
  {
    "text": "have to have all three of these services available for our system to be up then the availability is M",
    "start": "374160",
    "end": "380199"
  },
  {
    "text": "multiplicative so things get pretty bad pretty quickly we're able to control the scope",
    "start": "380199",
    "end": "385720"
  },
  {
    "text": "and consequences of failure Say by gracefully degrading and just having losing a function instead of having our",
    "start": "385720",
    "end": "392240"
  },
  {
    "text": "whole system down then things get better we need to control the",
    "start": "392240",
    "end": "398120"
  },
  {
    "text": "relationships between our components or between our services in our system in order to kind of control the scope of",
    "start": "398120",
    "end": "403720"
  },
  {
    "text": "these vales and manage things and be able to trade a little failure for not having a whole system go",
    "start": "403720",
    "end": "411639"
  },
  {
    "text": "down when I've actually talked to people about this before the first question I normally get asked is this a big argument for having a",
    "start": "412199",
    "end": "418199"
  },
  {
    "text": "monolith well no it's not that simple yes the challenge of having many Network",
    "start": "418199",
    "end": "424120"
  },
  {
    "text": "calls is real but just because we don't have Network calls don't doesn't mean that we don't have to worry about",
    "start": "424120",
    "end": "429400"
  },
  {
    "text": "independence for example if one of the functions here was a search uh piece of functionality that uses lots of memory",
    "start": "429400",
    "end": "435360"
  },
  {
    "text": "and it runs out of memory and brings the whole service down it doesn't matter that it's not making doesn't matter that it's not making a network call it's",
    "start": "435360",
    "end": "442199"
  },
  {
    "text": "still going to bring our service down by putting it all together with our other features we've kind of lost control of things we've done so in a way that we",
    "start": "442199",
    "end": "449240"
  },
  {
    "text": "lose lose all of our functionality we have no way to recover service granularity gives us",
    "start": "449240",
    "end": "456479"
  },
  {
    "text": "this opportunity to trade the likelihood of a failure for the consequences of a",
    "start": "456479",
    "end": "462639"
  },
  {
    "text": "failure so we explored a bunch of trade-offs we need to be aware of redundancy granularity",
    "start": "464000",
    "end": "470280"
  },
  {
    "text": "architecture we have to be aware of all of these at the same time to be able to make our software more",
    "start": "470280",
    "end": "476440"
  },
  {
    "text": "reliable none of these are a free lunch they're all and we have to work at them so let's take these lessons to",
    "start": "476440",
    "end": "483280"
  },
  {
    "start": "477000",
    "end": "615000"
  },
  {
    "text": "actually building a system although I'm not particularly good at it I quite enjoy playing online",
    "start": "483280",
    "end": "489159"
  },
  {
    "text": "chess so it's created an interest in thinking about how we construct a reliable online chess service it's an",
    "start": "489159",
    "end": "495319"
  },
  {
    "text": "interesting problem because it isn't too big um it hopefully isn't too hard to follow um but it actually offers a lot",
    "start": "495319",
    "end": "500720"
  },
  {
    "text": "of the challenges you see in systems every day so what makes up an an online chest Service uh it's probably five key",
    "start": "500720",
    "end": "507919"
  },
  {
    "text": "functions first we have pairing so if two people jump online we need to be able to pair them up this isn't just two",
    "start": "507919",
    "end": "513719"
  },
  {
    "text": "arbitrary people there's a huge deviation in skill levels and the time length of games that people want to play",
    "start": "513719",
    "end": "519080"
  },
  {
    "text": "so we want to pair People based on the similar skill levels and the same same game duration we want to be able to play",
    "start": "519080",
    "end": "525120"
  },
  {
    "text": "the games enforce the rules see who wins want to be able to look at historical games it's always good to",
    "start": "525120",
    "end": "531360"
  },
  {
    "text": "learn from your own mistakes even better to learn from other people's mistakes we want to be able to analyze",
    "start": "531360",
    "end": "537200"
  },
  {
    "text": "games computers are quite good at chess we want to be able to have a computer show us what the best moves are again",
    "start": "537200",
    "end": "543040"
  },
  {
    "text": "helping us learn and we want to play against those engines maybe just because we really",
    "start": "543040",
    "end": "548160"
  },
  {
    "text": "like getting beaten or maybe because there aren't any other players around but playing against engine is a common",
    "start": "548160",
    "end": "555040"
  },
  {
    "text": "feature so I don't want to get into the merits of monolist vers services but",
    "start": "555160",
    "end": "561000"
  },
  {
    "text": "there are some deep impacts to be considered on all sides some of them social some of them technical but it's worth exploring the different trade-offs",
    "start": "561000",
    "end": "567279"
  },
  {
    "text": "purely from a reliability perspective we look at our online chess service and",
    "start": "567279",
    "end": "572320"
  },
  {
    "text": "all the features that's a lot of things to pack into one service and not actually that much relationship between",
    "start": "572320",
    "end": "578399"
  },
  {
    "text": "them if we look at our modes of failure that we talked about earlier the risk of failures is removed because there's no",
    "start": "578399",
    "end": "585760"
  },
  {
    "text": "interactions between Services we just have one but we've increased the consequences of failure if anything",
    "start": "585760",
    "end": "591399"
  },
  {
    "text": "happens if anything goes bad we bring the whole chest service down not",
    "start": "591399",
    "end": "596560"
  },
  {
    "text": "great but we also remove any independence of operational control it's kind of whatever the slowest feature is",
    "start": "596560",
    "end": "603120"
  },
  {
    "text": "maybe the chess engines require lots of memory lots of CPU we're now Hostage to",
    "start": "603120",
    "end": "608480"
  },
  {
    "text": "those from an operational perspective we're going to have to deploy lots of all of these services in order to deal with",
    "start": "608480",
    "end": "614560"
  },
  {
    "text": "it so an alternative approach was to break it down into Services how would we",
    "start": "614560",
    "end": "619640"
  },
  {
    "start": "615000",
    "end": "686000"
  },
  {
    "text": "go about this one of the most common mistakes I see is when people start uh moving from",
    "start": "619640",
    "end": "626600"
  },
  {
    "text": "a service based approach uh to a service based approach they start grasping for nouns so player and game more recently I",
    "start": "626600",
    "end": "634880"
  },
  {
    "text": "heard Michael nogard who you're lucky enough to hear his keynote yesterday um term this The Entity service anti",
    "start": "634880",
    "end": "640360"
  },
  {
    "text": "pattern seems pretty apt regrettably this is such a common pattern that it's ingrained in pretty much every M",
    "start": "640360",
    "end": "646519"
  },
  {
    "text": "microservices tutorial um it's in reference architectures for web service Frameworks people leap at these entity",
    "start": "646519",
    "end": "655040"
  },
  {
    "text": "Services the problem is you end up with very deep communication structures pretty much everything ends up having to",
    "start": "655040",
    "end": "662000"
  },
  {
    "text": "talk to the game service a lot of questions have to be asked how do I what",
    "start": "662000",
    "end": "667480"
  },
  {
    "text": "is the state of this game what are the current moves am I waiting for a pair am I waiting for a",
    "start": "667480",
    "end": "672839"
  },
  {
    "text": "move and a lot of the information that that game service has to maintain isn't actually to do with games it's to do",
    "start": "672839",
    "end": "678000"
  },
  {
    "text": "with the clients of those games so the game state am I waiting for a pair am I waiting for a",
    "start": "678000",
    "end": "684880"
  },
  {
    "text": "move these states are really only relevant to the intermediate services",
    "start": "685560",
    "end": "691240"
  },
  {
    "start": "686000",
    "end": "947000"
  },
  {
    "text": "what happens when the game service has an issue pretty much everything feature",
    "start": "693000",
    "end": "698320"
  },
  {
    "text": "everything explodes everything explodes really quickly it's not going to end",
    "start": "698320",
    "end": "703560"
  },
  {
    "text": "well basically we've managed to construct a system that has all the downsides of our monolith plus we have the ne extra",
    "start": "703560",
    "end": "710560"
  },
  {
    "text": "Network overhead and our complexity we need to be a little bit more deliberate about how our services",
    "start": "710560",
    "end": "716519"
  },
  {
    "text": "talk to each other so back to the drawing board a good place to start rethinking about",
    "start": "716519",
    "end": "722959"
  },
  {
    "text": "Services is starting to think about their inputs and the states and what they have to ask we've already seen when",
    "start": "722959",
    "end": "728160"
  },
  {
    "text": "Services have to ask too much of their dependencies things don't work very well so instead of reaching for game service",
    "start": "728160",
    "end": "734519"
  },
  {
    "text": "we can think about games as values that we can pass to these Services conveniently chess has a text notation",
    "start": "734519",
    "end": "739839"
  },
  {
    "text": "called PGN portable game notation that lets us represent games of Chess it's pretty handy we can pass these around",
    "start": "739839",
    "end": "746240"
  },
  {
    "text": "and this lets us have a different way of thinking about our services so instead of starting with our nouns",
    "start": "746240",
    "end": "751279"
  },
  {
    "text": "and starting with our entity Services we can kind of start with the different behaviors that we have to have in our",
    "start": "751279",
    "end": "756320"
  },
  {
    "text": "system pairing of players playing games analyzing games looking at the history of games and having a game engine so if",
    "start": "756320",
    "end": "762880"
  },
  {
    "text": "we dive into the pairing service to start with we don't even have to have much we",
    "start": "762880",
    "end": "768399"
  },
  {
    "text": "don't have to even have any chess knowledge about our pair pairing service pairing is basically just about",
    "start": "768399",
    "end": "773959"
  },
  {
    "text": "agreeing on some sort of shared identifier player one comes to the table",
    "start": "773959",
    "end": "779800"
  },
  {
    "text": "they say I want to play a game of certain length and I want to play with certain strength players another person",
    "start": "779800",
    "end": "786079"
  },
  {
    "text": "comes along the only thing that they need to agree on is what their game ID is so the pairing surface is simply",
    "start": "786079",
    "end": "791920"
  },
  {
    "text": "about negotiating the shared identifier a party who wants to be paired has to be able to communicate its",
    "start": "791920",
    "end": "798040"
  },
  {
    "text": "constraint and how it can be notified so the actual inputs to this service might look something like this notify me at",
    "start": "798040",
    "end": "803800"
  },
  {
    "text": "this URL here are my constraints these constraints are a",
    "start": "803800",
    "end": "810040"
  },
  {
    "text": "little bit chess orientated but they don't have to be this pairing service just maintains",
    "start": "810040",
    "end": "816360"
  },
  {
    "text": "an index index list of the waiting parties and then asynchronously canare up people that are similar it can maybe",
    "start": "816360",
    "end": "822959"
  },
  {
    "text": "give it a few seconds see if it can find the best match and then notify them with their game",
    "start": "822959",
    "end": "828440"
  },
  {
    "text": "ID this flows on into our game service the playing service is",
    "start": "828440",
    "end": "833600"
  },
  {
    "text": "responsible just for the inlight games a people two people have just been",
    "start": "833600",
    "end": "839759"
  },
  {
    "text": "paired up they have a shared identifier they can just go and say I want to play this game and it'll be in an initial state it doesn't matter where those",
    "start": "839759",
    "end": "846959"
  },
  {
    "text": "identifiers come from they don't even have to have come from the same service there's definitely no direct",
    "start": "846959",
    "end": "853920"
  },
  {
    "text": "relationship to the pairing service we could have a second service that's pairing human players with computer players generating a different set of",
    "start": "853920",
    "end": "860480"
  },
  {
    "text": "IDs again just passing them off to the play",
    "start": "860480",
    "end": "864680"
  },
  {
    "text": "service if we follow this logic all through our services we look at the history service history service is just",
    "start": "865680",
    "end": "871800"
  },
  {
    "text": "a static database of games it's not pointing back at the games that were played and not",
    "start": "871800",
    "end": "877519"
  },
  {
    "text": "referencing the other services it just has the values and it hands out those values so",
    "start": "877519",
    "end": "883240"
  },
  {
    "text": "when we actually go and search uh we finish a game we just pass the value of",
    "start": "883240",
    "end": "888320"
  },
  {
    "text": "that game to the history service and it'll be stored we don't actually maintain a reference the original game",
    "start": "888320",
    "end": "894079"
  },
  {
    "text": "it can get archived and removed this is really important because that means if if we are currently playing a game and",
    "start": "894079",
    "end": "901199"
  },
  {
    "text": "that service goes down we can still look at the history of our games and further if we then want to",
    "start": "901199",
    "end": "908440"
  },
  {
    "text": "analyze our games the an analysis game needs to know a little bit about Chess to set up an",
    "start": "908440",
    "end": "914040"
  },
  {
    "text": "analysis board but it can just be past a value of the",
    "start": "914040",
    "end": "919880"
  },
  {
    "text": "game this means it doesn't have to go back to the history service to interpret it our history service doesn't actually",
    "start": "920040",
    "end": "925920"
  },
  {
    "text": "have to be up in order to look at or analyze a game and more than that if I want to",
    "start": "925920",
    "end": "933000"
  },
  {
    "text": "create another feature off the back of this say I want to analyze an over theboard game I just want to pass pass",
    "start": "933000",
    "end": "939120"
  },
  {
    "text": "it a current a game state that hasn't actually been played in our system I'd be able to do that as",
    "start": "939120",
    "end": "945160"
  },
  {
    "text": "well so the takeaway here is we want to be very deliberate about how we break our system down into independent",
    "start": "945800",
    "end": "951680"
  },
  {
    "text": "responsibilities not shared nouns and one very effective way to do that is to emphasize this idea of values and",
    "start": "951680",
    "end": "958160"
  },
  {
    "text": "passing state from different services this goes against many people's intuition I see",
    "start": "958160",
    "end": "964440"
  },
  {
    "text": "people starting with some services and even if they start with this approach they then start trying to factor out everything well it's",
    "start": "964440",
    "end": "971000"
  },
  {
    "text": "commonality our playing service has games our history service has games we're pairing up games we end up back in",
    "start": "971000",
    "end": "977440"
  },
  {
    "text": "the game world we have to be more comfortable with this idea that these different Services all know about games",
    "start": "977440",
    "end": "983160"
  },
  {
    "text": "but their view of games is slightly different and that's okay and by keep",
    "start": "983160",
    "end": "988920"
  },
  {
    "text": "keeping these independent we're actually improving our overall",
    "start": "988920",
    "end": "993680"
  },
  {
    "start": "995000",
    "end": "1145000"
  },
  {
    "text": "reliability so if architecture creates opportunities for liability we have to then think about how we're going to",
    "start": "995279",
    "end": "1001480"
  },
  {
    "text": "operate these Services what do we have to actually worry about when they're running so if we take a look at our",
    "start": "1001480",
    "end": "1009480"
  },
  {
    "text": "services what happens when we see a failure",
    "start": "1009480",
    "end": "1014519"
  },
  {
    "text": "if we look at our chess engine it's the service I'd be most worried about Chess engines fa like computationally",
    "start": "1019920",
    "end": "1025438"
  },
  {
    "text": "expensive um they might fall over a lot they're fair Fairly performance critical",
    "start": "1025439",
    "end": "1030600"
  },
  {
    "text": "some of their implementations choices are sometimes a bit questionable so that's something I'm going to have to worry",
    "start": "1030600",
    "end": "1036600"
  },
  {
    "text": "about when I talk about failure of a service and I'm thinking in operational context I'm not thinking about a service",
    "start": "1036600",
    "end": "1043520"
  },
  {
    "text": "I most likely have several deployed I might be talking about all of",
    "start": "1043520",
    "end": "1049880"
  },
  {
    "text": "those being broken or I might be just talking about a single instance being uh currently being down our first job is understand what is",
    "start": "1049880",
    "end": "1057559"
  },
  {
    "text": "failing and how it's failing so that we can start to do something about it there are many useful monitoring",
    "start": "1057559",
    "end": "1064240"
  },
  {
    "text": "techniques we can apply but a simple health check on a status year role can be really effective it provides a nice",
    "start": "1064240",
    "end": "1069880"
  },
  {
    "text": "way to introspect on services and can be used to determine uh determine the health so this one has an exp expit",
    "start": "1069880",
    "end": "1076240"
  },
  {
    "text": "explicit status okay or KO if if the service is not okay or we could just say",
    "start": "1076240",
    "end": "1081400"
  },
  {
    "text": "can we contact this URL or not once we've identified what is",
    "start": "1081400",
    "end": "1086799"
  },
  {
    "text": "failing we need mechanisms to Route around that",
    "start": "1086799",
    "end": "1091840"
  },
  {
    "text": "failure this might be this might be uh different in different environments but we have to be",
    "start": "1092679",
    "end": "1098919"
  },
  {
    "text": "pretty aggressive about it if something's failing and we keep sending requests at it and we keep trying harder it's going to put more load on that make",
    "start": "1098919",
    "end": "1105440"
  },
  {
    "text": "it harder to recover we need to give some space to rest either get shut down start a new",
    "start": "1105440",
    "end": "1113400"
  },
  {
    "text": "one um and recover if we don't the likelihood is that we're going to start",
    "start": "1113400",
    "end": "1118600"
  },
  {
    "text": "cascading those failures upwards so our chest engine's going to see failure after Failure Its requests are going to",
    "start": "1118600",
    "end": "1124440"
  },
  {
    "text": "get slower because it's only succeeding one and every few times that's going to result in more requests to the engines",
    "start": "1124440",
    "end": "1131520"
  },
  {
    "text": "we're going to get more failures and more failures if we can isolate these",
    "start": "1131520",
    "end": "1137360"
  },
  {
    "text": "failures get back to returning Services normal things will get better a lot easier a lot",
    "start": "1137360",
    "end": "1144000"
  },
  {
    "text": "quicker one of the things that when people first start implementing these checks and something that I've run into",
    "start": "1144280",
    "end": "1150240"
  },
  {
    "start": "1145000",
    "end": "1314000"
  },
  {
    "text": "uh with teams a lot is this idea of entangled health checks though they have a health check and say well my service",
    "start": "1150240",
    "end": "1156679"
  },
  {
    "text": "is okay but then they say well my service is not okay and what does that actually",
    "start": "1156679",
    "end": "1163120"
  },
  {
    "text": "mean and when they've implemented that they've actually gone and enumerated all of the other services that they talk to",
    "start": "1163120",
    "end": "1169880"
  },
  {
    "text": "so my pairing service well it has all of these notify URLs are any of those notify URLs",
    "start": "1169880",
    "end": "1176440"
  },
  {
    "text": "down that's a pretty degenerate case but I've seen services that have shut themselves down because they couldn't talk to a very optional",
    "start": "1176440",
    "end": "1183200"
  },
  {
    "text": "dependency and this is something we have to watch out for we can introduce coupling during this operational",
    "start": "1183200",
    "end": "1190559"
  },
  {
    "text": "phase monitoring can be very effective um but fire is not always that clean as",
    "start": "1191760",
    "end": "1197200"
  },
  {
    "text": "well uh we kind of get this suffer from a whole bunch of bad assumptions history's given us kind of",
    "start": "1197200",
    "end": "1203360"
  },
  {
    "text": "these eight fallacies of distributed computing and there's a list of fallacies of pretty much every topic in",
    "start": "1203360",
    "end": "1209720"
  },
  {
    "text": "programming but um historically this is the one I've referred to probably the most um but there's a lot of there's",
    "start": "1209720",
    "end": "1216440"
  },
  {
    "text": "some basic techniques we can use to kind of start combating these assumptions first and foremost time out",
    "start": "1216440",
    "end": "1223880"
  },
  {
    "text": "save lives um assuming that a request will either succeed or fail straight away creates so many",
    "start": "1223880",
    "end": "1231000"
  },
  {
    "text": "problems we want to make sure we know about a failure and in many cases just going slow is as significant as a",
    "start": "1231000",
    "end": "1238120"
  },
  {
    "text": "failure in fact it can be sometimes worse because it's can be harder to recover from timeouts are so important",
    "start": "1238120",
    "end": "1243960"
  },
  {
    "text": "that we probably should have some sort of government sponsored Public Service Announcement some sort of slip slop",
    "start": "1243960",
    "end": "1250280"
  },
  {
    "text": "timeout it's that important if we fail if we time out if",
    "start": "1250280",
    "end": "1257679"
  },
  {
    "text": "we can't make a request then we do have to try and try again we have to take care and patience with that again if we",
    "start": "1257679",
    "end": "1264280"
  },
  {
    "text": "have a failure and we keep trying we're going to overload our system and make things worse uh these plots which you",
    "start": "1264280",
    "end": "1270120"
  },
  {
    "text": "probably can't see very well um with some research that Amazon published or some uh graphs that Amazon published",
    "start": "1270120",
    "end": "1276039"
  },
  {
    "text": "about um different strategies for backing off of retries doing optimistic concurrency but the same strategies work",
    "start": "1276039",
    "end": "1282760"
  },
  {
    "text": "very much from recovering from failure um their exponential back off so taking",
    "start": "1282760",
    "end": "1288600"
  },
  {
    "text": "longer and longer if we're getting more and more FES but doing that with a little bit of Randomness so we're not",
    "start": "1288600",
    "end": "1294159"
  },
  {
    "text": "everyone's not jumping on the service at the same time when they're retrying and having some in and backx boundaries so",
    "start": "1294159",
    "end": "1299240"
  },
  {
    "text": "things don't get too out of control Okay so we've got our timeouts",
    "start": "1299240",
    "end": "1306679"
  },
  {
    "text": "in place we've got our health checks we know when things are going well things can still fail right what do we actually",
    "start": "1306679",
    "end": "1313960"
  },
  {
    "text": "do the first thing to remember is that serving some serving some requests is better than serving",
    "start": "1313960",
    "end": "1319440"
  },
  {
    "start": "1314000",
    "end": "1412000"
  },
  {
    "text": "none if I look at the chess engine example uh again I might not have enough CPUs to",
    "start": "1319440",
    "end": "1326840"
  },
  {
    "text": "service all the requests so for our chest sension this might mean tapering limits it's kind of the staircase here",
    "start": "1326840",
    "end": "1334120"
  },
  {
    "text": "to remember if we can only service 30 requests at a time we don't want to send",
    "start": "1334120",
    "end": "1339400"
  },
  {
    "text": "60 requests to it and let it fall over we want to stop those requests before it gets to it this applies to things like",
    "start": "1339400",
    "end": "1345919"
  },
  {
    "text": "databases if we can only handle 100 database grps queries at a time and we have three database queries for every",
    "start": "1345919",
    "end": "1352480"
  },
  {
    "text": "HTTP request don't allow 700 HTTP requests and then hope that your database is not going to fall over Stop",
    "start": "1352480",
    "end": "1358320"
  },
  {
    "text": "Those requests as early as possible so we don't overload our systems they can recover",
    "start": "1358320",
    "end": "1363919"
  },
  {
    "text": "quicker finally if all mitigation and isolation fails and our engine service",
    "start": "1363919",
    "end": "1369279"
  },
  {
    "text": "is totally offl and unable to serve any requests we need to take more drastic",
    "start": "1369279",
    "end": "1374799"
  },
  {
    "text": "action there are lots of patterns we can apply like circuit blak Breakers to cut off communication to our engine service",
    "start": "1374799",
    "end": "1380880"
  },
  {
    "text": "and hopefully let to recover but more important than that we have to understand holistically what this actually means for our total service so",
    "start": "1380880",
    "end": "1387840"
  },
  {
    "text": "that means thinking about things right through to the user interface if our computer engines are",
    "start": "1387840",
    "end": "1392960"
  },
  {
    "text": "offline the play computer button probably doesn't make much sense having people click this button and then just",
    "start": "1392960",
    "end": "1399080"
  },
  {
    "text": "get a Fue message isn't going to help being able to remove it from the interface or disable it temporarily when",
    "start": "1399080",
    "end": "1404640"
  },
  {
    "text": "we know these services are offline is a very useful tool to have in our belt",
    "start": "1404640",
    "end": "1410440"
  },
  {
    "start": "1412000",
    "end": "1450000"
  },
  {
    "text": "okay recapping quickly we need to understand what is",
    "start": "1412080",
    "end": "1418559"
  },
  {
    "text": "failing first of all we have monitoring health checks a whole bunch of techniques to help us identify is it a",
    "start": "1418559",
    "end": "1424760"
  },
  {
    "text": "single instance is it lots of instances what is actually failing when we've identified it we want",
    "start": "1424760",
    "end": "1430320"
  },
  {
    "text": "to Route around that failure as quickly and effectively as possible we don't want to keep piling traffic on our",
    "start": "1430320",
    "end": "1435559"
  },
  {
    "text": "failing resource if we're faced with a question where we",
    "start": "1435559",
    "end": "1441080"
  },
  {
    "text": "can't serve all of our requests we're better off failing some than failing everything because we try too",
    "start": "1441080",
    "end": "1447919"
  },
  {
    "text": "hard one of the ways to do that is to set limits and set safe limits so work within our",
    "start": "1447919",
    "end": "1455240"
  },
  {
    "start": "1450000",
    "end": "1495000"
  },
  {
    "text": "capacities and ultimately being reliable sometimes involves reaching out to your",
    "start": "1455679",
    "end": "1461120"
  },
  {
    "text": "clients any time we can degrade gracefully or negotiate some uh",
    "start": "1461120",
    "end": "1467640"
  },
  {
    "text": "variability our service um we are able to maintain independence of service if it's a matter of them not getting this",
    "start": "1467640",
    "end": "1474440"
  },
  {
    "text": "field right now or our whole service being offline um hopefully people can make fairly sensible decisions about",
    "start": "1474440",
    "end": "1482679"
  },
  {
    "text": "that changing",
    "start": "1483360",
    "end": "1486799"
  },
  {
    "text": "systems one of the big big differences between uh I started by talking about",
    "start": "1489039",
    "end": "1494840"
  },
  {
    "text": "airline travel those engines are tested built and built to tolerance over and over and",
    "start": "1494840",
    "end": "1501240"
  },
  {
    "text": "over and over again they don't often have to change the engines mid-flight but that's what we're constantly having",
    "start": "1501240",
    "end": "1507440"
  },
  {
    "text": "to do that that's what we're having to constantly do when we're changing",
    "start": "1507440",
    "end": "1513960"
  },
  {
    "text": "software and that introduces its own challenges to",
    "start": "1513960",
    "end": "1518720"
  },
  {
    "text": "reliability whether we've created my ideal independent set of services or we",
    "start": "1520399",
    "end": "1525720"
  },
  {
    "text": "actually just have one big service it doesn't actually matter this this dependence on change management actually",
    "start": "1525720",
    "end": "1532880"
  },
  {
    "text": "hampers hampers reliability of all shapes and forms over time we're not going to have",
    "start": "1532880",
    "end": "1538799"
  },
  {
    "text": "one instance we're going to have many in production over time we're going to keep deploying keep changing and each of",
    "start": "1538799",
    "end": "1544840"
  },
  {
    "text": "those is coupled in its own way if we take a look at our pairing service we don't have one we have many all at a",
    "start": "1544840",
    "end": "1551760"
  },
  {
    "text": "specific version those Services probably depend on some persistent data store",
    "start": "1551760",
    "end": "1559360"
  },
  {
    "text": "so when we deploy a new version they tends to be coupled through that data store the old versions using the same",
    "start": "1559360",
    "end": "1566480"
  },
  {
    "text": "data as the new version this introduces all sorts of",
    "start": "1566480",
    "end": "1571960"
  },
  {
    "text": "complications we're also coupling through the interface when we have two versions up there are services that are depending",
    "start": "1571960",
    "end": "1578919"
  },
  {
    "text": "on consistent semantics consistent structure from these services so this change over time is a",
    "start": "1578919",
    "end": "1585000"
  },
  {
    "text": "big deal if we create it if if we draw it as a black or white problem where we have",
    "start": "1585000",
    "end": "1590399"
  },
  {
    "text": "old or new we kind of introduce an unreasonable dependence on the results of our",
    "start": "1590399",
    "end": "1595640"
  },
  {
    "text": "service there's a cliff that we have to jump off every time we deploy is it going to work this time is",
    "start": "1595640",
    "end": "1601919"
  },
  {
    "text": "it the same as last time is it okay and these interactions are very difficult to test for it doesn't take",
    "start": "1601919",
    "end": "1608320"
  },
  {
    "text": "long before we've got a couple of servic up and the permutations of versions in production become infeasible to test um",
    "start": "1608320",
    "end": "1615120"
  },
  {
    "text": "in advance um we might have several environments all at different versions",
    "start": "1615120",
    "end": "1620720"
  },
  {
    "text": "that you're going to hit a case where you oh this one and this one didn't work together what do we actually want to",
    "start": "1620720",
    "end": "1627039"
  },
  {
    "text": "do basically we want to avoid the situation where we have these discrete jumps going from version one to version",
    "start": "1627039",
    "end": "1634200"
  },
  {
    "text": "two and hoping that it's going to work we want to create situations where we can gracefully roll things out and",
    "start": "1634200",
    "end": "1640840"
  },
  {
    "text": "flatten out this time Dimension having a version being able to deploy the new version",
    "start": "1640840",
    "end": "1646559"
  },
  {
    "text": "safely have both working in parallel and eventually switch over to the new one or if things aren't going so well deploy",
    "start": "1646559",
    "end": "1654279"
  },
  {
    "text": "one get the old one out and if it doesn't work go back to the old version",
    "start": "1654279",
    "end": "1659760"
  },
  {
    "text": "but we have to be able to do this gracefully and there has to be some techniques that we apply to do it because it's not that",
    "start": "1659760",
    "end": "1666679"
  },
  {
    "text": "straightforward the first thing that's useful to be able to do is this idea of in production verification it's actually probably one",
    "start": "1666679",
    "end": "1673080"
  },
  {
    "start": "1667000",
    "end": "1777000"
  },
  {
    "text": "of the harder techniques to get right because it it requires a little bit of thought a little bit of restructuring of",
    "start": "1673080",
    "end": "1679960"
  },
  {
    "text": "your data model to support it what we want to be able to do is have two versions in production but have the data",
    "start": "1679960",
    "end": "1687399"
  },
  {
    "text": "stores be independent we want to be able to have a routing source that can replicate traffic so when we get a request we want",
    "start": "1687399",
    "end": "1695440"
  },
  {
    "text": "to send that request to both of the services have those Services provide an",
    "start": "1695440",
    "end": "1700480"
  },
  {
    "text": "answer and then verify are these answers both the same or are they within some",
    "start": "1700480",
    "end": "1705679"
  },
  {
    "text": "tolerance or what are they going to do or if it's bad kind of go well something's something's wrong",
    "start": "1705679",
    "end": "1713000"
  },
  {
    "text": "here there's really no substitute for being able to test against live traffic I've been in a number of situations",
    "start": "1713000",
    "end": "1719000"
  },
  {
    "text": "where I've inherited large code bases that had lots and lots of traffic very few",
    "start": "1719000",
    "end": "1724279"
  },
  {
    "text": "tests it was a choice between working out ways in which we could test against live traffic or never changing anything",
    "start": "1724279",
    "end": "1731880"
  },
  {
    "text": "because we were so paralyzed by fear that if we if we deployed something we would break some something we had",
    "start": "1731880",
    "end": "1738279"
  },
  {
    "text": "hundreds of hundreds of URLs questionable semantics not very many",
    "start": "1738279",
    "end": "1743360"
  },
  {
    "text": "tests this doesn't have to be live we could use logs to replicate it um and",
    "start": "1743360",
    "end": "1749399"
  },
  {
    "text": "there are certain service designs that kind of make this easier so a pair service it was asynchronously returning",
    "start": "1749399",
    "end": "1755960"
  },
  {
    "text": "the results saying here's an identifier for our pair this is actually a really easy case to test this with because we",
    "start": "1755960",
    "end": "1762600"
  },
  {
    "text": "can send all the pair requests to both Services get all the pair responses from",
    "start": "1762600",
    "end": "1768200"
  },
  {
    "text": "the two services and just kind of compare and Shuffle it's a great way to build",
    "start": "1768200",
    "end": "1773720"
  },
  {
    "text": "confidence in a service next we want to in extend this",
    "start": "1773720",
    "end": "1779880"
  },
  {
    "start": "1777000",
    "end": "1813000"
  },
  {
    "text": "to incremental deployment it's a slightly different setup where if we have two versions in",
    "start": "1779880",
    "end": "1785840"
  },
  {
    "text": "production they're both using the real data source right we just want to offload a small proportion of requests",
    "start": "1785840",
    "end": "1792600"
  },
  {
    "text": "to the new version until we're confident in it so again we have to have some sort of intelligent routing service",
    "start": "1792600",
    "end": "1798960"
  },
  {
    "text": "um maybe we don't even have every request going maybe it's just a certain type of request until we build up confidence in this new version we might",
    "start": "1798960",
    "end": "1807000"
  },
  {
    "text": "want to send traffic most traffic to the old version a little bit of traffic to the new",
    "start": "1807000",
    "end": "1813080"
  },
  {
    "text": "version once we have this in place if we can understand success of a service uh",
    "start": "1813559",
    "end": "1818679"
  },
  {
    "text": "then we can kind of start migrating things quicker is it just that the responses are okay or they're not okay",
    "start": "1818679",
    "end": "1825919"
  },
  {
    "text": "that's a really crude one but we can go further starting to validate the structure of our responses actually",
    "start": "1825919",
    "end": "1832000"
  },
  {
    "text": "verifying things as they're happening in production or having key indicators like well it should only take less than two",
    "start": "1832000",
    "end": "1838679"
  },
  {
    "text": "seconds to find a pair most of the time when we deploy this new service is it going faster or slower than the old",
    "start": "1838679",
    "end": "1845480"
  },
  {
    "text": "service if we can build confidence we can start routing traffic building up until we can get all of our traffic to",
    "start": "1845480",
    "end": "1852000"
  },
  {
    "text": "the end if things aren't going well then we can kind of roll back",
    "start": "1852000",
    "end": "1859919"
  },
  {
    "text": "these techniques aren't revolutionary people have been doing it for a long time I'm sure some of you are doing some of these",
    "start": "1860799",
    "end": "1866559"
  },
  {
    "text": "techniques however when we talk about these techniques a lot of the time we talk about using them for big",
    "start": "1866559",
    "end": "1872200"
  },
  {
    "text": "deployments or people who have lots of customers or are really worried about up time but this is can be a technique that",
    "start": "1872200",
    "end": "1878559"
  },
  {
    "text": "we can use even on small code basis just to build confidence I like the I like asking this",
    "start": "1878559",
    "end": "1885159"
  },
  {
    "text": "question could you survive shipping a bad line of code this is something I think we'd all",
    "start": "1885159",
    "end": "1891279"
  },
  {
    "text": "like to not be scared of we can work really hard we can test our code we can",
    "start": "1891279",
    "end": "1897159"
  },
  {
    "text": "try to verify and be very careful but eventually a bad line of code will get",
    "start": "1897159",
    "end": "1902360"
  },
  {
    "text": "through and what do we want to happen by using some of these techniques or having",
    "start": "1902360",
    "end": "1907600"
  },
  {
    "text": "some of these structures in place we can actually protect ourselves and cover cover ourselves from these cases it",
    "start": "1907600",
    "end": "1913840"
  },
  {
    "text": "doesn't matter if it's a small appp some of these aren't that hard to set up",
    "start": "1913840",
    "end": "1919840"
  },
  {
    "text": "so I've talked a lot about deploying code and this presents some serious challenges in itself but the problem is",
    "start": "1920840",
    "end": "1928080"
  },
  {
    "text": "deeper and more challenged if you start to incorporate data into this how do we migrate data how do we change our",
    "start": "1928080",
    "end": "1935760"
  },
  {
    "text": "databases in order to tackle these issues it's kind of very important that we kind of deal with these problems",
    "start": "1935760",
    "end": "1942279"
  },
  {
    "text": "independently one of my pet hates is services that use the local file system",
    "start": "1942279",
    "end": "1947360"
  },
  {
    "text": "for their storage or their P their persistence um pretty much every development tool ever the number of",
    "start": "1947360",
    "end": "1953240"
  },
  {
    "text": "times I've worked in a company where the hardest to deploy service was their CI server because it only used the local",
    "start": "1953240",
    "end": "1958880"
  },
  {
    "text": "dis is amazing to me it happens and keeps happening time and time again I mean it's easy to understand the",
    "start": "1958880",
    "end": "1965840"
  },
  {
    "text": "file system is attractive it's pretty it's easy to test it's easy to understand it's easy to",
    "start": "1965840",
    "end": "1971919"
  },
  {
    "text": "replicate but actually makes things really complicated when we start thinking about reliable services in",
    "start": "1971919",
    "end": "1978200"
  },
  {
    "text": "production we can't just start a replica of the service we can't shut down or restart the service without care we",
    "start": "1978200",
    "end": "1984639"
  },
  {
    "text": "often can't run multiple versions at the same time we really want to tease apart this",
    "start": "1984639",
    "end": "1989960"
  },
  {
    "text": "handling of data into reliable data storage there are nice patterns for doing High availability databases we",
    "start": "1989960",
    "end": "1995799"
  },
  {
    "text": "want to deal with that as a separate problem than with our code rather than coupling them together on the same",
    "start": "1995799",
    "end": "2001519"
  },
  {
    "text": "server this also comes up in infrastructure problems I see a lot of people now",
    "start": "2001519",
    "end": "2007799"
  },
  {
    "text": "running kubernetes and one of the things that they do is they assume that there's only ever going to be one",
    "start": "2007799",
    "end": "2013399"
  },
  {
    "text": "cluster but there's a lot of things that are actually really hard to migrate so I've seen people who've gone okay we've",
    "start": "2013399",
    "end": "2020360"
  },
  {
    "text": "got kubernetes or we should have deployed it with some TLS Mutual TLS between services but actually rolling",
    "start": "2020360",
    "end": "2027320"
  },
  {
    "text": "outo onto their cluster is actually a really hard exercise and so you have to rebuild a whole new cluster but then",
    "start": "2027320",
    "end": "2033399"
  },
  {
    "text": "they realize well we actually can't have two clusters in production it doesn't work so again we're in this situation",
    "start": "2033399",
    "end": "2039480"
  },
  {
    "text": "where we have to take a big dive off of a cliff and hope that we don't break things we want to be careful anytime",
    "start": "2039480",
    "end": "2045159"
  },
  {
    "text": "there's a singular in our infrastructure in our",
    "start": "2045159",
    "end": "2049799"
  },
  {
    "text": "deployment okay got a long way into building this system and no one has asked me to do the impossible yet it",
    "start": "2051240",
    "end": "2058520"
  },
  {
    "start": "2052000",
    "end": "2406000"
  },
  {
    "text": "doesn't seem very realistic when I'm at work people are always asking me to do impossible things let's do something",
    "start": "2058520",
    "end": "2064599"
  },
  {
    "text": "impossible how do we construct a reliable system from things that are just not",
    "start": "2064599",
    "end": "2071638"
  },
  {
    "text": "reliable so a little disclaimer first it's based on a true story um it",
    "start": "2071639",
    "end": "2077158"
  },
  {
    "text": "happened to me it could happen to you really um I've changed the context to",
    "start": "2077159",
    "end": "2083040"
  },
  {
    "text": "protect the innocent um also to work better with my chess example um but this is about a machine learning library just",
    "start": "2083040",
    "end": "2088839"
  },
  {
    "text": "a slightly different one over the last few years there's been",
    "start": "2088839",
    "end": "2093919"
  },
  {
    "text": "a revolution in chess engines um we've been we've moved from a where chess engines like uh traditionally stockfish",
    "start": "2093919",
    "end": "2100320"
  },
  {
    "text": "and kodo they're super strong because computers are really fast they just work really hard they basically Brute Force",
    "start": "2100320",
    "end": "2106720"
  },
  {
    "text": "calculate what's the best move right now but newer um machine learning based",
    "start": "2106720",
    "end": "2112640"
  },
  {
    "text": "chess engines like Alpha zero turned this on on its head Alpha zero last year beat stockfish in a 100 game match 28 to",
    "start": "2112640",
    "end": "2120920"
  },
  {
    "text": "nil this is significant because um it's really strong but it's also significant",
    "start": "2120920",
    "end": "2127119"
  },
  {
    "text": "because zero didn't learn by trying really hard it learned by playing lots of games this means that it plays moves",
    "start": "2127119",
    "end": "2133640"
  },
  {
    "text": "that are more familiar to humans or more feel more natural and it also has led to a cottage",
    "start": "2133640",
    "end": "2141320"
  },
  {
    "text": "industry of people trying to reimplement it just like every machine learning library ever somebody has never written",
    "start": "2141320",
    "end": "2147520"
  },
  {
    "text": "python before goes and tries to implement a python version of alpha",
    "start": "2147520",
    "end": "2153000"
  },
  {
    "text": "zero this is great it's awesome people can have fun they can play around did it",
    "start": "2153000",
    "end": "2159319"
  },
  {
    "text": "on the weekend in a few hours Carefree didn't run any tests because it didn't matter I'm having fun it's awesome cool",
    "start": "2159319",
    "end": "2166640"
  },
  {
    "text": "it even works sometimes it's cool yep what's the worst Could Happen well I'm",
    "start": "2166640",
    "end": "2173040"
  },
  {
    "text": "going to put in production it's all good so how would we",
    "start": "2173040",
    "end": "2178800"
  },
  {
    "text": "go about shipping this piece of code and to say that um it's unreliable would be an understatement the chance of it",
    "start": "2178800",
    "end": "2185079"
  },
  {
    "text": "actually working while I'm here on stage would be you know pretty much non-existent if I ran it 10 times it",
    "start": "2185079",
    "end": "2190680"
  },
  {
    "text": "probably fails eight times um yeah and it doesn't just fail um they've done what I didn't like they didn't separate",
    "start": "2190680",
    "end": "2196720"
  },
  {
    "text": "out the computation and data they used the local file system um they didn't even use a format they just pickle some",
    "start": "2196720",
    "end": "2202119"
  },
  {
    "text": "data structures and put them down gets pretty bad when it crashes it often crops that data store because it just",
    "start": "2202119",
    "end": "2208359"
  },
  {
    "text": "it's halfway through writing it doesn't really work and then it loses all its memory so you have to retrain it",
    "start": "2208359",
    "end": "2214040"
  },
  {
    "text": "and it's pretty bad what do we actually do so if I was faced with this problem and",
    "start": "2214040",
    "end": "2221800"
  },
  {
    "text": "I might have been um a way to do this is to create a",
    "start": "2221800",
    "end": "2227440"
  },
  {
    "text": "proxy to take control of the interactions with this unreliable piece of code we want to use this proxy to create",
    "start": "2227440",
    "end": "2234480"
  },
  {
    "text": "a more reliable view of data so how this the training of these engines work is that basically it's playing a game and",
    "start": "2234480",
    "end": "2240280"
  },
  {
    "text": "then a game and a game so instead of just passing the games onto the onto the",
    "start": "2240280",
    "end": "2245920"
  },
  {
    "text": "library what we're going to do is we're going to going to create an immutable log or an pendon log of every game that",
    "start": "2245920",
    "end": "2251359"
  },
  {
    "text": "we've played so we've got our textual representation of games we're going to have some some reliable storage that we",
    "start": "2251359",
    "end": "2257160"
  },
  {
    "text": "can keep these games I'm going to have a log that just keeps going and ever going forever that way when it fails and it",
    "start": "2257160",
    "end": "2264280"
  },
  {
    "text": "will fail we can just discard the library let it corrupt its storage throw it away and then we can in turn kind of",
    "start": "2264280",
    "end": "2271560"
  },
  {
    "text": "rebuild the state of the engine from our log and replay it so by doing this we've created a",
    "start": "2271560",
    "end": "2278920"
  },
  {
    "text": "little independent Universe where we can kind of trust that the service is going to act",
    "start": "2278920",
    "end": "2284240"
  },
  {
    "text": "responsibly it's going to keep giving us answers it's going to be a little bit slow because it has to rebuild every now and again but that's okay we don't have",
    "start": "2284240",
    "end": "2291000"
  },
  {
    "text": "to deal with it constantly crashing and constantly being unusable once we've created this",
    "start": "2291000",
    "end": "2297960"
  },
  {
    "text": "Independence then we can go about trying to recover our um our availability",
    "start": "2297960",
    "end": "2303640"
  },
  {
    "text": "so probability fa of two goes from % to 64% not too bad get it up to 10 we're",
    "start": "2303640",
    "end": "2311560"
  },
  {
    "text": "back to 10% 20 back to 1% experimental chess",
    "start": "2311560",
    "end": "2316599"
  },
  {
    "text": "engine I'm pretty happy with this but we could keep going just trading operational cost for my",
    "start": "2316599",
    "end": "2322920"
  },
  {
    "text": "sleep it's fairly good tradeoff so this idea of reliability",
    "start": "2322920",
    "end": "2330079"
  },
  {
    "text": "being not just about reliability is important to me um it's about being confident it's about being confident",
    "start": "2330079",
    "end": "2336520"
  },
  {
    "text": "that I can change code it's about being confident that uh I can recover if a bad piece of code actually",
    "start": "2336520",
    "end": "2342880"
  },
  {
    "text": "slips through um I like to be relaxed about",
    "start": "2342880",
    "end": "2347880"
  },
  {
    "text": "things just to go through some of the key points we want to avoid failure through more Reliable Parts but we want",
    "start": "2348920",
    "end": "2355760"
  },
  {
    "text": "to do more than that if our parts do fail you we want to be resilient we want to control the",
    "start": "2355760",
    "end": "2361200"
  },
  {
    "text": "scope and the consequences of those vales being redundant means having more",
    "start": "2361200",
    "end": "2367079"
  },
  {
    "text": "Val Val but more ways to deal with those values we have to think about our",
    "start": "2367079",
    "end": "2373160"
  },
  {
    "text": "architecture it's our one opportunity for controlling the interactions controlling the scope of",
    "start": "2373160",
    "end": "2380160"
  },
  {
    "text": "failure we want to care we want to think very carefully about service granularity we're here we're trading the",
    "start": "2380480",
    "end": "2386440"
  },
  {
    "text": "likelihood of a failure against the consequences of a",
    "start": "2386440",
    "end": "2390640"
  },
  {
    "text": "failure basically we want to take all of these and make a good decision for our service it's not going to be the same",
    "start": "2391480",
    "end": "2397560"
  },
  {
    "text": "for everyone but if we have these all all of these tools at our disposal we can make some good",
    "start": "2397560",
    "end": "2404920"
  },
  {
    "text": "decisions so bit of a whirlwind lots of different concepts um there's lots of",
    "start": "2405119",
    "end": "2411040"
  },
  {
    "start": "2406000",
    "end": "2441000"
  },
  {
    "text": "places where you can read more about about these um there's probably been a whole bunch of them already mentioned at",
    "start": "2411040",
    "end": "2417240"
  },
  {
    "text": "this conference uh but I just wanted to present this through a fairly narrow",
    "start": "2417240",
    "end": "2423040"
  },
  {
    "text": "lens I just wanted to worry about reliability and keeping my services up hopefully that's a different way to",
    "start": "2423040",
    "end": "2428440"
  },
  {
    "text": "think about it um hopefully it's useful to some people um thanks",
    "start": "2428440",
    "end": "2435359"
  }
]