[
  {
    "text": "hello all right um so today we're going to talk about how to verify distributed",
    "start": "4400",
    "end": "9519"
  },
  {
    "text": "systems we all want to build really cool things but at the end of the day if our customers are unhappy because we're having an outage um you know we're all",
    "start": "9519",
    "end": "16880"
  },
  {
    "text": "going to have a bad time and we're probably not going to have a job for much longer so um let's get started so",
    "start": "16880",
    "end": "22439"
  },
  {
    "text": "I'm Kenny mcaffrey um I'm a distributed systems engineer I work at Twitter this is where you can find me on the internet",
    "start": "22439",
    "end": "28720"
  },
  {
    "text": "uh my DMs are open on Twitter so if you have a question um that you don't want to ask publicly on the internet feel",
    "start": "28720",
    "end": "34200"
  },
  {
    "text": "free to um like shoot me a DM I totally like to talk to people on the internet I think it's fun um so yeah let's get",
    "start": "34200",
    "end": "41360"
  },
  {
    "text": "started so I wrote this article uh that was published in acmq at the end of last year and was also published in the",
    "start": "41360",
    "end": "47399"
  },
  {
    "text": "communications of the ACM uh in February of this year and it's called the verification of a distributed system and",
    "start": "47399",
    "end": "52719"
  },
  {
    "text": "so this is like the talk format of this article um with a lot more fun stories",
    "start": "52719",
    "end": "58519"
  },
  {
    "text": "and like you know maybe a little more ranting because you have to like keep your together when you write for the ACM so if you would like to read",
    "start": "58519",
    "end": "65518"
  },
  {
    "text": "this it's online or like after the fact uh but yeah let's get started so the motivation of this is uh you know this",
    "start": "65519",
    "end": "71840"
  },
  {
    "text": "is a distributed systems talk so let's start with a quote from Leslie Lamport because what talk about distributed systems is complete without one uh a",
    "start": "71840",
    "end": "79240"
  },
  {
    "text": "distributed system is one in which the failure of a computer you didn't know existed can render your own computer unusable so this is how Leslie defined",
    "start": "79240",
    "end": "86360"
  },
  {
    "text": "distribut systems like back in the day uh but this is obviously not acceptable anymore right you can't just be like oh",
    "start": "86360",
    "end": "92079"
  },
  {
    "text": "this computer on the internet went down and like sorry we're having a major outage like you can't tweet or like play",
    "start": "92079",
    "end": "97399"
  },
  {
    "text": "Halo or like watch Westworld like that's not cool so um we have to do better",
    "start": "97399",
    "end": "102759"
  },
  {
    "text": "these days and so this this talk is hopefully going to help um increase your repertoire of different tactics that we",
    "start": "102759",
    "end": "108119"
  },
  {
    "text": "can use and maybe um give you some more um change your perspective on different things of testing that you I used to",
    "start": "108119",
    "end": "113399"
  },
  {
    "text": "think were not um that valuable uh I just want to also briefly pause to say",
    "start": "113399",
    "end": "119200"
  },
  {
    "text": "today we are building distributed systems so even if you're not working on a distributed database or writing an implementation of raft uh we all are it",
    "start": "119200",
    "end": "126240"
  },
  {
    "text": "could be something simple where you have clients and a horizontally stateful service or stateless service and then a a database that you're talking to um it",
    "start": "126240",
    "end": "133520"
  },
  {
    "text": "could be super complicated like uh all the microservices that we have at Twitter and this is like one of our call",
    "start": "133520",
    "end": "138920"
  },
  {
    "text": "graphs from Zipkin um or it could be something that you happen to inherit that's a bunch of things duct taped",
    "start": "138920",
    "end": "145680"
  },
  {
    "text": "together this is from Kota hail I stole this from him or borrowed it I to say um",
    "start": "145680",
    "end": "151040"
  },
  {
    "text": "but like these things have to work right like we they have to work um because",
    "start": "151040",
    "end": "156200"
  },
  {
    "text": "presumably you have customers or you were building this for a business of some sort and we want to make our users",
    "start": "156200",
    "end": "162080"
  },
  {
    "text": "happy okay so how do we do this uh in this talk we're going to start with uh a",
    "start": "162080",
    "end": "167239"
  },
  {
    "text": "brief uh a really quick overview of formal verification I think it's interesting this is the academic term uh",
    "start": "167239",
    "end": "173000"
  },
  {
    "text": "inz mentioned it in her talk as well um just in case you haven't seen it or you want to go down that rabbit hole then",
    "start": "173000",
    "end": "178879"
  },
  {
    "text": "we're going to talk about things that I think are a little more practical that you might actually use uh I call this testing in the wild this is things that",
    "start": "178879",
    "end": "184680"
  },
  {
    "text": "will give us the confidence that our system is correct but it's not mathematically provably correct and then I'm going to talk about some research",
    "start": "184680",
    "end": "190720"
  },
  {
    "text": "that I think is super cool that's happening um because I really like Partnerships with Academia and Industry",
    "start": "190720",
    "end": "196000"
  },
  {
    "text": "I do a lot of tech transfer stuff and uh this is sort of where I see uh hopefully",
    "start": "196000",
    "end": "201080"
  },
  {
    "text": "research can help us and make our jobs as practitioners Easier by providing better tools so that we can verify our",
    "start": "201080",
    "end": "207200"
  },
  {
    "text": "systems more easily I'm going to go really quickly through a bunch of stuff I have a uh a",
    "start": "207200",
    "end": "213080"
  },
  {
    "text": "repo on GitHub which has all of the references for this don't worry about trying to get the URL I'll tweet it out",
    "start": "213080",
    "end": "218120"
  },
  {
    "text": "after and it'll be on a slide bigger at the end um but don't worry about trying to take notes and yeah let's get started",
    "start": "218120",
    "end": "224360"
  },
  {
    "text": "so formal verification so this is the idea that our systems are provably correct and what it's doing here is it's",
    "start": "224360",
    "end": "231000"
  },
  {
    "text": "using typically propositional logic some form of that propositional logic and Mathematics um to prove that the system",
    "start": "231000",
    "end": "237519"
  },
  {
    "text": "Mis correct you'll go through a model Checker or through a t a a theorem improver and then like at the end of the day like what comes out is like you know",
    "start": "237519",
    "end": "243920"
  },
  {
    "text": "it works because math right so that's cool um this is like the Holy Grail um",
    "start": "243920",
    "end": "249400"
  },
  {
    "text": "so what you typically will hear are formal specification languages and two of the more popular ones that you might",
    "start": "249400",
    "end": "254599"
  },
  {
    "text": "have heard of are t plus uh which Leslie Lamport invented and uh and so the",
    "start": "254599",
    "end": "261320"
  },
  {
    "text": "idea here is that you write your specification in some form of propositional logic these are all sort of like domain specific languages and",
    "start": "261320",
    "end": "268040"
  },
  {
    "text": "then um or they have their own language and you write it and then you either use a proof assistant to prove that it is",
    "start": "268040",
    "end": "273520"
  },
  {
    "text": "correct or you run a model Checker which will exhaustively check the entire State space of inputs into the system and then",
    "start": "273520",
    "end": "279400"
  },
  {
    "text": "prove that is correct these model Checkers take a long time to run so they're not a deal um but it's not",
    "start": "279400",
    "end": "284600"
  },
  {
    "text": "actually that terrible like you hear a lot of horrible things about um formal specifications this is an example of TLA",
    "start": "284600",
    "end": "290400"
  },
  {
    "text": "plus this is an hour clock specification it's actually from this PDF book that Leslie Lamport wrote that's online for",
    "start": "290400",
    "end": "295840"
  },
  {
    "text": "free called specifying systems and what he did is in propositional logic uh he defined an hour clock so this is just",
    "start": "295840",
    "end": "302680"
  },
  {
    "text": "the idea of if you have a clock that just tells you what hour it is and it only goes from 1 to 12 and then like",
    "start": "302680",
    "end": "308800"
  },
  {
    "text": "back again because it's not a 24-hour clock so what he says is we have this variable hour right and it extends",
    "start": "308800",
    "end": "314800"
  },
  {
    "text": "natural numbers so that's you know all positive numbers uh and then in addition",
    "start": "314800",
    "end": "320440"
  },
  {
    "text": "we go and we Define hours we break hours down to be only the numbers 1 through 12",
    "start": "320440",
    "end": "325639"
  },
  {
    "text": "in the natural number set so we've already limited our space there and then we basically Define how hour can change",
    "start": "325639",
    "end": "331840"
  },
  {
    "text": "so the hour can change if it's um 12 it should go back to one otherwise it",
    "start": "331840",
    "end": "337680"
  },
  {
    "text": "should be you know the the next hour Prime should be hour plus one um and then you go through and you add this",
    "start": "337680",
    "end": "343720"
  },
  {
    "text": "time information and this basically proves that if you like that an hour clock written to the specification is",
    "start": "343720",
    "end": "349639"
  },
  {
    "text": "correct and will only display the number 1 through 12 um and then roll back again so that's that's cool it looks kind of",
    "start": "349639",
    "end": "354880"
  },
  {
    "text": "like code it's not that scary why I actually mention it in this talk is because Amazon in 2014 released",
    "start": "354880",
    "end": "361600"
  },
  {
    "text": "a paper discussing how they used t+ to verify 10 plus core pieces of their infrastructure including S3 so this is",
    "start": "361600",
    "end": "369000"
  },
  {
    "text": "really cool I think because Amazon actually took the time and they went and had a bunch of Engineers learn formal",
    "start": "369000",
    "end": "375400"
  },
  {
    "text": "specification in TLA plus like this is a doable thing uh you don't have to be an academic to do this uh and then they",
    "start": "375400",
    "end": "381759"
  },
  {
    "text": "went and they wrote the specifications for uh 10 core pieces of infrastructure and they say that these",
    "start": "381759",
    "end": "388039"
  },
  {
    "text": "this was a huge success for them because uh in their planning meetings and when they did a retro of like this whole",
    "start": "388039",
    "end": "393440"
  },
  {
    "text": "investment of time and they said basically they found two really serious bugs which sounds like nothing except",
    "start": "393440",
    "end": "399440"
  },
  {
    "text": "for the fact they think they would have never found them otherwise so this is this is U reducing the unknown unknown",
    "start": "399440",
    "end": "405680"
  },
  {
    "text": "space if you went to in's talk before because they wouldn't have found this this would have been a catastrophic incident that they would have only",
    "start": "405680",
    "end": "411360"
  },
  {
    "text": "discovered after the fact um they uh then it also the other big thing that this gave them is it",
    "start": "411360",
    "end": "417080"
  },
  {
    "text": "increased their confidence to make really aggressive op optimizations in their system and so they were uh more",
    "start": "417080",
    "end": "424319"
  },
  {
    "text": "confident in making these really aggressive optimizations to reduce cost or performance and um they still knew",
    "start": "424319",
    "end": "429879"
  },
  {
    "text": "their system was correct because they had this proof this logical proof that told them it was correct um so Leslie lampart also says",
    "start": "429879",
    "end": "437280"
  },
  {
    "text": "in specifying systems when talking about tlaa plus just like it's a good idea to design your system before you build it",
    "start": "437280",
    "end": "442919"
  },
  {
    "text": "um like we write a design doc or if you're a test driven developer um you like tdd you might do that and that's",
    "start": "442919",
    "end": "448639"
  },
  {
    "text": "like sort of your design for how the system should work whatever uh thinking about your project upfront you do um",
    "start": "448639",
    "end": "454639"
  },
  {
    "text": "specifying using ta+ as another one um it will help clarify your understanding of the system and therefore expose bugs",
    "start": "454639",
    "end": "461599"
  },
  {
    "text": "to you because you're being forced to think about this in a very rigorous manner right and so what they actually found in the Amazon paper is that they",
    "start": "461599",
    "end": "468919"
  },
  {
    "text": "discovered a lot of these bugs by just writing the specifications they didn't even put it through a model Checker or through the proof assistant because",
    "start": "468919",
    "end": "475440"
  },
  {
    "text": "their Engineers just had to think about it so rigorously that they then realized hey there's a hole here that we missed",
    "start": "475440",
    "end": "481240"
  },
  {
    "text": "and here's an edge case we missed and they were able to correct the bugs that way so that's pretty cool the biggest",
    "start": "481240",
    "end": "487319"
  },
  {
    "text": "complaint about formal methods tends to be that you are writing a proof in something that is not code that you can",
    "start": "487319",
    "end": "493360"
  },
  {
    "text": "execute and so that's problematic right because you spend all this time you write this whole proof you're like it's perfect and then you're like someone has",
    "start": "493360",
    "end": "499759"
  },
  {
    "text": "to go implement it and obviously we aren't perfect at implementing things right like that's where bugs come from in the first place and then your test",
    "start": "499759",
    "end": "506080"
  },
  {
    "text": "case or your code that you now write like could have a bug in it um or maybe maybe the runtime doesn't have the same",
    "start": "506080",
    "end": "511280"
  },
  {
    "text": "assumption baked into it that you wrote in your specification and so like there's this impedance mismatch of I spent all this time doing this thing but",
    "start": "511280",
    "end": "517919"
  },
  {
    "text": "I still have to write code which could have a bug in it because I'm not perfect at translating um but what is interesting",
    "start": "517919",
    "end": "524839"
  },
  {
    "text": "is that um if you use co uh which is a different language it actually can generate uh you can actually extract",
    "start": "524839",
    "end": "530680"
  },
  {
    "text": "code um in O camel because it runs a subset of O camel so it's not a turning complete language so you can you can't",
    "start": "530680",
    "end": "536279"
  },
  {
    "text": "do everything but you can do a lot of things and so at pole which is is a conference um a programming languages",
    "start": "536279",
    "end": "541640"
  },
  {
    "text": "conference this year they P there were two papers that were published that actually went and implemented something",
    "start": "541640",
    "end": "546800"
  },
  {
    "text": "in and then extracted the code and they ran it so I think this is super cool because basically we've now gotten",
    "start": "546800",
    "end": "552560"
  },
  {
    "text": "to this or we're starting to make progress in the space of I write a specification I know it's act absolutely",
    "start": "552560",
    "end": "558519"
  },
  {
    "text": "correct and then I push a button and all the code is generated and then I just deploy it and runs that's pretty cool um",
    "start": "558519",
    "end": "564839"
  },
  {
    "text": "so what they did just to give you a quick example one of the papers was uh they went and wrote The Raft consensus",
    "start": "564839",
    "end": "570880"
  },
  {
    "text": "protocol uh you may be familiar with raft rapid is a consensus protocol it's like um paxos or Zab but it's a more",
    "start": "570880",
    "end": "577800"
  },
  {
    "text": "understandable one and there was actually never a rigorous proof done of it because uh like it just the the guy",
    "start": "577800",
    "end": "583399"
  },
  {
    "text": "didn't have time he like graduated so um so what some grad students at you dubb",
    "start": "583399",
    "end": "588800"
  },
  {
    "text": "did I believe University of Washington yeah is they went and they wrote the proof in and then they actually",
    "start": "588800",
    "end": "593959"
  },
  {
    "text": "generated the code and they ran it as a consensus algorithm and it worked which is cool um I mean and so this isn't",
    "start": "593959",
    "end": "599079"
  },
  {
    "text": "talking performance and we're not going into that but just the fact that we are getting good enough that we can have um",
    "start": "599079",
    "end": "604360"
  },
  {
    "text": "take you know more of a semantic interpretation which is this formal specification and generate code is",
    "start": "604360",
    "end": "610440"
  },
  {
    "text": "really cool to me and really exciting and then there was another one where they also went and they wrote a database",
    "start": "610440",
    "end": "615600"
  },
  {
    "text": "a key value store in they generated the O camel they deployed it they ran and I think they ran some Benchmark",
    "start": "615600",
    "end": "620959"
  },
  {
    "text": "against it it was pretty slow but like this is actually an exciting world because you can then start thinking",
    "start": "620959",
    "end": "626800"
  },
  {
    "text": "about well this is another area of research where compilers can go and optimize this so I think that gives me a ton of Hope for the future but like you",
    "start": "626800",
    "end": "633320"
  },
  {
    "text": "know what are we doing now cuz we're like in this world where I don't have that and like I have to hit my deadline",
    "start": "633320",
    "end": "638839"
  },
  {
    "text": "and ship some code and like do things that make people happy so how how do we you know get from formal verification to",
    "start": "638839",
    "end": "645639"
  },
  {
    "text": "like seems pretty legit like ship it right um okay so I'm going to go",
    "start": "645639",
    "end": "652639"
  },
  {
    "text": "through a bunch of stuff uh that I use in my day-to-day and that I hope either you are already using or um and then L",
    "start": "652639",
    "end": "659800"
  },
  {
    "text": "we'll go through like into the more like uh artisanal stuff I guess it's actually not that hard at the end that you can",
    "start": "659800",
    "end": "665000"
  },
  {
    "text": "Implement into your day-to-day life um or hopefully take back to your teams and Implement and increase the confidence of the systems you're making so unit tests",
    "start": "665000",
    "end": "672079"
  },
  {
    "text": "I think everyone is familiar with unit tests I'm just going to briefly Define them is like this is a thing that can be ran as part of your continuous",
    "start": "672079",
    "end": "678560"
  },
  {
    "text": "integration it doesn't require an environment it just needs like CPU and a computer to run on um this is super",
    "start": "678560",
    "end": "683720"
  },
  {
    "text": "useful for verifying basic functionality and error cases this is something you're basically taught as a software developer like right youit cases so fine um do",
    "start": "683720",
    "end": "692560"
  },
  {
    "text": "that but the reason I bring it up in this talk is because there was this great paper in 2014 that came out and",
    "start": "692560",
    "end": "698920"
  },
  {
    "text": "this was a great another great Partnership of Academia being interested in what is happening in Industry today",
    "start": "698920",
    "end": "704680"
  },
  {
    "text": "so these researchers went and they analyzed open five open source systems um Cassandra hbas hdfs map ruce and",
    "start": "704680",
    "end": "711480"
  },
  {
    "text": "redis these are all open source they went and looked at the code and looked at the error logs or sorry the the bugs",
    "start": "711480",
    "end": "718160"
  },
  {
    "text": "that were filed for all the these code bases and they randomly sampled 198 bugs and then they went through and they sort",
    "start": "718160",
    "end": "724160"
  },
  {
    "text": "of like tried to reproduce all of them or figure out what the fix was and then they wanted to come up with some",
    "start": "724160",
    "end": "729680"
  },
  {
    "text": "conclusions because the goal of this paper was to understand like where can we dedicate research effort into helping practitioners do a better job of making",
    "start": "729680",
    "end": "736600"
  },
  {
    "text": "reliable systems they also picked a very heavy sample of catastrophic failure and catastrophic failure means data loss um",
    "start": "736600",
    "end": "743480"
  },
  {
    "text": "huge outage Etc so like real bad times okay so one of the things that",
    "start": "743480",
    "end": "748639"
  },
  {
    "text": "they found one of the core things that was super surprising to me when I read this is 77% of the production failures could be reproduced by a unit test",
    "start": "748639",
    "end": "755360"
  },
  {
    "text": "alone so while that sounds a little snarky um it it does lead to that we",
    "start": "755360",
    "end": "761040"
  },
  {
    "text": "could do a better job of unit testing but what it does give me too is some of this is like you can't be totally Clairvoyant right every unit test possible Right like we're not going to",
    "start": "761040",
    "end": "767199"
  },
  {
    "text": "do that that takes way too much time now we're going into the model checking realm what it does mean though is that",
    "start": "767199",
    "end": "772519"
  },
  {
    "text": "when you do have a major outage I think it's worth spending time thinking about what unit test could we add to our c or",
    "start": "772519",
    "end": "779560"
  },
  {
    "text": "to our our test passes to verify that this never happens again it's actually not the worst to reproduce you can't",
    "start": "779560",
    "end": "785920"
  },
  {
    "text": "actually prevent this from happening by just adding a unit test case um this is the more actionable",
    "start": "785920",
    "end": "791880"
  },
  {
    "text": "thing I think where they found 35% of the catastrophic failures Rec called by what I like to call developer laziness",
    "start": "791880",
    "end": "797959"
  },
  {
    "text": "um it's it's Error handling code is simply empty or only contains a log statement um Air Handlers abort the",
    "start": "797959",
    "end": "804959"
  },
  {
    "text": "cluster on an overly General exception so this one's kind of harder to catch but it's basically just they're like e like any catch any exception and just",
    "start": "804959",
    "end": "811760"
  },
  {
    "text": "like throw and like everything barfs um and then there's also the error Handler which is contain comments like fix me or",
    "start": "811760",
    "end": "817440"
  },
  {
    "text": "to do um I mean I were I worked in a codebase bunch that had like this really great comment that I found like straight",
    "start": "817440",
    "end": "823279"
  },
  {
    "text": "out of school that was like Hey Joe please fix K thanks bye and I was like cool um so that's really problematic",
    "start": "823279",
    "end": "830519"
  },
  {
    "text": "right that like this is stuff that's actually pretty low hanging fruit that we could go and fix on our own I also",
    "start": "830519",
    "end": "835720"
  },
  {
    "text": "thought what was interesting is they found um other things that were basically like all of the most of the bugs 58% of the catastro fil so more",
    "start": "835720",
    "end": "842880"
  },
  {
    "text": "than half were actually caused by improper testing of error handling code that could be could catch this so for me",
    "start": "842880",
    "end": "849680"
  },
  {
    "text": "what I've done with my teams now is we actually use code coverage um I was always sort of like on the fence I'm like yeah like whatever it's like a",
    "start": "849680",
    "end": "855480"
  },
  {
    "text": "thing like no one cares um but what code coverage does tell you is that there are big gaps and espe especially if you can",
    "start": "855480",
    "end": "861800"
  },
  {
    "text": "have it run as part of like your um code review process if you check that at least the new code introduced actually",
    "start": "861800",
    "end": "868440"
  },
  {
    "text": "tests all the error hand lane you're going to have a better idea that like your developers have rigorously thought",
    "start": "868440",
    "end": "873720"
  },
  {
    "text": "through like hey what could go wrong because it's actually really not that hard to write the golden pass scenary",
    "start": "873720",
    "end": "878759"
  },
  {
    "text": "we're all really good at that at this point when it gets to distributed systems though what H when like stuff hits a fan right like is when the error",
    "start": "878759",
    "end": "886000"
  },
  {
    "text": "case happens and that's the part that's actually harder to think through and generally takes more time and so it require should have a test case to go",
    "start": "886000",
    "end": "892000"
  },
  {
    "text": "along with it okay um I'm going to pause really quick and have a bit of a ran festo um",
    "start": "892000",
    "end": "899040"
  },
  {
    "text": "types are not testing yeah um so I actually really",
    "start": "899040",
    "end": "904920"
  },
  {
    "text": "like typed languages I actually don't really like dynamically typed programming languages I program in like everything though like I I've shipped",
    "start": "904920",
    "end": "911120"
  },
  {
    "text": "code in 10 plus languages so like whatever so I just want to put my bias out there I really like type programming",
    "start": "911120",
    "end": "916600"
  },
  {
    "text": "languages personally um but they are not testing because types can only uh",
    "start": "916600",
    "end": "922079"
  },
  {
    "text": "basically verify a compile time the expressiveness of your type system and we don't have any type system out there",
    "start": "922079",
    "end": "927440"
  },
  {
    "text": "today that can capture the mantics of what you meant so this is a really dumb example in Scola um where I made a",
    "start": "927440",
    "end": "933720"
  },
  {
    "text": "function called add and instead it actually multiplies so this seems super stupid but there's like all these things",
    "start": "933720",
    "end": "939079"
  },
  {
    "text": "where like the type system is like it's cool but like a test case would catch this right um another fun fact that's",
    "start": "939079",
    "end": "945440"
  },
  {
    "text": "like maybe more real world is I was doing um a code review with a younger developer and he was super into type",
    "start": "945440",
    "end": "951160"
  },
  {
    "text": "systems and he really like type there in and he was like yeah like you don't have to type your you don't have to write test cases you don't have to like do all",
    "start": "951160",
    "end": "956880"
  },
  {
    "text": "this like boring stuff and then he like submitted this code review and he's like I don't need test the type system",
    "start": "956880",
    "end": "962319"
  },
  {
    "text": "prevents me from needing a test here and I was like okay and so I'm like doing the code review and I actually found an",
    "start": "962319",
    "end": "967560"
  },
  {
    "text": "infinite recursion bug by just doing code review and so I like you know responded back and I'm like hey I think",
    "start": "967560",
    "end": "972680"
  },
  {
    "text": "you have like I think you don't have a base case I don't think it stops Rec cursing if like it just retries forever and that's bad because your stack will",
    "start": "972680",
    "end": "978600"
  },
  {
    "text": "blow up on the jvm and then like sad times um and so I just added this comment pointing out I was like hey",
    "start": "978600",
    "end": "984480"
  },
  {
    "text": "could you please at least like add a test case at it you know the code stops recursing um we don't up the stack and",
    "start": "984480",
    "end": "990480"
  },
  {
    "text": "he was like oh yeah and so I like hope at least that made an impression on him that like right like type systems are not the end all be all they are not",
    "start": "990480",
    "end": "997040"
  },
  {
    "text": "expressive enough yet for us to not have to write test cases still also TCP doesn't give a about your type",
    "start": "997040",
    "end": "1003319"
  },
  {
    "text": "system um so and this comes back to you know",
    "start": "1003319",
    "end": "1008959"
  },
  {
    "text": "you know distributed systems where it's like right we can maybe like build something that compiles and runs on one machine and is like correct maybe we'll",
    "start": "1008959",
    "end": "1015279"
  },
  {
    "text": "get there soon um but like going over the wire like all bets are off cuz you have asynchronous networks you have partial failure um and so when we come",
    "start": "1015279",
    "end": "1022319"
  },
  {
    "text": "to distributed systems we are not in a world where we can just write a bunch of Scola or Haso or like whatever type system you or type programming language",
    "start": "1022319",
    "end": "1028760"
  },
  {
    "text": "you really love and not write any test cases so this sort of brings me to my next topic integration tests um so this",
    "start": "1028760",
    "end": "1035798"
  },
  {
    "text": "is basically you know you have a bunch of nodes you might have some tiny environment whether that's a bunch of Docker containers running on your local",
    "start": "1035799",
    "end": "1042000"
  },
  {
    "text": "machine or an actual deployed environment in the cloud and they talk to each other so this is super important",
    "start": "1042000",
    "end": "1047038"
  },
  {
    "text": "because integration tests are really testing the boundaries and like these assumptions you've made generally",
    "start": "1047039",
    "end": "1052320"
  },
  {
    "text": "between other teams um and so one of my favorite integration test stories that we caught when I was working on Halo 4",
    "start": "1052320",
    "end": "1058880"
  },
  {
    "text": "is I was running the statistics service and um we actually did a rewrite of everything and uh because of reasons",
    "start": "1058880",
    "end": "1066679"
  },
  {
    "text": "that I'm not going to get into but um what we did is like I was launching the new service in our developer environment",
    "start": "1066679",
    "end": "1072720"
  },
  {
    "text": "and all the game clients started hitting it and I you know I noticed this thing I'm like the game's sending us the stats at the end of the game of like you know",
    "start": "1072720",
    "end": "1077840"
  },
  {
    "text": "how many head shots and did you win and all the wonderful things you did if you're really good at Halo um it would",
    "start": "1077840",
    "end": "1083799"
  },
  {
    "text": "upload them three times like they kept failing and I'm like this is super weird because it's totally saying returning a 200 and saying it did it and so the",
    "start": "1083799",
    "end": "1090919"
  },
  {
    "text": "network developer and I argued for like three days I think over this about who's fault it was like whether it was my",
    "start": "1090919",
    "end": "1096200"
  },
  {
    "text": "fault or whether it was his fault and um and then finally at the end I had this like just because I had like gone",
    "start": "1096200",
    "end": "1101559"
  },
  {
    "text": "through spelunking and the old codebase I found this thing where in the payload the old codebase actually used to put",
    "start": "1101559",
    "end": "1107320"
  },
  {
    "text": "the word done in all C exclamation point in the payload response and so I put that in and then",
    "start": "1107320",
    "end": "1113320"
  },
  {
    "text": "they only sent it once miraculously and I was like oh that's cool so the spec on the old game was actually like you know",
    "start": "1113320",
    "end": "1119000"
  },
  {
    "text": "they didn't have I mean this is like an old Xbox game they didn't actually have like proper HTP this has nothing to do with the old game being bad it was just",
    "start": "1119000",
    "end": "1125039"
  },
  {
    "text": "the spec that I was building for was different than this the spec the game code was operating on so we actually did",
    "start": "1125039",
    "end": "1130280"
  },
  {
    "text": "fix it and it looked at the HTP 200 and the new code um but this is like how you test those boundaries and expose all",
    "start": "1130280",
    "end": "1136400"
  },
  {
    "text": "these assumptions that we make okay the other thing that I think going",
    "start": "1136400",
    "end": "1142120"
  },
  {
    "text": "back to the simple testing can prevent most critical failures paper that they discovered is three nodes are less can",
    "start": "1142120",
    "end": "1147679"
  },
  {
    "text": "could reproduce 90% of the failures that they saw so this is super huge like this totally blew my mind because I I was",
    "start": "1147679",
    "end": "1154400"
  },
  {
    "text": "sort of always under the impression that you needed a production scale system to reproduce these catastrophic failures",
    "start": "1154400",
    "end": "1159880"
  },
  {
    "text": "it's not true you actually don't this is like the level of like I can run this on my laptop right I can run three nodes on",
    "start": "1159880",
    "end": "1166159"
  },
  {
    "text": "my laptop and test them and inject failure and which we'll get to and then prove that this system is still reliable",
    "start": "1166159",
    "end": "1172679"
  },
  {
    "text": "so we can do a better job at a lower cost um and we don't have to build out these huge staging environments we can",
    "start": "1172679",
    "end": "1179039"
  },
  {
    "text": "literally run really small scale ones okay so that's sort of the basics",
    "start": "1179039",
    "end": "1184679"
  },
  {
    "text": "uh what I want to get into now is this other form of testing which I really enjoy it's called property based testing",
    "start": "1184679",
    "end": "1190559"
  },
  {
    "text": "it's actually inspired by model Checkers in formal uh verifications so the idea behind a model Checker is you have a",
    "start": "1190559",
    "end": "1196280"
  },
  {
    "text": "state space of all the inputs and it's huge and you run all of them and property based testing takes that idea except for it just sort of randomly",
    "start": "1196280",
    "end": "1202600"
  },
  {
    "text": "generates the input um and you into the properties that you define and so you can like limit it to run like a 100 test",
    "start": "1202600",
    "end": "1209240"
  },
  {
    "text": "cases or a thousand and so then it's not like going to sit there and run for days it'll just run for a couple seconds um",
    "start": "1209240",
    "end": "1216039"
  },
  {
    "text": "so this is really cool because it's actually very accessible now like this is one of the things that I started doing with my current team uh and it",
    "start": "1216039",
    "end": "1222840"
  },
  {
    "text": "actually helped us find a bunch of bugs because partly because it forces you to more rigorously think through uh your",
    "start": "1222840",
    "end": "1228080"
  },
  {
    "text": "test cases uh but basically the the way this started was with quick check and quick",
    "start": "1228080",
    "end": "1233200"
  },
  {
    "text": "check was invented by John Hughes and so basically what you do is you define this specification instead of a test case and",
    "start": "1233200",
    "end": "1238280"
  },
  {
    "text": "I'll show you example it's really not scary and then you have a tool that generates all this input and then if it",
    "start": "1238280",
    "end": "1244280"
  },
  {
    "text": "finds a failing case it'll report it to the user and uh what Quick Check does and and Scholar check and most of these",
    "start": "1244280",
    "end": "1250799"
  },
  {
    "text": "have is something that will then like reduce the state space like if it took a",
    "start": "1250799",
    "end": "1256039"
  },
  {
    "text": "thousand inputs for it to find the error it'll actually shrink it to the smallest number so that you don't have like cognitive overload trying to debug step",
    "start": "1256039",
    "end": "1262600"
  },
  {
    "text": "through like a thousand different inputs um quick check has been actually super popular in Industry um riok which",
    "start": "1262600",
    "end": "1269400"
  },
  {
    "text": "is a distributed nosql database used it to model their eventual consistent consistent data store and they found a",
    "start": "1269400",
    "end": "1274919"
  },
  {
    "text": "bunch of bugs there's a bunch of really cool talks that I link in my um in my references section um in 2015 uh John uh",
    "start": "1274919",
    "end": "1282640"
  },
  {
    "text": "John Hughes published a paper about how he used quick check to find bugs in Volvo cars so this is something when we",
    "start": "1282640",
    "end": "1288000"
  },
  {
    "text": "start talking about like real objects that are operating in the physical world that like have an impact on people's",
    "start": "1288000",
    "end": "1293200"
  },
  {
    "text": "like mortality maybe we need to be more you know rigorous with our testing um and then he also in February 2016 uh",
    "start": "1293200",
    "end": "1300200"
  },
  {
    "text": "published a paper where he used it he works in conjunction with these things it's not like he just goes around and breaks stuff and then like laughs at people um he ran it in Dropbox against",
    "start": "1300200",
    "end": "1308760"
  },
  {
    "text": "Dropbox and found a couple really critical bugs so this is really cool um so yeah you can do it there's one",
    "start": "1308760",
    "end": "1314240"
  },
  {
    "text": "scholar check is great for the jvm and then there's like all of these like implementations for like pick your favorite language um I'm using an in go",
    "start": "1314240",
    "end": "1321480"
  },
  {
    "text": "right now so that's cool anyway this is a scholar chap example just to give you an idea of what it looks like uh so the",
    "start": "1321480",
    "end": "1327320"
  },
  {
    "text": "first one is basically saying that all of the integers are between zero and 100 this one's super stupid I think but it",
    "start": "1327320",
    "end": "1333880"
  },
  {
    "text": "just shows you the outline you just say you know for all of the integers that I've input into this thing um make sure",
    "start": "1333880",
    "end": "1341000"
  },
  {
    "text": "that they're between zero and 100 and like return false if it's not so that's trivially going to pass what I think is more interesting is the second one where",
    "start": "1341000",
    "end": "1347679"
  },
  {
    "text": "it says reversal L list or reverse of list right and the reverse of the reverse of the list should equal the list and so this is cool because like",
    "start": "1347679",
    "end": "1354240"
  },
  {
    "text": "for things where you're doing um reverses or translations um in serialization and deserialization you",
    "start": "1354240",
    "end": "1360400"
  },
  {
    "text": "can like generate all these like really complex objects throw it through the serializer D sterilizer like scholar",
    "start": "1360400",
    "end": "1365919"
  },
  {
    "text": "check or whatever will do it for you and then you can find if you have any weird edge cases like oh I didn't know there's going to be like a nil there like like",
    "start": "1365919",
    "end": "1372440"
  },
  {
    "text": "um for instance uh I am using this with uh Thrift so we use Thrift at Twitter to",
    "start": "1372440",
    "end": "1377640"
  },
  {
    "text": "communicate as our B Ary format and so we serialize it into an application object and then we like to serialize it back out but I'm using uh because we're",
    "start": "1377640",
    "end": "1384480"
  },
  {
    "text": "writing some go which I'm less familiar with the go thrift implementation because I haven't been using it as much",
    "start": "1384480",
    "end": "1390200"
  },
  {
    "text": "I like wasn't sure what it set some of the defaults to and so I just you know wrote wrote a property based test and",
    "start": "1390200",
    "end": "1395480"
  },
  {
    "text": "then like ran it and I was like oh like that's a nil pointer cool like fix and then like we kept going um but it was",
    "start": "1395480",
    "end": "1401679"
  },
  {
    "text": "super easy and super fast and this is literally like the same amount of effort as run a test case except for you get to explore a much larger stat space so this",
    "start": "1401679",
    "end": "1409159"
  },
  {
    "text": "is one of the ones that I would highly recommend using if you are not already Okay so this one is uh fault",
    "start": "1409159",
    "end": "1416919"
  },
  {
    "text": "injection testing is I think Super critical for distributed systems because what we're doing is like we the idea of",
    "start": "1416919",
    "end": "1423559"
  },
  {
    "text": "resilient systems and having something that can stay up and survive a failure is that you know it survives one machine or more being down and so if we don't",
    "start": "1423559",
    "end": "1431240"
  },
  {
    "text": "explicitly test that there is no reason we should have any confidence that it'll operate correctly in Failure modes right",
    "start": "1431240",
    "end": "1438200"
  },
  {
    "text": "like if you don't force the system to fail like why do you think it's going to work at 3:00 a.m. when the data center goes down if you've never tested that um",
    "start": "1438200",
    "end": "1446360"
  },
  {
    "text": "this is the stuff that's really really hard to get right so Vault injection testing I think is really interesting",
    "start": "1446360",
    "end": "1451960"
  },
  {
    "text": "because there are are once again a wide range of spec a wide spectrum of like investment in terms of like time and",
    "start": "1451960",
    "end": "1457919"
  },
  {
    "text": "money that you can spend into using false injection testing and the results are generally like really positive even",
    "start": "1457919",
    "end": "1463080"
  },
  {
    "text": "with the lowest level you find a lot of bugs so uh Netflix has a semi an army I",
    "start": "1463080",
    "end": "1468240"
  },
  {
    "text": "think think people are pretty you know used to this but this is a kind of fault injection testing so chaos monkey killed an instance that injected A Fault by",
    "start": "1468240",
    "end": "1474399"
  },
  {
    "text": "taking down a node they also have latency monkey which uh introduces artificial latency into the system so",
    "start": "1474399",
    "end": "1480360"
  },
  {
    "text": "that's inting a fault by like delaying a message um or you know dropping a packet",
    "start": "1480360",
    "end": "1485960"
  },
  {
    "text": "and then chaos gorilla took down an entire availability zone so that's how they're testing that their systems stay",
    "start": "1485960",
    "end": "1492360"
  },
  {
    "text": "up another one that I think is super fun is jebson um so Kyle kingsberry runs",
    "start": "1492360",
    "end": "1497440"
  },
  {
    "text": "jebson um tests and what he does is he basically jumps in as a tool that injects faults into a network um",
    "start": "1497440",
    "end": "1504760"
  },
  {
    "text": "partitions and he test he tends to test a lot of databases right so he's tested  he's tested Kafka he's tested uh C",
    "start": "1504760",
    "end": "1512000"
  },
  {
    "text": "Cassandra and volti be you can now pay Kyle to test your um databases if you",
    "start": "1512000",
    "end": "1517039"
  },
  {
    "text": "want to do that or your systems this is all also open source you could go use it if you wanted to as well and he has a",
    "start": "1517039",
    "end": "1523600"
  },
  {
    "text": "documentation um but basically Kyle sorted this is a side project CU he really like distributed systems and was",
    "start": "1523600",
    "end": "1528640"
  },
  {
    "text": "like hey there's like all this great stuffff that's open source out there but he was like you know I don't really see a lot of proof that these databases are",
    "start": "1528640",
    "end": "1535440"
  },
  {
    "text": "like upholding the claims that they guarantee because like where are the test Suites like who proved this like",
    "start": "1535440",
    "end": "1541120"
  },
  {
    "text": "where's the verification and there wasn't any so he sort of started with this nice like here's the world we live in and we thought it was all fine but it",
    "start": "1541120",
    "end": "1546919"
  },
  {
    "text": "really looks like this um and so like he he has found a lot of really",
    "start": "1546919",
    "end": "1552520"
  },
  {
    "text": "catastrophic bugs in a lot of really um big databases and open source projects and the good news is is that Kyle",
    "start": "1552520",
    "end": "1558320"
  },
  {
    "text": "basically goes and tests these and then files very detailed bug reports and usually these things get fixed so like I",
    "start": "1558320",
    "end": "1563679"
  },
  {
    "text": "think he found a bunch in and then like uh filed all the bug reports a lot of them got fixed he retested it he",
    "start": "1563679",
    "end": "1568760"
  },
  {
    "text": "found a couple more but like right like they're making progress in the right direction so the purpose of all of this is not to like shame people for getting",
    "start": "1568760",
    "end": "1575200"
  },
  {
    "text": "anything wrong because what we're doing is fundamentally very very hard it is to help us learn and get better and grow",
    "start": "1575200",
    "end": "1582039"
  },
  {
    "text": "and evolve how we build systems and build better systems in the future um so I really like this project the blog",
    "start": "1582039",
    "end": "1588640"
  },
  {
    "text": "posts are also really interesting and a great education uh if you want go to the early ones they have like really funny",
    "start": "1588640",
    "end": "1594200"
  },
  {
    "text": "pop culture references they're a little more buttoned up now that he gets paid to do this so um anyway but yeah so",
    "start": "1594200",
    "end": "1599240"
  },
  {
    "text": "these are great um I just want to pause really quickly and say doing all of",
    "start": "1599240",
    "end": "1605399"
  },
  {
    "text": "these things unit test integration tests fault injection tests none of these ensure that your system is correct right",
    "start": "1605399",
    "end": "1610559"
  },
  {
    "text": "we aren't the gold standard of formal specifications but it does greatly increase our confidence so you still may",
    "start": "1610559",
    "end": "1617320"
  },
  {
    "text": "you may do all of these things and be like it's perfect it passed a Jepson test like it must not have any bugs in",
    "start": "1617320",
    "end": "1622440"
  },
  {
    "text": "it and that's not true that just means it didn't find any bugs right and so we have greater confidence that more of the state space has been explored you um and",
    "start": "1622440",
    "end": "1630440"
  },
  {
    "text": "so that we can uh that we have a greater confidence that we like have shrink that like unknown unknown amount of stuff",
    "start": "1630440",
    "end": "1636640"
  },
  {
    "text": "that's going to happen to be very small okay so another one that I think",
    "start": "1636640",
    "end": "1641840"
  },
  {
    "text": "is super interesting is game days and this not only tests your infrastructure and your",
    "start": "1641840",
    "end": "1648440"
  },
  {
    "text": "systems but also your process which I think is really important especially when it comes to operations so game names were developed um by Jesse Robbins",
    "start": "1648440",
    "end": "1655480"
  },
  {
    "text": "at Amazon in the 2000s he actually had this really cool title called the master of",
    "start": "1655480",
    "end": "1660559"
  },
  {
    "text": "disaster and so what he would do is he would tell Engineers you know in three to four months there's going to be a major outage and then he would take an",
    "start": "1660559",
    "end": "1667240"
  },
  {
    "text": "out a data center um in like some weird way like one time he actually mimicked a fire in a data center to eliminate a",
    "start": "1667240",
    "end": "1674519"
  },
  {
    "text": "significant amount of capacity and so what what the purpose of running a game days it helps you uncover uh hidden",
    "start": "1674519",
    "end": "1680919"
  },
  {
    "text": "dependencies um so they talk about one time they took out you know a Sal paollo Data Center and one in Mexico got",
    "start": "1680919",
    "end": "1687279"
  },
  {
    "text": "affected and that's super weird or they like took out a Data Center and it actually was the only data center that their paging ran out of and so they got",
    "start": "1687279",
    "end": "1693399"
  },
  {
    "text": "no Pages um so that's really bad but these are things that you're finding and you're doing in a controlled environment",
    "start": "1693399",
    "end": "1699240"
  },
  {
    "text": "so it's not as bad um and it's also like not at 3: in the morning um so like and",
    "start": "1699240",
    "end": "1704880"
  },
  {
    "text": "it helps you test your process so how do you run a game day right uh so so first it it is crucial that you tell people",
    "start": "1704880",
    "end": "1710360"
  },
  {
    "text": "you are doing this do not just be like I'm going to run a game day like pull the plug um",
    "start": "1710360",
    "end": "1715919"
  },
  {
    "text": "tell people because the idea here is that by just by communicating failure by putting it at the Forefront um right it",
    "start": "1715919",
    "end": "1722880"
  },
  {
    "text": "makes people think about it and therefore they're going to like Harden their designs and really think about like oh if that data center goes down",
    "start": "1722880",
    "end": "1728039"
  },
  {
    "text": "like what might break and so they can get prepared ahead of time um people also hate you less um you then induce",
    "start": "1728039",
    "end": "1734840"
  },
  {
    "text": "the failure at some predetermined point of time you monitor the systems under test so monitoring is a critical",
    "start": "1734840",
    "end": "1740159"
  },
  {
    "text": "component to this and then typically the way they run this if you're running it formally is you have an observing only team so they're not doing anything",
    "start": "1740159",
    "end": "1746960"
  },
  {
    "text": "they're not touching laptop well they might be touching laptops but they're not touching computers in the prod system they're not mucking with any of",
    "start": "1746960",
    "end": "1752120"
  },
  {
    "text": "that all they're doing is they're sitting there in the WHL room or like on whatever chat Channel you happen to use",
    "start": "1752120",
    "end": "1757919"
  },
  {
    "text": "to deal with incidents and they're watching what happens and so like they're taking detailed notes because like like even if something goes down in",
    "start": "1757919",
    "end": "1764880"
  },
  {
    "text": "production and you know that this outage was like planned your customer cers are still paying you so you have to kind of get a p up and that's scary um so what",
    "start": "1764880",
    "end": "1772480"
  },
  {
    "text": "they want to do is have this team that's not worried about the outage that's actually looking at the process and how everything's handled and taking notes",
    "start": "1772480",
    "end": "1778519"
  },
  {
    "text": "and then they're filing bugs about like what was actually broken like hey we like lost this link here hey like these",
    "start": "1778519",
    "end": "1783720"
  },
  {
    "text": "two teams don't even know who they are and they have a hard dependency on each other like maybe there should be something in the Run book that says like",
    "start": "1783720",
    "end": "1789840"
  },
  {
    "text": "here's each other's email or something and then for this to actually be appropriate you have to prioritize bugs",
    "start": "1789840",
    "end": "1796279"
  },
  {
    "text": "and get buy and across teams to fix them so you know like if you run it and then like do nothing obviously it doesn't",
    "start": "1796279",
    "end": "1801880"
  },
  {
    "text": "work um another really great uh example of running a game day that was not super",
    "start": "1801880",
    "end": "1807279"
  },
  {
    "text": "involved or complex was uh stripe did this and they um ran one I think this",
    "start": "1807279",
    "end": "1812760"
  },
  {
    "text": "was in what like 2014 or something uh and they or ear yeah 2014 and they ran",
    "start": "1812760",
    "end": "1818320"
  },
  {
    "text": "basically what they did is they ran a game day they planned for this they did the whole thing they took a backup actually of their primary data center",
    "start": "1818320",
    "end": "1824120"
  },
  {
    "text": "like right before they did it so if anything went wrong they could you know recover and so ran kill nine on the master node in the reddest cluster and",
    "start": "1824120",
    "end": "1830480"
  },
  {
    "text": "it lost all its data um because what actually happened is the node went down and then like it started to elect a",
    "start": "1830480",
    "end": "1836120"
  },
  {
    "text": "leader and then the master node came back up and it was like hey I'm still the leader and I'm still alive and I",
    "start": "1836120",
    "end": "1841399"
  },
  {
    "text": "have no data so like all of y'all should have no data and then like the entire data set was",
    "start": "1841399",
    "end": "1846840"
  },
  {
    "text": "gone so that was cool I guess um and then so but at least they figured it out",
    "start": "1846840",
    "end": "1852279"
  },
  {
    "text": "that this is happening right like and so what actually was the root cause of this is that they um the Redd's author had",
    "start": "1852279",
    "end": "1857720"
  },
  {
    "text": "said they used a configuration expect uh configuration setting he wasn't expecting people to use so this is you",
    "start": "1857720",
    "end": "1863480"
  },
  {
    "text": "know if you go back to Ina's talk like there's a lot about like reducing State space and test your configuration because these are where all the weird",
    "start": "1863480",
    "end": "1869080"
  },
  {
    "text": "bugs are actually it's not in the like hey the thing that everyone does 90% of the time that stuff get caught gets",
    "start": "1869080",
    "end": "1875200"
  },
  {
    "text": "caught really fast um this is a really great tweet from Kelly sers that I like where she says basically like even",
    "start": "1875200",
    "end": "1880880"
  },
  {
    "text": "running a simple kill9 test needs to happen more often in Industry like we aren't doing this enough if this you can",
    "start": "1880880",
    "end": "1886960"
  },
  {
    "text": "find a catastrophic like this so easily so this is something you can really really easily do and now I would like to",
    "start": "1886960",
    "end": "1893120"
  },
  {
    "text": "take a break for another brief ran aesto about testing and production because that was random production um and you",
    "start": "1893120",
    "end": "1900200"
  },
  {
    "text": "know so okay so there are a lot of things where testing and production is super valuable and Netflix runs testing",
    "start": "1900200",
    "end": "1905720"
  },
  {
    "text": "production all of these things um there is also a lot of valuable information from Fault injection that can be gained",
    "start": "1905720",
    "end": "1912080"
  },
  {
    "text": "by testing in test environments that could have actually been reproduced in a staging environment and never impacted users",
    "start": "1912080",
    "end": "1918360"
  },
  {
    "text": "and so it's always this risk versus reward trade-off that's happening here when you want to test in production",
    "start": "1918360",
    "end": "1923960"
  },
  {
    "text": "because at the end of the day we are paid to make money um and make our users happy for the services that we are",
    "start": "1923960",
    "end": "1929320"
  },
  {
    "text": "providing so if you want to test on your users and treat them like your guinea pigs they might not be really happy um",
    "start": "1929320",
    "end": "1935679"
  },
  {
    "text": "so right like going back to that other paper that we said where you can reproduce most catastrophic failures on three nodes I think this combined means",
    "start": "1935679",
    "end": "1943159"
  },
  {
    "text": "we should do a little more staging before we just like kick things out into prod and then say like hope for the best",
    "start": "1943159",
    "end": "1949000"
  },
  {
    "text": "right um also like monitoring is not testing people say this to me and I think it's cuz I work on Twitter's",
    "start": "1949000",
    "end": "1954559"
  },
  {
    "text": "monitoring system um but I like don't know why like monitoring is super crucial for operating and distributed",
    "start": "1954559",
    "end": "1960039"
  },
  {
    "text": "system but it doesn't tell you anything about your system that like your system is verified before it goes into production monitoring is 100% testing on",
    "start": "1960039",
    "end": "1966720"
  },
  {
    "text": "your users it is totally reactionary um like if you just like roll the whole cluster and then like the success rate",
    "start": "1966720",
    "end": "1972880"
  },
  {
    "text": "drops to zero like your users are still going to hate you so like don't do that like monitoring is not enough it just",
    "start": "1972880",
    "end": "1978360"
  },
  {
    "text": "tells you how to like correct the problem it doesn't tell you that you don't have a problem before you",
    "start": "1978360",
    "end": "1983880"
  },
  {
    "text": "ship okay canaries are super great canaries are also like uh you may have heard",
    "start": "1983880",
    "end": "1990120"
  },
  {
    "text": "green blue testing um there's a bunch of different names for this but the idea here is that we slowly roll out changes",
    "start": "1990120",
    "end": "1996679"
  },
  {
    "text": "into production and this is actually really you know I mean it's like a verification in production because it's like already in production so what are",
    "start": "1996679",
    "end": "2001919"
  },
  {
    "text": "you doing besides testing on your users but it is a way to actually greatly reduce the risk of deploying new code so",
    "start": "2001919",
    "end": "2008039"
  },
  {
    "text": "like continuous integration helps us like reduce Risk by pushing smaller changes canaries help us reduce Risk by",
    "start": "2008039",
    "end": "2013519"
  },
  {
    "text": "pushing changes out more slowly and so you can do this either manually or like build some automation around it um I do",
    "start": "2013519",
    "end": "2020120"
  },
  {
    "text": "this with all of my teams when we ship code we don't just like roll the whole cluster we like you know slowly roll it",
    "start": "2020120",
    "end": "2025240"
  },
  {
    "text": "um and then monitor a couple canaries and then check out if it looks really bad or not and then we'll roll back if",
    "start": "2025240",
    "end": "2030320"
  },
  {
    "text": "it does I want to caveat though Canary's only tests that the new version is performing as well as the old version",
    "start": "2030320",
    "end": "2037240"
  },
  {
    "text": "right now right like if there's not a partition happening it tells you nothing about how the new version performs under a",
    "start": "2037240",
    "end": "2043399"
  },
  {
    "text": "partition if there's not a leader election happening it tells you nothing about how the leader election performs if there is not massive traffic it tells",
    "start": "2043399",
    "end": "2049320"
  },
  {
    "text": "you nothing about how the new system compared to the old system performs at Peak traffic loads so this is a huge",
    "start": "2049320",
    "end": "2054760"
  },
  {
    "text": "caveat I think people in Industry like have found canaras and they're like it's a magic solution you just deploy and then it'll like magically roll itself",
    "start": "2054760",
    "end": "2060560"
  },
  {
    "text": "back and I'm kind of like yeah except for when the problem doesn't like these infrequent problems like leader election",
    "start": "2060560",
    "end": "2065599"
  },
  {
    "text": "or major outages happen it's because didn't actually ever test that it did that so like do that before you push it",
    "start": "2065599",
    "end": "2071118"
  },
  {
    "text": "to prod especially on these super um you know dangerous distributed systems",
    "start": "2071119",
    "end": "2076679"
  },
  {
    "text": "things okay so we went through a variety of ways of how to test and verify",
    "start": "2076679",
    "end": "2082679"
  },
  {
    "text": "systems in the wild we have unit integration tests this should be the base case like I don't I'm really kind",
    "start": "2082679",
    "end": "2087878"
  },
  {
    "text": "of tired of people saying like oh I right test it's boring or like type systems or tests and blah blah blah blah",
    "start": "2087879",
    "end": "2093040"
  },
  {
    "text": "blah like whatever like it sucks I get it like I don't really think it's all that fun but I do it anyway because it's good for your customers it's good for",
    "start": "2093040",
    "end": "2100480"
  },
  {
    "text": "business it's also like really good for a lot of other reasons and there's many many other testing talks but like just do it um also that 2014 paper if people",
    "start": "2100480",
    "end": "2107400"
  },
  {
    "text": "like don't believe you show them that because that's like like the trump card it's great um so",
    "start": "2107400",
    "end": "2112839"
  },
  {
    "text": "anyway you have uh property based testing this is actually super low investment I would highly recommend",
    "start": "2112839",
    "end": "2118040"
  },
  {
    "text": "playing around with it if you've never used it it's great um Vault injection testing also if you're building anything",
    "start": "2118040",
    "end": "2123960"
  },
  {
    "text": "that has any up time reliability distributed systems requirements just kill things on your machines it's like",
    "start": "2123960",
    "end": "2129040"
  },
  {
    "text": "not that hard shoot a node in production like see what happens try it out um this is actually going to greatly help you",
    "start": "2129040",
    "end": "2135280"
  },
  {
    "text": "stabilize your services and then canaries are really great for reducing um the risk of deploying right but this",
    "start": "2135280",
    "end": "2141200"
  },
  {
    "text": "should sort of be like you've done all of these things and then we Canary code okay so briefly I would just want",
    "start": "2141200",
    "end": "2148520"
  },
  {
    "text": "to talk wrap up and talk about some things about you know the world kind of suck say we have to do all this stuff and we don't even get provably correct",
    "start": "2148520",
    "end": "2154640"
  },
  {
    "text": "systems that's a bummer um but like there is is some really interesting research happening out there now that I",
    "start": "2154640",
    "end": "2159720"
  },
  {
    "text": "think um is is actually not that far away so these are three different papers",
    "start": "2159720",
    "end": "2165040"
  },
  {
    "text": "that I really like lineage driven fault injection is um actually from Peter Alvaro and he worked with Netflix to",
    "start": "2165040",
    "end": "2172000"
  },
  {
    "text": "implement this U so what this is an idea of combining model Checkers and or or",
    "start": "2172000",
    "end": "2177440"
  },
  {
    "text": "like reducing the SP space that you have to explore and then like running this with fault injection in production and tracing it back I'm doing a horrible job",
    "start": "2177440",
    "end": "2183560"
  },
  {
    "text": "of explaining it it's linked because I'm not going to go through it uh this is super cool because it's actually being used an industry right now or they like",
    "start": "2183560",
    "end": "2189040"
  },
  {
    "text": "TR they went and implemented it and it like worked um cuz I'm strong enough is a great paper which I'm going to go into",
    "start": "2189040",
    "end": "2194560"
  },
  {
    "text": "a little more detail um I like it mostly because it a share song also it's cool but we'll get there um it's named after",
    "start": "2194560",
    "end": "2200400"
  },
  {
    "text": "a share song and then iron Fleet is another really cool way that they're trying to incorporate specifications and formal",
    "start": "2200400",
    "end": "2206720"
  },
  {
    "text": "verification into your day-to-day programming language via your IDE that comes from Microsoft okay so like I said because",
    "start": "2206720",
    "end": "2213720"
  },
  {
    "text": "I'm strong enough um this was also published at Pole in 2016 uh so",
    "start": "2213720",
    "end": "2219800"
  },
  {
    "text": "basically instead of uh exhaustively exploring the failure space of a specified program",
    "start": "2219800",
    "end": "2226400"
  },
  {
    "text": "um like and trying to do all the model checking what it does is it actually helps you go and",
    "start": "2226400",
    "end": "2232440"
  },
  {
    "text": "specify uh um sorry blanking on the word uh you specify uh your tenants of the",
    "start": "2232440",
    "end": "2239440"
  },
  {
    "text": "system like these are the properties that it should hold and then it'll help you verify that you're um that you are",
    "start": "2239440",
    "end": "2245079"
  },
  {
    "text": "using just the right amount of consistency so that you have can have more available systems and only add consensus and strong consistency where",
    "start": "2245079",
    "end": "2252359"
  },
  {
    "text": "you need it so the way you do this and why I think this is super interesting is because it actually is implemented in",
    "start": "2252359",
    "end": "2257440"
  },
  {
    "text": "terms of um like annotations on Java this is Java code and so you can install",
    "start": "2257440",
    "end": "2263480"
  },
  {
    "text": "this it's actually like open source and what they do here is it's a bank example and so what they're what you're saying",
    "start": "2263480",
    "end": "2268760"
  },
  {
    "text": "is you're defining an variant and you're saying like in a simple bank example where I can debit and deposit in an",
    "start": "2268760",
    "end": "2274040"
  },
  {
    "text": "account um these are the annotations that I'm going to do so you do this like in design stage so what it's going to say is like",
    "start": "2274040",
    "end": "2280800"
  },
  {
    "text": "okay my account balance is an integer um the balance has to be greater than or equal to zero this is an invariant like",
    "start": "2280800",
    "end": "2287680"
  },
  {
    "text": "that must hold this thing must always be true in this system and then it sort of defines the different um actions that",
    "start": "2287680",
    "end": "2294440"
  },
  {
    "text": "you can take which are debit and deposit it then goes on to say on deposit um you know I'm adding I have an",
    "start": "2294440",
    "end": "2300839"
  },
  {
    "text": "integer that I'm adding to uh my account balance uh the amount of a deposit must",
    "start": "2300839",
    "end": "2306440"
  },
  {
    "text": "be greater than or equal to to zero so then the New Balance will be the balance plus the amount so like you know math",
    "start": "2306440",
    "end": "2312480"
  },
  {
    "text": "can basically prove that this will never violate the invariant that your account goes below zero because you're adding a positive number to a zero or a positive",
    "start": "2312480",
    "end": "2319319"
  },
  {
    "text": "number which will always give you a non-zero number or like a positive or non-zero number um so that's cool we",
    "start": "2319319",
    "end": "2324800"
  },
  {
    "text": "don't really need any coordination around debit or adding money to your account where you do find that you need",
    "start": "2324800",
    "end": "2330839"
  },
  {
    "text": "coordination is on debit right because my amount that I'm debiting is an integer it can be um um non zero or can",
    "start": "2330839",
    "end": "2339040"
  },
  {
    "text": "be less than zero sorry um it defines as a precondition which is that the amount",
    "start": "2339040",
    "end": "2344599"
  },
  {
    "text": "in the account must be greater than or equal to zero to debit money from it um and then it also once again defines the",
    "start": "2344599",
    "end": "2350920"
  },
  {
    "text": "invariant that the new balance is balance minus the amount um so then you",
    "start": "2350920",
    "end": "2356920"
  },
  {
    "text": "could have in theory an amount that violated or that made the balance go below zero so what would then happen is that your invariant over the balance of",
    "start": "2356920",
    "end": "2363680"
  },
  {
    "text": "the account would be violated and so that's not a valid action so what will actually happen if you ran the siy Tool",
    "start": "2363680",
    "end": "2370520"
  },
  {
    "text": "uh is that it will tell you hey you can't run this without some kind of",
    "start": "2370520",
    "end": "2375800"
  },
  {
    "text": "strong coordination here to debit an account because it has to check with all the other replicas to say you know is my",
    "start": "2375800",
    "end": "2381440"
  },
  {
    "text": "account balance greater than zero and make a debit um and like it has to hold an exclusive lock on the account balance",
    "start": "2381440",
    "end": "2387200"
  },
  {
    "text": "at that point in time um so this is I think super cool because right it's taken this like I I Define my invariance",
    "start": "2387200",
    "end": "2393000"
  },
  {
    "text": "I Define more the semantics of what I want my application to do and then I have this tool that helps me um like",
    "start": "2393000",
    "end": "2399440"
  },
  {
    "text": "tell me that my assumptions are correct that like hey I need coordination here or I do not need coordination here to maintain the invariance that I have",
    "start": "2399440",
    "end": "2405240"
  },
  {
    "text": "described I also think it's cool because it's like a design dock in your code that's super nice um and then it's also",
    "start": "2405240",
    "end": "2411119"
  },
  {
    "text": "you know it's just like uh the I mean it does have the problem of like then you have to implement it correctly like obviously it could be wrong but at least",
    "start": "2411119",
    "end": "2417079"
  },
  {
    "text": "like the documentation is right there so this is super cool I think and like really interesting research okay so let's wrap it up um in",
    "start": "2417079",
    "end": "2425119"
  },
  {
    "text": "conclusion you know if you want to have a super critical component if you building core infrastructure that's like",
    "start": "2425119",
    "end": "2430280"
  },
  {
    "text": "powering the entire internet maybe think about using formal verification because it does have a lot of great benefits",
    "start": "2430280",
    "end": "2435720"
  },
  {
    "text": "like they showed in Amazon um unit tests and integration tests find a ton of Errors actually way more than I expected",
    "start": "2435720",
    "end": "2442640"
  },
  {
    "text": "um and I was always sort of a proponent of testing um and basically like try out these things like fault injection",
    "start": "2442640",
    "end": "2447839"
  },
  {
    "text": "testing and property based testing with your teams they're super easy they're super lowcost and they expose a ton of bugs and they greatly and when it does",
    "start": "2447839",
    "end": "2455040"
  },
  {
    "text": "succeed it greatly increases your confidence that you can like this to the Wild and everything's going to be fine",
    "start": "2455040",
    "end": "2460319"
  },
  {
    "text": "okay so just to wrap it up um enjoy the ride have fun and test your freaking code this is a quote from my friend Camille forier and I'd like to thank all",
    "start": "2460319",
    "end": "2467359"
  },
  {
    "text": "these lovely people who have helped me with this talk and the article and um yeah I'm happy to take questions now and this is the resources link or feel free",
    "start": "2467359",
    "end": "2474040"
  },
  {
    "text": "to tweet them at me thanks [Applause]",
    "start": "2474040",
    "end": "2483909"
  }
]