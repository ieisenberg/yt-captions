[
  {
    "start": "0",
    "end": "73000"
  },
  {
    "text": "thank you very much thank you for coming I appreciate you tending my talk I hope you're in the right room uh so I am I'm",
    "start": "2840",
    "end": "8920"
  },
  {
    "text": "Marty I'm a software developer have been for about 20 years uh and these days I'm",
    "start": "8920",
    "end": "15519"
  },
  {
    "text": "fortunate enough to work on open source projects professionally as a gig um and",
    "start": "15519",
    "end": "21240"
  },
  {
    "text": "so I get to work on a couple of projects I work on a thing called taxi for which I am the language and Project Lead and",
    "start": "21240",
    "end": "27720"
  },
  {
    "text": "taxi is a language for adding Antics to our apis and then using those semantics",
    "start": "27720",
    "end": "33559"
  },
  {
    "text": "to automate integration uh and then orbital is a um platform that we built",
    "start": "33559",
    "end": "38680"
  },
  {
    "text": "around that which gives you a nice runtime and develop a tooling and kind of observability they're all open source",
    "start": "38680",
    "end": "44559"
  },
  {
    "text": "they're up on GitHub you should go and check them out and give us a star afterwards as a as a way of feeding us",
    "start": "44559",
    "end": "49600"
  },
  {
    "text": "internet points um but kind of the the idea behind the these Technologies and I guess also the theme of my talk today is",
    "start": "49600",
    "end": "57520"
  },
  {
    "text": "um is around integration and kind of how we build integration and some of the",
    "start": "57520",
    "end": "62920"
  },
  {
    "text": "challenges that we have with that and kind of trying to explore an approach for integration that's kind of",
    "start": "62920",
    "end": "68680"
  },
  {
    "text": "fundamentally different from the default way that we do it which is which is kind of this right where you have a source on",
    "start": "68680",
    "end": "74840"
  },
  {
    "start": "73000",
    "end": "476000"
  },
  {
    "text": "one side and a sink on the other side and you have some glue that stitches it together and you know that's true kind",
    "start": "74840",
    "end": "80880"
  },
  {
    "text": "of regardless of whether you're building microservices or event based architectures and it's true where the the glue is kind of coming out from um",
    "start": "80880",
    "end": "88920"
  },
  {
    "text": "from code that you write or from some y yaml mapping framework or if you've got",
    "start": "88920",
    "end": "94399"
  },
  {
    "text": "a budget and gone out and bought an Enterprise Integration tool right it's always the same kind of thing right Source on one side sink on the other and",
    "start": "94399",
    "end": "100520"
  },
  {
    "text": "someone builds some glue to stitch them together and so my talk kind of breaks down into like a 10minute rant about",
    "start": "100520",
    "end": "107040"
  },
  {
    "text": "this um and then I'm going to start like exploring some ideas that are different and kind of some of the principles",
    "start": "107040",
    "end": "113200"
  },
  {
    "text": "behind taxi and we'll talk about how it works and then we'll um we'll do some live coding and you know pray to the",
    "start": "113200",
    "end": "120360"
  },
  {
    "text": "Gods um so the whole kind of idea here is to explore the concept of integration",
    "start": "120360",
    "end": "126880"
  },
  {
    "text": "right and integration starts when uh we have a producer on one side that has some data or some services or some",
    "start": "126880",
    "end": "133480"
  },
  {
    "text": "capability and on the other side we have a consumer uh and the consumer wants the producer and so they they build some",
    "start": "133480",
    "end": "140200"
  },
  {
    "text": "integration right and and that's kind of that's it that's the entire talk on one slide right and we're going to talk about this almost exclusively the",
    "start": "140200",
    "end": "147480"
  },
  {
    "text": "problem is it's not quite this simple right in a in a lot of Enterprise organizations before you even start you",
    "start": "147480",
    "end": "153440"
  },
  {
    "text": "know the landscape looks a little bit more like this so before the produ before the consumers can do any kind of",
    "start": "153440",
    "end": "158519"
  },
  {
    "text": "coding they have this journey of discovery that they have to go on to track down the data sources that they",
    "start": "158519",
    "end": "164159"
  },
  {
    "text": "want to get their hands on which leaves kind of consumers feeling a little bit like this right there is this process of",
    "start": "164159",
    "end": "170040"
  },
  {
    "text": "who has the API that has the data who has who has the currency converter API which team has the oh there's seven",
    "start": "170040",
    "end": "176080"
  },
  {
    "text": "currency converter apis well we'll we'll build an eth right so so there is a there is a massive Discovery Discovery",
    "start": "176080",
    "end": "182879"
  },
  {
    "text": "problem but we won't focus on that too much our our consumer has found their producer and they set about building",
    "start": "182879",
    "end": "189519"
  },
  {
    "text": "some integration and the producer has a rest API and so the consumer's like great it's a rest API I know I know what",
    "start": "189519",
    "end": "196239"
  },
  {
    "text": "to do and they get their they get their open API spec and that is the that is",
    "start": "196239",
    "end": "202400"
  },
  {
    "text": "I'm glad that lands because I'm of an age where this is this is kind of Aging out now um uh okay and so uh the",
    "start": "202400",
    "end": "211040"
  },
  {
    "text": "consumer gets given the open API spec and they have a bunch of work that they have to do right this is where the work",
    "start": "211040",
    "end": "216760"
  },
  {
    "text": "starts and they have to get the API spec and they have to plummet into their framework of choice their language of",
    "start": "216760",
    "end": "222720"
  },
  {
    "text": "choice and they have to generate a client and they have to think about mapping like the the field name coming from the producer into the consumer and",
    "start": "222720",
    "end": "229480"
  },
  {
    "text": "map that together and they have to think about failures and retries and what happens when things go wrong and and",
    "start": "229480",
    "end": "234760"
  },
  {
    "text": "keeping it fast so doing some caching it's just like a bunch of work um but the consumers finished and they've built",
    "start": "234760",
    "end": "241040"
  },
  {
    "text": "they've built their integration of course it's not quite this simple because an actual fact they",
    "start": "241040",
    "end": "246720"
  },
  {
    "text": "need to connect to multiple producers right they need to pull data from multiple microservices from multiple",
    "start": "246720",
    "end": "251959"
  },
  {
    "text": "Kafka topics and so we're back here and so the consumers find themselves again",
    "start": "251959",
    "end": "257359"
  },
  {
    "text": "kind of like come on man we've we've been through this path um but our consumers find their producers and they",
    "start": "257359",
    "end": "263639"
  },
  {
    "text": "get given their API specs and the work continues and now there's more clients to generate and more field mappings to",
    "start": "263639",
    "end": "269320"
  },
  {
    "text": "produce and more this thing is that thing and now we have to think about there's multiple services so we need to think about orchestration and sequencing",
    "start": "269320",
    "end": "276479"
  },
  {
    "text": "we need to think about parallelism and and concurrency we need to think about cascading failures when things go wrong",
    "start": "276479",
    "end": "282000"
  },
  {
    "text": "how do we how do we stop the whole thing from blowing up and so there is just like a lot of work that is going on in",
    "start": "282000",
    "end": "287440"
  },
  {
    "text": "this I feel like my mic keeps cutting out does it keep cutting out no good Okay cool so there's like a bunch of",
    "start": "287440",
    "end": "292800"
  },
  {
    "text": "work that come there that happens here but our consumer is finished and our and their job is done now of course it's not",
    "start": "292800",
    "end": "300240"
  },
  {
    "text": "quite this simple because there's multiple consumers across the organization so across the org this",
    "start": "300240",
    "end": "306400"
  },
  {
    "text": "journey is going on and they are discovering their apis and they're discovering their cfas and their databases and they're building their clients and they're doing their mapping",
    "start": "306400",
    "end": "312880"
  },
  {
    "text": "and this work continues right the integration work carries on over and over and over across the",
    "start": "312880",
    "end": "319720"
  },
  {
    "text": "organization and kind of the point here is that when we are building integration in an organization consumers do a lot of",
    "start": "319720",
    "end": "327000"
  },
  {
    "text": "heavy lifting a lot of work which kind of sucks because there's a lot of them",
    "start": "327000",
    "end": "332479"
  },
  {
    "text": "right we've got this journey of Discovery going on over and over and over across the organization and this",
    "start": "332479",
    "end": "338160"
  },
  {
    "text": "integration work that we're doing like it's it's not reusable right one team building an integration doesn't make",
    "start": "338160",
    "end": "344199"
  },
  {
    "text": "another team's Journey easier integration code is not it's not an artifact that we easily reshare it's",
    "start": "344199",
    "end": "349840"
  },
  {
    "text": "generally very Project Specific now you might look at this and you might think I'm kind of over igging",
    "start": "349840",
    "end": "355319"
  },
  {
    "text": "the situation and I'm afraid to say it's actually it's actually worse worse than this when when we think about kind of",
    "start": "355319",
    "end": "361479"
  },
  {
    "text": "building an integration it kind of breaks down into into three well we think of it in three distinct phases right there's the design and Discovery",
    "start": "361479",
    "end": "368280"
  },
  {
    "text": "like going off and finding all the apis there's the build work and then then there's the Run work and last year a",
    "start": "368280",
    "end": "374800"
  },
  {
    "text": "survey came out where a company went and talked to a thousand midm marker and above so 50 million in recurring revenue",
    "start": "374800",
    "end": "381080"
  },
  {
    "text": "and above organizations about how they build internal Integrations and this study found that",
    "start": "381080",
    "end": "388039"
  },
  {
    "text": "the average time to build and sh integration in an organization it's 3 to 9 months like that's insane 3 to 9",
    "start": "388039",
    "end": "396759"
  },
  {
    "text": "months to build an integration we've got machine readable specs coming out all over the place and it still takes us 3",
    "start": "396759",
    "end": "403440"
  },
  {
    "text": "to n months and and every time I see that stat I'm like that cannot be right and then we start working with a new",
    "start": "403440",
    "end": "408880"
  },
  {
    "text": "client and and like it it's not it's not far off one client that we work with the",
    "start": "408880",
    "end": "414520"
  },
  {
    "text": "very start of their integration Journey before they do anything they send a ba",
    "start": "414520",
    "end": "419560"
  },
  {
    "text": "often to the Wild and they send them off armed with like a pen and paper and confluent and they document all of the",
    "start": "419560",
    "end": "425960"
  },
  {
    "text": "different apis that they're going to need to talk to and they find the teams and they build the API mappings and they allocate three months for that before an",
    "start": "425960",
    "end": "433400"
  },
  {
    "text": "engineer starts writing any code just to get kind of the data onto the ticket three months in an organization for",
    "start": "433400",
    "end": "439759"
  },
  {
    "text": "every integration that's broken so we're back here right we've",
    "start": "439759",
    "end": "445199"
  },
  {
    "text": "got our producers and our consumers and they're all kind of wired up and everybody's happy now of course it's not quite this simple because the producers",
    "start": "445199",
    "end": "451599"
  },
  {
    "text": "aren't static either and so the producers inevitably they ship a change right and so now we have version two of",
    "start": "451599",
    "end": "457759"
  },
  {
    "text": "a producer and needless to say it does not go well and across the organization",
    "start": "457759",
    "end": "463560"
  },
  {
    "text": "just everything explodes and this is how every integration is built today in the",
    "start": "463560",
    "end": "469680"
  },
  {
    "text": "organization and that's kind of why we we thought we want to have a crack at fixing",
    "start": "469680",
    "end": "474840"
  },
  {
    "text": "that so let's talk about coupling right the reason these systems are blowing up is because tightly coupled now the",
    "start": "474840",
    "end": "481240"
  },
  {
    "start": "476000",
    "end": "722000"
  },
  {
    "text": "Wikipedia definition of coupling is where on one side you have change on the other side it leads to kaby if that is",
    "start": "481240",
    "end": "487919"
  },
  {
    "text": "true two systems are tightly coupled right where you introduce change it breaks something the systems are tightly",
    "start": "487919",
    "end": "493319"
  },
  {
    "text": "coupled and as Architects we have a bunch of kind of strategies that we like to employ to Loosely couple our",
    "start": "493319",
    "end": "500319"
  },
  {
    "text": "organization um and they have varying degrees of success one is microservices",
    "start": "500319",
    "end": "505360"
  },
  {
    "text": "we are great we're not going to we're going to loose the couple our organization by using microservices and we use open API specs and everything will be",
    "start": "505360",
    "end": "511599"
  },
  {
    "text": "fine but we've kind of just seen the result of that right you int introduce change into one of your API specs and",
    "start": "511599",
    "end": "517560"
  },
  {
    "text": "stuff blows up so then we go well I didn't mean that I mean smaller let's get rid of the servers entirely and we'll go serverless right we'll get rid",
    "start": "517560",
    "end": "524039"
  },
  {
    "text": "of the servers that was the problem and that doesn't really solve the issue it just adds more things that we need to connect together and if you change any",
    "start": "524039",
    "end": "530839"
  },
  {
    "text": "of those the consumers blow up so we go okay well that I didn't mean that let's decouple them entirely let's not have",
    "start": "530839",
    "end": "537040"
  },
  {
    "text": "them talk to each other at all we'll we'll put a c in the middle right and so with a Q we have a a producer that drops",
    "start": "537040",
    "end": "543480"
  },
  {
    "text": "a message onto a broker uh and now the consumer and the producer don't know about any know about each other at all",
    "start": "543480",
    "end": "548880"
  },
  {
    "text": "there's no communication between them now of course if you change that message then the consumers",
    "start": "548880",
    "end": "555760"
  },
  {
    "text": "explode so then we go okay I'm going to use a I'm going to use a Gateway I'll use something like graphql okay and this",
    "start": "555760",
    "end": "561600"
  },
  {
    "text": "isn't a bad strategy this one's actually quite nice right because in this in this model we have a thing that sits in the",
    "start": "561600",
    "end": "567480"
  },
  {
    "text": "middle that is both a producer and a consumer and it doesn't prevent change but it does like kind of encapsulate the blast",
    "start": "567480",
    "end": "575200"
  },
  {
    "text": "radius so when something changes yeah the Gateway blows up and we have to deploy someone to go and fix that but",
    "start": "575200",
    "end": "581680"
  },
  {
    "text": "the consumers are protected unless you change the Gateway in which case Everything is Everything",
    "start": "581680",
    "end": "587120"
  },
  {
    "text": "explodes and this is problematic because like we want to change these things we don't want to build",
    "start": "587120",
    "end": "593000"
  },
  {
    "text": "architectures that prevent change we want to enable change right so the problem is that when we",
    "start": "593000",
    "end": "599000"
  },
  {
    "text": "build glue code it tightly couples producers and consumers the way that we are building architectures and the way",
    "start": "599000",
    "end": "604640"
  },
  {
    "text": "that we are building integration tightly couples producers and consumers so that's the",
    "start": "604640",
    "end": "611120"
  },
  {
    "text": "rant let's talk about something different let's let's have a different crack at this so the idea that kind of",
    "start": "611120",
    "end": "616920"
  },
  {
    "text": "sits behind this space is we have our producers and we have our consumers and we want to we want to decouple them so",
    "start": "616920",
    "end": "623040"
  },
  {
    "text": "the idea is let's get our producers and get them to publish their API contracts right they're a good thing and get our",
    "start": "623040",
    "end": "629040"
  },
  {
    "text": "consu consumers instead of getting them talking directly to our producers get them to publish their requirements and",
    "start": "629040",
    "end": "634279"
  },
  {
    "text": "so we take this publication on both sides and we and we push it up to a thing right and the job of that thing is",
    "start": "634279",
    "end": "641040"
  },
  {
    "text": "to handle the integration right it needs to that's that becomes its job but for",
    "start": "641040",
    "end": "647240"
  },
  {
    "text": "this thing to be any different from all the other things that I've just shown you it needs to it needs to adhere to two",
    "start": "647240",
    "end": "652880"
  },
  {
    "text": "rules the first is it has to be able to connect stuff on demand which means when a project comes along right a brand new",
    "start": "652880",
    "end": "660240"
  },
  {
    "text": "integration requirement the thing has to be able to work out how do I orchestrate the different systems that I know about",
    "start": "660240",
    "end": "666560"
  },
  {
    "text": "the different cues and how do I orchestrate that together to solve a problem right if it cannot be solved by",
    "start": "666560",
    "end": "673200"
  },
  {
    "text": "deploying an engineer to go and build some stuff to solve the integration it has to be able to work out how to do that on its own and secondly it has to",
    "start": "673200",
    "end": "680560"
  },
  {
    "text": "be able to adapt to change so inevitably when we say you can't you can't talk directly to my database anymore you have",
    "start": "680560",
    "end": "686440"
  },
  {
    "text": "to go through an API or when like the snowflake salesman comes a calling and you go you can't go to my API anymore",
    "start": "686440",
    "end": "691959"
  },
  {
    "text": "you need to go to my database right as we refector our organization as we change field names as we as we do",
    "start": "691959",
    "end": "699399"
  },
  {
    "text": "Transformations we have to be be able to adapt to change if when things change we have to deploy an engineer to fix it",
    "start": "699399",
    "end": "705920"
  },
  {
    "text": "it's no better than what we just had so the fundamental principle here is there must be no glue code this cannot be a",
    "start": "705920",
    "end": "712639"
  },
  {
    "text": "place that we go and write code so that's that's kind of the idea here we want a thing that that doesn't",
    "start": "712639",
    "end": "719040"
  },
  {
    "text": "use gluc code and it's all kind of powered the whole thing starts with API specs so let's talk about let's talk",
    "start": "719040",
    "end": "725720"
  },
  {
    "start": "722000",
    "end": "828000"
  },
  {
    "text": "about API specs and there is this kind of underpinning question that I alluded to",
    "start": "725720",
    "end": "732079"
  },
  {
    "text": "alluded to a bit earlier right which is if we have these machine readable API specs we've got these language agnostic",
    "start": "732079",
    "end": "738720"
  },
  {
    "text": "framework agnostic everything agnostic kind of API specs that machines can read",
    "start": "738720",
    "end": "743839"
  },
  {
    "text": "and they can understand how to integrate why is it the very first thing that we do with those machine readable API specs",
    "start": "743839",
    "end": "749440"
  },
  {
    "text": "is we give them to a human in our team to start doing some work with like that feels that feels broken so if we're if",
    "start": "749440",
    "end": "754800"
  },
  {
    "text": "we're building these machine readable API specs why aren't the machines building the glue right why is it that",
    "start": "754800",
    "end": "760560"
  },
  {
    "text": "we still writing the glue code manually and the answer is because our apis aren't Rich enough right apis today",
    "start": "760560",
    "end": "768040"
  },
  {
    "text": "talk about the address of a service where I can find it what's its IP address what's its DNS entry right I",
    "start": "768040",
    "end": "774440"
  },
  {
    "text": "talk about the protocol is it HTP is it TCP is it htps what verbs can I call get put post how do I send something across",
    "start": "774440",
    "end": "782600"
  },
  {
    "text": "the wire do I zip it is it protuff is it Jason and when I de serialize it what",
    "start": "782600",
    "end": "788440"
  },
  {
    "text": "field names can I expect and that's it that's all they tell us right that is transport and structure where are you",
    "start": "788440",
    "end": "795079"
  },
  {
    "text": "how do I talk to you that's all they tell us right they don't tell us what any of",
    "start": "795079",
    "end": "800120"
  },
  {
    "text": "that stuff means right apis do not talk about meaning they talk about transport and structure and they don't tell us how",
    "start": "800120",
    "end": "806519"
  },
  {
    "text": "any of that stuff relates to other stuff and like I get it right like if I'm writing an API I don't really want to be",
    "start": "806519",
    "end": "812519"
  },
  {
    "text": "documenting how my API relates to the rest of the world that's bad encapsulation that's a bad thing and that's not what I'm advocating but these",
    "start": "812519",
    "end": "818800"
  },
  {
    "text": "are the semantics what we're missing is the semantics apis lack semantics and",
    "start": "818800",
    "end": "823880"
  },
  {
    "text": "semantics are the terms that we use to talk and think about data right it's the what the data Means versus where to find",
    "start": "823880",
    "end": "830880"
  },
  {
    "start": "828000",
    "end": "1003000"
  },
  {
    "text": "it in a map so semantic the meaning of the data first name last name structural",
    "start": "830880",
    "end": "836480"
  },
  {
    "text": "what field name do I look this up in a map so we think and we talk about code in",
    "start": "836480",
    "end": "842079"
  },
  {
    "text": "terms of semantics right given this customer's email address what's their account balance when we talk about",
    "start": "842079",
    "end": "847560"
  },
  {
    "text": "requirements when we write up jro tickets when we talk about story points when we do the whole dance it's always semantic right we talk about it in the",
    "start": "847560",
    "end": "854079"
  },
  {
    "text": "language of our business but we code against structure right given this Json path what's the value at that Json",
    "start": "854079",
    "end": "861320"
  },
  {
    "text": "path so we talk and we talk and think in terms of semantics but we code against structure and that's that's a good thing",
    "start": "861320",
    "end": "866959"
  },
  {
    "text": "because semantics of our business change very rarely it's it's uncommon for a new",
    "start": "866959",
    "end": "872320"
  },
  {
    "text": "term to enter the vacular of your business right and it's uncommon that a business can't find agreement around a",
    "start": "872320",
    "end": "878839"
  },
  {
    "text": "term if that term is small enough so I'm not talking about a big complex concept like customer I'm talking about an nice",
    "start": "878839",
    "end": "885199"
  },
  {
    "text": "scaler concept like first name last name date of birth right so the semantics of",
    "start": "885199",
    "end": "890720"
  },
  {
    "text": "our business don't change very much but the structure changes all the time everybody in this room is in the business of shipping change to the",
    "start": "890720",
    "end": "897519"
  },
  {
    "text": "systems that model those semantics right refactoring services and shipping",
    "start": "897519",
    "end": "902759"
  },
  {
    "text": "shipping new Cloud things and like we are just constantly changing continually integrating deploying testing releasing",
    "start": "902759",
    "end": "908959"
  },
  {
    "text": "to production 5 5,000 times a day so we think in terms of semantics but we code",
    "start": "908959",
    "end": "914120"
  },
  {
    "text": "against structure so I want to look at some kind of semantics and some structure so I've got some got some data here right and at",
    "start": "914120",
    "end": "920360"
  },
  {
    "text": "the top I've got some API contracts and at the bottom I've got some Blobs of data okay three different three",
    "start": "920360",
    "end": "927120"
  },
  {
    "text": "different domains customer information card data and balances uh and three different Blobs of data uh and if you",
    "start": "927120",
    "end": "934800"
  },
  {
    "text": "squint a little bit and look at this some some relationships start to appear right so these two Fields different",
    "start": "934800",
    "end": "941240"
  },
  {
    "text": "names modeled by different teams stored in different systems but the same bit of information right the same thing uh",
    "start": "941240",
    "end": "948480"
  },
  {
    "text": "customer ID customer has a field called ID cards Has a Field called customer number same thing likewise here between cards and",
    "start": "948480",
    "end": "955040"
  },
  {
    "text": "balance right different field names different systems different protocols talk to them but the same bit of",
    "start": "955040",
    "end": "961399"
  },
  {
    "text": "information right and so this is not a talk about field names teams should design field names you should design",
    "start": "961399",
    "end": "967000"
  },
  {
    "text": "your domain you should own your domain but what's missing here is a way of expressing hey this thing is the same as",
    "start": "967000",
    "end": "972079"
  },
  {
    "text": "that thing right it's kind of this we want a way of being able to say in our specs this this is a field name which is",
    "start": "972079",
    "end": "979240"
  },
  {
    "text": "what how to look it up on a map but this is what the data means and it's it's modeled using our ubiquitous language",
    "start": "979240",
    "end": "984600"
  },
  {
    "text": "right it's modeled using the language of our business not a specific system concept",
    "start": "984600",
    "end": "989639"
  },
  {
    "text": "concept and that's what taxi is taxi is a way of capturing semantics and",
    "start": "989639",
    "end": "995199"
  },
  {
    "text": "sticking it in your API a way of saying this isn't just any old integer but it is a customer ID this isn't any old",
    "start": "995199",
    "end": "1001440"
  },
  {
    "text": "string it's a card number so that's taxi uh it's a language for apis data and kind of how it all",
    "start": "1001440",
    "end": "1008000"
  },
  {
    "start": "1003000",
    "end": "1291000"
  },
  {
    "text": "hangs together it's up on GitHub you should go and check it out uh so it's semantic metadata taxi is",
    "start": "1008000",
    "end": "1014319"
  },
  {
    "text": "semantic metadata it's a way of saying this thing is the same as that thing that's all it is",
    "start": "1014319",
    "end": "1020000"
  },
  {
    "text": "so where API specs talk about transport and structure the where and the how taxis talks about semantics the whatt",
    "start": "1020000",
    "end": "1027520"
  },
  {
    "text": "and the idea is to bring these two things together so you don't replace your API specs you carry on using them we don't care what your API specs are",
    "start": "1027520",
    "end": "1034079"
  },
  {
    "text": "you carry on using them as you were but you add some additional metadata so tax is designed to be",
    "start": "1034079",
    "end": "1040000"
  },
  {
    "text": "embedded in API specs you can Chuck it in your protuff your open API your soap your Json schema whatever right it go it",
    "start": "1040000",
    "end": "1046760"
  },
  {
    "text": "works alongside your existing API spe but these aren't just random strings",
    "start": "1046760",
    "end": "1052400"
  },
  {
    "text": "that that we put in here it's a full semantic type system right it's compiled it has build tooling it has linters it",
    "start": "1052400",
    "end": "1059240"
  },
  {
    "text": "has all the kind of stuff that you want to make sure that you don't accidentally make mistakes and that you're following good practice and you can use taxi for",
    "start": "1059240",
    "end": "1066799"
  },
  {
    "text": "describing Standalone objects right if you've got ad hoc CSV you've got an ad hoc Json that doesn't have a schema uh",
    "start": "1066799",
    "end": "1072440"
  },
  {
    "text": "you can use it you we use it as an open API alternative you don't have to um we",
    "start": "1072440",
    "end": "1077799"
  },
  {
    "text": "just we we hate yaml um but you don't have to and you probably won't right you",
    "start": "1077799",
    "end": "1082840"
  },
  {
    "text": "carry on using open API and you can embit it in there but you can you can use texi as a stand on so here's our",
    "start": "1082840",
    "end": "1089039"
  },
  {
    "text": "here's our example from before three different systems three different teams right and the first team are using open",
    "start": "1089039",
    "end": "1094240"
  },
  {
    "text": "API specs right and so all they've done is added a little bit of metadata to it that talks about what this field means",
    "start": "1094240",
    "end": "1101880"
  },
  {
    "text": "in the broader organization okay uh the next team are using protuff so again",
    "start": "1101880",
    "end": "1107120"
  },
  {
    "text": "they have added some metadata to their API uh and the third team is not using a",
    "start": "1107120",
    "end": "1112159"
  },
  {
    "text": "spec they are code first so they've got they generate their specs from their code go the other way around and so",
    "start": "1112159",
    "end": "1118840"
  },
  {
    "text": "likewise they can include some metadata inside of the this is cotlin but you can do it with most",
    "start": "1118840",
    "end": "1124280"
  },
  {
    "text": "languages so that's taxi this thing is the same as that thing it's a way of capturing that information in a place",
    "start": "1124280",
    "end": "1129480"
  },
  {
    "text": "that's machine readable that's not a confluent Wiki page uh and embed that data in your API",
    "start": "1129480",
    "end": "1135480"
  },
  {
    "text": "specs so if we look at that earlier example of given this email address what's the customers account balance and we apply a little bit of Taxi Magic",
    "start": "1135480",
    "end": "1142520"
  },
  {
    "text": "right we got three different systems we got a rest API we got a cards table and we've got a soap API three different",
    "start": "1142520",
    "end": "1149559"
  },
  {
    "text": "systems three different teams three different field names three different naming conventions uh but this time we're going to add some semantics into",
    "start": "1149559",
    "end": "1154799"
  },
  {
    "text": "our API spec so the first one the email field is not just any old string it's an email address these two Fields different",
    "start": "1154799",
    "end": "1161480"
  },
  {
    "text": "systems different naming conventions they're not any odd string they are customer ID and so on and so forth right",
    "start": "1161480",
    "end": "1168000"
  },
  {
    "text": "and we take those schemas and we publish them to our thing and now what we can do",
    "start": "1168000",
    "end": "1173200"
  },
  {
    "text": "is we can build this massive big graph of all of the different data and data um systems that exist across our",
    "start": "1173200",
    "end": "1179799"
  },
  {
    "text": "organization and because it's a graph we can do all kinds of cool graphy things with it like we can navigate it so given",
    "start": "1179799",
    "end": "1186120"
  },
  {
    "text": "given this question of given an email address what's the customer's account balance without any code without any",
    "start": "1186120",
    "end": "1191400"
  },
  {
    "text": "graphql resolvers without any kind of mapping files that we have to maintain we can work out that the first thing we",
    "start": "1191400",
    "end": "1198799"
  },
  {
    "text": "have to do is AR rest API call to go from an email address to a customer ID and then do a database query to go from",
    "start": "1198799",
    "end": "1204520"
  },
  {
    "text": "a customer ID to a card number and then do a soap request to go from a card number to account balance to find out",
    "start": "1204520",
    "end": "1210120"
  },
  {
    "text": "that Jimmy's got 29 quid in his account we can do that without anyone writing any code right we can work that out on",
    "start": "1210120",
    "end": "1216520"
  },
  {
    "text": "the fly so that solves the first requirement of can connect on demand and again all",
    "start": "1216520",
    "end": "1221720"
  },
  {
    "text": "the stuff that we didn't have to do here we didn't have to track down which systems own that data we didn't have to track down their API specs we didn't",
    "start": "1221720",
    "end": "1227840"
  },
  {
    "text": "have to talk to the team right we can work out and connect the stuff on demand and so then inevitably when",
    "start": "1227840",
    "end": "1235000"
  },
  {
    "text": "change happens and we come along and we say you can't talk directly to my database anymore and we introduce version two and so we replace it with a",
    "start": "1235000",
    "end": "1241159"
  },
  {
    "text": "grpc API and we follow some NY conventions so everything gets an uppercase letter uh",
    "start": "1241159",
    "end": "1247880"
  },
  {
    "text": "and we this breaks the integration right where we had a database before we don't anymore but we have an API spec that has",
    "start": "1247880",
    "end": "1254880"
  },
  {
    "text": "semantics and so we can take that and we can publish it and we can work out how data relates across the graph and so we",
    "start": "1254880",
    "end": "1261240"
  },
  {
    "text": "can replace our database call with a GPC call and it automatically adapts adapt",
    "start": "1261240",
    "end": "1267600"
  },
  {
    "text": "to change that's our two requirements right don't write any code and when stuff changes automatically",
    "start": "1267600",
    "end": "1274200"
  },
  {
    "text": "self-re so the only thing that's left then is to be able to ask this question given this email address what's the",
    "start": "1274200",
    "end": "1280279"
  },
  {
    "text": "customer's account balance and that's what Tex eql is it's a query language for using semantics to ask for data",
    "start": "1280279",
    "end": "1287120"
  },
  {
    "text": "right uh given the email address find the customer account balance so ask for data and generate the",
    "start": "1287120",
    "end": "1293360"
  },
  {
    "start": "1291000",
    "end": "1514000"
  },
  {
    "text": "glue so here's a here's the example it's declarative right it doesn't talk about systems it doesn't talk about which",
    "start": "1293360",
    "end": "1298919"
  },
  {
    "text": "which database to connect to it doesn't talk about field names it talks about semantics which means that as the implementation changes we can rebuild",
    "start": "1298919",
    "end": "1305640"
  },
  {
    "text": "the glue on the Fly uh and it's semantic we're not talking about field names we are talking",
    "start": "1305640",
    "end": "1311440"
  },
  {
    "text": "about data by its meaning which means we are decoupled from the producer systems we're using the language of the business",
    "start": "1311440",
    "end": "1316799"
  },
  {
    "text": "the ubiquitous language here's a slightly ner example uh so",
    "start": "1316799",
    "end": "1322799"
  },
  {
    "text": "given an email address of jimmy.com find the customer uh that's the same thing",
    "start": "1322799",
    "end": "1328480"
  },
  {
    "text": "but this is where it starts to get interesting the consumer the the consumer who's written this query is publishing their data contract so if you",
    "start": "1328480",
    "end": "1335120"
  },
  {
    "text": "compare this with kind of a graphql type approach where you have a single schema that consumers cherry pick from right",
    "start": "1335120",
    "end": "1340799"
  },
  {
    "text": "with taxi consumers are publishing their data contracts saying this is the data that I want these are the field names",
    "start": "1340799",
    "end": "1345919"
  },
  {
    "text": "this is the structure which means there isn't a single thing that you need to change we're removing that point of",
    "start": "1345919",
    "end": "1352000"
  },
  {
    "text": "coupling there's nothing here that talks about which systems to go and talk to this is very declarative right go and",
    "start": "1352000",
    "end": "1357039"
  },
  {
    "text": "get me these fields texi has a really nice expression language where you can embed kind of",
    "start": "1357039",
    "end": "1363840"
  },
  {
    "text": "compute in your in your query layer so we're going to uppercase the name and concatenate them together right texi has",
    "start": "1363840",
    "end": "1369360"
  },
  {
    "text": "a standard library for doing all this stuff but if you want your own functions you can write them yourself uh and these",
    "start": "1369360",
    "end": "1374600"
  },
  {
    "text": "functions run on the query layer so they benefit from caching and horizontal scale ability and all the kind of stuff",
    "start": "1374600",
    "end": "1379640"
  },
  {
    "text": "that you want by offloading your compute and finally we can use constraints on our data to say hey I",
    "start": "1379640",
    "end": "1385520"
  },
  {
    "text": "want a collection of transactions but I don't just want any transactions give me the last 10 and order it by transaction",
    "start": "1385520",
    "end": "1391320"
  },
  {
    "text": "date descending and by consumers adding constraints on their data this is the type of data that I want the query layer",
    "start": "1391320",
    "end": "1397799"
  },
  {
    "text": "Can it can inform the choices that the query layer makes around which systems can I talk to that can satisfy those",
    "start": "1397799",
    "end": "1404559"
  },
  {
    "text": "constraints which takes us onto query execution and that's where orbital in it's a query execution engine again it's",
    "start": "1404559",
    "end": "1411360"
  },
  {
    "text": "open source it's up on um GitHub go and grab it check out the code so if we take a look at kind of",
    "start": "1411360",
    "end": "1417240"
  },
  {
    "text": "what that example looks like with a query layer in the middle it starts with our collection of Taxi terms that we",
    "start": "1417240",
    "end": "1422640"
  },
  {
    "text": "Chuck into a g repository right first name last name datea of birth right scal of terms that we commit to a Tex reposit",
    "start": "1422640",
    "end": "1428760"
  },
  {
    "text": "a g repository and we pointed at orbital so it reads those and then our producers",
    "start": "1428760",
    "end": "1434159"
  },
  {
    "text": "when they're building their API specs they add that metadata into their API specs",
    "start": "1434159",
    "end": "1439720"
  },
  {
    "text": "the consumer of data uses those same terms to ask for data so they write a Tex eql query and they push it up it",
    "start": "1439720",
    "end": "1445960"
  },
  {
    "text": "feels a lot like graphql right they're sending a request for data but they're defining their own schema contracts and there's no resolvers that we need to",
    "start": "1445960",
    "end": "1452520"
  },
  {
    "text": "build in the middle and now orbital has enough information right it knows where these systems are it knows how to talk",
    "start": "1452520",
    "end": "1458240"
  },
  {
    "text": "to them it knows how they how they can connect so it can build the integration on the",
    "start": "1458240",
    "end": "1463880"
  },
  {
    "text": "Fly uh we get the data we return the results we capture tracing and L and performance data and all the kind of",
    "start": "1464120",
    "end": "1470799"
  },
  {
    "text": "stuff that you need when you want to debug what's kind of going on at runtime uh and there's no gluc code",
    "start": "1470799",
    "end": "1476919"
  },
  {
    "text": "which is kind of the big upside uh then inevitably someone introduces some change the reviews team",
    "start": "1476919",
    "end": "1483080"
  },
  {
    "text": "released the next version of their API not a problem they publish their API spec up to orbital right they publish",
    "start": "1483080",
    "end": "1489039"
  },
  {
    "text": "the change the query adapts we call the new call the new API and the client remains",
    "start": "1489039",
    "end": "1494679"
  },
  {
    "text": "unaffected no gluc code so that's it those are are kind of three parts texi",
    "start": "1494679",
    "end": "1500480"
  },
  {
    "text": "is semantic data for um apis this thing is the same as that thing tql is a query",
    "start": "1500480",
    "end": "1505520"
  },
  {
    "text": "language to you ask for data uh and we generate the glue and orbital is an observability platform that we build",
    "start": "1505520",
    "end": "1511919"
  },
  {
    "text": "around that demo time",
    "start": "1511919",
    "end": "1519000"
  },
  {
    "start": "1514000",
    "end": "2110000"
  },
  {
    "text": "right hope everyone's feeling uh",
    "start": "1519000",
    "end": "1523520"
  },
  {
    "text": "forgiving okay so this I'm going to run this I'm going to run through a demo that takes place in the the world of films so we are a Film Production",
    "start": "1524640",
    "end": "1530799"
  },
  {
    "text": "Company congratulations uh we have a database of films we have a bunch of microservices that have data that we can",
    "start": "1530799",
    "end": "1537960"
  },
  {
    "text": "find out about our films right where I can watch it uh which streaming services have it what kind of reviews are people",
    "start": "1537960",
    "end": "1543760"
  },
  {
    "text": "saying about it so we have this kind of estate of data",
    "start": "1543760",
    "end": "1548919"
  },
  {
    "text": "um and we are built on Spring boot so orbital and taxi are framework agnostic",
    "start": "1548919",
    "end": "1556279"
  },
  {
    "text": "language agnostic everything agnostic specific demo happens to be built in Spring boot so I have here a spring boot",
    "start": "1556279",
    "end": "1562720"
  },
  {
    "text": "microservice that is returning film data sorry review data right so you send it a film ID and it will give you back a film",
    "start": "1562720",
    "end": "1569640"
  },
  {
    "text": "review okay it's a very plain vanilla spring boot microservice there's nothing",
    "start": "1569640",
    "end": "1574919"
  },
  {
    "text": "fancy about it and what we want to do is add some semantics to this so I'm going to jump into vs code into my taxi",
    "start": "1574919",
    "end": "1581760"
  },
  {
    "text": "project and this is this is what TXI looks like in the wild right it's a collection of types types that have",
    "start": "1581760",
    "end": "1587760"
  },
  {
    "text": "semantic meaning film ID title there's no structure here this doesn't talk about systems this just talks about",
    "start": "1587760",
    "end": "1594640"
  },
  {
    "text": "semantics um and I have inside my project I have a cotlin generator wired",
    "start": "1594640",
    "end": "1600720"
  },
  {
    "text": "up again because this demo happens to be in cotland we're going to generate some cotlin code and so all I do is I run the",
    "start": "1600720",
    "end": "1609440"
  },
  {
    "text": "build okay and what gets produced is a cotland project that kind of splits out",
    "start": "1610799",
    "end": "1616679"
  },
  {
    "text": "there if we take a look at what's created there's nothing particularly fancy here these and because this is",
    "start": "1616679",
    "end": "1622600"
  },
  {
    "text": "cotlin these are a bunch of type aliases right they're just type aliases that are adding semantics to our things this is a",
    "start": "1622600",
    "end": "1628399"
  },
  {
    "text": "big decimal we're adding some semantic data to it so I have now a library of",
    "start": "1628399",
    "end": "1634000"
  },
  {
    "text": "semantic types that are built into cotland so I can jump back into my spring boot project and I can I can add some",
    "start": "1634000",
    "end": "1641120"
  },
  {
    "text": "semantics into my API so I can say hey this doesn't just take any old integer it takes a film ID",
    "start": "1641120",
    "end": "1649320"
  },
  {
    "text": "right and thanks to the power of demos here is my response that I have prepared earlier so you don't have to watch me",
    "start": "1649320",
    "end": "1655279"
  },
  {
    "text": "type it out but we have a film review that has three fields on it a film ID a film review score and and review text",
    "start": "1655279",
    "end": "1661919"
  },
  {
    "text": "okay and that's it this demo is configured to publish its um schema to",
    "start": "1661919",
    "end": "1668159"
  },
  {
    "text": "orbital on Startup so we're just going to bounce it and we'll jump over",
    "start": "1668159",
    "end": "1673279"
  },
  {
    "text": "into into the code so this is this is kind of um this is a view of of",
    "start": "1673279",
    "end": "1678440"
  },
  {
    "text": "orbital's world so we have we have a database that has a film",
    "start": "1678440",
    "end": "1684039"
  },
  {
    "text": "films table that film has a bunch of fields right they've got some semantics in there one of them is a film ID which",
    "start": "1684039",
    "end": "1690039"
  },
  {
    "text": "we can Plum into these um into these microservices to find out reviews and we can find out um where I can watch it is",
    "start": "1690039",
    "end": "1696360"
  },
  {
    "text": "it on Netflix is it on Hulu like which streaming service has it and so now that orbital understands",
    "start": "1696360",
    "end": "1702399"
  },
  {
    "text": "this I can start asking some questions so I can write a text eql query so I can say hey find me some film data can you",
    "start": "1702399",
    "end": "1710000"
  },
  {
    "text": "guys see that up the back yeah Okay cool so I could say find me some film data uh",
    "start": "1710000",
    "end": "1715320"
  },
  {
    "text": "and we can run that and sure enough we get some data back not particularly exciting this is a",
    "start": "1715320",
    "end": "1720760"
  },
  {
    "text": "database query right we have made very complex way of running a database query at this point um but I'm going to define",
    "start": "1720760",
    "end": "1728399"
  },
  {
    "text": "the consumer contract of stuff that I care about so give me uh give me uh ID field which is film",
    "start": "1728399",
    "end": "1736159"
  },
  {
    "text": "ID give me the title and give me the year it was",
    "start": "1736159",
    "end": "1741559"
  },
  {
    "text": "released okay and we run that and again all I'm doing at the stage is defining a consumer contract this is the structure",
    "start": "1742120",
    "end": "1748760"
  },
  {
    "text": "and naming conventions that I want in my data I don't care where it's coming from this is the data I want I can tell you",
    "start": "1748760",
    "end": "1754360"
  },
  {
    "text": "it's all coming from a database query we can fact look and see there is a database query that is running here to",
    "start": "1754360",
    "end": "1759880"
  },
  {
    "text": "get these fields back um now I'm going to ask for a little bit more information give me the review",
    "start": "1759880",
    "end": "1766360"
  },
  {
    "text": "score and give me the price uh there we",
    "start": "1766360",
    "end": "1772640"
  },
  {
    "text": "go and if we run this there we go and so we're getting back now a list of films",
    "start": "1772640",
    "end": "1778720"
  },
  {
    "text": "with some reviews and some and some prices now this one's a little bit more interesting because that data is not",
    "start": "1778720",
    "end": "1783760"
  },
  {
    "text": "coming from my database right if we take a look at the integration that's kind of run here everything starts with a",
    "start": "1783760",
    "end": "1789159"
  },
  {
    "text": "database query and then we're taking those film IDs and we're Plumbing them into different systems right a different system to go and get the film reviews",
    "start": "1789159",
    "end": "1796039"
  },
  {
    "text": "and another system to go and get uh where I can watch it and its price now again for me as a consumer I didn't have",
    "start": "1796039",
    "end": "1801880"
  },
  {
    "text": "to work that out I don't have to know which team has the system that has pricing data right I don't have to know",
    "start": "1801880",
    "end": "1807279"
  },
  {
    "text": "and do any of the discovery I don't have to get their API spec I don't have to generate a CLI I don't have to think about any of that stuff the uh client",
    "start": "1807279",
    "end": "1814200"
  },
  {
    "text": "has been created for me so I'm happy with that I like that I'm going to quickly save",
    "start": "1814200",
    "end": "1821600"
  },
  {
    "text": "that and we'll call it uh where are we we'll call it Brisbane",
    "start": "1821760",
    "end": "1827919"
  },
  {
    "text": "and I'm going to publish that as an htpm",
    "start": "1828840",
    "end": "1832640"
  },
  {
    "text": "Point okay and that's it right so I'm going to quickly copy that as a CO so you can see it's a real thing we'll jump",
    "start": "1838799",
    "end": "1844600"
  },
  {
    "text": "over here I'll Co it okay and so there's our data that's",
    "start": "1844600",
    "end": "1851559"
  },
  {
    "text": "kind of that's kind of popped out so we've we've built an integration that stitches a database and a fil couple of",
    "start": "1851559",
    "end": "1857399"
  },
  {
    "text": "microservices together turned it into a rest API and we've we've curled it so",
    "start": "1857399",
    "end": "1862519"
  },
  {
    "text": "I'm happy with that I am going to break it now so it it it has come to pass in",
    "start": "1862519",
    "end": "1870120"
  },
  {
    "text": "in our Film Studio that we've been writing our own reviews and word has gotten out and the industry has",
    "start": "1870120",
    "end": "1875760"
  },
  {
    "text": "suggested that that is a bad move so we now need to pull in reviews from an external service um and so the API is",
    "start": "1875760",
    "end": "1882440"
  },
  {
    "text": "kind of the same they take a they have an API that takes a film ID and gives back film reviews but we're buying them",
    "start": "1882440",
    "end": "1888120"
  },
  {
    "text": "from an external company so we're buying them from a company called squash tomatoes and they don't take the data",
    "start": "1888120",
    "end": "1893240"
  },
  {
    "text": "the IDS that live in our film database they have a different ID scheme so they have squash Tomatoes film ID right so",
    "start": "1893240",
    "end": "1899960"
  },
  {
    "text": "generated semantics the key the key Point here is that even though they're both integers even though they're both film IDs semantically they're different",
    "start": "1899960",
    "end": "1907320"
  },
  {
    "text": "right they're not the same thing this thing is not the same as that thing uh and so on my response object we are um",
    "start": "1907320",
    "end": "1915320"
  },
  {
    "text": "we are our field name is called film ID because with not it as a film or movie is hotly contested amongst our industry",
    "start": "1915320",
    "end": "1921000"
  },
  {
    "text": "as everyone in this room knows uh but they've called it film ID so the field name is different and it returns a",
    "start": "1921000",
    "end": "1926399"
  },
  {
    "text": "squash Tomatoes film ID so I'm going to bounce my service and again in doing so it will generate an updated uh schema",
    "start": "1926399",
    "end": "1934120"
  },
  {
    "text": "publish that up to orbital and we'll jump over into orbital and you see the schem has been",
    "start": "1934120",
    "end": "1939799"
  },
  {
    "text": "updated so I'll rerun the query and we still get our data outout right so we're still getting our reviews everybody's",
    "start": "1939799",
    "end": "1945080"
  },
  {
    "text": "happy the consumers haven't haven't changed but if we jump into our profile we can see now the integration is",
    "start": "1945080",
    "end": "1951320"
  },
  {
    "text": "different right so we previously we were taking the ID out of our database and",
    "start": "1951320",
    "end": "1956519"
  },
  {
    "text": "feeding it over to our films review service we can't do that anymore because the films reviews don't speak our IDs so",
    "start": "1956519",
    "end": "1963000"
  },
  {
    "text": "we've had to do this additional hop right and and most of us have done these kind of services where you have to do entity resolution along the way right so",
    "start": "1963000",
    "end": "1969880"
  },
  {
    "text": "we have done this additional hop to go from um uh our film IDs to the squash",
    "start": "1969880",
    "end": "1975240"
  },
  {
    "text": "Tomatoes film IDs to then call the squash Tomatoes film service to get the film reviews back and if I",
    "start": "1975240",
    "end": "1981080"
  },
  {
    "text": "jump back over in here and recoil my statement for me as a consumer I don't know about any of those changes right",
    "start": "1981080",
    "end": "1987519"
  },
  {
    "text": "the producer changed the graph changed but there were no graphql resolvers for me to go and repair there was no yam or",
    "start": "1987519",
    "end": "1993799"
  },
  {
    "text": "mapping file that I had to go and update there was no drag and drop canvas that I needed to go and fix this up on right",
    "start": "1993799",
    "end": "1999519"
  },
  {
    "text": "the producers who describe their data changed and so the integration",
    "start": "1999519",
    "end": "2005000"
  },
  {
    "text": "adapted okay time for one more because I've spoken very fast uh okay this has all been kind of",
    "start": "2005000",
    "end": "2012279"
  },
  {
    "text": "request response kind of data so we have we also have this Kafka topic that publishes protuff",
    "start": "2012279",
    "end": "2018159"
  },
  {
    "text": "messages uh and every time Netflix announces um a new um a new film that",
    "start": "2018159",
    "end": "2025279"
  },
  {
    "text": "they're adding to their catalog they put a topic they put a message onto this Kafka topic right and it's got a film ID",
    "start": "2025279",
    "end": "2030399"
  },
  {
    "text": "and an announcement that comes along with it uh so I want to stream this data but",
    "start": "2030399",
    "end": "2036039"
  },
  {
    "text": "again I want to stream it on my terms I'm going to use I'm going to use exactly the same data contract before so you don't have to watch me type it",
    "start": "2036039",
    "end": "2043080"
  },
  {
    "text": "out so I want to stream this data but I want to stream it as this this kind of",
    "start": "2043080",
    "end": "2049560"
  },
  {
    "text": "uh this consumer contract this is the shape of data that I want to consume and so I run that run that query",
    "start": "2049560",
    "end": "2055200"
  },
  {
    "text": "and here we have now a stream of data that's coming out okay and I",
    "start": "2055200",
    "end": "2061358"
  },
  {
    "text": "can Cur that as well",
    "start": "2061359",
    "end": "2066200"
  },
  {
    "text": "hopefully there we go so we can kind of we've got the stream of data that's coming out but if we look at the integration that has run there it looks",
    "start": "2069000",
    "end": "2077040"
  },
  {
    "text": "very different so it all kind of starts with this Kafka connection that we're that we're connecting to right and now we",
    "start": "2077040",
    "end": "2083520"
  },
  {
    "text": "have three sets of IDs we've got Netflix film IDs we've got squash Tomatoes film IDs and we've got our film IDs so",
    "start": "2083520",
    "end": "2088800"
  },
  {
    "text": "there's a lot more entity resolution that has to go on so it's a very different integration integration graph",
    "start": "2088800",
    "end": "2095480"
  },
  {
    "text": "not that I know about that not that I care about that all I did was specify the data that I wanted and left it to the machines to work it",
    "start": "2095480",
    "end": "2102480"
  },
  {
    "text": "out so there go that's it that's",
    "start": "2102480",
    "end": "2106680"
  },
  {
    "text": "demos so summary glucose sucks right uh let's not waste our time building it",
    "start": "2109560",
    "end": "2116280"
  },
  {
    "start": "2110000",
    "end": "2150000"
  },
  {
    "text": "right it's time consuming it has very low reuse and it breaks yeah make the machines write",
    "start": "2116280",
    "end": "2124040"
  },
  {
    "text": "it API specs are all about transport and structure the wear and the how taxi is",
    "start": "2124040",
    "end": "2129200"
  },
  {
    "text": "all about semantics the Watts stick them together we're going to have a good time taxi is simply semantic metadata this",
    "start": "2129200",
    "end": "2136320"
  },
  {
    "text": "thing is the same as that thing that's all it is tax eql is a is a semantic",
    "start": "2136320",
    "end": "2141400"
  },
  {
    "text": "query language right ask for data generate the glue and orbital is a",
    "start": "2141400",
    "end": "2146720"
  },
  {
    "text": "platform for automating the glue it's a runtime that's it I'm sorry I've clearly",
    "start": "2146720",
    "end": "2152119"
  },
  {
    "start": "2150000",
    "end": "2162000"
  },
  {
    "text": "pushed through that at a rapid Pace but we've got time for questions thank you very much Marty",
    "start": "2152119",
    "end": "2157760"
  },
  {
    "text": "oh",
    "start": "2157760",
    "end": "2160760"
  }
]