[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "thank you",
    "start": "6180",
    "end": "8839"
  },
  {
    "text": "hello everybody my full name is and I've been a developer for too many",
    "start": "12360",
    "end": "19740"
  },
  {
    "text": "years and I I wrote a book for Manning called Data oriented programming my preferred",
    "start": "19740",
    "end": "27779"
  },
  {
    "text": "programming language is closure and in a sense that oriented programming is my attempt",
    "start": "27779",
    "end": "35100"
  },
  {
    "text": "to give closure goodies to non-closure developers as you will see in a moment",
    "start": "35100",
    "end": "44360"
  },
  {
    "text": "I've been a blogger and I have a cool open source project named",
    "start": "44360",
    "end": "51600"
  },
  {
    "text": "clips that allows code in various programming languages to run inside the",
    "start": "51600",
    "end": "57719"
  },
  {
    "text": "browser so as you may have seen in the title of the presentation the goal of data",
    "start": "57719",
    "end": "65100"
  },
  {
    "text": "oriented programming is to reduce complexity so let's start by defining",
    "start": "65100",
    "end": "70200"
  },
  {
    "start": "70000",
    "end": "180000"
  },
  {
    "text": "what do we mean by complexity in fact in computer programming we have",
    "start": "70200",
    "end": "76080"
  },
  {
    "text": "two kinds of complexity the first kind is called computational complexity and it has to do with the",
    "start": "76080",
    "end": "83159"
  },
  {
    "text": "amount of machine resources that are needed in order to run a program",
    "start": "83159",
    "end": "89159"
  },
  {
    "text": "by resource research machine resources I mean either CPU or memory",
    "start": "89159",
    "end": "95640"
  },
  {
    "text": "but in fact during this talk we are going to focus on another kind of complexity and if this is the system",
    "start": "95640",
    "end": "103560"
  },
  {
    "text": "complexity and system complexity has to do with the amount of Human Resources",
    "start": "103560",
    "end": "109380"
  },
  {
    "text": "mostly brain resources required in order to understand the program and here it",
    "start": "109380",
    "end": "115979"
  },
  {
    "text": "doesn't help to pay for more machine on Amazon or to take a stronger machine right as the",
    "start": "115979",
    "end": "122579"
  },
  {
    "text": "idiom goes nine women cannot give birth to a child",
    "start": "122579",
    "end": "128099"
  },
  {
    "text": "in one month right so the same if you have a complex problem",
    "start": "128099",
    "end": "133620"
  },
  {
    "text": "many times if you bring more developers it will just make the complete the problem more complex",
    "start": "133620",
    "end": "139140"
  },
  {
    "text": "so we need to solve the complexity issue at the root level and data oriented programming as a program programming",
    "start": "139140",
    "end": "145739"
  },
  {
    "text": "Paradigm could help us for that",
    "start": "145739",
    "end": "149540"
  },
  {
    "text": "uh yeah there is this code that I liked from the great books fracture and interpretation of computer",
    "start": "151080",
    "end": "157500"
  },
  {
    "text": "programs from 1986 that goes like that programs must be written for people to read",
    "start": "157500",
    "end": "164580"
  },
  {
    "text": "and only incidentally for machines to execute and we intend to to forget about",
    "start": "164580",
    "end": "170160"
  },
  {
    "text": "that that when we write code we want not only the code to run but also the code to be readable and",
    "start": "170160",
    "end": "177900"
  },
  {
    "text": "understandable by other people another disclaimer that outer",
    "start": "177900",
    "end": "184739"
  },
  {
    "start": "180000",
    "end": "234000"
  },
  {
    "text": "programming goal is to reduce complexity for information systems it's not a magic",
    "start": "184739",
    "end": "190319"
  },
  {
    "text": "solution that works well for every kind of system it works well with information",
    "start": "190319",
    "end": "196680"
  },
  {
    "text": "system why do I mean by that I mean systems that manipulate information in",
    "start": "196680",
    "end": "202860"
  },
  {
    "text": "various ways and usually in those systems the information does not belong",
    "start": "202860",
    "end": "208860"
  },
  {
    "text": "to a single process for example in a back-end application that serves",
    "start": "208860",
    "end": "214379"
  },
  {
    "text": "requests from users the information is stored in the database so it's not the",
    "start": "214379",
    "end": "219480"
  },
  {
    "text": "property of the of the back end the same for front-end application that",
    "start": "219480",
    "end": "224940"
  },
  {
    "text": "receive data from the back end and allow the user to interact with the front end and send back some other piece of data",
    "start": "224940",
    "end": "233220"
  },
  {
    "text": "um all right so what does it take to reduce system complexity of Information Systems",
    "start": "233220",
    "end": "241500"
  },
  {
    "start": "234000",
    "end": "349000"
  },
  {
    "text": "in fact it's very short to formulate what we need to do is to treat data as a",
    "start": "241500",
    "end": "248940"
  },
  {
    "text": "value some might say to treat data as a first-class citizen or even shorter to",
    "start": "248940",
    "end": "255299"
  },
  {
    "text": "Simply treat data as data let's see how we can do it",
    "start": "255299",
    "end": "261180"
  },
  {
    "text": "for that we need to keep four simple yet deep principles",
    "start": "261180",
    "end": "268860"
  },
  {
    "text": "principle number one we want to separate code from data because data is a first",
    "start": "268860",
    "end": "274560"
  },
  {
    "text": "class citizen it doesn't have the right to live only inside an object or a class it has the right to live on its own",
    "start": "274560",
    "end": "281639"
  },
  {
    "text": "principle number two we want to referee to be able to represent data with",
    "start": "281639",
    "end": "286860"
  },
  {
    "text": "generic data structure with no extra ceremony like we do with numbers in any",
    "start": "286860",
    "end": "292800"
  },
  {
    "text": "programming language right nobody creates the class for odd numbers between 40 and 50",
    "start": "292800",
    "end": "299699"
  },
  {
    "text": "before the instantiate 42. principle number three we don't want to",
    "start": "299699",
    "end": "306120"
  },
  {
    "text": "manipulate data we want to keep our program as stateless as possible we want",
    "start": "306120",
    "end": "312419"
  },
  {
    "text": "to deal with state in only at the age of the program we don't want the state to pollute all the code",
    "start": "312419",
    "end": "319560"
  },
  {
    "text": "base and finally in order to live to not live in the wild and to do what",
    "start": "319560",
    "end": "327060"
  },
  {
    "text": "data we have at hand we want to be able to define the schema for our data but in",
    "start": "327060",
    "end": "333539"
  },
  {
    "text": "such a way that the data validation is separated from data representation",
    "start": "333539",
    "end": "340620"
  },
  {
    "text": "so let's let's do a deep dive into one and each of these principles",
    "start": "340620",
    "end": "348500"
  },
  {
    "start": "349000",
    "end": "443000"
  },
  {
    "text": "and let's take as an example a library system an online",
    "start": "349139",
    "end": "354240"
  },
  {
    "text": "library system to figure out what happens when we don't keep those principles and how where does the",
    "start": "354240",
    "end": "362820"
  },
  {
    "text": "complexity come from so if you are like me and non-experienced object oriented",
    "start": "362820",
    "end": "369000"
  },
  {
    "text": "programmer where if you were to design an online library you would come up come up with",
    "start": "369000",
    "end": "375479"
  },
  {
    "text": "a complex diagram like the one you see on the screen you will have Library entity and catalog and user and",
    "start": "375479",
    "end": "382740"
  },
  {
    "text": "librarian and author and book and remember and with complex relationships between them sounds familiar to",
    "start": "382740",
    "end": "390120"
  },
  {
    "text": "some of you all right and what are the sources of complexity",
    "start": "390120",
    "end": "395220"
  },
  {
    "text": "in this kind of diagram well we have nodes like the librarian in the middle",
    "start": "395220",
    "end": "402180"
  },
  {
    "text": "that have many edges meaning they are in relationship with many other entities",
    "start": "402180",
    "end": "408180"
  },
  {
    "text": "and once you want to touch this one node you don't really know how is it it is",
    "start": "408180",
    "end": "414000"
  },
  {
    "text": "going to affect other nodes and even to understand how the system works you have to put a lot in your head",
    "start": "414000",
    "end": "421080"
  },
  {
    "text": "so more brain resources are involved in understanding the program and also we have many kind of Errors",
    "start": "421080",
    "end": "427740"
  },
  {
    "text": "right we will remember from uml we have Association we have composition we have inheritance we have used it and all of",
    "start": "427740",
    "end": "434100"
  },
  {
    "text": "this is mixed in a single and complex diagram so it's a burden for",
    "start": "434100",
    "end": "439199"
  },
  {
    "text": "our heads and let's see what happens when we",
    "start": "439199",
    "end": "446160"
  },
  {
    "start": "443000",
    "end": "736000"
  },
  {
    "text": "separate code from data what do I mean by that I mean to have on the one hand data on the other hand",
    "start": "446160",
    "end": "453360"
  },
  {
    "text": "code and you could do that in your preferred language it doesn't matter if it's a functional language an",
    "start": "453360",
    "end": "459720"
  },
  {
    "text": "object-oriented programming language whatever how does it look like when you how do we represent data when it is",
    "start": "459720",
    "end": "466139"
  },
  {
    "text": "separated from code well we have multiple ways we could have classes but only with members with no code we could",
    "start": "466139",
    "end": "472979"
  },
  {
    "text": "have records like in Java protein or whatever or we could just use string Maps",
    "start": "472979",
    "end": "478860"
  },
  {
    "text": "or dictionaries but it's only data no code what about the code well if we are in a functional",
    "start": "478860",
    "end": "486360"
  },
  {
    "text": "FP language we could simply use functions grouped into modules or namespaces or whatever and if we are in",
    "start": "486360",
    "end": "492840"
  },
  {
    "text": "the oop language we could create classes with static methods",
    "start": "492840",
    "end": "499139"
  },
  {
    "text": "no state let's look briefly at an example",
    "start": "499139",
    "end": "504900"
  },
  {
    "text": "so let's take for example a book a book has multiple Fields let's say a",
    "start": "504900",
    "end": "511080"
  },
  {
    "text": "title and a publication here the title is a string the publication here is a number and here you see how we could",
    "start": "511080",
    "end": "518339"
  },
  {
    "text": "create a class for a book only members no code or like I mentioned in Java or other",
    "start": "518339",
    "end": "526800"
  },
  {
    "text": "languages they have some specific class of classes if I may for this kind",
    "start": "526800",
    "end": "532920"
  },
  {
    "text": "of classes where you it's called a record and it's uh more or less the same",
    "start": "532920",
    "end": "538800"
  },
  {
    "text": "but Trotter and with some subtleties that I will not get into right now",
    "start": "538800",
    "end": "544920"
  },
  {
    "text": "or you could use simply string maps for example what in JavaScript they call",
    "start": "544920",
    "end": "549959"
  },
  {
    "text": "Objects or dictionaries in Python it doesn't really matter for our sake and",
    "start": "549959",
    "end": "556260"
  },
  {
    "text": "for the code what's important is that the code is stateless so how does the code receive the data",
    "start": "556260",
    "end": "563640"
  },
  {
    "text": "that it manipulates as an explicit argument no more this",
    "start": "563640",
    "end": "568800"
  },
  {
    "text": "no implicit this the code is all the data is always passed as an explicit argument",
    "start": "568800",
    "end": "577620"
  },
  {
    "text": "so for example here if I will see this example again and again let's say we want to have a logic that calculates a",
    "start": "577620",
    "end": "585360"
  },
  {
    "text": "book information like a string that describes the book that says this book was published in this year you see the",
    "start": "585360",
    "end": "592560"
  },
  {
    "text": "book info function risk method receives the book argument as an explicit",
    "start": "592560",
    "end": "598320"
  },
  {
    "text": "argument and not as we usually do in object content programming where the",
    "start": "598320",
    "end": "603660"
  },
  {
    "text": "book would be the this of the method that what makes this method stateless",
    "start": "603660",
    "end": "610519"
  },
  {
    "text": "and we could do something very similar with simply a function it doesn't really matter functions or stateless metastatic",
    "start": "613680",
    "end": "620220"
  },
  {
    "text": "methods are more or less equivalent in that context",
    "start": "620220",
    "end": "625220"
  },
  {
    "text": "the important thing is that the functions always receive the argument they manipulate as an explicit",
    "start": "625320",
    "end": "632339"
  },
  {
    "text": "argument and why is it helpful in terms of",
    "start": "632339",
    "end": "637800"
  },
  {
    "text": "reducing complexity well let's see what happened to our class diagram when we",
    "start": "637800",
    "end": "643500"
  },
  {
    "text": "split each entity into two right before we had classes we are with",
    "start": "643500",
    "end": "649800"
  },
  {
    "text": "behavior and code mixed together and now we separate between code and data so each entity becomes two the library",
    "start": "649800",
    "end": "657480"
  },
  {
    "text": "class is split into Library code and Library data catalog class into catalog",
    "start": "657480",
    "end": "663060"
  },
  {
    "text": "code and catalog data user class into user code and use user data in terms of",
    "start": "663060",
    "end": "668100"
  },
  {
    "text": "complexity in instead of one complex diagram we are now with two simple",
    "start": "668100",
    "end": "674100"
  },
  {
    "text": "diagrams and our mind are usually brain wired so",
    "start": "674100",
    "end": "680160"
  },
  {
    "text": "that it's much easier for us human beings to deal with two simple things",
    "start": "680160",
    "end": "686100"
  },
  {
    "text": "than with one big things right if we were to analyze the interactions",
    "start": "686100",
    "end": "691860"
  },
  {
    "text": "between all the people in the room it would be a very complex network but if we split into two then we have two",
    "start": "691860",
    "end": "699120"
  },
  {
    "text": "simple networks to analyze and if we split again the more we split the simple will be the",
    "start": "699120",
    "end": "705000"
  },
  {
    "text": "understanding of the system but it's not always possible right if we take the people in the room we cannot arbitrarily",
    "start": "705000",
    "end": "711360"
  },
  {
    "text": "split and if we would split into men and women we might be in trouble or",
    "start": "711360",
    "end": "718560"
  },
  {
    "text": "I don't want to get into other kind of Distinction that we could make because I would get fired",
    "start": "718560",
    "end": "725459"
  },
  {
    "text": "so but in terms of Simplicity it will makes it makes it simpler to understand",
    "start": "725459",
    "end": "730680"
  },
  {
    "text": "the relationships all right",
    "start": "730680",
    "end": "736860"
  },
  {
    "start": "736000",
    "end": "1371000"
  },
  {
    "text": "principle so that was principle number one we separate between code and data but that's not enough we need other",
    "start": "736860",
    "end": "742980"
  },
  {
    "text": "things to completely treat data as data principle number two is about how do we",
    "start": "742980",
    "end": "748440"
  },
  {
    "text": "represent data now that it has been split off from the code how are we going",
    "start": "748440",
    "end": "753600"
  },
  {
    "text": "to represent it well here we have again multiple ways we",
    "start": "753600",
    "end": "758880"
  },
  {
    "text": "could use um a map like in JavaScript and pass the",
    "start": "758880",
    "end": "765600"
  },
  {
    "text": "field with the keys and values or we could simply use the map literals or",
    "start": "765600",
    "end": "770820"
  },
  {
    "text": "dictionaries like in Ruby or python or JavaScript and",
    "start": "770820",
    "end": "776339"
  },
  {
    "text": "when we do that in fact this this complexity of the system is reduced even more because now",
    "start": "776339",
    "end": "783660"
  },
  {
    "text": "we don't really need the graph on the right",
    "start": "783660",
    "end": "788959"
  },
  {
    "text": "it's not the relationships between the value species of data in our system are",
    "start": "789120",
    "end": "795180"
  },
  {
    "text": "there but it's not something that our code has to deal with so it makes it again simpler to",
    "start": "795180",
    "end": "802980"
  },
  {
    "text": "understand the system as a whole in a sense if you want to get into the",
    "start": "802980",
    "end": "809820"
  },
  {
    "text": "details the the entities are coupled but they are",
    "start": "809820",
    "end": "815339"
  },
  {
    "text": "Loosely coupled instead of strongly coupled and it's easier to pass data",
    "start": "815339",
    "end": "820800"
  },
  {
    "text": "around let's say to a service instead of having to instantiate a class in order",
    "start": "820800",
    "end": "826560"
  },
  {
    "text": "to pass to the class the data that needs to be passed",
    "start": "826560",
    "end": "832019"
  },
  {
    "text": "all right um are you guys Brave",
    "start": "832019",
    "end": "838980"
  },
  {
    "text": "I need to see Hands in order to know if I'm going to do the next step or skip it so if I see enough hands raised I will",
    "start": "838980",
    "end": "847260"
  },
  {
    "text": "do the next step otherwise no I need more more all right",
    "start": "847260",
    "end": "854060"
  },
  {
    "text": "um so it's a bit like I've been a meditation practitioner for 15 years and",
    "start": "854519",
    "end": "861360"
  },
  {
    "text": "from what I know that's what Buddhist guys claim",
    "start": "861360",
    "end": "867240"
  },
  {
    "text": "about what about suffering suffering in our life does not come from",
    "start": "867240",
    "end": "875180"
  },
  {
    "text": "the circumstances of life it comes or not only from the",
    "start": "875180",
    "end": "881459"
  },
  {
    "text": "circumstances it comes mostly from how we perceive the circumstances",
    "start": "881459",
    "end": "888959"
  },
  {
    "text": "and quite often we cannot really change the circumstances if from God forbid we are",
    "start": "888959",
    "end": "895920"
  },
  {
    "text": "endured or we lose someone that we love but what we can change is how we relate",
    "start": "895920",
    "end": "903180"
  },
  {
    "text": "to the circumstances and then we might not be able to reduce the pain but we might be able to reduce",
    "start": "903180",
    "end": "910920"
  },
  {
    "text": "the pay the suffering caused by the pain in programming we have the complexity of",
    "start": "910920",
    "end": "917220"
  },
  {
    "text": "the problem that we want to solve the essential complexity of the system that we cannot really change if the",
    "start": "917220",
    "end": "923399"
  },
  {
    "text": "problem we want to solve is hard then it will be how to solve the problem what we can make it easier is all that",
    "start": "923399",
    "end": "931500"
  },
  {
    "text": "what goes around what is called The Accidental complexity so enough word",
    "start": "931500",
    "end": "938760"
  },
  {
    "text": "now I want to give you a taste of that and it's going to be a bit challenging because the environment is a little bit",
    "start": "938760",
    "end": "944279"
  },
  {
    "text": "noisy but I think we can try so for a few minutes I like to ask you guys to",
    "start": "944279",
    "end": "949440"
  },
  {
    "text": "close your eyes and we were going to do a short meditation",
    "start": "949440",
    "end": "955260"
  },
  {
    "text": "don't feel too much discount everybody close their eyes so nobody looks at look at you",
    "start": "955260",
    "end": "961079"
  },
  {
    "text": "and for a few moments try to find a way to rest",
    "start": "961079",
    "end": "966980"
  },
  {
    "text": "and take a few deep breaths to enter in contact with your body",
    "start": "967199",
    "end": "973579"
  },
  {
    "text": "and another another deep breath",
    "start": "975779",
    "end": "980180"
  },
  {
    "text": "and another one",
    "start": "981839",
    "end": "984980"
  },
  {
    "text": "and now let's try let's pay attention to the noise around us",
    "start": "988800",
    "end": "997519"
  },
  {
    "text": "let's relate to the noise simply as a noise",
    "start": "999480",
    "end": "1006279"
  },
  {
    "text": "at a very very row level a noise",
    "start": "1006980",
    "end": "1012980"
  },
  {
    "text": "is a noise",
    "start": "1012980",
    "end": "1015759"
  },
  {
    "text": "and now let's try to do the same with the body sensation maybe you feel a little bit of",
    "start": "1027799",
    "end": "1034040"
  },
  {
    "text": "discomfort so without changing the posture just notice the discomfort of the",
    "start": "1034040",
    "end": "1041900"
  },
  {
    "text": "comfort notice it and relate to it",
    "start": "1041900",
    "end": "1048860"
  },
  {
    "text": "at a row level",
    "start": "1048860",
    "end": "1052120"
  },
  {
    "text": "the raw level of the Body Sensations",
    "start": "1054919",
    "end": "1060639"
  },
  {
    "text": "now let's open our eyes black so first of all I want to give you a round of",
    "start": "1081620",
    "end": "1087679"
  },
  {
    "text": "applause thank you for your cooperation",
    "start": "1087679",
    "end": "1093320"
  },
  {
    "text": "and what I want what I would like to illustrate with this little meditation that we do",
    "start": "1093320",
    "end": "1100280"
  },
  {
    "text": "is that I don't know what kind of noise you heard but maybe",
    "start": "1100280",
    "end": "1105679"
  },
  {
    "text": "someone laughed and in in a regular setting you might",
    "start": "1105679",
    "end": "1111140"
  },
  {
    "text": "have think he loves about me or how could they speak how could under respect the Silence of the room we are",
    "start": "1111140",
    "end": "1118460"
  },
  {
    "text": "in a bibliotech or various kind of salts that make the",
    "start": "1118460",
    "end": "1123860"
  },
  {
    "text": "experience much more much more painful than what it is because after all it's",
    "start": "1123860",
    "end": "1130640"
  },
  {
    "text": "just a noise and the same with the body sensation maybe it hurts a little bit maybe it's",
    "start": "1130640",
    "end": "1135799"
  },
  {
    "text": "not 100 comfortable but usually we can manage this kind of pain",
    "start": "1135799",
    "end": "1142039"
  },
  {
    "text": "usually what happens is in our website oh I'm stupid I should have done this I should have listened to do that I",
    "start": "1142039",
    "end": "1148100"
  },
  {
    "text": "shouldn't haven't eaten this thing I should have slept earlier of many things",
    "start": "1148100",
    "end": "1153500"
  },
  {
    "text": "that go in our head and that's the source the main source of suffering the",
    "start": "1153500",
    "end": "1161840"
  },
  {
    "text": "reality itself is maybe painful maybe more maybe less it depends on the days and depends on",
    "start": "1161840",
    "end": "1168860"
  },
  {
    "text": "the person but the suffering we can reduce it by somehow entering at a row level in",
    "start": "1168860",
    "end": "1176480"
  },
  {
    "text": "contact with reality and now there is a little limitation to it imagine this Buddhist",
    "start": "1176480",
    "end": "1184340"
  },
  {
    "text": "guy meditating and he listens to a sound",
    "start": "1184340",
    "end": "1191000"
  },
  {
    "text": "that seemed like a fire in his house and he goes",
    "start": "1191000",
    "end": "1196039"
  },
  {
    "text": "it's just a sound and then it smells like a fire it's just a smell I'm entering at a raw",
    "start": "1196039",
    "end": "1203240"
  },
  {
    "text": "level in contact with the reality then you might imagine maybe this guy",
    "start": "1203240",
    "end": "1209780"
  },
  {
    "text": "will not suffer but it will he will not be there after a few minutes",
    "start": "1209780",
    "end": "1214940"
  },
  {
    "text": "so sometimes it is helpful to have mental models to deal with reality and",
    "start": "1214940",
    "end": "1220640"
  },
  {
    "text": "sometimes being only in contact at the raw level has some limitation and we",
    "start": "1220640",
    "end": "1225740"
  },
  {
    "text": "will address this limitation via principle number four so back to",
    "start": "1225740",
    "end": "1230780"
  },
  {
    "text": "programming when we treat data as data we enter in",
    "start": "1230780",
    "end": "1236240"
  },
  {
    "text": "contact with the reality with the information at a raw level when we represent data with classes we",
    "start": "1236240",
    "end": "1242539"
  },
  {
    "text": "superimpose on the reality our mental models and this is",
    "start": "1242539",
    "end": "1248419"
  },
  {
    "text": "one of the main cause of suffering for the programmer Community as a whole",
    "start": "1248419",
    "end": "1254299"
  },
  {
    "text": "that's the main source of complexity all right so let's see more benefits",
    "start": "1254299",
    "end": "1262100"
  },
  {
    "text": "that we gain when we represent data as data here on the left you can see the data representation of the library",
    "start": "1262100",
    "end": "1268760"
  },
  {
    "text": "catalog and the simple fact that we can visualize it as data is quite a big",
    "start": "1268760",
    "end": "1276860"
  },
  {
    "text": "thing if everything were represented with classes I'm not sure that we would",
    "start": "1276860",
    "end": "1282799"
  },
  {
    "text": "have been able to represent it to represent it or to Simply dump it in the",
    "start": "1282799",
    "end": "1288080"
  },
  {
    "text": "console or save it in the database or send it over the wire would have need some many kind of reflection or Advanced",
    "start": "1288080",
    "end": "1296120"
  },
  {
    "text": "features of the language of the tools of the idea here is just data so no no",
    "start": "1296120",
    "end": "1301159"
  },
  {
    "text": "special thing is required in order to be able to visualize data when data is represented as data",
    "start": "1301159",
    "end": "1308000"
  },
  {
    "text": "serialization transforming a piece of data into Json is",
    "start": "1308000",
    "end": "1313640"
  },
  {
    "text": "a solved problem transforming a class hierarchy into Json",
    "start": "1313640",
    "end": "1319640"
  },
  {
    "text": "is not so fun not so easy we can manipulate our data with an",
    "start": "1319640",
    "end": "1325820"
  },
  {
    "text": "immense amount of generic functions available either by the language from the language or via third party",
    "start": "1325820",
    "end": "1332000"
  },
  {
    "text": "libraries you know sold by select group by rename Keys remove Keys add Keys merge all of",
    "start": "1332000",
    "end": "1339200"
  },
  {
    "text": "this is again we can leverage that we don't have to reinvent the wheel and to",
    "start": "1339200",
    "end": "1344299"
  },
  {
    "text": "implement again and again the generic parts of our business logic",
    "start": "1344299",
    "end": "1350440"
  },
  {
    "text": "as I mentioned we don't need reflection and also something interesting is that each piece of data",
    "start": "1350960",
    "end": "1357440"
  },
  {
    "text": "has an information path we can refer to it for example we can refer to the name",
    "start": "1357440",
    "end": "1363380"
  },
  {
    "text": "of the author whose ID is Alan Moore every",
    "start": "1363380",
    "end": "1368480"
  },
  {
    "text": "piece of data has a coordinate so that was pretty simple number two",
    "start": "1368480",
    "end": "1374000"
  },
  {
    "start": "1371000",
    "end": "1722000"
  },
  {
    "text": "represent data as data principle number three we don't mutate data or",
    "start": "1374000",
    "end": "1381559"
  },
  {
    "text": "say differently data is immutable think about the number 42 what happens",
    "start": "1381559",
    "end": "1389659"
  },
  {
    "text": "to 42 when you add 1 to it does it become 43",
    "start": "1389659",
    "end": "1395419"
  },
  {
    "text": "no you are 42 you have one and you have the result of 40 21 which is 43 you have",
    "start": "1395419",
    "end": "1402140"
  },
  {
    "text": "three things you don't mutate 42 in order to make it 43. so in data oriented",
    "start": "1402140",
    "end": "1408020"
  },
  {
    "text": "programming we do the same with our hash Maps when we have hash maps with 10 Fields when we want to change the value",
    "start": "1408020",
    "end": "1414500"
  },
  {
    "text": "of a field we create another version of the hashmap with the new value",
    "start": "1414500",
    "end": "1420679"
  },
  {
    "text": "the only problem that so let's first see the benefit and then we'll see the problem",
    "start": "1420679",
    "end": "1427039"
  },
  {
    "text": "no straight safety problem because it's immutable no logs no mute access no side effects",
    "start": "1427039",
    "end": "1434240"
  },
  {
    "text": "so it's like a dream the only tiny little problem is",
    "start": "1434240",
    "end": "1440240"
  },
  {
    "text": "performance because let's say I have a catalog of million books and now I want to add a",
    "start": "1440240",
    "end": "1447559"
  },
  {
    "text": "book to my catalog am I going to deeply to create a deep copy a clone of my",
    "start": "1447559",
    "end": "1453799"
  },
  {
    "text": "catalog in order to have a new version of the catalog with the million plus one books",
    "start": "1453799",
    "end": "1459919"
  },
  {
    "text": "so until 2009 and",
    "start": "1459919",
    "end": "1465280"
  },
  {
    "text": "birth of closure that's more or less was the only way to do it there were no simple and performance way",
    "start": "1465280",
    "end": "1473240"
  },
  {
    "text": "to manipulate data in uh to manipulate data in an immutable and",
    "start": "1473240",
    "end": "1480140"
  },
  {
    "text": "effective way but the the guy that invented closure with cheeky discovered",
    "start": "1480140",
    "end": "1485780"
  },
  {
    "text": "a very powerful data structure called hamt",
    "start": "1485780",
    "end": "1491500"
  },
  {
    "text": "hash array mapped try that allows us to manipulate data in an immutable way and",
    "start": "1491500",
    "end": "1497900"
  },
  {
    "text": "in a performant way and it's based us and of course this has been ported to",
    "start": "1497900",
    "end": "1503840"
  },
  {
    "text": "every programming language to JavaScript to Scala to Ruby to python to c-sharp to",
    "start": "1503840",
    "end": "1510280"
  },
  {
    "text": "erlang to whatever and it is based on a very cool idea",
    "start": "1510280",
    "end": "1516860"
  },
  {
    "text": "called structural sharing and I want to illustrate this idea for you guys",
    "start": "1516860",
    "end": "1522200"
  },
  {
    "text": "that's not exactly the way it is implemented but is implemented in a similar way but for the sake of",
    "start": "1522200",
    "end": "1527299"
  },
  {
    "text": "Simplicity I'm going to illustrate the simple version the naive version of the structural sharing so imagine we have",
    "start": "1527299",
    "end": "1534380"
  },
  {
    "text": "our library and in the library we have the catalog and the user management as the catalog is split into authors and",
    "start": "1534380",
    "end": "1540799"
  },
  {
    "text": "books and the books we have million elements here you see one book Watchman and he's the properties of the book",
    "start": "1540799",
    "end": "1548539"
  },
  {
    "text": "Gradebook by the way and now imagine that you want to update the catalog in",
    "start": "1548539",
    "end": "1554480"
  },
  {
    "text": "such a way that you correct the publication here of Watchmen instead of 1987 you want to change this to 1986.",
    "start": "1554480",
    "end": "1563240"
  },
  {
    "text": "so I want to show you how we can functionally clone",
    "start": "1563240",
    "end": "1569960"
  },
  {
    "text": "the library but in fact without cloning",
    "start": "1569960",
    "end": "1577120"
  },
  {
    "text": "and this is the structural sharing so the way it works we create a new node the pink one for the library for the new",
    "start": "1577400",
    "end": "1583460"
  },
  {
    "text": "library how expensive is it nothing it's one operation and in this",
    "start": "1583460",
    "end": "1590360"
  },
  {
    "text": "Library node first of all we see that the user management path is not affected",
    "start": "1590360",
    "end": "1595760"
  },
  {
    "text": "by the change we want to do because in the information path that we want to manipulate we Traverse only the catalog",
    "start": "1595760",
    "end": "1603799"
  },
  {
    "text": "so it is safe to point to the old version of the user management because it's not going to change",
    "start": "1603799",
    "end": "1611419"
  },
  {
    "text": "we cannot do the same with the catalog because the catalog is about to change so what do we do we create a new node",
    "start": "1611419",
    "end": "1616580"
  },
  {
    "text": "for the catalog the pink one the next catalog and then we apply this trick again and again in the next catalog we",
    "start": "1616580",
    "end": "1623840"
  },
  {
    "text": "see that the authors pass is not affected it's not in our",
    "start": "1623840",
    "end": "1629600"
  },
  {
    "text": "information path so we copy it by reference while the books pass we need to create a",
    "start": "1629600",
    "end": "1635059"
  },
  {
    "text": "new node for it and all the books can be copied by reference beside Watchmen that",
    "start": "1635059",
    "end": "1641840"
  },
  {
    "text": "we need a new note for it all the properties of Watchmen could be copied by reference beside the publication that",
    "start": "1641840",
    "end": "1647840"
  },
  {
    "text": "we want to modify so in order to create the new version of",
    "start": "1647840",
    "end": "1652940"
  },
  {
    "text": "the our library we need only one two three four five operations",
    "start": "1652940",
    "end": "1658760"
  },
  {
    "text": "match cheaper cheaper than deep cloning and that's what we call structural",
    "start": "1658760",
    "end": "1665000"
  },
  {
    "text": "sharing and it relies on this simple observation that when data is immutable it is safe",
    "start": "1665000",
    "end": "1672620"
  },
  {
    "text": "to share it take a second to think about it when data is immutable it is safe to share it",
    "start": "1672620",
    "end": "1680480"
  },
  {
    "text": "the question that we are so many times asked in Tech interviews what happen if",
    "start": "1680480",
    "end": "1686960"
  },
  {
    "text": "someone modifies the author by ID does it affect the two versions only one",
    "start": "1686960",
    "end": "1693080"
  },
  {
    "text": "version or how do you prevent changing one version to affect the new version so what is the answer according",
    "start": "1693080",
    "end": "1700700"
  },
  {
    "text": "to data Hotel programming the answer is that it is a dumb question because we cannot mutate data and so",
    "start": "1700700",
    "end": "1709279"
  },
  {
    "text": "many bugs simply sorry so many bags simply do not occur",
    "start": "1709279",
    "end": "1714740"
  },
  {
    "text": "if we respect this principle of not mutating data",
    "start": "1714740",
    "end": "1722080"
  },
  {
    "start": "1722000",
    "end": "1782000"
  },
  {
    "text": "in practice we don't have to implement this algorithm we could rely on libraries that",
    "start": "1723039",
    "end": "1731740"
  },
  {
    "text": "give give it for free to us and in fact in JavaScript it will be",
    "start": "1731740",
    "end": "1736880"
  },
  {
    "text": "in the upcoming years part of the JavaScript itself when you want to have",
    "start": "1736880",
    "end": "1742220"
  },
  {
    "text": "an immutable object for example you add a hash sign before and it will be",
    "start": "1742220",
    "end": "1747860"
  },
  {
    "text": "immutable and the same for arrays you have a hash before the square bracket and it will be immutable right now it's",
    "start": "1747860",
    "end": "1753200"
  },
  {
    "text": "just a proposal and in Java there is something similar with the add value",
    "start": "1753200",
    "end": "1758360"
  },
  {
    "text": "annotation and Java records are in fact immutable and as I mentioned the persistent data",
    "start": "1758360",
    "end": "1766820"
  },
  {
    "text": "structure implementation has been ported to any programming language we have immutable JS for JavaScript Guru for",
    "start": "1766820",
    "end": "1772940"
  },
  {
    "text": "Java pets for go enclosure is part of the language we have F sharp or C sharp persistent hamster Etc",
    "start": "1772940",
    "end": "1781240"
  },
  {
    "start": "1782000",
    "end": "2166000"
  },
  {
    "text": "so in fact there is no reason in 2023 not there is no reason to mutate data or",
    "start": "1782059",
    "end": "1789500"
  },
  {
    "text": "not to not to not not to not mutate",
    "start": "1789500",
    "end": "1794840"
  },
  {
    "text": "there is no reason to too many so in 2023 there are very good reasons to keep",
    "start": "1794840",
    "end": "1800120"
  },
  {
    "text": "data immutable all right back to the fire and the",
    "start": "1800120",
    "end": "1806000"
  },
  {
    "text": "Buddhist guy right remember oh it's just you know is it just a smell keep her stay happy",
    "start": "1806000",
    "end": "1814940"
  },
  {
    "text": "so sometimes and not sometimes quite often when our code base grows when we",
    "start": "1814940",
    "end": "1820760"
  },
  {
    "text": "are more when we have more fingers in into the code base",
    "start": "1820760",
    "end": "1825980"
  },
  {
    "text": "it could be grows and we don't know what we have at hand we have a function that receives M what is m",
    "start": "1825980",
    "end": "1832460"
  },
  {
    "text": "a map what are the fields of the map I don't know look at the dog string oh there is no dog string oh whatever guess",
    "start": "1832460",
    "end": "1839120"
  },
  {
    "text": "put a breakpoint and debug and inspect by yourself so that's the the danger if you go to",
    "start": "1839120",
    "end": "1846679"
  },
  {
    "text": "too far with this uh approach we need some structure",
    "start": "1846679",
    "end": "1852200"
  },
  {
    "text": "we need a way to validate data but let's see how we can do it with avoiding the",
    "start": "1852200",
    "end": "1858200"
  },
  {
    "text": "complexity of traditional static type systems principle",
    "start": "1858200",
    "end": "1864860"
  },
  {
    "text": "oh before I illustrate principle number four let me show you what happens if we",
    "start": "1864860",
    "end": "1870380"
  },
  {
    "text": "don't take into account principle number four so back to our simple function book info that receives a book",
    "start": "1870380",
    "end": "1878600"
  },
  {
    "text": "and returns a string based on the title and the publication here now if someone pass passes to the function in",
    "start": "1878600",
    "end": "1885919"
  },
  {
    "text": "the invalid book where the Field title has been by mistake named the title",
    "start": "1885919",
    "end": "1892340"
  },
  {
    "text": "then book info will have will Behavior instead of failing",
    "start": "1892340",
    "end": "1898880"
  },
  {
    "text": "it will say was published in 1986 because in",
    "start": "1898880",
    "end": "1905059"
  },
  {
    "text": "JavaScript when you access a known properties it returned and defined and undefined is strictified as",
    "start": "1905059",
    "end": "1913778"
  },
  {
    "text": "and that's not what we want if we are lucky and we can deal with this problem at",
    "start": "1914500",
    "end": "1922399"
  },
  {
    "text": "compile time we would want the type system or the",
    "start": "1922399",
    "end": "1927620"
  },
  {
    "text": "compiler of someone to prevent us from writing code like that but sometimes we",
    "start": "1927620",
    "end": "1932840"
  },
  {
    "text": "cannot prevent this situation from happening because it relies on Dynamic data that comes from",
    "start": "1932840",
    "end": "1939260"
  },
  {
    "text": "the user you cannot send your type system to all your users they will say hey don't mistype the type",
    "start": "1939260",
    "end": "1946460"
  },
  {
    "text": "the field name right your users somehow rely on documentation that might be up",
    "start": "1946460",
    "end": "1951620"
  },
  {
    "text": "to date or might be outdated so what happens to our backend when it receives",
    "start": "1951620",
    "end": "1956840"
  },
  {
    "text": "a Json payload with an invalid field name type system is not helpful there or",
    "start": "1956840",
    "end": "1962840"
  },
  {
    "text": "static type system is not helpful there so what do we what the expected behavior",
    "start": "1962840",
    "end": "1969260"
  },
  {
    "text": "of the system would be to return an error and in the error explanation about what went wrong in this piece of data",
    "start": "1969260",
    "end": "1977659"
  },
  {
    "text": "and for that we can use something like Json schema which is a",
    "start": "1977659",
    "end": "1983179"
  },
  {
    "text": "language for data specification for data schema and when you describe the shape",
    "start": "1983179",
    "end": "1990260"
  },
  {
    "text": "of your data you also use data so data is used in order to describe the shape",
    "start": "1990260",
    "end": "1995960"
  },
  {
    "text": "of your data and you can also use data to describe the shape of the data that describe the",
    "start": "1995960",
    "end": "2002679"
  },
  {
    "text": "shape of the data and you can use data to describe the shape of the shape okay you get it so let me show you an example",
    "start": "2002679",
    "end": "2008919"
  },
  {
    "text": "how could the schema for our",
    "start": "2008919",
    "end": "2014620"
  },
  {
    "text": "book look like in Json schema so first of all its type is an object object in",
    "start": "2014620",
    "end": "2020440"
  },
  {
    "text": "JavaScript means map and it has two require Fields Title and publication here and title is expected",
    "start": "2020440",
    "end": "2027399"
  },
  {
    "text": "to be a string and publication here is expected to be an integer between",
    "start": "2027399",
    "end": "2032519"
  },
  {
    "text": "455 and 2022 someone has a guess what happened in 4 1455",
    "start": "2032519",
    "end": "2040059"
  },
  {
    "text": "yes the first book was published Gutenberg Bible",
    "start": "2040539",
    "end": "2045120"
  },
  {
    "text": "and so you see this is the kind of stuff that we cannot Express with a static type system right",
    "start": "2045659",
    "end": "2053980"
  },
  {
    "text": "in static types we cannot express that an integer needs to be included in in a range but here because we are Dynamic we",
    "start": "2053980",
    "end": "2059800"
  },
  {
    "text": "can express whatever logic we want and there are multiple libraries to",
    "start": "2059800",
    "end": "2066300"
  },
  {
    "text": "handle Json schema for example in JavaScript there is a library called ajv you we need to pass this piece of data",
    "start": "2066300",
    "end": "2073480"
  },
  {
    "text": "if it's defined on a file and now we have the book schema and the only thing we need to do is",
    "start": "2073480",
    "end": "2080800"
  },
  {
    "text": "before our business logic we add a line or two lines that validates that the",
    "start": "2080800",
    "end": "2086800"
  },
  {
    "text": "data is confirmed according to the schema and if it's not the case we throw an exception with explanation via the",
    "start": "2086800",
    "end": "2095080"
  },
  {
    "text": "error of text function and the something dot errors that will have a universe",
    "start": "2095080",
    "end": "2101080"
  },
  {
    "text": "humanized version of the errors and we can send it back to our user so in the",
    "start": "2101080",
    "end": "2106420"
  },
  {
    "text": "HTTP response we will have not only invalid requests 400 something but in the payload we will include hey the",
    "start": "2106420",
    "end": "2113260"
  },
  {
    "text": "title field is has been missed type or the title is an inexistent field or something like that and it will be",
    "start": "2113260",
    "end": "2118839"
  },
  {
    "text": "generated by us for free no custom code need to be written only the schema so it allows us to focus on",
    "start": "2118839",
    "end": "2126579"
  },
  {
    "text": "the business logic",
    "start": "2126579",
    "end": "2129420"
  },
  {
    "text": "and in this example we will have this string written to the user book info was called with invalid argument",
    "start": "2133900",
    "end": "2140859"
  },
  {
    "text": "data should have the required property title and in evolved version of it you could have also",
    "start": "2140859",
    "end": "2146760"
  },
  {
    "text": "like autocorrect some system could be smart enough to say oh the title looks",
    "start": "2146760",
    "end": "2152500"
  },
  {
    "text": "like title so maybe you have an error in the title all right and again this is available in",
    "start": "2152500",
    "end": "2160480"
  },
  {
    "text": "virtually any programming language",
    "start": "2160480",
    "end": "2163800"
  },
  {
    "start": "2166000",
    "end": "2318000"
  },
  {
    "text": "all right we come close to wrap up I like to show you that none sorry none of",
    "start": "2167500",
    "end": "2173500"
  },
  {
    "text": "these ideas are new when I had to I started to write my book that I attend programming I didn't invent anything I",
    "start": "2173500",
    "end": "2182079"
  },
  {
    "text": "just took ideas from other great minds some of them from closure some of them",
    "start": "2182079",
    "end": "2187660"
  },
  {
    "text": "from list from therefore academic paper and I just organized them in a",
    "start": "2187660",
    "end": "2195339"
  },
  {
    "text": "nice package so it all it all goes back to the first day of of lisp 1958 where list was",
    "start": "2195339",
    "end": "2204400"
  },
  {
    "text": "designed as a language for processing immutable lists lisp stands for",
    "start": "2204400",
    "end": "2210160"
  },
  {
    "text": "list processing and those lists were immutable in 1981",
    "start": "2210160",
    "end": "2218260"
  },
  {
    "text": "Paul Bruce McLennan wrote a beautiful yet understandable paper called values",
    "start": "2218260",
    "end": "2224140"
  },
  {
    "text": "and objects where he distinguishes objects not in the meaning of object-orated programming but in",
    "start": "2224140",
    "end": "2229599"
  },
  {
    "text": "distinguishes between stateful things and stateless things values are stateless and fun to manipulate objects",
    "start": "2229599",
    "end": "2236859"
  },
  {
    "text": "are stateful and not fun to manipulate in 2000",
    "start": "2236859",
    "end": "2242380"
  },
  {
    "text": "Phil Bagwell invented a data structure to solve a problem not related at all with immutable data a problem of Ideal",
    "start": "2242380",
    "end": "2250000"
  },
  {
    "text": "hash trees that need to be reached and he found a way so that I hash trees",
    "start": "2250000",
    "end": "2255400"
  },
  {
    "text": "would not never been reached and this data structure was used in 2007 by Rich",
    "start": "2255400",
    "end": "2262119"
  },
  {
    "text": "hickey as the foundation of persistent data structures the same data structures",
    "start": "2262119",
    "end": "2267220"
  },
  {
    "text": "that have been ported to every other programming language and make it possible to manipulate data in an",
    "start": "2267220",
    "end": "2274180"
  },
  {
    "text": "immutable yet effective way and in 2006 between the two those two",
    "start": "2274180",
    "end": "2279640"
  },
  {
    "text": "events there was a great paper populated called out of the topic that distinguishes between essential",
    "start": "2279640",
    "end": "2286180"
  },
  {
    "text": "complexity and accidental complexity in Buddhist terms",
    "start": "2286180",
    "end": "2291460"
  },
  {
    "text": "between pain and suffering remember we cannot reduce the pain if it",
    "start": "2291460",
    "end": "2298119"
  },
  {
    "text": "hurts it hurts but we can reduce the suffering and since 2009 all those persistent data",
    "start": "2298119",
    "end": "2305740"
  },
  {
    "text": "structures are starting to be plotted one of the interesting part was to JavaScript and it was done by Facebook",
    "start": "2305740",
    "end": "2312520"
  },
  {
    "text": "in the library called immutable.js",
    "start": "2312520",
    "end": "2316859"
  },
  {
    "start": "2318000",
    "end": "2357000"
  },
  {
    "text": "let's wrap up so data written programming allows us to reduce complexity of Information Systems by",
    "start": "2318880",
    "end": "2326140"
  },
  {
    "text": "treating data as data and it takes four things first of all to separate between code and data for code we can use either",
    "start": "2326140",
    "end": "2333400"
  },
  {
    "text": "FP or op doesn't matter and data we separate between the data",
    "start": "2333400",
    "end": "2339099"
  },
  {
    "text": "itself and the schema of the data that's pretty simple number four for the representation we use",
    "start": "2339099",
    "end": "2345820"
  },
  {
    "text": "generic data structure that was principle number two and those General",
    "start": "2345820",
    "end": "2351400"
  },
  {
    "text": "return structures we keep them immutable that's principle number three",
    "start": "2351400",
    "end": "2357400"
  },
  {
    "start": "2357000",
    "end": "2374000"
  },
  {
    "text": "and with that I think I'm done [Applause]",
    "start": "2357400",
    "end": "2365780"
  }
]