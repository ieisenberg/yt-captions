[
  {
    "text": "[Music]",
    "start": "4760",
    "end": "7849"
  },
  {
    "text": "hi everyone thank you for that introduction you've officially made it",
    "start": "13410",
    "end": "19810"
  },
  {
    "text": "to the last session of the day so congratulations thank you for your interest in being diligent in coming",
    "start": "19810",
    "end": "26470"
  },
  {
    "text": "coming listen listening to our talk so as Lara said I'm George Saab I have",
    "start": "26470",
    "end": "33730"
  },
  {
    "text": "the distinct pleasure of being the person who runs the java group at oracle i'm also the chairperson of the open JDK",
    "start": "33730",
    "end": "40600"
  },
  {
    "text": "governing board and I'll have to show you this which says if you're going to",
    "start": "40600",
    "end": "45940"
  },
  {
    "text": "make decisions about buying things we're gonna be talking about stuff that's happening in the future so keep that in mind you know things",
    "start": "45940",
    "end": "51909"
  },
  {
    "text": "change that's what this slide is about ok so the way we're going to do this I'm",
    "start": "51909",
    "end": "58390"
  },
  {
    "text": "going to talk just a little bit about Java in general and kind of what's going on and then Michael is going to talk a",
    "start": "58390",
    "end": "63760"
  },
  {
    "text": "whole bunch about some of the projects that we're currently working on I think I suspect in this room there are a lot",
    "start": "63760",
    "end": "71500"
  },
  {
    "text": "of people who use Java a lot and so I may not you know need to twist your arm or convince you of why Java SE is",
    "start": "71500",
    "end": "79450"
  },
  {
    "text": "important obviously we think it's a great technology you know my group is",
    "start": "79450",
    "end": "84909"
  },
  {
    "text": "one that came from Sun Microsystems and has been working on java for many many",
    "start": "84909",
    "end": "90579"
  },
  {
    "text": "many years and so it's something that we're passionate about and we love speaking with people who use the",
    "start": "90579",
    "end": "96609"
  },
  {
    "text": "technology and you know we love hearing success stories we're all true interested in hearing about challenges",
    "start": "96609",
    "end": "102249"
  },
  {
    "text": "you have so we're always happy to be at conferences like this and I hope you'll take advantage of that I think you know",
    "start": "102249",
    "end": "110590"
  },
  {
    "text": "when we think about Java and how it has evolved one of the things that we always",
    "start": "110590",
    "end": "116109"
  },
  {
    "text": "try to be conscious of is having an evolution which is very thoughtful and",
    "start": "116109",
    "end": "122829"
  },
  {
    "text": "not haphazard Java has never been a technology that's been sort of chasing",
    "start": "122829",
    "end": "128470"
  },
  {
    "text": "the latest features and just kind of tacking things on the side we really try to make sure when we add something that",
    "start": "128470",
    "end": "135250"
  },
  {
    "text": "we understand what it's good for why you might want it we go",
    "start": "135250",
    "end": "140910"
  },
  {
    "text": "through a lot of work to basically do our development of new features now in the open in open JDK and so this is",
    "start": "140910",
    "end": "149610"
  },
  {
    "text": "something you can take advantage of you can actually go to open JDK you can sign up to mailing lists you can see the",
    "start": "149610",
    "end": "155580"
  },
  {
    "text": "design discussions that we're having as we work on new features and what you'll find if you do that is things that you",
    "start": "155580",
    "end": "163140"
  },
  {
    "text": "think are really simple like you know they're adding closures to Java how long could that take",
    "start": "163140",
    "end": "169620"
  },
  {
    "text": "it's obvious well you know in fact when you look at something like lambdas in",
    "start": "169620",
    "end": "175380"
  },
  {
    "text": "Java 8 and it looks obvious that's because a lot of time and a lot of hard",
    "start": "175380",
    "end": "180600"
  },
  {
    "text": "work has gone into making it obvious I guarantee you that if we took the first design that we had for lambdas and had",
    "start": "180600",
    "end": "187380"
  },
  {
    "text": "run with that we would have had something out very very quickly but it would not have felt as natural and it",
    "start": "187380",
    "end": "193620"
  },
  {
    "text": "would have had a lot of challenges a lot of problems a lot of frustrations and in fact those are the kind of things that",
    "start": "193620",
    "end": "200700"
  },
  {
    "text": "tend to actually accumulate when you're making a technology and you're not just",
    "start": "200700",
    "end": "206190"
  },
  {
    "text": "thinking of you know well how do I get it out in six months you're thinking of you know how is this going to persist",
    "start": "206190",
    "end": "211440"
  },
  {
    "text": "you know how is this going to be viewed in five years or ten years how are the things that I do in this feature are",
    "start": "211440",
    "end": "217110"
  },
  {
    "text": "going to enable us to do new things going forward or prevent us from doing",
    "start": "217110",
    "end": "222930"
  },
  {
    "text": "some of the things we want to do you know those are the sort of deep things that we think about I will say that you",
    "start": "222930",
    "end": "231270"
  },
  {
    "text": "know when I mentioned the mailing lists we also are trying to do these projects with early access binaries so Michael",
    "start": "231270",
    "end": "238170"
  },
  {
    "text": "will give some links later where you can actually go and download binaries that have you know early access versions of",
    "start": "238170",
    "end": "244680"
  },
  {
    "text": "some of the features we're working on now and try them out and until tell us what you think because ultimately you",
    "start": "244680",
    "end": "250980"
  },
  {
    "text": "know the things that we do we don't do just because they're interesting academic exercises right you know Java",
    "start": "250980",
    "end": "256859"
  },
  {
    "text": "is a technology that is very much there to be used and want people to use it and we can only make it good if you if you",
    "start": "256859",
    "end": "263250"
  },
  {
    "text": "tell us how it works for you in real life okay so let's see I think you know",
    "start": "263250",
    "end": "270330"
  },
  {
    "text": "here too very close two and a half decades on you know we view Java as a technology that",
    "start": "270330",
    "end": "277289"
  },
  {
    "text": "is very relevant and very vibrant you know it tends to be hard in our industry for technologies to persist and remain",
    "start": "277289",
    "end": "284489"
  },
  {
    "text": "popular but you know we see Java as a technology that is as relevant today as",
    "start": "284489",
    "end": "290969"
  },
  {
    "text": "it was 10 years ago as it was 20 years ago and part of the reason is that we're constantly investing in continuing to",
    "start": "290969",
    "end": "298019"
  },
  {
    "text": "solve problems to make your lives easier you can see just you know a little bit",
    "start": "298019",
    "end": "303419"
  },
  {
    "text": "of a roadmap there and a nice little little graph from you know one place",
    "start": "303419",
    "end": "308490"
  },
  {
    "text": "that measures these kinds of things on you know the popularity of Java so one",
    "start": "308490",
    "end": "315509"
  },
  {
    "text": "of the areas that we think about a lot now and I'm sure you do too is javo'''s readiness for the cloud and",
    "start": "315509",
    "end": "321869"
  },
  {
    "text": "how suitable it is as a technology there this is something that you know we're we're very passionate about and have",
    "start": "321869",
    "end": "328800"
  },
  {
    "text": "been actively putting in features thinking about how could we make the experience of using Java in the cloud",
    "start": "328800",
    "end": "334409"
  },
  {
    "text": "work really really well and there's some interesting aspects of that right I think you know one of the things that we",
    "start": "334409",
    "end": "340829"
  },
  {
    "text": "tend to see I you know go and ask people you know well is this important or is this important as an example how many",
    "start": "340829",
    "end": "348029"
  },
  {
    "text": "think that small footprint and fast startup time is important I certainly do",
    "start": "348029",
    "end": "354240"
  },
  {
    "text": "yeah just about everyone how many people think that massive heaps and low latency",
    "start": "354240",
    "end": "359490"
  },
  {
    "text": "are important yeah so if you're doing",
    "start": "359490",
    "end": "364559"
  },
  {
    "text": "something like ml or you know AI you know you want to be able to handle that",
    "start": "364559",
    "end": "370319"
  },
  {
    "text": "as well and so you know it's kind of interesting right that we have these you know two sorts of problems that in many",
    "start": "370319",
    "end": "375899"
  },
  {
    "text": "ways are kind of headed in different directions and if you ask people which one are important they go yeah both of",
    "start": "375899",
    "end": "381029"
  },
  {
    "text": "those so okay great we'll try to do everything you know we we want to do all",
    "start": "381029",
    "end": "386039"
  },
  {
    "text": "of those things well and I hope that some of the projects we're going to talk about today will give you some insight into some of the things that we're doing",
    "start": "386039",
    "end": "392490"
  },
  {
    "text": "there okay so Java as a technology is",
    "start": "392490",
    "end": "398849"
  },
  {
    "text": "something that is as popular as it is today because many vendors take part",
    "start": "398849",
    "end": "404340"
  },
  {
    "text": "in its development this has been true pretty much since the beginning since we",
    "start": "404340",
    "end": "409980"
  },
  {
    "text": "started on Java at Sun and it is true today we do our development in open JDK",
    "start": "409980",
    "end": "416270"
  },
  {
    "text": "and a nice thing about that is you can actually see check-ins happening you can",
    "start": "416270",
    "end": "422310"
  },
  {
    "text": "see reviews happening you can basically go and see who's doing what and I think",
    "start": "422310",
    "end": "429090"
  },
  {
    "text": "you know that's kind of a nice way to get some insight into where the investment is coming in towards job as",
    "start": "429090",
    "end": "435720"
  },
  {
    "text": "it is today and and towards the future of Java and so as you can see there there quite a few folks that take part",
    "start": "435720",
    "end": "442700"
  },
  {
    "text": "the reality is most of the investment that is happening today is coming from",
    "start": "442700",
    "end": "447930"
  },
  {
    "text": "Oracle so that's that's good to know these are the projects that we're going",
    "start": "447930",
    "end": "453480"
  },
  {
    "text": "to go through in a little bit here I wanted to first mention I know one of my",
    "start": "453480",
    "end": "458880"
  },
  {
    "text": "colleagues down in the in the show floor said that he was getting a lot of questions from folks about the release",
    "start": "458880",
    "end": "465720"
  },
  {
    "text": "cadence and the support model so I'm happy to answer questions about this you might have later either at the end of",
    "start": "465720",
    "end": "472440"
  },
  {
    "text": "the session or tomorrow I think the important thing to understand is that in",
    "start": "472440",
    "end": "478380"
  },
  {
    "text": "the past we had a model with a very very long time between releases and so",
    "start": "478380",
    "end": "486060"
  },
  {
    "text": "basically what would happen is we would go and kind of you know sit under iraq and work on stuff for a long time and",
    "start": "486060",
    "end": "491520"
  },
  {
    "text": "then we would sort of come out with something that was you know pretty big often you know had very major changes",
    "start": "491520",
    "end": "497580"
  },
  {
    "text": "and was often quite disruptive and a result of that was that it often took a",
    "start": "497580",
    "end": "503460"
  },
  {
    "text": "long time for people to adjust to that disruption and to you know take their",
    "start": "503460",
    "end": "508830"
  },
  {
    "text": "applications and move them up to the next version or start to write new things that were taking advantage of of things in those new versions what we",
    "start": "508830",
    "end": "516419"
  },
  {
    "text": "have done and in fact we did as of two years ago is we have moved to a model",
    "start": "516420",
    "end": "522419"
  },
  {
    "text": "where we release very frequently so we have new versions that come out every six months and of course we're not",
    "start": "522420",
    "end": "529020"
  },
  {
    "text": "we haven't sort of waved a magic wand and all of a sudden we can do you know two or three years of work in six months",
    "start": "529020",
    "end": "535650"
  },
  {
    "text": "instead what we're doing is having incremental releases that have a lot less in them and we still have the same",
    "start": "535650",
    "end": "544320"
  },
  {
    "text": "dedication that we've always had to compatibility and to being able to go up",
    "start": "544320",
    "end": "549839"
  },
  {
    "text": "to new versions but by having these smaller increments it becomes easier for",
    "start": "549839",
    "end": "554970"
  },
  {
    "text": "you with your application to move forward right so our goal here has really never have big disruptive",
    "start": "554970",
    "end": "561839"
  },
  {
    "text": "releases that take multiple years instead take the innovation that we're doing and get it in your hands much more",
    "start": "561839",
    "end": "568350"
  },
  {
    "text": "quickly and so basically the way that this this model works is that the latest",
    "start": "568350",
    "end": "574860"
  },
  {
    "text": "release is always free so our binaries that we produce directly",
    "start": "574860",
    "end": "580320"
  },
  {
    "text": "from open JDK are available under an open-source license under GPL v2 with",
    "start": "580320",
    "end": "587370"
  },
  {
    "text": "class path and then basically you can always just upgrade okay for people who",
    "start": "587370",
    "end": "593279"
  },
  {
    "text": "would like the luxury of staying on an old version for you know years and years and years as you know many many",
    "start": "593279",
    "end": "600630"
  },
  {
    "text": "corporations do you know we offer LTS release or long-term support release",
    "start": "600630",
    "end": "606209"
  },
  {
    "text": "it's very similar to you know what you see in in the Linux community where",
    "start": "606209",
    "end": "611580"
  },
  {
    "text": "basically you will get updates that don't have new features that don't have",
    "start": "611580",
    "end": "617670"
  },
  {
    "text": "changes to the language or api's that just have essentially stability",
    "start": "617670",
    "end": "623220"
  },
  {
    "text": "performance and security fixes and so the intent of that is that those are you",
    "start": "623220",
    "end": "628470"
  },
  {
    "text": "know quite easy for you to if you have something running you know a lot of people have an application they wrote",
    "start": "628470",
    "end": "633959"
  },
  {
    "text": "years ago they have it running production they just wanted to keep running right they're perhaps not doing",
    "start": "633959",
    "end": "639330"
  },
  {
    "text": "a bunch of active development on it that that's what this is very suitable for and in fact that's a model that has",
    "start": "639330",
    "end": "644900"
  },
  {
    "text": "existed for Java pretty much since the beginning right it was exactly the same",
    "start": "644900",
    "end": "650100"
  },
  {
    "text": "for Java 6 and Java 7 and now that is the case for Java 8 and 11 and going",
    "start": "650100",
    "end": "656160"
  },
  {
    "text": "forward with these six-month releases there will be one of those effectively every three years right so that gives",
    "start": "656160",
    "end": "662910"
  },
  {
    "text": "you a choice you can choose to take your application and move forward as new come out or you can choose to to do the",
    "start": "662910",
    "end": "671079"
  },
  {
    "text": "long term support with us or with another vendor there are plenty of people out there you know as I mentioned",
    "start": "671079",
    "end": "677050"
  },
  {
    "text": "earlier who are you know trying to do active support for Java one thing I'd",
    "start": "677050",
    "end": "682209"
  },
  {
    "text": "say to keep in mind if you're if you're considering where you want to get Java updates from is that chart I showed you",
    "start": "682209",
    "end": "689709"
  },
  {
    "text": "before of who's doing the work right and so the main thing there is you if you're",
    "start": "689709",
    "end": "695319"
  },
  {
    "text": "going to get updates from someone you want to know that they're the ones who know the technology really really well",
    "start": "695319",
    "end": "702420"
  },
  {
    "text": "this model has been received pretty well you can see quote here from from James",
    "start": "702420",
    "end": "708730"
  },
  {
    "text": "governor I think the there are a lot of people who sort of talk about this but",
    "start": "708730",
    "end": "713920"
  },
  {
    "text": "don't talk about the actual pricing so I think you know some people have come to",
    "start": "713920",
    "end": "718959"
  },
  {
    "text": "me and said well they have an impression that Oracle is very expensive we actually base the pricing on this to",
    "start": "718959",
    "end": "724750"
  },
  {
    "text": "try to make it simple and easy and inexpensive but kind of scale with your usage so so we looked at other kinds of",
    "start": "724750",
    "end": "732579"
  },
  {
    "text": "software that people use in a similar way to Java to sort of understand what a reasonable model would be you can see",
    "start": "732579",
    "end": "738490"
  },
  {
    "text": "the prices here $25 per month on the server and two dollars and 50 cents for",
    "start": "738490",
    "end": "744279"
  },
  {
    "text": "desktops and it's it scales down with volume right so if you have you know a thousand servers that's not the price",
    "start": "744279",
    "end": "750519"
  },
  {
    "text": "you're going to pay and in fact the the prices for that are on the website if you're if you're interested in what the",
    "start": "750519",
    "end": "756910"
  },
  {
    "text": "discounts okay and then with that of course you know you you get what all the",
    "start": "756910",
    "end": "763449"
  },
  {
    "text": "things you would expect you know years of support you've got the ability to you know call us and have somebody on my",
    "start": "763449",
    "end": "768639"
  },
  {
    "text": "team right so you get the person who wrote you know a particular language feature being able to be the one who's",
    "start": "768639",
    "end": "774790"
  },
  {
    "text": "who's doing a fixed for you okay so with",
    "start": "774790",
    "end": "779800"
  },
  {
    "text": "that I'm I want to hand off to Michael and he's going to talk about this project I mentioned earlier we're doing",
    "start": "779800",
    "end": "785920"
  },
  {
    "text": "ongoing development thank you George",
    "start": "785920",
    "end": "792269"
  },
  {
    "text": "oh and I should also say I'm Michael Vince that I are on the JBM team at Oracle I'm gonna talk a bit about the",
    "start": "792730",
    "end": "798819"
  },
  {
    "text": "products that we are working on I'm not gonna cover all of them we have I think it's like 40 different projects in open",
    "start": "798819",
    "end": "804160"
  },
  {
    "text": "JDK told not all of which are being actively developed but I'll touch on a few of the most important ones and it's basically the ones in the bubbles here",
    "start": "804160",
    "end": "811379"
  },
  {
    "text": "so the first thing I should say by the way is as George mentioned earlier our products are being developed in the open",
    "start": "811379",
    "end": "817749"
  },
  {
    "text": "if you're curious to see what's going on if you want to look at the code or play around with it you can get access to the",
    "start": "817749",
    "end": "823600"
  },
  {
    "text": "mailing list you can get the code we do publish early access binaries and I have a slide at the very end with some links",
    "start": "823600",
    "end": "829989"
  },
  {
    "text": "and we do really need your help testing things out and giving us feedback on the features that we know that what we're",
    "start": "829989",
    "end": "835899"
  },
  {
    "text": "doing is actually relevant to you the project's like in the past when we had these like releases every two two and a",
    "start": "835899",
    "end": "843220"
  },
  {
    "text": "half three years we very much had feature driven releases so we early",
    "start": "843220",
    "end": "848829"
  },
  {
    "text": "early on we picked which features should go into a certain release and then manager us managers we're running around",
    "start": "848829",
    "end": "855069"
  },
  {
    "text": "being proactive we expressed up about what was going to happen two and a half or three years from now right that can't work you know in a time bound",
    "start": "855069",
    "end": "862660"
  },
  {
    "text": "release model the one we have right now where we do release every six months and it's like on a specific day right so we",
    "start": "862660",
    "end": "868329"
  },
  {
    "text": "need to change our whole way of developing things so much more of the development now is going on inside",
    "start": "868329",
    "end": "873459"
  },
  {
    "text": "projects and those are the ones that I'll go through and what we try to do though is I identified subsets sort of",
    "start": "873459",
    "end": "879730"
  },
  {
    "text": "functionality that can stand on its own and deliver that incrementally and more quickly we're not going to implement the",
    "start": "879730",
    "end": "885040"
  },
  {
    "text": "whole project before we actually put it in mainline right so again a lot of these products are being developed on",
    "start": "885040",
    "end": "891610"
  },
  {
    "text": "the side but like parts of it we're trying to take in actually integrate in mainline even if the product then",
    "start": "891610",
    "end": "897220"
  },
  {
    "text": "continues to live on right so especially for the amber product I'll show a couple",
    "start": "897220",
    "end": "902259"
  },
  {
    "text": "of examples of that the by far biggest and most complicated product that we",
    "start": "902259",
    "end": "907869"
  },
  {
    "text": "have going on right now is Valhalla so this product is looking at adding what used to be known until last week maybe I",
    "start": "907869",
    "end": "915999"
  },
  {
    "text": "shouldn't say what it would use used to be called I'll bring the new term now it's in line types or in line classes as",
    "start": "915999",
    "end": "923829"
  },
  {
    "text": "what that first quiz here so is this type",
    "start": "923829",
    "end": "929549"
  },
  {
    "text": "stateless as in when I've created it can I actually go in and change it in some way is there is there anything in there",
    "start": "929549",
    "end": "936149"
  },
  {
    "text": "I can do somebody would mention reflection in ignore reflection okay so the answer is that really it should",
    "start": "936149",
    "end": "942480"
  },
  {
    "text": "write everything is final it should be read only there's no way you can affect this once it's created that's only",
    "start": "942480",
    "end": "947970"
  },
  {
    "text": "almost correct problem is that every instance in Java can be synchronized and",
    "start": "947970",
    "end": "953429"
  },
  {
    "text": "you may not think of that as state that lives in the instance but it is there any in any object you have you can you",
    "start": "953429",
    "end": "959790"
  },
  {
    "text": "can synchronize on and that's like the hidden state the state that the JVM needs to keep in mind and that makes",
    "start": "959790",
    "end": "965730"
  },
  {
    "text": "this object in some way carry state despite the fact that on the Java level it sort of doesn't right yeah there are",
    "start": "965730",
    "end": "971699"
  },
  {
    "text": "also other subtle things about state or identity in this case where a single",
    "start": "971699",
    "end": "977040"
  },
  {
    "text": "instance we actually promise this is like the in the spec it says if you have an instance you can compare it to",
    "start": "977040",
    "end": "982889"
  },
  {
    "text": "another instant the same instance you can get this instance in two different ways we're gonna promise you that if you do double equals on it you get true and",
    "start": "982889",
    "end": "991139"
  },
  {
    "text": "what that means concretely is that the JVM does need to keep a lot of information about this instance in a",
    "start": "991139",
    "end": "997589"
  },
  {
    "text": "single unique place if I put it that way in that place is normally on the Java heap I also have the identity hash code",
    "start": "997589",
    "end": "1005480"
  },
  {
    "text": "they're not to be confused with object hash code but same concept same identity piece so what the JVM typically does and",
    "start": "1005480",
    "end": "1013279"
  },
  {
    "text": "obviously this can depend on your JVM implementation but what the JVM typically does is that at the top of",
    "start": "1013279",
    "end": "1019039"
  },
  {
    "text": "like the very start of every instance on the Java heap there's a header and we store all kinds of information in there",
    "start": "1019039",
    "end": "1025909"
  },
  {
    "text": "obviously the type of the instance but also things like is this object locked and in that case which thread actually",
    "start": "1025909",
    "end": "1031760"
  },
  {
    "text": "locked it and things like that now the problem that this has is that we do as I mentioned need to keep that single",
    "start": "1031760",
    "end": "1038058"
  },
  {
    "text": "unique instance we need to know exactly which one it is where it is and what state it has and that reduces the amount",
    "start": "1038059",
    "end": "1045769"
  },
  {
    "text": "of optimizations we can do inside of the JVM so for example right now if you have",
    "start": "1045769",
    "end": "1052100"
  },
  {
    "text": "a JDK and you download it and you create this user-defined point type",
    "start": "1052100",
    "end": "1058790"
  },
  {
    "text": "and you create an array of that that point so we now have a bunch of",
    "start": "1058790",
    "end": "1063860"
  },
  {
    "text": "different points on the Java heap it will look like this so you'll have a number of small instances all the",
    "start": "1063860",
    "end": "1069500"
  },
  {
    "text": "different points they're spread out across the heap and then you have an array which stores pointers to those",
    "start": "1069500",
    "end": "1075380"
  },
  {
    "text": "individual instances so there are many problems with this the first one being if you actually let's say want to",
    "start": "1075380",
    "end": "1081770"
  },
  {
    "text": "iterate over all the points you are now pointer chasing all over the youb so you don't get the cache locality of this second thing is that you have all the",
    "start": "1081770",
    "end": "1088610"
  },
  {
    "text": "headers so now you're you're using a lot more memory to store effectively the information that is only in the end the",
    "start": "1088610",
    "end": "1094520"
  },
  {
    "text": "x and y-coordinates so what about Halla the product is trying to achieve among",
    "start": "1094520",
    "end": "1100190"
  },
  {
    "text": "other things is this I think most of you probably you know this is so obvious",
    "start": "1100190",
    "end": "1105230"
  },
  {
    "text": "right that why aren't we already doing this here you have a compact representation there's no overhead with",
    "start": "1105230",
    "end": "1111290"
  },
  {
    "text": "individual headers if you iterate over that array you have everything cache locally and the CPU will prefetch for",
    "start": "1111290",
    "end": "1116480"
  },
  {
    "text": "you all those nice things so why is this complex well it turns out that this this",
    "start": "1116480",
    "end": "1122030"
  },
  {
    "text": "concept has it requires changes on everything from the java language level all the way down to and into the most",
    "start": "1122030",
    "end": "1129860"
  },
  {
    "text": "complicated and let's say complex parts of the vm so it's a very very big",
    "start": "1129860",
    "end": "1137000"
  },
  {
    "text": "project because it spans all those levels and back to what your shells we take compatibility really really",
    "start": "1137000",
    "end": "1143000"
  },
  {
    "text": "seriously so if we could go in and change this like put it in the first version of the java spec or like",
    "start": "1143000",
    "end": "1148430"
  },
  {
    "text": "overnight we just put this there and everything like we remove everything else that was already there right things",
    "start": "1148430",
    "end": "1154010"
  },
  {
    "text": "would be easy but the problem becomes what happens if you have old code already compiled library code let's say",
    "start": "1154010",
    "end": "1161030"
  },
  {
    "text": "that it's a perfectly you know an optimal hash map that somebody's done for you and you pass in one of these new",
    "start": "1161030",
    "end": "1167870"
  },
  {
    "text": "objects right or the other way around so we need to think very carefully about",
    "start": "1167870",
    "end": "1173060"
  },
  {
    "text": "that and have a story for what happens in all those cases because the last thing we want is for Java to evolve into",
    "start": "1173060",
    "end": "1179150"
  },
  {
    "text": "something that doesn't look and feel like Java anymore and that doesn't work with the syntax may look like this this",
    "start": "1179150",
    "end": "1185840"
  },
  {
    "text": "is subject to change as the like the underscore should make it obvious but it could be",
    "start": "1185840",
    "end": "1190850"
  },
  {
    "text": "ECS basically saying in line class and you get this and again like the vm and",
    "start": "1190850",
    "end": "1196550"
  },
  {
    "text": "the the libraries figure out what to do for you our tagline for this project is codes like a class works like it long",
    "start": "1196550",
    "end": "1203270"
  },
  {
    "text": "works like an int meaning you get all the flexibility and the power of java classes you can add methods you can do",
    "start": "1203270",
    "end": "1210410"
  },
  {
    "text": "computations you can pass them around but you get the performance profile of a simple primitive because we all know",
    "start": "1210410",
    "end": "1216770"
  },
  {
    "text": "that passing it into round that's very very efficient right and fast from a",
    "start": "1216770",
    "end": "1222590"
  },
  {
    "text": "like user perspective in most ways the only visible change here is it gets a lot faster so how can we motivate that",
    "start": "1222590",
    "end": "1231230"
  },
  {
    "text": "right is how much faster is this like we've spent I think it's more than five years now easily many man decades on",
    "start": "1231230",
    "end": "1237440"
  },
  {
    "text": "this project already and we still haven't delivered anything so how can we motivate this project let's look at an",
    "start": "1237440",
    "end": "1243800"
  },
  {
    "text": "example so we have here matrix multiplications so it's a simple complex",
    "start": "1243800",
    "end": "1250280"
  },
  {
    "text": "class so it's a complex number stored in the matrix and there are a couple of operations add and multiply in this case",
    "start": "1250280",
    "end": "1257240"
  },
  {
    "text": "they sort of do what you'd expect them to do right so they create a new instance take the value multiplay it",
    "start": "1257240",
    "end": "1263660"
  },
  {
    "text": "what the other thing and return a new instance so basically if we want to do a",
    "start": "1263660",
    "end": "1270350"
  },
  {
    "text": "multiply again this I copied it from somewhere so I'm sure that somebody has",
    "start": "1270350",
    "end": "1275810"
  },
  {
    "text": "verified that the code actually does the right thing the point is that in order to do this you are creating a new",
    "start": "1275810",
    "end": "1282830"
  },
  {
    "text": "complex a new matrix basically it's you're taking your existing matrixes and",
    "start": "1282830",
    "end": "1287870"
  },
  {
    "text": "you're creating a new one right and there's a lot of pointer chasing in this a lot of allocation going on inside of",
    "start": "1287870",
    "end": "1294530"
  },
  {
    "text": "this code so running this on a JDK today versus running it with the new value",
    "start": "1294530",
    "end": "1301490"
  },
  {
    "text": "types functionality would look something like this and as it says there write your mileage may vary and all of that",
    "start": "1301490",
    "end": "1307310"
  },
  {
    "text": "but the point is the boxed version here is the existing let's say normal",
    "start": "1307310",
    "end": "1313430"
  },
  {
    "text": "instances and the value version of it is when you when the VM is free to not necessarily put it on the heap but put",
    "start": "1313430",
    "end": "1319640"
  },
  {
    "text": "it in registers locally on the stack and do all the optimizations without having to care but that identity and all that stuff",
    "start": "1319640",
    "end": "1325370"
  },
  {
    "text": "right so as you can see the factor here it's like twelve times less time it's",
    "start": "1325370",
    "end": "1331460"
  },
  {
    "text": "it's a thousand times less memory allocated it is three well and then it",
    "start": "1331460",
    "end": "1337430"
  },
  {
    "text": "gets more CPU specific but like fewer instructions are being executed and every instruction actually is faster",
    "start": "1337430",
    "end": "1343460"
  },
  {
    "text": "because there's a lot less waiting for memory and things like that so pick your favorite metric but this is pretty",
    "start": "1343460",
    "end": "1349220"
  },
  {
    "text": "significant right if you can speed up Java somewhere between two point six and a thousand times we're doing pretty well",
    "start": "1349220",
    "end": "1355760"
  },
  {
    "text": "right so that's why we think this project is still worth investing in and",
    "start": "1355760",
    "end": "1361900"
  },
  {
    "text": "that's a lots of cool stuff happening here we have come to the point in this project now that where we are actually",
    "start": "1361900",
    "end": "1368930"
  },
  {
    "text": "not just looking at the existing like the next milestone or deliverable but also looking beyond that how can we make",
    "start": "1368930",
    "end": "1375560"
  },
  {
    "text": "sure that whatever we end up with at least has some kind of high likelihood of being future safe in case we want to",
    "start": "1375560",
    "end": "1381590"
  },
  {
    "text": "build other things on top of it so for example it gets even more interesting when you add generics to this whole",
    "start": "1381590",
    "end": "1388070"
  },
  {
    "text": "stories what happens if you want to have a generic over a a primitive let's stay like an int cool project keep your eyes",
    "start": "1388070",
    "end": "1396410"
  },
  {
    "text": "on it the second product I'm gonna say something about this amber amber is",
    "start": "1396410",
    "end": "1402410"
  },
  {
    "text": "effectively a product that is come made up of small language improvements so the",
    "start": "1402410",
    "end": "1409040"
  },
  {
    "text": "tagline for this is right-sizing language ceremony right sizing here does",
    "start": "1409040",
    "end": "1414470"
  },
  {
    "text": "not mean stripping Java down the syntax down to the point where it's you know cryptic we still want it to be readable",
    "start": "1414470",
    "end": "1421370"
  },
  {
    "text": "you read code a lot more than you write it right but it is trying to identify",
    "start": "1421370",
    "end": "1426890"
  },
  {
    "text": "the common patterns and make it easier to implement code and easier to get to read the code in the end as well so I go",
    "start": "1426890",
    "end": "1433010"
  },
  {
    "text": "through a few of these sub features let's say on this project the first one being a local variable type inference so",
    "start": "1433010",
    "end": "1440630"
  },
  {
    "text": "first a poll how many people here are using Java 8 Java 9 10 11 12",
    "start": "1440630",
    "end": "1453460"
  },
  {
    "text": "13 okay so how many people have played around with 10 or later okay a few how",
    "start": "1454170",
    "end": "1462250"
  },
  {
    "text": "many people have tried var specifically or the local variable type inference okay couple of you so the this is one of",
    "start": "1462250",
    "end": "1470800"
  },
  {
    "text": "those like small things that a lot about languages already have if you have code that looks something like this so you",
    "start": "1470800",
    "end": "1477100"
  },
  {
    "text": "know normal open some input scream and get a stream reader and the buffer reader and all that you you probably",
    "start": "1477100",
    "end": "1482830"
  },
  {
    "text": "recognize this pattern this is pretty much all over the place in Java what you can see here is obviously that there's a",
    "start": "1482830",
    "end": "1489130"
  },
  {
    "text": "lot of sort of duplication we're saying the same type is being repeated on both sides and that's sort of you know",
    "start": "1489130",
    "end": "1494980"
  },
  {
    "text": "redundant you could argue so what we did was to implement a feature called local",
    "start": "1494980",
    "end": "1501220"
  },
  {
    "text": "variable type inference which allows you to instead of saying the type on the left hand side you can just say more now",
    "start": "1501220",
    "end": "1508660"
  },
  {
    "text": "this is not making the Java dynamically typed the only thing this does is to",
    "start": "1508660",
    "end": "1514540"
  },
  {
    "text": "have Java C e or whatever compiled you're using to figure out the type on",
    "start": "1514540",
    "end": "1519790"
  },
  {
    "text": "its owns like we could deduce like we know that it says inputstreamreader here so why do we have to say it again and",
    "start": "1519790",
    "end": "1525370"
  },
  {
    "text": "the same thing is true for the java c compiler it can just look at the the right hand side and you know identify",
    "start": "1525370",
    "end": "1531070"
  },
  {
    "text": "that it's an input stream reader so I'll sort of put it there you can't later assign another type to reader here well",
    "start": "1531070",
    "end": "1539230"
  },
  {
    "text": "unless obviously it's like a subtype of inputstreamreader you can't like suddenly have it store an",
    "start": "1539230",
    "end": "1544240"
  },
  {
    "text": "integer so in this in the background here this bar actually does sort of expand to this right you can it's not",
    "start": "1544240",
    "end": "1551440"
  },
  {
    "text": "it's still statically typed so this is sort of a toy example if you get more",
    "start": "1551440",
    "end": "1557260"
  },
  {
    "text": "interesting if we look at something more complex so this you don't absolutely need to understand what this code does",
    "start": "1557260",
    "end": "1562360"
  },
  {
    "text": "but point at least in in here is that this line here especially this line here",
    "start": "1562360",
    "end": "1569170"
  },
  {
    "text": "I'm going to say is so long that I couldn't even fit it on a single line and you sort of need it there for you",
    "start": "1569170",
    "end": "1574870"
  },
  {
    "text": "know serving the type information and you know getting the type safety but",
    "start": "1574870",
    "end": "1579910"
  },
  {
    "text": "again it's it's one of those like you'd rather probably not write that if you can avoid it it doesn't actually give",
    "start": "1579910",
    "end": "1585190"
  },
  {
    "text": "much more information so why not have the Java C compiler again or somebody else figure that out for you right so",
    "start": "1585190",
    "end": "1591790"
  },
  {
    "text": "same thing goes here the after version using the local variable type inference functionality is hopefully much more",
    "start": "1591790",
    "end": "1598360"
  },
  {
    "text": "readable at least I think so and again I you you haven't lost like you haven't",
    "start": "1598360",
    "end": "1604150"
  },
  {
    "text": "lost the type safety and hopefully again this it makes more sense you don't have to figure out exactly the you know how",
    "start": "1604150",
    "end": "1609550"
  },
  {
    "text": "to spell that long type name there so that's one feature from amber another",
    "start": "1609550",
    "end": "1616330"
  },
  {
    "text": "one that is in currently in preview mode so this is something that we've introduced recently as well we have",
    "start": "1616330",
    "end": "1621760"
  },
  {
    "text": "preview functionality or preview features they're not enabled by default they're not yet in the Java spec but",
    "start": "1621760",
    "end": "1628480"
  },
  {
    "text": "they we have taken them to the point where we are we want to move forward",
    "start": "1628480",
    "end": "1633610"
  },
  {
    "text": "with them but before we lock them down and actually put them in the spec we want some feedback so in order to use",
    "start": "1633610",
    "end": "1641020"
  },
  {
    "text": "these we've introduced a couple of options that you you sort of need to opt in you can't accidentally use this",
    "start": "1641020",
    "end": "1647050"
  },
  {
    "text": "functionality so you need to say enable preview and specify a release as well",
    "start": "1647050",
    "end": "1652240"
  },
  {
    "text": "just to make it very clear that you are now using something that is a preview",
    "start": "1652240",
    "end": "1657730"
  },
  {
    "text": "and also at runtime you need to say yes enabled via the preview features this",
    "start": "1657730",
    "end": "1662860"
  },
  {
    "text": "feature is called switch expressions it is in preview in 12 and we're hoping to put it in 13 a save as a supported",
    "start": "1662860",
    "end": "1671200"
  },
  {
    "text": "feature that said we only know what actually is in 13 when 13 ships that",
    "start": "1671200",
    "end": "1677500"
  },
  {
    "text": "that's new state of the world right now we're not promising anything until GA then you know but we're hoping to make",
    "start": "1677500",
    "end": "1684730"
  },
  {
    "text": "it into 13 so I'm gonna show you an example here where we have there's Anna",
    "start": "1684730",
    "end": "1690670"
  },
  {
    "text": "Newman with days and they're well there's some place you I hope you will know it's Rio spelled various ways this",
    "start": "1690670",
    "end": "1698170"
  },
  {
    "text": "is a sort of toy example here's a method that calculates the number of characters",
    "start": "1698170",
    "end": "1703360"
  },
  {
    "text": "in the name of the of the day so if you doing that using a switch statement so",
    "start": "1703360",
    "end": "1710860"
  },
  {
    "text": "it's it's doing sort of the obvious thing if the day is Monday Friday or Sunday they all have six letters so",
    "start": "1710860",
    "end": "1716260"
  },
  {
    "text": "that's awesome let's put that in a variable and same for the other weekdays throw an exception if we find an unexpected day",
    "start": "1716260",
    "end": "1722740"
  },
  {
    "text": "and then finally return the local variable okay so there are a couple of problems with this first it's a bit on",
    "start": "1722740",
    "end": "1729400"
  },
  {
    "text": "the long side you could argue but also how do you know like the pattern here is",
    "start": "1729400",
    "end": "1734920"
  },
  {
    "text": "obviously that you are for every case you want to set a local variable define a local variable and surely there must",
    "start": "1734920",
    "end": "1741970"
  },
  {
    "text": "be a better way of doing this because now there's a risk that in one of these cases you actually forget to set it or",
    "start": "1741970",
    "end": "1747100"
  },
  {
    "text": "you know you forget to break or whatever it is so what switch expressions do for you is",
    "start": "1747100",
    "end": "1752650"
  },
  {
    "text": "to allow you to treat switch switch statements as if they actually return",
    "start": "1752650",
    "end": "1757720"
  },
  {
    "text": "the value as well so in this case it's more compact there's a new syntax being",
    "start": "1757720",
    "end": "1763360"
  },
  {
    "text": "discussed still I should say where you can say for like these three cases here there's an arrow syntax and it returns",
    "start": "1763360",
    "end": "1770890"
  },
  {
    "text": "six and very specifically what happens then is that the switch as I mentioned actually we turn the value so look here",
    "start": "1770890",
    "end": "1778090"
  },
  {
    "text": "on the on the left hand side and today you can't assign the sort of return value from the switch right it's a",
    "start": "1778090",
    "end": "1783880"
  },
  {
    "text": "statement it doesn't return the value but in the new world you can actually do that so it does return the value that's",
    "start": "1783880",
    "end": "1791710"
  },
  {
    "text": "preview in 12 as I mentioned and then for completeness I'll mention a couple more which are more for future so",
    "start": "1791710",
    "end": "1798130"
  },
  {
    "text": "there's something called pattern matching this is an example of that to get also the vision here is that we can",
    "start": "1798130",
    "end": "1803140"
  },
  {
    "text": "do the same thing in switch switches going forward as well how many of you have done this you're",
    "start": "1803140",
    "end": "1809200"
  },
  {
    "text": "checking some instance you got and you're checking in against the type and the very next thing you need to do is to",
    "start": "1809200",
    "end": "1814210"
  },
  {
    "text": "cast it right super annoying just repeating the obvious thing right so basically what the first thing you can",
    "start": "1814210",
    "end": "1820450"
  },
  {
    "text": "do obviously is just not repeat the type twice using the local variable type inference but the next thing here on the",
    "start": "1820450",
    "end": "1825760"
  },
  {
    "text": "pattern matching side is something along these lines so you have your instance and instead of doing that like instance",
    "start": "1825760",
    "end": "1832240"
  },
  {
    "text": "all plus a cast you just do sort of the compiler does that trick for you so you get the variable defined and you can use",
    "start": "1832240",
    "end": "1839260"
  },
  {
    "text": "it in your if statement that's for future not well we're looking at it but",
    "start": "1839260",
    "end": "1846970"
  },
  {
    "text": "definitely not going to make thirteen I'm going to say the final thing I'll mention is records",
    "start": "1846970",
    "end": "1852500"
  },
  {
    "text": "so another common example I'm gonna say so the simple sort of object data",
    "start": "1852500",
    "end": "1857660"
  },
  {
    "text": "carrier you have a couple of fields and in order to make this complete you need to have the constructor to gathers the",
    "start": "1857660",
    "end": "1864260"
  },
  {
    "text": "hash code equals compare if you want to store in a in a collection of some kind and obviously this is all just total",
    "start": "1864260",
    "end": "1870010"
  },
  {
    "text": "manual work to add that an error prone and all of that right so what we're looking at here is providing something",
    "start": "1870010",
    "end": "1876650"
  },
  {
    "text": "that again spelling it may not be spelled record in the end but something that looks like this and if you if you",
    "start": "1876650",
    "end": "1883010"
  },
  {
    "text": "want the defaults then it doesn't take more than this but if you do want to",
    "start": "1883010",
    "end": "1888020"
  },
  {
    "text": "override things if for example your equals has some kind of magic property then there you can add that yes what's",
    "start": "1888020",
    "end": "1895370"
  },
  {
    "text": "that in line your record so I think the answer is just yes but it hasn't been",
    "start": "1895370",
    "end": "1904370"
  },
  {
    "text": "designed yet so so that's amber oh and I",
    "start": "1904370",
    "end": "1909650"
  },
  {
    "text": "should also mention by the way that the the JEP thing here is short for JDK",
    "start": "1909650",
    "end": "1914900"
  },
  {
    "text": "enhancement proposal and it's our way of documenting feature features on a high",
    "start": "1914900",
    "end": "1920900"
  },
  {
    "text": "level I'm gonna say provide some alternatives and you know details but just a document you can go in and look",
    "start": "1920900",
    "end": "1927740"
  },
  {
    "text": "at these they're all on the open JDK site as well Loum is a product we're",
    "start": "1927740",
    "end": "1937640"
  },
  {
    "text": "looking where we're looking at improving on or simplifying concurrency so today",
    "start": "1937640",
    "end": "1944600"
  },
  {
    "text": "basically I'm somewhat simplified you have two different ways of handling concurrency the first one is using",
    "start": "1944600",
    "end": "1950180"
  },
  {
    "text": "synchronous code so you have a thread it takes a request it does its thing it may",
    "start": "1950180",
    "end": "1957260"
  },
  {
    "text": "call out to a database or do whatever if it gets blocked it's still waiting there patiently for the database to return the",
    "start": "1957260",
    "end": "1963800"
  },
  {
    "text": "result and then at some point it returns the result of the transaction as a whole super simple it's actually sort of",
    "start": "1963800",
    "end": "1970970"
  },
  {
    "text": "scalable right where we worked a lot in Java to make sure that even that simple",
    "start": "1970970",
    "end": "1976100"
  },
  {
    "text": "use case is working really well but there are challenges with it so if you",
    "start": "1976100",
    "end": "1981590"
  },
  {
    "text": "want to scale up to the extreme and those threads even though they're relative lightweight they do tend to add up right",
    "start": "1981590",
    "end": "1988430"
  },
  {
    "text": "so if you have a thousand requests going on at the same time a thousand threads and that's if nothing else going to take",
    "start": "1988430",
    "end": "1994340"
  },
  {
    "text": "a lot of memory from the thread stack itself the alternative that you can use",
    "start": "1994340",
    "end": "1999560"
  },
  {
    "text": "is a synchronous i/o and a synchronous construct so in the JDK for example we",
    "start": "1999560",
    "end": "2004570"
  },
  {
    "text": "offer separate methods that do implement a synchronous versions of i/o and",
    "start": "2004570",
    "end": "2010900"
  },
  {
    "text": "they're there they're extremely scalable but they are sort of complex to use so",
    "start": "2010900",
    "end": "2016300"
  },
  {
    "text": "you need to to get it right let's say you now have a thread that is like multiplexing over different connections",
    "start": "2016300",
    "end": "2022030"
  },
  {
    "text": "or whatever it is right and it's also so hard to debug in profile this in the end so what we're trying to do with Loom",
    "start": "2022030",
    "end": "2028870"
  },
  {
    "text": "here is to make this the asynchronous case work for you as a developer as if",
    "start": "2028870",
    "end": "2035080"
  },
  {
    "text": "it was a synchronous if you if it was synchronous code from the start basically the the tag line is on",
    "start": "2035080",
    "end": "2041800"
  },
  {
    "text": "somewhere between making blocks blocking calls virtually free or for that sake if",
    "start": "2041800",
    "end": "2047770"
  },
  {
    "text": "codes like sync but works like a sink right in in performance core concurrency",
    "start": "2047770",
    "end": "2052990"
  },
  {
    "text": "made simple so the way we're implementing this looking at implementing it is by providing something we call fibers you can think",
    "start": "2052990",
    "end": "2060790"
  },
  {
    "text": "of them as extremely lightweight threads you are like you create millions of",
    "start": "2060790",
    "end": "2066100"
  },
  {
    "text": "these in the same JVM or even billions of them they're they're very very very lightweight and the other component here",
    "start": "2066100",
    "end": "2074200"
  },
  {
    "text": "is it's as delimited continuations here mouthful but think of like execution you",
    "start": "2074200",
    "end": "2081610"
  },
  {
    "text": "call a method let's say you have a small method and it's in stuck in a while loop it's doing something it's computing",
    "start": "2081610",
    "end": "2086679"
  },
  {
    "text": "something what we do with the continuations here is that we allow that",
    "start": "2086680",
    "end": "2091810"
  },
  {
    "text": "method to yield so in the middle of its execution somewhere we can freeze for",
    "start": "2091810",
    "end": "2097120"
  },
  {
    "text": "that oh sorry freeze that and store it off somewhere on the side so like where where it's running on a thread but we",
    "start": "2097120",
    "end": "2103060"
  },
  {
    "text": "can freeze that execution copy only those frames that matter to decide and then have that thread continue executing",
    "start": "2103060",
    "end": "2108550"
  },
  {
    "text": "something else and what that means for you is that you can implement these methods as if they're blocking right but",
    "start": "2108550",
    "end": "2115930"
  },
  {
    "text": "instead of blocking they actually yield in the background and we again we take that small the small amount of state that is",
    "start": "2115930",
    "end": "2121510"
  },
  {
    "text": "running on this big dinosaur thread and we copy that off and let the thread do something else so we open up for",
    "start": "2121510",
    "end": "2126940"
  },
  {
    "text": "basically coding as if everything is synchronous now the other nice part about this is that instead of having to",
    "start": "2126940",
    "end": "2132700"
  },
  {
    "text": "supply two different versions so again I said on the jdk side we have synchronous i/o and we also have a synchronous i/o",
    "start": "2132700",
    "end": "2139150"
  },
  {
    "text": "so we need to deliver both of those and if you are implementing a library framework chances are that you will in",
    "start": "2139150",
    "end": "2145300"
  },
  {
    "text": "turn have to provide both the synchronous version of your calls and the synchronous version and that",
    "start": "2145300",
    "end": "2150580"
  },
  {
    "text": "obviously is a hassle right so what this allows you to do is basically just improvise one version which looks like",
    "start": "2150580",
    "end": "2156010"
  },
  {
    "text": "it's synchronous and in the background the JVM and the rest of the runtime takes care of it for you there is a",
    "start": "2156010",
    "end": "2161980"
  },
  {
    "text": "prototype of this do play around with it we are investigating alternative ways of",
    "start": "2161980",
    "end": "2167410"
  },
  {
    "text": "implementing this functionality as well so that's sort of what the status of that product is right now Panama is a",
    "start": "2167410",
    "end": "2174790"
  },
  {
    "text": "product where we're looking into sort of things that aren't native to Java so",
    "start": "2174790",
    "end": "2180160"
  },
  {
    "text": "Panama is a pond on either like connecting the oceans one ocean being Java and the other one being C C++",
    "start": "2180160",
    "end": "2185710"
  },
  {
    "text": "native or the the continents I guess inside here is that there are a bunch of",
    "start": "2185710",
    "end": "2192220"
  },
  {
    "text": "libraries that are not implemented in Java or that for some reason where we want to reach out and actually access",
    "start": "2192220",
    "end": "2198130"
  },
  {
    "text": "native data and that that is not on the Java heap in a more efficient way so panama is exploring exactly that it's a",
    "start": "2198130",
    "end": "2204760"
  },
  {
    "text": "safe fast and simple way to access to call out to native functions against",
    "start": "2204760",
    "end": "2209950"
  },
  {
    "text": "think C C++ and also access data that isn't on the Java heap and this without",
    "start": "2209950",
    "end": "2217180"
  },
  {
    "text": "having to write a single line of native code because you can do this today there is the J&I interface how many people",
    "start": "2217180",
    "end": "2223600"
  },
  {
    "text": "here have written J&I or being done Jana we're so sorry for you",
    "start": "2223600",
    "end": "2229230"
  },
  {
    "text": "Jana is extremely hard to get right so basically for those of you who have not",
    "start": "2229230",
    "end": "2234580"
  },
  {
    "text": "done this exercise if you have a favorite library that you want to call basically this is the workflow the first",
    "start": "2234580",
    "end": "2240100"
  },
  {
    "text": "thing you need to do is to study that library and understand exactly how it works because the next thing you need to",
    "start": "2240100",
    "end": "2245410"
  },
  {
    "text": "do is to model that whole library on the Java level once you've done that you are",
    "start": "2245410",
    "end": "2250540"
  },
  {
    "text": "implement you need to implement some like not just the the Royal stubs of the methods but like actually the code to call out to native",
    "start": "2250540",
    "end": "2258110"
  },
  {
    "text": "and you you add a bunch of methods that are decorated with the native keyword and then in the next step you use a tool",
    "start": "2258110",
    "end": "2264650"
  },
  {
    "text": "Java C in this case or Java age used to be the name of it to generate header files C C++ header files and then you",
    "start": "2264650",
    "end": "2273500"
  },
  {
    "text": "need to actually implement the Jana code that bridges between the Jay and I headed sand Java to your favorite",
    "start": "2273500",
    "end": "2279290"
  },
  {
    "text": "library and then you need to build that shared library finding the tool chains and that's gonna be different depending",
    "start": "2279290",
    "end": "2284450"
  },
  {
    "text": "on which platform you are on and then finally you can actually start using the code right and God forbid somebody goes",
    "start": "2284450",
    "end": "2289670"
  },
  {
    "text": "in and actually changes that library you're trying to mom model because now you need to go in and change everything right that's been unfortunate so what",
    "start": "2289670",
    "end": "2297650"
  },
  {
    "text": "we're trying to do is to basically cut cut away like the first things here all the ones that are error-prone because",
    "start": "2297650",
    "end": "2303680"
  },
  {
    "text": "every single step here you can get wrong in J and I especially the branching layer is extremely easy to get wrong you",
    "start": "2303680",
    "end": "2310070"
  },
  {
    "text": "forget to free up a resource or something like that so basically this is the new model we're envisioning you're",
    "start": "2310070",
    "end": "2316160"
  },
  {
    "text": "using a tool to generate things and the things here are actually Java classes or interfaces more specifically so",
    "start": "2316160",
    "end": "2323180"
  },
  {
    "text": "basically this is all automated you pointed out that a library or a header file and it generates Java code for you",
    "start": "2323180",
    "end": "2329930"
  },
  {
    "text": "and then you can just start calling those Java methods you have not like written a single line of native code and",
    "start": "2329930",
    "end": "2335450"
  },
  {
    "text": "you you can now use that library obviously you still have to understand the library about to use but at least",
    "start": "2335450",
    "end": "2340730"
  },
  {
    "text": "there's less in the way let's say you'll do that right metropolis is a also a one",
    "start": "2340730",
    "end": "2349790"
  },
  {
    "text": "of those big projects it is exploring how we can use Java more to implement",
    "start": "2349790",
    "end": "2356360"
  },
  {
    "text": "the Java Runtime itself so a large part of Java and especially the core libraries are obviously implemented in",
    "start": "2356360",
    "end": "2361520"
  },
  {
    "text": "Java but the JVM is still native code and the first thing we're looking into",
    "start": "2361520",
    "end": "2366860"
  },
  {
    "text": "here is how we can move the job the JIT compiler that lives inside of the JVM so",
    "start": "2366860",
    "end": "2372770"
  },
  {
    "text": "the compiler that takes bytecode Java bytecode and turns it into efficient machine code if you so will so that's",
    "start": "2372770",
    "end": "2378920"
  },
  {
    "text": "the first thing we're looking into so today we have two different JIT compilers in the JVM there's C one also",
    "start": "2378920",
    "end": "2384560"
  },
  {
    "text": "known as the client compiler and seat which is the server the fully optimizing compiler that we have so c2 is sort of",
    "start": "2384560",
    "end": "2392580"
  },
  {
    "text": "reaching its complexity but yet we we put a lot of good stuff into c2 but it's sort of time to to look at it like what",
    "start": "2392580",
    "end": "2400080"
  },
  {
    "text": "what does the future look like the next 10 15 years or 20 and it also turns out",
    "start": "2400080",
    "end": "2405390"
  },
  {
    "text": "that a lot of these products have a big significant impact on the compiler we do need a lot of work in the compiler the",
    "start": "2405390",
    "end": "2411210"
  },
  {
    "text": "compiler is sort of the the secret weapon that we have in the DM and that needs to work really really well for all",
    "start": "2411210",
    "end": "2416460"
  },
  {
    "text": "kinds of cone shapes so for a lot of the products we do need work in the JIT so making it easier to improve on our death",
    "start": "2416460",
    "end": "2424140"
  },
  {
    "text": "going forward is important so what do you do when you have two of something and you want to get down to one you add",
    "start": "2424140",
    "end": "2430830"
  },
  {
    "text": "a third in this case we're adding something called growl growl is a JIT",
    "start": "2430830",
    "end": "2437250"
  },
  {
    "text": "compiler implemented in Java and we like to think that Java again is is a good",
    "start": "2437250",
    "end": "2443220"
  },
  {
    "text": "language to to implement things in in general so why not the compiler pros include things like it's again faster to",
    "start": "2443220",
    "end": "2449850"
  },
  {
    "text": "do development going forward it's also easy it's a lower barrier to entry if you want to experiment with things you",
    "start": "2449850",
    "end": "2456630"
  },
  {
    "text": "don't have to build rebuild the JVM you can actually work on the Java level and get all the Idid support and code",
    "start": "2456630",
    "end": "2462330"
  },
  {
    "text": "browsing and all of that there are a few products that are small in nature novel",
    "start": "2462330",
    "end": "2469050"
  },
  {
    "text": "they touch on them really quickly one is called SCARA this product is looking at modernizing the developer experience for",
    "start": "2469050",
    "end": "2475290"
  },
  {
    "text": "us that work on the jdk itself so that that code development is currently happening on I'm gonna call it aging and",
    "start": "2475290",
    "end": "2483960"
  },
  {
    "text": "not necessarily aged with Dignity code the infrastructure so this is specifically around code reviews and SEM",
    "start": "2483960",
    "end": "2491760"
  },
  {
    "text": "like yeah taking care of the code itself so what we're investing here if we",
    "start": "2491760",
    "end": "2496860"
  },
  {
    "text": "should move over from we're currently using mercurial if we should move over maybe to get it does seem like there are",
    "start": "2496860",
    "end": "2502890"
  },
  {
    "text": "many more tools that support get the underarmor q4 material and also leveraging existing hosting providers",
    "start": "2502890",
    "end": "2509640"
  },
  {
    "text": "like yet lab or github things like that lots of exciting stuff happening here",
    "start": "2509640",
    "end": "2514860"
  },
  {
    "text": "Portola George mentioned on his slide earlier as well is where we're looking at",
    "start": "2514860",
    "end": "2520150"
  },
  {
    "text": "making sure that the other works really really well in containers how many people in hair here have heard about",
    "start": "2520150",
    "end": "2525490"
  },
  {
    "text": "Alpine Linux ooh surprisingly many how many people in",
    "start": "2525490",
    "end": "2530619"
  },
  {
    "text": "here would like to see a port of the JDK - Alpine Linux ok few answers how many",
    "start": "2530619",
    "end": "2537400"
  },
  {
    "text": "people would like to help maintain is imported do let us know we're trying to",
    "start": "2537400",
    "end": "2544299"
  },
  {
    "text": "gauge the interest and figure out if it's worth moving forward with this there is a product where like the JDK",
    "start": "2544299",
    "end": "2549520"
  },
  {
    "text": "actually it builds and runs stuff but we haven't done all the testing we know when we do to certify that it likely is",
    "start": "2549520",
    "end": "2554950"
  },
  {
    "text": "functionally correct CGC is a product",
    "start": "2554950",
    "end": "2560260"
  },
  {
    "text": "where we're looking at a garbage collector that is that has yet like soft but still pretty good let's say",
    "start": "2560260",
    "end": "2566650"
  },
  {
    "text": "guarantee surround pause times so the goal of this project is to support very",
    "start": "2566650",
    "end": "2571809"
  },
  {
    "text": "very large heaps so I think we just upped I can't remember right now we",
    "start": "2571809",
    "end": "2577359"
  },
  {
    "text": "upped it to 16 terabytes or or maybe more but in our case large heaps with",
    "start": "2577359",
    "end": "2582700"
  },
  {
    "text": "like while still keeping the post times really really low so the goal is 10 milliseconds and we're actually below",
    "start": "2582700",
    "end": "2588609"
  },
  {
    "text": "that right now but at the same time one of the other things that we take pride in here isn't you not having to tune",
    "start": "2588609",
    "end": "2595180"
  },
  {
    "text": "things it should just work out of the box without that requirement and and we're trying to do this while keeping",
    "start": "2595180",
    "end": "2601210"
  },
  {
    "text": "the throughput overhead low so the goal is 15% seemed like a nice round number where most people can accept the",
    "start": "2601210",
    "end": "2607240"
  },
  {
    "text": "trade-off and we're doing it really well there as well and then finally I'll just mention I probably called jf or or JDK",
    "start": "2607240",
    "end": "2616210"
  },
  {
    "text": "flight recorder so imagine that you're working in a project and you were",
    "start": "2616210",
    "end": "2622420"
  },
  {
    "text": "actually on call in some way so typically you know you can bet that it's like Sunday or Saturday evening or",
    "start": "2622420",
    "end": "2629349"
  },
  {
    "text": "something like something happens SLA is breached somewhere and the problem is you have no idea what's going on right",
    "start": "2629349",
    "end": "2635349"
  },
  {
    "text": "so the first thing you do either work first thing but like at some point you add some logging and you try to get more",
    "start": "2635349",
    "end": "2640809"
  },
  {
    "text": "information logging unfortunately comes with performance overhead so after a while",
    "start": "2640809",
    "end": "2646049"
  },
  {
    "text": "nothing's been found you need to remove the logging because you don't want to pay for the additional servers and",
    "start": "2646049",
    "end": "2652090"
  },
  {
    "text": "remove the logging in obviously next Saturday at 7 p.m. again same thing happens right j4 is trying to solve",
    "start": "2652090",
    "end": "2659560"
  },
  {
    "text": "exactly that problem by piggybacking on a lot of what the JVM already does",
    "start": "2659560",
    "end": "2664780"
  },
  {
    "text": "so it's collecting a lot of fine-grained information about the system itself both",
    "start": "2664780",
    "end": "2669790"
  },
  {
    "text": "inside the VM but there's also an API you can use to put user defined events into that same stream and it's doing",
    "start": "2669790",
    "end": "2677530"
  },
  {
    "text": "this in like the how should I put this we're trying to make sure it's designed",
    "start": "2677530",
    "end": "2683740"
  },
  {
    "text": "to be all in production that's that's the first thing to keep in mind you can use this during development obviously",
    "start": "2683740",
    "end": "2688780"
  },
  {
    "text": "but it's designed to be on in production and it's helping you collect almost like",
    "start": "2688780",
    "end": "2694420"
  },
  {
    "text": "too much information it's it's the default settings will collect you know enough information for most cases but",
    "start": "2694420",
    "end": "2701620"
  },
  {
    "text": "but it's I don't know how to put this in are there any other way that it's",
    "start": "2701620",
    "end": "2706720"
  },
  {
    "text": "extremely powerful so you know have a look and tell us what you want what to see going forward so last slide I",
    "start": "2706720",
    "end": "2715840"
  },
  {
    "text": "promised to give you some links to early access binaries so again we are counting",
    "start": "2715840",
    "end": "2720970"
  },
  {
    "text": "on your feedback and we need your help to make sure that what we develop the future products that you actually make",
    "start": "2720970",
    "end": "2727750"
  },
  {
    "text": "sense that you know you feel natural to work with and all that and also to to",
    "start": "2727750",
    "end": "2733660"
  },
  {
    "text": "make sure help ensure that the projects the greece's we do actually the you know work right that there are no issues so",
    "start": "2733660",
    "end": "2740110"
  },
  {
    "text": "for jdk 13 which is GA september something something it's actually a",
    "start": "2740110",
    "end": "2747880"
  },
  {
    "text": "pretty good place to be right now because like these six-month releases is like where we found that what we need to",
    "start": "2747880",
    "end": "2753970"
  },
  {
    "text": "do is to make sure that the quality remains high on every single push we do and what that basically does is that",
    "start": "2753970",
    "end": "2760120"
  },
  {
    "text": "when a release comes along it's like a non-event it's like we draw a line and say here what the here's what went into",
    "start": "2760120",
    "end": "2765460"
  },
  {
    "text": "this release and then next three months we just more or less sit around their old thumps and it's like and then so DGA",
    "start": "2765460",
    "end": "2770620"
  },
  {
    "text": "comes along right then it's like yeah fair enough we almost forgot about the JDK twelve released just a few weeks ago so in September we're releasing 13 we",
    "start": "2770620",
    "end": "2778870"
  },
  {
    "text": "are publishing on a weekly basis early access binaries for 13 so please pick up",
    "start": "2778870",
    "end": "2784330"
  },
  {
    "text": "try them out and let us know if if you find any issues or for that sake even if you like what's in there",
    "start": "2784330",
    "end": "2789420"
  },
  {
    "text": "right and it positive feedback is also nice to get some from time to time and then for the projects these are a few of",
    "start": "2789420",
    "end": "2796680"
  },
  {
    "text": "the projects that we're also publishing early access binaries for so again if you're curious to try out Valhalla or",
    "start": "2796680",
    "end": "2803100"
  },
  {
    "text": "Panama or we have a J package product as well now that's where you can find them",
    "start": "2803100",
    "end": "2810170"
  },
  {
    "text": "ok thank you Michael so hopefully this was useful getting you know both a",
    "start": "2811730",
    "end": "2818190"
  },
  {
    "text": "little bit of an overview of sort of the status and where things are with Java how we go about developing it and and",
    "start": "2818190",
    "end": "2825180"
  },
  {
    "text": "and finally a deep dive into a bunch of the projects that we're working on trying to keep making it better for you",
    "start": "2825180",
    "end": "2831380"
  },
  {
    "text": "so I think we have time for maybe a couple of questions [Applause]",
    "start": "2831380",
    "end": "2841379"
  }
]