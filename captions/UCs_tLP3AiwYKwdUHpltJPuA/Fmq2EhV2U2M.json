[
  {
    "text": "welcome to the worst programming language ever um if you are turning up hoping that we are going to have a",
    "start": "120",
    "end": "6440"
  },
  {
    "text": "discussion and decide which is the worst programming language ever then I'm going to disappoint you apart from anything",
    "start": "6440",
    "end": "12280"
  },
  {
    "text": "else that competition has already been won I won't spoil it for anybody but it starts with a p and it's not",
    "start": "12280",
    "end": "20279"
  },
  {
    "text": "python we are going to invent the worst programming language ever we are going to make the worst programming language",
    "start": "20279",
    "end": "26119"
  },
  {
    "text": "ever the second worst programming language ever not by making it better but by making one that is just so much",
    "start": "26119",
    "end": "33879"
  },
  {
    "text": "worse but before we get into that those who do not learn from history",
    "start": "33879",
    "end": "39760"
  },
  {
    "text": "are doomed to be unable to repeat and iterate on its mistakes so let us talk a",
    "start": "39760",
    "end": "45399"
  },
  {
    "text": "little about the history of terrible programming languages the first terrible programming",
    "start": "45399",
    "end": "51520"
  },
  {
    "text": "language was actually one of the first programming languages it was cobal cobal was",
    "start": "51520",
    "end": "58000"
  },
  {
    "text": "appalling before cobal there was Fortran and Fortran was really quite tur and a lot like a an early version of C but",
    "start": "58000",
    "end": "66040"
  },
  {
    "text": "with a lot more capital letters but then they came along and they invented cobal cobal was the first",
    "start": "66040",
    "end": "71520"
  },
  {
    "text": "programming language that was designed by a committee and it shows because the committee you imagine",
    "start": "71520",
    "end": "79240"
  },
  {
    "text": "one person wanted this identification line here and then someone said oh no there has to be a program IED bit going",
    "start": "79240",
    "end": "85159"
  },
  {
    "text": "here and then we've got to have a procedure Division and so forth this is all just to display hello world on the",
    "start": "85159",
    "end": "91360"
  },
  {
    "text": "screen and then of course you have to say stop you can't just stop writing code you actually have to say stop what",
    "start": "91360",
    "end": "97399"
  },
  {
    "text": "happens if you don't stop undocumented but you have to stop otherwise bad things will",
    "start": "97399",
    "end": "103680"
  },
  {
    "text": "happen cob it's basically Cobalt is about 95% boilerplate what I really like",
    "start": "103680",
    "end": "110000"
  },
  {
    "text": "though is when they said this is Cobalt IBM went oh it looks a bit vague to us",
    "start": "110000",
    "end": "116000"
  },
  {
    "text": "we we're not sure that we we think that's precise enough so they invent IBM cobal that's IBM cobal that is also",
    "start": "116000",
    "end": "124280"
  },
  {
    "text": "hello world but it's just got an awful lot",
    "start": "124280",
    "end": "129360"
  },
  {
    "text": "more boiler plate in there to basically tell the compiler um a how important the",
    "start": "129360",
    "end": "136519"
  },
  {
    "text": "programmer is in this process and B how to do its job better um the thing I like",
    "start": "136519",
    "end": "143560"
  },
  {
    "text": "best of all is that after you said stop run there's three more lines of instructions for things to do after you",
    "start": "143560",
    "end": "150319"
  },
  {
    "text": "stopped running which is just brilliant that was the this was the",
    "start": "150319",
    "end": "157360"
  },
  {
    "text": "language that they invented so that business people could write programs for themselves without needing programmers",
    "start": "157360",
    "end": "163440"
  },
  {
    "text": "to do it for them that was 40 odd years ago that's going really well we're we're",
    "start": "163440",
    "end": "169480"
  },
  {
    "text": "so far down the road to achieving that dream of business people being able to write their own code God help us if they",
    "start": "169480",
    "end": "177519"
  },
  {
    "text": "ever actually figure it out but this wasn't the weirdest language",
    "start": "177519",
    "end": "183080"
  },
  {
    "text": "ever the weirdest language that wasn't deliberately meant to be weird was one called APL which was invented by a chat",
    "start": "183080",
    "end": "190080"
  },
  {
    "text": "called Kenneth Iverson as uh teaching Aid um and it stands APL by the way",
    "start": "190080",
    "end": "195920"
  },
  {
    "text": "stands for a programming language yes brilliant at naming well done this is",
    "start": "195920",
    "end": "202640"
  },
  {
    "text": "APL uh and this is Hello World in APL and you think that's brilliant that's completely Saye you just have a string",
    "start": "202640",
    "end": "210080"
  },
  {
    "text": "and if you don't say do anything else with it it just writes it to the standard output that's complete that's",
    "start": "210080",
    "end": "215159"
  },
  {
    "text": "that's the terest programming language ever and actually APL was incredibly tur",
    "start": "215159",
    "end": "220519"
  },
  {
    "text": "but once you got past something as simple as hello world it became a little bit more",
    "start": "220519",
    "end": "226519"
  },
  {
    "text": "complicated that is Conway's Game of Life in APL and you may notice some",
    "start": "226519",
    "end": "233319"
  },
  {
    "text": "slight issues with with APL as a programming language um not all of those",
    "start": "233319",
    "end": "238760"
  },
  {
    "text": "characters are on the standard querty keyboard or indeed any keyboard in the",
    "start": "238760",
    "end": "244280"
  },
  {
    "text": "entire world ever except for the APL keyboard itself yes this was a",
    "start": "244280",
    "end": "251040"
  },
  {
    "text": "programming language where in order to use it you had to buy a special keyboard that you could plug into your terminal",
    "start": "251040",
    "end": "257479"
  },
  {
    "text": "and use to type weird little things that looked like W's but weren't",
    "start": "257479",
    "end": "263479"
  },
  {
    "text": "W's APL was deliberately like that but the guy was quite serious and it was all",
    "start": "263479",
    "end": "269720"
  },
  {
    "text": "all based around Lambda calculus and Mathematics and all this sort of stuff at around the same time as APL in",
    "start": "269720",
    "end": "276880"
  },
  {
    "text": "the mid '70s uh someone had the idea of creating a language just as a joke who",
    "start": "276880",
    "end": "283280"
  },
  {
    "text": "would ever waste their time doing that I don't know um but someone created a",
    "start": "283280",
    "end": "289720"
  },
  {
    "text": "language and it was called the compiler with no pronounceable acronym or",
    "start": "289720",
    "end": "296400"
  },
  {
    "text": "intercal and this is intercal intercal was liely designed to be very very",
    "start": "296400",
    "end": "302639"
  },
  {
    "text": "difficult to program in um this doesn't have the best in this is Hello World in",
    "start": "302639",
    "end": "308320"
  },
  {
    "text": "intercal honestly go and download a compiler and and type it in or copy and paste it off the slides it does work um",
    "start": "308320",
    "end": "315520"
  },
  {
    "text": "you'll have to remove PowerPoints weird Carriage returns but uh that will work",
    "start": "315520",
    "end": "321000"
  },
  {
    "text": "um now intercal lots of of different uh idiosyncrasies in intercal but you'll",
    "start": "321000",
    "end": "327360"
  },
  {
    "text": "notice that it has the word please at the start of some of the lines intercal required you to be the",
    "start": "327360",
    "end": "335120"
  },
  {
    "text": "right amount of polite so if you did not say please often enough the compiler",
    "start": "335120",
    "end": "341360"
  },
  {
    "text": "would fail and you would get an error message saying insufficiently",
    "start": "341360",
    "end": "346800"
  },
  {
    "text": "polite if you said please too many times if you went well never mind I'll just put please at the start of every line",
    "start": "346800",
    "end": "353120"
  },
  {
    "text": "that'll sort it out the compiler would fail and you would get a compiler error saying excessively polite",
    "start": "353120",
    "end": "360360"
  },
  {
    "text": "the correct ratio of please to not please was never documented",
    "start": "360360",
    "end": "367919"
  },
  {
    "text": "anywhere also at the end there please give up this was basically taken from Cobalt's stopped run but in the case of",
    "start": "368080",
    "end": "375840"
  },
  {
    "text": "intercal if you didn't put please give up it would spin your CPU up to 100% and",
    "start": "375840",
    "end": "381720"
  },
  {
    "text": "leave it there until you turned the machine off at the wall which is brilliant you don't have the best",
    "start": "381720",
    "end": "387199"
  },
  {
    "text": "intercal instruction here though which is come from yes intercal did not have",
    "start": "387199",
    "end": "392280"
  },
  {
    "text": "go to because that would be too easy it had come from and actually the semantics of that by the time you've compiled it",
    "start": "392280",
    "end": "399000"
  },
  {
    "text": "are exactly the same as they are for goto makes perfect sense uh but you can",
    "start": "399000",
    "end": "404400"
  },
  {
    "text": "hijack The Code by saying come from a marker and then it will jump down to to",
    "start": "404400",
    "end": "409759"
  },
  {
    "text": "where you told it to come from so that was the first deliberately bad joke programming language the second",
    "start": "409759",
    "end": "417720"
  },
  {
    "text": "deliberately bad joke programming language was called Visual Basic um Alan",
    "start": "417720",
    "end": "423919"
  },
  {
    "text": "Cooper made this for a bet while he was drunk and off his face on prescription",
    "start": "423919",
    "end": "429520"
  },
  {
    "text": "painkillers uh and then accidentally before he sobered up sold it to Microsoft um and we are still paying the",
    "start": "429520",
    "end": "436720"
  },
  {
    "text": "price for that particular party uh all these years later Visual Basic yes it did remarkably",
    "start": "436720",
    "end": "446639"
  },
  {
    "text": "well um but Visual Basic one of the things about Visual Basic was you had to use Microsoft Visual Basic to edit it",
    "start": "446639",
    "end": "453080"
  },
  {
    "text": "you couldn't use uh just a random text editor and then compile it from the command line like you can with almost",
    "start": "453080",
    "end": "459800"
  },
  {
    "text": "every other programming language in existence but at the time when Visual Basic started to make big strides which",
    "start": "459800",
    "end": "466400"
  },
  {
    "text": "was Windows 3.1 when people started writing client server systems and windows 3.11 which actually knew about",
    "start": "466400",
    "end": "473879"
  },
  {
    "text": "networks um there were lots of other uh development environments that sprang up",
    "start": "473879",
    "end": "481039"
  },
  {
    "text": "that were designed to make it as easy as possible there was power Builder uh there was infomix New Era the way they",
    "start": "481039",
    "end": "486759"
  },
  {
    "text": "pronounce it in the states uh it was New Era but yes they called it new era in the",
    "start": "486759",
    "end": "493759"
  },
  {
    "text": "states which is brilliant the one that I ended up working on though was this which is g to SQL windows and this had",
    "start": "493759",
    "end": "500879"
  },
  {
    "text": "this brilliant approach to your code it's essentially significant wh space",
    "start": "500879",
    "end": "506479"
  },
  {
    "text": "like python um and and sharp and Haskell and all those things except it's",
    "start": "506479",
    "end": "512880"
  },
  {
    "text": "actually in a collapsible Tree View the editor surface is a collapsible Tree",
    "start": "512880",
    "end": "518120"
  },
  {
    "text": "View and you can double click any of those bits and collapse and expand things all at the same time and if you",
    "start": "518120",
    "end": "524200"
  },
  {
    "text": "try to open that file in a text editor it's liter it's a binary file it's like",
    "start": "524200",
    "end": "529800"
  },
  {
    "text": "trying to edit a Word document with notepad",
    "start": "529800",
    "end": "535080"
  },
  {
    "text": "so learning from all these languages and some of the ones that people are still",
    "start": "535080",
    "end": "540120"
  },
  {
    "text": "misguidedly using today let's see what we can come up with to to call the worst",
    "start": "540120",
    "end": "546120"
  },
  {
    "text": "programming language ever now everyone knows the hardest thing in computer",
    "start": "546120",
    "end": "552200"
  },
  {
    "text": "science is naming and this language was officially launched at the bill stuff",
    "start": "552200",
    "end": "558839"
  },
  {
    "text": "conference in Lithuania best Conference of the year and so I called it",
    "start": "558839",
    "end": "566640"
  },
  {
    "text": "[Music] BS and because BS is a modern trendy language",
    "start": "566640",
    "end": "572320"
  },
  {
    "text": "and we're going to push it into Silicon Valley and they're all going to adopt it it needs to have a tagline like Ruby has",
    "start": "572320",
    "end": "579720"
  },
  {
    "text": "the tagline makes programmers happy or a programmer's best friend or something",
    "start": "579720",
    "end": "585680"
  },
  {
    "text": "along those lines something that after a hard day of working with Ruby you can remind yourself that it makes you happy",
    "start": "585680",
    "end": "592839"
  },
  {
    "text": "and you can feel much better about yourself so BS needs a tagline as well and what I've come up with is BS why",
    "start": "592839",
    "end": "601399"
  },
  {
    "text": "because you that's why this is a a an ethos and a design",
    "start": "601399",
    "end": "609279"
  },
  {
    "text": "principle that we're going to carry through in our design of this language Ruby likes programmers and",
    "start": "609279",
    "end": "616600"
  },
  {
    "text": "wants them to be happy it just doesn't know how to achieve that BS hates",
    "start": "616600",
    "end": "621640"
  },
  {
    "text": "programmers and wants them to be miserable it wants the experience of programming BS to be the equivalent of",
    "start": "621640",
    "end": "628040"
  },
  {
    "text": "removing your head and putting it in a washing machine with a couple of",
    "start": "628040",
    "end": "633200"
  },
  {
    "text": "bricks so what are our design principles number one create the pit of success",
    "start": "633200",
    "end": "639399"
  },
  {
    "text": "that doesn't sound like something we want to do I don't want to create the pit of success I want to create the pit of fail yes it's all very well creating",
    "start": "639399",
    "end": "647320"
  },
  {
    "text": "a language that makes it easy to do the right thing and hard to do the wrong thing anyone can write in a programming",
    "start": "647320",
    "end": "654120"
  },
  {
    "text": "language like that we want a programming language that people can stand up and say I can program it BS I can avoid the",
    "start": "654120",
    "end": "661399"
  },
  {
    "text": "pit of fail actually that's not hard enough we want these people to be the Indiana Jones of programming we want to",
    "start": "661399",
    "end": "666959"
  },
  {
    "text": "create the booby trapped Aztec Temple of fail and they can make their way through",
    "start": "666959",
    "end": "672600"
  },
  {
    "text": "it and then come out the other side and go I have created an application in BS",
    "start": "672600",
    "end": "678320"
  },
  {
    "text": "that does not crash we should never trust the programmer to get simple things right",
    "start": "678320",
    "end": "685079"
  },
  {
    "text": "like cobal we should basically make sure that the programmer has double checked everything that is completely obvious",
    "start": "685079",
    "end": "690720"
  },
  {
    "text": "and straightforward on the other hand we should leave it up to the programmer to",
    "start": "690720",
    "end": "696920"
  },
  {
    "text": "get all the really complicated stuff right and not help them error messages should be obtuse to the point of",
    "start": "696920",
    "end": "704959"
  },
  {
    "text": "uselessness everything that is simple should be complicated everything that is complicated should be simple everything",
    "start": "704959",
    "end": "712040"
  },
  {
    "text": "that doesn't need to be documented must be documented and also if you really want",
    "start": "712040",
    "end": "718680"
  },
  {
    "text": "to make a successful programming language you should Target a specific area you should say this is a systems",
    "start": "718680",
    "end": "725360"
  },
  {
    "text": "programming language like C or rust or go or this is a web programming language",
    "start": "725360",
    "end": "732120"
  },
  {
    "text": "like Ruby or PHP or nodejs and then people will pick it up",
    "start": "732120",
    "end": "739839"
  },
  {
    "text": "and they will try and use it for all the other things that you never meant it to be used for so you will find operating",
    "start": "739839",
    "end": "745680"
  },
  {
    "text": "systems written in node.js and websites written in level",
    "start": "745680",
    "end": "750839"
  },
  {
    "text": "C and you actually will as well so we're going to help people out on that path we",
    "start": "750839",
    "end": "756760"
  },
  {
    "text": "are going to do everything we're going to do low-level systems embedded code desktop gooey environments web",
    "start": "756760",
    "end": "762279"
  },
  {
    "text": "applications the internet of things we're going to run on devices we're going to let people write console games",
    "start": "762279",
    "end": "767800"
  },
  {
    "text": "we're going to do the whole thing right across the board we're going to strive to achieve everything and Achieve",
    "start": "767800",
    "end": "773600"
  },
  {
    "text": "precisely nothing now you can't start from scratch",
    "start": "773600",
    "end": "779240"
  },
  {
    "text": "these days all the ideas have been used so all the good languages take a",
    "start": "779240",
    "end": "784480"
  },
  {
    "text": "starting point from somewhere so we are going to take our inspiration on our road to creating the worst programming",
    "start": "784480",
    "end": "791440"
  },
  {
    "text": "language and we're going to give ourselves the best start possible yes we're going to base our",
    "start": "791440",
    "end": "798000"
  },
  {
    "text": "language on PHP anyone in here a PHP programmer who's going to admit it now",
    "start": "798000",
    "end": "804320"
  },
  {
    "text": "no I have a PHP programmer in my class he's not here which which is good",
    "start": "804320",
    "end": "809959"
  },
  {
    "text": "considering he's paying me a lot of money so PHP um if you don't know PHP uh",
    "start": "809959",
    "end": "816519"
  },
  {
    "text": "originally stood for um I think Pearl hypertex pre-processor and then it stood",
    "start": "816519",
    "end": "822360"
  },
  {
    "text": "for personal homepage because it was good for creating your personal homepage",
    "start": "822360",
    "end": "827600"
  },
  {
    "text": "but these days it's a recursive acronym and it actually stands for PHP hates",
    "start": "827600",
    "end": "833519"
  },
  {
    "text": "programmers it does it despises them it wants them to be unhappy PHP is just",
    "start": "833519",
    "end": "839800"
  },
  {
    "text": "it's a work of Genius from our point of view as a room full of people trying to create something hideous it has complete",
    "start": "839800",
    "end": "847120"
  },
  {
    "text": "inconsistency in terms of naming it's got Pascal case camel case snake case shouty snake case it's got the whole",
    "start": "847120",
    "end": "854480"
  },
  {
    "text": "everything that you could possibly want it has pointless variable prefixing all variables have to be prefixed otherwise",
    "start": "854480",
    "end": "862279"
  },
  {
    "text": "they're not variables they're are thing that the compiler doesn't understand it tries to say it must be a keyword then",
    "start": "862279",
    "end": "869680"
  },
  {
    "text": "it's all the hassle of c and C++ and all the performance of Al",
    "start": "869680",
    "end": "875040"
  },
  {
    "text": "basic Bill Gates's first ever product so starting from PHP and you",
    "start": "875040",
    "end": "882480"
  },
  {
    "text": "will see the influences very clearly here here is BS version",
    "start": "882480",
    "end": "888560"
  },
  {
    "text": "0.1 so BS is an objectoriented language we have",
    "start": "888560",
    "end": "893720"
  },
  {
    "text": "class it's an objectoriented language with braces H we'll come back to that later",
    "start": "893720",
    "end": "900639"
  },
  {
    "text": "on um it has this special word underscore underscore construct rather",
    "start": "900639",
    "end": "906600"
  },
  {
    "text": "than the standard way of uh of um declaring Constructors uh we've got access",
    "start": "906600",
    "end": "914279"
  },
  {
    "text": "modifiers we've got pointless prefixing but this is a European language I am",
    "start": "914279",
    "end": "920120"
  },
  {
    "text": "European you are all European the language was invented in Europe we are not using the dollar symbol to prefix",
    "start": "920120",
    "end": "927639"
  },
  {
    "text": "our variables we are using the Euro symbol I don't care if it's hard to type",
    "start": "927639",
    "end": "933199"
  },
  {
    "text": "on your keyboard I use a British Mac hash is hard to type on my keyboard",
    "start": "933199",
    "end": "941480"
  },
  {
    "text": "Q we have C style property D referencing",
    "start": "941600",
    "end": "947240"
  },
  {
    "text": "yes never mind dot that's far too easy anyone can type dot you want two characters two characters to D reference",
    "start": "947240",
    "end": "953800"
  },
  {
    "text": "a variable and uh what else are we going to we're going to have uh semicolons at the end of lines here we're going to",
    "start": "953800",
    "end": "960639"
  },
  {
    "text": "have uh big shouty case name spaces with a double colon to to reference the end",
    "start": "960639",
    "end": "965920"
  },
  {
    "text": "of line character in there back sln won't work for reasons that we will come to later um and we're going to have PHP",
    "start": "965920",
    "end": "973720"
  },
  {
    "text": "style string concatenation because anything that actually suggests string concatenation like Plus or even the",
    "start": "973720",
    "end": "980120"
  },
  {
    "text": "Ampersand symbol would be too obvious and we wouldn't want that so this is",
    "start": "980120",
    "end": "986000"
  },
  {
    "text": "going to construct something it's going to assign a property uh to this uh value",
    "start": "986000",
    "end": "991199"
  },
  {
    "text": "here and then when we call say we're going to say this do name and we're going to say this thing to them and then",
    "start": "991199",
    "end": "997319"
  },
  {
    "text": "we're going to call End of Line and then we're going to exit",
    "start": "997319",
    "end": "1005079"
  },
  {
    "text": "now here we've got braces all over the place braces lots of people hate braces",
    "start": "1005079",
    "end": "1011240"
  },
  {
    "text": "they they don't like them at all but braces are very very good for making sure that you've got the right number of opens and the right number of closes and",
    "start": "1011240",
    "end": "1019120"
  },
  {
    "text": "you can you can go in you can look at the braces you can count the braces and when you move the cursor around in most",
    "start": "1019120",
    "end": "1024600"
  },
  {
    "text": "editors they'll show you the opening or closing brace that matches the one that you're currently on which means they're",
    "start": "1024600",
    "end": "1030918"
  },
  {
    "text": "far too useful and we have to get rid of them so we're going to go the python route now this is some python that I was",
    "start": "1030919",
    "end": "1039918"
  },
  {
    "text": "actually working on a few weeks ago this python is broken this python doesn't",
    "start": "1039919",
    "end": "1046000"
  },
  {
    "text": "work this is the fixed version of this python",
    "start": "1046000",
    "end": "1052400"
  },
  {
    "text": "yeah what had I done wrong I'd accidentally edited it in two editors",
    "start": "1052400",
    "end": "1058000"
  },
  {
    "text": "one of which was using spaces and the other of which was using tabs what did the compiler error tell me",
    "start": "1058000",
    "end": "1067960"
  },
  {
    "text": "unmatched colon yes not you seem to have mucked up",
    "start": "1067960",
    "end": "1073320"
  },
  {
    "text": "your white space thanks for that python this this is what I want for my",
    "start": "1073320",
    "end": "1080120"
  },
  {
    "text": "terrible terrible programming language I want errors that are invisible to the naked eye I am going to take significant",
    "start": "1080120",
    "end": "1088280"
  },
  {
    "text": "white space from Python and just so python doesn't feel unnecessarily attacked I am also taking significant",
    "start": "1088280",
    "end": "1094000"
  },
  {
    "text": "white space from hll and O okam and fshp and functional languages for some reason",
    "start": "1094000",
    "end": "1101039"
  },
  {
    "text": "really seem to love significant white space I don't know why so here is BS",
    "start": "1101039",
    "end": "1108159"
  },
  {
    "text": "with significant white space taken from python you will notice that after class",
    "start": "1108159",
    "end": "1115360"
  },
  {
    "text": "you need a colon and then after function you don't because sometimes you do and",
    "start": "1115360",
    "end": "1122440"
  },
  {
    "text": "sometimes you don't and and I'm not going to explain why because because I don't have to it's my language that's",
    "start": "1122440",
    "end": "1129120"
  },
  {
    "text": "just the way it is so now we have a language with no",
    "start": "1129120",
    "end": "1134480"
  },
  {
    "text": "braces so that makes the brace hating people happy with significant wh space",
    "start": "1134480",
    "end": "1139799"
  },
  {
    "text": "so that we can report errors that are completely the wrong errors just on the",
    "start": "1139799",
    "end": "1145000"
  },
  {
    "text": "basis that here you were supposed to have a tab and you actually ended up with two spaces",
    "start": "1145000",
    "end": "1153039"
  },
  {
    "text": "instead just as a quick note there is actually a programming language called",
    "start": "1154320",
    "end": "1161000"
  },
  {
    "text": "whitespace where every significant operator character everything it's one",
    "start": "1161280",
    "end": "1166679"
  },
  {
    "text": "of the touring tarpits so it's in the same thing as brain and and those",
    "start": "1166679",
    "end": "1172120"
  },
  {
    "text": "languages um but they've used different Whit space characters new line backspace",
    "start": "1172120",
    "end": "1177240"
  },
  {
    "text": "tab space uh various other things this is a program this is Hello World in",
    "start": "1177240",
    "end": "1182360"
  },
  {
    "text": "whitespace it's honestly not just it's not just a blank slide no um anything",
    "start": "1182360",
    "end": "1187559"
  },
  {
    "text": "you can actually see in Whit space is a comment which is just",
    "start": "1187559",
    "end": "1194799"
  },
  {
    "text": "brilliant okay now the next thing we're going to take from our language for our language comes from almost every",
    "start": "1195000",
    "end": "1203080"
  },
  {
    "text": "language ever it's something that exists in actually this is something that hll",
    "start": "1203080",
    "end": "1209559"
  },
  {
    "text": "and and the functional languages tend to try and avoid if they possibly can null nothing undefined NADA empty uh",
    "start": "1209559",
    "end": "1218320"
  },
  {
    "text": "void um all all the different ways there are of saying I don't know and it's okay",
    "start": "1218320",
    "end": "1224720"
  },
  {
    "text": "that I don't know at this point it's never okay in a computer program not to no so we're going to have nulls all over",
    "start": "1224720",
    "end": "1231280"
  },
  {
    "text": "the place we're not going to have unable types we're not going to have things like value types in C which can't be",
    "start": "1231280",
    "end": "1237919"
  },
  {
    "text": "null and then people complain about the fact that they can't be null so you introduce a reference type wrapper",
    "start": "1237919",
    "end": "1243600"
  },
  {
    "text": "around them called nullable when what you should be doing is introducing a wrapper around the nullable types that",
    "start": "1243600",
    "end": "1250200"
  },
  {
    "text": "says not nullable ever just don't set it to null so we're going to have nulls all over the place you're just going to have",
    "start": "1250200",
    "end": "1256400"
  },
  {
    "text": "to check to make sure that things aren't null I may even make it that there's a 2%",
    "start": "1256400",
    "end": "1262880"
  },
  {
    "text": "chance on every pass through the compiler it'll just set something to null and make you check",
    "start": "1262880",
    "end": "1269840"
  },
  {
    "text": "it Ruby Ruby doesn't get away with just being the inspiration for programming",
    "start": "1270120",
    "end": "1276240"
  },
  {
    "text": "languages having marketing slogans no cuz Ruby has this this I hate this what",
    "start": "1276240",
    "end": "1283600"
  },
  {
    "text": "is unless this is one of the things that the Ruby programmers who go oh it's designed to make programers happy it's",
    "start": "1283600",
    "end": "1289559"
  },
  {
    "text": "designed you can read Ruby code like a sentence and unless apparently is an",
    "start": "1289559",
    "end": "1295919"
  },
  {
    "text": "important part of that and in Ruby you say raise an exception unless",
    "start": "1295919",
    "end": "1301440"
  },
  {
    "text": "everything's okay which is the wrong way round this is the equivalent of rushing into a theater and going everybody get",
    "start": "1301440",
    "end": "1308720"
  },
  {
    "text": "out unless there's not a fire it's just it's like terrible thing has happened or",
    "start": "1308720",
    "end": "1315279"
  },
  {
    "text": "maybe it hasn't I don't know we'll we'll have to see uh so yes unless I like unless so much",
    "start": "1315279",
    "end": "1323080"
  },
  {
    "text": "and when I say I like I mean I hate and want to inflict on my worst enemies unless so much that I'm not having any",
    "start": "1323080",
    "end": "1330720"
  },
  {
    "text": "other kind of conditional in in BS BS only has unless there is no other kind",
    "start": "1330720",
    "end": "1337440"
  },
  {
    "text": "of conditional which is going to make else's really quite interesting because you're going to have to say do this else",
    "start": "1337440",
    "end": "1344480"
  },
  {
    "text": "do this unless this and then you'll have to work it out backwards and then you can say it's it's it makes programmers",
    "start": "1344480",
    "end": "1351240"
  },
  {
    "text": "happy you can read it like a sentence you just have to stand on your",
    "start": "1351240",
    "end": "1356279"
  },
  {
    "text": "head thank you for that Ruby I love you here we",
    "start": "1356279",
    "end": "1362760"
  },
  {
    "text": "go there's Aaron Les also BS is only going to have one",
    "start": "1362760",
    "end": "1369039"
  },
  {
    "text": "exception it's going to have Halt and Catch Fire the experienced programmer will just know what is wrong the",
    "start": "1369039",
    "end": "1375600"
  },
  {
    "text": "inexperienced programmer can ask an experien programmer I am already after",
    "start": "1375600",
    "end": "1381000"
  },
  {
    "text": "just one presentation of this talk seeing job adverts requiring 8 years of BS Lang",
    "start": "1381000",
    "end": "1388240"
  },
  {
    "text": "experience so yes we have hton Catch Fire unless name does not equal",
    "start": "1388400",
    "end": "1393600"
  },
  {
    "text": "null hton Catch Fire is a brilliant exception now this next feature was",
    "start": "1393600",
    "end": "1399679"
  },
  {
    "text": "suggested by Greg young the godfa of the bill staff conference and I mucked it up",
    "start": "1399679",
    "end": "1408039"
  },
  {
    "text": "but it's too late now cuz I believe people have implemented two compilers so I can't change it and actually all the",
    "start": "1408039",
    "end": "1414320"
  },
  {
    "text": "best worst programming languages became the best worst programming languages by making silly decisions then implementing",
    "start": "1414320",
    "end": "1420039"
  },
  {
    "text": "them then shipping them then having hundreds of thousands of millions of lines of code written in them and then",
    "start": "1420039",
    "end": "1425640"
  },
  {
    "text": "going oh that was a really bad idea wasn't it yes thank you Brendan is it's even better to change it later well we",
    "start": "1425640",
    "end": "1433039"
  },
  {
    "text": "could change it in yes maybe in a point release definitely not a major version we'll do it in point one we'll switch it",
    "start": "1433039",
    "end": "1439159"
  },
  {
    "text": "back to what it was supposed to be but no Greg suggested um a very special character",
    "start": "1439159",
    "end": "1445559"
  },
  {
    "text": "that we could use and it was something to do with synchronous and asynchronous code and so forth but this is the",
    "start": "1445559",
    "end": "1451960"
  },
  {
    "text": "character that Greg suggested and this is the language that we're taking from Hello Greece if you watch skills matter",
    "start": "1451960",
    "end": "1458200"
  },
  {
    "text": "videos well done for for this particular character so Greece will tell you what",
    "start": "1458200",
    "end": "1463520"
  },
  {
    "text": "this is what is this character anyone want to have a guess it's a Greek",
    "start": "1463520",
    "end": "1468640"
  },
  {
    "text": "question mark yes ask me what the Greek semic codon looks like it looks like",
    "start": "1468640",
    "end": "1476279"
  },
  {
    "text": "that question mark semicolon semicolon question mark So I want to have the",
    "start": "1476279",
    "end": "1481399"
  },
  {
    "text": "Greek I've got to have the Greek question mark in the language the Greek question mark well it's a question mark",
    "start": "1481399",
    "end": "1487640"
  },
  {
    "text": "so we've got to put it somewhere conditional haven't we so we'll say that unless statements have to be terminated",
    "start": "1487640",
    "end": "1494399"
  },
  {
    "text": "with the Greek question mark there's the Greek question mark there you have to use that to termin your unless statements in much the same way that you",
    "start": "1494399",
    "end": "1501120"
  },
  {
    "text": "have to use a colon to terminate your class declaration line just because",
    "start": "1501120",
    "end": "1506640"
  },
  {
    "text": "there there's no reason for it okay so I mentioned Brendan and his",
    "start": "1506640",
    "end": "1514159"
  },
  {
    "text": "unfixable language because the entire internet is written in it I'm not going to mention his surname because um I'm",
    "start": "1514159",
    "end": "1522080"
  },
  {
    "text": "vaguely hoping that he won't realize I was talking about him and send the boys around so yes but JavaScript JavaScript",
    "start": "1522080",
    "end": "1530200"
  },
  {
    "text": "is a rich deep vein of terrible terrible decisions awful syntax absolutely",
    "start": "1530200",
    "end": "1535640"
  },
  {
    "text": "appalling runtime Behavior we could just strip mine JavaScript and combine it",
    "start": "1535640",
    "end": "1540799"
  },
  {
    "text": "with PHP and Ruby and Python and we would just have an abomination of a language but we have to be we have to",
    "start": "1540799",
    "end": "1547799"
  },
  {
    "text": "show restraint we can only take a small number of features so what we're going to take from JavaScript is equality",
    "start": "1547799",
    "end": "1555200"
  },
  {
    "text": "checking and type coercion this this is from JavaScript the good parts by",
    "start": "1555200",
    "end": "1560960"
  },
  {
    "text": "Douglas crockford which incidentally is that thick JavaScript the definitive",
    "start": "1560960",
    "end": "1566799"
  },
  {
    "text": "guide is that thing but in JavaScript uh double quote an empty",
    "start": "1566799",
    "end": "1573880"
  },
  {
    "text": "string is equal is not equal to the string zero but zero is equal to an empty",
    "start": "1573880",
    "end": "1582279"
  },
  {
    "text": "string and zero is also equal to the string zero which means that it's not",
    "start": "1582279",
    "end": "1589080"
  },
  {
    "text": "um so zero is equal to two things that don't equal each other thank you JavaScript yes type coercion brilliant",
    "start": "1589080",
    "end": "1596640"
  },
  {
    "text": "idea basically JavaScript was trying to do the opposite of what we're trying to do and achieved the same end result it",
    "start": "1596640",
    "end": "1603520"
  },
  {
    "text": "was trying to make a language that was really really forgiving and would just",
    "start": "1603520",
    "end": "1608720"
  },
  {
    "text": "figure out what it thought you meant because that looks like a good idea in",
    "start": "1608720",
    "end": "1614159"
  },
  {
    "text": "retrospect this is the same thing that gave us automatic semicolon on insertion",
    "start": "1614159",
    "end": "1619240"
  },
  {
    "text": "and look how well that's worked out we also down the bottom here is we have false equals undefined false equals null",
    "start": "1619240",
    "end": "1625399"
  },
  {
    "text": "but uh no false doesn't equal undefined and false doesn't equal null but null does equal undefined so yes null's",
    "start": "1625399",
    "end": "1633760"
  },
  {
    "text": "always good especially when you have more than one kind of null within a single programming language just genius",
    "start": "1633760",
    "end": "1640960"
  },
  {
    "text": "so I'm going to steal this but I'm going to take it a step further I don't think JavaScript type coercion is helpful",
    "start": "1640960",
    "end": "1646799"
  },
  {
    "text": "enough so this is BS lenss typescript uh types typescript BS lenss type coercion",
    "start": "1646799",
    "end": "1654399"
  },
  {
    "text": "that does equal zero and that's that's equal and that's equal but zero is also equal to the asy string zero um z e r o",
    "start": "1654399",
    "end": "1663399"
  },
  {
    "text": "That's case in sensitive uh 22 / 7 is equal to the Unicode character for",
    "start": "1663399",
    "end": "1669600"
  },
  {
    "text": "that's a slice of Pi actually it's it's not the Unicode character P it's just a piece of poly um but down at so",
    "start": "1669600",
    "end": "1678440"
  },
  {
    "text": "JavaScript because they mucked it up so badly had to introduce a whole new equality operator uh and they invented",
    "start": "1678440",
    "end": "1685320"
  },
  {
    "text": "the uh triple equals or the bang double equals to say strictly equals or",
    "start": "1685320",
    "end": "1690600"
  },
  {
    "text": "strictly doesn't equal don't do any type coercion for me I actually want to know whether these things are the same",
    "start": "1690600",
    "end": "1696320"
  },
  {
    "text": "somehow that helps me write more correct code so we got to have this kind of strict checking here so here is um bang",
    "start": "1696320",
    "end": "1704640"
  },
  {
    "text": "equals bang uh or the shopping trolley operator um and that is strict",
    "start": "1704640",
    "end": "1712240"
  },
  {
    "text": "inequality now strict equality I thought I could do equals bang equals and call",
    "start": "1712240",
    "end": "1717440"
  },
  {
    "text": "it like the Seesaw operator or something but then I thought well that's that's too complicated what you want to give",
    "start": "1717440",
    "end": "1722960"
  },
  {
    "text": "people when you create a programming language is a set of quality Primitives that they can build on so if you want to",
    "start": "1722960",
    "end": "1729559"
  },
  {
    "text": "do a strict equality check in VSS you have to negate the strict inequality",
    "start": "1729559",
    "end": "1735240"
  },
  {
    "text": "operator so the strict equality operator is effectively bang bang equals",
    "start": "1735240",
    "end": "1742360"
  },
  {
    "text": "bang or the person pushing a shopping trolley on single wheeled roller skates",
    "start": "1742760",
    "end": "1750880"
  },
  {
    "text": "operator so that's going in now let's talk about strings strings should have",
    "start": "1751120",
    "end": "1757159"
  },
  {
    "text": "been a solved problem ages and ages ago the funny thing the thing that I really like about strings is I was trying to",
    "start": "1757159",
    "end": "1764399"
  },
  {
    "text": "explain to my wife who is not a coder about a problem I was having with some code and I kept saying string and it",
    "start": "1764399",
    "end": "1769919"
  },
  {
    "text": "turns out that people who don't write code for a living have no idea what string means other than the stuff that",
    "start": "1769919",
    "end": "1777000"
  },
  {
    "text": "comes in Bulls and entertains cats um and and there was that that's the point",
    "start": "1777000",
    "end": "1783080"
  },
  {
    "text": "at which I realized that Google is stalking me because when I go to Google and search for string on my laptop it",
    "start": "1783080",
    "end": "1789240"
  },
  {
    "text": "takes me to the msdn page for the c.net string class whereas when I use my",
    "start": "1789240",
    "end": "1794440"
  },
  {
    "text": "wife's laptop and I search for string it takes me to the Amazon parcel packing",
    "start": "1794440",
    "end": "1800360"
  },
  {
    "text": "page um so yes that's quite handy actually I couldn't live without Google",
    "start": "1800360",
    "end": "1805399"
  },
  {
    "text": "stalking me but strings the best language that you can",
    "start": "1805399",
    "end": "1811760"
  },
  {
    "text": "use to steal from for Strings is 90 C++ so in C you had uh a pointer to char",
    "start": "1811760",
    "end": "1822799"
  },
  {
    "text": "or an array of char which is essentially two ways of saying the same thing and it depends on whether you want to sound",
    "start": "1822799",
    "end": "1828559"
  },
  {
    "text": "clever in which case you use a pointer or just admit that it's an array in which case you use square brackets then",
    "start": "1828559",
    "end": "1835120"
  },
  {
    "text": "C++ came along and strings just exploded and we had W strings and LP strings and",
    "start": "1835120",
    "end": "1842200"
  },
  {
    "text": "lpw strings and LPL strings and and all different kinds of string and and even now if you try and write com code on",
    "start": "1842200",
    "end": "1849120"
  },
  {
    "text": "Windows in C++ you will have to be marshalling B strings to W strings to to",
    "start": "1849120",
    "end": "1855279"
  },
  {
    "text": "MFC strings um and all these different things uh so I want that kind of",
    "start": "1855279",
    "end": "1861120"
  },
  {
    "text": "complexity but I also I want to give people something in exchange for that complexity so here are the available",
    "start": "1861120",
    "end": "1867559"
  },
  {
    "text": "strings in BS so up at the top here we have uh single quotes around a string",
    "start": "1867559",
    "end": "1875120"
  },
  {
    "text": "that is an asy string that is encoded as asy there are 127 characters plus a zero",
    "start": "1875120",
    "end": "1881840"
  },
  {
    "text": "that you can have in single quotes so none of your fancy nonsense with with",
    "start": "1881840",
    "end": "1887679"
  },
  {
    "text": "your Unicode characters if you use two single quotes",
    "start": "1887679",
    "end": "1892960"
  },
  {
    "text": "at either end then that's an ansy string uh which is still the default for the",
    "start": "1892960",
    "end": "1898679"
  },
  {
    "text": "windows character set if you use uh single double quotes",
    "start": "1898679",
    "end": "1904960"
  },
  {
    "text": "explaining this is going to be the most fun bit of teaching BS when the course starts next year if you use single",
    "start": "1904960",
    "end": "1911039"
  },
  {
    "text": "double quotes then you get dbcs because we need compatibility with dbcs systems",
    "start": "1911039",
    "end": "1916919"
  },
  {
    "text": "if you use double quotes then you have ebcd I because we need compatibility",
    "start": "1916919",
    "end": "1923279"
  },
  {
    "text": "with Cobalt running mainframes that are still in operation in the financial sector and if you can't sell your",
    "start": "1923279",
    "end": "1928760"
  },
  {
    "text": "language into the financial sector then why did you even bother in the first place",
    "start": "1928760",
    "end": "1935159"
  },
  {
    "text": "then because none of these will support the sort of advanced character sets that the modern world needs where you've got",
    "start": "1935159",
    "end": "1942159"
  },
  {
    "text": "people in China writing emails to people in in Saudi Arabia and they both to be",
    "start": "1942159",
    "end": "1948240"
  },
  {
    "text": "able to use all their wonderful alphabets and everything else and so I",
    "start": "1948240",
    "end": "1953440"
  },
  {
    "text": "thought I was going to make uh UTF 32 this is uh a European mainly French uh",
    "start": "1953440",
    "end": "1961399"
  },
  {
    "text": "string quotes here that's the opening quote that's the closing quote I like those because they're different um and",
    "start": "1961399",
    "end": "1967399"
  },
  {
    "text": "and you can actually tell where the string starts and where it ends but that's not a UTF 32 string because UTF",
    "start": "1967399",
    "end": "1972600"
  },
  {
    "text": "32 only allows for uh something in the region of Billy millions and billions of",
    "start": "1972600",
    "end": "1978679"
  },
  {
    "text": "characters now this is UTF 256 which I have also invented this is a side",
    "start": "1978679",
    "end": "1983960"
  },
  {
    "text": "product of inventing BS um I've invented the UTF 256 which actually has enough",
    "start": "1983960",
    "end": "1990919"
  },
  {
    "text": "character spaces in it each of the characters is represented by a",
    "start": "1990919",
    "end": "1996240"
  },
  {
    "text": "256bit number U that means that you could actually have a character for every atom in the solar system um the",
    "start": "1996240",
    "end": "2004519"
  },
  {
    "text": "idea though is that we are going to uh uh there's a website that's UTF",
    "start": "2004519",
    "end": "2012158"
  },
  {
    "text": "256.50 6 characters and then someone can just create a string and the compiler will have to go to the website and",
    "start": "2014399",
    "end": "2021279"
  },
  {
    "text": "download all those characters and incorporate them into your program so that it can run offline um and and if",
    "start": "2021279",
    "end": "2029080"
  },
  {
    "text": "the website happens to be down because Microsoft have crashed a Z again then we",
    "start": "2029080",
    "end": "2034279"
  },
  {
    "text": "will uh we will just put out a compiler error that makes it look like your",
    "start": "2034279",
    "end": "2039600"
  },
  {
    "text": "fault double French quotes at the start and the end is exactly the same but with",
    "start": "2039600",
    "end": "2044679"
  },
  {
    "text": "string interpolation because string interpolation is awesome and every language should have it",
    "start": "2044679",
    "end": "2051800"
  },
  {
    "text": "yes what can we take from vb10 what a VB6 just VB generally actually okay here",
    "start": "2051800",
    "end": "2059320"
  },
  {
    "text": "are my two favorite things about uh Visual Basic one round brackets round",
    "start": "2059320",
    "end": "2067079"
  },
  {
    "text": "parentheses as array indexes which would be okay if",
    "start": "2067079",
    "end": "2072280"
  },
  {
    "text": "they'd used square brackets when they were calling a function but they didn't they used round parentheses for those as",
    "start": "2072280",
    "end": "2077839"
  },
  {
    "text": "well so you basically it's like they didn't know the square parentheses were there they just went oh no it's right",
    "start": "2077839",
    "end": "2083960"
  },
  {
    "text": "down there by the enter key people will have to press the it'll be too complicated let's just we'll use the",
    "start": "2083960",
    "end": "2089240"
  },
  {
    "text": "same thing so you can't tell the difference between accessing or calling a function and accessing an array also",
    "start": "2089240",
    "end": "2096000"
  },
  {
    "text": "though that in so this is declaring an array of 10 integers Visual Basic 6 was in the era",
    "start": "2096000",
    "end": "2105680"
  },
  {
    "text": "when we started hitting 32bit we had Windows 95 with its 16bit fallback mode",
    "start": "2105680",
    "end": "2111640"
  },
  {
    "text": "but Windows 95 and Windows 98 were basically 32-bit operating systems",
    "start": "2111640",
    "end": "2116680"
  },
  {
    "text": "Visual Basic 6 came out when Windows 95 and Windows 98 were in widespread use so",
    "start": "2116680",
    "end": "2123160"
  },
  {
    "text": "was the integer a 32-bit integer no it wasn't it was 16bit I love the fact that that will cause a",
    "start": "2123160",
    "end": "2129720"
  },
  {
    "text": "massive overflow but 16bit it's just it's too easy you know",
    "start": "2129720",
    "end": "2136920"
  },
  {
    "text": "it's too easy to to work out what the maximum value of a 16bit integer is so I",
    "start": "2136920",
    "end": "2142200"
  },
  {
    "text": "think BS Lang uh BS is going to have 17 bit integers yes we're going to have 17 bit",
    "start": "2142200",
    "end": "2148560"
  },
  {
    "text": "integers uh because we can because I just decided um of course this is",
    "start": "2148560",
    "end": "2154240"
  },
  {
    "text": "actually going to take up 32 bits of space and we we will just have 15 bits",
    "start": "2154240",
    "end": "2159520"
  },
  {
    "text": "sat there unable to do anything but I'm sure enterprising developers will be able to come up with something fun to",
    "start": "2159520",
    "end": "2165319"
  },
  {
    "text": "keep in those 15 bits probably executable code which would be",
    "start": "2165319",
    "end": "2172200"
  },
  {
    "text": "good so we we we just Mak this a",
    "start": "2172720",
    "end": "2177839"
  },
  {
    "text": "wonderful mystery tour through the world of programming um and taking features from everywhere so what haven't we done",
    "start": "2177839",
    "end": "2184520"
  },
  {
    "text": "we touched on C and C++ briefly but C and C++ have a feature that is just far",
    "start": "2184520",
    "end": "2189960"
  },
  {
    "text": "too good every programming language that wants to ever annoy a programmer should",
    "start": "2189960",
    "end": "2195200"
  },
  {
    "text": "take this feature from C and C++ I remember the C Pascal Wars and I",
    "start": "2195200",
    "end": "2204680"
  },
  {
    "text": "remember that one of the arguments that the C programmers actually used to use",
    "start": "2204680",
    "end": "2210200"
  },
  {
    "text": "was well if you use C's macro preprocessor you can actually make it",
    "start": "2210200",
    "end": "2215280"
  },
  {
    "text": "compiled Pascal then therefore it is better than Pascal which under no",
    "start": "2215280",
    "end": "2220880"
  },
  {
    "text": "circumstances will compile C this apparently was a good thing that you",
    "start": "2220880",
    "end": "2227720"
  },
  {
    "text": "could do this you could basically Define begin to be open brace and end to be",
    "start": "2227720",
    "end": "2232920"
  },
  {
    "text": "closed brace while you were at it you might as well Define say to be printland",
    "start": "2232920",
    "end": "2238200"
  },
  {
    "text": "and then you can do this here which is valid C given those things there and",
    "start": "2238200",
    "end": "2243560"
  },
  {
    "text": "also valid Pascal if you leave them out it's completely brilliant why nobody does this more I just don't know so I'm",
    "start": "2243560",
    "end": "2251720"
  },
  {
    "text": "having macros but C macros they get you can get really really complicated with",
    "start": "2251720",
    "end": "2257480"
  },
  {
    "text": "them if they're not complicated enough then you've got STL STL is this huge overblown templating language that C++",
    "start": "2257480",
    "end": "2264760"
  },
  {
    "text": "people use but you know I want to land somewhere in the middle so I'm going to do macros using regular",
    "start": "2264760",
    "end": "2272040"
  },
  {
    "text": "Expressions specifically macros using VI regular expressions",
    "start": "2272040",
    "end": "2277960"
  },
  {
    "text": "uh so cuz some people when that's a weird looking regular expression but those who know VI will know that you say",
    "start": "2277960",
    "end": "2284319"
  },
  {
    "text": "uh colon percent uh s and then you say slash the thing you're looking for Slash",
    "start": "2284319",
    "end": "2290280"
  },
  {
    "text": "the thing you want to replace it with Slash and then if you want you put the I",
    "start": "2290280",
    "end": "2295560"
  },
  {
    "text": "and G and so forth on the end there so this is is um my macro language in in BS",
    "start": "2295560",
    "end": "2303400"
  },
  {
    "text": "we're going to say you can do anything that you can do in a oneline regular expression which is basically anything um just look",
    "start": "2303400",
    "end": "2311200"
  },
  {
    "text": "at some of the stack Overflow answers on how to validate an email address using regular Expressions not the ones that",
    "start": "2311200",
    "end": "2317599"
  },
  {
    "text": "say don't that's a terrible idea look at the ones that go here's a regular expression that will do it aren't I clever and then someone comes along and",
    "start": "2317599",
    "end": "2323880"
  },
  {
    "text": "knocks two characters off and goes it still works so yes we're having these this references it does look look back",
    "start": "2323880",
    "end": "2331760"
  },
  {
    "text": "reference there see there's a back reference back SL1 VI style back reference so I can actually say my",
    "start": "2331760",
    "end": "2338640"
  },
  {
    "text": "something thing here's my my paren to say I'm capturing the contents of this",
    "start": "2338640",
    "end": "2344359"
  },
  {
    "text": "thing here um my something thing and then replace that with class whatever it",
    "start": "2344359",
    "end": "2349800"
  },
  {
    "text": "was colon and so I can it has to end with colon there as well you see and then that has to be the end of the line",
    "start": "2349800",
    "end": "2356079"
  },
  {
    "text": "and then you say my greeter thing and then the pre-compiler the the pre-processor comes along and turns that",
    "start": "2356079",
    "end": "2361599"
  },
  {
    "text": "into class greeter colon and then it carries on on compiling",
    "start": "2361599",
    "end": "2367640"
  },
  {
    "text": "like three times in a row can you do it in in standard regular Expressions then",
    "start": "2367640",
    "end": "2372839"
  },
  {
    "text": "it will work here yes it I I'm very very proud of this particular feature basically my My",
    "start": "2372839",
    "end": "2381160"
  },
  {
    "text": "ultimate aim for this is that you should be able to compile Pascal um because apparently that is the",
    "start": "2381160",
    "end": "2387800"
  },
  {
    "text": "measure of which is the best programming language in the world is can you somehow",
    "start": "2387800",
    "end": "2392880"
  },
  {
    "text": "get it to compile Pascal if you can then you win",
    "start": "2392880",
    "end": "2398640"
  },
  {
    "text": "from lisp this is more of a community thing uh from lisp we are merely as a",
    "start": "2398640",
    "end": "2405000"
  },
  {
    "text": "community going to take that really annoying way they have of thinking",
    "start": "2405000",
    "end": "2410520"
  },
  {
    "text": "they're better than everybody else just because they can keep their opening",
    "start": "2410520",
    "end": "2415880"
  },
  {
    "text": "parens and their closing parens uh together and by the way if you're a",
    "start": "2415880",
    "end": "2421920"
  },
  {
    "text": "closure developer and you're offended by that don't be it's not a lisp",
    "start": "2421920",
    "end": "2428000"
  },
  {
    "text": "no it isn't stop arguing if you wanted to argue you should have come",
    "start": "2428000",
    "end": "2434920"
  },
  {
    "text": "lazy oh they never going to put this on the website it's brilliant okay so I want some feedback from you people um on",
    "start": "2435880",
    "end": "2443440"
  },
  {
    "text": "on some design decisions that I I can't really make up my mind about should we be static or dynamic static type",
    "start": "2443440",
    "end": "2452079"
  },
  {
    "text": "languages they're good you get lots of compile time checking Dynamic languages they're good you can throw a bunch of",
    "start": "2452079",
    "end": "2457920"
  },
  {
    "text": "code out there and and it'll just work as long as you've written at least 10",
    "start": "2457920",
    "end": "2463640"
  },
  {
    "text": "times as many lines of code in your test Suite as you have in your implementation side of things but you know that's",
    "start": "2463640",
    "end": "2470960"
  },
  {
    "text": "that's what you want is is lots and lots of tests that are there merely to make up for the fact that you don't have a",
    "start": "2470960",
    "end": "2477119"
  },
  {
    "text": "statically typed compiler something really good here so static typing is",
    "start": "2477119",
    "end": "2483200"
  },
  {
    "text": "that may have to go into a future version I'm hoping that you are the one person in whose voice projects well",
    "start": "2483200",
    "end": "2489160"
  },
  {
    "text": "enough that the microphone will have picked all of that up do you have any way of telling from your equalizer",
    "start": "2489160",
    "end": "2494200"
  },
  {
    "text": "whether that got picked up well basically basically what my friend Dylan shared there was variables that are",
    "start": "2494200",
    "end": "2501200"
  },
  {
    "text": "Dynamic until you've accessed them three times then they become statically typed as to whatever they were when you last",
    "start": "2501200",
    "end": "2506800"
  },
  {
    "text": "accessed them um because if you access a variable three times that's Enterprise and Enterprise need static typing no",
    "start": "2506800",
    "end": "2513200"
  },
  {
    "text": "that's much better than what I came up with um and what Facebook came up with with incidentally which is gradual",
    "start": "2513200",
    "end": "2519079"
  },
  {
    "text": "typing um which is where you sort of say well okay you can you can say what type",
    "start": "2519079",
    "end": "2524920"
  },
  {
    "text": "something is but you don't have to and if you don't say what type it is it's Dynamic and if you do say what type it is it's sort of static unless you cast",
    "start": "2524920",
    "end": "2532920"
  },
  {
    "text": "it to a different type or indeed cast it back to a dynamic type in which case it becomes Dynamic again that's Facebook",
    "start": "2532920",
    "end": "2540520"
  },
  {
    "text": "call this gradual typing um Microsoft with typescript call it optional typing",
    "start": "2540520",
    "end": "2545880"
  },
  {
    "text": "I think that's what DART calls it the Google language as well but Facebook call it gradual typing and the idea is",
    "start": "2545880",
    "end": "2552440"
  },
  {
    "text": "that you gradually go through your uh code base just adding types KN I haven't",
    "start": "2552440",
    "end": "2557599"
  },
  {
    "text": "got anything to do I think I'll go through and add some types to the code base oh I've broken everything so I'm",
    "start": "2557599",
    "end": "2563240"
  },
  {
    "text": "going to have gradual types in BS um this is how we're going to do gradual types we're going to have a keyword",
    "start": "2563240",
    "end": "2569640"
  },
  {
    "text": "keywords are good we didn't have enough keyword so far I'm introducing the is probably a keyword so yes we can say",
    "start": "2569640",
    "end": "2576400"
  },
  {
    "text": "euro thing is probably a string yes it is or it may not be but you know if it's",
    "start": "2576400",
    "end": "2582040"
  },
  {
    "text": "not then maybe crash I don't know do something with it so should we be scripted or compiled",
    "start": "2582040",
    "end": "2591559"
  },
  {
    "text": "this is a brilliant one scripted languages they're great and and they promote open source because you can put",
    "start": "2591559",
    "end": "2597520"
  },
  {
    "text": "the code out there and you can't stop other people from from taking the code and making two changes to it and then",
    "start": "2597520",
    "end": "2604079"
  },
  {
    "text": "realizing that actually there was a business there and going off and becoming billionaires and going to the",
    "start": "2604079",
    "end": "2609160"
  },
  {
    "text": "moon and leaving you behind going ha MIT license that yes and yes so scripting",
    "start": "2609160",
    "end": "2615640"
  },
  {
    "text": "languages but then compiled languages you know they're they're really really really fast except intercal by the way",
    "start": "2615640",
    "end": "2621520"
  },
  {
    "text": "which was a it was a properly compiled language it compiled to machine code but it compiled to very very slow machine",
    "start": "2621520",
    "end": "2628079"
  },
  {
    "text": "code they wrote the Civ of Erath in intercal and uh they wrote the same the",
    "start": "2628079",
    "end": "2635040"
  },
  {
    "text": "same algorithm in C and the version on whatever it was like a PDP 11 or",
    "start": "2635040",
    "end": "2640079"
  },
  {
    "text": "something took half a second to do all the prime numbers in up to 16 bits and",
    "start": "2640079",
    "end": "2646960"
  },
  {
    "text": "the intercal version took 17 hours to run the same algorithm despite being",
    "start": "2646960",
    "end": "2652200"
  },
  {
    "text": "compiled into machine code it just did an awful lot of error checking while it was running not least to make sure that",
    "start": "2652200",
    "end": "2659079"
  },
  {
    "text": "you'd said please um but yes actually the final results of that uh competition",
    "start": "2659079",
    "end": "2665400"
  },
  {
    "text": "are not yet in because the 1.2 jvm is still spinning up B Java joke it's the only one that",
    "start": "2665400",
    "end": "2674400"
  },
  {
    "text": "was in there particularly so I I think we should go for for semic compiled um",
    "start": "2674400",
    "end": "2680160"
  },
  {
    "text": "this we should have bite code we should generate bite code CU then we can distribute that all over the place it's",
    "start": "2680160",
    "end": "2686200"
  },
  {
    "text": "got the security that you can distribute it and nobody will be able to to reverse engineer it back into the original",
    "start": "2686200",
    "end": "2692640"
  },
  {
    "text": "source code although I think given what we're making the original source code look like that's not going to be a",
    "start": "2692640",
    "end": "2698119"
  },
  {
    "text": "problem if they do manage to reverse engineer it into the original source code it will probably make them cry and",
    "start": "2698119",
    "end": "2703800"
  },
  {
    "text": "run away and seek a pastoral existence on an island somewhere we're going to do",
    "start": "2703800",
    "end": "2708960"
  },
  {
    "text": "semic compiled and obviously uh because every language that exists today has to compile to ecmascript 3 so we will also",
    "start": "2708960",
    "end": "2716280"
  },
  {
    "text": "Target ecmascript 3 so that we can run in the",
    "start": "2716280",
    "end": "2721359"
  },
  {
    "text": "browser should it have a VM or should it be native I'm I'm tending to Ward having",
    "start": "2721359",
    "end": "2728160"
  },
  {
    "text": "native code where the VM is actually compiled in to every single version of",
    "start": "2728160",
    "end": "2734160"
  },
  {
    "text": "the program that you release and then I found out that basically go has already done that so",
    "start": "2734160",
    "end": "2740319"
  },
  {
    "text": "it's not a new idea uh but I'm going to do it anyway because bandwidth is",
    "start": "2740319",
    "end": "2745480"
  },
  {
    "text": "expensive and I get royalties so yes we're going to do that memory management",
    "start": "2745480",
    "end": "2751640"
  },
  {
    "text": "though so we're going to have a VM inside the executable when you start it it will create the VM and then load the",
    "start": "2751640",
    "end": "2758640"
  },
  {
    "text": "jit into the VM and then it will load the bik code and then it will jit the bike code into really really terrible",
    "start": "2758640",
    "end": "2764040"
  },
  {
    "text": "native machine code um but then we have to worry about memory management should we have garbage collection should we",
    "start": "2764040",
    "end": "2770520"
  },
  {
    "text": "have automatic reference counting Counting should we have an enormous argument that drags on for many many",
    "start": "2770520",
    "end": "2776359"
  },
  {
    "text": "years in Google Groups about which is better with the the Java and C guys on",
    "start": "2776359",
    "end": "2782119"
  },
  {
    "text": "one side and the Apple guys on the other side well yes that's that's lots of fun but actually what's the most fun if you",
    "start": "2782119",
    "end": "2788800"
  },
  {
    "text": "really hate developers is manual memory management we've got to have manual memory management we're going to have",
    "start": "2788800",
    "end": "2796040"
  },
  {
    "text": "delete we are not only going to have delete though we are going to make you",
    "start": "2796040",
    "end": "2801400"
  },
  {
    "text": "delete everything otherwise your program will just leak memory so we're not going to have the idea that a variable can go",
    "start": "2801400",
    "end": "2807640"
  },
  {
    "text": "out of scope and we should just know that it is no longer required also we're not going to have a stack I don't like",
    "start": "2807640",
    "end": "2814520"
  },
  {
    "text": "Stacks they they upset me we're just going to have a heap everything's going to go onto the",
    "start": "2814520",
    "end": "2819559"
  },
  {
    "text": "Heap arguments to to functions they're going to go on the Heap which means you have to delete them when you're finished",
    "start": "2819559",
    "end": "2825520"
  },
  {
    "text": "delete by the way has a capital D because it's an important thing to do so we need that in there to say that is",
    "start": "2825520",
    "end": "2832400"
  },
  {
    "text": "that is an important thing so you have to delete the parameters that were passed in and you have to delete",
    "start": "2832400",
    "end": "2837599"
  },
  {
    "text": "anything that you create while you were doing things and obviously you have to delete any objects that you create",
    "start": "2837599",
    "end": "2845000"
  },
  {
    "text": "yourself I'm not quite done this is a new feature that has been added based on",
    "start": "2845000",
    "end": "2850640"
  },
  {
    "text": "audience feedback when I did the talk in Lithuania uh someone I said what are the",
    "start": "2850640",
    "end": "2856160"
  },
  {
    "text": "really really terrible ideas that that we could Implement in this and someone said line",
    "start": "2856160",
    "end": "2862319"
  },
  {
    "text": "numbers and then someone else said in increments of 42 because Douglas Adams and I thought",
    "start": "2862319",
    "end": "2871000"
  },
  {
    "text": "that was great but then that it it becomes slightly difficult to to enforce",
    "start": "2871000",
    "end": "2876640"
  },
  {
    "text": "like line numbers and anyway people would just find a way of automatically putting the line numbers they probably",
    "start": "2876640",
    "end": "2882040"
  },
  {
    "text": "come up with a macro written in regular expressions with some kind of incrementing thing in",
    "start": "2882040",
    "end": "2888240"
  },
  {
    "text": "there that just replaced carrot with a line number and and get around the requirement that way and I don't want",
    "start": "2888240",
    "end": "2894960"
  },
  {
    "text": "people to be able to do things that save them time that's that's not what I'm here for and I also realized that I",
    "start": "2894960",
    "end": "2901680"
  },
  {
    "text": "hadn't done Loops i' done conditionals with un less conditionals are a solved problem but I hadn't done Loops you",
    "start": "2901680",
    "end": "2907200"
  },
  {
    "text": "can't have a programming language without Loops you could have recursive functions that call themselves and absolutely ban tail call optimization",
    "start": "2907200",
    "end": "2914359"
  },
  {
    "text": "that would be fun um stack Overflow errors if you try and loop more than 32,767 times but no because we've missed",
    "start": "2914359",
    "end": "2923440"
  },
  {
    "text": "the most important keyword in the whole history of programming so we're going to have line numbers",
    "start": "2923440",
    "end": "2929799"
  },
  {
    "text": "and because if it's broke don't fix it and if it ain't broke fix it till it",
    "start": "2929799",
    "end": "2935440"
  },
  {
    "text": "breaks then run away and there's one thing that is not",
    "start": "2935440",
    "end": "2940640"
  },
  {
    "text": "broke and it's line numbers and goto hello goto this is how you do",
    "start": "2940640",
    "end": "2950920"
  },
  {
    "text": "loops in BS you have your line only lines that you want to go to need to",
    "start": "2950920",
    "end": "2957520"
  },
  {
    "text": "start with a number and they have to start with a number that is an increment a multiple of 42 and throughout the course of your",
    "start": "2957520",
    "end": "2964839"
  },
  {
    "text": "code base and I don't care if your code base is 10 million lines of very very complicated Enterprise code they must be",
    "start": "2964839",
    "end": "2971640"
  },
  {
    "text": "contiguous it must go 42 84 126 up to whatever it",
    "start": "2971640",
    "end": "2979839"
  },
  {
    "text": "is and if two people add one on the end and they both check in at the same time",
    "start": "2979839",
    "end": "2986400"
  },
  {
    "text": "then you will get a compiler error and the compiler error will say attempted to",
    "start": "2986400",
    "end": "2991520"
  },
  {
    "text": "reassign a constant which it will also say for half",
    "start": "2991520",
    "end": "2997119"
  },
  {
    "text": "a dozen other things that I haven't decided yet because I don't want to make it too easy otherwise someone will just",
    "start": "2997119",
    "end": "3003240"
  },
  {
    "text": "come along and write a lint BS lint that's the person who writes BS",
    "start": "3003240",
    "end": "3008839"
  },
  {
    "text": "lint is just going to spoil all my fun so we say 42 Echo thing uh here and then",
    "start": "3008839",
    "end": "3015760"
  },
  {
    "text": "go to 42 unless unless minus minus times right",
    "start": "3015760",
    "end": "3022920"
  },
  {
    "text": "see we have to put things like the prefix decrement operator in there the prefixed decrement uni operator because",
    "start": "3022920",
    "end": "3029880"
  },
  {
    "text": "if you don't put some sensible things in there people won't think it's a real programming language so so this is part",
    "start": "3029880",
    "end": "3036760"
  },
  {
    "text": "of the Honeypot approach here so we pass in the number of times you want them to",
    "start": "3036760",
    "end": "3042079"
  },
  {
    "text": "say the thing and then we go around this Loop and we say unless uh unless we decrement times and",
    "start": "3042079",
    "end": "3049839"
  },
  {
    "text": "then that comes to uh doesn't definitely not equal zero Greek question Mark at which point",
    "start": "3049839",
    "end": "3058760"
  },
  {
    "text": "it it will exit and then and then we delete thing",
    "start": "3058760",
    "end": "3063960"
  },
  {
    "text": "and times as well because times is a reference we don't have value types we",
    "start": "3063960",
    "end": "3069040"
  },
  {
    "text": "have reference types everything is nullable all the time um and so times is",
    "start": "3069040",
    "end": "3074599"
  },
  {
    "text": "is definitely a nullable 17 bit integer although we haven't actually said that",
    "start": "3074599",
    "end": "3079680"
  },
  {
    "text": "there because there isn't room to write is probably a integer um I don't should",
    "start": "3079680",
    "end": "3085640"
  },
  {
    "text": "should there be two operators is probably uh and is probably an and then it depends on what I think there should",
    "start": "3085640",
    "end": "3091720"
  },
  {
    "text": "oh yes oh yes definitely um so we can have we can have gram grammatical errors",
    "start": "3091720",
    "end": "3097200"
  },
  {
    "text": "as well and you come along and rename a variable it goes refactor and then Jet brains will have to write write a",
    "start": "3097200",
    "end": "3102599"
  },
  {
    "text": "refactor where if you rename the variable so it now starts with a consonant it has to go through and change all the is probably",
    "start": "3102599",
    "end": "3109680"
  },
  {
    "text": "is word does have a grammar checker I think that's that's going to be the key",
    "start": "3109680",
    "end": "3115000"
  },
  {
    "text": "here so this this my friends is now the worst",
    "start": "3115000",
    "end": "3121280"
  },
  {
    "text": "programming language ever I submit that it is worse than Mal",
    "start": "3121280",
    "end": "3128119"
  },
  {
    "text": "bulge and intercal and brain and and and all these languages because it actually",
    "start": "3128119",
    "end": "3135240"
  },
  {
    "text": "it looks vaguely like a programming language that you might use you have to",
    "start": "3135240",
    "end": "3140720"
  },
  {
    "text": "actually you you could actually see someone coming along and downloading this and going oh I like this and I particularly like the fact you have to",
    "start": "3140720",
    "end": "3146880"
  },
  {
    "text": "use Microsoft Word 2003 to edit it I'm going to go and create a Windows XP VM",
    "start": "3146880",
    "end": "3152839"
  },
  {
    "text": "so that I can run Microsoft Word 2003 so that I can edit this file and then I'll go and get the VBA macro that contains",
    "start": "3152839",
    "end": "3160160"
  },
  {
    "text": "the compiler um but yes they they would come along they would go this this looks like an interesting language and by the",
    "start": "3160160",
    "end": "3166440"
  },
  {
    "text": "time they realized that it was a terrible bear trap covered with rust and",
    "start": "3166440",
    "end": "3171960"
  },
  {
    "text": "poison and used needles designed specifically to clamp on their leg in",
    "start": "3171960",
    "end": "3177200"
  },
  {
    "text": "the most unpleasant possible way it would be too late cuz they would already be in production",
    "start": "3177200",
    "end": "3183799"
  },
  {
    "text": "so there there are Twitter accounts there are people writing compilers because it turns out that you there is",
    "start": "3183799",
    "end": "3189760"
  },
  {
    "text": "nothing you can do that is so unutterably stupid that people won't waste their time on it um so yes before",
    "start": "3189760",
    "end": "3198960"
  },
  {
    "text": "I finish though uh this should be an interactive thing does anyone have a feature from from a language that they",
    "start": "3198960",
    "end": "3205799"
  },
  {
    "text": "use on a day-to-day basis or have used in the past that they would like to see go into BS that they think could improve",
    "start": "3205799",
    "end": "3213040"
  },
  {
    "text": "it and by improve it I mean make it an even bigger ball of suck anybody yes I",
    "start": "3213040",
    "end": "3220839"
  },
  {
    "text": "bet you do yes that given the um what you would",
    "start": "3220839",
    "end": "3226559"
  },
  {
    "text": "imagine uh were the aims of the Unicode project given its name the fact that they're on version six just tells you",
    "start": "3226559",
    "end": "3234079"
  },
  {
    "text": "everything you need to know about modern computer science brilliant wonderful people um so",
    "start": "3234079",
    "end": "3240960"
  },
  {
    "text": "yes I did have one person one person who was implementing a compiler came to me with a question on case sensitivity in",
    "start": "3240960",
    "end": "3247839"
  },
  {
    "text": "identifier naming um and it was decided that really it's only ever the first",
    "start": "3247839",
    "end": "3253440"
  },
  {
    "text": "character of of an identifier name that people use where they need it to be case sensitive it's it's Pascal case or camel",
    "start": "3253440",
    "end": "3260280"
  },
  {
    "text": "case so only the first character of every identifier name is actually case sensitive the rest of it is is case",
    "start": "3260280",
    "end": "3266680"
  },
  {
    "text": "insensitive I hope that clears that up yes Greg I'm surprised this has for the",
    "start": "3266680",
    "end": "3272400"
  },
  {
    "text": "people at home who couldn't be bothered that was uh why don't we force the",
    "start": "3272400",
    "end": "3277760"
  },
  {
    "text": "developer much like the struggling llang developer hello Rob um",
    "start": "3277760",
    "end": "3283319"
  },
  {
    "text": "to to declare the arity of of every single method that they declare",
    "start": "3283319",
    "end": "3289440"
  },
  {
    "text": "absolutely not we can't do pattern matching pattern matching is far too good but um yes current oh hton c any",
    "start": "3289440",
    "end": "3296599"
  },
  {
    "text": "method that might Pon Catch Fire should declare at the front that it might Pon Catch Fire you can't see it oh actually",
    "start": "3296599",
    "end": "3303319"
  },
  {
    "text": "it's missing from this one here um but you have uh checked not exceptions so",
    "start": "3303319",
    "end": "3308920"
  },
  {
    "text": "any method that definitely won't throw an exception has to specifically say it won't throw an exception it is though",
    "start": "3308920",
    "end": "3315200"
  },
  {
    "text": "then acceptable for it to throw an exception um as as long as it does it",
    "start": "3315200",
    "end": "3322200"
  },
  {
    "text": "indirectly I this but it's not mine yes yes I'm sor sorry I called something and it threw an exception someone else but",
    "start": "3322359",
    "end": "3329880"
  },
  {
    "text": "yes um yes Halton Catch Fire uh unless you've explicitly said you won't Halt",
    "start": "3329880",
    "end": "3335319"
  },
  {
    "text": "and Catch Fire unless you really feel like it in which case you can and and the programmer should definitely check",
    "start": "3335319",
    "end": "3341920"
  },
  {
    "text": "for that just to be on the safe side about interface the I unknown inter oh",
    "start": "3341920",
    "end": "3349000"
  },
  {
    "text": "well we haven't got interfaces yet I think we we should definitely have interfaces I'm slightly concerned about",
    "start": "3349000",
    "end": "3354480"
  },
  {
    "text": "how we'd say that a class implements an inter place since we've already used the colon character um well Greg I'm sure",
    "start": "3354480",
    "end": "3360960"
  },
  {
    "text": "Greg wouldn't mind going off in like linear a yes and and that's what this",
    "start": "3360960",
    "end": "3366760"
  },
  {
    "text": "class does to this interface there we go yes no and and um yes and the only way",
    "start": "3366760",
    "end": "3372359"
  },
  {
    "text": "to interrupt with any other language should be through Comm um and the I unknown or I unknown to",
    "start": "3372359",
    "end": "3380119"
  },
  {
    "text": "interface in Welsh no because my mother-in-law is Welsh",
    "start": "3380119",
    "end": "3387400"
  },
  {
    "text": "there's nothing wrong with Welsh It's a Wonderful language and I absolutely believe it always existed and they",
    "start": "3387400",
    "end": "3393520"
  },
  {
    "text": "didn't just make it up to Annoy Us yes thing I love is is when you see Welsh",
    "start": "3393520",
    "end": "3398839"
  },
  {
    "text": "road signs in Welsh and you translate it and it says I'm currently out of the",
    "start": "3398839",
    "end": "3404880"
  },
  {
    "text": "office any mention that no I forgot to mention that um the the the signifier",
    "start": "3404920",
    "end": "3411680"
  },
  {
    "text": "for a comment is five spaces um so yes and at the end of the",
    "start": "3411680",
    "end": "3416839"
  },
  {
    "text": "line you can put five spaces then anything after that is a comment mandatory sorry I thought the comments",
    "start": "3416839",
    "end": "3422359"
  },
  {
    "text": "were mandatory I I don't like the idea of having mandatory comments because I worry that people will use that to put",
    "start": "3422359",
    "end": "3428160"
  },
  {
    "text": "useful information in the code um so I I want them to be optional um and and a",
    "start": "3428160",
    "end": "3434960"
  },
  {
    "text": "real pain in the backside to type that's quite good so you have a blank line but it's actually five spaces",
    "start": "3434960",
    "end": "3442240"
  },
  {
    "text": "and then a whole bunch of whatever the hell you want and then another blank line with five spaces you know what the",
    "start": "3442240",
    "end": "3448000"
  },
  {
    "text": "best use for that is actually is is commenting out a whole block of code",
    "start": "3448000",
    "end": "3453240"
  },
  {
    "text": "because you don't trust Source control um yes yeah cuz you basically go oh no",
    "start": "3453240",
    "end": "3458640"
  },
  {
    "text": "I've commented that out how am I supposed to know that well there's fire spaces there and there's fire spaces there use your bloody eyes oh um no I",
    "start": "3458640",
    "end": "3466440"
  },
  {
    "text": "like that yes block comments with spaces brilliant okay we are going to have to",
    "start": "3466440",
    "end": "3472799"
  },
  {
    "text": "stop now",
    "start": "3472799",
    "end": "3475640"
  }
]