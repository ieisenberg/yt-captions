[
  {
    "text": "[Music]",
    "start": "1000",
    "end": "10880"
  },
  {
    "text": "okay can you guys hear me okay all right thanks for having me everyone uh I'll start by saying goto is",
    "start": "10880",
    "end": "17640"
  },
  {
    "text": "a great conference I've been a few years before and so if you don't have a ticket already highly recommend going um so I'm",
    "start": "17640",
    "end": "25480"
  },
  {
    "text": "going to talk about transactions today uh specifically embracing transactions I",
    "start": "25480",
    "end": "31400"
  },
  {
    "text": "think transactions are a really useful building block for applications and I",
    "start": "31400",
    "end": "37000"
  },
  {
    "text": "want to show you how we can take this idea of being able to compose transactions together uh sort of try and",
    "start": "37000",
    "end": "44440"
  },
  {
    "text": "take it to its natural conclusion see how one implementation goes and explore",
    "start": "44440",
    "end": "50280"
  },
  {
    "text": "what some ideas around this really simple concept is um how many of you",
    "start": "50280",
    "end": "57280"
  },
  {
    "text": "have or using a relational database at work [Music] okay so a lot of",
    "start": "57280",
    "end": "63559"
  },
  {
    "text": "people um how many of you use an orm oh I would have expected a lot more",
    "start": "63559",
    "end": "70200"
  },
  {
    "text": "people how many of you write raw SQL okay so there's going to be some raw SQL ahead so if you use an RM be",
    "start": "70200",
    "end": "77880"
  },
  {
    "text": "prepared to close your eyes uh so we're going to start with a simple question do transactions compos",
    "start": "77880",
    "end": "85720"
  },
  {
    "text": "anyone have an idea okay I think they do but let's see so",
    "start": "85720",
    "end": "93119"
  },
  {
    "text": "let's kind of break this out and see exactly what we mean by transaction and",
    "start": "93119",
    "end": "99360"
  },
  {
    "text": "composition what is a transaction anybody have a",
    "start": "99360",
    "end": "105560"
  },
  {
    "text": "thought anic un work yeah uh",
    "start": "105560",
    "end": "111320"
  },
  {
    "text": "compose compos comes from composition so if we dig into",
    "start": "111320",
    "end": "116600"
  },
  {
    "text": "transactions more we see this word acid especially with relational databases and",
    "start": "116600",
    "end": "123320"
  },
  {
    "text": "in particular when we're talking about transactions we're really thinking about adicity the rest of these are are nice",
    "start": "123320",
    "end": "129840"
  },
  {
    "text": "properties for the entire system of a relational database but for an",
    "start": "129840",
    "end": "135000"
  },
  {
    "text": "individual transaction sort of just from our point of view not thinking about concurrency or anything like that we're",
    "start": "135000",
    "end": "141400"
  },
  {
    "text": "mostly interested in this word atomicity and this kind of breaks down",
    "start": "141400",
    "end": "146480"
  },
  {
    "text": "into Atomic which comes from the Greek word to which",
    "start": "146480",
    "end": "152599"
  },
  {
    "text": "means undividable and so a transaction is something that cannot be divided into",
    "start": "152599",
    "end": "159760"
  },
  {
    "text": "further components the entire transaction is either going to complete successfully or roll back and not",
    "start": "159760",
    "end": "167280"
  },
  {
    "text": "complete at all and in general this idea of being able to do atomic work is a",
    "start": "167280",
    "end": "174480"
  },
  {
    "text": "really important building block especially with things like databases and concurrency because we want to be",
    "start": "174480",
    "end": "180920"
  },
  {
    "text": "able to do some set of actions compose or group them together and be able to",
    "start": "180920",
    "end": "186200"
  },
  {
    "text": "know that the entire thing is going to complete at once how many of you have uh",
    "start": "186200",
    "end": "193000"
  },
  {
    "text": "done some database transformation maybe even on like a nosql database or written a bug in your code that left the",
    "start": "193000",
    "end": "199799"
  },
  {
    "text": "database in some inconsistent State yeah I've definitely done that like a 100 times and so atomicity is a",
    "start": "199799",
    "end": "208239"
  },
  {
    "text": "really important component for this because it allows us to say I want to do all of these things at once and all of",
    "start": "208239",
    "end": "214280"
  },
  {
    "text": "them must complete or none of them must complete there's no way that we can onboard a new customer create an",
    "start": "214280",
    "end": "220959"
  },
  {
    "text": "organization for them create the user that's going to go in the organization and then like not put them in the",
    "start": "220959",
    "end": "226799"
  },
  {
    "text": "organization which means that now we have to go write some script to fix up the data and then if you're me anyway",
    "start": "226799",
    "end": "232959"
  },
  {
    "text": "there's a bug in that script which makes things even worse um and so I think uh",
    "start": "232959",
    "end": "239280"
  },
  {
    "text": "Adam especially when dealing with you know business critical data is an important thing to",
    "start": "239280",
    "end": "246360"
  },
  {
    "text": "consider what about composition what does it mean to compose",
    "start": "246360",
    "end": "251840"
  },
  {
    "text": "things typically we think about putting things together when we compose so we",
    "start": "251840",
    "end": "257519"
  },
  {
    "text": "might have two things and here we've got uh some circles and when we compose them together what do we",
    "start": "257519",
    "end": "263639"
  },
  {
    "text": "get another Circle right a bigger Circle and if when doing this we've now made",
    "start": "263639",
    "end": "270639"
  },
  {
    "text": "this Atomic it means that we can't sort of peek under the hood and see oh that's actually two circles together and I can",
    "start": "270639",
    "end": "277400"
  },
  {
    "text": "you know commit one of the circles but not the other um if we think about",
    "start": "277400",
    "end": "283199"
  },
  {
    "text": "functions um the composition function is going to take two arguments two A's",
    "start": "283199",
    "end": "289320"
  },
  {
    "text": "doesn't matter what A's are it's going to return a third a so this is just a binary function that takes two",
    "start": "289320",
    "end": "295919"
  },
  {
    "text": "parameters of the same type and Returns the same thing function composition is composition",
    "start": "295919",
    "end": "303680"
  },
  {
    "text": "right we take G and F that returns a new function that's first going to call G",
    "start": "303680",
    "end": "309800"
  },
  {
    "text": "and then going to call F but once we have that there's no way to kind of like peek inside and see what the two",
    "start": "309800",
    "end": "315360"
  },
  {
    "text": "functions are there's no like explode to source code uh you know kind of thing in",
    "start": "315360",
    "end": "320840"
  },
  {
    "text": "most of our languages um addition can be thought of as composing",
    "start": "320840",
    "end": "327479"
  },
  {
    "text": "two numbers together so our a in this case are going to be integers and then",
    "start": "327479",
    "end": "333000"
  },
  {
    "text": "when we compose two integers together we get a third integer so anyone have an idea what",
    "start": "333000",
    "end": "338759"
  },
  {
    "text": "happens if we compose two transactions what do we get out another transaction another transaction right so this is",
    "start": "338759",
    "end": "345199"
  },
  {
    "text": "useful because we can now say I have these two reusable building blocks which are each transactions these things are",
    "start": "345199",
    "end": "351880"
  },
  {
    "text": "each indivisible I can execute them and know that the database can't partially",
    "start": "351880",
    "end": "357039"
  },
  {
    "text": "commit one of these but I can also now compose them together into a larger transaction which itself can't be broken",
    "start": "357039",
    "end": "364360"
  },
  {
    "text": "down seems like a pretty straightforward thing right so yep we get a another",
    "start": "364360",
    "end": "372080"
  },
  {
    "text": "transaction but it turns out that trying to actually put this into code is a little",
    "start": "372080",
    "end": "378120"
  },
  {
    "text": "bit more difficult than I've made it sound so far so let's run through an",
    "start": "378120",
    "end": "383160"
  },
  {
    "text": "example we're going to create a really simple table um it's going to have two",
    "start": "383160",
    "end": "388919"
  },
  {
    "text": "columns it's going to have a name that's going to represent a city and then it's going to have the continent that the",
    "start": "388919",
    "end": "394520"
  },
  {
    "text": "city goes in so Chicago North America and here is some of that raw",
    "start": "394520",
    "end": "401560"
  },
  {
    "text": "sequel I was talking about uh so we're going to insert in a new city Chicago",
    "start": "401560",
    "end": "407800"
  },
  {
    "text": "North America is this a",
    "start": "407800",
    "end": "411720"
  },
  {
    "text": "transaction I think it probably meets our definition this cannot be divided up into for work right and if we execute",
    "start": "413560",
    "end": "423000"
  },
  {
    "text": "that and then we ask for the state of the database we say okay there's one row Chicago in North",
    "start": "423000",
    "end": "429840"
  },
  {
    "text": "America what about this we're going to now create Chicago New York and San Francisco all North American cities is",
    "start": "429840",
    "end": "437039"
  },
  {
    "text": "this a transaction no no and that's because we",
    "start": "437039",
    "end": "442720"
  },
  {
    "text": "could do this first part of the transaction we could create Chicago something bad could happen there could",
    "start": "442720",
    "end": "448639"
  },
  {
    "text": "be a power outage on the database and this first row commits there could be a programmer",
    "start": "448639",
    "end": "454199"
  },
  {
    "text": "error um or the uh the power could go out on the",
    "start": "454199",
    "end": "460520"
  },
  {
    "text": "app server and in a lot of cases this works fine but saying we have this Fu",
    "start": "460520",
    "end": "467720"
  },
  {
    "text": "syntax error here if we run this it happily adds New York and Chicago to the",
    "start": "467720",
    "end": "474479"
  },
  {
    "text": "list even though there's an exception here and then San Francisco is left not",
    "start": "474479",
    "end": "479919"
  },
  {
    "text": "included in our list not willing to relocate to San Francisco uh so this leaves our database",
    "start": "479919",
    "end": "488759"
  },
  {
    "text": "in an inconsistent State compared to what we were trying to do which is bad",
    "start": "488759",
    "end": "494720"
  },
  {
    "text": "how about this is this is a transaction now there's a begin and a commit at the",
    "start": "494720",
    "end": "500680"
  },
  {
    "text": "top and bottom now so I think that this is a transaction let's see what happens",
    "start": "500680",
    "end": "506759"
  },
  {
    "text": "so we're going to introduce our same food syntax error this could be anything it could be an exception in your",
    "start": "506759",
    "end": "512919"
  },
  {
    "text": "programming language or some network connectivity fail and so when we run this post GIS or whatever database we're",
    "start": "512919",
    "end": "520320"
  },
  {
    "text": "using is going to happily start a transaction insert Chicago New York it's not going to show anyone else just yet",
    "start": "520320",
    "end": "527360"
  },
  {
    "text": "we're going to have our error and then we're going to actually roll back this transaction and never commit it and so",
    "start": "527360",
    "end": "533920"
  },
  {
    "text": "if we run this nothing has been done that set of inserting three CI",
    "start": "533920",
    "end": "540040"
  },
  {
    "text": "is undividable right so that's good so I think that a",
    "start": "540040",
    "end": "546760"
  },
  {
    "text": "transaction is a begin statement followed by a series of other statements",
    "start": "546760",
    "end": "553600"
  },
  {
    "text": "followed by exactly one commit this is pretty simple right",
    "start": "553600",
    "end": "559079"
  },
  {
    "text": "mhm okay so now we have two transactions that we want to compose together fu is a",
    "start": "559079",
    "end": "565560"
  },
  {
    "text": "transaction because it's surrounded by exactly one begin and one commit and bar",
    "start": "565560",
    "end": "571160"
  },
  {
    "text": "is a transaction because it's surrounded by one begin and one commit but if we were to just sort of execute them in",
    "start": "571160",
    "end": "578000"
  },
  {
    "text": "linear order like this that's actually two transactions not one composed",
    "start": "578000",
    "end": "583040"
  },
  {
    "text": "transaction so to compose these two into one transaction what does that look like",
    "start": "583040",
    "end": "589959"
  },
  {
    "text": "well we have to get rid of this commit the second uh this first commit here and",
    "start": "589959",
    "end": "597200"
  },
  {
    "text": "this second begin there and have begin Fu bar commit okay all is seeming pretty",
    "start": "597200",
    "end": "604640"
  },
  {
    "text": "same so far and if you were sort of just writing these out by hand and not calling into some helper functions to",
    "start": "604640",
    "end": "612120"
  },
  {
    "text": "create New York create Chicago this is pretty simple and you say of course I'm only going to have one begin at the",
    "start": "612120",
    "end": "618120"
  },
  {
    "text": "beginning one commit at the end and so we say that a transaction",
    "start": "618120",
    "end": "625079"
  },
  {
    "text": "is um something where the statements are always run in a transaction so if we",
    "start": "625079",
    "end": "631160"
  },
  {
    "text": "call something a transaction you can't execute the code not in a transaction",
    "start": "631160",
    "end": "636360"
  },
  {
    "text": "seems pretty uh tautological and if we compose with another transaction there",
    "start": "636360",
    "end": "641839"
  },
  {
    "text": "is exactly one begin and one commit right and so if we call something a",
    "start": "641839",
    "end": "649120"
  },
  {
    "text": "transaction the statements must always run in a transaction and so we are a",
    "start": "649120",
    "end": "654720"
  },
  {
    "text": "developer and we're starting to write some reusable functions we're going to stop writing exactly raw SQL and use",
    "start": "654720",
    "end": "662800"
  },
  {
    "text": "Python that's going to send some database statements to postgress or",
    "start": "662800",
    "end": "668160"
  },
  {
    "text": "whatever our database is and to do that we're going to write ourselves a little helper function that allows us to say",
    "start": "668160",
    "end": "675040"
  },
  {
    "text": "with transaction and this is going to take care of running our code in exactly",
    "start": "675040",
    "end": "680079"
  },
  {
    "text": "one of those begin and one of those commence and so uh if you're not",
    "start": "680079",
    "end": "685920"
  },
  {
    "text": "familiar with python this is basically allowing you to say I'm going to create this thing that we're going to call a",
    "start": "685920",
    "end": "692120"
  },
  {
    "text": "with statement we'll later be able to say with transaction and it's going to call again then it's going to call",
    "start": "692120",
    "end": "698200"
  },
  {
    "text": "whatever code you pass in if there's an exception raised we'll call roll back and if not we'll call commit so this is",
    "start": "698200",
    "end": "705920"
  },
  {
    "text": "pretty straightforward so far and now we're going to define a function to create two of the cities that the go-to",
    "start": "705920",
    "end": "713279"
  },
  {
    "text": "conference is in so Chicago which is in North America and Copenhagen which is in",
    "start": "713279",
    "end": "718680"
  },
  {
    "text": "Europe and so a transaction always has a beginning a commit and we can't call",
    "start": "718680",
    "end": "725240"
  },
  {
    "text": "this a transaction without that and so we are careful developers because we",
    "start": "725240",
    "end": "731079"
  },
  {
    "text": "don't want to expose this not inside of a transaction it's not a transaction if you can create Chicago and not",
    "start": "731079",
    "end": "737519"
  },
  {
    "text": "Copenhagen so we say uh def find this function go two cities we'll call with",
    "start": "737519",
    "end": "743240"
  },
  {
    "text": "transaction which is going to take care of rolling back the transaction if there's an exception and basic Bally",
    "start": "743240",
    "end": "749399"
  },
  {
    "text": "just remove the boiler plate of us having to remember to call begin and end if you've used a database uh driver",
    "start": "749399",
    "end": "756600"
  },
  {
    "text": "before you've probably used something like this uh as well so first we're going to insert Chicago and then",
    "start": "756600",
    "end": "764440"
  },
  {
    "text": "Copenhagen and if we execute this function in Python it turns out we can",
    "start": "764440",
    "end": "770120"
  },
  {
    "text": "actually inspect exactly what postgress sees so there's a log option we can turn on and we can just look at the log files",
    "start": "770120",
    "end": "777079"
  },
  {
    "text": "and it will just Echo back every single literal statement that we send to postrest so this kind of allows us to",
    "start": "777079",
    "end": "783920"
  },
  {
    "text": "peek behind the scenes and see exactly what the database driver that we're uh using is doing so first it's going to",
    "start": "783920",
    "end": "790839"
  },
  {
    "text": "call begin it's going to create Chicago then Copenhagen and then commit is this",
    "start": "790839",
    "end": "796760"
  },
  {
    "text": "a transaction yes yes okay so we're good here we've now created this hopefully",
    "start": "796760",
    "end": "803240"
  },
  {
    "text": "reusable transaction that is a function we can call which will create two of the go-to Cities",
    "start": "803240",
    "end": "810760"
  },
  {
    "text": "okay now we're going to create two cities that I wish go to where in so I really want to go to Tokyo and South",
    "start": "811959",
    "end": "818839"
  },
  {
    "text": "Africa which are in Asia and Africa so now this is another reusable function",
    "start": "818839",
    "end": "824680"
  },
  {
    "text": "that we can call uh future go-to cities and inside of a transaction it's going",
    "start": "824680",
    "end": "829720"
  },
  {
    "text": "to create Tokyo in Asia and South Africa on the continent of Africa and so I",
    "start": "829720",
    "end": "837199"
  },
  {
    "text": "claim that this is a transaction as well these statements are in exactly one begin and one",
    "start": "837199",
    "end": "844240"
  },
  {
    "text": "commit now what happens if we want to combine them",
    "start": "844240",
    "end": "850240"
  },
  {
    "text": "together is this going to be good or bad if it's composable it should be fine",
    "start": "850360",
    "end": "857399"
  },
  {
    "text": "so we're definitely in a transaction we're actually we're in like three transactions because go-to cities calls",
    "start": "857399",
    "end": "864759"
  },
  {
    "text": "with transaction future go-to cities calls with transaction and with transaction definitely calls begin and",
    "start": "864759",
    "end": "871959"
  },
  {
    "text": "commit and so we're extra safe right there's like no way that this could",
    "start": "871959",
    "end": "877120"
  },
  {
    "text": "possibly not be Atomic because we're in so many transactions sadly that is not what",
    "start": "877120",
    "end": "883040"
  },
  {
    "text": "happens and I will tell you that if you are doing this almost certainly your database driver will happily send",
    "start": "883040",
    "end": "889560"
  },
  {
    "text": "exactly these statements to postgress and if you're not looking at your logs uh you'll have no idea what's going",
    "start": "889560",
    "end": "897160"
  },
  {
    "text": "on in fact I did stuff like this for a really long time having no idea that there's a super subtle bug here so what",
    "start": "897160",
    "end": "904959"
  },
  {
    "text": "ends up happening is we call begin from the First with transaction and then we",
    "start": "904959",
    "end": "910759"
  },
  {
    "text": "call goto cities which also is going to call begin so we begin again int Chicago",
    "start": "910759",
    "end": "918320"
  },
  {
    "text": "Copenhagen go to cities completes which says oh yeah this completed successfully with no exceptions so we should commit",
    "start": "918320",
    "end": "926639"
  },
  {
    "text": "and then future go-to cities is going to call begin we'll insert these two cities",
    "start": "926639",
    "end": "932720"
  },
  {
    "text": "future go-to cities with statement's going to end it's going to call commit and then this outer width transaction is",
    "start": "932720",
    "end": "938800"
  },
  {
    "text": "going to call commit and this turns out to have an",
    "start": "938800",
    "end": "947079"
  },
  {
    "text": "issue and so if we actually look at either the warnings that our database",
    "start": "947600",
    "end": "953000"
  },
  {
    "text": "driver may or may not give back to us or the logs in whatever database you use",
    "start": "953000",
    "end": "958480"
  },
  {
    "text": "you'll like see something like this there is already a transaction in progress and there is no transaction in",
    "start": "958480",
    "end": "964160"
  },
  {
    "text": "progress I'm kind of embarrassed to admit that for the first few months of seeing this I was like Ah that's just",
    "start": "964160",
    "end": "969480"
  },
  {
    "text": "some bug and then I just like started getting super curious like that doesn't quite",
    "start": "969480",
    "end": "976920"
  },
  {
    "text": "seem right okay and so there's actually a really logical explanation for this if",
    "start": "976920",
    "end": "984319"
  },
  {
    "text": "we go back and look at exactly what we're sending the database we call again",
    "start": "984319",
    "end": "990000"
  },
  {
    "text": "twice and it turns out that most databases don't Implement anything that",
    "start": "990000",
    "end": "995120"
  },
  {
    "text": "we would think of as like nested transactions or if they do it's really not what we want we don't want to Nest",
    "start": "995120",
    "end": "1001199"
  },
  {
    "text": "these transactions we want one big transaction that creates New York",
    "start": "1001199",
    "end": "1006360"
  },
  {
    "text": "Chicago Copenhagen uh South Africa and Tokyo right and so if we just go into a postr",
    "start": "1006360",
    "end": "1013720"
  },
  {
    "text": "shell and we type begin twice the second time postris is like you know you're",
    "start": "1013720",
    "end": "1018959"
  },
  {
    "text": "already in a transaction so I'm just going to ignore this statement completely then you call commit again",
    "start": "1018959",
    "end": "1025319"
  },
  {
    "text": "it's like okay we're in a transaction let's commit and then you call commit the second time and you're not in a",
    "start": "1025319",
    "end": "1031798"
  },
  {
    "text": "transaction anymore and so there's this little Annoying bit in between here",
    "start": "1031799",
    "end": "1037640"
  },
  {
    "text": "those two commits where you think that you're inside of a transaction but you're actually not post RIS doesn't",
    "start": "1037640",
    "end": "1043678"
  },
  {
    "text": "raise any error or anything it just says okay but I can't commit anything",
    "start": "1043679",
    "end": "1050200"
  },
  {
    "text": "and so if we try and run this code and we raise an exception here what we'd",
    "start": "1050200",
    "end": "1056240"
  },
  {
    "text": "like to happen what we're trying to achieve is that this entire set of",
    "start": "1056240",
    "end": "1061480"
  },
  {
    "text": "statements is going to complete atomically right we're going to insert uh New York and Chicago uh or Copenhagen",
    "start": "1061480",
    "end": "1069840"
  },
  {
    "text": "and Chicago and then uh Tokyo and South Africa and we think that happens because",
    "start": "1069840",
    "end": "1076600"
  },
  {
    "text": "in that little function we wrote if there's an exception we call roll back right well let's see what happens if we",
    "start": "1076600",
    "end": "1083760"
  },
  {
    "text": "actually execute this code we call begin twice again we insert Chicago and",
    "start": "1083760",
    "end": "1090200"
  },
  {
    "text": "Copenhagen then we call commit because we do successfully complete from goto",
    "start": "1090200",
    "end": "1095280"
  },
  {
    "text": "cities so now that's in the database the transaction's over then we rais this",
    "start": "1095280",
    "end": "1100320"
  },
  {
    "text": "value error but we're still inside of well we think we're inside of this transaction so our python code says okay",
    "start": "1100320",
    "end": "1107520"
  },
  {
    "text": "roll back so we roll back but we've just rolled back a",
    "start": "1107520",
    "end": "1112720"
  },
  {
    "text": "transaction that hasn't actually done anything because we've already committed this first one and so if we ask what's",
    "start": "1112720",
    "end": "1119400"
  },
  {
    "text": "in the database we get Chicago and Copenhagen and so it's now seeming",
    "start": "1119400",
    "end": "1126880"
  },
  {
    "text": "difficult to create these little reusable functions that if you use them on your own there's no way to not run it",
    "start": "1126880",
    "end": "1133600"
  },
  {
    "text": "in a transaction but to also compose it to create bigger transaction it's",
    "start": "1133600",
    "end": "1139280"
  },
  {
    "text": "it's feeling like these things are kind of at odds with each other right um and",
    "start": "1139280",
    "end": "1146679"
  },
  {
    "text": "so we have met this first part the statements are always run in a transaction and for a while what I was",
    "start": "1146679",
    "end": "1153679"
  },
  {
    "text": "doing is sort of saying I have to either kind of be lenient and",
    "start": "1153679",
    "end": "1159799"
  },
  {
    "text": "say you know put in some documentation and say okay this is some reusable SQL",
    "start": "1159799",
    "end": "1165520"
  },
  {
    "text": "code but you as the developer when you're ready to finally put this in a transaction make sure you wrap it in a",
    "start": "1165520",
    "end": "1172240"
  },
  {
    "text": "transaction and that's kind of unsatisfying cuz we don't like to rely on comment convention to convey things",
    "start": "1172240",
    "end": "1179280"
  },
  {
    "text": "like transactional integrity that's a little scary on the other hand we could wrap it",
    "start": "1179280",
    "end": "1187720"
  },
  {
    "text": "in a transaction and put a comment that says don't try and compose this with any other transaction but that's also just a",
    "start": "1187720",
    "end": "1194440"
  },
  {
    "text": "comment and we saw what happens if we do compose it with another transaction it doesn't actually compose into a bigger",
    "start": "1194440",
    "end": "1200559"
  },
  {
    "text": "transaction and almost worse you get this situation where you have this false sense of confidence that you're saying",
    "start": "1200559",
    "end": "1206960"
  },
  {
    "text": "okay I like there's like four with transactions so this is for sure in a",
    "start": "1206960",
    "end": "1212159"
  },
  {
    "text": "transaction but it's actually not and so we're kind of left in this frustrating",
    "start": "1212159",
    "end": "1218400"
  },
  {
    "text": "situation that we know what we want but we're having trouble teaching this higher level language how to translate",
    "start": "1218400",
    "end": "1225000"
  },
  {
    "text": "into SQL uh and so when we compose with another transaction we want exactly one",
    "start": "1225000",
    "end": "1232240"
  },
  {
    "text": "begin and exactly one commit remember this is what's proving difficult and",
    "start": "1232240",
    "end": "1239240"
  },
  {
    "text": "just to kind of Drive the point home uh this is a this is uh you know kind of an",
    "start": "1239240",
    "end": "1244760"
  },
  {
    "text": "illustration of the situation that we're coming into we have this first begin and the outer uh with transaction and then",
    "start": "1244760",
    "end": "1252440"
  },
  {
    "text": "we have a few other begins that postp is going to say ah whatever we're going to write Chicago copen",
    "start": "1252440",
    "end": "1259240"
  },
  {
    "text": "but then because we called with transaction on goto cities it's going to commit now the transaction is over this",
    "start": "1259240",
    "end": "1266320"
  },
  {
    "text": "is not indivisible this is a dividable unit then we call future go-to cities",
    "start": "1266320",
    "end": "1272760"
  },
  {
    "text": "and probably 99.9 whatever per of the time this works fine and then we have",
    "start": "1272760",
    "end": "1278360"
  },
  {
    "text": "that one situation we're like how the hell did the database get in this state I use transactions",
    "start": "1278360",
    "end": "1284440"
  },
  {
    "text": "everywhere um and it turns out that there is a solution to this uh it's",
    "start": "1284440",
    "end": "1293320"
  },
  {
    "text": "remarkably simple sadly I'm going to show it to you in hll and",
    "start": "1293320",
    "end": "1299880"
  },
  {
    "text": "so questionable how useful it will be to all of you but I think the basic point",
    "start": "1299880",
    "end": "1306919"
  },
  {
    "text": "will be driven home and hopefully you'll think oh it's pretty cool that hll can solve these kind of problems in a really",
    "start": "1306919",
    "end": "1314080"
  },
  {
    "text": "simple elegant way come talk to me afterward if you do want to talk about how we might do this",
    "start": "1314080",
    "end": "1319880"
  },
  {
    "text": "and python Java whatever because it is absolutely possible okay so let's kind",
    "start": "1319880",
    "end": "1326640"
  },
  {
    "text": "of translate our python code that we had before into hll this is just the type",
    "start": "1326640",
    "end": "1331960"
  },
  {
    "text": "signatures we don't have to look at any actual hll code and so create goto",
    "start": "1331960",
    "end": "1337279"
  },
  {
    "text": "cities is going to be a function from connection to what's called iio Unit and",
    "start": "1337279",
    "end": "1343360"
  },
  {
    "text": "this basically says this has function can interact with the outside world and it doesn't return any meaningful value",
    "start": "1343360",
    "end": "1350600"
  },
  {
    "text": "we're just calling it for the side effects because it's going to insert these things into the database it's not going to actually give us any results",
    "start": "1350600",
    "end": "1357760"
  },
  {
    "text": "back from SQL same with create future go-to cies",
    "start": "1357760",
    "end": "1362919"
  },
  {
    "text": "and just like in the python version in the hasle postris library there's a function called with transaction that",
    "start": "1362919",
    "end": "1370360"
  },
  {
    "text": "does exactly what we saw before it just says begin run your code commit and if",
    "start": "1370360",
    "end": "1376080"
  },
  {
    "text": "you Nest them together sort of in certainly as you compose these little",
    "start": "1376080",
    "end": "1381200"
  },
  {
    "text": "reusable transactions together you get in this situation where you're calling begin more than once and then you commit",
    "start": "1381200",
    "end": "1387360"
  },
  {
    "text": "at like the most nested part of the transaction and now your whole transaction is over and there's a really",
    "start": "1387360",
    "end": "1394200"
  },
  {
    "text": "simple change that we can make just to the types that help us out here so types",
    "start": "1394200",
    "end": "1399640"
  },
  {
    "text": "to the rescue here so if we create this new data type",
    "start": "1399640",
    "end": "1404799"
  },
  {
    "text": "which we're going to call PG transaction let's not worry too much about what it looks like but under the hood it's",
    "start": "1404799",
    "end": "1410679"
  },
  {
    "text": "basically just looks like this it's a function from connection to some IO action that",
    "start": "1410679",
    "end": "1418480"
  },
  {
    "text": "we're going to execute and we have this neat little property of tasel which is the only way you can interact with the",
    "start": "1418480",
    "end": "1424720"
  },
  {
    "text": "outside world is through IO and so if we have this thing that is just a PG",
    "start": "1424720",
    "end": "1430240"
  },
  {
    "text": "transaction we know it hasn't actually s anything to postris yet it might describe what we want to do to postris",
    "start": "1430240",
    "end": "1437200"
  },
  {
    "text": "but it hasn't actually executed to get we have a chance to sort of sneak in and say like all right we're going to insert",
    "start": "1437200",
    "end": "1442840"
  },
  {
    "text": "exactly one begin and exactly one commit and so the only way to turn this",
    "start": "1442840",
    "end": "1448919"
  },
  {
    "text": "PG transaction value into an IO because we don't export The Constructor for PG",
    "start": "1448919",
    "end": "1455799"
  },
  {
    "text": "transaction you can only create a PG transaction through these helpers that we're going to give you the only way to",
    "start": "1455799",
    "end": "1462240"
  },
  {
    "text": "actually turn this into a value which will actually execute against postris is",
    "start": "1462240",
    "end": "1467399"
  },
  {
    "text": "to call this run PG transaction function and what does that return you it returns",
    "start": "1467399",
    "end": "1472679"
  },
  {
    "text": "you an IA it does not return you a PG transaction so once you've like run your PG transaction that's it you can't",
    "start": "1472679",
    "end": "1480760"
  },
  {
    "text": "pretend to compose it with another transaction because we've already sent the begin and the commit so this really",
    "start": "1480760",
    "end": "1488240"
  },
  {
    "text": "simple change now allows us to Define these reusable functions which are built",
    "start": "1488240",
    "end": "1494200"
  },
  {
    "text": "on query and execute so it's going to take a query which is basically just a string that we're going to do some uh",
    "start": "1494200",
    "end": "1501679"
  },
  {
    "text": "SQL standardization on an input which is just some hle data type that we're going",
    "start": "1501679",
    "end": "1506760"
  },
  {
    "text": "to send uh uh to the post it's going to",
    "start": "1506760",
    "end": "1512080"
  },
  {
    "text": "return the list of output that matches our query but it's going to do it inside of this PG transaction type and not I so",
    "start": "1512080",
    "end": "1518840"
  },
  {
    "text": "it doesn't have to worry about sending begin and commit we specifically don't",
    "start": "1518840",
    "end": "1523880"
  },
  {
    "text": "call with transaction cuz there is no with transaction that works on PG transaction",
    "start": "1523880",
    "end": "1529000"
  },
  {
    "text": "we know that the only way that someone can actually execute this is calling that run PG transaction function there's",
    "start": "1529000",
    "end": "1535799"
  },
  {
    "text": "also execute which allows you to insert things into the database and it's going to give you back an integer of the",
    "start": "1535799",
    "end": "1542520"
  },
  {
    "text": "number of rows that were deleted updated or inserted in and so now we can create",
    "start": "1542520",
    "end": "1548640"
  },
  {
    "text": "these reusable functions uh to create goto cities create future go-to cities",
    "start": "1548640",
    "end": "1555279"
  },
  {
    "text": "and they're going to run in this PG transaction type that we've created we can now rest assured that if somebody",
    "start": "1555279",
    "end": "1562760"
  },
  {
    "text": "successfully executes this against postgress the only way they can do that is by calling run PG transaction which",
    "start": "1562760",
    "end": "1569600"
  },
  {
    "text": "is going to put exactly one begin and exactly one commit at the end and once",
    "start": "1569600",
    "end": "1574880"
  },
  {
    "text": "they've done that they can't do anything else with the database for this transaction a new transaction is going",
    "start": "1574880",
    "end": "1581120"
  },
  {
    "text": "to start and so the author uh or the developer who actually calls this sort",
    "start": "1581120",
    "end": "1587360"
  },
  {
    "text": "of has to decide how big of a transaction do I want to compose and once I've done that I've sort of agreed",
    "start": "1587360",
    "end": "1592840"
  },
  {
    "text": "okay I'm not able to compose this with any bigger transactions anymore because it's not possible",
    "start": "1592840",
    "end": "1598679"
  },
  {
    "text": "right so we can now say uh create all cities which is going to be a function",
    "start": "1598679",
    "end": "1605320"
  },
  {
    "text": "this is not a reusable transaction because it returns this different type it does not return PG transaction the",
    "start": "1605320",
    "end": "1612279"
  },
  {
    "text": "types tell us that we can't even pretend to compose this anymore we're going to",
    "start": "1612279",
    "end": "1617360"
  },
  {
    "text": "call run PG transaction pass in our connection and now safely in exactly one",
    "start": "1617360",
    "end": "1623080"
  },
  {
    "text": "begin and one commit we can create goto cities create future go-to cities and",
    "start": "1623080",
    "end": "1629240"
  },
  {
    "text": "nothing is really lost to us as a user of this we're just using query and uh",
    "start": "1629240",
    "end": "1635840"
  },
  {
    "text": "execute as we thought we were before and we create these reusable components another kind of cool thing",
    "start": "1635840",
    "end": "1642799"
  },
  {
    "text": "falls out of this do you think it's a good idea if you open a transaction and then sit with",
    "start": "1642799",
    "end": "1650000"
  },
  {
    "text": "the connection open for 15 20 minutes no but I have definitely done",
    "start": "1650000",
    "end": "1656559"
  },
  {
    "text": "that before you're like in some transaction you don't even realize it and you're like I'm going to make an HTTP request and then it times out after",
    "start": "1656559",
    "end": "1664240"
  },
  {
    "text": "like 20 minutes and the database load is at like 24 on a 24 cor machine and it's",
    "start": "1664240",
    "end": "1671720"
  },
  {
    "text": "because you have this long running transaction open inadvertently because inside of a transaction your database",
    "start": "1671720",
    "end": "1678320"
  },
  {
    "text": "has resources associated with this transaction it's keeping like its own special isolated view of the of whatever",
    "start": "1678320",
    "end": "1685120"
  },
  {
    "text": "part of the database that you're touching just for you the special view just for you uh and you're off making",
    "start": "1685120",
    "end": "1692159"
  },
  {
    "text": "HTTP requests and so these types actually allow us if we want to prevent",
    "start": "1692159",
    "end": "1698360"
  },
  {
    "text": "us from doing that so if you want to be able to do HTTP requests inside of a transaction you can sort of give",
    "start": "1698360",
    "end": "1704120"
  },
  {
    "text": "yourself that permission by making a slight change to this but if you want to be able to say once I'm in a transaction",
    "start": "1704120",
    "end": "1710080"
  },
  {
    "text": "all I'm going to do is talk to postris as fast as I can commit the transaction",
    "start": "1710080",
    "end": "1715360"
  },
  {
    "text": "not leave these transactions open then you can actually use types as well to eliminate this",
    "start": "1715360",
    "end": "1721320"
  },
  {
    "text": "entire honestly tough to diagnose situation where you have these long",
    "start": "1721320",
    "end": "1726480"
  },
  {
    "text": "running transactions where you might have touched a queried table that has 500 million rows and the database is",
    "start": "1726480",
    "end": "1734039"
  },
  {
    "text": "keeping this special resource intensive view of it for you while you're off doing something that you don't even care",
    "start": "1734039",
    "end": "1739480"
  },
  {
    "text": "if it's in a transaction you just kind of made a mistake uh a very easy mistake to make as",
    "start": "1739480",
    "end": "1745559"
  },
  {
    "text": "well uh and so the hle code I've just shown you is in an open source library",
    "start": "1745559",
    "end": "1751120"
  },
  {
    "text": "that we've created at the company I work for called helium uh so if you want to check it out the whole thing is like 70",
    "start": "1751120",
    "end": "1757080"
  },
  {
    "text": "lines of code including a lot of kind of boiler plate that just Maps the uh",
    "start": "1757080",
    "end": "1762240"
  },
  {
    "text": "normal postr query functions query execute uh little variations like that",
    "start": "1762240",
    "end": "1768200"
  },
  {
    "text": "the core code is honestly like four lines of code that does this whole thing um and exercise left to you all to think",
    "start": "1768200",
    "end": "1776640"
  },
  {
    "text": "about this in Python it will not be as elegant but I guarantee you it is also possible to do this in whatever your",
    "start": "1776640",
    "end": "1782720"
  },
  {
    "text": "favorite language is so uh come chat with me afterward if you're interested uh thank you very",
    "start": "1782720",
    "end": "1791039"
  },
  {
    "text": "much we have time for",
    "start": "1796000",
    "end": "1800039"
  },
  {
    "text": "questions yes yeah yeah healing is the company I work",
    "start": "1801080",
    "end": "1807000"
  },
  {
    "text": "for oh what do we do uh we are an Internet of Things startup based in San",
    "start": "1807559",
    "end": "1812760"
  },
  {
    "text": "Francisco uh I'm local to Chicago uh but the company's uh based in San",
    "start": "1812760",
    "end": "1818240"
  },
  {
    "text": "Francisco uh basically what we do is we make it really easy for uh other",
    "start": "1818240",
    "end": "1823960"
  },
  {
    "text": "companies to create their own sensors so we have physical sensors that are B powered uh which connect back to our",
    "start": "1823960",
    "end": "1830640"
  },
  {
    "text": "Network and you can send Lua code to Those sensors and create production sensors that uh use an analog digital",
    "start": "1830640",
    "end": "1839880"
  },
  {
    "text": "converter or a gpio and write production quality sensors that have a battery life",
    "start": "1839880",
    "end": "1845519"
  },
  {
    "text": "of uh one and a half to three years by sending your own lure code down to these",
    "start": "1845519",
    "end": "1851440"
  },
  {
    "text": "and then uh on sort of the platform side you can do all sorts of interesting analytics data storage uh in process in",
    "start": "1851440",
    "end": "1858360"
  },
  {
    "text": "with that are there IP addresses attached to Those sensors uh there is a MAC address",
    "start": "1858360",
    "end": "1866919"
  },
  {
    "text": "yeah yeah do you have any opinions on how Frameworks like spring solve this problem by basically instrumenting",
    "start": "1868200",
    "end": "1874440"
  },
  {
    "text": "around method calls and using thread local variables to detect whether or not a transaction is already present yeah so",
    "start": "1874440",
    "end": "1883080"
  },
  {
    "text": "I I can't speak specifically for what spring does I imagine several frame Works do probably kind of solve this",
    "start": "1883080",
    "end": "1890679"
  },
  {
    "text": "although I will say several that I looked at so I originally kind of wrote all the code examples in has and I was",
    "start": "1890679",
    "end": "1897279"
  },
  {
    "text": "like yeah maybe that's not a very good idea and so I started writing in Python and so I did exactly what I was saying",
    "start": "1897279",
    "end": "1903440"
  },
  {
    "text": "before I wrote a little Python program and then I looked at exactly what the python driver uh psycho pg2 I think it's",
    "start": "1903440",
    "end": "1910000"
  },
  {
    "text": "called which is like the python driver that everyone uses does and it does the naive thing it actually does something",
    "start": "1910000",
    "end": "1917159"
  },
  {
    "text": "slightly more nefarious which is that if you're in a nested transaction it's like oh you're already in a transaction so I",
    "start": "1917159",
    "end": "1923559"
  },
  {
    "text": "won't call begin again but then it calls commit and so I like had to redo the",
    "start": "1923559",
    "end": "1929679"
  },
  {
    "text": "slides CU was like that's even more confusing than just having like pairs of nested begin and commit um yeah I mean I",
    "start": "1929679",
    "end": "1938240"
  },
  {
    "text": "think somewhat sadly this is the kind of thing that like you find out by looking at some bug report in whatever framework",
    "start": "1938240",
    "end": "1945200"
  },
  {
    "text": "you use anyone",
    "start": "1945200",
    "end": "1950320"
  },
  {
    "text": "else cool well thank you very much uh and I'll be happy to talk uh with people",
    "start": "1950320",
    "end": "1956080"
  },
  {
    "text": "uh more in person if you want thank you",
    "start": "1956080",
    "end": "1960720"
  }
]