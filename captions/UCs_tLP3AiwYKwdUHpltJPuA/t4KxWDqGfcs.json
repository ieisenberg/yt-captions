[
  {
    "start": "0",
    "end": "12000"
  },
  {
    "text": "so one of the common thing I wanted to solve one of the most important things was that I wanted to have a have one way",
    "start": "480",
    "end": "5839"
  },
  {
    "text": "of scaling both up and out is they are essentially both but scaling up I mean scaling out on Hardware scaling out on a",
    "start": "5839",
    "end": "12880"
  },
  {
    "start": "12000",
    "end": "127000"
  },
  {
    "text": "single machine on a multicore box right there's also scaling out it's just instead of having multiple machines as",
    "start": "12880",
    "end": "18320"
  },
  {
    "text": "you're having scaling out like horizontally in the in the true sense",
    "start": "18320",
    "end": "23439"
  },
  {
    "text": "you're actually scaling out on on multip multiple processors and and I mean which you do",
    "start": "23439",
    "end": "29560"
  },
  {
    "text": "we and when shouldn't really matter I think that's something that that you should actually externalize into a",
    "start": "29560",
    "end": "35000"
  },
  {
    "text": "deployment decision that's basically how your topology should be so that was one of the key design things I wanted to do",
    "start": "35000",
    "end": "42160"
  },
  {
    "text": "and that I was I saw missing that people use different different tools for for like dealing with concurrency and",
    "start": "42160",
    "end": "47640"
  },
  {
    "text": "different tools for dealing with distributed computing so how how how do",
    "start": "47640",
    "end": "52879"
  },
  {
    "text": "we achieve this now then so we use something called actors",
    "start": "52879",
    "end": "58640"
  },
  {
    "text": "right an actor is the sort of the common theme throughout this talk AKA is is much more",
    "start": "58640",
    "end": "64760"
  },
  {
    "text": "than actors actors is one as we call it one tool in in the toolbox it's a great tool it",
    "start": "64760",
    "end": "71280"
  },
  {
    "text": "has I mean lots of applications and use cases and you can solve I think 80% of",
    "start": "71280",
    "end": "77960"
  },
  {
    "text": "all the problems that I see out there using actors but the other 20% are are hard to solve with actors it's not a",
    "start": "77960",
    "end": "83759"
  },
  {
    "text": "silver bullet and that's why we have many other tools that I will cover by the end just",
    "start": "83759",
    "end": "89640"
  },
  {
    "text": "mention mentioned them briefly but this buil Cornerstone in AKA uh is is message passing concurrency",
    "start": "89640",
    "end": "96680"
  },
  {
    "text": "as it also called actor based Pro actor based",
    "start": "96680",
    "end": "101479"
  },
  {
    "text": "programming so what I mean what so what is an actor yeah I'm not talking about",
    "start": "101720",
    "end": "107280"
  },
  {
    "text": "actors like like John Goodman even though I mean at at our team we have have we have a common common sort of",
    "start": "107280",
    "end": "113520"
  },
  {
    "text": "reoccuring event where we watch this movie the big the big Labowski instead what I mean is",
    "start": "113520",
    "end": "121960"
  },
  {
    "text": "that so at the base level an actor is the code of you of of the unit of code",
    "start": "121960",
    "end": "129679"
  },
  {
    "start": "127000",
    "end": "221000"
  },
  {
    "text": "in inside an actor system and of course then in AA it has",
    "start": "129679",
    "end": "136640"
  },
  {
    "text": "similarities with with like classic J Serv session be Etc it's a model for",
    "start": "136640",
    "end": "142200"
  },
  {
    "text": "like organizing your code externalizing out like things like deployment policies deployment decisions",
    "start": "142200",
    "end": "149360"
  },
  {
    "text": "into your configuration file actor is nothing new it's been around since like",
    "start": "149360",
    "end": "154920"
  },
  {
    "text": "1973 coined by Carl huitt in a paper you can look it up later if you're interested in in the in the history it",
    "start": "154920",
    "end": "161920"
  },
  {
    "text": "was it was it was catched on like at at a sort of Real World level by llang in",
    "start": "161920",
    "end": "167040"
  },
  {
    "text": "the early 80s and have been used for 30 years in the Telecom",
    "start": "167040",
    "end": "172239"
  },
  {
    "text": "industry uh using the Earline pro pro programming language and other sort of",
    "start": "172239",
    "end": "177920"
  },
  {
    "text": "more less or more obscure cure languages right but this a common the ideas are extremely sound regardless of",
    "start": "177920",
    "end": "185080"
  },
  {
    "text": "implementation and I think that they we have a lot to learn there at in the so how we solve problem in the Java",
    "start": "185080",
    "end": "191080"
  },
  {
    "text": "Enterprise space or Scala whatever you use or C we're we're I mean we're still stuck",
    "start": "191080",
    "end": "197200"
  },
  {
    "text": "using the ideas and tools and constructs that are like since the since I mean",
    "start": "197200",
    "end": "203000"
  },
  {
    "text": "since we're starting using the sort of like in the 60s basically",
    "start": "203000",
    "end": "208840"
  },
  {
    "text": "with Fortran and stuff so I think I think there is even though this is really not new techniques there",
    "start": "208840",
    "end": "214159"
  },
  {
    "text": "might be new to a lot of people but they are old and proven right and What actors give you is is a way of programming at a",
    "start": "214159",
    "end": "220720"
  },
  {
    "text": "higher level so I won't rant long about like thre the problems with threads and",
    "start": "220720",
    "end": "226120"
  },
  {
    "start": "221000",
    "end": "384000"
  },
  {
    "text": "locks even though I could I think I just I just going to leave it at I think that the way people do the way we do",
    "start": "226120",
    "end": "233760"
  },
  {
    "text": "concurrency in Java c c C++ PO is completely broken I think it's",
    "start": "233760",
    "end": "240319"
  },
  {
    "text": "absolutely wrong way of of of of of approaching a problem it's it's since",
    "start": "240319",
    "end": "245439"
  },
  {
    "text": "what we do is that we we work with things are leaking up all the way from the operating system right is the way",
    "start": "245439",
    "end": "250920"
  },
  {
    "text": "the the most lowle Primitives in the whole applic in the whole Hardware stack",
    "start": "250920",
    "end": "256040"
  },
  {
    "text": "actually is dealing with the problem that leaks all the way up in the programming model and it becomes the default way we deal with with problems",
    "start": "256040",
    "end": "262960"
  },
  {
    "text": "once other in other areas we work at much much higher abstractions and I think we need to raise abstraction level",
    "start": "262960",
    "end": "269280"
  },
  {
    "text": "for for for for for concurrency parallelism and distributive",
    "start": "269280",
    "end": "274919"
  },
  {
    "text": "Computing as well so instead of of of dealing with this lowlevel Plumbing that",
    "start": "274919",
    "end": "280680"
  },
  {
    "text": "you have have to do with you work with with threads and locks what you instead do is that you think in workflow you're",
    "start": "280680",
    "end": "286560"
  },
  {
    "text": "thinking how how are my messages flowing in the system",
    "start": "286560",
    "end": "291919"
  },
  {
    "text": "okay and that's business logic right basically more or less at least that's",
    "start": "291919",
    "end": "297680"
  },
  {
    "text": "how your components interact and how the how the events like flow and request",
    "start": "297680",
    "end": "302840"
  },
  {
    "text": "response and stuff like that and if you do that if you design your system around this where these ideas of workflow then",
    "start": "302840",
    "end": "310840"
  },
  {
    "text": "then you get extremely good resource utilization you get parallelism concurrency you get basically deadlock",
    "start": "310840",
    "end": "317000"
  },
  {
    "text": "free code unless you actually deadlock on a conceptual level sure you can you can create a deadlock by by in in in the",
    "start": "317000",
    "end": "325160"
  },
  {
    "text": "way your messages flow the the system but then then it's actually then you thought I mean the",
    "start": "325160",
    "end": "330319"
  },
  {
    "text": "then you done your thinking completely wrong instead of that that the plumbing Deadlocks for example the the deadly",
    "start": "330319",
    "end": "337840"
  },
  {
    "text": "embraced they take locks in the wrong order right and the and and the and the the bad thing with that is that in Java",
    "start": "337840",
    "end": "344560"
  },
  {
    "text": "if if if you get a dead log in Java then then you lost two threads excuse me there's no way back",
    "start": "344560",
    "end": "351919"
  },
  {
    "text": "but if if if it's just a workflow then you can introduce things like timeout and get out of the problem",
    "start": "351919",
    "end": "357199"
  },
  {
    "text": "Etc so that is great it's is also on top of all this greatness that I think I",
    "start": "357199",
    "end": "363479"
  },
  {
    "text": "mean with with the concurrency and with the with the extremely high throughput that you can get like little Mill maxing",
    "start": "363479",
    "end": "370880"
  },
  {
    "text": "out on on your Hardware is also comes with I think a superior model for",
    "start": "370880",
    "end": "376039"
  },
  {
    "text": "dealing with failure failure management and error recovery that we will look at",
    "start": "376039",
    "end": "381240"
  },
  {
    "text": "later okay is also distributable by Design and and here comes that I mean",
    "start": "381240",
    "end": "386440"
  },
  {
    "start": "384000",
    "end": "530000"
  },
  {
    "text": "it's actually the same tools the same components that you're using can be used for scaling up and out",
    "start": "386440",
    "end": "393080"
  },
  {
    "text": "regardless it's nothing you have to think about you you you write your components right and then afterwards you",
    "start": "393080",
    "end": "398160"
  },
  {
    "text": "can figure if they should run in in process or if one of parts of the system",
    "start": "398160",
    "end": "403400"
  },
  {
    "text": "should run in another machine Etc we have what is called location transparency",
    "start": "403400",
    "end": "410120"
  },
  {
    "text": "okay that it really doesn't matter where you're where where where your components run that's something that can even",
    "start": "410120",
    "end": "416879"
  },
  {
    "text": "change at runtime the system can detect that okay this component is not ideally over here it's basically only using",
    "start": "416879",
    "end": "423000"
  },
  {
    "text": "resources here then the system can actually move the the the instance the running instance on the fly to to to",
    "start": "423000",
    "end": "430120"
  },
  {
    "text": "bring him closer to to the context he's actually used in or or or the other way",
    "start": "430120",
    "end": "435680"
  },
  {
    "text": "around so you get scale up and out like free as part of the model if you if you just think and work in actors and I",
    "start": "435680",
    "end": "443160"
  },
  {
    "text": "think this this is the perfect fabric for the cloud it actually matches a lot with this with with similar traits that",
    "start": "443160",
    "end": "449240"
  },
  {
    "text": "you have have in in cloud computing you have a system that is like inherently elastic actors can come and",
    "start": "449240",
    "end": "456000"
  },
  {
    "text": "go same as nodes can come and going in cloud computing a very Dynamic world you have fa tolerance built in okay so the",
    "start": "456000",
    "end": "463560"
  },
  {
    "text": "systems can actually heal itself how we will look in later and we also added on top of the active Model A lot more even",
    "start": "463560",
    "end": "470159"
  },
  {
    "text": "high level Concepts like load balancing routing pooling and all the stuff you might",
    "start": "470159",
    "end": "475720"
  },
  {
    "text": "need okay so where is AA currently used here here is sort of selection of of",
    "start": "475720",
    "end": "481080"
  },
  {
    "text": "some some of some of the companies that are currently using AA and as you can see is like it's a big variety of of",
    "start": "481080",
    "end": "488479"
  },
  {
    "text": "Industries you have like Telecom you have e-commerce you have Investment Banking Merchant banking data simulation",
    "start": "488479",
    "end": "494680"
  },
  {
    "text": "trading betting gaming all kinds of stuff right even more than that like",
    "start": "494680",
    "end": "501240"
  },
  {
    "text": "sort of social media and TV and so on and and the common theme though across",
    "start": "501240",
    "end": "508000"
  },
  {
    "text": "all of these industries is is that they have have a high they have a need for high throughput low latency with ve with",
    "start": "508000",
    "end": "514839"
  },
  {
    "text": "very high slas strict s delays on on on resilience",
    "start": "514839",
    "end": "521599"
  },
  {
    "text": "okay which which is actually the whole reason for the for for the existence of",
    "start": "521599",
    "end": "528080"
  },
  {
    "text": "AKA so what can you use actors for if we now me try to take a step back and like",
    "start": "528080",
    "end": "533760"
  },
  {
    "start": "530000",
    "end": "615000"
  },
  {
    "text": "take what we already know and try to map that to an actor okay so in you you you",
    "start": "533760",
    "end": "539920"
  },
  {
    "text": "can see an act a little bit like sometimes like a thread for example it's bad it's a very bad com",
    "start": "539920",
    "end": "546920"
  },
  {
    "text": "sort of comparison as we will see because actors are much lighter than threads and so on but conceptually they",
    "start": "546920",
    "end": "554320"
  },
  {
    "text": "can be looked a little bit like a thread they can little be seen as an object instance or richer component they can be",
    "start": "554320",
    "end": "560279"
  },
  {
    "text": "used as a call back or listener would use like Anonymous class or closure it can be Singleton or represent",
    "start": "560279",
    "end": "567760"
  },
  {
    "text": "some sort of service it can be in instead of being just a single actor can represent a router like can be be",
    "start": "567760",
    "end": "574720"
  },
  {
    "text": "working as a load balancer or a pool it can be very much like a message driven being so even though that's constraining",
    "start": "574720",
    "end": "581040"
  },
  {
    "text": "the model quite a lot and it can represent an out ofprocess service like mocking out something like that it can",
    "start": "581040",
    "end": "588560"
  },
  {
    "text": "be a state machine as we will see so actors is really different Beast right it can be many of the things that we",
    "start": "588560",
    "end": "594160"
  },
  {
    "text": "know so you really it takes a while to wrap your head around what's really an actor or what really Act",
    "start": "594160",
    "end": "600600"
  },
  {
    "text": "is uh so if we take even a step back further back and see I mean look at",
    "start": "600600",
    "end": "607040"
  },
  {
    "text": "the definitions what what is the actor model as is as it's defined by by Carl hu the guy the story invented the model",
    "start": "607040",
    "end": "615160"
  },
  {
    "start": "615000",
    "end": "691000"
  },
  {
    "text": "so it's a according to Carl hu it's a fundamental unit of computation",
    "start": "615160",
    "end": "620800"
  },
  {
    "text": "sorry that embodies three things processing that's the behavior the thing",
    "start": "620800",
    "end": "626000"
  },
  {
    "text": "that runs the things that execute Cycles on the on the the CPU Right Storage",
    "start": "626000",
    "end": "631760"
  },
  {
    "text": "that's the state that's the stuff on the Heap right communication these are the",
    "start": "631760",
    "end": "638240"
  },
  {
    "text": "three mean things that the actor model sort sort of embodies right and we have",
    "start": "638240",
    "end": "643760"
  },
  {
    "text": "three different axioms when a message is sent to an actor an actor can do one of three things okay it can",
    "start": "643760",
    "end": "651360"
  },
  {
    "text": "create new actors he can can so to get references to the new to new actors he",
    "start": "651360",
    "end": "657360"
  },
  {
    "text": "can send messages to the actor it knows and it can also become something",
    "start": "657360",
    "end": "663800"
  },
  {
    "text": "else it can really like transform its own internals its own behavior its own",
    "start": "663800",
    "end": "669240"
  },
  {
    "text": "interface so it's so it's like some so it's actually he's turned himself to",
    "start": "669240",
    "end": "674880"
  },
  {
    "text": "something else for the next message that that that arrives and this last thing is is is sort of the whole thing that makes",
    "start": "674880",
    "end": "682639"
  },
  {
    "text": "the the actor model so extremely Dynamic and flexible if we will look at later so",
    "start": "682639",
    "end": "688200"
  },
  {
    "text": "so if you want to take like break this down in into these first or into these like three three different axioms right",
    "start": "688200",
    "end": "695040"
  },
  {
    "start": "691000",
    "end": "864000"
  },
  {
    "text": "creates and become become is like we transform your I'm going to add a fourth one that I think belongs into the active",
    "start": "695040",
    "end": "701560"
  },
  {
    "text": "model even though it's not it's not part of Carl hu or original definition and that is supervisor that's",
    "start": "701560",
    "end": "708560"
  },
  {
    "text": "how the fault model how you can deal with failure come comes into the picture okay so if we're now going to look at",
    "start": "708560",
    "end": "715600"
  },
  {
    "text": "how we can define an actor first before we start creating and using them the the first thing we do is that we",
    "start": "715600",
    "end": "721600"
  },
  {
    "text": "create a message the message is a greeting class up there okay so a",
    "start": "721600",
    "end": "727639"
  },
  {
    "text": "message is is is the actor's public API okay that that is what you can do",
    "start": "727639",
    "end": "735360"
  },
  {
    "text": "with an actor you can send him these methods like think about messages that can be seen like the methods in an",
    "start": "735360",
    "end": "741600"
  },
  {
    "text": "interface right that's what the actor exposes then a create your actor and you",
    "start": "741600",
    "end": "747040"
  },
  {
    "text": "just that's just in Java is just regular class you see you're extending now we call untyped actor in",
    "start": "747040",
    "end": "754279"
  },
  {
    "text": "AKA we have two types of actors we have untyped and we have typed actors typed actors actually exposes a statically",
    "start": "754279",
    "end": "760880"
  },
  {
    "text": "typed interface so has so it's a it's a more statically typed sort of component",
    "start": "760880",
    "end": "767839"
  },
  {
    "text": "you lost a lot you lose a lot of the dynamicity in the model that and it's not like the traditional type of actor",
    "start": "767839",
    "end": "774000"
  },
  {
    "text": "it's more like the active obic pattern but some people like that but I'm going to not talk about they like original the",
    "start": "774000",
    "end": "780320"
  },
  {
    "text": "true sort of actors that I think are more more they're more they're more powerful and flexible so the only thing",
    "start": "780320",
    "end": "787160"
  },
  {
    "text": "you need to do when you create an actor is extend the ACT thisp actor and then you then you override the on reive",
    "start": "787160",
    "end": "793279"
  },
  {
    "text": "method if you've seen the message driven beans looks very much like that okay but",
    "start": "793279",
    "end": "798880"
  },
  {
    "text": "but but don't be fooled actors are much more powerful and they have much richer stics the mess striven be they're not",
    "start": "798880",
    "end": "804519"
  },
  {
    "text": "just a call back like that's basically what what mess driven beans are",
    "start": "804519",
    "end": "810079"
  },
  {
    "text": "like uh so here we can receive the method the",
    "start": "810079",
    "end": "815680"
  },
  {
    "text": "message that are sent to us so then we need to check what kind of message it is",
    "start": "815680",
    "end": "821480"
  },
  {
    "text": "in in in Java we need to use like instance of in Scala the other our other",
    "start": "821480",
    "end": "826800"
  },
  {
    "text": "API I just have to say this API looks much much cleaner in Scala has pattern matching so actually allows you to",
    "start": "826800",
    "end": "833880"
  },
  {
    "text": "introspect your Robs right in the in in in the case stand statement your you can",
    "start": "833880",
    "end": "839320"
  },
  {
    "text": "actually Peak into the object directly and bind certain things so I don't have",
    "start": "839320",
    "end": "844639"
  },
  {
    "text": "an example of that now since I'm focused on the Java API but but it's it's sort in Scola it matches better I think with",
    "start": "844639",
    "end": "851720"
  },
  {
    "text": "the true actor model uh from a syntax perspective it has more like syntactic",
    "start": "851720",
    "end": "857000"
  },
  {
    "text": "sugar for these kind of things basically okay so now we now we have an",
    "start": "857000",
    "end": "863000"
  },
  {
    "text": "actor that's basically it so if we now create an actor okay actors are extremely light based as I said",
    "start": "863000",
    "end": "869639"
  },
  {
    "start": "864000",
    "end": "943000"
  },
  {
    "text": "they you can't think an actor one to one with a thread an actor around has about 300 bytes and so you can you can create",
    "start": "869639",
    "end": "877440"
  },
  {
    "text": "close to 3 million actors on one GB of RAM this mean means you can easily like model things that's are extremely hard",
    "start": "877440",
    "end": "883639"
  },
  {
    "text": "to model using threads you can easily have like for example 10 million",
    "start": "883639",
    "end": "889320"
  },
  {
    "text": "concurrent users like running in your system at the same time it's really hard",
    "start": "889320",
    "end": "895240"
  },
  {
    "text": "to do such do stuff like that using threads",
    "start": "895240",
    "end": "900560"
  },
  {
    "text": "so an actor also has very strong encapsulation it has much stronger",
    "start": "901440",
    "end": "906480"
  },
  {
    "text": "encapsulation than classes or instances of classes in Java or C or CP they are",
    "start": "906480",
    "end": "912920"
  },
  {
    "text": "closer to the original definition of of of object orientation than than than classes or",
    "start": "912920",
    "end": "920279"
  },
  {
    "text": "instances of classes right so they encapsulate State Behavior",
    "start": "920279",
    "end": "925959"
  },
  {
    "text": "as as a regular object but they also have a message cue",
    "start": "925959",
    "end": "931920"
  },
  {
    "text": "okay that's what we call the mailbox so each actor has a mailbox where all the",
    "start": "931920",
    "end": "937000"
  },
  {
    "text": "messages they receiv to the actor and ends ends up",
    "start": "937000",
    "end": "942560"
  },
  {
    "text": "right so how can we create an actor now so we for the first thing we need to do is we we need to create the actor system",
    "start": "942560",
    "end": "949240"
  },
  {
    "start": "943000",
    "end": "1075000"
  },
  {
    "text": "okay so we create an actor system that's sort of our application you can think about it a little bit like spring beam",
    "start": "949240",
    "end": "955399"
  },
  {
    "text": "Factory if you use if you use to spring or like I don't hardly remember remember what it's called egb context or",
    "start": "955399",
    "end": "963079"
  },
  {
    "text": "something in egb right so and then when you have a system",
    "start": "963079",
    "end": "969199"
  },
  {
    "text": "you can use a system then to to use the factory method actor of actor of creates",
    "start": "969199",
    "end": "974639"
  },
  {
    "text": "actors okay so the in but in actor of you pass in two things first you pass in",
    "start": "974639",
    "end": "979959"
  },
  {
    "text": "the configuration object called props you can be pretty rich kind of",
    "start": "979959",
    "end": "985040"
  },
  {
    "text": "configuration we'll use that later but here we just tell you what kind of what type of of actor we want and we also",
    "start": "985040",
    "end": "990560"
  },
  {
    "text": "then give it a name names are important in AA out here now comes an actor ref not",
    "start": "990560",
    "end": "997560"
  },
  {
    "text": "an we this doesn't return the instance of greeting actor up here okay and",
    "start": "997560",
    "end": "1003680"
  },
  {
    "text": "that's very important this decoupling enables a lot of things first it's like it's it's a safety that you won't add",
    "start": "1003680",
    "end": "1010199"
  },
  {
    "text": "public methods to the greeting a greeting actor and call them from the outside like bypassing the whole model",
    "start": "1010199",
    "end": "1016680"
  },
  {
    "text": "and being back to evilness and Hell shared State concurrency right we don't",
    "start": "1016680",
    "end": "1021720"
  },
  {
    "text": "want that so that's why we we return actor ref with a clean API that we can",
    "start": "1021720",
    "end": "1027000"
  },
  {
    "text": "use now to interact with the actor the other the other thing is also that we will see that this code is also all we",
    "start": "1027000",
    "end": "1034678"
  },
  {
    "text": "need to run this in a distributed environment we don't need to change one single line of code this thing that's",
    "start": "1034679",
    "end": "1041280"
  },
  {
    "text": "returned here the actf can just as as easy to represent a running component on another machine in another Data Center",
    "start": "1041280",
    "end": "1048919"
  },
  {
    "text": "Center or whatever and was even more nice since I only have the reference it means that the running instance can",
    "start": "1048919",
    "end": "1054400"
  },
  {
    "text": "actually move move around even all depending on on how the application is",
    "start": "1054400",
    "end": "1060440"
  },
  {
    "text": "being used and how the runtime tries to optimize the the the runtime",
    "start": "1060440",
    "end": "1065600"
  },
  {
    "text": "characteristics so so this decoupling is good even though it must might might look odd",
    "start": "1065600",
    "end": "1072440"
  },
  {
    "text": "okay so actors form hierarchies you remember we we said system Act of when",
    "start": "1072440",
    "end": "1078840"
  },
  {
    "start": "1075000",
    "end": "1144000"
  },
  {
    "text": "when I do that I create a top level actor that that sits right underneath some an invisible actor that we call the",
    "start": "1078840",
    "end": "1085880"
  },
  {
    "text": "system Guardian that's inside our actor system okay so when you say system actor of Fu then you get a a child of our or S",
    "start": "1085880",
    "end": "1095400"
  },
  {
    "text": "replication system Guardian okay this is this this is also this hierarchy stuff",
    "start": "1095400",
    "end": "1100559"
  },
  {
    "text": "is very important when it comes to the failure model but for now we just talk about it in terms of Omer solution okay so now",
    "start": "1100559",
    "end": "1109520"
  },
  {
    "text": "inside this actu there is a member field called context that is what I should use",
    "start": "1109520",
    "end": "1114720"
  },
  {
    "text": "most of the time okay I shouldn't use system because if I create system I just created a whole bunch of top level",
    "start": "1114720",
    "end": "1120200"
  },
  {
    "text": "actors and I'm missing out of all the goodness right so if I now use context actor of what I'm doing then is I'm",
    "start": "1120200",
    "end": "1125760"
  },
  {
    "text": "creating a child here or my actor and if I continue using context all the time from within actors actors I create I'm",
    "start": "1125760",
    "end": "1132760"
  },
  {
    "text": "creating child and I become the parent of that okay so then you get like an actor hierarchy similar to this",
    "start": "1132760",
    "end": "1139559"
  },
  {
    "text": "so this is important now when we use the the Neer solution because we use we we talk about actors as and their and their",
    "start": "1139559",
    "end": "1148080"
  },
  {
    "start": "1144000",
    "end": "1338000"
  },
  {
    "text": "names very much like a file system this looks very much like a file system right with a root and then you have blah blah",
    "start": "1148080",
    "end": "1153840"
  },
  {
    "text": "that that's exactly how you reference them as well so Fu here for example that's SL fu is a top level actor in in",
    "start": "1153840",
    "end": "1161000"
  },
  {
    "text": "in our actor system okay this a here is sl/ a and sl/ A/B and so on",
    "start": "1161000",
    "end": "1169559"
  },
  {
    "text": "and when and we have a we have a method called actor four that you can look up actors so you can get reference to",
    "start": "1169559",
    "end": "1175720"
  },
  {
    "text": "actors that you didn't create and then and then you use these paths okay you also use these paths when you configure",
    "start": "1175720",
    "end": "1182280"
  },
  {
    "text": "the actors from the outside Etc and this and we you can even use things like you",
    "start": "1182280",
    "end": "1189039"
  },
  {
    "text": "might for example if I if I'm inside a here I can use actor actor for dot dot",
    "start": "1189039",
    "end": "1194480"
  },
  {
    "text": "SL star what's going to happen then I'm going to get all my siblings right on the same level I'm going up on hierarchy",
    "start": "1194480",
    "end": "1201080"
  },
  {
    "text": "and then I'm getting all all the ones including myself right there's going to be an actor selection that you can use",
    "start": "1201080",
    "end": "1206400"
  },
  {
    "text": "to work with sets of actors and so on so you can really navigate it like that",
    "start": "1206400",
    "end": "1211559"
  },
  {
    "text": "which which is I think is pretty intuitive if you used Earline by the way I mean we have we've taken some of the",
    "start": "1211559",
    "end": "1217760"
  },
  {
    "text": "best parts of Earline I think but we also added some of some some stuff on top of that and changed a lot of stuff that I didn't we didn't like that the",
    "start": "1217760",
    "end": "1224280"
  },
  {
    "text": "users found unintuitive and that didn't fit in the bigger picture the this the second sort of construct is",
    "start": "1224280",
    "end": "1231159"
  },
  {
    "text": "send so we can create actors we can send actors we can send message to actors sorry the nice thing with send is that",
    "start": "1231159",
    "end": "1238799"
  },
  {
    "text": "it's completely asynchronous and non-blocking okay some people also call it fire",
    "start": "1238799",
    "end": "1244440"
  },
  {
    "text": "forget so and everything in AKA in the in the terms of the",
    "start": "1244440",
    "end": "1249720"
  },
  {
    "text": "dispatching when you send a message to an actor there's not a single lock in the whole hot path everything is",
    "start": "1249720",
    "end": "1256280"
  },
  {
    "text": "completely lockless that gives has extremely good good performance and throughput right but even more",
    "start": "1256280",
    "end": "1263440"
  },
  {
    "text": "importantly than that from a semantics perspective everything happens reative",
    "start": "1263440",
    "end": "1269799"
  },
  {
    "text": "reactively right so everything is sort of by default everything is lazy like sits doing nothing and when an actor is",
    "start": "1269799",
    "end": "1276279"
  },
  {
    "text": "doing nothing he doesn't consume any resources apart from memory he doesn't sit on a thread right so there's no",
    "start": "1276279",
    "end": "1282640"
  },
  {
    "text": "there's no reason utilization at all apart from memory so and actor sits do nothing",
    "start": "1282640",
    "end": "1290240"
  },
  {
    "text": "until a message is sent to him right then he wakes up to start doing stuff so",
    "start": "1290240",
    "end": "1295320"
  },
  {
    "text": "in a way message is like is is like the kinetic energy in an actor system so",
    "start": "1295320",
    "end": "1301120"
  },
  {
    "text": "actors can have a lot of sort of potential energy buffered up they can be like ready to do a lot of important",
    "start": "1301120",
    "end": "1306760"
  },
  {
    "text": "stuff right taking over the world even but they won't do anything unless they",
    "start": "1306760",
    "end": "1311919"
  },
  {
    "text": "actually some things trigger them to start doing things create new actors sending messages to them and it trickles down into the system and then everything",
    "start": "1311919",
    "end": "1318200"
  },
  {
    "text": "goes down just like passive again so it's extremely lazy extremely",
    "start": "1318200",
    "end": "1323880"
  },
  {
    "text": "resource sort of say it's",
    "start": "1323880",
    "end": "1329000"
  },
  {
    "text": "really uh very very try to minimize the Reas utilization as much as possible so",
    "start": "1329000",
    "end": "1334919"
  },
  {
    "text": "how do we send a message then then we use this actor ref the actor ref have a method called tell that basically does",
    "start": "1334919",
    "end": "1342400"
  },
  {
    "start": "1338000",
    "end": "1420000"
  },
  {
    "text": "what it says it tells an other actor to do something okay so we can say greeter",
    "start": "1342400",
    "end": "1347559"
  },
  {
    "text": "tell and and then send in the command and that's a message and this this returns immediately this doesn't wait",
    "start": "1347559",
    "end": "1354279"
  },
  {
    "text": "for the actor to like put it to put the M's mailbox and for they had the mailbox to be processed for to have the message",
    "start": "1354279",
    "end": "1362000"
  },
  {
    "text": "impli to the actor and it returns immediately after putting the message on the",
    "start": "1362000",
    "end": "1367600"
  },
  {
    "text": "mailbox okay then we have a concept of scheduler we have that's all we as we",
    "start": "1367600",
    "end": "1372760"
  },
  {
    "text": "call the dispatcher we actually many different dispatchers the default is usually best",
    "start": "1372760",
    "end": "1379559"
  },
  {
    "text": "but we have other specialized one that works great in other in other in other environments so so there there is the",
    "start": "1379559",
    "end": "1385200"
  },
  {
    "text": "concept of This Global scheduler that that uses that uses different algorithm for that you can",
    "start": "1385200",
    "end": "1390919"
  },
  {
    "text": "actually tune for fairness and and how and how how how you want it but it actually takes the message from the",
    "start": "1390919",
    "end": "1398240"
  },
  {
    "text": "actor and wakes him up puts him puts in the message there let him run and then",
    "start": "1398240",
    "end": "1404640"
  },
  {
    "text": "it's back to suspended okay he does this all the time so actors of course need to",
    "start": "1404640",
    "end": "1409919"
  },
  {
    "text": "be tied to a thread to actually execute so we can say that actors run on a shared thread pool or end the number of",
    "start": "1409919",
    "end": "1416480"
  },
  {
    "text": "shared thread pools depend how you want to configure your system so this is the full example",
    "start": "1416480",
    "end": "1421559"
  },
  {
    "start": "1420000",
    "end": "1459000"
  },
  {
    "text": "actually this is all you need to to start creating actor systems right now",
    "start": "1421559",
    "end": "1428279"
  },
  {
    "text": "so this is all if if you don't do anything now if you have no configuration file whatsoever this just",
    "start": "1428279",
    "end": "1434360"
  },
  {
    "text": "runs in process it creates an an actor in process and just runs it in process process right on the single jbm but",
    "start": "1434360",
    "end": "1440760"
  },
  {
    "text": "let's sound now we perhaps want to want to say this actor should this actor called greeter here should r on another",
    "start": "1440760",
    "end": "1447720"
  },
  {
    "text": "machine I want to start creating a cluster okay what's going to happen then",
    "start": "1447720",
    "end": "1453240"
  },
  {
    "text": "is in order to to make that happen we just have to write a piece little piece of configuration file this is aka's",
    "start": "1453240",
    "end": "1459159"
  },
  {
    "start": "1459000",
    "end": "1609000"
  },
  {
    "text": "configuration file it it has actually different sort of skins you can use it it looks like like you can use straight",
    "start": "1459159",
    "end": "1465080"
  },
  {
    "text": "Jason you can use this like Jason style more syntactic you can use property files and so on and",
    "start": "1465080",
    "end": "1471960"
  },
  {
    "text": "it's all written in Java by the way because we use it to bootstrap Scala so we have the same configuration format",
    "start": "1471960",
    "end": "1477279"
  },
  {
    "text": "for Scala ARA and play in the whole stack so even if the only thing you use from this talk is this configuration",
    "start": "1477279",
    "end": "1484039"
  },
  {
    "text": "Library I think you you you want want a lot it's really nice anyway so the first thing we need",
    "start": "1484039",
    "end": "1490520"
  },
  {
    "text": "to do now if we want to like make a remote deployment of this want to change the topology to run on a cluster we say",
    "start": "1490520",
    "end": "1496440"
  },
  {
    "text": "I want the remote actf provider that's sort of the the creator of the actors it should be remote enabled then see here",
    "start": "1496440",
    "end": "1504240"
  },
  {
    "text": "in the deployment section we use the name here again you remember it was greeter it's out of systems it's a top",
    "start": "1504240",
    "end": "1510640"
  },
  {
    "text": "level actor then we use slash greeter if it's a child to greeter SLG",
    "start": "1510640",
    "end": "1516559"
  },
  {
    "text": "greeter slash my the child the name of the child or whatever so we use these names here when we want to configure the",
    "start": "1516559",
    "end": "1523080"
  },
  {
    "text": "system so the only thing we need to do now is say Okay I want this to be remote deployed and then not tell it",
    "start": "1523080",
    "end": "1529799"
  },
  {
    "text": "where okay I'm using the ACA protocol then I'm defining the system my",
    "start": "1529799",
    "end": "1536919"
  },
  {
    "text": "system I don't remember if you oops I don't remember if you remember that we actually name the system there my system",
    "start": "1536919",
    "end": "1543360"
  },
  {
    "text": "right so every all names matters okay so we have the my system",
    "start": "1543360",
    "end": "1549720"
  },
  {
    "text": "there it runs on this machine on this port and that's",
    "start": "1549720",
    "end": "1554799"
  },
  {
    "text": "something that I configure elsewhere in the configuration all the ports that should be open for all kinds of all all all all for all the systems right and",
    "start": "1554799",
    "end": "1562480"
  },
  {
    "text": "that's it when now when I create this this act this this actor what's going to happen though now is it's not going to",
    "start": "1562480",
    "end": "1568919"
  },
  {
    "text": "be created locally it's actually going to be deployed to another machine and",
    "start": "1568919",
    "end": "1574640"
  },
  {
    "text": "instantiated there and the reference I get points to that guy so if I start sending messages to it it will travel",
    "start": "1574640",
    "end": "1580279"
  },
  {
    "text": "across the wire over to that guy and so on so this is what I call by location",
    "start": "1580279",
    "end": "1585559"
  },
  {
    "text": "transparency and even better this is can actually optimize things for example we",
    "start": "1585559",
    "end": "1590760"
  },
  {
    "text": "use that in our adaptive routers for example that we have routers that sort of adapt according to the runtime",
    "start": "1590760",
    "end": "1597279"
  },
  {
    "text": "metrics in the system and then they can they can actually move actors around the guy using them doesn't know so he he",
    "start": "1597279",
    "end": "1603120"
  },
  {
    "text": "doesn't care he just wants to most throughput right the third thing I want to talk about is become okay become is",
    "start": "1603120",
    "end": "1611480"
  },
  {
    "start": "1609000",
    "end": "1638000"
  },
  {
    "text": "is is where is where where things get a bit funky in in a way and some people might wonder okay why would I ever want",
    "start": "1611480",
    "end": "1617039"
  },
  {
    "text": "to do this it turns out to be very useful so what",
    "start": "1617039",
    "end": "1622760"
  },
  {
    "text": "become does is like is like it like redefines what the actor is if you look",
    "start": "1622760",
    "end": "1628640"
  },
  {
    "text": "at it from a type system perspective it's like if the actor completely changed both interface and imp",
    "start": "1628640",
    "end": "1635200"
  },
  {
    "text": "implementation it really becomes something completely different and why would I want to do that",
    "start": "1635200",
    "end": "1641600"
  },
  {
    "start": "1638000",
    "end": "1938000"
  },
  {
    "text": "right one thing I want to add before I start giving examples why and where it's really really useful is that behaviors",
    "start": "1641600",
    "end": "1647600"
  },
  {
    "text": "as they are called then are stacked right so I can push behaviors on the",
    "start": "1647600",
    "end": "1652919"
  },
  {
    "text": "stack and then I can go back to my original implementation by just popping the",
    "start": "1652919",
    "end": "1658000"
  },
  {
    "text": "stack that's something that's also very nice so why would I want to do that yeah let's say for example that I that I",
    "start": "1658000",
    "end": "1664360"
  },
  {
    "text": "creating my system all using like like like single",
    "start": "1664360",
    "end": "1670200"
  },
  {
    "text": "actors that run okay it might might then later turn turn out that this actor is",
    "start": "1670200",
    "end": "1675720"
  },
  {
    "text": "extremely highly contended I didn't expect it to be or I might expect it it to be it's just that most of the year is",
    "start": "1675720",
    "end": "1681120"
  },
  {
    "text": "actually not but over Christmas it goes straight across a roof okay then I then I can just configure my actor to as soon",
    "start": "1681120",
    "end": "1687880"
  },
  {
    "text": "as I'm getting loaded my mailbox reaches a certain size or I whatever metrics I use within the actor to to I mean",
    "start": "1687880",
    "end": "1694080"
  },
  {
    "text": "understand that I'm overloaded I can just transform myself to pool okay I become a pool and then I spawn up like 5",
    "start": "1694080",
    "end": "1701760"
  },
  {
    "text": "10 100 guys on some other machines or in process or whatever and and for the guy us me he he",
    "start": "1701760",
    "end": "1709640"
  },
  {
    "text": "doesn't know that I turn myself into a pool that's just something I can do internally and when the load goes down",
    "start": "1709640",
    "end": "1716200"
  },
  {
    "text": "just pop the stack and go back to become a Singler actor again and you can probably shut down the the easy2 notes",
    "start": "1716200",
    "end": "1721840"
  },
  {
    "text": "that you that you ran just for during this peak for example right I also use",
    "start": "1721840",
    "end": "1728600"
  },
  {
    "text": "it for Implement St State machines I for example start with a with a behavior of",
    "start": "1728600",
    "end": "1734200"
  },
  {
    "text": "with just one interface or with just one meth one one message called start for",
    "start": "1734200",
    "end": "1739320"
  },
  {
    "text": "example when I receive that I'm becoming running then I might have my full implementation of the service like 5 10",
    "start": "1739320",
    "end": "1745720"
  },
  {
    "text": "messages one of them might be resume or suspend I run for a while and then I want something wants to suspend me I'm",
    "start": "1745720",
    "end": "1752320"
  },
  {
    "text": "it runs suspend and I'm becoming suspended that is one single interface one single method called resume when I",
    "start": "1752320",
    "end": "1757960"
  },
  {
    "text": "get resume I'm popping the stack going back to to running again and then I might have something that I can go back",
    "start": "1757960",
    "end": "1763159"
  },
  {
    "text": "to like to stop and that that's the end of that right so so you can actually Implement State machine",
    "start": "1763159",
    "end": "1769159"
  },
  {
    "text": "because not only Behavior you have to pass in the current state into the behavior as well to like keep behavior",
    "start": "1769159",
    "end": "1774840"
  },
  {
    "text": "and state across these different stages it's a very intuitive very nice way of dealing with with with State machines",
    "start": "1774840",
    "end": "1781159"
  },
  {
    "text": "and actor are often State machines these actors should have state completely stateless actors are sure use useful",
    "start": "1781159",
    "end": "1788799"
  },
  {
    "text": "right but but but where the really shine is where you decouple state and behavior",
    "start": "1788799",
    "end": "1794080"
  },
  {
    "text": "because what I didn't say is that if you have mutable State inside an actor that's completely fine nothing bad can",
    "start": "1794080",
    "end": "1801039"
  },
  {
    "text": "happen it's it's it's it's like enforced by the model to have that completely",
    "start": "1801039",
    "end": "1807159"
  },
  {
    "text": "thread safe okay you can have you can have mutable State and hashmap or whatever",
    "start": "1807159",
    "end": "1812840"
  },
  {
    "text": "and you never need to guard yourself right which is very which is very nice you can also Implement things like",
    "start": "1812840",
    "end": "1819919"
  },
  {
    "text": "graceful degradation instead of transform yourself to router you might instead start throwing except exceptions",
    "start": "1819919",
    "end": "1826519"
  },
  {
    "text": "like saying oh I'm overloaded or you might actually want to start dropping messages like piping them to some log file or whatever to see these are",
    "start": "1826519",
    "end": "1833399"
  },
  {
    "text": "actually or or you can send them to to AKA dead letter CU we have we have a",
    "start": "1833399",
    "end": "1839200"
  },
  {
    "text": "dead letter actor F that you can that everyone has to handle to you can send them to that and then you can add then",
    "start": "1839200",
    "end": "1845679"
  },
  {
    "text": "they go out on AAS event bus that we also have implemented for you so you can just listen to these dead",
    "start": "1845679",
    "end": "1851640"
  },
  {
    "text": "letter messages pick them up somewhere else or whatever right you can you can things",
    "start": "1851640",
    "end": "1858279"
  },
  {
    "text": "like spawning up a whole bunch of of empty completely empty workers with no behavior and state at all and and then",
    "start": "1858279",
    "end": "1865440"
  },
  {
    "text": "you can spawn up a master that first starts sending out the implementation to all of these actors right and then it",
    "start": "1865440",
    "end": "1871200"
  },
  {
    "text": "starts using them by sending out messages and aggregating the result and when it's done he just shuts everything down he makes sure that the actor pops",
    "start": "1871200",
    "end": "1877519"
  },
  {
    "text": "their behaviors they're all empty again a new server can come in start sending out his behavior right it's complete you",
    "start": "1877519",
    "end": "1883679"
  },
  {
    "text": "can create this completely Dynamic world so it's really really F",
    "start": "1883679",
    "end": "1888720"
  },
  {
    "text": "fascinating use your imagination but there are many more use cases than this but these are some of the most obvious",
    "start": "1888720",
    "end": "1894200"
  },
  {
    "text": "ones right and how do you do this then yeah in Java we don't have closures yet",
    "start": "1894200",
    "end": "1900639"
  },
  {
    "text": "right so it's a little bit ugly you need to create an anonymous class with one method but in Java 8 this will be nice",
    "start": "1900639",
    "end": "1906639"
  },
  {
    "text": "then will be scrap all this boiler plate but for now we need to create an inst of this procedure with the meth with the",
    "start": "1906639",
    "end": "1912519"
  },
  {
    "text": "method apply and here is where you add your new your new Behavior",
    "start": "1912519",
    "end": "1919440"
  },
  {
    "text": "okay and we also have a procedure that actually can take can take um state in",
    "start": "1919760",
    "end": "1925159"
  },
  {
    "text": "so you can pass State along between your stages as well so load",
    "start": "1925159",
    "end": "1931480"
  },
  {
    "text": "balancing I just want to talk a little bit just low balancing so now for example if if you have this actor F and",
    "start": "1932000",
    "end": "1938559"
  },
  {
    "start": "1938000",
    "end": "1958000"
  },
  {
    "text": "you want to now create it as you want to you want to turn into like a router immediately then then then you can just",
    "start": "1938559",
    "end": "1944519"
  },
  {
    "text": "using on the prop so but you can say with router and you're passing the rou router the number of roues for example",
    "start": "1944519",
    "end": "1950840"
  },
  {
    "text": "you can also do this all from the configuration file or you can do this at runtime depending on how you want to do",
    "start": "1950840",
    "end": "1956399"
  },
  {
    "text": "it you can also add for example pool to a router say I want to have lower bound",
    "start": "1956399",
    "end": "1961440"
  },
  {
    "start": "1958000",
    "end": "2004000"
  },
  {
    "text": "and upper bound just pass that into the round robin router here and then you get a router backed by a",
    "start": "1961440",
    "end": "1967639"
  },
  {
    "text": "pool and so on and we have many different router implementations like all kinds random consistent hashing",
    "start": "1967639",
    "end": "1974039"
  },
  {
    "text": "broadcast you name we have a lot of adaptive ones that looks into like the least memory least CPU least number of",
    "start": "1974039",
    "end": "1979760"
  },
  {
    "text": "messages in the mailbox so on it's nice in the cluster so now I'm going to talk a",
    "start": "1979760",
    "end": "1986000"
  },
  {
    "text": "little bit about Java Java 7 concurrency and just show you how AA is using Java 7 concurrency there was a lot of nice",
    "start": "1986000",
    "end": "1992240"
  },
  {
    "text": "stuff that that was added and that really enabled us to like to to get our performance numbers and throughput",
    "start": "1992240",
    "end": "1997440"
  },
  {
    "text": "numbers across the roof so first like some of the new utilities that you have in Java 7 or one of the key things were",
    "start": "1997440",
    "end": "2003480"
  },
  {
    "text": "the fork joint framework that is something that we now rely heavily on in AKA we didn't before in other words it's",
    "start": "2003480",
    "end": "2009600"
  },
  {
    "start": "2004000",
    "end": "2018000"
  },
  {
    "text": "thread local random and facer and so on but we want to focus now on the fork join framework",
    "start": "2009600",
    "end": "2015559"
  },
  {
    "text": "okay so the algorithm is pretty simple you have fork and you have join okay",
    "start": "2015559",
    "end": "2021519"
  },
  {
    "start": "2018000",
    "end": "2093000"
  },
  {
    "text": "Fork means that you're like recursively Fork off things like basically like you",
    "start": "2021519",
    "end": "2027320"
  },
  {
    "text": "see here you have a task that Forks off one other task here in one in one other task there and that happens all all",
    "start": "2027320",
    "end": "2034159"
  },
  {
    "text": "recursively down like a tree and then it it awaits the computation and when the",
    "start": "2034159",
    "end": "2039679"
  },
  {
    "text": "computation is is done it joins it back to its parents like trickles all the way",
    "start": "2039679",
    "end": "2044799"
  },
  {
    "text": "up to until you get the final result it's great for like divide and conc algorithms okay it also use in the terns",
    "start": "2044799",
    "end": "2052919"
  },
  {
    "text": "it uses something called work stealing right so each of these work these of these workers have their own work queue",
    "start": "2052919",
    "end": "2059638"
  },
  {
    "text": "and when one of the of the workers run out of his messages it tried to steal from the other workers so this and it actually turns",
    "start": "2059639",
    "end": "2067040"
  },
  {
    "text": "out this has had a little bit better performance and throughput than the classic St like standard thread executor",
    "start": "2067040",
    "end": "2074839"
  },
  {
    "text": "service that that you have another another way I think think as this as an",
    "start": "2074839",
    "end": "2079878"
  },
  {
    "text": "example of a way to to to use the work the the the fork joint pool is through this this parallel",
    "start": "2079879",
    "end": "2087040"
  },
  {
    "text": "array other other examples of fork joint pool is like sculls parallel collections relies heav heavily on them that means",
    "start": "2087040",
    "end": "2093599"
  },
  {
    "start": "2093000",
    "end": "2136000"
  },
  {
    "text": "that you can take any collection in in the scholar Library map a list or or or",
    "start": "2093599",
    "end": "2099960"
  },
  {
    "text": "or set or tree map or whatever you want and you can just say dot par you're going to create a parallel projection",
    "start": "2099960",
    "end": "2106960"
  },
  {
    "text": "and that means that all transformation methods you pass in like for each or whatever you you do would now be run in",
    "start": "2106960",
    "end": "2113680"
  },
  {
    "text": "in parallel right they they they're talking about if Java should add that Java's copying every all the good stuff",
    "start": "2113680",
    "end": "2120000"
  },
  {
    "text": "in Scola so this is this was sort of expected so they talk about if they should add that to Java 8 or something",
    "start": "2120000",
    "end": "2126560"
  },
  {
    "text": "like that we also use as I said in AA so how does we use it it all started out",
    "start": "2126560",
    "end": "2133400"
  },
  {
    "text": "with the Benchmark on our 48 core box down in loan we bought this beefy box to really I mean see I mean how can perform",
    "start": "2133400",
    "end": "2139839"
  },
  {
    "start": "2136000",
    "end": "2148000"
  },
  {
    "text": "on very very good very very good hardware and we ran our Benchmark we",
    "start": "2139839",
    "end": "2146240"
  },
  {
    "text": "weren't really we weren't really pleased it doesn't say you much this but I will give you something more so you",
    "start": "2146240",
    "end": "2152160"
  },
  {
    "start": "2148000",
    "end": "2396000"
  },
  {
    "text": "can see about see it in in context but for for this Ty typical Benchmark you can see like a completely flattens out",
    "start": "2152160",
    "end": "2158720"
  },
  {
    "text": "after about 7 eight actors or so we couldn't get it any any any further so",
    "start": "2158720",
    "end": "2165160"
  },
  {
    "text": "so then we switched to the fork joint pool and that give that did actually didn't give us much more either so we",
    "start": "2165160",
    "end": "2170720"
  },
  {
    "text": "then we started sing thinking okay what's what's the problem it turns out that dog Leah he's the guy he's the guy",
    "start": "2170720",
    "end": "2176760"
  },
  {
    "text": "that wrote this he wrote most of java Ule concurrent he's on our Advisory board at typ save so we have pretty good",
    "start": "2176760",
    "end": "2182480"
  },
  {
    "text": "good connections with him okay first I mean we we just just just to show you",
    "start": "2182480",
    "end": "2188280"
  },
  {
    "text": "what in details what the what the problem was then we when we ran it you can see I don't know if you can see here but this is all red here is's tries to",
    "start": "2188280",
    "end": "2195040"
  },
  {
    "text": "highlight that the context switches were just across the roof more than 70,000 context switches per second which is",
    "start": "2195040",
    "end": "2202119"
  },
  {
    "text": "like way way more than it should be something was really bottlenecking okay the question was",
    "start": "2202119",
    "end": "2207480"
  },
  {
    "text": "what so so so so what we actually did was that we we sent we we we we went to",
    "start": "2207480",
    "end": "2213599"
  },
  {
    "text": "dog and said what's up with this I mean you're you were bottlenecking in in in in your fork joint pool framework and he",
    "start": "2213599",
    "end": "2220119"
  },
  {
    "text": "said yeah I sort of I sort of expected this to happen I was just basically waiting for for for someone to run run",
    "start": "2220119",
    "end": "2226240"
  },
  {
    "text": "into this great now I have test case let's fix it and it actually turned out that no one had run into this because no",
    "start": "2226240",
    "end": "2232680"
  },
  {
    "text": "one had actually optimized actually the whole code like like exercised the hell",
    "start": "2232680",
    "end": "2237960"
  },
  {
    "text": "out of for joints that much like we did in AAS in know actually hit this but what what what dog did instead",
    "start": "2237960",
    "end": "2245480"
  },
  {
    "text": "of the or old Fork joint pool had had had the design of it it's a",
    "start": "2245480",
    "end": "2250839"
  },
  {
    "text": "single single Global queue and it had about and each worker had his own queue",
    "start": "2250839",
    "end": "2256960"
  },
  {
    "text": "okay so so then Rand like randomly sort of each each each of the workers or took",
    "start": "2256960",
    "end": "2264400"
  },
  {
    "text": "jobs from the global but every time you you dispatch you dispatch a new job it was to the global queue then you also",
    "start": "2264400",
    "end": "2270520"
  },
  {
    "text": "had this thing of The Works dealing like so first you so first you have the problem you have the ball neck in the single Global queue and secondly you had",
    "start": "2270520",
    "end": "2278319"
  },
  {
    "text": "this sort of decision should I for the re worker should I try to steal job from jobs from some other one or should I",
    "start": "2278319",
    "end": "2284280"
  },
  {
    "text": "take from the global queue when I when I run run when I have run out of jobs so what dog was basically just completely",
    "start": "2284280",
    "end": "2290359"
  },
  {
    "text": "get rid of the of the global que stripe it so you only so each worker only had his own one and used the thread local",
    "start": "2290359",
    "end": "2296040"
  },
  {
    "text": "random to like randomly assign to these and what and what what and what that made it happen here's the old Benchmark",
    "start": "2296040",
    "end": "2303200"
  },
  {
    "text": "so like tops out after like 15 million 1.5 million messages a second with with this change that's actually not yet",
    "start": "2303200",
    "end": "2310119"
  },
  {
    "text": "shipped in Java one Java 7 we have S embedded our own Fork joint version inside AA that that has this fixed you",
    "start": "2310119",
    "end": "2317079"
  },
  {
    "text": "see it just goes all the way up to 20 million 20 million messages a second",
    "start": "2317079",
    "end": "2322640"
  },
  {
    "text": "then after some even more benchmarking as you can see over here so the the Contex switch is now down to like 1,000",
    "start": "2322640",
    "end": "2328839"
  },
  {
    "text": "per per per per second which is where it really should be and with some even more",
    "start": "2328839",
    "end": "2334520"
  },
  {
    "text": "tweaking both both both internally in the for joint pool as well as in AA we were able to push more than 50 million",
    "start": "2334520",
    "end": "2342040"
  },
  {
    "text": "mess 50 million messages a second and that this was only like as the nice",
    "start": "2342040",
    "end": "2348319"
  },
  {
    "text": "thing is that this wouldn't have happened if we we wouldn't have been able to use the fork joint pool and ran",
    "start": "2348319",
    "end": "2353400"
  },
  {
    "text": "into this bug so it could it could be fixed and that's something like everyone",
    "start": "2353400",
    "end": "2358960"
  },
  {
    "text": "sure can can benefit now this fix will of course come in in Java 7 so let's see how much time I have we",
    "start": "2358960",
    "end": "2367480"
  },
  {
    "text": "start we start 5 minutes late so 10 minutes or so okay so I just want to",
    "start": "2367480",
    "end": "2372960"
  },
  {
    "text": "talk about the the the final thing and that is how how how you deal with error recovery and failure recovery in in in",
    "start": "2372960",
    "end": "2380280"
  },
  {
    "text": "uh in AA so first I mean if you if you look at failure recovery from a Java",
    "start": "2380280",
    "end": "2385520"
  },
  {
    "text": "perspective okay I think it's completely broken I have to say that at least",
    "start": "2385520",
    "end": "2391359"
  },
  {
    "text": "working now with with a different I think Superior way of dealing with with with failure the problem is that in Java",
    "start": "2391359",
    "end": "2397520"
  },
  {
    "start": "2396000",
    "end": "2734000"
  },
  {
    "text": "cc++ and so on everything that using like threads as as the as the core construct unit of computation you can",
    "start": "2397520",
    "end": "2404359"
  },
  {
    "text": "say is that you you're giving a single thread of control okay this means",
    "start": "2404359",
    "end": "2410079"
  },
  {
    "text": "that if something blows up in your thread what what's what what's happening if you if you haven't guarded yourself",
    "start": "2410079",
    "end": "2416040"
  },
  {
    "text": "you will get a like B basically the only thing you get is is a stack Trace all the way up to your thread new thread or",
    "start": "2416040",
    "end": "2421720"
  },
  {
    "text": "Java executed service then it's dead silence",
    "start": "2421720",
    "end": "2427680"
  },
  {
    "text": "it's impossible to find out right no other thread will ever find out",
    "start": "2427680",
    "end": "2433400"
  },
  {
    "text": "that this that this thread blew up because exceptions do not propagate to cross threads that means that in order",
    "start": "2433400",
    "end": "2440319"
  },
  {
    "text": "to play safe you need to do all your recovery in this single thread the same thread as you do your computation you",
    "start": "2440319",
    "end": "2446079"
  },
  {
    "text": "need to do your a recovery okay the bad thing is that this leads to",
    "start": "2446079",
    "end": "2451720"
  },
  {
    "text": "extremely defensive programming you basically have to have to add your at TR catches all over the place",
    "start": "2451720",
    "end": "2457880"
  },
  {
    "text": "to just feel safe okay so it's it's so your business logic becomes very Tangled",
    "start": "2457880",
    "end": "2463480"
  },
  {
    "text": "with with your error handling logic and and is also everywhere right since",
    "start": "2463480",
    "end": "2468599"
  },
  {
    "text": "something bad can basically happen everywhere in the in in the classic Java program you need to have this tricast",
    "start": "2468599",
    "end": "2475560"
  },
  {
    "text": "with error handling all over the place completely pollutes your whole software",
    "start": "2475560",
    "end": "2481119"
  },
  {
    "text": "architecture okay I really think we can do better we can do better than this and that is the sort of the modest attempt",
    "start": "2481119",
    "end": "2487359"
  },
  {
    "text": "of the actor mold to solve and I think it really does does deliver people call that let it crash as the sort of",
    "start": "2487359",
    "end": "2494520"
  },
  {
    "text": "solution to the problem and that's where the like the fourth sort of construct",
    "start": "2494520",
    "end": "2500359"
  },
  {
    "text": "comes in supervise so with supervision you remember the actor had it like a tree or created as trees each parent",
    "start": "2500359",
    "end": "2508800"
  },
  {
    "text": "supervises it it its children well what this means is basically that whenever",
    "start": "2508800",
    "end": "2517240"
  },
  {
    "text": "whenever something bad happens the for the guy that's actually running the code",
    "start": "2517240",
    "end": "2522280"
  },
  {
    "text": "he doesn't care he just dies then then a notification will be sent up to his",
    "start": "2522280",
    "end": "2527400"
  },
  {
    "text": "parent and he can take action upon that so the business logic is completely",
    "start": "2527400",
    "end": "2533200"
  },
  {
    "text": "free from error handling code secondly it's configured rather than coded it's",
    "start": "2533200",
    "end": "2540160"
  },
  {
    "text": "all declaratively configured in in the inside each each of the parents right so",
    "start": "2540160",
    "end": "2546720"
  },
  {
    "text": "so why way of looking at it is that you create systems like like an onion okay",
    "start": "2546720",
    "end": "2552200"
  },
  {
    "text": "so your your most important state the state that you just can't lose then it's like game over for",
    "start": "2552200",
    "end": "2558319"
  },
  {
    "text": "application that you put inside in the innermost of this onion that's what you put there okay and then you layer levels",
    "start": "2558319",
    "end": "2566720"
  },
  {
    "text": "of Defense around that state right so the idea is that if I'm holding on to",
    "start": "2566720",
    "end": "2572559"
  },
  {
    "text": "something precious and and and and and I and I want to do some some computation or ask some guy that might like yell and",
    "start": "2572559",
    "end": "2579680"
  },
  {
    "text": "scream at me or something I never do that myself instead I'm creating a new actor I'm delegating that to him if he",
    "start": "2579680",
    "end": "2587440"
  },
  {
    "text": "runs out on this Minefield and blows himself up that's that's okay at least in my perspective right because I can",
    "start": "2587440",
    "end": "2593040"
  },
  {
    "text": "just create a new guy try try it again over here and if that doesn't work it might be better spawn it up on another",
    "start": "2593040",
    "end": "2599359"
  },
  {
    "text": "machine might be something funky with I don't know with with with Nick here if we going talk through an external",
    "start": "2599359",
    "end": "2604960"
  },
  {
    "text": "service or something like that right so you you so you layer these",
    "start": "2604960",
    "end": "2611240"
  },
  {
    "text": "levels of Defense you never do anything yourself you delegate okay so so so",
    "start": "2611240",
    "end": "2616319"
  },
  {
    "text": "instead you you create your architectural system similar to this we talk about something called eror kernel",
    "start": "2616319",
    "end": "2622480"
  },
  {
    "text": "if you Google for it you will find hits like that's sort of the way of of of talking about this this center of the",
    "start": "2622480",
    "end": "2629280"
  },
  {
    "text": "onion that's my era Kel that's the stuff I just can't lose and then and and then I just create levels of Defense so if if",
    "start": "2629280",
    "end": "2637359"
  },
  {
    "text": "a request comes in here for example something terribly happens blows up what's going to happen a notification",
    "start": "2637359",
    "end": "2643720"
  },
  {
    "text": "will be sent up to his parent running in another thread now so exceptions",
    "start": "2643720",
    "end": "2648800"
  },
  {
    "text": "propagate across threads nicely like they they should he can take action upon that and just restart the guy it it",
    "start": "2648800",
    "end": "2655920"
  },
  {
    "text": "might be that some group of actors together Implement some sort of service they are like implicitly coupled it",
    "start": "2655920",
    "end": "2661079"
  },
  {
    "text": "might be that I just can't just kill one then can then you can group them and say okay if one then all it's it's called",
    "start": "2661079",
    "end": "2667319"
  },
  {
    "text": "all for one strategy like in the Three Musketeers uh it might actually be that",
    "start": "2667319",
    "end": "2674520"
  },
  {
    "text": "this guy his his his parent he's he can't deal with the with the error it might be above his pay grade to actually",
    "start": "2674520",
    "end": "2680520"
  },
  {
    "text": "do something about it what's going to happen then that he will just kill his whole subtree and",
    "start": "2680520",
    "end": "2686640"
  },
  {
    "text": "escalate hopefully someone higher up will have the knowledge power or whatever to deal with the problem okay",
    "start": "2686640",
    "end": "2693319"
  },
  {
    "text": "it might be that this around is like out of meor out of memory error then it will hit the ER kernel it's not really any",
    "start": "2693319",
    "end": "2700200"
  },
  {
    "text": "chance to recover from that but that is very that is like an exception it's very unusual normally most errors are able to",
    "start": "2700200",
    "end": "2706599"
  },
  {
    "text": "recover from and what you get here then is a system that can heal itself it can actually deal with it with its failure",
    "start": "2706599",
    "end": "2713119"
  },
  {
    "text": "by itself but if it hits the Eric kernel then if you run more than one box then",
    "start": "2713119",
    "end": "2718839"
  },
  {
    "text": "you're still fine because you can actually link across machines so you can actually take your actor tree and put",
    "start": "2718839",
    "end": "2724040"
  },
  {
    "text": "them out on different boxes you you can link them and and they will be get notified even",
    "start": "2724040",
    "end": "2729599"
  },
  {
    "text": "though they're run even though they're running on on different machines and by by default each actor actually has a",
    "start": "2729599",
    "end": "2734839"
  },
  {
    "start": "2734000",
    "end": "2786000"
  },
  {
    "text": "default like supervisor strategy that you if you don't do anything you're usually fine with the default but it can",
    "start": "2734839",
    "end": "2740720"
  },
  {
    "text": "be overrated and the way you do it is like this it's a bit ugly from java as well I have to say being used to",
    "start": "2740720",
    "end": "2746240"
  },
  {
    "text": "Scala but basically it's a DSL here the the gist of it is here right in the apply the rest is just boiler plate",
    "start": "2746240",
    "end": "2752800"
  },
  {
    "text": "basically so you can see if if the exception that comes in here is is an arithmetic except then it says it's",
    "start": "2752800",
    "end": "2759359"
  },
  {
    "text": "resume that's sort of the the the directive for how we should deal with the actor that fail if it's null pointer",
    "start": "2759359",
    "end": "2766480"
  },
  {
    "text": "here it should restart else it should escalate meaning propagate the exception",
    "start": "2766480",
    "end": "2772680"
  },
  {
    "text": "up and apart from that it's just a reg a regular actor and the actually this applies then to the guy that that's",
    "start": "2772680",
    "end": "2779720"
  },
  {
    "text": "created out of this context to his children okay and from from from the actor gu perspective this is a scholar",
    "start": "2779720",
    "end": "2786559"
  },
  {
    "start": "2786000",
    "end": "2968000"
  },
  {
    "text": "by the way I didn't have time to rewrite this I apologize but basically looks very similar basically you have chances",
    "start": "2786559",
    "end": "2792800"
  },
  {
    "text": "of hooking into to callbacks you can do something when I'm started after I'm started after I'm restarted before I'm",
    "start": "2792800",
    "end": "2798880"
  },
  {
    "text": "restarted after I'm killed before I'm killed and so on so there you can hook in like in do things like cleaning up resources before and like reinitializing",
    "start": "2798880",
    "end": "2807680"
  },
  {
    "text": "yourself after the restart and so on so this was AKA 2x at least when it comes from the",
    "start": "2807680",
    "end": "2813480"
  },
  {
    "text": "actor's perspective there there's much much more to it I don't have time to go through all of that today since since",
    "start": "2813480",
    "end": "2820280"
  },
  {
    "text": "since I'm little running a little bit behind but it it it it has a lot it has",
    "start": "2820280",
    "end": "2825640"
  },
  {
    "text": "a completely brand new cluster module for example that's coming out in two in two one that gives you the elasticity",
    "start": "2825640",
    "end": "2830920"
  },
  {
    "text": "then really nodes can come and go use cluster membership so you can you can subscribe on events it has all these",
    "start": "2830920",
    "end": "2836800"
  },
  {
    "text": "adaptive routers that will automatically five no come along will just automatically spawn up new new new stuff",
    "start": "2836800",
    "end": "2842680"
  },
  {
    "text": "on those if those leave they they can be moved over and stuff like that it does an event bus it has like great",
    "start": "2842680",
    "end": "2849400"
  },
  {
    "text": "integration with a bunch of Frameworks like Apache camel for example you can use AAS actors as camel end points just",
    "start": "2849400",
    "end": "2856520"
  },
  {
    "text": "talk through them over to camel and receive messages through camel or use",
    "start": "2856520",
    "end": "2862160"
  },
  {
    "text": "sir mq for example and and we have many different ways of deal deal with concurrency also where actors is not a",
    "start": "2862160",
    "end": "2867720"
  },
  {
    "text": "good fit software transaction memory is one we have something called data flow concurrency we have a great Futures",
    "start": "2867720",
    "end": "2874000"
  },
  {
    "text": "Library that's nothing close to the extremely crippled version there's in Java Ule concurrent that I encourage you",
    "start": "2874000",
    "end": "2881520"
  },
  {
    "text": "to take a look at so this was basically it I had some slides on the clustering as well but I won't have time to go",
    "start": "2881520",
    "end": "2887319"
  },
  {
    "text": "through those so basically if you want to learn more go to AA doio we have about 400 Pages",
    "start": "2887319",
    "end": "2894839"
  },
  {
    "text": "reference documentation so pretty much everything should be there join the mailing list ask questions all all",
    "start": "2894839",
    "end": "2900800"
  },
  {
    "text": "stupid questions are very welcome we would love to have you part of it there's a whole bunch of great blogs uh",
    "start": "2900800",
    "end": "2907280"
  },
  {
    "text": "out there we had a thing we had thing called AKA summer blog we encouraged the community during the summer to write",
    "start": "2907280",
    "end": "2912480"
  },
  {
    "text": "blogs for the AKA team blog and we came it was more like eight or nine different",
    "start": "2912480",
    "end": "2918079"
  },
  {
    "text": "great blogs about how to use ARA in the real world how people actually use it in the real world and so on if you want to",
    "start": "2918079",
    "end": "2923559"
  },
  {
    "text": "look for like to support the training we have AA training and stuff if you want that's for pay of course everything else",
    "start": "2923559",
    "end": "2930400"
  },
  {
    "text": "up to now is Free by the way that's the only thing that you can find stuff we're",
    "start": "2930400",
    "end": "2936400"
  },
  {
    "text": "actually you have to pay like support like training and stuff but that might be useful as well so that was everything I tried I was planning on sharing yeah",
    "start": "2936400",
    "end": "2944240"
  },
  {
    "text": "I'm here rest of the day we don't think we have time for questions now but please come up to me outside here or",
    "start": "2944240",
    "end": "2950640"
  },
  {
    "text": "just grab me over the party tonight or so I'll explain more if you want thanks",
    "start": "2950640",
    "end": "2958680"
  }
]