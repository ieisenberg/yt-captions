[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "[Music]",
    "start": "3510",
    "end": "7529"
  },
  {
    "text": "hi everyone I'm Lynn Clark and I make code cartoons and I also work at Mozilla where I get",
    "start": "12920",
    "end": "21220"
  },
  {
    "text": "to tinker with programming languages like JavaScript and rust and with things like webassembly which is well I'll be",
    "start": "21220",
    "end": "26830"
  },
  {
    "text": "talking about today and I just want to let you know if you have any questions as I'm going through the talk you can put them in the go-to app or of course",
    "start": "26830",
    "end": "34090"
  },
  {
    "text": "ask them at the end before I start I want to let folks know that this talk is",
    "start": "34090",
    "end": "40420"
  },
  {
    "text": "a little different from the other talks I've given it goes in depth it doesn't",
    "start": "40420",
    "end": "46449"
  },
  {
    "text": "go quite as much in depth as other talks I've given but I think you're still gonna like it so first off what is web",
    "start": "46449",
    "end": "53800"
  },
  {
    "text": "assembly what assembly is a way of running programming languages other than",
    "start": "53800",
    "end": "58870"
  },
  {
    "text": "JavaScript on the web up until now if you wanted to do something on a web page",
    "start": "58870",
    "end": "64210"
  },
  {
    "start": "60000",
    "end": "128000"
  },
  {
    "text": "like run a calculation or change something in the Dom the only language that you could use was JavaScript but",
    "start": "64210",
    "end": "71560"
  },
  {
    "text": "now that there's web assembly you can use other languages like C or C++ or rust you compile them to web assembly",
    "start": "71560",
    "end": "78490"
  },
  {
    "text": "and then you can run them on the web page just like you would JavaScript now I wish I had time to go more in detail",
    "start": "78490",
    "end": "84340"
  },
  {
    "text": "about the basics of how web assembly works because it is pretty fascinating but unfortunately this talk is too",
    "start": "84340",
    "end": "89740"
  },
  {
    "text": "jam-packed with the future that I really can't talk too much about what's going on in the present what already exists in",
    "start": "89740",
    "end": "98020"
  },
  {
    "text": "fact it's so jam-packed that I can't even go into depth about all the things that are in this talk but I do like",
    "start": "98020",
    "end": "104259"
  },
  {
    "text": "giving more depth so I have posted an article two weeks ago you can find on",
    "start": "104259",
    "end": "109330"
  },
  {
    "text": "the hacks blog and that covers a lot of the stuff with extra links to give you that more that depth now the first few",
    "start": "109330",
    "end": "117369"
  },
  {
    "text": "links in that article are a series that I published when webassembly first",
    "start": "117369",
    "end": "122380"
  },
  {
    "text": "started being turned on by default in browsers in March of 2017 you might have",
    "start": "122380",
    "end": "129670"
  },
  {
    "start": "128000",
    "end": "189000"
  },
  {
    "text": "seen this this is one of the illustrations from that one thing that",
    "start": "129670",
    "end": "134890"
  },
  {
    "text": "I've noticed and I found interesting since I started talking about web assembly back then is this misconception",
    "start": "134890",
    "end": "140260"
  },
  {
    "text": "that people have and the misconception is that the web assembly that landed in browsers back in 2017 which we called",
    "start": "140260",
    "end": "147190"
  },
  {
    "text": "the Minimum Viable Product or the VP of webassembly people think that that is the final version of web sembly they",
    "start": "147190",
    "end": "153720"
  },
  {
    "text": "think that that is the web assembly that we're going to have all the way into the future and I can understand where that",
    "start": "153720",
    "end": "159720"
  },
  {
    "text": "misconception comes from the web assembly community group is really committed to backwards compatibility so",
    "start": "159720",
    "end": "166260"
  },
  {
    "text": "the web assembly that you create today will continue working in browsers into the future but that doesn't mean that",
    "start": "166260",
    "end": "173130"
  },
  {
    "text": "its feature complete it doesn't mean that web assembly has all of the features that is going to have and in",
    "start": "173130",
    "end": "179640"
  },
  {
    "text": "fact that's far from the case there are so many features that are coming to web assembly that are going to fundamentally",
    "start": "179640",
    "end": "185940"
  },
  {
    "text": "alter the kinds of things that you can do with web assembly I think of these",
    "start": "185940",
    "end": "191130"
  },
  {
    "start": "189000",
    "end": "209000"
  },
  {
    "text": "future features kind of like the skill tree in a video game we've fully filled in the top view of these skills but",
    "start": "191130",
    "end": "198180"
  },
  {
    "text": "there's still this whole skill tree below that we need to fill in to unlock all of the applications so let's look at",
    "start": "198180",
    "end": "204840"
  },
  {
    "text": "what's been filled in already and then we can see what is yet to come so the",
    "start": "204840",
    "end": "211290"
  },
  {
    "start": "209000",
    "end": "272000"
  },
  {
    "text": "very beginning of webassembly story starts with unscripted which made it possible to run C++ code",
    "start": "211290",
    "end": "216870"
  },
  {
    "text": "on the web by transpiling it to JavaScript and that made it possible to bring large existing C++ code bases for",
    "start": "216870",
    "end": "223290"
  },
  {
    "text": "things like games and desktop applications to the web but it turns out that the jas it automatically generated",
    "start": "223290",
    "end": "229830"
  },
  {
    "text": "was still significantly slower than when that same code was running natively a stroke of insight fixed this though one",
    "start": "229830",
    "end": "237660"
  },
  {
    "text": "of Firefox the Firefox JavaScript engines engineers he saw how he could",
    "start": "237660",
    "end": "243959"
  },
  {
    "text": "make this run fast and that gave us assam j/s once the other browser vendors",
    "start": "243959",
    "end": "249630"
  },
  {
    "text": "saw how fast as of j/s could go they started adding optimizations to their engines too but that wasn't the end of",
    "start": "249630",
    "end": "256590"
  },
  {
    "text": "the story that was just the beginning there was still a lot of things that engines could do to make this faster but",
    "start": "256590",
    "end": "262740"
  },
  {
    "text": "they couldn't do it in JavaScript itself instead they needed a new language one that was designed specifically to be",
    "start": "262740",
    "end": "268650"
  },
  {
    "text": "compiled too and that was web assembly so what skills were needed for this",
    "start": "268650",
    "end": "274860"
  },
  {
    "start": "272000",
    "end": "295000"
  },
  {
    "text": "first version of web assembly to get the minimum viable product that could actually run C and C++ code on the web",
    "start": "274860",
    "end": "282660"
  },
  {
    "text": "well the folks that were working on what assembly knew that they didn't just want to support C and C++ they wanted many",
    "start": "282660",
    "end": "288000"
  },
  {
    "text": "different languages to be able to compile to web assembly eventually so they needed a language agnostic compile",
    "start": "288000",
    "end": "294300"
  },
  {
    "text": "target they needed something like the assembly language that things like desktop applications are compiled to",
    "start": "294300",
    "end": "300780"
  },
  {
    "text": "like x86 but this assembly language wouldn't be for an actual physical machine it would be for a conceptual",
    "start": "300780",
    "end": "307920"
  },
  {
    "text": "machine and that compiler target had to be designed so that it could run very fast otherwise web assembly applications",
    "start": "307920",
    "end": "315660"
  },
  {
    "text": "running on the web wouldn't keep up with users expectations for smooth interactions in gameplay and there's",
    "start": "315660",
    "end": "321810"
  },
  {
    "text": "also load ton users have certain expectations about how quickly something will load so for desktop applications",
    "start": "321810",
    "end": "329580"
  },
  {
    "text": "the expectation is that they'll load fast because they're already installed on your computer for web applications",
    "start": "329580",
    "end": "336300"
  },
  {
    "text": "the expectation is also that they'll load pretty fast because web applications are usually designed so",
    "start": "336300",
    "end": "342060"
  },
  {
    "text": "that they don't have to deliver too much data over the network when you combine",
    "start": "342060",
    "end": "347550"
  },
  {
    "text": "these two things though it gets tricky desktop applications are usually pretty",
    "start": "347550",
    "end": "352860"
  },
  {
    "text": "large code bases so when they're on the web there is a lot to download and compile when the user first goes to the",
    "start": "352860",
    "end": "358770"
  },
  {
    "text": "URL so we needed our compiler target to be compact so that it could go over the",
    "start": "358770",
    "end": "364740"
  },
  {
    "start": "360000",
    "end": "442000"
  },
  {
    "text": "web quickly the language is that target web assembly they also need to be able",
    "start": "364740",
    "end": "370260"
  },
  {
    "text": "to use memory differently from the way that JavaScript uses memory they needed to be able to directly manage their",
    "start": "370260",
    "end": "376710"
  },
  {
    "text": "memory to say which bites go together and this is because languages like C and",
    "start": "376710",
    "end": "381990"
  },
  {
    "text": "C++ have a low-level feature called pointers you can have a variable that doesn't have a value in it but instead",
    "start": "381990",
    "end": "388320"
  },
  {
    "text": "has the memory address of a value so if you're going to support pointers the program needs to be able to write and",
    "start": "388320",
    "end": "394290"
  },
  {
    "text": "read from particular addresses but you can have the program that you downloaded",
    "start": "394290",
    "end": "399720"
  },
  {
    "text": "from the web just accessing bytes in memory willy-nilly using whatever addresses they want so in order to",
    "start": "399720",
    "end": "406230"
  },
  {
    "text": "create a secure way of giving access to memory like a native program is used to we had to create something that could",
    "start": "406230",
    "end": "411600"
  },
  {
    "text": "give access to very specific parts of and nothing else to do this weapon",
    "start": "411600",
    "end": "418190"
  },
  {
    "text": "simply uses a linear memory model and this is implemented using these things called typed arrays which is basically",
    "start": "418190",
    "end": "424760"
  },
  {
    "text": "just like an array like a JavaScript array except that this array only contains bytes of memory so when you're",
    "start": "424760",
    "end": "431300"
  },
  {
    "text": "accessing it you're just using the array indexes which you can treat as though they were memory addresses and this",
    "start": "431300",
    "end": "438440"
  },
  {
    "text": "means that you can pretend that this array is C++ memory so with all of these",
    "start": "438440",
    "end": "443780"
  },
  {
    "start": "442000",
    "end": "488000"
  },
  {
    "text": "things in place you could run desktop applications and games in your browser as if they were running natively on your computer and that was pretty much the",
    "start": "443780",
    "end": "451700"
  },
  {
    "text": "skill set that webassembly had one was released as an MVP it truly was an MVP a Minimum Viable Product it allowed",
    "start": "451700",
    "end": "459050"
  },
  {
    "text": "certain kinds of applications to work and you may have actually seen one of these applications we had this arch at",
    "start": "459050",
    "end": "466580"
  },
  {
    "text": "J's confi you here in Berlin a few months ago and it's also been a github universe that's going to other",
    "start": "466580",
    "end": "471620"
  },
  {
    "text": "conferences that you can program you can program animations on the space using web assembly so if you get a chance you",
    "start": "471620",
    "end": "478700"
  },
  {
    "text": "should check this out even though the MVP opened up some use",
    "start": "478700",
    "end": "484070"
  },
  {
    "text": "cases though there were still a host of others to unlock the next achievement to",
    "start": "484070",
    "end": "490460"
  },
  {
    "start": "488000",
    "end": "514000"
  },
  {
    "text": "unlock is heavier-weight applications can you imagine if something like",
    "start": "490460",
    "end": "495650"
  },
  {
    "text": "Photoshop were running in your browser if you could instantaneously load it on any device like you do with Gmail we've",
    "start": "495650",
    "end": "502670"
  },
  {
    "text": "already started seeing things like this for example the AutoCAD team has made their CAD software available in the",
    "start": "502670",
    "end": "508790"
  },
  {
    "text": "browser and adobe has made lightroom available through the browser using web assembly as well but there are still a",
    "start": "508790",
    "end": "515390"
  },
  {
    "start": "514000",
    "end": "606000"
  },
  {
    "text": "few features that we needs put in place to make sure that all these applications even the heaviest of heavyweight",
    "start": "515390",
    "end": "520849"
  },
  {
    "text": "applications can run well in the browser so one big one we need support from",
    "start": "520849",
    "end": "526220"
  },
  {
    "text": "multi-threading modern-day computers have multiple cores is basically like a head that has multiple brains that can",
    "start": "526220",
    "end": "532160"
  },
  {
    "text": "all be working on the same problem at the same time and that can make things go much faster but to make the use of",
    "start": "532160",
    "end": "538280"
  },
  {
    "text": "those cores you need to support threading alongside threading there's",
    "start": "538280",
    "end": "544010"
  },
  {
    "text": "another technique that utilizes modern hardware and which enables you to process the in parallel that is sim D single",
    "start": "544010",
    "end": "551720"
  },
  {
    "text": "instruction multiple data with sim D it's possible to take a chunk of memory and split it up across different",
    "start": "551720",
    "end": "557899"
  },
  {
    "text": "execution units which are kind of like cores and then you have the same bit of code the same instruction run across all",
    "start": "557899",
    "end": "564050"
  },
  {
    "text": "of those execution units but they'll each be acting on their own bit of the data",
    "start": "564050",
    "end": "569290"
  },
  {
    "text": "another hardware capability that webassembly needs to take full advantage of is 64-bit addressing memory addresses",
    "start": "569290",
    "end": "577100"
  },
  {
    "text": "are just numbers so if your memory addresses are only 32 bits long you can only have so many memory addresses you",
    "start": "577100",
    "end": "583670"
  },
  {
    "text": "can only have enough addresses for 4 gigabytes of linear memory but with 64-bit addressing you have 16 exabytes",
    "start": "583670",
    "end": "591100"
  },
  {
    "text": "now of course you don't actually have 16 exabytes of actual memory in your computer so the maximum is subject to",
    "start": "591100",
    "end": "597559"
  },
  {
    "text": "however much memory your system can actually give you but this takes the artificial limitation on address space",
    "start": "597559",
    "end": "603470"
  },
  {
    "text": "out of webassembly for these applications we don't just need them to run fast though we need",
    "start": "603470",
    "end": "610639"
  },
  {
    "start": "606000",
    "end": "711000"
  },
  {
    "text": "load times to be even faster than they already are there are a few skills that we need",
    "start": "610639",
    "end": "615970"
  },
  {
    "text": "specifically to improve load times one big step is to do streaming compilation",
    "start": "615970",
    "end": "621589"
  },
  {
    "text": "to compile a web assembly file well is still being downloaded webassembly was designed specifically to enable easy",
    "start": "621589",
    "end": "628670"
  },
  {
    "text": "streaming compilation in firefox we actually we compile it so fast faster",
    "start": "628670",
    "end": "634730"
  },
  {
    "text": "than its coming in over the network that's pretty much done compiling by the time you finish downloading the file and",
    "start": "634730",
    "end": "640459"
  },
  {
    "text": "other browsers are adding streaming to another thing that helps is having a",
    "start": "640459",
    "end": "646279"
  },
  {
    "text": "tiered compiler for us and Firefox that means having two compilers the first one the baseline compiler kicks in as soon",
    "start": "646279",
    "end": "652939"
  },
  {
    "text": "as the file starts downloading and the code it generates is fast but it's not a hundred percent as fast as it could be",
    "start": "652939",
    "end": "659740"
  },
  {
    "text": "to get that extra bit of performance we run another compiler called the optimizing compiler on several threads",
    "start": "659740",
    "end": "665420"
  },
  {
    "text": "in the background now this one takes a longer to compile but it generates extremely fast code so once that's done",
    "start": "665420",
    "end": "672499"
  },
  {
    "text": "we swap out the baseline version with the fully optimized version and we're also working on a new optimizing",
    "start": "672499",
    "end": "679189"
  },
  {
    "text": "compiler called crane lift it's designed to compile code quickly it can compile code in parallel at a",
    "start": "679189",
    "end": "685240"
  },
  {
    "text": "function by function level at the same time the code it generates gets even better performance than our current",
    "start": "685240",
    "end": "691120"
  },
  {
    "text": "optimizing compiler and this is in the development version of Firefox right now",
    "start": "691120",
    "end": "697149"
  },
  {
    "text": "it's disabled by default but once we enable it we'll get to the fully optimized code even quicker and that",
    "start": "697149",
    "end": "703450"
  },
  {
    "text": "code will run even faster but there's an even better trick that we can use to make it we don't have to compile at all",
    "start": "703450",
    "end": "709420"
  },
  {
    "text": "in most of cases with web assembly if you load the same code on to page loads",
    "start": "709420",
    "end": "715450"
  },
  {
    "start": "711000",
    "end": "831000"
  },
  {
    "text": "it will compile to the same machine code it doesn't need to be changed based on whatever data is flowing through the",
    "start": "715450",
    "end": "721600"
  },
  {
    "text": "code as optimized javascript JIT compilation does this means that we can",
    "start": "721600",
    "end": "727899"
  },
  {
    "text": "store the compiled code in the HTTP cache then when the page is loading and",
    "start": "727899",
    "end": "733089"
  },
  {
    "text": "goes to fetch the wasm file instead of pulling up the the file itself",
    "start": "733089",
    "end": "738250"
  },
  {
    "text": "it'll pull out the precompiled machine code from that cache so this skips compiling completely for any page",
    "start": "738250",
    "end": "744279"
  },
  {
    "text": "they've already visited this in the cache and there are other ways that we can speed this up even further where we",
    "start": "744279",
    "end": "750910"
  },
  {
    "text": "can skip even more work so stay tuned to see what else happens to improve load times where are we with supporting these",
    "start": "750910",
    "end": "758529"
  },
  {
    "text": "have you weighed applications right now for threading we have a proposal is pretty much done but a key piece of that",
    "start": "758529",
    "end": "765070"
  },
  {
    "text": "shared array buffers had to be turned off in browsers early that earlier this year and they're going to be turned on",
    "start": "765070",
    "end": "770770"
  },
  {
    "text": "again turning them off was just a temporary security measure to reduce the impact of the specter security issue",
    "start": "770770",
    "end": "777370"
  },
  {
    "text": "that was discovered in CPUs earlier this year but progress has been made so stay",
    "start": "777370",
    "end": "782529"
  },
  {
    "text": "tuned for that SCIM D is under very active development at the moment woz I'm",
    "start": "782529",
    "end": "788740"
  },
  {
    "text": "64 for this we have a good picture of how it will work it's pretty similar to how x86 our arm added their support for",
    "start": "788740",
    "end": "796480"
  },
  {
    "text": "64-bit addressing we added streaming compilation almost a year ago in Firefox",
    "start": "796480",
    "end": "802480"
  },
  {
    "text": "and other browsers are working on this now too and we also added our baseline compiler around the same time and some",
    "start": "802480",
    "end": "808959"
  },
  {
    "text": "other browsers have been adding the same kind of architecture over the last year in Firefox we're getting close to",
    "start": "808959",
    "end": "815380"
  },
  {
    "text": "landing support for implicit HTTP caching and these other improvements are in discussion even though this is all",
    "start": "815380",
    "end": "822910"
  },
  {
    "text": "still in progress you already see some of these heavyweight applications coming out today because webassembly already gives",
    "start": "822910",
    "end": "829330"
  },
  {
    "text": "these applications the performance that they need but once these features are all in place that's going to be another",
    "start": "829330",
    "end": "835510"
  },
  {
    "start": "831000",
    "end": "855000"
  },
  {
    "text": "achievement unlocked and more of these heavyweight applications are going to be able to come to the browser",
    "start": "835510",
    "end": "841320"
  },
  {
    "text": "but what assembly isn't just for games and for these heavyweight applications it's also meant for braig with regular",
    "start": "841320",
    "end": "847930"
  },
  {
    "text": "web development for the kind of web development that web developers are used to the small modules kind of web",
    "start": "847930",
    "end": "853720"
  },
  {
    "text": "development where small web assembly modules can be introduced in places",
    "start": "853720",
    "end": "859750"
  },
  {
    "start": "855000",
    "end": "906000"
  },
  {
    "text": "where web assembly makes sense those little corners of your app where the app has to do a lot of heavy processing and",
    "start": "859750",
    "end": "866500"
  },
  {
    "text": "which could run faster with web assembly and again this is a case where some of it's already happening you're already",
    "start": "866500",
    "end": "872200"
  },
  {
    "text": "seeing small web assembly modules being incorporated in places where you have tiny modules doing lots of heavy lifting",
    "start": "872200",
    "end": "878260"
  },
  {
    "text": "like the parser in the source Maps library that's used in Firefox dev tools and in web pack by rewriting this source",
    "start": "878260",
    "end": "885850"
  },
  {
    "text": "Maps parser in web assembly the team saw an eleven fold speed-up and word",
    "start": "885850",
    "end": "890920"
  },
  {
    "text": "processing an average speed-up of 86 times faster with web assembly in their new parser as well but for this kind of",
    "start": "890920",
    "end": "898390"
  },
  {
    "text": "use to be really widespread for people to be really comfortable doing it we need to have a few more things in place",
    "start": "898390",
    "end": "904270"
  },
  {
    "text": "so first we need fast calls between javascript and web assembly because if",
    "start": "904270",
    "end": "911290"
  },
  {
    "text": "you're integrating a small module into an existing JavaScript system there's a good chance that you'll need to call",
    "start": "911290",
    "end": "916390"
  },
  {
    "text": "between the two languages a lot so you'll need those calls to be fast but when webassembly first came out these",
    "start": "916390",
    "end": "922180"
  },
  {
    "text": "calls weren't fast this is where we get back to that whole MVP thing the engines",
    "start": "922180",
    "end": "927280"
  },
  {
    "text": "had the minimum support for calls between the two they just made the calls work they didn't make them fast so",
    "start": "927280",
    "end": "933460"
  },
  {
    "text": "engines need to optimize here we've recently finished our work on this in Firefox now some of these calls are",
    "start": "933460",
    "end": "940630"
  },
  {
    "text": "actually faster than non inline JavaScript JavaScript calls and other engines are all",
    "start": "940630",
    "end": "946460"
  },
  {
    "text": "working on these improvements that brings us to another thing though when",
    "start": "946460",
    "end": "951740"
  },
  {
    "text": "you're calling between JavaScript and web assembly you often need to pass data between them you need to pass values",
    "start": "951740",
    "end": "958460"
  },
  {
    "text": "into a web simply function or return value from it this can also be slow and it can be",
    "start": "958460",
    "end": "964190"
  },
  {
    "text": "difficult too there are a couple of reasons why it's hard one is because at",
    "start": "964190",
    "end": "969800"
  },
  {
    "text": "the moment what assembly only understands numbers this means that you can't pass more complex values like",
    "start": "969800",
    "end": "975470"
  },
  {
    "text": "objects in as parameters you need to convert that object into numbers and then put it into linear memory then you",
    "start": "975470",
    "end": "982490"
  },
  {
    "text": "pass webassembly the location in linear memory but that's kind of complicated and it takes some time to convert the",
    "start": "982490",
    "end": "989390"
  },
  {
    "text": "data into linear memory so we need this to be easier and faster another thing",
    "start": "989390",
    "end": "994850"
  },
  {
    "text": "that we need is integration with the browsers built-in ES module support right now if you initiate a web sembly",
    "start": "994850",
    "end": "1001330"
  },
  {
    "text": "module you have to use an imperative API so you call a function and that gives you back the module but that means that",
    "start": "1001330",
    "end": "1007780"
  },
  {
    "text": "the web assembly module isn't really part of Java scripts module graph in order to use import and export like you",
    "start": "1007780",
    "end": "1015220"
  },
  {
    "text": "do with JavaScript modules you need to have that integration just being able to",
    "start": "1015220",
    "end": "1021670"
  },
  {
    "start": "1019000",
    "end": "1266000"
  },
  {
    "text": "import an export doesn't get us all the way there though we need a place to distribute these modules and to download",
    "start": "1021670",
    "end": "1027819"
  },
  {
    "text": "them from and tools to bundle them up what's the NPM for web assembly well",
    "start": "1027820",
    "end": "1033939"
  },
  {
    "text": "what about NPM what's the web pack or parcel for web assembly well what about",
    "start": "1033940",
    "end": "1040750"
  },
  {
    "text": "web pack and parcel these modules shouldn't look any different to the people that are using them so there's no",
    "start": "1040750",
    "end": "1048130"
  },
  {
    "text": "reason to create a whole separate ecosystem we just need tools to integrate with them there's one more",
    "start": "1048130",
    "end": "1055060"
  },
  {
    "text": "thing that we need to do really well in existing JavaScript applications and that's support for older versions of browsers even those that don't know what",
    "start": "1055060",
    "end": "1061900"
  },
  {
    "text": "web assembly is we need to make sure that you don't have to write the whole second implementation in JavaScript just",
    "start": "1061900",
    "end": "1068170"
  },
  {
    "text": "so you can support ie 11 so where are we on this well calls between JavaScript",
    "start": "1068170",
    "end": "1075460"
  },
  {
    "text": "and web assembly are fast and Firefox now and other browsers are also working on it for easy and fast data exchange there",
    "start": "1075460",
    "end": "1082460"
  },
  {
    "text": "are a few proposals that will help with this now as I mentioned before one reason you have to use linear memory for",
    "start": "1082460",
    "end": "1087620"
  },
  {
    "text": "more complex kinds of data is because webassembly only understands numbers the only types it has are in sand floats",
    "start": "1087620",
    "end": "1094450"
  },
  {
    "text": "with the reference types proposal this will change this proposal adds a new",
    "start": "1094450",
    "end": "1099860"
  },
  {
    "text": "type that webassembly functions can take as arguments in return and this type is a reference to an object from outside",
    "start": "1099860",
    "end": "1106159"
  },
  {
    "text": "webassembly so a javascript object now why this simply can't operate directly on this object to actually do things",
    "start": "1106159",
    "end": "1113120"
  },
  {
    "text": "like call a method on it it will still need to use some JavaScript glue code so this means it works but it's slower than",
    "start": "1113120",
    "end": "1119360"
  },
  {
    "text": "it needs to be to speed things up there's a proposal that we've been calling the host bindings proposal",
    "start": "1119360",
    "end": "1125029"
  },
  {
    "text": "although that names likely to change soon it lets a web sampling module declare what glue must be applied to",
    "start": "1125029",
    "end": "1131450"
  },
  {
    "text": "it's imports and exports so that that glue doesn't need to be written in JavaScript and by pulling this glue from",
    "start": "1131450",
    "end": "1137779"
  },
  {
    "text": "JavaScript into web assembly the glue can be optimized away completely when calling built-in web api's there's one",
    "start": "1137779",
    "end": "1145820"
  },
  {
    "text": "more part of the interaction that we can make easier and that has to do with keeping track of how long data needs to",
    "start": "1145820",
    "end": "1152269"
  },
  {
    "text": "stay in memory if you have some data in linear memory that j/s needs to access then you have to leave it there until",
    "start": "1152269",
    "end": "1158720"
  },
  {
    "text": "the JavaScript reads that data but if you leave it in there forever you have what's called a memory leak how do you",
    "start": "1158720",
    "end": "1165440"
  },
  {
    "text": "know when you can delete the data how do you know when JavaScript is done with it currently you have to manage this",
    "start": "1165440",
    "end": "1172220"
  },
  {
    "text": "yourself once the JavaScript is done with the data the J's code has to call something like a free function to free",
    "start": "1172220",
    "end": "1178130"
  },
  {
    "text": "the memory but this is tedious and error-prone to make this process easier",
    "start": "1178130",
    "end": "1183950"
  },
  {
    "text": "we're adding weak refs to JavaScript with this you'll be able to observe objects on the JavaScript side and then",
    "start": "1183950",
    "end": "1190909"
  },
  {
    "text": "do cleanup on the web assembly side when that object is garbage collected so",
    "start": "1190909",
    "end": "1196039"
  },
  {
    "text": "these proposals are all in flight in the meantime the rusty eco system has",
    "start": "1196039",
    "end": "1201470"
  },
  {
    "text": "created tools that automate this all for you and that polyfill the proposals that are in flight one tool in particular is",
    "start": "1201470",
    "end": "1207830"
  },
  {
    "text": "worth mentioning because other languages can use it - it's called wasm bind gen",
    "start": "1207830",
    "end": "1212940"
  },
  {
    "text": "when it sees that your rust coach should do something like receive or return certain kinds of JavaScript values or",
    "start": "1212940",
    "end": "1218729"
  },
  {
    "text": "Dom objects it will automatically create the JavaScript glue code that does this for you so that you don't even need to",
    "start": "1218729",
    "end": "1224190"
  },
  {
    "text": "think about it and because it's written in a language independent way other language tool chains can adopt it to",
    "start": "1224190",
    "end": "1231109"
  },
  {
    "text": "four es module integration we have the proposal pretty much done and are now working with browser vendors to",
    "start": "1231109",
    "end": "1236700"
  },
  {
    "text": "implement it and for toolchain support there are tools like Waze and pack in",
    "start": "1236700",
    "end": "1242279"
  },
  {
    "text": "the rust ecosystem which automatically runs everything you need to package your code for NPM and the bundlers are also",
    "start": "1242279",
    "end": "1248609"
  },
  {
    "text": "actively working on support finally for backwards compatibility there's the wasm",
    "start": "1248609",
    "end": "1254159"
  },
  {
    "text": "to j/s tool that takes a wizened file and spits out its equivalent J ass now this J is not gonna be fast but at least",
    "start": "1254159",
    "end": "1260999"
  },
  {
    "text": "it means that it will work in older versions of browsers that don't understand web assembly so we're getting",
    "start": "1260999",
    "end": "1267749"
  },
  {
    "start": "1266000",
    "end": "1291000"
  },
  {
    "text": "close to unlocking this achievement and once we unlock it we open the path to another - what is rewriting large parts",
    "start": "1267749",
    "end": "1275190"
  },
  {
    "text": "of things like JavaScript frameworks and web assembly and the other is making it possible for statically typed compile to",
    "start": "1275190",
    "end": "1281369"
  },
  {
    "text": "J's languages to compile to web simply instead for example having languages like Scala J s or reason or elm or",
    "start": "1281369",
    "end": "1288359"
  },
  {
    "text": "Kotlin compiles webassembly for both of these use cases webassembly needs to",
    "start": "1288359",
    "end": "1294629"
  },
  {
    "start": "1291000",
    "end": "1470000"
  },
  {
    "text": "support high-level language features first let's look at rewriting parts of",
    "start": "1294629",
    "end": "1300299"
  },
  {
    "text": "JavaScript frameworks this could be good for a couple of reasons for example take",
    "start": "1300299",
    "end": "1305489"
  },
  {
    "text": "react one thing that you could do is rewrite the Dom diffing algorithm and rust which has very ergonomic",
    "start": "1305489",
    "end": "1312029"
  },
  {
    "text": "multi-threading support and that way you could easily parallelizable you could also speed things up by",
    "start": "1312029",
    "end": "1319080"
  },
  {
    "text": "allocating memory differently in the virtual Dom instead of creating a bunch of objects that need to be garbage",
    "start": "1319080",
    "end": "1324509"
  },
  {
    "text": "collected you could use a special memory memory allocation scheme for example you could use a bump allocator scheme which",
    "start": "1324509",
    "end": "1331619"
  },
  {
    "text": "has extremely cheap allocation and all at once D allocation so that could",
    "start": "1331619",
    "end": "1338519"
  },
  {
    "text": "potentially help speed things up and reduce memory usage but you'd still need",
    "start": "1338519",
    "end": "1343559"
  },
  {
    "text": "to interact with JavaScript objects things like components from that code you can't just write everything to",
    "start": "1343559",
    "end": "1349720"
  },
  {
    "text": "linear memory because that would be difficult and inefficient so you need to",
    "start": "1349720",
    "end": "1355480"
  },
  {
    "text": "be able to integrate with the browser's GC at the same time because even if you're managing the virtual Dom",
    "start": "1355480",
    "end": "1361029"
  },
  {
    "text": "structure and linear memory we still have a lot of these J s objects that you're gonna need to reference things",
    "start": "1361029",
    "end": "1366220"
  },
  {
    "text": "like components that need to be managed by the JavaScript VM some of these JavaScript objects need to point to data",
    "start": "1366220",
    "end": "1372669"
  },
  {
    "text": "and linear memory and sometimes the data and linear memory will need to point to the JavaScript objects if this ends up",
    "start": "1372669",
    "end": "1379149"
  },
  {
    "text": "creating cycles it can mean trouble for the garbage collector it means the garbage collector won't be able to tell",
    "start": "1379149",
    "end": "1384789"
  },
  {
    "text": "if the objects are being used anymore so they'll never be collected so web",
    "start": "1384789",
    "end": "1390370"
  },
  {
    "text": "assembly needs integration with the GC to make sure that these kinds of cross language data dependencies work and this",
    "start": "1390370",
    "end": "1396039"
  },
  {
    "text": "will also help link which is the compiled to J's like Scala J s reason and elm because they use Java scripts",
    "start": "1396039",
    "end": "1402370"
  },
  {
    "text": "garbage collector when they compile to Jess because web assembly will have support for the same GC as JavaScript",
    "start": "1402370",
    "end": "1409179"
  },
  {
    "text": "the one that's built into the engine these languages will be able to compile to web assembly and just use the same",
    "start": "1409179",
    "end": "1415779"
  },
  {
    "text": "garbage collector they won't need to change how GC works in their language we",
    "start": "1415779",
    "end": "1422799"
  },
  {
    "text": "also need better support for handling exceptions some languages like rust do",
    "start": "1422799",
    "end": "1427899"
  },
  {
    "text": "without exceptions but another languages like C++ Jas or c-sharp exception",
    "start": "1427899",
    "end": "1433720"
  },
  {
    "text": "handling is sometimes used extensively you can polyfill exception handling",
    "start": "1433720",
    "end": "1438730"
  },
  {
    "text": "currently but the polyfill makes the code run really slowly so the default",
    "start": "1438730",
    "end": "1444130"
  },
  {
    "text": "when compiling to web assembly is currently to compile without exception handling but since JavaScript has exceptions even",
    "start": "1444130",
    "end": "1451330"
  },
  {
    "text": "if you've compiled your code not to use exceptions you could have a exception still thrown into the works if you call",
    "start": "1451330",
    "end": "1458620"
  },
  {
    "text": "a function a JavaScript function and it throws an exception and languages like",
    "start": "1458620",
    "end": "1465370"
  },
  {
    "text": "rust choose to abort in this case so we need to make this work better another",
    "start": "1465370",
    "end": "1472330"
  },
  {
    "start": "1470000",
    "end": "1595000"
  },
  {
    "text": "thing that people working with jasmine compiles of Jazz languages are used to having as good debugging support dentals",
    "start": "1472330",
    "end": "1479169"
  },
  {
    "text": "in all of the manger browsers make it easy to step through JavaScript we need the same level support for debugging web assembly and",
    "start": "1479169",
    "end": "1485890"
  },
  {
    "text": "browsers too and finally for many functional languages you need to have",
    "start": "1485890",
    "end": "1490930"
  },
  {
    "text": "support for something called tail calls now I'm not going to get too much into the details on this but basically unless",
    "start": "1490930",
    "end": "1496510"
  },
  {
    "text": "you call a new function without adding a new stack frame to the stack so for",
    "start": "1496510",
    "end": "1501520"
  },
  {
    "text": "functional languages that support this we won't webassembly to support it too so where are we on this for garbage",
    "start": "1501520",
    "end": "1510520"
  },
  {
    "text": "collection there are two proposals currently underway the typed objects proposal for JavaScript and the GC proposal for web simply typed objects",
    "start": "1510520",
    "end": "1518290"
  },
  {
    "text": "will make it possible to describe an object's fixed structure and this is going to be discussed at an upcoming",
    "start": "1518290",
    "end": "1524070"
  },
  {
    "text": "tc39 meeting web assemblies GC will make it possible to directly access that",
    "start": "1524070",
    "end": "1530680"
  },
  {
    "text": "structure and this proposal is under very active development with both of",
    "start": "1530680",
    "end": "1536200"
  },
  {
    "text": "these in place both javascript and web assembly will know what an object looks like and can share that object and",
    "start": "1536200",
    "end": "1541420"
  },
  {
    "text": "efficiently access the data stored on it our team actually already has a prototype of this working but it's gonna",
    "start": "1541420",
    "end": "1548920"
  },
  {
    "text": "take some time for these to go through standardization so we're probably looking at sometime next year",
    "start": "1548920",
    "end": "1554670"
  },
  {
    "text": "exception handling is still in the research and development phase and there's work now to see if it can take",
    "start": "1554670",
    "end": "1560020"
  },
  {
    "text": "advantage of other proposals like the reference types proposal that I mentioned before for debugging there's",
    "start": "1560020",
    "end": "1565870"
  },
  {
    "text": "currently some support and browser dev tools for example you can step through the text format of web assembly and Firefox this debugger but it's still not",
    "start": "1565870",
    "end": "1572920"
  },
  {
    "text": "ideal we want to be able to show you where you are in your actual source code not in the assembly the thing that we",
    "start": "1572920",
    "end": "1580540"
  },
  {
    "text": "need to do for that is to figure out how source maps are a source Maps type of thing work for web assembly so there's a",
    "start": "1580540",
    "end": "1587410"
  },
  {
    "text": "subgroup of the web assembly community group that's working on specifying that and the tail calls proposal is also",
    "start": "1587410",
    "end": "1593860"
  },
  {
    "text": "underway once those are all in place we'll have unlocked JavaScript",
    "start": "1593860",
    "end": "1599080"
  },
  {
    "start": "1595000",
    "end": "1614000"
  },
  {
    "text": "frameworks and many compiled to J's languages so those are all achievements that we can unlock inside the browser",
    "start": "1599080",
    "end": "1607020"
  },
  {
    "text": "but what about outside the browser now you may be confused when I talk about",
    "start": "1607020",
    "end": "1612820"
  },
  {
    "text": "outside browser because isn't the browser what you use to view the web and isn't that",
    "start": "1612820",
    "end": "1618490"
  },
  {
    "text": "right in the name web assembly but the truth is the things that you see in the browser the HTML and CSS and JavaScript",
    "start": "1618490",
    "end": "1625270"
  },
  {
    "text": "are only part of what makes the web there at the visible part there what you use to create a user interface so they",
    "start": "1625270",
    "end": "1631510"
  },
  {
    "text": "are the most obvious but there's another really important part of the web which has properties that aren't as visible",
    "start": "1631510",
    "end": "1638130"
  },
  {
    "text": "that is the link and it's a very special kind of link the innovation of this link",
    "start": "1638130",
    "end": "1644830"
  },
  {
    "text": "is that I can link to your page without having to put it in a central registry and without having to ask you even know",
    "start": "1644830",
    "end": "1650800"
  },
  {
    "text": "who you are I can just put the link there it's this ease of linking without",
    "start": "1650800",
    "end": "1656050"
  },
  {
    "text": "any oversight or bottlenecks that enabled the web that we have today that's what enabled us to form these",
    "start": "1656050",
    "end": "1662410"
  },
  {
    "text": "global communities with people that we didn't know but if all that we have is",
    "start": "1662410",
    "end": "1667570"
  },
  {
    "text": "the link there are two problems here that we haven't addressed the first one",
    "start": "1667570",
    "end": "1672670"
  },
  {
    "text": "is you go visit the site and it deliver some code to you how does that know what",
    "start": "1672670",
    "end": "1678280"
  },
  {
    "text": "kind of code it should deliver to you because if you're running on a Mac then you need a different kind of machine",
    "start": "1678280",
    "end": "1684880"
  },
  {
    "text": "code than you do for Windows that's why you have different versions of programs",
    "start": "1684880",
    "end": "1689890"
  },
  {
    "text": "that you buy when you run to run them on different operating systems should a",
    "start": "1689890",
    "end": "1696190"
  },
  {
    "text": "website have a different version of the code for every possible device no instead the site has one version of code",
    "start": "1696190",
    "end": "1703420"
  },
  {
    "text": "the source code and that's what silver to the user then it gets translated to machine code on the user's device the",
    "start": "1703420",
    "end": "1712120"
  },
  {
    "text": "name for this concept is portability so that's great you can load code from people who don't know you and you don't",
    "start": "1712120",
    "end": "1717730"
  },
  {
    "text": "know what kind of devices you're running but that brings us to a second problem if you don't know these people whose",
    "start": "1717730",
    "end": "1725740"
  },
  {
    "text": "webpages you're loading how do you know what kind of code that they're giving you it could be malicious code it could be",
    "start": "1725740",
    "end": "1733030"
  },
  {
    "text": "trying to take over your system doesn't this vision of the web running code from anyone who's linked you follow mean that",
    "start": "1733030",
    "end": "1740020"
  },
  {
    "text": "you have to blindly trust anyone who's on the web this is where the other key",
    "start": "1740020",
    "end": "1746050"
  },
  {
    "text": "concept from the web comes in and that's the security model which I'll call the sandbox basically",
    "start": "1746050",
    "end": "1753860"
  },
  {
    "start": "1752000",
    "end": "1802000"
  },
  {
    "text": "the browser takes the page the other person's code and instead of letting it run around willy-nilly in your system it",
    "start": "1753860",
    "end": "1759530"
  },
  {
    "text": "puts it in the sandbox and it puts a couple of toys in there that aren't dangerous so that the code can do some",
    "start": "1759530",
    "end": "1765530"
  },
  {
    "text": "things but it leaves the dangerous things outside of the sandbox so the",
    "start": "1765530",
    "end": "1770810"
  },
  {
    "text": "utility of the link is based on these two things portability the ability to deliver code to users and have it run on",
    "start": "1770810",
    "end": "1776300"
  },
  {
    "text": "any type of device that can run a browser and the sandbox the security model that lets you run that code",
    "start": "1776300",
    "end": "1782300"
  },
  {
    "text": "without risking the integrity of your system so why does this distinction matter why does it make a difference if",
    "start": "1782300",
    "end": "1788780"
  },
  {
    "text": "we think of the web is something that the browser shows us using HTML CSS and JavaScript or if we think of the web in",
    "start": "1788780",
    "end": "1794870"
  },
  {
    "text": "terms of portability in the sandbox because it changes how you think about",
    "start": "1794870",
    "end": "1800120"
  },
  {
    "text": "web assembly you can think about web assembly is just another tool in the browser's toolbox which it is it is",
    "start": "1800120",
    "end": "1807260"
  },
  {
    "start": "1802000",
    "end": "1815000"
  },
  {
    "text": "another tool in the browser's toolbox but it's not just that it also gives us",
    "start": "1807260",
    "end": "1812780"
  },
  {
    "text": "a way to take these other two capabilities of the web the portability and the security model and take them to",
    "start": "1812780",
    "end": "1818300"
  },
  {
    "start": "1815000",
    "end": "2002000"
  },
  {
    "text": "other use cases that need them too we can expand the web past the boundaries",
    "start": "1818300",
    "end": "1823760"
  },
  {
    "text": "of the browser now you may be thinking",
    "start": "1823760",
    "end": "1828950"
  },
  {
    "text": "that this already happened with nodejs but as it is today no doesn't quite get",
    "start": "1828950",
    "end": "1834410"
  },
  {
    "text": "us there it doesn't give us full portability and it doesn't give us the same security the same confidence an",
    "start": "1834410",
    "end": "1839690"
  },
  {
    "text": "untrusted code either node takes JavaScript on the client side making it possible to run it on servers and other",
    "start": "1839690",
    "end": "1845930"
  },
  {
    "text": "devices so that does give us some portability it makes it possible to run jazz code on all sorts of different machines but you still need to use",
    "start": "1845930",
    "end": "1853040"
  },
  {
    "text": "native modules in a lot of cases because native modules often perform better or you might already have code written in a",
    "start": "1853040",
    "end": "1859550"
  },
  {
    "text": "language like C which you want to reuse in your app but native modules aren't running the engine they have to be",
    "start": "1859550",
    "end": "1866420"
  },
  {
    "text": "compiled for the specific kind of machine that the user is running on so this doesn't give us full portability",
    "start": "1866420",
    "end": "1872560"
  },
  {
    "text": "we're also still missing security node could have taken the sandbox from the",
    "start": "1872560",
    "end": "1877700"
  },
  {
    "text": "browser but node made the design decision early on that javascript module would have access full access to",
    "start": "1877700",
    "end": "1883800"
  },
  {
    "text": "dangerous things so JavaScript modules can do things like write files and read",
    "start": "1883800",
    "end": "1888900"
  },
  {
    "text": "files off of your machine these capabilities things like full direct file access are dangerous toys those",
    "start": "1888900",
    "end": "1895680"
  },
  {
    "text": "dangerous toys that we don't allow in the browser even though they are dangerous though for the kinds of use",
    "start": "1895680",
    "end": "1902010"
  },
  {
    "text": "cases that node was built for these kinds of this kind of access does make a certain amount of sense the thing I want",
    "start": "1902010",
    "end": "1909720"
  },
  {
    "text": "to make clear here though is that node made a choice and really it is that node had a choice to make because with the",
    "start": "1909720",
    "end": "1915270"
  },
  {
    "text": "way that the Jas engine works the only functionality that javascript has access to is what you give to it so",
    "start": "1915270",
    "end": "1921510"
  },
  {
    "text": "for J as modules no could have made a different choice about sandboxing but for native modules see unboxing is less",
    "start": "1921510",
    "end": "1929010"
  },
  {
    "text": "of a choice now for node this is a moot point they've already made the decision that everything's going to have to be",
    "start": "1929010",
    "end": "1934680"
  },
  {
    "text": "able to access system resources and dangerous ways so there's not much point in thinking through how you could",
    "start": "1934680",
    "end": "1939720"
  },
  {
    "text": "restrict native modules access if you're running a node application on your computer you've basically said I trust",
    "start": "1939720",
    "end": "1946680"
  },
  {
    "text": "this code but what about other use cases would it be nice have both the",
    "start": "1946680",
    "end": "1951780"
  },
  {
    "text": "portability and the security of the web to be able to run untrusted code on any kind of device without really thinking about it",
    "start": "1951780",
    "end": "1957830"
  },
  {
    "text": "what assembly makes this possible what assembly starts with the advantages of",
    "start": "1957830",
    "end": "1962910"
  },
  {
    "text": "j/s Portability and the ability to be sandbox and what it adds is performance",
    "start": "1962910",
    "end": "1968030"
  },
  {
    "text": "it gives developers the performance that they need which means that they don't have to resort to on sand box native",
    "start": "1968030",
    "end": "1974520"
  },
  {
    "text": "code to get that performance so the use",
    "start": "1974520",
    "end": "1979650"
  },
  {
    "text": "cases that could benefit from this things like the cloud and blockchain and the Internet of Things will now have",
    "start": "1979650",
    "end": "1985950"
  },
  {
    "text": "access to them and I'll talk more about how what assembly gives them the access",
    "start": "1985950",
    "end": "1991200"
  },
  {
    "text": "to those things but I want to finish up with node first because even though node has no use for web sim blaze ability to",
    "start": "1991200",
    "end": "1997230"
  },
  {
    "text": "run untrusted code webassembly can still help node so what could we do with node",
    "start": "1997230",
    "end": "2004400"
  },
  {
    "start": "2002000",
    "end": "2114000"
  },
  {
    "text": "how we could how could we improve node with web assembly",
    "start": "2004400",
    "end": "2009400"
  },
  {
    "text": "we could bring full portability to note like I said before note gives you most",
    "start": "2010299",
    "end": "2016599"
  },
  {
    "text": "of the portability that JavaScript has on the web but you still need native",
    "start": "2016599",
    "end": "2021940"
  },
  {
    "text": "modules which are written in languages like C which need to be compiled for the specific kind of machine that the user",
    "start": "2021940",
    "end": "2028089"
  },
  {
    "text": "is running on and that compact compilation happens when the user",
    "start": "2028089",
    "end": "2033339"
  },
  {
    "text": "installs or the maintainer will pre compile these things as binaries and",
    "start": "2033339",
    "end": "2038769"
  },
  {
    "text": "maintain this whole matrix of different binaries now if these native modules were written",
    "start": "2038769",
    "end": "2044349"
  },
  {
    "text": "in web assembly instead they wouldn't need to be compiled specifically for the target architecture instead they just",
    "start": "2044349",
    "end": "2050589"
  },
  {
    "text": "run in JavaScript like node runs but they do it at nearly native performance so it gets a full portability for the",
    "start": "2050589",
    "end": "2058089"
  },
  {
    "text": "code running a node you could say the exact same node app and run it across all different kinds of devices without",
    "start": "2058089",
    "end": "2064628"
  },
  {
    "text": "having to compile anything but what 'simply doesn't have direct access to the system's resources we need to pass",
    "start": "2064629",
    "end": "2071049"
  },
  {
    "text": "in functions so that can work with the operating system just as we do with the JavaScript modules in node 4 node this",
    "start": "2071049",
    "end": "2078549"
  },
  {
    "text": "will probably include a lot of the functionality this and things like the C standard library and things that are part of POSIX the portable operating",
    "start": "2078549",
    "end": "2085569"
  },
  {
    "text": "system interface which is an older standard that helps with compatibility so modules would definitely need a bunch",
    "start": "2085569",
    "end": "2093069"
  },
  {
    "text": "of pausing like functions all that the node core folks would need to do is",
    "start": "2093069",
    "end": "2099010"
  },
  {
    "text": "figure out the set of functions to expose and the API to use for doing that but wouldn't it be nice if that were",
    "start": "2099010",
    "end": "2106390"
  },
  {
    "text": "actually something that was standard not something that was constrained to just node but that also could be used across",
    "start": "2106390",
    "end": "2111579"
  },
  {
    "text": "other runtimes and other use cases too a POSIX for web assembly if you will a",
    "start": "2111579",
    "end": "2117750"
  },
  {
    "start": "2114000",
    "end": "2197000"
  },
  {
    "text": "POSIX a portable web assembly system interface and if that were done in the",
    "start": "2117750",
    "end": "2124210"
  },
  {
    "text": "right way you could even implement implement the same API for the web these",
    "start": "2124210",
    "end": "2129880"
  },
  {
    "text": "standard api's could be polyfilled into existing web api's and these functions",
    "start": "2129880",
    "end": "2136059"
  },
  {
    "text": "wouldn't be part of the web assemblies back there would be web assembly hosts that wouldn't have them available but",
    "start": "2136059",
    "end": "2141849"
  },
  {
    "text": "for those platforms that could make use of them there would be a unified API for calling these functions no matter",
    "start": "2141849",
    "end": "2148010"
  },
  {
    "text": "which platform the code was running on and this would make universal modules ones that run both in node and in the",
    "start": "2148010",
    "end": "2154400"
  },
  {
    "text": "web so much easier so is something like that something that could actually",
    "start": "2154400",
    "end": "2159770"
  },
  {
    "text": "happen a few things are working in this ideas favor there's a proposal called",
    "start": "2159770",
    "end": "2165290"
  },
  {
    "text": "package name maps that will provide a mechanism for mapping a module name to a path to load that module from and that",
    "start": "2165290",
    "end": "2172760"
  },
  {
    "text": "will likely be supported by both browsers and node which can use it to provide different paths in the thus load entirely different modules but with the",
    "start": "2172760",
    "end": "2179570"
  },
  {
    "text": "same API with that mechanism in place what's left to do is actually figure out what functions make sense and what their",
    "start": "2179570",
    "end": "2186140"
  },
  {
    "text": "interfaces should be there's no active work on this at the moment but a lot of",
    "start": "2186140",
    "end": "2191150"
  },
  {
    "text": "discussions are happening and heading in this direction so it looks likely to happen in one form or another which is",
    "start": "2191150",
    "end": "2197960"
  },
  {
    "start": "2197000",
    "end": "2210000"
  },
  {
    "text": "good because unlocking this gets us halfway to unlocking some other use cases outside the browser and with this",
    "start": "2197960",
    "end": "2204920"
  },
  {
    "text": "in place we can accelerate the pace so what are some examples of these other use cases one of them is things like CD",
    "start": "2204920",
    "end": "2212930"
  },
  {
    "start": "2210000",
    "end": "2292000"
  },
  {
    "text": "ends and server lists and edge computing so these are use cases where you're putting your code on someone else's",
    "start": "2212930",
    "end": "2218120"
  },
  {
    "text": "server and that person makes sure that the server is maintained and that the code is close to all of your users why",
    "start": "2218120",
    "end": "2226010"
  },
  {
    "text": "would you want to use webassembly in these cases there's a great talk explaining exactly this at a conference",
    "start": "2226010",
    "end": "2231920"
  },
  {
    "text": "recently fastly there's a company that provides CBN's and edge computing and their CTO Tyler McMullen explained it",
    "start": "2231920",
    "end": "2237950"
  },
  {
    "text": "this way and I'm paraphrasing here if you look at how a process works code doesn't have boundaries functions",
    "start": "2237950",
    "end": "2245510"
  },
  {
    "text": "have access to whatever memory in that process they want to access and they can call whatever other functions they want",
    "start": "2245510",
    "end": "2251830"
  },
  {
    "text": "when you're running a bunch of different people's services in the same process this is an issue now sandbox scene could",
    "start": "2251830",
    "end": "2258950"
  },
  {
    "text": "be a way to get around this but then you get to a scale problem for example if you use a JavaScript VM like Firefox of",
    "start": "2258950",
    "end": "2265100"
  },
  {
    "text": "SpiderMonkey your Chrome's v8 you get a sandbox and you can put hundreds of instances into the process",
    "start": "2265100",
    "end": "2270350"
  },
  {
    "text": "but the numbers of requests that fastly is servicing you don't just need hundreds per process you need tens of",
    "start": "2270350",
    "end": "2276270"
  },
  {
    "text": "thousands now Tyler does a better job of explaining all of this in his talk so you should go watch that but the point",
    "start": "2276270",
    "end": "2282990"
  },
  {
    "text": "is that webassembly gives them the safety speed and the scale needed for",
    "start": "2282990",
    "end": "2288000"
  },
  {
    "text": "this use case so what do they need to make this work they needed to create",
    "start": "2288000",
    "end": "2294300"
  },
  {
    "start": "2292000",
    "end": "2409000"
  },
  {
    "text": "their own runtime which means taking a web assembly compiler something that can compile web assembly to machine code and",
    "start": "2294300",
    "end": "2300000"
  },
  {
    "text": "combining it with the functions that I was just talking about for the web assembly compiler they used one that the",
    "start": "2300000",
    "end": "2306090"
  },
  {
    "text": "one that we're working on at Mozilla called crane lift which is very fast and doesn't use as much memory for the",
    "start": "2306090",
    "end": "2313350"
  },
  {
    "text": "functions that interact with the rest of the system they had to create their own because we don't yet have that portable",
    "start": "2313350",
    "end": "2318390"
  },
  {
    "text": "interface available so it is possible to create your own runtime today but it takes some effort and it's effort that",
    "start": "2318390",
    "end": "2325710"
  },
  {
    "text": "will have to be duplicated across different companies what if we didn't",
    "start": "2325710",
    "end": "2331140"
  },
  {
    "text": "just have the portable interface but we also had a common runtime that could be used across all of these companies and",
    "start": "2331140",
    "end": "2337170"
  },
  {
    "text": "all of these other use cases that would definitely speed up development then",
    "start": "2337170",
    "end": "2343260"
  },
  {
    "text": "other companies could just use that runtime like they do with no today instead of creating their own from scratch so what's the status of this",
    "start": "2343260",
    "end": "2352400"
  },
  {
    "text": "even though there's no standard runtime yet there are a few runtime projects in flight right now these are called",
    "start": "2352400",
    "end": "2359130"
  },
  {
    "text": "include watham which is built on top of LLVM and wasm jet and we're planning one",
    "start": "2359130",
    "end": "2364830"
  },
  {
    "text": "that's built on top of crane left it's called wasm time and if you want to get involved with that feel free to come up",
    "start": "2364830",
    "end": "2370110"
  },
  {
    "text": "to me after this talk one thing I forgot to mention about why web assembly is",
    "start": "2370110",
    "end": "2375420"
  },
  {
    "text": "useful for things like serverless and edge computing is that when you're running on someone else's server they need to figure out how much to charge",
    "start": "2375420",
    "end": "2381300"
  },
  {
    "text": "you things to figure out how many CPU cycles you used some places call this",
    "start": "2381300",
    "end": "2386700"
  },
  {
    "text": "fuel they talk about how much fuel you used but this can be hard to do when",
    "start": "2386700",
    "end": "2392700"
  },
  {
    "text": "different programs are running simultaneously on the same machine but since web assemblies pretty close to",
    "start": "2392700",
    "end": "2398670"
  },
  {
    "text": "actual assembly it makes it easier to see how much fuel something will use another use case that uses this concept",
    "start": "2398670",
    "end": "2406020"
  },
  {
    "text": "of fuel or gas is the blockchain now unfortunately I don't have enough",
    "start": "2406020",
    "end": "2411260"
  },
  {
    "start": "2409000",
    "end": "2487000"
  },
  {
    "text": "time to explain the blockchain both because this talk is short and because the blockchain is really hard to explain",
    "start": "2411260",
    "end": "2416530"
  },
  {
    "text": "but there are some versions of the blockchain that can really benefit from webassembly for example the etherium",
    "start": "2416530",
    "end": "2422810"
  },
  {
    "text": "community is moving towards webassembly in aetherium year there are these bits of code called smart contracts and",
    "start": "2422810",
    "end": "2428840"
  },
  {
    "text": "anyone can write a smart contract and then other people called miners have to run that smart contract on their",
    "start": "2428840",
    "end": "2433880"
  },
  {
    "text": "machines so this should sound familiar it's the untrusted code problem that we",
    "start": "2433880",
    "end": "2439640"
  },
  {
    "text": "talked about before up until now the etherium community has dealt with this by having their own language called",
    "start": "2439640",
    "end": "2445640"
  },
  {
    "text": "solidity which restricts what the code can do but it's a pretty high-level language it was hard to calculate how",
    "start": "2445640",
    "end": "2451880"
  },
  {
    "text": "much gas how many cycles executing that code would take so weapon simply is a",
    "start": "2451880",
    "end": "2457070"
  },
  {
    "text": "good option for them it gives them security makes it easier to calculate gas cost and it opens up smart contracts",
    "start": "2457070",
    "end": "2464180"
  },
  {
    "text": "to a host of new languages you can think of these blockchain platforms as almost",
    "start": "2464180",
    "end": "2470720"
  },
  {
    "text": "like a new kind of operating system but what pasilla can also be used in more traditional operating systems now be",
    "start": "2470720",
    "end": "2477950"
  },
  {
    "text": "clear I'm not talking about running webassembly in the kernel although brave souls are trying that but",
    "start": "2477950",
    "end": "2484010"
  },
  {
    "text": "I'm talking about running webassembly in ring 3 in user mode then you could do things like have a portable CL a CLI",
    "start": "2484010",
    "end": "2491090"
  },
  {
    "start": "2487000",
    "end": "2499000"
  },
  {
    "text": "tool that could be used across all different kinds of operating systems and this is pretty close to another use case",
    "start": "2491090",
    "end": "2498160"
  },
  {
    "text": "the Internet of Things this includes things like wearable technology and",
    "start": "2498160",
    "end": "2503450"
  },
  {
    "start": "2499000",
    "end": "2537000"
  },
  {
    "text": "smart home applications now these are usually resource constrained they don't pack much computing powder power and",
    "start": "2503450",
    "end": "2510170"
  },
  {
    "text": "they don't have much memory and this is exactly the kind of situation where a compiler like crane lifts and a runtime",
    "start": "2510170",
    "end": "2516440"
  },
  {
    "text": "like wow some time would make sense because they would be efficient in low memory and there are so many of these",
    "start": "2516440",
    "end": "2523460"
  },
  {
    "text": "different kinds of devices that are all slightly different so web assemblies portability would really help with that",
    "start": "2523460",
    "end": "2528940"
  },
  {
    "text": "so that's one more place where web assembly has a future now let's zoom",
    "start": "2528940",
    "end": "2534950"
  },
  {
    "text": "back out and look at this skill tree I said at the beginning of the talk that",
    "start": "2534950",
    "end": "2540020"
  },
  {
    "start": "2537000",
    "end": "2600000"
  },
  {
    "text": "people have a misconception about web assembly this idea that the webassembly that landed in the MVP was the final version",
    "start": "2540020",
    "end": "2546890"
  },
  {
    "text": "of webassembly i think you can see now why this is a misconception yes the MVP opened up a",
    "start": "2546890",
    "end": "2554510"
  },
  {
    "text": "lot of opportunities it made it possible to bring a lot of desktop applications to the web but we still have many use",
    "start": "2554510",
    "end": "2561140"
  },
  {
    "text": "cases to unlock from heavyweight desktop applications to small modules to",
    "start": "2561140",
    "end": "2566270"
  },
  {
    "text": "JavaScript frameworks to all of the things outside of the browser like node and server lists and the blockchain and portable CLI tools in the Internet of",
    "start": "2566270",
    "end": "2572300"
  },
  {
    "text": "Things so the web assembly that we have today is not the end of the story because web assembly still has promised",
    "start": "2572300",
    "end": "2579650"
  },
  {
    "text": "to keep in many places to go before it sleeps now before I finish up I just",
    "start": "2579650",
    "end": "2585410"
  },
  {
    "text": "want to give a bit of things I really enjoy working at Mozilla because I get to work on these cutting-edge",
    "start": "2585410",
    "end": "2591410"
  },
  {
    "text": "technologies but I also enjoy it because I work on engaging problems with some very smart and interesting people I had",
    "start": "2591410",
    "end": "2597950"
  },
  {
    "text": "the chance to collaborate with two of them on this talk luke wagner who is one of the co-creators of assam chess and",
    "start": "2597950",
    "end": "2604190"
  },
  {
    "start": "2600000",
    "end": "2620000"
  },
  {
    "text": "was a major driving force and making webassembly happen until schneider ID who leads our was a web simply developer",
    "start": "2604190",
    "end": "2610310"
  },
  {
    "text": "tooling efforts at mozilla so thank you to both of them and thank you all for listening",
    "start": "2610310",
    "end": "2617080"
  },
  {
    "text": "[Applause]",
    "start": "2617210",
    "end": "2620359"
  }
]