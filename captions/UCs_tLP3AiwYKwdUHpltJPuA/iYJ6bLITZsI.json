[
  {
    "start": "0",
    "end": "116000"
  },
  {
    "text": "I am Richard Feldman. Welcome to this Book \nClub interview. So, I am the author of \"Elm  ",
    "start": "3840",
    "end": "9780"
  },
  {
    "text": "in Action,\" which is not what we're discussing \nhere. We did a separate book club on that, but,   from the same publisher, Manning Publications. \nTim McNamara is the author of \"Rust in Action.\"  ",
    "start": "9780",
    "end": "18420"
  },
  {
    "text": "You'll meet him in a second. And this is a \ndifferent book and a much different audience. So,   we're gonna talk all about the book, what \nmotivated him to write it, and all sorts  ",
    "start": "18420",
    "end": "26220"
  },
  {
    "text": "of things about the process. I'm excited to talk \nabout it because I also am a big fan of Rust. I  ",
    "start": "26220",
    "end": "31380"
  },
  {
    "text": "teach a course for Frontend Masters called \"Intro \nto Rust.\" I've written a compiler in Rust. Big fan  ",
    "start": "31380",
    "end": "37980"
  },
  {
    "text": "of the language, and am excited to talk about it \ntoday. So, Tim, do you wanna introduce yourself?  Thanks, Richard. So, my name is Tim. I am a \ndeveloper based in New Zealand, but, before Rust,  ",
    "start": "37980",
    "end": "50700"
  },
  {
    "text": "I was a Python developer, primarily in, like, \nthe data science space. And a few years ago I  ",
    "start": "50700",
    "end": "59940"
  },
  {
    "text": "was sort of, like, scratching around for trying to \nfigure out, like, how computers work. And then I  ",
    "start": "59940",
    "end": "67619"
  },
  {
    "text": "kind of accidentally got asked to write a book. \nThat's kind of the pitch for \"Rust in Action.\"  ",
    "start": "67620",
    "end": "77940"
  },
  {
    "text": "If you are from sort of a dynamic programming \nbackground, or even a, say, a Java, but you've  ",
    "start": "77940",
    "end": "86580"
  },
  {
    "text": "never really encountered these terms, \"systems \nprogramming,\" or any of the concepts around that,  ",
    "start": "86580",
    "end": "93780"
  },
  {
    "text": "that's really what \"Rust in Action\" is trying \nto provide a little bit of a glimpse in,  ",
    "start": "94500",
    "end": "99600"
  },
  {
    "text": "to not so much teaching you systems programming. \nIt's primarily there to teach you Rust,  ",
    "start": "99600",
    "end": "104759"
  },
  {
    "text": "but it uses concepts drawn from that, from, \nsort of, that subfield, to really kind of enable  ",
    "start": "104760",
    "end": "113760"
  },
  {
    "text": "you to feel welcome inside the Rust community.\n Nice. Well, so, let's talk about that a little   bit more. So, you said your background is kind of \na Python developer. I came to Rust from a similar  ",
    "start": "113760",
    "end": "122460"
  },
  {
    "start": "116000",
    "end": "556000"
  },
  {
    "text": "perspective of not really having done any kind of \nsystems programming. Like, I knew C and C++ from  ",
    "start": "122460",
    "end": "128100"
  },
  {
    "text": "a long time ago, and kind of had a bad experience \nwith them, to be honest. Didn't have any interest   in getting back into that world, but there \nwas this kind of curiosity about..for my whole  ",
    "start": "128100",
    "end": "138660"
  },
  {
    "text": "career up to that point, I'd always been on top \nof some sort of virtual machine or interpreter,   something like that. I never really knew \nwhat was going on under the hood, and that  ",
    "start": "138660",
    "end": "146100"
  },
  {
    "text": "was always something intriguing to me. It sounds \nlike it was for you too. So, how did you go about,  ",
    "start": "146100",
    "end": "151380"
  },
  {
    "text": "like, learning Rust yourself? You know, this book \ndidn't exist, right? There was no...and we've got   it right here, \"Rust in Action,\" right?\nNice. I've got my copies down the back.  ",
    "start": "151380",
    "end": "161040"
  },
  {
    "text": "But, you know, it didn't exist because you hadn't \nwritten it yet. But there are all these resources   out there. I mean, there's, like, the official, \nlike, free Rust book that you can read. Other  ",
    "start": "164220",
    "end": "172860"
  },
  {
    "text": "people have written Rust books. So, I'm kind \nof curious about, you know, what was it about,  ",
    "start": "172860",
    "end": "177960"
  },
  {
    "text": "that sort of motivated you to write the book in \nthis way? Like, you know, what did you wanna sort   of accomplish to present people with something \ndifferent than what was already out there? ",
    "start": "178680",
    "end": "186660"
  },
  {
    "text": "Right. So, the very last, the very end of your \nquestion kind of hinted at the answer. So,  ",
    "start": "186660",
    "end": "194880"
  },
  {
    "text": "I, intentionally, I'm, like, one of the \nlast people to learn Rust without the book,  ",
    "start": "196500",
    "end": "201600"
  },
  {
    "text": "the official, \"The Programming Language,\" the free \none online. I intentionally didn't refer to that  ",
    "start": "201600",
    "end": "207720"
  },
  {
    "text": "at all because I was overly concerned about, like, \ncopyright protection and things like that...and I  ",
    "start": "207720",
    "end": "214380"
  },
  {
    "text": "didn't want to plagiarize on the material.\nOh, interesting.  And the same with the O'Reilly book, \n\"Programming Rust.\" So, it turns out there's,  ",
    "start": "214380",
    "end": "222300"
  },
  {
    "text": "like, accidental plagiarism. It turns out that \nthe \"Rust in Action,\" as well as \"Programming  ",
    "start": "222300",
    "end": "230520"
  },
  {
    "text": "Rust,\" the O'Reilly book, have a renderer \nfor the Mandelbrot set. My one happens to  ",
    "start": "230520",
    "end": "240180"
  },
  {
    "text": "be inside the terminal. And I was like, after \nthe publication, I, after my book was published,  ",
    "start": "240180",
    "end": "247079"
  },
  {
    "text": "I was reading through the others, and I was like, \n\"Oh, wait a minute. That was maybe a mistake.\" ",
    "start": "247080",
    "end": "251580"
  },
  {
    "text": "But to answer your question, I wanted to produce \na book that was different than every other book  ",
    "start": "252240",
    "end": "260459"
  },
  {
    "text": "I'd ever seen. From a marketing perspective, \nI didn't want to write, like, a me-too book.  ",
    "start": "260460",
    "end": "268860"
  },
  {
    "text": "I couldn't compete with the official reference, \nor, like, the official guide. So I can't write a  ",
    "start": "268860",
    "end": "275759"
  },
  {
    "text": "book that just takes you, let's say, start with \nintegers, and then we get to floats and then we   get to strings, and then we, like, have structs \nand we combine them, and then we might talk about  ",
    "start": "275760",
    "end": "284280"
  },
  {
    "text": "traits. I can't write that book again. It's \nimpossible to compete with free, essentially. ",
    "start": "284280",
    "end": "290220"
  },
  {
    "text": "Sure. Unless you're doing something different.\nRight, right. Exactly. And so, \"Programming  ",
    "start": "290220",
    "end": "296700"
  },
  {
    "text": "Rust\" from O'Reilly was the other one that was \ncoming out, and Manning was concerned. We really  ",
    "start": "296700",
    "end": "301740"
  },
  {
    "text": "gotta get on in this Rust space. And that was \nfocused on C++ developers who were kind of,  ",
    "start": "301740",
    "end": "310860"
  },
  {
    "text": "like, Rust-curious, let's say. Like, \"Ah. Shared \npointer.\" So, if you're not familiar with Rust,  ",
    "start": "310860",
    "end": "318599"
  },
  {
    "text": "Rust is protective of data access. C++, in \na very broad way, is less protective of you,  ",
    "start": "318600",
    "end": "330480"
  },
  {
    "text": "the programmer, for when you want to access \nvariables, particularly across threads,   and you end up they clobber each other. It turns \nout you don't even need multi-threading to cause  ",
    "start": "330480",
    "end": "340440"
  },
  {
    "text": "these kinds of problems because we have multiple \nCPUs that might also want to access the same  ",
    "start": "340440",
    "end": "346920"
  },
  {
    "text": "variables at the same or roughly the same time.\nAnyway, ignoring all that, Rust has this kind of  ",
    "start": "348060",
    "end": "353460"
  },
  {
    "text": "reality and strongly-enforced guardrails that you \nneed to opt out of intentionally. Whereas in C++,  ",
    "start": "353460",
    "end": "361740"
  },
  {
    "text": "you need to opt into the guardrails, essentially. \nAnd some types exist in C++ that are ubiquitous in  ",
    "start": "362760",
    "end": "374160"
  },
  {
    "text": "Rust. Now, the reason why you're a C++ programmer, \nand you might look to, say, a Rust is that  ",
    "start": "374820",
    "end": "382080"
  },
  {
    "text": "C++ is notoriously difficult to \nget right. And maybe this is what   you're referring to when you were saying... \nI have a concrete example of that is that I  ",
    "start": "383040",
    "end": "393539"
  },
  {
    "text": "remember when I was doing, many years ago, \nlike, a little bit of C and C++, is I would   all the time get a program crash that would \njust say \"segmentation fault.\" Meaning that I  ",
    "start": "393540",
    "end": "403139"
  },
  {
    "text": "did some stuff with some memory somewhere that I \nwasn't allowed to, or I made a mistake somewhere.   And then figuring out what the actual underlying \nproblem was behind the segmentation fault was  ",
    "start": "403860",
    "end": "413280"
  },
  {
    "text": "often very time-consuming and painful. But \nwhen I moved to higher-level languages that   have automatic memory management, if I ever \nsaw a segmentation fault, it was never like,  ",
    "start": "413280",
    "end": "422100"
  },
  {
    "text": "\"Oh, I made a mistake.\" It's like somebody \nwho implemented something that I'm building   on made a mistake. Somebody else made a mistake, \nI don't know who, but...and it was super rare. ",
    "start": "422100",
    "end": "430200"
  },
  {
    "text": "That's also been my experience with Rust, is \nthat I mean, there is the whole, like, the unsafe   section where you can cause segmentation \nfaults, but if you're staying away from that,  ",
    "start": "430200",
    "end": "438780"
  },
  {
    "text": "and at first, I just avoided unsafe keyword \naltogether, I found that I can just feel that  ",
    "start": "438780",
    "end": "445740"
  },
  {
    "text": "I will be able to write my code, and maybe the \ncompiler will complain at me and say, \"you can't   do what you just tried to do,\" but as long as I \ncan get everything to compile, it's not going seg  ",
    "start": "445740",
    "end": "454080"
  },
  {
    "text": "fault. It's not going to catastrophically blow \nup. And if it does, it's because somebody else   made a mistake, rather than me making a mistake.\nAnd the same with me. I was writing Python, and  ",
    "start": "454080",
    "end": "463860"
  },
  {
    "text": "I had these jobs that were running \nfor, like, three or four hours,   and then they would, like, crash with a name \nerror or, like, a tight error. I'm like…",
    "start": "463860",
    "end": "471000"
  },
  {
    "text": "Oh, no. \n...how did this happen? And it just blows   up. And the exception, and then, is there. What \nI wanted from a language was something like Elm,  ",
    "start": "471000",
    "end": "480240"
  },
  {
    "text": "that was, like, developer happiness is paramount. \nAnd, error messages are part of the language,  ",
    "start": "480780",
    "end": "488220"
  },
  {
    "text": "and the error, like, debugging experience \nis part of the design of the language.  ",
    "start": "488220",
    "end": "494580"
  },
  {
    "text": "And what I kind of got from Rust was much closer \nto an Elm experience, versus, like, a C or a C++  ",
    "start": "495960",
    "end": "505199"
  },
  {
    "text": "experience, where things would just blow up, \neven without it, because there are...and in C,   where I tried to play around...oh, actually \nI tried to write Python extensions in this  ",
    "start": "505200",
    "end": "514740"
  },
  {
    "text": "C macro language called Cython, which \nessentially is C with Python syntax.  I've heard of that. Yeah. Right.\nBut again, it blows up, spectacularly,  ",
    "start": "514740",
    "end": "523860"
  },
  {
    "text": "and you, like, literally don't know what \nto do. It's like, okay, segmentation fault.  ",
    "start": "523860",
    "end": "529560"
  },
  {
    "text": "What do I do now? Like, is that the end? And so...\nWhat you're supposed to know is it's like, well,  ",
    "start": "531300",
    "end": "538320"
  },
  {
    "text": "now you need to attach a debugger and go \nback through and step back into it, and then,   like, you know...but it's this whole complicated \nthing. And then even once you know how to do it,  ",
    "start": "538320",
    "end": "546240"
  },
  {
    "text": "it's still pretty difficult to track down, \nlike, what was the actual thing that caused   the memory to get in this bad state? It's \nreally a whole different level of pain.",
    "start": "546240",
    "end": "553860"
  },
  {
    "text": "Absolutely. So, one of the things that I was \nreally curious about is, like, what does this term  ",
    "start": "553860",
    "end": "559620"
  },
  {
    "start": "556000",
    "end": "711000"
  },
  {
    "text": "segmentation fault even mean? And that's one of \nthe things that I explained in \"Rust in Action.\"  ",
    "start": "559620",
    "end": "566220"
  },
  {
    "text": "I think it's Chapter 5, in data, we talk about \nthe fact that memory needs to be translated in  ",
    "start": "567720",
    "end": "575399"
  },
  {
    "text": "your program. We talk about a memory address \nas an integer. So, some integer between 0  ",
    "start": "575400",
    "end": "580500"
  },
  {
    "text": "and 2 to 64 minus 1, like this is what we \ncall our address space. But somehow that  ",
    "start": "580500",
    "end": "586980"
  },
  {
    "text": "needs to be translated into something that's \nphysical electrons on a chip somewhere. Now,  ",
    "start": "586980",
    "end": "593459"
  },
  {
    "text": "that translation process is complex and \ninvolves software, which is kind of like   a bit of a weird mind bend. But it turns out \nthat the operating system segments memory,  ",
    "start": "593460",
    "end": "602759"
  },
  {
    "text": "or, like, into 4-kilobyte chunks, and the \nsegmentation fault is a problem caused by  ",
    "start": "602760",
    "end": "610620"
  },
  {
    "text": "when you're attempting to access a memory address \nthat sort of doesn't actually...the operating  ",
    "start": "610620",
    "end": "616740"
  },
  {
    "text": "system doesn't know how to translate into the \nphysical chip. Like, it's something on-RAM. It  ",
    "start": "616740",
    "end": "622080"
  },
  {
    "text": "can be more complex than that, but...\nRight. Or you're not allowed to...  Right, right. The operating system will also \nenforce that there are some parts of the memory  ",
    "start": "622080",
    "end": "631079"
  },
  {
    "text": "address space that are inaccessible to you. So, \nit turns out that the operating system can mark  ",
    "start": "631080",
    "end": "637200"
  },
  {
    "text": "some sections of memory as executable, some as \ndata, and some as code. All of this background  ",
    "start": "637200",
    "end": "642720"
  },
  {
    "text": "knowledge that you're supposed to somehow acquire \nis kind of what I wanted to inject into the book.  ",
    "start": "642720",
    "end": "650279"
  },
  {
    "text": "Part of the problem that I faced as a \nwriter, or as an author, was that I was  ",
    "start": "651180",
    "end": "657960"
  },
  {
    "text": "always late. Because I was essentially trying \nto write two books in one. And by the way,  ",
    "start": "657960",
    "end": "663480"
  },
  {
    "text": "the other thing that I tried to do differently \nthan most other books is, like, pack in big,  ",
    "start": "665760",
    "end": "671820"
  },
  {
    "text": "like, relatively chunky examples. But it turns out \nthat that's hard because you kind of need to debug  ",
    "start": "671820",
    "end": "678840"
  },
  {
    "text": "them, and you can only really introduce...\nRight. I remember this.  ...one new language feature at a time. Because \nif you try to peck in two new parts of the  ",
    "start": "678840",
    "end": "689160"
  },
  {
    "text": "language into a new example, well, suddenly, \nyou've got five extra pages of writing you   need to do to explain to people. And people, \nlike, they have this kind of mental stack,  ",
    "start": "689160",
    "end": "699780"
  },
  {
    "text": "and you're only trying to add one thing at \na time, and kind of give some... Anyway,   that's why I thought providing this sort of \nextra context around Rust would be helpful.",
    "start": "699780",
    "end": "709980"
  },
  {
    "text": "I think that's cool. You have this cool \nexample here. I mean, there are awesome   examples throughout the book, but, like, \nhere you have, the title of this section  ",
    "start": "709980",
    "end": "719460"
  },
  {
    "start": "711000",
    "end": "1131000"
  },
  {
    "text": "\"All of Networking in Seven Paragraphs.\" And \nyou've got just a diagram. It's like, look,   here's how your network stack works. So, it's \nnot just a Rust book. It's a combination of,  ",
    "start": "719460",
    "end": "731760"
  },
  {
    "text": "while you're learning Rust, you're also learning \nabout low-level parts of the computer, which I  ",
    "start": "731760",
    "end": "736800"
  },
  {
    "text": "love, because that, I think, for a lot of people \nwho are in the position that you and I were in,   coming from, like, high-level languages, and being \nlike, \"I wanna learn about this low-level stuff,  ",
    "start": "736800",
    "end": "744300"
  },
  {
    "text": "but I don't wanna deal with segmentation faults, \nas errors to my program,\" or maybe I just, like,  ",
    "start": "744300",
    "end": "749700"
  },
  {
    "text": "wanna understand them better, you know, \nwhile also not having to debug them.  ",
    "start": "749700",
    "end": "754020"
  },
  {
    "text": "That's great. That certainly was not a resource \nthat existed when I was getting into Rust.  Yeah. And also, because... Well, no. I \nwanna also just kind to segue slightly  ",
    "start": "754980",
    "end": "761520"
  },
  {
    "text": "into talking about the cultural differences \nbetween programming language communities.  Sure.\nBecause I,  ",
    "start": "761520",
    "end": "768360"
  },
  {
    "text": "as a Python developer, was always told, \"Native \nextensions are difficult. This is for experts.\" ",
    "start": "769200",
    "end": "776250"
  },
  {
    "text": "Sure.\nI had some encounters with,   actually, a couple of other language \ncommunities, where I would say things,  ",
    "start": "776250",
    "end": "781800"
  },
  {
    "text": "and I would kind of immediately get pounced upon, \nbecause. In retrospect the whole... Because I  ",
    "start": "781800",
    "end": "790560"
  },
  {
    "text": "didn't have the mental model, I didn't use the \nlanguage in the right way, and so therefore   people didn't address the question, they addressed \nthe inaccuracies because I used the words wrong.  ",
    "start": "790560",
    "end": "799140"
  },
  {
    "text": "Whereas I feel like, and I'm very clouted now. \nLike, I'm very deeply embedded in the Rust space.  ",
    "start": "800220",
    "end": "807600"
  },
  {
    "text": "And I'm very hopeful that new entrants \nto the community still feel this way.  But my experience was that the Rust community was \nparticularly welcoming and particularly interested  ",
    "start": "809280",
    "end": "821160"
  },
  {
    "text": "in preventing people from feeling excluded. \nThat's kind of baked in with the slogan. Like,  ",
    "start": "821880",
    "end": "831780"
  },
  {
    "text": "empowering everyone is how it starts. And you, as \nsomeone watching this podcast, as someone curious  ",
    "start": "831780",
    "end": "842460"
  },
  {
    "text": "but a little bit fearful, potentially, or maybe \nfearful are too strong, just a little bit hesitant  ",
    "start": "842460",
    "end": "849300"
  },
  {
    "text": "should feel as though you're welcome. \nAnd part of the book is to say,  ",
    "start": "850680",
    "end": "856560"
  },
  {
    "text": "or at least part of my rationale for creating \nsomething new and interesting and different was  ",
    "start": "856560",
    "end": "863100"
  },
  {
    "text": "essentially to say that...is to give people \nthe confidence to learn more. Like, I can't   teach you all of Rust. There are some parts \nof the language that I exclude from the book.  ",
    "start": "863100",
    "end": "872639"
  },
  {
    "text": "People have asked...\nBut it's a beginner book. I mean, you   can't simultaneously give a good introduction and \nalso cover absolutely everything there is, right? ",
    "start": "874020",
    "end": "881700"
  },
  {
    "text": "Right. So, there are typically two complaints. \nLike, Of about 90%, 95% of people are happy, but  ",
    "start": "881700",
    "end": "889380"
  },
  {
    "text": "there are complaints. And the two themes primarily \nare A, why isn't your book like every other book?  ",
    "start": "889380",
    "end": "898860"
  },
  {
    "text": "Like, \"this is not something that I'm \nfamiliar with. I'm used to being able to,   like, pick things apart.\" It's \nlike, \"well, I wanted to look up  ",
    "start": "899880",
    "end": "908339"
  },
  {
    "text": "what an enum is in Rust.\" Or, like, \"So, \nwhere is that? Like, I can't find that on  ",
    "start": "909600",
    "end": "915120"
  },
  {
    "text": "the contents page.\" I sort of feel like that's \nslightly misguided. I wanna say that \"Well,  ",
    "start": "915120",
    "end": "923040"
  },
  {
    "text": "you kind of didn't read the first introductory \nthing,\" where it was like, who is this book for?   And the other complaint, I guess, would be \nthat it's too introductory. Like, it's like,  ",
    "start": "923040",
    "end": "936600"
  },
  {
    "text": "\"Ah, this isn't a guide to writing idiomatic, \nhigh-performance, zero-copy Rust.\" And I also  ",
    "start": "936600",
    "end": "950160"
  },
  {
    "text": "feel like that's slightly misguided. I'm pretty \nhappy with the reception to the text in general. ",
    "start": "950160",
    "end": "957120"
  },
  {
    "text": "I mean, if one of the biggest complaints is \"I \nwanted you to do even more,\", that kind of tells  ",
    "start": "957900",
    "end": "963780"
  },
  {
    "text": "you that, like, well, you did a good job with \nwhat was there. They wanted more of it, right?   It almost sounds like what they're asking for is, \nlike, \"Hey, can you do another book,\" you know,  ",
    "start": "963780",
    "end": "970920"
  },
  {
    "text": "advanced for us? How about it, Tim? Just kidding.\nWell, like, I should say, the decision between do  ",
    "start": "970920",
    "end": "979320"
  },
  {
    "text": "you do a second edition... So, there are \nthings that have changed very slightly,  ",
    "start": "979320",
    "end": "984300"
  },
  {
    "text": "but primarily in the libraries. The ecosystem has \nmatured. Essentially, I can sand off some edges  ",
    "start": "984900",
    "end": "992580"
  },
  {
    "text": "and create a second edition. Or do you \nessentially do, like, a second volume?  ",
    "start": "993540",
    "end": "998220"
  },
  {
    "text": "Or, like, another book, like a follow-on.  ",
    "start": "999120",
    "end": "1002360"
  },
  {
    "text": "I told Manning I don't... I've got three little \ngirls. I don't think I can get you a book on time,  ",
    "start": "1004580",
    "end": "1012740"
  },
  {
    "text": "let's say in the space of a year, 18 months. \nThat's a new book. But I can do a different   edition. And so, very, very, like, within a couple \nof weeks, you should see an announcement of \"Rust  ",
    "start": "1015200",
    "end": "1027079"
  },
  {
    "text": "in Action\" second edition appear...\nNice. ...on Manning's website. But I'm \nalso interested in potentially  ",
    "start": "1027080",
    "end": "1035900"
  },
  {
    "text": "fleshing out some of these next ideas via say, \nmy YouTube channel, or relatively thorough blog  ",
    "start": "1036920",
    "end": "1046640"
  },
  {
    "text": "posts that I'm hoping to somehow combine at some \nstage, or kind of distill into a book over time. ",
    "start": "1046640",
    "end": "1054200"
  },
  {
    "text": "That makes a lot of sense. I think I got \na little bit lucky with the workshop that  ",
    "start": "1054200",
    "end": "1059960"
  },
  {
    "text": "I did on the intro to Rust because it's very \ntime-limited. It's like you have an eight-hour   workshop and that's it. There's no, \"Hey, I \nwish you could have had it be longer,\" because  ",
    "start": "1059960",
    "end": "1069320"
  },
  {
    "text": "it's like, well, now it's a multi-day workshop. \nYou know this is one day. I had way less scope  ",
    "start": "1069320",
    "end": "1076100"
  },
  {
    "text": "in that than you have here in \"Rust in Action.\" \nFirst of all, I didn't have practical examples so  ",
    "start": "1076100",
    "end": "1081740"
  },
  {
    "text": "much. It was more just, like, okay, we gotta get \nthrough. And, I mean, I'm kind of curious to talk   to you a little bit about your sort of thoughts \non, you know, how to teach Rust effectively to  ",
    "start": "1081740",
    "end": "1089720"
  },
  {
    "text": "beginners, because what I found challenging...\nSo, this is Frontend Masters. It's a primarily   JavaScript audience, and a lot of people are \ninterested in Rust because a lot of JavaScript  ",
    "start": "1089720",
    "end": "1096740"
  },
  {
    "text": "tooling is moving to Rust, and there's, you know, \napplications of web assembly and things like that.   But what I found, after doing some practice \nruns of that, was that it was just hard enough  ",
    "start": "1096740",
    "end": "1106520"
  },
  {
    "text": "to get... I basically pared it down all the \nway to, like, okay, I have eight hours to get   to lifetime annotations. If you can understand \nlifetime annotations at the end of eight hours,  ",
    "start": "1106520",
    "end": "1115340"
  },
  {
    "text": "starting from no Rust knowledge, then I succeeded \nand I was like, traits, out the window. No time   for 'em, you know. Everything else is just, all \nthe way building up to that, and now, if you're  ",
    "start": "1115340",
    "end": "1123740"
  },
  {
    "text": "wanting to understand lifetime annotations, you \ncan at least read the documentation, and now you   can kind of go off on your own. But you've \nmanaged to pack a lot more scope into here. ",
    "start": "1123740",
    "end": "1131059"
  },
  {
    "start": "1131000",
    "end": "1705000"
  },
  {
    "text": "But I'm curious what you thought was...you \nknow, for me, that was the hardest thing   to build up to, because it requires \nall this background understanding.  ",
    "start": "1131060",
    "end": "1137600"
  },
  {
    "text": "What did you think were the \nhardest things to teach in Rust?  Strings.\nYes. ",
    "start": "1138320",
    "end": "1145039"
  },
  {
    "text": "Right, right. So, I wanna provide a \nlittle... So, I fought really hard  ",
    "start": "1145040",
    "end": "1151880"
  },
  {
    "text": "withabout this idea. So, I was convinced that I \ndon't wanna teach strings after numbers. Normally,  ",
    "start": "1152480",
    "end": "1162740"
  },
  {
    "text": "you see a programming language tutorial, and they \nintroduce numbers first, because they're easy,   addition, and so forth, and we have a little toy \ncalculator. And then the next thing we do is text.  ",
    "start": "1162740",
    "end": "1170539"
  },
  {
    "text": "It turns out that within Rust, knowing that A, \nyou need a distinction between a string literal  ",
    "start": "1170540",
    "end": "1177680"
  },
  {
    "text": "as a different type than a string, which \nis kind of super weird. And, by the way... ",
    "start": "1177680",
    "end": "1185420"
  },
  {
    "text": "If you had a Rust REPL and you put \na string literal into it, you type,   \"Hello, world\" in quotes, it's not gonna come \nback and say, oh, this is a string. Nope. ",
    "start": "1185420",
    "end": "1191780"
  },
  {
    "text": "That's right. Yeah. And then there are \nsounds...this is gonna sound ridiculous.  ",
    "start": "1191780",
    "end": "1197960"
  },
  {
    "text": "There are sound technical reasons \nwhy this is the case. Essentially...  Oh, yes. Absolutely.\n...it bubbles up a lot of the  ",
    "start": "1197960",
    "end": "1205879"
  },
  {
    "text": "implementation details about how programming \nlanguages and how programs are built. So,  ",
    "start": "1206660",
    "end": "1211880"
  },
  {
    "text": "into the programming language. Rust always wants \nto offer you the choice to kind of boil away the  ",
    "start": "1211880",
    "end": "1218780"
  },
  {
    "text": "abstraction and go right into the depth of what's \nhappening. So, just to kind of flesh that out. A  ",
    "start": "1218780",
    "end": "1224600"
  },
  {
    "text": "string, conceptually, is a list of characters. \nBut it turns out our conception, as someone,  ",
    "start": "1224600",
    "end": "1236840"
  },
  {
    "text": "we're probably from a Western, Latin script, or \nat least we're used to having this conception  ",
    "start": "1236840",
    "end": "1244520"
  },
  {
    "text": "of written language as, like, one character \nafter another. It turns out that there are  ",
    "start": "1244520",
    "end": "1249980"
  },
  {
    "text": "many scripts in which this doesn't work.\nTherefore we need character encoding,  ",
    "start": "1249980",
    "end": "1256580"
  },
  {
    "text": "which is a way of translating numbers to \nsort of symbols, which we'll call glyphs.  ",
    "start": "1256580",
    "end": "1262039"
  },
  {
    "text": "And that particular system also needs to be \nbackward compatible with the way that people  ",
    "start": "1262820",
    "end": "1271220"
  },
  {
    "text": "have been using computers for decades. So we have \nthis way of encoding what's known as Unicode,  ",
    "start": "1271220",
    "end": "1277280"
  },
  {
    "text": "where we can kind of encapsulate all programming \nlanguages, ideally, inside the computer.  ",
    "start": "1277280",
    "end": "1282680"
  },
  {
    "text": "And we also need to kind of... So, we got this \nthing called UTF-8, which can kind of expand out.  ",
    "start": "1283820",
    "end": "1288080"
  },
  {
    "text": "But again, it's one character after another. But \nwhere does that live? If you are a programming  ",
    "start": "1290120",
    "end": "1296480"
  },
  {
    "text": "language, you need to decide where to put this \nin your memory. And it turns out that a function  ",
    "start": "1296480",
    "end": "1301340"
  },
  {
    "text": "is a special kind of section \nof data. Your programming...  ",
    "start": "1302300",
    "end": "1309680"
  },
  {
    "text": "I'm trying to get the semantics right.\nThe compiler, let's say, is trying to decide,  ",
    "start": "1309680",
    "end": "1314840"
  },
  {
    "text": "I need to put, for technical reasons that relate \nto the CPU... Your CPU, when it calls a function,  ",
    "start": "1314840",
    "end": "1323539"
  },
  {
    "text": "what's happening is that it's jumping to a memory \naddress, and then the return is kind of popping  ",
    "start": "1323540",
    "end": "1329540"
  },
  {
    "text": "back off and going to the last place. For that \nto happen, the function needs to be exactly the  ",
    "start": "1329540",
    "end": "1335240"
  },
  {
    "text": "right size, and it can't expand or contract. \nThat conflicts with our notion of text. Now,  ",
    "start": "1335240",
    "end": "1340700"
  },
  {
    "text": "text, we can append to the string, and we can \nconcatenate with other strings. We're used to kind  ",
    "start": "1340700",
    "end": "1346159"
  },
  {
    "text": "of manipulating them. So, that, we need to put the \nstring in a different part of memory. And what we  ",
    "start": "1346160",
    "end": "1353000"
  },
  {
    "text": "keep inside the function is a reference to that \nmemory. This is a kind of malleable string. So,  ",
    "start": "1353000",
    "end": "1358280"
  },
  {
    "text": "we've got a reference in there. But...\nBut then you get into the   performance issues, right?\nRight, right, right, right, right.  And you can put it on the heap, but...\nIt turns out that there's a third spot. So,  ",
    "start": "1358280",
    "end": "1369199"
  },
  {
    "text": "we think, as programmers, there's the heap \nand the stack, which is explained, again,   in \"Rust in Action,\" or, like, you can look up \nany introductory systems book on what these terms  ",
    "start": "1369200",
    "end": "1378440"
  },
  {
    "text": "mean. It turns out there's, like, a third ….\nThere's even more than that. There   are more than three. \nSo, shared libraries, for example, live in  ",
    "start": "1378440",
    "end": "1386000"
  },
  {
    "text": "their part of the address space, but we also...\nGlobal variables, yes. ",
    "start": "1386000",
    "end": "1393371"
  },
  {
    "text": "Yes. And we have a region of memory called \nstatic, for kind of weird, esoteric reasons... ",
    "start": "1393371",
    "end": "1399380"
  },
  {
    "text": "That's what Rust calls it.\nIt's, like, the read-only   section of memory, right?\nRight. And it's part of the  ",
    "start": "1400280",
    "end": "1408620"
  },
  {
    "text": "compiled executable. When it's on disk, right? \nLike, For that string, if you say, \"Hello,   world,\" and you put that into your program, \nthe string \"Hello, world,\" the bytes for that,  ",
    "start": "1409160",
    "end": "1417860"
  },
  {
    "text": "are actually in your compiled Rust program, on \nyour disk, and then when your operating system   loads the contents of that file into memory, it's \nlike, you know, it's right there in memory now.  ",
    "start": "1417860",
    "end": "1426980"
  },
  {
    "text": "It's, it took it from the disk, moved it into \nRAM, and that's where it is now. Not the sack,   not the heap. It's just, it was on the \ndisk, and now it's in memory. That's it.",
    "start": "1426980",
    "end": "1434480"
  },
  {
    "text": "So, to pull this back to a string literal, \nyour string literal lives in a different place  ",
    "start": "1434480",
    "end": "1440419"
  },
  {
    "text": "entirely than most other strings, or at least \nwhat we think of as, like, the string type. It  ",
    "start": "1440420",
    "end": "1447020"
  },
  {
    "text": "turns out that they can sort of kind of be \nunified through a reference to some array.  ",
    "start": "1447020",
    "end": "1453860"
  },
  {
    "text": "Let's use that term. Some list of characters, \nof bytes, that happen to be encoded as UTF-8,  ",
    "start": "1453860",
    "end": "1461299"
  },
  {
    "text": "which is this encoding for translating \nnumbers to what we would say is a, like,  ",
    "start": "1461300",
    "end": "1467780"
  },
  {
    "text": "a writing script. Now, all of these kinds of... \nSo, we've got, like, four or five different   forms of translation happening. And \nthis sucks up people's working memory  ",
    "start": "1467780",
    "end": "1478159"
  },
  {
    "text": "when they're learning something new.\nWell, and I think especially because,   like, \"Hello, world\" is such a canonical, you \nknow, way to start a program. Because if you're  ",
    "start": "1479360",
    "end": "1488600"
  },
  {
    "text": "trying to explain the types of things, it's \nnot just that the type is not a string. The   type is &'static str, all lowercase. And then, \nthe whole library uses things called String,  ",
    "start": "1488600",
    "end": "1501620"
  },
  {
    "text": "S-T-R-I-N-G, capital S, no static, no \nampersand, and no apostrophe. It's like... ",
    "start": "1501620",
    "end": "1507080"
  },
  {
    "text": "What's going on there? This is your point \nof, like, well, maybe lifetime annotations  ",
    "start": "1507080",
    "end": "1513919"
  },
  {
    "text": "are enough. Then the question's, like, what on \nEarth is a lifetime annotation? It turns out,  ",
    "start": "1513920",
    "end": "1519500"
  },
  {
    "text": "like, I know kind of maybe conceptually, that \nvariables have a type, but a lifetime? Like,  ",
    "start": "1520640",
    "end": "1526760"
  },
  {
    "text": "that's kinda weird. And, like, the syntax is \nugly and weird. By the way, this term static  ",
    "start": "1526760",
    "end": "1533060"
  },
  {
    "text": "is kind of this weird, magical term for, by the \nway, lives forever, or at least from this point   on until the rest of the... The Rust compiler has, \nlike, a sidecar part of it, or essentially, like,  ",
    "start": "1533060",
    "end": "1547340"
  },
  {
    "text": "a really strong linter, called the borrow checker.\nThat's a good way to think of it.  ",
    "start": "1547340",
    "end": "1551120"
  },
  {
    "text": "And the borrow checker's job is to analyze \nyour program and say, for all invocations,  ",
    "start": "1552500",
    "end": "1563780"
  },
  {
    "text": "or every single time, for all possible invocations \nof this program, is every data access valid?  ",
    "start": "1563780",
    "end": "1570920"
  },
  {
    "text": "And can it ever possibly be invalidated? And \nit turns out that if I, in my function... Well,  ",
    "start": "1571640",
    "end": "1580220"
  },
  {
    "text": "let's say I create a variable ref, and I'm \ncreating a reference to some other data.  ",
    "start": "1580220",
    "end": "1585980"
  },
  {
    "text": "Now, the borrow checker, and by the, for \nkind of weird, esoteric reasons as well,  ",
    "start": "1586640",
    "end": "1591860"
  },
  {
    "text": "which happen to be slightly historical, we call \nthis a \"borrow,\" I have a reference to some  ",
    "start": "1592520",
    "end": "1597560"
  },
  {
    "text": "other data, that lives outside of my function. \nThe compiler guarantees that the data that I'm  ",
    "start": "1597560",
    "end": "1606140"
  },
  {
    "text": "referring to will sort of never disappear. I \nwill never get a segmentation fault in Rust,  ",
    "start": "1606140",
    "end": "1613520"
  },
  {
    "text": "because I can't accidentally, do what's known as \n\"free\" the memory. So I can't return it to the  ",
    "start": "1613520",
    "end": "1623480"
  },
  {
    "text": "operating system and tell the operation system, \n\"I don't need this anymore, and so invalidate my   reference.\" This is impossible to do in Rust. \nAnd all of this kind of boils down to a lot of  ",
    "start": "1623480",
    "end": "1633140"
  },
  {
    "text": "complexity that is sort of front-loaded, \nas a learner. My job, by the way... So,  ",
    "start": "1633140",
    "end": "1638420"
  },
  {
    "text": "this book, \"Rust In Action,\" has been really good \nfor my career. I've scored a couple of really neat  ",
    "start": "1641060",
    "end": "1647360"
  },
  {
    "text": "jobs out of it. And...\nNice.  ...not exclusively, but I am a relatively \ncompetent developer as well. I work at AWS.  ",
    "start": "1647360",
    "end": "1657740"
  },
  {
    "text": "And AWS is kind of doubling down, or Amazon, \nbroadly, is doubling down on Rust. And my job,  ",
    "start": "1657740",
    "end": "1664760"
  },
  {
    "text": "this year, is to create, like, an education \nprogram for Rust, primarily focused on people  ",
    "start": "1665480",
    "end": "1673400"
  },
  {
    "text": "who are learning or have been used to Java, \nJavaScript, TypeScript, and Python are the kind  ",
    "start": "1673400",
    "end": "1680420"
  },
  {
    "text": "of other primary languages. And so this question \nof, like, what people need to know, and, like,  ",
    "start": "1680420",
    "end": "1686060"
  },
  {
    "text": "where they get tripped up, is, like, really front \nof mind at the moment for me. So, I think that  ",
    "start": "1686060",
    "end": "1692540"
  },
  {
    "text": "you're right about lifetimes. I think that the \nother part of... The thing that I'm struggling  ",
    "start": "1692540",
    "end": "1697880"
  },
  {
    "text": "with is sort of sequencing. So, there are...\nThat's always hard.",
    "start": "1697880",
    "end": "1703580"
  },
  {
    "text": "Because there are so many parts to Rust, and \nthere's also some really, really good parts. So,  ",
    "start": "1703580",
    "end": "1709940"
  },
  {
    "start": "1705000",
    "end": "1957000"
  },
  {
    "text": "one of the things that you forget when you hear, \n\"Oh, Rust is really hard to learn,\" is that  ",
    "start": "1709940",
    "end": "1715100"
  },
  {
    "text": "actually, it has a lot of niceties as well.\nTrue.  Like enums and pattern matching, for example, is \nsomething that I just think is incredible, and I  ",
    "start": "1715100",
    "end": "1723800"
  },
  {
    "text": "miss when I go back to other languages. So, for \nexample, let's think about how... Conceptually,   if I've ever used a language of an exception \nconstruct, Rust doesn't have exceptions,  ",
    "start": "1723800",
    "end": "1733880"
  },
  {
    "text": "and so you kinda get this cultural mismatch, like, \nwell, what do I do if I might get an error? It  ",
    "start": "1733880",
    "end": "1739400"
  },
  {
    "text": "turns out you can just return those as values.\nRight. Well, but importantly... Because I think  ",
    "start": "1739400",
    "end": "1746780"
  },
  {
    "text": "if I were coming from, like, a Go background or a \nC background, where errors are returned as values,   I might think, \"Uh-oh, uh-oh. This is not \ngonna be good, because what if I forget to  ",
    "start": "1746780",
    "end": "1755720"
  },
  {
    "text": "handle it,\" right? But, yeah. But the way that \nRust does it, it's not like that at all. I mean,  ",
    "start": "1755720",
    "end": "1761000"
  },
  {
    "text": "you cannot forget to handle it. The compiler will \nbe like, \"You forgot to handle this error here.   You need to do something about that.\"\nHmm. And what's amazing to me... So,  ",
    "start": "1761000",
    "end": "1769700"
  },
  {
    "text": "yeah. For every function that might \ncreate an error, and so this, primarily,  ",
    "start": "1769700",
    "end": "1775580"
  },
  {
    "text": "you'll encounter this when you're learning, when \nyou deal with the filesystem. So, essentially,  ",
    "start": "1775580",
    "end": "1780919"
  },
  {
    "text": "you consider anything saved to disk as flaky. \nIt could potentially fail. For many reasons. You  ",
    "start": "1782000",
    "end": "1789560"
  },
  {
    "text": "might not have permission to open files. There are \na whole bunch of reasons why things could fail.  Totally.\nAnd so,   there might be not enough disk space. Who knows? \nI mean, disks are pretty big these days, but... ",
    "start": "1789560",
    "end": "1797539"
  },
  {
    "text": "Lots of reasons, though. Or you could \nbe on a virtual machine, and the virtual  ",
    "start": "1797540",
    "end": "1802700"
  },
  {
    "text": "machine's disk is very small and limited.\nInteresting. No, that's right. It's just   virtualized away. They might not even be a disk, \nright? So, now, Rust will guarantee...it'll  ",
    "start": "1802700",
    "end": "1810760"
  },
  {
    "text": "say, \"Look, by the way, that IO function, \nlike, the function dealing with input-output,  ",
    "start": "1811580",
    "end": "1817460"
  },
  {
    "text": "returns something that might fail. Dear \nprogrammer, you've only addressed the  ",
    "start": "1818300",
    "end": "1824960"
  },
  {
    "text": "case where everything is on the happy path. I'm \ngonna refuse to compile now.\" What I love about  ",
    "start": "1824960",
    "end": "1830360"
  },
  {
    "text": "this is that this is known in Rust as the result \ntype. So, the result is normally gonna be okay,  ",
    "start": "1830360",
    "end": "1837200"
  },
  {
    "text": "and everything's gonna be fine, or it \nmight be an error. And on the error side,   you might think, well, this is... It's so \nfundamental to the Rust way of thinking now that  ",
    "start": "1837200",
    "end": "1848180"
  },
  {
    "text": "you kind of think of it as being part of Rust, \nbut it turns out that the result is defined   in the standard library. It's not part of the \nRust language. It just falls out of the enums. ",
    "start": "1848900",
    "end": "1858559"
  },
  {
    "text": "So, part of, I think, the magic of Rust, the \nlanguage, is that there are these really powerful  ",
    "start": "1859880",
    "end": "1867140"
  },
  {
    "text": "constructs that are consistent and embedded in \nthe way, like, the practice of writing Rust. And  ",
    "start": "1867140",
    "end": "1877160"
  },
  {
    "text": "primarily, Rust results, but also an option, which \nis a similar but different type, that encodes the  ",
    "start": "1877160",
    "end": "1884120"
  },
  {
    "text": "possibility that there is a missing value. I \nthink it's just wonderful that instead of just,  ",
    "start": "1884120",
    "end": "1892520"
  },
  {
    "text": "like, the Python, none, or, like, JavaScript, \nnull, or undefined, it could be essential  ",
    "start": "1892520",
    "end": "1899660"
  },
  {
    "text": "throughout your entire program. Like, every...\nRight. And I think it's interesting that some  ",
    "start": "1899660",
    "end": "1904700"
  },
  {
    "text": "modern languages are starting to adopt some of \nthese things. Like, Java now has an optional type,   which works, essentially, as I understand it, the \nsame as Rust's option type. The difference is that  ",
    "start": "1904700",
    "end": "1916280"
  },
  {
    "text": "Rust uses this exclusively. It's not like Rust has \nan option, and then they also have null, and they  ",
    "start": "1916280",
    "end": "1921980"
  },
  {
    "text": "also have undefined, and they also have another \nway of... It's like, no, there's just the one.   There's an option. Whereas in Java, you do have \noptional, and you also have null, which, you know,  ",
    "start": "1921980",
    "end": "1930139"
  },
  {
    "text": "for legacy reasons, if you want to argue it that \nway, it's like, well, you still have to be aware   that nulls might happen. In Rust, it's like, no, \nyou don't. You don't have to be aware that nulls  ",
    "start": "1930140",
    "end": "1936980"
  },
  {
    "text": "might happen. That's not a thing in normal Rust \ncode. Now, granted, if you do specifically have a  ",
    "start": "1936980",
    "end": "1942559"
  },
  {
    "text": "Rust pointer, that can be null. Okay, fair enough. \nBut now we're already in unsafe territory. So...  Essentially what you're saying there is, \nwell, you've kind of, yeah, if... There are  ",
    "start": "1942560",
    "end": "1950480"
  },
  {
    "text": "ways to kind of unlock Pandora's box, but if \nyou're doing that, it's intentional, right? ",
    "start": "1950480",
    "end": "1956179"
  },
  {
    "text": "It's interesting like you were talking about \nearlier, like, in Python, it's sort of culturally   a thing that if you're gonna do interop with \nanother language and drop down to the lower-level  ",
    "start": "1956780",
    "end": "1965120"
  },
  {
    "start": "1957000",
    "end": "2365000"
  },
  {
    "text": "stuff, it's like, that's kind of for experts, \nand \"here there be dragons.\" But to me, it,  ",
    "start": "1965120",
    "end": "1970640"
  },
  {
    "text": "at least when I was getting into Rust, \nI felt the same way about unsafe code,   where it's like, well, I'm doing low-level stuff \nin Rust, but there's still this other level,  ",
    "start": "1970640",
    "end": "1979760"
  },
  {
    "text": "that's deeper and scarier, where I use the unsafe \nkeyword, and now all bets are off. We're back in   segmentation fault land. So, it almost feels to \nme like somewhere in between, like, a Python or  ",
    "start": "1979760",
    "end": "1989840"
  },
  {
    "text": "a Java or something like that, and the lowest \nlevel, like, assembly language, machine code,  ",
    "start": "1989840",
    "end": "1994159"
  },
  {
    "text": "you know, C, which is just portable assembly, \nas they colloquially say, Rust is somewhere   in between. Like, it is definitely lower level... \nSafe Rust, I should say. When you're not using the  ",
    "start": "1995000",
    "end": "2004540"
  },
  {
    "text": "unsafe keyword. It feels a lot more like Python or \nJava, with, in a lot of ways, better ergonomics,  ",
    "start": "2004540",
    "end": "2010600"
  },
  {
    "text": "and a higher learning curve. But at the \nsame time, I get almost all the power of  ",
    "start": "2011440",
    "end": "2016720"
  },
  {
    "text": "that lowest-level stuff. There's just this \nlittle extra bit that requires going into   unsafe if you really wanna get into those things.\nThis is one of the things that I intentionally  ",
    "start": "2016720",
    "end": "2027879"
  },
  {
    "text": "included in the book. I got quite a lot of \npushback from reviewers. So, Manning has this  ",
    "start": "2027880",
    "end": "2035560"
  },
  {
    "text": "process where they send out your manuscript to, \nsay, 20 people that anonymously provide feedback. ",
    "start": "2035560",
    "end": "2041424"
  },
  {
    "text": "I remember this.\nAnd one other of the reviewers... It's, like,   the opposite of fun, right? No. It's a really \nimportant part of why Manning's books are very  ",
    "start": "2041424",
    "end": "2053560"
  },
  {
    "text": "high-quality. And one of the things that I stayed \nquite firm on was exposing readers to unsafe.  ",
    "start": "2053560",
    "end": "2062320"
  },
  {
    "text": "I was like, this is a valid part of the language, \nand we shouldn't be kind of intimidated by it.  ",
    "start": "2063040",
    "end": "2069640"
  },
  {
    "text": "Or at least there are some really powerful \nthings that this unlocks. And one of them,  ",
    "start": "2070720",
    "end": "2077379"
  },
  {
    "text": "or at least if we ever...like, for example, \none of the examples is a memory scanner. ",
    "start": "2079300",
    "end": "2084879"
  },
  {
    "text": "So actually, we wanna invoke segmentation faults, \nand kind of find out where things are... And we  ",
    "start": "2084880",
    "end": "2090220"
  },
  {
    "text": "kinda need to do silly things, like converting \nintegers, and raw integers into memory addresses,   for example. And this means we need to kind of lie \nto the type system, or, like, lie to the compiler. ",
    "start": "2090220",
    "end": "2099640"
  },
  {
    "text": "Right. Well, and I think...\nNo, from, like, a teaching point of view,   I did also wanna say that you shouldn't feel \nas though this isn't learnable. I just had a  ",
    "start": "2099640",
    "end": "2109540"
  },
  {
    "text": "slight flash of a thought, which was, one of the \nreasons why you might want to do unsafe. Well,  ",
    "start": "2109540",
    "end": "2115120"
  },
  {
    "text": "you probably don't want to do it, but \none of the things Rust does badly,  ",
    "start": "2115120",
    "end": "2118600"
  },
  {
    "text": "by design, essentially, is cyclic data \nstructures, or, like, a graph. So, normally,  ",
    "start": "2120280",
    "end": "2129460"
  },
  {
    "text": "things in Rust land are in a tree. As soon as you \nhave references from children back to parents,  ",
    "start": "2129460",
    "end": "2136900"
  },
  {
    "text": "you create a cycle. And those sorts of cycles \nturn out to be quite nasty in languages that  ",
    "start": "2136900",
    "end": "2143440"
  },
  {
    "text": "don't have a garbage collector, like Rust.\nYes. I think that's interesting... I'm surprised,   first of all, that reviewers would push back on \nthat. I mean, to me, it seems like there's an open  ",
    "start": "2143440",
    "end": "2152140"
  },
  {
    "text": "question of, like, should a beginner book get into \nthis or not? But it seems worth mentioning at the   very least, because, essentially because I think \nthere are a lot of misconceptions out there around  ",
    "start": "2152140",
    "end": "2160660"
  },
  {
    "text": "unsafe. Steve Klabnik wrote that whole blog post \nabout, you can't \"turn off the borrow checker\"  ",
    "start": "2160660",
    "end": "2166359"
  },
  {
    "text": "in Rust, which is not what unsafe does. It's like, \nthe borrow checker is still very much there. There   are just certain operations that are unsafe for \npotentially other reasons, or potentially a lot  ",
    "start": "2166360",
    "end": "2174280"
  },
  {
    "text": "of reasons, that require the use of the keyword. \nI think it's helpful, if you have time to do it,  ",
    "start": "2174280",
    "end": "2181000"
  },
  {
    "text": "to explain to readers, here's what unsafe \nis. Even if you're not going to go on a whole   long tangent about here are all the different \nthings you can do with unsafe. Or especially  ",
    "start": "2181000",
    "end": "2190119"
  },
  {
    "text": "giving people the wrong cultural impression. \nBecause certainly, from what I've seen, in Rust,   there's a very strong cultural aversion to \nusing unsafe, and really, people wanna see that,  ",
    "start": "2191260",
    "end": "2201340"
  },
  {
    "text": "you know, a library that they're depending \non is using it as little as possible. Right. I don't wanna give people the impression \nthat being unsafe is going to ruin your program.  ",
    "start": "2201340",
    "end": "2210099"
  },
  {
    "text": "And I think what you're trying to say there, \nRichard is that it's very easy for tooling to  ",
    "start": "2210100",
    "end": "2217000"
  },
  {
    "text": "detect the use of unsafe. And by the way, if \nlibraries are known as using this construct,  ",
    "start": "2217000",
    "end": "2223780"
  },
  {
    "text": "it becomes, like, a very strong target for, \nlike, refactoring. And this happened with,  ",
    "start": "2223780",
    "end": "2229180"
  },
  {
    "text": "like, a very prominent web framework called \nActix, which had extremely good benchmarks. But,  ",
    "start": "2229180",
    "end": "2235720"
  },
  {
    "text": "the immune system of the Rust community kind \nof came back, in some ways, and said, \"Whoa,  ",
    "start": "2237940",
    "end": "2245619"
  },
  {
    "text": "whoa, whoa. You're faking it.\" Well, not \nquite. It turns out that there were good   reasons and so forth. And it seemed like \nthis big cultural war around what is a... ",
    "start": "2245620",
    "end": "2257740"
  },
  {
    "text": "Right. A big controversy.\nIt was quite big. I mean,   there are programming language dramas. Like...\nOf course. ",
    "start": "2257740",
    "end": "2267099"
  },
  {
    "text": "I feel like explaining a little bit about what's \nsafe. So, there are two uses of the word unsafe.  ",
    "start": "2270700",
    "end": "2277720"
  },
  {
    "text": "So, the keyword itself says not \"this is \ninherently unsafe.\" What's more, I, as the  ",
    "start": "2277720",
    "end": "2287320"
  },
  {
    "text": "programmer, take responsibility for verifying \neverything that the compiler would by itself  ",
    "start": "2287320",
    "end": "2293740"
  },
  {
    "text": "verify. So, remembered why we had, like, this very \nstrong linter. They're called the borrow checker.  ",
    "start": "2293740",
    "end": "2299320"
  },
  {
    "text": "Now, essentially, you as the programmer take \non responsibility for being the borrow checker.  ",
    "start": "2299860",
    "end": "2306220"
  },
  {
    "text": "That's essentially what unsafe is used for in the \nprimary use of that keyword. It doesn't provide  ",
    "start": "2306220",
    "end": "2316300"
  },
  {
    "text": "you, like, a free-for-all to do everything. \nThat's what Steve's post was about. And  ",
    "start": "2316300",
    "end": "2321940"
  },
  {
    "text": "it's intentionally ugly. So it's hard \nto just kind of accidentally insert.  ",
    "start": "2322660",
    "end": "2328000"
  },
  {
    "text": "The other use of...\nFor sure.  ...unsafe is you can define a trait. So, this is \nkind of an interface or an abstract base class,  ",
    "start": "2329020",
    "end": "2335860"
  },
  {
    "text": "that is unsafe. And this is a subtly different use \nof the keyword. What this is saying is that people  ",
    "start": "2337000",
    "end": "2343060"
  },
  {
    "text": "that implement it need to guarantee that their \nimplementation sort of complies with a contract  ",
    "start": "2343060",
    "end": "2350500"
  },
  {
    "text": "that is probably written in the documentation \nbecause the type system can't really encode it.  ",
    "start": "2350500",
    "end": "2355720"
  },
  {
    "text": "That's kind of my understanding of the two big \nreasons why you might want to use the keyword.",
    "start": "2357280",
    "end": "2364780"
  },
  {
    "start": "2365000",
    "end": "2836000"
  },
  {
    "text": "One thing I want to make sure to ask you \nabout is, in the timekeeping chapter,   you have a photo of a physical device that \nkeeps time. What's the story behind that? ",
    "start": "2365740",
    "end": "2374500"
  },
  {
    "text": "You're just getting me to geek out on, like, \nanother one of my big passion projects,   I suppose. So, I'm quite into, I guess, nature \nprotection broadly. So, it's a box. And inside...  ",
    "start": "2376600",
    "end": "2398020"
  },
  {
    "text": "it's a device that takes infrared cameras, \nfrom a project called Cacophony. It turns out  ",
    "start": "2398020",
    "end": "2404080"
  },
  {
    "text": "that when European settlers arrived in the 18th \ncentury into New Zealand, over about a century,  ",
    "start": "2404080",
    "end": "2412720"
  },
  {
    "text": "they introduced a lot of species that \nwere harmful to a lot of our native birds.  ",
    "start": "2412720",
    "end": "2418540"
  },
  {
    "text": "And things like stoats and weasels and rats like \nto eat either birds or eggs. And turns out that if  ",
    "start": "2419140",
    "end": "2425619"
  },
  {
    "text": "you're a flightless bird, this is bad for you.\nI bet.  So, there were some diaries of explorers. One \nof the phrases was that at night, the forest was  ",
    "start": "2425620",
    "end": "2443200"
  },
  {
    "text": "just this cacophony, and the whole forest was just \nalive with birds. We didn't have any predators at  ",
    "start": "2443200",
    "end": "2454420"
  },
  {
    "text": "all, so a lot of our birds are nocturnal also. So, \nfamously, the kiwi, the bird with the long beak  ",
    "start": "2454420",
    "end": "2460359"
  },
  {
    "text": "that can't fly, is a nocturnal species.\nI didn't know that.  And there are a lot of adaptions that \nare quite strange, by the way. So,  ",
    "start": "2460360",
    "end": "2466420"
  },
  {
    "text": "we have birds that pretend to be rodents. We have \nbirds that can hop around trees, so they're kind  ",
    "start": "2466420",
    "end": "2472420"
  },
  {
    "text": "of similar to monkeys, or provide the same...they \nlive in the same ecological niche, or provide the  ",
    "start": "2472420",
    "end": "2479140"
  },
  {
    "text": "same function as what mammals would in other \nbiospheres. Anyway, the Cacophony project is  ",
    "start": "2479140",
    "end": "2488920"
  },
  {
    "text": "attempting to use machine learning to identify, is \nthis a cat? Is this a rat? Is this a weasel? And  ",
    "start": "2488920",
    "end": "2496780"
  },
  {
    "text": "it does it with infrared vision. It takes photos, \nor takes videos, actually, and timestamps them.  ",
    "start": "2496780",
    "end": "2502660"
  },
  {
    "text": "But it turns out that if you're a tiny little \ndevice, it's really hard for you to tell time.  ",
    "start": "2503260",
    "end": "2508240"
  },
  {
    "text": "You need a clock. And then I was like, \nwait a minute. So, part of this book  ",
    "start": "2509200",
    "end": "2514599"
  },
  {
    "text": "was this amazing research, and I was like, \nhow on Earth does any computer tell time?  ",
    "start": "2514600",
    "end": "2519400"
  },
  {
    "text": "And it turns out, one of the properties of \nquartz crystals is that when they're electrified,  ",
    "start": "2520120",
    "end": "2526300"
  },
  {
    "text": "they oscillate. So, they go backward and \nforward at a very specific frequency.  ",
    "start": "2526300",
    "end": "2531760"
  },
  {
    "text": "That frequency is counted. And therefore we know \nthe voltage that is being sent into the crystal.  ",
    "start": "2533440",
    "end": "2540280"
  },
  {
    "text": "We know the rate at which it will oscillate. And \ntherefore we can tell time because we say we start  ",
    "start": "2540280",
    "end": "2546820"
  },
  {
    "text": "at zero and we just start clicking across.\nEventually, we will hit some number. Let's  ",
    "start": "2546820",
    "end": "2552640"
  },
  {
    "text": "say we have, like, 16 bits. We'll get to \n65,000, and we'll need to wrap around to zero,  ",
    "start": "2552640",
    "end": "2560440"
  },
  {
    "text": "but we might have some way of dealing \nwith that. It turns out they do.  ",
    "start": "2560440",
    "end": "2564339"
  },
  {
    "text": "But it turns out this is essentially a primitive \nway of keeping time that is used by essentially  ",
    "start": "2567160",
    "end": "2572920"
  },
  {
    "text": "every digital computer. But, then, how do they \nsynchronize? And this is one of the problems of  ",
    "start": "2572920",
    "end": "2580540"
  },
  {
    "text": "distributed computing. So, how does everyone say, \nokay, I'm currently at oscillation 25,000 of my  ",
    "start": "2580540",
    "end": "2589780"
  },
  {
    "text": "current cycle? How does that translate to the 6th \nof March, 2023? And it's all distributed... I'm  ",
    "start": "2589780",
    "end": "2598300"
  },
  {
    "text": "gonna get into a big flame war. But essentially, \nwhat we have is canonical devices. So, much more  ",
    "start": "2598300",
    "end": "2605200"
  },
  {
    "text": "accurate timekeeping devices, which are what are \nknown as atomic clocks, use even more specific...  ",
    "start": "2605200",
    "end": "2611380"
  },
  {
    "text": "And they all kind of agree.\nIt turns out that, I think   there's about half a dozen, maybe a dozen of these \natomic clocks. They're called tier one devices,  ",
    "start": "2612940",
    "end": "2622359"
  },
  {
    "text": "or tier zero devices, inside the network time \nprotocol. They agree on what the time is.  ",
    "start": "2622360",
    "end": "2628180"
  },
  {
    "text": "Then they just tell other people. And then \njust like, let's say, a DNS system, it kind  ",
    "start": "2630760",
    "end": "2638500"
  },
  {
    "text": "of propagates through. It turns out that if you \nare inside a data center, you can get clocks to  ",
    "start": "2638500",
    "end": "2644440"
  },
  {
    "text": "agree on what the time is without the... Because \nat some point, it kind of becomes irrelevant what  ",
    "start": "2644440",
    "end": "2650680"
  },
  {
    "text": "the atomic clock thinks the time is. What matters \nis that the clocks that are really close together  ",
    "start": "2650680",
    "end": "2656859"
  },
  {
    "text": "agree. Because you want, say, \nfor example, logs or messages   to be roughly in order. It \nturns out you can't do this…",
    "start": "2657940",
    "end": "2666460"
  },
  {
    "text": "Yes. Right. Monotonic ordering, as they call it. \nLike, in a distributed system. And it turns out,  ",
    "start": "2666460",
    "end": "2671980"
  },
  {
    "text": "by the way, that a single multi-core laptop, or \na single multi-core phone, becomes a distributed  ",
    "start": "2671980",
    "end": "2678100"
  },
  {
    "text": "system because each CPU operates independently. \nThis is kind of, like, one of the mind-bending  ",
    "start": "2678100",
    "end": "2684520"
  },
  {
    "text": "things about technology. Like, it's just so \nincredible that, like, this stuff even works.  ",
    "start": "2684520",
    "end": "2691420"
  },
  {
    "text": "And, like, I just think about it, like, at every \nsingle level, you have these examples where  ",
    "start": "2692740",
    "end": "2700720"
  },
  {
    "text": "at every single level... Like, let's think about \nthe text. We started with, like, plain bytes, and   then we needed... So, we started with, like, Morse \ncode and other coding signals for interpreting,  ",
    "start": "2703240",
    "end": "2713200"
  },
  {
    "text": "like, binary digits and translating them to \nletters and numbers. And then we kind of, like,   wrapped around more and more on top. So, in ASCII, \nwhich is, like, the encoding system from the '60s,  ",
    "start": "2713200",
    "end": "2723280"
  },
  {
    "text": "there are control characters, and we still managed \nto kind of hold onto those, even though, like,  ",
    "start": "2723280",
    "end": "2728980"
  },
  {
    "text": "the bell doesn't mean much today. And famously, \noperating systems still can't agree on what a new  ",
    "start": "2728980",
    "end": "2736660"
  },
  {
    "text": "line means. But, do we need a carriage return, \nand, likely there's no physical carriage? ",
    "start": "2736660",
    "end": "2745299"
  },
  {
    "text": "Depends on which operating system you ask.\nThat's right. And somehow we've just added   on more and more layers. Again and again and \nagain and again. I love it. And that is kind of,  ",
    "start": "2746104",
    "end": "2758980"
  },
  {
    "text": "I was like, you know what? I am gonna spend \nessentially years of my life writing a book. So,  ",
    "start": "2758980",
    "end": "2766119"
  },
  {
    "text": "I did some calculations as I was in the \nfinal stages of processing, or publishing,  ",
    "start": "2766120",
    "end": "2771580"
  },
  {
    "text": "about how long this horrible project \ntook. I spent, on an average week,  ",
    "start": "2772480",
    "end": "2781480"
  },
  {
    "text": "between 10 to 15 hours per week on this thing. \nSo, three or four hours a night, three or four  ",
    "start": "2781480",
    "end": "2787060"
  },
  {
    "text": "nights a week. Plus I try to do, like, a chunk on \nthe weekend. From the initial conversations with  ",
    "start": "2787060",
    "end": "2795820"
  },
  {
    "text": "Manning through to publication, it was essentially \na four-year project, because I needed to, like,  ",
    "start": "2795820",
    "end": "2801280"
  },
  {
    "text": "do extensive rewrites of both the prose as well \nas the code, and answer lovely questions from,  ",
    "start": "2801280",
    "end": "2813580"
  },
  {
    "text": "like, people reading it as well. That was a bit \nof a time suck. And, like, doing diagrams took  ",
    "start": "2813580",
    "end": "2820060"
  },
  {
    "text": "weeks and weeks and weeks in some of them.\nI remember all the diagrams. It's like   they don't take up that much space on the page \nrelative to how much time they take up to make. ",
    "start": "2820060",
    "end": "2828040"
  },
  {
    "text": "That's right.\nIn a lot of cases.  So, I was like, I've probably dropped, \nlike, 2000 hours into this thing.",
    "start": "2829960",
    "end": "2835180"
  },
  {
    "text": "Well, that's a great segue into my \nfinal question for you, which is,  ",
    "start": "2835180",
    "end": "2838720"
  },
  {
    "start": "2836000",
    "end": "2996000"
  },
  {
    "text": "looking back on how much time you spent on it, \nyou know, was it worth it? Are you happy with the   result? You know, you said, you mentioned it was \ngood for your career, but just as an author, like,  ",
    "start": "2841060",
    "end": "2849640"
  },
  {
    "text": "you know, what do you think of the whole process?\nWhat I picked up from this interview is that I   learned a tremendous amount, through \nthe research process, and through,  ",
    "start": "2849640",
    "end": "2858820"
  },
  {
    "text": "the writing process, I became significantly \nmore skilled at communicating. I  ",
    "start": "2858820",
    "end": "2864940"
  },
  {
    "text": "always had the goal would speed up \npeople's learning journey by 100 hours.  ",
    "start": "2865900",
    "end": "2872020"
  },
  {
    "text": "At this point, I know that potentially hundreds \nof thousands of people have read the book. And,  ",
    "start": "2873160",
    "end": "2881020"
  },
  {
    "text": "like, if you were to multiply my input \nversus the output that it's generated,  ",
    "start": "2884560",
    "end": "2890200"
  },
  {
    "text": "I think it's been, like, a huge win for the \nindustry. It's created a whole wave of Rust  ",
    "start": "2890200",
    "end": "2896440"
  },
  {
    "text": "material inside Manning and other publishers, \nwho have said that Rust is a viable product, or,  ",
    "start": "2896440",
    "end": "2902920"
  },
  {
    "text": "like, is a viable ecosystem. So, the only thing is \nthat my health suffered quite badly. I used to run  ",
    "start": "2902920",
    "end": "2912280"
  },
  {
    "text": "marathons. I used to lift weights. I used to be \nable to pull, like, 200 kilograms off the ground. ",
    "start": "2912280",
    "end": "2918760"
  },
  {
    "text": "I've put all of that aside, and I think that \nmy kids are the people that suffered the most.  ",
    "start": "2920620",
    "end": "2927460"
  },
  {
    "text": "Because there were times when we could have gone \nto the park, or we could have gone for a walk,   and I was, like, writing the book. So, my message \nto readers is, like, I hope that you find the  ",
    "start": "2930220",
    "end": "2943300"
  },
  {
    "text": "material that's useful for you. It might be \n\"Rust in Action.\" It might be something else   but find it. Like, this is a community that \nis welcoming and accepting of you, and there  ",
    "start": "2943300",
    "end": "2953500"
  },
  {
    "text": "are now, like, a very rich set of \nresources to draw from. And I think   my message to my kids is that, like, I love \nyou lots, and I hope that you forgive me. ",
    "start": "2956620",
    "end": "2963640"
  },
  {
    "text": "I'm glad that if you're going to \nmake a big sacrifice like that,   in so many different aspects of \nyour life and your kids, I mean,  ",
    "start": "2968380",
    "end": "2975220"
  },
  {
    "text": "it's great to hear that, you know, like, at least \nyou got a really good book out of it. And it's   not just, you know, something you look back on as \nlike, \"Oh, I'm never doing that again,\" you know. ",
    "start": "2976120",
    "end": "2984160"
  },
  {
    "text": "People keep asking me for the second \nedition and the second volume, or, like,   the next book. I'm like, well, actually, I might \nsay yes, but there are consequences, right? ",
    "start": "2984160",
    "end": "2993640"
  },
  {
    "start": "2996000",
    "end": "3043000"
  },
  {
    "text": "Well, I think that's a good spot to wrap things \nup. Tim, thanks so much for talking to me about  ",
    "start": "2998080",
    "end": "3003180"
  },
  {
    "text": "the book, and thanks for writing it. It's an \nexcellent book, and I'm just glad we've had the   chance to talk to you about it.\nNice. Hey, thanks so much, Richard.",
    "start": "3003180",
    "end": "3010680"
  }
]