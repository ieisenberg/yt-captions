[
  {
    "text": "[Music] well uh let's uh do a little bit of warm-up checking uh in terms of what",
    "start": "6990",
    "end": "13920"
  },
  {
    "text": "your previous exposure to to our stuff is uh who's actually working uh with",
    "start": "13920",
    "end": "19880"
  },
  {
    "text": "spring actively developing spring applications okay well not unexpectedly",
    "start": "19880",
    "end": "24960"
  },
  {
    "text": "I guess inverse question who's not currently working with spring in in",
    "start": "24960",
    "end": "30400"
  },
  {
    "text": "practice is there anyone quite a few um who hasn't ever looked at Spring",
    "start": "30400",
    "end": "37879"
  },
  {
    "text": "before anyone dare to raise their hands no um I'll do a little bit of a uh um",
    "start": "37879",
    "end": "45640"
  },
  {
    "text": "quick dive into modern day spring initially so um there there will be um a",
    "start": "45640",
    "end": "51360"
  },
  {
    "text": "chance to to find a common path of ours here this morning um but the the bulk of",
    "start": "51360",
    "end": "57920"
  },
  {
    "text": "the session is on very recent efforts that we've been working on so before we",
    "start": "57920",
    "end": "64600"
  },
  {
    "text": "actually go into five too I'll um do a little bit of a a glance at 4o 3 uh so",
    "start": "64600",
    "end": "73360"
  },
  {
    "text": "just to um uh to give you the idea we um we have a very um uh Dynamic road map",
    "start": "73360",
    "end": "81079"
  },
  {
    "text": "these days we actually release uh feature releases every 10 months we did 4.0 4.1 4.2 uh in very short succession",
    "start": "81079",
    "end": "90479"
  },
  {
    "text": "for our purposes anyway the um the feature releases what we call a feature release like for the one and for the 2",
    "start": "90479",
    "end": "97479"
  },
  {
    "text": "or for of 3 now actually very significant releases in their own right",
    "start": "97479",
    "end": "102640"
  },
  {
    "text": "they are basically major feature releases that other people would call five too sixo and 7o I'm pretty sure um",
    "start": "102640",
    "end": "109200"
  },
  {
    "text": "other open source projects in particular we um tend to use the major version number as a kind of Baseline which means",
    "start": "109200",
    "end": "117439"
  },
  {
    "text": "as long as it's 4 do three here we still hang on to the system",
    "start": "117439",
    "end": "122680"
  },
  {
    "text": "requirements of the spring framework four generation so even for the3 which has been released last",
    "start": "122680",
    "end": "130360"
  },
  {
    "text": "Friday um on on the 10th is a jdk 6",
    "start": "130360",
    "end": "135599"
  },
  {
    "text": "basined version of the framework of course with very upto-date jdk8 support uh as you're used to we do not change",
    "start": "135599",
    "end": "143319"
  },
  {
    "text": "system requirements in major uh like in in minor feature releases within the major generation five to those chance to",
    "start": "143319",
    "end": "150360"
  },
  {
    "text": "do this we'll get to that in just a bit um well actually while we while we were",
    "start": "150360",
    "end": "156599"
  },
  {
    "text": "doing some hand raising who's working with spring 4.2 spring framework 4.2",
    "start": "156599",
    "end": "161800"
  },
  {
    "text": "boot 1.3 okay 4.1 anyone um still stuck on 3.2 or using",
    "start": "161800",
    "end": "170080"
  },
  {
    "text": "3.2 for some reason okay that's cool that's basically um where we are at um",
    "start": "170080",
    "end": "178000"
  },
  {
    "text": "most of the um most of of the efforts of course these days go into the spring firor 4 line uh 3 the 2 is just being",
    "start": "178000",
    "end": "184879"
  },
  {
    "text": "maintained until the end of this year but literally just maintained pho3 is a",
    "start": "184879",
    "end": "190200"
  },
  {
    "text": "kind of wrapup the last feature release in our photoex line there's not going to",
    "start": "190200",
    "end": "196720"
  },
  {
    "text": "be a 4.4 ever 4.3 will have a a kind of extended maintenance life until roughly",
    "start": "196720",
    "end": "203959"
  },
  {
    "text": "2019 maybe into 2020 similar to where 3.2 is right now 3.2x has an extended",
    "start": "203959",
    "end": "212080"
  },
  {
    "text": "maintenance phase for almost four years now um 4.3 is going to be the same kind",
    "start": "212080",
    "end": "217879"
  },
  {
    "text": "of um end of a generation basically of the",
    "start": "217879",
    "end": "222920"
  },
  {
    "text": "framework the um um range of supported platforms is as mentioned it's still uh",
    "start": "222920",
    "end": "230159"
  },
  {
    "text": "very conservatively baselined jdk 6 Plus and CET 2.5 plus that translates as",
    "start": "230159",
    "end": "236760"
  },
  {
    "text": "examples for example that it still runs on Tom kit 6 um it actually much preferably also runs",
    "start": "236760",
    "end": "245120"
  },
  {
    "text": "on tomk 8.5 which was released just a couple of weeks ago so this is kind of uh the way we're going about this a",
    "start": "245120",
    "end": "251879"
  },
  {
    "text": "baseline just means if you really want to you can still run it there on this minimum Baseline we recommend the",
    "start": "251879",
    "end": "259239"
  },
  {
    "text": "current generation of infrastructure out there and that would be Tom cad5 in the",
    "start": "259239",
    "end": "264759"
  },
  {
    "text": "tomit line and in web spere just as a common reference you can still run it on web spere 7 um we do um spend quite a",
    "start": "264759",
    "end": "273440"
  },
  {
    "text": "bit of effort to make it work properly everything worked properly on websphere 8.5 Liberty in particular and we're",
    "start": "273440",
    "end": "280400"
  },
  {
    "text": "working towards compatibility with nine nothing Earth shattering we just do our",
    "start": "280400",
    "end": "285560"
  },
  {
    "text": "share in terms of compatibility testing that's all really the 4 3",
    "start": "285560",
    "end": "290639"
  },
  {
    "text": "Generation Um or the for 3 opportunity allowed us to do some refinements in the",
    "start": "290639",
    "end": "296080"
  },
  {
    "text": "programming model so F 3 is actually somewhat significant in some of the things that it does and I'm just going",
    "start": "296080",
    "end": "301440"
  },
  {
    "text": "to highlight a few of the things because I guess you would actually expect those things to happen in a 5",
    "start": "301440",
    "end": "307280"
  },
  {
    "text": "to0 um we intentionally brought some of those things forward to for the3 because",
    "start": "307280",
    "end": "314440"
  },
  {
    "text": "they easily implementable on jdk6 entire so we can bring them to a wider range of",
    "start": "314440",
    "end": "321080"
  },
  {
    "text": "system environments and we can bring them to you right now as opposed to next",
    "start": "321080",
    "end": "326199"
  },
  {
    "text": "year so that's why we took some things that we would otherwise only really do in the 5.0 and brought them forward to",
    "start": "326199",
    "end": "334759"
  },
  {
    "text": "43 some of them appear minor but actually somewhat significant if you look at this kind of component class",
    "start": "334759",
    "end": "341880"
  },
  {
    "text": "doesn't look out of the ordinary but the commented out part at the Constructor is",
    "start": "341880",
    "end": "347520"
  },
  {
    "text": "intentional as of 4.3 you do not have to mark a Constructor as Auto wide as at",
    "start": "347520",
    "end": "354280"
  },
  {
    "text": "autowire if it is the only Constructor anyway in an annotated class in an",
    "start": "354280",
    "end": "360360"
  },
  {
    "text": "annotated setup so we kind of still recommend to do it for the source code readability",
    "start": "360360",
    "end": "367960"
  },
  {
    "text": "part if you look at your piece of source code the at Auto wi still tells you something about this Constructor that it",
    "start": "367960",
    "end": "373720"
  },
  {
    "text": "is an auto wi Constructor but technically you do not have to annotate a single Constructor scenario anymore we",
    "start": "373720",
    "end": "381199"
  },
  {
    "text": "imply the adult W for you this is something we considered for quite a while and has been raised to us it's",
    "start": "381199",
    "end": "388080"
  },
  {
    "text": "actually feedback driven so uh quite a few people raised it to us um this scenario I would actually personally opt",
    "start": "388080",
    "end": "395560"
  },
  {
    "text": "for annotating it because it's consistent with the style of the rest of the class but consider a class that",
    "start": "395560",
    "end": "401520"
  },
  {
    "text": "doesn't have any annotations otherwise it's maybe it's registered uh by type or",
    "start": "401520",
    "end": "406960"
  },
  {
    "text": "it's created by um through some other means not through uh detection in the",
    "start": "406960",
    "end": "412720"
  },
  {
    "text": "class puff based on stereotype annotations uh maybe it doesn't have transaction annotations at all it could not have any annotations otherwise it",
    "start": "412720",
    "end": "419720"
  },
  {
    "text": "would just have this at Auto for the Constructor for dependency injection purposes then it becomes more compelling",
    "start": "419720",
    "end": "426120"
  },
  {
    "text": "to just skip the at autowired have a non-annotated class automatically managed by the framework um in a",
    "start": "426120",
    "end": "433199"
  },
  {
    "text": "reasonable way so this is the an example for the sort of",
    "start": "433199",
    "end": "438479"
  },
  {
    "text": "refinement you can even do this to configuration classes these days this might also look like somewhat uh common",
    "start": "438479",
    "end": "446479"
  },
  {
    "text": "or obvious but it is actually not configuration classes used to not support Constructor",
    "start": "446479",
    "end": "453560"
  },
  {
    "text": "injection because for an add configuration stereotype we actually create subclasses through the gilb and",
    "start": "453560",
    "end": "459039"
  },
  {
    "text": "previously we did not generate uh equivalent Constructors on that subass you simply could not declare non default",
    "start": "459039",
    "end": "465720"
  },
  {
    "text": "Constructors in a configuration class so people resorted to like field injection for common types that they wanted to",
    "start": "465720",
    "end": "472000"
  },
  {
    "text": "link into their their Factory methods here like this book at Min data source we don't like fi injection all",
    "start": "472000",
    "end": "478560"
  },
  {
    "text": "that much or at least some of us don't so um we prefer to give you the opportunity to or to give you the uh",
    "start": "478560",
    "end": "485400"
  },
  {
    "text": "chance the ability to use Constructor injection wherever you would otherwise use field injection we close that Gap in",
    "start": "485400",
    "end": "492000"
  },
  {
    "text": "photo 3 now so just do the obvious declare a Constructor like in any other",
    "start": "492000",
    "end": "497440"
  },
  {
    "text": "component class make it accept the references store them in a field you can basically do in a configuration class",
    "start": "497440",
    "end": "503319"
  },
  {
    "text": "what you would do in any other spring component class as well now that was a goal in the design of configuration",
    "start": "503319",
    "end": "508919"
  },
  {
    "text": "classes anyway way that they are regular component classes with a special role but you can basically do whatever you",
    "start": "508919",
    "end": "514919"
  },
  {
    "text": "can do in in component classes this was a gap that we only really closed in F 3 now and combined with the previous",
    "start": "514919",
    "end": "521839"
  },
  {
    "text": "little feature you don't even have to annotate it with that auto wide if it is the only Constructor but you obviously",
    "start": "521839",
    "end": "528640"
  },
  {
    "text": "can right so again if you see a commented out annotation here this means can be annotated for readability",
    "start": "528640",
    "end": "535120"
  },
  {
    "text": "purposes doesn't have to because it is the default on my slides here",
    "start": "535120",
    "end": "541440"
  },
  {
    "text": "right um another example there are actually many such refinements there's a collection of map injection has been",
    "start": "541680",
    "end": "547440"
  },
  {
    "text": "refined uh self injection has been refined there are quite a few things that have been refined in the dependency",
    "start": "547440",
    "end": "553040"
  },
  {
    "text": "injection space but this is not a photo three presentation so I'm just giving you two major um examples the other one",
    "start": "553040",
    "end": "560399"
  },
  {
    "text": "here is a u a controller class an annotated controller this one doesn't",
    "start": "560399",
    "end": "565440"
  },
  {
    "text": "look doesn't look uh strange to you I guess I mean maybe except for the origin part dates back to the core support in 4",
    "start": "565440",
    "end": "572040"
  },
  {
    "text": "two but other than that this is actually pretty straightforward it is restful or",
    "start": "572040",
    "end": "577640"
  },
  {
    "text": "rest oriented anyway uh tries to bind to a particular path to particular paths",
    "start": "577640",
    "end": "583240"
  },
  {
    "text": "and uses hdp method bindings now a refinement that we chose",
    "start": "583240",
    "end": "588320"
  },
  {
    "text": "to do in photo 3 finally is to provide precomposed annotations for some of our",
    "start": "588320",
    "end": "595040"
  },
  {
    "text": "mappings uh you might generally be aware that uh spring four spring for the 2 and",
    "start": "595040",
    "end": "600640"
  },
  {
    "text": "higher in particular has a very strong composable annotation story you can",
    "start": "600640",
    "end": "606000"
  },
  {
    "text": "build your own annotations for almost anything in F two we really uh completed",
    "start": "606000",
    "end": "612360"
  },
  {
    "text": "the feature set in terms of what you can compose how you can refer to other attributes that sort of stuff in folded",
    "start": "612360",
    "end": "618320"
  },
  {
    "text": "three we chose to include some precomposed annotations for you not shown here um for example finally we",
    "start": "618320",
    "end": "625360"
  },
  {
    "text": "have request scope session scope and application scope annotations just in case you really need them that way uh",
    "start": "625360",
    "end": "631640"
  },
  {
    "text": "this is not magic this is not even directly supported in the framework it is literally a just precomposed",
    "start": "631640",
    "end": "637720"
  },
  {
    "text": "annotation met annotated with a standard annotation shipped in the in our core jars that's all you could build them on",
    "start": "637720",
    "end": "644240"
  },
  {
    "text": "your own at any point now for request mappings a common",
    "start": "644240",
    "end": "650040"
  },
  {
    "text": "complaint is that the uh annotation mapping style is a little bit worthy if",
    "start": "650040",
    "end": "656040"
  },
  {
    "text": "you map to more than one attribute like to a path and the map method so if you're if you're mapping uh if your",
    "start": "656040",
    "end": "661920"
  },
  {
    "text": "constraints are um a little bit more complex than just a single element it starts becoming a",
    "start": "661920",
    "end": "668760"
  },
  {
    "text": "little not as readable as it should be in particular since in the Java notation",
    "start": "668760",
    "end": "673839"
  },
  {
    "text": "model once you specify more than one attribute uh as an annotation designer",
    "start": "673839",
    "end": "679160"
  },
  {
    "text": "we can only select one attribute that you can implicitly set without saying value equals just provide the value but",
    "start": "679160",
    "end": "686839"
  },
  {
    "text": "if you specify more than one attribute as a user here you always have to name",
    "start": "686839",
    "end": "692399"
  },
  {
    "text": "the attributes path equals this method equals that so as an example for what",
    "start": "692399",
    "end": "698560"
  },
  {
    "text": "composable annotations can do in general and what we chose to do out of the box in the three we provide precomposed",
    "start": "698560",
    "end": "706399"
  },
  {
    "text": "annotations for the typical rest oriented mapping scenarios get mapping",
    "start": "706399",
    "end": "711800"
  },
  {
    "text": "and post mapping are literally just convenience classes convenience annotations meta annotated with at",
    "start": "711800",
    "end": "717680"
  },
  {
    "text": "request mapping but the designed in such a way that you typically only specify",
    "start": "717680",
    "end": "722800"
  },
  {
    "text": "one attribute which makes it significantly shorter because there's no attribute name equals in here the HTTP",
    "start": "722800",
    "end": "729800"
  },
  {
    "text": "method is implied by the by The annotation name which also makes it well makes it more readable and saves the",
    "start": "729800",
    "end": "736120"
  },
  {
    "text": "second attribute um there's a little bit of a connection to another FO 3 refinement we",
    "start": "736120",
    "end": "742160"
  },
  {
    "text": "have um a set of mapping annotations here like get uh post patch put and delete we do not do options and head",
    "start": "742160",
    "end": "750040"
  },
  {
    "text": "mapping because we refined our default options and head Behavior we aligned it",
    "start": "750040",
    "end": "755519"
  },
  {
    "text": "with what HTP serlet typically does um so if you run a PHA 3 application",
    "start": "755519",
    "end": "761399"
  },
  {
    "text": "against such mappings you will find that the um theature Ser is a little bit smarter in finding out what it should",
    "start": "761399",
    "end": "768440"
  },
  {
    "text": "return When an options request comes in it actually looks at your mappings figures out what mappings or what",
    "start": "768440",
    "end": "774480"
  },
  {
    "text": "mappings there are for particular HTP methods against your given path and will return in a corresponding options",
    "start": "774480",
    "end": "780880"
  },
  {
    "text": "response um we have a quite a few refinements in that space we are",
    "start": "780880",
    "end": "786240"
  },
  {
    "text": "generally very HTTP oriented these days we try to do things the HTTP way um in",
    "start": "786240",
    "end": "792839"
  },
  {
    "text": "quite a few ways including HTTP caching uh and just the general interaction with",
    "start": "792839",
    "end": "798760"
  },
  {
    "text": "http means uh this is also one example where those things actually add up quite",
    "start": "798760",
    "end": "804480"
  },
  {
    "text": "nicely all right and if if you directly compare it it is significantly more",
    "start": "804480",
    "end": "810240"
  },
  {
    "text": "concise in the end so who who likes the get mapping post mapping style the shorer",
    "start": "810240",
    "end": "816279"
  },
  {
    "text": "one okay good to see thanks um by the way uh the expressiveness of course is",
    "start": "816279",
    "end": "822720"
  },
  {
    "text": "basically ex the same right it is a request pepping annotation just in a different rep um and there's always",
    "start": "822720",
    "end": "827839"
  },
  {
    "text": "request mapping to fall back to all right let's move on um so those",
    "start": "827839",
    "end": "834240"
  },
  {
    "text": "were examples for photo 3 features those are already out there we released them last week and we have a 431 coming up in",
    "start": "834240",
    "end": "842759"
  },
  {
    "text": "in uh like July 1st at the moment so uh we are already basically in the ga phase",
    "start": "842759",
    "end": "848600"
  },
  {
    "text": "Um this can be used right now in this production supported to to this day already now let's switch gears a little",
    "start": "848600",
    "end": "856240"
  },
  {
    "text": "we um look into early 2017 we are preparing for a fiveo",
    "start": "856240",
    "end": "863800"
  },
  {
    "text": "generation for quite a while already so we started talking about it last year uh we knew",
    "start": "863800",
    "end": "869560"
  },
  {
    "text": "that we wanted to um have a jdk8 baseline version of the framework that was",
    "start": "869560",
    "end": "875800"
  },
  {
    "text": "actually one of the initial intentions um so for the 2 for the 3 we decided to",
    "start": "875800",
    "end": "881480"
  },
  {
    "text": "do a for 3 still that's that's all cool and delivers a lot of value runs great",
    "start": "881480",
    "end": "886639"
  },
  {
    "text": "on jdk8 in particular but as mentioned it's still jdk6 baselined which means um",
    "start": "886639",
    "end": "893959"
  },
  {
    "text": "there's some there are some things we cannot do within the framework because we have to restrict ourselves to uh jdk",
    "start": "893959",
    "end": "902440"
  },
  {
    "text": "the jdk6 API level um and the jdk6 language level um the funny part is you",
    "start": "902440",
    "end": "910160"
  },
  {
    "text": "probably won't notice that much if you run spring Pho 3 on jdk8 it just feels",
    "start": "910160",
    "end": "915279"
  },
  {
    "text": "like a jdk8 based framework to you it does everything it possibly can it understands Java util stream it",
    "start": "915279",
    "end": "921360"
  },
  {
    "text": "automatically adapts to Java util optional um lamb does perfectly work um",
    "start": "921360",
    "end": "927240"
  },
  {
    "text": "a parameter name discovery on jdk Works everything you could typically expect as",
    "start": "927240",
    "end": "932399"
  },
  {
    "text": "an application developer works for you because the framework Auto adapts if it encounters jdk8 code at runtime if it",
    "start": "932399",
    "end": "940199"
  },
  {
    "text": "encounters the use of jdk8 API in your classes the framework automatically adapts and supports it that's cool",
    "start": "940199",
    "end": "947160"
  },
  {
    "text": "that's what we wanted to achieve in the spring framewor 4 line um but it doesn't change the fact that internally we would",
    "start": "947160",
    "end": "954000"
  },
  {
    "text": "also benefit quite a bit from being jdk8 plus within our own code base so we the",
    "start": "954000",
    "end": "960759"
  },
  {
    "text": "gd8 plus part is primarily for us admittedly but it's also a a a kind of",
    "start": "960759",
    "end": "967519"
  },
  {
    "text": "measure that we take for further Evolution afterwards we allow ourselves",
    "start": "967519",
    "end": "972720"
  },
  {
    "text": "then to use jdk API types in our signatures we can refer to the Java util",
    "start": "972720",
    "end": "977920"
  },
  {
    "text": "function interfaces we can do uh quite a few things we are just unable to do in U",
    "start": "977920",
    "end": "983920"
  },
  {
    "text": "aesthetically declared signatures right now however the jdk8 baselining is more more for us right in terms of uh feature",
    "start": "983920",
    "end": "991480"
  },
  {
    "text": "themes for spring fror 5 we aim for a",
    "start": "991480",
    "end": "996519"
  },
  {
    "text": "reasonably comprehensive jdk9 story I'll elaborate on that a bit we have a strong",
    "start": "996519",
    "end": "1001600"
  },
  {
    "text": "focus on http2 that was part of the initial Mission I'll I'll talk a little",
    "start": "1001600",
    "end": "1006680"
  },
  {
    "text": "bit about how we're going about this and we have a strong Focus for a reactive",
    "start": "1006680",
    "end": "1012120"
  },
  {
    "text": "programming story a reactive programming model within the core spring framework",
    "start": "1012120",
    "end": "1018120"
  },
  {
    "text": "Style within the core spring framework distribution from the ground up uh integrated into the core framework but",
    "start": "1018120",
    "end": "1024720"
  },
  {
    "text": "of course also um to shine through uh in other parts of our",
    "start": "1024720",
    "end": "1031160"
  },
  {
    "text": "portfolio so we are talking about a generation of the framework that targets 2017 plus uh we design it for the",
    "start": "1031160",
    "end": "1040199"
  },
  {
    "text": "infrastructure and the challenges of 2017 entire so the Baseline upgrade is",
    "start": "1040199",
    "end": "1046079"
  },
  {
    "text": "actually um quite a bit more than just the jdk8 plus Baseline we erase quite a few of them um",
    "start": "1046079",
    "end": "1053799"
  },
  {
    "text": "not too aggressively and notice the Ser 3 the o plus part right it's not even Ser 3.1 plus um but we require a few",
    "start": "1053799",
    "end": "1062880"
  },
  {
    "text": "reasonably recent uh API Generations here basically Java E7 leveled with a",
    "start": "1062880",
    "end": "1068520"
  },
  {
    "text": "few compromises like the server 3.0 um entire part we will also raise the",
    "start": "1068520",
    "end": "1073799"
  },
  {
    "text": "Baseline for third party libraries at this point um in 4o 3 we are still pretty",
    "start": "1073799",
    "end": "1080039"
  },
  {
    "text": "generous in terms of letting you choose the version of say hibernate and jackon",
    "start": "1080039",
    "end": "1086799"
  },
  {
    "text": "um and all the common librar is typically combined with spring it's your choice after all we just we support the",
    "start": "1086799",
    "end": "1092880"
  },
  {
    "text": "version range was always like that in um spring five we're going to use the",
    "start": "1092880",
    "end": "1098320"
  },
  {
    "text": "opportunity to raise that Baseline as well it's going to be not too aggressive",
    "start": "1098320",
    "end": "1104280"
  },
  {
    "text": "but in particular with hibernate to tell a very current story very uh hot story",
    "start": "1104280",
    "end": "1109320"
  },
  {
    "text": "from from um just a couple of days ago in particular with hibernate we are not",
    "start": "1109320",
    "end": "1115000"
  },
  {
    "text": "really in the business of supporting versions of hibernate that the hibernate team itself doesn't support anymore and",
    "start": "1115000",
    "end": "1121640"
  },
  {
    "text": "uh you might be aware that hibernates um well hibernate 3.6 which we still support in deprecated form right now uh",
    "start": "1121640",
    "end": "1128480"
  },
  {
    "text": "is basically long gone from the hnet teams perspective but they don't even support uh for the 3 anymore they just",
    "start": "1128480",
    "end": "1134880"
  },
  {
    "text": "support the latest uh um hbet five generations so if raise a bug with hibernate you're going to get fix in",
    "start": "1134880",
    "end": "1142080"
  },
  {
    "text": "5.2x if you really strongly push you might get it in 5.1x still but that's",
    "start": "1142080",
    "end": "1147480"
  },
  {
    "text": "about it um so we have to adapt to that there's nothing we can do um other than",
    "start": "1147480",
    "end": "1152720"
  },
  {
    "text": "being a little generous in how long we carry existing code around as of spring five this going it's going to be hnet 5",
    "start": "1152720",
    "end": "1159360"
  },
  {
    "text": "plus in all likelihood even hbnet 5 to two plus that we require we have to align with what uh those guys do but",
    "start": "1159360",
    "end": "1166480"
  },
  {
    "text": "that's not set in stone yet so the Baseline upgrade actually goes across the framework including third party",
    "start": "1166480",
    "end": "1173080"
  },
  {
    "text": "libraries I've mentioned the infrastructure themes already we'll just have a little bit of a more extensive",
    "start": "1173080",
    "end": "1178280"
  },
  {
    "text": "discussion one by one here so what about jdk9 um jdk9 is um something we that we",
    "start": "1178280",
    "end": "1187200"
  },
  {
    "text": "track for for about a year now in the meantime we may we are started making",
    "start": "1187200",
    "end": "1192799"
  },
  {
    "text": "sure that even spring framework for the two builds ran on jdk9 for the three for",
    "start": "1192799",
    "end": "1198120"
  },
  {
    "text": "a long time the build would just run uh the tests would pass on",
    "start": "1198120",
    "end": "1203159"
  },
  {
    "text": "jdk9 uh the problem with jdk9 of course is it's a moving Target um every time",
    "start": "1203159",
    "end": "1209200"
  },
  {
    "text": "they merged significant uh change in like and they significantly rearrange",
    "start": "1209200",
    "end": "1214880"
  },
  {
    "text": "the jdk itself every time they do this the build breaks right so at the moment",
    "start": "1214880",
    "end": "1221240"
  },
  {
    "text": "uh we don't actually actively uh test against jdk9 we will pick this up again for spring framwork 5 since uh uh jdk9",
    "start": "1221240",
    "end": "1230440"
  },
  {
    "text": "intends to go ga next year um intends right March 2017 is the Target that they",
    "start": "1230440",
    "end": "1237799"
  },
  {
    "text": "set um that Target actually um implies a",
    "start": "1237799",
    "end": "1242919"
  },
  {
    "text": "feature freeze about two or three weeks ago which did not happen and it's been declared that there",
    "start": "1242919",
    "end": "1250480"
  },
  {
    "text": "is no feature freeze yet they're still actively looking for feedback they haven't got a new feature freeze stad",
    "start": "1250480",
    "end": "1256200"
  },
  {
    "text": "line my expectation is that jdk9 will not ship on time uh on that basis and",
    "start": "1256200",
    "end": "1262559"
  },
  {
    "text": "there is a history for this you can just extrapolate uh how um how they handled",
    "start": "1262559",
    "end": "1267840"
  },
  {
    "text": "it with jdk8 we are actually in touch with a few of those people but uh you just don't get a heart date from those",
    "start": "1267840",
    "end": "1273880"
  },
  {
    "text": "guys or any kind of hard statements so uh we can only make assumptions my",
    "start": "1273880",
    "end": "1280279"
  },
  {
    "text": "assumption is that jdk9 will be delayed uh a bit at least we nevertheless focus",
    "start": "1280279",
    "end": "1286240"
  },
  {
    "text": "on jdk9 because we uh believe that as a as an industry as an ecosystem as a",
    "start": "1286240",
    "end": "1292000"
  },
  {
    "text": "community here we have to embrace the latest core technologies that we we have",
    "start": "1292000",
    "end": "1298159"
  },
  {
    "text": "in in in this industry right in our technology stack if jdk9 goes out we",
    "start": "1298159",
    "end": "1303520"
  },
  {
    "text": "have to embrace it there's no way the Java industry is going to move forward with uh um for forever being stuck on",
    "start": "1303520",
    "end": "1311559"
  },
  {
    "text": "jdk8 jdk9 actually has a lot of stuff in it that's not being talked about much in",
    "start": "1311559",
    "end": "1317760"
  },
  {
    "text": "particular jvf improvements I mean technically even I'm not talking about it on the slides uh because everybody",
    "start": "1317760",
    "end": "1324400"
  },
  {
    "text": "always talks about chicks and I will say a little just a few words in ch so in a bit but jdk9 has much more rer jdk9 has",
    "start": "1324400",
    "end": "1331760"
  },
  {
    "text": "uh compact strengths jdk9 has significant improvements to the G1 garbage collector um it has significant",
    "start": "1331760",
    "end": "1338679"
  },
  {
    "text": "improvements to the startup time of smaller applications so and the me in particular",
    "start": "1338679",
    "end": "1345080"
  },
  {
    "text": "significant improvements to the memory profile overall of a running application so even if you do not care about any API",
    "start": "1345080",
    "end": "1353440"
  },
  {
    "text": "any language enhancement of which they're run on anyway in jdk9 then just basically forget about",
    "start": "1353440",
    "end": "1359440"
  },
  {
    "text": "that and upgrade to jdk9 just for the jvm just for the jvm improvements there are a few apis in",
    "start": "1359440",
    "end": "1367039"
  },
  {
    "text": "there uh that are noteworthy uh they ship an alpn stack now needed for hdp2",
    "start": "1367039",
    "end": "1373520"
  },
  {
    "text": "uh really overdue that it's kind of available out of the box without hacking your jdk without having to modify your",
    "start": "1373520",
    "end": "1380120"
  },
  {
    "text": "GDK installation uh http2 is something to be covered in just a bit anyway so um let's",
    "start": "1380120",
    "end": "1386320"
  },
  {
    "text": "keep this brief there is a new HTTP client a kind of uh successor of the good old URL connection you know in in",
    "start": "1386320",
    "end": "1394320"
  },
  {
    "text": "the jdk we have this nice little strange API uh java. net URL connection dates",
    "start": "1394320",
    "end": "1399799"
  },
  {
    "text": "back to 1996 I think um so kind of has its 20th",
    "start": "1399799",
    "end": "1405200"
  },
  {
    "text": "anniversary um now but it's just an an completely outdated API and not",
    "start": "1405200",
    "end": "1411520"
  },
  {
    "text": "particularly HTTP focused either it was meant to cover different protocols FTP and so forth right um so there is a new",
    "start": "1411520",
    "end": "1418480"
  },
  {
    "text": "client effort uh I've had a look at it I'm not super convinced uh it's that great a step",
    "start": "1418480",
    "end": "1425360"
  },
  {
    "text": "forward really uh I would probably rather keep using one of the um uh more",
    "start": "1425360",
    "end": "1430400"
  },
  {
    "text": "comprehensive HTTP libraries out there like uh uh the okay HTP client or um",
    "start": "1430400",
    "end": "1436720"
  },
  {
    "text": "even a Pache HTTP client uh are all significantly um more powerful and customizable than than this",
    "start": "1436720",
    "end": "1443559"
  },
  {
    "text": "effort but at least there is a new HP CLI so there some things are happening that kind of really matter to um to what",
    "start": "1443559",
    "end": "1450080"
  },
  {
    "text": "we doing these days to building modern efficient web applications and then there's",
    "start": "1450080",
    "end": "1457039"
  },
  {
    "text": "jigsaw so uh with Jigsaw we initially had a story that I'm just going to show you an impression of what it uh is",
    "start": "1457039",
    "end": "1463600"
  },
  {
    "text": "supposed to look like where we thought that's actually a fine fit we have a decomposed framework",
    "start": "1463600",
    "end": "1468880"
  },
  {
    "text": "the framework consists of quite a few modules with well- defined dependencies some of them required some of them",
    "start": "1468880",
    "end": "1474480"
  },
  {
    "text": "optional jigsaw initially was designed as a way to formally declare some of",
    "start": "1474480",
    "end": "1482000"
  },
  {
    "text": "those structural um metadata in your jar files and the idea is actually to this day is",
    "start": "1482000",
    "end": "1489799"
  },
  {
    "text": "is sound the problem is that the uh direction that Chi isaw always going in terms of its focus is um from my",
    "start": "1489799",
    "end": "1496240"
  },
  {
    "text": "perspective not ideal um but the idea is an alternative to the class path instead of saying bootstrap",
    "start": "1496240",
    "end": "1503399"
  },
  {
    "text": "my jvm here's this really long list of jaar files that I'm going to concatenate",
    "start": "1503399",
    "end": "1509679"
  },
  {
    "text": "into a single class path string instead of that you point to symbolic module",
    "start": "1509679",
    "end": "1514960"
  },
  {
    "text": "names and the modules internally declare required dependencies on each other so",
    "start": "1514960",
    "end": "1521440"
  },
  {
    "text": "they can can bring each other in implicitly a fine idea unfortunately",
    "start": "1521440",
    "end": "1529440"
  },
  {
    "text": "it's not Uncharted Territory right we've um we've had osgi before we had other",
    "start": "1529440",
    "end": "1534520"
  },
  {
    "text": "module system attempts uh for example in josland before the um the space is",
    "start": "1534520",
    "end": "1540679"
  },
  {
    "text": "unfortunately pretty complex module systems um if you just look at the 80%",
    "start": "1540679",
    "end": "1546279"
  },
  {
    "text": "case they always look straightforward and easy the moment that you try to model real life scenarios and you get",
    "start": "1546279",
    "end": "1551760"
  },
  {
    "text": "closer to the 100% uh Target uh they become super complex that's exactly where chicko is right now the 80% case",
    "start": "1551760",
    "end": "1559080"
  },
  {
    "text": "worked a year ago or n months ago but they they're struggling with the",
    "start": "1559080",
    "end": "1564799"
  },
  {
    "text": "remaining 20% and they've been struggling quite a bit might be the main reason why jdk9 is",
    "start": "1564799",
    "end": "1571080"
  },
  {
    "text": "delayed okay so back to our vision the idea is pretty simple that's basically",
    "start": "1571080",
    "end": "1576600"
  },
  {
    "text": "jigsaw um syntax a module declaration in a module Dash info file the idea is that",
    "start": "1576600",
    "end": "1582399"
  },
  {
    "text": "it's basically the packageinfo do Java idea just uh in a module-in",
    "start": "1582399",
    "end": "1589120"
  },
  {
    "text": "where the compiler actually compiles this thing into a a binary representation and the jvm can",
    "start": "1589120",
    "end": "1596000"
  },
  {
    "text": "introspect uh structural information a fine idea definitely more efficient on",
    "start": "1596000",
    "end": "1602760"
  },
  {
    "text": "Startup than trying to power manifest entries and like osgi does however um",
    "start": "1602760",
    "end": "1609320"
  },
  {
    "text": "it's of course a kind of new language right you you specify dependencies you you can export certain packages you have",
    "start": "1609320",
    "end": "1615960"
  },
  {
    "text": "a symbolic name space of module right those are actually symbolic names java.sql is a jdk defined name we could",
    "start": "1615960",
    "end": "1623960"
  },
  {
    "text": "take our spring jdbc jar from the maven Central hosted spring jdbc jar wrap it",
    "start": "1623960",
    "end": "1630159"
  },
  {
    "text": "up like this uh give it a symbolic name spring jdbc along the same lines and",
    "start": "1630159",
    "end": "1636000"
  },
  {
    "text": "make it usable in the same way wouldn't that be nice unfortunately it's technically not feasible at this point",
    "start": "1636000",
    "end": "1643240"
  },
  {
    "text": "because um our modules have a lot of optional dependencies uh as you",
    "start": "1643240",
    "end": "1649520"
  },
  {
    "text": "certainly are aware um Springs web module for example or Springs JBC module",
    "start": "1649520",
    "end": "1655720"
  },
  {
    "text": "and others optionally support several binding libraries several connection pools if you choose to use for example",
    "start": "1655720",
    "end": "1663519"
  },
  {
    "text": "Jackson then uh your spring web module has the Jackson support inside if you don't use Jackson just ignore those few",
    "start": "1663519",
    "end": "1670480"
  },
  {
    "text": "classes in the spring web module such a scenario cannot be modeled in jigaw at this point because jigaw",
    "start": "1670480",
    "end": "1677120"
  },
  {
    "text": "does not have optional pendencies if you compile against something jigsaw insists",
    "start": "1677120",
    "end": "1682279"
  },
  {
    "text": "on that something being present at runtime so if we compile our spring web module against the optional Jackson",
    "start": "1682279",
    "end": "1688559"
  },
  {
    "text": "support or the spring jdbc module against uh say the optional um uh",
    "start": "1688559",
    "end": "1695559"
  },
  {
    "text": "connection pools that we compile against then all of those compilation",
    "start": "1695559",
    "end": "1701080"
  },
  {
    "text": "dependencies are being enforced at runtime this is exactly what we do not",
    "start": "1701080",
    "end": "1706279"
  },
  {
    "text": "want right a module system that in that brings unwanted dependencies onto the",
    "start": "1706279",
    "end": "1711360"
  },
  {
    "text": "runtime class paff I mean come on that's a basically uh the top failure for any",
    "start": "1711360",
    "end": "1717840"
  },
  {
    "text": "module system attempt that you could possibly arrive at uh a module system is supposed to have a an a representation",
    "start": "1717840",
    "end": "1724600"
  },
  {
    "text": "of what you actually need at runtime it's supposed to have a well defined set of to bring a well-defined set of",
    "start": "1724600",
    "end": "1731039"
  },
  {
    "text": "classes through modules onto your class path not the other way around so we have an issue here it's uh well communicated",
    "start": "1731039",
    "end": "1739200"
  },
  {
    "text": "it's actually pretty much at the top of the wish list on on the chicks or Wiki has a lot of stakeholders ourselves and",
    "start": "1739200",
    "end": "1746440"
  },
  {
    "text": "quite a few others that insist on optional dependencies being declarable in jigsaw in the sense of I want it at",
    "start": "1746440",
    "end": "1754679"
  },
  {
    "text": "compilation time I do not insist on having it at runtime I can deal with it if it's not present at runtime basically",
    "start": "1754679",
    "end": "1760960"
  },
  {
    "text": "a requires optional keyword something like that literally with the semantics of at runtime if you can't find just",
    "start": "1760960",
    "end": "1768720"
  },
  {
    "text": "proceed and let me run into my no claster found era please um that's basically what we want from chicksaw a",
    "start": "1768720",
    "end": "1774399"
  },
  {
    "text": "pretty straightforward uh a feature you would think but it's at the top of the wish list for half a year now not dealt",
    "start": "1774399",
    "end": "1781240"
  },
  {
    "text": "with and we have no idea what we can or should be doing um to make it",
    "start": "1781240",
    "end": "1786799"
  },
  {
    "text": "happen um it's really up to the chicksaw team to decide whether and when it will",
    "start": "1786799",
    "end": "1791880"
  },
  {
    "text": "make it in so at this point this is an idea a vision a sketch we would like to make",
    "start": "1791880",
    "end": "1798399"
  },
  {
    "text": "that happen on jigsaw if things Remain the way they are right now we cannot make it",
    "start": "1798399",
    "end": "1803679"
  },
  {
    "text": "happen um so we're going to recommend jdk9 nevertheless for the jvm",
    "start": "1803679",
    "end": "1809000"
  },
  {
    "text": "improvements and basically please keep using the class paath mode it works fine on jdk9 does nothing wrong with it and",
    "start": "1809000",
    "end": "1815080"
  },
  {
    "text": "boot has a great autoc configuration experience with the class path mode so um uh we don't depend on this really but",
    "start": "1815080",
    "end": "1823399"
  },
  {
    "text": "it would nevertheless be nice to have a story in this space wouldn't it okay let's move Beyond jigsaw to something",
    "start": "1823399",
    "end": "1829559"
  },
  {
    "text": "that actually matters um hdp2 I already hinted at it I",
    "start": "1829559",
    "end": "1837519"
  },
  {
    "text": "personally strongly believe we need to embrace such industry efforts we need to",
    "start": "1837519",
    "end": "1842559"
  },
  {
    "text": "embrace not only jdk9 um we need even more need to be focused on industrywide",
    "start": "1842559",
    "end": "1848320"
  },
  {
    "text": "standards beyond the Java ecosystem and there's nothing more important than http2 to be dealt with here if within",
    "start": "1848320",
    "end": "1856720"
  },
  {
    "text": "the Javas space we we we wouldn't get our W together here uh we would really um look a little bit",
    "start": "1856720",
    "end": "1863760"
  },
  {
    "text": "data compared to almost any other programming environment out there if you look at the state of http2 the browsers",
    "start": "1863760",
    "end": "1870600"
  },
  {
    "text": "they did their job right Chrome uh well even even even Edge and uh Firefox and",
    "start": "1870600",
    "end": "1876559"
  },
  {
    "text": "Safari they basically in the meantime they all did their job quite a few quite a bit of the server infrastructure is",
    "start": "1876559",
    "end": "1882880"
  },
  {
    "text": "basically already capable of um handling http2 but in javal land the server",
    "start": "1882880",
    "end": "1890039"
  },
  {
    "text": "containers well there are good news and we'll we'll get to that in just a bit uh",
    "start": "1890039",
    "end": "1896120"
  },
  {
    "text": "but there is no strong there are no strong forces um pushing towards htb2 in",
    "start": "1896120",
    "end": "1901240"
  },
  {
    "text": "the Javas space really it's efforts by um selected stakeholders not necessarily",
    "start": "1901240",
    "end": "1906960"
  },
  {
    "text": "by the ecosystem overall so we won't really get into why",
    "start": "1906960",
    "end": "1912559"
  },
  {
    "text": "hp2 matters but I've just listed a few of the things that are really really worth having I mean",
    "start": "1912559",
    "end": "1919000"
  },
  {
    "text": "efficient binary representation uh symbolic references to the same headers instead of red declaring the same",
    "start": "1919000",
    "end": "1924480"
  },
  {
    "text": "headers for every single requestment there are a few of those things I mean Connection multiplexing in general a few",
    "start": "1924480",
    "end": "1930279"
  },
  {
    "text": "of those things that really really matter uh we can optimize whatever we want uh within our server system if the",
    "start": "1930279",
    "end": "1937360"
  },
  {
    "text": "system keeps talking the 20-year-old HTTP 1.1 to its clients it's kind of in",
    "start": "1937360",
    "end": "1943559"
  },
  {
    "text": "vain all right so much for a little bit of an http2 pitch um so what's the story",
    "start": "1943559",
    "end": "1949159"
  },
  {
    "text": "in javal land there is an ongoing effort for quite a while already to enforce",
    "start": "1949159",
    "end": "1954440"
  },
  {
    "text": "hdp2 support through seret Pho the seret pho revision of the spec um actually",
    "start": "1954440",
    "end": "1960720"
  },
  {
    "text": "literally enforces hdp2 support in its implementations the problem is that the",
    "start": "1960720",
    "end": "1966279"
  },
  {
    "text": "spec is stuck in a proposed or like an early draft basically just a a very",
    "start": "1966279",
    "end": "1971440"
  },
  {
    "text": "early proposal from last October hasn't been updated in about eight months no work going on on the EXP group it's",
    "start": "1971440",
    "end": "1978760"
  },
  {
    "text": "basically in a very unclear state like most of java E8 like most of the Java E8",
    "start": "1978760",
    "end": "1985480"
  },
  {
    "text": "Associated specs but for c for do that's really a shame it really is a shame",
    "start": "1985480",
    "end": "1990880"
  },
  {
    "text": "because the focus of C for do itself is sound it doesn't really try to",
    "start": "1990880",
    "end": "1996200"
  },
  {
    "text": "accomplish too many things it focuses on one thing it tries to do it well which is http2 support within the seret world",
    "start": "1996200",
    "end": "2003919"
  },
  {
    "text": "so please could we make that actually happen could we have that right now no",
    "start": "2003919",
    "end": "2010480"
  },
  {
    "text": "uh at the moment the target date is mid 2017 mid next",
    "start": "2010480",
    "end": "2016799"
  },
  {
    "text": "year on the assumption that we already in public final draft which we are far",
    "start": "2016799",
    "end": "2022000"
  },
  {
    "text": "from in other words mid 2017 is not going to happen from where it is right now unless something dramatic uh happens",
    "start": "2022000",
    "end": "2029960"
  },
  {
    "text": "in terms of somebody really picks it up and makes it happen within uh a few months um I don't see that push",
    "start": "2029960",
    "end": "2038519"
  },
  {
    "text": "our reaction to this is we try to make it happen we have people on the Ser for the do spec we kind try to do a little",
    "start": "2038519",
    "end": "2045039"
  },
  {
    "text": "bit of lobbying we care about Tom kit 9 Tom kit 9 is Serv at four Focus we really want Tom kit 9 to happen to",
    "start": "2045039",
    "end": "2051638"
  },
  {
    "text": "go um at some point but in the meantime and that meantime can actually last for",
    "start": "2051639",
    "end": "2056878"
  },
  {
    "text": "quite a while still in the meantime we focus on the uh Native efforts in the",
    "start": "2056879",
    "end": "2063398"
  },
  {
    "text": "containers which have have happen to have an http2 story in particular tomit",
    "start": "2063399",
    "end": "2069679"
  },
  {
    "text": "8.5 recently released which is kind of a backport of the http2 stuff from the tomit 9 line but working against the",
    "start": "2069679",
    "end": "2076839"
  },
  {
    "text": "server 3.1 container that is tomet 8 so tomet 8.5 is the fine effort in this",
    "start": "2076839",
    "end": "2081960"
  },
  {
    "text": "space JY 9.3 actually let the pek was one of the first to roll http2 support",
    "start": "2081960",
    "end": "2088679"
  },
  {
    "text": "into a current generation Ser container and and to 1.3 1.4 uh moving to 1.4 now",
    "start": "2088679",
    "end": "2096000"
  },
  {
    "text": "those containers did their job and they are really worth embracing if you're on",
    "start": "2096000",
    "end": "2101680"
  },
  {
    "text": "Tom kit if you're on jedy um Me by all means upgrade use use a hp2 enabled",
    "start": "2101680",
    "end": "2108520"
  },
  {
    "text": "version of your container um of course in a now you need to make sure your",
    "start": "2108520",
    "end": "2114640"
  },
  {
    "text": "entire infrastructure actually is able to deal with hp2 uh but hp2 is a fine Arrangement right you can if something",
    "start": "2114640",
    "end": "2121359"
  },
  {
    "text": "does not work it implicitly downgrades to http 1.1 uh you're not taking",
    "start": "2121359",
    "end": "2126400"
  },
  {
    "text": "anything away from anybody you just make it significantly more efficient for modernday HTTP clients to talk to your",
    "start": "2126400",
    "end": "2135240"
  },
  {
    "text": "service so for our spring framework 5 purposes um we have a strong http2 focus",
    "start": "2135240",
    "end": "2141640"
  },
  {
    "text": "in the sense of we want this to make it into production environments as soon as",
    "start": "2141640",
    "end": "2146880"
  },
  {
    "text": "possible right now basically so we even rolled uh quite a bit of this into four to three in Spring fir 43 uh all of",
    "start": "2146880",
    "end": "2154400"
  },
  {
    "text": "these modern-day server containers are being supported you can set them up with htb2 spring works just fine we are",
    "start": "2154400",
    "end": "2161680"
  },
  {
    "text": "trying to make to have an equivalent story for spring boot uh where those",
    "start": "2161680",
    "end": "2167440"
  },
  {
    "text": "containers are really the recommended versions with their hp2 support for",
    "start": "2167440",
    "end": "2173160"
  },
  {
    "text": "spring five we're going to continue along those lines of course so new revisions of those containers or other",
    "start": "2173160",
    "end": "2179880"
  },
  {
    "text": "containers having native hp2 stories we will pick them up and do whatever we can to uh allow the use of hp2 through the",
    "start": "2179880",
    "end": "2187680"
  },
  {
    "text": "spring um web application model um but it's not really dedicated",
    "start": "2187680",
    "end": "2192920"
  },
  {
    "text": "htb2 support we can't really go beyond the Ser 3.1 API in the Ser MC stack so",
    "start": "2192920",
    "end": "2199359"
  },
  {
    "text": "Ser 40 we still would like to see it happen rather soon uh I at least hope",
    "start": "2199359",
    "end": "2204960"
  },
  {
    "text": "that there's going to be a revision a kind of a public final draft by early next year which we would pick up and",
    "start": "2204960",
    "end": "2211560"
  },
  {
    "text": "support the latest tomet n Milestone at least against it so we're going to do our share we're going to have ear served",
    "start": "2211560",
    "end": "2218400"
  },
  {
    "text": "for the door support in some form uh in Spring five for sure unless it gets",
    "start": "2218400",
    "end": "2223800"
  },
  {
    "text": "dropped completely which is hopefully not the case um and not in our control right we",
    "start": "2223800",
    "end": "2229480"
  },
  {
    "text": "can just pick up whatever Oracle allows to happen in the serate Force",
    "start": "2229480",
    "end": "2235760"
  },
  {
    "text": "Space all right um let's switch gears again to just a little bit of a",
    "start": "2235760",
    "end": "2241560"
  },
  {
    "text": "discussion about our reactive model now the we've been talking about the servat and Serv four um this is",
    "start": "2241560",
    "end": "2249359"
  },
  {
    "text": "primarily relevant from a spring perspective for what we call Spring MBC it's actually more like spring servet",
    "start": "2249359",
    "end": "2255880"
  },
  {
    "text": "MVC spring MVC is a serlet based web application framework always was still",
    "start": "2255880",
    "end": "2261640"
  },
  {
    "text": "is tries to maximize um basically your your ability",
    "start": "2261640",
    "end": "2267160"
  },
  {
    "text": "to to interact and integrate with a serlet based environment and this will",
    "start": "2267160",
    "end": "2272720"
  },
  {
    "text": "stay the same in Spring five spring five will have spring Ser at MVC in an update form that's basically what we've been",
    "start": "2272720",
    "end": "2279040"
  },
  {
    "text": "discussing Ser for capable ideally uh but still essentially serate based",
    "start": "2279040",
    "end": "2284200"
  },
  {
    "text": "serate integrated uh a good citizen in integration with other servet based",
    "start": "2284200",
    "end": "2290000"
  },
  {
    "text": "libraries and Frameworks out there in parallel to that we have a",
    "start": "2290000",
    "end": "2295640"
  },
  {
    "text": "strong focus on a reactive programming model trying to rethink what a modern",
    "start": "2295640",
    "end": "2301880"
  },
  {
    "text": "day web stack needs to look like in particular if you would like to optimize",
    "start": "2301880",
    "end": "2307760"
  },
  {
    "text": "it towards the most efficient use of your resources the most the basically a Serv",
    "start": "2307760",
    "end": "2315440"
  },
  {
    "text": "container uh I guess most of you are aware is not really particularly",
    "start": "2315440",
    "end": "2320599"
  },
  {
    "text": "efficient in its use of threading resources you get a um a threat from a",
    "start": "2320599",
    "end": "2325880"
  },
  {
    "text": "thread pool it's assigned to you you process your request you do everything you need to do within that threat and",
    "start": "2325880",
    "end": "2332839"
  },
  {
    "text": "you just hold on to that threat you don't let it go you write the response yeah actually keep writing the response",
    "start": "2332839",
    "end": "2338760"
  },
  {
    "text": "until you're done even if it's a couple of hundred megabytes and then you let go",
    "start": "2338760",
    "end": "2344720"
  },
  {
    "text": "there are ways to optimize this a little there's in Ser 3.0 3.1 there were some ways where you could spin off long",
    "start": "2344720",
    "end": "2351640"
  },
  {
    "text": "running um threats to a another worker thread pool there are ways to go around it we",
    "start": "2351640",
    "end": "2358880"
  },
  {
    "text": "have actually support for it in Spring MBC the defer result model and some of those things it it certainly addresses",
    "start": "2358880",
    "end": "2365160"
  },
  {
    "text": "some hotspot problems but doesn't change the fundamental architecture the architecture is not",
    "start": "2365160",
    "end": "2371599"
  },
  {
    "text": "there's nothing wrong with the architecture the architecture just implies um certain compromises that you",
    "start": "2371599",
    "end": "2377880"
  },
  {
    "text": "have that you have to be willing to accept and we have all learned to accept",
    "start": "2377880",
    "end": "2383240"
  },
  {
    "text": "those in the suret world in the reactive world we kind of turn the picture around",
    "start": "2383240",
    "end": "2388720"
  },
  {
    "text": "uh forget basically about Sur containers what about a modern day web stack a network stack that does http endpoint",
    "start": "2388720",
    "end": "2395599"
  },
  {
    "text": "processing on an engine such as netti the common choice for um custom",
    "start": "2395599",
    "end": "2401319"
  },
  {
    "text": "efficient Network Stacks out there so if you run on netti you basically go back",
    "start": "2401319",
    "end": "2406359"
  },
  {
    "text": "to a preer world almost you focus on the network deack itself and the uh programming model that",
    "start": "2406359",
    "end": "2414200"
  },
  {
    "text": "has to go with it in order to actually allow you to expose the capabilities and the efficiency of this underlying",
    "start": "2414200",
    "end": "2420920"
  },
  {
    "text": "Network stack has to be reactive it has to be call back driven you react to",
    "start": "2420920",
    "end": "2426560"
  },
  {
    "text": "incoming data when it's actually there you react to the ability to write to the response",
    "start": "2426560",
    "end": "2433079"
  },
  {
    "text": "when the network stack is actually able to send data to the response you don't",
    "start": "2433079",
    "end": "2438880"
  },
  {
    "text": "just uh work with input streams and output streams you work with um reactive",
    "start": "2438880",
    "end": "2444960"
  },
  {
    "text": "streams and this little Manifesto thing um actually led to the uh reactive",
    "start": "2444960",
    "end": "2450280"
  },
  {
    "text": "streams initiative reactive streams is a specific ification well is",
    "start": "2450280",
    "end": "2459000"
  },
  {
    "text": "it it's actually more like four types it's a very small condensed uh um set of",
    "start": "2459000",
    "end": "2467040"
  },
  {
    "text": "types modeling a particular um part of the challenges of",
    "start": "2467040",
    "end": "2474040"
  },
  {
    "text": "uh reactive interaction between resources it basically literally is a publisher type with a subscriber a",
    "start": "2474040",
    "end": "2479800"
  },
  {
    "text": "subscription model and a back pressure Arrangement where Publishers and subscribers can interact with each other",
    "start": "2479800",
    "end": "2487520"
  },
  {
    "text": "kind of the publisher is not going to just uh uh send stuff uh the other way",
    "start": "2487520",
    "end": "2493760"
  },
  {
    "text": "without even worrying it actually Waits on a subscriber to require data from the publisher Publishers and subscribers",
    "start": "2493760",
    "end": "2499920"
  },
  {
    "text": "interact with each other when both are actually capable of doing their",
    "start": "2499920",
    "end": "2505119"
  },
  {
    "text": "job um in simple terms reactive streams itself is not a user programming model",
    "start": "2505119",
    "end": "2511079"
  },
  {
    "text": "reactive streams is basically an infrastructural um initiative where",
    "start": "2511079",
    "end": "2517240"
  },
  {
    "text": "Network Stacks HTP containers of some sort uh data store drivers and application Frameworks can agree on",
    "start": "2517240",
    "end": "2524800"
  },
  {
    "text": "basic types that they can pass along that they uh allow to interact the real",
    "start": "2524800",
    "end": "2532400"
  },
  {
    "text": "power of the model only shines through if you can interact reactively from your",
    "start": "2532400",
    "end": "2538400"
  },
  {
    "text": "HTTP endpoint down to the data store and back up that's why reactive streams is",
    "start": "2538400",
    "end": "2544400"
  },
  {
    "text": "so important the reactive streams initi is so important so reactive streams is basically a GitHub project and and a",
    "start": "2544400",
    "end": "2550880"
  },
  {
    "text": "website in ut reactive streams and has been embraced by all all current",
    "start": "2550880",
    "end": "2556720"
  },
  {
    "text": "stakeholders out there um or at least they all expressed an intent to embrace it um ARX Java for example predates",
    "start": "2556720",
    "end": "2564839"
  },
  {
    "text": "reactive streams and RX Java 2 is not kind of not actually getting there that quickly our own reactor project is",
    "start": "2564839",
    "end": "2571720"
  },
  {
    "text": "reactive stream spaced so that's the probably the reference example for what",
    "start": "2571720",
    "end": "2577280"
  },
  {
    "text": "a reactive streams based um library and composition library in particular can do",
    "start": "2577280",
    "end": "2582680"
  },
  {
    "text": "and uh AKA streams is all alsoo reactive streams aligned so there is some broad industry support uh already and it's",
    "start": "2582680",
    "end": "2590839"
  },
  {
    "text": "even going to be repackaged into jdk9 the new Java util concurrent flow type",
    "start": "2590839",
    "end": "2595920"
  },
  {
    "text": "in jdk9 is the reactive streams API repackaged into subtypes of this uh flow",
    "start": "2595920",
    "end": "2602920"
  },
  {
    "text": "container type but it literally is the same API just a different Nam",
    "start": "2602920",
    "end": "2608559"
  },
  {
    "text": "space so the uh reactive streams does not try to model composition libraries",
    "start": "2608559",
    "end": "2613599"
  },
  {
    "text": "so if you have any uh impressions of RX Java already RX Java basically is a very rich set of uh of operators um it's",
    "start": "2613599",
    "end": "2620920"
  },
  {
    "text": "basically a composition Library whereas reactive streams is just a minimal interaction specification they're really",
    "start": "2620920",
    "end": "2627599"
  },
  {
    "text": "very complimentary for a user programming model these things matter",
    "start": "2627599",
    "end": "2633119"
  },
  {
    "text": "much more than reactive streams itself so you would focus on the use of reactor or ARX Java for",
    "start": "2633119",
    "end": "2640720"
  },
  {
    "text": "example so um to give you an idea what this can look like we are talking about",
    "start": "2641599",
    "end": "2647000"
  },
  {
    "text": "something really pre-release here this is a GitHub project an R&D project of",
    "start": "2647000",
    "end": "2652040"
  },
  {
    "text": "ours called Spring reactive we're actually somewhat close to merging it into a a spring framework 5 too master",
    "start": "2652040",
    "end": "2657920"
  },
  {
    "text": "Branch uh we intend to do that in Late July but at the moment you can look at the current state uh on GitHub in the",
    "start": "2657920",
    "end": "2663920"
  },
  {
    "text": "spring reactive project the U idea is that we use a spring MVC like",
    "start": "2663920",
    "end": "2670880"
  },
  {
    "text": "programming style spring MVC oriented or uh aligned um controller model but",
    "start": "2670880",
    "end": "2679319"
  },
  {
    "text": "running on a reactive Network stack exposing the full power of the underlying reactive stack if you choose",
    "start": "2679319",
    "end": "2685920"
  },
  {
    "text": "to use it so we're not trying to abstract the stack between uh Ser MVC",
    "start": "2685920",
    "end": "2691160"
  },
  {
    "text": "and and and reactive model here we're trying to provide common programming model elements but you choose one St or",
    "start": "2691160",
    "end": "2698319"
  },
  {
    "text": "the other um basically you have to live with the compromises you get all the benefits but also all the limitations of",
    "start": "2698319",
    "end": "2705480"
  },
  {
    "text": "the stack that you choose uh typical spring style we don't try to abstract and take things away we try we rather",
    "start": "2705480",
    "end": "2711800"
  },
  {
    "text": "try to align so stylistically in the sense of",
    "start": "2711800",
    "end": "2717880"
  },
  {
    "text": "our the beginning where we talked about a couple of stylistic elements in springf 3 stylistically a web controller",
    "start": "2717880",
    "end": "2724960"
  },
  {
    "text": "on a reactive stack looks very very much like a spring MC controller uses request",
    "start": "2724960",
    "end": "2730200"
  },
  {
    "text": "mappings uses uh the controller stereotype it's regular component classes managed by the spring",
    "start": "2730200",
    "end": "2735680"
  },
  {
    "text": "container request mapping binding requests uh to certain Handler methods",
    "start": "2735680",
    "end": "2741040"
  },
  {
    "text": "but now look at the Handler method signature the Handler method signature does not accept a fully um converted",
    "start": "2741040",
    "end": "2748920"
  },
  {
    "text": "payload from the incoming request it doesn't return a fully computed response",
    "start": "2748920",
    "end": "2754400"
  },
  {
    "text": "either it declares a type flux coming from the reactor project if you have an",
    "start": "2754400",
    "end": "2760839"
  },
  {
    "text": "RX Java background think observable so you actually get a hot stream basically a an access to the",
    "start": "2760839",
    "end": "2768800"
  },
  {
    "text": "incoming data in not fully consumed form",
    "start": "2768800",
    "end": "2773960"
  },
  {
    "text": "and you can express operations or pass them on of course uh against this",
    "start": "2773960",
    "end": "2780200"
  },
  {
    "text": "incoming stream in a sense that allows the runtime to um call your your",
    "start": "2780200",
    "end": "2786960"
  },
  {
    "text": "operations back uh as the data actually comes in and as it is actually",
    "start": "2786960",
    "end": "2792480"
  },
  {
    "text": "consumable without blocking the thread without waiting on any stream to uh uh",
    "start": "2792480",
    "end": "2797839"
  },
  {
    "text": "give you freytes of data so you program in a way where you allow the runtime to",
    "start": "2797839",
    "end": "2803720"
  },
  {
    "text": "call you back efficiently you never block you just have uh small processing",
    "start": "2803720",
    "end": "2809119"
  },
  {
    "text": "steps for pieces of data chunks of data the runtime is then able to selectively",
    "start": "2809119",
    "end": "2815359"
  },
  {
    "text": "call you back as the data is actually ready to process so this style for any anyone",
    "start": "2815359",
    "end": "2821119"
  },
  {
    "text": "having ever looked at RX Java should look very familiar you can literally switch flx to observable and it would",
    "start": "2821119",
    "end": "2826160"
  },
  {
    "text": "look the same um we intend to also support our Java observable by the way",
    "start": "2826160",
    "end": "2831400"
  },
  {
    "text": "um so the intentions are in the current prototype and uh uh in all likelihood also going to be in Spring five",
    "start": "2831400",
    "end": "2840160"
  },
  {
    "text": "proper the real power and this is a sketch so this is not working code right",
    "start": "2840160",
    "end": "2845720"
  },
  {
    "text": "uh in like what what's my repository um this is more of a a sketch that where",
    "start": "2845720",
    "end": "2851160"
  },
  {
    "text": "we're working towards and the real power is in the interaction with the underlying data stores if your",
    "start": "2851160",
    "end": "2858079"
  },
  {
    "text": "processing architecture is reactive all the way through if your repositories and the underlying data store drivers",
    "start": "2858079",
    "end": "2864640"
  },
  {
    "text": "support reactive streams ideally you could make something like this happen",
    "start": "2864640",
    "end": "2870040"
  },
  {
    "text": "and an incoming hot stream of data being passed onto the underlying repository written to the Target data store as the",
    "start": "2870040",
    "end": "2877359"
  },
  {
    "text": "data comes in from the HTTP request and as the output as the data source actually able to store the um uh the",
    "start": "2877359",
    "end": "2885240"
  },
  {
    "text": "output so reactive interaction at that level would maximize the effect that you",
    "start": "2885240",
    "end": "2890640"
  },
  {
    "text": "get because the generator questions behind this are more along the lines of",
    "start": "2890640",
    "end": "2895800"
  },
  {
    "text": "what kind of benefit will I actually get in my environment with my workload uh my",
    "start": "2895800",
    "end": "2902119"
  },
  {
    "text": "system constraints so this is basically what we're working towards uh spring data by",
    "start": "2902119",
    "end": "2908480"
  },
  {
    "text": "the way if you think repositories spring data repositories spring data uh plans to have dedicated uh reactive repository",
    "start": "2908480",
    "end": "2915440"
  },
  {
    "text": "support very soon as well so we are working at that on that at several levels here it will also work with",
    "start": "2915440",
    "end": "2922839"
  },
  {
    "text": "customer Arrangements of yours there's no need to have a uh a fully spring",
    "start": "2922839",
    "end": "2927880"
  },
  {
    "text": "based stack here reactive streams as a general industry initiative allows you to work with uh other data store drivers",
    "start": "2927880",
    "end": "2934599"
  },
  {
    "text": "that we are not even aware of as long as say support reactive streams you should be able to wire them up and have",
    "start": "2934599",
    "end": "2940559"
  },
  {
    "text": "efficient processing gen um without us having to do first class support for it that's the vision that we're working",
    "start": "2940559",
    "end": "2946640"
  },
  {
    "text": "towards and that's why not only we have to do our job there are quite a few",
    "start": "2946640",
    "end": "2951880"
  },
  {
    "text": "others working on efforts that directly connect to this um reactive or at least",
    "start": "2951880",
    "end": "2957520"
  },
  {
    "text": "non-blocking drivers for some of the data stores for example couch boys there's even one in the works for",
    "start": "2957520",
    "end": "2963119"
  },
  {
    "text": "postgress although I never personally looked at it the um equally important parts are in the",
    "start": "2963119",
    "end": "2969160"
  },
  {
    "text": "Frameworks and the HP processing libraries so um a reactive server",
    "start": "2969160",
    "end": "2974319"
  },
  {
    "text": "reactive HP service great but on the client side in particular within a larger microservices Arrangement where",
    "start": "2974319",
    "end": "2981440"
  },
  {
    "text": "some Services of yours are going to call other services of yours we also need reactive HTTP clients making very",
    "start": "2981440",
    "end": "2988720"
  },
  {
    "text": "efficient use of uh threats and uh HTTP connections on the client",
    "start": "2988720",
    "end": "2995200"
  },
  {
    "text": "side and last but not least we have a joint initiative called reactive streams",
    "start": "2995200",
    "end": "3000480"
  },
  {
    "text": "Commons where quite a few industry stakeholders um collaborate in terms of",
    "start": "3000480",
    "end": "3006880"
  },
  {
    "text": "common code for example adapters to Ser 3.1 Asing goo where our our programming",
    "start": "3006880",
    "end": "3013319"
  },
  {
    "text": "model our reactive MV MVC like web endpoint model can actually run on a",
    "start": "3013319",
    "end": "3019480"
  },
  {
    "text": "server container but not as Ser MVC it's more like with the reactive streams",
    "start": "3019480",
    "end": "3025400"
  },
  {
    "text": "version of this uh uh disarrangement adapt adapted to the underlying Ser 3.1 Asing IO model this",
    "start": "3025400",
    "end": "3033480"
  },
  {
    "text": "is not as efficient as you would hope it would be we strongly recommend a proper",
    "start": "3033480",
    "end": "3039520"
  },
  {
    "text": "reactive Network stack um more towards the likes of NTI um this becomes more",
    "start": "3039520",
    "end": "3046079"
  },
  {
    "text": "interesting if Jetty and tomat actually pick up on reactive streams comments uh",
    "start": "3046079",
    "end": "3051280"
  },
  {
    "text": "because there's an SPI in there that allows them to expose efficient reactive streams handles",
    "start": "3051280",
    "end": "3057480"
  },
  {
    "text": "um to us through the Ser 3.1 model so this is still in the works we're talking",
    "start": "3057480",
    "end": "3063400"
  },
  {
    "text": "all talking about things that basically all in planning stages or in the works here um if this turns out uh by early",
    "start": "3063400",
    "end": "3070400"
  },
  {
    "text": "next year we might actually have a pretty efficient reactive uh web stack",
    "start": "3070400",
    "end": "3076000"
  },
  {
    "text": "on chedo and even on tomat uh somewhat soon we'll see so we we're working with",
    "start": "3076000",
    "end": "3082599"
  },
  {
    "text": "uh uh several several stakeholders here uh trying to move this forward in time for early next year because early next",
    "start": "3082599",
    "end": "3090920"
  },
  {
    "text": "year is when we intend to go g with this our goal is to have a release candidate",
    "start": "3090920",
    "end": "3097200"
  },
  {
    "text": "towards the end of this year a spring F 5 too rc1 towards the end of this year a",
    "start": "3097200",
    "end": "3102319"
  },
  {
    "text": "milestone won in Late July that's pretty much a given at this point in time for our spring one conference in Las Vegas",
    "start": "3102319",
    "end": "3108520"
  },
  {
    "text": "this year uh and RC won towards the end of the year and the ga date soon after as soon as possible as",
    "start": "3108520",
    "end": "3116920"
  },
  {
    "text": "you may figure we depend on some other efforts we really want things to work together properly we don't want to go ga",
    "start": "3116920",
    "end": "3123280"
  },
  {
    "text": "too early with this it really needs to work uh top to bottom as a sound overall",
    "start": "3123280",
    "end": "3128920"
  },
  {
    "text": "Arrangement um so our Target is roughly March 2017 that sounds like a jdk9 ga Target",
    "start": "3128920",
    "end": "3136200"
  },
  {
    "text": "doesn't it uh intentionally so but if jdk9 is not going G in March we are",
    "start": "3136200",
    "end": "3141680"
  },
  {
    "text": "probably nevertheless going to go with spring five in March uh we'll see this is a little bit too far out for a hard",
    "start": "3141680",
    "end": "3148359"
  },
  {
    "text": "promise uh the uh goal that we see as a kind of hard target at this point is an",
    "start": "3148359",
    "end": "3153680"
  },
  {
    "text": "rc1 by the end of the year and we'll take it from there all right so much for a little bit of insight into our work on",
    "start": "3153680",
    "end": "3160359"
  },
  {
    "text": "springf MC 5 and some of the thinking behind it um thanks for your attention enjoy the rest of the day and if there",
    "start": "3160359",
    "end": "3166839"
  },
  {
    "text": "are any questions I'm happy to have them",
    "start": "3166839",
    "end": "3170960"
  },
  {
    "text": "here uh we're running a little bit late uh but I think have time for one or two questions that came in through the app",
    "start": "3173359",
    "end": "3179200"
  },
  {
    "text": "so let's do that oh there's an app for that yeah there's an app for that exactly uh so one of the questions is uh when you were talking about embracing",
    "start": "3179200",
    "end": "3185400"
  },
  {
    "text": "new industry standards um why did spring choose to have its own spring MVC based",
    "start": "3185400",
    "end": "3190760"
  },
  {
    "text": "programming model for restful resources and such rather than uh using J RS rather than Jrs um um well a short",
    "start": "3190760",
    "end": "3198960"
  },
  {
    "text": "version of this is we primarily care for actual industry standards in the sense of across language standards uh",
    "start": "3198960",
    "end": "3206960"
  },
  {
    "text": "um within the Java ecosystem um we do not really have a lot",
    "start": "3206960",
    "end": "3212720"
  },
  {
    "text": "of trust for the JCP to deliver uh and if you look at the current state of java E8 just Google for the state of java E8",
    "start": "3212720",
    "end": "3220359"
  },
  {
    "text": "uh if you haven't read the news uh then you know what what I'm referring to here we like to be in control of not only our",
    "start": "3220359",
    "end": "3228000"
  },
  {
    "text": "vision but also our ability to deliver on the vision and um with jackest in",
    "start": "3228000",
    "end": "3233839"
  },
  {
    "text": "spring in particular um there's not enough time to discuss this but there are quite a few design reasons why we",
    "start": "3233839",
    "end": "3240040"
  },
  {
    "text": "chose to uh have our own model um we keep it reasonably align so that kind of",
    "start": "3240040",
    "end": "3245359"
  },
  {
    "text": "your knowhow doesn't artificially break if you switch between them um but um I",
    "start": "3245359",
    "end": "3250839"
  },
  {
    "text": "would argue our way of handling this in the sense of the ability to release when",
    "start": "3250839",
    "end": "3256839"
  },
  {
    "text": "we are ready when we intend to release when we think it's needed in uh in production and the ability to evolve it",
    "start": "3256839",
    "end": "3263680"
  },
  {
    "text": "from there every year with new features and ref ments at our Pace this is",
    "start": "3263680",
    "end": "3269160"
  },
  {
    "text": "essential to the success of spring and uh the JCP just doesn't cut it in that sense a new version of a spec with an",
    "start": "3269160",
    "end": "3276440"
  },
  {
    "text": "overloaded API method every four years is not my taste of evolving a a",
    "start": "3276440",
    "end": "3281960"
  },
  {
    "text": "programming model yeah uh there are some other questions but they are of a rather lowlevel technical nature so I advise",
    "start": "3281960",
    "end": "3287520"
  },
  {
    "text": "people to for more intense questions I'm here all day I'm also here right now so just let's just chat one-on one exactly",
    "start": "3287520",
    "end": "3293160"
  },
  {
    "text": "so thank you for attending please don't forget to vote and hopefully we will see you at the uh next session here on this",
    "start": "3293160",
    "end": "3299480"
  },
  {
    "text": "track thank you",
    "start": "3299480",
    "end": "3303640"
  }
]