[
  {
    "text": "welcome to the last talk of the day and the Mythbusters track in and guess it's the last talk for most people through",
    "start": "4000",
    "end": "9769"
  },
  {
    "text": "here unless you go to the keynote later so hopefully everyone's not bored of talks so far I'll try not to be too",
    "start": "9769",
    "end": "15019"
  },
  {
    "text": "boring towards the end of the day so what am I going to talk about well sort",
    "start": "15019",
    "end": "20240"
  },
  {
    "text": "of following on the Mythbusters tradition we want to look at a number of things and come up with one of three",
    "start": "20240",
    "end": "25880"
  },
  {
    "text": "conclusions either the myth is confirmed we agree with that it is possible the",
    "start": "25880",
    "end": "31609"
  },
  {
    "text": "myth is plausible it could be possible given certain constraints or the myth is busted in that it is a total myth and we",
    "start": "31609",
    "end": "38090"
  },
  {
    "text": "shouldn't really be taking it too seriously now we were doing this for a number of things in the day but since",
    "start": "38090",
    "end": "45140"
  },
  {
    "text": "I'm a bit of a petrol head and this is where mechanical sympathy came from because Jackie Stewart the racing driver actually came up with the term it's not",
    "start": "45140",
    "end": "51410"
  },
  {
    "text": "my term i blatantly stole it and reused it in this context and Jackie Stewart's",
    "start": "51410",
    "end": "56930"
  },
  {
    "text": "term was that you get the best out of a racing car when you have a good understanding of how that car works you",
    "start": "56930",
    "end": "63890"
  },
  {
    "text": "don't need to know how to rebuild an engine rebuild a gearbox but you need to know how it works to get the best out of",
    "start": "63890",
    "end": "69350"
  },
  {
    "text": "it and so he talked about the driver working in harmony with machine to get",
    "start": "69350",
    "end": "74810"
  },
  {
    "text": "the best out of it I believe that is very similar in computer science and us getting the best out of the hardware we",
    "start": "74810",
    "end": "80959"
  },
  {
    "text": "have that we're using for computing now this is a Formula one steering wheel it looks terrifying compared to a normal",
    "start": "80959",
    "end": "88189"
  },
  {
    "text": "steering wheel you'll find in your car but actually it's really not that terrifying if you just get over the",
    "start": "88189",
    "end": "93950"
  },
  {
    "text": "initial ooh so many knobs and dials because it effectively steers and you've",
    "start": "93950",
    "end": "100369"
  },
  {
    "text": "also got gear changes here on the side but all the rest of these knobs are just small tweaks to what you can do like you",
    "start": "100369",
    "end": "107929"
  },
  {
    "text": "can adjust the amount of rails you're using so that's the rev limiter setting and what that will do is that'll let you",
    "start": "107929",
    "end": "114259"
  },
  {
    "text": "go faster but you'll probably burn out your engine and have it less reliable and you're gonna use more fuel so you",
    "start": "114259",
    "end": "120439"
  },
  {
    "text": "just making trade-offs and how you're doing different things seam with brake balance you can have the brakes go",
    "start": "120439",
    "end": "125719"
  },
  {
    "text": "forward or back and it's just in a racing car you get more of these knobs to play with we have them in computing",
    "start": "125719",
    "end": "131150"
  },
  {
    "text": "if you work on something like the Linux operating system you get used to assist control you'll be changing knobs and",
    "start": "131150",
    "end": "137180"
  },
  {
    "text": "stuff like this generally they set fairly good but we may go off and change some of them what I'm trying to say is",
    "start": "137180",
    "end": "143540"
  },
  {
    "text": "some of the stuff is not as scary as you think and the myth I want to try boss",
    "start": "143540",
    "end": "148909"
  },
  {
    "text": "today is can normal developers understand the hardware we're working on I've never given this talk before so",
    "start": "148909",
    "end": "155299"
  },
  {
    "text": "it's gonna be interesting people may think at the end of it yes we can understand this it's not that scary",
    "start": "155299",
    "end": "160340"
  },
  {
    "text": "or you might go holy crap we do whenever touch this again hopefully not the latter",
    "start": "160340",
    "end": "166750"
  },
  {
    "text": "so are we these birds of little brain that cannot understand what's going on",
    "start": "166750",
    "end": "172400"
  },
  {
    "text": "in here actually it's a it's an unfair representation of Homer because if anybody is a big Simpsons fine you'll",
    "start": "172400",
    "end": "177980"
  },
  {
    "text": "actually realized he is really intelligent and he has a big brain he's got a pencil shoved up it and this",
    "start": "177980",
    "end": "183019"
  },
  {
    "text": "causes his problems he had the pencil take it out when I episode he was really smart for a while but he didn't like it",
    "start": "183019",
    "end": "189609"
  },
  {
    "text": "or oh we like this little guy Cartman I Carmen is kind of interesting because",
    "start": "189609",
    "end": "195469"
  },
  {
    "text": "he's really intelligent but he's lazy and he's like the typical modern society",
    "start": "195469",
    "end": "201379"
  },
  {
    "text": "is Lizzy doesn't want to put the effort in I want everything yesterday",
    "start": "201379",
    "end": "207639"
  },
  {
    "text": "unfortunately you could almost draw that conclusion about computer science than our use of hard work at the moment we",
    "start": "207639",
    "end": "213650"
  },
  {
    "text": "don't put the discipline and the professionalism in to understand enough about our platforms as you would in",
    "start": "213650",
    "end": "219470"
  },
  {
    "text": "another discipline so let's look at that as a question as we go through are we just being lazy or is this just too hard",
    "start": "219470",
    "end": "226280"
  },
  {
    "text": "to understand so first myth let's start",
    "start": "226280",
    "end": "231560"
  },
  {
    "text": "off with who thinks CPUs are not getting faster hands up if you think they're not",
    "start": "231560",
    "end": "237169"
  },
  {
    "text": "getting faster that's only a few it's kind of interesting because the vast",
    "start": "237169",
    "end": "242629"
  },
  {
    "text": "majority of the industry keeps saying that so let's look into it in a little bit more detail",
    "start": "242629",
    "end": "249370"
  },
  {
    "text": "herb Sutter famously wrote the the free lunch is over there that a lot of this",
    "start": "249370",
    "end": "255799"
  },
  {
    "text": "gets talked about and he's actually got some very very good points in this and it mostly comes down to thermals inside",
    "start": "255799",
    "end": "263090"
  },
  {
    "text": "CPUs as we run them faster and faster they need to get hotter and hotter and heat dissipation on the skill that we're",
    "start": "263090",
    "end": "269870"
  },
  {
    "text": "dealing with is in be difficult to solve so we can't have CPUs getting hotter that's fundamentally",
    "start": "269870",
    "end": "275480"
  },
  {
    "text": "there she not that they can't get faster they can't get hotter and clock speed is",
    "start": "275480",
    "end": "281090"
  },
  {
    "text": "the main thing that makes it go hotter because of the voltages we drive for that but I'm going to show you the clock",
    "start": "281090",
    "end": "286430"
  },
  {
    "text": "speed isn't everything so here's a simple test let's word split",
    "start": "286430",
    "end": "291920"
  },
  {
    "text": "the text of Alice in Wonderland how long does that take on a few CPUs over the",
    "start": "291920",
    "end": "298730"
  },
  {
    "text": "last few years so let's go back to Core 2 0 and we're at 2.4 gigahertz and we've",
    "start": "298730",
    "end": "306410"
  },
  {
    "text": "got we can actually word split that an entire book 1400 times a second that's",
    "start": "306410",
    "end": "313340"
  },
  {
    "text": "pretty decent really but look what's happened as we've gone forward and CPUs clock speed my pointer is giving up",
    "start": "313340",
    "end": "319970"
  },
  {
    "text": "clock speed is going down even because we're worried about those thermals quite a lot but look at operations per second",
    "start": "319970",
    "end": "327850"
  },
  {
    "text": "it's going up that's just over the last few years and I've tested some later",
    "start": "327850",
    "end": "334340"
  },
  {
    "text": "processors that trend is continuing but I'm not going to stop there because that's not the whole story",
    "start": "334340",
    "end": "339890"
  },
  {
    "text": "which is kind of interesting so let's look inside a CPU and understand why",
    "start": "339890",
    "end": "346160"
  },
  {
    "text": "some of that is getting faster well this is the soundy Bridge microarchitecture",
    "start": "346160",
    "end": "351610"
  },
  {
    "text": "this is typically what most laptops are you can bind today unless you're getting one of the very latest in which you'll",
    "start": "351610",
    "end": "356840"
  },
  {
    "text": "be getting is Ivy Bridge Ivy Bridge is this same microarchitecture is this but add ice rink to make it a little bit",
    "start": "356840",
    "end": "362780"
  },
  {
    "text": "smaller so this is the current state of the art for Intel x86 processors now",
    "start": "362780",
    "end": "368330"
  },
  {
    "text": "inside a processor at university we're all taught we have one CPU on one our thematical logic unit hang on we'll have",
    "start": "368330",
    "end": "375710"
  },
  {
    "text": "a three of them here this is one processor one core you've actually got",
    "start": "375710",
    "end": "382670"
  },
  {
    "text": "parallelism happening inside CPUs so instead of going faster we go parlor on",
    "start": "382670",
    "end": "388610"
  },
  {
    "text": "the GaN parallel inside but we've got actually six ports along here because",
    "start": "388610",
    "end": "394490"
  },
  {
    "text": "we've also got a lot to do with on the right hand side here loading and storing data and you'll notice that the little",
    "start": "394490",
    "end": "401660"
  },
  {
    "text": "red boxes that are outlined those are actually new Kim with Sandy Bridge over the previous",
    "start": "401660",
    "end": "407120"
  },
  {
    "text": "architecture which was Nehalem and to make these things go really really fast",
    "start": "407120",
    "end": "413030"
  },
  {
    "text": "we've got to feed them because we can have multiple instructions per cycle going on it is completely possible to",
    "start": "413030",
    "end": "420710"
  },
  {
    "text": "have three math operations going on at the same time as to load addresses being",
    "start": "420710",
    "end": "428660"
  },
  {
    "text": "are at loading store address has been generated and stored enough a piece of data so that is impossible to get right up to six operations per cycle actually",
    "start": "428660",
    "end": "437120"
  },
  {
    "text": "going on so the clock speed does not equate to operations actually being executed because these things are",
    "start": "437120",
    "end": "443120"
  },
  {
    "text": "happening in parallel if you look at house well which is the next generation on from this we're going to eat for its",
    "start": "443120",
    "end": "448820"
  },
  {
    "text": "wide and we're gonna have more data paths for getting data in and out of these and you're gonna see quite shortly",
    "start": "448820",
    "end": "454370"
  },
  {
    "text": "wide because feeding these is actually the problem now I'm making a statement I'll go in to back it up in a second but",
    "start": "454370",
    "end": "461330"
  },
  {
    "text": "just a couple of things to note and here especially around performance you'll see up here you've only got one divide and",
    "start": "461330",
    "end": "467570"
  },
  {
    "text": "one jump on these so code this heli branch the code that there's a lot of",
    "start": "467570",
    "end": "472580"
  },
  {
    "text": "division and remainder operations doesn't go as fast as straightforward arithmetic using plus minus and multiply",
    "start": "472580",
    "end": "479600"
  },
  {
    "text": "so let's dig down into what's actually going on so back here all of these",
    "start": "479600",
    "end": "486800"
  },
  {
    "text": "different things inside the CPU have got counters see if you use a grid telling you what's actually going on there cut",
    "start": "486800",
    "end": "492860"
  },
  {
    "text": "counters for everything so we can profile this and tell what's going on one of the tools that lets us out those",
    "start": "492860",
    "end": "499190"
  },
  {
    "text": "counters is / stat on Linux so here I'm going to run really simple / start",
    "start": "499190",
    "end": "504560"
  },
  {
    "text": "there's loads of bells and whistles you can pass into this so if you type perf lists is give you pages and pages make",
    "start": "504560",
    "end": "510530"
  },
  {
    "text": "sure you pipe it the more because you're going to need it of everything you can profile and it's everything from CPU",
    "start": "510530",
    "end": "516020"
  },
  {
    "text": "counters to what the operating systems doing - what the i/o systems are doing I can give you lots of what's going on now",
    "start": "516020",
    "end": "521450"
  },
  {
    "text": "what's the very basic I'd put on me running the Alice in Wonderland text through this to tell me what's going so",
    "start": "521450",
    "end": "528410"
  },
  {
    "text": "this is Nehalem architecture first of all couple of things to note 2.8 gigahertz is what it's actually at but it's",
    "start": "528410",
    "end": "535190"
  },
  {
    "text": "actually running a 3.2 that's because a turbo boost so it's running faster it's a larger clock up",
    "start": "535190",
    "end": "540620"
  },
  {
    "text": "when it's not running all the cores at the same time now you'll see that look",
    "start": "540620",
    "end": "547010"
  },
  {
    "text": "how many cycles of the front end on the back end so what do mean the front end and back in front end is fetching",
    "start": "547010",
    "end": "553370"
  },
  {
    "text": "instructions in decoding and radley to be executed the back end is executing them and retiring those instructions",
    "start": "553370",
    "end": "558560"
  },
  {
    "text": "after they're finished the front end and back end of this processor is idle a",
    "start": "558560",
    "end": "563710"
  },
  {
    "text": "significant chunk of the time so if we made this faster would our previous",
    "start": "563710",
    "end": "569240"
  },
  {
    "text": "example have got any quicker no whether we CPUs are getting faster",
    "start": "569240",
    "end": "576590"
  },
  {
    "text": "not as almost irrelevant they're ready faster than we're feeding them and I'll get onto the next myth why we're not",
    "start": "576590",
    "end": "582800"
  },
  {
    "text": "feeding them fast enough but let's just get forward another architecture",
    "start": "582800",
    "end": "587870"
  },
  {
    "text": "generation of the Sandy Bridge so running the exact same test through Sandy Bridge look our cycles Idol has",
    "start": "587870",
    "end": "596840"
  },
  {
    "text": "dropped we've dropped down from thirty and thirty eight to twenty six and twenty one and on turbo booster this is",
    "start": "596840",
    "end": "605780"
  },
  {
    "text": "a 2.4 aiken turbo boost higher because you get turbo 2 in Sandy Bridge so they're actually this is a",
    "start": "605780",
    "end": "611690"
  },
  {
    "text": "like-for-like comparison on exactly the same piece of work notice the time 5.9",
    "start": "611690",
    "end": "618140"
  },
  {
    "text": "seconds 9.8 to complete the work for one see that's anxiously 25 percent more",
    "start": "618140",
    "end": "625550"
  },
  {
    "text": "going across the generations why is because of wasted cycles the actual",
    "start": "625550",
    "end": "632750"
  },
  {
    "text": "instructions per cycle is not as good on the previous generation and you can keep",
    "start": "632750",
    "end": "638600"
  },
  {
    "text": "going back so all of those figures that we seen the reason why it's got faster",
    "start": "638600",
    "end": "644240"
  },
  {
    "text": "by generation is not to do with clock speed is to do with how we're feeding those execution units inside there and",
    "start": "644240",
    "end": "650480"
  },
  {
    "text": "so that's a kind of interesting observation so our see if you use getting any faster I'd say it's plausible but not what most",
    "start": "650480",
    "end": "658400"
  },
  {
    "text": "people think it's getting faster because we're feeding them faster not because",
    "start": "658400",
    "end": "663830"
  },
  {
    "text": "the CPUs themselves are significantly faster for a long time with in having",
    "start": "663830",
    "end": "669320"
  },
  {
    "text": "CPUs that had just been stalled idle waiting to be fed and we're not getting data to them",
    "start": "669320",
    "end": "674840"
  },
  {
    "text": "quick enough this one's interesting memory provides random access hands up",
    "start": "674840",
    "end": "682670"
  },
  {
    "text": "who thinks memory gives us random access hey I got what 10 20 percent the room",
    "start": "682670",
    "end": "690770"
  },
  {
    "text": "there I said yes most people don't think so the name suggests this random access",
    "start": "690770",
    "end": "696590"
  },
  {
    "text": "we all believe we get random access well",
    "start": "696590",
    "end": "702280"
  },
  {
    "text": "what's kind of interesting is this is a cost equation at the end of the day to",
    "start": "702280",
    "end": "707780"
  },
  {
    "text": "get to me in memory is fairly expensive so we want to feed those CPUs really",
    "start": "707780",
    "end": "713600"
  },
  {
    "text": "fast like we've been talking about but how do we feed them really fast well we need the data to be close to them by",
    "start": "713600",
    "end": "719840"
  },
  {
    "text": "something that's very very quick and this is the classic memory hierarchy where at the very top we've got the CPU",
    "start": "719840",
    "end": "727010"
  },
  {
    "text": "registers and buffers inside those cores those are incredibly quick like the latest generations now even a register",
    "start": "727010",
    "end": "734810"
  },
  {
    "text": "to register move doesn't cost anything because those instructions are getting decoded it's actually just read not be",
    "start": "734810",
    "end": "740450"
  },
  {
    "text": "in the register file it doesn't even move anymore so it's free when you're",
    "start": "740450",
    "end": "745580"
  },
  {
    "text": "inside the core effectively and you get buffers in a night which I'll touch on in a second then we've got layers of",
    "start": "745580",
    "end": "752000"
  },
  {
    "text": "caches and caches get bigger and slower bigger and slower so every time you need",
    "start": "752000",
    "end": "757310"
  },
  {
    "text": "to deal with more data the complications in addressing the larger size means it",
    "start": "757310",
    "end": "762920"
  },
  {
    "text": "gets slower so what this effectively gives you if you design really well is",
    "start": "762920",
    "end": "768230"
  },
  {
    "text": "you've got the cost for the largest and the type of memory they'd be in",
    "start": "768230",
    "end": "775970"
  },
  {
    "text": "permanent storage but with the speed of access of the fastest if you're feeding it all through correctly and also an",
    "start": "775970",
    "end": "783680"
  },
  {
    "text": "interesting thing that isn't talked about so much but is coming really really important is par the par to",
    "start": "783680",
    "end": "789260"
  },
  {
    "text": "access a disk is so much more per operation than part to access an l1 cache and just not seeing modern",
    "start": "789260",
    "end": "796550"
  },
  {
    "text": "processors are starting to shut down different things you'll see that on the little sandy bridge-e servers now if you",
    "start": "796550",
    "end": "803360"
  },
  {
    "text": "transfer memory from the network hard to the CPU it used to always transfer to me a memory now it can transfer to the cache",
    "start": "803360",
    "end": "810380"
  },
  {
    "text": "okay that's much faster and much slower lately but that's not why they're doing it the reason they're not doing it the",
    "start": "810380",
    "end": "815660"
  },
  {
    "text": "other way by transferred the memories they don't have to par the memory up to do that and transfer it in so we're",
    "start": "815660",
    "end": "821450"
  },
  {
    "text": "trying to keep those thermal Stein everything's about dropping the thermals now I'm getting this power but it's time so you see here we've got the classic",
    "start": "821450",
    "end": "827720"
  },
  {
    "text": "sort of speed versus cost but really important is par so let's look at a",
    "start": "827720",
    "end": "835250"
  },
  {
    "text": "little bit what's going on so we looked inside a CPU core nice these blue boxes at the top or the equivalent of what's",
    "start": "835250",
    "end": "841910"
  },
  {
    "text": "inside the CPU core what does it do talking height from that point well first of all it talks to the memory",
    "start": "841910",
    "end": "847250"
  },
  {
    "text": "ordering buffer because when you've got all of those codes or with those cores having all those execution units running",
    "start": "847250",
    "end": "852740"
  },
  {
    "text": "at the same time you've got a lot of parallelism and the one thing you don't want to do is stall cuz you see those instructions stalled was a big issue so",
    "start": "852740",
    "end": "859430"
  },
  {
    "text": "it tries to predict branches it tries to prefetch data try to do all sort of things it's fact literally execute it",
    "start": "859430",
    "end": "866149"
  },
  {
    "text": "hits a branch then it goes based on my data I think it's gonna go this way so I'm gonna assume that branch comes back",
    "start": "866149",
    "end": "872149"
  },
  {
    "text": "is true and I'm going that way in your code and continue executing until it finds that leader that that gas was",
    "start": "872149",
    "end": "878959"
  },
  {
    "text": "wrong and has the back out and threw it away to deal with all of that and make that progress it uses the memory",
    "start": "878959",
    "end": "884810"
  },
  {
    "text": "ordering buffers for this because it can make progress and as long as it doesn't show that progress to the outside world",
    "start": "884810",
    "end": "891560"
  },
  {
    "text": "that's completely fine it's a scratch pad and if it finds that literally that it's gas was correct it can just let",
    "start": "891560",
    "end": "897709"
  },
  {
    "text": "that go and those buffers provide that but those buffers are really cheap to look up data in as well so there's our",
    "start": "897709",
    "end": "904160"
  },
  {
    "text": "fully associative queues we can just look up the data what's going on if you're in concurrency those are the big",
    "start": "904160",
    "end": "909860"
  },
  {
    "text": "problem that you're worried about seeing the latest versions of data if anybody's attended my course later in the week we'll talk a lot about what's going on",
    "start": "909860",
    "end": "916640"
  },
  {
    "text": "inside there's that's where the sliced titled memory ordering but we'll see for going further right from there we're",
    "start": "916640",
    "end": "922100"
  },
  {
    "text": "dealing with l1 l2 l3 cache that these little things on the side called the line fee the line fill and the right",
    "start": "922100",
    "end": "929060"
  },
  {
    "text": "combining buffers those are really interesting especially when you go to do a write and you get a cache miss you can",
    "start": "929060",
    "end": "934459"
  },
  {
    "text": "just continue to write to those and you can continue to make progress and you'll",
    "start": "934459",
    "end": "939860"
  },
  {
    "text": "start after a while that their biggest cost is an instruction miss followed by a",
    "start": "939860",
    "end": "945830"
  },
  {
    "text": "redness followed by right and that's counterintuitive most people don't realize that rights are actually less",
    "start": "945830",
    "end": "952100"
  },
  {
    "text": "hassle than rates because rights can be buffered reads you've got a guess an instruction miss you've got no hope",
    "start": "952100",
    "end": "958040"
  },
  {
    "text": "because you don't know where you're going next so let's get a little bit more scary what's the cash flow system",
    "start": "958040",
    "end": "964220"
  },
  {
    "text": "look like if we dig into it well it's just the same as the last slide but it was a bit more detail so our memory",
    "start": "964220",
    "end": "971089"
  },
  {
    "text": "ordering buffer is talking out mostly to the l1 data cache so our l1 is actually",
    "start": "971089",
    "end": "976940"
  },
  {
    "text": "split data and instructions pretty small only 32 care piece for those and it's",
    "start": "976940",
    "end": "983120"
  },
  {
    "text": "organized into what are known as cache lines cache lines on an accident are 64",
    "start": "983120",
    "end": "990140"
  },
  {
    "text": "bytes so when you write a single byte our single bit or a single word you need",
    "start": "990140",
    "end": "995510"
  },
  {
    "text": "the cache line to be available there your currency of data exchange within the processor itself so you're",
    "start": "995510",
    "end": "1002200"
  },
  {
    "text": "transferring 64 bytes at a time in the night and those are effectively hash tables they're just Hardware hash tables",
    "start": "1002200",
    "end": "1008830"
  },
  {
    "text": "that if you get a Miss it has to be pulled in the close would call something to be pushed out as well and that's your",
    "start": "1008830",
    "end": "1016390"
  },
  {
    "text": "nearest thing to the core nice and fast nice and near like some of the things",
    "start": "1016390",
    "end": "1022990"
  },
  {
    "text": "were fading into notice the double arrow feeding data in that was a Sunday bridge edition with Nehalem there only was one",
    "start": "1022990",
    "end": "1029530"
  },
  {
    "text": "aural feeding in and that's actually one of the fundamental reasons why that last algorithm was faster on Sandy Bridge and",
    "start": "1029530",
    "end": "1035709"
  },
  {
    "text": "it was before because I had another data path to feed and make that go faster so",
    "start": "1035709",
    "end": "1042220"
  },
  {
    "text": "what else is interesting is these guys over here this is where the random access question comes in the memory we",
    "start": "1042220",
    "end": "1048640"
  },
  {
    "text": "deal with is virtual memory it's not the physical memory we run on operating systems that virtualized what we're",
    "start": "1048640",
    "end": "1054429"
  },
  {
    "text": "doing so this physical address needs to be worked out based upon the virtual",
    "start": "1054429",
    "end": "1059920"
  },
  {
    "text": "address that we're doing that's usually looked up in the page table that would be an incredibly expensive operation to",
    "start": "1059920",
    "end": "1065500"
  },
  {
    "text": "look up through a tree of structures for every given address so we use these think of TLB the translation lookaside",
    "start": "1065500",
    "end": "1072160"
  },
  {
    "text": "buffer and they're a little hard cache of content addressable memory that looks up one to the other very very fast",
    "start": "1072160",
    "end": "1079260"
  },
  {
    "text": "if you get a Miss on one of those you've got a go to the page table and so that's",
    "start": "1079260",
    "end": "1085180"
  },
  {
    "text": "what makes your memory access really much much slower so imagine is something",
    "start": "1085180",
    "end": "1090820"
  },
  {
    "text": "truly random access whenever you're gonna miss on the TLB versus not getting an S on the TLB start to make any huge",
    "start": "1090820",
    "end": "1096790"
  },
  {
    "text": "difference we've also got the pre factors and what the prefetch is do is",
    "start": "1096790",
    "end": "1102190"
  },
  {
    "text": "they look for what you're doing and try to have the data available for you and if you want to do it so the obvious one",
    "start": "1102190",
    "end": "1107410"
  },
  {
    "text": "is the streaming pre factor so there's two pre fractures in each of these layers the streaming prefetcher that's",
    "start": "1107410",
    "end": "1114040"
  },
  {
    "text": "here and it's also here it just looks for a part of your streaming through memory so imagine you're just walking",
    "start": "1114040",
    "end": "1119170"
  },
  {
    "text": "through an array we invite after byte after byte it sees you're doing not and is pre fetching the data hiding the",
    "start": "1119170",
    "end": "1126250"
  },
  {
    "text": "latency before you get there it's really simple really really fast there's also",
    "start": "1126250",
    "end": "1132340"
  },
  {
    "text": "the instruction pointer prefetcher which is more clever and it actually looks at how you're walking through code on your",
    "start": "1132340",
    "end": "1138700"
  },
  {
    "text": "branches and if you're walking through memory in a predictable fashion it can",
    "start": "1138700",
    "end": "1143860"
  },
  {
    "text": "prefetch as well so it's now purely on stream if you forward backwards it can have also two gaps in it as long as it's",
    "start": "1143860",
    "end": "1149290"
  },
  {
    "text": "predictable but the predictable and the steps are called strides and the strides",
    "start": "1149290",
    "end": "1155290"
  },
  {
    "text": "must be less than the page size of the operating system because the TLB entries",
    "start": "1155290",
    "end": "1161650"
  },
  {
    "text": "map to the page size to the operating system so the wet TLB entry works is it's the page and in the offset inside",
    "start": "1161650",
    "end": "1168100"
  },
  {
    "text": "the page so it won't spawn across pages and pages are typically for care they",
    "start": "1168100",
    "end": "1174700"
  },
  {
    "text": "have been but we realize from the big memory systems they need to get bigger so if you're on one of the latest versions of Linux you actually find",
    "start": "1174700",
    "end": "1181510"
  },
  {
    "text": "you're using transparent huge pages so it's actually gone to two megabyte pages and it's not using it if you're in the",
    "start": "1181510",
    "end": "1187540"
  },
  {
    "text": "low latency Spears this is a nice kind of interesting gotcha because as it has to do garbage",
    "start": "1187540",
    "end": "1193150"
  },
  {
    "text": "collection and compaction of those you can sometimes get huge pauses that you're not aware of there's it makes the",
    "start": "1193150",
    "end": "1198820"
  },
  {
    "text": "space up to give you two megabyte pages at a time but so it's doing that and you",
    "start": "1198820",
    "end": "1204130"
  },
  {
    "text": "can similar things further right so these things are prefetching for you and getting out now as I get out further",
    "start": "1204130",
    "end": "1209859"
  },
  {
    "text": "to the l3 l3 Nye has got a ring bus on it and I see everything outside of the",
    "start": "1209859",
    "end": "1216190"
  },
  {
    "text": "single core which is their l1 and l2 cases I've got to ring bus this ring boss is incredibly fast and it talks to",
    "start": "1216190",
    "end": "1225029"
  },
  {
    "text": "chunks of memory in the l3 these are normally organized into two megabyte",
    "start": "1225029",
    "end": "1230799"
  },
  {
    "text": "chunks this has got advantages and that you can actually power off different",
    "start": "1230799",
    "end": "1235840"
  },
  {
    "text": "chunks at times as well so again go into that power budget and there's also a link from here to which is known as the",
    "start": "1235840",
    "end": "1242590"
  },
  {
    "text": "system the agent which contains the memory controller says we actually talked out to me in memory but also the",
    "start": "1242590",
    "end": "1248080"
  },
  {
    "text": "qpi controller will we talk to other sockets containing other CPUs and so you",
    "start": "1248080",
    "end": "1254379"
  },
  {
    "text": "can imagine the difference between I'm accessing a piece of memory that's in a Cell here versus I'm going across a",
    "start": "1254379",
    "end": "1260799"
  },
  {
    "text": "memory channel or qpi Boston somewhere over there to another machine or another socket that's dealing with it at the",
    "start": "1260799",
    "end": "1266979"
  },
  {
    "text": "same time so this is not going to give you uniform access to your memory like",
    "start": "1266979",
    "end": "1273129"
  },
  {
    "text": "we've gone out what's actually in memory itself again it gets even more interesting is so the memory controller",
    "start": "1273129",
    "end": "1278559"
  },
  {
    "text": "first up has a write buffer in so it can actually take a write request acknowledge it back before it even",
    "start": "1278559",
    "end": "1285190"
  },
  {
    "text": "writes it and then can queue those things out but then it writes across multiple channels down to multiple banks",
    "start": "1285190",
    "end": "1292450"
  },
  {
    "text": "of dims that are in your thing and so within add in the Volga banks is usually",
    "start": "1292450",
    "end": "1298570"
  },
  {
    "text": "between zero and it within the bank and you can per those up together and so you'll hear rank and rank is just",
    "start": "1298570",
    "end": "1304629"
  },
  {
    "text": "multiple dims working together with the banks aligned so they're all become the same unit now within this we have a res",
    "start": "1304629",
    "end": "1312519"
  },
  {
    "text": "of memory and they're typically for care by one care by sixteen bits so you 2",
    "start": "1312519",
    "end": "1319840"
  },
  {
    "text": "bytes in each cell know to read or write one of those cells you can't deal with",
    "start": "1319840",
    "end": "1325779"
  },
  {
    "text": "it directly what you've actually got to do is take that very very tiny charge",
    "start": "1325779",
    "end": "1331929"
  },
  {
    "text": "that's in that cell and connected to a sense amplifier the sense amplifier was is effectively what's known as the row",
    "start": "1331929",
    "end": "1338349"
  },
  {
    "text": "buffer and it amplifies the charge that see positive or negative up to a charge",
    "start": "1338349",
    "end": "1344810"
  },
  {
    "text": "that's very easy to read by the rest of the circuitry so what you end up doing is you read row at a time into the sense",
    "start": "1344810",
    "end": "1352520"
  },
  {
    "text": "amplifier in a rare which is the real buffer then you access the column within that so you start to see a pattern here",
    "start": "1352520",
    "end": "1359270"
  },
  {
    "text": "that if you're just walking through memory touching one byte in each row",
    "start": "1359270",
    "end": "1364510"
  },
  {
    "text": "that's gonna be nowhere near as fast as walking through memory the other aware so think of it sort of horizontally and",
    "start": "1364510",
    "end": "1371120"
  },
  {
    "text": "vertically where you reach a row and you go sequentially through a row big",
    "start": "1371120",
    "end": "1376190"
  },
  {
    "text": "difference because it's a read in the sense amplifier a thought stages in your row buffer to read a written and all of",
    "start": "1376190",
    "end": "1383210"
  },
  {
    "text": "these channels can work in parallel so the reason we've got the channels in parallel and multiple banks is the cost",
    "start": "1383210",
    "end": "1389240"
  },
  {
    "text": "of this gets hidden because it does things in parallel by pipelining so as one read requests gonna it sends the",
    "start": "1389240",
    "end": "1395630"
  },
  {
    "text": "next one straighter it doesn't wait for it goes to a different bank if it can and so whilst wants to return another one so you just keep the boss flooded",
    "start": "1395630",
    "end": "1401870"
  },
  {
    "text": "and keep it full at all times now what's this all mean when we actually take it",
    "start": "1401870",
    "end": "1407810"
  },
  {
    "text": "together and really measure it the first quota finds really really interesting Richard sites who was the architect of",
    "start": "1407810",
    "end": "1415220"
  },
  {
    "text": "the DAC alpha processor the Raptor which others time was acknowledged to be the fastest processor around it was actually",
    "start": "1415220",
    "end": "1422690"
  },
  {
    "text": "probably the first dual purpose processor because it runs hot you could compute and cook on it at the same time",
    "start": "1422690",
    "end": "1430390"
  },
  {
    "text": "but he made the quote that we should stop making faster processors it's not",
    "start": "1430390",
    "end": "1436940"
  },
  {
    "text": "the problem the problem is the memory subsystems that's where the real action is we gotta make those faster I know",
    "start": "1436940",
    "end": "1442970"
  },
  {
    "text": "people are starting to wise up to this and writing things faster but it also makes a difference for us and that we've",
    "start": "1442970",
    "end": "1449300"
  },
  {
    "text": "got to write software that accesses memory in a friendly manner and what",
    "start": "1449300",
    "end": "1454910"
  },
  {
    "text": "does that mean as far as figures go well here's using this is Sandra tool if I",
    "start": "1454910",
    "end": "1461900"
  },
  {
    "text": "just completely sequentially walk through memory it takes me three clocks",
    "start": "1461900",
    "end": "1468380"
  },
  {
    "text": "to get the l1 data 11 clock cycles to l2 14 to l3",
    "start": "1468380",
    "end": "1475530"
  },
  {
    "text": "6.now no seconds now Wi-Fi going to none seconds from clocks because Mia memory",
    "start": "1475530",
    "end": "1480930"
  },
  {
    "text": "is not driven by the clock speed of your processor there's certain physical characteristics to how the pre charge",
    "start": "1480930",
    "end": "1486450"
  },
  {
    "text": "cycles work that a text set amount time for it to happen so you measure that in nanoseconds you",
    "start": "1486450",
    "end": "1493260"
  },
  {
    "text": "need to work alright this is 3 gigahertz processor 3 clock cycles is 1 nanosecond to get to your l1 data so sequentially I",
    "start": "1493260",
    "end": "1502800"
  },
  {
    "text": "can get through memory really really fast that is the raw figures that doesn't even account for pipelining so",
    "start": "1502800",
    "end": "1508590"
  },
  {
    "text": "what your deal is being pipeline through a system like that that's even hidden unions see those three clock cycles it",
    "start": "1508590",
    "end": "1514110"
  },
  {
    "text": "becomes effectively free if you walk through memory sequentially Nick step up",
    "start": "1514110",
    "end": "1519240"
  },
  {
    "text": "I mentioned pages so the pages deal with the translation lookaside buffer but it",
    "start": "1519240",
    "end": "1525180"
  },
  {
    "text": "also deals with the operating system and how it cuts everything up into virtual memory pages if I walk around completely",
    "start": "1525180",
    "end": "1531720"
  },
  {
    "text": "randomly inside the page as opposed to just sequentially walking through it l1",
    "start": "1531720",
    "end": "1536850"
  },
  {
    "text": "and l2 they're just a fixed hash table and how they work so there's still the same number of clock cycles l3 goes up",
    "start": "1536850",
    "end": "1543930"
  },
  {
    "text": "and the reason that goes out there's because we are connected to a whole bunch of different points on the boss",
    "start": "1543930",
    "end": "1550350"
  },
  {
    "text": "and I see each step on the boss's an extra cycle so you can't randomly going around them plus the TLB misses start",
    "start": "1550350",
    "end": "1557370"
  },
  {
    "text": "matching because there's no TLB cache on the l3 so you start getting those and the pre-factors stop working for you so",
    "start": "1557370",
    "end": "1564930"
  },
  {
    "text": "well so we get more latency 9 l3 and start getting significantly more latency",
    "start": "1564930",
    "end": "1570570"
  },
  {
    "text": "on memory when we miss at that stage in the same page so things like the sense amplifiers and all are lit up and things",
    "start": "1570570",
    "end": "1576600"
  },
  {
    "text": "are all great for us at a certain level let's go completely random walking around our Haven well again l1 l2 same",
    "start": "1576600",
    "end": "1585840"
  },
  {
    "text": "stories user well go starting to get serious now in l3 and look what's helped me and this is",
    "start": "1585840",
    "end": "1592170"
  },
  {
    "text": "the fastest CPU available around at the moment for a memory subsystem that's mainstream you just go back a",
    "start": "1592170",
    "end": "1599640"
  },
  {
    "text": "couple of generations even just go back to Westmere and you just add another 20 to 30 nanoseconds on that go back to the",
    "start": "1599640",
    "end": "1606120"
  },
  {
    "text": "core to architectures and it's a hundred and fifty nine sec for a lot of the memory to get accessed I thought reott so it gets a lot lot",
    "start": "1606120",
    "end": "1613210"
  },
  {
    "text": "slower so how we access memory really really matters now what what's that mean",
    "start": "1613210",
    "end": "1618429"
  },
  {
    "text": "when I sort of says like the daughter is a branch miss or instruction this is your worst class next thing is a redness",
    "start": "1618429",
    "end": "1625179"
  },
  {
    "text": "is the next thing and then a right well writing Haley Browns code guess",
    "start": "1625179",
    "end": "1630250"
  },
  {
    "text": "what's gonna happen it's gonna miss more often because it's just too much data to keep track off well we start looking at",
    "start": "1630250",
    "end": "1637120"
  },
  {
    "text": "reading and writing memory let's work through things sequentially if we can but that's not always the case we can't do that but let's work on chunks of data",
    "start": "1637120",
    "end": "1644799"
  },
  {
    "text": "to gather their cohesion makes sense this is actually not weird this is just good design keep things together that",
    "start": "1644799",
    "end": "1653200"
  },
  {
    "text": "are cohesive don't couple things that are not cohesive I find people saying you don't need to know all of the stuff",
    "start": "1653200",
    "end": "1658960"
  },
  {
    "text": "that's go away in fact actually good coupling and good cohesion design next most of this just work and I find a lot",
    "start": "1658960",
    "end": "1666820"
  },
  {
    "text": "of people write code that actually come in your profile it runs incredibly fast and really nice just because they employ good principles in design and if your",
    "start": "1666820",
    "end": "1674500"
  },
  {
    "text": "code is completely random and runs all over the heap well it's gonna be slow so",
    "start": "1674500",
    "end": "1680398"
  },
  {
    "text": "the deena tells me memory being random access lying is kind of busted besides",
    "start": "1680429",
    "end": "1687549"
  },
  {
    "text": "the fact I hate the new random cuz it's not cracked its arbitrary our industry's terrible at naming things okay",
    "start": "1687549",
    "end": "1696850"
  },
  {
    "text": "core drives do they provide random access everyone says they do keep",
    "start": "1696850",
    "end": "1702279"
  },
  {
    "text": "sequential hard drives are random Sewer hands who thinks hard drives are random access one two three four okay this is a",
    "start": "1702279",
    "end": "1712899"
  },
  {
    "text": "nice low number this because people really know are they just worried okay",
    "start": "1712899",
    "end": "1721360"
  },
  {
    "text": "car drives spitting rust we kind of know them quite well so the little disk spins",
    "start": "1721360",
    "end": "1728919"
  },
  {
    "text": "around an arm that reads it reads actors and stuff on this what's going on",
    "start": "1728919",
    "end": "1734110"
  },
  {
    "text": "first up most people are not aware of the thing called zone bit recording who's hard to zone bit recording before",
    "start": "1734110",
    "end": "1740799"
  },
  {
    "text": "seen it here nah - there's a big difference between",
    "start": "1740799",
    "end": "1747340"
  },
  {
    "text": "writing to the ardour tracks and the inner tracks of a disc let's do the density and so what the discs do to get",
    "start": "1747340",
    "end": "1754960"
  },
  {
    "text": "more data on them is you actually put more sectors in the outer ones than you do in the inner ones it doesn't need",
    "start": "1754960",
    "end": "1762220"
  },
  {
    "text": "angular velocity is exactly the same but you get greater density so what does",
    "start": "1762220",
    "end": "1767890"
  },
  {
    "text": "this mean will you think about it for one revolution you're gonna see so many more factors pass underneath so you're",
    "start": "1767890",
    "end": "1775930"
  },
  {
    "text": "gonna get greater throughput this is a graph of a debt Western Digital Raptor tenncare disk reading the outer sectors",
    "start": "1775930",
    "end": "1783700"
  },
  {
    "text": "- the inner sectors this is one of the fastest hand care disks on the market I",
    "start": "1783700",
    "end": "1788830"
  },
  {
    "text": "can get 220 megabytes a second in the audio tracks and I get to the inner",
    "start": "1788830",
    "end": "1794740"
  },
  {
    "text": "tracks I'm done - nearly 140 that's a big drop-off so that's just throughput changing and this is one of the better",
    "start": "1794740",
    "end": "1801310"
  },
  {
    "text": "disks that are out there for doing that when say well spin this faster is a",
    "start": "1801310",
    "end": "1806650"
  },
  {
    "text": "better way of doing it that's kind of true but there's limitations or not on the fastest discs are on a still 15 care",
    "start": "1806650",
    "end": "1813130"
  },
  {
    "text": "and haven't got any faster for a very very long time so what else is in the hardware this",
    "start": "1813130",
    "end": "1820300"
  },
  {
    "text": "kind of interesting well we queue of commands to this because as their arm sweeps across the disk we don't want to",
    "start": "1820300",
    "end": "1827410"
  },
  {
    "text": "go completely nuts and it implements elevator algorithms the Opera to do this but also so does the hardware and so if",
    "start": "1827410",
    "end": "1834880"
  },
  {
    "text": "it's passing over something will reorder the queue so it will get the thing on the web past it also does lots of other",
    "start": "1834880",
    "end": "1839890"
  },
  {
    "text": "quite neat things as well and it also does prefetching again it's starting to",
    "start": "1839890",
    "end": "1844990"
  },
  {
    "text": "see the same patterns pick up again over and over again so it realizes you've read something I'll prefect something",
    "start": "1844990",
    "end": "1851100"
  },
  {
    "text": "but also what's the unit of currency now we'll the minimum you can read a right is a sector sectors were typically 512",
    "start": "1851100",
    "end": "1858820"
  },
  {
    "text": "bytes for a long time they're now moving almost exclusively to for care why have",
    "start": "1858820",
    "end": "1864970"
  },
  {
    "text": "they done that it's very easy to miss when the star to",
    "start": "1864970",
    "end": "1871679"
  },
  {
    "text": "stop us on this it has to leave a decent gap between each of the blocks on desk they realize when it picks up the start",
    "start": "1871679",
    "end": "1877289"
  },
  {
    "text": "and stop all those gaps start to add up especially as disks bigger and bigger so",
    "start": "1877289",
    "end": "1882360"
  },
  {
    "text": "you actually lose the ability to store more data by actually making the blocks larger and having less gaps we get more",
    "start": "1882360",
    "end": "1889529"
  },
  {
    "text": "data on a desk so we're now moving to 4k so that means for care is the minimum we",
    "start": "1889529",
    "end": "1894960"
  },
  {
    "text": "can read or write so we read a ride a bike you read a ride for care now if I",
    "start": "1894960",
    "end": "1900059"
  },
  {
    "text": "write a bite to a file that's already or something in it I've got to read the whole thing first",
    "start": "1900059",
    "end": "1905190"
  },
  {
    "text": "I changed the bite and write the whole thing back again I can't just change the long bit and one bite so I'm dealing at",
    "start": "1905190",
    "end": "1912869"
  },
  {
    "text": "that level of currency at the stage so what goes to make up an i/o operation",
    "start": "1912869",
    "end": "1920029"
  },
  {
    "text": "well there's four things to it really is the command overhead itself that's all the electronic processing that happens",
    "start": "1920029",
    "end": "1926190"
  },
  {
    "text": "inside the disc and it's really small and electronics are getting very very fast the cost here is dominated by the",
    "start": "1926190",
    "end": "1931830"
  },
  {
    "text": "physical media itself so the two major components are that or the seek time that has to seek backwards and forwards",
    "start": "1931830",
    "end": "1939590"
  },
  {
    "text": "and look at the rotational latency well the seek time of the arm from sort",
    "start": "1939590",
    "end": "1946919"
  },
  {
    "text": "of outside to inside in the best discs you're looking at around six milliseconds so do a full sweep right",
    "start": "1946919",
    "end": "1953340"
  },
  {
    "text": "across so on average you're probably going to look at three milliseconds is the cost of the sweep because you're gonna sweep halfway on average laptop",
    "start": "1953340",
    "end": "1960779"
  },
  {
    "text": "drives much slower they don't work quite as well see you looking at sort of anywhere up to fifteen milliseconds this",
    "start": "1960779",
    "end": "1967980"
  },
  {
    "text": "is Kenneth state-of-the-art doesn't much slower discs aren't there rotational latency something spinning at ten",
    "start": "1967980",
    "end": "1974340"
  },
  {
    "text": "thousand times a minute it actually takes six milliseconds to do a fault rotation so it's going to take",
    "start": "1974340",
    "end": "1981809"
  },
  {
    "text": "you three milliseconds to get around so what's this all add up to well let's take the final bit which is data",
    "start": "1981809",
    "end": "1987480"
  },
  {
    "text": "transfer well if I were I did inner art you find that in physical disks the",
    "start": "1987480",
    "end": "1992909"
  },
  {
    "text": "media transfer dominates the cost and getting it out boxed interfaces got so fast if you're in SAS or SATA 3 you're",
    "start": "1992909",
    "end": "1999389"
  },
  {
    "text": "looking at 600 mega Sakon three interfaces no problem no I but the physical media can",
    "start": "1999389",
    "end": "2005030"
  },
  {
    "text": "only deal with one the 200 megabytes a second typically on or off that media so that's we've dealt with sequential",
    "start": "2005030",
    "end": "2012260"
  },
  {
    "text": "let's look so sequential I can get along the audio tracks off at and care desk",
    "start": "2012260",
    "end": "2017770"
  },
  {
    "text": "220 mega second let's go to random lis",
    "start": "2017770",
    "end": "2022910"
  },
  {
    "text": "access a for care block so I'm not even try phone line so I'm gonna just do a full four K blocks reads or writes my",
    "start": "2022910",
    "end": "2029330"
  },
  {
    "text": "average latency you get one you start adding up it's ten milliseconds that's only a hundred IO operations per second",
    "start": "2029330",
    "end": "2036560"
  },
  {
    "text": "you can get through to physical spending desk what's your throughput when you're at",
    "start": "2036560",
    "end": "2041690"
  },
  {
    "text": "that sort of random rate that's less than a megabyte a second that's not very impressive you'll",
    "start": "2041690",
    "end": "2049070"
  },
  {
    "text": "actually find that the circuitry so if you write a test to do this you'd get a bit more than one mega second you might",
    "start": "2049070",
    "end": "2054710"
  },
  {
    "text": "get two because the circuitry is quite smart so all that smart circuitry all this giving you is a doubling up of the",
    "start": "2054710",
    "end": "2062929"
  },
  {
    "text": "theoretical maximum by trying to be clever so randomly accessing a desk I",
    "start": "2062929",
    "end": "2068830"
  },
  {
    "text": "would start in the diet well what can we do to improve it there's some tricks",
    "start": "2068830",
    "end": "2073960"
  },
  {
    "text": "look at one arm how about having to Donald half the seat",
    "start": "2073960",
    "end": "2079909"
  },
  {
    "text": "time let's make a lot more expensive some discs keep multiple copies used to",
    "start": "2079910",
    "end": "2085639"
  },
  {
    "text": "be a scuzzy trick for a while so I've got less rotational latency but again everything's got a consequence remember",
    "start": "2085640",
    "end": "2092360"
  },
  {
    "text": "back to the racing car you turn a dial you get one of fact it's always got a consequence the consequence is it's",
    "start": "2092360",
    "end": "2097940"
  },
  {
    "text": "going to take a longer to write and you're gonna have less capacity I mentioned we have got command queues and",
    "start": "2097940",
    "end": "2103850"
  },
  {
    "text": "those are getting better and smarter but they're very limited in what they can do the one thing that we can actually do",
    "start": "2103850",
    "end": "2109430"
  },
  {
    "text": "quite well let's put a cache in front to it which is kind of reasonable for the reading it actually really wins out for",
    "start": "2109430",
    "end": "2115100"
  },
  {
    "text": "writing because it's back to the reading you don't know what you're gonna get and that comes hard to predict it but for",
    "start": "2115100",
    "end": "2120230"
  },
  {
    "text": "writing it's perfect because you can just acknowledge the goose to know where the danger is this is persistent storage",
    "start": "2120230",
    "end": "2125690"
  },
  {
    "text": "so it must be safe we used to have bought to be backed that's not even an issue anymore because batteries fail",
    "start": "2125690",
    "end": "2131720"
  },
  {
    "text": "over time now we've got great big capacitor and the capacitors Novak them and they're really reliable and see if not",
    "start": "2131720",
    "end": "2137519"
  },
  {
    "text": "even commodity SSDs and stuff you can buy a laptop over there with an intel",
    "start": "2137519",
    "end": "2143099"
  },
  {
    "text": "SSD just completely mainstream and it's got a capacitor that Sears all my data so if you just pull up all right it's",
    "start": "2143099",
    "end": "2149220"
  },
  {
    "text": "still safe for right and so it's acknowledged and sent it's see if the disk now through all of this",
    "start": "2149220",
    "end": "2154470"
  },
  {
    "text": "I haven't said anything about the operating system the operating system there's lots to make this all better but",
    "start": "2154470",
    "end": "2161549"
  },
  {
    "text": "let's assume you're doing synchronous writes to disk so you've turned on F sync or F data sync when if you're",
    "start": "2161549",
    "end": "2167609"
  },
  {
    "text": "writing through the operating system can't help you you're going through and you're at the mercy so if you're writing to our database where you must have your",
    "start": "2167609",
    "end": "2175380"
  },
  {
    "text": "data the operating system is not helping you you're dealing with this and you'll see some databases playing funtastic",
    "start": "2175380",
    "end": "2181670"
  },
  {
    "text": "transaction numbers they're not committed a disk they're only inside the operating systems page tables that is",
    "start": "2181670",
    "end": "2188249"
  },
  {
    "text": "not reliable so I think the deal is",
    "start": "2188249",
    "end": "2193710"
  },
  {
    "text": "telling me again this is not random access sounds like a disk is really a",
    "start": "2193710",
    "end": "2199470"
  },
  {
    "text": "big tip that's fast because actually you think of it you can seek backwards and",
    "start": "2199470",
    "end": "2204809"
  },
  {
    "text": "forwards through the tip this is doing exactly the same thing just a bit faster it's not true random access ah",
    "start": "2204809",
    "end": "2212630"
  },
  {
    "text": "something's come into the rescue we have SS days solid-state drives not",
    "start": "2212720",
    "end": "2217739"
  },
  {
    "text": "solid state disks do they provide random access Sheila hands please oh we got",
    "start": "2217739",
    "end": "2225930"
  },
  {
    "text": "more hands for this one still not a lot but so has an SSD work well it's",
    "start": "2225930",
    "end": "2235739"
  },
  {
    "text": "arranged in the logical blocks some are different for the nose but this is sort of what the typical ones work like you",
    "start": "2235739",
    "end": "2241890"
  },
  {
    "text": "typically have a 2 megabyte block that's been a big array of cells again looks a",
    "start": "2241890",
    "end": "2248430"
  },
  {
    "text": "bit like memory now each of these little cells you'll see MLC and SLC which is whether this multi-level or",
    "start": "2248430",
    "end": "2255089"
  },
  {
    "text": "single level single level means you can store a single bit and the way it works is it's got a voltage or it doesn't have",
    "start": "2255089",
    "end": "2261569"
  },
  {
    "text": "a voltage that's simple but the fact that you can have range to voltage",
    "start": "2261569",
    "end": "2267090"
  },
  {
    "text": "so let's say I can have four different voltages so 0 1 2 & 3 I can store two",
    "start": "2267090",
    "end": "2273720"
  },
  {
    "text": "bits this is what an mlc cell becomes there's new ones coming out now that",
    "start": "2273720",
    "end": "2279180"
  },
  {
    "text": "have got eight level so you can store three bits so we can actually get a bit more density in there but you'll find",
    "start": "2279180",
    "end": "2285000"
  },
  {
    "text": "there some interesting side effects to that so most of the consumer stuff that",
    "start": "2285000",
    "end": "2291030"
  },
  {
    "text": "we use is mlc because it's all about just making it cheap and getting the density there not the way these are",
    "start": "2291030",
    "end": "2298500"
  },
  {
    "text": "organized is we could address every single cell but that would be really really expensive so the circuitry is",
    "start": "2298500",
    "end": "2304500"
  },
  {
    "text": "design so you access a row at a time and so you can read or write",
    "start": "2304500",
    "end": "2310350"
  },
  {
    "text": "a row and any given time so and that's actually called a page and these and it's typically for care for what we're",
    "start": "2310350",
    "end": "2318480"
  },
  {
    "text": "dealing with at this stage there's some where it care as well so just a penny more but let's therefore care is your typical and you'll find it's quite a",
    "start": "2318480",
    "end": "2324840"
  },
  {
    "text": "common when we're working with so if I read or write a single for care thing that's great and it actually works",
    "start": "2324840",
    "end": "2331050"
  },
  {
    "text": "really really fast and it doesn't matter where it is because there's no physical moving parts so I go through and I just",
    "start": "2331050",
    "end": "2338130"
  },
  {
    "text": "write and I write and I write and this is grit and I go back and I read and I read and I read this is all I see",
    "start": "2338130",
    "end": "2343860"
  },
  {
    "text": "everything's looking completely random this is grit what Holmes did I delete something so I've got a big file now",
    "start": "2343860",
    "end": "2352200"
  },
  {
    "text": "that I didn't say it's not a big file it's even just a simple it's a for care file that I extend to be it care I can't",
    "start": "2352200",
    "end": "2360600"
  },
  {
    "text": "go back and modify that what I have to do is at the market is deleted because I",
    "start": "2360600",
    "end": "2366750"
  },
  {
    "text": "can only agree as a whole block at a time why is that the way SSDs work is",
    "start": "2366750",
    "end": "2373380"
  },
  {
    "text": "there right every cell to be a one and when you put data into it you turn off",
    "start": "2373380",
    "end": "2379590"
  },
  {
    "text": "the bits that you don't want and if you try to write ones to everything is very",
    "start": "2379590",
    "end": "2385230"
  },
  {
    "text": "easy to turn off of a specific bit because he did reenlist the circuit to drive current in the turn of bit on",
    "start": "2385230",
    "end": "2391050"
  },
  {
    "text": "hands to light up the cells around it and so you can't accurately write a single bit so if you want to arrears",
    "start": "2391050",
    "end": "2398070"
  },
  {
    "text": "you have to write ones to the whole thing this becomes interesting so I'm gonna raise a block but I can read and write",
    "start": "2398070",
    "end": "2406370"
  },
  {
    "text": "single page now what's the effect of that is I can end up with bits that are",
    "start": "2406370",
    "end": "2415230"
  },
  {
    "text": "marked as deleted because you don't wanna read the whole block every time because these things have a limited",
    "start": "2415230",
    "end": "2420690"
  },
  {
    "text": "number of cycles sometimes only 10,000 times you can read and write they are arrays these cells over and over again",
    "start": "2420690",
    "end": "2427260"
  },
  {
    "text": "and the word ID you don't want your desk to wear I too quickly so what they do is they just mark them as deleted and then",
    "start": "2427260",
    "end": "2434070"
  },
  {
    "text": "the copy the data that they need to another block and the new data that goes along with it so that's always he got a",
    "start": "2434070",
    "end": "2440220"
  },
  {
    "text": "cost now what happens is after a while it disk ends up fragmented and you've",
    "start": "2440220",
    "end": "2446790"
  },
  {
    "text": "got to go through and delete all of those ones that actually were marked is deleted uncompact",
    "start": "2446790",
    "end": "2452250"
  },
  {
    "text": "and you've got garbage collection going on until say well what about trim but all trim does is a hint from the",
    "start": "2452250",
    "end": "2459060"
  },
  {
    "text": "operating system to the desk that is not using something anymore so it allows it to Alma tries the cost ID but it doesn't",
    "start": "2459060",
    "end": "2465900"
  },
  {
    "text": "solve the problem and what the cost ends up meaning is you get this really bad",
    "start": "2465900",
    "end": "2471630"
  },
  {
    "text": "behavior at times so here's a really nice clean disk this is actually the one",
    "start": "2471630",
    "end": "2477120"
  },
  {
    "text": "for my one of my laptops which is an Intel 320 this is a two year old disk and it can read out over 200 mega sec",
    "start": "2477120",
    "end": "2488640"
  },
  {
    "text": "and then write at nearly 200 mega second absolutely grit then what happens when",
    "start": "2488640",
    "end": "2494280"
  },
  {
    "text": "it fills and I start leading and modifying stuff read is still looking good but right starts going all over the",
    "start": "2494280",
    "end": "2501540"
  },
  {
    "text": "place and that's because of this garbage collection and the readwrite cycle as",
    "start": "2501540",
    "end": "2507840"
  },
  {
    "text": "it's dealing with the compaction and the fragmentation going on and this is a really well behaved desk some discs are",
    "start": "2507840",
    "end": "2514650"
  },
  {
    "text": "terrible in that the the performance just falls off to nothing and you have to reformat them to get them to recover",
    "start": "2514650",
    "end": "2521130"
  },
  {
    "text": "this will get better and better all the time where drives as this is happening over and over again and we're going to",
    "start": "2521130",
    "end": "2526650"
  },
  {
    "text": "be a careful of there's a term called write amplification is where sometimes small writes can cost so much copying to",
    "start": "2526650",
    "end": "2532830"
  },
  {
    "text": "occur that the right is ample five - what's actually going on so just",
    "start": "2532830",
    "end": "2538260"
  },
  {
    "text": "to cover this very quickly the random rights can help performance because the",
    "start": "2538260",
    "end": "2543810"
  },
  {
    "text": "more acts you're are raising the blocks we seem to have great random performance for reads an interesting imagine if",
    "start": "2543810",
    "end": "2552210"
  },
  {
    "text": "you're only ever doing app and only right you never have to rears that could be really quite good so what's the axle",
    "start": "2552210",
    "end": "2559860"
  },
  {
    "text": "performance figures measured of the disk so that's let's actually hurt one of these desks with lots of loads so let's",
    "start": "2559860",
    "end": "2565800"
  },
  {
    "text": "head it at 40,000 times a second our average and so this is with the",
    "start": "2565800",
    "end": "2571320"
  },
  {
    "text": "mixed read/write balance our average on the read is sort of around a hundred to",
    "start": "2571320",
    "end": "2577950"
  },
  {
    "text": "two hundred microseconds you'll see people getting claims of 20 microseconds and 30 microseconds you don't see it in",
    "start": "2577950",
    "end": "2584310"
  },
  {
    "text": "reality with any sort of reasonable load these are more realistic figures you're looking at about a hundred to two hundred microseconds is what you'll",
    "start": "2584310",
    "end": "2590880"
  },
  {
    "text": "actually see through some of the better disks at the moment and the max goes up because they get tangled in the GC but",
    "start": "2590880",
    "end": "2597330"
  },
  {
    "text": "look at the their rights again it's looking really quite good but starts having problems and the averages hide a",
    "start": "2597330",
    "end": "2604290"
  },
  {
    "text": "multitude of sins because the max start getting pretty bad thanks latest theater",
    "start": "2604290",
    "end": "2611280"
  },
  {
    "text": "the art desks are still pausing for up to half a second at times that not so",
    "start": "2611280",
    "end": "2616530"
  },
  {
    "text": "good disk pause from multiple seconds as they are tried to sort out fragmentation on this so the view is this random is it",
    "start": "2616530",
    "end": "2625350"
  },
  {
    "text": "not random I think plausible I think if you just read from disk you do get",
    "start": "2625350",
    "end": "2633300"
  },
  {
    "text": "perfectly random access if you just write in an append-only fashion again",
    "start": "2633300",
    "end": "2638520"
  },
  {
    "text": "you get phenomenal throughput and good random performance if you mutate in",
    "start": "2638520",
    "end": "2644040"
  },
  {
    "text": "place performance ends up starting to hurt and becomes very very random so on",
    "start": "2644040",
    "end": "2652500"
  },
  {
    "text": "that note you've had a whistle-stop tour through some modern hardware do people feel they understand a little bit more",
    "start": "2652500",
    "end": "2659880"
  },
  {
    "text": "are you more baffled is it possible for us to understand this stuff and write better code your hands too who thinks we",
    "start": "2659880",
    "end": "2667560"
  },
  {
    "text": "can actually understand this stuff and write better code very good how many people",
    "start": "2667560",
    "end": "2674970"
  },
  {
    "text": "think there's no hope for us to understand this stuff and we should just ignore it and bury our heads in the sand",
    "start": "2674970",
    "end": "2681050"
  },
  {
    "text": "it looks like a result oh thank you very much hopefully haven't kept you too long if",
    "start": "2682970",
    "end": "2688560"
  },
  {
    "text": "you've got any questions just fry them away [Applause]",
    "start": "2688560",
    "end": "2701530"
  }
]