[
  {
    "text": "[Music] hello everyone thanks for coming and",
    "start": "6990",
    "end": "13129"
  },
  {
    "text": "yeah so my name is Dmitry general I work as the team leader of the cotton tools",
    "start": "13129",
    "end": "18240"
  },
  {
    "text": "team in the Munich office of jetbrains and today I'm going to talk about using",
    "start": "18240",
    "end": "24570"
  },
  {
    "text": "cotton for developing multi-platform projects so first of all just as a",
    "start": "24570",
    "end": "29580"
  },
  {
    "text": "little like just to begin with how many of you have never seen any like any",
    "start": "29580",
    "end": "34860"
  },
  {
    "text": "cotton code ever ok so quite some people well the bad news is that I will not",
    "start": "34860",
    "end": "41520"
  },
  {
    "text": "actually have time to do an improper introduction to the language but in",
    "start": "41520",
    "end": "47699"
  },
  {
    "text": "order to follow the talk you will not need to understand it really well so I will not be referring trainings or tree features I think distro all be quite",
    "start": "47699",
    "end": "54629"
  },
  {
    "text": "clear so what's cotton so it's a modern programming language we started work on",
    "start": "54629",
    "end": "60539"
  },
  {
    "text": "the project almost exactly 70 years ago we released the first version in February last year and it has been",
    "start": "60539",
    "end": "67740"
  },
  {
    "text": "getting quite a good traction as you probably know cotton is statically typed",
    "start": "67740",
    "end": "73730"
  },
  {
    "text": "the key traits that we usually highlight when we talk about cotton is that it's",
    "start": "73730",
    "end": "79020"
  },
  {
    "text": "concise safe and pragmatic means that using cotton allows you to write less",
    "start": "79020",
    "end": "84780"
  },
  {
    "text": "code using cotton allows you to get rid or avoid certain classes of errors such",
    "start": "84780",
    "end": "91140"
  },
  {
    "text": "as null pointer exceptions and it's pragmatics so in the sense that it comes from the industry not from the academia",
    "start": "91140",
    "end": "97830"
  },
  {
    "text": "we are trying to solve real problems experienced by real people and we hope that the result is accessible and usable",
    "start": "97830",
    "end": "104250"
  },
  {
    "text": "in practice and also cotton is interoperable so for example unlike elm",
    "start": "104250",
    "end": "110340"
  },
  {
    "text": "issue which the previous talk was about we are not trying to build our own universe where everything lives according to our own rules instead we",
    "start": "110340",
    "end": "117420"
  },
  {
    "text": "try to focus into on fitting as smoothly as possible on today all the ecosystems that cotton",
    "start": "117420",
    "end": "125280"
  },
  {
    "text": "interacts with so on the Java it's the JVM in the browser it's JavaScript like",
    "start": "125280",
    "end": "130709"
  },
  {
    "text": "a system on native it's the large set of native libraries so you do not have to",
    "start": "130709",
    "end": "137280"
  },
  {
    "text": "get rid of all those all of those tools and all of those when you start using Kotlin you just",
    "start": "137280",
    "end": "143240"
  },
  {
    "text": "start write as much code in cotton as you need to and keep the rest in and",
    "start": "143240",
    "end": "148920"
  },
  {
    "text": "used all the richness of the ecosystem you're living with so when we start the",
    "start": "148920",
    "end": "154830"
  },
  {
    "text": "cotton it was purely a GVM language but since then we have seen the potential of supporting other platforms in cotton and",
    "start": "154830",
    "end": "161460"
  },
  {
    "text": "all the opportunities that we have with that so now cotton is a multi-platform managed so JVM is the JVM is the first",
    "start": "161460",
    "end": "168420"
  },
  {
    "text": "platform that we started with I'm not going to talk about much about it today because there is lots of material",
    "start": "168420",
    "end": "174150"
  },
  {
    "text": "available elsewhere so I'm going to focus on the other topics so JavaScript sharing code between platforms and",
    "start": "174150",
    "end": "180990"
  },
  {
    "text": "content native so with the with the",
    "start": "180990",
    "end": "186510"
  },
  {
    "text": "current set of tools you can actually you actually have the ability to build multiple tiers of your application use",
    "start": "186510",
    "end": "192840"
  },
  {
    "text": "the same at the same language so you use coffin on the server with the JVM and the jar server frameworks use cotton on",
    "start": "192840",
    "end": "200010"
  },
  {
    "text": "Android with they're like regular Android SDK and use constant in the browser with cause in J's so let's start",
    "start": "200010",
    "end": "208290"
  },
  {
    "text": "our discussion with cotton J's so when you use a we knew compile code into",
    "start": "208290",
    "end": "214650"
  },
  {
    "text": "JavaScript this process works basically as a regular source to source for",
    "start": "214650",
    "end": "219870"
  },
  {
    "text": "installation similarly to how typescript does that and how many other languages that do that so the cotton compiler",
    "start": "219870",
    "end": "225150"
  },
  {
    "text": "takes caught in source code only Cotton's to it does not able it's not able to digest Java or Java bytecode or",
    "start": "225150",
    "end": "232170"
  },
  {
    "text": "anything like that just cotton sources and it generates JavaScript source code out of them now of course you want to",
    "start": "232170",
    "end": "237900"
  },
  {
    "text": "have access to all the libraries that exist on the jaws in the JavaScript ecosystem and you also want to access",
    "start": "237900",
    "end": "243960"
  },
  {
    "text": "them in a type safe way so in order to let you do that we have actually built a tool that takes typescript definitions",
    "start": "243960",
    "end": "252530"
  },
  {
    "text": "the type so type ship has a facility for building definitions for external libraries and there is a huge community",
    "start": "252530",
    "end": "258750"
  },
  {
    "text": "maintained repository of such definitions called definitely typed we have built a tool that takes those definitions and produces cost and",
    "start": "258750",
    "end": "266430"
  },
  {
    "text": "declarations out of them and you can link those declarations into your program so that you can access those libraries and finally once you have the",
    "start": "266430",
    "end": "273540"
  },
  {
    "text": "Java screen you can use like any of the traditional JavaScript tools for making use of that code for example you can always use",
    "start": "273540",
    "end": "278909"
  },
  {
    "text": "webpack to package the content generated code along with its dependencies into a",
    "start": "278909",
    "end": "285599"
  },
  {
    "text": "single JavaScript bundle file or you can use any other tool that you prefer to use so like cotton is an opinionated in",
    "start": "285599",
    "end": "291810"
  },
  {
    "text": "this regard so you can use whatever dude whatever tool chain that you want to use",
    "start": "291810",
    "end": "298099"
  },
  {
    "text": "so what do these external declarations look like so be so basically if you want",
    "start": "298099",
    "end": "305099"
  },
  {
    "text": "to access an external API from cotton geez you write something like this so this is a very simple definition of a",
    "start": "305099",
    "end": "310590"
  },
  {
    "text": "class like the window class that has a location property and it has an alert",
    "start": "310590",
    "end": "316409"
  },
  {
    "text": "function or a load method so there are no different there are no method bodies",
    "start": "316409",
    "end": "321629"
  },
  {
    "text": "in this class or all of this the actual implementations are provided by the browser and but there are types and the",
    "start": "321629",
    "end": "328440"
  },
  {
    "text": "types are what allows you to access those definition in cotton in types in a",
    "start": "328440",
    "end": "333569"
  },
  {
    "text": "type safe way so with full support for code completion documentation like type checking on all of these nice features",
    "start": "333569",
    "end": "339690"
  },
  {
    "text": "that statically typed languages give you yeah and the window declaration is also like is how you get act so it's a",
    "start": "339690",
    "end": "346020"
  },
  {
    "text": "top-level property that gives you access to this instance of this window class",
    "start": "346020",
    "end": "351080"
  },
  {
    "text": "now this is one possible way to interact with the JavaScript world so in many",
    "start": "351080",
    "end": "357509"
  },
  {
    "text": "cases you do want to have this but in other cases this does not exactly work for example you may have a JSON API that",
    "start": "357509",
    "end": "363509"
  },
  {
    "text": "exposed by some by some server and you can of course also write external declarations specifying how to specify",
    "start": "363509",
    "end": "370379"
  },
  {
    "text": "what this what what is r it what's return value of this API and how its",
    "start": "370379",
    "end": "376199"
  },
  {
    "text": "structured and so on but this may be little bit cumbersome so what you can do instead is you can rely on the dynamic",
    "start": "376199",
    "end": "382349"
  },
  {
    "text": "type that is supported by the cotton J's compiler so soon as you declare a variable of type dynamic this basically",
    "start": "382349",
    "end": "389879"
  },
  {
    "text": "turns off Cotton's type checker so once you once you have such a variable you can do anything with it you can access",
    "start": "389879",
    "end": "395729"
  },
  {
    "text": "any properties you can access any methods they will also return values of type dynamic so it like you can chain",
    "start": "395729",
    "end": "401849"
  },
  {
    "text": "such accesses and cotton will just translate this directly into JavaScript as is",
    "start": "401849",
    "end": "407240"
  },
  {
    "text": "so the generated code will just have also the same code response that messages square bracket 0 dot text if",
    "start": "407240",
    "end": "413389"
  },
  {
    "text": "this works you're a lot keep this doesn't work well the compiler is not to blame it did not verify anything just",
    "start": "413389",
    "end": "418610"
  },
  {
    "text": "make sure you get everything right so like you get do not get any compile time safety guarantees so when we talk about",
    "start": "418610",
    "end": "428199"
  },
  {
    "text": "developing modern web applications in cotton you of course want to use modern",
    "start": "428199",
    "end": "433580"
  },
  {
    "text": "frameworks as well and probably the most well known one of the most used frameworks now is react and in order to",
    "start": "433580",
    "end": "440389"
  },
  {
    "text": "enable you to build react applications using cotton we have built a set of official bindings for cotton so",
    "start": "440389",
    "end": "446210"
  },
  {
    "text": "basically it's some kind of something what the TS 2kt tool would could generate for you but it's like more more",
    "start": "446210",
    "end": "452509"
  },
  {
    "text": "polished more maintained and just in general works better and you can use",
    "start": "452509",
    "end": "458750"
  },
  {
    "text": "that you can use that to build react applications using cotton JS and to make",
    "start": "458750",
    "end": "465139"
  },
  {
    "text": "it easier to get started with we have also built a CLI tool that generates such an application for you so you can",
    "start": "465139",
    "end": "471020"
  },
  {
    "text": "install three NPM and then essentially just run this one command to generate the application and it sets everything",
    "start": "471020",
    "end": "478669"
  },
  {
    "text": "up it sets the necessary dependencies it creates an intelligent that you can open in the IDE right away it sets up",
    "start": "478669",
    "end": "485930"
  },
  {
    "text": "debugging by our source maps it sets up hot reloading so basically all the goodness is you need to be productive",
    "start": "485930",
    "end": "491389"
  },
  {
    "text": "when working with such an application and also we have also built a plugin for",
    "start": "491389",
    "end": "499430"
  },
  {
    "text": "Gradle that lets that provides the integration of that essentially provides",
    "start": "499430",
    "end": "505039"
  },
  {
    "text": "a bridge within the content world and the JavaScript roles so you can still",
    "start": "505039",
    "end": "510169"
  },
  {
    "text": "use Gradle for or building your content project and actually this is the build",
    "start": "510169",
    "end": "515328"
  },
  {
    "text": "system that you have to use if you build multi-platform projects using cotton and the cotton fronting plugin builds a",
    "start": "515329",
    "end": "522050"
  },
  {
    "text": "bridge between that and the JavaScript ecosystem meaning that you have that you can have dependencies on NPM libraries",
    "start": "522050",
    "end": "527870"
  },
  {
    "text": "it will automatically download Nodin and vm for you so that you just don't need to pollute your computer with this",
    "start": "527870",
    "end": "533690"
  },
  {
    "text": "javascript ugliness if you don't like this like as i don't it will just do all of this stuff it will run web pack for",
    "start": "533690",
    "end": "539990"
  },
  {
    "text": "you it will let you run using karma which is a JavaScript test framework and it also supports hot",
    "start": "539990",
    "end": "545720"
  },
  {
    "text": "reloading of changes to be just as soon is just what they make some changes in the editor it will just automatically",
    "start": "545720",
    "end": "551420"
  },
  {
    "text": "recompile and reload the browser window so that's a brief look at what we can do",
    "start": "551420",
    "end": "559160"
  },
  {
    "text": "for JavaScript but actually just targeting JavaScript is not the interesting part of cotton so what I",
    "start": "559160",
    "end": "565580"
  },
  {
    "text": "have told so far it's comparable to what other languages like typescript can deliver you but it's not significantly",
    "start": "565580",
    "end": "572000"
  },
  {
    "text": "better so if you just want to develop purely a purely browser-based application and cousin is a nice choice",
    "start": "572000",
    "end": "578060"
  },
  {
    "text": "but it's not like the full strength of what it can offer the full strength comes with the ability of sharing code",
    "start": "578060",
    "end": "584690"
  },
  {
    "text": "between your front end and your back end so essentially when you share code you",
    "start": "584690",
    "end": "592700"
  },
  {
    "text": "get a product that has models of multiple types so you have the common of essentially two different types so you",
    "start": "592700",
    "end": "597860"
  },
  {
    "text": "have a common modules which contain code that is not specific to any platform that would be the shared business logic",
    "start": "597860",
    "end": "604790"
  },
  {
    "text": "of your application and you have platform modules which run on a specific platform so either on the GBM or",
    "start": "604790",
    "end": "611080"
  },
  {
    "text": "javascript or potentially native so native is not supported yet by the system but it will be supported in the",
    "start": "611080",
    "end": "617150"
  },
  {
    "text": "near future so a very important point",
    "start": "617150",
    "end": "622670"
  },
  {
    "text": "here is that we do not want to have this right once anywhere right run anywhere a deal so you run your code so you do not",
    "start": "622670",
    "end": "631760"
  },
  {
    "text": "write your code just in the comment part you have full x the iran only the shared",
    "start": "631760",
    "end": "637010"
  },
  {
    "text": "business logic as common code and for the platform specific parts you use the full benefits full advantages of each",
    "start": "637010",
    "end": "643250"
  },
  {
    "text": "platform by writing a comm by writing dedicated implementations using the native platform api s so we are not",
    "start": "643250",
    "end": "650030"
  },
  {
    "text": "going to provide you with a big facade that abstracts away all of the differences of this but these platforms because this would also like destroy all",
    "start": "650030",
    "end": "656600"
  },
  {
    "text": "the unique advantages of each platform instead we provide you a tool that allows you to easily write platform",
    "start": "656600",
    "end": "664850"
  },
  {
    "text": "specific implementations and access them from the common code and I will tell you how exactly this works",
    "start": "664850",
    "end": "671440"
  },
  {
    "text": "so what how does the compilation process work for such a mix project so we have",
    "start": "675050",
    "end": "681240"
  },
  {
    "text": "some common code and we have jb on specific code and we have JavaScript specific code now what do we do when we",
    "start": "681240",
    "end": "686579"
  },
  {
    "text": "try to compile the common code the answer is we we cannot really compile it by itself because there's no",
    "start": "686579",
    "end": "692850"
  },
  {
    "text": "like real destination to it we cannot it compile it to JavaScript platform does not know anything about java classes we",
    "start": "692850",
    "end": "699810"
  },
  {
    "text": "cannot compile it to GS because we can cannot do anything with Jas on the JVM so in order to compile such a model you",
    "start": "699810",
    "end": "707310"
  },
  {
    "text": "take it you need to combine it with a specific platform implementation so if",
    "start": "707310",
    "end": "712800"
  },
  {
    "text": "you take the common code together with a JVM code you can compile the resulting combination to a bunch of class files on",
    "start": "712800",
    "end": "718740"
  },
  {
    "text": "the JVM if you take common code with the JavaScript specific part you can compile",
    "start": "718740",
    "end": "724860"
  },
  {
    "text": "them to a bunch of JavaScript files and then like those combinations you can run them on each platform as you need now",
    "start": "724860",
    "end": "732089"
  },
  {
    "text": "can you actually refer to platform specific declarations from common code and how can you do that the answer is of",
    "start": "732089",
    "end": "739019"
  },
  {
    "text": "course you can and the way you do that is that the common code can specify that",
    "start": "739019",
    "end": "744750"
  },
  {
    "text": "it expects certain declarations to be provided by the given by each platform",
    "start": "744750",
    "end": "750180"
  },
  {
    "text": "which is supported by this module so in this case I'm saying that in my common",
    "start": "750180",
    "end": "756060"
  },
  {
    "text": "code I expect that there must be a date class provided by the platform and those",
    "start": "756060",
    "end": "761639"
  },
  {
    "text": "are the members that I expect it to have so in this case I'm having I'm expecting to have this get full year method and",
    "start": "761639",
    "end": "767279"
  },
  {
    "text": "there is probably a bunch of other methods to get access other components of the date and on each specific",
    "start": "767279",
    "end": "773040"
  },
  {
    "text": "platform I provide an actual implementation so in this case this so",
    "start": "773040",
    "end": "778920"
  },
  {
    "text": "this is the JVM implementation and is in this GBM implementation I have built an implementation of this class based on",
    "start": "778920",
    "end": "785130"
  },
  {
    "text": "the calendar class which is part of the Java JDK and this is a JavaScript",
    "start": "785130",
    "end": "790920"
  },
  {
    "text": "implementation and this is completely different because on the Java player on JavaScript there is a date class",
    "start": "790920",
    "end": "796170"
  },
  {
    "text": "provided by the browser runtime and I can actually refer to it as my implementation so I can say that the",
    "start": "796170",
    "end": "801240"
  },
  {
    "text": "actual date class on Java platform is external is provide it is provided by the",
    "start": "801240",
    "end": "807360"
  },
  {
    "text": "platform and I also specified it yes and by the way it has all those methods that are expected to be there and the way the",
    "start": "807360",
    "end": "815850"
  },
  {
    "text": "compiler matches expected and actual declarations is essentially by qualified",
    "start": "815850",
    "end": "821040"
  },
  {
    "text": "names so they expect and actual declarations have to have the same quality the same package or in other",
    "start": "821040",
    "end": "826980"
  },
  {
    "text": "words the same qualified name so the common code expects a class from with a",
    "start": "826980",
    "end": "832350"
  },
  {
    "text": "qualified name of course and of data date to be there and if the platform",
    "start": "832350",
    "end": "838200"
  },
  {
    "text": "module provides this class provides an actual implementation for it and of",
    "start": "838200",
    "end": "843330"
  },
  {
    "text": "course you can also write common code that refers to these expected classes so this is just the simple function from a",
    "start": "843330",
    "end": "849240"
  },
  {
    "text": "common module that just accesses these date class and does some logical name to check two days are on the same day now",
    "start": "849240",
    "end": "858540"
  },
  {
    "text": "so this expects and actual stuff it looks kind of like interfaces but not exactly so why did we come up with our",
    "start": "858540",
    "end": "864180"
  },
  {
    "text": "own thing for this and why did not we just use interfaces the answer to that is this mechanism of expected and actual",
    "start": "864180",
    "end": "870780"
  },
  {
    "text": "declarations are is actually is much more flexible so interfaces are",
    "start": "870780",
    "end": "875940"
  },
  {
    "text": "essentially restricted to class members so you need to somehow obtain the instance of a class in order to that you",
    "start": "875940",
    "end": "882240"
  },
  {
    "text": "need to have a factory in order to obtain the instance of the factory in your dependency injection and this gets complicated fairly quickly with our",
    "start": "882240",
    "end": "889710"
  },
  {
    "text": "mechanism there is no such restriction so you can basically say that you expect a class and you're also expected in this",
    "start": "889710",
    "end": "895230"
  },
  {
    "text": "class to have a constructor and once you do that you can simply create a new instance of a date from common code",
    "start": "895230",
    "end": "900690"
  },
  {
    "text": "without bothering with any factories any dependency injection just go ahead and create like new up an instance and also",
    "start": "900690",
    "end": "908580"
  },
  {
    "text": "you can expect top-level functions or extension functions to be there so in Causton we we are not really keen",
    "start": "908580",
    "end": "915060"
  },
  {
    "text": "on packaging everything into classes we use top-level functions a lot and we also use the extension functions a lot",
    "start": "915060",
    "end": "920730"
  },
  {
    "text": "which allow you to define your own methods on on classes that are defined somewhere else and so this multi",
    "start": "920730",
    "end": "926760"
  },
  {
    "text": "platform project mechanism it integrates very nicely with the with all those features so an expect declaration can be",
    "start": "926760",
    "end": "933540"
  },
  {
    "text": "anything it can be a class it can be an interface actually which is not very useful but you do that for some reason it can be a",
    "start": "933540",
    "end": "940329"
  },
  {
    "text": "top-level function or it can be an extension function and one other",
    "start": "940329",
    "end": "945730"
  },
  {
    "text": "advantage that this gives us is that it gives us the ability to reuse existing Java implementations very easily so for",
    "start": "945730",
    "end": "953980"
  },
  {
    "text": "example like look at this testing annotation so we expect so there is this annotation class test we expect it to be",
    "start": "953980",
    "end": "959529"
  },
  {
    "text": "provided by the platform and on the GBM we happen to have an annotation that has",
    "start": "959529",
    "end": "965050"
  },
  {
    "text": "exactly the same name exactly the same semantics but it just lives in a different package so we can simply say",
    "start": "965050",
    "end": "970629"
  },
  {
    "text": "that the actual implementation of the test named test of the test annotation",
    "start": "970629",
    "end": "976329"
  },
  {
    "text": "on the JVM is ordered you need the test annotation you don't have to re-implement anything you don't have to",
    "start": "976329",
    "end": "981910"
  },
  {
    "text": "repeat anything you just say ok so the actual implementation of this expected type is this actually the actual class",
    "start": "981910",
    "end": "988809"
  },
  {
    "text": "and this would also not work for interfaces because there is no way we can make an existing class providing it",
    "start": "988809",
    "end": "995350"
  },
  {
    "text": "for coming from a third-party library implement some interface that we have defined this is simply not supported so",
    "start": "995350",
    "end": "1000720"
  },
  {
    "text": "like once this is one more way in which the expect actual mechanism is more powerful than interfaces so how do you",
    "start": "1000720",
    "end": "1009930"
  },
  {
    "text": "build this thing so as I mentioned this supported this is only supported using Gradle and we have special plugins that",
    "start": "1009930",
    "end": "1016500"
  },
  {
    "text": "you need to hook into a common module and into platform specific modules and",
    "start": "1016500",
    "end": "1022430"
  },
  {
    "text": "also you in a common module you can depend on you can depend on common libraries because it would be just not",
    "start": "1022430",
    "end": "1028589"
  },
  {
    "text": "very useful if you had to write all this code from scratch and or just provide expected finishes for all the api's that",
    "start": "1028589",
    "end": "1033659"
  },
  {
    "text": "you wanted to use so of course there are common libraries and we support them and like this is for example how you specify",
    "start": "1033659",
    "end": "1041250"
  },
  {
    "text": "dependence on the cotton standard lighter on the common version of the cotton standard library on the platform",
    "start": "1041250",
    "end": "1048329"
  },
  {
    "text": "for the platform module you do a very similar thing so there is a separate plugin for compiling a platform specific part and you of course can specify like",
    "start": "1048329",
    "end": "1055409"
  },
  {
    "text": "any any dependencies like on the Java libraries or on common or you can",
    "start": "1055409",
    "end": "1061500"
  },
  {
    "text": "specify it depends on Java libraries and we also have this special expected by dependency and this is how the link",
    "start": "1061500",
    "end": "1067679"
  },
  {
    "text": "between a common module and a platform specific part is created so for every common module like all the",
    "start": "1067679",
    "end": "1073630"
  },
  {
    "text": "platform modules that implement a that provide actual implementation for this expected repairs have to have this",
    "start": "1073630",
    "end": "1078700"
  },
  {
    "text": "expected by dependency in the build or Gradle but how do we actually compile",
    "start": "1078700",
    "end": "1085240"
  },
  {
    "text": "the common library so I mentioned that like when you compile a comma in application you cannot just build a",
    "start": "1085240",
    "end": "1090940"
  },
  {
    "text": "common code by itself because there is like no code no way to represent the code for it but for a library we do want",
    "start": "1090940",
    "end": "1096580"
  },
  {
    "text": "to have some kind of common representation so what do we do the answer is that is that when we compile a",
    "start": "1096580",
    "end": "1103450"
  },
  {
    "text": "common module which is a part of a library which we produce these metadata files which essentially is a sterilised",
    "start": "1103450",
    "end": "1110740"
  },
  {
    "text": "format of the declarations available in the library so it does not contain any implementation code in any format you",
    "start": "1110740",
    "end": "1116440"
  },
  {
    "text": "just specify basically the signatures of everything that is available in the library and then when you compile the",
    "start": "1116440",
    "end": "1123340"
  },
  {
    "text": "same library for a specific platform we produce specific implementations in the",
    "start": "1123340",
    "end": "1129580"
  },
  {
    "text": "normal formats like this would be a jar file for for Java to JavaScript we can't",
    "start": "1129580",
    "end": "1135730"
  },
  {
    "text": "also produce jar files which contain JavaScript files JavaScript source code and additional metadata that allows the",
    "start": "1135730",
    "end": "1141039"
  },
  {
    "text": "cousin compiler to make sense of them so basically yeah each time you build a",
    "start": "1141039",
    "end": "1147669"
  },
  {
    "text": "common library it produces multiple artifacts so there is one common artifact that you reference from a common module and there are platform",
    "start": "1147669",
    "end": "1154299"
  },
  {
    "text": "specific artifacts that you reference from each platform so what libraries are",
    "start": "1154299",
    "end": "1159549"
  },
  {
    "text": "there actually other than the standard library and what functional what features can you rely on in your multi",
    "start": "1159549",
    "end": "1165909"
  },
  {
    "text": "platform code so yeah",
    "start": "1165909",
    "end": "1171500"
  },
  {
    "text": "[Music]",
    "start": "1171500",
    "end": "1179380"
  },
  {
    "text": "so the first thing is of course the cotton standard library so what does it contain it contains like the most basic",
    "start": "1179380",
    "end": "1184539"
  },
  {
    "text": "facilities that you need in every in every project so it has strings it has collections it has like utility high",
    "start": "1184539",
    "end": "1191650"
  },
  {
    "text": "order functions like width and apply it support it has a hierarchy of exceptions which Mesa Kaleem mirrors the hierarchy",
    "start": "1191650",
    "end": "1198220"
  },
  {
    "text": "of exceptions defined in a JDK it essentially gives you the essential tools without which you cannot really",
    "start": "1198220",
    "end": "1203740"
  },
  {
    "text": "build much in cotton at all but is that all know if where there's of course many",
    "start": "1203740",
    "end": "1209799"
  },
  {
    "text": "other libraries which are available as common once so you may have already",
    "start": "1209799",
    "end": "1218380"
  },
  {
    "text": "guessed that for for the common code we also provide the ability to run tests and this is provided by the special",
    "start": "1218380",
    "end": "1226240"
  },
  {
    "text": "cotton dot test library and it looks almost exactly like g-unit because as you have as I have shown you the actual",
    "start": "1226240",
    "end": "1232690"
  },
  {
    "text": "implementation of all these annotations is provided by g-unit when you run on a GVM and on JavaScript on an end or",
    "start": "1232690",
    "end": "1238780"
  },
  {
    "text": "native we have custom implementations of course in essentially there is nothing fancy here there are annotation there",
    "start": "1238780",
    "end": "1244990"
  },
  {
    "text": "are certain methods and so you can just basically write tests for your common code and you can run those tests under",
    "start": "1244990",
    "end": "1250659"
  },
  {
    "text": "the JVM to make sure that your code runs correctly on the JVM and you can run them under JavaScript to make sure that",
    "start": "1250659",
    "end": "1256330"
  },
  {
    "text": "your code runs correctly in JavaScript I will show you later in the demo how this looks in practice one other library that",
    "start": "1256330",
    "end": "1264760"
  },
  {
    "text": "is available in as a common library is cotton X dot HTML and what it allows you",
    "start": "1264760",
    "end": "1272350"
  },
  {
    "text": "to do it allows you to build HTML pages using a cotton DSL so instead of writing",
    "start": "1272350",
    "end": "1278730"
  },
  {
    "text": "just tags and attributes and content directly using the HTML syntax you can use cotton strongly typed methods to do",
    "start": "1278730",
    "end": "1286120"
  },
  {
    "text": "that and of course one of the benefits of this is that you can you get better",
    "start": "1286120",
    "end": "1291580"
  },
  {
    "text": "code completion maybe you can get you get compile time checking to make sure",
    "start": "1291580",
    "end": "1296919"
  },
  {
    "text": "that you get your like tag names correctly but in fact this is not that",
    "start": "1296919",
    "end": "1301960"
  },
  {
    "text": "significant the main reason why this is a good thing is something else the good",
    "start": "1301960",
    "end": "1307809"
  },
  {
    "text": "reason is that you can very easily refactor this code and you can very easily create abstractions so you do not need to come up with fancy",
    "start": "1307809",
    "end": "1315190"
  },
  {
    "text": "mechanisms in your templating language to do conditions and loops and includes and macros and substitutions and all of",
    "start": "1315190",
    "end": "1321700"
  },
  {
    "text": "that because cotton already provides all these features it has loops it has",
    "start": "1321700",
    "end": "1327250"
  },
  {
    "text": "conditions it has classes that you can inherit from it has functions that you can call with default parameter values",
    "start": "1327250",
    "end": "1333070"
  },
  {
    "text": "and in this case so between these two slides I have just extracted a bunch of functionality in the method this is a",
    "start": "1333070",
    "end": "1339130"
  },
  {
    "text": "very natural thing to do it can be done like very easily and by doing that you can very easily compose parts of",
    "start": "1339130",
    "end": "1345400"
  },
  {
    "text": "templates in a very maintainable way which is somewhat better than you can do with like regular templates and because",
    "start": "1345400",
    "end": "1354760"
  },
  {
    "text": "this is a common library you can use this both on the client s and on the server so you can if in effect you can",
    "start": "1354760",
    "end": "1361510"
  },
  {
    "text": "do isomorphic rendering so you can render the same UI of your application both on the server and on the client and",
    "start": "1361510",
    "end": "1367510"
  },
  {
    "text": "the demo project I will get to in a few minutes will show exactly how this works in a like in a running application but",
    "start": "1367510",
    "end": "1376360"
  },
  {
    "text": "before I get to that I want to mention one more library which is caught in Xcode serialization so if you have",
    "start": "1376360",
    "end": "1382360"
  },
  {
    "text": "shared code if you have shared like JD model classes which you want to use both on the client and on the server then of",
    "start": "1382360",
    "end": "1388660"
  },
  {
    "text": "course you want to pass instances of the classes between the client and the server so that you can just expose the",
    "start": "1388660",
    "end": "1394360"
  },
  {
    "text": "rest api that includes those classes in json and access to the rest api from your browser so that it can do take",
    "start": "1394360",
    "end": "1400630"
  },
  {
    "text": "those classes and root out something with them on the browser and the cotton dot cotton X dot 0 Zhejiang library",
    "start": "1400630",
    "end": "1406240"
  },
  {
    "text": "provides you exactly that and it's actually very simple to use so in the most basic cases it's as simple as",
    "start": "1406240",
    "end": "1413050"
  },
  {
    "text": "putting the add serializable annotation on all the classes that you want to pass in in between the server and the client",
    "start": "1413050",
    "end": "1418510"
  },
  {
    "text": "and the library takes care of all the rest the library is actually implemented",
    "start": "1418510",
    "end": "1424390"
  },
  {
    "text": "the library includes a plug-in to the Kotton compiler so it does not rely on reflection in order to understand like",
    "start": "1424390",
    "end": "1430060"
  },
  {
    "text": "watch what fields are in each class and how do you actually serialize them and in so this provides much better",
    "start": "1430060",
    "end": "1437050"
  },
  {
    "text": "performance and this actually lets the library run on the JavaScript where we",
    "start": "1437050",
    "end": "1442750"
  },
  {
    "text": "don't currently have full support for reflection for data format to support decent it",
    "start": "1442750",
    "end": "1448000"
  },
  {
    "text": "supports brought about if you want something binary and it supports something else and you can also extend",
    "start": "1448000",
    "end": "1453220"
  },
  {
    "text": "it of course to support your own data serialization formats and building a",
    "start": "1453220",
    "end": "1460360"
  },
  {
    "text": "larger array of common libraries is one of the main focus areas of the kasnian team right now so we want to have some",
    "start": "1460360",
    "end": "1466870"
  },
  {
    "text": "cross-platform ways to do i oh we want to cross paths want you to write a GTP clients and a cross-platform way and",
    "start": "1466870",
    "end": "1474250"
  },
  {
    "text": "also like socket networking like web sockets on the browser regular sockets on the client we want to have we want to",
    "start": "1474250",
    "end": "1479740"
  },
  {
    "text": "have a real common library for dates and not this like care together started I'm showing in my demo and of course much",
    "start": "1479740",
    "end": "1486250"
  },
  {
    "text": "more and we also expect the community to build many other common libraries for the tasks that are important to them so",
    "start": "1486250",
    "end": "1492490"
  },
  {
    "text": "with that said proceed to a demo so",
    "start": "1492490",
    "end": "1498960"
  },
  {
    "text": "first of all let me run the application it will not be very fancy but what it",
    "start": "1498960",
    "end": "1504460"
  },
  {
    "text": "does is actually like how does the thing that it does is actually much more interesting than what exactly it does so",
    "start": "1504460",
    "end": "1511060"
  },
  {
    "text": "I'm running this application it wants to start it up some kind of a server and you see that so basically just render",
    "start": "1511060",
    "end": "1517210"
  },
  {
    "text": "some random messages so there is not much value in this specific content shown there but the interesting part is",
    "start": "1517210",
    "end": "1523750"
  },
  {
    "text": "what we see if if you press view source so basically you see here that this has",
    "start": "1523750",
    "end": "1529000"
  },
  {
    "text": "just five messages so the first five",
    "start": "1529000",
    "end": "1536050"
  },
  {
    "text": "messages you see on the page were rendered by the server one is sent the page and the rest of the messages were rendered on the client by JavaScript",
    "start": "1536050",
    "end": "1541630"
  },
  {
    "text": "code and now let's look at the implementation of this so I will switch to mind energy back and we'll look at",
    "start": "1541630",
    "end": "1549460"
  },
  {
    "text": "the project so you will see that this project contains a bunch of modules so there is this common module called",
    "start": "1549460",
    "end": "1556750"
  },
  {
    "text": "shared which has the platter which has also platinum specific parts the GS and",
    "start": "1556750",
    "end": "1562660"
  },
  {
    "text": "the JVM specific part and there are also separate modules that contain the back-end specific and the front-end",
    "start": "1562660",
    "end": "1567880"
  },
  {
    "text": "specific code so if we look at the build of Gradle for the common module that you",
    "start": "1567880",
    "end": "1573760"
  },
  {
    "text": "see that it has a dependency on it has this common Gradle plugin",
    "start": "1573760",
    "end": "1579419"
  },
  {
    "text": "and it also reference is a bunch of common libraries which are basically the ones that I will just mentioned so there",
    "start": "1579419",
    "end": "1584429"
  },
  {
    "text": "a standard library they've got an XHTML serialization and cotton to test and if",
    "start": "1584429",
    "end": "1591839"
  },
  {
    "text": "you look at the bills or greater for a platform module then it also has like the stuff that you expect this Gradle",
    "start": "1591839",
    "end": "1597509"
  },
  {
    "text": "plugin applied the budget depends on Angela's JVM specific libraries including g-unit which of course is the",
    "start": "1597509",
    "end": "1603479"
  },
  {
    "text": "Java library and this expected by dependencies that links it to the shared project so what code will be actually",
    "start": "1603479",
    "end": "1611969"
  },
  {
    "text": "having this project so first of all we have here this very date class that I was showing in my slides so this is so",
    "start": "1611969",
    "end": "1618599"
  },
  {
    "text": "this is expected to be provided by the platform it is expected to have a construction it is expected to have a",
    "start": "1618599",
    "end": "1624059"
  },
  {
    "text": "bunch of methods and there are also a bunch of expected top-level functions like parsing and converting days to",
    "start": "1624059",
    "end": "1630899"
  },
  {
    "text": "strings and it has two actual implementations one for the JVM and one",
    "start": "1630899",
    "end": "1637109"
  },
  {
    "text": "for JavaScript and this is basically all the stuff that I have that I showed you on the slides so the actual",
    "start": "1637109",
    "end": "1642839"
  },
  {
    "text": "implementation for the JVM is provided is implemented using Java dot util dot calendar enjoy the text dot simple date",
    "start": "1642839",
    "end": "1649649"
  },
  {
    "text": "format and the one for Java Script is",
    "start": "1649649",
    "end": "1656039"
  },
  {
    "text": "implemented on top of the date class provided by the browser so the next",
    "start": "1656039",
    "end": "1661529"
  },
  {
    "text": "thing that I'm going to show is this message class so this is essentially the data model of our system so this is a",
    "start": "1661529",
    "end": "1666779"
  },
  {
    "text": "very trivial example so the data model is as simple as it can be so it just has a text author and date and once again",
    "start": "1666779",
    "end": "1673200"
  },
  {
    "text": "this is common code and also in the common code I have the function that I'm",
    "start": "1673200",
    "end": "1679320"
  },
  {
    "text": "using to serialize and deserialize date instances as the message instances so I'm have this to Jason and from jason",
    "start": "1679320",
    "end": "1686309"
  },
  {
    "text": "methods and they use the jason class from the Cotten's dot X dot serialization library in order to",
    "start": "1686309",
    "end": "1692959"
  },
  {
    "text": "essentially to convert instances to strings and to parse them from strings and I'm",
    "start": "1692959",
    "end": "1699599"
  },
  {
    "text": "also really registering custom serializer for the date class because the serialization framework does not do anything it does not know anything about",
    "start": "1699599",
    "end": "1706049"
  },
  {
    "text": "dates so I'm just specifying myself how I want them to be represented in JSON and the last father",
    "start": "1706049",
    "end": "1713430"
  },
  {
    "text": "I want to show here is this one this is how we actually render messages to HTML",
    "start": "1713430",
    "end": "1718830"
  },
  {
    "text": "so this uses the cotton X dot HTML library and I'm using this DSL so it's",
    "start": "1718830",
    "end": "1725190"
  },
  {
    "text": "very simple I'm ready I'm creating a div I'm putting up appending the text of the",
    "start": "1725190",
    "end": "1730500"
  },
  {
    "text": "message so this Plus this funny plus character essentially means append to the output it's likely overloaded unary",
    "start": "1730500",
    "end": "1737190"
  },
  {
    "text": "plus operator and I'm creating an italic tag that contains also some other content by the way here I'm referencing",
    "start": "1737190",
    "end": "1745130"
  },
  {
    "text": "once again I'm a reference a common function that has multiple expected implementations and if I do find usages",
    "start": "1745130",
    "end": "1753180"
  },
  {
    "text": "on that I will see that this function is",
    "start": "1753180",
    "end": "1758490"
  },
  {
    "text": "used both by the server and by the client so on the server when I just may",
    "start": "1758490",
    "end": "1765690"
  },
  {
    "text": "not just render the initial page I just generate five random messages and render them as part of the HTML page and on the",
    "start": "1765690",
    "end": "1775320"
  },
  {
    "text": "client I'm invoking the rest API to get",
    "start": "1775320",
    "end": "1781290"
  },
  {
    "text": "some more messages I deserialize the response and I append them to the Dom so",
    "start": "1781290",
    "end": "1788070"
  },
  {
    "text": "this is once again this is isomorphic rendering so I'm using exactly the same code on the server and on the client end if I had a larger application I could",
    "start": "1788070",
    "end": "1794640"
  },
  {
    "text": "render the entire UI of my application both on the server on and on the client using exactly the same code so a couple",
    "start": "1794640",
    "end": "1804270"
  },
  {
    "text": "other things that I wanted to show so of course the idea provides a bunch of assistance for dealing with this expect actual stuff so for example if I create",
    "start": "1804270",
    "end": "1811980"
  },
  {
    "text": "and expect function the ID highlights",
    "start": "1811980",
    "end": "1820020"
  },
  {
    "text": "that it does not I have not provided any actual implementations and it helpfully suggests me to create some so on the JVM",
    "start": "1820020",
    "end": "1826980"
  },
  {
    "text": "I will do system dot out just to make",
    "start": "1826980",
    "end": "1834570"
  },
  {
    "text": "sure that time on the JVM because you can just do println director on cotton and this works on any platform and on",
    "start": "1834570",
    "end": "1842910"
  },
  {
    "text": "the JavaScript I'm going to do console dot log and of",
    "start": "1842910",
    "end": "1852820"
  },
  {
    "text": "course the refactoring is take care of this as well so I can rename this too I can rename this this will update the",
    "start": "1852820",
    "end": "1860740"
  },
  {
    "text": "actual implementations I can add a parameter to it using the change signature refactoring and the actual",
    "start": "1860740",
    "end": "1874900"
  },
  {
    "text": "implementations will have been updated too so now they both have the string parameter Y and one other thing that I",
    "start": "1874900",
    "end": "1882250"
  },
  {
    "text": "wanted to show is running tests for the common code so even here in this shared module once again this is common code I have this date test class and you have",
    "start": "1882250",
    "end": "1889480"
  },
  {
    "text": "seen it on the size of basically so this is using the Scotland dot test framework and if I right click this if I select",
    "start": "1889480",
    "end": "1897520"
  },
  {
    "text": "the run option in the ID I will get actually two possibilities how I can run this I can either run this as a mocha test or I can run it as a g-unit test so",
    "start": "1897520",
    "end": "1905049"
  },
  {
    "text": "let's try mocha first so as you can see now he has started note for me and",
    "start": "1905049",
    "end": "1910919"
  },
  {
    "text": "started this more code Josue test framework and did a bunch of JavaScript is tough and in the result I get a",
    "start": "1910919",
    "end": "1917320"
  },
  {
    "text": "successful test now let me delete this run configuration I unfortunately have",
    "start": "1917320",
    "end": "1922750"
  },
  {
    "text": "to do this for the time being because of issues and now I'm going to run this",
    "start": "1922750",
    "end": "1931150"
  },
  {
    "text": "again but run this again run this again",
    "start": "1931150",
    "end": "1937179"
  },
  {
    "text": "and it runs on the g-unit the same test",
    "start": "1937179",
    "end": "1943410"
  },
  {
    "text": "so pretty cool right okay so that's multi-platform projects",
    "start": "1943410",
    "end": "1950890"
  },
  {
    "text": "basically so that's the that's what you can do to share your code and your",
    "start": "1950890",
    "end": "1956440"
  },
  {
    "text": "business logic between JavaScript and the JVM and one other thing and of",
    "start": "1956440",
    "end": "1963130"
  },
  {
    "text": "course if you looked at the picture that I was showing pre that I showed previously with the JavaScript JVM and",
    "start": "1963130",
    "end": "1968230"
  },
  {
    "text": "Android this is of course not all the tears of an application that you might want to build there is one other one",
    "start": "1968230",
    "end": "1975430"
  },
  {
    "text": "which is called iOS and the great news is that like whereas we announced very",
    "start": "1975430",
    "end": "1981250"
  },
  {
    "text": "recently so we we actually made the initial announcement on cotton con 2 weeks ago in San Francisco across the",
    "start": "1981250",
    "end": "1988540"
  },
  {
    "text": "native now supports development for iOS as well and so the way it works is that",
    "start": "1988540",
    "end": "1996400"
  },
  {
    "text": "we have actually built an LLVM based tool chain that takes cotton code and produces native binaries out of that so",
    "start": "1996400",
    "end": "2003780"
  },
  {
    "text": "so in order to build the iOS app out of that you still need to have Xcode installed which takes care of all the packaging signing and all the funky",
    "start": "2003780",
    "end": "2011520"
  },
  {
    "text": "stuff that you need to do to get rapid to App Store but at least for the",
    "start": "2011520",
    "end": "2016950"
  },
  {
    "text": "initial compilation process we are using basically the same tool chain that Apple does so we produce a fully native fully",
    "start": "2016950",
    "end": "2025230"
  },
  {
    "text": "normal iOS application no GC no JIT no",
    "start": "2025230",
    "end": "2030750"
  },
  {
    "text": "Dinah no JVM inside it so just basically a regular native application that is justice looks exactly like and one that",
    "start": "2030750",
    "end": "2037530"
  },
  {
    "text": "you can build with Swift and of course in this application you have all access",
    "start": "2037530",
    "end": "2043770"
  },
  {
    "text": "to the libraries available in the platform so you can access core libraries written in objective-c you can access just regular C libraries you can",
    "start": "2043770",
    "end": "2050398"
  },
  {
    "text": "access cotton libraries so just everything that everything that you need",
    "start": "2050399",
    "end": "2056070"
  },
  {
    "text": "is available for you and the way this works is that we have built a special",
    "start": "2056070",
    "end": "2061740"
  },
  {
    "text": "tool that generates got a metadata from C header files so essentially what you",
    "start": "2061740",
    "end": "2067530"
  },
  {
    "text": "do is you feed the header files for your library to this to it is based on the",
    "start": "2067530",
    "end": "2073169"
  },
  {
    "text": "sceneline front-end so it just like shall real c parsing so no regular expressions no like pet no just fuzzy",
    "start": "2073169",
    "end": "2079590"
  },
  {
    "text": "pet imagine like the reals it supports all sea types like in including that complicated ones like",
    "start": "2079590",
    "end": "2085270"
  },
  {
    "text": "callbacks to functions that you have to pass to AC function or structs basically",
    "start": "2085270",
    "end": "2090580"
  },
  {
    "text": "everything you need it supports Objective C types because that's what you need for Objective C Interop and it spits out a metadata file",
    "start": "2090580",
    "end": "2098350"
  },
  {
    "text": "with cotton-based basically what cotton needs to be able to call these functions to know how to call these functions from",
    "start": "2098350",
    "end": "2103480"
  },
  {
    "text": "cotton code and using these two we essentially generate headers for all of",
    "start": "2103480",
    "end": "2109600"
  },
  {
    "text": "the platform libraries so for example this is this is what the dependencies of our demo app look like so you see that",
    "start": "2109600",
    "end": "2115480"
  },
  {
    "text": "all the regular iOS frameworks are there's like app kit core data essentially everything these are",
    "start": "2115480",
    "end": "2121690"
  },
  {
    "text": "objective-c frames and you have full access to them from constant code and",
    "start": "2121690",
    "end": "2128680"
  },
  {
    "text": "this is just in a code example showing how such an axis looks like so this is a part of the code from our demo app that",
    "start": "2128680",
    "end": "2134410"
  },
  {
    "text": "shows the game center in on an iPhone so once again you don't need to be able to understand exactly what's happening here",
    "start": "2134410",
    "end": "2140230"
  },
  {
    "text": "oh I don't understand it myself but the key thing is that you have full access to the platform API is written in",
    "start": "2140230",
    "end": "2146890"
  },
  {
    "text": "objective-c so what about memory",
    "start": "2146890",
    "end": "2152830"
  },
  {
    "text": "management this is like one of the most common questions we get when talking about this stuff so for this time so I",
    "start": "2152830",
    "end": "2159760"
  },
  {
    "text": "answer to this is like very preliminary so this is still like version 0.4 and a lot of things are going to change before",
    "start": "2159760",
    "end": "2165880"
  },
  {
    "text": "the final release and one of them is the memory management so for now we have a reference counting plus cycle collector",
    "start": "2165880",
    "end": "2172260"
  },
  {
    "text": "the reference counting works rather efficiently because we don't support memory shared between threads so we can",
    "start": "2172260",
    "end": "2178930"
  },
  {
    "text": "we don't need to bother about atomically updating the reference counters it just is like there's no memory contention",
    "start": "2178930",
    "end": "2185080"
  },
  {
    "text": "involved when we do that but once again maybe we will end up with the tracing GC maybe we will end up with something",
    "start": "2185080",
    "end": "2190450"
  },
  {
    "text": "different maybe we will end up with different solutions on different platforms this is all still being designed and of course Casa native is",
    "start": "2190450",
    "end": "2199960"
  },
  {
    "text": "not just about iOS so we support the we support just as well Linux and Windows",
    "start": "2199960",
    "end": "2205720"
  },
  {
    "text": "and Mac and if you have been to been and that the other guys sorry forgot the",
    "start": "2205720",
    "end": "2211930"
  },
  {
    "text": "name talk yeah and rest yeah then Andreas's talked earlier today about webassembly we have",
    "start": "2211930",
    "end": "2219640"
  },
  {
    "text": "just announced the cotton can be compiled to webassembly as well and in the future we are going to explore",
    "start": "2219640",
    "end": "2225730"
  },
  {
    "text": "embedded platforms and to provide a complete tool chain for developing embedded applications using cotton",
    "start": "2225730",
    "end": "2232120"
  },
  {
    "text": "cotton native we already support like some parts required for it so we support like dinners runner maps for example but",
    "start": "2232120",
    "end": "2239080"
  },
  {
    "text": "there is much more work to do before we get to a complete solution as for the",
    "start": "2239080",
    "end": "2244420"
  },
  {
    "text": "tooling for cotton native we have recently announced the plugin for sea",
    "start": "2244420",
    "end": "2249520"
  },
  {
    "text": "lion which is our ID for c and c++ it has sent it is essentially a customized",
    "start": "2249520",
    "end": "2254710"
  },
  {
    "text": "version of the regular cotton plugin so it supports all the features like refactorings code inspections all of",
    "start": "2254710",
    "end": "2260470"
  },
  {
    "text": "that is there and its supports like platform specific debugger and the platform specific test run and I do not",
    "start": "2260470",
    "end": "2267010"
  },
  {
    "text": "have time for a complete demo button so I will just show you a couple of screenshots so this is native code under",
    "start": "2267010",
    "end": "2272110"
  },
  {
    "text": "a debugger you see the call stack you see the variables you can see even the",
    "start": "2272110",
    "end": "2277540"
  },
  {
    "text": "variable values directly in the debugger like even a regular Nintendo G and under",
    "start": "2277540",
    "end": "2284380"
  },
  {
    "text": "the hood this is powered by ll DB so you can also use a lot EB command line if you like that this works also for common",
    "start": "2284380",
    "end": "2289420"
  },
  {
    "text": "coordination code and this is just the test runner results so showing the",
    "start": "2289420",
    "end": "2294910"
  },
  {
    "text": "result of running some native tests use not the same content or test framework as I will shows previously so that's",
    "start": "2294910",
    "end": "2303160"
  },
  {
    "text": "what I wanted to talk about it about D so to summarize our goal is to allow you",
    "start": "2303160",
    "end": "2309220"
  },
  {
    "text": "to all right all parts of your application in the same language Android iOS back and front end if any other",
    "start": "2309220",
    "end": "2316000"
  },
  {
    "text": "platform comes up we will support that as well this basically anything we want to be we",
    "start": "2316000",
    "end": "2322870"
  },
  {
    "text": "want cousin to really be available anywhere and with full access to the all",
    "start": "2322870",
    "end": "2328750"
  },
  {
    "text": "the bests that each platform has to offer so platform specific API is platform specific like application",
    "start": "2328750",
    "end": "2334510"
  },
  {
    "text": "structure features we you will have full access to it and this means that we do",
    "start": "2334510",
    "end": "2339940"
  },
  {
    "text": "not do not want to abstract away the differences between every platform you will still have access to the full API",
    "start": "2339940",
    "end": "2346619"
  },
  {
    "text": "which platform when you run this and the and the shared code will only be the business logic of your application which",
    "start": "2346619",
    "end": "2352980"
  },
  {
    "text": "does not inherently depend on the platform and we have already released the solution for using the code for",
    "start": "2352980",
    "end": "2359069"
  },
  {
    "text": "between the JVM and JavaScript and native will plug into the same system soon so this is all being very actively",
    "start": "2359069",
    "end": "2365880"
  },
  {
    "text": "worked on so I'm just talking about the state of things as they are today so if",
    "start": "2365880",
    "end": "2372660"
  },
  {
    "text": "you want to learn more about coughing the official website is caught in that line across the name dot org there's a blog where we publish a lot of our",
    "start": "2372660",
    "end": "2378900"
  },
  {
    "text": "announcements and talk about the new cool stuff that we are building we have a slack with a very friendly community",
    "start": "2378900",
    "end": "2385109"
  },
  {
    "text": "so you can go and ask questions there and people from the team will are there to answer you and there's also a book",
    "start": "2385109",
    "end": "2391589"
  },
  {
    "text": "written by me and my colleague that basically gives you an introduction into a course in the cotton language it does",
    "start": "2391589",
    "end": "2397440"
  },
  {
    "text": "not talk about any of this stuff because this was all developed after the book came out but just as a just ways the way",
    "start": "2397440",
    "end": "2403589"
  },
  {
    "text": "to get started with cotton is just an excellent way to get to know the basics so thank you and let's get to procedure",
    "start": "2403589",
    "end": "2411390"
  },
  {
    "text": "questions [Applause]",
    "start": "2411390",
    "end": "2417010"
  },
  {
    "text": "[Music] yeah thanks a lot",
    "start": "2417010",
    "end": "2424070"
  },
  {
    "text": "we've got about 10 minutes and we got a lot of questions so let's start with a",
    "start": "2424070",
    "end": "2429140"
  },
  {
    "text": "very simple one what does Scotland stand for cotton is an island near st. Petersburg where the",
    "start": "2429140",
    "end": "2434900"
  },
  {
    "text": "Kronstadt city is located and so we just saw many languages named after islands like Java and Ceylon and decided that we",
    "start": "2434900",
    "end": "2440870"
  },
  {
    "text": "decided that okay we'll have a not an island of our own so why don't we name the language after it and Stockland as",
    "start": "2440870",
    "end": "2448100"
  },
  {
    "text": "an island yeah can you use dynamic types in the common",
    "start": "2448100",
    "end": "2453350"
  },
  {
    "text": "code no you cannot use dynamic types in the common code this is just a JavaScript feature like it's",
    "start": "2453350",
    "end": "2459200"
  },
  {
    "text": "theoretically possible to support it but we just don't have enough use cases for that could",
    "start": "2459200",
    "end": "2466070"
  },
  {
    "text": "Coughlin's GS be used to write server-side JavaScript code that runs on no GS yes you can use a cotton JS to run",
    "start": "2466070",
    "end": "2474680"
  },
  {
    "text": "write code that runs on a node.js but if you are writing in cotton any weighted then you might as well use a proper",
    "start": "2474680",
    "end": "2480110"
  },
  {
    "text": "runtime which is a junior does it",
    "start": "2480110",
    "end": "2491450"
  },
  {
    "text": "support maven instead of Gradle thank you mention nope I'm not sure so cotton has the whole supports maven",
    "start": "2491450",
    "end": "2498580"
  },
  {
    "text": "definitely specifically the multi platform projects are on only Gradle for",
    "start": "2498580",
    "end": "2504200"
  },
  {
    "text": "now but we will support me even later as well so there is no please no big difficulties just something that",
    "start": "2504200",
    "end": "2509840"
  },
  {
    "text": "we haven't done yet okay then a bit longer question your hello go to bear",
    "start": "2509840",
    "end": "2516380"
  },
  {
    "text": "example gives different behavior between JVM and Jas different print outputs how",
    "start": "2516380",
    "end": "2523190"
  },
  {
    "text": "do you how do we ensure that implementations of a common libraries",
    "start": "2523190",
    "end": "2528230"
  },
  {
    "text": "then stay identical do we write extension tests for that yeah excellent",
    "start": "2528230",
    "end": "2533960"
  },
  {
    "text": "adventure if you want to be here to be identical then yes you write tests in",
    "start": "2533960",
    "end": "2538970"
  },
  {
    "text": "many cases you actually do not want the behavior to be identical you want it to be appropriate to the platform that you",
    "start": "2538970",
    "end": "2544520"
  },
  {
    "text": "are running on but yet the common test facility exists exactly so that you can do exactly that right test verifying the",
    "start": "2544520",
    "end": "2550430"
  },
  {
    "text": "compliance of the to be two different implementations then something about the iOS stuff well",
    "start": "2550430",
    "end": "2558890"
  },
  {
    "text": "first of all a question that I had in mind you're only talking about objective-c",
    "start": "2558890",
    "end": "2564140"
  },
  {
    "text": "what about Swift libraries we at this time we do not yet support Swift Interop",
    "start": "2564140",
    "end": "2570500"
  },
  {
    "text": "we are working on that it will be as supported in the future but it's not there at this moment and then the question here was would it be possible",
    "start": "2570500",
    "end": "2576950"
  },
  {
    "text": "to write a library in Kotlin that could be used from Swift yes it's also something that we are working on right",
    "start": "2576950",
    "end": "2582890"
  },
  {
    "text": "now okay and the same more or less the same question whether there are any plans for C++ library compatibility with",
    "start": "2582890",
    "end": "2590420"
  },
  {
    "text": "Scotland native I so as far as I",
    "start": "2590420",
    "end": "2596720"
  },
  {
    "text": "understand there are some ABI differences so you can not directly call",
    "start": "2596720",
    "end": "2601880"
  },
  {
    "text": "a cotton library from C++ but I think that this it is something that can be",
    "start": "2601880",
    "end": "2606950"
  },
  {
    "text": "straightened out later so there is no principal the principal reason why this is not imported not possible this is something simply not done yet so this is",
    "start": "2606950",
    "end": "2614060"
  },
  {
    "text": "just once again this is all very much preview and actively developed yeah which would lead to the next question",
    "start": "2614060",
    "end": "2620630"
  },
  {
    "text": "it's a very strong story already but when would you expect the first real",
    "start": "2620630",
    "end": "2625670"
  },
  {
    "text": "applications that are developed and across way like you showed it to yeah",
    "start": "2625670",
    "end": "2631550"
  },
  {
    "text": "start to begin or to develop this is a really good question I would expect like",
    "start": "2631550",
    "end": "2637310"
  },
  {
    "text": "I don't know early next year maybe there is still quite a few missing pieces this",
    "start": "2637310",
    "end": "2642740"
  },
  {
    "text": "is a very rough experience as like if you get into diary and I did not show",
    "start": "2642740",
    "end": "2647750"
  },
  {
    "text": "any demos because this it's just difficult to find the narrow path where everything is working so but once again",
    "start": "2647750",
    "end": "2657350"
  },
  {
    "text": "this will improve very rapidly okay the other questions I think have been answered during the talk any questions",
    "start": "2657350",
    "end": "2665270"
  },
  {
    "text": "from the audience right now just raise your hand I come to you oh that's right",
    "start": "2665270",
    "end": "2673809"
  },
  {
    "text": "any dependence on the cotton version is it cotton 1.2 based or so the",
    "start": "2677160",
    "end": "2684300"
  },
  {
    "text": "multi-platform stuff is available in cotton 1.2 the native stuff kind of lives on itself so it has its potent",
    "start": "2684300",
    "end": "2690150"
  },
  {
    "text": "native has its own release cycle it's not yet plugged into the main it's like kind of a separate project but like",
    "start": "2690150",
    "end": "2696300"
  },
  {
    "text": "cotton it cotton native 0.4 includes cotton in 1.2 so you can have all the same features there basically any other",
    "start": "2696300",
    "end": "2704790"
  },
  {
    "text": "questions I'll be around at the exhibitor reception so you can just find",
    "start": "2704790",
    "end": "2711089"
  },
  {
    "text": "me and chat with me I can ask to just talk about anything costing related or JetBrains related if you just if you're",
    "start": "2711089",
    "end": "2716760"
  },
  {
    "text": "curious about started we are doing oh I would have one I just heard some that",
    "start": "2716760",
    "end": "2722099"
  },
  {
    "text": "the cotton native stuff is supported in sea lion yep will it also be possible to use it",
    "start": "2722099",
    "end": "2728460"
  },
  {
    "text": "in the Ultimate Edition maybe so this we had a lot of internal discussions on",
    "start": "2728460",
    "end": "2734400"
  },
  {
    "text": "that there is no final decision yet yeah would be great yeah okay thanks a lot",
    "start": "2734400",
    "end": "2744300"
  },
  {
    "text": "[Applause]",
    "start": "2744300",
    "end": "2749909"
  }
]