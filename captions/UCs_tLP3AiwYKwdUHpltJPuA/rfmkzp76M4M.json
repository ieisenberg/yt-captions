[
  {
    "text": "okie doke well thank you all for coming um",
    "start": "840",
    "end": "6140"
  },
  {
    "text": "I have a slide with Paul's birthday in it and I did not realize that that was today uh that really sort of took me by",
    "start": "6240",
    "end": "13440"
  },
  {
    "text": "surprising a little emotional right now um yeah so glad to be here and see all of",
    "start": "13440",
    "end": "19440"
  },
  {
    "text": "you um function interactive programming is something that uh it's been around for",
    "start": "19440",
    "end": "26039"
  },
  {
    "text": "quite a while now 20 years and then a few years of working up to it and",
    "start": "26039",
    "end": "32460"
  },
  {
    "text": "um for the last few years there have been the idea or something about the idea",
    "start": "32460",
    "end": "39059"
  },
  {
    "text": "has caught a lot of interest but I think most people who are talking about",
    "start": "39059",
    "end": "45000"
  },
  {
    "text": "functional active programming are really fundamentally missing what it's about and they're talking about something else usually some kind of operational Notions",
    "start": "45000",
    "end": "52200"
  },
  {
    "text": "and so I thought well that guy would come and tell my story of what functional active programming was from",
    "start": "52200",
    "end": "59879"
  },
  {
    "text": "the beginning and still is for me so my subtitle is how you could have invented functional reactive programming",
    "start": "59879",
    "end": "66000"
  },
  {
    "text": "and what I mean is that there's a particular mindset out of which it grew uh and and some other uh lovely things",
    "start": "66000",
    "end": "72900"
  },
  {
    "text": "have grown and I want to encourage you to uh to uh try on this mindset",
    "start": "72900",
    "end": "78180"
  },
  {
    "text": "so first of all what is functional reactive programming uh and this is what it's always been for me there's really",
    "start": "78180",
    "end": "84119"
  },
  {
    "text": "two things these are the two things that matter and if you follow these two principles uh I think you'll get",
    "start": "84119",
    "end": "91080"
  },
  {
    "text": "something in the neighborhood of of what I got 20 years ago and so here they are uh and and they're",
    "start": "91080",
    "end": "97740"
  },
  {
    "text": "one of the basic principles is domain independent and and so there's a",
    "start": "97740",
    "end": "103079"
  },
  {
    "text": "there's an undercurrent of my talk which which is to encourage you to think about designing programming languages",
    "start": "103079",
    "end": "108540"
  },
  {
    "text": "differently based on this uh this one domain independent notion and the second one is specific to functional reactive programming so the first one is is that",
    "start": "108540",
    "end": "115500"
  },
  {
    "text": "is uh is the foundation of having a precise and simple denotation and what a",
    "start": "115500",
    "end": "121439"
  },
  {
    "text": "denotation is I'll give you some examples it's just a mathematical model it's something that that says in a sort",
    "start": "121439",
    "end": "126840"
  },
  {
    "text": "of compositional recursive way uh what every element of the API means uh which",
    "start": "126840",
    "end": "133080"
  },
  {
    "text": "is separate from how it's implemented but informs how it's implemented of course so why does it matter to have a precise",
    "start": "133080",
    "end": "139620"
  },
  {
    "text": "simple denotation because we want elegance and rigor both I'll go into",
    "start": "139620",
    "end": "144900"
  },
  {
    "text": "more detail and the second principle is specific and this was really the one foundational idea this was the idea from",
    "start": "144900",
    "end": "151680"
  },
  {
    "text": "which it sprung which is continuous time and why continuous time matters I'll go into more detail but but kind of a a",
    "start": "151680",
    "end": "159200"
  },
  {
    "text": "capsule summary is that it's for naturalness and for composability okay so out of these principles come",
    "start": "159200",
    "end": "167640"
  },
  {
    "text": "um come a model that is deterministic and continuous and you call it concurrent I put concurrency in in uh",
    "start": "167640",
    "end": "174180"
  },
  {
    "text": "scare quotes because incarcerative usually has a kind of operational interpretation and what I mean is more like simultaneity like genuine",
    "start": "174180",
    "end": "180480"
  },
  {
    "text": "simultaneity uh and and continuous meaning you know at every moment in the",
    "start": "180480",
    "end": "186660"
  },
  {
    "text": "in the Continuum of time okay and it's deterministic which is really important because most concurrent",
    "start": "186660",
    "end": "193560"
  },
  {
    "text": "models are non-deterministic means they're very hard to reason about uh and they're terribly hard to debug because",
    "start": "193560",
    "end": "198780"
  },
  {
    "text": "when you look at them their behavior changes that's what's called a Heisenberg so and I want to warn you and this will",
    "start": "198780",
    "end": "205680"
  },
  {
    "text": "come up again in my talk that most systems that call themselves FRP so most so-called FRP systems these days have",
    "start": "205680",
    "end": "211680"
  },
  {
    "text": "neither of these two fundamental properties which which is heartbreaking for me personally uh because uh it was",
    "start": "211680",
    "end": "217560"
  },
  {
    "text": "something special that we could do in in the functional programming Community because we have kind of elegant mathematical roots and so even in kind",
    "start": "217560",
    "end": "225239"
  },
  {
    "text": "of functional programming circles people are often discarding these these lovely properties so",
    "start": "225239",
    "end": "231060"
  },
  {
    "text": "so again two fundamental principles precise simple denotation and continuous time that that's that's the heart of",
    "start": "231060",
    "end": "236640"
  },
  {
    "text": "what it's about so what is it not about just to emphasize in a way I've told you negatively what is not about what I'm",
    "start": "236640",
    "end": "242159"
  },
  {
    "text": "going to tell you now more explicitly so if you ever heard people talking about something they call FRP and they talk",
    "start": "242159",
    "end": "248040"
  },
  {
    "text": "about in terms of graphs they're missing the point that's not what it's about so FRP is not about graphs it's not about",
    "start": "248040",
    "end": "253920"
  },
  {
    "text": "updating this and propagating that it's certainly not about streams",
    "start": "253920",
    "end": "259799"
  },
  {
    "text": "and it's really not about doing and and this is a more General point for me functional programming is not about",
    "start": "259799",
    "end": "265740"
  },
  {
    "text": "doing it's about being imperative programming is about doing functional programming is about being",
    "start": "265740",
    "end": "271860"
  },
  {
    "text": "so uh it's not about streams why because it's continuous time it's not discrete",
    "start": "271860",
    "end": "276900"
  },
  {
    "text": "time streams are um are a discrete model it's a little sad that we use the word streams for",
    "start": "276900",
    "end": "282419"
  },
  {
    "text": "that because if you think about a stream I doubt you relate to it as being a a discrete sequence right it's a streets",
    "start": "282419",
    "end": "288479"
  },
  {
    "text": "it's water it's a flow and and that really is the heart but people in functional program use streams to mean something discrete",
    "start": "288479",
    "end": "294360"
  },
  {
    "text": "okay these other Notions yeah they may or may not come up in implementation but that's irrelevant to what it's about",
    "start": "294360",
    "end": "301139"
  },
  {
    "text": "to what functional record program is about okay so let me dive into these two uh these these two key principles",
    "start": "301139",
    "end": "307500"
  },
  {
    "text": "sure track the time here there we go all right so why does it matter that we",
    "start": "307500",
    "end": "312720"
  },
  {
    "text": "have a simple and precise denotation well there are a few reasons one is something that well",
    "start": "312720",
    "end": "319440"
  },
  {
    "text": "I don't know how popular it is anymore but it's something that's very important to me which is a clean separation between a specification and an",
    "start": "319440",
    "end": "324900"
  },
  {
    "text": "implementation okay so why does it matter to separate these two things right don't we want to",
    "start": "324900",
    "end": "330419"
  },
  {
    "text": "just jump in and code isn't that what computers and languages are for well when we blur a specification",
    "start": "330419",
    "end": "337199"
  },
  {
    "text": "implementation we no longer have the the kind of simple specification that tells us what it",
    "start": "337199",
    "end": "344160"
  },
  {
    "text": "means for the implementation to be correct right if the two were together if it just Implement some stuff is it correct well you could say it just",
    "start": "344160",
    "end": "350639"
  },
  {
    "text": "defines its own correctness but that's really not saying anything so I want to separate the two cleanly",
    "start": "350639",
    "end": "355680"
  },
  {
    "text": "that way the specification can be free of implementation artifacts free of complexities that show up in in say an",
    "start": "355680",
    "end": "363840"
  },
  {
    "text": "efficient implementation efficient implementation may be quite tricky but that but I want to to",
    "start": "363840",
    "end": "369660"
  },
  {
    "text": "insulate the specification the definition of what it means what it means to be correct and how to use it correctly and how to use it powerfully",
    "start": "369660",
    "end": "375539"
  },
  {
    "text": "honest insulate from the implementation details okay so why so that's why a",
    "start": "375539",
    "end": "383039"
  },
  {
    "text": "specification that's independent a denotation is a particular kind of specification that uh is my favorite",
    "start": "383039",
    "end": "389580"
  },
  {
    "text": "kind of specification and it's one that fits really well in the functional programming the functional programming",
    "start": "389580",
    "end": "394800"
  },
  {
    "text": "mindset so it's not really enough just to have a denotation I want it to be a good",
    "start": "394800",
    "end": "400440"
  },
  {
    "text": "denotation in particular I wanted to be precise and simple Simplicity is important so that we can",
    "start": "400440",
    "end": "407819"
  },
  {
    "text": "reason okay so that we can reach conclusions and precision is important so our",
    "start": "407819",
    "end": "413039"
  },
  {
    "text": "conclusions are valid so I want to be able to reason me as the",
    "start": "413039",
    "end": "419100"
  },
  {
    "text": "implementer as a definer and as the user as well I want to be able to to reason correctly",
    "start": "419100",
    "end": "426120"
  },
  {
    "text": "and practically so that's why we have SIMPLE and why we precise and then denotational style in",
    "start": "426120",
    "end": "431699"
  },
  {
    "text": "particular it's just a really great fit for the for the um the spirit and the style of functional programming",
    "start": "431699",
    "end": "437940"
  },
  {
    "text": "and then here's uh just a little bit different angle on it which is that when we're designing libraries",
    "start": "437940",
    "end": "443460"
  },
  {
    "text": "it's like an API we're designing a language in which to communicate about something",
    "start": "443460",
    "end": "448560"
  },
  {
    "text": "so since it's a it's about communication it really helps to understand what we're talking about",
    "start": "448560",
    "end": "453660"
  },
  {
    "text": "all right so we can talk there's words there's syntax but then there's what it means and then being really clear about",
    "start": "453660",
    "end": "459900"
  },
  {
    "text": "what it means so if I'm if I'm using somebody's Library I want to be really",
    "start": "459900",
    "end": "465180"
  },
  {
    "text": "clear about what it means so I want to understand it later so I can use it in a way that is uh that's correct and",
    "start": "465180",
    "end": "470759"
  },
  {
    "text": "dependable and predictable and if I'm designing uh this language it's API then",
    "start": "470759",
    "end": "476460"
  },
  {
    "text": "I particularly want a quite deep and thorough understanding of what is I'm talking about",
    "start": "476460",
    "end": "482659"
  },
  {
    "text": "okay so on to the second principle of continuous time why does continuous time matter",
    "start": "483000",
    "end": "489860"
  },
  {
    "text": "as I said this was really the idea that spark functional reactive programming and it's almost always discarded these",
    "start": "490680",
    "end": "498060"
  },
  {
    "text": "days and things that people call FRP but it was really it it came out of",
    "start": "498060",
    "end": "504240"
  },
  {
    "text": "recognizing and addressing flaws in the discrete model so",
    "start": "504240",
    "end": "510419"
  },
  {
    "text": "um surprisingly to me it's still a controversial idea that we want to have continuous time and and part of what",
    "start": "510419",
    "end": "517860"
  },
  {
    "text": "surprised me about it is that we've been through this in space we've been through this in space with with graphics with uh font rendering and",
    "start": "517860",
    "end": "525660"
  },
  {
    "text": "so on uh 20 30 years ago people did bitmap graphics and that's what the apis were like so bitmap Graphics were finite",
    "start": "525660",
    "end": "532620"
  },
  {
    "text": "and discrete all right um and so but then a scalable font",
    "start": "532620",
    "end": "539820"
  },
  {
    "text": "technology so I came in with PostScript I think popularized it and then other",
    "start": "539820",
    "end": "545940"
  },
  {
    "text": "Vector graphic systems and what did they do well they did resolution Independence whale and so another name for vector",
    "start": "545940",
    "end": "552959"
  },
  {
    "text": "graphics was scalable Graphics a resolution independent graphics and so it's really just the same idea FRP has",
    "start": "552959",
    "end": "560100"
  },
  {
    "text": "the same idea for time as for space so imagery lays out values over space",
    "start": "560100",
    "end": "565640"
  },
  {
    "text": "continuous infinite two-dimensional space functional active programming is the same idea but it lays it out in one",
    "start": "565640",
    "end": "571140"
  },
  {
    "text": "dimension it's Dimension that we relate to as time so and the benefits are the same",
    "start": "571140",
    "end": "576360"
  },
  {
    "text": "benefits that it grew from vector graphics so one is that we get to have we get to transform things very",
    "start": "576360",
    "end": "581820"
  },
  {
    "text": "naturally so we can describe uh in the in the you know domain of space we can describe nice little shapes and",
    "start": "581820",
    "end": "587580"
  },
  {
    "text": "convenient uh sizes and locations and so on and then we get to transform them transform them things like scale rotate",
    "start": "587580",
    "end": "593640"
  },
  {
    "text": "translate or or you know non-linear non-affine Transformations warps and",
    "start": "593640",
    "end": "598680"
  },
  {
    "text": "bins and twists and things like that so we get to to uh transform these",
    "start": "598680",
    "end": "605100"
  },
  {
    "text": "things in time in the case of FRP and have very simple semantics one can",
    "start": "605100",
    "end": "610260"
  },
  {
    "text": "define something discreetly and then talk about what happens when I want a warp time and we get into the same",
    "start": "610260",
    "end": "615600"
  },
  {
    "text": "complexities that you get into with Graphics which is if they have a bitmap graphics and want to do some kind of a uh scale it or or rotate it by sort of",
    "start": "615600",
    "end": "623640"
  },
  {
    "text": "non pi over two angles that sort of thing we get into this awkward bit about uh the the pixels don't line up exactly",
    "start": "623640",
    "end": "630540"
  },
  {
    "text": "the same thing happens in space I'm going to transform things in space if we if we discrete ties early and then we",
    "start": "630540",
    "end": "636060"
  },
  {
    "text": "transform them space through a say a scale or like a slow in slow out it's a very common thing that's done then the",
    "start": "636060",
    "end": "642540"
  },
  {
    "text": "temporal pixel so to speak the sample times don't line up we smooth and fill in all the gaps then",
    "start": "642540",
    "end": "649380"
  },
  {
    "text": "the semantics becomes quite simple and it's quite convenient okay so",
    "start": "649380",
    "end": "654540"
  },
  {
    "text": "um so as I mentioned one of the names for this this property is a resolution Independence and what it means is that we get not",
    "start": "654540",
    "end": "660899"
  },
  {
    "text": "only an easier specification because we don't have the the kind of details of when it's sampled we get a much more",
    "start": "660899",
    "end": "666120"
  },
  {
    "text": "flexible because more information is available another great benefit it's a little",
    "start": "666120",
    "end": "673380"
  },
  {
    "text": "clearer for time but it applies to space as well is integration differentiation so thanks to Newton and leibniz and you",
    "start": "673380",
    "end": "681060"
  },
  {
    "text": "know much work done since then and a little bit before then we know that we",
    "start": "681060",
    "end": "686100"
  },
  {
    "text": "can describe motion through space uh simply and naturally in terms of",
    "start": "686100",
    "end": "692760"
  },
  {
    "text": "derivatives in terms of rates of change and maybe it's a rate of change or a rate of change so we could have an acceleration maybe forces in there we",
    "start": "692760",
    "end": "698940"
  },
  {
    "text": "get into physics and so it's a very natural simple way to describe it and it",
    "start": "698940",
    "end": "703980"
  },
  {
    "text": "depends fundamentally on continuous time it doesn't make sense it's not meaningful with discrete",
    "start": "703980",
    "end": "710220"
  },
  {
    "text": "so we get to say things in a natural way and then we get to use very high quality solvers for some systems of differential",
    "start": "710220",
    "end": "717540"
  },
  {
    "text": "equations are just kind of straight integrals that kind of thing so we get Simplicity accuracy and efficiency",
    "start": "717540",
    "end": "724100"
  },
  {
    "text": "okay I think I've said most of these things oh yeah and then a very mundane point is in the supplies again in both",
    "start": "724260",
    "end": "730320"
  },
  {
    "text": "time and space if I have information coming in a discrete stream and I have other information coming into the street",
    "start": "730320",
    "end": "735540"
  },
  {
    "text": "stream and I want to join the two together I want to to show you something that evolves over time that's a function of both of them well if the two come in",
    "start": "735540",
    "end": "742380"
  },
  {
    "text": "at different rates again I have this awkward thing how do I match them up they don't match up all right if they",
    "start": "742380",
    "end": "747660"
  },
  {
    "text": "don't match up only because the discrete is there once we get rid of the discreteness they're both continua then",
    "start": "747660",
    "end": "752700"
  },
  {
    "text": "they match up all right so we can reconcile different inputs",
    "start": "752700",
    "end": "757980"
  },
  {
    "text": "okay and there's a general principle here which applies to uh all over the place",
    "start": "757980",
    "end": "764399"
  },
  {
    "text": "which is the approximations composed badly okay so what I'm so how I'm applying",
    "start": "764399",
    "end": "770639"
  },
  {
    "text": "this principle here is to say that that uh a stream of information where it",
    "start": "770639",
    "end": "775920"
  },
  {
    "text": "often comes from is is that information has been discarded right so if I take if I make a movie or if I move a mouse",
    "start": "775920",
    "end": "782820"
  },
  {
    "text": "there's going to be some digital Hardware in there it's going to temporally discretize so it's going to give me a subset of information I tiny",
    "start": "782820",
    "end": "789779"
  },
  {
    "text": "subset of the information right because it's discrete in the original was continuous",
    "start": "789779",
    "end": "795000"
  },
  {
    "text": "okay so so that discretion happens early and it thwarts compositionality because",
    "start": "795000",
    "end": "801360"
  },
  {
    "text": "if I pre-discretize and then I want to zoom in time say or warp in time all of",
    "start": "801360",
    "end": "807120"
  },
  {
    "text": "a sudden I will wish that I had discretized more finely or if I zoom the other way if I zoom out I wish that I",
    "start": "807120",
    "end": "813660"
  },
  {
    "text": "had discretized less finely because I'm wasting a lot of work okay it happens time happens in space",
    "start": "813660",
    "end": "819680"
  },
  {
    "text": "and this message is really the um to me the heart or one of the two hearts of",
    "start": "819680",
    "end": "824760"
  },
  {
    "text": "John Reynolds sorry John hughes's paper why functional programming matters so I highly recommend you read that paper you",
    "start": "824760",
    "end": "831000"
  },
  {
    "text": "all read it I'd recommend you reread this paper it's lovely and this paper really is about don't throw away",
    "start": "831000",
    "end": "836519"
  },
  {
    "text": "information early in order to do that we need to be able to express infinite sized information",
    "start": "836519",
    "end": "841940"
  },
  {
    "text": "and that's and that's a kind of prime motivation for non-strict what was sometimes called lazy functional",
    "start": "841940",
    "end": "847320"
  },
  {
    "text": "programming and it applies kind of in so more so so FRP is like this non-strict",
    "start": "847320",
    "end": "852959"
  },
  {
    "text": "we can have infinitely big values but more so because it's infinitely fine as well as infinitely large",
    "start": "852959",
    "end": "858420"
  },
  {
    "text": "so that's the idea all right Okay so",
    "start": "858420",
    "end": "864180"
  },
  {
    "text": "that's the sermon now uh getting into some uh some technical content",
    "start": "864180",
    "end": "870959"
  },
  {
    "text": "so uh functionality program is based on that there's uh the first step I take",
    "start": "870959",
    "end": "876360"
  },
  {
    "text": "into doing language design doing Library design is is to ask myself the question what is the central or the few Central",
    "start": "876360",
    "end": "883560"
  },
  {
    "text": "types of Interest all kinds of things am I going to be manipulating and then what do they mean",
    "start": "883560",
    "end": "890399"
  },
  {
    "text": "and what do they mean is how do I relate them to mathematical values simple well understood well-explored mathematical",
    "start": "890399",
    "end": "896699"
  },
  {
    "text": "values so in FRP the central type is something I call the behavior which is sort of a flow of values by",
    "start": "896699",
    "end": "903959"
  },
  {
    "text": "flow I mean really continuous like water flows air flows",
    "start": "903959",
    "end": "909600"
  },
  {
    "text": "okay so of course this is an intuition we want to make it precise when they",
    "start": "909600",
    "end": "914880"
  },
  {
    "text": "precise and keep it simple and so to me when I thought about it the simplest possible thing I could come up with for",
    "start": "914880",
    "end": "921120"
  },
  {
    "text": "values that evolve over continuous time is a function from time okay where time is real",
    "start": "921120",
    "end": "929639"
  },
  {
    "text": "it's real real isn't the real numbers",
    "start": "929639",
    "end": "935220"
  },
  {
    "text": "okay so this is really what it's about this one",
    "start": "935220",
    "end": "941160"
  },
  {
    "text": "statement so much flows from this and and much later I realized this was",
    "start": "941160",
    "end": "948240"
  },
  {
    "text": "only maybe seven years ago I realized that indeed most of the API and the",
    "start": "948240",
    "end": "954660"
  },
  {
    "text": "semantics really flow inevitably out of this one choice I'm going to give you hints and this talk and I'll talk more",
    "start": "954660",
    "end": "961019"
  },
  {
    "text": "about it tomorrow morning in the talk of more elegant specification for FRP I think",
    "start": "961019",
    "end": "966959"
  },
  {
    "text": "okay but I want to show you the original formulation this is the almost original formulation",
    "start": "966959",
    "end": "972720"
  },
  {
    "text": "okay so Things That Vary with time things that evolve over time Well here here's most of the API",
    "start": "972720",
    "end": "980480"
  },
  {
    "text": "so the first element is something I call time itself and now Behavior so behavior is a",
    "start": "980480",
    "end": "987779"
  },
  {
    "text": "parameterized type there we go so behavior of a so a is the type of values that are varying over",
    "start": "987779",
    "end": "994139"
  },
  {
    "text": "time so time is going to be a time valued Behavior okay so here T equals r",
    "start": "994139",
    "end": "1001100"
  },
  {
    "text": "the reels so R is the semantics of it so what is time well time is this",
    "start": "1001100",
    "end": "1008000"
  },
  {
    "text": "behavior that at time T has value T it's the simplest thing now it's also useful and may seem odd at",
    "start": "1008000",
    "end": "1016160"
  },
  {
    "text": "first but it's tremendously useful uh we want a way to take a constant value just a static value and promote it to a",
    "start": "1016160",
    "end": "1021740"
  },
  {
    "text": "behavior that is constant over time okay so that's called lift zero it's a funny",
    "start": "1021740",
    "end": "1027438"
  },
  {
    "text": "name you could call it const b or something like that I think I called it originally and another one is if I have a behavior",
    "start": "1027439",
    "end": "1033620"
  },
  {
    "text": "which is values of type A That Vary over time and I have a way of transforming an a to a b so a function from A to B then",
    "start": "1033620",
    "end": "1040400"
  },
  {
    "text": "I get a behavior that's B over time I'm going to show you on the next slide exactly what these things mean it's",
    "start": "1040400",
    "end": "1046579"
  },
  {
    "text": "quite simple and it'll almost certainly agree with your intuition or I may have two behaviors value to",
    "start": "1046579",
    "end": "1053299"
  },
  {
    "text": "type a evolving I just type B evolving and I have a way of taking an A and A B and giving a c okay so it combines those two behaviors",
    "start": "1053299",
    "end": "1059780"
  },
  {
    "text": "into a behavior of C's and of course there's a lift three and so on",
    "start": "1059780",
    "end": "1064940"
  },
  {
    "text": "and then I mentioned temporal transformability which is analogous is spatial transformability so in space",
    "start": "1064940",
    "end": "1070400"
  },
  {
    "text": "when we do uh scale translate rotate warp spins and so on similarly for time",
    "start": "1070400",
    "end": "1076100"
  },
  {
    "text": "I want to bend over time instead of space for work through time instead of space so if I have a behavior of a",
    "start": "1076100",
    "end": "1081140"
  },
  {
    "text": "values and then I have a way of warping time then I get another behavior of a values it's the same as the first but",
    "start": "1081140",
    "end": "1086960"
  },
  {
    "text": "time has shifted maybe it's moved maybe it's scaled maybe it's as I said slow in slow out popular",
    "start": "1086960",
    "end": "1094100"
  },
  {
    "text": "so there's a very simple way to specify this which we give a behavior of a so we",
    "start": "1094100",
    "end": "1099140"
  },
  {
    "text": "go time varying a and the time varying time and we get another a",
    "start": "1099140",
    "end": "1105620"
  },
  {
    "text": "and then we have a integration so given a behavior and initial time we get another Behavior so it's the integral",
    "start": "1105620",
    "end": "1111679"
  },
  {
    "text": "it's the continuous integral and there are a few others these are the key ones and then for convenience uh I",
    "start": "1111679",
    "end": "1118220"
  },
  {
    "text": "also overloaded all the numeric operations so I know we're not all haskellers in this room",
    "start": "1118220",
    "end": "1124460"
  },
  {
    "text": "so I will try to remember to uh to describe at least a little bit some of the Haskell Notions so Haskell has this",
    "start": "1124460",
    "end": "1130400"
  },
  {
    "text": "thing called type classes it's how we do overloading in a systematic usually law-abiding way ideally law abiding way",
    "start": "1130400",
    "end": "1137000"
  },
  {
    "text": "uh by laws I mean mathematical laws and so uh so I wanted to be able to say",
    "start": "1137000",
    "end": "1142100"
  },
  {
    "text": "a behavior plus a behavior Behavior times a behavior a negative behavior and so on and so I'm using the the",
    "start": "1142100",
    "end": "1147919"
  },
  {
    "text": "vocabulary of numeric operations on Haskell I mean so uh uh instantiate the",
    "start": "1147919",
    "end": "1153080"
  },
  {
    "text": "num type so I overload the num operations for behaviors and it turns out all of these operations",
    "start": "1153080",
    "end": "1158360"
  },
  {
    "text": "so uh so there's a bunch of numeric classes and Haskell all of them are overloaded for behaviors",
    "start": "1158360",
    "end": "1163820"
  },
  {
    "text": "and they all work in a very simple kind of regular principled way and then there's reactivity which I'll get to in a couple of slides",
    "start": "1163820",
    "end": "1171580"
  },
  {
    "text": "okay so this is the API now what does it mean so this is this is the this is the complete formal specification of all of",
    "start": "1172100",
    "end": "1179840"
  },
  {
    "text": "the vocabulary it's not about an implementation it's about what it means for any implementation to be correct",
    "start": "1179840",
    "end": "1186140"
  },
  {
    "text": "if you're thinking what the implantation hat or how to think about the model when you write programs using it",
    "start": "1186140",
    "end": "1193280"
  },
  {
    "text": "so I said Remember the meaning maps of behavior of a to a function from time to a so for instance the meaning of time is",
    "start": "1193280",
    "end": "1199280"
  },
  {
    "text": "the function that takes T and gives T so in Haskell notation so has connotation is a little bit different from Alonzo",
    "start": "1199280",
    "end": "1206360"
  },
  {
    "text": "Church's original Lambda calculus notation but it's it's really kind of the same idea uh Church use the dot we",
    "start": "1206360",
    "end": "1211940"
  },
  {
    "text": "use an arrow the lambdas and Haskell are actually written as a backslash this is just a",
    "start": "1211940",
    "end": "1217940"
  },
  {
    "text": "pretty printed version so the meaning of time is the function from T to T then you give a t and it",
    "start": "1217940",
    "end": "1223280"
  },
  {
    "text": "gives you back the same t uh the meaning of a lifted constant value is is the function of time T that",
    "start": "1223280",
    "end": "1230900"
  },
  {
    "text": "gives you a from every value of T so it's constant and so on",
    "start": "1230900",
    "end": "1236380"
  },
  {
    "text": "if we have if we have a behavior x's and we want to do this lift one function apply F moment-wise Moment by one moment",
    "start": "1236960",
    "end": "1244160"
  },
  {
    "text": "over the Continuum then what do we do the meaning of this of of a lifted behavior is well it's going to be a",
    "start": "1244160",
    "end": "1249740"
  },
  {
    "text": "function of T at time T it's going to sample the argument Behavior at T So mu",
    "start": "1249740",
    "end": "1255620"
  },
  {
    "text": "of X is T so that's the value of x's at T and then apply F to the result it's very simple",
    "start": "1255620",
    "end": "1262820"
  },
  {
    "text": "lift 2 Works similarly three and so on times transformation is also very simple we take time T feed it through the time",
    "start": "1262820",
    "end": "1270200"
  },
  {
    "text": "transform to get a different time and feed that through the behavior it's very simple",
    "start": "1270200",
    "end": "1276020"
  },
  {
    "text": "and then the numeric operations are all kind of a very regular form",
    "start": "1276020",
    "end": "1281419"
  },
  {
    "text": "it makes them easy to Define easy to reason about and it's reassuring as a library designer the Simplicity and",
    "start": "1281419",
    "end": "1287539"
  },
  {
    "text": "regularity so this is one way to write it now I'm",
    "start": "1287539",
    "end": "1293179"
  },
  {
    "text": "going to do a little bit of refactoring right a little more pretty way okay so these two are exactly equivalent",
    "start": "1293179",
    "end": "1300880"
  },
  {
    "text": "so Lambda TT is also called the identity uh Lambda ta it's also called const a",
    "start": "1301580",
    "end": "1307159"
  },
  {
    "text": "and so on so why did I do this",
    "start": "1307159",
    "end": "1313179"
  },
  {
    "text": "two reasons one it's just kind of a personal Kink it's just like it's pretty I you know I enjoy it but another is a",
    "start": "1313940",
    "end": "1321200"
  },
  {
    "text": "deeper more pragmatic reason which is that often rewriting things in point free form or things in terms of of uh",
    "start": "1321200",
    "end": "1328760"
  },
  {
    "text": "General idioms give me insight and this one is already pointing to a Lovelier",
    "start": "1328760",
    "end": "1333799"
  },
  {
    "text": "way to talk about the semantics of FRP so that's just a little bit of a tease I'll get into that",
    "start": "1333799",
    "end": "1339620"
  },
  {
    "text": "so is it just a re-specification of semantics in a way that is a little prettier to me and and suggestive of",
    "start": "1339620",
    "end": "1345440"
  },
  {
    "text": "something else so that's behaviors but I wanted to have behaviors that react to things",
    "start": "1345440",
    "end": "1350600"
  },
  {
    "text": "particularly to to the user and also to each other to uh to events that come in from the",
    "start": "1350600",
    "end": "1357200"
  },
  {
    "text": "external real world as as real as this world is uh but also uh synthetic events",
    "start": "1357200",
    "end": "1363860"
  },
  {
    "text": "events that come out of uh other behaviors going on so there was a second type in FRP which",
    "start": "1363860",
    "end": "1369679"
  },
  {
    "text": "is events and and an event is something that has multiple occurrences it's a little confusing word I don't think I",
    "start": "1369679",
    "end": "1375799"
  },
  {
    "text": "ever really found a word that's that I liked uh that that was so clear that it was a multiple occurrence thing and the",
    "start": "1375799",
    "end": "1381320"
  },
  {
    "text": "Very original uh specification that was single occurrence so the meaning of an event so event is",
    "start": "1381320",
    "end": "1388159"
  },
  {
    "text": "also parameterized by time and the idea of is an a valued event is a bunch of values of type A Each of which is tagged",
    "start": "1388159",
    "end": "1394100"
  },
  {
    "text": "with the time so it's timed occurrences",
    "start": "1394100",
    "end": "1399380"
  },
  {
    "text": "and so here's a simple uh semantic model which is uh this is again hash contagion it's it's a list of Time Value pairs",
    "start": "1399380",
    "end": "1405980"
  },
  {
    "text": "where the times are monotonically non-decreasing so they could be the same you can have two that are exactly the same value that often gets discarded as",
    "start": "1405980",
    "end": "1413059"
  },
  {
    "text": "well uh which puzzles because it's quite useful to have multiple simultaneous occurrences",
    "start": "1413059",
    "end": "1418700"
  },
  {
    "text": "and then again what's a vocabulary for talking about events in a compositional way so an event isn't just something",
    "start": "1418700",
    "end": "1424640"
  },
  {
    "text": "like a window system gives me and it's got some artificial name which I kind of try to keep track of and so on now events really have simple denotation and",
    "start": "1424640",
    "end": "1430880"
  },
  {
    "text": "they have a compositional vocabulary so one event is is what I'm calling here never just the event that never happens",
    "start": "1430880",
    "end": "1438320"
  },
  {
    "text": "right you can imagine what its denotation is it's the empty list",
    "start": "1438320",
    "end": "1443419"
  },
  {
    "text": "this has no occurrences another one is an event that occurs once at time t and has value a that's a Singleton list",
    "start": "1443419",
    "end": "1451220"
  },
  {
    "text": "now if we have two events right each is producing values we can merge them together into a single event",
    "start": "1451220",
    "end": "1458000"
  },
  {
    "text": "so what does that do what does it mean it means that the time value pairs are interleaved they're not interleaved in",
    "start": "1458000",
    "end": "1464299"
  },
  {
    "text": "like the first of the first and the first the second the second of the first and second the second they're going to leave temporarily",
    "start": "1464299",
    "end": "1469520"
  },
  {
    "text": "okay because you have to maintain this constraint non-decreasing times",
    "start": "1469520",
    "end": "1474640"
  },
  {
    "text": "and then the next operation is uh if I have an event that generates values of type A and I have a way of massaging A's",
    "start": "1475159",
    "end": "1481340"
  },
  {
    "text": "into B's then you can guess we can get an event of type B and then there was this one that's",
    "start": "1481340",
    "end": "1488120"
  },
  {
    "text": "predicate which is completely synthetic if I have a Time varying Boolean value I would like to know the times at which",
    "start": "1488120",
    "end": "1494600"
  },
  {
    "text": "that Boolean changes from false to true okay that's just predicate",
    "start": "1494600",
    "end": "1500240"
  },
  {
    "text": "and then another useful operation was snapshot given a Time varying a and an",
    "start": "1500240",
    "end": "1505580"
  },
  {
    "text": "event that's remember discrete so behaviors are continuous events are discrete so I forgot a flow of A's and a",
    "start": "1505580",
    "end": "1511700"
  },
  {
    "text": "choppy B's I can get choppy of A and B's so what does it mean it just samples the",
    "start": "1511700",
    "end": "1516980"
  },
  {
    "text": "a every time we get a B samples of a at that exact moment now I want to just emphasize what I mean",
    "start": "1516980",
    "end": "1523700"
  },
  {
    "text": "by at that moment has nothing to do with a computer okay has nothing to do with execution",
    "start": "1523700",
    "end": "1530860"
  },
  {
    "text": "so most of the time when people program with what they call time",
    "start": "1530860",
    "end": "1536140"
  },
  {
    "text": "they are doing something some idea of now of course what does now mean well it means something different every time you",
    "start": "1536140",
    "end": "1542360"
  },
  {
    "text": "run it right because that's that's the property of now it changes um uh so so this notion of now this notion",
    "start": "1542360",
    "end": "1550820"
  },
  {
    "text": "of when is independent of execution it's entirely defined by the semantics",
    "start": "1550820",
    "end": "1556700"
  },
  {
    "text": "so it's not like when we notice that a b occurred it's when it exactly when it's specified to occur",
    "start": "1556700",
    "end": "1563120"
  },
  {
    "text": "okay so now what do behaviors and events have to do with each other I've given you two algebras that are not related",
    "start": "1563120",
    "end": "1569419"
  },
  {
    "text": "neither talks about the other oh this one the snapshot talked about a little bit but they're related in a deeper way",
    "start": "1569419",
    "end": "1577039"
  },
  {
    "text": "so uh the idea I came up with for reactive behaviors is that we're going to have a behavior",
    "start": "1577039",
    "end": "1582980"
  },
  {
    "text": "and we're gonna have an event that will give me a stream because it is discrete remember a stream of new behaviors every",
    "start": "1582980",
    "end": "1589400"
  },
  {
    "text": "time that event occurs I switch to that new behavior that that that is the occurrence",
    "start": "1589400",
    "end": "1594559"
  },
  {
    "text": "so each occurrence of the event gives me a time and a new Behavior so given initial behavior and a stream",
    "start": "1594559",
    "end": "1601279"
  },
  {
    "text": "of new behaviors Each of which has within its time will Stitch all those little pieces together",
    "start": "1601279",
    "end": "1607760"
  },
  {
    "text": "and there could be infinitely many of them Anna has this semantics is a little more",
    "start": "1607760",
    "end": "1614419"
  },
  {
    "text": "complicated than the previous ones but it's really not very complicated this is all there is to it this isn't",
    "start": "1614419",
    "end": "1619880"
  },
  {
    "text": "you know an abbreviation or something like that so I'm not asking you to absorb all this the idea is you can look",
    "start": "1619880",
    "end": "1626179"
  },
  {
    "text": "around there's this before function that takes uh the meaning of an event and it",
    "start": "1626179",
    "end": "1631880"
  },
  {
    "text": "it pulls out just the occurrences that happen before a given time that time is going to be the time at which the event is sampled",
    "start": "1631880",
    "end": "1638120"
  },
  {
    "text": "so here we go we're going to sample at time T we look at all the occurrences before T that's exactly what this is",
    "start": "1638120",
    "end": "1644299"
  },
  {
    "text": "make a list of them and ask for the last one so it's the most recently occurring event if none of them happen then we're",
    "start": "1644299",
    "end": "1650059"
  },
  {
    "text": "going to use the initial Behavior segment and there's this point here which is",
    "start": "1650059",
    "end": "1657559"
  },
  {
    "text": "actually very important there's a question of when I sample a reactive behavior and I",
    "start": "1657559",
    "end": "1663320"
  },
  {
    "text": "sample it right at an event occurrence do I get the old Behavior or the new",
    "start": "1663320",
    "end": "1669080"
  },
  {
    "text": "Behavior that's an interesting question it's a question that we can express very clearly this is really important so we",
    "start": "1669080",
    "end": "1675020"
  },
  {
    "text": "understand there's a question I understand what the question is and then explore it I found that the right choice",
    "start": "1675020",
    "end": "1680720"
  },
  {
    "text": "was always to use the old value not the new value what does that give it makes it makes self and mutually reactive",
    "start": "1680720",
    "end": "1688580"
  },
  {
    "text": "behaviors well defined at these moments and it's quite similar what happens in",
    "start": "1688580",
    "end": "1694220"
  },
  {
    "text": "systems of differential equations so",
    "start": "1694220",
    "end": "1700039"
  },
  {
    "text": "that's kind of the classic original FRP oh great we're doing we're doing well on",
    "start": "1700039",
    "end": "1705200"
  },
  {
    "text": "time um my goal here is to leave plenty of time for questions interaction so I I",
    "start": "1705200",
    "end": "1712640"
  },
  {
    "text": "hope you are uh I hope you're you're hanging on to questions that come to mind so now I want to give a teaser of a",
    "start": "1712640",
    "end": "1720380"
  },
  {
    "text": "Lovelier more elegant more compelling to me anyway way of describing the uh the",
    "start": "1720380",
    "end": "1726020"
  },
  {
    "text": "semantics of FRP and and this one emerged for me uh in 2008 or nine and as",
    "start": "1726020",
    "end": "1732440"
  },
  {
    "text": "a teaser I'm giving a talk tomorrow call them well call this and I'll go into more detail",
    "start": "1732440",
    "end": "1738200"
  },
  {
    "text": "all right so think about the uh so I gave you an API",
    "start": "1738200",
    "end": "1744559"
  },
  {
    "text": "for behaviors and events and a couple of uh meth a couple of operations that relate the two",
    "start": "1744559",
    "end": "1749600"
  },
  {
    "text": "and they were ones that I that I you know thought about it what kinds of operations how can we build up these uh",
    "start": "1749600",
    "end": "1755600"
  },
  {
    "text": "time varying values but in retrospect some of these operations",
    "start": "1755600",
    "end": "1761799"
  },
  {
    "text": "some of these operations correspond to well-known uh general purpose operations so General algebraic operations and",
    "start": "1762380",
    "end": "1768559"
  },
  {
    "text": "those operations in Haskell show up in the form of what we call our standard type classes so let's go again as this",
    "start": "1768559",
    "end": "1774799"
  },
  {
    "text": "notion of type classes how we do overloading but it's not sort of it's kind of ad hoc overloading but they come",
    "start": "1774799",
    "end": "1781460"
  },
  {
    "text": "with laws so it's as Hawk it's as as ad hoc as uh abstract algebra and",
    "start": "1781460",
    "end": "1787700"
  },
  {
    "text": "Mathematics is in other words it's quite principled so",
    "start": "1787700",
    "end": "1793159"
  },
  {
    "text": "um I showed you this operation I call it lift one which is if you have a behavior",
    "start": "1793159",
    "end": "1798500"
  },
  {
    "text": "a and you want a behavior of B and you have a function from A to B right this lift one gives it to you well there's",
    "start": "1798500",
    "end": "1803659"
  },
  {
    "text": "this class called functor in Haskell and it's not just a Haskell thing it's a mathematics thing",
    "start": "1803659",
    "end": "1809240"
  },
  {
    "text": "and it also has this operation that given uh F of a and a function from A to B I can get an F of B okay",
    "start": "1809240",
    "end": "1816020"
  },
  {
    "text": "so why didn't I call this thing uh fmap which is the the name uh because I",
    "start": "1816020",
    "end": "1821779"
  },
  {
    "text": "didn't know about at the time I think is the answer uh but in retrospect and then left two I",
    "start": "1821779",
    "end": "1827600"
  },
  {
    "text": "call it actually comes from another well-known type class which is applicative and all the lift a ends are",
    "start": "1827600",
    "end": "1834020"
  },
  {
    "text": "definable and then there's this monoid operation uh and of course the the null classes I",
    "start": "1834020",
    "end": "1840500"
  },
  {
    "text": "already had monoid is is a simple algebraic abstraction so you have an identity",
    "start": "1840500",
    "end": "1845840"
  },
  {
    "text": "element and you have an associative operation so there are three laws one about uh so two about a",
    "start": "1845840",
    "end": "1851720"
  },
  {
    "text": "two about the identity one about associativity so these three classes replace a subset of the kind of ad hoc",
    "start": "1851720",
    "end": "1858740"
  },
  {
    "text": "vocabulary uh for behaviors and then events remember I talked about merging two",
    "start": "1858740",
    "end": "1864020"
  },
  {
    "text": "events right so that operation has an identity which is never the event that never happens if",
    "start": "1864020",
    "end": "1869480"
  },
  {
    "text": "you emerge never with a event you get the event it's a right and left identity and then operations associative I don't",
    "start": "1869480",
    "end": "1875899"
  },
  {
    "text": "dissociative well you look at the semantics and go through proof an inductive proof",
    "start": "1875899",
    "end": "1881240"
  },
  {
    "text": "okay so instead of this special purpose uh never and this uh merging operation I",
    "start": "1881240",
    "end": "1887659"
  },
  {
    "text": "can just say that it's a monoid and we'll use standard names which a hash call called memte and muppin which are",
    "start": "1887659",
    "end": "1894679"
  },
  {
    "text": "really ugly names I apologize for um and then there was that other mapping",
    "start": "1894679",
    "end": "1900559"
  },
  {
    "text": "operation on events as well so you can take this vocabulary that was kind of",
    "start": "1900559",
    "end": "1905600"
  },
  {
    "text": "invented for FRP and replace it with a standard vocabulary now now why would you want to do that",
    "start": "1905600",
    "end": "1911659"
  },
  {
    "text": "I think uh for me partly the motivation is aesthetic but Aesthetics often turn",
    "start": "1911659",
    "end": "1917659"
  },
  {
    "text": "out to be quite practical and some of the Practical benefits are well we have this big we have an",
    "start": "1917659",
    "end": "1924740"
  },
  {
    "text": "ecosystem already we meaning the Haskell Community but also the last few hundred years of mathematics",
    "start": "1924740",
    "end": "1930919"
  },
  {
    "text": "and there's a whole kind of context and that we walk into which is we know some",
    "start": "1930919",
    "end": "1936080"
  },
  {
    "text": "things about monoids about functors about applicatives and so on we know what laws apply we've proved some useful",
    "start": "1936080",
    "end": "1942980"
  },
  {
    "text": "properties for all monoids all functors all applicatives on Mona and that sort of thing so we get to leverage this work",
    "start": "1942980",
    "end": "1949760"
  },
  {
    "text": "so in reasoning we get to use mathematics but also just in learning",
    "start": "1949760",
    "end": "1955100"
  },
  {
    "text": "right if you sort of if you've if you've looked at a few functors and you find out behavioral functor you already know",
    "start": "1955100",
    "end": "1960980"
  },
  {
    "text": "what it is you know some things that are true about it and and then there's another there's another",
    "start": "1960980",
    "end": "1967220"
  },
  {
    "text": "property which was surprising to me at first and it's quite powerful which is that we can get specifications for free",
    "start": "1967220",
    "end": "1974240"
  },
  {
    "text": "so I gave you the semantics of these operations so and what I'm saying here is not only can we replace the sort of",
    "start": "1974240",
    "end": "1981500"
  },
  {
    "text": "ad hoc names for these operations but we can but we can replace their specifications there's an inevitable",
    "start": "1981500",
    "end": "1988100"
  },
  {
    "text": "specification whenever you have a functor mono you click it at monad",
    "start": "1988100",
    "end": "1993559"
  },
  {
    "text": "whatever and it has a denotational model there's an inevitable specification so that means the the uh what the domain",
    "start": "1993559",
    "end": "2000820"
  },
  {
    "text": "specific part of the of the API shrink and the domain specific part of the of",
    "start": "2000820",
    "end": "2006580"
  },
  {
    "text": "the specification shrink so it means that it means that we get to",
    "start": "2006580",
    "end": "2011620"
  },
  {
    "text": "invent much less and to me that's always a good thing all right so here's a little teaser",
    "start": "2011620",
    "end": "2017919"
  },
  {
    "text": "about specifications for free I'm going to go more into this uh tomorrow morning and then more tomorrow afternoon",
    "start": "2017919",
    "end": "2024940"
  },
  {
    "text": "so one way to say this uh the the principle here is that an instance's",
    "start": "2024940",
    "end": "2030100"
  },
  {
    "text": "meaning follows the meanings instance so everybody who's read drafted my paper",
    "start": "2030100",
    "end": "2036039"
  },
  {
    "text": "that didn't comment on and said I don't understand what you're talking about what are you getting at here um so let me try and describe this for",
    "start": "2036039",
    "end": "2042460"
  },
  {
    "text": "you so take behaviors behavior is this abstract type right and I'm saying that",
    "start": "2042460",
    "end": "2047799"
  },
  {
    "text": "it also has instances of some standard uh abstractions these standard type classes",
    "start": "2047799",
    "end": "2053020"
  },
  {
    "text": "so um so functor for instance we have fmap on behaviors so the the instance is",
    "start": "2053020",
    "end": "2059800"
  },
  {
    "text": "whatever I write down for what does fmap mean on behaviors and what I'm saying is that the once I write that down the",
    "start": "2059800",
    "end": "2065020"
  },
  {
    "text": "meaning of fmap okay is going to be fmap on the meaning okay the meaning of f map is f-map of",
    "start": "2065020",
    "end": "2072040"
  },
  {
    "text": "the meaning so for monoi the meaning of mapend is the mapend of the meanings",
    "start": "2072040",
    "end": "2078820"
  },
  {
    "text": "okay now I'm I'm making that clear right here so the meaning of fmap is fmap on the",
    "start": "2078820",
    "end": "2085060"
  },
  {
    "text": "meanings okay here we go the meaning of my pen is an append of the meanings",
    "start": "2085060",
    "end": "2092020"
  },
  {
    "text": "so here's functor here's applicative here's monoid there's also one for Mona and there's also foldable traversal all",
    "start": "2092020",
    "end": "2098320"
  },
  {
    "text": "of the type classes have these structure preserving forms there's a word from mathematics called homomorphism",
    "start": "2098320",
    "end": "2105760"
  },
  {
    "text": "okay you don't have to think anything more about that word these are examples of homomorphisms",
    "start": "2105760",
    "end": "2112300"
  },
  {
    "text": "okay now it's surprised and delighted me when I discovered that I could not only reformulate FRP",
    "start": "2112300",
    "end": "2119440"
  },
  {
    "text": "much of FRP in terms of standard vocabulary but then I discovered that I could reformulate its semantics in terms",
    "start": "2119440",
    "end": "2125200"
  },
  {
    "text": "of this of the standard semantics uh I could reform the semantics of uh FRP in",
    "start": "2125200",
    "end": "2133060"
  },
  {
    "text": "terms of uh the the sorry the methods on FRP uh could relate them to the methods",
    "start": "2133060",
    "end": "2139780"
  },
  {
    "text": "on the the semantics trying to say here well surprising to lie to me was that I got exactly the same denotation as the",
    "start": "2139780",
    "end": "2146140"
  },
  {
    "text": "original so it was a it was a lovely or more elegant more compelling way to say exactly what I had said 20 years ago",
    "start": "2146140",
    "end": "2154480"
  },
  {
    "text": "okay so that was a wonderful confirmation and it's really important to me this is",
    "start": "2154480",
    "end": "2160540"
  },
  {
    "text": "a domain independent principles because it means we can reuse them in many different libraries so every time I",
    "start": "2160540",
    "end": "2165940"
  },
  {
    "text": "design a library I think about these principles and I try to use them and then a wonderful result is that the",
    "start": "2165940",
    "end": "2172599"
  },
  {
    "text": "laws so every class comes with laws the laws must hold you don't have to prove them they always hold the views as",
    "start": "2172599",
    "end": "2179140"
  },
  {
    "text": "methodology as a methodology I call denotational design",
    "start": "2179140",
    "end": "2184260"
  },
  {
    "text": "okay so so that's the essence of FRP now I want",
    "start": "2184480",
    "end": "2190720"
  },
  {
    "text": "to give you some description of the origins of FRP",
    "start": "2190720",
    "end": "2196140"
  },
  {
    "text": "so I was a grad student at Carnegie Mellon I showed up in 1983 and I went to",
    "start": "2196180",
    "end": "2201820"
  },
  {
    "text": "Carnegie Mellon to do computer Graphics that's what I really wanted to do they had some uh some people doing Graphics",
    "start": "2201820",
    "end": "2207640"
  },
  {
    "text": "there and some cool looking work appearing in journals what I didn't ask is are you folks still going to be here next year",
    "start": "2207640",
    "end": "2213640"
  },
  {
    "text": "and if I had asked I would have found the answer is no so I went for graphics when I showed up the graphic folks",
    "start": "2213640",
    "end": "2219160"
  },
  {
    "text": "disappeared so I looked around for other things to do and I found a group that was doing program transformation automated there",
    "start": "2219160",
    "end": "2226119"
  },
  {
    "text": "improving proof assistance uh functional programming and type theory that kind of stuff and I hadn't had some exposure I'd",
    "start": "2226119",
    "end": "2232240"
  },
  {
    "text": "done programming lisp I knew that I enjoyed functional programming but I didn't really have a lot of exposure to type Theory",
    "start": "2232240",
    "end": "2239320"
  },
  {
    "text": "so that's what I stumbled into and then in particular I took a class from Stephen Brooks in denotational semantics",
    "start": "2239320",
    "end": "2245800"
  },
  {
    "text": "and we used Joe stoy's classic textbook and it lit me up it just it described uh",
    "start": "2245800",
    "end": "2252940"
  },
  {
    "text": "it was about straight she's work stretchy and Scott's work in giving meanings to programming",
    "start": "2252940",
    "end": "2260079"
  },
  {
    "text": "languages so people could understand uh in a kind of non-operational and a",
    "start": "2260079",
    "end": "2265480"
  },
  {
    "text": "mathematical elegant way what programming languages mean and it fit how I thought",
    "start": "2265480",
    "end": "2271839"
  },
  {
    "text": "so so uh so then much later at simeo I was nearing completion or hoping and",
    "start": "2271839",
    "end": "2277540"
  },
  {
    "text": "praying that I was nearing completion and a fell in him caviaria who was a",
    "start": "2277540",
    "end": "2283060"
  },
  {
    "text": "student of Richard Byrd Oxford came to visit and kavi's talk was called functional",
    "start": "2283060",
    "end": "2290440"
  },
  {
    "text": "animation and holy crap I had come to grad school to do computer graphics and then disappointedly didn't and worked on",
    "start": "2290440",
    "end": "2297099"
  },
  {
    "text": "functional programming related topics and here coffee came I was talking about functional animation and and he had this wonderful elegant",
    "start": "2297099",
    "end": "2304540"
  },
  {
    "text": "model that was based on streams of pictures so in animation is a stream of pictures oh that's very nice and he uses",
    "start": "2304540",
    "end": "2311140"
  },
  {
    "text": "a lazy language it was a predecessor of Haskell called Miranda",
    "start": "2311140",
    "end": "2316540"
  },
  {
    "text": "uh and it was elegant mostly now",
    "start": "2316540",
    "end": "2322900"
  },
  {
    "text": "John Reynolds was in the room John Reynolds uh who died a few years ago was a brilliant wonderful",
    "start": "2322900",
    "end": "2328740"
  },
  {
    "text": "Professor who who really saw to the uh to the core of",
    "start": "2328740",
    "end": "2335400"
  },
  {
    "text": "some issues this was kind of his thing and he made it quite insightful remark",
    "start": "2335400",
    "end": "2341500"
  },
  {
    "text": "uh and what he noticed was that in coffee's talk it all went kind of smoothly until kavi wanted to do",
    "start": "2341500",
    "end": "2346839"
  },
  {
    "text": "something with time I'm coming on and to do some messing around with time and then the streams thing was awkward he",
    "start": "2346839",
    "end": "2352540"
  },
  {
    "text": "had to do explicit interpolation and of course tribulation is just a guess right well if it wasn't linear or",
    "start": "2352540",
    "end": "2359079"
  },
  {
    "text": "it wasn't it wasn't cubic or something like that I was just sort of inventing information and so this John said",
    "start": "2359079",
    "end": "2364300"
  },
  {
    "text": "something like the following he said you know you can think of streams so your basic model is is uh streams of pictures",
    "start": "2364300",
    "end": "2370660"
  },
  {
    "text": "you can think of streams as functions from the naturals hmm",
    "start": "2370660",
    "end": "2376200"
  },
  {
    "text": "and then he said have you thought about functions from the reels instead if you did that maybe it would take care",
    "start": "2376240",
    "end": "2383140"
  },
  {
    "text": "of some of this awkwardness you have with interpolation so this was John Brown's remark",
    "start": "2383140",
    "end": "2389619"
  },
  {
    "text": "and uh I knew this was a brilliant wonderful idea and I knew I must not think about it or",
    "start": "2389619",
    "end": "2395740"
  },
  {
    "text": "I would not finish my dissertation which was not about this it was about a higher reunification",
    "start": "2395740",
    "end": "2401740"
  },
  {
    "text": "so I went back to my office and I wrote this idea down and promised myself I wouldn't think about it until I finished my dissertation",
    "start": "2401740",
    "end": "2407440"
  },
  {
    "text": "and uh and I did manage to so but uh in another year or two I found myself",
    "start": "2407440",
    "end": "2415060"
  },
  {
    "text": "at Sun Microsystems and uh it was in a graphics Technology Group",
    "start": "2415060",
    "end": "2420820"
  },
  {
    "text": "which I was really lucky to get to be part of because I had very little relevant experience on my resume and we",
    "start": "2420820",
    "end": "2427359"
  },
  {
    "text": "had the task of come up with something that's better than figs okay Pegasus Phi",
    "start": "2427359",
    "end": "2433060"
  },
  {
    "text": "GS was this old system for doing 3D Graphics programming and it was based on",
    "start": "2433060",
    "end": "2440380"
  },
  {
    "text": "display lists and um uh it was a very to me just terribly",
    "start": "2440380",
    "end": "2446920"
  },
  {
    "text": "clunky having a programming language is background I couldn't help but see this thing as as a sort of horrible",
    "start": "2446920",
    "end": "2454859"
  },
  {
    "text": "unconscious attempt at doing some functional sort of Graphics thing so uh so it was a quite uh it was quite",
    "start": "2454859",
    "end": "2463060"
  },
  {
    "text": "a great invitation come up with something better and I had been doing functional programming and sort of dreaming about wanting to get back into",
    "start": "2463060",
    "end": "2468460"
  },
  {
    "text": "graphics and so what I came up with was this idea of a language for 3D geometry",
    "start": "2468460",
    "end": "2475420"
  },
  {
    "text": "as of first class values so type system all the operation for building them up",
    "start": "2475420",
    "end": "2481119"
  },
  {
    "text": "we're typed and so on and I quickly realized that it couldn't be a language for graphics because it would be clunky if the language was specifically about",
    "start": "2481119",
    "end": "2487660"
  },
  {
    "text": "Graphics it would mean everything else would be treated poorly so it had to be a polymorphic language in which Graphics was just one thing so geometry was just",
    "start": "2487660",
    "end": "2494140"
  },
  {
    "text": "one thing because they're going to be points colors vectors and so on and the one about the lovely you know kind of",
    "start": "2494140",
    "end": "2499420"
  },
  {
    "text": "imagery we wanted to Overlay onto them and that sort of thing and describing cameras and all that kind of stuff no it's got to be a general purpose",
    "start": "2499420",
    "end": "2505480"
  },
  {
    "text": "language but a functional language with a nice type system by that time I had been programming an ML and I had a sense of",
    "start": "2505480",
    "end": "2511300"
  },
  {
    "text": "what a nice test systems were like and of course I remember John railing's",
    "start": "2511300",
    "end": "2517480"
  },
  {
    "text": "idea which is functions of reels not functions of Naturals so flow is not not streams",
    "start": "2517480",
    "end": "2525640"
  },
  {
    "text": "so uh it was a very fun system I um I also used multi-way constraints so we could",
    "start": "2525640",
    "end": "2532720"
  },
  {
    "text": "specify the relationships between between you know all these components and all these types and the constraints",
    "start": "2532720",
    "end": "2538300"
  },
  {
    "text": "were on functions of time so I found a couple of off-the-shelf",
    "start": "2538300",
    "end": "2543460"
  },
  {
    "text": "constraint systems that were domain independent and I thought huh what if the values I give them are functions of",
    "start": "2543460",
    "end": "2549400"
  },
  {
    "text": "time these constraint systems said they didn't care what the what types they were because they use local propagation",
    "start": "2549400",
    "end": "2555339"
  },
  {
    "text": "it's not particularly a powerful method but but it's a general method and it worked out very well",
    "start": "2555339",
    "end": "2561280"
  },
  {
    "text": "and then one of the nice things is that we got to talk about just derivatives to one of the constraints is this guy's a",
    "start": "2561280",
    "end": "2567460"
  },
  {
    "text": "derivative of that guy and so depending on which direction the constraint ran it would do differentiation or do",
    "start": "2567460",
    "end": "2572619"
  },
  {
    "text": "integration or if there were Cycles it would do it would solve systems of differential equations so it's a very",
    "start": "2572619",
    "end": "2578380"
  },
  {
    "text": "elegant specification but it was also a very efficient and accurate implementation I used a off-the-shelf",
    "start": "2578380",
    "end": "2585000"
  },
  {
    "text": "runga cut a fifth order ode solver okay",
    "start": "2585000",
    "end": "2590619"
  },
  {
    "text": "but the way that I handled interaction was with asserting and retracting these constraints it's a very high level but",
    "start": "2590619",
    "end": "2595780"
  },
  {
    "text": "still imperative approach so that uh bugged me a little bit that was the",
    "start": "2595780",
    "end": "2601119"
  },
  {
    "text": "best I knew how to do at the time there was also this compiler was implementing common lisp a compiler that used partial",
    "start": "2601119",
    "end": "2607359"
  },
  {
    "text": "evaluation that would eliminate almost all of the actual representation of what we nowadays called deforestation so it's",
    "start": "2607359",
    "end": "2613000"
  },
  {
    "text": "quite efficient implementation as well and then had some implementations in the common list C plus plus in scheme",
    "start": "2613000",
    "end": "2618640"
  },
  {
    "text": "uh and one of the really cool things was that you could write these uh these programs in a modular way in terms of",
    "start": "2618640",
    "end": "2624460"
  },
  {
    "text": "these constraints and then run them across the network in a multi-user setting and there was nothing in the",
    "start": "2624460",
    "end": "2630940"
  },
  {
    "text": "programming that was about you know distributed or network communication that kind of thing it just passed",
    "start": "2630940",
    "end": "2636579"
  },
  {
    "text": "constraints around the network and solved them locally so it was very very efficient",
    "start": "2636579",
    "end": "2642180"
  },
  {
    "text": "a few years later I found myself at Microsoft research and Sun had canceled",
    "start": "2642819",
    "end": "2649060"
  },
  {
    "text": "our project and canceled our department the graphics multimedia department and I didn't want to work on distributed object systems uh cross-platform goo so",
    "start": "2649060",
    "end": "2658540"
  },
  {
    "text": "I left and went to Microsoft research and there there was a new graphics Hardware being developed",
    "start": "2658540",
    "end": "2664660"
  },
  {
    "text": "it ended up being called Talisman I think was the last name when it was uh public it was a very cool Innovative",
    "start": "2664660",
    "end": "2671140"
  },
  {
    "text": "design turned out meanwhile the kind of you know sgiati",
    "start": "2671140",
    "end": "2677500"
  },
  {
    "text": "um um Nvidia you know that that whole uh line was they were they had economy of",
    "start": "2677500",
    "end": "2683680"
  },
  {
    "text": "scale they were doing the kind of same old thing faster and faster and so our stuff didn't quite didn't quite work out but it was an opportunity to to play",
    "start": "2683680",
    "end": "2690400"
  },
  {
    "text": "with uh with Graphics more and in this undeclarative way and there was that one thing about the interactivity the",
    "start": "2690400",
    "end": "2696640"
  },
  {
    "text": "reactivity being imperative even though it's high level it bugged me and so I went back to that idea and I asked the",
    "start": "2696640",
    "end": "2701859"
  },
  {
    "text": "question how can I make that last bit purely functional within a lovely denotation as well and that was working",
    "start": "2701859",
    "end": "2707800"
  },
  {
    "text": "with this uh event algebra and this idea of how to how to do reactivity by having events uh whose",
    "start": "2707800",
    "end": "2715359"
  },
  {
    "text": "values are behaviors and so on and I thought I'm going to drop the multi-way stuff and just focus on on",
    "start": "2715359",
    "end": "2721839"
  },
  {
    "text": "the functional reactivity and then I'll come back to it and so this is you know quite a bit later 20 years later and I",
    "start": "2721839",
    "end": "2728500"
  },
  {
    "text": "haven't come back to it I still think it'll be interesting to take a constraints point of view to uh to Pure",
    "start": "2728500",
    "end": "2733780"
  },
  {
    "text": "FRP so my initial implementation was it was",
    "start": "2733780",
    "end": "2739060"
  },
  {
    "text": "in ml because that was the best I knew and I called it rbml which for reactive",
    "start": "2739060",
    "end": "2744819"
  },
  {
    "text": "Behavior modeling language could have been markup language modeling language I'm not sure but it was really about the ML and the name was to kind of appeal to",
    "start": "2744819",
    "end": "2752079"
  },
  {
    "text": "this um uh what was it uh vrml and uh and related",
    "start": "2752079",
    "end": "2759520"
  },
  {
    "text": "kind of things and then at one point we rebranded it to active vrml which really pissed off the",
    "start": "2759520",
    "end": "2765099"
  },
  {
    "text": "vml community it was it was an unfortunate Choice it was completely ignored everything they did and proposed this thing and gave it a vrmail name",
    "start": "2765099",
    "end": "2773140"
  },
  {
    "text": "and then it was rebranded to direct animation that was actually a product for a while there are remnants in Windows platform",
    "start": "2773140",
    "end": "2780720"
  },
  {
    "text": "Foundation something like that uh in Microsoft of this stuff but that's also",
    "start": "2780720",
    "end": "2786460"
  },
  {
    "text": "a bit harboring to me because it's um it got very oh oh stateful",
    "start": "2786460",
    "end": "2792119"
  },
  {
    "text": "so uh but then around 1995 I stumbled across Haskell and I knew this is really",
    "start": "2792400",
    "end": "2799480"
  },
  {
    "text": "this is really a better fit it's lazy it's pure it has a more elegant syntax I",
    "start": "2799480",
    "end": "2804880"
  },
  {
    "text": "was used to the ml syntax but this definitely appealed to me more and so I call it reactive Behavior modeling and Haskell",
    "start": "2804880",
    "end": "2811300"
  },
  {
    "text": "and then a couple years later I did a very very efficient uh very fast implementation uh via Sprite engine this",
    "start": "2811300",
    "end": "2818920"
  },
  {
    "text": "was really inspired by and aimed at this Graphics Hardware which is kind of uh which is a Sprite based engine that did",
    "start": "2818920",
    "end": "2824880"
  },
  {
    "text": "uh you know Hardware transformation uh on Sprites that kind of thing and then",
    "start": "2824880",
    "end": "2831520"
  },
  {
    "text": "around 1999 John Hughes suggested maybe you ought to be using this new abstraction arrow that John was playing",
    "start": "2831520",
    "end": "2838060"
  },
  {
    "text": "with that which then later became arrowized FRP that idea",
    "start": "2838060",
    "end": "2843900"
  },
  {
    "text": "um all these implementations have been poll based which is it was very simple easy to get them exactly correct but",
    "start": "2844660",
    "end": "2850900"
  },
  {
    "text": "they're sometimes quite inefficient if there's if there's something over here that potentially could be time varying",
    "start": "2850900",
    "end": "2856420"
  },
  {
    "text": "but at the moment wasn't because we're not interacting with it it's still eating up a lot of Cycles just the information noticing that's still the",
    "start": "2856420",
    "end": "2862359"
  },
  {
    "text": "same value actually not even noticing just on repeatedly discovering the same value and uh and I wanted to see can I",
    "start": "2862359",
    "end": "2868480"
  },
  {
    "text": "make something that that uh such that the cost of execution is a",
    "start": "2868480",
    "end": "2874060"
  },
  {
    "text": "function of the active Parts rather than just the kind of potentially active parts that turned about quite",
    "start": "2874060",
    "end": "2879760"
  },
  {
    "text": "challenging for some challenges with garbage collection for push garbage collection works really",
    "start": "2879760",
    "end": "2886240"
  },
  {
    "text": "well for kind of pull sorts of things for push the pointers are all backwards I don't think I have time to go into",
    "start": "2886240",
    "end": "2892180"
  },
  {
    "text": "into that getting the semantics exactly correct was quite challenging",
    "start": "2892180",
    "end": "2898180"
  },
  {
    "text": "but it's it's kind of a nice challenge because I had a denotation I knew what the exact what the right answer was all",
    "start": "2898180",
    "end": "2903819"
  },
  {
    "text": "right if I just had implementation I go I don't know implement it and we'll see what happens and and it's not obviously incorrect so I guess good enough but no",
    "start": "2903819",
    "end": "2910599"
  },
  {
    "text": "I knew exactly what it had to mean so I knew that I didn't get it right and a lot of people have tried this sort",
    "start": "2910599",
    "end": "2915760"
  },
  {
    "text": "of thing pushed and I don't think anybody has gotten it right and partly I think that's because they",
    "start": "2915760",
    "end": "2921300"
  },
  {
    "text": "don't hold on to this notion of what correct means",
    "start": "2921300",
    "end": "2926319"
  },
  {
    "text": "okay much later with this paper push-pull functional active programming which was another attempt it was like 10 years",
    "start": "2926319",
    "end": "2932260"
  },
  {
    "text": "later and this again what I was going for was I want a minimal computation I wanted to",
    "start": "2932260",
    "end": "2938020"
  },
  {
    "text": "be provably correct not hopefully correct correct",
    "start": "2938020",
    "end": "2943119"
  },
  {
    "text": "okay so I'll skip on by there and finally uh no early history of",
    "start": "2943119",
    "end": "2949960"
  },
  {
    "text": "functional active programming would be nearly complete without talking about Paul Hudak",
    "start": "2949960",
    "end": "2956280"
  },
  {
    "text": "so I met Paul when he visited Microsoft research it was in 95 or 96 I don't",
    "start": "2956579",
    "end": "2961960"
  },
  {
    "text": "really quite remember which of the two he came to give a talk on on haskor his",
    "start": "2961960",
    "end": "2967420"
  },
  {
    "text": "uh his language embedded in Haskell for doing uh for doing music composition",
    "start": "2967420",
    "end": "2973020"
  },
  {
    "text": "so uh that looked pretty cool to me I asked him to come and chat with me uh",
    "start": "2973020",
    "end": "2978940"
  },
  {
    "text": "and showed him my rbmh at the time Behavior modeling and Haskell",
    "start": "2978940",
    "end": "2984640"
  },
  {
    "text": "and Paul was very excited about it and super encouraging um",
    "start": "2984640",
    "end": "2990839"
  },
  {
    "text": "his joyful reaction gave me a huge boost you know in exploring this work I've",
    "start": "2991440",
    "end": "2997000"
  },
  {
    "text": "been doing it really just by myself at that time so Paul uh said you know this is great",
    "start": "2997000",
    "end": "3003660"
  },
  {
    "text": "uh um you know absolutely write this up and uh offered a co-author a paper with me",
    "start": "3003660",
    "end": "3010440"
  },
  {
    "text": "and then over the next uh over the next 10 years did quite a lot of work he and his group Paul's the",
    "start": "3010440",
    "end": "3016500"
  },
  {
    "text": "person who proposed the name Fran as a much friendlier sounding name than our bmh totally agree with you there Paul",
    "start": "3016500",
    "end": "3022160"
  },
  {
    "text": "and later functional reactive programming just to kind of emphasize that uh that this isn't about animation",
    "start": "3022160",
    "end": "3027960"
  },
  {
    "text": "just animation the sense of visual so these these were both Paul's",
    "start": "3027960",
    "end": "3034440"
  },
  {
    "text": "suggested names and then Paul uh participated in encouraged supervised many",
    "start": "3034440",
    "end": "3040260"
  },
  {
    "text": "FRP related projects over the next uh golly 15 years something like that",
    "start": "3040260",
    "end": "3046619"
  },
  {
    "text": "um in his group so quite a lot of work was done uh exploring extending",
    "start": "3046619",
    "end": "3052880"
  },
  {
    "text": "applications implementations that kind of thing so",
    "start": "3052880",
    "end": "3058140"
  },
  {
    "text": "um and as dick mentioned we lost Paul this year so uh I loved his playfulness I loved his",
    "start": "3058140",
    "end": "3065940"
  },
  {
    "text": "uh his Joy uh inspiration his work so grateful for uh getting to meet him",
    "start": "3065940",
    "end": "3073260"
  },
  {
    "text": "okay so I'm going to stop there we've got about five minutes or so for questions and uh",
    "start": "3073260",
    "end": "3079380"
  },
  {
    "text": "then I will be uh I'll be around questions",
    "start": "3079380",
    "end": "3085400"
  },
  {
    "text": "I don't know okay the question is what representation I use for the real numbers so I appreciate that question so",
    "start": "3088859",
    "end": "3094980"
  },
  {
    "text": "I actually used doubles which uh which is not correct right it doesn't mean so doubles are something",
    "start": "3094980",
    "end": "3101400"
  },
  {
    "text": "that that we use as if they were reels but they're not reals they don't obey the laws and so on",
    "start": "3101400",
    "end": "3107099"
  },
  {
    "text": "um what I would like to see us do is is use real reels",
    "start": "3107099",
    "end": "3112380"
  },
  {
    "text": "um and reals so actual honest to God real so that means we're Computing with exact Precision real numbers now how can",
    "start": "3112380",
    "end": "3119160"
  },
  {
    "text": "we do that well you might imagine the laziness is is you know going to play an important role there uh and there's been",
    "start": "3119160",
    "end": "3124800"
  },
  {
    "text": "a ton of work on doing exact real computation nobody knows how to do it anywhere nearly as fast as the inexact",
    "start": "3124800",
    "end": "3131579"
  },
  {
    "text": "that we have now so right now we're really kind of unfortunate position still after all this time of programming",
    "start": "3131579",
    "end": "3137520"
  },
  {
    "text": "um how to approaching fast or being correct you know Dependable but we've done a lot of hard things and I think we",
    "start": "3137520",
    "end": "3143760"
  },
  {
    "text": "can do this one",
    "start": "3143760",
    "end": "3146359"
  },
  {
    "text": "yes",
    "start": "3152819",
    "end": "3155480"
  },
  {
    "text": "ah okay yeah so uh so the question was about and the denotation of events I",
    "start": "3164339",
    "end": "3170400"
  },
  {
    "text": "said they're time value pairs but they're they're not monotonically non-decreasing time value Pairs and so uh so all of the operations do preserve",
    "start": "3170400",
    "end": "3177599"
  },
  {
    "text": "that property but the type system doesn't is not what guarantees it sort of my carefulness is what guarantees it",
    "start": "3177599",
    "end": "3183839"
  },
  {
    "text": "and so the question is I thought about using the type system no I haven't I mean in fact my dissertation work was on",
    "start": "3183839",
    "end": "3189960"
  },
  {
    "text": "dependent types independent types is kind of you know the tool of choice for doing that kind of thing but I haven't explored it out be a fun thing for",
    "start": "3189960",
    "end": "3196319"
  },
  {
    "text": "somebody to do thanks",
    "start": "3196319",
    "end": "3200000"
  },
  {
    "text": "oh interesting okay so the question is about continuity um and and you know how How Deeply has",
    "start": "3218540",
    "end": "3226260"
  },
  {
    "text": "this continuity issue been explored and particularly around wiggliness and I'm guessing I don't think you said this but I'm guessing what you mean is when",
    "start": "3226260",
    "end": "3231960"
  },
  {
    "text": "things get infinitely Wiggly yeah okay yeah so um yeah absolutely if if we were talking",
    "start": "3231960",
    "end": "3238619"
  },
  {
    "text": "about functions of the reels there are all kinds of fascinatingly pathological behaviors that mathematical functions on",
    "start": "3238619",
    "end": "3244500"
  },
  {
    "text": "the reels can have things can be um can be like what everywhere continuous and nowhere differentiable",
    "start": "3244500",
    "end": "3250319"
  },
  {
    "text": "and all this all this kind of stuff there I mean there are people whose life work is about finding these bizarre combinations uh and um no no I haven't",
    "start": "3250319",
    "end": "3259920"
  },
  {
    "text": "uh I think there are a lot of things that one can say for which for which the correct denotation is bottom right it's",
    "start": "3259920",
    "end": "3266400"
  },
  {
    "text": "non-termination and and uh and so it's not exactly paradoxical we know what",
    "start": "3266400",
    "end": "3271559"
  },
  {
    "text": "that means we have you know domain theory in mathematics uh but no I haven't uh not so much",
    "start": "3271559",
    "end": "3279020"
  },
  {
    "text": "I did in an early implementation use interval analysis to to you know to kind of prove that in",
    "start": "3279020",
    "end": "3286859"
  },
  {
    "text": "certain regions of time uh the predicate operations and reasons of time this this Boolean function cannot you know cannot",
    "start": "3286859",
    "end": "3293280"
  },
  {
    "text": "be true for instance that kind of thing uh and that's a kind of technique you can take that technique along with",
    "start": "3293280",
    "end": "3298920"
  },
  {
    "text": "derivatives and bounded derivative lib shits conditions that kind of thing there's a lot of things you can do I I would say I haven't exploded deeply and",
    "start": "3298920",
    "end": "3305400"
  },
  {
    "text": "explored it uh superficially",
    "start": "3305400",
    "end": "3308960"
  },
  {
    "text": "ah okay so what's existing FRP implementation so I think are close I",
    "start": "3318500",
    "end": "3324420"
  },
  {
    "text": "really don't know if any of them are um uh there are occasionally people who",
    "start": "3324420",
    "end": "3330359"
  },
  {
    "text": "write and ask me how might I give this thing a denotation uh this system or or how am I to",
    "start": "3330359",
    "end": "3336480"
  },
  {
    "text": "redesign this system so that it has denotational precision and simplicity so that's very encouraging me that there",
    "start": "3336480",
    "end": "3342420"
  },
  {
    "text": "are some people who are starting to ask the questions there is a system uh Stephen",
    "start": "3342420",
    "end": "3348180"
  },
  {
    "text": "um sorry I'm blanking his last name there's",
    "start": "3348180",
    "end": "3353280"
  },
  {
    "text": "a system called sodium and Stephen the author is working toward giving it a",
    "start": "3353280",
    "end": "3358559"
  },
  {
    "text": "precise simple denotation uh I've looked at it a couple of times I'm not quite sure where it's going but I think he's",
    "start": "3358559",
    "end": "3363599"
  },
  {
    "text": "really trying um there was another one",
    "start": "3363599",
    "end": "3369420"
  },
  {
    "text": "Holly sorry I'm blanking on names right now there are a few that that at least make",
    "start": "3369420",
    "end": "3375059"
  },
  {
    "text": "an attempt that's very encouraging to me there you know there's there are plenty",
    "start": "3375059",
    "end": "3381000"
  },
  {
    "text": "of popular system there's a bacon which I don't think even tried there's Elm which is uh doesn't have a denotation or",
    "start": "3381000",
    "end": "3387240"
  },
  {
    "text": "a continuous uh semantics it's it's really based on FRP but something called eefrp a little confusingly similar names",
    "start": "3387240",
    "end": "3394140"
  },
  {
    "text": "um yeah sorry I wish I could point to several of them I'm encouraged that people are at least",
    "start": "3394140",
    "end": "3400680"
  },
  {
    "text": "wondering okay so here's the question",
    "start": "3400680",
    "end": "3406140"
  },
  {
    "text": "I I hear come up uh over and over and it's it's it sort of starts out but",
    "start": "3406140",
    "end": "3412559"
  },
  {
    "text": "uh computers are discreet and and after that goes something like",
    "start": "3412559",
    "end": "3417720"
  },
  {
    "text": "uh uh so what relevance you know so what are you talking about what does it have to do with computers another one is so",
    "start": "3417720",
    "end": "3424319"
  },
  {
    "text": "uh you know you couldn't be serious all right um and and to me this these kind of",
    "start": "3424319",
    "end": "3431700"
  },
  {
    "text": "objections miss a kind of really fundamental um or they belie an attitude that that",
    "start": "3431700",
    "end": "3438720"
  },
  {
    "text": "surprises and disappoints me which is that our programs should have anything to do with computers",
    "start": "3438720",
    "end": "3445380"
  },
  {
    "text": "so uh Dykstra said this and they said uh computer science is no more about computers than astronomy is about",
    "start": "3445380",
    "end": "3451980"
  },
  {
    "text": "telescopes right it's just a device it's just a tool if I found a better tool for",
    "start": "3451980",
    "end": "3458400"
  },
  {
    "text": "looking at ideas through I would throw out my computer and I'd use this other tool so not only that but we've been using a",
    "start": "3458400",
    "end": "3466500"
  },
  {
    "text": "pen and paper right for hundreds of years these are discrete tools and discrete in the sense of there's a",
    "start": "3466500",
    "end": "3472319"
  },
  {
    "text": "discrete alphabet there's a discrete a set of rules of inference discrete inference process right and we've",
    "start": "3472319",
    "end": "3478740"
  },
  {
    "text": "developed continuous mathematics this really has nothing to do with it the nature of the machine the other thing is",
    "start": "3478740",
    "end": "3483900"
  },
  {
    "text": "computers aren't discreet right they're voltages computers are are continuous discrete computation is just an",
    "start": "3483900",
    "end": "3490559"
  },
  {
    "text": "abstraction too so the idea of balking it and me putting a continuous abstraction on top of your discrete",
    "start": "3490559",
    "end": "3496859"
  },
  {
    "text": "abstraction on top of a continuous device right this seems a little weird to me so all right so anyway just another plug",
    "start": "3496859",
    "end": "3505260"
  },
  {
    "text": "tomorrow I'm giving a talk or I'll go into more of the the elegant denotation",
    "start": "3505260",
    "end": "3510300"
  },
  {
    "text": "and then tomorrow afternoon's talk on this denotational design principle and I'll be around to for more questions",
    "start": "3510300",
    "end": "3519200"
  },
  {
    "text": "[Applause]",
    "start": "3519350",
    "end": "3526360"
  }
]