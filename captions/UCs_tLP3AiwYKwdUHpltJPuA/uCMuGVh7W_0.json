[
  {
    "start": "0",
    "end": "113000"
  },
  {
    "text": "[Music]",
    "start": "990",
    "end": "7859"
  },
  {
    "text": "hey goodbye my son couldn't good morning good afternoon go to it's just a quick",
    "start": "11929",
    "end": "18539"
  },
  {
    "text": "question how many people are using Kotlin now at their job in production cool how many people have not used",
    "start": "18539",
    "end": "24180"
  },
  {
    "text": "Kotlin at all yet okay cool so good split so my name is Quinto it Dow I'm an",
    "start": "24180",
    "end": "29640"
  },
  {
    "text": "Android developer at Trello and we've been using Kotlin on our team well I guess as you as long as I've been using",
    "start": "29640",
    "end": "35370"
  },
  {
    "text": "cause in about two and a half years and for me kind of like even though you know",
    "start": "35370",
    "end": "40800"
  },
  {
    "text": "I feel like I'm getting to a couple of a little bit better after two and a half years there's this question that I kind",
    "start": "40800",
    "end": "46260"
  },
  {
    "text": "of still ask myself all the time and by the way this entire talk is gonna be a live code we'll see how that goes",
    "start": "46260",
    "end": "52190"
  },
  {
    "text": "and there's this question that I still ask myself and I'm probably will continue to ask myself in the next two",
    "start": "52190",
    "end": "58199"
  },
  {
    "text": "and a half it said however long were using Kotlin and that is what is idiomatic Kotlin and i feel like i heard",
    "start": "58199",
    "end": "63930"
  },
  {
    "text": "that phrase a lot when I was first using it and I was like okay what what is what does that mean like what is Kotlin like what does idiomatic Kotlin mine am i",
    "start": "63930",
    "end": "70500"
  },
  {
    "text": "doing it right am i is that was that what I'm doing and I think to answer this question I kind of went to some",
    "start": "70500",
    "end": "78150"
  },
  {
    "text": "different places you know I looked on the web by Google's I kept reading the calling code conventions and I think one",
    "start": "78150",
    "end": "83189"
  },
  {
    "text": "really valuable place for me to learn idiomatic Kotlin was kind of to look at the code that jetbrains wrote in the",
    "start": "83189",
    "end": "88680"
  },
  {
    "text": "standard library and I learned a lot actually about language features like watch which ones exist how to use them I",
    "start": "88680",
    "end": "95430"
  },
  {
    "text": "guess in different ways and conventions that jetbrains uses in their own standard lib and I kind of hope that one",
    "start": "95430",
    "end": "102360"
  },
  {
    "text": "way of looking at idiomatic Kotlin is to look what jetbrains does and that's what I want to take you all through today is that you know maybe a good place to",
    "start": "102360",
    "end": "109619"
  },
  {
    "text": "learn idiomatic Kotlin is in the standard library source so that's what we're gonna do so my first love in",
    "start": "109619",
    "end": "115470"
  },
  {
    "start": "113000",
    "end": "394000"
  },
  {
    "text": "Kotlin was the collections API so the collections API if y'all aren't familiar in hubs any Kotlin yet is basically this",
    "start": "115470",
    "end": "122040"
  },
  {
    "text": "like whole collection of out-of-the-box utilities and operators that you can",
    "start": "122040",
    "end": "127710"
  },
  {
    "text": "apply to kind of traditional collections so collection sets maps and what's really cool about it is that if you're",
    "start": "127710",
    "end": "133950"
  },
  {
    "text": "someone who's done any arc Java or with Java eight streams you might recognize this very kind of familiar fluent",
    "start": "133950",
    "end": "140250"
  },
  {
    "text": "expressive syntax and you can chain operations together and it's a really just nice functional API for working",
    "start": "140250",
    "end": "146069"
  },
  {
    "text": "with collections and that's what's in Kotlin and I think another thing it was interesting about Kotlin for me is that",
    "start": "146069",
    "end": "151709"
  },
  {
    "text": "I've never really understood what I've never really had much experience with functional programming I still don't know quite what it is I don't know what",
    "start": "151709",
    "end": "158069"
  },
  {
    "text": "a monad is but I do understand that kind of part of the idea of functional",
    "start": "158069",
    "end": "163230"
  },
  {
    "text": "programming and this functional API for collections in Kotlin is ability to kind of kind of Express at a much higher",
    "start": "163230",
    "end": "169680"
  },
  {
    "text": "level what we're trying to do in our code to and you'll hear this phrase a lot at least I come across the phrase a lot in my you know googling about",
    "start": "169680",
    "end": "175860"
  },
  {
    "text": "functional programming is that you focus on the what and not the how and evaluating expressions you know kind of",
    "start": "175860",
    "end": "181709"
  },
  {
    "text": "high-level concepts rather than you know explicitly executing statements you know kind of line by line what am i doing and",
    "start": "181709",
    "end": "188360"
  },
  {
    "text": "if you're kind of interested in this if you're like me you're still kind of like a bumbling fawn in the world of functional programming there is an",
    "start": "188360",
    "end": "194489"
  },
  {
    "text": "amazing book it is Java based but it's still a really great intro to functional probate court bearing programming",
    "start": "194489",
    "end": "200129"
  },
  {
    "text": "concepts kind of in this vein of thinking about it in terms of like collections and and kind of like",
    "start": "200129",
    "end": "205319"
  },
  {
    "text": "streaming type writing by Venkat subrahmanyam who is an amazing writer",
    "start": "205319",
    "end": "210330"
  },
  {
    "text": "speaker educator anything that Venkat produces I consume readily and similarly",
    "start": "210330",
    "end": "216090"
  },
  {
    "text": "with functional programming you definitely check it out I won't talk about that today though but I will give an example all right so oops",
    "start": "216090",
    "end": "222470"
  },
  {
    "text": "so say that say that I'm on a voyage of discovery right I'm an intrepid crew of",
    "start": "222470",
    "end": "229470"
  },
  {
    "text": "scientists and adventurers and some possibly crazy captain off to boldly explore you know new life and new",
    "start": "229470",
    "end": "235080"
  },
  {
    "text": "civilizations and occasionally on this mission of discovery I have to take away missions off to a planet maybe I'm",
    "start": "235080",
    "end": "240659"
  },
  {
    "text": "picking up resources maybe I'm rescuing someone but I have to go on these away missions now a web missions can be",
    "start": "240659",
    "end": "246540"
  },
  {
    "text": "complicated they can be dangerous so we need the right group of people so how do I find this you know group of people",
    "start": "246540",
    "end": "252480"
  },
  {
    "text": "this this members of my crew that are able to go into a mission well I might write a cut in the function to figure that out and maybe you know for my away mission I",
    "start": "252480",
    "end": "259650"
  },
  {
    "text": "might need someone you know good leader someone from the command deck so maybe I need an impetuous captain an enigmatic enigmatic science officer",
    "start": "259650",
    "end": "267020"
  },
  {
    "text": "so things might break on the way mission so I need someone from engineering but let's make sure we find an engineer who's not currently busy doing repairs",
    "start": "267020",
    "end": "273730"
  },
  {
    "text": "the way machines are dangerous people might get hurt so I might need a doctor so let's go the medbay find a doctor he",
    "start": "273730",
    "end": "278870"
  },
  {
    "text": "might be a little bit ornery but damn he's not a mechanic and finally we need some people to round out the group",
    "start": "278870",
    "end": "283930"
  },
  {
    "text": "generally these folks wear red shirts and often they tend to die but we still kind of need them to kind of fill out",
    "start": "283930",
    "end": "289340"
  },
  {
    "text": "the group so let's make sure that we find some of these red shirted folks that aren't dead yet and add them to the",
    "start": "289340",
    "end": "294830"
  },
  {
    "text": "crew again and move away missions are dangerous so let's make sure that we only take experienced people so we want",
    "start": "294830",
    "end": "300170"
  },
  {
    "text": "to filter only take folks above a certain rank and because why the heck not let's figure out a marching order",
    "start": "300170",
    "end": "305870"
  },
  {
    "text": "for these folks let's sort them by rank to figure out who goes leaves the ship first so I just told you a bunch of",
    "start": "305870",
    "end": "311420"
  },
  {
    "text": "stuff right I described to you what I wanted and while it was kind of complicated there's a lot going on if you look at the code you can see kind of",
    "start": "311420",
    "end": "318710"
  },
  {
    "text": "what I just told you very easily in this functional you know expressive API and I",
    "start": "318710",
    "end": "324500"
  },
  {
    "text": "think that's one of the again one of the things that I fell in love with about Kotlin in the standard library and I think it's something that I'm trying to",
    "start": "324500",
    "end": "330440"
  },
  {
    "text": "emulate in my own code because I feel like there's got to be something some of the goals and values of the JetBrains",
    "start": "330440",
    "end": "335780"
  },
  {
    "text": "team kind of been how they design this API so in this journey towards more idiomatic Kotlin and writing my own kind",
    "start": "335780",
    "end": "341690"
  },
  {
    "text": "of cool interesting things I kind of like said okay well let's drill in and see what's what's what's kind of all",
    "start": "341690",
    "end": "347390"
  },
  {
    "text": "about what's what's in these you know functional API so what's that magic that makes them kind of delightful",
    "start": "347390",
    "end": "352670"
  },
  {
    "text": "to use and I'm gonna talk about some of these things that we're seeing here so this I've drilled into is a filter function and there's a couple",
    "start": "352670",
    "end": "359630"
  },
  {
    "text": "interesting things to note here so filter has some interesting things like so if you're from JVM world the",
    "start": "359630",
    "end": "366350"
  },
  {
    "text": "signature kinda looks similar there's got we've got some generics in here I've got this interesting syntax where I have",
    "start": "366350",
    "end": "372530"
  },
  {
    "text": "this interval type but it's preceding the function name that might be relevant later you'll see this a lot in these",
    "start": "372530",
    "end": "378650"
  },
  {
    "text": "Center Lib methods where we have a function type basically defining you know a function that takes in a pair of",
    "start": "378650",
    "end": "384530"
  },
  {
    "text": "type T and returns a boolean and there's this inline keyword there's a lot of interesting stuff here so what can we",
    "start": "384530",
    "end": "389780"
  },
  {
    "text": "learn about Kotlin and what we can do with it by taking a look at some of these little features so if you look at",
    "start": "389780",
    "end": "396290"
  },
  {
    "start": "394000",
    "end": "795000"
  },
  {
    "text": "the standard a lot of these functions are higher-order functions and if you're like me and you didn't really know much",
    "start": "396290",
    "end": "401420"
  },
  {
    "text": "about functional programming you might be asking what does that mean well a lot of times you'll hear you know people",
    "start": "401420",
    "end": "406700"
  },
  {
    "text": "when they talk about safe functional languages or functional programming talk about languages that treat functions as",
    "start": "406700",
    "end": "413090"
  },
  {
    "text": "first-class citizens or that have first-class functions so what does that mean so when you have a higher-order",
    "start": "413090",
    "end": "418880"
  },
  {
    "text": "function when you have a language that treats functions as first-class citizens that means that you can number one store",
    "start": "418880",
    "end": "424520"
  },
  {
    "text": "functions in variables so you can pass them around like values you can pass functions as parameters to other",
    "start": "424520",
    "end": "431150"
  },
  {
    "text": "functions and you can return functions from other functions so basically functions can act just like a string or",
    "start": "431150",
    "end": "437900"
  },
  {
    "text": "like an integer they can be passed around and kind of part of this system is this idea of function literal so",
    "start": "437900",
    "end": "444080"
  },
  {
    "text": "functions as expressions and Colin has a few different flavors of function",
    "start": "444080",
    "end": "449600"
  },
  {
    "text": "literals if I can scroll there we go so the first one that has a name that you",
    "start": "449600",
    "end": "456140"
  },
  {
    "text": "might hear often in related related to functional programming things it's lambdas so I looked this up and I swear",
    "start": "456140",
    "end": "462080"
  },
  {
    "text": "this is this is actually a definition I read on something fairly official that lambdas are a chunk of code in curly",
    "start": "462080",
    "end": "467750"
  },
  {
    "text": "braces that's it now this chunk of current this chunk of code and curly braces does in fact look a bit",
    "start": "467750",
    "end": "472850"
  },
  {
    "text": "functioning there I just made that word up functioning it looks a function esque we'll say that a little more sophisticated so it has a parameter list",
    "start": "472850",
    "end": "479150"
  },
  {
    "text": "with a bunch of parameter names and types it has a right arrow and following the right arrow is the actual body of",
    "start": "479150",
    "end": "485630"
  },
  {
    "text": "our function literal so I have here a couple of lambdas I've assigned them to immutable vowels so they're stored",
    "start": "485630",
    "end": "491660"
  },
  {
    "text": "inside of kind of basically constant constant values I have one that determines whether a string is a",
    "start": "491660",
    "end": "497720"
  },
  {
    "text": "palindrome I have one that determines whether an integer is even and I have a function here for determining whether",
    "start": "497720",
    "end": "504190"
  },
  {
    "text": "we're determining what the median of an array of integers is I'm just going to move that just for okay so there's a",
    "start": "504190",
    "end": "513229"
  },
  {
    "text": "couple of interesting things to note about lambdas so number one there's no return type so usually when we declare",
    "start": "513229",
    "end": "519229"
  },
  {
    "text": "functions in our kind of like either Java or something C++ kind of type",
    "start": "519229",
    "end": "525050"
  },
  {
    "text": "languages we specify return type lambdas don't have return types general what happens is they infer the return",
    "start": "525050",
    "end": "531880"
  },
  {
    "text": "type based on the last evaluated expression so here in my first two functions I in both they have a single",
    "start": "531880",
    "end": "539170"
  },
  {
    "text": "line they're evaluating kind of like some equality and so that returns a boolean so the return type of this",
    "start": "539170",
    "end": "544779"
  },
  {
    "text": "lambda is a boolean in my median of a function or lambda rather it's a little more complicated and this is not great",
    "start": "544779",
    "end": "551650"
  },
  {
    "text": "code if if you're confused as I am when writing a lambda like this it probably isn't a good lambda but as you can see",
    "start": "551650",
    "end": "557440"
  },
  {
    "text": "here depending on what which branch I take in my median of lambda I return either a zero if they array is empty",
    "start": "557440",
    "end": "563800"
  },
  {
    "text": "first if it only has one and then some other kind of evaluations and the",
    "start": "563800",
    "end": "570010"
  },
  {
    "text": "kalanchoe probably asically infers based on you know kind of like the common type of of these possible return expressions",
    "start": "570010",
    "end": "575290"
  },
  {
    "text": "what the return type of that function literal is so a couple other interesting things about lambdas is that okay say I",
    "start": "575290",
    "end": "583210"
  },
  {
    "text": "look at this and knowing me I really kind of prefer I'm not the kind of person that likes this kind of figuring",
    "start": "583210",
    "end": "588880"
  },
  {
    "text": "out what the last expression is I really want to just type in the return now I'm getting a compiler error here is and the",
    "start": "588880",
    "end": "595360"
  },
  {
    "text": "reason for that is that Kotlin does not allow what are called non-local returns inside of lambdas so the return keyword",
    "start": "595360",
    "end": "603339"
  },
  {
    "text": "in Kotlin very specifically it returns from the kind of closest enclosing",
    "start": "603339",
    "end": "608800"
  },
  {
    "text": "function scope and that's literally something to find with the fun keyword and that the reason for that is is kind",
    "start": "608800",
    "end": "615610"
  },
  {
    "text": "of a as part of the common stories Java inter interoperability and as part of that is say well you think about a for",
    "start": "615610",
    "end": "621670"
  },
  {
    "text": "loop right if you have a for loop what happens if you return out of you if you could execute return in that for loop",
    "start": "621670",
    "end": "626710"
  },
  {
    "text": "you don't just exit out of that loop you exit out of the enclosing function and that kind of behavior was mirrored in",
    "start": "626710",
    "end": "633070"
  },
  {
    "text": "Collins so that's why this is a non-local return because it's returning not out of this lambda but out of the",
    "start": "633070",
    "end": "639520"
  },
  {
    "text": "enclosing function and it's not allowed here for different reasons but mainly because if you are allowing functions to",
    "start": "639520",
    "end": "646150"
  },
  {
    "text": "get passed around and stored in variables and possibly get called later if that function that we're declaring",
    "start": "646150",
    "end": "651370"
  },
  {
    "text": "here gets called later what is it returning from because the execution context where this lambda was declared",
    "start": "651370",
    "end": "657610"
  },
  {
    "text": "might be gone maybe it has a different signature we don't know so that's why non-local returns are not allowed so am i stuck with this confusing to me",
    "start": "657610",
    "end": "665579"
  },
  {
    "text": "expression return last return value inference I'm not so what I can do in",
    "start": "665579",
    "end": "671739"
  },
  {
    "text": "Kotlin is actually assign a label to a block of code and I can do a local return by kind of writing lit return and",
    "start": "671739",
    "end": "679569"
  },
  {
    "text": "then adding a return label again if you're doing multiple returns that's probably a little bit of a code smell",
    "start": "679569",
    "end": "685329"
  },
  {
    "text": "but if you're like me and you want to be more explicit about it and it doesn't seem like too stinky code you can do",
    "start": "685329",
    "end": "691299"
  },
  {
    "text": "that something else that is also really handy if you don't like this syntax is that the IDE and tell a J or Android studio",
    "start": "691299",
    "end": "697660"
  },
  {
    "text": "an Android person provides you a lot of help and you can actually have the IDE",
    "start": "697660",
    "end": "702939"
  },
  {
    "text": "kind of hint to you where the return statements are and also which you really should do because I know this is really",
    "start": "702939",
    "end": "709779"
  },
  {
    "text": "tripped me up is allow it to kind of hint to you again what the types of things are just because there is so much inference and Kotlin if you're not",
    "start": "709779",
    "end": "715899"
  },
  {
    "text": "supposed to find explicitly it can get confusing so anonymous functions are",
    "start": "715899",
    "end": "721989"
  },
  {
    "text": "another flavor of function literal in Kotlin so I have here a lambda the is",
    "start": "721989",
    "end": "727629"
  },
  {
    "text": "cur file and then the is character file is an anonymous function so these functions are pretty silly they",
    "start": "727629",
    "end": "734289"
  },
  {
    "text": "basically just check the extension of a file and check if it's a character file if it ends in dot CHR so as you can see",
    "start": "734289",
    "end": "740829"
  },
  {
    "text": "I want to transit property hands real quick okay so the interesting thing",
    "start": "740829",
    "end": "745899"
  },
  {
    "text": "about anonymous functions is that they are declared similar to kind of regular function declarations where you have the",
    "start": "745899",
    "end": "751629"
  },
  {
    "text": "fun keyword but they omit the function name and while they are still kind of",
    "start": "751629",
    "end": "756999"
  },
  {
    "text": "function declarations they do have a return type and because of this because they actually use the word fun keyword",
    "start": "756999",
    "end": "762429"
  },
  {
    "text": "to be declared you can do a local return because you're returning from that local kind of function scope and that's",
    "start": "762429",
    "end": "769569"
  },
  {
    "text": "basically it you can see here it gets stored in a immutable value just like the lambda I think they're really",
    "start": "769569",
    "end": "775089"
  },
  {
    "text": "interesting and also I like the idea that you know they explicitly specified the return type although to be honest",
    "start": "775089",
    "end": "781119"
  },
  {
    "text": "with you in my kind of two and a half years of using Kotlin I have never ever used an anonymous function at work I'm",
    "start": "781119",
    "end": "787329"
  },
  {
    "text": "sure there's a really good reason to use one I just haven't encountered it so if you have an idea for one you would use an anonymous function versus or lambda",
    "start": "787329",
    "end": "792789"
  },
  {
    "text": "please let me know I am so we're interested all right so we have this language that allows for treating",
    "start": "792789",
    "end": "799779"
  },
  {
    "start": "795000",
    "end": "915000"
  },
  {
    "text": "functions as first-class citizens it's still kind of a JVM language it spits out Java bytecode so why does that leave",
    "start": "799779",
    "end": "805779"
  },
  {
    "text": "this magic that Cottman is doing to allow us to kind of pass functions around like this well to answer that question I like to take what I like to",
    "start": "805779",
    "end": "811540"
  },
  {
    "text": "call a whip a bytecode break and we're gonna take a look at some of that Java bytecode that Collin spits out and see",
    "start": "811540",
    "end": "817180"
  },
  {
    "text": "what's going on under the hood so if I go to a separate example right here all",
    "start": "817180",
    "end": "824110"
  },
  {
    "text": "right so here's a really simple lambda it's a number that calculates the average of two integers that's it now if",
    "start": "824110",
    "end": "830260"
  },
  {
    "text": "I look into the Kotlin bytecode and I pull it out here they really have a hard",
    "start": "830260",
    "end": "835510"
  },
  {
    "text": "time reading bytecode but I'm gonna kind of soldier through right now and if I scroll through and scroll through here's",
    "start": "835510",
    "end": "841570"
  },
  {
    "text": "something that might look familiar so whenever you create a lambda that lambda is compiled into an internal",
    "start": "841570",
    "end": "847329"
  },
  {
    "text": "class so as you can see here that average lambda is turning to an average class and this class actually extends",
    "start": "847329",
    "end": "853300"
  },
  {
    "text": "among other things this function to interface so it's a function that takes two parameters and spits out a good flow",
    "start": "853300",
    "end": "861550"
  },
  {
    "text": "so if I scroll down a little bit to this invoke method I can see that I can kind",
    "start": "861550",
    "end": "868779"
  },
  {
    "text": "of start to see in the machine code or the bytecode rather some things that might look like they're calculating average loading to integers adding them",
    "start": "868779",
    "end": "875380"
  },
  {
    "text": "together turning them to a float loading a double constant multiplying together okay here's my actual average function",
    "start": "875380",
    "end": "882690"
  },
  {
    "text": "my average logic and if I scroll down a little bit something that we're going to care about and a little bit in just a",
    "start": "882690",
    "end": "888459"
  },
  {
    "text": "few minutes is this so this is a static instance of that internal class that average class and there so it's a",
    "start": "888459",
    "end": "894670"
  },
  {
    "text": "singleton so whenever I'm calling this whenever I'm invoking this lambda averin",
    "start": "894670",
    "end": "899860"
  },
  {
    "text": "lambda average function literal I'm actually calling into this instance okay",
    "start": "899860",
    "end": "905130"
  },
  {
    "text": "so as you can see there's not a lot of magic here these are basically just function objects that Kotlin translates",
    "start": "905130",
    "end": "911709"
  },
  {
    "text": "from with a nice common syntax into Java bytecode for us and by the way if you're",
    "start": "911709",
    "end": "917860"
  },
  {
    "start": "915000",
    "end": "1173000"
  },
  {
    "text": "kind of interested in this stuff and you're interested in how kind of Kotlin kind of translates between you know its syntax and Java bytecode there are some",
    "start": "917860",
    "end": "924790"
  },
  {
    "text": "really great tips to really by an Android dev named Viktoria ganda if it wasn't for Victoria I would not",
    "start": "924790",
    "end": "931290"
  },
  {
    "text": "know what any of this is so please check out her tox ooh something else that's interesting so as I mentioned I'm kind",
    "start": "931290",
    "end": "937140"
  },
  {
    "text": "of a chicken when when it comes to reading code so I'll often decompile down to Java from the Java bytecode just",
    "start": "937140",
    "end": "944400"
  },
  {
    "text": "to kind of see like what is really going on under the hood oops let me go back to my this class now",
    "start": "944400",
    "end": "950520"
  },
  {
    "text": "something interesting that you'll see if you're looking at a class with a lambda in it and you you can pop back to Java",
    "start": "950520",
    "end": "955980"
  },
  {
    "text": "is this null dot instance so there's something no that has an instance now",
    "start": "955980",
    "end": "961560"
  },
  {
    "text": "what happens here is if you see this is that the D compiler for brevity will",
    "start": "961560",
    "end": "966630"
  },
  {
    "text": "often kind of omit the names of those internal classes that get that gets generated and it comes out as null but this is that singular instance that we",
    "start": "966630",
    "end": "973230"
  },
  {
    "text": "saw in the bytecode of our lambda so just in case you see that so back to",
    "start": "973230",
    "end": "978270"
  },
  {
    "text": "higher-order functions so we talked about passing functions around as values let's let's talk about how we pass them",
    "start": "978270",
    "end": "983490"
  },
  {
    "text": "on as parameters or return them as values from functions so we're devs at least I assume a lot of",
    "start": "983490",
    "end": "991380"
  },
  {
    "text": "us are sorry assumptions about who people are but I'm a dev I tend to do a lot of event tracking and sometimes",
    "start": "991380",
    "end": "997020"
  },
  {
    "text": "depending on you know what I'm doing I might want to you know send the tracking event from my app to maybe to log if I'm",
    "start": "997020",
    "end": "1002150"
  },
  {
    "text": "debugging maybe it's a file maybe to the cloud if I'm kind of trying to aggregate some you know events for Analects or",
    "start": "1002150",
    "end": "1007790"
  },
  {
    "text": "something I might do something like this for example say I have different destinations where I want to send my",
    "start": "1007790",
    "end": "1013100"
  },
  {
    "text": "tracking events to encapsulate that maybe y'all write three lambdas one that tracks to a law of one that tracks to a",
    "start": "1013100",
    "end": "1018980"
  },
  {
    "text": "file and one the tracks of the cloud now here are two higher-order functions that kind of play around with these you know",
    "start": "1018980",
    "end": "1025010"
  },
  {
    "text": "tracking function types so say that for kind of my the person that's consuming",
    "start": "1025010",
    "end": "1031730"
  },
  {
    "text": "whatever this code is that for for their ease instead of making them call a",
    "start": "1031730",
    "end": "1036860"
  },
  {
    "text": "specific lambda I have an enum that defines it these different destinations and I have this higher-order function",
    "start": "1036860",
    "end": "1043220"
  },
  {
    "text": "that returns a function that maps from this these enum values to a specific lambda and then I might have somewhere",
    "start": "1043220",
    "end": "1050120"
  },
  {
    "text": "else a higher-order function like this that takes in that function type as a parameter and allows me to you know just",
    "start": "1050120",
    "end": "1056030"
  },
  {
    "text": "get some tracker function I don't care what and be able to call that and pass and parameters to it so kind of some",
    "start": "1056030",
    "end": "1063260"
  },
  {
    "text": "interesting things when you're calling a function value there's a couple ways you can do it so number one is kind of a",
    "start": "1063260",
    "end": "1069890"
  },
  {
    "text": "familiar you know function name except here it's a parameter value name and",
    "start": "1069890",
    "end": "1075049"
  },
  {
    "text": "then parentheses and then parameter lists but you can also go ahead and call invoke on that kind of function function",
    "start": "1075049",
    "end": "1082880"
  },
  {
    "text": "typed value and this invoke is that invoke that we just saw in the bytecode and you can also pass parameters that",
    "start": "1082880",
    "end": "1088760"
  },
  {
    "text": "way it's kind of your preference I often very I very often these days will explicitly call invoke if I want to be",
    "start": "1088760",
    "end": "1095659"
  },
  {
    "text": "really explicit that this is a function inside of a value or variable instead of just kind of like a actual declared",
    "start": "1095659",
    "end": "1101000"
  },
  {
    "text": "function but that's up to you and again there's kind of really neat things about the IDE that can help you if you want to",
    "start": "1101000",
    "end": "1106640"
  },
  {
    "text": "just very quickly switch because you're not sure there are a lot of intent actions that can help you kind of",
    "start": "1106640",
    "end": "1112100"
  },
  {
    "text": "quickly refactor your code so another thing that's great about Colin is it's",
    "start": "1112100",
    "end": "1117260"
  },
  {
    "text": "not just function literals that kind of get the fun of higher order kind of functions you can actually do it with",
    "start": "1117260",
    "end": "1122929"
  },
  {
    "text": "the clarity function so if I take my three functions here and let's say that I mean having them as lambdas I might be",
    "start": "1122929",
    "end": "1129320"
  },
  {
    "text": "a little bit silly let's go ahead and turn them back into declared functions by doing this all right and we'll change",
    "start": "1129320",
    "end": "1136820"
  },
  {
    "text": "this back to three functions so I have three declared functions now now my kind",
    "start": "1136820",
    "end": "1143630"
  },
  {
    "text": "of like my mapping function is unhappy because rather than having actual values here I've got these like you know kind",
    "start": "1143630",
    "end": "1149659"
  },
  {
    "text": "of orphaned symbol names what I can do is I don't have to turn these into function literals to pass them around",
    "start": "1149659",
    "end": "1156140"
  },
  {
    "text": "I can use a function reference syntax and cotton will basically allow me to",
    "start": "1156140",
    "end": "1162289"
  },
  {
    "text": "pass references to declare it functions as if they were kind of you know just lambdas or anonymous functions floating around something else that is really",
    "start": "1162289",
    "end": "1168590"
  },
  {
    "text": "cool and with kind of the kind of function type handling in Kotlin so",
    "start": "1168590",
    "end": "1174350"
  },
  {
    "start": "1173000",
    "end": "1450000"
  },
  {
    "text": "higher-order functions awesome so there are some a set of really cool higher-order functions in the standard",
    "start": "1174350",
    "end": "1180020"
  },
  {
    "text": "Lib that I've heard referred to as standard extensions but I believe some of the kind of newer learning material",
    "start": "1180020",
    "end": "1186350"
  },
  {
    "text": "for JetBrains refers to s COPE functions and as their name suggests they kind of allow you to play with scope and to kind",
    "start": "1186350",
    "end": "1192799"
  },
  {
    "text": "of play around with I guess how you want a group your code logically or or the kind of like you know align",
    "start": "1192799",
    "end": "1198740"
  },
  {
    "text": "two different behaviors but if you've been using Coughlin for some time these are basically those functions apply let",
    "start": "1198740",
    "end": "1204620"
  },
  {
    "text": "run and with and you kind of use these functions again to kind of play with scope play with like kind of what the",
    "start": "1204620",
    "end": "1210050"
  },
  {
    "text": "meaning of what you're doing is so if I have say this member config object that I'm creating from a factory method I",
    "start": "1210050",
    "end": "1215930"
  },
  {
    "text": "might want to kind of initialize some values on it I can use this apply scope function and I can very directly assign",
    "start": "1215930",
    "end": "1222260"
  },
  {
    "text": "properties on this member config object if I am doing some things like",
    "start": "1222260",
    "end": "1227750"
  },
  {
    "text": "initialization but I have some side affecting things going on like maybe I'm writing to a file or something I can call also to maybe like contain all",
    "start": "1227750",
    "end": "1235520"
  },
  {
    "text": "these side effects and if I want to run some things on an object that are kind of like a certain may be loading",
    "start": "1235520",
    "end": "1241520"
  },
  {
    "text": "behavior I'm doing I can call run and put that behavior in there now I know for me personally one of my big",
    "start": "1241520",
    "end": "1248210"
  },
  {
    "text": "challenges in Kotlin is trying to figure out what to call when like do I use apply also letting run I'm not going to",
    "start": "1248210",
    "end": "1254000"
  },
  {
    "text": "talk about that today but if you are kind of always scratching your head about that like I am there's a great talk by a friend of mine Christina Lee",
    "start": "1254000",
    "end": "1259580"
  },
  {
    "text": "called two stones one bird implement implementation trade-offs where she discusses kind of her philosophy and how",
    "start": "1259580",
    "end": "1265760"
  },
  {
    "text": "she kind of chooses which what to use when and it's a really good talk so she should check it out so part of my study",
    "start": "1265760",
    "end": "1272690"
  },
  {
    "text": "of Kotlin and trying to figure out what centered what the idiomatic Kotlin is rather is looking at these functions and",
    "start": "1272690",
    "end": "1279020"
  },
  {
    "text": "trying to figure out okay so i've got four of these things or five of these things maybe even six there's a lot and",
    "start": "1279020",
    "end": "1284450"
  },
  {
    "text": "i kind of wanted to figure out my for myself what do i use when and part of me figuring that out was looking at those",
    "start": "1284450",
    "end": "1290570"
  },
  {
    "text": "function signatures and asking some questions and trying to figure out okay what does this language feature what",
    "start": "1290570",
    "end": "1296270"
  },
  {
    "text": "does this particular structure what does that mean and how does that translate to what kind of the code looks like when",
    "start": "1296270",
    "end": "1301940"
  },
  {
    "text": "I'm using these scope functions so there's three questions I asked myself when looking at these and they're kind",
    "start": "1301940",
    "end": "1307220"
  },
  {
    "text": "of I think good questions to ask me trying to understand these concepts now there's a couple of terms here that you",
    "start": "1307220",
    "end": "1313220"
  },
  {
    "text": "don't understand I promise I will explain them in just a minute but my three questions are this so looking at",
    "start": "1313220",
    "end": "1318830"
  },
  {
    "text": "these scope functions I asked myself one is it an extension function two does it return the receiver or a new value and",
    "start": "1318830",
    "end": "1325970"
  },
  {
    "text": "three you pass a lambda or a lambda with a receiver so let's really quick take a",
    "start": "1325970",
    "end": "1332690"
  },
  {
    "text": "look at the source of these scope functions so this is pretty much the",
    "start": "1332690",
    "end": "1337910"
  },
  {
    "text": "source I'm leaving a few things out that I will explain later but these are just some of them and so I remember kind of",
    "start": "1337910",
    "end": "1345080"
  },
  {
    "text": "storing Kotlin clicking through into the open into the open source and seeing this so that first question I asked",
    "start": "1345080",
    "end": "1350240"
  },
  {
    "text": "asked is this particular function and extension function so if you're not",
    "start": "1350240",
    "end": "1355550"
  },
  {
    "text": "familiar this particular syntax here so I've got a function name but it's preceded by a type here's a generic type",
    "start": "1355550",
    "end": "1361940"
  },
  {
    "text": "but a type and then a dot this is this is basically a plot this is basically",
    "start": "1361940",
    "end": "1368360"
  },
  {
    "text": "making apply an extension function of whatever that type T is so if you see that that is generally an extension",
    "start": "1368360",
    "end": "1374150"
  },
  {
    "text": "function syntax so the second question I ask myself is does this function return the receiver or a new value so the",
    "start": "1374150",
    "end": "1381620"
  },
  {
    "text": "receiver is the this so when you have an extension function like this this object",
    "start": "1381620",
    "end": "1388490"
  },
  {
    "text": "here this is going to get called in an instance and that instance is the this inside of this function it's the receiver and as you can see some of",
    "start": "1388490",
    "end": "1395540"
  },
  {
    "text": "these functions like apply and also return this as opposed to say let's or let's say let's see run where it's",
    "start": "1395540",
    "end": "1402800"
  },
  {
    "text": "actually taking some function that I pass in evaluating it and returning the results of that evaluation so that's",
    "start": "1402800",
    "end": "1409700"
  },
  {
    "text": "what I mean when I ask myself is a returning receiver or is it returning a new value and finally I kind of look at",
    "start": "1409700",
    "end": "1416030"
  },
  {
    "text": "the parameters that go into these scope functions and ask myself is it a lambda or a lambda with receiver so basically",
    "start": "1416030",
    "end": "1423050"
  },
  {
    "text": "if it's a lambda generally speaking it's gonna be a regular function type it'll be a parameter list a right arrow and a",
    "start": "1423050",
    "end": "1429890"
  },
  {
    "text": "return type now if it's a lambda with receiver we kind of see again it's kind of same syntax where I have a type which",
    "start": "1429890",
    "end": "1436220"
  },
  {
    "text": "is also known as a receiver type the dot and then the parameter list so that's a land with receiver and that's kind of",
    "start": "1436220",
    "end": "1441410"
  },
  {
    "text": "another way that I kind of classify these different scope functions trying to figure out okay what does this mean and what does this syntax mean so",
    "start": "1441410",
    "end": "1448190"
  },
  {
    "text": "extensions now if you're kind of JVM II kind of background you might have",
    "start": "1448190",
    "end": "1453800"
  },
  {
    "start": "1450000",
    "end": "1700000"
  },
  {
    "text": "written maybe thousands of string utilities in your life I know I have and this is actually one that I wrote for work it basically",
    "start": "1453800",
    "end": "1459700"
  },
  {
    "text": "strips out diacriticals which you can kind of slightly inaccurately think of as accent marks so I wrote a function",
    "start": "1459700",
    "end": "1465760"
  },
  {
    "text": "that kind of uses some rags magic that I don't understand to strip out accent marks from some localized text to make",
    "start": "1465760",
    "end": "1472510"
  },
  {
    "text": "search easier and I actually wrote this it's a public static string utility and as you may know when you call like a",
    "start": "1472510",
    "end": "1479169"
  },
  {
    "text": "utility like this in Java you have this really not that great syntax where you have the name of the class containing",
    "start": "1479169",
    "end": "1485019"
  },
  {
    "text": "utility dot the name of the function and you pass it in a argument well okay we",
    "start": "1485019",
    "end": "1490090"
  },
  {
    "text": "can do a little bit better than that in Kotlin so what Kotlin extensions allow you to do is actually extend the",
    "start": "1490090",
    "end": "1496870"
  },
  {
    "text": "functionality of classes without either having to own the class without having to subclass it and you can still use",
    "start": "1496870",
    "end": "1502630"
  },
  {
    "text": "really nice intuitive or more intuitive syntax so here's my diacriticals removing function but written as a",
    "start": "1502630",
    "end": "1509289"
  },
  {
    "text": "Kotlin extension so when you write a call an extension it's going to look something like this you're going to have the fun cleat keyword you're going to",
    "start": "1509289",
    "end": "1515950"
  },
  {
    "text": "have that receiver type so that's the this inside of your function the class that you're trying to extend you have a dot and then you have name of the",
    "start": "1515950",
    "end": "1522130"
  },
  {
    "text": "function and that's it and again the string rather than being in an argument is the this that I'm calling kind of any",
    "start": "1522130",
    "end": "1529570"
  },
  {
    "text": "methods inside of my extension function with and if I actually want to call that method it looks something like this and",
    "start": "1529570",
    "end": "1538539"
  },
  {
    "text": "what's really cool is here where I'm actually calling remove diacriticals I call it as if it's like a method on that",
    "start": "1538539",
    "end": "1544450"
  },
  {
    "text": "string class but I don't know who the string class I'mnot subclassing it I just get to call",
    "start": "1544450",
    "end": "1549490"
  },
  {
    "text": "a utility method on it as if it kind of did exist in the string class and I think that's just really powerful and I",
    "start": "1549490",
    "end": "1555370"
  },
  {
    "text": "know like I've asked a lot of other kind of Kotlin devs like what's your favorite thing in Colin and it's extension functions and it's this really great",
    "start": "1555370",
    "end": "1561970"
  },
  {
    "text": "idea of adding functionality getting great syntax but also kind of either not mucking up your really nice kind of",
    "start": "1561970",
    "end": "1567220"
  },
  {
    "text": "abstraction classes and also again not having to be relying on interfaces and types or sub classing them sure",
    "start": "1567220",
    "end": "1576720"
  },
  {
    "text": "right yeah exactly that's a good question so when you write actually I'll",
    "start": "1582059",
    "end": "1587889"
  },
  {
    "text": "answer your question with a bytecode break and well I'll let you know so so X so extension functions are not the same",
    "start": "1587889",
    "end": "1595720"
  },
  {
    "text": "as subclasses or sub classing or not the same as actually altering a class and I'll give you an example and I'll show you why because it has a lot to do with",
    "start": "1595720",
    "end": "1601899"
  },
  {
    "text": "how they're implemented so here is my same extension function just with a",
    "start": "1601899",
    "end": "1608139"
  },
  {
    "text": "different name for collisions and if I look at the bike code what I really want",
    "start": "1608139",
    "end": "1613720"
  },
  {
    "text": "to decompile again because I'm a chicken and I look at this do you compile by code you can see basically - some like extra parameter",
    "start": "1613720",
    "end": "1620739"
  },
  {
    "text": "checking that this is pretty much the same public static function that I had before so yes there are visibility",
    "start": "1620739",
    "end": "1626440"
  },
  {
    "text": "issues when you write an extension function you only have you know the same visibility as any other kind of like",
    "start": "1626440",
    "end": "1632379"
  },
  {
    "text": "consumer of that class you can't ask as any public variables so that's kind of like again that's the ding on it it's",
    "start": "1632379",
    "end": "1638529"
  },
  {
    "text": "called an extension function but really it's adding functionality rather than extending that class so it is really",
    "start": "1638529",
    "end": "1645129"
  },
  {
    "text": "nice no but that is that is a good point and that is something to be aware of when you do when you do write extension functions that it's it's almost like",
    "start": "1645129",
    "end": "1651519"
  },
  {
    "text": "more focus on the utility part of it rather than actually expanding on the base class but very good question all",
    "start": "1651519",
    "end": "1658479"
  },
  {
    "text": "right and you know just to kind of hammer the point home I remember looking at all like going through strings",
    "start": "1658479",
    "end": "1663659"
  },
  {
    "text": "utilities when I was first using Kotlin and seeing all this really great stuff with Yuling Unicode code points and is",
    "start": "1663659",
    "end": "1670090"
  },
  {
    "text": "null or empty they're all done with extension functions so just to give you idea you know like yeah okay it's kind",
    "start": "1670090",
    "end": "1676539"
  },
  {
    "text": "of just you can argue that it's just an tactic sugar that you get to call it with this syntax but again kind of",
    "start": "1676539",
    "end": "1682269"
  },
  {
    "text": "understanding like you know how you can really better kind of organize your code",
    "start": "1682269",
    "end": "1687789"
  },
  {
    "text": "and kind of again associate kind of like these you know added utilities and behaviors and still have this really",
    "start": "1687789",
    "end": "1692830"
  },
  {
    "text": "nice intuitive syntax and not having to be reliant on subclassing and type interfaces can be really you know",
    "start": "1692830",
    "end": "1698289"
  },
  {
    "text": "helpful all right lambdas with receivers what Beck are those lambdas with receivers are actually super closely related to",
    "start": "1698289",
    "end": "1704710"
  },
  {
    "start": "1700000",
    "end": "2171000"
  },
  {
    "text": "extension functions now say that's you know okay let's go back and let's say I'm working for an",
    "start": "1704710",
    "end": "1710800"
  },
  {
    "text": "unscrupulous company that likes to make ia eyes and say that we're testing ass in hardware and we need some users or",
    "start": "1710800",
    "end": "1716500"
  },
  {
    "text": "test subjects let's call them users to test out our hardware now I might have an AI that you know goes ahead and",
    "start": "1716500",
    "end": "1722830"
  },
  {
    "text": "manages tests for me and say that rather than kind of always you know explicitly writing out all the statements I need to",
    "start": "1722830",
    "end": "1728710"
  },
  {
    "text": "run a test I might write some lambdas that encapsulate kind of different types of tests that I want to run now assuming",
    "start": "1728710",
    "end": "1734650"
  },
  {
    "text": "that I use integers too as ideas for tests which isn't great what we're going to do they're unscrupulous science",
    "start": "1734650",
    "end": "1739900"
  },
  {
    "text": "company what can you do maybe I have a particular test suite where I just run through a bunch of tests just all in a",
    "start": "1739900",
    "end": "1745600"
  },
  {
    "text": "loop or maybe I have a test where I run one test see if the subject passes and",
    "start": "1745600",
    "end": "1751060"
  },
  {
    "text": "then encourage the subject maybe positive reinforcement so they can so they make sure that they buy that kind of hardware that I've tested with them",
    "start": "1751060",
    "end": "1757150"
  },
  {
    "text": "or maybe they don't pass maybe I'll just bake him a cake because you know maybe like you know positive marketing and",
    "start": "1757150",
    "end": "1763270"
  },
  {
    "text": "stuff I would rather have the cake another case but anyway if I wanted to kind of capsule it kind of these different things that I might do and",
    "start": "1763270",
    "end": "1769810"
  },
  {
    "text": "have them kind of be actions that I can pass easily I might write these two lambdas now down here I have a",
    "start": "1769810",
    "end": "1776050"
  },
  {
    "text": "higher-order function that will maybe say run the test so say I have some parameters say the version type of my AI",
    "start": "1776050",
    "end": "1781960"
  },
  {
    "text": "test runner the name of my subject I mean user that's going to be going through this test and then some block",
    "start": "1781960",
    "end": "1787480"
  },
  {
    "text": "that's going to be that test suite that bunch of behaviors that I want to execute with my AI and with my test",
    "start": "1787480",
    "end": "1794110"
  },
  {
    "text": "subject I mean user so if I'm actually calling this higher-order function it might look something like this",
    "start": "1794110",
    "end": "1801940"
  },
  {
    "text": "so as you can see nothing too surprising I called an F method name passed in the two parameters and again passing in the",
    "start": "1801940",
    "end": "1808210"
  },
  {
    "text": "name of my lambda that's been stored inside a value cool and what's really cool about Colin is that also you can",
    "start": "1808210",
    "end": "1815050"
  },
  {
    "text": "define lambdas inline you're not kind of you're not slave to say sticking it in",
    "start": "1815050",
    "end": "1821680"
  },
  {
    "text": "variable first then pulling it out later you can very often define kind of function literals inline and very neatly",
    "start": "1821680",
    "end": "1826750"
  },
  {
    "text": "and if you're really really cute there's a shorthand in Kotlin where if you have a higher-order function and a lambda is",
    "start": "1826750",
    "end": "1832540"
  },
  {
    "text": "the last parameter in the list you can actually define that lambda on the",
    "start": "1832540",
    "end": "1837820"
  },
  {
    "text": "outside of the parens and I think that actually is a preferred convention lint will yell at you if you don't do that but anyway okay so this doesn't look too",
    "start": "1837820",
    "end": "1845130"
  },
  {
    "text": "much different than what I had before interesting very functional but you know I'm noticing something is that in these",
    "start": "1845130",
    "end": "1850980"
  },
  {
    "text": "vowels or sorry in these vowels containing lambdas and in the body I'm calling tester dot a lot chester dot",
    "start": "1850980",
    "end": "1858000"
  },
  {
    "text": "this test this test about this tester doubt that there's actually something I can do to make us a little bit better and cut that on the visual noise and",
    "start": "1858000",
    "end": "1864179"
  },
  {
    "text": "that's where land is with receivers come in so when you have a lambda with receiver you have a lambda and it has",
    "start": "1864179",
    "end": "1870899"
  },
  {
    "text": "multiple parameters right so what I do when I have a lambda receiver is I'm taking one of these parameters and I'm",
    "start": "1870899",
    "end": "1876750"
  },
  {
    "text": "actually giving it superpowers I'm kind of I like to say I'm elevating it and what happens is you take a parameter",
    "start": "1876750",
    "end": "1883139"
  },
  {
    "text": "from that from that lambda and you make it the receiver you make it the this",
    "start": "1883139",
    "end": "1888360"
  },
  {
    "text": "inside of that function block and rather than calling tester tester dot I can",
    "start": "1888360",
    "end": "1895049"
  },
  {
    "text": "actually remove all of these like this and now because the tester that was a",
    "start": "1895049",
    "end": "1901830"
  },
  {
    "text": "parameter is now that this inside I can much more easily call these methods inside without any qualifications ok so",
    "start": "1901830",
    "end": "1908700"
  },
  {
    "text": "again it seems like a little thing but you know how many times have you written like some initialization code or some",
    "start": "1908700",
    "end": "1914100"
  },
  {
    "text": "other code where you're just calling methods on the same object over and over again it kind of gets repetitive both for you as a developer and also again",
    "start": "1914100",
    "end": "1921210"
  },
  {
    "text": "visual noise and it's again claiming this idea of the scope functions as kind of creating this little scope this little idea that hey I'm doing a bunch",
    "start": "1921210",
    "end": "1927539"
  },
  {
    "text": "of things on this thing and we can do that we can kind of write our own versions of apply or let or with sorry",
    "start": "1927539",
    "end": "1934799"
  },
  {
    "text": "apply or also this way so what's really interesting is that okay I have these two now lambdas with receivers and I can",
    "start": "1934799",
    "end": "1942809"
  },
  {
    "text": "actually change my higher-order function here to take them in and I can do that very easily with an IDE intent action",
    "start": "1942809",
    "end": "1949500"
  },
  {
    "text": "and it actually allows me to select any parameter and then swap that into the receiver position and what's interesting",
    "start": "1949500",
    "end": "1955980"
  },
  {
    "text": "here is that so here I'm calling this block on this tester so now that the",
    "start": "1955980",
    "end": "1963419"
  },
  {
    "text": "tester is the receiver type I can call the block as if it was again a method function or a method on that types",
    "start": "1963419",
    "end": "1969720"
  },
  {
    "text": "pretty interesting so okay so I haven't convinced you why lambdas and lens receivers and doing",
    "start": "1969720",
    "end": "1975080"
  },
  {
    "text": "they are cool let me let me show you something else so say in my kind of running my my user",
    "start": "1975080",
    "end": "1981919"
  },
  {
    "text": "testing on this AI I have to activate the AI and then deactivate it later okay and it's something I do each time now",
    "start": "1981919",
    "end": "1989200"
  },
  {
    "text": "it's it's fine you know if as long as you remember to do it the test will run successfully but what if I wanted to",
    "start": "1989200",
    "end": "1994640"
  },
  {
    "text": "abstract that away what if I wanted to say hey I often forget to turn off my AI and we want to be you know even though",
    "start": "1994640",
    "end": "2000789"
  },
  {
    "text": "we're an unscrupulous AI company you want to make sure that we save you know the planet and conserve energy while we can well I could do something like this with",
    "start": "2000789",
    "end": "2006880"
  },
  {
    "text": "my higher-order function where I can actually abstract away what I love what I have heard called and I absolutely",
    "start": "2006880",
    "end": "2013120"
  },
  {
    "text": "love called ceremony so a lot of times when we're writing something you know we're using some resource and we have to",
    "start": "2013120",
    "end": "2019720"
  },
  {
    "text": "do a bunch of stuff at the beginning and a bunch of stuff at the end and that is important stuff but what we really care",
    "start": "2019720",
    "end": "2026380"
  },
  {
    "text": "about the critical logic is the stuff in the middle and we can use like lambdas and language receivers to abstract away",
    "start": "2026380",
    "end": "2032769"
  },
  {
    "text": "what is I love being called ceremony and then basically and trust that ceremony is done by this higher-order function so",
    "start": "2032769",
    "end": "2038799"
  },
  {
    "text": "I don't have to call you know this activate and deactivate I can actually clean up my code even more make it more",
    "start": "2038799",
    "end": "2045100"
  },
  {
    "text": "readable and kind of make it kind of more to the point right we have we kind of just are concerned with what the",
    "start": "2045100",
    "end": "2050378"
  },
  {
    "text": "actual thing is doing rather than the extra stuff and this is called the executor on method pattern it's",
    "start": "2050379",
    "end": "2055540"
  },
  {
    "text": "something else that I learned from the also in venkat subrahmanyam and you can actually see it in a lot of places in the standard library",
    "start": "2055540",
    "end": "2061358"
  },
  {
    "text": "if you've ever kind of thought if you've reviews try with resources in Java which",
    "start": "2061359",
    "end": "2066760"
  },
  {
    "text": "you know if you're working with input output streams you have to open the stream you have to close it if the clothes exceptions then you have to do",
    "start": "2066760",
    "end": "2073270"
  },
  {
    "text": "more weird stuff and a lot of that again is abstracted away using the try with resources construct Collin doesn't have",
    "start": "2073270",
    "end": "2080260"
  },
  {
    "text": "that particular functionality as a construct but it is a function like a utility function in standard library",
    "start": "2080260",
    "end": "2085839"
  },
  {
    "text": "called use and use again all that stuff with opening this file closing this file",
    "start": "2085839",
    "end": "2091810"
  },
  {
    "text": "gets a started away we trust' used to kind of manage that and then we in our little code block here in this little",
    "start": "2091810",
    "end": "2097780"
  },
  {
    "text": "lambda that we write can just focus on all right what do you want to do this file which i think is really really cool and again just kind of goes to this I",
    "start": "2097780",
    "end": "2104670"
  },
  {
    "text": "of Kotlin helping you write more kind of readable maintainable code and if you",
    "start": "2104670",
    "end": "2110400"
  },
  {
    "text": "have ever listened to the Kotlin comp 2018 keynote that was given by andre",
    "start": "2110400",
    "end": "2115470"
  },
  {
    "text": "breslov who leads the Colin team he had this great kind of section where he talked about kind of the motivations and",
    "start": "2115470",
    "end": "2121770"
  },
  {
    "text": "the values of Colin and he said that one of their goals is to write a language that allows you to take your thoughts",
    "start": "2121770",
    "end": "2127500"
  },
  {
    "text": "and translate them into working software and I think this is kind of one of those it's kind of one of those values kind of",
    "start": "2127500",
    "end": "2133799"
  },
  {
    "text": "like you know in the flesh so to speak in Kotlin this idea that okay ceremony is there it's perfunctory but we can",
    "start": "2133799",
    "end": "2141180"
  },
  {
    "text": "abstract it away and you can just focus on the thoughts the actual kind of important part that you're trying to get from your head onto the screen any",
    "start": "2141180",
    "end": "2149280"
  },
  {
    "text": "Android people in the house cool so there's a lot of this kind of execute around method in Android KTX which you",
    "start": "2149280",
    "end": "2155940"
  },
  {
    "text": "should totally take a look at and use if you have used some of the awesome new methods for making like fragment",
    "start": "2155940",
    "end": "2163160"
  },
  {
    "text": "transactions better those are kind of execute around method and you'll see lambdas and lance receivers in them",
    "start": "2163160",
    "end": "2168960"
  },
  {
    "text": "okay so there's not that many Android people I'm just gonna skip over and talk about closures and captures so all right",
    "start": "2168960",
    "end": "2174119"
  },
  {
    "start": "2171000",
    "end": "2430000"
  },
  {
    "text": "we've got these really great lambdas and lambs receivers and it's kind of this whole great idea of treating functions",
    "start": "2174119",
    "end": "2179190"
  },
  {
    "text": "as values and passing them around are there trade-offs yes and to talk about that let's talk about closures and",
    "start": "2179190",
    "end": "2184920"
  },
  {
    "text": "captures so ah let's see I it took me one week underground Rock what a closure",
    "start": "2184920",
    "end": "2191130"
  },
  {
    "text": "was and I finally did and if you I think this is actually from Mozilla but they define a closure as the combination of a",
    "start": "2191130",
    "end": "2197520"
  },
  {
    "text": "function and the lexical environment was in which that function was declared and I still didn't quite understand that after reading that but so basically",
    "start": "2197520",
    "end": "2204630"
  },
  {
    "text": "environment so when you declare a function the environment is basically kind of the local variables in scope to",
    "start": "2204630",
    "end": "2211290"
  },
  {
    "text": "where that function was defined and a function closes over those scope two values so that's a closure the function",
    "start": "2211290",
    "end": "2217470"
  },
  {
    "text": "as long as this kind of environment of visible values to it and when a function",
    "start": "2217470",
    "end": "2222660"
  },
  {
    "text": "actually reaches out and accesses one of those you know closed over scoped values those are those values are captured and",
    "start": "2222660",
    "end": "2229829"
  },
  {
    "text": "this is related a lot to say like in Java where you have an anonymous class it reaches out those values have to be",
    "start": "2229829",
    "end": "2236040"
  },
  {
    "text": "final because of the way the cool captions are done in Java but we're in Kotlin land let's talk about Kotlin so",
    "start": "2236040",
    "end": "2242450"
  },
  {
    "text": "let's talk about the cost that might be associated with using lambdas and letters receivers and all this great higher-order function stuff all right",
    "start": "2242450",
    "end": "2249500"
  },
  {
    "text": "we're back on our voyage of discovery you know things are going great we're having a great time meeting new people and new civilizations went oh",
    "start": "2249500",
    "end": "2255530"
  },
  {
    "text": "excuse me I just swore oh crap something happened we have you know enemies on board we have some kind of",
    "start": "2255530",
    "end": "2262250"
  },
  {
    "text": "amazing artifact that could help them destroy the universe let's just blow up the ship let's just got here well if I",
    "start": "2262250",
    "end": "2268430"
  },
  {
    "text": "wanted to right that particular sequence of the movie in Kotlin I might have say something like this alright I have a",
    "start": "2268430",
    "end": "2274460"
  },
  {
    "text": "ship computer the Steamship computer is an object that has a run commands run commands is a higher order function and",
    "start": "2274460",
    "end": "2280370"
  },
  {
    "text": "it takes some function literal some function some but a bunch of stuff that we want the computer do and takes care",
    "start": "2280370",
    "end": "2286550"
  },
  {
    "text": "of it so if I wanted to initiate self-destruction and get everyone off the boat I might write something like this I might ask for first crew",
    "start": "2286550",
    "end": "2293870"
  },
  {
    "text": "authorization because self-destruction was kind of a big deal let's make sure we have everyone's approval before we do it let's initiate self-destruct and",
    "start": "2293870",
    "end": "2300470"
  },
  {
    "text": "let's get the heck off the boat alright so if I go take a poop of a bytecode break to see what this looks like",
    "start": "2300470",
    "end": "2306530"
  },
  {
    "text": "and decompile will see nothing too late",
    "start": "2306530",
    "end": "2312020"
  },
  {
    "text": "nothing too surprising at all hey I have a lambda and I have that familiar and weird Nelda instance which means that I",
    "start": "2312020",
    "end": "2318050"
  },
  {
    "text": "have a single instance of that lambda which is getting invoked whenever I run this command cool no big deal",
    "start": "2318050",
    "end": "2323110"
  },
  {
    "text": "alright now we probably want to get people a little bit of time to get off the boat before we you know blow it up",
    "start": "2323110",
    "end": "2328490"
  },
  {
    "text": "so I actually have this second still parameter that it's passed and playing its self-destruct what if I go ahead and",
    "start": "2328490",
    "end": "2334670"
  },
  {
    "text": "actually let the computer know hey please wait certain amount of seconds before you book the boat and so we can",
    "start": "2334670",
    "end": "2340280"
  },
  {
    "text": "get make sure everyone get gets off the boat now what does that do to the actual underlying Java bytecode well oh my gosh",
    "start": "2340280",
    "end": "2347420"
  },
  {
    "text": "alright there's a lot more going on here there's basically a new function object being created each time there's some",
    "start": "2347420",
    "end": "2353030"
  },
  {
    "text": "scary-sounding things like synthetic and brooch methods and basically what's happening is because of the fact that I",
    "start": "2353030",
    "end": "2359120"
  },
  {
    "text": "just reached out and grabbed that outer variable in the environment that kind of scoped value I have changed it it can no",
    "start": "2359120",
    "end": "2366050"
  },
  {
    "text": "longer be a singleton it has to be now created as an object each time I you know each time I call this function",
    "start": "2366050",
    "end": "2372250"
  },
  {
    "text": "and okay in isolation that might not be a bad thing but if this is in you know",
    "start": "2372250",
    "end": "2377319"
  },
  {
    "text": "some kind of critical path or a loop this gets called all the time or just gets called all the time in general it",
    "start": "2377319",
    "end": "2382480"
  },
  {
    "text": "can add up so something to be aware of you know obviously a lot of Kotlin is about writing a readable you know",
    "start": "2382480",
    "end": "2388619"
  },
  {
    "text": "reusable code but something to be aware of is that there is a cost and if you are worried about performance if you're",
    "start": "2388619",
    "end": "2393789"
  },
  {
    "text": "on a critical path this is something to be aware of and again it's just something as simple as reaching out and",
    "start": "2393789",
    "end": "2398980"
  },
  {
    "text": "grabbing a scoped value okay so there",
    "start": "2398980",
    "end": "2404740"
  },
  {
    "text": "are some things though that you can do to kind of counteract some of these penalties at land us and that's through",
    "start": "2404740",
    "end": "2410079"
  },
  {
    "text": "inlining enlighting is really neat in landing a function basically means in Kotlin that you take the body of that function and copy and paste it right",
    "start": "2410079",
    "end": "2416980"
  },
  {
    "text": "into the to the call site and you can actually inline higher-order functions and that copying pastes both the",
    "start": "2416980",
    "end": "2422799"
  },
  {
    "text": "function body itself as long as the function body of any other kind of function parameters or lambdas that",
    "start": "2422799",
    "end": "2428470"
  },
  {
    "text": "you've passed in and to see what that looks like we're gonna take a byte code break and",
    "start": "2428470",
    "end": "2433539"
  },
  {
    "start": "2430000",
    "end": "2599000"
  },
  {
    "text": "so I can show you what happens when you inline a function in Colin alright so",
    "start": "2433539",
    "end": "2438549"
  },
  {
    "text": "this is a little bit different we come out of space we're working at a scary children's restaurant kind of something",
    "start": "2438549",
    "end": "2443950"
  },
  {
    "text": "that reminds me of that restaurant that starts with Chuck and ends with cheese and it's kind of a scary job a security",
    "start": "2443950",
    "end": "2449740"
  },
  {
    "text": "guard the like animatronic gosh it's really frightening are kind of scary they are haunted they kind of jump out",
    "start": "2449740",
    "end": "2455650"
  },
  {
    "text": "at you you tonight so it's not kind of like one of those security jobs we get to snooze you have to actually kind of be conscious and look out for things so",
    "start": "2455650",
    "end": "2462910"
  },
  {
    "text": "I thought you write a higher-order function like this that will help me kind of work through my shift and figure out what I need to do to survive the",
    "start": "2462910",
    "end": "2468460"
  },
  {
    "text": "night and if I call that higher-order function it might look something like this passing it a function literal where",
    "start": "2468460",
    "end": "2474460"
  },
  {
    "text": "you know I clock in close the doors watch security camera turn the lights to make sure I kind of find out these kind",
    "start": "2474460",
    "end": "2479529"
  },
  {
    "text": "of scary animatronic things and then clock out if I if I managed to make it now seeing what this looks like in the",
    "start": "2479529",
    "end": "2485680"
  },
  {
    "text": "bytecode will seem not anything too surprising in my main function I call a",
    "start": "2485680",
    "end": "2491799"
  },
  {
    "text": "work shift and again there's a singleton instance of my lambda that's getting called there no big deal alright so what",
    "start": "2491799",
    "end": "2498220"
  },
  {
    "text": "happens though if we go ahead and make this higher-order function that takes in you know that lambda in line so if we go",
    "start": "2498220",
    "end": "2505370"
  },
  {
    "text": "back to the bytecode decompile you can see that oh hey so instead of just",
    "start": "2505370",
    "end": "2511490"
  },
  {
    "text": "calling that function it literally has taken you know the body of mylanta and the body of this higher-order function",
    "start": "2511490",
    "end": "2517640"
  },
  {
    "text": "and copy pasted it to where I'd called it inside of main so this is one way to get past this problem with possibly",
    "start": "2517640",
    "end": "2524450"
  },
  {
    "text": "allocating a lot of memory or just basically instantiating a lot of objects with lambdas but as you can see there's",
    "start": "2524450",
    "end": "2529820"
  },
  {
    "text": "a lot more code there and so there's a trade-off to using inline and that it can bloat your code which at least you a",
    "start": "2529820",
    "end": "2536000"
  },
  {
    "text": "whole set of problems so again like tools to help deal with things but it's always going to depend on what your situation is and what you need something",
    "start": "2536000",
    "end": "2544460"
  },
  {
    "text": "really interesting though about inline functions is that remember how I said before that you cannot do non-local returns from lambdas because of you know",
    "start": "2544460",
    "end": "2551390"
  },
  {
    "text": "Oh whatever ever does execution context you don't have to worry actually worry about that in inline funk in line",
    "start": "2551390",
    "end": "2556580"
  },
  {
    "text": "functions because and so say did something like this ah let me do something like this see say inside of",
    "start": "2556580",
    "end": "2566000"
  },
  {
    "text": "here I want to say wait let me check the remaining battery because I need my flashlight I need my door if the battery",
    "start": "2566000",
    "end": "2572630"
  },
  {
    "text": "is not over a certain amount I'm just going to leave now if this was this function wasn't in line actually it's in",
    "start": "2572630",
    "end": "2580340"
  },
  {
    "text": "the block so I actually can do this is",
    "start": "2580340",
    "end": "2587960"
  },
  {
    "text": "not the right place it actually can do and you do it here so here if remaining",
    "start": "2587960",
    "end": "2594110"
  },
  {
    "text": "battery is less than 1.0 okay I'm gonna return now if the function was not in",
    "start": "2594110",
    "end": "2600680"
  },
  {
    "start": "2599000",
    "end": "2851000"
  },
  {
    "text": "line I wouldn't be able to do this because again I don't know you know it's you know what return ments when this",
    "start": "2600680",
    "end": "2605720"
  },
  {
    "text": "function was declared but if it's in line I can do that and the reason that is is that because the code is literally",
    "start": "2605720",
    "end": "2612380"
  },
  {
    "text": "being copy pasted to the call site there's no ambiguity about where what this return the refers to you right it",
    "start": "2612380",
    "end": "2617750"
  },
  {
    "text": "returns to here the main function so that's just another kind of nice thing about doing inline functions so there's",
    "start": "2617750",
    "end": "2630830"
  },
  {
    "text": "some other interesting things about in lines so if you if you inline a higher-order function",
    "start": "2630830",
    "end": "2636140"
  },
  {
    "text": "like I said everything gets inland everything that's got kind of copy-pasted that does have some impacts though say I actually still wanted to",
    "start": "2636140",
    "end": "2642770"
  },
  {
    "text": "kind of play around with my functions as values and pass them around I can't do that in a higher order function that",
    "start": "2642770",
    "end": "2648650"
  },
  {
    "text": "I've in lines like this because it's kind of no longer exists as it's like kind of discrete expression that I can",
    "start": "2648650",
    "end": "2654170"
  },
  {
    "text": "pass around I can't assign it so what I can do though is if I want to have my",
    "start": "2654170",
    "end": "2659180"
  },
  {
    "text": "higher-order function in line some of it but still keep some functions around he passes expressions I can use this no",
    "start": "2659180",
    "end": "2664430"
  },
  {
    "text": "inline keyword to say hey this particular you know function parameter I want to be able to treat as expression",
    "start": "2664430",
    "end": "2669560"
  },
  {
    "text": "so please don't inline it and then I can actually later on store it store it pass it around call it later that kind of",
    "start": "2669560",
    "end": "2676010"
  },
  {
    "text": "thing was no problem for the compiler and something to be aware of is that you know even though I said you can do",
    "start": "2676010",
    "end": "2683330"
  },
  {
    "text": "returns from inline there's an exception to that as well so say let's look at this higher-order function so one of",
    "start": "2683330",
    "end": "2690170"
  },
  {
    "text": "these parameters body is actually getting inlined into a runnable okay now we're getting in trouble because",
    "start": "2690170",
    "end": "2695180"
  },
  {
    "text": "runnable runs things later right so we're running to that same situation",
    "start": "2695180",
    "end": "2700430"
  },
  {
    "text": "where hey I might call return and it might actually be returning in some",
    "start": "2700430",
    "end": "2706190"
  },
  {
    "text": "other executing contacts that no longer exists so that's what this cross in line is for so if I didn't have cross in line",
    "start": "2706190",
    "end": "2711500"
  },
  {
    "text": "here this error would go away in like the lambda but then I would get an error up here saying hey I know that you can",
    "start": "2711500",
    "end": "2718640"
  },
  {
    "text": "call this later and you could possibly have a non-local returning here so I'm not gonna let you do that so if you kind of in the situation and",
    "start": "2718640",
    "end": "2725390"
  },
  {
    "text": "you want to kind of have your cake and eat it too you can specify a parameter B",
    "start": "2725390",
    "end": "2730580"
  },
  {
    "text": "cross inline it allows you to inline that function into something like",
    "start": "2730580",
    "end": "2736160"
  },
  {
    "text": "runnable that might get called later but it does enforce that you cannot have non-local returns in that lambda just",
    "start": "2736160",
    "end": "2742490"
  },
  {
    "text": "for safety so that's what that's for it took me forever to figure out what cross the inline was because it's kind of like not something I know I run into every",
    "start": "2742490",
    "end": "2748610"
  },
  {
    "text": "day something else interesting about inlining is reification so in Java world",
    "start": "2748610",
    "end": "2754690"
  },
  {
    "text": "probably some of us have tried really really hard when you have generics to take check and you know that because of",
    "start": "2754690",
    "end": "2759980"
  },
  {
    "text": "the way that generics work in Java the type information gets erased at compile time and so you just don't have access",
    "start": "2759980",
    "end": "2766040"
  },
  {
    "text": "it to it so you really couldn't do something like this but with inline functions in Kotlin and",
    "start": "2766040",
    "end": "2771280"
  },
  {
    "text": "reification you can now if I don't have here I see something like I would",
    "start": "2771280",
    "end": "2776470"
  },
  {
    "text": "normally see like saying Java where oh I'm trying to check if this is this whatever type T that gets passed in and",
    "start": "2776470",
    "end": "2782590"
  },
  {
    "text": "it can't be because it's because the type erasure what happens is if I do",
    "start": "2782590",
    "end": "2788260"
  },
  {
    "text": "reified into this generic because of the fact that again this function just gets",
    "start": "2788260",
    "end": "2793630"
  },
  {
    "text": "copy pasted it is known at compile time what that type is and if the information",
    "start": "2793630",
    "end": "2798970"
  },
  {
    "text": "is there so you can do this type checking like this now the reason that reified exists is that because or for",
    "start": "2798970",
    "end": "2806770"
  },
  {
    "text": "the sake of java interoperability normal inline functions can be called from java they just aren't inlined but to make",
    "start": "2806770",
    "end": "2813880"
  },
  {
    "text": "this kind of type awareness type checking work the compiler has to do some things with a bytecode and which is",
    "start": "2813880",
    "end": "2819910"
  },
  {
    "text": "what reified is for reify basically let enlist a compiler know hey can you make this okay can you kind of change things",
    "start": "2819910",
    "end": "2826180"
  },
  {
    "text": "around so that you know I can have that type of information available but that has kind of like the trade-off of making",
    "start": "2826180",
    "end": "2832690"
  },
  {
    "text": "this inline function not callable from java so just to let you know and for the Android people you're gonna see this a",
    "start": "2832690",
    "end": "2838000"
  },
  {
    "text": "lot like get system service one of my favorite utility functions is reified inline function alright real quick with",
    "start": "2838000",
    "end": "2844570"
  },
  {
    "text": "a few minutes I have left I'm just gonna breeze through a whole bunch of things that I love about Kotlin in the standard Lib and that you should definitely check",
    "start": "2844570",
    "end": "2849760"
  },
  {
    "text": "out this is kind of one of my favorite things one of my favorite stories about colin is that when i first learned to colin there's this two operator and i",
    "start": "2849760",
    "end": "2856810"
  },
  {
    "text": "kept trying to google things about it typing Kotlin operator two and I could never get search results",
    "start": "2856810",
    "end": "2862390"
  },
  {
    "text": "partly because two is a preposition and you know you know every if you've ever tried a Google two it's not a very fun experience but the reason I actually",
    "start": "2862390",
    "end": "2869170"
  },
  {
    "text": "couldn't find it is because this is not an operator it's not a reserved keyword it's a function and it's a function that",
    "start": "2869170",
    "end": "2874870"
  },
  {
    "text": "you can call like this in this kind of interesting you know minus the dot and minus the parens because of in fix in",
    "start": "2874870",
    "end": "2881470"
  },
  {
    "text": "fix it's kind of a special class calling notation where if you have a one parameter method or function you can and",
    "start": "2881470",
    "end": "2888340"
  },
  {
    "text": "you kind of Mark it with in fix you can call it as if it's like another operator keyword and if you if you've used down",
    "start": "2888340",
    "end": "2894280"
  },
  {
    "text": "to if you use the shift right operator they're not operators they're functions",
    "start": "2894280",
    "end": "2899660"
  },
  {
    "text": "and this is something you can definitely use in your own code I know actually one of my teammates at work just used it and",
    "start": "2899660",
    "end": "2905839"
  },
  {
    "text": "it's it's okay again it's syntactic sugar you might think it's silly but at the same time",
    "start": "2905839",
    "end": "2911150"
  },
  {
    "text": "depending on what you're using it might be helpful to write code in a more",
    "start": "2911150",
    "end": "2916160"
  },
  {
    "text": "fluent way that is makes something more understandable in our case at work we just I think we had to some kind of big",
    "start": "2916160",
    "end": "2921650"
  },
  {
    "text": "like state machine and we were translating and transforming things and it was really confusing we had some like chained arcs Java etc etc but at the end",
    "start": "2921650",
    "end": "2929420"
  },
  {
    "text": "we had this really nice in fix this kind of custom in fix notation that very explicitly said okay you were turning",
    "start": "2929420",
    "end": "2934819"
  },
  {
    "text": "this with this and it was just a really nice kind of again readable way to kind",
    "start": "2934819",
    "end": "2941150"
  },
  {
    "text": "of say hey here's the kind of return result and here's what what it means again providing more meaning and kind of",
    "start": "2941150",
    "end": "2947089"
  },
  {
    "text": "readability possibly to the code I'm sorry sure it's I didn't actually show",
    "start": "2947089",
    "end": "2954260"
  },
  {
    "text": "it it's inside of this class member here so it's a member function with the in fix notation on it sorry",
    "start": "2954260",
    "end": "2962599"
  },
  {
    "text": "trying to blast through just generally speaking conventions are something really interesting in Kotlin and it's",
    "start": "2962599",
    "end": "2968390"
  },
  {
    "start": "2963000",
    "end": "3114000"
  },
  {
    "text": "this idea that kind of unlike certain features in Java that you know you can open up try with resources if you're",
    "start": "2968390",
    "end": "2974599"
  },
  {
    "text": "using auto Klose bowls or you can use you know for : syntax if you have an",
    "start": "2974599",
    "end": "2980150"
  },
  {
    "text": "iterable those all depend on objects being a certain type conventions allow",
    "start": "2980150",
    "end": "2985549"
  },
  {
    "text": "you to do certain things if you have certain named functions and I can't go through and I love it operator",
    "start": "2985549",
    "end": "2991460"
  },
  {
    "text": "overloading works its way in Kotlin so does destructuring declarations these are all things you should google if you",
    "start": "2991460",
    "end": "2997490"
  },
  {
    "text": "if I don't have time I'm sorry delegates are great like that but I really wanted to take 40 seconds talk about contracts",
    "start": "2997490",
    "end": "3002980"
  },
  {
    "text": "so contracts are this really great thing in 1.3 and I literally found them by clicking into apply with let and run and",
    "start": "3002980",
    "end": "3009910"
  },
  {
    "text": "seeing these kind of weird contract things so contracts are basically a way for you to kind of tell the compiler how",
    "start": "3009910",
    "end": "3016170"
  },
  {
    "text": "something behaves so this is this is a hoops this is something that actually",
    "start": "3016170",
    "end": "3022000"
  },
  {
    "text": "happened to me at work I had a higher order function that allowed me to kind of pull out some initial values and I",
    "start": "3022000",
    "end": "3027309"
  },
  {
    "text": "was trying to assign a vowel within this higher order function and I got these errors saying captured value",
    "start": "3027309",
    "end": "3032529"
  },
  {
    "text": "initialization is and due to possible reassignment and I was like what is that basically what happens is the compiler can infer a lot",
    "start": "3032529",
    "end": "3038660"
  },
  {
    "text": "the cotton car is very smart but what it's saying is hey you have this higher-order function how do I know that",
    "start": "3038660",
    "end": "3044120"
  },
  {
    "text": "you're not going to call this function twice basically violating kind of the idea that I'm gonna be assigning my Val",
    "start": "3044120",
    "end": "3049430"
  },
  {
    "text": "once that's why it doesn't like that with contracts though really quick note",
    "start": "3049430",
    "end": "3054800"
  },
  {
    "text": "I've left if you're on 1.3 which everyone should be now cuz it's stable and out you can instead do something",
    "start": "3054800",
    "end": "3062030"
  },
  {
    "text": "like this contract early once and I have to add all kinds of annotations because",
    "start": "3062030",
    "end": "3067580"
  },
  {
    "text": "it's still in experiment mode and my",
    "start": "3067580",
    "end": "3076670"
  },
  {
    "text": "code now compiles and basically you know there's this really cool concert that says okay compiler I promise you that",
    "start": "3076670",
    "end": "3082340"
  },
  {
    "text": "this block gets called once so it allows you to do this value assignment and again I found this by just clicking into",
    "start": "3082340",
    "end": "3088400"
  },
  {
    "text": "the code so I encourage you all that are using Kotlin or haven't used Kotlin yet but will soon to do the same thing click",
    "start": "3088400",
    "end": "3094640"
  },
  {
    "text": "through like look at the open source try to copy what colin is doing riff on it make take your own spin on it and so you",
    "start": "3094640",
    "end": "3100970"
  },
  {
    "text": "can write your own sexy interesting hopefully more readable Kotlin constructs thank you very very much",
    "start": "3100970",
    "end": "3106610"
  },
  {
    "text": "enjoy the rest of go to [Applause]",
    "start": "3106610",
    "end": "3114349"
  }
]