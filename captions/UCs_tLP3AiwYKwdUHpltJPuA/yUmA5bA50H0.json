[
  {
    "start": "0",
    "end": "135000"
  },
  {
    "text": "[Music]",
    "start": "3500",
    "end": "7820"
  },
  {
    "text": "welcome everyone thanks for having me uh feel free to ask ask questions throughout today so we'll make the try",
    "start": "12040",
    "end": "17720"
  },
  {
    "text": "to make this interactive um but yeah use grab that mic if you can okay so let's start with a little reminder that",
    "start": "17720",
    "end": "26599"
  },
  {
    "text": "configuration changes can have pretty big impacts uh and so this is something",
    "start": "26599",
    "end": "32000"
  },
  {
    "text": "that's a huge challenge for us um anyone here used yaml okay yeah like everyone anyone here",
    "start": "32000",
    "end": "38360"
  },
  {
    "text": "ever had a production issue because of yaml half yeah yeah so there's some",
    "start": "38360",
    "end": "43960"
  },
  {
    "text": "challenges with yaml um so we're going to talk about maybe a better option and so let's dive in um so for today I'm",
    "start": "43960",
    "end": "51960"
  },
  {
    "text": "going to just be writing some code and then showing some examples and hopefully",
    "start": "51960",
    "end": "57160"
  },
  {
    "text": "you get a sense for for what pickle is so just just has some background pickle is an open- Source configuration",
    "start": "57160",
    "end": "63359"
  },
  {
    "text": "language created by Apple and really for me the the three key parts of it are",
    "start": "63359",
    "end": "68720"
  },
  {
    "text": "that it's safe so it gives you a lot better safety than things like yaml uh gives you a lot better",
    "start": "68720",
    "end": "74520"
  },
  {
    "text": "reusability uh something that's kind of hard and yaml is to avoid copy and paste",
    "start": "74520",
    "end": "80079"
  },
  {
    "text": "when you want to reuse things and then also productive it has great tooling kind of built around pickle uh so let's",
    "start": "80079",
    "end": "87079"
  },
  {
    "text": "just dive in and start riding some pickle so I'm I'm in a project here I'm in a pickle file and there's a number of",
    "start": "87079",
    "end": "93960"
  },
  {
    "text": "different ways to use pickle we'll see some of those today um but I'm starting with just this file and then I do have",
    "start": "93960",
    "end": "99119"
  },
  {
    "text": "this build running continuously in the background that's going to compile my pickle source code into my yaml",
    "start": "99119",
    "end": "106880"
  },
  {
    "text": "configuration so usually with pickle uh you don't have to do it this way but",
    "start": "106880",
    "end": "111920"
  },
  {
    "text": "usually you go from pickle to the the type of file format that your configuration system supports so if",
    "start": "111920",
    "end": "118320"
  },
  {
    "text": "you're doing kubernetes probably yam if you're doing cloud formation then also yaml if you're doing GitHub actions",
    "start": "118320",
    "end": "124439"
  },
  {
    "text": "also yl but there are other languages other places where you need different",
    "start": "124439",
    "end": "129879"
  },
  {
    "text": "things and you can go from pickle to other languages but really I think yaml is the the primary one so let's start",
    "start": "129879",
    "end": "136360"
  },
  {
    "start": "135000",
    "end": "2715000"
  },
  {
    "text": "writing some code so first pickle is declarative so I can come in and do my lovely Foo bar example there and so when",
    "start": "136360",
    "end": "144200"
  },
  {
    "text": "I save that change it's going to rebuild recompile essentially my pickle source",
    "start": "144200",
    "end": "149920"
  },
  {
    "text": "code and now we see the wonderful yaml there where we get my Fu uh is bar there",
    "start": "149920",
    "end": "155360"
  },
  {
    "text": "in the yaml so that's our our kind of just starter it's declarative has some other things on top of it but let's go a",
    "start": "155360",
    "end": "161720"
  },
  {
    "text": "little bit further on to the next one so let's go into types so one of the really",
    "start": "161720",
    "end": "166959"
  },
  {
    "text": "nice things I really like strong and static typing uh is that we can specify types in our configuration and so now",
    "start": "166959",
    "end": "174560"
  },
  {
    "text": "let's come in and I don't know let's have a name and I'm going to say that my name is a string",
    "start": "174560",
    "end": "180560"
  },
  {
    "text": "and now I can give it a value right so there's my my value ASF and I can save",
    "start": "180560",
    "end": "186200"
  },
  {
    "text": "that and of course the yl is going to be what we expect but if for some reason I try to put in not a string then I",
    "start": "186200",
    "end": "193120"
  },
  {
    "text": "actually get a compile air uh we can actually if we save this we'll we'll see it down here say like it'll actually",
    "start": "193120",
    "end": "198760"
  },
  {
    "text": "tell tell me all the details in the compiler about that or in the IDE so there's VSS code uh and intellig is what",
    "start": "198760",
    "end": "206440"
  },
  {
    "text": "I'm using plugins uh I think there's also like Zed plugin and other plugins um but now I actually see in my IDE the",
    "start": "206440",
    "end": "213799"
  },
  {
    "text": "red squiggly quickly identify that I've violated the types there so great let's",
    "start": "213799",
    "end": "219439"
  },
  {
    "text": "get that back to to working so types awesome in our configuration we can",
    "start": "219439",
    "end": "224560"
  },
  {
    "text": "become safer by putting some constraints around what we can Define and how we can",
    "start": "224560",
    "end": "230200"
  },
  {
    "text": "Define things in our configuration so that's kind of the first step to safer configuration but it goes a little bit",
    "start": "230200",
    "end": "237000"
  },
  {
    "text": "further in pickle because we can also have typ constraints so I can come in and say all right um I want a port and",
    "start": "237000",
    "end": "244519"
  },
  {
    "text": "my port is going to be an INT and let's just set it to we'll start with 80 so",
    "start": "244519",
    "end": "250159"
  },
  {
    "text": "that's valid configuration right I can save this and that should recompile and",
    "start": "250159",
    "end": "255519"
  },
  {
    "text": "then we'll see sure enough my port 80 there is is okay but I can actually now",
    "start": "255519",
    "end": "261280"
  },
  {
    "text": "come in and say that the int must be greater than 1024 and now that is a",
    "start": "261280",
    "end": "267000"
  },
  {
    "text": "compile error where you're not able to actually compile my configuration um",
    "start": "267000",
    "end": "272240"
  },
  {
    "text": "because we have violated the constraint we get the airor message there and the IDE tell me what the constraint violation is so I can come in and",
    "start": "272240",
    "end": "279160"
  },
  {
    "text": "correct that oh and it has to be larger than 1024 there we go and now my configuration is okay again so type",
    "start": "279160",
    "end": "286560"
  },
  {
    "text": "constraints are awesome huge part of the way that we can really uh concisely",
    "start": "286560",
    "end": "291800"
  },
  {
    "text": "Define what the valid states are for our configuration okay so that's um types",
    "start": "291800",
    "end": "298039"
  },
  {
    "text": "and type constraints pause the there any questions so far anything you're like I",
    "start": "298039",
    "end": "303120"
  },
  {
    "text": "really don't understand what pickle is yet um anything go",
    "start": "303120",
    "end": "307840"
  },
  {
    "text": "ahead good question yeah so the question is about like as the user of pickle how",
    "start": "319120",
    "end": "324639"
  },
  {
    "text": "is this helping me is and so a big part of it is by having the constraints",
    "start": "324639",
    "end": "330319"
  },
  {
    "text": "around what is what means valid configuration and we do that through types and type constraints and we'll see",
    "start": "330319",
    "end": "336000"
  },
  {
    "text": "some other ways in a little bit uh and then the developer as they're actually writing their configuration they're",
    "start": "336000",
    "end": "342400"
  },
  {
    "text": "going to just like you saw here see those compile errors and they're not going to be able to actually output a",
    "start": "342400",
    "end": "347479"
  },
  {
    "text": "valid yaml configuration until it's actually valid configuration and so it",
    "start": "347479",
    "end": "352800"
  },
  {
    "text": "just puts this gate you know like a compiler uh for a compiled language it's going to put this gate in front of",
    "start": "352800",
    "end": "358440"
  },
  {
    "text": "getting to that that thing that then gets used by the system or run on a",
    "start": "358440",
    "end": "363479"
  },
  {
    "text": "system if we're talking about compilers right so it really is kind of like a compiler and that it's just providing that that gate that won't allow us to",
    "start": "363479",
    "end": "370240"
  },
  {
    "text": "get to that next step production updating our IAC whatever it may be until we have our configuration in a",
    "start": "370240",
    "end": "376800"
  },
  {
    "text": "valid State yeah good question yeah go ahead what you're get next can you",
    "start": "376800",
    "end": "383080"
  },
  {
    "text": "define your own types oh great question let's do that so can you define your own",
    "start": "383080",
    "end": "388479"
  },
  {
    "text": "types absolutely so you've seen some of the built-in types so let's define our own type here so I'm going to say let's",
    "start": "388479",
    "end": "395160"
  },
  {
    "text": "have a class person and a person is going to have a property that is called name and is a string and of course we",
    "start": "395160",
    "end": "402599"
  },
  {
    "text": "could put in you know type constraints on here just like you saw before but I'll leave it just as that and now if I",
    "start": "402599",
    "end": "408520"
  },
  {
    "text": "save this and it recompiles you'll see that nothing has gone into my configuration this is just like a",
    "start": "408520",
    "end": "413639"
  },
  {
    "text": "synthetic type that's only for compile time essentially and so then I can start",
    "start": "413639",
    "end": "418960"
  },
  {
    "text": "actually using my type so let's create a person Bob and Bob is going to be a new",
    "start": "418960",
    "end": "424120"
  },
  {
    "text": "person and now we can set that property name equal to Bob now because we've",
    "start": "424120",
    "end": "431039"
  },
  {
    "text": "defined or declared a property now we go back to our yaml and see that sure enough now we have something in our",
    "start": "431039",
    "end": "437400"
  },
  {
    "text": "configuration that is that type person but that the actual type information is now gone from the output artifact this",
    "start": "437400",
    "end": "444080"
  },
  {
    "text": "would be like reified types in uh in Java or something uh okay so so that's",
    "start": "444080",
    "end": "449560"
  },
  {
    "text": "that's how we can Define types there's a couple other ways that we'll see in a minute but there's a little more that I",
    "start": "449560",
    "end": "454960"
  },
  {
    "text": "want to show here so we can also of course have more properties let's put in like an age and let's say that age is an",
    "start": "454960",
    "end": "461160"
  },
  {
    "text": "INT and we want to set Bob's age equal to 32 right so that's all fine but what",
    "start": "461160",
    "end": "467720"
  },
  {
    "text": "about nullability so an important uh property of modern type systems is often",
    "start": "467720",
    "end": "472759"
  },
  {
    "text": "to have some way to express nullability and so if I want to be able to say that Bob's age is null that's the best agage",
    "start": "472759",
    "end": "480319"
  },
  {
    "text": "uh then I can't do that that's actually invalid because by default the types are",
    "start": "480319",
    "end": "486560"
  },
  {
    "text": "non-nullable if I do want them to be nullable then I'm going to add a question mark which is similar to cotlin",
    "start": "486560",
    "end": "491639"
  },
  {
    "text": "Syntax for how we express nullability so now that age property can be null but we have to explicitly say whether or not",
    "start": "491639",
    "end": "498319"
  },
  {
    "text": "it's nullable we can also set a default there and then I don't even need to set the property there okay so that's our",
    "start": "498319",
    "end": "505080"
  },
  {
    "text": "our basic types uh we can call them classes schemas but really it is the way that we can constrain the the types that",
    "start": "505080",
    "end": "512320"
  },
  {
    "text": "we're working with because often times it's helpful to represent things in other than strings ins booleans lists",
    "start": "512320",
    "end": "518560"
  },
  {
    "text": "you know other other basic primitive types okay so that's our our classes and we're going to see a couple other",
    "start": "518560",
    "end": "524159"
  },
  {
    "text": "examples for ways that we can represent data essentially and constrain data but did that answer that question great",
    "start": "524159",
    "end": "531240"
  },
  {
    "text": "awesome okay any other questions before I go on to more pickle okay so we talked about",
    "start": "531240",
    "end": "537480"
  },
  {
    "text": "nullability uh here's something amazing comments amazing to have a declarative language that supports multi-line",
    "start": "537480",
    "end": "543839"
  },
  {
    "text": "comments single line comments but that it even goes further because I can set up uh let's call it like um first name",
    "start": "543839",
    "end": "551320"
  },
  {
    "text": "no let's call this one uh place and my place is going to be a string and I'm going to just set it to Denver uh now we",
    "start": "551320",
    "end": "558560"
  },
  {
    "text": "can come in on any uh property anywhere and do a triple slash and now we can say",
    "start": "558560",
    "end": "564839"
  },
  {
    "text": "this place is cold right and now if we um go look at this property anywhere we",
    "start": "564839",
    "end": "570920"
  },
  {
    "text": "reference that property you'll get the information about the comment it's a doc",
    "start": "570920",
    "end": "576440"
  },
  {
    "text": "comment so this is helpful if you're creating libraries then you likely want to put Doc comments on your classes on",
    "start": "576440",
    "end": "583120"
  },
  {
    "text": "your properties you know everywhere you can so that now your users back to the question earlier now your users have",
    "start": "583120",
    "end": "589680"
  },
  {
    "text": "even beyond the type information also have docs for what you can do in",
    "start": "589680",
    "end": "595200"
  },
  {
    "text": "configuration uh explain things through that so great comments doc comments that's all great so another one here is",
    "start": "595200",
    "end": "603240"
  },
  {
    "text": "um another way to to constrain what we can do is to create type aliases or really just um have a more concise",
    "start": "603240",
    "end": "610320"
  },
  {
    "text": "Syntax for this so I can create a type Alias and you'll see some code",
    "start": "610320",
    "end": "615560"
  },
  {
    "text": "completion in here as I'm doing some of this so some really good tooling around this uh let's create a type Alias called",
    "start": "615560",
    "end": "623160"
  },
  {
    "text": "nonempty string and this type alas is going to be a string with a constraint",
    "start": "623160",
    "end": "629640"
  },
  {
    "text": "and my constraint is going to be not is empty okay so that's my my basic type",
    "start": "629640",
    "end": "636079"
  },
  {
    "text": "Alias so now I can start using that type instead of having to repeat the that",
    "start": "636079",
    "end": "641320"
  },
  {
    "text": "particular constraint so let's create a property that's going to be uh first name and this is going to be a non-empty",
    "start": "641320",
    "end": "648519"
  },
  {
    "text": "string and the value so you'll see that when I have an empty string it's like hey sorry uh compile error essentially",
    "start": "648519",
    "end": "655480"
  },
  {
    "text": "you can't do that it has to have a valid value uh and then of course you can come",
    "start": "655480",
    "end": "660880"
  },
  {
    "text": "in and put in multiple type constraints um you can separate these with uh logical operators or with commas so I",
    "start": "660880",
    "end": "667519"
  },
  {
    "text": "can also say like um this dot contains uh a you know for some reason",
    "start": "667519",
    "end": "673639"
  },
  {
    "text": "we wanted to make sure that our string contained the letter a um so yeah so all",
    "start": "673639",
    "end": "678920"
  },
  {
    "text": "sorts of different things we can do with with the type constraints and the and the type aliases combined together okay",
    "start": "678920",
    "end": "685399"
  },
  {
    "text": "so that's type aliases so one of the things that is important in this new world where many of us are using coding",
    "start": "685399",
    "end": "691480"
  },
  {
    "text": "assistance is that there's there is coding assistance support for all the",
    "start": "691480",
    "end": "697320"
  },
  {
    "text": "new and new toys we want to be playing with and so I was actually pretty surprised uh I've I've tried a few of",
    "start": "697320",
    "end": "702480"
  },
  {
    "text": "them but we'll see if this this works here um I can come in to I'm using Q developer in this case but I think you",
    "start": "702480",
    "end": "708399"
  },
  {
    "text": "get a similar experience in other coding assistants you can say explain this code and okay so it actually knows like this",
    "start": "708399",
    "end": "715440"
  },
  {
    "text": "is pickle so Pickle's like brand new I think it's been out for like nine months or something something like that um so a",
    "start": "715440",
    "end": "720720"
  },
  {
    "text": "lot of the coding assistants have been trained or at least know enough about uh the the new things like pickle that can",
    "start": "720720",
    "end": "727519"
  },
  {
    "text": "actually come in and describe code and help you write it and all that kind of stuff so I think that was kind of important because if we're using coding",
    "start": "727519",
    "end": "733959"
  },
  {
    "text": "assistance you know and stuff hopefully we'll work with new things and sure enough seems like it works pretty well",
    "start": "733959",
    "end": "739639"
  },
  {
    "text": "it explained to me those type constraints and all that kind of stuff so so that's a a recommendation I would",
    "start": "739639",
    "end": "745600"
  },
  {
    "text": "make is when you choose new technologies um choose ones that your coding assistance can help you with um okay uh",
    "start": "745600",
    "end": "753320"
  },
  {
    "text": "next um little feature of of pickle is enums so if we want to Define an enum so",
    "start": "753320",
    "end": "759839"
  },
  {
    "text": "this is something that can only be constrained to specific values then what we can actually do is just to create a",
    "start": "759839",
    "end": "765720"
  },
  {
    "text": "type Alias I'm going to create a type Alias for something called machine and then we'll say windows or Linux so",
    "start": "765720",
    "end": "774440"
  },
  {
    "text": "that's how we Define the the enum in pickle and so now I can come in and say",
    "start": "774440",
    "end": "780079"
  },
  {
    "text": "u m mine is a machine and it's going to be equal to a Mac no that's an invalid",
    "start": "780079",
    "end": "788079"
  },
  {
    "text": "value you can't set your machine to a Mac because that is not in the type Alias of machine it's not a valid en",
    "start": "788079",
    "end": "794160"
  },
  {
    "text": "value uh so my favorite operating system which I don't present on because um",
    "start": "794160",
    "end": "799800"
  },
  {
    "text": "Linux uh is Linux so so we'll put in in Linux there for my machine I present on",
    "start": "799800",
    "end": "805560"
  },
  {
    "text": "Windows because it's a little more reliable for that sort of thing um okay so uh enums great to have built into the",
    "start": "805560",
    "end": "814040"
  },
  {
    "text": "language there so now the next feature I want to cover is objects so for objects",
    "start": "814040",
    "end": "819800"
  },
  {
    "text": "this allows us to define the kind of Anonymous classes essentially so let's come in and write a build config object",
    "start": "819800",
    "end": "827399"
  },
  {
    "text": "and my build config is going to have a l um let's make that a string and we're",
    "start": "827399",
    "end": "833240"
  },
  {
    "text": "going to put in the language of cotlin so now if I save this we should hopefully get this to compile is it",
    "start": "833240",
    "end": "839440"
  },
  {
    "text": "going to do I have an air somewhere oh no where's my air somewhere up",
    "start": "839440",
    "end": "845759"
  },
  {
    "text": "here let's go look at our air message and see oh ah we can't we can't do the types",
    "start": "846320",
    "end": "853759"
  },
  {
    "text": "in in objects that was the mistake I me interesting that the ID didn't tell me about that I have to file a bug on that",
    "start": "853759",
    "end": "859240"
  },
  {
    "text": "one um but there we go Lang cotlin now let's go look at our config here so there we go you can see that's just kind",
    "start": "859240",
    "end": "864920"
  },
  {
    "text": "of the object structure of yaml so that's our basic kind of Anonymous object we didn't have to define a class",
    "start": "864920",
    "end": "871720"
  },
  {
    "text": "to get that object structure um but there's something cool we can do when we work with these these objects is we can",
    "start": "871720",
    "end": "878360"
  },
  {
    "text": "amend them and so I want to have another build config let's call this one um I",
    "start": "878360",
    "end": "885120"
  },
  {
    "text": "don't know um newer okay and to to set a",
    "start": "885120",
    "end": "890880"
  },
  {
    "text": "property to this amended version of this build config what we do is we put the",
    "start": "890880",
    "end": "897600"
  },
  {
    "text": "the previous instance that that we're going to reference there in parentheses and then we can come in and override",
    "start": "897600",
    "end": "903399"
  },
  {
    "text": "things so I could say Lang equals Scala and then I can add additional properties",
    "start": "903399",
    "end": "909079"
  },
  {
    "text": "to this as well I can say like version equals and put in a version and then if",
    "start": "909079",
    "end": "914120"
  },
  {
    "text": "we save this we'll see that sure enough there's my my newer object there um so",
    "start": "914120",
    "end": "920680"
  },
  {
    "text": "it use the name here build config and then you'll see that it used the name newer for that second one so you can",
    "start": "920680",
    "end": "927120"
  },
  {
    "text": "adjust the names however you want to but that's how the the templates and amending templates work yeah",
    "start": "927120",
    "end": "934839"
  },
  {
    "text": "question Define varable with types but not in objects is it inferring uh the type sorry is it inferring the type or",
    "start": "936040",
    "end": "943040"
  },
  {
    "text": "Could you type Lang equals two or is it inferring that because build configures L equals string on objects I well let's",
    "start": "943040",
    "end": "949959"
  },
  {
    "text": "try so it's like like putting in like an INT here so it's just going to override it there is no there is no schema in",
    "start": "949959",
    "end": "956440"
  },
  {
    "text": "this case it's like an anonymous object like essentially like Json right it's like a Json data structure at this point",
    "start": "956440",
    "end": "962880"
  },
  {
    "text": "um so if you want a lot of safety you're going to go to classes and types and type aliases um but but there is this",
    "start": "962880",
    "end": "969839"
  },
  {
    "text": "way to amend objects and I think we I think we can actually do this on let's",
    "start": "969839",
    "end": "975519"
  },
  {
    "text": "try it on our person so we had a person named Bob right and I think we can come in and amend Bob and add some properties",
    "start": "975519",
    "end": "981399"
  },
  {
    "text": "to Bob but let's see if that's actually going to work may not um there is a way",
    "start": "981399",
    "end": "986959"
  },
  {
    "text": "to like amend some things but I I think I think uh it's oh didn't like that",
    "start": "986959",
    "end": "993639"
  },
  {
    "text": "available properties age and name so okay we can't amend amend a class I think there is maybe a a word you can",
    "start": "993639",
    "end": "1000040"
  },
  {
    "text": "put in front of class to actually make it amendable I think it's maybe open or something like that which will make it amendable but by default the class is",
    "start": "1000040",
    "end": "1006839"
  },
  {
    "text": "going to be closed so you can't amend it like I'm doing here but the anonymous object essentially you can amend",
    "start": "1006839",
    "end": "1012519"
  },
  {
    "text": "properties into and override properties with whatever uh type information you want yeah go ahead",
    "start": "1012519",
    "end": "1020839"
  },
  {
    "text": "so there uh there is a way to to essentially dive down in but you're",
    "start": "1028319",
    "end": "1034000"
  },
  {
    "text": "going to have to specify all the properties down the chain there's not something like lenses is is a functional",
    "start": "1034000",
    "end": "1040880"
  },
  {
    "text": "programming way to to do kind of nested mutations and I haven't seen anything like lenses for pickle yet but um yeah",
    "start": "1040880",
    "end": "1048720"
  },
  {
    "text": "yeah so as far as I know no no lens kind of API for for pickle but good question",
    "start": "1048720",
    "end": "1055000"
  },
  {
    "text": "I have just a quick question because you sort of touched on it but um like",
    "start": "1055000",
    "end": "1060440"
  },
  {
    "text": "looking in the yaml the class and the object appear the same so is one of them",
    "start": "1060440",
    "end": "1066160"
  },
  {
    "text": "just a stronger typed um thing or like are there other differences between",
    "start": "1066160",
    "end": "1072480"
  },
  {
    "text": "objects yeah the yaml representation is the same yeah so oops I close that so",
    "start": "1072480",
    "end": "1077520"
  },
  {
    "text": "because yaml doesn't have any type information built into it oh and it went away because I've got an invalid let's",
    "start": "1077520",
    "end": "1084159"
  },
  {
    "text": "get this thing built in again and then we'll go look at it um so because yaml doesn't have any type information in it",
    "start": "1084159",
    "end": "1090559"
  },
  {
    "text": "when it gets transformed to yaml you lose all the type information so it's really there for the developer who is",
    "start": "1090559",
    "end": "1096559"
  },
  {
    "text": "working on the pickle code writing their configuration so that they can make sure that they have correct configuration",
    "start": "1096559",
    "end": "1103039"
  },
  {
    "text": "valid configuration before they go to yaml uh so really it's just a a um like",
    "start": "1103039",
    "end": "1109080"
  },
  {
    "text": "types in a in a compiled language they're they're mostly there for the",
    "start": "1109080",
    "end": "1114240"
  },
  {
    "text": "developer at developer time and then and then you can think of yaml as your like binary output where a lot of that",
    "start": "1114240",
    "end": "1121400"
  },
  {
    "text": "information is is gone okay um",
    "start": "1121400",
    "end": "1126720"
  },
  {
    "text": "let's there we go now we got my Amel back okay all right we'll continue on we",
    "start": "1126720",
    "end": "1131919"
  },
  {
    "text": "got we covered templates so there are some apis for uh collection data structures here so first is a listing so",
    "start": "1131919",
    "end": "1139840"
  },
  {
    "text": "when I Define this listing I'm going to Define it as a local and I'll show you why for that in a second and then I'm",
    "start": "1139840",
    "end": "1146799"
  },
  {
    "text": "going to say let's create a new listing of string string there we go I should be",
    "start": "1146799",
    "end": "1152440"
  },
  {
    "text": "using um and let's do that okay oh this way there",
    "start": "1152440",
    "end": "1159480"
  },
  {
    "text": "we go okay so new listing of string so you'll see that there are some generics",
    "start": "1159480",
    "end": "1164520"
  },
  {
    "text": "in pickle as well so we can generif uh things like lists and map apps and and other things but now let's come in and",
    "start": "1164520",
    "end": "1171120"
  },
  {
    "text": "add our animals we've got a cat and we've got a dog right and the reason why I made that thing local was because I",
    "start": "1171120",
    "end": "1178120"
  },
  {
    "text": "didn't actually want that to show up in my compiled yaml if I make it not local",
    "start": "1178120",
    "end": "1183840"
  },
  {
    "text": "then that's going to show up in there right um but I don't want that one to show up I actually want uh some other",
    "start": "1183840",
    "end": "1190600"
  },
  {
    "text": "thing to show up so let's create a new thing called animal and this is going to be a structure where I'm going to do a",
    "start": "1190600",
    "end": "1196679"
  },
  {
    "text": "for Loop so we're going to say for animal in my animals list and then we've",
    "start": "1196679",
    "end": "1203200"
  },
  {
    "text": "got our for Loop where now we can create a new just a new basic object and set the name equal to my underscore animal",
    "start": "1203200",
    "end": "1211559"
  },
  {
    "text": "right and yeah that should be good I think so let's try that should compile",
    "start": "1211559",
    "end": "1217360"
  },
  {
    "text": "and now we can see that now I've kind of just manipulated my data structure so there's a lot of different ways to start",
    "start": "1217360",
    "end": "1223120"
  },
  {
    "text": "with a data structure and then do some mutation on it or transformation on it to get to the type of structure that we",
    "start": "1223120",
    "end": "1230360"
  },
  {
    "text": "then need in our",
    "start": "1230360",
    "end": "1233039"
  },
  {
    "text": "yaml put local in front of an object oh let's go try so like this one right",
    "start": "1235640",
    "end": "1242720"
  },
  {
    "text": "local no oh and maybe if I type it correctly",
    "start": "1242720",
    "end": "1248280"
  },
  {
    "text": "let's see oh so yeah can do local object cool as long as you type correctly nice",
    "start": "1248280",
    "end": "1254919"
  },
  {
    "text": "to have a compiler that tells me when I've not typed things correctly okay Okay so we've got four Loops um we've",
    "start": "1254919",
    "end": "1260760"
  },
  {
    "text": "also uh got um Maps so you can have a map from one type to another type we've",
    "start": "1260760",
    "end": "1266880"
  },
  {
    "text": "got sets we've got if Expressions um but I want to skip ahead to functions so",
    "start": "1266880",
    "end": "1272960"
  },
  {
    "text": "function kind of weird in a declarative language to have the ability to have a function but you can and so I'm going to",
    "start": "1272960",
    "end": "1279799"
  },
  {
    "text": "have a function that is just an ad uh ads um to an INT and the body of that is",
    "start": "1279799",
    "end": "1285880"
  },
  {
    "text": "going to be I + one just for Simplicity so that's our function now we can use",
    "start": "1285880",
    "end": "1291480"
  },
  {
    "text": "this right so I could say like 2 equals adder with one and of course that's",
    "start": "1291480",
    "end": "1297320"
  },
  {
    "text": "going to run that function so there's very few places in in pickle where we",
    "start": "1297320",
    "end": "1302799"
  },
  {
    "text": "can have side effects so most of the time this is like totally deterministic functions uh it's like this like single",
    "start": "1302799",
    "end": "1309200"
  },
  {
    "text": "pass through pickle to get us to our output values but there are a few places where we can interact with the external",
    "start": "1309200",
    "end": "1316000"
  },
  {
    "text": "system essentially it's environment variables and property these files you can read in and so your behavior can",
    "start": "1316000",
    "end": "1322200"
  },
  {
    "text": "actually change potentially if you've passed in uh different inputs into the",
    "start": "1322200",
    "end": "1327720"
  },
  {
    "text": "the transformation of pickle to your yaml file but most of the time um these",
    "start": "1327720",
    "end": "1333080"
  },
  {
    "text": "functions are well they're always pure functions there is no ability to have a side effect within the function but",
    "start": "1333080",
    "end": "1339559"
  },
  {
    "text": "maybe an input to that function changes um when you do your pickle",
    "start": "1339559",
    "end": "1344720"
  },
  {
    "text": "evaluation uh okay and then there's ways to like mutate a a map uh or a",
    "start": "1344720",
    "end": "1349760"
  },
  {
    "text": "collection with with a map function um and then there's also librar so I do",
    "start": "1349760",
    "end": "1355880"
  },
  {
    "text": "want to show just a little bit about libraries before we go on to the the next one here but I have a library here",
    "start": "1355880",
    "end": "1361799"
  },
  {
    "text": "called helpers and in helpers I've defined a class I probably should have put some Doc comments on this and then",
    "start": "1361799",
    "end": "1367279"
  },
  {
    "text": "I've got a function in Denver that uses that address class and so of course we can come in here I've already imported",
    "start": "1367279",
    "end": "1373440"
  },
  {
    "text": "it and I can say U let's let's give it a name first we'll say helpers do in",
    "start": "1373440",
    "end": "1379200"
  },
  {
    "text": "Denver right and I get code completion on this this is just a local library but we'll look in a little bit at libraries",
    "start": "1379200",
    "end": "1385480"
  },
  {
    "text": "that are external and let's call it I don't know one um First Street Street",
    "start": "1385480",
    "end": "1392559"
  },
  {
    "text": "there we go and so that's going to now use my library let's go oh I lost my AML again there it is uh so that's going to",
    "start": "1392559",
    "end": "1399440"
  },
  {
    "text": "use that library to to have some logic and classes and that sort of thing so um",
    "start": "1399440",
    "end": "1405000"
  },
  {
    "text": "so we'll talk more about libraries in a little bit the standard Li liary the things that come with pickle there's a",
    "start": "1405000",
    "end": "1410440"
  },
  {
    "text": "bunch of stuff in there there's there's rejects there's durations there's um all sorts of just just great help helper",
    "start": "1410440",
    "end": "1417640"
  },
  {
    "text": "functions in there I want to just show duration real quick because it's kind of a cool one so I'm going to create a",
    "start": "1417640",
    "end": "1422799"
  },
  {
    "text": "local we'll call this one t and I'm going to say all right 10 uh let's do one minute minus 10. seconds so we can",
    "start": "1422799",
    "end": "1431880"
  },
  {
    "text": "do math in the duration Library um but if I try to actually print this this thing out so let's take off the local",
    "start": "1431880",
    "end": "1439200"
  },
  {
    "text": "um I'm actually going to get an air because yaml doesn't have any way to represent durations uh and so there is",
    "start": "1439200",
    "end": "1445720"
  },
  {
    "text": "no no um normal way to convert a duration to to yaml so you'll see that",
    "start": "1445720",
    "end": "1452880"
  },
  {
    "text": "we can go see the compiler down here it's like it's essentially going to say like I can't convert a duration to yaml",
    "start": "1452880",
    "end": "1459080"
  },
  {
    "text": "and so we do have to do something different here let's create a property here called V and V is going to um let's",
    "start": "1459080",
    "end": "1466919"
  },
  {
    "text": "give this a type get that type inference on here T dot okay now I'm going to say",
    "start": "1466919",
    "end": "1473760"
  },
  {
    "text": "to unit I tell it what type of unit I want this in and then I can get the value out of it and now this will be",
    "start": "1473760",
    "end": "1481240"
  },
  {
    "text": "valid yamel because value is a number so we can look at that and see that yep 1",
    "start": "1481240",
    "end": "1487039"
  },
  {
    "text": "minute minus 10 seconds converted to seconds is going to give us 50 so again",
    "start": "1487039",
    "end": "1492760"
  },
  {
    "text": "in the yaml side all of the type information was is now gone um but at",
    "start": "1492760",
    "end": "1498000"
  },
  {
    "text": "least on the pickle side we were able to have a nice API uh that's just built into the standard library for dealing",
    "start": "1498000",
    "end": "1503880"
  },
  {
    "text": "with durations so okay so that's kind of our our super quick there's a bunch of other stuff in the standard library and",
    "start": "1503880",
    "end": "1510919"
  },
  {
    "text": "and a few more language features that I didn't cover but really a pretty concise syntax pretty uh limited amount of",
    "start": "1510919",
    "end": "1517760"
  },
  {
    "text": "things that you can do with pickle I actually think this is important like there's things like cdk and other",
    "start": "1517760",
    "end": "1523080"
  },
  {
    "text": "languages that that allow you to do more but I actually really like for configuration that things are pretty",
    "start": "1523080",
    "end": "1529039"
  },
  {
    "text": "constrained you can learn this language in literally like an hour uh cuz it's",
    "start": "1529039",
    "end": "1534320"
  },
  {
    "text": "it's a pretty small set of of features for the language so I think it's actually a positive thing that this",
    "start": "1534320",
    "end": "1540000"
  },
  {
    "text": "isn't a general purpose language it's really intended for configuration and that's it um okay before I switch gears",
    "start": "1540000",
    "end": "1546960"
  },
  {
    "text": "to some spring stuff any questions about pickle before I go on yeah go",
    "start": "1546960",
    "end": "1554080"
  },
  {
    "text": "like um like a multi string multi-line string or something like that yeah so let's oh good question let's try it so",
    "start": "1559480",
    "end": "1565640"
  },
  {
    "text": "let's say um Fu equals and so now I get my multi-line string right I think",
    "start": "1565640",
    "end": "1572960"
  },
  {
    "text": "that's what you're asking about was multi-line strings so it does do the yaml style block for that uh it also",
    "start": "1572960",
    "end": "1579440"
  },
  {
    "text": "does clever things like um you may be aware of the fun with no and yaml um no",
    "start": "1579440",
    "end": "1587720"
  },
  {
    "text": "is actually Boolean right uh in yaml um and so by default if you do a no um then",
    "start": "1587720",
    "end": "1595640"
  },
  {
    "text": "you can actually have a production issue uh especially if you're working with the country of Norway um because yaml",
    "start": "1595640",
    "end": "1602840"
  },
  {
    "text": "parsers will think that no is a Boolean meaning no false um and so pickle is",
    "start": "1602840",
    "end": "1608520"
  },
  {
    "text": "just like I know about that fun little thing about yaml and it's going to quote no for us so that it gets interpreted as",
    "start": "1608520",
    "end": "1615399"
  },
  {
    "text": "a string and not a Boolean so some nice things things to to save us from some",
    "start": "1615399",
    "end": "1620679"
  },
  {
    "text": "yaml pain there okay um good question okay so let's move on to the next",
    "start": "1620679",
    "end": "1626640"
  },
  {
    "text": "project here which is going to show one of the the cool features of um pickle",
    "start": "1626640",
    "end": "1632559"
  },
  {
    "text": "that is is pretty unique is language bindings so in pickle there are language",
    "start": "1632559",
    "end": "1637679"
  },
  {
    "text": "bindings where you can use pickle to generate your yaml that's all fine but you can also use pickle within language",
    "start": "1637679",
    "end": "1644600"
  },
  {
    "text": "so an example of this is spring boot I've got a spring it could be Java I've used cotlin for this one um so there's",
    "start": "1644600",
    "end": "1652000"
  },
  {
    "text": "jvm Java cotlin support and then a couple other languages uh I think um go",
    "start": "1652000",
    "end": "1658480"
  },
  {
    "text": "I think there might be a rust language binding now that's that's created from the community but so language binding it's allow us to use pickle in another",
    "start": "1658480",
    "end": "1665600"
  },
  {
    "text": "host language so first let's let's see what this looks like in spring so what we need is a a schema uh to Define what",
    "start": "1665600",
    "end": "1673880"
  },
  {
    "text": "the structure of our configuration is going to be when we're going to use that configuration over in the other system",
    "start": "1673880",
    "end": "1679640"
  },
  {
    "text": "so I've created this module I've given it a name and then I have a class called server server has a listing of endpoints",
    "start": "1679640",
    "end": "1686960"
  },
  {
    "text": "I have a type constraint on there an endpoint is just a name and a port and then you'll see that my my module is",
    "start": "1686960",
    "end": "1694360"
  },
  {
    "text": "going to require that I Define a server so that's that's essentially my schema",
    "start": "1694360",
    "end": "1699559"
  },
  {
    "text": "for my configuration that is what that isn't my actual configuration yet that is just the schema that defines what my",
    "start": "1699559",
    "end": "1705559"
  },
  {
    "text": "configuration looks like so with with the language bindings we actually get a",
    "start": "1705559",
    "end": "1711679"
  },
  {
    "text": "class that's generated from that schema and so you can see my app config there",
    "start": "1711679",
    "end": "1717159"
  },
  {
    "text": "is my generated class and so this got generated for me through the language bindings in pickle and you can see it",
    "start": "1717159",
    "end": "1724080"
  },
  {
    "text": "brought in some of the comments and stuff so it in this case I had it generate cotlin but you can also generate Java other languages as well so",
    "start": "1724080",
    "end": "1731600"
  },
  {
    "text": "now I have created a a typesafe way for my spring application configuration to",
    "start": "1731600",
    "end": "1737720"
  },
  {
    "text": "be find in pickle so first with the schema then the code generation where",
    "start": "1737720",
    "end": "1742880"
  },
  {
    "text": "then I can actually use my configuration right I'm using it in this very basic HTTP server and returning it in the",
    "start": "1742880",
    "end": "1749159"
  },
  {
    "text": "response but obviously not the useful way to use configuration but as an example there we go so then I have to",
    "start": "1749159",
    "end": "1755880"
  },
  {
    "text": "have some way to to Define uh the actual configuration for my spring application",
    "start": "1755880",
    "end": "1761480"
  },
  {
    "text": "and so I do that in a separate pickle and you can certainly move that schema pickle out into a library do that in",
    "start": "1761480",
    "end": "1767320"
  },
  {
    "text": "different ways um you do need to have the schema but it doesn't have to be in the same project like it is here and so",
    "start": "1767320",
    "end": "1773200"
  },
  {
    "text": "now I'm going to say all right I'm going to amend that that module um that I'm",
    "start": "1773200",
    "end": "1779279"
  },
  {
    "text": "just referencing it through the file system there but again other ways to do that uh so I'm going to amend that and",
    "start": "1779279",
    "end": "1785399"
  },
  {
    "text": "so because the schema back here said I need a server so it's left with no",
    "start": "1785399",
    "end": "1791360"
  },
  {
    "text": "implementation then my actual um when I amend that template I need to now",
    "start": "1791360",
    "end": "1797159"
  },
  {
    "text": "specify the server so I specify it with a couple end points there and let's go start up my server so we can verify that",
    "start": "1797159",
    "end": "1804000"
  },
  {
    "text": "this all works but so when the spring boot application starts it's going to load that class that got generated from",
    "start": "1804000",
    "end": "1811159"
  },
  {
    "text": "the schema and then it's going to load the pickle configuration and it's going to make sure that the pickle",
    "start": "1811159",
    "end": "1817440"
  },
  {
    "text": "configuration conforms and can be turned into the actual class at runtime uh in",
    "start": "1817440",
    "end": "1823120"
  },
  {
    "text": "the jvm and it looks like it all started up good and now if I go to Local Host",
    "start": "1823120",
    "end": "1828960"
  },
  {
    "text": "8080 we'll see there's my configuration so that's um how we can use language",
    "start": "1828960",
    "end": "1834559"
  },
  {
    "text": "bindings just one example of that and the pickle team has explicitly added the spring support as one of the kind of",
    "start": "1834559",
    "end": "1841519"
  },
  {
    "text": "higher level language bindings available in pickle okay so questions about",
    "start": "1841519",
    "end": "1847320"
  },
  {
    "text": "language bindings I didn't know I didn't go into kind of all the general concepts about langu language bindings but did",
    "start": "1847320",
    "end": "1853000"
  },
  {
    "text": "that make sense any any questions about that using it from from other",
    "start": "1853000",
    "end": "1858960"
  },
  {
    "text": "languages okay all right let's move on to the next example here so let's see",
    "start": "1858960",
    "end": "1865960"
  },
  {
    "text": "let's go to um let's go to kubernetes one so there is this vast Library",
    "start": "1865960",
    "end": "1873799"
  },
  {
    "text": "ecosystem may not vast yet there's there's a good healthy Library ecosystem around pickle a lot of it is driven by",
    "start": "1873799",
    "end": "1880440"
  },
  {
    "text": "Apple and their needs um it would seem because they have support for spring and",
    "start": "1880440",
    "end": "1885960"
  },
  {
    "text": "kubernetes and a number of other things that that they've built those for themselves but now there's a number of",
    "start": "1885960",
    "end": "1892360"
  },
  {
    "text": "third-party libraries that that have come out as well and so one of the libraries in pickle that that has come",
    "start": "1892360",
    "end": "1898559"
  },
  {
    "text": "out of apple is kubernetes so they have taken the kubernetes API I think it",
    "start": "1898559",
    "end": "1903960"
  },
  {
    "text": "comes from an open API specification and they turn that into the pickle type definitions for the kubernetes yaml and",
    "start": "1903960",
    "end": "1912159"
  },
  {
    "text": "so this means that if we're using the pickle kubernetes library then we can get to valid configur ation before we",
    "start": "1912159",
    "end": "1919720"
  },
  {
    "text": "create our yaml and give it over to kubernetes so you'll see that I'm importing the kubernetes library here uh",
    "start": "1919720",
    "end": "1927039"
  },
  {
    "text": "this is just the the import syntax there's a little bit cleaner import syntax that I could use but this um it's",
    "start": "1927039",
    "end": "1934120"
  },
  {
    "text": "just the easy one that conveys like it's Source based it's going to pull down essentially a zip file uh from somewhere",
    "start": "1934120",
    "end": "1940760"
  },
  {
    "text": "for security you can actually restrict when you build your pickle you can restrict which uh modules are able to be",
    "start": "1940760",
    "end": "1947480"
  },
  {
    "text": "import so if you're in a a environment where you don't want to allow anyone to use any pickle um then you can do that",
    "start": "1947480",
    "end": "1954960"
  },
  {
    "text": "through specifying essentially a um allow list on on when you do your pickle",
    "start": "1954960",
    "end": "1960600"
  },
  {
    "text": "evaluation Okay so we've got the the two things that we're pulling in here from the pickle kubernetes library but then",
    "start": "1960600",
    "end": "1967679"
  },
  {
    "text": "I've also created a another little Library which maybe at some point I'll actually publish it right now it's just",
    "start": "1967679",
    "end": "1973399"
  },
  {
    "text": "in this this project but for kubernetes what we need to do is have a list of",
    "start": "1973399",
    "end": "1978519"
  },
  {
    "text": "resources so I'm defining my listing of K8 resource and we can go and look at",
    "start": "1978519",
    "end": "1984240"
  },
  {
    "text": "that and here's the pickle source code for that K8 resource right and I there's",
    "start": "1984240",
    "end": "1990240"
  },
  {
    "text": "not a whole lot of stuff in there API version in kind um does it uh maybe extend oh it extends the K8 object which",
    "start": "1990240",
    "end": "1997960"
  },
  {
    "text": "we can dive into as well and then you know keep Drilling in but it's a pretty extensive Library all automatically",
    "start": "1997960",
    "end": "2004159"
  },
  {
    "text": "generated from open API I think um for for the KU um definitions and so here the first",
    "start": "2004159",
    "end": "2011679"
  },
  {
    "text": "thing that I have is uh a little function that I've created called easy deployment. create and I want to deploy",
    "start": "2011679",
    "end": "2018440"
  },
  {
    "text": "engine X on Port 80 and let me show you the um what's underneath that it's a",
    "start": "2018440",
    "end": "2023960"
  },
  {
    "text": "function that takes some parameters and then is going to generate the deployment which comes from the kubernetes package",
    "start": "2023960",
    "end": "2030760"
  },
  {
    "text": "right and then it's going to set all the properties on the deployment so this gets you know usual yaml this gets",
    "start": "2030760",
    "end": "2035919"
  },
  {
    "text": "pretty tedious and repetitive and so just put it into a function that's reusable publish your library and now",
    "start": "2035919",
    "end": "2042519"
  },
  {
    "text": "you can have these much more much more uh tight interfaces to how you want to",
    "start": "2042519",
    "end": "2047880"
  },
  {
    "text": "Define things so I love this about pickle that I can have that super easy reusability across AC through libraries",
    "start": "2047880",
    "end": "2055079"
  },
  {
    "text": "across um across this stuff so um so okay I'm creating my my deployment then",
    "start": "2055079",
    "end": "2062358"
  },
  {
    "text": "just for fun I put in a config map and so we can see the config map there and then the yaml that comes out out of that",
    "start": "2062359",
    "end": "2068000"
  },
  {
    "text": "I'll just show you the the output yaml so whole lot nicer for me to to specify",
    "start": "2068000",
    "end": "2073679"
  },
  {
    "text": "the pickle have the type safety have the type constraints all that kind of stuff and get the yaml that I need to give to",
    "start": "2073679",
    "end": "2079280"
  },
  {
    "text": "kubernetes um so I think that's uh that's for me pretty compelling when I'm working with kubernetes to to write",
    "start": "2079280",
    "end": "2085398"
  },
  {
    "text": "pickle now certainly I can't give my pickle file to kubernetes I do have to give it the yaml file so there has to be",
    "start": "2085399",
    "end": "2091520"
  },
  {
    "text": "some process that you go through to go from pickle to yaml you can put that into your CI if you want um but yeah you",
    "start": "2091520",
    "end": "2098400"
  },
  {
    "text": "do have to do that conversion in order to give kubernetes what it needs which is",
    "start": "2098400",
    "end": "2103720"
  },
  {
    "text": "yaml okay questions on the kubernetes",
    "start": "2103720",
    "end": "2108359"
  },
  {
    "text": "one there's a there's a lot of Alternatives out there for this but Helm charts is obviously a big one um so for",
    "start": "2111960",
    "end": "2118400"
  },
  {
    "text": "me the the biggest differences are that I have a a language that's really around configuration but it's General",
    "start": "2118400",
    "end": "2124800"
  },
  {
    "text": "configuration so I can use it for more than just kubernetes and I do use it for a lot of different things but it's one",
    "start": "2124800",
    "end": "2131440"
  },
  {
    "text": "language that can be used in many places whereas Helm charts pretty sure most people just use that for kubernetes but",
    "start": "2131440",
    "end": "2136960"
  },
  {
    "text": "um so yeah for me that's that's a bit of a trade-off there maybe maybe there's some downsides to that because pickle is",
    "start": "2136960",
    "end": "2144240"
  },
  {
    "text": "not just about kubernetes maybe there could be some better features or something if it was only about kubernetes but it really is General",
    "start": "2144240",
    "end": "2150319"
  },
  {
    "text": "configuration on any domain yeah good question are there any general tools to",
    "start": "2150319",
    "end": "2155599"
  },
  {
    "text": "convert open API specs into to pickle libraries I haven't seen a generalized",
    "start": "2155599",
    "end": "2161000"
  },
  {
    "text": "tool for that yet um if you go look in the repo that hosts the the kubernetes",
    "start": "2161000",
    "end": "2167040"
  },
  {
    "text": "one you can see how they do that in there I would love for them to eventually just have a tool that would",
    "start": "2167040",
    "end": "2172920"
  },
  {
    "text": "do an automatic conversion I don't know if it's too nuanced for that or not but but the the one that exists in the",
    "start": "2172920",
    "end": "2179400"
  },
  {
    "text": "kubernetes one has been replicated in other places as well so good question",
    "start": "2179400",
    "end": "2185599"
  },
  {
    "text": "Yeah question on the back",
    "start": "2185599",
    "end": "2189280"
  },
  {
    "text": "I'm wondering if there are any security concern concerns about arbitrary code execution with any of this stuff it's a",
    "start": "2193119",
    "end": "2200319"
  },
  {
    "text": "good question I um one of the nice things about pickle which I don't know",
    "start": "2200319",
    "end": "2205359"
  },
  {
    "text": "if this totally answer it but one of the nice things about pickle is pickle has no ability to write to the file system",
    "start": "2205359",
    "end": "2212000"
  },
  {
    "text": "uh to execute code uh it is purely just this declarative format that then gets",
    "start": "2212000",
    "end": "2219200"
  },
  {
    "text": "evaluated and so so I think for the most part you're going to be pretty constrained on what the capabilities of",
    "start": "2219200",
    "end": "2225680"
  },
  {
    "text": "evaluation of that can be with the language bindings you can do that evaluation you know in a safe you know",
    "start": "2225680",
    "end": "2232040"
  },
  {
    "text": "environment within within your application and not have the ability for pickle to somehow call some make some",
    "start": "2232040",
    "end": "2239319"
  },
  {
    "text": "some execution to the the underlying system so I think generally it it is",
    "start": "2239319",
    "end": "2244960"
  },
  {
    "text": "like a declar a normal declarative language and that it's not going to have kind of the Escape hatches where you",
    "start": "2244960",
    "end": "2250280"
  },
  {
    "text": "know if you allow somebody to upload um python or or Skylar I think is is the",
    "start": "2250280",
    "end": "2255560"
  },
  {
    "text": "python variant for for Google's build system um basil uh you potentially if",
    "start": "2255560",
    "end": "2260880"
  },
  {
    "text": "you're executing code there's a lot of risk to that and this it's really interpreted uh and into the model that",
    "start": "2260880",
    "end": "2268680"
  },
  {
    "text": "you're converting it to so yaml or or the language binding syntax so so I think it's going to be a lot safer than",
    "start": "2268680",
    "end": "2275359"
  },
  {
    "text": "probably a lot of other options but I want to say that it's 100% safe because I'm sure someone will will find some way",
    "start": "2275359",
    "end": "2281240"
  },
  {
    "text": "to to break break something but yeah good question so does that mean like you can't execute it and pass in like",
    "start": "2281240",
    "end": "2288800"
  },
  {
    "text": "command line parameters so say you wrote this file and you want to pass it off to someone who doesn't really",
    "start": "2288800",
    "end": "2294960"
  },
  {
    "text": "know conf yaml or whatever but you want them to be able to output yaml and they can just say like dash dash name is",
    "start": "2294960",
    "end": "2302480"
  },
  {
    "text": "engine X d-port right and then rather than have them go in and change the",
    "start": "2302480",
    "end": "2308000"
  },
  {
    "text": "values or yeah so this is a a conversation that's come up um just recently with the pickle folks is this",
    "start": "2308000",
    "end": "2314319"
  },
  {
    "text": "idea of like having like essentially like an API to the pickle configuration and that doesn't exist yet but I think",
    "start": "2314319",
    "end": "2321280"
  },
  {
    "text": "that's something that will come at some point I've experimented with like using pickle to Define like Gradle builds and",
    "start": "2321280",
    "end": "2327119"
  },
  {
    "text": "in that case part of what I wanted to get to you was being able to run like my Gradle command ad dependency Fu and have",
    "start": "2327119",
    "end": "2334599"
  },
  {
    "text": "it update my pickle right and so that tooling doesn't tooling API doesn't",
    "start": "2334599",
    "end": "2339800"
  },
  {
    "text": "exist yet for pickle but I'm sure it'll come at some point to support the kind of use cases that you're talking",
    "start": "2339800",
    "end": "2345839"
  },
  {
    "text": "about um good questions okay moving on to so that was that was for kubernetes",
    "start": "2345839",
    "end": "2351720"
  },
  {
    "text": "let's move on to um let's do um cloud formation so uh so there is a cloud",
    "start": "2351720",
    "end": "2359640"
  },
  {
    "text": "formation if you're using cloud formation to Define your infrastructure for Amazon there is a pickle library",
    "start": "2359640",
    "end": "2364680"
  },
  {
    "text": "that like the open API to for kubernetes one um it it gets built based on the",
    "start": "2364680",
    "end": "2371400"
  },
  {
    "text": "actual schemas of cloud formation and then generates the pickle libraries so",
    "start": "2371400",
    "end": "2377119"
  },
  {
    "text": "that means that we get some type information for things like a roll right and all the the different all of the",
    "start": "2377119",
    "end": "2384520"
  },
  {
    "text": "different um things that you can do in cloud formation you can do in in pickle so that's all great and I've started",
    "start": "2384520",
    "end": "2390040"
  },
  {
    "text": "defining my AWS infrastructure with pickle and like it it's it's it's good",
    "start": "2390040",
    "end": "2396160"
  },
  {
    "text": "but one of the cool things I can do is start to now create some higher level uh libraries on top of that foundational",
    "start": "2396160",
    "end": "2403160"
  },
  {
    "text": "thing so one of the things that I did was I just wanted to be able to in like let's see this is um 15 lines of code I",
    "start": "2403160",
    "end": "2413040"
  },
  {
    "text": "I wanted to be able to spin up an entire website uh and have that website you",
    "start": "2413040",
    "end": "2418720"
  },
  {
    "text": "know have a domain name I wanted to even have that domain name get registered automatically and so I created a library",
    "start": "2418720",
    "end": "2425040"
  },
  {
    "text": "that does exactly that so now in my cloud formation pickle definition I really get this concise API essentially",
    "start": "2425040",
    "end": "2432280"
  },
  {
    "text": "to spin up a whole bunch of things this ends up being like 500 lines of yaml underneath the covers right and so nice",
    "start": "2432280",
    "end": "2439240"
  },
  {
    "text": "that that now I get these higher level abstractions um for some pretty complex cloud formation but um cloud formation",
    "start": "2439240",
    "end": "2446079"
  },
  {
    "text": "pickle Library it's it's great uh it's up on on GitHub and uh if you're doing cloud formation um so much better than",
    "start": "2446079",
    "end": "2453680"
  },
  {
    "text": "than yaml in my opinion so um so yeah and then hopefully I'll make some more progress on some higher level pickle",
    "start": "2453680",
    "end": "2460319"
  },
  {
    "text": "libraries on top of that to to do some more domain specific things like set up cicd set up websites set up U Lambda",
    "start": "2460319",
    "end": "2468040"
  },
  {
    "text": "functions that are connected to databases whatever okay so that's um cloud formation support um oh any",
    "start": "2468040",
    "end": "2475400"
  },
  {
    "text": "questions on on that one before I go on yeah go ahead",
    "start": "2475400",
    "end": "2482319"
  },
  {
    "text": "oh secret Management in cloud formation so if you if no I mean um with pickle",
    "start": "2484040",
    "end": "2489760"
  },
  {
    "text": "itself for pickle itself so you can uh pass in environment variables and read",
    "start": "2489760",
    "end": "2496040"
  },
  {
    "text": "properties files is the only way that you can like get outside stuff into pickle so that then it comes out on the",
    "start": "2496040",
    "end": "2502640"
  },
  {
    "text": "yaml side and so you would have to start with with with the specifying the",
    "start": "2502640",
    "end": "2507800"
  },
  {
    "text": "properties file and I don't know what all the limitations are on properties files if it has to be like in a properties form or something else but um",
    "start": "2507800",
    "end": "2515359"
  },
  {
    "text": "but it has to come in in one of those two form forms into pickle so that then it can go into the output yaml um but",
    "start": "2515359",
    "end": "2521839"
  },
  {
    "text": "maybe there's maybe there's some way we could come up with with a better way to do that if that's necessary yeah let me",
    "start": "2521839",
    "end": "2527599"
  },
  {
    "text": "know afterwards if if we should explore that together okay any other questions on",
    "start": "2527599",
    "end": "2533680"
  },
  {
    "text": "cloud formation pickle okay let's move on to the next one so um I have done a",
    "start": "2533680",
    "end": "2541440"
  },
  {
    "text": "lot in GitHub actions and let's see if we can find that right project here",
    "start": "2541440",
    "end": "2548319"
  },
  {
    "text": "uh this one okay if you were at my presentation on structure concurrency yesterday I was sharing a project that I",
    "start": "2548319",
    "end": "2555280"
  },
  {
    "text": "created called easy raser and in Easy racer I do uh for every kind of client",
    "start": "2555280",
    "end": "2561040"
  },
  {
    "text": "of easy raser I have a cicd pipeline they're all pretty simple but they just validate that things work and so this is",
    "start": "2561040",
    "end": "2569119"
  },
  {
    "text": "um in total a lot of yaml um files to maintain my cicd pipeline so I started",
    "start": "2569119",
    "end": "2575240"
  },
  {
    "text": "creating a pickle GitHub action library to make it super concise to Define all",
    "start": "2575240",
    "end": "2580359"
  },
  {
    "text": "the things that I typically need in my GitHub actions and so just as an example of this I've got a doap project and so I",
    "start": "2580359",
    "end": "2587319"
  },
  {
    "text": "just need to specify those three lines and what I get out of that is that yaml",
    "start": "2587319",
    "end": "2593000"
  },
  {
    "text": "here right so it's able to to go from those three lines to the actual yaml",
    "start": "2593000",
    "end": "2598680"
  },
  {
    "text": "that GitHub actions needs so again just a like really nice to be able to put this stuff into libraries so that I",
    "start": "2598680",
    "end": "2605280"
  },
  {
    "text": "don't have to maintain all that yaml I have now a much more concise definition",
    "start": "2605280",
    "end": "2610520"
  },
  {
    "text": "for how I Define all of my GitHub actions and one of the cool things that's happening here is pickle has a",
    "start": "2610520",
    "end": "2617800"
  },
  {
    "text": "way to Output to multiple files so in GitHub actions I want each of these in",
    "start": "2617800",
    "end": "2623440"
  },
  {
    "text": "in its own yaml file and so I can say like hey turn all this stuff uh which there's there's a little bit of syntax",
    "start": "2623440",
    "end": "2629440"
  },
  {
    "text": "down at the bottom that actually tells it which which file to put the output into um but of course you can go from",
    "start": "2629440",
    "end": "2635480"
  },
  {
    "text": "one pickle definition file to many yaml files or Json files or whatever you want to Output so and then my my pickle uh",
    "start": "2635480",
    "end": "2643400"
  },
  {
    "text": "GitHub library is pickle GitHub action library is up on my GitHub so that's the",
    "start": "2643400",
    "end": "2649559"
  },
  {
    "text": "URL for that github.com jamesw pickle GHA and it still has more work to do",
    "start": "2649559",
    "end": "2654680"
  },
  {
    "text": "it's um I I do need to look into doing like open API transformation um to to",
    "start": "2654680",
    "end": "2660280"
  },
  {
    "text": "just automate some of that but I focused on kind of higher level things that I need for my builds first and so that's",
    "start": "2660280",
    "end": "2666240"
  },
  {
    "text": "uh that's where that one that okay so that's the uh the GitHub action um",
    "start": "2666240",
    "end": "2671760"
  },
  {
    "text": "pickle stuff and I think that that's it we kind of went through through all of",
    "start": "2671760",
    "end": "2677079"
  },
  {
    "text": "it so pickle let's let me show you some resources here if you want to learn more",
    "start": "2677079",
    "end": "2683640"
  },
  {
    "text": "so I've got um this particular code walkthr that I put in there is up on my",
    "start": "2683640",
    "end": "2689240"
  },
  {
    "text": "GitHub as hello- pkl and then there's the hello spring cotlin I do have the",
    "start": "2689240",
    "end": "2695880"
  },
  {
    "text": "the pickle part of that on a branch there and then um the pickle kubernetes",
    "start": "2695880",
    "end": "2701040"
  },
  {
    "text": "one uh the easy racer build which you can go look at the pickle source for the the actions and then my presentation",
    "start": "2701040",
    "end": "2708240"
  },
  {
    "text": "website is the one that uses cloud formation so so those are I'll leave those up there in case you want to grab",
    "start": "2708240",
    "end": "2714240"
  },
  {
    "text": "those all right well hopefully that was useful use pickle it's awesome and thanks for",
    "start": "2714240",
    "end": "2719270"
  },
  {
    "start": "2715000",
    "end": "2734000"
  },
  {
    "text": "[Applause]",
    "start": "2719270",
    "end": "2725300"
  },
  {
    "text": "coming for",
    "start": "2725960",
    "end": "2729960"
  }
]