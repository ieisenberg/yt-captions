[
  {
    "start": "0",
    "end": "44000"
  },
  {
    "text": "[Music]",
    "start": "2540",
    "end": "10160"
  },
  {
    "text": "thanks everyone for coming I'm James Ward I was at T tap and as a like six weeks ago I'm at Salesforce so working",
    "start": "10160",
    "end": "16880"
  },
  {
    "text": "on some fing projects there uh most recently did some Android wearable",
    "start": "16880",
    "end": "22240"
  },
  {
    "text": "applications so um so this this presentation is going to be about building reactive apps uh so first of",
    "start": "22240",
    "end": "30400"
  },
  {
    "text": "all let's just start with a little bit of setup so the reason why reactive uh is a thing that that uh people are",
    "start": "30400",
    "end": "37280"
  },
  {
    "text": "talking about people are are building is because what users want has kind of it's",
    "start": "37280",
    "end": "42559"
  },
  {
    "text": "changed but we now kind of have some tools that help us to address user needs",
    "start": "42559",
    "end": "47680"
  },
  {
    "start": "44000",
    "end": "150000"
  },
  {
    "text": "that have been around for a long time so some of these user needs are insinc data real-time collaboration instant feedback",
    "start": "47680",
    "end": "54520"
  },
  {
    "text": "not to wait uh these are things that we've always wanted but to build these types of applications in the past past",
    "start": "54520",
    "end": "60680"
  },
  {
    "text": "we didn't really have the tools readily accessible so the the thing about reactive is that uh it's in some ways",
    "start": "60680",
    "end": "67759"
  },
  {
    "text": "just taking a lot of these ideas that have been around for a long time and making them generally accessible to us",
    "start": "67759",
    "end": "74200"
  },
  {
    "text": "as developers so there's something called the reactive Manifesto you can find at reactive manifesto. org and uh and the",
    "start": "74200",
    "end": "82880"
  },
  {
    "text": "idea of the reactive Manifesto is to put together these ideas into some highlevel",
    "start": "82880",
    "end": "89079"
  },
  {
    "text": "ways to describe describe how we deliver these things that users want and so I'll",
    "start": "89079",
    "end": "94600"
  },
  {
    "text": "just go through them real quick but you can check out the reative manifesto on your own and you can uh sign it if you",
    "start": "94600",
    "end": "100799"
  },
  {
    "text": "agree with it uh so at first users want applications that are responsive and",
    "start": "100799",
    "end": "106000"
  },
  {
    "text": "responsive encompasses a bunch of a bunch of different things latency and not going down and all those sorts of",
    "start": "106000",
    "end": "112560"
  },
  {
    "text": "things to do that we need to build on a foundation that's scalable and resilient so those are uh the two kind of middle",
    "start": "112560",
    "end": "119520"
  },
  {
    "text": "traits of reactive and then in order to do all this we need a foundation that's event driven that's really what enables",
    "start": "119520",
    "end": "125840"
  },
  {
    "text": "us to be scalable and resilient at the same the same time and deliver responsive interfaces to our users so uh",
    "start": "125840",
    "end": "134200"
  },
  {
    "text": "that's your quick little synopsis on what reactive is is about uh you can",
    "start": "134200",
    "end": "139680"
  },
  {
    "text": "read a lot more on reactive manifesto. Org the manifesto is intentionally technology agnostic so no matter what uh",
    "start": "139680",
    "end": "147360"
  },
  {
    "text": "no matter what technology you're using the idea should should apply so you'll see these ideas kind of weaved",
    "start": "147360",
    "end": "153200"
  },
  {
    "start": "150000",
    "end": "327000"
  },
  {
    "text": "throughout but I want to focus more today on the actual how how do we actually build reactive applications and",
    "start": "153200",
    "end": "160680"
  },
  {
    "text": "so I'm going to be uh going through kind of three different ways that we do this so first talking about reactive web then",
    "start": "160680",
    "end": "167959"
  },
  {
    "text": "talking about reactive actors and then talking about reactive streams so those are the the three broad topics that",
    "start": "167959",
    "end": "173640"
  },
  {
    "text": "we'll cover I'll probably spend most of the time on the web stuff have a little bit of time at the end for actors and",
    "start": "173640",
    "end": "178760"
  },
  {
    "text": "and streams uh so first let's let's talk about the reactive web so reactive web is all",
    "start": "178760",
    "end": "185480"
  },
  {
    "text": "about async and non-blocking that's probably the terminology that you've heard most uh around reactive is async",
    "start": "185480",
    "end": "191879"
  },
  {
    "text": "and non-blocking so a little bit on async and non-blocking uh really to say async and non-blocking is kind of weird",
    "start": "191879",
    "end": "199920"
  },
  {
    "text": "uh because we can't actually be nonblocking without being async so we could just say non-blocking but for some",
    "start": "199920",
    "end": "205840"
  },
  {
    "text": "reason we say async and non-blocking but if you're just async there's really uh",
    "start": "205840",
    "end": "211319"
  },
  {
    "text": "it's really a negative you don't want to just be async for the sake of being async there's there's really no reason",
    "start": "211319",
    "end": "217439"
  },
  {
    "text": "to do that it complicates your your programming model it makes your uh your code harder to debug so really the",
    "start": "217439",
    "end": "224879"
  },
  {
    "text": "reason why we are going async is because we want to be non-blocking so I'm going to cover four",
    "start": "224879",
    "end": "230959"
  },
  {
    "text": "different ways that we can be async and non-blocking reactive requests reactive composition reactive push and two-way",
    "start": "230959",
    "end": "236879"
  },
  {
    "text": "reactive so in a nutshell async and blocking in terms of the web is first we",
    "start": "236879",
    "end": "242840"
  },
  {
    "text": "have to contrast this with our typical servlet model typical serlet model do get in D post and this is even true for",
    "start": "242840",
    "end": "249120"
  },
  {
    "text": "servlet 3 and 31 the traditional pathway through a web request is blocking and",
    "start": "249120",
    "end": "257639"
  },
  {
    "text": "what that means is that when that connection is just sitting there kind of waiting for the other side to respond",
    "start": "257639",
    "end": "264199"
  },
  {
    "text": "waiting for the other side to generate some some more data we're actually going to keep that thread around so we're",
    "start": "264199",
    "end": "270240"
  },
  {
    "text": "going to keep the thread active even when the connection is not actively being used that's the traditional model",
    "start": "270240",
    "end": "276960"
  },
  {
    "text": "that's how we've been building applications for a long time so in the async and non blocking model what we",
    "start": "276960",
    "end": "283720"
  },
  {
    "text": "want to do is we want to be able to take that thread and when when that connection is Idle we want to be able to take that resource that thread and give",
    "start": "283720",
    "end": "290560"
  },
  {
    "text": "it to somebody else and this allows us to have better scalability um resiliency",
    "start": "290560",
    "end": "296800"
  },
  {
    "text": "we'll talk about a little bit later so this the reason why this allows us to have better scalability is a couple so",
    "start": "296800",
    "end": "304039"
  },
  {
    "text": "first we can do many more things in parallel when we use this model where we're not blocking all these threads",
    "start": "304039",
    "end": "310440"
  },
  {
    "text": "ideally we want our thread numbers to be down to about the number of pores that we have on our system that's really the",
    "start": "310440",
    "end": "317199"
  },
  {
    "text": "the optimal number of threads in the jvm we usually have a lot of overhead",
    "start": "317199",
    "end": "322840"
  },
  {
    "text": "threads and that sort of thing so it's hard to actually get get exactly there but um but that's the ideal that's what",
    "start": "322840",
    "end": "328960"
  },
  {
    "start": "327000",
    "end": "500000"
  },
  {
    "text": "we want to aim for there's a few reasons why we want to aim for that CPU caches stay better cached uh when you are not",
    "start": "328960",
    "end": "336840"
  },
  {
    "text": "you doing the Contex switching of threads also there is a pretty significant overhead to thread so the",
    "start": "336840",
    "end": "343479"
  },
  {
    "text": "default stack size on the jvm I think is a megabyte and so this means that every thread on your system takes a megabyte",
    "start": "343479",
    "end": "349360"
  },
  {
    "text": "just for the the stack and so we can't just allocate thousands of threads uh",
    "start": "349360",
    "end": "354720"
  },
  {
    "text": "even if we have performant a performant way to to switch between those threads",
    "start": "354720",
    "end": "360000"
  },
  {
    "text": "we're still allocating a lot of memory and uh we'd like to think that we can in 64-bit jvms just just uh have as much",
    "start": "360000",
    "end": "368160"
  },
  {
    "text": "memory as we want use as much memory as we want in a single jvm that's really not true uh there is GC larger and",
    "start": "368160",
    "end": "374639"
  },
  {
    "text": "larger GC pauses at least in most jvms uh the larger your HEAP gets and so you",
    "start": "374639",
    "end": "380599"
  },
  {
    "text": "don't want to just uh allocate thousands of threads because then you're going to have a lot of memory that's that's uh",
    "start": "380599",
    "end": "386400"
  },
  {
    "text": "that's taking up more time in your gc's so uh so it does that's one of the other",
    "start": "386400",
    "end": "392039"
  },
  {
    "text": "side effects and why we'd want to go asyn Canon blocking is when you're not using threads why have them allocated",
    "start": "392039",
    "end": "397560"
  },
  {
    "text": "we're not using an actual connection why have it allocated so the other part of this is that uh we now have to be able",
    "start": "397560",
    "end": "404639"
  },
  {
    "text": "to handle a lot more connections to our servers because we have real time because we have maybe Internet of Things",
    "start": "404639",
    "end": "411319"
  },
  {
    "text": "devices and millions of devices all connecting to our service so being able to handle that many connections we we",
    "start": "411319",
    "end": "418080"
  },
  {
    "text": "start to would actually hit uh limits physical limits uh on Hardware",
    "start": "418080",
    "end": "424360"
  },
  {
    "text": "uh if we needed to be able to handle let's say a million concurrent connections we didn't have async and",
    "start": "424360",
    "end": "430080"
  },
  {
    "text": "nonblocking so then the the last reason that I'll cover around async why async and non-blocking is for parallelism so",
    "start": "430080",
    "end": "436919"
  },
  {
    "text": "often times now in our applications we have a request that comes in and then we're going to Fan out to a bunch more",
    "start": "436919",
    "end": "442319"
  },
  {
    "text": "requests and we want to try to do as many of those in parallel as possible and really one of our gating factors for",
    "start": "442319",
    "end": "447919"
  },
  {
    "text": "how much we can do in parallel is is how how many threads we can allocate and uh",
    "start": "447919",
    "end": "453319"
  },
  {
    "text": "and then um so if we're async and non-blocking then those fanned out requests are going to be able to operate",
    "start": "453319",
    "end": "459120"
  },
  {
    "text": "much more efficiently in parallel because we aren't going to uh have the overhead of of a request per connection",
    "start": "459120",
    "end": "465639"
  },
  {
    "text": "or a thread being held for all the idle connections so that's our quick overview",
    "start": "465639",
    "end": "471280"
  },
  {
    "text": "on async and non blocking I want to dive into some code to actually show how we would do this so you can get some of",
    "start": "471280",
    "end": "476479"
  },
  {
    "text": "these ideas a bit better um but I want to take a poll the audience you get to select either Java 8 code or scholar",
    "start": "476479",
    "end": "483599"
  },
  {
    "text": "code so okay Java 8 okay I think that's gonna be one our scolar code oh it was close but I think",
    "start": "483599",
    "end": "491639"
  },
  {
    "text": "Java 8 won that one so okay so we're gonna we're gonna dive in and build a little app to show how to do async and",
    "start": "491639",
    "end": "498400"
  },
  {
    "text": "non blocking with Java 8 so I'm going to use something called typesafe activator it's a way to build uh play and and AA",
    "start": "498400",
    "end": "505199"
  },
  {
    "start": "500000",
    "end": "611000"
  },
  {
    "text": "and Scala applications and Java eight8 applications so I'm going to call activator and say not create new going",
    "start": "505199",
    "end": "513560"
  },
  {
    "text": "to create a new application I just downloaded activator it's a zip file and extracted it and added it to my path so",
    "start": "513560",
    "end": "520399"
  },
  {
    "text": "then I'm going to select the play Java example and there we go so let me go",
    "start": "520399",
    "end": "526600"
  },
  {
    "text": "into that play Java this is now my new project that I've just set up and I'm going to run it so I'm going to run",
    "start": "526600",
    "end": "533080"
  },
  {
    "text": "activator till they run and while that's starting up let me go into intellig here",
    "start": "533080",
    "end": "538760"
  },
  {
    "text": "and open up this project so I wanted to start from scratch so you can get an idea for um for what it looks like for",
    "start": "538760",
    "end": "545560"
  },
  {
    "text": "you when you start from scratch so it'll take a second to get everything up and running an intellig and get the the",
    "start": "545560",
    "end": "551800"
  },
  {
    "text": "project all set up so um let's go take a look first at the um the layout of this",
    "start": "551800",
    "end": "560800"
  },
  {
    "text": "project so if I look in this project Let's uh ignore the target",
    "start": "560800",
    "end": "567399"
  },
  {
    "text": "directory there so if I look in this Pro there's a few different things I'm going to be going through so uh first in a",
    "start": "567399",
    "end": "573480"
  },
  {
    "text": "play this is a Play application play framework is async and nonblocking out of the box uh it doesn't use the servlet",
    "start": "573480",
    "end": "580000"
  },
  {
    "text": "API it uses netti for asyn and nonblocking so uh play the way that we",
    "start": "580000",
    "end": "585120"
  },
  {
    "text": "route or the way that we handle requests is through a controller we'll take a look at that in a second and then I have",
    "start": "585120",
    "end": "590680"
  },
  {
    "text": "views which are my server side templates I can of course use angular and client side uh Technologies there's asset",
    "start": "590680",
    "end": "596959"
  },
  {
    "text": "compilers um which we might see in a little bit of we have time there's a routes file where I declaratively Define",
    "start": "596959",
    "end": "603519"
  },
  {
    "text": "the routing of requests for my application and then a few other files for like build build information and",
    "start": "603519",
    "end": "610200"
  },
  {
    "text": "that sort of thing so that's my my basic project structure looks like it's up and running intellig um before I go there",
    "start": "610200",
    "end": "617560"
  },
  {
    "start": "611000",
    "end": "953000"
  },
  {
    "text": "let's go pull this thing up in the browser so it should be up and running",
    "start": "617560",
    "end": "623120"
  },
  {
    "text": "on Local Host 9000 so there we go there's our little Play application okay so let's go open up that routes file and",
    "start": "623120",
    "end": "629839"
  },
  {
    "text": "I'm going to go create a new route so a route is just a mapping between an HP verb and a path we'll put in SL food for",
    "start": "629839",
    "end": "636120"
  },
  {
    "text": "the path and then a controller method to call and then I'm going to go into my",
    "start": "636120",
    "end": "641519"
  },
  {
    "text": "controller here and you'll see there's already a controller uh I'm going to add in a new one so you'll see that I'm",
    "start": "641519",
    "end": "648800"
  },
  {
    "text": "using static here uh with play we can we can start with static methods and then",
    "start": "648800",
    "end": "655160"
  },
  {
    "text": "we can switch from static methods to dependency injection if we want to but static methods are simplest way for demo",
    "start": "655160",
    "end": "661720"
  },
  {
    "text": "so we'll use that one today so uh a controller in play what it does is it is",
    "start": "661720",
    "end": "666920"
  },
  {
    "text": "it takes a request and it returns a response so in this case the response object is called the result so now I",
    "start": "666920",
    "end": "673839"
  },
  {
    "text": "just need to return a new result so I'm going to return a status code 200 result",
    "start": "673839",
    "end": "679680"
  },
  {
    "text": "with a string body that just contains ASDF so that's my very basic controller in play Let's go try it out and make",
    "start": "679680",
    "end": "687240"
  },
  {
    "text": "sure that works so there we go there's my my controller okay so that's my basic controller underneath the covers plays",
    "start": "687240",
    "end": "694240"
  },
  {
    "text": "doing this async and non blocking uh but what you've seen so far my code it",
    "start": "694240",
    "end": "700440"
  },
  {
    "text": "wasn't async uh explicitly so underneath the covers this is async and non",
    "start": "700440",
    "end": "706320"
  },
  {
    "text": "blocking but from my perspective the code I've written is synchronous so",
    "start": "706320",
    "end": "711399"
  },
  {
    "text": "let's take a next step and let's make this now asynchronous so instead of",
    "start": "711399",
    "end": "716440"
  },
  {
    "text": "returning a result I need to return something that promises to return the",
    "start": "716440",
    "end": "721760"
  },
  {
    "text": "result in the future so I'm going to use the f. promise this is really just a wrapper around uh around the Scala",
    "start": "721760",
    "end": "730279"
  },
  {
    "text": "future so play is built internally with Scala so this is an API that's a nice",
    "start": "730279",
    "end": "735959"
  },
  {
    "text": "Java interface on top of this this uh future API and Scola so a little bit",
    "start": "735959",
    "end": "741880"
  },
  {
    "text": "about Futures and promises that the terminology is kind of used intermixed uh usually the the terminology at least",
    "start": "741880",
    "end": "748720"
  },
  {
    "text": "in the schol world I think in the JavaScript world as well is that the future is the side that I can read a",
    "start": "748720",
    "end": "755279"
  },
  {
    "text": "future result out of and then the promise is the right side that I can write that into so it's the handle uh",
    "start": "755279",
    "end": "762959"
  },
  {
    "text": "both are handles the the promise is the handle that I can write the result into",
    "start": "762959",
    "end": "768399"
  },
  {
    "text": "the future is the side that I can read the result out of so in the Java API I",
    "start": "768399",
    "end": "773720"
  },
  {
    "text": "think to be consistent with other Java apis for some reason we collapse",
    "start": "773720",
    "end": "779639"
  },
  {
    "text": "down the future and promise Concepts into a single object called Promise not quite sure why we did that but you'll",
    "start": "779639",
    "end": "786360"
  },
  {
    "text": "see that I now have a compiler because uh I'm returning not a a promise of a",
    "start": "786360",
    "end": "791560"
  },
  {
    "text": "result but I'm still just returning a result so what I need to do is create something that that will in the future",
    "start": "791560",
    "end": "798320"
  },
  {
    "text": "produce the result and then will be asyn explicitly asynchronous so I'm going to",
    "start": "798320",
    "end": "804000"
  },
  {
    "text": "create a new promise here and I'm going to use the promise. promise method and",
    "start": "804000",
    "end": "810959"
  },
  {
    "text": "the promise. promise method if we look at it if we look at the signature we'll see that it takes a function so because",
    "start": "810959",
    "end": "819279"
  },
  {
    "text": "I uh I don't want to actually call this code when the request comes in right so",
    "start": "819279",
    "end": "826480"
  },
  {
    "text": "if I left it like this then it would be trying to just call this okay and produce the result immediately instead I",
    "start": "826480",
    "end": "832000"
  },
  {
    "text": "need something that I can call later to produce that result to fulfill the the",
    "start": "832000",
    "end": "837759"
  },
  {
    "text": "promise and and be able to get the result out of the future uh so um so I",
    "start": "837759",
    "end": "843800"
  },
  {
    "text": "can't return I can't just call this this thing and return the result I have to instead give it a function that then",
    "start": "843800",
    "end": "850440"
  },
  {
    "text": "play can internally then call that function later to get the result out of so now I'm going to use the Java 8 uh",
    "start": "850440",
    "end": "857199"
  },
  {
    "text": "new Lambda syntax and I'm going to define a little uh function in line here whole lot nicer than the old Java Syntax",
    "start": "857199",
    "end": "864440"
  },
  {
    "text": "for doing that but now that is a function that I've just defined that takes no parameters so that's the the",
    "start": "864440",
    "end": "871040"
  },
  {
    "text": "Lambda parameters there no parameters and then the function body Returns the",
    "start": "871040",
    "end": "876519"
  },
  {
    "text": "result so now internally play now has a handle so when the request comes into",
    "start": "876519",
    "end": "882040"
  },
  {
    "text": "this method play now has a handle to something that will in the future produce the result and so then when play",
    "start": "882040",
    "end": "888040"
  },
  {
    "text": "is ready to to be able to get that result out uh it's going to invoke this",
    "start": "888040",
    "end": "893279"
  },
  {
    "text": "function and that function will produce the result so let's try it out and uh",
    "start": "893279",
    "end": "898399"
  },
  {
    "text": "let's go change that string so we can verify that it actually works so I hit",
    "start": "898399",
    "end": "903680"
  },
  {
    "text": "refresh and compile and then we should see oh action not found that's a I'm",
    "start": "903680",
    "end": "910800"
  },
  {
    "text": "using play 2.3 and that's a bug Gotta Love brand new",
    "start": "910800",
    "end": "917959"
  },
  {
    "text": "software all right I definitely have a",
    "start": "917959",
    "end": "922920"
  },
  {
    "text": "route let's try this again yeah got always clean it oh man",
    "start": "924399",
    "end": "930759"
  },
  {
    "text": "I'm in a bad State here there we go there we go all right so don't use do",
    "start": "930759",
    "end": "937199"
  },
  {
    "text": "zero software right this is play 230 wait till 231 okay but we'll see that it",
    "start": "937199",
    "end": "942920"
  },
  {
    "text": "worked once the compiler figured out what to do uh so there we go now I've got my um my controller that's that's",
    "start": "942920",
    "end": "950480"
  },
  {
    "text": "now explicitly asynchronous so that's good I'm explicitly a asynchronous but I'm still",
    "start": "950480",
    "end": "956759"
  },
  {
    "start": "953000",
    "end": "1194000"
  },
  {
    "text": "not really non-blocking uh to be non-blocking you have to have something to not block on and right now I don't",
    "start": "956759",
    "end": "963880"
  },
  {
    "text": "really have anything to not block on so good examples of things to not block on are uh Network IO is something we can",
    "start": "963880",
    "end": "971279"
  },
  {
    "text": "not block on uh and then timeouts are something we can not block on uh",
    "start": "971279",
    "end": "976360"
  },
  {
    "text": "messages from actors uh there's a number of things out there that that are becoming more commonplace to to not",
    "start": "976360",
    "end": "982560"
  },
  {
    "text": "block on but so we need one of those things so uh just as an example uh a way",
    "start": "982560",
    "end": "987880"
  },
  {
    "text": "to not block is with a a delayed timeout basically something that says call this",
    "start": "987880",
    "end": "992920"
  },
  {
    "text": "function in some amount of time so instead of the promised. promise I'm going to do a promise. delayed we'll see",
    "start": "992920",
    "end": "1000079"
  },
  {
    "text": "there's a few other parameters here so the second parameter is the amount of delay and then I'm going to say do that",
    "start": "1000079",
    "end": "1007000"
  },
  {
    "text": "for time unit uh seconds so for five seconds so it's going to now wait for 5",
    "start": "1007000",
    "end": "1013160"
  },
  {
    "text": "seconds weit's probably the wrong word to use in 5 seconds it will then invoke",
    "start": "1013160",
    "end": "1018240"
  },
  {
    "text": "this function that will fulfill that promise and then return the result so let's let's go try that out",
    "start": "1018240",
    "end": "1025280"
  },
  {
    "text": "hopefully the compiler cooperates this time I'm going to open up the inspect window because we should be able to once",
    "start": "1025280",
    "end": "1032480"
  },
  {
    "text": "it gets compiled we should be able to actually see this 5-second delay happen so there we go looks like it worked",
    "start": "1032480",
    "end": "1039199"
  },
  {
    "text": "you'll see that there was second and a half of compile time and then and then the 5-second delay so uh so let's go",
    "start": "1039199",
    "end": "1046839"
  },
  {
    "text": "back to the code so now I've got something that's async and non-blocking so I'm explicitly async but now I have",
    "start": "1046839",
    "end": "1053320"
  },
  {
    "text": "something to not block on so it's a little bit of trickery here because uh there in order to have something that is",
    "start": "1053320",
    "end": "1060640"
  },
  {
    "text": "on a timer uh triggering at some point in the future there does have to be a",
    "start": "1060640",
    "end": "1065799"
  },
  {
    "text": "thread there so there is one thread that gets used for all of these types of of",
    "start": "1065799",
    "end": "1071440"
  },
  {
    "text": "uh timeouts inside of the jvm so there is one thread but I could have a million requests come into this controller and",
    "start": "1071440",
    "end": "1079280"
  },
  {
    "text": "all of them for that 5 seconds are just going to sit there not using any threads",
    "start": "1079280",
    "end": "1084919"
  },
  {
    "text": "I'll just have that one timer thread that's managing all the timeouts so um",
    "start": "1084919",
    "end": "1090000"
  },
  {
    "text": "so this is now async and nonblocking so let's go back here and let's hit this",
    "start": "1090000",
    "end": "1095080"
  },
  {
    "text": "again so there's uh 5 Seconds where my browser is just spinning so I have an",
    "start": "1095080",
    "end": "1100360"
  },
  {
    "text": "open HTTP request to my server this is just a standard HTTP request there is",
    "start": "1100360",
    "end": "1106360"
  },
  {
    "text": "nothing special the browser has no special knowledge about this what is actually being happening on the server",
    "start": "1106360",
    "end": "1112799"
  },
  {
    "text": "to make this async and non blocking so for that 5 Seconds the browser wheel is just spinning it's like hey I haven't",
    "start": "1112799",
    "end": "1119159"
  },
  {
    "text": "received anything yet I haven't received anything yet so but on the server side the request came in that controller",
    "start": "1119159",
    "end": "1125640"
  },
  {
    "text": "method returned the promise of result and then the thread for that connection went away went to somebody else and so",
    "start": "1125640",
    "end": "1132679"
  },
  {
    "text": "then 5 seconds later then the the delay is going to kick in it's going to run",
    "start": "1132679",
    "end": "1137880"
  },
  {
    "text": "that function then we're going to get a thread back and then we're going to be able to send that data back so that for that most of that 5 Seconds there is",
    "start": "1137880",
    "end": "1144720"
  },
  {
    "text": "actually no thread allocated on the server side to handle in this request yeah on the client side I think that",
    "start": "1144720",
    "end": "1150480"
  },
  {
    "text": "Chrome is probably also doing async and non-blocking um but uh but that's uh up",
    "start": "1150480",
    "end": "1155840"
  },
  {
    "text": "to to the actual client to decide how it handles the actual networking so all of",
    "start": "1155840",
    "end": "1161360"
  },
  {
    "text": "this is based on Java nio uh Java nio provides us an async way to do Network",
    "start": "1161360",
    "end": "1167799"
  },
  {
    "text": "IO so netti is the implementation that play uses of java nio and so this is",
    "start": "1167799",
    "end": "1173799"
  },
  {
    "text": "really what gives us the ability to be async and non blocking so all controllers out of the box are async and",
    "start": "1173799",
    "end": "1179559"
  },
  {
    "text": "non-blocking but we can be explicitly async and non-blocking uh if we have something to not block on okay I want to",
    "start": "1179559",
    "end": "1186679"
  },
  {
    "text": "stop for a second and see if there are any questions before we get more complicated and more useful yeah go",
    "start": "1186679",
    "end": "1193640"
  },
  {
    "text": "ahead it's totally up to you what you do with your futures and Promises this is",
    "start": "1193640",
    "end": "1199080"
  },
  {
    "start": "1194000",
    "end": "1272000"
  },
  {
    "text": "just a very trivial example but you can create a promise and then you can have",
    "start": "1199080",
    "end": "1204799"
  },
  {
    "text": "whatever you want fulfill that promise so let's say you talk to your Dao layer you pass that promise into your Dao",
    "start": "1204799",
    "end": "1211159"
  },
  {
    "text": "layer and then your Dao layer could then fulfill that promise right so that's one way you you could do that uh probably a",
    "start": "1211159",
    "end": "1218159"
  },
  {
    "text": "better way to do it is you'd actually have a method call to your Dao layer return a a promise of of some data uh",
    "start": "1218159",
    "end": "1226760"
  },
  {
    "text": "and then you would then you'd be able to list inside of the controller set up a handle on that completion and then turn",
    "start": "1226760",
    "end": "1234039"
  },
  {
    "text": "that into the actual result back and that's very similar to what we're going to see in a second streaming yeah there",
    "start": "1234039",
    "end": "1240080"
  },
  {
    "text": "is um so so streaming there's a lot of different ways to do streaming uh if",
    "start": "1240080",
    "end": "1245320"
  },
  {
    "text": "I'll try to show one of them in a in a little bit which is either websockets or service and events but you can also do",
    "start": "1245320",
    "end": "1252799"
  },
  {
    "text": "comment or sorry not comment you can also do chunked responses and you can make those chunked responses is uh async",
    "start": "1252799",
    "end": "1260080"
  },
  {
    "text": "and non-blocking as well so so I'm not going to show a chunked one U but there is a good one in the play documentation",
    "start": "1260080",
    "end": "1266400"
  },
  {
    "text": "that does show how to do chunked respon async and non-blocking chunked responses",
    "start": "1266400",
    "end": "1271559"
  },
  {
    "text": "so okay so let's let's make this more useful so um so I've done this delay not",
    "start": "1271559",
    "end": "1277400"
  },
  {
    "start": "1272000",
    "end": "1609000"
  },
  {
    "text": "very useful let's do something more useful which is a web service call so uh",
    "start": "1277400",
    "end": "1282840"
  },
  {
    "text": "I'm going to when the request comes into the server I'm going to then make another request out from my server to",
    "start": "1282840",
    "end": "1288279"
  },
  {
    "text": "another server get some data and then return that data back uh so let's write",
    "start": "1288279",
    "end": "1293360"
  },
  {
    "text": "the code for that first so what I'm going to get back is going to be a f.",
    "start": "1293360",
    "end": "1299559"
  },
  {
    "text": "promise of a WS response and we'll call this",
    "start": "1299559",
    "end": "1306279"
  },
  {
    "text": "jwf and then to do this I'm going to use the play web service Library so",
    "start": "1306279",
    "end": "1312880"
  },
  {
    "text": "um should be let's make sure I got the right one imported yep okay uh then I'm",
    "start": "1312880",
    "end": "1319799"
  },
  {
    "text": "going to set the URL to james.com and then I'm going to make a get request so",
    "start": "1319799",
    "end": "1326720"
  },
  {
    "text": "if we look at what. get that's actually making a get request we look at what that returns it's a promise of a WS",
    "start": "1326720",
    "end": "1332880"
  },
  {
    "text": "response so this is not the actual response it's a promise to something",
    "start": "1332880",
    "end": "1338320"
  },
  {
    "text": "that will in the future give me the response and so I can't I can't use this",
    "start": "1338320",
    "end": "1343919"
  },
  {
    "text": "response yet what I really want to do is just take the response that I get from jamesw word.com and send that back to",
    "start": "1343919",
    "end": "1350440"
  },
  {
    "text": "the person who's calling this controller method so uh to do that we need to to",
    "start": "1350440",
    "end": "1356480"
  },
  {
    "text": "get a little bit functional here um so which is going to impact everybody doing Java eight programming we're going to",
    "start": "1356480",
    "end": "1362760"
  },
  {
    "text": "have to learn some functional Concepts so uh so here's your first one so what I have is a promise of a WS response I",
    "start": "1362760",
    "end": "1371279"
  },
  {
    "text": "need to convert that I don't want to just block on this response from james.com it's async and non-blocking I",
    "start": "1371279",
    "end": "1376960"
  },
  {
    "text": "don't want to screw that up uh so instead what I want to do is I want to transform the thing inside of the",
    "start": "1376960",
    "end": "1384440"
  },
  {
    "text": "response or the thing inside of the promise I want to transform that thing inside in this case is Ws response into",
    "start": "1384440",
    "end": "1391760"
  },
  {
    "text": "a result okay but I want to do that without blocking so the way that we do that is with a map so what I'm going to",
    "start": "1391760",
    "end": "1398080"
  },
  {
    "text": "do is I'm going to do my J jwf and then I'm going to do a map on it map what map does is it transforms",
    "start": "1398080",
    "end": "1406279"
  },
  {
    "text": "things inside of boxes that's all that map does and so in this case I'm going to transform that ws response into a",
    "start": "1406279",
    "end": "1413000"
  },
  {
    "text": "result so the way that I do that is with a function so map takes a function that",
    "start": "1413000",
    "end": "1418200"
  },
  {
    "text": "will do the transformation so in this case that transformation will happen when I get the response back from",
    "start": "1418200",
    "end": "1424279"
  },
  {
    "text": "james.com then it's going to run this map function on that thing and then do",
    "start": "1424279",
    "end": "1429760"
  },
  {
    "text": "the transformation so I'm actually going to have two promises here right I have the promise that I've given play for",
    "start": "1429760",
    "end": "1435960"
  },
  {
    "text": "this actual request the controller request and then they have the promise for James word.com and that outer",
    "start": "1435960",
    "end": "1442320"
  },
  {
    "text": "promise the one that's handling the user connection that one's not going to be fulfilled until I fulfill it based on",
    "start": "1442320",
    "end": "1449120"
  },
  {
    "text": "the request of james.com Promise being fulfilled so in our map function we're going to use a Lambda again and I'm",
    "start": "1449120",
    "end": "1455440"
  },
  {
    "text": "going to say all right now I have my response and uh so this is my parameter",
    "start": "1455440",
    "end": "1460799"
  },
  {
    "text": "and then my body is going to be to return okay and then I'm going to use that response and I'm going to get the",
    "start": "1460799",
    "end": "1466520"
  },
  {
    "text": "the body of James w. and then I just need to return",
    "start": "1466520",
    "end": "1472640"
  },
  {
    "text": "that so the out the type of this uh map function what I actually get out of that",
    "start": "1472640",
    "end": "1478919"
  },
  {
    "text": "we'll see if intellig tells me it uh a little bit weird in there but the output of that map function is a promise of a",
    "start": "1478919",
    "end": "1486279"
  },
  {
    "text": "result so I've transformed from a promise of response into a promise of result don't ask me why we have a",
    "start": "1486279",
    "end": "1492520"
  },
  {
    "text": "response and a result object why there're different things actually I know why uh response is the read side",
    "start": "1492520",
    "end": "1498760"
  },
  {
    "text": "result is the right side so there probably could be a unified API uh for",
    "start": "1498760",
    "end": "1503840"
  },
  {
    "text": "read and write but but this is the side we read the values out of and then the result that I'm returning is the side we",
    "start": "1503840",
    "end": "1510520"
  },
  {
    "text": "write the values into okay so that's that's why they're there okay so let's go try this out here hopefully the",
    "start": "1510520",
    "end": "1518080"
  },
  {
    "text": "compiler cooperates and there we go so we just saw james.com in text form I didn't set the content type so we see",
    "start": "1518080",
    "end": "1525120"
  },
  {
    "text": "James Ward in text okay so now this was what we call reactive composition so",
    "start": "1525120",
    "end": "1530480"
  },
  {
    "text": "I've got a request coming into my play server then a request from my play server to james.com I have two requests",
    "start": "1530480",
    "end": "1537360"
  },
  {
    "text": "and there's some point in time where I'm just waiting for james.com to respond",
    "start": "1537360",
    "end": "1542799"
  },
  {
    "text": "it's PHP WordPress so it could be seconds and so I'm waiting for those few",
    "start": "1542799",
    "end": "1547960"
  },
  {
    "text": "seconds for PHP to respond and so there's some amount of time where I've got these two connections which normally",
    "start": "1547960",
    "end": "1553559"
  },
  {
    "text": "would take two threads and instead I want to take both of those threads while I'm just purely waiting give them to",
    "start": "1553559",
    "end": "1560200"
  },
  {
    "text": "somebody else and then when the response comes back from james.com then I'm going",
    "start": "1560200",
    "end": "1565279"
  },
  {
    "text": "to get the threads back and send the response back down to the browser so that's exactly what's happening here",
    "start": "1565279",
    "end": "1570880"
  },
  {
    "text": "when we make that request okay so there's there's the code again so questions about that one speculative",
    "start": "1570880",
    "end": "1577200"
  },
  {
    "text": "retry so um actors would be the right way to do that uh to do a speculative",
    "start": "1577200",
    "end": "1584000"
  },
  {
    "text": "retry so when we talk about actors we'll get more to uh to that sort of thing",
    "start": "1584000",
    "end": "1589520"
  },
  {
    "text": "yeah so Futures are one way to do this concurrency async uh stuff actors are",
    "start": "1589520",
    "end": "1596880"
  },
  {
    "text": "another way that we'll talk about in a few minutes uh so let's talk about the composition though so uh so most these",
    "start": "1596880",
    "end": "1604720"
  },
  {
    "text": "requests and one of the big reasons for reactive is that I want to be able to do things in parallel so let's actually in",
    "start": "1604720",
    "end": "1610919"
  },
  {
    "text": "this request make a second request out in this case to twitter.com we'll call",
    "start": "1610919",
    "end": "1616200"
  },
  {
    "text": "this one tww f and now what I need to do is uh what I",
    "start": "1616200",
    "end": "1621840"
  },
  {
    "text": "want to do is create a result that takes both the Twitter response body and the James Ward response body and composes",
    "start": "1621840",
    "end": "1629240"
  },
  {
    "text": "these together into a single result and of course I want the whole thing to be async and nonblocking so uh to do this",
    "start": "1629240",
    "end": "1636520"
  },
  {
    "text": "we're going to have to get um a little more functional so what I'm going to do is I'm going to take my Twitter future",
    "start": "1636520",
    "end": "1644080"
  },
  {
    "text": "and I'm going to do a map on that and then inside of that we're going to do a function so this will be my Twitter the",
    "start": "1644080",
    "end": "1651919"
  },
  {
    "text": "parameter there is my Twitter response and then inside of that the response body then I want to take my JW future",
    "start": "1651919",
    "end": "1660360"
  },
  {
    "text": "and I want to do a map on that one and then I'm going to be able to at the end of it all inside of these these nested",
    "start": "1660360",
    "end": "1667480"
  },
  {
    "text": "functions I'm going to be able to let's call this one JW I'm going to be able to do my Twitter plus my JW uh using",
    "start": "1667480",
    "end": "1676279"
  },
  {
    "text": "strings is probably a horrible example but as you probably have realized in a real world use case we'd be using Jason",
    "start": "1676279",
    "end": "1682200"
  },
  {
    "text": "data or some other structured data and munging it all together okay so let's",
    "start": "1682200",
    "end": "1687679"
  },
  {
    "text": "let's uh so this is not going to compile how it is and it's going to take a little bit to explain why so this is",
    "start": "1687679",
    "end": "1693640"
  },
  {
    "text": "kind of the normal way that we think about that is all right I'm going to do a map on my Twitter one I'm going to do a map on my JW one and then I'm going be",
    "start": "1693640",
    "end": "1701960"
  },
  {
    "text": "able to get both of those uh intell is kind of confused about the air it says cyclic enter",
    "start": "1701960",
    "end": "1709600"
  },
  {
    "text": "interfer interference interesting maybe that's accurate I don't know what that means um but uh the problem here is that",
    "start": "1709600",
    "end": "1717640"
  },
  {
    "text": "the output of jwf map the output of this this function here and let's move that",
    "start": "1717640",
    "end": "1723519"
  },
  {
    "text": "down move these down so we see things a little bit better I guess um the problem",
    "start": "1723519",
    "end": "1729240"
  },
  {
    "text": "with this is that that jwf map it outputs the output of that function is a",
    "start": "1729240",
    "end": "1735440"
  },
  {
    "text": "promise of a uh result yeah so that's a promise of a result and so then if I do",
    "start": "1735440",
    "end": "1743480"
  },
  {
    "text": "this t uh TW WF map and I in the the body of that function I return something",
    "start": "1743480",
    "end": "1751480"
  },
  {
    "text": "that's returning a promise of a result then ultimately I'm going to return a promise of a promise of a result okay",
    "start": "1751480",
    "end": "1758559"
  },
  {
    "text": "and I don't want that uh so what I want instead is I want to take that promise of Promise of result and flatten those",
    "start": "1758559",
    "end": "1766480"
  },
  {
    "text": "down into just a single promise of a result and so then what we have to do is",
    "start": "1766480",
    "end": "1772640"
  },
  {
    "text": "not a map but a flat map so um so flat",
    "start": "1772640",
    "end": "1777919"
  },
  {
    "text": "map is the way uh am I missing a print yep I am okay so flat map is the way",
    "start": "1777919",
    "end": "1786039"
  },
  {
    "text": "that we do a map and a flatten and uh we do it in that order and I don't know why",
    "start": "1786039",
    "end": "1791080"
  },
  {
    "text": "we called it flat map I guess cuz map flat just doesn't roll off the tongue uh so we call it flat map but really it's a",
    "start": "1791080",
    "end": "1797440"
  },
  {
    "text": "map and and then a flatten flatten is just flattening the that those things",
    "start": "1797440",
    "end": "1802720"
  },
  {
    "text": "out so now what we're returning is that promise of a result so now we have these",
    "start": "1802720",
    "end": "1807840"
  },
  {
    "text": "chained functions and it doesn't matter what order these actually are defined in in this case because uh when the when",
    "start": "1807840",
    "end": "1815559"
  },
  {
    "text": "I'm not actually doing the map function when I'm not actually calling the map function it's just memory on the Heap",
    "start": "1815559",
    "end": "1821640"
  },
  {
    "text": "holding the result of that promise so I'm not actually going to be using any threads the ordering doesn't doesn't",
    "start": "1821640",
    "end": "1828320"
  },
  {
    "text": "matter so let's try it out and make sure it works so what we should see is",
    "start": "1828320",
    "end": "1836000"
  },
  {
    "text": "twitter.com there we go there's twitter.com in text form and then somewhere down here is going to be james.com so now I've been able to do",
    "start": "1836000",
    "end": "1843600"
  },
  {
    "text": "that but now there's three requests and of course all these are async and non-blocking so there's some point in",
    "start": "1843600",
    "end": "1849200"
  },
  {
    "text": "time where uh the request to Twitter is Idle the request of james.com is idle",
    "start": "1849200",
    "end": "1855480"
  },
  {
    "text": "and then I'm going to not be using any threads right for that um so that's uh",
    "start": "1855480",
    "end": "1861799"
  },
  {
    "text": "that's where we can get some some high value with parallelization without having to have",
    "start": "1861799",
    "end": "1867639"
  },
  {
    "text": "these expensive threads being used um so you can imagine a a more uh real use",
    "start": "1867639",
    "end": "1873480"
  },
  {
    "text": "case uh something that that um I've actually done is to do like uh sediment",
    "start": "1873480",
    "end": "1878600"
  },
  {
    "text": "analysis using some API on a bunch of things at once and I want to be able to do as many of those as I can in parallel",
    "start": "1878600",
    "end": "1885919"
  },
  {
    "text": "so the gating Factor on how many things I can do in parallel is going to be how many threads I can allocate but that is",
    "start": "1885919",
    "end": "1891840"
  },
  {
    "text": "for active connections so if i' if I have 10 threads allocated that means I could have 10 actual active connections",
    "start": "1891840",
    "end": "1900039"
  },
  {
    "text": "open to some some Service uh that could mean that I have actually a thousand",
    "start": "1900039",
    "end": "1906880"
  },
  {
    "text": "connections that are that are open but most of them all but 10 of them are open",
    "start": "1906880",
    "end": "1911919"
  },
  {
    "text": "but just sitting idle waiting for a response um okay so that's reactive comp",
    "start": "1911919",
    "end": "1917960"
  },
  {
    "text": "position questions about about that so the Ws API is the outgoing rest API uh",
    "start": "1917960",
    "end": "1925720"
  },
  {
    "start": "1920000",
    "end": "2069000"
  },
  {
    "text": "I'm just working with strings but you can definitely work with Json and then the controller methods also support Json",
    "start": "1925720",
    "end": "1932480"
  },
  {
    "text": "so uh so you'll see um one of the things that we can pass to okay which is the",
    "start": "1932480",
    "end": "1938360"
  },
  {
    "text": "status code 200 is a Json node object so I'm passing just a string um but but you",
    "start": "1938360",
    "end": "1944639"
  },
  {
    "text": "could pass Jason content as well so both the outgoing through the WS library and then the controller responses both",
    "start": "1944639",
    "end": "1951000"
  },
  {
    "text": "support Jason as well there there's currently a problem with observables and I'm trying to think if I'm going to",
    "start": "1951000",
    "end": "1956799"
  },
  {
    "text": "remember it correctly there was some problem with how you use observables and Futures together uh I believe but when",
    "start": "1956799",
    "end": "1963799"
  },
  {
    "text": "we talk about reactive streams there's a solution coming for that problem and that would be a perfectly acceptable way",
    "start": "1963799",
    "end": "1968919"
  },
  {
    "text": "to do this with RX Java or something like that um so uh so I know that it's",
    "start": "1968919",
    "end": "1974840"
  },
  {
    "text": "technically possible reactive streams will be uh the right way to to do this",
    "start": "1974840",
    "end": "1980240"
  },
  {
    "text": "whole thing with RX Java but but I'll talk about that in a in a few minutes good question so I haven't uh talked",
    "start": "1980240",
    "end": "1986440"
  },
  {
    "text": "about any resiliency so there is a a resiliency model on promises and there's",
    "start": "1986440",
    "end": "1992000"
  },
  {
    "text": "different ways that you can deal with that so A Promise really has three states it can be pending it can have a",
    "start": "1992000",
    "end": "1998200"
  },
  {
    "text": "value or it can have an air and then you can set air handling through functions",
    "start": "1998200",
    "end": "2003880"
  },
  {
    "text": "like these on the Promises so one of the ways that you can uh deal with arzon",
    "start": "2003880",
    "end": "2009440"
  },
  {
    "text": "promises is you do a recover a recover uh we can actually try that real quick",
    "start": "2009440",
    "end": "2017000"
  },
  {
    "text": "so if I do a recover I give this thing a function that's going to recover from",
    "start": "2017000",
    "end": "2023000"
  },
  {
    "text": "the failure with uh with a value anyways and so I'd have to have something that recovered with the right value in this",
    "start": "2023000",
    "end": "2030080"
  },
  {
    "text": "case a WS response I won't actually fill out the code so that's just one way that we can handle this failure we could also",
    "start": "2030080",
    "end": "2037080"
  },
  {
    "text": "uh there's like an onair Handler that we could use and we could log the air so",
    "start": "2037080",
    "end": "2042120"
  },
  {
    "text": "there's a number of different ways that we would that we would do resiliency on the the Futures depending on what you're",
    "start": "2042120",
    "end": "2048800"
  },
  {
    "text": "looking for and the the errors in these Futures are going to propagate so uh so",
    "start": "2048800",
    "end": "2054560"
  },
  {
    "text": "if I have by default if I have an air state in one of my child uh promises",
    "start": "2054560",
    "end": "2060839"
  },
  {
    "text": "then that will propagate all the way out so I could catch it on the out all the way at the end or I could catch it where",
    "start": "2060839",
    "end": "2066398"
  },
  {
    "text": "it started so up to you how you would handle that as well okay so that's reactive composition with multiple",
    "start": "2066399",
    "end": "2072638"
  },
  {
    "start": "2069000",
    "end": "2440000"
  },
  {
    "text": "things in in parallel let's go back to a couple slides um all these slides are",
    "start": "2072639",
    "end": "2078960"
  },
  {
    "text": "online pros james.com and we've gone through that uh I'm not going to do the",
    "start": "2078960",
    "end": "2084440"
  },
  {
    "text": "actual the actual demo um but let me just show you what push looks like in",
    "start": "2084440",
    "end": "2089960"
  },
  {
    "text": "with servers and events in play uh we uh this one doesn't really have anything",
    "start": "2089960",
    "end": "2095118"
  },
  {
    "text": "Java 8 I think there is in play 23 a new Java 8 API uh for server s events but",
    "start": "2095119",
    "end": "2100440"
  },
  {
    "text": "server s events are one way push from the server to the client so what it does with server s events is it Nails open a",
    "start": "2100440",
    "end": "2106280"
  },
  {
    "text": "connection which is async and nonblocking and then whenever you want you can call the send data method to",
    "start": "2106280",
    "end": "2112119"
  },
  {
    "text": "push data down to the browser so pretty simple API both on the server side and on the the client side for doing",
    "start": "2112119",
    "end": "2119160"
  },
  {
    "text": "that so and then websockets as well uh so with a websocket we have now two",
    "start": "2119160",
    "end": "2125240"
  },
  {
    "text": "channels both channels are reactive uh reactive push channels so one is from",
    "start": "2125240",
    "end": "2131800"
  },
  {
    "text": "the client to the server the other one is from the server to the client so I can read values off of on the server I",
    "start": "2131800",
    "end": "2137760"
  },
  {
    "text": "can read values off of the the channel coming from the client to the server and then I can write values into the channel",
    "start": "2137760",
    "end": "2144960"
  },
  {
    "text": "coming from the server to the client both of those are async and non-blocking so when I'm not actually actually",
    "start": "2144960",
    "end": "2150160"
  },
  {
    "text": "they're over one connection but when they're not when we're not actually sending something over that connection",
    "start": "2150160",
    "end": "2155400"
  },
  {
    "text": "then it's not going to be using any threads so pretty simple simple implementation you'll see this is a a",
    "start": "2155400",
    "end": "2160520"
  },
  {
    "text": "method reference that I'm using here in Java 8 so that's just calling this is like a echo web socket so when I get a",
    "start": "2160520",
    "end": "2167079"
  },
  {
    "text": "message coming from the client I'm going to turn around and write that back to the client and so I just do a method",
    "start": "2167079",
    "end": "2173319"
  },
  {
    "text": "handle Java 8 method handle for that okay so um let's spend a few minutes",
    "start": "2173319",
    "end": "2179440"
  },
  {
    "text": "talking about reactive actors so actors come from the earling days uh and",
    "start": "2179440",
    "end": "2185560"
  },
  {
    "text": "there's a few ideas of of actors that I want to highlight and then I'll show some code so uh the the actor",
    "start": "2185560",
    "end": "2192440"
  },
  {
    "text": "implementation that uh I'm going to be using is called aa aa is a actor",
    "start": "2192440",
    "end": "2197560"
  },
  {
    "text": "implementation on the jvm uh and so there's a few things that the actor model does for us one is that it manages",
    "start": "2197560",
    "end": "2204560"
  },
  {
    "text": "our concurrency for us so you probably have put synchronized calls in your your",
    "start": "2204560",
    "end": "2209640"
  },
  {
    "text": "Java code before that's one way to manage your concurrency it's a kind of",
    "start": "2209640",
    "end": "2214960"
  },
  {
    "text": "painful way to do it actors do that for you what they do the way that they do",
    "start": "2214960",
    "end": "2220400"
  },
  {
    "text": "that is that you create an actor and there's an actor in your system but in",
    "start": "2220400",
    "end": "2227280"
  },
  {
    "text": "order to talk to that actor you don't actually use it directly instead what you do with an actor is you send it a",
    "start": "2227280",
    "end": "2233760"
  },
  {
    "text": "message and that message goes into a mailbox and then when we can get a thread we will then deliver the message",
    "start": "2233760",
    "end": "2241040"
  },
  {
    "text": "to the actor and then the actor will process the message and once it's done processing the message it it goes to",
    "start": "2241040",
    "end": "2247920"
  },
  {
    "text": "sleep it's only using memory on the heat uh then it'll be ready to to receive",
    "start": "2247920",
    "end": "2253119"
  },
  {
    "text": "another message but an actor is guaranteed to only process one message at a time so now you have an alternative",
    "start": "2253119",
    "end": "2258880"
  },
  {
    "text": "to those synchronous synchronized blocks now you have something that you can guarantee is only going to be you only",
    "start": "2258880",
    "end": "2264839"
  },
  {
    "text": "going to happen one at a time so it's helping you manage your concurrency in a much higher level construct um so we",
    "start": "2264839",
    "end": "2273119"
  },
  {
    "text": "always use that actor ref for a few other reasons one of the reasons is that then we have location transparency so",
    "start": "2273119",
    "end": "2280280"
  },
  {
    "text": "with AA when you send a message to that actor ref the actual the actual actor",
    "start": "2280280",
    "end": "2286160"
  },
  {
    "text": "that's going to be handling that message could actually be somewhere else on the cluster and you uh you can you decide",
    "start": "2286160",
    "end": "2293119"
  },
  {
    "text": "how you want that to happen uh or if you want that to happen but it allows you to have the same construct for in jvm as",
    "start": "2293119",
    "end": "2300839"
  },
  {
    "text": "well as across jvm so you can scale up and out uh and then the other reason for",
    "start": "2300839",
    "end": "2306800"
  },
  {
    "text": "the actor for using a reference is that if for some reason that actor dies or",
    "start": "2306800",
    "end": "2312480"
  },
  {
    "text": "goes away it could be an uncaught exception or the jvm went down or whatever it may be by working with that",
    "start": "2312480",
    "end": "2318920"
  },
  {
    "text": "actor ref that actor ref is always good it's always good to get messages into the mailbox for that actor so there will",
    "start": "2318920",
    "end": "2326760"
  },
  {
    "text": "be a cue of of messages uh building up and it could be that while working",
    "start": "2326760",
    "end": "2332200"
  },
  {
    "text": "through the messages on that queue that the actra actually restarts or moves to a different server or whatever it may be",
    "start": "2332200",
    "end": "2339079"
  },
  {
    "text": "and the me the mailbox doesn't go away and the messages are still going to be delivered even across those restarts of",
    "start": "2339079",
    "end": "2345200"
  },
  {
    "text": "the actual actor so it gives us that transparency uh or trans uh ability to",
    "start": "2345200",
    "end": "2350920"
  },
  {
    "text": "to not have to worry about what's happening to that actual actor implementation so the last part about",
    "start": "2350920",
    "end": "2357160"
  },
  {
    "text": "actors that you need to know is that actors are built in trees so we start with the actor system that's really the",
    "start": "2357160",
    "end": "2363200"
  },
  {
    "text": "root and then we build up a tree of actors so what that means is that actors have children and a actor's parent is",
    "start": "2363200",
    "end": "2371400"
  },
  {
    "text": "its supervisor it's the thing that's responsible for for determining what happens when the actor fails and the",
    "start": "2371400",
    "end": "2378480"
  },
  {
    "text": "default supervision strategy is just to restart the actor uh but you can build your own Supervision in but this allows",
    "start": "2378480",
    "end": "2385280"
  },
  {
    "text": "you to contain failure into the the the node the branches of your actor system",
    "start": "2385280",
    "end": "2392160"
  },
  {
    "text": "so that it doesn't propagate up your system and take down everything so those are the import important parts of actors",
    "start": "2392160",
    "end": "2399000"
  },
  {
    "text": "um the only construct for for communicating with actors is to send it a message but actors can communicate out",
    "start": "2399000",
    "end": "2406920"
  },
  {
    "text": "by sending messages out to other things so this is how actors communicate it's always through sending these messages",
    "start": "2406920",
    "end": "2413839"
  },
  {
    "text": "actors can have a lifetime of either uh either milliseconds or of the entire",
    "start": "2413839",
    "end": "2419480"
  },
  {
    "text": "duration that an application is running or uh or a single request by the user so",
    "start": "2419480",
    "end": "2426280"
  },
  {
    "text": "so you can have many actors that have very very different uh different lifespans and a typical actor system may",
    "start": "2426280",
    "end": "2433760"
  },
  {
    "text": "have tens hundreds thousands even millions of actors in a single uh in a single actor",
    "start": "2433760",
    "end": "2440000"
  },
  {
    "start": "2440000",
    "end": "2841000"
  },
  {
    "text": "system so let's uh check out some code and this stuff I'm just going to copy and paste so I'm going to switch my my",
    "start": "2440000",
    "end": "2447760"
  },
  {
    "text": "little app here over to using actors instead of using the the promises that",
    "start": "2447760",
    "end": "2452880"
  },
  {
    "text": "I've been using so I'm going to first create here a new Java class and we'll",
    "start": "2452880",
    "end": "2459839"
  },
  {
    "text": "call this one um Fu actor put it in the actor's",
    "start": "2459839",
    "end": "2466440"
  },
  {
    "text": "package I'll just paste in that and then spend a few minutes importing things um",
    "start": "2466440",
    "end": "2473520"
  },
  {
    "text": "so let's import hopefully I get all the right ones and if you may be wondering why",
    "start": "2473520",
    "end": "2481640"
  },
  {
    "text": "there is two different uh two different apis if you've noticed that in these",
    "start": "2481640",
    "end": "2486880"
  },
  {
    "text": "import see there's play. API and play. not API",
    "start": "2486880",
    "end": "2492599"
  },
  {
    "text": "uh weirdest naming convention ever it's French actually um uh play was created",
    "start": "2492599",
    "end": "2498599"
  },
  {
    "text": "by by French guys and so API actually is the Scala API the non-api one is the",
    "start": "2498599",
    "end": "2505119"
  },
  {
    "text": "Java API one right everyone should have known that right it's obvious so um yeah",
    "start": "2505119",
    "end": "2511920"
  },
  {
    "text": "so there we go so you have to make sure you get the if we're using Java make sure you get the right non-api",
    "start": "2511920",
    "end": "2517960"
  },
  {
    "text": "API in there okay uh all right so then I'm going to change my controller so",
    "start": "2517960",
    "end": "2523839"
  },
  {
    "text": "we've got my actor I'll show you the code for that in a second let's go back here and change that um that's an actor",
    "start": "2523839",
    "end": "2533400"
  },
  {
    "text": "ref few more Imports uh that one",
    "start": "2533400",
    "end": "2539960"
  },
  {
    "text": "and let's see props this could be like a game we",
    "start": "2539960",
    "end": "2545640"
  },
  {
    "text": "play and w us response okay oh F actor one more okay so let's first go look at our",
    "start": "2545640",
    "end": "2552960"
  },
  {
    "text": "actor here so what I've done is I've created a new untyped actor uh an actor",
    "start": "2552960",
    "end": "2558960"
  },
  {
    "text": "the the main entry point into this actor is the onreceive method there is a new Java 8 API and AA for this and I'm not",
    "start": "2558960",
    "end": "2565839"
  },
  {
    "text": "using the new Java 8 API but it's much more Lambda e for doing this kind of stuff uh so this one is just the the",
    "start": "2565839",
    "end": "2573160"
  },
  {
    "text": "standard Java um API so I've got this on receive and it takes an untyped message",
    "start": "2573160",
    "end": "2579800"
  },
  {
    "text": "so whenever you communicate with actors it's always an untyped message and then you can do pattern matching or something",
    "start": "2579800",
    "end": "2585559"
  },
  {
    "text": "on that object to figure out what to do and so in this case I'm just making that",
    "start": "2585559",
    "end": "2590720"
  },
  {
    "text": "request getting back my promise but then I need to do something special so I now I'm doing something async and",
    "start": "2590720",
    "end": "2596599"
  },
  {
    "text": "non-blocking and I need to when that thing completes I want to route a message to the person who sent me this",
    "start": "2596599",
    "end": "2604240"
  },
  {
    "text": "on the other side of that call right so so I'm going across this async boundary",
    "start": "2604240",
    "end": "2609520"
  },
  {
    "text": "and I want to preserve the the sender the person who who sent me this and I",
    "start": "2609520",
    "end": "2614800"
  },
  {
    "text": "wanted to to not get that mixed up in in a concurrent um program and so I use",
    "start": "2614800",
    "end": "2622119"
  },
  {
    "text": "this patterns. pipe uh in order to handle that uh don't have a lot of time to go into what that's actually doing",
    "start": "2622119",
    "end": "2628359"
  },
  {
    "text": "but trust me if you're doing anything async and an actor use patterns. pipe okay so now over in our controller",
    "start": "2628359",
    "end": "2635280"
  },
  {
    "text": "here's where we're actually creating the so I'm going to the actor system and I'm saying create for me an actor of the fu",
    "start": "2635280",
    "end": "2642079"
  },
  {
    "text": "actor type and so this goes off and tells the actor system to create an instance of that actor but you'll see",
    "start": "2642079",
    "end": "2648319"
  },
  {
    "text": "what I get back is not the actor instance but an actor ref the reference to that thing and now I'm going to use",
    "start": "2648319",
    "end": "2654200"
  },
  {
    "text": "that actor ref to communicate with it so um what I'm doing is here's my my Foo",
    "start": "2654200",
    "end": "2661599"
  },
  {
    "text": "actor I'm doing an ask and the the default way I said that the only way that you could communicate with an",
    "start": "2661599",
    "end": "2667319"
  },
  {
    "text": "actors to send it a message there's uh that is true but there's an API kind of",
    "start": "2667319",
    "end": "2672359"
  },
  {
    "text": "syntactic sugar on top of that called an ask and an Ask sends a message but then gives me a promise of a response back it",
    "start": "2672359",
    "end": "2680680"
  },
  {
    "text": "it basically sets up internally a a a promise that will be fulfilled when that",
    "start": "2680680",
    "end": "2686640"
  },
  {
    "text": "actor responds to me with something else uh so actors they don't have to be request response but for some reason I",
    "start": "2686640",
    "end": "2693359"
  },
  {
    "text": "love request response stuff so and then uh when you do an ask you always have to to specify a timeout so I'm specifying a",
    "start": "2693359",
    "end": "2699599"
  },
  {
    "text": "5-second timeout okay so what I get back is a promise of object uh from that",
    "start": "2699599",
    "end": "2706040"
  },
  {
    "text": "because these messages between uh actors they are object and then what I'm going",
    "start": "2706040",
    "end": "2711599"
  },
  {
    "text": "to do is is do a map on that promise and then I'm going to cast this thing to a WS response and then just return that so",
    "start": "2711599",
    "end": "2720200"
  },
  {
    "text": "that's now my actor based implementation let's go refresh it and what we should see F all compiles there is James",
    "start": "2720200",
    "end": "2727599"
  },
  {
    "text": "so so there's jamesw word.com now going through the actor so there's a few",
    "start": "2727599",
    "end": "2732720"
  },
  {
    "text": "benefits to to the actor model we can we can use either or both models there's definitely use cases for for both um one",
    "start": "2732720",
    "end": "2739960"
  },
  {
    "text": "of the great use cases for actors which I haven't mentioned is uh when we have mutable State then actors are a great",
    "start": "2739960",
    "end": "2748040"
  },
  {
    "text": "place to put mutable State because you're going to be guaranteed that only one thread's going to be mutating that state at a time so uh so actors are",
    "start": "2748040",
    "end": "2754800"
  },
  {
    "text": "great for handling mutable State there also great for handling things like retries so what we can do is have a uh",
    "start": "2754800",
    "end": "2762280"
  },
  {
    "text": "have an actor that is acting as like this this kind of manager for retries",
    "start": "2762280",
    "end": "2767480"
  },
  {
    "text": "and for making sure that we get a response a very simple example of this is uh it's very common that I'll have in",
    "start": "2767480",
    "end": "2774000"
  },
  {
    "text": "my systems an actor that is going to get some data but I have both the database",
    "start": "2774000",
    "end": "2779400"
  },
  {
    "text": "and I have a cache system to get data from uh or I want to get it from ideally I want to get it from the cash but if I",
    "start": "2779400",
    "end": "2785599"
  },
  {
    "text": "get a cash Miss then I want to go go to the the database right and so um so if I",
    "start": "2785599",
    "end": "2790640"
  },
  {
    "text": "have an actor I make a request to the actor and say hey I need this data I can actually use a router in AA to say now",
    "start": "2790640",
    "end": "2798240"
  },
  {
    "text": "send a request to both the cach actor and the database actor and there's a router called um uh it's like scatter",
    "start": "2798240",
    "end": "2806720"
  },
  {
    "text": "gather First Complete is the router so it scatters the messages it sends them",
    "start": "2806720",
    "end": "2812119"
  },
  {
    "text": "to to both of my child child actors and then the first one that gives me response back is the one that I actually",
    "start": "2812119",
    "end": "2818760"
  },
  {
    "text": "end up uh using the the value that I actually use uh so you could use um",
    "start": "2818760",
    "end": "2824960"
  },
  {
    "text": "something like that or or uh there's other routers in AA as well to create a retry type of system retries probably",
    "start": "2824960",
    "end": "2832720"
  },
  {
    "text": "have some State involved like number of retries how many times I've tried that sort of thing so an actor becomes a good",
    "start": "2832720",
    "end": "2838640"
  },
  {
    "text": "way to to put that state information and do the retries yeah so you could definitely create a AA router that would",
    "start": "2838640",
    "end": "2845520"
  },
  {
    "start": "2841000",
    "end": "2866000"
  },
  {
    "text": "do have exactly that Behavior there's some out of the-box routers and then you can write your own custom routers as",
    "start": "2845520",
    "end": "2851480"
  },
  {
    "text": "well so maybe somebody's already written one that that specifically does that but um okay so that's a real quick intro to",
    "start": "2851480",
    "end": "2858760"
  },
  {
    "text": "to actors I want to move on uh so that I can talk about reactive streams real quick and then we'll we'll have a few",
    "start": "2858760",
    "end": "2865160"
  },
  {
    "text": "minutes for questions so reactive streams what it is is a new uh a new project AC cross collaboration between",
    "start": "2865160",
    "end": "2871800"
  },
  {
    "start": "2866000",
    "end": "2991000"
  },
  {
    "text": "typesafe Netflix uh Twitter and a bunch of other people to create uh basically a",
    "start": "2871800",
    "end": "2877760"
  },
  {
    "text": "jvm standard for doing async and non-blocking reactive streams with back",
    "start": "2877760",
    "end": "2883880"
  },
  {
    "text": "pressure and so there will be a number of what the what the reactive streams project is is a reference implementation",
    "start": "2883880",
    "end": "2891280"
  },
  {
    "text": "a specification a tck uh so all the things that somebody could create an",
    "start": "2891280",
    "end": "2897000"
  },
  {
    "text": "implementation of reactive streams on top of so the RX Java guys are working on a reactive streams uh implementation",
    "start": "2897000",
    "end": "2904800"
  },
  {
    "text": "on top of RX Java there's of course an AA implementation and there's a finagle",
    "start": "2904800",
    "end": "2910800"
  },
  {
    "text": "imple I think it's fin no sorry there's a netti no vertex got it the third time vertex implementation uh of reactive",
    "start": "2910800",
    "end": "2918440"
  },
  {
    "text": "streams as well uh so this is a really exciting new project for being able to do async and non-blocking streams of",
    "start": "2918440",
    "end": "2925880"
  },
  {
    "text": "data uh with back pressure so real quick example of back pressure uh is if I have",
    "start": "2925880",
    "end": "2931960"
  },
  {
    "text": "an upload coming from a client to a server and then I'm just taking those bites and pushing them to like Amazon S3",
    "start": "2931960",
    "end": "2937920"
  },
  {
    "text": "or some other service I really don't want the client to send more bites than",
    "start": "2937920",
    "end": "2943200"
  },
  {
    "text": "I can send to that next service because then I'll be building up giant buffers and uh and running out of memory and so",
    "start": "2943200",
    "end": "2950760"
  },
  {
    "text": "I want to be able to put back pressure on the the producer to say stop",
    "start": "2950760",
    "end": "2957079"
  },
  {
    "text": "producing so much data or slow down uh but I want to be able to do that in a reactive way traditionally back pressure",
    "start": "2957079",
    "end": "2963559"
  },
  {
    "text": "has been done uh in most implementations in a very synchronous way in a very",
    "start": "2963559",
    "end": "2969079"
  },
  {
    "text": "blocking way and so reactive streams is about being able to do that in a non-blocking way so check it out",
    "start": "2969079",
    "end": "2975599"
  },
  {
    "text": "reactive streams. org for more information there is uh already implementations there's in typesafe",
    "start": "2975599",
    "end": "2981720"
  },
  {
    "text": "activator there's already uh some some sample applications to get you started with reactive streams so check that out",
    "start": "2981720",
    "end": "2988359"
  },
  {
    "text": "that's that's pretty new and exciting okay so time for questions we",
    "start": "2988359",
    "end": "2993480"
  },
  {
    "start": "2991000",
    "end": "3142000"
  },
  {
    "text": "have a couple more minutes so in this case I want to be able to call my",
    "start": "2993480",
    "end": "2999680"
  },
  {
    "text": "function when I've got the response back and that's all async and non-blocking for both of them so so when the when the",
    "start": "2999680",
    "end": "3006960"
  },
  {
    "text": "response comes back from the service it just sits on the Heap until I actually",
    "start": "3006960",
    "end": "3012000"
  },
  {
    "text": "uh until I actually need it and so uh so it's not actually using a thread",
    "start": "3012000",
    "end": "3018839"
  },
  {
    "text": "um no no so it's not when it's when it's just sitting idle it's uh when I'm not",
    "start": "3019160",
    "end": "3025559"
  },
  {
    "text": "actively transferring bites over the wire it's not using network resources it's not using a thread it's only using memory on the heat uh so so that was the",
    "start": "3025559",
    "end": "3033559"
  },
  {
    "text": "that was the whole goal was to get async and non-blocking all the way through that whole chain and not be ever",
    "start": "3033559",
    "end": "3038880"
  },
  {
    "text": "blocking resources that aren't being used ever so so that's why I had to Nest those there there is another way to do",
    "start": "3038880",
    "end": "3045640"
  },
  {
    "text": "that that I didn't show and if I have a bunch of uh it's technically the same thing but if I have a bunch of promises",
    "start": "3045640",
    "end": "3052520"
  },
  {
    "text": "that I want to kind of aggregate together there's something called promise. sequence or future. sequence",
    "start": "3052520",
    "end": "3058520"
  },
  {
    "text": "and that takes a list of promises and then allows me to uh to have a map",
    "start": "3058520",
    "end": "3064839"
  },
  {
    "text": "function on the on all of them that then uh I get back a list of all of my",
    "start": "3064839",
    "end": "3072760"
  },
  {
    "text": "responses or all the objects that I get back uh so um so that would be another way to do it there's also a zip and a",
    "start": "3072760",
    "end": "3079040"
  },
  {
    "text": "number of other ways but um but any way you look at as long as you stick with",
    "start": "3079040",
    "end": "3084319"
  },
  {
    "text": "the map functions and and uh async and non-blocking constructs then you will be async and non-blocking all the way",
    "start": "3084319",
    "end": "3090640"
  },
  {
    "text": "throughout there will never be a time when you're you're blocking resources unnecessarily so um by default promises",
    "start": "3090640",
    "end": "3097000"
  },
  {
    "text": "don't actually have a concept of a timeout in them plays web service client Library does and then there's also you",
    "start": "3097000",
    "end": "3103559"
  },
  {
    "text": "can you can create a a promise that does have a timeout if you just I found it on",
    "start": "3103559",
    "end": "3109000"
  },
  {
    "text": "stack Overflow but um but so you create a promise that does have a timeout and",
    "start": "3109000",
    "end": "3114280"
  },
  {
    "text": "then that would fail and then you would do recover with on that to deal with",
    "start": "3114280",
    "end": "3119440"
  },
  {
    "text": "with the failure with the timeout failure I can show you code examples of of that if you want afterwards okay all",
    "start": "3119440",
    "end": "3125680"
  },
  {
    "text": "right well thanks for coming I hope that was useful I'll be around if you have other questions thanks",
    "start": "3125680",
    "end": "3132039"
  },
  {
    "text": "[Music]",
    "start": "3132890",
    "end": "3141949"
  }
]