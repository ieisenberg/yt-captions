[
  {
    "text": "[Music] thank you",
    "start": "3690",
    "end": "9780"
  },
  {
    "text": "um okay so thanks Tim thanks for the introduction uh as Tim said today we are going to talk about Multicultural camel",
    "start": "9780",
    "end": "16920"
  },
  {
    "text": "which is a project that I need uh which aims to add native support for concurrency and parallelism to your",
    "start": "16920",
    "end": "23100"
  },
  {
    "text": "camera and let's set aside what these mean right so I defined concurrency as",
    "start": "23100",
    "end": "29720"
  },
  {
    "text": "overlapped execution of tasks over time whereas I defined parallelism as simultaneous executioner of tasks in",
    "start": "29720",
    "end": "36780"
  },
  {
    "text": "time and in keeping with this separation in multicolor camel we have distinct",
    "start": "36780",
    "end": "42420"
  },
  {
    "text": "mechanisms for concurrency and parallelism for concurrency we have what are known as effect handlers",
    "start": "42420",
    "end": "48539"
  },
  {
    "text": "and for parallelism we have a separate mechanism called domains and in today's talk I'm going to focus on this effect",
    "start": "48539",
    "end": "56219"
  },
  {
    "text": "Handler mechanism so as I said this is a mechanism for concurrent programming so let's define",
    "start": "56219",
    "end": "63600"
  },
  {
    "text": "what concurrent programming is right in the broad sweep I Define concurrent programming as",
    "start": "63600",
    "end": "69720"
  },
  {
    "text": "this programmatic support for suspending computations and then resuming them later",
    "start": "69720",
    "end": "75119"
  },
  {
    "text": "many languages do provide confident programming abstractions as Primitives in the language",
    "start": "75119",
    "end": "81119"
  },
  {
    "text": "you have various Primitives such as async away generators co-routines Futures promises and often it is the",
    "start": "81119",
    "end": "88740"
  },
  {
    "text": "case that each of these mechanisms is certainly different from the other one and languages tend to accumulate",
    "start": "88740",
    "end": "95640"
  },
  {
    "text": "features right so they end up having more than one of these in the language and a good example is Javascript right",
    "start": "95640",
    "end": "101880"
  },
  {
    "text": "it's just support for async away generators promises and you can also see callback oriented programs in JavaScript",
    "start": "101880",
    "end": "109259"
  },
  {
    "text": "so what is the state of content programming in ocamil today there is no primitive support for",
    "start": "109259",
    "end": "114780"
  },
  {
    "text": "confident programming in ocam today if you had to write conclusion programs in no camo you will use libraries such",
    "start": "114780",
    "end": "121680"
  },
  {
    "text": "as Liberty and async which are essentially monadic libraries that sort of simulate",
    "start": "121680",
    "end": "127799"
  },
  {
    "text": "concurrency um and the interesting what you're doing is you're writing callback or needed",
    "start": "127799",
    "end": "132840"
  },
  {
    "text": "programs with nicer looking syntax right even though they use monadic syntax",
    "start": "132840",
    "end": "138300"
  },
  {
    "text": "these are not true monads they are they do not satisfy monad laws but I'm sort of not going to delve deep into that",
    "start": "138300",
    "end": "144720"
  },
  {
    "text": "today but they do suffer the pitfalls of qualified oriented programming which is",
    "start": "144720",
    "end": "150540"
  },
  {
    "text": "that because you are using callbacks all the all the um all the while you cannot use your",
    "start": "150540",
    "end": "155940"
  },
  {
    "text": "camel exceptions anymore right so because uh when you throw an exception it goes to the wrong place and similarly",
    "start": "155940",
    "end": "162060"
  },
  {
    "text": "you're not using a stack for execution you're sort of CPS transform your code by hand using callbacks so you can't get",
    "start": "162060",
    "end": "169080"
  },
  {
    "text": "useful back traces and lastly it is also the case that because there is callbacks",
    "start": "169080",
    "end": "174360"
  },
  {
    "text": "everywhere you end up allocating more closures than you would and more significantly right the use of",
    "start": "174360",
    "end": "182519"
  },
  {
    "text": "monads sort of splits the ecosystem into the asynchronous parts and the",
    "start": "182519",
    "end": "187739"
  },
  {
    "text": "synchronous parts and you have to have special calling conventions for calling these asynchronous functions right and",
    "start": "187739",
    "end": "196080"
  },
  {
    "text": "as you would soon see anything that can potentially block will have to be asynchronous so soon any application",
    "start": "196080",
    "end": "201959"
  },
  {
    "text": "that sort of wants to use any of these libraries soon become a whole mess of monotic code right",
    "start": "201959",
    "end": "209580"
  },
  {
    "text": "um I mean this is not a problem unique to a camel if you are interested on this topic you should read this excellent",
    "start": "209580",
    "end": "215220"
  },
  {
    "text": "essay by Bob neston and what color is your function",
    "start": "215220",
    "end": "220340"
  },
  {
    "text": "okay we are building this uh new language extension let's fix this problem right so we asked ourselves",
    "start": "220340",
    "end": "226799"
  },
  {
    "text": "which Native concurrent programming mechanism should we add Tokyo we've seen many what is it uh should we add",
    "start": "226799",
    "end": "233879"
  },
  {
    "text": "so in fact uh we actually dig in deeper and we add a more primitive mechanism called the effect handles to the",
    "start": "233879",
    "end": "239940"
  },
  {
    "text": "language and what effect handlers are is a mechanism for the programming with",
    "start": "239940",
    "end": "245459"
  },
  {
    "text": "user defined effects and they serve as the modular basis for",
    "start": "245459",
    "end": "250620"
  },
  {
    "text": "all non-local control so mechanisms in particular mechanisms such as exceptions",
    "start": "250620",
    "end": "255680"
  },
  {
    "text": "generators Library threads promises asynchronous can be expressed as libraries on top of",
    "start": "255680",
    "end": "262919"
  },
  {
    "text": "effect handlers and they also have this nice composibility property which is that if you have two different libraries",
    "start": "262919",
    "end": "269759"
  },
  {
    "text": "which Implement some mechanism using effect handlers you can put them together and they remain well behaved",
    "start": "269759",
    "end": "275699"
  },
  {
    "text": "right so that's an advantage of effect handlers so from an operational point of view",
    "start": "275699",
    "end": "281580"
  },
  {
    "text": "right um You can think of effect standards as providing a means for first class",
    "start": "281580",
    "end": "287100"
  },
  {
    "text": "restartable exceptions right so when you have exceptions you can raise them and then handle it",
    "start": "287100",
    "end": "293340"
  },
  {
    "text": "separately similarly you can also perform an effect and then handle it separately but in addition to exceptions",
    "start": "293340",
    "end": "300120"
  },
  {
    "text": "you have this ability to go back to where the exception was performed so that you resume the computation that",
    "start": "300120",
    "end": "306060"
  },
  {
    "text": "was suspended that's the property that we are going to use all the way through the stock right",
    "start": "306060",
    "end": "311940"
  },
  {
    "text": "so because effect Tanners are very similar to exceptions we extend the",
    "start": "311940",
    "end": "317220"
  },
  {
    "text": "exception handling syntax to no camel in order to add effect handles into the language so here is a very simple example that",
    "start": "317220",
    "end": "324300"
  },
  {
    "text": "shows how we use effect standards in multicolor camel so firstly we have an effect declaration",
    "start": "324300",
    "end": "330360"
  },
  {
    "text": "just like an exception declaration except that this says when you perform this effect e you are",
    "start": "330360",
    "end": "338280"
  },
  {
    "text": "going to get a return value which is a string right and similar to exception we have some",
    "start": "338280",
    "end": "344699"
  },
  {
    "text": "computations that we run within a Handler the handlers here and within the",
    "start": "344699",
    "end": "349919"
  },
  {
    "text": "computation what you can do is you can perform the effect that you've just declared and what perform does is",
    "start": "349919",
    "end": "355919"
  },
  {
    "text": "something special it suspends the current computation and then",
    "start": "355919",
    "end": "361259"
  },
  {
    "text": "it gives you just like exception handles you sort of look for the matching",
    "start": "361259",
    "end": "367259"
  },
  {
    "text": "um Handler in your except FX tag and when you find that you get this extra",
    "start": "367259",
    "end": "372539"
  },
  {
    "text": "parameter which is K there and K is what gives exception Handler all its power",
    "start": "372539",
    "end": "377820"
  },
  {
    "text": "right K is what is known as the delimited continuation in simple terms it is the rest of the",
    "start": "377820",
    "end": "384000"
  },
  {
    "text": "computation between the point of perform and this",
    "start": "384000",
    "end": "389160"
  },
  {
    "text": "Handler right so it's sort of this Dynamic function that you get to Define right and that what that encapsulates is",
    "start": "389160",
    "end": "397020"
  },
  {
    "text": "the suspend handle to the suspended computation right once you suspended you",
    "start": "397020",
    "end": "402120"
  },
  {
    "text": "want to also resume it so we have this additional perimeter called continue that says okay I have this suspended",
    "start": "402120",
    "end": "408120"
  },
  {
    "text": "computation now I want to continue it and the additional thing that you have to provide for this is the value which",
    "start": "408120",
    "end": "415080"
  },
  {
    "text": "is expected when they perform returns so because we declared effectively to return a string we have to resume it",
    "start": "415080",
    "end": "422460"
  },
  {
    "text": "with a string value which comes out of here so this is just a syntax let's walk",
    "start": "422460",
    "end": "427680"
  },
  {
    "text": "through the semantics now right we are going to step through the same example again on the left I have the same code",
    "start": "427680",
    "end": "433620"
  },
  {
    "text": "but I have the program counter that is just before the entry to this computation on the right what I'm going",
    "start": "433620",
    "end": "439919"
  },
  {
    "text": "to show is how the stack evolves as we keep executing this program and the idea",
    "start": "439919",
    "end": "445139"
  },
  {
    "text": "here is this is exactly how multicolor camel implements effect candles right so it's it's useful to understand how it",
    "start": "445139",
    "end": "450419"
  },
  {
    "text": "works but also give an idea of the actual implementation So currently we are in the main computation so we have a",
    "start": "450419",
    "end": "458280"
  },
  {
    "text": "main stack and our stack pointer is on the top of this stack we are just before entering this computation",
    "start": "458280",
    "end": "463380"
  },
  {
    "text": "so once you enter the computation the first thing that we do is to actually allocate a very small piece of Stack",
    "start": "463380",
    "end": "469620"
  },
  {
    "text": "that is managed by the O camel runtime and this piece of Stack starts off at 32",
    "start": "469620",
    "end": "475979"
  },
  {
    "text": "words and it dynamically grows on need right and we also associate the Handler",
    "start": "475979",
    "end": "483000"
  },
  {
    "text": "that is associated with that particular computation so we call this computation and the",
    "start": "483000",
    "end": "488819"
  },
  {
    "text": "Handler as a fiber right so this is a new stat for executing the configuration but we also",
    "start": "488819",
    "end": "495240"
  },
  {
    "text": "pressure the stack discipline so this computation has a this fiber has a parent pointer that points to the",
    "start": "495240",
    "end": "502080"
  },
  {
    "text": "previous fiber that happened to them to be the main fiber right so we start executing this computation so we print 0",
    "start": "502080",
    "end": "509220"
  },
  {
    "text": "and then now my program counter is just before perform right so what I mentioned",
    "start": "509220",
    "end": "515940"
  },
  {
    "text": "earlier was that we are going to suspend the computation and the way we achieve suspension is very simple",
    "start": "515940",
    "end": "523380"
  },
  {
    "text": "we actually allocate a very small object one word object K that stands for a",
    "start": "523380",
    "end": "529500"
  },
  {
    "text": "continuation that points to this fiber right and that's it that's how we've",
    "start": "529500",
    "end": "535140"
  },
  {
    "text": "suspended the computation we've captured a continuation essentially and we now look for the matching Handler for this",
    "start": "535140",
    "end": "541500"
  },
  {
    "text": "effect and we have only one Handler that does that so that is in the main fiber",
    "start": "541500",
    "end": "546839"
  },
  {
    "text": "so my control now switches to the main fiber I start evaluating the body of the",
    "start": "546839",
    "end": "553680"
  },
  {
    "text": "corresponding handle right so uh main actually gets a reference to K and we now start executing the body just like",
    "start": "553680",
    "end": "560519"
  },
  {
    "text": "you would in an exception Handler so we print one and now I'm just before continue",
    "start": "560519",
    "end": "566339"
  },
  {
    "text": "Primitives so what continue does is it resumes the computation",
    "start": "566339",
    "end": "571500"
  },
  {
    "text": "and what assumption does here is it actually attaches the continuation on",
    "start": "571500",
    "end": "576660"
  },
  {
    "text": "top of the current stack right and what this the effect that it has the first level the effect that it has is uh it",
    "start": "576660",
    "end": "583920"
  },
  {
    "text": "erases this uh reference from K to com the reason why we do this is to enforce",
    "start": "583920",
    "end": "590640"
  },
  {
    "text": "one short delimited continuations this one shortness is very important because you can Implement one shot",
    "start": "590640",
    "end": "596519"
  },
  {
    "text": "configurations very efficiently without having to copy any of the frames right we haven't copied anything yet we",
    "start": "596519",
    "end": "603180"
  },
  {
    "text": "haven't copied the stacks hence we do this one shot um enforce this one shot property",
    "start": "603180",
    "end": "610200"
  },
  {
    "text": "and the next thing that we do is we actually restore um the parent pointer and set a control",
    "start": "610200",
    "end": "616019"
  },
  {
    "text": "back to com and we start resuming from the point where we left off so because",
    "start": "616019",
    "end": "621360"
  },
  {
    "text": "we are assumed with two we still print the string tube",
    "start": "621360",
    "end": "626399"
  },
  {
    "text": "and now we are just before printing three what has to happen after printing three the computation is going to return right",
    "start": "626399",
    "end": "633720"
  },
  {
    "text": "and something special happens here uh when the computation returns it returns back to uh just after continue",
    "start": "633720",
    "end": "642180"
  },
  {
    "text": "why because uh resuming a continuation is like a function call right so we have delimited continuations when you suspend",
    "start": "642180",
    "end": "648660"
  },
  {
    "text": "a computation computation is like a dynamically created function so it returns at the point I have also freed the stack that I",
    "start": "648660",
    "end": "656640"
  },
  {
    "text": "allocated for the the computation because it is no longer required the computation has returned",
    "start": "656640",
    "end": "662100"
  },
  {
    "text": "uh in the runtime we just simply use Malik and free to allocate these pieces of Stack",
    "start": "662100",
    "end": "667560"
  },
  {
    "text": "and I have the rest of the body uh to do which is print 4 and the whole program",
    "start": "667560",
    "end": "673440"
  },
  {
    "text": "now runs to completion right so this is this gives you an idea of how the operational semantics of effect",
    "start": "673440",
    "end": "680220"
  },
  {
    "text": "unders uh is right just like exception handlers effect standards can also be nested so here I",
    "start": "680220",
    "end": "687060"
  },
  {
    "text": "have a function Foo which runs computation bar which handles effect a and bar runs bars which handles effect p",
    "start": "687060",
    "end": "693480"
  },
  {
    "text": "and baz performs a right and just before this perform my stack looks like this so",
    "start": "693480",
    "end": "700079"
  },
  {
    "text": "my stack program stack is actually a stack of fibers now and I'm on the top fiber executing stuff and when I want to",
    "start": "700079",
    "end": "707339"
  },
  {
    "text": "perform my dynamically search for the uh the matching Handler I have to linearly search through each one I mean that is",
    "start": "707339",
    "end": "714300"
  },
  {
    "text": "just an artifact of the implementation this is what exceptionalities also do and this is fine in practice uh the",
    "start": "714300",
    "end": "721260"
  },
  {
    "text": "exception the effect Handler stack is very shallow for real program so it",
    "start": "721260",
    "end": "726540"
  },
  {
    "text": "doesn't really matter and we find that effect a is matched in",
    "start": "726540",
    "end": "731820"
  },
  {
    "text": "this Foo fiber here right so our control switches all the way to the full fiber and our continuation now is composed of",
    "start": "731820",
    "end": "738899"
  },
  {
    "text": "both bars and bar fibers right together they represent the suspended computation",
    "start": "738899",
    "end": "744420"
  },
  {
    "text": "so that is why we sort of capture them together as a suspended configuration",
    "start": "744420",
    "end": "749459"
  },
  {
    "text": "and this is this is sort of you see an idea of how the entire um semantics works right",
    "start": "749459",
    "end": "756720"
  },
  {
    "text": "so and then you start evaluating the body of the um Handler as before",
    "start": "756720",
    "end": "761880"
  },
  {
    "text": "okay this is all fine right so we've sort of dug in let's actually build some stuff right so this is where the fund is",
    "start": "761880",
    "end": "768240"
  },
  {
    "text": "so let's build lightweight threading so I'm going to build a very simple lightweight threaded scheduler that",
    "start": "768240",
    "end": "773820"
  },
  {
    "text": "gives you an ability to Fork off your computations and yield the current computation to some other thread right",
    "start": "773820",
    "end": "779519"
  },
  {
    "text": "so correspondingly we Define Effect 4 which is parameterized with this unit",
    "start": "779519",
    "end": "785160"
  },
  {
    "text": "error unit tongue that's the function that you're going to spawn off concurrently and it says that when you when you",
    "start": "785160",
    "end": "791940"
  },
  {
    "text": "perform four you get a unit value back right and you have this yield",
    "start": "791940",
    "end": "798000"
  },
  {
    "text": "um yield effect which when performed just returns your unit so we haven't defined what the semantics",
    "start": "798000",
    "end": "803220"
  },
  {
    "text": "of fork and yield is I'm just telling you what their signatures are the actual work is done in the Run",
    "start": "803220",
    "end": "809639"
  },
  {
    "text": "function which does the heavy lifting right in this run function I am going to run this main computation which can",
    "start": "809639",
    "end": "816000"
  },
  {
    "text": "potentially perform for canel I assume that there is a simple low camel queue of continuations these",
    "start": "816000",
    "end": "822360"
  },
  {
    "text": "continuations are just values you can store them in data structures retrieve them and so on so I assume that there is a queue of",
    "start": "822360",
    "end": "828480"
  },
  {
    "text": "continuations right when you call run on Main it calls spawn on Main whereas",
    "start": "828480",
    "end": "834000"
  },
  {
    "text": "bonus is recursive function right and what spawn is going to do is to evaluate this F in an effect Handler",
    "start": "834000",
    "end": "842120"
  },
  {
    "text": "so ocml has support for the exception patterns in match with syntax we also",
    "start": "842120",
    "end": "847920"
  },
  {
    "text": "extend that to have effect patterns as well so what what can f Do Right F can run to",
    "start": "847920",
    "end": "854579"
  },
  {
    "text": "completion if it runs to completion it runs the unit value at which point you should run the next",
    "start": "854579",
    "end": "859920"
  },
  {
    "text": "thread from the scheduler and how is that implemented you try to dequeue your scheduler queue",
    "start": "859920",
    "end": "866220"
  },
  {
    "text": "if you do find the continuation that is waiting to be run you just continue it with the unit value",
    "start": "866220",
    "end": "872940"
  },
  {
    "text": "if not your competition was done and there are no other pending threads in the",
    "start": "872940",
    "end": "878880"
  },
  {
    "text": "scheduler so you're actually done with running the main function so the main function can return so that's the value case but F can also",
    "start": "878880",
    "end": "886139"
  },
  {
    "text": "perform the FX for kanil right if it does a four you handle the fork effect",
    "start": "886139",
    "end": "891240"
  },
  {
    "text": "and you get a continuation K right and you can sort of think about this continuation now as the Handler for the",
    "start": "891240",
    "end": "897660"
  },
  {
    "text": "current thread right so I have the handle for the current right I enqueue the current thread and then call Run",
    "start": "897660",
    "end": "903360"
  },
  {
    "text": "next to run the next thread from the scheduler and similarly I can handle the fork effect where I get the Handler to",
    "start": "903360",
    "end": "910500"
  },
  {
    "text": "the current thread I enqueue the current thread and then recursively call spawn on F so that that is also spawned",
    "start": "910500",
    "end": "917399"
  },
  {
    "text": "concurrently under the same handle so one thing that we do all the time is we sort of wrap these effects in nice",
    "start": "917399",
    "end": "924480"
  },
  {
    "text": "looking functions uh four can heal here and all I'm doing here is I'm just calling the",
    "start": "924480",
    "end": "929639"
  },
  {
    "text": "corresponding performing the corresponding effect this just looks nicer from user's point of view",
    "start": "929639",
    "end": "935339"
  },
  {
    "text": "and this is how it looks here's a very simple program and this main function spawns of two",
    "start": "935339",
    "end": "941100"
  },
  {
    "text": "fourths of two threads Each of which prints a message yields control prints another message right and I'm going to",
    "start": "941100",
    "end": "947579"
  },
  {
    "text": "run this main computation and when you run it the output that you're going to see is 182a1 B2B you can",
    "start": "947579",
    "end": "954240"
  },
  {
    "text": "actually see that this is concurrent and the reason why this happens is you start running this main function that's going",
    "start": "954240",
    "end": "960000"
  },
  {
    "text": "to forecast this new thread start running printing the first message yielding control which yields control",
    "start": "960000",
    "end": "966120"
  },
  {
    "text": "back to the main thread which works off the second thread which prints the second message yields control which goes",
    "start": "966120",
    "end": "972720"
  },
  {
    "text": "back to the suspended first thread which prints one B that runs to completion and",
    "start": "972720",
    "end": "978180"
  },
  {
    "text": "then the only thread that is left to run is the second thread which you print and",
    "start": "978180",
    "end": "983220"
  },
  {
    "text": "then you're done right so you can get a concurrency using fork and yield",
    "start": "983220",
    "end": "989459"
  },
  {
    "text": "this is fine I want you to take away two points from here right there are no monads for row camera programmers if you",
    "start": "989459",
    "end": "995279"
  },
  {
    "text": "wanted to do something like this you will have to use a monadic uh concurrency Library like lwk racing",
    "start": "995279",
    "end": "1000920"
  },
  {
    "text": "everything looks in direct style right there is no bind or anything it looks like straight line or camera code and",
    "start": "1000920",
    "end": "1007040"
  },
  {
    "text": "the user code here is not aware of FX right the whole business of effect handlers and perform and everything is",
    "start": "1007040",
    "end": "1013759"
  },
  {
    "text": "nicely hidden behind signatures so for your users it just looks like plain plain old sequential or camera code but",
    "start": "1013759",
    "end": "1020240"
  },
  {
    "text": "you get concurrency so the next example that we're going to see is uh implementing generators right",
    "start": "1020240",
    "end": "1027438"
  },
  {
    "text": "what are generators generators are these mechanisms for non-continuous traversals",
    "start": "1027439",
    "end": "1032959"
  },
  {
    "text": "of your data structure by yielding values right so they are implemented as Primitives in JavaScript and python so",
    "start": "1032959",
    "end": "1039798"
  },
  {
    "text": "here is um a generated example from JavaScript so you have to declare",
    "start": "1039799",
    "end": "1046000"
  },
  {
    "text": "any function that can yield value suspend computation as function start right and within which you can yield",
    "start": "1046000",
    "end": "1052940"
  },
  {
    "text": "values so the idea here is to yield the argument first and then 10 plus the argument next and when you call this",
    "start": "1052940",
    "end": "1059900"
  },
  {
    "text": "function you actually get a generated back and you can get the values by demand by calling the next",
    "start": "1059900",
    "end": "1068299"
  },
  {
    "text": "function on this generator which gives you 10 first because I'm yielding the argument here and then 20 next because",
    "start": "1068299",
    "end": "1073940"
  },
  {
    "text": "that is the argument plus 10. right so this is what you have to do for generators in JavaScript observe that uh",
    "start": "1073940",
    "end": "1082520"
  },
  {
    "text": "um this is what I meant by coloring the function it's sort of splits the world into asynchronous functions which return",
    "start": "1082520",
    "end": "1088039"
  },
  {
    "text": "a generator and then synchronous functions which sort of uh you call directly right",
    "start": "1088039",
    "end": "1093620"
  },
  {
    "text": "what I want to do with um effect candles is that we can automatically derive a",
    "start": "1093620",
    "end": "1100280"
  },
  {
    "text": "generator from an iterator for any data structure right this is what we are",
    "start": "1100280",
    "end": "1105679"
  },
  {
    "text": "going to do I'm going to show you how to do it so I am going to define a functor right if",
    "start": "1105679",
    "end": "1112280"
  },
  {
    "text": "you don't know what functions are here is what the the idea is right so",
    "start": "1112280",
    "end": "1118700"
  },
  {
    "text": "functor says tell me what the type of the data structure is the container is and give me the iterative function on",
    "start": "1118700",
    "end": "1125240"
  },
  {
    "text": "this container that applies this high order function on each value of the container right and then returns your",
    "start": "1125240",
    "end": "1131539"
  },
  {
    "text": "unit value and what this functor promises to return is a function gen which when applied on the container",
    "start": "1131539",
    "end": "1139400"
  },
  {
    "text": "returns your function again which can be repeatedly called in order",
    "start": "1139400",
    "end": "1144440"
  },
  {
    "text": "to get values on Demand right so it returns some values until the iteration is done and finally it returns none",
    "start": "1144440",
    "end": "1152059"
  },
  {
    "text": "so here is the entire instrumentation right I don't want you to focus on the code because it uses several Advanced",
    "start": "1152059",
    "end": "1159020"
  },
  {
    "text": "features but the important details are that we are going to declare and effect yield right",
    "start": "1159020",
    "end": "1165160"
  },
  {
    "text": "which is uh which is used to yield values at every step of the iteration right which is handled right here and",
    "start": "1165160",
    "end": "1173900"
  },
  {
    "text": "then we prepare the step function somehow in order to resume the computation and at every step we yield",
    "start": "1173900",
    "end": "1179360"
  },
  {
    "text": "the value right so that is what is happening here with some additional",
    "start": "1179360",
    "end": "1184640"
  },
  {
    "text": "support from the language in order for type safety and so on but from a user's point of view this is very simple right",
    "start": "1184640",
    "end": "1190580"
  },
  {
    "text": "here is a generator for a list that is made using the list type and the list",
    "start": "1190580",
    "end": "1197000"
  },
  {
    "text": "iterator what can you do with this you can start applying this generator on a list so I'm",
    "start": "1197000",
    "end": "1204620"
  },
  {
    "text": "applying it on one two three I get a next function and I can call this function on demand to get the values one",
    "start": "1204620",
    "end": "1210140"
  },
  {
    "text": "two three and then it returns none because the iteration is done I can use the same",
    "start": "1210140",
    "end": "1215559"
  },
  {
    "text": "implementation in order to get generators for a tree so here is a binary tree I have a iterator which does",
    "start": "1215559",
    "end": "1222620"
  },
  {
    "text": "in order traversal on the binary tree I'm making a generator for a tree here",
    "start": "1222620",
    "end": "1227660"
  },
  {
    "text": "using the list sorry the tree type and the trees iterator",
    "start": "1227660",
    "end": "1232820"
  },
  {
    "text": "I have this helper function for constructing trees it makes a complete binary tray of depth",
    "start": "1232820",
    "end": "1239840"
  },
  {
    "text": "n using offense space and the trick here is to actually construct dags not complete trees but that's some detail",
    "start": "1239840",
    "end": "1247640"
  },
  {
    "text": "but what you get is when you make two right you get a tree you just do at the root and one at the leaves",
    "start": "1247640",
    "end": "1254660"
  },
  {
    "text": "and you can in fact now go ahead and call t.gen on this tree and then you get",
    "start": "1254660",
    "end": "1260960"
  },
  {
    "text": "a next function which you can repeatedly call to get the values up right so this is this is like a generic procedure that",
    "start": "1260960",
    "end": "1267500"
  },
  {
    "text": "can be applied on any data structure that you want so okay so that's some examples but um",
    "start": "1267500",
    "end": "1274460"
  },
  {
    "text": "what we are doing is we are adding effect handlers to a real language the language has millions of lines of Legacy",
    "start": "1274460",
    "end": "1279799"
  },
  {
    "text": "code and it is written without non-docal control flow in mind right and if I go",
    "start": "1279799",
    "end": "1285200"
  },
  {
    "text": "to a camel programmer and say okay you can have this beautiful feature but you have to rewrite all of your sequential code that's not going to fly",
    "start": "1285200",
    "end": "1292100"
  },
  {
    "text": "so one thing that we've had all the while while designing multiple camel is that backwards compatibility trumps",
    "start": "1292100",
    "end": "1297980"
  },
  {
    "text": "fancy new features right and um one place where it sort of surfaces is",
    "start": "1297980",
    "end": "1303700"
  },
  {
    "text": "systems programming or camel is a systems programming language it is used to manipulate files resources file",
    "start": "1303700",
    "end": "1311120"
  },
  {
    "text": "sockets and buffers right but uh well written no camera code is",
    "start": "1311120",
    "end": "1316220"
  },
  {
    "text": "written in this defensive style to guard against exceptional behavior and clear clear up the resources",
    "start": "1316220",
    "end": "1322640"
  },
  {
    "text": "so here is a very simple example which is going to copy inputs line by line",
    "start": "1322640",
    "end": "1327799"
  },
  {
    "text": "from an input channel to the output channel so there is a loop here which which uses standard Library functions",
    "start": "1327799",
    "end": "1333980"
  },
  {
    "text": "input line and output string to copy lines and right to the output this is",
    "start": "1333980",
    "end": "1339200"
  },
  {
    "text": "not the most efficient instrumentation but this gets the point across so when the input line function finds",
    "start": "1339200",
    "end": "1347960"
  },
  {
    "text": "that there is no more input it actually raises an endophile exception right so which is handled here and we",
    "start": "1347960",
    "end": "1354320"
  },
  {
    "text": "are done with the copying so we close the input and output channels and we are done but input line and output string can",
    "start": "1354320",
    "end": "1359900"
  },
  {
    "text": "also erase this error if the channel happens to be closed while the loop is in progress",
    "start": "1359900",
    "end": "1365539"
  },
  {
    "text": "so in order to handle that we handle arbitrary exceptions e we close the input and output channels and then",
    "start": "1365539",
    "end": "1371840"
  },
  {
    "text": "rewrite e so that the caller knows that something bad has happened",
    "start": "1371840",
    "end": "1376880"
  },
  {
    "text": "so what we would like to do is to take this code right which is completely synchronous it is using standard Library",
    "start": "1376880",
    "end": "1382940"
  },
  {
    "text": "functions and we would like to transparently make it asynchronous and the way we do that is using",
    "start": "1382940",
    "end": "1390860"
  },
  {
    "text": "um FX right no surprises there we are sort of extending the implementation",
    "start": "1390860",
    "end": "1396260"
  },
  {
    "text": "that we had earlier with the scheduler queue with the additional effects to handle IO",
    "start": "1396260",
    "end": "1402140"
  },
  {
    "text": "operations so we Define inline and outstream effects which whose type assertive measuring what input plane and",
    "start": "1402140",
    "end": "1409280"
  },
  {
    "text": "open string functions do and we do in fact declare input line on open string functions which simply",
    "start": "1409280",
    "end": "1415220"
  },
  {
    "text": "perform the corresponding effects and here is like an extended version of",
    "start": "1415220",
    "end": "1420440"
  },
  {
    "text": "The Run function that does the heavy lifting the Handler uh now handles both input",
    "start": "1420440",
    "end": "1426799"
  },
  {
    "text": "line and output string FX and what it does is it simply registers",
    "start": "1426799",
    "end": "1432620"
  },
  {
    "text": "the channel um for input line and open string along with this k right this K here sort of",
    "start": "1432620",
    "end": "1439760"
  },
  {
    "text": "stands for the the Callback right this is the stuff that you need to do after the input is done",
    "start": "1439760",
    "end": "1445460"
  },
  {
    "text": "and the idea here is that the scheduler keeps running until at some point you decide to do the io operation you also",
    "start": "1445460",
    "end": "1451340"
  },
  {
    "text": "load it to an event Loop you can use either during libue your favorite event",
    "start": "1451340",
    "end": "1456440"
  },
  {
    "text": "and the event Loop runs subset of the io operations complete and what you do at",
    "start": "1456440",
    "end": "1461720"
  },
  {
    "text": "that point is to resume this continuation with the value right so so as far as the client code is concerned",
    "start": "1461720",
    "end": "1467900"
  },
  {
    "text": "everything looks into us but it is transparently asynchronous underneath but this is only part of the story right",
    "start": "1467900",
    "end": "1473900"
  },
  {
    "text": "if you think about termination in the earlier example we indicate a termination with the end of file and we",
    "start": "1473900",
    "end": "1480260"
  },
  {
    "text": "also had the other exceptional cases such as this server we've only shown you I've only shown you",
    "start": "1480260",
    "end": "1485659"
  },
  {
    "text": "continue primitive which can resume computations with a value but here what I expect is to sort of raise an",
    "start": "1485659",
    "end": "1492980"
  },
  {
    "text": "exception at the point of calling the functions input line and open string so in order to achieve this we sort of",
    "start": "1492980",
    "end": "1500120"
  },
  {
    "text": "add this additional primitive called discontinue and the idea here is that you sort of resume the continuation by raising the",
    "start": "1500120",
    "end": "1507679"
  },
  {
    "text": "given exception at the point of performance so the scheduler will be extended to",
    "start": "1507679",
    "end": "1513140"
  },
  {
    "text": "handle exceptional cases by resuming with this continued parameter right that's the additional perimeter that we",
    "start": "1513140",
    "end": "1518720"
  },
  {
    "text": "need for backwards compatibility the other concern that we have is also linearity so sockets and channels are",
    "start": "1518720",
    "end": "1525919"
  },
  {
    "text": "all linear resources that are created and destroyed exactly once today when you call the camel functions",
    "start": "1525919",
    "end": "1532340"
  },
  {
    "text": "right there is the expectation that it returns exactly once but the value or an exception and defensive programming",
    "start": "1532340",
    "end": "1538520"
  },
  {
    "text": "style already guards against exceptional return values with effect handlers your functions may",
    "start": "1538520",
    "end": "1544340"
  },
  {
    "text": "return at most once if the continuation is not resumed this will break a resource safe Legacy code",
    "start": "1544340",
    "end": "1551360"
  },
  {
    "text": "and here is an example right so I declare an effect e and my function 4",
    "start": "1551360",
    "end": "1556520"
  },
  {
    "text": "simply performs e here is a bar which is uh which is sort",
    "start": "1556520",
    "end": "1562340"
  },
  {
    "text": "of standing in for my legacy code right so bar for whatever reasons opens an",
    "start": "1562340",
    "end": "1567380"
  },
  {
    "text": "input channel to this file right and calls to and bar expects food to either",
    "start": "1567380",
    "end": "1572659"
  },
  {
    "text": "return with the value in which case it closes the input Channel or an arbitrary exceptions in which case it closes the",
    "start": "1572659",
    "end": "1579320"
  },
  {
    "text": "input Channel and raises the exception right so this is standing in for my legacy code and here's the malicious",
    "start": "1579320",
    "end": "1585020"
  },
  {
    "text": "code now right so bias is a function which calls bar handles the effect e but",
    "start": "1585020",
    "end": "1590960"
  },
  {
    "text": "does not even bind the continuation right the effect of this is that um when",
    "start": "1590960",
    "end": "1596360"
  },
  {
    "text": "you perform e the effect is handled here but when you perform me the input Channel I see is",
    "start": "1596360",
    "end": "1602480"
  },
  {
    "text": "um alive right but because we are not resuming the computation we actually leak IC here my function bias actually",
    "start": "1602480",
    "end": "1610279"
  },
  {
    "text": "returns without releasing IC due to no fault of bar right that's a perfectly",
    "start": "1610279",
    "end": "1615679"
  },
  {
    "text": "well written Legacy code so this cannot be easily fixed right",
    "start": "1615679",
    "end": "1621500"
  },
  {
    "text": "this in order to do this correctly you need to track linearity in the type system or camel does not track linearity in the",
    "start": "1621500",
    "end": "1628520"
  },
  {
    "text": "type system so we sort of make a pragmatic trade-off and say we assume that our captured continuations are",
    "start": "1628520",
    "end": "1635179"
  },
  {
    "text": "assumed exactly once either using continue or discontinue right so",
    "start": "1635179",
    "end": "1640340"
  },
  {
    "text": "um we expect the user to sort of stick to this expectation",
    "start": "1640340",
    "end": "1645559"
  },
  {
    "text": "so how does this all perform right so um I have a very simple function that",
    "start": "1645559",
    "end": "1651380"
  },
  {
    "text": "performs an effect right handles it immediately and then continues immediately",
    "start": "1651380",
    "end": "1657500"
  },
  {
    "text": "um I have strategically annotated this function and the idea is this my code",
    "start": "1657500",
    "end": "1662840"
  },
  {
    "text": "sequence from A to B involves creating a new stack and running the computation my code sequence from B to C involves",
    "start": "1662840",
    "end": "1669679"
  },
  {
    "text": "performing the effect and handling it by code sequence from C to D is resuming continuation and D to e is returning",
    "start": "1669679",
    "end": "1677419"
  },
  {
    "text": "from a computation and bring the stack each of these instruction sequences involves a stack switch I want to",
    "start": "1677419",
    "end": "1683960"
  },
  {
    "text": "precisely measure what is the overhead of all of this this measurement on an Intel Xeon gold",
    "start": "1683960",
    "end": "1690140"
  },
  {
    "text": "5120 CPU and on this machine the memory read latency was 90 nanoseconds this is",
    "start": "1690140",
    "end": "1696679"
  },
  {
    "text": "presented just so that you can calibrate your expectations and here are the actual times right the",
    "start": "1696679",
    "end": "1702679"
  },
  {
    "text": "first thing that you should see is that stack switching is uh much cheaper than uh",
    "start": "1702679",
    "end": "1708440"
  },
  {
    "text": "um actually accessing your main memory right and it is dominated here by in the",
    "start": "1708440",
    "end": "1714200"
  },
  {
    "text": "first case by uh the allocated costs right and really you care about these",
    "start": "1714200",
    "end": "1719539"
  },
  {
    "text": "two where my computation is being suspended and resumed the costs are so low that we",
    "start": "1719539",
    "end": "1725480"
  },
  {
    "text": "think our effect standards can be pervasively used right you shouldn't try to think twice about introducing effect",
    "start": "1725480",
    "end": "1730640"
  },
  {
    "text": "timers so let's let's build larger programs now we're going to see performance of",
    "start": "1730640",
    "end": "1735679"
  },
  {
    "text": "generators this is the same as what we had seen earlier I'm going to Traverse a complete binary tree of depth 25 and",
    "start": "1735679",
    "end": "1742220"
  },
  {
    "text": "this involves two two raised to 26 stack switches for calibration again I introduce the",
    "start": "1742220",
    "end": "1748279"
  },
  {
    "text": "iterator as well uh doing idiomatic reversal and I also have",
    "start": "1748279",
    "end": "1755480"
  },
  {
    "text": "two implementations of generators one is a handwritten one that is specialized for the binary tree",
    "start": "1755480",
    "end": "1762320"
  },
  {
    "text": "that's handwritten CPS translation and I also do defunctualization optimization in order to remove intermediate brochure",
    "start": "1762320",
    "end": "1768500"
  },
  {
    "text": "allocations this is sort of the best that you can achieve right and the last version is my effect Handler based",
    "start": "1768500",
    "end": "1775760"
  },
  {
    "text": "generator right this is what we have seen earlier and the performance measurements are",
    "start": "1775760",
    "end": "1783200"
  },
  {
    "text": "given here so what you can see is that the handwritten generated is around four times lower and the effect standard base",
    "start": "1783200",
    "end": "1789320"
  },
  {
    "text": "one is nine times lower what if you take away here is we are measuring pure overhead here right I'm",
    "start": "1789320",
    "end": "1794899"
  },
  {
    "text": "not doing any useful word but if you are doing useful work the difference between these two will be much smaller right",
    "start": "1794899",
    "end": "1800840"
  },
  {
    "text": "for fun we also measured the same thing on JavaScript on node.js 1407 using",
    "start": "1800840",
    "end": "1806179"
  },
  {
    "text": "javascript's built-in generators and compared to the iterator it was 90 times lower so we think that being nine times",
    "start": "1806179",
    "end": "1813020"
  },
  {
    "text": "slower for a generic mechanism is a win and lastly I have um we have implemented",
    "start": "1813020",
    "end": "1821059"
  },
  {
    "text": "a full-fledged web server right so HTTP 1.2 we have implemented a full-fledged",
    "start": "1821059",
    "end": "1826700"
  },
  {
    "text": "uh conferencing Library which is implemented in direct style and we",
    "start": "1826700",
    "end": "1831980"
  },
  {
    "text": "compare the go um o camel and Liberty based one with explicit callbacks and uh okay I'm",
    "start": "1831980",
    "end": "1838399"
  },
  {
    "text": "affect handlebase one indirect style and we measure the performance using the work to workload generator",
    "start": "1838399",
    "end": "1845779"
  },
  {
    "text": "so the throughput and the daily latency numbers are given here I don't need you to focus on uh the graphs too much the",
    "start": "1845779",
    "end": "1852380"
  },
  {
    "text": "key takeaway here is that the effect Handler based one is on par with go and",
    "start": "1852380",
    "end": "1857720"
  },
  {
    "text": "LWT but the highness takeaway is this right we don't use monads anymore everything",
    "start": "1857720",
    "end": "1864799"
  },
  {
    "text": "can be in direct style you can use low camel exceptions you can actually pause your program",
    "start": "1864799",
    "end": "1870260"
  },
  {
    "text": "get the batteries of all of the requests that are in progress right get a complete snapshot of your",
    "start": "1870260",
    "end": "1877580"
  },
  {
    "text": "um your web server and I haven't talked much about this but we",
    "start": "1877580",
    "end": "1883220"
  },
  {
    "text": "also support GDB and perf because we actually build a stack discipline using this fibers we have some custom dwarf",
    "start": "1883220",
    "end": "1890539"
  },
  {
    "text": "magic in order to make sure that GDP and Perth continue to work this is not the case with eligibility right",
    "start": "1890539",
    "end": "1898039"
  },
  {
    "text": "and that's all I had for today um all of this work is in open source so there's a link to ocamel multi-core that",
    "start": "1898039",
    "end": "1904760"
  },
  {
    "text": "works today you can install and use it um there's tons of examples using FX",
    "start": "1904760",
    "end": "1909980"
  },
  {
    "text": "they're actually a fascinating area where you have many many examples so I have collected a number of them in the",
    "start": "1909980",
    "end": "1916399"
  },
  {
    "text": "second link and we have written technical papers on these topics in icfp",
    "start": "1916399",
    "end": "1921620"
  },
  {
    "text": "and pldi so I recommend you to have a look at them thank you",
    "start": "1921620",
    "end": "1927880"
  }
]