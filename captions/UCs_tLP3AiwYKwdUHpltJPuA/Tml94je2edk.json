[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "[Music]",
    "start": "960",
    "end": "8889"
  },
  {
    "text": "all right thank you so much this is why static typing came back I'm Richard Feldman",
    "start": "13080",
    "end": "19020"
  },
  {
    "text": "so back at the beginning of my career I did a lot of Java programming I spent a lot of time looking at a screen like this an IDE with all sorts of uh various",
    "start": "19020",
    "end": "26460"
  },
  {
    "text": "things going on on it and then later on in my career I spent some more time doing dynamically typed programming",
    "start": "26460",
    "end": "31500"
  },
  {
    "text": "using text editors that looked something more like this and what I discovered after having a lot of experience with",
    "start": "31500",
    "end": "36840"
  },
  {
    "text": "statically typed languages and was dynamically typed languages was that I had a pretty strong preference for dynamically typed languages I just felt",
    "start": "36840",
    "end": "43440"
  },
  {
    "text": "more productive I felt happier I felt like things worked better um so imagine my surprise when years",
    "start": "43440",
    "end": "48660"
  },
  {
    "text": "later it kind of seemed like these dynamically typed languages that I loved that had been getting so popular had",
    "start": "48660",
    "end": "54239"
  },
  {
    "text": "sort of faded away in favor of stately type languages which seemed to be taking over so this is the red monk programming",
    "start": "54239",
    "end": "60840"
  },
  {
    "start": "60000",
    "end": "124000"
  },
  {
    "text": "language rankings for January 2022. I left off CSS and shell because they're not really the types of programming that",
    "start": "60840",
    "end": "66119"
  },
  {
    "text": "we're talking about here um this is a company that does among other things programming language rankings uh based on like popularity and",
    "start": "66119",
    "end": "72659"
  },
  {
    "text": "uh and I think they have pretty good methodology for these things compared to some of the other Alternatives out there",
    "start": "72659",
    "end": "77760"
  },
  {
    "text": "um this is their rankings for January 2022. um and I've broken them down by set languages with static type systems and",
    "start": "77760",
    "end": "84299"
  },
  {
    "text": "languages that don't have static typing in them um so on the status typing side we have quite a lot of languages no static",
    "start": "84299",
    "end": "89700"
  },
  {
    "text": "typing not nearly as many languages um not to mention on top of this we have the fact that if you look at JavaScript",
    "start": "89700",
    "end": "96180"
  },
  {
    "text": "and typescript typescript is essentially starting with JavaScript and just adding static types to it and in fact if you",
    "start": "96180",
    "end": "101460"
  },
  {
    "text": "look at some of these other languages python PHP and Ruby even though they didn't make the top 10 or the top 20",
    "start": "101460",
    "end": "107880"
  },
  {
    "text": "um all of these languages now have developed these sort of gradual type systems that have added statically typed systems to them leaving us with",
    "start": "107880",
    "end": "114780"
  },
  {
    "text": "basically only r as one of these top 20 most popular languages that doesn't have some sort of static typing story to it",
    "start": "114780",
    "end": "121439"
  },
  {
    "text": "now so this of course leads me to this question of what happened like how how",
    "start": "121439",
    "end": "126540"
  },
  {
    "start": "124000",
    "end": "152000"
  },
  {
    "text": "did all these languages that were sort of proudly Dynamic and and sort of focused on Dynamic typing ended up",
    "start": "126540",
    "end": "131819"
  },
  {
    "text": "getting static type systems and why is it that statically typed languages are are there so many more popular satellite",
    "start": "131819",
    "end": "137879"
  },
  {
    "text": "type languages than it feels like there used to be so to answer this question I'm going to break this down into a couple of",
    "start": "137879",
    "end": "143640"
  },
  {
    "text": "different parts so first I'm going to talk about what made Dynamic typing get big in the first place second of all what changed and third what does this",
    "start": "143640",
    "end": "150180"
  },
  {
    "text": "mean for the future so let's start with this question of what made Dynamic typing get big in the first place",
    "start": "150180",
    "end": "155819"
  },
  {
    "start": "152000",
    "end": "699000"
  },
  {
    "text": "so when we look at this sort of timeline of uh programming languages that were mainstream at some point this is not to",
    "start": "155819",
    "end": "161459"
  },
  {
    "text": "say that they were necessarily mainstream today but at some point in their history they were or have been mainstream programming languages so",
    "start": "161459",
    "end": "168599"
  },
  {
    "text": "first I'm going to look through this sort of uh 1950 to 1990s period and I'm going to break these down again by",
    "start": "168599",
    "end": "174000"
  },
  {
    "text": "languages that do and don't have static typing to them so early on we see stuff like assembly and basic and prologue",
    "start": "174000",
    "end": "180540"
  },
  {
    "text": "these are um I say no static typing because like assembly is not a dynamically typed language assembly has no typing",
    "start": "180540",
    "end": "186120"
  },
  {
    "text": "whatsoever but basic and prologue were dynamically typed Matlab and then we see this sort of big cluster over here in",
    "start": "186120",
    "end": "192540"
  },
  {
    "text": "the 1990s Pearl Lua R bash python JavaScript Ruby PHP actually 1995 right",
    "start": "192540",
    "end": "198540"
  },
  {
    "text": "here uh it was this sort of banner year for programming languages that went on to become mainstream JavaScript Ruby PHP",
    "start": "198540",
    "end": "204360"
  },
  {
    "text": "Java and Delphi okay Delphi not not so much anymore but all these came out in the year 1995. it's pretty impressive",
    "start": "204360",
    "end": "211319"
  },
  {
    "text": "um and on the static typing side we see this sort of like uh you know sort of plotting along every few years there's a statically type language that at some",
    "start": "211319",
    "end": "217379"
  },
  {
    "text": "point goes on to become mainstream but we don't really see the same big cluster like we do in the 1990s of these uh",
    "start": "217379",
    "end": "222659"
  },
  {
    "text": "dynamically typed languages that went on to become quite popular so it's I I think there's no coincidence",
    "start": "222659",
    "end": "228120"
  },
  {
    "text": "here that uh the web sort of came out and became big in the 1990s um so this is an example of a website that might",
    "start": "228120",
    "end": "234299"
  },
  {
    "text": "have come out in 1995. um there's probably no CSS here because CSS didn't come out until 1996. if there",
    "start": "234299",
    "end": "240360"
  },
  {
    "text": "was any JavaScript it would have been very minimal because JavaScript just came out in 1995.",
    "start": "240360",
    "end": "245400"
  },
  {
    "text": "um and so most of the sort of programming logic that would have gone into this would have been for this hit counter right here this is like the number of visitors coming to the website",
    "start": "245400",
    "end": "251879"
  },
  {
    "text": "and this probably would have been programmed most likely in Pearl but also maybe in PHP uh depending on like when",
    "start": "251879",
    "end": "257760"
  },
  {
    "text": "in 95 This was um another thing that people were doing with the sort of the early days of the",
    "start": "257760",
    "end": "263220"
  },
  {
    "text": "web uh was stuff like this so this is the uh the old school amazon.com books",
    "start": "263220",
    "end": "268680"
  },
  {
    "text": "back when they sold books and um this again would be it was like an early days website now keep in mind that until 1993",
    "start": "268680",
    "end": "275280"
  },
  {
    "text": "when the Mosaic browser came out which is the first like graphical web browser none of this stuff really was possible",
    "start": "275280",
    "end": "280979"
  },
  {
    "text": "um the the earliest browsers like prior to 1993 you were all text based and you know the web didn't really start taking",
    "start": "280979",
    "end": "286020"
  },
  {
    "text": "off and until Mosaic and sort of graphical browsers became a thing um so one thing that these sort of early",
    "start": "286020",
    "end": "292500"
  },
  {
    "text": "commercial uses of the web and early personal uses of the web these personal home pages had in common is that they",
    "start": "292500",
    "end": "298500"
  },
  {
    "text": "really valued shipping fast like you can imagine if you're making your own personal website it's a thing you're",
    "start": "298500",
    "end": "303600"
  },
  {
    "text": "doing for fun you don't really want to sit around and just like you know make something that's like really robust and maintainable it's more about just like",
    "start": "303600",
    "end": "309000"
  },
  {
    "text": "let me look at this thing right this is something you want to just kind of put together and just put out there just for fun and similarly if you're building an",
    "start": "309000",
    "end": "316020"
  },
  {
    "text": "early web business there's this really strong incentive to ship fast because it's sort of a gold rush mentality there's a lot of competitors it's this",
    "start": "316020",
    "end": "322860"
  },
  {
    "text": "very early sort of pioneering space and everybody wants to get stuff out the door as fast as possible so whether or",
    "start": "322860",
    "end": "328919"
  },
  {
    "text": "not that's a good thing is Up For Debate but certainly it's the case that there was a very strong interest in shipping",
    "start": "328919",
    "end": "334080"
  },
  {
    "text": "fast in both of these very common early web use cases and if you look at these programming",
    "start": "334080",
    "end": "339479"
  },
  {
    "text": "languages of the era again we're not talking about you know what sort of static and dynamically languages have to",
    "start": "339479",
    "end": "345060"
  },
  {
    "text": "be but rather just looking at the specific languages that were available at the time well we can see that like",
    "start": "345060",
    "end": "350280"
  },
  {
    "text": "okay if you want to shift fast and you want a fast feedback loop which helps you with shipping fast and prototyping",
    "start": "350280",
    "end": "355560"
  },
  {
    "text": "and stuff like that I mean really the dynamic languages have all the advantages here um because they don't have this lengthy",
    "start": "355560",
    "end": "361680"
  },
  {
    "text": "compile step they're really good at giving you fast feedback because you know you make a change you hit save and",
    "start": "361680",
    "end": "366900"
  },
  {
    "text": "you just refresh your page and the change is right there immediately there's no build set similarly they also had this concise syntax which helps you",
    "start": "366900",
    "end": "373199"
  },
  {
    "text": "write your code faster again comparing the languages above the line to the ones below the line all these tended to have",
    "start": "373199",
    "end": "378780"
  },
  {
    "text": "more concise syntaxes not to mention they had relevant syntax sugar especially with regards to string",
    "start": "378780",
    "end": "384000"
  },
  {
    "text": "interpolation or in the case of PHP literally HTML templates um there was a lot of string",
    "start": "384000",
    "end": "389880"
  },
  {
    "text": "concatenation going on because you were building up these sort of dynamic chunks of HTML on the Fly and so having something like string interpolation or",
    "start": "389880",
    "end": "396000"
  },
  {
    "text": "especially HTML templating wasn't big deal in terms of being able to get stuff out the door faster",
    "start": "396000",
    "end": "401280"
  },
  {
    "text": "now in the statically typed side yes there were upsides but how relevant were they if your goal was and your mentality",
    "start": "401280",
    "end": "406620"
  },
  {
    "text": "was let's ship as fast as possible like okay yes they these languages could you know potentially run faster than the",
    "start": "406620",
    "end": "412560"
  },
  {
    "text": "dynamically typed ones but you know what was that that big of a deal you had these IDE features was that that big of",
    "start": "412560",
    "end": "418800"
  },
  {
    "text": "a deal and you were able to surface errors sooner was that that big of a deal so in terms of running faster well",
    "start": "418800",
    "end": "423900"
  },
  {
    "text": "keep in mind you know at the time this is the 1990s people were connecting the websites using dial-up modems um this is like a",
    "start": "423900",
    "end": "431160"
  },
  {
    "text": "28k modem this would take a long time to download you know any kind of web page you would basically be sitting there",
    "start": "431160",
    "end": "436680"
  },
  {
    "text": "watching the pixels come in you know in in real time it was not this sort of instantaneous loading that we got later",
    "start": "436680",
    "end": "442319"
  },
  {
    "text": "as as connections got faster so yeah if you're able to save a couple you know tens or maybe even hundreds of",
    "start": "442319",
    "end": "447539"
  },
  {
    "text": "milliseconds on the server because you're using a faster programming language that's not nothing but is it even noticeable when the end user is",
    "start": "447539",
    "end": "453479"
  },
  {
    "text": "sitting there waiting literally multiple whole seconds for the page to load not really it's just not going to be noticeable and okay as far as IDE",
    "start": "453479",
    "end": "460560"
  },
  {
    "text": "features go yes those are relevant those can be nice but keep in mind that Ides back then were not the way that they",
    "start": "460560",
    "end": "466199"
  },
  {
    "text": "were today back then Ides were something like this um you had to pay for them so that was always a trade-off you had to",
    "start": "466199",
    "end": "471960"
  },
  {
    "text": "consider did you want to actually shell out for this IDE um and they definitely run ran a lot",
    "start": "471960",
    "end": "477419"
  },
  {
    "text": "slower than modern Ides in large part because again the machines at the time were sort of like 100-ish megahertz",
    "start": "477419",
    "end": "483539"
  },
  {
    "text": "single core processors which means that all of those Auto complete and things like that features we're competing with",
    "start": "483539",
    "end": "489780"
  },
  {
    "text": "the render pipeline which means that everything felt kind of laggy while it was doing this compilation and indexing and looking up your types and stuff like",
    "start": "489780",
    "end": "496560"
  },
  {
    "text": "that that was time that was not spent rendering the screen so I remember very distinctly that there was a lot of times",
    "start": "496560",
    "end": "501900"
  },
  {
    "text": "when you press a key on the keyboard and you'd have to wait for the character to appear on the screen because it was lagging waiting to do some sort of",
    "start": "501900",
    "end": "508319"
  },
  {
    "text": "background processing so again if you're trying to ship fast you know having a laggy feeling IDE it's not great",
    "start": "508319",
    "end": "514620"
  },
  {
    "text": "and finally yes they could surface errors sooner they could tell you about problems at sort of build time rather",
    "start": "514620",
    "end": "520320"
  },
  {
    "text": "than a compile time but again at what cost there's a reason that this XKCD comes up in so many programming language",
    "start": "520320",
    "end": "526560"
  },
  {
    "text": "talks because it's a common experience um you know people just waiting for compiler to finish doing its job when",
    "start": "526560",
    "end": "533279"
  },
  {
    "text": "you're trying to ship fast sitting around waiting for your code to compile Is Not Great it really works against that",
    "start": "533279",
    "end": "538980"
  },
  {
    "text": "so um especially this is this becomes true and an even bigger downside when you're like not only are you paying for",
    "start": "538980",
    "end": "544800"
  },
  {
    "text": "your IDE but you had to pay for compilers in a lot of cases back then so yeah I mean if I'm thinking do I want to",
    "start": "544800",
    "end": "550500"
  },
  {
    "text": "pay money to be able to sit around and wait for my code to compile when I could be just instantly hitting refresh and",
    "start": "550500",
    "end": "556620"
  },
  {
    "text": "watching my code changes appear in something like Pearl or python or PHP it's not a great comparison",
    "start": "556620",
    "end": "563279"
  },
  {
    "text": "okay so looking at all these things we can kind of see why the dynamically type languages were more popular for the use",
    "start": "563279",
    "end": "570660"
  },
  {
    "text": "cases of the early web so this led to sort of the rise of the lamp stack this is Linux Apache MySQL",
    "start": "570660",
    "end": "576779"
  },
  {
    "text": "and the P was sort of overloaded to be PHP Perler Python and then in 2005 when uh rails came out Ruby sort of joined",
    "start": "576779",
    "end": "583080"
  },
  {
    "text": "that group and became another big uh sort of part of the lamp stack um all of these things just you know",
    "start": "583080",
    "end": "588660"
  },
  {
    "text": "became really popular and then of course as you know web use cases got more and more popular these languages got popular",
    "start": "588660",
    "end": "594540"
  },
  {
    "text": "with them so um oh yeah and of course they didn't cost any money so this is one of the big",
    "start": "594540",
    "end": "600540"
  },
  {
    "text": "selling points of the lamp stack was that you know all of these Technologies were free and free isn't dollars",
    "start": "600540",
    "end": "605940"
  },
  {
    "text": "so sort of to put these things together the popular 1990s era Dynamic languages had better trade-offs for early web use",
    "start": "605940",
    "end": "611459"
  },
  {
    "text": "cases than that era's popular statically type languages the web exploded in popularity so those languages did too to",
    "start": "611459",
    "end": "617940"
  },
  {
    "text": "me this is the explanation for why Dynamic typing got big in the first place they were good for web use cases and the",
    "start": "617940",
    "end": "624240"
  },
  {
    "text": "web was huge okay so let's sort of extend out our timeline a little bit and not stop at 1995 and",
    "start": "624240",
    "end": "630839"
  },
  {
    "text": "keep it going and just see what happened after that after the web got big and became more established what did we see",
    "start": "630839",
    "end": "636300"
  },
  {
    "text": "in terms of sort of new languages and their relative adoptions there's actually only two languages that",
    "start": "636300",
    "end": "643380"
  },
  {
    "text": "ended up making red monks like top 20 most popular programming languages at any point which are Powershell which is",
    "start": "643380",
    "end": "648959"
  },
  {
    "text": "basically used exclusively for Windows shell scripting and coffeescript which was a at some point a popular language",
    "start": "648959",
    "end": "654660"
  },
  {
    "text": "because it sort of added syntactic conveniences to JavaScript but then JavaScript itself adopted enough of",
    "start": "654660",
    "end": "660180"
  },
  {
    "text": "those conveniences that copyscript sort of declined in popularity and today it's not very a very popular language at all anymore",
    "start": "660180",
    "end": "666300"
  },
  {
    "text": "on the dynamically typed language side that's kind of it so what about on the staticy type language side",
    "start": "666300",
    "end": "671820"
  },
  {
    "text": "wow C sharp action script go Russ Dart kotlin typescript and Swift that's a quite a different story in",
    "start": "671820",
    "end": "678660"
  },
  {
    "text": "terms of at least in terms of like a variety of different languages that have come out and become mainstream at some",
    "start": "678660",
    "end": "683700"
  },
  {
    "text": "point in fact you can almost see kind of a similar cluster in the like 2010-ish spot to what we saw in the 1990s in",
    "start": "683700",
    "end": "689640"
  },
  {
    "text": "terms of this like you know explosion of popularity of different dynamically type languages",
    "start": "689640",
    "end": "695100"
  },
  {
    "text": "so that was what made dynamically type languages get big now let's talk about what changed",
    "start": "695100",
    "end": "701940"
  },
  {
    "start": "699000",
    "end": "2302000"
  },
  {
    "text": "so my view of static typing now let's say 10 or so years ago was the following lots of ceremony this is just what it",
    "start": "701940",
    "end": "708540"
  },
  {
    "text": "means to have a statically type languages you're going to deal with a whole bunch of ceremony um they're not all that helpful and also",
    "start": "708540",
    "end": "714120"
  },
  {
    "text": "they have slow feedback loops so let's say that these were true or at",
    "start": "714120",
    "end": "719279"
  },
  {
    "text": "least this is my perception of them um a reasonable question to ask is like you know it's it's been a decade uh how",
    "start": "719279",
    "end": "725040"
  },
  {
    "text": "have these changed since I you know had that impression over the past 10 years so let's start with my view that static",
    "start": "725040",
    "end": "731279"
  },
  {
    "text": "typing has lots of ceremony um here are some JavaScript code uh this is uh I've used the old JavaScript logo",
    "start": "731279",
    "end": "737160"
  },
  {
    "text": "this is like the original one uh to represent the fact that you know we're using sort of old school JavaScript syntax with function and VAR and stuff",
    "start": "737160",
    "end": "742920"
  },
  {
    "text": "like that I'm going to upgrade it to Modern JavaScript syntax a little bit later on but let's start with this so",
    "start": "742920",
    "end": "748140"
  },
  {
    "text": "this is a sort of contrived example but I'm going to use it to illustrate a few different points basically it's just saying it's a function called decode",
    "start": "748140",
    "end": "754019"
  },
  {
    "text": "takes in some raw Json parse is the Json checks to see if the answer was an object if it's not then we're going to",
    "start": "754019",
    "end": "759720"
  },
  {
    "text": "return Json decoding failed if the answer dot admin is true then we're going to return this little Anonymous",
    "start": "759720",
    "end": "765480"
  },
  {
    "text": "object with a display name that's answer.name plus and then parentheses admin so basically saying if this is an",
    "start": "765480",
    "end": "771300"
  },
  {
    "text": "admin the display name is going to have the word admin after it and then also we're going to return was it empty which",
    "start": "771300",
    "end": "776459"
  },
  {
    "text": "returns whether the answers uh name was originally empty otherwise we're going to basically just return display name as",
    "start": "776459",
    "end": "782820"
  },
  {
    "text": "answer.name without the admin suffix and then was empty is the same calculation this is not extremely useful code it",
    "start": "782820",
    "end": "789899"
  },
  {
    "text": "just uh I put it together as something that fits on a slide and I can use to illustrate some points later on so this",
    "start": "789899",
    "end": "795779"
  },
  {
    "text": "is the type of code when I first started writing JavaScript that I might have written to do something like this in this like early you know old school",
    "start": "795779",
    "end": "801839"
  },
  {
    "text": "JavaScript Style here's what I would have written uh the equivalent code in in Java and again I'm",
    "start": "801839",
    "end": "807839"
  },
  {
    "text": "using the old school Java logo to represent the fact that I have not been a professional Java developer in more than a decade so I'm not saying this is",
    "start": "807839",
    "end": "813899"
  },
  {
    "text": "how people do it today maybe there's a more concise way to do it today but in the time period that we're talking about",
    "start": "813899",
    "end": "819000"
  },
  {
    "text": "not only is this how I would have written it but if I hadn't written it this way I would have gotten a code",
    "start": "819000",
    "end": "824459"
  },
  {
    "text": "review at work and someone would have said no you need to write it this way okay so there's a lot more going on here",
    "start": "824459",
    "end": "830279"
  },
  {
    "text": "a lot more ceremony um let's let's talk about what it's doing so up here we have this this answer class this gigantic",
    "start": "830279",
    "end": "836279"
  },
  {
    "text": "thing over here um basically the whole point of this is to be an object with two fields which we just used an anonymous object literal",
    "start": "836279",
    "end": "842639"
  },
  {
    "text": "for in JavaScript that was empty in display name but in Java at least at the time uh it was not normal to just have",
    "start": "842639",
    "end": "849600"
  },
  {
    "text": "something like that in as the return value for your function you would always have to have a Constructor you'd always",
    "start": "849600",
    "end": "855060"
  },
  {
    "text": "have to have Getters and Setters for all these fields and also an equals and a hash code implementation",
    "start": "855060",
    "end": "860760"
  },
  {
    "text": "um this is you know standard at multiple different jobs that I work for is that you would have all these things for any kind of thing that you were returning",
    "start": "860760",
    "end": "865920"
  },
  {
    "text": "from a method like this um as far as Json decoding goes uh so this is what we have as sort of our",
    "start": "865920",
    "end": "871800"
  },
  {
    "text": "schema to Define uh what the the shape of the Json is going to be we use the term pojo for this and pojo stands for",
    "start": "871800",
    "end": "878459"
  },
  {
    "text": "plain old Java object and the reason we had a word for that was that it was so normal to do things in this way that we",
    "start": "878459",
    "end": "883920"
  },
  {
    "text": "had a separate word that we would use to describe not doing all that ceremony because this was the unusual case when",
    "start": "883920",
    "end": "889560"
  },
  {
    "text": "you were uh you know you didn't didn't want that ceremony you were opting out of it we had a word for that which was pojo and then finally we have these sort",
    "start": "889560",
    "end": "897180"
  },
  {
    "text": "of actual business logic and and somehow even despite all of that sort of ceremony of setting up all the",
    "start": "897180",
    "end": "903060"
  },
  {
    "text": "surrounding stuff this still manages to be larger than the original JavaScript one not by much but uh which was just",
    "start": "903060",
    "end": "909420"
  },
  {
    "text": "all of that stuff right in here with none of the surrounding ceremony so I mean looking at these two side by",
    "start": "909420",
    "end": "915300"
  },
  {
    "text": "side you can kind of see why my you know sort of generalization of this is like okay static typing is lots of ceremony",
    "start": "915300",
    "end": "921120"
  },
  {
    "text": "Dynamic typing is not a lot of ceremony now I had had experience with other sadly type languages than Java like C",
    "start": "921120",
    "end": "927120"
  },
  {
    "text": "and C plus plus but not that much um and not that many different languages so you know I I was maybe painting with a",
    "start": "927120",
    "end": "933660"
  },
  {
    "text": "little bit too much of a broad brush there saying like Okay you know this is this is what everything is like I mean I wasn't doing all these Getters and",
    "start": "933660",
    "end": "939420"
  },
  {
    "text": "Setters if I was writing C code for example um but in general there always seemed to be some amount of more ceremony on the",
    "start": "939420",
    "end": "946440"
  },
  {
    "text": "statically type side than on the dynamically type side uh even if it wasn't this dramatic",
    "start": "946440",
    "end": "952199"
  },
  {
    "text": "one of the most sort of successful uh rebellions against this level of ceremony has been Ruby on Rails um if",
    "start": "952199",
    "end": "958680"
  },
  {
    "text": "you've never seen this block uh this talk how to build a Blog engine in 15 minutes so we'd be on Rails I highly recommend watching it it's still I think",
    "start": "958680",
    "end": "964860"
  },
  {
    "text": "uh relevant today and it's historically one of the most arguably the most",
    "start": "964860",
    "end": "969959"
  },
  {
    "text": "successful pitch for any programming technology in history prior to this talk coming out uh Ruby was a language that",
    "start": "969959",
    "end": "976740"
  },
  {
    "text": "was primarily used in Japan and was just sort of barely starting to get used outside of Japan and becoming a little bit popular outside of Japan after this",
    "start": "976740",
    "end": "984480"
  },
  {
    "text": "talk uh Ruby on Rails became this huge thing and rail sort of rocketed Ruby's",
    "start": "984480",
    "end": "989579"
  },
  {
    "text": "popularity up into the top 10 most popular programming languages in the world highly recommend watching it and",
    "start": "989579",
    "end": "994980"
  },
  {
    "text": "if you watch this talk you'll see this is a complete rejection of all that ceremony it's about how to get up and",
    "start": "994980",
    "end": "1000920"
  },
  {
    "text": "running fast how to you know use your tools to get stuff done really really fast ship fast prototype fast make",
    "start": "1000920",
    "end": "1007940"
  },
  {
    "text": "changes fast fast feedback loops fast fast fast minimal minimal ceremony",
    "start": "1007940",
    "end": "1013100"
  },
  {
    "text": "um and it was very successful this appealed to a lot of people who you know in a lot of cases were fed up specifically with Java and all the",
    "start": "1013100",
    "end": "1019519"
  },
  {
    "text": "ceremony that was required to sort of get things done in it um okay so let's go back to this uh this",
    "start": "1019519",
    "end": "1025938"
  },
  {
    "text": "JavaScript example and I'm going to upgrade this now to Modern JavaScript so a couple of things are going to change here we're going to go from a function",
    "start": "1025939",
    "end": "1031520"
  },
  {
    "text": "up here to const we're going to go from VAR again to const uh and then we're going to change this uh to use string",
    "start": "1031520",
    "end": "1037040"
  },
  {
    "text": "interpolation here but that's about it so so not not too much oh yeah then uh going to an arrow function here",
    "start": "1037040",
    "end": "1044240"
  },
  {
    "text": "okay so here's our modern JavaScript version of this and now what I'm going to do is I'm going to go from Modern",
    "start": "1044240",
    "end": "1049760"
  },
  {
    "text": "JavaScript syntax here this is a dynamically typed JavaScript and now I'm going to convert it to statically typed",
    "start": "1049760",
    "end": "1055340"
  },
  {
    "text": "typescript I don't know you may have blinked and missed that but all I did here was this just we added colon string Here and Now",
    "start": "1055340",
    "end": "1062000"
  },
  {
    "text": "dynamically typed statically typed dynamically typed statically typed so slightly smaller Delta than uh between",
    "start": "1062000",
    "end": "1069200"
  },
  {
    "text": "the old set daily types of statically typed uh Delta that we saw between Java and JavaScript",
    "start": "1069200",
    "end": "1075559"
  },
  {
    "text": "um we we could make this type a little bit longer like we could you know this is just specifying the uh the argument",
    "start": "1075559",
    "end": "1080660"
  },
  {
    "text": "type I could also specify the return type but that again just adds like one line right here um really really not that big of a",
    "start": "1080660",
    "end": "1087260"
  },
  {
    "text": "difference compared to the amount of ceremony that we had to do to get static typing going from JavaScript to Java",
    "start": "1087260",
    "end": "1094400"
  },
  {
    "text": "um okay so now if I go back to my sort of mental model of like this is what static typing is and this is what",
    "start": "1094400",
    "end": "1099500"
  },
  {
    "text": "dynamic typing is well okay but what if what if we're talking about this type of static typing now we're saying like well",
    "start": "1099500",
    "end": "1105260"
  },
  {
    "text": "hang on this is static typing and this is static typing one of these things is not like the other one uh obviously there's there's more to it than I had",
    "start": "1105260",
    "end": "1111860"
  },
  {
    "text": "originally thought now to be fair there are some advantages to the Java implementation here I'm not saying that",
    "start": "1111860",
    "end": "1117860"
  },
  {
    "text": "these are totally equivalent and they're you're not getting anything out of all this extra ceremony for example",
    "start": "1117860",
    "end": "1124100"
  },
  {
    "text": "um the Java version has a nice equals and hash code implementation so the following code in both typescript and",
    "start": "1124100",
    "end": "1129740"
  },
  {
    "text": "JavaScript returns false so if I say an anonymous object with X is one y is two",
    "start": "1129740",
    "end": "1135020"
  },
  {
    "text": "and I said double equals x is one y is two this will return false in either JavaScript or in typescript because it's",
    "start": "1135020",
    "end": "1140840"
  },
  {
    "text": "doing a reference equality check rather than actually going through the fields and checking to see if they're equal to one another",
    "start": "1140840",
    "end": "1146419"
  },
  {
    "text": "of course that's kind of what you generally want by default um and so in Java it was sort of standard for us to",
    "start": "1146419",
    "end": "1152120"
  },
  {
    "text": "implement equals an equals method that basically did this and in fact it was so common that our Ides would usually",
    "start": "1152120",
    "end": "1157280"
  },
  {
    "text": "generate that for us there was a lot of Ides generating stuff in my career with Java not just equals and hashcode",
    "start": "1157280",
    "end": "1163520"
  },
  {
    "text": "implementations but also like all these Getters and Setters so it's not like I was writing all those out by hand but it was still all that code you know sitting",
    "start": "1163520",
    "end": "1169820"
  },
  {
    "text": "on my screen and potentially needing to be audited or kept up to date so um these nice equals and hashcode",
    "start": "1169820",
    "end": "1176600"
  },
  {
    "text": "implementations were generally a benefit like equals sort of felt like it worked better in Java than it did in JavaScript or in typescript because of this",
    "start": "1176600",
    "end": "1183799"
  },
  {
    "text": "um also we did early Json validation instead of crashing later so as an example of the difference here let's say",
    "start": "1183799",
    "end": "1189620"
  },
  {
    "text": "I have this answer.name.length which is a little bit of uh code that comes up right down here if in the typescript",
    "start": "1189620",
    "end": "1195500"
  },
  {
    "text": "version I get some Json where this does not come back as properly formed Json this is going to actually crash at",
    "start": "1195500",
    "end": "1202580"
  },
  {
    "text": "runtime it'll give me an answer like this uncut type error cannot read properties of undefined reading length",
    "start": "1202580",
    "end": "1207740"
  },
  {
    "text": "so this is for example if answer dot name doesn't come back as being present like the Json is just missing that name",
    "start": "1207740",
    "end": "1214039"
  },
  {
    "text": "field the typescript code is going to happily proceed until it gets to this line of code at which point it's going",
    "start": "1214039",
    "end": "1219080"
  },
  {
    "text": "to crash in contrast in the Java version because I actually specified this schema my pojo back there saying that I",
    "start": "1219080",
    "end": "1226100"
  },
  {
    "text": "expected there to be a name field this would actually fail early right at the decoding step it would say hey your Json",
    "start": "1226100",
    "end": "1232280"
  },
  {
    "text": "is missing this field and I would get that nice error early on rather than having it sort of crash in a distant part from where the actual problem was",
    "start": "1232280",
    "end": "1238940"
  },
  {
    "text": "so again this is a legit advantage of the Java implementation even though it has to be quite a bit longer to get it",
    "start": "1238940",
    "end": "1245299"
  },
  {
    "text": "and finally um uh I found that Getters and Setters have been really helpful to me",
    "start": "1245299",
    "end": "1251120"
  },
  {
    "text": "okay I I can't do this one um uh Getters and Setters I regret all the time I spent even telling my IDE to",
    "start": "1251120",
    "end": "1257720"
  },
  {
    "text": "generate Getters and Setters I they have absolutely not paid for themselves and I am so glad that I don't work in programming languages where that's a",
    "start": "1257720",
    "end": "1263360"
  },
  {
    "text": "cultural norm anymore well do I regret all the time I spent uh writing or reading Getters and Setters okay but",
    "start": "1263360",
    "end": "1268820"
  },
  {
    "text": "Jokes Aside um I I have felt genuinely that these",
    "start": "1268820",
    "end": "1274160"
  },
  {
    "text": "were advantages of the Java version and they were legitimately things that I miss even though I didn't miss all the ceremony when going from java to for",
    "start": "1274160",
    "end": "1281360"
  },
  {
    "text": "example uh dynamically typed languages that did not do this um but this is not innate either um so",
    "start": "1281360",
    "end": "1287600"
  },
  {
    "text": "here I have some code from The Rock programming language uh this is not a talker that's going to go too deep into rock it's a language that I'm working on",
    "start": "1287600",
    "end": "1293240"
  },
  {
    "text": "it's a work in progress you can read more about it at rocklang.org but here I have this same code implemented in rock",
    "start": "1293240",
    "end": "1298640"
  },
  {
    "text": "over here and one of the things that's interesting about this is that uh we can see right here this is the line of code",
    "start": "1298640",
    "end": "1304039"
  },
  {
    "text": "that decodes the JavaScript so decode.form bytes raw Json and then uh passing the format which is Json Dot",
    "start": "1304039",
    "end": "1310280"
  },
  {
    "text": "from utf-8 um doing the same kinds of business logic right here it's using pattern matching instead of you know if else but",
    "start": "1310280",
    "end": "1317120"
  },
  {
    "text": "the relevant part here is that you'll notice that I have zero type annotations on any of this code like I've not",
    "start": "1317120",
    "end": "1322520"
  },
  {
    "text": "specified a type there's no pojos there's no schemas there's no anything it's just saying I want to decode this stuff right here",
    "start": "1322520",
    "end": "1328280"
  },
  {
    "text": "and yet it's doing early Json validation instead of crashing later so it's doing the same thing that the Java code did in",
    "start": "1328280",
    "end": "1335059"
  },
  {
    "text": "terms of if this is missing a field like name right here at this decoding step",
    "start": "1335059",
    "end": "1340100"
  },
  {
    "text": "it's going to Short Circuit to this error thing and we're going to do the Json decoding failed thing and it's going to nicely handle that as opposed",
    "start": "1340100",
    "end": "1346100"
  },
  {
    "text": "to crashing later on and the way that it's able to do this is just using type inference so this whole thing is done",
    "start": "1346100",
    "end": "1351260"
  },
  {
    "text": "using type inference rather than having to ceremoniously specify your types up front that's just part of the design of",
    "start": "1351260",
    "end": "1357020"
  },
  {
    "text": "rock is that it's able to do things like Json decoding using type inference rather than having to specify the types",
    "start": "1357020",
    "end": "1362240"
  },
  {
    "text": "of the Json it just figures it out based on the fact that you're using something called name it says oh you must be expecting that this Json will have a",
    "start": "1362240",
    "end": "1368720"
  },
  {
    "text": "field called name on it which is a string because you're using it as a string separately it also has sort of nice",
    "start": "1368720",
    "end": "1374059"
  },
  {
    "text": "equals and hashgrid implementations by default you don't need to write out equals and hash code to actually go",
    "start": "1374059",
    "end": "1379220"
  },
  {
    "text": "through and use all the different fields in your object or your record as we call them in rock because that's just how the",
    "start": "1379220",
    "end": "1384679"
  },
  {
    "text": "language is designed because again that's the default that basically everyone wants so we just made it work that way",
    "start": "1384679",
    "end": "1389780"
  },
  {
    "text": "um so again this is sort of a part of the theme of like these things are not necessarily innate to static or dynamic",
    "start": "1389780",
    "end": "1395900"
  },
  {
    "text": "types they're just uh they're just sort of language design decisions and different languages can choose to do them in different ways also you might",
    "start": "1395900",
    "end": "1402380"
  },
  {
    "text": "notice that the raw code is in this case even more concise than the typescript code but is a little bit unfair because",
    "start": "1402380",
    "end": "1408260"
  },
  {
    "text": "I haven't written any type annotations here whereas in the typescript version I did write type annotations in the rock",
    "start": "1408260",
    "end": "1413960"
  },
  {
    "text": "version you don't need to write any type annotations ever because it has 100 type inference it it always gets it right it",
    "start": "1413960",
    "end": "1420020"
  },
  {
    "text": "will always be able to check all of your types even if you never annotate anything but if you want to you can add a type annotation on top optionally just",
    "start": "1420020",
    "end": "1426919"
  },
  {
    "text": "for your own sort of documentation and even with The annotation it still ends up being more concise than the",
    "start": "1426919",
    "end": "1432020"
  },
  {
    "text": "typescript version so clearly it's possible for us to have nice things without having to give up the benefits",
    "start": "1432020",
    "end": "1438200"
  },
  {
    "text": "of static typing so looking back at my view that static typing has a lot of ceremony I've ended",
    "start": "1438200",
    "end": "1444620"
  },
  {
    "text": "up concluding that this is just the wrong way to look at it um or if if nothing else it certainly seems to be an obsolete View",
    "start": "1444620",
    "end": "1451340"
  },
  {
    "text": "today I would say more that like okay some languages and Community Norms encourage ceremony but they don't have to it doesn't have to be that way it's",
    "start": "1451340",
    "end": "1458000"
  },
  {
    "text": "possible to have static typing without ceremony and still getting all the same benefits that I I was getting from this",
    "start": "1458000",
    "end": "1463640"
  },
  {
    "text": "very ceremonious style that I used to be working with okay so what about my second view that static typing is just not all that",
    "start": "1463640",
    "end": "1469820"
  },
  {
    "text": "helpful well I don't feel bad about having this view because um I saw error messages like this all the time my Java",
    "start": "1469820",
    "end": "1476120"
  },
  {
    "text": "code would compile uh and then it would crash at runtime it would say you know null pointer exception",
    "start": "1476120",
    "end": "1482419"
  },
  {
    "text": "um that was sort of the nice case when I was doing like C and C plus plus sometimes I would get much less nice errors like segmentation faults or if I",
    "start": "1482419",
    "end": "1489380"
  },
  {
    "text": "was really unlucky I would just get memory corruption and just garbage would appear on the screen um and then in all cases this was after",
    "start": "1489380",
    "end": "1495559"
  },
  {
    "text": "the type Checker said yep everything's fine it looks good no problems here but what I didn't realize is that this was",
    "start": "1495559",
    "end": "1501559"
  },
  {
    "text": "also not innate so yes I was getting a lot of null pointer exceptions but today I'm familiar with multiple statically",
    "start": "1501559",
    "end": "1507140"
  },
  {
    "text": "typed languages that have null aware static type Checkers where in fact the compiler will tell you at compile time",
    "start": "1507140",
    "end": "1513260"
  },
  {
    "text": "hey there's a possible null here and you're not checking for it you're not handling it this is potentially going to",
    "start": "1513260",
    "end": "1518539"
  },
  {
    "text": "blow up at runtime you should really add a null check here um also there's some languages that just don't even have null at all and so",
    "start": "1518539",
    "end": "1524179"
  },
  {
    "text": "therefore they don't have null pointer exceptions they rep represent the possibility of a value being missing in",
    "start": "1524179",
    "end": "1529700"
  },
  {
    "text": "other ways that the compiler is able to consistently analyze and always tell you when you're potentially missing out on",
    "start": "1529700",
    "end": "1535279"
  },
  {
    "text": "it so those these error cases just cannot come up and you can't have crashes like this",
    "start": "1535279",
    "end": "1541460"
  },
  {
    "text": "um good example of this uh work at a company called no red ink um and uh by the way we're hiring",
    "start": "1541460",
    "end": "1547159"
  },
  {
    "text": "um and uh in terms of like nil or null or undefined errors in production we have a pretty good comparison point",
    "start": "1547159",
    "end": "1553039"
  },
  {
    "text": "because when I joined the company we use JavaScript and Ruby and uh we had of course error logging so we would be able",
    "start": "1553039",
    "end": "1559520"
  },
  {
    "text": "to tell when we got one of these errors in production um thousands of these errors reached production just tons and tons and tons",
    "start": "1559520",
    "end": "1565580"
  },
  {
    "text": "of them all the time we were getting or our users were getting um nil null undefined errors just you",
    "start": "1565580",
    "end": "1571159"
  },
  {
    "text": "know crashes from these uh really common problems um and this is of course after you know thousands and thousands of",
    "start": "1571159",
    "end": "1576440"
  },
  {
    "text": "tests passed like we wrote lots of tests we tried to check for all these things but we didn't catch all of them and so some of them would make it through to",
    "start": "1576440",
    "end": "1582080"
  },
  {
    "text": "our users in fact a lot of them would um nowadays we use Elm and Haskell um",
    "start": "1582080",
    "end": "1587539"
  },
  {
    "text": "not not completely it's not like we have zero JavaScript or Ruby we still have you know a good chunk of Legacy code",
    "start": "1587539",
    "end": "1592700"
  },
  {
    "text": "there but um we have like half a million lines of elm code and not as much Haskell but sort of an increasing amount of it",
    "start": "1592700",
    "end": "1598279"
  },
  {
    "text": "um and all of these things do not have any nil null or undefined errors in production all of them 100 have been",
    "start": "1598279",
    "end": "1605059"
  },
  {
    "text": "caught at build time um and just never reached production like yes we have had you know other",
    "start": "1605059",
    "end": "1610460"
  },
  {
    "text": "issues other bugs and stuff like that but this particular category of Errors has just not happened and in fact it's",
    "start": "1610460",
    "end": "1615860"
  },
  {
    "text": "not just nil Miller undefined errors it's just run time type mismatches in general because both Elm and hassle have",
    "start": "1615860",
    "end": "1622340"
  },
  {
    "text": "what's called sound type systems which means that basically they don't even have a concept of a runtime tightness",
    "start": "1622340",
    "end": "1627980"
  },
  {
    "text": "match that's not a thing because all the types are always guaranteed to be fully checked at build time and if there's a",
    "start": "1627980",
    "end": "1634760"
  },
  {
    "text": "problem it'll tell you about it at compile time and it will never reach runtime and so this is just like a nice benefit to our users and also to us",
    "start": "1634760",
    "end": "1641059"
  },
  {
    "text": "because we don't have to spend time tracking these things down and debugging them after the fact we get to solve them you know as early as possible this has",
    "start": "1641059",
    "end": "1647600"
  },
  {
    "text": "been really nice for us um another thing that sort of uh resonated with me is this tweet",
    "start": "1647600",
    "end": "1652760"
  },
  {
    "text": "regarding uh sort of uh you know how useful and helpful uh static types are uh in C plus plus we don't say missing",
    "start": "1652760",
    "end": "1659419"
  },
  {
    "text": "asterisk we say error voice it's just a bunch of",
    "start": "1659419",
    "end": "1664820"
  },
  {
    "text": "gibberish right um this definitely resonated with me I've seen plenty of Errors like this in statically type",
    "start": "1664820",
    "end": "1670400"
  },
  {
    "text": "languages where I just would just stare at them and be like I have no idea what this is talking about",
    "start": "1670400",
    "end": "1675559"
  },
  {
    "text": "um I feel like I'm reading a different language uh what does this even mean how do I fix this problem",
    "start": "1675559",
    "end": "1680960"
  },
  {
    "text": "um but again this is not innate I had a very very different experience with the elm programming language",
    "start": "1680960",
    "end": "1686720"
  },
  {
    "text": "um here's an example of one of Elms errors type mismatch the first argument to function join is causing a mismatch",
    "start": "1686720",
    "end": "1691820"
  },
  {
    "text": "it's expecting the first argument to be a string but it is a number um this is sort of like what I've come to expect from Elm is just like a really",
    "start": "1691820",
    "end": "1697940"
  },
  {
    "text": "helpful nicely broken down error message oftentimes it'll have a tip at the bottom about a potential way to solve it",
    "start": "1697940",
    "end": "1703100"
  },
  {
    "text": "and more and more programming languages have been sort of uh following elm's lead like Russ you know wrote a blog",
    "start": "1703100",
    "end": "1708740"
  },
  {
    "text": "post about how they made the error messages nice and how Elm inspired their error messages um I know that like typescript has been",
    "start": "1708740",
    "end": "1714320"
  },
  {
    "text": "working on their error messages a lot of different languages are taking this more seriously and you know so this this view",
    "start": "1714320",
    "end": "1719720"
  },
  {
    "text": "that like this is innate to static typing is like cryptic error messages is also becoming obsolete",
    "start": "1719720",
    "end": "1726260"
  },
  {
    "text": "um and finally we have Ides so yes I I did think that this was helpful like I did appreciate",
    "start": "1726260",
    "end": "1731539"
  },
  {
    "text": "um you know having this like autocomplete and especially like refactor rename I love that and I really did genuinely miss that when I moved",
    "start": "1731539",
    "end": "1737900"
  },
  {
    "text": "from statically type languages to primarily working dynamically type languages but again at what cost because",
    "start": "1737900",
    "end": "1743960"
  },
  {
    "text": "the thing that I didn't miss about this was how painfully laggy they felt to use and again modern IDs you know have you",
    "start": "1743960",
    "end": "1750860"
  },
  {
    "text": "know multi-core processors to work with um and uh and are you know better at performance in various different dimensions but I remember feeling that",
    "start": "1750860",
    "end": "1757760"
  },
  {
    "text": "when I went from an IDE like this to a text editor it just felt like a breath of fresh air because I wasn't waiting",
    "start": "1757760",
    "end": "1764360"
  },
  {
    "text": "for this sort of lag every time I would type something for for the IDE to respond um I just had this very fond memory of",
    "start": "1764360",
    "end": "1770659"
  },
  {
    "text": "of going to something like this that did not have autocomplete did not have refactor renamed but I just liked it so",
    "start": "1770659",
    "end": "1776240"
  },
  {
    "text": "much better because it felt instantaneous and snappy um that to me was just such a an",
    "start": "1776240",
    "end": "1781520"
  },
  {
    "text": "improvement in terms of my quality of life that it was worth giving up those ID features",
    "start": "1781520",
    "end": "1786919"
  },
  {
    "text": "okay so yes my view was that static typing is not all that helpful but I mean over time I have to say uh you know",
    "start": "1786919",
    "end": "1794059"
  },
  {
    "text": "I I don't think that this is accurate anymore um yes like some type checkers can be helpful and friendly and yeah Ides",
    "start": "1794059",
    "end": "1800240"
  },
  {
    "text": "modern IDs can be both helpful and snappy um neither one is a given but like when I think about modern Ides I don't have",
    "start": "1800240",
    "end": "1807020"
  },
  {
    "text": "that same laggy feeling that I did about the the older generation of Ides you know on older generations of Hardware",
    "start": "1807020",
    "end": "1813860"
  },
  {
    "text": "um these days when I use an IDE it feels okay maybe not quite as Snappy as a text editor but it doesn't feel so painfully",
    "start": "1813860",
    "end": "1819500"
  },
  {
    "text": "laggy that I'm unwilling to use it and I think that's true of most people now most people when they use an IDE don't",
    "start": "1819500",
    "end": "1824600"
  },
  {
    "text": "say oh this feels terribly laggy and awful they say well this this feels fine and finally I had this view that static",
    "start": "1824600",
    "end": "1831620"
  },
  {
    "text": "typing has slow feedback loops so let's see how that one's held up so Ruby has a rebel a read eval print",
    "start": "1831620",
    "end": "1838039"
  },
  {
    "text": "Loop so you can just type some stuff in there and it'll evaluate it right away and this is about a the fastest feedback",
    "start": "1838039",
    "end": "1843260"
  },
  {
    "text": "loop you can possibly get in a programming language um in terms of like runtime evaluation of your code again contrast this to",
    "start": "1843260",
    "end": "1849860"
  },
  {
    "text": "something like C plus plus Java Etc these languages that I was used to using um you just could not get this fast of a",
    "start": "1849860",
    "end": "1856159"
  },
  {
    "text": "feedback loop there was no C plus reple there was no Java Rebel at least back in the time when I was using them",
    "start": "1856159",
    "end": "1861320"
  },
  {
    "text": "professionally um uh but but again this is not an eight so here is the Haskell Rebel same thing as",
    "start": "1861320",
    "end": "1867740"
  },
  {
    "text": "the Ruby Ripple you could just put stuff in there and and start running it and not saying they're like sort of feature identical but the basic read eval print",
    "start": "1867740",
    "end": "1874279"
  },
  {
    "text": "Loop is definitely there and this is a language with 100 static typing no Dynamic types it's not gradually typed",
    "start": "1874279",
    "end": "1880640"
  },
  {
    "text": "um it's just a programming language that has a rebel this is a thing that like we just can't have nowadays",
    "start": "1880640",
    "end": "1886820"
  },
  {
    "text": "um and when it comes to sort of like uh compiler performance improvements in terms of like you know how long are you",
    "start": "1886820",
    "end": "1892580"
  },
  {
    "text": "sitting around with XKCD style waiting for it now we have multi-core compilations so compilers are just able",
    "start": "1892580",
    "end": "1898039"
  },
  {
    "text": "to run fast because they're able to use the hardware better we also have incremental recompiles which is another",
    "start": "1898039",
    "end": "1903080"
  },
  {
    "text": "way for uh compilers especially on larger code bases to to run a lot faster and we have uh considering build speed",
    "start": "1903080",
    "end": "1910520"
  },
  {
    "text": "and language design being sort of a stronger value than it used to be um Andrew Kelly who also gave a talk at",
    "start": "1910520",
    "end": "1916039"
  },
  {
    "text": "this conference gave a talk um well I'm gonna say it was a little over a year ago at uh handmade Seattle",
    "start": "1916039",
    "end": "1921320"
  },
  {
    "text": "about how sort of uh compilers can do a lot better in terms of performance by using some lessons from game development",
    "start": "1921320",
    "end": "1928880"
  },
  {
    "text": "of all things so all of these things put together mean that people are spending a lot less time",
    "start": "1928880",
    "end": "1934340"
  },
  {
    "text": "you know sort of sword fighting waiting for compiles to happen compared to what they used to be",
    "start": "1934340",
    "end": "1940000"
  },
  {
    "text": "a really good example of this is uh this benchmark so here we see uh three different",
    "start": "1941000",
    "end": "1946220"
  },
  {
    "text": "benchmarks so one is a C plus plus Builder running in single core mode another is C plus plus the same one",
    "start": "1946220",
    "end": "1952399"
  },
  {
    "text": "running in parallel mode look how much less time it's spending when you have you know the ability to actually make use of all your cores",
    "start": "1952399",
    "end": "1959000"
  },
  {
    "text": "and then we have Delphi rather than C plus plus uh down here being you know about an order of magnitude it's smaller",
    "start": "1959000",
    "end": "1964760"
  },
  {
    "text": "than even the C plus plus builds are in parallel so this is uh based on a uh a",
    "start": "1964760",
    "end": "1970880"
  },
  {
    "text": "YouTube video coding sorry compiling a million lines of code with Delphi you can check it out at this link and when I",
    "start": "1970880",
    "end": "1977059"
  },
  {
    "text": "say compiling a million lines of code the first thing they do in the video is they clear their cache this is not a",
    "start": "1977059",
    "end": "1982820"
  },
  {
    "text": "incremental build there's nothing cached here it just from scratch builds a million lines of Delphi code in five",
    "start": "1982820",
    "end": "1989299"
  },
  {
    "text": "seconds so that's very impressive uh like start to finish being able to compile a",
    "start": "1989299",
    "end": "1994340"
  },
  {
    "text": "million lines of code in five seconds fully statically typed again this is not really something that uh was sort of",
    "start": "1994340",
    "end": "1999620"
  },
  {
    "text": "like on my radar back then I remember waiting five seconds uh for like a small project nothing like this was was",
    "start": "1999620",
    "end": "2005679"
  },
  {
    "text": "possible back when I was sort of forming my opinions about statically type languages so you know if you think about this like",
    "start": "2005679",
    "end": "2013000"
  },
  {
    "text": "there's no way to have time for a sword fight you know under these conditions um another experience that I had that sort",
    "start": "2013000",
    "end": "2019360"
  },
  {
    "text": "of reformed my opinions around uh static typing and um and feedback loops happened around 2017 when I was",
    "start": "2019360",
    "end": "2026679"
  },
  {
    "text": "attending a lot of JavaScript conferences because I was giving talks about Elm and since I was an Elm programmer I had you know no interest in",
    "start": "2026679",
    "end": "2033159"
  },
  {
    "text": "typescript uh but I I knew that it was sort of something that was becoming popular and uh there was a lot of uh",
    "start": "2033159",
    "end": "2039580"
  },
  {
    "text": "sort of controversy and Buzz around it where like people a lot of people you know liked it a lot of people weren't",
    "start": "2039580",
    "end": "2045100"
  },
  {
    "text": "interested in it um so what I would do is I would just go up to people at the conference and I'd just say hey what do you think of typescript you know not",
    "start": "2045100",
    "end": "2051398"
  },
  {
    "text": "trying to bias them one way or the other not saying you know hey do you love typescript you know do you hate it just saying like what do you think of it and",
    "start": "2051399",
    "end": "2058060"
  },
  {
    "text": "then some people would say oh I really like it you know or I haven't tried it yet or I tried it and I didn't like it",
    "start": "2058060",
    "end": "2063460"
  },
  {
    "text": "but of the people who liked it I asked them okay so what do you like about it and their answer really surprised me",
    "start": "2063460",
    "end": "2069760"
  },
  {
    "text": "because I was kind of expecting them to say something around like I don't know correctness you know I like that it makes my programs run more reliably or",
    "start": "2069760",
    "end": "2076960"
  },
  {
    "text": "they're easier to refactor or uh you know I I just appreciate uh having the",
    "start": "2076960",
    "end": "2082118"
  },
  {
    "text": "the confidence of static types or something like that all these things that we typically uh hear when people",
    "start": "2082119",
    "end": "2087520"
  },
  {
    "text": "are talking about static typing that wasn't it I mean yes some people did say that but overwhelmingly the thing that",
    "start": "2087520",
    "end": "2093158"
  },
  {
    "text": "people told me they liked about typescript was the red squiggle",
    "start": "2093159",
    "end": "2098800"
  },
  {
    "text": "they liked opening up their IDE which in this case is pretty much always Visual Studio code and then just seeing this",
    "start": "2098800",
    "end": "2105220"
  },
  {
    "text": "feedback in their editor as opposed to having to run their program and see the program",
    "start": "2105220",
    "end": "2111760"
  },
  {
    "text": "crash at runtime and then go back to their code and follow the stack trace and figure out where it happened",
    "start": "2111760",
    "end": "2117700"
  },
  {
    "text": "this right here is a fast feedback loop seeing this error right there as you're",
    "start": "2117700",
    "end": "2123760"
  },
  {
    "text": "writing your code without having to go through all the steps to get it to reproduce at runtime and then tracing",
    "start": "2123760",
    "end": "2128920"
  },
  {
    "text": "all those steps back to figure out where in the code it actually happened this is just a faster feedback loop than",
    "start": "2128920",
    "end": "2135339"
  },
  {
    "text": "what was available in a dynamically typed language where you didn't have static analysis of your types and you",
    "start": "2135339",
    "end": "2140560"
  },
  {
    "text": "didn't have this feedback loop um right there in your editor now granted",
    "start": "2140560",
    "end": "2146380"
  },
  {
    "text": "um there is still a sort of downside that that comes with this in a lot of languages which is uh when these compile",
    "start": "2146380",
    "end": "2151480"
  },
  {
    "text": "errors become blocking like I I definitely have some memories of having in Java especially",
    "start": "2151480",
    "end": "2157720"
  },
  {
    "text": "um a screen full of red squiggles and yeah okay they're helpful uh you know in terms of giving me a fast uh you know",
    "start": "2157720",
    "end": "2163839"
  },
  {
    "text": "feedback about like what's wrong with my program but a lot of cases they would block my workflow like I would say okay",
    "start": "2163839",
    "end": "2169480"
  },
  {
    "text": "yes I know about all these type errors but I've fixed enough of them that I feel like my my program should be able",
    "start": "2169480",
    "end": "2175300"
  },
  {
    "text": "to run If This Were A dynamically type language I could run my program and try it out and see for example if the",
    "start": "2175300",
    "end": "2181060"
  },
  {
    "text": "changes I just made look good on the screen or if the changes I just made actually get the performance",
    "start": "2181060",
    "end": "2186099"
  },
  {
    "text": "characteristics that I would hoping they would or if the changes that I just made uh pass my test I want to just run my",
    "start": "2186099",
    "end": "2191920"
  },
  {
    "text": "tests but I couldn't do that because in Java these were blocking compile errors and I just couldn't run my tests I",
    "start": "2191920",
    "end": "2197560"
  },
  {
    "text": "couldn't run my program and try anything out until I had resolved all of them now granted this also is not something",
    "start": "2197560",
    "end": "2204220"
  },
  {
    "text": "that has to happen in modern languages like in typescript for example because it's a gradually typed language I can",
    "start": "2204220",
    "end": "2210040"
  },
  {
    "text": "either uh I can I can see these things at compile time but I can still tell typescript hey I want you to just",
    "start": "2210040",
    "end": "2215260"
  },
  {
    "text": "generate the JavaScript code anyway and let me run it so I can try things out I can run my tests Etc",
    "start": "2215260",
    "end": "2220780"
  },
  {
    "text": "um so when these go from sort of blocking compile errors to non-blocking error reports that are just informative",
    "start": "2220780",
    "end": "2226500"
  },
  {
    "text": "wow this just becomes sort of all upside now I just sort of I really can get at",
    "start": "2226500",
    "end": "2231760"
  },
  {
    "text": "some extent The Best of Both Worlds where I get the fastest feedback loop possible where it tells me about the problems as early as possible so I don't",
    "start": "2231760",
    "end": "2238420"
  },
  {
    "text": "have to run my program to find them and yet I can still run my program run my tests if I want to",
    "start": "2238420",
    "end": "2244060"
  },
  {
    "text": "so once again my view of static typing has slow feedback loops has become obsolete",
    "start": "2244060",
    "end": "2249460"
  },
  {
    "text": "um today I would say okay yes compile times can now be so fast that they feel instant and Ides can offer actually",
    "start": "2249460",
    "end": "2255820"
  },
  {
    "text": "faster feedback loops than what's available with Dynamic typing alone so how have these things changed in the",
    "start": "2255820",
    "end": "2261760"
  },
  {
    "text": "past 10 years well they've completely 180. instead of thinking that yeah static types require lots of ceremony",
    "start": "2261760",
    "end": "2268780"
  },
  {
    "text": "turns out they don't actually require any ceremony at all um they are way more helpful than they",
    "start": "2268780",
    "end": "2273820"
  },
  {
    "text": "used to be in my opinion at least with like modern type systems and in terms of slow feedback loops now that Ides are",
    "start": "2273820",
    "end": "2280060"
  },
  {
    "text": "are fast and it can actually feel Snappy and responsive these are actually faster feedback loops especially when you have",
    "start": "2280060",
    "end": "2286000"
  },
  {
    "text": "the sort of non-blocking compilation model okay so what changed all sorts of stuff",
    "start": "2286000",
    "end": "2291839"
  },
  {
    "text": "uh all of the downsides of static typing seem to have sort of faded away",
    "start": "2291839",
    "end": "2297640"
  },
  {
    "text": "um maybe not completely but so much so that they're just not nearly what they used to be um and the benefits have gotten even",
    "start": "2297640",
    "end": "2302800"
  },
  {
    "start": "2302000",
    "end": "2976000"
  },
  {
    "text": "better so what does this mean for the future well I'm going to lay out sort of three plausible Futures uh three hypothetical",
    "start": "2302800",
    "end": "2309460"
  },
  {
    "text": "Futures that I hear people talk about a lot when they're talking about um like sort of the future of static and dynamic typing so one is the pendulum will swing",
    "start": "2309460",
    "end": "2316599"
  },
  {
    "text": "back to Dynamic you know this is just a fad it's a phase It's Fashion um you know first Dynamic typing was hot",
    "start": "2316599",
    "end": "2322660"
  },
  {
    "text": "now status typing was hot it's going to go back to Dynamic next another one is that most languages will Embrace gradual",
    "start": "2322660",
    "end": "2328839"
  },
  {
    "text": "typing because it's the best of both worlds you just get all these benefits why not have both and then the third is",
    "start": "2328839",
    "end": "2334420"
  },
  {
    "text": "that static without gradual typing uh gets more popular and and that is sort of the most popular thing in the future",
    "start": "2334420",
    "end": "2340720"
  },
  {
    "text": "so let's talk through all three of these hypothetical Futures and see which one seems based on what we've seen",
    "start": "2340720",
    "end": "2345940"
  },
  {
    "text": "the most likely to be true um so we talked about uh you know the uh the popular 1990s aerodynamic languages",
    "start": "2345940",
    "end": "2352900"
  },
  {
    "text": "had better trade-offs web use cases in that era's popular sadly type languages so the question is are we going to see",
    "start": "2352900",
    "end": "2358900"
  },
  {
    "text": "the pendulum swing back to something like this and they're these uh this style of program is going to get more",
    "start": "2358900",
    "end": "2364060"
  },
  {
    "text": "popular again well we looked at the sort of like why those got popular in the first place and we broke it down into these uh these",
    "start": "2364060",
    "end": "2370540"
  },
  {
    "text": "things like Fast feedback concise syntax relevant sugar and then on the statically type side you had these upsides that really didn't matter that",
    "start": "2370540",
    "end": "2376119"
  },
  {
    "text": "much for those use cases running faster the IDE features surfacing errors sooner they just weren't worth it when you were trying to ship fast",
    "start": "2376119",
    "end": "2382900"
  },
  {
    "text": "okay but but are these innate are these things that you can only get from dynamically typed languages well fast",
    "start": "2382900",
    "end": "2389800"
  },
  {
    "text": "feedback as we've seen but not really um concise syntax also no relevant sugar no all those things are things that you",
    "start": "2389800",
    "end": "2396160"
  },
  {
    "text": "can get from statically typed languages it's just that at the time the dynamically type languages that were",
    "start": "2396160",
    "end": "2401500"
  },
  {
    "text": "popular were the only ones that happen to have them in that era in other words these benefits don't require Dynamic",
    "start": "2401500",
    "end": "2406839"
  },
  {
    "text": "typing they just first appeared in Dynamic languages but now that people know that they're nice statically type",
    "start": "2406839",
    "end": "2412000"
  },
  {
    "text": "languages can just do these too um doctor language can have all these benefits and static typing now what",
    "start": "2412000",
    "end": "2418300"
  },
  {
    "text": "about the things below the line like running faster and IDE features and surfacing errors sooner well Dynamic typing requires some runtime overhead",
    "start": "2418300",
    "end": "2425380"
  },
  {
    "text": "what dynamic typing means is runtime type checking that means that you're doing work at runtime the CPU has to do",
    "start": "2425380",
    "end": "2433000"
  },
  {
    "text": "more work you have to store more information in memory that the type information this is mandatory it's not avoidable there's no way to get a",
    "start": "2433000",
    "end": "2439720"
  },
  {
    "text": "dynamically typed language to be as fast as the fastest possible statically type language because there's just strictly",
    "start": "2439720",
    "end": "2444820"
  },
  {
    "text": "more overhead if you want to have Dynamic typing in mix also some IDE features just require",
    "start": "2444820",
    "end": "2450940"
  },
  {
    "text": "build time type information some IDE features don't there's plenty of helpful IDE features that don't require any type",
    "start": "2450940",
    "end": "2456339"
  },
  {
    "text": "of information but there's also plenty to do and if you want to have the get the most out of your IDE there is no",
    "start": "2456339",
    "end": "2462040"
  },
  {
    "text": "substitute for having static type information available to the ID also if you want to have build time type",
    "start": "2462040",
    "end": "2467859"
  },
  {
    "text": "errors again and get those surface sooner that requires static type analysis there's just no way around it",
    "start": "2467859",
    "end": "2474040"
  },
  {
    "text": "so we see a pretty big dichotomy here where the things that were the nicest about dynamically typed languages can be",
    "start": "2474040",
    "end": "2480339"
  },
  {
    "text": "adopted by salary type languages uh in other words sadly type languages can sort of learn from the dynamic ones and",
    "start": "2480339",
    "end": "2485800"
  },
  {
    "text": "incorporate their most popular features but the reverse is not true it's not popular it's not possible for",
    "start": "2485800",
    "end": "2491380"
  },
  {
    "text": "dynamically typed languages to sort of learn from Southie type languages and incorporate their features at least not without introducing static types",
    "start": "2491380",
    "end": "2498099"
  },
  {
    "text": "themselves which is kind of what we've seen so another way to sort of uh look at this more concisely is like do we think",
    "start": "2498099",
    "end": "2504640"
  },
  {
    "text": "that people will stop wanting red squiggles for type errors why would people stop wanting that uh I",
    "start": "2504640",
    "end": "2511060"
  },
  {
    "text": "don't really see any evidence for this so the idea that the pendulum is going to swing back to Dynamic I don't see any evidence for that um",
    "start": "2511060",
    "end": "2517300"
  },
  {
    "text": "maybe it sounds nice uh if you don't think about it too much but looking through the evidence and like you know the specific reasons that dynamically",
    "start": "2517300",
    "end": "2523359"
  },
  {
    "text": "typed languages got big in the first place and why statically type languages came back I I don't see any",
    "start": "2523359",
    "end": "2528640"
  },
  {
    "text": "justification for why we would think that the pendulum would swing back okay so does this mean that most",
    "start": "2528640",
    "end": "2534220"
  },
  {
    "text": "languages will Embrace gradual typing so here we have our sort of timeline of languages that have at some point been",
    "start": "2534220",
    "end": "2540160"
  },
  {
    "text": "mainstream um all of these are statically typed except with a couple of exceptions that are",
    "start": "2540160",
    "end": "2545500"
  },
  {
    "text": "gradually typed I'm going to just add in I'm going to highlight the gradually typed ones in Orange and I've added in the my pie hack and sorbet these uh",
    "start": "2545500",
    "end": "2552640"
  },
  {
    "text": "these newer ones that are taking already popular dynamically typed languages and introducing uh gradual typing to them",
    "start": "2552640",
    "end": "2560200"
  },
  {
    "text": "um and let's let's uh sort of uh just break it down just to those and this is sort of the group of uh gradually typed",
    "start": "2560200",
    "end": "2565960"
  },
  {
    "text": "languages so if I take away the uh languages that are uh adding gradual",
    "start": "2565960",
    "end": "2571720"
  },
  {
    "text": "types to already popular dynamically typed languages um so this is like a retroactively",
    "start": "2571720",
    "end": "2577660"
  },
  {
    "text": "adding static typing to existing languages this would be uh typescript for JavaScript my Pi for python hack for",
    "start": "2577660",
    "end": "2582940"
  },
  {
    "text": "PHP and sorbet for Ruby we're down to just actionscript and dart as the only languages that from the get-go were",
    "start": "2582940",
    "end": "2589720"
  },
  {
    "text": "gradually typed as opposed to starting out dynamically type and then introducing gradual typing because if we're saying the future is gradually",
    "start": "2589720",
    "end": "2595780"
  },
  {
    "text": "typed and this is what we're going to see in the future this is like the precedent that we have for languages saying I'm going to be gradually typed",
    "start": "2595780",
    "end": "2602680"
  },
  {
    "text": "from day one these two languages well darts 2.0 release actually reverse",
    "start": "2602680",
    "end": "2608140"
  },
  {
    "text": "course on this uh when bar was originally released it was gradually typed and it's starting in Dart 2.0 they said you know what actually we're just",
    "start": "2608140",
    "end": "2614140"
  },
  {
    "text": "going to switch to full static typing we're not going to be gradually typed anymore so that doesn't really build that well so we're down to just action",
    "start": "2614140",
    "end": "2620500"
  },
  {
    "text": "script as the only language that has ever been gradually typed on day one",
    "start": "2620500",
    "end": "2625540"
  },
  {
    "text": "stayed that way and was every popular language although of course action script is no longer a popular language",
    "start": "2625540",
    "end": "2630760"
  },
  {
    "text": "because this is the language of the Adobe Flash um programming system and uh flash is",
    "start": "2630760",
    "end": "2637300"
  },
  {
    "text": "sort of uh no more it's not really used anymore um so uh is this the future right here",
    "start": "2637300",
    "end": "2643420"
  },
  {
    "text": "this is this is the future this is what the future looks like language isn't basically gradually typing it's action script which is not even really used",
    "start": "2643420",
    "end": "2649480"
  },
  {
    "text": "anymore um this is not a strong case for uh for like you know in terms of like",
    "start": "2649480",
    "end": "2654640"
  },
  {
    "text": "historical um evidence for like you know the this being the future so really this is a very very hypothetical like yeah maybe",
    "start": "2654640",
    "end": "2661599"
  },
  {
    "text": "even though there's no supporting evidence uh this is going to happen anyway kind of a claim to make about what the future is going to look like",
    "start": "2661599",
    "end": "2668380"
  },
  {
    "text": "um the historical mainstream use of gradual typing is just retroactively adding static typing to existing Dynamic",
    "start": "2668380",
    "end": "2675099"
  },
  {
    "text": "uh languages that's that's really just it um everything else is just action script",
    "start": "2675099",
    "end": "2680319"
  },
  {
    "text": "which sort of faded away and dart which uh which ended up reversing course and going full static anyway",
    "start": "2680319",
    "end": "2686020"
  },
  {
    "text": "okay which leads us by process of elimination to static without gradual",
    "start": "2686020",
    "end": "2691180"
  },
  {
    "text": "typing is that going to continue to get more popular well um one of the uh sort of reasons that I",
    "start": "2691180",
    "end": "2697839"
  },
  {
    "text": "think that gradual typing is not actually the quote Best of Both Worlds that it might seem to be is type system",
    "start": "2697839",
    "end": "2703900"
  },
  {
    "text": "complexity if you want to design a new programming language from scratch that is going to",
    "start": "2703900",
    "end": "2709359"
  },
  {
    "text": "be statically typed or at least have a static type Checker you get a lot of sort of design space to work with there you can choose to have a very complex",
    "start": "2709359",
    "end": "2715599"
  },
  {
    "text": "type system like Scala would be programming languages I would say has a very complex type system um or you can have choose to have a very",
    "start": "2715599",
    "end": "2722200"
  },
  {
    "text": "simple type system if you're making a gradually type system though there is a certain floor a sort",
    "start": "2722200",
    "end": "2727660"
  },
  {
    "text": "of minimum level of type system complexity that is absolutely required because your type system needs to model",
    "start": "2727660",
    "end": "2732700"
  },
  {
    "text": "all of the different behavior that a dynamically type language can do and there is a lot of different Behavior there so compare languages like",
    "start": "2732700",
    "end": "2739599"
  },
  {
    "text": "typescript my pie hack sorbet these are all static type systems that were added",
    "start": "2739599",
    "end": "2745119"
  },
  {
    "text": "on retrofitted onto existing dynamically typed languages compare them to go Nim Elm or Rock these",
    "start": "2745119",
    "end": "2752920"
  },
  {
    "text": "are all stately type languages that have much much simpler type systems than typescript my Pi hack sorbet because",
    "start": "2752920",
    "end": "2759520"
  },
  {
    "text": "they have the luxury of not having to deal with the design constraint of being able to support all of these different Dynamic use cases that were not designed",
    "start": "2759520",
    "end": "2766240"
  },
  {
    "text": "to be statically typable in the first place so being able to start from scratch and say Hey I want to design a language with a simple type system is a",
    "start": "2766240",
    "end": "2773079"
  },
  {
    "text": "lot more feasible if you don't have the baggage of having to say and it also has to support all these Dynamic use cases",
    "start": "2773079",
    "end": "2778420"
  },
  {
    "text": "and find a way to type them anyway also there's that runtime overhead question that comes back again again if",
    "start": "2778420",
    "end": "2784540"
  },
  {
    "text": "you want to have Dynamic types that means checking types at runtime and that requires the CPU to do more work and for",
    "start": "2784540",
    "end": "2790780"
  },
  {
    "text": "more to be stored in memory at runtime there's this unavoidable runtime overhead associated with Dynamic typing and that's true of gradual types as well",
    "start": "2790780",
    "end": "2797740"
  },
  {
    "text": "if you want to have a gradual type system that means doing both it means having a build time type checking static",
    "start": "2797740",
    "end": "2803859"
  },
  {
    "text": "type checking and also runtime Dynamic type checking which means that you have to have the dynamic overhead at runtime",
    "start": "2803859",
    "end": "2810640"
  },
  {
    "text": "even though you're still doing the the checking at compile time so again thinking about performance of",
    "start": "2810640",
    "end": "2816940"
  },
  {
    "text": "JavaScript python PHP Ruby all these languages have jits now they run faster",
    "start": "2816940",
    "end": "2822220"
  },
  {
    "text": "than they used to when they were just interpreted but compare them to things like go rust Zig Rock again these sadly",
    "start": "2822220",
    "end": "2829540"
  },
  {
    "text": "typed languages that don't need to have the runtime overhead of dynamic types are just capable of running a lot faster",
    "start": "2829540",
    "end": "2834940"
  },
  {
    "text": "because they don't have to have that overhead so really I mean is gradual typing",
    "start": "2834940",
    "end": "2840220"
  },
  {
    "text": "strictly The Best of Both Worlds no it's not it has very serious unavoidable downsides that just come with the",
    "start": "2840220",
    "end": "2846339"
  },
  {
    "text": "territory of deciding that you want gradual types so knowing this in mind uh is it really that surprising that",
    "start": "2846339",
    "end": "2853119"
  },
  {
    "text": "gradual gradually type languages have not actually seen that much success outside the very specific niche of",
    "start": "2853119",
    "end": "2859420"
  },
  {
    "text": "retroactively adding static types to Dynamic like languages I don't think so",
    "start": "2859420",
    "end": "2864760"
  },
  {
    "text": "um and I think you know rock the the reason that we've designed it the way that it is is to sort of uh take all",
    "start": "2864760",
    "end": "2870700"
  },
  {
    "text": "these things in mind and try to make a statically typed language that has all of the benefits or at least as many of",
    "start": "2870700",
    "end": "2876880"
  },
  {
    "text": "the benefits as possible of dynamically type languages um while still maintaining all the benefits of stately type languages we",
    "start": "2876880",
    "end": "2883240"
  },
  {
    "text": "can have a language with a simple type system that's easy to learn and easy to use we can have a language with no",
    "start": "2883240",
    "end": "2888579"
  },
  {
    "text": "Dynamic overhead Brock is a very performance focused language we've got some great early benchmarks in terms of",
    "start": "2888579",
    "end": "2894160"
  },
  {
    "text": "how fast it can run because it doesn't need to have even a jit it just it just goes straight to machine code or to",
    "start": "2894160",
    "end": "2899980"
  },
  {
    "text": "webassembly um we don't have to have mandatory type declarations none of that ceremony that we saw in Java Rock has 100 type",
    "start": "2899980",
    "end": "2906700"
  },
  {
    "text": "inference because that's the thing we know how to do now um you you don't have to write a single type annotation anywhere in your code",
    "start": "2906700",
    "end": "2912160"
  },
  {
    "text": "just like a dynamic language and yet the compiler is still able to check everything and tell you type errors for",
    "start": "2912160",
    "end": "2917800"
  },
  {
    "text": "every single problem you could possibly have at compile time at least within the realm of type errors and it's a sound",
    "start": "2917800",
    "end": "2923500"
  },
  {
    "text": "type system um uh taper reports don't have to block running um I gave a different talk that",
    "start": "2923500",
    "end": "2929800"
  },
  {
    "text": "sort of uh demonstrated this I'm gonna meet up recently um but basically you can actually run your rock program and",
    "start": "2929800",
    "end": "2935500"
  },
  {
    "text": "you know even though there are type errors and it's not going to block you it'll say hey I'll tell you about these type errors at compile time",
    "start": "2935500",
    "end": "2941079"
  },
  {
    "text": "um but it doesn't have to block you from running your program or running your tests you can still do that and it'll just sort of translate those into saying",
    "start": "2941079",
    "end": "2947020"
  },
  {
    "text": "okay if we get to a point where the type mismatch actually comes up then we'll give you an error at runtime but you",
    "start": "2947020",
    "end": "2952060"
  },
  {
    "text": "don't have to be blocked by that just like you would in a gradually typed language and again we can have this sort",
    "start": "2952060",
    "end": "2957460"
  },
  {
    "text": "of like validating deserialization via type inference where we saw that the Json decoding example being able to find",
    "start": "2957460",
    "end": "2962980"
  },
  {
    "text": "out about these errors right when you're decoding to Json as opposed to having them sort of Crash later on like we saw",
    "start": "2962980",
    "end": "2968740"
  },
  {
    "text": "in typescript so we can get all these things without having to go to gradual typing so why",
    "start": "2968740",
    "end": "2974920"
  },
  {
    "text": "would we Y and D so putting all this together I'm going to make a prediction my prediction is that among the next",
    "start": "2974920",
    "end": "2981880"
  },
  {
    "start": "2976000",
    "end": "2995000"
  },
  {
    "text": "five languages enter the red monk top 20 most popular programming languages most or all of these five languages will",
    "start": "2981880",
    "end": "2988839"
  },
  {
    "text": "be statically but not gradually typed so this is a verifiable prediction we'll see if I'm right",
    "start": "2988839",
    "end": "2994180"
  },
  {
    "text": "okay so summarize everything we talked about what made Dynamic type typing get big in the first place basically just",
    "start": "2994180",
    "end": "3000060"
  },
  {
    "start": "2995000",
    "end": "3098000"
  },
  {
    "text": "these these sort of web use cases um what changed uh the fact that statically type languages sort of",
    "start": "3000060",
    "end": "3005819"
  },
  {
    "text": "adopted a lot of the benefits of dynamically typed languages without uh sacrificing any of the things that uh",
    "start": "3005819",
    "end": "3011099"
  },
  {
    "text": "you know made them useful in the first place and and they were able to do that while I'm sort of improving some of",
    "start": "3011099",
    "end": "3016380"
  },
  {
    "text": "their their own benefits and what does this mean for the future um we talked about how uh the reason",
    "start": "3016380",
    "end": "3021720"
  },
  {
    "text": "that dynamically typed languages got fast was uh really a lot to do with the early web use cases desire to ship fast",
    "start": "3021720",
    "end": "3027660"
  },
  {
    "text": "rails and the lamp stack um being really good examples of uh the sort of like Fast iteration Etc",
    "start": "3027660",
    "end": "3033660"
  },
  {
    "text": "um what changed like lots of ceremony became basically no ceremony required uh going from languages that were not that",
    "start": "3033660",
    "end": "3039900"
  },
  {
    "text": "helpful in terms of or didn't feel that way because you're still getting all these null pointer exceptions and so so forth becoming way more helpful and slow",
    "start": "3039900",
    "end": "3046680"
  },
  {
    "text": "feedback loops becoming actually faster feedback loops and you got faster Ides and non-blocking uh compile errors",
    "start": "3046680",
    "end": "3053760"
  },
  {
    "text": "um so what does this mean for the future I don't think there's good evidence that the pendulum is going to swing back to Dynamic I think that's something that kind of sounds good but if you try to",
    "start": "3053760",
    "end": "3060240"
  },
  {
    "text": "back it up with a specific historical evidence or even just analyzing you know what made Dynamic languages get big in",
    "start": "3060240",
    "end": "3065940"
  },
  {
    "text": "the first place I don't think there's any evidence for that will most languages Embrace gradual typing again basically unless you think that action",
    "start": "3065940",
    "end": "3072480"
  },
  {
    "text": "script is a good uh sort of exam prototype for uh what what the next few languages are going to look like I don't",
    "start": "3072480",
    "end": "3077640"
  },
  {
    "text": "think there's good historical evidence for that and there's some very specific reasons in terms of Simplicity of type system and runtime overhead that people",
    "start": "3077640",
    "end": "3083700"
  },
  {
    "text": "would prefer to make new statically typed but not dynamically typed languages um which leads us to the conclusion that",
    "start": "3083700",
    "end": "3090839"
  },
  {
    "text": "I think static without gradual typing is going to continue to get more popular and I've made a specific prediction to",
    "start": "3090839",
    "end": "3096540"
  },
  {
    "text": "back that up we'll see if I'm right okay so this is why static typing came",
    "start": "3096540",
    "end": "3102240"
  },
  {
    "start": "3098000",
    "end": "3121000"
  },
  {
    "text": "back thank you very much foreign",
    "start": "3102240",
    "end": "3108740"
  }
]