[
  {
    "start": "0",
    "end": "109000"
  },
  {
    "text": "so uh the story that I'm going to tell started uh at the end of last year um it",
    "start": "12240",
    "end": "18520"
  },
  {
    "text": "was New Year's Eve um and I had been competing in the Advent of code anybody",
    "start": "18520",
    "end": "24279"
  },
  {
    "text": "else here competed in the Advent of code some people who finished with all stars",
    "start": "24279",
    "end": "31840"
  },
  {
    "text": "nobody oh come on okay so I woke up 1 of January and I",
    "start": "31840",
    "end": "38840"
  },
  {
    "text": "was a little bit of a hangover but um other than that perfect um I've been",
    "start": "38840",
    "end": "44920"
  },
  {
    "text": "programming every day uh up to Christmas uh for the Advent of coat obviously I",
    "start": "44920",
    "end": "50239"
  },
  {
    "text": "usually try to do it in the morning from 6:00 to 7: or from 7 to 8 before work",
    "start": "50239",
    "end": "55719"
  },
  {
    "text": "finish everything and uh start the day um so on the on the 1 of January New Year I",
    "start": "55719",
    "end": "62879"
  },
  {
    "text": "was like okay um it's going to be I have I have to to to kick",
    "start": "62879",
    "end": "69360"
  },
  {
    "text": "off um I'm now used to doing this programming um but there's nothing so I'm I'm falling in a hole here um but",
    "start": "69360",
    "end": "77119"
  },
  {
    "text": "then gunar posted this and he said um I challenge you to the 1 billion row",
    "start": "77119",
    "end": "83759"
  },
  {
    "text": "challenge how fast can you aggregate a billion rows using modern Java and this",
    "start": "83759",
    "end": "89119"
  },
  {
    "text": "is Vanilla Java Jaa you get a single class file that's what you what you get no libraries whatsoever uh so flexure",
    "start": "89119",
    "end": "97159"
  },
  {
    "text": "scds um kickoff 2022 true coder style but joining this friendly little",
    "start": "97159",
    "end": "102520"
  },
  {
    "text": "competition submission until the end of the month so what what is this challenge um",
    "start": "102520",
    "end": "110200"
  },
  {
    "start": "109000",
    "end": "367000"
  },
  {
    "text": "you get a file with a billion rows you need to parse this you need to print out",
    "start": "110200",
    "end": "116240"
  },
  {
    "text": "the results and like I said we are using Vanilla Java here so so everything just",
    "start": "116240",
    "end": "121920"
  },
  {
    "text": "plain Java language no Frameworks no libraries",
    "start": "121920",
    "end": "127159"
  },
  {
    "text": "nothing what is the format of this file well this file has um all new lines um",
    "start": "127440",
    "end": "134480"
  },
  {
    "text": "and every time you get uh a city name and then you get a temperature and this temperature um is between minus 99.9 and",
    "start": "134480",
    "end": "142519"
  },
  {
    "text": "99.9 just one decimal prision um and uh there's a small separator between the",
    "start": "142519",
    "end": "148519"
  },
  {
    "text": "name and the temperature so you get a billion rows and your task to in the end",
    "start": "148519",
    "end": "156160"
  },
  {
    "text": "uh process everything print out the minimum the maximum and the average temperature for each City and you need",
    "start": "156160",
    "end": "162319"
  },
  {
    "text": "to print it out in this specific format and non Java developers will say why",
    "start": "162319",
    "end": "167480"
  },
  {
    "text": "this format but this is basically if you have a map and you call two string you get",
    "start": "167480",
    "end": "173280"
  },
  {
    "text": "this and that's it that sounds relatively easy but there are some",
    "start": "173319",
    "end": "178519"
  },
  {
    "text": "problems if you want to process this as fast as possible so there was a baseline",
    "start": "178519",
    "end": "184920"
  },
  {
    "text": "implementation by gunar and it takes about five minutes to parse this entire file the the file itself is like I don't",
    "start": "184920",
    "end": "192360"
  },
  {
    "text": "know 14 15 16 gigabytes or something um even opening this going through it uh um",
    "start": "192360",
    "end": "200040"
  },
  {
    "text": "um storing the Min The Mex Etc takes a while so he uses files. lines to read",
    "start": "200040",
    "end": "207440"
  },
  {
    "text": "everything in in a single thread actually here here's here's most of the code um so what you can see in the top one",
    "start": "207440",
    "end": "215319"
  },
  {
    "text": "that's uh Java record Java now is records where you can just say this is a data class which has a Min a mean and a",
    "start": "215319",
    "end": "221360"
  },
  {
    "text": "Max you can add stuff to it but um so in this case uh We've created a custom to",
    "start": "221360",
    "end": "227920"
  },
  {
    "text": "string uh method because we need to round it at one decimal position um there's also an aggregator",
    "start": "227920",
    "end": "234879"
  },
  {
    "text": "which we use to aggregate all results together and and this is the entire",
    "start": "234879",
    "end": "242239"
  },
  {
    "text": "code might look a bit daunting if you're not a Java developer uh anybody here never done Java before or are you all",
    "start": "242239",
    "end": "249680"
  },
  {
    "text": "Java developers that's cool so um we start relatively low on the bottom we do",
    "start": "249680",
    "end": "256280"
  },
  {
    "text": "file. lines this gives you a stream of every new line",
    "start": "256280",
    "end": "261840"
  },
  {
    "text": "um those get split up using uh string. spit and you get an array with two parts",
    "start": "261840",
    "end": "268680"
  },
  {
    "text": "the the station name and the temperature and this all gets collected into a hash",
    "start": "268680",
    "end": "277840"
  },
  {
    "text": "map so how does this work well you can use an aggregator for this um and what",
    "start": "277840",
    "end": "283800"
  },
  {
    "text": "you do is uh you start with temperatures um these temperatures uh the first one",
    "start": "283800",
    "end": "289120"
  },
  {
    "text": "says uh create a new aggregator so if there's nothing yet it creates an empty new aggregator the second one says if",
    "start": "289120",
    "end": "295960"
  },
  {
    "text": "we've got this new aggregator and a temperature we need to update it with this temperature and the second one is",
    "start": "295960",
    "end": "301759"
  },
  {
    "text": "if we have two aggregators we need to aggregate to add those together as well to be able to fold everything um so the",
    "start": "301759",
    "end": "309199"
  },
  {
    "text": "Min and Min still mix still Min still Max but the sum gets added together and",
    "start": "309199",
    "end": "314600"
  },
  {
    "text": "the count get added together and if you have the sum and the count you can calculate the average",
    "start": "314600",
    "end": "321680"
  },
  {
    "text": "obviously and the results print out um which is a good thing because the format",
    "start": "321680",
    "end": "326720"
  },
  {
    "text": "that it requires is actually a map. two string so this easy so I said sure gunar first of",
    "start": "326720",
    "end": "334960"
  },
  {
    "text": "January I'll take you up on this challenge um let me quickly try to make something I'll I'll submit the first",
    "start": "334960",
    "end": "341199"
  },
  {
    "text": "pool request because uh why not I can wait until uh the end of January um and",
    "start": "341199",
    "end": "347080"
  },
  {
    "text": "and hide all my tricks but let's just get this ball rolling maybe people will join and it will be fun so I I submitted",
    "start": "347080",
    "end": "354440"
  },
  {
    "text": "an initial pool request and I already slashed the run time down to 2 minutes I was so pleased I was like nobody can",
    "start": "354440",
    "end": "360639"
  },
  {
    "text": "beat this um um but boy was out",
    "start": "360639",
    "end": "365919"
  },
  {
    "text": "wrong so this entire contest was done uh open source all the pool requests could",
    "start": "366759",
    "end": "372319"
  },
  {
    "start": "367000",
    "end": "480000"
  },
  {
    "text": "be viewed U so I gave all my tricks away on the first day um but that's a good",
    "start": "372319",
    "end": "377919"
  },
  {
    "text": "thing yeah you can watch you can learn you can adopt you can experiment and everybody was getting inspired by other",
    "start": "377919",
    "end": "384240"
  },
  {
    "text": "people's code we were just blatantly stealing each other's Cod um but that that's fun I learned a lot of new things",
    "start": "384240",
    "end": "391039"
  },
  {
    "text": "during this contest so what did I do to slash the this runtime from almost 5 minutes to",
    "start": "391039",
    "end": "397599"
  },
  {
    "text": "two minutes um couple of small changes so the first one um why use just a",
    "start": "397599",
    "end": "403800"
  },
  {
    "text": "single thread you can parse file using multiple threads um if you uh do do",
    "start": "403800",
    "end": "410400"
  },
  {
    "text": "parallel so that's what I did um why would I take this string and make",
    "start": "410400",
    "end": "417560"
  },
  {
    "text": "a new string array where I split it up then you start making a billion new arrays which is not fun you can just",
    "start": "417560",
    "end": "425000"
  },
  {
    "text": "look in the string find the separator break it into two parts that way that's just way",
    "start": "425000",
    "end": "430759"
  },
  {
    "text": "faster we do need a different map here because we are now using parallel and we",
    "start": "430759",
    "end": "435919"
  },
  {
    "text": "are writing in the same map so we need a concurrent map to not have collisions there and in the end we just uh take",
    "start": "435919",
    "end": "444000"
  },
  {
    "text": "this entire set we sort it um and we collect everything and we print it out",
    "start": "444000",
    "end": "450840"
  },
  {
    "text": "easy finished and I got a bit obsessed with",
    "start": "450840",
    "end": "456240"
  },
  {
    "text": "this contest and after after two more days you can I kept the change lck you",
    "start": "456240",
    "end": "461280"
  },
  {
    "text": "can already see uh the changes I did and the run time in milliseconds on my machine uh but on the target machine",
    "start": "461280",
    "end": "468000"
  },
  {
    "text": "which is a different machine obviously uh which is a machine in the cloud somewhere uh I got the run time down to",
    "start": "468000",
    "end": "474800"
  },
  {
    "text": "23 seconds so what happened in the meantime um",
    "start": "474800",
    "end": "480000"
  },
  {
    "start": "480000",
    "end": "572000"
  },
  {
    "text": "one of the things um so on topic uh um this is Sir Jackie Stewart F1 racing",
    "start": "480000",
    "end": "485599"
  },
  {
    "text": "driver and he always said well you don't have to be an engineer to be a racing driver but you do have to have",
    "start": "485599",
    "end": "491400"
  },
  {
    "text": "mechanical sympathy so you shouldn't be um uh you shouldn't have to take the",
    "start": "491400",
    "end": "497520"
  },
  {
    "text": "entire car apart but you have to know how a suspension kind of works to be able to be communicate to the mechanics",
    "start": "497520",
    "end": "503560"
  },
  {
    "text": "how to set it up properly and the same thing is true for programming as well so if you have a CPU this is just",
    "start": "503560",
    "end": "512399"
  },
  {
    "text": "some sample CPU you can see it has four cores so older model and all these cores",
    "start": "512399",
    "end": "518839"
  },
  {
    "text": "have their own little dedicated memory the L1 memory it's really tiny but every",
    "start": "518839",
    "end": "524959"
  },
  {
    "text": "core uh um has super fast",
    "start": "524959",
    "end": "529680"
  },
  {
    "text": "access they also have a bit larger memory but this is slower memory this",
    "start": "530000",
    "end": "536120"
  },
  {
    "text": "the L2 cache and this is also per core in on this CPU and they have a shared L3",
    "start": "536120",
    "end": "543519"
  },
  {
    "text": "cache and if you look at the times this is again obviously for every CPU this",
    "start": "543519",
    "end": "548839"
  },
  {
    "text": "will be different but the the orders of magnitude will kind of stay the same you can see there are huge differences",
    "start": "548839",
    "end": "555120"
  },
  {
    "text": "between L1 L2 and L3 caches and if you go to main memory or the solid state",
    "start": "555120",
    "end": "560240"
  },
  {
    "text": "drive or a disc drive things will take ages so it's very important to put the",
    "start": "560240",
    "end": "565600"
  },
  {
    "text": "right things into the right caches",
    "start": "565600",
    "end": "571079"
  },
  {
    "start": "572000",
    "end": "637000"
  },
  {
    "text": "so one of the first things we did was um why if there's one just one decimal position why are we working with double",
    "start": "572480",
    "end": "578800"
  },
  {
    "text": "values um we can just multiply every by 10 and then we're done we can just work with integers which is way faster",
    "start": "578800",
    "end": "585480"
  },
  {
    "text": "integer ma is just way faster than um double ma double Precision so when",
    "start": "585480",
    "end": "592560"
  },
  {
    "text": "reading we multiply by 10 so we we we talk about uh 100 which is 10 degrees",
    "start": "592560",
    "end": "600040"
  },
  {
    "text": "another thing is that uh we um instead of just reading a file sequentially we",
    "start": "600240",
    "end": "605279"
  },
  {
    "text": "break it into segments and each processor will be uh um responsible for reading their own part of the",
    "start": "605279",
    "end": "612000"
  },
  {
    "text": "file which is really interesting so what we do is we look at the amount of",
    "start": "612000",
    "end": "617200"
  },
  {
    "text": "processors we have available in my machine it's eight and then we just break the file up",
    "start": "617200",
    "end": "624040"
  },
  {
    "text": "and we need to find like the correct spot because you can't just start in the middle of segment you need to find the",
    "start": "624040",
    "end": "630160"
  },
  {
    "text": "end of line and from there you can pause on the programming uh processing to the next uh",
    "start": "630160",
    "end": "637680"
  },
  {
    "start": "637000",
    "end": "714000"
  },
  {
    "text": "part and instead of using just regular IO um I'm using memory mapped files who",
    "start": "637680",
    "end": "643839"
  },
  {
    "text": "here is familiar with the term memory map files okay what you can do in a memory map file is that uh basically you",
    "start": "643839",
    "end": "651040"
  },
  {
    "text": "tell the operating system I want this file to be memory mapped and from there",
    "start": "651040",
    "end": "656720"
  },
  {
    "text": "on you can just reference uh the file as it is memory so you can just say go to",
    "start": "656720",
    "end": "662440"
  },
  {
    "text": "memory address start a file and it will be there your operating system is heavily optimized and it can do this",
    "start": "662440",
    "end": "668920"
  },
  {
    "text": "memory mapping for you and this is something Java also supports um so if",
    "start": "668920",
    "end": "674440"
  },
  {
    "text": "you say uh files new by Channel and then you can have uh the",
    "start": "674440",
    "end": "681079"
  },
  {
    "text": "standard option read uh and then you say file channel. map which is the memory map stuff uh and in this case I get back",
    "start": "681079",
    "end": "688320"
  },
  {
    "text": "a bite buffer bite buffers are Java's best way to to access uh these roll",
    "start": "688320",
    "end": "695480"
  },
  {
    "text": "bites although I am going to break this in a couple of slides I'm still using do",
    "start": "695480",
    "end": "701240"
  },
  {
    "text": "parallel so every uh segment now is being parallel processed they all point to their own specific part in memory",
    "start": "701240",
    "end": "707680"
  },
  {
    "text": "which is again the file works perfectly and this is already way way",
    "start": "707680",
    "end": "714120"
  },
  {
    "start": "714000",
    "end": "811000"
  },
  {
    "text": "faster and like I said um bite buffers are perfect if you have production code",
    "start": "714120",
    "end": "719240"
  },
  {
    "text": "and you want to do this kind of stuff use bite buffers but bite buffers still do some boundary checks which is very",
    "start": "719240",
    "end": "725279"
  },
  {
    "text": "good we want boundary checks but not if you want break neck speed so I decided",
    "start": "725279",
    "end": "731040"
  },
  {
    "text": "to use unsafe I had never used unsafe before but it is amazing I I I programmed c a",
    "start": "731040",
    "end": "737639"
  },
  {
    "text": "long time ago um you can do all the dirty tricks you used to do uh but but",
    "start": "737639",
    "end": "742680"
  },
  {
    "text": "now in Java but let me stress again yafa wants you to move away from unsafe don't do",
    "start": "742680",
    "end": "749839"
  },
  {
    "text": "this this is cool for contests but don't do it in production",
    "start": "749839",
    "end": "755000"
  },
  {
    "text": "code the alternatives are really good just used bite buffers so how does this work and how do",
    "start": "755000",
    "end": "761519"
  },
  {
    "text": "we get this unsafe object um there's uh a static final field uh which in its the",
    "start": "761519",
    "end": "769079"
  },
  {
    "text": "unsafe class uh we need to get the unsafe uh we make it accessible and then",
    "start": "769079",
    "end": "775760"
  },
  {
    "text": "we get the field and now we have this magical unsafe object and using this unsafe object we can do a lot of cool",
    "start": "775760",
    "end": "783160"
  },
  {
    "text": "stuff so for example uh if we do the memory mapping we can call do",
    "start": "783160",
    "end": "789160"
  },
  {
    "text": "address um which gives us like the address in memory just along a pointer",
    "start": "789160",
    "end": "795279"
  },
  {
    "text": "in memory to the start of the file which the operating system mapped our file in memory and then I can just say get bite",
    "start": "795279",
    "end": "802279"
  },
  {
    "text": "and I can read a bite from there or get long and read a long value from",
    "start": "802279",
    "end": "807519"
  },
  {
    "text": "there really cool who is familiar with the term",
    "start": "807519",
    "end": "813959"
  },
  {
    "start": "811000",
    "end": "1042000"
  },
  {
    "text": "swore I had never heard of this uh but I was very lucky that somebody on Twitter told me you should look into",
    "start": "813959",
    "end": "821399"
  },
  {
    "text": "swar because up to this point I was processing each bite individually which",
    "start": "821399",
    "end": "826720"
  },
  {
    "text": "kind of makes sense because we're talking about characters and characters have bites um why not do eight at a",
    "start": "826720",
    "end": "834560"
  },
  {
    "text": "time so swar stands for simed as a register and Sim stands for single",
    "start": "834560",
    "end": "840680"
  },
  {
    "text": "instruction multiple data so how does this work suppose we have this part of",
    "start": "840680",
    "end": "846720"
  },
  {
    "text": "the file which is Tokyo minus 18.3 new line Amsterdam etc etc we can read 8 bytes at a time using",
    "start": "846720",
    "end": "854360"
  },
  {
    "text": "a single instruction if we just call um where is it if we call unsafe get long",
    "start": "854360",
    "end": "860920"
  },
  {
    "text": "we read eight bytes at a time as a long value and if we do that it actually gets flipped around and it's a one minus in a",
    "start": "860920",
    "end": "870720"
  },
  {
    "text": "um this is the hexadecimal value that you end up with when we we've read these eight byes and it's in a single long",
    "start": "870720",
    "end": "877880"
  },
  {
    "text": "value second step is that we make a separator because what we want to do now is that we want to find the separator",
    "start": "877880",
    "end": "884240"
  },
  {
    "text": "between the name where we need to make a cut and the temperature the separator itself is uh",
    "start": "884240",
    "end": "890759"
  },
  {
    "text": "is this 3B 3B 3B thing um we make one long value that has",
    "start": "890759",
    "end": "896120"
  },
  {
    "text": "that and then we go into this seemingly magical",
    "start": "896120",
    "end": "901480"
  },
  {
    "text": "method so what would what do we do um so first we exor the pattern that we want",
    "start": "901480",
    "end": "907759"
  },
  {
    "text": "so we are looking for the separator with the input and you can already see that um exor basically shows you the",
    "start": "907759",
    "end": "915240"
  },
  {
    "text": "difference in binary and in this case there's no difference uh at that specific bite that's the answer we want but",
    "start": "915240",
    "end": "922560"
  },
  {
    "text": "there's still a lot of junk there so there's this little trick you can do um so we have the significant bit",
    "start": "922560",
    "end": "929920"
  },
  {
    "text": "and we subtract it from the thing we just created and then we",
    "start": "929920",
    "end": "938199"
  },
  {
    "text": "um yeah then you get like where we had all zeros we now get all ones and we",
    "start": "938199",
    "end": "943480"
  },
  {
    "text": "change the the bit in front what we do now is that we um end",
    "start": "943480",
    "end": "949079"
  },
  {
    "text": "it together with the opposite of the thing that we started with and as you can see this is what we end up with",
    "start": "949079",
    "end": "956000"
  },
  {
    "text": "which basically counts the number of zeros that it had so if you had a lot of zeros it becomes all ones and if you had",
    "start": "956000",
    "end": "962959"
  },
  {
    "text": "just a couple of zeros you get a couple of ones and then a zero and now we can look at the most",
    "start": "962959",
    "end": "969319"
  },
  {
    "text": "significant bit because the only way to get all once where the most significant bit is one is the case where the thing",
    "start": "969319",
    "end": "977360"
  },
  {
    "text": "that we were looking for was exactly the same bits as before so using just uh one two three",
    "start": "977360",
    "end": "986279"
  },
  {
    "text": "four five five uh Sy instructions on a long value we've checked where the",
    "start": "986279",
    "end": "993040"
  },
  {
    "text": "separator is in an 8 byte um uh piece of data this is",
    "start": "993040",
    "end": "999560"
  },
  {
    "text": "extremely fast so there's one thing left to do um so we check and we get this",
    "start": "999560",
    "end": "1005560"
  },
  {
    "text": "number back this number still doesn't say anything because ideally we we would want the number five right because there",
    "start": "1005560",
    "end": "1011639"
  },
  {
    "text": "are five bytes we want the number five out of it um so what we do is we count the number of zeros we divide it by",
    "start": "1011639",
    "end": "1018399"
  },
  {
    "text": "eight but dividing by eight is so slow you can just shift three times which is the same thing it's dividing by two",
    "start": "1018399",
    "end": "1024438"
  },
  {
    "text": "dividing by two is four dividing by two is eight so if you do this you divide by",
    "start": "1024439",
    "end": "1029959"
  },
  {
    "text": "eight and you get five and five is exactly what we want so using just a couple of instructions you can get um",
    "start": "1029959",
    "end": "1037720"
  },
  {
    "text": "the separator this is extremely",
    "start": "1037720",
    "end": "1042600"
  },
  {
    "start": "1042000",
    "end": "1098000"
  },
  {
    "text": "fast my code was still creating a lot of strings because um even if I found the",
    "start": "1043280",
    "end": "1049120"
  },
  {
    "text": "separator I I would sub extract the string value from this I would extract",
    "start": "1049120",
    "end": "1054320"
  },
  {
    "text": "the temperature value as a string and then I would create uh double uh integer values from that",
    "start": "1054320",
    "end": "1061720"
  },
  {
    "text": "Etc but you shouldn't be allocating all these strings we can just we have access",
    "start": "1061720",
    "end": "1066960"
  },
  {
    "text": "to the thing in memory so we can just uh read these long values and we can check",
    "start": "1066960",
    "end": "1073200"
  },
  {
    "text": "if the first eight characters of the thing that we have is the same as the first eight characters by using a a",
    "start": "1073200",
    "end": "1078919"
  },
  {
    "text": "single long comparator which is again eight times faster than than checking a bite by bite so I I stopped creating any",
    "start": "1078919",
    "end": "1086960"
  },
  {
    "text": "strings until the final printing at the end then we actually need to create strings to actually output it but that's",
    "start": "1086960",
    "end": "1093280"
  },
  {
    "text": "just one time not a billion another key thing that you uh",
    "start": "1093280",
    "end": "1100159"
  },
  {
    "start": "1098000",
    "end": "1235000"
  },
  {
    "text": "need to be familiar with is branchless programming so CPUs have big pipelines",
    "start": "1100159",
    "end": "1106000"
  },
  {
    "text": "of instructions they are very good in following these instructions and that's",
    "start": "1106000",
    "end": "1111240"
  },
  {
    "text": "almost never the problem uh uh if you want to have FAST program it's almost never executing the instructions it's",
    "start": "1111240",
    "end": "1118360"
  },
  {
    "text": "filling this Pipeline with the correct instructions and being able to predict which instructions will come next so",
    "start": "1118360",
    "end": "1125440"
  },
  {
    "text": "it's your code's job to fill this pipeline as fast as",
    "start": "1125440",
    "end": "1130280"
  },
  {
    "text": "possible but what instruction comes next after an if statement could be either could be this",
    "start": "1130520",
    "end": "1136679"
  },
  {
    "text": "one or this one uh modern C views will just uh do both and discard the result",
    "start": "1136679",
    "end": "1142440"
  },
  {
    "text": "but branches are always slow so we want to avoid that as much as",
    "start": "1142440",
    "end": "1147840"
  },
  {
    "text": "possible how can we do that this is a very simple absolute value function if you go in if x is",
    "start": "1147840",
    "end": "1155200"
  },
  {
    "text": "smaller than zero return Negative X otherwise return X if the CPU Encounters this a branch it",
    "start": "1155200",
    "end": "1164000"
  },
  {
    "text": "will need to I don't know or either take a guess or wait until it knows the result",
    "start": "1164000",
    "end": "1169280"
  },
  {
    "text": "and then can continue but if you do it like this where you say I've got this x value and",
    "start": "1169280",
    "end": "1176039"
  },
  {
    "text": "there's one bit at the end which says is if negative or positive if I just shift",
    "start": "1176039",
    "end": "1181159"
  },
  {
    "text": "this entire bit 31 times I got this entire thing filled with either zeros or ones which turns it into negative",
    "start": "1181159",
    "end": "1188880"
  },
  {
    "text": "one and if x +0 xor zero is just X we",
    "start": "1188880",
    "end": "1194039"
  },
  {
    "text": "don't do anything but if we do X+ minus one and then exor with minus one you get",
    "start": "1194039",
    "end": "1201000"
  },
  {
    "text": "a negative number of X and you can always do this so you can just fill this",
    "start": "1201000",
    "end": "1206679"
  },
  {
    "text": "Pipeline and it can continue on in a branchless way this is faster um you",
    "start": "1206679",
    "end": "1213000"
  },
  {
    "text": "don't need to do this actually with the absolute value in Java the Java compiler is way smarter than than we we give take",
    "start": "1213000",
    "end": "1220159"
  },
  {
    "text": "for granted so it does this automatically I'm not using this uh but this actual piece of code will come back",
    "start": "1220159",
    "end": "1226400"
  },
  {
    "text": "later so um IA wipe my own absolute value function I just Ed the standard uh",
    "start": "1226400",
    "end": "1232559"
  },
  {
    "text": "functions there so I wanted to take the things",
    "start": "1232559",
    "end": "1238600"
  },
  {
    "start": "1235000",
    "end": "1814000"
  },
  {
    "text": "that I learned about branches programming and put this into my parser as well so I decided I want to write",
    "start": "1238600",
    "end": "1245080"
  },
  {
    "text": "like a branchless um uh uh um parer to get this",
    "start": "1245080",
    "end": "1251520"
  },
  {
    "text": "string value and and get the the integer of the temperature and this is what I ended up",
    "start": "1251520",
    "end": "1257360"
  },
  {
    "text": "with you can see there's no no uh no if statements there so it is completely branchless but I'm still using a bite",
    "start": "1257360",
    "end": "1263120"
  },
  {
    "text": "array here uh so this is from an earlier version of my code uh where I was using bite arrays and bite buffers um so I'm",
    "start": "1263120",
    "end": "1270679"
  },
  {
    "text": "not using any swart tricks here I'm still looking at it bite by bite but",
    "start": "1270679",
    "end": "1276440"
  },
  {
    "text": "there are some some some things that are really interesting so the temperature part that's either minus or just 12.5 or",
    "start": "1276440",
    "end": "1285520"
  },
  {
    "text": "something like that so these are the characters that we uh that we are de with and you can see that the 1 2 3 4",
    "start": "1285520",
    "end": "1293960"
  },
  {
    "text": "fifth bite is different for the minus and the dot uh opposed to all the digits",
    "start": "1293960",
    "end": "1299600"
  },
  {
    "text": "so that's an important fact we can use that so if we want to see if a number is",
    "start": "1299600",
    "end": "1304679"
  },
  {
    "text": "negative uh we look at the the first bite uh we just shift it four places so",
    "start": "1304679",
    "end": "1310559"
  },
  {
    "text": "that that single unique bit is in front we mask it out and we flip it uh so it's",
    "start": "1310559",
    "end": "1316240"
  },
  {
    "text": "one if it's negative zero if it's a positive number and I do similar tricks for",
    "start": "1316240",
    "end": "1322799"
  },
  {
    "text": "looking where the dot position is and seeing if a number is actually uh oh",
    "start": "1322799",
    "end": "1328080"
  },
  {
    "text": "actually this just looks at the length and the fact if it's negative or positive um so it could be 9.9 or it",
    "start": "1328080",
    "end": "1336240"
  },
  {
    "text": "could be 99.9 so the sometimes you have three digits sometimes you have two digits you need to take care of this as",
    "start": "1336240",
    "end": "1342039"
  },
  {
    "text": "well usually this is a branch but we want to have this Branch list so I'm doing this",
    "start": "1342039",
    "end": "1348720"
  },
  {
    "text": "and then um these are still characters but we want actual values so if you can",
    "start": "1348720",
    "end": "1355080"
  },
  {
    "text": "see uh digit one we get the bite and we subtract the character Zero to get zero",
    "start": "1355080",
    "end": "1362200"
  },
  {
    "text": "and if you do that uh the character one will become one the character nine will become nine I'm actually not doing that",
    "start": "1362200",
    "end": "1367880"
  },
  {
    "text": "for digits two and three because um that's two subtractions but we can",
    "start": "1367880",
    "end": "1374120"
  },
  {
    "text": "actually do that if we subtract 528 because that's the same thing as 10",
    "start": "1374120",
    "end": "1379200"
  },
  {
    "text": "times the zero digit and the zero character as well so we saved another",
    "start": "1379200",
    "end": "1384720"
  },
  {
    "text": "subtraction times a billion every time you see one of these optimizations it sounds silly but it's times a billion",
    "start": "1384720",
    "end": "1392080"
  },
  {
    "text": "and it's good to remember that and what we can do is just the first digit times 100 uh times if it",
    "start": "1392080",
    "end": "1399120"
  },
  {
    "text": "actually has a this this digit sometimes it doesn't which makes it zero and we're not using it the 10's digit and the",
    "start": "1399120",
    "end": "1406320"
  },
  {
    "text": "other digit and we everything together gives us an integer value of this temperature",
    "start": "1406320",
    "end": "1412919"
  },
  {
    "text": "perfect and I was so pleased I was so pleased with this code it was a little",
    "start": "1412919",
    "end": "1419080"
  },
  {
    "text": "bit faster not really like incredibly faster but it was something",
    "start": "1419080",
    "end": "1424559"
  },
  {
    "text": "unique and then his user Mary Kitty uh posted an update of of his code",
    "start": "1424559",
    "end": "1432240"
  },
  {
    "text": "and he came up with this uh it took me a while to actually",
    "start": "1432240",
    "end": "1439240"
  },
  {
    "text": "understand what was happening and I'm going to try to convince you uh uh what it",
    "start": "1439240",
    "end": "1444520"
  },
  {
    "text": "does so the first thing it's not using bite arrays it's just reading this",
    "start": "1444520",
    "end": "1450400"
  },
  {
    "text": "entire thing as a long value again so it's using swore kind of",
    "start": "1450400",
    "end": "1456120"
  },
  {
    "text": "tricks so if we have this temperature minus 18.3 and then there's always some",
    "start": "1456120",
    "end": "1461240"
  },
  {
    "text": "junk at the end so there's a new line etc etc we don't need that but we get it anyway if we get this get long uh",
    "start": "1461240",
    "end": "1468799"
  },
  {
    "text": "function and again it will be flipped in memory if you um look at a heod decimal",
    "start": "1468799",
    "end": "1474520"
  },
  {
    "text": "heximal things so I'm going to keep it as this so the first line actually looks at",
    "start": "1474520",
    "end": "1482399"
  },
  {
    "text": "the dot position so he has this uh dotbits um mask which is uh just three",
    "start": "1482399",
    "end": "1489360"
  },
  {
    "text": "different bits and it's using again the fact that these two characters um these",
    "start": "1489360",
    "end": "1494799"
  },
  {
    "text": "two bits are different in these characters than it is in the digits so it can easily in a single line check",
    "start": "1494799",
    "end": "1501360"
  },
  {
    "text": "where the dot position actually is and it's either at the 12th the 20th or the 28th",
    "start": "1501360",
    "end": "1507840"
  },
  {
    "text": "bit so that's that's what we store in dot position we're going to use that",
    "start": "1507840",
    "end": "1514399"
  },
  {
    "text": "later so in this case um the dot position is uh as far as we can because",
    "start": "1514399",
    "end": "1519840"
  },
  {
    "text": "we have n a negative sign and we have two digits for the temperature and then we have the dot position so in this case",
    "start": "1519840",
    "end": "1526279"
  },
  {
    "text": "it's 28",
    "start": "1526279",
    "end": "1530000"
  },
  {
    "text": "perfect for the sign we do actually the same thing um we take this number it's",
    "start": "1532279",
    "end": "1538360"
  },
  {
    "text": "in the fifth bit position that are zero or one if it's negative or a digit we",
    "start": "1538360",
    "end": "1544480"
  },
  {
    "text": "shift it all the way to the end so that the the this the the the bit that we're",
    "start": "1544480",
    "end": "1550039"
  },
  {
    "text": "looking for is in the negative or positive position and then we shift it all the way back so the number we end up",
    "start": "1550039",
    "end": "1555360"
  },
  {
    "text": "with is either zero or minus one if it's minus one if it's NE Z if it's positive",
    "start": "1555360",
    "end": "1560600"
  },
  {
    "text": "number we keep that as well this is actually uh a silly method",
    "start": "1560600",
    "end": "1568760"
  },
  {
    "text": "that takes this do dot position which is either 12 20 or 28 and turns it into 08",
    "start": "1568760",
    "end": "1574320"
  },
  {
    "text": "or 16 and this is the MK so we're going to use this to shift",
    "start": "1574320",
    "end": "1580640"
  },
  {
    "text": "accordingly we either need to shift the number Z8 or 16",
    "start": "1580640",
    "end": "1586279"
  },
  {
    "text": "bits now if there's a minus sign we don't want to use the values that are in the minus sign so we need to uh mask",
    "start": "1586279",
    "end": "1592399"
  },
  {
    "text": "this out so this creates a little mask if there's no negative sign there's no mask if there is a negative sign we mask",
    "start": "1592399",
    "end": "1599799"
  },
  {
    "text": "out this first negative character perfect and now we combine this all",
    "start": "1599799",
    "end": "1606080"
  },
  {
    "text": "together we just take these final bits uh we do that for all the three spots that we possibly have uh characters that",
    "start": "1606080",
    "end": "1613960"
  },
  {
    "text": "might be digits and uh we're left with uh a",
    "start": "1613960",
    "end": "1619880"
  },
  {
    "text": "number that is in this form so it's a single number it has uh",
    "start": "1619880",
    "end": "1625600"
  },
  {
    "text": "one digit in the hundreds one digit in the T and one digit in the in the in the",
    "start": "1625600",
    "end": "1632159"
  },
  {
    "text": "units uh but we're still not there yet so in the case of minus 18.3 we would",
    "start": "1632159",
    "end": "1638600"
  },
  {
    "text": "have this number here so 0 0 1 080 Z3 we're close we're close to the number",
    "start": "1638600",
    "end": "1646000"
  },
  {
    "text": "that we want we want US 183 but yet still still so far right it's it's it's",
    "start": "1646000",
    "end": "1654080"
  },
  {
    "text": "there we can see the digits there but it's not",
    "start": "1654080",
    "end": "1659398"
  },
  {
    "text": "183 so if we shift this number we can align everything on top of each other",
    "start": "1660919",
    "end": "1668080"
  },
  {
    "text": "that's a good start right so if we multiply by one that's like the same number but if we multiply by that that",
    "start": "1668080",
    "end": "1674480"
  },
  {
    "text": "that different number that z z 1 0 0 0 we could actually we shift the eight and",
    "start": "1674480",
    "end": "1679559"
  },
  {
    "text": "uh by the other we shift the one it turns out if you multiply by a single number which is this number added",
    "start": "1679559",
    "end": "1686640"
  },
  {
    "text": "together uh you get uh basically this the resulting position there will",
    "start": "1686640",
    "end": "1694519"
  },
  {
    "text": "have all these three numbers added together so we get 1+ 8 plus three interesting still not what we want",
    "start": "1694519",
    "end": "1702440"
  },
  {
    "text": "to have but we are very close you can kind of guess where this is going um if",
    "start": "1702440",
    "end": "1708399"
  },
  {
    "text": "you take the first number you multiply by one and the second number with the shift and you multiply that by 10 and",
    "start": "1708399",
    "end": "1715440"
  },
  {
    "text": "the third number and you multiply that by 100 you you get up you you get",
    "start": "1715440",
    "end": "1721360"
  },
  {
    "text": "eventually there somewhere with all the junk in between you get the number",
    "start": "1721360",
    "end": "1726760"
  },
  {
    "text": "183 uh and you can actually do that in a single",
    "start": "1726760",
    "end": "1731600"
  },
  {
    "text": "multiplication and that's that's basically what the top row says it's 100 times that shift 10 times the other",
    "start": "1731880",
    "end": "1737519"
  },
  {
    "text": "shift and one you multiply by this number you'll get a lot of junk but somewhere in there",
    "start": "1737519",
    "end": "1744200"
  },
  {
    "text": "without any overlap magical uh is the number 183 that we were looking",
    "start": "1744200",
    "end": "1750640"
  },
  {
    "text": "for I how yeah that's I have no idea how you",
    "start": "1750640",
    "end": "1758360"
  },
  {
    "text": "can come up with something like that um I was really pleased with my BR method but this is so next",
    "start": "1758360",
    "end": "1764519"
  },
  {
    "text": "level so there's just a couple of things left to do we need to fil out that specific spot so uh we need to shift it",
    "start": "1764519",
    "end": "1772000"
  },
  {
    "text": "and mask it out and uh the bottom line we still have the absolute value so what",
    "start": "1772000",
    "end": "1777559"
  },
  {
    "text": "we need to do is apply the sign which is uh zero or minus one and that's what the bottom L line does it applies this uh",
    "start": "1777559",
    "end": "1785720"
  },
  {
    "text": "minus one to our number so we get back minus 183 as the temperature and this is",
    "start": "1785720",
    "end": "1792320"
  },
  {
    "text": "really fast um it looks like a lot of instructions but again everything's",
    "start": "1792320",
    "end": "1797640"
  },
  {
    "text": "branchless and you're parsing this entire temperature string in a single go without making an array without using",
    "start": "1797640",
    "end": "1805360"
  },
  {
    "text": "strings without anything you just read from memory and you get back the the",
    "start": "1805360",
    "end": "1811120"
  },
  {
    "text": "number so what do we have um we read the file using memory map files which is",
    "start": "1812360",
    "end": "1819120"
  },
  {
    "start": "1814000",
    "end": "2182000"
  },
  {
    "text": "really fast uh we find and we read the city names using swore so we find the",
    "start": "1819120",
    "end": "1825679"
  },
  {
    "text": "separator and we have a crazy branchless method that takes this temperature and",
    "start": "1825679",
    "end": "1832039"
  },
  {
    "text": "returns an integer now we need to store everything because we need to aggregate everything",
    "start": "1832039",
    "end": "1837480"
  },
  {
    "text": "at the end you're probably all familiar with",
    "start": "1837480",
    "end": "1843399"
  },
  {
    "text": "what a hashmap is and and what it how it looks like and what how it works uh basically example we've got eight",
    "start": "1843399",
    "end": "1850159"
  },
  {
    "text": "buckets here uh we have this entry let's call it London we generate some hash code in",
    "start": "1850159",
    "end": "1857320"
  },
  {
    "text": "Java that's easy you can just go do hash code you get a hash code we uh take mod 8 so we know in",
    "start": "1857320",
    "end": "1864519"
  },
  {
    "text": "which bucket we need to dump our entry and that's where we dump our entry and then we do the same thing we",
    "start": "1864519",
    "end": "1871120"
  },
  {
    "text": "end up with the same hash code end up in the same bucket and for example if we have a",
    "start": "1871120",
    "end": "1877600"
  },
  {
    "text": "different city as a different hash code uh but in this case modulo three we end",
    "start": "1877600",
    "end": "1882639"
  },
  {
    "text": "up in the same bucket so we've got a problem and what Java does is that it uh",
    "start": "1882639",
    "end": "1888080"
  },
  {
    "text": "in case of a collision it creates this three like structure where you can just checks the first one is this actually",
    "start": "1888080",
    "end": "1894320"
  },
  {
    "text": "the thing we're looking for no uh then is it this one Etc so I uh started to think really hard",
    "start": "1894320",
    "end": "1902320"
  },
  {
    "text": "and I I I asked CAD GPT how can I make this faster uh and CAD GPT said had you",
    "start": "1902320",
    "end": "1908279"
  },
  {
    "text": "have you looked at forward probing I like no so what you do in forward probing uh instead of making this threee",
    "start": "1908279",
    "end": "1915120"
  },
  {
    "text": "structure which is complicated and has a lot of overhead you just put it in the next empty spot which sounds crazy but",
    "start": "1915120",
    "end": "1922440"
  },
  {
    "text": "yeah it works right so you just put it in the next empty spot and if that one",
    "start": "1922440",
    "end": "1927760"
  },
  {
    "text": "is taken you put it in the next empty spot it's that simple so I I I wrote this I created my",
    "start": "1927760",
    "end": "1934600"
  },
  {
    "text": "own hashmap um what it does uh so when going through this swar method",
    "start": "1934600",
    "end": "1943000"
  },
  {
    "text": "I'm actually using this to update is there no so I'm I'm I'm updating hash",
    "start": "1943000",
    "end": "1948760"
  },
  {
    "text": "accordingly so I can do this in line because I already read it anyway um and",
    "start": "1948760",
    "end": "1954240"
  },
  {
    "text": "then I make sure that the table is actually a power of two so I can use an end operation to um um to get the int",
    "start": "1954240",
    "end": "1962960"
  },
  {
    "text": "value and then I look in my hash table which is just an",
    "start": "1962960",
    "end": "1968159"
  },
  {
    "text": "array if there's nothing yet store it there and I'm not using any objects or",
    "start": "1968159",
    "end": "1975120"
  },
  {
    "text": "anything I'm using one big bite array and I'm just writing everything in memory this is called a flyweight",
    "start": "1975120",
    "end": "1981480"
  },
  {
    "text": "pattern so I I've got this this bite array allocated I can just using unsafe",
    "start": "1981480",
    "end": "1986960"
  },
  {
    "text": "I can just say well first I always write along then I always write in in in then I write a bite value and then there's",
    "start": "1986960",
    "end": "1992880"
  },
  {
    "text": "the city name perfect no no class overhead this is actually something Java is currently",
    "start": "1992880",
    "end": "1999760"
  },
  {
    "text": "working on in the new uh jebs uh the the class overhead will become very much smaller and in a race it sometimes",
    "start": "1999760",
    "end": "2006240"
  },
  {
    "text": "disappears it's doing this in the background",
    "start": "2006240",
    "end": "2011080"
  },
  {
    "text": "automatically if there was already something there we need to check that the string that we have is actually the",
    "start": "2011360",
    "end": "2016919"
  },
  {
    "text": "same as the string uh that's there um and if it is the same we update the the",
    "start": "2016919",
    "end": "2024159"
  },
  {
    "text": "temperature we update the Min value the max value uh Etc and this is the forward probing bit",
    "start": "2024159",
    "end": "2031039"
  },
  {
    "text": "it's literally as simple as adding one and looking in the array again and if you make sure that the hes code is",
    "start": "2031039",
    "end": "2037880"
  },
  {
    "text": "properly implemented you'll probably have no collisions whatsoever so it's very",
    "start": "2037880",
    "end": "2044000"
  },
  {
    "text": "fast although it was illegal in this contest to assume there were no Hesh collisions even if you knew there were",
    "start": "2044000",
    "end": "2050280"
  },
  {
    "text": "no Hesh collisions you still needed to check the actual string some other so people this was a Java competition some",
    "start": "2050280",
    "end": "2057320"
  },
  {
    "text": "other languages were used as well and people have used net rust python Etc um",
    "start": "2057320",
    "end": "2062520"
  },
  {
    "text": "but they often skip this so uh you might see someone say well I did it in under a second but they might have skipped this",
    "start": "2062520",
    "end": "2069358"
  },
  {
    "text": "step and this is crucial step so Thomas um he is the creator of",
    "start": "2069359",
    "end": "2076760"
  },
  {
    "text": "theam he was also very actively involved um um he said well this is ridiculous um",
    "start": "2076760",
    "end": "2084560"
  },
  {
    "text": "I'm uh my code is currently running in in half a second but it takes like 13",
    "start": "2084560",
    "end": "2090358"
  },
  {
    "text": "seconds for the operating system to unmap so these memory map files really",
    "start": "2090359",
    "end": "2097760"
  },
  {
    "text": "cool but the operating system needs to unmap everything like clean everything up this became the",
    "start": "2097760",
    "end": "2103800"
  },
  {
    "text": "bottleneck and he said well I've got this crazy idea is this valid can we use",
    "start": "2103800",
    "end": "2108880"
  },
  {
    "text": "it and gunar said sure go ahead and he came up with this so what is happening",
    "start": "2108880",
    "end": "2115200"
  },
  {
    "text": "here our main program starts and the first thing it does is that it spawns a worker",
    "start": "2115200",
    "end": "2121760"
  },
  {
    "text": "threat it uses the process Builder to uh actually fire this up and this one is",
    "start": "2121760",
    "end": "2127240"
  },
  {
    "text": "going to actually do the processing so it's opening the file it's doing the memory mapping and it's redirecting the",
    "start": "2127240",
    "end": "2134320"
  },
  {
    "text": "output back to the main program so we've got two programs working here the main and the",
    "start": "2134320",
    "end": "2139480"
  },
  {
    "text": "worker and the main basically exits immediately uh but it's still depending",
    "start": "2139480",
    "end": "2144599"
  },
  {
    "text": "on the stream so it's still waiting for output of the worker and at the moment",
    "start": "2144599",
    "end": "2149800"
  },
  {
    "text": "the worker is finished we close the output the main process stops the timing stops your time has been recorded and",
    "start": "2149800",
    "end": "2157880"
  },
  {
    "text": "meanwhile this worker threat is still cleaning up all the Etc in the",
    "start": "2157880",
    "end": "2163400"
  },
  {
    "text": "background felt a bit like a cheat but yeah the results were being skilled a lot like uh the yeah we were we were",
    "start": "2163400",
    "end": "2171760"
  },
  {
    "text": "looking at 13 seconds unmapping so it it was good that we actually did this and everybody just copied this into their",
    "start": "2171760",
    "end": "2177800"
  },
  {
    "text": "own code and was using the same so which jvm should you use or what",
    "start": "2177800",
    "end": "2185280"
  },
  {
    "start": "2182000",
    "end": "2241000"
  },
  {
    "text": "language should you use that's also a valid question uh here I go to I tried a",
    "start": "2185280",
    "end": "2191000"
  },
  {
    "text": "lot of different vendors suppliers from Oracle to to Azul to um but basically it",
    "start": "2191000",
    "end": "2198280"
  },
  {
    "text": "turns out a native compilation using was the fastest way to do this there was one",
    "start": "2198280",
    "end": "2204240"
  },
  {
    "text": "trick you couldn't do in which is uh using the new Factor API factorization",
    "start": "2204240",
    "end": "2209760"
  },
  {
    "text": "so some people went that route and they came really close to the to the top entries but it turns out native",
    "start": "2209760",
    "end": "2216280"
  },
  {
    "text": "compilation in Java was still a little bit faster especially if you let thas Do It um because he has all the tools and",
    "start": "2216280",
    "end": "2222520"
  },
  {
    "text": "he's just looking at the machine code that's been generated fun fact there was also a new",
    "start": "2222520",
    "end": "2228560"
  },
  {
    "text": "release of the during the contest and I'm pretty sure he he just fixed some bugs in the km just for this",
    "start": "2228560",
    "end": "2235240"
  },
  {
    "text": "contest until proven otherwise that that's how he won so how do you do this uh there was",
    "start": "2235240",
    "end": "2242480"
  },
  {
    "start": "2241000",
    "end": "2378000"
  },
  {
    "text": "this small script um for my entry uh I set the correct job version and I give",
    "start": "2242480",
    "end": "2248960"
  },
  {
    "text": "it some uh options half of them no clue what they do some I can",
    "start": "2248960",
    "end": "2254599"
  },
  {
    "text": "explain um for example the garbage collection is using the Epsilon garbage collection who here knows what the",
    "start": "2254599",
    "end": "2261200"
  },
  {
    "text": "Epsilon garbage collection does what what does it do nothing it",
    "start": "2261200",
    "end": "2266720"
  },
  {
    "text": "does absolutely nothing you just fill up your memory uh you quit and then everything gets freed up again perfect",
    "start": "2266720",
    "end": "2274240"
  },
  {
    "text": "we don't want any overhead this all fits in memory so should be fine",
    "start": "2274240",
    "end": "2280480"
  },
  {
    "text": "um yeah so I'm optimizing the the Heap space a little bit I'm I'm trying to get",
    "start": "2280480",
    "end": "2286000"
  },
  {
    "text": "to inline everything uh and then we call this native image command uh and you get a binary at the",
    "start": "2286000",
    "end": "2292920"
  },
  {
    "text": "end so you're not working with jar files or CLA files you get an actual binary uh",
    "start": "2292920",
    "end": "2298160"
  },
  {
    "text": "this is what it looks like so it goes through this entire process it searches like the entire space It fires up your",
    "start": "2298160",
    "end": "2304599"
  },
  {
    "text": "application even and it looks at everything that's being initialized and then it makes a snapshot of what's being generated and this is being put in",
    "start": "2304599",
    "end": "2311880"
  },
  {
    "text": "the binary um compilation in the end one great thing is is that you can",
    "start": "2311880",
    "end": "2318079"
  },
  {
    "text": "actually use tools like perf to see the actual machine code and this is something Tomas was heavily doing",
    "start": "2318079",
    "end": "2325920"
  },
  {
    "text": "so he's he he was very good because his code my code was using all kinds of dirty tricks but his code was really",
    "start": "2325920",
    "end": "2332079"
  },
  {
    "text": "clean because he would just make sure that his Java code would using the crow",
    "start": "2332079",
    "end": "2337200"
  },
  {
    "text": "comp ER make the exact machine code he wants that guy's a genius and and there",
    "start": "2337200",
    "end": "2342480"
  },
  {
    "text": "was also the last week of the competition I started to uh notice that",
    "start": "2342480",
    "end": "2347720"
  },
  {
    "text": "any changes I made on my machine which is an M2 MacBook were completely irrelevant to what was happening on the",
    "start": "2347720",
    "end": "2354400"
  },
  {
    "text": "cloud machine and once things don't correlate anymore you have no idea what you're doing you have no idea what",
    "start": "2354400",
    "end": "2360040"
  },
  {
    "text": "you're optimizing but this is basically where I give up for a moment I considered also",
    "start": "2360040",
    "end": "2367000"
  },
  {
    "text": "renting out a Cloud Server to actually test on that server but I'm Dutch and things that cost",
    "start": "2367000",
    "end": "2373319"
  },
  {
    "text": "money that's not my that's not that's not how I",
    "start": "2373319",
    "end": "2378160"
  },
  {
    "start": "2378000",
    "end": "2450000"
  },
  {
    "text": "roll so end of the month um I kept a change log and you can you can see uh",
    "start": "2379079",
    "end": "2385680"
  },
  {
    "text": "all the things I did and where I started out and uh basically every little change",
    "start": "2385680",
    "end": "2392000"
  },
  {
    "text": "um got some got some update uh this is actually my favorite one",
    "start": "2392000",
    "end": "2397839"
  },
  {
    "text": "uh had a lot of comments Priceless because that that but that was",
    "start": "2397839",
    "end": "2403440"
  },
  {
    "text": "key in this contest everybody was reading each other's code and trying to understand what was happening and and it",
    "start": "2403440",
    "end": "2408720"
  },
  {
    "text": "was such such good fun and to gunar is probably going to do another contest",
    "start": "2408720",
    "end": "2414000"
  },
  {
    "text": "early next year so if you have the time please please join him it's it's fun you can also see the switch where uh back",
    "start": "2414000",
    "end": "2421359"
  },
  {
    "text": "there um I said well the scores are getting worse than the target machine anyway and then I switched to my old",
    "start": "2421359",
    "end": "2427319"
  },
  {
    "text": "MacBook because my old MacBook has an x uh um uh x86 uh chip in it so I could",
    "start": "2427319",
    "end": "2434359"
  },
  {
    "text": "actually use the perfect command there which is something you cannot do on on a MacBook using Mac",
    "start": "2434359",
    "end": "2439440"
  },
  {
    "text": "OS so the times became a lot slower but it was a little bit more specific to the",
    "start": "2439440",
    "end": "2444920"
  },
  {
    "text": "infrastructure of the of the cloud uh machine so the results uh I came in",
    "start": "2444920",
    "end": "2452119"
  },
  {
    "start": "2450000",
    "end": "2520000"
  },
  {
    "text": "seventh which was I was I'm was still pretty pretty proud and you can see Thomas uh eventually won uh the contest",
    "start": "2452119",
    "end": "2460160"
  },
  {
    "text": "um yeah one and a half",
    "start": "2460160",
    "end": "2466160"
  },
  {
    "text": "seconds so we went from five minutes almost five minutes in my case to just",
    "start": "2466160",
    "end": "2471760"
  },
  {
    "text": "over two seconds that's how much time you can gain if you optimize your code which is",
    "start": "2471760",
    "end": "2478800"
  },
  {
    "text": "I I would have never guessed that that it went down this far I always want to give a huge shout",
    "start": "2478800",
    "end": "2485640"
  },
  {
    "text": "out to gunar who hosted this contest he grossly overestimated uh the time that",
    "start": "2485640",
    "end": "2490680"
  },
  {
    "text": "it would take him um every day like dozens of people would submit a pool request and he would manually go through",
    "start": "2490680",
    "end": "2497040"
  },
  {
    "text": "them and check if everything was valid and um he didn't have the correct",
    "start": "2497040",
    "end": "2502359"
  },
  {
    "text": "infrastructure to begin with uh he didn't have automatic Runners uh when it all started but it was fun that a lot of",
    "start": "2502359",
    "end": "2508960"
  },
  {
    "text": "community members came in started helping in started creating scripts started creating uh uh U ways to",
    "start": "2508960",
    "end": "2515200"
  },
  {
    "text": "automatically set up the server Etc just really really really cool let's let's",
    "start": "2515200",
    "end": "2520319"
  },
  {
    "start": "2520000",
    "end": "2536000"
  },
  {
    "text": "let's go through some questions",
    "start": "2520319",
    "end": "2524079"
  }
]