[
  {
    "text": "my name is ky kuko and I'm here at go to",
    "start": "6600",
    "end": "9320"
  },
  {
    "text": "Copenhagen 2012 with the rich hiy",
    "start": "9320",
    "end": "12000"
  },
  {
    "text": "creative closure and day Tomic and first",
    "start": "12000",
    "end": "14879"
  },
  {
    "text": "of all I want to thank you Rich for",
    "start": "14879",
    "end": "16278"
  },
  {
    "text": "doing this",
    "start": "16279",
    "end": "17840"
  },
  {
    "text": "interview and um maybe just to get",
    "start": "17840",
    "end": "21480"
  },
  {
    "text": "started uh I'd like you to maybe say a",
    "start": "21480",
    "end": "23359"
  },
  {
    "text": "few things about yourself and introduce",
    "start": "23359",
    "end": "24960"
  },
  {
    "text": "yourself or people who don't already",
    "start": "24960",
    "end": "26480"
  },
  {
    "text": "know",
    "start": "26480",
    "end": "27359"
  },
  {
    "text": "you okay well um I was uh software",
    "start": "27359",
    "end": "30439"
  },
  {
    "text": "developer have been for almost 25 years",
    "start": "30439",
    "end": "33360"
  },
  {
    "text": "now and worked on a variety of different",
    "start": "33360",
    "end": "35399"
  },
  {
    "text": "kinds of systems and uh buil closure in",
    "start": "35399",
    "end": "39360"
  },
  {
    "text": "2007 or finished it in delivered in 2007",
    "start": "39360",
    "end": "42800"
  },
  {
    "text": "and uh that's taken off and subsequent",
    "start": "42800",
    "end": "45680"
  },
  {
    "text": "to that I've uh been working on datomic",
    "start": "45680",
    "end": "48399"
  },
  {
    "text": "which is a new new kind of database so",
    "start": "48399",
    "end": "50480"
  },
  {
    "text": "that's what I do yeah that's a I'm",
    "start": "50480",
    "end": "53320"
  },
  {
    "text": "personally closure user and I'm a happy",
    "start": "53320",
    "end": "54920"
  },
  {
    "text": "closure user so I'd like to sort of take",
    "start": "54920",
    "end": "57760"
  },
  {
    "text": "off in your keynote that you just gave",
    "start": "57760",
    "end": "59600"
  },
  {
    "text": "which called the value of values and",
    "start": "59600",
    "end": "62120"
  },
  {
    "text": "move into closure and and those things",
    "start": "62120",
    "end": "64559"
  },
  {
    "text": "so so just for people that weren't at",
    "start": "64559",
    "end": "66320"
  },
  {
    "text": "the talk could you tell me what's the",
    "start": "66320",
    "end": "69200"
  },
  {
    "text": "difference between Place oriented",
    "start": "69200",
    "end": "70600"
  },
  {
    "text": "programming and value oriented",
    "start": "70600",
    "end": "72600"
  },
  {
    "text": "programming sure I think um Place",
    "start": "72600",
    "end": "74960"
  },
  {
    "text": "oriented programming came up around the",
    "start": "74960",
    "end": "77280"
  },
  {
    "text": "fact that you know when we first started",
    "start": "77280",
    "end": "79159"
  },
  {
    "text": "defining programming languages and",
    "start": "79159",
    "end": "80640"
  },
  {
    "text": "databases computers were really small",
    "start": "80640",
    "end": "83000"
  },
  {
    "text": "and we had to deal with memory and",
    "start": "83000",
    "end": "84640"
  },
  {
    "text": "storage explicitly and we had very",
    "start": "84640",
    "end": "87520"
  },
  {
    "text": "limited resources and so we had to had",
    "start": "87520",
    "end": "89439"
  },
  {
    "text": "to use uh use them as places very",
    "start": "89439",
    "end": "93040"
  },
  {
    "text": "specifically and then we developed",
    "start": "93040",
    "end": "94479"
  },
  {
    "text": "abstractions so that we wouldn't be",
    "start": "94479",
    "end": "95680"
  },
  {
    "text": "touching memory addresses and dis",
    "start": "95680",
    "end": "97360"
  },
  {
    "text": "sectors anymore but those abstractions",
    "start": "97360",
    "end": "99640"
  },
  {
    "text": "weren't really about information they",
    "start": "99640",
    "end": "101759"
  },
  {
    "text": "were about keeping us from touching",
    "start": "101759",
    "end": "103680"
  },
  {
    "text": "memory addresses in this uh sectors",
    "start": "103680",
    "end": "106360"
  },
  {
    "text": "which is which are places uh but that",
    "start": "106360",
    "end": "108920"
  },
  {
    "text": "the challenges we face right now uh are",
    "start": "108920",
    "end": "111520"
  },
  {
    "text": "writing information systems that really",
    "start": "111520",
    "end": "113759"
  },
  {
    "text": "do need to maintain information and",
    "start": "113759",
    "end": "115840"
  },
  {
    "text": "facts and really all of the facts and um",
    "start": "115840",
    "end": "119119"
  },
  {
    "text": "so the biggest fundamental difference is",
    "start": "119119",
    "end": "121240"
  },
  {
    "text": "uh uh in a with a place new information",
    "start": "121240",
    "end": "124840"
  },
  {
    "text": "replaces the old and with values new",
    "start": "124840",
    "end": "128160"
  },
  {
    "text": "information requires new storage new",
    "start": "128160",
    "end": "130119"
  },
  {
    "text": "space yeah and you don't change things",
    "start": "130120",
    "end": "132440"
  },
  {
    "text": "you don't change things and and in your",
    "start": "132440",
    "end": "134120"
  },
  {
    "text": "talk at you know several points and one",
    "start": "134120",
    "end": "136360"
  },
  {
    "text": "is does this Mak sense in the local",
    "start": "136360",
    "end": "138239"
  },
  {
    "text": "process it makes sense between processes",
    "start": "138239",
    "end": "140560"
  },
  {
    "text": "community in different systems and it",
    "start": "140560",
    "end": "142560"
  },
  {
    "text": "makes sense in storage yes so if we just",
    "start": "142560",
    "end": "144760"
  },
  {
    "text": "focus on the iness thing and obviously",
    "start": "144760",
    "end": "148239"
  },
  {
    "text": "uh lot of your work has been",
    "start": "148239",
    "end": "150560"
  },
  {
    "text": "uh you know inspired by closure and then",
    "start": "150560",
    "end": "152800"
  },
  {
    "text": "moving back into closure so how does",
    "start": "152800",
    "end": "154680"
  },
  {
    "text": "closure support value oriented",
    "start": "154680",
    "end": "156440"
  },
  {
    "text": "programming uh closure is pretty much",
    "start": "156440",
    "end": "158480"
  },
  {
    "text": "about value warranted programming uh you",
    "start": "158480",
    "end": "160599"
  },
  {
    "text": "know I think uh a couple of things very",
    "start": "160599",
    "end": "162280"
  },
  {
    "text": "critically one is all the core data",
    "start": "162280",
    "end": "164319"
  },
  {
    "text": "structures are immutable uh so right",
    "start": "164319",
    "end": "166959"
  },
  {
    "text": "away we we get that part um in addition",
    "start": "166959",
    "end": "169920"
  },
  {
    "text": "all of the collections are also",
    "start": "169920",
    "end": "171400"
  },
  {
    "text": "immutable and efficiently so because",
    "start": "171400",
    "end": "173560"
  },
  {
    "text": "they use persistent data",
    "start": "173560",
    "end": "175159"
  },
  {
    "text": "structures and uh so that that gives you",
    "start": "175159",
    "end": "177959"
  },
  {
    "text": "sort of a foundation um",
    "start": "177959",
    "end": "180400"
  },
  {
    "text": "for you value oriented",
    "start": "180400",
    "end": "183599"
  },
  {
    "text": "programming and I think that's the yeah",
    "start": "183599",
    "end": "186640"
  },
  {
    "text": "so that's the start so one of the",
    "start": "186640",
    "end": "188159"
  },
  {
    "text": "questions that may po people say when",
    "start": "188159",
    "end": "189840"
  },
  {
    "text": "they hear about all this this how can it",
    "start": "189840",
    "end": "191519"
  },
  {
    "text": "be efficient right how can you have all",
    "start": "191519",
    "end": "193799"
  },
  {
    "text": "these mutable things and you're not",
    "start": "193799",
    "end": "195720"
  },
  {
    "text": "you're not changing them you're making",
    "start": "195720",
    "end": "197120"
  },
  {
    "text": "new versions so you think about copying",
    "start": "197120",
    "end": "199519"
  },
  {
    "text": "and stuff like that so right so how does",
    "start": "199519",
    "end": "201560"
  },
  {
    "text": "it work inside of closure uh well in any",
    "start": "201560",
    "end": "204200"
  },
  {
    "text": "functional language that has persistent",
    "start": "204200",
    "end": "205640"
  },
  {
    "text": "data structures it it basically the",
    "start": "205640",
    "end": "207480"
  },
  {
    "text": "answer and the future of program is",
    "start": "207480",
    "end": "210280"
  },
  {
    "text": "trees the tree data structure is sort of",
    "start": "210280",
    "end": "213239"
  },
  {
    "text": "the underpinnings of efficient immutable",
    "start": "213239",
    "end": "215519"
  },
  {
    "text": "data structures uh so what happens is",
    "start": "215519",
    "end": "218480"
  },
  {
    "text": "that a a new version of a data structure",
    "start": "218480",
    "end": "220760"
  },
  {
    "text": "really shares a lot of structure with",
    "start": "220760",
    "end": "222720"
  },
  {
    "text": "the old because they're trees you only",
    "start": "222720",
    "end": "224720"
  },
  {
    "text": "have to modify a few nodes and then the",
    "start": "224720",
    "end": "226480"
  },
  {
    "text": "rest of the nodes can be shared and that",
    "start": "226480",
    "end": "228439"
  },
  {
    "text": "means that new versions are are",
    "start": "228439",
    "end": "230840"
  },
  {
    "text": "efficient um the other key thing we're",
    "start": "230840",
    "end": "233400"
  },
  {
    "text": "finding about trees is that that that",
    "start": "233400",
    "end": "236159"
  },
  {
    "text": "structure it's also what we're going to",
    "start": "236159",
    "end": "237840"
  },
  {
    "text": "need to support parallelism MH moving",
    "start": "237840",
    "end": "240040"
  },
  {
    "text": "forward so you know tree oriented",
    "start": "240040",
    "end": "241879"
  },
  {
    "text": "programming is kind of the you know the",
    "start": "241879",
    "end": "244200"
  },
  {
    "text": "future yeah and paralysis is also where",
    "start": "244200",
    "end": "246799"
  },
  {
    "text": "I want to move to because you're not",
    "start": "246799",
    "end": "248959"
  },
  {
    "text": "maybe the world's most frequent blogger",
    "start": "248959",
    "end": "251200"
  },
  {
    "text": "but I noted that within the last month",
    "start": "251200",
    "end": "254040"
  },
  {
    "text": "you made new two new blog post is like a",
    "start": "254040",
    "end": "256959"
  },
  {
    "text": "bit a bit rare and those were about A",
    "start": "256959",
    "end": "259959"
  },
  {
    "text": "New Concept which is called reduces mhm",
    "start": "259959",
    "end": "262960"
  },
  {
    "text": "and how does that relate to to closest",
    "start": "262960",
    "end": "264960"
  },
  {
    "text": "data structures and this notion of",
    "start": "264960",
    "end": "267840"
  },
  {
    "text": "values so uh uses are sort of orthogonal",
    "start": "267840",
    "end": "271240"
  },
  {
    "text": "I mean I guess the one of the other",
    "start": "271240",
    "end": "272320"
  },
  {
    "text": "points about closure um being a value",
    "start": "272320",
    "end": "274919"
  },
  {
    "text": "oriented programming language is that it",
    "start": "274919",
    "end": "276440"
  },
  {
    "text": "keeps the um functions out of the values",
    "start": "276440",
    "end": "279120"
  },
  {
    "text": "so you know so you apply functions to",
    "start": "279120",
    "end": "280919"
  },
  {
    "text": "values and they're sort of orthogonal to",
    "start": "280919",
    "end": "282560"
  },
  {
    "text": "each other and so uh reducers is",
    "start": "282560",
    "end": "285720"
  },
  {
    "text": "actually mostly about the function side",
    "start": "285720",
    "end": "287720"
  },
  {
    "text": "of things you know how do you",
    "start": "287720",
    "end": "290160"
  },
  {
    "text": "um uh how do you map a function across a",
    "start": "290160",
    "end": "293720"
  },
  {
    "text": "collection how do you filter a",
    "start": "293720",
    "end": "295240"
  },
  {
    "text": "collection you know filter values out of",
    "start": "295240",
    "end": "296639"
  },
  {
    "text": "a collection and so the reducers",
    "start": "296639",
    "end": "299039"
  },
  {
    "text": "framework is a way of um doing those",
    "start": "299039",
    "end": "302560"
  },
  {
    "text": "things by sort of specifying the recipes",
    "start": "302560",
    "end": "304639"
  },
  {
    "text": "for doing them and not actually",
    "start": "304639",
    "end": "306000"
  },
  {
    "text": "physically accomplishing them until you",
    "start": "306000",
    "end": "308600"
  },
  {
    "text": "really need a realized result so you can",
    "start": "308600",
    "end": "311600"
  },
  {
    "text": "say of a collection I'd like to have",
    "start": "311600",
    "end": "313039"
  },
  {
    "text": "this collection where every number was",
    "start": "313039",
    "end": "314919"
  },
  {
    "text": "incremented or only the even numbers",
    "start": "314919",
    "end": "316840"
  },
  {
    "text": "were kept um and that actually doesn't",
    "start": "316840",
    "end": "319520"
  },
  {
    "text": "do any work when you say that sort of",
    "start": "319520",
    "end": "321120"
  },
  {
    "text": "gives you the recipe for a collection",
    "start": "321120",
    "end": "322520"
  },
  {
    "text": "that has every number incremented and",
    "start": "322520",
    "end": "324479"
  },
  {
    "text": "the even number is removed um and then",
    "start": "324479",
    "end": "327120"
  },
  {
    "text": "you wait for what what's called a",
    "start": "327120",
    "end": "328759"
  },
  {
    "text": "reducing oper a to do that work and that",
    "start": "328759",
    "end": "331840"
  },
  {
    "text": "means that all those tasks can be",
    "start": "331840",
    "end": "334120"
  },
  {
    "text": "combined um so if in the end you wanted",
    "start": "334120",
    "end": "336520"
  },
  {
    "text": "to take that collection of incremented",
    "start": "336520",
    "end": "338360"
  },
  {
    "text": "even numbers and add them all together",
    "start": "338360",
    "end": "341600"
  },
  {
    "text": "um that would be reducing operation to",
    "start": "341600",
    "end": "343600"
  },
  {
    "text": "to add them all together and then only",
    "start": "343600",
    "end": "345039"
  },
  {
    "text": "when you were adding them all together",
    "start": "345039",
    "end": "346720"
  },
  {
    "text": "would the filtering and the incrementing",
    "start": "346720",
    "end": "348680"
  },
  {
    "text": "happen um so that's an an efficiency",
    "start": "348680",
    "end": "351800"
  },
  {
    "text": "advantage over other techniques for",
    "start": "351800",
    "end": "354080"
  },
  {
    "text": "doing that that have other properties",
    "start": "354080",
    "end": "356160"
  },
  {
    "text": "but when you don't need those properties",
    "start": "356160",
    "end": "358039"
  },
  {
    "text": "like laziness um would be a property you",
    "start": "358039",
    "end": "360199"
  },
  {
    "text": "trade off to get take this other",
    "start": "360199",
    "end": "361880"
  },
  {
    "text": "approach sure but the critical thing",
    "start": "361880",
    "end": "364039"
  },
  {
    "text": "about the way the library does it is",
    "start": "364039",
    "end": "365840"
  },
  {
    "text": "that by defining these recipes in a way",
    "start": "365840",
    "end": "368560"
  },
  {
    "text": "that's independent of both the",
    "start": "368560",
    "end": "370520"
  },
  {
    "text": "representation of the data structure and",
    "start": "370520",
    "end": "372960"
  },
  {
    "text": "the Order of Operations uh it means that",
    "start": "372960",
    "end": "375919"
  },
  {
    "text": "they can be parallelized and so the",
    "start": "375919",
    "end": "378360"
  },
  {
    "text": "reduces framework both gives you a new",
    "start": "378360",
    "end": "380560"
  },
  {
    "text": "way to define things like mapping and",
    "start": "380560",
    "end": "382240"
  },
  {
    "text": "filtering and um that way is subject to",
    "start": "382240",
    "end": "386360"
  },
  {
    "text": "parallelization and so there's a way to",
    "start": "386360",
    "end": "388319"
  },
  {
    "text": "sort of say uh fold instead of reduce",
    "start": "388319",
    "end": "391800"
  },
  {
    "text": "you could say fold and that process will",
    "start": "391800",
    "end": "394440"
  },
  {
    "text": "happen in parallel by a a fork",
    "start": "394440",
    "end": "397280"
  },
  {
    "text": "joint Tech before we get I want to get",
    "start": "397280",
    "end": "400080"
  },
  {
    "text": "into that but just before we get into",
    "start": "400080",
    "end": "401479"
  },
  {
    "text": "that I'd like to so it seems to me that",
    "start": "401479",
    "end": "403919"
  },
  {
    "text": "um there is this has to be some kind of",
    "start": "403919",
    "end": "405919"
  },
  {
    "text": "relation relationship between reducers",
    "start": "405919",
    "end": "408479"
  },
  {
    "text": "and a notion of laziness because",
    "start": "408479",
    "end": "410479"
  },
  {
    "text": "laziness also seems to be about not",
    "start": "410479",
    "end": "412599"
  },
  {
    "text": "realizing uh you know interim results uh",
    "start": "412599",
    "end": "416280"
  },
  {
    "text": "and uh not producing anything before you",
    "start": "416280",
    "end": "418400"
  },
  {
    "text": "actually need it right so is there some",
    "start": "418400",
    "end": "420680"
  },
  {
    "text": "way to compare those two approaches this",
    "start": "420680",
    "end": "422840"
  },
  {
    "text": "this so yes um both both delay the work",
    "start": "422840",
    "end": "426680"
  },
  {
    "text": "until some later time um uh laziness",
    "start": "426680",
    "end": "430520"
  },
  {
    "text": "will basically do the operations one at",
    "start": "430520",
    "end": "432919"
  },
  {
    "text": "a time and um it's oriented towards a",
    "start": "432919",
    "end": "435840"
  },
  {
    "text": "sequential U path right through the",
    "start": "435840",
    "end": "438240"
  },
  {
    "text": "collection so when you define map or",
    "start": "438240",
    "end": "440960"
  },
  {
    "text": "filter as a lazy function um it is kind",
    "start": "440960",
    "end": "444199"
  },
  {
    "text": "of a recipe but it's a recipe that",
    "start": "444199",
    "end": "446680"
  },
  {
    "text": "incorporates the fact that you intend to",
    "start": "446680",
    "end": "448879"
  },
  {
    "text": "consume results one at a time from the",
    "start": "448879",
    "end": "451160"
  },
  {
    "text": "beginning and",
    "start": "451160",
    "end": "453639"
  },
  {
    "text": "reducers um abstract actually do less",
    "start": "453639",
    "end": "457759"
  },
  {
    "text": "you know they they they presume less and",
    "start": "457759",
    "end": "459840"
  },
  {
    "text": "they and they promise less um they don't",
    "start": "459840",
    "end": "463599"
  },
  {
    "text": "presume that the the U processing will",
    "start": "463599",
    "end": "466560"
  },
  {
    "text": "happen sequentially and they",
    "start": "466560",
    "end": "468159"
  },
  {
    "text": "specifically say um they have nothing",
    "start": "468159",
    "end": "470080"
  },
  {
    "text": "about them that presumes that and they",
    "start": "470080",
    "end": "471440"
  },
  {
    "text": "also don't require that the collection",
    "start": "471440",
    "end": "473840"
  },
  {
    "text": "meet the processing through some sort of",
    "start": "473840",
    "end": "476440"
  },
  {
    "text": "sequential interface they they actually",
    "start": "476440",
    "end": "478800"
  },
  {
    "text": "let the colle ction do the navigation so",
    "start": "478800",
    "end": "481680"
  },
  {
    "text": "by being independent of the order of",
    "start": "481680",
    "end": "483479"
  },
  {
    "text": "operations and the collection navigation",
    "start": "483479",
    "end": "486599"
  },
  {
    "text": "um they really specify less and by",
    "start": "486599",
    "end": "488479"
  },
  {
    "text": "specifying less they're subject to",
    "start": "488479",
    "end": "490280"
  },
  {
    "text": "parallelization on the other hand a",
    "start": "490280",
    "end": "492360"
  },
  {
    "text": "parallelized reduce is essentially an",
    "start": "492360",
    "end": "495120"
  },
  {
    "text": "eager operation when it actually does",
    "start": "495120",
    "end": "497199"
  },
  {
    "text": "happen it happens on everything so a",
    "start": "497199",
    "end": "499840"
  },
  {
    "text": "lazy um computation can be partially",
    "start": "499840",
    "end": "502960"
  },
  {
    "text": "consumed but a reduction is always the",
    "start": "502960",
    "end": "505400"
  },
  {
    "text": "whole thing okay so now it seems they're",
    "start": "505400",
    "end": "507919"
  },
  {
    "text": "compliments to each other yeah right",
    "start": "507919",
    "end": "510000"
  },
  {
    "text": "um so now to me it seems that closure",
    "start": "510000",
    "end": "512360"
  },
  {
    "text": "will have S of two sets of similarly",
    "start": "512360",
    "end": "515039"
  },
  {
    "text": "named operations map one and map two or",
    "start": "515039",
    "end": "517719"
  },
  {
    "text": "map uh map what you I don't know what",
    "start": "517719",
    "end": "519760"
  },
  {
    "text": "it's called map and you know reducers",
    "start": "519760",
    "end": "521279"
  },
  {
    "text": "map orap map yeah our map okay so is is",
    "start": "521279",
    "end": "524800"
  },
  {
    "text": "one going to be Primary in some sense is",
    "start": "524800",
    "end": "526839"
  },
  {
    "text": "is are you going to um how do you",
    "start": "526839",
    "end": "528600"
  },
  {
    "text": "envision the usage of these reducers",
    "start": "528600",
    "end": "530440"
  },
  {
    "text": "framework is an optimization or um as",
    "start": "530440",
    "end": "534160"
  },
  {
    "text": "the primary map",
    "start": "534160",
    "end": "536000"
  },
  {
    "text": "enclosure so uh you know they are",
    "start": "536000",
    "end": "538160"
  },
  {
    "text": "complimentary I think there are",
    "start": "538160",
    "end": "539480"
  },
  {
    "text": "definitely distinct use cases certainly",
    "start": "539480",
    "end": "541959"
  },
  {
    "text": "if you if you intended to consume the",
    "start": "541959",
    "end": "543880"
  },
  {
    "text": "entire result then it's clear that",
    "start": "543880",
    "end": "546480"
  },
  {
    "text": "producers are an optimization over",
    "start": "546480",
    "end": "548640"
  },
  {
    "text": "laziness because you're not actually",
    "start": "548640",
    "end": "549880"
  },
  {
    "text": "leveraging laziness then right you're",
    "start": "549880",
    "end": "551320"
  },
  {
    "text": "going to consume the entire result and",
    "start": "551320",
    "end": "553480"
  },
  {
    "text": "uh and it fits in memory let's say the",
    "start": "553480",
    "end": "555040"
  },
  {
    "text": "other criteria that would might drive",
    "start": "555040",
    "end": "556600"
  },
  {
    "text": "you to laziness if it didn't um if that",
    "start": "556600",
    "end": "558959"
  },
  {
    "text": "was if all that is the same then reduces",
    "start": "558959",
    "end": "561240"
  },
  {
    "text": "or an optimization of course reducing",
    "start": "561240",
    "end": "563519"
  },
  {
    "text": "and parallelization is always kind of an",
    "start": "563519",
    "end": "565320"
  },
  {
    "text": "optimization um but I think it's sort of",
    "start": "565320",
    "end": "567959"
  },
  {
    "text": "fundamental that it be available to",
    "start": "567959",
    "end": "570160"
  },
  {
    "text": "programs because otherwise they won't",
    "start": "570160",
    "end": "571600"
  },
  {
    "text": "get faster when you buy new computers um",
    "start": "571600",
    "end": "575279"
  },
  {
    "text": "uh so it was very important in the",
    "start": "575279",
    "end": "577480"
  },
  {
    "text": "design of reducers that the resulting",
    "start": "577480",
    "end": "579839"
  },
  {
    "text": "programs have the same shape right um",
    "start": "579839",
    "end": "582839"
  },
  {
    "text": "that that's where all the you know",
    "start": "582839",
    "end": "584880"
  },
  {
    "text": "that's where the big value proposition",
    "start": "584880",
    "end": "586480"
  },
  {
    "text": "is in addition to access to parallelism",
    "start": "586480",
    "end": "588440"
  },
  {
    "text": "is the fact that from a logical",
    "start": "588440",
    "end": "590519"
  },
  {
    "text": "standpoint what you've asked to happen",
    "start": "590519",
    "end": "591959"
  },
  {
    "text": "is math this function over filtering",
    "start": "591959",
    "end": "594720"
  },
  {
    "text": "this collection with you know this this",
    "start": "594720",
    "end": "596640"
  },
  {
    "text": "Criterion and uh uh",
    "start": "596640",
    "end": "600120"
  },
  {
    "text": "that is the same logical operation in",
    "start": "600120",
    "end": "602040"
  },
  {
    "text": "either case and so that and it has the",
    "start": "602040",
    "end": "603720"
  },
  {
    "text": "same shape so that's what's really",
    "start": "603720",
    "end": "605200"
  },
  {
    "text": "important because then um you can make",
    "start": "605200",
    "end": "607399"
  },
  {
    "text": "these other decisions orthogonally right",
    "start": "607399",
    "end": "610040"
  },
  {
    "text": "I am I intend to consume the results",
    "start": "610040",
    "end": "611600"
  },
  {
    "text": "incrementally and possibly not all of",
    "start": "611600",
    "end": "613200"
  },
  {
    "text": "them that make brings you towards",
    "start": "613200",
    "end": "615160"
  },
  {
    "text": "laziness or um I know my sources or",
    "start": "615160",
    "end": "618120"
  },
  {
    "text": "results won't fit in memory so I need to",
    "start": "618120",
    "end": "620000"
  },
  {
    "text": "use laziness or those aren't true and",
    "start": "620000",
    "end": "622800"
  },
  {
    "text": "therefore I can choose the other but my",
    "start": "622800",
    "end": "624680"
  },
  {
    "text": "program won't structurally change so",
    "start": "624680",
    "end": "626959"
  },
  {
    "text": "it's not like a bifurcation of the world",
    "start": "626959",
    "end": "628880"
  },
  {
    "text": "like you have to make this critical",
    "start": "628880",
    "end": "630320"
  },
  {
    "text": "decision early on yeah um it's not like",
    "start": "630320",
    "end": "632839"
  },
  {
    "text": "that at all so I think that both will be",
    "start": "632839",
    "end": "635440"
  },
  {
    "text": "used I think they truly are",
    "start": "635440",
    "end": "637120"
  },
  {
    "text": "complimentary and switching between them",
    "start": "637120",
    "end": "639079"
  },
  {
    "text": "will be trivial yeah it's not like",
    "start": "639079",
    "end": "640720"
  },
  {
    "text": "you're going to replace core map with",
    "start": "640720",
    "end": "643040"
  },
  {
    "text": "our our map in any sense I mean no no no",
    "start": "643040",
    "end": "645920"
  },
  {
    "text": "no I mean people might alas them in a",
    "start": "645920",
    "end": "647560"
  },
  {
    "text": "name space because they're just they",
    "start": "647560",
    "end": "649320"
  },
  {
    "text": "want that all the time but yeah so that",
    "start": "649320",
    "end": "651600"
  },
  {
    "text": "I means from a practical point of view",
    "start": "651600",
    "end": "653800"
  },
  {
    "text": "um that would be uh just replacing names",
    "start": "653800",
    "end": "656600"
  },
  {
    "text": "space and your code would run exactly",
    "start": "656600",
    "end": "658480"
  },
  {
    "text": "the same corre maybe just faster yes so",
    "start": "658480",
    "end": "660680"
  },
  {
    "text": "do you have any sense of how fast if you",
    "start": "660680",
    "end": "662360"
  },
  {
    "text": "just keep it to sequential and not",
    "start": "662360",
    "end": "663800"
  },
  {
    "text": "introducing parallelism do you have a",
    "start": "663800",
    "end": "665839"
  },
  {
    "text": "less allocation yes there's",
    "start": "665839",
    "end": "667399"
  },
  {
    "text": "substantially less allocation right and",
    "start": "667399",
    "end": "669760"
  },
  {
    "text": "then so do you have any of experience",
    "start": "669760",
    "end": "673600"
  },
  {
    "text": "how how how does it it depends on how",
    "start": "673600",
    "end": "675880"
  },
  {
    "text": "big your work is per step right so um",
    "start": "675880",
    "end": "678440"
  },
  {
    "text": "allocation has some overhead if you had",
    "start": "678440",
    "end": "680040"
  },
  {
    "text": "a big job to do per step then the",
    "start": "680040",
    "end": "682279"
  },
  {
    "text": "allocation as a percentage of the whole",
    "start": "682279",
    "end": "684040"
  },
  {
    "text": "work is small and you actually don't",
    "start": "684040",
    "end": "685600"
  },
  {
    "text": "care um but if you had very small job",
    "start": "685600",
    "end": "688320"
  },
  {
    "text": "for Stu like in like Plus or ink right",
    "start": "688320",
    "end": "691240"
  },
  {
    "text": "then um you're",
    "start": "691240",
    "end": "692399"
  },
  {
    "text": "dominated by the allocation costs and",
    "start": "692399",
    "end": "695760"
  },
  {
    "text": "then each step of that um of a",
    "start": "695760",
    "end": "698000"
  },
  {
    "text": "multi-operation like filter of map of",
    "start": "698000",
    "end": "701120"
  },
  {
    "text": "something um adds an allocation to the",
    "start": "701120",
    "end": "703760"
  },
  {
    "text": "chain per step so you can see 2 three 4X",
    "start": "703760",
    "end": "708360"
  },
  {
    "text": "depending on how um how deep that was",
    "start": "708360",
    "end": "711440"
  },
  {
    "text": "nested between um just sequential",
    "start": "711440",
    "end": "715680"
  },
  {
    "text": "between reducers and and uh and laziness",
    "start": "715680",
    "end": "719440"
  },
  {
    "text": "okay that sounds great it's big yeah it",
    "start": "719440",
    "end": "721720"
  },
  {
    "text": "it will be big and I guess also because",
    "start": "721720",
    "end": "723920"
  },
  {
    "text": "people that are doing performance",
    "start": "723920",
    "end": "725399"
  },
  {
    "text": "optimiz code are always looking at",
    "start": "725399",
    "end": "727440"
  },
  {
    "text": "allocations and trying to R those okay",
    "start": "727440",
    "end": "729760"
  },
  {
    "text": "so let's finally talk about parallelism",
    "start": "729760",
    "end": "732000"
  },
  {
    "text": "okay so you mentioned for join yes can",
    "start": "732000",
    "end": "733880"
  },
  {
    "text": "you say a bit about how Fork join works",
    "start": "733880",
    "end": "735920"
  },
  {
    "text": "for people who don't know Fork join sure",
    "start": "735920",
    "end": "738639"
  },
  {
    "text": "um the idea behind Fork join is that you",
    "start": "738639",
    "end": "741519"
  },
  {
    "text": "want to do some operation uh it's one",
    "start": "741519",
    "end": "744839"
  },
  {
    "text": "it's one piece of work that you want to",
    "start": "744839",
    "end": "746079"
  },
  {
    "text": "do so we're really talking about",
    "start": "746079",
    "end": "747079"
  },
  {
    "text": "parallelism here and not concr right so",
    "start": "747079",
    "end": "749880"
  },
  {
    "text": "it's parm you have one job to do and you",
    "start": "749880",
    "end": "751480"
  },
  {
    "text": "want to leverage that you have more than",
    "start": "751480",
    "end": "752839"
  },
  {
    "text": "one processor by dividing it up and Fork",
    "start": "752839",
    "end": "755240"
  },
  {
    "text": "join is literally divide and conquer",
    "start": "755240",
    "end": "757959"
  },
  {
    "text": "kind of strategy um there's a library",
    "start": "757959",
    "end": "760680"
  },
  {
    "text": "for the jbm called Fork join U it's a",
    "start": "760680",
    "end": "763560"
  },
  {
    "text": "framework they call it and um it",
    "start": "763560",
    "end": "765680"
  },
  {
    "text": "implements uh a strategy of uh setting",
    "start": "765680",
    "end": "769079"
  },
  {
    "text": "up a pool of workers that will do the",
    "start": "769079",
    "end": "772120"
  },
  {
    "text": "jobs and um your program needs to just",
    "start": "772120",
    "end": "775160"
  },
  {
    "text": "feed at work by taking the work to do",
    "start": "775160",
    "end": "777720"
  },
  {
    "text": "dividing it in half right submitting",
    "start": "777720",
    "end": "779600"
  },
  {
    "text": "each half is a job and and then",
    "start": "779600",
    "end": "781199"
  },
  {
    "text": "recursively those halves will divide",
    "start": "781199",
    "end": "782880"
  },
  {
    "text": "themselves in half until they get small",
    "start": "782880",
    "end": "784320"
  },
  {
    "text": "enough that you say there's no point in",
    "start": "784320",
    "end": "786079"
  },
  {
    "text": "dividing this I'll just do this",
    "start": "786079",
    "end": "788000"
  },
  {
    "text": "sequentially and so that that forms this",
    "start": "788000",
    "end": "790480"
  },
  {
    "text": "big pile of work for the que and then",
    "start": "790480",
    "end": "793600"
  },
  {
    "text": "the Q uses this work cealing approach to",
    "start": "793600",
    "end": "797079"
  },
  {
    "text": "making sure that as uh as threads become",
    "start": "797079",
    "end": "800360"
  },
  {
    "text": "idle they you know they've done what",
    "start": "800360",
    "end": "801600"
  },
  {
    "text": "they're supposed to do they hop on and",
    "start": "801600",
    "end": "803440"
  },
  {
    "text": "steal work that was allocated to other",
    "start": "803440",
    "end": "805680"
  },
  {
    "text": "threads so that collectively they can",
    "start": "805680",
    "end": "807920"
  },
  {
    "text": "get the entire job done and they all run",
    "start": "807920",
    "end": "810160"
  },
  {
    "text": "on Independent threads and U it's a",
    "start": "810160",
    "end": "813320"
  },
  {
    "text": "beautiful way to do parallelism",
    "start": "813320",
    "end": "815079"
  },
  {
    "text": "especially when uh potentially your work",
    "start": "815079",
    "end": "818000"
  },
  {
    "text": "at the leaf level is not uniform so if",
    "start": "818000",
    "end": "821199"
  },
  {
    "text": "you if your work is uniform you could",
    "start": "821199",
    "end": "822639"
  },
  {
    "text": "almost do this yourself what you mean by",
    "start": "822639",
    "end": "824360"
  },
  {
    "text": "work is uniform uh it takes the same",
    "start": "824360",
    "end": "826199"
  },
  {
    "text": "amount of effort to do each sub segment",
    "start": "826199",
    "end": "828240"
  },
  {
    "text": "right okay so if I if I knew that and I",
    "start": "828240",
    "end": "829839"
  },
  {
    "text": "knew I had four cores I could just",
    "start": "829839",
    "end": "831240"
  },
  {
    "text": "divide it up into four jobs and just do",
    "start": "831240",
    "end": "832920"
  },
  {
    "text": "it but if I if some of those sub jobs",
    "start": "832920",
    "end": "835320"
  },
  {
    "text": "might take longer than others then one",
    "start": "835320",
    "end": "836720"
  },
  {
    "text": "guy would finish and he'd just have",
    "start": "836720",
    "end": "837959"
  },
  {
    "text": "nothing to do and work stealing makes",
    "start": "837959",
    "end": "840680"
  },
  {
    "text": "means that even if you have non-uniform",
    "start": "840680",
    "end": "842399"
  },
  {
    "text": "work or not uh your tree doesn't have",
    "start": "842399",
    "end": "845040"
  },
  {
    "text": "the same depth sure or some jobs are",
    "start": "845040",
    "end": "846959"
  },
  {
    "text": "bigger and some you know so uh the nice",
    "start": "846959",
    "end": "849639"
  },
  {
    "text": "thing about Fork joint is you're",
    "start": "849639",
    "end": "851199"
  },
  {
    "text": "isolated from needing to worry about",
    "start": "851199",
    "end": "853000"
  },
  {
    "text": "that um sort of it composes well yeah",
    "start": "853000",
    "end": "856839"
  },
  {
    "text": "and so yeah and and you said that that",
    "start": "856839",
    "end": "858880"
  },
  {
    "text": "you mentioned that the the tree being",
    "start": "858880",
    "end": "861040"
  },
  {
    "text": "having a particular shape that I guess",
    "start": "861040",
    "end": "862800"
  },
  {
    "text": "that has the relation to the structure",
    "start": "862800",
    "end": "864320"
  },
  {
    "text": "of right so either you have a tree or",
    "start": "864320",
    "end": "866240"
  },
  {
    "text": "you're going to be forced to fabricate a",
    "start": "866240",
    "end": "868480"
  },
  {
    "text": "tree in order to feed Fork joint you",
    "start": "868480",
    "end": "870480"
  },
  {
    "text": "always have one yes the closure data",
    "start": "870480",
    "end": "872759"
  },
  {
    "text": "structures are all trees underneath so",
    "start": "872759",
    "end": "875199"
  },
  {
    "text": "this means that um so can you repeat you",
    "start": "875199",
    "end": "878240"
  },
  {
    "text": "said you mentioned it earlier but can",
    "start": "878240",
    "end": "879399"
  },
  {
    "text": "you repeat how Fork join enters via",
    "start": "879399",
    "end": "882199"
  },
  {
    "text": "reducers library right so the reducers",
    "start": "882199",
    "end": "884480"
  },
  {
    "text": "Library um is about how do you define",
    "start": "884480",
    "end": "887399"
  },
  {
    "text": "the fundamental collection operations",
    "start": "887399",
    "end": "889040"
  },
  {
    "text": "like map and filter in terms of these",
    "start": "889040",
    "end": "891399"
  },
  {
    "text": "transformations of reducing functions",
    "start": "891399",
    "end": "894440"
  },
  {
    "text": "and a reducing function you would use to",
    "start": "894440",
    "end": "896079"
  },
  {
    "text": "reduce you know the traditional closure",
    "start": "896079",
    "end": "897880"
  },
  {
    "text": "reduces sequential process you know",
    "start": "897880",
    "end": "899800"
  },
  {
    "text": "start with the first two things and add",
    "start": "899800",
    "end": "901959"
  },
  {
    "text": "them together and then take the result",
    "start": "901959",
    "end": "903279"
  },
  {
    "text": "and add it to the next thing and that's",
    "start": "903279",
    "end": "904680"
  },
  {
    "text": "you know reduce or fold left right uh so",
    "start": "904680",
    "end": "908320"
  },
  {
    "text": "once you've said the way I Define map is",
    "start": "908320",
    "end": "910480"
  },
  {
    "text": "by modifying plus you know in each step",
    "start": "910480",
    "end": "913920"
  },
  {
    "text": "and the way I Define filter is modifying",
    "start": "913920",
    "end": "915680"
  },
  {
    "text": "that in each step then you have this",
    "start": "915680",
    "end": "917480"
  },
  {
    "text": "modified function that you could reduce",
    "start": "917480",
    "end": "920000"
  },
  {
    "text": "with sequentially or you could do what",
    "start": "920000",
    "end": "923000"
  },
  {
    "text": "um the reduces Library calls fold which",
    "start": "923000",
    "end": "925600"
  },
  {
    "text": "is essentially logically like reducing",
    "start": "925600",
    "end": "927959"
  },
  {
    "text": "the collection but it doesn't make that",
    "start": "927959",
    "end": "929839"
  },
  {
    "text": "left to right single past promise it",
    "start": "929839",
    "end": "932360"
  },
  {
    "text": "says we're going to divide the",
    "start": "932360",
    "end": "933720"
  },
  {
    "text": "collection up and do reductions in",
    "start": "933720",
    "end": "936480"
  },
  {
    "text": "parallel on the sub segments yeah and uh",
    "start": "936480",
    "end": "939360"
  },
  {
    "text": "so the the result of a fold is the same",
    "start": "939360",
    "end": "942680"
  },
  {
    "text": "as the result of a",
    "start": "942680",
    "end": "944040"
  },
  {
    "text": "reduceed um but um but fold makes the um",
    "start": "944040",
    "end": "947959"
  },
  {
    "text": "Plumbing of map ruce of of I'm sorry a",
    "start": "947959",
    "end": "951319"
  },
  {
    "text": "fork join aaable uh and sort of",
    "start": "951319",
    "end": "954399"
  },
  {
    "text": "accessible to you because it recognizes",
    "start": "954399",
    "end": "956399"
  },
  {
    "text": "the fact that what you're going to do is",
    "start": "956399",
    "end": "957959"
  },
  {
    "text": "you're going to divide your task up and",
    "start": "957959",
    "end": "959720"
  },
  {
    "text": "then eventually get to the point at the",
    "start": "959720",
    "end": "961639"
  },
  {
    "text": "bottom where you're not going to divide",
    "start": "961639",
    "end": "962880"
  },
  {
    "text": "up anymore and what it says is that",
    "start": "962880",
    "end": "965199"
  },
  {
    "text": "bottom job is actually a traditional",
    "start": "965199",
    "end": "966920"
  },
  {
    "text": "reducing job just it's now just reducing",
    "start": "966920",
    "end": "969040"
  },
  {
    "text": "a subsection and then the results of all",
    "start": "969040",
    "end": "971399"
  },
  {
    "text": "those reductions need to be combined so",
    "start": "971399",
    "end": "974040"
  },
  {
    "text": "unlike reduce which only takes a single",
    "start": "974040",
    "end": "976399"
  },
  {
    "text": "function which is used to do pairwise",
    "start": "976399",
    "end": "978759"
  },
  {
    "text": "operations uh fold takes both a reducing",
    "start": "978759",
    "end": "981720"
  },
  {
    "text": "function which is used to do par wise",
    "start": "981720",
    "end": "983720"
  },
  {
    "text": "operations at the bottom and a combining",
    "start": "983720",
    "end": "985839"
  },
  {
    "text": "function which is used to take those",
    "start": "985839",
    "end": "987440"
  },
  {
    "text": "results and join them together at the",
    "start": "987440",
    "end": "990040"
  },
  {
    "text": "higher parts of the tray to give you a",
    "start": "990040",
    "end": "991600"
  },
  {
    "text": "single result um and so sometimes the",
    "start": "991600",
    "end": "994519"
  },
  {
    "text": "combining function and the reducing",
    "start": "994519",
    "end": "995720"
  },
  {
    "text": "function are the same like with plus",
    "start": "995720",
    "end": "997399"
  },
  {
    "text": "that would be the case and you can leave",
    "start": "997399",
    "end": "998720"
  },
  {
    "text": "the combining function out yeah other",
    "start": "998720",
    "end": "1001279"
  },
  {
    "text": "times you might be building Collections",
    "start": "1001279",
    "end": "1003120"
  },
  {
    "text": "and then wanting to combine them in a",
    "start": "1003120",
    "end": "1004839"
  },
  {
    "text": "particular way um and in which case",
    "start": "1004839",
    "end": "1007120"
  },
  {
    "text": "you'd have a unique a different",
    "start": "1007120",
    "end": "1008240"
  },
  {
    "text": "combining function than you have a",
    "start": "1008240",
    "end": "1009600"
  },
  {
    "text": "reducing function um and so there a",
    "start": "1009600",
    "end": "1012680"
  },
  {
    "text": "functional liary called Fold cat that",
    "start": "1012680",
    "end": "1014440"
  },
  {
    "text": "does that that that that does a",
    "start": "1014440",
    "end": "1016120"
  },
  {
    "text": "reduction that makes a collection at",
    "start": "1016120",
    "end": "1017560"
  },
  {
    "text": "each node and then it just takes those",
    "start": "1017560",
    "end": "1018920"
  },
  {
    "text": "Collections and quickly makes a binary",
    "start": "1018920",
    "end": "1020959"
  },
  {
    "text": "tree out of them without any copying",
    "start": "1020959",
    "end": "1023519"
  },
  {
    "text": "yeah so when would you use that function",
    "start": "1023519",
    "end": "1026038"
  },
  {
    "text": "to have an example of that uh well",
    "start": "1026039",
    "end": "1027720"
  },
  {
    "text": "foldcat is the fastest way to get a",
    "start": "1027720",
    "end": "1029600"
  },
  {
    "text": "finished result that's also a collection",
    "start": "1029600",
    "end": "1031720"
  },
  {
    "text": "right um and of course the resulting",
    "start": "1031720",
    "end": "1034000"
  },
  {
    "text": "collection doesn't have many collection",
    "start": "1034000",
    "end": "1036280"
  },
  {
    "text": "properties for instance it's not",
    "start": "1036280",
    "end": "1037640"
  },
  {
    "text": "actually a vector or a map um but it is",
    "start": "1037640",
    "end": "1040720"
  },
  {
    "text": "itself reducible and foldable and",
    "start": "1040720",
    "end": "1043400"
  },
  {
    "text": "seekable and so that could be just",
    "start": "1043400",
    "end": "1045839"
  },
  {
    "text": "enough to carry it to the next part of",
    "start": "1045839",
    "end": "1047400"
  },
  {
    "text": "your computation but the thing about",
    "start": "1047400",
    "end": "1049720"
  },
  {
    "text": "actual do when you do the fold act the",
    "start": "1049720",
    "end": "1052000"
  },
  {
    "text": "work gets done just like when you call",
    "start": "1052000",
    "end": "1054039"
  },
  {
    "text": "reduce the work gets done so if you want",
    "start": "1054039",
    "end": "1055679"
  },
  {
    "text": "if you need the work to get done for",
    "start": "1055679",
    "end": "1057360"
  },
  {
    "text": "instance maybe the result of your thing",
    "start": "1057360",
    "end": "1059039"
  },
  {
    "text": "takes a large collection and makes it",
    "start": "1059039",
    "end": "1061320"
  },
  {
    "text": "smaller you you want to call Fold cat so",
    "start": "1061320",
    "end": "1063840"
  },
  {
    "text": "that that happens and then you can free",
    "start": "1063840",
    "end": "1065360"
  },
  {
    "text": "up the large collection so okay so",
    "start": "1065360",
    "end": "1068200"
  },
  {
    "text": "what's the status now in the reducers",
    "start": "1068200",
    "end": "1069760"
  },
  {
    "text": "library in closure um it's in it's in",
    "start": "1069760",
    "end": "1072559"
  },
  {
    "text": "the alphas right now so people can try",
    "start": "1072559",
    "end": "1074320"
  },
  {
    "text": "it 15 Alpha 15 Alpha that's right and uh",
    "start": "1074320",
    "end": "1078080"
  },
  {
    "text": "four joint itself um was incorporated in",
    "start": "1078080",
    "end": "1081360"
  },
  {
    "text": "Java 7 and uh the guys who built it",
    "start": "1081360",
    "end": "1084120"
  },
  {
    "text": "dougle and the concurrency group made a",
    "start": "1084120",
    "end": "1086520"
  },
  {
    "text": "library that you can use with Java 6 so",
    "start": "1086520",
    "end": "1088640"
  },
  {
    "text": "it reaches back as far as Java 6 okay so",
    "start": "1088640",
    "end": "1091320"
  },
  {
    "text": "so you have a dependency with Java 6 or",
    "start": "1091320",
    "end": "1093280"
  },
  {
    "text": "you use Java 7 either way you can use it",
    "start": "1093280",
    "end": "1096039"
  },
  {
    "text": "and that's only required for the fold",
    "start": "1096039",
    "end": "1098799"
  },
  {
    "text": "right the rest of the library rest of",
    "start": "1098799",
    "end": "1100760"
  },
  {
    "text": "the library and the design approach so",
    "start": "1100760",
    "end": "1102559"
  },
  {
    "text": "yeah and we have a lot of the collection",
    "start": "1102559",
    "end": "1104440"
  },
  {
    "text": "functions done and you know we have",
    "start": "1104440",
    "end": "1105840"
  },
  {
    "text": "people submitting some of the others and",
    "start": "1105840",
    "end": "1107520"
  },
  {
    "text": "so it's great it's",
    "start": "1107520",
    "end": "1109159"
  },
  {
    "text": "okay and um so that's closure do you",
    "start": "1109159",
    "end": "1112120"
  },
  {
    "text": "have any sort of Secrets you want to",
    "start": "1112120",
    "end": "1113880"
  },
  {
    "text": "unve on what what else might be in",
    "start": "1113880",
    "end": "1115919"
  },
  {
    "text": "closure five no it's completely I'm not",
    "start": "1115919",
    "end": "1119080"
  },
  {
    "text": "talking things I",
    "start": "1119080",
    "end": "1120799"
  },
  {
    "text": "haven't no you learned the lessons of",
    "start": "1120799",
    "end": "1123080"
  },
  {
    "text": "the past yes that's right okay I'm",
    "start": "1123080",
    "end": "1124919"
  },
  {
    "text": "looking forward to using uh this and uh",
    "start": "1124919",
    "end": "1127320"
  },
  {
    "text": "and deeping you know digging deeper into",
    "start": "1127320",
    "end": "1129320"
  },
  {
    "text": "it and just want to thank you for doing",
    "start": "1129320",
    "end": "1131159"
  },
  {
    "text": "this interview sure thanks for having me",
    "start": "1131159",
    "end": "1132960"
  },
  {
    "text": "you're welcome all",
    "start": "1132960",
    "end": "1135679"
  },
  {
    "text": "right",
    "start": "1137320",
    "end": "1140320"
  }
]