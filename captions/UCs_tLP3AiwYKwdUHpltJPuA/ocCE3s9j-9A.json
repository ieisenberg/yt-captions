[
  {
    "start": "0",
    "end": "132000"
  },
  {
    "text": "[Music]",
    "start": "990",
    "end": "7859"
  },
  {
    "text": "just a few words about myself I'm the head trainer at instill I was a",
    "start": "13590",
    "end": "19260"
  },
  {
    "text": "full-time software developer for five six years and then the opportunity came to give this a go and I thought what the",
    "start": "19260",
    "end": "26340"
  },
  {
    "text": "hell I'll try it and that was about 15 years ago now so I started out teaching C++ to see people then Java to C++",
    "start": "26340",
    "end": "34440"
  },
  {
    "text": "people then c-sharp to Java people these days we teach everything to everybody",
    "start": "34440",
    "end": "39450"
  },
  {
    "text": "because we all work in an industry that cannot make up its mind yeah but for the past few years we've specialized in the",
    "start": "39450",
    "end": "46410"
  },
  {
    "text": "more modern jvm languages Scala and especially Kotlin and developing",
    "start": "46410",
    "end": "51720"
  },
  {
    "text": "enterprise apps with spring boot yep so that's me Eamonn do you want to introduce yourself yeah I've been doing",
    "start": "51720",
    "end": "58800"
  },
  {
    "text": "this training gig for a little bit shorter time than Garth but it's three and a half years and before that I had",
    "start": "58800",
    "end": "64978"
  },
  {
    "text": "lots of silly titles like researcher and tech lead an architect and all these sorts of things basically I like writing",
    "start": "64979",
    "end": "70500"
  },
  {
    "text": "code and I like teaching people how to write better code that was a big part of my job when I was an architect and then",
    "start": "70500",
    "end": "78270"
  },
  {
    "text": "yeah in still is a pretty famous little company in Ireland where we're from and",
    "start": "78270",
    "end": "85259"
  },
  {
    "text": "I just wanted to go and work for like really passionate people and we've",
    "start": "85259",
    "end": "94069"
  },
  {
    "text": "instilled our a software development company based in Belfast we do software development training and consultancy the",
    "start": "102619",
    "end": "110579"
  },
  {
    "text": "training and consultancy is only about 10 or 15 percent of the business yeah so we have about 30 full-time software",
    "start": "110579",
    "end": "117179"
  },
  {
    "text": "developers working on a range of projects but a substantial number of the projects are based around Android and",
    "start": "117179",
    "end": "126840"
  },
  {
    "text": "this clicker is moving very slowly for some reason so just to give you a little",
    "start": "126840",
    "end": "135209"
  },
  {
    "start": "132000",
    "end": "212000"
  },
  {
    "text": "background we're here as trainers to do the workshop on modern micro services",
    "start": "135209",
    "end": "140460"
  },
  {
    "text": "development in on the JVM look forward to seeing you all there actually anybody coming oh",
    "start": "140460",
    "end": "146260"
  },
  {
    "text": "nevermind okay so everyone put up their hand yes so sorry for the benefit of the",
    "start": "146260",
    "end": "152840"
  },
  {
    "text": "video everyone put up their hand yes so we came along to do the workshop and we",
    "start": "152840",
    "end": "159020"
  },
  {
    "text": "did the workshop but go to Amsterdam where it went very well and the committee said to us look why don't you",
    "start": "159020",
    "end": "165050"
  },
  {
    "text": "do a talk and so we put forward about a dozen different proposals and this was",
    "start": "165050",
    "end": "171260"
  },
  {
    "text": "the one that was most favored but we did come back and say look isn't this kind of last season's colors you know isn't",
    "start": "171260",
    "end": "178400"
  },
  {
    "text": "everybody doing this because for us anyway in Ireland 2018 was the year when",
    "start": "178400",
    "end": "184220"
  },
  {
    "text": "people stopped saying look why aren't you doing this in Java and they started saying well why are you doing this in",
    "start": "184220",
    "end": "190850"
  },
  {
    "text": "Java okay because that the polyglot revolution has happened okay so it's now",
    "start": "190850",
    "end": "197410"
  },
  {
    "text": "you're better thought of if you're using a non Java language on JVM projects you",
    "start": "197410",
    "end": "203660"
  },
  {
    "text": "know that's been our experience anyway yeah so for us with this talk is very",
    "start": "203660",
    "end": "208700"
  },
  {
    "text": "slightly steal yeah because things have moved on okay",
    "start": "208700",
    "end": "213709"
  },
  {
    "start": "212000",
    "end": "239000"
  },
  {
    "text": "but as you know in IT we work in little silos yeah and something is obvious to",
    "start": "213709",
    "end": "219050"
  },
  {
    "text": "you and your small little corner of IT but then you go and move into somebody else's and the whole picture changes",
    "start": "219050",
    "end": "225230"
  },
  {
    "text": "okay so you know I'm sure there are lots of people like they're thinking that Android developers still use Java okay",
    "start": "225230",
    "end": "233090"
  },
  {
    "text": "and if you are inconceivable okay you know it's a it's time to move on folks",
    "start": "233090",
    "end": "239090"
  },
  {
    "start": "239000",
    "end": "266000"
  },
  {
    "text": "so that's really what this talk is about this is a talk for Android veterans you",
    "start": "239090",
    "end": "245420"
  },
  {
    "text": "know we assume that you're a veteran Java developer that you've done some Android development before and that",
    "start": "245420",
    "end": "252050"
  },
  {
    "text": "you've got the scars to prove it okay so we are here to try and convince you that there is a better way of doing",
    "start": "252050",
    "end": "258260"
  },
  {
    "text": "it and that Kotlin is that way okay so what Scotland I'll push the button oh",
    "start": "258260",
    "end": "266080"
  },
  {
    "start": "266000",
    "end": "318000"
  },
  {
    "text": "thank you yeah so what sir what Scotland so Cortland is an alternative language",
    "start": "266080",
    "end": "272930"
  },
  {
    "text": "for the JVM invented by Bryn's and that has a whole pile of wonderful language features which are",
    "start": "272930",
    "end": "279420"
  },
  {
    "text": "listed on the right and that you'll see a lot of these as we go along and very much beloved by creators of frameworks",
    "start": "279420",
    "end": "286920"
  },
  {
    "text": "okay so spring boot for example a pivotal they love Kotlin they have spring foo",
    "start": "286920",
    "end": "293340"
  },
  {
    "text": "which is their incubator project they have Kotlin which is a fully fledged ESL for writing a complete spring boot up",
    "start": "293340",
    "end": "300060"
  },
  {
    "text": "very nice indeed griddle version 5 of Gradle the the DSL",
    "start": "300060",
    "end": "306300"
  },
  {
    "text": "is entirely written in Cortland you know and so on okay so Cortland is an extremely popular",
    "start": "306300",
    "end": "312440"
  },
  {
    "text": "up-and-coming jvm language and not just on the JVM as we'll see so I like to do",
    "start": "312440",
    "end": "320910"
  },
  {
    "start": "318000",
    "end": "443000"
  },
  {
    "text": "a little rant about you know what's wrong with Java and aim and all we sighs at this point because he's seen this",
    "start": "320910",
    "end": "326640"
  },
  {
    "text": "rant so many times and every time I teach myself a programming language I",
    "start": "326640",
    "end": "331710"
  },
  {
    "text": "have a bunch of little cutters that I do okay and whenever Java it came along I",
    "start": "331710",
    "end": "337200"
  },
  {
    "text": "was doing most of my work in Scala and one of the cutters I'd used to teach myself FP and Scala was just flat",
    "start": "337200",
    "end": "344430"
  },
  {
    "text": "mapping over an array of strings and printing out the alphabet okay and you know that this seems like kiddie code",
    "start": "344430",
    "end": "350640"
  },
  {
    "text": "you know this is something if I'm learning a new functional language I would expect to be able to do this in about 30 seconds okay so in Java it took",
    "start": "350640",
    "end": "358860"
  },
  {
    "text": "me three hours yeah so if you've ever encountered this yet then you'll knew what the issues are and I am aware that",
    "start": "358860",
    "end": "366240"
  },
  {
    "text": "the good choices were made and there were trade-offs and you know it was a balancing act and all the rest of it but",
    "start": "366240",
    "end": "372000"
  },
  {
    "text": "whenever we do functional programming in Java courses quick plug for that course and then you know what we can't spend up",
    "start": "372000",
    "end": "378600"
  },
  {
    "text": "to an hour you know just talking about what makes this example weird okay so let's look at the same thing in",
    "start": "378600",
    "end": "385140"
  },
  {
    "text": "Kotlin tada okay so obviously a lot shorter and a lot simpler okay so little",
    "start": "385140",
    "end": "393090"
  },
  {
    "text": "things to point out so in the Kotlin language lambdas go inside braces yeah",
    "start": "393090",
    "end": "398430"
  },
  {
    "text": "and that makes it very nice for creating dsls for creating domain-specific",
    "start": "398430",
    "end": "403590"
  },
  {
    "text": "languages and we'll see lots of examples of that as we go along upon",
    "start": "403590",
    "end": "408689"
  },
  {
    "text": "shanell programming is fully integrated so you don't need to say dot stream or anything like that the the core",
    "start": "408689",
    "end": "414749"
  },
  {
    "text": "operators of FP just work yeah and if a lambda only takes a single parameter its",
    "start": "414749",
    "end": "420749"
  },
  {
    "text": "represented by the symbol it okay so that just helps make your FPS so much",
    "start": "420749",
    "end": "426749"
  },
  {
    "text": "easier okay and if you're used to another functional language like F sharp",
    "start": "426749",
    "end": "432179"
  },
  {
    "text": "or c-sharp you see I do mention the dotnet languages yeah so if you're used to other languages like that yeah",
    "start": "432179",
    "end": "438449"
  },
  {
    "text": "then you'll find Kotlin so much easier to migrate to than Java okay so moving",
    "start": "438449",
    "end": "444689"
  },
  {
    "start": "443000",
    "end": "475000"
  },
  {
    "text": "on to Android then why should you wish to do Kotlin and Android well because they tell you to okay so this talk is",
    "start": "444689",
    "end": "452249"
  },
  {
    "text": "actually at a good time because at Google i/o 2019 they made this statement",
    "start": "452249",
    "end": "458399"
  },
  {
    "text": "here which you can read for yourself you know so for a good few years now Kotlin has been a supported language yeah for",
    "start": "458399",
    "end": "465689"
  },
  {
    "text": "Android development it's now the the favorite language for Android development so if you're starting a new",
    "start": "465689",
    "end": "471419"
  },
  {
    "text": "project yeah Google would suggest you do it in : so um if you do so you know what",
    "start": "471419",
    "end": "479099"
  },
  {
    "start": "475000",
    "end": "519000"
  },
  {
    "text": "are the good things well you're going to see your codebase reduce by about 40 percent yeah the remaining code will be",
    "start": "479099",
    "end": "485909"
  },
  {
    "text": "an awful lot simpler for reasons that will show you some of the language features plaster over you know existing",
    "start": "485909",
    "end": "492539"
  },
  {
    "text": "it acknowledged issues with the android api is like memory management and so on you can actually use a modern language",
    "start": "492539",
    "end": "499979"
  },
  {
    "text": "you know on android you not stick a stuck with an older version of java which doesn't do functional programming",
    "start": "499979",
    "end": "505739"
  },
  {
    "text": "and so on it helps future-proof your skill set for when you move off android you know you'll have a valuable FP experience and",
    "start": "505739",
    "end": "513479"
  },
  {
    "text": "so on and we find that developers are just in general more happy ok",
    "start": "513479",
    "end": "518990"
  },
  {
    "text": "yeah so why listen to us well on the development side of the business we've",
    "start": "518990",
    "end": "524129"
  },
  {
    "text": "written an awful lot of code for an awful lot of clients and an awful lot of platforms ok so most of us started IDE",
    "start": "524129",
    "end": "530430"
  },
  {
    "text": "as C++ developers back in the day and then moved on to either Java or.net or",
    "start": "530430",
    "end": "535709"
  },
  {
    "text": "bugs yeah and as a company we we bet on Kotlin four years ago so all application",
    "start": "535709",
    "end": "542700"
  },
  {
    "text": "all projects that we're doing on top of the JVM we now use Kotlin and we've been experimenting with Courtland Jas and",
    "start": "542700",
    "end": "549570"
  },
  {
    "text": "with Courtland it we're also on the training side of the business we're a",
    "start": "549570",
    "end": "555390"
  },
  {
    "start": "551000",
    "end": "587000"
  },
  {
    "text": "jetbrains training partner we've written three Courtland courses so far one a formally accredited language course a",
    "start": "555390",
    "end": "562170"
  },
  {
    "text": "functional concepts course and a spring boot course are all done in Cortland we've delivered training courses for",
    "start": "562170",
    "end": "568670"
  },
  {
    "text": "household names all across Europe and the u.s. that you will have heard of but I'm not allowed to say them as ever you",
    "start": "568670",
    "end": "574230"
  },
  {
    "text": "know and lots of new startups all around Ireland okay so we believe in Cortland",
    "start": "574230",
    "end": "580110"
  },
  {
    "text": "to such an extent that we we started the Courtland Belfast user group so I'm I'm a COO organizer of that so you're all",
    "start": "580110",
    "end": "589680"
  },
  {
    "start": "587000",
    "end": "625000"
  },
  {
    "text": "wondering at the moment if every month a little brown envelope arrives from JetBrains you know filled with cash yeah",
    "start": "589680",
    "end": "594870"
  },
  {
    "text": "sadly not okay although I am open to bribery if any of you want to come talk to me afterwards you know that's that's",
    "start": "594870",
    "end": "600960"
  },
  {
    "text": "something we can definitely discuss yes but sadly we do not get any royalties we",
    "start": "600960",
    "end": "606270"
  },
  {
    "text": "do not get any benefits you know occasionally on Twitter or somebody from jet brands might say a nice thing about",
    "start": "606270",
    "end": "611280"
  },
  {
    "text": "us and some swag turns up a couple of times a year and that's it okay so as a",
    "start": "611280",
    "end": "616740"
  },
  {
    "text": "company we are very much placed a bet on Kotlin being the future you know and we",
    "start": "616740",
    "end": "621960"
  },
  {
    "text": "we think it's a good idea we would encourage you to do the same so these are the questions we'll be answering for",
    "start": "621960",
    "end": "628350"
  },
  {
    "start": "625000",
    "end": "657000"
  },
  {
    "text": "the rest of the talk with lots of code examples so why were we motivated to make the switch how did we do it what",
    "start": "628350",
    "end": "635610"
  },
  {
    "text": "features of the language do we love what problems did we face and cortland adoption did this require new framework",
    "start": "635610",
    "end": "642270"
  },
  {
    "text": "so could we stick with you know the good old tried and tested ones what would we do differently if we did it again and",
    "start": "642270",
    "end": "647790"
  },
  {
    "text": "our cool routines of any years okay now we threw that last one and simply because we want to talk about",
    "start": "647790",
    "end": "653010"
  },
  {
    "text": "co-routines because we think they're awesome okay yay so what motivated us",
    "start": "653010",
    "end": "659610"
  },
  {
    "start": "657000",
    "end": "720000"
  },
  {
    "text": "first of all well as I say we had done a lot of development on a lot of platforms now okay so most of the senior",
    "start": "659610",
    "end": "666450"
  },
  {
    "text": "developers I then still have been writing code for 20 years plus so we've done all of this stuff here okay so I've",
    "start": "666450",
    "end": "673200"
  },
  {
    "text": "been developing on Java since Java 1.1 I actually Rudy JB's in anger who here",
    "start": "673200",
    "end": "678860"
  },
  {
    "text": "is rittany JB's in anger hey excellent good I run a therapy group if you're interested you know so yeah so",
    "start": "678860",
    "end": "686380"
  },
  {
    "text": "we've been doing this stuff for up for quite a while okay and we were ten doing",
    "start": "686380",
    "end": "692660"
  },
  {
    "text": "for some major Android projects know that the red buses thing you do an Android app for two years and suddenly",
    "start": "692660",
    "end": "699170"
  },
  {
    "text": "five of them turn up at the same time okay so we were tendering for a bunch of Android projects and the developers",
    "start": "699170",
    "end": "706220"
  },
  {
    "text": "really didn't want to do Java okay they really did not do Java okay so as we go",
    "start": "706220",
    "end": "712430"
  },
  {
    "text": "through the the slides here we've put in some quotes from various developers and",
    "start": "712430",
    "end": "719330"
  },
  {
    "text": "so on in the company so we actually hacked our CEOs email account yeah and we were able to come up with this here",
    "start": "719330",
    "end": "725450"
  },
  {
    "start": "720000",
    "end": "751000"
  },
  {
    "text": "okay so this is a real quote from one Dr Seuss who's a software engineer",
    "start": "725450",
    "end": "730870"
  },
  {
    "text": "complaining to our CEO so I do not like this java.lang I do not like it",
    "start": "730870",
    "end": "736250"
  },
  {
    "text": "businessman it does not suit our software house it makes me sad to click the mouse I will not code it here or there it",
    "start": "736250",
    "end": "742580"
  },
  {
    "text": "sucks for Android anywhere okay so that was actually the the majority",
    "start": "742580",
    "end": "748310"
  },
  {
    "text": "opinion yeah amongst our developers okay so that they did not want to do Java",
    "start": "748310",
    "end": "754670"
  },
  {
    "start": "751000",
    "end": "770000"
  },
  {
    "text": "okay so seriously we had a problem okay so we love the JVM you know we knew that",
    "start": "754670",
    "end": "760370"
  },
  {
    "text": "we loved the JVM we knew it backwards we've been using it forever it's great but by today's standards Java is not",
    "start": "760370",
    "end": "766850"
  },
  {
    "text": "great okay so Cortland was a pragmatic solution to that problem okay so here's",
    "start": "766850",
    "end": "772970"
  },
  {
    "text": "a real quote from our head of engineering Chris and that you can read through that yourself I would stress",
    "start": "772970",
    "end": "779120"
  },
  {
    "text": "especially the bed at the bottom so the code was simpler more stable more performant and we actually had such good",
    "start": "779120",
    "end": "785840"
  },
  {
    "text": "success with the core language that we went out and started to explore features like co-routines before they were ready",
    "start": "785840",
    "end": "792830"
  },
  {
    "text": "you know even before they were fully baked we were playing with them yep so yeah and some quotes from the actual",
    "start": "792830",
    "end": "799910"
  },
  {
    "start": "796000",
    "end": "858000"
  },
  {
    "text": "developers as well it turns out if you go and ask Irish developers for quotes for an",
    "start": "799910",
    "end": "805370"
  },
  {
    "text": "International presentation they get really sarcastic really quickly okay so working in job as",
    "start": "805370",
    "end": "811700"
  },
  {
    "text": "a fantastic developer experience because you can use : yeah and Kotlin against the biggest",
    "start": "811700",
    "end": "816890"
  },
  {
    "text": "weakness of the Java ecosystem Java okay so going forwards the JVM goes from",
    "start": "816890",
    "end": "822650"
  },
  {
    "text": "strength to strength and a stronger and is better with every release Java well as with all programming languages it",
    "start": "822650",
    "end": "829190"
  },
  {
    "text": "suffers what I call reverse Jenga you know so we've all played the game Jenga yeah in Reverse Jenga you stick bricks",
    "start": "829190",
    "end": "835730"
  },
  {
    "text": "onto the side until the whole thing collapses over Elna soon weird okay so as we know this happens to all",
    "start": "835730",
    "end": "842600"
  },
  {
    "text": "programming languages over time so once a programming language gets passed release one it starts suffering from",
    "start": "842600",
    "end": "848660"
  },
  {
    "text": "reverse Jenga you know so Java C sharp especially C++ they've been in Reverse",
    "start": "848660",
    "end": "854540"
  },
  {
    "text": "Jenga mood for some considerable time now okay so the community of course was",
    "start": "854540",
    "end": "860900"
  },
  {
    "start": "858000",
    "end": "893000"
  },
  {
    "text": "going that way anyway we're not going to pretend it was an incredibly brave decision because as we've said Google no",
    "start": "860900",
    "end": "866990"
  },
  {
    "text": "favor Kotlin and if you're familiar with jetpack which is a set of libraries that",
    "start": "866990",
    "end": "872480"
  },
  {
    "text": "they produce it's now starting to incorporate all kinds of Kotlin idioms you know as you can see from the the",
    "start": "872480",
    "end": "879530"
  },
  {
    "text": "point on the bottom left there okay so it was definitely a timely decision and",
    "start": "879530",
    "end": "884660"
  },
  {
    "text": "one that we felt you know we're empowered to make this isn't working I",
    "start": "884660",
    "end": "891170"
  },
  {
    "text": "think maybe it's a distance yeah so",
    "start": "891170",
    "end": "897350"
  },
  {
    "text": "thanks Garth so I'm going to take you through some of the language features and you know as we set out to write this",
    "start": "897350",
    "end": "903320"
  },
  {
    "text": "talk because obviously we just came up with the title without any content we're thinking okay it's going to be this epic",
    "start": "903320",
    "end": "909140"
  },
  {
    "text": "struggle this warrior fighting this way to this great victory but like Kill Bill",
    "start": "909140",
    "end": "914380"
  },
  {
    "text": "and reality it was a bit more like Kilkenny will good nineties pop culture",
    "start": "914380",
    "end": "919640"
  },
  {
    "text": "reference they're very very current we're only getting this now in Ireland",
    "start": "919640",
    "end": "924970"
  },
  {
    "text": "no it is really really easy very very easy to make the switch we're sort of",
    "start": "924970",
    "end": "930200"
  },
  {
    "text": "finding that our devs can can transition from Java C sharp Swift to any of these",
    "start": "930200",
    "end": "935480"
  },
  {
    "text": "languages the transition to Kotlin is really really easy and you know within a week you are producing much much better",
    "start": "935480",
    "end": "942850"
  },
  {
    "text": "code and then obviously that gets better and better over time as you learn little idioms of the language that make it",
    "start": "942850",
    "end": "948970"
  },
  {
    "text": "really really expressive so I'm gonna cover the the features that we love and",
    "start": "948970",
    "end": "954339"
  },
  {
    "start": "950000",
    "end": "971000"
  },
  {
    "text": "I'm going to be going through these quite quickly you don't have to necessarily absorb them all what I want",
    "start": "954339",
    "end": "959829"
  },
  {
    "text": "you to take away is just a sense of how many like little improvements the language makes that is just going to",
    "start": "959829",
    "end": "966430"
  },
  {
    "text": "compound over your entire code base and makes it much much nicer so one of the",
    "start": "966430",
    "end": "973029"
  },
  {
    "start": "971000",
    "end": "1021000"
  },
  {
    "text": "things to start off with though is that you don't have to throw away all your code the interrupt story is really",
    "start": "973029",
    "end": "978310"
  },
  {
    "text": "really good like IntelliJ you can copy Java code paste it into a call and file and it",
    "start": "978310",
    "end": "984130"
  },
  {
    "text": "will actually translate it for you but the one of there I mean the the",
    "start": "984130",
    "end": "989709"
  },
  {
    "text": "JetBrains guys were using Java this is something that we're eating their own dog food they were going to use Java themselves so they needed to make sure",
    "start": "989709",
    "end": "996760"
  },
  {
    "text": "that they could actually interrupt with Java and that story was really good and if you do have to go off piece there are",
    "start": "996760",
    "end": "1002279"
  },
  {
    "text": "occasionally exceptions there are annotations to make that a bit easier so in the case of emergency you can use",
    "start": "1002279",
    "end": "1008910"
  },
  {
    "text": "some of these annotations like JVM overloads and JVM field and and these kinds of things to omit the the code",
    "start": "1008910",
    "end": "1015540"
  },
  {
    "text": "that you need but we find that the our experience the interrupt story is really really really good the language itself",
    "start": "1015540",
    "end": "1023070"
  },
  {
    "start": "1021000",
    "end": "1077000"
  },
  {
    "text": "though I mean I'm I sort of I just love coding I I love writing elegant code",
    "start": "1023070",
    "end": "1028678"
  },
  {
    "text": "I don't like clever code I don't like we talked about code reductions of 40% I don't like code that's very very",
    "start": "1028679",
    "end": "1035970"
  },
  {
    "text": "succinct but impossible to read that you can stand back and be very proud that you've written this monster I like code that's short I'm actually",
    "start": "1035970",
    "end": "1043199"
  },
  {
    "text": "easier to read so I like languages that are expressive and you know jet prints",
    "start": "1043199",
    "end": "1049230"
  },
  {
    "text": "didn't necessarily you know invent all of these we've seen these in other different languages but they were able",
    "start": "1049230",
    "end": "1054750"
  },
  {
    "text": "to bring them all together and put them in a nice little package on the JVM and it's made a very expressive language so",
    "start": "1054750",
    "end": "1060900"
  },
  {
    "text": "if we look at what do we mean by expressive we look at like some of the synonyms meaningful tallian and",
    "start": "1060900",
    "end": "1067760"
  },
  {
    "text": "revealing it's about writing code where you can look at it and you know what it does okay and then",
    "start": "1067760",
    "end": "1073680"
  },
  {
    "text": "it's easy to maintain easy to extend easy to understand so let's take like a quick example this is you've probably",
    "start": "1073680",
    "end": "1079950"
  },
  {
    "start": "1077000",
    "end": "1143000"
  },
  {
    "text": "seen this if you've ever seen Colleen before this is a Java class and of course being good o developers we have",
    "start": "1079950",
    "end": "1086670"
  },
  {
    "text": "our fields and our fields are encapsulated inside so they're private so then we have our constructor and our",
    "start": "1086670",
    "end": "1092010"
  },
  {
    "text": "constructor is there to basically copy the parameters into the fields and you",
    "start": "1092010",
    "end": "1097890"
  },
  {
    "text": "know probably we're using a good IDE that will auto-generate for this because this is dumb code but then we need to",
    "start": "1097890",
    "end": "1103020"
  },
  {
    "text": "access our fields so we give ourselves properties which in Java is getters and setters and we need to do this for all",
    "start": "1103020",
    "end": "1109470"
  },
  {
    "text": "our fields and suddenly we put all of this noise okay and this could be auto-generated because it is dumb code",
    "start": "1109470",
    "end": "1116390"
  },
  {
    "text": "but it's still noise when we make changes there's still change sets that are full of all of these little changes",
    "start": "1116390",
    "end": "1122910"
  },
  {
    "text": "and this sort of stuff is really annoying in Kotlin that's it okay so we",
    "start": "1122910",
    "end": "1128160"
  },
  {
    "text": "just define a class we have this primary constructor we define what the properties are going to be and the",
    "start": "1128160",
    "end": "1133590"
  },
  {
    "text": "constructor and by using this VAR keyword that will automatically have the getter and setter if we want it to be",
    "start": "1133590",
    "end": "1139470"
  },
  {
    "text": "read-only we use the vowel keyword but that's it it's so much less noise and quite typically in objects we need to",
    "start": "1139470",
    "end": "1146850"
  },
  {
    "start": "1143000",
    "end": "1165000"
  },
  {
    "text": "have equals methods we need to have hash code methods maybe we're having copy methods and things like this again",
    "start": "1146850",
    "end": "1153750"
  },
  {
    "text": "this is dumb code we generally auto generate this inside the ID so if we can",
    "start": "1153750",
    "end": "1159360"
  },
  {
    "text": "also generate it why not remove so with the data keyword we have this in common as well so everything just gets a lot",
    "start": "1159360",
    "end": "1165150"
  },
  {
    "start": "1165000",
    "end": "1310000"
  },
  {
    "text": "neater going into more but expressive code here we have an example of a DSL so",
    "start": "1165150",
    "end": "1172890"
  },
  {
    "text": "this is a language that we can create using basic constructs in column which",
    "start": "1172890",
    "end": "1179040"
  },
  {
    "text": "then allows us to write more elegant code so here you can clearly see that we've got a menu the menu has sub menus",
    "start": "1179040",
    "end": "1184680"
  },
  {
    "text": "those sub menus have items and the menu there almost looks like a keyword of the",
    "start": "1184680",
    "end": "1189750"
  },
  {
    "text": "language okay and it's using several features of the language menu is actually just a function okay it's just",
    "start": "1189750",
    "end": "1196740"
  },
  {
    "text": "a function that takes a function as a parameter so one of the features of Kotlin is that if the last parameter is",
    "start": "1196740",
    "end": "1203340"
  },
  {
    "text": "a function and you're passing in a lambda which is this braces you you can put it outside of the the",
    "start": "1203340",
    "end": "1209530"
  },
  {
    "text": "function arguments you can put it outside of the brackets and if there are no other arguments you can actually remove the brackets so it allows us to",
    "start": "1209530",
    "end": "1216220"
  },
  {
    "text": "create really expressive code like this that looks like it's a purpose-built language but it's actually just a simple",
    "start": "1216220",
    "end": "1223060"
  },
  {
    "text": "function okay it uses something else inside that menu we have sub menus and within the sub",
    "start": "1223060",
    "end": "1229600"
  },
  {
    "text": "menus we have items and that's possible because the function has a receiver so the highlighted thing on the left of the",
    "start": "1229600",
    "end": "1236920"
  },
  {
    "text": "function definition there the menu with the dot that is saying that this lambda",
    "start": "1236920",
    "end": "1243550"
  },
  {
    "text": "will execute but it will be giving it will be given a menu object as the",
    "start": "1243550",
    "end": "1248650"
  },
  {
    "text": "context as the this object so inside the lambda as it executes this will be a",
    "start": "1248650",
    "end": "1255040"
  },
  {
    "text": "menu object and that's why in this code here sub menu is actually a method invocation of a menu object and the menu",
    "start": "1255040",
    "end": "1262360"
  },
  {
    "text": "object is provided when the menu is called so this allows us to create really expressive code we use this in",
    "start": "1262360",
    "end": "1269770"
  },
  {
    "text": "some android apps this code has been slightly anonymized so it's been",
    "start": "1269770",
    "end": "1275800"
  },
  {
    "text": "slightly tweaked so we don't reveal any customer secrets but what we're doing",
    "start": "1275800",
    "end": "1281680"
  },
  {
    "text": "here is we're sending commands down to a device so we're calling this sound command to device inside this function",
    "start": "1281680",
    "end": "1288990"
  },
  {
    "text": "inside this lambda we are calling methods of this command builder so we",
    "start": "1288990",
    "end": "1294070"
  },
  {
    "text": "that can write really expressive code very neat code it's not more complicated it's actually simpler but it's also",
    "start": "1294070",
    "end": "1301270"
  },
  {
    "text": "shorter which is what we want and all that is is a function with lambda coming",
    "start": "1301270",
    "end": "1307540"
  },
  {
    "text": "in with a receiver this command builder and we're not the only people doing this as Garth said Gradle has the DSL for",
    "start": "1307540",
    "end": "1316060"
  },
  {
    "text": "doing the Gradle configuration Spring has Kofu for doing the entire application instead of using XML and",
    "start": "1316060",
    "end": "1321820"
  },
  {
    "text": "annotations use the DSL like this purpose-built cateura which we'll be looking at in our workshop that uses it",
    "start": "1321820",
    "end": "1328810"
  },
  {
    "text": "as well so it allows us to write really expressive code excellent yes you keep",
    "start": "1328810",
    "end": "1335110"
  },
  {
    "start": "1333000",
    "end": "1428000"
  },
  {
    "text": "the clicker here because it doesn't work from over here so yes so this idea of lambdas with receivers",
    "start": "1335110",
    "end": "1340600"
  },
  {
    "text": "turns out to be tremendously versatile so a lot of things in Cortland you think",
    "start": "1340600",
    "end": "1345850"
  },
  {
    "text": "they're built-in features they're keywords of the language and so on they're not they're just functions that",
    "start": "1345850",
    "end": "1351370"
  },
  {
    "text": "are taking advantage of lambdas with receivers so to take an example as you know quite a few programming languages",
    "start": "1351370",
    "end": "1357940"
  },
  {
    "text": "have the idea of a with block so you can say with some object do these things okay so here I've got a little made-up",
    "start": "1357940",
    "end": "1365410"
  },
  {
    "text": "example using a tank you know as the the use case so we're saying with the tank go forward turn backward file okay and",
    "start": "1365410",
    "end": "1372430"
  },
  {
    "text": "it should actually be tank dot forward tank turn and so on but that would look",
    "start": "1372430",
    "end": "1377710"
  },
  {
    "text": "terrible so this is particularly useful in any kind of GUI programming where you've just created a widget and then",
    "start": "1377710",
    "end": "1384340"
  },
  {
    "text": "you've been a bunch of properties of the widget that you need to set okay so useful and Android or any GUI library so",
    "start": "1384340",
    "end": "1390850"
  },
  {
    "text": "we could write this ourselves you know whoops back one yeah so so using lambdas with receivers we could have a go at",
    "start": "1390850",
    "end": "1398350"
  },
  {
    "text": "this ourselves and you see it's done there at the top so we've got a generic function with a type parameter of T and",
    "start": "1398350",
    "end": "1403780"
  },
  {
    "text": "it takes two inputs an object of T and a function and that function takes nothing",
    "start": "1403780",
    "end": "1409570"
  },
  {
    "text": "and returns nothing at unit being the functional equivalent of void but it has a receiver of T okay and all I need to",
    "start": "1409570",
    "end": "1417340"
  },
  {
    "text": "do is invoke the lambda using obj as the receiver yeah so we could do this",
    "start": "1417340",
    "end": "1424000"
  },
  {
    "text": "ourselves we could go out and create a utility with function okay but of course",
    "start": "1424000",
    "end": "1429280"
  },
  {
    "start": "1428000",
    "end": "1448000"
  },
  {
    "text": "they've done it for us okay so here's the actual official definition of with",
    "start": "1429280",
    "end": "1434290"
  },
  {
    "text": "borrowed from their source code and there's a few bells and whistles in there but if you just look at the",
    "start": "1434290",
    "end": "1439870"
  },
  {
    "text": "Declaration at the top it's a it's pretty much the same as mine okay so that these utility functions are very",
    "start": "1439870",
    "end": "1446590"
  },
  {
    "text": "easy to write and here's an example here you know from some Android code that we have so we're taking in the navigation",
    "start": "1446590",
    "end": "1453910"
  },
  {
    "text": "bar and we want to configure it further so we don't need to say nav bar dot search bar dot visibility and so on yeah",
    "start": "1453910",
    "end": "1460960"
  },
  {
    "text": "and quite often these UI api's are quite large where you have to set a lot of these properties interact with a lot so",
    "start": "1460960",
    "end": "1466510"
  },
  {
    "text": "it really really works with those absolutely yeah so then if you think",
    "start": "1466510",
    "end": "1471790"
  },
  {
    "start": "1469000",
    "end": "1528000"
  },
  {
    "text": "about it if you have a function which is going to take a lambda well",
    "start": "1471790",
    "end": "1476830"
  },
  {
    "text": "then there are three things that you can play with okay so assuming for the moment there's only going to be a zero",
    "start": "1476830",
    "end": "1481990"
  },
  {
    "text": "or one regular parameters well then you know what's it going to pointing ok so",
    "start": "1481990",
    "end": "1487330"
  },
  {
    "text": "inside the lambda if I use it what will it refer to and then inside the lambda",
    "start": "1487330",
    "end": "1492700"
  },
  {
    "text": "if I use this you know what will it refer to and then finally what will be",
    "start": "1492700",
    "end": "1497830"
  },
  {
    "text": "returned you know from calling the function so if I call the function and pass in the block will do I get back the",
    "start": "1497830",
    "end": "1504309"
  },
  {
    "text": "result of running the block do I get back the receiver object do I get back nothing at all okay so at this and the",
    "start": "1504309",
    "end": "1512440"
  },
  {
    "text": "return these are the three things you can play with okay and the different combinations that you get well for",
    "start": "1512440",
    "end": "1519549"
  },
  {
    "text": "pretty much each of these there's a utility method that comes with Copelan and these are used so much that they've",
    "start": "1519549",
    "end": "1525940"
  },
  {
    "text": "actually become little idioms you know little patterns so a good example would be apply so you see here we've got a",
    "start": "1525940",
    "end": "1532419"
  },
  {
    "start": "1528000",
    "end": "1573000"
  },
  {
    "text": "little toast message e box thing and the idea is that I want to create my toast",
    "start": "1532419",
    "end": "1538030"
  },
  {
    "text": "but then I have extra things I need to do with it okay but then I want to use that the toast object itself okay so if",
    "start": "1538030",
    "end": "1546429"
  },
  {
    "text": "you've just created an object if there are extra things that you want to do and then you want to take that object and go",
    "start": "1546429",
    "end": "1552730"
  },
  {
    "text": "on and use it well then that's what apply is for okay so with apply we",
    "start": "1552730",
    "end": "1557860"
  },
  {
    "text": "provide a block yeah and then it's the receiver that gets returned so if I'm reviewing somebody's Kotlin code and I",
    "start": "1557860",
    "end": "1564850"
  },
  {
    "text": "see that they've called apply well then that implies to me that they've just",
    "start": "1564850",
    "end": "1570130"
  },
  {
    "text": "created an object but there are extra configuration steps okay similarly if I",
    "start": "1570130",
    "end": "1575860"
  },
  {
    "start": "1573000",
    "end": "1616000"
  },
  {
    "text": "see a call to let yeah well inside a let Luke it you know refers to the the",
    "start": "1575860",
    "end": "1582460"
  },
  {
    "text": "object that you're working with so if I see a call to let I know that the developer wants to introduce a new scope",
    "start": "1582460",
    "end": "1589179"
  },
  {
    "text": "and they have a set of actions that they want to perform against an existing object and these actions hang together",
    "start": "1589179",
    "end": "1595570"
  },
  {
    "text": "in some way you know kind of like a transaction they put together they make up some kind of logical unit of work",
    "start": "1595570",
    "end": "1602350"
  },
  {
    "text": "okay so as I say for each of these little utility methods whenever you see it being used",
    "start": "1602350",
    "end": "1607750"
  },
  {
    "text": "it's not just like a nice little hack it's also a design pattern you know it gives me information about what the",
    "start": "1607750",
    "end": "1613750"
  },
  {
    "text": "underlying intent of the developer was so looking at all the features that we",
    "start": "1613750",
    "end": "1619390"
  },
  {
    "text": "have this is a really nice feature and so we don't have explicit getters and Satur methods like we do in Java the top",
    "start": "1619390",
    "end": "1626260"
  },
  {
    "text": "property there is the way that we interact with this property on this class so we just deal directly with it",
    "start": "1626260",
    "end": "1632590"
  },
  {
    "text": "in nicer syntax but we can override the getter and setter in the second property there here we have a custom",
    "start": "1632590",
    "end": "1638260"
  },
  {
    "text": "implementation of our get and set but quite often you will have concepts and",
    "start": "1638260",
    "end": "1643990"
  },
  {
    "text": "cross-cutting behavior that you would like to extract out and define somewhere else and then reuse for this get and set",
    "start": "1643990",
    "end": "1652450"
  },
  {
    "text": "operation and that's what's happening in the third property here the getter and the setter for this third property is",
    "start": "1652450",
    "end": "1657940"
  },
  {
    "text": "being delegated to this delegate object so what does the delegate object it's",
    "start": "1657940",
    "end": "1663100"
  },
  {
    "text": "basically anything that implements these special get values and sat values and what this allows us to do is to take",
    "start": "1663100",
    "end": "1669280"
  },
  {
    "text": "that concept that behavior break it out and then reuse it elegantly in multiple",
    "start": "1669280",
    "end": "1675360"
  },
  {
    "text": "objects and because this is a class that we're instantiating we can provide parameters to configure this so good",
    "start": "1675360",
    "end": "1683860"
  },
  {
    "start": "1682000",
    "end": "1719000"
  },
  {
    "text": "usage of this is lazy so here what we're doing is we're postponing initialization",
    "start": "1683860",
    "end": "1690429"
  },
  {
    "text": "and we're doing that by constructing one of these lazy delegates and we do this with the the lazy function here we're",
    "start": "1690429",
    "end": "1697090"
  },
  {
    "text": "passing in a lambda and then of course because it's the last parameter we can do this trillion closure type syntax but",
    "start": "1697090",
    "end": "1704350"
  },
  {
    "text": "notice that what our property is is just a basic string it's hiding the fact that this is using this lazy delegation okay",
    "start": "1704350",
    "end": "1712390"
  },
  {
    "text": "the the property we interact with as a string but it won't get initialized until we're actually going to access it",
    "start": "1712390",
    "end": "1719309"
  },
  {
    "start": "1719000",
    "end": "1745000"
  },
  {
    "text": "another example which is quite useful in Android is if we have we want to have",
    "start": "1719309",
    "end": "1725320"
  },
  {
    "text": "weak references so this is where we don't want to necessarily have cyclical dependencies so we can have weak",
    "start": "1725320",
    "end": "1731440"
  },
  {
    "text": "references inside some of our objects so to do this we have to create a recraft",
    "start": "1731440",
    "end": "1736600"
  },
  {
    "text": "from subject and we have to store the data inside that and then when we're getting or setting the value we need to go through this week",
    "start": "1736600",
    "end": "1743169"
  },
  {
    "text": "reference object and but if we create a delegate for this then the code becomes much more much more simple okay so we're",
    "start": "1743169",
    "end": "1751059"
  },
  {
    "start": "1745000",
    "end": "1788000"
  },
  {
    "text": "using the inner type that's how we interact with this property but it's hiding the fact that it's actually this",
    "start": "1751059",
    "end": "1757990"
  },
  {
    "text": "weak reference object and weak reference delegate that's created behind the scenes so that this can be very useful",
    "start": "1757990",
    "end": "1763899"
  },
  {
    "text": "for situations where a has a reference to b and b is a reference to a and we've",
    "start": "1763899",
    "end": "1769360"
  },
  {
    "text": "got a deadly embrace situation where it's the you know garbage collection is being delayed but if one of the",
    "start": "1769360",
    "end": "1775659"
  },
  {
    "text": "references is a weak reference then that facilitates the garbage collector and much better memory management so",
    "start": "1775659",
    "end": "1781960"
  },
  {
    "text": "whenever you do it in java it's a lot more awkward Kotlin gives you this wonderful solution to to make it simpler",
    "start": "1781960",
    "end": "1788200"
  },
  {
    "start": "1788000",
    "end": "1832000"
  },
  {
    "text": "yeah and we can actually go further we can delegate an entire implementation on a class so we can take an interface and",
    "start": "1788200",
    "end": "1795130"
  },
  {
    "text": "we can implement that interface on our object by delegating to another object so if another object can provide that",
    "start": "1795130",
    "end": "1802210"
  },
  {
    "text": "functionality but we have to have the methods on our class we can do this",
    "start": "1802210",
    "end": "1807549"
  },
  {
    "text": "implementation by delegation so here this class is implementing the co-routine scope but it's not writing",
    "start": "1807549",
    "end": "1813640"
  },
  {
    "text": "any code all of the implementation for that functionality is provided by the main scope object and we are simply",
    "start": "1813640",
    "end": "1819370"
  },
  {
    "text": "delegating so the forwarding methods are being written for you so when we call into the course key coroutine scope",
    "start": "1819370",
    "end": "1825340"
  },
  {
    "text": "methods they're getting forwarded to this main scope object which is really really really powerful all the things we",
    "start": "1825340",
    "end": "1831820"
  },
  {
    "text": "can do in Kotlin extension methods so these extensions a lot of languages have",
    "start": "1831820",
    "end": "1837460"
  },
  {
    "start": "1832000",
    "end": "1862000"
  },
  {
    "text": "these now and they just allow us to write fluent code they allow us to write fluent api s-- api is and code that",
    "start": "1837460",
    "end": "1844270"
  },
  {
    "text": "reads a bit like prose okay that we can read the code and understand what it's doing because we're just reading plea in",
    "start": "1844270",
    "end": "1850510"
  },
  {
    "text": "english okay and all it's it's it's syntactic sugar really for a static",
    "start": "1850510",
    "end": "1856450"
  },
  {
    "text": "method call really but what we're getting to do here is we're aligned to chien our calls together and they're",
    "start": "1856450",
    "end": "1863289"
  },
  {
    "start": "1862000",
    "end": "1918000"
  },
  {
    "text": "quite easy to write so here we have an extension method that's written for some rx code so we we like rx and installed",
    "start": "1863289",
    "end": "1872139"
  },
  {
    "text": "so this is extending the observe of long type so extensions allow us to",
    "start": "1872139",
    "end": "1878380"
  },
  {
    "text": "extend the type right code somewhere else and that can before a type that we don't own like like in this example here",
    "start": "1878380",
    "end": "1885820"
  },
  {
    "text": "or code that we don't necessarily want to pollute with maybe this specific functionality so here what we're doing",
    "start": "1885820",
    "end": "1891820"
  },
  {
    "text": "is we're extending the observable of long type with this running average",
    "start": "1891820",
    "end": "1897010"
  },
  {
    "text": "functionality and inside the implementation of this function we have a reference to this and this will be an",
    "start": "1897010",
    "end": "1904510"
  },
  {
    "text": "observable of long object so it means that we can write more elegant code like this instead of having lots and lots of",
    "start": "1904510",
    "end": "1909850"
  },
  {
    "text": "operators Qi and gather here we can simply tag on to the end of an observable chain of calls are running a",
    "start": "1909850",
    "end": "1916570"
  },
  {
    "text": "rich call okay and there's some of these that are already built in to some of the",
    "start": "1916570",
    "end": "1922480"
  },
  {
    "start": "1918000",
    "end": "1957000"
  },
  {
    "text": "tooling so with the call and Android extensions here it really simplifies access to UI elements so here we have a",
    "start": "1922480",
    "end": "1929320"
  },
  {
    "text": "UI element with an ID in Java which is the middle code there you would do fine view by ID get back an object use that",
    "start": "1929320",
    "end": "1937240"
  },
  {
    "text": "object to then interact with Kotlin you just use the name you import it the",
    "start": "1937240",
    "end": "1942790"
  },
  {
    "text": "extension function is already written for you and it's quite clever as well because if we have multiple calls to",
    "start": "1942790",
    "end": "1949180"
  },
  {
    "text": "this extension function this title here then what will happen is it will cache",
    "start": "1949180",
    "end": "1954490"
  },
  {
    "text": "the results for you all the things we have in Kotlin that make it a safer",
    "start": "1954490",
    "end": "1960580"
  },
  {
    "start": "1957000",
    "end": "2025000"
  },
  {
    "text": "language is null safety okay so if you've ever seen a null pointer I know we're probably the only people who's",
    "start": "1960580",
    "end": "1966280"
  },
  {
    "text": "ever seen a null pointer you don't write bad code but if you've ever seen a null pointer exception then this feature is",
    "start": "1966280",
    "end": "1973120"
  },
  {
    "text": "definitely for you so what happens in Kotlin is that by default types are non",
    "start": "1973120",
    "end": "1979120"
  },
  {
    "text": "nullable so it means that null is not a valid value for your type so in the java code above the user object can be no",
    "start": "1979120",
    "end": "1987580"
  },
  {
    "text": "which means if we want to write defensive code we would test for null and maybe we're getting back some property and it could be null and so on",
    "start": "1987580",
    "end": "1994330"
  },
  {
    "text": "and we have this noisy code that's really like polluting and our implementation with : user cannot be",
    "start": "1994330",
    "end": "2000930"
  },
  {
    "text": "null so therefore the type system is making sure that it's not null it's ensuring that it's not no so I don't have to",
    "start": "2000930",
    "end": "2006840"
  },
  {
    "text": "write the code to defend against it supports nullable types as well and if it's a nullable type you will not be",
    "start": "2006840",
    "end": "2013619"
  },
  {
    "text": "able to use it unless you've tested for null so again the type system is ensuring that you're handling all of",
    "start": "2013619",
    "end": "2019049"
  },
  {
    "text": "those little corner cases and typically what you want to do is have non little types as much as you can so this is one",
    "start": "2019049",
    "end": "2027059"
  },
  {
    "start": "2025000",
    "end": "2037000"
  },
  {
    "text": "of our quotes from one of our more junior devs what does a nullpointerexception so coming from C++",
    "start": "2027059",
    "end": "2033929"
  },
  {
    "text": "I was able to tell them what a node pointer exception was um here's some",
    "start": "2033929",
    "end": "2039119"
  },
  {
    "text": "more code some Android code and again it's a little bit of code just creating a binding adapter here and we're getting",
    "start": "2039119",
    "end": "2045509"
  },
  {
    "text": "past this runnable of the runnable is nullable runnable nullable which means",
    "start": "2045509",
    "end": "2051868"
  },
  {
    "text": "then i will have to test for null in this case the language which forced me to do this now I would just want to run",
    "start": "2051869",
    "end": "2057690"
  },
  {
    "text": "this runnable and I can use the CF call operator so this will only call it if the method if the object is not know so",
    "start": "2057690",
    "end": "2065760"
  },
  {
    "text": "it's very succinct but it's very clear once you understand the language what this code is doing okay would there be",
    "start": "2065760",
    "end": "2070919"
  },
  {
    "text": "any other language features there he said in a very leading way yes I'm glad you asked so this is like about 10 lines",
    "start": "2070919",
    "end": "2077158"
  },
  {
    "text": "of code okay but if we sort of stop and look at it we've got a lot of other things like one thing here is we have top-level functions this is not inside a",
    "start": "2077159",
    "end": "2084270"
  },
  {
    "text": "class so it just makes it a little bit easier to write a little bit less boilerplate we have extension methods",
    "start": "2084270",
    "end": "2090480"
  },
  {
    "text": "did anyone notice the extension method no because it's very elegant and it just reads like normal code but this is",
    "start": "2090480",
    "end": "2096089"
  },
  {
    "text": "actually an extension method here so we can write a really clear code and our if",
    "start": "2096089",
    "end": "2101670"
  },
  {
    "start": "2100000",
    "end": "2119000"
  },
  {
    "text": "doesn't have a return here it's actually if as an expression and again this works",
    "start": "2101670",
    "end": "2107040"
  },
  {
    "text": "really well when we're writing function expression functions and things like this there's a lot of things in Kotlin",
    "start": "2107040",
    "end": "2113069"
  },
  {
    "text": "are expressions that would be statements in something like Java which allows us to write again more elegant code so you",
    "start": "2113069",
    "end": "2119130"
  },
  {
    "start": "2119000",
    "end": "2141000"
  },
  {
    "text": "know this is like a small snippet of code it's like ten lines of code or something like that but we've loads of examples that are like little",
    "start": "2119130",
    "end": "2125160"
  },
  {
    "text": "incremental improvements so it's not exactly a paradigm shift if it was a part-time shift then the journey for you",
    "start": "2125160",
    "end": "2132450"
  },
  {
    "text": "would be a lot harder we'd have our Kill Bill story but it's actually just a very natural evolution that just runs off all",
    "start": "2132450",
    "end": "2139799"
  },
  {
    "text": "the corners okay and so for example the example that Garth was showing her the lat this was",
    "start": "2139799",
    "end": "2146990"
  },
  {
    "text": "actually tweak code in reality it was using CF calls so this is again a nice",
    "start": "2146990",
    "end": "2152570"
  },
  {
    "text": "little idiom that allows us to execute a block of code against our object if it's not null it saves us writing in an if",
    "start": "2152570",
    "end": "2158930"
  },
  {
    "text": "statement so again we start to learn these little idioms and but there are scenarios where it's a little bit Messier there are places where you know",
    "start": "2158930",
    "end": "2166310"
  },
  {
    "start": "2161000",
    "end": "2191000"
  },
  {
    "text": "if you have read only non nullable fields this can be a little bit problematic because there's maybe gonna",
    "start": "2166310",
    "end": "2172280"
  },
  {
    "text": "be Liat initialization thinking for example coming from on type spaces may be reading in some JSON",
    "start": "2172280",
    "end": "2178730"
  },
  {
    "text": "maybe you're doing dependency injection so the object is created and then later on some stuff gets wired up but the",
    "start": "2178730",
    "end": "2185690"
  },
  {
    "text": "language does allow us to sort of have our cake and eat it too it allows us to handle these scenarios so we saw Lizzie",
    "start": "2185690",
    "end": "2192580"
  },
  {
    "start": "2191000",
    "end": "2217000"
  },
  {
    "text": "that's one way of doing some Liat initialization and we have the little",
    "start": "2192580",
    "end": "2198950"
  },
  {
    "text": "net keyword which allows us to say look trust us this variable I don't want to make nullable I want to treat it and all",
    "start": "2198950",
    "end": "2205820"
  },
  {
    "text": "of my code below was non nullable so I don't have to handle any of those horrible nulls and but it's going to be",
    "start": "2205820",
    "end": "2212030"
  },
  {
    "text": "initialized later just trust it so this is quite useful whenever we're doing dependency injection and and then just",
    "start": "2212030",
    "end": "2219110"
  },
  {
    "start": "2217000",
    "end": "2242000"
  },
  {
    "text": "good tooling and good frameworks and good support for the language allows us to write idiomatic Kotlin like here we",
    "start": "2219110",
    "end": "2224930"
  },
  {
    "text": "have a class which has got a constructor the properties are read-only so we have to have all of the data at hand to",
    "start": "2224930",
    "end": "2231920"
  },
  {
    "text": "populate this object and but good to good frameworks like retrofit and and",
    "start": "2231920",
    "end": "2237080"
  },
  {
    "text": "things like this can populate these objects so you you can have your cake and eat it too and then we're getting",
    "start": "2237080",
    "end": "2244730"
  },
  {
    "start": "2242000",
    "end": "2357000"
  },
  {
    "text": "into a very serious feature which is why the slide color has changed dramatically ten tenten does this a new way indicate",
    "start": "2244730",
    "end": "2252500"
  },
  {
    "text": "that we borrowed this from another deck no not at all definitely not and so who",
    "start": "2252500",
    "end": "2257720"
  },
  {
    "text": "here seen co-routines yeah brilliant so Kurt coroutines are a killer feature",
    "start": "2257720",
    "end": "2264140"
  },
  {
    "text": "there they're a game changer and the way that's been implemented in Kotlin is very clever they're very natural for me coming from languages",
    "start": "2264140",
    "end": "2270230"
  },
  {
    "text": "like C sharp with async/await but it's done better and Kotlin because it facilitates more options so in this",
    "start": "2270230",
    "end": "2277980"
  },
  {
    "text": "slide here we have two blocks of code one is asynchronous and one is synchronous which is watch and that's",
    "start": "2277980",
    "end": "2283859"
  },
  {
    "text": "the key thing for this pattern is that it's very difficult to tell the difference it we can write code that is",
    "start": "2283859",
    "end": "2290549"
  },
  {
    "text": "sequential imperative it uses all the constructs that we know ifs and fours",
    "start": "2290549",
    "end": "2295950"
  },
  {
    "text": "and these sorts of things and but it's actually running asynchronous so it's the code above is asynchronous because",
    "start": "2295950",
    "end": "2301950"
  },
  {
    "text": "it's a suspend function and what we have is that these three inner calls okay are",
    "start": "2301950",
    "end": "2308970"
  },
  {
    "text": "themselves to span functions and these suspend functions allow the thread to",
    "start": "2308970",
    "end": "2314400"
  },
  {
    "text": "yield to go off and do something else useful so in this code here we have three calls they might take a long time",
    "start": "2314400",
    "end": "2319920"
  },
  {
    "text": "to execute so we don't want the block to throw the thread waiting for them to finish instead we want to say okay I'm",
    "start": "2319920",
    "end": "2326789"
  },
  {
    "text": "gonna wait till it finishes thread go off and do something useful and that's something useful could be handling",
    "start": "2326789",
    "end": "2332010"
  },
  {
    "text": "another request or handling another UI event or something like this so what actually happens in this function is",
    "start": "2332010",
    "end": "2337799"
  },
  {
    "text": "that the function might return on any one of these lines it may not as well and that's part of the efficiency of coroutines is that they don't",
    "start": "2337799",
    "end": "2344369"
  },
  {
    "text": "necessarily yield if they don't have to but it allows us to write code which can yield can be asynchronous",
    "start": "2344369",
    "end": "2350130"
  },
  {
    "text": "okay but we write it like it's synchronous and that makes it much much easier to work with okay which is",
    "start": "2350130",
    "end": "2356190"
  },
  {
    "text": "awesome it also handles like harder cases like threading so here again we're",
    "start": "2356190",
    "end": "2362759"
  },
  {
    "start": "2357000",
    "end": "2396000"
  },
  {
    "text": "I mean can anyone guess what this code does it's pretty clear it's going to do that inner block on the i/o and",
    "start": "2362759",
    "end": "2368730"
  },
  {
    "text": "dispatcher so this is going to be executing certain work on certain threads and it will automatically",
    "start": "2368730",
    "end": "2373769"
  },
  {
    "text": "Marshall back to the UI thread for that last line that enable UI so again it handles all of the marshaling all of the",
    "start": "2373769",
    "end": "2380279"
  },
  {
    "text": "threading issues and in a really elegant way and this is what I was saying earlier by writing shorter more succinct",
    "start": "2380279",
    "end": "2386039"
  },
  {
    "text": "code that's actually easier to read okay because doing this stuff with things like futures or promises or god forbid",
    "start": "2386039",
    "end": "2393150"
  },
  {
    "text": "callbacks is just a nightmare so what co-routines allow us to do is do",
    "start": "2393150",
    "end": "2399599"
  },
  {
    "text": "this sort of interleaving but what we can do in a lot of cases is think sequentially because it's easier you",
    "start": "2399599",
    "end": "2406019"
  },
  {
    "text": "know we wouldn't be writing asynchronous code if we didn't have to and this sort of gives us pretty much",
    "start": "2406019",
    "end": "2411150"
  },
  {
    "text": "there I mean we can write asynchronous code that's gonna make efficient use of our thread threads which is important",
    "start": "2411150",
    "end": "2417180"
  },
  {
    "text": "especially on mobile devices and but it makes it really really easy to do and what they've done in the language is",
    "start": "2417180",
    "end": "2423170"
  },
  {
    "text": "they've they've opened it up so that we can do other patterns so we can do actors and channels we can do",
    "start": "2423170",
    "end": "2429330"
  },
  {
    "text": "Lissie generators so the generator pattern we can do that using co-routines and so there's a very low-level",
    "start": "2429330",
    "end": "2435750"
  },
  {
    "text": "construct in the language and then everything else is built on top of that in libraries which gives us lots and lots of flexibility okay um so how are",
    "start": "2435750",
    "end": "2446400"
  },
  {
    "start": "2442000",
    "end": "2485000"
  },
  {
    "text": "our experiences went we were big fans of rx for handling asynchronous work we",
    "start": "2446400",
    "end": "2451680"
  },
  {
    "text": "used rx Java quite a lot and an rx Kotlin but what we're finding now and we asked our said we adopted this while I",
    "start": "2451680",
    "end": "2458340"
  },
  {
    "text": "was still experimental and we're finding that lots of our code that was our axe can just be co-routines we still use rx",
    "start": "2458340",
    "end": "2465960"
  },
  {
    "text": "there are certain things when we model intuitively the problem that we're",
    "start": "2465960",
    "end": "2471060"
  },
  {
    "text": "modeling is a asynchronous stream so rx observables are perfect mapping for that",
    "start": "2471060",
    "end": "2476160"
  },
  {
    "text": "but a lot of code that we write is simply asynchronous you know but",
    "start": "2476160",
    "end": "2481680"
  },
  {
    "text": "sequential sequential simple algorithms so we use co-routines quite a lot so here for example is a method this method",
    "start": "2481680",
    "end": "2488190"
  },
  {
    "start": "2485000",
    "end": "2528000"
  },
  {
    "text": "has no control flow it's you know a sequence of six or seven lines one line",
    "start": "2488190",
    "end": "2493290"
  },
  {
    "text": "depends on the next but there's some asynchronous work going on here but it's it's it's hidden it's simple it's much",
    "start": "2493290",
    "end": "2500460"
  },
  {
    "text": "more easy to reason about and here we're using realm and realm had some threading issues but we could wrap that stuff up",
    "start": "2500460",
    "end": "2507510"
  },
  {
    "text": "inside a little function here and that uses co-routines which we can see from our source band points so there's lots",
    "start": "2507510",
    "end": "2514140"
  },
  {
    "text": "of asynchronous work going on here but the algorithm the code in this function is very very easy to read because we can",
    "start": "2514140",
    "end": "2519900"
  },
  {
    "text": "just read it sequentially so clover teams are a game changer we could talk for hours on it alone we're not quite so",
    "start": "2519900",
    "end": "2528750"
  },
  {
    "start": "2528000",
    "end": "2635000"
  },
  {
    "text": "yes so just to finish off and summarize talk a little bit about the PN points so a lot of these relate to the fact that",
    "start": "2528750",
    "end": "2536070"
  },
  {
    "text": "we were a really really early adopter of colton but we did try some of the newer frameworks so for",
    "start": "2536070",
    "end": "2541960"
  },
  {
    "text": "example there's : test which is very similar to Scala test it's a unit testing framework it supports multiple",
    "start": "2541960",
    "end": "2548890"
  },
  {
    "text": "styles of unit testing depending in which base class your test inherits from and so on and it really wasn't our cup",
    "start": "2548890",
    "end": "2555970"
  },
  {
    "text": "of tea okay it just had some peculiarities and quirks and the way that it worked and we decided at the",
    "start": "2555970",
    "end": "2562390"
  },
  {
    "text": "time it wasn't for us okay so what we just went back to J unit and that worked incredibly well you know so a lot of",
    "start": "2562390",
    "end": "2569080"
  },
  {
    "text": "Cortland based projects they just stick with J unit and that works great okay so",
    "start": "2569080",
    "end": "2574240"
  },
  {
    "text": "that was just a little speed bump yeah then because we were sticking largely with the traditional Java agile",
    "start": "2574240",
    "end": "2581740"
  },
  {
    "text": "tooling well then those frameworks had methods whose names were actually Kotlin",
    "start": "2581740",
    "end": "2587320"
  },
  {
    "text": "keywords okay so if you're using maketo and things like that there will be method names which are also Kotlin",
    "start": "2587320",
    "end": "2594160"
  },
  {
    "text": "keywords but the good news is if you encounter a situation like that you can just use the back tickles",
    "start": "2594160",
    "end": "2600970"
  },
  {
    "text": "okay so finally a use for those in your keyboard you know so that tells Kotlin",
    "start": "2600970",
    "end": "2606670"
  },
  {
    "text": "that no we're not using this symbol as a keyword we're actually using it as a method name or a variable name or",
    "start": "2606670",
    "end": "2613570"
  },
  {
    "text": "something like that and you can see this isn't maybe a pinpoint here have them to wrap our method and backticks but the back techs",
    "start": "2613570",
    "end": "2619180"
  },
  {
    "text": "are also quite useful in all their scenarios for example we can use in certain platforms we can use backticks",
    "start": "2619180",
    "end": "2625060"
  },
  {
    "text": "for the method names of our tests and we can include spaces so our method names are like normal sentences so you can use",
    "start": "2625060",
    "end": "2632500"
  },
  {
    "text": "them in other scenarios as well absolutely and then whenever we started out documentation was lacking okay not",
    "start": "2632500",
    "end": "2639730"
  },
  {
    "start": "2635000",
    "end": "2663000"
  },
  {
    "text": "the core Kotlin language documentation and tutorials that's very good but for",
    "start": "2639730",
    "end": "2645430"
  },
  {
    "text": "some of the other libraries and frameworks and things we were playing with and so on the documentation wasn't",
    "start": "2645430",
    "end": "2650740"
  },
  {
    "text": "quite there or it was only optimized for the the happy path so we had to do a",
    "start": "2650740",
    "end": "2655869"
  },
  {
    "text": "little bit of trial and error we had to look at some source code we had to try and you know work out what the best",
    "start": "2655869",
    "end": "2660940"
  },
  {
    "text": "practices should be ourselves yeah so so yeah so in general all good you know not",
    "start": "2660940",
    "end": "2669250"
  },
  {
    "start": "2663000",
    "end": "2712000"
  },
  {
    "text": "too much cortisone yeah how would we do it differently again well maybe",
    "start": "2669250",
    "end": "2674700"
  },
  {
    "text": "you know with the benefit of hindsight we'd have been a bit more adventurous you know in some ways again we had all",
    "start": "2674700",
    "end": "2680940"
  },
  {
    "text": "the the pins and the privileges of being an early adopter there were some issues",
    "start": "2680940",
    "end": "2686160"
  },
  {
    "text": "for libraries that we were using it was a little bit awkward from Cortland and that we wrote us some Cortland wrapper",
    "start": "2686160",
    "end": "2692640"
  },
  {
    "text": "classes you know just to smooth out some of the speed bumps and using the library but the good news is those Kotlin",
    "start": "2692640",
    "end": "2699000"
  },
  {
    "text": "wrappers now exist okay so you know the overwhelming majority of java libraries that you'll use that are under active",
    "start": "2699000",
    "end": "2704910"
  },
  {
    "text": "and development they now have Kotlin wrappers built in you know so that's pretty much gone away in terms of",
    "start": "2704910",
    "end": "2712560"
  },
  {
    "start": "2712000",
    "end": "2760000"
  },
  {
    "text": "frameworks again we ended up being on adventurous so we stuck with dagger for",
    "start": "2712560",
    "end": "2717780"
  },
  {
    "text": "dependency injection if we were doing it again you know today we would be experimenting with coin Kotlin test has",
    "start": "2717780",
    "end": "2725160"
  },
  {
    "text": "come an awful long way since the early days you know some of the the issues we encountered have been ironed out and so",
    "start": "2725160",
    "end": "2732150"
  },
  {
    "text": "on so again if we were starting it from scratch we'd give that a go and so on and as Eamonn was saying we'd spend less",
    "start": "2732150",
    "end": "2739230"
  },
  {
    "text": "time working with reactive streams and more time working with co-routines you",
    "start": "2739230",
    "end": "2744240"
  },
  {
    "text": "know for the the simple to medium cases we would have gone straight to cool routines and we would have saved the",
    "start": "2744240",
    "end": "2749820"
  },
  {
    "text": "reactive stuff for really hard things for you were getting large volumes of information coming at you and there is",
    "start": "2749820",
    "end": "2755580"
  },
  {
    "text": "the the danger of needing to push back and control the flow of information and so on yeah so another thing that we'd",
    "start": "2755580",
    "end": "2762570"
  },
  {
    "start": "2760000",
    "end": "2810000"
  },
  {
    "text": "probably be looking at in the future we've written quite a few xamarin beer stops because we have to develop for our clients on iOS and Android and we're",
    "start": "2762570",
    "end": "2770849"
  },
  {
    "text": "playing close attention to Collin native so xamarin works it's stable we actually",
    "start": "2770849",
    "end": "2776670"
  },
  {
    "text": "quite like it there it works quite well you need to have your iOS layer in there as well so that's Swift you need to have",
    "start": "2776670",
    "end": "2782070"
  },
  {
    "text": "your Android layer in there so that's going to be Kotlin and and then you've also got xamarin in there which is C",
    "start": "2782070",
    "end": "2787440"
  },
  {
    "text": "sharp so you've got three things and play here well Kotlin native and these multi-platform libraries will allow us to do is to develop that bit that shared",
    "start": "2787440",
    "end": "2795330"
  },
  {
    "text": "code in Kotlin and that will make the whole thing a lot easier now this is still beta and but it's something that",
    "start": "2795330",
    "end": "2801089"
  },
  {
    "text": "we were playing with we're doing a watch workshop actually a Cortland conf on this and and this is definitely",
    "start": "2801089",
    "end": "2807240"
  },
  {
    "text": "something we'll be paying close attention to absolutely so in summary just to finish off so all of",
    "start": "2807240",
    "end": "2814200"
  },
  {
    "start": "2810000",
    "end": "2867000"
  },
  {
    "text": "your existing skill sets remain relevant you know all the knowledge you have of the JVM and Java and so on you keep that",
    "start": "2814200",
    "end": "2820170"
  },
  {
    "text": "if you're an experienced Java developer the learning curve is gentle and straightforward you know you might not",
    "start": "2820170",
    "end": "2826590"
  },
  {
    "text": "even need to go in any training but I didn't say that okay the interns grads or that kind of thing",
    "start": "2826590",
    "end": "2833640"
  },
  {
    "text": "they that they'll pick it up in no time at all developers with functional experience from Java 8 or C sharp or",
    "start": "2833640",
    "end": "2840600"
  },
  {
    "text": "Swift you know they'll they'll adopt it very easily so that the only peon at the end of the day is whenever you need to",
    "start": "2840600",
    "end": "2846120"
  },
  {
    "text": "go back to Java you know it's a little bit like me whenever I fully transition from C++ to Java and then you know went",
    "start": "2846120",
    "end": "2853440"
  },
  {
    "text": "back to C++ again and I said okay I knew that object to do something else don't it and there's some other thing that you",
    "start": "2853440",
    "end": "2859260"
  },
  {
    "text": "need to do so whenever you go back from Cortland to Java you will start missing Cortland now very",
    "start": "2859260",
    "end": "2865740"
  },
  {
    "text": "very quickly yeah so a final quote here from our director of business development Matt looking incredibly",
    "start": "2865740",
    "end": "2872400"
  },
  {
    "start": "2867000",
    "end": "2904000"
  },
  {
    "text": "young as always so you know that the best thing about Cortland for us is that it gives us a benefit with our customers",
    "start": "2872400",
    "end": "2879240"
  },
  {
    "text": "you know so we can do the agile thing our Sprint's go faster you know what we",
    "start": "2879240",
    "end": "2884310"
  },
  {
    "text": "make more progress there's less code to review less code to store in version control and maintain and so on so that",
    "start": "2884310",
    "end": "2891270"
  },
  {
    "text": "gives us an advantage in the market and increased customer happiness and that's what we're all after at the end of the",
    "start": "2891270",
    "end": "2897840"
  },
  {
    "text": "day you",
    "start": "2897840",
    "end": "2904020"
  }
]