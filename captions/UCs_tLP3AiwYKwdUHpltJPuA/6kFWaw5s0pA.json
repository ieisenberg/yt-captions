[
  {
    "start": "0",
    "end": "35000"
  },
  {
    "text": "hello everybody I'm Mark Matson uh I have been doing data stuff for about 30",
    "start": "8679",
    "end": "14080"
  },
  {
    "text": "years now and I started as a programmer moved into operations I've done pretty",
    "start": "14080",
    "end": "19760"
  },
  {
    "text": "much every job in it uh I have been you know a CIO and a CTO I've been a",
    "start": "19760",
    "end": "25199"
  },
  {
    "text": "developer I've been a DBA I've been a janitor in a data center which is in fact how I learned about Mainframe",
    "start": "25199",
    "end": "30759"
  },
  {
    "text": "programming uh janitors have a lot of free time it's a good job if you're an it so uh I'm going to talk just about",
    "start": "30759",
    "end": "38800"
  },
  {
    "start": "35000",
    "end": "175000"
  },
  {
    "text": "some analogies now one of the things about analogies in the big data market",
    "start": "38800",
    "end": "44440"
  },
  {
    "text": "is that they're all wrong um and the thing is if you use a bad analogy to",
    "start": "44440",
    "end": "51079"
  },
  {
    "text": "explain something to somebody else then you frame the problem incorrectly and",
    "start": "51079",
    "end": "56520"
  },
  {
    "text": "then you think about the problem incorrectly and so part of what I want to back in this talk is just some ways",
    "start": "56520",
    "end": "62680"
  },
  {
    "text": "of thinking about problems a little bit differently uh as an example the Horseless Carriage um the Horseless",
    "start": "62680",
    "end": "69040"
  },
  {
    "text": "Carriage is how people talked about cars for many years and the problem is that",
    "start": "69040",
    "end": "74520"
  },
  {
    "text": "when you think about it as a Horseless Carriage you think about it as a carriage and if you look at one of these",
    "start": "74520",
    "end": "79560"
  },
  {
    "text": "early Horseless carriages this is not the earliest but it's the best picture I have it's a carriage with Carriage",
    "start": "79560",
    "end": "85079"
  },
  {
    "text": "steering and carriage brakes and everything else and an engine strap to it the one before this one one The",
    "start": "85079",
    "end": "91200"
  },
  {
    "text": "Carriage was pulled by a motor on four wheels harnessed to the carriage so",
    "start": "91200",
    "end": "97360"
  },
  {
    "text": "people were thinking about it exactly as a carriage problem not thinking here's the technology what is the capability",
    "start": "97360",
    "end": "103360"
  },
  {
    "text": "that I want and how can I use the technology to give me that capability which was driving a car um likewise in",
    "start": "103360",
    "end": "112119"
  },
  {
    "text": "the in the Big Data world we have terrible analogies data lake is a great example I hate the marketing around data",
    "start": "112119",
    "end": "118240"
  },
  {
    "text": "Lake uh Lakes occur in nature you don't make Lakes they just",
    "start": "118240",
    "end": "124479"
  },
  {
    "text": "exist and a lake is full of what water it's full of undifferentiated stuff so a",
    "start": "124479",
    "end": "132040"
  },
  {
    "text": "data lake is just a place with a bunch of bits in it but you can't tell one set of bits from another set of bits but",
    "start": "132040",
    "end": "138560"
  },
  {
    "text": "it's important to be able to categorize and sort and differentiate data and so when you start thinking about the data",
    "start": "138560",
    "end": "144120"
  },
  {
    "text": "Lake you start thinking about just dumping the data in don't worry about it or as Devin would call it a data",
    "start": "144120",
    "end": "150760"
  },
  {
    "text": "Reservoir right you at least have the engineering to build a dam after which all of the the data piles up behind it",
    "start": "150760",
    "end": "157280"
  },
  {
    "text": "and floods all of the infrastructure drowning everything that's inside and when I first started doing data oriented",
    "start": "157280",
    "end": "164280"
  },
  {
    "text": "systems like Big Data Systems back in the 90s which would have been machine learning for fraud detection and things",
    "start": "164280",
    "end": "170720"
  },
  {
    "text": "like that or just basic data warehousing business intelligence um of course back then big",
    "start": "170720",
    "end": "176480"
  },
  {
    "start": "175000",
    "end": "325000"
  },
  {
    "text": "meant you know 50 gigabytes but it was the same problem the whole whole idea there was early on just just back up all",
    "start": "176480",
    "end": "182920"
  },
  {
    "text": "of your databases into this one big database and you have a big pile of data and you ended up with a data junkyard",
    "start": "182920",
    "end": "189239"
  },
  {
    "text": "and now you're just going to end up with a polluted data link we know this approach this mental model of how to",
    "start": "189239",
    "end": "194280"
  },
  {
    "text": "think about the problem doesn't work a new one that's different from the past is that today we have more data from",
    "start": "194280",
    "end": "200760"
  },
  {
    "text": "many more sources than we did previously and so people have talked about data exhaust I think Splunk marketing uses",
    "start": "200760",
    "end": "208200"
  },
  {
    "text": "data exhaust as an analogy which is great if you're thinking about choking on the fumes of the applications",
    "start": "208200",
    "end": "215360"
  },
  {
    "text": "that you're running and you're thinking about data as a byproduct it's you know",
    "start": "215360",
    "end": "220560"
  },
  {
    "text": "data is probably the most important part of your data processing job your programs operate on data and to think",
    "start": "220560",
    "end": "227959"
  },
  {
    "text": "about it as exhaust it's sort of like this cloud of stuff there's no structure to it there's no pattern to it and once",
    "start": "227959",
    "end": "234920"
  },
  {
    "text": "it's emitted you don't think about it anymore the problem is that data has a life of its own that goes on for a long",
    "start": "234920",
    "end": "240640"
  },
  {
    "text": "time and one of the final analogies is is data is the new oil right looking at",
    "start": "240640",
    "end": "246720"
  },
  {
    "text": "the economic aspects of it they say well it's a resource and you can process it into many different forms and and make",
    "start": "246720",
    "end": "253120"
  },
  {
    "text": "money off of it doing this or run your business better doing that and that's actually not a bad analogy it it it",
    "start": "253120",
    "end": "259280"
  },
  {
    "text": "works it also works in the sense that there are data spills um privacy leaks",
    "start": "259280",
    "end": "265360"
  },
  {
    "text": "uh people Privateer with data they take it hostage and blackmail you with it so",
    "start": "265360",
    "end": "270600"
  },
  {
    "text": "it it fits for both models but the real thing about data is that it's a choice",
    "start": "270600",
    "end": "277479"
  },
  {
    "text": "it's your choice when you write an application when you write an application you have data structures you",
    "start": "277479",
    "end": "284479"
  },
  {
    "text": "structure the data in your code and then you're using persistence layers of one sort or another to store and use that",
    "start": "284479",
    "end": "291840"
  },
  {
    "text": "data and what you choose to record and what you choose to process is what's",
    "start": "291840",
    "end": "297440"
  },
  {
    "text": "important what you choose to make measure in an application what you choose to log or not log is important I",
    "start": "297440",
    "end": "304560"
  },
  {
    "text": "just sat in on the Pinterest case study and one of the things at the end of his talk was pay attention to what you log",
    "start": "304560",
    "end": "311440"
  },
  {
    "text": "log as much as possible about your operations if you expect to be in a highs scale environment that is the",
    "start": "311440",
    "end": "318199"
  },
  {
    "text": "choice that you're making and that's the same whether you're building Erp systems or building webscale sites so when you",
    "start": "318199",
    "end": "326680"
  },
  {
    "text": "look at these analogies they frame how you think about things and you know one of the questions is is",
    "start": "326680",
    "end": "332039"
  },
  {
    "text": "how you know we got to some of the places we got and I'm sort of a a computer historian as well as doing",
    "start": "332039",
    "end": "339280"
  },
  {
    "text": "geeky you know data stuff and I love some of these old quotes you know there are there are lots of things out there",
    "start": "339280",
    "end": "346560"
  },
  {
    "text": "we didn't know existed before and so one of the things I like to look at um is is looking at past ways of organizing data",
    "start": "346560",
    "end": "353479"
  },
  {
    "text": "now last year I talked about clay tablets and you know Sumerian information hyper cubes and things like",
    "start": "353479",
    "end": "359440"
  },
  {
    "text": "that because they actually invented the multi-dimensional data model 6,000 years before the patent in",
    "start": "359440",
    "end": "366039"
  },
  {
    "start": "366000",
    "end": "480000"
  },
  {
    "text": "1962 um so I'm just going to go back this time to some paper era stuff around",
    "start": "366039",
    "end": "371080"
  },
  {
    "text": "you know the Elizabethan era because that's when books really took off so we're talking 1550 to",
    "start": "371080",
    "end": "376759"
  },
  {
    "text": "1600 and we have commercial printing presses you know printing is now gone wild everybody's got paper and books and",
    "start": "376759",
    "end": "384199"
  },
  {
    "text": "the thing that was unique is that instead of personally transcribed copies printing presses produce exact copies so",
    "start": "384199",
    "end": "391319"
  },
  {
    "text": "now we can have an exact copy of the same thing many times spread over many places um we solved problems just like",
    "start": "391319",
    "end": "398360"
  },
  {
    "text": "data problems today uh the data problem of how you serialize objects for example",
    "start": "398360",
    "end": "403919"
  },
  {
    "text": "you know do I use Avro do I use Thrift do I use some custom XML um it's just",
    "start": "403919",
    "end": "410120"
  },
  {
    "text": "like font standardization the the principle there is that you're writing out data that",
    "start": "410120",
    "end": "415759"
  },
  {
    "text": "somebody else has to read now when we had Latin texts there were three",
    "start": "415759",
    "end": "420879"
  },
  {
    "text": "different variations well there were more than that but three very common variations of Latin text one of the",
    "start": "420879",
    "end": "427759"
  },
  {
    "text": "texts was for the academics one of the texts was for the religious Scholars one",
    "start": "427759",
    "end": "433000"
  },
  {
    "text": "of the texts was for the The non-religious Scholar the the you know",
    "start": "433000",
    "end": "438440"
  },
  {
    "text": "well we we won't get into it now but the the philosopher and the font that you wrote",
    "start": "438440",
    "end": "444319"
  },
  {
    "text": "could not be read by the other classes unless they were trained to read that it's very much like writing data into",
    "start": "444319",
    "end": "450280"
  },
  {
    "text": "Hadoop and then having to have an input output format that you have to bind into a program essentially customizing apis",
    "start": "450280",
    "end": "456440"
  },
  {
    "text": "for everything or writing out formats that other people can't read the single aspect of font standardization plays out",
    "start": "456440",
    "end": "463319"
  },
  {
    "text": "in the database world in the form of SQL as a least common denominator for describing data sets now during this",
    "start": "463319",
    "end": "471560"
  },
  {
    "text": "period we went from 8 million books to 200 million books and the population of",
    "start": "471560",
    "end": "477240"
  },
  {
    "text": "Europe was much smaller at that time than it is today obviously and so one of the the things we ended up with was how",
    "start": "477240",
    "end": "482680"
  },
  {
    "text": "do you categorize data where do you put this data data is recorded into books at that time so that's the container The",
    "start": "482680",
    "end": "489280"
  },
  {
    "text": "Logical container of structure and in the El Elizabethan era you basically had two choices sacred profane sacred data",
    "start": "489280",
    "end": "497879"
  },
  {
    "text": "the religious stuff profane everything else and so when you have these books you you just shove them in the library",
    "start": "497879",
    "end": "503919"
  },
  {
    "text": "they're in two things there's maybe 50 of them you chain them to the shelves it's not really a big deal but when you start to get so many books being",
    "start": "503919",
    "end": "510479"
  },
  {
    "text": "produced you have new problems so Along Comes bacon uh not that bacon Francis",
    "start": "510479",
    "end": "516279"
  },
  {
    "text": "Bacon and Francis Bacon of course you know he's looking at the way the Vatican did it he's looking at the classical era",
    "start": "516279",
    "end": "522919"
  },
  {
    "text": "and he reclassifies knowledge and he says well actually there's three categorizations you know instead of",
    "start": "522919",
    "end": "528720"
  },
  {
    "text": "sacred and profane we're going to have history posy and philosophy history in his world was everything that",
    "start": "528720",
    "end": "535320"
  },
  {
    "text": "happened posie was everything that you can imagine could possibly happen that is fiction and philosophy is everything",
    "start": "535320",
    "end": "542480"
  },
  {
    "text": "that theoretically or actually can occur and so he had this Division and he",
    "start": "542480",
    "end": "547760"
  },
  {
    "text": "started taxonomy around data and knowledge so you get into the 17 and 1800s now we're talking about the the",
    "start": "547760",
    "end": "554480"
  },
  {
    "text": "Georgian era natural philosophy the scientific revolutions the enlightenments um and when this happened",
    "start": "554480",
    "end": "562600"
  },
  {
    "text": "um everybody was making even more books the number of books doubles again during this period and the variety of",
    "start": "562600",
    "end": "570040"
  },
  {
    "start": "565000",
    "end": "626000"
  },
  {
    "text": "information in the books the ability to reproduce these things creates another explosion we get into the Victorian era",
    "start": "570040",
    "end": "575480"
  },
  {
    "text": "we're now 300 years on from Francis Bacon and the information problem of the day is industrial printing because",
    "start": "575480",
    "end": "582480"
  },
  {
    "text": "industrial printing produces books it's such an incredible rate that you no",
    "start": "582480",
    "end": "587640"
  },
  {
    "text": "longer have the ability to properly store and manage them but it's not just books now we have newspapers we have the",
    "start": "587640",
    "end": "593360"
  },
  {
    "text": "equivalent of modern-day magazines we have Leaf leers running wild in the streets and",
    "start": "593360",
    "end": "599880"
  },
  {
    "text": "this explosion and explosion of specialized knowledge creates the need for more and more taxonomy which is ways",
    "start": "599880",
    "end": "607839"
  },
  {
    "text": "of categorizing and storing information and levels of indirection you now have",
    "start": "607839",
    "end": "613320"
  },
  {
    "text": "to think not just about a library you walk in and find the book you're looking for because there's 50 books there's now",
    "start": "613320",
    "end": "619320"
  },
  {
    "text": "5,000 books in a library how do you organize the shelves to find those books and how do you organize knowledge inside",
    "start": "619320",
    "end": "625240"
  },
  {
    "text": "of those books and these old models had no levels of indirection so people started paying attention to library",
    "start": "625240",
    "end": "631480"
  },
  {
    "start": "626000",
    "end": "681000"
  },
  {
    "text": "science which brings us into the modern era essentially with uh Melville Dewey",
    "start": "631480",
    "end": "637160"
  },
  {
    "text": "and I'll point out a few things about him which will be relevant later dwey came up with a Dewey",
    "start": "637160",
    "end": "643000"
  },
  {
    "text": "classification system which was for a period the most common Library classification system on the planet it's",
    "start": "643000",
    "end": "648560"
  },
  {
    "text": "taxonomy basically it's a top down treest structured orientation where you",
    "start": "648560",
    "end": "653920"
  },
  {
    "text": "navigate down a tree like a be tree only not a b tree and you get down to a shelf of books and that's where you land and",
    "start": "653920",
    "end": "662720"
  },
  {
    "text": "he built this to help you get books onto the shelves and for librarians to help you find the books that you needed he",
    "start": "662720",
    "end": "669160"
  },
  {
    "text": "was an efficiency expert so you'll notice his name uh normally Melville would be spelled v i l l e but he",
    "start": "669160",
    "end": "676000"
  },
  {
    "text": "stripped off the L and E and changed his name legally because it was more efficient to strip those two letters off",
    "start": "676000",
    "end": "681240"
  },
  {
    "start": "681000",
    "end": "725000"
  },
  {
    "text": "it was all about operational efficiency the other person that he was competing with during this era was Charles cutter",
    "start": "681240",
    "end": "688480"
  },
  {
    "text": "cutter had the cut classification system which a lot of University libraries still use today the cutter system of",
    "start": "688480",
    "end": "694839"
  },
  {
    "text": "course managing knowledge not just books um and he designed a system that was not",
    "start": "694839",
    "end": "702240"
  },
  {
    "text": "top down it was bottom up like a faceted classification model so as you add",
    "start": "702240",
    "end": "707560"
  },
  {
    "text": "attributes you expand the system it's like the difference between the schema and a relational database and the schema",
    "start": "707560",
    "end": "714680"
  },
  {
    "text": "in a sparse table store something like hbas where it can be flexible and it can",
    "start": "714680",
    "end": "719880"
  },
  {
    "text": "adapt over time except that in that era it was all in paper which made it a lot harder now what this gives you is a",
    "start": "719880",
    "end": "726240"
  },
  {
    "start": "725000",
    "end": "799000"
  },
  {
    "text": "bottomup orientation it gives you a model of flexible information",
    "start": "726240",
    "end": "731680"
  },
  {
    "text": "architecture and lets you identify a single book see the thing",
    "start": "731680",
    "end": "737279"
  },
  {
    "text": "about the Dewey system is that it's a block oriented model um people always ask me why I look at library science",
    "start": "737279",
    "end": "743240"
  },
  {
    "text": "it's because it's like a database a shelf is like a block the books on the shelves are like records and the Dewey",
    "start": "743240",
    "end": "749600"
  },
  {
    "text": "Decimal System says you can find this book here and then you have to scan that",
    "start": "749600",
    "end": "755800"
  },
  {
    "text": "bookshelf to find that book which is exactly like how Hadoop works right the basic Hadoop model is there's a 64 or",
    "start": "755800",
    "end": "762079"
  },
  {
    "text": "256 megabyte chunk Now scan that to find the record that you're interested in now",
    "start": "762079",
    "end": "767920"
  },
  {
    "text": "if you use H files or something of course you have Bloom filters and other things on the end of that but that's",
    "start": "767920",
    "end": "773160"
  },
  {
    "text": "more like the cutter model the cutter model says here's an identifier it is a unique identifier for the single thing",
    "start": "773160",
    "end": "779240"
  },
  {
    "text": "and it's immutable if you come up with a new book a new version of the same book",
    "start": "779240",
    "end": "785399"
  },
  {
    "text": "A book with the same title it's going to get a different identifier right that is essentially saying that there is",
    "start": "785399",
    "end": "791760"
  },
  {
    "text": "immutability in the data structures which gets you a totally different range of behaviors and ease of finding",
    "start": "791760",
    "end": "796800"
  },
  {
    "text": "information but who won doy won doy won",
    "start": "796800",
    "end": "803480"
  },
  {
    "start": "799000",
    "end": "913000"
  },
  {
    "text": "because of pragmatism right it wasn't that his model was better in fact his model was",
    "start": "803480",
    "end": "809720"
  },
  {
    "text": "worse for most things but for the problems of the day and the technologies",
    "start": "809720",
    "end": "815240"
  },
  {
    "text": "that he was using it worked really well and the Technologies are paper card catalogs and paper systems where every",
    "start": "815240",
    "end": "822079"
  },
  {
    "text": "time you have to do something you just scrawl it onto the end whereas the cutter system meant having to do the equivalent of like a a tree balance and",
    "start": "822079",
    "end": "830079"
  },
  {
    "text": "so it was good enough to get the job done without overworking people on the paper front the other side of it is far",
    "start": "830079",
    "end": "836920"
  },
  {
    "text": "more interesting he solved the inest problem the real problem Dewey solved was that",
    "start": "836920",
    "end": "843160"
  },
  {
    "text": "libraries received books faster than Librarians could put them onto bookshelves and so if you can't get a",
    "start": "843160",
    "end": "849160"
  },
  {
    "text": "book onto a shelf fast enough then the books pile up and eventually they start throwing out books which is exactly what",
    "start": "849160",
    "end": "855160"
  },
  {
    "text": "happened in many big libraries they could not afford the number of people to put it on it's like the equivalent of",
    "start": "855160",
    "end": "861959"
  },
  {
    "text": "trying to run a website with a database behind it like Oracle that can't scale",
    "start": "861959",
    "end": "867440"
  },
  {
    "text": "past the size of that one box because you can't afford it and so he solved the problem of ingest by making it very",
    "start": "867440",
    "end": "874680"
  },
  {
    "text": "efficient to very quickly get shelves on the book or books on the shelves because it doesn't matter exactly where that",
    "start": "874680",
    "end": "880639"
  },
  {
    "text": "thing goes it just goes into this bucket the other thing to pay attention to libraries for is how the Librarians",
    "start": "880639",
    "end": "886320"
  },
  {
    "text": "themselves Shel books interestingly you'll find that they invented things like the quick sort the shell sort the",
    "start": "886320",
    "end": "892720"
  },
  {
    "text": "insert sort but Librarians shelving Books use adaptive sort algorithms Compu",
    "start": "892720",
    "end": "899000"
  },
  {
    "text": "computer scientists try to find the best sort algorithm and so the quick sorts the best sort unless the cardinality of",
    "start": "899000",
    "end": "904800"
  },
  {
    "text": "the data or the histogram distribution of values and the skew and the data is a certain way in which case the insert",
    "start": "904800",
    "end": "910720"
  },
  {
    "text": "sort is better or the shell sort is better and so understanding how these things behave is is very interesting and",
    "start": "910720",
    "end": "917199"
  },
  {
    "start": "913000",
    "end": "1025000"
  },
  {
    "text": "these guys figured all this stuff out 100 years ago what this stuff teaches us just",
    "start": "917199",
    "end": "923759"
  },
  {
    "text": "looking at sort of books and libraries and all these other things is that information does require organizing",
    "start": "923759",
    "end": "930360"
  },
  {
    "text": "principles and at first when you just have 50 or 60 of something you can dump them in this is very much like using",
    "start": "930360",
    "end": "937800"
  },
  {
    "text": "Splunk for data analysis I have one big deep clickstream data set dump it in it's great throw in my customer data my",
    "start": "937800",
    "end": "944800"
  },
  {
    "text": "product data my sales data my costs and suddenly you have to build big messy",
    "start": "944800",
    "end": "952199"
  },
  {
    "text": "systems that can't navigate anything because you have essentially one big wide search index and you can't join data and joining data is one of those",
    "start": "952199",
    "end": "959040"
  },
  {
    "text": "things that turns out to be really important and that means categorizing data into different chunks having a a",
    "start": "959040",
    "end": "964959"
  },
  {
    "text": "global schema that just tells you where to find the different data sets second thing is differences in scale require",
    "start": "964959",
    "end": "970560"
  },
  {
    "text": "different principles it was easy enough to Shelf books when we had 200 million of them worldwide it was very hard to",
    "start": "970560",
    "end": "976680"
  },
  {
    "text": "shove books when 200 million were produced every few months and so it's",
    "start": "976680",
    "end": "982000"
  },
  {
    "text": "just like today's technology Revolution where the ingest rates of data that we have coming out of the systems we have",
    "start": "982000",
    "end": "987920"
  },
  {
    "text": "today have out stripped anything that has been produced it's a it's multiple orders of magnitude shift of data rates",
    "start": "987920",
    "end": "994839"
  },
  {
    "text": "third thing is that in the adoption cycle of information there's a point where people stop paying attention to",
    "start": "994839",
    "end": "1001399"
  },
  {
    "text": "the creation of the thing and start paying attention to the consumption of it it's what happened with libraries",
    "start": "1001399",
    "end": "1006920"
  },
  {
    "text": "it's what happened with a lot of this other technology first you pay attention to how can I capture the transactions",
    "start": "1006920",
    "end": "1012440"
  },
  {
    "text": "shove the books and do other stuff and then later you think about how can I get this stuff back out how can I use it if",
    "start": "1012440",
    "end": "1019160"
  },
  {
    "text": "you can't solve the capture problem there's not much reason to pay attention to solving the query problem and that's",
    "start": "1019160",
    "end": "1025280"
  },
  {
    "start": "1025000",
    "end": "1056000"
  },
  {
    "text": "how a lot of database technologies have evolved so when you think of analogies one of the ways to think about data and",
    "start": "1025280",
    "end": "1032760"
  },
  {
    "text": "and uh databases is that you know data is to database as books are to a library",
    "start": "1032760",
    "end": "1040000"
  },
  {
    "text": "right the the data in a data structure in a program is a structure that has a",
    "start": "1040000",
    "end": "1045798"
  },
  {
    "text": "schema now when I say schema I don't mean a relational schema I mean a schema in the sense of organizing structure so",
    "start": "1045799",
    "end": "1052679"
  },
  {
    "text": "a structure in a Java program or an object or a c struct these are all structures a book has a very rigid",
    "start": "1052679",
    "end": "1060720"
  },
  {
    "start": "1056000",
    "end": "1107000"
  },
  {
    "text": "structure and the data fits into that thing the library is the collection and there's a big difference between dealing",
    "start": "1060720",
    "end": "1067200"
  },
  {
    "text": "with eaches individual items and collections that has been lost on the industry for a long time and many",
    "start": "1067200",
    "end": "1072440"
  },
  {
    "text": "programmers don't realize why set oriented models are important and they're coming back um",
    "start": "1072440",
    "end": "1079360"
  },
  {
    "text": "in a big way and the other thing is that there's a point where the printed became more important than the thing that",
    "start": "1079360",
    "end": "1084520"
  },
  {
    "text": "produced it the printer lots of History focuses on printing presses very little history focuses on how people organized",
    "start": "1084520",
    "end": "1090640"
  },
  {
    "text": "and managed the books that came out of them the same is true of the data markets and so it's a good analogy in",
    "start": "1090640",
    "end": "1097120"
  },
  {
    "text": "thinking about how one manages it because there's two sets of things here the production of stuff at scale and the",
    "start": "1097120",
    "end": "1104280"
  },
  {
    "text": "consumption of this stuff at scale and so one of the things you need",
    "start": "1104280",
    "end": "1109400"
  },
  {
    "start": "1107000",
    "end": "1263000"
  },
  {
    "text": "to think about is that when you write an application it might be Pinterest you",
    "start": "1109400",
    "end": "1114440"
  },
  {
    "text": "know huge scale application it might be a little thing for your department when you build a web app when you build a mobile app anything it's going to",
    "start": "1114440",
    "end": "1120559"
  },
  {
    "text": "produce data that is useful for that application the other thing that comes out of it though is that other people",
    "start": "1120559",
    "end": "1127080"
  },
  {
    "text": "will find that data useful there is a life cycle to data that extends well beyond your program and so when an order",
    "start": "1127080",
    "end": "1135000"
  },
  {
    "text": "for example comes in customer service needs access to that but they do things to it as well if you build a nice",
    "start": "1135000",
    "end": "1142360"
  },
  {
    "text": "data store to take orders you may discover that the model of access path",
    "start": "1142360",
    "end": "1147480"
  },
  {
    "text": "and the nesting relationships you constructed in that nested hierarchical model do not map to what customer",
    "start": "1147480",
    "end": "1154400"
  },
  {
    "text": "service need so what do they do they force you to redo your physical model or they siphon the data out and",
    "start": "1154400",
    "end": "1160679"
  },
  {
    "text": "historically what we've done for scale reasons and other reasons is to just keep moving data from system to system",
    "start": "1160679",
    "end": "1166000"
  },
  {
    "text": "and pass data around in the organization until it looks like this I've done a lot",
    "start": "1166000",
    "end": "1171559"
  },
  {
    "text": "of it work and I'm always looking at system context diagrams that show data flows of data sets that look like this",
    "start": "1171559",
    "end": "1178440"
  },
  {
    "text": "big Rat's Nest here now the thing uh I love the Douglas Adams quote in an",
    "start": "1178440",
    "end": "1183480"
  },
  {
    "text": "infinite Universe the one thing sensient life cannot afford to have is a sense of proportion because when you start",
    "start": "1183480",
    "end": "1188559"
  },
  {
    "text": "looking at this you feel like it's hopeless but it isn't hopeless it's just that sometimes you have to think Beyond",
    "start": "1188559",
    "end": "1194960"
  },
  {
    "text": "how your program produces data to how it gets used Downstream as developers and I was a",
    "start": "1194960",
    "end": "1202039"
  },
  {
    "text": "developer for a long time we think about what's inside the box and then if",
    "start": "1202039",
    "end": "1207200"
  },
  {
    "text": "somebody else uses our data that's their problem not mine the thing is that code",
    "start": "1207200",
    "end": "1212919"
  },
  {
    "text": "lives longer or or that data lives longer than your code data always lives",
    "start": "1212919",
    "end": "1218520"
  },
  {
    "text": "longer than code just like books outlasted the printers that produce them and when you look at other kinds of",
    "start": "1218520",
    "end": "1223720"
  },
  {
    "text": "Supply chains I just showed you one company system diagram and it wasn't even a big company",
    "start": "1223720",
    "end": "1229559"
  },
  {
    "text": "this is the multi-industry data flow for cheese production in one country and so",
    "start": "1229559",
    "end": "1235679"
  },
  {
    "text": "it's a very abstract one but all this stuff up here is data flows going back",
    "start": "1235679",
    "end": "1241320"
  },
  {
    "text": "and forth between all of the companies down here and so there are levels of composition of data that go beyond the",
    "start": "1241320",
    "end": "1249000"
  },
  {
    "text": "system the process and the organization to this sort of very large perspective",
    "start": "1249000",
    "end": "1254720"
  },
  {
    "text": "and that's the context within which this one little application over here runs but the data that it produces might go",
    "start": "1254720",
    "end": "1261000"
  },
  {
    "text": "all over the place and so you have to think about how data is produced what",
    "start": "1261000",
    "end": "1266080"
  },
  {
    "start": "1263000",
    "end": "1325000"
  },
  {
    "text": "its lineage is what its structure is so that other people can consume it and",
    "start": "1266080",
    "end": "1271960"
  },
  {
    "text": "other people other systems other processes that gets me to a point about design so I'm going to take a quick",
    "start": "1271960",
    "end": "1278200"
  },
  {
    "text": "Sidetrack here because really what I'm trying to get at with a lot of the things that I I talk about is better",
    "start": "1278200",
    "end": "1284520"
  },
  {
    "text": "ways of Designing systems and one of the things that we have a lot of is technical debt now technical debt is",
    "start": "1284520",
    "end": "1292440"
  },
  {
    "text": "basically just what happens when you make a decision with a trade-off right I'm going to do this now because I have",
    "start": "1292440",
    "end": "1299440"
  },
  {
    "text": "to ship in three weeks and I'll fix it in the next release so you you've taken on a dead there intentionally taken on",
    "start": "1299440",
    "end": "1306080"
  },
  {
    "text": "that debt other times you didn't know you missed a requirement you made a mistake there was a bug uh you didn't",
    "start": "1306080",
    "end": "1313320"
  },
  {
    "text": "understand uh the Pinterest talk was great for talking about we tried this and that worked for sixs we and we had",
    "start": "1313320",
    "end": "1319039"
  },
  {
    "text": "to throw it out and get a whole new different platform in and then we tried that and that you know it reminds me of the Monty Python episode with the the",
    "start": "1319039",
    "end": "1325400"
  },
  {
    "text": "swamp you know I built a castle in the Swamp People said I was crazy I did it anyway it sank into the swamp so I built",
    "start": "1325400",
    "end": "1330840"
  },
  {
    "text": "a second castle that one also sank into the swamp so I built a third castle that one burned down fell over and then sank",
    "start": "1330840",
    "end": "1336279"
  },
  {
    "text": "into the swamp but the fourth one finally stood we can avoid some of those",
    "start": "1336279",
    "end": "1341320"
  },
  {
    "text": "fourth one finally stood if we understand we're building in a swamp and what the nature of building in a swamp is and working with data is often like",
    "start": "1341320",
    "end": "1348279"
  },
  {
    "text": "that now that said a lot of times we like to blame our tools Oracle doesn't scale or",
    "start": "1348279",
    "end": "1355720"
  },
  {
    "text": "relational databases don't scale or sharding sucks it is the poor carpenter who blames his tools except that",
    "start": "1355720",
    "end": "1363360"
  },
  {
    "text": "sometimes the tools really do suck uh so think about technical debt in terms of the kinds of things you acrew in your",
    "start": "1363360",
    "end": "1370120"
  },
  {
    "text": "software portfolio from a short-term and a long-term perspective and what you'll find is the short-term stuff is going to",
    "start": "1370120",
    "end": "1377279"
  },
  {
    "text": "be mostly about your application code up here so you know you can you can do a",
    "start": "1377279",
    "end": "1383440"
  },
  {
    "text": "lot up there infrastructure architecture and design are a different nature of",
    "start": "1383440",
    "end": "1389679"
  },
  {
    "text": "problem and one of the things that I would argue is that a lot of iterative design which comes out of Agile",
    "start": "1389679",
    "end": "1395039"
  },
  {
    "text": "development and devops approaches is great for turning features fast and truly terrible for building core",
    "start": "1395039",
    "end": "1401760"
  },
  {
    "text": "infrastructure you don't build a city by not planning it and just letting a shanty town grow up you build a city by",
    "start": "1401760",
    "end": "1409720"
  },
  {
    "text": "creating zoning and building infrastructure and Roads and Water and Electric and Sewer plants that support",
    "start": "1409720",
    "end": "1417240"
  },
  {
    "text": "the things above it without constraining them too much and the balance is not",
    "start": "1417240",
    "end": "1422320"
  },
  {
    "text": "having overheavy infrastructure which we have had I would argue for a long time and not enough freedom on the front end",
    "start": "1422320",
    "end": "1429360"
  },
  {
    "text": "but if you go the other direction it's just as big of a mess and so the kinds of short-term debts you take on and the",
    "start": "1429360",
    "end": "1436000"
  },
  {
    "text": "long-term debts you you take on will manifest later and that's what leads to Big failur sometimes now when you think",
    "start": "1436000",
    "end": "1443200"
  },
  {
    "text": "about the decisions that led to these things up here shortterm intentional I",
    "start": "1443200",
    "end": "1448440"
  },
  {
    "text": "meant to do that we're not going to put this feature in or we're going to do it this way and then we'll fix it in the",
    "start": "1448440",
    "end": "1453679"
  },
  {
    "text": "next release long term it's more like design choices we're going to design it this way it will constrain what we can",
    "start": "1453679",
    "end": "1460080"
  },
  {
    "text": "do and we may have to fix it two years from now versus the unintentional things",
    "start": "1460080",
    "end": "1467080"
  },
  {
    "text": "the the flaws and how you address them methodologically there's a lot of stuff",
    "start": "1467080",
    "end": "1472760"
  },
  {
    "text": "at this conference about in particular agile and devops things up here to solve these types of problems versus you know",
    "start": "1472760",
    "end": "1480679"
  },
  {
    "text": "redesign and and over in here in the unintentional box experience and education is typically the only way we",
    "start": "1480679",
    "end": "1486320"
  },
  {
    "text": "have of getting out of that what I'd like to see more of is moving out of this box and shoving important",
    "start": "1486320",
    "end": "1491520"
  },
  {
    "text": "infrastructure decisions which in my book tend to be Hardware topologies Network topologies models of use and",
    "start": "1491520",
    "end": "1498559"
  },
  {
    "text": "persistence layers into an intentional box where we understand the trade-offs",
    "start": "1498559",
    "end": "1503760"
  },
  {
    "text": "that we are making the question is how did we get into this mess in the first place so I'm going to throw some history",
    "start": "1503760",
    "end": "1509480"
  },
  {
    "start": "1505000",
    "end": "1607000"
  },
  {
    "text": "at you um this is sort of the database industry history and what we've got here",
    "start": "1509480",
    "end": "1514760"
  },
  {
    "text": "is you know starting back in the 1960s multivalue data stores you know in a multivalue data store you could have",
    "start": "1514760",
    "end": "1521240"
  },
  {
    "text": "variable structures of Records just like we have in or Cassandra or hbas so these models have",
    "start": "1521240",
    "end": "1527720"
  },
  {
    "text": "existed for a long time we had hierarchical databases which let you build out a hierarchy which is very much",
    "start": "1527720",
    "end": "1534000"
  },
  {
    "text": "like uh for example a document model database where you have a customer and then you wrap the orders inside the",
    "start": "1534000",
    "end": "1539520"
  },
  {
    "text": "customer or the classic uh example of Mongo's you know blogs and comments",
    "start": "1539520",
    "end": "1544760"
  },
  {
    "text": "model and you make a tradeoff there and you make a trade-off here and it's exactly the same trade-off so if you",
    "start": "1544760",
    "end": "1551000"
  },
  {
    "text": "redesign literature from the 1970s for IMS you too can be a good designer",
    "start": "1551000",
    "end": "1557360"
  },
  {
    "text": "um the principles that operate Behind These pre- rational databases are all the same uh my career started with",
    "start": "1557360",
    "end": "1564520"
  },
  {
    "text": "record management systems which is basically just spitting structs onto a file system in records and you had four",
    "start": "1564520",
    "end": "1571600"
  },
  {
    "text": "Primitives for navigation you know apart from opening and closing you had the first the last previous and next there",
    "start": "1571600",
    "end": "1577120"
  },
  {
    "text": "was no index there was no B Tre there was no key to look up we had to layer those things on and the the the",
    "start": "1577120",
    "end": "1583720"
  },
  {
    "text": "databases that came about in this era like database or IMS gave us some things",
    "start": "1583720",
    "end": "1589360"
  },
  {
    "text": "like recoverability and asset transactions and moved us out of this record-oriented model where every",
    "start": "1589360",
    "end": "1595000"
  },
  {
    "text": "navigation you had to do in your code but I see Java people still do this today they write a query against a",
    "start": "1595000",
    "end": "1601279"
  },
  {
    "text": "relationship a relational database pull it into memory and then do the join in memory uh which is an iteration building",
    "start": "1601279",
    "end": "1608760"
  },
  {
    "start": "1607000",
    "end": "1638000"
  },
  {
    "text": "iterators and that's not really a good idea it's not a good idea for a key reason so I don't know how many of you",
    "start": "1608760",
    "end": "1613799"
  },
  {
    "text": "have seen Conan the Barbarian right a classic cult film what is best in life",
    "start": "1613799",
    "end": "1620000"
  },
  {
    "text": "well according to Larry Ellison what is best in life is to crush the vendors to",
    "start": "1620000",
    "end": "1625760"
  },
  {
    "text": "to uh see them driven before you and hear the lamentation of the salespeople and that's driven the the computer",
    "start": "1625760",
    "end": "1631960"
  },
  {
    "text": "industry for a long time but I would say wrong it's loose coupling reusability and scalability and that's what",
    "start": "1631960",
    "end": "1639600"
  },
  {
    "start": "1638000",
    "end": "1726000"
  },
  {
    "text": "databases pre- rational databases gave us they gave us loose coupling instead",
    "start": "1639600",
    "end": "1645760"
  },
  {
    "text": "of me writing records into a file I have this schema descriptor which just says",
    "start": "1645760",
    "end": "1651480"
  },
  {
    "text": "this is what the data looks like now I could have written something else into there but that's what I was supposed to",
    "start": "1651480",
    "end": "1657760"
  },
  {
    "text": "put in there and so somebody else can come along who wants to use my code because our key problem in those days",
    "start": "1657760",
    "end": "1664360"
  },
  {
    "text": "was reusability when I wrote a file up and so now I've got this idea of of",
    "start": "1664360",
    "end": "1670960"
  },
  {
    "text": "loose coupling where the schema is separated from the physical storage which means now some other system can",
    "start": "1670960",
    "end": "1676679"
  },
  {
    "text": "handle optimized navigation of data on disk or cached in memory my program",
    "start": "1676679",
    "end": "1682720"
  },
  {
    "text": "simply has to call the API to get it it gave us schemas which gave us",
    "start": "1682720",
    "end": "1689080"
  },
  {
    "text": "reusability of code multiple applications writing against the same data set it also gave us reusability in",
    "start": "1689080",
    "end": "1697080"
  },
  {
    "text": "the sense of data portability because back then everything had to be written through libraries and",
    "start": "1697080",
    "end": "1703240"
  },
  {
    "text": "everything had to be done all these different ways and so there was no portability of data from one place to another because you had to rewrite all",
    "start": "1703240",
    "end": "1710480"
  },
  {
    "text": "of the data in a different program different language binding third thing was scalability once I handed over a",
    "start": "1710480",
    "end": "1716720"
  },
  {
    "text": "whole set of tasks around IO to a database it could start to manage concurrency far better than individual",
    "start": "1716720",
    "end": "1723679"
  },
  {
    "text": "programs reading and writing data and so we got some great things back then which are very similar to things we have today",
    "start": "1723679",
    "end": "1731000"
  },
  {
    "start": "1726000",
    "end": "1819000"
  },
  {
    "text": "and what we've been pushing today is relational databases suck because they're too rigid therefore we need",
    "start": "1731000",
    "end": "1738120"
  },
  {
    "text": "schem of flexibility well we had schem of flexibility relational database implementation is today traded it off",
    "start": "1738120",
    "end": "1746000"
  },
  {
    "text": "and they're starting to build it back in again but what the trade-offs are is really these right here Global",
    "start": "1746000",
    "end": "1752960"
  },
  {
    "text": "validation versus local validation right the context of your program defines the",
    "start": "1752960",
    "end": "1758960"
  },
  {
    "text": "rules for what proper data is that goes in and out versus everybody must conform",
    "start": "1758960",
    "end": "1764720"
  },
  {
    "text": "to this rule schema is an assertion about data that the data looks this way",
    "start": "1764720",
    "end": "1770440"
  },
  {
    "text": "and if you have typed schemas then that they fit into those types and so Global",
    "start": "1770440",
    "end": "1776320"
  },
  {
    "text": "schema rules like a relational database has or like IMS had are very strict",
    "start": "1776320",
    "end": "1781519"
  },
  {
    "text": "these types in these columns if you try to put characters into a numeric column it's going to kick it out if you do that",
    "start": "1781519",
    "end": "1788120"
  },
  {
    "text": "in a document database it doesn't do that if you do that in hbas it doesn't do that unless you enforced these rules",
    "start": "1788120",
    "end": "1794559"
  },
  {
    "text": "so you have the ability now to decide when that's important and I think that's a really good thing um you have rules on",
    "start": "1794559",
    "end": "1801720"
  },
  {
    "text": "read versus write and that's really a useful thing too because uh for example",
    "start": "1801720",
    "end": "1806960"
  },
  {
    "text": "in systems I've built that take Telemetry data like like game Telemetry data coming in at a constant rate over",
    "start": "1806960",
    "end": "1813640"
  },
  {
    "text": "the network the games and the firmware and the devices and 100 other things change every week which means the record",
    "start": "1813640",
    "end": "1820559"
  },
  {
    "start": "1819000",
    "end": "1891000"
  },
  {
    "text": "structur varies week by week it's the same data Maybe it's been reordered maybe something new has been added if I",
    "start": "1820559",
    "end": "1826880"
  },
  {
    "text": "have to stop operation alter a table reload that table recreate",
    "start": "1826880",
    "end": "1832320"
  },
  {
    "text": "that table change code in order to write that data into that table I lose data",
    "start": "1832320",
    "end": "1837480"
  },
  {
    "text": "and that's exactly what happened to me we switched to things that just did log ingest and variable record structures I",
    "start": "1837480",
    "end": "1844360"
  },
  {
    "text": "don't have that problem anymore but I've shifted my workload I've made it easy to",
    "start": "1844360",
    "end": "1849399"
  },
  {
    "text": "ingest data very very fast and more or less know what data is there for example",
    "start": "1849399",
    "end": "1855559"
  },
  {
    "text": "if you use hbas you you know what's in there you've got variable structures your problem is if you want to read out",
    "start": "1855559",
    "end": "1861200"
  },
  {
    "text": "specific sets of data you pay the price on the outbound side because your data",
    "start": "1861200",
    "end": "1866600"
  },
  {
    "text": "typing your efficient storage and everything else are not there because they weren't done at inest so you do all",
    "start": "1866600",
    "end": "1872639"
  },
  {
    "text": "that work on the other side but we have enough CPU and we have enough IO bandwidth in a parallel system that",
    "start": "1872639",
    "end": "1878519"
  },
  {
    "text": "typically we can eat those costs on the outbound side which means that now you have a choice match the data to the",
    "start": "1878519",
    "end": "1885760"
  },
  {
    "text": "table relational models or match the table to the data predicate schemas and",
    "start": "1885760",
    "end": "1892000"
  },
  {
    "start": "1891000",
    "end": "1939000"
  },
  {
    "text": "so uh you do have problems though that sometimes you don't recognize and one of",
    "start": "1892000",
    "end": "1897399"
  },
  {
    "text": "those problems is inflexibility what you think of as",
    "start": "1897399",
    "end": "1902559"
  },
  {
    "text": "flexibility like mongodb a friend of mine is a statistician at Amazon he",
    "start": "1902559",
    "end": "1907639"
  },
  {
    "text": "deals with lots of data they built a new system for a new feature in Amazon the developers came to him and said hey",
    "start": "1907639",
    "end": "1913240"
  },
  {
    "text": "we're gonna try out for this do you mind and he said no can you give me this data and he saides I can give you",
    "start": "1913240",
    "end": "1920039"
  },
  {
    "text": "that I can build this in it'll be great so they went off they built the system they got it back he got this",
    "start": "1920039",
    "end": "1925440"
  },
  {
    "text": "stuff they did some statistical analysis and then he he was looking at",
    "start": "1925440",
    "end": "1930600"
  },
  {
    "text": "some of these things and he said this is great I need this information over here  like IMS and things before it has",
    "start": "1930600",
    "end": "1939559"
  },
  {
    "start": "1939000",
    "end": "2010000"
  },
  {
    "text": "a model that requires you to physically couple your data structure with what's",
    "start": "1939559",
    "end": "1945000"
  },
  {
    "text": "written on disk there's no loose schema model here that lets you say uh like a relational database uh",
    "start": "1945000",
    "end": "1952320"
  },
  {
    "text": "throw a new table out here you have no joins in most of these nosql databases",
    "start": "1952320",
    "end": "1958760"
  },
  {
    "text": "which means if you need flexible out on your data you have to rewrite the schema so they went away for three weeks they",
    "start": "1958760",
    "end": "1965799"
  },
  {
    "text": "recreated dumped and reloaded the database he did some more analysis a couple weeks later he needed some",
    "start": "1965799",
    "end": "1972320"
  },
  {
    "text": "different data and again three weeks to make a schema change",
    "start": "1972320",
    "end": "1978399"
  },
  {
    "text": "and this time they did it smart instead of dumb you know they didn't dump and reload they they did a lazy rewrite",
    "start": "1978399",
    "end": "1984080"
  },
  {
    "text": "pattern against it so you know you read the old data in and you write it out in the new one and over a 3-week period it churned enough data that he could do his",
    "start": "1984080",
    "end": "1990360"
  },
  {
    "text": "analysis but after that they said we're not going to use this anymore because every time we eat that and the reason is",
    "start": "1990360",
    "end": "1998120"
  },
  {
    "text": "back to that simple principle from the early days decoupling if you can decouple The",
    "start": "1998120",
    "end": "2003519"
  },
  {
    "text": "Logical model of your data from the physical model of your data whether it is relation or not you win",
    "start": "2003519",
    "end": "2010279"
  },
  {
    "text": "something and that gets us into some of these things like the cap theorem which is the Big Driver for a lot of these",
    "start": "2010279",
    "end": "2015960"
  },
  {
    "text": "nosql databases which was here's how to try and scale by eliminating things like",
    "start": "2015960",
    "end": "2021399"
  },
  {
    "text": "transaction coordination which is a key bottleneck in Data Systems anytime two",
    "start": "2021399",
    "end": "2027279"
  },
  {
    "text": "things have to synchronize you serialize and when you serialize a point you limit",
    "start": "2027279",
    "end": "2034279"
  },
  {
    "text": "paralyzation which means you limit scalability and so most systems that you look at are are down here on say the the",
    "start": "2034279",
    "end": "2041440"
  },
  {
    "text": "AP CP axis and what you're what this is is consistency partition tolerance and",
    "start": "2041440",
    "end": "2048000"
  },
  {
    "text": "availability right consistency if you write data and I read data it's consistent I'm not reading halfway in",
    "start": "2048000",
    "end": "2054040"
  },
  {
    "text": "Flight committed transactions um if you're looking at availability it's that the clients can actually get access to",
    "start": "2054040",
    "end": "2059720"
  },
  {
    "text": "the data and if you lose part of your system for example lose a disc or lose a a node um the system will hang if if",
    "start": "2059720",
    "end": "2067800"
  },
  {
    "text": "it's a if it's a CA system which is modern relational databases whereas if you are eventually consistent like",
    "start": "2067800",
    "end": "2074480"
  },
  {
    "text": "Cassandra whatever um you choose something on these axises and what what you give up is",
    "start": "2074480",
    "end": "2081760"
  },
  {
    "start": "2081000",
    "end": "2161000"
  },
  {
    "text": "consistency and that consistency tradeoff is the thing that most of these databases made because most web apps",
    "start": "2081760",
    "end": "2089440"
  },
  {
    "text": "don't need acid transactions they don't need to worry about Bank balances I",
    "start": "2089440",
    "end": "2095000"
  },
  {
    "text": "might lose a registration for a new newsletter who cares um the upload from",
    "start": "2095000",
    "end": "2101000"
  },
  {
    "text": "your mobile going to Pinterest or Instagram if it fails and you're looking",
    "start": "2101000",
    "end": "2108560"
  },
  {
    "text": "you can re-upload it's not a big deal whereas if that were a 10q filing for",
    "start": "2108560",
    "end": "2115079"
  },
  {
    "text": "the stock exchange and the filing didn't go through you're in trouble so there's",
    "start": "2115079",
    "end": "2121720"
  },
  {
    "text": "a big difference between when you do and don't need this now what are you trading off because the tradeoffs are the key",
    "start": "2121720",
    "end": "2128280"
  },
  {
    "text": "thing because you're going to inherit technical debt if you choose the wrong thing and so this is what a relational",
    "start": "2128280",
    "end": "2135920"
  },
  {
    "text": "database does for you right storage management data Access Data data navigation query optimization transactions consistency and of course a",
    "start": "2135920",
    "end": "2142640"
  },
  {
    "text": "standardized layer that's Universal on top when we started out I was doing",
    "start": "2142640",
    "end": "2147920"
  },
  {
    "text": "record management systems by the time I moved into the like few years into my career we had databases that did data",
    "start": "2147920",
    "end": "2153880"
  },
  {
    "text": "navigation handle joins for us dealt with a physical data access left me to deal with the higher level when",
    "start": "2153880",
    "end": "2159280"
  },
  {
    "text": "relational came along we got all this stuff and so a database a relational database does this if you choose not to",
    "start": "2159280",
    "end": "2166160"
  },
  {
    "start": "2161000",
    "end": "2242000"
  },
  {
    "text": "go that route this becomes your job and that's important to know a lot of times",
    "start": "2166160",
    "end": "2173119"
  },
  {
    "text": "people just assume oh I've got good enough transactions because if my database is consistent within 10",
    "start": "2173119",
    "end": "2179359"
  },
  {
    "text": "milliseconds there's no problem right wrong Google transaction",
    "start": "2179359",
    "end": "2186560"
  },
  {
    "text": "malleability and look at the Bitcoin repository failures and what you discover is that they built things with",
    "start": "2186560",
    "end": "2193280"
  },
  {
    "text": "non acid semantics for a financial system that had hundreds of millions of dollars in",
    "start": "2193280",
    "end": "2201280"
  },
  {
    "text": "it and that led you into problems where",
    "start": "2201280",
    "end": "2206720"
  },
  {
    "text": "I could do several different attacks this particular you know problem leads to uh basically the equivalent of",
    "start": "2206720",
    "end": "2214880"
  },
  {
    "text": "non-durable reads or non-isolation of transactions which is a simple way of saying it's wrong and so you can pull",
    "start": "2214880",
    "end": "2222160"
  },
  {
    "text": "out more data or pull out more money than is in there's other attacks that you can use against non-asset systems",
    "start": "2222160",
    "end": "2227920"
  },
  {
    "text": "like the difference between cash latency and physical Io if you send your requests fast enough you can withdraw",
    "start": "2227920",
    "end": "2234200"
  },
  {
    "text": "essentially from your bank account twice as much money as you have in your bank account that's why we have assd",
    "start": "2234200",
    "end": "2241079"
  },
  {
    "text": "transactions and this is argument been going on for a few years now and Google",
    "start": "2241079",
    "end": "2246319"
  },
  {
    "text": "last year wrote a paper for the F1 database which I've referenced here and I just have a few quotes from it which",
    "start": "2246319",
    "end": "2251760"
  },
  {
    "text": "essentially say this is you and your code and so over time the edge cases to deal with",
    "start": "2251760",
    "end": "2259640"
  },
  {
    "text": "eventual consistency when you need consistency outweigh the costs of",
    "start": "2259640",
    "end": "2266319"
  },
  {
    "text": "performance that you take over here from not having it and so we're going back",
    "start": "2266319",
    "end": "2273520"
  },
  {
    "text": "the F1 database is a fully transaction compliant globally distributed acid",
    "start": "2273520",
    "end": "2279920"
  },
  {
    "text": "database and a number of new databases on the market are also going this way",
    "start": "2279920",
    "end": "2285240"
  },
  {
    "text": "because it turns out that the relational model is useful enough and some of these things are useful enough that if you can relax them in certain contexts but still",
    "start": "2285240",
    "end": "2292720"
  },
  {
    "text": "maintain the rest of the model you're better off than if you threw it out and started from scratch which is where the",
    "start": "2292720",
    "end": "2297839"
  },
  {
    "text": "industry is today and that kind of brings me sort of back to you know 1985 uh when we looked at the",
    "start": "2297839",
    "end": "2304200"
  },
  {
    "text": "performance of these systems uh relational was standardized you know SQL became a standard in",
    "start": "2304200",
    "end": "2310640"
  },
  {
    "text": "1986 and that was really the opening gates for things and at that time a hierarchical database gave you far",
    "start": "2310640",
    "end": "2317440"
  },
  {
    "text": "better performance three times the performance at a whopping what was it 30",
    "start": "2317440",
    "end": "2322680"
  },
  {
    "text": "transactions per second uh or you know 100 transactions per second uh 30 iops per dis right",
    "start": "2322680",
    "end": "2329880"
  },
  {
    "text": "think about that today we're doing you know 2 million iops um but 25 years later one single SQL Server database",
    "start": "2329880",
    "end": "2336960"
  },
  {
    "text": "could do that",
    "start": "2336960",
    "end": "2339440"
  },
  {
    "start": "2338000",
    "end": "2376000"
  },
  {
    "text": "[Music]",
    "start": "2349400",
    "end": "2352449"
  },
  {
    "start": "2376000",
    "end": "2457000"
  },
  {
    "text": "is at the core is declarative language a declarative language as opposed to a procedural or imperative",
    "start": "2397560",
    "end": "2404400"
  },
  {
    "text": "language lets the machine figure it out for you in the same way a compiler can optimize the loops in your code a",
    "start": "2404400",
    "end": "2412119"
  },
  {
    "text": "database can optimize the path of IO through the engine to get the results that you want they're not perfect",
    "start": "2412119",
    "end": "2417960"
  },
  {
    "text": "anymore than compilers are perfect or jvms are perfect but they get you",
    "start": "2417960",
    "end": "2423720"
  },
  {
    "text": "something that you didn't have before the second thing is cost based op Optimizer if you know that disc costs",
    "start": "2423720",
    "end": "2429440"
  },
  {
    "text": "this much and IO here is this much a network Transit costs this much and a memory access is this much you can",
    "start": "2429440",
    "end": "2435359"
  },
  {
    "text": "choose the best path and this is important and it's the",
    "start": "2435359",
    "end": "2441480"
  },
  {
    "text": "only way you can do this is if you separate logical schema from physical",
    "start": "2441480",
    "end": "2448079"
  },
  {
    "text": "schema and you don't lock the storage model and couple it tightly to the the",
    "start": "2448079",
    "end": "2455160"
  },
  {
    "text": "representational model of the data and what this Optimizer does is it says here's all of these things that I can do",
    "start": "2455160",
    "end": "2461960"
  },
  {
    "start": "2457000",
    "end": "2568000"
  },
  {
    "text": "the way that it gets that is that the declarative language which happens to be SQL in this case The Operators are",
    "start": "2461960",
    "end": "2468920"
  },
  {
    "text": "commutative associative and distributive which means the optimizer can change the order of them why is this important well",
    "start": "2468920",
    "end": "2476240"
  },
  {
    "text": "imagine that you have 10 million customers 100 million sessions and a",
    "start": "2476240",
    "end": "2483079"
  },
  {
    "text": "couple billion clicks you can join those things based on the least populated table or the most",
    "start": "2483079",
    "end": "2490240"
  },
  {
    "text": "populated table if you choose the wrong one you burn a lot of extra time and you waste a lot of resources which",
    "start": "2490240",
    "end": "2495800"
  },
  {
    "text": "translates into wasted time in your code which translates to latency in your application and the optimizer tries to",
    "start": "2495800",
    "end": "2502920"
  },
  {
    "text": "fix this now how hard can this be oops um well this is a simple thing selecting",
    "start": "2502920",
    "end": "2509440"
  },
  {
    "text": "three table join customers two orders two products I just want to see the",
    "start": "2509440",
    "end": "2515040"
  },
  {
    "text": "customers and orders that say contain a particular product product there are nine logical plans to this nine ways of",
    "start": "2515040",
    "end": "2521200"
  },
  {
    "text": "ordering the tables ABC Cab and doing the joins now the physical",
    "start": "2521200",
    "end": "2527520"
  },
  {
    "text": "layer joins hash join merge join nested join now most of us programmers would",
    "start": "2527520",
    "end": "2533040"
  },
  {
    "text": "say oh just slap it in a hash and do that not efficient under certain levels of cardinality nested lookup would be",
    "start": "2533040",
    "end": "2540200"
  },
  {
    "text": "better or a merge would be better if they're already sorted so the possibilities the combinatorial",
    "start": "2540200",
    "end": "2546440"
  },
  {
    "text": "explosion for this simple query is 324 possible physical join plans now I want",
    "start": "2546440",
    "end": "2553119"
  },
  {
    "text": "you to think about this when you are writing a query against a Cassandra database because there is no join there",
    "start": "2553119",
    "end": "2560000"
  },
  {
    "text": "so if you have to do a join how does it happen you write a query here you write a query here you bring the tables",
    "start": "2560000",
    "end": "2566240"
  },
  {
    "text": "together and then you do it in your own code did you think about every single possible one of these joins that you",
    "start": "2566240",
    "end": "2573240"
  },
  {
    "start": "2568000",
    "end": "2712000"
  },
  {
    "text": "could do to order your operators correctly to get the optimal result I really seriously doubt it if you wrote",
    "start": "2573240",
    "end": "2580000"
  },
  {
    "text": "a pig script in Hadoop did you do this very unlikely because that's a lot of",
    "start": "2580000",
    "end": "2586359"
  },
  {
    "text": "work and it varies with the cardinality with the distribution of values and the skew in your data and so if you know",
    "start": "2586359",
    "end": "2593440"
  },
  {
    "text": "those things you'll choose one plan over another a query plan is dynamic a program is static and written by you and",
    "start": "2593440",
    "end": "2601480"
  },
  {
    "text": "so um you know what's the solution well the obvious Hadoop solution throw nodes at the problem just add hard but of",
    "start": "2601480",
    "end": "2607680"
  },
  {
    "text": "course you know I love this quote about uh the software industry and basically how software simply eats hardware for",
    "start": "2607680",
    "end": "2614200"
  },
  {
    "text": "lunch because that is what happens and since your database is web scale don't worry about it well when you write code",
    "start": "2614200",
    "end": "2620960"
  },
  {
    "text": "to do this you have one path and typically you'll write it with something like this iterators inside and you'll",
    "start": "2620960",
    "end": "2627200"
  },
  {
    "text": "iterate over this declarative languages make this a heck of a lot easier and",
    "start": "2627200",
    "end": "2632480"
  },
  {
    "text": "this will not run in parallel short story 1994 we have just sold a $1.6",
    "start": "2632480",
    "end": "2638920"
  },
  {
    "text": "million symmetric multiprocessing server with a whopping 32 cores in it which you",
    "start": "2638920",
    "end": "2644559"
  },
  {
    "text": "know in the 1990s was just amazing developer came to me with a bunch of code he had written procedural",
    "start": "2644559",
    "end": "2652040"
  },
  {
    "text": "imperative a lot of iterators opened up cursors did things like this he wrote it really tightly it was actually very",
    "start": "2652040",
    "end": "2657240"
  },
  {
    "text": "nicely written code and he told me my laptop is faster than the 32 core server",
    "start": "2657240",
    "end": "2664400"
  },
  {
    "text": "and he was convinced of this fact I saidh how can you be you know sure of this and he shows me the numbers and he",
    "start": "2664400",
    "end": "2670480"
  },
  {
    "text": "shows me the graphs and I looked at his code and I said you do realize that all of this fits in in the processor cache",
    "start": "2670480",
    "end": "2677559"
  },
  {
    "text": "um and it's single-threaded and he said yes but I round robin the data and I spray",
    "start": "2677559",
    "end": "2683520"
  },
  {
    "text": "it out to each of the 32 processors and so my reader reads this and spreads it out and so I'm doing you know and I can",
    "start": "2683520",
    "end": "2690200"
  },
  {
    "text": "get better scale than than uh your system so why would I do this and I",
    "start": "2690200",
    "end": "2695240"
  },
  {
    "text": "rewrote his code which was probably about eight or nine pages into",
    "start": "2695240",
    "end": "2700359"
  },
  {
    "text": "a series of three pages of squl statements that just happened one after another and of course I lit up all 32",
    "start": "2700359",
    "end": "2705680"
  },
  {
    "text": "cores on that system because the stat he had not looked at when he ran it on his laptop was how many threads he had",
    "start": "2705680",
    "end": "2711319"
  },
  {
    "text": "running on the database server why didn't he have all the threads lit up because he wrote serialized code the",
    "start": "2711319",
    "end": "2717280"
  },
  {
    "text": "problem is that no amount of Hardware solves serialized code and it's very hard to write parallel code and so yes",
    "start": "2717280",
    "end": "2725760"
  },
  {
    "text": "things like map ruce give you Shuffle operators and other things but you can still write very sloppy code it's very",
    "start": "2725760",
    "end": "2732160"
  },
  {
    "text": "hard to do um a more realistic example you know a query like this which is what most say bi query tools generate out the",
    "start": "2732160",
    "end": "2739640"
  },
  {
    "text": "back end 22 million possibilities that's a lot of choices",
    "start": "2739640",
    "end": "2746119"
  },
  {
    "text": "and you have to come up with the optimal answer for that in a few milliseconds declarative cost-based",
    "start": "2746119",
    "end": "2751680"
  },
  {
    "text": "optimizers just in time compilers query compilers things like that solve these problems I'm not saying use SQL to solve",
    "start": "2751680",
    "end": "2759400"
  },
  {
    "text": "data processing problems use declarative languages data log is perfectly",
    "start": "2759400",
    "end": "2764440"
  },
  {
    "text": "acceptable alternative to SQL and it's a logic language I don't really like logic languages I prefer functional languages",
    "start": "2764440",
    "end": "2770920"
  },
  {
    "text": "but that's what it is key point about just add hardware and if you're interested in this side of things I've",
    "start": "2770920",
    "end": "2776599"
  },
  {
    "text": "stripped all the database performance stuff out of this talk this is am doll's law right this blue line that represents",
    "start": "2776599",
    "end": "2785920"
  },
  {
    "text": "adding processor and getting better performance linear scale if I add four processors it's 400% faster if I add",
    "start": "2785920",
    "end": "2792559"
  },
  {
    "text": "eight processors it's 800% faster with 10% of your code being serial 10% having",
    "start": "2792559",
    "end": "2800720"
  },
  {
    "text": "to do some sort of rendevu or create a lock and block something 10% having to do a boundary synchronization you know",
    "start": "2800720",
    "end": "2807240"
  },
  {
    "text": "basically a map reduce so you can do the next map reduce 10% overhead leads to this curve",
    "start": "2807240",
    "end": "2815960"
  },
  {
    "text": "what does this mean it means that right here you stop adding processors or you stop adding nodes why",
    "start": "2815960",
    "end": "2823079"
  },
  {
    "text": "well my fourth processor gives me the equivalent of three processors my fifth",
    "start": "2823079",
    "end": "2829200"
  },
  {
    "text": "node gets me one/ half of a node real life example of this was in",
    "start": "2829200",
    "end": "2835280"
  },
  {
    "text": "1993 I was I ran TPC benchmarks and I was running a benchmark on a four processor HP server cost $2 million each",
    "start": "2835280",
    "end": "2843359"
  },
  {
    "text": "proc board cost about a quarter of a million dollars in the HP server they had 15% overhead at 15% overhead the",
    "start": "2843359",
    "end": "2852400"
  },
  {
    "text": "simple calculation of amdall law which is not the best one by the way that fourth processor got me Net Zero it got",
    "start": "2852400",
    "end": "2858839"
  },
  {
    "text": "me about 10% of a processor $250,000 buys me 10% Improvement and",
    "start": "2858839",
    "end": "2864880"
  },
  {
    "text": "everything that you're doing is going to have some level of parallel and efficiency so it's important that you",
    "start": "2864880",
    "end": "2870280"
  },
  {
    "text": "look at your data you look at your algorithms and your code and you try and figure out where useful parallelism ends",
    "start": "2870280",
    "end": "2876960"
  },
  {
    "text": "because throwing another hundred nodes of Hadoop cluster or Cassandra cluster or terod dat at something won't solve",
    "start": "2876960",
    "end": "2883520"
  },
  {
    "text": "the problem if the algorithm or the query can't take use of it efficiently",
    "start": "2883520",
    "end": "2890000"
  },
  {
    "start": "2889000",
    "end": "2944000"
  },
  {
    "text": "and so if you want to know more about this the highfrequency trading talk that's this afternoon that Martin uh",
    "start": "2890000",
    "end": "2895319"
  },
  {
    "text": "Thomson Tom Thompson Thomas does um is uh is really good because he gets into a",
    "start": "2895319",
    "end": "2902000"
  },
  {
    "text": "lot of the theoretical constructs but he's talking about it from the perspective of messaging and queuing systems",
    "start": "2902000",
    "end": "2907480"
  },
  {
    "text": "and as it turns out it's exactly the same in principle so um I want to give you a real life example in case you",
    "start": "2907480",
    "end": "2913680"
  },
  {
    "text": "don't believe me eBay 6 pyte data warehouse running in a standard terata",
    "start": "2913680",
    "end": "2919000"
  },
  {
    "text": "20 pyte compressed obviously uh Hadoop cluster and then this thing called Singularity which is a a teradata",
    "start": "2919000",
    "end": "2925280"
  },
  {
    "text": "appliance model database that's got the really big slow discs in it that has 40 pedabytes in it now um I've had the",
    "start": "2925280",
    "end": "2931280"
  },
  {
    "text": "opportunity to actually run a couple of queries against this thing in a trillion row table with about a 40 to 50 50",
    "start": "2931280",
    "end": "2937119"
  },
  {
    "text": "billion row return set filter on this takes 30 seconds um this is the",
    "start": "2937119",
    "end": "2943640"
  },
  {
    "text": "important thing though that AMD doll's law is about resource efficiency and parallel efficiency sloppy code and just",
    "start": "2943640",
    "end": "2951119"
  },
  {
    "start": "2944000",
    "end": "3083000"
  },
  {
    "text": "add nodes is not efficient we learned this with symmetric multiprocessors you",
    "start": "2951119",
    "end": "2956240"
  },
  {
    "text": "know multicord chips back in the 90s even in the",
    "start": "2956240",
    "end": "2961440"
  },
  {
    "text": "80s if your code or your system that underlies your code is not not efficient",
    "start": "2961440",
    "end": "2968640"
  },
  {
    "text": "that is it just it wastes resources say in doing type conversions every time you read data as opposed to doing the type",
    "start": "2968640",
    "end": "2974119"
  },
  {
    "text": "conversion once before you write the data slows things down so this first",
    "start": "2974119",
    "end": "2979960"
  },
  {
    "text": "graph right here how much do things cost so normalized costs Hadoop damn cheap",
    "start": "2979960",
    "end": "2987000"
  },
  {
    "text": "right so you that that's a a per unit cost of one right that the terter DAT Appliance and the big expensive terata",
    "start": "2987000",
    "end": "2993480"
  },
  {
    "text": "nodes ridiculously costly like 30X what Hadoop costs but look at this one then",
    "start": "2993480",
    "end": "2999359"
  },
  {
    "text": "you know how many units are consumed now what we're talking about is the kind of things we do a lot of sorts Aggregates",
    "start": "2999359",
    "end": "3007319"
  },
  {
    "text": "counts groupings you know select these things group them in this way aggregate",
    "start": "3007319",
    "end": "3012680"
  },
  {
    "text": "these numbers and give me the results big ugly bulk moving parallel problems",
    "start": "3012680",
    "end": "3018359"
  },
  {
    "text": "and the data warehouse is extraordinarily efficient this thing not quite as good and of course that thing",
    "start": "3018359",
    "end": "3025359"
  },
  {
    "text": "horribly inefficient why because of things like read 64 megabytes in to pull four things out of it the inefficiencies",
    "start": "3025359",
    "end": "3033280"
  },
  {
    "text": "at scale bite you in the butt and so when you look at what does the units",
    "start": "3033280",
    "end": "3038720"
  },
  {
    "text": "consumed crossed with the cost look like normalized well that big expensive multi-million dollar pterra dat that has",
    "start": "3038720",
    "end": "3045599"
  },
  {
    "text": "six pedabytes in it costs the same as your Hado cluster and yet equivalent um this thing right here",
    "start": "3045599",
    "end": "3053000"
  },
  {
    "text": "which is modified for bulk data operations and bulk data parallel",
    "start": "3053000",
    "end": "3058040"
  },
  {
    "text": "that's about a third the cost of your Hadoop cluster for the same set of operations this blows a hole in the",
    "start": "3058040",
    "end": "3063400"
  },
  {
    "text": "argument that just add Hardware is the right model to go in the Big Data world but for which operations right for",
    "start": "3063400",
    "end": "3072240"
  },
  {
    "text": "parallel count sort aggregate operations if I was doing calculations and bulk",
    "start": "3072240",
    "end": "3077319"
  },
  {
    "text": "calculations that didn't stream through that but iterated this would be the better option probably and so you have",
    "start": "3077319",
    "end": "3084119"
  },
  {
    "start": "3083000",
    "end": "3256000"
  },
  {
    "text": "to begin to understand what your workloads are like because if you don't you'll make the wrong mistake because we're in a multi-engine world now and so",
    "start": "3084119",
    "end": "3092040"
  },
  {
    "text": "yes this thing is great for these problems but if I have a different set of problems I've got a different set of",
    "start": "3092040",
    "end": "3097520"
  },
  {
    "text": "solutions so workloads are key and there are three kinds of workloads I started",
    "start": "3097520",
    "end": "3102720"
  },
  {
    "text": "off talking about application workloads and writing data and reading data and assd transactions and consistency that's",
    "start": "3102720",
    "end": "3108559"
  },
  {
    "text": "one set of systems um brief aside I had with the guy talking about Pinterest is",
    "start": "3108559",
    "end": "3113880"
  },
  {
    "text": "that he said oh I needed asset transactions like your Pinterest people upload pictures why would you need this",
    "start": "3113880",
    "end": "3120119"
  },
  {
    "text": "and he said we get dmca takedown notices if you forget to file a DMC takedown",
    "start": "3120119",
    "end": "3126640"
  },
  {
    "text": "notice that somebody has sent you you've just broken the law and the lawyers come after you so even simple websites that",
    "start": "3126640",
    "end": "3133920"
  },
  {
    "text": "seem not to need things like assd transactions in certain cases do so what do you do well you could have a system",
    "start": "3133920",
    "end": "3140520"
  },
  {
    "text": "that records that stuff in asset transactions while you're web serving loads that can lose stuff and it doesn't matter or can be in assistant you can",
    "start": "3140520",
    "end": "3147960"
  },
  {
    "text": "write to two different services or you can go with what they did which sharted my SQL um but that's an operational",
    "start": "3147960",
    "end": "3155040"
  },
  {
    "text": "system analytic systems which is what I spend most of my time working on B query systems big analysis systems and",
    "start": "3155040",
    "end": "3161799"
  },
  {
    "text": "scientific computational systems big data processing computationally",
    "start": "3161799",
    "end": "3167640"
  },
  {
    "text": "intensive things they're all very different the natures are different so how are they different these are the key",
    "start": "3167640",
    "end": "3173680"
  },
  {
    "text": "things I'm not going to go over all of this you can download the slides if if you want to look at it in detail but basically distributed",
    "start": "3173680",
    "end": "3180319"
  },
  {
    "text": "commits problems with consistency making sure that I can't take more money out of the system than you put into the system",
    "start": "3180319",
    "end": "3188000"
  },
  {
    "text": "um scan based selective things and a key aspect of these systems and what they're good",
    "start": "3188000",
    "end": "3194440"
  },
  {
    "text": "at is whether the selectivity and retrieval are low or high selectivity is how much data do you actually filter out",
    "start": "3194440",
    "end": "3201520"
  },
  {
    "text": "down here retrieval how much data do you pull back whether it's into your process or to a client over the network analytic",
    "start": "3201520",
    "end": "3209440"
  },
  {
    "text": "computations read 100% of the data process 100% of the data and typically",
    "start": "3209440",
    "end": "3215440"
  },
  {
    "text": "put either a small set out or an entire set out these things usually summarize they don't return lists they return",
    "start": "3215440",
    "end": "3222000"
  },
  {
    "text": "Aggregates that's why bi databases actually have optimized so well and that's why that Singularity system can",
    "start": "3222000",
    "end": "3228240"
  },
  {
    "text": "do that where Hadoop can't this sort of stuff now you're into a world where if you need asset you need consistency you",
    "start": "3228240",
    "end": "3234599"
  },
  {
    "text": "go one way if you don't you have a whole new range of options that you didn't have",
    "start": "3234599",
    "end": "3239680"
  },
  {
    "text": "before and so you need to think about those workloads and think about you know performance over size versus performance",
    "start": "3239680",
    "end": "3245880"
  },
  {
    "text": "over complexity if you're interested in that unfortunately you just missed a fantastic talk by Cliff from hex data",
    "start": "3245880",
    "end": "3252160"
  },
  {
    "text": "but you can watch the video because it's being recorded uh and that's all about you know very important things here for",
    "start": "3252160",
    "end": "3258480"
  },
  {
    "text": "example in databases you would think diss are the bottleneck IO",
    "start": "3258480",
    "end": "3263799"
  },
  {
    "text": "channels are the bottleneck they're slow and I'm getting into memory in memory solves all problems which is what sap",
    "start": "3263799",
    "end": "3270280"
  },
  {
    "text": "would tell you with Hannah doesn't work that way if your algorithm is not smart",
    "start": "3270280",
    "end": "3275440"
  },
  {
    "text": "about how it moves data through the processor pipeline you spend upwards in",
    "start": "3275440",
    "end": "3281000"
  },
  {
    "text": "a relational world of 60% of your time on level one level two cash stalls you wouldn't think about this but",
    "start": "3281000",
    "end": "3288359"
  },
  {
    "text": "if that's where you're wasting all of your time more resources won't help you more memory might help you but unlikely",
    "start": "3288359",
    "end": "3295400"
  },
  {
    "text": "because the problem is is that your memory is not feeding your cash fast enough it should be able to do that why",
    "start": "3295400",
    "end": "3300760"
  },
  {
    "text": "can't it do that because the way you move the data into memory and process it is not optimized for that pushing that",
    "start": "3300760",
    "end": "3308359"
  },
  {
    "text": "into engine solves that problem that's one of the things hex data does damic does vertica does and so you know when",
    "start": "3308359",
    "end": "3315640"
  },
  {
    "text": "you think about these problems we've kind of come as an industry full circle from the the early era of we have no SQL",
    "start": "3315640",
    "end": "3321960"
  },
  {
    "text": "which is where I started to no you really need this stuff to the 2000s when everybody said no no no uh sql's bad",
    "start": "3321960",
    "end": "3329440"
  },
  {
    "text": "memcached memcached will solve all problems they'll just use key value stores for everything too you know",
    "start": "3329440",
    "end": "3335280"
  },
  {
    "text": "and Cassandra and everybody's saying we don't need no stinking SQL and then they all added SQL like languages back in but",
    "start": "3335280",
    "end": "3340480"
  },
  {
    "text": "they called them hql or cql or whatever and now we're back with you know the Google paper and other things and post",
    "start": "3340480",
    "end": "3347440"
  },
  {
    "text": "relational systems like uh metotic or um snowflake which are extended relational",
    "start": "3347440",
    "end": "3355240"
  },
  {
    "text": "they have kept that model and the declarative added new operators and made them better and relaxed some of the",
    "start": "3355240",
    "end": "3361760"
  },
  {
    "text": "constraints so where we are is there's no such thing as a free lunch you're always making trade-off decisions and",
    "start": "3361760",
    "end": "3368000"
  },
  {
    "text": "you will inherit technical debt and you have to think about the data infrastructure because it's so hard to",
    "start": "3368000",
    "end": "3374440"
  },
  {
    "text": "change once you've built an application on top of it know your tradeoffs up",
    "start": "3374440",
    "end": "3379680"
  },
  {
    "text": "front and understand some of the Wares and WIS of these things and avoid the unintended consequences you in installed",
    "start": "3379680",
    "end": "3386839"
  },
  {
    "text": " and then you didn't realize that the tight coupling of data structure and schema to physical storage led to a",
    "start": "3386839",
    "end": "3393640"
  },
  {
    "text": "whole new set of problems um this is my favorite example I use it a lot for unintended consequences which is that uh",
    "start": "3393640",
    "end": "3401280"
  },
  {
    "text": "back in the 1950s Atomic power was all the rage and atomic power was going to solve",
    "start": "3401280",
    "end": "3407720"
  },
  {
    "text": "every problem Society had um just like no SQL today and",
    "start": "3407720",
    "end": "3413039"
  },
  {
    "text": "so radium being such an easily available thing we could paint it on watch dials",
    "start": "3413039",
    "end": "3418119"
  },
  {
    "text": "and radium is radioactive so we'll put it in chewing gum to give you extra energy uh women's makeup had uh uh",
    "start": "3418119",
    "end": "3425280"
  },
  {
    "text": "radium in it for that extra healthy glow and my favorite example of all the only one that works uh the the radium laced",
    "start": "3425280",
    "end": "3433079"
  },
  {
    "text": "prophylactic so condoms with radium that actually would prevent you know not just",
    "start": "3433079",
    "end": "3438440"
  },
  {
    "text": "the current pregnancy but every possible future pregnancy um those are the unintended consequences that you can you",
    "start": "3438440",
    "end": "3445240"
  },
  {
    "text": "can inherit when you make the wrong technical implementation decision now I'm sad to say there's no one answer you",
    "start": "3445240",
    "end": "3451119"
  },
  {
    "text": "know Cloud a and Hort Works would love it if you just bought Hadoop and through everything else out but that's not going to work Oracle would love it if you just",
    "start": "3451119",
    "end": "3457440"
  },
  {
    "text": "bought an EXO whatever and paid them 8 billion but that's not going to work we're back to Best of breed",
    "start": "3457440",
    "end": "3463960"
  },
  {
    "text": "architectures for a whole generation My Generation we thought the relational",
    "start": "3463960",
    "end": "3469160"
  },
  {
    "text": "database was the answer but it turns out that there are multiple workloads with different answers and that's the world",
    "start": "3469160",
    "end": "3476240"
  },
  {
    "text": "that we're getting back to and so you know don't make these these mistakes that some of us made that we had to",
    "start": "3476240",
    "end": "3482559"
  },
  {
    "text": "unlearn because I spent the past seven years unlearning a lot of stuff which is",
    "start": "3482559",
    "end": "3487680"
  },
  {
    "text": "that you really have to say what is the problem for which this technology is the answer number one and number two more",
    "start": "3487680",
    "end": "3494760"
  },
  {
    "text": "important one what's my goal and how does that translate into the capabilities that I need and how does that map onto those Technologies and",
    "start": "3494760",
    "end": "3502039"
  },
  {
    "text": "finally there are no best practices right now in this world there are some good practices but mostly uh best",
    "start": "3502039",
    "end": "3509520"
  },
  {
    "text": "practices come from survival bias and survival bias is the people who made it",
    "start": "3509520",
    "end": "3514599"
  },
  {
    "text": "through the Minefield and it's great if you can follow them through the Minefield and take three steps to the right and two steps forward and one step",
    "start": "3514599",
    "end": "3521520"
  },
  {
    "text": "left but every company is different every engineering team is different you're not starting from the same place",
    "start": "3521520",
    "end": "3528720"
  },
  {
    "text": "that that guy started from which means that if you follow his exact pattern of steps you're likely to step on a mine",
    "start": "3528720",
    "end": "3534599"
  },
  {
    "text": "and that's what we're you know we're learning in the emerging Tech world now and so really what you should focus on",
    "start": "3534599",
    "end": "3540039"
  },
  {
    "text": "is a lot of the worst failures you know what was the real story of why Mount gaau failed we may never know but they",
    "start": "3540039",
    "end": "3545520"
  },
  {
    "text": "blame it on transaction malleability we know what that is and we know we knew what it was in",
    "start": "3545520",
    "end": "3551920"
  },
  {
    "text": "1972 so there are solutions out there look for those failures and study the",
    "start": "3551920",
    "end": "3557079"
  },
  {
    "text": "pattern of those things and you'll learn a lot and so that's just the summary of the course and uh with that I'm finished",
    "start": "3557079",
    "end": "3563000"
  },
  {
    "text": "and you guys are all free for lunch so thank you very much for coming",
    "start": "3563000",
    "end": "3568119"
  },
  {
    "text": "thank",
    "start": "3573760",
    "end": "3576760"
  }
]