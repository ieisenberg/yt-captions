[
  {
    "start": "0",
    "end": "177000"
  },
  {
    "text": "(happy piano music)",
    "start": "1054",
    "end": "4054"
  },
  {
    "text": "- So my presentation that I got today is called The Post-MVC Age,",
    "start": "13703",
    "end": "19253"
  },
  {
    "text": "and in this presentation, I will take a look at the\ncomponent architecture. And component architecture is the new way",
    "start": "19253",
    "end": "26374"
  },
  {
    "text": "to do applications. So first, a little bit about myself.",
    "start": "26374",
    "end": "31982"
  },
  {
    "text": "My name is Maarten and I'm a developer for a Dutch company called 42, and we mostly work Java\nand Angular applications.",
    "start": "31982",
    "end": "41195"
  },
  {
    "text": "So this is the (mumbles) network page. So I want to do first, is I want to take a look at\nthe components themselves.",
    "start": "41195",
    "end": "47642"
  },
  {
    "text": "And then I want to dive into\nthe component architecture. And after that, I want to go towards Redux",
    "start": "47643",
    "end": "53381"
  },
  {
    "text": "and reactive programming, which are two both ways to power up your component architecture.",
    "start": "53381",
    "end": "59801"
  },
  {
    "text": "So we'll start with components. What I want to do is I\nwant to make a case study",
    "start": "60895",
    "end": "65968"
  },
  {
    "text": "of a (mumbles) of Google Maps component from the Polymer Framework, just to see what components can do for us,",
    "start": "65968",
    "end": "71855"
  },
  {
    "text": "and what they're all about. So here's an example of\na Google Maps component.",
    "start": "71855",
    "end": "78924"
  },
  {
    "text": "You can see that there are four cities, San Francisco, Amsterdam, New York, Tokyo. This are Google Maps places,",
    "start": "78925",
    "end": "85569"
  },
  {
    "text": "and there's a map marker\nat the center of the city, and when you hover over it",
    "start": "85569",
    "end": "91472"
  },
  {
    "text": "you see information about\nall those four cities. But if you take a look at\nSan Francisco Google Map,",
    "start": "91472",
    "end": "98906"
  },
  {
    "text": "let's take a look, because behind that map\nyou see how we can create that particular Google Map.",
    "start": "98906",
    "end": "105153"
  },
  {
    "text": "And the code behind it\nis relatively simple and relatively small, like this.",
    "start": "107726",
    "end": "113033"
  },
  {
    "text": "As you can see in the\nGoogle Polymer Framework, you can create a custom HTML address.",
    "start": "113033",
    "end": "119240"
  },
  {
    "text": "In this case, a google-map element, and google-map-marker element. And you control the custom\nelement and give it,",
    "start": "119240",
    "end": "128095"
  },
  {
    "text": "reassign their codes. In this case, the longitude and latitude. And that determines the center of the map.",
    "start": "128095",
    "end": "135693"
  },
  {
    "text": "And to add a google-map-marker\nwill simply set longitude and latitude,",
    "start": "135693",
    "end": "140845"
  },
  {
    "text": "and we make draggable (mumbles). This, relative to (mumbles) codes,",
    "start": "140845",
    "end": "147460"
  },
  {
    "text": "gives you a Google Map.",
    "start": "147460",
    "end": "149377"
  },
  {
    "text": "We can also listen to events. So we can send data input\ncode via its attributes.",
    "start": "152548",
    "end": "158995"
  },
  {
    "text": "We can also listen to\nevents and components that is output by, in this\ncase, adding event listeners.",
    "start": "158995",
    "end": "164398"
  },
  {
    "text": "That's the Polymer way to do it. So that was a Google Maps component,",
    "start": "164398",
    "end": "170121"
  },
  {
    "text": "but let's look at the components\na little more abstractly, to see what's the characteristics behind those components are.",
    "start": "170121",
    "end": "177225"
  },
  {
    "start": "177000",
    "end": "237000"
  },
  {
    "text": "And the first characteristic is that a component is isolated. This means that you can\nput multiple components,",
    "start": "177225",
    "end": "184913"
  },
  {
    "text": "multiple instances of the same component, on the same screen, without them interfering with each other.",
    "start": "184913",
    "end": "190933"
  },
  {
    "text": "So in the example we saw before, we had four Google Maps components,",
    "start": "190933",
    "end": "196398"
  },
  {
    "text": "and they could be controlled separately without them interfering with each other.",
    "start": "196398",
    "end": "202199"
  },
  {
    "text": "(Maarten laughs) Another characteristic is that a component",
    "start": "203523",
    "end": "210292"
  },
  {
    "text": "has very clear input and output semantics. And that means that the only\nway to manipulate a component",
    "start": "210292",
    "end": "217277"
  },
  {
    "text": "is via the inputs that\nit provided for you. And the only way a component can manipulate the outside world,",
    "start": "219728",
    "end": "226287"
  },
  {
    "text": "is to very clearly define\nthe output semantics. So in this case, the inputs are the longitude, latitudes,",
    "start": "226287",
    "end": "233547"
  },
  {
    "text": "and the output was the\nevent listener that we had. Another characteristic is that\na component is declarative.",
    "start": "233547",
    "end": "241851"
  },
  {
    "start": "237000",
    "end": "307000"
  },
  {
    "text": "So we just all saw this Google\nMap component in action, and it was very declarative.",
    "start": "241851",
    "end": "247802"
  },
  {
    "text": "It was very easy, just\nby looking at the codes, to figure what the component\nwas actually doing.",
    "start": "247802",
    "end": "254975"
  },
  {
    "text": "And the final characteristic is that a component is composable. And what I mean by that,",
    "start": "255994",
    "end": "261523"
  },
  {
    "text": "is that you could take\nmultiple smaller components, for example, a button component\nand an input component,",
    "start": "261523",
    "end": "266708"
  },
  {
    "text": "and combine them to create\nthe search component. So we can use components as Lego blocks, to define components,",
    "start": "266708",
    "end": "273035"
  },
  {
    "text": "in terms of other components. And that's a very powerful mechanism.",
    "start": "273036",
    "end": "278721"
  },
  {
    "text": "And all of these characteristics, they make components very\neasy to reason about.",
    "start": "278721",
    "end": "284336"
  },
  {
    "text": "Because a component is isolated, when you see it on the page somewhere,",
    "start": "284336",
    "end": "289383"
  },
  {
    "text": "you know what that\ncomponent's going to do, when you see it in the code somewhere, you're pretty sure what the\ncomponent's going to do.",
    "start": "289383",
    "end": "295631"
  },
  {
    "text": "And because a component has very clear input and output semantics, AKA, it does not manipulate\nthe outside world,",
    "start": "295631",
    "end": "302435"
  },
  {
    "text": "it's very easy to understand its place in your application. So to conclude,",
    "start": "302435",
    "end": "308585"
  },
  {
    "start": "307000",
    "end": "613000"
  },
  {
    "text": "components are pretty awesome.",
    "start": "309709",
    "end": "312209"
  },
  {
    "text": "But what we just saw was\na component in isolation. So now the question is,\n\"How do we build apps",
    "start": "315459",
    "end": "321829"
  },
  {
    "text": "\"using only components?\" So to demonstrate that, I've created a very simple Todo\napplication in Angular 2.0.",
    "start": "321829",
    "end": "331063"
  },
  {
    "text": "And everyone probably\nknows how this works. You can order Todo,\nyou can cross them off.",
    "start": "331063",
    "end": "338503"
  },
  {
    "text": "And at the bottom, there's a filter, and there you can toggle\nbetween the component's state,",
    "start": "338503",
    "end": "343944"
  },
  {
    "text": "the Todo state that you want to see. For example, if you press Active, you only see the\ncomponents you need to do, and when you click Completed,",
    "start": "343944",
    "end": "350422"
  },
  {
    "text": "you only see the Todos\nyou've already done. So like I said, this application\nwas built in Angular 2.0.",
    "start": "350422",
    "end": "359170"
  },
  {
    "text": "And it was built from\nthe following components. And I've represented this as a tree.",
    "start": "359170",
    "end": "366175"
  },
  {
    "text": "That's the funny thing about\na component based application, that it is actually a tree,",
    "start": "366175",
    "end": "371413"
  },
  {
    "text": "just like normal DOM elements\nwould be on the page. They're also trees. So what we see here at the very top,",
    "start": "371413",
    "end": "378065"
  },
  {
    "text": "is the TodoApplication, and that's the so-called \"root component\". It's either directly or indirectly",
    "start": "378065",
    "end": "384668"
  },
  {
    "text": "the grandparent of all other components. This is an example of the composability.",
    "start": "384668",
    "end": "389695"
  },
  {
    "text": "So this entire application is basically one single app component. And on the right here, we\nsee this TodoList component,",
    "start": "389696",
    "end": "397456"
  },
  {
    "text": "which has an N number of Todos, which are currently on the screen. And we also have an AddTodo component,",
    "start": "397456",
    "end": "404392"
  },
  {
    "text": "which is basically an input element, where you click Enter on it, it will add a new Todo. And we also have the ToggleAll component,",
    "start": "404392",
    "end": "410960"
  },
  {
    "text": "and when you click that, you instantly check off all your Todos. And on the left, we have\nthe Filters component,",
    "start": "410960",
    "end": "417482"
  },
  {
    "text": "which represents the filter, which has three filter components, all active and completed.",
    "start": "417482",
    "end": "423569"
  },
  {
    "text": "But if you take a look at this tree, or any tree which represents\na component based application,",
    "start": "425000",
    "end": "431513"
  },
  {
    "text": "you might have the following questions, or at least I did. And the first question you might have is,",
    "start": "432817",
    "end": "438491"
  },
  {
    "text": "\"Where does the state\nlive in this application?\" And by state, I mean where\nare all the Todos stored,",
    "start": "438491",
    "end": "444436"
  },
  {
    "text": "where it's stored, which\nfilter is currently active. And the second question you might have is,",
    "start": "444436",
    "end": "449736"
  },
  {
    "text": "\"How do these components\ncommunicate with each other? \"How do they do that?\"",
    "start": "449736",
    "end": "454403"
  },
  {
    "text": "And to make that a\nlittle bit more concrete for this Todo example,",
    "start": "455294",
    "end": "459414"
  },
  {
    "text": "we could ask the first question this way. Instead of saying, \"Where\ndoes the state live?\" \"Where do we put the\ncurrent active filter?\"",
    "start": "460300",
    "end": "468839"
  },
  {
    "text": "So if we take a look at our tree, we could say, \"Let's put\nthe current active filter",
    "start": "468839",
    "end": "473950"
  },
  {
    "text": "\"in the Filters component, \"because that's the place\nthey all have in common. \"They have the same parent common.\"",
    "start": "473950",
    "end": "480585"
  },
  {
    "text": "But then you realize\nthat the active filter is used inside of TodoList.",
    "start": "480585",
    "end": "486836"
  },
  {
    "text": "And in that component, it is determined which filter to apply.",
    "start": "486836",
    "end": "491227"
  },
  {
    "text": "But then you might argue to put the thing in the\nTodoApplication root component, because that's the common parent over",
    "start": "492718",
    "end": "500662"
  },
  {
    "text": "these two components. So what I did, I put it\nin the TodoApplication,",
    "start": "501731",
    "end": "507403"
  },
  {
    "text": "all the way at the top. But the answer is not very clear. So you can make the case for\neach of those three components,",
    "start": "507403",
    "end": "515969"
  },
  {
    "text": "and it would probably be a valid case. So this is not a very satisfying answer. I know that.",
    "start": "515970",
    "end": "521883"
  },
  {
    "text": "But later on in my presentation I'll show you a way to make this question a little bit easier to answer.",
    "start": "521883",
    "end": "528291"
  },
  {
    "text": "But for now, it's not very clear\nwhere the state should live inside of a application tree.",
    "start": "528291",
    "end": "534250"
  },
  {
    "text": "So that brings us to the second question, \"How do components communicate?\" And we can ask that asking ourselves,",
    "start": "535118",
    "end": "541983"
  },
  {
    "text": "\"How do filters change?\" And like I said, I chose to put the filter",
    "start": "541983",
    "end": "547782"
  },
  {
    "text": "all the way at the top,\nin the TodoApplication. So when you click\nCompleted, All, or Active,",
    "start": "547783",
    "end": "553471"
  },
  {
    "text": "in some way, I need to communicate that all the way to the top, because that's where the data is stored.",
    "start": "553471",
    "end": "560065"
  },
  {
    "text": "So what I need to do, is I need to, when the Completed is clicked, send it to its parent.",
    "start": "560065",
    "end": "566036"
  },
  {
    "text": "And when Filters has it, it needs to send it up one\nlevel to TodoApplication.",
    "start": "566036",
    "end": "572079"
  },
  {
    "text": "So the thing is, is that a component cannot communicate to another component which is\nnot directly related to it.",
    "start": "573929",
    "end": "581478"
  },
  {
    "text": "So you can only go from\nthe child to the parent, from the parent to the child. So that means that communication",
    "start": "581478",
    "end": "589107"
  },
  {
    "text": "is a little bit of a hassle. Because the more distance\nthere is between the component",
    "start": "589107",
    "end": "596421"
  },
  {
    "text": "in which you want to communicate with, for example, here you want to communicate from the blue component, all\nthe way to the red component.",
    "start": "596421",
    "end": "603778"
  },
  {
    "text": "You can see that we first need to go all the way to top, and then all the way to the right.",
    "start": "603778",
    "end": "610170"
  },
  {
    "text": "So basically, these two questions highlight two weaknesses\nof this architecture.",
    "start": "610171",
    "end": "618197"
  },
  {
    "start": "613000",
    "end": "756000"
  },
  {
    "text": "So it's not always clear\nwhere the state goes, and communication between components are not directly related to each other.",
    "start": "618197",
    "end": "624533"
  },
  {
    "text": "That's a little bit of hassle. So now we have seen components,",
    "start": "624533",
    "end": "631902"
  },
  {
    "text": "and we have seen two weaknesses. So now it's time to look at a way to mitigate those weaknesses.",
    "start": "631902",
    "end": "638207"
  },
  {
    "text": "And in this case, that means\ntaking a look at Redux.",
    "start": "640035",
    "end": "644201"
  },
  {
    "text": "So what is Redux? Well, Redux is a library created by a guy called Dan Abramov.",
    "start": "647798",
    "end": "653656"
  },
  {
    "text": "And it's the most popular implementation of an architecture called Flux.",
    "start": "653656",
    "end": "658355"
  },
  {
    "text": "So what is this Flux thing? Well, Flux was invented at Facebook,",
    "start": "659357",
    "end": "664458"
  },
  {
    "text": "and it's a way to do\nunidirectional data flow. And Flux is more of an idea,",
    "start": "664458",
    "end": "671248"
  },
  {
    "text": "and Redux is an\nimplementation of that idea. And since it's the most popular one, I've chosen to focus\nmore on Redux instead.",
    "start": "671248",
    "end": "679510"
  },
  {
    "text": "So what is the idea behind Flux and Redux? Well the idea is,",
    "start": "679510",
    "end": "684685"
  },
  {
    "text": "we still have our components tree, what we're going to put another\nconcept next to that tree.",
    "start": "684685",
    "end": "690819"
  },
  {
    "text": "And that concept is called the store. And what the store does, is it provides all the\nstate to the component tree.",
    "start": "690819",
    "end": "698348"
  },
  {
    "text": "So we no longer store\nour state in components, we store every bit of\nstate of this application",
    "start": "698348",
    "end": "705052"
  },
  {
    "text": "in one single variable, in the store. And whenever an action occurs, for example, we add a new Todo,",
    "start": "705052",
    "end": "711930"
  },
  {
    "text": "which check a Todo, or\nwe toggle all Todos, or check on the filter,",
    "start": "711930",
    "end": "717585"
  },
  {
    "text": "an action is sent to the store, and that manipulates the store, and then we send the state\nto the component tree again.",
    "start": "717585",
    "end": "725826"
  },
  {
    "text": "So if we look at it slightly\ndifferently, like this, you can see where the\nunidirectionality comes from.",
    "start": "727032",
    "end": "734178"
  },
  {
    "text": "So the store provides a\nstate to the component tree, the component fires actions, the actions manipulate the store.",
    "start": "734179",
    "end": "741402"
  },
  {
    "text": "And this will go around and\naround in a single loop, but always in one direction.",
    "start": "741402",
    "end": "746426"
  },
  {
    "text": "That's why it's unidirectional. So Redux and Flux, they give\nus two very nice answers,",
    "start": "746426",
    "end": "754114"
  },
  {
    "text": "to our two questions. So the two answers are, that all states simply\nlives in this store.",
    "start": "754114",
    "end": "760720"
  },
  {
    "start": "756000",
    "end": "780000"
  },
  {
    "text": "So we no longer have to worry about where in our component\ntree we store state.",
    "start": "760721",
    "end": "766049"
  },
  {
    "text": "And the second is that all\nevents route to the store. So we no longer need to communicate",
    "start": "766049",
    "end": "772529"
  },
  {
    "text": "between two components directly. We simply send all events to the store, where the state is manipulated.",
    "start": "772529",
    "end": "780100"
  },
  {
    "start": "780000",
    "end": "1162000"
  },
  {
    "text": "So this was highly theoretical. So what I want to do is make\nit a little bit more practical, by looking at some actual Redux code.",
    "start": "780100",
    "end": "787876"
  },
  {
    "text": "So I want to do another case study, this time with a very simple application, the counter application.",
    "start": "787876",
    "end": "794311"
  },
  {
    "text": "There's two buttons, minus and plus, and the number in between them. When you click plus, the number increases.",
    "start": "794311",
    "end": "799422"
  },
  {
    "text": "When you click minus,\nthe number decreases. Very simple. So in Redux, it's common to\ndefine all of your actions",
    "start": "799422",
    "end": "809068"
  },
  {
    "text": "as const definitions. So what we see here, we have two actions, INCREMENT_COUNTER and DECREMENT_COUNTER.",
    "start": "809068",
    "end": "816599"
  },
  {
    "text": "And then we have these two functions, incrementCounter and decrementCounter. And these are, what Redux calls\n\"action creator functions\".",
    "start": "816599",
    "end": "824894"
  },
  {
    "text": "They create actions that\nwe can send to the store. And an action is always an object",
    "start": "824895",
    "end": "831232"
  },
  {
    "text": "which has a type property. And the type property\nidentifies the action.",
    "start": "832207",
    "end": "837564"
  },
  {
    "text": "So in this case, whenever we call the\nincrementCounter function, we get a simple object back saying",
    "start": "837564",
    "end": "844210"
  },
  {
    "text": "which type of action it is. So now that we have to find our actions, we can take the next step,",
    "start": "844210",
    "end": "851121"
  },
  {
    "text": "and we can see how we can create a store. So what we do first,",
    "start": "851121",
    "end": "856234"
  },
  {
    "text": "is we set the initialCount to zero, the counter starts counting at zero. And then we do a little\nbit of Redux magic,",
    "start": "856234",
    "end": "862969"
  },
  {
    "text": "we say Redux creates store. And there's a second argument\nthat takes our initialCount,",
    "start": "862969",
    "end": "868183"
  },
  {
    "text": "and as a first argument, it takes this counterApp function. So what is this counterApp function?",
    "start": "868183",
    "end": "874605"
  },
  {
    "text": "Well, that's called a reducer. And the reducer is a function which states",
    "start": "874605",
    "end": "879695"
  },
  {
    "text": "the old state, and an action to apply to that state. And there are a couple of\nrules with the reducer.",
    "start": "879695",
    "end": "887073"
  },
  {
    "text": "The first rule is that\nthe reducer must be pure. So that means we can never manipulate",
    "start": "887073",
    "end": "892903"
  },
  {
    "text": "the old state directly. You always need to create a new copy. And the second rule is that",
    "start": "892903",
    "end": "898000"
  },
  {
    "text": "whenever you encounter an\naction that you don't know, you simply return the state.",
    "start": "898000",
    "end": "903130"
  },
  {
    "text": "And in the reducer, we\nhandle our two action types, INCREMENT_COUNTER and DECREMENT_COUNTER.",
    "start": "905498",
    "end": "911490"
  },
  {
    "text": "So when ever we encounter\nincrement, we simply add one. When we encounter a decrement,\nwe decrease it by one.",
    "start": "911491",
    "end": "917913"
  },
  {
    "text": "So for example, if our\ncounter has a state of five, and we send the increment action,",
    "start": "917913",
    "end": "924145"
  },
  {
    "text": "it will be five plus one, so six will be the new state. And this is a very\nsimple Redux application.",
    "start": "924145",
    "end": "931647"
  },
  {
    "text": "Redux is also framework-agnostic, so you can use Redux in\nboth React, or Angular,",
    "start": "931647",
    "end": "937144"
  },
  {
    "text": "or any other type of framework. But it's more geared\ntoward React, to be honest.",
    "start": "937145",
    "end": "943092"
  },
  {
    "text": "So this was a very,\nvery simple application, where the state was an integer. That's not very fun.",
    "start": "944086",
    "end": "950350"
  },
  {
    "text": "So I want to make it a\nlittle bit more complex. This time by adding the possibility of dynamically added counters,",
    "start": "950350",
    "end": "956998"
  },
  {
    "text": "and dynamically removing them. So the code doesn't fit all on one slide,",
    "start": "956999",
    "end": "963824"
  },
  {
    "text": "so what I did is, for each action that there is, I created a separate slide.",
    "start": "963824",
    "end": "969483"
  },
  {
    "text": "So I want to do the removeCounter first. But let's take a look\nat the initial state.",
    "start": "969483",
    "end": "975341"
  },
  {
    "text": "So this time it's not\nnumber, it's an object. And this object has two properties,",
    "start": "975341",
    "end": "981088"
  },
  {
    "text": "a nextCounterId, which you can kind of think\nof as an auto-increment ID on an SQL table.",
    "start": "981088",
    "end": "987208"
  },
  {
    "text": "It's meant to increase each\ntime a new counter is added, so we have unique key.",
    "start": "987208",
    "end": "993126"
  },
  {
    "text": "And the second property\nis called counters, which is a key value pair in which the key is the ID of the counter,",
    "start": "993126",
    "end": "1000437"
  },
  {
    "text": "which points to the counter object. And in this case, we have\na single counter object",
    "start": "1000437",
    "end": "1005765"
  },
  {
    "text": "which starts are 42. So then we see the\nremoveCounter action creator.",
    "start": "1005765",
    "end": "1013007"
  },
  {
    "text": "But this one is a little bit different, this one takes an argument, the counter. And that's the counter\nthat we want to remove.",
    "start": "1013951",
    "end": "1021495"
  },
  {
    "text": "So basically, when you have these actions, you always have a type property,",
    "start": "1021495",
    "end": "1026705"
  },
  {
    "text": "that you can add as many other properties as you need for your action. And in this case, it's just the counter.",
    "start": "1026706",
    "end": "1033167"
  },
  {
    "text": "And then somewhere inside the reducer, we have the REMOVE_COUNTER. And there I do this little\ntrick with Object.assign",
    "start": "1033167",
    "end": "1039761"
  },
  {
    "text": "to create a copy of the current state. 'Cause remember, you cannot\nmanipulate the existing state.",
    "start": "1039761",
    "end": "1047089"
  },
  {
    "text": "And then we simply take the\ncounter from the action, and we delete the key and\nthe key value by our map.",
    "start": "1047089",
    "end": "1054919"
  },
  {
    "text": "And then we return the state, and then we have remove the counter. So in this case, if you\ncall removeCounter with one,",
    "start": "1054920",
    "end": "1061444"
  },
  {
    "text": "then the count 42 will be removed.",
    "start": "1061444",
    "end": "1064277"
  },
  {
    "text": "Then we have createCounter, and it does not have parameters, because we don't know which counter",
    "start": "1068618",
    "end": "1074603"
  },
  {
    "text": "we are going to create beforehand. And in the reducer,\nagain, we create a copy, and then we increment that\nnextCounterId manually,",
    "start": "1074603",
    "end": "1082401"
  },
  {
    "text": "so that the next time we\nalso have a unique ID. And then we simply take that previous ID,",
    "start": "1082401",
    "end": "1088791"
  },
  {
    "text": "and assign it to a new counter object, which starts counting at zero. And it also knows which counter it is,",
    "start": "1088791",
    "end": "1096062"
  },
  {
    "text": "because it has the counter key stored in. Then we have incrementCounter,",
    "start": "1096062",
    "end": "1103881"
  },
  {
    "text": "which you also need to give a counter ID in the action creator, so we can identify which\ncounter we need to increase.",
    "start": "1103881",
    "end": "1111640"
  },
  {
    "text": "Again, we copy the state, and we pluck the counter\nfrom the initial state,",
    "start": "1111640",
    "end": "1117274"
  },
  {
    "text": "and we increment it by one. Decrement is much the same,",
    "start": "1117275",
    "end": "1122815"
  },
  {
    "text": "except it decrements the counter by one. So what we see here is an example",
    "start": "1122815",
    "end": "1129336"
  },
  {
    "text": "of a more complex Redux application. And as you can see, it's\ncustomary to put your state",
    "start": "1129336",
    "end": "1135629"
  },
  {
    "text": "in these objects. In this case, initialState. And for those of you think,",
    "start": "1135629",
    "end": "1141354"
  },
  {
    "text": "\"Well, if we have many actions, \"the switch statement will\nget really, really huge.\" And that's true.",
    "start": "1141354",
    "end": "1147417"
  },
  {
    "text": "But fortunately, we can\ncreate multiple reducers for the same application. So we can split it up\nbased on the domain entity",
    "start": "1147417",
    "end": "1156271"
  },
  {
    "text": "that we're going to manipulate. So don't worry about that. So the benefits of Redux",
    "start": "1156271",
    "end": "1163096"
  },
  {
    "start": "1162000",
    "end": "1276000"
  },
  {
    "text": "is having a very clear answer where to put the state, and how to communicate with components.",
    "start": "1163096",
    "end": "1168679"
  },
  {
    "text": "But there are also a\ncouple of other benefits. And the first benefit, is that Redux makes\nUniversal JavaScript easier.",
    "start": "1168680",
    "end": "1176010"
  },
  {
    "text": "Universal JavaScript\nis the art of rendering your application on the Node.js server,",
    "start": "1176010",
    "end": "1182011"
  },
  {
    "text": "and sending it back to the browser, which has CEO benefits, and makes your application render faster.",
    "start": "1182011",
    "end": "1190117"
  },
  {
    "text": "And the reason why it's easier in Redux, is because all of your states",
    "start": "1190117",
    "end": "1195308"
  },
  {
    "text": "is located inside of single variable. So you only need to\nset that variable once,",
    "start": "1195308",
    "end": "1200376"
  },
  {
    "text": "and then give that to your component tree, and then you get your UI, and you can send it back to the browser.",
    "start": "1200376",
    "end": "1207429"
  },
  {
    "text": "So if we contrast that\nwith having states located in multiple separate components,",
    "start": "1207429",
    "end": "1213644"
  },
  {
    "text": "we will have to do a lot of work, just to get those components, and assign the state correctly.",
    "start": "1213644",
    "end": "1218797"
  },
  {
    "text": "So you have write a lot\nmore Boilerplate code. So that's the first benefit.",
    "start": "1218797",
    "end": "1224513"
  },
  {
    "text": "The second benefit is that\nRedux has a surprisingly good developer experience story.",
    "start": "1224513",
    "end": "1230373"
  },
  {
    "text": "So gifts say more than 1000 words. So what we see here is\nanother counter example,",
    "start": "1230374",
    "end": "1237989"
  },
  {
    "text": "but this time with the development tools displayed on the right. So what we see here,",
    "start": "1239272",
    "end": "1244596"
  },
  {
    "text": "is that each time that\nwe preform an action, we see on the right, in black bar, we see the action occur.",
    "start": "1244596",
    "end": "1250608"
  },
  {
    "text": "And we can even click on those actions, to pretend they never happened. So that's really cool.",
    "start": "1250608",
    "end": "1256039"
  },
  {
    "text": "What you could also do, is you can commit states, and you can also load\nexternal states from JSON.",
    "start": "1256039",
    "end": "1261205"
  },
  {
    "text": "So if your customer\nsays, \"Hey, I found a bug \"in your application,\" you could ask them to\nsend the current state,",
    "start": "1261205",
    "end": "1267836"
  },
  {
    "text": "and you can load it in your\nlocal development environment, and see exactly what they saw. So that's pretty neat.",
    "start": "1267836",
    "end": "1274290"
  },
  {
    "start": "1276000",
    "end": "1337000"
  },
  {
    "text": "Nothing is perfect however, and Redux is no different.",
    "start": "1276979",
    "end": "1281990"
  },
  {
    "text": "So there's a couple of downsides to Redux. And the first one is that it\nhas a slight learning curve. You have to learn about\nreducers, pure functions,",
    "start": "1281990",
    "end": "1290078"
  },
  {
    "text": "immutability, thunk, saga. It's a very broad framework. It's not that difficult to learn,",
    "start": "1290078",
    "end": "1296413"
  },
  {
    "text": "but there is a slight learning curve. The second con is a\nlittle bit more insidious,",
    "start": "1296413",
    "end": "1302562"
  },
  {
    "text": "and that has to do that JavaScript is not immutable by nature.",
    "start": "1302562",
    "end": "1307311"
  },
  {
    "text": "So JavaScript allows\nyou to change variables. So if you, by accident, do\nsomething in your reducer",
    "start": "1309537",
    "end": "1316748"
  },
  {
    "text": "that accidentally changes the state, then your whole application will fall down",
    "start": "1316748",
    "end": "1323226"
  },
  {
    "text": "like house of cards, because Redux does not accept\nyou mutating the state.",
    "start": "1323226",
    "end": "1328354"
  },
  {
    "text": "So you have to be really disciplined when writing your reducers, to make sure that you don't\naccidentally manipulate state.",
    "start": "1328354",
    "end": "1336134"
  },
  {
    "start": "1337000",
    "end": "1490000"
  },
  {
    "text": "Luckily, there are libraries. This one is Immutable.js,\nalso by Facebook,",
    "start": "1337094",
    "end": "1342506"
  },
  {
    "text": "which gives you an Immutable\ncollections library. So in this case, we\nhave this Map and List,",
    "start": "1342506",
    "end": "1349343"
  },
  {
    "text": "they represent objects and arrays. And whenever you perform an\naction, or Map, or a List,",
    "start": "1349343",
    "end": "1356227"
  },
  {
    "text": "you'll always get a new copy, you never modify the existing object.",
    "start": "1356227",
    "end": "1361958"
  },
  {
    "text": "So you can use Immutable.js to mitigate this weakness a little bit. But again, using this library",
    "start": "1361958",
    "end": "1368651"
  },
  {
    "text": "you creates a little overhead. And if you have to communicate\nwith some third-party library which expects normal objects,",
    "start": "1368651",
    "end": "1376208"
  },
  {
    "text": "then you would have to do some plumbing to give those third-party libraries normal objects instead of Immutable Maps",
    "start": "1376208",
    "end": "1382255"
  },
  {
    "text": "or Immutable Lists.",
    "start": "1382255",
    "end": "1383838"
  },
  {
    "text": "So that was Redux, which gave us two nice ways\nto mitigate the two weaknesses",
    "start": "1388345",
    "end": "1396116"
  },
  {
    "text": "of the component library. And now it's time to take a\nlook at reactive programming.",
    "start": "1396116",
    "end": "1404926"
  },
  {
    "text": "And reactive programming, you can use to supercharge your components",
    "start": "1404926",
    "end": "1409979"
  },
  {
    "text": "asynchronous event handling. It's really powerful for that. So what is this reactive\nprogramming thing?",
    "start": "1409979",
    "end": "1418321"
  },
  {
    "text": "Defining reactive programming, it's often easiest to look at, what we call \"normal programming\" first,",
    "start": "1420583",
    "end": "1426473"
  },
  {
    "text": "and in the reactive community they call it \"passive programming\". And what passive programming is,",
    "start": "1426473",
    "end": "1433169"
  },
  {
    "text": "is that when you have two components, one component is in charge\nof another component.",
    "start": "1433169",
    "end": "1438408"
  },
  {
    "text": "So in this case, we have\ncar, and we have an engine, and the engine starts whenever\nthe car key is turned.",
    "start": "1438408",
    "end": "1445997"
  },
  {
    "text": "So in a sense, the engine\ncomponent is not in control of its own destiny,",
    "start": "1445997",
    "end": "1451774"
  },
  {
    "text": "it always gets told when to start. And in code, you can see it like this.",
    "start": "1451774",
    "end": "1456972"
  },
  {
    "text": "So the car object has an engine property, and it fires up the engine\nwhenever the key is turned.",
    "start": "1456972",
    "end": "1465002"
  },
  {
    "text": "So reactive programming\ninverses this relationship. So in reactive programming,",
    "start": "1465003",
    "end": "1470506"
  },
  {
    "text": "the engine knows when it fires up. And the car does not know that\nit manipulates the engine.",
    "start": "1470506",
    "end": "1477026"
  },
  {
    "text": "And in this case, it does\nso via callback mechanism. So whenever the car\nonKeyTurned even is triggered,",
    "start": "1477026",
    "end": "1484946"
  },
  {
    "text": "the engine fires itself up. And this matches really\nnicely to our component,",
    "start": "1484946",
    "end": "1491722"
  },
  {
    "start": "1490000",
    "end": "1568000"
  },
  {
    "text": "the benefits of components. Because if you write your\ncomponents reactively, your component is in\ncontrol of its own destiny,",
    "start": "1493316",
    "end": "1500333"
  },
  {
    "text": "and you can really, easily understand how your component reacts, just by looking at the component source, because it will tell you in its source",
    "start": "1500333",
    "end": "1507059"
  },
  {
    "text": "when it get triggered,\nmanipulated, or does some action. So callbacks are a very poor mechanism.",
    "start": "1507059",
    "end": "1515724"
  },
  {
    "text": "They are relatively low level. So there are libraries\nout there, such as RxJS,",
    "start": "1515724",
    "end": "1522391"
  },
  {
    "text": "which soup up this callback mechanism to make it more powerful. So RxJS comes from a library\nof families called ReactiveX,",
    "start": "1524192",
    "end": "1532852"
  },
  {
    "text": "and what ReactiveX is, is kind of like a protocol description. So it's a big description\nof all of these kinds",
    "start": "1534944",
    "end": "1542863"
  },
  {
    "text": "of operations, and functions, and methods. And then what they did, is they created multiple implementations",
    "start": "1542863",
    "end": "1549802"
  },
  {
    "text": "in multiple different languages. So there's C#, RxJS,",
    "start": "1549802",
    "end": "1553497"
  },
  {
    "text": "and one for JavaScript, one\nfor Scilab, one for Java, et cetera, et cetera.",
    "start": "1555042",
    "end": "1560153"
  },
  {
    "text": "So just by learning one set\nof operations and rules, you can port that knowledge\nto various other languages.",
    "start": "1560154",
    "end": "1567702"
  },
  {
    "start": "1568000",
    "end": "1995000"
  },
  {
    "text": "So what are the main concepts behind RxJS?",
    "start": "1571211",
    "end": "1577121"
  },
  {
    "text": "The first concept is an observable, and that is something you can listen to.",
    "start": "1578047",
    "end": "1584714"
  },
  {
    "text": "That can be anything, keyboard clicks, mouse events, Ajax requests coming in,",
    "start": "1584714",
    "end": "1591145"
  },
  {
    "text": "WebSockets sending data over the line. Anything you can listen to, you can turn into an observable in RxJS.",
    "start": "1591145",
    "end": "1599505"
  },
  {
    "text": "And the second concept\nis that of operations, and an operation allows you to\nmanipulate your observables.",
    "start": "1599505",
    "end": "1607312"
  },
  {
    "text": "So you can basically perform\nan operation on observable, and get a new observable out.",
    "start": "1608618",
    "end": "1615612"
  },
  {
    "text": "So to demonstrate how\noperations and observables work,",
    "start": "1615612",
    "end": "1619779"
  },
  {
    "text": "I've created this Pseudocode example. And what you see here on this slide",
    "start": "1620835",
    "end": "1625860"
  },
  {
    "text": "in an observable called A, which is an array of stringed numbers,",
    "start": "1625860",
    "end": "1631216"
  },
  {
    "text": "so the numbers one to 10 in string form. So we can do operations on that string,",
    "start": "1632222",
    "end": "1637998"
  },
  {
    "text": "on that observable, for example, toNumber. And what toNumber does,",
    "start": "1637998",
    "end": "1644038"
  },
  {
    "text": "it simply takes the string number and turns it into an integer number. But the reactive part is,",
    "start": "1644038",
    "end": "1650235"
  },
  {
    "text": "is that whenever observable A changes, so for example, if we add the\nstring number two at the end,",
    "start": "1650235",
    "end": "1657443"
  },
  {
    "text": "observable B will also get updated, and we'll get the number\ntwo upended at the end.",
    "start": "1657443",
    "end": "1663122"
  },
  {
    "text": "So it reacts to changes on observable A. So we could do more operations,",
    "start": "1663122",
    "end": "1669859"
  },
  {
    "text": "we can, for example, do an Even operation, which filters the set to only\ninclude the even numbers.",
    "start": "1669859",
    "end": "1677762"
  },
  {
    "text": "And again, it's reactive, so if A changes, E will get\nupdated, B gets updated,",
    "start": "1677762",
    "end": "1683434"
  },
  {
    "text": "C will get updated. And we could do one final\noperation called Aggregate,",
    "start": "1683434",
    "end": "1690388"
  },
  {
    "text": "which counts up the even\nnumbers in this case. So what I think is the beauty\nof reactive programming,",
    "start": "1690388",
    "end": "1698477"
  },
  {
    "text": "is that you define D, and you know that it will get updated",
    "start": "1698478",
    "end": "1703778"
  },
  {
    "text": "whenever its input's changed. And you don't have to do that\nmanually yourself anymore.",
    "start": "1703779",
    "end": "1709406"
  },
  {
    "text": "So that's pretty powerful. So to run it down through completely,",
    "start": "1709406",
    "end": "1714589"
  },
  {
    "text": "if we add the string number\ntwo at the A observable, B will get the number\ntwo upended at the end,",
    "start": "1714589",
    "end": "1721080"
  },
  {
    "text": "then C will also get the number two, 'cause it's an even number, and then the aggregate will be 32.",
    "start": "1721081",
    "end": "1727546"
  },
  {
    "text": "So it's very powerful stuff. So now I want to move from the Pseudocodes",
    "start": "1727546",
    "end": "1735410"
  },
  {
    "text": "into the real RxJS code. And what I want to do, is I want to do another case study,",
    "start": "1735410",
    "end": "1742072"
  },
  {
    "text": "and this time look at the\nauto-complete example. So everyone knows what\nan auto-complete does,",
    "start": "1742072",
    "end": "1747991"
  },
  {
    "text": "you type in a query in search box, it sends it to the backend, and the backend will provide\nyou with suggestions.",
    "start": "1747991",
    "end": "1755854"
  },
  {
    "text": "So in this case, we\nsearched for \"American\", and it will give you some shows\nthat start with \"American\".",
    "start": "1755854",
    "end": "1764800"
  },
  {
    "text": "The auto-complete is a\nsurprisingly difficult thing to get completely right.",
    "start": "1764801",
    "end": "1770048"
  },
  {
    "text": "So what I want to do first, is I want to show you\nguys an imperfect example of an auto-complete,",
    "start": "1770048",
    "end": "1775415"
  },
  {
    "text": "and then I want to improve\nit bit by bit using RxJS.",
    "start": "1775415",
    "end": "1779582"
  },
  {
    "text": "So here's the code. The first thing we need to do, is we need to get a reference\nto an input element.",
    "start": "1780468",
    "end": "1788460"
  },
  {
    "text": "In this case, the element in\nwhich you can do your query in. And then we do some RxJS magic,",
    "start": "1788460",
    "end": "1795572"
  },
  {
    "text": "we create an observable for\neach time the input element as a \"keyup\" event.",
    "start": "1795572",
    "end": "1802434"
  },
  {
    "text": "So whenever the user\nstarts typing in something, the observable will\nfire, and we get events.",
    "start": "1802434",
    "end": "1808610"
  },
  {
    "text": "But the events that we\nget are JavaScript events, which will tell you which key is active,",
    "start": "1810613",
    "end": "1816041"
  },
  {
    "text": "if the Shift key was pressed, and which keycode was entered. But we're not really interested in that. So we preform a map operation",
    "start": "1816041",
    "end": "1822679"
  },
  {
    "text": "to get the value of the target, which is the actual contents\nof the input element",
    "start": "1822679",
    "end": "1828485"
  },
  {
    "text": "that we currently have\nwhen the event was fired. And then we do another map operation,",
    "start": "1828485",
    "end": "1833620"
  },
  {
    "text": "and map is exactly the\nsame as ES5 map operation we have on arrays.",
    "start": "1833620",
    "end": "1840383"
  },
  {
    "text": "It preforms a function on an input. So in this case, what we're going to do,",
    "start": "1840384",
    "end": "1846470"
  },
  {
    "text": "is we're going to take the query, and we're going to give\nit to the search function, which does an Ajax request to the backend.",
    "start": "1846470",
    "end": "1854225"
  },
  {
    "text": "And the backend will give us, hopefully some auto-completion results. And then at the bottom we\nsee the subscribe function.",
    "start": "1854225",
    "end": "1862116"
  },
  {
    "text": "And subscribe you can kind of view as the endpoint of an observable. So whenever something changes\nthat we are subscribed,",
    "start": "1862116",
    "end": "1870532"
  },
  {
    "text": "we go into that subscribe operator, and the subscribe operator has\ntwo functions as arguments.",
    "start": "1872525",
    "end": "1880255"
  },
  {
    "text": "The first function is for\nwhenever something went well, for when a successful thing happened.",
    "start": "1880255",
    "end": "1886989"
  },
  {
    "text": "In this case, when the backend provided us with auto-completion results. And we also have, as a\nsecond function, the error,",
    "start": "1886989",
    "end": "1895352"
  },
  {
    "text": "which gets called whenever\nan error occurred. So for example, if the\nbackend was unavailable or could not provide us with results.",
    "start": "1895352",
    "end": "1902336"
  },
  {
    "text": "And whenever we get a\nsuccessful auto-completion, we update the UI, and whenever it goes\nwrong, we just ignore it,",
    "start": "1902336",
    "end": "1909807"
  },
  {
    "text": "because that was what we do with errors. And subscribe should\nremind you of Promises.",
    "start": "1909807",
    "end": "1917900"
  },
  {
    "text": "So a Promise in JavaScript\ncan only be resolved once, while an observable can\nbe resolved many times.",
    "start": "1917900",
    "end": "1926582"
  },
  {
    "text": "So sometimes on the web, you will see that they call\nobservables \"Promises++\"",
    "start": "1926582",
    "end": "1932426"
  },
  {
    "text": "because they have a little\nbit of extra functionality on top of Promises. And it's also very easy in RxJS",
    "start": "1932426",
    "end": "1939636"
  },
  {
    "text": "to create an observable from a Promise, there are functions for that. But like I said, this\nexample is imperfect.",
    "start": "1939636",
    "end": "1947594"
  },
  {
    "text": "There are a couple of\nthings that go wrong, if you put this code in production. And the first thing is this guy.",
    "start": "1947594",
    "end": "1954848"
  },
  {
    "text": "- [Audience Member] Very slow code? - Very slow, yeah. So what you see here is the time",
    "start": "1961688",
    "end": "1967440"
  },
  {
    "text": "and some queries that\nwe sent to the backend. But what I want to illustrate",
    "start": "1967440",
    "end": "1972512"
  },
  {
    "text": "is that each time you type in a query, in this case, \"I love GOTO,\" we sent all permutations of\nthe query to the backend.",
    "start": "1972512",
    "end": "1979019"
  },
  {
    "text": "So what we basically created, is a very convenient way\nto spam your own server.",
    "start": "1979019",
    "end": "1984143"
  },
  {
    "text": "So basically what we want to do, is we want to say, \"Only send\nthe query to the backend,",
    "start": "1984143",
    "end": "1989917"
  },
  {
    "text": "\"if the user has stopped\ntyping for a little while.\" That's what we want to do. So there's an operator for that.",
    "start": "1989917",
    "end": "1996498"
  },
  {
    "start": "1995000",
    "end": "2077000"
  },
  {
    "text": "That operator is called Debounce. And what you see on this screen, is what RxJS and the\nReactiveX family of frameworks",
    "start": "1996498",
    "end": "2003178"
  },
  {
    "text": "call a \"marble diagram\". So what a marble diagram shows you, is an input stream, the\noperation in the middle,",
    "start": "2003178",
    "end": "2010364"
  },
  {
    "text": "this case, the bounce, and what the resulting stream would be if that operator was applied.",
    "start": "2010364",
    "end": "2015871"
  },
  {
    "text": "So in this case, the top\nstream has one, two, three, four, five, and six, as events.",
    "start": "2015871",
    "end": "2021262"
  },
  {
    "text": "But two, three, four, and five, are really close together. So what the resulting stream will do,",
    "start": "2021262",
    "end": "2027151"
  },
  {
    "text": "is it will filter out\ntwo, three, and four, and it will only keep five.",
    "start": "2027151",
    "end": "2032159"
  },
  {
    "text": "So we can use this\noperator for our example, to limit the amount of\nqueries that we send,",
    "start": "2032159",
    "end": "2037413"
  },
  {
    "text": "by simply adding this debounce operator. And then we say 500, that means if the user stops\ntyping for half a second,",
    "start": "2037413",
    "end": "2045132"
  },
  {
    "text": "then we'd send it to the backend. And this way we prevent us\nfrom spamming our server.",
    "start": "2045132",
    "end": "2051467"
  },
  {
    "text": "But we're not there yet, there's still another thing, is that if your query\nhas very few characters,",
    "start": "2051467",
    "end": "2058390"
  },
  {
    "text": "you often get a lot of results\nwhich are not really relevant for that user.",
    "start": "2058391",
    "end": "2062579"
  },
  {
    "text": "So in this case, we only get good results if our query is bigger\nthan three characters long.",
    "start": "2063629",
    "end": "2070053"
  },
  {
    "text": "So what we want to do, is if the query is less than that, we just want to ignore those queries.",
    "start": "2070053",
    "end": "2075944"
  },
  {
    "text": "And there's an operator for that as well. This one is called Filter. And what Filter does,",
    "start": "2075944",
    "end": "2081356"
  },
  {
    "start": "2077000",
    "end": "2144000"
  },
  {
    "text": "is it takes a predicate function, and a predicate function is a function which must return to a\nfalse, based on an input.",
    "start": "2081357",
    "end": "2087202"
  },
  {
    "text": "And in this case, if\nthe x is bigger than 10, it will allow them in.",
    "start": "2087203",
    "end": "2092948"
  },
  {
    "text": "So that's why you can see that the numbers that are lower than are simply ignored.",
    "start": "2092948",
    "end": "2098288"
  },
  {
    "text": "So we can use that in our example, by simply calling filter\nbefore we do the debounce.",
    "start": "2099184",
    "end": "2105120"
  },
  {
    "text": "And we take the query and we just say, \"Only allow them in if the query length",
    "start": "2105120",
    "end": "2110271"
  },
  {
    "text": "\"is bigger than three.\" So now we've solved that problem. But of course, we're not\nout of the woods yet.",
    "start": "2110271",
    "end": "2116932"
  },
  {
    "text": "There's another problem still, and that is that sometimes\nwe send the same query",
    "start": "2116932",
    "end": "2122267"
  },
  {
    "text": "twice in a row, and this can happen if the\nuser presses the Enter key. So what we see now,",
    "start": "2122267",
    "end": "2127679"
  },
  {
    "text": "is that there was a five second window between the first \"GOTO\"\nand the second \"GOTO\" query. And we all know that we\nprobably don't have new results",
    "start": "2127679",
    "end": "2135161"
  },
  {
    "text": "within a five second window. So what we want to do, is we only want the query, if the query is actually\nchanged from before.",
    "start": "2135161",
    "end": "2143610"
  },
  {
    "text": "And there's an operator for that as well. This one is called distinctUntilChanged.",
    "start": "2143610",
    "end": "2149453"
  },
  {
    "start": "2144000",
    "end": "2197000"
  },
  {
    "text": "And what it does is it, it will only allow an event through",
    "start": "2149454",
    "end": "2154627"
  },
  {
    "text": "if it's different from the one before. And this is something\nwe haven't seen before. What we see here is an operator",
    "start": "2154627",
    "end": "2161265"
  },
  {
    "text": "which has an internal state. This operator keeps track\nof the previous entry",
    "start": "2161266",
    "end": "2166606"
  },
  {
    "text": "that was made through it. So you can have operators that have state. So that's pretty powerful.",
    "start": "2166606",
    "end": "2172336"
  },
  {
    "text": "And as you can see, in the resulting stream we\nonly have alternating values.",
    "start": "2172336",
    "end": "2178114"
  },
  {
    "text": "So we apply this operator,\ndistinctUntilChanged, and now we only sent the query",
    "start": "2179365",
    "end": "2185006"
  },
  {
    "text": "if the query has actually changed. So now we have, we are almost finished.",
    "start": "2185007",
    "end": "2191471"
  },
  {
    "text": "We have one big problem\nstill left to resolve. And that problem is rather devious,",
    "start": "2191471",
    "end": "2198065"
  },
  {
    "start": "2197000",
    "end": "2318000"
  },
  {
    "text": "and that's this one. So here we see a timeline,\nand we see two queries. So the user search \"Goto Rotterdam\",",
    "start": "2198065",
    "end": "2205234"
  },
  {
    "text": "quickly realized that the\n\"Goto\" is not on Rotterdam, but in Amsterdam, so he changes his query\nto \"Goto Amsterdam\".",
    "start": "2205234",
    "end": "2212245"
  },
  {
    "text": "But now we have two\nasynchronous requests in the air at the same time. And if your server his having an off-day,",
    "start": "2212245",
    "end": "2218609"
  },
  {
    "text": "the results for \"Goto Amsterdam\",",
    "start": "2218610",
    "end": "2221360"
  },
  {
    "text": "might get results first before\nthe results go to Rotterdam. So what you see is something very strange,",
    "start": "2223655",
    "end": "2229821"
  },
  {
    "text": "is in your query box you\nsee \"Goto Amsterdam\", but you see the results\nfor \"Goto Rotterdam\"",
    "start": "2229821",
    "end": "2235782"
  },
  {
    "text": "in your auto-complete, which is very weird and not\nsomething we want to have. So what we want to do,",
    "start": "2235782",
    "end": "2242233"
  },
  {
    "text": "is we want to express\nthe idea of only using the results of the last Ajax requests",
    "start": "2242233",
    "end": "2248207"
  },
  {
    "text": "that was sent to the backend. So as you probably guessed by now, there's an operator for that,",
    "start": "2248207",
    "end": "2254716"
  },
  {
    "text": "has a very strange name. It's called flatMapLatest, don't ask me why. But it does exactly what I just described.",
    "start": "2254716",
    "end": "2261955"
  },
  {
    "text": "So if you have multiple\nasynchronous requests, it will only use the results of the lost request that was made.",
    "start": "2261956",
    "end": "2268807"
  },
  {
    "text": "So that bug that we just\nsaw is no longer an issue.",
    "start": "2268808",
    "end": "2272975"
  },
  {
    "text": "So this is the completed example, and as you might notice,\nit's relatively small.",
    "start": "2274065",
    "end": "2280776"
  },
  {
    "text": "It has a few lines of codes, but it does a lot of work. And that's the power of RxJS.",
    "start": "2282313",
    "end": "2288029"
  },
  {
    "text": "By using these standard operations and combining them in clever ways, you get a really powerful mechanism.",
    "start": "2288029",
    "end": "2294922"
  },
  {
    "text": "And if I'm absolutely honest, if I had to write this with\nRxJS in pure JavaScript,",
    "start": "2294923",
    "end": "2300048"
  },
  {
    "text": "my code would probably be 500 lines long, and there would be probably a lot of bugs",
    "start": "2300049",
    "end": "2305982"
  },
  {
    "text": "in that code as well. So by standing on the shoulders of giants, in this case RxJS,",
    "start": "2305982",
    "end": "2311151"
  },
  {
    "text": "you can leverage them to\naccomplish great things in relatively few lines of code.",
    "start": "2311151",
    "end": "2317013"
  },
  {
    "start": "2318000",
    "end": "2595000"
  },
  {
    "text": "But there are some other benefits of RxJS. And the first benefit is that\nthe producer and the consumer",
    "start": "2318062",
    "end": "2325257"
  },
  {
    "text": "are decoupled. So what I mean by that is that the producer, in this case, was the \"keyup\" event that\nfired the initial event,",
    "start": "2325257",
    "end": "2332416"
  },
  {
    "text": "and the consumer was the subscribe. And as long as the subscribe got its array of auto-completions,\nit was happy.",
    "start": "2332416",
    "end": "2339670"
  },
  {
    "text": "So it didn't care how many operations we put in between there, we did not have to change\nthe consumer or the producer,",
    "start": "2339670",
    "end": "2346953"
  },
  {
    "text": "you didn't have to change that code. So that's very powerful. And of course, the other benefit,",
    "start": "2346953",
    "end": "2352032"
  },
  {
    "text": "I already explained it a little, is that operations are a very,\nvery powerful building block. So you can combine them in\nmultiple interesting ways,",
    "start": "2352032",
    "end": "2360891"
  },
  {
    "text": "again, like Lego blocks, and you can get really powerful results.",
    "start": "2360892",
    "end": "2366767"
  },
  {
    "text": "But there is a really\nbig drawback to RxJS, and that is that it has a very,\nvery steep learning curve.",
    "start": "2366767",
    "end": "2373948"
  },
  {
    "text": "And I don't like calling\nit a learning curve, I like to call it a learning cliff,",
    "start": "2373948",
    "end": "2379464"
  },
  {
    "text": "because this black one, that's kind of my experience with RxJS. And that's because you really have",
    "start": "2379464",
    "end": "2385913"
  },
  {
    "text": "to let go of your imperative model, because you are so used to\nalways manipulating variables and not thinking in streams,",
    "start": "2385913",
    "end": "2392635"
  },
  {
    "text": "that it takes a little while before that clicks in your head. But once it does, it's very rewarding,",
    "start": "2392635",
    "end": "2400814"
  },
  {
    "text": "because you see a lot of problems that you would previously solve with imperative programming,",
    "start": "2400814",
    "end": "2406000"
  },
  {
    "text": "that you can now solve with observables, in a cleaner way. So it's definitely worth looking at it.",
    "start": "2406000",
    "end": "2412288"
  },
  {
    "text": "And as you saw from the\nauto-complete example, it's really, really powerful.",
    "start": "2412288",
    "end": "2417430"
  },
  {
    "text": "The second con is that the documentation is very highly conceptual.",
    "start": "2417430",
    "end": "2422629"
  },
  {
    "text": "And what I mean by that is that, sometimes the documentation reads like someone's thesis project.",
    "start": "2422629",
    "end": "2429109"
  },
  {
    "text": "It's really, very high and abstract. So in this case, \"Returns\nan observable sequence",
    "start": "2429110",
    "end": "2435590"
  },
  {
    "text": "\"that contains only\ndistinct contiguous elements \"according to the\nkeySelector and comparer.\"",
    "start": "2435590",
    "end": "2441465"
  },
  {
    "text": "So what's a keySelector? What's a comparer? Contiguous elements? So does anyone have a clue\nwhat this operator is,",
    "start": "2441465",
    "end": "2448691"
  },
  {
    "text": "the description for this operator? Yeah, exactly. This is distinctUntilChanged.",
    "start": "2448691",
    "end": "2454088"
  },
  {
    "text": "So sometimes when I'm\ntrying to program in RxJS, and I encounter this documentation,",
    "start": "2454088",
    "end": "2459500"
  },
  {
    "text": "I'm like, \"This is not the one I need.\" And then later on, I find\nsomething on Stack Overflow, then it turns out I had\nthe right one all along,",
    "start": "2459500",
    "end": "2466165"
  },
  {
    "text": "but this documentation doesn't help. The documentation is also very, it shows you very non-practical examples.",
    "start": "2466165",
    "end": "2473880"
  },
  {
    "text": "So it'll always be like,\n\"An array of one to 10,\" and then applies the operation on that. So it's not always practical.",
    "start": "2473880",
    "end": "2480000"
  },
  {
    "text": "So what I wish they would do is, that they would use\nmore practical examples in the documentation.",
    "start": "2480000",
    "end": "2485855"
  },
  {
    "text": "So that was reactive programming, a nice tool to supercharge\nyour asynchronous events.",
    "start": "2486724",
    "end": "2493770"
  },
  {
    "text": "Now we're almost at the\nend of the presentation. But it's customary for a presenter to give you guys some recommendations",
    "start": "2495398",
    "end": "2502018"
  },
  {
    "text": "on how to use these technologies. And my first recommendation might be",
    "start": "2502018",
    "end": "2507027"
  },
  {
    "text": "a little counterintuitive, but I don't recommend using Redux or RxJS if your app is really, really small,",
    "start": "2507027",
    "end": "2514304"
  },
  {
    "text": "because you add a lot overhead, and that might not be worth it. So for the Todo application,",
    "start": "2514304",
    "end": "2519311"
  },
  {
    "text": "and for the counter application, using RxJS or Redux is\nreally, really an overkill.",
    "start": "2519311",
    "end": "2525375"
  },
  {
    "text": "But if your application\nstarts to feel too big, and I know this is a little\nwishy-washy feeling thingy,",
    "start": "2526702",
    "end": "2534888"
  },
  {
    "text": "but you when you get there. So suddenly, you rollout this application, and all of a sudden, it\nwon't fit in your head,",
    "start": "2534888",
    "end": "2540544"
  },
  {
    "text": "you don't know where the state should be, and new team members don't understand where everything goes, then it might be a good\ntime to start using Redux.",
    "start": "2540544",
    "end": "2548563"
  },
  {
    "text": "Like I said, it has a\nsmall learning curve, but it's small enough so you\ncan onboard new team members",
    "start": "2548563",
    "end": "2554442"
  },
  {
    "text": "relatively quickly. So that's my second recommendation. If it starts feeling\ntoo big, just use Redux.",
    "start": "2554443",
    "end": "2560361"
  },
  {
    "text": "It's a nice way to store your state. My third recommendation, is that when you have events that require",
    "start": "2560362",
    "end": "2567599"
  },
  {
    "text": "a lot of coordination, like we saw in the auto-complete example, you want to do some higher level things with asynchronous events,",
    "start": "2567599",
    "end": "2573319"
  },
  {
    "text": "you want to supercharge a component, then it might be time\nto swallow the red pill and start using RxJS.",
    "start": "2573319",
    "end": "2579828"
  },
  {
    "text": "But like I said, it has a\nvery steep learning curve, so do expect some onboarding\nproblems with newer developers,",
    "start": "2581357",
    "end": "2587532"
  },
  {
    "text": "because you have to take sometime to explain how it works,\nand how to use RxJS.",
    "start": "2587532",
    "end": "2593034"
  },
  {
    "start": "2595000",
    "end": "2849000"
  },
  {
    "text": "So I just gave you like a 50 minute-ish presentation",
    "start": "2595169",
    "end": "2601016"
  },
  {
    "text": "on Redux and reactive programming, and I barely scratched the surface. So it's not enough to know Redux or RxJS.",
    "start": "2601016",
    "end": "2607682"
  },
  {
    "text": "So what I want to do is I want write a series of blog posts to fleshing out these\ntopics a little more,",
    "start": "2607682",
    "end": "2613786"
  },
  {
    "text": "provide you guys with some\nvideos, with blog posts, to show you guys how to\nlearn Redux and ReactX.",
    "start": "2613786",
    "end": "2621462"
  },
  {
    "text": "The funny thing about\nboth Redux and ReactiveX, there are a lot of videos available. The maker of Redux has his\non course on Egghead.io,",
    "start": "2621462",
    "end": "2629361"
  },
  {
    "text": "it's free, you can follow that, and he will explain how to build Redux, and how to use Redux.",
    "start": "2629361",
    "end": "2634942"
  },
  {
    "text": "So it's very cool. So keep an eye on\ndontpanic.42.nl for that series. And I will start sending them out weekly,",
    "start": "2634943",
    "end": "2642442"
  },
  {
    "text": "starting this Thursday. So that's almost it.",
    "start": "2642442",
    "end": "2647754"
  },
  {
    "text": "We also have a stand downstairs where you can play a Fallout-based terminal hacking mini-game.",
    "start": "2647754",
    "end": "2653187"
  },
  {
    "text": "You can win a grand\nprize, a bit rubber duck. And I'm also there at the stand,",
    "start": "2653187",
    "end": "2658294"
  },
  {
    "text": "so if you want to talk to me about Redux, or RxJS,\nreactive programming,",
    "start": "2658294",
    "end": "2663683"
  },
  {
    "text": "come find me. So that's it. Don't forget to vote for this session,",
    "start": "2663683",
    "end": "2668711"
  },
  {
    "text": "and any other session that you attend. Thank you. (audience applauds)",
    "start": "2668711",
    "end": "2675678"
  },
  {
    "text": "So there's a question, \"If the state gets \"really, really, really big, \"what is the performance with Redux?\"",
    "start": "2683412",
    "end": "2688917"
  },
  {
    "text": "Well, it will degrade of course, because you cannot keep infinitely numbers",
    "start": "2688917",
    "end": "2694069"
  },
  {
    "text": "of things in memory. But if you use pagination, or you only put in the store\nwhat you currently need,",
    "start": "2694070",
    "end": "2701538"
  },
  {
    "text": "then you can mitigate that. It's regular JavaScript, so you can't keep putting in memory,",
    "start": "2701538",
    "end": "2706881"
  },
  {
    "text": "and of course, it will lose\na little bit of performance.",
    "start": "2706882",
    "end": "2711049"
  },
  {
    "text": "\"Memory leaks in Redux?\" I don't think that's\nsomething you can easily do,",
    "start": "2713681",
    "end": "2721627"
  },
  {
    "text": "because there's one Redux\nstore per application, so it's not prone to leaking,",
    "start": "2723747",
    "end": "2729268"
  },
  {
    "text": "because there's only one store, and that store will\njust need to be removed when the user closes its tab.",
    "start": "2729269",
    "end": "2734464"
  },
  {
    "text": "So in that way, memory leaks are not that much of a problem in Redux,",
    "start": "2734465",
    "end": "2739804"
  },
  {
    "text": "because there's just one store, and it will get cleaned up\nwhen you close your tab.",
    "start": "2739804",
    "end": "2746064"
  },
  {
    "text": "So to give you guys a\nlittle bit background, so Model-View-Controller versus\nthe component architecture.",
    "start": "2746064",
    "end": "2752257"
  },
  {
    "text": "I did not invent the\ncomponent architecture, I was really hit in the face with it.",
    "start": "2752257",
    "end": "2757544"
  },
  {
    "text": "So we are Angular short\nat 42, Angular 1.0, and in Angular 2.0,",
    "start": "2757544",
    "end": "2762765"
  },
  {
    "text": "they went to this new architecture. But the thing is, the trend has been going\nfor a little while.",
    "start": "2762765",
    "end": "2770065"
  },
  {
    "text": "So React was the first one to embrace the component architecture, and Angular followed suite,\nand Polymer came along.",
    "start": "2770065",
    "end": "2776800"
  },
  {
    "text": "So a lot of frameworks are\nmoving towards components. So I think that if you\nupgrade to Angular 2,",
    "start": "2776800",
    "end": "2782417"
  },
  {
    "text": "you almost don't have a choice, you will go to the component architecture. But the difference between a component,",
    "start": "2782417",
    "end": "2788580"
  },
  {
    "text": "and Model-View-Controller, it's just that in a component,",
    "start": "2788581",
    "end": "2792666"
  },
  {
    "text": "it's basically the combination\nof a view and a controller, in one single thing. But the difference is that it does not",
    "start": "2793828",
    "end": "2801280"
  },
  {
    "text": "try to take them separately. So Model-View-Controller, there's often a lot of talk about",
    "start": "2801280",
    "end": "2806934"
  },
  {
    "text": "having multiple controllers\nfor the same view, and having multiple views\nfor the same controller. And we all know that\nthat's secretly not true.",
    "start": "2806934",
    "end": "2813796"
  },
  {
    "text": "I've never written a\ncontroller for multiple views, or had the view for one single controller.",
    "start": "2813796",
    "end": "2819807"
  },
  {
    "text": "So really the components are\nbasically a way of saying, \"We acknowledge the fact \"that they are married to each other,",
    "start": "2819807",
    "end": "2826008"
  },
  {
    "text": "\"so let's not pretend anymore \"that they are two separate entities.\" So it's not too much of\na stretch to migrate.",
    "start": "2826009",
    "end": "2833981"
  },
  {
    "text": "And in Angular 2 there are\nupgrade guides on how to do that.",
    "start": "2833981",
    "end": "2838148"
  },
  {
    "text": "(audience applauds) - [Man] Thank you Maarten.",
    "start": "2839680",
    "end": "2843691"
  }
]