[
  {
    "text": "I'm yet another engineer from ambata uh",
    "start": "2840",
    "end": "5080"
  },
  {
    "text": "Tim Mel Christ um and today we're going",
    "start": "5080",
    "end": "6919"
  },
  {
    "text": "to do a crash course in no camel modules",
    "start": "6919",
    "end": "9360"
  },
  {
    "text": "um I'm sort of assuming that most people",
    "start": "9360",
    "end": "11160"
  },
  {
    "text": "don't know a camel so that's sort of the",
    "start": "11160",
    "end": "13000"
  },
  {
    "text": "basis for the whole talk um so yeah what",
    "start": "13000",
    "end": "16198"
  },
  {
    "text": "to expect from the talk so we're going",
    "start": "16199",
    "end": "17600"
  },
  {
    "text": "to do a little bit about o camel but",
    "start": "17600",
    "end": "19199"
  },
  {
    "text": "probably not too much into detail about",
    "start": "19199",
    "end": "21880"
  },
  {
    "text": "everything in O camel it's mostly going",
    "start": "21880",
    "end": "23599"
  },
  {
    "text": "to focus on these Concepts around",
    "start": "23599",
    "end": "25640"
  },
  {
    "text": "modules um and defining what modules are",
    "start": "25640",
    "end": "29359"
  },
  {
    "text": "how we use them and then we're going to",
    "start": "29359",
    "end": "31400"
  },
  {
    "text": "go into a comparison with how modules",
    "start": "31400",
    "end": "33440"
  },
  {
    "text": "compare to type classes in high school",
    "start": "33440",
    "end": "36200"
  },
  {
    "text": "um and there's going to be lots of code",
    "start": "36200",
    "end": "38399"
  },
  {
    "text": "but hopefully it'll be quite",
    "start": "38399",
    "end": "39920"
  },
  {
    "text": "understandable code it's not too",
    "start": "39920",
    "end": "41399"
  },
  {
    "text": "dissimilar to house",
    "start": "41399",
    "end": "43239"
  },
  {
    "text": "school so as outcomes from this from",
    "start": "43239",
    "end": "46160"
  },
  {
    "text": "this talk I'd like people to understand",
    "start": "46160",
    "end": "47719"
  },
  {
    "text": "o camel um and the module",
    "start": "47719",
    "end": "50160"
  },
  {
    "text": "system and appreciate the difference",
    "start": "50160",
    "end": "52800"
  },
  {
    "text": "between modules and type classes um the",
    "start": "52800",
    "end": "55440"
  },
  {
    "text": "ml module system or our camel module",
    "start": "55440",
    "end": "57320"
  },
  {
    "text": "system comes up a lot with house like",
    "start": "57320",
    "end": "60000"
  },
  {
    "text": "talking around has school needing its",
    "start": "60000",
    "end": "61480"
  },
  {
    "text": "own module system and why can't we have",
    "start": "61480",
    "end": "63480"
  },
  {
    "text": "a module system in has school um and",
    "start": "63480",
    "end": "65880"
  },
  {
    "text": "just what that module system would do",
    "start": "65880",
    "end": "68000"
  },
  {
    "text": "for us in high school um so rather than",
    "start": "68000",
    "end": "71080"
  },
  {
    "text": "having sort of people hand waving and",
    "start": "71080",
    "end": "72720"
  },
  {
    "text": "going they can do this typ type classes",
    "start": "72720",
    "end": "75400"
  },
  {
    "text": "can do that let's sort of actually look",
    "start": "75400",
    "end": "77680"
  },
  {
    "text": "at it and um understand what the two",
    "start": "77680",
    "end": "79799"
  },
  {
    "text": "things offer um and then perhaps write",
    "start": "79799",
    "end": "82119"
  },
  {
    "text": "to O camel because it's",
    "start": "82119",
    "end": "83720"
  },
  {
    "text": "awesome um but first a bit of an",
    "start": "83720",
    "end": "86479"
  },
  {
    "text": "anecdote about why I learned oaml um",
    "start": "86479",
    "end": "89960"
  },
  {
    "text": "about four or 5 years or probably about",
    "start": "89960",
    "end": "92200"
  },
  {
    "text": "3 or 4 years ago I sort of was looking",
    "start": "92200",
    "end": "94439"
  },
  {
    "text": "at a new um language to learn um",
    "start": "94439",
    "end": "97240"
  },
  {
    "text": "everyone was doing hous cuz that was",
    "start": "97240",
    "end": "98880"
  },
  {
    "text": "cool so I went stuff that I'm I'm going",
    "start": "98880",
    "end": "102040"
  },
  {
    "text": "to do o camel cuz no one else was doing",
    "start": "102040",
    "end": "104040"
  },
  {
    "text": "o camel that I really knew of at the",
    "start": "104040",
    "end": "105719"
  },
  {
    "text": "time so yeah that's this is my cartoon",
    "start": "105719",
    "end": "108880"
  },
  {
    "text": "cuz it's about",
    "start": "108880",
    "end": "110680"
  },
  {
    "text": "me um and it's always been about me the",
    "start": "110680",
    "end": "114560"
  },
  {
    "text": "first time I saw it it was my name",
    "start": "114560",
    "end": "117600"
  },
  {
    "text": "um so yeah let's get on to some",
    "start": "117600",
    "end": "119960"
  },
  {
    "text": "terminology about the a camel module",
    "start": "119960",
    "end": "121600"
  },
  {
    "text": "system so it's really a camel as a",
    "start": "121600",
    "end": "124560"
  },
  {
    "text": "language you can think of as two",
    "start": "124560",
    "end": "125920"
  },
  {
    "text": "different layers or two different",
    "start": "125920",
    "end": "127159"
  },
  {
    "text": "sublanguages within it there's this",
    "start": "127159",
    "end": "129280"
  },
  {
    "text": "first language which is the language of",
    "start": "129280",
    "end": "131720"
  },
  {
    "text": "the functions and the values um and",
    "start": "131720",
    "end": "134160"
  },
  {
    "text": "that's sort of the typical thing you'd",
    "start": "134160",
    "end": "135360"
  },
  {
    "text": "be programming in day to-day it's kind",
    "start": "135360",
    "end": "137599"
  },
  {
    "text": "of what you'd be programming in in Haso",
    "start": "137599",
    "end": "140239"
  },
  {
    "text": "and then in O camel there's this second",
    "start": "140239",
    "end": "141720"
  },
  {
    "text": "layer which is the language of modules",
    "start": "141720",
    "end": "144280"
  },
  {
    "text": "and functions and they sort of they're",
    "start": "144280",
    "end": "147080"
  },
  {
    "text": "really two separate separate parts of",
    "start": "147080",
    "end": "149160"
  },
  {
    "text": "the language and they sort of interact",
    "start": "149160",
    "end": "150519"
  },
  {
    "text": "in ways um but they are two separate",
    "start": "150519",
    "end": "153160"
  },
  {
    "text": "parts and so the parts of the module",
    "start": "153160",
    "end": "155200"
  },
  {
    "text": "system we're going to look at is",
    "start": "155200",
    "end": "156879"
  },
  {
    "text": "structures signatures and",
    "start": "156879",
    "end": "159280"
  },
  {
    "text": "funs um but first we need a little",
    "start": "159280",
    "end": "162440"
  },
  {
    "text": "detour and look at how oaml does type",
    "start": "162440",
    "end": "166040"
  },
  {
    "text": "declarations um so it's not really scary",
    "start": "166040",
    "end": "168599"
  },
  {
    "text": "it's just a little bit different um so",
    "start": "168599",
    "end": "170879"
  },
  {
    "text": "basically looking at we've got a um H at",
    "start": "170879",
    "end": "173480"
  },
  {
    "text": "the top and our camel underneath so hus",
    "start": "173480",
    "end": "176560"
  },
  {
    "text": "has got uppercase um starting for the",
    "start": "176560",
    "end": "179599"
  },
  {
    "text": "tip",
    "start": "179599",
    "end": "180360"
  },
  {
    "text": "whereas o camel's got lower case so you",
    "start": "180360",
    "end": "182159"
  },
  {
    "text": "can see that for the ins and the balls",
    "start": "182159",
    "end": "183920"
  },
  {
    "text": "and stuff in the list um type variables",
    "start": "183920",
    "end": "186879"
  },
  {
    "text": "in O camel are written with a single",
    "start": "186879",
    "end": "188519"
  },
  {
    "text": "quote um so you can have a look at these",
    "start": "188519",
    "end": "190519"
  },
  {
    "text": "two the definition of fold so fold left",
    "start": "190519",
    "end": "193480"
  },
  {
    "text": "is taken from hcll and this is fold left",
    "start": "193480",
    "end": "196120"
  },
  {
    "text": "from o camel and you can see where",
    "start": "196120",
    "end": "197920"
  },
  {
    "text": "you've got sort of A's and B's in hus",
    "start": "197920",
    "end": "200480"
  },
  {
    "text": "you've got quotee A's quote B's in in O",
    "start": "200480",
    "end": "203200"
  },
  {
    "text": "camel so it's kind of the same even",
    "start": "203200",
    "end": "205480"
  },
  {
    "text": "though they're using A's and B's in the",
    "start": "205480",
    "end": "207400"
  },
  {
    "text": "different order which is annoying um and",
    "start": "207400",
    "end": "209560"
  },
  {
    "text": "then",
    "start": "209560",
    "end": "210360"
  },
  {
    "text": "the last bit is the type Constructors",
    "start": "210360",
    "end": "212159"
  },
  {
    "text": "are reversed so where you've got um well",
    "start": "212159",
    "end": "215680"
  },
  {
    "text": "essentially you've got this this list of",
    "start": "215680",
    "end": "217959"
  },
  {
    "text": "A's or it's probably better to look at",
    "start": "217959",
    "end": "220200"
  },
  {
    "text": "these you get a tree of A's in um in hus",
    "start": "220200",
    "end": "223760"
  },
  {
    "text": "you've got a quote a of trees so it's",
    "start": "223760",
    "end": "226120"
  },
  {
    "text": "just reversing them so you can kind of",
    "start": "226120",
    "end": "228360"
  },
  {
    "text": "look at it and work out what what it's",
    "start": "228360",
    "end": "230239"
  },
  {
    "text": "actually doing so enough of that",
    "start": "230239",
    "end": "232439"
  },
  {
    "text": "hopefully that's enough of an",
    "start": "232439",
    "end": "233439"
  },
  {
    "text": "explanation so people can read these",
    "start": "233439",
    "end": "235920"
  },
  {
    "text": "sorts of things so first is structures",
    "start": "235920",
    "end": "238760"
  },
  {
    "text": "so structures in camel um provide units",
    "start": "238760",
    "end": "241439"
  },
  {
    "text": "of organization so it's basically",
    "start": "241439",
    "end": "243920"
  },
  {
    "text": "somewhere where you put all your types",
    "start": "243920",
    "end": "245640"
  },
  {
    "text": "and your functions together and we",
    "start": "245640",
    "end": "247480"
  },
  {
    "text": "introduce them with this struct keyword",
    "start": "247480",
    "end": "249879"
  },
  {
    "text": "and close it with an N keyword so here",
    "start": "249879",
    "end": "252239"
  },
  {
    "text": "we've got we've got a type T which we've",
    "start": "252239",
    "end": "254319"
  },
  {
    "text": "bound to an in we've got a set which is",
    "start": "254319",
    "end": "256600"
  },
  {
    "text": "a list of T's and we've got a couple of",
    "start": "256600",
    "end": "258840"
  },
  {
    "text": "functions there so that's the structure",
    "start": "258840",
    "end": "262040"
  },
  {
    "text": "um and the interesting thing with",
    "start": "262040",
    "end": "263840"
  },
  {
    "text": "structures is if you don't Define a name",
    "start": "263840",
    "end": "266639"
  },
  {
    "text": "for them so this is called inset if we",
    "start": "266639",
    "end": "268520"
  },
  {
    "text": "didn't Define a name for it it'll get",
    "start": "268520",
    "end": "270400"
  },
  {
    "text": "the name of the structure from the file",
    "start": "270400",
    "end": "273199"
  },
  {
    "text": "name but it doesn't have to be like",
    "start": "273199",
    "end": "275759"
  },
  {
    "text": "there's not a onetoone mapping like",
    "start": "275759",
    "end": "277080"
  },
  {
    "text": "there is in hasle it's not the the",
    "start": "277080",
    "end": "279240"
  },
  {
    "text": "module name needs to match the file",
    "start": "279240",
    "end": "281639"
  },
  {
    "text": "name so calling structures pretty",
    "start": "281639",
    "end": "284360"
  },
  {
    "text": "straightforward it's just using dot",
    "start": "284360",
    "end": "286000"
  },
  {
    "text": "notation so whatever the name of the the",
    "start": "286000",
    "end": "289000"
  },
  {
    "text": "structure is dot whatever it is you want",
    "start": "289000",
    "end": "291280"
  },
  {
    "text": "to access within that so T empty pretty",
    "start": "291280",
    "end": "294600"
  },
  {
    "text": "much as you'd",
    "start": "294600",
    "end": "295919"
  },
  {
    "text": "expect um the interesting thing about",
    "start": "295919",
    "end": "298320"
  },
  {
    "text": "structures in O camel is they can be",
    "start": "298320",
    "end": "300240"
  },
  {
    "text": "nested so nested structures within",
    "start": "300240",
    "end": "302199"
  },
  {
    "text": "nested structures so here we've got this",
    "start": "302199",
    "end": "304400"
  },
  {
    "text": "in set within that we've got another",
    "start": "304400",
    "end": "307120"
  },
  {
    "text": "another struct which is compare and",
    "start": "307120",
    "end": "308919"
  },
  {
    "text": "that's got some things in there and if",
    "start": "308919",
    "end": "310639"
  },
  {
    "text": "we want to access those that's dotted as",
    "start": "310639",
    "end": "313280"
  },
  {
    "text": "well so fairly as you'd expect but then",
    "start": "313280",
    "end": "318199"
  },
  {
    "text": "using structures so we don't really want",
    "start": "318199",
    "end": "321199"
  },
  {
    "text": "to use that long name to refer to the",
    "start": "321199",
    "end": "323680"
  },
  {
    "text": "structure all the time so we got a we've",
    "start": "323680",
    "end": "326000"
  },
  {
    "text": "got three main ways that we can we can",
    "start": "326000",
    "end": "328360"
  },
  {
    "text": "make that more palatable us both the",
    "start": "328360",
    "end": "330560"
  },
  {
    "text": "first one is we can open the structure",
    "start": "330560",
    "end": "332280"
  },
  {
    "text": "at the top of the file so if we open",
    "start": "332280",
    "end": "334759"
  },
  {
    "text": "inset it brings everything within inset",
    "start": "334759",
    "end": "337080"
  },
  {
    "text": "into the scope of that file um so here",
    "start": "337080",
    "end": "339560"
  },
  {
    "text": "we're just calling compare equal without",
    "start": "339560",
    "end": "342160"
  },
  {
    "text": "actually referring to inset the second",
    "start": "342160",
    "end": "344880"
  },
  {
    "text": "option you've got which I really miss in",
    "start": "344880",
    "end": "346720"
  },
  {
    "text": "high school is you've got these local",
    "start": "346720",
    "end": "348680"
  },
  {
    "text": "opens so you can refer to the the module",
    "start": "348680",
    "end": "352000"
  },
  {
    "text": "with the dot dot and then within those",
    "start": "352000",
    "end": "353880"
  },
  {
    "text": "round brackets everything's scoped",
    "start": "353880",
    "end": "356000"
  },
  {
    "text": "within that particular module so you",
    "start": "356000",
    "end": "357680"
  },
  {
    "text": "don't need to use the longer name to",
    "start": "357680",
    "end": "359240"
  },
  {
    "text": "refer to it and that's that's quite",
    "start": "359240",
    "end": "361319"
  },
  {
    "text": "handy if you're if you're only using",
    "start": "361319",
    "end": "363479"
  },
  {
    "text": "that module in a one sort of place",
    "start": "363479",
    "end": "365560"
  },
  {
    "text": "within your code you can just include it",
    "start": "365560",
    "end": "367800"
  },
  {
    "text": "there with like uh using a local open",
    "start": "367800",
    "end": "370680"
  },
  {
    "text": "and then everything's scoped within that",
    "start": "370680",
    "end": "372280"
  },
  {
    "text": "module um and the final the final option",
    "start": "372280",
    "end": "375599"
  },
  {
    "text": "you've got is you can bind it to a",
    "start": "375599",
    "end": "377240"
  },
  {
    "text": "shorter variable name so you just do",
    "start": "377240",
    "end": "379639"
  },
  {
    "text": "I'll let module s and then you use that",
    "start": "379639",
    "end": "382520"
  },
  {
    "text": "shorter name so that's quite that's",
    "start": "382520",
    "end": "384840"
  },
  {
    "text": "quite helpful as well so that's",
    "start": "384840",
    "end": "386720"
  },
  {
    "text": "structures",
    "start": "386720",
    "end": "389720"
  },
  {
    "text": "so the next thing that we don't really",
    "start": "389759",
    "end": "392360"
  },
  {
    "text": "have in high school I suppose is",
    "start": "392360",
    "end": "394639"
  },
  {
    "text": "interfaces so interface is defining well",
    "start": "394639",
    "end": "398360"
  },
  {
    "text": "a stru sorry a signature is defining an",
    "start": "398360",
    "end": "400759"
  },
  {
    "text": "interface for a structure and this is",
    "start": "400759",
    "end": "403319"
  },
  {
    "text": "basically a list of Declarations of",
    "start": "403319",
    "end": "405840"
  },
  {
    "text": "types and um functions but without any",
    "start": "405840",
    "end": "410360"
  },
  {
    "text": "implementations um and we're introducing",
    "start": "410360",
    "end": "412720"
  },
  {
    "text": "it with the Sig and end keywords but the",
    "start": "412720",
    "end": "415599"
  },
  {
    "text": "interesting thing about signatures in O",
    "start": "415599",
    "end": "417440"
  },
  {
    "text": "camel is that you can change they don't",
    "start": "417440",
    "end": "420039"
  },
  {
    "text": "have to match what is exported with the",
    "start": "420039",
    "end": "422599"
  },
  {
    "text": "structure so you can refine things you",
    "start": "422599",
    "end": "425360"
  },
  {
    "text": "can be more constrained about the types",
    "start": "425360",
    "end": "427400"
  },
  {
    "text": "you export and you can choose to not",
    "start": "427400",
    "end": "430240"
  },
  {
    "text": "export types at all so you can have some",
    "start": "430240",
    "end": "432199"
  },
  {
    "text": "of your types as abstract so anything",
    "start": "432199",
    "end": "434479"
  },
  {
    "text": "outside of that that structure can't",
    "start": "434479",
    "end": "437000"
  },
  {
    "text": "refer to the internal representation",
    "start": "437000",
    "end": "439319"
  },
  {
    "text": "which is which is",
    "start": "439319",
    "end": "440680"
  },
  {
    "text": "helpful um and typically when you're",
    "start": "440680",
    "end": "442680"
  },
  {
    "text": "looking at EML projects in the wild",
    "start": "442680",
    "end": "445479"
  },
  {
    "text": "you'll have the structure in one file so",
    "start": "445479",
    "end": "448120"
  },
  {
    "text": "it'll be say set ml in one file and then",
    "start": "448120",
    "end": "451720"
  },
  {
    "text": "the other file will be set mli and that",
    "start": "451720",
    "end": "454560"
  },
  {
    "text": "will include the signature but it",
    "start": "454560",
    "end": "456479"
  },
  {
    "text": "doesn't have to be that way you can have",
    "start": "456479",
    "end": "458280"
  },
  {
    "text": "you can have them both in line in the ml",
    "start": "458280",
    "end": "461199"
  },
  {
    "text": "file so have a look in the example yeah",
    "start": "461199",
    "end": "464039"
  },
  {
    "text": "this monad example hopefully everyone's",
    "start": "464039",
    "end": "466360"
  },
  {
    "text": "familiar with that so this is just the",
    "start": "466360",
    "end": "467800"
  },
  {
    "text": "signature and defining the the interface",
    "start": "467800",
    "end": "470400"
  },
  {
    "text": "for a monad um and these are just infix",
    "start": "470400",
    "end": "473759"
  },
  {
    "text": "operators so fairly simple so now we get",
    "start": "473759",
    "end": "477800"
  },
  {
    "text": "to the cool part um funs so funs when I",
    "start": "477800",
    "end": "482879"
  },
  {
    "text": "first heard about functors in no camel I",
    "start": "482879",
    "end": "484520"
  },
  {
    "text": "thought cool I've got fmap um but no",
    "start": "484520",
    "end": "487479"
  },
  {
    "text": "funs in O um oel aren't hasool funs",
    "start": "487479",
    "end": "490280"
  },
  {
    "text": "they're not providing a map like an F",
    "start": "490280",
    "end": "492240"
  },
  {
    "text": "map across the structure um although",
    "start": "492240",
    "end": "495039"
  },
  {
    "text": "they are funs in the category Theory",
    "start": "495039",
    "end": "497039"
  },
  {
    "text": "sense of things so functors in in O",
    "start": "497039",
    "end": "499800"
  },
  {
    "text": "camel are a function from a struct to a",
    "start": "499800",
    "end": "502199"
  },
  {
    "text": "struct so basically you're",
    "start": "502199",
    "end": "503720"
  },
  {
    "text": "parameterizing a struct in terms of",
    "start": "503720",
    "end": "505840"
  },
  {
    "text": "another struct and it produces a struct",
    "start": "505840",
    "end": "508199"
  },
  {
    "text": "so it is like category Theory wise it's",
    "start": "508199",
    "end": "510879"
  },
  {
    "text": "it's a functor but um it's not an fmap",
    "start": "510879",
    "end": "513479"
  },
  {
    "text": "functor um so yeah another way to think",
    "start": "513479",
    "end": "515680"
  },
  {
    "text": "of it is you're lifting functions into",
    "start": "515680",
    "end": "517479"
  },
  {
    "text": "the module",
    "start": "517479",
    "end": "518760"
  },
  {
    "text": "language so let's have a look at how",
    "start": "518760",
    "end": "521200"
  },
  {
    "text": "that looks in in",
    "start": "521200",
    "end": "523719"
  },
  {
    "text": "OTL so here we're introducing a",
    "start": "523720",
    "end": "526160"
  },
  {
    "text": "signature for some sort of ordering and",
    "start": "526160",
    "end": "528160"
  },
  {
    "text": "we've got a function comparing two types",
    "start": "528160",
    "end": "530320"
  },
  {
    "text": "of T and gives us an end so that's minus",
    "start": "530320",
    "end": "533680"
  },
  {
    "text": "1 0 1 depending on how they how they are",
    "start": "533680",
    "end": "536440"
  },
  {
    "text": "ordered and then we're reintroducing",
    "start": "536440",
    "end": "538560"
  },
  {
    "text": "this set which we had before but instead",
    "start": "538560",
    "end": "541399"
  },
  {
    "text": "of um yeah we've put the quote T",
    "start": "541399",
    "end": "544640"
  },
  {
    "text": "everywhere so it doesn't have a type for",
    "start": "544640",
    "end": "547040"
  },
  {
    "text": "T",
    "start": "547040",
    "end": "548360"
  },
  {
    "text": "yet so that's just that's just",
    "start": "548360",
    "end": "550920"
  },
  {
    "text": "signatures um so this is where the",
    "start": "550920",
    "end": "553079"
  },
  {
    "text": "functor comes in so we've got this",
    "start": "553079",
    "end": "554920"
  },
  {
    "text": "functor called makes it and it's it's",
    "start": "554920",
    "end": "557800"
  },
  {
    "text": "parameterized over this ordering which",
    "start": "557800",
    "end": "560040"
  },
  {
    "text": "we've bound to",
    "start": "560040",
    "end": "562079"
  },
  {
    "text": "O and then everywhere that we want to",
    "start": "562079",
    "end": "564800"
  },
  {
    "text": "want to rely on the ordering we're using",
    "start": "564800",
    "end": "566760"
  },
  {
    "text": "the o to bind to bind things from o to",
    "start": "566760",
    "end": "570000"
  },
  {
    "text": "things inside this fun so we're binding",
    "start": "570000",
    "end": "572200"
  },
  {
    "text": "the type T from the T of O um and then",
    "start": "572200",
    "end": "576760"
  },
  {
    "text": "inside our Our member implementation",
    "start": "576760",
    "end": "579360"
  },
  {
    "text": "we're using the compare from o to do the",
    "start": "579360",
    "end": "581760"
  },
  {
    "text": "implementation so we're not actually",
    "start": "581760",
    "end": "583800"
  },
  {
    "text": "we're not we're not relying on anything",
    "start": "583800",
    "end": "585839"
  },
  {
    "text": "concrete inside the ordering we're just",
    "start": "585839",
    "end": "588040"
  },
  {
    "text": "relying on the interface that we're",
    "start": "588040",
    "end": "589240"
  },
  {
    "text": "getting from ordering and so this is",
    "start": "589240",
    "end": "592160"
  },
  {
    "text": "this is an example of a fun with one",
    "start": "592160",
    "end": "593560"
  },
  {
    "text": "argument but you can have arbitrary",
    "start": "593560",
    "end": "594959"
  },
  {
    "text": "arguments to funs so you could have and",
    "start": "594959",
    "end": "597320"
  },
  {
    "text": "you just introduce those as another",
    "start": "597320",
    "end": "598760"
  },
  {
    "text": "round bracket another VAR like another",
    "start": "598760",
    "end": "601320"
  },
  {
    "text": "variable name dot dot and then whatever",
    "start": "601320",
    "end": "603480"
  },
  {
    "text": "the the signature or structure for it",
    "start": "603480",
    "end": "607760"
  },
  {
    "text": "is um yeah and using our funter so we",
    "start": "608279",
    "end": "613800"
  },
  {
    "text": "had the that ordering um signature",
    "start": "613800",
    "end": "615880"
  },
  {
    "text": "before so we want an ordering for in so",
    "start": "615880",
    "end": "618640"
  },
  {
    "text": "that's what we're doing in this top bit",
    "start": "618640",
    "end": "619959"
  },
  {
    "text": "the in ordering we're binding the type T",
    "start": "619959",
    "end": "622800"
  },
  {
    "text": "to an in and we're binding the compare",
    "start": "622800",
    "end": "625079"
  },
  {
    "text": "to an ink compare that we get from the",
    "start": "625079",
    "end": "626600"
  },
  {
    "text": "standard library in um in oaml and then",
    "start": "626600",
    "end": "629839"
  },
  {
    "text": "we're using that signature or that",
    "start": "629839",
    "end": "632360"
  },
  {
    "text": "struct there to and passing it into the",
    "start": "632360",
    "end": "635040"
  },
  {
    "text": "Mak set funter and that's going to give",
    "start": "635040",
    "end": "636839"
  },
  {
    "text": "us an inset which is ordered in relation",
    "start": "636839",
    "end": "639519"
  },
  {
    "text": "to this int ordering that we've",
    "start": "639519",
    "end": "641399"
  },
  {
    "text": "defined and then if we want to use it we",
    "start": "641399",
    "end": "644480"
  },
  {
    "text": "refer to the inet and we do our inserts",
    "start": "644480",
    "end": "646880"
  },
  {
    "text": "or member or something or we can use",
    "start": "646880",
    "end": "649160"
  },
  {
    "text": "this local open syntax which is a little",
    "start": "649160",
    "end": "651160"
  },
  {
    "text": "bit more convenient for that so that's",
    "start": "651160",
    "end": "653000"
  },
  {
    "text": "how we use a",
    "start": "653000",
    "end": "655720"
  },
  {
    "text": "functor so just in review",
    "start": "656120",
    "end": "659519"
  },
  {
    "text": "es group together types and functions",
    "start": "659519",
    "end": "661160"
  },
  {
    "text": "without Implement with implementations",
    "start": "661160",
    "end": "663560"
  },
  {
    "text": "whereas the signatures are an interface",
    "start": "663560",
    "end": "665760"
  },
  {
    "text": "for a structure so they don't Define",
    "start": "665760",
    "end": "667839"
  },
  {
    "text": "that they don't Define any",
    "start": "667839",
    "end": "669240"
  },
  {
    "text": "implementation for things and function",
    "start": "669240",
    "end": "672040"
  },
  {
    "text": "funs are just functions from a struct to",
    "start": "672040",
    "end": "674000"
  },
  {
    "text": "struct so if nothing else I'd like",
    "start": "674000",
    "end": "676760"
  },
  {
    "text": "people to take this away with them so",
    "start": "676760",
    "end": "678560"
  },
  {
    "text": "they understand what what these things",
    "start": "678560",
    "end": "681079"
  },
  {
    "text": "mean and how they compare to type",
    "start": "681079",
    "end": "683560"
  },
  {
    "text": "classes which is yeah what we're going",
    "start": "683560",
    "end": "685680"
  },
  {
    "text": "to get on to",
    "start": "685680",
    "end": "687920"
  },
  {
    "text": "next so",
    "start": "687920",
    "end": "691240"
  },
  {
    "text": "yeah type classes everyone sort of type",
    "start": "691480",
    "end": "694040"
  },
  {
    "text": "classes are great",
    "start": "694040",
    "end": "695959"
  },
  {
    "text": "um but they're a particular technique",
    "start": "695959",
    "end": "698720"
  },
  {
    "text": "and they're not the same as a module",
    "start": "698720",
    "end": "701120"
  },
  {
    "text": "system in O camel so type classes in in",
    "start": "701120",
    "end": "703800"
  },
  {
    "text": "has school are really about bringing",
    "start": "703800",
    "end": "706480"
  },
  {
    "text": "implicit program construction and ad hoc",
    "start": "706480",
    "end": "708800"
  },
  {
    "text": "polymorphism to H and by implicit",
    "start": "708800",
    "end": "711720"
  },
  {
    "text": "program construction I mean when you use",
    "start": "711720",
    "end": "714720"
  },
  {
    "text": "a type class you don't specify the",
    "start": "714720",
    "end": "716800"
  },
  {
    "text": "instance of that type class you're using",
    "start": "716800",
    "end": "718680"
  },
  {
    "text": "at that point Point H goes away and",
    "start": "718680",
    "end": "721399"
  },
  {
    "text": "finds that type class based on the type",
    "start": "721399",
    "end": "723399"
  },
  {
    "text": "that you're",
    "start": "723399",
    "end": "724600"
  },
  {
    "text": "using whereas in in modules like okam",
    "start": "724600",
    "end": "728320"
  },
  {
    "text": "modules the emphasis is not so much",
    "start": "728320",
    "end": "730560"
  },
  {
    "text": "about this ad hoc polymorphism it's more",
    "start": "730560",
    "end": "732600"
  },
  {
    "text": "about explicitly constructing programs",
    "start": "732600",
    "end": "735120"
  },
  {
    "text": "and",
    "start": "735120",
    "end": "736040"
  },
  {
    "text": "decomposing larger programs into smaller",
    "start": "736040",
    "end": "738600"
  },
  {
    "text": "pieces um so it's not it's not the ad",
    "start": "738600",
    "end": "741399"
  },
  {
    "text": "hoc polymorphism but there's certain",
    "start": "741399",
    "end": "743440"
  },
  {
    "text": "things that cross over between the two",
    "start": "743440",
    "end": "745560"
  },
  {
    "text": "so there's things that you can do in um",
    "start": "745560",
    "end": "748120"
  },
  {
    "text": "type classes you can do in the module",
    "start": "748120",
    "end": "749760"
  },
  {
    "text": "system so it's it's interesting to look",
    "start": "749760",
    "end": "751800"
  },
  {
    "text": "at how these two concepts",
    "start": "751800",
    "end": "753839"
  },
  {
    "text": "map um so I'm probably oversimplifying",
    "start": "753839",
    "end": "758320"
  },
  {
    "text": "the um the motivations on both sides and",
    "start": "758320",
    "end": "760720"
  },
  {
    "text": "probably people won't really agree with",
    "start": "760720",
    "end": "763079"
  },
  {
    "text": "the ad hoc polymorphism necessarily but",
    "start": "763079",
    "end": "765600"
  },
  {
    "text": "yeah there's there's significant",
    "start": "765600",
    "end": "767519"
  },
  {
    "text": "overlap so let's have a look at some",
    "start": "767519",
    "end": "770279"
  },
  {
    "text": "some steps that we can use to translate",
    "start": "770279",
    "end": "772480"
  },
  {
    "text": "type classes into signatures so there's",
    "start": "772480",
    "end": "774199"
  },
  {
    "text": "a direct comparison between the two",
    "start": "774199",
    "end": "776480"
  },
  {
    "text": "things um",
    "start": "776480",
    "end": "779720"
  },
  {
    "text": "so up the top here we've got this has",
    "start": "779720",
    "end": "782079"
  },
  {
    "text": "school type class which is show and it",
    "start": "782079",
    "end": "784399"
  },
  {
    "text": "provides us a function from an A to a",
    "start": "784399",
    "end": "786600"
  },
  {
    "text": "string so if we were to write that in no",
    "start": "786600",
    "end": "788880"
  },
  {
    "text": "camel we'd introduce a signature and so",
    "start": "788880",
    "end": "791760"
  },
  {
    "text": "we've got a signature show we've got a",
    "start": "791760",
    "end": "793920"
  },
  {
    "text": "type T and then we've got the same",
    "start": "793920",
    "end": "795480"
  },
  {
    "text": "function so those are sort of the",
    "start": "795480",
    "end": "796720"
  },
  {
    "text": "equivalent things so if you're",
    "start": "796720",
    "end": "798079"
  },
  {
    "text": "converting hll into o camel that's the",
    "start": "798079",
    "end": "800320"
  },
  {
    "text": "first step so your type classes will",
    "start": "800320",
    "end": "801920"
  },
  {
    "text": "become",
    "start": "801920",
    "end": "803639"
  },
  {
    "text": "signatures the next step in high school",
    "start": "803639",
    "end": "806880"
  },
  {
    "text": "you define some sort of instance for",
    "start": "806880",
    "end": "808600"
  },
  {
    "text": "that type class for that particular type",
    "start": "808600",
    "end": "810519"
  },
  {
    "text": "that you want so here we've got CH but",
    "start": "810519",
    "end": "812360"
  },
  {
    "text": "that's that's already provided in GHC um",
    "start": "812360",
    "end": "815040"
  },
  {
    "text": "but you could imagine if you're using",
    "start": "815040",
    "end": "816560"
  },
  {
    "text": "ason or you some sort of um Json",
    "start": "816560",
    "end": "819240"
  },
  {
    "text": "serialization you'd have to Define that",
    "start": "819240",
    "end": "821000"
  },
  {
    "text": "yourself so the equivalent in O camel is",
    "start": "821000",
    "end": "823720"
  },
  {
    "text": "you've got this structure and then you",
    "start": "823720",
    "end": "826240"
  },
  {
    "text": "provide you bind your type to type T and",
    "start": "826240",
    "end": "829959"
  },
  {
    "text": "then you provide an implementation for",
    "start": "829959",
    "end": "831680"
  },
  {
    "text": "show so that's the that's the equivalent",
    "start": "831680",
    "end": "833720"
  },
  {
    "text": "so instances in hasal become structures",
    "start": "833720",
    "end": "836120"
  },
  {
    "text": "in O camel",
    "start": "836120",
    "end": "839480"
  },
  {
    "text": "so using the type class in high school",
    "start": "839759",
    "end": "842360"
  },
  {
    "text": "you don't really need to do anything",
    "start": "842360",
    "end": "843839"
  },
  {
    "text": "special High School will work out what",
    "start": "843839",
    "end": "846839"
  },
  {
    "text": "instance of that type class you want",
    "start": "846839",
    "end": "848720"
  },
  {
    "text": "based on the value that you provide so",
    "start": "848720",
    "end": "852480"
  },
  {
    "text": "it's fairly that's fairly",
    "start": "852480",
    "end": "853839"
  },
  {
    "text": "straightforward you don't need to do",
    "start": "853839",
    "end": "855120"
  },
  {
    "text": "anything",
    "start": "855120",
    "end": "857040"
  },
  {
    "text": "special unfortunately that's not the",
    "start": "857040",
    "end": "859560"
  },
  {
    "text": "case in no camel um you've got to jump",
    "start": "859560",
    "end": "861959"
  },
  {
    "text": "through at least one extra hoop um so we",
    "start": "861959",
    "end": "864560"
  },
  {
    "text": "know camel if you want to use that that",
    "start": "864560",
    "end": "867839"
  },
  {
    "text": "um struct and signature we we had before",
    "start": "867839",
    "end": "871199"
  },
  {
    "text": "we need to Define our function that",
    "start": "871199",
    "end": "872759"
  },
  {
    "text": "wants to use it so our def function to",
    "start": "872759",
    "end": "875279"
  },
  {
    "text": "CSV um needs to be parameterized over",
    "start": "875279",
    "end": "878920"
  },
  {
    "text": "the S the show um and then we can use it",
    "start": "878920",
    "end": "882600"
  },
  {
    "text": "so we've got this funter here it's cross",
    "start": "882600",
    "end": "884639"
  },
  {
    "text": "s um we've defined some implementation",
    "start": "884639",
    "end": "887399"
  },
  {
    "text": "for show in and then we need to in",
    "start": "887399",
    "end": "890800"
  },
  {
    "text": "instantiate with that functor a module X",
    "start": "890800",
    "end": "894000"
  },
  {
    "text": "and then we can call the 2 CSV and in",
    "start": "894000",
    "end": "896360"
  },
  {
    "text": "here it's just doing um it's just doing",
    "start": "896360",
    "end": "898800"
  },
  {
    "text": "two to ins but you could imagine if you",
    "start": "898800",
    "end": "901480"
  },
  {
    "text": "did some implementations of show in or",
    "start": "901480",
    "end": "904320"
  },
  {
    "text": "for real numbers or strings or something",
    "start": "904320",
    "end": "906720"
  },
  {
    "text": "else you could you could call it in the",
    "start": "906720",
    "end": "908959"
  },
  {
    "text": "same",
    "start": "908959",
    "end": "911279"
  },
  {
    "text": "way so the verdict from this so type",
    "start": "911839",
    "end": "916600"
  },
  {
    "text": "classes can be translated into modules",
    "start": "916600",
    "end": "918480"
  },
  {
    "text": "there's fairly simple steps that you can",
    "start": "918480",
    "end": "920360"
  },
  {
    "text": "go through to do that so which is which",
    "start": "920360",
    "end": "922639"
  },
  {
    "text": "is really nice if you're reading papers",
    "start": "922639",
    "end": "924759"
  },
  {
    "text": "and a lot of papers are written in high",
    "start": "924759",
    "end": "926240"
  },
  {
    "text": "school so you can compile um you can",
    "start": "926240",
    "end": "928120"
  },
  {
    "text": "compile them in your head or translate",
    "start": "928120",
    "end": "929759"
  },
  {
    "text": "them in your head to O camel and get the",
    "start": "929759",
    "end": "932360"
  },
  {
    "text": "equivalent thing but what you notice",
    "start": "932360",
    "end": "934839"
  },
  {
    "text": "when we're going through all these is",
    "start": "934839",
    "end": "936399"
  },
  {
    "text": "that the oel ends up being a lot more",
    "start": "936399",
    "end": "938839"
  },
  {
    "text": "Vose um and I suppose in a less",
    "start": "938839",
    "end": "943000"
  },
  {
    "text": "simplistic example like Jason um",
    "start": "943000",
    "end": "945360"
  },
  {
    "text": "encoding like decoding encoding to Jason",
    "start": "945360",
    "end": "948279"
  },
  {
    "text": "um the H would end up being a little bit",
    "start": "948279",
    "end": "951040"
  },
  {
    "text": "more of aose because you'd have to write",
    "start": "951040",
    "end": "952560"
  },
  {
    "text": "that instance of the type class um but",
    "start": "952560",
    "end": "955959"
  },
  {
    "text": "still it's it's more aose it's it's kind",
    "start": "955959",
    "end": "957800"
  },
  {
    "text": "of nasty where you have to",
    "start": "957800",
    "end": "959560"
  },
  {
    "text": "wrap the fun wrap the things in funs and",
    "start": "959560",
    "end": "961880"
  },
  {
    "text": "instantiate them with a particular",
    "start": "961880",
    "end": "963399"
  },
  {
    "text": "version of the funter but you can do it",
    "start": "963399",
    "end": "965880"
  },
  {
    "text": "and it's not it's not too terrible",
    "start": "965880",
    "end": "968120"
  },
  {
    "text": "considering the the motivation for",
    "start": "968120",
    "end": "970600"
  },
  {
    "text": "modules in in oaml isn't to provide that",
    "start": "970600",
    "end": "973319"
  },
  {
    "text": "ad hoc polymorphism um it's for program",
    "start": "973319",
    "end": "976199"
  },
  {
    "text": "construction and and",
    "start": "976199",
    "end": "978240"
  },
  {
    "text": "decomposition um but really what what",
    "start": "978240",
    "end": "981440"
  },
  {
    "text": "hk's doing under the hood is that it is",
    "start": "981440",
    "end": "983720"
  },
  {
    "text": "actually tracking that mapping from a",
    "start": "983720",
    "end": "985160"
  },
  {
    "text": "type to a type class instance um it's",
    "start": "985160",
    "end": "987880"
  },
  {
    "text": "just that you don't you don't have to",
    "start": "987880",
    "end": "989880"
  },
  {
    "text": "care about it there's sort of reasonable",
    "start": "989880",
    "end": "992800"
  },
  {
    "text": "um reasonable guarantees that there's",
    "start": "992800",
    "end": "995000"
  },
  {
    "text": "only one instance of that type class but",
    "start": "995000",
    "end": "997959"
  },
  {
    "text": "yeah there if you're sufficiently",
    "start": "997959",
    "end": "999639"
  },
  {
    "text": "devious you can get around that if you",
    "start": "999639",
    "end": "1001240"
  },
  {
    "text": "want um but usually you don't want",
    "start": "1001240",
    "end": "1005399"
  },
  {
    "text": "to okay so now going on to some things",
    "start": "1005399",
    "end": "1008519"
  },
  {
    "text": "that I think I probably shouldn't say",
    "start": "1008519",
    "end": "1010880"
  },
  {
    "text": "that they aren't possible in high school",
    "start": "1010880",
    "end": "1013279"
  },
  {
    "text": "but they're not as they're not as",
    "start": "1013279",
    "end": "1015560"
  },
  {
    "text": "pleasing I suppose to me anyway um so a",
    "start": "1015560",
    "end": "1018560"
  },
  {
    "text": "few things that we can you can do in",
    "start": "1018560",
    "end": "1020160"
  },
  {
    "text": "oaml that are really really a bit more",
    "start": "1020160",
    "end": "1022600"
  },
  {
    "text": "difficult to do in Hol is we can do",
    "start": "1022600",
    "end": "1024558"
  },
  {
    "text": "thing we can do types safe extensions to",
    "start": "1024559",
    "end": "1026438"
  },
  {
    "text": "existing modules so say you've got a um",
    "start": "1026439",
    "end": "1029760"
  },
  {
    "text": "a particular module you're getting from",
    "start": "1029760",
    "end": "1031319"
  },
  {
    "text": "another another library and you don't",
    "start": "1031319",
    "end": "1033798"
  },
  {
    "text": "quite like it or you don't agree with",
    "start": "1033799",
    "end": "1035079"
  },
  {
    "text": "the implementation of a particular",
    "start": "1035079",
    "end": "1036600"
  },
  {
    "text": "function in your code you can pull in",
    "start": "1036600",
    "end": "1039319"
  },
  {
    "text": "that thing and you can overwrite that",
    "start": "1039319",
    "end": "1041038"
  },
  {
    "text": "function or you can add new functions to",
    "start": "1041039",
    "end": "1042798"
  },
  {
    "text": "it um the other really cool thing is",
    "start": "1042799",
    "end": "1045400"
  },
  {
    "text": "parameterizing libraries over different",
    "start": "1045400",
    "end": "1047760"
  },
  {
    "text": "things so you can parameter them over",
    "start": "1047760",
    "end": "1049640"
  },
  {
    "text": "architectures or platforms or compilers",
    "start": "1049640",
    "end": "1052600"
  },
  {
    "text": "or different run times if you want um",
    "start": "1052600",
    "end": "1055240"
  },
  {
    "text": "and the common code's common and you",
    "start": "1055240",
    "end": "1056760"
  },
  {
    "text": "just use funs to parameterize over those",
    "start": "1056760",
    "end": "1060080"
  },
  {
    "text": "um and the other other cool thing is",
    "start": "1060080",
    "end": "1062440"
  },
  {
    "text": "parameterizing libraries over their",
    "start": "1062440",
    "end": "1063880"
  },
  {
    "text": "dependencies similar to how backpacks",
    "start": "1063880",
    "end": "1066000"
  },
  {
    "text": "were going to work for cabal you can",
    "start": "1066000",
    "end": "1068240"
  },
  {
    "text": "parameterize libraries over their",
    "start": "1068240",
    "end": "1069679"
  },
  {
    "text": "dependencies in no camel um and the last",
    "start": "1069679",
    "end": "1072120"
  },
  {
    "text": "one maybe not quite so compelling but",
    "start": "1072120",
    "end": "1073919"
  },
  {
    "text": "you can you can instantiate modules with",
    "start": "1073919",
    "end": "1075919"
  },
  {
    "text": "state so you could use a funter to",
    "start": "1075919",
    "end": "1078200"
  },
  {
    "text": "instantiate module which keeps",
    "start": "1078200",
    "end": "1079880"
  },
  {
    "text": "particular state it doesn't need to be",
    "start": "1079880",
    "end": "1081240"
  },
  {
    "text": "mutable state it could be sort of some",
    "start": "1081240",
    "end": "1083200"
  },
  {
    "text": "initialization stuff that you want to",
    "start": "1083200",
    "end": "1084720"
  },
  {
    "text": "keep in there um yeah so let's let's go",
    "start": "1084720",
    "end": "1087880"
  },
  {
    "text": "through some examples of each of",
    "start": "1087880",
    "end": "1091000"
  },
  {
    "text": "those so first type safe extensions um",
    "start": "1091000",
    "end": "1095120"
  },
  {
    "text": "this is this is used heavily in",
    "start": "1095120",
    "end": "1097600"
  },
  {
    "text": "recursing a little bit the okl standard",
    "start": "1097600",
    "end": "1099280"
  },
  {
    "text": "library is fairly poor um so there's a",
    "start": "1099280",
    "end": "1102000"
  },
  {
    "text": "couple of replacements for the standard",
    "start": "1102000",
    "end": "1103480"
  },
  {
    "text": "library that take the standard library",
    "start": "1103480",
    "end": "1105360"
  },
  {
    "text": "and extend it with more useful functions",
    "start": "1105360",
    "end": "1107320"
  },
  {
    "text": "there's there's core and there's",
    "start": "1107320",
    "end": "1108919"
  },
  {
    "text": "batteries and they use this technique to",
    "start": "1108919",
    "end": "1111440"
  },
  {
    "text": "extend the standard Library um so",
    "start": "1111440",
    "end": "1114120"
  },
  {
    "text": "basically what you would do is you",
    "start": "1114120",
    "end": "1115720"
  },
  {
    "text": "define some sort of module um so we've",
    "start": "1115720",
    "end": "1118080"
  },
  {
    "text": "got a listy module and using the include",
    "start": "1118080",
    "end": "1120440"
  },
  {
    "text": "keyword we're bringing in everything",
    "start": "1120440",
    "end": "1122480"
  },
  {
    "text": "from the list module um that was that's",
    "start": "1122480",
    "end": "1125880"
  },
  {
    "text": "in the standard library and then we're",
    "start": "1125880",
    "end": "1127840"
  },
  {
    "text": "defining so intersperse doesn't come in",
    "start": "1127840",
    "end": "1129559"
  },
  {
    "text": "the standard Library so we want that so",
    "start": "1129559",
    "end": "1131640"
  },
  {
    "text": "we're defining an implementation of",
    "start": "1131640",
    "end": "1133400"
  },
  {
    "text": "intersperse um and then at the end of",
    "start": "1133400",
    "end": "1137400"
  },
  {
    "text": "that we're re-exporting lisy module and",
    "start": "1137400",
    "end": "1139840"
  },
  {
    "text": "replacing the existing list module so",
    "start": "1139840",
    "end": "1142280"
  },
  {
    "text": "you could think in in your program as",
    "start": "1142280",
    "end": "1144320"
  },
  {
    "text": "long as you you include this at the top",
    "start": "1144320",
    "end": "1146559"
  },
  {
    "text": "of your file then it would include the",
    "start": "1146559",
    "end": "1149679"
  },
  {
    "text": "intersperse and it would look the same",
    "start": "1149679",
    "end": "1151280"
  },
  {
    "text": "as the standard Library so you wouldn't",
    "start": "1151280",
    "end": "1152799"
  },
  {
    "text": "have need to do anything so it's sort of",
    "start": "1152799",
    "end": "1155000"
  },
  {
    "text": "it's monkey patching but it's um it's",
    "start": "1155000",
    "end": "1156919"
  },
  {
    "text": "type safe um and the interesting thing",
    "start": "1156919",
    "end": "1160000"
  },
  {
    "text": "with o camel is you can do the same",
    "start": "1160000",
    "end": "1161520"
  },
  {
    "text": "thing for signatures that's just a",
    "start": "1161520",
    "end": "1163559"
  },
  {
    "text": "different syntax so you could include",
    "start": "1163559",
    "end": "1165600"
  },
  {
    "text": "module type of list which would include",
    "start": "1165600",
    "end": "1167720"
  },
  {
    "text": "everything from the list signature into",
    "start": "1167720",
    "end": "1170159"
  },
  {
    "text": "your signature and then you could you",
    "start": "1170159",
    "end": "1171760"
  },
  {
    "text": "could mess around with things",
    "start": "1171760",
    "end": "1174960"
  },
  {
    "text": "there um okay parameterizing libraries",
    "start": "1176200",
    "end": "1179640"
  },
  {
    "text": "so this is a really interesting thing",
    "start": "1179640",
    "end": "1181480"
  },
  {
    "text": "for me personally because I I really",
    "start": "1181480",
    "end": "1185159"
  },
  {
    "text": "like the way that these libraries do",
    "start": "1185159",
    "end": "1187039"
  },
  {
    "text": "this so first example is cooh HTP which",
    "start": "1187039",
    "end": "1190240"
  },
  {
    "text": "is a library for creating HTTP demons",
    "start": "1190240",
    "end": "1193280"
  },
  {
    "text": "and basically there's this common set of",
    "start": "1193280",
    "end": "1195360"
  },
  {
    "text": "code for it but it's parameterized over",
    "start": "1195360",
    "end": "1197679"
  },
  {
    "text": "four different ay",
    "start": "1197679",
    "end": "1199360"
  },
  {
    "text": "libraries so you've got first one is LWT",
    "start": "1199360",
    "end": "1202760"
  },
  {
    "text": "which is backed by Unix threads async",
    "start": "1202760",
    "end": "1205760"
  },
  {
    "text": "which is backed by Unix threads but",
    "start": "1205760",
    "end": "1207640"
  },
  {
    "text": "slightly different um and then you've",
    "start": "1207640",
    "end": "1210159"
  },
  {
    "text": "got these two other ones so you've got",
    "start": "1210159",
    "end": "1211400"
  },
  {
    "text": "an OS independent one which is used in",
    "start": "1211400",
    "end": "1213280"
  },
  {
    "text": "The Mirage unic kernel so there's no OS",
    "start": "1213280",
    "end": "1215640"
  },
  {
    "text": "underneath it it's just raw um C and",
    "start": "1215640",
    "end": "1218640"
  },
  {
    "text": "whatever they provide in that and you've",
    "start": "1218640",
    "end": "1220440"
  },
  {
    "text": "also got a asynchronous one backed by",
    "start": "1220440",
    "end": "1223080"
  },
  {
    "text": "JavaScript so the same same common code",
    "start": "1223080",
    "end": "1225679"
  },
  {
    "text": "Works across all of those and they just",
    "start": "1225679",
    "end": "1227840"
  },
  {
    "text": "when you build it you say which one you",
    "start": "1227840",
    "end": "1229360"
  },
  {
    "text": "want to use and it parameterizes over",
    "start": "1229360",
    "end": "1231360"
  },
  {
    "text": "that which I think is really cool um a",
    "start": "1231360",
    "end": "1234440"
  },
  {
    "text": "couple of other examples is the Mirage",
    "start": "1234440",
    "end": "1235960"
  },
  {
    "text": "uni kernel so applications you write are",
    "start": "1235960",
    "end": "1238640"
  },
  {
    "text": "funed across the OS components they use",
    "start": "1238640",
    "end": "1241440"
  },
  {
    "text": "so basically I've got an example after",
    "start": "1241440",
    "end": "1243200"
  },
  {
    "text": "this but you've got a bunch of you've",
    "start": "1243200",
    "end": "1245120"
  },
  {
    "text": "got a funter which is your which is your",
    "start": "1245120",
    "end": "1247039"
  },
  {
    "text": "main function that you want to write and",
    "start": "1247039",
    "end": "1249360"
  },
  {
    "text": "you just include the different um",
    "start": "1249360",
    "end": "1251559"
  },
  {
    "text": "different modules that you want to use",
    "start": "1251559",
    "end": "1253679"
  },
  {
    "text": "um couple of other ones hermine which",
    "start": "1253679",
    "end": "1255520"
  },
  {
    "text": "does the same sort of thing but across",
    "start": "1255520",
    "end": "1256919"
  },
  {
    "text": "storage implementations an O camel graph",
    "start": "1256919",
    "end": "1259559"
  },
  {
    "text": "which provides generic graph libraries",
    "start": "1259559",
    "end": "1261600"
  },
  {
    "text": "um in O camel but using functors that",
    "start": "1261600",
    "end": "1263600"
  },
  {
    "text": "can be um parameterized across different",
    "start": "1263600",
    "end": "1266880"
  },
  {
    "text": "implementations or instances um but I",
    "start": "1266880",
    "end": "1270600"
  },
  {
    "text": "suppose to do the same sort of thing in",
    "start": "1270600",
    "end": "1272240"
  },
  {
    "text": "high school you kind of you have to use",
    "start": "1272240",
    "end": "1274159"
  },
  {
    "text": "things like CPP to sort of um work",
    "start": "1274159",
    "end": "1278000"
  },
  {
    "text": "around or detect when things are there",
    "start": "1278000",
    "end": "1280520"
  },
  {
    "text": "um and it's not basically with CPP it's",
    "start": "1280520",
    "end": "1284880"
  },
  {
    "text": "it's kind of it's pretty portable um but",
    "start": "1284880",
    "end": "1288159"
  },
  {
    "text": "it's typed and it's got a different",
    "start": "1288159",
    "end": "1290799"
  },
  {
    "text": "syntax to hle and it's just not really",
    "start": "1290799",
    "end": "1294600"
  },
  {
    "text": "that nice it's kind of gross um ideally",
    "start": "1294600",
    "end": "1298640"
  },
  {
    "text": "you'd want these things to be typed you",
    "start": "1298640",
    "end": "1300480"
  },
  {
    "text": "know it's it's like you're writing C",
    "start": "1300480",
    "end": "1302360"
  },
  {
    "text": "code in your has school",
    "start": "1302360",
    "end": "1305520"
  },
  {
    "text": "um so this is an example of the Mirage",
    "start": "1305520",
    "end": "1309559"
  },
  {
    "text": "OS so they Define these signatures for",
    "start": "1309559",
    "end": "1312200"
  },
  {
    "text": "particular",
    "start": "1312200",
    "end": "1313480"
  },
  {
    "text": "devices and then here we're defining a",
    "start": "1313480",
    "end": "1315679"
  },
  {
    "text": "console device and we're bringing in the",
    "start": "1315679",
    "end": "1318840"
  },
  {
    "text": "signature for ins and we're binding the",
    "start": "1318840",
    "end": "1321080"
  },
  {
    "text": "error to our error type that we've",
    "start": "1321080",
    "end": "1323919"
  },
  {
    "text": "defined here and we're introducing this",
    "start": "1323919",
    "end": "1326279"
  },
  {
    "text": "log s so log a string of something to",
    "start": "1326279",
    "end": "1329919"
  },
  {
    "text": "string and tagging it with some sort of",
    "start": "1329919",
    "end": "1332880"
  },
  {
    "text": "IO here and so our main function that",
    "start": "1332880",
    "end": "1335400"
  },
  {
    "text": "would actually use those two things um",
    "start": "1335400",
    "end": "1337880"
  },
  {
    "text": "is a funter so we we're got a funter",
    "start": "1337880",
    "end": "1340279"
  },
  {
    "text": "across some sort of console and we",
    "start": "1340279",
    "end": "1342480"
  },
  {
    "text": "providing the implementation and we um",
    "start": "1342480",
    "end": "1345080"
  },
  {
    "text": "referencing C and our implementation",
    "start": "1345080",
    "end": "1347480"
  },
  {
    "text": "doesn't look inside see to see how it",
    "start": "1347480",
    "end": "1349720"
  },
  {
    "text": "works it's just using that interface so",
    "start": "1349720",
    "end": "1352400"
  },
  {
    "text": "that's how you do you define um right",
    "start": "1352400",
    "end": "1354760"
  },
  {
    "text": "programs in in",
    "start": "1354760",
    "end": "1356520"
  },
  {
    "text": "Mirage um and as I said you can go",
    "start": "1356520",
    "end": "1359720"
  },
  {
    "text": "across multiple things so your functor",
    "start": "1359720",
    "end": "1362000"
  },
  {
    "text": "doesn't have to be across one particular",
    "start": "1362000",
    "end": "1363679"
  },
  {
    "text": "thing so this is an example um where",
    "start": "1363679",
    "end": "1365760"
  },
  {
    "text": "they're going across a console a file",
    "start": "1365760",
    "end": "1368159"
  },
  {
    "text": "system I'm not sure what tmpl is and",
    "start": "1368159",
    "end": "1370919"
  },
  {
    "text": "some sort of HTTP server so you can",
    "start": "1370919",
    "end": "1373360"
  },
  {
    "text": "parameterize across multiple things",
    "start": "1373360",
    "end": "1375159"
  },
  {
    "text": "obviously as you get more and more",
    "start": "1375159",
    "end": "1376720"
  },
  {
    "text": "things you're parameterizing across it",
    "start": "1376720",
    "end": "1378200"
  },
  {
    "text": "gets more complicated you got more",
    "start": "1378200",
    "end": "1379880"
  },
  {
    "text": "dependencies but you yeah you can do",
    "start": "1379880",
    "end": "1383360"
  },
  {
    "text": "it another example from the core library",
    "start": "1383360",
    "end": "1386880"
  },
  {
    "text": "is this monad thing um so basically",
    "start": "1386880",
    "end": "1389520"
  },
  {
    "text": "they've defined a basic interface for a",
    "start": "1389520",
    "end": "1391360"
  },
  {
    "text": "monad um so you got a bind and return um",
    "start": "1391360",
    "end": "1394960"
  },
  {
    "text": "you've got this type S don't worry about",
    "start": "1394960",
    "end": "1397159"
  },
  {
    "text": "that too much it's basically it's a",
    "start": "1397159",
    "end": "1399159"
  },
  {
    "text": "signature that brings together the basic",
    "start": "1399159",
    "end": "1401000"
  },
  {
    "text": "type and a bunch of convenience and",
    "start": "1401000",
    "end": "1402679"
  },
  {
    "text": "infix um",
    "start": "1402679",
    "end": "1404919"
  },
  {
    "text": "operators um and then you've got this",
    "start": "1404919",
    "end": "1407679"
  },
  {
    "text": "funter make where if you pass in",
    "start": "1407679",
    "end": "1410279"
  },
  {
    "text": "something that conforms to basic it'll",
    "start": "1410279",
    "end": "1412760"
  },
  {
    "text": "provide you all those derived",
    "start": "1412760",
    "end": "1414320"
  },
  {
    "text": "implementations of functions from that",
    "start": "1414320",
    "end": "1416919"
  },
  {
    "text": "so as long as it as long as it um",
    "start": "1416919",
    "end": "1419400"
  },
  {
    "text": "conforms to this basic signature then",
    "start": "1419400",
    "end": "1421240"
  },
  {
    "text": "you can make a fun out of it uh sorry a",
    "start": "1421240",
    "end": "1423799"
  },
  {
    "text": "monad out of it and you can use the sort",
    "start": "1423799",
    "end": "1426159"
  },
  {
    "text": "of bind syntax and all those sorts of",
    "start": "1426159",
    "end": "1427919"
  },
  {
    "text": "things which is kind of",
    "start": "1427919",
    "end": "1429600"
  },
  {
    "text": "cool so",
    "start": "1429600",
    "end": "1432799"
  },
  {
    "text": "um I mentioned earlier that modules",
    "start": "1432799",
    "end": "1435679"
  },
  {
    "text": "aren't for ad hoc polymorphism which is",
    "start": "1435679",
    "end": "1438480"
  },
  {
    "text": "is true um there's a proposal that's",
    "start": "1438480",
    "end": "1441480"
  },
  {
    "text": "coming in oaml um called modular",
    "start": "1441480",
    "end": "1444720"
  },
  {
    "text": "implicits which is explicitly for",
    "start": "1444720",
    "end": "1447400"
  },
  {
    "text": "improving the support for agop",
    "start": "1447400",
    "end": "1449760"
  },
  {
    "text": "polymorphism in O camel um and it's not",
    "start": "1449760",
    "end": "1453120"
  },
  {
    "text": "quite fully baked and it's not um merged",
    "start": "1453120",
    "end": "1455799"
  },
  {
    "text": "into the main oaml compiler yet but you",
    "start": "1455799",
    "end": "1459039"
  },
  {
    "text": "can you can try out a branch of it and",
    "start": "1459039",
    "end": "1461279"
  },
  {
    "text": "this is what it looks like um it's",
    "start": "1461279",
    "end": "1463200"
  },
  {
    "text": "taking inspiration from scara's",
    "start": "1463200",
    "end": "1465279"
  },
  {
    "text": "implicits um but it's quite um it's a a",
    "start": "1465279",
    "end": "1468520"
  },
  {
    "text": "little bit safer perhaps than scolar",
    "start": "1468520",
    "end": "1470440"
  },
  {
    "text": "implicits so again we'd have this",
    "start": "1470440",
    "end": "1472440"
  },
  {
    "text": "signature show which is kind of which",
    "start": "1472440",
    "end": "1474440"
  },
  {
    "text": "you can think of as our type class um",
    "start": "1474440",
    "end": "1476720"
  },
  {
    "text": "we're defining a function that goes",
    "start": "1476720",
    "end": "1478799"
  },
  {
    "text": "across show um you'll note here that it",
    "start": "1478799",
    "end": "1481279"
  },
  {
    "text": "doesn't have to be a funter necessarily",
    "start": "1481279",
    "end": "1483600"
  },
  {
    "text": "although you are it sort of looks like a",
    "start": "1483600",
    "end": "1485640"
  },
  {
    "text": "funter because you've got this implicit",
    "start": "1485640",
    "end": "1487279"
  },
  {
    "text": "s which you're binding to show but it's",
    "start": "1487279",
    "end": "1490120"
  },
  {
    "text": "not it's not necessarily A funter and",
    "start": "1490120",
    "end": "1493200"
  },
  {
    "text": "then you've got this implicit which you",
    "start": "1493200",
    "end": "1494760"
  },
  {
    "text": "can think of as an instance of a type",
    "start": "1494760",
    "end": "1496720"
  },
  {
    "text": "class here and so we're providing an",
    "start": "1496720",
    "end": "1499120"
  },
  {
    "text": "implementation of showing an INT here",
    "start": "1499120",
    "end": "1501720"
  },
  {
    "text": "and we're just printing it out um and",
    "start": "1501720",
    "end": "1504880"
  },
  {
    "text": "then when we want to use it we don't",
    "start": "1504880",
    "end": "1506240"
  },
  {
    "text": "have to instantiate we don't have to",
    "start": "1506240",
    "end": "1508399"
  },
  {
    "text": "pass this this implementation into a",
    "start": "1508399",
    "end": "1511520"
  },
  {
    "text": "funter and call it to go to module out",
    "start": "1511520",
    "end": "1514440"
  },
  {
    "text": "then call it on the module we can just",
    "start": "1514440",
    "end": "1515960"
  },
  {
    "text": "call it straight away um the nice thing",
    "start": "1515960",
    "end": "1518919"
  },
  {
    "text": "with this is if you've got conflicting",
    "start": "1518919",
    "end": "1521399"
  },
  {
    "text": "um instances here like of these",
    "start": "1521399",
    "end": "1523399"
  },
  {
    "text": "implicits you'll get a compile time",
    "start": "1523399",
    "end": "1525360"
  },
  {
    "text": "error so it won't try and so there's no",
    "start": "1525360",
    "end": "1528840"
  },
  {
    "text": "way that it works out this one takes",
    "start": "1528840",
    "end": "1530360"
  },
  {
    "text": "precedence over this one it would just",
    "start": "1530360",
    "end": "1531720"
  },
  {
    "text": "give you an error and it won't compile",
    "start": "1531720",
    "end": "1534520"
  },
  {
    "text": "um but it still keeps in in that",
    "start": "1534520",
    "end": "1537919"
  },
  {
    "text": "um I suppose that that o hamel's",
    "start": "1537919",
    "end": "1541799"
  },
  {
    "text": "philosophy of being more explicit about",
    "start": "1541799",
    "end": "1544640"
  },
  {
    "text": "how you construct your um name space so",
    "start": "1544640",
    "end": "1548520"
  },
  {
    "text": "you you need to explicitly construct the",
    "start": "1548520",
    "end": "1550360"
  },
  {
    "text": "name space it's not implicit for you so",
    "start": "1550360",
    "end": "1553440"
  },
  {
    "text": "this is all good it's like camel's",
    "start": "1553440",
    "end": "1555159"
  },
  {
    "text": "fantastic we can do all these things um",
    "start": "1555159",
    "end": "1558760"
  },
  {
    "text": "but we might want to do that in high",
    "start": "1558760",
    "end": "1560240"
  },
  {
    "text": "scho so one way that we can do that in",
    "start": "1560240",
    "end": "1562200"
  },
  {
    "text": "high school is we can use this technique",
    "start": "1562200",
    "end": "1565000"
  },
  {
    "text": "using records as modules so basically",
    "start": "1565000",
    "end": "1568480"
  },
  {
    "text": "this is sort of a cut down version from",
    "start": "1568480",
    "end": "1571000"
  },
  {
    "text": "some ambata code so basically we've got",
    "start": "1571000",
    "end": "1573440"
  },
  {
    "text": "this record and it's got two two slots",
    "start": "1573440",
    "end": "1576039"
  },
  {
    "text": "in there and they they correspond to two",
    "start": "1576039",
    "end": "1578480"
  },
  {
    "text": "functions so we've got some sort of",
    "start": "1578480",
    "end": "1580080"
  },
  {
    "text": "record record something in a in a",
    "start": "1580080",
    "end": "1581919"
  },
  {
    "text": "database or some data store and look up",
    "start": "1581919",
    "end": "1584840"
  },
  {
    "text": "something um don't worry too much about",
    "start": "1584840",
    "end": "1587279"
  },
  {
    "text": "the type signatures cuz they probably",
    "start": "1587279",
    "end": "1588720"
  },
  {
    "text": "don't make a lot of sense but you've",
    "start": "1588720",
    "end": "1590640"
  },
  {
    "text": "basically got two slots where you can",
    "start": "1590640",
    "end": "1592360"
  },
  {
    "text": "put two different functions in and then",
    "start": "1592360",
    "end": "1594360"
  },
  {
    "text": "somewhere else in our in our code we've",
    "start": "1594360",
    "end": "1596120"
  },
  {
    "text": "got somewhere where we want to talk to",
    "start": "1596120",
    "end": "1597520"
  },
  {
    "text": "S3 for this so we create a um an",
    "start": "1597520",
    "end": "1601279"
  },
  {
    "text": "instance of index and we put in the",
    "start": "1601279",
    "end": "1603360"
  },
  {
    "text": "functions that we know that work for",
    "start": "1603360",
    "end": "1605399"
  },
  {
    "text": "S3 and then when we um yeah and this is",
    "start": "1605399",
    "end": "1608600"
  },
  {
    "text": "sort of part of a record instance a",
    "start": "1608600",
    "end": "1611000"
  },
  {
    "text": "record function that we've defin so this",
    "start": "1611000",
    "end": "1614279"
  },
  {
    "text": "is nice you can kind of do a reasonable",
    "start": "1614279",
    "end": "1616200"
  },
  {
    "text": "number of things that you can do with",
    "start": "1616200",
    "end": "1617799"
  },
  {
    "text": "with Mod modules in high school um you",
    "start": "1617799",
    "end": "1619960"
  },
  {
    "text": "need to be careful that you don't export",
    "start": "1619960",
    "end": "1622320"
  },
  {
    "text": "how to create these index um data types",
    "start": "1622320",
    "end": "1625880"
  },
  {
    "text": "to um widely you want to make sure that",
    "start": "1625880",
    "end": "1628799"
  },
  {
    "text": "your record and your Lookout match what",
    "start": "1628799",
    "end": "1631760"
  },
  {
    "text": "um what will work for that particular",
    "start": "1631760",
    "end": "1633360"
  },
  {
    "text": "data store um but it's it's it's quite",
    "start": "1633360",
    "end": "1637039"
  },
  {
    "text": "good and we've used it in quite a few",
    "start": "1637039",
    "end": "1638440"
  },
  {
    "text": "places um the downsides of it are is you",
    "start": "1638440",
    "end": "1641480"
  },
  {
    "text": "do have the record syntax so you've got",
    "start": "1641480",
    "end": "1643440"
  },
  {
    "text": "to make sure that your keys are are",
    "start": "1643440",
    "end": "1645200"
  },
  {
    "text": "unique um it's a little bit clunky when",
    "start": "1645200",
    "end": "1647679"
  },
  {
    "text": "you've got to do that um there's a",
    "start": "1647679",
    "end": "1649600"
  },
  {
    "text": "slight probably a slight performance hit",
    "start": "1649600",
    "end": "1651880"
  },
  {
    "text": "that you will take on this because",
    "start": "1651880",
    "end": "1653120"
  },
  {
    "text": "you're doing double dispatch everywhere",
    "start": "1653120",
    "end": "1655000"
  },
  {
    "text": "the compiler doesn't necessarily know",
    "start": "1655000",
    "end": "1657039"
  },
  {
    "text": "that this is how you're using this this",
    "start": "1657039",
    "end": "1659240"
  },
  {
    "text": "is it's not a it's not a type class or",
    "start": "1659240",
    "end": "1661559"
  },
  {
    "text": "something it can't know a compile time",
    "start": "1661559",
    "end": "1663080"
  },
  {
    "text": "necessarily that you want to go through",
    "start": "1663080",
    "end": "1664519"
  },
  {
    "text": "there so you have a bit of double",
    "start": "1664519",
    "end": "1666159"
  },
  {
    "text": "dispatch and as I said you want to be",
    "start": "1666159",
    "end": "1668399"
  },
  {
    "text": "careful on how you can construct these",
    "start": "1668399",
    "end": "1670399"
  },
  {
    "text": "index things but it's a useful technique",
    "start": "1670399",
    "end": "1675240"
  },
  {
    "text": "um so in summary I think that okel",
    "start": "1675240",
    "end": "1678640"
  },
  {
    "text": "modules are worth knowing about even if",
    "start": "1678640",
    "end": "1680919"
  },
  {
    "text": "you don't really use them I know I've",
    "start": "1680919",
    "end": "1682960"
  },
  {
    "text": "heard that before about a lot of things",
    "start": "1682960",
    "end": "1684760"
  },
  {
    "text": "but it's it's interesting to have a",
    "start": "1684760",
    "end": "1686600"
  },
  {
    "text": "different um different point in the",
    "start": "1686600",
    "end": "1688480"
  },
  {
    "text": "design space to compare to type classes",
    "start": "1688480",
    "end": "1691120"
  },
  {
    "text": "and especially when people are starting",
    "start": "1691120",
    "end": "1692559"
  },
  {
    "text": "to talk about wanting a module system in",
    "start": "1692559",
    "end": "1695080"
  },
  {
    "text": "hasle and what that means um a lot of",
    "start": "1695080",
    "end": "1698159"
  },
  {
    "text": "people refer to the ml module system and",
    "start": "1698159",
    "end": "1700919"
  },
  {
    "text": "it's good to know what they're actually",
    "start": "1700919",
    "end": "1702399"
  },
  {
    "text": "referring to so summary structures",
    "start": "1702399",
    "end": "1705519"
  },
  {
    "text": "combine types and functions with",
    "start": "1705519",
    "end": "1707320"
  },
  {
    "text": "implementation",
    "start": "1707320",
    "end": "1709039"
  },
  {
    "text": "signatures combine types and functions",
    "start": "1709039",
    "end": "1711120"
  },
  {
    "text": "without",
    "start": "1711120",
    "end": "1712159"
  },
  {
    "text": "implementations and funs in oaml are",
    "start": "1712159",
    "end": "1715320"
  },
  {
    "text": "just functions from structs to structs",
    "start": "1715320",
    "end": "1717720"
  },
  {
    "text": "they're parameterized",
    "start": "1717720",
    "end": "1719720"
  },
  {
    "text": "structs um and there's a really simple",
    "start": "1719720",
    "end": "1721960"
  },
  {
    "text": "translation you can do from type classes",
    "start": "1721960",
    "end": "1723720"
  },
  {
    "text": "to module so you can read a paper in",
    "start": "1723720",
    "end": "1726159"
  },
  {
    "text": "Hull and see all the hll code and if you",
    "start": "1726159",
    "end": "1728960"
  },
  {
    "text": "want to you can go through and translate",
    "start": "1728960",
    "end": "1730640"
  },
  {
    "text": "that directly to O camel which I tend to",
    "start": "1730640",
    "end": "1732960"
  },
  {
    "text": "do quite a lot um so that's that's about",
    "start": "1732960",
    "end": "1736840"
  },
  {
    "text": "all I've got I think I was pretty fast",
    "start": "1736840",
    "end": "1739159"
  },
  {
    "text": "with that yeah that's me I'm at ambata",
    "start": "1739159",
    "end": "1741919"
  },
  {
    "text": "yet another ambata person talking at",
    "start": "1741919",
    "end": "1743880"
  },
  {
    "text": "everyone um and these are a few links",
    "start": "1743880",
    "end": "1746200"
  },
  {
    "text": "for sort of interesting papers on um the",
    "start": "1746200",
    "end": "1749240"
  },
  {
    "text": "module system how you can use the module",
    "start": "1749240",
    "end": "1751679"
  },
  {
    "text": "system in ml and how they're using it",
    "start": "1751679",
    "end": "1753679"
  },
  {
    "text": "say in Mirage Os or the the graph",
    "start": "1753679",
    "end": "1756000"
  },
  {
    "text": "library or there's this proposal here",
    "start": "1756000",
    "end": "1758840"
  },
  {
    "text": "which is at icfp this year which is",
    "start": "1758840",
    "end": "1761240"
  },
  {
    "text": "about you sort of unifying the type",
    "start": "1761240",
    "end": "1763360"
  },
  {
    "text": "level and the module level in ml with",
    "start": "1763360",
    "end": "1765760"
  },
  {
    "text": "another version of ml um and some links",
    "start": "1765760",
    "end": "1768120"
  },
  {
    "text": "for some of the code that I was talking",
    "start": "1768120",
    "end": "1769480"
  },
  {
    "text": "about thanks",
    "start": "1769480",
    "end": "1771170"
  },
  {
    "text": "[Applause]",
    "start": "1771170",
    "end": "1773959"
  }
]