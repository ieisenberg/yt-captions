[
  {
    "text": "um so those of you who don't know me I'm Mass TOS I'm a son of this city it's",
    "start": "8920",
    "end": "15839"
  },
  {
    "text": "good to be back um and I'm going to talk about uh I I work for Microsoft okay um",
    "start": "15839",
    "end": "22480"
  },
  {
    "text": "so um on the team that is making C and Visual Basic and F and we uh we have",
    "start": "22480",
    "end": "30119"
  },
  {
    "text": "some new stuff in the works that I'm going to I'm going to share with you I do have a few slides because I want to",
    "start": "30119",
    "end": "35239"
  },
  {
    "text": "make sure there something for the managers in the room um but uh we're going to spend most of the time in Visual Studio showing some of the stuff",
    "start": "35239",
    "end": "41800"
  },
  {
    "text": "and um and talking about the the principles in it uh so I hope you don't mind that um I'll try to make room for",
    "start": "41800",
    "end": "49879"
  },
  {
    "text": "uh questions a couple of uh places along the way um you know raise your hand if I",
    "start": "49879",
    "end": "56199"
  },
  {
    "text": "don't see it uh shout and then we'll see if we can get the question on the recording as well either by a microphone",
    "start": "56199",
    "end": "63120"
  },
  {
    "text": "being rushed to your place or by me repeating the question but I'm happy to take questions I'm going to tell you",
    "start": "63120",
    "end": "68200"
  },
  {
    "text": "when to stop um if we don't if we're running out of time so um the main sort",
    "start": "68200",
    "end": "74439"
  },
  {
    "text": "of theme for us on the C team has been for the last like five years or so really sort of a deep deep revamp of the",
    "start": "74439",
    "end": "80960"
  },
  {
    "text": "C compiler we've given it a complete overhaul we've actually Rewritten it from scratch this time in a proper",
    "start": "80960",
    "end": "86720"
  },
  {
    "text": "programming language um and uh you can guess which one that is",
    "start": "86720",
    "end": "92600"
  },
  {
    "text": "um and um we've done that for several reasons some of them just uh us becoming more productive and trusting our",
    "start": "92600",
    "end": "98799"
  },
  {
    "text": "codebase better and so on but a lot of it has been about opening up the C",
    "start": "98799",
    "end": "104119"
  },
  {
    "text": "compiler so what is a compiler really well sort of in a in a traditional mindset it's a black box that you shove",
    "start": "104119",
    "end": "109880"
  },
  {
    "text": "source code into and some executable code comes out but that's not really much of the truth these days um a",
    "start": "109880",
    "end": "116680"
  },
  {
    "text": "compiler is really sort of the it's the Deep logic that St what the source code",
    "start": "116680",
    "end": "122159"
  },
  {
    "text": "means and you want to use that knowledge that understanding for many purposes not just for producing the the source code",
    "start": "122159",
    "end": "128560"
  },
  {
    "text": "in particular um You probably all spent your whole day inside of tools inside of developer tools and it's important to",
    "start": "128560",
    "end": "135480"
  },
  {
    "text": "use that that tool understands what the code is about and gives you intelligent feedback uh you know uh from from autoc",
    "start": "135480",
    "end": "143959"
  },
  {
    "text": "completion to um to on the Fly errors to um refactor strings and so on you want",
    "start": "143959",
    "end": "150640"
  },
  {
    "text": "it to understand your code and we want to take that understanding and we want to build our all our own tooling on top",
    "start": "150640",
    "end": "157280"
  },
  {
    "text": "of that but we also want to make it public we want everybody else to have a chance to access that understanding of C",
    "start": "157280",
    "end": "163319"
  },
  {
    "text": "source code so we have this API very rich object model of the syntax and",
    "start": "163319",
    "end": "169200"
  },
  {
    "text": "semantics of C that um is just automatically available when you're in Visual Studio you can plug in and use",
    "start": "169200",
    "end": "175760"
  },
  {
    "text": "that and ask all kinds of questions about the code and we take it upon ourselves to make it easy to plug in at",
    "start": "175760",
    "end": "181000"
  },
  {
    "text": "the tool level and in particular to make this API robust and efficient and and",
    "start": "181000",
    "end": "188159"
  },
  {
    "text": "intuitive um and um and give you open up these opportunities that previously we",
    "start": "188159",
    "end": "194440"
  },
  {
    "text": "only we have had and I am fully aware that there are other other tools out there that have been doing this for a",
    "start": "194440",
    "end": "199720"
  },
  {
    "text": "while um uh so we've learned a lot from that uh we also made we took the sh",
    "start": "199720",
    "end": "205599"
  },
  {
    "text": "compiler and we put it open source so um if you want to add a new feature to C um",
    "start": "205599",
    "end": "211519"
  },
  {
    "text": "you know go ahead we even take pool requests though probably not of new language features just uh right now but",
    "start": "211519",
    "end": "217879"
  },
  {
    "text": "um um go play with it see how we implement it um and then we also we also",
    "start": "217879",
    "end": "224319"
  },
  {
    "text": "added a few new language features um sort of as a sideshow this whole opening",
    "start": "224319",
    "end": "230319"
  },
  {
    "text": "up with the compiler is the main thing we're working on for the next Visual Studio but we didn't want to sort of",
    "start": "230319",
    "end": "235560"
  },
  {
    "text": "take a theme of let's see how many little features we can put in in our spare time that um help sort of small",
    "start": "235560",
    "end": "242920"
  },
  {
    "text": "features that help reduce boilerplate and help just make code nicer to look at um so we'll have a look at some of that",
    "start": "242920",
    "end": "249879"
  },
  {
    "text": "as well so if you think about who are we for this is sort of the this is for the managers how many managers are in here",
    "start": "249879",
    "end": "257639"
  },
  {
    "text": "how many okay how many developers okay good I think we I think",
    "start": "257639",
    "end": "263120"
  },
  {
    "text": "we did the right advertising um um so um for developers really we just want a",
    "start": "263120",
    "end": "269240"
  },
  {
    "text": "better use a product right we want um a richer IDE we want to keep evolving the language and so on that's been our our",
    "start": "269240",
    "end": "275520"
  },
  {
    "text": "main purpose here um to to kind of take the ID experience in particular to The Next",
    "start": "275520",
    "end": "280759"
  },
  {
    "text": "Step um and then we envision that a lot of people like really a lot of people we",
    "start": "280759",
    "end": "286400"
  },
  {
    "text": "really try to make it easy will go and enrich this experience as well um based",
    "start": "286400",
    "end": "292840"
  },
  {
    "text": "on on this new understanding of the tools so maybe you'll make your own Diagnostics and in a minute actually we'll build a diagnostic together or",
    "start": "292840",
    "end": "298639"
  },
  {
    "text": "I'll do it and you'll watch um where uh just to show how easy it is",
    "start": "298639",
    "end": "303720"
  },
  {
    "text": "to plug into the tool in a very deep way and and have it uh react in in the same",
    "start": "303720",
    "end": "309039"
  },
  {
    "text": "way to um with the kind of things you're interested in showing about the code uh in the same way as as the built-in",
    "start": "309039",
    "end": "315039"
  },
  {
    "text": "compiler and rules do um of course we as a team have a better architecture to evolve on we think this is sort of an",
    "start": "315039",
    "end": "321240"
  },
  {
    "text": "investment for the next many years for us that that we can stay vibrant because we now have a productive well",
    "start": "321240",
    "end": "327360"
  },
  {
    "text": "architected efficient source code so um we also as I said we're also open",
    "start": "327360",
    "end": "333360"
  },
  {
    "text": "source and I think that kind of just expands the target audience on all these levels here um we certainly um already",
    "start": "333360",
    "end": "340840"
  },
  {
    "text": "have have good uh Good Vibes between us and um whatever other vendors of c are",
    "start": "340840",
    "end": "347240"
  },
  {
    "text": "out there um one is uh one is present here in Aus samarin and we talk about",
    "start": "347240",
    "end": "353199"
  },
  {
    "text": "how can we how can we make use of the fact that the uh the C compiler is now",
    "start": "353199",
    "end": "359000"
  },
  {
    "text": "open source and and can be can be adjusted to fit on different platforms for instance and serve different needs",
    "start": "359000",
    "end": "365560"
  },
  {
    "text": "um and we don't have to be the ones doing all of it um so that's the that's",
    "start": "365560",
    "end": "371639"
  },
  {
    "text": "the quick Spiel um what I'm going to do now is then go into Visual Studio we'll look at",
    "start": "371639",
    "end": "377360"
  },
  {
    "text": "some of these ID experiences just a little bit we'll build a custom analyzer and uh then we'll look at some new",
    "start": "377360",
    "end": "382639"
  },
  {
    "text": "language features all right you're supposed to say Yes teacher",
    "start": "382639",
    "end": "388400"
  },
  {
    "text": "yeah okay thank you um oh before I I'm going to forget",
    "start": "388400",
    "end": "395680"
  },
  {
    "text": "to come back to this so um if you want to play with this there's a there's a technical preview out there we actually",
    "start": "395680",
    "end": "401280"
  },
  {
    "text": "put out we've put out a new one every six weeks or so I think it's probably a new one coming out one of these days just search go to your favorite search",
    "start": "401280",
    "end": "407759"
  },
  {
    "text": "engine and search for um Visual Studio CTP and you can download a version of Visual Studio that's kind of a preview",
    "start": "407759",
    "end": "414440"
  },
  {
    "text": "with all this stuff and that's a public preview I'm I'm going to use today um also if you're interested in the open",
    "start": "414440",
    "end": "420319"
  },
  {
    "text": "source we on clex the project was called rosling or it's called rosling so uh if",
    "start": "420319",
    "end": "425879"
  },
  {
    "text": "you go look for that on codeplex um and you can look at these beautiful pictures in bing when you go search for it uh",
    "start": "425879",
    "end": "431960"
  },
  {
    "text": "it's really the most beautiful uh search page you can go to okay and so um questions will take later but",
    "start": "431960",
    "end": "440280"
  },
  {
    "text": "I will go now into visual studio and talk a little about things in the proper context of of",
    "start": "440280",
    "end": "447240"
  },
  {
    "text": "real code um so here's some here's some uh just play code that we'll be uh",
    "start": "447240",
    "end": "454000"
  },
  {
    "text": "looking at a little bit uh today um so one of so one of the things that I want to emphasize is that we we've sort of",
    "start": "454000",
    "end": "459720"
  },
  {
    "text": "Taken people people like Visual Studio okay and but it has a lot it has lots of features lots of belts and whistles but",
    "start": "459720",
    "end": "466240"
  },
  {
    "text": "what people sometimes tell tell us is that it doesn't one thing that it lacks a little is it doesn't feel like it",
    "start": "466240",
    "end": "472479"
  },
  {
    "text": "understands my code quite as well some of the other other tools it's like it doesn't quite get what I'm what I'm trying to do",
    "start": "472479",
    "end": "480120"
  },
  {
    "text": "and that's really what we want to try to get at so I just want to show a few things that are built on top of our new",
    "start": "480120",
    "end": "485440"
  },
  {
    "text": "compiler API we all our ID features are built on the public API I want to say we have no secret communication with the",
    "start": "485440",
    "end": "492440"
  },
  {
    "text": "compiler you can do everything we can do um so um an obvious thing is you know",
    "start": "492440",
    "end": "499400"
  },
  {
    "text": "realizing when something isn't used we can gray it out um if we",
    "start": "499400",
    "end": "504919"
  },
  {
    "text": "take um let's use something else um",
    "start": "504919",
    "end": "510479"
  },
  {
    "text": "system. con actually I'm going to sneak peek one of one of the new language features is you can import a a static",
    "start": "510479",
    "end": "516120"
  },
  {
    "text": "type and then its members be uh come into scope directly so let me do that um",
    "start": "516120",
    "end": "521320"
  },
  {
    "text": "you can see I'm not I'm not using any of its members but now you also see that um the static type that I imported becomes",
    "start": "521320",
    "end": "527959"
  },
  {
    "text": "great out here and I can highlight it and and um and fix all the occurrences",
    "start": "527959",
    "end": "534519"
  },
  {
    "text": "of of simplify the type um and we have I'm not going to go too deep in to but",
    "start": "534519",
    "end": "540600"
  },
  {
    "text": "we have really good Logic for realizing when can you simplify something without it uh changing its",
    "start": "540600",
    "end": "546279"
  },
  {
    "text": "meaning um let's also go and um um let's go and look in here and look",
    "start": "546279",
    "end": "552880"
  },
  {
    "text": "at one of these things that we I think we're the only ones who don't have yet it's an inline rename experience where",
    "start": "552880",
    "end": "559880"
  },
  {
    "text": "um you drop into a variable and you hello oh there",
    "start": "559880",
    "end": "565240"
  },
  {
    "text": "we are it's a little it's a little delayed here and you just uh you just uh type some stuff in here and and um you",
    "start": "565240",
    "end": "573880"
  },
  {
    "text": "know it live updates everywhere so it kind of that's kind of that's kind of basic but the the um the",
    "start": "573880",
    "end": "581160"
  },
  {
    "text": "interesting thing is that it really knows uh how to fix up the other places",
    "start": "581160",
    "end": "586200"
  },
  {
    "text": "in such a way that they don't change their meaning even if the name is a little odd or has other meaning in that",
    "start": "586200",
    "end": "591399"
  },
  {
    "text": "in that place if you use a keyword it figures out how to escape the keyword in other places if you use a let's say you",
    "start": "591399",
    "end": "597560"
  },
  {
    "text": "use a name that um uh as you can see a little further down there you use a name that happens",
    "start": "597560",
    "end": "604320"
  },
  {
    "text": "to be in scope at that point it knows how to put the this in front and so on so it's just that language understanding",
    "start": "604320",
    "end": "609640"
  },
  {
    "text": "that that we're finally getting to if I if I use something that uh is already a member it'll tell you this this",
    "start": "609640",
    "end": "616600"
  },
  {
    "text": "refactoring will introduce conflicts and let you know about it so um It's that",
    "start": "616600",
    "end": "622079"
  },
  {
    "text": "kind of experience and we and then we want you to be able to build a similar kind of experience and that's sort of",
    "start": "622079",
    "end": "627399"
  },
  {
    "text": "that's sort of what I'm going to show now so if we leave this code behind and go um go here um so um I'm going to",
    "start": "627399",
    "end": "638600"
  },
  {
    "text": "build a diagnostic that's going to look at some Source look at source code and visual studio and tell you that",
    "start": "638600",
    "end": "645279"
  },
  {
    "text": "something is wrong with it or could be fixed with it and then I going to build a code fix to fix it I'm just going to",
    "start": "645279",
    "end": "650360"
  },
  {
    "text": "give you the sort of an a sense of how easy that is using a good object model",
    "start": "650360",
    "end": "655920"
  },
  {
    "text": "of of the code and we can talk about some aspects of how what what that looks like um as we go along and so what I",
    "start": "655920",
    "end": "663079"
  },
  {
    "text": "just did here is is go into file new file new project and select the kind of project",
    "start": "663079",
    "end": "670839"
  },
  {
    "text": "that's called a diagnostic with code fix and if you create a project like that it'll come there'll be a fully fledged",
    "start": "670839",
    "end": "677120"
  },
  {
    "text": "project that has a it's a silly diagnostic but a fully working diagnostic already in there um I've",
    "start": "677120",
    "end": "682839"
  },
  {
    "text": "deleted that code from the one I have here um and the project you can build that in two ways you can build uh a a",
    "start": "682839",
    "end": "690160"
  },
  {
    "text": "visual studio extension a V6 or you can build a new get file and either way you",
    "start": "690160",
    "end": "695320"
  },
  {
    "text": "so you can either install the extension or you can have that new get file and um and you can reference that and then",
    "start": "695320",
    "end": "700720"
  },
  {
    "text": "those Diagnostics will apply to your project only so you can build these guys and install them share them out and and",
    "start": "700720",
    "end": "706920"
  },
  {
    "text": "do all that kind of stuff so um let's try to do one of those um the uh it this is the the analyzer",
    "start": "706920",
    "end": "715639"
  },
  {
    "text": "part the diagnostic part I am most of this was generated for me I'm just implementing an interface I'm saying I'm",
    "start": "715639",
    "end": "722240"
  },
  {
    "text": "I want the kind of diagnostic that looks at certain kinds of syntax node so I'm a syntax node analyzer I just have to",
    "start": "722240",
    "end": "728160"
  },
  {
    "text": "declare which kinds of syntax nodes am I interested in and then the tool will call us whenever it needs especially",
    "start": "728160",
    "end": "735279"
  },
  {
    "text": "essentially on every keystroke where your code is in is uh visible on the screen it will um it will call us um",
    "start": "735279",
    "end": "744120"
  },
  {
    "text": "with the syntax note that that might have changed here so the so if statements and else Clauses are the on",
    "start": "744120",
    "end": "749240"
  },
  {
    "text": "I'm interested in if I hit F5 in here if I go to debug mode inside of this kind of project um it'll start another",
    "start": "749240",
    "end": "756560"
  },
  {
    "text": "version it'll run another version of visual studio with my code installed and",
    "start": "756560",
    "end": "762040"
  },
  {
    "text": "so I can see it working so the debugging experience is running your um running your Diagnostic in the tool um so if I",
    "start": "762040",
    "end": "770040"
  },
  {
    "text": "do that here um uh you can see that I open up a",
    "start": "770040",
    "end": "775560"
  },
  {
    "text": "Friday I don't have a diagnostic yet so it's not going to do anything but I can use this to tell you what kind of diagnostic I'm going to write so it's as",
    "start": "775560",
    "end": "781800"
  },
  {
    "text": "a matter of style it's it's bad form or some people consider it bad form to have a statement in an if that isn't",
    "start": "781800",
    "end": "787440"
  },
  {
    "text": "surrounded by curries that isn't a block and so we want to identify those places and offer to fix them and similar in",
    "start": "787440",
    "end": "793680"
  },
  {
    "text": "else Clauses except if it's an else if uh then we don't want the if to be EMB braces so so let's write the logic to to",
    "start": "793680",
    "end": "801199"
  },
  {
    "text": "deal with that so I I go back to my project here",
    "start": "801199",
    "end": "806680"
  },
  {
    "text": "um all I have to do really is I had I declare my interest in in if statements and um and else Clauses and then all I",
    "start": "806680",
    "end": "813920"
  },
  {
    "text": "have to do down here is to see am I in the in the situation that I want to I want to um give a a diagnostic and if so",
    "start": "813920",
    "end": "821399"
  },
  {
    "text": "create the diagnostic so um we want to just start by getting the you can see I get called with various things I get",
    "start": "821399",
    "end": "827800"
  },
  {
    "text": "called with a syntax node and then some semantic information I'm going to I'm not going to use that but you get all kinds of binding information and so on",
    "start": "827800",
    "end": "833839"
  },
  {
    "text": "so you can actually not just look at the shape of a syntax tree but um",
    "start": "833839",
    "end": "839199"
  },
  {
    "text": "but at at how does how do things bind what do they mean and and use that in your diagnostic so we're going to just",
    "start": "839199",
    "end": "844759"
  },
  {
    "text": "take that note that we got and see is it actually an if statement um so we take",
    "start": "844759",
    "end": "850519"
  },
  {
    "text": "it as an as an if statement syntax and if that is not null",
    "start": "850519",
    "end": "857000"
  },
  {
    "text": "um then we're sort of in the then we're in the right um vicinity here we're in the right neighborhood and so let's",
    "start": "857000",
    "end": "863880"
  },
  {
    "text": "let's think about what are the what is the logic for establishing that we want to highlight this as a problem well if",
    "start": "863880",
    "end": "870839"
  },
  {
    "text": "it so one of the things we have to think about is that um most of the time you're in the Tool uh your code isn't correct",
    "start": "870839",
    "end": "878959"
  },
  {
    "text": "right you're typing ahead it's only actually it's the exceptional Cas is when your code actually even parses or",
    "start": "878959",
    "end": "884279"
  },
  {
    "text": "let alone compiles so we of course we have to deal with a model that has error tolerance um and so we have really good",
    "start": "884279",
    "end": "890440"
  },
  {
    "text": "heris sixs for building up a tree when uh when the code isn't quite correct and",
    "start": "890440",
    "end": "895519"
  },
  {
    "text": "if we find us we just want to check I can't actually remember if you can never get yourself into a situation where the",
    "start": "895519",
    "end": "901240"
  },
  {
    "text": "if statement the nested statement is null but let's just assume you can so let's check that it isn't and then we're",
    "start": "901240",
    "end": "908199"
  },
  {
    "text": "interested in the places where it isn't already a block so if not the if",
    "start": "908199",
    "end": "913240"
  },
  {
    "text": "statement is the if statement statement is a block we have an is kind operator",
    "start": "913240",
    "end": "920240"
  },
  {
    "text": "here syntax kind. block so if this isn't a block uh already um then we want to",
    "start": "920240",
    "end": "927120"
  },
  {
    "text": "tell people that it should be and just do that by creating um a diagnostic um",
    "start": "927120",
    "end": "933959"
  },
  {
    "text": "and and saying exactly where where to put a little squiggle line underneath so let's get a location for the squiggle if",
    "start": "933959",
    "end": "939639"
  },
  {
    "text": "we squiggle just the let's say we squiggle just the if keyword in the if statement so we say the if if",
    "start": "939639",
    "end": "946279"
  },
  {
    "text": "statement. if keyword you can see it's an object model of the if statement I can just start my way in we can get the",
    "start": "946279",
    "end": "952240"
  },
  {
    "text": "location of that so that'll be a two character span somewhere in the source code and then we want to create a",
    "start": "952240",
    "end": "958440"
  },
  {
    "text": "diagnostic from that equals what did I do wrong",
    "start": "958440",
    "end": "963880"
  },
  {
    "text": "there oh I didn't do anything wrong it's just a little slow equals diagnostic do",
    "start": "963880",
    "end": "969440"
  },
  {
    "text": "create so it's all just like standard level coding here I already have a descriptor that I created further up",
    "start": "969440",
    "end": "976519"
  },
  {
    "text": "there we just got the location and we have a message up here we want to say what the aru argument is",
    "start": "976519",
    "end": "983160"
  },
  {
    "text": "that is if statement and if statement if statement must have braces um we created a diagnostic and",
    "start": "983160",
    "end": "990399"
  },
  {
    "text": "now we just have to um add that diagnostic by calling a delegate that was passed into us here so now I've done",
    "start": "990399",
    "end": "997560"
  },
  {
    "text": "everything I need to do this is all I need to do now to plug into the tool and to see that um let's let's run this in a",
    "start": "997560",
    "end": "1004839"
  },
  {
    "text": "debugger and you can kind of see what we",
    "start": "1004839",
    "end": "1008839"
  },
  {
    "text": "achieved so what we hope to see is that now our",
    "start": "1010040",
    "end": "1015279"
  },
  {
    "text": "if our ifs in there are squiggled with a little green squiggle um of course this takes a little time",
    "start": "1015279",
    "end": "1023040"
  },
  {
    "text": "here we go it's warming up now it now it will show little squiggles that",
    "start": "1023040",
    "end": "1030160"
  },
  {
    "text": "represent exactly what we asked for right so that wasn't bad right it's not bad at all and you can actually see so",
    "start": "1030160",
    "end": "1037558"
  },
  {
    "text": "if I hover here it'll even it'll even give me some options one of them",
    "start": "1037559",
    "end": "1043959"
  },
  {
    "text": "unfortunately all the options here are just suppressed the warning that we just created uh so what we want to do now is",
    "start": "1043959",
    "end": "1049160"
  },
  {
    "text": "to build a diagnostic or build a codee fix that can that can go into this menu",
    "start": "1049160",
    "end": "1054320"
  },
  {
    "text": "and offer the opportunity to um to fix the problem so um if we go out of here",
    "start": "1054320",
    "end": "1062280"
  },
  {
    "text": "again we will oh I should have also fixed it so you can see that it went away but I hope you'll trust me in that",
    "start": "1062280",
    "end": "1068880"
  },
  {
    "text": "first of all let's do this let's just paste in some code that does the same analysis for else claes",
    "start": "1068880",
    "end": "1075679"
  },
  {
    "text": "um and uh then let's go and build a code",
    "start": "1075679",
    "end": "1080720"
  },
  {
    "text": "fix provider and it's the same kind of idea we there's a method that gets called whenever this code there's some",
    "start": "1080720",
    "end": "1087000"
  },
  {
    "text": "mumbo jumbo to associate this fix with the diagnostic you saw before whenever diagnostic is this code fix gets called",
    "start": "1087000",
    "end": "1093520"
  },
  {
    "text": "and and we get a method invoked here with the document that's an object model of the",
    "start": "1093520",
    "end": "1100360"
  },
  {
    "text": "whole uh piece of code in there and um and the text span for where the diagnostic is so that little if there",
    "start": "1100360",
    "end": "1107120"
  },
  {
    "text": "and now we can go now we go Di through the document we get the syntax the root of the syntax tree we ask for the token",
    "start": "1107120",
    "end": "1113400"
  },
  {
    "text": "in there I already wrote some of the code here we ask for uh the if token in there we find its parent the if",
    "start": "1113400",
    "end": "1118720"
  },
  {
    "text": "statement we check that it is an if statement and now we have the if statement again so now it becomes",
    "start": "1118720",
    "end": "1124000"
  },
  {
    "text": "interesting how do I how do I actually do the change of code and here comes the the important principle here is that all",
    "start": "1124000",
    "end": "1131200"
  },
  {
    "text": "syntax trees and all our data structures um are immutable okay we have an immutable",
    "start": "1131200",
    "end": "1137840"
  },
  {
    "text": "object model so so every time you hit a key you get a",
    "start": "1137840",
    "end": "1143360"
  },
  {
    "text": "fresh new syntax tree that's almost like the old one but it's slightly different",
    "start": "1143360",
    "end": "1149159"
  },
  {
    "text": "right and if we do all the work behind the scenes to make that efficient by doing sharing and being lazy and all kind of stuff we we've that's what we",
    "start": "1149159",
    "end": "1155799"
  },
  {
    "text": "spent Five Years on getting this stuff efficient and um and so what I so that",
    "start": "1155799",
    "end": "1160919"
  },
  {
    "text": "means that if I have to create a new version of I actually have to create a new version of the all these notes I",
    "start": "1160919",
    "end": "1167159"
  },
  {
    "text": "can't just modify them with with a assignment right so I have to create a new if",
    "start": "1167159",
    "end": "1173640"
  },
  {
    "text": "statement if statement so why is it why is this interesting you'll hear there's there are more talks tomorrow about",
    "start": "1173720",
    "end": "1179320"
  },
  {
    "text": "immutability if you're interested in those patterns um but why is it interesting to do it like this well You'",
    "start": "1179320",
    "end": "1186480"
  },
  {
    "text": "think it's hopelessly inefficient but it's actually great because when you have immutable data structures you can",
    "start": "1186480",
    "end": "1191520"
  },
  {
    "text": "paralyze the heck out of things and we do that when we compile um but it also means that you can have multiple",
    "start": "1191520",
    "end": "1196799"
  },
  {
    "text": "versions of these trees alive at the same time time without there being conflicts and we're going to see that um",
    "start": "1196799",
    "end": "1202080"
  },
  {
    "text": "actually in effect so what you often do this is a common pattern with um with the mutable data structures you have",
    "start": "1202080",
    "end": "1208360"
  },
  {
    "text": "Withers um where you can uh you can call to get a version that is slightly",
    "start": "1208360",
    "end": "1213679"
  },
  {
    "text": "different where you where you replace one of the things in there so we're going to replace the statement with a block statement uh by going to S we have",
    "start": "1213679",
    "end": "1220320"
  },
  {
    "text": "a syntax Factory where we can get a block and inside of that block we are going to put the statement that we had",
    "start": "1220320",
    "end": "1227320"
  },
  {
    "text": "before if statement that statement all right now we have an a new if statement",
    "start": "1227320",
    "end": "1232960"
  },
  {
    "text": "what are we going to do with it well we have to put it into a new syntax route so we have to say new because and we",
    "start": "1232960",
    "end": "1238799"
  },
  {
    "text": "have to create a new syntax tree for the whole thing where we replace uh so same",
    "start": "1238799",
    "end": "1245039"
  },
  {
    "text": "principle again where we replace the old if statement with the new if statement so we're going to say root do",
    "start": "1245039",
    "end": "1252039"
  },
  {
    "text": "replace replace node we replace the if statement with a new if statement but",
    "start": "1252039",
    "end": "1257559"
  },
  {
    "text": "again once you get the of this style of programming it's really super easy and now we need to stick that new route into",
    "start": "1257559",
    "end": "1263559"
  },
  {
    "text": "a new document that's just like the old document except that it has a new syntax tree inside of it new document equals",
    "start": "1263559",
    "end": "1271760"
  },
  {
    "text": "document dot now we say with syntax roote and use a new root and now we've",
    "start": "1271760",
    "end": "1277559"
  },
  {
    "text": "created an alternative syntax tree for the whole buffer that's just a little",
    "start": "1277559",
    "end": "1282600"
  },
  {
    "text": "different and now all we have to do is install that as a code action so we create a code action um",
    "start": "1282600",
    "end": "1289360"
  },
  {
    "text": "uh sorry our code code action equals code action.",
    "start": "1289360",
    "end": "1295159"
  },
  {
    "text": "create um we have a um a string that says add braces This Is The Stuff",
    "start": "1295159",
    "end": "1301080"
  },
  {
    "text": "that'll go in the in the menu that we select our fixes from um and now we need",
    "start": "1301080",
    "end": "1306440"
  },
  {
    "text": "a new our new document here and now we've told the uh the code action everything",
    "start": "1306440",
    "end": "1312880"
  },
  {
    "text": "we need to know we just need to return it uh we return it in an array because there can be more than one code action",
    "start": "1312880",
    "end": "1318919"
  },
  {
    "text": "associated with a given D diagnostic so we just return an array of one here oh I",
    "start": "1318919",
    "end": "1324919"
  },
  {
    "text": "call it code action there we go okay um and let's go and run",
    "start": "1324919",
    "end": "1335039"
  },
  {
    "text": "that and so that's all you do and that that's you can imagine doing this yourself you can imagine building thing",
    "start": "1338080",
    "end": "1345240"
  },
  {
    "text": "building Diagnostics that maintain the the style that you want inside of your company and and handing them out to",
    "start": "1345240",
    "end": "1351200"
  },
  {
    "text": "everyone uh with code fixes you can imagine I think this is an important scenario you can imagine writing",
    "start": "1351200",
    "end": "1356520"
  },
  {
    "text": "libraries think about json.net or other libraries that come with code fixes and and Diagnostics that help you use those",
    "start": "1356520",
    "end": "1364400"
  },
  {
    "text": "uh those libraries directly it's kind of like uh doc comments on steroids right you you get not just documentation with",
    "start": "1364400",
    "end": "1371120"
  },
  {
    "text": "a library you get automated guidance to how to use it and I think that's going to be uh I think that's going to be an",
    "start": "1371120",
    "end": "1377440"
  },
  {
    "text": "important scenario for this so now um with a little help for my friends",
    "start": "1377440",
    "end": "1383840"
  },
  {
    "text": "I think that I have now an extra menu item here add braces",
    "start": "1383840",
    "end": "1390360"
  },
  {
    "text": "and you see it actually has a preview of the code over here it's not that pretty because we didn't add formatting I'm not",
    "start": "1390360",
    "end": "1395760"
  },
  {
    "text": "going to do that for it's very it's an extra line of code to add to format this correctly but you can see that in the",
    "start": "1395760",
    "end": "1401159"
  },
  {
    "text": "preview uh there are curlies around the um around the uh if statements statement",
    "start": "1401159",
    "end": "1406720"
  },
  {
    "text": "here you can also see that what why where does this preview come from where do you think it comes",
    "start": "1406720",
    "end": "1412760"
  },
  {
    "text": "from it's a it's a rendering of that alternative tree that we build so we",
    "start": "1412760",
    "end": "1418320"
  },
  {
    "text": "have so by having these two different syntax trees two versions of it you can",
    "start": "1418320",
    "end": "1423360"
  },
  {
    "text": "you can show one in a preview you can have a peak into the alternate universe that will come true if I select this",
    "start": "1423360",
    "end": "1428840"
  },
  {
    "text": "code action right you can see that it even even um it even shows squiggle let",
    "start": "1428840",
    "end": "1434120"
  },
  {
    "text": "me get here it even shows squiggles for the other things because it's running our analyzer recursive in there so a",
    "start": "1434120",
    "end": "1440159"
  },
  {
    "text": "good thing that I can't click here and get a light bulb right because otherwise you could get all the way into the rabbit hole um so that that's one of the",
    "start": "1440159",
    "end": "1447279"
  },
  {
    "text": "really strong aspects of having this immutable model of of um of code so um",
    "start": "1447279",
    "end": "1455000"
  },
  {
    "text": "that's all I'm going to say about Diagnostics and I want to pause quickly for uh questions here and see if you if",
    "start": "1455000",
    "end": "1460279"
  },
  {
    "text": "you have a few we'll spent about five minutes if you have questions in this or comments um and you do so um let's see",
    "start": "1460279",
    "end": "1468760"
  },
  {
    "text": "if we can I'm just wondering your friends at",
    "start": "1468760",
    "end": "1474960"
  },
  {
    "text": "jet brains which also understands Cod really well are you working with them",
    "start": "1474960",
    "end": "1481880"
  },
  {
    "text": "to do have any interaction with them um yeah so so jet brains so the question is",
    "start": "1481880",
    "end": "1487520"
  },
  {
    "text": "about jet brains and if we have any interaction with them of course this is sort of getting into jet brains territory and code Rush territory um and",
    "start": "1487520",
    "end": "1496120"
  },
  {
    "text": "um we've had different we they're Partners we interact we're good friends um however they make their living jet",
    "start": "1496120",
    "end": "1503120"
  },
  {
    "text": "brains make their living from having a very detailed model of code that that they understand and building tooling on",
    "start": "1503120",
    "end": "1509760"
  },
  {
    "text": "top of that that people want to pay for and now what we're essentially doing is making a model somewhat like that and",
    "start": "1509760",
    "end": "1515480"
  },
  {
    "text": "making it available to everyone so we're kind of like threatening them a little From Below in that sense now everybody",
    "start": "1515480",
    "end": "1521360"
  },
  {
    "text": "can do some of what they do but I think for jet brains they have some very Advanced things in that they they're",
    "start": "1521360",
    "end": "1526919"
  },
  {
    "text": "going to survive just fine because they're because they're going to be better than anyone at building those",
    "start": "1526919",
    "end": "1531960"
  },
  {
    "text": "those tooling things on top even if there's an a public model as far as I know they block that they will not",
    "start": "1531960",
    "end": "1537840"
  },
  {
    "text": "actually switch over to use our our model underneath they'll keep running their own analysis and doing their own",
    "start": "1537840",
    "end": "1543039"
  },
  {
    "text": "which can be a bit of a performance problem I think but we'll see maybe they can do some kind of hybrid thing or whatever to to speed it up um code Rush",
    "start": "1543039",
    "end": "1551039"
  },
  {
    "text": "um they actually announced that they are going to switch over to our model and and just build on top of that but it's",
    "start": "1551039",
    "end": "1556520"
  },
  {
    "text": "an interesting I mean it's kind of changing the gate instead of having a few providers we have a closed we have a closed box that nobody can use of of",
    "start": "1556520",
    "end": "1564000"
  },
  {
    "text": "valuable language knowledge if you will and then there are these uh proprietary tools that build their own analysis and",
    "start": "1564000",
    "end": "1570320"
  },
  {
    "text": "work on that and now we're democratizing that analysis and making it available to everyone and at least sort of at the low",
    "start": "1570320",
    "end": "1575480"
  },
  {
    "text": "end or mid low to mid end everybody can play very easily and that's going to change the game I think very",
    "start": "1575480",
    "end": "1582480"
  },
  {
    "text": "significantly okay was uh yeah Dean I was wondering if you could turn this",
    "start": "1582480",
    "end": "1587520"
  },
  {
    "text": "into a comp macro facility looks like you're almost there can you turn it into a compile time macro facility yeah you",
    "start": "1587520",
    "end": "1593720"
  },
  {
    "text": "probably can um uh you'd need a macro language on top and uh and then work",
    "start": "1593720",
    "end": "1599960"
  },
  {
    "text": "with these models that sort of falls into the category of meta programming uh you could imagine all kinds of different",
    "start": "1599960",
    "end": "1605640"
  },
  {
    "text": "meta programming various generative mechanisms that would produce code or transform code or add things to code um",
    "start": "1605640",
    "end": "1614039"
  },
  {
    "text": "and that's actually how that was the original motivation for even starting this project but along the way we decided okay now is not the time to",
    "start": "1614039",
    "end": "1620159"
  },
  {
    "text": "address meta programming so we scoped it out and decided to address tooling and and sort of the core uh value props for",
    "start": "1620159",
    "end": "1626760"
  },
  {
    "text": "the millions but I think that that's definitely a place to go in the future with this and we I I I I am confident",
    "start": "1626760",
    "end": "1635000"
  },
  {
    "text": "that there'll be lots of people out there that will tweak this whichever way they can and we will look at them and see what are the things they're trying",
    "start": "1635000",
    "end": "1640640"
  },
  {
    "text": "to do that they can't quite do yet or that they're doing in a very arly fashion and consider whether we should",
    "start": "1640640",
    "end": "1645919"
  },
  {
    "text": "support that more directly in a future version so I think that's a really interesting space we just this is a step",
    "start": "1645919",
    "end": "1651000"
  },
  {
    "text": "towards it we're not quite there yet probably some things can can be done already but not all and we we certainly",
    "start": "1651000",
    "end": "1656159"
  },
  {
    "text": "haven't designed for it yet okay I think any I don't see Hands there's light in",
    "start": "1656159",
    "end": "1662320"
  },
  {
    "text": "my face I don't see hands so I'll uh I'll go on to the next bit um so the the other thing that I told you I promised",
    "start": "1662320",
    "end": "1669480"
  },
  {
    "text": "you I would talk about a little is the the new set of language features in uh in C um it's kind of light and and and",
    "start": "1669480",
    "end": "1676120"
  },
  {
    "text": "we admit to that we um this isn't a major Focus we didn't want to have a big theme it's crazy enough as it is with",
    "start": "1676120",
    "end": "1682559"
  },
  {
    "text": "this uh with the the API level stuff um so we're essentially just looking for",
    "start": "1682559",
    "end": "1687799"
  },
  {
    "text": "opportunities to um to remove some boilerplate code and make things a little easier",
    "start": "1687799",
    "end": "1694000"
  },
  {
    "text": "um and um I'm going to show you some of those and I have to say that this is sort of work in progress I I know that",
    "start": "1694000",
    "end": "1701640"
  },
  {
    "text": "some of the things I'm um going to show you will probably not actually come all the way to product and I also know that",
    "start": "1701640",
    "end": "1708519"
  },
  {
    "text": "some things are on the way that aren't in this prototype yet so take it with lots of grains of salt um you already saw one language",
    "start": "1708519",
    "end": "1714919"
  },
  {
    "text": "feature the uh the using of static um members here we can do another one using system. maath you know that's going to",
    "start": "1714919",
    "end": "1722480"
  },
  {
    "text": "be a common one I want to be able to say square root instead of math square root especially if I'm doing a lot of math",
    "start": "1722480",
    "end": "1728000"
  },
  {
    "text": "see math do square roots down here it is now gray out isn't it wonderful to take",
    "start": "1728000",
    "end": "1733159"
  },
  {
    "text": "it and just dump it in the trash right there ah right",
    "start": "1733159",
    "end": "1738799"
  },
  {
    "text": "um and so certainly you know just the ability to get top level functions essentially that that's sort of been",
    "start": "1738799",
    "end": "1745480"
  },
  {
    "text": "missing for a long while other languages have this um this is a program that just",
    "start": "1745480",
    "end": "1750840"
  },
  {
    "text": "creates a series of points um turns them into Jason and and turns them back again",
    "start": "1750840",
    "end": "1756039"
  },
  {
    "text": "so it's a really uninteresting program and and the the more interesting part is just looking at what are the things we",
    "start": "1756039",
    "end": "1761320"
  },
  {
    "text": "can do inside of this um this class declaration here um so one thing we've",
    "start": "1761320",
    "end": "1766679"
  },
  {
    "text": "played with and I have to admit that this is probably the thing that may not make it for cost reasons down the road",
    "start": "1766679",
    "end": "1772640"
  },
  {
    "text": "is uh putting um putting uh uh Constructor parameters directly on the",
    "start": "1772640",
    "end": "1778919"
  },
  {
    "text": "class we call this primary Constructors and um allowing you to just",
    "start": "1778919",
    "end": "1784679"
  },
  {
    "text": "put parameters in scope and initialize um directly from them in the",
    "start": "1784679",
    "end": "1790600"
  },
  {
    "text": "class and get rid of the uh get rid of the Constructor um so that's kind of a nice",
    "start": "1790600",
    "end": "1796320"
  },
  {
    "text": "a nice kind of uh saving our space but we do want to go a little further one of the things that I think with C we um for",
    "start": "1796320",
    "end": "1804360"
  },
  {
    "text": "a long time we've sort of been you saw me do all this stuff with an immutable object model it was great writing that immutable object model is a bit of a",
    "start": "1804360",
    "end": "1810640"
  },
  {
    "text": "pain in C actually it's much easier when you're mutable um we have all kinds of things um object initializers and auto",
    "start": "1810640",
    "end": "1819720"
  },
  {
    "text": "properties and so on that help the immutable or help the mutable folks right and what we want to do also here",
    "start": "1819720",
    "end": "1825760"
  },
  {
    "text": "is try to level the playing field a bit and get make it easier to be immutable okay and so where previously",
    "start": "1825760",
    "end": "1833960"
  },
  {
    "text": "if you wanted to not have a backing field explicitly in your code but have it generated you had to have an auto",
    "start": "1833960",
    "end": "1839320"
  },
  {
    "text": "property and in order to say to then you need to have a Setter and what people do is sometimes they make the set up",
    "start": "1839320",
    "end": "1845200"
  },
  {
    "text": "private so it's kind of like it wasn't there um what we are now adding instead",
    "start": "1845200",
    "end": "1850600"
  },
  {
    "text": "is the ability to just have a getter only Auto property and you can get a value in there by initializing it for",
    "start": "1850600",
    "end": "1855919"
  },
  {
    "text": "instance so I can initialize it directly here because we also now have initializers and auto props okay so things get a",
    "start": "1855919",
    "end": "1862919"
  },
  {
    "text": "little more um a little more tur here and now we can this is the",
    "start": "1862919",
    "end": "1869600"
  },
  {
    "text": "Prototype okay I did not want that to happen",
    "start": "1869600",
    "end": "1875799"
  },
  {
    "text": "okay did I freeze here hello always happens when they're",
    "start": "1875799",
    "end": "1881960"
  },
  {
    "text": "recording right uh okay time to tell jokes uh",
    "start": "1881960",
    "end": "1888480"
  },
  {
    "text": "this this this froze pretty badly I have not seen this",
    "start": "1888480",
    "end": "1893559"
  },
  {
    "text": "before ouch okay um it needs needed to discover that it",
    "start": "1893559",
    "end": "1900120"
  },
  {
    "text": "was having trouble it is now restarting so the general thing here just allow you",
    "start": "1900120",
    "end": "1907880"
  },
  {
    "text": "to it's not so much about adding new Concepts last time we added the concept of async the the time before that we",
    "start": "1907880",
    "end": "1915399"
  },
  {
    "text": "added the concept of dynamic there they were both what am I asking for recover files yeah I think so",
    "start": "1915399",
    "end": "1922679"
  },
  {
    "text": "um uh this time around it's not about adding New Concepts uh it's just about",
    "start": "1922679",
    "end": "1928360"
  },
  {
    "text": "making more clear what you already have so hopefully these new features should kind of uh melt into the background",
    "start": "1928360",
    "end": "1933760"
  },
  {
    "text": "let's see how much it remembers of what I did not a lot it remembers the uh the Constructor parameters up there um so",
    "start": "1933760",
    "end": "1940480"
  },
  {
    "text": "let's go and turn this into Auto properties again and see if it gets us into trouble again okay there we go um",
    "start": "1940480",
    "end": "1948039"
  },
  {
    "text": "um so these things to just make the code look lighter and and express your intent",
    "start": "1948039",
    "end": "1955279"
  },
  {
    "text": "and a more tur way that's kind of what we're after okay so this is now valid C code um much lighter than what you had",
    "start": "1955279",
    "end": "1962639"
  },
  {
    "text": "before um another thing is that you have these you often have these very simple",
    "start": "1962639",
    "end": "1968840"
  },
  {
    "text": "methods and properties that are essentially just a single return statement with an expression in um so",
    "start": "1968840",
    "end": "1974960"
  },
  {
    "text": "there's a lot of fluff around that single expression to see what it actually do does and in actually in Lambda expressions for many releases",
    "start": "1974960",
    "end": "1981399"
  },
  {
    "text": "we've had the choice between do I want a full statement body or do I just want an expression for the result and now we're",
    "start": "1981399",
    "end": "1987960"
  },
  {
    "text": "adding that choice to all function members so I think this is quite this is going to quite significantly change what",
    "start": "1987960",
    "end": "1993320"
  },
  {
    "text": "it looks like when you glance over a class and again it's it's really just syntactic sugar but being able to we use",
    "start": "1993320",
    "end": "1999399"
  },
  {
    "text": "the Lambda Arrow again I hope you like it um and uh being able to just say",
    "start": "1999399",
    "end": "2006159"
  },
  {
    "text": "this instead was just say two string is a function that Returns the result of",
    "start": "2006159",
    "end": "2011799"
  },
  {
    "text": "this expression I think that's kind of nice and with properties this is a computed property right it only has a",
    "start": "2011799",
    "end": "2017120"
  },
  {
    "text": "getter the getter is evaluated every time just a single expression in there we actually go a step further and we let",
    "start": "2017120",
    "end": "2022399"
  },
  {
    "text": "you just eliminate both where you say get and where you have all the curries and returns and so on so a get or only",
    "start": "2022399",
    "end": "2028080"
  },
  {
    "text": "Auto property a get sorry um a computed property now can look just like this",
    "start": "2028080",
    "end": "2033840"
  },
  {
    "text": "right just it's still property you can hover over here and you can see there's a property with a getter um but it's super",
    "start": "2033840",
    "end": "2041320"
  },
  {
    "text": "tur like just say whenever people ask for this give them the result of this",
    "start": "2041320",
    "end": "2046600"
  },
  {
    "text": "okay so um expression body function members we call",
    "start": "2046600",
    "end": "2051720"
  },
  {
    "text": "this okay um let's see what else are we going to",
    "start": "2051720",
    "end": "2057560"
  },
  {
    "text": "show um the um let's talk about the uh null",
    "start": "2057560",
    "end": "2065720"
  },
  {
    "text": "conditional operators all right so For Better or Worse we have nullable reference types and only nullable",
    "start": "2065720",
    "end": "2072158"
  },
  {
    "text": "reference types in C we're not going to change that we're not going to add a concept of non-nullable reference types because that's a pain we've tried can't",
    "start": "2072159",
    "end": "2079040"
  },
  {
    "text": "figure it out uh you can it's easy to design a language from scratch with that but it's really hard to add after the",
    "start": "2079040",
    "end": "2085200"
  },
  {
    "text": "fact um but what we can do is to make it easier for you to deal with when you have nulls so um let's say that this try",
    "start": "2085200",
    "end": "2092358"
  },
  {
    "text": "get in method here which tries to take some Json and turn it into an INT let's say that it we w it's you can see it's",
    "start": "2092359",
    "end": "2098480"
  },
  {
    "text": "null robust here if it if it uh gets a null it just returns false well maybe uh",
    "start": "2098480",
    "end": "2104960"
  },
  {
    "text": "we could get rid of all these lines of null checking that we have all over the code and just say",
    "start": "2104960",
    "end": "2110000"
  },
  {
    "text": "well uh let's switch let's say that um um let's let's introduce a question dot",
    "start": "2110000",
    "end": "2116640"
  },
  {
    "text": "version of the dot which says if Json is not null then dot into it and return the",
    "start": "2116640",
    "end": "2122160"
  },
  {
    "text": "result otherwise return null right so now you get um type here is um",
    "start": "2122160",
    "end": "2128520"
  },
  {
    "text": "is a struct here now you get the nullable version of that struct um but you can switch a nullable",
    "start": "2128520",
    "end": "2134119"
  },
  {
    "text": "things so now um it would just fall into the default case here because in in case",
    "start": "2134119",
    "end": "2139320"
  },
  {
    "text": "Json itself itself is null then it'll just fall into the default case we can actually take the the assignment here",
    "start": "2139320",
    "end": "2145560"
  },
  {
    "text": "and and put it down there because we now have a total uh switch on everything that Jason can be um so um we call this",
    "start": "2145560",
    "end": "2155079"
  },
  {
    "text": "some people call this the Elvis operator it's in in a few other langu anges can you see the the two eyes and the cic if",
    "start": "2155079",
    "end": "2160760"
  },
  {
    "text": "you kind of look at this as an emoticon um so that's why that's why it's called the Elis operator so um you",
    "start": "2160760",
    "end": "2168720"
  },
  {
    "text": "can also do that for other things the method that calls the method we saw before here try get in um um you can",
    "start": "2168720",
    "end": "2177119"
  },
  {
    "text": "also um you can also do question indexing so you're saying the result",
    "start": "2177119",
    "end": "2182920"
  },
  {
    "text": "here of this expression is null if Json is null otherwise it's the result of indexing into it with with X here and",
    "start": "2182920",
    "end": "2189920"
  },
  {
    "text": "the the right hand side does not get evaluated unless unless the uh the left",
    "start": "2189920",
    "end": "2195480"
  },
  {
    "text": "hand site was n null and you can chain these so the whole chain of dots and and",
    "start": "2195480",
    "end": "2201200"
  },
  {
    "text": "uh indexing and invocations actually of methods and stuff so that whole chain is",
    "start": "2201200",
    "end": "2206359"
  },
  {
    "text": "um is um only evaluated if you didn't have null up front you can imagine that",
    "start": "2206359",
    "end": "2212400"
  },
  {
    "text": "for one of the most annoying things in C I don't have an example of it in here is the the thre safe way to uh to trigger",
    "start": "2212400",
    "end": "2219760"
  },
  {
    "text": "an event right how many people are C programmers and and and curse this the threat safe not curse event triggering",
    "start": "2219760",
    "end": "2226839"
  },
  {
    "text": "no C programmers okay let's start with that some um you have to check if the",
    "start": "2226839",
    "end": "2233760"
  },
  {
    "text": "delegate you're invoking is null then you have to make sure you have to take a copy of it because it has to be threat",
    "start": "2233760",
    "end": "2238839"
  },
  {
    "text": "safe so if so you don't check it's null and then it becomes n null before you decide not to do it or the other way around and now you can just do it in one",
    "start": "2238839",
    "end": "2246520"
  },
  {
    "text": "single statement with a question. operator okay",
    "start": "2246520",
    "end": "2252400"
  },
  {
    "text": "um let's see we have okay we have 10 minutes left is that right little over",
    "start": "2252400",
    "end": "2258319"
  },
  {
    "text": "10 good um so um let's look here at this",
    "start": "2258319",
    "end": "2263880"
  },
  {
    "text": "async method um I have a bunch of stuff in here um but um one of the things uh",
    "start": "2263880",
    "end": "2272680"
  },
  {
    "text": "that so the the main concept that we introduced in the previous version of language was async so you can now uh",
    "start": "2272680",
    "end": "2277920"
  },
  {
    "text": "Express asynchronous methods easily by um uh they they return a task like a",
    "start": "2277920",
    "end": "2284200"
  },
  {
    "text": "future which is something you can then await in another async method I'm awaiting one here and and you s you sort",
    "start": "2284200",
    "end": "2291480"
  },
  {
    "text": "of just get suspended until that thing is complete and then you get resumed that's all very nice um but we didn't",
    "start": "2291480",
    "end": "2299400"
  },
  {
    "text": "complete it we didn't there were a few places where we couldn't figure out how to how to implement a weight and we at",
    "start": "2299400",
    "end": "2305680"
  },
  {
    "text": "first we thought well that just it doesn't make any sense it's not possible it can't be done and then uh we shipped",
    "start": "2305680",
    "end": "2311960"
  },
  {
    "text": "and then we figured out actually did make sense and but it was hard to implement but then we just did it",
    "start": "2311960",
    "end": "2317720"
  },
  {
    "text": "anyway uh so now uh so in catch and finally blocks you can imagine so a",
    "start": "2317720",
    "end": "2322839"
  },
  {
    "text": "weight turns into a state Machine by the compiler it's a really complicated State machine you can imagine so so it's",
    "start": "2322839",
    "end": "2327920"
  },
  {
    "text": "something like uh when the let's try to do it here so let's what we want to do",
    "start": "2327920",
    "end": "2333040"
  },
  {
    "text": "in here is to is to call a logging method so if I say Repository DOT log",
    "start": "2333040",
    "end": "2339200"
  },
  {
    "text": "async here I want to await that call I'm logging that there was an exception but",
    "start": "2339200",
    "end": "2344560"
  },
  {
    "text": "that in itself is asnc and you want to be able to await the completion of something async inside of a catch block",
    "start": "2344560",
    "end": "2350200"
  },
  {
    "text": "right in this case here but what if you can imagine kind of the the the pains to",
    "start": "2350200",
    "end": "2355440"
  },
  {
    "text": "implement something like that because um well this one isn't actually let's just's talk about finally here a weight",
    "start": "2355440",
    "end": "2363079"
  },
  {
    "text": "um um repository uh do close",
    "start": "2363079",
    "end": "2368960"
  },
  {
    "text": "ASN that's a better one um these are now allowed so uh what essentially we do is",
    "start": "2368960",
    "end": "2375640"
  },
  {
    "text": "we we generate a method behind the scenes that's like this method except it get call it gets called from the beginning every time and then it has a",
    "start": "2375640",
    "end": "2382319"
  },
  {
    "text": "bunch of ifs and branches and stuff to get you to the place you suspended the last time okay so it's a method that",
    "start": "2382319",
    "end": "2389240"
  },
  {
    "text": "pretends that it kicks off where it was but behind the scenes there's all this logic to get you back to where you were",
    "start": "2389240",
    "end": "2394839"
  },
  {
    "text": "that based on some State that's saved well the problem with it finally is that it's not just about getting back to",
    "start": "2394839",
    "end": "2400880"
  },
  {
    "text": "where you were it's also about remembering where you were headed so figuring out keeping track of where are",
    "start": "2400880",
    "end": "2407760"
  },
  {
    "text": "we where were we going after the finally were we going to drop out of it and execute the next statement or were we returning from this method or were we",
    "start": "2407760",
    "end": "2414359"
  },
  {
    "text": "actually in the middle of an exception coming out or um were we actually coming",
    "start": "2414359",
    "end": "2419520"
  },
  {
    "text": "out with a go-to and and keeping track of all those locations and switching on which one of them am I going to and um",
    "start": "2419520",
    "end": "2425520"
  },
  {
    "text": "so it's just a mess but it works and now you don't have to do it we we do it for you in the compiler okay um other little things we",
    "start": "2425520",
    "end": "2434800"
  },
  {
    "text": "have now exception filters so you can other languages onnet already have this",
    "start": "2434800",
    "end": "2441200"
  },
  {
    "text": "it's supported let's say that I only want to uh I only sometimes want to catch this",
    "start": "2441200",
    "end": "2446720"
  },
  {
    "text": "exception here of course I can catch it and see if I wanted it and uh throw it again if I didn't but then I've blown",
    "start": "2446720",
    "end": "2452280"
  },
  {
    "text": "the call stack and the TR the traces are out of whack and and if if there's a dump later I can't see where the",
    "start": "2452280",
    "end": "2458520"
  },
  {
    "text": "exception orally come came from so now you can just say if and then a condition in here so if uh e occurrences it's",
    "start": "2458520",
    "end": "2465880"
  },
  {
    "text": "greater than three or something like that um then the exception only gets",
    "start": "2465880",
    "end": "2471440"
  },
  {
    "text": "caught if that's the case and then you can have multiple now we can have multiple catch blocks with the same type",
    "start": "2471440",
    "end": "2477119"
  },
  {
    "text": "but different conditions on there um if you want",
    "start": "2477119",
    "end": "2482359"
  },
  {
    "text": "to okay um I think that is a good place to stop so this is kind of a now I want",
    "start": "2482359",
    "end": "2488160"
  },
  {
    "text": "to show one more um which I haven't actually we haven't actually implemented yet but it looks like we will have time",
    "start": "2488160",
    "end": "2494920"
  },
  {
    "text": "to implement also string interpolation which is becoming popular in these you know these modern languages like",
    "start": "2494920",
    "end": "2499960"
  },
  {
    "text": "JavaScript and so on um so uh in C you",
    "start": "2499960",
    "end": "2505040"
  },
  {
    "text": "have to call string. format if you want to do something fancy string. format you have a placeholder uh a number that",
    "start": "2505040",
    "end": "2512280"
  },
  {
    "text": "corresponds to the thing in the argument list to the thing that you want to put in there later you can also do various",
    "start": "2512280",
    "end": "2520079"
  },
  {
    "text": "um uh formating specify justification and various formating things or whatever you want to do here we want to allow you",
    "start": "2520079",
    "end": "2527760"
  },
  {
    "text": "to just put Expressions inside of the string leral directly so I think the syntax will land on this if you if you",
    "start": "2527760",
    "end": "2534280"
  },
  {
    "text": "so instead of saying string. format and all that you can just say string literal and if you put",
    "start": "2534280",
    "end": "2539960"
  },
  {
    "text": "um if you put backs slashes in front of the curlies here then they become holes in this holes in the string where you",
    "start": "2539960",
    "end": "2546520"
  },
  {
    "text": "can put an so I can just say x here and Y and they get they would get colorized",
    "start": "2546520",
    "end": "2552800"
  },
  {
    "text": "nicely of course once it's implemented they would get evaluated um and and paste it in there and things start a",
    "start": "2552800",
    "end": "2558480"
  },
  {
    "text": "little nicer you can still do the the minus three thing or whatever you can still like it will still call string",
    "start": "2558480",
    "end": "2564800"
  },
  {
    "text": "format and have all that expressiveness but in a much nicer way and uh that gets us to five minutes",
    "start": "2564800",
    "end": "2572160"
  },
  {
    "text": "before the end of the session and I want to ask you if you have more questions about this or anything you heard",
    "start": "2572160",
    "end": "2578119"
  },
  {
    "text": "hopefully you do because otherwise we have five minutes and then you're going to have to listen to me talk some more",
    "start": "2578119",
    "end": "2586960"
  },
  {
    "text": "yes yes the new features are quite minor yeah",
    "start": "2591839",
    "end": "2598640"
  },
  {
    "text": "yes oh it's a great question what do we have any ideas what we want to do next yeah I can I can talk a little about",
    "start": "2598640",
    "end": "2604400"
  },
  {
    "text": "what our ideas are um we don't this may totally go away okay but maybe I did I",
    "start": "2604400",
    "end": "2611000"
  },
  {
    "text": "didn't say this very clearly in the beginning but we T we started taking a very different approach to how we talk about the future of the language instead",
    "start": "2611000",
    "end": "2617160"
  },
  {
    "text": "of sitting in uh what gillad braa called smoked field rooms and and just figuring out the future secretly we started we",
    "start": "2617160",
    "end": "2624040"
  },
  {
    "text": "we're designing in the open the design notes are actually up on the clex side I talked about before search for rosling",
    "start": "2624040",
    "end": "2629720"
  },
  {
    "text": "clex you can see the C language design notes as they go out um so I'm happy to talk about it uh",
    "start": "2629720",
    "end": "2637359"
  },
  {
    "text": "currently and actually up there you can find also a draft proposal for uh fullon",
    "start": "2637359",
    "end": "2643160"
  },
  {
    "text": "Records features uh and uh pattern matching in C so that's one One Direction I want to go in there's more",
    "start": "2643160",
    "end": "2649760"
  },
  {
    "text": "and more need to to uh code with um plain old data essentially and having",
    "start": "2649760",
    "end": "2655160"
  },
  {
    "text": "instead of having you know objects are great for some things but instead of having functionality wrapped with with",
    "start": "2655160",
    "end": "2660440"
  },
  {
    "text": "data well often times you just want a little data type like the point up here actually um and it's more important how",
    "start": "2660440",
    "end": "2666480"
  },
  {
    "text": "it's transformed and passed through external functions than it is what it can do itself and and for that having",
    "start": "2666480",
    "end": "2672960"
  },
  {
    "text": "pattern matching being able to um and decomposition right being able to easily",
    "start": "2672960",
    "end": "2678280"
  },
  {
    "text": "re combine switching logic and decomposition logic and and have um",
    "start": "2678280",
    "end": "2684599"
  },
  {
    "text": "essentially have your control flow follow the shape of the of the data if you will um that's something that",
    "start": "2684599",
    "end": "2691319"
  },
  {
    "text": "functional languages have it's very nice it's also in Swift uh so it's starting to creep into the mainstream and and",
    "start": "2691319",
    "end": "2697480"
  },
  {
    "text": "there's a very nice proposal up there for that um so that's one theme that we'll be looking at um there may uh there may",
    "start": "2697480",
    "end": "2704559"
  },
  {
    "text": "be others I'm kind of a little interested in maybe looking at some of C is",
    "start": "2704559",
    "end": "2710680"
  },
  {
    "text": "generally generally has good performance but I think there are some places where the semantics of the language force you",
    "start": "2710680",
    "end": "2716880"
  },
  {
    "text": "to write code that is that doesn't perform very well a lot there's a lot of defensing defensive copying of arrays",
    "start": "2716880",
    "end": "2722640"
  },
  {
    "text": "and stuff like that we can think about are there features we can add to let you write more efficient code and that's",
    "start": "2722640",
    "end": "2728599"
  },
  {
    "text": "another theme that we'll be investigating for sure a third theme that we might be looking",
    "start": "2728599",
    "end": "2733640"
  },
  {
    "text": "at um asynchrony is currently for single values can we do something with",
    "start": "2733640",
    "end": "2739839"
  },
  {
    "text": "asynchronous collections or streams where you get things down over the wire maybe one at a time or in chunks and you",
    "start": "2739839",
    "end": "2747160"
  },
  {
    "text": "have uh just as easy access to to language features to deal with that it's another thing that is on the table and",
    "start": "2747160",
    "end": "2755559"
  },
  {
    "text": "you may not never see it come but but that's that's on our mind okay y",
    "start": "2755559",
    "end": "2762359"
  },
  {
    "text": "Yen oh are you looking at that by the way was that well was I supposed to do",
    "start": "2763119",
    "end": "2769680"
  },
  {
    "text": "that",
    "start": "2769680",
    "end": "2772680"
  },
  {
    "text": "I can see that happening uh I did not experience I did not experience sort of a subtle recursion but I will say that",
    "start": "2792520",
    "end": "2799240"
  },
  {
    "text": "we have had analysis that were each other's inverses where you will always",
    "start": "2799240",
    "end": "2804640"
  },
  {
    "text": "get a squiggle I mean not you can specify the severity of it you can make them just infos they'll just tell you",
    "start": "2804640",
    "end": "2810480"
  },
  {
    "text": "things you can silence them and stuff but here's a great example half of the world love VAR and",
    "start": "2810480",
    "end": "2817680"
  },
  {
    "text": "the other half hated okay I think their lover half is probably",
    "start": "2817680",
    "end": "2823680"
  },
  {
    "text": "bigger i in it um but people have opinions there and",
    "start": "2823680",
    "end": "2830200"
  },
  {
    "text": "what we will do uh might be to offer an analysis and fix to take VAR away and",
    "start": "2830200",
    "end": "2837079"
  },
  {
    "text": "want to introduce it in in all the cases where it applies and you can see that's where semantics comes in because V can",
    "start": "2837079",
    "end": "2842359"
  },
  {
    "text": "only be used sometimes and um so it will do it will be a f",
    "start": "2842359",
    "end": "2847599"
  },
  {
    "text": "thing that will say oh you could actually use VAR here if you want to and that would get you into this flip-flop",
    "start": "2847599",
    "end": "2852839"
  },
  {
    "text": "but we will also make it so you can turn Diagnostics on and off so what people will do is turn one of them on and one of them off and they will get the right",
    "start": "2852839",
    "end": "2860599"
  },
  {
    "text": "Behavior no no because the ID doesn't go into as you saw I couldn't click one",
    "start": "2861559",
    "end": "2867119"
  },
  {
    "text": "level down right so it's only going to and it's only going to apply the code fix uh when you ask for it by at least",
    "start": "2867119",
    "end": "2874480"
  },
  {
    "text": "hovering on in the menu over that item so only going to apply one at a time even if you have multiple code fixes in the menu you can only hover on one at a",
    "start": "2874480",
    "end": "2881200"
  },
  {
    "text": "time and you'll have different alternative universes for each so even if they are if they're contrary to each",
    "start": "2881200",
    "end": "2886640"
  },
  {
    "text": "other they're not going to affect each other all right I think we thought it through but if you can come with an",
    "start": "2886640",
    "end": "2893359"
  },
  {
    "text": "example that' be really fun um",
    "start": "2893359",
    "end": "2899079"
  },
  {
    "text": "yep will you start reming stuff never this is we often get this like",
    "start": "2899079",
    "end": "2906559"
  },
  {
    "text": "when is C going to turn into C++ in the sense that it has so much baggage that",
    "start": "2906559",
    "end": "2911800"
  },
  {
    "text": "people tend to camp out in different dialects of the language and don't don't ever use the whole language and that",
    "start": "2911800",
    "end": "2917440"
  },
  {
    "text": "that may happen one day so we have essentially we have a uh in language Evolution we have a dilemma do we keep",
    "start": "2917440",
    "end": "2923359"
  },
  {
    "text": "the language the way it is small and then people and then it'll it'll stop being relevant right people",
    "start": "2923359",
    "end": "2930760"
  },
  {
    "text": "love most of what we introduced to the language since it was created we have to add things to stay relevant but one day",
    "start": "2930760",
    "end": "2937079"
  },
  {
    "text": "you'll grow too big what do you do then do you kill over and die or do you start removing stuff",
    "start": "2937079",
    "end": "2944760"
  },
  {
    "text": "the problem with removing stuff is we have a strong backwards compatibility um",
    "start": "2944760",
    "end": "2950200"
  },
  {
    "text": "uh uh commitment currently we're really committed to being able to compile C 10",
    "start": "2950200",
    "end": "2955480"
  },
  {
    "text": "code all the way up there are tiny tiny quirks that we know about but I dare you to find any of them",
    "start": "2955480",
    "end": "2961799"
  },
  {
    "text": "um and that is that's a strong value proposition for us it's we have a lot of I mean a lot of our customers are an",
    "start": "2961799",
    "end": "2968119"
  },
  {
    "text": "Enterprise right they they want to have be able to just upgrade visual studio and not worry about the source code all",
    "start": "2968119",
    "end": "2973720"
  },
  {
    "text": "of a sudden not compiling and having to go around and fixing a million different little things because we thought Ah",
    "start": "2973720",
    "end": "2979079"
  },
  {
    "text": "that's not that's not cool anymore you know uh you know Anonymous methods that is so you know mid 2000s you know now we",
    "start": "2979079",
    "end": "2987200"
  },
  {
    "text": "use Lambda so let's just throw that other thing out uh that totally wouldn't work and it's let's just know we have to",
    "start": "2987200",
    "end": "2995559"
  },
  {
    "text": "either evolve or die and then we'll see what happens when we get to too big hopefully we can delay it",
    "start": "2995559",
    "end": "3001760"
  },
  {
    "text": "by trying to design our features so they fit in with the existing language as well as possible so that the concepts",
    "start": "3001760",
    "end": "3006799"
  },
  {
    "text": "fit together as much as possible so that the conceptual burden if you will is minimal hopefully and try not to create",
    "start": "3006799",
    "end": "3015400"
  },
  {
    "text": "separate ways of using C we already created one from the beginning which is unsafe code that's already one of those",
    "start": "3015400",
    "end": "3021079"
  },
  {
    "text": "and we we want to try not to get into more of that where you have a mode where you're in a different kind of different",
    "start": "3021079",
    "end": "3026400"
  },
  {
    "text": "kind of World we're very hotheaded about that it has to be yeah I think out of",
    "start": "3026400",
    "end": "3033319"
  },
  {
    "text": "time cool well thank you very much [Applause]",
    "start": "3033319",
    "end": "3039339"
  }
]