[
  {
    "start": "0",
    "end": "75000"
  },
  {
    "text": "[Applause] hello yes as was said my name is Yen",
    "start": "10780",
    "end": "17720"
  },
  {
    "text": "mandri you also could find me well on Twitter or should I say x and the",
    "start": "17720",
    "end": "22920"
  },
  {
    "text": "nickname goodin today's talk is about gvm one not so well-known gvm feature",
    "start": "22920",
    "end": "30199"
  },
  {
    "text": "Dynamic constants and welcome and let's start before I start um I should give",
    "start": "30199",
    "end": "38040"
  },
  {
    "text": "you a disclaimer I work in a wonderful company sonor Source creators of uh",
    "start": "38040",
    "end": "43480"
  },
  {
    "text": "product sonor you might know them by the way who knows who uses sonor lint sonar",
    "start": "43480",
    "end": "48600"
  },
  {
    "text": "Cube wow impressive well nevertheless compan is great but whatever I'm going",
    "start": "48600",
    "end": "55600"
  },
  {
    "text": "to tell you today is not at all about this company whatever I'm going to tell",
    "start": "55600",
    "end": "61239"
  },
  {
    "text": "today is uh connected to my let's say night job to the open source project on",
    "start": "61239",
    "end": "67280"
  },
  {
    "text": "which I work in my spare free time and Company can only dream that it owns my",
    "start": "67280",
    "end": "74479"
  },
  {
    "text": "opinions so today we're going to talk about jao Java code",
    "start": "74479",
    "end": "80240"
  },
  {
    "start": "75000",
    "end": "165000"
  },
  {
    "text": "coverage um we developed this tool for quite a long period of time and there is",
    "start": "80240",
    "end": "85759"
  },
  {
    "text": "a lot of java versions Java releases releases happening in then so nowadays we tested on 17 and a half",
    "start": "85759",
    "end": "94079"
  },
  {
    "text": "GDK versions from version 5 up to not even release it version 22 ear Lex has",
    "start": "94079",
    "end": "101439"
  },
  {
    "text": "built why we do so we are going to see today and again another check who knows",
    "start": "101439",
    "end": "108079"
  },
  {
    "text": "this tool you might hate it it's okay okay nice so sometimes as we test",
    "start": "108079",
    "end": "117280"
  },
  {
    "text": "jao we indeed do find bucks in Jon but I",
    "start": "117280",
    "end": "122439"
  },
  {
    "text": "would say quite often we also find bucks in GDK and we reper them back they get fix",
    "start": "122439",
    "end": "130080"
  },
  {
    "text": "it some of them some of them not that's a quite interesting and funny process um",
    "start": "130080",
    "end": "137519"
  },
  {
    "text": "several years ago uh there was start of a program Open GDK quality Outreach",
    "start": "137519",
    "end": "144599"
  },
  {
    "text": "where open GDK developers contact open source projects and ask them to test ear",
    "start": "144599",
    "end": "150160"
  },
  {
    "text": "access builds find bugs wer them back and we participated with we was a",
    "start": "150160",
    "end": "156440"
  },
  {
    "text": "pioneers of uh this program and at that time we've been actually one of the top",
    "start": "156440",
    "end": "161920"
  },
  {
    "text": "contributors of bux to JK and here is a real disclaimer",
    "start": "161920",
    "end": "167519"
  },
  {
    "start": "165000",
    "end": "221000"
  },
  {
    "text": "actually for today's talk I'm I'm really sorry um I'm really really sorry there",
    "start": "167519",
    "end": "173480"
  },
  {
    "text": "will be a little bit blood out of your favorite Java virtual machine sorry for",
    "start": "173480",
    "end": "179879"
  },
  {
    "text": "for that they will be naked Java compiler no ID nothing just Java",
    "start": "179879",
    "end": "186280"
  },
  {
    "text": "compiler strong language we're going to talk not English not French not any",
    "start": "186280",
    "end": "191760"
  },
  {
    "text": "other we're going to talk bite code and within what 40 minutes I'm going to try",
    "start": "191760",
    "end": "198280"
  },
  {
    "text": "to do intense violence of your brain if you are not ready I think there are other wonderful talks you can go listen",
    "start": "198280",
    "end": "205239"
  },
  {
    "text": "them if everybody go I also will listen some other talk so are you",
    "start": "205239",
    "end": "212760"
  },
  {
    "text": "ready yeah okay relax take a cup of tea or coffee and enjoy Java so let's talk",
    "start": "212760",
    "end": "220760"
  },
  {
    "text": "about Java a quick recap um you all probably know that in Java version 8",
    "start": "220760",
    "end": "228040"
  },
  {
    "start": "221000",
    "end": "419000"
  },
  {
    "text": "Lambda appeared it has been quite a long time ago so here is a little example",
    "start": "228040",
    "end": "233280"
  },
  {
    "text": "with a Lambda we have a method fun and we declare Lambda as a parameter to an",
    "start": "233280",
    "end": "239879"
  },
  {
    "text": "the method run super simple super easy notice that on the line six there is a",
    "start": "239879",
    "end": "246599"
  },
  {
    "text": "string hello Copenhagen do you",
    "start": "246599",
    "end": "252000"
  },
  {
    "text": "know what is going to happen if we compile this what's going to be inside",
    "start": "252000",
    "end": "257440"
  },
  {
    "text": "of your class file well we don't need to guess we can just compile and decompile and look look",
    "start": "257440",
    "end": "265000"
  },
  {
    "text": "into the bite code this is one of my favorite other tools which I use",
    "start": "265000",
    "end": "270919"
  },
  {
    "text": "not daily but let's say weekly Java P soall it Java disassembler we can call",
    "start": "270919",
    "end": "276639"
  },
  {
    "text": "it with two arguments minus V verbos and minus P show me privates protected uh",
    "start": "276639",
    "end": "283960"
  },
  {
    "text": "protected methods Etc basically as I call it Java P minus V minus P show me",
    "start": "283960",
    "end": "290520"
  },
  {
    "text": "everything so we compiled the class we de compilate it and here is what we get",
    "start": "290520",
    "end": "296120"
  },
  {
    "text": "what's the inside here is our fun method here is its body but where is a string",
    "start": "296120",
    "end": "303080"
  },
  {
    "text": "literal Copenhagen it was there it was supposed to be there but it's not there",
    "start": "303080",
    "end": "309479"
  },
  {
    "text": "well there is even more where is line number six it just",
    "start": "309479",
    "end": "316720"
  },
  {
    "text": "disappears if you know or if you might you might know that all of this is",
    "start": "316759",
    "end": "322479"
  },
  {
    "text": "mechanics behind wonderful bite Cod instruction in Dynamic this instruction",
    "start": "322479",
    "end": "328759"
  },
  {
    "text": "made it possible to implement lambdas in Java language and here is a quick recap in",
    "start": "328759",
    "end": "335199"
  },
  {
    "text": "work Dynamic instruction uses a bootstrap method which",
    "start": "335199",
    "end": "341280"
  },
  {
    "text": "returns which uses some other Machinery like in case of lambdas it uses Lambda",
    "start": "341280",
    "end": "347479"
  },
  {
    "text": "meta Factory to construct an actual call site which is going to be plac it in the",
    "start": "347479",
    "end": "353520"
  },
  {
    "text": "place where invoke Dynamic instruction is used this call site returns an object",
    "start": "353520",
    "end": "359880"
  },
  {
    "text": "that basically holds a real method handle that should be invoked and well it has a reference to a",
    "start": "359880",
    "end": "369039"
  },
  {
    "text": "special method generated in your class file and this method now contains the",
    "start": "369039",
    "end": "375080"
  },
  {
    "text": "string that we've been looking for and it contains a line number six this internal implementation details of",
    "start": "375080",
    "end": "382639"
  },
  {
    "text": "lambdas of En work Dynamic this is nice this is quite",
    "start": "382639",
    "end": "387919"
  },
  {
    "text": "performant but what we what is going to happen if we're going to try to use invok Dynamic for",
    "start": "387919",
    "end": "395919"
  },
  {
    "text": "constants well there is an allocation over head we",
    "start": "395919",
    "end": "402400"
  },
  {
    "text": "should hold in memory a callide and well there is a method",
    "start": "402400",
    "end": "408759"
  },
  {
    "text": "invocation overhead so for constants it's not that nice to use inog",
    "start": "408759",
    "end": "415599"
  },
  {
    "text": "Dynamic and here we go a new JP appeared",
    "start": "415599",
    "end": "421280"
  },
  {
    "start": "419000",
    "end": "505000"
  },
  {
    "text": "in Java 11 also known as scdi Dynamic class file constants that solves this",
    "start": "421280",
    "end": "427800"
  },
  {
    "text": "problems with Dynamic class file constants we get a real",
    "start": "427800",
    "end": "433000"
  },
  {
    "text": "constant it is a less overhead and we get a more performant execution because",
    "start": "433000",
    "end": "440840"
  },
  {
    "text": "it is a constant just in time compiler doesn't trust final Fields well you",
    "start": "440840",
    "end": "446440"
  },
  {
    "text": "probably know because of reflection and Etc but it perfectly trusts constant pool entries and coni resolves to the",
    "start": "446440",
    "end": "454000"
  },
  {
    "text": "constant pool entry as any constant in your program like 42 or string literal",
    "start": "454000",
    "end": "459680"
  },
  {
    "text": "let's overhead and there is more to invoke Dynamic instructions they have different",
    "start": "459680",
    "end": "466440"
  },
  {
    "text": "linkage stage when you call one you need to link this invoke Dynamic instruction",
    "start": "466440",
    "end": "472840"
  },
  {
    "text": "with some method when you call another you need to link this invoke Dynamic instruction with another method or with",
    "start": "472840",
    "end": "479720"
  },
  {
    "text": "the same one but two con con instructions they do sh share the same",
    "start": "479720",
    "end": "485159"
  },
  {
    "text": "linkage stage once we obtain it using uh",
    "start": "485159",
    "end": "490800"
  },
  {
    "text": "coni a constant within the same class file the same constants there not going",
    "start": "490800",
    "end": "496319"
  },
  {
    "text": "to be any more linkage stage we already know to what this constant resolves this",
    "start": "496319",
    "end": "501639"
  },
  {
    "text": "is nice well but where this can be used or",
    "start": "501639",
    "end": "507280"
  },
  {
    "start": "505000",
    "end": "543000"
  },
  {
    "text": "where it is already used let's take a look on another simple example we have a",
    "start": "507280",
    "end": "513159"
  },
  {
    "text": "method in this method there is some code written and let's say we would like to",
    "start": "513159",
    "end": "518320"
  },
  {
    "text": "measure Cod coverage of this method so let me complexify it a little",
    "start": "518320",
    "end": "524240"
  },
  {
    "text": "bit let's say that there is some Branch if else and a simple condition let's",
    "start": "524240",
    "end": "529600"
  },
  {
    "text": "imagine that we want to record execution of this method and know which parts of it were executed or in other words",
    "start": "529600",
    "end": "537240"
  },
  {
    "text": "covered by code coverage what should we do turns out it's pretty easy if we",
    "start": "537240",
    "end": "543839"
  },
  {
    "start": "543000",
    "end": "804000"
  },
  {
    "text": "insert in certain positions of those methods so called props which record",
    "start": "543839",
    "end": "549959"
  },
  {
    "text": "fact of of their execution we can perfectly know which branch was taken we",
    "start": "549959",
    "end": "556240"
  },
  {
    "text": "can say okay if prob zero was executed then true Branch was taken if prob one",
    "start": "556240",
    "end": "561519"
  },
  {
    "text": "was executed then false Branch was taken if both were executed we know that",
    "start": "561519",
    "end": "567279"
  },
  {
    "text": "method has a full coverage all the branches were cover it in it and all the instructions that led to props were",
    "start": "567279",
    "end": "573880"
  },
  {
    "text": "executed as well so oops something went too",
    "start": "573880",
    "end": "582440"
  },
  {
    "text": "fast so now what the prop is do you have",
    "start": "585240",
    "end": "590279"
  },
  {
    "text": "any ideas what what we can insert in original class to record its",
    "start": "590279",
    "end": "596519"
  },
  {
    "text": "execution we have some requirements it should have a minimal Rune time overhead",
    "start": "596519",
    "end": "602880"
  },
  {
    "text": "well obviously we don't want to slow down your program that much that testing becomes INF fible it will be strange and",
    "start": "602880",
    "end": "610680"
  },
  {
    "text": "it should have no side effects on application so we don't want to turn your multi threaded application in a",
    "start": "610680",
    "end": "616040"
  },
  {
    "text": "single threadit that would be awful we don't want to change values in your",
    "start": "616040",
    "end": "621680"
  },
  {
    "text": "code and it should record the fact of execution and it should be we should be",
    "start": "621680",
    "end": "627320"
  },
  {
    "text": "able to say okay this point EX exactly this point was executed do you have any",
    "start": "627320",
    "end": "633920"
  },
  {
    "text": "ideas what could be placed",
    "start": "633920",
    "end": "637880"
  },
  {
    "text": "there well wake up people it's almost noon not almost it's",
    "start": "639160",
    "end": "645120"
  },
  {
    "text": "noon but okay I hope you will wake up in 10 minutes turns out that it's not that",
    "start": "645120",
    "end": "651880"
  },
  {
    "text": "hard to satisfy those requirements there is a very simple basic Construction in Java which satisfies all those",
    "start": "651880",
    "end": "659320"
  },
  {
    "text": "requirements requirements well almost all but that's probably a story for another talk so we can use a Boolean",
    "start": "659320",
    "end": "666920"
  },
  {
    "text": "array and the bullan array has uh storage if you write in this",
    "start": "666920",
    "end": "673240"
  },
  {
    "text": "storage true at some index we simply indicate that prob with",
    "start": "673240",
    "end": "679639"
  },
  {
    "text": "this ID was executed that's it it's harder to imagine I spent years",
    "start": "679639",
    "end": "686480"
  },
  {
    "text": "trying to find a better conr action with a lower overhead it's harder to imagine",
    "start": "686480",
    "end": "692880"
  },
  {
    "text": "anything else that's simple as as it is but we need to get some this uh array",
    "start": "692880",
    "end": "701600"
  },
  {
    "text": "from somewhere we need to get it in order to record the fact of uh execution",
    "start": "701600",
    "end": "707200"
  },
  {
    "text": "we need to store it somewhere so that the code coverage tool and G can later on use this data and transform it into",
    "start": "707200",
    "end": "713959"
  },
  {
    "text": "the wonderful report that you're going to see so where we can get this one well",
    "start": "713959",
    "end": "719880"
  },
  {
    "text": "that's also not hard we have a Java agent which collects all the information",
    "start": "719880",
    "end": "725800"
  },
  {
    "text": "so this agent can have a method please give me array of props we're going to",
    "start": "725800",
    "end": "731440"
  },
  {
    "text": "call this method saying okay we want a record",
    "start": "731440",
    "end": "736600"
  },
  {
    "text": "execution of this class we need that amount of storage number of props and",
    "start": "736600",
    "end": "742399"
  },
  {
    "text": "well here is a special identifier of this class as you might know with the same name them can be multi mle classes",
    "start": "742399",
    "end": "749880"
  },
  {
    "text": "in the gvm loaded by different class loaders so we need to identify them somehow here is class ID that's simple",
    "start": "749880",
    "end": "756320"
  },
  {
    "text": "like this and to improve performance we are going to store this uh field sorry",
    "start": "756320",
    "end": "762440"
  },
  {
    "text": "we're going to store this array in a field and later on in the methods we're",
    "start": "762440",
    "end": "767800"
  },
  {
    "text": "going to actually store it in a local variable access to the locals is faster than access to the",
    "start": "767800",
    "end": "773279"
  },
  {
    "text": "fields that's it that's how jao actually works under the hood a simple as that do",
    "start": "773279",
    "end": "780199"
  },
  {
    "text": "you see any problems with this cut for me it's quite small but for you",
    "start": "780199",
    "end": "787000"
  },
  {
    "text": "it should be quite observable I really really need you to",
    "start": "787000",
    "end": "794800"
  },
  {
    "text": "wake up do you see any problems with this",
    "start": "794800",
    "end": "800959"
  },
  {
    "text": "cut well no worries we also haven't seen problems with this Cod for many many",
    "start": "800959",
    "end": "806720"
  },
  {
    "start": "804000",
    "end": "2185000"
  },
  {
    "text": "years it worked so now you should wake up now a really hardcore part starts but",
    "start": "806720",
    "end": "814199"
  },
  {
    "text": "I will warm you up a little bit let's take a much simple example of the code",
    "start": "814199",
    "end": "819760"
  },
  {
    "text": "let's say I have some class let me call it child why not and in this class I'm",
    "start": "819760",
    "end": "826040"
  },
  {
    "text": "going to have a method which does assertion pretty stupid pretty simple assertion on two constants one and two",
    "start": "826040",
    "end": "832440"
  },
  {
    "text": "and I'm asking whether they equal or not and I'm going to call this method so are",
    "start": "832440",
    "end": "838000"
  },
  {
    "text": "we going to get a certain here or",
    "start": "838000",
    "end": "842040"
  },
  {
    "text": "not no why who thinks that we're not going to get a certain year I do",
    "start": "843440",
    "end": "851199"
  },
  {
    "text": "think who thinks that we're going to get a certain year I I also think well the",
    "start": "851199",
    "end": "858320"
  },
  {
    "text": "actual answer it depends as you might know in Java virtual machine there is a special",
    "start": "858320",
    "end": "864440"
  },
  {
    "text": "argument which says enable assertion or disable assertions we can even enable assertions",
    "start": "864440",
    "end": "870079"
  },
  {
    "text": "for particular class or for a package Etc so if assertions disabled we are not going to",
    "start": "870079",
    "end": "876639"
  },
  {
    "text": "get assertion year they disabled they ignored if assertions enabled we obviously going to get assertion year",
    "start": "876639",
    "end": "882839"
  },
  {
    "text": "because one is not equal to two but the answer on the question well it",
    "start": "882839",
    "end": "888519"
  },
  {
    "text": "depends let me complexify example a little bit I'm going to",
    "start": "888519",
    "end": "893600"
  },
  {
    "text": "take one more class I'm going to call it base in this Base Class there now going",
    "start": "893600",
    "end": "899240"
  },
  {
    "text": "to be a static initializer and instead of calling original method from my main method I'm",
    "start": "899240",
    "end": "907120"
  },
  {
    "text": "going to call this method from the static initializer of the base class and now child inherits",
    "start": "907120",
    "end": "914639"
  },
  {
    "text": "base what is going to happen in this case are we going to get assertion here",
    "start": "914639",
    "end": "920560"
  },
  {
    "text": "or not it's almost the same example as",
    "start": "920560",
    "end": "927959"
  },
  {
    "text": "before",
    "start": "927959",
    "end": "930959"
  },
  {
    "text": "who thinks that we are not going to get assertion year you might refer to the previous answer yes if we disable",
    "start": "935839",
    "end": "942040"
  },
  {
    "text": "assertions we shouldn't get assertion year right what puzzles",
    "start": "942040",
    "end": "947680"
  },
  {
    "text": "here well to answer this question let's have a look at the Java language specification our Bible Java language",
    "start": "948959",
    "end": "957079"
  },
  {
    "text": "specification in this case vers 8 paragraph 14.10 says an assertion",
    "start": "957079",
    "end": "962880"
  },
  {
    "text": "statement that is executed before its class or interface had completed initialization is always",
    "start": "962880",
    "end": "970399"
  },
  {
    "text": "enabled there is no way to disable this assertion so the ones who said yes we're",
    "start": "970680",
    "end": "976560"
  },
  {
    "text": "going to get assertion year they're right there is no way to disable this assertion all others no problem here is",
    "start": "976560",
    "end": "983759"
  },
  {
    "text": "a flag for you this one is always enabled why so why is this happen s to",
    "start": "983759",
    "end": "990480"
  },
  {
    "text": "answer this question we need to have a look at the bite Cod again but I'm going to save a little bit of time and this is",
    "start": "990480",
    "end": "996880"
  },
  {
    "text": "not a bite code this is equivalent source code basically compilation of a",
    "start": "996880",
    "end": "1002399"
  },
  {
    "text": "sech statement is equivalent to the compilation of this Java source code we have some synthetic field added to our",
    "start": "1002399",
    "end": "1010440"
  },
  {
    "text": "class that holds a status whether assertions disabled or enabled uh for",
    "start": "1010440",
    "end": "1017600"
  },
  {
    "text": "this class and we request a run time hey run time could you please tell us do we have",
    "start": "1017600",
    "end": "1024120"
  },
  {
    "text": "assertions for this class enabled or not and we store the value uh that run time",
    "start": "1024120",
    "end": "1029438"
  },
  {
    "text": "returns to us in this field and later on we use this field this is exactly the",
    "start": "1029439",
    "end": "1035520"
  },
  {
    "text": "same performance optimization that we've been seeing in jaako it's exactly the",
    "start": "1035520",
    "end": "1041079"
  },
  {
    "text": "same trick it's too heavy too expensive to on every method call on every",
    "start": "1041079",
    "end": "1046438"
  },
  {
    "text": "assertion invocation to go to Z time and askask status because there might be synchronization involved Etc that it's",
    "start": "1046439",
    "end": "1053960"
  },
  {
    "text": "much easier and more performant to ask once and catch the result in a",
    "start": "1053960",
    "end": "1060960"
  },
  {
    "text": "field but then the problem is the static initializer are going to be executed",
    "start": "1060960",
    "end": "1067400"
  },
  {
    "text": "only when class is fully initialized and when the class is not fully intialized static analizer wasn't",
    "start": "1067400",
    "end": "1074520"
  },
  {
    "text": "executed so field has its default value",
    "start": "1074520",
    "end": "1079799"
  },
  {
    "text": "in case of bullan default value is false so when class is not",
    "start": "1079799",
    "end": "1086720"
  },
  {
    "text": "initialized condition if not assertions disabled turns",
    "start": "1086720",
    "end": "1093158"
  },
  {
    "text": "true and it's always enabled that's why Java language specification says that",
    "start": "1093320",
    "end": "1098520"
  },
  {
    "text": "it's always enabled this is implementation detail this is just a querk of how assertions were implemented",
    "start": "1098520",
    "end": "1104640"
  },
  {
    "text": "in Java compiler but because of this quer they have to put this in Java language",
    "start": "1104640",
    "end": "1112080"
  },
  {
    "text": "specification if you look at this code it is exactly the same Cod that we",
    "start": "1112080",
    "end": "1118120"
  },
  {
    "text": "use in jao look it's exactly the same we ask R time hey can you give us",
    "start": "1118120",
    "end": "1126200"
  },
  {
    "text": "array of props and from time returns it to us we store it in the field and then",
    "start": "1126200",
    "end": "1131520"
  },
  {
    "text": "we use it from the field it's exactly the same code so here when we try to",
    "start": "1131520",
    "end": "1137080"
  },
  {
    "text": "write something while class is not yet yet initialized we are going to get null pointer",
    "start": "1137080",
    "end": "1142919"
  },
  {
    "text": "exception because the default value for objects for for references for arrays is",
    "start": "1142919",
    "end": "1148640"
  },
  {
    "text": "actually n that's a problem what can we do with",
    "start": "1148640",
    "end": "1154400"
  },
  {
    "text": "this well we found a solution quite some time ago let's say 10 20 years ago for this instead of using catic initializer",
    "start": "1154400",
    "end": "1162320"
  },
  {
    "text": "we're going to do la initialization we're going to have a method this method looks if fil initialized if the field is",
    "start": "1162320",
    "end": "1169919"
  },
  {
    "text": "not yet initialized only then ask the WR time store the value in the field and if",
    "start": "1169919",
    "end": "1176720"
  },
  {
    "text": "field is initialized well just return it super simple super easy this works for",
    "start": "1176720",
    "end": "1183200"
  },
  {
    "text": "this problem of not yet analized classes are we done is there some other",
    "start": "1183200",
    "end": "1192600"
  },
  {
    "text": "problems any",
    "start": "1197640",
    "end": "1203559"
  },
  {
    "text": "ideas what is going to happen if you write such a cat and try to compile it will it",
    "start": "1205840",
    "end": "1212120"
  },
  {
    "text": "work exactly uh thank you very much I I I",
    "start": "1216679",
    "end": "1222000"
  },
  {
    "text": "haven't seen who said that but we have a static final field and we have right to it",
    "start": "1222000",
    "end": "1230440"
  },
  {
    "text": "you can write to static final field only from static initializer but here we have another",
    "start": "1230440",
    "end": "1236919"
  },
  {
    "text": "method that right to it it turns out that while Java compiler",
    "start": "1236919",
    "end": "1243520"
  },
  {
    "text": "doesn't permit you to write a code that writes into static final field from the",
    "start": "1243520",
    "end": "1249679"
  },
  {
    "text": "method uh Java virtual machine wasn't doing so for quite a long time till Java",
    "start": "1249679",
    "end": "1256039"
  },
  {
    "text": "Version 9 till open GDK Version 9 this wasn't checked on the Java Virtual",
    "start": "1256039",
    "end": "1262360"
  },
  {
    "text": "Machine level it was only enforced on the compiler level and our codes work it",
    "start": "1262360",
    "end": "1268640"
  },
  {
    "text": "for many many years we've been writing to a final field from a method since open gk9 this does not work",
    "start": "1268640",
    "end": "1276760"
  },
  {
    "text": "this throws legal access here because well Java virtual machine specification",
    "start": "1276760",
    "end": "1282080"
  },
  {
    "text": "says you can use a put static instruction um only if the field",
    "start": "1282080",
    "end": "1289120"
  },
  {
    "text": "if the field is final you must use this instruction inside of static initializer otherwise exception is true that's",
    "start": "1289120",
    "end": "1297360"
  },
  {
    "text": "it so what can we do it should be simple let's remove final that's it jit anyway",
    "start": "1297360",
    "end": "1304960"
  },
  {
    "text": "doesn't trust final Fields it doesn't optimize them so what's the problem let's just remove final and it's going",
    "start": "1304960",
    "end": "1310720"
  },
  {
    "text": "to work right you see problems now did we",
    "start": "1310720",
    "end": "1316440"
  },
  {
    "text": "resolve them all well what about",
    "start": "1316440",
    "end": "1324760"
  },
  {
    "text": "interface you know that quite some time ago interfaces also got a methods and now they can contain",
    "start": "1324760",
    "end": "1332320"
  },
  {
    "text": "executable code so we might want to record cut coverage in them and also you",
    "start": "1332320",
    "end": "1337480"
  },
  {
    "text": "know that in interfaces every field is implicitly static",
    "start": "1337480",
    "end": "1342720"
  },
  {
    "text": "final there is no way to choose uh that it's not going to be final it's",
    "start": "1342720",
    "end": "1347880"
  },
  {
    "text": "implicitly static final so it requires a static instalation either we need to remove",
    "start": "1347880",
    "end": "1353640"
  },
  {
    "text": "final or we need to remove static inzer if you don't remove final we get",
    "start": "1353640",
    "end": "1359440"
  },
  {
    "text": "illegal access eror if you use static initializer we",
    "start": "1359440",
    "end": "1364960"
  },
  {
    "text": "might go back to the problem of static initialization right and we get an all pointer",
    "start": "1364960",
    "end": "1370080"
  },
  {
    "text": "exception that's Catch 22 what can we do here before we do anything with this",
    "start": "1370080",
    "end": "1377520"
  },
  {
    "text": "let's first figure out out whether there is a problem of cyclic initialization",
    "start": "1377520",
    "end": "1383000"
  },
  {
    "text": "and not initialized class whether there is problem at all to solve or",
    "start": "1383000",
    "end": "1389000"
  },
  {
    "text": "not so we have interface base we have interface child interface child extends",
    "start": "1389000",
    "end": "1395559"
  },
  {
    "text": "base super simple in the base we need to trigger",
    "start": "1395559",
    "end": "1402679"
  },
  {
    "text": "um uh intialization so to trigger intialization uh sorry we need to",
    "start": "1402679",
    "end": "1408919"
  },
  {
    "text": "trigger initialization of a child and a base uh when class or interface iniz it",
    "start": "1408919",
    "end": "1415159"
  },
  {
    "text": "it's super classes iniz that as well as all super interfaces that declare any default method so we need to have a",
    "start": "1415159",
    "end": "1421480"
  },
  {
    "text": "default method in a base here we go then in in the base we need to call a",
    "start": "1421480",
    "end": "1427919"
  },
  {
    "text": "method from a child so we are going to declare a static final field here that creates a child and uh calls a method on",
    "start": "1427919",
    "end": "1436120"
  },
  {
    "text": "a child pretty much like with classes and we're going to declare in a child this method that we are going to be cing",
    "start": "1436120",
    "end": "1443120"
  },
  {
    "text": "and just to see the trace why not let's throw assertion year exception here",
    "start": "1443120",
    "end": "1448480"
  },
  {
    "text": "without any conditions we just want to see that uh this happened or not and uh",
    "start": "1448480",
    "end": "1455480"
  },
  {
    "text": "to see to trace more execution we are going to add into the child also some field to uh that just prints a child so",
    "start": "1455480",
    "end": "1464960"
  },
  {
    "text": "if we see here ah and the last piece we need to trigger initialization of all",
    "start": "1464960",
    "end": "1471279"
  },
  {
    "text": "this hierarchy so let's construct child construction of child is going to be",
    "start": "1471279",
    "end": "1477320"
  },
  {
    "text": "triggering uh in initialization of base and so on and what are the possible",
    "start": "1477320",
    "end": "1483880"
  },
  {
    "text": "outcomes of execution of this program well if we see an exception assertion",
    "start": "1483880",
    "end": "1489960"
  },
  {
    "text": "year base it means that base is ined before child was ined that's it if we",
    "start": "1489960",
    "end": "1497679"
  },
  {
    "text": "see that child is printed on the screen and then we see assertion here it means that child first iniz it and only then",
    "start": "1497679",
    "end": "1505480"
  },
  {
    "text": "Bas iniz it so in the first case we're going to get back to exactly the same",
    "start": "1505480",
    "end": "1511320"
  },
  {
    "text": "problem that we've seen with classes and in the second case there is no problem at all to solve because child in case of",
    "start": "1511320",
    "end": "1518360"
  },
  {
    "text": "interfaces is going to be analized first here is again question to you what",
    "start": "1518360",
    "end": "1525120"
  },
  {
    "text": "do you think is going to happen",
    "start": "1525120",
    "end": "1530320"
  },
  {
    "text": "who thinks that it depends I do think it depends you're",
    "start": "1531399",
    "end": "1537760"
  },
  {
    "text": "right as usual the answer is it",
    "start": "1537760",
    "end": "1542799"
  },
  {
    "text": "depends imagine our surprise when we've been testing this um we've been in two different",
    "start": "1542799",
    "end": "1550720"
  },
  {
    "text": "countries in the world me and another K of jao we've been writing exactly same",
    "start": "1550720",
    "end": "1557120"
  },
  {
    "text": "code independent actually we've been experimenting with is she reported to us",
    "start": "1557120",
    "end": "1562799"
  },
  {
    "text": "and we've been using different GDK versions I don't remember who was using",
    "start": "1562799",
    "end": "1567919"
  },
  {
    "text": "which one maybe I was using older one but basically on GDK version 8 update 40",
    "start": "1567919",
    "end": "1574679"
  },
  {
    "text": "prior to this version you're going to see the that assertion ER happens and child is not yet",
    "start": "1574679",
    "end": "1581880"
  },
  {
    "text": "initialized I think it was Mark uh who another col who've been using more",
    "start": "1581880",
    "end": "1587240"
  },
  {
    "text": "recent version after update 14 imagine his surprise when he wrote to me look",
    "start": "1587240",
    "end": "1593720"
  },
  {
    "text": "I'm getting a jvm crash he run exact same Cod and what he",
    "start": "1593720",
    "end": "1599679"
  },
  {
    "text": "saw on his screen is first child is analized not even exception is thrown",
    "start": "1599679",
    "end": "1606240"
  },
  {
    "text": "child is iniz it then base is iniz it and then BM gvm",
    "start": "1606240",
    "end": "1612240"
  },
  {
    "text": "crashes so here is how we found one more in gvm we reported it back and and uh it",
    "start": "1612360",
    "end": "1619320"
  },
  {
    "text": "got uh quite uh in a time it manner fix it it",
    "start": "1619320",
    "end": "1624960"
  },
  {
    "text": "got fix it quite fast in 8 update 152",
    "start": "1624960",
    "end": "1630520"
  },
  {
    "text": "earlex has built we tested",
    "start": "1630520",
    "end": "1634120"
  },
  {
    "text": "it and here is what we get then before this update where fix happen",
    "start": "1635679",
    "end": "1642919"
  },
  {
    "text": "it we are having the same problem as with classes bases initialize it first",
    "start": "1642919",
    "end": "1650158"
  },
  {
    "text": "after update the actual correct behavior that was supposed to be there always since",
    "start": "1652200",
    "end": "1659480"
  },
  {
    "text": "the beginning according to the Java virtual machine specification is actually",
    "start": "1659480",
    "end": "1666519"
  },
  {
    "text": "opposite it should be child iniz it first in case of interfaces unlike in",
    "start": "1666519",
    "end": "1671919"
  },
  {
    "text": "case of classes and well we get some range of virtual machines where such C crashes",
    "start": "1671919",
    "end": "1678679"
  },
  {
    "text": " happens so what can we do in this case in this case well we need to find a",
    "start": "1678679",
    "end": "1684919"
  },
  {
    "text": "solution for our tool so we cannot remove final we cannot get rid of static",
    "start": "1684919",
    "end": "1690200"
  },
  {
    "text": "initializer so we resort to uh a slower solution uh we are going",
    "start": "1690200",
    "end": "1696480"
  },
  {
    "text": "to have a slow pass for all GDK versions this slow pass will always be call in",
    "start": "1696480",
    "end": "1702760"
  },
  {
    "text": "crun time without caching a field without storing the way",
    "start": "1702760",
    "end": "1709519"
  },
  {
    "text": "this has a some performance heat but sooner or later uh class will be iniz it so value is going to be cached this",
    "start": "1709519",
    "end": "1716679"
  },
  {
    "text": "literal performance hit is going to be only during the class initialization which is not that long process hopefully",
    "start": "1716679",
    "end": "1723399"
  },
  {
    "text": "and well hopefully jet optimizes quite a lot here is what we get oh",
    "start": "1723399",
    "end": "1732519"
  },
  {
    "text": "sorry let's get back to the topic of uh this talk let's get back to the",
    "start": "1732519",
    "end": "1738919"
  },
  {
    "text": "coni coni is such nice addition to the gvm which allows to get rid of all this",
    "start": "1738919",
    "end": "1745640"
  },
  {
    "text": "magic we can replace all these D with static finals and Etc with just one bite",
    "start": "1745640",
    "end": "1752039"
  },
  {
    "text": "code instruction we can just load this uh data from a dynamic",
    "start": "1752039",
    "end": "1759039"
  },
  {
    "text": "constant and resolution of a dynamic constants is not coupled with static",
    "start": "1759039",
    "end": "1764960"
  },
  {
    "text": "initialization there is no problem of uh dependencies",
    "start": "1764960",
    "end": "1771000"
  },
  {
    "text": "Etc we can use C here it works the same for classes it",
    "start": "1772519",
    "end": "1777720"
  },
  {
    "text": "works the same for interfaces there is no more difference of order or any other",
    "start": "1777720",
    "end": "1783279"
  },
  {
    "text": "problem that's pretty neat pretty nice another side effect nice side effect you",
    "start": "1783279",
    "end": "1789159"
  },
  {
    "text": "cannot see Dynamic constant as a field in the class previously we've been storing it in the fields to get the",
    "start": "1789159",
    "end": "1795720"
  },
  {
    "text": "performance now we don't we are getting the the same performance just with a cond without the trick and we don't",
    "start": "1795720",
    "end": "1801360"
  },
  {
    "text": "introduce any synthetic field in your class this also nice side effect because",
    "start": "1801360",
    "end": "1806399"
  },
  {
    "text": "users of jao of our instrumentation agent they always surprised that",
    "start": "1806399",
    "end": "1812039"
  },
  {
    "text": "instrumented classes classes where we record coverage they do contain some additional member reflection uh they see",
    "start": "1812039",
    "end": "1819799"
  },
  {
    "text": "this uh field through the reflection and it's not nice for serialization Frameworks etc etc with a constant",
    "start": "1819799",
    "end": "1826600"
  },
  {
    "text": "Dynamic you don't see it through the reflection that's nice there is less of",
    "start": "1826600",
    "end": "1833240"
  },
  {
    "text": "her head no Fields Etc what was not nice when we",
    "start": "1833240",
    "end": "1839559"
  },
  {
    "text": "implemented this and what we've been again testing is it was",
    "start": "1839559",
    "end": "1845640"
  },
  {
    "text": "not entirely tested when it was implemented unfortunately if you've been",
    "start": "1845640",
    "end": "1851480"
  },
  {
    "text": "trying to use uh Dynamic constant on uh early versions where it appeared uh it",
    "start": "1851480",
    "end": "1858519"
  },
  {
    "text": "was leading again to the gvm crash they tested many cases they tested Dynamic constants of a type object Primitives",
    "start": "1858519",
    "end": "1866320"
  },
  {
    "text": "Etc but they forgot that there is a bullan race and this was uh leading to the crash well we reported that uh it",
    "start": "1866320",
    "end": "1875360"
  },
  {
    "text": "got found a little bit later because we've been lagging with testing at that time but we found it reper it and it was",
    "start": "1875360",
    "end": "1882840"
  },
  {
    "text": "fixed in open GDK 13 unfortunately two releases after Dynamic constants why",
    "start": "1882840",
    "end": "1888519"
  },
  {
    "text": "introduced but there is a workaround for this uh and well this also was backported to updates of earlier",
    "start": "1888519",
    "end": "1896120"
  },
  {
    "text": "versions The Fix there is a workaround which we can use for the versions where",
    "start": "1896120",
    "end": "1901840"
  },
  {
    "text": "fix doesn't exist we just need to use object for the dynamic constant as a",
    "start": "1901840",
    "end": "1907000"
  },
  {
    "text": "type and instead of uh storing it directly in the local variable we need to do a checked cast a little bit of",
    "start": "1907000",
    "end": "1914639"
  },
  {
    "text": "bite cat overhead a little bit of front time overhead but well at least we don't get crashes out of",
    "start": "1914639",
    "end": "1921639"
  },
  {
    "text": "this well then our users discovered another",
    "start": "1922240",
    "end": "1927679"
  },
  {
    "text": "problem apparently jvm can crash when bootstrap method that resolves Dynamic",
    "start": "1927679",
    "end": "1934000"
  },
  {
    "text": "constant trigger sling of a class whose static initializer again static initialization static initialization",
    "start": "1934000",
    "end": "1940799"
  },
  {
    "text": "remember it's Evil source of many problems uh throw exception we had this",
    "start": "1940799",
    "end": "1946919"
  },
  {
    "text": "pass in our agent because calling an agent might trigger intialization of",
    "start": "1946919",
    "end": "1952080"
  },
  {
    "text": "some class some of our classes verifies that configuration is correct if configuration is not correct it throws",
    "start": "1952080",
    "end": "1957760"
  },
  {
    "text": "an exception so we crash G instead of telling to a user that his configuration",
    "start": "1957760",
    "end": "1963200"
  },
  {
    "text": "is incorrect he's going to see a crash dump that's not nice we need to fix it",
    "start": "1963200",
    "end": "1968880"
  },
  {
    "text": "of course we need to also report it we found it again a little bit later already free releases past the coni was",
    "start": "1968880",
    "end": "1976120"
  },
  {
    "text": "introduced but that's fine and uh we have it was again backported",
    "start": "1976120",
    "end": "1981200"
  },
  {
    "text": "to another update um this time it was not backported of to version 12 because",
    "start": "1981200",
    "end": "1988240"
  },
  {
    "text": "you know intermediate versions they not ltss they stop development on intermediate versions as soon as they",
    "start": "1988240",
    "end": "1995039"
  },
  {
    "text": "switch to the development of a newer version and well we need to find a",
    "start": "1995039",
    "end": "2001080"
  },
  {
    "text": "workaround work around well super simple don't throw exceptions right no exception no crash well that's the J we",
    "start": "2001080",
    "end": "2008679"
  },
  {
    "text": "still need to show uh configuration year to the user so instead of throwing",
    "start": "2008679",
    "end": "2015039"
  },
  {
    "text": "exception uh sorry instead of throwing exception in static initializer we just need to throw exception in not a static",
    "start": "2015039",
    "end": "2021639"
  },
  {
    "text": "initializer that was as simple as this then again thanks to our users not",
    "start": "2021639",
    "end": "2029279"
  },
  {
    "text": "even to us we don't do extensive testing uh on all of the gvms that do exist in",
    "start": "2029279",
    "end": "2035159"
  },
  {
    "text": "the world we mainly Target hotspot gvm uh but our users they do use other gvms",
    "start": "2035159",
    "end": "2041000"
  },
  {
    "text": "like open G9 and apparently open G9 got implementation of coni but they did a",
    "start": "2041000",
    "end": "2047880"
  },
  {
    "text": "mistake in another place uh not with a Boolean array they did a mistake uh with garbage collector there have been some",
    "start": "2047880",
    "end": "2054839"
  },
  {
    "text": "missing garbage collector barriers so this was also crashing j under some",
    "start": "2054839",
    "end": "2060638"
  },
  {
    "text": "heavy logs well that's got reported uh I don't",
    "start": "2060639",
    "end": "2066200"
  },
  {
    "text": "remember when it was fixed but it was fixed and the same story they do backport so it was backported to the",
    "start": "2066200",
    "end": "2072800"
  },
  {
    "text": "earlier versions unfortunately in this case we cannot provide any workaround at",
    "start": "2072800",
    "end": "2078240"
  },
  {
    "text": "all so we left it like this let's get back to assertions you",
    "start": "2078240",
    "end": "2083839"
  },
  {
    "text": "remember this code which was using assertion static initialization field Etc it's exactly",
    "start": "2083839",
    "end": "2091240"
  },
  {
    "text": "the same code that we use in jao if in jao we we could use Dynamic constant",
    "start": "2091240",
    "end": "2097040"
  },
  {
    "text": "then for this code we also can use a dynamic constant and we can finally fix",
    "start": "2097040",
    "end": "2103320"
  },
  {
    "text": "this little trick in Java language specification so that we don't need to guess anymore whether this exception is",
    "start": "2103320",
    "end": "2109680"
  },
  {
    "text": "enabled or disabled we can just replace all of this with a dynamic constant and",
    "start": "2109680",
    "end": "2116240"
  },
  {
    "text": "there is already bootstrap methods inside of GDK we don't need to even create such a bootstrap method ourself",
    "start": "2116240",
    "end": "2122760"
  },
  {
    "text": "there is a plenty of bootstrap method in a in a package javaan can work in a class constant bootstraps in",
    "start": "2122760",
    "end": "2130560"
  },
  {
    "text": "particular it's already possible if you'd like to experiment with Dynamic constant it's already possible to use",
    "start": "2130560",
    "end": "2136320"
  },
  {
    "text": "wonderful bite code manipulation Library ASM and encode Dynamic constant in your",
    "start": "2136320",
    "end": "2141880"
  },
  {
    "text": "class file and here is a code that uses Java link uh invoke constant bootstraps",
    "start": "2141880",
    "end": "2149480"
  },
  {
    "text": "to ask whether assertions enabled or not for a particular class and store the",
    "start": "2149480",
    "end": "2154880"
  },
  {
    "text": "result of this in a dynamic constant we can just replace all the assertion Machinery with this and uh we're going",
    "start": "2154880",
    "end": "2162800"
  },
  {
    "text": "to uh get rid of the problem of static initialization unfortunately it's not",
    "start": "2162800",
    "end": "2168720"
  },
  {
    "text": "yet done in open GDK I don't know why uh maybe it was on a plate sometime ago",
    "start": "2168720",
    "end": "2174319"
  },
  {
    "text": "maybe it was forgotten maybe it's not yet done because well it's quite tough process you need to change Java language",
    "start": "2174319",
    "end": "2180599"
  },
  {
    "text": "specification maybe people got used to this problem and uh if we flip a coin",
    "start": "2180599",
    "end": "2186240"
  },
  {
    "start": "2185000",
    "end": "2316000"
  },
  {
    "text": "and change the behavior we actually surprise them more than they surprised now but that's one of the uses for",
    "start": "2186240",
    "end": "2193040"
  },
  {
    "text": "dynamic constants oops is there any other uses in Java uh",
    "start": "2193040",
    "end": "2200000"
  },
  {
    "text": "for dynamic constants yes there is for example if you have two methods and",
    "start": "2200000",
    "end": "2205079"
  },
  {
    "text": "those two methods use exactly the same uh method handle as a Lambda for example",
    "start": "2205079",
    "end": "2211240"
  },
  {
    "text": "they use a predicate string is empty current implementation of lambdas is",
    "start": "2211240",
    "end": "2216800"
  },
  {
    "text": "going to use two invoke Dynamic instructions for this they're going to have a different linkage stage so they",
    "start": "2216800",
    "end": "2225079"
  },
  {
    "text": "both going to require initialization but they both refer to exactly the same",
    "start": "2225079",
    "end": "2230240"
  },
  {
    "text": "Target if you replace this with a dynamic constant well there is less overhead on",
    "start": "2230240",
    "end": "2236280"
  },
  {
    "text": "initialization and that's it that's wonderful um another use for",
    "start": "2236280",
    "end": "2243880"
  },
  {
    "text": "dynamic constants uh let me again try to do a little quiz for",
    "start": "2243880",
    "end": "2249920"
  },
  {
    "text": "you what do you think how many constants you can declare in",
    "start": "2249920",
    "end": "2257040"
  },
  {
    "text": "you we can declare one two three four but how much",
    "start": "2257400",
    "end": "2263160"
  },
  {
    "text": "more till when we can continue I didn't you answer on this",
    "start": "2263160",
    "end": "2269000"
  },
  {
    "text": "question actually some time ago but our users are smart you are smart you are",
    "start": "2269000",
    "end": "2274560"
  },
  {
    "text": "our users they test Wonder F examples they test crazy examples uh they came back to",
    "start": "2274560",
    "end": "2282160"
  },
  {
    "text": "us telling how many constants is possible based on this I actually",
    "start": "2282160",
    "end": "2287680"
  },
  {
    "text": "decided to run a little quiz on X or at the time Twitter and don't worry if you",
    "start": "2287680",
    "end": "2294359"
  },
  {
    "text": "cannot answer it even the smartest persons in the world was not able to answer this question you might know",
    "start": "2294359",
    "end": "2300880"
  },
  {
    "text": "Hines uh hin uh who runs Java Specialists newsletter he gave a wrong",
    "start": "2300880",
    "end": "2306640"
  },
  {
    "text": "answer on this question he was pretty close but he was wrong we don't need to guess we can just",
    "start": "2306640",
    "end": "2316079"
  },
  {
    "start": "2316000",
    "end": "2527000"
  },
  {
    "text": "try we can take this code compile it decompile and see what's inside here is",
    "start": "2316079",
    "end": "2323720"
  },
  {
    "text": "a bite Cod it's quite big but out of this bite Cod the answer to this question comes so if you look inside of",
    "start": "2323720",
    "end": "2332920"
  },
  {
    "text": "Ys we would see that every yum constant is going to be declined",
    "start": "2332920",
    "end": "2337960"
  },
  {
    "text": "as a field in this class and this is part of uh one of the",
    "start": "2337960",
    "end": "2344880"
  },
  {
    "text": "answers on this question there is a limit on the number of fields in the class if you look in the Java language",
    "start": "2344880",
    "end": "2352079"
  },
  {
    "text": "specification uh sorry Java virtual machine specification another Bible it's going to say that number of fields is",
    "start": "2352079",
    "end": "2360319"
  },
  {
    "text": "limited uh if I'm not mistaken it's usually limited by a magic number 65,000",
    "start": "2360319",
    "end": "2368480"
  },
  {
    "text": "536 or 35 and that's a limit how many fields we",
    "start": "2368480",
    "end": "2374240"
  },
  {
    "text": "can have in a class so no more than that then there is another field that",
    "start": "2374240",
    "end": "2382480"
  },
  {
    "text": "holds all the in initialized values of you it's an array",
    "start": "2382480",
    "end": "2388480"
  },
  {
    "text": "actually and as it is array there is another limit on the rates and this was the answer of hind hin knew that there",
    "start": "2388480",
    "end": "2395839"
  },
  {
    "text": "is array so he used this approximation as an answer arrays in gvm are also",
    "start": "2395839",
    "end": "2402520"
  },
  {
    "text": "limited and limited by integer Max int he guessed but even this is not",
    "start": "2402520",
    "end": "2410400"
  },
  {
    "text": "true the answer is again it depends in a hotspot gvm arrays are limited by",
    "start": "2410400",
    "end": "2416400"
  },
  {
    "text": "integer maxint minus 2 or three I don't remember it may even vary from one",
    "start": "2416400",
    "end": "2421920"
  },
  {
    "text": "version to the other it's again internal implementation details and well then this code",
    "start": "2421920",
    "end": "2429318"
  },
  {
    "text": "[Music]",
    "start": "2466240",
    "end": "2469380"
  },
  {
    "text": "the answer on the question uh size of a methods is limited in gvm it is limited",
    "start": "2487359",
    "end": "2493599"
  },
  {
    "text": "by again 65k instructions so actual actual answer on",
    "start": "2493599",
    "end": "2500800"
  },
  {
    "text": "the question is indeed it depends uh but on practice with hotspot gvm you get",
    "start": "2500800",
    "end": "2506079"
  },
  {
    "text": "even less than 65,000 of fields you get about I think not even 32,000 you get",
    "start": "2506079",
    "end": "2514000"
  },
  {
    "text": "much less constants in you num you can declare but with a coni you can go",
    "start": "2514000",
    "end": "2519160"
  },
  {
    "text": "bigger you can shrink the size of a method and get closer to the limit to",
    "start": "2519160",
    "end": "2525040"
  },
  {
    "text": "the to the other limits where else Ki can be used let's have a look on the other example uh you",
    "start": "2525040",
    "end": "2532640"
  },
  {
    "start": "2527000",
    "end": "2989000"
  },
  {
    "text": "all know yum switches they've been introduced at",
    "start": "2532640",
    "end": "2537880"
  },
  {
    "text": "when okay who remembers everybody uses Java 21 we don't need to remember such",
    "start": "2538079",
    "end": "2543440"
  },
  {
    "text": "uh uh little details when which feature was introduced so yum switch is nice actually it was",
    "start": "2543440",
    "end": "2550359"
  },
  {
    "text": "introduced in Java 14 um oh sorry uh I'm lying to you here",
    "start": "2550359",
    "end": "2558359"
  },
  {
    "text": "um switch Expressions were introduced in uh release 14 and yum s has been there",
    "start": "2558359",
    "end": "2565480"
  },
  {
    "text": "since a very long time since yums were introduced so switch Expressions um if you compile switch",
    "start": "2565480",
    "end": "2572440"
  },
  {
    "text": "expression if you decompile it if we look at the bite Cod again here we see Java for",
    "start": "2572440",
    "end": "2578400"
  },
  {
    "text": "here is a switch uh this switch is done by something strange this switch is done",
    "start": "2578400",
    "end": "2587240"
  },
  {
    "text": "by the result of invocation of some method",
    "start": "2587240",
    "end": "2593440"
  },
  {
    "text": "ordinal and this switch is done by value returned from some arrays that is stored",
    "start": "2593440",
    "end": "2600160"
  },
  {
    "text": "even outside of the class that you had why",
    "start": "2600160",
    "end": "2605240"
  },
  {
    "text": "so if you look at this uh class that is accessed where this switch map is",
    "start": "2605400",
    "end": "2612160"
  },
  {
    "text": "stored it's going to look like this it's going to have a static",
    "start": "2612160",
    "end": "2618920"
  },
  {
    "text": "initializer static initializer initializer switch map it asks what's the ordinal value of constant",
    "start": "2618920",
    "end": "2627680"
  },
  {
    "text": "true and in the place of the array of this ordinal value let's put one what's",
    "start": "2627680",
    "end": "2634000"
  },
  {
    "text": "the ordinal value of a constant false and in the place of array uh let's store",
    "start": "2634000",
    "end": "2642240"
  },
  {
    "text": "two and then the actual switch looks like this we look into the switch map we",
    "start": "2642240",
    "end": "2648960"
  },
  {
    "text": "ask for a current constant its ordinal value and then we do switch this is done like that because",
    "start": "2648960",
    "end": "2656480"
  },
  {
    "text": "you might know that Java has split compilation we might compile Gom",
    "start": "2656480",
    "end": "2661720"
  },
  {
    "text": "constant and the switch separately we might compile them together then we might might go back and",
    "start": "2661720",
    "end": "2667920"
  },
  {
    "text": "recompile the switch or we can actually recompile a constant so at one time this",
    "start": "2667920",
    "end": "2675200"
  },
  {
    "text": "Cod cannot trust the order it cannot assume that one constant always has a",
    "start": "2675200",
    "end": "2680920"
  },
  {
    "text": "value one and another constant has a value two it has to assume that we recompile",
    "start": "2680920",
    "end": "2686359"
  },
  {
    "text": "it you num and maybe we flip at the order but the behavior of this code should not change if we recompile",
    "start": "2686359",
    "end": "2692240"
  },
  {
    "text": "something outside of this code so here is another trick in Java comp comp ER",
    "start": "2692240",
    "end": "2697559"
  },
  {
    "text": "that makes the order of this switch stable we can just ask the run time of a current value and compiler provides",
    "start": "2697559",
    "end": "2704640"
  },
  {
    "text": "using this switch map and mapping of current run time value into the value that was there at at a compile",
    "start": "2704640",
    "end": "2712920"
  },
  {
    "text": "time is there any problems with this",
    "start": "2712920",
    "end": "2717558"
  },
  {
    "text": "code I'm ready to bet you should now know the",
    "start": "2717960",
    "end": "2723960"
  },
  {
    "text": "answer wonderful that's indeed one of answer that you should remember indeed",
    "start": "2724480",
    "end": "2730160"
  },
  {
    "text": "I'm glad that you remember it at least this one but another one is well don't",
    "start": "2730160",
    "end": "2736160"
  },
  {
    "text": "use static initialization it's a source of all the problems okay not all some of them this",
    "start": "2736160",
    "end": "2744240"
  },
  {
    "text": "code uses static initialization so let me try to explore",
    "start": "2744240",
    "end": "2749640"
  },
  {
    "text": "again the problem with a static initialization it's much more complex code in this code we have yum constant",
    "start": "2749640",
    "end": "2757160"
  },
  {
    "text": "uh yum X and constant a in this yum uh we have",
    "start": "2757160",
    "end": "2763599"
  },
  {
    "text": "Constructor uh for this constant uh in this Constructor we have a switch by",
    "start": "2763599",
    "end": "2769800"
  },
  {
    "text": "another yum in the other yum we also have a constant and just in case why not",
    "start": "2769800",
    "end": "2776319"
  },
  {
    "text": "we will need this method ever we have a method never call which we actually never call but this never call method",
    "start": "2776319",
    "end": "2783599"
  },
  {
    "text": "also has a switch",
    "start": "2783599",
    "end": "2788960"
  },
  {
    "text": "so the first switch is by another the never call method the second switch is",
    "start": "2789599",
    "end": "2795079"
  },
  {
    "text": "by first un know and we never call this method what will",
    "start": "2795079",
    "end": "2801200"
  },
  {
    "text": "happen yeah you can answer it depends but no what is going to happen is actually null pointer",
    "start": "2801760",
    "end": "2809760"
  },
  {
    "text": "exception and wrapped into exception initializer in ER there is not cyclic",
    "start": "2811359",
    "end": "2817920"
  },
  {
    "text": "initialization involved in this case in this example what happens in this case is a little bit more complicated uh if",
    "start": "2817920",
    "end": "2825319"
  },
  {
    "text": "you map the exception to trace uh to the source Cod uh it's going to look like",
    "start": "2825319",
    "end": "2831079"
  },
  {
    "text": "this the part of this te Trace actually points us on a method that is never",
    "start": "2831079",
    "end": "2838839"
  },
  {
    "text": "called there is no single call of never call method in this program but the St",
    "start": "2839440",
    "end": "2844880"
  },
  {
    "text": "Trace is going to point on it let's have a look at the bite",
    "start": "2844880",
    "end": "2850599"
  },
  {
    "text": "cut ah and well by the way uh if you use Scotland uh here is a similar example uh",
    "start": "2850599",
    "end": "2857240"
  },
  {
    "text": "with with Scotland with switches in the Scotland and there is no single nullable",
    "start": "2857240",
    "end": "2863359"
  },
  {
    "text": "time type in this program there is no single null value in this program and",
    "start": "2863359",
    "end": "2869000"
  },
  {
    "text": "somebody some time ago told me that there is no n pointer exception in C well there",
    "start": "2869000",
    "end": "2875040"
  },
  {
    "text": "is um the problem comes again from internal details of implementation of",
    "start": "2875040",
    "end": "2881000"
  },
  {
    "text": "the this compiler trick that generates a switch map so there is a static initializer in our yum this static",
    "start": "2881000",
    "end": "2889680"
  },
  {
    "text": "initializer calls Constructor in this Constructor we have a switch this switch",
    "start": "2889680",
    "end": "2895920"
  },
  {
    "text": "is by switch map that compiler generates for switches to map yum constants so we",
    "start": "2895920",
    "end": "2902000"
  },
  {
    "text": "need to trigger initialization of this switch map class here it",
    "start": "2902000",
    "end": "2907880"
  },
  {
    "text": "is and this switch map class actually holds switch map not just for one switch",
    "start": "2907880",
    "end": "2913960"
  },
  {
    "text": "it holds for them all even for for the ones which are not",
    "start": "2913960",
    "end": "2919640"
  },
  {
    "text": "executed even for the ones that are never executed and that's exactly what is",
    "start": "2919640",
    "end": "2925760"
  },
  {
    "text": "happening initialization of this unused switch map out of one is unused out of",
    "start": "2925760",
    "end": "2933680"
  },
  {
    "text": "two wants to get how many values in the other Unum",
    "start": "2933680",
    "end": "2939839"
  },
  {
    "text": "constant but the other Unum constant is not yet initialized and we get an all pointer",
    "start": "2939839",
    "end": "2947200"
  },
  {
    "text": "exception why we're talking about this and coni well because exactly the same switch uh by y all this machinary all",
    "start": "2949079",
    "end": "2957839"
  },
  {
    "text": "these tricks all these CS in Java compiler can be replaced by a single",
    "start": "2957839",
    "end": "2963119"
  },
  {
    "text": "constant Dynamic instruction we will need to in use a new bootstrap method unfortunately in this",
    "start": "2963119",
    "end": "2969079"
  },
  {
    "text": "case no existing quants work for us but well it's",
    "start": "2969079",
    "end": "2974359"
  },
  {
    "text": "possible I don't know yet I don't know why this hasn't been done yet in open",
    "start": "2974359",
    "end": "2980000"
  },
  {
    "text": "GDK maybe again priorities maybe people again learn it to live with this uh",
    "start": "2980000",
    "end": "2988280"
  },
  {
    "text": "trick is there any other examples of cond yes there is other for example can",
    "start": "2988319",
    "end": "2993599"
  },
  {
    "start": "2989000",
    "end": "3089000"
  },
  {
    "text": "you tell me what is a good singl tone Factory it should be much simpler question than",
    "start": "2993599",
    "end": "2999480"
  },
  {
    "text": "all the previous ones this doesn't touch B Cod at all it depends yes yes you're right so",
    "start": "2999480",
    "end": "3008880"
  },
  {
    "text": "let's say we can use static final",
    "start": "3008880",
    "end": "3014240"
  },
  {
    "text": "right it's possible in some cases it's valid answer uh if you don't need L",
    "start": "3014240",
    "end": "3020040"
  },
  {
    "text": "initialization we can have static final we can use synchronized accessor",
    "start": "3020040",
    "end": "3026480"
  },
  {
    "text": "right that's probably not what we like to",
    "start": "3026480",
    "end": "3031960"
  },
  {
    "text": "write but maybe in some scenarios why not the better probably will be double",
    "start": "3031960",
    "end": "3039359"
  },
  {
    "text": "checked loing right but this one is harder to remember harder to write",
    "start": "3039359",
    "end": "3044680"
  },
  {
    "text": "harder to not make a mistake you need a v tile you need quite some",
    "start": "3044680",
    "end": "3050160"
  },
  {
    "text": "synchronization quite some moves it's easy to do a mistake in this one",
    "start": "3050160",
    "end": "3055640"
  },
  {
    "text": "right that's also valid answer another one which I like which uh has its own pros",
    "start": "3055640",
    "end": "3063119"
  },
  {
    "text": "and cons which is easier to remember uh than double checked loing is uh ination",
    "start": "3063119",
    "end": "3069480"
  },
  {
    "text": "on demand holder also a possible answer might suit",
    "start": "3069480",
    "end": "3074599"
  },
  {
    "text": "your needs maybe not well if you use Scotland there is even nice thing we can",
    "start": "3074599",
    "end": "3079920"
  },
  {
    "text": "say all the properties that we want we want laziness we want single tone Etc",
    "start": "3079920",
    "end": "3085839"
  },
  {
    "text": "and we want we we want safety threat safety so we can tell it and well here we go there is a Jet",
    "start": "3085839",
    "end": "3092960"
  },
  {
    "start": "3089000",
    "end": "3124000"
  },
  {
    "text": "draft for lazy static final Fields this feature could use",
    "start": "3092960",
    "end": "3099760"
  },
  {
    "text": "cond to bring Las intialization of static final Fields into the Java you",
    "start": "3099760",
    "end": "3106280"
  },
  {
    "text": "can use cond you can get all the benefits out of it so maybe one day we will get a answer",
    "start": "3106280",
    "end": "3114119"
  },
  {
    "text": "on this question like this maybe we will will be able to use a new keyword lazy",
    "start": "3114119",
    "end": "3119160"
  },
  {
    "text": "or const or something like this let's hope and there is even more Java 11 gave",
    "start": "3119160",
    "end": "3126319"
  },
  {
    "start": "3124000",
    "end": "3152000"
  },
  {
    "text": "us Dynamic class file constant Java 12 gave us uh gvm constants API uh there is",
    "start": "3126319",
    "end": "3133480"
  },
  {
    "text": "not yet uh implemented Jabs like Jep 333 intrinsics for DC and inog dynamic",
    "start": "3133480",
    "end": "3139960"
  },
  {
    "text": "instructions so that you would be able easily manipulate with this from the",
    "start": "3139960",
    "end": "3145160"
  },
  {
    "text": "Java Cod without the need to use bite Cod",
    "start": "3145160",
    "end": "3150760"
  },
  {
    "text": "manipulation and here we come to the takeaways of this talk one I already know you remember it and this is",
    "start": "3150760",
    "end": "3156480"
  },
  {
    "start": "3152000",
    "end": "3341000"
  },
  {
    "text": "wonderful uh quite often answer on many question is let all together it depends another",
    "start": "3156480",
    "end": "3164680"
  },
  {
    "text": "takeaway that I'd like you to take home just one more if you can today new",
    "start": "3164680",
    "end": "3172160"
  },
  {
    "text": "powerful Java and jvm features arrive with Incredible with Incredible sped every day every day",
    "start": "3172160",
    "end": "3181119"
  },
  {
    "text": "something happens very quickly they unlock a new",
    "start": "3181119",
    "end": "3187040"
  },
  {
    "text": "possibilities they unlock some other new features that you can",
    "start": "3187040",
    "end": "3192240"
  },
  {
    "text": "use not only for Java not only for gvm also for other languages such as Scotland Scala groovy",
    "start": "3192240",
    "end": "3200040"
  },
  {
    "text": "Etc but you know people who ride these codes they people they do mistake so",
    "start": "3200040",
    "end": "3207839"
  },
  {
    "text": "Let's help them don't wait please don't wait don't be afraid to try out a new",
    "start": "3207839",
    "end": "3215240"
  },
  {
    "text": "features and when you try out don't be afraid to report any",
    "start": "3215240",
    "end": "3222359"
  },
  {
    "text": "feedback that you get crashes backs whatever before the next",
    "start": "3222599",
    "end": "3228799"
  },
  {
    "text": "LTS it would be wonderful if all we together could deliver a better LTS",
    "start": "3228799",
    "end": "3237200"
  },
  {
    "text": "if you don't report BS the next LPS might be not that great as it would be",
    "start": "3237200",
    "end": "3242520"
  },
  {
    "text": "if we would report bags it's actually easy you found something strange you",
    "start": "3242520",
    "end": "3248280"
  },
  {
    "text": "found something that doesn't behave as per uh specification as per Bible you",
    "start": "3248280",
    "end": "3254559"
  },
  {
    "text": "can just go to mailing list and write this or you can go to bux java.com and",
    "start": "3254559",
    "end": "3261559"
  },
  {
    "text": "Report the back if you get a gvm crash just attach this gvm crash to to this",
    "start": "3261559",
    "end": "3267000"
  },
  {
    "text": "back and with a little reproducer and the people on other end will take it we investigate and we'll",
    "start": "3267000",
    "end": "3274280"
  },
  {
    "text": "provide a solution for the good of all of us",
    "start": "3274280",
    "end": "3280400"
  },
  {
    "text": "and don't be afraid don't don't hesitate to provide not only bus and crashes",
    "start": "3280400",
    "end": "3289280"
  },
  {
    "text": "don't be afraid to say thank you to the other developers to the",
    "start": "3289280",
    "end": "3295880"
  },
  {
    "text": "Developers in particular of Open Source projects to the developers who are not",
    "start": "3295880",
    "end": "3301680"
  },
  {
    "text": "paid to do their job at night to deliver you some open source",
    "start": "3301680",
    "end": "3309359"
  },
  {
    "text": "tools that you use or well if you hate then yes don't say thank thanks to them",
    "start": "3309359",
    "end": "3315880"
  },
  {
    "text": "but they sleep less than others to find some",
    "start": "3315880",
    "end": "3322839"
  },
  {
    "text": "strange backs and to give you this open source tools so don't be afraid if you like their tools that work to say thank",
    "start": "3322839",
    "end": "3329640"
  },
  {
    "text": "you because those guys they do deal with with only negative feedback something",
    "start": "3329640",
    "end": "3335119"
  },
  {
    "text": "doesn't work something crous Etc but sometimes they would like to to hear a",
    "start": "3335119",
    "end": "3340200"
  },
  {
    "text": "little than you so that's it thank you very much for",
    "start": "3340200",
    "end": "3346400"
  },
  {
    "start": "3341000",
    "end": "3362000"
  },
  {
    "text": "[Applause]",
    "start": "3346400",
    "end": "3352349"
  },
  {
    "text": "listening",
    "start": "3355319",
    "end": "3358319"
  }
]