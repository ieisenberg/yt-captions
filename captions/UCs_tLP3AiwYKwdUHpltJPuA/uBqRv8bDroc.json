[
  {
    "start": "0",
    "end": "65000"
  },
  {
    "text": "[Music]",
    "start": "970",
    "end": "7838"
  },
  {
    "text": "so yes today i'm going to talk about abpf um as as sven said i work at aqua security",
    "start": "13040",
    "end": "19840"
  },
  {
    "text": "where we build tools to help enterprises with their cloud native securing their cloud native deployments",
    "start": "19840",
    "end": "26960"
  },
  {
    "text": "and ebpf is one of the technologies that we're starting to leverage in particular with a project",
    "start": "26960",
    "end": "33440"
  },
  {
    "text": "called tracy now i have done a talk about ebpf before",
    "start": "33440",
    "end": "38719"
  },
  {
    "text": "but today i'm going to do something new in that i am writing my code",
    "start": "38719",
    "end": "44160"
  },
  {
    "text": "or at least my user space code with go today it's the first time i've i've done the talk using go so that's",
    "start": "44160",
    "end": "50559"
  },
  {
    "text": "the the new twist that we're gonna tackle today so before i get into the point where i'm",
    "start": "50559",
    "end": "58640"
  },
  {
    "text": "gonna start using go and start writing some code i should probably start by talking a",
    "start": "58640",
    "end": "65040"
  },
  {
    "start": "65000",
    "end": "274000"
  },
  {
    "text": "little bit about what ebpf is key thing is it lets you run custom",
    "start": "65040",
    "end": "72640"
  },
  {
    "text": "programs of your choice in the kernel so it's a linux kernel",
    "start": "72640",
    "end": "78000"
  },
  {
    "text": "feature technology that lets you on the fly add",
    "start": "78000",
    "end": "84799"
  },
  {
    "text": "and change code programmed that are going to run in response to",
    "start": "84799",
    "end": "89920"
  },
  {
    "text": "events and you can change them dynamically without having to reboot the machine so much much more powerful than writing",
    "start": "89920",
    "end": "97280"
  },
  {
    "text": "a kernel module we've seen ebpf becoming really hot",
    "start": "97280",
    "end": "104000"
  },
  {
    "text": "technology over the last few years and because it's so powerful and because you can hook it into so many different",
    "start": "104000",
    "end": "110320"
  },
  {
    "text": "events we're seeing it using lots of observability tools we're starting to see it used for security as",
    "start": "110320",
    "end": "116159"
  },
  {
    "text": "well today i'm going to talk more about how it works and hopefully give you enough grounding that you can",
    "start": "116159",
    "end": "122960"
  },
  {
    "text": "go away and start writing your own ebpf code now if we're going to run some code in",
    "start": "122960",
    "end": "130640"
  },
  {
    "text": "the kernel but as developers we're usually writing applications in user space",
    "start": "130640",
    "end": "136640"
  },
  {
    "text": "so how do we communicate between user space and kernel the answer is system calls system calls",
    "start": "136640",
    "end": "143440"
  },
  {
    "text": "provide the interface between user space and kernel so",
    "start": "143440",
    "end": "148480"
  },
  {
    "text": "i can make a pretty good guess that there would be a system call related to bpf",
    "start": "148480",
    "end": "153920"
  },
  {
    "text": "and there certainly is if we look at the man page for bpf we'll find lots of really helpful information about",
    "start": "153920",
    "end": "161360"
  },
  {
    "text": "what bpf is and how we use it so first of all bpf stands for barclay packet filters",
    "start": "161360",
    "end": "168800"
  },
  {
    "text": "i'm going to use the word ebpf and bbf pretty interchangeably historically it was about filtering",
    "start": "168800",
    "end": "175840"
  },
  {
    "text": "network packets running custom code when a network packet arrived that's been extended you can now run",
    "start": "175840",
    "end": "183599"
  },
  {
    "text": "your bpf programs in response to lots and lots of different types of events",
    "start": "183599",
    "end": "189200"
  },
  {
    "text": "not just the arrival of a network packet so whether it's classic bpf or ebpf",
    "start": "189200",
    "end": "196800"
  },
  {
    "text": "doesn't really matter these days but in both cases you're running code in",
    "start": "196800",
    "end": "203360"
  },
  {
    "text": "the kernel and you really really don't want the kernel to crash or hang",
    "start": "203360",
    "end": "208640"
  },
  {
    "text": "so when we want to run some ebpf code it goes through a verification step",
    "start": "208640",
    "end": "214640"
  },
  {
    "text": "to make sure that it's safe to run so that's something we'll talk a little bit more about",
    "start": "214640",
    "end": "219680"
  },
  {
    "text": "later so we have some ebpf code that's going",
    "start": "219680",
    "end": "226640"
  },
  {
    "text": "to run in the kernel we have user space application code that as developers",
    "start": "226640",
    "end": "232480"
  },
  {
    "text": "is normally where we're used to writing code and there's a system called interface between the two",
    "start": "232480",
    "end": "239360"
  },
  {
    "text": "and i think if we look at the system calls that can actually be quite helpful for understanding really what's happening when we're",
    "start": "239360",
    "end": "245200"
  },
  {
    "text": "talking about uh inserting code into the kernel so i'm going to start by using an",
    "start": "245200",
    "end": "250959"
  },
  {
    "text": "example i'm going to use bpf trace this is quite a widely used tool for running",
    "start": "250959",
    "end": "258799"
  },
  {
    "text": "bpf scripts on a system and so i'm going to show this partly as",
    "start": "258799",
    "end": "264479"
  },
  {
    "text": "an example to show the kind of things you can do with bpf and partly so that we can examine the",
    "start": "264479",
    "end": "270400"
  },
  {
    "text": "system calls that happen when we run it so let's explore some",
    "start": "270400",
    "end": "276320"
  },
  {
    "start": "274000",
    "end": "279000"
  },
  {
    "text": "bps trace and the syscalls it uses so i have an example that i'm going to",
    "start": "276320",
    "end": "284080"
  },
  {
    "start": "279000",
    "end": "403000"
  },
  {
    "text": "use doesn't really matter that much what my example is but in this case i'm setting up a script",
    "start": "284080",
    "end": "291120"
  },
  {
    "text": "that's going to run on a trace point it's running when we call the cis enter",
    "start": "291120",
    "end": "297280"
  },
  {
    "text": "the syscenter function actually gets triggered for every single system call so i'm going to run a script every time",
    "start": "297280",
    "end": "304080"
  },
  {
    "text": "any process on my virtual machine calls a system call and it's going to run this script what",
    "start": "304080",
    "end": "310560"
  },
  {
    "text": "that script actually does is it takes uh it sets up a counter for the number of times",
    "start": "310560",
    "end": "316240"
  },
  {
    "text": "each different command makes a system call so if i try to run that well you have to",
    "start": "316240",
    "end": "323919"
  },
  {
    "text": "be a privileged user to do it that kind of makes sense you don't want every unprivileged user",
    "start": "323919",
    "end": "330240"
  },
  {
    "text": "running code in your kernel so i can use sudo i'll just run that for",
    "start": "330240",
    "end": "335280"
  },
  {
    "text": "a few seconds and then i'll interrupt it and it's going to show us",
    "start": "335280",
    "end": "341280"
  },
  {
    "text": "for each different kind of command that's running on my machine the number of system calls",
    "start": "341280",
    "end": "348320"
  },
  {
    "text": "i mean that's quite interestingly powerful that we can get to such fine granularity as counting",
    "start": "348320",
    "end": "354720"
  },
  {
    "text": "every single system call that's happening on my machine",
    "start": "354720",
    "end": "359440"
  },
  {
    "text": "so i'm going to run the same thing again but this time let's have a look at the bpf system calls that are being",
    "start": "359840",
    "end": "366720"
  },
  {
    "text": "called so i do that with s trace and i'm just going to look for bpf system calls",
    "start": "366720",
    "end": "372200"
  },
  {
    "text": "[Music] and quit it after a few seconds",
    "start": "372200",
    "end": "377840"
  },
  {
    "text": "and the thing that i want to show you is these bpf system calls that are being called so we",
    "start": "377840",
    "end": "384400"
  },
  {
    "text": "see a few map create we see map update element",
    "start": "384400",
    "end": "390080"
  },
  {
    "text": "and we see program load so that tells us something or indicates",
    "start": "390080",
    "end": "396720"
  },
  {
    "text": "something about a couple of concepts we need to know about those are bpf programs and bpf",
    "start": "396720",
    "end": "404160"
  },
  {
    "start": "403000",
    "end": "596000"
  },
  {
    "text": "maps so we use the same call but with the different parameter to manipulate programs and maps",
    "start": "404160",
    "end": "412479"
  },
  {
    "text": "so starting with the programs what are those programs well i mean their programs they run on",
    "start": "413120",
    "end": "418800"
  },
  {
    "text": "the cpu they're essentially machine code instructions",
    "start": "418800",
    "end": "424000"
  },
  {
    "text": "but for bpf we're restricting what we can run",
    "start": "424000",
    "end": "429199"
  },
  {
    "text": "because of that requirement for bpf code to be safe mustn't crash mustn't loop",
    "start": "429199",
    "end": "437039"
  },
  {
    "text": "so we typically write write our ebpf programs in c a restricted",
    "start": "437039",
    "end": "443759"
  },
  {
    "text": "set of c which we don't use any loops we always have to check that a pointer",
    "start": "443759",
    "end": "449199"
  },
  {
    "text": "is not null before we dereference it and then we use the clang compiler to",
    "start": "449199",
    "end": "454880"
  },
  {
    "text": "convert it into an ebpf object a set of bytecode instructions",
    "start": "454880",
    "end": "460000"
  },
  {
    "text": "that are going to get run inside a bpf virtual machine inside the kernel so we're going to",
    "start": "460000",
    "end": "467440"
  },
  {
    "text": "write the kernel code in c we get some helper functions that give",
    "start": "467440",
    "end": "473440"
  },
  {
    "text": "us some useful contextual information so for example we can print debugging",
    "start": "473440",
    "end": "479280"
  },
  {
    "text": "messages with a helper function we can get information about the current",
    "start": "479280",
    "end": "485199"
  },
  {
    "text": "running command that's how bpf trace knows which command is running as we saw in the",
    "start": "485199",
    "end": "490240"
  },
  {
    "text": "previous example lots of those few dozen of these helper functions that can help us with",
    "start": "490240",
    "end": "496639"
  },
  {
    "text": "contextual information the other thing i talked about was maps",
    "start": "496639",
    "end": "502639"
  },
  {
    "text": "or the other thing we saw in our system calls was maps and maps are really how we get information",
    "start": "502639",
    "end": "509759"
  },
  {
    "text": "between our ebpf program running in the kernel and user space we'll come back to a bit",
    "start": "509759",
    "end": "518560"
  },
  {
    "text": "more detail about maps shortly and then the last kind of conceptual",
    "start": "518560",
    "end": "524399"
  },
  {
    "text": "thing we really need to know about is the fact that these programs are",
    "start": "524399",
    "end": "529440"
  },
  {
    "text": "triggered by an event happening we saw an event an example where we",
    "start": "529440",
    "end": "536480"
  },
  {
    "text": "run a program in response to system calls in response to triggering a hook at the",
    "start": "536480",
    "end": "543200"
  },
  {
    "text": "entry to the function called sysenter there are tons of these hooks already",
    "start": "543200",
    "end": "549519"
  },
  {
    "text": "pre-defined essentially every function entry and exit every system call",
    "start": "549519",
    "end": "554800"
  },
  {
    "text": "every trace point in the kernel every time a network packet arrives all of these are possible",
    "start": "554800",
    "end": "561920"
  },
  {
    "text": "points where you can trigger an ebpf program and",
    "start": "561920",
    "end": "567440"
  },
  {
    "text": "we also have the term k probe and u probe the k probe is the entry to a kernel",
    "start": "567440",
    "end": "573839"
  },
  {
    "text": "function okay rep probe is the exit from a kernel function and correspondingly the same for user",
    "start": "573839",
    "end": "580720"
  },
  {
    "text": "space combination of all these different types of events means we can really",
    "start": "580720",
    "end": "586160"
  },
  {
    "text": "run ebpf code in response to pretty much anything that's happening in",
    "start": "586160",
    "end": "592480"
  },
  {
    "text": "your linux machine so how do we attach the program",
    "start": "592480",
    "end": "599680"
  },
  {
    "start": "596000",
    "end": "635000"
  },
  {
    "text": "to an event and again i think it's a little bit helpful to look at the system calls that",
    "start": "599680",
    "end": "605279"
  },
  {
    "text": "are happening uh we're gonna not just use the bpf call but also a couple more system calls",
    "start": "605279",
    "end": "612000"
  },
  {
    "text": "perf event open which sets up a trace point so program load gives us a file",
    "start": "612000",
    "end": "618800"
  },
  {
    "text": "descriptor that i've called x here the trace point comes back as y and then there's an i o control event",
    "start": "618800",
    "end": "625279"
  },
  {
    "text": "that associates the trace point with the program that should be triggered",
    "start": "625279",
    "end": "630399"
  },
  {
    "text": "so again we can take a look at that in our bpf trace example again",
    "start": "630399",
    "end": "637920"
  },
  {
    "start": "635000",
    "end": "699000"
  },
  {
    "text": "if i just trace out those additional system calls to event",
    "start": "637920",
    "end": "645519"
  },
  {
    "text": "oops and event open and let's gel",
    "start": "645519",
    "end": "652000"
  },
  {
    "text": "[Music] and again it doesn't really matter too much exactly what's happening i just really want to show you",
    "start": "652000",
    "end": "657360"
  },
  {
    "text": "this program load bps call that comes back with the file descriptor of nine uh there should be",
    "start": "657360",
    "end": "666320"
  },
  {
    "text": "perf event open yep this perf event open here which comes back with a file descriptor",
    "start": "666320",
    "end": "672560"
  },
  {
    "text": "of eight and then here is the i o controller associates",
    "start": "672560",
    "end": "678720"
  },
  {
    "text": "eight and nine and says this is the bpf program that i want you to run when we hit that trace point so",
    "start": "678720",
    "end": "687360"
  },
  {
    "text": "loading the program and associating the program with the trace point is something we're going to have to do",
    "start": "687360",
    "end": "694000"
  },
  {
    "text": "from user space [Music] okay so",
    "start": "694000",
    "end": "700880"
  },
  {
    "start": "699000",
    "end": "890000"
  },
  {
    "text": "if we want to write hello world in ebpf what do we need to do what do we need to",
    "start": "700880",
    "end": "706800"
  },
  {
    "text": "have in place we know we're going to have to write some c code that's going to run in the",
    "start": "706800",
    "end": "711920"
  },
  {
    "text": "kernel and that's going to get compiled by clang and we're going to have to write some",
    "start": "711920",
    "end": "717040"
  },
  {
    "text": "user space code that gets the tracing the the hello world",
    "start": "717040",
    "end": "722399"
  },
  {
    "text": "message from the kernel and displays it and we can write that at least in theory",
    "start": "722399",
    "end": "729920"
  },
  {
    "text": "we can write it in any language of our choice for",
    "start": "729920",
    "end": "735120"
  },
  {
    "text": "most of us we we don't typically interact with system calls very often when we're writing user space",
    "start": "735120",
    "end": "740880"
  },
  {
    "text": "applications there's usually some level of abstraction and in fact many of us",
    "start": "740880",
    "end": "746160"
  },
  {
    "text": "you know don't even know that system calls exist we don't have to deal with them on a day-to-day basis",
    "start": "746160",
    "end": "752639"
  },
  {
    "text": "for bpf there is uh we would want a library a bpf library",
    "start": "752639",
    "end": "758560"
  },
  {
    "text": "that gives us a higher level of abstraction over those bps system calls",
    "start": "758560",
    "end": "764160"
  },
  {
    "text": "and things like the perf event open that we just saw and the library that i'm going to use",
    "start": "764160",
    "end": "770000"
  },
  {
    "text": "today is called lib bpf go we actually wrote this as part of a tool",
    "start": "770000",
    "end": "777120"
  },
  {
    "text": "called tracy that's an ebpf security event detection tool we're working on and",
    "start": "777120",
    "end": "784240"
  },
  {
    "text": "we we've uh isolated the liberty f wrapper so",
    "start": "784240",
    "end": "791440"
  },
  {
    "text": "there's a c library called lib bpf which is a wrapper for the system calls and lib bpf go is a",
    "start": "791440",
    "end": "799519"
  },
  {
    "text": "pretty thin go wrapper giving us go bindings around those",
    "start": "799519",
    "end": "804639"
  },
  {
    "text": "lid bpf interface so we're going to write some go code",
    "start": "804639",
    "end": "810560"
  },
  {
    "text": "that uses lidl epf go and we're also going to write some c code which we're going to compile",
    "start": "810560",
    "end": "816000"
  },
  {
    "text": "into ebpf objects using the clang compiler and then the go code is going to read",
    "start": "816000",
    "end": "822639"
  },
  {
    "text": "that object file get the contents out insert it into the kernel",
    "start": "822639",
    "end": "828140"
  },
  {
    "text": "[Music] so we have an object file that has the evpf code and the definition of any maps",
    "start": "828140",
    "end": "836079"
  },
  {
    "text": "talk about maps a bit more later we have a user space code that's driving our system calls",
    "start": "836079",
    "end": "844639"
  },
  {
    "text": "and has the kind of logic around what programs we want to run what we want to attach them to",
    "start": "844639",
    "end": "852399"
  },
  {
    "text": "when the user space code calls that bpf program load it sends the",
    "start": "852880",
    "end": "859279"
  },
  {
    "text": "program to the kernel the kernel will verify it make sure that it's safe to run and if",
    "start": "859279",
    "end": "864320"
  },
  {
    "text": "it is it will start running it inside this bpf virtual machine",
    "start": "864320",
    "end": "871839"
  },
  {
    "text": "so we're going to build two objects when we we've got two different",
    "start": "872160",
    "end": "877600"
  },
  {
    "text": "compilation steps we've got to use the go compiler go build to create a go executable",
    "start": "877600",
    "end": "884000"
  },
  {
    "text": "and we're going to use clang to build the bpf object file",
    "start": "884000",
    "end": "889279"
  },
  {
    "text": "all right i think we have enough to actually start writing some code so",
    "start": "889279",
    "end": "896000"
  },
  {
    "start": "890000",
    "end": "898000"
  },
  {
    "text": "let's go to my editor and this is my makefile it's pretty much",
    "start": "896000",
    "end": "901279"
  },
  {
    "start": "898000",
    "end": "1480000"
  },
  {
    "text": "exactly what i just showed you on the slide so we have a go build step and a clang",
    "start": "901279",
    "end": "907279"
  },
  {
    "text": "step for building the ebpf and let's start with the c code so",
    "start": "907279",
    "end": "915839"
  },
  {
    "text": "i'm going to write a function called hello text context pointer they all do",
    "start": "915839",
    "end": "922959"
  },
  {
    "text": "i'm going to just do some hello world tracing so",
    "start": "922959",
    "end": "929360"
  },
  {
    "text": "let's say hello go to here we'll return",
    "start": "929360",
    "end": "937360"
  },
  {
    "text": "zero exit code the other thing i have to do is define",
    "start": "937360",
    "end": "943440"
  },
  {
    "text": "uh object code section this tells",
    "start": "943440",
    "end": "948480"
  },
  {
    "text": "the um essentially the the load the object loader what kind of",
    "start": "948480",
    "end": "955680"
  },
  {
    "text": "bpf program this is going to be this is kind of a level of detail we don't need to worry about",
    "start": "955680",
    "end": "960800"
  },
  {
    "text": "too much today but there you can write you can use different helper functions and do different things",
    "start": "960800",
    "end": "967680"
  },
  {
    "text": "depending on the type of program you're running and the type of event you're attaching it to",
    "start": "967680",
    "end": "973680"
  },
  {
    "text": "so i'm going to attach to a k probe so entry point to a function in a kernel",
    "start": "973680",
    "end": "980560"
  },
  {
    "text": "and i'm actually going to run this whenever the system call exec v gets",
    "start": "980560",
    "end": "987199"
  },
  {
    "text": "triggered so that's my c code and let's compile",
    "start": "987199",
    "end": "993920"
  },
  {
    "text": "that so i'm just going to run the make on my",
    "start": "993920",
    "end": "999120"
  },
  {
    "text": "bpf object file target to start with and that should give me an object file",
    "start": "999120",
    "end": "1006480"
  },
  {
    "text": "that i can look at [Music]",
    "start": "1006480",
    "end": "1013199"
  },
  {
    "text": "and there are a couple of interesting things to look at in this object file so first of all",
    "start": "1013199",
    "end": "1021120"
  },
  {
    "text": "it's a little endian machine i will need that in a moment",
    "start": "1021120",
    "end": "1025839"
  },
  {
    "text": "this object file is designed it's compiled to run in a linux bpf virtual machine we can see",
    "start": "1026559",
    "end": "1034720"
  },
  {
    "text": "here's the section declaration for the fact that it's running as a k probe on sysex exactly",
    "start": "1034720",
    "end": "1043438"
  },
  {
    "text": "and here is the function name so i might say ebpf program a program is",
    "start": "1043439",
    "end": "1049840"
  },
  {
    "text": "really a function so that information from the elf file is",
    "start": "1049840",
    "end": "1055440"
  },
  {
    "text": "what is going to help the go code know how to insert it into",
    "start": "1055440",
    "end": "1062640"
  },
  {
    "text": "the kernel so let's write some cur some go code",
    "start": "1062640",
    "end": "1070000"
  },
  {
    "text": "right i already have a reference to libby pf go here and i have a convenience function uh",
    "start": "1070160",
    "end": "1076480"
  },
  {
    "text": "called must that i'm going to use to trap any errors and panic crash if we see any errors hopefully we",
    "start": "1076480",
    "end": "1083120"
  },
  {
    "text": "won't hit that don't do that in production really bad idea but it'll be fine for demo purposes",
    "start": "1083120",
    "end": "1091840"
  },
  {
    "text": "so the first thing i'm going to do is i'm going to open this file i'm going to do new",
    "start": "1091840",
    "end": "1099120"
  },
  {
    "text": "module from file and reading from that",
    "start": "1099120",
    "end": "1104880"
  },
  {
    "text": "object file that we just built and we want to catch any errors",
    "start": "1104880",
    "end": "1110960"
  },
  {
    "text": "and i'm going to use a defer call i don't know if we have any uh go",
    "start": "1111360",
    "end": "1116799"
  },
  {
    "text": "programmers here um if you're not familiar with with go this this defer keyword may be new to",
    "start": "1116799",
    "end": "1123440"
  },
  {
    "text": "you basically says make sure that on the exit from whatever function we're in run",
    "start": "1123440",
    "end": "1130880"
  },
  {
    "text": "this code in this case i want to make sure that we tidy up and we close our file at the exit from this",
    "start": "1130880",
    "end": "1136720"
  },
  {
    "text": "function and just for fun i'm going to",
    "start": "1136720",
    "end": "1142640"
  },
  {
    "text": "write cleaning up here so that we know when we're exiting from",
    "start": "1142640",
    "end": "1147919"
  },
  {
    "text": "the function so whatever i call after defer will happen after",
    "start": "1147919",
    "end": "1153280"
  },
  {
    "text": "this statement has been printed okay so i've opened my object file",
    "start": "1153280",
    "end": "1161440"
  },
  {
    "text": "and i now need to load that into the kernel and that has to succeed",
    "start": "1161440",
    "end": "1170080"
  },
  {
    "text": "okay now i can i want to get the hello function program",
    "start": "1170080",
    "end": "1177039"
  },
  {
    "text": "and i want to attach it to a k probe so first of all i need to get the program",
    "start": "1177039",
    "end": "1183230"
  },
  {
    "text": "[Music] got a nice need to get that program",
    "start": "1183230",
    "end": "1188720"
  },
  {
    "text": "and we know it's called hello and we need to attach",
    "start": "1188720",
    "end": "1196240"
  },
  {
    "text": "that to [Music]",
    "start": "1196240",
    "end": "1200369"
  },
  {
    "text": "attach key probe",
    "start": "1202640",
    "end": "1207840"
  },
  {
    "text": "so i'm attaching it to yes the p is my program and i'm",
    "start": "1212080",
    "end": "1218640"
  },
  {
    "text": "attaching it to the sit the function call that relates to",
    "start": "1218640",
    "end": "1226480"
  },
  {
    "text": "exec ve now on this particular kernel the function name is this",
    "start": "1226480",
    "end": "1234400"
  },
  {
    "text": "okay and this could return me an error so i need to catch that",
    "start": "1234400",
    "end": "1240960"
  },
  {
    "text": "error okay",
    "start": "1240960",
    "end": "1245279"
  },
  {
    "text": "so i've got my object opened i've got the program from",
    "start": "1247039",
    "end": "1254240"
  },
  {
    "text": "inside that object and i've associated it with the uh exec ve system call",
    "start": "1254240",
    "end": "1262559"
  },
  {
    "text": "the c code is writing uh some tracing information whenever it sees",
    "start": "1262559",
    "end": "1267840"
  },
  {
    "text": "that system call and i need to do something in user space to print it out and there is a convenient",
    "start": "1267840",
    "end": "1276320"
  },
  {
    "text": "function trace there we go trace print now this will basically block and print",
    "start": "1276320",
    "end": "1284000"
  },
  {
    "text": "out whatever it receives from the debug tracing okay so i think we should be able to",
    "start": "1284000",
    "end": "1293120"
  },
  {
    "text": "make this and run it i have to run it as a privileged user",
    "start": "1293120",
    "end": "1298650"
  },
  {
    "text": "[Music] and hooray we have the equivalent of hello world",
    "start": "1298650",
    "end": "1304000"
  },
  {
    "text": "every time exactly is running on this machine we're getting the trace written",
    "start": "1304000",
    "end": "1309440"
  },
  {
    "text": "out [Music] now something didn't happen",
    "start": "1309440",
    "end": "1314960"
  },
  {
    "text": "and that something is we never saw the cleaning up line that i put so",
    "start": "1314960",
    "end": "1321280"
  },
  {
    "text": "remember i've got this here and that's because when i interrupted the program i just",
    "start": "1321280",
    "end": "1327360"
  },
  {
    "text": "interrupted the program and it stopped it in fact it was blocked somewhere in here in trace print",
    "start": "1327360",
    "end": "1332400"
  },
  {
    "text": "and got interacted if i want to clean up properly i'm going to have to catch that",
    "start": "1332400",
    "end": "1338720"
  },
  {
    "text": "interrupt which i can do quite conveniently in go",
    "start": "1338720",
    "end": "1344559"
  },
  {
    "text": "and this is also going to illustrate go channels which we're going to use a bit",
    "start": "1344559",
    "end": "1349919"
  },
  {
    "text": "in a moment so i'm going to make a channel this is a really nice feature of go",
    "start": "1349919",
    "end": "1357760"
  },
  {
    "text": "channels and this channel receives one item at a time and that",
    "start": "1357760",
    "end": "1364000"
  },
  {
    "text": "item is signals from the operating system and i want to be notified",
    "start": "1364000",
    "end": "1371280"
  },
  {
    "text": "whenever there is uh an interrupt signal so that's going to",
    "start": "1371280",
    "end": "1377760"
  },
  {
    "text": "say if someone triggers uh interrupt",
    "start": "1377760",
    "end": "1383360"
  },
  {
    "text": "send a message on this signal channel or actually send the interrupt into the",
    "start": "1383360",
    "end": "1388400"
  },
  {
    "text": "sigma channel and i'm going to block on that here this is",
    "start": "1388400",
    "end": "1393760"
  },
  {
    "text": "essentially wait until you get an event on that signal and then throw it away on that channel",
    "start": "1393760",
    "end": "1400159"
  },
  {
    "text": "and the last thing i need to do is send this blocking function off into its own go routine this is how",
    "start": "1400159",
    "end": "1408159"
  },
  {
    "text": "go handles concurrency this is basically means it's off doing its own thing in another thread so",
    "start": "1408159",
    "end": "1413600"
  },
  {
    "text": "this won't block anymore so i haven't done anything very uh",
    "start": "1413600",
    "end": "1419600"
  },
  {
    "text": "different in terms of ebpf program but it should now run a bit more cleanly in",
    "start": "1419600",
    "end": "1425600"
  },
  {
    "text": "that if i hit control c we now see our cleaning up message",
    "start": "1425600",
    "end": "1431600"
  },
  {
    "text": "and we know that things like my defer function will be executed because it will",
    "start": "1431600",
    "end": "1438799"
  },
  {
    "text": "there's nothing interrupting it before it gets to complete the function",
    "start": "1438799",
    "end": "1444640"
  },
  {
    "text": "all right so that's hello world",
    "start": "1444640",
    "end": "1449840"
  },
  {
    "text": "but it's not terribly useful in particular this print k function is writing data to",
    "start": "1449840",
    "end": "1459039"
  },
  {
    "text": "one well-known pipe location on the machine if i ran any number of epf programs and",
    "start": "1459039",
    "end": "1465679"
  },
  {
    "text": "they all called print k they'd all be writing to the same pipe which is not very useful for anything uh",
    "start": "1465679",
    "end": "1472400"
  },
  {
    "text": "real world so we're going to have to go back and",
    "start": "1472400",
    "end": "1477760"
  },
  {
    "text": "think a bit more about maps so i mentioned before maps of the",
    "start": "1477760",
    "end": "1482880"
  },
  {
    "start": "1480000",
    "end": "1537000"
  },
  {
    "text": "way we can share data between the kernel code and whatever's happening in user space there",
    "start": "1482880",
    "end": "1490320"
  },
  {
    "text": "are lots of different types of map i'm going to use a thing called the perf event array",
    "start": "1490320",
    "end": "1498159"
  },
  {
    "text": "and this is nice uh partly because we can write an arbitrary blob of data",
    "start": "1498159",
    "end": "1505679"
  },
  {
    "text": "so any kind of data we want to write we can write it into this perf event buffer and on the user space",
    "start": "1505679",
    "end": "1513440"
  },
  {
    "text": "side there's a perf buffer implementation that um can receive these data blobs",
    "start": "1513440",
    "end": "1520960"
  },
  {
    "text": "on a go channel so it it's very sort of idiomatic way of receiving data from from the ebpf code",
    "start": "1520960",
    "end": "1531279"
  },
  {
    "text": "right so let's use bpf perf event output so we're going to do that",
    "start": "1531520",
    "end": "1537600"
  },
  {
    "start": "1537000",
    "end": "1915000"
  },
  {
    "text": "here bps event",
    "start": "1537600",
    "end": "1543200"
  },
  {
    "text": "outputs get rid of my tracing call",
    "start": "1543200",
    "end": "1548480"
  },
  {
    "text": "and what does this require this requires context [Music]",
    "start": "1548480",
    "end": "1555039"
  },
  {
    "text": "uh we need a map i'm gonna just call it i'll define it in a second but we'll",
    "start": "1555039",
    "end": "1560400"
  },
  {
    "text": "call it uh gotopia i have to pass a flag that indicates it's the current cpu",
    "start": "1560400",
    "end": "1567520"
  },
  {
    "text": "and i'm gonna pass some data i have to say how big the data is [Music]",
    "start": "1567520",
    "end": "1574080"
  },
  {
    "text": "so let's make things easy let's pass some data uh we'll just pass a value make up a",
    "start": "1574080",
    "end": "1581039"
  },
  {
    "text": "value and pass it so whenever exec ve gets called we're going to pass this value",
    "start": "1581039",
    "end": "1586640"
  },
  {
    "text": "into the perth buffer just remains for me to define the perth buffer here",
    "start": "1586640",
    "end": "1595039"
  },
  {
    "text": "perth output and that is called gotopia",
    "start": "1595039",
    "end": "1601560"
  },
  {
    "text": "[Music] okay and if i",
    "start": "1601560",
    "end": "1606640"
  },
  {
    "text": "were to make that object and have a quick look at it again",
    "start": "1606640",
    "end": "1612660"
  },
  {
    "text": "[Music]",
    "start": "1612660",
    "end": "1619039"
  },
  {
    "text": "read elf [Music] hello [Music]",
    "start": "1619039",
    "end": "1625360"
  },
  {
    "text": "and this time we can see in addition to the function name we've also got an object defined called gotopia that's the",
    "start": "1625360",
    "end": "1632240"
  },
  {
    "text": "the definition of the map that has to exist in the object file okay",
    "start": "1632240",
    "end": "1639360"
  },
  {
    "text": "so the kernel side is writing this data into my perf buffer and i need to",
    "start": "1639360",
    "end": "1647600"
  },
  {
    "text": "read it from the go side so i'm not going to be using trace print",
    "start": "1647600",
    "end": "1652880"
  },
  {
    "text": "anymore but i am going to be using a puff buffer",
    "start": "1652880",
    "end": "1659360"
  },
  {
    "text": "so we'll call it pb [Music]",
    "start": "1659360",
    "end": "1664640"
  },
  {
    "text": "and we in it a puff buffer and it's called gotopia",
    "start": "1664640",
    "end": "1673679"
  },
  {
    "text": "and i need to pass in a channel for the events that we're going to receive i'll define that in a second",
    "start": "1673679",
    "end": "1680480"
  },
  {
    "text": "i'm going to ignore any lost events page size that i know works",
    "start": "1680480",
    "end": "1688320"
  },
  {
    "text": "okay that has to succeed and we have to start oops",
    "start": "1688320",
    "end": "1697279"
  },
  {
    "text": "pb not ps tv uh the perf buffer and when we get to",
    "start": "1697279",
    "end": "1702799"
  },
  {
    "text": "cleaning up we're going to stop it [Music] i need to define this events channel so",
    "start": "1702799",
    "end": "1710980"
  },
  {
    "text": "[Music] we'll make a channel and the",
    "start": "1710980",
    "end": "1716240"
  },
  {
    "text": "type of data that we get from here is a slice of bytes so that's all we need to receive and",
    "start": "1716240",
    "end": "1724000"
  },
  {
    "text": "we'll just say some arbitrary length okay so that's set up the perf buffer we",
    "start": "1724000",
    "end": "1730799"
  },
  {
    "text": "now need to receive these events i'm going to do it in a go routine again",
    "start": "1730799",
    "end": "1739840"
  },
  {
    "text": "which i'll call in line and we're going to loop",
    "start": "1739840",
    "end": "1746880"
  },
  {
    "text": "reading information out of this channel so every time data arrives on",
    "start": "1746880",
    "end": "1753279"
  },
  {
    "text": "that channel it'll get assigned to data and let's print it out",
    "start": "1753279",
    "end": "1761200"
  },
  {
    "text": "i've got something",
    "start": "1761279",
    "end": "1766480"
  },
  {
    "text": "now we know that it's an unsigned 64-bit integer so",
    "start": "1766480",
    "end": "1773360"
  },
  {
    "text": "i can convert my slice of bytes our little endian we saw that all uh",
    "start": "1773360",
    "end": "1781039"
  },
  {
    "text": "us 64 data",
    "start": "1781039",
    "end": "1786480"
  },
  {
    "text": "okay so let's see that builds",
    "start": "1786559",
    "end": "1792398"
  },
  {
    "text": "does and hopefully this time every time exec ve gets called by any",
    "start": "1792840",
    "end": "1799279"
  },
  {
    "text": "process on the machine it's sending us a 64-bit uh integer",
    "start": "1799279",
    "end": "1806960"
  },
  {
    "text": "so we're using this perf buffer but we're not doing anything very useful with that it's just",
    "start": "1806960",
    "end": "1814159"
  },
  {
    "text": "some number that i've decided to pass how about we get some",
    "start": "1814159",
    "end": "1821520"
  },
  {
    "text": "information about the current context like what's the name of the command uh",
    "start": "1821520",
    "end": "1828640"
  },
  {
    "text": "the current command being called that triggered this uh the this is called the executive use",
    "start": "1828640",
    "end": "1835520"
  },
  {
    "text": "this call [Music] so we instead of passing",
    "start": "1835520",
    "end": "1841440"
  },
  {
    "text": "uh numeric data let's make this into",
    "start": "1841440",
    "end": "1848000"
  },
  {
    "text": "some characters again a bit of an arbitrary length",
    "start": "1848640",
    "end": "1853520"
  },
  {
    "text": "size of that data okay so and we write it into the perth",
    "start": "1854399",
    "end": "1860720"
  },
  {
    "text": "buffer in exactly the same way and i just need to change this",
    "start": "1860720",
    "end": "1867360"
  },
  {
    "text": "so that [Applause] [Music] converts my string of bytes",
    "start": "1867360",
    "end": "1874720"
  },
  {
    "text": "up my series of bytes into a string so now i should be able to",
    "start": "1874720",
    "end": "1882960"
  },
  {
    "text": "say that so this time every time",
    "start": "1883440",
    "end": "1890640"
  },
  {
    "text": "execute gets called we should see the name of the command and yeah we can see i happen to",
    "start": "1890640",
    "end": "1897360"
  },
  {
    "text": "have like kubernetes and docker running on this virtual machine so they're spawning quite a few new processes",
    "start": "1897360",
    "end": "1906399"
  },
  {
    "text": "so this is starting to get pretty close to the example we saw",
    "start": "1906399",
    "end": "1913360"
  },
  {
    "text": "with bpf trace if you remember that example well it was summing up a counter",
    "start": "1913360",
    "end": "1921120"
  },
  {
    "start": "1915000",
    "end": "1925000"
  },
  {
    "text": "for each different command so i think that would be pretty easy to implement and go",
    "start": "1921120",
    "end": "1926960"
  },
  {
    "start": "1925000",
    "end": "2088000"
  },
  {
    "text": "let's make",
    "start": "1927039",
    "end": "1932240"
  },
  {
    "text": "so we're going to have a map of the command name which is a string and the counter make",
    "start": "1932240",
    "end": "1940240"
  },
  {
    "text": "some arbitrary size of that and instead of printing out the name of the command",
    "start": "1940240",
    "end": "1947600"
  },
  {
    "text": "we can just increment the counter for that name",
    "start": "1947600",
    "end": "1953760"
  },
  {
    "text": "okay and when we finish we will",
    "start": "1953760",
    "end": "1960799"
  },
  {
    "text": "loop over that counter and print out the results so p and the value from",
    "start": "1960799",
    "end": "1969039"
  },
  {
    "text": "my counter i'll print [Music]",
    "start": "1969039",
    "end": "1974840"
  },
  {
    "text": "out name and the baddie [Music]",
    "start": "1974840",
    "end": "1981039"
  },
  {
    "text": "name and the vani excuse me right have i missed anything there",
    "start": "1981039",
    "end": "1990240"
  },
  {
    "text": "i think that's okay so this is still associated with the exact",
    "start": "1990240",
    "end": "1996000"
  },
  {
    "text": "vehicle let's see if it works so we just run",
    "start": "1996000",
    "end": "2001039"
  },
  {
    "text": "that for a couple of seconds when we interrupt it should print out the counters",
    "start": "2001039",
    "end": "2006480"
  },
  {
    "text": "okay the last thing we need to do",
    "start": "2006480",
    "end": "2012000"
  },
  {
    "text": "is change the attachment point so currently we're attached to a k probe at the entry of exec for e",
    "start": "2012000",
    "end": "2019519"
  },
  {
    "text": "i'm going to change it so that it's associated with a trace point for sys enter and as i mentioned before",
    "start": "2019519",
    "end": "2025679"
  },
  {
    "text": "sysenter gets called every time any system call is is invoked so i need to change that in",
    "start": "2025679",
    "end": "2034159"
  },
  {
    "text": "two places i need to change the section declaration here so this becomes raw trace point",
    "start": "2034159",
    "end": "2042060"
  },
  {
    "text": "[Music] enter and i need to change where we",
    "start": "2042060",
    "end": "2048240"
  },
  {
    "text": "attached it here a raw trace point",
    "start": "2048240",
    "end": "2055200"
  },
  {
    "text": "called this enter",
    "start": "2055200",
    "end": "2060638"
  },
  {
    "text": "and with a bit of luck this is going to recreate",
    "start": "2060639",
    "end": "2067520"
  },
  {
    "text": "that vps script so we'll just run it for a few seconds",
    "start": "2067520",
    "end": "2073118"
  },
  {
    "text": "and then when we interrupt it we should see a counter and there's those counters to tell us",
    "start": "2073119",
    "end": "2079200"
  },
  {
    "text": "how many system calls have been invoked by each of those different commands",
    "start": "2079200",
    "end": "2086158"
  },
  {
    "text": "so we've recreated that bpf trace command we've done it in just under 60 lines of",
    "start": "2086839",
    "end": "2095520"
  },
  {
    "start": "2088000",
    "end": "2154000"
  },
  {
    "text": "go code and a handful of c lines of c",
    "start": "2095520",
    "end": "2102160"
  },
  {
    "text": "i hope that's given an illustration of the kind of things you could do now obviously you can attach to many",
    "start": "2102160",
    "end": "2110000"
  },
  {
    "text": "different trace points i've only slightly scratched the surface of the things that you can do",
    "start": "2110000",
    "end": "2116240"
  },
  {
    "text": "with bpf helper functions and all the different range of contextual information you could then",
    "start": "2116240",
    "end": "2122640"
  },
  {
    "text": "observe and manipulate and pass up to user space",
    "start": "2122640",
    "end": "2128400"
  },
  {
    "text": "i've had to gloss over lots and lots of details in the interest of time but the code that i've written is",
    "start": "2128400",
    "end": "2134880"
  },
  {
    "text": "available on github and i'm really hoping that you have some questions for me",
    "start": "2134880",
    "end": "2145839"
  },
  {
    "text": "you",
    "start": "2153359",
    "end": "2155440"
  }
]