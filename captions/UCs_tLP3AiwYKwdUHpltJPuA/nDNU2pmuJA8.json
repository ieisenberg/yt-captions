[
  {
    "start": "0",
    "end": "270000"
  },
  {
    "text": "so yeah this talk is called the front architecture Revolution",
    "start": "240",
    "end": "5359"
  },
  {
    "text": "um yeah let's get started uh so I a little bit about myself uh I work at",
    "start": "5359",
    "end": "11599"
  },
  {
    "text": "cognitech now a software engineer there uh cognitech is consultancy uh we Steed",
    "start": "11599",
    "end": "18840"
  },
  {
    "text": "a programming language called closure which is now not a young programming language it's 8 years old it's a list",
    "start": "18840",
    "end": "24960"
  },
  {
    "text": "that runs on the jbm with emphasis on concurrency through immutability",
    "start": "24960",
    "end": "30880"
  },
  {
    "text": "uh if you hav to try and finger out definitely recommend it it's pretty cool",
    "start": "30880",
    "end": "35920"
  },
  {
    "text": "solid interesting technology we also work on something called uh datomic datomic is our one product it's an a",
    "start": "35920",
    "end": "42480"
  },
  {
    "text": "mutable database so it takes the ideas um so closure sort of help",
    "start": "42480",
    "end": "49399"
  },
  {
    "text": "popularize high performance persistent data structures amable data structures that have good performance",
    "start": "49399",
    "end": "55079"
  },
  {
    "text": "characteristics good enough for writing many kinds of programs and so they uh these IDE were taken and sort of taken",
    "start": "55079",
    "end": "61440"
  },
  {
    "text": "into um the database context so we uh basically build persistent and",
    "start": "61440",
    "end": "68520"
  },
  {
    "text": "persistent on dis persistent data on dis and it's a relational database so it's",
    "start": "68520",
    "end": "73880"
  },
  {
    "text": "not an SQL database um again I highly recommend checking it out uh it's",
    "start": "73880",
    "end": "79240"
  },
  {
    "text": "definitely pretty unique if you're familiar with Git uh you know the way that git works is it's very similar G",
    "start": "79240",
    "end": "85200"
  },
  {
    "text": "has a you know a version of your um your Source tree and when you change change something it does not record Deltas",
    "start": "85200",
    "end": "91920"
  },
  {
    "text": "right git simply has pointers to all your blobs that represent your files when you change one file it points to a",
    "start": "91920",
    "end": "99360"
  },
  {
    "text": "new reference for that changed blob but all the pointers all the other blobs in your Source don't change so uh the",
    "start": "99360",
    "end": "107000"
  },
  {
    "text": "atomic takes this as it's basically its storage mechanism it stores these basically these large Blobs of data and",
    "start": "107000",
    "end": "113439"
  },
  {
    "text": "then it gives you relational varies over that information cool stuff and it'll come",
    "start": "113439",
    "end": "118880"
  },
  {
    "text": "back later in the talk uh so that's what I'm doing today but prior to working at cognitech I worked",
    "start": "118880",
    "end": "125399"
  },
  {
    "text": "uh for nearly a decade doing JavaScript programming on the front end I was at the New York Times for four years I was",
    "start": "125399",
    "end": "131080"
  },
  {
    "text": "lucky enough to work on the um the 2012 Presidential election uh in 4 hours we",
    "start": "131080",
    "end": "136879"
  },
  {
    "text": "got 40 million page views uh 20 million of them were on mobile uh a lot of the",
    "start": "136879",
    "end": "143200"
  },
  {
    "text": "app was just you know serving up a real time is Json about 4 hours we sered 18",
    "start": "143200",
    "end": "150319"
  },
  {
    "text": "terab of Json so this was a lot of fun I got to I got to work on UI you know UI at scale",
    "start": "150319",
    "end": "157640"
  },
  {
    "text": "you know drawing upon again a long bit of experience with doing UI development",
    "start": "157640",
    "end": "162720"
  },
  {
    "text": "in a lot of context with definitely a lot of it was doing JavaScript uh sadly at the end at the end of my tenure at",
    "start": "162720",
    "end": "169440"
  },
  {
    "text": "the New York Times as sophisticated and as beautiful as it was it was really combining your",
    "start": "169440",
    "end": "174720"
  },
  {
    "text": "visualization U you know good solid op programming style uh at the end the end",
    "start": "174720",
    "end": "180000"
  },
  {
    "text": "of the day I still felt that you know JavaScript programming is still true today regardless of all these Frameworks",
    "start": "180000",
    "end": "186799"
  },
  {
    "text": "that you see um it's still I would say a priority of suit we're still sort of in",
    "start": "186799",
    "end": "192360"
  },
  {
    "text": "the Dark Ages uh of client side programing and a lot of this is because people have not yet fully accepted the",
    "start": "192360",
    "end": "199360"
  },
  {
    "text": "fact uh that most people that are writing web applications are distributed systems programmers and most of the",
    "start": "199360",
    "end": "205920"
  },
  {
    "text": "technology you're picking and the way you're combining them together uh does not want to deal with that this is a",
    "start": "205920",
    "end": "211120"
  },
  {
    "text": "fundamental issue with the types of D build most of the complexity arises from the fact that",
    "start": "211120",
    "end": "217480"
  },
  {
    "text": "people try to put this under the rug instead of facing and so a lot of this talk is is",
    "start": "217480",
    "end": "224760"
  },
  {
    "text": "actually saying let's take this problem head on and start removing all this complexity uh that exists in most Stacks",
    "start": "224760",
    "end": "232560"
  },
  {
    "text": "really this is really all Stacks a lot of changes coming so Simplicity the the whole point is that",
    "start": "232560",
    "end": "239159"
  },
  {
    "text": "by by actually embracing Simplicity uh we can build simpler systems and by Simplicity I don't mean something that's",
    "start": "239159",
    "end": "245120"
  },
  {
    "text": "going to make your life necessarily easier in the beginning you may have to adopt practices and technologies that",
    "start": "245120",
    "end": "251159"
  },
  {
    "text": "are extremely unfamiliar and there may be growing pain but on the other side of that um I guarantee you you will have a",
    "start": "251159",
    "end": "257400"
  },
  {
    "text": "simpler system at the end I think when you get to the end of the talk you will see what I'm talking about you'll notice",
    "start": "257400",
    "end": "263320"
  },
  {
    "text": "that there's probably a lot of pain points that you've experienced building your applications uh that some of the solutions I I'm talking about when",
    "start": "263320",
    "end": "269479"
  },
  {
    "text": "remove um when I talk about Simplicity you know um I really like this metaphor I",
    "start": "269479",
    "end": "275360"
  },
  {
    "start": "270000",
    "end": "554000"
  },
  {
    "text": "recently saw this awesome uh special on Nova about the cathedral Florence this",
    "start": "275360",
    "end": "280880"
  },
  {
    "text": "was uh the Dome I think for like more than 100 years the cathedral Florence didn't have a dome sort of an",
    "start": "280880",
    "end": "287800"
  },
  {
    "text": "embarrassment part of the problem was that the dimensions of the cathedral were so large that they did not know how",
    "start": "287800",
    "end": "293120"
  },
  {
    "text": "to construct a dome right the actual the base of the Dome was so huge there were no doents about how been",
    "start": "293120",
    "end": "300479"
  },
  {
    "text": "done the task like they have seen domes this large but there was no living architect that knew how to construct",
    "start": "300479",
    "end": "306759"
  },
  {
    "text": "such a thing so Brun leki ended up winning the competition and he ended up building it and my favorite thing about",
    "start": "306759",
    "end": "313039"
  },
  {
    "text": "this is that to me this really relats to software architecture often when people see something beautiful and big like",
    "start": "313039",
    "end": "318199"
  },
  {
    "text": "this they think it must have been like you know the most complicated engine the most sophisticated engineering what have",
    "start": "318199",
    "end": "324400"
  },
  {
    "text": "been uh put into play to make this work and it's just not true so if I highly",
    "start": "324400",
    "end": "330400"
  },
  {
    "text": "recommend looking at this documentary and reading about breski breski ended up um because the Dome was so large they",
    "start": "330400",
    "end": "336280"
  },
  {
    "text": "could not use the traditional method of a wooden infrastructure to hold up the Dome as they built it they would have to",
    "start": "336280",
    "end": "341759"
  },
  {
    "text": "construct the entire Dome without any underlying wooden support and this this",
    "start": "341759",
    "end": "346919"
  },
  {
    "text": "was the huge huge conundrum Brun breski actually ended up taking a common brick",
    "start": "346919",
    "end": "352639"
  },
  {
    "text": "layer technique that was well known it's just the most a the people who built these little bits right he used the same",
    "start": "352639",
    "end": "359080"
  },
  {
    "text": "technique that was known to a brick layer it's called um the Herring bone technique and it's just this sort of uh",
    "start": "359080",
    "end": "365720"
  },
  {
    "text": "stacking of the bricks in such a way uh that the bricks are supporting um as you build it up the bricks are actually",
    "start": "365720",
    "end": "372160"
  },
  {
    "text": "supporting each other if you do it in the traditional where where you stack bricks um just like this it will tear it",
    "start": "372160",
    "end": "378199"
  },
  {
    "text": "will tear it's by using the her hering bone technique uh that that the bricks would not tear they laid down 4 million",
    "start": "378199",
    "end": "385639"
  },
  {
    "text": "bricks so and the D still stands today 4 million bricks were Place uh using a",
    "start": "385639",
    "end": "391240"
  },
  {
    "text": "technique known to Common uh so to me simp simple systems have this property",
    "start": "391240",
    "end": "397319"
  },
  {
    "text": "it might not be obvious how to accomplish it and it may even take somebody with some deep Insight but",
    "start": "397319",
    "end": "402680"
  },
  {
    "text": "often I think there's the case that the solution is uh the right solution is often the",
    "start": "402680",
    "end": "408440"
  },
  {
    "text": "simple okay uh so how does this relate to software technology more concretely so I I came out with a blog post a blog",
    "start": "408440",
    "end": "415280"
  },
  {
    "text": "post about 18 months ago um about react versus is more traditional NBCS it",
    "start": "415280",
    "end": "422080"
  },
  {
    "text": "caused quite a s it's probably the most popular blot place ever wrote um something that really caught people's",
    "start": "422080",
    "end": "428080"
  },
  {
    "text": "eye was on the top was um a naive uh version of react rendering like 500 so",
    "start": "428080",
    "end": "435199"
  },
  {
    "text": "to-do item or something and the bottom was a naive backbone approach and so what's",
    "start": "435199",
    "end": "441960"
  },
  {
    "text": "beautiful is that is that react uses something that's that's it's very simple a very simple diing approach and a",
    "start": "441960",
    "end": "447840"
  },
  {
    "text": "batching approach which is well it's well known this technique is was well known to computer Graphics programmers",
    "start": "447840",
    "end": "454800"
  },
  {
    "text": "and and backbone is doing the naive thing in which is just talking to the Dom uh and you end up getting a really",
    "start": "454800",
    "end": "460080"
  },
  {
    "text": "you get a lot of turn in the Dom and slow I mean I think at least four times faster Rea faster it was also faster on",
    "start": "460080",
    "end": "468159"
  },
  {
    "text": "the top because I decided to use um immutable data structures to drive the",
    "start": "468159",
    "end": "473919"
  },
  {
    "text": "dipping uh and so it's completely unintuitive right in the same way that a common brick player technique could",
    "start": "473919",
    "end": "480680"
  },
  {
    "text": "could allow you to place 4 million bricks uh I'm at the top I'm using a compiled language in this case closure",
    "start": "480680",
    "end": "486440"
  },
  {
    "text": "script I'm using a mutable data structures which you know are going to be slower mutable ones and I'm using a",
    "start": "486440",
    "end": "491919"
  },
  {
    "text": "diffing algorithm which sounds like conceptually must be slower than just mutating the dump uh and it's just not",
    "start": "491919",
    "end": "498800"
  },
  {
    "text": "true these these things combined completely blew away um back and backb like application",
    "start": "498800",
    "end": "506560"
  },
  {
    "text": "Technologies I mean this includes Ember this includes angul they all suffer from this problem so let's dig into this a",
    "start": "506560",
    "end": "513240"
  },
  {
    "text": "bit more uh so the big ideas that I would like people to take away is we're going to talk about a lot of different",
    "start": "513240",
    "end": "518518"
  },
  {
    "text": "Technologies but the reason I pick certain Technologies is because I think these Technologies actually have simple properties the great thing is that if",
    "start": "518519",
    "end": "525080"
  },
  {
    "text": "you embra Simplicity it actually does scale right so at the top even though",
    "start": "525080",
    "end": "530720"
  },
  {
    "text": "they might they may be technology' never heard of at its core that the stuff at the top that make that makes the top",
    "start": "530720",
    "end": "536880"
  },
  {
    "text": "graph work is semantically simpler stuff right Simplicity scales and if you have",
    "start": "536880",
    "end": "543519"
  },
  {
    "text": "pervasive pervasive Simplicity it permits more opportunity for Global optimization",
    "start": "543519",
    "end": "551279"
  },
  {
    "start": "554000",
    "end": "618000"
  },
  {
    "text": "sorry uh pervasive Simplicity permits more opportunity for Global optimization so that's also an aspect of that first",
    "start": "555120",
    "end": "562320"
  },
  {
    "text": "flame graph um that's actually Global optimization in order in order to make you could make the backbone app faster",
    "start": "562320",
    "end": "569120"
  },
  {
    "text": "but you'd have to go into the view and manually do batching logic you'd have to manually fix and micro optimize your",
    "start": "569120",
    "end": "575360"
  },
  {
    "text": "code uh and to me if you Embrace Simplicity you can often uh get Global optimization so it's not this you know",
    "start": "575360",
    "end": "582959"
  },
  {
    "text": "10 developers trying to find all the bottlenecks you can just fix the bottleneck in one place and you're done go home",
    "start": "582959",
    "end": "588680"
  },
  {
    "text": "early uh question designs tools processes that don't lead to Global optimization I think most uh most of the",
    "start": "588680",
    "end": "595640"
  },
  {
    "text": "tooling around client apps do not lend themselves towards global optimization fundamentally flawed stuff uh and and",
    "start": "595640",
    "end": "603320"
  },
  {
    "text": "also you might think you might think at the back of your head maybe Global optimization is that odds with modularity you often want to keep things",
    "start": "603320",
    "end": "610800"
  },
  {
    "text": "um distinct things separate separation of concerns but Global optimization is not always at odds with uh modularity uh",
    "start": "610800",
    "end": "618040"
  },
  {
    "start": "618000",
    "end": "654000"
  },
  {
    "text": "garbage collection is a great example of something it's a global Service to uh the programming language runtime and it",
    "start": "618040",
    "end": "624560"
  },
  {
    "text": "that's what permits programs to be more modular right just so it's not like an A C program you freeze some pointer and",
    "start": "624560",
    "end": "630959"
  },
  {
    "text": "that blows up something you know a mile away right it's it's it's specifically a",
    "start": "630959",
    "end": "636120"
  },
  {
    "text": "global optimization that permits your program to be more modular okay so let's talk about one",
    "start": "636120",
    "end": "642160"
  },
  {
    "text": "possible stack uh mentally for anything any any element of the stack that I talk about you can replace it with something",
    "start": "642160",
    "end": "649000"
  },
  {
    "text": "that is better for your team or something that um might be easier for you to adopt there are many reasons why",
    "start": "649000",
    "end": "654240"
  },
  {
    "start": "654000",
    "end": "784000"
  },
  {
    "text": "that might be true I'm going to talk about the stack that I'm familiar with uh and I'm going to describe the property that I think are important uh",
    "start": "654240",
    "end": "661160"
  },
  {
    "text": "if you don't want to adopt that te technology for some reason find something comparable there are comparable things out there and I will I",
    "start": "661160",
    "end": "667360"
  },
  {
    "text": "will talk about comparable things uh that are that are have the same properties that aren't the ones",
    "start": "667360",
    "end": "673079"
  },
  {
    "text": "that I picked so react and relay at the bottom so react I think is great um there are very interesting other diffing",
    "start": "673079",
    "end": "679560"
  },
  {
    "text": "Solutions coming out that are worthy of assessment but react is very well maintained it's very popular large",
    "start": "679560",
    "end": "684839"
  },
  {
    "text": "community uh we'll talk a little about relay which is as of yet unreleased but I think is good design um I uh use",
    "start": "684839",
    "end": "692399"
  },
  {
    "text": "closure script I actually the lead developer on closure script uh closure script is is great not because I mean it",
    "start": "692399",
    "end": "698680"
  },
  {
    "text": "is great because I I like happen to like lisp but the great thing about closure script is that it ships with persistent data structures uh they've been tuned",
    "start": "698680",
    "end": "705440"
  },
  {
    "text": "continuously for modern JavaScript engines now for almost four years and so that's what we get out of the box",
    "start": "705440",
    "end": "711360"
  },
  {
    "text": "immutable data structures that are uh battle tested uh another thing is Transit so the moment that you decide",
    "start": "711360",
    "end": "717680"
  },
  {
    "text": "that you want richer data structures than JavaScript objects you need a way to transport this stuff from the server",
    "start": "717680",
    "end": "723839"
  },
  {
    "text": "to the client so at cognitech we created something called Transit which is available in Java python Ruby uh you can",
    "start": "723839",
    "end": "730399"
  },
  {
    "text": "use it from Scala you can use it from closure script closure um quite a few languages there are Community versions",
    "start": "730399",
    "end": "735760"
  },
  {
    "text": "and for erlang o camel um but but the the problem we're trying to solve is that we want to move um different types",
    "start": "735760",
    "end": "742399"
  },
  {
    "text": "of information than what Jason provides Jason only lets you do arrays strings uh",
    "start": "742399",
    "end": "747800"
  },
  {
    "text": "Maps um numbers that's it uh Boolean uh",
    "start": "747800",
    "end": "752959"
  },
  {
    "text": "you might want to move in a mutable data structure and Transit lets you do this efficiently uh at the back end you can",
    "start": "752959",
    "end": "758760"
  },
  {
    "text": "have there's lots of solutions uh the the ones the big ones that we're talking about today that could be relay which is",
    "start": "758760",
    "end": "763920"
  },
  {
    "text": "Facebook's as of yet unrelease thing but remember relay is an idea as much as it is a specific piece of technology",
    "start": "763920",
    "end": "770920"
  },
  {
    "text": "datomic will let you do the sort of things I'm talking about on the back end directly against the database uh uh",
    "start": "770920",
    "end": "776800"
  },
  {
    "text": "Netflix has something that's going to come out soon as well which I'm going to talk about called falor uh sljs graph",
    "start": "776800",
    "end": "784399"
  },
  {
    "start": "784000",
    "end": "796000"
  },
  {
    "text": "okay so the big idea here is we want us for for at least for my perspective is that your technology stack should",
    "start": "784399",
    "end": "789839"
  },
  {
    "text": "support immutability at every layer and so that's definitely a huge uh focus in",
    "start": "789839",
    "end": "796040"
  },
  {
    "start": "796000",
    "end": "886000"
  },
  {
    "text": "in this talk at least the benefits uh by by picking a stack where you've got immutability at every level and you're",
    "start": "796040",
    "end": "801880"
  },
  {
    "text": "trying to you're really thinking about how does data move how is immutable data going to move all the way from the back",
    "start": "801880",
    "end": "807480"
  },
  {
    "text": "end to the front end is that it's going to enable simpler reasoning and if you if you have simpler reasoning there lot",
    "start": "807480",
    "end": "812680"
  },
  {
    "text": "lots of times what happens in in the systems that people build today is that you have hundreds of components uh you",
    "start": "812680",
    "end": "818639"
  },
  {
    "text": "don't know how they're connected you don't know how your vent graphs are connected and in fact you're struggling to just fix bugs you're not you're not",
    "start": "818639",
    "end": "825240"
  },
  {
    "text": "thinking about features you're not thinking about enhancements right you have so many bugs to fix in the complex system that you have that you're never",
    "start": "825240",
    "end": "831839"
  },
  {
    "text": "going to get to the point of having a wider or deeper reasoning about your system and by embracing IMM immutability",
    "start": "831839",
    "end": "838639"
  },
  {
    "text": "and also by embracing the react simpler approach of of it's not it's no it's one-way data binding no two-way data",
    "start": "838639",
    "end": "845240"
  },
  {
    "text": "binding by eliminating these ridiculous event graphs um you're going to get a lot of reasoning power at the other side",
    "start": "845240",
    "end": "851160"
  },
  {
    "text": "of that um and by by getting more reasoning power it means you're going to be more agile you're not solving",
    "start": "851160",
    "end": "856839"
  },
  {
    "text": "incidental complexity uh later we'll talk about how actually this stat can also remove needless coordination um",
    "start": "856839",
    "end": "864839"
  },
  {
    "text": "towards the end of the talk I mean there's a huge problem with uh applications front end applic that need to conform to a rest design uh",
    "start": "864839",
    "end": "872279"
  },
  {
    "text": "which requires a lot of coordination between what the front end Dev needs and what the backend devs needs uh and",
    "start": "872279",
    "end": "878839"
  },
  {
    "text": "finally if I think if you have a stack that looks like this this whole performance thing is not quite as",
    "start": "878839",
    "end": "884600"
  },
  {
    "text": "challenging as it normally would be so the client layer uh so why not backbone",
    "start": "884600",
    "end": "889800"
  },
  {
    "start": "886000",
    "end": "901000"
  },
  {
    "text": "so some of you may use backbone why why why not backbone doesn't backbone solve this problem or solve this problem um I",
    "start": "889800",
    "end": "896560"
  },
  {
    "text": "mean the earlier slide says probably not uh but but there's a specific reason why not or or Ember and these are all fine",
    "start": "896560",
    "end": "902440"
  },
  {
    "text": "Technologies and nothing I'm actually saying says you can't be effective with it effective with these things right people are being effective with backbone",
    "start": "902440",
    "end": "909720"
  },
  {
    "text": "and Ember and so on right but the point is how much of your complexity budget have you spent and have you spent so",
    "start": "909720",
    "end": "916320"
  },
  {
    "text": "much that you're not going to get to the goal that you want to get to so Ember similar suffers from similar issues",
    "start": "916320",
    "end": "922120"
  },
  {
    "text": "angular does as well uh and from my perspective really really what's wrong with these systems is that um there's no",
    "start": "922120",
    "end": "928240"
  },
  {
    "text": "support for anything except for mutable data structures right you can only build a backbone app on top of um mutable data",
    "start": "928240",
    "end": "935920"
  },
  {
    "text": "structures this is this true for Ember this is true for angular and and actually finally people are accepting",
    "start": "935920",
    "end": "941240"
  },
  {
    "text": "the fact that it's actually a performance problem and also a reasoning problem angular 2 is going to actually",
    "start": "941240",
    "end": "946279"
  },
  {
    "text": "have first class support for immutable data structures so the things I'm saying up here are things that other Frameworks",
    "start": "946279",
    "end": "952240"
  },
  {
    "text": "are are realizing this was the wrong design right we baked in a requirement that we have to use uh IM data",
    "start": "952240",
    "end": "959279"
  },
  {
    "text": "structures and this is I think in the next 10 years is just going to die if your framework doesn't support immutability it's probably not going to",
    "start": "959279",
    "end": "965440"
  },
  {
    "text": "be uh used very much uh so react react react got out the door they were the very first framework",
    "start": "965440",
    "end": "971720"
  },
  {
    "start": "968000",
    "end": "1018000"
  },
  {
    "text": "JavaScript framework I mean there are a lot of other interesting properties about that system but the most important one was they did not make any",
    "start": "971720",
    "end": "977759"
  },
  {
    "text": "assumptions about what your model looked like your model could be immutable uh and their rendering works just fine for",
    "start": "977759",
    "end": "984959"
  },
  {
    "text": "me this was like a revelation uh so closure script was interesting uh prior prior to the arrival of react but it",
    "start": "984959",
    "end": "991319"
  },
  {
    "text": "really was more of a curiosity it had no uh truly measurable benefit and when",
    "start": "991319",
    "end": "996639"
  },
  {
    "text": "react came along it was perfectly natural to combine immutable imut immutable data structures with react and",
    "start": "996639",
    "end": "1003480"
  },
  {
    "text": "it was great um again uh the actual that flame graph the react flame graph that I sh showed earlier um that's actually",
    "start": "1003480",
    "end": "1010360"
  },
  {
    "text": "faster than the exact same react program with mutable JavaScript data structures",
    "start": "1010360",
    "end": "1015800"
  },
  {
    "text": "it's faster with immutability okay uh so if one one huge takeaway back",
    "start": "1015800",
    "end": "1022680"
  },
  {
    "start": "1018000",
    "end": "1057000"
  },
  {
    "text": "to Simplicity is that you know a lot of people think that that algorithms matter and I think for most of this talk that's",
    "start": "1022680",
    "end": "1028160"
  },
  {
    "text": "just not true uh data dominates um a lot of the benefits that we're going to talk about come just fall out of data uh Rob",
    "start": "1028160",
    "end": "1035438"
  },
  {
    "text": "Pike has a great quote This is actually about C programming he says data dominates if you've chosen the right data structures and organized things",
    "start": "1035439",
    "end": "1042199"
  },
  {
    "text": "well the algorithms will always be self-evident data structures not algorithms are Central to programming",
    "start": "1042199",
    "end": "1048240"
  },
  {
    "text": "almost everything I'm talking about is by picking the right data structure and moving data around simple data around uh",
    "start": "1048240",
    "end": "1054240"
  },
  {
    "text": "you're going to get a lot of value out of that uh so I don't have time to dig into persistent data structures I've",
    "start": "1054240",
    "end": "1059960"
  },
  {
    "start": "1057000",
    "end": "1084000"
  },
  {
    "text": "talked about them in the past you can find my talks about this as well as uh Rich he has great talks about this um",
    "start": "1059960",
    "end": "1066240"
  },
  {
    "text": "Lee Byron from Facebook as he's actually the lead maintainer of something called immutablejs so Facebook itself is",
    "start": "1066240",
    "end": "1072600"
  },
  {
    "text": "actually doubling down on their own immutable data structure Library um there's a great talk from react comp um",
    "start": "1072600",
    "end": "1079320"
  },
  {
    "text": "that he gives on how immutablejs works it's awesome okay so what is it what is it",
    "start": "1079320",
    "end": "1086480"
  },
  {
    "text": "what is it get you so this is I love showing this one this is one I showed almost every talk I I I sort of said",
    "start": "1086480",
    "end": "1092679"
  },
  {
    "text": "when I released um my this Library called om which is a version which is sort of a binding of closure script to",
    "start": "1092679",
    "end": "1098600"
  },
  {
    "text": "react and I said I bet you can do um State Management undo trivially so",
    "start": "1098600",
    "end": "1104520"
  },
  {
    "text": "something that would normally require a programmer to spend a lot of time and a lot of thought I think you could probably do this in you know 5 10 lines",
    "start": "1104520",
    "end": "1111600"
  },
  {
    "text": "definitely for to-do MBC in fact I showed you could do it in 5 10 lines for to-do MBC so this Gentleman Jack shadler",
    "start": "1111600",
    "end": "1118200"
  },
  {
    "text": "from Ableton Live he's a C++ UI programmer took me up on this challenge he had never used closure script he",
    "start": "1118200",
    "end": "1123840"
  },
  {
    "text": "learned closure script in two weeks he said I'm going to build a canvas editor pixel pixel graphics editor and I want",
    "start": "1123840",
    "end": "1130039"
  },
  {
    "text": "to see how hard it will be to have effectively infinite undo redo as well as uh playback of my application State",
    "start": "1130039",
    "end": "1137679"
  },
  {
    "text": "um and as as well as exporting to an animated gif so he spent about a month um at the end he came out with this this",
    "start": "1137679",
    "end": "1143960"
  },
  {
    "text": "is a non-trivial application it's about 2,000 lines of closure script uh and then how many of these lines out of",
    "start": "1143960",
    "end": "1150039"
  },
  {
    "text": "2,000 lines it's a complex app um how many of those lines were about um State",
    "start": "1150039",
    "end": "1155200"
  },
  {
    "text": "Management and doing undo and redo this is the this is all the code this is all the code for infinite undo",
    "start": "1155200",
    "end": "1162440"
  },
  {
    "start": "1158000",
    "end": "1197000"
  },
  {
    "text": "infinite redo uh export animated gif as well as the live scrubbing of the",
    "start": "1162440",
    "end": "1167559"
  },
  {
    "text": "preview it's 60 lines of code there's nothing else there's nothing else here most of the functionality um is two or",
    "start": "1167559",
    "end": "1174280"
  },
  {
    "text": "three lines of code per function uh and it's because he just picked the right data structure right persistent data",
    "start": "1174280",
    "end": "1180440"
  },
  {
    "text": "structure just gave him what he wanted there was no there was no code for him to write uh so there are more examples",
    "start": "1180440",
    "end": "1187520"
  },
  {
    "text": "like this coming out and again people are again if you don't want to use closure script people are are taking immutablejs they're paying it with react",
    "start": "1187520",
    "end": "1194880"
  },
  {
    "text": "and they're coming to the same conclusions okay so which language again I've already said that I pick closure",
    "start": "1194880",
    "end": "1200880"
  },
  {
    "start": "1197000",
    "end": "1202000"
  },
  {
    "text": "script there but there are a lot of compelling options these days that's another thing that's really changing on the front end it used to be that",
    "start": "1200880",
    "end": "1206880"
  },
  {
    "start": "1202000",
    "end": "1299000"
  },
  {
    "text": "JavaScript was the only game in town right it really was uh and that's just no longer true anymore typescript is",
    "start": "1206880",
    "end": "1212760"
  },
  {
    "text": "very cool people love typescript because it has great integration with Visual Studio it's an awesome solution Elm is",
    "start": "1212760",
    "end": "1218480"
  },
  {
    "text": "very interesting it's sort of bringing uh Advanced sort of functional programming to the browser and a really",
    "start": "1218480",
    "end": "1223640"
  },
  {
    "text": "cool event handling model Dart which has a is a custom VM but also has great",
    "start": "1223640",
    "end": "1228679"
  },
  {
    "text": "compilation of JavaScript is also really cool um Scola now has uh a really great",
    "start": "1228679",
    "end": "1235080"
  },
  {
    "text": "compil to JavaScript solution Scola JS they it's now considered production ready by typ safe one of the oldest ones",
    "start": "1235080",
    "end": "1241120"
  },
  {
    "text": "is coffee script coffee script I think got released and a lot of a lot of people didn't like it but then plenty of people did in some sense Coffey script",
    "start": "1241120",
    "end": "1248240"
  },
  {
    "text": "validated that compiling a JavaScript is not a bad idea uh what's funny is now with the release of ecmascript 2015",
    "start": "1248240",
    "end": "1256440"
  },
  {
    "text": "which I think was the final jft specification was a couple weeks ago um JavaScript people are compiling to",
    "start": "1256440",
    "end": "1263200"
  },
  {
    "text": "JavaScript right people want to have sugar they want the the shorthand Lambda",
    "start": "1263200",
    "end": "1268480"
  },
  {
    "text": "they want sugar for for um uh classes they want annotations on classes and on",
    "start": "1268480",
    "end": "1274320"
  },
  {
    "text": "their methods right this is all stuff that they cannot get from JavaScript today if you want that stuff because you",
    "start": "1274320",
    "end": "1279840"
  },
  {
    "text": "want to be able to write programs without you know uh being stuck in the guts of like the old version of",
    "start": "1279840",
    "end": "1286320"
  },
  {
    "text": "JavaScript people are embracing uh uh things like Babel which is Javascript",
    "start": "1286320",
    "end": "1291799"
  },
  {
    "text": "to JavaScript compilation so everybody's me compiling JavaScript even people that use",
    "start": "1291799",
    "end": "1296840"
  },
  {
    "text": "JavaScript this is not going to be a crazy thing uh so the thing I'm most familiar with though is closure script",
    "start": "1296840",
    "end": "1303240"
  },
  {
    "start": "1299000",
    "end": "1335000"
  },
  {
    "text": "and Google closure uh Google closure is sadly not that well known outside of the",
    "start": "1303240",
    "end": "1308919"
  },
  {
    "text": "uh Google Community Google uses it for all their major consumer facing um applications Gmail uh Google",
    "start": "1308919",
    "end": "1316600"
  },
  {
    "text": "spreadsheets um Google docs all that stuff uses Google closure Library as",
    "start": "1316600",
    "end": "1321720"
  },
  {
    "text": "well as the Google closure compiler uh so closure script actually marries um",
    "start": "1321720",
    "end": "1327000"
  },
  {
    "text": "the closure language we compil the JavaScript but it's designed to be optimized by Google closure uh what",
    "start": "1327000",
    "end": "1332200"
  },
  {
    "text": "what's interesting about Google closure if you're building client apps um we'll talk about that in one second so one one",
    "start": "1332200",
    "end": "1338520"
  },
  {
    "start": "1335000",
    "end": "1418000"
  },
  {
    "text": "thing that's nice about closure script it's worth assessing I would say actually now closure script effectively are the lead you know the industry",
    "start": "1338520",
    "end": "1344600"
  },
  {
    "text": "leading experts on doing effective UI and ux over mutable data this is what everybody does in 16 months all nearly",
    "start": "1344600",
    "end": "1351640"
  },
  {
    "text": "all closure script programmers use react and they pair with immutable data uh now",
    "start": "1351640",
    "end": "1357520"
  },
  {
    "text": "with react native it's kind of awesome because any closure script developer can take the same things that they're doing",
    "start": "1357520",
    "end": "1363960"
  },
  {
    "text": "uh on the for the web and they can Target uh both IOS and Android and",
    "start": "1363960",
    "end": "1369159"
  },
  {
    "text": "that's great so what's interesting here is that closure script has a really nice story which is a little bit different uh",
    "start": "1369159",
    "end": "1375679"
  },
  {
    "text": "from what the previous slide with the exception of Scola Js uh and dart actually Dart has a has a",
    "start": "1375679",
    "end": "1381320"
  },
  {
    "text": "good story because you can use it server side as well but closure script is is those these three are a bit different",
    "start": "1381320",
    "end": "1387159"
  },
  {
    "text": "because on the back end when you're writing server code you write closure and that's multi-threaded server programming you get all the advantage of",
    "start": "1387159",
    "end": "1393559"
  },
  {
    "text": "the jvm uh when you go to the client yes it's single threaded but we have a solution there that's closure script and",
    "start": "1393559",
    "end": "1399279"
  },
  {
    "text": "I think uh if you have a team it's very nice to be able to take your engineers and say you can work on the back end you",
    "start": "1399279",
    "end": "1404679"
  },
  {
    "text": "can work on the front end and it's not really going to matter uh JavaScript you can do that with JavaScript but the problem is that you're sort of adopting",
    "start": "1404679",
    "end": "1411880"
  },
  {
    "text": "for no good reason a single-threaded model on the server which I think is personally I think is ridiculous uh",
    "start": "1411880",
    "end": "1418440"
  },
  {
    "start": "1418000",
    "end": "1556000"
  },
  {
    "text": "closure compiler so why why do we like closure compiler uh closure compiler gives us whole program optimization uh",
    "start": "1418440",
    "end": "1424200"
  },
  {
    "text": "it was released I think in 2009 and still is unparalleled there's nothing really as good as it uh people are",
    "start": "1424200",
    "end": "1430400"
  },
  {
    "text": "trying in the JavaScript Community but um the closure Google closure is actually actively developed and it's",
    "start": "1430400",
    "end": "1437120"
  },
  {
    "text": "just wins it's just better it does whole program optimization uh which means it does dead code elimination so it can",
    "start": "1437120",
    "end": "1443039"
  },
  {
    "text": "take your entire code base um and anything even if even if you include a library and the library has 10,000 lines",
    "start": "1443039",
    "end": "1449720"
  },
  {
    "text": "of JavaScript if in my module I invoke only one function in that Library um",
    "start": "1449720",
    "end": "1455360"
  },
  {
    "text": "Google closure will analyze it and say those other 9,000 lines of code that are in that Library aren't used we're going",
    "start": "1455360",
    "end": "1461919"
  },
  {
    "text": "to erase it uh so this is this is something that very I mean as far as I know no popular JavaScript uh can Ator",
    "start": "1461919",
    "end": "1469159"
  },
  {
    "text": "minifier does so closure does the minification the concatenation but it does dead code elimination which is very",
    "start": "1469159",
    "end": "1475159"
  },
  {
    "text": "powerful it also does something that's also not that welln which is optimal code splitting so the state-ofthe-art",
    "start": "1475159",
    "end": "1481399"
  },
  {
    "text": "the state-ofthe-art uh in the JavaScript world is to hand write modules of the right size and then to load them by hand",
    "start": "1481399",
    "end": "1489279"
  },
  {
    "text": "op you know in the correct way in the running application it's terrible uh so Google closure in 2011 said no way no no",
    "start": "1489279",
    "end": "1497360"
  },
  {
    "text": "no human should be involved in the computation of the code splits and so Google closure actually you say",
    "start": "1497360",
    "end": "1504240"
  },
  {
    "text": "which name spaces and where they belong uh and it has this really amazing thing called cross cross module code motion",
    "start": "1504240",
    "end": "1510720"
  },
  {
    "text": "where you may have a very large library and you have two modules that depend on it and what Google closure will do is it",
    "start": "1510720",
    "end": "1516640"
  },
  {
    "text": "will split the shared module and move all the methods and all the objects that to where they actually belong uh again",
    "start": "1516640",
    "end": "1523720"
  },
  {
    "text": "something that if you're not using Google closure you don't have it and closure script users have uh get this",
    "start": "1523720",
    "end": "1530000"
  },
  {
    "text": "for free so that's another reason we like closure script because closure script generates code optimized for",
    "start": "1530000",
    "end": "1535679"
  },
  {
    "text": "these optimizations um it also supports es 2015 commonjs and AMD consumption uh and",
    "start": "1535679",
    "end": "1542000"
  },
  {
    "text": "that's really cool so I I also think it's really important whatever whatever client side thing you're picking and you're doing JavaScript uh your tool",
    "start": "1542000",
    "end": "1549200"
  },
  {
    "text": "probably needs to be able to consume all these things uh it's a lot easier these days with um webpack which you might",
    "start": "1549200",
    "end": "1555039"
  },
  {
    "text": "have heard of okay so that's that's that piece let's talk about moving data so once once you've decided okay we know",
    "start": "1555039",
    "end": "1561039"
  },
  {
    "start": "1556000",
    "end": "1571000"
  },
  {
    "text": "we're having to render things we've picked some client side technology whether it's JavaScript or something compil JavaScript then you're like well",
    "start": "1561039",
    "end": "1567600"
  },
  {
    "text": "we got to get data from point A to point B uh there's actually not I'm surprised there were there are really not that",
    "start": "1567600",
    "end": "1573440"
  },
  {
    "start": "1571000",
    "end": "1696000"
  },
  {
    "text": "many great Solutions especially if you want to go from the backend directly into mutable data uh that's really the",
    "start": "1573440",
    "end": "1579640"
  },
  {
    "text": "only reason we created Transit Transit when it got released got a lot of sort of flack we were like why another data format and we were like examine the spa",
    "start": "1579640",
    "end": "1586760"
  },
  {
    "text": "the the sort of uh the space of options nothing exists to go from a Json",
    "start": "1586760",
    "end": "1591919"
  },
  {
    "text": "representation directly into something that can that's an immutable data structure so Transit does this uh it's",
    "start": "1591919",
    "end": "1598120"
  },
  {
    "text": "pretty cool it leverages Transit the en it supports both a message pack based encoding as well as a Json based",
    "start": "1598120",
    "end": "1604159"
  },
  {
    "text": "encoding Pro provides richer types out of the box so we have full support for if you want to represent 64-bit integers",
    "start": "1604159",
    "end": "1610559"
  },
  {
    "text": "you want to represent dates uh there's no you don't need any coordination between the backend guy and the front end guy as to the date format right we",
    "start": "1610559",
    "end": "1617880"
  },
  {
    "text": "figured this out for you we encode the date and we we transmit it to the client and the client decodes the date nobody's",
    "start": "1617880",
    "end": "1624200"
  },
  {
    "text": "going to write hand you know hand write date parsing code uh saves us a lot of",
    "start": "1624200",
    "end": "1629360"
  },
  {
    "text": "time and people the people that have adopt it love it uh you you just don't get into these aror prone how do I parse",
    "start": "1629360",
    "end": "1635080"
  },
  {
    "text": "this information it's extensible so like you know XML kind of sucks but you know",
    "start": "1635080",
    "end": "1640720"
  },
  {
    "text": "the one thing we lost when we dropped XML was something that was extensible so Transit makes it easy to extend uh you",
    "start": "1640720",
    "end": "1646799"
  },
  {
    "text": "can add custom types and people do this all the time in fact that's I mean that has to be the way our immutable data",
    "start": "1646799",
    "end": "1652360"
  },
  {
    "text": "structure support Works um and is fast and so you know I've been spent a lot of",
    "start": "1652360",
    "end": "1658480"
  },
  {
    "text": "time doing JavaScript and I know a thing or two about JavaScript performance so it is the case that um inclosure script",
    "start": "1658480",
    "end": "1665200"
  },
  {
    "text": "uh there are many there we have especially particularly V8 because v8's really good and their Json Parts is",
    "start": "1665200",
    "end": "1670360"
  },
  {
    "text": "really good we can actually decode an equivalent Transit payload into",
    "start": "1670360",
    "end": "1675840"
  },
  {
    "text": "immutable data nearly as you can uh Json parse the same logical set of data and",
    "start": "1675840",
    "end": "1682159"
  },
  {
    "text": "that's because we have just the encoding format that we use as well as we have um a caching mechanism which is very good",
    "start": "1682159",
    "end": "1689919"
  },
  {
    "text": "uh so you're not paying very much over Json which is important uh and there's actually more",
    "start": "1689919",
    "end": "1696159"
  },
  {
    "start": "1696000",
    "end": "1769000"
  },
  {
    "text": "caching opportunities I recently wrote a blog post which shows that especially for uis where you will have shared uh",
    "start": "1696159",
    "end": "1702320"
  },
  {
    "text": "shared portions of the graph you might have shared information like the uh a",
    "start": "1702320",
    "end": "1707519"
  },
  {
    "text": "value may appear multiple times it's very easy to Overlay your own caching mechanism over the one that we already",
    "start": "1707519",
    "end": "1714159"
  },
  {
    "text": "have and that's because the read the read and write um traversal order is exactly the same and we guarantee this",
    "start": "1714159",
    "end": "1720440"
  },
  {
    "text": "so for example in like 10 lines of code I added my own caching object caching layer where imagine I encode a geometry",
    "start": "1720440",
    "end": "1727480"
  },
  {
    "text": "Point um and the caching layer can say well we already saw that this is the second time you wrote it and it will",
    "start": "1727480",
    "end": "1732919"
  },
  {
    "text": "rate it'll basically write out a cache um and then a transit's own caching kick",
    "start": "1732919",
    "end": "1738320"
  },
  {
    "text": "in uh and then you get just this ridiculously short thing so this is act what's going to happen on the read side",
    "start": "1738320",
    "end": "1744320"
  },
  {
    "text": "when it this gets red it's going to read this object for the first time and then it puts it into the cache the next value",
    "start": "1744320",
    "end": "1750760"
  },
  {
    "text": "it's going to read out the identical thing and again the next time uh so if you're serializing values that need to",
    "start": "1750760",
    "end": "1757000"
  },
  {
    "text": "be shared which again is extremely common in the UI case Transit has a really good story uh again because it's",
    "start": "1757000",
    "end": "1763960"
  },
  {
    "text": "extensible um and it has sort again strong traversal properties all right so",
    "start": "1763960",
    "end": "1769880"
  },
  {
    "start": "1769000",
    "end": "1823000"
  },
  {
    "text": "hopefully uh you see the benefit of something like Transit if you're adopting this so let's get to the meteor part which is more radical this is sort",
    "start": "1769880",
    "end": "1776360"
  },
  {
    "text": "of like critiquing you know the way that people this is really the part where're really critiquing the way people build",
    "start": "1776360",
    "end": "1781919"
  },
  {
    "text": "apps so uis are are fundamentally trees uh so having done UI programming for a",
    "start": "1781919",
    "end": "1787279"
  },
  {
    "text": "very long time um having to deal with rest end points really introduces",
    "start": "1787279",
    "end": "1792799"
  },
  {
    "text": "complexity into the client code because often when you hit a rest endpoint you have to hit multiple ones you have to",
    "start": "1792799",
    "end": "1798919"
  },
  {
    "text": "hit one you have to go hit another one and what happens is that often the cas is is that whatever comes from that rest",
    "start": "1798919",
    "end": "1804960"
  },
  {
    "text": "end point is not in the shape that it needs to be to actually populate my application so almost any app that you",
    "start": "1804960",
    "end": "1812600"
  },
  {
    "text": "see you have it you see there it's in an undisciplined way hitting many Reston points and then you have aerone",
    "start": "1812600",
    "end": "1818519"
  },
  {
    "text": "reshaping logic to get it into the right form that you can actually render uh so",
    "start": "1818519",
    "end": "1823559"
  },
  {
    "text": "this I think is uh not a good thing uh and in fact it's it's such a terrible",
    "start": "1823559",
    "end": "1828799"
  },
  {
    "start": "1826000",
    "end": "1885000"
  },
  {
    "text": "thing that um this is not my not even my own narrative here uh Facebook and Netflix have both come to the same",
    "start": "1828799",
    "end": "1835000"
  },
  {
    "text": "conclusion so at Rea comp early this year they announced something called relay uh and basically what they get to",
    "start": "1835000",
    "end": "1840919"
  },
  {
    "text": "do now is uh the client the person writing the actual UI says these are the",
    "start": "1840919",
    "end": "1846760"
  },
  {
    "text": "properties that I need there is no rest end point no backend person says what's going to be in the payload the client",
    "start": "1846760",
    "end": "1853440"
  },
  {
    "text": "gets to determine what they want and the structure that it's going to be in they pass a recursive Json description of",
    "start": "1853440",
    "end": "1859559"
  },
  {
    "text": "what they need and the server simply supplies it to them which means there's no reshaping logic there's no for Loops",
    "start": "1859559",
    "end": "1865720"
  },
  {
    "text": "there's there's nothing right you you request something from the server and everything is ready to go there you",
    "start": "1865720",
    "end": "1871360"
  },
  {
    "text": "don't have to change the structure of the data so if you've never looked at react or graphql there's a bunch of",
    "start": "1871360",
    "end": "1876519"
  },
  {
    "text": "talks on it I highly recommend it whether whether this particular thing is the future or not as as I think is",
    "start": "1876519",
    "end": "1883000"
  },
  {
    "text": "irrelevant I just think it's a better overall design um Netflix came all came to separately independently came to",
    "start": "1883000",
    "end": "1889519"
  },
  {
    "start": "1885000",
    "end": "1951000"
  },
  {
    "text": "their own conclusion and they have their own stack to do this Jafar Hussein at the acmq conference applicative talked",
    "start": "1889519",
    "end": "1895799"
  },
  {
    "text": "about their thing called falor and Jason graph and they used to have a restful API they got rid of it they used the",
    "start": "1895799",
    "end": "1902399"
  },
  {
    "text": "same technique they basically the client gets to aggregate a recursive Json data structure which represents what's needed",
    "start": "1902399",
    "end": "1909480"
  },
  {
    "text": "uh they pass it to falor falor is basically a fan out fan in thing where it's a router for each key in the Json",
    "start": "1909480",
    "end": "1916440"
  },
  {
    "text": "data structure they f they call the right micros service and then they compose the result and pass it back to",
    "start": "1916440",
    "end": "1922720"
  },
  {
    "text": "the client uh by by dropping their rest and adopting falor uh they basically",
    "start": "1922720",
    "end": "1929240"
  },
  {
    "text": "eliminated 90% of their networking code so this this is this is again going back to if you think back on what I said oh",
    "start": "1929240",
    "end": "1935720"
  },
  {
    "text": "we picked the right data structure we don't have to do undo redo logic if you pick the right data structure and you",
    "start": "1935720",
    "end": "1941080"
  },
  {
    "text": "give the server the thing and the client just gets to get what they need you don't need all this networking code you",
    "start": "1941080",
    "end": "1946880"
  },
  {
    "text": "don't need it it just disappears because you picked the right design uh Big Ideas uh so the takeaway",
    "start": "1946880",
    "end": "1953760"
  },
  {
    "start": "1951000",
    "end": "2023000"
  },
  {
    "text": "here is that UI components should be able to Define what they need whatever you're doing now is definitely not the",
    "start": "1953760",
    "end": "1958960"
  },
  {
    "text": "right thing uh and it creates bugs it creates complexity uh use a recursive description so there have been lots of",
    "start": "1958960",
    "end": "1965080"
  },
  {
    "text": "proposals and I think uh Netflix and Facebook have come to the conclusion that you don't really want um some sort",
    "start": "1965080",
    "end": "1971000"
  },
  {
    "text": "of normalized thing sent to the client you really want the client to just ask what they want what they need in the",
    "start": "1971000",
    "end": "1976279"
  },
  {
    "text": "shape that they wanted uh and batching so that's another thing that I didn't really have time to talk",
    "start": "1976279",
    "end": "1981760"
  },
  {
    "text": "about too much but both falor and um uh relay support batching so you can have",
    "start": "1981760",
    "end": "1988480"
  },
  {
    "text": "an arbitrarily complex UI graph and what happens is that when you make the first request basically all the query pieces",
    "start": "1988480",
    "end": "1995440"
  },
  {
    "text": "get filtered up to the root and then the then basically the root of the application makes the request on your",
    "start": "1995440",
    "end": "2000880"
  },
  {
    "text": "behalf so components no longer ask get to make their own requests so this is",
    "start": "2000880",
    "end": "2006480"
  },
  {
    "text": "the global sort of optimization idea right every component has the piece of the query they need you compose them on",
    "start": "2006480",
    "end": "2012480"
  },
  {
    "text": "the way back up you send one batched request and that means that your app boots really fast because you're only",
    "start": "2012480",
    "end": "2019000"
  },
  {
    "text": "getting what you need um and it's really that simple uh so just just to see a concrete",
    "start": "2019000",
    "end": "2025760"
  },
  {
    "start": "2023000",
    "end": "2036000"
  },
  {
    "text": "example because I haven't shown any Syntax for what this might look like I'm just going to show datomic you don't have to use datomic but datomic is a is",
    "start": "2025760",
    "end": "2032399"
  },
  {
    "text": "a good sort of like Peak into what would this look like uh so datomic mutable",
    "start": "2032399",
    "end": "2038080"
  },
  {
    "start": "2036000",
    "end": "2050000"
  },
  {
    "text": "relational database it's got powerful auditing capabilities uh you can efficiently query arbitrary points in",
    "start": "2038080",
    "end": "2043559"
  },
  {
    "text": "the past uh it has data log style queries which are themselves data which is cool but I don't want that's neither",
    "start": "2043559",
    "end": "2050158"
  },
  {
    "start": "2050000",
    "end": "2191000"
  },
  {
    "text": "here nor there the coolest part about D datomic is support something called pull uh pull is a is a is a recursive data",
    "start": "2050159",
    "end": "2056800"
  },
  {
    "text": "description so here imagine I have an entity in the database and I only want the artist name in The Artist year so",
    "start": "2056800",
    "end": "2063398"
  },
  {
    "text": "even if that artist has 100 Fields I can I can say only only pull this little bit",
    "start": "2063399",
    "end": "2070440"
  },
  {
    "text": "and again this is data this is not like a SQL string and because it's data it means I can compose it easily and the",
    "start": "2070440",
    "end": "2075760"
  },
  {
    "text": "same way that I could compose a Json data structure so here I'm asking I only need these elements and so you could",
    "start": "2075760",
    "end": "2081599"
  },
  {
    "text": "imagine I could send this directly to uh the endpoint that's going to basically hydrate this uh into a into a Json",
    "start": "2081599",
    "end": "2088599"
  },
  {
    "text": "structure of some kind uh but it can be recursive so here",
    "start": "2088599",
    "end": "2094280"
  },
  {
    "text": "I'm saying I want uh I want to match the media and this happens to be an album",
    "start": "2094280",
    "end": "2100160"
  },
  {
    "text": "for that album I want all of its tracks I want every single track that that that that that album has and for each track I",
    "start": "2100160",
    "end": "2108160"
  },
  {
    "text": "want the name of the track and for each one of those tracks I want all the artists and I want their",
    "start": "2108160",
    "end": "2115000"
  },
  {
    "text": "names this is something that you that would be I mean number one somebody would have to write this query which is",
    "start": "2115000",
    "end": "2120920"
  },
  {
    "text": "like and then if I need to change it like you'd have to go back and rewrite that that joint here I could express",
    "start": "2120920",
    "end": "2127160"
  },
  {
    "text": "this in the this is what I send and I don't have to write the for Loop this is a this is a very complex Nest query and this is I",
    "start": "2127160",
    "end": "2133960"
  },
  {
    "text": "mean imagine like this is literally every iPhone app or every Android app that you have right this is what they",
    "start": "2133960",
    "end": "2139240"
  },
  {
    "text": "present and instead of writing all this complicated networking logic reshaping logic I simply describe what I need and",
    "start": "2139240",
    "end": "2145680"
  },
  {
    "text": "I can populate the information how I want and what's nice about this because this is data and data composes each one",
    "start": "2145680",
    "end": "2152160"
  },
  {
    "text": "of these fragments can be supplied by a different UI component so for example artist name that could be the artist",
    "start": "2152160",
    "end": "2158640"
  },
  {
    "text": "view only the artist view says this little piece of data is what I need above him is the artist list and that",
    "start": "2158640",
    "end": "2165400"
  },
  {
    "text": "person supplies the the sort of map structure and so on all the way up so you can basically divide your query uh",
    "start": "2165400",
    "end": "2172720"
  },
  {
    "text": "into the components uh and it's really beautiful and again that's that's definitely in the realm of um react and",
    "start": "2172720",
    "end": "2179160"
  },
  {
    "text": "relay so if you haven't looked at the relay graphql talk uh that that I think is a huge Revelation uh representing",
    "start": "2179160",
    "end": "2186680"
  },
  {
    "text": "your query uh directly on your UI components and building them back up on the way out so radical Simplicity uh I",
    "start": "2186680",
    "end": "2193960"
  },
  {
    "start": "2191000",
    "end": "2269000"
  },
  {
    "text": "don't have much more to say I I just want to I hope this has helped you to revisit some of your assumptions and",
    "start": "2193960",
    "end": "2199160"
  },
  {
    "text": "biases uh you know really rethink about any element of your stack that creates complexity I think rest is actually",
    "start": "2199160",
    "end": "2205160"
  },
  {
    "text": "really cool and it's actually a lot I think people will see as they adopt stuff like this it's not like you're you're going to completely get a get rid",
    "start": "2205160",
    "end": "2211720"
  },
  {
    "text": "of react uh rest but what's going to happen is that I think you're going to dismantle the Church of rest a lot of",
    "start": "2211720",
    "end": "2217960"
  },
  {
    "text": "things that people say about rest that's just not true it doesn't make things simpler and the things that don't make",
    "start": "2217960",
    "end": "2223200"
  },
  {
    "text": "things simpler I think need to be removed U and examine unfamiliar but time tested ideas for complexity",
    "start": "2223200",
    "end": "2229560"
  },
  {
    "text": "reduction uh even though a lot of these things that I'm saying might sound like Cutting Edge technology datomic what is",
    "start": "2229560",
    "end": "2235200"
  },
  {
    "text": "datomic datomic is IM mut like immutable data right it uses the same model as git git is is a fairly old thing now it's",
    "start": "2235200",
    "end": "2242440"
  },
  {
    "text": "query language is based on data log data log is from the 70s um and of course I",
    "start": "2242440",
    "end": "2247520"
  },
  {
    "text": "love closure script because closure scripts lisp and lisp is very old um but a lot of again a lot of the things I'm",
    "start": "2247520",
    "end": "2253200"
  },
  {
    "text": "talking about are not as radical or as new as they seem they're they're very they're old time tested engineering",
    "start": "2253200",
    "end": "2260160"
  },
  {
    "text": "ideas uh so that's all I had um if you guys have questions go ahead feel free",
    "start": "2260160",
    "end": "2265319"
  },
  {
    "text": "to ask them",
    "start": "2265319",
    "end": "2268599"
  }
]