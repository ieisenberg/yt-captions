[
  {
    "start": "0",
    "end": "300000"
  },
  {
    "text": "[Music]",
    "start": "2680",
    "end": "5769"
  },
  {
    "text": "all right welcome this is introducing Elm to a JavaScript app I'm Richard Feldman so I work for a company called",
    "start": "10599",
    "end": "17279"
  },
  {
    "text": "no red Inc we make uh software for English teachers and back in uh 2013 we",
    "start": "17279",
    "end": "23680"
  },
  {
    "text": "had this sort of smorgus board of JS Technologies we're using like some jQuery and some backbone and some other",
    "start": "23680",
    "end": "29640"
  },
  {
    "text": "stuff and uh react came out and we introduced react and the way that we introduced react was incrementally so we",
    "start": "29640",
    "end": "35760"
  },
  {
    "text": "just didn't want to say we're rewriting in react we said let's just try it out and see if we like it so we sort of",
    "start": "35760",
    "end": "40800"
  },
  {
    "text": "planted this little react seed we said we're going to start with just one page and just rewrite one part of it in react",
    "start": "40800",
    "end": "46199"
  },
  {
    "text": "and see how it goes so we liked it and it sort of grew and grew and then by the end of 2014 it had sort of taken over it",
    "start": "46199",
    "end": "52039"
  },
  {
    "text": "became the dominant Paradigm of our front end um then in 2015 we did a similar thing with Elm where we said hey",
    "start": "52039",
    "end": "58480"
  },
  {
    "text": "this Elm thing seems like it would really really help us out um let's just try planting a Little Elm seed and uh",
    "start": "58480",
    "end": "64239"
  },
  {
    "text": "just one part of one page using uh some of the techniques we're going to talk about today and uh and and see where it",
    "start": "64239",
    "end": "70040"
  },
  {
    "text": "takes us and since then it's grown and grown a lot and uh now it's gotten to the point where it's sort of taken over",
    "start": "70040",
    "end": "76280"
  },
  {
    "text": "our front end and it's become the dominant Paradigm in our front end and so this talk is basically about some of",
    "start": "76280",
    "end": "81920"
  },
  {
    "text": "the techniques you can use to have the same experience to plant this seed and get started with Elm inside of your uh",
    "start": "81920",
    "end": "89040"
  },
  {
    "text": "JavaScript application so um some statistics about us we have a little over two billion questions",
    "start": "89040",
    "end": "94399"
  },
  {
    "text": "answered we're on track to cross 3 billion this year um we have 100,000 lines of elm code which is uh as far as",
    "start": "94399",
    "end": "100280"
  },
  {
    "text": "we know the biggest Elm code base in the world although I just met an audience member who has apparently over 50,000 lines so uh there's there's people out",
    "start": "100280",
    "end": "106960"
  },
  {
    "text": "there that we don't know about obviously um and the entire time we've been running this application uh I never get",
    "start": "106960",
    "end": "112840"
  },
  {
    "text": "tired of saying this it's it's been uh two years at this point and the total number of runtime exceptions we've",
    "start": "112840",
    "end": "118799"
  },
  {
    "text": "gotten since we started started running it from our Elm code is still zero and we know this because we have rollar and",
    "start": "118799",
    "end": "124680"
  },
  {
    "text": "we track all the many many runtime exceptions that our Legacy JavaScript code continues to cause um but still",
    "start": "124680",
    "end": "130879"
  },
  {
    "text": "none of them Trace back to our Elm code um there are many other benefits to Elm besides this reliability um but uh for",
    "start": "130879",
    "end": "137840"
  },
  {
    "text": "the purposes of this talk I'm going to direct you to one of the many other fine talks that you can find um talking about",
    "start": "137840",
    "end": "143000"
  },
  {
    "text": "them and uh let's focus primarily on how do we get this experience this zero",
    "start": "143000",
    "end": "148519"
  },
  {
    "text": "runtime exceptions experience while interoperating with JavaScript code that is prone to crashing on a fairly regular",
    "start": "148519",
    "end": "154879"
  },
  {
    "text": "basis in our experience so um quick overview Elm is a functional programming language someone",
    "start": "154879",
    "end": "161239"
  },
  {
    "text": "asked that earlier um it compiles to JavaScript so when you run the elm compiler it goes through and it checks",
    "start": "161239",
    "end": "167560"
  },
  {
    "text": "your code and it does type inference and stuff like that to verify that all of its guarantees are being satisfied and",
    "start": "167560",
    "end": "173120"
  },
  {
    "text": "then at the end of the day what the compiler spits out is Javascript so you hand that JavaScript to your browser browser runs it exactly like any other",
    "start": "173120",
    "end": "179519"
  },
  {
    "text": "ja JavaScript and uh you're Off to the Races the difference uh between Elm and other languages that compile to",
    "start": "179519",
    "end": "185519"
  },
  {
    "text": "JavaScript is that Elm has completely different semantics than JavaScript it's not even object-oriented it's just a",
    "start": "185519",
    "end": "191760"
  },
  {
    "text": "functional programming language so whereas something like Dart for example is very similar to JavaScript",
    "start": "191760",
    "end": "197080"
  },
  {
    "text": "coffeescript has identical semantics to JavaScript Elm nothing related whatsoever it's just treating JavaScript",
    "start": "197080",
    "end": "203000"
  },
  {
    "text": "as bite code it says we're just going to compile to this and that's how you get these guarantees is is sort of the differences",
    "start": "203000",
    "end": "209480"
  },
  {
    "text": "in semantics and the differences in language design choices between Elm and JavaScript so one example of this is",
    "start": "209480",
    "end": "215959"
  },
  {
    "text": "that Elm does not have null or undefined it just does not exist in the language um Tony who sort of popularized",
    "start": "215959",
    "end": "223000"
  },
  {
    "text": "null back in all go W refers to null as his billion dollar mistake because he",
    "start": "223000",
    "end": "228959"
  },
  {
    "text": "estimates that introducing and popularizing null has caused over a billion dollars in economic damage um",
    "start": "228959",
    "end": "234959"
  },
  {
    "text": "since he did it and uh he has some regrets about that um turns out though there actually ways to represent the",
    "start": "234959",
    "end": "241079"
  },
  {
    "text": "idea of the absence of a value um that don't have the downsides of null or you can do it in a way that can prevent",
    "start": "241079",
    "end": "246680"
  },
  {
    "text": "crashes and make sure that the compiler can tell you ahead of time all the cases you need to cover around that idea of",
    "start": "246680",
    "end": "252360"
  },
  {
    "text": "the absence of a value um all values in Elm are mutable so in JavaScript you can",
    "start": "252360",
    "end": "258079"
  },
  {
    "text": "mutate things when you call functions they can mutate things you run any code it can mutate different things this can",
    "start": "258079",
    "end": "263080"
  },
  {
    "text": "lead to all sorts of problems and and potentially tricky situations Elm don't have to worry about that guaranteed all",
    "start": "263080",
    "end": "269600"
  },
  {
    "text": "vales in Elm are immutable and finally Elm functions have no side effects so",
    "start": "269600",
    "end": "274720"
  },
  {
    "text": "you may have been hearing more and more about this idea of side effects as um more and more functional Concepts get popular in JavaScript and more and more",
    "start": "274720",
    "end": "281360"
  },
  {
    "text": "libraries are issuing warnings like make sure that this function does not do side effects please because if you do side effects in this function it's going to",
    "start": "281360",
    "end": "287440"
  },
  {
    "text": "cause problems um in Elm don't have to worry about that because no Elm functions have side effects you may be",
    "start": "287440",
    "end": "293320"
  },
  {
    "text": "wondering uh what if you actually need to do effects like you need to talk to a server or something like that we will get into that so",
    "start": "293320",
    "end": "300240"
  },
  {
    "start": "300000",
    "end": "387000"
  },
  {
    "text": "let's say that our goal is we want to get these benefits we want to uh get to El in production from our status quo",
    "start": "300240",
    "end": "307199"
  },
  {
    "text": "where we have lots and lots of JavaScript in production how do we get from here to that",
    "start": "307199",
    "end": "313320"
  },
  {
    "text": "goal okay so the answer broadly speaking is interop so Elm compiles to JavaScript",
    "start": "313320",
    "end": "319800"
  },
  {
    "text": "and Elm code can talk to JavaScript code there are lots of languages that do this um what makes Elm unique is the way that",
    "start": "319800",
    "end": "326440"
  },
  {
    "text": "it does it because the goal is to answer the question how can Elm maintain these",
    "start": "326440",
    "end": "332240"
  },
  {
    "text": "guarantees while interoperating with JavaScript which doesn't have any of those guarantees how can we do this well",
    "start": "332240",
    "end": "339199"
  },
  {
    "text": "let's start by looking at some very very basic code so let's say we have some HTML on the page we just got this div",
    "start": "339199",
    "end": "344840"
  },
  {
    "text": "and we happen to give it an ID of lmap and then we run this code um that's uh",
    "start": "344840",
    "end": "350080"
  },
  {
    "text": "just LM equals document. getet element ID lmap and that's uh basically referring to this element we've got up",
    "start": "350080",
    "end": "356120"
  },
  {
    "text": "here and uh then we're going to take that element that we've got a reference ref to now and we're going to call el.",
    "start": "356120",
    "end": "362039"
  },
  {
    "text": "main. embed passing that element in there so all this code is doing is this is just starting up an Elm application",
    "start": "362039",
    "end": "368800"
  },
  {
    "text": "it's saying hey I got this element I want Elm to take over that element and and just render into that element now",
    "start": "368800",
    "end": "374880"
  },
  {
    "text": "this element could be taking up the entire body or it could be something very small just one part of a page and",
    "start": "374880",
    "end": "381199"
  },
  {
    "text": "using this we have gone from having no Elm on our page to having a running Elm application now we can use this side by",
    "start": "381199",
    "end": "388440"
  },
  {
    "start": "387000",
    "end": "510000"
  },
  {
    "text": "side with JavaScript an existing JavaScript application no matter how complicated that JavaScript application",
    "start": "388440",
    "end": "393960"
  },
  {
    "text": "is so to demonstrate this I'm going to introduce you to Ellie so Ellie or the elm live editor is essentially like JS",
    "start": "393960",
    "end": "401319"
  },
  {
    "text": "fiddle for Elm but with some extra Nifty features thrown in um it's written in Elm and uh so basically um what we're",
    "start": "401319",
    "end": "409000"
  },
  {
    "text": "doing here is we're taking uh this react app that I I got online that uh it's",
    "start": "409000",
    "end": "414280"
  },
  {
    "text": "just sort of a movie searching database and all we're doing is we're adding a very tiny amount of sort of a token",
    "start": "414280",
    "end": "420840"
  },
  {
    "text": "amount if you will of elm to it we have this really trivial Elm program all it does is say this text is written in Elm",
    "start": "420840",
    "end": "427039"
  },
  {
    "text": "that's it that's the entire program not super exciting but it gives us the basic idea of how to do this so down here we",
    "start": "427039",
    "end": "432800"
  },
  {
    "text": "have our HTML and all of this is representing primarily the react app but it has two elements in here that we care",
    "start": "432800",
    "end": "439520"
  },
  {
    "text": "about so one is div ID equals app and this is how uh the re what react is going to get so the react app is going",
    "start": "439520",
    "end": "445520"
  },
  {
    "text": "to get rendered into that element and then similarly Elm is going to render into this element so they're just side",
    "start": "445520",
    "end": "451240"
  },
  {
    "text": "by side coexisting on the same page down below we have that exact code that from the slide the script that says app",
    "start": "451240",
    "end": "457800"
  },
  {
    "text": "equals el. main. embed passing in that element okay so let's compile this and",
    "start": "457800",
    "end": "464080"
  },
  {
    "text": "I'm going to make this a little bit smaller okay and here we go so now we",
    "start": "464080",
    "end": "471120"
  },
  {
    "text": "have this uh react app this text is written in Elm but the rest of the page as you can see is just this actual react",
    "start": "471120",
    "end": "477479"
  },
  {
    "text": "app and so primarily what's going on here is all react stuff um but we've we've successfully snuck in some Elm and",
    "start": "477479",
    "end": "484240"
  },
  {
    "text": "embedded it in the same page alongside app so this all still works we can change it to you know search for uh",
    "start": "484240",
    "end": "489720"
  },
  {
    "text": "Blues Brothers because we're in Chicago um there we go shows up fine and",
    "start": "489720",
    "end": "495120"
  },
  {
    "text": "I can also uh change this text to uh hell Chicago and same thing side by side",
    "start": "495120",
    "end": "503319"
  },
  {
    "text": "coexisting great okay so that's the very very basics of getting Elm to run",
    "start": "503319",
    "end": "508520"
  },
  {
    "text": "alongside javascrip okay so just knowing this knowing nothing else we can use Elm for",
    "start": "508520",
    "end": "514760"
  },
  {
    "start": "510000",
    "end": "595000"
  },
  {
    "text": "rendering not even talking to JavaScript just coexisting side by side and you might think well that's not very useful",
    "start": "514760",
    "end": "520399"
  },
  {
    "text": "but believe it or not just having this simple Paradigm of a page with an L map running and a Javascript app running um",
    "start": "520399",
    "end": "526760"
  },
  {
    "text": "this is actually something that we have done and in fact are currently doing in production so this is our homepage this",
    "start": "526760",
    "end": "532800"
  },
  {
    "text": "is what it looks like if you're signed out and you're just visiting the page for the first time this is essentially our our static app static website it",
    "start": "532800",
    "end": "539440"
  },
  {
    "text": "it's just giving you information about what our product does and almost all of this page is just plain vanilla HTML CSS",
    "start": "539440",
    "end": "547320"
  },
  {
    "text": "JavaScript with one exception up there in the upper right that login button is",
    "start": "547320",
    "end": "552600"
  },
  {
    "text": "actually an Elm application that we've embedded using exactly the technique we just talked about and it's completely self-contained it doesn't need to",
    "start": "552600",
    "end": "558640"
  },
  {
    "text": "interact with any of the rest of the page all it does is when you click it it expands and then it does some basic",
    "start": "558640",
    "end": "564079"
  },
  {
    "text": "login form type stuff so you type in your email it validates it it says hey you didn't type in a password please",
    "start": "564079",
    "end": "569560"
  },
  {
    "text": "type in your password you put in the password you hit login it sends some data off to the server to say is that the correct email and password send some",
    "start": "569560",
    "end": "576600"
  },
  {
    "text": "data back maybe gives you a validation error and ultimately if you do everything right then it logs you in so",
    "start": "576600",
    "end": "582040"
  },
  {
    "text": "this whole thing right here is just an embedded Elm application in this page but again end users don't need to know",
    "start": "582040",
    "end": "587880"
  },
  {
    "text": "that right from their perspective they just say oh this is just an interactive thing they don't really care what it's written and they just care about what it",
    "start": "587880",
    "end": "594360"
  },
  {
    "text": "does okay so goal is to start from lots of JavaScript and production",
    "start": "594360",
    "end": "600160"
  },
  {
    "start": "595000",
    "end": "611000"
  },
  {
    "text": "uh and get to lots of elment production by planting a seed like this right by planting some really small bit of Elm in",
    "start": "600160",
    "end": "606399"
  },
  {
    "text": "our existing production code base so we can plant the seed and then watch it",
    "start": "606399",
    "end": "611440"
  },
  {
    "start": "611000",
    "end": "874000"
  },
  {
    "text": "grow okay but of course uh primarily what we're in this for is interactivity right uh that that login form is not",
    "start": "611440",
    "end": "618800"
  },
  {
    "text": "just sitting there completely static it's interactive so we can't really talk about interactivity in Elm without",
    "start": "618800",
    "end": "624200"
  },
  {
    "text": "talking about the elm architecture because this is how all interactivity is done in Elm so",
    "start": "624200",
    "end": "629560"
  },
  {
    "text": "uh the basic idea behind the elm architecture at the beginning is this idea of the view function view function",
    "start": "629560",
    "end": "636480"
  },
  {
    "text": "is just a plain old function just like any other that happens to take some arguments and return some virtual Dom so",
    "start": "636480",
    "end": "644200"
  },
  {
    "text": "the virtual Dom is this idea that was popularized by react and it's basically a description using data of how you want",
    "start": "644200",
    "end": "650600"
  },
  {
    "text": "the page to look it's not actually running some mutations on the page it's not changing any Dom elements it's just",
    "start": "650600",
    "end": "656279"
  },
  {
    "text": "a data description of this is how I would like the p page to look and the elm runtime takes care of actually",
    "start": "656279",
    "end": "662079"
  },
  {
    "text": "making the page look like that so we've got our login form over here and uh it's",
    "start": "662079",
    "end": "668200"
  },
  {
    "text": "being powered by the elm runtime so this is the compiled JavaScript that's uh sort of what the browser actually",
    "start": "668200",
    "end": "674000"
  },
  {
    "text": "executes and this is sort of a black box to us the elm runtime is not something that we deal with directly we just write",
    "start": "674000",
    "end": "679240"
  },
  {
    "text": "an Elm program then the elm runtime executes it so uh at the very beginning of our page load or or our app starting",
    "start": "679240",
    "end": "686920"
  },
  {
    "text": "up um we have this model and the model represents our application State and I really do mean our entire application",
    "start": "686920",
    "end": "692560"
  },
  {
    "text": "state in Elm this model is just all of the state that goes on in your entire running program and the model gets",
    "start": "692560",
    "end": "698639"
  },
  {
    "text": "passed to your view function so there's uh essentially when you do the first render you get your initial model it",
    "start": "698639",
    "end": "705519"
  },
  {
    "text": "gets passed to The View and then view says okay I've received my arguments now I will return some virtual Dom to the",
    "start": "705519",
    "end": "711200"
  },
  {
    "text": "elm runtime the elm runtime says cool I see that you've returned some virtual Dom that describes a login page I will",
    "start": "711200",
    "end": "717600"
  },
  {
    "text": "go ahead and render that to to the the screen for you great um then a user",
    "start": "717600",
    "end": "722720"
  },
  {
    "text": "typed something in they Press login and uh because they clicked a button they they did some interaction that's going",
    "start": "722720",
    "end": "729040"
  },
  {
    "text": "to result in the elm runtime sending a message to Elm so a message is a data representation of something the user did",
    "start": "729040",
    "end": "735639"
  },
  {
    "text": "this is like an action if you're familiar with flux or Redux um the basic idea is not to add an imperative call",
    "start": "735639",
    "end": "741600"
  },
  {
    "text": "back not to just register an event handler right on the element itself but rather to say hey when the user does",
    "start": "741600",
    "end": "748440"
  },
  {
    "text": "this action I just want you to send this data to a function called update so update receives that message that",
    "start": "748440",
    "end": "755320"
  },
  {
    "text": "describes what the user did and it also receives the current model and using those two it comes up with a new model",
    "start": "755320",
    "end": "762160"
  },
  {
    "text": "it says okay I see that the user has attempted to log in with this username and password oh they left the password",
    "start": "762160",
    "end": "768040"
  },
  {
    "text": "blank so I'm going to change my model to record there is now a validation error and we need to render that to the screen",
    "start": "768040",
    "end": "774000"
  },
  {
    "text": "so once that uh update function Returns the new model the runtime passes that new model to view which in turn uses",
    "start": "774000",
    "end": "780120"
  },
  {
    "text": "that to generate a new virtual Dom and return that and the runtime will diff the old virtual Dom the previous one",
    "start": "780120",
    "end": "786320"
  },
  {
    "text": "that it was given with the new one and really efficiently come up with uh the minimal set of changes to the Dom",
    "start": "786320",
    "end": "792000"
  },
  {
    "text": "necessary to reflect what you requested on the screen so that's the basic idea",
    "start": "792000",
    "end": "797320"
  },
  {
    "text": "there's one piece that I've uh left out here which is how do you actually do effects right so we mentioned earlier",
    "start": "797320",
    "end": "802440"
  },
  {
    "text": "that Elm functions don't have side effects if I call any of these functions if I call update if I call view if I call any Elm function it's guaranteed",
    "start": "802440",
    "end": "809800"
  },
  {
    "text": "not to do any side effects and certainly running an HTTP request to the server to attempt to log in is a side effect so",
    "start": "809800",
    "end": "816079"
  },
  {
    "text": "how do we do that and the answer is essentially using the same kind of Paradigm that we do with the virtual Dom",
    "start": "816079",
    "end": "821480"
  },
  {
    "text": "so the virtual Dom is just some plain old immutable data that describes how we want the page to look and a command is",
    "start": "821480",
    "end": "827440"
  },
  {
    "text": "also just some plain old immutable data which describes some effect that we want the runtime to execute so in addition to",
    "start": "827440",
    "end": "833839"
  },
  {
    "text": "returning a new model update also returns this command that says by the way here are some effects I want want",
    "start": "833839",
    "end": "838920"
  },
  {
    "text": "you to run and once those effects complete the elm runtime will send a message back to update if there's any",
    "start": "838920",
    "end": "845240"
  },
  {
    "text": "information that needs to come back so in the case of an HTTP request we're sending this data off to the server and",
    "start": "845240",
    "end": "850480"
  },
  {
    "text": "saying Hey I want to log in like this server will send some data back saying hey here's what happened maybe that was",
    "start": "850480",
    "end": "855920"
  },
  {
    "text": "an incorrect username and password maybe we're good either way that'll be captured as a message which gets sent to update so update is sort of the brains",
    "start": "855920",
    "end": "862959"
  },
  {
    "text": "of your application all of your interactivity comes from messages getting sent from the elm runtime to",
    "start": "862959",
    "end": "869199"
  },
  {
    "text": "update that's the whole deal that's how Elm programs uh become interactive okay",
    "start": "869199",
    "end": "875120"
  },
  {
    "start": "874000",
    "end": "1169000"
  },
  {
    "text": "so how does this translate into interoperating with JavaScript remember our goal here is to preserve guarantees",
    "start": "875120",
    "end": "880519"
  },
  {
    "text": "right we're trying to have the reliable Elm system that's co-existing with a",
    "start": "880519",
    "end": "885759"
  },
  {
    "text": "JavaScript system with a completely different set of guarantees while preserving elm's guarantees and the answer is using a metaphor for what we",
    "start": "885759",
    "end": "893480"
  },
  {
    "text": "just did literally so what we literally just did is we talked about how to talk to a server right how to send data from",
    "start": "893480",
    "end": "900800"
  },
  {
    "text": "Elm to a server and get data from the server back into Elm without violating any of those guarantees so",
    "start": "900800",
    "end": "906240"
  },
  {
    "text": "metaphorically that's the same thing we're going to do here so Elm code talks to JavaScript the same way that it talks",
    "start": "906240",
    "end": "911680"
  },
  {
    "text": "to servers by sending and receiving data back and forth right so if you're just throwing data over the wall whether it's",
    "start": "911680",
    "end": "917800"
  },
  {
    "text": "to a server or to JavaScript and then receiving data back over the wall from either a server or from JavaScript that",
    "start": "917800",
    "end": "923680"
  },
  {
    "text": "Paradigm effectively preserves all of elm's guarantees so here's an example let's",
    "start": "923680",
    "end": "928800"
  },
  {
    "text": "say we have this app.js which is running our JavaScript code and uh we do the the same thing that we did earlier document",
    "start": "928800",
    "end": "934720"
  },
  {
    "text": "get element byid El map we're going to call um lm. app. Ed passing Elm now we",
    "start": "934720",
    "end": "940000"
  },
  {
    "text": "have this thing called app now what we can do with this app is we can uh",
    "start": "940000",
    "end": "945279"
  },
  {
    "text": "subscribe to some information that we're going to be sending from Elm to JavaScript so this uh ports field is",
    "start": "945279",
    "end": "952959"
  },
  {
    "text": "basically describing uh conceptually the different ways that Elm can send data to",
    "start": "952959",
    "end": "958000"
  },
  {
    "text": "and from javascrip script so I called this thing here data from Elm could have called it anything could have called it Fu or bar whatever the case may be the",
    "start": "958000",
    "end": "964920"
  },
  {
    "text": "Subscribe method sets up a subscription for saying hey every single time Elm",
    "start": "964920",
    "end": "970839"
  },
  {
    "text": "uses a command to send some data to JavaScript I want to run this call back right here so we're going to get this",
    "start": "970839",
    "end": "977199"
  },
  {
    "text": "data as an argument to the call back this is something that Elm is sending to us over here in JavaScript land and we can do whatever we want with it right so",
    "start": "977199",
    "end": "983199"
  },
  {
    "text": "we can do a console.log elm says and then just print out the data to the console so um in diagram form this is",
    "start": "983199",
    "end": "990759"
  },
  {
    "text": "what we're doing we've got our Elm architecture up here just like we had before down here we've got coexisting on",
    "start": "990759",
    "end": "996759"
  },
  {
    "text": "the same page our Javascript app and somewhere in update we've decided we're going to return a command to the elm",
    "start": "996759",
    "end": "1002399"
  },
  {
    "text": "runtime but unlike before whereas before we had a command that we were returning to the runtime that described talking to",
    "start": "1002399",
    "end": "1008959"
  },
  {
    "text": "a server sending data to a server now we've got a command that instead describes sending data through to",
    "start": "1008959",
    "end": "1015319"
  },
  {
    "text": "JavaScript and the runtime will happily oblige so if we send high as in this",
    "start": "1015319",
    "end": "1020440"
  },
  {
    "text": "command we say hey runtime I want you to send High out to JavaScript it says cool no problem I will send that through and",
    "start": "1020440",
    "end": "1026600"
  },
  {
    "text": "then now over here when we uh have our JavaScript code and our subscription this call back will fire passing high",
    "start": "1026600",
    "end": "1033678"
  },
  {
    "text": "and so we will end up console.log Elm says hi so that's all there is to it for for sending data from Elm to JavaScript",
    "start": "1033679",
    "end": "1040400"
  },
  {
    "text": "it's this idea of subscribing on the JavaScript side and using a command to send it from help importantly we can do",
    "start": "1040400",
    "end": "1046360"
  },
  {
    "text": "whatever we want in here right console.log talk to an entire JavaScript library build react from scratch and",
    "start": "1046360",
    "end": "1052400"
  },
  {
    "text": "then instantiate it in there anything we want to do this data has now been thrown over the wall this is something that Elm",
    "start": "1052400",
    "end": "1058559"
  },
  {
    "text": "no longer has any attachment to so no matter what we want to do inside JavaScript to mess with it all of elm's",
    "start": "1058559",
    "end": "1063720"
  },
  {
    "text": "guarantees still remain it's not holding on to that data anymore so conceptually we now have a",
    "start": "1063720",
    "end": "1069520"
  },
  {
    "text": "page with an L map and a Javascript app coexisting where the elm app can talk to the Javascript app it can send data to",
    "start": "1069520",
    "end": "1075159"
  },
  {
    "text": "it and later on we'll see how we can go back in the other direction um an example of this is dreamwriter so this",
    "start": "1075159",
    "end": "1080640"
  },
  {
    "text": "is the first Elm application I ended up building initially I wrote it in JavaScript though um in fact I gave a",
    "start": "1080640",
    "end": "1086000"
  },
  {
    "text": "talk at strange loop back in uh 2014 about this app when it was just JavaScript because uh it was offline",
    "start": "1086000",
    "end": "1092640"
  },
  {
    "text": "first which back then was a lot harder because we didn't have service workers and apparently I'm a masochist of some sort um but at any rate uh now it's an",
    "start": "1092640",
    "end": "1100240"
  },
  {
    "text": "Elm so uh how does this inter opt work how did I transition from JavaScript to Elm so a good example of this is uh if",
    "start": "1100240",
    "end": "1107760"
  },
  {
    "text": "you look up here at the top this interactive toolbar is ended up being",
    "start": "1107760",
    "end": "1113000"
  },
  {
    "text": "built in Elm but this stuff down below here this is content editable and I wrote a bunch of really custom specific",
    "start": "1113000",
    "end": "1118960"
  },
  {
    "text": "JavaScript to mess with content editable and have it do really custom things I don't know if you've ever gone that gone down that road but once you've written",
    "start": "1118960",
    "end": "1125360"
  },
  {
    "text": "that code you kind of never want to touch it again um content editable is kind of a mindfield so a toolbar on the",
    "start": "1125360",
    "end": "1131799"
  },
  {
    "text": "other hand is not toolbar very straightforward we can just say hey uh here's a toolbar going to render it in Elm in this case we're going to leave",
    "start": "1131799",
    "end": "1138400"
  },
  {
    "text": "all this alone this is just going to stay being the existing JavaScript that we had I never actually rewrote that stuff um but now we need the two to",
    "start": "1138400",
    "end": "1145679"
  },
  {
    "text": "interoperate right um we need to say okay coming from this toolbar up here which is the El map and to this",
    "start": "1145679",
    "end": "1152400"
  },
  {
    "text": "Javascript app down here when the user clicks the Bold button those two need to interact I need to be able to send data",
    "start": "1152400",
    "end": "1157720"
  },
  {
    "text": "from the El map to the Javascript app saying hey bold the current selection things like that so sending data from",
    "start": "1157720",
    "end": "1164400"
  },
  {
    "text": "the El map to the Javascript app and this is how we do it with command uh commands in the same way that we we just",
    "start": "1164400",
    "end": "1169600"
  },
  {
    "start": "1169000",
    "end": "1363000"
  },
  {
    "text": "talked about so what about the reverse sending data from JavaScript over to",
    "start": "1169600",
    "end": "1175039"
  },
  {
    "text": "Elm so one way to do this is just initialization Flags this is not super interesting but it's worth noting um",
    "start": "1175039",
    "end": "1182400"
  },
  {
    "text": "basically when you call Elm main. ID not only can you pass the element but you can also pass optionally some",
    "start": "1182400",
    "end": "1188320"
  },
  {
    "text": "initialization value that Elm can use to set the initial model so this is basically just for the first render",
    "start": "1188320",
    "end": "1194080"
  },
  {
    "text": "after this it doesn't matter so this just ends up getting set in the model or what whatever the the L map decides to",
    "start": "1194080",
    "end": "1199760"
  },
  {
    "text": "do with it and then from there on everything runs as normal so initialization flags are one way but what we're really interested in is this",
    "start": "1199760",
    "end": "1206840"
  },
  {
    "text": "sort of back and forth communication like doing this on the fly so here's an example of that so",
    "start": "1206840",
    "end": "1212440"
  },
  {
    "text": "again we have our our basic setup that we've been working with all throughout we have this element we're embedding um",
    "start": "1212440",
    "end": "1218520"
  },
  {
    "text": "it in and getting an app variable for that and now we have this new method called send so this works a lot like",
    "start": "1218520",
    "end": "1224840"
  },
  {
    "text": "subscribe except in Reverse so whereas subscribe took a call back that said every time Elm sends us data we're going",
    "start": "1224840",
    "end": "1230640"
  },
  {
    "text": "to run this call back and do whatever we want now we're just saying hey send this data over the wall to Elm in this case",
    "start": "1230640",
    "end": "1236520"
  },
  {
    "text": "we're sending hey and sending that over to Elm now conceptually um here we have",
    "start": "1236520",
    "end": "1241720"
  },
  {
    "text": "to talk about a new source of messages so previously we talked about how messages can come from user interactions",
    "start": "1241720",
    "end": "1247919"
  },
  {
    "text": "right user clicks something and the elm runtime says cool I'm going to send a message out to update but what about",
    "start": "1247919",
    "end": "1253559"
  },
  {
    "text": "global events right things that are not tied to a particular part of the UI what about the location bar change changing",
    "start": "1253559",
    "end": "1258679"
  },
  {
    "text": "what about when the user resizes the window there's no way to put an event handler on some part of the Dom when you're being embedded in the middle of",
    "start": "1258679",
    "end": "1265159"
  },
  {
    "text": "the body and so the answer is Elm has this concept of subscriptions and these are sort of global events Global Sources",
    "start": "1265159",
    "end": "1271919"
  },
  {
    "text": "of messages that you can choose to subscribe to on a case-by casee basis like you can say I want to subscribe to",
    "start": "1271919",
    "end": "1277840"
  },
  {
    "text": "the uh location bar changing I want to subscribe to the window changing sizes and you can also say I want to subscribe",
    "start": "1277840",
    "end": "1284480"
  },
  {
    "text": "to data coming in from JavaScript over this port and basically say every single time JavaScript sends me one of these me",
    "start": "1284480",
    "end": "1290679"
  },
  {
    "text": "uh one of these pieces of data wrap it up in a message and send it to update again updates the brains of the whole",
    "start": "1290679",
    "end": "1296000"
  },
  {
    "text": "application and messages sort of how it communicates to the outside world cool",
    "start": "1296000",
    "end": "1301720"
  },
  {
    "text": "so when the Javascript app said calls that send method and says hey send this string hey into uh into Elm the runtime",
    "start": "1301720",
    "end": "1308760"
  },
  {
    "text": "says cool uh we've got a subscription that's listening for this and I will wrap that up in a message send it to update and then again everything else is",
    "start": "1308760",
    "end": "1315240"
  },
  {
    "text": "the same so now we've got got lmap sending data to JavaScript using a",
    "start": "1315240",
    "end": "1320279"
  },
  {
    "text": "command and JavaScript sending lmap back to sorry JavaScript sending data back to the L map um using",
    "start": "1320279",
    "end": "1326000"
  },
  {
    "text": "subscriptions and so uh again an example of having a page where we've got both of these is dreamwriter so we talked uh",
    "start": "1326000",
    "end": "1332880"
  },
  {
    "text": "briefly about how we have this L map for the toolbar and then we also have this Javascript app for the rich text editing",
    "start": "1332880",
    "end": "1338600"
  },
  {
    "text": "we talked about when you click bold we send data from the L map down to the Javascript app what about when the user",
    "start": "1338600",
    "end": "1343919"
  },
  {
    "text": "changes the the position of the cursor like they move into something that's bolted well we want reflect that in the toolbar right we want the Bold thing to",
    "start": "1343919",
    "end": "1350120"
  },
  {
    "text": "show up and say hey you're in a bold section now or if it's italics show up italics maybe both so to do that we need",
    "start": "1350120",
    "end": "1356240"
  },
  {
    "text": "to use this subscriptions idea to send data from JavaScript back to Elm and this is how they can communicate back",
    "start": "1356240",
    "end": "1361480"
  },
  {
    "text": "and forth what about multiple embeds like we've been talking about having one Elm",
    "start": "1361480",
    "end": "1368480"
  },
  {
    "start": "1363000",
    "end": "1594000"
  },
  {
    "text": "application embedded in the page or one JavaScript application embedded in the page and those coexisting what if we",
    "start": "1368480",
    "end": "1374000"
  },
  {
    "text": "want to do both Well turns out that uh that's fine we we can just do that if we want to we can have a menu and say cool",
    "start": "1374000",
    "end": "1380840"
  },
  {
    "text": "I've got this menu element and this is where an Elm application for a menu is going to go and that's going to be its own self-contained thing but it can",
    "start": "1380840",
    "end": "1387080"
  },
  {
    "text": "communicate back and forth with JavaScript and then later on as we're making our app bigger and bigger we say you know what I want to rewrite the",
    "start": "1387080",
    "end": "1392760"
  },
  {
    "text": "sidebar in L and now I've got the menu talking to the JavaScript application the sidebar talking to the JavaScript application that's fine they're",
    "start": "1392760",
    "end": "1399240"
  },
  {
    "text": "coexisting side by side take it a step further right make the footer in Elm sure that one's probably not doing as",
    "start": "1399240",
    "end": "1404640"
  },
  {
    "text": "much interaction but no reason we couldn't do it and this is something you can do as stepping stones too ideally",
    "start": "1404640",
    "end": "1411120"
  },
  {
    "text": "ultimately rewriting the whole page in mm which is kind of where We've Ended up on a lot of ways just incrementally",
    "start": "1411120",
    "end": "1416320"
  },
  {
    "text": "changing One Piece One Piece One Piece until eventually you're like you know what it's just not that much of a jump anymore to convert the rest of the thing",
    "start": "1416320",
    "end": "1423120"
  },
  {
    "text": "to El worth noting though that if you do this you're going to get the overhead of the elm runtime each time so uh this is",
    "start": "1423120",
    "end": "1430000"
  },
  {
    "text": "not something where you probably want to just you know go nuts and say like I'm going to do 100 L maps on my page because that's going to be you know",
    "start": "1430000",
    "end": "1436039"
  },
  {
    "text": "there's going to be overhead to having the runtime that many times so there are plans in the works to make it so that",
    "start": "1436039",
    "end": "1441200"
  },
  {
    "text": "they can share a runtime um but that doesn't exist yet so something to be aware of okay so what about this architecture",
    "start": "1441200",
    "end": "1448600"
  },
  {
    "text": "you have the Javascript app and then there are multiple L maps that are talking to it um this is actually something that a company called circuit",
    "start": "1448600",
    "end": "1454720"
  },
  {
    "text": "Hub which was one of the earliest Elm adopters in production um used and this is as I mentioned something that we've",
    "start": "1454720",
    "end": "1460400"
  },
  {
    "text": "also done so here's an example of that so this is the uh the teacher account information page and basically this has",
    "start": "1460400",
    "end": "1467399"
  },
  {
    "text": "some some pretty standard metadata about the teachers's uh you know personal information you can edit your password",
    "start": "1467399",
    "end": "1472840"
  },
  {
    "text": "that's all well and good you can link with a Google account or a clever account or another teacher account that you want to uh share content with um and",
    "start": "1472840",
    "end": "1480520"
  },
  {
    "text": "we've also got this premium code so we are we have a premium business model and um so teachers can enter a premium code",
    "start": "1480520",
    "end": "1487080"
  },
  {
    "text": "here if they want to upgrade to premium so uh this but believe it or not",
    "start": "1487080",
    "end": "1492960"
  },
  {
    "text": "this update account is a lazy loaded Elm app so what do I mean by lazy loaded",
    "start": "1492960",
    "end": "1498480"
  },
  {
    "text": "what I mean is that until the user has pressed this button there is no Elm code running on this page we're sort of like",
    "start": "1498480",
    "end": "1505240"
  },
  {
    "text": "prepared we've loaded it but we actually haven't start we haven't called embed yet so basically we have this JavaScript",
    "start": "1505240",
    "end": "1511000"
  },
  {
    "text": "where when the user clicks update account we immediately call embed right then at that exact moment for the",
    "start": "1511000",
    "end": "1517559"
  },
  {
    "text": "purposes of displaying this model so we had this sort of reusable model that we were using for various places and we",
    "start": "1517559",
    "end": "1523799"
  },
  {
    "text": "decided we wanted to reuse it here and uh rather than just going and pulling in a JavaScript modal Library like yeah",
    "start": "1523799",
    "end": "1529480"
  },
  {
    "text": "we'll just embed an Elm application in there because as we've seen so far it doesn't actually take that much so this",
    "start": "1529480",
    "end": "1535039"
  },
  {
    "text": "whole thing right here is just the the embedded Elm application and it's triggered on the fly when the user",
    "start": "1535039",
    "end": "1540200"
  },
  {
    "text": "clicks update so there's nothing saying that you have to start at this service right when the page does you can do it lazily but I mentioned that this is an",
    "start": "1540200",
    "end": "1547080"
  },
  {
    "text": "example of multiple things so once you've associated with a clever account which was one of the buttons we saw",
    "start": "1547080",
    "end": "1552360"
  },
  {
    "text": "previously over here um you can then uh later on change your mind and say oh I",
    "start": "1552360",
    "end": "1557960"
  },
  {
    "text": "actually want to remove my association with that clever account and this is also an Elm application um again we had",
    "start": "1557960",
    "end": "1565039"
  },
  {
    "text": "basically a service written that was for dealing with clever stuff and we wanted to reuse it so we just said hey let's",
    "start": "1565039",
    "end": "1570320"
  },
  {
    "text": "just make this one little button a lazy loaded Elm application so when the user clicks it we just spin up an Elm",
    "start": "1570320",
    "end": "1575919"
  },
  {
    "text": "application and go and disassociate them from clever after of course bringing up a modal which uh again is reusing that",
    "start": "1575919",
    "end": "1582960"
  },
  {
    "text": "same modal code so this is one page that has multiple Elm applications running on it and not only that but it's not even",
    "start": "1582960",
    "end": "1588760"
  },
  {
    "text": "running any of them until you actually click on something specific that needs to do that particular interaction another way you can do this",
    "start": "1588760",
    "end": "1595720"
  },
  {
    "start": "1594000",
    "end": "1648000"
  },
  {
    "text": "uh is to use Elm just for business logic so you don't actually have to embed anything visual on the page if you don't",
    "start": "1595720",
    "end": "1601399"
  },
  {
    "text": "want to um this is actually how we got started so uh you can say app is elmy",
    "start": "1601399",
    "end": "1607240"
  },
  {
    "text": "app. worker and so worker basically works the same way as everything we've been talking about where you can do send",
    "start": "1607240",
    "end": "1612640"
  },
  {
    "text": "and subscribe to communicate back and forth between JavaScript and Elm but worker just doesn't embed itself in an",
    "start": "1612640",
    "end": "1618520"
  },
  {
    "text": "element it just sits there running and is basically sort of elm as a service for business logic and the reason that",
    "start": "1618520",
    "end": "1624120"
  },
  {
    "text": "we did this uh as as our introduction to Elm this was actually the very first thing that we did was we had a big bucket of thorny business logic that was",
    "start": "1624120",
    "end": "1630720"
  },
  {
    "text": "really hard to maintain and by pting it to Elm because Elm has all these nice guarantees and this nice compiler um it",
    "start": "1630720",
    "end": "1636440"
  },
  {
    "text": "became a lot easier to maintain when we when we converted it from JavaScript to Elm so here we have the idea of",
    "start": "1636440",
    "end": "1642279"
  },
  {
    "text": "javascript's in charge of the Dom but elm's just over here as a service for business logic and uh this is how we got",
    "start": "1642279",
    "end": "1648720"
  },
  {
    "start": "1648000",
    "end": "1704000"
  },
  {
    "text": "started um second to last way that we can uh we can do this is just using Elm",
    "start": "1648720",
    "end": "1654000"
  },
  {
    "text": "as a dropin component so here's an example of doing this in react so we're saying import Elm from react Elm",
    "start": "1654000",
    "end": "1660760"
  },
  {
    "text": "components which is an mpm Library that's designed for making it so you can just drop Elm applications into react",
    "start": "1660760",
    "end": "1666519"
  },
  {
    "text": "applications um we've got something called chat where we've got let's assume some chat room and um basically uh this",
    "start": "1666519",
    "end": "1672720"
  },
  {
    "text": "right here is the compiled Elm code so we we'd run Elm make to to gener generate this compile JS we've imported",
    "start": "1672720",
    "end": "1679519"
  },
  {
    "text": "this library and then somewhere down below we have a react component whose render function says Hey I want to",
    "start": "1679519",
    "end": "1685080"
  },
  {
    "text": "return one of these Elm uh components and basically um all this is doing is",
    "start": "1685080",
    "end": "1691440"
  },
  {
    "text": "it's doing the stuff that we just talked about except instead of embedding in some predetermined div on the static",
    "start": "1691440",
    "end": "1698120"
  },
  {
    "text": "HTML it's embedding in the actual element of that um of that react component and so this Library react Elm",
    "start": "1698120",
    "end": "1706320"
  },
  {
    "start": "1704000",
    "end": "1719000"
  },
  {
    "text": "components is available on npn and here is the entire source code of it it's just really not that much all it's doing",
    "start": "1706320",
    "end": "1711440"
  },
  {
    "text": "is just basically the stuff that we just talked about and then some basic prop stuff in case you want to pass ports in",
    "start": "1711440",
    "end": "1717200"
  },
  {
    "text": "and uh and that's really all there is to it um now this idea of having a JS",
    "start": "1717200",
    "end": "1722720"
  },
  {
    "start": "1719000",
    "end": "1751000"
  },
  {
    "text": "wrapper component around an L map is not unique to react right any anytime we have this ability to communicate back",
    "start": "1722720",
    "end": "1729039"
  },
  {
    "text": "and forth between these things it doesn't matter if it's react if it's angular if it's Ember view meteor um",
    "start": "1729039",
    "end": "1734760"
  },
  {
    "text": "anytime you have this conceptual idea of a self contain component with its own state that can do its own side effects",
    "start": "1734760",
    "end": "1740159"
  },
  {
    "text": "and things like that an El application can be all of those things and it can communicate back and forth with the",
    "start": "1740159",
    "end": "1745559"
  },
  {
    "text": "rapper component which in turn can then communicate with the library or framework however it's used to doing",
    "start": "1745559",
    "end": "1751360"
  },
  {
    "start": "1751000",
    "end": "1812000"
  },
  {
    "text": "that but the most powerful idea of this entire talk is a the answer to the",
    "start": "1751360",
    "end": "1757320"
  },
  {
    "text": "question how far can we run with this so we talked earlier about how the virtual",
    "start": "1757320",
    "end": "1762880"
  },
  {
    "text": "Dom is conceptually some data that represents how you want the page to look",
    "start": "1762880",
    "end": "1769039"
  },
  {
    "text": "then we also talked about how commands are some data that represents conceptually some effect that you want",
    "start": "1769039",
    "end": "1775640"
  },
  {
    "text": "to run so we've got here's some data that describes how I want the page to look and we've got here's some data that",
    "start": "1775640",
    "end": "1781000"
  },
  {
    "text": "describes some effect that I want to have happen well interestingly all we've been talking about here is how to",
    "start": "1781000",
    "end": "1787600"
  },
  {
    "text": "communicate between Elm and JavaScript using data so that we can preserve guarantees but we also know from the elm",
    "start": "1787600",
    "end": "1794120"
  },
  {
    "text": "architecture and the fact that this is how our entire Elm programs are built our entire 100,000 lines of elm code are",
    "start": "1794120",
    "end": "1799679"
  },
  {
    "text": "all built around this fundamental idea of representing effects as data and as Dom updates as data that we can use that",
    "start": "1799679",
    "end": "1807679"
  },
  {
    "text": "in in the uh context of sending data to and from JavaScript and telling JavaScript not just here's what I want",
    "start": "1807679",
    "end": "1814080"
  },
  {
    "text": "you to know but actually telling JavaScript in great detail here's what I want you to do so here's an example of",
    "start": "1814080",
    "end": "1821120"
  },
  {
    "text": "that let's say we've got an L map we've got a Javascript app sending data back and forth but what if the data we're",
    "start": "1821120",
    "end": "1826200"
  },
  {
    "text": "sending back and forth look something like this a flux action or a Redux",
    "start": "1826200",
    "end": "1831480"
  },
  {
    "text": "action so you can have a Javascript app that's powered by flux or Redux or something like that and the data that's",
    "start": "1831480",
    "end": "1838120"
  },
  {
    "text": "being sent back and forth is these actual descriptions of specific things that we want done parameterized with",
    "start": "1838120",
    "end": "1844240"
  },
  {
    "text": "specific pieces of data for how to do them as we've seen from the Elma architecture this is all we actually",
    "start": "1844240",
    "end": "1849799"
  },
  {
    "text": "need to set up a fully fledged communication between the two and the best part about this is doing it this",
    "start": "1849799",
    "end": "1855880"
  },
  {
    "text": "way it keeps all of our guarantees intact it's still this fundamental idea of client and server so we can talk to",
    "start": "1855880",
    "end": "1861919"
  },
  {
    "text": "JavaScript we can interoperate with JavaScript without worrying about things crashing so um if you're interested in",
    "start": "1861919",
    "end": "1868360"
  },
  {
    "start": "1866000",
    "end": "1940000"
  },
  {
    "text": "some more resources on this topic I you a few to recommend uh so one is guide. l.org this is the official Elm guide",
    "start": "1868360",
    "end": "1874960"
  },
  {
    "text": "It's got sort of from beginner tutorials all the way up through interop and everything in between there's a blog post on the elm website called how to",
    "start": "1874960",
    "end": "1881399"
  },
  {
    "text": "use Elm at work and it describes basically the the the react example of embedding Elm in a um and a react",
    "start": "1881399",
    "end": "1888600"
  },
  {
    "text": "component um pragmatic Studio has a free course on integrating Elm into existing JavaScript applications highly recommend",
    "start": "1888600",
    "end": "1895519"
  },
  {
    "text": "them I I've heard really great things about like lots of people have gotten into Elm by using their courses and this one's free um uh Shameless plug I'm",
    "start": "1895519",
    "end": "1903320"
  },
  {
    "text": "writing a book for Manning called element action uh it's currently available for Meep uh the full version",
    "start": "1903320",
    "end": "1908399"
  },
  {
    "text": "should be done by the end of the year um frontend Masters I also did a thing for them which includes a section on",
    "start": "1908399",
    "end": "1913919"
  },
  {
    "text": "JavaScript interrupt that goes into more detail on specific implementation stuff um than what we just did um if you're",
    "start": "1913919",
    "end": "1921200"
  },
  {
    "text": "looking for Elm training I recommend Chicago native Luke Westby who is awesome uh he he works for humble spark",
    "start": "1921200",
    "end": "1927720"
  },
  {
    "text": "and he's actually the creator of the Ellie application that we looked at earlier so um if this whole thing which",
    "start": "1927720",
    "end": "1933399"
  },
  {
    "text": "is built in Elm appeals to you and uh seems like something that you would like to have uh in a trainer I would",
    "start": "1933399",
    "end": "1939159"
  },
  {
    "text": "definitely hit Luke up okay so to sum up we start with lots of JavaScript and",
    "start": "1939159",
    "end": "1945000"
  },
  {
    "start": "1940000",
    "end": "1977000"
  },
  {
    "text": "production our goal is to get to elen production and the way that we can do that is using nothing more than this this is all it",
    "start": "1945000",
    "end": "1951600"
  },
  {
    "text": "takes to get your first Elm in production okay you also have to write some Elm code but as far as the JavaScript side goes this is it um all",
    "start": "1951600",
    "end": "1958760"
  },
  {
    "text": "you need is some element and some way to render into it and then from there all of the tactics we've been talking about",
    "start": "1958760",
    "end": "1964039"
  },
  {
    "text": "this entire time work out just fine so plant a seed watch it grow thanks very",
    "start": "1964039",
    "end": "1972960"
  },
  {
    "text": "much",
    "start": "1976039",
    "end": "1979039"
  }
]