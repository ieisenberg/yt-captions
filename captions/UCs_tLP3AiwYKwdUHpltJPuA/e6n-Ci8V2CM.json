[
  {
    "start": "0",
    "end": "185000"
  },
  {
    "text": "[Music]",
    "start": "3520",
    "end": "7840"
  },
  {
    "text": "and the suspense for non-english non-native english-speakers the sincere",
    "start": "13639",
    "end": "19350"
  },
  {
    "text": "there's a saying in English that imitation is the sincerest form of flattery so it's imitation that we're going to be",
    "start": "19350",
    "end": "25769"
  },
  {
    "text": "talking about today do you mean imitation or stealing well yeah but they",
    "start": "25769",
    "end": "32668"
  },
  {
    "text": "say about what did Picasso say good artist a good artists borrow great",
    "start": "32669",
    "end": "38730"
  },
  {
    "text": "artists steal okay I'm Morrison after Lin and I put these things up to satisfy my",
    "start": "38730",
    "end": "45989"
  },
  {
    "text": "insecurities and can I reassure me that I'm that I really should be talking to you were a couple of books and some",
    "start": "45989",
    "end": "52590"
  },
  {
    "text": "community memberships Java champions so and as of ten minutes ago I'm happy to",
    "start": "52590",
    "end": "57690"
  },
  {
    "text": "announce I'm now a developer and technology evangelist for CDG group so",
    "start": "57690",
    "end": "63570"
  },
  {
    "text": "that I have a job first time in 25 years congratulations I'm not sure how I'm",
    "start": "63570",
    "end": "69720"
  },
  {
    "text": "gonna take the discipline does CDG means shall to go see you may be all right and",
    "start": "69720",
    "end": "78020"
  },
  {
    "text": "my name is Jose a are also I'm also a Java champion just as you are and also Java Rockstar which is a lost tight or",
    "start": "78020",
    "end": "85920"
  },
  {
    "text": "in fact because those were they has been replaced by our code and I just put here",
    "start": "85920",
    "end": "93900"
  },
  {
    "text": "set of links if you're interested in some Java technical content and stuff there's a YouTube channel here with some",
    "start": "93900",
    "end": "100829"
  },
  {
    "text": "hopefully interesting content and also some github rubbish put on repository",
    "start": "100829",
    "end": "107130"
  },
  {
    "text": "that you can download and and clone some people do that sometimes and different",
    "start": "107130",
    "end": "112470"
  },
  {
    "text": "things and that's it and of course the slides of this presentation will be published by the conference and I also",
    "start": "112470",
    "end": "117750"
  },
  {
    "text": "will also put them usually on some SlideShare account so you have a link to",
    "start": "117750",
    "end": "123180"
  },
  {
    "text": "this thai-style cam there and you have something more to steal us I do have something more i've got yet",
    "start": "123180",
    "end": "128640"
  },
  {
    "text": "another announcement so this announcement is about edinburgh and j",
    "start": "128640",
    "end": "134580"
  },
  {
    "text": "alba which is an unconference for people who aren't familiar with the idea of an unconference it's a place like a",
    "start": "134580",
    "end": "140250"
  },
  {
    "text": "conference except without set a set time table and and and prepared talks it's",
    "start": "140250",
    "end": "145920"
  },
  {
    "text": "where people come together and organize themselves and what happens in an unconference is the part that many",
    "start": "145920",
    "end": "153450"
  },
  {
    "text": "people think is the most important part of conferences like this which are the hallway conversations so it's hallway",
    "start": "153450",
    "end": "159870"
  },
  {
    "text": "conversations and outings it's a family friendly family friendly event you may have heard of jaikrit it's kind of",
    "start": "159870",
    "end": "166020"
  },
  {
    "text": "modeled on jaikrit but it's because it's an edinburgh it's different it'll be running this year for the third",
    "start": "166020",
    "end": "171810"
  },
  {
    "text": "time from the 7th to the 9th of May and if you want to get into it then the thing to do it's to go to jail but Scott",
    "start": "171810",
    "end": "178290"
  },
  {
    "text": "and pre-register there ok I think that's probably enough announcements ok right",
    "start": "178290",
    "end": "183900"
  },
  {
    "text": "so what's this talk about it's about functional programming and the influences had on object-oriented",
    "start": "183900",
    "end": "190290"
  },
  {
    "start": "185000",
    "end": "255000"
  },
  {
    "text": "programming so functional programming has been admired for a long time by",
    "start": "190290",
    "end": "196620"
  },
  {
    "text": "theorists in the in the programming community I've been around for programmers for ages and they're always",
    "start": "196620",
    "end": "202050"
  },
  {
    "text": "very very smug about what about what they do because they think that their that their discipline is an elegant and",
    "start": "202050",
    "end": "210420"
  },
  {
    "text": "mathematically sound the various features make functional programs really",
    "start": "210420",
    "end": "216570"
  },
  {
    "text": "really nice to work with higher-order functions which have been around really since the beginning of programming",
    "start": "216570",
    "end": "222150"
  },
  {
    "text": "parametric polymorphism which we know offers generics and pattern matching or all of these things all of these things",
    "start": "222150",
    "end": "228720"
  },
  {
    "text": "have been in a set part of functional programming so for decades often that's",
    "start": "228720",
    "end": "235200"
  },
  {
    "text": "not practicable because it tends to deal with the immutability an awful lot of structure copying and so the result of",
    "start": "235200",
    "end": "243209"
  },
  {
    "text": "that is that functional programming has not been entirely of an academic pursuit",
    "start": "243209",
    "end": "249600"
  },
  {
    "text": "but it's stayed on the margins of mains of mainstream programming object-oriented languages by contrast I",
    "start": "249600",
    "end": "256829"
  },
  {
    "start": "255000",
    "end": "453000"
  },
  {
    "text": "have really successful since the 1980s they've had some great things about them subtype polymorphism which we know as",
    "start": "256829",
    "end": "263039"
  },
  {
    "text": "inheritance strong static typing Java definitely has always had automatic",
    "start": "263039",
    "end": "268470"
  },
  {
    "text": "memory management which has been a huge boon to to programmers well to non",
    "start": "268470",
    "end": "273840"
  },
  {
    "text": "functional programmers functional programmers get it for free but it's very very expensive so it's like free",
    "start": "273840",
    "end": "279300"
  },
  {
    "text": "but expensive they don't have to work on it but the result is that programs are very memory hungry so object oriented",
    "start": "279300",
    "end": "285780"
  },
  {
    "text": "languages have have been very successful but they've always suffered from feature",
    "start": "285780",
    "end": "292139"
  },
  {
    "text": "Envy because the mathematical elegance of the of some of the aspects of",
    "start": "292139",
    "end": "299240"
  },
  {
    "text": "functional programming have just always been something we wanted here we are so",
    "start": "299240",
    "end": "311870"
  },
  {
    "text": "how are the features from functional programming come into come into our",
    "start": "311870",
    "end": "317490"
  },
  {
    "text": "world the starting point really is was the pizza paper in 1997 I think Phil waddler",
    "start": "317490",
    "end": "326509"
  },
  {
    "text": "I'm a friend of mine in Edinburgh I heard from one of his students that there was this wizzy new language called",
    "start": "326509",
    "end": "332460"
  },
  {
    "text": "Java which was really taking over he's a function programmer from way back he's and he's a very big name one of the",
    "start": "332460",
    "end": "338520"
  },
  {
    "text": "designers of Haskell and his student told him you should get in on this and so he got together with Martin Turkey",
    "start": "338520",
    "end": "345120"
  },
  {
    "text": "and they wrote the pizza paper they wrote the paper as you can see called",
    "start": "345120",
    "end": "351120"
  },
  {
    "text": "pizza into Java and there's no nothing behind the name they just wanted something food-related and they took",
    "start": "351120",
    "end": "356820"
  },
  {
    "text": "three features the ones that were on previous slide generics higher-order functions and pattern matching to see how could they",
    "start": "356820",
    "end": "363900"
  },
  {
    "text": "fit these into an object-oriented framework and particularly Java so the",
    "start": "363900",
    "end": "369810"
  },
  {
    "text": "the this was this paper did itself didn't go anywhere much but it was",
    "start": "369810",
    "end": "375419"
  },
  {
    "text": "foundational because it went on they went on to produce something called generic Java and this was a",
    "start": "375419",
    "end": "380880"
  },
  {
    "text": "collaboration with Sun Microsystems because Sun was interested in with the ideas in pizza and Martin and Phil got",
    "start": "380880",
    "end": "388650"
  },
  {
    "text": "together with Gilad bracha and David Stoudemire and they and they with",
    "start": "388650",
    "end": "394620"
  },
  {
    "text": "the with generic Java they thought very specifically about how they could implement those features in Java and the",
    "start": "394620",
    "end": "401159"
  },
  {
    "text": "result of that was eventually that well straightaway we we're going to describe",
    "start": "401159",
    "end": "406710"
  },
  {
    "text": "how that was quite a difficult process generic Java had to make a lot of compromises we'll talk about those",
    "start": "406710",
    "end": "411780"
  },
  {
    "text": "because they're very relevant to Java programmers that why things are the way they are now and Martin Luther skeet was",
    "start": "411780",
    "end": "418620"
  },
  {
    "text": "frustrated enough about this too to go off and write and invent Scala and we'll",
    "start": "418620",
    "end": "428280"
  },
  {
    "text": "talk about that as well gilad bracha who was working for Sun Microsystems went on with the help of",
    "start": "428280",
    "end": "435330"
  },
  {
    "text": "with the help of a dusky and waddler in the expert group to create generics",
    "start": "435330",
    "end": "441270"
  },
  {
    "text": "which eventually got into Java Java generics which eventually got into Java in 2004 so generic Java was like an",
    "start": "441270",
    "end": "449550"
  },
  {
    "text": "intermediate stage and we'll take a look at that so Java took three courses to",
    "start": "449550",
    "end": "456270"
  },
  {
    "start": "453000",
    "end": "583000"
  },
  {
    "text": "eat the pizza we got generics in 2004 after a long delay you'll see the six years between",
    "start": "456270",
    "end": "462630"
  },
  {
    "text": "the between generic Java and and and and Java 5 higher-order functions didn't",
    "start": "462630",
    "end": "468539"
  },
  {
    "text": "arrive until Java 8 in 2014 and pattern matching is real soon now right it's not",
    "start": "468539",
    "end": "476550"
  },
  {
    "text": "completely soon but it's definitely under work currently under the umbrella of the so called amber project maybe",
    "start": "476550",
    "end": "483150"
  },
  {
    "text": "some of you have heard of that and this is something that is going to come to be to be made available in the Java",
    "start": "483150",
    "end": "488190"
  },
  {
    "text": "language in the next few years we could say yeah piece by piece just just like a pizza right the first",
    "start": "488190",
    "end": "494550"
  },
  {
    "text": "piece will be should be available we're going to talk more about that in the following as the the record project that",
    "start": "494550",
    "end": "501000"
  },
  {
    "text": "should be made available as a preview feature in Java 14 released in March and we should have the early access versions",
    "start": "501000",
    "end": "507539"
  },
  {
    "text": "quite soon now she doesn't know the American idiom real soon now which means",
    "start": "507539",
    "end": "513078"
  },
  {
    "text": "almost never but we are more hopeful than that for pattern matching and pattern matching in in Java Scala by",
    "start": "513079",
    "end": "520560"
  },
  {
    "text": "contrast didn't have the we're going to describe why so hard or at least one case why it was",
    "start": "520560",
    "end": "527010"
  },
  {
    "text": "why Java has been so slow in adopting the ideas in pizza Scala didn't have the",
    "start": "527010",
    "end": "533520"
  },
  {
    "text": "the the the basic problem is backward compatibility Java has always been really determined to maintain backward",
    "start": "533520",
    "end": "539670"
  },
  {
    "text": "compatibility and that has really pushed these features sometimes a long way out of shape scholar didn't have these",
    "start": "539670",
    "end": "545220"
  },
  {
    "text": "problems that's why that's why I desk he went off and started again from scratch to avoid those constraints and and so",
    "start": "545220",
    "end": "553400"
  },
  {
    "text": "Scala was able to absorb all these features in one go and and and was up",
    "start": "553400",
    "end": "559620"
  },
  {
    "text": "and running in 2004 okay so we're going to look at each one of these features in a bit more detail now to try to",
    "start": "559620",
    "end": "566340"
  },
  {
    "text": "understand why they are the way they are in the different in the different languages part one generics so we've got",
    "start": "566340",
    "end": "572760"
  },
  {
    "text": "the three things generics enclosures and and pattern matching so the problem with",
    "start": "572760",
    "end": "578730"
  },
  {
    "text": "the the biggest problems were faced with generics there's too big tube they face",
    "start": "578730",
    "end": "583770"
  },
  {
    "start": "583000",
    "end": "868000"
  },
  {
    "text": "too big problems in introducing generics into Java in 1996 and they are still",
    "start": "583770",
    "end": "589770"
  },
  {
    "text": "problems that continue now we what you want to write when you want to create an",
    "start": "589770",
    "end": "594780"
  },
  {
    "text": "one time you want to create if you've got a list of integer and you want to",
    "start": "594780",
    "end": "600540"
  },
  {
    "text": "create an array of integer out of that list of integer you wouldn't you would love to be able to write what's in the",
    "start": "600540",
    "end": "605760"
  },
  {
    "text": "top box there but you can't do it what you have to write is what's in the bottom box why is that the answer is",
    "start": "605760",
    "end": "612660"
  },
  {
    "text": "because you have to have some way when you construct an array you have to have some way of telling the array what its",
    "start": "612660",
    "end": "620550"
  },
  {
    "text": "runtime type is going to be and there are no runtime types that were never",
    "start": "620550",
    "end": "625650"
  },
  {
    "text": "that never have been runtime types in the java virtual machine and one of the",
    "start": "625650",
    "end": "630930"
  },
  {
    "text": "conditions of of adopting generics in Java in Java 5 eventually was that they",
    "start": "630930",
    "end": "638430"
  },
  {
    "text": "weren't going to change the virtual machine to to hold runtime types so this so the when you create a new integer",
    "start": "638430",
    "end": "644640"
  },
  {
    "text": "array in the bottom in the bottom code there you're creating the the class information at runtime that's going to",
    "start": "644640",
    "end": "651360"
  },
  {
    "text": "be needed to make the new to make a temp to make the new array and that's quite",
    "start": "651360",
    "end": "656580"
  },
  {
    "text": "frustrating in the lack of the lack of the presence of runtime type",
    "start": "656580",
    "end": "662910"
  },
  {
    "text": "information leads to a lot of problems like you can't create an instance of you",
    "start": "662910",
    "end": "667980"
  },
  {
    "text": "can't do an instance off test and you can't create you very sort of things",
    "start": "667980",
    "end": "674009"
  },
  {
    "text": "that's well we'll come to will come to some of them so the second problem that's the first problem was no runtime",
    "start": "674009",
    "end": "679589"
  },
  {
    "text": "type of information and the second problem was the way that they did they'd implemented array subtyping in from jdk",
    "start": "679589",
    "end": "687899"
  },
  {
    "text": "1 onwards and the reason you can write the code that's in the top box so this",
    "start": "687899",
    "end": "695309"
  },
  {
    "text": "in the box here that code says because int is an array of integer and it an",
    "start": "695309",
    "end": "703319"
  },
  {
    "text": "array of integer is a subtype of an array of number you can write the second line of that you can say number a number",
    "start": "703319",
    "end": "710639"
  },
  {
    "text": "array is going to be assigned an int array an integer array what would happen",
    "start": "710639",
    "end": "716069"
  },
  {
    "text": "if I want to add let's say a float through this numbers pointer we'll see that in a moment first of all let me say",
    "start": "716069",
    "end": "723300"
  },
  {
    "text": "this is a the important term here is covariance and what that means is if",
    "start": "723300",
    "end": "728639"
  },
  {
    "text": "integer is a subtype of number then an integer array is a subtype of a number array and they adopted covariance for",
    "start": "728639",
    "end": "735809"
  },
  {
    "text": "for arrays and the reason that they did that was so they could have generic",
    "start": "735809",
    "end": "741930"
  },
  {
    "text": "methods because what kind of Ally a language is it in which you cannot write a library method which will sort an",
    "start": "741930",
    "end": "747600"
  },
  {
    "text": "array of anything if you want to be able to sort an array of anything then you're gonna have to define it on object you",
    "start": "747600",
    "end": "753689"
  },
  {
    "text": "don't have to define that sort method on an object array and therefore integer array has to be a subtype of that and so",
    "start": "753689",
    "end": "760079"
  },
  {
    "text": "does what every other reference type that's going to be suitable and that's why they had to have covariance what was",
    "start": "760079",
    "end": "766709"
  },
  {
    "text": "your question my question is that since I have two pointers of different types the first one is a type array of number and the",
    "start": "766709",
    "end": "773910"
  },
  {
    "text": "second is array of integer so if I take those two pointers pointing to the same place in memory it should mean that I",
    "start": "773910",
    "end": "780209"
  },
  {
    "text": "should be able to put floats in an array of integer I'm fortunate through the number of pointer unfortunately you really can't",
    "start": "780209",
    "end": "786999"
  },
  {
    "text": "try to do that you can write the code that's in the box there if numbers is an array of of number then you could write",
    "start": "786999",
    "end": "794439"
  },
  {
    "text": "number zero equals 3.14 which is actually a double and this is bad news",
    "start": "794439",
    "end": "799449"
  },
  {
    "text": "because the rains know what their type is and and even though this is this has",
    "start": "799449",
    "end": "804639"
  },
  {
    "text": "a static type the variable numbers has a static type of numbers array it actually",
    "start": "804639",
    "end": "809679"
  },
  {
    "text": "knows that it really it's an integer array because because from the earlier example you saw that an array knows its",
    "start": "809679",
    "end": "816100"
  },
  {
    "text": "type at runtime it's the one thing that does carry a runtime type information so it's a it's an exception and you've",
    "start": "816100",
    "end": "823629"
  },
  {
    "text": "turned what should be a compile time error into a runtime exception this is",
    "start": "823629",
    "end": "828939"
  },
  {
    "text": "really a problem it's not a problem most people come across with arrays most of",
    "start": "828939",
    "end": "833980"
  },
  {
    "text": "the time because it's a bit obscure but they couldn't carry that forward into the into all the collections classes",
    "start": "833980",
    "end": "839019"
  },
  {
    "text": "when that when they when they genera fied things and so the lesson to take away from this is that covariance it's",
    "start": "839019",
    "end": "845589"
  },
  {
    "text": "only good for getting things out of a container if you start putting these into a container using code because when",
    "start": "845589",
    "end": "850749"
  },
  {
    "text": "you take things out of it out of a container you know what they're a subtype off but when you start put it when you try to put things into a",
    "start": "850749",
    "end": "856629"
  },
  {
    "text": "container and doesn't work so that was the so that's the second problem they",
    "start": "856629",
    "end": "864699"
  },
  {
    "text": "got around the first problem they've never got around the second problem I should say alright so that problem with",
    "start": "864699",
    "end": "870279"
  },
  {
    "start": "868000",
    "end": "970000"
  },
  {
    "text": "the race is still where they got around the first problem the lack of runtime type information by using something",
    "start": "870279",
    "end": "875319"
  },
  {
    "text": "called type erasure and the idea that was will do all the type checking will make sure that your program is strongly",
    "start": "875319",
    "end": "881620"
  },
  {
    "text": "typed correctly at compile time and then we're going to throw away all that all",
    "start": "881620",
    "end": "887110"
  },
  {
    "text": "the run all the type information and so at runtime every every genera Faiz",
    "start": "887110",
    "end": "895870"
  },
  {
    "text": "method and class it's going to be compatible with a non-generic ID one and the reason for that was I mean there's",
    "start": "895870",
    "end": "902290"
  },
  {
    "text": "the strong reason for doing that was you wouldn't have to have two versions of the libraries you could you could the",
    "start": "902290",
    "end": "908199"
  },
  {
    "text": "migration path was relatively easy you could genera phi your library classes",
    "start": "908199",
    "end": "913360"
  },
  {
    "text": "before your client code or your client code before library classes and this scheme ensured",
    "start": "913360",
    "end": "918850"
  },
  {
    "text": "compatibility regardless so this was actually really important for getting",
    "start": "918850",
    "end": "924610"
  },
  {
    "text": "Jeanette Jeanette --ax into into the language without it there wouldn't have been a migration path and without a",
    "start": "924610",
    "end": "929980"
  },
  {
    "text": "migration path the wouldn't Java wouldn't have had generic so it wouldn't have survived and so you know that the",
    "start": "929980",
    "end": "938560"
  },
  {
    "text": "type erasure in the generic Java is about removing this type T from this example for instance there this is all",
    "start": "938560",
    "end": "945640"
  },
  {
    "text": "the class that is parameterized by the T type and in fact if you look at the class file itself the T type is gone all",
    "start": "945640",
    "end": "953050"
  },
  {
    "text": "you have in a class file it's an older class that can old objects this is what type erasure is about and the",
    "start": "953050",
    "end": "959380"
  },
  {
    "text": "countermeasure would be graphite generics which is not something we have in Java so the problem is how does it",
    "start": "959380",
    "end": "966220"
  },
  {
    "text": "work because for instance when I write this kind of code I create this older",
    "start": "966220",
    "end": "971230"
  },
  {
    "start": "970000",
    "end": "1111000"
  },
  {
    "text": "string right and I'm not going to be able to put a number is this older of",
    "start": "971230",
    "end": "977890"
  },
  {
    "text": "string if I call all the set and pass a number for instance as a parameter I will have a an error at compile time the",
    "start": "977890",
    "end": "984850"
  },
  {
    "text": "compiler knows that this is this is going to be wrong and this is this is exactly the behavior I want to have",
    "start": "984850",
    "end": "990970"
  },
  {
    "text": "because I I want to be able to say that yes this is an old old string despite the fact that the JVM or the class file",
    "start": "990970",
    "end": "998470"
  },
  {
    "text": "doesn't know about it so how this is done well this is all handled by the",
    "start": "998470",
    "end": "1003570"
  },
  {
    "text": "compiler the compiler just checked the type by putting the cast in the right",
    "start": "1003570",
    "end": "1009300"
  },
  {
    "text": "places in a class file and just by making things work for me as a code",
    "start": "1009300",
    "end": "1014880"
  },
  {
    "text": "writer and the same goes when I want to put out an object from from my get method if I called older I'd get I do",
    "start": "1014880",
    "end": "1022830"
  },
  {
    "text": "not need to cast this object because the compiler knows that this is a string of character and will do the cast for me",
    "start": "1022830",
    "end": "1028050"
  },
  {
    "text": "because in fact what I really get from this get method is an object it is not a string of character so when you see",
    "start": "1028050",
    "end": "1034500"
  },
  {
    "text": "these casts like this you your hackles immediately rise you feel so how do I",
    "start": "1034500",
    "end": "1040530"
  },
  {
    "text": "know this is gonna be right I mean could I get a class cast exception from this well if I'm if I'm using this olders for",
    "start": "1040530",
    "end": "1046860"
  },
  {
    "text": "the row type without putting the typed in mission with it well yes I have I will",
    "start": "1046860",
    "end": "1052090"
  },
  {
    "text": "have a guess exception in some cases but only only though if you ignore the",
    "start": "1052090",
    "end": "1057460"
  },
  {
    "text": "warnings the unchecked one is their only warnings right so you can safely ignore them when we can suppress the walnut you",
    "start": "1057460",
    "end": "1063430"
  },
  {
    "text": "can suppress the warnings and we all do that yeah of course we do the the the",
    "start": "1063430",
    "end": "1068530"
  },
  {
    "text": "pizza paper had what it called I'm sorry I apologize on their behalf a cast-iron",
    "start": "1068530",
    "end": "1074440"
  },
  {
    "text": "guarantee and the cast-iron guarantee was if the if at compile time the types",
    "start": "1074440",
    "end": "1083290"
  },
  {
    "text": "of all checked out then then then a custards inserted by the compiler will",
    "start": "1083290",
    "end": "1089080"
  },
  {
    "text": "never fail at runtime but this there's more because in object-oriented",
    "start": "1089080",
    "end": "1094690"
  },
  {
    "text": "programming we have inheritance right inheritance brings another range of",
    "start": "1094690",
    "end": "1100600"
  },
  {
    "text": "problems with this kind of type erasure stuff and another reward problem that will bring more hacks to the classifier",
    "start": "1100600",
    "end": "1107410"
  },
  {
    "text": "to fix them let us see just one of them won't smell them suppose we have a string older class that extends the",
    "start": "1107410",
    "end": "1114520"
  },
  {
    "start": "1111000",
    "end": "1458000"
  },
  {
    "text": "older of string and of course in my string older class what I want to do is override them so this is object-oriented",
    "start": "1114520",
    "end": "1121600"
  },
  {
    "text": "programming override this set method that takes a string as a parameter but the problem is",
    "start": "1121600",
    "end": "1127390"
  },
  {
    "text": "that in this older string object that I'm in everything I do not have a set",
    "start": "1127390",
    "end": "1135309"
  },
  {
    "text": "string method I have a set object method so this set string method is not going to override the set object method",
    "start": "1135309",
    "end": "1141220"
  },
  {
    "text": "because they don't have the same signature which may be an issue so guess what there is a I think I think yes",
    "start": "1141220",
    "end": "1149800"
  },
  {
    "text": "there's a secret hack in fact in a class file don't they always say one every problem in computing can always be",
    "start": "1149800",
    "end": "1155710"
  },
  {
    "text": "solved by one extra level of indirection absolutely here we go which which is a polite way of saying one more hat right",
    "start": "1155710",
    "end": "1163570"
  },
  {
    "text": "so if I check the class file and this is very easily done they're plugins in every kind of IDE to do that you will",
    "start": "1163570",
    "end": "1170020"
  },
  {
    "text": "see that yes there is this set string method but then there is another method that has been added which is the set",
    "start": "1170020",
    "end": "1175870"
  },
  {
    "text": "object method which is just there to override the set object method from the",
    "start": "1175870",
    "end": "1181030"
  },
  {
    "text": "older class and it's not a real mess well it is a real method but it is a synthetic method and you cannot create",
    "start": "1181030",
    "end": "1187720"
  },
  {
    "text": "synthetic method by yourself synthetic is not a keyword from the java language so you cannot put that that kind of",
    "start": "1187720",
    "end": "1194140"
  },
  {
    "text": "keyword in your in your dot java the source file of course this method is only created by the compiler and by the",
    "start": "1194140",
    "end": "1200590"
  },
  {
    "text": "way if you check the class that is called class you have a sorry the method method you have a synthetic property on",
    "start": "1200590",
    "end": "1208210"
  },
  {
    "text": "this which will tell you that this method isn't it's synthetic so what happens if suppose you have a method",
    "start": "1208210",
    "end": "1214360"
  },
  {
    "text": "that gets an order of string as a parameter so you get that that pointer",
    "start": "1214360",
    "end": "1219610"
  },
  {
    "text": "old of string and they say we are we are just compiling the code and on this older string you are calling the set",
    "start": "1219610",
    "end": "1225370"
  },
  {
    "text": "method that takes a string as a parameter great but now it turns out that at runtime this object is in fact",
    "start": "1225370",
    "end": "1232540"
  },
  {
    "text": "an instance of string older so what you really want is not that set object method from the",
    "start": "1232540",
    "end": "1238150"
  },
  {
    "text": "older of string to be called but the set string method from your string holder to be called so you have this inheritance",
    "start": "1238150",
    "end": "1245110"
  },
  {
    "text": "problem there so what is what is really happening is that the Java Virtual Machine sees that the set object from",
    "start": "1245110",
    "end": "1252280"
  },
  {
    "text": "the audio string with a class is overridden by this hacked synthetic",
    "start": "1252280",
    "end": "1258130"
  },
  {
    "text": "bridge method set object so it's going to call that method instead of the method from the old world string and you",
    "start": "1258130",
    "end": "1264220"
  },
  {
    "text": "can see here the the bytecode of this method it will first check if the parameter is really a string and if it's",
    "start": "1264220",
    "end": "1271210"
  },
  {
    "text": "not you have a class cast exception and if it's a string you can see that there is an invoke virtual set string so it",
    "start": "1271210",
    "end": "1278170"
  },
  {
    "text": "will redirect the call to the proper set ring method so this is the how this",
    "start": "1278170",
    "end": "1283450"
  },
  {
    "text": "synthetic hack is working really but we are not quite done with it because",
    "start": "1283450",
    "end": "1289240"
  },
  {
    "text": "there's another hack to be done if you want this kind of ugly stuff to work which is the other one and now it turns",
    "start": "1289240",
    "end": "1295840"
  },
  {
    "text": "out that we have we have you know in Java there is the world of the compiler and there is the world of the JVM and it",
    "start": "1295840",
    "end": "1302860"
  },
  {
    "text": "turns out that sometimes the JVM and the compiler do not really work exactly the same for instance in a signature in a",
    "start": "1302860",
    "end": "1309700"
  },
  {
    "text": "world of the compiler it's just the name of the method plus the parameter the",
    "start": "1309700",
    "end": "1314890"
  },
  {
    "text": "return type is not taken into account so it means that if you have if you want to overload a method you cannot have two",
    "start": "1314890",
    "end": "1321289"
  },
  {
    "text": "different returns type you can have a different set of parameters but that's it but it's not the case for the JVM for",
    "start": "1321289",
    "end": "1327049"
  },
  {
    "text": "the JVM the signature holds the return type of the method so you can have two methods with different returns type and",
    "start": "1327049",
    "end": "1334279"
  },
  {
    "text": "it turns out that here it's the case once more because I have this method",
    "start": "1334279",
    "end": "1339409"
  },
  {
    "text": "that called get that returns the string in the string holder class and the",
    "start": "1339409",
    "end": "1345230"
  },
  {
    "text": "extended class which is the older string just have a get method with an object as",
    "start": "1345230",
    "end": "1350269"
  },
  {
    "text": "a return type which is obviously not the same but the overridden of those two method will work with the same kind of",
    "start": "1350269",
    "end": "1356600"
  },
  {
    "text": "hack just because it has to work in that way you want the second method the get method from the string holder to",
    "start": "1356600",
    "end": "1362179"
  },
  {
    "text": "override the other one so those are the kind of acts that were needed to be",
    "start": "1362179",
    "end": "1367249"
  },
  {
    "text": "implemented in the language both in the compiler and in a JVM to be able to make",
    "start": "1367249",
    "end": "1372830"
  },
  {
    "text": "those generic work we just talked about arrays Maurice and it turns out that we",
    "start": "1372830",
    "end": "1379309"
  },
  {
    "text": "with arrays we have one more category of problems and acts to be made is that if",
    "start": "1379309",
    "end": "1385909"
  },
  {
    "text": "you want to to tell an array of all the string from an array of order of",
    "start": "1385909",
    "end": "1391340"
  },
  {
    "text": "integers when you count because in the class file what you see is an array of",
    "start": "1391340",
    "end": "1396799"
  },
  {
    "text": "elders right and if you have an array of two arrays of orders pointing to the",
    "start": "1396799",
    "end": "1402710"
  },
  {
    "text": "same memory place in your JVM you don't",
    "start": "1402710",
    "end": "1408559"
  },
  {
    "text": "have any more information to throw this ugly erased or exception so it's not possible to tell an array of integer",
    "start": "1408559",
    "end": "1415100"
  },
  {
    "text": "from an array of string so if you want this arrest or exception to be thrown then you cannot really really do that so",
    "start": "1415100",
    "end": "1422570"
  },
  {
    "text": "the decision that has been taken is in fact that arrays of generics are not",
    "start": "1422570",
    "end": "1427970"
  },
  {
    "text": "allowed in Java and we all know that if you should try to do it then you'll have you'll have a warning also telling you",
    "start": "1427970",
    "end": "1434330"
  },
  {
    "text": "that yeah this cannot be enforced by the compiler in fact the problem the basic",
    "start": "1434330",
    "end": "1439730"
  },
  {
    "text": "problem is the the the type scheme was a",
    "start": "1439730",
    "end": "1444739"
  },
  {
    "text": "device for Java in for a raise in 1.0 was just gonna always",
    "start": "1444739",
    "end": "1449880"
  },
  {
    "text": "be incompatible with property notification and we just have to live with the consequences of that absolutely",
    "start": "1449880",
    "end": "1455480"
  },
  {
    "text": "and how about lists well it turns out that we have the same kind of problem with lists the problem you sewed with",
    "start": "1455480",
    "end": "1461580"
  },
  {
    "start": "1458000",
    "end": "1537000"
  },
  {
    "text": "covariance and arrays right we know that list of integer cannot be a subtype of list of numbers odd this may",
    "start": "1461580",
    "end": "1470010"
  },
  {
    "text": "look but that didn't turns out that so it turns out that you cannot have this code to work it's just this is just the",
    "start": "1470010",
    "end": "1477330"
  },
  {
    "text": "same code if you made if you made lists covariant you'd have exactly the same",
    "start": "1477330",
    "end": "1483030"
  },
  {
    "text": "problem as we had with arrays and what was possible at compile time with array with the race was made not possible at",
    "start": "1483030",
    "end": "1491190"
  },
  {
    "text": "compile time with lists for some reason but then it turns out that if you want",
    "start": "1491190",
    "end": "1496910"
  },
  {
    "text": "overloading here with the sort method if you do not have this this extension",
    "start": "1496910",
    "end": "1502920"
  },
  {
    "text": "mechanism between the list of number or list of it engines means that you will need to have a sort method for any kind",
    "start": "1502920",
    "end": "1509370"
  },
  {
    "text": "any type of list you have write list of number list of integers little string etc what what you really want is to be",
    "start": "1509370",
    "end": "1516540"
  },
  {
    "text": "able to sort a list of comparable objects for instance or maybe just object and pass the comparator as a",
    "start": "1516540",
    "end": "1521880"
  },
  {
    "text": "second parameter so to get rid of this another very nice feature of the",
    "start": "1521880",
    "end": "1527850"
  },
  {
    "text": "generics that makes the fortune of every every kind of generic book writer ultra",
    "start": "1527850",
    "end": "1534000"
  },
  {
    "text": "now you have to introduce covariance somehow the we've seen that the",
    "start": "1534000",
    "end": "1541050"
  },
  {
    "start": "1537000",
    "end": "2002000"
  },
  {
    "text": "collections themselves can't be covariant because of the problem that we saw with arrays but somehow they had to",
    "start": "1541050",
    "end": "1546570"
  },
  {
    "text": "reintroduce covariance it happens with every language it's not it's not only it's not a java solution is kind of",
    "start": "1546570",
    "end": "1553800"
  },
  {
    "text": "idiosyncratic it's kind of a bit strange but it's but everybody gets this problem",
    "start": "1553800",
    "end": "1558930"
  },
  {
    "text": "so they invented somebody some something that everybody understands so well which is called wildcards in a generic type",
    "start": "1558930",
    "end": "1564930"
  },
  {
    "text": "system so you may have a list of object that extends numbers and then that list",
    "start": "1564930",
    "end": "1571410"
  },
  {
    "text": "can be extended with list of numbers list of integers list floats doubles etc and you name it so now you",
    "start": "1571410",
    "end": "1577890"
  },
  {
    "text": "can have a sort method made over over loadable none of you in the form of a list of",
    "start": "1577890",
    "end": "1587059"
  },
  {
    "text": "something that extends number and that wildcard query extends number is",
    "start": "1587059",
    "end": "1593809"
  },
  {
    "text": "indicates some unknown some fixed but unknown subtype of number it could be",
    "start": "1593809",
    "end": "1599669"
  },
  {
    "text": "number itself or it could be any or it could be any subtype of number and that's how covariance gets back in on",
    "start": "1599669",
    "end": "1605220"
  },
  {
    "text": "this on this occasion and we can use a in this case click covariance works here",
    "start": "1605220",
    "end": "1613980"
  },
  {
    "text": "because the sort method is only taking things out of the out of the collection I'm not putting them back here well if",
    "start": "1613980",
    "end": "1620429"
  },
  {
    "text": "you check the implementation of the sort method you will see that at some point you will need to put the data back inside the list and there we here you",
    "start": "1620429",
    "end": "1628500"
  },
  {
    "text": "have a cast another hack and internally internally the sort method will have to be type unsafe but at least it's hidden",
    "start": "1628500",
    "end": "1635039"
  },
  {
    "text": "in the library you don't need to you don't need to be type and safe as a when you're writing client code so you can",
    "start": "1635039",
    "end": "1642570"
  },
  {
    "text": "see what a lot of problems Java had with implementing with implementing generics mainly more than anything else was the",
    "start": "1642570",
    "end": "1650340"
  },
  {
    "text": "two big problems were no runtime type information this this type scheme for",
    "start": "1650340",
    "end": "1655409"
  },
  {
    "text": "arrays which suited Java one but didn't suit Java five so how about Scala then",
    "start": "1655409",
    "end": "1660809"
  },
  {
    "text": "weld you notice in Scala was free of constraints three the the Java constraints except for except for the",
    "start": "1660809",
    "end": "1668009"
  },
  {
    "text": "fact that we're still going to run on the Java Virtual Machine so one of those problems still remained no runtime type",
    "start": "1668009",
    "end": "1673919"
  },
  {
    "text": "information so they still had to use the the they were tied to aresia and they still use arisia but they could",
    "start": "1673919",
    "end": "1681419"
  },
  {
    "text": "at least define arrays on top of a on top of a new collections library and",
    "start": "1681419",
    "end": "1686519"
  },
  {
    "text": "they didn't have to be they didn't have to suffer the the horrors that the covariant type scheme for arrays induced",
    "start": "1686519",
    "end": "1694309"
  },
  {
    "text": "and now they had something new that they could do something better than anything",
    "start": "1694309",
    "end": "1699659"
  },
  {
    "text": "that Java has because they had because they were starting from scratch with a completely new collections library so",
    "start": "1699659",
    "end": "1705659"
  },
  {
    "text": "they could actually define this their structures according to what it used to expected to make of them while the",
    "start": "1705659",
    "end": "1712200"
  },
  {
    "text": "immutability everyone knows now immutability is good we're supposed to be we're supposed to",
    "start": "1712200",
    "end": "1717930"
  },
  {
    "text": "be using immutability wherever we can in our code so actually to have a an immutable data structures fits very",
    "start": "1717930",
    "end": "1724830"
  },
  {
    "text": "nicely with this coat with this idea that covariant data structures are ones",
    "start": "1724830",
    "end": "1730380"
  },
  {
    "text": "in which you want to be able to take things out so here's a so in the in the",
    "start": "1730380",
    "end": "1735540"
  },
  {
    "text": "in the box of code there you can see we've got a class pair here which is",
    "start": "1735540",
    "end": "1742770"
  },
  {
    "text": "immutable and so that that plus sign on the type says this type will only ever",
    "start": "1742770",
    "end": "1748500"
  },
  {
    "text": "be used covariantly because we're only ever going to be able to take things out of a pair it means that a pair of",
    "start": "1748500",
    "end": "1754140"
  },
  {
    "text": "integer really can be safely a subtype of a pair of number and what that means",
    "start": "1754140",
    "end": "1759840"
  },
  {
    "text": "is that you actually get much it means that the client code can look a lot better so there we can define pair of",
    "start": "1759840",
    "end": "1767610"
  },
  {
    "text": "any vowel we've defined a method to string on a pair of any vowel in Scala",
    "start": "1767610",
    "end": "1774240"
  },
  {
    "text": "and we haven't had T we haven't had to use a wild card or anything like a wild card at all we've shifted the covariance",
    "start": "1774240",
    "end": "1780840"
  },
  {
    "text": "from the from the call site to the declaration site for pair and if you",
    "start": "1780840",
    "end": "1786540"
  },
  {
    "text": "compare that with what you'd have to write in Java you can see the differences I've written something very",
    "start": "1786540",
    "end": "1791790"
  },
  {
    "text": "similar there and you can see that the to string method there I'm it's a deliberate misspelling so it doesn't",
    "start": "1791790",
    "end": "1797610"
  },
  {
    "text": "clash with just with the objective string the you can see that the that we've had to use variants at the at the",
    "start": "1797610",
    "end": "1805410"
  },
  {
    "text": "definition of the two string method there and that means every time you write a client method that that uses a",
    "start": "1805410",
    "end": "1815340"
  },
  {
    "text": "library class that had the you need you need to define the variants you need to",
    "start": "1815340",
    "end": "1820680"
  },
  {
    "text": "grapple with the wild cards so you've got to you've got to think about it as against the Scala Declaration site math",
    "start": "1820680",
    "end": "1828110"
  },
  {
    "text": "technique which means that the library writers have to deal with it and anybody who's looked at the signature of the",
    "start": "1828110",
    "end": "1834180"
  },
  {
    "text": "methods in the kadavo util collections those static methods they're the signatures are just quite difficult",
    "start": "1834180",
    "end": "1841350"
  },
  {
    "text": "they're really challenging because there's an awful lot of angle brackets down there's an awful lot of extends the",
    "start": "1841350",
    "end": "1846810"
  },
  {
    "text": "query extends and query super there pretty tough going and and then the",
    "start": "1846810",
    "end": "1852490"
  },
  {
    "text": "Scala version they matter they managed to MIT and look very very much simpler so declaration site variance which Scala",
    "start": "1852490",
    "end": "1859029"
  },
  {
    "text": "has is really a big improvement and I think there's some talk or there's a there's a JEP out there an improvement",
    "start": "1859029",
    "end": "1865029"
  },
  {
    "text": "an improvement document for which for introducing declaration site variance to",
    "start": "1865029",
    "end": "1870909"
  },
  {
    "text": "Java but they would need to have you would it's only gonna work with structures that you know what they're",
    "start": "1870909",
    "end": "1876639"
  },
  {
    "text": "going to be used for whether they're going to be immutable long they're not going to be immutable so that's so that",
    "start": "1876639",
    "end": "1882039"
  },
  {
    "text": "is a kind of quick run-through of the story with generics I mean that's part one part two is part two and part three",
    "start": "1882039",
    "end": "1888070"
  },
  {
    "text": "which are about closures and about pattern matching aren't such hard work because the constraints on what Java",
    "start": "1888070",
    "end": "1894580"
  },
  {
    "text": "could do answer answer severe generics was a feature that got bent out of shape",
    "start": "1894580",
    "end": "1899590"
  },
  {
    "text": "the most so closures the higher-order functions what what did Pete's to do",
    "start": "1899590",
    "end": "1905679"
  },
  {
    "text": "about that well the problem was that the Java type system here didn't just didn't",
    "start": "1905679",
    "end": "1911169"
  },
  {
    "text": "have function types functional languages have function types have functions as the first-class citizens they're as",
    "start": "1911169",
    "end": "1916419"
  },
  {
    "text": "important to the language as variables are or as orin orin Java's classes and",
    "start": "1916419",
    "end": "1921879"
  },
  {
    "text": "objects are but java doesn't have a concept of functions and generally speaking object-oriented languages don't",
    "start": "1921879",
    "end": "1927840"
  },
  {
    "text": "Scala did because they wanted to get away from this so the the the pizza",
    "start": "1927840",
    "end": "1933190"
  },
  {
    "text": "writers came up with a with a quite nice solution which has actually been the solution that everybody who works on the",
    "start": "1933190",
    "end": "1938950"
  },
  {
    "text": "JVM has adopted since Java Scala everybody else for each function they said we're going to create an abstract",
    "start": "1938950",
    "end": "1944590"
  },
  {
    "text": "class within a with an apply method it's very variants of this solution have",
    "start": "1944590",
    "end": "1949629"
  },
  {
    "text": "always been the ones that have been used and that's how you fit functions into the object scheme still we don't we",
    "start": "1949629",
    "end": "1955600"
  },
  {
    "text": "don't need to define functions of some very separate thing and this is how lambdas are in Java of course you know",
    "start": "1955600",
    "end": "1961870"
  },
  {
    "text": "that the lambda fits nicely into the into the Java type system because it's just an implementation of an interface",
    "start": "1961870",
    "end": "1967690"
  },
  {
    "text": "we already had those the big question that I think they had to face was capturing non final local variables so",
    "start": "1967690",
    "end": "1974769"
  },
  {
    "text": "that's there was a huge debate in Java in Java when they when lambdas were",
    "start": "1974769",
    "end": "1980620"
  },
  {
    "text": "introduced by are we around to capture non-final local variables so",
    "start": "1980620",
    "end": "1985630"
  },
  {
    "text": "javascript programmers think that Java lambdas just aren't closures at all they're not they're not the real thing",
    "start": "1985630",
    "end": "1991180"
  },
  {
    "text": "they're not even higher-order functions because they can't capture them and so the the pizza paper is pretty",
    "start": "1991180",
    "end": "1997450"
  },
  {
    "text": "non-committal about this I think they sat on the fence for it so that's really",
    "start": "1997450",
    "end": "2004560"
  },
  {
    "start": "2002000",
    "end": "2065000"
  },
  {
    "text": "that's really the story is the story of pizza the higher-order functions they knew they had to have them they've been in the VIN and functional programming",
    "start": "2004560",
    "end": "2011250"
  },
  {
    "text": "since forever they're like the essence really of functional programming and",
    "start": "2011250",
    "end": "2016280"
  },
  {
    "text": "what's our kosher here oh I know yes the the the second argument to max there",
    "start": "2016280",
    "end": "2023910"
  },
  {
    "text": "it's a kind of pseudocode this it's not really one thing or the other but the second the second argument there is a function from s and s from some from two",
    "start": "2023910",
    "end": "2032910"
  },
  {
    "text": "types to boolean and obviously it's it's meant to be a way of comparing two types",
    "start": "2032910",
    "end": "2038340"
  },
  {
    "text": "and it's going to say whether or not the first one is greater than or equal to the second one and so you can so you can",
    "start": "2038340",
    "end": "2044130"
  },
  {
    "text": "use that function if you've got a list of s you can take the function and apply that function to every pair of values in",
    "start": "2044130",
    "end": "2051020"
  },
  {
    "text": "the list and you and you'll get them you'll get the highest value in the list so this is an ID this is an example of a",
    "start": "2051020",
    "end": "2057929"
  },
  {
    "text": "way in which a function can be a parameter to another function so lambdas",
    "start": "2057929",
    "end": "2064169"
  },
  {
    "text": "in Java when when they finally arrived after a huge argument over what they should look like in 2006 was eventually",
    "start": "2064169",
    "end": "2070590"
  },
  {
    "start": "2065000",
    "end": "2168000"
  },
  {
    "text": "resolved in favor of a a very similar scheme to the one that was in pizza there that we instead of defining an",
    "start": "2070590",
    "end": "2077970"
  },
  {
    "text": "abstract class with we we use something called a functional interface it's an interface instead of an abstract class",
    "start": "2077970",
    "end": "2084120"
  },
  {
    "text": "but the basic ideas are saying it must have a only one single abstract method a single abstract method and then that",
    "start": "2084120",
    "end": "2090990"
  },
  {
    "text": "allows you to - that allows it to fit very nicely into the into the Java type system so it's really very very smooth I",
    "start": "2090990",
    "end": "2099030"
  },
  {
    "text": "think they made a decision about the captial non-final local variables they",
    "start": "2099030",
    "end": "2104160"
  },
  {
    "text": "said we're not going to do it part of the reason for that was that that is the main designer of they or the lead of the",
    "start": "2104160",
    "end": "2111810"
  },
  {
    "text": "the lambda inflammation implementation team was Brian gets",
    "start": "2111810",
    "end": "2116880"
  },
  {
    "text": "and a few years previously he'd written Java concurrency in practice and he was really up on concurrency and he's saying",
    "start": "2116880",
    "end": "2122789"
  },
  {
    "text": "to himself I'm sure this I'm sure this is it I haven't asked him about this but I'm sure this is the case he's saying to himself",
    "start": "2122789",
    "end": "2128009"
  },
  {
    "text": "we've got all these rules to make sure that that the field in Java in a Java",
    "start": "2128009",
    "end": "2134490"
  },
  {
    "text": "class is if it's concurrently accessed by different threads it's all every",
    "start": "2134490",
    "end": "2139920"
  },
  {
    "text": "access check must always be guarded by a monitor and that that that's quite a",
    "start": "2139920",
    "end": "2145470"
  },
  {
    "text": "simple rule and we've learned it and we're good with it now if we start applying that to local variables as well",
    "start": "2145470",
    "end": "2151609"
  },
  {
    "text": "nobody's gonna know where they are so that was so so the decision was we're not that we're not going to allow it",
    "start": "2151609",
    "end": "2157380"
  },
  {
    "text": "there's our this problem of JavaScript pun they don't have this problem in JavaScript well they don't have this",
    "start": "2157380",
    "end": "2162660"
  },
  {
    "text": "problem in JavaScript because they don't have multi-threaded programming that's actually in Scala they they they were",
    "start": "2162660",
    "end": "2170250"
  },
  {
    "start": "2168000",
    "end": "2264000"
  },
  {
    "text": "able to very smoothly adopt the the idea of the idea of functions they're",
    "start": "2170250",
    "end": "2176130"
  },
  {
    "text": "actually implemented under the hood with a within an exactly similar scheme to the one that the one that was in Java",
    "start": "2176130",
    "end": "2181890"
  },
  {
    "text": "but the type scheme the the the type system of the language actually has",
    "start": "2181890",
    "end": "2187440"
  },
  {
    "text": "functions as first-class citizens it looks like a real functional language under the under the hood under the hood",
    "start": "2187440",
    "end": "2194369"
  },
  {
    "text": "the implementations the same but but the type systems much better but they made the decision that in Scala there would",
    "start": "2194369",
    "end": "2200490"
  },
  {
    "text": "be there would be willing to capture local variables how does that work with concurrency well it doesn't you have to",
    "start": "2200490",
    "end": "2208589"
  },
  {
    "text": "do the work and now you now you have to double your precautions because now every local variable is potentially if a",
    "start": "2208589",
    "end": "2216809"
  },
  {
    "text": "lambda or a closure in scarlet it's not a lambda it's just a full thing if it can capture",
    "start": "2216809",
    "end": "2223799"
  },
  {
    "text": "and local variable then it can continue to reference that local variable after",
    "start": "2223799",
    "end": "2229349"
  },
  {
    "text": "the method that declared it has gone away so the local variable is of the block it's in has gone away so now you",
    "start": "2229349",
    "end": "2236130"
  },
  {
    "text": "have to worry forever that that lambda might be executed on some other thread and you can get concurrent access to",
    "start": "2236130",
    "end": "2242609"
  },
  {
    "text": "local variables which it's a no-no in Java and so the result of that is now you're gonna have to guard all your",
    "start": "2242609",
    "end": "2247740"
  },
  {
    "text": "local variables that are under concurrent access by saying they've got to be they have to",
    "start": "2247740",
    "end": "2253470"
  },
  {
    "text": "be guarded by the same monitor mmm yeah nobody keen on that we don't want to do that no you don't want to do that",
    "start": "2253470",
    "end": "2260210"
  },
  {
    "text": "so another feature of the that's quite interesting for the use of higher-order",
    "start": "2260210",
    "end": "2265980"
  },
  {
    "start": "2264000",
    "end": "2527000"
  },
  {
    "text": "functions in both Scala and Java is partial application so this is really",
    "start": "2265980",
    "end": "2271710"
  },
  {
    "text": "important to functional programmers the idea of partial application is that you can take a function on more than one",
    "start": "2271710",
    "end": "2277200"
  },
  {
    "text": "parameter and you can apply it to just one of those parameters and then it's like the the functions sort of half",
    "start": "2277200",
    "end": "2282870"
  },
  {
    "text": "applied and it's just waiting to be completed with the with the other half so we're defining in this code we're",
    "start": "2282870",
    "end": "2289380"
  },
  {
    "text": "defining a partial application application function it takes a it takes a function on two parameters and applies",
    "start": "2289380",
    "end": "2296160"
  },
  {
    "text": "it to in this case it's it's a function on two strings and oh it's it's going to",
    "start": "2296160",
    "end": "2304560"
  },
  {
    "text": "be doing it I think imagine it's like doing index off or something like that and and it's applying it to the first",
    "start": "2304560",
    "end": "2310020"
  },
  {
    "text": "one so it's ready for this so it's ready for the second one so the s arrow by of",
    "start": "2310020",
    "end": "2315600"
  },
  {
    "text": "word of s is a function on a single string and now and you can see that you",
    "start": "2315600",
    "end": "2323130"
  },
  {
    "text": "can see at the bottom there that that we're applying we're applying by two twin to two index off and then then then",
    "start": "2323130",
    "end": "2331980"
  },
  {
    "text": "finally we get that we get an F which is on a single string and it will and it will look for it'll search for the",
    "start": "2331980",
    "end": "2338970"
  },
  {
    "text": "substring in hello so it's kind of its kind of primed to go on on hello you can",
    "start": "2338970",
    "end": "2345630"
  },
  {
    "text": "do that actually much more simply in Scala without all of this without all of this fuss if you just define the",
    "start": "2345630",
    "end": "2350940"
  },
  {
    "text": "parameters to a function like in the first line of the bottom box as two separate parameter lists then then you",
    "start": "2350940",
    "end": "2358830"
  },
  {
    "text": "can just then you can just say I want to apply as write on the right-hand side of the second line you're saying I'm going",
    "start": "2358830",
    "end": "2364860"
  },
  {
    "text": "to apply it to the to the arguments in the first parameter list and then I'll be ready to go when I get given a second",
    "start": "2364860",
    "end": "2371430"
  },
  {
    "text": "when I get given another another string to search for so that's partial",
    "start": "2371430",
    "end": "2377850"
  },
  {
    "text": "application skull and it turns out to be really useful and actually what we didn't what we hadn't noticed but we should give a shout-out",
    "start": "2377850",
    "end": "2383770"
  },
  {
    "text": "here to made me former for us do they get that right yes thank you mainly",
    "start": "2383770",
    "end": "2388990"
  },
  {
    "text": "Forex who is a colleague of Joe's a and helped us a lot with the preparation",
    "start": "2388990",
    "end": "2394180"
  },
  {
    "text": "this talk pointed out something very similar is happening in Java when you have a bound method reference it are you",
    "start": "2394180",
    "end": "2402070"
  },
  {
    "text": "supposed to be talking about this I think you are always there you always so",
    "start": "2402070",
    "end": "2411550"
  },
  {
    "text": "yes this is just an example of a partial application in Java you we don't have this this very nice syntax that has been",
    "start": "2411550",
    "end": "2417609"
  },
  {
    "text": "created in saqqara to tell that the function in fact takes two parameters that are completely separated and that",
    "start": "2417609",
    "end": "2423820"
  },
  {
    "text": "they can take that function to create another function take that b function to create another function by just fixing",
    "start": "2423820",
    "end": "2430599"
  },
  {
    "text": "one of the two parameters but we have some kind of syntax that looks like this in Java which is called the the method",
    "start": "2430599",
    "end": "2437590"
  },
  {
    "text": "reference to bound method reference in this example and here you have a nice example of it when you are looking for a",
    "start": "2437590",
    "end": "2444300"
  },
  {
    "text": "specific string of character of characters in another string of characters so the bottom box there is is",
    "start": "2444300",
    "end": "2451150"
  },
  {
    "text": "exactly corresponds to the bottom box that we had in the in on the previous slide and if you're wondering a lot of",
    "start": "2451150",
    "end": "2457510"
  },
  {
    "text": "people are very confused about method references and why they why we have this nomenclature for them bound and unbound",
    "start": "2457510",
    "end": "2463089"
  },
  {
    "text": "method references and the reason is because this is a bound method reference because the receiver here the thing that",
    "start": "2463089",
    "end": "2470770"
  },
  {
    "text": "the the object that the method is going to be called on it's always the same for a bound method reference here the object",
    "start": "2470770",
    "end": "2476349"
  },
  {
    "text": "is the string hello and the alternative of course is to is to have that actually",
    "start": "2476349",
    "end": "2482500"
  },
  {
    "text": "the literally big s string double colon hello and that's an unbound method reference because it needs a receiver as",
    "start": "2482500",
    "end": "2489730"
  },
  {
    "text": "well as the argument that the methods going to be going to be passed to here the receiver is fixed whatever you call",
    "start": "2489730",
    "end": "2496150"
  },
  {
    "text": "this for it's always going to call index off on the hello object absolutely all",
    "start": "2496150",
    "end": "2502000"
  },
  {
    "text": "right and that's it for lambdas and closures last part of this this presentation is",
    "start": "2502000",
    "end": "2507099"
  },
  {
    "text": "about pattern matching now pattern matching if you just familiar with the java language you may have",
    "start": "2507099",
    "end": "2512520"
  },
  {
    "text": "ever heard about that this is going probably this is going probably to change a little bit in the next years to",
    "start": "2512520",
    "end": "2519690"
  },
  {
    "text": "come I would say because pattern matching is going to be introduced in Java and we're going to show you",
    "start": "2519690",
    "end": "2524880"
  },
  {
    "text": "examples of that first thing pattern matching was already defined in the so-called pizza papers that we just show",
    "start": "2524880",
    "end": "2531690"
  },
  {
    "start": "2527000",
    "end": "2632000"
  },
  {
    "text": "you and this is an example of code you have a class that is a class of vehicle",
    "start": "2531690",
    "end": "2538170"
  },
  {
    "text": "and this class has two as two extensions now this is this is a syntax to express",
    "start": "2538170",
    "end": "2545610"
  },
  {
    "text": "what is called a sealed type that is you create a type which is a could be an abstract type which is called the",
    "start": "2545610",
    "end": "2551400"
  },
  {
    "text": "vehicle type and you create two extensions for this type and those two extensions are are just fixed right you",
    "start": "2551400",
    "end": "2557460"
  },
  {
    "text": "cannot have any more extension to these vehicle types the same time we are going to have them in Java also so I'm going",
    "start": "2557460",
    "end": "2563430"
  },
  {
    "text": "to show you the syntax to beat that and then we create this factory method",
    "start": "2563430",
    "end": "2569450"
  },
  {
    "text": "capacity that takes a vehicle as a parameter now of course this vehicle can only be a car or a bus and the compiler",
    "start": "2569450",
    "end": "2576960"
  },
  {
    "text": "knows that and it's also in force at runtime right so you switch just have",
    "start": "2576960",
    "end": "2582000"
  },
  {
    "text": "two cases and you don't need the default close of that switch expression just because we know that there's no other",
    "start": "2582000",
    "end": "2587730"
  },
  {
    "text": "possibility right and you can see that the first case takes a car and the car",
    "start": "2587730",
    "end": "2593520"
  },
  {
    "text": "is defined with the color in it in some kind of constructor like representation syntax and this color in fact it defines",
    "start": "2593520",
    "end": "2601140"
  },
  {
    "text": "the variable color on which this car has been created and you can use this color directly in the return Clause here just",
    "start": "2601140",
    "end": "2609360"
  },
  {
    "text": "just like this so if the color is red then the capacity of the car will be 20 because it's a car for hands I guess and",
    "start": "2609360",
    "end": "2617310"
  },
  {
    "text": "if it's not red then it's not a car for an seats to call for regular human so the capacity is only four and if it's a",
    "start": "2617310",
    "end": "2624540"
  },
  {
    "text": "bus it's a small bus because you can only put twelve people in it it's a VIP bus right so in Scala",
    "start": "2624540",
    "end": "2631260"
  },
  {
    "text": "the syntax is the following you also have the seal type since Kara defined a",
    "start": "2631260",
    "end": "2637440"
  },
  {
    "start": "2632000",
    "end": "2842000"
  },
  {
    "text": "vehicle and the only extension of that just the the class car and the object",
    "start": "2637440",
    "end": "2643200"
  },
  {
    "text": "bus so the object was is a single tone engine in its car there are both extensions of the vehicle",
    "start": "2643200",
    "end": "2650160"
  },
  {
    "text": "class and you can define this capacity and you see that here you don't you still have a switch which is not not a",
    "start": "2650160",
    "end": "2657210"
  },
  {
    "text": "switch anymore it's a match so it because it comes from pattern matching precisely and but you have this similar",
    "start": "2657210",
    "end": "2662910"
  },
  {
    "text": "syntax than the one in pizza that is if you have a car that has been created on this color variable then you can dis",
    "start": "2662910",
    "end": "2669900"
  },
  {
    "text": "construct the car this is what is called the construction to get the color the color field out of that car and untell",
    "start": "2669900",
    "end": "2677310"
  },
  {
    "text": "that the capacity of the red car is is also 20 and the capacity of other cars",
    "start": "2677310",
    "end": "2682410"
  },
  {
    "text": "is 4 and the same professors know that you have here the syntax that kind of",
    "start": "2682410",
    "end": "2688500"
  },
  {
    "text": "look like the syntax of lambda expressions but it's not lambda it's really here it's really switch like it's",
    "start": "2688500",
    "end": "2695190"
  },
  {
    "text": "passion and in Java this is what we're going to have Maurice real soon now yeah",
    "start": "2695190",
    "end": "2703200"
  },
  {
    "text": "real soon I mean really soon",
    "start": "2703200",
    "end": "2708990"
  },
  {
    "text": "the syntax is probably not fixed yet so don't don't do any kind of money",
    "start": "2708990",
    "end": "2714359"
  },
  {
    "text": "spending decision on this kind of syntax as usual so we will have sealed types in",
    "start": "2714359",
    "end": "2720930"
  },
  {
    "text": "Java that can be defined for classes abstract classes or interfaces so here it's a sealed interface so the compilers",
    "start": "2720930",
    "end": "2727740"
  },
  {
    "text": "the compiler knows that this interface can only be implemented with the car class and burst class note that the car",
    "start": "2727740",
    "end": "2736410"
  },
  {
    "text": "class is not really a class it's a record and record is built on a set of fields here only a color but you could",
    "start": "2736410",
    "end": "2743849"
  },
  {
    "text": "have other fields on it the nice thing is that the class is automatically created by the compiler with the Gator",
    "start": "2743849",
    "end": "2750660"
  },
  {
    "text": "no setters because the class is final and it's immutable the to string the equals the ash code everything so by by",
    "start": "2750660",
    "end": "2758069"
  },
  {
    "text": "Lombok and this kind of ugly things that you may be using in your java code and you can pass this sealed type also to a",
    "start": "2758069",
    "end": "2764940"
  },
  {
    "text": "switch and here the pattern matching gives you the possibility to do roughly the same thing",
    "start": "2764940",
    "end": "2771450"
  },
  {
    "text": "as in pizza or Java that is say that this car has been built on a color and then you can do this this and that with",
    "start": "2771450",
    "end": "2777599"
  },
  {
    "text": "the car itself and the Android color also note there is there is one little more thing that you can do is the",
    "start": "2777599",
    "end": "2783780"
  },
  {
    "text": "preside that is this car has been built on a color that is the color red then you can directly oh it's next slide",
    "start": "2783780",
    "end": "2790410"
  },
  {
    "text": "sorry if this car has been created on a color that is red then you can directly return 20 so you don't have this ternary",
    "start": "2790410",
    "end": "2796950"
  },
  {
    "text": "operator so we're gonna do so we're gonna do better than Scala does well it seems",
    "start": "2796950",
    "end": "2802380"
  },
  {
    "text": "that we are going to do better than the skeletor's and plus the seat type is really enforced both at compile time and",
    "start": "2802380",
    "end": "2809190"
  },
  {
    "text": "also at runtime even if you are using some kind of agent or some kind of reflection of acting",
    "start": "2809190",
    "end": "2814799"
  },
  {
    "text": "back doors everything any kind of thing you cannot create more types than the",
    "start": "2814799",
    "end": "2819809"
  },
  {
    "text": "one that have been dictated there to implement the the seal type define define there come on nice people from",
    "start": "2819809",
    "end": "2827369"
  },
  {
    "text": "the coffee we do that so that's the story as you can see the the main part",
    "start": "2827369",
    "end": "2835950"
  },
  {
    "text": "of the story is Wow what what we've had to do really different approaches the java and skull have taken first my first",
    "start": "2835950",
    "end": "2842700"
  },
  {
    "start": "2842000",
    "end": "2993000"
  },
  {
    "text": "conclusion from this is wow language design is really complicated any language designer could have told me that and they did tell me that right now",
    "start": "2842700",
    "end": "2850109"
  },
  {
    "text": "right now i'm actually living with one of those was one of those people unfortunately for me and i and yeah he's",
    "start": "2850109",
    "end": "2856200"
  },
  {
    "text": "often told me the language design is really complicated but backwards",
    "start": "2856200",
    "end": "2862230"
  },
  {
    "text": "compatibility makes it way more complicated that's why java has been so",
    "start": "2862230",
    "end": "2867569"
  },
  {
    "text": "slow to adopt adopt these things and javis always had this place this really high value on backward compatibility",
    "start": "2867569",
    "end": "2873720"
  },
  {
    "text": "it's only now that we're seeing a point at which it codes from 1998 won't",
    "start": "2873720",
    "end": "2879539"
  },
  {
    "text": "reliably run 20 years later that's gonna start to happen but it's taken a really",
    "start": "2879539",
    "end": "2884849"
  },
  {
    "text": "long time for them to for them to yield even to that point scarlett took it completely let's Karla",
    "start": "2884849",
    "end": "2890369"
  },
  {
    "text": "had a complete different attitude they don't care frankly they don't care that much about backward compatibility and I",
    "start": "2890369",
    "end": "2896039"
  },
  {
    "text": "think that's made that means that in the end I'll probably end up with a much better language in the end",
    "start": "2896039",
    "end": "2901849"
  },
  {
    "text": "but they'll have lost a lot of people along the way because it's difficult to invest in something that where you are",
    "start": "2901849",
    "end": "2908239"
  },
  {
    "text": "going to it for every revision of the language you're going to have to make changes to codebase and if you've got a",
    "start": "2908239",
    "end": "2913430"
  },
  {
    "text": "big codebase that's that's a pretty high price to pay so both of you points have their advantage scholars actually shown",
    "start": "2913430",
    "end": "2919039"
  },
  {
    "text": "what you can do if you start if you if you start from a relatively green field a relatively clear situation but Java",
    "start": "2919039",
    "end": "2928519"
  },
  {
    "text": "well they've they they're very very much more cautious this man is the epitome",
    "start": "2928519",
    "end": "2933559"
  },
  {
    "text": "the very essence of cautiousness he says and he's the man who's in charge right",
    "start": "2933559",
    "end": "2939979"
  },
  {
    "text": "now he says we he says we don't want to be the first to include a feature because every feature we add will never",
    "start": "2939979",
    "end": "2945769"
  },
  {
    "text": "be removed especially when there's when Java has I don't know how many millions of programmers are supposed to be around",
    "start": "2945769",
    "end": "2951799"
  },
  {
    "text": "the world and it's the number and it's still the number one language in the TOB index that tells you you've got to",
    "start": "2951799",
    "end": "2959059"
  },
  {
    "text": "really think very very very very hard before you add anything at all so that's",
    "start": "2959059",
    "end": "2964369"
  },
  {
    "text": "exactly what Brian does for years on end and then then we get something I think in the cases in the case of lambdas that",
    "start": "2964369",
    "end": "2971119"
  },
  {
    "text": "that looks like it really will stand the test of time and it still doesn't play in the language from evolving and taking",
    "start": "2971119",
    "end": "2977630"
  },
  {
    "text": "these new features yeah yeah okay so that's us absolutely thank you very much",
    "start": "2977630",
    "end": "2984349"
  },
  {
    "text": "for your attention [Applause]",
    "start": "2984349",
    "end": "2990130"
  },
  {
    "text": "you",
    "start": "2990130",
    "end": "2992190"
  }
]