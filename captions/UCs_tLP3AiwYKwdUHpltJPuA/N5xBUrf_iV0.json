[
  {
    "text": "[Applause]",
    "start": "4250",
    "end": "9320"
  },
  {
    "text": "thank you hi everyone uh so a few years ago our colleagues Lee Campbell and Matt",
    "start": "9320",
    "end": "15900"
  },
  {
    "text": "Barrett were on stage here talking uh about creative user interface today we",
    "start": "15900",
    "end": "21960"
  },
  {
    "text": "are not going to be talking about uis we are going to be talking about the real-time Services which sit behind",
    "start": "21960",
    "end": "28320"
  },
  {
    "text": "those user interfaces so as you can see there this is a typical screen of a",
    "start": "28320",
    "end": "34680"
  },
  {
    "text": "trading system and those systems are the specificities that their the products",
    "start": "34680",
    "end": "40320"
  },
  {
    "text": "you are trading on those platform are prices which are constantly changing so those uis are constantly taking",
    "start": "40320",
    "end": "46680"
  },
  {
    "text": "and you can't use the typical request response pattern to build those systems",
    "start": "46680",
    "end": "52559"
  },
  {
    "text": "so our uis our backends are very much message driven so they send message from",
    "start": "52559",
    "end": "58860"
  },
  {
    "text": "the backend to the UI from the UI to the backend and server side we have multiple Services multiple components which are",
    "start": "58860",
    "end": "65640"
  },
  {
    "text": "passing message between each other so if we look at the the core attributes",
    "start": "65640",
    "end": "71280"
  },
  {
    "text": "of the systems we are building so one we already said our system our services are",
    "start": "71280",
    "end": "77460"
  },
  {
    "text": "message driven typically our services need to be very responsive uh it's not hard to have",
    "start": "77460",
    "end": "84420"
  },
  {
    "text": "response time requirements below the millisecond in some some scenarios it's even at the microsecond level",
    "start": "84420",
    "end": "90960"
  },
  {
    "text": "in terms of resilience uh the Traders are using those platforms are at the",
    "start": "90960",
    "end": "97020"
  },
  {
    "text": "click of a button transacting a multi-million trades so those systems need to be very resilient we don't want",
    "start": "97020",
    "end": "103619"
  },
  {
    "text": "to lose the trade or the order of a customer and also something quite uh which we",
    "start": "103619",
    "end": "110280"
  },
  {
    "text": "have quite often in in those systems we have to deal with quite complex business logic so we have complex products and",
    "start": "110280",
    "end": "117240"
  },
  {
    "text": "complex workflows to orchestrates uh between uh Traders or between a Trader",
    "start": "117240",
    "end": "122640"
  },
  {
    "text": "and a machine so what what we typically see when we",
    "start": "122640",
    "end": "127920"
  },
  {
    "text": "build those system is that when and the Building Services which are uh highly",
    "start": "127920",
    "end": "133020"
  },
  {
    "text": "multi-threaded and when you combine multi-threading and a complex domain complex business logic generally you end",
    "start": "133020",
    "end": "140040"
  },
  {
    "text": "up with a service which is quite hard to reason about so it can it becomes hard for the people who built it initially",
    "start": "140040",
    "end": "146459"
  },
  {
    "text": "and it's even harder for the people who are going to join the team down the line",
    "start": "146459",
    "end": "151500"
  },
  {
    "text": "another thing is that those systems tend to be very difficult to debug like when you receive a call at 2 am you are",
    "start": "151500",
    "end": "159660"
  },
  {
    "text": "connecting to the production servers looking at a spaghetti of logs published by multiple threads and you are having a",
    "start": "159660",
    "end": "166260"
  },
  {
    "text": "hard time figuring out what is going on into this system and it's generally quite difficult you can have some like",
    "start": "166260",
    "end": "173220"
  },
  {
    "text": "nasty concurrency issues and those bugs are difficult to reproduce",
    "start": "173220",
    "end": "178319"
  },
  {
    "text": "a few years ago something really interesting happened at least interesting for us so Dave Farley who is",
    "start": "178319",
    "end": "185700"
  },
  {
    "text": "sitting just there and Martin Thompson talked about the architecture of the",
    "start": "185700",
    "end": "191760"
  },
  {
    "text": "training systems they were they were developing so they were building a very high performance exchange Financial",
    "start": "191760",
    "end": "198180"
  },
  {
    "text": "exchange and they talked about the architecture but more than giving a",
    "start": "198180",
    "end": "204480"
  },
  {
    "text": "weather architecture I think what's the giveaway at the time was really a blueprint to build those style of",
    "start": "204480",
    "end": "210300"
  },
  {
    "text": "services and I think something that I find really interesting in this",
    "start": "210300",
    "end": "215760"
  },
  {
    "text": "architecture is how they achieve to to draw a very clinical line and",
    "start": "215760",
    "end": "221280"
  },
  {
    "text": "achieve a very clean separation of concern between the business logic which",
    "start": "221280",
    "end": "226500"
  },
  {
    "text": "run on a single thread on this architecture so you have a clean stateful model uh in memory which gets",
    "start": "226500",
    "end": "234000"
  },
  {
    "text": "mutated by a single thread and you have all the technical uh aspects which are",
    "start": "234000",
    "end": "239280"
  },
  {
    "text": "managed completely separately by your technical infrastructure and this allow us to basically",
    "start": "239280",
    "end": "246920"
  },
  {
    "text": "not have to worry about the technical aspect but we can focus on the business logic and build a very clean model uh",
    "start": "246920",
    "end": "254760"
  },
  {
    "text": "based on our business requirements and as we will see those systems are also",
    "start": "254760",
    "end": "260100"
  },
  {
    "text": "Awesome from the developility perspective it's very very easy to reproduce to reproduce a problem with",
    "start": "260100",
    "end": "266580"
  },
  {
    "text": "this architecture so we did not so we we have a consultancy",
    "start": "266580",
    "end": "273240"
  },
  {
    "text": "um we did not start a project for our client by implementing the full complete",
    "start": "273240",
    "end": "279300"
  },
  {
    "text": "architecture uh that lmax was proposing what what we did instead is basically we",
    "start": "279300",
    "end": "284820"
  },
  {
    "text": "picked up some IDs one by one on different projects and in this talk we",
    "start": "284820",
    "end": "290340"
  },
  {
    "text": "are going to run you through this journey and so in the first stage basically what we did is uh",
    "start": "290340",
    "end": "297540"
  },
  {
    "text": "we try to get this simple single threaded model we also got a",
    "start": "297540",
    "end": "303900"
  },
  {
    "text": "the possibility to easily debug our system then in the second stage uh we started",
    "start": "303900",
    "end": "310740"
  },
  {
    "text": "looking at clustering those services so so basically to be able to to achieve a",
    "start": "310740",
    "end": "316500"
  },
  {
    "text": "transparent failover of our services and also being able to replicate",
    "start": "316500",
    "end": "322259"
  },
  {
    "text": "consistently our state between the different node in in our service and",
    "start": "322259",
    "end": "327720"
  },
  {
    "text": "finally in the last stage uh basically we managed to get those clusters to be",
    "start": "327720",
    "end": "332759"
  },
  {
    "text": "kind of self-sufficient in terms of State they did not have to store their stage in your database they can",
    "start": "332759",
    "end": "338880"
  },
  {
    "text": "basically achieve durability of their state by themselves so dreams is going",
    "start": "338880",
    "end": "343979"
  },
  {
    "text": "to run us through the first stage thanks Olivier um so the first problem that elmax kind",
    "start": "343979",
    "end": "350580"
  },
  {
    "text": "of uh that I want to draw attention to is the um the Simplicity of the model that you end up having when you use this",
    "start": "350580",
    "end": "357419"
  },
  {
    "text": "architecture so what we get with the kind of deterministic execution in a distributed",
    "start": "357419",
    "end": "364199"
  },
  {
    "text": "event system is a kind of a very kind of nice way of looking at the problem and a",
    "start": "364199",
    "end": "369840"
  },
  {
    "text": "nice way to model so I'll start to talk about what determinism is so it's a standard",
    "start": "369840",
    "end": "375300"
  },
  {
    "text": "computer science term you're probably all familiar with it but if you aren't here's what it is so you have an initial",
    "start": "375300",
    "end": "381240"
  },
  {
    "text": "State and you have a command you apply that command to the state and you should always end up in the same state and",
    "start": "381240",
    "end": "387120"
  },
  {
    "text": "produce exactly the same side effects so there are a couple of things that we need in order to have determinism in a",
    "start": "387120",
    "end": "393240"
  },
  {
    "text": "in a kind of distributed event driven system the first one is a log so a show",
    "start": "393240",
    "end": "399780"
  },
  {
    "text": "of hands who's using event sourcing in their uh in their architectures okay so a few of you so for the rest of you the",
    "start": "399780",
    "end": "407039"
  },
  {
    "text": "log is a an immutable sequence of Records that's totally ordered by time so it's a great way of representing a",
    "start": "407039",
    "end": "414120"
  },
  {
    "text": "sequence of commands that uh coming into your system and it's a very efficient data structure to use in memory and to",
    "start": "414120",
    "end": "420840"
  },
  {
    "text": "write it on disk because you're you're always writing at the end you don't have to do any random seek you start at the",
    "start": "420840",
    "end": "426120"
  },
  {
    "text": "beginning you read through the whole thing and you write at the end so the other thing that we need for for",
    "start": "426120",
    "end": "431639"
  },
  {
    "text": "deterministic logic in a distributed system is a single threaded log consumer so we've got imagine the scene in our",
    "start": "431639",
    "end": "438000"
  },
  {
    "text": "logical architecture we've got a log we've got multiple clients multiple threads passing messages onto the log",
    "start": "438000",
    "end": "444720"
  },
  {
    "text": "these are being sequenced written to disk and on the other side of that we've got a single consumer which is our model",
    "start": "444720",
    "end": "451440"
  },
  {
    "text": "which is working in a kind of while loop pick him up command off the log apply the state",
    "start": "451440",
    "end": "458039"
  },
  {
    "text": "apply the command to your state in memory and continue like that",
    "start": "458039",
    "end": "464280"
  },
  {
    "text": "so this kind of single threaded logic typically the question we get is isn't",
    "start": "464280",
    "end": "469500"
  },
  {
    "text": "that super slave shouldn't we be shouldn't we be using all the cores these days the we've reached a kind of a",
    "start": "469500",
    "end": "475979"
  },
  {
    "text": "limit in the in the speed of processors now so shouldn't we be using all the cores so the answer to that question is",
    "start": "475979",
    "end": "481380"
  },
  {
    "text": "no I mean typically if you're doing not very uh kind of stupid stuff in your",
    "start": "481380",
    "end": "488220"
  },
  {
    "text": "code you can achieve kind of 10 000 operations per second which is typically which is kind of Fairly typical in a",
    "start": "488220",
    "end": "495180"
  },
  {
    "text": "click type architecture if you need kind of more performance than that you can you can increase the order of magnitude",
    "start": "495180",
    "end": "501720"
  },
  {
    "text": "just by kind of profiling your code if you need to get kind of really fast if you need millions of messages per second",
    "start": "501720",
    "end": "508020"
  },
  {
    "text": "you need to start looking at the data structures you're using you can't use the standard kind of list implementation",
    "start": "508020",
    "end": "514800"
  },
  {
    "text": "in your in your class Library you need to start kind of optimizing for the problem you have so you typically want",
    "start": "514800",
    "end": "520380"
  },
  {
    "text": "to be using algorithms to manipulate your collections which are kind of of uh which are constant time or login time",
    "start": "520380",
    "end": "527459"
  },
  {
    "text": "and when you're kind of dealing with this model that is affecting your your state in memory",
    "start": "527459",
    "end": "534360"
  },
  {
    "text": "typically what happens is that kind of Act of decoding the command off the wire typically becomes your bottleneck so you",
    "start": "534360",
    "end": "541860"
  },
  {
    "text": "need to really think about how you're getting the command off the wire so if you were to",
    "start": "541860",
    "end": "547500"
  },
  {
    "text": "stand use standard mechanism is to deserialize the object use some kind of Proto buff type serialization well that",
    "start": "547500",
    "end": "553980"
  },
  {
    "text": "creates an object every time you do it so instead of that if you can use libraries",
    "start": "553980",
    "end": "559560"
  },
  {
    "text": "like SBE which allow you to read straight from the network they allow you",
    "start": "559560",
    "end": "565019"
  },
  {
    "text": "to read the relevant Fields without performing any copy or any allocation you can typically kind of reduce the",
    "start": "565019",
    "end": "570899"
  },
  {
    "text": "amount of time spent decoding and encoding your messages so I mean that's great the other benefit of not",
    "start": "570899",
    "end": "577260"
  },
  {
    "text": "allocating in your code is you you don't put pressure on your on your HEAP so if",
    "start": "577260",
    "end": "583019"
  },
  {
    "text": "you garbage collect halfway through your uh through processing a command you typically",
    "start": "583019",
    "end": "588120"
  },
  {
    "text": "get a get an unpredictable latency in your system so that's another benefit of not allocating in your code",
    "start": "588120",
    "end": "594660"
  },
  {
    "text": "so with determinism there was the first thing we came across was handling time",
    "start": "594660",
    "end": "599940"
  },
  {
    "text": "you need to be able to get all of the inputs to your service from the log so",
    "start": "599940",
    "end": "606000"
  },
  {
    "text": "you can't use your your standard system time when you're processing not uh when you're kind of if you need it on a",
    "start": "606000",
    "end": "613019"
  },
  {
    "text": "transaction to be able to say when this transaction happened or if you need it to schedule events for instance you need",
    "start": "613019",
    "end": "619800"
  },
  {
    "text": "that input to come from a log so what we do is simply when the client sends a",
    "start": "619800",
    "end": "625500"
  },
  {
    "text": "command at the point that it's persisted to log we take the timestamp and add that to the command so at that point",
    "start": "625500",
    "end": "631800"
  },
  {
    "text": "when the service is needs time for any reason it can use the",
    "start": "631800",
    "end": "636959"
  },
  {
    "text": "timestamp Straight from that message and it's all and we're all good so we can replay so we can also anytime you replay",
    "start": "636959",
    "end": "643320"
  },
  {
    "text": "the log no matter what time of day it is it always ends in the same state and your last update times are all correct",
    "start": "643320",
    "end": "650160"
  },
  {
    "text": "so we talked about easy easy debugging so Olivier was talking about kind of a",
    "start": "650160",
    "end": "656940"
  },
  {
    "text": "multi-threaded system you uh you've got kind of difficult to read logs uh you",
    "start": "656940",
    "end": "662640"
  },
  {
    "text": "get a call at 3am and you want to kind of reproduce the situation so with this architecture because we've got",
    "start": "662640",
    "end": "669000"
  },
  {
    "text": "a log and a deterministic model we can just go to the production server download the log onto our local",
    "start": "669000",
    "end": "675180"
  },
  {
    "text": "environment we also go to GitHub or wherever your version control is we grab",
    "start": "675180",
    "end": "680940"
  },
  {
    "text": "the same version of the model compiler we're in your Dev environment all we then do is just replay the logs",
    "start": "680940",
    "end": "687360"
  },
  {
    "text": "through the model we get to exactly the same stage as as where we were bugging up before",
    "start": "687360",
    "end": "693420"
  },
  {
    "text": "so let's kind of have a look at what's going on in this service what does it",
    "start": "693420",
    "end": "698700"
  },
  {
    "text": "look like so if we uh if we take a look at the model we've got the first thing I",
    "start": "698700",
    "end": "705000"
  },
  {
    "text": "want to point out is that we've got a kind of very s very uh distinct line between where our infrastructure is and",
    "start": "705000",
    "end": "711420"
  },
  {
    "text": "where our model is so the infrastructure is taken care of all of the network i o for us it's taken care of sequencing the",
    "start": "711420",
    "end": "719399"
  },
  {
    "text": "commands from the from multiple clients coming over the wire it's journaling the uh the journey",
    "start": "719399",
    "end": "725820"
  },
  {
    "text": "journaling those messages to disk and then it's passing messages over to the model so it's a it's a really clean",
    "start": "725820",
    "end": "732240"
  },
  {
    "text": "split it allows us to kind of um it gives us a very nice bubble in which we",
    "start": "732240",
    "end": "738420"
  },
  {
    "text": "can kind of model our model our business problems so just taking a step through if we get a message off off the wire",
    "start": "738420",
    "end": "744899"
  },
  {
    "text": "that's taken in the um in the inbound i o which so the message",
    "start": "744899",
    "end": "750420"
  },
  {
    "text": "is obviously coming out of the wiring bytes so that's passed over to the sequencer which is kind of typically",
    "start": "750420",
    "end": "756300"
  },
  {
    "text": "taking multiple consumers and establishing a total order of the messages that we're consuming so once",
    "start": "756300",
    "end": "762600"
  },
  {
    "text": "we've got a kind of once we've got a single sequence of messages that's passed over to the journaler and we",
    "start": "762600",
    "end": "768060"
  },
  {
    "text": "write it over write it down to disk so that's then it's passed over to the model so it's worth saying that we're",
    "start": "768060",
    "end": "774600"
  },
  {
    "text": "still doing in bytes here the infrastructure is uh yeah is not concerned with the semantics of the",
    "start": "774600",
    "end": "780360"
  },
  {
    "text": "message we're we're dealing with kind of bytes so then so when when it's passed over to the model that's where we we",
    "start": "780360",
    "end": "786480"
  },
  {
    "text": "decode these bytes and turn them into a kind of usable command so in this instance we've got a deposit",
    "start": "786480",
    "end": "793440"
  },
  {
    "text": "command and we've got a an amount of 100 and an account of a so we're taking that",
    "start": "793440",
    "end": "798660"
  },
  {
    "text": "model so we're taking that command sorry applying it to the model uh so this is all still being done in",
    "start": "798660",
    "end": "805200"
  },
  {
    "text": "memory at that stage we can we can acknowledge the command so we have an ack that then gets encoded sent over the",
    "start": "805200",
    "end": "813540"
  },
  {
    "text": "wire back to the client so if we zoom in so we if we're kind of",
    "start": "813540",
    "end": "819720"
  },
  {
    "text": "we're hiding our infrastructure that's down at the bottom still but if we zoom in on the model now so",
    "start": "819720",
    "end": "825720"
  },
  {
    "text": "I've talked about the bubble earlier this is because we're hiding all of the network all of the kind of complexities",
    "start": "825720",
    "end": "832019"
  },
  {
    "text": "of the uh the threading and the asynchrony we've kind of we've got this really simple bubble in which we can",
    "start": "832019",
    "end": "838680"
  },
  {
    "text": "kind of model model our business problem so I mean the model is not important but",
    "start": "838680",
    "end": "843959"
  },
  {
    "text": "what we're kind of what we're what we can apply now is kind of very uh practical DDD type principles so we can",
    "start": "843959",
    "end": "851399"
  },
  {
    "text": "we can think about the relationships but we can think about our entities we can think about the relationships between them we can think about the appropriate",
    "start": "851399",
    "end": "858060"
  },
  {
    "text": "data structures for for modeling those relationships we can think about the performance of those data structures for",
    "start": "858060",
    "end": "863940"
  },
  {
    "text": "modeling those relationships so I mean it really allows us so this context of a",
    "start": "863940",
    "end": "869160"
  },
  {
    "text": "deterministic model with a single thread where we're we're dealing completely in memory allows us to really kind of focus",
    "start": "869160",
    "end": "875639"
  },
  {
    "text": "on the the business problems at hand and we think it's really powerful model",
    "start": "875639",
    "end": "881360"
  },
  {
    "text": "thank you James so that was the first uh stage so during this project basically",
    "start": "881399",
    "end": "887279"
  },
  {
    "text": "what we uh managed to achieve is we had this simple model decoupled completely",
    "start": "887279",
    "end": "893040"
  },
  {
    "text": "from this technical infrastructure sitting below and as James pointed out we are able to very easily debug our",
    "start": "893040",
    "end": "900060"
  },
  {
    "text": "system so we can download the log replay and get exactly in the same state where",
    "start": "900060",
    "end": "905459"
  },
  {
    "text": "we had our production issue that project uh clearly so far we have",
    "start": "905459",
    "end": "911820"
  },
  {
    "text": "been talking about a single instance of our service in reality in production you",
    "start": "911820",
    "end": "916860"
  },
  {
    "text": "need to have multiple instance for full tolerance reason so in that specific project we add use case and scenarios",
    "start": "916860",
    "end": "924060"
  },
  {
    "text": "where we had to synchronize through a database so I'm going to give a bit more detail about about that use case so for",
    "start": "924060",
    "end": "931920"
  },
  {
    "text": "that platform Traders when they try to transact uh the",
    "start": "931920",
    "end": "937440"
  },
  {
    "text": "platform would check that they have enough credit so we need to check that this guy is a this Trader is able to",
    "start": "937440",
    "end": "943199"
  },
  {
    "text": "perform that trade and as enough credit in his uh in his bucket the problem is when we do that we can",
    "start": "943199",
    "end": "949680"
  },
  {
    "text": "have multiple trailers from the same client connected to different servers so we run in the typical situation where we",
    "start": "949680",
    "end": "956880"
  },
  {
    "text": "have a model at the top and a model at the bottom where there are a current different view of the states are not",
    "start": "956880",
    "end": "963180"
  },
  {
    "text": "consistent and the only place where we can synchronize is through the database also in our use case this credit logic",
    "start": "963180",
    "end": "970199"
  },
  {
    "text": "was very complex it was like a full library on its own and uh that's not something we were able to to perform",
    "start": "970199",
    "end": "976800"
  },
  {
    "text": "directly on the database so what we ended up having to do is basically when we receive a transaction request from a",
    "start": "976800",
    "end": "983820"
  },
  {
    "text": "client we'd have to go to the database loads of credit information perform the",
    "start": "983820",
    "end": "989579"
  },
  {
    "text": "credit computation and then try to commit back the credit to the database the problem is in the meantime while",
    "start": "989579",
    "end": "996060"
  },
  {
    "text": "that was happening another Trader connected on the other node could have performed a transaction which impacted",
    "start": "996060",
    "end": "1001759"
  },
  {
    "text": "the credit so basically we need to not commit the transaction hold back and",
    "start": "1001759",
    "end": "1007040"
  },
  {
    "text": "re-run the full process so that's quite a complex dance to orchestrate and we",
    "start": "1007040",
    "end": "1012500"
  },
  {
    "text": "will see how in the next stage we have been able to alleviate that problem",
    "start": "1012500",
    "end": "1017839"
  },
  {
    "text": "so now we are going to talk about fault tolerance and state replication",
    "start": "1017839",
    "end": "1023180"
  },
  {
    "text": "so this is the architecture we are going to to have in this in this second phase",
    "start": "1023180",
    "end": "1028760"
  },
  {
    "text": "so instead of being synchronizing through the database now we are able to replicate States between uh between",
    "start": "1028760",
    "end": "1036678"
  },
  {
    "text": "multiple instances of our of our service of our model and that give us full",
    "start": "1036679",
    "end": "1043040"
  },
  {
    "text": "tolerance so if we lose one of those servers we are able to carry on with the remaining instances and also what we",
    "start": "1043040",
    "end": "1050179"
  },
  {
    "text": "will see that we are able to replicate State completely consistently between the nodes so James is going to run us",
    "start": "1050179",
    "end": "1056660"
  },
  {
    "text": "through this this second phase so um so what kind of failures do we need to deal",
    "start": "1056660",
    "end": "1062179"
  },
  {
    "text": "with when we're talking about fault tolerance so we got a a case where a server fails that's that's a fairly",
    "start": "1062179",
    "end": "1068960"
  },
  {
    "text": "obvious one but we've also got cases where the uh the network fails so if we got two nodes that that don't know about",
    "start": "1068960",
    "end": "1075559"
  },
  {
    "text": "each other we want to make sure that they are not answering different they are they're not answering they don't",
    "start": "1075559",
    "end": "1081440"
  },
  {
    "text": "have different answers to the same questions so this is a a distributed consensus problem and uh luckily for us there have",
    "start": "1081440",
    "end": "1088700"
  },
  {
    "text": "been uh it's been in kind of in universities for decades I think the first paper was from 1978 it's about",
    "start": "1088700",
    "end": "1096260"
  },
  {
    "text": "view stamps replication so we're going to use one that's a bit newer than that it's uh from 2013 a guy from Stanford in",
    "start": "1096260",
    "end": "1104179"
  },
  {
    "text": "his PhD paper uh Diego ongaro he was uh",
    "start": "1104179",
    "end": "1109760"
  },
  {
    "text": "he kind of uh introduced this problem or he introduced this solution called raft which is",
    "start": "1109760",
    "end": "1115840"
  },
  {
    "text": "typically the issues with previous consensus algorithms were they're tricky to understand so so the primary uh goal",
    "start": "1115840",
    "end": "1123080"
  },
  {
    "text": "of raft is to be super easy to understand so typically in raft we we're dealing with three nodes oh it could be",
    "start": "1123080",
    "end": "1130039"
  },
  {
    "text": "five nodes so in a three node cluster we can tolerate the failure of one node in five node cluster we can tolerate the",
    "start": "1130039",
    "end": "1135740"
  },
  {
    "text": "failure of two nodes with network partitions it's the same we've got three nodes and you can",
    "start": "1135740",
    "end": "1141799"
  },
  {
    "text": "tolerate the failure of the partition of one and if you've got five nodes you can tolerate the partition of two yeah just",
    "start": "1141799",
    "end": "1147980"
  },
  {
    "text": "what's pointing out basically you always need to have a majority of node available so you can create a seven node",
    "start": "1147980",
    "end": "1153740"
  },
  {
    "text": "cluster or even more but at each point in time you need to have more than half of the node which are able to connect",
    "start": "1153740",
    "end": "1159799"
  },
  {
    "text": "and talk to each other to for the cluster to remain available so the first thing we need in in raft is",
    "start": "1159799",
    "end": "1167480"
  },
  {
    "text": "a is a leader so when we when we start our nodes in the cluster we start with",
    "start": "1167480",
    "end": "1172520"
  },
  {
    "text": "the three followers one of them will after a random period realize we don't have a leader it will",
    "start": "1172520",
    "end": "1178760"
  },
  {
    "text": "nominate itself as a candidate it will uh send out kind of a request for vote",
    "start": "1178760",
    "end": "1183980"
  },
  {
    "text": "to the other nodes and now once it's received a majority of votes from the other nodes it can become a leader so at",
    "start": "1183980",
    "end": "1189799"
  },
  {
    "text": "that point we've got clients on the other end trying to find a leader so they will have a list of the nodes in",
    "start": "1189799",
    "end": "1195679"
  },
  {
    "text": "the cluster and they'll be randomly trying each one if they connect to a follower the follower will redirect it",
    "start": "1195679",
    "end": "1201559"
  },
  {
    "text": "to the leader and if they connect to the leader then it's all good they can start sending commands so the client sends a",
    "start": "1201559",
    "end": "1207980"
  },
  {
    "text": "deposit command same example as earlier the leader will persist that command to its disk to its log uh it will then",
    "start": "1207980",
    "end": "1215720"
  },
  {
    "text": "notify the followers about that command and they'll do the same so they'll persist that command to their",
    "start": "1215720",
    "end": "1221600"
  },
  {
    "text": "logs and will acknowledge that back to the leader so the leader once it receives a kind of a majority of",
    "start": "1221600",
    "end": "1228260"
  },
  {
    "text": "messages back from the followers will commit that command and it will apply and and it will free the business Logics",
    "start": "1228260",
    "end": "1236299"
  },
  {
    "text": "we apply that command to its state and simultaneously it will be sending a message to the to the followers to tell",
    "start": "1236299",
    "end": "1243260"
  },
  {
    "text": "them to do the same so at that point we can we can acknowledge that command and send a a",
    "start": "1243260",
    "end": "1249559"
  },
  {
    "text": "response back to the client to say right that's done so and it's worth pointing out that the",
    "start": "1249559",
    "end": "1255320"
  },
  {
    "text": "followers because they're in exactly the same state they're doing exactly the same thing but because they're not",
    "start": "1255320",
    "end": "1260780"
  },
  {
    "text": "connected to the client those are just getting dropped on the floor so it's probably worth talking a bit",
    "start": "1260780",
    "end": "1266720"
  },
  {
    "text": "about failure scenarios when we're talking about fault tolerance so say that leader fails",
    "start": "1266720",
    "end": "1272299"
  },
  {
    "text": "what happens well we've got two followers and after another kind of random interval one of the followers",
    "start": "1272299",
    "end": "1278419"
  },
  {
    "text": "will declare itself candidate because there are still two nodes in the cluster and it can achieve a majority it will",
    "start": "1278419",
    "end": "1284600"
  },
  {
    "text": "become a leader so the client will reconnect we'll try and reconnect in the same way as it did before it will be",
    "start": "1284600",
    "end": "1290600"
  },
  {
    "text": "connected trying to connect to random nodes and once it finds one that's active it will find that be able to find out where where the leader is so at this",
    "start": "1290600",
    "end": "1297860"
  },
  {
    "text": "point the client's connected to a to a to a node that was in exactly the same state as the previous leader it was",
    "start": "1297860",
    "end": "1303559"
  },
  {
    "text": "connected to so in this way we're able to achieve a level of fault tolerance that yeah where we where we can survive",
    "start": "1303559",
    "end": "1310820"
  },
  {
    "text": "a node failure or a network failure and it's just worth noting that this is all happening in the kind of in the",
    "start": "1310820",
    "end": "1317240"
  },
  {
    "text": "millisecond space or even less it's just it's just a matter of how you're configuring your timeouts",
    "start": "1317240",
    "end": "1324940"
  },
  {
    "text": "okay so this is the end of the second stage so this is what our system looks like now so we have a cluster of",
    "start": "1325159",
    "end": "1332960"
  },
  {
    "text": "services and now we are able to to have this service being full tolerance and",
    "start": "1332960",
    "end": "1338960"
  },
  {
    "text": "also we are able to um replicate uh consistently the state",
    "start": "1338960",
    "end": "1344419"
  },
  {
    "text": "between all those nodes so what is really important to understand is that the clients are talking to the leader",
    "start": "1344419",
    "end": "1350600"
  },
  {
    "text": "but each model is exactly in the same state and is evolving exactly in the same state at each stage so if we go",
    "start": "1350600",
    "end": "1357380"
  },
  {
    "text": "back to the credit logic I was talking about before with the cluster it becomes a completely",
    "start": "1357380",
    "end": "1364400"
  },
  {
    "text": "trivial operation because the the leader knows that it has exactly the same state as the other node",
    "start": "1364400",
    "end": "1371059"
  },
  {
    "text": "as as a followers it's just able to perform directly the credit operation we",
    "start": "1371059",
    "end": "1376340"
  },
  {
    "text": "don't have to do this dance with the database or to synchronize for another system",
    "start": "1376340",
    "end": "1381640"
  },
  {
    "text": "yes so at this stage of the architecture we still add some some painful aspect in",
    "start": "1381640",
    "end": "1389900"
  },
  {
    "text": "the architecture so the pain point there was that we were still using a database",
    "start": "1389900",
    "end": "1395000"
  },
  {
    "text": "at the at the golden source for our data so how this system would work we would have a database with all the reference",
    "start": "1395000",
    "end": "1401600"
  },
  {
    "text": "data we need and when we start the cluster we would use a persistent service sitting on top to basically be",
    "start": "1401600",
    "end": "1407600"
  },
  {
    "text": "public publishing messages to the cluster to populate its initial state the problem you have when you do that is",
    "start": "1407600",
    "end": "1414799"
  },
  {
    "text": "that basically now you end up uh to have to manage kind of the same state within your database and also in your cluster",
    "start": "1414799",
    "end": "1421460"
  },
  {
    "text": "and we add operations like an Administration UI which was able to",
    "start": "1421460",
    "end": "1427640"
  },
  {
    "text": "um send um send commands to the persistent service and for instance to add a new",
    "start": "1427640",
    "end": "1433700"
  },
  {
    "text": "product to the platform and that would have to to save this state into the database and also into the cluster and",
    "start": "1433700",
    "end": "1441320"
  },
  {
    "text": "because those systems are not consistent this is quite tricky operations to do",
    "start": "1441320",
    "end": "1446360"
  },
  {
    "text": "so we are going to see how uh in phase three we are able to achieve uh",
    "start": "1446360",
    "end": "1451580"
  },
  {
    "text": "durability so basically being able to recover the system the state of our",
    "start": "1451580",
    "end": "1456980"
  },
  {
    "text": "system on its own the cluster is able to do that on its own so basically we'll end up with an architecture like that where",
    "start": "1456980",
    "end": "1463580"
  },
  {
    "text": "we don't need any more persistence layer and a database and James is going to talk about that",
    "start": "1463580",
    "end": "1470000"
  },
  {
    "text": "so before what we were doing when when a service would start up the first the first it would start out with an empty",
    "start": "1470000",
    "end": "1475820"
  },
  {
    "text": "log and the first thing it would do is request out to the persistent service to say right rehydrate me give me all the",
    "start": "1475820",
    "end": "1482059"
  },
  {
    "text": "state I need uh so it so so it would need to do that before it could do anything else so now we're achieving",
    "start": "1482059",
    "end": "1488480"
  },
  {
    "text": "durability through the log instead so we so we can't do that anymore we need to kind of have a a replay strategy so",
    "start": "1488480",
    "end": "1495919"
  },
  {
    "text": "given a system in the current state it's processed up to kind of command four and it's and it's got a state where account",
    "start": "1495919",
    "end": "1502520"
  },
  {
    "text": "a has a balance of a hundred dollars account B has 300 so we stop the service",
    "start": "1502520",
    "end": "1508780"
  },
  {
    "text": "so at that stage all we've got left is the log and when we start this and when",
    "start": "1508780",
    "end": "1514039"
  },
  {
    "text": "we want to start the service again we start from an empty State and what we have to do is we I mean this is",
    "start": "1514039",
    "end": "1520159"
  },
  {
    "text": "typically typical in the event sourcing world this is just a this is just a read model effectively we read through the",
    "start": "1520159",
    "end": "1527179"
  },
  {
    "text": "log to get the service back into the same state as it was before so because we got the deterministic",
    "start": "1527179",
    "end": "1533539"
  },
  {
    "text": "logic we can we can guarantee that we're in the same state as we were with that with as long as we replay the log in the",
    "start": "1533539",
    "end": "1538940"
  },
  {
    "text": "same way so once you start having to kind of replay the log and you're dealing with a million",
    "start": "1538940",
    "end": "1545240"
  },
  {
    "text": "transactions a second say the the size of the log really impacts your recovery time of that service so",
    "start": "1545240",
    "end": "1551840"
  },
  {
    "text": "it's not not typically a problem if you're if you're not doing too many messages a second or you can restart the",
    "start": "1551840",
    "end": "1558559"
  },
  {
    "text": "model and you can start from scratch so in order to reduce the recovery time in these kind of situations we need some",
    "start": "1558559",
    "end": "1565460"
  },
  {
    "text": "kind of some kind of log compaction mechanism and the best way we found in the kind of models we're dealing with is",
    "start": "1565460",
    "end": "1571220"
  },
  {
    "text": "is snapshotting so just to give you a quick overview of what's Happening Here we've got a service in the same state as",
    "start": "1571220",
    "end": "1576740"
  },
  {
    "text": "it was before um the first thing we do is we would we would snapshot the state so this is kind",
    "start": "1576740",
    "end": "1583580"
  },
  {
    "text": "of an operation where we take the model that's in memory we serialize it in some form in some form you can do it you can",
    "start": "1583580",
    "end": "1590539"
  },
  {
    "text": "do that however you choose and most importantly along with that information we we store kind of what position we",
    "start": "1590539",
    "end": "1595880"
  },
  {
    "text": "were in the log so at that stage if the service goes down what we've got is the oh well first of all the uh we we can",
    "start": "1595880",
    "end": "1604039"
  },
  {
    "text": "then continue to process commands and the service can update the state into uh",
    "start": "1604039",
    "end": "1609080"
  },
  {
    "text": "kind of subsequent commands so if we lose the service at that point what we've got is the log in position five",
    "start": "1609080",
    "end": "1614659"
  },
  {
    "text": "and the snapshot from position four so when we start at the service in its initial State we we are loading the",
    "start": "1614659",
    "end": "1622940"
  },
  {
    "text": "snapshot into memory first so that gets it back into state for four then we just replay from that position in the log so",
    "start": "1622940",
    "end": "1630260"
  },
  {
    "text": "we can so we don't have to so we don't we have to replay the whole log we just start again at position five",
    "start": "1630260",
    "end": "1636320"
  },
  {
    "text": "so this what this allows us to do is to basically archive archive the log up to",
    "start": "1636320",
    "end": "1642860"
  },
  {
    "text": "the position where we have snapshots and it makes the recovery time a more bounded problem",
    "start": "1642860",
    "end": "1650139"
  },
  {
    "text": "yes so so this is what we achieve uh in our third project so at this stage",
    "start": "1650539",
    "end": "1656720"
  },
  {
    "text": "basically we have a service which is a clustered and it's able to manage its",
    "start": "1656720",
    "end": "1662840"
  },
  {
    "text": "state on its own so we don't have to store our state uh in a separate database we can just",
    "start": "1662840",
    "end": "1669860"
  },
  {
    "text": "um durably manage this state uh just with a cluster there I've put a database",
    "start": "1669860",
    "end": "1675140"
  },
  {
    "text": "because typically in in your system uh you are going to have to generate some",
    "start": "1675140",
    "end": "1680779"
  },
  {
    "text": "even so inner trading system typically you're going to generate trades those trades you don't want to keep them in",
    "start": "1680779",
    "end": "1687620"
  },
  {
    "text": "memory forever you are going to want to write them to replicate them to another system so you don't have a some state",
    "start": "1687620",
    "end": "1695600"
  },
  {
    "text": "which grows unbounded in your model so what you would do there is basically",
    "start": "1695600",
    "end": "1700960"
  },
  {
    "text": "write the trade reliably to uh just a SQL database in an app and only fashion",
    "start": "1700960",
    "end": "1708980"
  },
  {
    "text": "or to some form of events though so to to uh to review uh what the the",
    "start": "1708980",
    "end": "1718400"
  },
  {
    "text": "overall architecture of the of the system look like so I will reiterate so we have this at the",
    "start": "1718400",
    "end": "1725779"
  },
  {
    "text": "top level this very cleanly separated uh model which is stateful and below that",
    "start": "1725779",
    "end": "1733700"
  },
  {
    "text": "seats all the complex technical infrastructure with all the stuff dealing with all the network are your",
    "start": "1733700",
    "end": "1740779"
  },
  {
    "text": "all the conspiracy aspects uh the Persistence of the log the Persistence of the snapshots and the replication to",
    "start": "1740779",
    "end": "1747919"
  },
  {
    "text": "uh to followers and the Really the good thing uh to now",
    "start": "1747919",
    "end": "1753679"
  },
  {
    "text": "is that their open source solution which basically provide out of the box all the",
    "start": "1753679",
    "end": "1759440"
  },
  {
    "text": "technical infrastructure so instead of building the full stack yourself you can already find those kind of application",
    "start": "1759440",
    "end": "1766640"
  },
  {
    "text": "servers and develop on top your your business logic so here are two implementation we've",
    "start": "1766640",
    "end": "1774260"
  },
  {
    "text": "been using so copycats is a Java based implementation of the consensus",
    "start": "1774260",
    "end": "1781100"
  },
  {
    "text": "algorithm so basically it gives you pretty much the full uh the full",
    "start": "1781100",
    "end": "1786320"
  },
  {
    "text": "technical stack we have described before it works for a use case where you don't",
    "start": "1786320",
    "end": "1791480"
  },
  {
    "text": "have a crazy requirements in terms of throughput so typically in the uh in the region of thousands of message per",
    "start": "1791480",
    "end": "1798080"
  },
  {
    "text": "second when you are dealing with uh something more intense where you're going in the",
    "start": "1798080",
    "end": "1805220"
  },
  {
    "text": "hundreds of thousands of message per second or more there is a uh an open source project called Aaron so",
    "start": "1805220",
    "end": "1813200"
  },
  {
    "text": "it's a new Carlo latency messaging system which is being developed by Martin Thompson so we talked about",
    "start": "1813200",
    "end": "1819440"
  },
  {
    "text": "Martin Thompson before he was the CTO of lmax so he knows very well this architecture and on his left we have",
    "start": "1819440",
    "end": "1826460"
  },
  {
    "text": "Todd Montgomery so Todd Montgomery has also been talking at Yahoo several time is he was a CTO of a company called 29",
    "start": "1826460",
    "end": "1834080"
  },
  {
    "text": "West which was building a low latency messaging solution which is used pretty",
    "start": "1834080",
    "end": "1839659"
  },
  {
    "text": "much everywhere in finance so in bank exchange all over the place so",
    "start": "1839659",
    "end": "1845600"
  },
  {
    "text": "together they are building Aaron Aaron is a low latency messaging solution and",
    "start": "1845600",
    "end": "1850820"
  },
  {
    "text": "which is evolving toward this application server we were we were",
    "start": "1850820",
    "end": "1855860"
  },
  {
    "text": "talking about so we've been talking a lot about financial use case but I hope that you",
    "start": "1855860",
    "end": "1863720"
  },
  {
    "text": "see that what we have been describing here like this technical infrastructure this application server has absolutely",
    "start": "1863720",
    "end": "1870380"
  },
  {
    "text": "nothing to do with Finance if you have to build a reactive Services you should",
    "start": "1870380",
    "end": "1876140"
  },
  {
    "text": "think about that and you should look at this architecture so just put a few examples there of other use case where",
    "start": "1876140",
    "end": "1883940"
  },
  {
    "text": "this could work so for instance online game so when you have multiple players",
    "start": "1883940",
    "end": "1889360"
  },
  {
    "text": "playing together so let's say they're playing Quake we have a dozen of players connected to a server the server at any",
    "start": "1889360",
    "end": "1896600"
  },
  {
    "text": "point in time need to have a whole presentation of the current state of the world so you need to know where players",
    "start": "1896600",
    "end": "1902899"
  },
  {
    "text": "are positioned where Miss missiles are being fired and in which direction",
    "start": "1902899",
    "end": "1908059"
  },
  {
    "text": "if at some point a player perform an action that sends a command to uh to the",
    "start": "1908059",
    "end": "1913760"
  },
  {
    "text": "back end the back end is going to apply that command to the memory State and it's going to produce events which are",
    "start": "1913760",
    "end": "1921020"
  },
  {
    "text": "propagated down to uh to all the players so they can update their local model",
    "start": "1921020",
    "end": "1926860"
  },
  {
    "text": "so all those online games like gambling if you are implementing a platform to do",
    "start": "1926860",
    "end": "1931880"
  },
  {
    "text": "poker you can you can use this type of architecture and worth noting that typically in those scenarios you don't",
    "start": "1931880",
    "end": "1937940"
  },
  {
    "text": "need to be clustering your services you if your server fails over a game over",
    "start": "1937940",
    "end": "1943820"
  },
  {
    "text": "the guys connect on another server and they play their next game ticketing system so that for instance",
    "start": "1943820",
    "end": "1951860"
  },
  {
    "text": "what is typically happening when they open tickets for the Super Bowl everybody goes on the website at the",
    "start": "1951860",
    "end": "1958640"
  },
  {
    "text": "same time and everything falls over uh those systems like lmax were dealing",
    "start": "1958640",
    "end": "1964700"
  },
  {
    "text": "with millions of transactions per second so when you have a use case where there",
    "start": "1964700",
    "end": "1970700"
  },
  {
    "text": "is a lot of contention like that those systems are extremely strong at managing with those highly contented rights on",
    "start": "1970700",
    "end": "1978320"
  },
  {
    "text": "the on the system and an abused use case is basically if you are implemented implementing a",
    "start": "1978320",
    "end": "1984919"
  },
  {
    "text": "consistent replicated database or a consistent distributed cache this is the",
    "start": "1984919",
    "end": "1990679"
  },
  {
    "text": "typical infrastructure you can look at and you can make your database and your cache push based on instead of being",
    "start": "1990679",
    "end": "1996620"
  },
  {
    "text": "just request response and I think there are many many more use cases that you could think of with uh with this",
    "start": "1996620",
    "end": "2002260"
  },
  {
    "text": "architecture so I hope we have managed to demonstrate the Simplicity of the approach uh when I",
    "start": "2002260",
    "end": "2010539"
  },
  {
    "text": "say Simplicity it's really at the model level for you it's it's a great environment to build your model all the",
    "start": "2010539",
    "end": "2017080"
  },
  {
    "text": "complexities happening under the hood within the this application server and",
    "start": "2017080",
    "end": "2023019"
  },
  {
    "text": "you don't the great thing is that you don't have to build it yourself so I think this architecture really requires",
    "start": "2023019",
    "end": "2028299"
  },
  {
    "text": "a lot more attention than it has had in the in the past few years so you you can",
    "start": "2028299",
    "end": "2033640"
  },
  {
    "text": "learn more about the architecture so Martin Fuller has been publishing on his weekly a Long blog post that along",
    "start": "2033640",
    "end": "2041140"
  },
  {
    "text": "article that you put together with with Dave you have also the raft paper and",
    "start": "2041140",
    "end": "2048040"
  },
  {
    "text": "the website where you can learn about rafts they have lots of visual examples showing you uh what happens when a",
    "start": "2048040",
    "end": "2054520"
  },
  {
    "text": "server dies if you lose a message so you can really understand how that that is working the guys working sorry at",
    "start": "2054520",
    "end": "2063158"
  },
  {
    "text": "LinkedIn and they're not confused on Kafka they are all about log they are",
    "start": "2063159",
    "end": "2069339"
  },
  {
    "text": "publishing lots of interesting article about about building log base systems and it's very relevant here and finally",
    "start": "2069339",
    "end": "2076179"
  },
  {
    "text": "we've published a white pepper which is available on our website and talking some detail about this architecture and",
    "start": "2076179",
    "end": "2083138"
  },
  {
    "text": "the benefit of the architecture thank you very much [Applause]",
    "start": "2083139",
    "end": "2093689"
  }
]