[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "[Music] all right hello everyone my name is",
    "start": "6990",
    "end": "13080"
  },
  {
    "text": "Michael I'm a software engineer from iigo in Germany we built uh web-based",
    "start": "13080",
    "end": "18160"
  },
  {
    "text": "solutions for the financial sector for banks and fintechs and uh yeah I've come",
    "start": "18160",
    "end": "23840"
  },
  {
    "text": "to talk about architecture for the web client and yeah why is it even important",
    "start": "23840",
    "end": "29320"
  },
  {
    "text": "I probably don't have to convince you here because you came to the presentation but if you'd like to tell",
    "start": "29320",
    "end": "34640"
  },
  {
    "start": "30000",
    "end": "62000"
  },
  {
    "text": "others well we have to build increasingly large web applications",
    "start": "34640",
    "end": "39840"
  },
  {
    "text": "increasingly increasingly large amount of code uh that run on the web client and we have to Define tools that we use",
    "start": "39840",
    "end": "48199"
  },
  {
    "text": "for that we have to find better tools because the code bases are becoming more complex the teams are becoming larger",
    "start": "48199",
    "end": "55680"
  },
  {
    "text": "and we also have to have a Common Language and understanding a vocabulary that we used to talk about these things",
    "start": "55680",
    "end": "63160"
  },
  {
    "start": "62000",
    "end": "100000"
  },
  {
    "text": "so what are the aspects of architecture that that interest me here uh for this",
    "start": "63160",
    "end": "68920"
  },
  {
    "text": "talk there complexity the web application platform has been growing",
    "start": "68920",
    "end": "74240"
  },
  {
    "text": "tremendously over the last last couple of years and keeping up with with a mobile",
    "start": "74240",
    "end": "79280"
  },
  {
    "text": "platform and uh so the this complexity in the platform demands more complex applications so people are building ever",
    "start": "79280",
    "end": "87000"
  },
  {
    "text": "more complex web applications and this yeah complexity drives the um yeah the",
    "start": "87000",
    "end": "92680"
  },
  {
    "text": "platform complexity drives this so this is one challenge uh that that's become",
    "start": "92680",
    "end": "98040"
  },
  {
    "text": "important over the last couple of years and uh the next challenge is yeah",
    "start": "98040",
    "end": "103360"
  },
  {
    "text": "responsiveness or reactivity and in the concept of web front ends I'm I'm not really you know talking about uh fa",
    "start": "103360",
    "end": "110520"
  },
  {
    "text": "tolerance or you know um dying early or something like that um reactivity means",
    "start": "110520",
    "end": "117360"
  },
  {
    "text": "the the application should always be quick to respond to the the user and when you fill out a form in a web",
    "start": "117360",
    "end": "122880"
  },
  {
    "text": "application nowadays you don't wait to submit the the form before getting your feedback on validation and things like",
    "start": "122880",
    "end": "129360"
  },
  {
    "text": "that so so there's a concept bidirectional communication between the web client and the",
    "start": "129360",
    "end": "135480"
  },
  {
    "text": "server and then there's the third challenge that's of particular interest here in this talk it's scalability and",
    "start": "135480",
    "end": "143080"
  },
  {
    "start": "136000",
    "end": "181000"
  },
  {
    "text": "with web applications you know you might think about well scaling across multiple CPU cores or something like that and",
    "start": "143080",
    "end": "150120"
  },
  {
    "text": "that's not really very interesting uh for the web client or most of the time maybe you're building a 3D game or",
    "start": "150120",
    "end": "156080"
  },
  {
    "text": "something then that's important too but uh well scalability I'm meaning here is",
    "start": "156080",
    "end": "161720"
  },
  {
    "text": "uh scaling across teams of various backgrounds you you have not only multiple programmers working on a",
    "start": "161720",
    "end": "167200"
  },
  {
    "text": "project but actually multiple teams and those teams tend to you know favor different Technologies tend to have",
    "start": "167200",
    "end": "174480"
  },
  {
    "text": "various different level of expertise are very heterogeneous and we'd like to support that using our",
    "start": "174480",
    "end": "181800"
  },
  {
    "start": "181000",
    "end": "251000"
  },
  {
    "text": "architecture so and this is well the the blueprint for the solution that that's",
    "start": "181800",
    "end": "187000"
  },
  {
    "text": "uh going to be the topic of this talk um this is the so-called unidirectional data flow and it promises to simplify",
    "start": "187000",
    "end": "194319"
  },
  {
    "text": "the the development and maintenance of web applications so um it's actually not",
    "start": "194319",
    "end": "199480"
  },
  {
    "text": "that new uh 10 to 20 years ago already you had these types of web applications where there was a database sitting on",
    "start": "199480",
    "end": "206080"
  },
  {
    "text": "your server and it had some contents that was interesting to users would make a request to the to the server and they",
    "start": "206080",
    "end": "213080"
  },
  {
    "text": "would serve the view just an HTML representation of the contents of your database along with that view they might",
    "start": "213080",
    "end": "220599"
  },
  {
    "text": "get a form which allowed them to to add or modify the contents of the database",
    "start": "220599",
    "end": "225959"
  },
  {
    "text": "and well they post the form to an action and that in turn on the server modifies",
    "start": "225959",
    "end": "231400"
  },
  {
    "text": "your application state so this flow of State view uh action or intent to modify",
    "start": "231400",
    "end": "238879"
  },
  {
    "text": "the state and Go full circle it's actually not new what's new is that over",
    "start": "238879",
    "end": "244280"
  },
  {
    "text": "the last couple of years this has also become an important topic for client side software development so who's",
    "start": "244280",
    "end": "251480"
  },
  {
    "text": "responsible for that Facebook uh two years ago they made a presentation where they told everyone well we have a huge",
    "start": "251480",
    "end": "258880"
  },
  {
    "text": "problem uh getting our count of unre messages to work synchronously uh across",
    "start": "258880",
    "end": "264360"
  },
  {
    "text": "the entire application so as as users navigated Facebook they had various places where there was a",
    "start": "264360",
    "end": "270199"
  },
  {
    "text": "possibility to read or send chat messages to other users and apparently",
    "start": "270199",
    "end": "275680"
  },
  {
    "text": "it was really difficult to get discount to sync up everywhere and when you read a message for it actually to stay you",
    "start": "275680",
    "end": "281919"
  },
  {
    "text": "know read and not come back with with one or two un messages you'd click it and oh actually nothing new so um yeah",
    "start": "281919",
    "end": "290280"
  },
  {
    "text": "users were very very vocal about this and so it turned out that an architectural problem had really become",
    "start": "290280",
    "end": "297039"
  },
  {
    "text": "a a user facing problem H in case you can't R read this so there's a Facebook",
    "start": "297039",
    "end": "303000"
  },
  {
    "text": "uh wall message for Mark Zuckerberg I think uh where 890 people uh vote up for",
    "start": "303000",
    "end": "309759"
  },
  {
    "text": "please improve the chat system so yeah um so there was some yeah degree of um",
    "start": "309759",
    "end": "317360"
  },
  {
    "text": "top down pressure to to modify this to modify the architecture to find out what is wrong with the current architecture",
    "start": "317360",
    "end": "323919"
  },
  {
    "text": "with a state that is redundant across multiple components and find a better way to",
    "start": "323919",
    "end": "330319"
  },
  {
    "text": "manage this so what does the unidirectional flow look like that",
    "start": "330319",
    "end": "336080"
  },
  {
    "start": "332000",
    "end": "455000"
  },
  {
    "text": "Facebook came up with and they they called this pattern the flux architecture it's not just a a software",
    "start": "336080",
    "end": "341520"
  },
  {
    "text": "that you can download it's an architectural blueprint that you can well employ in your application so the state should be",
    "start": "341520",
    "end": "349600"
  },
  {
    "text": "stored in this uh yeah components called stores where each store is uh responsible for a slice of the state and",
    "start": "349600",
    "end": "357440"
  },
  {
    "text": "those should not be overlapping so there's should be distinct and then you have the view which is uh at Facebook",
    "start": "357440",
    "end": "364680"
  },
  {
    "text": "they already uh used react to render The View so um that wasn't wasn't uh it was",
    "start": "364680",
    "end": "369960"
  },
  {
    "text": "a really good match because uh react is very well suited to rendering the entire",
    "start": "369960",
    "end": "375319"
  },
  {
    "text": "UI every time you make a state change so they could pick up this traditional way of rendering web applications you know",
    "start": "375319",
    "end": "381000"
  },
  {
    "text": "just reflect the current state of your database instead they would just do it on the client reflect the current state",
    "start": "381000",
    "end": "386800"
  },
  {
    "text": "of your uh of your store and reender the entire component Hier in your",
    "start": "386800",
    "end": "392120"
  },
  {
    "text": "app and then uh of course the users just uh user doesn't just want to want to",
    "start": "392120",
    "end": "397479"
  },
  {
    "text": "browse the uh read only view of its application so um yeah there's the",
    "start": "397479",
    "end": "402599"
  },
  {
    "text": "so-called action Creator or actually multiple action creators for each thing that the user can do in an application",
    "start": "402599",
    "end": "408599"
  },
  {
    "text": "for example Mark a message as RIT or uh create a new message send it to someone",
    "start": "408599",
    "end": "414560"
  },
  {
    "text": "there's an action Creator talks to the POS probably web rest API and uh once it",
    "start": "414560",
    "end": "422800"
  },
  {
    "text": "determines if an action can be carried out and should be applied to the application state that stored on the",
    "start": "422800",
    "end": "427919"
  },
  {
    "text": "client it'll dispatch this action to the so-called dispatcher which just notifies",
    "start": "427919",
    "end": "433479"
  },
  {
    "text": "all the stores about what happened so somebody sent a message to someone yeah and um yeah all this",
    "start": "433479",
    "end": "441520"
  },
  {
    "text": "happens on the client and uh so if this is flux um are",
    "start": "441520",
    "end": "447599"
  },
  {
    "text": "there parts of this that I can download where where do I have to fill in the blanks or do I have to have to write everything myself well that most",
    "start": "447599",
    "end": "454840"
  },
  {
    "text": "certainly don't there's there's a large number actually of flux applications nowadays uh flux implementations",
    "start": "454840",
    "end": "460720"
  },
  {
    "start": "455000",
    "end": "496000"
  },
  {
    "text": "nowadays so there's the yeah traditional vanilla Facebook flux uh implementation",
    "start": "460720",
    "end": "466479"
  },
  {
    "text": "that not that many people use I think uh there's Yahoo flexible which is pretty",
    "start": "466479",
    "end": "472039"
  },
  {
    "text": "popular there's rjs I think by Airbnb and um which is a bit more",
    "start": "472039",
    "end": "478319"
  },
  {
    "text": "concise um avoid spoiler plate uh and then uh well Redux I I haven't put on",
    "start": "478319",
    "end": "485319"
  },
  {
    "text": "here yet I have a separate slide for that because it's it's a bit different but it's also very popular people mostly",
    "start": "485319",
    "end": "492599"
  },
  {
    "text": "just say Redux instead of flux nowadays yeah and uh well uh to get some",
    "start": "492599",
    "end": "499400"
  },
  {
    "start": "496000",
    "end": "535000"
  },
  {
    "text": "some meat uh to to this Theory um there's a there's a little yeah most",
    "start": "499400",
    "end": "506120"
  },
  {
    "text": "yeah the simplest possible web shop you might say that uh Dimitri vski wrote in",
    "start": "506120",
    "end": "511919"
  },
  {
    "text": "15 flux implementations so if you're into flux you want to know more and find",
    "start": "511919",
    "end": "517000"
  },
  {
    "text": "out the right implementation for you uh you you might check it out and have a have a look at all the 15 different",
    "start": "517000",
    "end": "523800"
  },
  {
    "text": "implementations well what does it do it just has a list of products that you can",
    "start": "523800",
    "end": "528920"
  },
  {
    "text": "buy and uh it has a shopping cart so uh it allows you to add products to the",
    "start": "528920",
    "end": "536120"
  },
  {
    "text": "shopping cart that's one action and then there's another action to to check out the contents of that shopping",
    "start": "536120",
    "end": "541480"
  },
  {
    "text": "cart so logically you would probably Define two view components here the the",
    "start": "541480",
    "end": "547920"
  },
  {
    "text": "product list view component and the shopping C view component and also it's",
    "start": "547920",
    "end": "554000"
  },
  {
    "text": "it's usually sensible in this case to um Define two stores one store that manages the products that are available and",
    "start": "554000",
    "end": "560839"
  },
  {
    "text": "their inventory so you can determine if the product has been sold out and uh",
    "start": "560839",
    "end": "566839"
  },
  {
    "text": "well another store that manages the the state of your current shopping cart contents yeah and um to have some some",
    "start": "566839",
    "end": "575959"
  },
  {
    "text": "actual code for this um I try to further simplify the example that was based on",
    "start": "575959",
    "end": "583160"
  },
  {
    "text": "Yahoo flexible and here we have a jsx implementation of the view component for",
    "start": "583160",
    "end": "590560"
  },
  {
    "text": "the product list to the left and if if you're not familiar with jsx it's the",
    "start": "590560",
    "end": "595760"
  },
  {
    "text": "react way of generating HTML to within the browser so it's uh a way you can uh",
    "start": "595760",
    "end": "602839"
  },
  {
    "text": "embed XML literals into your um JavaScript code to simplify the",
    "start": "602839",
    "end": "608120"
  },
  {
    "text": "generation of Dom and the most important thing that this this view component does it just",
    "start": "608120",
    "end": "613760"
  },
  {
    "text": "renders the current state which is has has received from the from the store from the product store somehow we'll see",
    "start": "613760",
    "end": "620240"
  },
  {
    "text": "how and it allows the user to you know press the button and to add this product",
    "start": "620240",
    "end": "626160"
  },
  {
    "text": "uh to the shopping cart for this the action cre Creator is called uh at to card that we imported",
    "start": "626160",
    "end": "633160"
  },
  {
    "text": "here and uh yeah it just renders the title the price and this this image and",
    "start": "633160",
    "end": "638639"
  },
  {
    "text": "the button as we've seen in the demo and well this functionality wise this is",
    "start": "638639",
    "end": "645360"
  },
  {
    "text": "pretty much everything that's that's needed to be done here um but there's some uh yeah some boiler plate code",
    "start": "645360",
    "end": "653079"
  },
  {
    "text": "sorry um where you have to um connect this view component to the to the store",
    "start": "653079",
    "end": "658880"
  },
  {
    "text": "and that's actually depending on the flux implementation that you use you have to write a lot of the spoiler plate code for the initial provisioning of the",
    "start": "658880",
    "end": "666000"
  },
  {
    "text": "data for the querying of the store to get the data into your view component and then for keeping up to date you know",
    "start": "666000",
    "end": "671959"
  },
  {
    "text": "uh getting the the latest store contents whenever it changes and re-rendering the view how how this works in detail is not",
    "start": "671959",
    "end": "678880"
  },
  {
    "text": "that important it's just spiler plate and then uh yeah you wire everything together and uh pull the",
    "start": "678880",
    "end": "687000"
  },
  {
    "text": "other components in the the shopping cart comp component for example I won't go into detail for that it looks very",
    "start": "687000",
    "end": "692440"
  },
  {
    "text": "similar and yeah you provide a render method that allows you to kick off your UI by Pro doing the initial",
    "start": "692440",
    "end": "699760"
  },
  {
    "text": "render and then you're set for the view and then having a go with the the next",
    "start": "699760",
    "end": "705800"
  },
  {
    "text": "part of our application those are the action creators which are a bit more simple in the most simple case you have",
    "start": "705800",
    "end": "712160"
  },
  {
    "text": "a synchronous action Creator it's just a a one-off call you're you the framework",
    "start": "712160",
    "end": "717760"
  },
  {
    "text": "passes this done call for you when you invoke an action Creator so you can do asynchronous calls too and well an",
    "start": "717760",
    "end": "724800"
  },
  {
    "text": "action is just a string identifier that says you know what happened or what what should happened a product should be",
    "start": "724800",
    "end": "731440"
  },
  {
    "text": "added to the shopping cart so the stores later know if they have to do something",
    "start": "731440",
    "end": "737000"
  },
  {
    "text": "and uh then some payload associated with the section so in this case what product was added to the to the shopping",
    "start": "737000",
    "end": "744079"
  },
  {
    "text": "cart and then there's the asynchronous case uh where you say okay I'm",
    "start": "744079",
    "end": "749639"
  },
  {
    "text": "going to check out this card for example yeah for for there you have to talk to the rest API obviously to do a check out",
    "start": "749639",
    "end": "757920"
  },
  {
    "text": "and um then you yeah this this rest API is wrapped here you talk to it and",
    "start": "757920",
    "end": "763199"
  },
  {
    "text": "hopefully it'll say success check out you can also dispat dispatch that action so this allows you to for example show",
    "start": "763199",
    "end": "769279"
  },
  {
    "text": "some sort of progress indicator in between those actions and uh there you have an asynchronous done",
    "start": "769279",
    "end": "776279"
  },
  {
    "text": "call and um yeah possibly should also handle the error case here which is of",
    "start": "776279",
    "end": "782399"
  },
  {
    "text": "course omitted in the example and then there's uh this the dispatcher which is uh yeah I just",
    "start": "782399",
    "end": "788760"
  },
  {
    "text": "didn't put anything in here because the the fux implementation is going to do that for you it's just call it just",
    "start": "788760",
    "end": "794120"
  },
  {
    "text": "calls all your stores in a row and sometimes uh yeah it has to do some other things um because flx is actually",
    "start": "794120",
    "end": "801800"
  },
  {
    "text": "not that simple uh so uh that's why you have to download a framework and not",
    "start": "801800",
    "end": "807079"
  },
  {
    "text": "just write a for Loop over your store so for example the product store uh it",
    "start": "807079",
    "end": "814480"
  },
  {
    "text": "keeps the list of available product and uh their inventory and uh yeah you can query this",
    "start": "814480",
    "end": "820959"
  },
  {
    "text": "store to get all the products this is what the what the view does for rendering and it says okay I'm going to",
    "start": "820959",
    "end": "827240"
  },
  {
    "text": "handle these methods this depends on the flux implementation sometimes you have just was just one big switch case",
    "start": "827240",
    "end": "832839"
  },
  {
    "text": "statements where all the actions go through with your flexib it's like this you say okay I I've got these handlers",
    "start": "832839",
    "end": "838399"
  },
  {
    "text": "and these Associated call backs so when someone adds something to the shopping cart I need to um call my decrease",
    "start": "838399",
    "end": "846279"
  },
  {
    "text": "inventory method because that's what I have to do when things are put into the card and yeah handle receive is very Sim",
    "start": "846279",
    "end": "853160"
  },
  {
    "text": "uh simple that's just the action that says okay when the application is kicked off uh we need to uh put the initial",
    "start": "853160",
    "end": "859920"
  },
  {
    "text": "products into the store and decrease inventory is a bit more well weird because the dispatcher is used as",
    "start": "859920",
    "end": "867079"
  },
  {
    "text": "accessed and this weight for called is made so in this case the product store",
    "start": "867079",
    "end": "872480"
  },
  {
    "text": "says when when the inventory is decreased I let the card store go first so the card store is able to put",
    "start": "872480",
    "end": "878839"
  },
  {
    "text": "something into the card before I remove it from the from the inventory because",
    "start": "878839",
    "end": "884040"
  },
  {
    "text": "if the count goes to zero the card store might say okay there's actually nothing left I cannot put anything into the card",
    "start": "884040",
    "end": "890120"
  },
  {
    "text": "so this is a kind of functional dependency between those stores and uh this is why the dispatcher is not that",
    "start": "890120",
    "end": "896440"
  },
  {
    "text": "trivial you can actually now create weight for chains that form a circle and",
    "start": "896440",
    "end": "902000"
  },
  {
    "text": "then you have maybe endless recursion or uh yeah a deadlock so it's a bit more",
    "start": "902000",
    "end": "909079"
  },
  {
    "start": "909000",
    "end": "1118000"
  },
  {
    "text": "complex ah so uh but those were the uh components of our application and well",
    "start": "909079",
    "end": "916079"
  },
  {
    "text": "what what advantage advantages do we see to a more classical MVC approach uh such",
    "start": "916079",
    "end": "921600"
  },
  {
    "text": "as those well using Angular JS or backbone you have a very strict",
    "start": "921600",
    "end": "926639"
  },
  {
    "text": "separation of State uh in those stores the UI in the view components and the behavior in the actions and action",
    "start": "926639",
    "end": "933319"
  },
  {
    "text": "creators so you always know where to put something that's that's nice um each",
    "start": "933319",
    "end": "939120"
  },
  {
    "text": "store value each state value is stored exactly once so you don't have those inconsistency problems that you had with",
    "start": "939120",
    "end": "945199"
  },
  {
    "text": "uh yeah with a traditional approach or that Facebook at least had with a traditional approach and you have a very",
    "start": "945199",
    "end": "951639"
  },
  {
    "text": "um yeah good testability because you know exactly you know a view is just supposed to transform a given State into",
    "start": "951639",
    "end": "959199"
  },
  {
    "text": "a Dom tree and you can check if this D tree looks good uh a store just changes its states after an action happens you",
    "start": "959199",
    "end": "966000"
  },
  {
    "text": "can look at the state before and after to see if it's good and it actually also",
    "start": "966000",
    "end": "971360"
  },
  {
    "text": "simplifies server side rendering which is very hard to do if if you're impossible to do if you're using angular",
    "start": "971360",
    "end": "977399"
  },
  {
    "text": "Jaz um yeah you just say Okay I I generate initial State on the server",
    "start": "977399",
    "end": "982880"
  },
  {
    "text": "submit it to the send it to the client as a Json object and send the initial",
    "start": "982880",
    "end": "988000"
  },
  {
    "text": "view as well the initial HTML and then the Machinery just picks up on the client and starts updating the Dom uh",
    "start": "988000",
    "end": "995360"
  },
  {
    "text": "when when the next action happens of course uh there are also a",
    "start": "995360",
    "end": "1000920"
  },
  {
    "text": "couple of disadvantages um well the stores in the small applications is just all of this",
    "start": "1000920",
    "end": "1006480"
  },
  {
    "text": "in small applications all of these don't very matter very much but uh as you have more actions you're you're prone to get",
    "start": "1006480",
    "end": "1013600"
  },
  {
    "text": "conflicts or you don't really know which stores actually work with what actions",
    "start": "1013600",
    "end": "1018639"
  },
  {
    "text": "and if you're going to change a payload of an action what stores are going to be affected things like that there are",
    "start": "1018639",
    "end": "1025720"
  },
  {
    "text": "these hardware store dependencies so the stores are not really isolated this is",
    "start": "1025720",
    "end": "1030959"
  },
  {
    "text": "this makes testing harder and this makes you know swapping Parts out harder and",
    "start": "1030959",
    "end": "1036199"
  },
  {
    "text": "stores are conceptually Singletons so for serice side rendering they actually have one store instance per request but",
    "start": "1036199",
    "end": "1043880"
  },
  {
    "text": "uh you cannot just put uh two product lists into this application so you would have to rewrite your product list if you",
    "start": "1043880",
    "end": "1050799"
  },
  {
    "text": "if you wanted to manage uh you know two sources of products that could be put into your shopping",
    "start": "1050799",
    "end": "1057080"
  },
  {
    "text": "cart and then there's this enti pattern that I've gloss over in the uh in the code uh here actually mutable state is",
    "start": "1057080",
    "end": "1064720"
  },
  {
    "text": "transported through these actions which can lead to subtle errors so in this",
    "start": "1064720",
    "end": "1069919"
  },
  {
    "text": "case um the store just overrides its internal product State when new products are received but at the same time you",
    "start": "1069919",
    "end": "1076960"
  },
  {
    "text": "get this um payload through the at to cart action and this is all the way",
    "start": "1076960",
    "end": "1082000"
  },
  {
    "text": "through the view from the from the past of this store through the view through",
    "start": "1082000",
    "end": "1087360"
  },
  {
    "text": "the action Creator backed into into this method and maybe the products have",
    "start": "1087360",
    "end": "1092400"
  },
  {
    "text": "already been replaced since the action was fired and in this case you would modify this product here that you get",
    "start": "1092400",
    "end": "1098799"
  },
  {
    "text": "passed through the payload and nothing would happen so you have to be careful not to mutate the objects that uh that",
    "start": "1098799",
    "end": "1106320"
  },
  {
    "text": "you put in the payload and rather use some sort of ID to to reference uh",
    "start": "1106320",
    "end": "1112159"
  },
  {
    "text": "objects in the store and this is really uh a crucial point that um is addressed by",
    "start": "1112159",
    "end": "1119960"
  },
  {
    "text": "Redux so they eliminate this problem completely by saying okay all stores um",
    "start": "1119960",
    "end": "1126679"
  },
  {
    "text": "are not allowed to mutate uh their state internally they just can when processing",
    "start": "1126679",
    "end": "1132679"
  },
  {
    "text": "an action they're only allowed to completely replace the state so with Redux there's there's only one big state",
    "start": "1132679",
    "end": "1139600"
  },
  {
    "text": "in your application it's one big state tree and whenever an action comes in that yeah replaces the state with a new",
    "start": "1139600",
    "end": "1146159"
  },
  {
    "text": "state that reflects this this this user action so uh to compare this this",
    "start": "1146159",
    "end": "1151840"
  },
  {
    "text": "diagram that we've seen before we don't have the group of of stores anymore",
    "start": "1151840",
    "end": "1157440"
  },
  {
    "text": "there's just this one store that's provided by the framework and because there's only one store we know don't",
    "start": "1157440",
    "end": "1162559"
  },
  {
    "text": "need the dispatcher anymore uh actions look very similar only in this case the The View actually",
    "start": "1162559",
    "end": "1168960"
  },
  {
    "text": "creates them and then dispatches them that's a minor difference maybe and um yeah how is the store",
    "start": "1168960",
    "end": "1176520"
  },
  {
    "text": "actually changed or updated for those the so-called reducers are used those",
    "start": "1176520",
    "end": "1181600"
  },
  {
    "text": "are functions that have the signature that we've just seen uh they take a state or a sub tree of the state apply",
    "start": "1181600",
    "end": "1187720"
  },
  {
    "text": "the action return the new state and with this functional programming pattern every time an action arrives the whole",
    "start": "1187720",
    "end": "1194559"
  },
  {
    "text": "state tree is updated and replaced well due to time constraints I can't go into full detail on Redux but",
    "start": "1194559",
    "end": "1201640"
  },
  {
    "text": "it's um yeah it really eliminates this mutable State problems that that flux",
    "start": "1201640",
    "end": "1206799"
  },
  {
    "text": "have has uh but um other than that uh it also gives you some really nice maybe",
    "start": "1206799",
    "end": "1213159"
  },
  {
    "start": "1209000",
    "end": "1423000"
  },
  {
    "text": "unexpected uh advantages well you have this functional composition so if you're for into functional programming uh",
    "start": "1213159",
    "end": "1220600"
  },
  {
    "text": "that's really really great it makes parts of your application easily testable and then you're somewhat",
    "start": "1220600",
    "end": "1227159"
  },
  {
    "text": "confident that when you put them together they are still uh well they're still working and uh you have snapshot replay",
    "start": "1227159",
    "end": "1234320"
  },
  {
    "text": "capabilities because the state is replace with a new state every time the action is dispatched uh you can just",
    "start": "1234320",
    "end": "1240080"
  },
  {
    "text": "always undo and go back to a previous state because that'll still work and you can just um record all the all the",
    "start": "1240080",
    "end": "1248120"
  },
  {
    "text": "actions record them uh send them to the server and then you know some someone has a problem calls you you can just",
    "start": "1248120",
    "end": "1254679"
  },
  {
    "text": "replay them locally on your workstation and see what has gone wrong",
    "start": "1254679",
    "end": "1259720"
  },
  {
    "text": "and uh if you're doing if you're doing it right work work with uh react uh apis that allow you to um you know perform",
    "start": "1259720",
    "end": "1267120"
  },
  {
    "text": "some uh yeah more efficient dirt checking um because the Well when the",
    "start": "1267120",
    "end": "1272600"
  },
  {
    "text": "reference doesn't change with Redux a reference to a part of the your state tree you can be sure that the contents",
    "start": "1272600",
    "end": "1278400"
  },
  {
    "text": "didn't change so you may be able to skip the the rendering of an entire sub tree of your view because you know the",
    "start": "1278400",
    "end": "1284840"
  },
  {
    "text": "according the corresponding state tree didn't change so but uh for that uh you have really",
    "start": "1284840",
    "end": "1291880"
  },
  {
    "text": "have to do it right and JavaScript doesn't actually make it very easy to do this right so um mutating state is yeah",
    "start": "1291880",
    "end": "1299880"
  },
  {
    "text": "JavaScript doesn't have built in uh checking of uh of IM mutability constraints so um if you're trying to",
    "start": "1299880",
    "end": "1308159"
  },
  {
    "text": "keep your objects from from being changed you you have to yeah jump",
    "start": "1308159",
    "end": "1313360"
  },
  {
    "text": "through some through some hoops so for example you can use a transpiler which which allows you such as barble which",
    "start": "1313360",
    "end": "1320480"
  },
  {
    "text": "allows you to use this spread Constructor so you can take an old object and create a new object where",
    "start": "1320480",
    "end": "1327240"
  },
  {
    "text": "some property has been updated or added or you yeah go really the hard way",
    "start": "1327240",
    "end": "1333919"
  },
  {
    "text": "and and call object frees on your entire object tree recursively but I would suggest doing",
    "start": "1333919",
    "end": "1339799"
  },
  {
    "text": "this only for testing because it's really uh heavy impact performance- wise",
    "start": "1339799",
    "end": "1345000"
  },
  {
    "text": "or you can just go over and use something like immutable jet was which is actually very nice it offers",
    "start": "1345000",
    "end": "1350159"
  },
  {
    "text": "immutable data types with protect you against accidental modification uh but it's also not well",
    "start": "1350159",
    "end": "1357840"
  },
  {
    "text": "it's it's not just simple JavaScript objects anymore in this case good old JavaScript object and arrays are very",
    "start": "1357840",
    "end": "1363880"
  },
  {
    "text": "easy to work with with every you know you can always find someone who can work with these things in mutable JS you",
    "start": "1363880",
    "end": "1369600"
  },
  {
    "text": "definitely have to learn it and well that amounts to the potentially steep learning curve goes for a mutable JS",
    "start": "1369600",
    "end": "1377240"
  },
  {
    "text": "also goes for the these functional programming paradigms some people think it's uh say it's very easy and natural",
    "start": "1377240",
    "end": "1383320"
  },
  {
    "text": "to me other people struggle with it but well it's uh yeah it's depending on on",
    "start": "1383320",
    "end": "1388760"
  },
  {
    "text": "how well you get along with it and then there are the uh container components with redu so those are your",
    "start": "1388760",
    "end": "1395360"
  },
  {
    "text": "top level components like the product list or the shopping card that represent some you know some parts of your",
    "start": "1395360",
    "end": "1401360"
  },
  {
    "text": "application that the user can do useful things with um and uh they yeah they",
    "start": "1401360",
    "end": "1408360"
  },
  {
    "text": "usually it's that they know the whole state tree and you have to be careful when you change things in the state tree",
    "start": "1408360",
    "end": "1413679"
  },
  {
    "text": "because maybe you need to add add a new piece of data or remove something then",
    "start": "1413679",
    "end": "1419240"
  },
  {
    "text": "well pretty much every part of your view might be affected and so we uh actually during",
    "start": "1419240",
    "end": "1426720"
  },
  {
    "start": "1423000",
    "end": "1534000"
  },
  {
    "text": "this time where where Redux was invented it happened last year I think we we came up with something different at company",
    "start": "1426720",
    "end": "1432799"
  },
  {
    "text": "because we also uh were struggling with the scalability problem working with multiple teams on the same same",
    "start": "1432799",
    "end": "1439200"
  },
  {
    "text": "project and um yeah we've uh rediscovered an an old programming",
    "start": "1439200",
    "end": "1445640"
  },
  {
    "text": "architecture or pattern it's called publish subscribe and it's actually used very heavily on the server side uh with",
    "start": "1445640",
    "end": "1452360"
  },
  {
    "text": "with messaging middleware and uh well its purpose is allow you to decouple",
    "start": "1452360",
    "end": "1458400"
  },
  {
    "text": "your components so yeah decoupling is um",
    "start": "1458400",
    "end": "1465480"
  },
  {
    "text": "it boils down to allowing your components to communicate because you always have to have a way to for them to",
    "start": "1465480",
    "end": "1471159"
  },
  {
    "text": "do that um but without the center component actually knowing about its",
    "start": "1471159",
    "end": "1477279"
  },
  {
    "text": "receivers or even if there are any recipient components when it sends a message and the receivers should not",
    "start": "1477279",
    "end": "1483399"
  },
  {
    "text": "need to know who actually sent a message they have to look at it evaluate what happened what do I need to do now and uh",
    "start": "1483399",
    "end": "1491399"
  },
  {
    "text": "yeah how can we do this well there has to be some some mediators some men in the middle which is called um an event",
    "start": "1491399",
    "end": "1497600"
  },
  {
    "text": "but or event broker sometimes and uh well it it just knows",
    "start": "1497600",
    "end": "1503200"
  },
  {
    "text": "you know this this component uh is interested in events regarding the shopping cart and maybe that component",
    "start": "1503200",
    "end": "1508840"
  },
  {
    "text": "is interested in all user actions having to do with receiving new products and uh",
    "start": "1508840",
    "end": "1514799"
  },
  {
    "text": "when an action happens that matches these subscriptions then it will deliver the uh the message through the uh",
    "start": "1514799",
    "end": "1521399"
  },
  {
    "text": "correct recipients and this selection happens through the configurable topics so these are just string identifi",
    "start": "1521399",
    "end": "1528240"
  },
  {
    "text": "that allow you to form channels of communication in your",
    "start": "1528240",
    "end": "1533520"
  },
  {
    "text": "application and for us uh to yeah to realize this unidirectional data flow",
    "start": "1533679",
    "end": "1539039"
  },
  {
    "start": "1534000",
    "end": "1630000"
  },
  {
    "text": "pattern that we've seen before it actually looks somewhat like this we have this event bus that I just",
    "start": "1539039",
    "end": "1544720"
  },
  {
    "text": "mentioned which is sitting in the middle and uh then we have well two kinds of",
    "start": "1544720",
    "end": "1550520"
  },
  {
    "text": "components really The View components that map very closely to the view components that you have in flux or",
    "start": "1550520",
    "end": "1556760"
  },
  {
    "text": "Redux they're just trying to display some data and uh well the user is uh is",
    "start": "1556760",
    "end": "1564240"
  },
  {
    "text": "able to you know invoke actions when interacting with these view components and then there are the",
    "start": "1564240",
    "end": "1570600"
  },
  {
    "text": "activity components which play the role of the of the stores in a flux context",
    "start": "1570600",
    "end": "1576080"
  },
  {
    "text": "but they no longer share the same Global action namespace um instead they are",
    "start": "1576080",
    "end": "1582080"
  },
  {
    "text": "connected uh yeah to this event bus as well and well there there actions that",
    "start": "1582080",
    "end": "1587679"
  },
  {
    "text": "they process they are selected through event topics so we have two types of event in this in the system they are",
    "start": "1587679",
    "end": "1593960"
  },
  {
    "text": "resource events they just they are meant to transport state from the activity components to the view components for",
    "start": "1593960",
    "end": "1601640"
  },
  {
    "text": "display and usually they get the state from the from the rest API first and then there are the action events which",
    "start": "1601640",
    "end": "1608559"
  },
  {
    "text": "process the uh which transport the users's intent to to work with the application and uh yeah to to segregate",
    "start": "1608559",
    "end": "1616600"
  },
  {
    "text": "these components um we we employ the concept of topics and well this forms a yeah a kind",
    "start": "1616600",
    "end": "1625200"
  },
  {
    "text": "of unidirectional flow but on multiple layers in the application so these uh these topics for example",
    "start": "1625200",
    "end": "1633279"
  },
  {
    "start": "1630000",
    "end": "1683000"
  },
  {
    "text": "this topic might stand for the shopping cart contents a resource topic um might be transported to just one specific view",
    "start": "1633279",
    "end": "1640480"
  },
  {
    "text": "components the shopping card and another topic the the list of available products",
    "start": "1640480",
    "end": "1646039"
  },
  {
    "text": "might be interesting to um two more components well this application I guess not or an action uh maybe generated by",
    "start": "1646039",
    "end": "1654320"
  },
  {
    "text": "one view component such as add this article to the shopping cart and that may be processed by both the shopping",
    "start": "1654320",
    "end": "1659919"
  },
  {
    "text": "cart activity the store if you will and the uh and the product list",
    "start": "1659919",
    "end": "1667159"
  },
  {
    "text": "activity so um yeah we have topics for both uh resources and actions and those",
    "start": "1667159",
    "end": "1673559"
  },
  {
    "text": "topics allow you to well configure uh after programming at configuration time",
    "start": "1673559",
    "end": "1679320"
  },
  {
    "text": "what Pro uh what components should be able to talk to each other so and now we have a a code",
    "start": "1679320",
    "end": "1686159"
  },
  {
    "start": "1683000",
    "end": "1947000"
  },
  {
    "text": "example that's really similar to what we've seen before we have a view component which in this context um gets",
    "start": "1686159",
    "end": "1692679"
  },
  {
    "text": "its uh not it not its state from a store but a in the context of this pupsa",
    "start": "1692679",
    "end": "1698440"
  },
  {
    "text": "application gets its resource from the event bus for this we have a little helper Library so in House of course we",
    "start": "1698440",
    "end": "1704720"
  },
  {
    "text": "developed a a library called luxar patterns to work with this kind of um of",
    "start": "1704720",
    "end": "1710360"
  },
  {
    "text": "project and it talks to the event bus for you and it says okay whenever the",
    "start": "1710360",
    "end": "1716360"
  },
  {
    "text": "products resource changes or the resource configured for the for the",
    "start": "1716360",
    "end": "1721919"
  },
  {
    "text": "topic that uh is associate with products then we need to reender this view",
    "start": "1721919",
    "end": "1727159"
  },
  {
    "text": "component and for this a react is used here and uh it just looks at the current",
    "start": "1727159",
    "end": "1732720"
  },
  {
    "text": "state of this um of this products resource and maybe it hasn't even receive products yet that's always",
    "start": "1732720",
    "end": "1739159"
  },
  {
    "text": "possible with pops up so we also have to fall back to an empty list in this case and it just renders those",
    "start": "1739159",
    "end": "1745960"
  },
  {
    "text": "products and then there's uh well the possibility for the user to uh add a a",
    "start": "1745960",
    "end": "1752799"
  },
  {
    "text": "um product to the card and for this we instantiated a publisher this is also done through this pattern library and uh",
    "start": "1752799",
    "end": "1759760"
  },
  {
    "text": "yeah it's also wired okay it's a bit small here but it's wir to the topic configured under the at to card feature",
    "start": "1759760",
    "end": "1766880"
  },
  {
    "text": "so um in this case the actual topics that are used on the event bus those are",
    "start": "1766880",
    "end": "1772399"
  },
  {
    "text": "not add to card here and products here but those are those are configured for",
    "start": "1772399",
    "end": "1778080"
  },
  {
    "text": "these names and the configuration looks like this we have this list view",
    "start": "1778080",
    "end": "1784000"
  },
  {
    "text": "component for products and for the at to card feature there's an action configured and that's this -2- card",
    "start": "1784000",
    "end": "1790840"
  },
  {
    "text": "action and the same action is configured on the activity that manages the state",
    "start": "1790840",
    "end": "1796159"
  },
  {
    "text": "and it's uh well it's it says okay decrement your inventory uh use that feature when you receive this at -2-",
    "start": "1796159",
    "end": "1803120"
  },
  {
    "text": "card action so the product activity doesn't even need to know that there's a shopping cart actually it just wired to",
    "start": "1803120",
    "end": "1809640"
  },
  {
    "text": "this uh to this action on the fly at configuration time so it could also be",
    "start": "1809640",
    "end": "1815080"
  },
  {
    "text": "invoked by some other other event and then uh there's this list",
    "start": "1815080",
    "end": "1820640"
  },
  {
    "text": "resource which transp transports the latest State and uh well it's called products- list or product list and it's",
    "start": "1820640",
    "end": "1829080"
  },
  {
    "text": "uh transported uh from the activity to the interested view",
    "start": "1829080",
    "end": "1834919"
  },
  {
    "text": "components then for the other half there is an activity component and this is",
    "start": "1835440",
    "end": "1841480"
  },
  {
    "text": "also managing the product list like we saw in the flux example before and uh it",
    "start": "1841480",
    "end": "1847320"
  },
  {
    "text": "again it interfaces with his patn library and is able to well publish uh",
    "start": "1847320",
    "end": "1853320"
  },
  {
    "text": "the current list of resources when all other components are list listening so",
    "start": "1853320",
    "end": "1858760"
  },
  {
    "text": "there has to be some kind of life cycle events submitted published by the event bus itself that says okay everyone's",
    "start": "1858760",
    "end": "1864639"
  },
  {
    "text": "listening listening now has has made the subscription so you can start publishing",
    "start": "1864639",
    "end": "1870799"
  },
  {
    "text": "data and uh also this activity is responsible for for updating the",
    "start": "1870799",
    "end": "1875840"
  },
  {
    "text": "products uh products list State when when a new uh at product action was",
    "start": "1875840",
    "end": "1880960"
  },
  {
    "text": "received or in this case the decrement inventory because that's what it's called in here and for this it just it",
    "start": "1880960",
    "end": "1887960"
  },
  {
    "text": "doesn't just modify the product as we've seen in a flux example which was a problem with the mutation of State",
    "start": "1887960",
    "end": "1894240"
  },
  {
    "text": "instead it uh it looks up the product in the current state and then updates the inventory there so it wouldn't even be",
    "start": "1894240",
    "end": "1901679"
  },
  {
    "text": "possible to modify the product that is coming in because the event bus in this in this framework that we build always",
    "start": "1901679",
    "end": "1908159"
  },
  {
    "text": "uh duplicates everything that it receives through through a publish call so effectively uh components cannot talk",
    "start": "1908159",
    "end": "1915760"
  },
  {
    "text": "to each cannot modify each other state and cannot uh damage each other and also",
    "start": "1915760",
    "end": "1921159"
  },
  {
    "text": "they're not allowed to expose any API so we do that by principle they are only allowed to talk through these",
    "start": "1921159",
    "end": "1928360"
  },
  {
    "text": "events so when you just remove a component from the application this should never break the application maybe",
    "start": "1928360",
    "end": "1934360"
  },
  {
    "text": "some components don't get the data but uh usually you you're able to remove a",
    "start": "1934360",
    "end": "1939519"
  },
  {
    "text": "couple of those components and everything well they're just missing from the screen but uh the application",
    "start": "1939519",
    "end": "1945480"
  },
  {
    "text": "doesn't break so yeah what's what's this solution it's",
    "start": "1945480",
    "end": "1951000"
  },
  {
    "start": "1947000",
    "end": "2096000"
  },
  {
    "text": "a it's a solution track um we've come up with this uh framework um that yeah",
    "start": "1951000",
    "end": "1957559"
  },
  {
    "text": "provides us with an event bus framework is called luxar JS and it doesn't only have the event bu it uh it also takes",
    "start": "1957559",
    "end": "1965399"
  },
  {
    "text": "care of component configuration we use a Json schema for that so you add the schema to your component to allow",
    "start": "1965399",
    "end": "1972120"
  },
  {
    "text": "specific properties to be set determines what what types of topics can be configured or maybe you just want to set",
    "start": "1972120",
    "end": "1978240"
  },
  {
    "text": "some some additional values such as an web service API URL something like that",
    "start": "1978240",
    "end": "1985159"
  },
  {
    "text": "and uh then it also allows you to compose these components uh also using a declarative",
    "start": "1985159",
    "end": "1991320"
  },
  {
    "text": "Json format so uh these these component compositions then look themselves like",
    "start": "1991320",
    "end": "1996799"
  },
  {
    "text": "components from the outside and it um yeah it manag this this life cycle tells the component when",
    "start": "1996799",
    "end": "2003840"
  },
  {
    "text": "the others are listening it has uh the services that we saw for example to to",
    "start": "2003840",
    "end": "2009480"
  },
  {
    "text": "render a react component and it uh offers some development tools for example you can uh",
    "start": "2009480",
    "end": "2016320"
  },
  {
    "text": "visualize uh what what events go through the application and uh how the how the",
    "start": "2016320",
    "end": "2021720"
  },
  {
    "text": "components are actually uh structure together can just show this quickly because I think",
    "start": "2021720",
    "end": "2028159"
  },
  {
    "text": "there's enough time if I get this yeah so we have the same demo built with",
    "start": "2028159",
    "end": "2033799"
  },
  {
    "text": "with this popup framework and uh there you I just add this button to open this",
    "start": "2033799",
    "end": "2039559"
  },
  {
    "text": "developer widget which is also just another component and it's able to tap",
    "start": "2039559",
    "end": "2044919"
  },
  {
    "text": "into a stream of event that goes through your application and shows you what's going on who's who are the collaborators",
    "start": "2044919",
    "end": "2052240"
  },
  {
    "text": "who published something who who is receiving can actually also look at the contents which is a bit hard on this",
    "start": "2052240",
    "end": "2057839"
  },
  {
    "text": "display but you know it's it makes transparent what's happening in your application and then you can visualize",
    "start": "2057839",
    "end": "2065118"
  },
  {
    "text": "the structure which allows you to see if you wired together your components",
    "start": "2065119",
    "end": "2070320"
  },
  {
    "text": "correctly because it just looks at the Json definition of your page and matches up these",
    "start": "2070320",
    "end": "2076679"
  },
  {
    "text": "topics and uh then you can do things like filter by by the components so now",
    "start": "2076679",
    "end": "2082720"
  },
  {
    "text": "it shows only events that that have to do with this with this component I just selected",
    "start": "2082720",
    "end": "2088919"
  },
  {
    "text": "here yeah and uh then back to the to the",
    "start": "2088919",
    "end": "2094679"
  },
  {
    "text": "question of architecture um yeah what do we think what our experiences with uh with this",
    "start": "2094679",
    "end": "2100880"
  },
  {
    "start": "2096000",
    "end": "2310000"
  },
  {
    "text": "pup sub solution as compared to traditional flux or maybe rux application so yeah the advantage",
    "start": "2100880",
    "end": "2108160"
  },
  {
    "text": "clearly is the decoupling of components which allows you to well isolate test",
    "start": "2108160",
    "end": "2113720"
  },
  {
    "text": "components in isolation but also to reuse them across application or across different pages in your applications",
    "start": "2113720",
    "end": "2120720"
  },
  {
    "text": "maybe uh you make architecture visible you see where components are connected",
    "start": "2120720",
    "end": "2125760"
  },
  {
    "text": "if you if you mod one component which components will be affected by this um",
    "start": "2125760",
    "end": "2131280"
  },
  {
    "text": "it well makes composition more flex flexible compared to flux because you're",
    "start": "2131280",
    "end": "2136320"
  },
  {
    "text": "free to Define your own patterns actually we we defined for example a a pattern an event pattern that transports",
    "start": "2136320",
    "end": "2143200"
  },
  {
    "text": "Flags through the application so du in state which is similar to Resource but",
    "start": "2143200",
    "end": "2148800"
  },
  {
    "text": "simpler for those cases where you just need to know if a popup window is open or something like that and maybe you",
    "start": "2148800",
    "end": "2155880"
  },
  {
    "text": "have have different things you might would like to abstract for example data streams and it also says every component",
    "start": "2155880",
    "end": "2162160"
  },
  {
    "text": "is a black box because it doesn't have any API it really doesn't matter if it's implemented using a functional approach",
    "start": "2162160",
    "end": "2169240"
  },
  {
    "text": "or an imperative approach so if you have development teams with different backgrounds and there are some hardcore",
    "start": "2169240",
    "end": "2175240"
  },
  {
    "text": "functional developers that like to implement their component State using you know reduce",
    "start": "2175240",
    "end": "2181480"
  },
  {
    "text": "operations um then then they can do that and uh if you have people who are pant",
    "start": "2181480",
    "end": "2187040"
  },
  {
    "text": "of uh reactive extensions then well an event bu subscription is really simple to an observable subscription in rxjs",
    "start": "2187040",
    "end": "2193680"
  },
  {
    "text": "they can put them uh put that thing on that and then work with rxj and their",
    "start": "2193680",
    "end": "2199720"
  },
  {
    "text": "component and you can also you know uh use a different view technology if you don't like react originally we started",
    "start": "2199720",
    "end": "2206640"
  },
  {
    "text": "out with u with angular one and we're still using Angular JS one for view components mostly um but recently you",
    "start": "2206640",
    "end": "2214000"
  },
  {
    "text": "can also use react it's just a thin thin adapter layer that you have to write uh of course also other other",
    "start": "2214000",
    "end": "2222520"
  },
  {
    "text": "Frameworks well and there's the drawbacks um the ecosystem is definitely",
    "start": "2222520",
    "end": "2227800"
  },
  {
    "text": "not comparable to what you get with with flux or Redux you walk the unread path",
    "start": "2227800",
    "end": "2233200"
  },
  {
    "text": "here um but we're yeah we're using we've been using it with with financial",
    "start": "2233200",
    "end": "2238280"
  },
  {
    "text": "institutions for two to three years now and so we we're very confident in it",
    "start": "2238280",
    "end": "2244560"
  },
  {
    "text": "working um yeah but you still have the freedom to make mistakes when you",
    "start": "2244560",
    "end": "2250040"
  },
  {
    "text": "determine which components are in your application and how you wire them together there's always the possibility",
    "start": "2250040",
    "end": "2255760"
  },
  {
    "text": "of for example going too small you you can originally we we defined components",
    "start": "2255760",
    "end": "2262040"
  },
  {
    "text": "that were just one button or one one table row or something like that and uh",
    "start": "2262040",
    "end": "2268319"
  },
  {
    "text": "then it became very messy you can imagine trying to draw this uh this wire diagram with hundreds of components well",
    "start": "2268319",
    "end": "2275480"
  },
  {
    "text": "even we if we have comp positions simplifies things a bit but um it can",
    "start": "2275480",
    "end": "2280560"
  },
  {
    "text": "become messy so you you really should try to identify components that have actual business value to the end user",
    "start": "2280560",
    "end": "2286880"
  },
  {
    "text": "and uh that makes things very approachable usually and uh we do have",
    "start": "2286880",
    "end": "2293160"
  },
  {
    "text": "applications that have hundreds of those components and they are very manageable so um so 100 instances I should say but",
    "start": "2293160",
    "end": "2301560"
  },
  {
    "text": "tens to yeah tens to 100 of component uh classes",
    "start": "2301560",
    "end": "2308119"
  },
  {
    "text": "um yeah and then is this still flux so originally we said let's talk about flux",
    "start": "2308119",
    "end": "2315640"
  },
  {
    "start": "2310000",
    "end": "2365000"
  },
  {
    "text": "and go beyond that uh for Dan abov the creative Redux all that counts is you",
    "start": "2315640",
    "end": "2321000"
  },
  {
    "text": "have unidirectional data flow and you have those changes described as plain objects in that sense both Redux and the",
    "start": "2321000",
    "end": "2328440"
  },
  {
    "text": "publish subscribe based approach are actually more flux than flux because in in flux you still have this non-reactive",
    "start": "2328440",
    "end": "2335000"
  },
  {
    "text": "way of creating actions and dispatching them at the same time so uh actions as",
    "start": "2335000",
    "end": "2341040"
  },
  {
    "text": "plain objects the the event model fits that very well and uh well Andress St says this to",
    "start": "2341040",
    "end": "2346720"
  },
  {
    "text": "say well uh it's it's cool that you're inventing a better flux but not doing flux at all also talking about Redux",
    "start": "2346720",
    "end": "2352800"
  },
  {
    "text": "here of course but we like to think that's somewhat true of our approach as well and uh yeah it's actually not that",
    "start": "2352800",
    "end": "2359560"
  },
  {
    "text": "important it's chology but uh it's some somewhat similar to flux what we're",
    "start": "2359560",
    "end": "2365000"
  },
  {
    "text": "doing and uh then you have the well highly subjective um Judgment of things",
    "start": "2365000",
    "end": "2372400"
  },
  {
    "text": "all of those approaches are unidirectional flow um we set out three main goals that",
    "start": "2372400",
    "end": "2378520"
  },
  {
    "text": "our architecture should solve and well complexity handling maybe if you if you",
    "start": "2378520",
    "end": "2383839"
  },
  {
    "text": "do flux right it will also work but you also always have this problem with the mutable State um the reactivity um yeah also",
    "start": "2383839",
    "end": "2394240"
  },
  {
    "text": "depends how you use flux but as I I said the action creation is dispatching them",
    "start": "2394240",
    "end": "2400000"
  },
  {
    "text": "uh hurts a bit and then scalability meaning not not performance- wise but uh",
    "start": "2400000",
    "end": "2406079"
  },
  {
    "text": "developer team wise we think um yeah that we really are onto something here",
    "start": "2406079",
    "end": "2412160"
  },
  {
    "text": "because um we are actually developing relatively complex uh single page",
    "start": "2412160",
    "end": "2417960"
  },
  {
    "text": "applications with this uh across multiple teams and they don't get in the way of each other too much so that kind",
    "start": "2417960",
    "end": "2425520"
  },
  {
    "text": "of works and then there's these problems and well uh is is uh snack snapshot record replay",
    "start": "2425520",
    "end": "2433440"
  },
  {
    "text": "important to you maybe maybe not uh and the other thing is learning curve if",
    "start": "2433440",
    "end": "2438640"
  },
  {
    "text": "you're already functional programmer then that's that's a non-issue with Redux um so these things are very",
    "start": "2438640",
    "end": "2445240"
  },
  {
    "text": "dependent on your situation uh longevity Redux is very young popsa pops up the pattern itself",
    "start": "2445240",
    "end": "2452839"
  },
  {
    "text": "uh has been there for 20 years so I think uh those methodologies like event sourcing or all the patterns around pops",
    "start": "2452839",
    "end": "2460119"
  },
  {
    "text": "up they they apply to this uh technique that we showcased here but of course what we are doing in particular maybe",
    "start": "2460119",
    "end": "2467280"
  },
  {
    "text": "too early to tell yeah and well that's about it uh um",
    "start": "2467280",
    "end": "2475280"
  },
  {
    "text": "yeah a framework is called luxar if you want to look into that the slides should",
    "start": "2475280",
    "end": "2480960"
  },
  {
    "text": "be on GitHub maybe I still have to make them public but they will be very soon otherwise and uh I was wondering uh if",
    "start": "2480960",
    "end": "2488599"
  },
  {
    "text": "there are any questions now all right then s thanks for your",
    "start": "2488599",
    "end": "2495839"
  },
  {
    "text": "attention [Applause]",
    "start": "2495839",
    "end": "2502240"
  },
  {
    "text": "everyone thank you very much I just like to remind you",
    "start": "2502240",
    "end": "2507240"
  },
  {
    "text": "pleas",
    "start": "2508720",
    "end": "2511720"
  }
]