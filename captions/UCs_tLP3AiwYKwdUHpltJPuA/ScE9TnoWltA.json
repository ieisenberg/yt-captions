[
  {
    "text": "[Music]",
    "start": "3490",
    "end": "7529"
  },
  {
    "text": "hi so yeah I'm Francis Campo and I'm gonna be talking today about the robustness of Co these the backup talk actually",
    "start": "13059",
    "end": "21860"
  },
  {
    "text": "there's a backup of a backup talk so I was born that I would be giving this talk this morning as I was waking up so",
    "start": "21860",
    "end": "28430"
  },
  {
    "text": "if things go wrong you know lower your expectations that way you'll enjoy to talk more so what are we gonna be",
    "start": "28430",
    "end": "35030"
  },
  {
    "text": "talking about today we're gonna be talking about the robustness of Co so first we're gonna define what does it mean to be robust and then we're gonna",
    "start": "35030",
    "end": "42350"
  },
  {
    "text": "talk about the things that make go be robust there's a bunch of different features that lots of people have talked",
    "start": "42350",
    "end": "48140"
  },
  {
    "text": "about we're gonna be covering them a little bit all the safety things that go brings then we're gonna be talking about",
    "start": "48140",
    "end": "55640"
  },
  {
    "text": "all of the things that actually may go not be robust I'm Ana gopher and there were a lots of go but I'm also a human",
    "start": "55640",
    "end": "62299"
  },
  {
    "text": "being that understands that there's limitations to everything go is not perfect there's a bunch of things that cannot break the language and then we",
    "start": "62299",
    "end": "70100"
  },
  {
    "text": "will give up on robustness all together because there's no point anyway and then I'm sure that some of you will go well",
    "start": "70100",
    "end": "78110"
  },
  {
    "text": "actually Erlang will talk about Erlang and what is the difference in robustness",
    "start": "78110",
    "end": "83630"
  },
  {
    "text": "of Erlang and where does it come from and by trying to understand how Erlang is robust we'll try to see whether we",
    "start": "83630",
    "end": "90500"
  },
  {
    "text": "can bring that to go and then we'll talk about new hope with I probably say",
    "start": "90500",
    "end": "96680"
  },
  {
    "text": "highest value of production of a slide I've ever created it's an amazing animation you'll see so if you want to",
    "start": "96680",
    "end": "103700"
  },
  {
    "text": "see check the slides they're out here so feel free to take a picture for those that might be having issues reading how",
    "start": "103700",
    "end": "110840"
  },
  {
    "text": "long my help so give you a couple seconds and also make sure you review",
    "start": "110840",
    "end": "123250"
  },
  {
    "text": "you rate the session the previous wants you rate the session and you can also",
    "start": "123250",
    "end": "128420"
  },
  {
    "text": "ask any questions using the app so make sure you download it if you haven't yet and that way you'll be able to ask",
    "start": "128420",
    "end": "134540"
  },
  {
    "text": "questions we'll have time at the end of the talk so I am Franciscan boy and the",
    "start": "134540",
    "end": "142450"
  },
  {
    "text": "vice-president of product and developer relations also known as by President to talking to people at sourced and source",
    "start": "142450",
    "end": "150139"
  },
  {
    "text": "web rebuilding is machine learning for large large scale code analysis if you",
    "start": "150139",
    "end": "155870"
  },
  {
    "text": "want to know more we do have a booth it is hidden at the end of the whole thing so when you go get coffee just keep",
    "start": "155870",
    "end": "161299"
  },
  {
    "text": "walking it is pretty hard to find and also later today I will be giving the",
    "start": "161299",
    "end": "167269"
  },
  {
    "text": "talk that I came to give which is add to yeah 230 the same brew me I would be",
    "start": "167269",
    "end": "173930"
  },
  {
    "text": "talking about machine learning on source code super interesting but not the topic for this talk today we're gonna be",
    "start": "173930",
    "end": "179239"
  },
  {
    "text": "talking about robustness so what is that what does it mean to be robust and robustness is the quality being strong",
    "start": "179239",
    "end": "187790"
  },
  {
    "text": "but it's not only about being strong but actually about adapting to change and also adapting about conditions that one",
    "start": "187790",
    "end": "194989"
  },
  {
    "text": "didn't expect right so it's not about the fact that you're gonna this tree is robust not because it's able to you know",
    "start": "194989",
    "end": "202699"
  },
  {
    "text": "hold on while it's sunny but it's because it's able probably to stand really big storms and winds and fire",
    "start": "202699",
    "end": "210139"
  },
  {
    "text": "maybe all of these things if the after all of this catastrophes the trees still there we say the tree is robust right and the",
    "start": "210139",
    "end": "218209"
  },
  {
    "text": "opposite of robustness is fragility and fragility is not that it works most of",
    "start": "218209",
    "end": "226189"
  },
  {
    "text": "time but when something goes wrong it goes really wrong right the typical example is these beautiful air followed",
    "start": "226189",
    "end": "233449"
  },
  {
    "text": "by this one an error occur world is playing the previous error yay you have you may have seen this before right this",
    "start": "233449",
    "end": "240530"
  },
  {
    "text": "is a typical example of fragility if something goes wrong if this software was robust would have been able to",
    "start": "240530",
    "end": "247430"
  },
  {
    "text": "recover from the mistake and give you information about what happened more information other than oops",
    "start": "247430",
    "end": "253189"
  },
  {
    "text": "right so we're gonna try to figure out what are the things that give us robustness versus the ones that bring",
    "start": "253189",
    "end": "260870"
  },
  {
    "text": "fragility so why the robust features of go the first one is memory safety I come from",
    "start": "260870",
    "end": "267800"
  },
  {
    "text": "my background is writing C++ in C++ memory safety is not thing memory corruption is totally a",
    "start": "267800",
    "end": "274160"
  },
  {
    "text": "thing it's amazing it's super hard to debug right goal doesn't have that issue because it's memory safe one of the ways",
    "start": "274160",
    "end": "281870"
  },
  {
    "text": "we have memory safety is the fact that you have pointers because those are useful if you have a big size of memory",
    "start": "281870",
    "end": "287870"
  },
  {
    "text": "and you want to pass it around you can pass the address rather than copying the whole thing all around so pointers are",
    "start": "287870",
    "end": "294289"
  },
  {
    "text": "useful but we didn't allow you to have pointer arithmetic which means that if you have a pointer you cannot do plus",
    "start": "294289",
    "end": "300590"
  },
  {
    "text": "two and see what happens that's not a thing it actually is the thing ingo with the package called",
    "start": "300590",
    "end": "306650"
  },
  {
    "text": "unsafe which is good name right do not use it unless you really have to the",
    "start": "306650",
    "end": "313430"
  },
  {
    "text": "second thing is the fact that we do not manage versus when someone is in the",
    "start": "313430",
    "end": "320360"
  },
  {
    "text": "heap versus in the stack right you do not need to manage that the compiler is",
    "start": "320360",
    "end": "325639"
  },
  {
    "text": "able through scape analysis to figure out where a variable should be done and this removes some other errors that are",
    "start": "325639",
    "end": "331430"
  },
  {
    "text": "typical especially in C and C++ there's garbage collection which means that if",
    "start": "331430",
    "end": "338150"
  },
  {
    "text": "you hold a pointer there's always some something in the back there's no dangling pointers that it's impossible to have dangling pointers in go and then",
    "start": "338150",
    "end": "346010"
  },
  {
    "text": "also for slices and erase there's automated checks so if you try to access an element day it's not there you would",
    "start": "346010",
    "end": "352190"
  },
  {
    "text": "just complain so yeah negative indices do not exist at all so in Python you can",
    "start": "352190",
    "end": "357800"
  },
  {
    "text": "do minus 1 to get the last one and go you need to do the length of the array minus 1 which is kind of a pain but at",
    "start": "357800",
    "end": "364130"
  },
  {
    "text": "the same time removes a different class of error so it's actually one thing that brings robustness and finally there's no",
    "start": "364130",
    "end": "370310"
  },
  {
    "text": "buffer overflow so yeah this makes memory corruption basically impossible",
    "start": "370310",
    "end": "376340"
  },
  {
    "text": "and I say basically because you know sometimes there's bugs in the run time and the compiler those things happen too",
    "start": "376340",
    "end": "381440"
  },
  {
    "text": "which means that you know it's still somehow possible which is really rare so a couple of examples of what I mean by",
    "start": "381440",
    "end": "389889"
  },
  {
    "text": "important things that go this that know many languages to when you do new int",
    "start": "389889",
    "end": "395990"
  },
  {
    "text": "you might think that well I'm calling new therefore this is allocated on the heap right that's that's how it works no",
    "start": "395990",
    "end": "403430"
  },
  {
    "text": "because actually that value never ask so there's no point in allocating on the heap the compiler knows this so that",
    "start": "403430",
    "end": "409520"
  },
  {
    "text": "will be allocated in the stack which makes your program faster great what about this one",
    "start": "409520",
    "end": "414980"
  },
  {
    "text": "well this one you're saying V equals 42 so it seems like it could be in the",
    "start": "414980",
    "end": "420290"
  },
  {
    "text": "stack but actually no because it's able to tell that since we returned divided the address of that variable that will",
    "start": "420290",
    "end": "427100"
  },
  {
    "text": "survive the function which means that if you don't if this was in the stack you have a dangling pointer so the language",
    "start": "427100",
    "end": "434000"
  },
  {
    "text": "is able to figure this out you do not need to think about these things which is in my opinion great also this one if",
    "start": "434000",
    "end": "440510"
  },
  {
    "text": "you try to access an element that is not part of your array it would just panic it will say nope this you cannot do this",
    "start": "440510",
    "end": "447950"
  },
  {
    "text": "means that the program will be a little bit slower because you're doing these checks all of the time but actually most",
    "start": "447950",
    "end": "454220"
  },
  {
    "text": "of the time the compiler will be able to figure out whether these checks are necessary and remove them if they're not so there's a lot of optimizations that",
    "start": "454220",
    "end": "461060"
  },
  {
    "text": "make these checks actually disappear completely from the runtime so other",
    "start": "461060",
    "end": "467360"
  },
  {
    "text": "than memory safety let's talk about type safety and type safety there's a bunch of different things but basically the",
    "start": "467360",
    "end": "473360"
  },
  {
    "text": "whole thing is how many of you have watched the videos about what the what on yeah okay so that all of those things",
    "start": "473360",
    "end": "481940"
  },
  {
    "text": "can go do not happen it just doesn't compile much easier I rather have not doesn't compile than what so first thing",
    "start": "481940",
    "end": "490040"
  },
  {
    "text": "is we have static typing which means that once you declare variable to be a type of a type that variable stays of",
    "start": "490040",
    "end": "495800"
  },
  {
    "text": "that type that doesn't change over time we have explicit type conversion for numeric types which means that if you",
    "start": "495800",
    "end": "501050"
  },
  {
    "text": "add an integer 32 in an integer 64 it will not work why because what type do",
    "start": "501050",
    "end": "507380"
  },
  {
    "text": "you expect to get at the end probably in 64 well then just write it that way right it'll it avoids a lot of different",
    "start": "507380",
    "end": "513800"
  },
  {
    "text": "kind of plans of type conversion and then there's no unsafe implicit conversion especially the type coercion",
    "start": "513800",
    "end": "520400"
  },
  {
    "text": "type coercion is the what right when you do object plus 0 it says something like",
    "start": "520400",
    "end": "526490"
  },
  {
    "text": "empty array sure whatever right like that doesn't happen go it's if it's not",
    "start": "526490",
    "end": "531620"
  },
  {
    "text": "the same time you can mix it that it also we have interfaces and those",
    "start": "531620",
    "end": "538079"
  },
  {
    "text": "interfaces can I look like duck typing in Python but the error will appear at",
    "start": "538079",
    "end": "545190"
  },
  {
    "text": "the compilation time so if you try to use for instance an integer as a writer you will get this error which is kind of",
    "start": "545190",
    "end": "552300"
  },
  {
    "text": "hard to see but it says cannot use V which is type int as the type I or the writer in argument to form that from F",
    "start": "552300",
    "end": "559110"
  },
  {
    "text": "println in does not implement io writer because missing the method right which is a beautiful mistake beef beautiful",
    "start": "559110",
    "end": "566009"
  },
  {
    "text": "error message I really like it's very clear but the important thing is this is the compiler not a runtime right so it",
    "start": "566009",
    "end": "572250"
  },
  {
    "text": "makes your program be more robust again and finally you can also go from empty",
    "start": "572250",
    "end": "577380"
  },
  {
    "text": "interfaces which is the equivalent and go as object in Java probably also if",
    "start": "577380",
    "end": "584310"
  },
  {
    "text": "you write C C++ it's like void star but better start",
    "start": "584310",
    "end": "590040"
  },
  {
    "text": "void star if anyone has used is like the yellow of types it's like I give up whatever happens I'm fine with this in",
    "start": "590040",
    "end": "597329"
  },
  {
    "text": "go you have empty interface but the type the value so the type of the original value is kept so if you try to use that",
    "start": "597329",
    "end": "604319"
  },
  {
    "text": "as an as a string for instance you'll say no this is not a string and it will fail at runtime which is better than not",
    "start": "604319",
    "end": "610440"
  },
  {
    "text": "failing and continuing and creating some kind of memory corruption one more thing",
    "start": "610440",
    "end": "617639"
  },
  {
    "text": "that it does is it detects that this code is wrong because there's a variable that is declared and never used which is",
    "start": "617639",
    "end": "623639"
  },
  {
    "text": "kind of weird but in this loop we're iterating over a slice of slices and then we're saying cell equals I times J",
    "start": "623639",
    "end": "631920"
  },
  {
    "text": "cell is actually a local variable that keeps on changing and is not a reference",
    "start": "631920",
    "end": "638100"
  },
  {
    "text": "to the original slice which means that you're just assigning things to a temporal variable that is never read",
    "start": "638100",
    "end": "644899"
  },
  {
    "text": "which is of course suspicious and not allowed to go so that will not compile",
    "start": "644899",
    "end": "650819"
  },
  {
    "text": "so that is code that I've actually written many times and every single time and surprises like why doesn't this",
    "start": "650819",
    "end": "656550"
  },
  {
    "text": "compile it's like because I'm cuz I'm wrong and finally you also errors errors",
    "start": "656550",
    "end": "663689"
  },
  {
    "text": "are so errors are not exceptional we use",
    "start": "663689",
    "end": "668960"
  },
  {
    "text": "errors everywhere we do not have exceptions and this kind of makes sense because go comes from Google and at",
    "start": "668960",
    "end": "675830"
  },
  {
    "text": "Google the Google and Google exceptions are forbidden both in Java and actually",
    "start": "675830",
    "end": "681440"
  },
  {
    "text": "both in C++ and in Java they're very it's kind of difficult to use them you",
    "start": "681440",
    "end": "688100"
  },
  {
    "text": "need to be very careful there's a lot of rules around it so ingo they decided not to have any the whole reason is the fact",
    "start": "688100",
    "end": "694880"
  },
  {
    "text": "that when you have exceptions the flow of the program breaks and goes to random",
    "start": "694880",
    "end": "701090"
  },
  {
    "text": "places that you don't expect which means that you might get with subtle bugs",
    "start": "701090",
    "end": "707470"
  },
  {
    "text": "about errors there's this really really good talk by Dave Chaney if you're interested in watching a really good",
    "start": "707470",
    "end": "712940"
  },
  {
    "text": "talk on errors this one is by far the best in my opinion so these are subtle",
    "start": "712940",
    "end": "717950"
  },
  {
    "text": "bug you have this function you have a mutex you plug lock the mutex do",
    "start": "717950",
    "end": "722990"
  },
  {
    "text": "something a lot the matrix and this seems correct right what happens if there's an exception in F well the",
    "start": "722990",
    "end": "731090"
  },
  {
    "text": "matrix is not unlocked your program crashes because now everything is a deadlock right so that is a an error",
    "start": "731090",
    "end": "737120"
  },
  {
    "text": "that when you read in this code unless you really know what you're looking for this looks pretty good but it's actually",
    "start": "737120",
    "end": "742610"
  },
  {
    "text": "wrong and finally channels and goroutines and",
    "start": "742610",
    "end": "747830"
  },
  {
    "text": "all of these things I would say that also bring extra robustness to go just",
    "start": "747830",
    "end": "753980"
  },
  {
    "text": "because they make writing concurrent programs easier writing concurrent",
    "start": "753980",
    "end": "759710"
  },
  {
    "text": "programs in go that are wrong is possible for sure but not as easy as in other foreign languages so cool so we've",
    "start": "759710",
    "end": "768020"
  },
  {
    "text": "seen all the things that you know like I might go for yeah it goes the best now let's talk about why go is actually not that good let's talk about the things",
    "start": "768020",
    "end": "774830"
  },
  {
    "text": "that may go fragile the first one is mutable share state if you know anyone",
    "start": "774830",
    "end": "782120"
  },
  {
    "text": "that has done any functional programming they will tell you mutable share state",
    "start": "782120",
    "end": "787130"
  },
  {
    "text": "is evil and you should never have that and go provides that super easily you can write",
    "start": "787130",
    "end": "792470"
  },
  {
    "text": "that anytime so if you write this for instance you have two functions one just",
    "start": "792470",
    "end": "797690"
  },
  {
    "text": "counts in a that's a counter and the other one it just prints the value of that counter and if you run",
    "start": "797690",
    "end": "802810"
  },
  {
    "text": "this it will actually work you will see contrary zero countries won yay this",
    "start": "802810",
    "end": "808209"
  },
  {
    "text": "works but actually this doesn't work because if you had a lot of traffic in this web server and the counter is going",
    "start": "808209",
    "end": "814779"
  },
  {
    "text": "really fast at some point you'll be weaving at the same time you're running and other data arrays and things break",
    "start": "814779",
    "end": "819990"
  },
  {
    "text": "luckily there is tools for this so there's the if you run a program with - race you're actually enabling the",
    "start": "819990",
    "end": "826510"
  },
  {
    "text": "database detector and it will detect this and fail which is good the problem is that of course the database detector",
    "start": "826510",
    "end": "833290"
  },
  {
    "text": "makes your program way slower so do not do the introduction there's also Neil",
    "start": "833290",
    "end": "839410"
  },
  {
    "text": "pointers which is great in my opinion I actually gave a whole talk about nail",
    "start": "839410",
    "end": "844690"
  },
  {
    "text": "pointers but also they cause some problems notably when you try to",
    "start": "844690",
    "end": "850209"
  },
  {
    "text": "reference the Neil pointer you get a panic right our panic is the equivalent of null pointer exception right this",
    "start": "850209",
    "end": "856899"
  },
  {
    "text": "happens all the time that is kind of a problem and go has it and also yeah",
    "start": "856899",
    "end": "862690"
  },
  {
    "text": "there's not generics yet maybe soon who knows but generics why do I say that the",
    "start": "862690",
    "end": "870220"
  },
  {
    "text": "lack of generics brings fragility to go there's two main reasons one is the fact that the lack of the lack of generics",
    "start": "870220",
    "end": "877870"
  },
  {
    "text": "means that you need to repeat more code you may need to adapt some code that is already existing and by rewriting that",
    "start": "877870",
    "end": "883360"
  },
  {
    "text": "code you might introduce mistakes and that is one of the reasons the other one is that handling errors with monads is",
    "start": "883360",
    "end": "890260"
  },
  {
    "text": "super cool but writing monads in go without generics is really ugly",
    "start": "890260",
    "end": "896470"
  },
  {
    "text": "so is it doable yes and I gave a talk about it and the whole the name of the talk is functional go with a question",
    "start": "896470",
    "end": "905230"
  },
  {
    "text": "and the answer is please know that it's a really bad idea maybe one once we have generics all of",
    "start": "905230",
    "end": "910899"
  },
  {
    "text": "these will be improved but for now not the case so one more fragility class so",
    "start": "910899",
    "end": "918029"
  },
  {
    "text": "in go we have panic so we don't have exceptions but we do have panics and we",
    "start": "918029",
    "end": "924880"
  },
  {
    "text": "do not have a catch we have defer and recover so this is kind of like the",
    "start": "924880",
    "end": "930279"
  },
  {
    "text": "equivalent of try catch button go it panic and recover and this means that",
    "start": "930279",
    "end": "938800"
  },
  {
    "text": "the thing that I said that oh we don't have exceptions which is makes our programs better to understand and easier",
    "start": "938800",
    "end": "944380"
  },
  {
    "text": "and everything actually no because we do have exceptions which is call them differently so panics also can cause",
    "start": "944380",
    "end": "949600"
  },
  {
    "text": "issues and they can cause issues in a very weird way say you have this problem",
    "start": "949600",
    "end": "955930"
  },
  {
    "text": "this program this is a web server and what we're gonna do is whenever someone visits any web site we're gonna panic",
    "start": "955930",
    "end": "962020"
  },
  {
    "text": "with the message whew okay so if you do this and you run it actually it doesn't",
    "start": "962020",
    "end": "969880"
  },
  {
    "text": "crash because the HTTP server will realize that oh wait there is a panic but I'm able to recover from it",
    "start": "969880",
    "end": "976690"
  },
  {
    "text": "because basically that panic is going to go up the stack and at some point we're gonna be able to recover from it catch",
    "start": "976690",
    "end": "982150"
  },
  {
    "text": "it print a message and continue running great what if you do this you just say",
    "start": "982150",
    "end": "987730"
  },
  {
    "text": "go panic boom well now you're in a different go routine which means that now you're in a different stack which",
    "start": "987730",
    "end": "993820"
  },
  {
    "text": "means that no one will be able to recover and everything will crash so no matter how good you are at writing go",
    "start": "993820",
    "end": "1000720"
  },
  {
    "text": "code if you're writing a framework people can crash your program there's no way to avoid this so yeah you can arrive",
    "start": "1000720",
    "end": "1011130"
  },
  {
    "text": "robust code and go which as someone that writes go you know hurts but at the same time if",
    "start": "1011130",
    "end": "1018210"
  },
  {
    "text": "you think about any programming language any formal language that you may have in mind no matter how robust it is these",
    "start": "1018210",
    "end": "1024300"
  },
  {
    "text": "still true if the CPU catches fire I don't care how robust is your language your program will crash right so cool",
    "start": "1024300",
    "end": "1032790"
  },
  {
    "text": "so so thank you and goodbye now so okay so let's talk about well actually part",
    "start": "1032790",
    "end": "1039240"
  },
  {
    "text": "let's talk about airline",
    "start": "1039240",
    "end": "1042110"
  },
  {
    "text": "so why am I talking about Erlang well I'm talking about Ireland",
    "start": "1047669",
    "end": "1055809"
  },
  {
    "text": "for a couple reasons one of them is Joe answering is somewhere probably not in this room well he's right there oh my",
    "start": "1055809",
    "end": "1061330"
  },
  {
    "text": "god Oh pressure hi okay so let's talk about",
    "start": "1061330",
    "end": "1069159"
  },
  {
    "text": "airline why is Erlang interesting to my story about robustness of go well",
    "start": "1069159",
    "end": "1074409"
  },
  {
    "text": "erna was created with a very clear goal which was basically it's the earth in",
    "start": "1074409",
    "end": "1081250"
  },
  {
    "text": "Erlang stands for Ericsson so Ericsson they were making phones they have huge systems they really need to have very",
    "start": "1081250",
    "end": "1088110"
  },
  {
    "text": "concurrent system that is able to to be incredibly robust no matter what happens",
    "start": "1088110",
    "end": "1093309"
  },
  {
    "text": "if something goes down the programs you'll still the the whole system should still be running right so does that mean",
    "start": "1093309",
    "end": "1099639"
  },
  {
    "text": "that it's fully robust well if you're running on a single machine and you destroy the machine no right but the",
    "start": "1099639",
    "end": "1105700"
  },
  {
    "text": "whole point is that you're gonna be running this over many machines and our friend Joe gave a really really good",
    "start": "1105700",
    "end": "1111759"
  },
  {
    "text": "talk I really like that gesture by the way so he gave a talk about self-healing",
    "start": "1111759",
    "end": "1118929"
  },
  {
    "text": "self-healing scalable systems I definitely recommend watching it and the",
    "start": "1118929",
    "end": "1124029"
  },
  {
    "text": "the whole point was there's these six rules that assistant needs to have needs to achieve in order to be considered",
    "start": "1124029",
    "end": "1130299"
  },
  {
    "text": "robust and the first one is isolation basically isolation means that when",
    "start": "1130299",
    "end": "1136480"
  },
  {
    "text": "something goes wrong it's fine but if something fails doesn't mean that everything is going to crash there's",
    "start": "1136480",
    "end": "1142480"
  },
  {
    "text": "somebody at some point that says that maybe a part of the system will crash but you can still let the rest survive",
    "start": "1142480",
    "end": "1149009"
  },
  {
    "text": "and this is important second one is concurrency why well because if there's",
    "start": "1149009",
    "end": "1154899"
  },
  {
    "text": "no concurrency means that you're running only one thing so if that one crashes everything went down right so you need",
    "start": "1154899",
    "end": "1159909"
  },
  {
    "text": "concurrency somehow which airline provides so great failure detection",
    "start": "1159909",
    "end": "1166559"
  },
  {
    "text": "things will crash which is fine but you need to be able to notice that they",
    "start": "1166559",
    "end": "1171970"
  },
  {
    "text": "crashed in order to start recovering from them right so it is important to be able to have some kind of monitors or",
    "start": "1171970",
    "end": "1178139"
  },
  {
    "text": "some kind of wait to be notified that process that you were trying to communicate with is actually down and",
    "start": "1178139",
    "end": "1185140"
  },
  {
    "text": "you might want to do something about it also failure identification so when",
    "start": "1185140",
    "end": "1191080"
  },
  {
    "text": "something crashes it is not enough to say oops it crashed let's fix it",
    "start": "1191080",
    "end": "1196570"
  },
  {
    "text": "you might want to know why crash right and this is something that this could be",
    "start": "1196570",
    "end": "1202840"
  },
  {
    "text": "like a string message so just like a description of what happened kinda like an NGO you can send errors my error",
    "start": "1202840",
    "end": "1208990"
  },
  {
    "text": "messages or a string or it could be something more advanced but like a full code um if you want to but in general",
    "start": "1208990",
    "end": "1215500"
  },
  {
    "text": "according to a friend of mine the rats a lot of Erlang it is normal just a string that describes what happened and the",
    "start": "1215500",
    "end": "1221560"
  },
  {
    "text": "things that this ingo is it's kind of hard because yeah when something crashes",
    "start": "1221560",
    "end": "1226660"
  },
  {
    "text": "and go you get a panic and you can try to analyze what happened but if that panic happens somewhere else you cannot",
    "start": "1226660",
    "end": "1233470"
  },
  {
    "text": "really detect this right so too late and life god upgrade this is probably I",
    "start": "1233470",
    "end": "1240490"
  },
  {
    "text": "don't know if this is necessary for for a program to be robust or it just because Erlang allows you to do it aid",
    "start": "1240490",
    "end": "1246880"
  },
  {
    "text": "incredibly cool but basically life god upgrade it means that you can change the code of a program while it's running and",
    "start": "1246880",
    "end": "1253420"
  },
  {
    "text": "it will just keep running with a new version which is great and definitely an go is not a thing you cannot say and go",
    "start": "1253420",
    "end": "1260800"
  },
  {
    "text": "hey like I know you're running this binary catch this banner and continue not a thing",
    "start": "1260800",
    "end": "1266020"
  },
  {
    "text": "right so unfortunately these go doesn't do it and finally the last rule stable",
    "start": "1266020",
    "end": "1272620"
  },
  {
    "text": "storage so what does stable storage mean it means that it's somewhere where you can you can store things and either",
    "start": "1272620",
    "end": "1279160"
  },
  {
    "text": "they're stored or not but not halfway right so if you basically it's some kind",
    "start": "1279160",
    "end": "1285490"
  },
  {
    "text": "of acid transactions like there's some way of storing information and making sure that that was actually stored and",
    "start": "1285490",
    "end": "1291310"
  },
  {
    "text": "if it was not stored successfully nothing was stored at all the storage was not modified these are also",
    "start": "1291310",
    "end": "1297010"
  },
  {
    "text": "important cool so so these are the six rules and the last thing is the fact that in",
    "start": "1297010",
    "end": "1305530"
  },
  {
    "text": "Erlang there's this philosophy of when something fails just let it crash right",
    "start": "1305530",
    "end": "1310720"
  },
  {
    "text": "if you don't know how to recover from something it's better to just let it crash and let someone else the process that might know better how",
    "start": "1310720",
    "end": "1317480"
  },
  {
    "text": "to recover handle the situation and you can do this in go I try to do it but",
    "start": "1317480",
    "end": "1322970"
  },
  {
    "text": "again the frame is that as soon as you say let it crash for a girl routine if",
    "start": "1322970",
    "end": "1328010"
  },
  {
    "text": "you're not able to handle that too late the whole thing went down right so the",
    "start": "1328010",
    "end": "1333200"
  },
  {
    "text": "lady crushing go it's a little bit to chew hardcore it's like let it crash means that you're gonna like cross the",
    "start": "1333200",
    "end": "1338780"
  },
  {
    "text": "whole program rather just a one one go routine so the environment of true",
    "start": "1338780",
    "end": "1344630"
  },
  {
    "text": "airline verses go installation in airline obviously in go nope because if",
    "start": "1344630",
    "end": "1353750"
  },
  {
    "text": "a panic occurs in a different girl routine the whole thing goes down so ouch concurrency in Erlang yeah of",
    "start": "1353750",
    "end": "1362270"
  },
  {
    "text": "course and go yeah of course I mean that's basically one of the marketing things of God right like concurrency",
    "start": "1362270",
    "end": "1367420"
  },
  {
    "text": "what about failure detection in Erlang of course and go also you can actually",
    "start": "1367420",
    "end": "1373700"
  },
  {
    "text": "create some blog when you when you throw a panic you can have some information in",
    "start": "1373700",
    "end": "1380030"
  },
  {
    "text": "there so there are some ways of doing this which work but the plan is since we don't have installation they're not that",
    "start": "1380030",
    "end": "1385700"
  },
  {
    "text": "useful fault identification in Erlang yes and go well I mean since when",
    "start": "1385700",
    "end": "1394850"
  },
  {
    "text": "something crashes you don't really know exactly why all of the time because you",
    "start": "1394850",
    "end": "1400040"
  },
  {
    "text": "have maybe a cordon but maybe you were not able to communicate to anyone and the whole thing went down it's too late",
    "start": "1400040",
    "end": "1405950"
  },
  {
    "text": "you cannot do this so it's sad life gotta upgrade no there's no way it'd be",
    "start": "1405950",
    "end": "1412550"
  },
  {
    "text": "awesome but that's not a thing ago we barely have plugins like reloading",
    "start": "1412550",
    "end": "1418010"
  },
  {
    "text": "things like in life so not a thing absolutely in stable storage yeah and",
    "start": "1418010",
    "end": "1423800"
  },
  {
    "text": "I'd say that go true because it's not something that girl manages its depends on the on the system that you're storing",
    "start": "1423800",
    "end": "1430700"
  },
  {
    "text": "things on right like you've just using a database thing yeah if you with transactions if you using a file",
    "start": "1430700",
    "end": "1437240"
  },
  {
    "text": "probably not so it's I'm gonna say yes just cuz otherwise go loses by a lot yes be sad",
    "start": "1437240",
    "end": "1444730"
  },
  {
    "text": "okay so this is sad but now the slide that has",
    "start": "1444730",
    "end": "1452630"
  },
  {
    "text": "the highest production value let's see",
    "start": "1452630",
    "end": "1458720"
  },
  {
    "text": "if it works yes and you hope for go kubernetes and",
    "start": "1458720",
    "end": "1467200"
  },
  {
    "text": "why do I talk about kubernetes well because kubernetes actually provides a",
    "start": "1467200",
    "end": "1472370"
  },
  {
    "text": "bunch of different things and it to start with it's raining go which is great but also if kubernetes is the",
    "start": "1472370",
    "end": "1482720"
  },
  {
    "text": "thing that managers go you could think about Erlang not being just a language ever long the language is great but",
    "start": "1482720",
    "end": "1489740"
  },
  {
    "text": "there's all the languages right like elixir or like an elixir different languages but they run on the same place",
    "start": "1489740",
    "end": "1496880"
  },
  {
    "text": "not kubernetes but beam the Erlang machine so let's see if coronaries",
    "start": "1496880",
    "end": "1503600"
  },
  {
    "text": "solves all these problems installation yeah we have containers namespaces we have multiple nodes and even multiple",
    "start": "1503600",
    "end": "1510620"
  },
  {
    "text": "cluster Federation so you can actually run off this thing completely separately so if something crashes it's fine the",
    "start": "1510620",
    "end": "1516910"
  },
  {
    "text": "kubernetes master will be able to handle it so that's great what about concurrency well I mean go",
    "start": "1516910",
    "end": "1523610"
  },
  {
    "text": "has already concurrency but also you can use many go routines internal many containers inside of many nodes so you",
    "start": "1523610",
    "end": "1528980"
  },
  {
    "text": "have concurrency everywhere which is great and you have also yeah like",
    "start": "1528980",
    "end": "1534080"
  },
  {
    "text": "replication so you can manage many many replicas of same container same program at the same time which is great so",
    "start": "1534080",
    "end": "1539920"
  },
  {
    "text": "concurrency great failure detection yes if the container crashes kubernetes will",
    "start": "1539920",
    "end": "1547190"
  },
  {
    "text": "notify you it will actually tag that something is not working anymore through heartbeats or there's a bunch of",
    "start": "1547190",
    "end": "1553790"
  },
  {
    "text": "different ways of managing this but it's automatic monitoring and you can actually even say hey if something",
    "start": "1553790",
    "end": "1559760"
  },
  {
    "text": "crashes just restarted directly or you can say if something crashes I want to be notified and these are the container",
    "start": "1559760",
    "end": "1565850"
  },
  {
    "text": "is going to manage something right so now you're able to detect the mistake to detect them if they can do something",
    "start": "1565850",
    "end": "1571550"
  },
  {
    "text": "about it and when this happens there's actually not only logs but also if you",
    "start": "1571550",
    "end": "1577910"
  },
  {
    "text": "run if you put something in Stef's last elimination that log that is something that is sent to the kubernetes",
    "start": "1577910",
    "end": "1584840"
  },
  {
    "text": "master saying hey this container crash and this is the message it died with right so if you're able if your primary",
    "start": "1584840",
    "end": "1591830"
  },
  {
    "text": "language is able to do this before crashing which girl is mostly able to do then you'll be able to say hey this is",
    "start": "1591830",
    "end": "1598909"
  },
  {
    "text": "why I crashed please continue doing something else cool so life could upgrade keine",
    "start": "1598909",
    "end": "1607009"
  },
  {
    "text": "I mean kubernetes you can have many many different services right and those services could be pointing to different",
    "start": "1607009",
    "end": "1612710"
  },
  {
    "text": "versions of a container which means that you can do what we call life upgrades and life upgrades are actually just if",
    "start": "1612710",
    "end": "1619460"
  },
  {
    "text": "you have say ten containers running version one you're gonna say okay I want to migrate to version two you're gonna",
    "start": "1619460",
    "end": "1625250"
  },
  {
    "text": "start a contingent two and one see this is running you stop one of the ones running version one you go with the",
    "start": "1625250",
    "end": "1630590"
  },
  {
    "text": "second one et cetera until all of them have been migrated this is great because it actually stops if something goes",
    "start": "1630590",
    "end": "1636440"
  },
  {
    "text": "wrong right so it is a laughs a life upgrade there is not really life upgrade",
    "start": "1636440",
    "end": "1641509"
  },
  {
    "text": "because you're not changing the code inside of the container to just change in the container but at the end the fact is kind of thing so you can update the",
    "start": "1641509",
    "end": "1648710"
  },
  {
    "text": "whole system without having to stop it which is the whole point yeah so the way",
    "start": "1648710",
    "end": "1655370"
  },
  {
    "text": "it works is basically you start with v1 and create a new one that is v2 etc you you keep replacing in them and then you",
    "start": "1655370",
    "end": "1662059"
  },
  {
    "text": "get to the state that you expected in stable storage well yeah because it",
    "start": "1662059",
    "end": "1668690"
  },
  {
    "text": "again it really depends on where you're storing it CD is a very good example that's what kubernetes uses itself to",
    "start": "1668690",
    "end": "1673879"
  },
  {
    "text": "manage all the system and also you can have sequel databases or whatever you want to use so there's a lot of options",
    "start": "1673879",
    "end": "1679909"
  },
  {
    "text": "for this so in the conclusion what does",
    "start": "1679909",
    "end": "1685460"
  },
  {
    "text": "it mean to be robust it means that you're able to handle mistakes correctly right like when something things will go",
    "start": "1685460",
    "end": "1691370"
  },
  {
    "text": "wrong machines will fail things will catch fire this is normal but the",
    "start": "1691370",
    "end": "1697279"
  },
  {
    "text": "important thing is that you're able to handle that graciously for some definition of question see the robust",
    "start": "1697279",
    "end": "1703190"
  },
  {
    "text": "features of go memory safety type safety I would say concurrency and there's many",
    "start": "1703190",
    "end": "1709369"
  },
  {
    "text": "other things many small things in the language that are done so it easier to write correct programs or at",
    "start": "1709369",
    "end": "1716420"
  },
  {
    "text": "least easier to figure out if your program is not correct so that I'd say it's also robustness the fragile",
    "start": "1716420",
    "end": "1722690"
  },
  {
    "text": "features of girl this bunch of them but I'd say this more serious one is panic",
    "start": "1722690",
    "end": "1727760"
  },
  {
    "text": "if you panic in a different girl routine that doesn't have a handle or recover then the whole program will crash which",
    "start": "1727760",
    "end": "1734360"
  },
  {
    "text": "means that no binary ingo is perfect you can actually well no binary no framework",
    "start": "1734360",
    "end": "1740840"
  },
  {
    "text": "can go is perfect because you can always make that program crash we gave up and",
    "start": "1740840",
    "end": "1746930"
  },
  {
    "text": "then by talking about Erlang we figure out that well if Erlang is able to do it it's not because of Erlang but rather",
    "start": "1746930",
    "end": "1754190"
  },
  {
    "text": "because of the environment where he runs beam and by trying to do the same thing",
    "start": "1754190",
    "end": "1759380"
  },
  {
    "text": "with going kubernetes we can I reach the same results so let's see that's true isolation Erlang of course wait what I",
    "start": "1759380",
    "end": "1766910"
  },
  {
    "text": "know this is the previous one sorry so yeah like we had these status before",
    "start": "1766910",
    "end": "1772880"
  },
  {
    "text": "right where we do not have a solution we don't have false identification and we don't have life code upgrade and this is",
    "start": "1772880",
    "end": "1779690"
  },
  {
    "text": "sad but if you change the thing on top and instead of Erlang and go you compare Erlang with beam plus go and kubernetes",
    "start": "1779690",
    "end": "1786580"
  },
  {
    "text": "you go back to the point where we want it to be which is everything is great and nothing crashes ever which is not",
    "start": "1786580",
    "end": "1793310"
  },
  {
    "text": "really true but but you get to a point where most of the mistakes or most of",
    "start": "1793310",
    "end": "1798800"
  },
  {
    "text": "the fragilities of go can be fixed thanks to grenade ease which is also",
    "start": "1798800",
    "end": "1803840"
  },
  {
    "text": "raining go so I would say that at the end go is robust so kubernetes is not",
    "start": "1803840",
    "end": "1809510"
  },
  {
    "text": "revolutionary that's a lot of people that talk about kubernetes like the new savior there's all of the things need to",
    "start": "1809510",
    "end": "1816710"
  },
  {
    "text": "be running kubernetes and I would say that kubernetes doesn't bring that much new if you know beem beem is one of the",
    "start": "1816710",
    "end": "1823760"
  },
  {
    "text": "pieces of architecture that i consider incredibly important for distributed computing you brought all of these",
    "start": "1823760",
    "end": "1830000"
  },
  {
    "text": "different features and kubernetes is just adapting them to you know containers and dr and all these things i",
    "start": "1830000",
    "end": "1835840"
  },
  {
    "text": "want to finish by thanking two people that helped me write this talk Veronica",
    "start": "1835840",
    "end": "1841420"
  },
  {
    "text": "her name is Maria Fibonacci on Twitter but her name is actually Veronica I don't know why",
    "start": "1841420",
    "end": "1846870"
  },
  {
    "text": "and media and Pena they both help me they have really good talks to that you",
    "start": "1846870",
    "end": "1853050"
  },
  {
    "text": "might be interested in checking out about the history of Erlang and about also elixir so really interesting talked",
    "start": "1853050",
    "end": "1860340"
  },
  {
    "text": "and thanks to them D actually I actually moved a bunch of different things that I assume of Erlang that were wrong so thanks to them and now we have time for",
    "start": "1860340",
    "end": "1868950"
  },
  {
    "text": "questions I'm going to remind you to rate the session and we have some time",
    "start": "1868950",
    "end": "1875070"
  },
  {
    "text": "for questions and also I'm on Twitter and you can send me emails and direct messages there if you have follow-up",
    "start": "1875070",
    "end": "1880950"
  },
  {
    "text": "questions afterwards thank you [Applause]",
    "start": "1880950",
    "end": "1889809"
  }
]