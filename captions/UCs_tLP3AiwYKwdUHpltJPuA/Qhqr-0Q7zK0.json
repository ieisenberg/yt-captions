[
  {
    "text": "hello I'm Alexi and I'll be talking",
    "start": "5799",
    "end": "8360"
  },
  {
    "text": "about this problem we have a standard",
    "start": "8360",
    "end": "12639"
  },
  {
    "text": "data type and if we load this type in",
    "start": "12639",
    "end": "15400"
  },
  {
    "text": "GHC derive show we get a nice",
    "start": "15400",
    "end": "18680"
  },
  {
    "text": "representation of all the name email and",
    "start": "18680",
    "end": "23000"
  },
  {
    "text": "everything and the question is how does",
    "start": "23000",
    "end": "25680"
  },
  {
    "text": "GHC know to make this nice instance",
    "start": "25680",
    "end": "30000"
  },
  {
    "text": "because obviously there's some work",
    "start": "30000",
    "end": "31199"
  },
  {
    "text": "going on here you can obviously write it",
    "start": "31199",
    "end": "33280"
  },
  {
    "text": "by hand but how does it do it",
    "start": "33280",
    "end": "35120"
  },
  {
    "text": "automatically how do we do the same for",
    "start": "35120",
    "end": "38760"
  },
  {
    "text": "our types and our type classes probably",
    "start": "38760",
    "end": "41680"
  },
  {
    "text": "different",
    "start": "41680",
    "end": "43360"
  },
  {
    "text": "ones so let's have an example we have",
    "start": "43360",
    "end": "47600"
  },
  {
    "text": "this simple",
    "start": "47600",
    "end": "48800"
  },
  {
    "text": "serial serializing like type class where",
    "start": "48800",
    "end": "52640"
  },
  {
    "text": "every data type that implements two bits",
    "start": "52640",
    "end": "55239"
  },
  {
    "text": "can go and serialize itself to a",
    "start": "55239",
    "end": "57800"
  },
  {
    "text": "sequence of zeros and ones",
    "start": "57800",
    "end": "60760"
  },
  {
    "text": "and let's write a few simple instances",
    "start": "60760",
    "end": "63160"
  },
  {
    "text": "here is the simplest data type we could",
    "start": "63160",
    "end": "64920"
  },
  {
    "text": "come up with unit and if we want to",
    "start": "64920",
    "end": "68360"
  },
  {
    "text": "serialize it there's not really nothing",
    "start": "68360",
    "end": "70320"
  },
  {
    "text": "we can serialize so we just leave it",
    "start": "70320",
    "end": "72320"
  },
  {
    "text": "like that and empty list here is a sum",
    "start": "72320",
    "end": "75000"
  },
  {
    "text": "data type might be is but I Define it",
    "start": "75000",
    "end": "78640"
  },
  {
    "text": "like that just for toate the point and",
    "start": "78640",
    "end": "81759"
  },
  {
    "text": "we can cize it pretty easily if we if",
    "start": "81759",
    "end": "84119"
  },
  {
    "text": "you get a left one value we can put a",
    "start": "84119",
    "end": "86840"
  },
  {
    "text": "zero in front if you get a another value",
    "start": "86840",
    "end": "88520"
  },
  {
    "text": "we can get a one in front and that's",
    "start": "88520",
    "end": "90720"
  },
  {
    "text": "nice so here's an instance and for a",
    "start": "90720",
    "end": "93720"
  },
  {
    "text": "product we can serialize both",
    "start": "93720",
    "end": "96880"
  },
  {
    "text": "bying first one and in the second one",
    "start": "96880",
    "end": "100960"
  },
  {
    "text": "now the thing is if we wrot",
    "start": "100960",
    "end": "103880"
  },
  {
    "text": "these three",
    "start": "103880",
    "end": "106320"
  },
  {
    "text": "instances we can",
    "start": "106320",
    "end": "109680"
  },
  {
    "text": "mechanically write instances for pretty",
    "start": "109680",
    "end": "113079"
  },
  {
    "text": "much any algebraic data type let's have",
    "start": "113079",
    "end": "116119"
  },
  {
    "text": "an examp some examples an empty tle",
    "start": "116119",
    "end": "118840"
  },
  {
    "text": "corresponds to unit",
    "start": "118840",
    "end": "121119"
  },
  {
    "text": "uh maybe corresponds to a sum of unit",
    "start": "121119",
    "end": "124439"
  },
  {
    "text": "and the data type that we started with",
    "start": "124439",
    "end": "127759"
  },
  {
    "text": "uh a list corresponds to a sum of unit",
    "start": "127759",
    "end": "131879"
  },
  {
    "text": "and a product of that element and the",
    "start": "131879",
    "end": "135680"
  },
  {
    "text": "rest of the list uh if you've been to",
    "start": "135680",
    "end": "138720"
  },
  {
    "text": "Sean's talk this morning and you've seen",
    "start": "138720",
    "end": "141000"
  },
  {
    "text": "all these algebraic",
    "start": "141000",
    "end": "142720"
  },
  {
    "text": "derivations and finally the user type",
    "start": "142720",
    "end": "146120"
  },
  {
    "text": "that we defined earlier it's isomorphic",
    "start": "146120",
    "end": "149120"
  },
  {
    "text": "to a product of text and another text so",
    "start": "149120",
    "end": "152200"
  },
  {
    "text": "that was name and email so what we can",
    "start": "152200",
    "end": "156280"
  },
  {
    "text": "do what will be really nice to do is",
    "start": "156280",
    "end": "159760"
  },
  {
    "text": "write all instances in terms of unit sum",
    "start": "159760",
    "end": "163599"
  },
  {
    "text": "and product and then somehow convert our",
    "start": "163599",
    "end": "168319"
  },
  {
    "text": "concrete data types that we have",
    "start": "168319",
    "end": "172000"
  },
  {
    "text": "to uh a hierarchy of these data types so",
    "start": "172000",
    "end": "175959"
  },
  {
    "text": "this is a generic type class which you",
    "start": "175959",
    "end": "178560"
  },
  {
    "text": "can use uh let's have an Associated type",
    "start": "178560",
    "end": "181560"
  },
  {
    "text": "for our original",
    "start": "181560",
    "end": "183720"
  },
  {
    "text": "type and we can convert between our data",
    "start": "183720",
    "end": "187480"
  },
  {
    "text": "type and the associate data type the",
    "start": "187480",
    "end": "189280"
  },
  {
    "text": "conversion is total either way there's",
    "start": "189280",
    "end": "191920"
  },
  {
    "text": "no maybe there is no undefined there's",
    "start": "191920",
    "end": "194480"
  },
  {
    "text": "nothing that uh so we can do all of",
    "start": "194480",
    "end": "197480"
  },
  {
    "text": "these things and if we could get the",
    "start": "197480",
    "end": "200879"
  },
  {
    "text": "compiler to generate this for us and if",
    "start": "200879",
    "end": "203519"
  },
  {
    "text": "we wrote all",
    "start": "203519",
    "end": "206680"
  },
  {
    "text": "the instances for these types Zoom unit",
    "start": "206680",
    "end": "209560"
  },
  {
    "text": "and product we could write",
    "start": "209560",
    "end": "213720"
  },
  {
    "text": "that two bits instance for",
    "start": "213720",
    "end": "216840"
  },
  {
    "text": "everything but we can't write a",
    "start": "216840",
    "end": "220000"
  },
  {
    "text": "show because you can see user had the",
    "start": "220000",
    "end": "224760"
  },
  {
    "text": "email and name and this just had a text",
    "start": "224760",
    "end": "228799"
  },
  {
    "text": "and text so if we just get a text and",
    "start": "228799",
    "end": "231280"
  },
  {
    "text": "text and a product of them we can't",
    "start": "231280",
    "end": "233319"
  },
  {
    "text": "really do anything to show it so let's",
    "start": "233319",
    "end": "236599"
  },
  {
    "text": "expand the definition a bit",
    "start": "236599",
    "end": "240720"
  },
  {
    "text": "see there is uh there are two data types",
    "start": "240920",
    "end": "244480"
  },
  {
    "text": "which are",
    "start": "244480",
    "end": "245519"
  },
  {
    "text": "isomorphic but they differ in the record",
    "start": "245519",
    "end": "248920"
  },
  {
    "text": "types so what if we could Define some",
    "start": "248920",
    "end": "251959"
  },
  {
    "text": "additional data types that",
    "start": "251959",
    "end": "254599"
  },
  {
    "text": "wrap the name of the records the name of",
    "start": "254599",
    "end": "260079"
  },
  {
    "text": "the",
    "start": "260079",
    "end": "261120"
  },
  {
    "text": "Constructor and the name of the type",
    "start": "261120",
    "end": "265040"
  },
  {
    "text": "themselves uh fortunately we can put we",
    "start": "265040",
    "end": "269080"
  },
  {
    "text": "can use data types type level strings in",
    "start": "269080",
    "end": "273400"
  },
  {
    "text": "GHC to define the data types if you can",
    "start": "273400",
    "end": "276639"
  },
  {
    "text": "see the values the set of values is the",
    "start": "276639",
    "end": "281000"
  },
  {
    "text": "same for a and this data na a or",
    "start": "281000",
    "end": "284639"
  },
  {
    "text": "Constructor na a and section A if it",
    "start": "284639",
    "end": "287080"
  },
  {
    "text": "provide the the functions that get this",
    "start": "287080",
    "end": "291680"
  },
  {
    "text": "type level string back into our string",
    "start": "291680",
    "end": "294000"
  },
  {
    "text": "will be really all set so let's have a",
    "start": "294000",
    "end": "296160"
  },
  {
    "text": "few examples again empty empty tle is a",
    "start": "296160",
    "end": "300039"
  },
  {
    "text": "data type named empty tle with a single",
    "start": "300039",
    "end": "302880"
  },
  {
    "text": "Constructor named empty topple and the",
    "start": "302880",
    "end": "305199"
  },
  {
    "text": "actual value set is",
    "start": "305199",
    "end": "306960"
  },
  {
    "text": "unit maybe a is a data type named maybe",
    "start": "306960",
    "end": "311479"
  },
  {
    "text": "and it's actually a su type with a the",
    "start": "311479",
    "end": "316639"
  },
  {
    "text": "first the first possibility is uh",
    "start": "316639",
    "end": "320319"
  },
  {
    "text": "Constructor not named nothing the actual",
    "start": "320319",
    "end": "323479"
  },
  {
    "text": "values unit and the construction of just",
    "start": "323479",
    "end": "325720"
  },
  {
    "text": "and actual value is a and so on for the",
    "start": "325720",
    "end": "328479"
  },
  {
    "text": "sum for the list and for the user where",
    "start": "328479",
    "end": "331360"
  },
  {
    "text": "you can see finally we got name and",
    "start": "331360",
    "end": "333840"
  },
  {
    "text": "email so if we Now operate on",
    "start": "333840",
    "end": "337720"
  },
  {
    "text": "this extended type",
    "start": "337720",
    "end": "341199"
  },
  {
    "text": "hierarchy we get",
    "start": "341199",
    "end": "344479"
  },
  {
    "text": "the we get we can write our show we can",
    "start": "344479",
    "end": "347639"
  },
  {
    "text": "write equality we can write or we can",
    "start": "347639",
    "end": "349479"
  },
  {
    "text": "write anything that we really want so",
    "start": "349479",
    "end": "353319"
  },
  {
    "text": "this is this is a simplified",
    "start": "353319",
    "end": "355400"
  },
  {
    "text": "description let's now go and see what",
    "start": "355400",
    "end": "358560"
  },
  {
    "text": "GHC gives us",
    "start": "358560",
    "end": "360280"
  },
  {
    "text": "there's this module which",
    "start": "360280",
    "end": "364840"
  },
  {
    "text": "has",
    "start": "364880",
    "end": "366520"
  },
  {
    "text": "some not ideally in my opinion at least",
    "start": "366520",
    "end": "369800"
  },
  {
    "text": "named types isomorphic to what we show",
    "start": "369800",
    "end": "372800"
  },
  {
    "text": "we've seen just before the unit the sum",
    "start": "372800",
    "end": "376360"
  },
  {
    "text": "with a nice plus type level plus the",
    "start": "376360",
    "end": "379400"
  },
  {
    "text": "product",
    "start": "379400",
    "end": "381199"
  },
  {
    "text": "and this",
    "start": "381199",
    "end": "384120"
  },
  {
    "text": "um leave data type with let's let's just",
    "start": "384120",
    "end": "388639"
  },
  {
    "text": "say it's reg Z",
    "start": "388639",
    "end": "390400"
  },
  {
    "text": "and that's his representation we can",
    "start": "390400",
    "end": "392520"
  },
  {
    "text": "ignore all of this Machinery which was",
    "start": "392520",
    "end": "395039"
  },
  {
    "text": "there to support some obsolute uses but",
    "start": "395039",
    "end": "397840"
  },
  {
    "text": "unfortunately have stayed in the library",
    "start": "397840",
    "end": "400400"
  },
  {
    "text": "and again Let's ignore P which is a",
    "start": "400400",
    "end": "403599"
  },
  {
    "text": "phantom parameter which will be useful",
    "start": "403599",
    "end": "405240"
  },
  {
    "text": "later I can show it up later so what",
    "start": "405240",
    "end": "408479"
  },
  {
    "text": "happens",
    "start": "408479",
    "end": "411240"
  },
  {
    "text": "is uh oh yeah and we've missed the type",
    "start": "411240",
    "end": "415759"
  },
  {
    "text": "type Constructor",
    "start": "415759",
    "end": "418039"
  },
  {
    "text": "and selector names",
    "start": "418039",
    "end": "422360"
  },
  {
    "text": "so again don't worry too much about this",
    "start": "422360",
    "end": "425759"
  },
  {
    "text": "representation as a new type what we",
    "start": "425759",
    "end": "428680"
  },
  {
    "text": "what's really interesting is how the",
    "start": "428680",
    "end": "432360"
  },
  {
    "text": "isomorphism works so a",
    "start": "432360",
    "end": "435039"
  },
  {
    "text": "user is a data type with some meta",
    "start": "435039",
    "end": "439280"
  },
  {
    "text": "information which I",
    "start": "439280",
    "end": "441360"
  },
  {
    "text": "admitted that has a single Constructor",
    "start": "441360",
    "end": "443720"
  },
  {
    "text": "with some information of two selectors a",
    "start": "443720",
    "end": "446599"
  },
  {
    "text": "product of two selectors these are both",
    "start": "446599",
    "end": "449000"
  },
  {
    "text": "selectors with some other information I",
    "start": "449000",
    "end": "450800"
  },
  {
    "text": "mitted and both of them are texts same",
    "start": "450800",
    "end": "454240"
  },
  {
    "text": "goes for the empty tle maybe integer",
    "start": "454240",
    "end": "458560"
  },
  {
    "text": "Which con create integer",
    "start": "458560",
    "end": "460479"
  },
  {
    "text": "here I muted them because they're not",
    "start": "460479",
    "end": "463800"
  },
  {
    "text": "just the name they have in GHC pretty",
    "start": "463800",
    "end": "466960"
  },
  {
    "text": "much all of the options that you can",
    "start": "466960",
    "end": "469520"
  },
  {
    "text": "give to",
    "start": "469520",
    "end": "472039"
  },
  {
    "text": "the data types Constructors and",
    "start": "472039",
    "end": "474560"
  },
  {
    "text": "selectors such as laziness unpacked and",
    "start": "474560",
    "end": "479720"
  },
  {
    "text": "whatever other options GHC supports or",
    "start": "479720",
    "end": "482159"
  },
  {
    "text": "might support in the future so they look",
    "start": "482159",
    "end": "484039"
  },
  {
    "text": "rather",
    "start": "484039",
    "end": "486280"
  },
  {
    "text": "unwielding what you really get out of",
    "start": "486680",
    "end": "489080"
  },
  {
    "text": "them is the data type name Constructor",
    "start": "489080",
    "end": "491199"
  },
  {
    "text": "name and selector name that you can get",
    "start": "491199",
    "end": "493400"
  },
  {
    "text": "out of any value of this",
    "start": "493400",
    "end": "496919"
  },
  {
    "text": "type",
    "start": "496919",
    "end": "498800"
  },
  {
    "text": "so it's going to be the same for for all",
    "start": "498800",
    "end": "501879"
  },
  {
    "text": "the types for any type that we have here",
    "start": "501879",
    "end": "505639"
  },
  {
    "text": "it the data type name is going to be the",
    "start": "505639",
    "end": "507479"
  },
  {
    "text": "same for each value of this type so you",
    "start": "507479",
    "end": "510280"
  },
  {
    "text": "don't need an actual value it's just",
    "start": "510280",
    "end": "512599"
  },
  {
    "text": "based on the",
    "start": "512599",
    "end": "513800"
  },
  {
    "text": "type so let's see how it works in",
    "start": "513800",
    "end": "517479"
  },
  {
    "text": "practice with our user type we had a",
    "start": "517479",
    "end": "520279"
  },
  {
    "text": "user with name and email and we' derived",
    "start": "520279",
    "end": "523800"
  },
  {
    "text": "generic this is the magic that lets us",
    "start": "523800",
    "end": "525880"
  },
  {
    "text": "derive all these all this",
    "start": "525880",
    "end": "529240"
  },
  {
    "text": "isomorphism which is still called rep",
    "start": "529240",
    "end": "532760"
  },
  {
    "text": "and which will later allow us to write",
    "start": "532760",
    "end": "535640"
  },
  {
    "text": "our",
    "start": "535640",
    "end": "538120"
  },
  {
    "text": "instances kind",
    "start": "538120",
    "end": "540360"
  },
  {
    "text": "with an exclamation mark gives a",
    "start": "540360",
    "end": "542920"
  },
  {
    "text": "representation of the type that we give",
    "start": "542920",
    "end": "545600"
  },
  {
    "text": "it and so this Associated type to the",
    "start": "545600",
    "end": "548440"
  },
  {
    "text": "user",
    "start": "548440",
    "end": "550040"
  },
  {
    "text": "is uh data type with this metad data",
    "start": "550040",
    "end": "554040"
  },
  {
    "text": "these are the module name if I'm not",
    "start": "554040",
    "end": "558560"
  },
  {
    "text": "mistaken and this might be the source",
    "start": "558560",
    "end": "560200"
  },
  {
    "text": "file name so there is a lot of metadata",
    "start": "560200",
    "end": "563160"
  },
  {
    "text": "going on here so for example no source",
    "start": "563160",
    "end": "565279"
  },
  {
    "text": "and packes and so",
    "start": "565279",
    "end": "566720"
  },
  {
    "text": "on uh so this data type has a s",
    "start": "566720",
    "end": "570000"
  },
  {
    "text": "Constructor with two",
    "start": "570000",
    "end": "573560"
  },
  {
    "text": "selectors a product of two selectors the",
    "start": "573560",
    "end": "576160"
  },
  {
    "text": "first selector is name and so on and the",
    "start": "576160",
    "end": "580320"
  },
  {
    "text": "actual value is a text second selector",
    "start": "580320",
    "end": "582640"
  },
  {
    "text": "is email and the actual value is",
    "start": "582640",
    "end": "586079"
  },
  {
    "text": "text",
    "start": "586079",
    "end": "588440"
  },
  {
    "text": "so let's use this",
    "start": "588440",
    "end": "591440"
  },
  {
    "text": "isomorphism we can convert from this",
    "start": "591440",
    "end": "594920"
  },
  {
    "text": "value of type",
    "start": "594920",
    "end": "596839"
  },
  {
    "text": "user to the associated presentation and",
    "start": "596839",
    "end": "600839"
  },
  {
    "text": "we get",
    "start": "600839",
    "end": "603079"
  },
  {
    "text": "this this data type presentation where",
    "start": "603079",
    "end": "606200"
  },
  {
    "text": "the meta is not in in the value it's",
    "start": "606200",
    "end": "609320"
  },
  {
    "text": "just the type level so all this metad",
    "start": "609320",
    "end": "613279"
  },
  {
    "text": "data is just on the type level and the",
    "start": "613279",
    "end": "616640"
  },
  {
    "text": "actual value you can see that there are",
    "start": "616640",
    "end": "618959"
  },
  {
    "text": "only two pieces of value name and",
    "start": "618959",
    "end": "622079"
  },
  {
    "text": "email all the rest is the metadata that",
    "start": "622079",
    "end": "625959"
  },
  {
    "text": "was there from the data type Constructor",
    "start": "625959",
    "end": "628279"
  },
  {
    "text": "and selector and this is the actual",
    "start": "628279",
    "end": "630920"
  },
  {
    "text": "value again selector and the actual",
    "start": "630920",
    "end": "634839"
  },
  {
    "text": "value if we get from if we get a some",
    "start": "634839",
    "end": "639040"
  },
  {
    "text": "type like maybe this is a just one with",
    "start": "639040",
    "end": "642160"
  },
  {
    "text": "type maybe so",
    "start": "642160",
    "end": "645800"
  },
  {
    "text": "here we get the right value because",
    "start": "645800",
    "end": "649000"
  },
  {
    "text": "there was two nothing and maybe so of",
    "start": "649000",
    "end": "651800"
  },
  {
    "text": "the two Alternatives which show the",
    "start": "651800",
    "end": "653480"
  },
  {
    "text": "right one Meta Meta Meta actual",
    "start": "653480",
    "end": "657720"
  },
  {
    "text": "value so let's use this to write an",
    "start": "657720",
    "end": "660720"
  },
  {
    "text": "actual",
    "start": "660720",
    "end": "661760"
  },
  {
    "text": "instance uh for a better example in",
    "start": "661760",
    "end": "664880"
  },
  {
    "text": "calization we'll try to convert",
    "start": "664880",
    "end": "669240"
  },
  {
    "text": "any data type into form data of this of",
    "start": "669240",
    "end": "674160"
  },
  {
    "text": "this of this of the style where you can",
    "start": "674160",
    "end": "676680"
  },
  {
    "text": "get a map of text to maybe text so",
    "start": "676680",
    "end": "678480"
  },
  {
    "text": "something like this C and Cal 4 and Bal",
    "start": "678480",
    "end": "680920"
  },
  {
    "text": "3 and so far uh Json will be to Warrant",
    "start": "680920",
    "end": "684160"
  },
  {
    "text": "so I just and there is there are",
    "start": "684160",
    "end": "686320"
  },
  {
    "text": "instances for Jason in the Json libr",
    "start": "686320",
    "end": "690079"
  },
  {
    "text": "that are widespread there but what we",
    "start": "690079",
    "end": "692200"
  },
  {
    "text": "want to do is we want to provide an",
    "start": "692200",
    "end": "693880"
  },
  {
    "text": "instance from any value of our type to",
    "start": "693880",
    "end": "696880"
  },
  {
    "text": "form",
    "start": "696880",
    "end": "698120"
  },
  {
    "text": "data so we are too lazy to write an",
    "start": "698120",
    "end": "701279"
  },
  {
    "text": "instance for every single thing that we",
    "start": "701279",
    "end": "703720"
  },
  {
    "text": "have so let's use the",
    "start": "703720",
    "end": "706320"
  },
  {
    "text": "generics in let's modify this type class",
    "start": "706320",
    "end": "709720"
  },
  {
    "text": "two form data to accept the default",
    "start": "709720",
    "end": "711920"
  },
  {
    "text": "implementation that",
    "start": "711920",
    "end": "713639"
  },
  {
    "text": "if our type A has a generic instance and",
    "start": "713639",
    "end": "719800"
  },
  {
    "text": "it's Associated representation that as a",
    "start": "719800",
    "end": "722240"
  },
  {
    "text": "morphic thing is an instance of",
    "start": "722240",
    "end": "725360"
  },
  {
    "text": "this helper data helper type class then",
    "start": "725360",
    "end": "729760"
  },
  {
    "text": "we can convert it and how we convert it",
    "start": "729760",
    "end": "732560"
  },
  {
    "text": "is we convert it to the presentation",
    "start": "732560",
    "end": "734000"
  },
  {
    "text": "first and then use this Associated",
    "start": "734000",
    "end": "735760"
  },
  {
    "text": "function helper function this is a",
    "start": "735760",
    "end": "738120"
  },
  {
    "text": "pretty standard way of convert of using",
    "start": "738120",
    "end": "742000"
  },
  {
    "text": "the generic Machinery",
    "start": "742000",
    "end": "745920"
  },
  {
    "text": "to make our data our type classes",
    "start": "745920",
    "end": "749600"
  },
  {
    "text": "support",
    "start": "749600",
    "end": "750959"
  },
  {
    "text": "supported so what do we need to write in",
    "start": "750959",
    "end": "755519"
  },
  {
    "text": "like all the instances that we now need",
    "start": "755519",
    "end": "757360"
  },
  {
    "text": "to write will be instances of this",
    "start": "757360",
    "end": "760680"
  },
  {
    "text": "helper type class two from data",
    "start": "760680",
    "end": "763600"
  },
  {
    "text": "Prime and what we have to do is okay",
    "start": "763600",
    "end": "767199"
  },
  {
    "text": "let's start with a single value we can't",
    "start": "767199",
    "end": "769959"
  },
  {
    "text": "start with a single value because we",
    "start": "769959",
    "end": "772040"
  },
  {
    "text": "don't know about the selector name so we",
    "start": "772040",
    "end": "774600"
  },
  {
    "text": "need",
    "start": "774600",
    "end": "775920"
  },
  {
    "text": "to write an instance for the selector",
    "start": "775920",
    "end": "779920"
  },
  {
    "text": "the select part if we can go back to",
    "start": "779920",
    "end": "783720"
  },
  {
    "text": "here we can't write an instance just for",
    "start": "783720",
    "end": "786440"
  },
  {
    "text": "this part the",
    "start": "786440",
    "end": "788720"
  },
  {
    "text": "text uh this is actually",
    "start": "788720",
    "end": "792440"
  },
  {
    "text": "the the value we have to get the",
    "start": "792440",
    "end": "795240"
  },
  {
    "text": "selector value which unfortunately is",
    "start": "795240",
    "end": "797120"
  },
  {
    "text": "named M",
    "start": "797120",
    "end": "798839"
  },
  {
    "text": "here and S",
    "start": "798839",
    "end": "801519"
  },
  {
    "text": "here uh it's really a lot of type alyses",
    "start": "801519",
    "end": "804959"
  },
  {
    "text": "which are which looked very nice in the",
    "start": "804959",
    "end": "807720"
  },
  {
    "text": "paper but you have have to do it now",
    "start": "807720",
    "end": "811279"
  },
  {
    "text": "so we",
    "start": "811279",
    "end": "813519"
  },
  {
    "text": "get this value M which is of this data",
    "start": "813519",
    "end": "818519"
  },
  {
    "text": "type and the a is the actual text",
    "start": "818519",
    "end": "822040"
  },
  {
    "text": "inside so we will do our thing and we'll",
    "start": "822040",
    "end": "826279"
  },
  {
    "text": "pack the selector name and the value of",
    "start": "826279",
    "end": "830120"
  },
  {
    "text": "text here I'm simplifying this a bit",
    "start": "830120",
    "end": "832399"
  },
  {
    "text": "I'll only pack the text values if you",
    "start": "832399",
    "end": "834279"
  },
  {
    "text": "wanted to P something else you could",
    "start": "834279",
    "end": "835639"
  },
  {
    "text": "show it I suppose or apply to form dat",
    "start": "835639",
    "end": "839240"
  },
  {
    "text": "on them",
    "start": "839240",
    "end": "840160"
  },
  {
    "text": "recursively no it doesn't work too well",
    "start": "840160",
    "end": "842320"
  },
  {
    "text": "you have to apply it and then Escape it",
    "start": "842320",
    "end": "844240"
  },
  {
    "text": "or something so let's simplify things",
    "start": "844240",
    "end": "846079"
  },
  {
    "text": "and keep it to the",
    "start": "846079",
    "end": "847440"
  },
  {
    "text": "text we can write the instances for",
    "start": "847440",
    "end": "849839"
  },
  {
    "text": "product and some pretty",
    "start": "849839",
    "end": "852360"
  },
  {
    "text": "easily just let's convert both things",
    "start": "852360",
    "end": "855399"
  },
  {
    "text": "here and let's convert whatever is that",
    "start": "855399",
    "end": "859199"
  },
  {
    "text": "that we have into form data so this is a",
    "start": "859199",
    "end": "863079"
  },
  {
    "text": "sum this is a product and we finally we",
    "start": "863079",
    "end": "866600"
  },
  {
    "text": "have to deal with",
    "start": "866600",
    "end": "869560"
  },
  {
    "text": "the outer layers of the meta the data",
    "start": "869560",
    "end": "871680"
  },
  {
    "text": "type and the Constructor",
    "start": "871680",
    "end": "873720"
  },
  {
    "text": "names so we just ignore them if there is",
    "start": "873720",
    "end": "877639"
  },
  {
    "text": "matter of data type we'll ignore it",
    "start": "877639",
    "end": "880360"
  },
  {
    "text": "Constructors we just ignore it obviously",
    "start": "880360",
    "end": "883279"
  },
  {
    "text": "for if if the concrete data types that",
    "start": "883279",
    "end": "886160"
  },
  {
    "text": "we have needs to use some information in",
    "start": "886160",
    "end": "889600"
  },
  {
    "text": "the data type of Constructor names",
    "start": "889600",
    "end": "892279"
  },
  {
    "text": "you're welcome to use it right now we",
    "start": "892279",
    "end": "894000"
  },
  {
    "text": "only need the selector",
    "start": "894000",
    "end": "896839"
  },
  {
    "text": "names so",
    "start": "896839",
    "end": "900839"
  },
  {
    "text": "we Define we Define our type user which",
    "start": "902240",
    "end": "906320"
  },
  {
    "text": "derives generic and to form",
    "start": "906320",
    "end": "910079"
  },
  {
    "text": "data because we've derived generic that",
    "start": "910079",
    "end": "914160"
  },
  {
    "text": "can automatically be derived by GHC and",
    "start": "914160",
    "end": "917519"
  },
  {
    "text": "it is of the exact shape that we",
    "start": "917519",
    "end": "919959"
  },
  {
    "text": "described here of meta data data types",
    "start": "919959",
    "end": "923959"
  },
  {
    "text": "Constructors sums and products for every",
    "start": "923959",
    "end": "926079"
  },
  {
    "text": "data types is",
    "start": "926079",
    "end": "927279"
  },
  {
    "text": "guaranteed it satisfy to form data Prime",
    "start": "927279",
    "end": "931319"
  },
  {
    "text": "uh the only constraint is we can only",
    "start": "931319",
    "end": "934160"
  },
  {
    "text": "have the",
    "start": "934160",
    "end": "935720"
  },
  {
    "text": "text uh",
    "start": "935720",
    "end": "938440"
  },
  {
    "text": "values if it doesn't then it doesn't",
    "start": "938440",
    "end": "940600"
  },
  {
    "text": "satisfy the form data so because we",
    "start": "940600",
    "end": "944600"
  },
  {
    "text": "satisfy two form data Prime we can now",
    "start": "944600",
    "end": "948000"
  },
  {
    "text": "derive two form",
    "start": "948000",
    "end": "950120"
  },
  {
    "text": "data the only member was two form data",
    "start": "950120",
    "end": "953800"
  },
  {
    "text": "and that had a default instance so we",
    "start": "953800",
    "end": "955959"
  },
  {
    "text": "don't need to write in that or if it's",
    "start": "955959",
    "end": "958759"
  },
  {
    "text": "not not your data type for some reason",
    "start": "958759",
    "end": "960639"
  },
  {
    "text": "you can just say instance for form data",
    "start": "960639",
    "end": "962279"
  },
  {
    "text": "users that's equivalent and there is no",
    "start": "962279",
    "end": "964440"
  },
  {
    "text": "methods that's all you need to",
    "start": "964440",
    "end": "967720"
  },
  {
    "text": "do uh let's do something else and",
    "start": "967880",
    "end": "971519"
  },
  {
    "text": "reverse this uh that B that doesn't fit",
    "start": "971519",
    "end": "975160"
  },
  {
    "text": "there that's maybe a so again let's move",
    "start": "975160",
    "end": "979440"
  },
  {
    "text": "it back from form data to back to our",
    "start": "979440",
    "end": "982519"
  },
  {
    "text": "data",
    "start": "982519",
    "end": "983519"
  },
  {
    "text": "type again we Define a supplementary",
    "start": "983519",
    "end": "987160"
  },
  {
    "text": "type class which works works",
    "start": "987160",
    "end": "990000"
  },
  {
    "text": "on",
    "start": "990000",
    "end": "991600"
  },
  {
    "text": "um representations of those",
    "start": "991600",
    "end": "994560"
  },
  {
    "text": "representations and we first apply that",
    "start": "994560",
    "end": "997040"
  },
  {
    "text": "to get a representation and we apply we",
    "start": "997040",
    "end": "1000120"
  },
  {
    "text": "convert it back",
    "start": "1000120",
    "end": "1001399"
  },
  {
    "text": "to",
    "start": "1001399",
    "end": "1003959"
  },
  {
    "text": "the the type that we want uh for this",
    "start": "1003959",
    "end": "1007399"
  },
  {
    "text": "one let's be a bit lazy and say unless",
    "start": "1007399",
    "end": "1010199"
  },
  {
    "text": "we know",
    "start": "1010199",
    "end": "1012480"
  },
  {
    "text": "otherwise this bit here overlap we don't",
    "start": "1012480",
    "end": "1015880"
  },
  {
    "text": "care about any",
    "start": "1015880",
    "end": "1017600"
  },
  {
    "text": "meta and just just go through it by fap",
    "start": "1017600",
    "end": "1022120"
  },
  {
    "text": "fmap here is needed because we produce a",
    "start": "1022120",
    "end": "1024079"
  },
  {
    "text": "maybe value for",
    "start": "1024079",
    "end": "1026760"
  },
  {
    "text": "product let's get the first bit let's",
    "start": "1026760",
    "end": "1030640"
  },
  {
    "text": "get the second bit and tie them using",
    "start": "1030640",
    "end": "1034240"
  },
  {
    "text": "that uh product for",
    "start": "1034240",
    "end": "1036880"
  },
  {
    "text": "some let's try parsing the first one or",
    "start": "1036880",
    "end": "1041079"
  },
  {
    "text": "let's try parsing the second one and if",
    "start": "1041079",
    "end": "1044120"
  },
  {
    "text": "like on the first one let's put uh the",
    "start": "1044120",
    "end": "1046918"
  },
  {
    "text": "left selector on the right one let's put",
    "start": "1046919",
    "end": "1048400"
  },
  {
    "text": "the right selector and that's how we",
    "start": "1048400",
    "end": "1049760"
  },
  {
    "text": "construct the",
    "start": "1049760",
    "end": "1052200"
  },
  {
    "text": "representation and finally the base case",
    "start": "1052200",
    "end": "1057400"
  },
  {
    "text": "which is we need to pass a single value",
    "start": "1057400",
    "end": "1060919"
  },
  {
    "text": "which has a",
    "start": "1060919",
    "end": "1062880"
  },
  {
    "text": "selector we could apply cell name to any",
    "start": "1062880",
    "end": "1066679"
  },
  {
    "text": "value of the right type but we don't",
    "start": "1066679",
    "end": "1069679"
  },
  {
    "text": "have it yet once we build it we'll have",
    "start": "1069679",
    "end": "1073320"
  },
  {
    "text": "it and we could apply cell name but we",
    "start": "1073320",
    "end": "1074880"
  },
  {
    "text": "need cell name to build anything so what",
    "start": "1074880",
    "end": "1077880"
  },
  {
    "text": "we do is",
    "start": "1077880",
    "end": "1079440"
  },
  {
    "text": "is we apply cell name to undefined of",
    "start": "1079440",
    "end": "1083400"
  },
  {
    "text": "the right type this m here is a critical",
    "start": "1083400",
    "end": "1086320"
  },
  {
    "text": "bit The Meta information which has a",
    "start": "1086320",
    "end": "1088600"
  },
  {
    "text": "selector name and because it because for",
    "start": "1088600",
    "end": "1092640"
  },
  {
    "text": "all values of this type the selector",
    "start": "1092640",
    "end": "1095520"
  },
  {
    "text": "name is going to be the same thanks to",
    "start": "1095520",
    "end": "1096799"
  },
  {
    "text": "the same",
    "start": "1096799",
    "end": "1097720"
  },
  {
    "text": "M it's just going to work and once",
    "start": "1097720",
    "end": "1101200"
  },
  {
    "text": "that's done",
    "start": "1101200",
    "end": "1104240"
  },
  {
    "text": "we get look that for that key we see if",
    "start": "1104240",
    "end": "1109039"
  },
  {
    "text": "the single value of the type and we wrap",
    "start": "1109039",
    "end": "1111039"
  },
  {
    "text": "it properly and we get the instance of",
    "start": "1111039",
    "end": "1113559"
  },
  {
    "text": "the right type back uh I could have",
    "start": "1113559",
    "end": "1116120"
  },
  {
    "text": "passed exactly the same the same type",
    "start": "1116120",
    "end": "1119799"
  },
  {
    "text": "here as I had here and this needs scope",
    "start": "1119799",
    "end": "1123880"
  },
  {
    "text": "type variables",
    "start": "1123880",
    "end": "1125120"
  },
  {
    "text": "extension uh",
    "start": "1125120",
    "end": "1126960"
  },
  {
    "text": "but they both work since here I don't",
    "start": "1126960",
    "end": "1129760"
  },
  {
    "text": "care about the actual record type I just",
    "start": "1129760",
    "end": "1132039"
  },
  {
    "text": "care about the meta information that's",
    "start": "1132039",
    "end": "1135679"
  },
  {
    "text": "fine so what we can build",
    "start": "1135679",
    "end": "1139520"
  },
  {
    "text": "we can build show we can build or we can",
    "start": "1139520",
    "end": "1142640"
  },
  {
    "text": "build equivalence all of these are",
    "start": "1142640",
    "end": "1144520"
  },
  {
    "text": "pretty trivial uh even though we for or",
    "start": "1144520",
    "end": "1148720"
  },
  {
    "text": "and equivalence we go onto two two",
    "start": "1148720",
    "end": "1151200"
  },
  {
    "text": "structures in parallel and so if we want",
    "start": "1151200",
    "end": "1153960"
  },
  {
    "text": "to compare two representations We",
    "start": "1153960",
    "end": "1156520"
  },
  {
    "text": "compare the first part we for a product",
    "start": "1156520",
    "end": "1158600"
  },
  {
    "text": "we compare the both parts we for sums We",
    "start": "1158600",
    "end": "1161600"
  },
  {
    "text": "compare Theon",
    "start": "1161600",
    "end": "1163520"
  },
  {
    "text": "s we can't build an F map because for F",
    "start": "1163520",
    "end": "1170240"
  },
  {
    "text": "map the type of this value changes so we",
    "start": "1170240",
    "end": "1175880"
  },
  {
    "text": "got we can represent F from a and we can",
    "start": "1175880",
    "end": "1179360"
  },
  {
    "text": "represent F from B but we can't",
    "start": "1179360",
    "end": "1181559"
  },
  {
    "text": "represent F by itself so there is a",
    "start": "1181559",
    "end": "1185520"
  },
  {
    "text": "think there's another type class which",
    "start": "1185520",
    "end": "1187640"
  },
  {
    "text": "you can derive again where you can",
    "start": "1187640",
    "end": "1192200"
  },
  {
    "text": "convert any like if you have a data type",
    "start": "1192200",
    "end": "1196760"
  },
  {
    "text": "of star to star kind",
    "start": "1196760",
    "end": "1199480"
  },
  {
    "text": "you can derive the generic one and again",
    "start": "1199480",
    "end": "1202360"
  },
  {
    "text": "this is all completely done by GHC so if",
    "start": "1202360",
    "end": "1205200"
  },
  {
    "text": "you just derive generic one you'll get",
    "start": "1205200",
    "end": "1207320"
  },
  {
    "text": "back an instance of this and you get",
    "start": "1207320",
    "end": "1210360"
  },
  {
    "text": "some new building blocks of your",
    "start": "1210360",
    "end": "1213080"
  },
  {
    "text": "parameter that a here and a recursive",
    "start": "1213080",
    "end": "1216000"
  },
  {
    "text": "occurrence of yourself so for example",
    "start": "1216000",
    "end": "1217600"
  },
  {
    "text": "for a list it's a cons",
    "start": "1217600",
    "end": "1220280"
  },
  {
    "text": "of parameter and the recur",
    "start": "1220280",
    "end": "1223840"
  },
  {
    "text": "recurrence and also let's see how this",
    "start": "1223840",
    "end": "1227520"
  },
  {
    "text": "works uh uh let's define a pretty",
    "start": "1227520",
    "end": "1230440"
  },
  {
    "text": "primitive Lambda expression uh that's an",
    "start": "1230440",
    "end": "1233400"
  },
  {
    "text": "S expression sorry and we can derive",
    "start": "1233400",
    "end": "1235799"
  },
  {
    "text": "generic and generic one so rep one",
    "start": "1235799",
    "end": "1239840"
  },
  {
    "text": "that's the higher kind representation",
    "start": "1239840",
    "end": "1243120"
  },
  {
    "text": "is again a lot of",
    "start": "1243120",
    "end": "1246000"
  },
  {
    "text": "metadata and what we see in the end",
    "start": "1246000",
    "end": "1249960"
  },
  {
    "text": "is uh where did it go parameter",
    "start": "1249960",
    "end": "1252480"
  },
  {
    "text": "occurrence corresponds to the constant",
    "start": "1252480",
    "end": "1255600"
  },
  {
    "text": "here text which is static it doesn't",
    "start": "1255600",
    "end": "1258760"
  },
  {
    "text": "change so that's the same as in the user",
    "start": "1258760",
    "end": "1261520"
  },
  {
    "text": "case and finally the recursive calls",
    "start": "1261520",
    "end": "1266280"
  },
  {
    "text": "here which are presented by these",
    "start": "1266280",
    "end": "1270440"
  },
  {
    "text": "ones uh so this is how we can build any",
    "start": "1270440",
    "end": "1275679"
  },
  {
    "text": "kind of data types there are a few",
    "start": "1275679",
    "end": "1278279"
  },
  {
    "text": "limitations",
    "start": "1278279",
    "end": "1279640"
  },
  {
    "text": "here generic generic gives you anything",
    "start": "1279640",
    "end": "1283480"
  },
  {
    "text": "that you can do with a kind of star",
    "start": "1283480",
    "end": "1286360"
  },
  {
    "text": "generic one gives you anything you can",
    "start": "1286360",
    "end": "1288760"
  },
  {
    "text": "do with a kind of start to",
    "start": "1288760",
    "end": "1291120"
  },
  {
    "text": "Star as far as I know there's no higher",
    "start": "1291120",
    "end": "1295240"
  },
  {
    "text": "kinds of generic so there is no generic",
    "start": "1295240",
    "end": "1297080"
  },
  {
    "text": "two and so if you implement something",
    "start": "1297080",
    "end": "1299039"
  },
  {
    "text": "like dmap or bmap like b functor or",
    "start": "1299039",
    "end": "1302520"
  },
  {
    "text": "profunctor",
    "start": "1302520",
    "end": "1303480"
  },
  {
    "text": "out of",
    "start": "1303480",
    "end": "1305880"
  },
  {
    "text": "flug uh these things can be",
    "start": "1305880",
    "end": "1309679"
  },
  {
    "text": "unwielding the error messages are",
    "start": "1309679",
    "end": "1313840"
  },
  {
    "text": "surprisingly not g gantic and can like",
    "start": "1313840",
    "end": "1318279"
  },
  {
    "text": "you can understand especially thanks to",
    "start": "1318279",
    "end": "1321279"
  },
  {
    "text": "this indentation what's going on and",
    "start": "1321279",
    "end": "1324000"
  },
  {
    "text": "what can it is it trying to find an",
    "start": "1324000",
    "end": "1326600"
  },
  {
    "text": "instance for it will typically you",
    "start": "1326600",
    "end": "1330159"
  },
  {
    "text": "forgot to write an instance for",
    "start": "1330159",
    "end": "1331520"
  },
  {
    "text": "something like let's me go back to the",
    "start": "1331520",
    "end": "1335440"
  },
  {
    "text": "user something like selectors or",
    "start": "1337320",
    "end": "1339960"
  },
  {
    "text": "Constructors you say you forgot about",
    "start": "1339960",
    "end": "1341480"
  },
  {
    "text": "Constructors so it'll go through the",
    "start": "1341480",
    "end": "1343039"
  },
  {
    "text": "data tyab and complain that it can't",
    "start": "1343039",
    "end": "1345120"
  },
  {
    "text": "find an instance for your Constructor",
    "start": "1345120",
    "end": "1347520"
  },
  {
    "text": "fine you just add one and which will",
    "start": "1347520",
    "end": "1349320"
  },
  {
    "text": "probably skip through if you don't care",
    "start": "1349320",
    "end": "1350799"
  },
  {
    "text": "and you go through",
    "start": "1350799",
    "end": "1353320"
  },
  {
    "text": "it uh there are other libraries",
    "start": "1353320",
    "end": "1358159"
  },
  {
    "text": "that are okay this is all all main",
    "start": "1358159",
    "end": "1362320"
  },
  {
    "text": "content there are other libraries that",
    "start": "1362320",
    "end": "1364320"
  },
  {
    "text": "are equivalent in GHC and other",
    "start": "1364320",
    "end": "1366279"
  },
  {
    "text": "libraries this scrap your boiler plate",
    "start": "1366279",
    "end": "1368840"
  },
  {
    "text": "which relies on higher order",
    "start": "1368840",
    "end": "1371320"
  },
  {
    "text": "functions it is similar but in intent",
    "start": "1371320",
    "end": "1377000"
  },
  {
    "text": "but it has a lot of of",
    "start": "1377000",
    "end": "1379440"
  },
  {
    "text": "intricacies if you want to write an",
    "start": "1379440",
    "end": "1382559"
  },
  {
    "text": "equivalence so if you want to show",
    "start": "1382559",
    "end": "1384480"
  },
  {
    "text": "something is fine if you want to compare",
    "start": "1384480",
    "end": "1387760"
  },
  {
    "text": "two things in",
    "start": "1387760",
    "end": "1389400"
  },
  {
    "text": "parallel it's very",
    "start": "1389400",
    "end": "1392559"
  },
  {
    "text": "sophisticated the the similar thing",
    "start": "1392559",
    "end": "1394720"
  },
  {
    "text": "exist in P script unfortunately due to",
    "start": "1394720",
    "end": "1397880"
  },
  {
    "text": "type limitations of pure script type",
    "start": "1397880",
    "end": "1399600"
  },
  {
    "text": "system they had to introduce a May in",
    "start": "1399600",
    "end": "1402559"
  },
  {
    "text": "the uh from and two conversion and so it",
    "start": "1402559",
    "end": "1405320"
  },
  {
    "text": "doesn't work like as",
    "start": "1405320",
    "end": "1407080"
  },
  {
    "text": "well uh and there is uni plate which",
    "start": "1407080",
    "end": "1409679"
  },
  {
    "text": "builds onto generic for things that you",
    "start": "1409679",
    "end": "1412840"
  },
  {
    "text": "might want to do with your generic types",
    "start": "1412840",
    "end": "1414840"
  },
  {
    "text": "for example if you have a large data",
    "start": "1414840",
    "end": "1416480"
  },
  {
    "text": "type such as a representation from",
    "start": "1416480",
    "end": "1419159"
  },
  {
    "text": "pandoc of your markdown document you can",
    "start": "1419159",
    "end": "1421600"
  },
  {
    "text": "find every Link in there and replace it",
    "start": "1421600",
    "end": "1424600"
  },
  {
    "text": "with a short end version through a",
    "start": "1424600",
    "end": "1427000"
  },
  {
    "text": "favorite URL",
    "start": "1427000",
    "end": "1428480"
  },
  {
    "text": "shortener that's all I have There's the",
    "start": "1428480",
    "end": "1430679"
  },
  {
    "text": "link to the talk there is a link the",
    "start": "1430679",
    "end": "1432880"
  },
  {
    "text": "source code in the talk which is still",
    "start": "1432880",
    "end": "1434799"
  },
  {
    "text": "here uh questions",
    "start": "1434799",
    "end": "1439639"
  }
]