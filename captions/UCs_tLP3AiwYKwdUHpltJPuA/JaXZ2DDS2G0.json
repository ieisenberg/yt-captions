[
  {
    "text": "she explained to me what that meant just a minute ago so",
    "start": "10040",
    "end": "15559"
  },
  {
    "text": "yeah well welcome to my talk um it's great to see a room full of people here but that's what you get if it's a single",
    "start": "15800",
    "end": "22439"
  },
  {
    "text": "track conference right um so this is my talk on on the microservice architecture and",
    "start": "22439",
    "end": "29160"
  },
  {
    "text": "um really what I'm going to cover is first just talk about the motivations for using microservices like what are",
    "start": "29160",
    "end": "35820"
  },
  {
    "text": "what situations would you use them in and what are the benefits would you expect to get from that and then I'm",
    "start": "35820",
    "end": "42180"
  },
  {
    "text": "going to talk about the essential characteristics of the microservice architecture Give a definition and and",
    "start": "42180",
    "end": "47760"
  },
  {
    "text": "and then just sort of talk about various aspects of the architecture and some",
    "start": "47760",
    "end": "54059"
  },
  {
    "text": "adjacent Technologies I'm actually going to finish up by talking about testing because that's one",
    "start": "54059",
    "end": "60239"
  },
  {
    "text": "of the super interesting aspects of this whole thing kind of mentioning some of the topics that Beth talked about",
    "start": "60239",
    "end": "66960"
  },
  {
    "text": "earlier in her talk um before I talk about that a little bit about me",
    "start": "66960",
    "end": "73560"
  },
  {
    "text": "um sort of done a whole number of things over the years um I actually started off building lisp systems back in the late 80s",
    "start": "73560",
    "end": "80960"
  },
  {
    "text": "eventually ended up programming in Java wrote the book pojos in action which came out almost a lifetime ago started",
    "start": "80960",
    "end": "87600"
  },
  {
    "text": "tinkering with this obscura API known as ec2 from an online bookstore back in",
    "start": "87600",
    "end": "92700"
  },
  {
    "text": "2008 that turned into the original cloud Foundry which then got acquired by Spring source and VMware",
    "start": "92700",
    "end": "99720"
  },
  {
    "text": "and for the past five six years I've really just been doing microservices that's all I talk about well that and",
    "start": "99720",
    "end": "107220"
  },
  {
    "text": "that and food actually um love food love traveling the world",
    "start": "107220",
    "end": "113220"
  },
  {
    "text": "um so I I basically do Consulting and training around microservices",
    "start": "113220",
    "end": "118259"
  },
  {
    "text": "um I have a startup in that area as well and my book microservices",
    "start": "118259",
    "end": "124320"
  },
  {
    "text": "patterns came out in print back in November and you know I think there's the conference discount code where you",
    "start": "124320",
    "end": "129539"
  },
  {
    "text": "can get 40 off um or I'll show that again at the end",
    "start": "129539",
    "end": "134819"
  },
  {
    "text": "and I also have microservices.io which I think if you many of you have probably visited",
    "start": "134819",
    "end": "141360"
  },
  {
    "text": "whether it's the patent language and code and other resources to help you use the microservice architecture",
    "start": "141360",
    "end": "147120"
  },
  {
    "text": "effectively including a recently added assessment tool that lets you evaluate your own",
    "start": "147120",
    "end": "153959"
  },
  {
    "text": "microservice architecture so that's me microservices microservices food",
    "start": "153959",
    "end": "159420"
  },
  {
    "text": "um um so we're going to talk about various",
    "start": "159420",
    "end": "164459"
  },
  {
    "text": "different topics and they all sort of have a sort of kind of visual metaphor which I managed to just kind of Cobble",
    "start": "164459",
    "end": "171599"
  },
  {
    "text": "together into a coherent talk um so there's a triangle there's a cube",
    "start": "171599",
    "end": "177540"
  },
  {
    "text": "there's a hexagon and then there's an iceberg but that's a triangle and then there's cylinders and then there's I",
    "start": "177540",
    "end": "183660"
  },
  {
    "text": "finish up talking about the testing pyramid that's sort of talking about all these different key aspects of the",
    "start": "183660",
    "end": "189720"
  },
  {
    "text": "microservice architecture so I first want to talk about the success triangle",
    "start": "189720",
    "end": "195840"
  },
  {
    "text": "um because this I think is this is the motivation for using the microservice architecture so you know a while back",
    "start": "195840",
    "end": "203760"
  },
  {
    "text": "um someone coined the phrase software is eating the world which in other words every company is be needs to become a",
    "start": "203760",
    "end": "210659"
  },
  {
    "text": "technology company and it doesn't matter what you do whether you're an airline or a Mining Company software is becoming",
    "start": "210659",
    "end": "218400"
  },
  {
    "text": "increasingly important to the products and services that you deliver",
    "start": "218400",
    "end": "224040"
  },
  {
    "text": "it's all about software and then you combine that with the fact that the Market within which you're operating is",
    "start": "224040",
    "end": "230400"
  },
  {
    "text": "basically in many places becoming extremely sort of volatile and certain",
    "start": "230400",
    "end": "235980"
  },
  {
    "text": "um you know threats are coming out of nowhere at you which then leads to the",
    "start": "235980",
    "end": "241620"
  },
  {
    "text": "need to actually deliver new innovate at a much faster rate sort of tying into",
    "start": "241620",
    "end": "247980"
  },
  {
    "text": "the themes of the keynote and what that means for us as it people is well we",
    "start": "247980",
    "end": "253200"
  },
  {
    "text": "need to deliver software much more rapidly frequently and reliably than we",
    "start": "253200",
    "end": "258780"
  },
  {
    "text": "have done before um and and Adrian talked about this in the keynote right like it's no longer",
    "start": "258780",
    "end": "265440"
  },
  {
    "text": "good enough to have a release like yearly or every six months or even monthly and you can actually quantify",
    "start": "265440",
    "end": "272520"
  },
  {
    "text": "rapid frequent and reliable delivery with a few key metrics so there are some velocity metrics like lead time",
    "start": "272520",
    "end": "278940"
  },
  {
    "text": "minimizing the amount of time minimizing the time from a commit to that",
    "start": "278940",
    "end": "284540"
  },
  {
    "text": "code actually being deployed into production you can measure the deployment frequency so we obviously",
    "start": "284540",
    "end": "290699"
  },
  {
    "text": "want to minimize the lead time and increase the deployment frequency so we",
    "start": "290699",
    "end": "296400"
  },
  {
    "text": "want to go faster we also want to be much more reliable as well so we want to minimize the the",
    "start": "296400",
    "end": "302880"
  },
  {
    "text": "the percentage of deployments that cause an outage and then if there is a problem we want to be able to detect it diagnose",
    "start": "302880",
    "end": "311340"
  },
  {
    "text": "it and fix it much more rapidly which kind of ties into the talk earlier",
    "start": "311340",
    "end": "316740"
  },
  {
    "text": "about say the use of ml or Ai and operations so there's a Need for Speed and",
    "start": "316740",
    "end": "324180"
  },
  {
    "text": "reliability and then on top of that if we are successful with the applications we build they have a nasty habit of",
    "start": "324180",
    "end": "331259"
  },
  {
    "text": "living for a very very long time um you know probably some of the people",
    "start": "331259",
    "end": "337020"
  },
  {
    "text": "in the room have been working on Java applications that are basically as old as Java itself or certainly the early",
    "start": "337020",
    "end": "344400"
  },
  {
    "text": "2000s right or if you're really lucky you're working on a pl1 application",
    "start": "344400",
    "end": "351620"
  },
  {
    "text": "um and I think I read about that language in a history book somewhere",
    "start": "352560",
    "end": "357780"
  },
  {
    "text": "right I mean it's old technology which on the one hand is fantastic it means that application was super successful",
    "start": "357780",
    "end": "364740"
  },
  {
    "text": "because there's nothing worse than building an application and going out of business right",
    "start": "364740",
    "end": "369960"
  },
  {
    "text": "um but the problem you have is that technology changes and you want to be able to modernize your application you",
    "start": "369960",
    "end": "377639"
  },
  {
    "text": "don't want to be stuck using increasingly obsolete Technologies so I",
    "start": "377639",
    "end": "382800"
  },
  {
    "text": "sort of view them what you need in order to deliver software quickly and sort of",
    "start": "382800",
    "end": "388440"
  },
  {
    "text": "have for these long-lived applications is requiring a combination of three things which is what I call the success",
    "start": "388440",
    "end": "394680"
  },
  {
    "text": "triangle you need to have the right process development process you need to have the",
    "start": "394680",
    "end": "400620"
  },
  {
    "text": "right organizational structure and you need the right architecture because it turns out the architecture needs you",
    "start": "400620",
    "end": "407400"
  },
  {
    "text": "have to have the architecture to support the process you've got to have the architecture to support the organization",
    "start": "407400",
    "end": "412620"
  },
  {
    "text": "you know it's just basic Conway's law and what that translates into today",
    "start": "412620",
    "end": "419280"
  },
  {
    "text": "is from a process perspective your your product development methodology is",
    "start": "419280",
    "end": "424680"
  },
  {
    "text": "primarily lean right making lots of small um bets and and trials in the",
    "start": "424680",
    "end": "430860"
  },
  {
    "text": "marketplace and rapidly iterating on that that's sort of the product development methodology and then in",
    "start": "430860",
    "end": "436440"
  },
  {
    "text": "terms of your software delivery methodology you want to be using devops right which is you know essentially a",
    "start": "436440",
    "end": "443759"
  },
  {
    "text": "methodology for delivering software rapidly frequently and reliably a set of",
    "start": "443759",
    "end": "449039"
  },
  {
    "text": "practice or principles and practices and it Embraces agile Concepts continuous",
    "start": "449039",
    "end": "454500"
  },
  {
    "text": "delivery continuous deployment and so on so that's that's the process side of things combine and then on top of that",
    "start": "454500",
    "end": "461520"
  },
  {
    "text": "you want you have to have the right organization and this came up in the keynote as well",
    "start": "461520",
    "end": "466680"
  },
  {
    "text": "you want to structure your organization as",
    "start": "466680",
    "end": "471840"
  },
  {
    "text": "small relatively small say six eight ten people the so-called two Pizza teams",
    "start": "471840",
    "end": "477479"
  },
  {
    "text": "that are cross-functional so they have all of the capabilities on them to take",
    "start": "477479",
    "end": "482520"
  },
  {
    "text": "a concept and turn it into deployed code running in production and those teams",
    "start": "482520",
    "end": "488220"
  },
  {
    "text": "also need to be Loosely coupled so lots of interactions but it within the teams",
    "start": "488220",
    "end": "494160"
  },
  {
    "text": "but minimal interactions between the teams because interactions between the teams means scheduling meetings which",
    "start": "494160",
    "end": "501479"
  },
  {
    "text": "means finding a meeting room which I think as many of you know is quite difficult it's one of the biggest",
    "start": "501479",
    "end": "506639"
  },
  {
    "text": "problems in corporate life today fight around a universally true around",
    "start": "506639",
    "end": "511919"
  },
  {
    "text": "the world so then it then it's like well what's the architecture now obviously I'm",
    "start": "511919",
    "end": "517800"
  },
  {
    "text": "talking about microservices so you know the answer to that already but I'm going to explain why and I'm going to do that",
    "start": "517800",
    "end": "524339"
  },
  {
    "text": "using the scale Cube so we want to do devops you want to have",
    "start": "524339",
    "end": "531360"
  },
  {
    "text": "autonomous teams and you want to and and you're developing these long-lived applications",
    "start": "531360",
    "end": "538040"
  },
  {
    "text": "those goals actually Place requirements on your architecture devops actually",
    "start": "538040",
    "end": "544980"
  },
  {
    "text": "requires an architecture that is highly testable so you you need to has to have",
    "start": "544980",
    "end": "551519"
  },
  {
    "text": "well-defined Behavior it needs to be straightforward to test and the tests need to be",
    "start": "551519",
    "end": "556680"
  },
  {
    "text": "um to execute quickly it also needs to be Deployable because you're constantly pushing changes into production which",
    "start": "556680",
    "end": "563519"
  },
  {
    "text": "need requires a high level of deployability plus software just generally needs to be",
    "start": "563519",
    "end": "569519"
  },
  {
    "text": "maintainable and then autonomous teams right which are Loosely coupled require",
    "start": "569519",
    "end": "575899"
  },
  {
    "text": "according to Conway's law an architecture that is actually Loosely coupled it's in itself so you've got a",
    "start": "575899",
    "end": "583620"
  },
  {
    "text": "Loosely coupled modular architecture and that will enable your teams to be Loosely coupled as well",
    "start": "583620",
    "end": "591060"
  },
  {
    "text": "um and then long-lived applications require an architecture that's also modular because you want to be able to",
    "start": "591060",
    "end": "596880"
  },
  {
    "text": "incrementally upgrade parts of them and then combine that you need an",
    "start": "596880",
    "end": "602459"
  },
  {
    "text": "architecture that's evolvable so there's a you need a an architecture with those",
    "start": "602459",
    "end": "608040"
  },
  {
    "text": "characteristics now if you go look at a standard application and most applications I build over the years look",
    "start": "608040",
    "end": "614279"
  },
  {
    "text": "like this right they were a mono they had a monolithic architecture internally they were layered and they had modules",
    "start": "614279",
    "end": "622140"
  },
  {
    "text": "and so on but everything got packaged up as a single Deployable unit in the case",
    "start": "622140",
    "end": "627959"
  },
  {
    "text": "of java that was a war file before that it was an EF file right",
    "start": "627959",
    "end": "633600"
  },
  {
    "text": "um and this by this so that's the monolithic architecture which in itself is is not an anti-pattern it is a",
    "start": "633600",
    "end": "642300"
  },
  {
    "text": "perfectly good choice for an application architecture I I actually find that I",
    "start": "642300",
    "end": "647760"
  },
  {
    "text": "travel around the world and I actually spend a whole bunch of time going no just use a monolith it's okay",
    "start": "647760",
    "end": "654779"
  },
  {
    "text": "right because because a monolith can get can be highly testable highly Deployable",
    "start": "654779",
    "end": "661079"
  },
  {
    "text": "highly maintainable and so on um it can work just fine and so you can",
    "start": "661079",
    "end": "668640"
  },
  {
    "text": "deliver software rapidly frequently and reliably but the problem that you run into is the applications have a habit of",
    "start": "668640",
    "end": "676620"
  },
  {
    "text": "growing so you know application we don't stop doing development and do this",
    "start": "676620",
    "end": "682700"
  },
  {
    "text": "maintenance thing that they talk of in software engineering textbooks development is just ongoing so the",
    "start": "682700",
    "end": "689399"
  },
  {
    "text": "application gets bigger and bigger every developer is committing that 20 lines of",
    "start": "689399",
    "end": "694680"
  },
  {
    "text": "tested code a day or whatever the metric is forget the exact number",
    "start": "694680",
    "end": "700200"
  },
  {
    "text": "um but anyway you have enough people and then give them enough time and the application is just going to keep",
    "start": "700200",
    "end": "705480"
  },
  {
    "text": "growing and growing and growing and in the development team if you're making money will get bigger and bigger so it",
    "start": "705480",
    "end": "711240"
  },
  {
    "text": "started off with six people sitting in one room and before you know it you've got a hundred two hundred people so on",
    "start": "711240",
    "end": "717240"
  },
  {
    "text": "and so forth and you try to divide them up into teams but they're all contributing to this massive code base",
    "start": "717240",
    "end": "724680"
  },
  {
    "text": "so that's the problem the larger the application the more difficult it gets to do anything with it",
    "start": "724680",
    "end": "730980"
  },
  {
    "text": "and then on top of that and sometimes because of that modularity starts to",
    "start": "730980",
    "end": "736380"
  },
  {
    "text": "break down and so what used to be this sort of pristine layered modular architecture just degenerates into a big",
    "start": "736380",
    "end": "743820"
  },
  {
    "text": "ball of mud um hazardly structured sprawling sloppy",
    "start": "743820",
    "end": "750300"
  },
  {
    "text": "duct tape and and there was anyone recognized their application in that description",
    "start": "750300",
    "end": "757440"
  },
  {
    "text": "um and then on top of that you the technology choices that you made at the",
    "start": "757440",
    "end": "764279"
  },
  {
    "text": "beginning of the project are getting increasingly out of date and because",
    "start": "764279",
    "end": "769800"
  },
  {
    "text": "it's just this massive code base it becomes prohibitively expensive to rewrite it to adopt a new technology",
    "start": "769800",
    "end": "776760"
  },
  {
    "text": "you know you might have listened to Adrian and gone gosh I want to use golang because Adrian said it was cool",
    "start": "776760",
    "end": "784440"
  },
  {
    "text": "and Google uses it which makes it even cooler but if you've got some ancient code base you can't you cannot just like",
    "start": "784440",
    "end": "792060"
  },
  {
    "text": "start using golang in inside your monolithic architecture nor should you",
    "start": "792060",
    "end": "797279"
  },
  {
    "text": "because it's really just C with garbage collection um",
    "start": "797279",
    "end": "802740"
  },
  {
    "text": "sorry I just had to get that I was just it's just been inside me all morning I I",
    "start": "802740",
    "end": "808260"
  },
  {
    "text": "had to get that out there no it's good for low-level stuff but it's not good for enterprise",
    "start": "808260",
    "end": "814139"
  },
  {
    "text": "applications as far as I'm concerned I'm happily be convinced otherwise anyway back on",
    "start": "814139",
    "end": "821700"
  },
  {
    "text": "track so your technology stack is getting increasingly out of date and it's difficult to upgrade it right and",
    "start": "821700",
    "end": "828300"
  },
  {
    "text": "there's a few programming in PL one you you would know this um so you sort of have this picture",
    "start": "828300",
    "end": "835139"
  },
  {
    "text": "you know over time your application is getting bigger and bigger and bigger and actually much more valuable which is",
    "start": "835139",
    "end": "840480"
  },
  {
    "text": "good but at the same time the desirable attributes are getting worse and worse",
    "start": "840480",
    "end": "846300"
  },
  {
    "text": "and worse um so development just tends to slow down and to make matters worse you know",
    "start": "846300",
    "end": "854100"
  },
  {
    "text": "over time you know with the marketplace being more competitive the desire desired attribute where you need to be",
    "start": "854100",
    "end": "860880"
  },
  {
    "text": "is getting higher and higher and higher so there is this risk of disruption right",
    "start": "860880",
    "end": "867000"
  },
  {
    "text": "you can't deliver software quickly enough to compete in the marketplace you",
    "start": "867000",
    "end": "872279"
  },
  {
    "text": "know like in Hong Kong six virtual Banks were or eight virtual Banks were licensed right one one week and so",
    "start": "872279",
    "end": "879300"
  },
  {
    "text": "suddenly HSBC the the incumbent bank now has these new competitors",
    "start": "879300",
    "end": "884940"
  },
  {
    "text": "um there's an insurance company that's offering hourly commercial insurance for",
    "start": "884940",
    "end": "890760"
  },
  {
    "text": "um gig economy workers like Uber drivers now how long do you if you work at an",
    "start": "890760",
    "end": "896100"
  },
  {
    "text": "insurance company how long is it going to take you to adapt your ancient Legacy systems to offer hourly insurance I",
    "start": "896100",
    "end": "902579"
  },
  {
    "text": "suspect it would take a while so you risk being disrupted so that's the issue you have with the",
    "start": "902579",
    "end": "909000"
  },
  {
    "text": "monolith it's not inevitable but the probability of ending up in this situation is actually quite High",
    "start": "909000",
    "end": "915839"
  },
  {
    "text": "so then that leads so that then leads to",
    "start": "915839",
    "end": "921180"
  },
  {
    "text": "this um to the microservice architecture and I first got interested in this like 10",
    "start": "921180",
    "end": "927839"
  },
  {
    "text": "plus roughly 10 years ago when I read this book The Art of scalability and in the book they had this three-dimensional",
    "start": "927839",
    "end": "934560"
  },
  {
    "text": "model of scaling so there were three ways of scaling your application x-axis",
    "start": "934560",
    "end": "940199"
  },
  {
    "text": "scaling which is where you're running it running multiple instances of your monolith behind a load balancer everyday",
    "start": "940199",
    "end": "947579"
  },
  {
    "text": "kind of scaling to deal with transaction volumes and availability",
    "start": "947579",
    "end": "953779"
  },
  {
    "text": "z-axis scaling where you have a load balancer sitting",
    "start": "953779",
    "end": "958980"
  },
  {
    "text": "in front of your monolith but it's using an attribute of the request to do the to do the routing or perhaps routing as",
    "start": "958980",
    "end": "965639"
  },
  {
    "text": "it's called in some places so some customers get rooted over there",
    "start": "965639",
    "end": "973139"
  },
  {
    "text": "and other customers get routed elsewhere and that's good for dealing",
    "start": "973139",
    "end": "979560"
  },
  {
    "text": "with transaction volumes data volumes um you know your search service you",
    "start": "979560",
    "end": "985019"
  },
  {
    "text": "might like at the database level that would be called sharding but then there's this y-axis scaling",
    "start": "985019",
    "end": "991620"
  },
  {
    "text": "and that is functional decomposition so instead of what would what would",
    "start": "991620",
    "end": "997800"
  },
  {
    "text": "otherwise be a single application you apply y-axis scaling and functionally",
    "start": "997800",
    "end": "1003560"
  },
  {
    "text": "decompose it into a set of smaller applications which also go by the name of services",
    "start": "1003560",
    "end": "1011600"
  },
  {
    "text": "and it's a sort of obvious idea except when I read it it was like wow you can",
    "start": "1011600",
    "end": "1016820"
  },
  {
    "text": "do this and and it's totally resonated because the original cloud Foundry that I built was this monolith and we had a",
    "start": "1016820",
    "end": "1024140"
  },
  {
    "text": "whole bunch of development and operational challenges with it and had we applied y-axis scaling to it it would",
    "start": "1024140",
    "end": "1032418"
  },
  {
    "text": "have been a lot simpler so that's why I got super interested in that and then eventually this is what",
    "start": "1032419",
    "end": "1038959"
  },
  {
    "text": "got called the microservice architecture so I like to think of that as an",
    "start": "1038959",
    "end": "1044959"
  },
  {
    "text": "architectural style that structures the application as a set of services I don't actually like the",
    "start": "1044959",
    "end": "1052460"
  },
  {
    "text": "word microservice because that makes you think of micro which is small and these",
    "start": "1052460",
    "end": "1058340"
  },
  {
    "text": "services are not necessarily small I mean they should be highly maintainable and testable",
    "start": "1058340",
    "end": "1064520"
  },
  {
    "text": "they obviously need to be Loosely coupled in order to support the Loosely coupled teams they should be",
    "start": "1064520",
    "end": "1070280"
  },
  {
    "text": "independently Deployable they typically Implement business functions or",
    "start": "1070280",
    "end": "1075380"
  },
  {
    "text": "capabilities and they're owned by a small team um so your small autonomous team will",
    "start": "1075380",
    "end": "1083660"
  },
  {
    "text": "typically own ideally just one service I think that's an excellent starting point",
    "start": "1083660",
    "end": "1089480"
  },
  {
    "text": "so rather than sort of going down the path of having these super fine-grained",
    "start": "1089480",
    "end": "1094539"
  },
  {
    "text": "architectures where you have like one service per developer",
    "start": "1094539",
    "end": "1100039"
  },
  {
    "text": "because you heard about that in like an Uber presentation or something",
    "start": "1100039",
    "end": "1105100"
  },
  {
    "text": "you should really start off with a fairly coarse-grained architecture and",
    "start": "1105100",
    "end": "1110660"
  },
  {
    "text": "quite often just having one service per team is sufficient to meet those attrib",
    "start": "1110660",
    "end": "1116419"
  },
  {
    "text": "those architectural requirements that I mentioned earlier and you should only introduce more services",
    "start": "1116419",
    "end": "1123020"
  },
  {
    "text": "if it solves a problem like maybe this service has got too big and we then",
    "start": "1123020",
    "end": "1129200"
  },
  {
    "text": "testing takes too long so that might be a reason to split or there's some other",
    "start": "1129200",
    "end": "1134559"
  },
  {
    "text": "non-functional requirements that you need to satisfy so but I I do do like the idea of one",
    "start": "1134559",
    "end": "1141440"
  },
  {
    "text": "service per team so the food to go Application sort of rethought of as a as",
    "start": "1141440",
    "end": "1147620"
  },
  {
    "text": "a monolithic application or as a microservice application would look like this where you've got a bunch of",
    "start": "1147620",
    "end": "1153620"
  },
  {
    "text": "services each one of which implements a business function each service has its",
    "start": "1153620",
    "end": "1160280"
  },
  {
    "text": "own database um that's important for loose coupling which I think I will talk about later",
    "start": "1160280",
    "end": "1168100"
  },
  {
    "text": "the services might communicate using synchronous protocols like rest or grpc",
    "start": "1168100",
    "end": "1175039"
  },
  {
    "text": "but they for reasons I'll get into later will often communicate using an asynchronous messaging protocol and",
    "start": "1175039",
    "end": "1182480"
  },
  {
    "text": "using a message broker you could functionally decompose the UI having",
    "start": "1182480",
    "end": "1187820"
  },
  {
    "text": "different web apps focused on different parts of the UI you might have an API",
    "start": "1187820",
    "end": "1192860"
  },
  {
    "text": "Gateway sitting in front of your services which exposes the public API which in this example is consumed by",
    "start": "1192860",
    "end": "1200480"
  },
  {
    "text": "JavaScript running in the browser and a mobile client so interestingly lots of moving Parts",
    "start": "1200480",
    "end": "1207559"
  },
  {
    "text": "which is one of the drawbacks of this architecture so that that's the microservice architecture and you want to do it",
    "start": "1207559",
    "end": "1214580"
  },
  {
    "text": "because it improves testability right the fact that these services are are",
    "start": "1214580",
    "end": "1219740"
  },
  {
    "text": "relatively small makes them easier to test they're",
    "start": "1219740",
    "end": "1224780"
  },
  {
    "text": "independently Deployable by definition because they're small they're easier to maintain the code should fit in a",
    "start": "1224780",
    "end": "1232460"
  },
  {
    "text": "developer's head right um shouldn't it shouldn't be cognitively",
    "start": "1232460",
    "end": "1238360"
  },
  {
    "text": "overwhelming which is the problem with the monolith it's an inherently modular",
    "start": "1238360",
    "end": "1243679"
  },
  {
    "text": "architecture you can't bypass a remote API and access",
    "start": "1243679",
    "end": "1249380"
  },
  {
    "text": "the internals so it does a much better job of enforcing modularity unlike say",
    "start": "1249380",
    "end": "1254960"
  },
  {
    "text": "in Java where basically every public class on the class path can be accessed regardless of any Notions of module that",
    "start": "1254960",
    "end": "1263000"
  },
  {
    "text": "you might have put in place and it is highly evolvable as well you can upgrade the technology stack one",
    "start": "1263000",
    "end": "1271340"
  },
  {
    "text": "service at a time you can run an experiment you can try using XYZ language and if you like it that's great",
    "start": "1271340",
    "end": "1278900"
  },
  {
    "text": "and if you don't it's not a disaster you can swap it out at some some later point",
    "start": "1278900",
    "end": "1285620"
  },
  {
    "text": "so you know a lot of benefits and I like to kind of relate that back to the success triangle right you know the",
    "start": "1285620",
    "end": "1292820"
  },
  {
    "text": "microservice architecture gives you the testability and deployability that you need to for doing devops it gives you",
    "start": "1292820",
    "end": "1300320"
  },
  {
    "text": "the modularity in the loose coupling that you need to support the autonomous teams so it's you know supports Conway's",
    "start": "1300320",
    "end": "1307700"
  },
  {
    "text": "law there and then it also gives you the modularity the evolvability and the maintainability that you need for for",
    "start": "1307700",
    "end": "1314960"
  },
  {
    "text": "these long-lived applications because you can um upgrade at piecemeal",
    "start": "1314960",
    "end": "1322280"
  },
  {
    "text": "obviously there's downsides to this and um for the sake of full disclosure I'll",
    "start": "1322280",
    "end": "1328340"
  },
  {
    "text": "mention them briefly right by far it's a much more complex architecture you're",
    "start": "1328340",
    "end": "1333380"
  },
  {
    "text": "building a distributed system so you've got to deal with inter-process communication distributed data partial",
    "start": "1333380",
    "end": "1341059"
  },
  {
    "text": "failure and all the other complexities of distributed systems there's some interesting challenges around testing",
    "start": "1341059",
    "end": "1349039"
  },
  {
    "text": "um about and trying to avoid doing end-to-end integration tests and it",
    "start": "1349039",
    "end": "1354500"
  },
  {
    "text": "turns out that consumer-driven contract testing that was covered earlier is one of the key things there deployment is",
    "start": "1354500",
    "end": "1361640"
  },
  {
    "text": "much more complicated because instead of a single application you've now got",
    "start": "1361640",
    "end": "1367100"
  },
  {
    "text": "potentially tens or hundreds or thousands of applications many instances",
    "start": "1367100",
    "end": "1372980"
  },
  {
    "text": "of each one so there's many more more moving Parts in production that need to be monitored and managed and so on so",
    "start": "1372980",
    "end": "1379100"
  },
  {
    "text": "there's a you know a bunch of complexity there and then there's challenges around",
    "start": "1379100",
    "end": "1384500"
  },
  {
    "text": "drawing so I don't correctly drawing the service boundaries",
    "start": "1384500",
    "end": "1390200"
  },
  {
    "text": "um and it's really bad because if you get it wrong you end up with a distributed monolith which which is like",
    "start": "1390200",
    "end": "1396799"
  },
  {
    "text": "the worst of Both Worlds um and then it's actually challenging to",
    "start": "1396799",
    "end": "1402740"
  },
  {
    "text": "adopt this architecture taking your legacy system and breaking it apart into",
    "start": "1402740",
    "end": "1410360"
  },
  {
    "text": "a set of services is just this hideous painful process that can take many years",
    "start": "1410360",
    "end": "1418520"
  },
  {
    "text": "um but you know many companies have gone down this route and have experienced",
    "start": "1418520",
    "end": "1423740"
  },
  {
    "text": "microservice Nirvana when they've got to the end of it but it but it but it is a painful thing",
    "start": "1423740",
    "end": "1430539"
  },
  {
    "text": "okay so that's the microservice architecture defined and I want to sort",
    "start": "1430539",
    "end": "1435919"
  },
  {
    "text": "of dig in the level deeper into that and look at the structure of an individual service and for that I'm going to",
    "start": "1435919",
    "end": "1442580"
  },
  {
    "text": "introduce the notion of a hexagonal architecture um",
    "start": "1442580",
    "end": "1447919"
  },
  {
    "text": "which not not a new idea it's been around for a while you know we love our three-layered architecture right where",
    "start": "1447919",
    "end": "1454640"
  },
  {
    "text": "we we love to draw pictures like this to explain the structure of our application or service so we've got presentation",
    "start": "1454640",
    "end": "1461000"
  },
  {
    "text": "layer business logic persistence layer but this architecture doesn't exactly",
    "start": "1461000",
    "end": "1466820"
  },
  {
    "text": "capture what's going on like it actually says that the business logic layer somehow depends on the persistence layer",
    "start": "1466820",
    "end": "1474080"
  },
  {
    "text": "which often is not the case it's often the other way around because the business logic exposes an API that the",
    "start": "1474080",
    "end": "1481159"
  },
  {
    "text": "persistence layer implements and then it doesn't properly support the notion that",
    "start": "1481159",
    "end": "1486260"
  },
  {
    "text": "you could have multiple presentation layers multiple ways of handling inbound",
    "start": "1486260",
    "end": "1491539"
  },
  {
    "text": "requests or having multiple persistence layers so it's all a bit it's even",
    "start": "1491539",
    "end": "1496640"
  },
  {
    "text": "though it's super popular it's all a bit funky in terms of you know how it works",
    "start": "1496640",
    "end": "1502760"
  },
  {
    "text": "so for that reason I actually like the hexagonal architecture",
    "start": "1502760",
    "end": "1508580"
  },
  {
    "text": "um and it's been it's an idea that's been around for a long long time basically it and it looks pretty as well",
    "start": "1508580",
    "end": "1514700"
  },
  {
    "text": "which is really important though it doesn't fit on slides that well if",
    "start": "1514700",
    "end": "1520039"
  },
  {
    "text": "you've got lots of them but anyway so it puts the business logic at the center of",
    "start": "1520039",
    "end": "1525860"
  },
  {
    "text": "the application or the center of the service the business logic is actually surrounded exposes a number of ports",
    "start": "1525860",
    "end": "1532880"
  },
  {
    "text": "which you can just think of in Java as just being interfaces so some ports are",
    "start": "1532880",
    "end": "1538400"
  },
  {
    "text": "inbound ports that let the outside invoke the business logic other ones are",
    "start": "1538400",
    "end": "1544640"
  },
  {
    "text": "actually outbound ports that are interfaces that enable the business logic to invoke other things like access",
    "start": "1544640",
    "end": "1552559"
  },
  {
    "text": "the database the other part of this is there are adapters and this this is also known as",
    "start": "1552559",
    "end": "1558980"
  },
  {
    "text": "the ports and adapters architecture so the adapters are classes or clusters of",
    "start": "1558980",
    "end": "1564260"
  },
  {
    "text": "classes that have that either handle inbound requests so these could be in",
    "start": "1564260",
    "end": "1570020"
  },
  {
    "text": "like the spring framework controller classes which handle HTTP requests",
    "start": "1570020",
    "end": "1575419"
  },
  {
    "text": "or they can be like database access objects that make that enable the",
    "start": "1575419",
    "end": "1582080"
  },
  {
    "text": "business logic to imp to access the database the order controller invokes the port",
    "start": "1582080",
    "end": "1589760"
  },
  {
    "text": "and actually the database access object would would be a class that implements",
    "start": "1589760",
    "end": "1596840"
  },
  {
    "text": "the outbound Port interface and you can have other adapters for like",
    "start": "1596840",
    "end": "1602360"
  },
  {
    "text": "interacting with message Brokers and making HTTP requests like proxy classes",
    "start": "1602360",
    "end": "1608600"
  },
  {
    "text": "and so on so I like to think of that as being not only that could be the structure of your monolithic application",
    "start": "1608600",
    "end": "1615380"
  },
  {
    "text": "but it could also be the structure of your service as well so in the context of a service",
    "start": "1615380",
    "end": "1622039"
  },
  {
    "text": "it looks like this so the whole point of a service is really to expose an API to the outside",
    "start": "1622039",
    "end": "1628880"
  },
  {
    "text": "what to to its clients that's its whole reason for existing so the API is",
    "start": "1628880",
    "end": "1635240"
  },
  {
    "text": "consists of two parts it has operations which are which can be invoked by the",
    "start": "1635240",
    "end": "1640820"
  },
  {
    "text": "clients there's two types of operations there are commands that change data like",
    "start": "1640820",
    "end": "1646940"
  },
  {
    "text": "create order revised order cancel order there are also queries that retrieve",
    "start": "1646940",
    "end": "1652940"
  },
  {
    "text": "data find order find order history and so on so that's the operational part of the or",
    "start": "1652940",
    "end": "1659240"
  },
  {
    "text": "the operations of the API and they can be invoked either synchronously using",
    "start": "1659240",
    "end": "1664340"
  },
  {
    "text": "rest grpc or they can be invoked asynchronously as well the service can also publish events",
    "start": "1664340",
    "end": "1672020"
  },
  {
    "text": "that's the other key part of the API so those would be domain DDD domain driven",
    "start": "1672020",
    "end": "1677299"
  },
  {
    "text": "design domain events so when data changes order created order revised order canceled the",
    "start": "1677299",
    "end": "1684500"
  },
  {
    "text": "service could emit an event um and then the service could also invoke other apis or apis of other",
    "start": "1684500",
    "end": "1692419"
  },
  {
    "text": "services as well you know that that's quite normal in some senses and it can",
    "start": "1692419",
    "end": "1699679"
  },
  {
    "text": "also consume the events that are emitted by other services",
    "start": "1699679",
    "end": "1706480"
  },
  {
    "text": "um now here's an example of that so you know here's the order service it",
    "start": "1706520",
    "end": "1712400"
  },
  {
    "text": "implements the create order operation as a rest endpoint post to slash orders it",
    "start": "1712400",
    "end": "1718159"
  },
  {
    "text": "actually emits order CR order events like order created",
    "start": "1718159",
    "end": "1723200"
  },
  {
    "text": "and then it interacts with other services actually asynchronously for",
    "start": "1723200",
    "end": "1729020"
  },
  {
    "text": "reasons I'll get into um synchronous communication is best avoided so it interacts with the",
    "start": "1729020",
    "end": "1735500"
  },
  {
    "text": "consumer service and so on and then it also consumes events that are emitted by",
    "start": "1735500",
    "end": "1741080"
  },
  {
    "text": "the restaurant service um and I'm going to talk about some of",
    "start": "1741080",
    "end": "1746299"
  },
  {
    "text": "these details in a little while but that's sort of an example of a typical service",
    "start": "1746299",
    "end": "1752000"
  },
  {
    "text": "um and I talk about this in more detail in my book Shameless plug",
    "start": "1752000",
    "end": "1757720"
  },
  {
    "text": "um there's also an operational aspect to a service in order for it to be production",
    "start": "1758960",
    "end": "1765200"
  },
  {
    "text": "ready it has to implement other sort of capabilities which you can think of as",
    "start": "1765200",
    "end": "1771080"
  },
  {
    "text": "adapters as well so number one it needs to support externalized configuration",
    "start": "1771080",
    "end": "1777100"
  },
  {
    "text": "configuration values such as which database to connect to and what credentials to use need to be passed",
    "start": "1777100",
    "end": "1784700"
  },
  {
    "text": "into the service at runtime so there needs to be an interface so to speak for",
    "start": "1784700",
    "end": "1790100"
  },
  {
    "text": "doing that it might be as simple as merely reading environment variables or",
    "start": "1790100",
    "end": "1795200"
  },
  {
    "text": "it might be a bit more complex as say reaching out to a config store and",
    "start": "1795200",
    "end": "1801080"
  },
  {
    "text": "retrieving its values this sort of push and pull models but that's one one key",
    "start": "1801080",
    "end": "1806720"
  },
  {
    "text": "capability that a service needs to implement it also needs to implement logging",
    "start": "1806720",
    "end": "1812919"
  },
  {
    "text": "which is basically logging to standard out in some standard format so the the runtime infrastructure can",
    "start": "1812919",
    "end": "1821299"
  },
  {
    "text": "then aggregate the logs so that's not too complicated but you just have to log",
    "start": "1821299",
    "end": "1827000"
  },
  {
    "text": "pick one of the numerous Java logging Frameworks for that",
    "start": "1827000",
    "end": "1832100"
  },
  {
    "text": "um you also it should also Implement a health check end point that enables the",
    "start": "1832100",
    "end": "1837559"
  },
  {
    "text": "run time to verify that a service instance is actually ready to handle requests and also and continues to",
    "start": "1837559",
    "end": "1846380"
  },
  {
    "text": "remain healthy so that could be like slash Health slash HC or slash actuator",
    "start": "1846380",
    "end": "1852320"
  },
  {
    "text": "slash health so if you're running on top of kubernetes that would be the liveness",
    "start": "1852320",
    "end": "1857659"
  },
  {
    "text": "or the Readiness probe and the liveness probe and if your service became unhealthy that would start returning",
    "start": "1857659",
    "end": "1864679"
  },
  {
    "text": "something other than 200 kubernetes would eventually kill it off and restart it so you've kind of got this health",
    "start": "1864679",
    "end": "1871720"
  },
  {
    "text": "self-healing system um the service also needs to expose Telemetry as well gather metrics and",
    "start": "1871720",
    "end": "1879620"
  },
  {
    "text": "Report those to some metrics collection system in some form or fashion whether",
    "start": "1879620",
    "end": "1885320"
  },
  {
    "text": "that's AWS Cloud watch or Prometheus some other I mean some data Gathering",
    "start": "1885320",
    "end": "1891380"
  },
  {
    "text": "system where those metrics can be stored aggregated visualized and you can set up",
    "start": "1891380",
    "end": "1897320"
  },
  {
    "text": "alerts on that and then the last part it needs to support distributed tracing so in every",
    "start": "1897320",
    "end": "1904520"
  },
  {
    "text": "inbound request to the system gets assigned a request ID or Trace ID that",
    "start": "1904520",
    "end": "1910220"
  },
  {
    "text": "then services that get invoked would then propagate that from any inbound request",
    "start": "1910220",
    "end": "1916880"
  },
  {
    "text": "to any outbound requests and actually report back to a distributed tracing",
    "start": "1916880",
    "end": "1922279"
  },
  {
    "text": "server that lets you visualize the flow of requests through the system and do",
    "start": "1922279",
    "end": "1929179"
  },
  {
    "text": "troubleshooting plus the tracing ID will actually end up the trace ID will actually end up in log messages as well",
    "start": "1929179",
    "end": "1936020"
  },
  {
    "text": "and then if you're using log aggregation you can search for a given Trace ID and",
    "start": "1936020",
    "end": "1941659"
  },
  {
    "text": "see all of the log entries that were generated while handling that request",
    "start": "1941659",
    "end": "1947960"
  },
  {
    "text": "really simple but a good debugging tool okay so that that's the structure of the",
    "start": "1947960",
    "end": "1954020"
  },
  {
    "text": "service and I'm kind of want to move on and talk about another shape which",
    "start": "1954020",
    "end": "1959179"
  },
  {
    "text": "it's a triangle but I I but it but the metaphor here is Iceberg",
    "start": "1959179",
    "end": "1965059"
  },
  {
    "text": "um which I assume are triangular in shape um so remember that the services need to be",
    "start": "1965059",
    "end": "1973039"
  },
  {
    "text": "Loosely coupled um although interesting there's a couple of different meanings of the work of the",
    "start": "1973039",
    "end": "1978559"
  },
  {
    "text": "term loosely coupled but among other other things right",
    "start": "1978559",
    "end": "1983600"
  },
  {
    "text": "um the the teams need to be Loosely coupled which then by according to Conway's Law requires the services to be",
    "start": "1983600",
    "end": "1990500"
  },
  {
    "text": "Loosely coupled as well so there will be some coupling because there's collaboration but it needs to be kind of",
    "start": "1990500",
    "end": "1997279"
  },
  {
    "text": "minimized there's two different types of coupling there's runtime coupling which is where",
    "start": "1997279",
    "end": "2004299"
  },
  {
    "text": "one service synchronously invokes another one um and that actually impacts",
    "start": "2004299",
    "end": "2010299"
  },
  {
    "text": "availability and I'm going to talk about that later in this section I want to talk about design time coupling which is",
    "start": "2010299",
    "end": "2018220"
  },
  {
    "text": "where if if a change gets made to one service like the customer service",
    "start": "2018220",
    "end": "2024039"
  },
  {
    "text": "you you don't want that regularly impacting this its clients the services",
    "start": "2024039",
    "end": "2029980"
  },
  {
    "text": "that depend upon it because that requires a lot more coordination and",
    "start": "2029980",
    "end": "2035320"
  },
  {
    "text": "communication between the teams which sort of destroys the autonomy of those",
    "start": "2035320",
    "end": "2041440"
  },
  {
    "text": "teams so you want to make sure that you have well-designed stable apis that",
    "start": "2041440",
    "end": "2047919"
  },
  {
    "text": "encapsulate the implementation of the service and I like to use the",
    "start": "2047919",
    "end": "2053560"
  },
  {
    "text": "example like say from stripe payment system right where there's sort of I know it's more complicated than this but",
    "start": "2053560",
    "end": "2060220"
  },
  {
    "text": "fundamentally there's an API which is your endpoint which is like charge this credit card",
    "start": "2060220",
    "end": "2065800"
  },
  {
    "text": "really simple API but behind that is a massive amount of complexity or with",
    "start": "2065800",
    "end": "2071618"
  },
  {
    "text": "twilio like send this SMS simple API but presumably there's a lot of",
    "start": "2071619",
    "end": "2077440"
  },
  {
    "text": "complexity involved those apis the great abstractions that hide quite complex",
    "start": "2077440",
    "end": "2082599"
  },
  {
    "text": "implementation so you want to make sure that you want to design apis similar to",
    "start": "2082599",
    "end": "2087700"
  },
  {
    "text": "that and you also want to avoid shared libraries as well if you implement business logic in a",
    "start": "2087700",
    "end": "2094780"
  },
  {
    "text": "shared Library that's used by multiple Services if the corresponding business",
    "start": "2094780",
    "end": "2100060"
  },
  {
    "text": "rules ever change then all of those Services have to be updated in lockstep",
    "start": "2100060",
    "end": "2105400"
  },
  {
    "text": "which destroys the autonomy between the teams so that's not good so I like to",
    "start": "2105400",
    "end": "2110740"
  },
  {
    "text": "think of you designing services that look like this and I call them icebergs because presumably what's visible above",
    "start": "2110740",
    "end": "2117220"
  },
  {
    "text": "the water is quite small relative to what's below so you want to have these small stable apis that encapsulate a",
    "start": "2117220",
    "end": "2125140"
  },
  {
    "text": "complex implementation because that enables the teams to change the implementation without regularly",
    "start": "2125140",
    "end": "2131800"
  },
  {
    "text": "impacting without regularly having to change the API especially in ways that are incompatible",
    "start": "2131800",
    "end": "2138040"
  },
  {
    "text": "which then requires the consumers to be changed and you want to avoid",
    "start": "2138040",
    "end": "2143320"
  },
  {
    "text": "services that look like this where they're sort of all API and no",
    "start": "2143320",
    "end": "2150280"
  },
  {
    "text": "implementation and a a good example of that are these services that just wrap a",
    "start": "2150280",
    "end": "2155440"
  },
  {
    "text": "database schema and the API basically mirrors that database schema",
    "start": "2155440",
    "end": "2161020"
  },
  {
    "text": "and there are tools that are really good for generating this automatically so that you can Auto generate a badly",
    "start": "2161020",
    "end": "2167560"
  },
  {
    "text": "designed service architecture just just like that don't don't use them Services",
    "start": "2167560",
    "end": "2173200"
  },
  {
    "text": "should actually contain data and business logic and should ideally have a lot of",
    "start": "2173200",
    "end": "2180640"
  },
  {
    "text": "complexity that's encapsulated by a simple stable interface you want to",
    "start": "2180640",
    "end": "2186040"
  },
  {
    "text": "avoid database tables or sharing of database tables because that is",
    "start": "2186040",
    "end": "2191859"
  },
  {
    "text": "basically tight design time coupling you know if the order service was in",
    "start": "2191859",
    "end": "2197020"
  },
  {
    "text": "accessing the customer service whenever the customer service team changed that schema the order service would have to",
    "start": "2197020",
    "end": "2203800"
  },
  {
    "text": "be updated and it would just be bad for everyone and it also introduces runtime coupling",
    "start": "2203800",
    "end": "2210339"
  },
  {
    "text": "so don't share database tables just encapsulate the data access it through",
    "start": "2210339",
    "end": "2216880"
  },
  {
    "text": "apis um how am I doing for time gosh behind",
    "start": "2216880",
    "end": "2224020"
  },
  {
    "text": "schedule all right um so the next thing I want to talk",
    "start": "2224020",
    "end": "2229180"
  },
  {
    "text": "about is is the is is another kind of cup playing known runtime coupling which",
    "start": "2229180",
    "end": "2235720"
  },
  {
    "text": "is where Services communicate synchronously and so there the shape is chat is a cylinder which is the sort of",
    "start": "2235720",
    "end": "2243220"
  },
  {
    "text": "visual representation of a message Channel so the solution is asynchronous",
    "start": "2243220",
    "end": "2248619"
  },
  {
    "text": "messaging but let's kind of have a quick look at the problem so imagine you wrote something like this",
    "start": "2248619",
    "end": "2254740"
  },
  {
    "text": "where you have an order service post request comes in to create an order it",
    "start": "2254740",
    "end": "2260800"
  },
  {
    "text": "the order service then makes another postal put request to the customer service sits there waiting for a",
    "start": "2260800",
    "end": "2267400"
  },
  {
    "text": "response to come back um and then when it does it finishes up",
    "start": "2267400",
    "end": "2272740"
  },
  {
    "text": "and returns a response super simple um but the problem you have is that the",
    "start": "2272740",
    "end": "2280060"
  },
  {
    "text": "you cannot create an order unless both these services are available so the",
    "start": "2280060",
    "end": "2285339"
  },
  {
    "text": "availability of this API is the product of the availability of the two services and if there were more services involved",
    "start": "2285339",
    "end": "2292180"
  },
  {
    "text": "it would be service availability to the power and which rapidly becomes not that",
    "start": "2292180",
    "end": "2297820"
  },
  {
    "text": "highly available and this is sort of an example of this anti-pattern where you go well we've got",
    "start": "2297820",
    "end": "2304599"
  },
  {
    "text": "a bunch of modules in my monolith and we're now going to just turn them into services and they're going to",
    "start": "2304599",
    "end": "2310060"
  },
  {
    "text": "communicate in the same way with a lot of synchronous inter-process communication that that's generally a",
    "start": "2310060",
    "end": "2316660"
  },
  {
    "text": "bad idea you now have multiple points of failure in your system it will become",
    "start": "2316660",
    "end": "2322960"
  },
  {
    "text": "very brittle so you want to use asynchronous messaging and there's an excellent book Enterprise",
    "start": "2322960",
    "end": "2330099"
  },
  {
    "text": "Integration patterns classic book and I guess grego's speaking later today right",
    "start": "2330099",
    "end": "2335440"
  },
  {
    "text": "so yeah go buy his book because it's awesome um but that's the abstraction of",
    "start": "2335440",
    "end": "2341680"
  },
  {
    "text": "messaging systems Services communicate by sending messages via a messaging",
    "start": "2341680",
    "end": "2348339"
  },
  {
    "text": "channel to some other service and these channels are basically recipient um sort",
    "start": "2348339",
    "end": "2354520"
  },
  {
    "text": "of abstractions over what the message broke up um provides so they could be Kafka topics",
    "start": "2354520",
    "end": "2360540"
  },
  {
    "text": "jmsqs JMS topics and so on and there's different types of channels like point",
    "start": "2360540",
    "end": "2366339"
  },
  {
    "text": "to point or Pub sub so then you know okay so we're going to use messaging well what does the order",
    "start": "2366339",
    "end": "2372820"
  },
  {
    "text": "service look like so one strategy One Design approach is to use sagas which is",
    "start": "2372820",
    "end": "2378579"
  },
  {
    "text": "like this whole other talk or multiple talks but it relies on asynchronous",
    "start": "2378579",
    "end": "2384820"
  },
  {
    "text": "communication so the way an order would get created is as follows post request comes in the order service actually",
    "start": "2384820",
    "end": "2391720"
  },
  {
    "text": "returns immediately so it's telling the client hey I've accepted your request to create an order the order ID is this",
    "start": "2391720",
    "end": "2398980"
  },
  {
    "text": "check back later to see whether the order has been approved or rejected and",
    "start": "2398980",
    "end": "2404140"
  },
  {
    "text": "then the services exchange messages in this example it's events which is a",
    "start": "2404140",
    "end": "2409180"
  },
  {
    "text": "choreography based Saga there's also orchestration based sagas",
    "start": "2409180",
    "end": "2414240"
  },
  {
    "text": "and then the messages go back and forth and the order gets approved or rejected",
    "start": "2414240",
    "end": "2421060"
  },
  {
    "text": "um and this is nice in the sense that availability is much better the order",
    "start": "2421060",
    "end": "2426099"
  },
  {
    "text": "service can actually accept the request to create an order without actually being dependent upon any other service",
    "start": "2426099",
    "end": "2432760"
  },
  {
    "text": "but you've got the complexity of set of sagas um chapter four of my book by the way",
    "start": "2432760",
    "end": "2438940"
  },
  {
    "text": "very detailed explanation um and then the other problem you have is",
    "start": "2438940",
    "end": "2445960"
  },
  {
    "text": "that the response doesn't say whether the order has been approved or rejected which makes the client more complicated",
    "start": "2445960",
    "end": "2453040"
  },
  {
    "text": "the other option is to use replication which goes by the name of cqrs",
    "start": "2453040",
    "end": "2459880"
  },
  {
    "text": "so here the credit limit is actually replicated to the order service and the",
    "start": "2459880",
    "end": "2465579"
  },
  {
    "text": "order service is responsible for keeping track of the available credit even though that's part of the customer the",
    "start": "2465579",
    "end": "2472480"
  },
  {
    "text": "responsibility for it has been moved to the order service so that means the order service can actually validate",
    "start": "2472480",
    "end": "2479560"
  },
  {
    "text": "orders without having to interact directly with the customer service instead there's replication through",
    "start": "2479560",
    "end": "2487240"
  },
  {
    "text": "events um so availability is improved which is good the response actually contains the",
    "start": "2487240",
    "end": "2494560"
  },
  {
    "text": "outcome of validating the order because it can check available credit there and then but now you've got the cost and",
    "start": "2494560",
    "end": "2500619"
  },
  {
    "text": "complexity of replication which I like to think there's only 20",
    "start": "2500619",
    "end": "2506500"
  },
  {
    "text": "million people or 25 million people in Australia so that does that put an upper",
    "start": "2506500",
    "end": "2511900"
  },
  {
    "text": "bound on the number of rows in the table so yeah country specific cost of",
    "start": "2511900",
    "end": "2521079"
  },
  {
    "text": "replication there um",
    "start": "2521079",
    "end": "2525780"
  },
  {
    "text": "okay you know whereas if your Facebook scale replicating with a billions and billions",
    "start": "2526119",
    "end": "2533800"
  },
  {
    "text": "of users um replication would be way more expensive obviously",
    "start": "2533800",
    "end": "2540160"
  },
  {
    "text": "anyway just a thought so a couple of different approaches both leveraging asynchronous messaging which with some",
    "start": "2540160",
    "end": "2548460"
  },
  {
    "text": "downsides but gives you a a system that's much more available and there are",
    "start": "2548460",
    "end": "2554260"
  },
  {
    "text": "some people who are adamant that you must not use synchronous communication between your services and I certainly",
    "start": "2554260",
    "end": "2561099"
  },
  {
    "text": "agree for updates you should really really avoid it queries you can make it",
    "start": "2561099",
    "end": "2566260"
  },
  {
    "text": "work so the last thing I want to talk about really really quickly is another triangle also known as the testing",
    "start": "2566260",
    "end": "2573460"
  },
  {
    "text": "pyramid which you know got Beth talked about earlier in her talk",
    "start": "2573460",
    "end": "2578920"
  },
  {
    "text": "and I have one that looks slightly different I think um but one thing I want to point out is",
    "start": "2578920",
    "end": "2585280"
  },
  {
    "text": "you know you know microservices are there to enable devops devops requires automated testing not only that",
    "start": "2585280",
    "end": "2593760"
  },
  {
    "text": "microservices are complicated and need automated testing so if you're if you",
    "start": "2593760",
    "end": "2599560"
  },
  {
    "text": "attempt to do microservices without automated testing it is self-defeating",
    "start": "2599560",
    "end": "2605140"
  },
  {
    "text": "and it is risky um and sadly I've encountered quite a",
    "start": "2605140",
    "end": "2610420"
  },
  {
    "text": "few companies that are go that have gone down that path and there's an anti-pattern I wrote about which is the",
    "start": "2610420",
    "end": "2616480"
  },
  {
    "text": "flying before walking pattern where they haven't mastered the basics like",
    "start": "2616480",
    "end": "2622540"
  },
  {
    "text": "automated testing um and interestingly there's some surveys that bear this out",
    "start": "2622540",
    "end": "2628660"
  },
  {
    "text": "it's like 72 percent of companies do not extensively do automated testing and",
    "start": "2628660",
    "end": "2635440"
  },
  {
    "text": "ironically it's like 90 percent of companies want to do devops and agile which require testing so there's this",
    "start": "2635440",
    "end": "2641740"
  },
  {
    "text": "total disconnect between the two and I think I said this to Kemp back when I met him like last December you know it's",
    "start": "2641740",
    "end": "2648280"
  },
  {
    "text": "like Juno that's 20 years old and it's sort of like hey Ken when do you think this automated testing thing is going to",
    "start": "2648280",
    "end": "2654339"
  },
  {
    "text": "catch on right um so we need to do better in that",
    "start": "2654339",
    "end": "2661000"
  },
  {
    "text": "regard um you know in this whole concept of a testing pyramid is super important right",
    "start": "2661000",
    "end": "2667240"
  },
  {
    "text": "so it's showing the relative proportions of the types of tests that you need to implement and you want to push the",
    "start": "2667240",
    "end": "2673660"
  },
  {
    "text": "testing down to the bottom of the pyramid as much as possible because those tests like unit tests which are in",
    "start": "2673660",
    "end": "2681339"
  },
  {
    "text": "memory are incredibly reliable they don't fail randomly they execute really really quickly and they're simpler to",
    "start": "2681339",
    "end": "2687880"
  },
  {
    "text": "write whereas at the top it's much more complicated to rate the",
    "start": "2687880",
    "end": "2693280"
  },
  {
    "text": "test they're really slow and they fail just randomly um just curse so that's one key concept",
    "start": "2693280",
    "end": "2702579"
  },
  {
    "text": "and obviously the path from developer machine to production is a deployment Pipeline and you really want to you will",
    "start": "2702579",
    "end": "2710020"
  },
  {
    "text": "have one deployment pipe plane per service you know that that's kind of a key thing",
    "start": "2710020",
    "end": "2717099"
  },
  {
    "text": "so every team is working independently developing testing and deploying their",
    "start": "2717099",
    "end": "2722440"
  },
  {
    "text": "their services independently um and um I was going to talk about",
    "start": "2722440",
    "end": "2728640"
  },
  {
    "text": "consumer-driven contract testing but Beth covered that really really well so I will not in the interest of time",
    "start": "2728640",
    "end": "2734260"
  },
  {
    "text": "repeat that except that I like to use the spring Cloud contract testing framework",
    "start": "2734260",
    "end": "2741119"
  },
  {
    "text": "um [Laughter]",
    "start": "2742000",
    "end": "2746640"
  },
  {
    "text": "oh that's actually I was so excited about testing when I wrote my book that there was there were actually two",
    "start": "2747220",
    "end": "2753760"
  },
  {
    "text": "chapters on testing um",
    "start": "2753760",
    "end": "2758859"
  },
  {
    "text": "I can't remember their names but anyway but one thing I want to talk about which",
    "start": "2758859",
    "end": "2764200"
  },
  {
    "text": "kind of Builds on what Beth talked about is just this whole like we want to have end-to-end testing because yeah that's",
    "start": "2764200",
    "end": "2769599"
  },
  {
    "text": "how we actually verify that our system works properly right you can do it but it's like think it's",
    "start": "2769599",
    "end": "2776380"
  },
  {
    "text": "you know as they found at Rea I think I would all strive to eliminate that and",
    "start": "2776380",
    "end": "2782680"
  },
  {
    "text": "just rely on per service testing um and not have this sort of Roadblock",
    "start": "2782680",
    "end": "2789339"
  },
  {
    "text": "in the way because you think about it right you want to fix a bug in production it has to go through your",
    "start": "2789339",
    "end": "2795880"
  },
  {
    "text": "deployment Pipeline and run through end-to-end testing and that's just gonna slow you down especially if there's",
    "start": "2795880",
    "end": "2802599"
  },
  {
    "text": "random failures and requiring restarts of builds so I want to finish with this",
    "start": "2802599",
    "end": "2808180"
  },
  {
    "text": "thought right um which is",
    "start": "2808180",
    "end": "2813400"
  },
  {
    "text": "yeah test this whole concept of testing and production or or a better way which",
    "start": "2813400",
    "end": "2819579"
  },
  {
    "text": "is maybe more acceptable validation in production right so the idea is I mean",
    "start": "2819579",
    "end": "2826060"
  },
  {
    "text": "there's a bunch of separate ideas but one of the ideas is that you separate out deployment which is the act of",
    "start": "2826060",
    "end": "2833260"
  },
  {
    "text": "getting the code running in production from release which is making it available to end users so you can have",
    "start": "2833260",
    "end": "2841300"
  },
  {
    "text": "code running but it's not actually released plus ver plus",
    "start": "2841300",
    "end": "2846720"
  },
  {
    "text": "comprehensive monitoring of your services along with a high level of",
    "start": "2846720",
    "end": "2851859"
  },
  {
    "text": "automation so that you can quickly deploy or roll back or roll",
    "start": "2851859",
    "end": "2857140"
  },
  {
    "text": "forward your changes so like one strategy is to use a canary deployment where you deploy version two",
    "start": "2857140",
    "end": "2864819"
  },
  {
    "text": "side by side with version one in front behind an intelligent traffic router",
    "start": "2864819",
    "end": "2870640"
  },
  {
    "text": "which could be a service mesh like istio it's great that there's open source projects for this",
    "start": "2870640",
    "end": "2876700"
  },
  {
    "text": "and initially it's not getting any traffic you could test it then you could route some traffic from test users maybe",
    "start": "2876700",
    "end": "2884319"
  },
  {
    "text": "internal users to it and then you can route a small percentage of production",
    "start": "2884319",
    "end": "2891040"
  },
  {
    "text": "traffic to it and then you gradually turn the dial routing more and more",
    "start": "2891040",
    "end": "2897520"
  },
  {
    "text": "traffic to it until eventually it's got a hundred percent of the traffic but you're actually kind of",
    "start": "2897520",
    "end": "2904619"
  },
  {
    "text": "connected in with the monitoring system so if you see excessively High latency",
    "start": "2904619",
    "end": "2910020"
  },
  {
    "text": "or 500s or anything like that you can flip the switch and auto actually",
    "start": "2910020",
    "end": "2915280"
  },
  {
    "text": "automatically roll back to just version one so that's kind of the modern way of",
    "start": "2915280",
    "end": "2921280"
  },
  {
    "text": "doing deployments where you're you're testing in production and there's sort of a whole bunch of writings about that",
    "start": "2921280",
    "end": "2928599"
  },
  {
    "text": "Cindy srideahan at copy construct has written some interesting posts about that",
    "start": "2928599",
    "end": "2934180"
  },
  {
    "text": "anyway that's pretty much all I have to say which is good because I'm like out of time but you know one last thought",
    "start": "2934180",
    "end": "2941020"
  },
  {
    "text": "you know in summary right the goal is rapid reliable delivery of soft frequent",
    "start": "2941020",
    "end": "2946240"
  },
  {
    "text": "delivery of software for these long-lived applications which has architectural requirements which are",
    "start": "2946240",
    "end": "2952660"
  },
  {
    "text": "often just met by the microservice architecture hexagonal architecture is",
    "start": "2952660",
    "end": "2959380"
  },
  {
    "text": "the structure of your services you want to design services that that look like",
    "start": "2959380",
    "end": "2964599"
  },
  {
    "text": "icebergs so you have loose design time coupling you want to use asynchronous",
    "start": "2964599",
    "end": "2969819"
  },
  {
    "text": "messaging so that they are Loosely coupled from a runtime perspective and",
    "start": "2969819",
    "end": "2974920"
  },
  {
    "text": "you want to make use of the test pyramid and push as much of the testing down the",
    "start": "2974920",
    "end": "2980500"
  },
  {
    "text": "pyramid as possible and try and avoid end-to-end testing as much as possible",
    "start": "2980500",
    "end": "2987099"
  },
  {
    "text": "so thank you for listening hope that you found it useful and um please take a",
    "start": "2987099",
    "end": "2992380"
  },
  {
    "text": "look at my book thanks [Applause]",
    "start": "2992380",
    "end": "3002899"
  }
]