[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "thank you i thought if i was clever i could make this introduction last for about 50 minutes and i wouldn't need to write my slides",
    "start": "4960",
    "end": "11519"
  },
  {
    "text": "um i'll keep this to a minimum um yes as as was introduced i i have a",
    "start": "11519",
    "end": "17359"
  },
  {
    "text": "pilot's license i got it when i was 23 and um i still tend to use it as i fly around the world i go on business",
    "start": "17359",
    "end": "23199"
  },
  {
    "text": "and if i got a weekend i'll pick up a plane and try to use it this is new zealand um",
    "start": "23199",
    "end": "28640"
  },
  {
    "start": "27000",
    "end": "32000"
  },
  {
    "text": "landing on the beach this is um it's called white island it's a volcano just off the north coast of",
    "start": "28640",
    "end": "34800"
  },
  {
    "start": "32000",
    "end": "61000"
  },
  {
    "text": "the north island uh about 50 miles off the north coast um it's quite spectacular still smoking as",
    "start": "34800",
    "end": "40480"
  },
  {
    "text": "you can see it's flying over sydney um there's a lot of",
    "start": "40480",
    "end": "45520"
  },
  {
    "text": "superb cities i'll show you another one in a second but um it's amazing to be able to see beautiful cities like this from the air and be",
    "start": "45520",
    "end": "51920"
  },
  {
    "text": "able to sort of fly around them and see them in any way that you want to see them um for those familiar with ayers rock um",
    "start": "51920",
    "end": "58559"
  },
  {
    "text": "this is right next door when i say right next door it's about um 30-40 miles away it's about 600 miles",
    "start": "58559",
    "end": "64320"
  },
  {
    "start": "61000",
    "end": "76000"
  },
  {
    "text": "from alice springs right in the middle of the australian desert um it's called the olga's absolutely",
    "start": "64320",
    "end": "69600"
  },
  {
    "text": "stunning um one of my favorite pastimes when i'm not flying is at the pub",
    "start": "69600",
    "end": "75200"
  },
  {
    "text": "this is combining both this is a little place called uh william creek which has a population of two",
    "start": "75200",
    "end": "80240"
  },
  {
    "start": "76000",
    "end": "650000"
  },
  {
    "text": "it's about 700 miles from the nearest town which has a population of about 10.",
    "start": "80240",
    "end": "85280"
  },
  {
    "text": "um basically land on the road pull up at the pub and uh drink and this was new year's eve",
    "start": "85280",
    "end": "92880"
  },
  {
    "text": "there was a lot of other people there that flew in a few people who drove in for literally a day",
    "start": "92880",
    "end": "98799"
  },
  {
    "text": "plus the nearest farm to this is one-third the size of texas so when americans say things are big",
    "start": "98799",
    "end": "105280"
  },
  {
    "text": "this puts it into perspective anyway sort of land and take off on the road that was fun if anybody knows ross mason",
    "start": "105280",
    "end": "112320"
  },
  {
    "text": "um this is me taking him up in san francisco ross mason's the founder of mule source um so this was last year",
    "start": "112320",
    "end": "120320"
  },
  {
    "text": "basically pottering around in san francisco and last slide to say it's you get some pretty",
    "start": "120320",
    "end": "125680"
  },
  {
    "text": "spectacular views i'm always tempted when i see big bridges like this to be able to fly under them but it's a very quick way of",
    "start": "125680",
    "end": "131920"
  },
  {
    "text": "losing your license but anyway just uh that was a quick introduction what i'm going to go",
    "start": "131920",
    "end": "137920"
  },
  {
    "text": "through today give you a little bit of background i set out to",
    "start": "137920",
    "end": "143599"
  },
  {
    "text": "when i wrote these or originally sit down to write these slides i thought we can go into some really great detail",
    "start": "143599",
    "end": "150319"
  },
  {
    "text": "of the of the jvm and some of the settings and things and anybody that's tried tuning will know",
    "start": "150319",
    "end": "156879"
  },
  {
    "text": "that every single setting on the jvm and there are literally dozens and dozens of them and obviously",
    "start": "156879",
    "end": "162400"
  },
  {
    "text": "the combinations there are thousands tens of thousands of combinations everyone is",
    "start": "162400",
    "end": "167599"
  },
  {
    "text": "precise for your one application on one particular architecture running one particular set of work",
    "start": "167599",
    "end": "173680"
  },
  {
    "text": "in one particular scenario so whatever i tell you is going to be pretty useless when you go home so i thought i'd go back to some of the basics",
    "start": "173680",
    "end": "181120"
  },
  {
    "text": "and last week i was i spent um as i usually do every few weeks over in the us visiting clients and",
    "start": "181120",
    "end": "189519"
  },
  {
    "text": "one of those clients had a performance problem and you expect to go over and sit there",
    "start": "189519",
    "end": "194879"
  },
  {
    "text": "with your head deep in the in the jvm debugging et cetera and there were two parts",
    "start": "194879",
    "end": "200159"
  },
  {
    "text": "that i discovered very very after a day or so maybe on the second day",
    "start": "200159",
    "end": "205360"
  },
  {
    "text": "when we were just basically learning the architecture of what they were doing with our product that it suddenly dawned on me if i'm",
    "start": "205360",
    "end": "212080"
  },
  {
    "text": "going to go and do a talk on performance tuning we should really go back to to some of the basics on this",
    "start": "212080",
    "end": "217680"
  },
  {
    "text": "and the reason being is that we're getting 10 times performance increase just by",
    "start": "217680",
    "end": "224000"
  },
  {
    "text": "looking at some of the architecture and some of the silly things that have been done and i'm sure a lot of you know these but",
    "start": "224000",
    "end": "229920"
  },
  {
    "text": "it's i hope not everybody knows all of these things otherwise you're not going to learn very much but i hope i'll be able",
    "start": "229920",
    "end": "236400"
  },
  {
    "text": "to drill some of these in i've spent a long time since the beginning of java and",
    "start": "236400",
    "end": "241840"
  },
  {
    "text": "a good decade before that in c so there's a lot of experience in here in in terms of things that are important",
    "start": "241840",
    "end": "248400"
  },
  {
    "text": "for tuning and i will go into the jvm and i will go through some of the memory",
    "start": "248400",
    "end": "253599"
  },
  {
    "text": "allocations and and how those work towards the end but i want to spend a bit of time on going back to basics if i",
    "start": "253599",
    "end": "259600"
  },
  {
    "text": "can give you an idea of the problems my typical clients",
    "start": "259600",
    "end": "264960"
  },
  {
    "text": "we're sitting there they're trying to process typically trade data payment data um for those",
    "start": "264960",
    "end": "271280"
  },
  {
    "text": "that know the technologies fix this comes off the exchanges",
    "start": "271280",
    "end": "276479"
  },
  {
    "text": "fpml iso 2002 sepa which is a single european payments area swift is payments et cetera and they're",
    "start": "276479",
    "end": "283199"
  },
  {
    "text": "getting very large amounts of messages if you're looking at ticker data which is price data from um",
    "start": "283199",
    "end": "290320"
  },
  {
    "text": "from the exchanges we're looking at hundreds of thousands per seconds the cme hit 100",
    "start": "290320",
    "end": "295440"
  },
  {
    "text": "000 a second um recently that's not typically uh lasting very",
    "start": "295440",
    "end": "301360"
  },
  {
    "text": "long but we're looking in the high tens of thousands into the hundreds of thousands if we're looking at trade confirmations we're down into the",
    "start": "301360",
    "end": "308320"
  },
  {
    "text": "sort of low thousands per seconds etc so give you an idea of the sorts of stuff we're",
    "start": "308320",
    "end": "313600"
  },
  {
    "text": "trying to process most um low latency traders etc",
    "start": "313600",
    "end": "319199"
  },
  {
    "text": "will do this in c and c plus plus but of course we're we're here and we're looking at java and this is what i'd like to go through",
    "start": "319199",
    "end": "326000"
  },
  {
    "text": "some of the performance aspects and problems now before we we touch on performance it's not just about making things go",
    "start": "326000",
    "end": "331759"
  },
  {
    "text": "faster latency is important it's one of the areas where",
    "start": "331759",
    "end": "337039"
  },
  {
    "text": "a talk i did a number of years ago where just before somebody had quoted on the new york stock exchange that one",
    "start": "337039",
    "end": "343120"
  },
  {
    "text": "millisecond was worth about 100 million dollars i'm sure you can do the calculations but",
    "start": "343120",
    "end": "349759"
  },
  {
    "text": "that's roughly what it's worth in terms of latency this is why they put the machines actually physically in the environment",
    "start": "349759",
    "end": "356240"
  },
  {
    "text": "that they're working on because the speed of light time one millisecond is is about 300 kilometers",
    "start": "356240",
    "end": "363199"
  },
  {
    "text": "and amazon i found an interesting um section here they reckon that about one",
    "start": "363199",
    "end": "369039"
  },
  {
    "text": "or sorry 100 milliseconds of delay on a an e-commerce site is worth about one percent of their",
    "start": "369039",
    "end": "375680"
  },
  {
    "text": "e-commerce business so again you you know the size of amazon that puts it into perspective",
    "start": "375680",
    "end": "381280"
  },
  {
    "text": "um just how important this is and then finally for those of you that don't work in a a",
    "start": "381280",
    "end": "387039"
  },
  {
    "text": "large banking environment or a large company it's not the cost of the software so",
    "start": "387039",
    "end": "393039"
  },
  {
    "text": "much it's not the cost of the machines everybody knows you can go out and buy a decent server for a reasonable price",
    "start": "393039",
    "end": "399360"
  },
  {
    "text": "and of course if you're in a company they'll charge you more it's the cost of running these in production if you look at the average life cycle of",
    "start": "399360",
    "end": "406000"
  },
  {
    "text": "an application you design it you develop it and then it stays in production one would hope for",
    "start": "406000",
    "end": "411360"
  },
  {
    "text": "three four five six years and many businesses will charge",
    "start": "411360",
    "end": "416560"
  },
  {
    "text": "and i'll i use dollars because it's the number that i was quoted that's about twenty thousand 000 per",
    "start": "416560",
    "end": "422720"
  },
  {
    "text": "year per machine to host these that's the cost of of the environment the air conditioning",
    "start": "422720",
    "end": "428240"
  },
  {
    "text": "the people to run these things so that's the cost of one physical machine so if you can reduce that that's the sort of thing that we're going to get",
    "start": "428240",
    "end": "434880"
  },
  {
    "text": "where will aiming for this so i'm not going to give you any silver bullets there is no",
    "start": "434880",
    "end": "440080"
  },
  {
    "text": "java machine parameter that i can basically quote you that will make all of your applications run twice as fast",
    "start": "440080",
    "end": "446479"
  },
  {
    "text": "i'm sorry about that but i will hopefully give you enough information that you can start tweaking some of this",
    "start": "446479",
    "end": "452479"
  },
  {
    "text": "uh for those that haven't played with the jvms or for those even that have but hopefully give you some ideas to to",
    "start": "452479",
    "end": "459199"
  },
  {
    "text": "go back in and look at what you've done um so what i'm going to try and give you out of this is some",
    "start": "459199",
    "end": "465520"
  },
  {
    "text": "ideas and um enough information to go back and do a little bit of tweaking",
    "start": "465520",
    "end": "470879"
  },
  {
    "text": "i want to go back about 20 years i used to teach well not quite 20 years 15 years ago i used",
    "start": "470879",
    "end": "476400"
  },
  {
    "text": "to teach for learning tree java and we used to have this section does anybody recognize",
    "start": "476400",
    "end": "482479"
  },
  {
    "text": "this very pretty uh fractal it's called a mandelbrot fractal and a",
    "start": "482479",
    "end": "487680"
  },
  {
    "text": "few of you do back in about 19 what was it 80s early",
    "start": "487680",
    "end": "492720"
  },
  {
    "text": "80s everyone had t-shirts it was the the big thing that came out it's very colorful",
    "start": "492720",
    "end": "497840"
  },
  {
    "text": "we used to demonstrate as part of the java course basically if you wanted to make java run",
    "start": "497840",
    "end": "503440"
  },
  {
    "text": "faster you had to use jni the java native interface and then you had to call c because c basically ran stuff faster and you come",
    "start": "503440",
    "end": "509759"
  },
  {
    "text": "back into java afterwards so this is one of the exercises we did and effectively what happens for every",
    "start": "509759",
    "end": "515518"
  },
  {
    "text": "single pixel on the screen in that particular one there which is probably about a 600 by 400 resolution",
    "start": "515519",
    "end": "521919"
  },
  {
    "text": "each one of those represents a real and an imaginary number i.e a complex number",
    "start": "521919",
    "end": "527279"
  },
  {
    "text": "and basically to get the color you do a number of iterations and the amount of iterations that",
    "start": "527279",
    "end": "532480"
  },
  {
    "text": "that go before you reach a certain point dictates the color that you're going to get",
    "start": "532480",
    "end": "537920"
  },
  {
    "text": "the formula is beautifully simple there's a little bit of java code there effectively you just pick a point the",
    "start": "537920",
    "end": "543839"
  },
  {
    "text": "point is determined by the the pixel effectively imaginary on the",
    "start": "543839",
    "end": "549200"
  },
  {
    "text": "vertical axis and real on the horizontal axis and you iterate a number of times iterate typically a",
    "start": "549200",
    "end": "556160"
  },
  {
    "text": "thousand times it's black etc etc a few years later in about 2000",
    "start": "556160",
    "end": "563279"
  },
  {
    "text": "it became apparent that this wasn't running much faster and it became a good demonstration of why not to use jni",
    "start": "563279",
    "end": "569600"
  },
  {
    "text": "why you would avoid jni because by this time java had started to catch up and i think",
    "start": "569600",
    "end": "575519"
  },
  {
    "text": "this was the turning point where java became a novelty language to animate your gifs",
    "start": "575519",
    "end": "580880"
  },
  {
    "text": "which was about remember the internet was just coming out so the late 90s we had gif images you",
    "start": "580880",
    "end": "587440"
  },
  {
    "text": "were starting to get images inside your in internet because previously it was email before that and the usernet and pawn obviously",
    "start": "587440",
    "end": "596160"
  },
  {
    "text": "and you could start to animate things and this suddenly started to become",
    "start": "596160",
    "end": "602000"
  },
  {
    "text": "useful in the server side today we can probably render the same thing um i've",
    "start": "602000",
    "end": "608800"
  },
  {
    "text": "seen some pretty impressive bits you can put this even on our ipads or iphones render it in sub seconds",
    "start": "608800",
    "end": "614800"
  },
  {
    "text": "on far superior resolutions the sort of thing now that you can render in 3d on a 1080p screen it still however requires a lot",
    "start": "614800",
    "end": "621440"
  },
  {
    "text": "of calculations um the number doesn't come down but as people have got to understand this",
    "start": "621440",
    "end": "626560"
  },
  {
    "text": "fractal they've got to optimize it and what's most important is that the optimizations on this have",
    "start": "626560",
    "end": "632079"
  },
  {
    "text": "almost exceeded the actual performance enhancements of some of the machines so",
    "start": "632079",
    "end": "637120"
  },
  {
    "text": "the combination of the two have resulted in a lot of performance and on day-to-day work however we're",
    "start": "637120",
    "end": "644240"
  },
  {
    "text": "doing a lot of data processing and it's the data processing that i want to cook into today so again just as a",
    "start": "644240",
    "end": "649920"
  },
  {
    "text": "reminder i want to go back to some of the sort of earlier forms of coding i'm sure a few of you",
    "start": "649920",
    "end": "656320"
  },
  {
    "start": "650000",
    "end": "876000"
  },
  {
    "text": "remember pascal anybody learned pascal when they were kids that's most of it or even recently",
    "start": "656320",
    "end": "662320"
  },
  {
    "text": "actually um as you probably know pascal's string has the length of the string right at",
    "start": "662320",
    "end": "667839"
  },
  {
    "text": "the beginning it's a little bit of a restriction it means that you can't have strings particularly long but you know hey",
    "start": "667839",
    "end": "674079"
  },
  {
    "text": "twitter managed to make a business out of it um and fairly simple it worked and",
    "start": "674079",
    "end": "681440"
  },
  {
    "text": "concatenation etc was relatively easy if you wanted to get the string length of of this you simply just look at the",
    "start": "681440",
    "end": "686560"
  },
  {
    "text": "first byte really really quick looking at c we have the same memory",
    "start": "686560",
    "end": "692399"
  },
  {
    "text": "but effectively we have a null at the end so a zero character at the end now if you want to get the string length",
    "start": "692399",
    "end": "697920"
  },
  {
    "text": "of this obviously you've got to now iterate through the entire string until you find the zero at the end so",
    "start": "697920",
    "end": "702959"
  },
  {
    "text": "it's indeterminate until you've reached the end lots of different advantages and things",
    "start": "702959",
    "end": "708880"
  },
  {
    "text": "and both of these pascal and c are very very simple when you're processing them",
    "start": "708880",
    "end": "714240"
  },
  {
    "text": "there are a few restrictions um remembering these were bytes not characters or chars as you get in java um as java",
    "start": "714240",
    "end": "721519"
  },
  {
    "text": "what is it seven or eight have now changed it's not even two bytes per per chart they've gone into uh three or",
    "start": "721519",
    "end": "727680"
  },
  {
    "text": "four um what effectively this meant that we couldn't actually use the a with the",
    "start": "727680",
    "end": "732959"
  },
  {
    "text": "little i'm sure you have a name for it in denmark the beginning of ahus got a name oh thank you",
    "start": "732959",
    "end": "740800"
  },
  {
    "text": "one of those um we couldn't use it in the earlier days because they simply didn't exist in those in those character",
    "start": "740800",
    "end": "747040"
  },
  {
    "text": "sets you actually had to predetermine the character set before you went in so when we were working with c it made",
    "start": "747040",
    "end": "754959"
  },
  {
    "text": "it relatively easy but also because we're working at a very low level",
    "start": "754959",
    "end": "760480"
  },
  {
    "text": "we're just off machine code here so we're just off the assembly level when we wanted to actually pass do",
    "start": "760480",
    "end": "766800"
  },
  {
    "text": "something very fast or do something that we were doing a lot of or iterating we could manipulate the memory in",
    "start": "766800",
    "end": "773200"
  },
  {
    "text": "exactly the way we wanted to do it so if we wanted to call into a function and the function",
    "start": "773200",
    "end": "778959"
  },
  {
    "text": "and i use the word function as opposed to method because methods come off classes so if we call it into a function",
    "start": "778959",
    "end": "784560"
  },
  {
    "text": "we can actually modify the string in the function without having to return",
    "start": "784560",
    "end": "789600"
  },
  {
    "text": "it afterwards and therefore copy it each time and create new versions so if we wanted to manipulate the",
    "start": "789600",
    "end": "795040"
  },
  {
    "text": "message we could pass it into a function the function could manipulate it and it was relatively simple and also it meant that",
    "start": "795040",
    "end": "802000"
  },
  {
    "text": "when we passed the the um the string we just needed to pass a pointer to it",
    "start": "802000",
    "end": "808240"
  },
  {
    "text": "and then of course you could put a const which meant that you weren't allowed to actually change the content of it and that was a bit like what we have today",
    "start": "808240",
    "end": "815839"
  },
  {
    "text": "and so as we move forward um into the object-oriented languages we",
    "start": "815839",
    "end": "820880"
  },
  {
    "text": "start to effectively put more functionality into these strings",
    "start": "820880",
    "end": "826000"
  },
  {
    "text": "we came away from the the bite array or the char array as we know it",
    "start": "826000",
    "end": "831600"
  },
  {
    "text": "and we started to create an object around these and we started to abstract ourselves um because we're in an environment where",
    "start": "831600",
    "end": "838480"
  },
  {
    "text": "we want to abstract things and we abstract ourselves away from the underlying machine which in some ways is good but in other ways",
    "start": "838480",
    "end": "845040"
  },
  {
    "text": "it's not quite so good when it comes to performance if for example",
    "start": "845040",
    "end": "850880"
  },
  {
    "text": "we wanted to to pass a very large string or a large chunk of memory we didn't",
    "start": "850880",
    "end": "856160"
  },
  {
    "text": "need to do it we just needed to effectively pass a pointer to the same place and",
    "start": "856160",
    "end": "862399"
  },
  {
    "text": "that was it we didn't we didn't need to copy it if we wanted to copy it because we knew",
    "start": "862399",
    "end": "868639"
  },
  {
    "text": "it was memory and we knew it was contiguous we could use a mem copy or something we could actually copy that in a much more efficient way",
    "start": "868639",
    "end": "876160"
  },
  {
    "start": "876000",
    "end": "1000000"
  },
  {
    "text": "and then some interesting things happened as we moved into c plus plus and objective c",
    "start": "876160",
    "end": "881519"
  },
  {
    "text": "before the standard libraries came around we had collection classes we had sets maps lists",
    "start": "881519",
    "end": "888880"
  },
  {
    "text": "linked lists etc and different derivations of those things it was quite interesting because there",
    "start": "888880",
    "end": "895199"
  },
  {
    "text": "were lots of different versions around and they weren't standardized and one of the interesting problems was",
    "start": "895199",
    "end": "900639"
  },
  {
    "text": "if you created a string and you put it into a collection who owns the memory of that string",
    "start": "900639",
    "end": "907279"
  },
  {
    "text": "so if the string goes into the collection and then you delete the string or you you basically",
    "start": "907279",
    "end": "914000"
  },
  {
    "text": "allow the you didn't have a garbage collector but you freed it to allow the memory to be used elsewhere it was good",
    "start": "914000",
    "end": "919199"
  },
  {
    "text": "programming practice the problem was that the collection had a copy of the same bit of memory",
    "start": "919199",
    "end": "924399"
  },
  {
    "text": "so if you came to use that you'd get lots of corruption so we'd have these what windows used to have the general",
    "start": "924399",
    "end": "929759"
  },
  {
    "text": "protection faults etc so this became an issue and you could imagine putting something into a",
    "start": "929759",
    "end": "935839"
  },
  {
    "text": "collection into a set and then something would delete it out of that so whether it was the the putter or the getter that deleted it",
    "start": "935839",
    "end": "942720"
  },
  {
    "text": "or even the list itself that managed it in a different way took a copy and deleted it we had some rather strange things",
    "start": "942720",
    "end": "948639"
  },
  {
    "text": "happening so we started to create these objects which became immutable to make life easier and then",
    "start": "948639",
    "end": "955040"
  },
  {
    "text": "of course along came memory management so when the memory management came along um generally it did a better job than",
    "start": "955040",
    "end": "962720"
  },
  {
    "text": "your average programmer fortunately this was the era when visual basic and things came along and people thought they were programmers",
    "start": "962720",
    "end": "970320"
  },
  {
    "text": "and would effectively go out get jobs and somebody said okay the visual basic's",
    "start": "970320",
    "end": "976639"
  },
  {
    "text": "really good now i want to put you on c and we get an awful lot of problems so memory management is good",
    "start": "976639",
    "end": "982240"
  },
  {
    "text": "um for the lower end of the programming um hierarchy should we say but for those",
    "start": "982240",
    "end": "988880"
  },
  {
    "text": "that were used to being able to manage the memory it created a few issues if we go to strings in java today and",
    "start": "988880",
    "end": "996000"
  },
  {
    "text": "i'll get to the point in a second if we go to strings um message comes off your jms or you read a",
    "start": "996000",
    "end": "1003519"
  },
  {
    "start": "1000000",
    "end": "1044000"
  },
  {
    "text": "file and you read these into strings and you need to now process this so a very simple one here i've got the",
    "start": "1003519",
    "end": "1009040"
  },
  {
    "text": "alphabet and we need to pick little bits out of this alphabet now if we pass the string around that's",
    "start": "1009040",
    "end": "1015199"
  },
  {
    "text": "fine but if we want to take little bits out of this string for example we do alphabet.substring",
    "start": "1015199",
    "end": "1020240"
  },
  {
    "text": "or even if we pass the alphabet in and then we do a substring afterwards don't forget we're getting tens of",
    "start": "1020240",
    "end": "1025600"
  },
  {
    "text": "thousands of messages a second and we might be running multi-threaded and all of these start to create java",
    "start": "1025600",
    "end": "1031120"
  },
  {
    "text": "objects and it's these temporary java objects with the strings that start to cause the problems in the",
    "start": "1031120",
    "end": "1036839"
  },
  {
    "text": "jvm now you could get to this attitude where you could say oh the jvm is going to",
    "start": "1036839",
    "end": "1044000"
  },
  {
    "start": "1044000",
    "end": "1319000"
  },
  {
    "text": "take care of it all that's fine you know i'm used to this you can basically write your code the jvm comes along",
    "start": "1044000",
    "end": "1050559"
  },
  {
    "text": "collect does all the garbage collection and it's pretty good at that and i think what's happened is people have got lazy",
    "start": "1050559",
    "end": "1057039"
  },
  {
    "text": "um people who have not used um or had the experience of how",
    "start": "1057039",
    "end": "1063360"
  },
  {
    "text": "just how fast the machines are that we have today going back to that mandelbrot set",
    "start": "1063360",
    "end": "1069520"
  },
  {
    "text": "we were processing what did i say in a in a vga screen 768",
    "start": "1069520",
    "end": "1076240"
  },
  {
    "text": "or 700 000 floating point operations a second",
    "start": "1076240",
    "end": "1081440"
  },
  {
    "text": "now in those days your machines would run at about five megahertz uh 10 megahertz for a faster one and",
    "start": "1081440",
    "end": "1087919"
  },
  {
    "text": "then you had a floating point unit behind that now that meant that you were getting",
    "start": "1087919",
    "end": "1093120"
  },
  {
    "text": "maybe 10 million floating point of 10 million instructions per second but floating point instructions you were",
    "start": "1093120",
    "end": "1099760"
  },
  {
    "text": "looking at about a million per second so if you wanted to do a 1080p screen and run it a thousand times you're",
    "start": "1099760",
    "end": "1106160"
  },
  {
    "text": "looking at sort of 20 minutes to process this obviously 1080 wasn't around them",
    "start": "1106160",
    "end": "1111280"
  },
  {
    "text": "people have forgotten how fast these machines are that we have today your average laptop is is two point something gigahertz",
    "start": "1111280",
    "end": "1118720"
  },
  {
    "text": "sometimes three gigahertz you've got a floating point unit built into the processor um a co co-hosted processor which is",
    "start": "1118720",
    "end": "1126960"
  },
  {
    "text": "typically chucking out over a billion floating point operations per second so when i go to these clients sometimes",
    "start": "1126960",
    "end": "1133840"
  },
  {
    "text": "they're sitting there saying it's really cool we're getting 200 transactions a second out of it",
    "start": "1133840",
    "end": "1139280"
  },
  {
    "text": "my brain thinks hang on one billion floating point operations a second you're getting 200 out of it",
    "start": "1139280",
    "end": "1145200"
  },
  {
    "text": "what on earth is it doing for the rest of the time it's it's it it's just not",
    "start": "1145200",
    "end": "1151600"
  },
  {
    "text": "possible to go that slow who here can remember oh let's say early 80s it's not a test",
    "start": "1151600",
    "end": "1158720"
  },
  {
    "text": "of how old you are but i mean we had we had machines maximum speed four six",
    "start": "1158720",
    "end": "1164640"
  },
  {
    "text": "megahertz or something we used to get really pretty cool games out of those things um you had to sit and type for days and",
    "start": "1164640",
    "end": "1171679"
  },
  {
    "text": "days out of a magazine to type in all of the stuff they used to get amazing stuff out of that and it",
    "start": "1171679",
    "end": "1177679"
  },
  {
    "text": "got faster and faster and faster people have forgotten that so let me give you an example um if i have",
    "start": "1177679",
    "end": "1184480"
  },
  {
    "text": "a one gigabyte file it's pretty big it's um it'll fit on most",
    "start": "1184480",
    "end": "1189679"
  },
  {
    "text": "usb drives these days if i'd asked the same question five years ago you'd have thought wow i'll take up half my disk",
    "start": "1189679",
    "end": "1196320"
  },
  {
    "text": "drive now you want to it's got a million rows in there each row is roughly 1k in size",
    "start": "1196320",
    "end": "1202000"
  },
  {
    "text": "1k is about four tweets okay put it into perspective",
    "start": "1202000",
    "end": "1208559"
  },
  {
    "text": "just so you understand what it is um so you've got a million of these",
    "start": "1208880",
    "end": "1214320"
  },
  {
    "text": "things now inside that so we've got four million tweets if you like we need to find",
    "start": "1214320",
    "end": "1220880"
  },
  {
    "text": "one particular piece of information and we chuck this into a into a jvm if we like or we can use any",
    "start": "1220880",
    "end": "1226080"
  },
  {
    "text": "other language how long do you think it will take to find that piece of information out of four million tweets",
    "start": "1226080",
    "end": "1232159"
  },
  {
    "text": "um less than a minute launch show of hands please more than a",
    "start": "1232159",
    "end": "1238159"
  },
  {
    "text": "minute anyone oh someone's scratching that's right it's not um",
    "start": "1238159",
    "end": "1243360"
  },
  {
    "text": "less than 10 seconds less than a second it's it",
    "start": "1243360",
    "end": "1250960"
  },
  {
    "text": "should be less than a second to go through i mean sort of i gave you the performance on this the funny thing is if you actually run",
    "start": "1250960",
    "end": "1256640"
  },
  {
    "text": "it in java it typically on an average machine it takes quite a bit more than one second even if you're running j",
    "start": "1256640",
    "end": "1262640"
  },
  {
    "text": "nio but if you run this as a standard unix command as a grep or something you can typically get less than a second",
    "start": "1262640",
    "end": "1269200"
  },
  {
    "text": "in performance out of this and people are engineering these incredibly large",
    "start": "1269200",
    "end": "1275039"
  },
  {
    "text": "complex systems that are taking literally 30 seconds to do this sort of",
    "start": "1275039",
    "end": "1280080"
  },
  {
    "text": "computational um search people are forgetting the sort of performance that we've got",
    "start": "1280080",
    "end": "1285600"
  },
  {
    "text": "so this is when i turn up at a client i look at these things and think no no that's you're an order of",
    "start": "1285600",
    "end": "1291520"
  },
  {
    "text": "magnitude maybe two orders of magnitude out of how fast this should be going so this is why i often sit down and look",
    "start": "1291520",
    "end": "1297360"
  },
  {
    "text": "at the architecture um now this isn't necessarily the solution",
    "start": "1297360",
    "end": "1302400"
  },
  {
    "text": "um i had a chat with my colleague outside and uh we could take something relatively",
    "start": "1302400",
    "end": "1308480"
  },
  {
    "text": "simple like this and i'm sure between the you know everyone here we could come up with probably two dozen different",
    "start": "1308480",
    "end": "1313840"
  },
  {
    "text": "solutions about how to optimize this it's it's just it's meant to be an example",
    "start": "1313840",
    "end": "1319120"
  },
  {
    "start": "1319000",
    "end": "1584000"
  },
  {
    "text": "um so if we take the one here where we're trying to take some information out of it now what what i'm trying to do",
    "start": "1319120",
    "end": "1324799"
  },
  {
    "text": "is basically take a large complex message and extract all of the information out of that message and put it into a java",
    "start": "1324799",
    "end": "1331440"
  },
  {
    "text": "object which has a whole bunch of uh private fields where i've got getters and setters what i'm trying to do is populate that",
    "start": "1331440",
    "end": "1337840"
  },
  {
    "text": "as fast as possible and make it available for somebody who now wants to sort um or put these objects into collections",
    "start": "1337840",
    "end": "1344799"
  },
  {
    "text": "and basically treat them as java so effectively i'm parsing the string putting it into java now if i call the alphabet.substring i",
    "start": "1344799",
    "end": "1351840"
  },
  {
    "text": "create a new string albeit a very small string it's a string with one byte",
    "start": "1351840",
    "end": "1356880"
  },
  {
    "text": "in it and then i pass it to the function the problem is it's a string the overhead of a string is far uh in",
    "start": "1356880",
    "end": "1363679"
  },
  {
    "text": "excess of the one byte that i'm creating now i could take i could pass the string",
    "start": "1363679",
    "end": "1369200"
  },
  {
    "text": "itself if i pass the string itself it's passed by reference if i modify the string it's immutable so",
    "start": "1369200",
    "end": "1376159"
  },
  {
    "text": "it creates yet another string now if i just want to take the information out of it the very quickest way to do it on this",
    "start": "1376159",
    "end": "1382000"
  },
  {
    "text": "incidentally is to effectively pass the string and inside my method is to use a",
    "start": "1382000",
    "end": "1387360"
  },
  {
    "text": "string dot char at get the index of the char and then effectively",
    "start": "1387360",
    "end": "1392480"
  },
  {
    "text": "if i can cast it to a bite if i want to store a bite or a char",
    "start": "1392480",
    "end": "1397840"
  },
  {
    "text": "out of interest how long do you think it would take to run a billion",
    "start": "1397840",
    "end": "1403520"
  },
  {
    "text": "of these uh sitting in this little loop here a billion that's a thousand million for those that are out of touch with",
    "start": "1403520",
    "end": "1410000"
  },
  {
    "text": "billions americans used to have different billions for the english so we'll qualify this a thousand million",
    "start": "1410000",
    "end": "1415280"
  },
  {
    "text": "times um just on this one one thing um",
    "start": "1415280",
    "end": "1420400"
  },
  {
    "text": "greater than 10 seconds ah you're all sitting there with calculators now more than a second",
    "start": "1420400",
    "end": "1428880"
  },
  {
    "text": "actually takes on my laptop 0.06 seconds it's quite impressive 1 billion times to",
    "start": "1428880",
    "end": "1434799"
  },
  {
    "text": "run on this now if i'm extracting all this information out of here i want to get this far more performance",
    "start": "1434799",
    "end": "1441440"
  },
  {
    "text": "so that's the sort of thing that i'm going into the reason i wanted to bring this up is because this was a typical problem we",
    "start": "1441440",
    "end": "1448159"
  },
  {
    "text": "had we were parsing fixed messages and the original parser was in fact",
    "start": "1448159",
    "end": "1455279"
  },
  {
    "text": "the the code was generated and the parser was relatively naive and it used to basically say what am i looking for",
    "start": "1455279",
    "end": "1461600"
  },
  {
    "text": "here using reflection and it would go across and it would look up the information that it's got and then effectively do a",
    "start": "1461600",
    "end": "1467760"
  },
  {
    "text": "set and basically it would run through and positive strings we never really realized that it was an",
    "start": "1467760",
    "end": "1475279"
  },
  {
    "text": "issue because we were quite happily doing a few thousand a second it became apparent when a client needed",
    "start": "1475279",
    "end": "1481600"
  },
  {
    "text": "more than a few thousand a second and all of a sudden we started to look at the parser we got that parser from a few thousand a",
    "start": "1481600",
    "end": "1487760"
  },
  {
    "text": "second up to 138 000 a second just by optim optimizing",
    "start": "1487760",
    "end": "1493279"
  },
  {
    "text": "out these sorts of things now this is not the sort of thing that you can get out of jvm tuning so it's something that",
    "start": "1493279",
    "end": "1500480"
  },
  {
    "text": "i want to sort of put forward when you're looking at the architecture of your system to effectively try and look at some of these smaller things",
    "start": "1500480",
    "end": "1506720"
  },
  {
    "text": "it's very easy to take a very small part out if you can create some junit tests or whatever test framework you like take",
    "start": "1506720",
    "end": "1513120"
  },
  {
    "text": "out some of the areas that you're looking at profile what you've got and i'll go through some tools at the end",
    "start": "1513120",
    "end": "1518159"
  },
  {
    "text": "that we can look at and then start to optimize how you can sort of",
    "start": "1518159",
    "end": "1524080"
  },
  {
    "text": "you may find that this is sort of inherent right across your architecture and the usage of this so it may take quite a bit of extra work",
    "start": "1524080",
    "end": "1530960"
  },
  {
    "text": "is there a question there it wouldn't work for sorry",
    "start": "1530960",
    "end": "1536960"
  },
  {
    "text": "wouldn't work with the danish letters yes and bytes you're right if you were doing chars it would you'd",
    "start": "1538400",
    "end": "1543600"
  },
  {
    "text": "be fine i think i did point that out but it's um yeah if you're doing chars yeah if you",
    "start": "1543600",
    "end": "1549600"
  },
  {
    "text": "if you're doing bites obviously you're going to be chopping off anything that's not ascii but",
    "start": "1549600",
    "end": "1554720"
  },
  {
    "text": "unfortunately the americans got there before we did or before you guys did if the danish had invented the",
    "start": "1554720",
    "end": "1561120"
  },
  {
    "text": "alphabet for computers would have been different",
    "start": "1561120",
    "end": "1566080"
  },
  {
    "text": "perhaps we wouldn't have eight bits and a byte we'd have 10 bits in a byte or something i don't know",
    "start": "1566320",
    "end": "1571360"
  },
  {
    "text": "binary bytes would be interesting um here's another interesting one um at a",
    "start": "1571360",
    "end": "1577919"
  },
  {
    "text": "client that's another thing that sort of got me thinking about this so sitting",
    "start": "1577919",
    "end": "1583120"
  },
  {
    "text": "down at a client site this is this is one of the this is one of the things that got me thinking why should we go directly into the jvm",
    "start": "1583120",
    "end": "1590320"
  },
  {
    "start": "1584000",
    "end": "1651000"
  },
  {
    "text": "so looking at the client system it's it's got some way to go yet it's got another",
    "start": "1590320",
    "end": "1596320"
  },
  {
    "text": "another few weeks they're not really into the tuning or such yet they're basically just finishing it off",
    "start": "1596320",
    "end": "1602480"
  },
  {
    "text": "it's some way short not quite a tenth of the speed that it needs to run out but it's some way short and they're scaling",
    "start": "1602480",
    "end": "1608640"
  },
  {
    "text": "this up and they're basically it's a distributed architecture and this thing's running and i won't quote any numbers because um",
    "start": "1608640",
    "end": "1615200"
  },
  {
    "text": "if these guys watch this video afterwards they'll realize i'm talking about them but let's say it's running a a certain",
    "start": "1615200",
    "end": "1622480"
  },
  {
    "text": "throughput per second so we look at it um and just having a quick look you know how",
    "start": "1622480",
    "end": "1628559"
  },
  {
    "text": "much memory has it got you know what's what's it working on so it's got four gig of ram thinking about pretty good there's not",
    "start": "1628559",
    "end": "1634159"
  },
  {
    "text": "much doesn't run in four gig of ram that's a lot the jx mx was four gig jx",
    "start": "1634159",
    "end": "1641200"
  },
  {
    "text": "ms we'll go through these in a second was 2 gig fine no problems at all no other",
    "start": "1641200",
    "end": "1646320"
  },
  {
    "text": "parameters running minus server i thought fine so i did a little ps",
    "start": "1646320",
    "end": "1653520"
  },
  {
    "start": "1651000",
    "end": "1775000"
  },
  {
    "text": "minus ef which basically gives me all the parameters from everything running on the machine just to see what sort of",
    "start": "1653520",
    "end": "1659120"
  },
  {
    "text": "uh user and system throughput it's picking up on the cpu it's got two cpus in there",
    "start": "1659120",
    "end": "1664320"
  },
  {
    "text": "they're both running relatively fast it's running on linux and i find another java",
    "start": "1664320",
    "end": "1669679"
  },
  {
    "text": "virtual machine running in there and interestingly it's running tomcat and that's running um two gig so we've",
    "start": "1669679",
    "end": "1677840"
  },
  {
    "text": "got four gig on one two gig on the other plus of course the operating system and all the bits",
    "start": "1677840",
    "end": "1682880"
  },
  {
    "text": "that machine was actually only had four gig of ram in it it was a virtual machine so combined the",
    "start": "1682880",
    "end": "1690640"
  },
  {
    "text": "two virtual machines two jvms plus the operating system we had six gig of ram",
    "start": "1690640",
    "end": "1696399"
  },
  {
    "text": "trying to run inside a four gig machine now linux allows you to do that and it simply just swaps it out",
    "start": "1696399",
    "end": "1702799"
  },
  {
    "text": "problem is when it swaps it goes to disk so all of a sudden um we end up with these",
    "start": "1702799",
    "end": "1710559"
  },
  {
    "text": "what's normally fairly quick running in in memory now running on disk and of course this has a very major uh",
    "start": "1710559",
    "end": "1717600"
  },
  {
    "text": "impact on the performance something incredibly simple but because the programmers had written",
    "start": "1717600",
    "end": "1724320"
  },
  {
    "text": "their application to run an environment which they were very sure about and they said it's very easy you just give it this much memory",
    "start": "1724320",
    "end": "1730880"
  },
  {
    "text": "and they pass it on to operations and course operations say well the programmer told me it needs this and that etc but they hadn't",
    "start": "1730880",
    "end": "1737200"
  },
  {
    "text": "actually thought about how everything combines together easy mistake and quite silly when you",
    "start": "1737200",
    "end": "1744080"
  },
  {
    "text": "see it but it certainly made a huge difference to the tuning so",
    "start": "1744080",
    "end": "1751840"
  },
  {
    "text": "effectively if you're hitting the high memory barriers we were getting or looking at about two",
    "start": "1751840",
    "end": "1757679"
  },
  {
    "text": "orders of magnitude out of that one and you could sit and debug that forever and it's you're not going to find anything it's effectively the",
    "start": "1757679",
    "end": "1764240"
  },
  {
    "text": "the overall system that um dictates how this runs um another example of over",
    "start": "1764240",
    "end": "1771120"
  },
  {
    "text": "engineering um i've thought this was quite amusing and had quite a long chat with the guys on this",
    "start": "1771120",
    "end": "1777039"
  },
  {
    "start": "1775000",
    "end": "1882000"
  },
  {
    "text": "one now they're trying to save let's say 20 000 messages a second",
    "start": "1777039",
    "end": "1782240"
  },
  {
    "text": "now the architecture is you read the messages off a queue you safe store them you pass",
    "start": "1782240",
    "end": "1787919"
  },
  {
    "text": "them onto another queue so it's nicely stepped out architecture it's distributed put things into queues so",
    "start": "1787919",
    "end": "1793440"
  },
  {
    "text": "you can distribute them nicely and they've got a safe store so 20 000 messages a second",
    "start": "1793440",
    "end": "1800240"
  },
  {
    "text": "over eight hours of trading i'm reading the numbers off the screen here we're looking at roughly",
    "start": "1800240",
    "end": "1805440"
  },
  {
    "text": "20 meg per second or 72 gigabytes so they decided to use an in-memory database",
    "start": "1805440",
    "end": "1813440"
  },
  {
    "text": "there's lots of them i won't name the one in this particular case but unfortunately as they got towards",
    "start": "1813440",
    "end": "1818480"
  },
  {
    "text": "the sort of pre-production trials there was no problem with their architecture there was no problem with",
    "start": "1818480",
    "end": "1825120"
  },
  {
    "text": "the tools they were using apart from the fact that they didn't have enough knowledge of how to run them",
    "start": "1825120",
    "end": "1831200"
  },
  {
    "text": "but they then had to get lots of people in to try and tune this to get it working and what they were trying to do is to to",
    "start": "1831200",
    "end": "1837279"
  },
  {
    "text": "get this in-memory database working across and sharding and and",
    "start": "1837279",
    "end": "1842720"
  },
  {
    "text": "doing everything it should do to be able to to run this sort of performance now it's not particularly fast performance",
    "start": "1842720",
    "end": "1848799"
  },
  {
    "text": "but it wasn't working and it was creating lots of issues and also when they ran things through several times",
    "start": "1848799",
    "end": "1853919"
  },
  {
    "text": "they retried them they had to then go back to the to the database they had to clear it out if they stopped everything they lost",
    "start": "1853919",
    "end": "1859760"
  },
  {
    "text": "the rest of the day's work etc so it got more and more complicated",
    "start": "1859760",
    "end": "1865039"
  },
  {
    "text": "my question was why didn't you use disk 20 000 messages a second you can write",
    "start": "1865039",
    "end": "1871360"
  },
  {
    "text": "out to even a hard disk what are the olds you know those spinny round things with go rusty when you leave them too long",
    "start": "1871360",
    "end": "1879039"
  },
  {
    "text": "we're an ssd a lot of people are on ssd these days from ssd you can write two gigabytes per",
    "start": "1879039",
    "end": "1887039"
  },
  {
    "start": "1882000",
    "end": "1952000"
  },
  {
    "text": "or so a gigabyte every two seconds so there is absolutely no problem of",
    "start": "1887039",
    "end": "1892159"
  },
  {
    "text": "writing all this stuff to disk so for a safe store we've got clients that are sitting taking these messages off",
    "start": "1892159",
    "end": "1898320"
  },
  {
    "text": "um an average of a hundred thousand a second and they're writing these to disk so my point is here simplicity",
    "start": "1898320",
    "end": "1906399"
  },
  {
    "text": "if you want to get people to to manage disk if you want to replicate the disk it's much much easier than trying to get",
    "start": "1906399",
    "end": "1912480"
  },
  {
    "text": "people that are qualified in this in-memory database that was really a sort of a sideline but",
    "start": "1912480",
    "end": "1918960"
  },
  {
    "text": "it was another thing that sort of got me thinking about you know why are people trying to over engineer these solutions",
    "start": "1918960",
    "end": "1925840"
  },
  {
    "text": "so i want to look at the the jvm what i want to try and get out of this is just give you um i can imagine there's quite a few",
    "start": "1925840",
    "end": "1933039"
  },
  {
    "text": "people in here that know quite a bit about the the jvm but hopefully there's quite a lot of you that um just treat it as a fairly black",
    "start": "1933039",
    "end": "1940399"
  },
  {
    "text": "box and this should hopefully give you a little bit of information about how you can there's a few parameters that you can",
    "start": "1940399",
    "end": "1945679"
  },
  {
    "text": "tinker with and play with that will make quite a difference in the performance of your machines",
    "start": "1945679",
    "end": "1952320"
  },
  {
    "start": "1952000",
    "end": "2533000"
  },
  {
    "text": "so first of all um it's divided into two main sections we've got what's called the permgen",
    "start": "1952320",
    "end": "1959440"
  },
  {
    "text": "permanent generation this is where the classes are loaded up so if you're doing object relational mapping you're messing",
    "start": "1959440",
    "end": "1966799"
  },
  {
    "text": "around with xml you're doing jax b or something like that that's generating huge amounts of",
    "start": "1966799",
    "end": "1972080"
  },
  {
    "text": "classes sometimes an ide that's loading up all of your code you'll very quickly run out of permgent",
    "start": "1972080",
    "end": "1978559"
  },
  {
    "text": "space and you'll get an out of memory permgen and the very simple parameter",
    "start": "1978559",
    "end": "1983919"
  },
  {
    "text": "for this one is just to basically set the permgen size 250 meg is should see",
    "start": "1983919",
    "end": "1990000"
  },
  {
    "text": "you through most usages it's not something that's going to change the speed of your virtual machine",
    "start": "1990000",
    "end": "1996399"
  },
  {
    "text": "it is garbage collected but it's not going to make a massive amount of difference as things are loading up they're fairly",
    "start": "1996399",
    "end": "2001600"
  },
  {
    "text": "slow because they're loaded up from disk anyway typically even if it's um flash drive or something faster ssd",
    "start": "2001600",
    "end": "2009919"
  },
  {
    "text": "so it's not going to make a massive difference but this is one of those things that either goes or it doesn't go now the the more",
    "start": "2009919",
    "end": "2014960"
  },
  {
    "text": "interesting part is the heap now there's two parameters on the heap and there's i notice there's quite a lot",
    "start": "2014960",
    "end": "2022559"
  },
  {
    "text": "of arguments on differing and sort of how to set these these would be the ones that you're",
    "start": "2022559",
    "end": "2027760"
  },
  {
    "text": "probably most used to and interestingly it's not necessarily the higher you set it to the faster it",
    "start": "2027760",
    "end": "2034159"
  },
  {
    "text": "goes it doesn't always work like that um there are some things you can do so let me just explain them there's the",
    "start": "2034159",
    "end": "2041200"
  },
  {
    "text": "xms which is the initial size of the heap that you get and i'll go",
    "start": "2041200",
    "end": "2047200"
  },
  {
    "text": "into the the different types of heap in a second and there's the xmx parameter which is",
    "start": "2047200",
    "end": "2052398"
  },
  {
    "text": "the maximum size now let's assume they're both the same for the moment",
    "start": "2052399",
    "end": "2057599"
  },
  {
    "text": "now if it's very small the jvm behaves differently because it's garbage collecting",
    "start": "2057599",
    "end": "2063358"
  },
  {
    "text": "obviously more frequently because you get close to the the water mark and it garbage collects it doesn't necessarily mean that your",
    "start": "2063359",
    "end": "2069679"
  },
  {
    "text": "stuff runs any slower at all it just runs in a different way",
    "start": "2069679",
    "end": "2075679"
  },
  {
    "text": "so one of the things you can try with this is to reduce your heat until you start to see",
    "start": "2075679",
    "end": "2083358"
  },
  {
    "text": "a fairly notable difference you can also monitor this on some of the tools the j",
    "start": "2083359",
    "end": "2088398"
  },
  {
    "text": "visual vm jstat things like that that you can monitor it with but these are things to try and this is",
    "start": "2088399",
    "end": "2094638"
  },
  {
    "text": "the thing that's going to probably make a reasonable amount of difference to the way your code runs don't just give it",
    "start": "2094639",
    "end": "2100320"
  },
  {
    "text": "four gig or 8 gig or 16 gig if you're running in a 64-bit vm",
    "start": "2100320",
    "end": "2105520"
  },
  {
    "text": "it doesn't necessarily make it go faster and the big difference is that you really will notice if you've got a lot of ram in there and",
    "start": "2105520",
    "end": "2111280"
  },
  {
    "text": "you've set up your your memory in the wrong way between your old memory and new memory which i'll go",
    "start": "2111280",
    "end": "2117920"
  },
  {
    "text": "into in a second you end up with these complete garbage collections now if you're garbage collecting",
    "start": "2117920",
    "end": "2123200"
  },
  {
    "text": "16 gigabytes of ram and something running fast is gonna your machine is going to halt",
    "start": "2123200",
    "end": "2128720"
  },
  {
    "text": "sometimes for several seconds if you're running your machine across running tcp connections or you're",
    "start": "2128720",
    "end": "2135760"
  },
  {
    "text": "expecting users to click on things it will stop nothing will happen at all i'm sure a few of you have seen this",
    "start": "2135760",
    "end": "2142800"
  },
  {
    "text": "so that's one of the problems with making it too big now if you make ms and mx different you'll see this",
    "start": "2142800",
    "end": "2148960"
  },
  {
    "text": "graph on the top right the orangey pink bit is the mx so or",
    "start": "2148960",
    "end": "2154400"
  },
  {
    "text": "it's it's what's been actually used and effectively it's going up to the top to the peak",
    "start": "2154400",
    "end": "2160320"
  },
  {
    "text": "now if you set them both the same what happens is that the memory is allocated immediately",
    "start": "2160320",
    "end": "2166640"
  },
  {
    "text": "now you might not need it but if you're going to probably use it anyway you might as well just give it to your java",
    "start": "2166640",
    "end": "2172000"
  },
  {
    "text": "vm anyway and let it run the advantage of setting them both the same is that you get much more consistent results",
    "start": "2172000",
    "end": "2179520"
  },
  {
    "text": "because you don't know when this step is going to occur as it allocates more memory from the operating system as you can see those",
    "start": "2179520",
    "end": "2185440"
  },
  {
    "text": "steps on the left-hand side of the pink bit as it goes up that's the operating system handing more memory to it",
    "start": "2185440",
    "end": "2190960"
  },
  {
    "text": "so if you wanted to run consistently my personal preference is to set both of these the same and if you're trying to do performance",
    "start": "2190960",
    "end": "2197040"
  },
  {
    "text": "tuning you get a consistent result each time if you're running on a random machine in a user mode obviously you don't want to",
    "start": "2197040",
    "end": "2203839"
  },
  {
    "text": "grab all the memory all the time very quickly so you tend to set ms lower than mx but if you're running",
    "start": "2203839",
    "end": "2209680"
  },
  {
    "text": "in a server my preference would be to set them the same out of the",
    "start": "2209680",
    "end": "2216960"
  },
  {
    "text": "heap we divide this into two more sections so we have the new generation and old generation",
    "start": "2217599",
    "end": "2226320"
  },
  {
    "text": "so what happens in this and the new generation is then subdivided into um three more sections",
    "start": "2226320",
    "end": "2233119"
  },
  {
    "text": "what's called eden and then the survivable so effectively what happens we have these mini garbage collectors if you",
    "start": "2233119",
    "end": "2239599"
  },
  {
    "text": "like so as your temporary let's say strings are allocated",
    "start": "2239599",
    "end": "2245359"
  },
  {
    "text": "um what's happened is that they will be generated inside the eden space you'll get a garbage mini garbage",
    "start": "2245359",
    "end": "2251520"
  },
  {
    "text": "collector will come along and it will move those into the survivable space you've got two of those",
    "start": "2251520",
    "end": "2257680"
  },
  {
    "text": "and effectively eventually once it does a garbage collection of those any objects that survive it'll eventually put those into the old",
    "start": "2257680",
    "end": "2265040"
  },
  {
    "text": "area now if you run out of that altogether because you've got lots of garbage collections going eventually what",
    "start": "2265040",
    "end": "2271280"
  },
  {
    "text": "happens is you get an out of memory and i'm sure every one of us has if you're working in java i've seen that",
    "start": "2271280",
    "end": "2277839"
  },
  {
    "text": "interesting thing is that you can actually set the difference between the old and the new and",
    "start": "2277839",
    "end": "2285359"
  },
  {
    "text": "this is probably the only other jvm parameter that unless you really know what you're doing tinkering around with the jvm",
    "start": "2285359",
    "end": "2292400"
  },
  {
    "text": "this is the only other parameter that you should probably experiment with",
    "start": "2292400",
    "end": "2298160"
  },
  {
    "text": "there is no there is a default value per machine per jvm depending whether you're running client",
    "start": "2298160",
    "end": "2303599"
  },
  {
    "text": "or server depending on the architecture depending on the 32 or 64 bit they tend to be somewhere",
    "start": "2303599",
    "end": "2309200"
  },
  {
    "text": "around 4 6 8 12 something like that so depending on what you're running on",
    "start": "2309200",
    "end": "2315920"
  },
  {
    "text": "this new ratio will be set accordingly but if you you know you're running on a particular",
    "start": "2315920",
    "end": "2322160"
  },
  {
    "text": "server you're running on 64-bit architecture you know the way your program is behaving and assuming you've optimized",
    "start": "2322160",
    "end": "2328960"
  },
  {
    "text": "out all of the strings as i pointed out earlier you can start to experiment with this and it will make quite a significant",
    "start": "2328960",
    "end": "2334800"
  },
  {
    "text": "difference to the performance i'm not talking a few percentage points this could go up 50",
    "start": "2334800",
    "end": "2340000"
  },
  {
    "text": "possibly even more in terms of percentage of performance because of the way that your allocations",
    "start": "2340000",
    "end": "2345359"
  },
  {
    "text": "if you're creating huge numbers of objects you probably want to set new ratio down to something like one or two if it's any larger then",
    "start": "2345359",
    "end": "2353599"
  },
  {
    "text": "you effectively get a lot more large garbage collections coming now just give you an idea here",
    "start": "2353599",
    "end": "2360480"
  },
  {
    "text": "the xmx effectively gives you the new and the old the slightly grayed bits",
    "start": "2360480",
    "end": "2368320"
  },
  {
    "text": "um are the bits of memory which are not yet allocated so effectively it's there",
    "start": "2368320",
    "end": "2373920"
  },
  {
    "text": "it's allowed to use it but it doesn't so we've got the eden the survivable space two of those from one and two",
    "start": "2373920",
    "end": "2380720"
  },
  {
    "text": "or two and from as they're sometimes called you've got the old which is also called tenured and then",
    "start": "2380720",
    "end": "2386880"
  },
  {
    "text": "the permgen permgen tends to stay fixed as i said before it either works or it doesn't work or there is a small bit of garbage",
    "start": "2386880",
    "end": "2392960"
  },
  {
    "text": "collection and effectively it's the new ratio that you can change on these",
    "start": "2392960",
    "end": "2399200"
  },
  {
    "text": "so this is probably the um those two parameters the xmx",
    "start": "2399200",
    "end": "2405359"
  },
  {
    "text": "xms and new ratio probably the three parameters are going to make the biggest difference to your machine finally",
    "start": "2405359",
    "end": "2414400"
  },
  {
    "text": "if you get into if you really want to go into a little bit more fine-tuning you can actually also set the ratio between",
    "start": "2414400",
    "end": "2419520"
  },
  {
    "text": "the new or the eden and the survivable space and again this is assuming that you've really",
    "start": "2419520",
    "end": "2425359"
  },
  {
    "text": "analyzed your application most of the applications i've come across are way too complex and have too",
    "start": "2425359",
    "end": "2430640"
  },
  {
    "text": "many different things going on to actually work out to this level whether we're going to get into this",
    "start": "2430640",
    "end": "2436480"
  },
  {
    "text": "sort of level of tuning and i found far better results from looking at the architecture looking at the code",
    "start": "2436480",
    "end": "2443520"
  },
  {
    "text": "than getting into this level so my warning here would be if you're getting into this sort of level um you really need to know what you're",
    "start": "2443520",
    "end": "2450240"
  },
  {
    "text": "doing you need the sort of pepperdines of the world to be able to reach this sort of level of tuning and",
    "start": "2450240",
    "end": "2455440"
  },
  {
    "text": "actually get something useful out of it i've got a couple more slides here now",
    "start": "2455440",
    "end": "2461040"
  },
  {
    "text": "there's a couple of tools now this is again before you get into",
    "start": "2461040",
    "end": "2467040"
  },
  {
    "text": "tuning your vm you there are some things you need to do look at the architecture some of the",
    "start": "2467040",
    "end": "2472319"
  },
  {
    "text": "points that i made before about the silly mistakes about putting",
    "start": "2472319",
    "end": "2477680"
  },
  {
    "text": "too much memory into a machine or not having enough memory in the machine but to putting too much on the vm",
    "start": "2477680",
    "end": "2483680"
  },
  {
    "text": "not over complex overly complex solutions writing stuff to",
    "start": "2483680",
    "end": "2490319"
  },
  {
    "text": "to complex expensive solutions databases people go over the top to use",
    "start": "2490319",
    "end": "2496400"
  },
  {
    "text": "databases just because you have an official database it's everything's got to go under oracle everything must go onto cybase or whatever it may be",
    "start": "2496400",
    "end": "2504240"
  },
  {
    "text": "quite often disk is perfectly useful oracle stores it in a disk anyway and all it is is mechanism it's a it's a big",
    "start": "2504240",
    "end": "2511040"
  },
  {
    "text": "complicated and unbelievably expensive gadget that gives you an interface between your application",
    "start": "2511040",
    "end": "2517599"
  },
  {
    "text": "and the disk a lot of the stuff that you store can be written straight to disk you can grip it you can index it you can create your own",
    "start": "2517599",
    "end": "2524560"
  },
  {
    "text": "indexes it works just as well so assuming that you've been through your architecture assuming",
    "start": "2524560",
    "end": "2531280"
  },
  {
    "text": "that you've been through your code finally you can start to get down to looking at the java virtual machine and",
    "start": "2531280",
    "end": "2537280"
  },
  {
    "start": "2533000",
    "end": "3300000"
  },
  {
    "text": "and looking at the sort of performance you can get out of it the tools you're going to be using and i would uh hope there's",
    "start": "2537280",
    "end": "2542960"
  },
  {
    "text": "a lot of people use here um j console j visual vm",
    "start": "2542960",
    "end": "2548720"
  },
  {
    "text": "that was a call for hands a few of you yeah um these are tools that will really um",
    "start": "2548720",
    "end": "2555119"
  },
  {
    "text": "give you the ability to understand how your machine's been used that graph that i put up earlier was uh just a cut and",
    "start": "2555119",
    "end": "2561200"
  },
  {
    "text": "paste in fact someone else is cut and paste but i've got some others that i was",
    "start": "2561200",
    "end": "2566240"
  },
  {
    "text": "going to put on there that one just looked nicer than mine but it'll give you an idea as to how the",
    "start": "2566240",
    "end": "2571760"
  },
  {
    "text": "memory is being used you can look at how the threads are being used all of these parameters again don't",
    "start": "2571760",
    "end": "2577040"
  },
  {
    "text": "forget if you're running multi-threaded you need more memory the memory is divided up per thread so if your",
    "start": "2577040",
    "end": "2583839"
  },
  {
    "text": "system runs in one thread and it needs minimum 64 meg of ram",
    "start": "2583839",
    "end": "2589440"
  },
  {
    "text": "let's say we need 128 then if you've got four threads then multiply that up you're going to need",
    "start": "2589440",
    "end": "2594720"
  },
  {
    "text": "512 at least to run in four threads if you're running eight et cetera you'll you'll know how the the maths works",
    "start": "2594720",
    "end": "2601760"
  },
  {
    "text": "so these are the sorts of parameters at the bottom we've got a a large list now i don't suggest you put",
    "start": "2601760",
    "end": "2607520"
  },
  {
    "text": "all of these in one go but these obviously you'll get these slides afterwards so you don't need to jot these things down but",
    "start": "2607520",
    "end": "2613119"
  },
  {
    "text": "these are things which give you quite an impressive list of information about how the garbage",
    "start": "2613119",
    "end": "2619119"
  },
  {
    "text": "collector is working and and how that's working again in combination with something like jstat will show you how the java virtual",
    "start": "2619119",
    "end": "2625200"
  },
  {
    "text": "machine has been used how the space has been allocated how the the",
    "start": "2625200",
    "end": "2631280"
  },
  {
    "text": "eden space the new the old et cetera being used within your machine it'll give you a lot",
    "start": "2631280",
    "end": "2636720"
  },
  {
    "text": "of information as to how to tune your application um one thing i've done typically is",
    "start": "2636720",
    "end": "2642720"
  },
  {
    "text": "well get someone to look at the the code and you think wow we're generating that",
    "start": "2642720",
    "end": "2648240"
  },
  {
    "text": "many objects why is this thing running so slow don't try and tune it at that point to certainly say oh",
    "start": "2648240",
    "end": "2653920"
  },
  {
    "text": "okay we'll just change the new gen parameter and go back to your application and see why",
    "start": "2653920",
    "end": "2659520"
  },
  {
    "text": "you're using so many objects see why you're getting so many objects in a perfect world you should be really you should be looking at object",
    "start": "2659520",
    "end": "2665839"
  },
  {
    "text": "reuse object pools all sorts of things like this to try and bring these down it's going to really make a huge difference to your",
    "start": "2665839",
    "end": "2671359"
  },
  {
    "text": "application so in closing up um if you really want",
    "start": "2671359",
    "end": "2677359"
  },
  {
    "text": "more oomph it's a wonderful english word um out of your application which implies",
    "start": "2677359",
    "end": "2683359"
  },
  {
    "text": "just implies everything just more go my recommendation and again",
    "start": "2683359",
    "end": "2688800"
  },
  {
    "text": "this is over years and years but it was really bought through to me in the last couple of",
    "start": "2688800",
    "end": "2693920"
  },
  {
    "text": "weeks look at your architecture first you're going to get a lot more out of your performance tuning from your",
    "start": "2693920",
    "end": "2700079"
  },
  {
    "text": "architecture particularly if you're working in a distributed architecture if you've got transactions",
    "start": "2700079",
    "end": "2706160"
  },
  {
    "text": "seriously think about taking them out you people overuse transactions you're looking 10 to 100 times worse",
    "start": "2706160",
    "end": "2713680"
  },
  {
    "text": "performance people get obsessed with transactions compensational transactions for example",
    "start": "2713680",
    "end": "2720560"
  },
  {
    "text": "um orm object relational mapping it just kills machines it's you're going from an",
    "start": "2720560",
    "end": "2726240"
  },
  {
    "text": "object-oriented world into a relational mapping world the two of them just don't go together so think about how you can",
    "start": "2726240",
    "end": "2733040"
  },
  {
    "text": "change the architecture of that so once you've once you've been through this once you've gone through these optimizations look at the code",
    "start": "2733040",
    "end": "2740319"
  },
  {
    "text": "look at the java virtual machine the java virtual machine will probably tell you more about how badly your code is",
    "start": "2740319",
    "end": "2745760"
  },
  {
    "text": "written than in fact how badly the jvm is running so take the messages from that go back",
    "start": "2745760",
    "end": "2751839"
  },
  {
    "text": "to your code modify your code and then come back to the jvm when you're absolutely sure it's perfect then start applying some of these jvm",
    "start": "2751839",
    "end": "2758960"
  },
  {
    "text": "tips i think that's pretty much it thank you very much any questions at all",
    "start": "2758960",
    "end": "2766480"
  },
  {
    "text": "nothing at all oh yes i have one over here",
    "start": "2768640",
    "end": "2773680"
  },
  {
    "text": "i'm not an expert to be honest on on the the changes um i still have two very large clients",
    "start": "2773680",
    "end": "2779599"
  },
  {
    "text": "who i think will embarrass and name people like uh um the federal reserve bank and and",
    "start": "2779599",
    "end": "2784960"
  },
  {
    "text": "these sort of places which which are still running on java 1.4",
    "start": "2784960",
    "end": "2790640"
  },
  {
    "text": "when i was at jpmorgan chase we managed to justify using java 1.5 or 5 as it's",
    "start": "2791760",
    "end": "2797440"
  },
  {
    "text": "called now purely on the 21 performance gain the saving was in the well over 10 million dollars",
    "start": "2797440",
    "end": "2805040"
  },
  {
    "text": "in terms of saving so the the clients that we have typically",
    "start": "2805040",
    "end": "2810880"
  },
  {
    "text": "um that we for the code that we generate we had to be very careful not to to go much past",
    "start": "2810880",
    "end": "2816319"
  },
  {
    "text": "um five i have java 1.7 i'm using java 1.7 but unfortunately for",
    "start": "2816319",
    "end": "2822319"
  },
  {
    "text": "for my usage um it tends to be a sort of a pipe dream to be able to put it into to something else so i'm afraid i'm not",
    "start": "2822319",
    "end": "2828480"
  },
  {
    "text": "an expert on the on the changes other than the sort of nice new features",
    "start": "2828480",
    "end": "2834400"
  },
  {
    "text": "i'm sorry i can't give you a huge amount of information on that but i know some colleagues who can if you're interested i can put you in touch",
    "start": "2834400",
    "end": "2842400"
  },
  {
    "text": "another question here so a question was um looking at some um",
    "start": "2842720",
    "end": "2850559"
  },
  {
    "text": "looking at the sort of optimizations which i had there on on bytes and strings uh they were meant to be sort of an example",
    "start": "2850559",
    "end": "2856240"
  },
  {
    "text": "the examples were sort of typical code that i found what are the",
    "start": "2856240",
    "end": "2862480"
  },
  {
    "text": "recommendations for xml parsing um i must admit i'm slightly biased on this",
    "start": "2862640",
    "end": "2868079"
  },
  {
    "text": "one because one of my companies is c24 which is outside and effectively the way",
    "start": "2868079",
    "end": "2874800"
  },
  {
    "text": "it's uh it's one of the solutions um effectively it's like java binding so jax b jubex these typical products",
    "start": "2874800",
    "end": "2883280"
  },
  {
    "text": "that take a java sorry an xml schema they create an exact java mapping to",
    "start": "2883280",
    "end": "2890000"
  },
  {
    "text": "that and effectively pass it there's a lot of things when you get involved in an xml obviously that you want to be",
    "start": "2890000",
    "end": "2896559"
  },
  {
    "text": "careful of one is performance i'm sure you're well well aware and familiar with",
    "start": "2896559",
    "end": "2902559"
  },
  {
    "text": "differences between dom um java binding and sax parsers for example",
    "start": "2902559",
    "end": "2908640"
  },
  {
    "text": "if you're just taking information out of it sex parses far quicker if you're taking lots of information out you end up parsing it multiple times",
    "start": "2908640",
    "end": "2915760"
  },
  {
    "text": "then you've got validation to worry about and things like that so if i had a sales hat on which i don't",
    "start": "2915760",
    "end": "2921760"
  },
  {
    "text": "because i'm a cto rather than a salesperson i would say go over to the c24 counter and have a look on there it's",
    "start": "2921760",
    "end": "2927520"
  },
  {
    "text": "it's our clients and the ones that that i'm representing here use that",
    "start": "2927520",
    "end": "2932960"
  },
  {
    "text": "product to do their complex xml parsing so that includes the sort of um iso 2022 fpml those sorts of",
    "start": "2932960",
    "end": "2940839"
  },
  {
    "text": "things there are things that will pass it quicker there is nothing i know of that",
    "start": "2940839",
    "end": "2946079"
  },
  {
    "text": "will validate it quicker when i talk about validation i mean beyond schema validation",
    "start": "2946079",
    "end": "2951599"
  },
  {
    "text": "we still use something like xerxes for schema validation so it's not a one-off simple answer but",
    "start": "2951599",
    "end": "2957599"
  },
  {
    "text": "uh that hopefully gives you some idea any more questions yeah over here",
    "start": "2957599",
    "end": "2964000"
  },
  {
    "text": "closures and what have you yeah did everyone hear that",
    "start": "2964480",
    "end": "2969599"
  },
  {
    "text": "i heard it perfectly what's wrong with your ears um somebody with a foreign accent",
    "start": "2969760",
    "end": "2975680"
  },
  {
    "text": "similar to mine but much further south by the sounds of it who obviously knows an awful lot more about java 7 than i do um",
    "start": "2975680",
    "end": "2982480"
  },
  {
    "text": "talking about uh the advice in a concurrent um architecture and in concurrency is is",
    "start": "2982480",
    "end": "2988960"
  },
  {
    "text": "actually um if i sort of understood you right is actually more towards um or the performance is more towards",
    "start": "2988960",
    "end": "2996079"
  },
  {
    "text": "generating lots of small objects when you've got things like closures where the functions are",
    "start": "2996079",
    "end": "3001839"
  },
  {
    "text": "effectively generating classes as well and then you've got things like the concurrent garbage collector which comes",
    "start": "3001839",
    "end": "3006960"
  },
  {
    "text": "along as well so um again this isn't a this isn't a one-off piece of advice don't use lots",
    "start": "3006960",
    "end": "3013040"
  },
  {
    "text": "of objects this was a piece of advice for the situation that we had in particular on this particular one",
    "start": "3013040",
    "end": "3018240"
  },
  {
    "text": "obviously we do run multi-threaded and this particular problem that we had was was in the",
    "start": "3018240",
    "end": "3023359"
  },
  {
    "text": "object creation um so sorry what's your name josh is josh yes i saw you outside so",
    "start": "3023359",
    "end": "3030960"
  },
  {
    "text": "josh if you want to ask questions she's sitting over there anymore more questions",
    "start": "3030960",
    "end": "3039119"
  },
  {
    "text": "you had a question or was that visual gc plugin",
    "start": "3039119",
    "end": "3045359"
  },
  {
    "text": "okay so visual gc plugin for the uh jvisual vm i did notice a lot of plugins so it's",
    "start": "3046240",
    "end": "3053520"
  },
  {
    "text": "obviously one of the ones to use gives you a lot of um",
    "start": "3053520",
    "end": "3058000"
  },
  {
    "text": "so thread stack size how do we optimize that um it's difficult once i think anybody",
    "start": "3060880",
    "end": "3068079"
  },
  {
    "text": "working in a multi-threaded environment will tell you is it's one of those hit-and-miss things as soon as you start putting um you start",
    "start": "3068079",
    "end": "3074559"
  },
  {
    "text": "looking into the threads it becomes a bit like sort of heisenberg's uncertainty principle as soon as you",
    "start": "3074559",
    "end": "3080240"
  },
  {
    "text": "start looking at it everything changes and it's uh you try and hit something um my experience is purely hit and miss on on",
    "start": "3080240",
    "end": "3087040"
  },
  {
    "text": "that side again that's the sort of thing that i would we engage people like um martin and",
    "start": "3087040",
    "end": "3095680"
  },
  {
    "text": "and co pepperdine to to basically look into these sort of things for for literally a month um to to work on this and those those",
    "start": "3095680",
    "end": "3103200"
  },
  {
    "text": "guys uh run quite a lot of uh courses on the really deep level performance tuning",
    "start": "3103200",
    "end": "3111280"
  },
  {
    "text": "any more questions at all one over here",
    "start": "3111280",
    "end": "3115440"
  },
  {
    "text": "um that's impressive so um",
    "start": "3117680",
    "end": "3122800"
  },
  {
    "text": "a um he has a stop the world garbage collection for 30 seconds actually i'd like to take that and use that as an",
    "start": "3123280",
    "end": "3128559"
  },
  {
    "text": "example that's that's an impressive one 30 second garbage collection and how would i go about stopping it",
    "start": "3128559",
    "end": "3133760"
  },
  {
    "text": "um you can take snapshots so you can use a lot of these tools effectively to take snapshots",
    "start": "3133760",
    "end": "3139599"
  },
  {
    "text": "um and my advice on this would be effect i mean your your old memory is is",
    "start": "3139599",
    "end": "3146800"
  },
  {
    "text": "obviously getting used far too quickly so you may something as simple as looking at the",
    "start": "3146800",
    "end": "3152720"
  },
  {
    "text": "new ratio might start uh helping you with this but effectively the",
    "start": "3152720",
    "end": "3157760"
  },
  {
    "text": "the tools will give you a much better view of what's going on inside them some of the um parameters that you had",
    "start": "3157760",
    "end": "3163760"
  },
  {
    "text": "up there i just before embarrassing screensavers come up",
    "start": "3163760",
    "end": "3170640"
  },
  {
    "text": "put this back on you get lots of pictures of my kids otherwise",
    "start": "3171119",
    "end": "3176640"
  },
  {
    "text": "the tools will give you a lot of information uh you can you can do uh complete um memory dumps um heat",
    "start": "3178240",
    "end": "3185839"
  },
  {
    "text": "heat dumps etc uh that would i mean that would give you some sort of visualization as to what's going on",
    "start": "3185839",
    "end": "3192839"
  },
  {
    "text": "inside and those those are things which you can run on a you can if you run the jstat",
    "start": "3192839",
    "end": "3198559"
  },
  {
    "text": "for example you can run that every every second or more you can effectively see how how your memory usage is being",
    "start": "3198559",
    "end": "3204720"
  },
  {
    "text": "used up i mean that would imply effectively depending whether you're running server",
    "start": "3204720",
    "end": "3209920"
  },
  {
    "text": "or client mode on the jvm depending on the ratio effectively what's happening is you're probably",
    "start": "3209920",
    "end": "3215920"
  },
  {
    "text": "filling up your old generation which is i would imagine fairly large if",
    "start": "3215920",
    "end": "3221040"
  },
  {
    "text": "you're getting 30 seconds what are you got 16 gig or more",
    "start": "3221040",
    "end": "3226640"
  },
  {
    "text": "one gig you've got a very slow machine then or or it's it's busy is it multi-threaded",
    "start": "3228319",
    "end": "3234640"
  },
  {
    "text": "yeah it's multi the problem with a lot of these things is um when you start to really get close to the limits",
    "start": "3234640",
    "end": "3240480"
  },
  {
    "text": "you've got the the virtual machine sort of competing uh with the with the",
    "start": "3240480",
    "end": "3245680"
  },
  {
    "text": "garbage collectors sorry you've got the garbage collector competing with your application as well um and these you'll get lots of many",
    "start": "3245680",
    "end": "3253200"
  },
  {
    "text": "um garbage collections as well i mean there's no one answer for that you maybe you'll find the concurrent garbage",
    "start": "3253200",
    "end": "3259839"
  },
  {
    "text": "collector will pick up stuff quicker i would suggest you probably the initial things to look at would be",
    "start": "3259839",
    "end": "3265599"
  },
  {
    "text": "trying to get a an idea of your heap usage and looking at the",
    "start": "3265599",
    "end": "3272000"
  },
  {
    "text": "different ratios of the new new generation to the old generation",
    "start": "3272000",
    "end": "3277040"
  },
  {
    "text": "but you should be able to knock that down quite considerably i would i would hope to under a second",
    "start": "3277359",
    "end": "3283200"
  },
  {
    "text": "any more questions are we doing for time we're good for time so thank you very",
    "start": "3283200",
    "end": "3288559"
  },
  {
    "text": "much",
    "start": "3290839",
    "end": "3293839"
  },
  {
    "text": "you",
    "start": "3298960",
    "end": "3301040"
  }
]